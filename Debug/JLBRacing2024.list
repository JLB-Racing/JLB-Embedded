
JLBRacing2024.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00025b4c  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000adc  08025d50  08025d50  00035d50  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0802682c  0802682c  0004010c  2**0
                  CONTENTS
  4 .ARM          00000008  0802682c  0802682c  0003682c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08026834  08026834  0004010c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000010  08026834  08026834  00036834  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000010  08026844  08026844  00036844  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000010c  20000000  08026854  00040000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005d78  20000110  08026960  00040110  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20005e88  08026960  00045e88  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  0004010c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00040142  2**0
                  CONTENTS, READONLY
 13 .debug_info   0005c224  00000000  00000000  00040185  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00008928  00000000  00000000  0009c3a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000041d0  00000000  00000000  000a4cd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000032e2  00000000  00000000  000a8ea8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00039971  00000000  00000000  000ac18a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000457ba  00000000  00000000  000e5afb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0016ad92  00000000  00000000  0012b2b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00013b5c  00000000  00000000  00296048  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000048  00000000  00000000  002a9ba4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000110 	.word	0x20000110
 800021c:	00000000 	.word	0x00000000
 8000220:	08025d34 	.word	0x08025d34

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000114 	.word	0x20000114
 800023c:	08025d34 	.word	0x08025d34

08000240 <strcmp>:
 8000240:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000244:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000248:	2a01      	cmp	r2, #1
 800024a:	bf28      	it	cs
 800024c:	429a      	cmpcs	r2, r3
 800024e:	d0f7      	beq.n	8000240 <strcmp>
 8000250:	1ad0      	subs	r0, r2, r3
 8000252:	4770      	bx	lr

08000254 <strlen>:
 8000254:	4603      	mov	r3, r0
 8000256:	f813 2b01 	ldrb.w	r2, [r3], #1
 800025a:	2a00      	cmp	r2, #0
 800025c:	d1fb      	bne.n	8000256 <strlen+0x2>
 800025e:	1a18      	subs	r0, r3, r0
 8000260:	3801      	subs	r0, #1
 8000262:	4770      	bx	lr

08000264 <__aeabi_drsub>:
 8000264:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000268:	e002      	b.n	8000270 <__adddf3>
 800026a:	bf00      	nop

0800026c <__aeabi_dsub>:
 800026c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000270 <__adddf3>:
 8000270:	b530      	push	{r4, r5, lr}
 8000272:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000276:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800027a:	ea94 0f05 	teq	r4, r5
 800027e:	bf08      	it	eq
 8000280:	ea90 0f02 	teqeq	r0, r2
 8000284:	bf1f      	itttt	ne
 8000286:	ea54 0c00 	orrsne.w	ip, r4, r0
 800028a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800028e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000292:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000296:	f000 80e2 	beq.w	800045e <__adddf3+0x1ee>
 800029a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800029e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002a2:	bfb8      	it	lt
 80002a4:	426d      	neglt	r5, r5
 80002a6:	dd0c      	ble.n	80002c2 <__adddf3+0x52>
 80002a8:	442c      	add	r4, r5
 80002aa:	ea80 0202 	eor.w	r2, r0, r2
 80002ae:	ea81 0303 	eor.w	r3, r1, r3
 80002b2:	ea82 0000 	eor.w	r0, r2, r0
 80002b6:	ea83 0101 	eor.w	r1, r3, r1
 80002ba:	ea80 0202 	eor.w	r2, r0, r2
 80002be:	ea81 0303 	eor.w	r3, r1, r3
 80002c2:	2d36      	cmp	r5, #54	; 0x36
 80002c4:	bf88      	it	hi
 80002c6:	bd30      	pophi	{r4, r5, pc}
 80002c8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002cc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002d0:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002d4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002d8:	d002      	beq.n	80002e0 <__adddf3+0x70>
 80002da:	4240      	negs	r0, r0
 80002dc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002e0:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002e4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002e8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002ec:	d002      	beq.n	80002f4 <__adddf3+0x84>
 80002ee:	4252      	negs	r2, r2
 80002f0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002f4:	ea94 0f05 	teq	r4, r5
 80002f8:	f000 80a7 	beq.w	800044a <__adddf3+0x1da>
 80002fc:	f1a4 0401 	sub.w	r4, r4, #1
 8000300:	f1d5 0e20 	rsbs	lr, r5, #32
 8000304:	db0d      	blt.n	8000322 <__adddf3+0xb2>
 8000306:	fa02 fc0e 	lsl.w	ip, r2, lr
 800030a:	fa22 f205 	lsr.w	r2, r2, r5
 800030e:	1880      	adds	r0, r0, r2
 8000310:	f141 0100 	adc.w	r1, r1, #0
 8000314:	fa03 f20e 	lsl.w	r2, r3, lr
 8000318:	1880      	adds	r0, r0, r2
 800031a:	fa43 f305 	asr.w	r3, r3, r5
 800031e:	4159      	adcs	r1, r3
 8000320:	e00e      	b.n	8000340 <__adddf3+0xd0>
 8000322:	f1a5 0520 	sub.w	r5, r5, #32
 8000326:	f10e 0e20 	add.w	lr, lr, #32
 800032a:	2a01      	cmp	r2, #1
 800032c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000330:	bf28      	it	cs
 8000332:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	18c0      	adds	r0, r0, r3
 800033c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000340:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000344:	d507      	bpl.n	8000356 <__adddf3+0xe6>
 8000346:	f04f 0e00 	mov.w	lr, #0
 800034a:	f1dc 0c00 	rsbs	ip, ip, #0
 800034e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000352:	eb6e 0101 	sbc.w	r1, lr, r1
 8000356:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800035a:	d31b      	bcc.n	8000394 <__adddf3+0x124>
 800035c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000360:	d30c      	bcc.n	800037c <__adddf3+0x10c>
 8000362:	0849      	lsrs	r1, r1, #1
 8000364:	ea5f 0030 	movs.w	r0, r0, rrx
 8000368:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800036c:	f104 0401 	add.w	r4, r4, #1
 8000370:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000374:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000378:	f080 809a 	bcs.w	80004b0 <__adddf3+0x240>
 800037c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000380:	bf08      	it	eq
 8000382:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000386:	f150 0000 	adcs.w	r0, r0, #0
 800038a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800038e:	ea41 0105 	orr.w	r1, r1, r5
 8000392:	bd30      	pop	{r4, r5, pc}
 8000394:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000398:	4140      	adcs	r0, r0
 800039a:	eb41 0101 	adc.w	r1, r1, r1
 800039e:	3c01      	subs	r4, #1
 80003a0:	bf28      	it	cs
 80003a2:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003a6:	d2e9      	bcs.n	800037c <__adddf3+0x10c>
 80003a8:	f091 0f00 	teq	r1, #0
 80003ac:	bf04      	itt	eq
 80003ae:	4601      	moveq	r1, r0
 80003b0:	2000      	moveq	r0, #0
 80003b2:	fab1 f381 	clz	r3, r1
 80003b6:	bf08      	it	eq
 80003b8:	3320      	addeq	r3, #32
 80003ba:	f1a3 030b 	sub.w	r3, r3, #11
 80003be:	f1b3 0220 	subs.w	r2, r3, #32
 80003c2:	da0c      	bge.n	80003de <__adddf3+0x16e>
 80003c4:	320c      	adds	r2, #12
 80003c6:	dd08      	ble.n	80003da <__adddf3+0x16a>
 80003c8:	f102 0c14 	add.w	ip, r2, #20
 80003cc:	f1c2 020c 	rsb	r2, r2, #12
 80003d0:	fa01 f00c 	lsl.w	r0, r1, ip
 80003d4:	fa21 f102 	lsr.w	r1, r1, r2
 80003d8:	e00c      	b.n	80003f4 <__adddf3+0x184>
 80003da:	f102 0214 	add.w	r2, r2, #20
 80003de:	bfd8      	it	le
 80003e0:	f1c2 0c20 	rsble	ip, r2, #32
 80003e4:	fa01 f102 	lsl.w	r1, r1, r2
 80003e8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003ec:	bfdc      	itt	le
 80003ee:	ea41 010c 	orrle.w	r1, r1, ip
 80003f2:	4090      	lslle	r0, r2
 80003f4:	1ae4      	subs	r4, r4, r3
 80003f6:	bfa2      	ittt	ge
 80003f8:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003fc:	4329      	orrge	r1, r5
 80003fe:	bd30      	popge	{r4, r5, pc}
 8000400:	ea6f 0404 	mvn.w	r4, r4
 8000404:	3c1f      	subs	r4, #31
 8000406:	da1c      	bge.n	8000442 <__adddf3+0x1d2>
 8000408:	340c      	adds	r4, #12
 800040a:	dc0e      	bgt.n	800042a <__adddf3+0x1ba>
 800040c:	f104 0414 	add.w	r4, r4, #20
 8000410:	f1c4 0220 	rsb	r2, r4, #32
 8000414:	fa20 f004 	lsr.w	r0, r0, r4
 8000418:	fa01 f302 	lsl.w	r3, r1, r2
 800041c:	ea40 0003 	orr.w	r0, r0, r3
 8000420:	fa21 f304 	lsr.w	r3, r1, r4
 8000424:	ea45 0103 	orr.w	r1, r5, r3
 8000428:	bd30      	pop	{r4, r5, pc}
 800042a:	f1c4 040c 	rsb	r4, r4, #12
 800042e:	f1c4 0220 	rsb	r2, r4, #32
 8000432:	fa20 f002 	lsr.w	r0, r0, r2
 8000436:	fa01 f304 	lsl.w	r3, r1, r4
 800043a:	ea40 0003 	orr.w	r0, r0, r3
 800043e:	4629      	mov	r1, r5
 8000440:	bd30      	pop	{r4, r5, pc}
 8000442:	fa21 f004 	lsr.w	r0, r1, r4
 8000446:	4629      	mov	r1, r5
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	f094 0f00 	teq	r4, #0
 800044e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000452:	bf06      	itte	eq
 8000454:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000458:	3401      	addeq	r4, #1
 800045a:	3d01      	subne	r5, #1
 800045c:	e74e      	b.n	80002fc <__adddf3+0x8c>
 800045e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000462:	bf18      	it	ne
 8000464:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000468:	d029      	beq.n	80004be <__adddf3+0x24e>
 800046a:	ea94 0f05 	teq	r4, r5
 800046e:	bf08      	it	eq
 8000470:	ea90 0f02 	teqeq	r0, r2
 8000474:	d005      	beq.n	8000482 <__adddf3+0x212>
 8000476:	ea54 0c00 	orrs.w	ip, r4, r0
 800047a:	bf04      	itt	eq
 800047c:	4619      	moveq	r1, r3
 800047e:	4610      	moveq	r0, r2
 8000480:	bd30      	pop	{r4, r5, pc}
 8000482:	ea91 0f03 	teq	r1, r3
 8000486:	bf1e      	ittt	ne
 8000488:	2100      	movne	r1, #0
 800048a:	2000      	movne	r0, #0
 800048c:	bd30      	popne	{r4, r5, pc}
 800048e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000492:	d105      	bne.n	80004a0 <__adddf3+0x230>
 8000494:	0040      	lsls	r0, r0, #1
 8000496:	4149      	adcs	r1, r1
 8000498:	bf28      	it	cs
 800049a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800049e:	bd30      	pop	{r4, r5, pc}
 80004a0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004a4:	bf3c      	itt	cc
 80004a6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004aa:	bd30      	popcc	{r4, r5, pc}
 80004ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004b0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004b4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004b8:	f04f 0000 	mov.w	r0, #0
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004c2:	bf1a      	itte	ne
 80004c4:	4619      	movne	r1, r3
 80004c6:	4610      	movne	r0, r2
 80004c8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004cc:	bf1c      	itt	ne
 80004ce:	460b      	movne	r3, r1
 80004d0:	4602      	movne	r2, r0
 80004d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004d6:	bf06      	itte	eq
 80004d8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004dc:	ea91 0f03 	teqeq	r1, r3
 80004e0:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004e4:	bd30      	pop	{r4, r5, pc}
 80004e6:	bf00      	nop

080004e8 <__aeabi_ui2d>:
 80004e8:	f090 0f00 	teq	r0, #0
 80004ec:	bf04      	itt	eq
 80004ee:	2100      	moveq	r1, #0
 80004f0:	4770      	bxeq	lr
 80004f2:	b530      	push	{r4, r5, lr}
 80004f4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004f8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004fc:	f04f 0500 	mov.w	r5, #0
 8000500:	f04f 0100 	mov.w	r1, #0
 8000504:	e750      	b.n	80003a8 <__adddf3+0x138>
 8000506:	bf00      	nop

08000508 <__aeabi_i2d>:
 8000508:	f090 0f00 	teq	r0, #0
 800050c:	bf04      	itt	eq
 800050e:	2100      	moveq	r1, #0
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000518:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800051c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000520:	bf48      	it	mi
 8000522:	4240      	negmi	r0, r0
 8000524:	f04f 0100 	mov.w	r1, #0
 8000528:	e73e      	b.n	80003a8 <__adddf3+0x138>
 800052a:	bf00      	nop

0800052c <__aeabi_f2d>:
 800052c:	0042      	lsls	r2, r0, #1
 800052e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000532:	ea4f 0131 	mov.w	r1, r1, rrx
 8000536:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800053a:	bf1f      	itttt	ne
 800053c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000540:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000544:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000548:	4770      	bxne	lr
 800054a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800054e:	bf08      	it	eq
 8000550:	4770      	bxeq	lr
 8000552:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000556:	bf04      	itt	eq
 8000558:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000564:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000568:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800056c:	e71c      	b.n	80003a8 <__adddf3+0x138>
 800056e:	bf00      	nop

08000570 <__aeabi_ul2d>:
 8000570:	ea50 0201 	orrs.w	r2, r0, r1
 8000574:	bf08      	it	eq
 8000576:	4770      	bxeq	lr
 8000578:	b530      	push	{r4, r5, lr}
 800057a:	f04f 0500 	mov.w	r5, #0
 800057e:	e00a      	b.n	8000596 <__aeabi_l2d+0x16>

08000580 <__aeabi_l2d>:
 8000580:	ea50 0201 	orrs.w	r2, r0, r1
 8000584:	bf08      	it	eq
 8000586:	4770      	bxeq	lr
 8000588:	b530      	push	{r4, r5, lr}
 800058a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800058e:	d502      	bpl.n	8000596 <__aeabi_l2d+0x16>
 8000590:	4240      	negs	r0, r0
 8000592:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000596:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800059a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800059e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005a2:	f43f aed8 	beq.w	8000356 <__adddf3+0xe6>
 80005a6:	f04f 0203 	mov.w	r2, #3
 80005aa:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ae:	bf18      	it	ne
 80005b0:	3203      	addne	r2, #3
 80005b2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005b6:	bf18      	it	ne
 80005b8:	3203      	addne	r2, #3
 80005ba:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005be:	f1c2 0320 	rsb	r3, r2, #32
 80005c2:	fa00 fc03 	lsl.w	ip, r0, r3
 80005c6:	fa20 f002 	lsr.w	r0, r0, r2
 80005ca:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ce:	ea40 000e 	orr.w	r0, r0, lr
 80005d2:	fa21 f102 	lsr.w	r1, r1, r2
 80005d6:	4414      	add	r4, r2
 80005d8:	e6bd      	b.n	8000356 <__adddf3+0xe6>
 80005da:	bf00      	nop

080005dc <__aeabi_dmul>:
 80005dc:	b570      	push	{r4, r5, r6, lr}
 80005de:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005e2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005e6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005ea:	bf1d      	ittte	ne
 80005ec:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005f0:	ea94 0f0c 	teqne	r4, ip
 80005f4:	ea95 0f0c 	teqne	r5, ip
 80005f8:	f000 f8de 	bleq	80007b8 <__aeabi_dmul+0x1dc>
 80005fc:	442c      	add	r4, r5
 80005fe:	ea81 0603 	eor.w	r6, r1, r3
 8000602:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000606:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800060a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800060e:	bf18      	it	ne
 8000610:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000618:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800061c:	d038      	beq.n	8000690 <__aeabi_dmul+0xb4>
 800061e:	fba0 ce02 	umull	ip, lr, r0, r2
 8000622:	f04f 0500 	mov.w	r5, #0
 8000626:	fbe1 e502 	umlal	lr, r5, r1, r2
 800062a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800062e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000632:	f04f 0600 	mov.w	r6, #0
 8000636:	fbe1 5603 	umlal	r5, r6, r1, r3
 800063a:	f09c 0f00 	teq	ip, #0
 800063e:	bf18      	it	ne
 8000640:	f04e 0e01 	orrne.w	lr, lr, #1
 8000644:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000648:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 800064c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000650:	d204      	bcs.n	800065c <__aeabi_dmul+0x80>
 8000652:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000656:	416d      	adcs	r5, r5
 8000658:	eb46 0606 	adc.w	r6, r6, r6
 800065c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000660:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000664:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000668:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800066c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000670:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000674:	bf88      	it	hi
 8000676:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800067a:	d81e      	bhi.n	80006ba <__aeabi_dmul+0xde>
 800067c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000680:	bf08      	it	eq
 8000682:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000686:	f150 0000 	adcs.w	r0, r0, #0
 800068a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800068e:	bd70      	pop	{r4, r5, r6, pc}
 8000690:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000694:	ea46 0101 	orr.w	r1, r6, r1
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	ea81 0103 	eor.w	r1, r1, r3
 80006a0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006a4:	bfc2      	ittt	gt
 80006a6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006aa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ae:	bd70      	popgt	{r4, r5, r6, pc}
 80006b0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006b4:	f04f 0e00 	mov.w	lr, #0
 80006b8:	3c01      	subs	r4, #1
 80006ba:	f300 80ab 	bgt.w	8000814 <__aeabi_dmul+0x238>
 80006be:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006c2:	bfde      	ittt	le
 80006c4:	2000      	movle	r0, #0
 80006c6:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006ca:	bd70      	pople	{r4, r5, r6, pc}
 80006cc:	f1c4 0400 	rsb	r4, r4, #0
 80006d0:	3c20      	subs	r4, #32
 80006d2:	da35      	bge.n	8000740 <__aeabi_dmul+0x164>
 80006d4:	340c      	adds	r4, #12
 80006d6:	dc1b      	bgt.n	8000710 <__aeabi_dmul+0x134>
 80006d8:	f104 0414 	add.w	r4, r4, #20
 80006dc:	f1c4 0520 	rsb	r5, r4, #32
 80006e0:	fa00 f305 	lsl.w	r3, r0, r5
 80006e4:	fa20 f004 	lsr.w	r0, r0, r4
 80006e8:	fa01 f205 	lsl.w	r2, r1, r5
 80006ec:	ea40 0002 	orr.w	r0, r0, r2
 80006f0:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006f4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006f8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006fc:	fa21 f604 	lsr.w	r6, r1, r4
 8000700:	eb42 0106 	adc.w	r1, r2, r6
 8000704:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000708:	bf08      	it	eq
 800070a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800070e:	bd70      	pop	{r4, r5, r6, pc}
 8000710:	f1c4 040c 	rsb	r4, r4, #12
 8000714:	f1c4 0520 	rsb	r5, r4, #32
 8000718:	fa00 f304 	lsl.w	r3, r0, r4
 800071c:	fa20 f005 	lsr.w	r0, r0, r5
 8000720:	fa01 f204 	lsl.w	r2, r1, r4
 8000724:	ea40 0002 	orr.w	r0, r0, r2
 8000728:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800072c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000730:	f141 0100 	adc.w	r1, r1, #0
 8000734:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000738:	bf08      	it	eq
 800073a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073e:	bd70      	pop	{r4, r5, r6, pc}
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f205 	lsl.w	r2, r0, r5
 8000748:	ea4e 0e02 	orr.w	lr, lr, r2
 800074c:	fa20 f304 	lsr.w	r3, r0, r4
 8000750:	fa01 f205 	lsl.w	r2, r1, r5
 8000754:	ea43 0302 	orr.w	r3, r3, r2
 8000758:	fa21 f004 	lsr.w	r0, r1, r4
 800075c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000760:	fa21 f204 	lsr.w	r2, r1, r4
 8000764:	ea20 0002 	bic.w	r0, r0, r2
 8000768:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800076c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000770:	bf08      	it	eq
 8000772:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000776:	bd70      	pop	{r4, r5, r6, pc}
 8000778:	f094 0f00 	teq	r4, #0
 800077c:	d10f      	bne.n	800079e <__aeabi_dmul+0x1c2>
 800077e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000782:	0040      	lsls	r0, r0, #1
 8000784:	eb41 0101 	adc.w	r1, r1, r1
 8000788:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800078c:	bf08      	it	eq
 800078e:	3c01      	subeq	r4, #1
 8000790:	d0f7      	beq.n	8000782 <__aeabi_dmul+0x1a6>
 8000792:	ea41 0106 	orr.w	r1, r1, r6
 8000796:	f095 0f00 	teq	r5, #0
 800079a:	bf18      	it	ne
 800079c:	4770      	bxne	lr
 800079e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007a2:	0052      	lsls	r2, r2, #1
 80007a4:	eb43 0303 	adc.w	r3, r3, r3
 80007a8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007ac:	bf08      	it	eq
 80007ae:	3d01      	subeq	r5, #1
 80007b0:	d0f7      	beq.n	80007a2 <__aeabi_dmul+0x1c6>
 80007b2:	ea43 0306 	orr.w	r3, r3, r6
 80007b6:	4770      	bx	lr
 80007b8:	ea94 0f0c 	teq	r4, ip
 80007bc:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007c0:	bf18      	it	ne
 80007c2:	ea95 0f0c 	teqne	r5, ip
 80007c6:	d00c      	beq.n	80007e2 <__aeabi_dmul+0x206>
 80007c8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007cc:	bf18      	it	ne
 80007ce:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007d2:	d1d1      	bne.n	8000778 <__aeabi_dmul+0x19c>
 80007d4:	ea81 0103 	eor.w	r1, r1, r3
 80007d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007dc:	f04f 0000 	mov.w	r0, #0
 80007e0:	bd70      	pop	{r4, r5, r6, pc}
 80007e2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e6:	bf06      	itte	eq
 80007e8:	4610      	moveq	r0, r2
 80007ea:	4619      	moveq	r1, r3
 80007ec:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007f0:	d019      	beq.n	8000826 <__aeabi_dmul+0x24a>
 80007f2:	ea94 0f0c 	teq	r4, ip
 80007f6:	d102      	bne.n	80007fe <__aeabi_dmul+0x222>
 80007f8:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007fc:	d113      	bne.n	8000826 <__aeabi_dmul+0x24a>
 80007fe:	ea95 0f0c 	teq	r5, ip
 8000802:	d105      	bne.n	8000810 <__aeabi_dmul+0x234>
 8000804:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000808:	bf1c      	itt	ne
 800080a:	4610      	movne	r0, r2
 800080c:	4619      	movne	r1, r3
 800080e:	d10a      	bne.n	8000826 <__aeabi_dmul+0x24a>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800081c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000820:	f04f 0000 	mov.w	r0, #0
 8000824:	bd70      	pop	{r4, r5, r6, pc}
 8000826:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800082a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800082e:	bd70      	pop	{r4, r5, r6, pc}

08000830 <__aeabi_ddiv>:
 8000830:	b570      	push	{r4, r5, r6, lr}
 8000832:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000836:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800083a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800083e:	bf1d      	ittte	ne
 8000840:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000844:	ea94 0f0c 	teqne	r4, ip
 8000848:	ea95 0f0c 	teqne	r5, ip
 800084c:	f000 f8a7 	bleq	800099e <__aeabi_ddiv+0x16e>
 8000850:	eba4 0405 	sub.w	r4, r4, r5
 8000854:	ea81 0e03 	eor.w	lr, r1, r3
 8000858:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800085c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000860:	f000 8088 	beq.w	8000974 <__aeabi_ddiv+0x144>
 8000864:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000868:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 800086c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000870:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000874:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000878:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 800087c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000880:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000884:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000888:	429d      	cmp	r5, r3
 800088a:	bf08      	it	eq
 800088c:	4296      	cmpeq	r6, r2
 800088e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000892:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000896:	d202      	bcs.n	800089e <__aeabi_ddiv+0x6e>
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	1ab6      	subs	r6, r6, r2
 80008a0:	eb65 0503 	sbc.w	r5, r5, r3
 80008a4:	085b      	lsrs	r3, r3, #1
 80008a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008aa:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ae:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008b2:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ba:	bf22      	ittt	cs
 80008bc:	1ab6      	subcs	r6, r6, r2
 80008be:	4675      	movcs	r5, lr
 80008c0:	ea40 000c 	orrcs.w	r0, r0, ip
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ce:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d2:	bf22      	ittt	cs
 80008d4:	1ab6      	subcs	r6, r6, r2
 80008d6:	4675      	movcs	r5, lr
 80008d8:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008dc:	085b      	lsrs	r3, r3, #1
 80008de:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e2:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ea:	bf22      	ittt	cs
 80008ec:	1ab6      	subcs	r6, r6, r2
 80008ee:	4675      	movcs	r5, lr
 80008f0:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fe:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000902:	bf22      	ittt	cs
 8000904:	1ab6      	subcs	r6, r6, r2
 8000906:	4675      	movcs	r5, lr
 8000908:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800090c:	ea55 0e06 	orrs.w	lr, r5, r6
 8000910:	d018      	beq.n	8000944 <__aeabi_ddiv+0x114>
 8000912:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000916:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800091a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800091e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000922:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000926:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800092a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800092e:	d1c0      	bne.n	80008b2 <__aeabi_ddiv+0x82>
 8000930:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000934:	d10b      	bne.n	800094e <__aeabi_ddiv+0x11e>
 8000936:	ea41 0100 	orr.w	r1, r1, r0
 800093a:	f04f 0000 	mov.w	r0, #0
 800093e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000942:	e7b6      	b.n	80008b2 <__aeabi_ddiv+0x82>
 8000944:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000948:	bf04      	itt	eq
 800094a:	4301      	orreq	r1, r0
 800094c:	2000      	moveq	r0, #0
 800094e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000952:	bf88      	it	hi
 8000954:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000958:	f63f aeaf 	bhi.w	80006ba <__aeabi_dmul+0xde>
 800095c:	ebb5 0c03 	subs.w	ip, r5, r3
 8000960:	bf04      	itt	eq
 8000962:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000966:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800096a:	f150 0000 	adcs.w	r0, r0, #0
 800096e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000972:	bd70      	pop	{r4, r5, r6, pc}
 8000974:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000978:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 800097c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000980:	bfc2      	ittt	gt
 8000982:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000986:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800098a:	bd70      	popgt	{r4, r5, r6, pc}
 800098c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000990:	f04f 0e00 	mov.w	lr, #0
 8000994:	3c01      	subs	r4, #1
 8000996:	e690      	b.n	80006ba <__aeabi_dmul+0xde>
 8000998:	ea45 0e06 	orr.w	lr, r5, r6
 800099c:	e68d      	b.n	80006ba <__aeabi_dmul+0xde>
 800099e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009a2:	ea94 0f0c 	teq	r4, ip
 80009a6:	bf08      	it	eq
 80009a8:	ea95 0f0c 	teqeq	r5, ip
 80009ac:	f43f af3b 	beq.w	8000826 <__aeabi_dmul+0x24a>
 80009b0:	ea94 0f0c 	teq	r4, ip
 80009b4:	d10a      	bne.n	80009cc <__aeabi_ddiv+0x19c>
 80009b6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009ba:	f47f af34 	bne.w	8000826 <__aeabi_dmul+0x24a>
 80009be:	ea95 0f0c 	teq	r5, ip
 80009c2:	f47f af25 	bne.w	8000810 <__aeabi_dmul+0x234>
 80009c6:	4610      	mov	r0, r2
 80009c8:	4619      	mov	r1, r3
 80009ca:	e72c      	b.n	8000826 <__aeabi_dmul+0x24a>
 80009cc:	ea95 0f0c 	teq	r5, ip
 80009d0:	d106      	bne.n	80009e0 <__aeabi_ddiv+0x1b0>
 80009d2:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009d6:	f43f aefd 	beq.w	80007d4 <__aeabi_dmul+0x1f8>
 80009da:	4610      	mov	r0, r2
 80009dc:	4619      	mov	r1, r3
 80009de:	e722      	b.n	8000826 <__aeabi_dmul+0x24a>
 80009e0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009e4:	bf18      	it	ne
 80009e6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009ea:	f47f aec5 	bne.w	8000778 <__aeabi_dmul+0x19c>
 80009ee:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009f2:	f47f af0d 	bne.w	8000810 <__aeabi_dmul+0x234>
 80009f6:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009fa:	f47f aeeb 	bne.w	80007d4 <__aeabi_dmul+0x1f8>
 80009fe:	e712      	b.n	8000826 <__aeabi_dmul+0x24a>

08000a00 <__gedf2>:
 8000a00:	f04f 3cff 	mov.w	ip, #4294967295
 8000a04:	e006      	b.n	8000a14 <__cmpdf2+0x4>
 8000a06:	bf00      	nop

08000a08 <__ledf2>:
 8000a08:	f04f 0c01 	mov.w	ip, #1
 8000a0c:	e002      	b.n	8000a14 <__cmpdf2+0x4>
 8000a0e:	bf00      	nop

08000a10 <__cmpdf2>:
 8000a10:	f04f 0c01 	mov.w	ip, #1
 8000a14:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a18:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a20:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a24:	bf18      	it	ne
 8000a26:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a2a:	d01b      	beq.n	8000a64 <__cmpdf2+0x54>
 8000a2c:	b001      	add	sp, #4
 8000a2e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a32:	bf0c      	ite	eq
 8000a34:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a38:	ea91 0f03 	teqne	r1, r3
 8000a3c:	bf02      	ittt	eq
 8000a3e:	ea90 0f02 	teqeq	r0, r2
 8000a42:	2000      	moveq	r0, #0
 8000a44:	4770      	bxeq	lr
 8000a46:	f110 0f00 	cmn.w	r0, #0
 8000a4a:	ea91 0f03 	teq	r1, r3
 8000a4e:	bf58      	it	pl
 8000a50:	4299      	cmppl	r1, r3
 8000a52:	bf08      	it	eq
 8000a54:	4290      	cmpeq	r0, r2
 8000a56:	bf2c      	ite	cs
 8000a58:	17d8      	asrcs	r0, r3, #31
 8000a5a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a5e:	f040 0001 	orr.w	r0, r0, #1
 8000a62:	4770      	bx	lr
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	d102      	bne.n	8000a74 <__cmpdf2+0x64>
 8000a6e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a72:	d107      	bne.n	8000a84 <__cmpdf2+0x74>
 8000a74:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	d1d6      	bne.n	8000a2c <__cmpdf2+0x1c>
 8000a7e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a82:	d0d3      	beq.n	8000a2c <__cmpdf2+0x1c>
 8000a84:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a88:	4770      	bx	lr
 8000a8a:	bf00      	nop

08000a8c <__aeabi_cdrcmple>:
 8000a8c:	4684      	mov	ip, r0
 8000a8e:	4610      	mov	r0, r2
 8000a90:	4662      	mov	r2, ip
 8000a92:	468c      	mov	ip, r1
 8000a94:	4619      	mov	r1, r3
 8000a96:	4663      	mov	r3, ip
 8000a98:	e000      	b.n	8000a9c <__aeabi_cdcmpeq>
 8000a9a:	bf00      	nop

08000a9c <__aeabi_cdcmpeq>:
 8000a9c:	b501      	push	{r0, lr}
 8000a9e:	f7ff ffb7 	bl	8000a10 <__cmpdf2>
 8000aa2:	2800      	cmp	r0, #0
 8000aa4:	bf48      	it	mi
 8000aa6:	f110 0f00 	cmnmi.w	r0, #0
 8000aaa:	bd01      	pop	{r0, pc}

08000aac <__aeabi_dcmpeq>:
 8000aac:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab0:	f7ff fff4 	bl	8000a9c <__aeabi_cdcmpeq>
 8000ab4:	bf0c      	ite	eq
 8000ab6:	2001      	moveq	r0, #1
 8000ab8:	2000      	movne	r0, #0
 8000aba:	f85d fb08 	ldr.w	pc, [sp], #8
 8000abe:	bf00      	nop

08000ac0 <__aeabi_dcmplt>:
 8000ac0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac4:	f7ff ffea 	bl	8000a9c <__aeabi_cdcmpeq>
 8000ac8:	bf34      	ite	cc
 8000aca:	2001      	movcc	r0, #1
 8000acc:	2000      	movcs	r0, #0
 8000ace:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ad2:	bf00      	nop

08000ad4 <__aeabi_dcmple>:
 8000ad4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad8:	f7ff ffe0 	bl	8000a9c <__aeabi_cdcmpeq>
 8000adc:	bf94      	ite	ls
 8000ade:	2001      	movls	r0, #1
 8000ae0:	2000      	movhi	r0, #0
 8000ae2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_dcmpge>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff ffce 	bl	8000a8c <__aeabi_cdrcmple>
 8000af0:	bf94      	ite	ls
 8000af2:	2001      	movls	r0, #1
 8000af4:	2000      	movhi	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmpgt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffc4 	bl	8000a8c <__aeabi_cdrcmple>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmpun>:
 8000b10:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b14:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b18:	d102      	bne.n	8000b20 <__aeabi_dcmpun+0x10>
 8000b1a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b1e:	d10a      	bne.n	8000b36 <__aeabi_dcmpun+0x26>
 8000b20:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b24:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b28:	d102      	bne.n	8000b30 <__aeabi_dcmpun+0x20>
 8000b2a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b2e:	d102      	bne.n	8000b36 <__aeabi_dcmpun+0x26>
 8000b30:	f04f 0000 	mov.w	r0, #0
 8000b34:	4770      	bx	lr
 8000b36:	f04f 0001 	mov.w	r0, #1
 8000b3a:	4770      	bx	lr

08000b3c <__aeabi_d2iz>:
 8000b3c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b40:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b44:	d215      	bcs.n	8000b72 <__aeabi_d2iz+0x36>
 8000b46:	d511      	bpl.n	8000b6c <__aeabi_d2iz+0x30>
 8000b48:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b4c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b50:	d912      	bls.n	8000b78 <__aeabi_d2iz+0x3c>
 8000b52:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b56:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b5a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b5e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b62:	fa23 f002 	lsr.w	r0, r3, r2
 8000b66:	bf18      	it	ne
 8000b68:	4240      	negne	r0, r0
 8000b6a:	4770      	bx	lr
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b76:	d105      	bne.n	8000b84 <__aeabi_d2iz+0x48>
 8000b78:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b7c:	bf08      	it	eq
 8000b7e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b82:	4770      	bx	lr
 8000b84:	f04f 0000 	mov.w	r0, #0
 8000b88:	4770      	bx	lr
 8000b8a:	bf00      	nop

08000b8c <__aeabi_d2uiz>:
 8000b8c:	004a      	lsls	r2, r1, #1
 8000b8e:	d211      	bcs.n	8000bb4 <__aeabi_d2uiz+0x28>
 8000b90:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b94:	d211      	bcs.n	8000bba <__aeabi_d2uiz+0x2e>
 8000b96:	d50d      	bpl.n	8000bb4 <__aeabi_d2uiz+0x28>
 8000b98:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b9c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ba0:	d40e      	bmi.n	8000bc0 <__aeabi_d2uiz+0x34>
 8000ba2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000baa:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	4770      	bx	lr
 8000bb4:	f04f 0000 	mov.w	r0, #0
 8000bb8:	4770      	bx	lr
 8000bba:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bbe:	d102      	bne.n	8000bc6 <__aeabi_d2uiz+0x3a>
 8000bc0:	f04f 30ff 	mov.w	r0, #4294967295
 8000bc4:	4770      	bx	lr
 8000bc6:	f04f 0000 	mov.w	r0, #0
 8000bca:	4770      	bx	lr

08000bcc <__aeabi_d2f>:
 8000bcc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bd0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bd4:	bf24      	itt	cs
 8000bd6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bda:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bde:	d90d      	bls.n	8000bfc <__aeabi_d2f+0x30>
 8000be0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000be4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000be8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bec:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bf0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bf4:	bf08      	it	eq
 8000bf6:	f020 0001 	biceq.w	r0, r0, #1
 8000bfa:	4770      	bx	lr
 8000bfc:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c00:	d121      	bne.n	8000c46 <__aeabi_d2f+0x7a>
 8000c02:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c06:	bfbc      	itt	lt
 8000c08:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c0c:	4770      	bxlt	lr
 8000c0e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c12:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c16:	f1c2 0218 	rsb	r2, r2, #24
 8000c1a:	f1c2 0c20 	rsb	ip, r2, #32
 8000c1e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c22:	fa20 f002 	lsr.w	r0, r0, r2
 8000c26:	bf18      	it	ne
 8000c28:	f040 0001 	orrne.w	r0, r0, #1
 8000c2c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c30:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c34:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c38:	ea40 000c 	orr.w	r0, r0, ip
 8000c3c:	fa23 f302 	lsr.w	r3, r3, r2
 8000c40:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c44:	e7cc      	b.n	8000be0 <__aeabi_d2f+0x14>
 8000c46:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c4a:	d107      	bne.n	8000c5c <__aeabi_d2f+0x90>
 8000c4c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c50:	bf1e      	ittt	ne
 8000c52:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c56:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c5a:	4770      	bxne	lr
 8000c5c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c60:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c64:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c68:	4770      	bx	lr
 8000c6a:	bf00      	nop

08000c6c <__aeabi_uldivmod>:
 8000c6c:	b953      	cbnz	r3, 8000c84 <__aeabi_uldivmod+0x18>
 8000c6e:	b94a      	cbnz	r2, 8000c84 <__aeabi_uldivmod+0x18>
 8000c70:	2900      	cmp	r1, #0
 8000c72:	bf08      	it	eq
 8000c74:	2800      	cmpeq	r0, #0
 8000c76:	bf1c      	itt	ne
 8000c78:	f04f 31ff 	movne.w	r1, #4294967295
 8000c7c:	f04f 30ff 	movne.w	r0, #4294967295
 8000c80:	f000 bacc 	b.w	800121c <__aeabi_idiv0>
 8000c84:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c88:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c8c:	f000 f950 	bl	8000f30 <__udivmoddi4>
 8000c90:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c94:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c98:	b004      	add	sp, #16
 8000c9a:	4770      	bx	lr

08000c9c <__mulsc3>:
 8000c9c:	ee60 6a01 	vmul.f32	s13, s0, s2
 8000ca0:	ee60 5aa1 	vmul.f32	s11, s1, s3
 8000ca4:	ee20 5a21 	vmul.f32	s10, s0, s3
 8000ca8:	ee61 4a20 	vmul.f32	s9, s2, s1
 8000cac:	ee76 7ae5 	vsub.f32	s15, s13, s11
 8000cb0:	ee35 7a24 	vadd.f32	s14, s10, s9
 8000cb4:	eef4 7a67 	vcmp.f32	s15, s15
 8000cb8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000cbc:	eeb4 7a47 	vcmp.f32	s14, s14
 8000cc0:	bf6c      	ite	vs
 8000cc2:	2301      	movvs	r3, #1
 8000cc4:	2300      	movvc	r3, #0
 8000cc6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000cca:	f003 0301 	and.w	r3, r3, #1
 8000cce:	bf78      	it	vc
 8000cd0:	2300      	movvc	r3, #0
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	f000 80c8 	beq.w	8000e68 <__mulsc3+0x1cc>
 8000cd8:	eeb0 6ac0 	vabs.f32	s12, s0
 8000cdc:	ed9f 4a90 	vldr	s8, [pc, #576]	; 8000f20 <__mulsc3+0x284>
 8000ce0:	eef0 3ae0 	vabs.f32	s7, s1
 8000ce4:	eeb4 6a44 	vcmp.f32	s12, s8
 8000ce8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000cec:	bfcc      	ite	gt
 8000cee:	2201      	movgt	r2, #1
 8000cf0:	2200      	movle	r2, #0
 8000cf2:	f340 80be 	ble.w	8000e72 <__mulsc3+0x1d6>
 8000cf6:	ee06 2a10 	vmov	s12, r2
 8000cfa:	ed9f 4a89 	vldr	s8, [pc, #548]	; 8000f20 <__mulsc3+0x284>
 8000cfe:	ee10 2a10 	vmov	r2, s0
 8000d02:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 8000d06:	eef4 3a44 	vcmp.f32	s7, s8
 8000d0a:	2a00      	cmp	r2, #0
 8000d0c:	eeb0 6ac6 	vabs.f32	s12, s12
 8000d10:	bfb8      	it	lt
 8000d12:	eeb1 6a46 	vneglt.f32	s12, s12
 8000d16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d1a:	eeb4 1a41 	vcmp.f32	s2, s2
 8000d1e:	eeb0 0a46 	vmov.f32	s0, s12
 8000d22:	bfcc      	ite	gt
 8000d24:	2201      	movgt	r2, #1
 8000d26:	2200      	movle	r2, #0
 8000d28:	ee06 2a10 	vmov	s12, r2
 8000d2c:	ee10 2a90 	vmov	r2, s1
 8000d30:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 8000d34:	2a00      	cmp	r2, #0
 8000d36:	eeb0 6ac6 	vabs.f32	s12, s12
 8000d3a:	bfb8      	it	lt
 8000d3c:	eeb1 6a46 	vneglt.f32	s12, s12
 8000d40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d44:	eef0 0a46 	vmov.f32	s1, s12
 8000d48:	f180 80b7 	bvs.w	8000eba <__mulsc3+0x21e>
 8000d4c:	eef4 1a61 	vcmp.f32	s3, s3
 8000d50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d54:	f180 80bb 	bvs.w	8000ece <__mulsc3+0x232>
 8000d58:	eeb0 6ac1 	vabs.f32	s12, s2
 8000d5c:	ed9f 4a70 	vldr	s8, [pc, #448]	; 8000f20 <__mulsc3+0x284>
 8000d60:	eeb4 6a44 	vcmp.f32	s12, s8
 8000d64:	eeb0 6ae1 	vabs.f32	s12, s3
 8000d68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d6c:	bfcc      	ite	gt
 8000d6e:	2201      	movgt	r2, #1
 8000d70:	2200      	movle	r2, #0
 8000d72:	dc3c      	bgt.n	8000dee <__mulsc3+0x152>
 8000d74:	eeb4 6a44 	vcmp.f32	s12, s8
 8000d78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d7c:	dc37      	bgt.n	8000dee <__mulsc3+0x152>
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d164      	bne.n	8000e4c <__mulsc3+0x1b0>
 8000d82:	eef0 6ae6 	vabs.f32	s13, s13
 8000d86:	eef4 6a44 	vcmp.f32	s13, s8
 8000d8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d8e:	dc0d      	bgt.n	8000dac <__mulsc3+0x110>
 8000d90:	eef0 5ae5 	vabs.f32	s11, s11
 8000d94:	eef4 5a44 	vcmp.f32	s11, s8
 8000d98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d9c:	dc06      	bgt.n	8000dac <__mulsc3+0x110>
 8000d9e:	eeb0 5ac5 	vabs.f32	s10, s10
 8000da2:	eeb4 5a44 	vcmp.f32	s10, s8
 8000da6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000daa:	dd6a      	ble.n	8000e82 <__mulsc3+0x1e6>
 8000dac:	eeb4 0a40 	vcmp.f32	s0, s0
 8000db0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000db4:	f180 80a9 	bvs.w	8000f0a <__mulsc3+0x26e>
 8000db8:	eef4 0a60 	vcmp.f32	s1, s1
 8000dbc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000dc0:	f180 8099 	bvs.w	8000ef6 <__mulsc3+0x25a>
 8000dc4:	eeb4 1a41 	vcmp.f32	s2, s2
 8000dc8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000dcc:	f180 8089 	bvs.w	8000ee2 <__mulsc3+0x246>
 8000dd0:	eef4 1a61 	vcmp.f32	s3, s3
 8000dd4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000dd8:	d738      	bvc.n	8000e4c <__mulsc3+0x1b0>
 8000dda:	ee11 3a90 	vmov	r3, s3
 8000dde:	ed9f 7a51 	vldr	s14, [pc, #324]	; 8000f24 <__mulsc3+0x288>
 8000de2:	eddf 7a51 	vldr	s15, [pc, #324]	; 8000f28 <__mulsc3+0x28c>
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	fe67 1a27 	vselge.f32	s3, s14, s15
 8000dec:	e02e      	b.n	8000e4c <__mulsc3+0x1b0>
 8000dee:	ee07 2a90 	vmov	s15, r2
 8000df2:	ed9f 7a4b 	vldr	s14, [pc, #300]	; 8000f20 <__mulsc3+0x284>
 8000df6:	ee11 3a10 	vmov	r3, s2
 8000dfa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000dfe:	eeb4 6a47 	vcmp.f32	s12, s14
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	eef0 7ae7 	vabs.f32	s15, s15
 8000e08:	bfb8      	it	lt
 8000e0a:	eef1 7a67 	vneglt.f32	s15, s15
 8000e0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e12:	eeb4 0a40 	vcmp.f32	s0, s0
 8000e16:	eeb0 1a67 	vmov.f32	s2, s15
 8000e1a:	bfcc      	ite	gt
 8000e1c:	2301      	movgt	r3, #1
 8000e1e:	2300      	movle	r3, #0
 8000e20:	ee07 3a90 	vmov	s15, r3
 8000e24:	ee11 3a90 	vmov	r3, s3
 8000e28:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	eef0 7ae7 	vabs.f32	s15, s15
 8000e32:	bfb8      	it	lt
 8000e34:	eef1 7a67 	vneglt.f32	s15, s15
 8000e38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e3c:	eef0 1a67 	vmov.f32	s3, s15
 8000e40:	d631      	bvs.n	8000ea6 <__mulsc3+0x20a>
 8000e42:	eef4 0a60 	vcmp.f32	s1, s1
 8000e46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e4a:	d622      	bvs.n	8000e92 <__mulsc3+0x1f6>
 8000e4c:	ee61 7ae0 	vnmul.f32	s15, s3, s1
 8000e50:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8000f2c <__mulsc3+0x290>
 8000e54:	ee60 0a81 	vmul.f32	s1, s1, s2
 8000e58:	eee0 7a01 	vfma.f32	s15, s0, s2
 8000e5c:	eee0 0a21 	vfma.f32	s1, s0, s3
 8000e60:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000e64:	ee20 7a87 	vmul.f32	s14, s1, s14
 8000e68:	eeb0 0a67 	vmov.f32	s0, s15
 8000e6c:	eef0 0a47 	vmov.f32	s1, s14
 8000e70:	4770      	bx	lr
 8000e72:	eef4 3a44 	vcmp.f32	s7, s8
 8000e76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e7a:	f73f af3c 	bgt.w	8000cf6 <__mulsc3+0x5a>
 8000e7e:	2300      	movs	r3, #0
 8000e80:	e76a      	b.n	8000d58 <__mulsc3+0xbc>
 8000e82:	eef0 4ae4 	vabs.f32	s9, s9
 8000e86:	eef4 4a44 	vcmp.f32	s9, s8
 8000e8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e8e:	ddeb      	ble.n	8000e68 <__mulsc3+0x1cc>
 8000e90:	e78c      	b.n	8000dac <__mulsc3+0x110>
 8000e92:	ee10 3a90 	vmov	r3, s1
 8000e96:	ed9f 7a23 	vldr	s14, [pc, #140]	; 8000f24 <__mulsc3+0x288>
 8000e9a:	eddf 7a23 	vldr	s15, [pc, #140]	; 8000f28 <__mulsc3+0x28c>
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	fe67 0a27 	vselge.f32	s1, s14, s15
 8000ea4:	e7d2      	b.n	8000e4c <__mulsc3+0x1b0>
 8000ea6:	ee10 3a10 	vmov	r3, s0
 8000eaa:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 8000f24 <__mulsc3+0x288>
 8000eae:	eddf 7a1e 	vldr	s15, [pc, #120]	; 8000f28 <__mulsc3+0x28c>
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	fe27 0a27 	vselge.f32	s0, s14, s15
 8000eb8:	e7c3      	b.n	8000e42 <__mulsc3+0x1a6>
 8000eba:	ee11 2a10 	vmov	r2, s2
 8000ebe:	ed9f 4a19 	vldr	s8, [pc, #100]	; 8000f24 <__mulsc3+0x288>
 8000ec2:	ed9f 6a19 	vldr	s12, [pc, #100]	; 8000f28 <__mulsc3+0x28c>
 8000ec6:	2a00      	cmp	r2, #0
 8000ec8:	fe24 1a06 	vselge.f32	s2, s8, s12
 8000ecc:	e73e      	b.n	8000d4c <__mulsc3+0xb0>
 8000ece:	ee11 2a90 	vmov	r2, s3
 8000ed2:	ed9f 4a14 	vldr	s8, [pc, #80]	; 8000f24 <__mulsc3+0x288>
 8000ed6:	ed9f 6a14 	vldr	s12, [pc, #80]	; 8000f28 <__mulsc3+0x28c>
 8000eda:	2a00      	cmp	r2, #0
 8000edc:	fe64 1a06 	vselge.f32	s3, s8, s12
 8000ee0:	e73a      	b.n	8000d58 <__mulsc3+0xbc>
 8000ee2:	ee11 3a10 	vmov	r3, s2
 8000ee6:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8000f24 <__mulsc3+0x288>
 8000eea:	eddf 7a0f 	vldr	s15, [pc, #60]	; 8000f28 <__mulsc3+0x28c>
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	fe27 1a27 	vselge.f32	s2, s14, s15
 8000ef4:	e76c      	b.n	8000dd0 <__mulsc3+0x134>
 8000ef6:	ee10 3a90 	vmov	r3, s1
 8000efa:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 8000f24 <__mulsc3+0x288>
 8000efe:	eddf 7a0a 	vldr	s15, [pc, #40]	; 8000f28 <__mulsc3+0x28c>
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	fe67 0a27 	vselge.f32	s1, s14, s15
 8000f08:	e75c      	b.n	8000dc4 <__mulsc3+0x128>
 8000f0a:	ee10 3a10 	vmov	r3, s0
 8000f0e:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8000f24 <__mulsc3+0x288>
 8000f12:	eddf 7a05 	vldr	s15, [pc, #20]	; 8000f28 <__mulsc3+0x28c>
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	fe27 0a27 	vselge.f32	s0, s14, s15
 8000f1c:	e74c      	b.n	8000db8 <__mulsc3+0x11c>
 8000f1e:	bf00      	nop
 8000f20:	7f7fffff 	.word	0x7f7fffff
 8000f24:	00000000 	.word	0x00000000
 8000f28:	80000000 	.word	0x80000000
 8000f2c:	7f800000 	.word	0x7f800000

08000f30 <__udivmoddi4>:
 8000f30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000f34:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8000f36:	460d      	mov	r5, r1
 8000f38:	4604      	mov	r4, r0
 8000f3a:	460f      	mov	r7, r1
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d146      	bne.n	8000fce <__udivmoddi4+0x9e>
 8000f40:	428a      	cmp	r2, r1
 8000f42:	4694      	mov	ip, r2
 8000f44:	d95e      	bls.n	8001004 <__udivmoddi4+0xd4>
 8000f46:	fab2 f382 	clz	r3, r2
 8000f4a:	b143      	cbz	r3, 8000f5e <__udivmoddi4+0x2e>
 8000f4c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000f50:	f1c3 0220 	rsb	r2, r3, #32
 8000f54:	409f      	lsls	r7, r3
 8000f56:	409c      	lsls	r4, r3
 8000f58:	fa20 f202 	lsr.w	r2, r0, r2
 8000f5c:	4317      	orrs	r7, r2
 8000f5e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000f62:	fa1f f58c 	uxth.w	r5, ip
 8000f66:	0c22      	lsrs	r2, r4, #16
 8000f68:	fbb7 f1fe 	udiv	r1, r7, lr
 8000f6c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000f70:	fb01 f005 	mul.w	r0, r1, r5
 8000f74:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000f78:	4290      	cmp	r0, r2
 8000f7a:	d908      	bls.n	8000f8e <__udivmoddi4+0x5e>
 8000f7c:	eb1c 0202 	adds.w	r2, ip, r2
 8000f80:	f101 37ff 	add.w	r7, r1, #4294967295
 8000f84:	d202      	bcs.n	8000f8c <__udivmoddi4+0x5c>
 8000f86:	4290      	cmp	r0, r2
 8000f88:	f200 8134 	bhi.w	80011f4 <__udivmoddi4+0x2c4>
 8000f8c:	4639      	mov	r1, r7
 8000f8e:	1a12      	subs	r2, r2, r0
 8000f90:	b2a4      	uxth	r4, r4
 8000f92:	fbb2 f0fe 	udiv	r0, r2, lr
 8000f96:	fb0e 2210 	mls	r2, lr, r0, r2
 8000f9a:	fb00 f505 	mul.w	r5, r0, r5
 8000f9e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000fa2:	42a5      	cmp	r5, r4
 8000fa4:	d908      	bls.n	8000fb8 <__udivmoddi4+0x88>
 8000fa6:	eb1c 0404 	adds.w	r4, ip, r4
 8000faa:	f100 32ff 	add.w	r2, r0, #4294967295
 8000fae:	d202      	bcs.n	8000fb6 <__udivmoddi4+0x86>
 8000fb0:	42a5      	cmp	r5, r4
 8000fb2:	f200 8119 	bhi.w	80011e8 <__udivmoddi4+0x2b8>
 8000fb6:	4610      	mov	r0, r2
 8000fb8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000fbc:	1b64      	subs	r4, r4, r5
 8000fbe:	2100      	movs	r1, #0
 8000fc0:	b11e      	cbz	r6, 8000fca <__udivmoddi4+0x9a>
 8000fc2:	40dc      	lsrs	r4, r3
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	e9c6 4300 	strd	r4, r3, [r6]
 8000fca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000fce:	428b      	cmp	r3, r1
 8000fd0:	d908      	bls.n	8000fe4 <__udivmoddi4+0xb4>
 8000fd2:	2e00      	cmp	r6, #0
 8000fd4:	f000 80fc 	beq.w	80011d0 <__udivmoddi4+0x2a0>
 8000fd8:	2100      	movs	r1, #0
 8000fda:	e9c6 0500 	strd	r0, r5, [r6]
 8000fde:	4608      	mov	r0, r1
 8000fe0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000fe4:	fab3 f183 	clz	r1, r3
 8000fe8:	2900      	cmp	r1, #0
 8000fea:	d14c      	bne.n	8001086 <__udivmoddi4+0x156>
 8000fec:	42ab      	cmp	r3, r5
 8000fee:	f0c0 80f2 	bcc.w	80011d6 <__udivmoddi4+0x2a6>
 8000ff2:	4282      	cmp	r2, r0
 8000ff4:	f240 80ef 	bls.w	80011d6 <__udivmoddi4+0x2a6>
 8000ff8:	4608      	mov	r0, r1
 8000ffa:	2e00      	cmp	r6, #0
 8000ffc:	d0e5      	beq.n	8000fca <__udivmoddi4+0x9a>
 8000ffe:	e9c6 4700 	strd	r4, r7, [r6]
 8001002:	e7e2      	b.n	8000fca <__udivmoddi4+0x9a>
 8001004:	b902      	cbnz	r2, 8001008 <__udivmoddi4+0xd8>
 8001006:	deff      	udf	#255	; 0xff
 8001008:	fab2 f382 	clz	r3, r2
 800100c:	2b00      	cmp	r3, #0
 800100e:	f040 809f 	bne.w	8001150 <__udivmoddi4+0x220>
 8001012:	1a8a      	subs	r2, r1, r2
 8001014:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8001018:	fa1f f78c 	uxth.w	r7, ip
 800101c:	2101      	movs	r1, #1
 800101e:	fbb2 f5fe 	udiv	r5, r2, lr
 8001022:	fb0e 2015 	mls	r0, lr, r5, r2
 8001026:	0c22      	lsrs	r2, r4, #16
 8001028:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800102c:	fb07 f005 	mul.w	r0, r7, r5
 8001030:	4290      	cmp	r0, r2
 8001032:	d90f      	bls.n	8001054 <__udivmoddi4+0x124>
 8001034:	eb1c 0202 	adds.w	r2, ip, r2
 8001038:	f105 38ff 	add.w	r8, r5, #4294967295
 800103c:	bf2c      	ite	cs
 800103e:	f04f 0901 	movcs.w	r9, #1
 8001042:	f04f 0900 	movcc.w	r9, #0
 8001046:	4290      	cmp	r0, r2
 8001048:	d903      	bls.n	8001052 <__udivmoddi4+0x122>
 800104a:	f1b9 0f00 	cmp.w	r9, #0
 800104e:	f000 80ce 	beq.w	80011ee <__udivmoddi4+0x2be>
 8001052:	4645      	mov	r5, r8
 8001054:	1a12      	subs	r2, r2, r0
 8001056:	b2a4      	uxth	r4, r4
 8001058:	fbb2 f0fe 	udiv	r0, r2, lr
 800105c:	fb0e 2210 	mls	r2, lr, r0, r2
 8001060:	fb00 f707 	mul.w	r7, r0, r7
 8001064:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8001068:	42a7      	cmp	r7, r4
 800106a:	d908      	bls.n	800107e <__udivmoddi4+0x14e>
 800106c:	eb1c 0404 	adds.w	r4, ip, r4
 8001070:	f100 32ff 	add.w	r2, r0, #4294967295
 8001074:	d202      	bcs.n	800107c <__udivmoddi4+0x14c>
 8001076:	42a7      	cmp	r7, r4
 8001078:	f200 80b3 	bhi.w	80011e2 <__udivmoddi4+0x2b2>
 800107c:	4610      	mov	r0, r2
 800107e:	1be4      	subs	r4, r4, r7
 8001080:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8001084:	e79c      	b.n	8000fc0 <__udivmoddi4+0x90>
 8001086:	f1c1 0420 	rsb	r4, r1, #32
 800108a:	408b      	lsls	r3, r1
 800108c:	fa05 fc01 	lsl.w	ip, r5, r1
 8001090:	fa22 f704 	lsr.w	r7, r2, r4
 8001094:	40e5      	lsrs	r5, r4
 8001096:	408a      	lsls	r2, r1
 8001098:	431f      	orrs	r7, r3
 800109a:	fa20 f304 	lsr.w	r3, r0, r4
 800109e:	4088      	lsls	r0, r1
 80010a0:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80010a4:	ea43 030c 	orr.w	r3, r3, ip
 80010a8:	fa1f fc87 	uxth.w	ip, r7
 80010ac:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80010b0:	fbb5 fef8 	udiv	lr, r5, r8
 80010b4:	fb08 551e 	mls	r5, r8, lr, r5
 80010b8:	ea49 4505 	orr.w	r5, r9, r5, lsl #16
 80010bc:	fb0e f90c 	mul.w	r9, lr, ip
 80010c0:	45a9      	cmp	r9, r5
 80010c2:	d90e      	bls.n	80010e2 <__udivmoddi4+0x1b2>
 80010c4:	197d      	adds	r5, r7, r5
 80010c6:	f10e 3aff 	add.w	sl, lr, #4294967295
 80010ca:	bf2c      	ite	cs
 80010cc:	f04f 0b01 	movcs.w	fp, #1
 80010d0:	f04f 0b00 	movcc.w	fp, #0
 80010d4:	45a9      	cmp	r9, r5
 80010d6:	d903      	bls.n	80010e0 <__udivmoddi4+0x1b0>
 80010d8:	f1bb 0f00 	cmp.w	fp, #0
 80010dc:	f000 808d 	beq.w	80011fa <__udivmoddi4+0x2ca>
 80010e0:	46d6      	mov	lr, sl
 80010e2:	eba5 0509 	sub.w	r5, r5, r9
 80010e6:	fa1f f983 	uxth.w	r9, r3
 80010ea:	fbb5 f3f8 	udiv	r3, r5, r8
 80010ee:	fb08 5513 	mls	r5, r8, r3, r5
 80010f2:	fb03 fc0c 	mul.w	ip, r3, ip
 80010f6:	ea49 4505 	orr.w	r5, r9, r5, lsl #16
 80010fa:	45ac      	cmp	ip, r5
 80010fc:	d906      	bls.n	800110c <__udivmoddi4+0x1dc>
 80010fe:	197d      	adds	r5, r7, r5
 8001100:	f103 38ff 	add.w	r8, r3, #4294967295
 8001104:	d201      	bcs.n	800110a <__udivmoddi4+0x1da>
 8001106:	45ac      	cmp	ip, r5
 8001108:	d87e      	bhi.n	8001208 <__udivmoddi4+0x2d8>
 800110a:	4643      	mov	r3, r8
 800110c:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
 8001110:	eba5 050c 	sub.w	r5, r5, ip
 8001114:	fba3 9802 	umull	r9, r8, r3, r2
 8001118:	4545      	cmp	r5, r8
 800111a:	46ce      	mov	lr, r9
 800111c:	46c4      	mov	ip, r8
 800111e:	d302      	bcc.n	8001126 <__udivmoddi4+0x1f6>
 8001120:	d106      	bne.n	8001130 <__udivmoddi4+0x200>
 8001122:	4548      	cmp	r0, r9
 8001124:	d204      	bcs.n	8001130 <__udivmoddi4+0x200>
 8001126:	3b01      	subs	r3, #1
 8001128:	ebb9 0e02 	subs.w	lr, r9, r2
 800112c:	eb68 0c07 	sbc.w	ip, r8, r7
 8001130:	2e00      	cmp	r6, #0
 8001132:	d06f      	beq.n	8001214 <__udivmoddi4+0x2e4>
 8001134:	ebb0 020e 	subs.w	r2, r0, lr
 8001138:	eb65 050c 	sbc.w	r5, r5, ip
 800113c:	40ca      	lsrs	r2, r1
 800113e:	fa05 f404 	lsl.w	r4, r5, r4
 8001142:	40cd      	lsrs	r5, r1
 8001144:	4618      	mov	r0, r3
 8001146:	4314      	orrs	r4, r2
 8001148:	2100      	movs	r1, #0
 800114a:	e9c6 4500 	strd	r4, r5, [r6]
 800114e:	e73c      	b.n	8000fca <__udivmoddi4+0x9a>
 8001150:	fa02 fc03 	lsl.w	ip, r2, r3
 8001154:	f1c3 0220 	rsb	r2, r3, #32
 8001158:	4099      	lsls	r1, r3
 800115a:	409c      	lsls	r4, r3
 800115c:	40d5      	lsrs	r5, r2
 800115e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8001162:	fa20 f202 	lsr.w	r2, r0, r2
 8001166:	fa1f f78c 	uxth.w	r7, ip
 800116a:	fbb5 f0fe 	udiv	r0, r5, lr
 800116e:	430a      	orrs	r2, r1
 8001170:	fb0e 5510 	mls	r5, lr, r0, r5
 8001174:	0c11      	lsrs	r1, r2, #16
 8001176:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800117a:	fb00 f507 	mul.w	r5, r0, r7
 800117e:	428d      	cmp	r5, r1
 8001180:	d90e      	bls.n	80011a0 <__udivmoddi4+0x270>
 8001182:	eb1c 0101 	adds.w	r1, ip, r1
 8001186:	f100 38ff 	add.w	r8, r0, #4294967295
 800118a:	bf2c      	ite	cs
 800118c:	f04f 0901 	movcs.w	r9, #1
 8001190:	f04f 0900 	movcc.w	r9, #0
 8001194:	428d      	cmp	r5, r1
 8001196:	d902      	bls.n	800119e <__udivmoddi4+0x26e>
 8001198:	f1b9 0f00 	cmp.w	r9, #0
 800119c:	d031      	beq.n	8001202 <__udivmoddi4+0x2d2>
 800119e:	4640      	mov	r0, r8
 80011a0:	1b49      	subs	r1, r1, r5
 80011a2:	b292      	uxth	r2, r2
 80011a4:	fbb1 f5fe 	udiv	r5, r1, lr
 80011a8:	fb0e 1115 	mls	r1, lr, r5, r1
 80011ac:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80011b0:	fb05 f107 	mul.w	r1, r5, r7
 80011b4:	4291      	cmp	r1, r2
 80011b6:	d907      	bls.n	80011c8 <__udivmoddi4+0x298>
 80011b8:	eb1c 0202 	adds.w	r2, ip, r2
 80011bc:	f105 38ff 	add.w	r8, r5, #4294967295
 80011c0:	d201      	bcs.n	80011c6 <__udivmoddi4+0x296>
 80011c2:	4291      	cmp	r1, r2
 80011c4:	d823      	bhi.n	800120e <__udivmoddi4+0x2de>
 80011c6:	4645      	mov	r5, r8
 80011c8:	1a52      	subs	r2, r2, r1
 80011ca:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80011ce:	e726      	b.n	800101e <__udivmoddi4+0xee>
 80011d0:	4631      	mov	r1, r6
 80011d2:	4630      	mov	r0, r6
 80011d4:	e6f9      	b.n	8000fca <__udivmoddi4+0x9a>
 80011d6:	1a84      	subs	r4, r0, r2
 80011d8:	eb65 0203 	sbc.w	r2, r5, r3
 80011dc:	2001      	movs	r0, #1
 80011de:	4617      	mov	r7, r2
 80011e0:	e70b      	b.n	8000ffa <__udivmoddi4+0xca>
 80011e2:	4464      	add	r4, ip
 80011e4:	3802      	subs	r0, #2
 80011e6:	e74a      	b.n	800107e <__udivmoddi4+0x14e>
 80011e8:	4464      	add	r4, ip
 80011ea:	3802      	subs	r0, #2
 80011ec:	e6e4      	b.n	8000fb8 <__udivmoddi4+0x88>
 80011ee:	3d02      	subs	r5, #2
 80011f0:	4462      	add	r2, ip
 80011f2:	e72f      	b.n	8001054 <__udivmoddi4+0x124>
 80011f4:	3902      	subs	r1, #2
 80011f6:	4462      	add	r2, ip
 80011f8:	e6c9      	b.n	8000f8e <__udivmoddi4+0x5e>
 80011fa:	f1ae 0e02 	sub.w	lr, lr, #2
 80011fe:	443d      	add	r5, r7
 8001200:	e76f      	b.n	80010e2 <__udivmoddi4+0x1b2>
 8001202:	3802      	subs	r0, #2
 8001204:	4461      	add	r1, ip
 8001206:	e7cb      	b.n	80011a0 <__udivmoddi4+0x270>
 8001208:	3b02      	subs	r3, #2
 800120a:	443d      	add	r5, r7
 800120c:	e77e      	b.n	800110c <__udivmoddi4+0x1dc>
 800120e:	3d02      	subs	r5, #2
 8001210:	4462      	add	r2, ip
 8001212:	e7d9      	b.n	80011c8 <__udivmoddi4+0x298>
 8001214:	4618      	mov	r0, r3
 8001216:	4631      	mov	r1, r6
 8001218:	e6d7      	b.n	8000fca <__udivmoddi4+0x9a>
 800121a:	bf00      	nop

0800121c <__aeabi_idiv0>:
 800121c:	4770      	bx	lr
 800121e:	bf00      	nop

08001220 <Pack_measurements_1_jlb>:
}

#else

uint32_t Pack_measurements_1_jlb(measurements_1_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide)
{
 8001220:	b480      	push	{r7}
 8001222:	b087      	sub	sp, #28
 8001224:	af00      	add	r7, sp, #0
 8001226:	60f8      	str	r0, [r7, #12]
 8001228:	60b9      	str	r1, [r7, #8]
 800122a:	607a      	str	r2, [r7, #4]
 800122c:	603b      	str	r3, [r7, #0]
  uint8_t i; for (i = 0u; i < JLB_VALIDATE_DLC(measurements_1_DLC); _d[i++] = JLB_INITIAL_BYTE_VALUE);
 800122e:	2300      	movs	r3, #0
 8001230:	75fb      	strb	r3, [r7, #23]
 8001232:	e007      	b.n	8001244 <Pack_measurements_1_jlb+0x24>
 8001234:	7dfb      	ldrb	r3, [r7, #23]
 8001236:	1c5a      	adds	r2, r3, #1
 8001238:	75fa      	strb	r2, [r7, #23]
 800123a:	461a      	mov	r2, r3
 800123c:	68bb      	ldr	r3, [r7, #8]
 800123e:	4413      	add	r3, r2
 8001240:	2200      	movs	r2, #0
 8001242:	701a      	strb	r2, [r3, #0]
 8001244:	7dfb      	ldrb	r3, [r7, #23]
 8001246:	2b07      	cmp	r3, #7
 8001248:	d9f4      	bls.n	8001234 <Pack_measurements_1_jlb+0x14>

  _d[0] |= (uint8_t) ( (_m->line_sensor_1 & (0x03U)) | ((_m->line_sensor_2 & (0x03U)) << 2U) | ((_m->line_sensor_3 & (0x03U)) << 4U) | ((_m->line_sensor_4 & (0x03U)) << 6U) );
 800124a:	68bb      	ldr	r3, [r7, #8]
 800124c:	781a      	ldrb	r2, [r3, #0]
 800124e:	68fb      	ldr	r3, [r7, #12]
 8001250:	781b      	ldrb	r3, [r3, #0]
 8001252:	f003 0303 	and.w	r3, r3, #3
 8001256:	b2d9      	uxtb	r1, r3
 8001258:	68fb      	ldr	r3, [r7, #12]
 800125a:	785b      	ldrb	r3, [r3, #1]
 800125c:	009b      	lsls	r3, r3, #2
 800125e:	b2db      	uxtb	r3, r3
 8001260:	f003 030c 	and.w	r3, r3, #12
 8001264:	b2db      	uxtb	r3, r3
 8001266:	430b      	orrs	r3, r1
 8001268:	b2d9      	uxtb	r1, r3
 800126a:	68fb      	ldr	r3, [r7, #12]
 800126c:	789b      	ldrb	r3, [r3, #2]
 800126e:	011b      	lsls	r3, r3, #4
 8001270:	b2db      	uxtb	r3, r3
 8001272:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8001276:	b2db      	uxtb	r3, r3
 8001278:	430b      	orrs	r3, r1
 800127a:	b2d9      	uxtb	r1, r3
 800127c:	68fb      	ldr	r3, [r7, #12]
 800127e:	78db      	ldrb	r3, [r3, #3]
 8001280:	019b      	lsls	r3, r3, #6
 8001282:	b2db      	uxtb	r3, r3
 8001284:	430b      	orrs	r3, r1
 8001286:	b2db      	uxtb	r3, r3
 8001288:	4313      	orrs	r3, r2
 800128a:	b2da      	uxtb	r2, r3
 800128c:	68bb      	ldr	r3, [r7, #8]
 800128e:	701a      	strb	r2, [r3, #0]
  _d[1] |= (uint8_t) ( (_m->line_sensor_5 & (0x03U)) | ((_m->line_sensor_6 & (0x03U)) << 2U) | ((_m->line_sensor_7 & (0x03U)) << 4U) | ((_m->line_sensor_8 & (0x03U)) << 6U) );
 8001290:	68bb      	ldr	r3, [r7, #8]
 8001292:	3301      	adds	r3, #1
 8001294:	7819      	ldrb	r1, [r3, #0]
 8001296:	68fb      	ldr	r3, [r7, #12]
 8001298:	791b      	ldrb	r3, [r3, #4]
 800129a:	f003 0303 	and.w	r3, r3, #3
 800129e:	b2da      	uxtb	r2, r3
 80012a0:	68fb      	ldr	r3, [r7, #12]
 80012a2:	795b      	ldrb	r3, [r3, #5]
 80012a4:	009b      	lsls	r3, r3, #2
 80012a6:	b2db      	uxtb	r3, r3
 80012a8:	f003 030c 	and.w	r3, r3, #12
 80012ac:	b2db      	uxtb	r3, r3
 80012ae:	4313      	orrs	r3, r2
 80012b0:	b2da      	uxtb	r2, r3
 80012b2:	68fb      	ldr	r3, [r7, #12]
 80012b4:	799b      	ldrb	r3, [r3, #6]
 80012b6:	011b      	lsls	r3, r3, #4
 80012b8:	b2db      	uxtb	r3, r3
 80012ba:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80012be:	b2db      	uxtb	r3, r3
 80012c0:	4313      	orrs	r3, r2
 80012c2:	b2da      	uxtb	r2, r3
 80012c4:	68fb      	ldr	r3, [r7, #12]
 80012c6:	79db      	ldrb	r3, [r3, #7]
 80012c8:	019b      	lsls	r3, r3, #6
 80012ca:	b2db      	uxtb	r3, r3
 80012cc:	4313      	orrs	r3, r2
 80012ce:	b2da      	uxtb	r2, r3
 80012d0:	68bb      	ldr	r3, [r7, #8]
 80012d2:	3301      	adds	r3, #1
 80012d4:	430a      	orrs	r2, r1
 80012d6:	b2d2      	uxtb	r2, r2
 80012d8:	701a      	strb	r2, [r3, #0]
  _d[2] |= (uint8_t) ( (_m->line_sensor_9 & (0x03U)) | ((_m->line_sensor_10 & (0x03U)) << 2U) | ((_m->line_sensor_11 & (0x03U)) << 4U) | ((_m->line_sensor_12 & (0x03U)) << 6U) );
 80012da:	68bb      	ldr	r3, [r7, #8]
 80012dc:	3302      	adds	r3, #2
 80012de:	7819      	ldrb	r1, [r3, #0]
 80012e0:	68fb      	ldr	r3, [r7, #12]
 80012e2:	7a1b      	ldrb	r3, [r3, #8]
 80012e4:	f003 0303 	and.w	r3, r3, #3
 80012e8:	b2da      	uxtb	r2, r3
 80012ea:	68fb      	ldr	r3, [r7, #12]
 80012ec:	7a5b      	ldrb	r3, [r3, #9]
 80012ee:	009b      	lsls	r3, r3, #2
 80012f0:	b2db      	uxtb	r3, r3
 80012f2:	f003 030c 	and.w	r3, r3, #12
 80012f6:	b2db      	uxtb	r3, r3
 80012f8:	4313      	orrs	r3, r2
 80012fa:	b2da      	uxtb	r2, r3
 80012fc:	68fb      	ldr	r3, [r7, #12]
 80012fe:	7a9b      	ldrb	r3, [r3, #10]
 8001300:	011b      	lsls	r3, r3, #4
 8001302:	b2db      	uxtb	r3, r3
 8001304:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8001308:	b2db      	uxtb	r3, r3
 800130a:	4313      	orrs	r3, r2
 800130c:	b2da      	uxtb	r2, r3
 800130e:	68fb      	ldr	r3, [r7, #12]
 8001310:	7adb      	ldrb	r3, [r3, #11]
 8001312:	019b      	lsls	r3, r3, #6
 8001314:	b2db      	uxtb	r3, r3
 8001316:	4313      	orrs	r3, r2
 8001318:	b2da      	uxtb	r2, r3
 800131a:	68bb      	ldr	r3, [r7, #8]
 800131c:	3302      	adds	r3, #2
 800131e:	430a      	orrs	r2, r1
 8001320:	b2d2      	uxtb	r2, r2
 8001322:	701a      	strb	r2, [r3, #0]
  _d[3] |= (uint8_t) ( (_m->line_sensor_13 & (0x03U)) | ((_m->line_sensor_14 & (0x03U)) << 2U) | ((_m->line_sensor_15 & (0x03U)) << 4U) | ((_m->line_sensor_16 & (0x03U)) << 6U) );
 8001324:	68bb      	ldr	r3, [r7, #8]
 8001326:	3303      	adds	r3, #3
 8001328:	7819      	ldrb	r1, [r3, #0]
 800132a:	68fb      	ldr	r3, [r7, #12]
 800132c:	7b1b      	ldrb	r3, [r3, #12]
 800132e:	f003 0303 	and.w	r3, r3, #3
 8001332:	b2da      	uxtb	r2, r3
 8001334:	68fb      	ldr	r3, [r7, #12]
 8001336:	7b5b      	ldrb	r3, [r3, #13]
 8001338:	009b      	lsls	r3, r3, #2
 800133a:	b2db      	uxtb	r3, r3
 800133c:	f003 030c 	and.w	r3, r3, #12
 8001340:	b2db      	uxtb	r3, r3
 8001342:	4313      	orrs	r3, r2
 8001344:	b2da      	uxtb	r2, r3
 8001346:	68fb      	ldr	r3, [r7, #12]
 8001348:	7b9b      	ldrb	r3, [r3, #14]
 800134a:	011b      	lsls	r3, r3, #4
 800134c:	b2db      	uxtb	r3, r3
 800134e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8001352:	b2db      	uxtb	r3, r3
 8001354:	4313      	orrs	r3, r2
 8001356:	b2da      	uxtb	r2, r3
 8001358:	68fb      	ldr	r3, [r7, #12]
 800135a:	7bdb      	ldrb	r3, [r3, #15]
 800135c:	019b      	lsls	r3, r3, #6
 800135e:	b2db      	uxtb	r3, r3
 8001360:	4313      	orrs	r3, r2
 8001362:	b2da      	uxtb	r2, r3
 8001364:	68bb      	ldr	r3, [r7, #8]
 8001366:	3303      	adds	r3, #3
 8001368:	430a      	orrs	r2, r1
 800136a:	b2d2      	uxtb	r2, r2
 800136c:	701a      	strb	r2, [r3, #0]
  _d[4] |= (uint8_t) ( (_m->line_sensor_17 & (0x03U)) | ((_m->line_sensor_18 & (0x03U)) << 2U) | ((_m->line_sensor_19 & (0x03U)) << 4U) | ((_m->line_sensor_20 & (0x03U)) << 6U) );
 800136e:	68bb      	ldr	r3, [r7, #8]
 8001370:	3304      	adds	r3, #4
 8001372:	7819      	ldrb	r1, [r3, #0]
 8001374:	68fb      	ldr	r3, [r7, #12]
 8001376:	7c1b      	ldrb	r3, [r3, #16]
 8001378:	f003 0303 	and.w	r3, r3, #3
 800137c:	b2da      	uxtb	r2, r3
 800137e:	68fb      	ldr	r3, [r7, #12]
 8001380:	7c5b      	ldrb	r3, [r3, #17]
 8001382:	009b      	lsls	r3, r3, #2
 8001384:	b2db      	uxtb	r3, r3
 8001386:	f003 030c 	and.w	r3, r3, #12
 800138a:	b2db      	uxtb	r3, r3
 800138c:	4313      	orrs	r3, r2
 800138e:	b2da      	uxtb	r2, r3
 8001390:	68fb      	ldr	r3, [r7, #12]
 8001392:	7c9b      	ldrb	r3, [r3, #18]
 8001394:	011b      	lsls	r3, r3, #4
 8001396:	b2db      	uxtb	r3, r3
 8001398:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800139c:	b2db      	uxtb	r3, r3
 800139e:	4313      	orrs	r3, r2
 80013a0:	b2da      	uxtb	r2, r3
 80013a2:	68fb      	ldr	r3, [r7, #12]
 80013a4:	7cdb      	ldrb	r3, [r3, #19]
 80013a6:	019b      	lsls	r3, r3, #6
 80013a8:	b2db      	uxtb	r3, r3
 80013aa:	4313      	orrs	r3, r2
 80013ac:	b2da      	uxtb	r2, r3
 80013ae:	68bb      	ldr	r3, [r7, #8]
 80013b0:	3304      	adds	r3, #4
 80013b2:	430a      	orrs	r2, r1
 80013b4:	b2d2      	uxtb	r2, r2
 80013b6:	701a      	strb	r2, [r3, #0]
  _d[5] |= (uint8_t) ( (_m->line_sensor_21 & (0x03U)) | ((_m->line_sensor_22 & (0x03U)) << 2U) | ((_m->line_sensor_23 & (0x03U)) << 4U) | ((_m->line_sensor_24 & (0x03U)) << 6U) );
 80013b8:	68bb      	ldr	r3, [r7, #8]
 80013ba:	3305      	adds	r3, #5
 80013bc:	7819      	ldrb	r1, [r3, #0]
 80013be:	68fb      	ldr	r3, [r7, #12]
 80013c0:	7d1b      	ldrb	r3, [r3, #20]
 80013c2:	f003 0303 	and.w	r3, r3, #3
 80013c6:	b2da      	uxtb	r2, r3
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	7d5b      	ldrb	r3, [r3, #21]
 80013cc:	009b      	lsls	r3, r3, #2
 80013ce:	b2db      	uxtb	r3, r3
 80013d0:	f003 030c 	and.w	r3, r3, #12
 80013d4:	b2db      	uxtb	r3, r3
 80013d6:	4313      	orrs	r3, r2
 80013d8:	b2da      	uxtb	r2, r3
 80013da:	68fb      	ldr	r3, [r7, #12]
 80013dc:	7d9b      	ldrb	r3, [r3, #22]
 80013de:	011b      	lsls	r3, r3, #4
 80013e0:	b2db      	uxtb	r3, r3
 80013e2:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80013e6:	b2db      	uxtb	r3, r3
 80013e8:	4313      	orrs	r3, r2
 80013ea:	b2da      	uxtb	r2, r3
 80013ec:	68fb      	ldr	r3, [r7, #12]
 80013ee:	7ddb      	ldrb	r3, [r3, #23]
 80013f0:	019b      	lsls	r3, r3, #6
 80013f2:	b2db      	uxtb	r3, r3
 80013f4:	4313      	orrs	r3, r2
 80013f6:	b2da      	uxtb	r2, r3
 80013f8:	68bb      	ldr	r3, [r7, #8]
 80013fa:	3305      	adds	r3, #5
 80013fc:	430a      	orrs	r2, r1
 80013fe:	b2d2      	uxtb	r2, r2
 8001400:	701a      	strb	r2, [r3, #0]
  _d[6] |= (uint8_t) ( (_m->line_sensor_25 & (0x03U)) | ((_m->line_sensor_26 & (0x03U)) << 2U) | ((_m->line_sensor_27 & (0x03U)) << 4U) | ((_m->line_sensor_28 & (0x03U)) << 6U) );
 8001402:	68bb      	ldr	r3, [r7, #8]
 8001404:	3306      	adds	r3, #6
 8001406:	7819      	ldrb	r1, [r3, #0]
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	7e1b      	ldrb	r3, [r3, #24]
 800140c:	f003 0303 	and.w	r3, r3, #3
 8001410:	b2da      	uxtb	r2, r3
 8001412:	68fb      	ldr	r3, [r7, #12]
 8001414:	7e5b      	ldrb	r3, [r3, #25]
 8001416:	009b      	lsls	r3, r3, #2
 8001418:	b2db      	uxtb	r3, r3
 800141a:	f003 030c 	and.w	r3, r3, #12
 800141e:	b2db      	uxtb	r3, r3
 8001420:	4313      	orrs	r3, r2
 8001422:	b2da      	uxtb	r2, r3
 8001424:	68fb      	ldr	r3, [r7, #12]
 8001426:	7e9b      	ldrb	r3, [r3, #26]
 8001428:	011b      	lsls	r3, r3, #4
 800142a:	b2db      	uxtb	r3, r3
 800142c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8001430:	b2db      	uxtb	r3, r3
 8001432:	4313      	orrs	r3, r2
 8001434:	b2da      	uxtb	r2, r3
 8001436:	68fb      	ldr	r3, [r7, #12]
 8001438:	7edb      	ldrb	r3, [r3, #27]
 800143a:	019b      	lsls	r3, r3, #6
 800143c:	b2db      	uxtb	r3, r3
 800143e:	4313      	orrs	r3, r2
 8001440:	b2da      	uxtb	r2, r3
 8001442:	68bb      	ldr	r3, [r7, #8]
 8001444:	3306      	adds	r3, #6
 8001446:	430a      	orrs	r2, r1
 8001448:	b2d2      	uxtb	r2, r2
 800144a:	701a      	strb	r2, [r3, #0]
  _d[7] |= (uint8_t) ( (_m->line_sensor_29 & (0x03U)) | ((_m->line_sensor_30 & (0x03U)) << 2U) | ((_m->line_sensor_31 & (0x03U)) << 4U) | ((_m->line_sensor_32 & (0x03U)) << 6U) );
 800144c:	68bb      	ldr	r3, [r7, #8]
 800144e:	3307      	adds	r3, #7
 8001450:	7819      	ldrb	r1, [r3, #0]
 8001452:	68fb      	ldr	r3, [r7, #12]
 8001454:	7f1b      	ldrb	r3, [r3, #28]
 8001456:	f003 0303 	and.w	r3, r3, #3
 800145a:	b2da      	uxtb	r2, r3
 800145c:	68fb      	ldr	r3, [r7, #12]
 800145e:	7f5b      	ldrb	r3, [r3, #29]
 8001460:	009b      	lsls	r3, r3, #2
 8001462:	b2db      	uxtb	r3, r3
 8001464:	f003 030c 	and.w	r3, r3, #12
 8001468:	b2db      	uxtb	r3, r3
 800146a:	4313      	orrs	r3, r2
 800146c:	b2da      	uxtb	r2, r3
 800146e:	68fb      	ldr	r3, [r7, #12]
 8001470:	7f9b      	ldrb	r3, [r3, #30]
 8001472:	011b      	lsls	r3, r3, #4
 8001474:	b2db      	uxtb	r3, r3
 8001476:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800147a:	b2db      	uxtb	r3, r3
 800147c:	4313      	orrs	r3, r2
 800147e:	b2da      	uxtb	r2, r3
 8001480:	68fb      	ldr	r3, [r7, #12]
 8001482:	7fdb      	ldrb	r3, [r3, #31]
 8001484:	019b      	lsls	r3, r3, #6
 8001486:	b2db      	uxtb	r3, r3
 8001488:	4313      	orrs	r3, r2
 800148a:	b2da      	uxtb	r2, r3
 800148c:	68bb      	ldr	r3, [r7, #8]
 800148e:	3307      	adds	r3, #7
 8001490:	430a      	orrs	r2, r1
 8001492:	b2d2      	uxtb	r2, r2
 8001494:	701a      	strb	r2, [r3, #0]

  *_len = (uint8_t) measurements_1_DLC;
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	2208      	movs	r2, #8
 800149a:	701a      	strb	r2, [r3, #0]
  *_ide = (uint8_t) measurements_1_IDE;
 800149c:	683b      	ldr	r3, [r7, #0]
 800149e:	2200      	movs	r2, #0
 80014a0:	701a      	strb	r2, [r3, #0]
  return measurements_1_CANID;
 80014a2:	2301      	movs	r3, #1
}
 80014a4:	4618      	mov	r0, r3
 80014a6:	371c      	adds	r7, #28
 80014a8:	46bd      	mov	sp, r7
 80014aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ae:	4770      	bx	lr

080014b0 <Pack_measurements_2_jlb>:
}

#else

uint32_t Pack_measurements_2_jlb(measurements_2_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide)
{
 80014b0:	b480      	push	{r7}
 80014b2:	b087      	sub	sp, #28
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	60f8      	str	r0, [r7, #12]
 80014b8:	60b9      	str	r1, [r7, #8]
 80014ba:	607a      	str	r2, [r7, #4]
 80014bc:	603b      	str	r3, [r7, #0]
  uint8_t i; for (i = 0u; i < JLB_VALIDATE_DLC(measurements_2_DLC); _d[i++] = JLB_INITIAL_BYTE_VALUE);
 80014be:	2300      	movs	r3, #0
 80014c0:	75fb      	strb	r3, [r7, #23]
 80014c2:	e007      	b.n	80014d4 <Pack_measurements_2_jlb+0x24>
 80014c4:	7dfb      	ldrb	r3, [r7, #23]
 80014c6:	1c5a      	adds	r2, r3, #1
 80014c8:	75fa      	strb	r2, [r7, #23]
 80014ca:	461a      	mov	r2, r3
 80014cc:	68bb      	ldr	r3, [r7, #8]
 80014ce:	4413      	add	r3, r2
 80014d0:	2200      	movs	r2, #0
 80014d2:	701a      	strb	r2, [r3, #0]
 80014d4:	7dfb      	ldrb	r3, [r7, #23]
 80014d6:	2b07      	cmp	r3, #7
 80014d8:	d9f4      	bls.n	80014c4 <Pack_measurements_2_jlb+0x14>

  _d[0] |= (uint8_t) ( (_m->line_sensor_1 & (0x03U)) | ((_m->line_sensor_2 & (0x03U)) << 2U) | ((_m->line_sensor_3 & (0x03U)) << 4U) | ((_m->line_sensor_4 & (0x03U)) << 6U) );
 80014da:	68bb      	ldr	r3, [r7, #8]
 80014dc:	781a      	ldrb	r2, [r3, #0]
 80014de:	68fb      	ldr	r3, [r7, #12]
 80014e0:	781b      	ldrb	r3, [r3, #0]
 80014e2:	f003 0303 	and.w	r3, r3, #3
 80014e6:	b2d9      	uxtb	r1, r3
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	785b      	ldrb	r3, [r3, #1]
 80014ec:	009b      	lsls	r3, r3, #2
 80014ee:	b2db      	uxtb	r3, r3
 80014f0:	f003 030c 	and.w	r3, r3, #12
 80014f4:	b2db      	uxtb	r3, r3
 80014f6:	430b      	orrs	r3, r1
 80014f8:	b2d9      	uxtb	r1, r3
 80014fa:	68fb      	ldr	r3, [r7, #12]
 80014fc:	789b      	ldrb	r3, [r3, #2]
 80014fe:	011b      	lsls	r3, r3, #4
 8001500:	b2db      	uxtb	r3, r3
 8001502:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8001506:	b2db      	uxtb	r3, r3
 8001508:	430b      	orrs	r3, r1
 800150a:	b2d9      	uxtb	r1, r3
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	78db      	ldrb	r3, [r3, #3]
 8001510:	019b      	lsls	r3, r3, #6
 8001512:	b2db      	uxtb	r3, r3
 8001514:	430b      	orrs	r3, r1
 8001516:	b2db      	uxtb	r3, r3
 8001518:	4313      	orrs	r3, r2
 800151a:	b2da      	uxtb	r2, r3
 800151c:	68bb      	ldr	r3, [r7, #8]
 800151e:	701a      	strb	r2, [r3, #0]
  _d[1] |= (uint8_t) ( (_m->line_sensor_5 & (0x03U)) | ((_m->line_sensor_6 & (0x03U)) << 2U) | ((_m->line_sensor_7 & (0x03U)) << 4U) | ((_m->line_sensor_8 & (0x03U)) << 6U) );
 8001520:	68bb      	ldr	r3, [r7, #8]
 8001522:	3301      	adds	r3, #1
 8001524:	7819      	ldrb	r1, [r3, #0]
 8001526:	68fb      	ldr	r3, [r7, #12]
 8001528:	791b      	ldrb	r3, [r3, #4]
 800152a:	f003 0303 	and.w	r3, r3, #3
 800152e:	b2da      	uxtb	r2, r3
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	795b      	ldrb	r3, [r3, #5]
 8001534:	009b      	lsls	r3, r3, #2
 8001536:	b2db      	uxtb	r3, r3
 8001538:	f003 030c 	and.w	r3, r3, #12
 800153c:	b2db      	uxtb	r3, r3
 800153e:	4313      	orrs	r3, r2
 8001540:	b2da      	uxtb	r2, r3
 8001542:	68fb      	ldr	r3, [r7, #12]
 8001544:	799b      	ldrb	r3, [r3, #6]
 8001546:	011b      	lsls	r3, r3, #4
 8001548:	b2db      	uxtb	r3, r3
 800154a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800154e:	b2db      	uxtb	r3, r3
 8001550:	4313      	orrs	r3, r2
 8001552:	b2da      	uxtb	r2, r3
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	79db      	ldrb	r3, [r3, #7]
 8001558:	019b      	lsls	r3, r3, #6
 800155a:	b2db      	uxtb	r3, r3
 800155c:	4313      	orrs	r3, r2
 800155e:	b2da      	uxtb	r2, r3
 8001560:	68bb      	ldr	r3, [r7, #8]
 8001562:	3301      	adds	r3, #1
 8001564:	430a      	orrs	r2, r1
 8001566:	b2d2      	uxtb	r2, r2
 8001568:	701a      	strb	r2, [r3, #0]
  _d[2] |= (uint8_t) ( (_m->line_sensor_9 & (0x03U)) | ((_m->line_sensor_10 & (0x03U)) << 2U) | ((_m->line_sensor_11 & (0x03U)) << 4U) | ((_m->line_sensor_12 & (0x03U)) << 6U) );
 800156a:	68bb      	ldr	r3, [r7, #8]
 800156c:	3302      	adds	r3, #2
 800156e:	7819      	ldrb	r1, [r3, #0]
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	7a1b      	ldrb	r3, [r3, #8]
 8001574:	f003 0303 	and.w	r3, r3, #3
 8001578:	b2da      	uxtb	r2, r3
 800157a:	68fb      	ldr	r3, [r7, #12]
 800157c:	7a5b      	ldrb	r3, [r3, #9]
 800157e:	009b      	lsls	r3, r3, #2
 8001580:	b2db      	uxtb	r3, r3
 8001582:	f003 030c 	and.w	r3, r3, #12
 8001586:	b2db      	uxtb	r3, r3
 8001588:	4313      	orrs	r3, r2
 800158a:	b2da      	uxtb	r2, r3
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	7a9b      	ldrb	r3, [r3, #10]
 8001590:	011b      	lsls	r3, r3, #4
 8001592:	b2db      	uxtb	r3, r3
 8001594:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8001598:	b2db      	uxtb	r3, r3
 800159a:	4313      	orrs	r3, r2
 800159c:	b2da      	uxtb	r2, r3
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	7adb      	ldrb	r3, [r3, #11]
 80015a2:	019b      	lsls	r3, r3, #6
 80015a4:	b2db      	uxtb	r3, r3
 80015a6:	4313      	orrs	r3, r2
 80015a8:	b2da      	uxtb	r2, r3
 80015aa:	68bb      	ldr	r3, [r7, #8]
 80015ac:	3302      	adds	r3, #2
 80015ae:	430a      	orrs	r2, r1
 80015b0:	b2d2      	uxtb	r2, r2
 80015b2:	701a      	strb	r2, [r3, #0]
  _d[3] |= (uint8_t) ( (_m->line_sensor_13 & (0x03U)) | ((_m->line_sensor_14 & (0x03U)) << 2U) | ((_m->line_sensor_15 & (0x03U)) << 4U) | ((_m->line_sensor_16 & (0x03U)) << 6U) );
 80015b4:	68bb      	ldr	r3, [r7, #8]
 80015b6:	3303      	adds	r3, #3
 80015b8:	7819      	ldrb	r1, [r3, #0]
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	7b1b      	ldrb	r3, [r3, #12]
 80015be:	f003 0303 	and.w	r3, r3, #3
 80015c2:	b2da      	uxtb	r2, r3
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	7b5b      	ldrb	r3, [r3, #13]
 80015c8:	009b      	lsls	r3, r3, #2
 80015ca:	b2db      	uxtb	r3, r3
 80015cc:	f003 030c 	and.w	r3, r3, #12
 80015d0:	b2db      	uxtb	r3, r3
 80015d2:	4313      	orrs	r3, r2
 80015d4:	b2da      	uxtb	r2, r3
 80015d6:	68fb      	ldr	r3, [r7, #12]
 80015d8:	7b9b      	ldrb	r3, [r3, #14]
 80015da:	011b      	lsls	r3, r3, #4
 80015dc:	b2db      	uxtb	r3, r3
 80015de:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80015e2:	b2db      	uxtb	r3, r3
 80015e4:	4313      	orrs	r3, r2
 80015e6:	b2da      	uxtb	r2, r3
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	7bdb      	ldrb	r3, [r3, #15]
 80015ec:	019b      	lsls	r3, r3, #6
 80015ee:	b2db      	uxtb	r3, r3
 80015f0:	4313      	orrs	r3, r2
 80015f2:	b2da      	uxtb	r2, r3
 80015f4:	68bb      	ldr	r3, [r7, #8]
 80015f6:	3303      	adds	r3, #3
 80015f8:	430a      	orrs	r2, r1
 80015fa:	b2d2      	uxtb	r2, r2
 80015fc:	701a      	strb	r2, [r3, #0]
  _d[4] |= (uint8_t) ( (_m->line_sensor_17 & (0x03U)) | ((_m->line_sensor_18 & (0x03U)) << 2U) | ((_m->line_sensor_19 & (0x03U)) << 4U) | ((_m->line_sensor_20 & (0x03U)) << 6U) );
 80015fe:	68bb      	ldr	r3, [r7, #8]
 8001600:	3304      	adds	r3, #4
 8001602:	7819      	ldrb	r1, [r3, #0]
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	7c1b      	ldrb	r3, [r3, #16]
 8001608:	f003 0303 	and.w	r3, r3, #3
 800160c:	b2da      	uxtb	r2, r3
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	7c5b      	ldrb	r3, [r3, #17]
 8001612:	009b      	lsls	r3, r3, #2
 8001614:	b2db      	uxtb	r3, r3
 8001616:	f003 030c 	and.w	r3, r3, #12
 800161a:	b2db      	uxtb	r3, r3
 800161c:	4313      	orrs	r3, r2
 800161e:	b2da      	uxtb	r2, r3
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	7c9b      	ldrb	r3, [r3, #18]
 8001624:	011b      	lsls	r3, r3, #4
 8001626:	b2db      	uxtb	r3, r3
 8001628:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800162c:	b2db      	uxtb	r3, r3
 800162e:	4313      	orrs	r3, r2
 8001630:	b2da      	uxtb	r2, r3
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	7cdb      	ldrb	r3, [r3, #19]
 8001636:	019b      	lsls	r3, r3, #6
 8001638:	b2db      	uxtb	r3, r3
 800163a:	4313      	orrs	r3, r2
 800163c:	b2da      	uxtb	r2, r3
 800163e:	68bb      	ldr	r3, [r7, #8]
 8001640:	3304      	adds	r3, #4
 8001642:	430a      	orrs	r2, r1
 8001644:	b2d2      	uxtb	r2, r2
 8001646:	701a      	strb	r2, [r3, #0]
  _d[5] |= (uint8_t) ( (_m->line_sensor_21 & (0x03U)) | ((_m->line_sensor_22 & (0x03U)) << 2U) | ((_m->line_sensor_23 & (0x03U)) << 4U) | ((_m->line_sensor_24 & (0x03U)) << 6U) );
 8001648:	68bb      	ldr	r3, [r7, #8]
 800164a:	3305      	adds	r3, #5
 800164c:	7819      	ldrb	r1, [r3, #0]
 800164e:	68fb      	ldr	r3, [r7, #12]
 8001650:	7d1b      	ldrb	r3, [r3, #20]
 8001652:	f003 0303 	and.w	r3, r3, #3
 8001656:	b2da      	uxtb	r2, r3
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	7d5b      	ldrb	r3, [r3, #21]
 800165c:	009b      	lsls	r3, r3, #2
 800165e:	b2db      	uxtb	r3, r3
 8001660:	f003 030c 	and.w	r3, r3, #12
 8001664:	b2db      	uxtb	r3, r3
 8001666:	4313      	orrs	r3, r2
 8001668:	b2da      	uxtb	r2, r3
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	7d9b      	ldrb	r3, [r3, #22]
 800166e:	011b      	lsls	r3, r3, #4
 8001670:	b2db      	uxtb	r3, r3
 8001672:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8001676:	b2db      	uxtb	r3, r3
 8001678:	4313      	orrs	r3, r2
 800167a:	b2da      	uxtb	r2, r3
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	7ddb      	ldrb	r3, [r3, #23]
 8001680:	019b      	lsls	r3, r3, #6
 8001682:	b2db      	uxtb	r3, r3
 8001684:	4313      	orrs	r3, r2
 8001686:	b2da      	uxtb	r2, r3
 8001688:	68bb      	ldr	r3, [r7, #8]
 800168a:	3305      	adds	r3, #5
 800168c:	430a      	orrs	r2, r1
 800168e:	b2d2      	uxtb	r2, r2
 8001690:	701a      	strb	r2, [r3, #0]
  _d[6] |= (uint8_t) ( (_m->line_sensor_25 & (0x03U)) | ((_m->line_sensor_26 & (0x03U)) << 2U) | ((_m->line_sensor_27 & (0x03U)) << 4U) | ((_m->line_sensor_28 & (0x03U)) << 6U) );
 8001692:	68bb      	ldr	r3, [r7, #8]
 8001694:	3306      	adds	r3, #6
 8001696:	7819      	ldrb	r1, [r3, #0]
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	7e1b      	ldrb	r3, [r3, #24]
 800169c:	f003 0303 	and.w	r3, r3, #3
 80016a0:	b2da      	uxtb	r2, r3
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	7e5b      	ldrb	r3, [r3, #25]
 80016a6:	009b      	lsls	r3, r3, #2
 80016a8:	b2db      	uxtb	r3, r3
 80016aa:	f003 030c 	and.w	r3, r3, #12
 80016ae:	b2db      	uxtb	r3, r3
 80016b0:	4313      	orrs	r3, r2
 80016b2:	b2da      	uxtb	r2, r3
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	7e9b      	ldrb	r3, [r3, #26]
 80016b8:	011b      	lsls	r3, r3, #4
 80016ba:	b2db      	uxtb	r3, r3
 80016bc:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80016c0:	b2db      	uxtb	r3, r3
 80016c2:	4313      	orrs	r3, r2
 80016c4:	b2da      	uxtb	r2, r3
 80016c6:	68fb      	ldr	r3, [r7, #12]
 80016c8:	7edb      	ldrb	r3, [r3, #27]
 80016ca:	019b      	lsls	r3, r3, #6
 80016cc:	b2db      	uxtb	r3, r3
 80016ce:	4313      	orrs	r3, r2
 80016d0:	b2da      	uxtb	r2, r3
 80016d2:	68bb      	ldr	r3, [r7, #8]
 80016d4:	3306      	adds	r3, #6
 80016d6:	430a      	orrs	r2, r1
 80016d8:	b2d2      	uxtb	r2, r2
 80016da:	701a      	strb	r2, [r3, #0]
  _d[7] |= (uint8_t) ( (_m->line_sensor_29 & (0x03U)) | ((_m->line_sensor_30 & (0x03U)) << 2U) | ((_m->line_sensor_31 & (0x03U)) << 4U) | ((_m->line_sensor_32 & (0x03U)) << 6U) );
 80016dc:	68bb      	ldr	r3, [r7, #8]
 80016de:	3307      	adds	r3, #7
 80016e0:	7819      	ldrb	r1, [r3, #0]
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	7f1b      	ldrb	r3, [r3, #28]
 80016e6:	f003 0303 	and.w	r3, r3, #3
 80016ea:	b2da      	uxtb	r2, r3
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	7f5b      	ldrb	r3, [r3, #29]
 80016f0:	009b      	lsls	r3, r3, #2
 80016f2:	b2db      	uxtb	r3, r3
 80016f4:	f003 030c 	and.w	r3, r3, #12
 80016f8:	b2db      	uxtb	r3, r3
 80016fa:	4313      	orrs	r3, r2
 80016fc:	b2da      	uxtb	r2, r3
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	7f9b      	ldrb	r3, [r3, #30]
 8001702:	011b      	lsls	r3, r3, #4
 8001704:	b2db      	uxtb	r3, r3
 8001706:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800170a:	b2db      	uxtb	r3, r3
 800170c:	4313      	orrs	r3, r2
 800170e:	b2da      	uxtb	r2, r3
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	7fdb      	ldrb	r3, [r3, #31]
 8001714:	019b      	lsls	r3, r3, #6
 8001716:	b2db      	uxtb	r3, r3
 8001718:	4313      	orrs	r3, r2
 800171a:	b2da      	uxtb	r2, r3
 800171c:	68bb      	ldr	r3, [r7, #8]
 800171e:	3307      	adds	r3, #7
 8001720:	430a      	orrs	r2, r1
 8001722:	b2d2      	uxtb	r2, r2
 8001724:	701a      	strb	r2, [r3, #0]

  *_len = (uint8_t) measurements_2_DLC;
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	2208      	movs	r2, #8
 800172a:	701a      	strb	r2, [r3, #0]
  *_ide = (uint8_t) measurements_2_IDE;
 800172c:	683b      	ldr	r3, [r7, #0]
 800172e:	2200      	movs	r2, #0
 8001730:	701a      	strb	r2, [r3, #0]
  return measurements_2_CANID;
 8001732:	2302      	movs	r3, #2
}
 8001734:	4618      	mov	r0, r3
 8001736:	371c      	adds	r7, #28
 8001738:	46bd      	mov	sp, r7
 800173a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173e:	4770      	bx	lr

08001740 <Pack_measurements_3_jlb>:
}

#else

uint32_t Pack_measurements_3_jlb(measurements_3_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	b086      	sub	sp, #24
 8001744:	af00      	add	r7, sp, #0
 8001746:	60f8      	str	r0, [r7, #12]
 8001748:	60b9      	str	r1, [r7, #8]
 800174a:	607a      	str	r2, [r7, #4]
 800174c:	603b      	str	r3, [r7, #0]
  uint8_t i; for (i = 0u; i < JLB_VALIDATE_DLC(measurements_3_DLC); _d[i++] = JLB_INITIAL_BYTE_VALUE);
 800174e:	2300      	movs	r3, #0
 8001750:	75fb      	strb	r3, [r7, #23]
 8001752:	e007      	b.n	8001764 <Pack_measurements_3_jlb+0x24>
 8001754:	7dfb      	ldrb	r3, [r7, #23]
 8001756:	1c5a      	adds	r2, r3, #1
 8001758:	75fa      	strb	r2, [r7, #23]
 800175a:	461a      	mov	r2, r3
 800175c:	68bb      	ldr	r3, [r7, #8]
 800175e:	4413      	add	r3, r2
 8001760:	2200      	movs	r2, #0
 8001762:	701a      	strb	r2, [r3, #0]
 8001764:	7dfb      	ldrb	r3, [r7, #23]
 8001766:	2b07      	cmp	r3, #7
 8001768:	d9f4      	bls.n	8001754 <Pack_measurements_3_jlb+0x14>

#ifdef JLB_USE_SIGFLOAT
  _m->angular_velocity_x_ro = (uint16_t) JLB_angular_velocity_x_ro_toS(_m->angular_velocity_x_phys);
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8001770:	a34f      	add	r3, pc, #316	; (adr r3, 80018b0 <Pack_measurements_3_jlb+0x170>)
 8001772:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001776:	f7fe fd7b 	bl	8000270 <__adddf3>
 800177a:	4602      	mov	r2, r0
 800177c:	460b      	mov	r3, r1
 800177e:	4610      	mov	r0, r2
 8001780:	4619      	mov	r1, r3
 8001782:	a34d      	add	r3, pc, #308	; (adr r3, 80018b8 <Pack_measurements_3_jlb+0x178>)
 8001784:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001788:	f7ff f852 	bl	8000830 <__aeabi_ddiv>
 800178c:	4602      	mov	r2, r0
 800178e:	460b      	mov	r3, r1
 8001790:	4610      	mov	r0, r2
 8001792:	4619      	mov	r1, r3
 8001794:	f7ff f9fa 	bl	8000b8c <__aeabi_d2uiz>
 8001798:	4603      	mov	r3, r0
 800179a:	b29a      	uxth	r2, r3
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	801a      	strh	r2, [r3, #0]
  _m->angular_velocity_y_ro = (uint16_t) JLB_angular_velocity_y_ro_toS(_m->angular_velocity_y_phys);
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 80017a6:	a342      	add	r3, pc, #264	; (adr r3, 80018b0 <Pack_measurements_3_jlb+0x170>)
 80017a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017ac:	f7fe fd60 	bl	8000270 <__adddf3>
 80017b0:	4602      	mov	r2, r0
 80017b2:	460b      	mov	r3, r1
 80017b4:	4610      	mov	r0, r2
 80017b6:	4619      	mov	r1, r3
 80017b8:	a33f      	add	r3, pc, #252	; (adr r3, 80018b8 <Pack_measurements_3_jlb+0x178>)
 80017ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017be:	f7ff f837 	bl	8000830 <__aeabi_ddiv>
 80017c2:	4602      	mov	r2, r0
 80017c4:	460b      	mov	r3, r1
 80017c6:	4610      	mov	r0, r2
 80017c8:	4619      	mov	r1, r3
 80017ca:	f7ff f9df 	bl	8000b8c <__aeabi_d2uiz>
 80017ce:	4603      	mov	r3, r0
 80017d0:	b29a      	uxth	r2, r3
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	821a      	strh	r2, [r3, #16]
  _m->angular_velocity_z_ro = (uint16_t) JLB_angular_velocity_z_ro_toS(_m->angular_velocity_z_phys);
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 80017dc:	a334      	add	r3, pc, #208	; (adr r3, 80018b0 <Pack_measurements_3_jlb+0x170>)
 80017de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017e2:	f7fe fd45 	bl	8000270 <__adddf3>
 80017e6:	4602      	mov	r2, r0
 80017e8:	460b      	mov	r3, r1
 80017ea:	4610      	mov	r0, r2
 80017ec:	4619      	mov	r1, r3
 80017ee:	a332      	add	r3, pc, #200	; (adr r3, 80018b8 <Pack_measurements_3_jlb+0x178>)
 80017f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017f4:	f7ff f81c 	bl	8000830 <__aeabi_ddiv>
 80017f8:	4602      	mov	r2, r0
 80017fa:	460b      	mov	r3, r1
 80017fc:	4610      	mov	r0, r2
 80017fe:	4619      	mov	r1, r3
 8001800:	f7ff f9c4 	bl	8000b8c <__aeabi_d2uiz>
 8001804:	4603      	mov	r3, r0
 8001806:	b29a      	uxth	r2, r3
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	841a      	strh	r2, [r3, #32]
#endif // JLB_USE_SIGFLOAT

  _d[0] |= (uint8_t) ( (_m->angular_velocity_x_ro & (0xFFU)) );
 800180c:	68bb      	ldr	r3, [r7, #8]
 800180e:	781a      	ldrb	r2, [r3, #0]
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	881b      	ldrh	r3, [r3, #0]
 8001814:	b2db      	uxtb	r3, r3
 8001816:	4313      	orrs	r3, r2
 8001818:	b2da      	uxtb	r2, r3
 800181a:	68bb      	ldr	r3, [r7, #8]
 800181c:	701a      	strb	r2, [r3, #0]
  _d[1] |= (uint8_t) ( ((_m->angular_velocity_x_ro >> 8U) & (0xFFU)) );
 800181e:	68bb      	ldr	r3, [r7, #8]
 8001820:	3301      	adds	r3, #1
 8001822:	7819      	ldrb	r1, [r3, #0]
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	881b      	ldrh	r3, [r3, #0]
 8001828:	0a1b      	lsrs	r3, r3, #8
 800182a:	b29b      	uxth	r3, r3
 800182c:	b2da      	uxtb	r2, r3
 800182e:	68bb      	ldr	r3, [r7, #8]
 8001830:	3301      	adds	r3, #1
 8001832:	430a      	orrs	r2, r1
 8001834:	b2d2      	uxtb	r2, r2
 8001836:	701a      	strb	r2, [r3, #0]
  _d[2] |= (uint8_t) ( (_m->angular_velocity_y_ro & (0xFFU)) );
 8001838:	68bb      	ldr	r3, [r7, #8]
 800183a:	3302      	adds	r3, #2
 800183c:	7819      	ldrb	r1, [r3, #0]
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	8a1b      	ldrh	r3, [r3, #16]
 8001842:	b2da      	uxtb	r2, r3
 8001844:	68bb      	ldr	r3, [r7, #8]
 8001846:	3302      	adds	r3, #2
 8001848:	430a      	orrs	r2, r1
 800184a:	b2d2      	uxtb	r2, r2
 800184c:	701a      	strb	r2, [r3, #0]
  _d[3] |= (uint8_t) ( ((_m->angular_velocity_y_ro >> 8U) & (0xFFU)) );
 800184e:	68bb      	ldr	r3, [r7, #8]
 8001850:	3303      	adds	r3, #3
 8001852:	7819      	ldrb	r1, [r3, #0]
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	8a1b      	ldrh	r3, [r3, #16]
 8001858:	0a1b      	lsrs	r3, r3, #8
 800185a:	b29b      	uxth	r3, r3
 800185c:	b2da      	uxtb	r2, r3
 800185e:	68bb      	ldr	r3, [r7, #8]
 8001860:	3303      	adds	r3, #3
 8001862:	430a      	orrs	r2, r1
 8001864:	b2d2      	uxtb	r2, r2
 8001866:	701a      	strb	r2, [r3, #0]
  _d[4] |= (uint8_t) ( (_m->angular_velocity_z_ro & (0xFFU)) );
 8001868:	68bb      	ldr	r3, [r7, #8]
 800186a:	3304      	adds	r3, #4
 800186c:	7819      	ldrb	r1, [r3, #0]
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	8c1b      	ldrh	r3, [r3, #32]
 8001872:	b2da      	uxtb	r2, r3
 8001874:	68bb      	ldr	r3, [r7, #8]
 8001876:	3304      	adds	r3, #4
 8001878:	430a      	orrs	r2, r1
 800187a:	b2d2      	uxtb	r2, r2
 800187c:	701a      	strb	r2, [r3, #0]
  _d[5] |= (uint8_t) ( ((_m->angular_velocity_z_ro >> 8U) & (0xFFU)) );
 800187e:	68bb      	ldr	r3, [r7, #8]
 8001880:	3305      	adds	r3, #5
 8001882:	7819      	ldrb	r1, [r3, #0]
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	8c1b      	ldrh	r3, [r3, #32]
 8001888:	0a1b      	lsrs	r3, r3, #8
 800188a:	b29b      	uxth	r3, r3
 800188c:	b2da      	uxtb	r2, r3
 800188e:	68bb      	ldr	r3, [r7, #8]
 8001890:	3305      	adds	r3, #5
 8001892:	430a      	orrs	r2, r1
 8001894:	b2d2      	uxtb	r2, r2
 8001896:	701a      	strb	r2, [r3, #0]

  *_len = (uint8_t) measurements_3_DLC;
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	2208      	movs	r2, #8
 800189c:	701a      	strb	r2, [r3, #0]
  *_ide = (uint8_t) measurements_3_IDE;
 800189e:	683b      	ldr	r3, [r7, #0]
 80018a0:	2200      	movs	r2, #0
 80018a2:	701a      	strb	r2, [r3, #0]
  return measurements_3_CANID;
 80018a4:	2303      	movs	r3, #3
}
 80018a6:	4618      	mov	r0, r3
 80018a8:	3718      	adds	r7, #24
 80018aa:	46bd      	mov	sp, r7
 80018ac:	bd80      	pop	{r7, pc}
 80018ae:	bf00      	nop
 80018b0:	b4395810 	.word	0xb4395810
 80018b4:	401a36c8 	.word	0x401a36c8
 80018b8:	eb1c432d 	.word	0xeb1c432d
 80018bc:	3f2a36e2 	.word	0x3f2a36e2

080018c0 <Pack_measurements_4_jlb>:
}

#else

uint32_t Pack_measurements_4_jlb(measurements_4_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	b086      	sub	sp, #24
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	60f8      	str	r0, [r7, #12]
 80018c8:	60b9      	str	r1, [r7, #8]
 80018ca:	607a      	str	r2, [r7, #4]
 80018cc:	603b      	str	r3, [r7, #0]
  uint8_t i; for (i = 0u; i < JLB_VALIDATE_DLC(measurements_4_DLC); _d[i++] = JLB_INITIAL_BYTE_VALUE);
 80018ce:	2300      	movs	r3, #0
 80018d0:	75fb      	strb	r3, [r7, #23]
 80018d2:	e007      	b.n	80018e4 <Pack_measurements_4_jlb+0x24>
 80018d4:	7dfb      	ldrb	r3, [r7, #23]
 80018d6:	1c5a      	adds	r2, r3, #1
 80018d8:	75fa      	strb	r2, [r7, #23]
 80018da:	461a      	mov	r2, r3
 80018dc:	68bb      	ldr	r3, [r7, #8]
 80018de:	4413      	add	r3, r2
 80018e0:	2200      	movs	r2, #0
 80018e2:	701a      	strb	r2, [r3, #0]
 80018e4:	7dfb      	ldrb	r3, [r7, #23]
 80018e6:	2b07      	cmp	r3, #7
 80018e8:	d9f4      	bls.n	80018d4 <Pack_measurements_4_jlb+0x14>

#ifdef JLB_USE_SIGFLOAT
  _m->linear_acceleration_x_ro = (uint16_t) JLB_linear_acceleration_x_ro_toS(_m->linear_acceleration_x_phys);
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 80018f0:	a34f      	add	r3, pc, #316	; (adr r3, 8001a30 <Pack_measurements_4_jlb+0x170>)
 80018f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018f6:	f7fe fcbb 	bl	8000270 <__adddf3>
 80018fa:	4602      	mov	r2, r0
 80018fc:	460b      	mov	r3, r1
 80018fe:	4610      	mov	r0, r2
 8001900:	4619      	mov	r1, r3
 8001902:	a34d      	add	r3, pc, #308	; (adr r3, 8001a38 <Pack_measurements_4_jlb+0x178>)
 8001904:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001908:	f7fe ff92 	bl	8000830 <__aeabi_ddiv>
 800190c:	4602      	mov	r2, r0
 800190e:	460b      	mov	r3, r1
 8001910:	4610      	mov	r0, r2
 8001912:	4619      	mov	r1, r3
 8001914:	f7ff f93a 	bl	8000b8c <__aeabi_d2uiz>
 8001918:	4603      	mov	r3, r0
 800191a:	b29a      	uxth	r2, r3
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	801a      	strh	r2, [r3, #0]
  _m->linear_acceleration_y_ro = (uint16_t) JLB_linear_acceleration_y_ro_toS(_m->linear_acceleration_y_phys);
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8001926:	a342      	add	r3, pc, #264	; (adr r3, 8001a30 <Pack_measurements_4_jlb+0x170>)
 8001928:	e9d3 2300 	ldrd	r2, r3, [r3]
 800192c:	f7fe fca0 	bl	8000270 <__adddf3>
 8001930:	4602      	mov	r2, r0
 8001932:	460b      	mov	r3, r1
 8001934:	4610      	mov	r0, r2
 8001936:	4619      	mov	r1, r3
 8001938:	a33f      	add	r3, pc, #252	; (adr r3, 8001a38 <Pack_measurements_4_jlb+0x178>)
 800193a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800193e:	f7fe ff77 	bl	8000830 <__aeabi_ddiv>
 8001942:	4602      	mov	r2, r0
 8001944:	460b      	mov	r3, r1
 8001946:	4610      	mov	r0, r2
 8001948:	4619      	mov	r1, r3
 800194a:	f7ff f91f 	bl	8000b8c <__aeabi_d2uiz>
 800194e:	4603      	mov	r3, r0
 8001950:	b29a      	uxth	r2, r3
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	821a      	strh	r2, [r3, #16]
  _m->linear_acceleration_z_ro = (uint16_t) JLB_linear_acceleration_z_ro_toS(_m->linear_acceleration_z_phys);
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 800195c:	a334      	add	r3, pc, #208	; (adr r3, 8001a30 <Pack_measurements_4_jlb+0x170>)
 800195e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001962:	f7fe fc85 	bl	8000270 <__adddf3>
 8001966:	4602      	mov	r2, r0
 8001968:	460b      	mov	r3, r1
 800196a:	4610      	mov	r0, r2
 800196c:	4619      	mov	r1, r3
 800196e:	a332      	add	r3, pc, #200	; (adr r3, 8001a38 <Pack_measurements_4_jlb+0x178>)
 8001970:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001974:	f7fe ff5c 	bl	8000830 <__aeabi_ddiv>
 8001978:	4602      	mov	r2, r0
 800197a:	460b      	mov	r3, r1
 800197c:	4610      	mov	r0, r2
 800197e:	4619      	mov	r1, r3
 8001980:	f7ff f904 	bl	8000b8c <__aeabi_d2uiz>
 8001984:	4603      	mov	r3, r0
 8001986:	b29a      	uxth	r2, r3
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	841a      	strh	r2, [r3, #32]
#endif // JLB_USE_SIGFLOAT

  _d[0] |= (uint8_t) ( (_m->linear_acceleration_x_ro & (0xFFU)) );
 800198c:	68bb      	ldr	r3, [r7, #8]
 800198e:	781a      	ldrb	r2, [r3, #0]
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	881b      	ldrh	r3, [r3, #0]
 8001994:	b2db      	uxtb	r3, r3
 8001996:	4313      	orrs	r3, r2
 8001998:	b2da      	uxtb	r2, r3
 800199a:	68bb      	ldr	r3, [r7, #8]
 800199c:	701a      	strb	r2, [r3, #0]
  _d[1] |= (uint8_t) ( ((_m->linear_acceleration_x_ro >> 8U) & (0xFFU)) );
 800199e:	68bb      	ldr	r3, [r7, #8]
 80019a0:	3301      	adds	r3, #1
 80019a2:	7819      	ldrb	r1, [r3, #0]
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	881b      	ldrh	r3, [r3, #0]
 80019a8:	0a1b      	lsrs	r3, r3, #8
 80019aa:	b29b      	uxth	r3, r3
 80019ac:	b2da      	uxtb	r2, r3
 80019ae:	68bb      	ldr	r3, [r7, #8]
 80019b0:	3301      	adds	r3, #1
 80019b2:	430a      	orrs	r2, r1
 80019b4:	b2d2      	uxtb	r2, r2
 80019b6:	701a      	strb	r2, [r3, #0]
  _d[2] |= (uint8_t) ( (_m->linear_acceleration_y_ro & (0xFFU)) );
 80019b8:	68bb      	ldr	r3, [r7, #8]
 80019ba:	3302      	adds	r3, #2
 80019bc:	7819      	ldrb	r1, [r3, #0]
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	8a1b      	ldrh	r3, [r3, #16]
 80019c2:	b2da      	uxtb	r2, r3
 80019c4:	68bb      	ldr	r3, [r7, #8]
 80019c6:	3302      	adds	r3, #2
 80019c8:	430a      	orrs	r2, r1
 80019ca:	b2d2      	uxtb	r2, r2
 80019cc:	701a      	strb	r2, [r3, #0]
  _d[3] |= (uint8_t) ( ((_m->linear_acceleration_y_ro >> 8U) & (0xFFU)) );
 80019ce:	68bb      	ldr	r3, [r7, #8]
 80019d0:	3303      	adds	r3, #3
 80019d2:	7819      	ldrb	r1, [r3, #0]
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	8a1b      	ldrh	r3, [r3, #16]
 80019d8:	0a1b      	lsrs	r3, r3, #8
 80019da:	b29b      	uxth	r3, r3
 80019dc:	b2da      	uxtb	r2, r3
 80019de:	68bb      	ldr	r3, [r7, #8]
 80019e0:	3303      	adds	r3, #3
 80019e2:	430a      	orrs	r2, r1
 80019e4:	b2d2      	uxtb	r2, r2
 80019e6:	701a      	strb	r2, [r3, #0]
  _d[4] |= (uint8_t) ( (_m->linear_acceleration_z_ro & (0xFFU)) );
 80019e8:	68bb      	ldr	r3, [r7, #8]
 80019ea:	3304      	adds	r3, #4
 80019ec:	7819      	ldrb	r1, [r3, #0]
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	8c1b      	ldrh	r3, [r3, #32]
 80019f2:	b2da      	uxtb	r2, r3
 80019f4:	68bb      	ldr	r3, [r7, #8]
 80019f6:	3304      	adds	r3, #4
 80019f8:	430a      	orrs	r2, r1
 80019fa:	b2d2      	uxtb	r2, r2
 80019fc:	701a      	strb	r2, [r3, #0]
  _d[5] |= (uint8_t) ( ((_m->linear_acceleration_z_ro >> 8U) & (0xFFU)) );
 80019fe:	68bb      	ldr	r3, [r7, #8]
 8001a00:	3305      	adds	r3, #5
 8001a02:	7819      	ldrb	r1, [r3, #0]
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	8c1b      	ldrh	r3, [r3, #32]
 8001a08:	0a1b      	lsrs	r3, r3, #8
 8001a0a:	b29b      	uxth	r3, r3
 8001a0c:	b2da      	uxtb	r2, r3
 8001a0e:	68bb      	ldr	r3, [r7, #8]
 8001a10:	3305      	adds	r3, #5
 8001a12:	430a      	orrs	r2, r1
 8001a14:	b2d2      	uxtb	r2, r2
 8001a16:	701a      	strb	r2, [r3, #0]

  *_len = (uint8_t) measurements_4_DLC;
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	2208      	movs	r2, #8
 8001a1c:	701a      	strb	r2, [r3, #0]
  *_ide = (uint8_t) measurements_4_IDE;
 8001a1e:	683b      	ldr	r3, [r7, #0]
 8001a20:	2200      	movs	r2, #0
 8001a22:	701a      	strb	r2, [r3, #0]
  return measurements_4_CANID;
 8001a24:	2304      	movs	r3, #4
}
 8001a26:	4618      	mov	r0, r3
 8001a28:	3718      	adds	r7, #24
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	bd80      	pop	{r7, pc}
 8001a2e:	bf00      	nop
 8001a30:	70a3d70a 	.word	0x70a3d70a
 8001a34:	4030623d 	.word	0x4030623d
 8001a38:	d2f1a9fc 	.word	0xd2f1a9fc
 8001a3c:	3f40624d 	.word	0x3f40624d

08001a40 <Pack_measurements_5_jlb>:
}

#else

uint32_t Pack_measurements_5_jlb(measurements_5_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b086      	sub	sp, #24
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	60f8      	str	r0, [r7, #12]
 8001a48:	60b9      	str	r1, [r7, #8]
 8001a4a:	607a      	str	r2, [r7, #4]
 8001a4c:	603b      	str	r3, [r7, #0]
  uint8_t i; for (i = 0u; i < JLB_VALIDATE_DLC(measurements_5_DLC); _d[i++] = JLB_INITIAL_BYTE_VALUE);
 8001a4e:	2300      	movs	r3, #0
 8001a50:	75fb      	strb	r3, [r7, #23]
 8001a52:	e007      	b.n	8001a64 <Pack_measurements_5_jlb+0x24>
 8001a54:	7dfb      	ldrb	r3, [r7, #23]
 8001a56:	1c5a      	adds	r2, r3, #1
 8001a58:	75fa      	strb	r2, [r7, #23]
 8001a5a:	461a      	mov	r2, r3
 8001a5c:	68bb      	ldr	r3, [r7, #8]
 8001a5e:	4413      	add	r3, r2
 8001a60:	2200      	movs	r2, #0
 8001a62:	701a      	strb	r2, [r3, #0]
 8001a64:	7dfb      	ldrb	r3, [r7, #23]
 8001a66:	2b07      	cmp	r3, #7
 8001a68:	d9f4      	bls.n	8001a54 <Pack_measurements_5_jlb+0x14>

#ifdef JLB_USE_SIGFLOAT
  _m->wheel_rpm_ro = (uint16_t) JLB_wheel_rpm_ro_toS(_m->wheel_rpm_phys);
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8001a70:	a35b      	add	r3, pc, #364	; (adr r3, 8001be0 <Pack_measurements_5_jlb+0x1a0>)
 8001a72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a76:	f7fe fbfb 	bl	8000270 <__adddf3>
 8001a7a:	4602      	mov	r2, r0
 8001a7c:	460b      	mov	r3, r1
 8001a7e:	4610      	mov	r0, r2
 8001a80:	4619      	mov	r1, r3
 8001a82:	a359      	add	r3, pc, #356	; (adr r3, 8001be8 <Pack_measurements_5_jlb+0x1a8>)
 8001a84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a88:	f7fe fed2 	bl	8000830 <__aeabi_ddiv>
 8001a8c:	4602      	mov	r2, r0
 8001a8e:	460b      	mov	r3, r1
 8001a90:	4610      	mov	r0, r2
 8001a92:	4619      	mov	r1, r3
 8001a94:	f7ff f87a 	bl	8000b8c <__aeabi_d2uiz>
 8001a98:	4603      	mov	r3, r0
 8001a9a:	b29a      	uxth	r2, r3
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	801a      	strh	r2, [r3, #0]
  _m->object_range_ro = (uint16_t) JLB_object_range_ro_toS(_m->object_range_phys);
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8001aa6:	a352      	add	r3, pc, #328	; (adr r3, 8001bf0 <Pack_measurements_5_jlb+0x1b0>)
 8001aa8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001aac:	f7fe fec0 	bl	8000830 <__aeabi_ddiv>
 8001ab0:	4602      	mov	r2, r0
 8001ab2:	460b      	mov	r3, r1
 8001ab4:	4610      	mov	r0, r2
 8001ab6:	4619      	mov	r1, r3
 8001ab8:	f7ff f868 	bl	8000b8c <__aeabi_d2uiz>
 8001abc:	4603      	mov	r3, r0
 8001abe:	b29a      	uxth	r2, r3
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	821a      	strh	r2, [r3, #16]
  _m->motor_current_ro = (uint16_t) JLB_motor_current_ro_toS(_m->motor_current_phys);
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 8001aca:	a34b      	add	r3, pc, #300	; (adr r3, 8001bf8 <Pack_measurements_5_jlb+0x1b8>)
 8001acc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ad0:	f7fe feae 	bl	8000830 <__aeabi_ddiv>
 8001ad4:	4602      	mov	r2, r0
 8001ad6:	460b      	mov	r3, r1
 8001ad8:	4610      	mov	r0, r2
 8001ada:	4619      	mov	r1, r3
 8001adc:	f7ff f856 	bl	8000b8c <__aeabi_d2uiz>
 8001ae0:	4603      	mov	r3, r0
 8001ae2:	b29a      	uxth	r2, r3
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	841a      	strh	r2, [r3, #32]
  _m->duty_cycle_ro = (uint16_t) JLB_duty_cycle_ro_toS(_m->duty_cycle_phys);
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8001aee:	a344      	add	r3, pc, #272	; (adr r3, 8001c00 <Pack_measurements_5_jlb+0x1c0>)
 8001af0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001af4:	f7fe fe9c 	bl	8000830 <__aeabi_ddiv>
 8001af8:	4602      	mov	r2, r0
 8001afa:	460b      	mov	r3, r1
 8001afc:	4610      	mov	r0, r2
 8001afe:	4619      	mov	r1, r3
 8001b00:	f7ff f844 	bl	8000b8c <__aeabi_d2uiz>
 8001b04:	4603      	mov	r3, r0
 8001b06:	b29a      	uxth	r2, r3
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	861a      	strh	r2, [r3, #48]	; 0x30
#endif // JLB_USE_SIGFLOAT

  _d[0] |= (uint8_t) ( (_m->wheel_rpm_ro & (0xFFU)) );
 8001b0c:	68bb      	ldr	r3, [r7, #8]
 8001b0e:	781a      	ldrb	r2, [r3, #0]
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	881b      	ldrh	r3, [r3, #0]
 8001b14:	b2db      	uxtb	r3, r3
 8001b16:	4313      	orrs	r3, r2
 8001b18:	b2da      	uxtb	r2, r3
 8001b1a:	68bb      	ldr	r3, [r7, #8]
 8001b1c:	701a      	strb	r2, [r3, #0]
  _d[1] |= (uint8_t) ( ((_m->wheel_rpm_ro >> 8U) & (0xFFU)) );
 8001b1e:	68bb      	ldr	r3, [r7, #8]
 8001b20:	3301      	adds	r3, #1
 8001b22:	7819      	ldrb	r1, [r3, #0]
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	881b      	ldrh	r3, [r3, #0]
 8001b28:	0a1b      	lsrs	r3, r3, #8
 8001b2a:	b29b      	uxth	r3, r3
 8001b2c:	b2da      	uxtb	r2, r3
 8001b2e:	68bb      	ldr	r3, [r7, #8]
 8001b30:	3301      	adds	r3, #1
 8001b32:	430a      	orrs	r2, r1
 8001b34:	b2d2      	uxtb	r2, r2
 8001b36:	701a      	strb	r2, [r3, #0]
  _d[2] |= (uint8_t) ( (_m->object_range_ro & (0xFFU)) );
 8001b38:	68bb      	ldr	r3, [r7, #8]
 8001b3a:	3302      	adds	r3, #2
 8001b3c:	7819      	ldrb	r1, [r3, #0]
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	8a1b      	ldrh	r3, [r3, #16]
 8001b42:	b2da      	uxtb	r2, r3
 8001b44:	68bb      	ldr	r3, [r7, #8]
 8001b46:	3302      	adds	r3, #2
 8001b48:	430a      	orrs	r2, r1
 8001b4a:	b2d2      	uxtb	r2, r2
 8001b4c:	701a      	strb	r2, [r3, #0]
  _d[3] |= (uint8_t) ( ((_m->object_range_ro >> 8U) & (0xFFU)) );
 8001b4e:	68bb      	ldr	r3, [r7, #8]
 8001b50:	3303      	adds	r3, #3
 8001b52:	7819      	ldrb	r1, [r3, #0]
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	8a1b      	ldrh	r3, [r3, #16]
 8001b58:	0a1b      	lsrs	r3, r3, #8
 8001b5a:	b29b      	uxth	r3, r3
 8001b5c:	b2da      	uxtb	r2, r3
 8001b5e:	68bb      	ldr	r3, [r7, #8]
 8001b60:	3303      	adds	r3, #3
 8001b62:	430a      	orrs	r2, r1
 8001b64:	b2d2      	uxtb	r2, r2
 8001b66:	701a      	strb	r2, [r3, #0]
  _d[4] |= (uint8_t) ( (_m->motor_current_ro & (0xFFU)) );
 8001b68:	68bb      	ldr	r3, [r7, #8]
 8001b6a:	3304      	adds	r3, #4
 8001b6c:	7819      	ldrb	r1, [r3, #0]
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	8c1b      	ldrh	r3, [r3, #32]
 8001b72:	b2da      	uxtb	r2, r3
 8001b74:	68bb      	ldr	r3, [r7, #8]
 8001b76:	3304      	adds	r3, #4
 8001b78:	430a      	orrs	r2, r1
 8001b7a:	b2d2      	uxtb	r2, r2
 8001b7c:	701a      	strb	r2, [r3, #0]
  _d[5] |= (uint8_t) ( ((_m->motor_current_ro >> 8U) & (0xFFU)) );
 8001b7e:	68bb      	ldr	r3, [r7, #8]
 8001b80:	3305      	adds	r3, #5
 8001b82:	7819      	ldrb	r1, [r3, #0]
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	8c1b      	ldrh	r3, [r3, #32]
 8001b88:	0a1b      	lsrs	r3, r3, #8
 8001b8a:	b29b      	uxth	r3, r3
 8001b8c:	b2da      	uxtb	r2, r3
 8001b8e:	68bb      	ldr	r3, [r7, #8]
 8001b90:	3305      	adds	r3, #5
 8001b92:	430a      	orrs	r2, r1
 8001b94:	b2d2      	uxtb	r2, r2
 8001b96:	701a      	strb	r2, [r3, #0]
  _d[6] |= (uint8_t) ( (_m->duty_cycle_ro & (0xFFU)) );
 8001b98:	68bb      	ldr	r3, [r7, #8]
 8001b9a:	3306      	adds	r3, #6
 8001b9c:	7819      	ldrb	r1, [r3, #0]
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8001ba2:	b2da      	uxtb	r2, r3
 8001ba4:	68bb      	ldr	r3, [r7, #8]
 8001ba6:	3306      	adds	r3, #6
 8001ba8:	430a      	orrs	r2, r1
 8001baa:	b2d2      	uxtb	r2, r2
 8001bac:	701a      	strb	r2, [r3, #0]
  _d[7] |= (uint8_t) ( ((_m->duty_cycle_ro >> 8U) & (0xFFU)) );
 8001bae:	68bb      	ldr	r3, [r7, #8]
 8001bb0:	3307      	adds	r3, #7
 8001bb2:	7819      	ldrb	r1, [r3, #0]
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8001bb8:	0a1b      	lsrs	r3, r3, #8
 8001bba:	b29b      	uxth	r3, r3
 8001bbc:	b2da      	uxtb	r2, r3
 8001bbe:	68bb      	ldr	r3, [r7, #8]
 8001bc0:	3307      	adds	r3, #7
 8001bc2:	430a      	orrs	r2, r1
 8001bc4:	b2d2      	uxtb	r2, r2
 8001bc6:	701a      	strb	r2, [r3, #0]

  *_len = (uint8_t) measurements_5_DLC;
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	2208      	movs	r2, #8
 8001bcc:	701a      	strb	r2, [r3, #0]
  *_ide = (uint8_t) measurements_5_IDE;
 8001bce:	683b      	ldr	r3, [r7, #0]
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	701a      	strb	r2, [r3, #0]
  return measurements_5_CANID;
 8001bd4:	2305      	movs	r3, #5
}
 8001bd6:	4618      	mov	r0, r3
 8001bd8:	3718      	adds	r7, #24
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	bd80      	pop	{r7, pc}
 8001bde:	bf00      	nop
 8001be0:	00000000 	.word	0x00000000
 8001be4:	40a99980 	.word	0x40a99980
 8001be8:	9999999a 	.word	0x9999999a
 8001bec:	3fb99999 	.word	0x3fb99999
 8001bf0:	eb1c432d 	.word	0xeb1c432d
 8001bf4:	3f1a36e2 	.word	0x3f1a36e2
 8001bf8:	d2f1a9fc 	.word	0xd2f1a9fc
 8001bfc:	3f50624d 	.word	0x3f50624d
 8001c00:	d7c6fbd2 	.word	0xd7c6fbd2
 8001c04:	3ef2599e 	.word	0x3ef2599e

08001c08 <Pack_odometry_1_jlb>:
}

#else

uint32_t Pack_odometry_1_jlb(odometry_1_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide)
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	b086      	sub	sp, #24
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	60f8      	str	r0, [r7, #12]
 8001c10:	60b9      	str	r1, [r7, #8]
 8001c12:	607a      	str	r2, [r7, #4]
 8001c14:	603b      	str	r3, [r7, #0]
  uint8_t i; for (i = 0u; i < JLB_VALIDATE_DLC(odometry_1_DLC); _d[i++] = JLB_INITIAL_BYTE_VALUE);
 8001c16:	2300      	movs	r3, #0
 8001c18:	75fb      	strb	r3, [r7, #23]
 8001c1a:	e007      	b.n	8001c2c <Pack_odometry_1_jlb+0x24>
 8001c1c:	7dfb      	ldrb	r3, [r7, #23]
 8001c1e:	1c5a      	adds	r2, r3, #1
 8001c20:	75fa      	strb	r2, [r7, #23]
 8001c22:	461a      	mov	r2, r3
 8001c24:	68bb      	ldr	r3, [r7, #8]
 8001c26:	4413      	add	r3, r2
 8001c28:	2200      	movs	r2, #0
 8001c2a:	701a      	strb	r2, [r3, #0]
 8001c2c:	7dfb      	ldrb	r3, [r7, #23]
 8001c2e:	2b07      	cmp	r3, #7
 8001c30:	d9f4      	bls.n	8001c1c <Pack_odometry_1_jlb+0x14>

#ifdef JLB_USE_SIGFLOAT
  _m->orientation_ro = (uint16_t) JLB_orientation_ro_toS(_m->orientation_phys);
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8001c38:	a34f      	add	r3, pc, #316	; (adr r3, 8001d78 <Pack_odometry_1_jlb+0x170>)
 8001c3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c3e:	f7fe fb17 	bl	8000270 <__adddf3>
 8001c42:	4602      	mov	r2, r0
 8001c44:	460b      	mov	r3, r1
 8001c46:	4610      	mov	r0, r2
 8001c48:	4619      	mov	r1, r3
 8001c4a:	a34d      	add	r3, pc, #308	; (adr r3, 8001d80 <Pack_odometry_1_jlb+0x178>)
 8001c4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c50:	f7fe fdee 	bl	8000830 <__aeabi_ddiv>
 8001c54:	4602      	mov	r2, r0
 8001c56:	460b      	mov	r3, r1
 8001c58:	4610      	mov	r0, r2
 8001c5a:	4619      	mov	r1, r3
 8001c5c:	f7fe ff96 	bl	8000b8c <__aeabi_d2uiz>
 8001c60:	4603      	mov	r3, r0
 8001c62:	b29a      	uxth	r2, r3
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	801a      	strh	r2, [r3, #0]
  _m->position_x_ro = (uint16_t) JLB_position_x_ro_toS(_m->position_x_phys);
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8001c6e:	a346      	add	r3, pc, #280	; (adr r3, 8001d88 <Pack_odometry_1_jlb+0x180>)
 8001c70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c74:	f7fe fafc 	bl	8000270 <__adddf3>
 8001c78:	4602      	mov	r2, r0
 8001c7a:	460b      	mov	r3, r1
 8001c7c:	4610      	mov	r0, r2
 8001c7e:	4619      	mov	r1, r3
 8001c80:	a343      	add	r3, pc, #268	; (adr r3, 8001d90 <Pack_odometry_1_jlb+0x188>)
 8001c82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c86:	f7fe fdd3 	bl	8000830 <__aeabi_ddiv>
 8001c8a:	4602      	mov	r2, r0
 8001c8c:	460b      	mov	r3, r1
 8001c8e:	4610      	mov	r0, r2
 8001c90:	4619      	mov	r1, r3
 8001c92:	f7fe ff7b 	bl	8000b8c <__aeabi_d2uiz>
 8001c96:	4603      	mov	r3, r0
 8001c98:	b29a      	uxth	r2, r3
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	821a      	strh	r2, [r3, #16]
  _m->position_y_ro = (uint16_t) JLB_position_y_ro_toS(_m->position_y_phys);
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 8001ca4:	a338      	add	r3, pc, #224	; (adr r3, 8001d88 <Pack_odometry_1_jlb+0x180>)
 8001ca6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001caa:	f7fe fae1 	bl	8000270 <__adddf3>
 8001cae:	4602      	mov	r2, r0
 8001cb0:	460b      	mov	r3, r1
 8001cb2:	4610      	mov	r0, r2
 8001cb4:	4619      	mov	r1, r3
 8001cb6:	a336      	add	r3, pc, #216	; (adr r3, 8001d90 <Pack_odometry_1_jlb+0x188>)
 8001cb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cbc:	f7fe fdb8 	bl	8000830 <__aeabi_ddiv>
 8001cc0:	4602      	mov	r2, r0
 8001cc2:	460b      	mov	r3, r1
 8001cc4:	4610      	mov	r0, r2
 8001cc6:	4619      	mov	r1, r3
 8001cc8:	f7fe ff60 	bl	8000b8c <__aeabi_d2uiz>
 8001ccc:	4603      	mov	r3, r0
 8001cce:	b29a      	uxth	r2, r3
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	841a      	strh	r2, [r3, #32]
#endif // JLB_USE_SIGFLOAT

  _d[0] |= (uint8_t) ( (_m->orientation_ro & (0xFFU)) );
 8001cd4:	68bb      	ldr	r3, [r7, #8]
 8001cd6:	781a      	ldrb	r2, [r3, #0]
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	881b      	ldrh	r3, [r3, #0]
 8001cdc:	b2db      	uxtb	r3, r3
 8001cde:	4313      	orrs	r3, r2
 8001ce0:	b2da      	uxtb	r2, r3
 8001ce2:	68bb      	ldr	r3, [r7, #8]
 8001ce4:	701a      	strb	r2, [r3, #0]
  _d[1] |= (uint8_t) ( ((_m->orientation_ro >> 8U) & (0xFFU)) );
 8001ce6:	68bb      	ldr	r3, [r7, #8]
 8001ce8:	3301      	adds	r3, #1
 8001cea:	7819      	ldrb	r1, [r3, #0]
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	881b      	ldrh	r3, [r3, #0]
 8001cf0:	0a1b      	lsrs	r3, r3, #8
 8001cf2:	b29b      	uxth	r3, r3
 8001cf4:	b2da      	uxtb	r2, r3
 8001cf6:	68bb      	ldr	r3, [r7, #8]
 8001cf8:	3301      	adds	r3, #1
 8001cfa:	430a      	orrs	r2, r1
 8001cfc:	b2d2      	uxtb	r2, r2
 8001cfe:	701a      	strb	r2, [r3, #0]
  _d[2] |= (uint8_t) ( (_m->position_x_ro & (0xFFU)) );
 8001d00:	68bb      	ldr	r3, [r7, #8]
 8001d02:	3302      	adds	r3, #2
 8001d04:	7819      	ldrb	r1, [r3, #0]
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	8a1b      	ldrh	r3, [r3, #16]
 8001d0a:	b2da      	uxtb	r2, r3
 8001d0c:	68bb      	ldr	r3, [r7, #8]
 8001d0e:	3302      	adds	r3, #2
 8001d10:	430a      	orrs	r2, r1
 8001d12:	b2d2      	uxtb	r2, r2
 8001d14:	701a      	strb	r2, [r3, #0]
  _d[3] |= (uint8_t) ( ((_m->position_x_ro >> 8U) & (0xFFU)) );
 8001d16:	68bb      	ldr	r3, [r7, #8]
 8001d18:	3303      	adds	r3, #3
 8001d1a:	7819      	ldrb	r1, [r3, #0]
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	8a1b      	ldrh	r3, [r3, #16]
 8001d20:	0a1b      	lsrs	r3, r3, #8
 8001d22:	b29b      	uxth	r3, r3
 8001d24:	b2da      	uxtb	r2, r3
 8001d26:	68bb      	ldr	r3, [r7, #8]
 8001d28:	3303      	adds	r3, #3
 8001d2a:	430a      	orrs	r2, r1
 8001d2c:	b2d2      	uxtb	r2, r2
 8001d2e:	701a      	strb	r2, [r3, #0]
  _d[4] |= (uint8_t) ( (_m->position_y_ro & (0xFFU)) );
 8001d30:	68bb      	ldr	r3, [r7, #8]
 8001d32:	3304      	adds	r3, #4
 8001d34:	7819      	ldrb	r1, [r3, #0]
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	8c1b      	ldrh	r3, [r3, #32]
 8001d3a:	b2da      	uxtb	r2, r3
 8001d3c:	68bb      	ldr	r3, [r7, #8]
 8001d3e:	3304      	adds	r3, #4
 8001d40:	430a      	orrs	r2, r1
 8001d42:	b2d2      	uxtb	r2, r2
 8001d44:	701a      	strb	r2, [r3, #0]
  _d[5] |= (uint8_t) ( ((_m->position_y_ro >> 8U) & (0xFFU)) );
 8001d46:	68bb      	ldr	r3, [r7, #8]
 8001d48:	3305      	adds	r3, #5
 8001d4a:	7819      	ldrb	r1, [r3, #0]
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	8c1b      	ldrh	r3, [r3, #32]
 8001d50:	0a1b      	lsrs	r3, r3, #8
 8001d52:	b29b      	uxth	r3, r3
 8001d54:	b2da      	uxtb	r2, r3
 8001d56:	68bb      	ldr	r3, [r7, #8]
 8001d58:	3305      	adds	r3, #5
 8001d5a:	430a      	orrs	r2, r1
 8001d5c:	b2d2      	uxtb	r2, r2
 8001d5e:	701a      	strb	r2, [r3, #0]

  *_len = (uint8_t) odometry_1_DLC;
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	2208      	movs	r2, #8
 8001d64:	701a      	strb	r2, [r3, #0]
  *_ide = (uint8_t) odometry_1_IDE;
 8001d66:	683b      	ldr	r3, [r7, #0]
 8001d68:	2200      	movs	r2, #0
 8001d6a:	701a      	strb	r2, [r3, #0]
  return odometry_1_CANID;
 8001d6c:	2311      	movs	r3, #17
}
 8001d6e:	4618      	mov	r0, r3
 8001d70:	3718      	adds	r7, #24
 8001d72:	46bd      	mov	sp, r7
 8001d74:	bd80      	pop	{r7, pc}
 8001d76:	bf00      	nop
 8001d78:	b4395810 	.word	0xb4395810
 8001d7c:	401a36c8 	.word	0x401a36c8
 8001d80:	eb1c432d 	.word	0xeb1c432d
 8001d84:	3f2a36e2 	.word	0x3f2a36e2
 8001d88:	70a3d70a 	.word	0x70a3d70a
 8001d8c:	4030623d 	.word	0x4030623d
 8001d90:	d2f1a9fc 	.word	0xd2f1a9fc
 8001d94:	3f40624d 	.word	0x3f40624d

08001d98 <Pack_odometry_2_jlb>:
}

#else

uint32_t Pack_odometry_2_jlb(odometry_2_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide)
{
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	b086      	sub	sp, #24
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	60f8      	str	r0, [r7, #12]
 8001da0:	60b9      	str	r1, [r7, #8]
 8001da2:	607a      	str	r2, [r7, #4]
 8001da4:	603b      	str	r3, [r7, #0]
  uint8_t i; for (i = 0u; i < JLB_VALIDATE_DLC(odometry_2_DLC); _d[i++] = JLB_INITIAL_BYTE_VALUE);
 8001da6:	2300      	movs	r3, #0
 8001da8:	75fb      	strb	r3, [r7, #23]
 8001daa:	e007      	b.n	8001dbc <Pack_odometry_2_jlb+0x24>
 8001dac:	7dfb      	ldrb	r3, [r7, #23]
 8001dae:	1c5a      	adds	r2, r3, #1
 8001db0:	75fa      	strb	r2, [r7, #23]
 8001db2:	461a      	mov	r2, r3
 8001db4:	68bb      	ldr	r3, [r7, #8]
 8001db6:	4413      	add	r3, r2
 8001db8:	2200      	movs	r2, #0
 8001dba:	701a      	strb	r2, [r3, #0]
 8001dbc:	7dfb      	ldrb	r3, [r7, #23]
 8001dbe:	2b07      	cmp	r3, #7
 8001dc0:	d9f4      	bls.n	8001dac <Pack_odometry_2_jlb+0x14>

#ifdef JLB_USE_SIGFLOAT
  _m->angular_velocity_z_ro = (uint16_t) JLB_angular_velocity_z_ro_toS(_m->angular_velocity_z_phys);
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8001dc8:	a335      	add	r3, pc, #212	; (adr r3, 8001ea0 <Pack_odometry_2_jlb+0x108>)
 8001dca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001dce:	f7fe fa4f 	bl	8000270 <__adddf3>
 8001dd2:	4602      	mov	r2, r0
 8001dd4:	460b      	mov	r3, r1
 8001dd6:	4610      	mov	r0, r2
 8001dd8:	4619      	mov	r1, r3
 8001dda:	a333      	add	r3, pc, #204	; (adr r3, 8001ea8 <Pack_odometry_2_jlb+0x110>)
 8001ddc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001de0:	f7fe fd26 	bl	8000830 <__aeabi_ddiv>
 8001de4:	4602      	mov	r2, r0
 8001de6:	460b      	mov	r3, r1
 8001de8:	4610      	mov	r0, r2
 8001dea:	4619      	mov	r1, r3
 8001dec:	f7fe fece 	bl	8000b8c <__aeabi_d2uiz>
 8001df0:	4603      	mov	r3, r0
 8001df2:	b29a      	uxth	r2, r3
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	801a      	strh	r2, [r3, #0]
  _m->linear_velocity_x_ro = (uint16_t) JLB_linear_velocity_x_ro_toS(_m->linear_velocity_x_phys);
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8001dfe:	a32c      	add	r3, pc, #176	; (adr r3, 8001eb0 <Pack_odometry_2_jlb+0x118>)
 8001e00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e04:	f7fe fa34 	bl	8000270 <__adddf3>
 8001e08:	4602      	mov	r2, r0
 8001e0a:	460b      	mov	r3, r1
 8001e0c:	4610      	mov	r0, r2
 8001e0e:	4619      	mov	r1, r3
 8001e10:	a329      	add	r3, pc, #164	; (adr r3, 8001eb8 <Pack_odometry_2_jlb+0x120>)
 8001e12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e16:	f7fe fd0b 	bl	8000830 <__aeabi_ddiv>
 8001e1a:	4602      	mov	r2, r0
 8001e1c:	460b      	mov	r3, r1
 8001e1e:	4610      	mov	r0, r2
 8001e20:	4619      	mov	r1, r3
 8001e22:	f7fe feb3 	bl	8000b8c <__aeabi_d2uiz>
 8001e26:	4603      	mov	r3, r0
 8001e28:	b29a      	uxth	r2, r3
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	821a      	strh	r2, [r3, #16]
#endif // JLB_USE_SIGFLOAT

  _d[0] |= (uint8_t) ( (_m->angular_velocity_z_ro & (0xFFU)) );
 8001e2e:	68bb      	ldr	r3, [r7, #8]
 8001e30:	781a      	ldrb	r2, [r3, #0]
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	881b      	ldrh	r3, [r3, #0]
 8001e36:	b2db      	uxtb	r3, r3
 8001e38:	4313      	orrs	r3, r2
 8001e3a:	b2da      	uxtb	r2, r3
 8001e3c:	68bb      	ldr	r3, [r7, #8]
 8001e3e:	701a      	strb	r2, [r3, #0]
  _d[1] |= (uint8_t) ( ((_m->angular_velocity_z_ro >> 8U) & (0xFFU)) );
 8001e40:	68bb      	ldr	r3, [r7, #8]
 8001e42:	3301      	adds	r3, #1
 8001e44:	7819      	ldrb	r1, [r3, #0]
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	881b      	ldrh	r3, [r3, #0]
 8001e4a:	0a1b      	lsrs	r3, r3, #8
 8001e4c:	b29b      	uxth	r3, r3
 8001e4e:	b2da      	uxtb	r2, r3
 8001e50:	68bb      	ldr	r3, [r7, #8]
 8001e52:	3301      	adds	r3, #1
 8001e54:	430a      	orrs	r2, r1
 8001e56:	b2d2      	uxtb	r2, r2
 8001e58:	701a      	strb	r2, [r3, #0]
  _d[2] |= (uint8_t) ( (_m->linear_velocity_x_ro & (0xFFU)) );
 8001e5a:	68bb      	ldr	r3, [r7, #8]
 8001e5c:	3302      	adds	r3, #2
 8001e5e:	7819      	ldrb	r1, [r3, #0]
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	8a1b      	ldrh	r3, [r3, #16]
 8001e64:	b2da      	uxtb	r2, r3
 8001e66:	68bb      	ldr	r3, [r7, #8]
 8001e68:	3302      	adds	r3, #2
 8001e6a:	430a      	orrs	r2, r1
 8001e6c:	b2d2      	uxtb	r2, r2
 8001e6e:	701a      	strb	r2, [r3, #0]
  _d[3] |= (uint8_t) ( ((_m->linear_velocity_x_ro >> 8U) & (0xFFU)) );
 8001e70:	68bb      	ldr	r3, [r7, #8]
 8001e72:	3303      	adds	r3, #3
 8001e74:	7819      	ldrb	r1, [r3, #0]
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	8a1b      	ldrh	r3, [r3, #16]
 8001e7a:	0a1b      	lsrs	r3, r3, #8
 8001e7c:	b29b      	uxth	r3, r3
 8001e7e:	b2da      	uxtb	r2, r3
 8001e80:	68bb      	ldr	r3, [r7, #8]
 8001e82:	3303      	adds	r3, #3
 8001e84:	430a      	orrs	r2, r1
 8001e86:	b2d2      	uxtb	r2, r2
 8001e88:	701a      	strb	r2, [r3, #0]

  *_len = (uint8_t) odometry_2_DLC;
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	2208      	movs	r2, #8
 8001e8e:	701a      	strb	r2, [r3, #0]
  *_ide = (uint8_t) odometry_2_IDE;
 8001e90:	683b      	ldr	r3, [r7, #0]
 8001e92:	2200      	movs	r2, #0
 8001e94:	701a      	strb	r2, [r3, #0]
  return odometry_2_CANID;
 8001e96:	2312      	movs	r3, #18
}
 8001e98:	4618      	mov	r0, r3
 8001e9a:	3718      	adds	r7, #24
 8001e9c:	46bd      	mov	sp, r7
 8001e9e:	bd80      	pop	{r7, pc}
 8001ea0:	b4395810 	.word	0xb4395810
 8001ea4:	401a36c8 	.word	0x401a36c8
 8001ea8:	eb1c432d 	.word	0xeb1c432d
 8001eac:	3f2a36e2 	.word	0x3f2a36e2
 8001eb0:	70a3d70a 	.word	0x70a3d70a
 8001eb4:	4030623d 	.word	0x4030623d
 8001eb8:	d2f1a9fc 	.word	0xd2f1a9fc
 8001ebc:	3f40624d 	.word	0x3f40624d

08001ec0 <Pack_logic_1_jlb>:
}

#else

uint32_t Pack_logic_1_jlb(logic_1_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide)
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	b086      	sub	sp, #24
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	60f8      	str	r0, [r7, #12]
 8001ec8:	60b9      	str	r1, [r7, #8]
 8001eca:	607a      	str	r2, [r7, #4]
 8001ecc:	603b      	str	r3, [r7, #0]
  uint8_t i; for (i = 0u; i < JLB_VALIDATE_DLC(logic_1_DLC); _d[i++] = JLB_INITIAL_BYTE_VALUE);
 8001ece:	2300      	movs	r3, #0
 8001ed0:	75fb      	strb	r3, [r7, #23]
 8001ed2:	e007      	b.n	8001ee4 <Pack_logic_1_jlb+0x24>
 8001ed4:	7dfb      	ldrb	r3, [r7, #23]
 8001ed6:	1c5a      	adds	r2, r3, #1
 8001ed8:	75fa      	strb	r2, [r7, #23]
 8001eda:	461a      	mov	r2, r3
 8001edc:	68bb      	ldr	r3, [r7, #8]
 8001ede:	4413      	add	r3, r2
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	701a      	strb	r2, [r3, #0]
 8001ee4:	7dfb      	ldrb	r3, [r7, #23]
 8001ee6:	2b07      	cmp	r3, #7
 8001ee8:	d9f4      	bls.n	8001ed4 <Pack_logic_1_jlb+0x14>

#ifdef JLB_USE_SIGFLOAT
  _m->target_angle_ro = (uint16_t) JLB_target_angle_ro_toS(_m->target_angle_phys);
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8001ef0:	a369      	add	r3, pc, #420	; (adr r3, 8002098 <Pack_logic_1_jlb+0x1d8>)
 8001ef2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ef6:	f7fe f9bb 	bl	8000270 <__adddf3>
 8001efa:	4602      	mov	r2, r0
 8001efc:	460b      	mov	r3, r1
 8001efe:	4610      	mov	r0, r2
 8001f00:	4619      	mov	r1, r3
 8001f02:	a367      	add	r3, pc, #412	; (adr r3, 80020a0 <Pack_logic_1_jlb+0x1e0>)
 8001f04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f08:	f7fe fc92 	bl	8000830 <__aeabi_ddiv>
 8001f0c:	4602      	mov	r2, r0
 8001f0e:	460b      	mov	r3, r1
 8001f10:	4610      	mov	r0, r2
 8001f12:	4619      	mov	r1, r3
 8001f14:	f7fe fe3a 	bl	8000b8c <__aeabi_d2uiz>
 8001f18:	4603      	mov	r3, r0
 8001f1a:	b29a      	uxth	r2, r3
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	801a      	strh	r2, [r3, #0]
  _m->target_speed_ro = (uint16_t) JLB_target_speed_ro_toS(_m->target_speed_phys);
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8001f26:	a360      	add	r3, pc, #384	; (adr r3, 80020a8 <Pack_logic_1_jlb+0x1e8>)
 8001f28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f2c:	f7fe f9a0 	bl	8000270 <__adddf3>
 8001f30:	4602      	mov	r2, r0
 8001f32:	460b      	mov	r3, r1
 8001f34:	4610      	mov	r0, r2
 8001f36:	4619      	mov	r1, r3
 8001f38:	a35d      	add	r3, pc, #372	; (adr r3, 80020b0 <Pack_logic_1_jlb+0x1f0>)
 8001f3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f3e:	f7fe fc77 	bl	8000830 <__aeabi_ddiv>
 8001f42:	4602      	mov	r2, r0
 8001f44:	460b      	mov	r3, r1
 8001f46:	4610      	mov	r0, r2
 8001f48:	4619      	mov	r1, r3
 8001f4a:	f7fe fe1f 	bl	8000b8c <__aeabi_d2uiz>
 8001f4e:	4603      	mov	r3, r0
 8001f50:	b29a      	uxth	r2, r3
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	821a      	strh	r2, [r3, #16]
  _m->cross_track_error_ro = (uint16_t) JLB_cross_track_error_ro_toS(_m->cross_track_error_phys);
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 8001f5c:	a34e      	add	r3, pc, #312	; (adr r3, 8002098 <Pack_logic_1_jlb+0x1d8>)
 8001f5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f62:	f7fe f985 	bl	8000270 <__adddf3>
 8001f66:	4602      	mov	r2, r0
 8001f68:	460b      	mov	r3, r1
 8001f6a:	4610      	mov	r0, r2
 8001f6c:	4619      	mov	r1, r3
 8001f6e:	a34c      	add	r3, pc, #304	; (adr r3, 80020a0 <Pack_logic_1_jlb+0x1e0>)
 8001f70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f74:	f7fe fc5c 	bl	8000830 <__aeabi_ddiv>
 8001f78:	4602      	mov	r2, r0
 8001f7a:	460b      	mov	r3, r1
 8001f7c:	4610      	mov	r0, r2
 8001f7e:	4619      	mov	r1, r3
 8001f80:	f7fe fe04 	bl	8000b8c <__aeabi_d2uiz>
 8001f84:	4603      	mov	r3, r0
 8001f86:	b29a      	uxth	r2, r3
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	841a      	strh	r2, [r3, #32]
  _m->heading_error_ro = (uint16_t) JLB_heading_error_ro_toS(_m->heading_error_phys);
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8001f92:	a349      	add	r3, pc, #292	; (adr r3, 80020b8 <Pack_logic_1_jlb+0x1f8>)
 8001f94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f98:	f7fe f96a 	bl	8000270 <__adddf3>
 8001f9c:	4602      	mov	r2, r0
 8001f9e:	460b      	mov	r3, r1
 8001fa0:	4610      	mov	r0, r2
 8001fa2:	4619      	mov	r1, r3
 8001fa4:	a346      	add	r3, pc, #280	; (adr r3, 80020c0 <Pack_logic_1_jlb+0x200>)
 8001fa6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001faa:	f7fe fc41 	bl	8000830 <__aeabi_ddiv>
 8001fae:	4602      	mov	r2, r0
 8001fb0:	460b      	mov	r3, r1
 8001fb2:	4610      	mov	r0, r2
 8001fb4:	4619      	mov	r1, r3
 8001fb6:	f7fe fde9 	bl	8000b8c <__aeabi_d2uiz>
 8001fba:	4603      	mov	r3, r0
 8001fbc:	b29a      	uxth	r2, r3
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	861a      	strh	r2, [r3, #48]	; 0x30
#endif // JLB_USE_SIGFLOAT

  _d[0] |= (uint8_t) ( (_m->target_angle_ro & (0xFFU)) );
 8001fc2:	68bb      	ldr	r3, [r7, #8]
 8001fc4:	781a      	ldrb	r2, [r3, #0]
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	881b      	ldrh	r3, [r3, #0]
 8001fca:	b2db      	uxtb	r3, r3
 8001fcc:	4313      	orrs	r3, r2
 8001fce:	b2da      	uxtb	r2, r3
 8001fd0:	68bb      	ldr	r3, [r7, #8]
 8001fd2:	701a      	strb	r2, [r3, #0]
  _d[1] |= (uint8_t) ( ((_m->target_angle_ro >> 8U) & (0xFFU)) );
 8001fd4:	68bb      	ldr	r3, [r7, #8]
 8001fd6:	3301      	adds	r3, #1
 8001fd8:	7819      	ldrb	r1, [r3, #0]
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	881b      	ldrh	r3, [r3, #0]
 8001fde:	0a1b      	lsrs	r3, r3, #8
 8001fe0:	b29b      	uxth	r3, r3
 8001fe2:	b2da      	uxtb	r2, r3
 8001fe4:	68bb      	ldr	r3, [r7, #8]
 8001fe6:	3301      	adds	r3, #1
 8001fe8:	430a      	orrs	r2, r1
 8001fea:	b2d2      	uxtb	r2, r2
 8001fec:	701a      	strb	r2, [r3, #0]
  _d[2] |= (uint8_t) ( (_m->target_speed_ro & (0xFFU)) );
 8001fee:	68bb      	ldr	r3, [r7, #8]
 8001ff0:	3302      	adds	r3, #2
 8001ff2:	7819      	ldrb	r1, [r3, #0]
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	8a1b      	ldrh	r3, [r3, #16]
 8001ff8:	b2da      	uxtb	r2, r3
 8001ffa:	68bb      	ldr	r3, [r7, #8]
 8001ffc:	3302      	adds	r3, #2
 8001ffe:	430a      	orrs	r2, r1
 8002000:	b2d2      	uxtb	r2, r2
 8002002:	701a      	strb	r2, [r3, #0]
  _d[3] |= (uint8_t) ( ((_m->target_speed_ro >> 8U) & (0xFFU)) );
 8002004:	68bb      	ldr	r3, [r7, #8]
 8002006:	3303      	adds	r3, #3
 8002008:	7819      	ldrb	r1, [r3, #0]
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	8a1b      	ldrh	r3, [r3, #16]
 800200e:	0a1b      	lsrs	r3, r3, #8
 8002010:	b29b      	uxth	r3, r3
 8002012:	b2da      	uxtb	r2, r3
 8002014:	68bb      	ldr	r3, [r7, #8]
 8002016:	3303      	adds	r3, #3
 8002018:	430a      	orrs	r2, r1
 800201a:	b2d2      	uxtb	r2, r2
 800201c:	701a      	strb	r2, [r3, #0]
  _d[4] |= (uint8_t) ( (_m->cross_track_error_ro & (0xFFU)) );
 800201e:	68bb      	ldr	r3, [r7, #8]
 8002020:	3304      	adds	r3, #4
 8002022:	7819      	ldrb	r1, [r3, #0]
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	8c1b      	ldrh	r3, [r3, #32]
 8002028:	b2da      	uxtb	r2, r3
 800202a:	68bb      	ldr	r3, [r7, #8]
 800202c:	3304      	adds	r3, #4
 800202e:	430a      	orrs	r2, r1
 8002030:	b2d2      	uxtb	r2, r2
 8002032:	701a      	strb	r2, [r3, #0]
  _d[5] |= (uint8_t) ( ((_m->cross_track_error_ro >> 8U) & (0xFFU)) );
 8002034:	68bb      	ldr	r3, [r7, #8]
 8002036:	3305      	adds	r3, #5
 8002038:	7819      	ldrb	r1, [r3, #0]
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	8c1b      	ldrh	r3, [r3, #32]
 800203e:	0a1b      	lsrs	r3, r3, #8
 8002040:	b29b      	uxth	r3, r3
 8002042:	b2da      	uxtb	r2, r3
 8002044:	68bb      	ldr	r3, [r7, #8]
 8002046:	3305      	adds	r3, #5
 8002048:	430a      	orrs	r2, r1
 800204a:	b2d2      	uxtb	r2, r2
 800204c:	701a      	strb	r2, [r3, #0]
  _d[6] |= (uint8_t) ( (_m->heading_error_ro & (0xFFU)) );
 800204e:	68bb      	ldr	r3, [r7, #8]
 8002050:	3306      	adds	r3, #6
 8002052:	7819      	ldrb	r1, [r3, #0]
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8002058:	b2da      	uxtb	r2, r3
 800205a:	68bb      	ldr	r3, [r7, #8]
 800205c:	3306      	adds	r3, #6
 800205e:	430a      	orrs	r2, r1
 8002060:	b2d2      	uxtb	r2, r2
 8002062:	701a      	strb	r2, [r3, #0]
  _d[7] |= (uint8_t) ( ((_m->heading_error_ro >> 8U) & (0xFFU)) );
 8002064:	68bb      	ldr	r3, [r7, #8]
 8002066:	3307      	adds	r3, #7
 8002068:	7819      	ldrb	r1, [r3, #0]
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 800206e:	0a1b      	lsrs	r3, r3, #8
 8002070:	b29b      	uxth	r3, r3
 8002072:	b2da      	uxtb	r2, r3
 8002074:	68bb      	ldr	r3, [r7, #8]
 8002076:	3307      	adds	r3, #7
 8002078:	430a      	orrs	r2, r1
 800207a:	b2d2      	uxtb	r2, r2
 800207c:	701a      	strb	r2, [r3, #0]

  *_len = (uint8_t) logic_1_DLC;
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	2208      	movs	r2, #8
 8002082:	701a      	strb	r2, [r3, #0]
  *_ide = (uint8_t) logic_1_IDE;
 8002084:	683b      	ldr	r3, [r7, #0]
 8002086:	2200      	movs	r2, #0
 8002088:	701a      	strb	r2, [r3, #0]
  return logic_1_CANID;
 800208a:	2321      	movs	r3, #33	; 0x21
}
 800208c:	4618      	mov	r0, r3
 800208e:	3718      	adds	r7, #24
 8002090:	46bd      	mov	sp, r7
 8002092:	bd80      	pop	{r7, pc}
 8002094:	f3af 8000 	nop.w
 8002098:	b4395810 	.word	0xb4395810
 800209c:	400a36c8 	.word	0x400a36c8
 80020a0:	eb1c432d 	.word	0xeb1c432d
 80020a4:	3f1a36e2 	.word	0x3f1a36e2
 80020a8:	70a3d70a 	.word	0x70a3d70a
 80020ac:	4030623d 	.word	0x4030623d
 80020b0:	d2f1a9fc 	.word	0xd2f1a9fc
 80020b4:	3f40624d 	.word	0x3f40624d
 80020b8:	b4395810 	.word	0xb4395810
 80020bc:	3ffa36c8 	.word	0x3ffa36c8
 80020c0:	eb1c432d 	.word	0xeb1c432d
 80020c4:	3f0a36e2 	.word	0x3f0a36e2

080020c8 <Pack_logic_2_jlb>:
}

#else

uint32_t Pack_logic_2_jlb(logic_2_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide)
{
 80020c8:	b580      	push	{r7, lr}
 80020ca:	b086      	sub	sp, #24
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	60f8      	str	r0, [r7, #12]
 80020d0:	60b9      	str	r1, [r7, #8]
 80020d2:	607a      	str	r2, [r7, #4]
 80020d4:	603b      	str	r3, [r7, #0]
  uint8_t i; for (i = 0u; i < JLB_VALIDATE_DLC(logic_2_DLC); _d[i++] = JLB_INITIAL_BYTE_VALUE);
 80020d6:	2300      	movs	r3, #0
 80020d8:	75fb      	strb	r3, [r7, #23]
 80020da:	e007      	b.n	80020ec <Pack_logic_2_jlb+0x24>
 80020dc:	7dfb      	ldrb	r3, [r7, #23]
 80020de:	1c5a      	adds	r2, r3, #1
 80020e0:	75fa      	strb	r2, [r7, #23]
 80020e2:	461a      	mov	r2, r3
 80020e4:	68bb      	ldr	r3, [r7, #8]
 80020e6:	4413      	add	r3, r2
 80020e8:	2200      	movs	r2, #0
 80020ea:	701a      	strb	r2, [r3, #0]
 80020ec:	7dfb      	ldrb	r3, [r7, #23]
 80020ee:	2b07      	cmp	r3, #7
 80020f0:	d9f4      	bls.n	80020dc <Pack_logic_2_jlb+0x14>

#ifdef JLB_USE_SIGFLOAT
  _m->distance_traveled_ro = (uint16_t) JLB_distance_traveled_ro_toS(_m->distance_traveled_phys);
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 80020f8:	a335      	add	r3, pc, #212	; (adr r3, 80021d0 <Pack_logic_2_jlb+0x108>)
 80020fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020fe:	f7fe fb97 	bl	8000830 <__aeabi_ddiv>
 8002102:	4602      	mov	r2, r0
 8002104:	460b      	mov	r3, r1
 8002106:	4610      	mov	r0, r2
 8002108:	4619      	mov	r1, r3
 800210a:	f7fe fd3f 	bl	8000b8c <__aeabi_d2uiz>
 800210e:	4603      	mov	r3, r0
 8002110:	b29a      	uxth	r2, r3
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	80da      	strh	r2, [r3, #6]
#endif // JLB_USE_SIGFLOAT

  _d[0] |= (uint8_t) ( (_m->direction & (0xFFU)) );
 8002116:	68bb      	ldr	r3, [r7, #8]
 8002118:	781a      	ldrb	r2, [r3, #0]
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	781b      	ldrb	r3, [r3, #0]
 800211e:	4313      	orrs	r3, r2
 8002120:	b2da      	uxtb	r2, r3
 8002122:	68bb      	ldr	r3, [r7, #8]
 8002124:	701a      	strb	r2, [r3, #0]
  _d[1] |= (uint8_t) ( (_m->mission & (0xFFU)) );
 8002126:	68bb      	ldr	r3, [r7, #8]
 8002128:	3301      	adds	r3, #1
 800212a:	7819      	ldrb	r1, [r3, #0]
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	785a      	ldrb	r2, [r3, #1]
 8002130:	68bb      	ldr	r3, [r7, #8]
 8002132:	3301      	adds	r3, #1
 8002134:	430a      	orrs	r2, r1
 8002136:	b2d2      	uxtb	r2, r2
 8002138:	701a      	strb	r2, [r3, #0]
  _d[2] |= (uint8_t) ( (_m->fast_state & (0xFFU)) );
 800213a:	68bb      	ldr	r3, [r7, #8]
 800213c:	3302      	adds	r3, #2
 800213e:	7819      	ldrb	r1, [r3, #0]
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	789a      	ldrb	r2, [r3, #2]
 8002144:	68bb      	ldr	r3, [r7, #8]
 8002146:	3302      	adds	r3, #2
 8002148:	430a      	orrs	r2, r1
 800214a:	b2d2      	uxtb	r2, r2
 800214c:	701a      	strb	r2, [r3, #0]
  _d[3] |= (uint8_t) ( (_m->labyrinth_state & (0xFFU)) );
 800214e:	68bb      	ldr	r3, [r7, #8]
 8002150:	3303      	adds	r3, #3
 8002152:	7819      	ldrb	r1, [r3, #0]
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	78da      	ldrb	r2, [r3, #3]
 8002158:	68bb      	ldr	r3, [r7, #8]
 800215a:	3303      	adds	r3, #3
 800215c:	430a      	orrs	r2, r1
 800215e:	b2d2      	uxtb	r2, r2
 8002160:	701a      	strb	r2, [r3, #0]
  _d[4] |= (uint8_t) ( (_m->next_node & (0xFFU)) );
 8002162:	68bb      	ldr	r3, [r7, #8]
 8002164:	3304      	adds	r3, #4
 8002166:	7819      	ldrb	r1, [r3, #0]
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	791a      	ldrb	r2, [r3, #4]
 800216c:	68bb      	ldr	r3, [r7, #8]
 800216e:	3304      	adds	r3, #4
 8002170:	430a      	orrs	r2, r1
 8002172:	b2d2      	uxtb	r2, r2
 8002174:	701a      	strb	r2, [r3, #0]
  _d[5] |= (uint8_t) ( (_m->previous_node & (0xFFU)) );
 8002176:	68bb      	ldr	r3, [r7, #8]
 8002178:	3305      	adds	r3, #5
 800217a:	7819      	ldrb	r1, [r3, #0]
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	795a      	ldrb	r2, [r3, #5]
 8002180:	68bb      	ldr	r3, [r7, #8]
 8002182:	3305      	adds	r3, #5
 8002184:	430a      	orrs	r2, r1
 8002186:	b2d2      	uxtb	r2, r2
 8002188:	701a      	strb	r2, [r3, #0]
  _d[6] |= (uint8_t) ( (_m->distance_traveled_ro & (0xFFU)) );
 800218a:	68bb      	ldr	r3, [r7, #8]
 800218c:	3306      	adds	r3, #6
 800218e:	7819      	ldrb	r1, [r3, #0]
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	88db      	ldrh	r3, [r3, #6]
 8002194:	b2da      	uxtb	r2, r3
 8002196:	68bb      	ldr	r3, [r7, #8]
 8002198:	3306      	adds	r3, #6
 800219a:	430a      	orrs	r2, r1
 800219c:	b2d2      	uxtb	r2, r2
 800219e:	701a      	strb	r2, [r3, #0]
  _d[7] |= (uint8_t) ( ((_m->distance_traveled_ro >> 8U) & (0xFFU)) );
 80021a0:	68bb      	ldr	r3, [r7, #8]
 80021a2:	3307      	adds	r3, #7
 80021a4:	7819      	ldrb	r1, [r3, #0]
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	88db      	ldrh	r3, [r3, #6]
 80021aa:	0a1b      	lsrs	r3, r3, #8
 80021ac:	b29b      	uxth	r3, r3
 80021ae:	b2da      	uxtb	r2, r3
 80021b0:	68bb      	ldr	r3, [r7, #8]
 80021b2:	3307      	adds	r3, #7
 80021b4:	430a      	orrs	r2, r1
 80021b6:	b2d2      	uxtb	r2, r2
 80021b8:	701a      	strb	r2, [r3, #0]

  *_len = (uint8_t) logic_2_DLC;
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	2208      	movs	r2, #8
 80021be:	701a      	strb	r2, [r3, #0]
  *_ide = (uint8_t) logic_2_IDE;
 80021c0:	683b      	ldr	r3, [r7, #0]
 80021c2:	2200      	movs	r2, #0
 80021c4:	701a      	strb	r2, [r3, #0]
  return logic_2_CANID;
 80021c6:	2322      	movs	r3, #34	; 0x22
}
 80021c8:	4618      	mov	r0, r3
 80021ca:	3718      	adds	r7, #24
 80021cc:	46bd      	mov	sp, r7
 80021ce:	bd80      	pop	{r7, pc}
 80021d0:	47ae147b 	.word	0x47ae147b
 80021d4:	3f847ae1 	.word	0x3f847ae1

080021d8 <Pack_logic_3_jlb>:
}

#else

uint32_t Pack_logic_3_jlb(logic_3_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide)
{
 80021d8:	b580      	push	{r7, lr}
 80021da:	b086      	sub	sp, #24
 80021dc:	af00      	add	r7, sp, #0
 80021de:	60f8      	str	r0, [r7, #12]
 80021e0:	60b9      	str	r1, [r7, #8]
 80021e2:	607a      	str	r2, [r7, #4]
 80021e4:	603b      	str	r3, [r7, #0]
  uint8_t i; for (i = 0u; i < JLB_VALIDATE_DLC(logic_3_DLC); _d[i++] = JLB_INITIAL_BYTE_VALUE);
 80021e6:	2300      	movs	r3, #0
 80021e8:	75fb      	strb	r3, [r7, #23]
 80021ea:	e007      	b.n	80021fc <Pack_logic_3_jlb+0x24>
 80021ec:	7dfb      	ldrb	r3, [r7, #23]
 80021ee:	1c5a      	adds	r2, r3, #1
 80021f0:	75fa      	strb	r2, [r7, #23]
 80021f2:	461a      	mov	r2, r3
 80021f4:	68bb      	ldr	r3, [r7, #8]
 80021f6:	4413      	add	r3, r2
 80021f8:	2200      	movs	r2, #0
 80021fa:	701a      	strb	r2, [r3, #0]
 80021fc:	7dfb      	ldrb	r3, [r7, #23]
 80021fe:	2b07      	cmp	r3, #7
 8002200:	d9f4      	bls.n	80021ec <Pack_logic_3_jlb+0x14>

#ifdef JLB_USE_SIGFLOAT
  _m->ang_error_norm_ro = (uint8_t) JLB_ang_error_norm_ro_toS(_m->ang_error_norm_phys);
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8002208:	a35d      	add	r3, pc, #372	; (adr r3, 8002380 <Pack_logic_3_jlb+0x1a8>)
 800220a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800220e:	f7fe fb0f 	bl	8000830 <__aeabi_ddiv>
 8002212:	4602      	mov	r2, r0
 8002214:	460b      	mov	r3, r1
 8002216:	4610      	mov	r0, r2
 8002218:	4619      	mov	r1, r3
 800221a:	f7fe fcb7 	bl	8000b8c <__aeabi_d2uiz>
 800221e:	4603      	mov	r3, r0
 8002220:	b2da      	uxtb	r2, r3
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	701a      	strb	r2, [r3, #0]
  _m->dist_error_norm_ro = (uint8_t) JLB_dist_error_norm_ro_toS(_m->dist_error_norm_phys);
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 800222c:	a354      	add	r3, pc, #336	; (adr r3, 8002380 <Pack_logic_3_jlb+0x1a8>)
 800222e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002232:	f7fe fafd 	bl	8000830 <__aeabi_ddiv>
 8002236:	4602      	mov	r2, r0
 8002238:	460b      	mov	r3, r1
 800223a:	4610      	mov	r0, r2
 800223c:	4619      	mov	r1, r3
 800223e:	f7fe fca5 	bl	8000b8c <__aeabi_d2uiz>
 8002242:	4603      	mov	r3, r0
 8002244:	b2da      	uxtb	r2, r3
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	741a      	strb	r2, [r3, #16]
  _m->line_position_front_ro = (uint16_t) JLB_line_position_front_ro_toS(_m->line_position_front_phys);
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 8002250:	a34d      	add	r3, pc, #308	; (adr r3, 8002388 <Pack_logic_3_jlb+0x1b0>)
 8002252:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002256:	f7fe f80b 	bl	8000270 <__adddf3>
 800225a:	4602      	mov	r2, r0
 800225c:	460b      	mov	r3, r1
 800225e:	4610      	mov	r0, r2
 8002260:	4619      	mov	r1, r3
 8002262:	a34b      	add	r3, pc, #300	; (adr r3, 8002390 <Pack_logic_3_jlb+0x1b8>)
 8002264:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002268:	f7fe fae2 	bl	8000830 <__aeabi_ddiv>
 800226c:	4602      	mov	r2, r0
 800226e:	460b      	mov	r3, r1
 8002270:	4610      	mov	r0, r2
 8002272:	4619      	mov	r1, r3
 8002274:	f7fe fc8a 	bl	8000b8c <__aeabi_d2uiz>
 8002278:	4603      	mov	r3, r0
 800227a:	b29a      	uxth	r2, r3
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	841a      	strh	r2, [r3, #32]
  _m->line_position_rear_ro = (uint16_t) JLB_line_position_rear_ro_toS(_m->line_position_rear_phys);
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8002286:	a340      	add	r3, pc, #256	; (adr r3, 8002388 <Pack_logic_3_jlb+0x1b0>)
 8002288:	e9d3 2300 	ldrd	r2, r3, [r3]
 800228c:	f7fd fff0 	bl	8000270 <__adddf3>
 8002290:	4602      	mov	r2, r0
 8002292:	460b      	mov	r3, r1
 8002294:	4610      	mov	r0, r2
 8002296:	4619      	mov	r1, r3
 8002298:	a33d      	add	r3, pc, #244	; (adr r3, 8002390 <Pack_logic_3_jlb+0x1b8>)
 800229a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800229e:	f7fe fac7 	bl	8000830 <__aeabi_ddiv>
 80022a2:	4602      	mov	r2, r0
 80022a4:	460b      	mov	r3, r1
 80022a6:	4610      	mov	r0, r2
 80022a8:	4619      	mov	r1, r3
 80022aa:	f7fe fc6f 	bl	8000b8c <__aeabi_d2uiz>
 80022ae:	4603      	mov	r3, r0
 80022b0:	b29a      	uxth	r2, r3
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	861a      	strh	r2, [r3, #48]	; 0x30
#endif // JLB_USE_SIGFLOAT

  _d[0] |= (uint8_t) ( (_m->ang_error_norm_ro & (0xFFU)) );
 80022b6:	68bb      	ldr	r3, [r7, #8]
 80022b8:	781a      	ldrb	r2, [r3, #0]
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	781b      	ldrb	r3, [r3, #0]
 80022be:	4313      	orrs	r3, r2
 80022c0:	b2da      	uxtb	r2, r3
 80022c2:	68bb      	ldr	r3, [r7, #8]
 80022c4:	701a      	strb	r2, [r3, #0]
  _d[1] |= (uint8_t) ( (_m->dist_error_norm_ro & (0xFFU)) );
 80022c6:	68bb      	ldr	r3, [r7, #8]
 80022c8:	3301      	adds	r3, #1
 80022ca:	7819      	ldrb	r1, [r3, #0]
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	7c1a      	ldrb	r2, [r3, #16]
 80022d0:	68bb      	ldr	r3, [r7, #8]
 80022d2:	3301      	adds	r3, #1
 80022d4:	430a      	orrs	r2, r1
 80022d6:	b2d2      	uxtb	r2, r2
 80022d8:	701a      	strb	r2, [r3, #0]
  _d[2] |= (uint8_t) ( (_m->line_position_front_ro & (0xFFU)) );
 80022da:	68bb      	ldr	r3, [r7, #8]
 80022dc:	3302      	adds	r3, #2
 80022de:	7819      	ldrb	r1, [r3, #0]
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	8c1b      	ldrh	r3, [r3, #32]
 80022e4:	b2da      	uxtb	r2, r3
 80022e6:	68bb      	ldr	r3, [r7, #8]
 80022e8:	3302      	adds	r3, #2
 80022ea:	430a      	orrs	r2, r1
 80022ec:	b2d2      	uxtb	r2, r2
 80022ee:	701a      	strb	r2, [r3, #0]
  _d[3] |= (uint8_t) ( ((_m->line_position_front_ro >> 8U) & (0xFFU)) );
 80022f0:	68bb      	ldr	r3, [r7, #8]
 80022f2:	3303      	adds	r3, #3
 80022f4:	7819      	ldrb	r1, [r3, #0]
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	8c1b      	ldrh	r3, [r3, #32]
 80022fa:	0a1b      	lsrs	r3, r3, #8
 80022fc:	b29b      	uxth	r3, r3
 80022fe:	b2da      	uxtb	r2, r3
 8002300:	68bb      	ldr	r3, [r7, #8]
 8002302:	3303      	adds	r3, #3
 8002304:	430a      	orrs	r2, r1
 8002306:	b2d2      	uxtb	r2, r2
 8002308:	701a      	strb	r2, [r3, #0]
  _d[4] |= (uint8_t) ( (_m->line_position_rear_ro & (0xFFU)) );
 800230a:	68bb      	ldr	r3, [r7, #8]
 800230c:	3304      	adds	r3, #4
 800230e:	7819      	ldrb	r1, [r3, #0]
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8002314:	b2da      	uxtb	r2, r3
 8002316:	68bb      	ldr	r3, [r7, #8]
 8002318:	3304      	adds	r3, #4
 800231a:	430a      	orrs	r2, r1
 800231c:	b2d2      	uxtb	r2, r2
 800231e:	701a      	strb	r2, [r3, #0]
  _d[5] |= (uint8_t) ( ((_m->line_position_rear_ro >> 8U) & (0xFFU)) );
 8002320:	68bb      	ldr	r3, [r7, #8]
 8002322:	3305      	adds	r3, #5
 8002324:	7819      	ldrb	r1, [r3, #0]
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 800232a:	0a1b      	lsrs	r3, r3, #8
 800232c:	b29b      	uxth	r3, r3
 800232e:	b2da      	uxtb	r2, r3
 8002330:	68bb      	ldr	r3, [r7, #8]
 8002332:	3305      	adds	r3, #5
 8002334:	430a      	orrs	r2, r1
 8002336:	b2d2      	uxtb	r2, r2
 8002338:	701a      	strb	r2, [r3, #0]
  _d[6] |= (uint8_t) ( (_m->at_cross_section & (0x01U)) | ((_m->under_gate & (0x01U)) << 1U) );
 800233a:	68bb      	ldr	r3, [r7, #8]
 800233c:	3306      	adds	r3, #6
 800233e:	7819      	ldrb	r1, [r3, #0]
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002346:	f003 0301 	and.w	r3, r3, #1
 800234a:	b2da      	uxtb	r2, r3
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002352:	005b      	lsls	r3, r3, #1
 8002354:	b2db      	uxtb	r3, r3
 8002356:	f003 0302 	and.w	r3, r3, #2
 800235a:	b2db      	uxtb	r3, r3
 800235c:	4313      	orrs	r3, r2
 800235e:	b2da      	uxtb	r2, r3
 8002360:	68bb      	ldr	r3, [r7, #8]
 8002362:	3306      	adds	r3, #6
 8002364:	430a      	orrs	r2, r1
 8002366:	b2d2      	uxtb	r2, r2
 8002368:	701a      	strb	r2, [r3, #0]

  *_len = (uint8_t) logic_3_DLC;
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	2208      	movs	r2, #8
 800236e:	701a      	strb	r2, [r3, #0]
  *_ide = (uint8_t) logic_3_IDE;
 8002370:	683b      	ldr	r3, [r7, #0]
 8002372:	2200      	movs	r2, #0
 8002374:	701a      	strb	r2, [r3, #0]
  return logic_3_CANID;
 8002376:	2323      	movs	r3, #35	; 0x23
}
 8002378:	4618      	mov	r0, r3
 800237a:	3718      	adds	r7, #24
 800237c:	46bd      	mov	sp, r7
 800237e:	bd80      	pop	{r7, pc}
 8002380:	d2f1a9fc 	.word	0xd2f1a9fc
 8002384:	3f70624d 	.word	0x3f70624d
 8002388:	70a3d70a 	.word	0x70a3d70a
 800238c:	4030623d 	.word	0x4030623d
 8002390:	d2f1a9fc 	.word	0xd2f1a9fc
 8002394:	3f40624d 	.word	0x3f40624d

08002398 <HAL_ADC_ConvCpltCallback>:
uint32_t adc_values_raw[8];
analog_signals_s adc_values = {0u};
uint8_t channel_idx = 0;

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002398:	b480      	push	{r7}
 800239a:	b083      	sub	sp, #12
 800239c:	af00      	add	r7, sp, #0
 800239e:	6078      	str	r0, [r7, #4]
	adc_values.motor_batt_voltage_raw = adc_values_raw[0];
 80023a0:	4b16      	ldr	r3, [pc, #88]	; (80023fc <HAL_ADC_ConvCpltCallback+0x64>)
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	b29a      	uxth	r2, r3
 80023a6:	4b16      	ldr	r3, [pc, #88]	; (8002400 <HAL_ADC_ConvCpltCallback+0x68>)
 80023a8:	801a      	strh	r2, [r3, #0]
	adc_values.motor_curr_raw = adc_values_raw[1];
 80023aa:	4b14      	ldr	r3, [pc, #80]	; (80023fc <HAL_ADC_ConvCpltCallback+0x64>)
 80023ac:	685b      	ldr	r3, [r3, #4]
 80023ae:	b29a      	uxth	r2, r3
 80023b0:	4b13      	ldr	r3, [pc, #76]	; (8002400 <HAL_ADC_ConvCpltCallback+0x68>)
 80023b2:	805a      	strh	r2, [r3, #2]
	adc_values.vbus_raw = adc_values_raw[2];
 80023b4:	4b11      	ldr	r3, [pc, #68]	; (80023fc <HAL_ADC_ConvCpltCallback+0x64>)
 80023b6:	689b      	ldr	r3, [r3, #8]
 80023b8:	b29a      	uxth	r2, r3
 80023ba:	4b11      	ldr	r3, [pc, #68]	; (8002400 <HAL_ADC_ConvCpltCallback+0x68>)
 80023bc:	809a      	strh	r2, [r3, #4]
	adc_values.distance_short2_raw = adc_values_raw[5];
 80023be:	4b0f      	ldr	r3, [pc, #60]	; (80023fc <HAL_ADC_ConvCpltCallback+0x64>)
 80023c0:	695b      	ldr	r3, [r3, #20]
 80023c2:	b29a      	uxth	r2, r3
 80023c4:	4b0e      	ldr	r3, [pc, #56]	; (8002400 <HAL_ADC_ConvCpltCallback+0x68>)
 80023c6:	80da      	strh	r2, [r3, #6]
	adc_values.distance_short1_raw = adc_values_raw[3];
 80023c8:	4b0c      	ldr	r3, [pc, #48]	; (80023fc <HAL_ADC_ConvCpltCallback+0x64>)
 80023ca:	68db      	ldr	r3, [r3, #12]
 80023cc:	b29a      	uxth	r2, r3
 80023ce:	4b0c      	ldr	r3, [pc, #48]	; (8002400 <HAL_ADC_ConvCpltCallback+0x68>)
 80023d0:	811a      	strh	r2, [r3, #8]
	adc_values.distance_long1_raw = adc_values_raw[4];
 80023d2:	4b0a      	ldr	r3, [pc, #40]	; (80023fc <HAL_ADC_ConvCpltCallback+0x64>)
 80023d4:	691b      	ldr	r3, [r3, #16]
 80023d6:	b29a      	uxth	r2, r3
 80023d8:	4b09      	ldr	r3, [pc, #36]	; (8002400 <HAL_ADC_ConvCpltCallback+0x68>)
 80023da:	815a      	strh	r2, [r3, #10]
	adc_values.lv_batt_voltage_raw = adc_values_raw[6];
 80023dc:	4b07      	ldr	r3, [pc, #28]	; (80023fc <HAL_ADC_ConvCpltCallback+0x64>)
 80023de:	699b      	ldr	r3, [r3, #24]
 80023e0:	b29a      	uxth	r2, r3
 80023e2:	4b07      	ldr	r3, [pc, #28]	; (8002400 <HAL_ADC_ConvCpltCallback+0x68>)
 80023e4:	819a      	strh	r2, [r3, #12]
	adc_values.distance_long2_raw = adc_values_raw[7];
 80023e6:	4b05      	ldr	r3, [pc, #20]	; (80023fc <HAL_ADC_ConvCpltCallback+0x64>)
 80023e8:	69db      	ldr	r3, [r3, #28]
 80023ea:	b29a      	uxth	r2, r3
 80023ec:	4b04      	ldr	r3, [pc, #16]	; (8002400 <HAL_ADC_ConvCpltCallback+0x68>)
 80023ee:	81da      	strh	r2, [r3, #14]

	//vTaskResume(static_cast<TaskHandle_t>(mainTaskHandle));
}
 80023f0:	bf00      	nop
 80023f2:	370c      	adds	r7, #12
 80023f4:	46bd      	mov	sp, r7
 80023f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fa:	4770      	bx	lr
 80023fc:	2000012c 	.word	0x2000012c
 8002400:	2000014c 	.word	0x2000014c

08002404 <_Z18DistanceSensorTaskv>:
extern analog_signals_s adc_values;
DistanceSensorData_s distance_sensor = {0u};


void DistanceSensorTask()
{
 8002404:	b5b0      	push	{r4, r5, r7, lr}
 8002406:	b082      	sub	sp, #8
 8002408:	af00      	add	r7, sp, #0
	uint8_t i,j;
	distance_sensor.voltage_long[0] = ((float)(adc_values.distance_long1_raw)) / 4096.0f * 3.3f;
 800240a:	4b91      	ldr	r3, [pc, #580]	; (8002650 <_Z18DistanceSensorTaskv+0x24c>)
 800240c:	895b      	ldrh	r3, [r3, #10]
 800240e:	ee07 3a90 	vmov	s15, r3
 8002412:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002416:	eddf 6a8f 	vldr	s13, [pc, #572]	; 8002654 <_Z18DistanceSensorTaskv+0x250>
 800241a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800241e:	ed9f 7a8e 	vldr	s14, [pc, #568]	; 8002658 <_Z18DistanceSensorTaskv+0x254>
 8002422:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002426:	4b8d      	ldr	r3, [pc, #564]	; (800265c <_Z18DistanceSensorTaskv+0x258>)
 8002428:	edc3 7a00 	vstr	s15, [r3]
	distance_sensor.voltage_long[1] = ((float)(adc_values.distance_long2_raw)) / 4096.0f * 3.3f;
 800242c:	4b88      	ldr	r3, [pc, #544]	; (8002650 <_Z18DistanceSensorTaskv+0x24c>)
 800242e:	89db      	ldrh	r3, [r3, #14]
 8002430:	ee07 3a90 	vmov	s15, r3
 8002434:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002438:	eddf 6a86 	vldr	s13, [pc, #536]	; 8002654 <_Z18DistanceSensorTaskv+0x250>
 800243c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002440:	ed9f 7a85 	vldr	s14, [pc, #532]	; 8002658 <_Z18DistanceSensorTaskv+0x254>
 8002444:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002448:	4b84      	ldr	r3, [pc, #528]	; (800265c <_Z18DistanceSensorTaskv+0x258>)
 800244a:	edc3 7a01 	vstr	s15, [r3, #4]
	distance_sensor.voltage_short[0] = ((float)(adc_values.distance_short1_raw)) / 4096.0f * 3.3f;
 800244e:	4b80      	ldr	r3, [pc, #512]	; (8002650 <_Z18DistanceSensorTaskv+0x24c>)
 8002450:	891b      	ldrh	r3, [r3, #8]
 8002452:	ee07 3a90 	vmov	s15, r3
 8002456:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800245a:	eddf 6a7e 	vldr	s13, [pc, #504]	; 8002654 <_Z18DistanceSensorTaskv+0x250>
 800245e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002462:	ed9f 7a7d 	vldr	s14, [pc, #500]	; 8002658 <_Z18DistanceSensorTaskv+0x254>
 8002466:	ee67 7a87 	vmul.f32	s15, s15, s14
 800246a:	4b7c      	ldr	r3, [pc, #496]	; (800265c <_Z18DistanceSensorTaskv+0x258>)
 800246c:	edc3 7a02 	vstr	s15, [r3, #8]
	distance_sensor.voltage_short[1] = ((float)(adc_values.distance_short2_raw)) / 4096.0f * 3.3f;
 8002470:	4b77      	ldr	r3, [pc, #476]	; (8002650 <_Z18DistanceSensorTaskv+0x24c>)
 8002472:	88db      	ldrh	r3, [r3, #6]
 8002474:	ee07 3a90 	vmov	s15, r3
 8002478:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800247c:	eddf 6a75 	vldr	s13, [pc, #468]	; 8002654 <_Z18DistanceSensorTaskv+0x250>
 8002480:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002484:	ed9f 7a74 	vldr	s14, [pc, #464]	; 8002658 <_Z18DistanceSensorTaskv+0x254>
 8002488:	ee67 7a87 	vmul.f32	s15, s15, s14
 800248c:	4b73      	ldr	r3, [pc, #460]	; (800265c <_Z18DistanceSensorTaskv+0x258>)
 800248e:	edc3 7a03 	vstr	s15, [r3, #12]

	for(i = 0; i < 1; ++i)
 8002492:	2300      	movs	r3, #0
 8002494:	71fb      	strb	r3, [r7, #7]
 8002496:	e0a1      	b.n	80025dc <_Z18DistanceSensorTaskv+0x1d8>
	{
		float x = distance_sensor.voltage_long[i];
 8002498:	79fb      	ldrb	r3, [r7, #7]
 800249a:	4a70      	ldr	r2, [pc, #448]	; (800265c <_Z18DistanceSensorTaskv+0x258>)
 800249c:	009b      	lsls	r3, r3, #2
 800249e:	4413      	add	r3, r2
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	603b      	str	r3, [r7, #0]
		distance_sensor.distance_long[i] = 0.0f;
 80024a4:	79fb      	ldrb	r3, [r7, #7]
 80024a6:	4a6d      	ldr	r2, [pc, #436]	; (800265c <_Z18DistanceSensorTaskv+0x258>)
 80024a8:	3304      	adds	r3, #4
 80024aa:	009b      	lsls	r3, r3, #2
 80024ac:	4413      	add	r3, r2
 80024ae:	f04f 0200 	mov.w	r2, #0
 80024b2:	601a      	str	r2, [r3, #0]
		for(j = 0; j < 6; ++j)
 80024b4:	2300      	movs	r3, #0
 80024b6:	71bb      	strb	r3, [r7, #6]
 80024b8:	e03a      	b.n	8002530 <_Z18DistanceSensorTaskv+0x12c>
		{
			distance_sensor.distance_long[i] += pow(x,5-j) * long_poly_coeff[j];
 80024ba:	79bb      	ldrb	r3, [r7, #6]
 80024bc:	f1c3 0305 	rsb	r3, r3, #5
 80024c0:	4618      	mov	r0, r3
 80024c2:	ed97 0a00 	vldr	s0, [r7]
 80024c6:	f000 f8d1 	bl	800266c <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 80024ca:	ec55 4b10 	vmov	r4, r5, d0
 80024ce:	79bb      	ldrb	r3, [r7, #6]
 80024d0:	4a63      	ldr	r2, [pc, #396]	; (8002660 <_Z18DistanceSensorTaskv+0x25c>)
 80024d2:	009b      	lsls	r3, r3, #2
 80024d4:	4413      	add	r3, r2
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	4618      	mov	r0, r3
 80024da:	f7fe f827 	bl	800052c <__aeabi_f2d>
 80024de:	4602      	mov	r2, r0
 80024e0:	460b      	mov	r3, r1
 80024e2:	4620      	mov	r0, r4
 80024e4:	4629      	mov	r1, r5
 80024e6:	f7fe f879 	bl	80005dc <__aeabi_dmul>
 80024ea:	4602      	mov	r2, r0
 80024ec:	460b      	mov	r3, r1
 80024ee:	4614      	mov	r4, r2
 80024f0:	461d      	mov	r5, r3
 80024f2:	79fb      	ldrb	r3, [r7, #7]
 80024f4:	4a59      	ldr	r2, [pc, #356]	; (800265c <_Z18DistanceSensorTaskv+0x258>)
 80024f6:	3304      	adds	r3, #4
 80024f8:	009b      	lsls	r3, r3, #2
 80024fa:	4413      	add	r3, r2
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	4618      	mov	r0, r3
 8002500:	f7fe f814 	bl	800052c <__aeabi_f2d>
 8002504:	4602      	mov	r2, r0
 8002506:	460b      	mov	r3, r1
 8002508:	4620      	mov	r0, r4
 800250a:	4629      	mov	r1, r5
 800250c:	f7fd feb0 	bl	8000270 <__adddf3>
 8002510:	4602      	mov	r2, r0
 8002512:	460b      	mov	r3, r1
 8002514:	79fc      	ldrb	r4, [r7, #7]
 8002516:	4610      	mov	r0, r2
 8002518:	4619      	mov	r1, r3
 800251a:	f7fe fb57 	bl	8000bcc <__aeabi_d2f>
 800251e:	4602      	mov	r2, r0
 8002520:	494e      	ldr	r1, [pc, #312]	; (800265c <_Z18DistanceSensorTaskv+0x258>)
 8002522:	1d23      	adds	r3, r4, #4
 8002524:	009b      	lsls	r3, r3, #2
 8002526:	440b      	add	r3, r1
 8002528:	601a      	str	r2, [r3, #0]
		for(j = 0; j < 6; ++j)
 800252a:	79bb      	ldrb	r3, [r7, #6]
 800252c:	3301      	adds	r3, #1
 800252e:	71bb      	strb	r3, [r7, #6]
 8002530:	79bb      	ldrb	r3, [r7, #6]
 8002532:	2b05      	cmp	r3, #5
 8002534:	d9c1      	bls.n	80024ba <_Z18DistanceSensorTaskv+0xb6>
		}

		distance_sensor.distance_short[i] = 0.0f;
 8002536:	79fb      	ldrb	r3, [r7, #7]
 8002538:	4a48      	ldr	r2, [pc, #288]	; (800265c <_Z18DistanceSensorTaskv+0x258>)
 800253a:	3306      	adds	r3, #6
 800253c:	009b      	lsls	r3, r3, #2
 800253e:	4413      	add	r3, r2
 8002540:	f04f 0200 	mov.w	r2, #0
 8002544:	601a      	str	r2, [r3, #0]
		x = distance_sensor.voltage_short[i];
 8002546:	79fb      	ldrb	r3, [r7, #7]
 8002548:	4a44      	ldr	r2, [pc, #272]	; (800265c <_Z18DistanceSensorTaskv+0x258>)
 800254a:	3302      	adds	r3, #2
 800254c:	009b      	lsls	r3, r3, #2
 800254e:	4413      	add	r3, r2
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	603b      	str	r3, [r7, #0]
		for(j = 0; j < 6; ++j)
 8002554:	2300      	movs	r3, #0
 8002556:	71bb      	strb	r3, [r7, #6]
 8002558:	e03a      	b.n	80025d0 <_Z18DistanceSensorTaskv+0x1cc>
		{
			distance_sensor.distance_short[i] += pow(x,5-j) * short_poly_coeff[j];
 800255a:	79bb      	ldrb	r3, [r7, #6]
 800255c:	f1c3 0305 	rsb	r3, r3, #5
 8002560:	4618      	mov	r0, r3
 8002562:	ed97 0a00 	vldr	s0, [r7]
 8002566:	f000 f881 	bl	800266c <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 800256a:	ec55 4b10 	vmov	r4, r5, d0
 800256e:	79bb      	ldrb	r3, [r7, #6]
 8002570:	4a3c      	ldr	r2, [pc, #240]	; (8002664 <_Z18DistanceSensorTaskv+0x260>)
 8002572:	009b      	lsls	r3, r3, #2
 8002574:	4413      	add	r3, r2
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	4618      	mov	r0, r3
 800257a:	f7fd ffd7 	bl	800052c <__aeabi_f2d>
 800257e:	4602      	mov	r2, r0
 8002580:	460b      	mov	r3, r1
 8002582:	4620      	mov	r0, r4
 8002584:	4629      	mov	r1, r5
 8002586:	f7fe f829 	bl	80005dc <__aeabi_dmul>
 800258a:	4602      	mov	r2, r0
 800258c:	460b      	mov	r3, r1
 800258e:	4614      	mov	r4, r2
 8002590:	461d      	mov	r5, r3
 8002592:	79fb      	ldrb	r3, [r7, #7]
 8002594:	4a31      	ldr	r2, [pc, #196]	; (800265c <_Z18DistanceSensorTaskv+0x258>)
 8002596:	3306      	adds	r3, #6
 8002598:	009b      	lsls	r3, r3, #2
 800259a:	4413      	add	r3, r2
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	4618      	mov	r0, r3
 80025a0:	f7fd ffc4 	bl	800052c <__aeabi_f2d>
 80025a4:	4602      	mov	r2, r0
 80025a6:	460b      	mov	r3, r1
 80025a8:	4620      	mov	r0, r4
 80025aa:	4629      	mov	r1, r5
 80025ac:	f7fd fe60 	bl	8000270 <__adddf3>
 80025b0:	4602      	mov	r2, r0
 80025b2:	460b      	mov	r3, r1
 80025b4:	79fc      	ldrb	r4, [r7, #7]
 80025b6:	4610      	mov	r0, r2
 80025b8:	4619      	mov	r1, r3
 80025ba:	f7fe fb07 	bl	8000bcc <__aeabi_d2f>
 80025be:	4602      	mov	r2, r0
 80025c0:	4926      	ldr	r1, [pc, #152]	; (800265c <_Z18DistanceSensorTaskv+0x258>)
 80025c2:	1da3      	adds	r3, r4, #6
 80025c4:	009b      	lsls	r3, r3, #2
 80025c6:	440b      	add	r3, r1
 80025c8:	601a      	str	r2, [r3, #0]
		for(j = 0; j < 6; ++j)
 80025ca:	79bb      	ldrb	r3, [r7, #6]
 80025cc:	3301      	adds	r3, #1
 80025ce:	71bb      	strb	r3, [r7, #6]
 80025d0:	79bb      	ldrb	r3, [r7, #6]
 80025d2:	2b05      	cmp	r3, #5
 80025d4:	d9c1      	bls.n	800255a <_Z18DistanceSensorTaskv+0x156>
	for(i = 0; i < 1; ++i)
 80025d6:	79fb      	ldrb	r3, [r7, #7]
 80025d8:	3301      	adds	r3, #1
 80025da:	71fb      	strb	r3, [r7, #7]
 80025dc:	79fb      	ldrb	r3, [r7, #7]
 80025de:	2b00      	cmp	r3, #0
 80025e0:	f43f af5a 	beq.w	8002498 <_Z18DistanceSensorTaskv+0x94>
		}
	}

	if((distance_sensor.distance_short[0] >= 20.0f) || (distance_sensor.distance_short[1] >= 20.0f))
 80025e4:	4b1d      	ldr	r3, [pc, #116]	; (800265c <_Z18DistanceSensorTaskv+0x258>)
 80025e6:	edd3 7a06 	vldr	s15, [r3, #24]
 80025ea:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 80025ee:	eef4 7ac7 	vcmpe.f32	s15, s14
 80025f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80025f6:	da09      	bge.n	800260c <_Z18DistanceSensorTaskv+0x208>
 80025f8:	4b18      	ldr	r3, [pc, #96]	; (800265c <_Z18DistanceSensorTaskv+0x258>)
 80025fa:	edd3 7a07 	vldr	s15, [r3, #28]
 80025fe:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8002602:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002606:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800260a:	db04      	blt.n	8002616 <_Z18DistanceSensorTaskv+0x212>
	{
		//distance_sensor.distance = (distance_sensor.distance_long[0] + distance_sensor.distance_long[1]) / 2.0f;
		distance_sensor.distance = distance_sensor.distance_long[0];
 800260c:	4b13      	ldr	r3, [pc, #76]	; (800265c <_Z18DistanceSensorTaskv+0x258>)
 800260e:	691b      	ldr	r3, [r3, #16]
 8002610:	4a12      	ldr	r2, [pc, #72]	; (800265c <_Z18DistanceSensorTaskv+0x258>)
 8002612:	6213      	str	r3, [r2, #32]
 8002614:	e003      	b.n	800261e <_Z18DistanceSensorTaskv+0x21a>
	}
	else
	{
		//distance_sensor.distance = (distance_sensor.distance_short[0] + distance_sensor.distance_short[1]) / 2.0f;
		distance_sensor.distance = distance_sensor.distance_short[0];
 8002616:	4b11      	ldr	r3, [pc, #68]	; (800265c <_Z18DistanceSensorTaskv+0x258>)
 8002618:	699b      	ldr	r3, [r3, #24]
 800261a:	4a10      	ldr	r2, [pc, #64]	; (800265c <_Z18DistanceSensorTaskv+0x258>)
 800261c:	6213      	str	r3, [r2, #32]
	}

	distance_sensor.distance -= 7.0f;
 800261e:	4b0f      	ldr	r3, [pc, #60]	; (800265c <_Z18DistanceSensorTaskv+0x258>)
 8002620:	edd3 7a08 	vldr	s15, [r3, #32]
 8002624:	eeb1 7a0c 	vmov.f32	s14, #28	; 0x40e00000  7.0
 8002628:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800262c:	4b0b      	ldr	r3, [pc, #44]	; (800265c <_Z18DistanceSensorTaskv+0x258>)
 800262e:	edc3 7a08 	vstr	s15, [r3, #32]
	distance_sensor.distance /= 100.0f;
 8002632:	4b0a      	ldr	r3, [pc, #40]	; (800265c <_Z18DistanceSensorTaskv+0x258>)
 8002634:	ed93 7a08 	vldr	s14, [r3, #32]
 8002638:	eddf 6a0b 	vldr	s13, [pc, #44]	; 8002668 <_Z18DistanceSensorTaskv+0x264>
 800263c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002640:	4b06      	ldr	r3, [pc, #24]	; (800265c <_Z18DistanceSensorTaskv+0x258>)
 8002642:	edc3 7a08 	vstr	s15, [r3, #32]
}
 8002646:	bf00      	nop
 8002648:	3708      	adds	r7, #8
 800264a:	46bd      	mov	sp, r7
 800264c:	bdb0      	pop	{r4, r5, r7, pc}
 800264e:	bf00      	nop
 8002650:	2000014c 	.word	0x2000014c
 8002654:	45800000 	.word	0x45800000
 8002658:	40533333 	.word	0x40533333
 800265c:	2000015c 	.word	0x2000015c
 8002660:	20000018 	.word	0x20000018
 8002664:	20000000 	.word	0x20000000
 8002668:	42c80000 	.word	0x42c80000

0800266c <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>:
#endif

  template<typename _Tp, typename _Up>
    inline _GLIBCXX_CONSTEXPR
    typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    pow(_Tp __x, _Up __y)
 800266c:	b5b0      	push	{r4, r5, r7, lr}
 800266e:	b082      	sub	sp, #8
 8002670:	af00      	add	r7, sp, #0
 8002672:	ed87 0a01 	vstr	s0, [r7, #4]
 8002676:	6038      	str	r0, [r7, #0]
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return pow(__type(__x), __type(__y));
 8002678:	6878      	ldr	r0, [r7, #4]
 800267a:	f7fd ff57 	bl	800052c <__aeabi_f2d>
 800267e:	4604      	mov	r4, r0
 8002680:	460d      	mov	r5, r1
 8002682:	6838      	ldr	r0, [r7, #0]
 8002684:	f7fd ff40 	bl	8000508 <__aeabi_i2d>
 8002688:	4602      	mov	r2, r0
 800268a:	460b      	mov	r3, r1
 800268c:	ec43 2b11 	vmov	d1, r2, r3
 8002690:	ec45 4b10 	vmov	d0, r4, r5
 8002694:	f01e fdc8 	bl	8021228 <pow>
 8002698:	eeb0 7a40 	vmov.f32	s14, s0
 800269c:	eef0 7a60 	vmov.f32	s15, s1
    }
 80026a0:	eeb0 0a47 	vmov.f32	s0, s14
 80026a4:	eef0 0a67 	vmov.f32	s1, s15
 80026a8:	3708      	adds	r7, #8
 80026aa:	46bd      	mov	sp, r7
 80026ac:	bdb0      	pop	{r4, r5, r7, pc}
	...

080026b0 <_Z14update_encoderP16encoder_instanceP17TIM_HandleTypeDef>:

encoder_instance enc_instance_mot;
extern TIM_HandleTypeDef htim3;

void update_encoder(encoder_instance *encoder_value, TIM_HandleTypeDef *htim)
{
 80026b0:	b480      	push	{r7}
 80026b2:	b085      	sub	sp, #20
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	6078      	str	r0, [r7, #4]
 80026b8:	6039      	str	r1, [r7, #0]
	uint32_t temp_counter = __HAL_TIM_GET_COUNTER(htim);
 80026ba:	683b      	ldr	r3, [r7, #0]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026c0:	60fb      	str	r3, [r7, #12]
	static uint8_t first_time = 0;
	if (!first_time)
 80026c2:	4b38      	ldr	r3, [pc, #224]	; (80027a4 <_Z14update_encoderP16encoder_instanceP17TIM_HandleTypeDef+0xf4>)
 80026c4:	781b      	ldrb	r3, [r3, #0]
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d106      	bne.n	80026d8 <_Z14update_encoderP16encoder_instanceP17TIM_HandleTypeDef+0x28>
	{
		encoder_value->velocity = 0;
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	2200      	movs	r2, #0
 80026ce:	801a      	strh	r2, [r3, #0]
		first_time = 1;
 80026d0:	4b34      	ldr	r3, [pc, #208]	; (80027a4 <_Z14update_encoderP16encoder_instanceP17TIM_HandleTypeDef+0xf4>)
 80026d2:	2201      	movs	r2, #1
 80026d4:	701a      	strb	r2, [r3, #0]
 80026d6:	e05c      	b.n	8002792 <_Z14update_encoderP16encoder_instanceP17TIM_HandleTypeDef+0xe2>
	}
	else
	{
		if (temp_counter == encoder_value->last_counter_value)
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	685b      	ldr	r3, [r3, #4]
 80026dc:	68fa      	ldr	r2, [r7, #12]
 80026de:	429a      	cmp	r2, r3
 80026e0:	d103      	bne.n	80026ea <_Z14update_encoderP16encoder_instanceP17TIM_HandleTypeDef+0x3a>
		{
			encoder_value->velocity = 0;
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	2200      	movs	r2, #0
 80026e6:	801a      	strh	r2, [r3, #0]
 80026e8:	e053      	b.n	8002792 <_Z14update_encoderP16encoder_instanceP17TIM_HandleTypeDef+0xe2>
		}
		else if (temp_counter > encoder_value->last_counter_value)
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	685b      	ldr	r3, [r3, #4]
 80026ee:	68fa      	ldr	r2, [r7, #12]
 80026f0:	429a      	cmp	r2, r3
 80026f2:	d927      	bls.n	8002744 <_Z14update_encoderP16encoder_instanceP17TIM_HandleTypeDef+0x94>
		{
			if (__HAL_TIM_IS_TIM_COUNTING_DOWN(htim))
 80026f4:	683b      	ldr	r3, [r7, #0]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f003 0310 	and.w	r3, r3, #16
 80026fe:	2b10      	cmp	r3, #16
 8002700:	bf0c      	ite	eq
 8002702:	2301      	moveq	r3, #1
 8002704:	2300      	movne	r3, #0
 8002706:	b2db      	uxtb	r3, r3
 8002708:	2b00      	cmp	r3, #0
 800270a:	d010      	beq.n	800272e <_Z14update_encoderP16encoder_instanceP17TIM_HandleTypeDef+0x7e>
			{
				encoder_value->velocity = -encoder_value->last_counter_value - (__HAL_TIM_GET_AUTORELOAD(htim) - temp_counter);
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	b29a      	uxth	r2, r3
 8002710:	683b      	ldr	r3, [r7, #0]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002716:	b29b      	uxth	r3, r3
 8002718:	1ad3      	subs	r3, r2, r3
 800271a:	b29a      	uxth	r2, r3
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	685b      	ldr	r3, [r3, #4]
 8002720:	b29b      	uxth	r3, r3
 8002722:	1ad3      	subs	r3, r2, r3
 8002724:	b29b      	uxth	r3, r3
 8002726:	b21a      	sxth	r2, r3
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	801a      	strh	r2, [r3, #0]
 800272c:	e031      	b.n	8002792 <_Z14update_encoderP16encoder_instanceP17TIM_HandleTypeDef+0xe2>
			}
			else
			{
				encoder_value->velocity = temp_counter - encoder_value->last_counter_value;
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	b29a      	uxth	r2, r3
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	685b      	ldr	r3, [r3, #4]
 8002736:	b29b      	uxth	r3, r3
 8002738:	1ad3      	subs	r3, r2, r3
 800273a:	b29b      	uxth	r3, r3
 800273c:	b21a      	sxth	r2, r3
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	801a      	strh	r2, [r3, #0]
 8002742:	e026      	b.n	8002792 <_Z14update_encoderP16encoder_instanceP17TIM_HandleTypeDef+0xe2>
			}
		}
		else
		{
			if (__HAL_TIM_IS_TIM_COUNTING_DOWN(htim))
 8002744:	683b      	ldr	r3, [r7, #0]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f003 0310 	and.w	r3, r3, #16
 800274e:	2b10      	cmp	r3, #16
 8002750:	bf0c      	ite	eq
 8002752:	2301      	moveq	r3, #1
 8002754:	2300      	movne	r3, #0
 8002756:	b2db      	uxtb	r3, r3
 8002758:	2b00      	cmp	r3, #0
 800275a:	d00a      	beq.n	8002772 <_Z14update_encoderP16encoder_instanceP17TIM_HandleTypeDef+0xc2>
			{
				encoder_value->velocity = temp_counter - encoder_value->last_counter_value;
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	b29a      	uxth	r2, r3
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	685b      	ldr	r3, [r3, #4]
 8002764:	b29b      	uxth	r3, r3
 8002766:	1ad3      	subs	r3, r2, r3
 8002768:	b29b      	uxth	r3, r3
 800276a:	b21a      	sxth	r2, r3
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	801a      	strh	r2, [r3, #0]
 8002770:	e00f      	b.n	8002792 <_Z14update_encoderP16encoder_instanceP17TIM_HandleTypeDef+0xe2>
			}
			else
			{
				encoder_value->velocity = temp_counter + (__HAL_TIM_GET_AUTORELOAD(htim) - encoder_value->last_counter_value);
 8002772:	683b      	ldr	r3, [r7, #0]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002778:	b29a      	uxth	r2, r3
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	685b      	ldr	r3, [r3, #4]
 800277e:	b29b      	uxth	r3, r3
 8002780:	1ad3      	subs	r3, r2, r3
 8002782:	b29a      	uxth	r2, r3
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	b29b      	uxth	r3, r3
 8002788:	4413      	add	r3, r2
 800278a:	b29b      	uxth	r3, r3
 800278c:	b21a      	sxth	r2, r3
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	801a      	strh	r2, [r3, #0]
			}
		}
	}
	//encoder_value->rpm = ((float) (encoder_value->velocity) / ENCODER_TASK_TIMESTEP) / 2 * 1000.0f * AB_ROT_PER_PULSE * GEAR_RATIO * 60;
	encoder_value->last_counter_value = temp_counter;
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	68fa      	ldr	r2, [r7, #12]
 8002796:	605a      	str	r2, [r3, #4]
}
 8002798:	bf00      	nop
 800279a:	3714      	adds	r7, #20
 800279c:	46bd      	mov	sp, r7
 800279e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a2:	4770      	bx	lr
 80027a4:	2000018c 	.word	0x2000018c

080027a8 <_Z12Encoder_TaskPv>:

void Encoder_Task(void * argument)
{
 80027a8:	b580      	push	{r7, lr}
 80027aa:	b086      	sub	sp, #24
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	6078      	str	r0, [r7, #4]
	// measure velocity, position
	int16_t velocity_values[5] = {0};
 80027b0:	f107 030c 	add.w	r3, r7, #12
 80027b4:	2200      	movs	r2, #0
 80027b6:	601a      	str	r2, [r3, #0]
 80027b8:	605a      	str	r2, [r3, #4]
 80027ba:	811a      	strh	r2, [r3, #8]
	uint8_t index = 0;
 80027bc:	2300      	movs	r3, #0
 80027be:	75fb      	strb	r3, [r7, #23]
	uint8_t i;

	TickType_t xLastWakeTime;
	xLastWakeTime = xTaskGetTickCount();
 80027c0:	f01d fa6e 	bl	801fca0 <xTaskGetTickCount>
 80027c4:	4603      	mov	r3, r0
 80027c6:	60bb      	str	r3, [r7, #8]
	for(;;)
	{
		update_encoder(&enc_instance_mot, &htim3);
 80027c8:	491e      	ldr	r1, [pc, #120]	; (8002844 <_Z12Encoder_TaskPv+0x9c>)
 80027ca:	481f      	ldr	r0, [pc, #124]	; (8002848 <_Z12Encoder_TaskPv+0xa0>)
 80027cc:	f7ff ff70 	bl	80026b0 <_Z14update_encoderP16encoder_instanceP17TIM_HandleTypeDef>
		velocity_values[index++] = enc_instance_mot.velocity;
 80027d0:	4b1d      	ldr	r3, [pc, #116]	; (8002848 <_Z12Encoder_TaskPv+0xa0>)
 80027d2:	f9b3 2000 	ldrsh.w	r2, [r3]
 80027d6:	7dfb      	ldrb	r3, [r7, #23]
 80027d8:	1c59      	adds	r1, r3, #1
 80027da:	75f9      	strb	r1, [r7, #23]
 80027dc:	005b      	lsls	r3, r3, #1
 80027de:	3318      	adds	r3, #24
 80027e0:	443b      	add	r3, r7
 80027e2:	f823 2c0c 	strh.w	r2, [r3, #-12]

		if(index == 5)
 80027e6:	7dfb      	ldrb	r3, [r7, #23]
 80027e8:	2b05      	cmp	r3, #5
 80027ea:	d101      	bne.n	80027f0 <_Z12Encoder_TaskPv+0x48>
		{
			index = 0;
 80027ec:	2300      	movs	r3, #0
 80027ee:	75fb      	strb	r3, [r7, #23]
		}

		enc_instance_mot.rpm = 0.0f;
 80027f0:	4b15      	ldr	r3, [pc, #84]	; (8002848 <_Z12Encoder_TaskPv+0xa0>)
 80027f2:	f04f 0200 	mov.w	r2, #0
 80027f6:	609a      	str	r2, [r3, #8]
		for(i = 0 ; i < 5; ++i)
 80027f8:	2300      	movs	r3, #0
 80027fa:	75bb      	strb	r3, [r7, #22]
 80027fc:	e018      	b.n	8002830 <_Z12Encoder_TaskPv+0x88>
		{
			enc_instance_mot.rpm += ((float)(velocity_values[i])) / 5.0f;
 80027fe:	4b12      	ldr	r3, [pc, #72]	; (8002848 <_Z12Encoder_TaskPv+0xa0>)
 8002800:	ed93 7a02 	vldr	s14, [r3, #8]
 8002804:	7dbb      	ldrb	r3, [r7, #22]
 8002806:	005b      	lsls	r3, r3, #1
 8002808:	3318      	adds	r3, #24
 800280a:	443b      	add	r3, r7
 800280c:	f933 3c0c 	ldrsh.w	r3, [r3, #-12]
 8002810:	ee07 3a90 	vmov	s15, r3
 8002814:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002818:	eeb1 6a04 	vmov.f32	s12, #20	; 0x40a00000  5.0
 800281c:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002820:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002824:	4b08      	ldr	r3, [pc, #32]	; (8002848 <_Z12Encoder_TaskPv+0xa0>)
 8002826:	edc3 7a02 	vstr	s15, [r3, #8]
		for(i = 0 ; i < 5; ++i)
 800282a:	7dbb      	ldrb	r3, [r7, #22]
 800282c:	3301      	adds	r3, #1
 800282e:	75bb      	strb	r3, [r7, #22]
 8002830:	7dbb      	ldrb	r3, [r7, #22]
 8002832:	2b04      	cmp	r3, #4
 8002834:	d9e3      	bls.n	80027fe <_Z12Encoder_TaskPv+0x56>
		}

		vTaskDelayUntil(&xLastWakeTime, 1u);
 8002836:	f107 0308 	add.w	r3, r7, #8
 800283a:	2101      	movs	r1, #1
 800283c:	4618      	mov	r0, r3
 800283e:	f01d f8bb 	bl	801f9b8 <vTaskDelayUntil>
		update_encoder(&enc_instance_mot, &htim3);
 8002842:	e7c1      	b.n	80027c8 <_Z12Encoder_TaskPv+0x20>
 8002844:	20000b74 	.word	0x20000b74
 8002848:	20000180 	.word	0x20000180

0800284c <_Z12CalculateRPMv>:
	}
}

float CalculateRPM()
{
 800284c:	b480      	push	{r7}
 800284e:	b083      	sub	sp, #12
 8002850:	af00      	add	r7, sp, #0
	uint8_t i;
	static uint8_t index = 0u;;
	static float rpm_averaging_array[5];
	float averaged_rpm = 0.0f;
 8002852:	f04f 0300 	mov.w	r3, #0
 8002856:	603b      	str	r3, [r7, #0]
	rpm_averaging_array[index++] = enc_instance_mot.rpm;
 8002858:	4b20      	ldr	r3, [pc, #128]	; (80028dc <_Z12CalculateRPMv+0x90>)
 800285a:	689a      	ldr	r2, [r3, #8]
 800285c:	4b20      	ldr	r3, [pc, #128]	; (80028e0 <_Z12CalculateRPMv+0x94>)
 800285e:	781b      	ldrb	r3, [r3, #0]
 8002860:	1c59      	adds	r1, r3, #1
 8002862:	b2c8      	uxtb	r0, r1
 8002864:	491e      	ldr	r1, [pc, #120]	; (80028e0 <_Z12CalculateRPMv+0x94>)
 8002866:	7008      	strb	r0, [r1, #0]
 8002868:	491e      	ldr	r1, [pc, #120]	; (80028e4 <_Z12CalculateRPMv+0x98>)
 800286a:	009b      	lsls	r3, r3, #2
 800286c:	440b      	add	r3, r1
 800286e:	601a      	str	r2, [r3, #0]

	if(index == 5)
 8002870:	4b1b      	ldr	r3, [pc, #108]	; (80028e0 <_Z12CalculateRPMv+0x94>)
 8002872:	781b      	ldrb	r3, [r3, #0]
 8002874:	2b05      	cmp	r3, #5
 8002876:	d102      	bne.n	800287e <_Z12CalculateRPMv+0x32>
	{
		index = 0;
 8002878:	4b19      	ldr	r3, [pc, #100]	; (80028e0 <_Z12CalculateRPMv+0x94>)
 800287a:	2200      	movs	r2, #0
 800287c:	701a      	strb	r2, [r3, #0]
	}

	averaged_rpm = 0.0f;
 800287e:	f04f 0300 	mov.w	r3, #0
 8002882:	603b      	str	r3, [r7, #0]
	for(i = 0 ; i < 5; ++i)
 8002884:	2300      	movs	r3, #0
 8002886:	71fb      	strb	r3, [r7, #7]
 8002888:	e012      	b.n	80028b0 <_Z12CalculateRPMv+0x64>
	{
		averaged_rpm += rpm_averaging_array[i] / 5.0f;
 800288a:	79fb      	ldrb	r3, [r7, #7]
 800288c:	4a15      	ldr	r2, [pc, #84]	; (80028e4 <_Z12CalculateRPMv+0x98>)
 800288e:	009b      	lsls	r3, r3, #2
 8002890:	4413      	add	r3, r2
 8002892:	ed93 7a00 	vldr	s14, [r3]
 8002896:	eef1 6a04 	vmov.f32	s13, #20	; 0x40a00000  5.0
 800289a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800289e:	ed97 7a00 	vldr	s14, [r7]
 80028a2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80028a6:	edc7 7a00 	vstr	s15, [r7]
	for(i = 0 ; i < 5; ++i)
 80028aa:	79fb      	ldrb	r3, [r7, #7]
 80028ac:	3301      	adds	r3, #1
 80028ae:	71fb      	strb	r3, [r7, #7]
 80028b0:	79fb      	ldrb	r3, [r7, #7]
 80028b2:	2b04      	cmp	r3, #4
 80028b4:	d9e9      	bls.n	800288a <_Z12CalculateRPMv+0x3e>
	}

	averaged_rpm *= -1.36f;
 80028b6:	edd7 7a00 	vldr	s15, [r7]
 80028ba:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 80028e8 <_Z12CalculateRPMv+0x9c>
 80028be:	ee67 7a87 	vmul.f32	s15, s15, s14
 80028c2:	edc7 7a00 	vstr	s15, [r7]

	return averaged_rpm;
 80028c6:	683b      	ldr	r3, [r7, #0]
 80028c8:	ee07 3a90 	vmov	s15, r3
}
 80028cc:	eeb0 0a67 	vmov.f32	s0, s15
 80028d0:	370c      	adds	r7, #12
 80028d2:	46bd      	mov	sp, r7
 80028d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d8:	4770      	bx	lr
 80028da:	bf00      	nop
 80028dc:	20000180 	.word	0x20000180
 80028e0:	2000018d 	.word	0x2000018d
 80028e4:	20000190 	.word	0x20000190
 80028e8:	bfae147b 	.word	0xbfae147b

080028ec <_Z15readByteFromIMUh>:
extern I2C_HandleTypeDef hi2c1;
uint8_t IMU_initialized = 0u;
IMU_signals_s imu;

uint8_t readByteFromIMU(uint8_t address)
{
 80028ec:	b580      	push	{r7, lr}
 80028ee:	b086      	sub	sp, #24
 80028f0:	af02      	add	r7, sp, #8
 80028f2:	4603      	mov	r3, r0
 80028f4:	71fb      	strb	r3, [r7, #7]
	uint8_t ret = 0u;
 80028f6:	2300      	movs	r3, #0
 80028f8:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Master_Transmit(&hi2c1, IMU_I2C_WRITE_ADDRESS, &address, 1, 100);
 80028fa:	1dfa      	adds	r2, r7, #7
 80028fc:	2364      	movs	r3, #100	; 0x64
 80028fe:	9300      	str	r3, [sp, #0]
 8002900:	2301      	movs	r3, #1
 8002902:	21d6      	movs	r1, #214	; 0xd6
 8002904:	4808      	ldr	r0, [pc, #32]	; (8002928 <_Z15readByteFromIMUh+0x3c>)
 8002906:	f014 f941 	bl	8016b8c <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c1, IMU_I2C_READ_ADDRESS, &ret, 1, 100);
 800290a:	f107 020f 	add.w	r2, r7, #15
 800290e:	2364      	movs	r3, #100	; 0x64
 8002910:	9300      	str	r3, [sp, #0]
 8002912:	2301      	movs	r3, #1
 8002914:	21d7      	movs	r1, #215	; 0xd7
 8002916:	4804      	ldr	r0, [pc, #16]	; (8002928 <_Z15readByteFromIMUh+0x3c>)
 8002918:	f014 fa2c 	bl	8016d74 <HAL_I2C_Master_Receive>
	return ret;
 800291c:	7bfb      	ldrb	r3, [r7, #15]
}
 800291e:	4618      	mov	r0, r3
 8002920:	3710      	adds	r7, #16
 8002922:	46bd      	mov	sp, r7
 8002924:	bd80      	pop	{r7, pc}
 8002926:	bf00      	nop
 8002928:	200007c4 	.word	0x200007c4

0800292c <_Z8IMU_Taskv>:
uint8_t test_data[6] = {0u};

void IMU_Task()
{
 800292c:	b580      	push	{r7, lr}
 800292e:	b086      	sub	sp, #24
 8002930:	af02      	add	r7, sp, #8
	if(IMU_initialized == 0u)
 8002932:	4b6f      	ldr	r3, [pc, #444]	; (8002af0 <_Z8IMU_Taskv+0x1c4>)
 8002934:	781b      	ldrb	r3, [r3, #0]
 8002936:	2b00      	cmp	r3, #0
 8002938:	d13f      	bne.n	80029ba <_Z8IMU_Taskv+0x8e>
	{
		uint8_t whoami = 0u;
 800293a:	2300      	movs	r3, #0
 800293c:	72bb      	strb	r3, [r7, #10]
		uint8_t whoami_reg = WHO_AM_I_ADDR;
 800293e:	230f      	movs	r3, #15
 8002940:	727b      	strb	r3, [r7, #9]
		HAL_I2C_Master_Transmit(&hi2c1, IMU_I2C_WRITE_ADDRESS, &whoami_reg, 1, 100);
 8002942:	f107 0209 	add.w	r2, r7, #9
 8002946:	2364      	movs	r3, #100	; 0x64
 8002948:	9300      	str	r3, [sp, #0]
 800294a:	2301      	movs	r3, #1
 800294c:	21d6      	movs	r1, #214	; 0xd6
 800294e:	4869      	ldr	r0, [pc, #420]	; (8002af4 <_Z8IMU_Taskv+0x1c8>)
 8002950:	f014 f91c 	bl	8016b8c <HAL_I2C_Master_Transmit>
		HAL_I2C_Master_Receive(&hi2c1, IMU_I2C_READ_ADDRESS, &whoami, 1, 100);
 8002954:	f107 020a 	add.w	r2, r7, #10
 8002958:	2364      	movs	r3, #100	; 0x64
 800295a:	9300      	str	r3, [sp, #0]
 800295c:	2301      	movs	r3, #1
 800295e:	21d7      	movs	r1, #215	; 0xd7
 8002960:	4864      	ldr	r0, [pc, #400]	; (8002af4 <_Z8IMU_Taskv+0x1c8>)
 8002962:	f014 fa07 	bl	8016d74 <HAL_I2C_Master_Receive>
		if(whoami != 0x6A)
 8002966:	7abb      	ldrb	r3, [r7, #10]
 8002968:	2b6a      	cmp	r3, #106	; 0x6a
 800296a:	f040 80bd 	bne.w	8002ae8 <_Z8IMU_Taskv+0x1bc>
		{
			return;
		}

		uint8_t pData[2] = {CTRL1_XL_ADDR, 0x60};
 800296e:	f246 0310 	movw	r3, #24592	; 0x6010
 8002972:	80bb      	strh	r3, [r7, #4]
		//HAL_I2C_Master_Transmit(&hi2c1, IMU_I2C_WRITE_ADDRESS, pData, 2, 100);

		pData[0] = CTRL2_G_ADDR;
 8002974:	2311      	movs	r3, #17
 8002976:	713b      	strb	r3, [r7, #4]
		HAL_I2C_Master_Transmit(&hi2c1, IMU_I2C_WRITE_ADDRESS, pData, 2, 100);
 8002978:	1d3a      	adds	r2, r7, #4
 800297a:	2364      	movs	r3, #100	; 0x64
 800297c:	9300      	str	r3, [sp, #0]
 800297e:	2302      	movs	r3, #2
 8002980:	21d6      	movs	r1, #214	; 0xd6
 8002982:	485c      	ldr	r0, [pc, #368]	; (8002af4 <_Z8IMU_Taskv+0x1c8>)
 8002984:	f014 f902 	bl	8016b8c <HAL_I2C_Master_Transmit>

		uint8_t ctrl3c = readByteFromIMU(0x12);
 8002988:	2012      	movs	r0, #18
 800298a:	f7ff ffaf 	bl	80028ec <_Z15readByteFromIMUh>
 800298e:	4603      	mov	r3, r0
 8002990:	72fb      	strb	r3, [r7, #11]
		ctrl3c = ctrl3c & (~0x04);
 8002992:	7afb      	ldrb	r3, [r7, #11]
 8002994:	f023 0304 	bic.w	r3, r3, #4
 8002998:	72fb      	strb	r3, [r7, #11]
		pData[0] = 0x12;
 800299a:	2312      	movs	r3, #18
 800299c:	713b      	strb	r3, [r7, #4]
		pData[1] = ctrl3c;
 800299e:	7afb      	ldrb	r3, [r7, #11]
 80029a0:	717b      	strb	r3, [r7, #5]
		HAL_I2C_Master_Transmit(&hi2c1, IMU_I2C_WRITE_ADDRESS, pData, 2, 100);
 80029a2:	1d3a      	adds	r2, r7, #4
 80029a4:	2364      	movs	r3, #100	; 0x64
 80029a6:	9300      	str	r3, [sp, #0]
 80029a8:	2302      	movs	r3, #2
 80029aa:	21d6      	movs	r1, #214	; 0xd6
 80029ac:	4851      	ldr	r0, [pc, #324]	; (8002af4 <_Z8IMU_Taskv+0x1c8>)
 80029ae:	f014 f8ed 	bl	8016b8c <HAL_I2C_Master_Transmit>

		IMU_initialized = 1u;
 80029b2:	4b4f      	ldr	r3, [pc, #316]	; (8002af0 <_Z8IMU_Taskv+0x1c4>)
 80029b4:	2201      	movs	r2, #1
 80029b6:	701a      	strb	r2, [r3, #0]
 80029b8:	e097      	b.n	8002aea <_Z8IMU_Taskv+0x1be>
	}
	else
	{
		uint8_t status = 0u;
 80029ba:	2300      	movs	r3, #0
 80029bc:	70fb      	strb	r3, [r7, #3]
		uint8_t status_reg = STATUS_REG;
 80029be:	231e      	movs	r3, #30
 80029c0:	70bb      	strb	r3, [r7, #2]
		HAL_I2C_Master_Transmit(&hi2c1, IMU_I2C_WRITE_ADDRESS, &status_reg, 1, 100);
 80029c2:	1cba      	adds	r2, r7, #2
 80029c4:	2364      	movs	r3, #100	; 0x64
 80029c6:	9300      	str	r3, [sp, #0]
 80029c8:	2301      	movs	r3, #1
 80029ca:	21d6      	movs	r1, #214	; 0xd6
 80029cc:	4849      	ldr	r0, [pc, #292]	; (8002af4 <_Z8IMU_Taskv+0x1c8>)
 80029ce:	f014 f8dd 	bl	8016b8c <HAL_I2C_Master_Transmit>
		HAL_I2C_Master_Receive(&hi2c1, IMU_I2C_READ_ADDRESS, &status, 1, 100);
 80029d2:	1cfa      	adds	r2, r7, #3
 80029d4:	2364      	movs	r3, #100	; 0x64
 80029d6:	9300      	str	r3, [sp, #0]
 80029d8:	2301      	movs	r3, #1
 80029da:	21d7      	movs	r1, #215	; 0xd7
 80029dc:	4845      	ldr	r0, [pc, #276]	; (8002af4 <_Z8IMU_Taskv+0x1c8>)
 80029de:	f014 f9c9 	bl	8016d74 <HAL_I2C_Master_Receive>

		//Accelerometer new data available
		if((status & 0x01) == 1u)
 80029e2:	78fb      	ldrb	r3, [r7, #3]
 80029e4:	f003 0301 	and.w	r3, r3, #1
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d053      	beq.n	8002a94 <_Z8IMU_Taskv+0x168>
		{
			uint8_t tmp_low, tmp_high;
			tmp_low = readByteFromIMU(OUTX_L_XL);
 80029ec:	2028      	movs	r0, #40	; 0x28
 80029ee:	f7ff ff7d 	bl	80028ec <_Z15readByteFromIMUh>
 80029f2:	4603      	mov	r3, r0
 80029f4:	73fb      	strb	r3, [r7, #15]
			tmp_high = readByteFromIMU(OUTX_H_XL);
 80029f6:	2029      	movs	r0, #41	; 0x29
 80029f8:	f7ff ff78 	bl	80028ec <_Z15readByteFromIMUh>
 80029fc:	4603      	mov	r3, r0
 80029fe:	73bb      	strb	r3, [r7, #14]
			imu.acc_x = ((int16_t)((tmp_high << 8u)| tmp_low)) * AXL_SENSITIVITY;
 8002a00:	7bbb      	ldrb	r3, [r7, #14]
 8002a02:	021b      	lsls	r3, r3, #8
 8002a04:	b21a      	sxth	r2, r3
 8002a06:	7bfb      	ldrb	r3, [r7, #15]
 8002a08:	b21b      	sxth	r3, r3
 8002a0a:	4313      	orrs	r3, r2
 8002a0c:	b21b      	sxth	r3, r3
 8002a0e:	ee07 3a90 	vmov	s15, r3
 8002a12:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002a16:	ed9f 7a38 	vldr	s14, [pc, #224]	; 8002af8 <_Z8IMU_Taskv+0x1cc>
 8002a1a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002a1e:	4b37      	ldr	r3, [pc, #220]	; (8002afc <_Z8IMU_Taskv+0x1d0>)
 8002a20:	edc3 7a00 	vstr	s15, [r3]

			tmp_low = readByteFromIMU(OUTY_L_XL);
 8002a24:	202a      	movs	r0, #42	; 0x2a
 8002a26:	f7ff ff61 	bl	80028ec <_Z15readByteFromIMUh>
 8002a2a:	4603      	mov	r3, r0
 8002a2c:	73fb      	strb	r3, [r7, #15]
			tmp_high = readByteFromIMU(OUTY_L_XL);
 8002a2e:	202a      	movs	r0, #42	; 0x2a
 8002a30:	f7ff ff5c 	bl	80028ec <_Z15readByteFromIMUh>
 8002a34:	4603      	mov	r3, r0
 8002a36:	73bb      	strb	r3, [r7, #14]
			imu.acc_y = ((int16_t)((tmp_high << 8u)| tmp_low)) * AXL_SENSITIVITY;
 8002a38:	7bbb      	ldrb	r3, [r7, #14]
 8002a3a:	021b      	lsls	r3, r3, #8
 8002a3c:	b21a      	sxth	r2, r3
 8002a3e:	7bfb      	ldrb	r3, [r7, #15]
 8002a40:	b21b      	sxth	r3, r3
 8002a42:	4313      	orrs	r3, r2
 8002a44:	b21b      	sxth	r3, r3
 8002a46:	ee07 3a90 	vmov	s15, r3
 8002a4a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002a4e:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 8002af8 <_Z8IMU_Taskv+0x1cc>
 8002a52:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002a56:	4b29      	ldr	r3, [pc, #164]	; (8002afc <_Z8IMU_Taskv+0x1d0>)
 8002a58:	edc3 7a01 	vstr	s15, [r3, #4]

			tmp_low = readByteFromIMU(OUTZ_L_XL);
 8002a5c:	202c      	movs	r0, #44	; 0x2c
 8002a5e:	f7ff ff45 	bl	80028ec <_Z15readByteFromIMUh>
 8002a62:	4603      	mov	r3, r0
 8002a64:	73fb      	strb	r3, [r7, #15]
			tmp_high = readByteFromIMU(OUTZ_L_XL);
 8002a66:	202c      	movs	r0, #44	; 0x2c
 8002a68:	f7ff ff40 	bl	80028ec <_Z15readByteFromIMUh>
 8002a6c:	4603      	mov	r3, r0
 8002a6e:	73bb      	strb	r3, [r7, #14]
			imu.acc_z = ((int16_t)((tmp_high << 8u)| tmp_low)) * AXL_SENSITIVITY;
 8002a70:	7bbb      	ldrb	r3, [r7, #14]
 8002a72:	021b      	lsls	r3, r3, #8
 8002a74:	b21a      	sxth	r2, r3
 8002a76:	7bfb      	ldrb	r3, [r7, #15]
 8002a78:	b21b      	sxth	r3, r3
 8002a7a:	4313      	orrs	r3, r2
 8002a7c:	b21b      	sxth	r3, r3
 8002a7e:	ee07 3a90 	vmov	s15, r3
 8002a82:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002a86:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8002af8 <_Z8IMU_Taskv+0x1cc>
 8002a8a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002a8e:	4b1b      	ldr	r3, [pc, #108]	; (8002afc <_Z8IMU_Taskv+0x1d0>)
 8002a90:	edc3 7a02 	vstr	s15, [r3, #8]

		}
		//Gyroscope new data available
		if((status & 0x02) == 2u)
 8002a94:	78fb      	ldrb	r3, [r7, #3]
 8002a96:	f003 0302 	and.w	r3, r3, #2
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d025      	beq.n	8002aea <_Z8IMU_Taskv+0x1be>
		{
			uint8_t tmp_low, tmp_high;

			tmp_low = readByteFromIMU(OUTZ_L_G);
 8002a9e:	2026      	movs	r0, #38	; 0x26
 8002aa0:	f7ff ff24 	bl	80028ec <_Z15readByteFromIMUh>
 8002aa4:	4603      	mov	r3, r0
 8002aa6:	737b      	strb	r3, [r7, #13]
			tmp_high = readByteFromIMU(OUTZ_H_G);
 8002aa8:	2027      	movs	r0, #39	; 0x27
 8002aaa:	f7ff ff1f 	bl	80028ec <_Z15readByteFromIMUh>
 8002aae:	4603      	mov	r3, r0
 8002ab0:	733b      	strb	r3, [r7, #12]
			imu.yaw = ((int16_t)((tmp_high << 8u)| tmp_low)) * G_SENSITIVITY / 1000.0f * 0.017453f;
 8002ab2:	7b3b      	ldrb	r3, [r7, #12]
 8002ab4:	021b      	lsls	r3, r3, #8
 8002ab6:	b21a      	sxth	r2, r3
 8002ab8:	7b7b      	ldrb	r3, [r7, #13]
 8002aba:	b21b      	sxth	r3, r3
 8002abc:	4313      	orrs	r3, r2
 8002abe:	b21b      	sxth	r3, r3
 8002ac0:	ee07 3a90 	vmov	s15, r3
 8002ac4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002ac8:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 8002b00 <_Z8IMU_Taskv+0x1d4>
 8002acc:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002ad0:	eddf 6a0c 	vldr	s13, [pc, #48]	; 8002b04 <_Z8IMU_Taskv+0x1d8>
 8002ad4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002ad8:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 8002b08 <_Z8IMU_Taskv+0x1dc>
 8002adc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002ae0:	4b06      	ldr	r3, [pc, #24]	; (8002afc <_Z8IMU_Taskv+0x1d0>)
 8002ae2:	edc3 7a03 	vstr	s15, [r3, #12]
 8002ae6:	e000      	b.n	8002aea <_Z8IMU_Taskv+0x1be>
			return;
 8002ae8:	bf00      	nop
			//tmp_high = readByteFromIMU(OUTY_H_G);
			//imu.pitch = ((int16_t)((tmp_high << 8u)| tmp_low)) * G_SENSITIVITY;

		}
	}
}
 8002aea:	3710      	adds	r7, #16
 8002aec:	46bd      	mov	sp, r7
 8002aee:	bd80      	pop	{r7, pc}
 8002af0:	200001a4 	.word	0x200001a4
 8002af4:	200007c4 	.word	0x200007c4
 8002af8:	3d79db23 	.word	0x3d79db23
 8002afc:	200001a8 	.word	0x200001a8
 8002b00:	407423e2 	.word	0x407423e2
 8002b04:	447a0000 	.word	0x447a0000
 8002b08:	3c8ef998 	.word	0x3c8ef998

08002b0c <_ZSt21is_constant_evaluatedv>:
#define __cpp_lib_is_constant_evaluated 201811L

  /// Returns true only when called during constant evaluation.
  constexpr inline bool
  is_constant_evaluated() noexcept
  { return __builtin_is_constant_evaluated(); }
 8002b0c:	b480      	push	{r7}
 8002b0e:	af00      	add	r7, sp, #0
 8002b10:	2300      	movs	r3, #0
 8002b12:	4618      	mov	r0, r3
 8002b14:	46bd      	mov	sp, r7
 8002b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b1a:	4770      	bx	lr

08002b1c <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
_GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 8002b1c:	b480      	push	{r7}
 8002b1e:	b083      	sub	sp, #12
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	6078      	str	r0, [r7, #4]
 8002b24:	6039      	str	r1, [r7, #0]
 8002b26:	683b      	ldr	r3, [r7, #0]
 8002b28:	4618      	mov	r0, r3
 8002b2a:	370c      	adds	r7, #12
 8002b2c:	46bd      	mov	sp, r7
 8002b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b32:	4770      	bx	lr

08002b34 <_ZNSt12_Vector_baseIfSaIfEE12_Vector_implD1Ev>:
	  _M_copy_data(__x);
	  __x._M_copy_data(__tmp);
	}
      };

      struct _Vector_impl
 8002b34:	b580      	push	{r7, lr}
 8002b36:	b082      	sub	sp, #8
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	6078      	str	r0, [r7, #4]
 8002b3c:	6878      	ldr	r0, [r7, #4]
 8002b3e:	f000 fd0f 	bl	8003560 <_ZNSaIfED1Ev>
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	4618      	mov	r0, r3
 8002b46:	3708      	adds	r7, #8
 8002b48:	46bd      	mov	sp, r7
 8002b4a:	bd80      	pop	{r7, pc}

08002b4c <_ZNSt12_Vector_baseIfSaIfEEC1Ev>:
      allocator_type
      get_allocator() const _GLIBCXX_NOEXCEPT
      { return allocator_type(_M_get_Tp_allocator()); }

#if __cplusplus >= 201103L
      _Vector_base() = default;
 8002b4c:	b580      	push	{r7, lr}
 8002b4e:	b082      	sub	sp, #8
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	6078      	str	r0, [r7, #4]
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	4618      	mov	r0, r3
 8002b58:	f000 fcf2 	bl	8003540 <_ZNSt12_Vector_baseIfSaIfEE12_Vector_implC1Ev>
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	4618      	mov	r0, r3
 8002b60:	3708      	adds	r7, #8
 8002b62:	46bd      	mov	sp, r7
 8002b64:	bd80      	pop	{r7, pc}

08002b66 <_ZNSt6vectorIfSaIfEEC1Ev>:

      /**
       *  @brief  Creates a %vector with no elements.
       */
#if __cplusplus >= 201103L
      vector() = default;
 8002b66:	b580      	push	{r7, lr}
 8002b68:	b082      	sub	sp, #8
 8002b6a:	af00      	add	r7, sp, #0
 8002b6c:	6078      	str	r0, [r7, #4]
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	4618      	mov	r0, r3
 8002b72:	f7ff ffeb 	bl	8002b4c <_ZNSt12_Vector_baseIfSaIfEEC1Ev>
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	4618      	mov	r0, r3
 8002b7a:	3708      	adds	r7, #8
 8002b7c:	46bd      	mov	sp, r7
 8002b7e:	bd80      	pop	{r7, pc}

08002b80 <_Z15TurnOnInfraLEDsPP12GPIO_TypeDefPtS1_S2_h>:
uint16_t infra_adc_values_test[32];
uint8_t infra_adc_data[32*2];

/* Turns on every #num and #num + 4 Infraled on every led driving IC.*/
void TurnOnInfraLEDs(GPIO_TypeDef* LE_port[2], uint16_t LE_pin[2],GPIO_TypeDef* OE_port[2], uint16_t OE_pin[2], uint8_t num)
{
 8002b80:	b580      	push	{r7, lr}
 8002b82:	b086      	sub	sp, #24
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	60f8      	str	r0, [r7, #12]
 8002b88:	60b9      	str	r1, [r7, #8]
 8002b8a:	607a      	str	r2, [r7, #4]
 8002b8c:	603b      	str	r3, [r7, #0]
	uint8_t i;
	uint8_t data = 0x11 << num;
 8002b8e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002b92:	2211      	movs	r2, #17
 8002b94:	fa02 f303 	lsl.w	r3, r2, r3
 8002b98:	b2db      	uxtb	r3, r3
 8002b9a:	75bb      	strb	r3, [r7, #22]

	for(i = 0; i < 4; ++i)
 8002b9c:	2300      	movs	r3, #0
 8002b9e:	75fb      	strb	r3, [r7, #23]
 8002ba0:	e00a      	b.n	8002bb8 <_Z15TurnOnInfraLEDsPP12GPIO_TypeDefPtS1_S2_h+0x38>
	{
		HAL_SPI_Transmit(&hspi2, &data, 1, HAL_MAX_DELAY);
 8002ba2:	f107 0116 	add.w	r1, r7, #22
 8002ba6:	f04f 33ff 	mov.w	r3, #4294967295
 8002baa:	2201      	movs	r2, #1
 8002bac:	4821      	ldr	r0, [pc, #132]	; (8002c34 <_Z15TurnOnInfraLEDsPP12GPIO_TypeDefPtS1_S2_h+0xb4>)
 8002bae:	f016 fdc2 	bl	8019736 <HAL_SPI_Transmit>
	for(i = 0; i < 4; ++i)
 8002bb2:	7dfb      	ldrb	r3, [r7, #23]
 8002bb4:	3301      	adds	r3, #1
 8002bb6:	75fb      	strb	r3, [r7, #23]
 8002bb8:	7dfb      	ldrb	r3, [r7, #23]
 8002bba:	2b03      	cmp	r3, #3
 8002bbc:	d9f1      	bls.n	8002ba2 <_Z15TurnOnInfraLEDsPP12GPIO_TypeDefPtS1_S2_h+0x22>
	}
	//TODO: maybe add a delay to let the latch in
	HAL_GPIO_WritePin(LE_port[0], LE_pin[0], GPIO_PIN_SET);
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	6818      	ldr	r0, [r3, #0]
 8002bc2:	68bb      	ldr	r3, [r7, #8]
 8002bc4:	881b      	ldrh	r3, [r3, #0]
 8002bc6:	2201      	movs	r2, #1
 8002bc8:	4619      	mov	r1, r3
 8002bca:	f013 ff1d 	bl	8016a08 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LE_port[1], LE_pin[1], GPIO_PIN_SET);
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	3304      	adds	r3, #4
 8002bd2:	6818      	ldr	r0, [r3, #0]
 8002bd4:	68bb      	ldr	r3, [r7, #8]
 8002bd6:	3302      	adds	r3, #2
 8002bd8:	881b      	ldrh	r3, [r3, #0]
 8002bda:	2201      	movs	r2, #1
 8002bdc:	4619      	mov	r1, r3
 8002bde:	f013 ff13 	bl	8016a08 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LE_port[0], LE_pin[0], GPIO_PIN_RESET);
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	6818      	ldr	r0, [r3, #0]
 8002be6:	68bb      	ldr	r3, [r7, #8]
 8002be8:	881b      	ldrh	r3, [r3, #0]
 8002bea:	2200      	movs	r2, #0
 8002bec:	4619      	mov	r1, r3
 8002bee:	f013 ff0b 	bl	8016a08 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LE_port[1], LE_pin[1], GPIO_PIN_RESET);
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	3304      	adds	r3, #4
 8002bf6:	6818      	ldr	r0, [r3, #0]
 8002bf8:	68bb      	ldr	r3, [r7, #8]
 8002bfa:	3302      	adds	r3, #2
 8002bfc:	881b      	ldrh	r3, [r3, #0]
 8002bfe:	2200      	movs	r2, #0
 8002c00:	4619      	mov	r1, r3
 8002c02:	f013 ff01 	bl	8016a08 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(OE_port[0], OE_pin[0], GPIO_PIN_RESET);
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	6818      	ldr	r0, [r3, #0]
 8002c0a:	683b      	ldr	r3, [r7, #0]
 8002c0c:	881b      	ldrh	r3, [r3, #0]
 8002c0e:	2200      	movs	r2, #0
 8002c10:	4619      	mov	r1, r3
 8002c12:	f013 fef9 	bl	8016a08 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(OE_port[1], OE_pin[1], GPIO_PIN_RESET);
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	3304      	adds	r3, #4
 8002c1a:	6818      	ldr	r0, [r3, #0]
 8002c1c:	683b      	ldr	r3, [r7, #0]
 8002c1e:	3302      	adds	r3, #2
 8002c20:	881b      	ldrh	r3, [r3, #0]
 8002c22:	2200      	movs	r2, #0
 8002c24:	4619      	mov	r1, r3
 8002c26:	f013 feef 	bl	8016a08 <HAL_GPIO_WritePin>

}
 8002c2a:	bf00      	nop
 8002c2c:	3718      	adds	r7, #24
 8002c2e:	46bd      	mov	sp, r7
 8002c30:	bd80      	pop	{r7, pc}
 8002c32:	bf00      	nop
 8002c34:	20000a60 	.word	0x20000a60

08002c38 <_Z10TurnOnLEDsPP12GPIO_TypeDefPtS1_S2_mm>:

void TurnOnLEDs(GPIO_TypeDef *LE_port[2], uint16_t LE_pin[2], GPIO_TypeDef *OE_port[2], uint16_t OE_pin[2], uint32_t front, uint32_t rear)
{
 8002c38:	b580      	push	{r7, lr}
 8002c3a:	b086      	sub	sp, #24
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	60f8      	str	r0, [r7, #12]
 8002c40:	60b9      	str	r1, [r7, #8]
 8002c42:	607a      	str	r2, [r7, #4]
 8002c44:	603b      	str	r3, [r7, #0]
	HAL_GPIO_WritePin(OE_port[0], OE_pin[0], GPIO_PIN_SET);
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	6818      	ldr	r0, [r3, #0]
 8002c4a:	683b      	ldr	r3, [r7, #0]
 8002c4c:	881b      	ldrh	r3, [r3, #0]
 8002c4e:	2201      	movs	r2, #1
 8002c50:	4619      	mov	r1, r3
 8002c52:	f013 fed9 	bl	8016a08 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(OE_port[1], OE_pin[1], GPIO_PIN_SET);
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	3304      	adds	r3, #4
 8002c5a:	6818      	ldr	r0, [r3, #0]
 8002c5c:	683b      	ldr	r3, [r7, #0]
 8002c5e:	3302      	adds	r3, #2
 8002c60:	881b      	ldrh	r3, [r3, #0]
 8002c62:	2201      	movs	r2, #1
 8002c64:	4619      	mov	r1, r3
 8002c66:	f013 fecf 	bl	8016a08 <HAL_GPIO_WritePin>
	uint8_t i;
	for (i = 0; i < 4; ++i)
 8002c6a:	2300      	movs	r3, #0
 8002c6c:	75fb      	strb	r3, [r7, #23]
 8002c6e:	e011      	b.n	8002c94 <_Z10TurnOnLEDsPP12GPIO_TypeDefPtS1_S2_mm+0x5c>
	{
		uint8_t data_front = (front >> (8u*i)) & 0xFF;
 8002c70:	7dfb      	ldrb	r3, [r7, #23]
 8002c72:	00db      	lsls	r3, r3, #3
 8002c74:	6a3a      	ldr	r2, [r7, #32]
 8002c76:	fa22 f303 	lsr.w	r3, r2, r3
 8002c7a:	b2db      	uxtb	r3, r3
 8002c7c:	75bb      	strb	r3, [r7, #22]
		HAL_SPI_Transmit(&hspi2, &data_front, 1, HAL_MAX_DELAY);
 8002c7e:	f107 0116 	add.w	r1, r7, #22
 8002c82:	f04f 33ff 	mov.w	r3, #4294967295
 8002c86:	2201      	movs	r2, #1
 8002c88:	482d      	ldr	r0, [pc, #180]	; (8002d40 <_Z10TurnOnLEDsPP12GPIO_TypeDefPtS1_S2_mm+0x108>)
 8002c8a:	f016 fd54 	bl	8019736 <HAL_SPI_Transmit>
	for (i = 0; i < 4; ++i)
 8002c8e:	7dfb      	ldrb	r3, [r7, #23]
 8002c90:	3301      	adds	r3, #1
 8002c92:	75fb      	strb	r3, [r7, #23]
 8002c94:	7dfb      	ldrb	r3, [r7, #23]
 8002c96:	2b03      	cmp	r3, #3
 8002c98:	d9ea      	bls.n	8002c70 <_Z10TurnOnLEDsPP12GPIO_TypeDefPtS1_S2_mm+0x38>
	}
	//TODO: maybe add a delay to let the latch in
	HAL_GPIO_WritePin(LE_port[0], LE_pin[0], GPIO_PIN_SET);
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	6818      	ldr	r0, [r3, #0]
 8002c9e:	68bb      	ldr	r3, [r7, #8]
 8002ca0:	881b      	ldrh	r3, [r3, #0]
 8002ca2:	2201      	movs	r2, #1
 8002ca4:	4619      	mov	r1, r3
 8002ca6:	f013 feaf 	bl	8016a08 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LE_port[0], LE_pin[0], GPIO_PIN_RESET);
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	6818      	ldr	r0, [r3, #0]
 8002cae:	68bb      	ldr	r3, [r7, #8]
 8002cb0:	881b      	ldrh	r3, [r3, #0]
 8002cb2:	2200      	movs	r2, #0
 8002cb4:	4619      	mov	r1, r3
 8002cb6:	f013 fea7 	bl	8016a08 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(OE_port[0], OE_pin[0], GPIO_PIN_RESET);
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	6818      	ldr	r0, [r3, #0]
 8002cbe:	683b      	ldr	r3, [r7, #0]
 8002cc0:	881b      	ldrh	r3, [r3, #0]
 8002cc2:	2200      	movs	r2, #0
 8002cc4:	4619      	mov	r1, r3
 8002cc6:	f013 fe9f 	bl	8016a08 <HAL_GPIO_WritePin>
	for (i = 0; i < 4; ++i)
 8002cca:	2300      	movs	r3, #0
 8002ccc:	75fb      	strb	r3, [r7, #23]
 8002cce:	e011      	b.n	8002cf4 <_Z10TurnOnLEDsPP12GPIO_TypeDefPtS1_S2_mm+0xbc>
	{
		uint8_t data_rear = (rear >> (8u*i)) & 0xFF;
 8002cd0:	7dfb      	ldrb	r3, [r7, #23]
 8002cd2:	00db      	lsls	r3, r3, #3
 8002cd4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002cd6:	fa22 f303 	lsr.w	r3, r2, r3
 8002cda:	b2db      	uxtb	r3, r3
 8002cdc:	757b      	strb	r3, [r7, #21]
		HAL_SPI_Transmit(&hspi2, &data_rear, 1, HAL_MAX_DELAY);
 8002cde:	f107 0115 	add.w	r1, r7, #21
 8002ce2:	f04f 33ff 	mov.w	r3, #4294967295
 8002ce6:	2201      	movs	r2, #1
 8002ce8:	4815      	ldr	r0, [pc, #84]	; (8002d40 <_Z10TurnOnLEDsPP12GPIO_TypeDefPtS1_S2_mm+0x108>)
 8002cea:	f016 fd24 	bl	8019736 <HAL_SPI_Transmit>
	for (i = 0; i < 4; ++i)
 8002cee:	7dfb      	ldrb	r3, [r7, #23]
 8002cf0:	3301      	adds	r3, #1
 8002cf2:	75fb      	strb	r3, [r7, #23]
 8002cf4:	7dfb      	ldrb	r3, [r7, #23]
 8002cf6:	2b03      	cmp	r3, #3
 8002cf8:	d9ea      	bls.n	8002cd0 <_Z10TurnOnLEDsPP12GPIO_TypeDefPtS1_S2_mm+0x98>
	}

	//TODO: maybe add a delay to let the latch in
	HAL_GPIO_WritePin(LE_port[1], LE_pin[1], GPIO_PIN_SET);
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	3304      	adds	r3, #4
 8002cfe:	6818      	ldr	r0, [r3, #0]
 8002d00:	68bb      	ldr	r3, [r7, #8]
 8002d02:	3302      	adds	r3, #2
 8002d04:	881b      	ldrh	r3, [r3, #0]
 8002d06:	2201      	movs	r2, #1
 8002d08:	4619      	mov	r1, r3
 8002d0a:	f013 fe7d 	bl	8016a08 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LE_port[1], LE_pin[1], GPIO_PIN_RESET);
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	3304      	adds	r3, #4
 8002d12:	6818      	ldr	r0, [r3, #0]
 8002d14:	68bb      	ldr	r3, [r7, #8]
 8002d16:	3302      	adds	r3, #2
 8002d18:	881b      	ldrh	r3, [r3, #0]
 8002d1a:	2200      	movs	r2, #0
 8002d1c:	4619      	mov	r1, r3
 8002d1e:	f013 fe73 	bl	8016a08 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(OE_port[1], OE_pin[1], GPIO_PIN_RESET);
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	3304      	adds	r3, #4
 8002d26:	6818      	ldr	r0, [r3, #0]
 8002d28:	683b      	ldr	r3, [r7, #0]
 8002d2a:	3302      	adds	r3, #2
 8002d2c:	881b      	ldrh	r3, [r3, #0]
 8002d2e:	2200      	movs	r2, #0
 8002d30:	4619      	mov	r1, r3
 8002d32:	f013 fe69 	bl	8016a08 <HAL_GPIO_WritePin>
}
 8002d36:	bf00      	nop
 8002d38:	3718      	adds	r7, #24
 8002d3a:	46bd      	mov	sp, r7
 8002d3c:	bd80      	pop	{r7, pc}
 8002d3e:	bf00      	nop
 8002d40:	20000a60 	.word	0x20000a60

08002d44 <_Z16TurnOffInfraLEDsPP12GPIO_TypeDefPt>:


void TurnOffInfraLEDs(GPIO_TypeDef* OE_port[2], uint16_t OE_pin[2])
{
 8002d44:	b580      	push	{r7, lr}
 8002d46:	b082      	sub	sp, #8
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	6078      	str	r0, [r7, #4]
 8002d4c:	6039      	str	r1, [r7, #0]
	HAL_GPIO_WritePin(OE_port[0], OE_pin[0], GPIO_PIN_SET);
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	6818      	ldr	r0, [r3, #0]
 8002d52:	683b      	ldr	r3, [r7, #0]
 8002d54:	881b      	ldrh	r3, [r3, #0]
 8002d56:	2201      	movs	r2, #1
 8002d58:	4619      	mov	r1, r3
 8002d5a:	f013 fe55 	bl	8016a08 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(OE_port[1], OE_pin[1], GPIO_PIN_SET);
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	3304      	adds	r3, #4
 8002d62:	6818      	ldr	r0, [r3, #0]
 8002d64:	683b      	ldr	r3, [r7, #0]
 8002d66:	3302      	adds	r3, #2
 8002d68:	881b      	ldrh	r3, [r3, #0]
 8002d6a:	2201      	movs	r2, #1
 8002d6c:	4619      	mov	r1, r3
 8002d6e:	f013 fe4b 	bl	8016a08 <HAL_GPIO_WritePin>
}
 8002d72:	bf00      	nop
 8002d74:	3708      	adds	r7, #8
 8002d76:	46bd      	mov	sp, r7
 8002d78:	bd80      	pop	{r7, pc}
	...

08002d7c <_Z13ReadADCValuesPP12GPIO_TypeDefPthPh>:

/* Reads out from all of the 4 adc ICs on one line sensor card 2 adc values each defined by num and writes it to res */
void ReadADCValues(GPIO_TypeDef* ports[4], uint16_t pins[4], uint8_t adc_ic_index, uint8_t *res)
{
 8002d7c:	b580      	push	{r7, lr}
 8002d7e:	b086      	sub	sp, #24
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	60f8      	str	r0, [r7, #12]
 8002d84:	60b9      	str	r1, [r7, #8]
 8002d86:	603b      	str	r3, [r7, #0]
 8002d88:	4613      	mov	r3, r2
 8002d8a:	71fb      	strb	r3, [r7, #7]
	uint8_t i;
	uint8_t tmp[2] = {0, 0};
 8002d8c:	2300      	movs	r3, #0
 8002d8e:	82bb      	strh	r3, [r7, #20]
	HAL_GPIO_WritePin(ports[adc_ic_index], pins[adc_ic_index], GPIO_PIN_RESET);
 8002d90:	79fb      	ldrb	r3, [r7, #7]
 8002d92:	009b      	lsls	r3, r3, #2
 8002d94:	68fa      	ldr	r2, [r7, #12]
 8002d96:	4413      	add	r3, r2
 8002d98:	6818      	ldr	r0, [r3, #0]
 8002d9a:	79fb      	ldrb	r3, [r7, #7]
 8002d9c:	005b      	lsls	r3, r3, #1
 8002d9e:	68ba      	ldr	r2, [r7, #8]
 8002da0:	4413      	add	r3, r2
 8002da2:	881b      	ldrh	r3, [r3, #0]
 8002da4:	2200      	movs	r2, #0
 8002da6:	4619      	mov	r1, r3
 8002da8:	f013 fe2e 	bl	8016a08 <HAL_GPIO_WritePin>
	for(i = 0; i < 8; ++i)
 8002dac:	2300      	movs	r3, #0
 8002dae:	75fb      	strb	r3, [r7, #23]
 8002db0:	e019      	b.n	8002de6 <_Z13ReadADCValuesPP12GPIO_TypeDefPthPh+0x6a>
	{
		tmp[0] = i << 3u;
 8002db2:	7dfb      	ldrb	r3, [r7, #23]
 8002db4:	00db      	lsls	r3, r3, #3
 8002db6:	b2db      	uxtb	r3, r3
 8002db8:	753b      	strb	r3, [r7, #20]
		HAL_SPI_Transmit(&hspi1, tmp, 2, HAL_MAX_DELAY);
 8002dba:	f107 0114 	add.w	r1, r7, #20
 8002dbe:	f04f 33ff 	mov.w	r3, #4294967295
 8002dc2:	2202      	movs	r2, #2
 8002dc4:	4812      	ldr	r0, [pc, #72]	; (8002e10 <_Z13ReadADCValuesPP12GPIO_TypeDefPthPh+0x94>)
 8002dc6:	f016 fcb6 	bl	8019736 <HAL_SPI_Transmit>
		HAL_SPI_Receive(&hspi1, &res[i*2], 2, HAL_MAX_DELAY);
 8002dca:	7dfb      	ldrb	r3, [r7, #23]
 8002dcc:	005b      	lsls	r3, r3, #1
 8002dce:	461a      	mov	r2, r3
 8002dd0:	683b      	ldr	r3, [r7, #0]
 8002dd2:	1899      	adds	r1, r3, r2
 8002dd4:	f04f 33ff 	mov.w	r3, #4294967295
 8002dd8:	2202      	movs	r2, #2
 8002dda:	480d      	ldr	r0, [pc, #52]	; (8002e10 <_Z13ReadADCValuesPP12GPIO_TypeDefPthPh+0x94>)
 8002ddc:	f016 fe19 	bl	8019a12 <HAL_SPI_Receive>
	for(i = 0; i < 8; ++i)
 8002de0:	7dfb      	ldrb	r3, [r7, #23]
 8002de2:	3301      	adds	r3, #1
 8002de4:	75fb      	strb	r3, [r7, #23]
 8002de6:	7dfb      	ldrb	r3, [r7, #23]
 8002de8:	2b07      	cmp	r3, #7
 8002dea:	d9e2      	bls.n	8002db2 <_Z13ReadADCValuesPP12GPIO_TypeDefPthPh+0x36>
	}
	HAL_GPIO_WritePin(ports[adc_ic_index], pins[adc_ic_index], GPIO_PIN_SET);
 8002dec:	79fb      	ldrb	r3, [r7, #7]
 8002dee:	009b      	lsls	r3, r3, #2
 8002df0:	68fa      	ldr	r2, [r7, #12]
 8002df2:	4413      	add	r3, r2
 8002df4:	6818      	ldr	r0, [r3, #0]
 8002df6:	79fb      	ldrb	r3, [r7, #7]
 8002df8:	005b      	lsls	r3, r3, #1
 8002dfa:	68ba      	ldr	r2, [r7, #8]
 8002dfc:	4413      	add	r3, r2
 8002dfe:	881b      	ldrh	r3, [r3, #0]
 8002e00:	2201      	movs	r2, #1
 8002e02:	4619      	mov	r1, r3
 8002e04:	f013 fe00 	bl	8016a08 <HAL_GPIO_WritePin>

}
 8002e08:	bf00      	nop
 8002e0a:	3718      	adds	r7, #24
 8002e0c:	46bd      	mov	sp, r7
 8002e0e:	bd80      	pop	{r7, pc}
 8002e10:	200009fc 	.word	0x200009fc

08002e14 <_Z14LineSensorTaskv>:
void LineSensorTask(void)
{
 8002e14:	b580      	push	{r7, lr}
 8002e16:	b098      	sub	sp, #96	; 0x60
 8002e18:	af02      	add	r7, sp, #8


#else
	uint8_t j;
	int8_t i;
	for(i = 0; i < 4; ++i)
 8002e1a:	2300      	movs	r3, #0
 8002e1c:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
 8002e20:	e0c1      	b.n	8002fa6 <_Z14LineSensorTaskv+0x192>
	{
		TurnOnInfraLEDs(infra_le_ports, infra_le_pins, infra_oe_ports, infra_le_pins, i);
 8002e22:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 8002e26:	9300      	str	r3, [sp, #0]
 8002e28:	4b92      	ldr	r3, [pc, #584]	; (8003074 <_Z14LineSensorTaskv+0x260>)
 8002e2a:	4a93      	ldr	r2, [pc, #588]	; (8003078 <_Z14LineSensorTaskv+0x264>)
 8002e2c:	4991      	ldr	r1, [pc, #580]	; (8003074 <_Z14LineSensorTaskv+0x260>)
 8002e2e:	4893      	ldr	r0, [pc, #588]	; (800307c <_Z14LineSensorTaskv+0x268>)
 8002e30:	f7ff fea6 	bl	8002b80 <_Z15TurnOnInfraLEDsPP12GPIO_TypeDefPtS1_S2_h>

		uint32_t delay_start = __HAL_TIM_GetCounter(&htim6);
 8002e34:	4b92      	ldr	r3, [pc, #584]	; (8003080 <_Z14LineSensorTaskv+0x26c>)
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e3a:	62bb      	str	r3, [r7, #40]	; 0x28
		while((__HAL_TIM_GetCounter(&htim6) - delay_start) < INFRA_WAIT_TIME);
 8002e3c:	bf00      	nop
 8002e3e:	4b90      	ldr	r3, [pc, #576]	; (8003080 <_Z14LineSensorTaskv+0x26c>)
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002e44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e46:	1ad3      	subs	r3, r2, r3
 8002e48:	2b95      	cmp	r3, #149	; 0x95
 8002e4a:	bf94      	ite	ls
 8002e4c:	2301      	movls	r3, #1
 8002e4e:	2300      	movhi	r3, #0
 8002e50:	b2db      	uxtb	r3, r3
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d1f3      	bne.n	8002e3e <_Z14LineSensorTaskv+0x2a>

		for(j = 0; j < 4; ++j)
 8002e56:	2300      	movs	r3, #0
 8002e58:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 8002e5c:	e094      	b.n	8002f88 <_Z14LineSensorTaskv+0x174>
		{
			uint8_t adc_front_values[16];
			uint8_t adc_rear_values[16];
			ReadADCValues(front_adc_cs_ports, front_adc_cs_pins, j, adc_front_values);
 8002e5e:	f107 0318 	add.w	r3, r7, #24
 8002e62:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8002e66:	4987      	ldr	r1, [pc, #540]	; (8003084 <_Z14LineSensorTaskv+0x270>)
 8002e68:	4887      	ldr	r0, [pc, #540]	; (8003088 <_Z14LineSensorTaskv+0x274>)
 8002e6a:	f7ff ff87 	bl	8002d7c <_Z13ReadADCValuesPP12GPIO_TypeDefPthPh>
			ReadADCValues(rear_adc_cs_ports, rear_adc_cs_pins, j, adc_rear_values);
 8002e6e:	f107 0308 	add.w	r3, r7, #8
 8002e72:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8002e76:	4985      	ldr	r1, [pc, #532]	; (800308c <_Z14LineSensorTaskv+0x278>)
 8002e78:	4885      	ldr	r0, [pc, #532]	; (8003090 <_Z14LineSensorTaskv+0x27c>)
 8002e7a:	f7ff ff7f 	bl	8002d7c <_Z13ReadADCValuesPP12GPIO_TypeDefPthPh>

			// i = id of LED, j = id of ic, adc_ic_values contains the 8 adc values from one ic
			ls_data.adc_values_f[j*8 + i] = (uint16_t)(adc_front_values[i*2] << 8u) | (adc_front_values[i*2+1]);
 8002e7e:	f997 3056 	ldrsb.w	r3, [r7, #86]	; 0x56
 8002e82:	005b      	lsls	r3, r3, #1
 8002e84:	3358      	adds	r3, #88	; 0x58
 8002e86:	443b      	add	r3, r7
 8002e88:	f813 3c40 	ldrb.w	r3, [r3, #-64]
 8002e8c:	b29b      	uxth	r3, r3
 8002e8e:	021b      	lsls	r3, r3, #8
 8002e90:	b299      	uxth	r1, r3
 8002e92:	f997 3056 	ldrsb.w	r3, [r7, #86]	; 0x56
 8002e96:	005b      	lsls	r3, r3, #1
 8002e98:	3301      	adds	r3, #1
 8002e9a:	3358      	adds	r3, #88	; 0x58
 8002e9c:	443b      	add	r3, r7
 8002e9e:	f813 3c40 	ldrb.w	r3, [r3, #-64]
 8002ea2:	b29a      	uxth	r2, r3
 8002ea4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8002ea8:	00d8      	lsls	r0, r3, #3
 8002eaa:	f997 3056 	ldrsb.w	r3, [r7, #86]	; 0x56
 8002eae:	4403      	add	r3, r0
 8002eb0:	430a      	orrs	r2, r1
 8002eb2:	b291      	uxth	r1, r2
 8002eb4:	4a77      	ldr	r2, [pc, #476]	; (8003094 <_Z14LineSensorTaskv+0x280>)
 8002eb6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			ls_data.adc_values_f[j*8 + i + 4] = (uint16_t)(adc_front_values[(i*2) + 8] << 8u) | (adc_front_values[(i*2) + 8 + 1]);
 8002eba:	f997 3056 	ldrsb.w	r3, [r7, #86]	; 0x56
 8002ebe:	3304      	adds	r3, #4
 8002ec0:	005b      	lsls	r3, r3, #1
 8002ec2:	3358      	adds	r3, #88	; 0x58
 8002ec4:	443b      	add	r3, r7
 8002ec6:	f813 3c40 	ldrb.w	r3, [r3, #-64]
 8002eca:	b29b      	uxth	r3, r3
 8002ecc:	021b      	lsls	r3, r3, #8
 8002ece:	b299      	uxth	r1, r3
 8002ed0:	f997 3056 	ldrsb.w	r3, [r7, #86]	; 0x56
 8002ed4:	3304      	adds	r3, #4
 8002ed6:	005b      	lsls	r3, r3, #1
 8002ed8:	3301      	adds	r3, #1
 8002eda:	3358      	adds	r3, #88	; 0x58
 8002edc:	443b      	add	r3, r7
 8002ede:	f813 3c40 	ldrb.w	r3, [r3, #-64]
 8002ee2:	b29a      	uxth	r2, r3
 8002ee4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8002ee8:	00d8      	lsls	r0, r3, #3
 8002eea:	f997 3056 	ldrsb.w	r3, [r7, #86]	; 0x56
 8002eee:	4403      	add	r3, r0
 8002ef0:	3304      	adds	r3, #4
 8002ef2:	430a      	orrs	r2, r1
 8002ef4:	b291      	uxth	r1, r2
 8002ef6:	4a67      	ldr	r2, [pc, #412]	; (8003094 <_Z14LineSensorTaskv+0x280>)
 8002ef8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

			ls_data.adc_values_r[j*8 + i] = (uint16_t)(adc_rear_values[i*2] << 8u) | (adc_rear_values[i*2+1]);
 8002efc:	f997 3056 	ldrsb.w	r3, [r7, #86]	; 0x56
 8002f00:	005b      	lsls	r3, r3, #1
 8002f02:	3358      	adds	r3, #88	; 0x58
 8002f04:	443b      	add	r3, r7
 8002f06:	f813 3c50 	ldrb.w	r3, [r3, #-80]
 8002f0a:	b29b      	uxth	r3, r3
 8002f0c:	021b      	lsls	r3, r3, #8
 8002f0e:	b299      	uxth	r1, r3
 8002f10:	f997 3056 	ldrsb.w	r3, [r7, #86]	; 0x56
 8002f14:	005b      	lsls	r3, r3, #1
 8002f16:	3301      	adds	r3, #1
 8002f18:	3358      	adds	r3, #88	; 0x58
 8002f1a:	443b      	add	r3, r7
 8002f1c:	f813 3c50 	ldrb.w	r3, [r3, #-80]
 8002f20:	b29a      	uxth	r2, r3
 8002f22:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8002f26:	00d8      	lsls	r0, r3, #3
 8002f28:	f997 3056 	ldrsb.w	r3, [r7, #86]	; 0x56
 8002f2c:	4403      	add	r3, r0
 8002f2e:	430a      	orrs	r2, r1
 8002f30:	b291      	uxth	r1, r2
 8002f32:	4a58      	ldr	r2, [pc, #352]	; (8003094 <_Z14LineSensorTaskv+0x280>)
 8002f34:	3320      	adds	r3, #32
 8002f36:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			ls_data.adc_values_r[j*8 + i + 4] = (uint16_t)(adc_rear_values[(i*2) + 8] << 8u) | (adc_rear_values[(i*2) + 8 + 1]);
 8002f3a:	f997 3056 	ldrsb.w	r3, [r7, #86]	; 0x56
 8002f3e:	3304      	adds	r3, #4
 8002f40:	005b      	lsls	r3, r3, #1
 8002f42:	3358      	adds	r3, #88	; 0x58
 8002f44:	443b      	add	r3, r7
 8002f46:	f813 3c50 	ldrb.w	r3, [r3, #-80]
 8002f4a:	b29b      	uxth	r3, r3
 8002f4c:	021b      	lsls	r3, r3, #8
 8002f4e:	b299      	uxth	r1, r3
 8002f50:	f997 3056 	ldrsb.w	r3, [r7, #86]	; 0x56
 8002f54:	3304      	adds	r3, #4
 8002f56:	005b      	lsls	r3, r3, #1
 8002f58:	3301      	adds	r3, #1
 8002f5a:	3358      	adds	r3, #88	; 0x58
 8002f5c:	443b      	add	r3, r7
 8002f5e:	f813 3c50 	ldrb.w	r3, [r3, #-80]
 8002f62:	b29a      	uxth	r2, r3
 8002f64:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8002f68:	00d8      	lsls	r0, r3, #3
 8002f6a:	f997 3056 	ldrsb.w	r3, [r7, #86]	; 0x56
 8002f6e:	4403      	add	r3, r0
 8002f70:	3304      	adds	r3, #4
 8002f72:	430a      	orrs	r2, r1
 8002f74:	b291      	uxth	r1, r2
 8002f76:	4a47      	ldr	r2, [pc, #284]	; (8003094 <_Z14LineSensorTaskv+0x280>)
 8002f78:	3320      	adds	r3, #32
 8002f7a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		for(j = 0; j < 4; ++j)
 8002f7e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8002f82:	3301      	adds	r3, #1
 8002f84:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 8002f88:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8002f8c:	2b03      	cmp	r3, #3
 8002f8e:	f67f af66 	bls.w	8002e5e <_Z14LineSensorTaskv+0x4a>
		}

		TurnOffInfraLEDs(infra_oe_ports, infra_le_pins);
 8002f92:	4938      	ldr	r1, [pc, #224]	; (8003074 <_Z14LineSensorTaskv+0x260>)
 8002f94:	4838      	ldr	r0, [pc, #224]	; (8003078 <_Z14LineSensorTaskv+0x264>)
 8002f96:	f7ff fed5 	bl	8002d44 <_Z16TurnOffInfraLEDsPP12GPIO_TypeDefPt>
	for(i = 0; i < 4; ++i)
 8002f9a:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 8002f9e:	3301      	adds	r3, #1
 8002fa0:	b2db      	uxtb	r3, r3
 8002fa2:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
 8002fa6:	f997 3056 	ldrsb.w	r3, [r7, #86]	; 0x56
 8002faa:	2b03      	cmp	r3, #3
 8002fac:	f77f af39 	ble.w	8002e22 <_Z14LineSensorTaskv+0xe>
	}

	float denominator_f = 0.0f;
 8002fb0:	f04f 0300 	mov.w	r3, #0
 8002fb4:	653b      	str	r3, [r7, #80]	; 0x50
	float denominator_r = 0.0f;
 8002fb6:	f04f 0300 	mov.w	r3, #0
 8002fba:	64fb      	str	r3, [r7, #76]	; 0x4c
	uint32_t led_front = 0u;
 8002fbc:	2300      	movs	r3, #0
 8002fbe:	64bb      	str	r3, [r7, #72]	; 0x48
	uint32_t led_rear = 0u;
 8002fc0:	2300      	movs	r3, #0
 8002fc2:	647b      	str	r3, [r7, #68]	; 0x44
	uint8_t front_max_index = 0u;
 8002fc4:	2300      	movs	r3, #0
 8002fc6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
	uint8_t rear_max_index = 0u;
 8002fca:	2300      	movs	r3, #0
 8002fcc:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
	for(i = 1; i < 31; ++i)
 8002fd0:	2301      	movs	r3, #1
 8002fd2:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
 8002fd6:	e035      	b.n	8003044 <_Z14LineSensorTaskv+0x230>
	{
		if(ls_data.adc_values_f[i] > ls_data.adc_values_f[front_max_index])
 8002fd8:	f997 3056 	ldrsb.w	r3, [r7, #86]	; 0x56
 8002fdc:	4a2d      	ldr	r2, [pc, #180]	; (8003094 <_Z14LineSensorTaskv+0x280>)
 8002fde:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8002fe2:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8002fe6:	492b      	ldr	r1, [pc, #172]	; (8003094 <_Z14LineSensorTaskv+0x280>)
 8002fe8:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8002fec:	429a      	cmp	r2, r3
 8002fee:	d903      	bls.n	8002ff8 <_Z14LineSensorTaskv+0x1e4>
		{
			front_max_index = i;
 8002ff0:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 8002ff4:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
		}
		if(ls_data.adc_values_r[i] > ls_data.adc_values_r[rear_max_index])
 8002ff8:	f997 3056 	ldrsb.w	r3, [r7, #86]	; 0x56
 8002ffc:	4a25      	ldr	r2, [pc, #148]	; (8003094 <_Z14LineSensorTaskv+0x280>)
 8002ffe:	3320      	adds	r3, #32
 8003000:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8003004:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 8003008:	4922      	ldr	r1, [pc, #136]	; (8003094 <_Z14LineSensorTaskv+0x280>)
 800300a:	3320      	adds	r3, #32
 800300c:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8003010:	429a      	cmp	r2, r3
 8003012:	d903      	bls.n	800301c <_Z14LineSensorTaskv+0x208>
		{
			rear_max_index = i;
 8003014:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 8003018:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
		}
		ls_data.front_detection[i] = true;
 800301c:	f997 3056 	ldrsb.w	r3, [r7, #86]	; 0x56
 8003020:	4a1c      	ldr	r2, [pc, #112]	; (8003094 <_Z14LineSensorTaskv+0x280>)
 8003022:	4413      	add	r3, r2
 8003024:	2201      	movs	r2, #1
 8003026:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
		ls_data.rear_detection[i] = true;
 800302a:	f997 3056 	ldrsb.w	r3, [r7, #86]	; 0x56
 800302e:	4a19      	ldr	r2, [pc, #100]	; (8003094 <_Z14LineSensorTaskv+0x280>)
 8003030:	4413      	add	r3, r2
 8003032:	2201      	movs	r2, #1
 8003034:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
	for(i = 1; i < 31; ++i)
 8003038:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 800303c:	3301      	adds	r3, #1
 800303e:	b2db      	uxtb	r3, r3
 8003040:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
 8003044:	f997 3056 	ldrsb.w	r3, [r7, #86]	; 0x56
 8003048:	2b1e      	cmp	r3, #30
 800304a:	ddc5      	ble.n	8002fd8 <_Z14LineSensorTaskv+0x1c4>
	}

	ls_data.front_detection[0] = true;
 800304c:	4b11      	ldr	r3, [pc, #68]	; (8003094 <_Z14LineSensorTaskv+0x280>)
 800304e:	2201      	movs	r2, #1
 8003050:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
	ls_data.front_detection[31] = true;
 8003054:	4b0f      	ldr	r3, [pc, #60]	; (8003094 <_Z14LineSensorTaskv+0x280>)
 8003056:	2201      	movs	r2, #1
 8003058:	f883 209f 	strb.w	r2, [r3, #159]	; 0x9f
	ls_data.rear_detection[0] = true;
 800305c:	4b0d      	ldr	r3, [pc, #52]	; (8003094 <_Z14LineSensorTaskv+0x280>)
 800305e:	2201      	movs	r2, #1
 8003060:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
	ls_data.rear_detection[31] = true;
 8003064:	4b0b      	ldr	r3, [pc, #44]	; (8003094 <_Z14LineSensorTaskv+0x280>)
 8003066:	2201      	movs	r2, #1
 8003068:	f883 20bf 	strb.w	r2, [r3, #191]	; 0xbf
	for(i = 1; i < 31; ++i)
 800306c:	2301      	movs	r3, #1
 800306e:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
 8003072:	e090      	b.n	8003196 <_Z14LineSensorTaskv+0x382>
 8003074:	20000068 	.word	0x20000068
 8003078:	2000006c 	.word	0x2000006c
 800307c:	20000060 	.word	0x20000060
 8003080:	20000c0c 	.word	0x20000c0c
 8003084:	20000040 	.word	0x20000040
 8003088:	20000030 	.word	0x20000030
 800308c:	20000058 	.word	0x20000058
 8003090:	20000048 	.word	0x20000048
 8003094:	200001c0 	.word	0x200001c0
	{
		ls_data.position_front += (float)((i - 16.0f/* - front_max_index*/) * ls_data.adc_values_f[i]);
 8003098:	4bd6      	ldr	r3, [pc, #856]	; (80033f4 <_Z14LineSensorTaskv+0x5e0>)
 800309a:	ed93 7a30 	vldr	s14, [r3, #192]	; 0xc0
 800309e:	f997 3056 	ldrsb.w	r3, [r7, #86]	; 0x56
 80030a2:	ee07 3a90 	vmov	s15, r3
 80030a6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80030aa:	eef3 6a00 	vmov.f32	s13, #48	; 0x41800000  16.0
 80030ae:	ee77 6ae6 	vsub.f32	s13, s15, s13
 80030b2:	f997 3056 	ldrsb.w	r3, [r7, #86]	; 0x56
 80030b6:	4acf      	ldr	r2, [pc, #828]	; (80033f4 <_Z14LineSensorTaskv+0x5e0>)
 80030b8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80030bc:	ee07 3a90 	vmov	s15, r3
 80030c0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80030c4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80030c8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80030cc:	4bc9      	ldr	r3, [pc, #804]	; (80033f4 <_Z14LineSensorTaskv+0x5e0>)
 80030ce:	edc3 7a30 	vstr	s15, [r3, #192]	; 0xc0
		ls_data.position_rear += (float)((i - 16.0f/* - rear_max_index*/) * ls_data.adc_values_r[i]);
 80030d2:	4bc8      	ldr	r3, [pc, #800]	; (80033f4 <_Z14LineSensorTaskv+0x5e0>)
 80030d4:	ed93 7a31 	vldr	s14, [r3, #196]	; 0xc4
 80030d8:	f997 3056 	ldrsb.w	r3, [r7, #86]	; 0x56
 80030dc:	ee07 3a90 	vmov	s15, r3
 80030e0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80030e4:	eef3 6a00 	vmov.f32	s13, #48	; 0x41800000  16.0
 80030e8:	ee77 6ae6 	vsub.f32	s13, s15, s13
 80030ec:	f997 3056 	ldrsb.w	r3, [r7, #86]	; 0x56
 80030f0:	4ac0      	ldr	r2, [pc, #768]	; (80033f4 <_Z14LineSensorTaskv+0x5e0>)
 80030f2:	3320      	adds	r3, #32
 80030f4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80030f8:	ee07 3a90 	vmov	s15, r3
 80030fc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003100:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003104:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003108:	4bba      	ldr	r3, [pc, #744]	; (80033f4 <_Z14LineSensorTaskv+0x5e0>)
 800310a:	edc3 7a31 	vstr	s15, [r3, #196]	; 0xc4
		denominator_f += (float)(ls_data.adc_values_f[i]);
 800310e:	f997 3056 	ldrsb.w	r3, [r7, #86]	; 0x56
 8003112:	4ab8      	ldr	r2, [pc, #736]	; (80033f4 <_Z14LineSensorTaskv+0x5e0>)
 8003114:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003118:	ee07 3a90 	vmov	s15, r3
 800311c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003120:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8003124:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003128:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
		denominator_r += (float)(ls_data.adc_values_r[i]);
 800312c:	f997 3056 	ldrsb.w	r3, [r7, #86]	; 0x56
 8003130:	4ab0      	ldr	r2, [pc, #704]	; (80033f4 <_Z14LineSensorTaskv+0x5e0>)
 8003132:	3320      	adds	r3, #32
 8003134:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003138:	ee07 3a90 	vmov	s15, r3
 800313c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003140:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8003144:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003148:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
		if(ls_data.adc_values_f[i] > 2000)
 800314c:	f997 3056 	ldrsb.w	r3, [r7, #86]	; 0x56
 8003150:	4aa8      	ldr	r2, [pc, #672]	; (80033f4 <_Z14LineSensorTaskv+0x5e0>)
 8003152:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003156:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800315a:	d906      	bls.n	800316a <_Z14LineSensorTaskv+0x356>
		{
			ls_data.front_detection[i] = false;
 800315c:	f997 3056 	ldrsb.w	r3, [r7, #86]	; 0x56
 8003160:	4aa4      	ldr	r2, [pc, #656]	; (80033f4 <_Z14LineSensorTaskv+0x5e0>)
 8003162:	4413      	add	r3, r2
 8003164:	2200      	movs	r2, #0
 8003166:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

		}

		if(ls_data.adc_values_r[i] > 2000)
 800316a:	f997 3056 	ldrsb.w	r3, [r7, #86]	; 0x56
 800316e:	4aa1      	ldr	r2, [pc, #644]	; (80033f4 <_Z14LineSensorTaskv+0x5e0>)
 8003170:	3320      	adds	r3, #32
 8003172:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003176:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800317a:	d906      	bls.n	800318a <_Z14LineSensorTaskv+0x376>
		{
			ls_data.rear_detection[i] = false;
 800317c:	f997 3056 	ldrsb.w	r3, [r7, #86]	; 0x56
 8003180:	4a9c      	ldr	r2, [pc, #624]	; (80033f4 <_Z14LineSensorTaskv+0x5e0>)
 8003182:	4413      	add	r3, r2
 8003184:	2200      	movs	r2, #0
 8003186:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
	for(i = 1; i < 31; ++i)
 800318a:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 800318e:	3301      	adds	r3, #1
 8003190:	b2db      	uxtb	r3, r3
 8003192:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
 8003196:	f997 3056 	ldrsb.w	r3, [r7, #86]	; 0x56
 800319a:	2b1e      	cmp	r3, #30
 800319c:	f77f af7c 	ble.w	8003098 <_Z14LineSensorTaskv+0x284>
		}
	}

	for(i = 2; i < SENSOR_COUNT - 2; ++i)
 80031a0:	2302      	movs	r3, #2
 80031a2:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
 80031a6:	e037      	b.n	8003218 <_Z14LineSensorTaskv+0x404>
	{
		if((ls_data.front_detection[i - 1] == true) && (ls_data.front_detection[i + 1] == true))
 80031a8:	f997 3056 	ldrsb.w	r3, [r7, #86]	; 0x56
 80031ac:	3b01      	subs	r3, #1
 80031ae:	4a91      	ldr	r2, [pc, #580]	; (80033f4 <_Z14LineSensorTaskv+0x5e0>)
 80031b0:	4413      	add	r3, r2
 80031b2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80031b6:	2b01      	cmp	r3, #1
 80031b8:	d10f      	bne.n	80031da <_Z14LineSensorTaskv+0x3c6>
 80031ba:	f997 3056 	ldrsb.w	r3, [r7, #86]	; 0x56
 80031be:	3301      	adds	r3, #1
 80031c0:	4a8c      	ldr	r2, [pc, #560]	; (80033f4 <_Z14LineSensorTaskv+0x5e0>)
 80031c2:	4413      	add	r3, r2
 80031c4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80031c8:	2b01      	cmp	r3, #1
 80031ca:	d106      	bne.n	80031da <_Z14LineSensorTaskv+0x3c6>
		{
			ls_data.front_detection[i] = true;
 80031cc:	f997 3056 	ldrsb.w	r3, [r7, #86]	; 0x56
 80031d0:	4a88      	ldr	r2, [pc, #544]	; (80033f4 <_Z14LineSensorTaskv+0x5e0>)
 80031d2:	4413      	add	r3, r2
 80031d4:	2201      	movs	r2, #1
 80031d6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
		}

		if((ls_data.rear_detection[i - 1] == true) && (ls_data.rear_detection[i + 1] == true))
 80031da:	f997 3056 	ldrsb.w	r3, [r7, #86]	; 0x56
 80031de:	3b01      	subs	r3, #1
 80031e0:	4a84      	ldr	r2, [pc, #528]	; (80033f4 <_Z14LineSensorTaskv+0x5e0>)
 80031e2:	4413      	add	r3, r2
 80031e4:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 80031e8:	2b01      	cmp	r3, #1
 80031ea:	d10f      	bne.n	800320c <_Z14LineSensorTaskv+0x3f8>
 80031ec:	f997 3056 	ldrsb.w	r3, [r7, #86]	; 0x56
 80031f0:	3301      	adds	r3, #1
 80031f2:	4a80      	ldr	r2, [pc, #512]	; (80033f4 <_Z14LineSensorTaskv+0x5e0>)
 80031f4:	4413      	add	r3, r2
 80031f6:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 80031fa:	2b01      	cmp	r3, #1
 80031fc:	d106      	bne.n	800320c <_Z14LineSensorTaskv+0x3f8>
		{
			ls_data.rear_detection[i] = true;
 80031fe:	f997 3056 	ldrsb.w	r3, [r7, #86]	; 0x56
 8003202:	4a7c      	ldr	r2, [pc, #496]	; (80033f4 <_Z14LineSensorTaskv+0x5e0>)
 8003204:	4413      	add	r3, r2
 8003206:	2201      	movs	r2, #1
 8003208:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
	for(i = 2; i < SENSOR_COUNT - 2; ++i)
 800320c:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 8003210:	3301      	adds	r3, #1
 8003212:	b2db      	uxtb	r3, r3
 8003214:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
 8003218:	f997 3056 	ldrsb.w	r3, [r7, #86]	; 0x56
 800321c:	2b1d      	cmp	r3, #29
 800321e:	ddc3      	ble.n	80031a8 <_Z14LineSensorTaskv+0x394>
		}
	}

	for(i = 1; i < 31; ++i)
 8003220:	2301      	movs	r3, #1
 8003222:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
 8003226:	e027      	b.n	8003278 <_Z14LineSensorTaskv+0x464>
	{
		if(ls_data.front_detection[i] == false)
 8003228:	f997 3056 	ldrsb.w	r3, [r7, #86]	; 0x56
 800322c:	4a71      	ldr	r2, [pc, #452]	; (80033f4 <_Z14LineSensorTaskv+0x5e0>)
 800322e:	4413      	add	r3, r2
 8003230:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8003234:	2b00      	cmp	r3, #0
 8003236:	d108      	bne.n	800324a <_Z14LineSensorTaskv+0x436>
		{
			led_front |= 0x80000000 >> (i);
 8003238:	f997 3056 	ldrsb.w	r3, [r7, #86]	; 0x56
 800323c:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8003240:	fa22 f303 	lsr.w	r3, r2, r3
 8003244:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003246:	4313      	orrs	r3, r2
 8003248:	64bb      	str	r3, [r7, #72]	; 0x48
		}
		if(ls_data.rear_detection[i] == false)
 800324a:	f997 3056 	ldrsb.w	r3, [r7, #86]	; 0x56
 800324e:	4a69      	ldr	r2, [pc, #420]	; (80033f4 <_Z14LineSensorTaskv+0x5e0>)
 8003250:	4413      	add	r3, r2
 8003252:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8003256:	2b00      	cmp	r3, #0
 8003258:	d108      	bne.n	800326c <_Z14LineSensorTaskv+0x458>
		{
			led_rear |= 0x80000000 >> (i);
 800325a:	f997 3056 	ldrsb.w	r3, [r7, #86]	; 0x56
 800325e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8003262:	fa22 f303 	lsr.w	r3, r2, r3
 8003266:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003268:	4313      	orrs	r3, r2
 800326a:	647b      	str	r3, [r7, #68]	; 0x44
	for(i = 1; i < 31; ++i)
 800326c:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 8003270:	3301      	adds	r3, #1
 8003272:	b2db      	uxtb	r3, r3
 8003274:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
 8003278:	f997 3056 	ldrsb.w	r3, [r7, #86]	; 0x56
 800327c:	2b1e      	cmp	r3, #30
 800327e:	ddd3      	ble.n	8003228 <_Z14LineSensorTaskv+0x414>
		}
	}
	uint8_t cluster_start_front = SENSOR_COUNT + 1;
 8003280:	2321      	movs	r3, #33	; 0x21
 8003282:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
	uint8_t cluster_end_front = SENSOR_COUNT + 1;
 8003286:	2321      	movs	r3, #33	; 0x21
 8003288:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
	uint8_t cluster_start_rear = SENSOR_COUNT + 1;
 800328c:	2321      	movs	r3, #33	; 0x21
 800328e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	uint8_t cluster_end_rear = SENSOR_COUNT + 1;
 8003292:	2321      	movs	r3, #33	; 0x21
 8003294:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
	uint8_t current_idx;
	ls_data.front.clear();
 8003298:	4857      	ldr	r0, [pc, #348]	; (80033f8 <_Z14LineSensorTaskv+0x5e4>)
 800329a:	f000 f9a0 	bl	80035de <_ZNSt6vectorIfSaIfEE5clearEv>
	ls_data.rear.clear();
 800329e:	4857      	ldr	r0, [pc, #348]	; (80033fc <_Z14LineSensorTaskv+0x5e8>)
 80032a0:	f000 f99d 	bl	80035de <_ZNSt6vectorIfSaIfEE5clearEv>
	for (current_idx = 0; current_idx < SENSOR_COUNT; current_idx++)
 80032a4:	2300      	movs	r3, #0
 80032a6:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
 80032aa:	e125      	b.n	80034f8 <_Z14LineSensorTaskv+0x6e4>
	{
		if (!ls_data.front_detection[current_idx])
 80032ac:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 80032b0:	4a50      	ldr	r2, [pc, #320]	; (80033f4 <_Z14LineSensorTaskv+0x5e0>)
 80032b2:	4413      	add	r3, r2
 80032b4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80032b8:	f083 0301 	eor.w	r3, r3, #1
 80032bc:	b2db      	uxtb	r3, r3
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d00c      	beq.n	80032dc <_Z14LineSensorTaskv+0x4c8>
		{
			if (cluster_start_front == SENSOR_COUNT + 1)
 80032c2:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 80032c6:	2b21      	cmp	r3, #33	; 0x21
 80032c8:	d103      	bne.n	80032d2 <_Z14LineSensorTaskv+0x4be>
			{
				cluster_start_front = current_idx;
 80032ca:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 80032ce:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
			}
			cluster_end_front = current_idx;
 80032d2:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 80032d6:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
 80032da:	e072      	b.n	80033c2 <_Z14LineSensorTaskv+0x5ae>
		}
		else
		{
			if (cluster_start_front != SENSOR_COUNT + 1)
 80032dc:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 80032e0:	2b21      	cmp	r3, #33	; 0x21
 80032e2:	d06e      	beq.n	80033c2 <_Z14LineSensorTaskv+0x5ae>
			{
				// calculate the center of mass of the cluster
				float cluster_center = (cluster_start_front + 1 + cluster_end_front + 1) / 2.0f;
 80032e4:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 80032e8:	1c5a      	adds	r2, r3, #1
 80032ea:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 80032ee:	4413      	add	r3, r2
 80032f0:	3301      	adds	r3, #1
 80032f2:	ee07 3a90 	vmov	s15, r3
 80032f6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80032fa:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80032fe:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003302:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
				// calculate the position of the line relative to the center of the sensor
				//float line_position = cluster_center - 16.5f;
				//line_position = -1.0f * line_position * SENSOR_WIDTH / (SENSOR_COUNT - 1);
				float line_position = 0.0f;
 8003306:	f04f 0300 	mov.w	r3, #0
 800330a:	607b      	str	r3, [r7, #4]
				float denominator = 0.0f;
 800330c:	f04f 0300 	mov.w	r3, #0
 8003310:	63bb      	str	r3, [r7, #56]	; 0x38
				for(i = cluster_start_front + 1; i <= cluster_end_front + 1; ++i)
 8003312:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 8003316:	3301      	adds	r3, #1
 8003318:	b2db      	uxtb	r3, r3
 800331a:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
 800331e:	e028      	b.n	8003372 <_Z14LineSensorTaskv+0x55e>
				{
					line_position += ls_data.adc_values_f[i] * i;
 8003320:	f997 3056 	ldrsb.w	r3, [r7, #86]	; 0x56
 8003324:	4a33      	ldr	r2, [pc, #204]	; (80033f4 <_Z14LineSensorTaskv+0x5e0>)
 8003326:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800332a:	461a      	mov	r2, r3
 800332c:	f997 3056 	ldrsb.w	r3, [r7, #86]	; 0x56
 8003330:	fb02 f303 	mul.w	r3, r2, r3
 8003334:	ee07 3a90 	vmov	s15, r3
 8003338:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800333c:	edd7 7a01 	vldr	s15, [r7, #4]
 8003340:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003344:	edc7 7a01 	vstr	s15, [r7, #4]
					denominator += ls_data.adc_values_f[i];
 8003348:	f997 3056 	ldrsb.w	r3, [r7, #86]	; 0x56
 800334c:	4a29      	ldr	r2, [pc, #164]	; (80033f4 <_Z14LineSensorTaskv+0x5e0>)
 800334e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003352:	ee07 3a90 	vmov	s15, r3
 8003356:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800335a:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 800335e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003362:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
				for(i = cluster_start_front + 1; i <= cluster_end_front + 1; ++i)
 8003366:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 800336a:	3301      	adds	r3, #1
 800336c:	b2db      	uxtb	r3, r3
 800336e:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
 8003372:	f997 2056 	ldrsb.w	r2, [r7, #86]	; 0x56
 8003376:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800337a:	3301      	adds	r3, #1
 800337c:	429a      	cmp	r2, r3
 800337e:	ddcf      	ble.n	8003320 <_Z14LineSensorTaskv+0x50c>
				}
				line_position = -1.0f * (((line_position / denominator) - 16.5f) * SENSOR_WIDTH / (SENSOR_COUNT - 1));
 8003380:	edd7 6a01 	vldr	s13, [r7, #4]
 8003384:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8003388:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800338c:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8003400 <_Z14LineSensorTaskv+0x5ec>
 8003390:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003394:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 8003404 <_Z14LineSensorTaskv+0x5f0>
 8003398:	ee27 7a87 	vmul.f32	s14, s15, s14
 800339c:	eef3 6a0f 	vmov.f32	s13, #63	; 0x41f80000  31.0
 80033a0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80033a4:	eef1 7a67 	vneg.f32	s15, s15
 80033a8:	edc7 7a01 	vstr	s15, [r7, #4]

				// add the line position to the vector
				ls_data.front.push_back(line_position);
 80033ac:	1d3b      	adds	r3, r7, #4
 80033ae:	4619      	mov	r1, r3
 80033b0:	4811      	ldr	r0, [pc, #68]	; (80033f8 <_Z14LineSensorTaskv+0x5e4>)
 80033b2:	f000 f922 	bl	80035fa <_ZNSt6vectorIfSaIfEE9push_backERKf>
				// reset the cluster start and end
				cluster_start_front = SENSOR_COUNT + 1;
 80033b6:	2321      	movs	r3, #33	; 0x21
 80033b8:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
				cluster_end_front = SENSOR_COUNT + 1;
 80033bc:	2321      	movs	r3, #33	; 0x21
 80033be:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
			}
		}

		if (!ls_data.rear_detection[current_idx])
 80033c2:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 80033c6:	4a0b      	ldr	r2, [pc, #44]	; (80033f4 <_Z14LineSensorTaskv+0x5e0>)
 80033c8:	4413      	add	r3, r2
 80033ca:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 80033ce:	f083 0301 	eor.w	r3, r3, #1
 80033d2:	b2db      	uxtb	r3, r3
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d017      	beq.n	8003408 <_Z14LineSensorTaskv+0x5f4>
		{
			if (cluster_start_rear == SENSOR_COUNT + 1)
 80033d8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80033dc:	2b21      	cmp	r3, #33	; 0x21
 80033de:	d103      	bne.n	80033e8 <_Z14LineSensorTaskv+0x5d4>
			{
				cluster_start_rear = current_idx;
 80033e0:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 80033e4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			}
			cluster_end_rear = current_idx;
 80033e8:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 80033ec:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 80033f0:	e07d      	b.n	80034ee <_Z14LineSensorTaskv+0x6da>
 80033f2:	bf00      	nop
 80033f4:	200001c0 	.word	0x200001c0
 80033f8:	20000288 	.word	0x20000288
 80033fc:	20000294 	.word	0x20000294
 8003400:	41840000 	.word	0x41840000
 8003404:	3e4ccccd 	.word	0x3e4ccccd
		}
		else
		{
			if (cluster_start_rear != SENSOR_COUNT + 1)
 8003408:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800340c:	2b21      	cmp	r3, #33	; 0x21
 800340e:	d06e      	beq.n	80034ee <_Z14LineSensorTaskv+0x6da>
			{
				// calculate the center of mass of the cluster
				float cluster_center = (cluster_start_rear + 1 + cluster_end_rear + 1) / 2.0f;
 8003410:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8003414:	1c5a      	adds	r2, r3, #1
 8003416:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800341a:	4413      	add	r3, r2
 800341c:	3301      	adds	r3, #1
 800341e:	ee07 3a90 	vmov	s15, r3
 8003422:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003426:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800342a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800342e:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
				// calculate the position of the line relative to the center of the sensor
				//float line_position = cluster_center - 16.5f;
				//line_position = line_position * SENSOR_WIDTH / (SENSOR_COUNT - 1);
				// add the line position to the vector
				float line_position = 0.0f;
 8003432:	f04f 0300 	mov.w	r3, #0
 8003436:	603b      	str	r3, [r7, #0]
				float denominator = 0.0f;
 8003438:	f04f 0300 	mov.w	r3, #0
 800343c:	637b      	str	r3, [r7, #52]	; 0x34
				for(i = cluster_start_rear + 1; i <= cluster_end_rear + 1; ++i)
 800343e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8003442:	3301      	adds	r3, #1
 8003444:	b2db      	uxtb	r3, r3
 8003446:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
 800344a:	e02a      	b.n	80034a2 <_Z14LineSensorTaskv+0x68e>
				{
					line_position += ls_data.adc_values_r[i] * i;
 800344c:	f997 3056 	ldrsb.w	r3, [r7, #86]	; 0x56
 8003450:	4a33      	ldr	r2, [pc, #204]	; (8003520 <_Z14LineSensorTaskv+0x70c>)
 8003452:	3320      	adds	r3, #32
 8003454:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003458:	461a      	mov	r2, r3
 800345a:	f997 3056 	ldrsb.w	r3, [r7, #86]	; 0x56
 800345e:	fb02 f303 	mul.w	r3, r2, r3
 8003462:	ee07 3a90 	vmov	s15, r3
 8003466:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800346a:	edd7 7a00 	vldr	s15, [r7]
 800346e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003472:	edc7 7a00 	vstr	s15, [r7]
					denominator += ls_data.adc_values_r[i];
 8003476:	f997 3056 	ldrsb.w	r3, [r7, #86]	; 0x56
 800347a:	4a29      	ldr	r2, [pc, #164]	; (8003520 <_Z14LineSensorTaskv+0x70c>)
 800347c:	3320      	adds	r3, #32
 800347e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003482:	ee07 3a90 	vmov	s15, r3
 8003486:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800348a:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800348e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003492:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
				for(i = cluster_start_rear + 1; i <= cluster_end_rear + 1; ++i)
 8003496:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 800349a:	3301      	adds	r3, #1
 800349c:	b2db      	uxtb	r3, r3
 800349e:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
 80034a2:	f997 2056 	ldrsb.w	r2, [r7, #86]	; 0x56
 80034a6:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 80034aa:	3301      	adds	r3, #1
 80034ac:	429a      	cmp	r2, r3
 80034ae:	ddcd      	ble.n	800344c <_Z14LineSensorTaskv+0x638>
				}
				line_position = ((line_position / denominator) - 16.5f) * SENSOR_WIDTH / (SENSOR_COUNT - 1);
 80034b0:	edd7 6a00 	vldr	s13, [r7]
 80034b4:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 80034b8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80034bc:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8003524 <_Z14LineSensorTaskv+0x710>
 80034c0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80034c4:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8003528 <_Z14LineSensorTaskv+0x714>
 80034c8:	ee27 7a87 	vmul.f32	s14, s15, s14
 80034cc:	eef3 6a0f 	vmov.f32	s13, #63	; 0x41f80000  31.0
 80034d0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80034d4:	edc7 7a00 	vstr	s15, [r7]

				ls_data.rear.push_back(line_position);
 80034d8:	463b      	mov	r3, r7
 80034da:	4619      	mov	r1, r3
 80034dc:	4813      	ldr	r0, [pc, #76]	; (800352c <_Z14LineSensorTaskv+0x718>)
 80034de:	f000 f88c 	bl	80035fa <_ZNSt6vectorIfSaIfEE9push_backERKf>
				// reset the cluster start and end
				cluster_start_rear = SENSOR_COUNT + 1;
 80034e2:	2321      	movs	r3, #33	; 0x21
 80034e4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				cluster_end_rear = SENSOR_COUNT + 1;
 80034e8:	2321      	movs	r3, #33	; 0x21
 80034ea:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
	for (current_idx = 0; current_idx < SENSOR_COUNT; current_idx++)
 80034ee:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 80034f2:	3301      	adds	r3, #1
 80034f4:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
 80034f8:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 80034fc:	2b1f      	cmp	r3, #31
 80034fe:	f67f aed5 	bls.w	80032ac <_Z14LineSensorTaskv+0x498>
			}
		}
	}


	TurnOnLEDs(led_le_ports, led_le_pins, led_oe_ports, led_oe_pins, led_front, led_rear);
 8003502:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003504:	9301      	str	r3, [sp, #4]
 8003506:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003508:	9300      	str	r3, [sp, #0]
 800350a:	4b09      	ldr	r3, [pc, #36]	; (8003530 <_Z14LineSensorTaskv+0x71c>)
 800350c:	4a09      	ldr	r2, [pc, #36]	; (8003534 <_Z14LineSensorTaskv+0x720>)
 800350e:	490a      	ldr	r1, [pc, #40]	; (8003538 <_Z14LineSensorTaskv+0x724>)
 8003510:	480a      	ldr	r0, [pc, #40]	; (800353c <_Z14LineSensorTaskv+0x728>)
 8003512:	f7ff fb91 	bl	8002c38 <_Z10TurnOnLEDsPP12GPIO_TypeDefPtS1_S2_mm>
	//ls_data.position_front = -1.0f * ls_data.position_front * 2.5f / 100.0f / denominator_f;
	//ls_data.position_rear = ls_data.position_rear * 2.5f / 100.0f / denominator_r;


#endif
}
 8003516:	bf00      	nop
 8003518:	3758      	adds	r7, #88	; 0x58
 800351a:	46bd      	mov	sp, r7
 800351c:	bd80      	pop	{r7, pc}
 800351e:	bf00      	nop
 8003520:	200001c0 	.word	0x200001c0
 8003524:	41840000 	.word	0x41840000
 8003528:	3e4ccccd 	.word	0x3e4ccccd
 800352c:	20000294 	.word	0x20000294
 8003530:	20000088 	.word	0x20000088
 8003534:	20000080 	.word	0x20000080
 8003538:	2000007c 	.word	0x2000007c
 800353c:	20000074 	.word	0x20000074

08003540 <_ZNSt12_Vector_baseIfSaIfEE12_Vector_implC1Ev>:
	_Vector_impl() _GLIBCXX_NOEXCEPT_IF(
 8003540:	b580      	push	{r7, lr}
 8003542:	b082      	sub	sp, #8
 8003544:	af00      	add	r7, sp, #0
 8003546:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 8003548:	6878      	ldr	r0, [r7, #4]
 800354a:	f000 f87b 	bl	8003644 <_ZNSaIfEC1Ev>
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	4618      	mov	r0, r3
 8003552:	f000 f883 	bl	800365c <_ZNSt12_Vector_baseIfSaIfEE17_Vector_impl_dataC1Ev>
	{ }
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	4618      	mov	r0, r3
 800355a:	3708      	adds	r7, #8
 800355c:	46bd      	mov	sp, r7
 800355e:	bd80      	pop	{r7, pc}

08003560 <_ZNSaIfED1Ev>:
	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }

#if __cpp_constexpr_dynamic_alloc
      constexpr
#endif
      ~allocator() _GLIBCXX_NOTHROW { }
 8003560:	b480      	push	{r7}
 8003562:	b083      	sub	sp, #12
 8003564:	af00      	add	r7, sp, #0
 8003566:	6078      	str	r0, [r7, #4]
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	4618      	mov	r0, r3
 800356c:	370c      	adds	r7, #12
 800356e:	46bd      	mov	sp, r7
 8003570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003574:	4770      	bx	lr

08003576 <_ZNSt12_Vector_baseIfSaIfEED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 8003576:	b580      	push	{r7, lr}
 8003578:	b082      	sub	sp, #8
 800357a:	af00      	add	r7, sp, #0
 800357c:	6078      	str	r0, [r7, #4]
	_M_deallocate(_M_impl._M_start,
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	6819      	ldr	r1, [r3, #0]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	689a      	ldr	r2, [r3, #8]
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	1ad3      	subs	r3, r2, r3
 800358c:	109b      	asrs	r3, r3, #2
	_M_deallocate(_M_impl._M_start,
 800358e:	461a      	mov	r2, r3
 8003590:	6878      	ldr	r0, [r7, #4]
 8003592:	f000 f877 	bl	8003684 <_ZNSt12_Vector_baseIfSaIfEE13_M_deallocateEPfj>
      }
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	4618      	mov	r0, r3
 800359a:	f7ff facb 	bl	8002b34 <_ZNSt12_Vector_baseIfSaIfEE12_Vector_implD1Ev>
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	4618      	mov	r0, r3
 80035a2:	3708      	adds	r7, #8
 80035a4:	46bd      	mov	sp, r7
 80035a6:	bd80      	pop	{r7, pc}

080035a8 <_ZNSt6vectorIfSaIfEED1Ev>:
       *  The dtor only erases the elements, and note that if the
       *  elements themselves are pointers, the pointed-to memory is
       *  not touched in any way.  Managing the pointer is the user's
       *  responsibility.
       */
      ~vector() _GLIBCXX_NOEXCEPT
 80035a8:	b5b0      	push	{r4, r5, r7, lr}
 80035aa:	b082      	sub	sp, #8
 80035ac:	af00      	add	r7, sp, #0
 80035ae:	6078      	str	r0, [r7, #4]
      {
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681c      	ldr	r4, [r3, #0]
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator());
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	4618      	mov	r0, r3
 80035bc:	f000 f875 	bl	80036aa <_ZNSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>
 80035c0:	4603      	mov	r3, r0
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 80035c2:	461a      	mov	r2, r3
 80035c4:	4629      	mov	r1, r5
 80035c6:	4620      	mov	r0, r4
 80035c8:	f000 f87a 	bl	80036c0 <_ZSt8_DestroyIPffEvT_S1_RSaIT0_E>
	_GLIBCXX_ASAN_ANNOTATE_BEFORE_DEALLOC;
      }
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	4618      	mov	r0, r3
 80035d0:	f7ff ffd1 	bl	8003576 <_ZNSt12_Vector_baseIfSaIfEED1Ev>
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	4618      	mov	r0, r3
 80035d8:	3708      	adds	r7, #8
 80035da:	46bd      	mov	sp, r7
 80035dc:	bdb0      	pop	{r4, r5, r7, pc}

080035de <_ZNSt6vectorIfSaIfEE5clearEv>:
       *  elements, and that if the elements themselves are pointers, the
       *  pointed-to memory is not touched in any way.  Managing the pointer is
       *  the user's responsibility.
       */
      void
      clear() _GLIBCXX_NOEXCEPT
 80035de:	b580      	push	{r7, lr}
 80035e0:	b082      	sub	sp, #8
 80035e2:	af00      	add	r7, sp, #0
 80035e4:	6078      	str	r0, [r7, #4]
      { _M_erase_at_end(this->_M_impl._M_start); }
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	4619      	mov	r1, r3
 80035ec:	6878      	ldr	r0, [r7, #4]
 80035ee:	f000 f875 	bl	80036dc <_ZNSt6vectorIfSaIfEE15_M_erase_at_endEPf>
 80035f2:	bf00      	nop
 80035f4:	3708      	adds	r7, #8
 80035f6:	46bd      	mov	sp, r7
 80035f8:	bd80      	pop	{r7, pc}

080035fa <_ZNSt6vectorIfSaIfEE9push_backERKf>:
      push_back(const value_type& __x)
 80035fa:	b580      	push	{r7, lr}
 80035fc:	b082      	sub	sp, #8
 80035fe:	af00      	add	r7, sp, #0
 8003600:	6078      	str	r0, [r7, #4]
 8003602:	6039      	str	r1, [r7, #0]
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	685a      	ldr	r2, [r3, #4]
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	689b      	ldr	r3, [r3, #8]
 800360c:	429a      	cmp	r2, r3
 800360e:	d00c      	beq.n	800362a <_ZNSt6vectorIfSaIfEE9push_backERKf+0x30>
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
 8003610:	6878      	ldr	r0, [r7, #4]
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	685b      	ldr	r3, [r3, #4]
 8003616:	683a      	ldr	r2, [r7, #0]
 8003618:	4619      	mov	r1, r3
 800361a:	f000 f895 	bl	8003748 <_ZNSt16allocator_traitsISaIfEE9constructIfJRKfEEEvRS0_PT_DpOT0_>
	    ++this->_M_impl._M_finish;
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	685b      	ldr	r3, [r3, #4]
 8003622:	1d1a      	adds	r2, r3, #4
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	605a      	str	r2, [r3, #4]
      }
 8003628:	e008      	b.n	800363c <_ZNSt6vectorIfSaIfEE9push_backERKf+0x42>
	  _M_realloc_insert(end(), __x);
 800362a:	6878      	ldr	r0, [r7, #4]
 800362c:	f000 f89e 	bl	800376c <_ZNSt6vectorIfSaIfEE3endEv>
 8003630:	4603      	mov	r3, r0
 8003632:	683a      	ldr	r2, [r7, #0]
 8003634:	4619      	mov	r1, r3
 8003636:	6878      	ldr	r0, [r7, #4]
 8003638:	f000 f8aa 	bl	8003790 <_ZNSt6vectorIfSaIfEE17_M_realloc_insertIJRKfEEEvN9__gnu_cxx17__normal_iteratorIPfS1_EEDpOT_>
      }
 800363c:	bf00      	nop
 800363e:	3708      	adds	r7, #8
 8003640:	46bd      	mov	sp, r7
 8003642:	bd80      	pop	{r7, pc}

08003644 <_ZNSaIfEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 8003644:	b580      	push	{r7, lr}
 8003646:	b082      	sub	sp, #8
 8003648:	af00      	add	r7, sp, #0
 800364a:	6078      	str	r0, [r7, #4]
 800364c:	6878      	ldr	r0, [r7, #4]
 800364e:	f000 f91b 	bl	8003888 <_ZN9__gnu_cxx13new_allocatorIfEC1Ev>
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	4618      	mov	r0, r3
 8003656:	3708      	adds	r7, #8
 8003658:	46bd      	mov	sp, r7
 800365a:	bd80      	pop	{r7, pc}

0800365c <_ZNSt12_Vector_baseIfSaIfEE17_Vector_impl_dataC1Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
 800365c:	b480      	push	{r7}
 800365e:	b083      	sub	sp, #12
 8003660:	af00      	add	r7, sp, #0
 8003662:	6078      	str	r0, [r7, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	2200      	movs	r2, #0
 8003668:	601a      	str	r2, [r3, #0]
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	2200      	movs	r2, #0
 800366e:	605a      	str	r2, [r3, #4]
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	2200      	movs	r2, #0
 8003674:	609a      	str	r2, [r3, #8]
	{ }
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	4618      	mov	r0, r3
 800367a:	370c      	adds	r7, #12
 800367c:	46bd      	mov	sp, r7
 800367e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003682:	4770      	bx	lr

08003684 <_ZNSt12_Vector_baseIfSaIfEE13_M_deallocateEPfj>:
      _M_deallocate(pointer __p, size_t __n)
 8003684:	b580      	push	{r7, lr}
 8003686:	b084      	sub	sp, #16
 8003688:	af00      	add	r7, sp, #0
 800368a:	60f8      	str	r0, [r7, #12]
 800368c:	60b9      	str	r1, [r7, #8]
 800368e:	607a      	str	r2, [r7, #4]
	if (__p)
 8003690:	68bb      	ldr	r3, [r7, #8]
 8003692:	2b00      	cmp	r3, #0
 8003694:	d005      	beq.n	80036a2 <_ZNSt12_Vector_baseIfSaIfEE13_M_deallocateEPfj+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	687a      	ldr	r2, [r7, #4]
 800369a:	68b9      	ldr	r1, [r7, #8]
 800369c:	4618      	mov	r0, r3
 800369e:	f000 f8fe 	bl	800389e <_ZNSt16allocator_traitsISaIfEE10deallocateERS0_Pfj>
      }
 80036a2:	bf00      	nop
 80036a4:	3710      	adds	r7, #16
 80036a6:	46bd      	mov	sp, r7
 80036a8:	bd80      	pop	{r7, pc}

080036aa <_ZNSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 80036aa:	b480      	push	{r7}
 80036ac:	b083      	sub	sp, #12
 80036ae:	af00      	add	r7, sp, #0
 80036b0:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	4618      	mov	r0, r3
 80036b6:	370c      	adds	r7, #12
 80036b8:	46bd      	mov	sp, r7
 80036ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036be:	4770      	bx	lr

080036c0 <_ZSt8_DestroyIPffEvT_S1_RSaIT0_E>:
#endif
    }

  template<typename _ForwardIterator, typename _Tp>
    inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 80036c0:	b580      	push	{r7, lr}
 80036c2:	b084      	sub	sp, #16
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	60f8      	str	r0, [r7, #12]
 80036c8:	60b9      	str	r1, [r7, #8]
 80036ca:	607a      	str	r2, [r7, #4]
	     allocator<_Tp>&)
    {
      _Destroy(__first, __last);
 80036cc:	68b9      	ldr	r1, [r7, #8]
 80036ce:	68f8      	ldr	r0, [r7, #12]
 80036d0:	f000 f904 	bl	80038dc <_ZSt8_DestroyIPfEvT_S1_>
    }
 80036d4:	bf00      	nop
 80036d6:	3710      	adds	r7, #16
 80036d8:	46bd      	mov	sp, r7
 80036da:	bd80      	pop	{r7, pc}

080036dc <_ZNSt6vectorIfSaIfEE15_M_erase_at_endEPf>:
      // Internal erase functions follow.

      // Called by erase(q1,q2), clear(), resize(), _M_fill_assign,
      // _M_assign_aux.
      void
      _M_erase_at_end(pointer __pos) _GLIBCXX_NOEXCEPT
 80036dc:	b590      	push	{r4, r7, lr}
 80036de:	b085      	sub	sp, #20
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	6078      	str	r0, [r7, #4]
 80036e4:	6039      	str	r1, [r7, #0]
      {
	if (size_type __n = this->_M_impl._M_finish - __pos)
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	685a      	ldr	r2, [r3, #4]
 80036ea:	683b      	ldr	r3, [r7, #0]
 80036ec:	1ad3      	subs	r3, r2, r3
 80036ee:	109b      	asrs	r3, r3, #2
 80036f0:	60fb      	str	r3, [r7, #12]
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d00e      	beq.n	8003716 <_ZNSt6vectorIfSaIfEE15_M_erase_at_endEPf+0x3a>
	  {
	    std::_Destroy(__pos, this->_M_impl._M_finish,
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	685c      	ldr	r4, [r3, #4]
			  _M_get_Tp_allocator());
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	4618      	mov	r0, r3
 8003700:	f7ff ffd3 	bl	80036aa <_ZNSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>
 8003704:	4603      	mov	r3, r0
	    std::_Destroy(__pos, this->_M_impl._M_finish,
 8003706:	461a      	mov	r2, r3
 8003708:	4621      	mov	r1, r4
 800370a:	6838      	ldr	r0, [r7, #0]
 800370c:	f7ff ffd8 	bl	80036c0 <_ZSt8_DestroyIPffEvT_S1_RSaIT0_E>
	    this->_M_impl._M_finish = __pos;
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	683a      	ldr	r2, [r7, #0]
 8003714:	605a      	str	r2, [r3, #4]
	    _GLIBCXX_ASAN_ANNOTATE_SHRINK(__n);
	  }
      }
 8003716:	bf00      	nop
 8003718:	3714      	adds	r7, #20
 800371a:	46bd      	mov	sp, r7
 800371c:	bd90      	pop	{r4, r7, pc}

0800371e <_ZSt12construct_atIfJRKfEEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPS3_DpOS4_>:
    }

#if __cplusplus >= 202002L
  template<typename _Tp, typename... _Args>
    constexpr auto
    construct_at(_Tp* __location, _Args&&... __args)
 800371e:	b590      	push	{r4, r7, lr}
 8003720:	b083      	sub	sp, #12
 8003722:	af00      	add	r7, sp, #0
 8003724:	6078      	str	r0, [r7, #4]
 8003726:	6039      	str	r1, [r7, #0]
    noexcept(noexcept(::new((void*)0) _Tp(std::declval<_Args>()...)))
    -> decltype(::new((void*)0) _Tp(std::declval<_Args>()...))
    { return ::new((void*)__location) _Tp(std::forward<_Args>(__args)...); }
 8003728:	6838      	ldr	r0, [r7, #0]
 800372a:	f000 f8ed 	bl	8003908 <_ZSt7forwardIRKfEOT_RNSt16remove_referenceIS2_E4typeE>
 800372e:	4603      	mov	r3, r0
 8003730:	681c      	ldr	r4, [r3, #0]
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	4619      	mov	r1, r3
 8003736:	2004      	movs	r0, #4
 8003738:	f7ff f9f0 	bl	8002b1c <_ZnwjPv>
 800373c:	4603      	mov	r3, r0
 800373e:	601c      	str	r4, [r3, #0]
 8003740:	4618      	mov	r0, r3
 8003742:	370c      	adds	r7, #12
 8003744:	46bd      	mov	sp, r7
 8003746:	bd90      	pop	{r4, r7, pc}

08003748 <_ZNSt16allocator_traitsISaIfEE9constructIfJRKfEEEvRS0_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 8003748:	b580      	push	{r7, lr}
 800374a:	b084      	sub	sp, #16
 800374c:	af00      	add	r7, sp, #0
 800374e:	60f8      	str	r0, [r7, #12]
 8003750:	60b9      	str	r1, [r7, #8]
 8003752:	607a      	str	r2, [r7, #4]
	  std::construct_at(__p, std::forward<_Args>(__args)...);
 8003754:	6878      	ldr	r0, [r7, #4]
 8003756:	f000 f8d7 	bl	8003908 <_ZSt7forwardIRKfEOT_RNSt16remove_referenceIS2_E4typeE>
 800375a:	4603      	mov	r3, r0
 800375c:	4619      	mov	r1, r3
 800375e:	68b8      	ldr	r0, [r7, #8]
 8003760:	f7ff ffdd 	bl	800371e <_ZSt12construct_atIfJRKfEEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPS3_DpOS4_>
	}
 8003764:	bf00      	nop
 8003766:	3710      	adds	r7, #16
 8003768:	46bd      	mov	sp, r7
 800376a:	bd80      	pop	{r7, pc}

0800376c <_ZNSt6vectorIfSaIfEE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 800376c:	b580      	push	{r7, lr}
 800376e:	b084      	sub	sp, #16
 8003770:	af00      	add	r7, sp, #0
 8003772:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_finish); }
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	1d1a      	adds	r2, r3, #4
 8003778:	f107 030c 	add.w	r3, r7, #12
 800377c:	4611      	mov	r1, r2
 800377e:	4618      	mov	r0, r3
 8003780:	f000 f8cd 	bl	800391e <_ZN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEC1ERKS1_>
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	4618      	mov	r0, r3
 8003788:	3710      	adds	r7, #16
 800378a:	46bd      	mov	sp, r7
 800378c:	bd80      	pop	{r7, pc}
	...

08003790 <_ZNSt6vectorIfSaIfEE17_M_realloc_insertIJRKfEEEvN9__gnu_cxx17__normal_iteratorIPfS1_EEDpOT_>:

#if __cplusplus >= 201103L
  template<typename _Tp, typename _Alloc>
    template<typename... _Args>
      void
      vector<_Tp, _Alloc>::
 8003790:	b5b0      	push	{r4, r5, r7, lr}
 8003792:	b08c      	sub	sp, #48	; 0x30
 8003794:	af00      	add	r7, sp, #0
 8003796:	60f8      	str	r0, [r7, #12]
 8003798:	60b9      	str	r1, [r7, #8]
 800379a:	607a      	str	r2, [r7, #4]
    vector<_Tp, _Alloc>::
    _M_realloc_insert(iterator __position, const _Tp& __x)
#endif
    {
      const size_type __len =
	_M_check_len(size_type(1), "vector::_M_realloc_insert");
 800379c:	4a39      	ldr	r2, [pc, #228]	; (8003884 <_ZNSt6vectorIfSaIfEE17_M_realloc_insertIJRKfEEEvN9__gnu_cxx17__normal_iteratorIPfS1_EEDpOT_+0xf4>)
 800379e:	2101      	movs	r1, #1
 80037a0:	68f8      	ldr	r0, [r7, #12]
 80037a2:	f000 f8cc 	bl	800393e <_ZNKSt6vectorIfSaIfEE12_M_check_lenEjPKc>
 80037a6:	62f8      	str	r0, [r7, #44]	; 0x2c
      pointer __old_start = this->_M_impl._M_start;
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	62bb      	str	r3, [r7, #40]	; 0x28
      pointer __old_finish = this->_M_impl._M_finish;
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	685b      	ldr	r3, [r3, #4]
 80037b2:	627b      	str	r3, [r7, #36]	; 0x24
      const size_type __elems_before = __position - begin();
 80037b4:	68f8      	ldr	r0, [r7, #12]
 80037b6:	f000 f909 	bl	80039cc <_ZNSt6vectorIfSaIfEE5beginEv>
 80037ba:	4603      	mov	r3, r0
 80037bc:	617b      	str	r3, [r7, #20]
 80037be:	f107 0214 	add.w	r2, r7, #20
 80037c2:	f107 0308 	add.w	r3, r7, #8
 80037c6:	4611      	mov	r1, r2
 80037c8:	4618      	mov	r0, r3
 80037ca:	f000 f90f 	bl	80039ec <_ZN9__gnu_cxxmiIPfSt6vectorIfSaIfEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS8_SB_>
 80037ce:	4603      	mov	r3, r0
 80037d0:	623b      	str	r3, [r7, #32]
      pointer __new_start(this->_M_allocate(__len));
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80037d6:	4618      	mov	r0, r3
 80037d8:	f000 f91d 	bl	8003a16 <_ZNSt12_Vector_baseIfSaIfEE11_M_allocateEj>
 80037dc:	61f8      	str	r0, [r7, #28]
      pointer __new_finish(__new_start);
 80037de:	69fb      	ldr	r3, [r7, #28]
 80037e0:	61bb      	str	r3, [r7, #24]
	  // The order of the three operations is dictated by the C++11
	  // case, where the moves could alter a new element belonging
	  // to the existing vector.  This is an issue only for callers
	  // taking the element by lvalue ref (see last bullet of C++11
	  // [res.on.arguments]).
	  _Alloc_traits::construct(this->_M_impl,
 80037e2:	68fc      	ldr	r4, [r7, #12]
				   __new_start + __elems_before,
 80037e4:	6a3b      	ldr	r3, [r7, #32]
 80037e6:	009b      	lsls	r3, r3, #2
	  _Alloc_traits::construct(this->_M_impl,
 80037e8:	69fa      	ldr	r2, [r7, #28]
 80037ea:	18d5      	adds	r5, r2, r3
 80037ec:	6878      	ldr	r0, [r7, #4]
 80037ee:	f000 f88b 	bl	8003908 <_ZSt7forwardIRKfEOT_RNSt16remove_referenceIS2_E4typeE>
 80037f2:	4603      	mov	r3, r0
 80037f4:	461a      	mov	r2, r3
 80037f6:	4629      	mov	r1, r5
 80037f8:	4620      	mov	r0, r4
 80037fa:	f7ff ffa5 	bl	8003748 <_ZNSt16allocator_traitsISaIfEE9constructIfJRKfEEEvRS0_PT_DpOT0_>
#if __cplusplus >= 201103L
				   std::forward<_Args>(__args)...);
#else
				   __x);
#endif
	  __new_finish = pointer();
 80037fe:	2300      	movs	r3, #0
 8003800:	61bb      	str	r3, [r7, #24]

#if __cplusplus >= 201103L
	  if _GLIBCXX17_CONSTEXPR (_S_use_relocate())
	    {
	      __new_finish = _S_relocate(__old_start, __position.base(),
 8003802:	f107 0308 	add.w	r3, r7, #8
 8003806:	4618      	mov	r0, r3
 8003808:	f000 f92d 	bl	8003a66 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEE4baseEv>
 800380c:	4603      	mov	r3, r0
 800380e:	681c      	ldr	r4, [r3, #0]
					 __new_start, _M_get_Tp_allocator());
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	4618      	mov	r0, r3
 8003814:	f7ff ff49 	bl	80036aa <_ZNSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>
 8003818:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__old_start, __position.base(),
 800381a:	69fa      	ldr	r2, [r7, #28]
 800381c:	4621      	mov	r1, r4
 800381e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003820:	f000 f90d 	bl	8003a3e <_ZNSt6vectorIfSaIfEE11_S_relocateEPfS2_S2_RS0_>
 8003824:	61b8      	str	r0, [r7, #24]

	      ++__new_finish;
 8003826:	69bb      	ldr	r3, [r7, #24]
 8003828:	3304      	adds	r3, #4
 800382a:	61bb      	str	r3, [r7, #24]

	      __new_finish = _S_relocate(__position.base(), __old_finish,
 800382c:	f107 0308 	add.w	r3, r7, #8
 8003830:	4618      	mov	r0, r3
 8003832:	f000 f918 	bl	8003a66 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEE4baseEv>
 8003836:	4603      	mov	r3, r0
 8003838:	681c      	ldr	r4, [r3, #0]
					 __new_finish, _M_get_Tp_allocator());
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	4618      	mov	r0, r3
 800383e:	f7ff ff34 	bl	80036aa <_ZNSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>
 8003842:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 8003844:	69ba      	ldr	r2, [r7, #24]
 8003846:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003848:	4620      	mov	r0, r4
 800384a:	f000 f8f8 	bl	8003a3e <_ZNSt6vectorIfSaIfEE11_S_relocateEPfS2_S2_RS0_>
 800384e:	61b8      	str	r0, [r7, #24]
#if __cplusplus >= 201103L
      if _GLIBCXX17_CONSTEXPR (!_S_use_relocate())
#endif
	std::_Destroy(__old_start, __old_finish, _M_get_Tp_allocator());
      _GLIBCXX_ASAN_ANNOTATE_REINIT;
      _M_deallocate(__old_start,
 8003850:	68f8      	ldr	r0, [r7, #12]
		    this->_M_impl._M_end_of_storage - __old_start);
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	689a      	ldr	r2, [r3, #8]
 8003856:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003858:	1ad3      	subs	r3, r2, r3
 800385a:	109b      	asrs	r3, r3, #2
      _M_deallocate(__old_start,
 800385c:	461a      	mov	r2, r3
 800385e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003860:	f7ff ff10 	bl	8003684 <_ZNSt12_Vector_baseIfSaIfEE13_M_deallocateEPfj>
      this->_M_impl._M_start = __new_start;
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	69fa      	ldr	r2, [r7, #28]
 8003868:	601a      	str	r2, [r3, #0]
      this->_M_impl._M_finish = __new_finish;
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	69ba      	ldr	r2, [r7, #24]
 800386e:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 8003870:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003872:	009b      	lsls	r3, r3, #2
 8003874:	69fa      	ldr	r2, [r7, #28]
 8003876:	441a      	add	r2, r3
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	609a      	str	r2, [r3, #8]
    }
 800387c:	bf00      	nop
 800387e:	3730      	adds	r7, #48	; 0x30
 8003880:	46bd      	mov	sp, r7
 8003882:	bdb0      	pop	{r4, r5, r7, pc}
 8003884:	08025d58 	.word	0x08025d58

08003888 <_ZN9__gnu_cxx13new_allocatorIfEC1Ev>:
      // 2103. propagate_on_container_move_assignment
      typedef std::true_type propagate_on_container_move_assignment;
#endif

      _GLIBCXX20_CONSTEXPR
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8003888:	b480      	push	{r7}
 800388a:	b083      	sub	sp, #12
 800388c:	af00      	add	r7, sp, #0
 800388e:	6078      	str	r0, [r7, #4]
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	4618      	mov	r0, r3
 8003894:	370c      	adds	r7, #12
 8003896:	46bd      	mov	sp, r7
 8003898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800389c:	4770      	bx	lr

0800389e <_ZNSt16allocator_traitsISaIfEE10deallocateERS0_Pfj>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 800389e:	b580      	push	{r7, lr}
 80038a0:	b088      	sub	sp, #32
 80038a2:	af00      	add	r7, sp, #0
 80038a4:	60f8      	str	r0, [r7, #12]
 80038a6:	60b9      	str	r1, [r7, #8]
 80038a8:	607a      	str	r2, [r7, #4]
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	61fb      	str	r3, [r7, #28]
 80038ae:	68bb      	ldr	r3, [r7, #8]
 80038b0:	61bb      	str	r3, [r7, #24]
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	617b      	str	r3, [r7, #20]
      [[__gnu__::__always_inline__]]
      constexpr void
      deallocate(_Tp* __p, size_t __n)
      {
#ifdef __cpp_lib_is_constant_evaluated
	if (std::is_constant_evaluated())
 80038b6:	f7ff f929 	bl	8002b0c <_ZSt21is_constant_evaluatedv>
 80038ba:	4603      	mov	r3, r0
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d003      	beq.n	80038c8 <_ZNSt16allocator_traitsISaIfEE10deallocateERS0_Pfj+0x2a>
	  {
	    ::operator delete(__p);
 80038c0:	69b8      	ldr	r0, [r7, #24]
 80038c2:	f01d fc5b 	bl	802117c <_ZdlPv>
	    return;
 80038c6:	e005      	b.n	80038d4 <_ZNSt16allocator_traitsISaIfEE10deallocateERS0_Pfj+0x36>
	  }
#endif
	__allocator_base<_Tp>::deallocate(__p, __n);
 80038c8:	697a      	ldr	r2, [r7, #20]
 80038ca:	69b9      	ldr	r1, [r7, #24]
 80038cc:	69f8      	ldr	r0, [r7, #28]
 80038ce:	f000 f96a 	bl	8003ba6 <_ZN9__gnu_cxx13new_allocatorIfE10deallocateEPfj>
      { __a.deallocate(__p, __n); }
 80038d2:	bf00      	nop
 80038d4:	bf00      	nop
 80038d6:	3720      	adds	r7, #32
 80038d8:	46bd      	mov	sp, r7
 80038da:	bd80      	pop	{r7, pc}

080038dc <_ZSt8_DestroyIPfEvT_S1_>:
   * a trivial destructor, the compiler should optimize all of this
   * away, otherwise the objects' destructors must be invoked.
   */
  template<typename _ForwardIterator>
    _GLIBCXX20_CONSTEXPR inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 80038dc:	b580      	push	{r7, lr}
 80038de:	b082      	sub	sp, #8
 80038e0:	af00      	add	r7, sp, #0
 80038e2:	6078      	str	r0, [r7, #4]
 80038e4:	6039      	str	r1, [r7, #0]
      // A deleted destructor is trivial, this ensures we reject such types:
      static_assert(is_destructible<_Value_type>::value,
		    "value type is destructible");
#endif
#if __cplusplus > 201703L && defined __cpp_lib_is_constant_evaluated
      if (std::is_constant_evaluated())
 80038e6:	f7ff f911 	bl	8002b0c <_ZSt21is_constant_evaluatedv>
 80038ea:	4603      	mov	r3, r0
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d004      	beq.n	80038fa <_ZSt8_DestroyIPfEvT_S1_+0x1e>
	return _Destroy_aux<false>::__destroy(__first, __last);
 80038f0:	6839      	ldr	r1, [r7, #0]
 80038f2:	6878      	ldr	r0, [r7, #4]
 80038f4:	f000 f8c2 	bl	8003a7c <_ZNSt12_Destroy_auxILb0EE9__destroyIPfEEvT_S3_>
 80038f8:	e003      	b.n	8003902 <_ZSt8_DestroyIPfEvT_S1_+0x26>
#endif
      std::_Destroy_aux<__has_trivial_destructor(_Value_type)>::
	__destroy(__first, __last);
 80038fa:	6839      	ldr	r1, [r7, #0]
 80038fc:	6878      	ldr	r0, [r7, #4]
 80038fe:	f000 f8d6 	bl	8003aae <_ZNSt12_Destroy_auxILb1EE9__destroyIPfEEvT_S3_>
    }
 8003902:	3708      	adds	r7, #8
 8003904:	46bd      	mov	sp, r7
 8003906:	bd80      	pop	{r7, pc}

08003908 <_ZSt7forwardIRKfEOT_RNSt16remove_referenceIS2_E4typeE>:
   *  This function is used to implement "perfect forwarding".
   */
  template<typename _Tp>
    _GLIBCXX_NODISCARD
    constexpr _Tp&&
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8003908:	b480      	push	{r7}
 800390a:	b083      	sub	sp, #12
 800390c:	af00      	add	r7, sp, #0
 800390e:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	4618      	mov	r0, r3
 8003914:	370c      	adds	r7, #12
 8003916:	46bd      	mov	sp, r7
 8003918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800391c:	4770      	bx	lr

0800391e <_ZN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEC1ERKS1_>:

      _GLIBCXX_CONSTEXPR __normal_iterator() _GLIBCXX_NOEXCEPT
      : _M_current(_Iterator()) { }

      explicit _GLIBCXX20_CONSTEXPR
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 800391e:	b480      	push	{r7}
 8003920:	b083      	sub	sp, #12
 8003922:	af00      	add	r7, sp, #0
 8003924:	6078      	str	r0, [r7, #4]
 8003926:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 8003928:	683b      	ldr	r3, [r7, #0]
 800392a:	681a      	ldr	r2, [r3, #0]
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	601a      	str	r2, [r3, #0]
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	4618      	mov	r0, r3
 8003934:	370c      	adds	r7, #12
 8003936:	46bd      	mov	sp, r7
 8003938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800393c:	4770      	bx	lr

0800393e <_ZNKSt6vectorIfSaIfEE12_M_check_lenEjPKc>:
      _M_check_len(size_type __n, const char* __s) const
 800393e:	b590      	push	{r4, r7, lr}
 8003940:	b087      	sub	sp, #28
 8003942:	af00      	add	r7, sp, #0
 8003944:	60f8      	str	r0, [r7, #12]
 8003946:	60b9      	str	r1, [r7, #8]
 8003948:	607a      	str	r2, [r7, #4]
	if (max_size() - size() < __n)
 800394a:	68f8      	ldr	r0, [r7, #12]
 800394c:	f000 f8ba 	bl	8003ac4 <_ZNKSt6vectorIfSaIfEE8max_sizeEv>
 8003950:	4604      	mov	r4, r0
 8003952:	68f8      	ldr	r0, [r7, #12]
 8003954:	f000 f8c7 	bl	8003ae6 <_ZNKSt6vectorIfSaIfEE4sizeEv>
 8003958:	4603      	mov	r3, r0
 800395a:	1ae2      	subs	r2, r4, r3
 800395c:	68bb      	ldr	r3, [r7, #8]
 800395e:	429a      	cmp	r2, r3
 8003960:	bf34      	ite	cc
 8003962:	2301      	movcc	r3, #1
 8003964:	2300      	movcs	r3, #0
 8003966:	b2db      	uxtb	r3, r3
 8003968:	2b00      	cmp	r3, #0
 800396a:	d002      	beq.n	8003972 <_ZNKSt6vectorIfSaIfEE12_M_check_lenEjPKc+0x34>
	  __throw_length_error(__N(__s));
 800396c:	6878      	ldr	r0, [r7, #4]
 800396e:	f01d fc23 	bl	80211b8 <_ZSt20__throw_length_errorPKc>
	const size_type __len = size() + (std::max)(size(), __n);
 8003972:	68f8      	ldr	r0, [r7, #12]
 8003974:	f000 f8b7 	bl	8003ae6 <_ZNKSt6vectorIfSaIfEE4sizeEv>
 8003978:	4604      	mov	r4, r0
 800397a:	68f8      	ldr	r0, [r7, #12]
 800397c:	f000 f8b3 	bl	8003ae6 <_ZNKSt6vectorIfSaIfEE4sizeEv>
 8003980:	4603      	mov	r3, r0
 8003982:	613b      	str	r3, [r7, #16]
 8003984:	f107 0208 	add.w	r2, r7, #8
 8003988:	f107 0310 	add.w	r3, r7, #16
 800398c:	4611      	mov	r1, r2
 800398e:	4618      	mov	r0, r3
 8003990:	f000 f8b9 	bl	8003b06 <_ZSt3maxIjERKT_S2_S2_>
 8003994:	4603      	mov	r3, r0
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	4423      	add	r3, r4
 800399a:	617b      	str	r3, [r7, #20]
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 800399c:	68f8      	ldr	r0, [r7, #12]
 800399e:	f000 f8a2 	bl	8003ae6 <_ZNKSt6vectorIfSaIfEE4sizeEv>
 80039a2:	4602      	mov	r2, r0
 80039a4:	697b      	ldr	r3, [r7, #20]
 80039a6:	4293      	cmp	r3, r2
 80039a8:	d306      	bcc.n	80039b8 <_ZNKSt6vectorIfSaIfEE12_M_check_lenEjPKc+0x7a>
 80039aa:	68f8      	ldr	r0, [r7, #12]
 80039ac:	f000 f88a 	bl	8003ac4 <_ZNKSt6vectorIfSaIfEE8max_sizeEv>
 80039b0:	4602      	mov	r2, r0
 80039b2:	697b      	ldr	r3, [r7, #20]
 80039b4:	4293      	cmp	r3, r2
 80039b6:	d904      	bls.n	80039c2 <_ZNKSt6vectorIfSaIfEE12_M_check_lenEjPKc+0x84>
 80039b8:	68f8      	ldr	r0, [r7, #12]
 80039ba:	f000 f883 	bl	8003ac4 <_ZNKSt6vectorIfSaIfEE8max_sizeEv>
 80039be:	4603      	mov	r3, r0
 80039c0:	e000      	b.n	80039c4 <_ZNKSt6vectorIfSaIfEE12_M_check_lenEjPKc+0x86>
 80039c2:	697b      	ldr	r3, [r7, #20]
      }
 80039c4:	4618      	mov	r0, r3
 80039c6:	371c      	adds	r7, #28
 80039c8:	46bd      	mov	sp, r7
 80039ca:	bd90      	pop	{r4, r7, pc}

080039cc <_ZNSt6vectorIfSaIfEE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 80039cc:	b580      	push	{r7, lr}
 80039ce:	b084      	sub	sp, #16
 80039d0:	af00      	add	r7, sp, #0
 80039d2:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_start); }
 80039d4:	687a      	ldr	r2, [r7, #4]
 80039d6:	f107 030c 	add.w	r3, r7, #12
 80039da:	4611      	mov	r1, r2
 80039dc:	4618      	mov	r0, r3
 80039de:	f7ff ff9e 	bl	800391e <_ZN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEC1ERKS1_>
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	4618      	mov	r0, r3
 80039e6:	3710      	adds	r7, #16
 80039e8:	46bd      	mov	sp, r7
 80039ea:	bd80      	pop	{r7, pc}

080039ec <_ZN9__gnu_cxxmiIPfSt6vectorIfSaIfEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS8_SB_>:
    { return __lhs.base() - __rhs.base(); }

  template<typename _Iterator, typename _Container>
    _GLIBCXX20_CONSTEXPR
    inline typename __normal_iterator<_Iterator, _Container>::difference_type
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
 80039ec:	b590      	push	{r4, r7, lr}
 80039ee:	b083      	sub	sp, #12
 80039f0:	af00      	add	r7, sp, #0
 80039f2:	6078      	str	r0, [r7, #4]
 80039f4:	6039      	str	r1, [r7, #0]
	      const __normal_iterator<_Iterator, _Container>& __rhs)
    _GLIBCXX_NOEXCEPT
    { return __lhs.base() - __rhs.base(); }
 80039f6:	6878      	ldr	r0, [r7, #4]
 80039f8:	f000 f835 	bl	8003a66 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEE4baseEv>
 80039fc:	4603      	mov	r3, r0
 80039fe:	681c      	ldr	r4, [r3, #0]
 8003a00:	6838      	ldr	r0, [r7, #0]
 8003a02:	f000 f830 	bl	8003a66 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEE4baseEv>
 8003a06:	4603      	mov	r3, r0
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	1ae3      	subs	r3, r4, r3
 8003a0c:	109b      	asrs	r3, r3, #2
 8003a0e:	4618      	mov	r0, r3
 8003a10:	370c      	adds	r7, #12
 8003a12:	46bd      	mov	sp, r7
 8003a14:	bd90      	pop	{r4, r7, pc}

08003a16 <_ZNSt12_Vector_baseIfSaIfEE11_M_allocateEj>:
      _M_allocate(size_t __n)
 8003a16:	b580      	push	{r7, lr}
 8003a18:	b082      	sub	sp, #8
 8003a1a:	af00      	add	r7, sp, #0
 8003a1c:	6078      	str	r0, [r7, #4]
 8003a1e:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8003a20:	683b      	ldr	r3, [r7, #0]
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d006      	beq.n	8003a34 <_ZNSt12_Vector_baseIfSaIfEE11_M_allocateEj+0x1e>
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	6839      	ldr	r1, [r7, #0]
 8003a2a:	4618      	mov	r0, r3
 8003a2c:	f000 f87f 	bl	8003b2e <_ZNSt16allocator_traitsISaIfEE8allocateERS0_j>
 8003a30:	4603      	mov	r3, r0
 8003a32:	e000      	b.n	8003a36 <_ZNSt12_Vector_baseIfSaIfEE11_M_allocateEj+0x20>
 8003a34:	2300      	movs	r3, #0
      }
 8003a36:	4618      	mov	r0, r3
 8003a38:	3708      	adds	r7, #8
 8003a3a:	46bd      	mov	sp, r7
 8003a3c:	bd80      	pop	{r7, pc}

08003a3e <_ZNSt6vectorIfSaIfEE11_S_relocateEPfS2_S2_RS0_>:
      _S_relocate(pointer __first, pointer __last, pointer __result,
 8003a3e:	b590      	push	{r4, r7, lr}
 8003a40:	b087      	sub	sp, #28
 8003a42:	af02      	add	r7, sp, #8
 8003a44:	60f8      	str	r0, [r7, #12]
 8003a46:	60b9      	str	r1, [r7, #8]
 8003a48:	607a      	str	r2, [r7, #4]
 8003a4a:	603b      	str	r3, [r7, #0]
	return _S_do_relocate(__first, __last, __result, __alloc, __do_it{});
 8003a4c:	f88d 4000 	strb.w	r4, [sp]
 8003a50:	683b      	ldr	r3, [r7, #0]
 8003a52:	687a      	ldr	r2, [r7, #4]
 8003a54:	68b9      	ldr	r1, [r7, #8]
 8003a56:	68f8      	ldr	r0, [r7, #12]
 8003a58:	f000 f889 	bl	8003b6e <_ZNSt6vectorIfSaIfEE14_S_do_relocateEPfS2_S2_RS0_St17integral_constantIbLb1EE>
 8003a5c:	4603      	mov	r3, r0
      }
 8003a5e:	4618      	mov	r0, r3
 8003a60:	3714      	adds	r7, #20
 8003a62:	46bd      	mov	sp, r7
 8003a64:	bd90      	pop	{r4, r7, pc}

08003a66 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 8003a66:	b480      	push	{r7}
 8003a68:	b083      	sub	sp, #12
 8003a6a:	af00      	add	r7, sp, #0
 8003a6c:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	4618      	mov	r0, r3
 8003a72:	370c      	adds	r7, #12
 8003a74:	46bd      	mov	sp, r7
 8003a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a7a:	4770      	bx	lr

08003a7c <_ZNSt12_Destroy_auxILb0EE9__destroyIPfEEvT_S3_>:
	__destroy(_ForwardIterator __first, _ForwardIterator __last)
 8003a7c:	b580      	push	{r7, lr}
 8003a7e:	b082      	sub	sp, #8
 8003a80:	af00      	add	r7, sp, #0
 8003a82:	6078      	str	r0, [r7, #4]
 8003a84:	6039      	str	r1, [r7, #0]
	  for (; __first != __last; ++__first)
 8003a86:	e009      	b.n	8003a9c <_ZNSt12_Destroy_auxILb0EE9__destroyIPfEEvT_S3_+0x20>
	    std::_Destroy(std::__addressof(*__first));
 8003a88:	6878      	ldr	r0, [r7, #4]
 8003a8a:	f000 f89b 	bl	8003bc4 <_ZSt11__addressofIfEPT_RS0_>
 8003a8e:	4603      	mov	r3, r0
 8003a90:	4618      	mov	r0, r3
 8003a92:	f000 f8a2 	bl	8003bda <_ZSt8_DestroyIfEvPT_>
	  for (; __first != __last; ++__first)
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	3304      	adds	r3, #4
 8003a9a:	607b      	str	r3, [r7, #4]
 8003a9c:	687a      	ldr	r2, [r7, #4]
 8003a9e:	683b      	ldr	r3, [r7, #0]
 8003aa0:	429a      	cmp	r2, r3
 8003aa2:	d1f1      	bne.n	8003a88 <_ZNSt12_Destroy_auxILb0EE9__destroyIPfEEvT_S3_+0xc>
	}
 8003aa4:	bf00      	nop
 8003aa6:	bf00      	nop
 8003aa8:	3708      	adds	r7, #8
 8003aaa:	46bd      	mov	sp, r7
 8003aac:	bd80      	pop	{r7, pc}

08003aae <_ZNSt12_Destroy_auxILb1EE9__destroyIPfEEvT_S3_>:
        __destroy(_ForwardIterator, _ForwardIterator) { }
 8003aae:	b480      	push	{r7}
 8003ab0:	b083      	sub	sp, #12
 8003ab2:	af00      	add	r7, sp, #0
 8003ab4:	6078      	str	r0, [r7, #4]
 8003ab6:	6039      	str	r1, [r7, #0]
 8003ab8:	bf00      	nop
 8003aba:	370c      	adds	r7, #12
 8003abc:	46bd      	mov	sp, r7
 8003abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac2:	4770      	bx	lr

08003ac4 <_ZNKSt6vectorIfSaIfEE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 8003ac4:	b580      	push	{r7, lr}
 8003ac6:	b082      	sub	sp, #8
 8003ac8:	af00      	add	r7, sp, #0
 8003aca:	6078      	str	r0, [r7, #4]
      { return _S_max_size(_M_get_Tp_allocator()); }
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	4618      	mov	r0, r3
 8003ad0:	f000 f8b4 	bl	8003c3c <_ZNKSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>
 8003ad4:	4603      	mov	r3, r0
 8003ad6:	4618      	mov	r0, r3
 8003ad8:	f000 f896 	bl	8003c08 <_ZNSt6vectorIfSaIfEE11_S_max_sizeERKS0_>
 8003adc:	4603      	mov	r3, r0
 8003ade:	4618      	mov	r0, r3
 8003ae0:	3708      	adds	r7, #8
 8003ae2:	46bd      	mov	sp, r7
 8003ae4:	bd80      	pop	{r7, pc}

08003ae6 <_ZNKSt6vectorIfSaIfEE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 8003ae6:	b480      	push	{r7}
 8003ae8:	b083      	sub	sp, #12
 8003aea:	af00      	add	r7, sp, #0
 8003aec:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	685a      	ldr	r2, [r3, #4]
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	1ad3      	subs	r3, r2, r3
 8003af8:	109b      	asrs	r3, r3, #2
 8003afa:	4618      	mov	r0, r3
 8003afc:	370c      	adds	r7, #12
 8003afe:	46bd      	mov	sp, r7
 8003b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b04:	4770      	bx	lr

08003b06 <_ZSt3maxIjERKT_S2_S2_>:
   *  preprocessor macro.
  */
  template<typename _Tp>
    _GLIBCXX14_CONSTEXPR
    inline const _Tp&
    max(const _Tp& __a, const _Tp& __b)
 8003b06:	b480      	push	{r7}
 8003b08:	b083      	sub	sp, #12
 8003b0a:	af00      	add	r7, sp, #0
 8003b0c:	6078      	str	r0, [r7, #4]
 8003b0e:	6039      	str	r1, [r7, #0]
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return  __a < __b ? __b : __a;
      if (__a < __b)
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681a      	ldr	r2, [r3, #0]
 8003b14:	683b      	ldr	r3, [r7, #0]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	429a      	cmp	r2, r3
 8003b1a:	d201      	bcs.n	8003b20 <_ZSt3maxIjERKT_S2_S2_+0x1a>
	return __b;
 8003b1c:	683b      	ldr	r3, [r7, #0]
 8003b1e:	e000      	b.n	8003b22 <_ZSt3maxIjERKT_S2_S2_+0x1c>
      return __a;
 8003b20:	687b      	ldr	r3, [r7, #4]
    }
 8003b22:	4618      	mov	r0, r3
 8003b24:	370c      	adds	r7, #12
 8003b26:	46bd      	mov	sp, r7
 8003b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b2c:	4770      	bx	lr

08003b2e <_ZNSt16allocator_traitsISaIfEE8allocateERS0_j>:
      allocate(allocator_type& __a, size_type __n)
 8003b2e:	b580      	push	{r7, lr}
 8003b30:	b084      	sub	sp, #16
 8003b32:	af00      	add	r7, sp, #0
 8003b34:	6078      	str	r0, [r7, #4]
 8003b36:	6039      	str	r1, [r7, #0]
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	60fb      	str	r3, [r7, #12]
 8003b3c:	683b      	ldr	r3, [r7, #0]
 8003b3e:	60bb      	str	r3, [r7, #8]
	if (std::is_constant_evaluated())
 8003b40:	f7fe ffe4 	bl	8002b0c <_ZSt21is_constant_evaluatedv>
 8003b44:	4603      	mov	r3, r0
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d006      	beq.n	8003b58 <_ZNSt16allocator_traitsISaIfEE8allocateERS0_j+0x2a>
	  return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8003b4a:	68bb      	ldr	r3, [r7, #8]
 8003b4c:	009b      	lsls	r3, r3, #2
 8003b4e:	4618      	mov	r0, r3
 8003b50:	f01d fb18 	bl	8021184 <_Znwj>
 8003b54:	4603      	mov	r3, r0
 8003b56:	e006      	b.n	8003b66 <_ZNSt16allocator_traitsISaIfEE8allocateERS0_j+0x38>
	return __allocator_base<_Tp>::allocate(__n, 0);
 8003b58:	2200      	movs	r2, #0
 8003b5a:	68b9      	ldr	r1, [r7, #8]
 8003b5c:	68f8      	ldr	r0, [r7, #12]
 8003b5e:	f000 f8b5 	bl	8003ccc <_ZN9__gnu_cxx13new_allocatorIfE8allocateEjPKv>
 8003b62:	4603      	mov	r3, r0
 8003b64:	bf00      	nop
      { return __a.allocate(__n); }
 8003b66:	4618      	mov	r0, r3
 8003b68:	3710      	adds	r7, #16
 8003b6a:	46bd      	mov	sp, r7
 8003b6c:	bd80      	pop	{r7, pc}

08003b6e <_ZNSt6vectorIfSaIfEE14_S_do_relocateEPfS2_S2_RS0_St17integral_constantIbLb1EE>:
      _S_do_relocate(pointer __first, pointer __last, pointer __result,
 8003b6e:	b580      	push	{r7, lr}
 8003b70:	b084      	sub	sp, #16
 8003b72:	af00      	add	r7, sp, #0
 8003b74:	60f8      	str	r0, [r7, #12]
 8003b76:	60b9      	str	r1, [r7, #8]
 8003b78:	607a      	str	r2, [r7, #4]
 8003b7a:	603b      	str	r3, [r7, #0]
	return std::__relocate_a(__first, __last, __result, __alloc);
 8003b7c:	683b      	ldr	r3, [r7, #0]
 8003b7e:	687a      	ldr	r2, [r7, #4]
 8003b80:	68b9      	ldr	r1, [r7, #8]
 8003b82:	68f8      	ldr	r0, [r7, #12]
 8003b84:	f000 f865 	bl	8003c52 <_ZSt12__relocate_aIPfS0_SaIfEET0_T_S3_S2_RT1_>
 8003b88:	4603      	mov	r3, r0
      }
 8003b8a:	4618      	mov	r0, r3
 8003b8c:	3710      	adds	r7, #16
 8003b8e:	46bd      	mov	sp, r7
 8003b90:	bd80      	pop	{r7, pc}

08003b92 <_ZSt10destroy_atIfEvPT_>:
    destroy_at(_Tp* __location)
 8003b92:	b480      	push	{r7}
 8003b94:	b083      	sub	sp, #12
 8003b96:	af00      	add	r7, sp, #0
 8003b98:	6078      	str	r0, [r7, #4]
    }
 8003b9a:	bf00      	nop
 8003b9c:	370c      	adds	r7, #12
 8003b9e:	46bd      	mov	sp, r7
 8003ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba4:	4770      	bx	lr

08003ba6 <_ZN9__gnu_cxx13new_allocatorIfE10deallocateEPfj>:
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(_Tp* __p, size_type __t __attribute__ ((__unused__)))
 8003ba6:	b580      	push	{r7, lr}
 8003ba8:	b084      	sub	sp, #16
 8003baa:	af00      	add	r7, sp, #0
 8003bac:	60f8      	str	r0, [r7, #12]
 8003bae:	60b9      	str	r1, [r7, #8]
 8003bb0:	607a      	str	r2, [r7, #4]
# endif
			      std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	::operator delete(__p
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	009b      	lsls	r3, r3, #2
 8003bb6:	4619      	mov	r1, r3
 8003bb8:	68b8      	ldr	r0, [r7, #8]
 8003bba:	f01d fae1 	bl	8021180 <_ZdlPvj>
#if __cpp_sized_deallocation
			  , __t * sizeof(_Tp)
#endif
			 );
      }
 8003bbe:	3710      	adds	r7, #16
 8003bc0:	46bd      	mov	sp, r7
 8003bc2:	bd80      	pop	{r7, pc}

08003bc4 <_ZSt11__addressofIfEPT_RS0_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 8003bc4:	b480      	push	{r7}
 8003bc6:	b083      	sub	sp, #12
 8003bc8:	af00      	add	r7, sp, #0
 8003bca:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	4618      	mov	r0, r3
 8003bd0:	370c      	adds	r7, #12
 8003bd2:	46bd      	mov	sp, r7
 8003bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd8:	4770      	bx	lr

08003bda <_ZSt8_DestroyIfEvPT_>:
    _Destroy(_Tp* __pointer)
 8003bda:	b580      	push	{r7, lr}
 8003bdc:	b082      	sub	sp, #8
 8003bde:	af00      	add	r7, sp, #0
 8003be0:	6078      	str	r0, [r7, #4]
      std::destroy_at(__pointer);
 8003be2:	6878      	ldr	r0, [r7, #4]
 8003be4:	f7ff ffd5 	bl	8003b92 <_ZSt10destroy_atIfEvPT_>
    }
 8003be8:	bf00      	nop
 8003bea:	3708      	adds	r7, #8
 8003bec:	46bd      	mov	sp, r7
 8003bee:	bd80      	pop	{r7, pc}

08003bf0 <_ZNSt16allocator_traitsISaIfEE8max_sizeERKS0_>:
      max_size(const allocator_type& __a __attribute__((__unused__))) noexcept
 8003bf0:	b480      	push	{r7}
 8003bf2:	b083      	sub	sp, #12
 8003bf4:	af00      	add	r7, sp, #0
 8003bf6:	6078      	str	r0, [r7, #4]
	return size_t(-1) / sizeof(value_type);
 8003bf8:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
      }
 8003bfc:	4618      	mov	r0, r3
 8003bfe:	370c      	adds	r7, #12
 8003c00:	46bd      	mov	sp, r7
 8003c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c06:	4770      	bx	lr

08003c08 <_ZNSt6vectorIfSaIfEE11_S_max_sizeERKS0_>:
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 8003c08:	b580      	push	{r7, lr}
 8003c0a:	b084      	sub	sp, #16
 8003c0c:	af00      	add	r7, sp, #0
 8003c0e:	6078      	str	r0, [r7, #4]
	const size_t __diffmax
 8003c10:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 8003c14:	60fb      	str	r3, [r7, #12]
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 8003c16:	6878      	ldr	r0, [r7, #4]
 8003c18:	f7ff ffea 	bl	8003bf0 <_ZNSt16allocator_traitsISaIfEE8max_sizeERKS0_>
 8003c1c:	4603      	mov	r3, r0
 8003c1e:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 8003c20:	f107 0208 	add.w	r2, r7, #8
 8003c24:	f107 030c 	add.w	r3, r7, #12
 8003c28:	4611      	mov	r1, r2
 8003c2a:	4618      	mov	r0, r3
 8003c2c:	f000 f82e 	bl	8003c8c <_ZSt3minIjERKT_S2_S2_>
 8003c30:	4603      	mov	r3, r0
 8003c32:	681b      	ldr	r3, [r3, #0]
      }
 8003c34:	4618      	mov	r0, r3
 8003c36:	3710      	adds	r7, #16
 8003c38:	46bd      	mov	sp, r7
 8003c3a:	bd80      	pop	{r7, pc}

08003c3c <_ZNKSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 8003c3c:	b480      	push	{r7}
 8003c3e:	b083      	sub	sp, #12
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	4618      	mov	r0, r3
 8003c48:	370c      	adds	r7, #12
 8003c4a:	46bd      	mov	sp, r7
 8003c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c50:	4770      	bx	lr

08003c52 <_ZSt12__relocate_aIPfS0_SaIfEET0_T_S3_S2_RT1_>:
    }

  template <typename _InputIterator, typename _ForwardIterator,
	    typename _Allocator>
    inline _ForwardIterator
    __relocate_a(_InputIterator __first, _InputIterator __last,
 8003c52:	b5b0      	push	{r4, r5, r7, lr}
 8003c54:	b084      	sub	sp, #16
 8003c56:	af00      	add	r7, sp, #0
 8003c58:	60f8      	str	r0, [r7, #12]
 8003c5a:	60b9      	str	r1, [r7, #8]
 8003c5c:	607a      	str	r2, [r7, #4]
 8003c5e:	603b      	str	r3, [r7, #0]
		 _ForwardIterator __result, _Allocator& __alloc)
    noexcept(noexcept(__relocate_a_1(std::__niter_base(__first),
				     std::__niter_base(__last),
				     std::__niter_base(__result), __alloc)))
    {
      return __relocate_a_1(std::__niter_base(__first),
 8003c60:	68f8      	ldr	r0, [r7, #12]
 8003c62:	f000 f85d 	bl	8003d20 <_ZSt12__niter_baseIPfET_S1_>
 8003c66:	4604      	mov	r4, r0
 8003c68:	68b8      	ldr	r0, [r7, #8]
 8003c6a:	f000 f859 	bl	8003d20 <_ZSt12__niter_baseIPfET_S1_>
 8003c6e:	4605      	mov	r5, r0
 8003c70:	6878      	ldr	r0, [r7, #4]
 8003c72:	f000 f855 	bl	8003d20 <_ZSt12__niter_baseIPfET_S1_>
 8003c76:	4602      	mov	r2, r0
 8003c78:	683b      	ldr	r3, [r7, #0]
 8003c7a:	4629      	mov	r1, r5
 8003c7c:	4620      	mov	r0, r4
 8003c7e:	f000 f85a 	bl	8003d36 <_ZSt14__relocate_a_1IffENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS2_E4typeES4_S4_S4_RSaIT0_E>
 8003c82:	4603      	mov	r3, r0
			    std::__niter_base(__last),
			    std::__niter_base(__result), __alloc);
    }
 8003c84:	4618      	mov	r0, r3
 8003c86:	3710      	adds	r7, #16
 8003c88:	46bd      	mov	sp, r7
 8003c8a:	bdb0      	pop	{r4, r5, r7, pc}

08003c8c <_ZSt3minIjERKT_S2_S2_>:
    min(const _Tp& __a, const _Tp& __b)
 8003c8c:	b480      	push	{r7}
 8003c8e:	b083      	sub	sp, #12
 8003c90:	af00      	add	r7, sp, #0
 8003c92:	6078      	str	r0, [r7, #4]
 8003c94:	6039      	str	r1, [r7, #0]
      if (__b < __a)
 8003c96:	683b      	ldr	r3, [r7, #0]
 8003c98:	681a      	ldr	r2, [r3, #0]
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	429a      	cmp	r2, r3
 8003ca0:	d201      	bcs.n	8003ca6 <_ZSt3minIjERKT_S2_S2_+0x1a>
	return __b;
 8003ca2:	683b      	ldr	r3, [r7, #0]
 8003ca4:	e000      	b.n	8003ca8 <_ZSt3minIjERKT_S2_S2_+0x1c>
      return __a;
 8003ca6:	687b      	ldr	r3, [r7, #4]
    }
 8003ca8:	4618      	mov	r0, r3
 8003caa:	370c      	adds	r7, #12
 8003cac:	46bd      	mov	sp, r7
 8003cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb2:	4770      	bx	lr

08003cb4 <_ZNK9__gnu_cxx13new_allocatorIfE11_M_max_sizeEv>:
	{ return false; }
#endif

    private:
      _GLIBCXX_CONSTEXPR size_type
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 8003cb4:	b480      	push	{r7}
 8003cb6:	b083      	sub	sp, #12
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	6078      	str	r0, [r7, #4]
      {
#if __PTRDIFF_MAX__ < __SIZE_MAX__
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8003cbc:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
#else
	return std::size_t(-1) / sizeof(_Tp);
#endif
      }
 8003cc0:	4618      	mov	r0, r3
 8003cc2:	370c      	adds	r7, #12
 8003cc4:	46bd      	mov	sp, r7
 8003cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cca:	4770      	bx	lr

08003ccc <_ZN9__gnu_cxx13new_allocatorIfE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8003ccc:	b580      	push	{r7, lr}
 8003cce:	b084      	sub	sp, #16
 8003cd0:	af00      	add	r7, sp, #0
 8003cd2:	60f8      	str	r0, [r7, #12]
 8003cd4:	60b9      	str	r1, [r7, #8]
 8003cd6:	607a      	str	r2, [r7, #4]
	if (__builtin_expect(__n > this->_M_max_size(), false))
 8003cd8:	68f8      	ldr	r0, [r7, #12]
 8003cda:	f7ff ffeb 	bl	8003cb4 <_ZNK9__gnu_cxx13new_allocatorIfE11_M_max_sizeEv>
 8003cde:	4602      	mov	r2, r0
 8003ce0:	68bb      	ldr	r3, [r7, #8]
 8003ce2:	4293      	cmp	r3, r2
 8003ce4:	bf8c      	ite	hi
 8003ce6:	2301      	movhi	r3, #1
 8003ce8:	2300      	movls	r3, #0
 8003cea:	b2db      	uxtb	r3, r3
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	bf14      	ite	ne
 8003cf0:	2301      	movne	r3, #1
 8003cf2:	2300      	moveq	r3, #0
 8003cf4:	b2db      	uxtb	r3, r3
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d007      	beq.n	8003d0a <_ZN9__gnu_cxx13new_allocatorIfE8allocateEjPKv+0x3e>
	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
 8003cfa:	68bb      	ldr	r3, [r7, #8]
 8003cfc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d00:	d301      	bcc.n	8003d06 <_ZN9__gnu_cxx13new_allocatorIfE8allocateEjPKv+0x3a>
	      std::__throw_bad_array_new_length();
 8003d02:	f01d fa56 	bl	80211b2 <_ZSt28__throw_bad_array_new_lengthv>
	    std::__throw_bad_alloc();
 8003d06:	f01d fa51 	bl	80211ac <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8003d0a:	68bb      	ldr	r3, [r7, #8]
 8003d0c:	009b      	lsls	r3, r3, #2
 8003d0e:	4618      	mov	r0, r3
 8003d10:	f01d fa38 	bl	8021184 <_Znwj>
 8003d14:	4603      	mov	r3, r0
 8003d16:	bf00      	nop
      }
 8003d18:	4618      	mov	r0, r3
 8003d1a:	3710      	adds	r7, #16
 8003d1c:	46bd      	mov	sp, r7
 8003d1e:	bd80      	pop	{r7, pc}

08003d20 <_ZSt12__niter_baseIPfET_S1_>:
  // Fallback implementation of the function in bits/stl_iterator.h used to
  // remove the __normal_iterator wrapper. See copy, fill, ...
  template<typename _Iterator>
    _GLIBCXX20_CONSTEXPR
    inline _Iterator
    __niter_base(_Iterator __it)
 8003d20:	b480      	push	{r7}
 8003d22:	b083      	sub	sp, #12
 8003d24:	af00      	add	r7, sp, #0
 8003d26:	6078      	str	r0, [r7, #4]
    _GLIBCXX_NOEXCEPT_IF(std::is_nothrow_copy_constructible<_Iterator>::value)
    { return __it; }
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	4618      	mov	r0, r3
 8003d2c:	370c      	adds	r7, #12
 8003d2e:	46bd      	mov	sp, r7
 8003d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d34:	4770      	bx	lr

08003d36 <_ZSt14__relocate_a_1IffENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS2_E4typeES4_S4_S4_RSaIT0_E>:
    __relocate_a_1(_Tp* __first, _Tp* __last,
 8003d36:	b580      	push	{r7, lr}
 8003d38:	b086      	sub	sp, #24
 8003d3a:	af00      	add	r7, sp, #0
 8003d3c:	60f8      	str	r0, [r7, #12]
 8003d3e:	60b9      	str	r1, [r7, #8]
 8003d40:	607a      	str	r2, [r7, #4]
 8003d42:	603b      	str	r3, [r7, #0]
      ptrdiff_t __count = __last - __first;
 8003d44:	68ba      	ldr	r2, [r7, #8]
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	1ad3      	subs	r3, r2, r3
 8003d4a:	109b      	asrs	r3, r3, #2
 8003d4c:	617b      	str	r3, [r7, #20]
      if (__count > 0)
 8003d4e:	697b      	ldr	r3, [r7, #20]
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	dd06      	ble.n	8003d62 <_ZSt14__relocate_a_1IffENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS2_E4typeES4_S4_S4_RSaIT0_E+0x2c>
	__builtin_memmove(__result, __first, __count * sizeof(_Tp));
 8003d54:	697b      	ldr	r3, [r7, #20]
 8003d56:	009b      	lsls	r3, r3, #2
 8003d58:	461a      	mov	r2, r3
 8003d5a:	68f9      	ldr	r1, [r7, #12]
 8003d5c:	6878      	ldr	r0, [r7, #4]
 8003d5e:	f020 fd0e 	bl	802477e <memmove>
      return __result + __count;
 8003d62:	697b      	ldr	r3, [r7, #20]
 8003d64:	009b      	lsls	r3, r3, #2
 8003d66:	687a      	ldr	r2, [r7, #4]
 8003d68:	4413      	add	r3, r2
    }
 8003d6a:	4618      	mov	r0, r3
 8003d6c:	3718      	adds	r7, #24
 8003d6e:	46bd      	mov	sp, r7
 8003d70:	bd80      	pop	{r7, pc}

08003d72 <_ZN16LineSensorData_sD1Ev>:
	float position_front;
	float position_rear;

	std::vector<float> front;
	std::vector<float> rear;
}LineSensorData_s;
 8003d72:	b580      	push	{r7, lr}
 8003d74:	b082      	sub	sp, #8
 8003d76:	af00      	add	r7, sp, #0
 8003d78:	6078      	str	r0, [r7, #4]
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	33d4      	adds	r3, #212	; 0xd4
 8003d7e:	4618      	mov	r0, r3
 8003d80:	f7ff fc12 	bl	80035a8 <_ZNSt6vectorIfSaIfEED1Ev>
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	33c8      	adds	r3, #200	; 0xc8
 8003d88:	4618      	mov	r0, r3
 8003d8a:	f7ff fc0d 	bl	80035a8 <_ZNSt6vectorIfSaIfEED1Ev>
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	4618      	mov	r0, r3
 8003d92:	3708      	adds	r7, #8
 8003d94:	46bd      	mov	sp, r7
 8003d96:	bd80      	pop	{r7, pc}

08003d98 <_Z41__static_initialization_and_destruction_0ii>:
 8003d98:	b580      	push	{r7, lr}
 8003d9a:	b082      	sub	sp, #8
 8003d9c:	af00      	add	r7, sp, #0
 8003d9e:	6078      	str	r0, [r7, #4]
 8003da0:	6039      	str	r1, [r7, #0]
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	2b01      	cmp	r3, #1
 8003da6:	d116      	bne.n	8003dd6 <_Z41__static_initialization_and_destruction_0ii+0x3e>
 8003da8:	683b      	ldr	r3, [r7, #0]
 8003daa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003dae:	4293      	cmp	r3, r2
 8003db0:	d111      	bne.n	8003dd6 <_Z41__static_initialization_and_destruction_0ii+0x3e>
LineSensorData_s ls_data = {0u};
 8003db2:	4b10      	ldr	r3, [pc, #64]	; (8003df4 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 8003db4:	33c8      	adds	r3, #200	; 0xc8
 8003db6:	2200      	movs	r2, #0
 8003db8:	601a      	str	r2, [r3, #0]
 8003dba:	605a      	str	r2, [r3, #4]
 8003dbc:	609a      	str	r2, [r3, #8]
 8003dbe:	480e      	ldr	r0, [pc, #56]	; (8003df8 <_Z41__static_initialization_and_destruction_0ii+0x60>)
 8003dc0:	f7fe fed1 	bl	8002b66 <_ZNSt6vectorIfSaIfEEC1Ev>
 8003dc4:	4b0b      	ldr	r3, [pc, #44]	; (8003df4 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 8003dc6:	33d4      	adds	r3, #212	; 0xd4
 8003dc8:	2200      	movs	r2, #0
 8003dca:	601a      	str	r2, [r3, #0]
 8003dcc:	605a      	str	r2, [r3, #4]
 8003dce:	609a      	str	r2, [r3, #8]
 8003dd0:	480a      	ldr	r0, [pc, #40]	; (8003dfc <_Z41__static_initialization_and_destruction_0ii+0x64>)
 8003dd2:	f7fe fec8 	bl	8002b66 <_ZNSt6vectorIfSaIfEEC1Ev>
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d107      	bne.n	8003dec <_Z41__static_initialization_and_destruction_0ii+0x54>
 8003ddc:	683b      	ldr	r3, [r7, #0]
 8003dde:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003de2:	4293      	cmp	r3, r2
 8003de4:	d102      	bne.n	8003dec <_Z41__static_initialization_and_destruction_0ii+0x54>
 8003de6:	4803      	ldr	r0, [pc, #12]	; (8003df4 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 8003de8:	f7ff ffc3 	bl	8003d72 <_ZN16LineSensorData_sD1Ev>
}
 8003dec:	bf00      	nop
 8003dee:	3708      	adds	r7, #8
 8003df0:	46bd      	mov	sp, r7
 8003df2:	bd80      	pop	{r7, pc}
 8003df4:	200001c0 	.word	0x200001c0
 8003df8:	20000288 	.word	0x20000288
 8003dfc:	20000294 	.word	0x20000294

08003e00 <_GLOBAL__sub_I_ls_data>:
 8003e00:	b580      	push	{r7, lr}
 8003e02:	af00      	add	r7, sp, #0
 8003e04:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8003e08:	2001      	movs	r0, #1
 8003e0a:	f7ff ffc5 	bl	8003d98 <_Z41__static_initialization_and_destruction_0ii>
 8003e0e:	bd80      	pop	{r7, pc}

08003e10 <_GLOBAL__sub_D_ls_data>:
 8003e10:	b580      	push	{r7, lr}
 8003e12:	af00      	add	r7, sp, #0
 8003e14:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8003e18:	2000      	movs	r0, #0
 8003e1a:	f7ff ffbd 	bl	8003d98 <_Z41__static_initialization_and_destruction_0ii>
 8003e1e:	bd80      	pop	{r7, pc}

08003e20 <_ZSt3absf>:
  abs(double __x)
  { return __builtin_fabs(__x); }

  inline _GLIBCXX_CONSTEXPR float
  abs(float __x)
  { return __builtin_fabsf(__x); }
 8003e20:	b480      	push	{r7}
 8003e22:	b083      	sub	sp, #12
 8003e24:	af00      	add	r7, sp, #0
 8003e26:	ed87 0a01 	vstr	s0, [r7, #4]
 8003e2a:	edd7 7a01 	vldr	s15, [r7, #4]
 8003e2e:	eef0 7ae7 	vabs.f32	s15, s15
 8003e32:	eeb0 0a67 	vmov.f32	s0, s15
 8003e36:	370c      	adds	r7, #12
 8003e38:	46bd      	mov	sp, r7
 8003e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e3e:	4770      	bx	lr

08003e40 <_ZSt5isnanf>:
#endif

#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO_FP
  constexpr bool
  isnan(float __x)
  { return __builtin_isnan(__x); }
 8003e40:	b480      	push	{r7}
 8003e42:	b083      	sub	sp, #12
 8003e44:	af00      	add	r7, sp, #0
 8003e46:	ed87 0a01 	vstr	s0, [r7, #4]
 8003e4a:	ed97 7a01 	vldr	s14, [r7, #4]
 8003e4e:	edd7 7a01 	vldr	s15, [r7, #4]
 8003e52:	eeb4 7a67 	vcmp.f32	s14, s15
 8003e56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003e5a:	bf6c      	ite	vs
 8003e5c:	2301      	movvs	r3, #1
 8003e5e:	2300      	movvc	r3, #0
 8003e60:	b2db      	uxtb	r3, r3
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	bf14      	ite	ne
 8003e66:	2301      	movne	r3, #1
 8003e68:	2300      	moveq	r3, #0
 8003e6a:	b2db      	uxtb	r3, r3
 8003e6c:	4618      	mov	r0, r3
 8003e6e:	370c      	adds	r7, #12
 8003e70:	46bd      	mov	sp, r7
 8003e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e76:	4770      	bx	lr

08003e78 <_ZN3PIDC1Efffffffff>:
};

class PID
{
public:
    PID(float kp, float ki, float kd, float tau, float T, float minOutput, float maxOutput, float deadband, float derivativeFilterAlpha)
 8003e78:	b480      	push	{r7}
 8003e7a:	b08b      	sub	sp, #44	; 0x2c
 8003e7c:	af00      	add	r7, sp, #0
 8003e7e:	6278      	str	r0, [r7, #36]	; 0x24
 8003e80:	ed87 0a08 	vstr	s0, [r7, #32]
 8003e84:	edc7 0a07 	vstr	s1, [r7, #28]
 8003e88:	ed87 1a06 	vstr	s2, [r7, #24]
 8003e8c:	edc7 1a05 	vstr	s3, [r7, #20]
 8003e90:	ed87 2a04 	vstr	s4, [r7, #16]
 8003e94:	edc7 2a03 	vstr	s5, [r7, #12]
 8003e98:	ed87 3a02 	vstr	s6, [r7, #8]
 8003e9c:	edc7 3a01 	vstr	s7, [r7, #4]
 8003ea0:	ed87 4a00 	vstr	s8, [r7]
        : kp_(kp), ki_(ki), kd_(kd), tau_(tau), T_(T), minOutput_(minOutput), maxOutput_(maxOutput), deadband_(deadband), derivativeFilterAlpha_(derivativeFilterAlpha)
 8003ea4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ea6:	6a3a      	ldr	r2, [r7, #32]
 8003ea8:	601a      	str	r2, [r3, #0]
 8003eaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eac:	69fa      	ldr	r2, [r7, #28]
 8003eae:	605a      	str	r2, [r3, #4]
 8003eb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eb2:	69ba      	ldr	r2, [r7, #24]
 8003eb4:	609a      	str	r2, [r3, #8]
 8003eb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eb8:	697a      	ldr	r2, [r7, #20]
 8003eba:	60da      	str	r2, [r3, #12]
 8003ebc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ebe:	693a      	ldr	r2, [r7, #16]
 8003ec0:	611a      	str	r2, [r3, #16]
 8003ec2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ec4:	68fa      	ldr	r2, [r7, #12]
 8003ec6:	615a      	str	r2, [r3, #20]
 8003ec8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eca:	68ba      	ldr	r2, [r7, #8]
 8003ecc:	619a      	str	r2, [r3, #24]
 8003ece:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ed0:	687a      	ldr	r2, [r7, #4]
 8003ed2:	61da      	str	r2, [r3, #28]
 8003ed4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ed6:	683a      	ldr	r2, [r7, #0]
 8003ed8:	621a      	str	r2, [r3, #32]
 8003eda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003edc:	f04f 0200 	mov.w	r2, #0
 8003ee0:	625a      	str	r2, [r3, #36]	; 0x24
 8003ee2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ee4:	f04f 0200 	mov.w	r2, #0
 8003ee8:	629a      	str	r2, [r3, #40]	; 0x28
 8003eea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eec:	f04f 0200 	mov.w	r2, #0
 8003ef0:	62da      	str	r2, [r3, #44]	; 0x2c
    {
    }
 8003ef2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ef4:	4618      	mov	r0, r3
 8003ef6:	372c      	adds	r7, #44	; 0x2c
 8003ef8:	46bd      	mov	sp, r7
 8003efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003efe:	4770      	bx	lr

08003f00 <_ZN3PIDD1Ev>:

    ~PID() {}
 8003f00:	b480      	push	{r7}
 8003f02:	b083      	sub	sp, #12
 8003f04:	af00      	add	r7, sp, #0
 8003f06:	6078      	str	r0, [r7, #4]
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	4618      	mov	r0, r3
 8003f0c:	370c      	adds	r7, #12
 8003f0e:	46bd      	mov	sp, r7
 8003f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f14:	4770      	bx	lr
	...

08003f18 <_ZN3PID6updateEfff>:
    	kp_                    = kp;
		ki_                    = ki;
		kd_                    = kd;
    }

    float update(float setpoint, float processVariable, float dt)
 8003f18:	b580      	push	{r7, lr}
 8003f1a:	b08a      	sub	sp, #40	; 0x28
 8003f1c:	af00      	add	r7, sp, #0
 8003f1e:	60f8      	str	r0, [r7, #12]
 8003f20:	ed87 0a02 	vstr	s0, [r7, #8]
 8003f24:	edc7 0a01 	vstr	s1, [r7, #4]
 8003f28:	ed87 1a00 	vstr	s2, [r7]
    {
        // Small value to avoid division by zero
        const float epsilon = std::numeric_limits<float>::epsilon();
 8003f2c:	f04f 5350 	mov.w	r3, #872415232	; 0x34000000
 8003f30:	623b      	str	r3, [r7, #32]

        // Check if the time step is very close to zero, return zero output to avoid numerical issues
        if (std::abs(dt) < epsilon) { return 0.0f; }
 8003f32:	ed97 0a00 	vldr	s0, [r7]
 8003f36:	f7ff ff73 	bl	8003e20 <_ZSt3absf>
 8003f3a:	eef0 7a40 	vmov.f32	s15, s0
 8003f3e:	ed9f 7a8a 	vldr	s14, [pc, #552]	; 8004168 <_ZN3PID6updateEfff+0x250>
 8003f42:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003f46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003f4a:	bf4c      	ite	mi
 8003f4c:	2301      	movmi	r3, #1
 8003f4e:	2300      	movpl	r3, #0
 8003f50:	b2db      	uxtb	r3, r3
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d002      	beq.n	8003f5c <_ZN3PID6updateEfff+0x44>
 8003f56:	f04f 0300 	mov.w	r3, #0
 8003f5a:	e0fd      	b.n	8004158 <_ZN3PID6updateEfff+0x240>

        // Calculate the current error between the setpoint and the process variable
        float error = setpoint - processVariable;
 8003f5c:	ed97 7a02 	vldr	s14, [r7, #8]
 8003f60:	edd7 7a01 	vldr	s15, [r7, #4]
 8003f64:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003f68:	edc7 7a07 	vstr	s15, [r7, #28]

        // Check if a zero-crossing has occurred (change in sign of error)
        bool zeroCrossed = (prevError_ * error) < 0.0f;
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 8003f72:	edd7 7a07 	vldr	s15, [r7, #28]
 8003f76:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003f7a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003f7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003f82:	bf4c      	ite	mi
 8003f84:	2301      	movmi	r3, #1
 8003f86:	2300      	movpl	r3, #0
 8003f88:	76fb      	strb	r3, [r7, #27]

        // Update the integral term if no zero-crossing has occurred
        if (!zeroCrossed)
 8003f8a:	7efb      	ldrb	r3, [r7, #27]
 8003f8c:	f083 0301 	eor.w	r3, r3, #1
 8003f90:	b2db      	uxtb	r3, r3
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d05e      	beq.n	8004054 <_ZN3PID6updateEfff+0x13c>
        {
            // Calculate the integral term without considering saturation
            float unsaturatedIntegral = integral_;
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f9a:	627b      	str	r3, [r7, #36]	; 0x24

            // Integrate positive error if within bounds
            if (error > 0.0f && unsaturatedIntegral < maxOutput_) { unsaturatedIntegral += (error * dt); }
 8003f9c:	edd7 7a07 	vldr	s15, [r7, #28]
 8003fa0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003fa4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003fa8:	dd16      	ble.n	8003fd8 <_ZN3PID6updateEfff+0xc0>
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	edd3 7a06 	vldr	s15, [r3, #24]
 8003fb0:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8003fb4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003fb8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003fbc:	d50c      	bpl.n	8003fd8 <_ZN3PID6updateEfff+0xc0>
 8003fbe:	ed97 7a07 	vldr	s14, [r7, #28]
 8003fc2:	edd7 7a00 	vldr	s15, [r7]
 8003fc6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003fca:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8003fce:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003fd2:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
 8003fd6:	e01c      	b.n	8004012 <_ZN3PID6updateEfff+0xfa>
            // Integrate negative error if within bounds
            else if (error < 0.0f && unsaturatedIntegral > minOutput_) { unsaturatedIntegral += (error * dt); }
 8003fd8:	edd7 7a07 	vldr	s15, [r7, #28]
 8003fdc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003fe0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003fe4:	d515      	bpl.n	8004012 <_ZN3PID6updateEfff+0xfa>
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	edd3 7a05 	vldr	s15, [r3, #20]
 8003fec:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8003ff0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003ff4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ff8:	dd0b      	ble.n	8004012 <_ZN3PID6updateEfff+0xfa>
 8003ffa:	ed97 7a07 	vldr	s14, [r7, #28]
 8003ffe:	edd7 7a00 	vldr	s15, [r7]
 8004002:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004006:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800400a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800400e:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24

            // Handle NaN case: Reset unsaturated integral term to zero
            if (std::isnan(unsaturatedIntegral)) { unsaturatedIntegral = 0.0f; }
 8004012:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 8004016:	f7ff ff13 	bl	8003e40 <_ZSt5isnanf>
 800401a:	4603      	mov	r3, r0
 800401c:	2b00      	cmp	r3, #0
 800401e:	d002      	beq.n	8004026 <_ZN3PID6updateEfff+0x10e>
 8004020:	f04f 0300 	mov.w	r3, #0
 8004024:	627b      	str	r3, [r7, #36]	; 0x24

            // Calculate the adjustment needed due to saturation
            float deltaIntegral = unsaturatedIntegral - integral_;
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 800402c:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8004030:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004034:	edc7 7a05 	vstr	s15, [r7, #20]

            // Back-calculation: Adjust the integral term based on the impact of saturation
            integral_ += (error * dt)/* - deltaIntegral*/;
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 800403e:	edd7 6a07 	vldr	s13, [r7, #28]
 8004042:	edd7 7a00 	vldr	s15, [r7]
 8004046:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800404a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
        {
            // Zero-crossing deadband: Do not update the integral term
        }

        // Anti-windup: Limit the integral term to the specified range
        integral_ = std::clamp(integral_, minOutput_, maxOutput_);
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	f103 0028 	add.w	r0, r3, #40	; 0x28
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	f103 0114 	add.w	r1, r3, #20
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	3318      	adds	r3, #24
 8004064:	461a      	mov	r2, r3
 8004066:	f000 f9af 	bl	80043c8 <_ZSt5clampIfERKT_S2_S2_S2_>
 800406a:	4603      	mov	r3, r0
 800406c:	681a      	ldr	r2, [r3, #0]
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	629a      	str	r2, [r3, #40]	; 0x28
        // Deadband: Scale the integral term based on the proximity to the deadband
        //float deadbandFactor = 1.0f - std::min(1.0f, std::abs(error) / (deadband_ + epsilon));
        //integral_ *= deadbandFactor;

        // Calculate the derivative term with low-pass filtering
        derivative_ = (1.0f - derivativeFilterAlpha_) * derivative_ + derivativeFilterAlpha_ * (error - prevError_) / dt;
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	edd3 7a08 	vldr	s15, [r3, #32]
 8004078:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800407c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8004086:	ee27 7a27 	vmul.f32	s14, s14, s15
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	edd3 6a08 	vldr	s13, [r3, #32]
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8004096:	ed97 6a07 	vldr	s12, [r7, #28]
 800409a:	ee76 7a67 	vsub.f32	s15, s12, s15
 800409e:	ee26 6aa7 	vmul.f32	s12, s13, s15
 80040a2:	edd7 6a00 	vldr	s13, [r7]
 80040a6:	eec6 7a26 	vdiv.f32	s15, s12, s13
 80040aa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c

        // Calculate the PID controller output using proportional, integral, and derivative terms
        float output = kp_ * (1 + dt / (tau_ + T_ + epsilon)) * error + ki_ * (dt / (T_ + epsilon)) * integral_ - kd_ * derivative_;
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	ed93 7a00 	vldr	s14, [r3]
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	edd3 6a03 	vldr	s13, [r3, #12]
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	edd3 7a04 	vldr	s15, [r3, #16]
 80040c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80040ca:	eddf 6a27 	vldr	s13, [pc, #156]	; 8004168 <_ZN3PID6updateEfff+0x250>
 80040ce:	ee77 6aa6 	vadd.f32	s13, s15, s13
 80040d2:	ed97 6a00 	vldr	s12, [r7]
 80040d6:	eec6 7a26 	vdiv.f32	s15, s12, s13
 80040da:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80040de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80040e2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80040e6:	edd7 7a07 	vldr	s15, [r7, #28]
 80040ea:	ee27 7a27 	vmul.f32	s14, s14, s15
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	edd3 6a01 	vldr	s13, [r3, #4]
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	edd3 7a04 	vldr	s15, [r3, #16]
 80040fa:	ed9f 6a1b 	vldr	s12, [pc, #108]	; 8004168 <_ZN3PID6updateEfff+0x250>
 80040fe:	ee37 6a86 	vadd.f32	s12, s15, s12
 8004102:	edd7 5a00 	vldr	s11, [r7]
 8004106:	eec5 7a86 	vdiv.f32	s15, s11, s12
 800410a:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8004114:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004118:	ee37 7a27 	vadd.f32	s14, s14, s15
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	edd3 6a02 	vldr	s13, [r3, #8]
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8004128:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800412c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004130:	edc7 7a04 	vstr	s15, [r7, #16]

        // Output clamping: Limit the output within the specified range
        output = std::clamp(output, minOutput_, maxOutput_);
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	f103 0114 	add.w	r1, r3, #20
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	f103 0218 	add.w	r2, r3, #24
 8004140:	f107 0310 	add.w	r3, r7, #16
 8004144:	4618      	mov	r0, r3
 8004146:	f000 f93f 	bl	80043c8 <_ZSt5clampIfERKT_S2_S2_S2_>
 800414a:	4603      	mov	r3, r0
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	613b      	str	r3, [r7, #16]

        // Update the previous error for the next iteration
        prevError_ = error;
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	69fa      	ldr	r2, [r7, #28]
 8004154:	625a      	str	r2, [r3, #36]	; 0x24

        // Return the calculated PID controller output
        return output;
 8004156:	693b      	ldr	r3, [r7, #16]
    }
 8004158:	ee07 3a90 	vmov	s15, r3
 800415c:	eeb0 0a67 	vmov.f32	s0, s15
 8004160:	3728      	adds	r7, #40	; 0x28
 8004162:	46bd      	mov	sp, r7
 8004164:	bd80      	pop	{r7, pc}
 8004166:	bf00      	nop
 8004168:	34000000 	.word	0x34000000

0800416c <_Z16MotorControlTaskv>:
PID motorcontrol_pid{SPEED_CONTROLER_KP,SPEED_CONTROLLER_KI, SPEED_CONTROLLER_KD, SPEED_CONTROLLER_TAU, SPEED_CONTROLLER_T, SPEED_CONTROLLER_MIN, SPEED_CONTROLLER_MAX, SPEED_CONTROLLER_DEADBAND,SPEED_CONTROLLER_DERIVATIVE_FILTER_ALPHA};
uint32_t tick_counter = 0u;
uint32_t tick_counter_prev = 0u;

void MotorControlTask()
{
 800416c:	b580      	push	{r7, lr}
 800416e:	b082      	sub	sp, #8
 8004170:	af00      	add	r7, sp, #0
	if((usWidth_throttle > 1800) && (usWidth_throttle < 2800))
 8004172:	4b80      	ldr	r3, [pc, #512]	; (8004374 <_Z16MotorControlTaskv+0x208>)
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	f5b3 6fe1 	cmp.w	r3, #1800	; 0x708
 800417a:	d90a      	bls.n	8004192 <_Z16MotorControlTaskv+0x26>
 800417c:	4b7d      	ldr	r3, [pc, #500]	; (8004374 <_Z16MotorControlTaskv+0x208>)
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	f5b3 6f2f 	cmp.w	r3, #2800	; 0xaf0
 8004184:	d205      	bcs.n	8004192 <_Z16MotorControlTaskv+0x26>
	{
		HAL_GPIO_WritePin(DRIVE_ENABLE_GPIO_Port, DRIVE_ENABLE_Pin, GPIO_PIN_SET);
 8004186:	2201      	movs	r2, #1
 8004188:	2108      	movs	r1, #8
 800418a:	487b      	ldr	r0, [pc, #492]	; (8004378 <_Z16MotorControlTaskv+0x20c>)
 800418c:	f012 fc3c 	bl	8016a08 <HAL_GPIO_WritePin>
 8004190:	e018      	b.n	80041c4 <_Z16MotorControlTaskv+0x58>
	}
	else if((motorcontrol.actual_velocity < 0.3f) && (motorcontrol.target_velocity < 0.3f))
 8004192:	4b7a      	ldr	r3, [pc, #488]	; (800437c <_Z16MotorControlTaskv+0x210>)
 8004194:	edd3 7a02 	vldr	s15, [r3, #8]
 8004198:	ed9f 7a79 	vldr	s14, [pc, #484]	; 8004380 <_Z16MotorControlTaskv+0x214>
 800419c:	eef4 7ac7 	vcmpe.f32	s15, s14
 80041a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80041a4:	d50e      	bpl.n	80041c4 <_Z16MotorControlTaskv+0x58>
 80041a6:	4b75      	ldr	r3, [pc, #468]	; (800437c <_Z16MotorControlTaskv+0x210>)
 80041a8:	edd3 7a03 	vldr	s15, [r3, #12]
 80041ac:	ed9f 7a74 	vldr	s14, [pc, #464]	; 8004380 <_Z16MotorControlTaskv+0x214>
 80041b0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80041b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80041b8:	d504      	bpl.n	80041c4 <_Z16MotorControlTaskv+0x58>
	{
		HAL_GPIO_WritePin(DRIVE_ENABLE_GPIO_Port, DRIVE_ENABLE_Pin, GPIO_PIN_RESET);
 80041ba:	2200      	movs	r2, #0
 80041bc:	2108      	movs	r1, #8
 80041be:	486e      	ldr	r0, [pc, #440]	; (8004378 <_Z16MotorControlTaskv+0x20c>)
 80041c0:	f012 fc22 	bl	8016a08 <HAL_GPIO_WritePin>
	}

	motorcontrol.battery_voltage = ((float)(adc_values.motor_batt_voltage_raw)) / 4096.0f * 3.3f * ANALOG_TO_MOTOR_BATT;
 80041c4:	4b6f      	ldr	r3, [pc, #444]	; (8004384 <_Z16MotorControlTaskv+0x218>)
 80041c6:	881b      	ldrh	r3, [r3, #0]
 80041c8:	ee07 3a90 	vmov	s15, r3
 80041cc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80041d0:	eddf 6a6d 	vldr	s13, [pc, #436]	; 8004388 <_Z16MotorControlTaskv+0x21c>
 80041d4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80041d8:	ed9f 7a6c 	vldr	s14, [pc, #432]	; 800438c <_Z16MotorControlTaskv+0x220>
 80041dc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80041e0:	eeb1 7a08 	vmov.f32	s14, #24	; 0x40c00000  6.0
 80041e4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80041e8:	4b64      	ldr	r3, [pc, #400]	; (800437c <_Z16MotorControlTaskv+0x210>)
 80041ea:	edc3 7a00 	vstr	s15, [r3]
	motorcontrol.motor_current = (((float)((adc_values.motor_curr_raw)) / 4096.0f) * 3.3f - MOTOR_CURR_NULL) / MOTOR_CURR_SENSITIVITY;
 80041ee:	4b65      	ldr	r3, [pc, #404]	; (8004384 <_Z16MotorControlTaskv+0x218>)
 80041f0:	885b      	ldrh	r3, [r3, #2]
 80041f2:	ee07 3a90 	vmov	s15, r3
 80041f6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80041fa:	eddf 6a63 	vldr	s13, [pc, #396]	; 8004388 <_Z16MotorControlTaskv+0x21c>
 80041fe:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004202:	ed9f 7a62 	vldr	s14, [pc, #392]	; 800438c <_Z16MotorControlTaskv+0x220>
 8004206:	ee67 7a87 	vmul.f32	s15, s15, s14
 800420a:	ed9f 7a61 	vldr	s14, [pc, #388]	; 8004390 <_Z16MotorControlTaskv+0x224>
 800420e:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8004212:	eddf 6a60 	vldr	s13, [pc, #384]	; 8004394 <_Z16MotorControlTaskv+0x228>
 8004216:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800421a:	4b58      	ldr	r3, [pc, #352]	; (800437c <_Z16MotorControlTaskv+0x210>)
 800421c:	edc3 7a01 	vstr	s15, [r3, #4]


	tick_counter_prev = tick_counter;
 8004220:	4b5d      	ldr	r3, [pc, #372]	; (8004398 <_Z16MotorControlTaskv+0x22c>)
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	4a5d      	ldr	r2, [pc, #372]	; (800439c <_Z16MotorControlTaskv+0x230>)
 8004226:	6013      	str	r3, [r2, #0]
	tick_counter = HAL_GetTick();
 8004228:	f010 f992 	bl	8014550 <HAL_GetTick>
 800422c:	4603      	mov	r3, r0
 800422e:	4a5a      	ldr	r2, [pc, #360]	; (8004398 <_Z16MotorControlTaskv+0x22c>)
 8004230:	6013      	str	r3, [r2, #0]
    float dt = (((float)tick_counter) - ((float)(tick_counter_prev))) / 1000.0f;
 8004232:	4b59      	ldr	r3, [pc, #356]	; (8004398 <_Z16MotorControlTaskv+0x22c>)
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	ee07 3a90 	vmov	s15, r3
 800423a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800423e:	4b57      	ldr	r3, [pc, #348]	; (800439c <_Z16MotorControlTaskv+0x230>)
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	ee07 3a90 	vmov	s15, r3
 8004246:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800424a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800424e:	eddf 6a54 	vldr	s13, [pc, #336]	; 80043a0 <_Z16MotorControlTaskv+0x234>
 8004252:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004256:	edc7 7a01 	vstr	s15, [r7, #4]
	motorcontrol.duty_cycle = motorcontrol_pid.update(motorcontrol.target_velocity, motorcontrol.actual_velocity, dt);
 800425a:	4b48      	ldr	r3, [pc, #288]	; (800437c <_Z16MotorControlTaskv+0x210>)
 800425c:	edd3 7a03 	vldr	s15, [r3, #12]
 8004260:	4b46      	ldr	r3, [pc, #280]	; (800437c <_Z16MotorControlTaskv+0x210>)
 8004262:	ed93 7a02 	vldr	s14, [r3, #8]
 8004266:	ed97 1a01 	vldr	s2, [r7, #4]
 800426a:	eef0 0a47 	vmov.f32	s1, s14
 800426e:	eeb0 0a67 	vmov.f32	s0, s15
 8004272:	484c      	ldr	r0, [pc, #304]	; (80043a4 <_Z16MotorControlTaskv+0x238>)
 8004274:	f7ff fe50 	bl	8003f18 <_ZN3PID6updateEfff>
 8004278:	eef0 7a40 	vmov.f32	s15, s0
 800427c:	4b3f      	ldr	r3, [pc, #252]	; (800437c <_Z16MotorControlTaskv+0x210>)
 800427e:	edc3 7a04 	vstr	s15, [r3, #16]
	motorcontrol.duty_cycle += 0.5f;
 8004282:	4b3e      	ldr	r3, [pc, #248]	; (800437c <_Z16MotorControlTaskv+0x210>)
 8004284:	edd3 7a04 	vldr	s15, [r3, #16]
 8004288:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800428c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004290:	4b3a      	ldr	r3, [pc, #232]	; (800437c <_Z16MotorControlTaskv+0x210>)
 8004292:	edc3 7a04 	vstr	s15, [r3, #16]
	motorcontrol.duty_cycle = (motorcontrol.duty_cycle > 0.95f) ? 0.95f : motorcontrol.duty_cycle;
 8004296:	4b39      	ldr	r3, [pc, #228]	; (800437c <_Z16MotorControlTaskv+0x210>)
 8004298:	edd3 7a04 	vldr	s15, [r3, #16]
 800429c:	ed9f 7a42 	vldr	s14, [pc, #264]	; 80043a8 <_Z16MotorControlTaskv+0x23c>
 80042a0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80042a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80042a8:	dd01      	ble.n	80042ae <_Z16MotorControlTaskv+0x142>
 80042aa:	4b40      	ldr	r3, [pc, #256]	; (80043ac <_Z16MotorControlTaskv+0x240>)
 80042ac:	e001      	b.n	80042b2 <_Z16MotorControlTaskv+0x146>
 80042ae:	4b33      	ldr	r3, [pc, #204]	; (800437c <_Z16MotorControlTaskv+0x210>)
 80042b0:	691b      	ldr	r3, [r3, #16]
 80042b2:	4a32      	ldr	r2, [pc, #200]	; (800437c <_Z16MotorControlTaskv+0x210>)
 80042b4:	6113      	str	r3, [r2, #16]
	motorcontrol.duty_cycle = (motorcontrol.duty_cycle < 0.05f) ? 0.05f : motorcontrol.duty_cycle;
 80042b6:	4b31      	ldr	r3, [pc, #196]	; (800437c <_Z16MotorControlTaskv+0x210>)
 80042b8:	edd3 7a04 	vldr	s15, [r3, #16]
 80042bc:	ed9f 7a3c 	vldr	s14, [pc, #240]	; 80043b0 <_Z16MotorControlTaskv+0x244>
 80042c0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80042c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80042c8:	d501      	bpl.n	80042ce <_Z16MotorControlTaskv+0x162>
 80042ca:	4b3a      	ldr	r3, [pc, #232]	; (80043b4 <_Z16MotorControlTaskv+0x248>)
 80042cc:	e001      	b.n	80042d2 <_Z16MotorControlTaskv+0x166>
 80042ce:	4b2b      	ldr	r3, [pc, #172]	; (800437c <_Z16MotorControlTaskv+0x210>)
 80042d0:	691b      	ldr	r3, [r3, #16]
 80042d2:	4a2a      	ldr	r2, [pc, #168]	; (800437c <_Z16MotorControlTaskv+0x210>)
 80042d4:	6113      	str	r3, [r2, #16]
	motorcontrol.duty_cycle = ((motorcontrol.duty_cycle > 0.47f) && (motorcontrol.duty_cycle < 0.53f)) ? 0.50f : motorcontrol.duty_cycle;
 80042d6:	4b29      	ldr	r3, [pc, #164]	; (800437c <_Z16MotorControlTaskv+0x210>)
 80042d8:	edd3 7a04 	vldr	s15, [r3, #16]
 80042dc:	ed9f 7a36 	vldr	s14, [pc, #216]	; 80043b8 <_Z16MotorControlTaskv+0x24c>
 80042e0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80042e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80042e8:	bfcc      	ite	gt
 80042ea:	2301      	movgt	r3, #1
 80042ec:	2300      	movle	r3, #0
 80042ee:	b2db      	uxtb	r3, r3
 80042f0:	f083 0301 	eor.w	r3, r3, #1
 80042f4:	b2db      	uxtb	r3, r3
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d111      	bne.n	800431e <_Z16MotorControlTaskv+0x1b2>
 80042fa:	4b20      	ldr	r3, [pc, #128]	; (800437c <_Z16MotorControlTaskv+0x210>)
 80042fc:	edd3 7a04 	vldr	s15, [r3, #16]
 8004300:	ed9f 7a2e 	vldr	s14, [pc, #184]	; 80043bc <_Z16MotorControlTaskv+0x250>
 8004304:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004308:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800430c:	bf4c      	ite	mi
 800430e:	2301      	movmi	r3, #1
 8004310:	2300      	movpl	r3, #0
 8004312:	b2db      	uxtb	r3, r3
 8004314:	f083 0301 	eor.w	r3, r3, #1
 8004318:	b2db      	uxtb	r3, r3
 800431a:	2b00      	cmp	r3, #0
 800431c:	d002      	beq.n	8004324 <_Z16MotorControlTaskv+0x1b8>
 800431e:	4b17      	ldr	r3, [pc, #92]	; (800437c <_Z16MotorControlTaskv+0x210>)
 8004320:	691b      	ldr	r3, [r3, #16]
 8004322:	e001      	b.n	8004328 <_Z16MotorControlTaskv+0x1bc>
 8004324:	f04f 537c 	mov.w	r3, #1056964608	; 0x3f000000
 8004328:	4a14      	ldr	r2, [pc, #80]	; (800437c <_Z16MotorControlTaskv+0x210>)
 800432a:	6113      	str	r3, [r2, #16]
	{
		motorcontrol.duty_cycle = 0.5f;

	}
*/
    __HAL_TIM_SET_COMPARE(&htim5, TIM_CHANNEL_4, motorcontrol.duty_cycle * PWM_COUNTER_PREIOD);
 800432c:	4b13      	ldr	r3, [pc, #76]	; (800437c <_Z16MotorControlTaskv+0x210>)
 800432e:	edd3 7a04 	vldr	s15, [r3, #16]
 8004332:	ed9f 7a23 	vldr	s14, [pc, #140]	; 80043c0 <_Z16MotorControlTaskv+0x254>
 8004336:	ee67 7a87 	vmul.f32	s15, s15, s14
 800433a:	4b22      	ldr	r3, [pc, #136]	; (80043c4 <_Z16MotorControlTaskv+0x258>)
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004342:	ee17 2a90 	vmov	r2, s15
 8004346:	641a      	str	r2, [r3, #64]	; 0x40
    __HAL_TIM_SET_COMPARE(&htim5, TIM_CHANNEL_1, PWM_COUNTER_PREIOD - (motorcontrol.duty_cycle * PWM_COUNTER_PREIOD));
 8004348:	4b0c      	ldr	r3, [pc, #48]	; (800437c <_Z16MotorControlTaskv+0x210>)
 800434a:	edd3 7a04 	vldr	s15, [r3, #16]
 800434e:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 80043c0 <_Z16MotorControlTaskv+0x254>
 8004352:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004356:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 80043c0 <_Z16MotorControlTaskv+0x254>
 800435a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800435e:	4b19      	ldr	r3, [pc, #100]	; (80043c4 <_Z16MotorControlTaskv+0x258>)
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004366:	ee17 2a90 	vmov	r2, s15
 800436a:	635a      	str	r2, [r3, #52]	; 0x34

}
 800436c:	bf00      	nop
 800436e:	3708      	adds	r7, #8
 8004370:	46bd      	mov	sp, r7
 8004372:	bd80      	pop	{r7, pc}
 8004374:	20000304 	.word	0x20000304
 8004378:	42021400 	.word	0x42021400
 800437c:	200002a0 	.word	0x200002a0
 8004380:	3e99999a 	.word	0x3e99999a
 8004384:	2000014c 	.word	0x2000014c
 8004388:	45800000 	.word	0x45800000
 800438c:	40533333 	.word	0x40533333
 8004390:	3fcb851f 	.word	0x3fcb851f
 8004394:	3c0ce704 	.word	0x3c0ce704
 8004398:	200002e4 	.word	0x200002e4
 800439c:	200002e8 	.word	0x200002e8
 80043a0:	447a0000 	.word	0x447a0000
 80043a4:	200002b4 	.word	0x200002b4
 80043a8:	3f733333 	.word	0x3f733333
 80043ac:	3f733333 	.word	0x3f733333
 80043b0:	3d4ccccd 	.word	0x3d4ccccd
 80043b4:	3d4ccccd 	.word	0x3d4ccccd
 80043b8:	3ef0a3d7 	.word	0x3ef0a3d7
 80043bc:	3f07ae14 	.word	0x3f07ae14
 80043c0:	44e54000 	.word	0x44e54000
 80043c4:	20000bc0 	.word	0x20000bc0

080043c8 <_ZSt5clampIfERKT_S2_S2_S2_>:
   *  @param  __hi   An upper limit of arbitrary type.
   *  @return max(__val, __lo) if __val < __hi or min(__val, __hi) otherwise.
   */
  template<typename _Tp>
    constexpr const _Tp&
    clamp(const _Tp& __val, const _Tp& __lo, const _Tp& __hi)
 80043c8:	b480      	push	{r7}
 80043ca:	b085      	sub	sp, #20
 80043cc:	af00      	add	r7, sp, #0
 80043ce:	60f8      	str	r0, [r7, #12]
 80043d0:	60b9      	str	r1, [r7, #8]
 80043d2:	607a      	str	r2, [r7, #4]
    {
      __glibcxx_assert(!(__hi < __lo));
      return (__val < __lo) ? __lo : (__hi < __val) ? __hi : __val;
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	ed93 7a00 	vldr	s14, [r3]
 80043da:	68bb      	ldr	r3, [r7, #8]
 80043dc:	edd3 7a00 	vldr	s15, [r3]
 80043e0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80043e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80043e8:	d501      	bpl.n	80043ee <_ZSt5clampIfERKT_S2_S2_S2_+0x26>
 80043ea:	68bb      	ldr	r3, [r7, #8]
 80043ec:	e00d      	b.n	800440a <_ZSt5clampIfERKT_S2_S2_S2_+0x42>
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	ed93 7a00 	vldr	s14, [r3]
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	edd3 7a00 	vldr	s15, [r3]
 80043fa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80043fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004402:	d501      	bpl.n	8004408 <_ZSt5clampIfERKT_S2_S2_S2_+0x40>
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	e000      	b.n	800440a <_ZSt5clampIfERKT_S2_S2_S2_+0x42>
 8004408:	68fb      	ldr	r3, [r7, #12]
    }
 800440a:	4618      	mov	r0, r3
 800440c:	3714      	adds	r7, #20
 800440e:	46bd      	mov	sp, r7
 8004410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004414:	4770      	bx	lr
	...

08004418 <_Z41__static_initialization_and_destruction_0ii>:
 8004418:	b580      	push	{r7, lr}
 800441a:	b082      	sub	sp, #8
 800441c:	af00      	add	r7, sp, #0
 800441e:	6078      	str	r0, [r7, #4]
 8004420:	6039      	str	r1, [r7, #0]
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	2b01      	cmp	r3, #1
 8004426:	d119      	bne.n	800445c <_Z41__static_initialization_and_destruction_0ii+0x44>
 8004428:	683b      	ldr	r3, [r7, #0]
 800442a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800442e:	4293      	cmp	r3, r2
 8004430:	d114      	bne.n	800445c <_Z41__static_initialization_and_destruction_0ii+0x44>
PID motorcontrol_pid{SPEED_CONTROLER_KP,SPEED_CONTROLLER_KI, SPEED_CONTROLLER_KD, SPEED_CONTROLLER_TAU, SPEED_CONTROLLER_T, SPEED_CONTROLLER_MIN, SPEED_CONTROLLER_MAX, SPEED_CONTROLLER_DEADBAND,SPEED_CONTROLLER_DERIVATIVE_FILTER_ALPHA};
 8004432:	ed9f 4a12 	vldr	s8, [pc, #72]	; 800447c <_Z41__static_initialization_and_destruction_0ii+0x64>
 8004436:	eddf 3a12 	vldr	s7, [pc, #72]	; 8004480 <_Z41__static_initialization_and_destruction_0ii+0x68>
 800443a:	eeb6 3a00 	vmov.f32	s6, #96	; 0x3f000000  0.5
 800443e:	eefe 2a00 	vmov.f32	s5, #224	; 0xbf000000 -0.5
 8004442:	ed9f 2a10 	vldr	s4, [pc, #64]	; 8004484 <_Z41__static_initialization_and_destruction_0ii+0x6c>
 8004446:	eddf 1a0f 	vldr	s3, [pc, #60]	; 8004484 <_Z41__static_initialization_and_destruction_0ii+0x6c>
 800444a:	ed9f 1a0c 	vldr	s2, [pc, #48]	; 800447c <_Z41__static_initialization_and_destruction_0ii+0x64>
 800444e:	eddf 0a0e 	vldr	s1, [pc, #56]	; 8004488 <_Z41__static_initialization_and_destruction_0ii+0x70>
 8004452:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 800448c <_Z41__static_initialization_and_destruction_0ii+0x74>
 8004456:	480e      	ldr	r0, [pc, #56]	; (8004490 <_Z41__static_initialization_and_destruction_0ii+0x78>)
 8004458:	f7ff fd0e 	bl	8003e78 <_ZN3PIDC1Efffffffff>
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	2b00      	cmp	r3, #0
 8004460:	d107      	bne.n	8004472 <_Z41__static_initialization_and_destruction_0ii+0x5a>
 8004462:	683b      	ldr	r3, [r7, #0]
 8004464:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004468:	4293      	cmp	r3, r2
 800446a:	d102      	bne.n	8004472 <_Z41__static_initialization_and_destruction_0ii+0x5a>
 800446c:	4808      	ldr	r0, [pc, #32]	; (8004490 <_Z41__static_initialization_and_destruction_0ii+0x78>)
 800446e:	f7ff fd47 	bl	8003f00 <_ZN3PIDD1Ev>
}
 8004472:	bf00      	nop
 8004474:	3708      	adds	r7, #8
 8004476:	46bd      	mov	sp, r7
 8004478:	bd80      	pop	{r7, pc}
 800447a:	bf00      	nop
 800447c:	00000000 	.word	0x00000000
 8004480:	3d4ccccd 	.word	0x3d4ccccd
 8004484:	3ca3d70a 	.word	0x3ca3d70a
 8004488:	3f333333 	.word	0x3f333333
 800448c:	3ea147ae 	.word	0x3ea147ae
 8004490:	200002b4 	.word	0x200002b4

08004494 <_GLOBAL__sub_I_motorcontrol>:
 8004494:	b580      	push	{r7, lr}
 8004496:	af00      	add	r7, sp, #0
 8004498:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800449c:	2001      	movs	r0, #1
 800449e:	f7ff ffbb 	bl	8004418 <_Z41__static_initialization_and_destruction_0ii>
 80044a2:	bd80      	pop	{r7, pc}

080044a4 <_GLOBAL__sub_D_motorcontrol>:
 80044a4:	b580      	push	{r7, lr}
 80044a6:	af00      	add	r7, sp, #0
 80044a8:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80044ac:	2000      	movs	r0, #0
 80044ae:	f7ff ffb3 	bl	8004418 <_Z41__static_initialization_and_destruction_0ii>
 80044b2:	bd80      	pop	{r7, pc}

080044b4 <_Z10Radio_Initv>:
int pirate_percentage = 0;
bool flood_arrived = false;


void Radio_Init()
{
 80044b4:	b580      	push	{r7, lr}
 80044b6:	af00      	add	r7, sp, #0
	HAL_UART_Receive_IT(&huart4, &radio_rxBuffer[character_pointer], 1);
 80044b8:	4b05      	ldr	r3, [pc, #20]	; (80044d0 <_Z10Radio_Initv+0x1c>)
 80044ba:	781b      	ldrb	r3, [r3, #0]
 80044bc:	461a      	mov	r2, r3
 80044be:	4b05      	ldr	r3, [pc, #20]	; (80044d4 <_Z10Radio_Initv+0x20>)
 80044c0:	4413      	add	r3, r2
 80044c2:	2201      	movs	r2, #1
 80044c4:	4619      	mov	r1, r3
 80044c6:	4804      	ldr	r0, [pc, #16]	; (80044d8 <_Z10Radio_Initv+0x24>)
 80044c8:	f018 f886 	bl	801c5d8 <HAL_UART_Receive_IT>

}
 80044cc:	bf00      	nop
 80044ce:	bd80      	pop	{r7, pc}
 80044d0:	200002f8 	.word	0x200002f8
 80044d4:	200002ec 	.word	0x200002ec
 80044d8:	200008ac 	.word	0x200008ac

080044dc <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80044dc:	b580      	push	{r7, lr}
 80044de:	b086      	sub	sp, #24
 80044e0:	af02      	add	r7, sp, #8
 80044e2:	6078      	str	r0, [r7, #4]
	uint8_t length = character_pointer;
 80044e4:	4b20      	ldr	r3, [pc, #128]	; (8004568 <HAL_UART_RxCpltCallback+0x8c>)
 80044e6:	781b      	ldrb	r3, [r3, #0]
 80044e8:	73fb      	strb	r3, [r7, #15]
	if (radio_rxBuffer[character_pointer] == '\r')
 80044ea:	4b1f      	ldr	r3, [pc, #124]	; (8004568 <HAL_UART_RxCpltCallback+0x8c>)
 80044ec:	781b      	ldrb	r3, [r3, #0]
 80044ee:	461a      	mov	r2, r3
 80044f0:	4b1e      	ldr	r3, [pc, #120]	; (800456c <HAL_UART_RxCpltCallback+0x90>)
 80044f2:	5c9b      	ldrb	r3, [r3, r2]
 80044f4:	2b0d      	cmp	r3, #13
 80044f6:	d122      	bne.n	800453e <HAL_UART_RxCpltCallback+0x62>
	{
		// Labirinth countdown message received
		if (length == 1)
 80044f8:	7bfb      	ldrb	r3, [r7, #15]
 80044fa:	2b01      	cmp	r3, #1
 80044fc:	d103      	bne.n	8004506 <HAL_UART_RxCpltCallback+0x2a>
		{
			countdown_value = radio_rxBuffer[0];
 80044fe:	4b1b      	ldr	r3, [pc, #108]	; (800456c <HAL_UART_RxCpltCallback+0x90>)
 8004500:	781a      	ldrb	r2, [r3, #0]
 8004502:	4b1b      	ldr	r3, [pc, #108]	; (8004570 <HAL_UART_RxCpltCallback+0x94>)
 8004504:	701a      	strb	r2, [r3, #0]
		}
		if (length == 7)
 8004506:	7bfb      	ldrb	r3, [r7, #15]
 8004508:	2b07      	cmp	r3, #7
 800450a:	d114      	bne.n	8004536 <HAL_UART_RxCpltCallback+0x5a>
		{
			//FLOOD message received
			if (!strcmp("FLOOD!\r", reinterpret_cast<const char*>(radio_rxBuffer)))
 800450c:	4917      	ldr	r1, [pc, #92]	; (800456c <HAL_UART_RxCpltCallback+0x90>)
 800450e:	4819      	ldr	r0, [pc, #100]	; (8004574 <HAL_UART_RxCpltCallback+0x98>)
 8004510:	f7fb fe96 	bl	8000240 <strcmp>
 8004514:	4603      	mov	r3, r0
 8004516:	2b00      	cmp	r3, #0
 8004518:	d103      	bne.n	8004522 <HAL_UART_RxCpltCallback+0x46>
			{
				flood_arrived = true;
 800451a:	4b17      	ldr	r3, [pc, #92]	; (8004578 <HAL_UART_RxCpltCallback+0x9c>)
 800451c:	2201      	movs	r2, #1
 800451e:	701a      	strb	r2, [r3, #0]
 8004520:	e009      	b.n	8004536 <HAL_UART_RxCpltCallback+0x5a>
			}
			else
			{
				sscanf(reinterpret_cast<const char*>(radio_rxBuffer), "%c%c%c%03d", &pirate_from, &pirate_to, &pirate_next, &pirate_percentage);
 8004522:	4b16      	ldr	r3, [pc, #88]	; (800457c <HAL_UART_RxCpltCallback+0xa0>)
 8004524:	9301      	str	r3, [sp, #4]
 8004526:	4b16      	ldr	r3, [pc, #88]	; (8004580 <HAL_UART_RxCpltCallback+0xa4>)
 8004528:	9300      	str	r3, [sp, #0]
 800452a:	4b16      	ldr	r3, [pc, #88]	; (8004584 <HAL_UART_RxCpltCallback+0xa8>)
 800452c:	4a16      	ldr	r2, [pc, #88]	; (8004588 <HAL_UART_RxCpltCallback+0xac>)
 800452e:	4917      	ldr	r1, [pc, #92]	; (800458c <HAL_UART_RxCpltCallback+0xb0>)
 8004530:	480e      	ldr	r0, [pc, #56]	; (800456c <HAL_UART_RxCpltCallback+0x90>)
 8004532:	f020 f8b3 	bl	802469c <siscanf>
			}
		}

		character_pointer = 0u;
 8004536:	4b0c      	ldr	r3, [pc, #48]	; (8004568 <HAL_UART_RxCpltCallback+0x8c>)
 8004538:	2200      	movs	r2, #0
 800453a:	701a      	strb	r2, [r3, #0]
 800453c:	e005      	b.n	800454a <HAL_UART_RxCpltCallback+0x6e>
	}
	else
	{
		character_pointer++;
 800453e:	4b0a      	ldr	r3, [pc, #40]	; (8004568 <HAL_UART_RxCpltCallback+0x8c>)
 8004540:	781b      	ldrb	r3, [r3, #0]
 8004542:	3301      	adds	r3, #1
 8004544:	b2da      	uxtb	r2, r3
 8004546:	4b08      	ldr	r3, [pc, #32]	; (8004568 <HAL_UART_RxCpltCallback+0x8c>)
 8004548:	701a      	strb	r2, [r3, #0]
	}
	HAL_UART_Receive_IT(&huart4, &radio_rxBuffer[character_pointer], 1);
 800454a:	4b07      	ldr	r3, [pc, #28]	; (8004568 <HAL_UART_RxCpltCallback+0x8c>)
 800454c:	781b      	ldrb	r3, [r3, #0]
 800454e:	461a      	mov	r2, r3
 8004550:	4b06      	ldr	r3, [pc, #24]	; (800456c <HAL_UART_RxCpltCallback+0x90>)
 8004552:	4413      	add	r3, r2
 8004554:	2201      	movs	r2, #1
 8004556:	4619      	mov	r1, r3
 8004558:	480d      	ldr	r0, [pc, #52]	; (8004590 <HAL_UART_RxCpltCallback+0xb4>)
 800455a:	f018 f83d 	bl	801c5d8 <HAL_UART_Receive_IT>

}
 800455e:	bf00      	nop
 8004560:	3710      	adds	r7, #16
 8004562:	46bd      	mov	sp, r7
 8004564:	bd80      	pop	{r7, pc}
 8004566:	bf00      	nop
 8004568:	200002f8 	.word	0x200002f8
 800456c:	200002ec 	.word	0x200002ec
 8004570:	2000008c 	.word	0x2000008c
 8004574:	08025d74 	.word	0x08025d74
 8004578:	20000300 	.word	0x20000300
 800457c:	200002fc 	.word	0x200002fc
 8004580:	200002fb 	.word	0x200002fb
 8004584:	200002fa 	.word	0x200002fa
 8004588:	200002f9 	.word	0x200002f9
 800458c:	08025d7c 	.word	0x08025d7c
 8004590:	200008ac 	.word	0x200008ac

08004594 <_Z16SetSteeringAnglef>:
uint8_t Is_First_Captured = 0;


/* Angle in +90 to -90 degree */
void SetSteeringAngle(float angle)
{
 8004594:	b480      	push	{r7}
 8004596:	b085      	sub	sp, #20
 8004598:	af00      	add	r7, sp, #0
 800459a:	ed87 0a01 	vstr	s0, [r7, #4]
	if((usWidth_throttle > 1800) && (usWidth_throttle < 2800))
 800459e:	4b16      	ldr	r3, [pc, #88]	; (80045f8 <_Z16SetSteeringAnglef+0x64>)
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	f5b3 6fe1 	cmp.w	r3, #1800	; 0x708
 80045a6:	d91c      	bls.n	80045e2 <_Z16SetSteeringAnglef+0x4e>
 80045a8:	4b13      	ldr	r3, [pc, #76]	; (80045f8 <_Z16SetSteeringAnglef+0x64>)
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	f5b3 6f2f 	cmp.w	r3, #2800	; 0xaf0
 80045b0:	d217      	bcs.n	80045e2 <_Z16SetSteeringAnglef+0x4e>
	{
		uint16_t compare = SERVO_NULL + (angle/ 22.5f * SERVO_RANGE);
 80045b2:	ed97 7a01 	vldr	s14, [r7, #4]
 80045b6:	eddf 6a11 	vldr	s13, [pc, #68]	; 80045fc <_Z16SetSteeringAnglef+0x68>
 80045ba:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80045be:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8004600 <_Z16SetSteeringAnglef+0x6c>
 80045c2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80045c6:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8004604 <_Z16SetSteeringAnglef+0x70>
 80045ca:	ee77 7a87 	vadd.f32	s15, s15, s14
 80045ce:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80045d2:	ee17 3a90 	vmov	r3, s15
 80045d6:	81fb      	strh	r3, [r7, #14]
	    __HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_1, compare);	}
 80045d8:	4b0b      	ldr	r3, [pc, #44]	; (8004608 <_Z16SetSteeringAnglef+0x74>)
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	89fa      	ldrh	r2, [r7, #14]
 80045de:	635a      	str	r2, [r3, #52]	; 0x34
 80045e0:	e004      	b.n	80045ec <_Z16SetSteeringAnglef+0x58>
	else
	{
	    __HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_1, 0);
 80045e2:	4b09      	ldr	r3, [pc, #36]	; (8004608 <_Z16SetSteeringAnglef+0x74>)
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	2200      	movs	r2, #0
 80045e8:	635a      	str	r2, [r3, #52]	; 0x34
	}

}
 80045ea:	bf00      	nop
 80045ec:	bf00      	nop
 80045ee:	3714      	adds	r7, #20
 80045f0:	46bd      	mov	sp, r7
 80045f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f6:	4770      	bx	lr
 80045f8:	20000304 	.word	0x20000304
 80045fc:	41b40000 	.word	0x41b40000
 8004600:	43c80000 	.word	0x43c80000
 8004604:	44960000 	.word	0x44960000
 8004608:	20000c58 	.word	0x20000c58

0800460c <HAL_TIM_IC_CaptureCallback>:



void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800460c:	b580      	push	{r7, lr}
 800460e:	b084      	sub	sp, #16
 8004610:	af00      	add	r7, sp, #0
 8004612:	6078      	str	r0, [r7, #4]
	// RISING
	if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_3)
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	7f1b      	ldrb	r3, [r3, #28]
 8004618:	2b04      	cmp	r3, #4
 800461a:	d104      	bne.n	8004626 <HAL_TIM_IC_CaptureCallback+0x1a>
	{
		__HAL_TIM_SET_COUNTER(htim, 0);  // reset the counter
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	2200      	movs	r2, #0
 8004622:	625a      	str	r2, [r3, #36]	; 0x24
		float refClock = TIMCLOCK/(PRESCALAR);
		float mFactor = 1000000/refClock;

		usWidth_throttle = falling_value*mFactor;
	}
}
 8004624:	e024      	b.n	8004670 <HAL_TIM_IC_CaptureCallback+0x64>
	else if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_4)
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	7f1b      	ldrb	r3, [r3, #28]
 800462a:	2b08      	cmp	r3, #8
 800462c:	d120      	bne.n	8004670 <HAL_TIM_IC_CaptureCallback+0x64>
		falling_value = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_4);  // read second value
 800462e:	210c      	movs	r1, #12
 8004630:	6878      	ldr	r0, [r7, #4]
 8004632:	f016 fff5 	bl	801b620 <HAL_TIM_ReadCapturedValue>
 8004636:	4603      	mov	r3, r0
 8004638:	4a0f      	ldr	r2, [pc, #60]	; (8004678 <HAL_TIM_IC_CaptureCallback+0x6c>)
 800463a:	6013      	str	r3, [r2, #0]
		float refClock = TIMCLOCK/(PRESCALAR);
 800463c:	4b0f      	ldr	r3, [pc, #60]	; (800467c <HAL_TIM_IC_CaptureCallback+0x70>)
 800463e:	60fb      	str	r3, [r7, #12]
		float mFactor = 1000000/refClock;
 8004640:	eddf 6a0f 	vldr	s13, [pc, #60]	; 8004680 <HAL_TIM_IC_CaptureCallback+0x74>
 8004644:	ed97 7a03 	vldr	s14, [r7, #12]
 8004648:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800464c:	edc7 7a02 	vstr	s15, [r7, #8]
		usWidth_throttle = falling_value*mFactor;
 8004650:	4b09      	ldr	r3, [pc, #36]	; (8004678 <HAL_TIM_IC_CaptureCallback+0x6c>)
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	ee07 3a90 	vmov	s15, r3
 8004658:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800465c:	edd7 7a02 	vldr	s15, [r7, #8]
 8004660:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004664:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004668:	ee17 2a90 	vmov	r2, s15
 800466c:	4b05      	ldr	r3, [pc, #20]	; (8004684 <HAL_TIM_IC_CaptureCallback+0x78>)
 800466e:	601a      	str	r2, [r3, #0]
}
 8004670:	bf00      	nop
 8004672:	3710      	adds	r7, #16
 8004674:	46bd      	mov	sp, r7
 8004676:	bd80      	pop	{r7, pc}
 8004678:	20000308 	.word	0x20000308
 800467c:	49742400 	.word	0x49742400
 8004680:	49742400 	.word	0x49742400
 8004684:	20000304 	.word	0x20000304

08004688 <_ZNSt9__cmp_cat8__unspecC1EPS0_>:

    enum class _Ncmp : type { _Unordered = 2 };

    struct __unspec
    {
      constexpr __unspec(__unspec*) noexcept { }
 8004688:	b480      	push	{r7}
 800468a:	b083      	sub	sp, #12
 800468c:	af00      	add	r7, sp, #0
 800468e:	6078      	str	r0, [r7, #4]
 8004690:	6039      	str	r1, [r7, #0]
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	4618      	mov	r0, r3
 8004696:	370c      	adds	r7, #12
 8004698:	46bd      	mov	sp, r7
 800469a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800469e:	4770      	bx	lr

080046a0 <_ZStltSt15strong_orderingNSt9__cmp_cat8__unspecE>:

    friend constexpr bool
    operator==(strong_ordering, strong_ordering) noexcept = default;

    friend constexpr bool
    operator< (strong_ordering __v, __cmp_cat::__unspec) noexcept
 80046a0:	b480      	push	{r7}
 80046a2:	b083      	sub	sp, #12
 80046a4:	af00      	add	r7, sp, #0
 80046a6:	7138      	strb	r0, [r7, #4]
 80046a8:	7039      	strb	r1, [r7, #0]
    { return __v._M_value < 0; }
 80046aa:	f997 3004 	ldrsb.w	r3, [r7, #4]
 80046ae:	b2db      	uxtb	r3, r3
 80046b0:	09db      	lsrs	r3, r3, #7
 80046b2:	b2db      	uxtb	r3, r3
 80046b4:	4618      	mov	r0, r3
 80046b6:	370c      	adds	r7, #12
 80046b8:	46bd      	mov	sp, r7
 80046ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046be:	4770      	bx	lr

080046c0 <_ZN9__gnu_cxx5__ops16__iter_less_iterEv>:
  };

  _GLIBCXX14_CONSTEXPR
  inline _Iter_less_iter
  __iter_less_iter()
  { return _Iter_less_iter(); }
 80046c0:	b480      	push	{r7}
 80046c2:	af00      	add	r7, sp, #0
 80046c4:	bf00      	nop
 80046c6:	4618      	mov	r0, r3
 80046c8:	46bd      	mov	sp, r7
 80046ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ce:	4770      	bx	lr

080046d0 <_ZN9__gnu_cxx5__ops15__val_comp_iterENS0_15_Iter_less_iterE>:
  { return _Val_less_iter(); }

  _GLIBCXX20_CONSTEXPR
  inline _Val_less_iter
  __val_comp_iter(_Iter_less_iter)
  { return _Val_less_iter(); }
 80046d0:	b480      	push	{r7}
 80046d2:	b083      	sub	sp, #12
 80046d4:	af00      	add	r7, sp, #0
 80046d6:	7138      	strb	r0, [r7, #4]
 80046d8:	bf00      	nop
 80046da:	4618      	mov	r0, r3
 80046dc:	370c      	adds	r7, #12
 80046de:	46bd      	mov	sp, r7
 80046e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e4:	4770      	bx	lr

080046e6 <_ZSt4__lgi>:

  /// This is a helper function for the sort routines and for random.tcc.
  //  Precondition: __n > 0.
  inline _GLIBCXX_CONSTEXPR int
  __lg(int __n)
  { return (int)sizeof(int) * __CHAR_BIT__  - 1 - __builtin_clz(__n); }
 80046e6:	b480      	push	{r7}
 80046e8:	b083      	sub	sp, #12
 80046ea:	af00      	add	r7, sp, #0
 80046ec:	6078      	str	r0, [r7, #4]
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	fab3 f383 	clz	r3, r3
 80046f4:	f1c3 031f 	rsb	r3, r3, #31
 80046f8:	4618      	mov	r0, r3
 80046fa:	370c      	adds	r7, #12
 80046fc:	46bd      	mov	sp, r7
 80046fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004702:	4770      	bx	lr

08004704 <_ZNSt14numeric_limitsIfE7epsilonEv>:
      static _GLIBCXX_USE_CONSTEXPR bool is_integer = false;
      static _GLIBCXX_USE_CONSTEXPR bool is_exact = false;
      static _GLIBCXX_USE_CONSTEXPR int radix = __FLT_RADIX__;

      static _GLIBCXX_CONSTEXPR float
      epsilon() _GLIBCXX_USE_NOEXCEPT { return __FLT_EPSILON__; }
 8004704:	b480      	push	{r7}
 8004706:	af00      	add	r7, sp, #0
 8004708:	f04f 5350 	mov.w	r3, #872415232	; 0x34000000
 800470c:	ee07 3a90 	vmov	s15, r3
 8004710:	eeb0 0a67 	vmov.f32	s0, s15
 8004714:	46bd      	mov	sp, r7
 8004716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800471a:	4770      	bx	lr

0800471c <_ZSt5atan2ff>:
  { return __builtin_atan2f(__y, __x); }
 800471c:	b580      	push	{r7, lr}
 800471e:	b082      	sub	sp, #8
 8004720:	af00      	add	r7, sp, #0
 8004722:	ed87 0a01 	vstr	s0, [r7, #4]
 8004726:	edc7 0a00 	vstr	s1, [r7]
 800472a:	edd7 0a00 	vldr	s1, [r7]
 800472e:	ed97 0a01 	vldr	s0, [r7, #4]
 8004732:	f01c fe49 	bl	80213c8 <atan2f>
 8004736:	eef0 7a40 	vmov.f32	s15, s0
 800473a:	eeb0 0a67 	vmov.f32	s0, s15
 800473e:	3708      	adds	r7, #8
 8004740:	46bd      	mov	sp, r7
 8004742:	bd80      	pop	{r7, pc}

08004744 <_ZSt3cosf>:
  { return __builtin_cosf(__x); }
 8004744:	b580      	push	{r7, lr}
 8004746:	b082      	sub	sp, #8
 8004748:	af00      	add	r7, sp, #0
 800474a:	ed87 0a01 	vstr	s0, [r7, #4]
 800474e:	ed97 0a01 	vldr	s0, [r7, #4]
 8004752:	f01c fe3b 	bl	80213cc <cosf>
 8004756:	eef0 7a40 	vmov.f32	s15, s0
 800475a:	eeb0 0a67 	vmov.f32	s0, s15
 800475e:	3708      	adds	r7, #8
 8004760:	46bd      	mov	sp, r7
 8004762:	bd80      	pop	{r7, pc}

08004764 <_ZSt4fabsf>:
  { return __builtin_fabsf(__x); }
 8004764:	b480      	push	{r7}
 8004766:	b083      	sub	sp, #12
 8004768:	af00      	add	r7, sp, #0
 800476a:	ed87 0a01 	vstr	s0, [r7, #4]
 800476e:	edd7 7a01 	vldr	s15, [r7, #4]
 8004772:	eef0 7ae7 	vabs.f32	s15, s15
 8004776:	eeb0 0a67 	vmov.f32	s0, s15
 800477a:	370c      	adds	r7, #12
 800477c:	46bd      	mov	sp, r7
 800477e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004782:	4770      	bx	lr

08004784 <_ZSt3sinf>:
  { return __builtin_sinf(__x); }
 8004784:	b580      	push	{r7, lr}
 8004786:	b082      	sub	sp, #8
 8004788:	af00      	add	r7, sp, #0
 800478a:	ed87 0a01 	vstr	s0, [r7, #4]
 800478e:	ed97 0a01 	vldr	s0, [r7, #4]
 8004792:	f01c fe5f 	bl	8021454 <sinf>
 8004796:	eef0 7a40 	vmov.f32	s15, s0
 800479a:	eeb0 0a67 	vmov.f32	s0, s15
 800479e:	3708      	adds	r7, #8
 80047a0:	46bd      	mov	sp, r7
 80047a2:	bd80      	pop	{r7, pc}

080047a4 <_ZSt4log2f>:

#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO_FP
  // DR 568.
  constexpr float
  log2(float __x)
  { return __builtin_log2f(__x); }
 80047a4:	b580      	push	{r7, lr}
 80047a6:	b082      	sub	sp, #8
 80047a8:	af00      	add	r7, sp, #0
 80047aa:	ed87 0a01 	vstr	s0, [r7, #4]
 80047ae:	ed97 0a01 	vldr	s0, [r7, #4]
 80047b2:	f01c fe95 	bl	80214e0 <log2f>
 80047b6:	eef0 7a40 	vmov.f32	s15, s0
 80047ba:	eeb0 0a67 	vmov.f32	s0, s15
 80047be:	3708      	adds	r7, #8
 80047c0:	46bd      	mov	sp, r7
 80047c2:	bd80      	pop	{r7, pc}

080047c4 <_ZNSt7complexIfEC1Eff>:
      typedef float value_type;
      typedef __complex__ float _ComplexT;

      _GLIBCXX_CONSTEXPR complex(_ComplexT __z) : _M_value(__z) { }

      _GLIBCXX_CONSTEXPR complex(float __r = 0.0f, float __i = 0.0f)
 80047c4:	b480      	push	{r7}
 80047c6:	b085      	sub	sp, #20
 80047c8:	af00      	add	r7, sp, #0
 80047ca:	60f8      	str	r0, [r7, #12]
 80047cc:	ed87 0a02 	vstr	s0, [r7, #8]
 80047d0:	edc7 0a01 	vstr	s1, [r7, #4]
#if __cplusplus >= 201103L
      : _M_value{ __r, __i } { }
 80047d4:	68b9      	ldr	r1, [r7, #8]
 80047d6:	687a      	ldr	r2, [r7, #4]
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	6019      	str	r1, [r3, #0]
 80047dc:	605a      	str	r2, [r3, #4]
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	4618      	mov	r0, r3
 80047e2:	3714      	adds	r7, #20
 80047e4:	46bd      	mov	sp, r7
 80047e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ea:	4770      	bx	lr

080047ec <_ZNKSt7complexIfE4realB5cxx11Ev>:
#if __cplusplus >= 201103L
      // _GLIBCXX_RESOLVE_LIB_DEFECTS
      // DR 387. std::complex over-encapsulated.
      __attribute ((__abi_tag__ ("cxx11")))
      constexpr float
      real() const { return __real__ _M_value; }
 80047ec:	b480      	push	{r7}
 80047ee:	b083      	sub	sp, #12
 80047f0:	af00      	add	r7, sp, #0
 80047f2:	6078      	str	r0, [r7, #4]
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	ee07 3a90 	vmov	s15, r3
 80047fc:	eeb0 0a67 	vmov.f32	s0, s15
 8004800:	370c      	adds	r7, #12
 8004802:	46bd      	mov	sp, r7
 8004804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004808:	4770      	bx	lr

0800480a <_ZNSt7complexIfEmLEf>:
	_M_value -= __f;
	return *this;
      }

      _GLIBCXX20_CONSTEXPR complex&
      operator*=(float __f)
 800480a:	b480      	push	{r7}
 800480c:	b083      	sub	sp, #12
 800480e:	af00      	add	r7, sp, #0
 8004810:	6078      	str	r0, [r7, #4]
 8004812:	ed87 0a00 	vstr	s0, [r7]
      {
	_M_value *= __f;
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681a      	ldr	r2, [r3, #0]
 800481a:	685b      	ldr	r3, [r3, #4]
 800481c:	ee07 2a10 	vmov	s14, r2
 8004820:	edd7 7a00 	vldr	s15, [r7]
 8004824:	ee27 7a87 	vmul.f32	s14, s15, s14
 8004828:	ee06 3a90 	vmov	s13, r3
 800482c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8004830:	ee17 1a10 	vmov	r1, s14
 8004834:	ee17 2a90 	vmov	r2, s15
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	6019      	str	r1, [r3, #0]
 800483c:	605a      	str	r2, [r3, #4]
	return *this;
 800483e:	687b      	ldr	r3, [r7, #4]
      }
 8004840:	4618      	mov	r0, r3
 8004842:	370c      	adds	r7, #12
 8004844:	46bd      	mov	sp, r7
 8004846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800484a:	4770      	bx	lr

0800484c <_ZNKSt7complexIfE5__repEv>:
	  const _ComplexT __t = __z.__rep();
	  _M_value /= __t;
	  return *this;
	}

      _GLIBCXX_CONSTEXPR _ComplexT __rep() const { return _M_value; }
 800484c:	b480      	push	{r7}
 800484e:	b083      	sub	sp, #12
 8004850:	af00      	add	r7, sp, #0
 8004852:	6078      	str	r0, [r7, #4]
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681a      	ldr	r2, [r3, #0]
 8004858:	685b      	ldr	r3, [r3, #4]
 800485a:	ee07 2a10 	vmov	s14, r2
 800485e:	ee07 3a90 	vmov	s15, r3
 8004862:	eeb0 0a47 	vmov.f32	s0, s14
 8004866:	eef0 0a67 	vmov.f32	s1, s15
 800486a:	370c      	adds	r7, #12
 800486c:	46bd      	mov	sp, r7
 800486e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004872:	4770      	bx	lr

08004874 <_ZN3PID9get_debugEv>:
        kp_ = kp;
        ki_ = ki;
        kd_ = kd;
    }

    DebugOutput get_debug()
 8004874:	b480      	push	{r7}
 8004876:	b08b      	sub	sp, #44	; 0x2c
 8004878:	af00      	add	r7, sp, #0
 800487a:	6178      	str	r0, [r7, #20]
    {
    	return {derivative_, integral_, prevError_};
 800487c:	697b      	ldr	r3, [r7, #20]
 800487e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004880:	61fb      	str	r3, [r7, #28]
 8004882:	697b      	ldr	r3, [r7, #20]
 8004884:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004886:	623b      	str	r3, [r7, #32]
 8004888:	697b      	ldr	r3, [r7, #20]
 800488a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800488c:	627b      	str	r3, [r7, #36]	; 0x24
 800488e:	69f9      	ldr	r1, [r7, #28]
 8004890:	6a3a      	ldr	r2, [r7, #32]
 8004892:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004894:	ee06 1a90 	vmov	s13, r1
 8004898:	ee07 2a10 	vmov	s14, r2
 800489c:	ee07 3a90 	vmov	s15, r3
    }
 80048a0:	eeb0 0a66 	vmov.f32	s0, s13
 80048a4:	eef0 0a47 	vmov.f32	s1, s14
 80048a8:	eeb0 1a67 	vmov.f32	s2, s15
 80048ac:	372c      	adds	r7, #44	; 0x2c
 80048ae:	46bd      	mov	sp, r7
 80048b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b4:	4770      	bx	lr
	...

080048b8 <_ZN3jlb10ControllerC1ENS_9DirectionE>:
        Direction prev_direction = Direction::STRAIGHT;

        uint32_t tick_counter = 0u;
        uint32_t tick_counter_prev = 0u;

        Controller(Direction direction_ = Direction::STRAIGHT) : direction{direction_} {}
 80048b8:	b580      	push	{r7, lr}
 80048ba:	b082      	sub	sp, #8
 80048bc:	af00      	add	r7, sp, #0
 80048be:	6078      	str	r0, [r7, #4]
 80048c0:	6039      	str	r1, [r7, #0]
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	2210      	movs	r2, #16
 80048c6:	601a      	str	r2, [r3, #0]
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	2210      	movs	r2, #16
 80048cc:	605a      	str	r2, [r3, #4]
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	f04f 0200 	mov.w	r2, #0
 80048d4:	609a      	str	r2, [r3, #8]
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	f04f 0200 	mov.w	r2, #0
 80048dc:	60da      	str	r2, [r3, #12]
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	f04f 0200 	mov.w	r2, #0
 80048e4:	611a      	str	r2, [r3, #16]
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	f04f 0200 	mov.w	r2, #0
 80048ec:	615a      	str	r2, [r3, #20]
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	f04f 0200 	mov.w	r2, #0
 80048f4:	619a      	str	r2, [r3, #24]
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	f04f 0200 	mov.w	r2, #0
 80048fc:	61da      	str	r2, [r3, #28]
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	f04f 0200 	mov.w	r2, #0
 8004904:	621a      	str	r2, [r3, #32]
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	f04f 0200 	mov.w	r2, #0
 800490c:	625a      	str	r2, [r3, #36]	; 0x24
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	f04f 0200 	mov.w	r2, #0
 8004914:	629a      	str	r2, [r3, #40]	; 0x28
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	f04f 0200 	mov.w	r2, #0
 800491c:	62da      	str	r2, [r3, #44]	; 0x2c
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	4a2c      	ldr	r2, [pc, #176]	; (80049d4 <_ZN3jlb10ControllerC1ENS_9DirectionE+0x11c>)
 8004922:	631a      	str	r2, [r3, #48]	; 0x30
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	3374      	adds	r3, #116	; 0x74
 8004928:	4618      	mov	r0, r3
 800492a:	f7fe f91c 	bl	8002b66 <_ZNSt6vectorIfSaIfEEC1Ev>
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	3380      	adds	r3, #128	; 0x80
 8004932:	4618      	mov	r0, r3
 8004934:	f7fe f917 	bl	8002b66 <_ZNSt6vectorIfSaIfEEC1Ev>
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	683a      	ldr	r2, [r7, #0]
 800493c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	2202      	movs	r2, #2
 8004944:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	2200      	movs	r2, #0
 800494c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	2200      	movs	r2, #0
 8004954:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	f04f 0200 	mov.w	r2, #0
 800495e:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	f04f 0200 	mov.w	r2, #0
 8004968:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	33a4      	adds	r3, #164	; 0xa4
 8004970:	ed9f 4a19 	vldr	s8, [pc, #100]	; 80049d8 <_ZN3jlb10ControllerC1ENS_9DirectionE+0x120>
 8004974:	eddf 3a19 	vldr	s7, [pc, #100]	; 80049dc <_ZN3jlb10ControllerC1ENS_9DirectionE+0x124>
 8004978:	eeb7 3a00 	vmov.f32	s6, #112	; 0x3f800000  1.0
 800497c:	eddf 2a18 	vldr	s5, [pc, #96]	; 80049e0 <_ZN3jlb10ControllerC1ENS_9DirectionE+0x128>
 8004980:	ed9f 2a18 	vldr	s4, [pc, #96]	; 80049e4 <_ZN3jlb10ControllerC1ENS_9DirectionE+0x12c>
 8004984:	eddf 1a15 	vldr	s3, [pc, #84]	; 80049dc <_ZN3jlb10ControllerC1ENS_9DirectionE+0x124>
 8004988:	ed9f 1a15 	vldr	s2, [pc, #84]	; 80049e0 <_ZN3jlb10ControllerC1ENS_9DirectionE+0x128>
 800498c:	eddf 0a16 	vldr	s1, [pc, #88]	; 80049e8 <_ZN3jlb10ControllerC1ENS_9DirectionE+0x130>
 8004990:	ed9f 0a16 	vldr	s0, [pc, #88]	; 80049ec <_ZN3jlb10ControllerC1ENS_9DirectionE+0x134>
 8004994:	4618      	mov	r0, r3
 8004996:	f7ff fa6f 	bl	8003e78 <_ZN3PIDC1Efffffffff>
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	33d4      	adds	r3, #212	; 0xd4
 800499e:	ed9f 4a10 	vldr	s8, [pc, #64]	; 80049e0 <_ZN3jlb10ControllerC1ENS_9DirectionE+0x128>
 80049a2:	eef6 3a00 	vmov.f32	s7, #96	; 0x3f000000  0.5
 80049a6:	ed9f 3a12 	vldr	s6, [pc, #72]	; 80049f0 <_ZN3jlb10ControllerC1ENS_9DirectionE+0x138>
 80049aa:	eddf 2a12 	vldr	s5, [pc, #72]	; 80049f4 <_ZN3jlb10ControllerC1ENS_9DirectionE+0x13c>
 80049ae:	ed9f 2a0d 	vldr	s4, [pc, #52]	; 80049e4 <_ZN3jlb10ControllerC1ENS_9DirectionE+0x12c>
 80049b2:	eddf 1a0a 	vldr	s3, [pc, #40]	; 80049dc <_ZN3jlb10ControllerC1ENS_9DirectionE+0x124>
 80049b6:	ed9f 1a0a 	vldr	s2, [pc, #40]	; 80049e0 <_ZN3jlb10ControllerC1ENS_9DirectionE+0x128>
 80049ba:	eddf 0a0c 	vldr	s1, [pc, #48]	; 80049ec <_ZN3jlb10ControllerC1ENS_9DirectionE+0x134>
 80049be:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 80049f8 <_ZN3jlb10ControllerC1ENS_9DirectionE+0x140>
 80049c2:	4618      	mov	r0, r3
 80049c4:	f7ff fa58 	bl	8003e78 <_ZN3PIDC1Efffffffff>
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	4618      	mov	r0, r3
 80049cc:	3708      	adds	r7, #8
 80049ce:	46bd      	mov	sp, r7
 80049d0:	bd80      	pop	{r7, pc}
 80049d2:	bf00      	nop
 80049d4:	42c80000 	.word	0x42c80000
 80049d8:	3dcccccd 	.word	0x3dcccccd
 80049dc:	3d4ccccd 	.word	0x3d4ccccd
 80049e0:	00000000 	.word	0x00000000
 80049e4:	3ba3d70a 	.word	0x3ba3d70a
 80049e8:	3f30a3d7 	.word	0x3f30a3d7
 80049ec:	40866666 	.word	0x40866666
 80049f0:	41b40000 	.word	0x41b40000
 80049f4:	c1b40000 	.word	0xc1b40000
 80049f8:	40dccccd 	.word	0x40dccccd

080049fc <_ZN3jlb10ControllerD1Ev>:

        ~Controller() {}
 80049fc:	b580      	push	{r7, lr}
 80049fe:	b082      	sub	sp, #8
 8004a00:	af00      	add	r7, sp, #0
 8004a02:	6078      	str	r0, [r7, #4]
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	33d4      	adds	r3, #212	; 0xd4
 8004a08:	4618      	mov	r0, r3
 8004a0a:	f7ff fa79 	bl	8003f00 <_ZN3PIDD1Ev>
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	33a4      	adds	r3, #164	; 0xa4
 8004a12:	4618      	mov	r0, r3
 8004a14:	f7ff fa74 	bl	8003f00 <_ZN3PIDD1Ev>
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	3380      	adds	r3, #128	; 0x80
 8004a1c:	4618      	mov	r0, r3
 8004a1e:	f7fe fdc3 	bl	80035a8 <_ZNSt6vectorIfSaIfEED1Ev>
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	3374      	adds	r3, #116	; 0x74
 8004a26:	4618      	mov	r0, r3
 8004a28:	f7fe fdbe 	bl	80035a8 <_ZNSt6vectorIfSaIfEED1Ev>
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	4618      	mov	r0, r3
 8004a30:	3708      	adds	r7, #8
 8004a32:	46bd      	mov	sp, r7
 8004a34:	bd80      	pop	{r7, pc}
	...

08004a38 <_ZN3jlb10Controller20select_control_pointESt6vectorIfSaIfEEf>:

        float select_control_point(std::vector<float> line_positions, float prev_line_position)
 8004a38:	b590      	push	{r4, r7, lr}
 8004a3a:	ed2d 8b02 	vpush	{d8}
 8004a3e:	b085      	sub	sp, #20
 8004a40:	af00      	add	r7, sp, #0
 8004a42:	60f8      	str	r0, [r7, #12]
 8004a44:	60b9      	str	r1, [r7, #8]
 8004a46:	ed87 0a01 	vstr	s0, [r7, #4]
        {
            std::sort(line_positions.begin(), line_positions.end());
 8004a4a:	68b8      	ldr	r0, [r7, #8]
 8004a4c:	f7fe ffbe 	bl	80039cc <_ZNSt6vectorIfSaIfEE5beginEv>
 8004a50:	4604      	mov	r4, r0
 8004a52:	68b8      	ldr	r0, [r7, #8]
 8004a54:	f7fe fe8a 	bl	800376c <_ZNSt6vectorIfSaIfEE3endEv>
 8004a58:	4603      	mov	r3, r0
 8004a5a:	4619      	mov	r1, r3
 8004a5c:	4620      	mov	r0, r4
 8004a5e:	f007 fc83 	bl	800c368 <_ZSt4sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEEvT_S7_>

            if (line_positions.size() == 1) { return line_positions[0]; }
 8004a62:	68b8      	ldr	r0, [r7, #8]
 8004a64:	f7ff f83f 	bl	8003ae6 <_ZNKSt6vectorIfSaIfEE4sizeEv>
 8004a68:	4603      	mov	r3, r0
 8004a6a:	2b01      	cmp	r3, #1
 8004a6c:	bf0c      	ite	eq
 8004a6e:	2301      	moveq	r3, #1
 8004a70:	2300      	movne	r3, #0
 8004a72:	b2db      	uxtb	r3, r3
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d007      	beq.n	8004a88 <_ZN3jlb10Controller20select_control_pointESt6vectorIfSaIfEEf+0x50>
 8004a78:	2100      	movs	r1, #0
 8004a7a:	68b8      	ldr	r0, [r7, #8]
 8004a7c:	f007 fc84 	bl	800c388 <_ZNSt6vectorIfSaIfEEixEj>
 8004a80:	4603      	mov	r3, r0
 8004a82:	edd3 7a00 	vldr	s15, [r3]
 8004a86:	e114      	b.n	8004cb2 <_ZN3jlb10Controller20select_control_pointESt6vectorIfSaIfEEf+0x27a>
            else if (line_positions.size() == 2)
 8004a88:	68b8      	ldr	r0, [r7, #8]
 8004a8a:	f7ff f82c 	bl	8003ae6 <_ZNKSt6vectorIfSaIfEE4sizeEv>
 8004a8e:	4603      	mov	r3, r0
 8004a90:	2b02      	cmp	r3, #2
 8004a92:	bf0c      	ite	eq
 8004a94:	2301      	moveq	r3, #1
 8004a96:	2300      	movne	r3, #0
 8004a98:	b2db      	uxtb	r3, r3
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	f000 8096 	beq.w	8004bcc <_ZN3jlb10Controller20select_control_pointESt6vectorIfSaIfEEf+0x194>
            {
                switch (direction)
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004aa6:	2b02      	cmp	r3, #2
 8004aa8:	d00f      	beq.n	8004aca <_ZN3jlb10Controller20select_control_pointESt6vectorIfSaIfEEf+0x92>
 8004aaa:	2b02      	cmp	r3, #2
 8004aac:	f300 808b 	bgt.w	8004bc6 <_ZN3jlb10Controller20select_control_pointESt6vectorIfSaIfEEf+0x18e>
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d002      	beq.n	8004aba <_ZN3jlb10Controller20select_control_pointESt6vectorIfSaIfEEf+0x82>
 8004ab4:	2b01      	cmp	r3, #1
 8004ab6:	d07e      	beq.n	8004bb6 <_ZN3jlb10Controller20select_control_pointESt6vectorIfSaIfEEf+0x17e>
 8004ab8:	e085      	b.n	8004bc6 <_ZN3jlb10Controller20select_control_pointESt6vectorIfSaIfEEf+0x18e>
                {
                    case Direction::LEFT:
                    {
                        return line_positions[0];
 8004aba:	2100      	movs	r1, #0
 8004abc:	68b8      	ldr	r0, [r7, #8]
 8004abe:	f007 fc63 	bl	800c388 <_ZNSt6vectorIfSaIfEEixEj>
 8004ac2:	4603      	mov	r3, r0
 8004ac4:	edd3 7a00 	vldr	s15, [r3]
 8004ac8:	e0f3      	b.n	8004cb2 <_ZN3jlb10Controller20select_control_pointESt6vectorIfSaIfEEf+0x27a>
                    }
                    case Direction::STRAIGHT:
                    {
                        if (direction == prev_direction)
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ad6:	429a      	cmp	r2, r3
 8004ad8:	d136      	bne.n	8004b48 <_ZN3jlb10Controller20select_control_pointESt6vectorIfSaIfEEf+0x110>
                        {
                            return std::fabs(line_positions[0] - prev_line_position) < std::fabs(line_positions[1] - prev_line_position) ? line_positions[0] : line_positions[1];
 8004ada:	2100      	movs	r1, #0
 8004adc:	68b8      	ldr	r0, [r7, #8]
 8004ade:	f007 fc53 	bl	800c388 <_ZNSt6vectorIfSaIfEEixEj>
 8004ae2:	4603      	mov	r3, r0
 8004ae4:	ed93 7a00 	vldr	s14, [r3]
 8004ae8:	edd7 7a01 	vldr	s15, [r7, #4]
 8004aec:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004af0:	eeb0 0a67 	vmov.f32	s0, s15
 8004af4:	f7ff fe36 	bl	8004764 <_ZSt4fabsf>
 8004af8:	eeb0 8a40 	vmov.f32	s16, s0
 8004afc:	2101      	movs	r1, #1
 8004afe:	68b8      	ldr	r0, [r7, #8]
 8004b00:	f007 fc42 	bl	800c388 <_ZNSt6vectorIfSaIfEEixEj>
 8004b04:	4603      	mov	r3, r0
 8004b06:	ed93 7a00 	vldr	s14, [r3]
 8004b0a:	edd7 7a01 	vldr	s15, [r7, #4]
 8004b0e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004b12:	eeb0 0a67 	vmov.f32	s0, s15
 8004b16:	f7ff fe25 	bl	8004764 <_ZSt4fabsf>
 8004b1a:	eef0 7a40 	vmov.f32	s15, s0
 8004b1e:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8004b22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b26:	d507      	bpl.n	8004b38 <_ZN3jlb10Controller20select_control_pointESt6vectorIfSaIfEEf+0x100>
 8004b28:	2100      	movs	r1, #0
 8004b2a:	68b8      	ldr	r0, [r7, #8]
 8004b2c:	f007 fc2c 	bl	800c388 <_ZNSt6vectorIfSaIfEEixEj>
 8004b30:	4603      	mov	r3, r0
 8004b32:	edd3 7a00 	vldr	s15, [r3]
 8004b36:	e0bc      	b.n	8004cb2 <_ZN3jlb10Controller20select_control_pointESt6vectorIfSaIfEEf+0x27a>
 8004b38:	2101      	movs	r1, #1
 8004b3a:	68b8      	ldr	r0, [r7, #8]
 8004b3c:	f007 fc24 	bl	800c388 <_ZNSt6vectorIfSaIfEEixEj>
 8004b40:	4603      	mov	r3, r0
 8004b42:	edd3 7a00 	vldr	s15, [r3]
 8004b46:	e0b4      	b.n	8004cb2 <_ZN3jlb10Controller20select_control_pointESt6vectorIfSaIfEEf+0x27a>
                        }
                        else { return std::fabs(line_positions[0] - prev_line_position) > std::fabs(line_positions[1] - prev_line_position) ? line_positions[0] : line_positions[1]; }
 8004b48:	2100      	movs	r1, #0
 8004b4a:	68b8      	ldr	r0, [r7, #8]
 8004b4c:	f007 fc1c 	bl	800c388 <_ZNSt6vectorIfSaIfEEixEj>
 8004b50:	4603      	mov	r3, r0
 8004b52:	ed93 7a00 	vldr	s14, [r3]
 8004b56:	edd7 7a01 	vldr	s15, [r7, #4]
 8004b5a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004b5e:	eeb0 0a67 	vmov.f32	s0, s15
 8004b62:	f7ff fdff 	bl	8004764 <_ZSt4fabsf>
 8004b66:	eeb0 8a40 	vmov.f32	s16, s0
 8004b6a:	2101      	movs	r1, #1
 8004b6c:	68b8      	ldr	r0, [r7, #8]
 8004b6e:	f007 fc0b 	bl	800c388 <_ZNSt6vectorIfSaIfEEixEj>
 8004b72:	4603      	mov	r3, r0
 8004b74:	ed93 7a00 	vldr	s14, [r3]
 8004b78:	edd7 7a01 	vldr	s15, [r7, #4]
 8004b7c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004b80:	eeb0 0a67 	vmov.f32	s0, s15
 8004b84:	f7ff fdee 	bl	8004764 <_ZSt4fabsf>
 8004b88:	eef0 7a40 	vmov.f32	s15, s0
 8004b8c:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8004b90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b94:	dd07      	ble.n	8004ba6 <_ZN3jlb10Controller20select_control_pointESt6vectorIfSaIfEEf+0x16e>
 8004b96:	2100      	movs	r1, #0
 8004b98:	68b8      	ldr	r0, [r7, #8]
 8004b9a:	f007 fbf5 	bl	800c388 <_ZNSt6vectorIfSaIfEEixEj>
 8004b9e:	4603      	mov	r3, r0
 8004ba0:	edd3 7a00 	vldr	s15, [r3]
 8004ba4:	e085      	b.n	8004cb2 <_ZN3jlb10Controller20select_control_pointESt6vectorIfSaIfEEf+0x27a>
 8004ba6:	2101      	movs	r1, #1
 8004ba8:	68b8      	ldr	r0, [r7, #8]
 8004baa:	f007 fbed 	bl	800c388 <_ZNSt6vectorIfSaIfEEixEj>
 8004bae:	4603      	mov	r3, r0
 8004bb0:	edd3 7a00 	vldr	s15, [r3]
 8004bb4:	e07d      	b.n	8004cb2 <_ZN3jlb10Controller20select_control_pointESt6vectorIfSaIfEEf+0x27a>
                    }
                    case Direction::RIGHT:
                    {
                        return line_positions[1];
 8004bb6:	2101      	movs	r1, #1
 8004bb8:	68b8      	ldr	r0, [r7, #8]
 8004bba:	f007 fbe5 	bl	800c388 <_ZNSt6vectorIfSaIfEEixEj>
 8004bbe:	4603      	mov	r3, r0
 8004bc0:	edd3 7a00 	vldr	s15, [r3]
 8004bc4:	e075      	b.n	8004cb2 <_ZN3jlb10Controller20select_control_pointESt6vectorIfSaIfEEf+0x27a>
                    }
                    default:
                        return 0.0f;
 8004bc6:	eddf 7a3e 	vldr	s15, [pc, #248]	; 8004cc0 <_ZN3jlb10Controller20select_control_pointESt6vectorIfSaIfEEf+0x288>
 8004bca:	e072      	b.n	8004cb2 <_ZN3jlb10Controller20select_control_pointESt6vectorIfSaIfEEf+0x27a>
                }
            }
            else if (line_positions.size() == 3)
 8004bcc:	68b8      	ldr	r0, [r7, #8]
 8004bce:	f7fe ff8a 	bl	8003ae6 <_ZNKSt6vectorIfSaIfEE4sizeEv>
 8004bd2:	4603      	mov	r3, r0
 8004bd4:	2b03      	cmp	r3, #3
 8004bd6:	bf0c      	ite	eq
 8004bd8:	2301      	moveq	r3, #1
 8004bda:	2300      	movne	r3, #0
 8004bdc:	b2db      	uxtb	r3, r3
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d026      	beq.n	8004c30 <_ZN3jlb10Controller20select_control_pointESt6vectorIfSaIfEEf+0x1f8>
            {
                switch (direction)
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004be8:	2b02      	cmp	r3, #2
 8004bea:	d00e      	beq.n	8004c0a <_ZN3jlb10Controller20select_control_pointESt6vectorIfSaIfEEf+0x1d2>
 8004bec:	2b02      	cmp	r3, #2
 8004bee:	dc1c      	bgt.n	8004c2a <_ZN3jlb10Controller20select_control_pointESt6vectorIfSaIfEEf+0x1f2>
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d002      	beq.n	8004bfa <_ZN3jlb10Controller20select_control_pointESt6vectorIfSaIfEEf+0x1c2>
 8004bf4:	2b01      	cmp	r3, #1
 8004bf6:	d010      	beq.n	8004c1a <_ZN3jlb10Controller20select_control_pointESt6vectorIfSaIfEEf+0x1e2>
 8004bf8:	e017      	b.n	8004c2a <_ZN3jlb10Controller20select_control_pointESt6vectorIfSaIfEEf+0x1f2>
                {
                    case Direction::LEFT:
                    {
                        return line_positions[0];
 8004bfa:	2100      	movs	r1, #0
 8004bfc:	68b8      	ldr	r0, [r7, #8]
 8004bfe:	f007 fbc3 	bl	800c388 <_ZNSt6vectorIfSaIfEEixEj>
 8004c02:	4603      	mov	r3, r0
 8004c04:	edd3 7a00 	vldr	s15, [r3]
 8004c08:	e053      	b.n	8004cb2 <_ZN3jlb10Controller20select_control_pointESt6vectorIfSaIfEEf+0x27a>
                    }
                    case Direction::STRAIGHT:
                    {
                        return line_positions[1];
 8004c0a:	2101      	movs	r1, #1
 8004c0c:	68b8      	ldr	r0, [r7, #8]
 8004c0e:	f007 fbbb 	bl	800c388 <_ZNSt6vectorIfSaIfEEixEj>
 8004c12:	4603      	mov	r3, r0
 8004c14:	edd3 7a00 	vldr	s15, [r3]
 8004c18:	e04b      	b.n	8004cb2 <_ZN3jlb10Controller20select_control_pointESt6vectorIfSaIfEEf+0x27a>
                    }
                    case Direction::RIGHT:
                    {
                        return line_positions[2];
 8004c1a:	2102      	movs	r1, #2
 8004c1c:	68b8      	ldr	r0, [r7, #8]
 8004c1e:	f007 fbb3 	bl	800c388 <_ZNSt6vectorIfSaIfEEixEj>
 8004c22:	4603      	mov	r3, r0
 8004c24:	edd3 7a00 	vldr	s15, [r3]
 8004c28:	e043      	b.n	8004cb2 <_ZN3jlb10Controller20select_control_pointESt6vectorIfSaIfEEf+0x27a>
                    }
                    default:
                        return 0.0f;
 8004c2a:	eddf 7a25 	vldr	s15, [pc, #148]	; 8004cc0 <_ZN3jlb10Controller20select_control_pointESt6vectorIfSaIfEEf+0x288>
 8004c2e:	e040      	b.n	8004cb2 <_ZN3jlb10Controller20select_control_pointESt6vectorIfSaIfEEf+0x27a>
                }
            }
            else if (line_positions.size() == 4)
 8004c30:	68b8      	ldr	r0, [r7, #8]
 8004c32:	f7fe ff58 	bl	8003ae6 <_ZNKSt6vectorIfSaIfEE4sizeEv>
 8004c36:	4603      	mov	r3, r0
 8004c38:	2b04      	cmp	r3, #4
 8004c3a:	bf0c      	ite	eq
 8004c3c:	2301      	moveq	r3, #1
 8004c3e:	2300      	movne	r3, #0
 8004c40:	b2db      	uxtb	r3, r3
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d033      	beq.n	8004cae <_ZN3jlb10Controller20select_control_pointESt6vectorIfSaIfEEf+0x276>
            {
                switch (direction)
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004c4c:	2b02      	cmp	r3, #2
 8004c4e:	d00e      	beq.n	8004c6e <_ZN3jlb10Controller20select_control_pointESt6vectorIfSaIfEEf+0x236>
 8004c50:	2b02      	cmp	r3, #2
 8004c52:	dc29      	bgt.n	8004ca8 <_ZN3jlb10Controller20select_control_pointESt6vectorIfSaIfEEf+0x270>
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d002      	beq.n	8004c5e <_ZN3jlb10Controller20select_control_pointESt6vectorIfSaIfEEf+0x226>
 8004c58:	2b01      	cmp	r3, #1
 8004c5a:	d01d      	beq.n	8004c98 <_ZN3jlb10Controller20select_control_pointESt6vectorIfSaIfEEf+0x260>
 8004c5c:	e024      	b.n	8004ca8 <_ZN3jlb10Controller20select_control_pointESt6vectorIfSaIfEEf+0x270>
                {
                    case Direction::LEFT:
                    {
                        return line_positions[0];
 8004c5e:	2100      	movs	r1, #0
 8004c60:	68b8      	ldr	r0, [r7, #8]
 8004c62:	f007 fb91 	bl	800c388 <_ZNSt6vectorIfSaIfEEixEj>
 8004c66:	4603      	mov	r3, r0
 8004c68:	edd3 7a00 	vldr	s15, [r3]
 8004c6c:	e021      	b.n	8004cb2 <_ZN3jlb10Controller20select_control_pointESt6vectorIfSaIfEEf+0x27a>
                    }
                    case Direction::STRAIGHT:
                    {
                        return line_positions[1] + line_positions[2] / 2.0f;
 8004c6e:	2101      	movs	r1, #1
 8004c70:	68b8      	ldr	r0, [r7, #8]
 8004c72:	f007 fb89 	bl	800c388 <_ZNSt6vectorIfSaIfEEixEj>
 8004c76:	4603      	mov	r3, r0
 8004c78:	ed93 8a00 	vldr	s16, [r3]
 8004c7c:	2102      	movs	r1, #2
 8004c7e:	68b8      	ldr	r0, [r7, #8]
 8004c80:	f007 fb82 	bl	800c388 <_ZNSt6vectorIfSaIfEEixEj>
 8004c84:	4603      	mov	r3, r0
 8004c86:	ed93 7a00 	vldr	s14, [r3]
 8004c8a:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8004c8e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004c92:	ee78 7a27 	vadd.f32	s15, s16, s15
 8004c96:	e00c      	b.n	8004cb2 <_ZN3jlb10Controller20select_control_pointESt6vectorIfSaIfEEf+0x27a>
                    }
                    case Direction::RIGHT:
                    {
                        return line_positions[3];
 8004c98:	2103      	movs	r1, #3
 8004c9a:	68b8      	ldr	r0, [r7, #8]
 8004c9c:	f007 fb74 	bl	800c388 <_ZNSt6vectorIfSaIfEEixEj>
 8004ca0:	4603      	mov	r3, r0
 8004ca2:	edd3 7a00 	vldr	s15, [r3]
 8004ca6:	e004      	b.n	8004cb2 <_ZN3jlb10Controller20select_control_pointESt6vectorIfSaIfEEf+0x27a>
                    }
                    default:
                        return 0.0f;
 8004ca8:	eddf 7a05 	vldr	s15, [pc, #20]	; 8004cc0 <_ZN3jlb10Controller20select_control_pointESt6vectorIfSaIfEEf+0x288>
 8004cac:	e001      	b.n	8004cb2 <_ZN3jlb10Controller20select_control_pointESt6vectorIfSaIfEEf+0x27a>
            }
            else
            {
                // this should never happen

                return 0.0f;
 8004cae:	eddf 7a04 	vldr	s15, [pc, #16]	; 8004cc0 <_ZN3jlb10Controller20select_control_pointESt6vectorIfSaIfEEf+0x288>
            }
        }
 8004cb2:	eeb0 0a67 	vmov.f32	s0, s15
 8004cb6:	3714      	adds	r7, #20
 8004cb8:	46bd      	mov	sp, r7
 8004cba:	ecbd 8b02 	vpop	{d8}
 8004cbe:	bd90      	pop	{r4, r7, pc}
	...

08004cc8 <_ZN3jlb10Controller18get_control_paramsEv>:

        ControlParams get_control_params()
 8004cc8:	b5b0      	push	{r4, r5, r7, lr}
 8004cca:	b09e      	sub	sp, #120	; 0x78
 8004ccc:	af00      	add	r7, sp, #0
 8004cce:	60f8      	str	r0, [r7, #12]
        {
        	current_velocity += std::numeric_limits<float>::epsilon();
 8004cd0:	f7ff fd18 	bl	8004704 <_ZNSt14numeric_limitsIfE7epsilonEv>
 8004cd4:	eeb0 7a40 	vmov.f32	s14, s0
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	edd3 7a28 	vldr	s15, [r3, #160]	; 0xa0
 8004cde:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	edc3 7a28 	vstr	s15, [r3, #160]	; 0xa0

        	//float               d5  = OFFSET + SLOPE * current_velocity;
        	float               d5  = OFFSET_EXP1 + std::log2(current_velocity + OFFSET_EXP2);
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	edd3 7a28 	vldr	s15, [r3, #160]	; 0xa0
 8004cee:	ed9f 7a8c 	vldr	s14, [pc, #560]	; 8004f20 <_ZN3jlb10Controller18get_control_paramsEv+0x258>
 8004cf2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004cf6:	eeb0 0a67 	vmov.f32	s0, s15
 8004cfa:	f7ff fd53 	bl	80047a4 <_ZSt4log2f>
 8004cfe:	eef0 7a40 	vmov.f32	s15, s0
 8004d02:	eeb1 7a02 	vmov.f32	s14, #18	; 0x40900000  4.5
 8004d06:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004d0a:	edc7 7a1d 	vstr	s15, [r7, #116]	; 0x74
            if (d5 < D5_MIN) d5 = D5_MIN;
 8004d0e:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8004d12:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 8004d16:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004d1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d1e:	d502      	bpl.n	8004d26 <_ZN3jlb10Controller18get_control_paramsEv+0x5e>
 8004d20:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8004d24:	677b      	str	r3, [r7, #116]	; 0x74
            float               t5  = d5 / current_velocity;
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	ed93 7a28 	vldr	s14, [r3, #160]	; 0xa0
 8004d2c:	edd7 6a1d 	vldr	s13, [r7, #116]	; 0x74
 8004d30:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004d34:	edc7 7a1c 	vstr	s15, [r7, #112]	; 0x70
            float               T   = t5 / 3.0f * DAMPING;
 8004d38:	ed97 7a1c 	vldr	s14, [r7, #112]	; 0x70
 8004d3c:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 8004d40:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004d44:	ed9f 7a77 	vldr	s14, [pc, #476]	; 8004f24 <_ZN3jlb10Controller18get_control_paramsEv+0x25c>
 8004d48:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004d4c:	edc7 7a1b 	vstr	s15, [r7, #108]	; 0x6c
            float               wp  = (1.0f / T) * sqrt(1.0f - DAMPING * DAMPING);
 8004d50:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004d54:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 8004d58:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8004d5c:	ee16 0a90 	vmov	r0, s13
 8004d60:	f7fb fbe4 	bl	800052c <__aeabi_f2d>
 8004d64:	a36c      	add	r3, pc, #432	; (adr r3, 8004f18 <_ZN3jlb10Controller18get_control_paramsEv+0x250>)
 8004d66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d6a:	f7fb fc37 	bl	80005dc <__aeabi_dmul>
 8004d6e:	4602      	mov	r2, r0
 8004d70:	460b      	mov	r3, r1
 8004d72:	4610      	mov	r0, r2
 8004d74:	4619      	mov	r1, r3
 8004d76:	f7fb ff29 	bl	8000bcc <__aeabi_d2f>
 8004d7a:	4603      	mov	r3, r0
 8004d7c:	66bb      	str	r3, [r7, #104]	; 0x68
            float               phi = acosf(DAMPING);
 8004d7e:	4b6a      	ldr	r3, [pc, #424]	; (8004f28 <_ZN3jlb10Controller18get_control_paramsEv+0x260>)
 8004d80:	667b      	str	r3, [r7, #100]	; 0x64
            float               x   = wp / tan(phi);
 8004d82:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 8004d84:	f7fb fbd2 	bl	800052c <__aeabi_f2d>
 8004d88:	4604      	mov	r4, r0
 8004d8a:	460d      	mov	r5, r1
 8004d8c:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8004d8e:	f7fb fbcd 	bl	800052c <__aeabi_f2d>
 8004d92:	4602      	mov	r2, r0
 8004d94:	460b      	mov	r3, r1
 8004d96:	ec43 2b10 	vmov	d0, r2, r3
 8004d9a:	f01c fae1 	bl	8021360 <tan>
 8004d9e:	ec53 2b10 	vmov	r2, r3, d0
 8004da2:	4620      	mov	r0, r4
 8004da4:	4629      	mov	r1, r5
 8004da6:	f7fb fd43 	bl	8000830 <__aeabi_ddiv>
 8004daa:	4602      	mov	r2, r0
 8004dac:	460b      	mov	r3, r1
 8004dae:	4610      	mov	r0, r2
 8004db0:	4619      	mov	r1, r3
 8004db2:	f7fb ff0b 	bl	8000bcc <__aeabi_d2f>
 8004db6:	4603      	mov	r3, r0
 8004db8:	663b      	str	r3, [r7, #96]	; 0x60
            std::complex<float> s1  = std::complex<float>(x, wp);
 8004dba:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004dbe:	edd7 0a1a 	vldr	s1, [r7, #104]	; 0x68
 8004dc2:	ed97 0a18 	vldr	s0, [r7, #96]	; 0x60
 8004dc6:	4618      	mov	r0, r3
 8004dc8:	f7ff fcfc 	bl	80047c4 <_ZNSt7complexIfEC1Eff>
            std::complex<float> s2  = std::complex<float>(x, -wp);
 8004dcc:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 8004dd0:	eef1 7a67 	vneg.f32	s15, s15
 8004dd4:	f107 0320 	add.w	r3, r7, #32
 8004dd8:	eef0 0a67 	vmov.f32	s1, s15
 8004ddc:	ed97 0a18 	vldr	s0, [r7, #96]	; 0x60
 8004de0:	4618      	mov	r0, r3
 8004de2:	f7ff fcef 	bl	80047c4 <_ZNSt7complexIfEC1Eff>

            std::complex<float> kP     = -SENSOR_BASE / (current_velocity * current_velocity) * s1 * s2;
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	ed93 7a28 	vldr	s14, [r3, #160]	; 0xa0
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	edd3 7a28 	vldr	s15, [r3, #160]	; 0xa0
 8004df2:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004df6:	eefe 6a00 	vmov.f32	s13, #224	; 0xbf000000 -0.5
 8004dfa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004dfe:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
 8004e02:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8004e06:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8004e0a:	4611      	mov	r1, r2
 8004e0c:	4618      	mov	r0, r3
 8004e0e:	f007 facb 	bl	800c3a8 <_ZStmlIfESt7complexIT_ERKS1_RKS2_>
 8004e12:	eeb0 7a40 	vmov.f32	s14, s0
 8004e16:	eef0 7a60 	vmov.f32	s15, s1
 8004e1a:	ed87 7a0c 	vstr	s14, [r7, #48]	; 0x30
 8004e1e:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
 8004e22:	f107 0220 	add.w	r2, r7, #32
 8004e26:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004e2a:	4611      	mov	r1, r2
 8004e2c:	4618      	mov	r0, r3
 8004e2e:	f007 fb0d 	bl	800c44c <_ZStmlIfESt7complexIT_ERKS2_S4_>
 8004e32:	eeb0 7a40 	vmov.f32	s14, s0
 8004e36:	eef0 7a60 	vmov.f32	s15, s1
 8004e3a:	ed87 7a06 	vstr	s14, [r7, #24]
 8004e3e:	edc7 7a07 	vstr	s15, [r7, #28]
            std::complex<float> kDelta = -SENSOR_BASE / current_velocity * ((s1 + s2) - current_velocity * kP);
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	ed93 7a28 	vldr	s14, [r3, #160]	; 0xa0
 8004e48:	eefe 6a00 	vmov.f32	s13, #224	; 0xbf000000 -0.5
 8004e4c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004e50:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
 8004e54:	f107 0220 	add.w	r2, r7, #32
 8004e58:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004e5c:	4611      	mov	r1, r2
 8004e5e:	4618      	mov	r0, r3
 8004e60:	f007 fb36 	bl	800c4d0 <_ZStplIfESt7complexIT_ERKS2_S4_>
 8004e64:	eeb0 7a40 	vmov.f32	s14, s0
 8004e68:	eef0 7a60 	vmov.f32	s15, s1
 8004e6c:	ed87 7a12 	vstr	s14, [r7, #72]	; 0x48
 8004e70:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	33a0      	adds	r3, #160	; 0xa0
 8004e78:	f107 0218 	add.w	r2, r7, #24
 8004e7c:	4611      	mov	r1, r2
 8004e7e:	4618      	mov	r0, r3
 8004e80:	f007 fa92 	bl	800c3a8 <_ZStmlIfESt7complexIT_ERKS1_RKS2_>
 8004e84:	eeb0 7a40 	vmov.f32	s14, s0
 8004e88:	eef0 7a60 	vmov.f32	s15, s1
 8004e8c:	ed87 7a14 	vstr	s14, [r7, #80]	; 0x50
 8004e90:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
 8004e94:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8004e98:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8004e9c:	4611      	mov	r1, r2
 8004e9e:	4618      	mov	r0, r3
 8004ea0:	f007 fb58 	bl	800c554 <_ZStmiIfESt7complexIT_ERKS2_S4_>
 8004ea4:	eeb0 7a40 	vmov.f32	s14, s0
 8004ea8:	eef0 7a60 	vmov.f32	s15, s1
 8004eac:	ed87 7a10 	vstr	s14, [r7, #64]	; 0x40
 8004eb0:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
 8004eb4:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8004eb8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8004ebc:	4611      	mov	r1, r2
 8004ebe:	4618      	mov	r0, r3
 8004ec0:	f007 fa72 	bl	800c3a8 <_ZStmlIfESt7complexIT_ERKS1_RKS2_>
 8004ec4:	eeb0 7a40 	vmov.f32	s14, s0
 8004ec8:	eef0 7a60 	vmov.f32	s15, s1
 8004ecc:	ed87 7a04 	vstr	s14, [r7, #16]
 8004ed0:	edc7 7a05 	vstr	s15, [r7, #20]

            return {kP.real(), kDelta.real()};
 8004ed4:	f107 0318 	add.w	r3, r7, #24
 8004ed8:	4618      	mov	r0, r3
 8004eda:	f7ff fc87 	bl	80047ec <_ZNKSt7complexIfE4realB5cxx11Ev>
 8004ede:	eef0 7a40 	vmov.f32	s15, s0
 8004ee2:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
 8004ee6:	f107 0310 	add.w	r3, r7, #16
 8004eea:	4618      	mov	r0, r3
 8004eec:	f7ff fc7e 	bl	80047ec <_ZNKSt7complexIfE4realB5cxx11Ev>
 8004ef0:	eef0 7a40 	vmov.f32	s15, s0
 8004ef4:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
 8004ef8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004efa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004efc:	ee07 2a10 	vmov	s14, r2
 8004f00:	ee07 3a90 	vmov	s15, r3
        }
 8004f04:	eeb0 0a47 	vmov.f32	s0, s14
 8004f08:	eef0 0a67 	vmov.f32	s1, s15
 8004f0c:	3778      	adds	r7, #120	; 0x78
 8004f0e:	46bd      	mov	sp, r7
 8004f10:	bdb0      	pop	{r4, r5, r7, pc}
 8004f12:	bf00      	nop
 8004f14:	f3af 8000 	nop.w
 8004f18:	00b412ca 	.word	0x00b412ca
 8004f1c:	3fdbe59f 	.word	0x3fdbe59f
 8004f20:	3fb0a3d7 	.word	0x3fb0a3d7
 8004f24:	3f666666 	.word	0x3f666666
 8004f28:	3ee6ecfe 	.word	0x3ee6ecfe

08004f2c <_ZZN3jlb10Controller15lateral_controlEfENKUlbE_clEb>:

        void lateral_control([[maybe_unused]] const float dt)
        {
        	if (std::all_of(std::begin(detection_front), std::end(detection_front), [](bool b) { return b; }) ||
 8004f2c:	b480      	push	{r7}
 8004f2e:	b083      	sub	sp, #12
 8004f30:	af00      	add	r7, sp, #0
 8004f32:	6078      	str	r0, [r7, #4]
 8004f34:	460b      	mov	r3, r1
 8004f36:	70fb      	strb	r3, [r7, #3]
 8004f38:	78fb      	ldrb	r3, [r7, #3]
 8004f3a:	4618      	mov	r0, r3
 8004f3c:	370c      	adds	r7, #12
 8004f3e:	46bd      	mov	sp, r7
 8004f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f44:	4770      	bx	lr

08004f46 <_ZZN3jlb10Controller15lateral_controlEfENKUlbE0_clEb>:
			std::all_of(std::begin(detection_rear), std::end(detection_rear), [](bool b) { return b; }) || line_positions_front.size() == 0 ||
 8004f46:	b480      	push	{r7}
 8004f48:	b083      	sub	sp, #12
 8004f4a:	af00      	add	r7, sp, #0
 8004f4c:	6078      	str	r0, [r7, #4]
 8004f4e:	460b      	mov	r3, r1
 8004f50:	70fb      	strb	r3, [r7, #3]
 8004f52:	78fb      	ldrb	r3, [r7, #3]
 8004f54:	4618      	mov	r0, r3
 8004f56:	370c      	adds	r7, #12
 8004f58:	46bd      	mov	sp, r7
 8004f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f5e:	4770      	bx	lr

08004f60 <_ZN3jlb10Controller15lateral_controlEf>:
        void lateral_control([[maybe_unused]] const float dt)
 8004f60:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004f62:	b08d      	sub	sp, #52	; 0x34
 8004f64:	af00      	add	r7, sp, #0
 8004f66:	6078      	str	r0, [r7, #4]
 8004f68:	ed87 0a00 	vstr	s0, [r7]
        	if (std::all_of(std::begin(detection_front), std::end(detection_front), [](bool b) { return b; }) ||
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	3334      	adds	r3, #52	; 0x34
 8004f70:	4618      	mov	r0, r3
 8004f72:	f007 fb0c 	bl	800c58e <_ZSt5beginIbLj32EEPT_RAT0__S0_>
 8004f76:	4604      	mov	r4, r0
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	3334      	adds	r3, #52	; 0x34
 8004f7c:	4618      	mov	r0, r3
 8004f7e:	f007 fb11 	bl	800c5a4 <_ZSt3endIbLj32EEPT_RAT0__S0_>
 8004f82:	4603      	mov	r3, r0
 8004f84:	4632      	mov	r2, r6
 8004f86:	4619      	mov	r1, r3
 8004f88:	4620      	mov	r0, r4
 8004f8a:	f007 fb17 	bl	800c5bc <_ZSt6all_ofIPbZN3jlb10Controller15lateral_controlEfEUlbE_EbT_S4_T0_>
 8004f8e:	4603      	mov	r3, r0
			std::all_of(std::begin(detection_rear), std::end(detection_rear), [](bool b) { return b; }) || line_positions_front.size() == 0 ||
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d123      	bne.n	8004fdc <_ZN3jlb10Controller15lateral_controlEf+0x7c>
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	3354      	adds	r3, #84	; 0x54
 8004f98:	4618      	mov	r0, r3
 8004f9a:	f007 faf8 	bl	800c58e <_ZSt5beginIbLj32EEPT_RAT0__S0_>
 8004f9e:	4604      	mov	r4, r0
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	3354      	adds	r3, #84	; 0x54
 8004fa4:	4618      	mov	r0, r3
 8004fa6:	f007 fafd 	bl	800c5a4 <_ZSt3endIbLj32EEPT_RAT0__S0_>
 8004faa:	4603      	mov	r3, r0
 8004fac:	462a      	mov	r2, r5
 8004fae:	4619      	mov	r1, r3
 8004fb0:	4620      	mov	r0, r4
 8004fb2:	f007 fb19 	bl	800c5e8 <_ZSt6all_ofIPbZN3jlb10Controller15lateral_controlEfEUlbE0_EbT_S4_T0_>
 8004fb6:	4603      	mov	r3, r0
        	if (std::all_of(std::begin(detection_front), std::end(detection_front), [](bool b) { return b; }) ||
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d10f      	bne.n	8004fdc <_ZN3jlb10Controller15lateral_controlEf+0x7c>
			std::all_of(std::begin(detection_rear), std::end(detection_rear), [](bool b) { return b; }) || line_positions_front.size() == 0 ||
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	3374      	adds	r3, #116	; 0x74
 8004fc0:	4618      	mov	r0, r3
 8004fc2:	f7fe fd90 	bl	8003ae6 <_ZNKSt6vectorIfSaIfEE4sizeEv>
 8004fc6:	4603      	mov	r3, r0
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d007      	beq.n	8004fdc <_ZN3jlb10Controller15lateral_controlEf+0x7c>
			line_positions_rear.size() == 0)
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	3380      	adds	r3, #128	; 0x80
 8004fd0:	4618      	mov	r0, r3
 8004fd2:	f7fe fd88 	bl	8003ae6 <_ZNKSt6vectorIfSaIfEE4sizeEv>
 8004fd6:	4603      	mov	r3, r0
			std::all_of(std::begin(detection_rear), std::end(detection_rear), [](bool b) { return b; }) || line_positions_front.size() == 0 ||
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d101      	bne.n	8004fe0 <_ZN3jlb10Controller15lateral_controlEf+0x80>
 8004fdc:	2301      	movs	r3, #1
 8004fde:	e000      	b.n	8004fe2 <_ZN3jlb10Controller15lateral_controlEf+0x82>
 8004fe0:	2300      	movs	r3, #0
        	if (std::all_of(std::begin(detection_front), std::end(detection_front), [](bool b) { return b; }) ||
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d044      	beq.n	8005070 <_ZN3jlb10Controller15lateral_controlEf+0x110>
        	{
				if(target_speed <= FAST_SPEED_TURN || target_speed <= LABYRINTH_SPEED || target_speed <= LABYRINTH_SPEED_REVERSE)
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	edd3 7a07 	vldr	s15, [r3, #28]
 8004fec:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 8004ff0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004ff4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004ff8:	d914      	bls.n	8005024 <_ZN3jlb10Controller15lateral_controlEf+0xc4>
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	edd3 7a07 	vldr	s15, [r3, #28]
 8005000:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005004:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005008:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800500c:	d90a      	bls.n	8005024 <_ZN3jlb10Controller15lateral_controlEf+0xc4>
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	edd3 7a07 	vldr	s15, [r3, #28]
 8005014:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8005018:	eef4 7ac7 	vcmpe.f32	s15, s14
 800501c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005020:	d900      	bls.n	8005024 <_ZN3jlb10Controller15lateral_controlEf+0xc4>
				{
					if (target_angle < 0) { target_angle = -deg2rad(MAX_WHEEL_ANGLE); }
					else if (target_angle == 0) { target_angle = 0; }
					else if (target_angle > 0) { target_angle = deg2rad(MAX_WHEEL_ANGLE); }
				}
				return;
 8005022:	e0f9      	b.n	8005218 <_ZN3jlb10Controller15lateral_controlEf+0x2b8>
					if (target_angle < 0) { target_angle = -deg2rad(MAX_WHEEL_ANGLE); }
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	edd3 7a06 	vldr	s15, [r3, #24]
 800502a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800502e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005032:	d503      	bpl.n	800503c <_ZN3jlb10Controller15lateral_controlEf+0xdc>
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	4a7a      	ldr	r2, [pc, #488]	; (8005220 <_ZN3jlb10Controller15lateral_controlEf+0x2c0>)
 8005038:	619a      	str	r2, [r3, #24]
				return;
 800503a:	e0ed      	b.n	8005218 <_ZN3jlb10Controller15lateral_controlEf+0x2b8>
					else if (target_angle == 0) { target_angle = 0; }
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	edd3 7a06 	vldr	s15, [r3, #24]
 8005042:	eef5 7a40 	vcmp.f32	s15, #0.0
 8005046:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800504a:	d104      	bne.n	8005056 <_ZN3jlb10Controller15lateral_controlEf+0xf6>
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	f04f 0200 	mov.w	r2, #0
 8005052:	619a      	str	r2, [r3, #24]
				return;
 8005054:	e0e0      	b.n	8005218 <_ZN3jlb10Controller15lateral_controlEf+0x2b8>
					else if (target_angle > 0) { target_angle = deg2rad(MAX_WHEEL_ANGLE); }
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	edd3 7a06 	vldr	s15, [r3, #24]
 800505c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005060:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005064:	dc00      	bgt.n	8005068 <_ZN3jlb10Controller15lateral_controlEf+0x108>
				return;
 8005066:	e0d7      	b.n	8005218 <_ZN3jlb10Controller15lateral_controlEf+0x2b8>
					else if (target_angle > 0) { target_angle = deg2rad(MAX_WHEEL_ANGLE); }
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	4a6e      	ldr	r2, [pc, #440]	; (8005224 <_ZN3jlb10Controller15lateral_controlEf+0x2c4>)
 800506c:	619a      	str	r2, [r3, #24]
				return;
 800506e:	e0d3      	b.n	8005218 <_ZN3jlb10Controller15lateral_controlEf+0x2b8>
        	}

		if (line_positions_front.size() > 4 || line_positions_rear.size() > 4) { return; }
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	3374      	adds	r3, #116	; 0x74
 8005074:	4618      	mov	r0, r3
 8005076:	f7fe fd36 	bl	8003ae6 <_ZNKSt6vectorIfSaIfEE4sizeEv>
 800507a:	4603      	mov	r3, r0
 800507c:	2b04      	cmp	r3, #4
 800507e:	d807      	bhi.n	8005090 <_ZN3jlb10Controller15lateral_controlEf+0x130>
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	3380      	adds	r3, #128	; 0x80
 8005084:	4618      	mov	r0, r3
 8005086:	f7fe fd2e 	bl	8003ae6 <_ZNKSt6vectorIfSaIfEE4sizeEv>
 800508a:	4603      	mov	r3, r0
 800508c:	2b04      	cmp	r3, #4
 800508e:	d901      	bls.n	8005094 <_ZN3jlb10Controller15lateral_controlEf+0x134>
 8005090:	2301      	movs	r3, #1
 8005092:	e000      	b.n	8005096 <_ZN3jlb10Controller15lateral_controlEf+0x136>
 8005094:	2300      	movs	r3, #0
 8005096:	2b00      	cmp	r3, #0
 8005098:	f040 80bd 	bne.w	8005216 <_ZN3jlb10Controller15lateral_controlEf+0x2b6>
            line_position_front      = select_control_point(line_positions_front, prev_line_position_front);
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	f103 0274 	add.w	r2, r3, #116	; 0x74
 80050a2:	f107 0310 	add.w	r3, r7, #16
 80050a6:	4611      	mov	r1, r2
 80050a8:	4618      	mov	r0, r3
 80050aa:	f007 fab3 	bl	800c614 <_ZNSt6vectorIfSaIfEEC1ERKS1_>
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	edd3 7a04 	vldr	s15, [r3, #16]
 80050b4:	f107 0310 	add.w	r3, r7, #16
 80050b8:	eeb0 0a67 	vmov.f32	s0, s15
 80050bc:	4619      	mov	r1, r3
 80050be:	6878      	ldr	r0, [r7, #4]
 80050c0:	f7ff fcba 	bl	8004a38 <_ZN3jlb10Controller20select_control_pointESt6vectorIfSaIfEEf>
 80050c4:	eef0 7a40 	vmov.f32	s15, s0
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	edc3 7a02 	vstr	s15, [r3, #8]
 80050ce:	f107 0310 	add.w	r3, r7, #16
 80050d2:	4618      	mov	r0, r3
 80050d4:	f7fe fa68 	bl	80035a8 <_ZNSt6vectorIfSaIfEED1Ev>
            line_position_rear       = select_control_point(line_positions_rear, prev_line_position_rear);
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	f103 0280 	add.w	r2, r3, #128	; 0x80
 80050de:	f107 031c 	add.w	r3, r7, #28
 80050e2:	4611      	mov	r1, r2
 80050e4:	4618      	mov	r0, r3
 80050e6:	f007 fa95 	bl	800c614 <_ZNSt6vectorIfSaIfEEC1ERKS1_>
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	edd3 7a05 	vldr	s15, [r3, #20]
 80050f0:	f107 031c 	add.w	r3, r7, #28
 80050f4:	eeb0 0a67 	vmov.f32	s0, s15
 80050f8:	4619      	mov	r1, r3
 80050fa:	6878      	ldr	r0, [r7, #4]
 80050fc:	f7ff fc9c 	bl	8004a38 <_ZN3jlb10Controller20select_control_pointESt6vectorIfSaIfEEf>
 8005100:	eef0 7a40 	vmov.f32	s15, s0
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	edc3 7a03 	vstr	s15, [r3, #12]
 800510a:	f107 031c 	add.w	r3, r7, #28
 800510e:	4618      	mov	r0, r3
 8005110:	f7fe fa4a 	bl	80035a8 <_ZNSt6vectorIfSaIfEED1Ev>
            prev_line_position_front = line_position_front;
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	689a      	ldr	r2, [r3, #8]
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	611a      	str	r2, [r3, #16]
            prev_line_position_rear  = line_position_rear;
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	68da      	ldr	r2, [r3, #12]
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	615a      	str	r2, [r3, #20]

            float sensor_rate   = SENSOR_WIDTH / SENSOR_COUNT;
 8005124:	4b40      	ldr	r3, [pc, #256]	; (8005228 <_ZN3jlb10Controller15lateral_controlEf+0x2c8>)
 8005126:	62fb      	str	r3, [r7, #44]	; 0x2c
            float sensor_center = SENSOR_COUNT / 2.0f;
 8005128:	f04f 4383 	mov.w	r3, #1098907648	; 0x41800000
 800512c:	62bb      	str	r3, [r7, #40]	; 0x28
            selected_front      = static_cast<unsigned long>(line_position_front / sensor_rate + sensor_center);
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	edd3 6a02 	vldr	s13, [r3, #8]
 8005134:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8005138:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800513c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8005140:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005144:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005148:	ee17 2a90 	vmov	r2, s15
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	601a      	str	r2, [r3, #0]
            selected_rear       = static_cast<unsigned long>(line_position_rear / sensor_rate + sensor_center);
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	edd3 6a03 	vldr	s13, [r3, #12]
 8005156:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800515a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800515e:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8005162:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005166:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800516a:	ee17 2a90 	vmov	r2, s15
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	605a      	str	r2, [r3, #4]

            cross_track_error = line_position_front;
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	689a      	ldr	r2, [r3, #8]
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	621a      	str	r2, [r3, #32]
            heading_error     = std::atan2(line_position_front - line_position_rear, SENSOR_BASE);
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	ed93 7a02 	vldr	s14, [r3, #8]
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	edd3 7a03 	vldr	s15, [r3, #12]
 8005186:	ee77 7a67 	vsub.f32	s15, s14, s15
 800518a:	eef6 0a00 	vmov.f32	s1, #96	; 0x3f000000  0.5
 800518e:	eeb0 0a67 	vmov.f32	s0, s15
 8005192:	f7ff fac3 	bl	800471c <_ZSt5atan2ff>
 8005196:	eef0 7a40 	vmov.f32	s15, s0
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24

            // lateral_pid.update_params(lat::kP/current_velocity, lat::kI/current_velocity, lat::kD/current_velocity);
            // target_angle = -lateral_pid.update(0, cross_track_error, dt);

            auto [kP, kDelta] = get_control_params();
 80051a0:	6878      	ldr	r0, [r7, #4]
 80051a2:	f7ff fd91 	bl	8004cc8 <_ZN3jlb10Controller18get_control_paramsEv>
 80051a6:	eeb0 7a40 	vmov.f32	s14, s0
 80051aa:	eef0 7a60 	vmov.f32	s15, s1
 80051ae:	ed87 7a02 	vstr	s14, [r7, #8]
 80051b2:	edc7 7a03 	vstr	s15, [r7, #12]
 80051b6:	edd7 7a02 	vldr	s15, [r7, #8]
            target_angle      = -kP * cross_track_error - kDelta * heading_error;
 80051ba:	eeb1 7a67 	vneg.f32	s14, s15
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	edd3 7a08 	vldr	s15, [r3, #32]
 80051c4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	edd3 6a09 	vldr	s13, [r3, #36]	; 0x24
            auto [kP, kDelta] = get_control_params();
 80051ce:	edd7 7a03 	vldr	s15, [r7, #12]
            target_angle      = -kP * cross_track_error - kDelta * heading_error;
 80051d2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80051d6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	edc3 7a06 	vstr	s15, [r3, #24]

            if (target_angle > deg2rad(MAX_WHEEL_ANGLE)) target_angle = deg2rad(MAX_WHEEL_ANGLE);
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	edd3 7a06 	vldr	s15, [r3, #24]
 80051e6:	ed9f 7a11 	vldr	s14, [pc, #68]	; 800522c <_ZN3jlb10Controller15lateral_controlEf+0x2cc>
 80051ea:	eef4 7ac7 	vcmpe.f32	s15, s14
 80051ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80051f2:	dd02      	ble.n	80051fa <_ZN3jlb10Controller15lateral_controlEf+0x29a>
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	4a0b      	ldr	r2, [pc, #44]	; (8005224 <_ZN3jlb10Controller15lateral_controlEf+0x2c4>)
 80051f8:	619a      	str	r2, [r3, #24]
            if (target_angle < -deg2rad(MAX_WHEEL_ANGLE)) target_angle = -deg2rad(MAX_WHEEL_ANGLE);
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	edd3 7a06 	vldr	s15, [r3, #24]
 8005200:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 8005230 <_ZN3jlb10Controller15lateral_controlEf+0x2d0>
 8005204:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005208:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800520c:	d504      	bpl.n	8005218 <_ZN3jlb10Controller15lateral_controlEf+0x2b8>
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	4a03      	ldr	r2, [pc, #12]	; (8005220 <_ZN3jlb10Controller15lateral_controlEf+0x2c0>)
 8005212:	619a      	str	r2, [r3, #24]
 8005214:	e000      	b.n	8005218 <_ZN3jlb10Controller15lateral_controlEf+0x2b8>
		if (line_positions_front.size() > 4 || line_positions_rear.size() > 4) { return; }
 8005216:	bf00      	nop
        }
 8005218:	3734      	adds	r7, #52	; 0x34
 800521a:	46bd      	mov	sp, r7
 800521c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800521e:	bf00      	nop
 8005220:	bec90fdb 	.word	0xbec90fdb
 8005224:	3ec90fdb 	.word	0x3ec90fdb
 8005228:	3bcccccd 	.word	0x3bcccccd
 800522c:	3ec90fdb 	.word	0x3ec90fdb
 8005230:	bec90fdb 	.word	0xbec90fdb

08005234 <_ZN3jlb10Controller20longitudinal_controlEf>:

        void longitudinal_control([[maybe_unused]] const float dt)
 8005234:	b480      	push	{r7}
 8005236:	b083      	sub	sp, #12
 8005238:	af00      	add	r7, sp, #0
 800523a:	6078      	str	r0, [r7, #4]
 800523c:	ed87 0a00 	vstr	s0, [r7]
            float x      = std::max(dist_error_norm, ang_error_norm);
            target_speed = std::min(reference_speed, reference_speed * (1.0f - (0.1666667f * x) - (0.8333333f * x * x)));
            */

#ifndef SIMULATION
        	if(!((usWidth_throttle > 1800) && (usWidth_throttle < 2800)))
 8005240:	4b36      	ldr	r3, [pc, #216]	; (800531c <_ZN3jlb10Controller20longitudinal_controlEf+0xe8>)
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	f5b3 6fe1 	cmp.w	r3, #1800	; 0x708
 8005248:	d904      	bls.n	8005254 <_ZN3jlb10Controller20longitudinal_controlEf+0x20>
 800524a:	4b34      	ldr	r3, [pc, #208]	; (800531c <_ZN3jlb10Controller20longitudinal_controlEf+0xe8>)
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	f5b3 6f2f 	cmp.w	r3, #2800	; 0xaf0
 8005252:	d304      	bcc.n	800525e <_ZN3jlb10Controller20longitudinal_controlEf+0x2a>
			{
				reference_speed = 0.0f;
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	f04f 0200 	mov.w	r2, #0
 800525a:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
			}
#endif

            if (reference_speed > target_speed + MAX_ACCELERATION * dt) { target_speed += MAX_ACCELERATION * dt; }
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	ed93 7a27 	vldr	s14, [r3, #156]	; 0x9c
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	edd3 6a07 	vldr	s13, [r3, #28]
 800526a:	edd7 7a00 	vldr	s15, [r7]
 800526e:	eeb1 6a0e 	vmov.f32	s12, #30	; 0x40f00000  7.5
 8005272:	ee67 7a86 	vmul.f32	s15, s15, s12
 8005276:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800527a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800527e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005282:	dd0e      	ble.n	80052a2 <_ZN3jlb10Controller20longitudinal_controlEf+0x6e>
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	ed93 7a07 	vldr	s14, [r3, #28]
 800528a:	edd7 7a00 	vldr	s15, [r7]
 800528e:	eef1 6a0e 	vmov.f32	s13, #30	; 0x40f00000  7.5
 8005292:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8005296:	ee77 7a27 	vadd.f32	s15, s14, s15
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	edc3 7a07 	vstr	s15, [r3, #28]
 80052a0:	e026      	b.n	80052f0 <_ZN3jlb10Controller20longitudinal_controlEf+0xbc>
            else if (reference_speed < target_speed - MAX_DECELERATION * dt) { target_speed -= MAX_DECELERATION * dt; }
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	ed93 7a27 	vldr	s14, [r3, #156]	; 0x9c
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	edd3 6a07 	vldr	s13, [r3, #28]
 80052ae:	edd7 7a00 	vldr	s15, [r7]
 80052b2:	eeb2 6a04 	vmov.f32	s12, #36	; 0x41200000  10.0
 80052b6:	ee67 7a86 	vmul.f32	s15, s15, s12
 80052ba:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80052be:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80052c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80052c6:	d50e      	bpl.n	80052e6 <_ZN3jlb10Controller20longitudinal_controlEf+0xb2>
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	ed93 7a07 	vldr	s14, [r3, #28]
 80052ce:	edd7 7a00 	vldr	s15, [r7]
 80052d2:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 80052d6:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80052da:	ee77 7a67 	vsub.f32	s15, s14, s15
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	edc3 7a07 	vstr	s15, [r3, #28]
 80052e4:	e004      	b.n	80052f0 <_ZN3jlb10Controller20longitudinal_controlEf+0xbc>
            else { target_speed = reference_speed; }
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	61da      	str	r2, [r3, #28]

            if (target_speed < MIN_SPEED) target_speed = MIN_SPEED;
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	edd3 7a07 	vldr	s15, [r3, #28]
 80052f6:	eeb5 7a00 	vmov.f32	s14, #80	; 0x3e800000  0.250
 80052fa:	eef4 7ac7 	vcmpe.f32	s15, s14
 80052fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005302:	d400      	bmi.n	8005306 <_ZN3jlb10Controller20longitudinal_controlEf+0xd2>

            //float object_rate = object_pid.update(obj::FOLLOW_DISTANCE, object_range, dt);
            //target_speed *= std::pow((1 - object_rate), 2);
        }
 8005304:	e003      	b.n	800530e <_ZN3jlb10Controller20longitudinal_controlEf+0xda>
            if (target_speed < MIN_SPEED) target_speed = MIN_SPEED;
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	f04f 527a 	mov.w	r2, #1048576000	; 0x3e800000
 800530c:	61da      	str	r2, [r3, #28]
        }
 800530e:	bf00      	nop
 8005310:	370c      	adds	r7, #12
 8005312:	46bd      	mov	sp, r7
 8005314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005318:	4770      	bx	lr
 800531a:	bf00      	nop
 800531c:	20000304 	.word	0x20000304

08005320 <_ZN3jlb10Controller6updateEv>:

        ControlSignal update()
 8005320:	b580      	push	{r7, lr}
 8005322:	b088      	sub	sp, #32
 8005324:	af00      	add	r7, sp, #0
 8005326:	60f8      	str	r0, [r7, #12]
        {
#ifndef SIMULATION
            // TODO: add timestamp
        	tick_counter_prev = tick_counter;
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
        	tick_counter = HAL_GetTick();
 8005334:	f00f f90c 	bl	8014550 <HAL_GetTick>
 8005338:	4602      	mov	r2, r0
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
            float dt = (((float)tick_counter) - ((float)(tick_counter_prev))) / 1000.0f;
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005346:	ee07 3a90 	vmov	s15, r3
 800534a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005354:	ee07 3a90 	vmov	s15, r3
 8005358:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800535c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005360:	eddf 6a11 	vldr	s13, [pc, #68]	; 80053a8 <_ZN3jlb10Controller6updateEv+0x88>
 8005364:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005368:	edc7 7a07 	vstr	s15, [r7, #28]
            auto                   control_timestamp_ = std::chrono::steady_clock::now();
            [[maybe_unused]] float dt                 = std::chrono::duration_cast<std::chrono::milliseconds>(control_timestamp_ - prev_control_timestamp_).count() / 1000.0f;
            prev_control_timestamp_                   = control_timestamp_;
#endif

            lateral_control(dt);
 800536c:	ed97 0a07 	vldr	s0, [r7, #28]
 8005370:	68f8      	ldr	r0, [r7, #12]
 8005372:	f7ff fdf5 	bl	8004f60 <_ZN3jlb10Controller15lateral_controlEf>
            longitudinal_control(dt);
 8005376:	ed97 0a07 	vldr	s0, [r7, #28]
 800537a:	68f8      	ldr	r0, [r7, #12]
 800537c:	f7ff ff5a 	bl	8005234 <_ZN3jlb10Controller20longitudinal_controlEf>

            return {target_angle, target_speed};
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	699b      	ldr	r3, [r3, #24]
 8005384:	617b      	str	r3, [r7, #20]
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	69db      	ldr	r3, [r3, #28]
 800538a:	61bb      	str	r3, [r7, #24]
 800538c:	697a      	ldr	r2, [r7, #20]
 800538e:	69bb      	ldr	r3, [r7, #24]
 8005390:	ee07 2a10 	vmov	s14, r2
 8005394:	ee07 3a90 	vmov	s15, r3
        }
 8005398:	eeb0 0a47 	vmov.f32	s0, s14
 800539c:	eef0 0a67 	vmov.f32	s1, s15
 80053a0:	3720      	adds	r7, #32
 80053a2:	46bd      	mov	sp, r7
 80053a4:	bd80      	pop	{r7, pc}
 80053a6:	bf00      	nop
 80053a8:	447a0000 	.word	0x447a0000

080053ac <_ZN3jlb10Controller16set_object_rangeEf>:

        void set_object_range(const float object_range_) { object_range = object_range_; }
 80053ac:	b480      	push	{r7}
 80053ae:	b083      	sub	sp, #12
 80053b0:	af00      	add	r7, sp, #0
 80053b2:	6078      	str	r0, [r7, #4]
 80053b4:	ed87 0a00 	vstr	s0, [r7]
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	683a      	ldr	r2, [r7, #0]
 80053bc:	631a      	str	r2, [r3, #48]	; 0x30
 80053be:	bf00      	nop
 80053c0:	370c      	adds	r7, #12
 80053c2:	46bd      	mov	sp, r7
 80053c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c8:	4770      	bx	lr

080053ca <_ZN3jlb10Controller19set_detection_frontEPbSt6vectorIfSaIfEE>:

        void set_detection_front(bool *detection_front_, std::vector<float> line_positions_front_)
 80053ca:	b580      	push	{r7, lr}
 80053cc:	b086      	sub	sp, #24
 80053ce:	af00      	add	r7, sp, #0
 80053d0:	60f8      	str	r0, [r7, #12]
 80053d2:	60b9      	str	r1, [r7, #8]
 80053d4:	607a      	str	r2, [r7, #4]
        {
            for (unsigned long i = 0; i < SENSOR_COUNT; i++) detection_front[i] = detection_front_[i];
 80053d6:	2300      	movs	r3, #0
 80053d8:	617b      	str	r3, [r7, #20]
 80053da:	e00c      	b.n	80053f6 <_ZN3jlb10Controller19set_detection_frontEPbSt6vectorIfSaIfEE+0x2c>
 80053dc:	68ba      	ldr	r2, [r7, #8]
 80053de:	697b      	ldr	r3, [r7, #20]
 80053e0:	4413      	add	r3, r2
 80053e2:	7819      	ldrb	r1, [r3, #0]
 80053e4:	68fa      	ldr	r2, [r7, #12]
 80053e6:	697b      	ldr	r3, [r7, #20]
 80053e8:	4413      	add	r3, r2
 80053ea:	3334      	adds	r3, #52	; 0x34
 80053ec:	460a      	mov	r2, r1
 80053ee:	701a      	strb	r2, [r3, #0]
 80053f0:	697b      	ldr	r3, [r7, #20]
 80053f2:	3301      	adds	r3, #1
 80053f4:	617b      	str	r3, [r7, #20]
 80053f6:	697b      	ldr	r3, [r7, #20]
 80053f8:	2b1f      	cmp	r3, #31
 80053fa:	d9ef      	bls.n	80053dc <_ZN3jlb10Controller19set_detection_frontEPbSt6vectorIfSaIfEE+0x12>
            line_positions_front = line_positions_front_;
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	3374      	adds	r3, #116	; 0x74
 8005400:	6879      	ldr	r1, [r7, #4]
 8005402:	4618      	mov	r0, r3
 8005404:	f007 f977 	bl	800c6f6 <_ZNSt6vectorIfSaIfEEaSERKS1_>
        }
 8005408:	bf00      	nop
 800540a:	3718      	adds	r7, #24
 800540c:	46bd      	mov	sp, r7
 800540e:	bd80      	pop	{r7, pc}

08005410 <_ZN3jlb10Controller18set_detection_rearEPbSt6vectorIfSaIfEE>:

        void set_detection_rear(bool *detection_rear_, std::vector<float> line_positions_rear_)
 8005410:	b580      	push	{r7, lr}
 8005412:	b086      	sub	sp, #24
 8005414:	af00      	add	r7, sp, #0
 8005416:	60f8      	str	r0, [r7, #12]
 8005418:	60b9      	str	r1, [r7, #8]
 800541a:	607a      	str	r2, [r7, #4]
        {
            for (unsigned long i = 0; i < SENSOR_COUNT; i++) detection_rear[i] = detection_rear_[i];
 800541c:	2300      	movs	r3, #0
 800541e:	617b      	str	r3, [r7, #20]
 8005420:	e00c      	b.n	800543c <_ZN3jlb10Controller18set_detection_rearEPbSt6vectorIfSaIfEE+0x2c>
 8005422:	68ba      	ldr	r2, [r7, #8]
 8005424:	697b      	ldr	r3, [r7, #20]
 8005426:	4413      	add	r3, r2
 8005428:	7819      	ldrb	r1, [r3, #0]
 800542a:	68fa      	ldr	r2, [r7, #12]
 800542c:	697b      	ldr	r3, [r7, #20]
 800542e:	4413      	add	r3, r2
 8005430:	3354      	adds	r3, #84	; 0x54
 8005432:	460a      	mov	r2, r1
 8005434:	701a      	strb	r2, [r3, #0]
 8005436:	697b      	ldr	r3, [r7, #20]
 8005438:	3301      	adds	r3, #1
 800543a:	617b      	str	r3, [r7, #20]
 800543c:	697b      	ldr	r3, [r7, #20]
 800543e:	2b1f      	cmp	r3, #31
 8005440:	d9ef      	bls.n	8005422 <_ZN3jlb10Controller18set_detection_rearEPbSt6vectorIfSaIfEE+0x12>
            line_positions_rear = line_positions_rear_;
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	3380      	adds	r3, #128	; 0x80
 8005446:	6879      	ldr	r1, [r7, #4]
 8005448:	4618      	mov	r0, r3
 800544a:	f007 f954 	bl	800c6f6 <_ZNSt6vectorIfSaIfEEaSERKS1_>
        }
 800544e:	bf00      	nop
 8005450:	3718      	adds	r7, #24
 8005452:	46bd      	mov	sp, r7
 8005454:	bd80      	pop	{r7, pc}

08005456 <_ZN3jlb10Controller20set_current_velocityEf>:

        void set_current_velocity(const float current_velocity_) { current_velocity = current_velocity_; }
 8005456:	b480      	push	{r7}
 8005458:	b083      	sub	sp, #12
 800545a:	af00      	add	r7, sp, #0
 800545c:	6078      	str	r0, [r7, #4]
 800545e:	ed87 0a00 	vstr	s0, [r7]
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	683a      	ldr	r2, [r7, #0]
 8005466:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
 800546a:	bf00      	nop
 800546c:	370c      	adds	r7, #12
 800546e:	46bd      	mov	sp, r7
 8005470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005474:	4770      	bx	lr

08005476 <_ZN3jlb10Controller13set_directionENS_9DirectionE>:

        void set_direction(const Direction direction_)
 8005476:	b480      	push	{r7}
 8005478:	b083      	sub	sp, #12
 800547a:	af00      	add	r7, sp, #0
 800547c:	6078      	str	r0, [r7, #4]
 800547e:	6039      	str	r1, [r7, #0]
        {
            prev_direction = direction;
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
            direction      = direction_;
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	683a      	ldr	r2, [r7, #0]
 8005490:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
 8005494:	bf00      	nop
 8005496:	370c      	adds	r7, #12
 8005498:	46bd      	mov	sp, r7
 800549a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800549e:	4770      	bx	lr

080054a0 <_ZN3jlb10Controller19set_reference_speedEf>:

        void set_reference_speed(const float reference_speed_) { reference_speed = reference_speed_; }
 80054a0:	b480      	push	{r7}
 80054a2:	b083      	sub	sp, #12
 80054a4:	af00      	add	r7, sp, #0
 80054a6:	6078      	str	r0, [r7, #4]
 80054a8:	ed87 0a00 	vstr	s0, [r7]
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	683a      	ldr	r2, [r7, #0]
 80054b0:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
 80054b4:	bf00      	nop
 80054b6:	370c      	adds	r7, #12
 80054b8:	46bd      	mov	sp, r7
 80054ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054be:	4770      	bx	lr

080054c0 <_ZNSt12_Vector_baseIN3jlb4EdgeESaIS1_EE12_Vector_implD1Ev>:
      struct _Vector_impl
 80054c0:	b580      	push	{r7, lr}
 80054c2:	b082      	sub	sp, #8
 80054c4:	af00      	add	r7, sp, #0
 80054c6:	6078      	str	r0, [r7, #4]
 80054c8:	6878      	ldr	r0, [r7, #4]
 80054ca:	f007 fa1c 	bl	800c906 <_ZNSaIN3jlb4EdgeEED1Ev>
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	4618      	mov	r0, r3
 80054d2:	3708      	adds	r7, #8
 80054d4:	46bd      	mov	sp, r7
 80054d6:	bd80      	pop	{r7, pc}

080054d8 <_ZNSt12_Vector_baseIN3jlb4EdgeESaIS1_EEC1Ev>:
      _Vector_base() = default;
 80054d8:	b580      	push	{r7, lr}
 80054da:	b082      	sub	sp, #8
 80054dc:	af00      	add	r7, sp, #0
 80054de:	6078      	str	r0, [r7, #4]
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	4618      	mov	r0, r3
 80054e4:	f007 f9ff 	bl	800c8e6 <_ZNSt12_Vector_baseIN3jlb4EdgeESaIS1_EE12_Vector_implC1Ev>
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	4618      	mov	r0, r3
 80054ec:	3708      	adds	r7, #8
 80054ee:	46bd      	mov	sp, r7
 80054f0:	bd80      	pop	{r7, pc}

080054f2 <_ZNSt6vectorIN3jlb4EdgeESaIS1_EEC1Ev>:
      vector() = default;
 80054f2:	b580      	push	{r7, lr}
 80054f4:	b082      	sub	sp, #8
 80054f6:	af00      	add	r7, sp, #0
 80054f8:	6078      	str	r0, [r7, #4]
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	4618      	mov	r0, r3
 80054fe:	f7ff ffeb 	bl	80054d8 <_ZNSt12_Vector_baseIN3jlb4EdgeESaIS1_EEC1Ev>
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	4618      	mov	r0, r3
 8005506:	3708      	adds	r7, #8
 8005508:	46bd      	mov	sp, r7
 800550a:	bd80      	pop	{r7, pc}

0800550c <_ZN3jlb4NodeC1Ecff>:
        char              name;
        float             x;
        float             y;
        std::vector<Edge> edges;

        Node(char name_, float x_, float y_) : name{name_}, x(x_), y(y_) {}
 800550c:	b580      	push	{r7, lr}
 800550e:	b084      	sub	sp, #16
 8005510:	af00      	add	r7, sp, #0
 8005512:	60f8      	str	r0, [r7, #12]
 8005514:	460b      	mov	r3, r1
 8005516:	ed87 0a01 	vstr	s0, [r7, #4]
 800551a:	edc7 0a00 	vstr	s1, [r7]
 800551e:	72fb      	strb	r3, [r7, #11]
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	7afa      	ldrb	r2, [r7, #11]
 8005524:	701a      	strb	r2, [r3, #0]
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	687a      	ldr	r2, [r7, #4]
 800552a:	605a      	str	r2, [r3, #4]
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	683a      	ldr	r2, [r7, #0]
 8005530:	609a      	str	r2, [r3, #8]
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	330c      	adds	r3, #12
 8005536:	4618      	mov	r0, r3
 8005538:	f7ff ffdb 	bl	80054f2 <_ZNSt6vectorIN3jlb4EdgeESaIS1_EEC1Ev>
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	4618      	mov	r0, r3
 8005540:	3710      	adds	r7, #16
 8005542:	46bd      	mov	sp, r7
 8005544:	bd80      	pop	{r7, pc}

08005546 <_ZN3jlb4NodeD1Ev>:
        ~Node() {}
 8005546:	b580      	push	{r7, lr}
 8005548:	b082      	sub	sp, #8
 800554a:	af00      	add	r7, sp, #0
 800554c:	6078      	str	r0, [r7, #4]
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	330c      	adds	r3, #12
 8005552:	4618      	mov	r0, r3
 8005554:	f007 fa00 	bl	800c958 <_ZNSt6vectorIN3jlb4EdgeESaIS1_EED1Ev>
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	4618      	mov	r0, r3
 800555c:	3708      	adds	r7, #8
 800555e:	46bd      	mov	sp, r7
 8005560:	bd80      	pop	{r7, pc}

08005562 <_ZN3jlb4EdgeD1Ev>:
    struct Edge
 8005562:	b580      	push	{r7, lr}
 8005564:	b082      	sub	sp, #8
 8005566:	af00      	add	r7, sp, #0
 8005568:	6078      	str	r0, [r7, #4]
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	3308      	adds	r3, #8
 800556e:	4618      	mov	r0, r3
 8005570:	f007 fa4a 	bl	800ca08 <_ZNSt6vectorIcSaIcEED1Ev>
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	4618      	mov	r0, r3
 8005578:	3708      	adds	r7, #8
 800557a:	46bd      	mov	sp, r7
 800557c:	bd80      	pop	{r7, pc}

0800557e <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>:

        void add_edge(char name_, Direction direction_, std::vector<char> prev_nodes_, float weight_ = 0.0f) { edges.push_back(Edge{name_, direction_, prev_nodes_, weight_}); }
 800557e:	b590      	push	{r4, r7, lr}
 8005580:	b08d      	sub	sp, #52	; 0x34
 8005582:	af00      	add	r7, sp, #0
 8005584:	6178      	str	r0, [r7, #20]
 8005586:	60fa      	str	r2, [r7, #12]
 8005588:	60bb      	str	r3, [r7, #8]
 800558a:	ed87 0a01 	vstr	s0, [r7, #4]
 800558e:	460b      	mov	r3, r1
 8005590:	74fb      	strb	r3, [r7, #19]
 8005592:	697b      	ldr	r3, [r7, #20]
 8005594:	f103 040c 	add.w	r4, r3, #12
 8005598:	7cfb      	ldrb	r3, [r7, #19]
 800559a:	763b      	strb	r3, [r7, #24]
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	61fb      	str	r3, [r7, #28]
 80055a0:	f107 0318 	add.w	r3, r7, #24
 80055a4:	3308      	adds	r3, #8
 80055a6:	68b9      	ldr	r1, [r7, #8]
 80055a8:	4618      	mov	r0, r3
 80055aa:	f007 f9f0 	bl	800c98e <_ZNSt6vectorIcSaIcEEC1ERKS1_>
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80055b2:	f107 0318 	add.w	r3, r7, #24
 80055b6:	4619      	mov	r1, r3
 80055b8:	4620      	mov	r0, r4
 80055ba:	f007 fa40 	bl	800ca3e <_ZNSt6vectorIN3jlb4EdgeESaIS1_EE9push_backEOS1_>
 80055be:	f107 0318 	add.w	r3, r7, #24
 80055c2:	4618      	mov	r0, r3
 80055c4:	f7ff ffcd 	bl	8005562 <_ZN3jlb4EdgeD1Ev>
 80055c8:	bf00      	nop
 80055ca:	3734      	adds	r7, #52	; 0x34
 80055cc:	46bd      	mov	sp, r7
 80055ce:	bd90      	pop	{r4, r7, pc}

080055d0 <_ZNSt12_Vector_baseIN3jlb4NodeESaIS1_EE12_Vector_implD1Ev>:
      struct _Vector_impl
 80055d0:	b580      	push	{r7, lr}
 80055d2:	b082      	sub	sp, #8
 80055d4:	af00      	add	r7, sp, #0
 80055d6:	6078      	str	r0, [r7, #4]
 80055d8:	6878      	ldr	r0, [r7, #4]
 80055da:	f007 fa51 	bl	800ca80 <_ZNSaIN3jlb4NodeEED1Ev>
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	4618      	mov	r0, r3
 80055e2:	3708      	adds	r7, #8
 80055e4:	46bd      	mov	sp, r7
 80055e6:	bd80      	pop	{r7, pc}

080055e8 <_ZNSt12_Vector_baseIN3jlb4NodeESaIS1_EEC1Ev>:
      _Vector_base() = default;
 80055e8:	b580      	push	{r7, lr}
 80055ea:	b082      	sub	sp, #8
 80055ec:	af00      	add	r7, sp, #0
 80055ee:	6078      	str	r0, [r7, #4]
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	4618      	mov	r0, r3
 80055f4:	f007 fa34 	bl	800ca60 <_ZNSt12_Vector_baseIN3jlb4NodeESaIS1_EE12_Vector_implC1Ev>
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	4618      	mov	r0, r3
 80055fc:	3708      	adds	r7, #8
 80055fe:	46bd      	mov	sp, r7
 8005600:	bd80      	pop	{r7, pc}

08005602 <_ZNSt6vectorIN3jlb4NodeESaIS1_EEC1Ev>:
      vector() = default;
 8005602:	b580      	push	{r7, lr}
 8005604:	b082      	sub	sp, #8
 8005606:	af00      	add	r7, sp, #0
 8005608:	6078      	str	r0, [r7, #4]
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	4618      	mov	r0, r3
 800560e:	f7ff ffeb 	bl	80055e8 <_ZNSt12_Vector_baseIN3jlb4NodeESaIS1_EEC1Ev>
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	4618      	mov	r0, r3
 8005616:	3708      	adds	r7, #8
 8005618:	46bd      	mov	sp, r7
 800561a:	bd80      	pop	{r7, pc}
 800561c:	0000      	movs	r0, r0
	...

08005620 <_ZN3jlb5GraphC1Ev>:
    class Graph
    {
    public:
        std::vector<Node> nodes;

        Graph()
 8005620:	b590      	push	{r4, r7, lr}
 8005622:	f6ad 4d6c 	subw	sp, sp, #3180	; 0xc6c
 8005626:	af00      	add	r7, sp, #0
 8005628:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800562c:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8005630:	6018      	str	r0, [r3, #0]
        {
 8005632:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005636:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	4618      	mov	r0, r3
 800563e:	f7ff ffe0 	bl	8005602 <_ZNSt6vectorIN3jlb4NodeESaIS1_EEC1Ev>
            nodes.push_back(Node{static_cast<char>('A'), px_to_m(704), px_to_m(448)});
 8005642:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005646:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 800564a:	681c      	ldr	r4, [r3, #0]
 800564c:	f107 0308 	add.w	r3, r7, #8
 8005650:	eddf 0af3 	vldr	s1, [pc, #972]	; 8005a20 <_ZN3jlb5GraphC1Ev+0x400>
 8005654:	ed9f 0af3 	vldr	s0, [pc, #972]	; 8005a24 <_ZN3jlb5GraphC1Ev+0x404>
 8005658:	2141      	movs	r1, #65	; 0x41
 800565a:	4618      	mov	r0, r3
 800565c:	f7ff ff56 	bl	800550c <_ZN3jlb4NodeC1Ecff>
 8005660:	f107 0308 	add.w	r3, r7, #8
 8005664:	4619      	mov	r1, r3
 8005666:	4620      	mov	r0, r4
 8005668:	f007 fa4f 	bl	800cb0a <_ZNSt6vectorIN3jlb4NodeESaIS1_EE9push_backEOS1_>
 800566c:	f107 0308 	add.w	r3, r7, #8
 8005670:	4618      	mov	r0, r3
 8005672:	f7ff ff68 	bl	8005546 <_ZN3jlb4NodeD1Ev>
            nodes.push_back(Node{static_cast<char>('B'), px_to_m(704), px_to_m(576)});
 8005676:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800567a:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 800567e:	681c      	ldr	r4, [r3, #0]
 8005680:	f107 0320 	add.w	r3, r7, #32
 8005684:	eddf 0aeb 	vldr	s1, [pc, #940]	; 8005a34 <_ZN3jlb5GraphC1Ev+0x414>
 8005688:	ed9f 0ae6 	vldr	s0, [pc, #920]	; 8005a24 <_ZN3jlb5GraphC1Ev+0x404>
 800568c:	2142      	movs	r1, #66	; 0x42
 800568e:	4618      	mov	r0, r3
 8005690:	f7ff ff3c 	bl	800550c <_ZN3jlb4NodeC1Ecff>
 8005694:	f107 0320 	add.w	r3, r7, #32
 8005698:	4619      	mov	r1, r3
 800569a:	4620      	mov	r0, r4
 800569c:	f007 fa35 	bl	800cb0a <_ZNSt6vectorIN3jlb4NodeESaIS1_EE9push_backEOS1_>
 80056a0:	f107 0320 	add.w	r3, r7, #32
 80056a4:	4618      	mov	r0, r3
 80056a6:	f7ff ff4e 	bl	8005546 <_ZN3jlb4NodeD1Ev>
            nodes.push_back(Node{static_cast<char>('C'), px_to_m(640), px_to_m(384)});
 80056aa:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80056ae:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 80056b2:	681c      	ldr	r4, [r3, #0]
 80056b4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80056b8:	eddf 0adb 	vldr	s1, [pc, #876]	; 8005a28 <_ZN3jlb5GraphC1Ev+0x408>
 80056bc:	eeb1 0a08 	vmov.f32	s0, #24	; 0x40c00000  6.0
 80056c0:	2143      	movs	r1, #67	; 0x43
 80056c2:	4618      	mov	r0, r3
 80056c4:	f7ff ff22 	bl	800550c <_ZN3jlb4NodeC1Ecff>
 80056c8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80056cc:	4619      	mov	r1, r3
 80056ce:	4620      	mov	r0, r4
 80056d0:	f007 fa1b 	bl	800cb0a <_ZNSt6vectorIN3jlb4NodeESaIS1_EE9push_backEOS1_>
 80056d4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80056d8:	4618      	mov	r0, r3
 80056da:	f7ff ff34 	bl	8005546 <_ZN3jlb4NodeD1Ev>
            nodes.push_back(Node{static_cast<char>('D'), px_to_m(640), px_to_m(512)});
 80056de:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80056e2:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 80056e6:	681c      	ldr	r4, [r3, #0]
 80056e8:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80056ec:	eddf 0acf 	vldr	s1, [pc, #828]	; 8005a2c <_ZN3jlb5GraphC1Ev+0x40c>
 80056f0:	eeb1 0a08 	vmov.f32	s0, #24	; 0x40c00000  6.0
 80056f4:	2144      	movs	r1, #68	; 0x44
 80056f6:	4618      	mov	r0, r3
 80056f8:	f7ff ff08 	bl	800550c <_ZN3jlb4NodeC1Ecff>
 80056fc:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8005700:	4619      	mov	r1, r3
 8005702:	4620      	mov	r0, r4
 8005704:	f007 fa01 	bl	800cb0a <_ZNSt6vectorIN3jlb4NodeESaIS1_EE9push_backEOS1_>
 8005708:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800570c:	4618      	mov	r0, r3
 800570e:	f7ff ff1a 	bl	8005546 <_ZN3jlb4NodeD1Ev>
            nodes.push_back(Node{static_cast<char>('E'), px_to_m(640), px_to_m(640)});
 8005712:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005716:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 800571a:	681c      	ldr	r4, [r3, #0]
 800571c:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8005720:	eef1 0a08 	vmov.f32	s1, #24	; 0x40c00000  6.0
 8005724:	eeb1 0a08 	vmov.f32	s0, #24	; 0x40c00000  6.0
 8005728:	2145      	movs	r1, #69	; 0x45
 800572a:	4618      	mov	r0, r3
 800572c:	f7ff feee 	bl	800550c <_ZN3jlb4NodeC1Ecff>
 8005730:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8005734:	4619      	mov	r1, r3
 8005736:	4620      	mov	r0, r4
 8005738:	f007 f9e7 	bl	800cb0a <_ZNSt6vectorIN3jlb4NodeESaIS1_EE9push_backEOS1_>
 800573c:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8005740:	4618      	mov	r0, r3
 8005742:	f7ff ff00 	bl	8005546 <_ZN3jlb4NodeD1Ev>
            nodes.push_back(Node{static_cast<char>('F'), px_to_m(576), px_to_m(448)});
 8005746:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800574a:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 800574e:	681c      	ldr	r4, [r3, #0]
 8005750:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8005754:	eddf 0ab2 	vldr	s1, [pc, #712]	; 8005a20 <_ZN3jlb5GraphC1Ev+0x400>
 8005758:	ed9f 0ab6 	vldr	s0, [pc, #728]	; 8005a34 <_ZN3jlb5GraphC1Ev+0x414>
 800575c:	2146      	movs	r1, #70	; 0x46
 800575e:	4618      	mov	r0, r3
 8005760:	f7ff fed4 	bl	800550c <_ZN3jlb4NodeC1Ecff>
 8005764:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8005768:	4619      	mov	r1, r3
 800576a:	4620      	mov	r0, r4
 800576c:	f007 f9cd 	bl	800cb0a <_ZNSt6vectorIN3jlb4NodeESaIS1_EE9push_backEOS1_>
 8005770:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8005774:	4618      	mov	r0, r3
 8005776:	f7ff fee6 	bl	8005546 <_ZN3jlb4NodeD1Ev>
            nodes.push_back(Node{static_cast<char>('G'), px_to_m(576), px_to_m(576)});
 800577a:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800577e:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8005782:	681c      	ldr	r4, [r3, #0]
 8005784:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8005788:	eddf 0aaa 	vldr	s1, [pc, #680]	; 8005a34 <_ZN3jlb5GraphC1Ev+0x414>
 800578c:	ed9f 0aa9 	vldr	s0, [pc, #676]	; 8005a34 <_ZN3jlb5GraphC1Ev+0x414>
 8005790:	2147      	movs	r1, #71	; 0x47
 8005792:	4618      	mov	r0, r3
 8005794:	f7ff feba 	bl	800550c <_ZN3jlb4NodeC1Ecff>
 8005798:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800579c:	4619      	mov	r1, r3
 800579e:	4620      	mov	r0, r4
 80057a0:	f007 f9b3 	bl	800cb0a <_ZNSt6vectorIN3jlb4NodeESaIS1_EE9push_backEOS1_>
 80057a4:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80057a8:	4618      	mov	r0, r3
 80057aa:	f7ff fecc 	bl	8005546 <_ZN3jlb4NodeD1Ev>
            nodes.push_back(Node{static_cast<char>('H'), px_to_m(512), px_to_m(384)});
 80057ae:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80057b2:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 80057b6:	681c      	ldr	r4, [r3, #0]
 80057b8:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80057bc:	eddf 0a9a 	vldr	s1, [pc, #616]	; 8005a28 <_ZN3jlb5GraphC1Ev+0x408>
 80057c0:	ed9f 0a9a 	vldr	s0, [pc, #616]	; 8005a2c <_ZN3jlb5GraphC1Ev+0x40c>
 80057c4:	2148      	movs	r1, #72	; 0x48
 80057c6:	4618      	mov	r0, r3
 80057c8:	f7ff fea0 	bl	800550c <_ZN3jlb4NodeC1Ecff>
 80057cc:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80057d0:	4619      	mov	r1, r3
 80057d2:	4620      	mov	r0, r4
 80057d4:	f007 f999 	bl	800cb0a <_ZNSt6vectorIN3jlb4NodeESaIS1_EE9push_backEOS1_>
 80057d8:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80057dc:	4618      	mov	r0, r3
 80057de:	f7ff feb2 	bl	8005546 <_ZN3jlb4NodeD1Ev>
            nodes.push_back(Node{static_cast<char>('I'), px_to_m(512), px_to_m(512)});
 80057e2:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80057e6:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 80057ea:	681c      	ldr	r4, [r3, #0]
 80057ec:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80057f0:	eddf 0a8e 	vldr	s1, [pc, #568]	; 8005a2c <_ZN3jlb5GraphC1Ev+0x40c>
 80057f4:	ed9f 0a8d 	vldr	s0, [pc, #564]	; 8005a2c <_ZN3jlb5GraphC1Ev+0x40c>
 80057f8:	2149      	movs	r1, #73	; 0x49
 80057fa:	4618      	mov	r0, r3
 80057fc:	f7ff fe86 	bl	800550c <_ZN3jlb4NodeC1Ecff>
 8005800:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8005804:	4619      	mov	r1, r3
 8005806:	4620      	mov	r0, r4
 8005808:	f007 f97f 	bl	800cb0a <_ZNSt6vectorIN3jlb4NodeESaIS1_EE9push_backEOS1_>
 800580c:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8005810:	4618      	mov	r0, r3
 8005812:	f7ff fe98 	bl	8005546 <_ZN3jlb4NodeD1Ev>
            nodes.push_back(Node{static_cast<char>('J'), px_to_m(512), px_to_m(640)});
 8005816:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800581a:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 800581e:	681c      	ldr	r4, [r3, #0]
 8005820:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8005824:	eef1 0a08 	vmov.f32	s1, #24	; 0x40c00000  6.0
 8005828:	ed9f 0a80 	vldr	s0, [pc, #512]	; 8005a2c <_ZN3jlb5GraphC1Ev+0x40c>
 800582c:	214a      	movs	r1, #74	; 0x4a
 800582e:	4618      	mov	r0, r3
 8005830:	f7ff fe6c 	bl	800550c <_ZN3jlb4NodeC1Ecff>
 8005834:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8005838:	4619      	mov	r1, r3
 800583a:	4620      	mov	r0, r4
 800583c:	f007 f965 	bl	800cb0a <_ZNSt6vectorIN3jlb4NodeESaIS1_EE9push_backEOS1_>
 8005840:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8005844:	4618      	mov	r0, r3
 8005846:	f7ff fe7e 	bl	8005546 <_ZN3jlb4NodeD1Ev>
            nodes.push_back(Node{static_cast<char>('K'), px_to_m(448), px_to_m(448)});
 800584a:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800584e:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8005852:	681c      	ldr	r4, [r3, #0]
 8005854:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8005858:	eddf 0a71 	vldr	s1, [pc, #452]	; 8005a20 <_ZN3jlb5GraphC1Ev+0x400>
 800585c:	ed9f 0a70 	vldr	s0, [pc, #448]	; 8005a20 <_ZN3jlb5GraphC1Ev+0x400>
 8005860:	214b      	movs	r1, #75	; 0x4b
 8005862:	4618      	mov	r0, r3
 8005864:	f7ff fe52 	bl	800550c <_ZN3jlb4NodeC1Ecff>
 8005868:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 800586c:	4619      	mov	r1, r3
 800586e:	4620      	mov	r0, r4
 8005870:	f007 f94b 	bl	800cb0a <_ZNSt6vectorIN3jlb4NodeESaIS1_EE9push_backEOS1_>
 8005874:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8005878:	4618      	mov	r0, r3
 800587a:	f7ff fe64 	bl	8005546 <_ZN3jlb4NodeD1Ev>
            nodes.push_back(Node{static_cast<char>('L'), px_to_m(448), px_to_m(576)});
 800587e:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005882:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8005886:	681c      	ldr	r4, [r3, #0]
 8005888:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800588c:	eddf 0a69 	vldr	s1, [pc, #420]	; 8005a34 <_ZN3jlb5GraphC1Ev+0x414>
 8005890:	ed9f 0a63 	vldr	s0, [pc, #396]	; 8005a20 <_ZN3jlb5GraphC1Ev+0x400>
 8005894:	214c      	movs	r1, #76	; 0x4c
 8005896:	4618      	mov	r0, r3
 8005898:	f7ff fe38 	bl	800550c <_ZN3jlb4NodeC1Ecff>
 800589c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80058a0:	4619      	mov	r1, r3
 80058a2:	4620      	mov	r0, r4
 80058a4:	f007 f931 	bl	800cb0a <_ZNSt6vectorIN3jlb4NodeESaIS1_EE9push_backEOS1_>
 80058a8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80058ac:	4618      	mov	r0, r3
 80058ae:	f7ff fe4a 	bl	8005546 <_ZN3jlb4NodeD1Ev>
            nodes.push_back(Node{static_cast<char>('M'), px_to_m(384), px_to_m(384)});
 80058b2:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80058b6:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 80058ba:	681c      	ldr	r4, [r3, #0]
 80058bc:	f507 7394 	add.w	r3, r7, #296	; 0x128
 80058c0:	eddf 0a59 	vldr	s1, [pc, #356]	; 8005a28 <_ZN3jlb5GraphC1Ev+0x408>
 80058c4:	ed9f 0a58 	vldr	s0, [pc, #352]	; 8005a28 <_ZN3jlb5GraphC1Ev+0x408>
 80058c8:	214d      	movs	r1, #77	; 0x4d
 80058ca:	4618      	mov	r0, r3
 80058cc:	f7ff fe1e 	bl	800550c <_ZN3jlb4NodeC1Ecff>
 80058d0:	f507 7394 	add.w	r3, r7, #296	; 0x128
 80058d4:	4619      	mov	r1, r3
 80058d6:	4620      	mov	r0, r4
 80058d8:	f007 f917 	bl	800cb0a <_ZNSt6vectorIN3jlb4NodeESaIS1_EE9push_backEOS1_>
 80058dc:	f507 7394 	add.w	r3, r7, #296	; 0x128
 80058e0:	4618      	mov	r0, r3
 80058e2:	f7ff fe30 	bl	8005546 <_ZN3jlb4NodeD1Ev>
            nodes.push_back(Node{static_cast<char>('N'), px_to_m(384), px_to_m(512)});
 80058e6:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80058ea:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 80058ee:	681c      	ldr	r4, [r3, #0]
 80058f0:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80058f4:	eddf 0a4d 	vldr	s1, [pc, #308]	; 8005a2c <_ZN3jlb5GraphC1Ev+0x40c>
 80058f8:	ed9f 0a4b 	vldr	s0, [pc, #300]	; 8005a28 <_ZN3jlb5GraphC1Ev+0x408>
 80058fc:	214e      	movs	r1, #78	; 0x4e
 80058fe:	4618      	mov	r0, r3
 8005900:	f7ff fe04 	bl	800550c <_ZN3jlb4NodeC1Ecff>
 8005904:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8005908:	4619      	mov	r1, r3
 800590a:	4620      	mov	r0, r4
 800590c:	f007 f8fd 	bl	800cb0a <_ZNSt6vectorIN3jlb4NodeESaIS1_EE9push_backEOS1_>
 8005910:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8005914:	4618      	mov	r0, r3
 8005916:	f7ff fe16 	bl	8005546 <_ZN3jlb4NodeD1Ev>
            nodes.push_back(Node{static_cast<char>('O'), px_to_m(384), px_to_m(640)});
 800591a:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800591e:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8005922:	681c      	ldr	r4, [r3, #0]
 8005924:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8005928:	eef1 0a08 	vmov.f32	s1, #24	; 0x40c00000  6.0
 800592c:	ed9f 0a3e 	vldr	s0, [pc, #248]	; 8005a28 <_ZN3jlb5GraphC1Ev+0x408>
 8005930:	214f      	movs	r1, #79	; 0x4f
 8005932:	4618      	mov	r0, r3
 8005934:	f7ff fdea 	bl	800550c <_ZN3jlb4NodeC1Ecff>
 8005938:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 800593c:	4619      	mov	r1, r3
 800593e:	4620      	mov	r0, r4
 8005940:	f007 f8e3 	bl	800cb0a <_ZNSt6vectorIN3jlb4NodeESaIS1_EE9push_backEOS1_>
 8005944:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8005948:	4618      	mov	r0, r3
 800594a:	f7ff fdfc 	bl	8005546 <_ZN3jlb4NodeD1Ev>
            nodes.push_back(Node{static_cast<char>('P'), px_to_m(320), px_to_m(320)});
 800594e:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005952:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8005956:	681c      	ldr	r4, [r3, #0]
 8005958:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 800595c:	eef0 0a08 	vmov.f32	s1, #8	; 0x40400000  3.0
 8005960:	eeb0 0a08 	vmov.f32	s0, #8	; 0x40400000  3.0
 8005964:	2150      	movs	r1, #80	; 0x50
 8005966:	4618      	mov	r0, r3
 8005968:	f7ff fdd0 	bl	800550c <_ZN3jlb4NodeC1Ecff>
 800596c:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 8005970:	4619      	mov	r1, r3
 8005972:	4620      	mov	r0, r4
 8005974:	f007 f8c9 	bl	800cb0a <_ZNSt6vectorIN3jlb4NodeESaIS1_EE9push_backEOS1_>
 8005978:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 800597c:	4618      	mov	r0, r3
 800597e:	f7ff fde2 	bl	8005546 <_ZN3jlb4NodeD1Ev>
            nodes.push_back(Node{static_cast<char>('Q'), px_to_m(320), px_to_m(384)});
 8005982:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005986:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 800598a:	681c      	ldr	r4, [r3, #0]
 800598c:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8005990:	eddf 0a25 	vldr	s1, [pc, #148]	; 8005a28 <_ZN3jlb5GraphC1Ev+0x408>
 8005994:	eeb0 0a08 	vmov.f32	s0, #8	; 0x40400000  3.0
 8005998:	2151      	movs	r1, #81	; 0x51
 800599a:	4618      	mov	r0, r3
 800599c:	f7ff fdb6 	bl	800550c <_ZN3jlb4NodeC1Ecff>
 80059a0:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 80059a4:	4619      	mov	r1, r3
 80059a6:	4620      	mov	r0, r4
 80059a8:	f007 f8af 	bl	800cb0a <_ZNSt6vectorIN3jlb4NodeESaIS1_EE9push_backEOS1_>
 80059ac:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 80059b0:	4618      	mov	r0, r3
 80059b2:	f7ff fdc8 	bl	8005546 <_ZN3jlb4NodeD1Ev>
            nodes.push_back(Node{static_cast<char>('R'), px_to_m(320), px_to_m(448)});
 80059b6:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80059ba:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 80059be:	681c      	ldr	r4, [r3, #0]
 80059c0:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 80059c4:	eddf 0a16 	vldr	s1, [pc, #88]	; 8005a20 <_ZN3jlb5GraphC1Ev+0x400>
 80059c8:	eeb0 0a08 	vmov.f32	s0, #8	; 0x40400000  3.0
 80059cc:	2152      	movs	r1, #82	; 0x52
 80059ce:	4618      	mov	r0, r3
 80059d0:	f7ff fd9c 	bl	800550c <_ZN3jlb4NodeC1Ecff>
 80059d4:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 80059d8:	4619      	mov	r1, r3
 80059da:	4620      	mov	r0, r4
 80059dc:	f007 f895 	bl	800cb0a <_ZNSt6vectorIN3jlb4NodeESaIS1_EE9push_backEOS1_>
 80059e0:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 80059e4:	4618      	mov	r0, r3
 80059e6:	f7ff fdae 	bl	8005546 <_ZN3jlb4NodeD1Ev>
            nodes.push_back(Node{static_cast<char>('S'), px_to_m(320), px_to_m(512)});
 80059ea:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80059ee:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 80059f2:	681c      	ldr	r4, [r3, #0]
 80059f4:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 80059f8:	eddf 0a0c 	vldr	s1, [pc, #48]	; 8005a2c <_ZN3jlb5GraphC1Ev+0x40c>
 80059fc:	eeb0 0a08 	vmov.f32	s0, #8	; 0x40400000  3.0
 8005a00:	2153      	movs	r1, #83	; 0x53
 8005a02:	4618      	mov	r0, r3
 8005a04:	f7ff fd82 	bl	800550c <_ZN3jlb4NodeC1Ecff>
 8005a08:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 8005a0c:	4619      	mov	r1, r3
 8005a0e:	4620      	mov	r0, r4
 8005a10:	f007 f87b 	bl	800cb0a <_ZNSt6vectorIN3jlb4NodeESaIS1_EE9push_backEOS1_>
 8005a14:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 8005a18:	4618      	mov	r0, r3
 8005a1a:	f7ff fd94 	bl	8005546 <_ZN3jlb4NodeD1Ev>
 8005a1e:	e011      	b.n	8005a44 <_ZN3jlb5GraphC1Ev+0x424>
 8005a20:	40866667 	.word	0x40866667
 8005a24:	40d33334 	.word	0x40d33334
 8005a28:	40666667 	.word	0x40666667
 8005a2c:	4099999a 	.word	0x4099999a
 8005a30:	40d33334 	.word	0x40d33334
 8005a34:	40accccd 	.word	0x40accccd
 8005a38:	4019999a 	.word	0x4019999a
 8005a3c:	40866667 	.word	0x40866667
 8005a40:	3f666667 	.word	0x3f666667
            nodes.push_back(Node{static_cast<char>('T'), px_to_m(320), px_to_m(576)});
 8005a44:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005a48:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8005a4c:	681c      	ldr	r4, [r3, #0]
 8005a4e:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 8005a52:	ed5f 0a08 	vldr	s1, [pc, #-32]	; 8005a34 <_ZN3jlb5GraphC1Ev+0x414>
 8005a56:	eeb0 0a08 	vmov.f32	s0, #8	; 0x40400000  3.0
 8005a5a:	2154      	movs	r1, #84	; 0x54
 8005a5c:	4618      	mov	r0, r3
 8005a5e:	f7ff fd55 	bl	800550c <_ZN3jlb4NodeC1Ecff>
 8005a62:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 8005a66:	4619      	mov	r1, r3
 8005a68:	4620      	mov	r0, r4
 8005a6a:	f007 f84e 	bl	800cb0a <_ZNSt6vectorIN3jlb4NodeESaIS1_EE9push_backEOS1_>
 8005a6e:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 8005a72:	4618      	mov	r0, r3
 8005a74:	f7ff fd67 	bl	8005546 <_ZN3jlb4NodeD1Ev>
            nodes.push_back(Node{static_cast<char>('U'), px_to_m(320), px_to_m(704)});
 8005a78:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005a7c:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8005a80:	681c      	ldr	r4, [r3, #0]
 8005a82:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 8005a86:	ed5f 0a16 	vldr	s1, [pc, #-88]	; 8005a30 <_ZN3jlb5GraphC1Ev+0x410>
 8005a8a:	eeb0 0a08 	vmov.f32	s0, #8	; 0x40400000  3.0
 8005a8e:	2155      	movs	r1, #85	; 0x55
 8005a90:	4618      	mov	r0, r3
 8005a92:	f7ff fd3b 	bl	800550c <_ZN3jlb4NodeC1Ecff>
 8005a96:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 8005a9a:	4619      	mov	r1, r3
 8005a9c:	4620      	mov	r0, r4
 8005a9e:	f007 f834 	bl	800cb0a <_ZNSt6vectorIN3jlb4NodeESaIS1_EE9push_backEOS1_>
 8005aa2:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 8005aa6:	4618      	mov	r0, r3
 8005aa8:	f7ff fd4d 	bl	8005546 <_ZN3jlb4NodeD1Ev>
            nodes.push_back(Node{static_cast<char>('V'), px_to_m(256), px_to_m(448)});
 8005aac:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005ab0:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8005ab4:	681c      	ldr	r4, [r3, #0]
 8005ab6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005aba:	ed5f 0a20 	vldr	s1, [pc, #-128]	; 8005a3c <_ZN3jlb5GraphC1Ev+0x41c>
 8005abe:	ed1f 0a22 	vldr	s0, [pc, #-136]	; 8005a38 <_ZN3jlb5GraphC1Ev+0x418>
 8005ac2:	2156      	movs	r1, #86	; 0x56
 8005ac4:	4618      	mov	r0, r3
 8005ac6:	f7ff fd21 	bl	800550c <_ZN3jlb4NodeC1Ecff>
 8005aca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005ace:	4619      	mov	r1, r3
 8005ad0:	4620      	mov	r0, r4
 8005ad2:	f007 f81a 	bl	800cb0a <_ZNSt6vectorIN3jlb4NodeESaIS1_EE9push_backEOS1_>
 8005ad6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005ada:	4618      	mov	r0, r3
 8005adc:	f7ff fd33 	bl	8005546 <_ZN3jlb4NodeD1Ev>
            nodes.push_back(Node{static_cast<char>('W'), px_to_m(256), px_to_m(576)});
 8005ae0:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005ae4:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8005ae8:	681c      	ldr	r4, [r3, #0]
 8005aea:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8005aee:	ed5f 0a2f 	vldr	s1, [pc, #-188]	; 8005a34 <_ZN3jlb5GraphC1Ev+0x414>
 8005af2:	ed1f 0a2f 	vldr	s0, [pc, #-188]	; 8005a38 <_ZN3jlb5GraphC1Ev+0x418>
 8005af6:	2157      	movs	r1, #87	; 0x57
 8005af8:	4618      	mov	r0, r3
 8005afa:	f7ff fd07 	bl	800550c <_ZN3jlb4NodeC1Ecff>
 8005afe:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8005b02:	4619      	mov	r1, r3
 8005b04:	4620      	mov	r0, r4
 8005b06:	f007 f800 	bl	800cb0a <_ZNSt6vectorIN3jlb4NodeESaIS1_EE9push_backEOS1_>
 8005b0a:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8005b0e:	4618      	mov	r0, r3
 8005b10:	f7ff fd19 	bl	8005546 <_ZN3jlb4NodeD1Ev>
            nodes.push_back(Node{static_cast<char>('X'), px_to_m(96), px_to_m(448)});
 8005b14:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005b18:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8005b1c:	681c      	ldr	r4, [r3, #0]
 8005b1e:	f507 730c 	add.w	r3, r7, #560	; 0x230
 8005b22:	ed5f 0a3a 	vldr	s1, [pc, #-232]	; 8005a3c <_ZN3jlb5GraphC1Ev+0x41c>
 8005b26:	ed1f 0a3a 	vldr	s0, [pc, #-232]	; 8005a40 <_ZN3jlb5GraphC1Ev+0x420>
 8005b2a:	2158      	movs	r1, #88	; 0x58
 8005b2c:	4618      	mov	r0, r3
 8005b2e:	f7ff fced 	bl	800550c <_ZN3jlb4NodeC1Ecff>
 8005b32:	f507 730c 	add.w	r3, r7, #560	; 0x230
 8005b36:	4619      	mov	r1, r3
 8005b38:	4620      	mov	r0, r4
 8005b3a:	f006 ffe6 	bl	800cb0a <_ZNSt6vectorIN3jlb4NodeESaIS1_EE9push_backEOS1_>
 8005b3e:	f507 730c 	add.w	r3, r7, #560	; 0x230
 8005b42:	4618      	mov	r0, r3
 8005b44:	f7ff fcff 	bl	8005546 <_ZN3jlb4NodeD1Ev>

            const auto UNIT           = SQUARE_LENGTH;
 8005b48:	4be9      	ldr	r3, [pc, #932]	; (8005ef0 <_ZN3jlb5GraphC1Ev+0x8d0>)
 8005b4a:	f607 4264 	addw	r2, r7, #3172	; 0xc64
 8005b4e:	6013      	str	r3, [r2, #0]
            const auto QUARTER_CIRCLE = 2 * UNIT * M_PI / 4.0f;
 8005b50:	a3e5      	add	r3, pc, #916	; (adr r3, 8005ee8 <_ZN3jlb5GraphC1Ev+0x8c8>)
 8005b52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b56:	f607 4158 	addw	r1, r7, #3160	; 0xc58
 8005b5a:	e9c1 2300 	strd	r2, r3, [r1]

            this->operator[]('A').add_edge('C', Direction::LEFT, {'B', 'D'}, QUARTER_CIRCLE);
 8005b5e:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005b62:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8005b66:	2141      	movs	r1, #65	; 0x41
 8005b68:	6818      	ldr	r0, [r3, #0]
 8005b6a:	f002 ff8c 	bl	8008a86 <_ZN3jlb5GraphixEc>
 8005b6e:	4604      	mov	r4, r0
 8005b70:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005b74:	f6a3 230c 	subw	r3, r3, #2572	; 0xa0c
 8005b78:	4ade      	ldr	r2, [pc, #888]	; (8005ef4 <_ZN3jlb5GraphC1Ev+0x8d4>)
 8005b7a:	8812      	ldrh	r2, [r2, #0]
 8005b7c:	801a      	strh	r2, [r3, #0]
 8005b7e:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005b82:	f6a3 2314 	subw	r3, r3, #2580	; 0xa14
 8005b86:	f507 7217 	add.w	r2, r7, #604	; 0x25c
 8005b8a:	601a      	str	r2, [r3, #0]
 8005b8c:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005b90:	f6a3 2314 	subw	r3, r3, #2580	; 0xa14
 8005b94:	2202      	movs	r2, #2
 8005b96:	605a      	str	r2, [r3, #4]
 8005b98:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8005b9c:	4618      	mov	r0, r3
 8005b9e:	f01b fb02 	bl	80211a6 <_ZNSaIcEC1Ev>
 8005ba2:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8005ba6:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8005baa:	f6a2 2214 	subw	r2, r2, #2580	; 0xa14
 8005bae:	f507 7012 	add.w	r0, r7, #584	; 0x248
 8005bb2:	ca06      	ldmia	r2, {r1, r2}
 8005bb4:	f006 ffba 	bl	800cb2c <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8005bb8:	f507 7312 	add.w	r3, r7, #584	; 0x248
 8005bbc:	ed9f 0ad0 	vldr	s0, [pc, #832]	; 8005f00 <_ZN3jlb5GraphC1Ev+0x8e0>
 8005bc0:	2200      	movs	r2, #0
 8005bc2:	2143      	movs	r1, #67	; 0x43
 8005bc4:	4620      	mov	r0, r4
 8005bc6:	f7ff fcda 	bl	800557e <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8005bca:	f507 7312 	add.w	r3, r7, #584	; 0x248
 8005bce:	4618      	mov	r0, r3
 8005bd0:	f006 ff1a 	bl	800ca08 <_ZNSt6vectorIcSaIcEED1Ev>
 8005bd4:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8005bd8:	4618      	mov	r0, r3
 8005bda:	f01b fae6 	bl	80211aa <_ZNSaIcED1Ev>
            this->operator[]('A').add_edge('B', Direction::STRAIGHT, {'C'}, 2.0f * UNIT);
 8005bde:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005be2:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8005be6:	2141      	movs	r1, #65	; 0x41
 8005be8:	6818      	ldr	r0, [r3, #0]
 8005bea:	f002 ff4c 	bl	8008a86 <_ZN3jlb5GraphixEc>
 8005bee:	4604      	mov	r4, r0
 8005bf0:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005bf4:	f5a3 631f 	sub.w	r3, r3, #2544	; 0x9f0
 8005bf8:	2243      	movs	r2, #67	; 0x43
 8005bfa:	701a      	strb	r2, [r3, #0]
 8005bfc:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005c00:	f6a3 13f8 	subw	r3, r3, #2552	; 0x9f8
 8005c04:	f507 721e 	add.w	r2, r7, #632	; 0x278
 8005c08:	601a      	str	r2, [r3, #0]
 8005c0a:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005c0e:	f6a3 13f8 	subw	r3, r3, #2552	; 0x9f8
 8005c12:	2201      	movs	r2, #1
 8005c14:	605a      	str	r2, [r3, #4]
 8005c16:	f507 731f 	add.w	r3, r7, #636	; 0x27c
 8005c1a:	4618      	mov	r0, r3
 8005c1c:	f01b fac3 	bl	80211a6 <_ZNSaIcEC1Ev>
 8005c20:	f507 731f 	add.w	r3, r7, #636	; 0x27c
 8005c24:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8005c28:	f6a2 12f8 	subw	r2, r2, #2552	; 0x9f8
 8005c2c:	f507 7019 	add.w	r0, r7, #612	; 0x264
 8005c30:	ca06      	ldmia	r2, {r1, r2}
 8005c32:	f006 ff7b 	bl	800cb2c <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8005c36:	f507 7319 	add.w	r3, r7, #612	; 0x264
 8005c3a:	ed9f 0aaf 	vldr	s0, [pc, #700]	; 8005ef8 <_ZN3jlb5GraphC1Ev+0x8d8>
 8005c3e:	2202      	movs	r2, #2
 8005c40:	2142      	movs	r1, #66	; 0x42
 8005c42:	4620      	mov	r0, r4
 8005c44:	f7ff fc9b 	bl	800557e <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8005c48:	f507 7319 	add.w	r3, r7, #612	; 0x264
 8005c4c:	4618      	mov	r0, r3
 8005c4e:	f006 fedb 	bl	800ca08 <_ZNSt6vectorIcSaIcEED1Ev>
 8005c52:	f507 731f 	add.w	r3, r7, #636	; 0x27c
 8005c56:	4618      	mov	r0, r3
 8005c58:	f01b faa7 	bl	80211aa <_ZNSaIcED1Ev>
            this->operator[]('A').add_edge('D', Direction::RIGHT, {'C'}, QUARTER_CIRCLE);
 8005c5c:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005c60:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8005c64:	2141      	movs	r1, #65	; 0x41
 8005c66:	6818      	ldr	r0, [r3, #0]
 8005c68:	f002 ff0d 	bl	8008a86 <_ZN3jlb5GraphixEc>
 8005c6c:	4604      	mov	r4, r0
 8005c6e:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005c72:	f6a3 13d4 	subw	r3, r3, #2516	; 0x9d4
 8005c76:	2243      	movs	r2, #67	; 0x43
 8005c78:	701a      	strb	r2, [r3, #0]
 8005c7a:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005c7e:	f6a3 13dc 	subw	r3, r3, #2524	; 0x9dc
 8005c82:	f507 7225 	add.w	r2, r7, #660	; 0x294
 8005c86:	601a      	str	r2, [r3, #0]
 8005c88:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005c8c:	f6a3 13dc 	subw	r3, r3, #2524	; 0x9dc
 8005c90:	2201      	movs	r2, #1
 8005c92:	605a      	str	r2, [r3, #4]
 8005c94:	f507 7326 	add.w	r3, r7, #664	; 0x298
 8005c98:	4618      	mov	r0, r3
 8005c9a:	f01b fa84 	bl	80211a6 <_ZNSaIcEC1Ev>
 8005c9e:	f507 7326 	add.w	r3, r7, #664	; 0x298
 8005ca2:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8005ca6:	f6a2 12dc 	subw	r2, r2, #2524	; 0x9dc
 8005caa:	f507 7020 	add.w	r0, r7, #640	; 0x280
 8005cae:	ca06      	ldmia	r2, {r1, r2}
 8005cb0:	f006 ff3c 	bl	800cb2c <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8005cb4:	f507 7320 	add.w	r3, r7, #640	; 0x280
 8005cb8:	ed9f 0a91 	vldr	s0, [pc, #580]	; 8005f00 <_ZN3jlb5GraphC1Ev+0x8e0>
 8005cbc:	2201      	movs	r2, #1
 8005cbe:	2144      	movs	r1, #68	; 0x44
 8005cc0:	4620      	mov	r0, r4
 8005cc2:	f7ff fc5c 	bl	800557e <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8005cc6:	f507 7320 	add.w	r3, r7, #640	; 0x280
 8005cca:	4618      	mov	r0, r3
 8005ccc:	f006 fe9c 	bl	800ca08 <_ZNSt6vectorIcSaIcEED1Ev>
 8005cd0:	f507 7326 	add.w	r3, r7, #664	; 0x298
 8005cd4:	4618      	mov	r0, r3
 8005cd6:	f01b fa68 	bl	80211aa <_ZNSaIcED1Ev>
            this->operator[]('B').add_edge('A', Direction::STRAIGHT, {'E'}, 2.0f * UNIT);
 8005cda:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005cde:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8005ce2:	2142      	movs	r1, #66	; 0x42
 8005ce4:	6818      	ldr	r0, [r3, #0]
 8005ce6:	f002 fece 	bl	8008a86 <_ZN3jlb5GraphixEc>
 8005cea:	4604      	mov	r4, r0
 8005cec:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005cf0:	f6a3 13b8 	subw	r3, r3, #2488	; 0x9b8
 8005cf4:	2245      	movs	r2, #69	; 0x45
 8005cf6:	701a      	strb	r2, [r3, #0]
 8005cf8:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005cfc:	f5a3 631c 	sub.w	r3, r3, #2496	; 0x9c0
 8005d00:	f507 722c 	add.w	r2, r7, #688	; 0x2b0
 8005d04:	601a      	str	r2, [r3, #0]
 8005d06:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005d0a:	f5a3 631c 	sub.w	r3, r3, #2496	; 0x9c0
 8005d0e:	2201      	movs	r2, #1
 8005d10:	605a      	str	r2, [r3, #4]
 8005d12:	f507 732d 	add.w	r3, r7, #692	; 0x2b4
 8005d16:	4618      	mov	r0, r3
 8005d18:	f01b fa45 	bl	80211a6 <_ZNSaIcEC1Ev>
 8005d1c:	f507 732d 	add.w	r3, r7, #692	; 0x2b4
 8005d20:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8005d24:	f5a2 621c 	sub.w	r2, r2, #2496	; 0x9c0
 8005d28:	f507 7027 	add.w	r0, r7, #668	; 0x29c
 8005d2c:	ca06      	ldmia	r2, {r1, r2}
 8005d2e:	f006 fefd 	bl	800cb2c <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8005d32:	f507 7327 	add.w	r3, r7, #668	; 0x29c
 8005d36:	ed9f 0a70 	vldr	s0, [pc, #448]	; 8005ef8 <_ZN3jlb5GraphC1Ev+0x8d8>
 8005d3a:	2202      	movs	r2, #2
 8005d3c:	2141      	movs	r1, #65	; 0x41
 8005d3e:	4620      	mov	r0, r4
 8005d40:	f7ff fc1d 	bl	800557e <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8005d44:	f507 7327 	add.w	r3, r7, #668	; 0x29c
 8005d48:	4618      	mov	r0, r3
 8005d4a:	f006 fe5d 	bl	800ca08 <_ZNSt6vectorIcSaIcEED1Ev>
 8005d4e:	f507 732d 	add.w	r3, r7, #692	; 0x2b4
 8005d52:	4618      	mov	r0, r3
 8005d54:	f01b fa29 	bl	80211aa <_ZNSaIcED1Ev>
            this->operator[]('B').add_edge('E', Direction::RIGHT, {'A', 'D'}, QUARTER_CIRCLE);
 8005d58:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005d5c:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8005d60:	2142      	movs	r1, #66	; 0x42
 8005d62:	6818      	ldr	r0, [r3, #0]
 8005d64:	f002 fe8f 	bl	8008a86 <_ZN3jlb5GraphixEc>
 8005d68:	4604      	mov	r4, r0
 8005d6a:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005d6e:	f6a3 139c 	subw	r3, r3, #2460	; 0x99c
 8005d72:	4a62      	ldr	r2, [pc, #392]	; (8005efc <_ZN3jlb5GraphC1Ev+0x8dc>)
 8005d74:	8812      	ldrh	r2, [r2, #0]
 8005d76:	801a      	strh	r2, [r3, #0]
 8005d78:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005d7c:	f6a3 13a4 	subw	r3, r3, #2468	; 0x9a4
 8005d80:	f507 7233 	add.w	r2, r7, #716	; 0x2cc
 8005d84:	601a      	str	r2, [r3, #0]
 8005d86:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005d8a:	f6a3 13a4 	subw	r3, r3, #2468	; 0x9a4
 8005d8e:	2202      	movs	r2, #2
 8005d90:	605a      	str	r2, [r3, #4]
 8005d92:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 8005d96:	4618      	mov	r0, r3
 8005d98:	f01b fa05 	bl	80211a6 <_ZNSaIcEC1Ev>
 8005d9c:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 8005da0:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8005da4:	f6a2 12a4 	subw	r2, r2, #2468	; 0x9a4
 8005da8:	f507 702e 	add.w	r0, r7, #696	; 0x2b8
 8005dac:	ca06      	ldmia	r2, {r1, r2}
 8005dae:	f006 febd 	bl	800cb2c <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8005db2:	f507 732e 	add.w	r3, r7, #696	; 0x2b8
 8005db6:	ed9f 0a52 	vldr	s0, [pc, #328]	; 8005f00 <_ZN3jlb5GraphC1Ev+0x8e0>
 8005dba:	2201      	movs	r2, #1
 8005dbc:	2145      	movs	r1, #69	; 0x45
 8005dbe:	4620      	mov	r0, r4
 8005dc0:	f7ff fbdd 	bl	800557e <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8005dc4:	f507 732e 	add.w	r3, r7, #696	; 0x2b8
 8005dc8:	4618      	mov	r0, r3
 8005dca:	f006 fe1d 	bl	800ca08 <_ZNSt6vectorIcSaIcEED1Ev>
 8005dce:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 8005dd2:	4618      	mov	r0, r3
 8005dd4:	f01b f9e9 	bl	80211aa <_ZNSaIcED1Ev>
            this->operator[]('B').add_edge('D', Direction::LEFT, {'E'}, QUARTER_CIRCLE);
 8005dd8:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005ddc:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8005de0:	2142      	movs	r1, #66	; 0x42
 8005de2:	6818      	ldr	r0, [r3, #0]
 8005de4:	f002 fe4f 	bl	8008a86 <_ZN3jlb5GraphixEc>
 8005de8:	4604      	mov	r4, r0
 8005dea:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005dee:	f5a3 6318 	sub.w	r3, r3, #2432	; 0x980
 8005df2:	2245      	movs	r2, #69	; 0x45
 8005df4:	701a      	strb	r2, [r3, #0]
 8005df6:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005dfa:	f6a3 1388 	subw	r3, r3, #2440	; 0x988
 8005dfe:	f507 723a 	add.w	r2, r7, #744	; 0x2e8
 8005e02:	601a      	str	r2, [r3, #0]
 8005e04:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005e08:	f6a3 1388 	subw	r3, r3, #2440	; 0x988
 8005e0c:	2201      	movs	r2, #1
 8005e0e:	605a      	str	r2, [r3, #4]
 8005e10:	f507 733b 	add.w	r3, r7, #748	; 0x2ec
 8005e14:	4618      	mov	r0, r3
 8005e16:	f01b f9c6 	bl	80211a6 <_ZNSaIcEC1Ev>
 8005e1a:	f507 733b 	add.w	r3, r7, #748	; 0x2ec
 8005e1e:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8005e22:	f6a2 1288 	subw	r2, r2, #2440	; 0x988
 8005e26:	f507 7035 	add.w	r0, r7, #724	; 0x2d4
 8005e2a:	ca06      	ldmia	r2, {r1, r2}
 8005e2c:	f006 fe7e 	bl	800cb2c <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8005e30:	f507 7335 	add.w	r3, r7, #724	; 0x2d4
 8005e34:	ed9f 0a32 	vldr	s0, [pc, #200]	; 8005f00 <_ZN3jlb5GraphC1Ev+0x8e0>
 8005e38:	2200      	movs	r2, #0
 8005e3a:	2144      	movs	r1, #68	; 0x44
 8005e3c:	4620      	mov	r0, r4
 8005e3e:	f7ff fb9e 	bl	800557e <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8005e42:	f507 7335 	add.w	r3, r7, #724	; 0x2d4
 8005e46:	4618      	mov	r0, r3
 8005e48:	f006 fdde 	bl	800ca08 <_ZNSt6vectorIcSaIcEED1Ev>
 8005e4c:	f507 733b 	add.w	r3, r7, #748	; 0x2ec
 8005e50:	4618      	mov	r0, r3
 8005e52:	f01b f9aa 	bl	80211aa <_ZNSaIcED1Ev>
            this->operator[]('C').add_edge('A', Direction::RIGHT, {'F'}, QUARTER_CIRCLE);
 8005e56:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005e5a:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8005e5e:	2143      	movs	r1, #67	; 0x43
 8005e60:	6818      	ldr	r0, [r3, #0]
 8005e62:	f002 fe10 	bl	8008a86 <_ZN3jlb5GraphixEc>
 8005e66:	4604      	mov	r4, r0
 8005e68:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005e6c:	f6a3 1364 	subw	r3, r3, #2404	; 0x964
 8005e70:	2246      	movs	r2, #70	; 0x46
 8005e72:	701a      	strb	r2, [r3, #0]
 8005e74:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005e78:	f6a3 136c 	subw	r3, r3, #2412	; 0x96c
 8005e7c:	f507 7241 	add.w	r2, r7, #772	; 0x304
 8005e80:	601a      	str	r2, [r3, #0]
 8005e82:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005e86:	f6a3 136c 	subw	r3, r3, #2412	; 0x96c
 8005e8a:	2201      	movs	r2, #1
 8005e8c:	605a      	str	r2, [r3, #4]
 8005e8e:	f507 7342 	add.w	r3, r7, #776	; 0x308
 8005e92:	4618      	mov	r0, r3
 8005e94:	f01b f987 	bl	80211a6 <_ZNSaIcEC1Ev>
 8005e98:	f507 7342 	add.w	r3, r7, #776	; 0x308
 8005e9c:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8005ea0:	f6a2 126c 	subw	r2, r2, #2412	; 0x96c
 8005ea4:	f507 703c 	add.w	r0, r7, #752	; 0x2f0
 8005ea8:	ca06      	ldmia	r2, {r1, r2}
 8005eaa:	f006 fe3f 	bl	800cb2c <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8005eae:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8005eb2:	ed9f 0a13 	vldr	s0, [pc, #76]	; 8005f00 <_ZN3jlb5GraphC1Ev+0x8e0>
 8005eb6:	2201      	movs	r2, #1
 8005eb8:	2141      	movs	r1, #65	; 0x41
 8005eba:	4620      	mov	r0, r4
 8005ebc:	f7ff fb5f 	bl	800557e <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8005ec0:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8005ec4:	4618      	mov	r0, r3
 8005ec6:	f006 fd9f 	bl	800ca08 <_ZNSt6vectorIcSaIcEED1Ev>
 8005eca:	f507 7342 	add.w	r3, r7, #776	; 0x308
 8005ece:	4618      	mov	r0, r3
 8005ed0:	f01b f96b 	bl	80211aa <_ZNSaIcED1Ev>
            this->operator[]('C').add_edge('F', Direction::LEFT, {'A'}, QUARTER_CIRCLE);
 8005ed4:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005ed8:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8005edc:	2143      	movs	r1, #67	; 0x43
 8005ede:	6818      	ldr	r0, [r3, #0]
 8005ee0:	f002 fdd1 	bl	8008a86 <_ZN3jlb5GraphixEc>
 8005ee4:	e00e      	b.n	8005f04 <_ZN3jlb5GraphC1Ev+0x8e4>
 8005ee6:	bf00      	nop
 8005ee8:	460698c7 	.word	0x460698c7
 8005eec:	3fee28c7 	.word	0x3fee28c7
 8005ef0:	3f19999a 	.word	0x3f19999a
 8005ef4:	08025d90 	.word	0x08025d90
 8005ef8:	3f99999a 	.word	0x3f99999a
 8005efc:	08025d94 	.word	0x08025d94
 8005f00:	3f71463a 	.word	0x3f71463a
 8005f04:	4604      	mov	r4, r0
 8005f06:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005f0a:	f6a3 1348 	subw	r3, r3, #2376	; 0x948
 8005f0e:	2241      	movs	r2, #65	; 0x41
 8005f10:	701a      	strb	r2, [r3, #0]
 8005f12:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005f16:	f5a3 6315 	sub.w	r3, r3, #2384	; 0x950
 8005f1a:	f507 7248 	add.w	r2, r7, #800	; 0x320
 8005f1e:	601a      	str	r2, [r3, #0]
 8005f20:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005f24:	f5a3 6315 	sub.w	r3, r3, #2384	; 0x950
 8005f28:	2201      	movs	r2, #1
 8005f2a:	605a      	str	r2, [r3, #4]
 8005f2c:	f507 7349 	add.w	r3, r7, #804	; 0x324
 8005f30:	4618      	mov	r0, r3
 8005f32:	f01b f938 	bl	80211a6 <_ZNSaIcEC1Ev>
 8005f36:	f507 7349 	add.w	r3, r7, #804	; 0x324
 8005f3a:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8005f3e:	f5a2 6215 	sub.w	r2, r2, #2384	; 0x950
 8005f42:	f507 7043 	add.w	r0, r7, #780	; 0x30c
 8005f46:	ca06      	ldmia	r2, {r1, r2}
 8005f48:	f006 fdf0 	bl	800cb2c <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8005f4c:	f507 7343 	add.w	r3, r7, #780	; 0x30c
 8005f50:	ed1f 0a15 	vldr	s0, [pc, #-84]	; 8005f00 <_ZN3jlb5GraphC1Ev+0x8e0>
 8005f54:	2200      	movs	r2, #0
 8005f56:	2146      	movs	r1, #70	; 0x46
 8005f58:	4620      	mov	r0, r4
 8005f5a:	f7ff fb10 	bl	800557e <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8005f5e:	f507 7343 	add.w	r3, r7, #780	; 0x30c
 8005f62:	4618      	mov	r0, r3
 8005f64:	f006 fd50 	bl	800ca08 <_ZNSt6vectorIcSaIcEED1Ev>
 8005f68:	f507 7349 	add.w	r3, r7, #804	; 0x324
 8005f6c:	4618      	mov	r0, r3
 8005f6e:	f01b f91c 	bl	80211aa <_ZNSaIcED1Ev>
            this->operator[]('D').add_edge('A', Direction::LEFT, {'F', 'G', 'I'}, QUARTER_CIRCLE);
 8005f72:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005f76:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8005f7a:	2144      	movs	r1, #68	; 0x44
 8005f7c:	6818      	ldr	r0, [r3, #0]
 8005f7e:	f002 fd82 	bl	8008a86 <_ZN3jlb5GraphixEc>
 8005f82:	4604      	mov	r4, r0
 8005f84:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005f88:	f6a3 132c 	subw	r3, r3, #2348	; 0x92c
 8005f8c:	4ae5      	ldr	r2, [pc, #916]	; (8006324 <_ZN3jlb5GraphC1Ev+0xd04>)
 8005f8e:	6812      	ldr	r2, [r2, #0]
 8005f90:	4611      	mov	r1, r2
 8005f92:	8019      	strh	r1, [r3, #0]
 8005f94:	3302      	adds	r3, #2
 8005f96:	0c12      	lsrs	r2, r2, #16
 8005f98:	701a      	strb	r2, [r3, #0]
 8005f9a:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005f9e:	f6a3 1334 	subw	r3, r3, #2356	; 0x934
 8005fa2:	f507 724f 	add.w	r2, r7, #828	; 0x33c
 8005fa6:	601a      	str	r2, [r3, #0]
 8005fa8:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005fac:	f6a3 1334 	subw	r3, r3, #2356	; 0x934
 8005fb0:	2203      	movs	r2, #3
 8005fb2:	605a      	str	r2, [r3, #4]
 8005fb4:	f507 7350 	add.w	r3, r7, #832	; 0x340
 8005fb8:	4618      	mov	r0, r3
 8005fba:	f01b f8f4 	bl	80211a6 <_ZNSaIcEC1Ev>
 8005fbe:	f507 7350 	add.w	r3, r7, #832	; 0x340
 8005fc2:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8005fc6:	f6a2 1234 	subw	r2, r2, #2356	; 0x934
 8005fca:	f507 704a 	add.w	r0, r7, #808	; 0x328
 8005fce:	ca06      	ldmia	r2, {r1, r2}
 8005fd0:	f006 fdac 	bl	800cb2c <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8005fd4:	f507 734a 	add.w	r3, r7, #808	; 0x328
 8005fd8:	ed9f 0ad6 	vldr	s0, [pc, #856]	; 8006334 <_ZN3jlb5GraphC1Ev+0xd14>
 8005fdc:	2200      	movs	r2, #0
 8005fde:	2141      	movs	r1, #65	; 0x41
 8005fe0:	4620      	mov	r0, r4
 8005fe2:	f7ff facc 	bl	800557e <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8005fe6:	f507 734a 	add.w	r3, r7, #808	; 0x328
 8005fea:	4618      	mov	r0, r3
 8005fec:	f006 fd0c 	bl	800ca08 <_ZNSt6vectorIcSaIcEED1Ev>
 8005ff0:	f507 7350 	add.w	r3, r7, #832	; 0x340
 8005ff4:	4618      	mov	r0, r3
 8005ff6:	f01b f8d8 	bl	80211aa <_ZNSaIcED1Ev>
            this->operator[]('D').add_edge('B', Direction::RIGHT, {'F', 'G', 'I'}, QUARTER_CIRCLE);
 8005ffa:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005ffe:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8006002:	2144      	movs	r1, #68	; 0x44
 8006004:	6818      	ldr	r0, [r3, #0]
 8006006:	f002 fd3e 	bl	8008a86 <_ZN3jlb5GraphixEc>
 800600a:	4604      	mov	r4, r0
 800600c:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006010:	f5a3 6311 	sub.w	r3, r3, #2320	; 0x910
 8006014:	4ac3      	ldr	r2, [pc, #780]	; (8006324 <_ZN3jlb5GraphC1Ev+0xd04>)
 8006016:	6812      	ldr	r2, [r2, #0]
 8006018:	4611      	mov	r1, r2
 800601a:	8019      	strh	r1, [r3, #0]
 800601c:	3302      	adds	r3, #2
 800601e:	0c12      	lsrs	r2, r2, #16
 8006020:	701a      	strb	r2, [r3, #0]
 8006022:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006026:	f6a3 1318 	subw	r3, r3, #2328	; 0x918
 800602a:	f507 7256 	add.w	r2, r7, #856	; 0x358
 800602e:	601a      	str	r2, [r3, #0]
 8006030:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006034:	f6a3 1318 	subw	r3, r3, #2328	; 0x918
 8006038:	2203      	movs	r2, #3
 800603a:	605a      	str	r2, [r3, #4]
 800603c:	f507 7357 	add.w	r3, r7, #860	; 0x35c
 8006040:	4618      	mov	r0, r3
 8006042:	f01b f8b0 	bl	80211a6 <_ZNSaIcEC1Ev>
 8006046:	f507 7357 	add.w	r3, r7, #860	; 0x35c
 800604a:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 800604e:	f6a2 1218 	subw	r2, r2, #2328	; 0x918
 8006052:	f507 7051 	add.w	r0, r7, #836	; 0x344
 8006056:	ca06      	ldmia	r2, {r1, r2}
 8006058:	f006 fd68 	bl	800cb2c <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 800605c:	f507 7351 	add.w	r3, r7, #836	; 0x344
 8006060:	ed9f 0ab4 	vldr	s0, [pc, #720]	; 8006334 <_ZN3jlb5GraphC1Ev+0xd14>
 8006064:	2201      	movs	r2, #1
 8006066:	2142      	movs	r1, #66	; 0x42
 8006068:	4620      	mov	r0, r4
 800606a:	f7ff fa88 	bl	800557e <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 800606e:	f507 7351 	add.w	r3, r7, #836	; 0x344
 8006072:	4618      	mov	r0, r3
 8006074:	f006 fcc8 	bl	800ca08 <_ZNSt6vectorIcSaIcEED1Ev>
 8006078:	f507 7357 	add.w	r3, r7, #860	; 0x35c
 800607c:	4618      	mov	r0, r3
 800607e:	f01b f894 	bl	80211aa <_ZNSaIcED1Ev>
            this->operator[]('D').add_edge('G', Direction::LEFT, {'A', 'B'}, QUARTER_CIRCLE);
 8006082:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006086:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 800608a:	2144      	movs	r1, #68	; 0x44
 800608c:	6818      	ldr	r0, [r3, #0]
 800608e:	f002 fcfa 	bl	8008a86 <_ZN3jlb5GraphixEc>
 8006092:	4604      	mov	r4, r0
 8006094:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006098:	f6a3 03f4 	subw	r3, r3, #2292	; 0x8f4
 800609c:	4aa2      	ldr	r2, [pc, #648]	; (8006328 <_ZN3jlb5GraphC1Ev+0xd08>)
 800609e:	8812      	ldrh	r2, [r2, #0]
 80060a0:	801a      	strh	r2, [r3, #0]
 80060a2:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80060a6:	f6a3 03fc 	subw	r3, r3, #2300	; 0x8fc
 80060aa:	f507 725d 	add.w	r2, r7, #884	; 0x374
 80060ae:	601a      	str	r2, [r3, #0]
 80060b0:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80060b4:	f6a3 03fc 	subw	r3, r3, #2300	; 0x8fc
 80060b8:	2202      	movs	r2, #2
 80060ba:	605a      	str	r2, [r3, #4]
 80060bc:	f507 735e 	add.w	r3, r7, #888	; 0x378
 80060c0:	4618      	mov	r0, r3
 80060c2:	f01b f870 	bl	80211a6 <_ZNSaIcEC1Ev>
 80060c6:	f507 735e 	add.w	r3, r7, #888	; 0x378
 80060ca:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 80060ce:	f6a2 02fc 	subw	r2, r2, #2300	; 0x8fc
 80060d2:	f507 7058 	add.w	r0, r7, #864	; 0x360
 80060d6:	ca06      	ldmia	r2, {r1, r2}
 80060d8:	f006 fd28 	bl	800cb2c <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 80060dc:	f507 7358 	add.w	r3, r7, #864	; 0x360
 80060e0:	ed9f 0a94 	vldr	s0, [pc, #592]	; 8006334 <_ZN3jlb5GraphC1Ev+0xd14>
 80060e4:	2200      	movs	r2, #0
 80060e6:	2147      	movs	r1, #71	; 0x47
 80060e8:	4620      	mov	r0, r4
 80060ea:	f7ff fa48 	bl	800557e <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 80060ee:	f507 7358 	add.w	r3, r7, #864	; 0x360
 80060f2:	4618      	mov	r0, r3
 80060f4:	f006 fc88 	bl	800ca08 <_ZNSt6vectorIcSaIcEED1Ev>
 80060f8:	f507 735e 	add.w	r3, r7, #888	; 0x378
 80060fc:	4618      	mov	r0, r3
 80060fe:	f01b f854 	bl	80211aa <_ZNSaIcED1Ev>
            this->operator[]('D').add_edge('I', Direction::STRAIGHT, {'A', 'B'}, 2.0f * UNIT);
 8006102:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006106:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 800610a:	2144      	movs	r1, #68	; 0x44
 800610c:	6818      	ldr	r0, [r3, #0]
 800610e:	f002 fcba 	bl	8008a86 <_ZN3jlb5GraphixEc>
 8006112:	4604      	mov	r4, r0
 8006114:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006118:	f6a3 03d8 	subw	r3, r3, #2264	; 0x8d8
 800611c:	4a82      	ldr	r2, [pc, #520]	; (8006328 <_ZN3jlb5GraphC1Ev+0xd08>)
 800611e:	8812      	ldrh	r2, [r2, #0]
 8006120:	801a      	strh	r2, [r3, #0]
 8006122:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006126:	f5a3 630e 	sub.w	r3, r3, #2272	; 0x8e0
 800612a:	f507 7264 	add.w	r2, r7, #912	; 0x390
 800612e:	601a      	str	r2, [r3, #0]
 8006130:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006134:	f5a3 630e 	sub.w	r3, r3, #2272	; 0x8e0
 8006138:	2202      	movs	r2, #2
 800613a:	605a      	str	r2, [r3, #4]
 800613c:	f507 7365 	add.w	r3, r7, #916	; 0x394
 8006140:	4618      	mov	r0, r3
 8006142:	f01b f830 	bl	80211a6 <_ZNSaIcEC1Ev>
 8006146:	f507 7365 	add.w	r3, r7, #916	; 0x394
 800614a:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 800614e:	f5a2 620e 	sub.w	r2, r2, #2272	; 0x8e0
 8006152:	f507 705f 	add.w	r0, r7, #892	; 0x37c
 8006156:	ca06      	ldmia	r2, {r1, r2}
 8006158:	f006 fce8 	bl	800cb2c <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 800615c:	f507 735f 	add.w	r3, r7, #892	; 0x37c
 8006160:	ed9f 0a72 	vldr	s0, [pc, #456]	; 800632c <_ZN3jlb5GraphC1Ev+0xd0c>
 8006164:	2202      	movs	r2, #2
 8006166:	2149      	movs	r1, #73	; 0x49
 8006168:	4620      	mov	r0, r4
 800616a:	f7ff fa08 	bl	800557e <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 800616e:	f507 735f 	add.w	r3, r7, #892	; 0x37c
 8006172:	4618      	mov	r0, r3
 8006174:	f006 fc48 	bl	800ca08 <_ZNSt6vectorIcSaIcEED1Ev>
 8006178:	f507 7365 	add.w	r3, r7, #916	; 0x394
 800617c:	4618      	mov	r0, r3
 800617e:	f01b f814 	bl	80211aa <_ZNSaIcED1Ev>
            this->operator[]('D').add_edge('F', Direction::RIGHT, {'A', 'B'}, QUARTER_CIRCLE);
 8006182:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006186:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 800618a:	2144      	movs	r1, #68	; 0x44
 800618c:	6818      	ldr	r0, [r3, #0]
 800618e:	f002 fc7a 	bl	8008a86 <_ZN3jlb5GraphixEc>
 8006192:	4604      	mov	r4, r0
 8006194:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006198:	f6a3 03bc 	subw	r3, r3, #2236	; 0x8bc
 800619c:	4a62      	ldr	r2, [pc, #392]	; (8006328 <_ZN3jlb5GraphC1Ev+0xd08>)
 800619e:	8812      	ldrh	r2, [r2, #0]
 80061a0:	801a      	strh	r2, [r3, #0]
 80061a2:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80061a6:	f6a3 03c4 	subw	r3, r3, #2244	; 0x8c4
 80061aa:	f507 726b 	add.w	r2, r7, #940	; 0x3ac
 80061ae:	601a      	str	r2, [r3, #0]
 80061b0:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80061b4:	f6a3 03c4 	subw	r3, r3, #2244	; 0x8c4
 80061b8:	2202      	movs	r2, #2
 80061ba:	605a      	str	r2, [r3, #4]
 80061bc:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 80061c0:	4618      	mov	r0, r3
 80061c2:	f01a fff0 	bl	80211a6 <_ZNSaIcEC1Ev>
 80061c6:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 80061ca:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 80061ce:	f6a2 02c4 	subw	r2, r2, #2244	; 0x8c4
 80061d2:	f507 7066 	add.w	r0, r7, #920	; 0x398
 80061d6:	ca06      	ldmia	r2, {r1, r2}
 80061d8:	f006 fca8 	bl	800cb2c <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 80061dc:	f507 7366 	add.w	r3, r7, #920	; 0x398
 80061e0:	ed9f 0a54 	vldr	s0, [pc, #336]	; 8006334 <_ZN3jlb5GraphC1Ev+0xd14>
 80061e4:	2201      	movs	r2, #1
 80061e6:	2146      	movs	r1, #70	; 0x46
 80061e8:	4620      	mov	r0, r4
 80061ea:	f7ff f9c8 	bl	800557e <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 80061ee:	f507 7366 	add.w	r3, r7, #920	; 0x398
 80061f2:	4618      	mov	r0, r3
 80061f4:	f006 fc08 	bl	800ca08 <_ZNSt6vectorIcSaIcEED1Ev>
 80061f8:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 80061fc:	4618      	mov	r0, r3
 80061fe:	f01a ffd4 	bl	80211aa <_ZNSaIcED1Ev>
            this->operator[]('E').add_edge('B', Direction::LEFT, {'G', 'J'}, QUARTER_CIRCLE);
 8006202:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006206:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 800620a:	2145      	movs	r1, #69	; 0x45
 800620c:	6818      	ldr	r0, [r3, #0]
 800620e:	f002 fc3a 	bl	8008a86 <_ZN3jlb5GraphixEc>
 8006212:	4604      	mov	r4, r0
 8006214:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006218:	f5a3 630a 	sub.w	r3, r3, #2208	; 0x8a0
 800621c:	4a44      	ldr	r2, [pc, #272]	; (8006330 <_ZN3jlb5GraphC1Ev+0xd10>)
 800621e:	8812      	ldrh	r2, [r2, #0]
 8006220:	801a      	strh	r2, [r3, #0]
 8006222:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006226:	f6a3 03a8 	subw	r3, r3, #2216	; 0x8a8
 800622a:	f507 7272 	add.w	r2, r7, #968	; 0x3c8
 800622e:	601a      	str	r2, [r3, #0]
 8006230:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006234:	f6a3 03a8 	subw	r3, r3, #2216	; 0x8a8
 8006238:	2202      	movs	r2, #2
 800623a:	605a      	str	r2, [r3, #4]
 800623c:	f507 7373 	add.w	r3, r7, #972	; 0x3cc
 8006240:	4618      	mov	r0, r3
 8006242:	f01a ffb0 	bl	80211a6 <_ZNSaIcEC1Ev>
 8006246:	f507 7373 	add.w	r3, r7, #972	; 0x3cc
 800624a:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 800624e:	f6a2 02a8 	subw	r2, r2, #2216	; 0x8a8
 8006252:	f507 706d 	add.w	r0, r7, #948	; 0x3b4
 8006256:	ca06      	ldmia	r2, {r1, r2}
 8006258:	f006 fc68 	bl	800cb2c <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 800625c:	f507 736d 	add.w	r3, r7, #948	; 0x3b4
 8006260:	ed9f 0a34 	vldr	s0, [pc, #208]	; 8006334 <_ZN3jlb5GraphC1Ev+0xd14>
 8006264:	2200      	movs	r2, #0
 8006266:	2142      	movs	r1, #66	; 0x42
 8006268:	4620      	mov	r0, r4
 800626a:	f7ff f988 	bl	800557e <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 800626e:	f507 736d 	add.w	r3, r7, #948	; 0x3b4
 8006272:	4618      	mov	r0, r3
 8006274:	f006 fbc8 	bl	800ca08 <_ZNSt6vectorIcSaIcEED1Ev>
 8006278:	f507 7373 	add.w	r3, r7, #972	; 0x3cc
 800627c:	4618      	mov	r0, r3
 800627e:	f01a ff94 	bl	80211aa <_ZNSaIcED1Ev>
            this->operator[]('E').add_edge('J', Direction::STRAIGHT, {'B'}, 2.0f * UNIT);
 8006282:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006286:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 800628a:	2145      	movs	r1, #69	; 0x45
 800628c:	6818      	ldr	r0, [r3, #0]
 800628e:	f002 fbfa 	bl	8008a86 <_ZN3jlb5GraphixEc>
 8006292:	4604      	mov	r4, r0
 8006294:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006298:	f6a3 0384 	subw	r3, r3, #2180	; 0x884
 800629c:	2242      	movs	r2, #66	; 0x42
 800629e:	701a      	strb	r2, [r3, #0]
 80062a0:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80062a4:	f6a3 038c 	subw	r3, r3, #2188	; 0x88c
 80062a8:	f507 7279 	add.w	r2, r7, #996	; 0x3e4
 80062ac:	601a      	str	r2, [r3, #0]
 80062ae:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80062b2:	f6a3 038c 	subw	r3, r3, #2188	; 0x88c
 80062b6:	2201      	movs	r2, #1
 80062b8:	605a      	str	r2, [r3, #4]
 80062ba:	f507 737a 	add.w	r3, r7, #1000	; 0x3e8
 80062be:	4618      	mov	r0, r3
 80062c0:	f01a ff71 	bl	80211a6 <_ZNSaIcEC1Ev>
 80062c4:	f507 737a 	add.w	r3, r7, #1000	; 0x3e8
 80062c8:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 80062cc:	f6a2 028c 	subw	r2, r2, #2188	; 0x88c
 80062d0:	f507 7074 	add.w	r0, r7, #976	; 0x3d0
 80062d4:	ca06      	ldmia	r2, {r1, r2}
 80062d6:	f006 fc29 	bl	800cb2c <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 80062da:	f507 7374 	add.w	r3, r7, #976	; 0x3d0
 80062de:	ed9f 0a13 	vldr	s0, [pc, #76]	; 800632c <_ZN3jlb5GraphC1Ev+0xd0c>
 80062e2:	2202      	movs	r2, #2
 80062e4:	214a      	movs	r1, #74	; 0x4a
 80062e6:	4620      	mov	r0, r4
 80062e8:	f7ff f949 	bl	800557e <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 80062ec:	f507 7374 	add.w	r3, r7, #976	; 0x3d0
 80062f0:	4618      	mov	r0, r3
 80062f2:	f006 fb89 	bl	800ca08 <_ZNSt6vectorIcSaIcEED1Ev>
 80062f6:	f507 737a 	add.w	r3, r7, #1000	; 0x3e8
 80062fa:	4618      	mov	r0, r3
 80062fc:	f01a ff55 	bl	80211aa <_ZNSaIcED1Ev>
            this->operator[]('E').add_edge('G', Direction::RIGHT, {'B'}, QUARTER_CIRCLE);
 8006300:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006304:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8006308:	2145      	movs	r1, #69	; 0x45
 800630a:	6818      	ldr	r0, [r3, #0]
 800630c:	f002 fbbb 	bl	8008a86 <_ZN3jlb5GraphixEc>
 8006310:	4604      	mov	r4, r0
 8006312:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006316:	f6a3 0368 	subw	r3, r3, #2152	; 0x868
 800631a:	2242      	movs	r2, #66	; 0x42
 800631c:	701a      	strb	r2, [r3, #0]
 800631e:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006322:	e009      	b.n	8006338 <_ZN3jlb5GraphC1Ev+0xd18>
 8006324:	08025d98 	.word	0x08025d98
 8006328:	08025d9c 	.word	0x08025d9c
 800632c:	3f99999a 	.word	0x3f99999a
 8006330:	08025da0 	.word	0x08025da0
 8006334:	3f71463a 	.word	0x3f71463a
 8006338:	f5a3 6307 	sub.w	r3, r3, #2160	; 0x870
 800633c:	f507 6280 	add.w	r2, r7, #1024	; 0x400
 8006340:	601a      	str	r2, [r3, #0]
 8006342:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006346:	f5a3 6307 	sub.w	r3, r3, #2160	; 0x870
 800634a:	2201      	movs	r2, #1
 800634c:	605a      	str	r2, [r3, #4]
 800634e:	f207 4304 	addw	r3, r7, #1028	; 0x404
 8006352:	4618      	mov	r0, r3
 8006354:	f01a ff27 	bl	80211a6 <_ZNSaIcEC1Ev>
 8006358:	f207 4304 	addw	r3, r7, #1028	; 0x404
 800635c:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8006360:	f5a2 6207 	sub.w	r2, r2, #2160	; 0x870
 8006364:	f507 707b 	add.w	r0, r7, #1004	; 0x3ec
 8006368:	ca06      	ldmia	r2, {r1, r2}
 800636a:	f006 fbdf 	bl	800cb2c <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 800636e:	f507 737b 	add.w	r3, r7, #1004	; 0x3ec
 8006372:	ed1f 0a10 	vldr	s0, [pc, #-64]	; 8006334 <_ZN3jlb5GraphC1Ev+0xd14>
 8006376:	2201      	movs	r2, #1
 8006378:	2147      	movs	r1, #71	; 0x47
 800637a:	4620      	mov	r0, r4
 800637c:	f7ff f8ff 	bl	800557e <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8006380:	f507 737b 	add.w	r3, r7, #1004	; 0x3ec
 8006384:	4618      	mov	r0, r3
 8006386:	f006 fb3f 	bl	800ca08 <_ZNSt6vectorIcSaIcEED1Ev>
 800638a:	f207 4304 	addw	r3, r7, #1028	; 0x404
 800638e:	4618      	mov	r0, r3
 8006390:	f01a ff0b 	bl	80211aa <_ZNSaIcED1Ev>
            this->operator[]('F').add_edge('C', Direction::RIGHT, {'D', 'G', 'I'}, QUARTER_CIRCLE);
 8006394:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006398:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 800639c:	2146      	movs	r1, #70	; 0x46
 800639e:	6818      	ldr	r0, [r3, #0]
 80063a0:	f002 fb71 	bl	8008a86 <_ZN3jlb5GraphixEc>
 80063a4:	4604      	mov	r4, r0
 80063a6:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80063aa:	f6a3 034c 	subw	r3, r3, #2124	; 0x84c
 80063ae:	4ae4      	ldr	r2, [pc, #912]	; (8006740 <_ZN3jlb5GraphC1Ev+0x1120>)
 80063b0:	6812      	ldr	r2, [r2, #0]
 80063b2:	4611      	mov	r1, r2
 80063b4:	8019      	strh	r1, [r3, #0]
 80063b6:	3302      	adds	r3, #2
 80063b8:	0c12      	lsrs	r2, r2, #16
 80063ba:	701a      	strb	r2, [r3, #0]
 80063bc:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80063c0:	f6a3 0354 	subw	r3, r3, #2132	; 0x854
 80063c4:	f207 421c 	addw	r2, r7, #1052	; 0x41c
 80063c8:	601a      	str	r2, [r3, #0]
 80063ca:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80063ce:	f6a3 0354 	subw	r3, r3, #2132	; 0x854
 80063d2:	2203      	movs	r2, #3
 80063d4:	605a      	str	r2, [r3, #4]
 80063d6:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 80063da:	4618      	mov	r0, r3
 80063dc:	f01a fee3 	bl	80211a6 <_ZNSaIcEC1Ev>
 80063e0:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 80063e4:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 80063e8:	f6a2 0254 	subw	r2, r2, #2132	; 0x854
 80063ec:	f507 6081 	add.w	r0, r7, #1032	; 0x408
 80063f0:	ca06      	ldmia	r2, {r1, r2}
 80063f2:	f006 fb9b 	bl	800cb2c <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 80063f6:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 80063fa:	ed9f 0ad2 	vldr	s0, [pc, #840]	; 8006744 <_ZN3jlb5GraphC1Ev+0x1124>
 80063fe:	2201      	movs	r2, #1
 8006400:	2143      	movs	r1, #67	; 0x43
 8006402:	4620      	mov	r0, r4
 8006404:	f7ff f8bb 	bl	800557e <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8006408:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 800640c:	4618      	mov	r0, r3
 800640e:	f006 fafb 	bl	800ca08 <_ZNSt6vectorIcSaIcEED1Ev>
 8006412:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8006416:	4618      	mov	r0, r3
 8006418:	f01a fec7 	bl	80211aa <_ZNSaIcED1Ev>
            this->operator[]('F').add_edge('D', Direction::LEFT, {'C', 'H'}, QUARTER_CIRCLE);
 800641c:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006420:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8006424:	2146      	movs	r1, #70	; 0x46
 8006426:	6818      	ldr	r0, [r3, #0]
 8006428:	f002 fb2d 	bl	8008a86 <_ZN3jlb5GraphixEc>
 800642c:	4604      	mov	r4, r0
 800642e:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006432:	f5a3 6303 	sub.w	r3, r3, #2096	; 0x830
 8006436:	4ac4      	ldr	r2, [pc, #784]	; (8006748 <_ZN3jlb5GraphC1Ev+0x1128>)
 8006438:	8812      	ldrh	r2, [r2, #0]
 800643a:	801a      	strh	r2, [r3, #0]
 800643c:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006440:	f6a3 0338 	subw	r3, r3, #2104	; 0x838
 8006444:	f507 6287 	add.w	r2, r7, #1080	; 0x438
 8006448:	601a      	str	r2, [r3, #0]
 800644a:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800644e:	f6a3 0338 	subw	r3, r3, #2104	; 0x838
 8006452:	2202      	movs	r2, #2
 8006454:	605a      	str	r2, [r3, #4]
 8006456:	f207 433c 	addw	r3, r7, #1084	; 0x43c
 800645a:	4618      	mov	r0, r3
 800645c:	f01a fea3 	bl	80211a6 <_ZNSaIcEC1Ev>
 8006460:	f207 433c 	addw	r3, r7, #1084	; 0x43c
 8006464:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8006468:	f6a2 0238 	subw	r2, r2, #2104	; 0x838
 800646c:	f207 4024 	addw	r0, r7, #1060	; 0x424
 8006470:	ca06      	ldmia	r2, {r1, r2}
 8006472:	f006 fb5b 	bl	800cb2c <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8006476:	f207 4324 	addw	r3, r7, #1060	; 0x424
 800647a:	ed9f 0ab2 	vldr	s0, [pc, #712]	; 8006744 <_ZN3jlb5GraphC1Ev+0x1124>
 800647e:	2200      	movs	r2, #0
 8006480:	2144      	movs	r1, #68	; 0x44
 8006482:	4620      	mov	r0, r4
 8006484:	f7ff f87b 	bl	800557e <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8006488:	f207 4324 	addw	r3, r7, #1060	; 0x424
 800648c:	4618      	mov	r0, r3
 800648e:	f006 fabb 	bl	800ca08 <_ZNSt6vectorIcSaIcEED1Ev>
 8006492:	f207 433c 	addw	r3, r7, #1084	; 0x43c
 8006496:	4618      	mov	r0, r3
 8006498:	f01a fe87 	bl	80211aa <_ZNSaIcED1Ev>
            this->operator[]('F').add_edge('G', Direction::STRAIGHT, {'C', 'H'}, 2.0f * UNIT);
 800649c:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80064a0:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 80064a4:	2146      	movs	r1, #70	; 0x46
 80064a6:	6818      	ldr	r0, [r3, #0]
 80064a8:	f002 faed 	bl	8008a86 <_ZN3jlb5GraphixEc>
 80064ac:	4604      	mov	r4, r0
 80064ae:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80064b2:	f6a3 0314 	subw	r3, r3, #2068	; 0x814
 80064b6:	4aa4      	ldr	r2, [pc, #656]	; (8006748 <_ZN3jlb5GraphC1Ev+0x1128>)
 80064b8:	8812      	ldrh	r2, [r2, #0]
 80064ba:	801a      	strh	r2, [r3, #0]
 80064bc:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80064c0:	f6a3 031c 	subw	r3, r3, #2076	; 0x81c
 80064c4:	f207 4254 	addw	r2, r7, #1108	; 0x454
 80064c8:	601a      	str	r2, [r3, #0]
 80064ca:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80064ce:	f6a3 031c 	subw	r3, r3, #2076	; 0x81c
 80064d2:	2202      	movs	r2, #2
 80064d4:	605a      	str	r2, [r3, #4]
 80064d6:	f507 638b 	add.w	r3, r7, #1112	; 0x458
 80064da:	4618      	mov	r0, r3
 80064dc:	f01a fe63 	bl	80211a6 <_ZNSaIcEC1Ev>
 80064e0:	f507 638b 	add.w	r3, r7, #1112	; 0x458
 80064e4:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 80064e8:	f6a2 021c 	subw	r2, r2, #2076	; 0x81c
 80064ec:	f507 6088 	add.w	r0, r7, #1088	; 0x440
 80064f0:	ca06      	ldmia	r2, {r1, r2}
 80064f2:	f006 fb1b 	bl	800cb2c <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 80064f6:	f507 6388 	add.w	r3, r7, #1088	; 0x440
 80064fa:	ed9f 0a94 	vldr	s0, [pc, #592]	; 800674c <_ZN3jlb5GraphC1Ev+0x112c>
 80064fe:	2202      	movs	r2, #2
 8006500:	2147      	movs	r1, #71	; 0x47
 8006502:	4620      	mov	r0, r4
 8006504:	f7ff f83b 	bl	800557e <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8006508:	f507 6388 	add.w	r3, r7, #1088	; 0x440
 800650c:	4618      	mov	r0, r3
 800650e:	f006 fa7b 	bl	800ca08 <_ZNSt6vectorIcSaIcEED1Ev>
 8006512:	f507 638b 	add.w	r3, r7, #1112	; 0x458
 8006516:	4618      	mov	r0, r3
 8006518:	f01a fe47 	bl	80211aa <_ZNSaIcED1Ev>
            this->operator[]('F').add_edge('I', Direction::RIGHT, {'C', 'H'}, QUARTER_CIRCLE);
 800651c:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006520:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8006524:	2146      	movs	r1, #70	; 0x46
 8006526:	6818      	ldr	r0, [r3, #0]
 8006528:	f002 faad 	bl	8008a86 <_ZN3jlb5GraphixEc>
 800652c:	4604      	mov	r4, r0
 800652e:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006532:	f5a3 63ff 	sub.w	r3, r3, #2040	; 0x7f8
 8006536:	4a84      	ldr	r2, [pc, #528]	; (8006748 <_ZN3jlb5GraphC1Ev+0x1128>)
 8006538:	8812      	ldrh	r2, [r2, #0]
 800653a:	801a      	strh	r2, [r3, #0]
 800653c:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006540:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 8006544:	f507 628e 	add.w	r2, r7, #1136	; 0x470
 8006548:	601a      	str	r2, [r3, #0]
 800654a:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800654e:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 8006552:	2202      	movs	r2, #2
 8006554:	605a      	str	r2, [r3, #4]
 8006556:	f207 4374 	addw	r3, r7, #1140	; 0x474
 800655a:	4618      	mov	r0, r3
 800655c:	f01a fe23 	bl	80211a6 <_ZNSaIcEC1Ev>
 8006560:	f207 4374 	addw	r3, r7, #1140	; 0x474
 8006564:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8006568:	f5a2 6200 	sub.w	r2, r2, #2048	; 0x800
 800656c:	f207 405c 	addw	r0, r7, #1116	; 0x45c
 8006570:	ca06      	ldmia	r2, {r1, r2}
 8006572:	f006 fadb 	bl	800cb2c <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8006576:	f207 435c 	addw	r3, r7, #1116	; 0x45c
 800657a:	ed9f 0a72 	vldr	s0, [pc, #456]	; 8006744 <_ZN3jlb5GraphC1Ev+0x1124>
 800657e:	2201      	movs	r2, #1
 8006580:	2149      	movs	r1, #73	; 0x49
 8006582:	4620      	mov	r0, r4
 8006584:	f7fe fffb 	bl	800557e <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8006588:	f207 435c 	addw	r3, r7, #1116	; 0x45c
 800658c:	4618      	mov	r0, r3
 800658e:	f006 fa3b 	bl	800ca08 <_ZNSt6vectorIcSaIcEED1Ev>
 8006592:	f207 4374 	addw	r3, r7, #1140	; 0x474
 8006596:	4618      	mov	r0, r3
 8006598:	f01a fe07 	bl	80211aa <_ZNSaIcED1Ev>
            this->operator[]('F').add_edge('H', Direction::LEFT, {'D', 'G', 'I'}, QUARTER_CIRCLE);
 800659c:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80065a0:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 80065a4:	2146      	movs	r1, #70	; 0x46
 80065a6:	6818      	ldr	r0, [r3, #0]
 80065a8:	f002 fa6d 	bl	8008a86 <_ZN3jlb5GraphixEc>
 80065ac:	4604      	mov	r4, r0
 80065ae:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80065b2:	f2a3 73dc 	subw	r3, r3, #2012	; 0x7dc
 80065b6:	4a62      	ldr	r2, [pc, #392]	; (8006740 <_ZN3jlb5GraphC1Ev+0x1120>)
 80065b8:	6812      	ldr	r2, [r2, #0]
 80065ba:	4611      	mov	r1, r2
 80065bc:	8019      	strh	r1, [r3, #0]
 80065be:	3302      	adds	r3, #2
 80065c0:	0c12      	lsrs	r2, r2, #16
 80065c2:	701a      	strb	r2, [r3, #0]
 80065c4:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80065c8:	f2a3 73e4 	subw	r3, r3, #2020	; 0x7e4
 80065cc:	f207 428c 	addw	r2, r7, #1164	; 0x48c
 80065d0:	601a      	str	r2, [r3, #0]
 80065d2:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80065d6:	f2a3 73e4 	subw	r3, r3, #2020	; 0x7e4
 80065da:	2203      	movs	r2, #3
 80065dc:	605a      	str	r2, [r3, #4]
 80065de:	f507 6392 	add.w	r3, r7, #1168	; 0x490
 80065e2:	4618      	mov	r0, r3
 80065e4:	f01a fddf 	bl	80211a6 <_ZNSaIcEC1Ev>
 80065e8:	f507 6392 	add.w	r3, r7, #1168	; 0x490
 80065ec:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 80065f0:	f2a2 72e4 	subw	r2, r2, #2020	; 0x7e4
 80065f4:	f507 608f 	add.w	r0, r7, #1144	; 0x478
 80065f8:	ca06      	ldmia	r2, {r1, r2}
 80065fa:	f006 fa97 	bl	800cb2c <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 80065fe:	f507 638f 	add.w	r3, r7, #1144	; 0x478
 8006602:	ed9f 0a50 	vldr	s0, [pc, #320]	; 8006744 <_ZN3jlb5GraphC1Ev+0x1124>
 8006606:	2200      	movs	r2, #0
 8006608:	2148      	movs	r1, #72	; 0x48
 800660a:	4620      	mov	r0, r4
 800660c:	f7fe ffb7 	bl	800557e <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8006610:	f507 638f 	add.w	r3, r7, #1144	; 0x478
 8006614:	4618      	mov	r0, r3
 8006616:	f006 f9f7 	bl	800ca08 <_ZNSt6vectorIcSaIcEED1Ev>
 800661a:	f507 6392 	add.w	r3, r7, #1168	; 0x490
 800661e:	4618      	mov	r0, r3
 8006620:	f01a fdc3 	bl	80211aa <_ZNSaIcED1Ev>
            this->operator[]('G').add_edge('F', Direction::STRAIGHT, {'E', 'J'}, 2.0f * UNIT);
 8006624:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006628:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 800662c:	2147      	movs	r1, #71	; 0x47
 800662e:	6818      	ldr	r0, [r3, #0]
 8006630:	f002 fa29 	bl	8008a86 <_ZN3jlb5GraphixEc>
 8006634:	4604      	mov	r4, r0
 8006636:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800663a:	f5a3 63f8 	sub.w	r3, r3, #1984	; 0x7c0
 800663e:	4a44      	ldr	r2, [pc, #272]	; (8006750 <_ZN3jlb5GraphC1Ev+0x1130>)
 8006640:	8812      	ldrh	r2, [r2, #0]
 8006642:	801a      	strh	r2, [r3, #0]
 8006644:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006648:	f5a3 63f9 	sub.w	r3, r3, #1992	; 0x7c8
 800664c:	f507 6295 	add.w	r2, r7, #1192	; 0x4a8
 8006650:	601a      	str	r2, [r3, #0]
 8006652:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006656:	f5a3 63f9 	sub.w	r3, r3, #1992	; 0x7c8
 800665a:	2202      	movs	r2, #2
 800665c:	605a      	str	r2, [r3, #4]
 800665e:	f207 43ac 	addw	r3, r7, #1196	; 0x4ac
 8006662:	4618      	mov	r0, r3
 8006664:	f01a fd9f 	bl	80211a6 <_ZNSaIcEC1Ev>
 8006668:	f207 43ac 	addw	r3, r7, #1196	; 0x4ac
 800666c:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8006670:	f5a2 62f9 	sub.w	r2, r2, #1992	; 0x7c8
 8006674:	f207 4094 	addw	r0, r7, #1172	; 0x494
 8006678:	ca06      	ldmia	r2, {r1, r2}
 800667a:	f006 fa57 	bl	800cb2c <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 800667e:	f207 4394 	addw	r3, r7, #1172	; 0x494
 8006682:	ed9f 0a32 	vldr	s0, [pc, #200]	; 800674c <_ZN3jlb5GraphC1Ev+0x112c>
 8006686:	2202      	movs	r2, #2
 8006688:	2146      	movs	r1, #70	; 0x46
 800668a:	4620      	mov	r0, r4
 800668c:	f7fe ff77 	bl	800557e <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8006690:	f207 4394 	addw	r3, r7, #1172	; 0x494
 8006694:	4618      	mov	r0, r3
 8006696:	f006 f9b7 	bl	800ca08 <_ZNSt6vectorIcSaIcEED1Ev>
 800669a:	f207 43ac 	addw	r3, r7, #1196	; 0x4ac
 800669e:	4618      	mov	r0, r3
 80066a0:	f01a fd83 	bl	80211aa <_ZNSaIcED1Ev>
            this->operator[]('G').add_edge('D', Direction::RIGHT, {'E', 'J'}, QUARTER_CIRCLE);
 80066a4:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80066a8:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 80066ac:	2147      	movs	r1, #71	; 0x47
 80066ae:	6818      	ldr	r0, [r3, #0]
 80066b0:	f002 f9e9 	bl	8008a86 <_ZN3jlb5GraphixEc>
 80066b4:	4604      	mov	r4, r0
 80066b6:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80066ba:	f2a3 73a4 	subw	r3, r3, #1956	; 0x7a4
 80066be:	4a24      	ldr	r2, [pc, #144]	; (8006750 <_ZN3jlb5GraphC1Ev+0x1130>)
 80066c0:	8812      	ldrh	r2, [r2, #0]
 80066c2:	801a      	strh	r2, [r3, #0]
 80066c4:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80066c8:	f2a3 73ac 	subw	r3, r3, #1964	; 0x7ac
 80066cc:	f207 42c4 	addw	r2, r7, #1220	; 0x4c4
 80066d0:	601a      	str	r2, [r3, #0]
 80066d2:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80066d6:	f2a3 73ac 	subw	r3, r3, #1964	; 0x7ac
 80066da:	2202      	movs	r2, #2
 80066dc:	605a      	str	r2, [r3, #4]
 80066de:	f507 6399 	add.w	r3, r7, #1224	; 0x4c8
 80066e2:	4618      	mov	r0, r3
 80066e4:	f01a fd5f 	bl	80211a6 <_ZNSaIcEC1Ev>
 80066e8:	f507 6399 	add.w	r3, r7, #1224	; 0x4c8
 80066ec:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 80066f0:	f2a2 72ac 	subw	r2, r2, #1964	; 0x7ac
 80066f4:	f507 6096 	add.w	r0, r7, #1200	; 0x4b0
 80066f8:	ca06      	ldmia	r2, {r1, r2}
 80066fa:	f006 fa17 	bl	800cb2c <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 80066fe:	f507 6396 	add.w	r3, r7, #1200	; 0x4b0
 8006702:	ed9f 0a10 	vldr	s0, [pc, #64]	; 8006744 <_ZN3jlb5GraphC1Ev+0x1124>
 8006706:	2201      	movs	r2, #1
 8006708:	2144      	movs	r1, #68	; 0x44
 800670a:	4620      	mov	r0, r4
 800670c:	f7fe ff37 	bl	800557e <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8006710:	f507 6396 	add.w	r3, r7, #1200	; 0x4b0
 8006714:	4618      	mov	r0, r3
 8006716:	f006 f977 	bl	800ca08 <_ZNSt6vectorIcSaIcEED1Ev>
 800671a:	f507 6399 	add.w	r3, r7, #1224	; 0x4c8
 800671e:	4618      	mov	r0, r3
 8006720:	f01a fd43 	bl	80211aa <_ZNSaIcED1Ev>
            this->operator[]('G').add_edge('E', Direction::LEFT, {'D', 'F', 'I'}, QUARTER_CIRCLE);
 8006724:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006728:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 800672c:	2147      	movs	r1, #71	; 0x47
 800672e:	6818      	ldr	r0, [r3, #0]
 8006730:	f002 f9a9 	bl	8008a86 <_ZN3jlb5GraphixEc>
 8006734:	4604      	mov	r4, r0
 8006736:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800673a:	f5a3 63f1 	sub.w	r3, r3, #1928	; 0x788
 800673e:	e009      	b.n	8006754 <_ZN3jlb5GraphC1Ev+0x1134>
 8006740:	08025da4 	.word	0x08025da4
 8006744:	3f71463a 	.word	0x3f71463a
 8006748:	08025da8 	.word	0x08025da8
 800674c:	3f99999a 	.word	0x3f99999a
 8006750:	08025dac 	.word	0x08025dac
 8006754:	4ae6      	ldr	r2, [pc, #920]	; (8006af0 <_ZN3jlb5GraphC1Ev+0x14d0>)
 8006756:	6812      	ldr	r2, [r2, #0]
 8006758:	4611      	mov	r1, r2
 800675a:	8019      	strh	r1, [r3, #0]
 800675c:	3302      	adds	r3, #2
 800675e:	0c12      	lsrs	r2, r2, #16
 8006760:	701a      	strb	r2, [r3, #0]
 8006762:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006766:	f5a3 63f2 	sub.w	r3, r3, #1936	; 0x790
 800676a:	f507 629c 	add.w	r2, r7, #1248	; 0x4e0
 800676e:	601a      	str	r2, [r3, #0]
 8006770:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006774:	f5a3 63f2 	sub.w	r3, r3, #1936	; 0x790
 8006778:	2203      	movs	r2, #3
 800677a:	605a      	str	r2, [r3, #4]
 800677c:	f207 43e4 	addw	r3, r7, #1252	; 0x4e4
 8006780:	4618      	mov	r0, r3
 8006782:	f01a fd10 	bl	80211a6 <_ZNSaIcEC1Ev>
 8006786:	f207 43e4 	addw	r3, r7, #1252	; 0x4e4
 800678a:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 800678e:	f5a2 62f2 	sub.w	r2, r2, #1936	; 0x790
 8006792:	f207 40cc 	addw	r0, r7, #1228	; 0x4cc
 8006796:	ca06      	ldmia	r2, {r1, r2}
 8006798:	f006 f9c8 	bl	800cb2c <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 800679c:	f207 43cc 	addw	r3, r7, #1228	; 0x4cc
 80067a0:	ed9f 0ad4 	vldr	s0, [pc, #848]	; 8006af4 <_ZN3jlb5GraphC1Ev+0x14d4>
 80067a4:	2200      	movs	r2, #0
 80067a6:	2145      	movs	r1, #69	; 0x45
 80067a8:	4620      	mov	r0, r4
 80067aa:	f7fe fee8 	bl	800557e <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 80067ae:	f207 43cc 	addw	r3, r7, #1228	; 0x4cc
 80067b2:	4618      	mov	r0, r3
 80067b4:	f006 f928 	bl	800ca08 <_ZNSt6vectorIcSaIcEED1Ev>
 80067b8:	f207 43e4 	addw	r3, r7, #1252	; 0x4e4
 80067bc:	4618      	mov	r0, r3
 80067be:	f01a fcf4 	bl	80211aa <_ZNSaIcED1Ev>
            this->operator[]('G').add_edge('J', Direction::RIGHT, {'D', 'F', 'I'}, QUARTER_CIRCLE);
 80067c2:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80067c6:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 80067ca:	2147      	movs	r1, #71	; 0x47
 80067cc:	6818      	ldr	r0, [r3, #0]
 80067ce:	f002 f95a 	bl	8008a86 <_ZN3jlb5GraphixEc>
 80067d2:	4604      	mov	r4, r0
 80067d4:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80067d8:	f2a3 736c 	subw	r3, r3, #1900	; 0x76c
 80067dc:	4ac4      	ldr	r2, [pc, #784]	; (8006af0 <_ZN3jlb5GraphC1Ev+0x14d0>)
 80067de:	6812      	ldr	r2, [r2, #0]
 80067e0:	4611      	mov	r1, r2
 80067e2:	8019      	strh	r1, [r3, #0]
 80067e4:	3302      	adds	r3, #2
 80067e6:	0c12      	lsrs	r2, r2, #16
 80067e8:	701a      	strb	r2, [r3, #0]
 80067ea:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80067ee:	f2a3 7374 	subw	r3, r3, #1908	; 0x774
 80067f2:	f207 42fc 	addw	r2, r7, #1276	; 0x4fc
 80067f6:	601a      	str	r2, [r3, #0]
 80067f8:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80067fc:	f2a3 7374 	subw	r3, r3, #1908	; 0x774
 8006800:	2203      	movs	r2, #3
 8006802:	605a      	str	r2, [r3, #4]
 8006804:	f507 63a0 	add.w	r3, r7, #1280	; 0x500
 8006808:	4618      	mov	r0, r3
 800680a:	f01a fccc 	bl	80211a6 <_ZNSaIcEC1Ev>
 800680e:	f507 63a0 	add.w	r3, r7, #1280	; 0x500
 8006812:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8006816:	f2a2 7274 	subw	r2, r2, #1908	; 0x774
 800681a:	f507 609d 	add.w	r0, r7, #1256	; 0x4e8
 800681e:	ca06      	ldmia	r2, {r1, r2}
 8006820:	f006 f984 	bl	800cb2c <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8006824:	f507 639d 	add.w	r3, r7, #1256	; 0x4e8
 8006828:	ed9f 0ab2 	vldr	s0, [pc, #712]	; 8006af4 <_ZN3jlb5GraphC1Ev+0x14d4>
 800682c:	2201      	movs	r2, #1
 800682e:	214a      	movs	r1, #74	; 0x4a
 8006830:	4620      	mov	r0, r4
 8006832:	f7fe fea4 	bl	800557e <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8006836:	f507 639d 	add.w	r3, r7, #1256	; 0x4e8
 800683a:	4618      	mov	r0, r3
 800683c:	f006 f8e4 	bl	800ca08 <_ZNSt6vectorIcSaIcEED1Ev>
 8006840:	f507 63a0 	add.w	r3, r7, #1280	; 0x500
 8006844:	4618      	mov	r0, r3
 8006846:	f01a fcb0 	bl	80211aa <_ZNSaIcED1Ev>
            this->operator[]('G').add_edge('I', Direction::LEFT, {'E', 'J'}, QUARTER_CIRCLE);
 800684a:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800684e:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8006852:	2147      	movs	r1, #71	; 0x47
 8006854:	6818      	ldr	r0, [r3, #0]
 8006856:	f002 f916 	bl	8008a86 <_ZN3jlb5GraphixEc>
 800685a:	4604      	mov	r4, r0
 800685c:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006860:	f5a3 63ea 	sub.w	r3, r3, #1872	; 0x750
 8006864:	4aa4      	ldr	r2, [pc, #656]	; (8006af8 <_ZN3jlb5GraphC1Ev+0x14d8>)
 8006866:	8812      	ldrh	r2, [r2, #0]
 8006868:	801a      	strh	r2, [r3, #0]
 800686a:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800686e:	f5a3 63eb 	sub.w	r3, r3, #1880	; 0x758
 8006872:	f507 62a3 	add.w	r2, r7, #1304	; 0x518
 8006876:	601a      	str	r2, [r3, #0]
 8006878:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800687c:	f5a3 63eb 	sub.w	r3, r3, #1880	; 0x758
 8006880:	2202      	movs	r2, #2
 8006882:	605a      	str	r2, [r3, #4]
 8006884:	f207 531c 	addw	r3, r7, #1308	; 0x51c
 8006888:	4618      	mov	r0, r3
 800688a:	f01a fc8c 	bl	80211a6 <_ZNSaIcEC1Ev>
 800688e:	f207 531c 	addw	r3, r7, #1308	; 0x51c
 8006892:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8006896:	f5a2 62eb 	sub.w	r2, r2, #1880	; 0x758
 800689a:	f207 5004 	addw	r0, r7, #1284	; 0x504
 800689e:	ca06      	ldmia	r2, {r1, r2}
 80068a0:	f006 f944 	bl	800cb2c <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 80068a4:	f207 5304 	addw	r3, r7, #1284	; 0x504
 80068a8:	ed9f 0a92 	vldr	s0, [pc, #584]	; 8006af4 <_ZN3jlb5GraphC1Ev+0x14d4>
 80068ac:	2200      	movs	r2, #0
 80068ae:	2149      	movs	r1, #73	; 0x49
 80068b0:	4620      	mov	r0, r4
 80068b2:	f7fe fe64 	bl	800557e <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 80068b6:	f207 5304 	addw	r3, r7, #1284	; 0x504
 80068ba:	4618      	mov	r0, r3
 80068bc:	f006 f8a4 	bl	800ca08 <_ZNSt6vectorIcSaIcEED1Ev>
 80068c0:	f207 531c 	addw	r3, r7, #1308	; 0x51c
 80068c4:	4618      	mov	r0, r3
 80068c6:	f01a fc70 	bl	80211aa <_ZNSaIcED1Ev>
            this->operator[]('H').add_edge('F', Direction::RIGHT, {'K', 'M'}, QUARTER_CIRCLE);
 80068ca:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80068ce:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 80068d2:	2148      	movs	r1, #72	; 0x48
 80068d4:	6818      	ldr	r0, [r3, #0]
 80068d6:	f002 f8d6 	bl	8008a86 <_ZN3jlb5GraphixEc>
 80068da:	4604      	mov	r4, r0
 80068dc:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80068e0:	f2a3 7334 	subw	r3, r3, #1844	; 0x734
 80068e4:	4a85      	ldr	r2, [pc, #532]	; (8006afc <_ZN3jlb5GraphC1Ev+0x14dc>)
 80068e6:	8812      	ldrh	r2, [r2, #0]
 80068e8:	801a      	strh	r2, [r3, #0]
 80068ea:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80068ee:	f2a3 733c 	subw	r3, r3, #1852	; 0x73c
 80068f2:	f207 5234 	addw	r2, r7, #1332	; 0x534
 80068f6:	601a      	str	r2, [r3, #0]
 80068f8:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80068fc:	f2a3 733c 	subw	r3, r3, #1852	; 0x73c
 8006900:	2202      	movs	r2, #2
 8006902:	605a      	str	r2, [r3, #4]
 8006904:	f507 63a7 	add.w	r3, r7, #1336	; 0x538
 8006908:	4618      	mov	r0, r3
 800690a:	f01a fc4c 	bl	80211a6 <_ZNSaIcEC1Ev>
 800690e:	f507 63a7 	add.w	r3, r7, #1336	; 0x538
 8006912:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8006916:	f2a2 723c 	subw	r2, r2, #1852	; 0x73c
 800691a:	f507 60a4 	add.w	r0, r7, #1312	; 0x520
 800691e:	ca06      	ldmia	r2, {r1, r2}
 8006920:	f006 f904 	bl	800cb2c <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8006924:	f507 63a4 	add.w	r3, r7, #1312	; 0x520
 8006928:	ed9f 0a72 	vldr	s0, [pc, #456]	; 8006af4 <_ZN3jlb5GraphC1Ev+0x14d4>
 800692c:	2201      	movs	r2, #1
 800692e:	2146      	movs	r1, #70	; 0x46
 8006930:	4620      	mov	r0, r4
 8006932:	f7fe fe24 	bl	800557e <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8006936:	f507 63a4 	add.w	r3, r7, #1312	; 0x520
 800693a:	4618      	mov	r0, r3
 800693c:	f006 f864 	bl	800ca08 <_ZNSt6vectorIcSaIcEED1Ev>
 8006940:	f507 63a7 	add.w	r3, r7, #1336	; 0x538
 8006944:	4618      	mov	r0, r3
 8006946:	f01a fc30 	bl	80211aa <_ZNSaIcED1Ev>
            this->operator[]('H').add_edge('K', Direction::LEFT, {'F'}, QUARTER_CIRCLE);
 800694a:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800694e:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8006952:	2148      	movs	r1, #72	; 0x48
 8006954:	6818      	ldr	r0, [r3, #0]
 8006956:	f002 f896 	bl	8008a86 <_ZN3jlb5GraphixEc>
 800695a:	4604      	mov	r4, r0
 800695c:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006960:	f5a3 63e3 	sub.w	r3, r3, #1816	; 0x718
 8006964:	2246      	movs	r2, #70	; 0x46
 8006966:	701a      	strb	r2, [r3, #0]
 8006968:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800696c:	f5a3 63e4 	sub.w	r3, r3, #1824	; 0x720
 8006970:	f507 62aa 	add.w	r2, r7, #1360	; 0x550
 8006974:	601a      	str	r2, [r3, #0]
 8006976:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800697a:	f5a3 63e4 	sub.w	r3, r3, #1824	; 0x720
 800697e:	2201      	movs	r2, #1
 8006980:	605a      	str	r2, [r3, #4]
 8006982:	f207 5354 	addw	r3, r7, #1364	; 0x554
 8006986:	4618      	mov	r0, r3
 8006988:	f01a fc0d 	bl	80211a6 <_ZNSaIcEC1Ev>
 800698c:	f207 5354 	addw	r3, r7, #1364	; 0x554
 8006990:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8006994:	f5a2 62e4 	sub.w	r2, r2, #1824	; 0x720
 8006998:	f207 503c 	addw	r0, r7, #1340	; 0x53c
 800699c:	ca06      	ldmia	r2, {r1, r2}
 800699e:	f006 f8c5 	bl	800cb2c <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 80069a2:	f207 533c 	addw	r3, r7, #1340	; 0x53c
 80069a6:	ed9f 0a53 	vldr	s0, [pc, #332]	; 8006af4 <_ZN3jlb5GraphC1Ev+0x14d4>
 80069aa:	2200      	movs	r2, #0
 80069ac:	214b      	movs	r1, #75	; 0x4b
 80069ae:	4620      	mov	r0, r4
 80069b0:	f7fe fde5 	bl	800557e <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 80069b4:	f207 533c 	addw	r3, r7, #1340	; 0x53c
 80069b8:	4618      	mov	r0, r3
 80069ba:	f006 f825 	bl	800ca08 <_ZNSt6vectorIcSaIcEED1Ev>
 80069be:	f207 5354 	addw	r3, r7, #1364	; 0x554
 80069c2:	4618      	mov	r0, r3
 80069c4:	f01a fbf1 	bl	80211aa <_ZNSaIcED1Ev>
            this->operator[]('H').add_edge('M', Direction::STRAIGHT, {'F'}, 2.0f * UNIT);
 80069c8:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80069cc:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 80069d0:	2148      	movs	r1, #72	; 0x48
 80069d2:	6818      	ldr	r0, [r3, #0]
 80069d4:	f002 f857 	bl	8008a86 <_ZN3jlb5GraphixEc>
 80069d8:	4604      	mov	r4, r0
 80069da:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80069de:	f2a3 63fc 	subw	r3, r3, #1788	; 0x6fc
 80069e2:	2246      	movs	r2, #70	; 0x46
 80069e4:	701a      	strb	r2, [r3, #0]
 80069e6:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80069ea:	f2a3 7304 	subw	r3, r3, #1796	; 0x704
 80069ee:	f207 526c 	addw	r2, r7, #1388	; 0x56c
 80069f2:	601a      	str	r2, [r3, #0]
 80069f4:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80069f8:	f2a3 7304 	subw	r3, r3, #1796	; 0x704
 80069fc:	2201      	movs	r2, #1
 80069fe:	605a      	str	r2, [r3, #4]
 8006a00:	f507 63ae 	add.w	r3, r7, #1392	; 0x570
 8006a04:	4618      	mov	r0, r3
 8006a06:	f01a fbce 	bl	80211a6 <_ZNSaIcEC1Ev>
 8006a0a:	f507 63ae 	add.w	r3, r7, #1392	; 0x570
 8006a0e:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8006a12:	f2a2 7204 	subw	r2, r2, #1796	; 0x704
 8006a16:	f507 60ab 	add.w	r0, r7, #1368	; 0x558
 8006a1a:	ca06      	ldmia	r2, {r1, r2}
 8006a1c:	f006 f886 	bl	800cb2c <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8006a20:	f507 63ab 	add.w	r3, r7, #1368	; 0x558
 8006a24:	ed9f 0a37 	vldr	s0, [pc, #220]	; 8006b04 <_ZN3jlb5GraphC1Ev+0x14e4>
 8006a28:	2202      	movs	r2, #2
 8006a2a:	214d      	movs	r1, #77	; 0x4d
 8006a2c:	4620      	mov	r0, r4
 8006a2e:	f7fe fda6 	bl	800557e <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8006a32:	f507 63ab 	add.w	r3, r7, #1368	; 0x558
 8006a36:	4618      	mov	r0, r3
 8006a38:	f005 ffe6 	bl	800ca08 <_ZNSt6vectorIcSaIcEED1Ev>
 8006a3c:	f507 63ae 	add.w	r3, r7, #1392	; 0x570
 8006a40:	4618      	mov	r0, r3
 8006a42:	f01a fbb2 	bl	80211aa <_ZNSaIcED1Ev>
            this->operator[]('I').add_edge('F', Direction::LEFT, {'K', 'L', 'N'}, QUARTER_CIRCLE);
 8006a46:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006a4a:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8006a4e:	2149      	movs	r1, #73	; 0x49
 8006a50:	6818      	ldr	r0, [r3, #0]
 8006a52:	f002 f818 	bl	8008a86 <_ZN3jlb5GraphixEc>
 8006a56:	4604      	mov	r4, r0
 8006a58:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006a5c:	f5a3 63dc 	sub.w	r3, r3, #1760	; 0x6e0
 8006a60:	4a27      	ldr	r2, [pc, #156]	; (8006b00 <_ZN3jlb5GraphC1Ev+0x14e0>)
 8006a62:	6812      	ldr	r2, [r2, #0]
 8006a64:	4611      	mov	r1, r2
 8006a66:	8019      	strh	r1, [r3, #0]
 8006a68:	3302      	adds	r3, #2
 8006a6a:	0c12      	lsrs	r2, r2, #16
 8006a6c:	701a      	strb	r2, [r3, #0]
 8006a6e:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006a72:	f5a3 63dd 	sub.w	r3, r3, #1768	; 0x6e8
 8006a76:	f507 62b1 	add.w	r2, r7, #1416	; 0x588
 8006a7a:	601a      	str	r2, [r3, #0]
 8006a7c:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006a80:	f5a3 63dd 	sub.w	r3, r3, #1768	; 0x6e8
 8006a84:	2203      	movs	r2, #3
 8006a86:	605a      	str	r2, [r3, #4]
 8006a88:	f207 538c 	addw	r3, r7, #1420	; 0x58c
 8006a8c:	4618      	mov	r0, r3
 8006a8e:	f01a fb8a 	bl	80211a6 <_ZNSaIcEC1Ev>
 8006a92:	f207 538c 	addw	r3, r7, #1420	; 0x58c
 8006a96:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8006a9a:	f5a2 62dd 	sub.w	r2, r2, #1768	; 0x6e8
 8006a9e:	f207 5074 	addw	r0, r7, #1396	; 0x574
 8006aa2:	ca06      	ldmia	r2, {r1, r2}
 8006aa4:	f006 f842 	bl	800cb2c <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8006aa8:	f207 5374 	addw	r3, r7, #1396	; 0x574
 8006aac:	ed9f 0a11 	vldr	s0, [pc, #68]	; 8006af4 <_ZN3jlb5GraphC1Ev+0x14d4>
 8006ab0:	2200      	movs	r2, #0
 8006ab2:	2146      	movs	r1, #70	; 0x46
 8006ab4:	4620      	mov	r0, r4
 8006ab6:	f7fe fd62 	bl	800557e <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8006aba:	f207 5374 	addw	r3, r7, #1396	; 0x574
 8006abe:	4618      	mov	r0, r3
 8006ac0:	f005 ffa2 	bl	800ca08 <_ZNSt6vectorIcSaIcEED1Ev>
 8006ac4:	f207 538c 	addw	r3, r7, #1420	; 0x58c
 8006ac8:	4618      	mov	r0, r3
 8006aca:	f01a fb6e 	bl	80211aa <_ZNSaIcED1Ev>
            this->operator[]('I').add_edge('D', Direction::STRAIGHT, {'K', 'L', 'N'}, 2.0f * UNIT);
 8006ace:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006ad2:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8006ad6:	2149      	movs	r1, #73	; 0x49
 8006ad8:	6818      	ldr	r0, [r3, #0]
 8006ada:	f001 ffd4 	bl	8008a86 <_ZN3jlb5GraphixEc>
 8006ade:	4604      	mov	r4, r0
 8006ae0:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006ae4:	f2a3 63c4 	subw	r3, r3, #1732	; 0x6c4
 8006ae8:	4a05      	ldr	r2, [pc, #20]	; (8006b00 <_ZN3jlb5GraphC1Ev+0x14e0>)
 8006aea:	6812      	ldr	r2, [r2, #0]
 8006aec:	4611      	mov	r1, r2
 8006aee:	e00b      	b.n	8006b08 <_ZN3jlb5GraphC1Ev+0x14e8>
 8006af0:	08025db0 	.word	0x08025db0
 8006af4:	3f71463a 	.word	0x3f71463a
 8006af8:	08025dac 	.word	0x08025dac
 8006afc:	08025db4 	.word	0x08025db4
 8006b00:	08025db8 	.word	0x08025db8
 8006b04:	3f99999a 	.word	0x3f99999a
 8006b08:	8019      	strh	r1, [r3, #0]
 8006b0a:	3302      	adds	r3, #2
 8006b0c:	0c12      	lsrs	r2, r2, #16
 8006b0e:	701a      	strb	r2, [r3, #0]
 8006b10:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006b14:	f2a3 63cc 	subw	r3, r3, #1740	; 0x6cc
 8006b18:	f207 52a4 	addw	r2, r7, #1444	; 0x5a4
 8006b1c:	601a      	str	r2, [r3, #0]
 8006b1e:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006b22:	f2a3 63cc 	subw	r3, r3, #1740	; 0x6cc
 8006b26:	2203      	movs	r2, #3
 8006b28:	605a      	str	r2, [r3, #4]
 8006b2a:	f507 63b5 	add.w	r3, r7, #1448	; 0x5a8
 8006b2e:	4618      	mov	r0, r3
 8006b30:	f01a fb39 	bl	80211a6 <_ZNSaIcEC1Ev>
 8006b34:	f507 63b5 	add.w	r3, r7, #1448	; 0x5a8
 8006b38:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8006b3c:	f2a2 62cc 	subw	r2, r2, #1740	; 0x6cc
 8006b40:	f507 60b2 	add.w	r0, r7, #1424	; 0x590
 8006b44:	ca06      	ldmia	r2, {r1, r2}
 8006b46:	f005 fff1 	bl	800cb2c <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8006b4a:	f507 63b2 	add.w	r3, r7, #1424	; 0x590
 8006b4e:	ed1f 0a13 	vldr	s0, [pc, #-76]	; 8006b04 <_ZN3jlb5GraphC1Ev+0x14e4>
 8006b52:	2202      	movs	r2, #2
 8006b54:	2144      	movs	r1, #68	; 0x44
 8006b56:	4620      	mov	r0, r4
 8006b58:	f7fe fd11 	bl	800557e <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8006b5c:	f507 63b2 	add.w	r3, r7, #1424	; 0x590
 8006b60:	4618      	mov	r0, r3
 8006b62:	f005 ff51 	bl	800ca08 <_ZNSt6vectorIcSaIcEED1Ev>
 8006b66:	f507 63b5 	add.w	r3, r7, #1448	; 0x5a8
 8006b6a:	4618      	mov	r0, r3
 8006b6c:	f01a fb1d 	bl	80211aa <_ZNSaIcED1Ev>
            this->operator[]('I').add_edge('G', Direction::RIGHT, {'K', 'L', 'N'}, QUARTER_CIRCLE);
 8006b70:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006b74:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8006b78:	2149      	movs	r1, #73	; 0x49
 8006b7a:	6818      	ldr	r0, [r3, #0]
 8006b7c:	f001 ff83 	bl	8008a86 <_ZN3jlb5GraphixEc>
 8006b80:	4604      	mov	r4, r0
 8006b82:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006b86:	f5a3 63d5 	sub.w	r3, r3, #1704	; 0x6a8
 8006b8a:	4ae7      	ldr	r2, [pc, #924]	; (8006f28 <_ZN3jlb5GraphC1Ev+0x1908>)
 8006b8c:	6812      	ldr	r2, [r2, #0]
 8006b8e:	4611      	mov	r1, r2
 8006b90:	8019      	strh	r1, [r3, #0]
 8006b92:	3302      	adds	r3, #2
 8006b94:	0c12      	lsrs	r2, r2, #16
 8006b96:	701a      	strb	r2, [r3, #0]
 8006b98:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006b9c:	f5a3 63d6 	sub.w	r3, r3, #1712	; 0x6b0
 8006ba0:	f507 62b8 	add.w	r2, r7, #1472	; 0x5c0
 8006ba4:	601a      	str	r2, [r3, #0]
 8006ba6:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006baa:	f5a3 63d6 	sub.w	r3, r3, #1712	; 0x6b0
 8006bae:	2203      	movs	r2, #3
 8006bb0:	605a      	str	r2, [r3, #4]
 8006bb2:	f207 53c4 	addw	r3, r7, #1476	; 0x5c4
 8006bb6:	4618      	mov	r0, r3
 8006bb8:	f01a faf5 	bl	80211a6 <_ZNSaIcEC1Ev>
 8006bbc:	f207 53c4 	addw	r3, r7, #1476	; 0x5c4
 8006bc0:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8006bc4:	f5a2 62d6 	sub.w	r2, r2, #1712	; 0x6b0
 8006bc8:	f207 50ac 	addw	r0, r7, #1452	; 0x5ac
 8006bcc:	ca06      	ldmia	r2, {r1, r2}
 8006bce:	f005 ffad 	bl	800cb2c <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8006bd2:	f207 53ac 	addw	r3, r7, #1452	; 0x5ac
 8006bd6:	ed9f 0ad5 	vldr	s0, [pc, #852]	; 8006f2c <_ZN3jlb5GraphC1Ev+0x190c>
 8006bda:	2201      	movs	r2, #1
 8006bdc:	2147      	movs	r1, #71	; 0x47
 8006bde:	4620      	mov	r0, r4
 8006be0:	f7fe fccd 	bl	800557e <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8006be4:	f207 53ac 	addw	r3, r7, #1452	; 0x5ac
 8006be8:	4618      	mov	r0, r3
 8006bea:	f005 ff0d 	bl	800ca08 <_ZNSt6vectorIcSaIcEED1Ev>
 8006bee:	f207 53c4 	addw	r3, r7, #1476	; 0x5c4
 8006bf2:	4618      	mov	r0, r3
 8006bf4:	f01a fad9 	bl	80211aa <_ZNSaIcED1Ev>
            this->operator[]('I').add_edge('L', Direction::LEFT, {'D', 'F', 'G'}, QUARTER_CIRCLE);
 8006bf8:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006bfc:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8006c00:	2149      	movs	r1, #73	; 0x49
 8006c02:	6818      	ldr	r0, [r3, #0]
 8006c04:	f001 ff3f 	bl	8008a86 <_ZN3jlb5GraphixEc>
 8006c08:	4604      	mov	r4, r0
 8006c0a:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006c0e:	f2a3 638c 	subw	r3, r3, #1676	; 0x68c
 8006c12:	4ac7      	ldr	r2, [pc, #796]	; (8006f30 <_ZN3jlb5GraphC1Ev+0x1910>)
 8006c14:	6812      	ldr	r2, [r2, #0]
 8006c16:	4611      	mov	r1, r2
 8006c18:	8019      	strh	r1, [r3, #0]
 8006c1a:	3302      	adds	r3, #2
 8006c1c:	0c12      	lsrs	r2, r2, #16
 8006c1e:	701a      	strb	r2, [r3, #0]
 8006c20:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006c24:	f2a3 6394 	subw	r3, r3, #1684	; 0x694
 8006c28:	f207 52dc 	addw	r2, r7, #1500	; 0x5dc
 8006c2c:	601a      	str	r2, [r3, #0]
 8006c2e:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006c32:	f2a3 6394 	subw	r3, r3, #1684	; 0x694
 8006c36:	2203      	movs	r2, #3
 8006c38:	605a      	str	r2, [r3, #4]
 8006c3a:	f507 63bc 	add.w	r3, r7, #1504	; 0x5e0
 8006c3e:	4618      	mov	r0, r3
 8006c40:	f01a fab1 	bl	80211a6 <_ZNSaIcEC1Ev>
 8006c44:	f507 63bc 	add.w	r3, r7, #1504	; 0x5e0
 8006c48:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8006c4c:	f2a2 6294 	subw	r2, r2, #1684	; 0x694
 8006c50:	f507 60b9 	add.w	r0, r7, #1480	; 0x5c8
 8006c54:	ca06      	ldmia	r2, {r1, r2}
 8006c56:	f005 ff69 	bl	800cb2c <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8006c5a:	f507 63b9 	add.w	r3, r7, #1480	; 0x5c8
 8006c5e:	ed9f 0ab3 	vldr	s0, [pc, #716]	; 8006f2c <_ZN3jlb5GraphC1Ev+0x190c>
 8006c62:	2200      	movs	r2, #0
 8006c64:	214c      	movs	r1, #76	; 0x4c
 8006c66:	4620      	mov	r0, r4
 8006c68:	f7fe fc89 	bl	800557e <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8006c6c:	f507 63b9 	add.w	r3, r7, #1480	; 0x5c8
 8006c70:	4618      	mov	r0, r3
 8006c72:	f005 fec9 	bl	800ca08 <_ZNSt6vectorIcSaIcEED1Ev>
 8006c76:	f507 63bc 	add.w	r3, r7, #1504	; 0x5e0
 8006c7a:	4618      	mov	r0, r3
 8006c7c:	f01a fa95 	bl	80211aa <_ZNSaIcED1Ev>
            this->operator[]('I').add_edge('N', Direction::STRAIGHT, {'D', 'F', 'G'}, 2.0f * UNIT);
 8006c80:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006c84:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8006c88:	2149      	movs	r1, #73	; 0x49
 8006c8a:	6818      	ldr	r0, [r3, #0]
 8006c8c:	f001 fefb 	bl	8008a86 <_ZN3jlb5GraphixEc>
 8006c90:	4604      	mov	r4, r0
 8006c92:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006c96:	f5a3 63ce 	sub.w	r3, r3, #1648	; 0x670
 8006c9a:	4aa5      	ldr	r2, [pc, #660]	; (8006f30 <_ZN3jlb5GraphC1Ev+0x1910>)
 8006c9c:	6812      	ldr	r2, [r2, #0]
 8006c9e:	4611      	mov	r1, r2
 8006ca0:	8019      	strh	r1, [r3, #0]
 8006ca2:	3302      	adds	r3, #2
 8006ca4:	0c12      	lsrs	r2, r2, #16
 8006ca6:	701a      	strb	r2, [r3, #0]
 8006ca8:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006cac:	f5a3 63cf 	sub.w	r3, r3, #1656	; 0x678
 8006cb0:	f507 62bf 	add.w	r2, r7, #1528	; 0x5f8
 8006cb4:	601a      	str	r2, [r3, #0]
 8006cb6:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006cba:	f5a3 63cf 	sub.w	r3, r3, #1656	; 0x678
 8006cbe:	2203      	movs	r2, #3
 8006cc0:	605a      	str	r2, [r3, #4]
 8006cc2:	f207 53fc 	addw	r3, r7, #1532	; 0x5fc
 8006cc6:	4618      	mov	r0, r3
 8006cc8:	f01a fa6d 	bl	80211a6 <_ZNSaIcEC1Ev>
 8006ccc:	f207 53fc 	addw	r3, r7, #1532	; 0x5fc
 8006cd0:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8006cd4:	f5a2 62cf 	sub.w	r2, r2, #1656	; 0x678
 8006cd8:	f207 50e4 	addw	r0, r7, #1508	; 0x5e4
 8006cdc:	ca06      	ldmia	r2, {r1, r2}
 8006cde:	f005 ff25 	bl	800cb2c <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8006ce2:	f207 53e4 	addw	r3, r7, #1508	; 0x5e4
 8006ce6:	ed9f 0a93 	vldr	s0, [pc, #588]	; 8006f34 <_ZN3jlb5GraphC1Ev+0x1914>
 8006cea:	2202      	movs	r2, #2
 8006cec:	214e      	movs	r1, #78	; 0x4e
 8006cee:	4620      	mov	r0, r4
 8006cf0:	f7fe fc45 	bl	800557e <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8006cf4:	f207 53e4 	addw	r3, r7, #1508	; 0x5e4
 8006cf8:	4618      	mov	r0, r3
 8006cfa:	f005 fe85 	bl	800ca08 <_ZNSt6vectorIcSaIcEED1Ev>
 8006cfe:	f207 53fc 	addw	r3, r7, #1532	; 0x5fc
 8006d02:	4618      	mov	r0, r3
 8006d04:	f01a fa51 	bl	80211aa <_ZNSaIcED1Ev>
            this->operator[]('I').add_edge('K', Direction::RIGHT, {'D', 'F', 'G'}, QUARTER_CIRCLE);
 8006d08:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006d0c:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8006d10:	2149      	movs	r1, #73	; 0x49
 8006d12:	6818      	ldr	r0, [r3, #0]
 8006d14:	f001 feb7 	bl	8008a86 <_ZN3jlb5GraphixEc>
 8006d18:	4604      	mov	r4, r0
 8006d1a:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006d1e:	f2a3 6354 	subw	r3, r3, #1620	; 0x654
 8006d22:	4a83      	ldr	r2, [pc, #524]	; (8006f30 <_ZN3jlb5GraphC1Ev+0x1910>)
 8006d24:	6812      	ldr	r2, [r2, #0]
 8006d26:	4611      	mov	r1, r2
 8006d28:	8019      	strh	r1, [r3, #0]
 8006d2a:	3302      	adds	r3, #2
 8006d2c:	0c12      	lsrs	r2, r2, #16
 8006d2e:	701a      	strb	r2, [r3, #0]
 8006d30:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006d34:	f2a3 635c 	subw	r3, r3, #1628	; 0x65c
 8006d38:	f207 6214 	addw	r2, r7, #1556	; 0x614
 8006d3c:	601a      	str	r2, [r3, #0]
 8006d3e:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006d42:	f2a3 635c 	subw	r3, r3, #1628	; 0x65c
 8006d46:	2203      	movs	r2, #3
 8006d48:	605a      	str	r2, [r3, #4]
 8006d4a:	f507 63c3 	add.w	r3, r7, #1560	; 0x618
 8006d4e:	4618      	mov	r0, r3
 8006d50:	f01a fa29 	bl	80211a6 <_ZNSaIcEC1Ev>
 8006d54:	f507 63c3 	add.w	r3, r7, #1560	; 0x618
 8006d58:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8006d5c:	f2a2 625c 	subw	r2, r2, #1628	; 0x65c
 8006d60:	f507 60c0 	add.w	r0, r7, #1536	; 0x600
 8006d64:	ca06      	ldmia	r2, {r1, r2}
 8006d66:	f005 fee1 	bl	800cb2c <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8006d6a:	f507 63c0 	add.w	r3, r7, #1536	; 0x600
 8006d6e:	ed9f 0a6f 	vldr	s0, [pc, #444]	; 8006f2c <_ZN3jlb5GraphC1Ev+0x190c>
 8006d72:	2201      	movs	r2, #1
 8006d74:	214b      	movs	r1, #75	; 0x4b
 8006d76:	4620      	mov	r0, r4
 8006d78:	f7fe fc01 	bl	800557e <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8006d7c:	f507 63c0 	add.w	r3, r7, #1536	; 0x600
 8006d80:	4618      	mov	r0, r3
 8006d82:	f005 fe41 	bl	800ca08 <_ZNSt6vectorIcSaIcEED1Ev>
 8006d86:	f507 63c3 	add.w	r3, r7, #1560	; 0x618
 8006d8a:	4618      	mov	r0, r3
 8006d8c:	f01a fa0d 	bl	80211aa <_ZNSaIcED1Ev>
            this->operator[]('J').add_edge('G', Direction::LEFT, {'L'}, QUARTER_CIRCLE);
 8006d90:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006d94:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8006d98:	214a      	movs	r1, #74	; 0x4a
 8006d9a:	6818      	ldr	r0, [r3, #0]
 8006d9c:	f001 fe73 	bl	8008a86 <_ZN3jlb5GraphixEc>
 8006da0:	4604      	mov	r4, r0
 8006da2:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006da6:	f5a3 63c7 	sub.w	r3, r3, #1592	; 0x638
 8006daa:	224c      	movs	r2, #76	; 0x4c
 8006dac:	701a      	strb	r2, [r3, #0]
 8006dae:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006db2:	f5a3 63c8 	sub.w	r3, r3, #1600	; 0x640
 8006db6:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 8006dba:	601a      	str	r2, [r3, #0]
 8006dbc:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006dc0:	f5a3 63c8 	sub.w	r3, r3, #1600	; 0x640
 8006dc4:	2201      	movs	r2, #1
 8006dc6:	605a      	str	r2, [r3, #4]
 8006dc8:	f207 6334 	addw	r3, r7, #1588	; 0x634
 8006dcc:	4618      	mov	r0, r3
 8006dce:	f01a f9ea 	bl	80211a6 <_ZNSaIcEC1Ev>
 8006dd2:	f207 6334 	addw	r3, r7, #1588	; 0x634
 8006dd6:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8006dda:	f5a2 62c8 	sub.w	r2, r2, #1600	; 0x640
 8006dde:	f207 601c 	addw	r0, r7, #1564	; 0x61c
 8006de2:	ca06      	ldmia	r2, {r1, r2}
 8006de4:	f005 fea2 	bl	800cb2c <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8006de8:	f207 631c 	addw	r3, r7, #1564	; 0x61c
 8006dec:	ed9f 0a4f 	vldr	s0, [pc, #316]	; 8006f2c <_ZN3jlb5GraphC1Ev+0x190c>
 8006df0:	2200      	movs	r2, #0
 8006df2:	2147      	movs	r1, #71	; 0x47
 8006df4:	4620      	mov	r0, r4
 8006df6:	f7fe fbc2 	bl	800557e <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8006dfa:	f207 631c 	addw	r3, r7, #1564	; 0x61c
 8006dfe:	4618      	mov	r0, r3
 8006e00:	f005 fe02 	bl	800ca08 <_ZNSt6vectorIcSaIcEED1Ev>
 8006e04:	f207 6334 	addw	r3, r7, #1588	; 0x634
 8006e08:	4618      	mov	r0, r3
 8006e0a:	f01a f9ce 	bl	80211aa <_ZNSaIcED1Ev>
            this->operator[]('J').add_edge('E', Direction::STRAIGHT, {'L'}, 2.0f * UNIT);
 8006e0e:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006e12:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8006e16:	214a      	movs	r1, #74	; 0x4a
 8006e18:	6818      	ldr	r0, [r3, #0]
 8006e1a:	f001 fe34 	bl	8008a86 <_ZN3jlb5GraphixEc>
 8006e1e:	4604      	mov	r4, r0
 8006e20:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006e24:	f2a3 631c 	subw	r3, r3, #1564	; 0x61c
 8006e28:	224c      	movs	r2, #76	; 0x4c
 8006e2a:	701a      	strb	r2, [r3, #0]
 8006e2c:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006e30:	f2a3 6324 	subw	r3, r3, #1572	; 0x624
 8006e34:	f207 624c 	addw	r2, r7, #1612	; 0x64c
 8006e38:	601a      	str	r2, [r3, #0]
 8006e3a:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006e3e:	f2a3 6324 	subw	r3, r3, #1572	; 0x624
 8006e42:	2201      	movs	r2, #1
 8006e44:	605a      	str	r2, [r3, #4]
 8006e46:	f507 63ca 	add.w	r3, r7, #1616	; 0x650
 8006e4a:	4618      	mov	r0, r3
 8006e4c:	f01a f9ab 	bl	80211a6 <_ZNSaIcEC1Ev>
 8006e50:	f507 63ca 	add.w	r3, r7, #1616	; 0x650
 8006e54:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8006e58:	f2a2 6224 	subw	r2, r2, #1572	; 0x624
 8006e5c:	f507 60c7 	add.w	r0, r7, #1592	; 0x638
 8006e60:	ca06      	ldmia	r2, {r1, r2}
 8006e62:	f005 fe63 	bl	800cb2c <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8006e66:	f507 63c7 	add.w	r3, r7, #1592	; 0x638
 8006e6a:	ed9f 0a32 	vldr	s0, [pc, #200]	; 8006f34 <_ZN3jlb5GraphC1Ev+0x1914>
 8006e6e:	2202      	movs	r2, #2
 8006e70:	2145      	movs	r1, #69	; 0x45
 8006e72:	4620      	mov	r0, r4
 8006e74:	f7fe fb83 	bl	800557e <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8006e78:	f507 63c7 	add.w	r3, r7, #1592	; 0x638
 8006e7c:	4618      	mov	r0, r3
 8006e7e:	f005 fdc3 	bl	800ca08 <_ZNSt6vectorIcSaIcEED1Ev>
 8006e82:	f507 63ca 	add.w	r3, r7, #1616	; 0x650
 8006e86:	4618      	mov	r0, r3
 8006e88:	f01a f98f 	bl	80211aa <_ZNSaIcED1Ev>
            this->operator[]('J').add_edge('L', Direction::RIGHT, {'E', 'G'}, QUARTER_CIRCLE);
 8006e8c:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006e90:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8006e94:	214a      	movs	r1, #74	; 0x4a
 8006e96:	6818      	ldr	r0, [r3, #0]
 8006e98:	f001 fdf5 	bl	8008a86 <_ZN3jlb5GraphixEc>
 8006e9c:	4604      	mov	r4, r0
 8006e9e:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006ea2:	f5a3 63c0 	sub.w	r3, r3, #1536	; 0x600
 8006ea6:	4a24      	ldr	r2, [pc, #144]	; (8006f38 <_ZN3jlb5GraphC1Ev+0x1918>)
 8006ea8:	8812      	ldrh	r2, [r2, #0]
 8006eaa:	801a      	strh	r2, [r3, #0]
 8006eac:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006eb0:	f5a3 63c1 	sub.w	r3, r3, #1544	; 0x608
 8006eb4:	f507 62cd 	add.w	r2, r7, #1640	; 0x668
 8006eb8:	601a      	str	r2, [r3, #0]
 8006eba:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006ebe:	f5a3 63c1 	sub.w	r3, r3, #1544	; 0x608
 8006ec2:	2202      	movs	r2, #2
 8006ec4:	605a      	str	r2, [r3, #4]
 8006ec6:	f207 636c 	addw	r3, r7, #1644	; 0x66c
 8006eca:	4618      	mov	r0, r3
 8006ecc:	f01a f96b 	bl	80211a6 <_ZNSaIcEC1Ev>
 8006ed0:	f207 636c 	addw	r3, r7, #1644	; 0x66c
 8006ed4:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8006ed8:	f5a2 62c1 	sub.w	r2, r2, #1544	; 0x608
 8006edc:	f207 6054 	addw	r0, r7, #1620	; 0x654
 8006ee0:	ca06      	ldmia	r2, {r1, r2}
 8006ee2:	f005 fe23 	bl	800cb2c <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8006ee6:	f207 6354 	addw	r3, r7, #1620	; 0x654
 8006eea:	ed9f 0a10 	vldr	s0, [pc, #64]	; 8006f2c <_ZN3jlb5GraphC1Ev+0x190c>
 8006eee:	2201      	movs	r2, #1
 8006ef0:	214c      	movs	r1, #76	; 0x4c
 8006ef2:	4620      	mov	r0, r4
 8006ef4:	f7fe fb43 	bl	800557e <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8006ef8:	f207 6354 	addw	r3, r7, #1620	; 0x654
 8006efc:	4618      	mov	r0, r3
 8006efe:	f005 fd83 	bl	800ca08 <_ZNSt6vectorIcSaIcEED1Ev>
 8006f02:	f207 636c 	addw	r3, r7, #1644	; 0x66c
 8006f06:	4618      	mov	r0, r3
 8006f08:	f01a f94f 	bl	80211aa <_ZNSaIcED1Ev>
            this->operator[]('K').add_edge('H', Direction::RIGHT, {'I', 'L', 'N'}, QUARTER_CIRCLE);
 8006f0c:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006f10:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8006f14:	214b      	movs	r1, #75	; 0x4b
 8006f16:	6818      	ldr	r0, [r3, #0]
 8006f18:	f001 fdb5 	bl	8008a86 <_ZN3jlb5GraphixEc>
 8006f1c:	4604      	mov	r4, r0
 8006f1e:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006f22:	f2a3 53e4 	subw	r3, r3, #1508	; 0x5e4
 8006f26:	e009      	b.n	8006f3c <_ZN3jlb5GraphC1Ev+0x191c>
 8006f28:	08025db8 	.word	0x08025db8
 8006f2c:	3f71463a 	.word	0x3f71463a
 8006f30:	08025dbc 	.word	0x08025dbc
 8006f34:	3f99999a 	.word	0x3f99999a
 8006f38:	08025dc0 	.word	0x08025dc0
 8006f3c:	4ae4      	ldr	r2, [pc, #912]	; (80072d0 <_ZN3jlb5GraphC1Ev+0x1cb0>)
 8006f3e:	6812      	ldr	r2, [r2, #0]
 8006f40:	4611      	mov	r1, r2
 8006f42:	8019      	strh	r1, [r3, #0]
 8006f44:	3302      	adds	r3, #2
 8006f46:	0c12      	lsrs	r2, r2, #16
 8006f48:	701a      	strb	r2, [r3, #0]
 8006f4a:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006f4e:	f2a3 53ec 	subw	r3, r3, #1516	; 0x5ec
 8006f52:	f207 6284 	addw	r2, r7, #1668	; 0x684
 8006f56:	601a      	str	r2, [r3, #0]
 8006f58:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006f5c:	f2a3 53ec 	subw	r3, r3, #1516	; 0x5ec
 8006f60:	2203      	movs	r2, #3
 8006f62:	605a      	str	r2, [r3, #4]
 8006f64:	f507 63d1 	add.w	r3, r7, #1672	; 0x688
 8006f68:	4618      	mov	r0, r3
 8006f6a:	f01a f91c 	bl	80211a6 <_ZNSaIcEC1Ev>
 8006f6e:	f507 63d1 	add.w	r3, r7, #1672	; 0x688
 8006f72:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8006f76:	f2a2 52ec 	subw	r2, r2, #1516	; 0x5ec
 8006f7a:	f507 60ce 	add.w	r0, r7, #1648	; 0x670
 8006f7e:	ca06      	ldmia	r2, {r1, r2}
 8006f80:	f005 fdd4 	bl	800cb2c <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8006f84:	f507 63ce 	add.w	r3, r7, #1648	; 0x670
 8006f88:	ed9f 0ad2 	vldr	s0, [pc, #840]	; 80072d4 <_ZN3jlb5GraphC1Ev+0x1cb4>
 8006f8c:	2201      	movs	r2, #1
 8006f8e:	2148      	movs	r1, #72	; 0x48
 8006f90:	4620      	mov	r0, r4
 8006f92:	f7fe faf4 	bl	800557e <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8006f96:	f507 63ce 	add.w	r3, r7, #1648	; 0x670
 8006f9a:	4618      	mov	r0, r3
 8006f9c:	f005 fd34 	bl	800ca08 <_ZNSt6vectorIcSaIcEED1Ev>
 8006fa0:	f507 63d1 	add.w	r3, r7, #1672	; 0x688
 8006fa4:	4618      	mov	r0, r3
 8006fa6:	f01a f900 	bl	80211aa <_ZNSaIcED1Ev>
            this->operator[]('K').add_edge('I', Direction::LEFT, {'H', 'M'}, QUARTER_CIRCLE);
 8006faa:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006fae:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8006fb2:	214b      	movs	r1, #75	; 0x4b
 8006fb4:	6818      	ldr	r0, [r3, #0]
 8006fb6:	f001 fd66 	bl	8008a86 <_ZN3jlb5GraphixEc>
 8006fba:	4604      	mov	r4, r0
 8006fbc:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006fc0:	f5a3 63b9 	sub.w	r3, r3, #1480	; 0x5c8
 8006fc4:	4ac4      	ldr	r2, [pc, #784]	; (80072d8 <_ZN3jlb5GraphC1Ev+0x1cb8>)
 8006fc6:	8812      	ldrh	r2, [r2, #0]
 8006fc8:	801a      	strh	r2, [r3, #0]
 8006fca:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006fce:	f5a3 63ba 	sub.w	r3, r3, #1488	; 0x5d0
 8006fd2:	f507 62d4 	add.w	r2, r7, #1696	; 0x6a0
 8006fd6:	601a      	str	r2, [r3, #0]
 8006fd8:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006fdc:	f5a3 63ba 	sub.w	r3, r3, #1488	; 0x5d0
 8006fe0:	2202      	movs	r2, #2
 8006fe2:	605a      	str	r2, [r3, #4]
 8006fe4:	f207 63a4 	addw	r3, r7, #1700	; 0x6a4
 8006fe8:	4618      	mov	r0, r3
 8006fea:	f01a f8dc 	bl	80211a6 <_ZNSaIcEC1Ev>
 8006fee:	f207 63a4 	addw	r3, r7, #1700	; 0x6a4
 8006ff2:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8006ff6:	f5a2 62ba 	sub.w	r2, r2, #1488	; 0x5d0
 8006ffa:	f207 608c 	addw	r0, r7, #1676	; 0x68c
 8006ffe:	ca06      	ldmia	r2, {r1, r2}
 8007000:	f005 fd94 	bl	800cb2c <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8007004:	f207 638c 	addw	r3, r7, #1676	; 0x68c
 8007008:	ed9f 0ab2 	vldr	s0, [pc, #712]	; 80072d4 <_ZN3jlb5GraphC1Ev+0x1cb4>
 800700c:	2200      	movs	r2, #0
 800700e:	2149      	movs	r1, #73	; 0x49
 8007010:	4620      	mov	r0, r4
 8007012:	f7fe fab4 	bl	800557e <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8007016:	f207 638c 	addw	r3, r7, #1676	; 0x68c
 800701a:	4618      	mov	r0, r3
 800701c:	f005 fcf4 	bl	800ca08 <_ZNSt6vectorIcSaIcEED1Ev>
 8007020:	f207 63a4 	addw	r3, r7, #1700	; 0x6a4
 8007024:	4618      	mov	r0, r3
 8007026:	f01a f8c0 	bl	80211aa <_ZNSaIcED1Ev>
            this->operator[]('K').add_edge('L', Direction::STRAIGHT, {'H', 'M'}, 2.0f * UNIT);
 800702a:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800702e:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8007032:	214b      	movs	r1, #75	; 0x4b
 8007034:	6818      	ldr	r0, [r3, #0]
 8007036:	f001 fd26 	bl	8008a86 <_ZN3jlb5GraphixEc>
 800703a:	4604      	mov	r4, r0
 800703c:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8007040:	f2a3 53ac 	subw	r3, r3, #1452	; 0x5ac
 8007044:	4aa4      	ldr	r2, [pc, #656]	; (80072d8 <_ZN3jlb5GraphC1Ev+0x1cb8>)
 8007046:	8812      	ldrh	r2, [r2, #0]
 8007048:	801a      	strh	r2, [r3, #0]
 800704a:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800704e:	f2a3 53b4 	subw	r3, r3, #1460	; 0x5b4
 8007052:	f207 62bc 	addw	r2, r7, #1724	; 0x6bc
 8007056:	601a      	str	r2, [r3, #0]
 8007058:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800705c:	f2a3 53b4 	subw	r3, r3, #1460	; 0x5b4
 8007060:	2202      	movs	r2, #2
 8007062:	605a      	str	r2, [r3, #4]
 8007064:	f507 63d8 	add.w	r3, r7, #1728	; 0x6c0
 8007068:	4618      	mov	r0, r3
 800706a:	f01a f89c 	bl	80211a6 <_ZNSaIcEC1Ev>
 800706e:	f507 63d8 	add.w	r3, r7, #1728	; 0x6c0
 8007072:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8007076:	f2a2 52b4 	subw	r2, r2, #1460	; 0x5b4
 800707a:	f507 60d5 	add.w	r0, r7, #1704	; 0x6a8
 800707e:	ca06      	ldmia	r2, {r1, r2}
 8007080:	f005 fd54 	bl	800cb2c <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8007084:	f507 63d5 	add.w	r3, r7, #1704	; 0x6a8
 8007088:	ed9f 0a94 	vldr	s0, [pc, #592]	; 80072dc <_ZN3jlb5GraphC1Ev+0x1cbc>
 800708c:	2202      	movs	r2, #2
 800708e:	214c      	movs	r1, #76	; 0x4c
 8007090:	4620      	mov	r0, r4
 8007092:	f7fe fa74 	bl	800557e <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8007096:	f507 63d5 	add.w	r3, r7, #1704	; 0x6a8
 800709a:	4618      	mov	r0, r3
 800709c:	f005 fcb4 	bl	800ca08 <_ZNSt6vectorIcSaIcEED1Ev>
 80070a0:	f507 63d8 	add.w	r3, r7, #1728	; 0x6c0
 80070a4:	4618      	mov	r0, r3
 80070a6:	f01a f880 	bl	80211aa <_ZNSaIcED1Ev>
            this->operator[]('K').add_edge('N', Direction::RIGHT, {'H', 'M'}, QUARTER_CIRCLE);
 80070aa:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80070ae:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 80070b2:	214b      	movs	r1, #75	; 0x4b
 80070b4:	6818      	ldr	r0, [r3, #0]
 80070b6:	f001 fce6 	bl	8008a86 <_ZN3jlb5GraphixEc>
 80070ba:	4604      	mov	r4, r0
 80070bc:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80070c0:	f5a3 63b2 	sub.w	r3, r3, #1424	; 0x590
 80070c4:	4a84      	ldr	r2, [pc, #528]	; (80072d8 <_ZN3jlb5GraphC1Ev+0x1cb8>)
 80070c6:	8812      	ldrh	r2, [r2, #0]
 80070c8:	801a      	strh	r2, [r3, #0]
 80070ca:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80070ce:	f5a3 63b3 	sub.w	r3, r3, #1432	; 0x598
 80070d2:	f507 62db 	add.w	r2, r7, #1752	; 0x6d8
 80070d6:	601a      	str	r2, [r3, #0]
 80070d8:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80070dc:	f5a3 63b3 	sub.w	r3, r3, #1432	; 0x598
 80070e0:	2202      	movs	r2, #2
 80070e2:	605a      	str	r2, [r3, #4]
 80070e4:	f207 63dc 	addw	r3, r7, #1756	; 0x6dc
 80070e8:	4618      	mov	r0, r3
 80070ea:	f01a f85c 	bl	80211a6 <_ZNSaIcEC1Ev>
 80070ee:	f207 63dc 	addw	r3, r7, #1756	; 0x6dc
 80070f2:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 80070f6:	f5a2 62b3 	sub.w	r2, r2, #1432	; 0x598
 80070fa:	f207 60c4 	addw	r0, r7, #1732	; 0x6c4
 80070fe:	ca06      	ldmia	r2, {r1, r2}
 8007100:	f005 fd14 	bl	800cb2c <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8007104:	f207 63c4 	addw	r3, r7, #1732	; 0x6c4
 8007108:	ed9f 0a72 	vldr	s0, [pc, #456]	; 80072d4 <_ZN3jlb5GraphC1Ev+0x1cb4>
 800710c:	2201      	movs	r2, #1
 800710e:	214e      	movs	r1, #78	; 0x4e
 8007110:	4620      	mov	r0, r4
 8007112:	f7fe fa34 	bl	800557e <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8007116:	f207 63c4 	addw	r3, r7, #1732	; 0x6c4
 800711a:	4618      	mov	r0, r3
 800711c:	f005 fc74 	bl	800ca08 <_ZNSt6vectorIcSaIcEED1Ev>
 8007120:	f207 63dc 	addw	r3, r7, #1756	; 0x6dc
 8007124:	4618      	mov	r0, r3
 8007126:	f01a f840 	bl	80211aa <_ZNSaIcED1Ev>
            this->operator[]('K').add_edge('M', Direction::LEFT, {'I', 'L', 'N'}, QUARTER_CIRCLE);
 800712a:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800712e:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8007132:	214b      	movs	r1, #75	; 0x4b
 8007134:	6818      	ldr	r0, [r3, #0]
 8007136:	f001 fca6 	bl	8008a86 <_ZN3jlb5GraphixEc>
 800713a:	4604      	mov	r4, r0
 800713c:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8007140:	f2a3 5374 	subw	r3, r3, #1396	; 0x574
 8007144:	4a62      	ldr	r2, [pc, #392]	; (80072d0 <_ZN3jlb5GraphC1Ev+0x1cb0>)
 8007146:	6812      	ldr	r2, [r2, #0]
 8007148:	4611      	mov	r1, r2
 800714a:	8019      	strh	r1, [r3, #0]
 800714c:	3302      	adds	r3, #2
 800714e:	0c12      	lsrs	r2, r2, #16
 8007150:	701a      	strb	r2, [r3, #0]
 8007152:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8007156:	f2a3 537c 	subw	r3, r3, #1404	; 0x57c
 800715a:	f207 62f4 	addw	r2, r7, #1780	; 0x6f4
 800715e:	601a      	str	r2, [r3, #0]
 8007160:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8007164:	f2a3 537c 	subw	r3, r3, #1404	; 0x57c
 8007168:	2203      	movs	r2, #3
 800716a:	605a      	str	r2, [r3, #4]
 800716c:	f507 63df 	add.w	r3, r7, #1784	; 0x6f8
 8007170:	4618      	mov	r0, r3
 8007172:	f01a f818 	bl	80211a6 <_ZNSaIcEC1Ev>
 8007176:	f507 63df 	add.w	r3, r7, #1784	; 0x6f8
 800717a:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 800717e:	f2a2 527c 	subw	r2, r2, #1404	; 0x57c
 8007182:	f507 60dc 	add.w	r0, r7, #1760	; 0x6e0
 8007186:	ca06      	ldmia	r2, {r1, r2}
 8007188:	f005 fcd0 	bl	800cb2c <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 800718c:	f507 63dc 	add.w	r3, r7, #1760	; 0x6e0
 8007190:	ed9f 0a50 	vldr	s0, [pc, #320]	; 80072d4 <_ZN3jlb5GraphC1Ev+0x1cb4>
 8007194:	2200      	movs	r2, #0
 8007196:	214d      	movs	r1, #77	; 0x4d
 8007198:	4620      	mov	r0, r4
 800719a:	f7fe f9f0 	bl	800557e <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 800719e:	f507 63dc 	add.w	r3, r7, #1760	; 0x6e0
 80071a2:	4618      	mov	r0, r3
 80071a4:	f005 fc30 	bl	800ca08 <_ZNSt6vectorIcSaIcEED1Ev>
 80071a8:	f507 63df 	add.w	r3, r7, #1784	; 0x6f8
 80071ac:	4618      	mov	r0, r3
 80071ae:	f019 fffc 	bl	80211aa <_ZNSaIcED1Ev>
            this->operator[]('L').add_edge('K', Direction::STRAIGHT, {'J', 'O'}, 2.0f * UNIT);
 80071b2:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80071b6:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 80071ba:	214c      	movs	r1, #76	; 0x4c
 80071bc:	6818      	ldr	r0, [r3, #0]
 80071be:	f001 fc62 	bl	8008a86 <_ZN3jlb5GraphixEc>
 80071c2:	4604      	mov	r4, r0
 80071c4:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80071c8:	f5a3 63ab 	sub.w	r3, r3, #1368	; 0x558
 80071cc:	4a44      	ldr	r2, [pc, #272]	; (80072e0 <_ZN3jlb5GraphC1Ev+0x1cc0>)
 80071ce:	8812      	ldrh	r2, [r2, #0]
 80071d0:	801a      	strh	r2, [r3, #0]
 80071d2:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80071d6:	f5a3 63ac 	sub.w	r3, r3, #1376	; 0x560
 80071da:	f507 62e2 	add.w	r2, r7, #1808	; 0x710
 80071de:	601a      	str	r2, [r3, #0]
 80071e0:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80071e4:	f5a3 63ac 	sub.w	r3, r3, #1376	; 0x560
 80071e8:	2202      	movs	r2, #2
 80071ea:	605a      	str	r2, [r3, #4]
 80071ec:	f207 7314 	addw	r3, r7, #1812	; 0x714
 80071f0:	4618      	mov	r0, r3
 80071f2:	f019 ffd8 	bl	80211a6 <_ZNSaIcEC1Ev>
 80071f6:	f207 7314 	addw	r3, r7, #1812	; 0x714
 80071fa:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 80071fe:	f5a2 62ac 	sub.w	r2, r2, #1376	; 0x560
 8007202:	f207 60fc 	addw	r0, r7, #1788	; 0x6fc
 8007206:	ca06      	ldmia	r2, {r1, r2}
 8007208:	f005 fc90 	bl	800cb2c <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 800720c:	f207 63fc 	addw	r3, r7, #1788	; 0x6fc
 8007210:	ed9f 0a32 	vldr	s0, [pc, #200]	; 80072dc <_ZN3jlb5GraphC1Ev+0x1cbc>
 8007214:	2202      	movs	r2, #2
 8007216:	214b      	movs	r1, #75	; 0x4b
 8007218:	4620      	mov	r0, r4
 800721a:	f7fe f9b0 	bl	800557e <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 800721e:	f207 63fc 	addw	r3, r7, #1788	; 0x6fc
 8007222:	4618      	mov	r0, r3
 8007224:	f005 fbf0 	bl	800ca08 <_ZNSt6vectorIcSaIcEED1Ev>
 8007228:	f207 7314 	addw	r3, r7, #1812	; 0x714
 800722c:	4618      	mov	r0, r3
 800722e:	f019 ffbc 	bl	80211aa <_ZNSaIcED1Ev>
            this->operator[]('L').add_edge('I', Direction::RIGHT, {'J', 'O'}, QUARTER_CIRCLE);
 8007232:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8007236:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 800723a:	214c      	movs	r1, #76	; 0x4c
 800723c:	6818      	ldr	r0, [r3, #0]
 800723e:	f001 fc22 	bl	8008a86 <_ZN3jlb5GraphixEc>
 8007242:	4604      	mov	r4, r0
 8007244:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8007248:	f2a3 533c 	subw	r3, r3, #1340	; 0x53c
 800724c:	4a24      	ldr	r2, [pc, #144]	; (80072e0 <_ZN3jlb5GraphC1Ev+0x1cc0>)
 800724e:	8812      	ldrh	r2, [r2, #0]
 8007250:	801a      	strh	r2, [r3, #0]
 8007252:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8007256:	f2a3 5344 	subw	r3, r3, #1348	; 0x544
 800725a:	f207 722c 	addw	r2, r7, #1836	; 0x72c
 800725e:	601a      	str	r2, [r3, #0]
 8007260:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8007264:	f2a3 5344 	subw	r3, r3, #1348	; 0x544
 8007268:	2202      	movs	r2, #2
 800726a:	605a      	str	r2, [r3, #4]
 800726c:	f507 63e6 	add.w	r3, r7, #1840	; 0x730
 8007270:	4618      	mov	r0, r3
 8007272:	f019 ff98 	bl	80211a6 <_ZNSaIcEC1Ev>
 8007276:	f507 63e6 	add.w	r3, r7, #1840	; 0x730
 800727a:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 800727e:	f2a2 5244 	subw	r2, r2, #1348	; 0x544
 8007282:	f507 60e3 	add.w	r0, r7, #1816	; 0x718
 8007286:	ca06      	ldmia	r2, {r1, r2}
 8007288:	f005 fc50 	bl	800cb2c <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 800728c:	f507 63e3 	add.w	r3, r7, #1816	; 0x718
 8007290:	ed9f 0a10 	vldr	s0, [pc, #64]	; 80072d4 <_ZN3jlb5GraphC1Ev+0x1cb4>
 8007294:	2201      	movs	r2, #1
 8007296:	2149      	movs	r1, #73	; 0x49
 8007298:	4620      	mov	r0, r4
 800729a:	f7fe f970 	bl	800557e <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 800729e:	f507 63e3 	add.w	r3, r7, #1816	; 0x718
 80072a2:	4618      	mov	r0, r3
 80072a4:	f005 fbb0 	bl	800ca08 <_ZNSt6vectorIcSaIcEED1Ev>
 80072a8:	f507 63e6 	add.w	r3, r7, #1840	; 0x730
 80072ac:	4618      	mov	r0, r3
 80072ae:	f019 ff7c 	bl	80211aa <_ZNSaIcED1Ev>
            this->operator[]('L').add_edge('J', Direction::LEFT, {'I', 'K', 'N'}, QUARTER_CIRCLE);
 80072b2:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80072b6:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 80072ba:	214c      	movs	r1, #76	; 0x4c
 80072bc:	6818      	ldr	r0, [r3, #0]
 80072be:	f001 fbe2 	bl	8008a86 <_ZN3jlb5GraphixEc>
 80072c2:	4604      	mov	r4, r0
 80072c4:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80072c8:	f5a3 63a4 	sub.w	r3, r3, #1312	; 0x520
 80072cc:	e00a      	b.n	80072e4 <_ZN3jlb5GraphC1Ev+0x1cc4>
 80072ce:	bf00      	nop
 80072d0:	08025dc4 	.word	0x08025dc4
 80072d4:	3f71463a 	.word	0x3f71463a
 80072d8:	08025dc8 	.word	0x08025dc8
 80072dc:	3f99999a 	.word	0x3f99999a
 80072e0:	08025dcc 	.word	0x08025dcc
 80072e4:	4ae4      	ldr	r2, [pc, #912]	; (8007678 <_ZN3jlb5GraphC1Ev+0x2058>)
 80072e6:	6812      	ldr	r2, [r2, #0]
 80072e8:	4611      	mov	r1, r2
 80072ea:	8019      	strh	r1, [r3, #0]
 80072ec:	3302      	adds	r3, #2
 80072ee:	0c12      	lsrs	r2, r2, #16
 80072f0:	701a      	strb	r2, [r3, #0]
 80072f2:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80072f6:	f5a3 63a5 	sub.w	r3, r3, #1320	; 0x528
 80072fa:	f507 62e9 	add.w	r2, r7, #1864	; 0x748
 80072fe:	601a      	str	r2, [r3, #0]
 8007300:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8007304:	f5a3 63a5 	sub.w	r3, r3, #1320	; 0x528
 8007308:	2203      	movs	r2, #3
 800730a:	605a      	str	r2, [r3, #4]
 800730c:	f207 734c 	addw	r3, r7, #1868	; 0x74c
 8007310:	4618      	mov	r0, r3
 8007312:	f019 ff48 	bl	80211a6 <_ZNSaIcEC1Ev>
 8007316:	f207 734c 	addw	r3, r7, #1868	; 0x74c
 800731a:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 800731e:	f5a2 62a5 	sub.w	r2, r2, #1320	; 0x528
 8007322:	f207 7034 	addw	r0, r7, #1844	; 0x734
 8007326:	ca06      	ldmia	r2, {r1, r2}
 8007328:	f005 fc00 	bl	800cb2c <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 800732c:	f207 7334 	addw	r3, r7, #1844	; 0x734
 8007330:	ed9f 0ad2 	vldr	s0, [pc, #840]	; 800767c <_ZN3jlb5GraphC1Ev+0x205c>
 8007334:	2200      	movs	r2, #0
 8007336:	214a      	movs	r1, #74	; 0x4a
 8007338:	4620      	mov	r0, r4
 800733a:	f7fe f920 	bl	800557e <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 800733e:	f207 7334 	addw	r3, r7, #1844	; 0x734
 8007342:	4618      	mov	r0, r3
 8007344:	f005 fb60 	bl	800ca08 <_ZNSt6vectorIcSaIcEED1Ev>
 8007348:	f207 734c 	addw	r3, r7, #1868	; 0x74c
 800734c:	4618      	mov	r0, r3
 800734e:	f019 ff2c 	bl	80211aa <_ZNSaIcED1Ev>
            this->operator[]('L').add_edge('O', Direction::RIGHT, {'I', 'K', 'N'}, QUARTER_CIRCLE);
 8007352:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8007356:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 800735a:	214c      	movs	r1, #76	; 0x4c
 800735c:	6818      	ldr	r0, [r3, #0]
 800735e:	f001 fb92 	bl	8008a86 <_ZN3jlb5GraphixEc>
 8007362:	4604      	mov	r4, r0
 8007364:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8007368:	f2a3 5304 	subw	r3, r3, #1284	; 0x504
 800736c:	4ac2      	ldr	r2, [pc, #776]	; (8007678 <_ZN3jlb5GraphC1Ev+0x2058>)
 800736e:	6812      	ldr	r2, [r2, #0]
 8007370:	4611      	mov	r1, r2
 8007372:	8019      	strh	r1, [r3, #0]
 8007374:	3302      	adds	r3, #2
 8007376:	0c12      	lsrs	r2, r2, #16
 8007378:	701a      	strb	r2, [r3, #0]
 800737a:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800737e:	f2a3 530c 	subw	r3, r3, #1292	; 0x50c
 8007382:	f207 7264 	addw	r2, r7, #1892	; 0x764
 8007386:	601a      	str	r2, [r3, #0]
 8007388:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800738c:	f2a3 530c 	subw	r3, r3, #1292	; 0x50c
 8007390:	2203      	movs	r2, #3
 8007392:	605a      	str	r2, [r3, #4]
 8007394:	f507 63ed 	add.w	r3, r7, #1896	; 0x768
 8007398:	4618      	mov	r0, r3
 800739a:	f019 ff04 	bl	80211a6 <_ZNSaIcEC1Ev>
 800739e:	f507 63ed 	add.w	r3, r7, #1896	; 0x768
 80073a2:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 80073a6:	f2a2 520c 	subw	r2, r2, #1292	; 0x50c
 80073aa:	f507 60ea 	add.w	r0, r7, #1872	; 0x750
 80073ae:	ca06      	ldmia	r2, {r1, r2}
 80073b0:	f005 fbbc 	bl	800cb2c <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 80073b4:	f507 63ea 	add.w	r3, r7, #1872	; 0x750
 80073b8:	ed9f 0ab0 	vldr	s0, [pc, #704]	; 800767c <_ZN3jlb5GraphC1Ev+0x205c>
 80073bc:	2201      	movs	r2, #1
 80073be:	214f      	movs	r1, #79	; 0x4f
 80073c0:	4620      	mov	r0, r4
 80073c2:	f7fe f8dc 	bl	800557e <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 80073c6:	f507 63ea 	add.w	r3, r7, #1872	; 0x750
 80073ca:	4618      	mov	r0, r3
 80073cc:	f005 fb1c 	bl	800ca08 <_ZNSt6vectorIcSaIcEED1Ev>
 80073d0:	f507 63ed 	add.w	r3, r7, #1896	; 0x768
 80073d4:	4618      	mov	r0, r3
 80073d6:	f019 fee8 	bl	80211aa <_ZNSaIcED1Ev>
            this->operator[]('L').add_edge('N', Direction::LEFT, {'J', 'O'}, QUARTER_CIRCLE);
 80073da:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80073de:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 80073e2:	214c      	movs	r1, #76	; 0x4c
 80073e4:	6818      	ldr	r0, [r3, #0]
 80073e6:	f001 fb4e 	bl	8008a86 <_ZN3jlb5GraphixEc>
 80073ea:	4604      	mov	r4, r0
 80073ec:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80073f0:	f5a3 639d 	sub.w	r3, r3, #1256	; 0x4e8
 80073f4:	4aa2      	ldr	r2, [pc, #648]	; (8007680 <_ZN3jlb5GraphC1Ev+0x2060>)
 80073f6:	8812      	ldrh	r2, [r2, #0]
 80073f8:	801a      	strh	r2, [r3, #0]
 80073fa:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80073fe:	f5a3 639e 	sub.w	r3, r3, #1264	; 0x4f0
 8007402:	f507 62f0 	add.w	r2, r7, #1920	; 0x780
 8007406:	601a      	str	r2, [r3, #0]
 8007408:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800740c:	f5a3 639e 	sub.w	r3, r3, #1264	; 0x4f0
 8007410:	2202      	movs	r2, #2
 8007412:	605a      	str	r2, [r3, #4]
 8007414:	f207 7384 	addw	r3, r7, #1924	; 0x784
 8007418:	4618      	mov	r0, r3
 800741a:	f019 fec4 	bl	80211a6 <_ZNSaIcEC1Ev>
 800741e:	f207 7384 	addw	r3, r7, #1924	; 0x784
 8007422:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8007426:	f5a2 629e 	sub.w	r2, r2, #1264	; 0x4f0
 800742a:	f207 706c 	addw	r0, r7, #1900	; 0x76c
 800742e:	ca06      	ldmia	r2, {r1, r2}
 8007430:	f005 fb7c 	bl	800cb2c <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8007434:	f207 736c 	addw	r3, r7, #1900	; 0x76c
 8007438:	ed9f 0a90 	vldr	s0, [pc, #576]	; 800767c <_ZN3jlb5GraphC1Ev+0x205c>
 800743c:	2200      	movs	r2, #0
 800743e:	214e      	movs	r1, #78	; 0x4e
 8007440:	4620      	mov	r0, r4
 8007442:	f7fe f89c 	bl	800557e <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8007446:	f207 736c 	addw	r3, r7, #1900	; 0x76c
 800744a:	4618      	mov	r0, r3
 800744c:	f005 fadc 	bl	800ca08 <_ZNSt6vectorIcSaIcEED1Ev>
 8007450:	f207 7384 	addw	r3, r7, #1924	; 0x784
 8007454:	4618      	mov	r0, r3
 8007456:	f019 fea8 	bl	80211aa <_ZNSaIcED1Ev>
            this->operator[]('M').add_edge('H', Direction::STRAIGHT, {'P', 'Q', 'R'}, 2.0f * UNIT);
 800745a:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800745e:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8007462:	214d      	movs	r1, #77	; 0x4d
 8007464:	6818      	ldr	r0, [r3, #0]
 8007466:	f001 fb0e 	bl	8008a86 <_ZN3jlb5GraphixEc>
 800746a:	4604      	mov	r4, r0
 800746c:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8007470:	f2a3 43cc 	subw	r3, r3, #1228	; 0x4cc
 8007474:	4a83      	ldr	r2, [pc, #524]	; (8007684 <_ZN3jlb5GraphC1Ev+0x2064>)
 8007476:	6812      	ldr	r2, [r2, #0]
 8007478:	4611      	mov	r1, r2
 800747a:	8019      	strh	r1, [r3, #0]
 800747c:	3302      	adds	r3, #2
 800747e:	0c12      	lsrs	r2, r2, #16
 8007480:	701a      	strb	r2, [r3, #0]
 8007482:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8007486:	f2a3 43d4 	subw	r3, r3, #1236	; 0x4d4
 800748a:	f207 729c 	addw	r2, r7, #1948	; 0x79c
 800748e:	601a      	str	r2, [r3, #0]
 8007490:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8007494:	f2a3 43d4 	subw	r3, r3, #1236	; 0x4d4
 8007498:	2203      	movs	r2, #3
 800749a:	605a      	str	r2, [r3, #4]
 800749c:	f507 63f4 	add.w	r3, r7, #1952	; 0x7a0
 80074a0:	4618      	mov	r0, r3
 80074a2:	f019 fe80 	bl	80211a6 <_ZNSaIcEC1Ev>
 80074a6:	f507 63f4 	add.w	r3, r7, #1952	; 0x7a0
 80074aa:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 80074ae:	f2a2 42d4 	subw	r2, r2, #1236	; 0x4d4
 80074b2:	f507 60f1 	add.w	r0, r7, #1928	; 0x788
 80074b6:	ca06      	ldmia	r2, {r1, r2}
 80074b8:	f005 fb38 	bl	800cb2c <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 80074bc:	f507 63f1 	add.w	r3, r7, #1928	; 0x788
 80074c0:	ed9f 0a71 	vldr	s0, [pc, #452]	; 8007688 <_ZN3jlb5GraphC1Ev+0x2068>
 80074c4:	2202      	movs	r2, #2
 80074c6:	2148      	movs	r1, #72	; 0x48
 80074c8:	4620      	mov	r0, r4
 80074ca:	f7fe f858 	bl	800557e <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 80074ce:	f507 63f1 	add.w	r3, r7, #1928	; 0x788
 80074d2:	4618      	mov	r0, r3
 80074d4:	f005 fa98 	bl	800ca08 <_ZNSt6vectorIcSaIcEED1Ev>
 80074d8:	f507 63f4 	add.w	r3, r7, #1952	; 0x7a0
 80074dc:	4618      	mov	r0, r3
 80074de:	f019 fe64 	bl	80211aa <_ZNSaIcED1Ev>
            this->operator[]('M').add_edge('K', Direction::RIGHT, {'P', 'Q', 'R'}, QUARTER_CIRCLE);
 80074e2:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80074e6:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 80074ea:	214d      	movs	r1, #77	; 0x4d
 80074ec:	6818      	ldr	r0, [r3, #0]
 80074ee:	f001 faca 	bl	8008a86 <_ZN3jlb5GraphixEc>
 80074f2:	4604      	mov	r4, r0
 80074f4:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80074f8:	f5a3 6396 	sub.w	r3, r3, #1200	; 0x4b0
 80074fc:	4a61      	ldr	r2, [pc, #388]	; (8007684 <_ZN3jlb5GraphC1Ev+0x2064>)
 80074fe:	6812      	ldr	r2, [r2, #0]
 8007500:	4611      	mov	r1, r2
 8007502:	8019      	strh	r1, [r3, #0]
 8007504:	3302      	adds	r3, #2
 8007506:	0c12      	lsrs	r2, r2, #16
 8007508:	701a      	strb	r2, [r3, #0]
 800750a:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800750e:	f5a3 6397 	sub.w	r3, r3, #1208	; 0x4b8
 8007512:	f507 62f7 	add.w	r2, r7, #1976	; 0x7b8
 8007516:	601a      	str	r2, [r3, #0]
 8007518:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800751c:	f5a3 6397 	sub.w	r3, r3, #1208	; 0x4b8
 8007520:	2203      	movs	r2, #3
 8007522:	605a      	str	r2, [r3, #4]
 8007524:	f207 73bc 	addw	r3, r7, #1980	; 0x7bc
 8007528:	4618      	mov	r0, r3
 800752a:	f019 fe3c 	bl	80211a6 <_ZNSaIcEC1Ev>
 800752e:	f207 73bc 	addw	r3, r7, #1980	; 0x7bc
 8007532:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8007536:	f5a2 6297 	sub.w	r2, r2, #1208	; 0x4b8
 800753a:	f207 70a4 	addw	r0, r7, #1956	; 0x7a4
 800753e:	ca06      	ldmia	r2, {r1, r2}
 8007540:	f005 faf4 	bl	800cb2c <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8007544:	f207 73a4 	addw	r3, r7, #1956	; 0x7a4
 8007548:	ed9f 0a4c 	vldr	s0, [pc, #304]	; 800767c <_ZN3jlb5GraphC1Ev+0x205c>
 800754c:	2201      	movs	r2, #1
 800754e:	214b      	movs	r1, #75	; 0x4b
 8007550:	4620      	mov	r0, r4
 8007552:	f7fe f814 	bl	800557e <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8007556:	f207 73a4 	addw	r3, r7, #1956	; 0x7a4
 800755a:	4618      	mov	r0, r3
 800755c:	f005 fa54 	bl	800ca08 <_ZNSt6vectorIcSaIcEED1Ev>
 8007560:	f207 73bc 	addw	r3, r7, #1980	; 0x7bc
 8007564:	4618      	mov	r0, r3
 8007566:	f019 fe20 	bl	80211aa <_ZNSaIcED1Ev>
            this->operator[]('M').add_edge('R', Direction::LEFT, {'H', 'K'}, QUARTER_CIRCLE);
 800756a:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800756e:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8007572:	214d      	movs	r1, #77	; 0x4d
 8007574:	6818      	ldr	r0, [r3, #0]
 8007576:	f001 fa86 	bl	8008a86 <_ZN3jlb5GraphixEc>
 800757a:	4604      	mov	r4, r0
 800757c:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8007580:	f2a3 4394 	subw	r3, r3, #1172	; 0x494
 8007584:	4a41      	ldr	r2, [pc, #260]	; (800768c <_ZN3jlb5GraphC1Ev+0x206c>)
 8007586:	8812      	ldrh	r2, [r2, #0]
 8007588:	801a      	strh	r2, [r3, #0]
 800758a:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800758e:	f2a3 439c 	subw	r3, r3, #1180	; 0x49c
 8007592:	f207 72d4 	addw	r2, r7, #2004	; 0x7d4
 8007596:	601a      	str	r2, [r3, #0]
 8007598:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800759c:	f2a3 439c 	subw	r3, r3, #1180	; 0x49c
 80075a0:	2202      	movs	r2, #2
 80075a2:	605a      	str	r2, [r3, #4]
 80075a4:	f507 63fb 	add.w	r3, r7, #2008	; 0x7d8
 80075a8:	4618      	mov	r0, r3
 80075aa:	f019 fdfc 	bl	80211a6 <_ZNSaIcEC1Ev>
 80075ae:	f507 63fb 	add.w	r3, r7, #2008	; 0x7d8
 80075b2:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 80075b6:	f2a2 429c 	subw	r2, r2, #1180	; 0x49c
 80075ba:	f507 60f8 	add.w	r0, r7, #1984	; 0x7c0
 80075be:	ca06      	ldmia	r2, {r1, r2}
 80075c0:	f005 fab4 	bl	800cb2c <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 80075c4:	f507 63f8 	add.w	r3, r7, #1984	; 0x7c0
 80075c8:	ed9f 0a2c 	vldr	s0, [pc, #176]	; 800767c <_ZN3jlb5GraphC1Ev+0x205c>
 80075cc:	2200      	movs	r2, #0
 80075ce:	2152      	movs	r1, #82	; 0x52
 80075d0:	4620      	mov	r0, r4
 80075d2:	f7fd ffd4 	bl	800557e <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 80075d6:	f507 63f8 	add.w	r3, r7, #1984	; 0x7c0
 80075da:	4618      	mov	r0, r3
 80075dc:	f005 fa14 	bl	800ca08 <_ZNSt6vectorIcSaIcEED1Ev>
 80075e0:	f507 63fb 	add.w	r3, r7, #2008	; 0x7d8
 80075e4:	4618      	mov	r0, r3
 80075e6:	f019 fde0 	bl	80211aa <_ZNSaIcED1Ev>
            this->operator[]('M').add_edge('Q', Direction::STRAIGHT, {'H', 'K'}, UNIT);
 80075ea:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80075ee:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 80075f2:	214d      	movs	r1, #77	; 0x4d
 80075f4:	6818      	ldr	r0, [r3, #0]
 80075f6:	f001 fa46 	bl	8008a86 <_ZN3jlb5GraphixEc>
 80075fa:	4604      	mov	r4, r0
 80075fc:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8007600:	f5a3 638f 	sub.w	r3, r3, #1144	; 0x478
 8007604:	4a21      	ldr	r2, [pc, #132]	; (800768c <_ZN3jlb5GraphC1Ev+0x206c>)
 8007606:	8812      	ldrh	r2, [r2, #0]
 8007608:	801a      	strh	r2, [r3, #0]
 800760a:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800760e:	f5a3 6390 	sub.w	r3, r3, #1152	; 0x480
 8007612:	f507 62fe 	add.w	r2, r7, #2032	; 0x7f0
 8007616:	601a      	str	r2, [r3, #0]
 8007618:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800761c:	f5a3 6390 	sub.w	r3, r3, #1152	; 0x480
 8007620:	2202      	movs	r2, #2
 8007622:	605a      	str	r2, [r3, #4]
 8007624:	f207 73f4 	addw	r3, r7, #2036	; 0x7f4
 8007628:	4618      	mov	r0, r3
 800762a:	f019 fdbc 	bl	80211a6 <_ZNSaIcEC1Ev>
 800762e:	f207 73f4 	addw	r3, r7, #2036	; 0x7f4
 8007632:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8007636:	f5a2 6290 	sub.w	r2, r2, #1152	; 0x480
 800763a:	f207 70dc 	addw	r0, r7, #2012	; 0x7dc
 800763e:	ca06      	ldmia	r2, {r1, r2}
 8007640:	f005 fa74 	bl	800cb2c <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8007644:	f207 73dc 	addw	r3, r7, #2012	; 0x7dc
 8007648:	ed9f 0a11 	vldr	s0, [pc, #68]	; 8007690 <_ZN3jlb5GraphC1Ev+0x2070>
 800764c:	2202      	movs	r2, #2
 800764e:	2151      	movs	r1, #81	; 0x51
 8007650:	4620      	mov	r0, r4
 8007652:	f7fd ff94 	bl	800557e <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8007656:	f207 73dc 	addw	r3, r7, #2012	; 0x7dc
 800765a:	4618      	mov	r0, r3
 800765c:	f005 f9d4 	bl	800ca08 <_ZNSt6vectorIcSaIcEED1Ev>
 8007660:	f207 73f4 	addw	r3, r7, #2036	; 0x7f4
 8007664:	4618      	mov	r0, r3
 8007666:	f019 fda0 	bl	80211aa <_ZNSaIcED1Ev>
            this->operator[]('M').add_edge('P', Direction::RIGHT, {'H', 'K'}, QUARTER_CIRCLE);
 800766a:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800766e:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8007672:	214d      	movs	r1, #77	; 0x4d
 8007674:	6818      	ldr	r0, [r3, #0]
 8007676:	e00d      	b.n	8007694 <_ZN3jlb5GraphC1Ev+0x2074>
 8007678:	08025dd0 	.word	0x08025dd0
 800767c:	3f71463a 	.word	0x3f71463a
 8007680:	08025dcc 	.word	0x08025dcc
 8007684:	08025dd4 	.word	0x08025dd4
 8007688:	3f99999a 	.word	0x3f99999a
 800768c:	08025dd8 	.word	0x08025dd8
 8007690:	3f19999a 	.word	0x3f19999a
 8007694:	f001 f9f7 	bl	8008a86 <_ZN3jlb5GraphixEc>
 8007698:	4604      	mov	r4, r0
 800769a:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800769e:	f2a3 435c 	subw	r3, r3, #1116	; 0x45c
 80076a2:	4ae5      	ldr	r2, [pc, #916]	; (8007a38 <_ZN3jlb5GraphC1Ev+0x2418>)
 80076a4:	8812      	ldrh	r2, [r2, #0]
 80076a6:	801a      	strh	r2, [r3, #0]
 80076a8:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80076ac:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 80076b0:	f607 020c 	addw	r2, r7, #2060	; 0x80c
 80076b4:	601a      	str	r2, [r3, #0]
 80076b6:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80076ba:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 80076be:	2202      	movs	r2, #2
 80076c0:	605a      	str	r2, [r3, #4]
 80076c2:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 80076c6:	4618      	mov	r0, r3
 80076c8:	f019 fd6d 	bl	80211a6 <_ZNSaIcEC1Ev>
 80076cc:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 80076d0:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 80076d4:	f2a2 4264 	subw	r2, r2, #1124	; 0x464
 80076d8:	f507 60ff 	add.w	r0, r7, #2040	; 0x7f8
 80076dc:	ca06      	ldmia	r2, {r1, r2}
 80076de:	f005 fa25 	bl	800cb2c <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 80076e2:	f507 63ff 	add.w	r3, r7, #2040	; 0x7f8
 80076e6:	ed9f 0ad5 	vldr	s0, [pc, #852]	; 8007a3c <_ZN3jlb5GraphC1Ev+0x241c>
 80076ea:	2201      	movs	r2, #1
 80076ec:	2150      	movs	r1, #80	; 0x50
 80076ee:	4620      	mov	r0, r4
 80076f0:	f7fd ff45 	bl	800557e <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 80076f4:	f507 63ff 	add.w	r3, r7, #2040	; 0x7f8
 80076f8:	4618      	mov	r0, r3
 80076fa:	f005 f985 	bl	800ca08 <_ZNSt6vectorIcSaIcEED1Ev>
 80076fe:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 8007702:	4618      	mov	r0, r3
 8007704:	f019 fd51 	bl	80211aa <_ZNSaIcED1Ev>
            this->operator[]('N').add_edge('K', Direction::LEFT, {'R', 'S', 'T'}, QUARTER_CIRCLE);
 8007708:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800770c:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8007710:	214e      	movs	r1, #78	; 0x4e
 8007712:	6818      	ldr	r0, [r3, #0]
 8007714:	f001 f9b7 	bl	8008a86 <_ZN3jlb5GraphixEc>
 8007718:	4604      	mov	r4, r0
 800771a:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800771e:	f5a3 6388 	sub.w	r3, r3, #1088	; 0x440
 8007722:	4ac7      	ldr	r2, [pc, #796]	; (8007a40 <_ZN3jlb5GraphC1Ev+0x2420>)
 8007724:	6812      	ldr	r2, [r2, #0]
 8007726:	4611      	mov	r1, r2
 8007728:	8019      	strh	r1, [r3, #0]
 800772a:	3302      	adds	r3, #2
 800772c:	0c12      	lsrs	r2, r2, #16
 800772e:	701a      	strb	r2, [r3, #0]
 8007730:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8007734:	f5a3 6389 	sub.w	r3, r3, #1096	; 0x448
 8007738:	f607 0228 	addw	r2, r7, #2088	; 0x828
 800773c:	601a      	str	r2, [r3, #0]
 800773e:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8007742:	f5a3 6389 	sub.w	r3, r3, #1096	; 0x448
 8007746:	2203      	movs	r2, #3
 8007748:	605a      	str	r2, [r3, #4]
 800774a:	f607 032c 	addw	r3, r7, #2092	; 0x82c
 800774e:	4618      	mov	r0, r3
 8007750:	f019 fd29 	bl	80211a6 <_ZNSaIcEC1Ev>
 8007754:	f607 032c 	addw	r3, r7, #2092	; 0x82c
 8007758:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 800775c:	f5a2 6289 	sub.w	r2, r2, #1096	; 0x448
 8007760:	f607 0014 	addw	r0, r7, #2068	; 0x814
 8007764:	ca06      	ldmia	r2, {r1, r2}
 8007766:	f005 f9e1 	bl	800cb2c <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 800776a:	f607 0314 	addw	r3, r7, #2068	; 0x814
 800776e:	ed9f 0ab3 	vldr	s0, [pc, #716]	; 8007a3c <_ZN3jlb5GraphC1Ev+0x241c>
 8007772:	2200      	movs	r2, #0
 8007774:	214b      	movs	r1, #75	; 0x4b
 8007776:	4620      	mov	r0, r4
 8007778:	f7fd ff01 	bl	800557e <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 800777c:	f607 0314 	addw	r3, r7, #2068	; 0x814
 8007780:	4618      	mov	r0, r3
 8007782:	f005 f941 	bl	800ca08 <_ZNSt6vectorIcSaIcEED1Ev>
 8007786:	f607 032c 	addw	r3, r7, #2092	; 0x82c
 800778a:	4618      	mov	r0, r3
 800778c:	f019 fd0d 	bl	80211aa <_ZNSaIcED1Ev>
            this->operator[]('N').add_edge('I', Direction::STRAIGHT, {'R', 'S', 'T'}, 2.0f * UNIT);
 8007790:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8007794:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8007798:	214e      	movs	r1, #78	; 0x4e
 800779a:	6818      	ldr	r0, [r3, #0]
 800779c:	f001 f973 	bl	8008a86 <_ZN3jlb5GraphixEc>
 80077a0:	4604      	mov	r4, r0
 80077a2:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80077a6:	f2a3 4324 	subw	r3, r3, #1060	; 0x424
 80077aa:	4aa5      	ldr	r2, [pc, #660]	; (8007a40 <_ZN3jlb5GraphC1Ev+0x2420>)
 80077ac:	6812      	ldr	r2, [r2, #0]
 80077ae:	4611      	mov	r1, r2
 80077b0:	8019      	strh	r1, [r3, #0]
 80077b2:	3302      	adds	r3, #2
 80077b4:	0c12      	lsrs	r2, r2, #16
 80077b6:	701a      	strb	r2, [r3, #0]
 80077b8:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80077bc:	f2a3 432c 	subw	r3, r3, #1068	; 0x42c
 80077c0:	f607 0244 	addw	r2, r7, #2116	; 0x844
 80077c4:	601a      	str	r2, [r3, #0]
 80077c6:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80077ca:	f2a3 432c 	subw	r3, r3, #1068	; 0x42c
 80077ce:	2203      	movs	r2, #3
 80077d0:	605a      	str	r2, [r3, #4]
 80077d2:	f607 0348 	addw	r3, r7, #2120	; 0x848
 80077d6:	4618      	mov	r0, r3
 80077d8:	f019 fce5 	bl	80211a6 <_ZNSaIcEC1Ev>
 80077dc:	f607 0348 	addw	r3, r7, #2120	; 0x848
 80077e0:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 80077e4:	f2a2 422c 	subw	r2, r2, #1068	; 0x42c
 80077e8:	f507 6003 	add.w	r0, r7, #2096	; 0x830
 80077ec:	ca06      	ldmia	r2, {r1, r2}
 80077ee:	f005 f99d 	bl	800cb2c <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 80077f2:	f507 6303 	add.w	r3, r7, #2096	; 0x830
 80077f6:	ed9f 0a93 	vldr	s0, [pc, #588]	; 8007a44 <_ZN3jlb5GraphC1Ev+0x2424>
 80077fa:	2202      	movs	r2, #2
 80077fc:	2149      	movs	r1, #73	; 0x49
 80077fe:	4620      	mov	r0, r4
 8007800:	f7fd febd 	bl	800557e <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8007804:	f507 6303 	add.w	r3, r7, #2096	; 0x830
 8007808:	4618      	mov	r0, r3
 800780a:	f005 f8fd 	bl	800ca08 <_ZNSt6vectorIcSaIcEED1Ev>
 800780e:	f607 0348 	addw	r3, r7, #2120	; 0x848
 8007812:	4618      	mov	r0, r3
 8007814:	f019 fcc9 	bl	80211aa <_ZNSaIcED1Ev>
            this->operator[]('N').add_edge('L', Direction::RIGHT, {'R', 'S', 'T'}, QUARTER_CIRCLE);
 8007818:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800781c:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8007820:	214e      	movs	r1, #78	; 0x4e
 8007822:	6818      	ldr	r0, [r3, #0]
 8007824:	f001 f92f 	bl	8008a86 <_ZN3jlb5GraphixEc>
 8007828:	4604      	mov	r4, r0
 800782a:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800782e:	f5a3 6381 	sub.w	r3, r3, #1032	; 0x408
 8007832:	4a83      	ldr	r2, [pc, #524]	; (8007a40 <_ZN3jlb5GraphC1Ev+0x2420>)
 8007834:	6812      	ldr	r2, [r2, #0]
 8007836:	4611      	mov	r1, r2
 8007838:	8019      	strh	r1, [r3, #0]
 800783a:	3302      	adds	r3, #2
 800783c:	0c12      	lsrs	r2, r2, #16
 800783e:	701a      	strb	r2, [r3, #0]
 8007840:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8007844:	f5a3 6382 	sub.w	r3, r3, #1040	; 0x410
 8007848:	f507 6206 	add.w	r2, r7, #2144	; 0x860
 800784c:	601a      	str	r2, [r3, #0]
 800784e:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8007852:	f5a3 6382 	sub.w	r3, r3, #1040	; 0x410
 8007856:	2203      	movs	r2, #3
 8007858:	605a      	str	r2, [r3, #4]
 800785a:	f607 0364 	addw	r3, r7, #2148	; 0x864
 800785e:	4618      	mov	r0, r3
 8007860:	f019 fca1 	bl	80211a6 <_ZNSaIcEC1Ev>
 8007864:	f607 0364 	addw	r3, r7, #2148	; 0x864
 8007868:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 800786c:	f5a2 6282 	sub.w	r2, r2, #1040	; 0x410
 8007870:	f607 004c 	addw	r0, r7, #2124	; 0x84c
 8007874:	ca06      	ldmia	r2, {r1, r2}
 8007876:	f005 f959 	bl	800cb2c <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 800787a:	f607 034c 	addw	r3, r7, #2124	; 0x84c
 800787e:	ed9f 0a6f 	vldr	s0, [pc, #444]	; 8007a3c <_ZN3jlb5GraphC1Ev+0x241c>
 8007882:	2201      	movs	r2, #1
 8007884:	214c      	movs	r1, #76	; 0x4c
 8007886:	4620      	mov	r0, r4
 8007888:	f7fd fe79 	bl	800557e <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 800788c:	f607 034c 	addw	r3, r7, #2124	; 0x84c
 8007890:	4618      	mov	r0, r3
 8007892:	f005 f8b9 	bl	800ca08 <_ZNSt6vectorIcSaIcEED1Ev>
 8007896:	f607 0364 	addw	r3, r7, #2148	; 0x864
 800789a:	4618      	mov	r0, r3
 800789c:	f019 fc85 	bl	80211aa <_ZNSaIcED1Ev>
            this->operator[]('N').add_edge('T', Direction::LEFT, {'K', 'I', 'L'}, QUARTER_CIRCLE);
 80078a0:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80078a4:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 80078a8:	214e      	movs	r1, #78	; 0x4e
 80078aa:	6818      	ldr	r0, [r3, #0]
 80078ac:	f001 f8eb 	bl	8008a86 <_ZN3jlb5GraphixEc>
 80078b0:	4604      	mov	r4, r0
 80078b2:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80078b6:	f5a3 737b 	sub.w	r3, r3, #1004	; 0x3ec
 80078ba:	4a63      	ldr	r2, [pc, #396]	; (8007a48 <_ZN3jlb5GraphC1Ev+0x2428>)
 80078bc:	6812      	ldr	r2, [r2, #0]
 80078be:	4611      	mov	r1, r2
 80078c0:	8019      	strh	r1, [r3, #0]
 80078c2:	3302      	adds	r3, #2
 80078c4:	0c12      	lsrs	r2, r2, #16
 80078c6:	701a      	strb	r2, [r3, #0]
 80078c8:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80078cc:	f5a3 737d 	sub.w	r3, r3, #1012	; 0x3f4
 80078d0:	f607 027c 	addw	r2, r7, #2172	; 0x87c
 80078d4:	601a      	str	r2, [r3, #0]
 80078d6:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80078da:	f5a3 737d 	sub.w	r3, r3, #1012	; 0x3f4
 80078de:	2203      	movs	r2, #3
 80078e0:	605a      	str	r2, [r3, #4]
 80078e2:	f507 6308 	add.w	r3, r7, #2176	; 0x880
 80078e6:	4618      	mov	r0, r3
 80078e8:	f019 fc5d 	bl	80211a6 <_ZNSaIcEC1Ev>
 80078ec:	f507 6308 	add.w	r3, r7, #2176	; 0x880
 80078f0:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 80078f4:	f5a2 727d 	sub.w	r2, r2, #1012	; 0x3f4
 80078f8:	f607 0068 	addw	r0, r7, #2152	; 0x868
 80078fc:	ca06      	ldmia	r2, {r1, r2}
 80078fe:	f005 f915 	bl	800cb2c <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8007902:	f607 0368 	addw	r3, r7, #2152	; 0x868
 8007906:	ed9f 0a4d 	vldr	s0, [pc, #308]	; 8007a3c <_ZN3jlb5GraphC1Ev+0x241c>
 800790a:	2200      	movs	r2, #0
 800790c:	2154      	movs	r1, #84	; 0x54
 800790e:	4620      	mov	r0, r4
 8007910:	f7fd fe35 	bl	800557e <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8007914:	f607 0368 	addw	r3, r7, #2152	; 0x868
 8007918:	4618      	mov	r0, r3
 800791a:	f005 f875 	bl	800ca08 <_ZNSt6vectorIcSaIcEED1Ev>
 800791e:	f507 6308 	add.w	r3, r7, #2176	; 0x880
 8007922:	4618      	mov	r0, r3
 8007924:	f019 fc41 	bl	80211aa <_ZNSaIcED1Ev>
            this->operator[]('N').add_edge('S', Direction::STRAIGHT, {'K', 'I', 'L'}, UNIT);
 8007928:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800792c:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8007930:	214e      	movs	r1, #78	; 0x4e
 8007932:	6818      	ldr	r0, [r3, #0]
 8007934:	f001 f8a7 	bl	8008a86 <_ZN3jlb5GraphixEc>
 8007938:	4604      	mov	r4, r0
 800793a:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800793e:	f5a3 7374 	sub.w	r3, r3, #976	; 0x3d0
 8007942:	4a41      	ldr	r2, [pc, #260]	; (8007a48 <_ZN3jlb5GraphC1Ev+0x2428>)
 8007944:	6812      	ldr	r2, [r2, #0]
 8007946:	4611      	mov	r1, r2
 8007948:	8019      	strh	r1, [r3, #0]
 800794a:	3302      	adds	r3, #2
 800794c:	0c12      	lsrs	r2, r2, #16
 800794e:	701a      	strb	r2, [r3, #0]
 8007950:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8007954:	f5a3 7376 	sub.w	r3, r3, #984	; 0x3d8
 8007958:	f607 0298 	addw	r2, r7, #2200	; 0x898
 800795c:	601a      	str	r2, [r3, #0]
 800795e:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8007962:	f5a3 7376 	sub.w	r3, r3, #984	; 0x3d8
 8007966:	2203      	movs	r2, #3
 8007968:	605a      	str	r2, [r3, #4]
 800796a:	f607 039c 	addw	r3, r7, #2204	; 0x89c
 800796e:	4618      	mov	r0, r3
 8007970:	f019 fc19 	bl	80211a6 <_ZNSaIcEC1Ev>
 8007974:	f607 039c 	addw	r3, r7, #2204	; 0x89c
 8007978:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 800797c:	f5a2 7276 	sub.w	r2, r2, #984	; 0x3d8
 8007980:	f607 0084 	addw	r0, r7, #2180	; 0x884
 8007984:	ca06      	ldmia	r2, {r1, r2}
 8007986:	f005 f8d1 	bl	800cb2c <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 800798a:	f607 0384 	addw	r3, r7, #2180	; 0x884
 800798e:	ed9f 0a2f 	vldr	s0, [pc, #188]	; 8007a4c <_ZN3jlb5GraphC1Ev+0x242c>
 8007992:	2202      	movs	r2, #2
 8007994:	2153      	movs	r1, #83	; 0x53
 8007996:	4620      	mov	r0, r4
 8007998:	f7fd fdf1 	bl	800557e <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 800799c:	f607 0384 	addw	r3, r7, #2180	; 0x884
 80079a0:	4618      	mov	r0, r3
 80079a2:	f005 f831 	bl	800ca08 <_ZNSt6vectorIcSaIcEED1Ev>
 80079a6:	f607 039c 	addw	r3, r7, #2204	; 0x89c
 80079aa:	4618      	mov	r0, r3
 80079ac:	f019 fbfd 	bl	80211aa <_ZNSaIcED1Ev>
            this->operator[]('N').add_edge('R', Direction::RIGHT, {'K', 'I', 'L'}, QUARTER_CIRCLE);
 80079b0:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80079b4:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 80079b8:	214e      	movs	r1, #78	; 0x4e
 80079ba:	6818      	ldr	r0, [r3, #0]
 80079bc:	f001 f863 	bl	8008a86 <_ZN3jlb5GraphixEc>
 80079c0:	4604      	mov	r4, r0
 80079c2:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80079c6:	f5a3 736d 	sub.w	r3, r3, #948	; 0x3b4
 80079ca:	4a1f      	ldr	r2, [pc, #124]	; (8007a48 <_ZN3jlb5GraphC1Ev+0x2428>)
 80079cc:	6812      	ldr	r2, [r2, #0]
 80079ce:	4611      	mov	r1, r2
 80079d0:	8019      	strh	r1, [r3, #0]
 80079d2:	3302      	adds	r3, #2
 80079d4:	0c12      	lsrs	r2, r2, #16
 80079d6:	701a      	strb	r2, [r3, #0]
 80079d8:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80079dc:	f5a3 736f 	sub.w	r3, r3, #956	; 0x3bc
 80079e0:	f607 02b4 	addw	r2, r7, #2228	; 0x8b4
 80079e4:	601a      	str	r2, [r3, #0]
 80079e6:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80079ea:	f5a3 736f 	sub.w	r3, r3, #956	; 0x3bc
 80079ee:	2203      	movs	r2, #3
 80079f0:	605a      	str	r2, [r3, #4]
 80079f2:	f607 03b8 	addw	r3, r7, #2232	; 0x8b8
 80079f6:	4618      	mov	r0, r3
 80079f8:	f019 fbd5 	bl	80211a6 <_ZNSaIcEC1Ev>
 80079fc:	f607 03b8 	addw	r3, r7, #2232	; 0x8b8
 8007a00:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8007a04:	f5a2 726f 	sub.w	r2, r2, #956	; 0x3bc
 8007a08:	f507 600a 	add.w	r0, r7, #2208	; 0x8a0
 8007a0c:	ca06      	ldmia	r2, {r1, r2}
 8007a0e:	f005 f88d 	bl	800cb2c <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8007a12:	f507 630a 	add.w	r3, r7, #2208	; 0x8a0
 8007a16:	ed9f 0a09 	vldr	s0, [pc, #36]	; 8007a3c <_ZN3jlb5GraphC1Ev+0x241c>
 8007a1a:	2201      	movs	r2, #1
 8007a1c:	2152      	movs	r1, #82	; 0x52
 8007a1e:	4620      	mov	r0, r4
 8007a20:	f7fd fdad 	bl	800557e <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8007a24:	f507 630a 	add.w	r3, r7, #2208	; 0x8a0
 8007a28:	4618      	mov	r0, r3
 8007a2a:	f004 ffed 	bl	800ca08 <_ZNSt6vectorIcSaIcEED1Ev>
 8007a2e:	f607 03b8 	addw	r3, r7, #2232	; 0x8b8
 8007a32:	4618      	mov	r0, r3
 8007a34:	e00c      	b.n	8007a50 <_ZN3jlb5GraphC1Ev+0x2430>
 8007a36:	bf00      	nop
 8007a38:	08025dd8 	.word	0x08025dd8
 8007a3c:	3f71463a 	.word	0x3f71463a
 8007a40:	08025ddc 	.word	0x08025ddc
 8007a44:	3f99999a 	.word	0x3f99999a
 8007a48:	08025de0 	.word	0x08025de0
 8007a4c:	3f19999a 	.word	0x3f19999a
 8007a50:	f019 fbab 	bl	80211aa <_ZNSaIcED1Ev>
            this->operator[]('O').add_edge('L', Direction::LEFT, {'T', 'U', 'W'}, QUARTER_CIRCLE);
 8007a54:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8007a58:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8007a5c:	214f      	movs	r1, #79	; 0x4f
 8007a5e:	6818      	ldr	r0, [r3, #0]
 8007a60:	f001 f811 	bl	8008a86 <_ZN3jlb5GraphixEc>
 8007a64:	4604      	mov	r4, r0
 8007a66:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8007a6a:	f5a3 7366 	sub.w	r3, r3, #920	; 0x398
 8007a6e:	4aeb      	ldr	r2, [pc, #940]	; (8007e1c <_ZN3jlb5GraphC1Ev+0x27fc>)
 8007a70:	6812      	ldr	r2, [r2, #0]
 8007a72:	4611      	mov	r1, r2
 8007a74:	8019      	strh	r1, [r3, #0]
 8007a76:	3302      	adds	r3, #2
 8007a78:	0c12      	lsrs	r2, r2, #16
 8007a7a:	701a      	strb	r2, [r3, #0]
 8007a7c:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8007a80:	f5a3 7368 	sub.w	r3, r3, #928	; 0x3a0
 8007a84:	f507 620d 	add.w	r2, r7, #2256	; 0x8d0
 8007a88:	601a      	str	r2, [r3, #0]
 8007a8a:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8007a8e:	f5a3 7368 	sub.w	r3, r3, #928	; 0x3a0
 8007a92:	2203      	movs	r2, #3
 8007a94:	605a      	str	r2, [r3, #4]
 8007a96:	f607 03d4 	addw	r3, r7, #2260	; 0x8d4
 8007a9a:	4618      	mov	r0, r3
 8007a9c:	f019 fb83 	bl	80211a6 <_ZNSaIcEC1Ev>
 8007aa0:	f607 03d4 	addw	r3, r7, #2260	; 0x8d4
 8007aa4:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8007aa8:	f5a2 7268 	sub.w	r2, r2, #928	; 0x3a0
 8007aac:	f607 00bc 	addw	r0, r7, #2236	; 0x8bc
 8007ab0:	ca06      	ldmia	r2, {r1, r2}
 8007ab2:	f005 f83b 	bl	800cb2c <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8007ab6:	f607 03bc 	addw	r3, r7, #2236	; 0x8bc
 8007aba:	ed9f 0adc 	vldr	s0, [pc, #880]	; 8007e2c <_ZN3jlb5GraphC1Ev+0x280c>
 8007abe:	2200      	movs	r2, #0
 8007ac0:	214c      	movs	r1, #76	; 0x4c
 8007ac2:	4620      	mov	r0, r4
 8007ac4:	f7fd fd5b 	bl	800557e <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8007ac8:	f607 03bc 	addw	r3, r7, #2236	; 0x8bc
 8007acc:	4618      	mov	r0, r3
 8007ace:	f004 ff9b 	bl	800ca08 <_ZNSt6vectorIcSaIcEED1Ev>
 8007ad2:	f607 03d4 	addw	r3, r7, #2260	; 0x8d4
 8007ad6:	4618      	mov	r0, r3
 8007ad8:	f019 fb67 	bl	80211aa <_ZNSaIcED1Ev>
            this->operator[]('O').add_edge('U', Direction::LEFT, {'L'}, QUARTER_CIRCLE);
 8007adc:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8007ae0:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8007ae4:	214f      	movs	r1, #79	; 0x4f
 8007ae6:	6818      	ldr	r0, [r3, #0]
 8007ae8:	f000 ffcd 	bl	8008a86 <_ZN3jlb5GraphixEc>
 8007aec:	4604      	mov	r4, r0
 8007aee:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8007af2:	f5a3 735f 	sub.w	r3, r3, #892	; 0x37c
 8007af6:	224c      	movs	r2, #76	; 0x4c
 8007af8:	701a      	strb	r2, [r3, #0]
 8007afa:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8007afe:	f5a3 7361 	sub.w	r3, r3, #900	; 0x384
 8007b02:	f607 02ec 	addw	r2, r7, #2284	; 0x8ec
 8007b06:	601a      	str	r2, [r3, #0]
 8007b08:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8007b0c:	f5a3 7361 	sub.w	r3, r3, #900	; 0x384
 8007b10:	2201      	movs	r2, #1
 8007b12:	605a      	str	r2, [r3, #4]
 8007b14:	f507 630f 	add.w	r3, r7, #2288	; 0x8f0
 8007b18:	4618      	mov	r0, r3
 8007b1a:	f019 fb44 	bl	80211a6 <_ZNSaIcEC1Ev>
 8007b1e:	f507 630f 	add.w	r3, r7, #2288	; 0x8f0
 8007b22:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8007b26:	f5a2 7261 	sub.w	r2, r2, #900	; 0x384
 8007b2a:	f607 00d8 	addw	r0, r7, #2264	; 0x8d8
 8007b2e:	ca06      	ldmia	r2, {r1, r2}
 8007b30:	f004 fffc 	bl	800cb2c <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8007b34:	f607 03d8 	addw	r3, r7, #2264	; 0x8d8
 8007b38:	ed9f 0abc 	vldr	s0, [pc, #752]	; 8007e2c <_ZN3jlb5GraphC1Ev+0x280c>
 8007b3c:	2200      	movs	r2, #0
 8007b3e:	2155      	movs	r1, #85	; 0x55
 8007b40:	4620      	mov	r0, r4
 8007b42:	f7fd fd1c 	bl	800557e <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8007b46:	f607 03d8 	addw	r3, r7, #2264	; 0x8d8
 8007b4a:	4618      	mov	r0, r3
 8007b4c:	f004 ff5c 	bl	800ca08 <_ZNSt6vectorIcSaIcEED1Ev>
 8007b50:	f507 630f 	add.w	r3, r7, #2288	; 0x8f0
 8007b54:	4618      	mov	r0, r3
 8007b56:	f019 fb28 	bl	80211aa <_ZNSaIcED1Ev>
            this->operator[]('O').add_edge('W', Direction::STRAIGHT, {'L'}, UNIT + QUARTER_CIRCLE);
 8007b5a:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8007b5e:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8007b62:	214f      	movs	r1, #79	; 0x4f
 8007b64:	6818      	ldr	r0, [r3, #0]
 8007b66:	f000 ff8e 	bl	8008a86 <_ZN3jlb5GraphixEc>
 8007b6a:	4604      	mov	r4, r0
 8007b6c:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8007b70:	f5a3 7358 	sub.w	r3, r3, #864	; 0x360
 8007b74:	224c      	movs	r2, #76	; 0x4c
 8007b76:	701a      	strb	r2, [r3, #0]
 8007b78:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8007b7c:	f5a3 735a 	sub.w	r3, r3, #872	; 0x368
 8007b80:	f607 1208 	addw	r2, r7, #2312	; 0x908
 8007b84:	601a      	str	r2, [r3, #0]
 8007b86:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8007b8a:	f5a3 735a 	sub.w	r3, r3, #872	; 0x368
 8007b8e:	2201      	movs	r2, #1
 8007b90:	605a      	str	r2, [r3, #4]
 8007b92:	f607 130c 	addw	r3, r7, #2316	; 0x90c
 8007b96:	4618      	mov	r0, r3
 8007b98:	f019 fb05 	bl	80211a6 <_ZNSaIcEC1Ev>
 8007b9c:	f607 130c 	addw	r3, r7, #2316	; 0x90c
 8007ba0:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8007ba4:	f5a2 725a 	sub.w	r2, r2, #872	; 0x368
 8007ba8:	f607 00f4 	addw	r0, r7, #2292	; 0x8f4
 8007bac:	ca06      	ldmia	r2, {r1, r2}
 8007bae:	f004 ffbd 	bl	800cb2c <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8007bb2:	f607 03f4 	addw	r3, r7, #2292	; 0x8f4
 8007bb6:	ed9f 0a9a 	vldr	s0, [pc, #616]	; 8007e20 <_ZN3jlb5GraphC1Ev+0x2800>
 8007bba:	2202      	movs	r2, #2
 8007bbc:	2157      	movs	r1, #87	; 0x57
 8007bbe:	4620      	mov	r0, r4
 8007bc0:	f7fd fcdd 	bl	800557e <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8007bc4:	f607 03f4 	addw	r3, r7, #2292	; 0x8f4
 8007bc8:	4618      	mov	r0, r3
 8007bca:	f004 ff1d 	bl	800ca08 <_ZNSt6vectorIcSaIcEED1Ev>
 8007bce:	f607 130c 	addw	r3, r7, #2316	; 0x90c
 8007bd2:	4618      	mov	r0, r3
 8007bd4:	f019 fae9 	bl	80211aa <_ZNSaIcED1Ev>
            this->operator[]('O').add_edge('T', Direction::RIGHT, {'L'}, QUARTER_CIRCLE);
 8007bd8:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8007bdc:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8007be0:	214f      	movs	r1, #79	; 0x4f
 8007be2:	6818      	ldr	r0, [r3, #0]
 8007be4:	f000 ff4f 	bl	8008a86 <_ZN3jlb5GraphixEc>
 8007be8:	4604      	mov	r4, r0
 8007bea:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8007bee:	f5a3 7351 	sub.w	r3, r3, #836	; 0x344
 8007bf2:	224c      	movs	r2, #76	; 0x4c
 8007bf4:	701a      	strb	r2, [r3, #0]
 8007bf6:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8007bfa:	f5a3 7353 	sub.w	r3, r3, #844	; 0x34c
 8007bfe:	f607 1224 	addw	r2, r7, #2340	; 0x924
 8007c02:	601a      	str	r2, [r3, #0]
 8007c04:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8007c08:	f5a3 7353 	sub.w	r3, r3, #844	; 0x34c
 8007c0c:	2201      	movs	r2, #1
 8007c0e:	605a      	str	r2, [r3, #4]
 8007c10:	f607 1328 	addw	r3, r7, #2344	; 0x928
 8007c14:	4618      	mov	r0, r3
 8007c16:	f019 fac6 	bl	80211a6 <_ZNSaIcEC1Ev>
 8007c1a:	f607 1328 	addw	r3, r7, #2344	; 0x928
 8007c1e:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8007c22:	f5a2 7253 	sub.w	r2, r2, #844	; 0x34c
 8007c26:	f507 6011 	add.w	r0, r7, #2320	; 0x910
 8007c2a:	ca06      	ldmia	r2, {r1, r2}
 8007c2c:	f004 ff7e 	bl	800cb2c <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8007c30:	f507 6311 	add.w	r3, r7, #2320	; 0x910
 8007c34:	ed9f 0a7d 	vldr	s0, [pc, #500]	; 8007e2c <_ZN3jlb5GraphC1Ev+0x280c>
 8007c38:	2201      	movs	r2, #1
 8007c3a:	2154      	movs	r1, #84	; 0x54
 8007c3c:	4620      	mov	r0, r4
 8007c3e:	f7fd fc9e 	bl	800557e <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8007c42:	f507 6311 	add.w	r3, r7, #2320	; 0x910
 8007c46:	4618      	mov	r0, r3
 8007c48:	f004 fede 	bl	800ca08 <_ZNSt6vectorIcSaIcEED1Ev>
 8007c4c:	f607 1328 	addw	r3, r7, #2344	; 0x928
 8007c50:	4618      	mov	r0, r3
 8007c52:	f019 faaa 	bl	80211aa <_ZNSaIcED1Ev>
            this->operator[]('P').add_edge('M', Direction::LEFT, {'P'}, QUARTER_CIRCLE);
 8007c56:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8007c5a:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8007c5e:	2150      	movs	r1, #80	; 0x50
 8007c60:	6818      	ldr	r0, [r3, #0]
 8007c62:	f000 ff10 	bl	8008a86 <_ZN3jlb5GraphixEc>
 8007c66:	4604      	mov	r4, r0
 8007c68:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8007c6c:	f5a3 734a 	sub.w	r3, r3, #808	; 0x328
 8007c70:	2250      	movs	r2, #80	; 0x50
 8007c72:	701a      	strb	r2, [r3, #0]
 8007c74:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8007c78:	f5a3 734c 	sub.w	r3, r3, #816	; 0x330
 8007c7c:	f507 6214 	add.w	r2, r7, #2368	; 0x940
 8007c80:	601a      	str	r2, [r3, #0]
 8007c82:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8007c86:	f5a3 734c 	sub.w	r3, r3, #816	; 0x330
 8007c8a:	2201      	movs	r2, #1
 8007c8c:	605a      	str	r2, [r3, #4]
 8007c8e:	f607 1344 	addw	r3, r7, #2372	; 0x944
 8007c92:	4618      	mov	r0, r3
 8007c94:	f019 fa87 	bl	80211a6 <_ZNSaIcEC1Ev>
 8007c98:	f607 1344 	addw	r3, r7, #2372	; 0x944
 8007c9c:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8007ca0:	f5a2 724c 	sub.w	r2, r2, #816	; 0x330
 8007ca4:	f607 102c 	addw	r0, r7, #2348	; 0x92c
 8007ca8:	ca06      	ldmia	r2, {r1, r2}
 8007caa:	f004 ff3f 	bl	800cb2c <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8007cae:	f607 132c 	addw	r3, r7, #2348	; 0x92c
 8007cb2:	ed9f 0a5e 	vldr	s0, [pc, #376]	; 8007e2c <_ZN3jlb5GraphC1Ev+0x280c>
 8007cb6:	2200      	movs	r2, #0
 8007cb8:	214d      	movs	r1, #77	; 0x4d
 8007cba:	4620      	mov	r0, r4
 8007cbc:	f7fd fc5f 	bl	800557e <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8007cc0:	f607 132c 	addw	r3, r7, #2348	; 0x92c
 8007cc4:	4618      	mov	r0, r3
 8007cc6:	f004 fe9f 	bl	800ca08 <_ZNSt6vectorIcSaIcEED1Ev>
 8007cca:	f607 1344 	addw	r3, r7, #2372	; 0x944
 8007cce:	4618      	mov	r0, r3
 8007cd0:	f019 fa6b 	bl	80211aa <_ZNSaIcED1Ev>
            this->operator[]('P').add_edge('Q', Direction::STRAIGHT, {'P'}, UNIT);
 8007cd4:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8007cd8:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8007cdc:	2150      	movs	r1, #80	; 0x50
 8007cde:	6818      	ldr	r0, [r3, #0]
 8007ce0:	f000 fed1 	bl	8008a86 <_ZN3jlb5GraphixEc>
 8007ce4:	4604      	mov	r4, r0
 8007ce6:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8007cea:	f5a3 7343 	sub.w	r3, r3, #780	; 0x30c
 8007cee:	2250      	movs	r2, #80	; 0x50
 8007cf0:	701a      	strb	r2, [r3, #0]
 8007cf2:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8007cf6:	f5a3 7345 	sub.w	r3, r3, #788	; 0x314
 8007cfa:	f607 125c 	addw	r2, r7, #2396	; 0x95c
 8007cfe:	601a      	str	r2, [r3, #0]
 8007d00:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8007d04:	f5a3 7345 	sub.w	r3, r3, #788	; 0x314
 8007d08:	2201      	movs	r2, #1
 8007d0a:	605a      	str	r2, [r3, #4]
 8007d0c:	f507 6316 	add.w	r3, r7, #2400	; 0x960
 8007d10:	4618      	mov	r0, r3
 8007d12:	f019 fa48 	bl	80211a6 <_ZNSaIcEC1Ev>
 8007d16:	f507 6316 	add.w	r3, r7, #2400	; 0x960
 8007d1a:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8007d1e:	f5a2 7245 	sub.w	r2, r2, #788	; 0x314
 8007d22:	f607 1048 	addw	r0, r7, #2376	; 0x948
 8007d26:	ca06      	ldmia	r2, {r1, r2}
 8007d28:	f004 ff00 	bl	800cb2c <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8007d2c:	f607 1348 	addw	r3, r7, #2376	; 0x948
 8007d30:	ed9f 0a3d 	vldr	s0, [pc, #244]	; 8007e28 <_ZN3jlb5GraphC1Ev+0x2808>
 8007d34:	2202      	movs	r2, #2
 8007d36:	2151      	movs	r1, #81	; 0x51
 8007d38:	4620      	mov	r0, r4
 8007d3a:	f7fd fc20 	bl	800557e <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8007d3e:	f607 1348 	addw	r3, r7, #2376	; 0x948
 8007d42:	4618      	mov	r0, r3
 8007d44:	f004 fe60 	bl	800ca08 <_ZNSt6vectorIcSaIcEED1Ev>
 8007d48:	f507 6316 	add.w	r3, r7, #2400	; 0x960
 8007d4c:	4618      	mov	r0, r3
 8007d4e:	f019 fa2c 	bl	80211aa <_ZNSaIcED1Ev>
            this->operator[]('Q').add_edge('P', Direction::STRAIGHT, {'R'}, UNIT);
 8007d52:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8007d56:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8007d5a:	2151      	movs	r1, #81	; 0x51
 8007d5c:	6818      	ldr	r0, [r3, #0]
 8007d5e:	f000 fe92 	bl	8008a86 <_ZN3jlb5GraphixEc>
 8007d62:	4604      	mov	r4, r0
 8007d64:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8007d68:	f5a3 733c 	sub.w	r3, r3, #752	; 0x2f0
 8007d6c:	2252      	movs	r2, #82	; 0x52
 8007d6e:	701a      	strb	r2, [r3, #0]
 8007d70:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8007d74:	f5a3 733e 	sub.w	r3, r3, #760	; 0x2f8
 8007d78:	f607 1278 	addw	r2, r7, #2424	; 0x978
 8007d7c:	601a      	str	r2, [r3, #0]
 8007d7e:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8007d82:	f5a3 733e 	sub.w	r3, r3, #760	; 0x2f8
 8007d86:	2201      	movs	r2, #1
 8007d88:	605a      	str	r2, [r3, #4]
 8007d8a:	f607 137c 	addw	r3, r7, #2428	; 0x97c
 8007d8e:	4618      	mov	r0, r3
 8007d90:	f019 fa09 	bl	80211a6 <_ZNSaIcEC1Ev>
 8007d94:	f607 137c 	addw	r3, r7, #2428	; 0x97c
 8007d98:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8007d9c:	f5a2 723e 	sub.w	r2, r2, #760	; 0x2f8
 8007da0:	f607 1064 	addw	r0, r7, #2404	; 0x964
 8007da4:	ca06      	ldmia	r2, {r1, r2}
 8007da6:	f004 fec1 	bl	800cb2c <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8007daa:	f607 1364 	addw	r3, r7, #2404	; 0x964
 8007dae:	ed9f 0a1e 	vldr	s0, [pc, #120]	; 8007e28 <_ZN3jlb5GraphC1Ev+0x2808>
 8007db2:	2202      	movs	r2, #2
 8007db4:	2150      	movs	r1, #80	; 0x50
 8007db6:	4620      	mov	r0, r4
 8007db8:	f7fd fbe1 	bl	800557e <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8007dbc:	f607 1364 	addw	r3, r7, #2404	; 0x964
 8007dc0:	4618      	mov	r0, r3
 8007dc2:	f004 fe21 	bl	800ca08 <_ZNSt6vectorIcSaIcEED1Ev>
 8007dc6:	f607 137c 	addw	r3, r7, #2428	; 0x97c
 8007dca:	4618      	mov	r0, r3
 8007dcc:	f019 f9ed 	bl	80211aa <_ZNSaIcED1Ev>
            this->operator[]('Q').add_edge('M', Direction::STRAIGHT, {'V', 'X'}, UNIT);
 8007dd0:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8007dd4:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8007dd8:	2151      	movs	r1, #81	; 0x51
 8007dda:	6818      	ldr	r0, [r3, #0]
 8007ddc:	f000 fe53 	bl	8008a86 <_ZN3jlb5GraphixEc>
 8007de0:	4604      	mov	r4, r0
 8007de2:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8007de6:	f5a3 7335 	sub.w	r3, r3, #724	; 0x2d4
 8007dea:	4a0e      	ldr	r2, [pc, #56]	; (8007e24 <_ZN3jlb5GraphC1Ev+0x2804>)
 8007dec:	8812      	ldrh	r2, [r2, #0]
 8007dee:	801a      	strh	r2, [r3, #0]
 8007df0:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8007df4:	f5a3 7337 	sub.w	r3, r3, #732	; 0x2dc
 8007df8:	f607 1294 	addw	r2, r7, #2452	; 0x994
 8007dfc:	601a      	str	r2, [r3, #0]
 8007dfe:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8007e02:	f5a3 7337 	sub.w	r3, r3, #732	; 0x2dc
 8007e06:	2202      	movs	r2, #2
 8007e08:	605a      	str	r2, [r3, #4]
 8007e0a:	f607 1398 	addw	r3, r7, #2456	; 0x998
 8007e0e:	4618      	mov	r0, r3
 8007e10:	f019 f9c9 	bl	80211a6 <_ZNSaIcEC1Ev>
 8007e14:	f607 1398 	addw	r3, r7, #2456	; 0x998
 8007e18:	e00c      	b.n	8007e34 <_ZN3jlb5GraphC1Ev+0x2814>
 8007e1a:	bf00      	nop
 8007e1c:	08025de4 	.word	0x08025de4
 8007e20:	3fc56fea 	.word	0x3fc56fea
 8007e24:	08025de8 	.word	0x08025de8
 8007e28:	3f19999a 	.word	0x3f19999a
 8007e2c:	3f71463a 	.word	0x3f71463a
 8007e30:	401c518f 	.word	0x401c518f
 8007e34:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8007e38:	f5a2 7237 	sub.w	r2, r2, #732	; 0x2dc
 8007e3c:	f507 6018 	add.w	r0, r7, #2432	; 0x980
 8007e40:	ca06      	ldmia	r2, {r1, r2}
 8007e42:	f004 fe73 	bl	800cb2c <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8007e46:	f507 6318 	add.w	r3, r7, #2432	; 0x980
 8007e4a:	ed1f 0a09 	vldr	s0, [pc, #-36]	; 8007e28 <_ZN3jlb5GraphC1Ev+0x2808>
 8007e4e:	2202      	movs	r2, #2
 8007e50:	214d      	movs	r1, #77	; 0x4d
 8007e52:	4620      	mov	r0, r4
 8007e54:	f7fd fb93 	bl	800557e <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8007e58:	f507 6318 	add.w	r3, r7, #2432	; 0x980
 8007e5c:	4618      	mov	r0, r3
 8007e5e:	f004 fdd3 	bl	800ca08 <_ZNSt6vectorIcSaIcEED1Ev>
 8007e62:	f607 1398 	addw	r3, r7, #2456	; 0x998
 8007e66:	4618      	mov	r0, r3
 8007e68:	f019 f99f 	bl	80211aa <_ZNSaIcED1Ev>
            this->operator[]('Q').add_edge('R', Direction::STRAIGHT, {'P'}, UNIT);
 8007e6c:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8007e70:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8007e74:	2151      	movs	r1, #81	; 0x51
 8007e76:	6818      	ldr	r0, [r3, #0]
 8007e78:	f000 fe05 	bl	8008a86 <_ZN3jlb5GraphixEc>
 8007e7c:	4604      	mov	r4, r0
 8007e7e:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8007e82:	f5a3 732e 	sub.w	r3, r3, #696	; 0x2b8
 8007e86:	2250      	movs	r2, #80	; 0x50
 8007e88:	701a      	strb	r2, [r3, #0]
 8007e8a:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8007e8e:	f5a3 7330 	sub.w	r3, r3, #704	; 0x2c0
 8007e92:	f507 621b 	add.w	r2, r7, #2480	; 0x9b0
 8007e96:	601a      	str	r2, [r3, #0]
 8007e98:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8007e9c:	f5a3 7330 	sub.w	r3, r3, #704	; 0x2c0
 8007ea0:	2201      	movs	r2, #1
 8007ea2:	605a      	str	r2, [r3, #4]
 8007ea4:	f607 13b4 	addw	r3, r7, #2484	; 0x9b4
 8007ea8:	4618      	mov	r0, r3
 8007eaa:	f019 f97c 	bl	80211a6 <_ZNSaIcEC1Ev>
 8007eae:	f607 13b4 	addw	r3, r7, #2484	; 0x9b4
 8007eb2:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8007eb6:	f5a2 7230 	sub.w	r2, r2, #704	; 0x2c0
 8007eba:	f607 109c 	addw	r0, r7, #2460	; 0x99c
 8007ebe:	ca06      	ldmia	r2, {r1, r2}
 8007ec0:	f004 fe34 	bl	800cb2c <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8007ec4:	f607 139c 	addw	r3, r7, #2460	; 0x99c
 8007ec8:	ed1f 0a29 	vldr	s0, [pc, #-164]	; 8007e28 <_ZN3jlb5GraphC1Ev+0x2808>
 8007ecc:	2202      	movs	r2, #2
 8007ece:	2152      	movs	r1, #82	; 0x52
 8007ed0:	4620      	mov	r0, r4
 8007ed2:	f7fd fb54 	bl	800557e <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8007ed6:	f607 139c 	addw	r3, r7, #2460	; 0x99c
 8007eda:	4618      	mov	r0, r3
 8007edc:	f004 fd94 	bl	800ca08 <_ZNSt6vectorIcSaIcEED1Ev>
 8007ee0:	f607 13b4 	addw	r3, r7, #2484	; 0x9b4
 8007ee4:	4618      	mov	r0, r3
 8007ee6:	f019 f960 	bl	80211aa <_ZNSaIcED1Ev>
            this->operator[]('Q').add_edge('V', Direction::LEFT, {'M'}, QUARTER_CIRCLE);
 8007eea:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8007eee:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8007ef2:	2151      	movs	r1, #81	; 0x51
 8007ef4:	6818      	ldr	r0, [r3, #0]
 8007ef6:	f000 fdc6 	bl	8008a86 <_ZN3jlb5GraphixEc>
 8007efa:	4604      	mov	r4, r0
 8007efc:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8007f00:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 8007f04:	224d      	movs	r2, #77	; 0x4d
 8007f06:	701a      	strb	r2, [r3, #0]
 8007f08:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8007f0c:	f5a3 7329 	sub.w	r3, r3, #676	; 0x2a4
 8007f10:	f607 12cc 	addw	r2, r7, #2508	; 0x9cc
 8007f14:	601a      	str	r2, [r3, #0]
 8007f16:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8007f1a:	f5a3 7329 	sub.w	r3, r3, #676	; 0x2a4
 8007f1e:	2201      	movs	r2, #1
 8007f20:	605a      	str	r2, [r3, #4]
 8007f22:	f507 631d 	add.w	r3, r7, #2512	; 0x9d0
 8007f26:	4618      	mov	r0, r3
 8007f28:	f019 f93d 	bl	80211a6 <_ZNSaIcEC1Ev>
 8007f2c:	f507 631d 	add.w	r3, r7, #2512	; 0x9d0
 8007f30:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8007f34:	f5a2 7229 	sub.w	r2, r2, #676	; 0x2a4
 8007f38:	f607 10b8 	addw	r0, r7, #2488	; 0x9b8
 8007f3c:	ca06      	ldmia	r2, {r1, r2}
 8007f3e:	f004 fdf5 	bl	800cb2c <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8007f42:	f607 13b8 	addw	r3, r7, #2488	; 0x9b8
 8007f46:	ed1f 0a47 	vldr	s0, [pc, #-284]	; 8007e2c <_ZN3jlb5GraphC1Ev+0x280c>
 8007f4a:	2200      	movs	r2, #0
 8007f4c:	2156      	movs	r1, #86	; 0x56
 8007f4e:	4620      	mov	r0, r4
 8007f50:	f7fd fb15 	bl	800557e <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8007f54:	f607 13b8 	addw	r3, r7, #2488	; 0x9b8
 8007f58:	4618      	mov	r0, r3
 8007f5a:	f004 fd55 	bl	800ca08 <_ZNSt6vectorIcSaIcEED1Ev>
 8007f5e:	f507 631d 	add.w	r3, r7, #2512	; 0x9d0
 8007f62:	4618      	mov	r0, r3
 8007f64:	f019 f921 	bl	80211aa <_ZNSaIcED1Ev>
            this->operator[]('Q').add_edge('X', Direction::STRAIGHT, {'M'}, 2.5f * UNIT + QUARTER_CIRCLE);
 8007f68:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8007f6c:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8007f70:	2151      	movs	r1, #81	; 0x51
 8007f72:	6818      	ldr	r0, [r3, #0]
 8007f74:	f000 fd87 	bl	8008a86 <_ZN3jlb5GraphixEc>
 8007f78:	4604      	mov	r4, r0
 8007f7a:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8007f7e:	f5a3 7320 	sub.w	r3, r3, #640	; 0x280
 8007f82:	224d      	movs	r2, #77	; 0x4d
 8007f84:	701a      	strb	r2, [r3, #0]
 8007f86:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8007f8a:	f5a3 7322 	sub.w	r3, r3, #648	; 0x288
 8007f8e:	f607 12e8 	addw	r2, r7, #2536	; 0x9e8
 8007f92:	601a      	str	r2, [r3, #0]
 8007f94:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8007f98:	f5a3 7322 	sub.w	r3, r3, #648	; 0x288
 8007f9c:	2201      	movs	r2, #1
 8007f9e:	605a      	str	r2, [r3, #4]
 8007fa0:	f607 13ec 	addw	r3, r7, #2540	; 0x9ec
 8007fa4:	4618      	mov	r0, r3
 8007fa6:	f019 f8fe 	bl	80211a6 <_ZNSaIcEC1Ev>
 8007faa:	f607 13ec 	addw	r3, r7, #2540	; 0x9ec
 8007fae:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8007fb2:	f5a2 7222 	sub.w	r2, r2, #648	; 0x288
 8007fb6:	f607 10d4 	addw	r0, r7, #2516	; 0x9d4
 8007fba:	ca06      	ldmia	r2, {r1, r2}
 8007fbc:	f004 fdb6 	bl	800cb2c <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8007fc0:	f607 13d4 	addw	r3, r7, #2516	; 0x9d4
 8007fc4:	ed1f 0a66 	vldr	s0, [pc, #-408]	; 8007e30 <_ZN3jlb5GraphC1Ev+0x2810>
 8007fc8:	2202      	movs	r2, #2
 8007fca:	2158      	movs	r1, #88	; 0x58
 8007fcc:	4620      	mov	r0, r4
 8007fce:	f7fd fad6 	bl	800557e <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8007fd2:	f607 13d4 	addw	r3, r7, #2516	; 0x9d4
 8007fd6:	4618      	mov	r0, r3
 8007fd8:	f004 fd16 	bl	800ca08 <_ZNSt6vectorIcSaIcEED1Ev>
 8007fdc:	f607 13ec 	addw	r3, r7, #2540	; 0x9ec
 8007fe0:	4618      	mov	r0, r3
 8007fe2:	f019 f8e2 	bl	80211aa <_ZNSaIcED1Ev>
            this->operator[]('R').add_edge('Q', Direction::STRAIGHT, {'N', 'S'}, UNIT);
 8007fe6:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8007fea:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8007fee:	2152      	movs	r1, #82	; 0x52
 8007ff0:	6818      	ldr	r0, [r3, #0]
 8007ff2:	f000 fd48 	bl	8008a86 <_ZN3jlb5GraphixEc>
 8007ff6:	4604      	mov	r4, r0
 8007ff8:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8007ffc:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8008000:	4ae6      	ldr	r2, [pc, #920]	; (800839c <_ZN3jlb5GraphC1Ev+0x2d7c>)
 8008002:	8812      	ldrh	r2, [r2, #0]
 8008004:	801a      	strh	r2, [r3, #0]
 8008006:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800800a:	f5a3 731b 	sub.w	r3, r3, #620	; 0x26c
 800800e:	f607 2204 	addw	r2, r7, #2564	; 0xa04
 8008012:	601a      	str	r2, [r3, #0]
 8008014:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8008018:	f5a3 731b 	sub.w	r3, r3, #620	; 0x26c
 800801c:	2202      	movs	r2, #2
 800801e:	605a      	str	r2, [r3, #4]
 8008020:	f607 2308 	addw	r3, r7, #2568	; 0xa08
 8008024:	4618      	mov	r0, r3
 8008026:	f019 f8be 	bl	80211a6 <_ZNSaIcEC1Ev>
 800802a:	f607 2308 	addw	r3, r7, #2568	; 0xa08
 800802e:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8008032:	f5a2 721b 	sub.w	r2, r2, #620	; 0x26c
 8008036:	f507 601f 	add.w	r0, r7, #2544	; 0x9f0
 800803a:	ca06      	ldmia	r2, {r1, r2}
 800803c:	f004 fd76 	bl	800cb2c <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8008040:	f507 631f 	add.w	r3, r7, #2544	; 0x9f0
 8008044:	ed9f 0ad6 	vldr	s0, [pc, #856]	; 80083a0 <_ZN3jlb5GraphC1Ev+0x2d80>
 8008048:	2202      	movs	r2, #2
 800804a:	2151      	movs	r1, #81	; 0x51
 800804c:	4620      	mov	r0, r4
 800804e:	f7fd fa96 	bl	800557e <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8008052:	f507 631f 	add.w	r3, r7, #2544	; 0x9f0
 8008056:	4618      	mov	r0, r3
 8008058:	f004 fcd6 	bl	800ca08 <_ZNSt6vectorIcSaIcEED1Ev>
 800805c:	f607 2308 	addw	r3, r7, #2568	; 0xa08
 8008060:	4618      	mov	r0, r3
 8008062:	f019 f8a2 	bl	80211aa <_ZNSaIcED1Ev>
            this->operator[]('R').add_edge('M', Direction::RIGHT, {'N', 'S'}, QUARTER_CIRCLE);
 8008066:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800806a:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 800806e:	2152      	movs	r1, #82	; 0x52
 8008070:	6818      	ldr	r0, [r3, #0]
 8008072:	f000 fd08 	bl	8008a86 <_ZN3jlb5GraphixEc>
 8008076:	4604      	mov	r4, r0
 8008078:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800807c:	f5a3 7312 	sub.w	r3, r3, #584	; 0x248
 8008080:	4ac6      	ldr	r2, [pc, #792]	; (800839c <_ZN3jlb5GraphC1Ev+0x2d7c>)
 8008082:	8812      	ldrh	r2, [r2, #0]
 8008084:	801a      	strh	r2, [r3, #0]
 8008086:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800808a:	f5a3 7314 	sub.w	r3, r3, #592	; 0x250
 800808e:	f507 6222 	add.w	r2, r7, #2592	; 0xa20
 8008092:	601a      	str	r2, [r3, #0]
 8008094:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8008098:	f5a3 7314 	sub.w	r3, r3, #592	; 0x250
 800809c:	2202      	movs	r2, #2
 800809e:	605a      	str	r2, [r3, #4]
 80080a0:	f607 2324 	addw	r3, r7, #2596	; 0xa24
 80080a4:	4618      	mov	r0, r3
 80080a6:	f019 f87e 	bl	80211a6 <_ZNSaIcEC1Ev>
 80080aa:	f607 2324 	addw	r3, r7, #2596	; 0xa24
 80080ae:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 80080b2:	f5a2 7214 	sub.w	r2, r2, #592	; 0x250
 80080b6:	f607 200c 	addw	r0, r7, #2572	; 0xa0c
 80080ba:	ca06      	ldmia	r2, {r1, r2}
 80080bc:	f004 fd36 	bl	800cb2c <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 80080c0:	f607 230c 	addw	r3, r7, #2572	; 0xa0c
 80080c4:	ed9f 0ab9 	vldr	s0, [pc, #740]	; 80083ac <_ZN3jlb5GraphC1Ev+0x2d8c>
 80080c8:	2201      	movs	r2, #1
 80080ca:	214d      	movs	r1, #77	; 0x4d
 80080cc:	4620      	mov	r0, r4
 80080ce:	f7fd fa56 	bl	800557e <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 80080d2:	f607 230c 	addw	r3, r7, #2572	; 0xa0c
 80080d6:	4618      	mov	r0, r3
 80080d8:	f004 fc96 	bl	800ca08 <_ZNSt6vectorIcSaIcEED1Ev>
 80080dc:	f607 2324 	addw	r3, r7, #2596	; 0xa24
 80080e0:	4618      	mov	r0, r3
 80080e2:	f019 f862 	bl	80211aa <_ZNSaIcED1Ev>
            this->operator[]('R').add_edge('N', Direction::LEFT, {'M', 'Q'}, QUARTER_CIRCLE);
 80080e6:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80080ea:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 80080ee:	2152      	movs	r1, #82	; 0x52
 80080f0:	6818      	ldr	r0, [r3, #0]
 80080f2:	f000 fcc8 	bl	8008a86 <_ZN3jlb5GraphixEc>
 80080f6:	4604      	mov	r4, r0
 80080f8:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80080fc:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 8008100:	4aa8      	ldr	r2, [pc, #672]	; (80083a4 <_ZN3jlb5GraphC1Ev+0x2d84>)
 8008102:	8812      	ldrh	r2, [r2, #0]
 8008104:	801a      	strh	r2, [r3, #0]
 8008106:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800810a:	f5a3 730d 	sub.w	r3, r3, #564	; 0x234
 800810e:	f607 223c 	addw	r2, r7, #2620	; 0xa3c
 8008112:	601a      	str	r2, [r3, #0]
 8008114:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8008118:	f5a3 730d 	sub.w	r3, r3, #564	; 0x234
 800811c:	2202      	movs	r2, #2
 800811e:	605a      	str	r2, [r3, #4]
 8008120:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 8008124:	4618      	mov	r0, r3
 8008126:	f019 f83e 	bl	80211a6 <_ZNSaIcEC1Ev>
 800812a:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 800812e:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8008132:	f5a2 720d 	sub.w	r2, r2, #564	; 0x234
 8008136:	f607 2028 	addw	r0, r7, #2600	; 0xa28
 800813a:	ca06      	ldmia	r2, {r1, r2}
 800813c:	f004 fcf6 	bl	800cb2c <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8008140:	f607 2328 	addw	r3, r7, #2600	; 0xa28
 8008144:	ed9f 0a99 	vldr	s0, [pc, #612]	; 80083ac <_ZN3jlb5GraphC1Ev+0x2d8c>
 8008148:	2200      	movs	r2, #0
 800814a:	214e      	movs	r1, #78	; 0x4e
 800814c:	4620      	mov	r0, r4
 800814e:	f7fd fa16 	bl	800557e <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8008152:	f607 2328 	addw	r3, r7, #2600	; 0xa28
 8008156:	4618      	mov	r0, r3
 8008158:	f004 fc56 	bl	800ca08 <_ZNSt6vectorIcSaIcEED1Ev>
 800815c:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 8008160:	4618      	mov	r0, r3
 8008162:	f019 f822 	bl	80211aa <_ZNSaIcED1Ev>
            this->operator[]('R').add_edge('S', Direction::STRAIGHT, {'M', 'Q'}, UNIT);
 8008166:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800816a:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 800816e:	2152      	movs	r1, #82	; 0x52
 8008170:	6818      	ldr	r0, [r3, #0]
 8008172:	f000 fc88 	bl	8008a86 <_ZN3jlb5GraphixEc>
 8008176:	4604      	mov	r4, r0
 8008178:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800817c:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 8008180:	4a88      	ldr	r2, [pc, #544]	; (80083a4 <_ZN3jlb5GraphC1Ev+0x2d84>)
 8008182:	8812      	ldrh	r2, [r2, #0]
 8008184:	801a      	strh	r2, [r3, #0]
 8008186:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800818a:	f5a3 7306 	sub.w	r3, r3, #536	; 0x218
 800818e:	f607 2258 	addw	r2, r7, #2648	; 0xa58
 8008192:	601a      	str	r2, [r3, #0]
 8008194:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8008198:	f5a3 7306 	sub.w	r3, r3, #536	; 0x218
 800819c:	2202      	movs	r2, #2
 800819e:	605a      	str	r2, [r3, #4]
 80081a0:	f607 235c 	addw	r3, r7, #2652	; 0xa5c
 80081a4:	4618      	mov	r0, r3
 80081a6:	f018 fffe 	bl	80211a6 <_ZNSaIcEC1Ev>
 80081aa:	f607 235c 	addw	r3, r7, #2652	; 0xa5c
 80081ae:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 80081b2:	f5a2 7206 	sub.w	r2, r2, #536	; 0x218
 80081b6:	f607 2044 	addw	r0, r7, #2628	; 0xa44
 80081ba:	ca06      	ldmia	r2, {r1, r2}
 80081bc:	f004 fcb6 	bl	800cb2c <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 80081c0:	f607 2344 	addw	r3, r7, #2628	; 0xa44
 80081c4:	ed9f 0a76 	vldr	s0, [pc, #472]	; 80083a0 <_ZN3jlb5GraphC1Ev+0x2d80>
 80081c8:	2202      	movs	r2, #2
 80081ca:	2153      	movs	r1, #83	; 0x53
 80081cc:	4620      	mov	r0, r4
 80081ce:	f7fd f9d6 	bl	800557e <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 80081d2:	f607 2344 	addw	r3, r7, #2628	; 0xa44
 80081d6:	4618      	mov	r0, r3
 80081d8:	f004 fc16 	bl	800ca08 <_ZNSt6vectorIcSaIcEED1Ev>
 80081dc:	f607 235c 	addw	r3, r7, #2652	; 0xa5c
 80081e0:	4618      	mov	r0, r3
 80081e2:	f018 ffe2 	bl	80211aa <_ZNSaIcED1Ev>
            this->operator[]('S').add_edge('R', Direction::STRAIGHT, {'T'}, UNIT);
 80081e6:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80081ea:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 80081ee:	2153      	movs	r1, #83	; 0x53
 80081f0:	6818      	ldr	r0, [r3, #0]
 80081f2:	f000 fc48 	bl	8008a86 <_ZN3jlb5GraphixEc>
 80081f6:	4604      	mov	r4, r0
 80081f8:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80081fc:	f5a3 73fa 	sub.w	r3, r3, #500	; 0x1f4
 8008200:	2254      	movs	r2, #84	; 0x54
 8008202:	701a      	strb	r2, [r3, #0]
 8008204:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8008208:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800820c:	f607 2274 	addw	r2, r7, #2676	; 0xa74
 8008210:	601a      	str	r2, [r3, #0]
 8008212:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8008216:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800821a:	2201      	movs	r2, #1
 800821c:	605a      	str	r2, [r3, #4]
 800821e:	f607 2378 	addw	r3, r7, #2680	; 0xa78
 8008222:	4618      	mov	r0, r3
 8008224:	f018 ffbf 	bl	80211a6 <_ZNSaIcEC1Ev>
 8008228:	f607 2378 	addw	r3, r7, #2680	; 0xa78
 800822c:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8008230:	f5a2 72fe 	sub.w	r2, r2, #508	; 0x1fc
 8008234:	f507 6026 	add.w	r0, r7, #2656	; 0xa60
 8008238:	ca06      	ldmia	r2, {r1, r2}
 800823a:	f004 fc77 	bl	800cb2c <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 800823e:	f507 6326 	add.w	r3, r7, #2656	; 0xa60
 8008242:	ed9f 0a57 	vldr	s0, [pc, #348]	; 80083a0 <_ZN3jlb5GraphC1Ev+0x2d80>
 8008246:	2202      	movs	r2, #2
 8008248:	2152      	movs	r1, #82	; 0x52
 800824a:	4620      	mov	r0, r4
 800824c:	f7fd f997 	bl	800557e <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8008250:	f507 6326 	add.w	r3, r7, #2656	; 0xa60
 8008254:	4618      	mov	r0, r3
 8008256:	f004 fbd7 	bl	800ca08 <_ZNSt6vectorIcSaIcEED1Ev>
 800825a:	f607 2378 	addw	r3, r7, #2680	; 0xa78
 800825e:	4618      	mov	r0, r3
 8008260:	f018 ffa3 	bl	80211aa <_ZNSaIcED1Ev>
            this->operator[]('S').add_edge('N', Direction::STRAIGHT, {'V', 'W'}, UNIT);
 8008264:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8008268:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 800826c:	2153      	movs	r1, #83	; 0x53
 800826e:	6818      	ldr	r0, [r3, #0]
 8008270:	f000 fc09 	bl	8008a86 <_ZN3jlb5GraphixEc>
 8008274:	4604      	mov	r4, r0
 8008276:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800827a:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 800827e:	4a4a      	ldr	r2, [pc, #296]	; (80083a8 <_ZN3jlb5GraphC1Ev+0x2d88>)
 8008280:	8812      	ldrh	r2, [r2, #0]
 8008282:	801a      	strh	r2, [r3, #0]
 8008284:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8008288:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 800828c:	f507 6229 	add.w	r2, r7, #2704	; 0xa90
 8008290:	601a      	str	r2, [r3, #0]
 8008292:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8008296:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 800829a:	2202      	movs	r2, #2
 800829c:	605a      	str	r2, [r3, #4]
 800829e:	f607 2394 	addw	r3, r7, #2708	; 0xa94
 80082a2:	4618      	mov	r0, r3
 80082a4:	f018 ff7f 	bl	80211a6 <_ZNSaIcEC1Ev>
 80082a8:	f607 2394 	addw	r3, r7, #2708	; 0xa94
 80082ac:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 80082b0:	f5a2 72f0 	sub.w	r2, r2, #480	; 0x1e0
 80082b4:	f607 207c 	addw	r0, r7, #2684	; 0xa7c
 80082b8:	ca06      	ldmia	r2, {r1, r2}
 80082ba:	f004 fc37 	bl	800cb2c <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 80082be:	f607 237c 	addw	r3, r7, #2684	; 0xa7c
 80082c2:	ed9f 0a37 	vldr	s0, [pc, #220]	; 80083a0 <_ZN3jlb5GraphC1Ev+0x2d80>
 80082c6:	2202      	movs	r2, #2
 80082c8:	214e      	movs	r1, #78	; 0x4e
 80082ca:	4620      	mov	r0, r4
 80082cc:	f7fd f957 	bl	800557e <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 80082d0:	f607 237c 	addw	r3, r7, #2684	; 0xa7c
 80082d4:	4618      	mov	r0, r3
 80082d6:	f004 fb97 	bl	800ca08 <_ZNSt6vectorIcSaIcEED1Ev>
 80082da:	f607 2394 	addw	r3, r7, #2708	; 0xa94
 80082de:	4618      	mov	r0, r3
 80082e0:	f018 ff63 	bl	80211aa <_ZNSaIcED1Ev>
            this->operator[]('S').add_edge('T', Direction::STRAIGHT, {'R'}, UNIT);
 80082e4:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80082e8:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 80082ec:	2153      	movs	r1, #83	; 0x53
 80082ee:	6818      	ldr	r0, [r3, #0]
 80082f0:	f000 fbc9 	bl	8008a86 <_ZN3jlb5GraphixEc>
 80082f4:	4604      	mov	r4, r0
 80082f6:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80082fa:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 80082fe:	2252      	movs	r2, #82	; 0x52
 8008300:	701a      	strb	r2, [r3, #0]
 8008302:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8008306:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 800830a:	f607 22ac 	addw	r2, r7, #2732	; 0xaac
 800830e:	601a      	str	r2, [r3, #0]
 8008310:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8008314:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8008318:	2201      	movs	r2, #1
 800831a:	605a      	str	r2, [r3, #4]
 800831c:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 8008320:	4618      	mov	r0, r3
 8008322:	f018 ff40 	bl	80211a6 <_ZNSaIcEC1Ev>
 8008326:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 800832a:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 800832e:	f5a2 72e2 	sub.w	r2, r2, #452	; 0x1c4
 8008332:	f607 2098 	addw	r0, r7, #2712	; 0xa98
 8008336:	ca06      	ldmia	r2, {r1, r2}
 8008338:	f004 fbf8 	bl	800cb2c <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 800833c:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 8008340:	ed9f 0a17 	vldr	s0, [pc, #92]	; 80083a0 <_ZN3jlb5GraphC1Ev+0x2d80>
 8008344:	2202      	movs	r2, #2
 8008346:	2154      	movs	r1, #84	; 0x54
 8008348:	4620      	mov	r0, r4
 800834a:	f7fd f918 	bl	800557e <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 800834e:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 8008352:	4618      	mov	r0, r3
 8008354:	f004 fb58 	bl	800ca08 <_ZNSt6vectorIcSaIcEED1Ev>
 8008358:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 800835c:	4618      	mov	r0, r3
 800835e:	f018 ff24 	bl	80211aa <_ZNSaIcED1Ev>
            this->operator[]('S').add_edge('W', Direction::LEFT, {'N'}, QUARTER_CIRCLE);
 8008362:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8008366:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 800836a:	2153      	movs	r1, #83	; 0x53
 800836c:	6818      	ldr	r0, [r3, #0]
 800836e:	f000 fb8a 	bl	8008a86 <_ZN3jlb5GraphixEc>
 8008372:	4604      	mov	r4, r0
 8008374:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8008378:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 800837c:	224e      	movs	r2, #78	; 0x4e
 800837e:	701a      	strb	r2, [r3, #0]
 8008380:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8008384:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8008388:	f607 22c8 	addw	r2, r7, #2760	; 0xac8
 800838c:	601a      	str	r2, [r3, #0]
 800838e:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8008392:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8008396:	2201      	movs	r2, #1
 8008398:	605a      	str	r2, [r3, #4]
 800839a:	e009      	b.n	80083b0 <_ZN3jlb5GraphC1Ev+0x2d90>
 800839c:	08025dec 	.word	0x08025dec
 80083a0:	3f19999a 	.word	0x3f19999a
 80083a4:	08025df0 	.word	0x08025df0
 80083a8:	08025df4 	.word	0x08025df4
 80083ac:	3f71463a 	.word	0x3f71463a
 80083b0:	f607 23cc 	addw	r3, r7, #2764	; 0xacc
 80083b4:	4618      	mov	r0, r3
 80083b6:	f018 fef6 	bl	80211a6 <_ZNSaIcEC1Ev>
 80083ba:	f607 23cc 	addw	r3, r7, #2764	; 0xacc
 80083be:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 80083c2:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 80083c6:	f607 20b4 	addw	r0, r7, #2740	; 0xab4
 80083ca:	ca06      	ldmia	r2, {r1, r2}
 80083cc:	f004 fbae 	bl	800cb2c <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 80083d0:	f607 23b4 	addw	r3, r7, #2740	; 0xab4
 80083d4:	ed1f 0a0b 	vldr	s0, [pc, #-44]	; 80083ac <_ZN3jlb5GraphC1Ev+0x2d8c>
 80083d8:	2200      	movs	r2, #0
 80083da:	2157      	movs	r1, #87	; 0x57
 80083dc:	4620      	mov	r0, r4
 80083de:	f7fd f8ce 	bl	800557e <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 80083e2:	f607 23b4 	addw	r3, r7, #2740	; 0xab4
 80083e6:	4618      	mov	r0, r3
 80083e8:	f004 fb0e 	bl	800ca08 <_ZNSt6vectorIcSaIcEED1Ev>
 80083ec:	f607 23cc 	addw	r3, r7, #2764	; 0xacc
 80083f0:	4618      	mov	r0, r3
 80083f2:	f018 feda 	bl	80211aa <_ZNSaIcED1Ev>
            this->operator[]('S').add_edge('V', Direction::RIGHT, {'N'}, QUARTER_CIRCLE);
 80083f6:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80083fa:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 80083fe:	2153      	movs	r1, #83	; 0x53
 8008400:	6818      	ldr	r0, [r3, #0]
 8008402:	f000 fb40 	bl	8008a86 <_ZN3jlb5GraphixEc>
 8008406:	4604      	mov	r4, r0
 8008408:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800840c:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8008410:	224e      	movs	r2, #78	; 0x4e
 8008412:	701a      	strb	r2, [r3, #0]
 8008414:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8008418:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 800841c:	f607 22e4 	addw	r2, r7, #2788	; 0xae4
 8008420:	601a      	str	r2, [r3, #0]
 8008422:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8008426:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 800842a:	2201      	movs	r2, #1
 800842c:	605a      	str	r2, [r3, #4]
 800842e:	f607 23e8 	addw	r3, r7, #2792	; 0xae8
 8008432:	4618      	mov	r0, r3
 8008434:	f018 feb7 	bl	80211a6 <_ZNSaIcEC1Ev>
 8008438:	f607 23e8 	addw	r3, r7, #2792	; 0xae8
 800843c:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8008440:	f5a2 72c6 	sub.w	r2, r2, #396	; 0x18c
 8008444:	f507 602d 	add.w	r0, r7, #2768	; 0xad0
 8008448:	ca06      	ldmia	r2, {r1, r2}
 800844a:	f004 fb6f 	bl	800cb2c <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 800844e:	f507 632d 	add.w	r3, r7, #2768	; 0xad0
 8008452:	ed1f 0a2a 	vldr	s0, [pc, #-168]	; 80083ac <_ZN3jlb5GraphC1Ev+0x2d8c>
 8008456:	2201      	movs	r2, #1
 8008458:	2156      	movs	r1, #86	; 0x56
 800845a:	4620      	mov	r0, r4
 800845c:	f7fd f88f 	bl	800557e <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8008460:	f507 632d 	add.w	r3, r7, #2768	; 0xad0
 8008464:	4618      	mov	r0, r3
 8008466:	f004 facf 	bl	800ca08 <_ZNSt6vectorIcSaIcEED1Ev>
 800846a:	f607 23e8 	addw	r3, r7, #2792	; 0xae8
 800846e:	4618      	mov	r0, r3
 8008470:	f018 fe9b 	bl	80211aa <_ZNSaIcED1Ev>
            this->operator[]('T').add_edge('S', Direction::STRAIGHT, {'O', 'U'}, UNIT);
 8008474:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8008478:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 800847c:	2154      	movs	r1, #84	; 0x54
 800847e:	6818      	ldr	r0, [r3, #0]
 8008480:	f000 fb01 	bl	8008a86 <_ZN3jlb5GraphixEc>
 8008484:	4604      	mov	r4, r0
 8008486:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800848a:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 800848e:	4ae9      	ldr	r2, [pc, #932]	; (8008834 <_ZN3jlb5GraphC1Ev+0x3214>)
 8008490:	8812      	ldrh	r2, [r2, #0]
 8008492:	801a      	strh	r2, [r3, #0]
 8008494:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8008498:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 800849c:	f507 6230 	add.w	r2, r7, #2816	; 0xb00
 80084a0:	601a      	str	r2, [r3, #0]
 80084a2:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80084a6:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80084aa:	2202      	movs	r2, #2
 80084ac:	605a      	str	r2, [r3, #4]
 80084ae:	f607 3304 	addw	r3, r7, #2820	; 0xb04
 80084b2:	4618      	mov	r0, r3
 80084b4:	f018 fe77 	bl	80211a6 <_ZNSaIcEC1Ev>
 80084b8:	f607 3304 	addw	r3, r7, #2820	; 0xb04
 80084bc:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 80084c0:	f5a2 72b8 	sub.w	r2, r2, #368	; 0x170
 80084c4:	f607 20ec 	addw	r0, r7, #2796	; 0xaec
 80084c8:	ca06      	ldmia	r2, {r1, r2}
 80084ca:	f004 fb2f 	bl	800cb2c <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 80084ce:	f607 23ec 	addw	r3, r7, #2796	; 0xaec
 80084d2:	ed9f 0ad9 	vldr	s0, [pc, #868]	; 8008838 <_ZN3jlb5GraphC1Ev+0x3218>
 80084d6:	2202      	movs	r2, #2
 80084d8:	2153      	movs	r1, #83	; 0x53
 80084da:	4620      	mov	r0, r4
 80084dc:	f7fd f84f 	bl	800557e <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 80084e0:	f607 23ec 	addw	r3, r7, #2796	; 0xaec
 80084e4:	4618      	mov	r0, r3
 80084e6:	f004 fa8f 	bl	800ca08 <_ZNSt6vectorIcSaIcEED1Ev>
 80084ea:	f607 3304 	addw	r3, r7, #2820	; 0xb04
 80084ee:	4618      	mov	r0, r3
 80084f0:	f018 fe5b 	bl	80211aa <_ZNSaIcED1Ev>
            this->operator[]('T').add_edge('N', Direction::RIGHT, {'O', 'U'}, QUARTER_CIRCLE);
 80084f4:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80084f8:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 80084fc:	2154      	movs	r1, #84	; 0x54
 80084fe:	6818      	ldr	r0, [r3, #0]
 8008500:	f000 fac1 	bl	8008a86 <_ZN3jlb5GraphixEc>
 8008504:	4604      	mov	r4, r0
 8008506:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800850a:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800850e:	4ac9      	ldr	r2, [pc, #804]	; (8008834 <_ZN3jlb5GraphC1Ev+0x3214>)
 8008510:	8812      	ldrh	r2, [r2, #0]
 8008512:	801a      	strh	r2, [r3, #0]
 8008514:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8008518:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 800851c:	f607 321c 	addw	r2, r7, #2844	; 0xb1c
 8008520:	601a      	str	r2, [r3, #0]
 8008522:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8008526:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 800852a:	2202      	movs	r2, #2
 800852c:	605a      	str	r2, [r3, #4]
 800852e:	f507 6332 	add.w	r3, r7, #2848	; 0xb20
 8008532:	4618      	mov	r0, r3
 8008534:	f018 fe37 	bl	80211a6 <_ZNSaIcEC1Ev>
 8008538:	f507 6332 	add.w	r3, r7, #2848	; 0xb20
 800853c:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8008540:	f5a2 72aa 	sub.w	r2, r2, #340	; 0x154
 8008544:	f607 3008 	addw	r0, r7, #2824	; 0xb08
 8008548:	ca06      	ldmia	r2, {r1, r2}
 800854a:	f004 faef 	bl	800cb2c <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 800854e:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8008552:	ed9f 0abd 	vldr	s0, [pc, #756]	; 8008848 <_ZN3jlb5GraphC1Ev+0x3228>
 8008556:	2201      	movs	r2, #1
 8008558:	214e      	movs	r1, #78	; 0x4e
 800855a:	4620      	mov	r0, r4
 800855c:	f7fd f80f 	bl	800557e <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8008560:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8008564:	4618      	mov	r0, r3
 8008566:	f004 fa4f 	bl	800ca08 <_ZNSt6vectorIcSaIcEED1Ev>
 800856a:	f507 6332 	add.w	r3, r7, #2848	; 0xb20
 800856e:	4618      	mov	r0, r3
 8008570:	f018 fe1b 	bl	80211aa <_ZNSaIcED1Ev>
            this->operator[]('T').add_edge('O', Direction::LEFT, {'N', 'S'}, QUARTER_CIRCLE);
 8008574:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8008578:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 800857c:	2154      	movs	r1, #84	; 0x54
 800857e:	6818      	ldr	r0, [r3, #0]
 8008580:	f000 fa81 	bl	8008a86 <_ZN3jlb5GraphixEc>
 8008584:	4604      	mov	r4, r0
 8008586:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800858a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800858e:	4aab      	ldr	r2, [pc, #684]	; (800883c <_ZN3jlb5GraphC1Ev+0x321c>)
 8008590:	8812      	ldrh	r2, [r2, #0]
 8008592:	801a      	strh	r2, [r3, #0]
 8008594:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8008598:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800859c:	f607 3238 	addw	r2, r7, #2872	; 0xb38
 80085a0:	601a      	str	r2, [r3, #0]
 80085a2:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80085a6:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80085aa:	2202      	movs	r2, #2
 80085ac:	605a      	str	r2, [r3, #4]
 80085ae:	f607 333c 	addw	r3, r7, #2876	; 0xb3c
 80085b2:	4618      	mov	r0, r3
 80085b4:	f018 fdf7 	bl	80211a6 <_ZNSaIcEC1Ev>
 80085b8:	f607 333c 	addw	r3, r7, #2876	; 0xb3c
 80085bc:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 80085c0:	f5a2 729c 	sub.w	r2, r2, #312	; 0x138
 80085c4:	f607 3024 	addw	r0, r7, #2852	; 0xb24
 80085c8:	ca06      	ldmia	r2, {r1, r2}
 80085ca:	f004 faaf 	bl	800cb2c <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 80085ce:	f607 3324 	addw	r3, r7, #2852	; 0xb24
 80085d2:	ed9f 0a9d 	vldr	s0, [pc, #628]	; 8008848 <_ZN3jlb5GraphC1Ev+0x3228>
 80085d6:	2200      	movs	r2, #0
 80085d8:	214f      	movs	r1, #79	; 0x4f
 80085da:	4620      	mov	r0, r4
 80085dc:	f7fc ffcf 	bl	800557e <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 80085e0:	f607 3324 	addw	r3, r7, #2852	; 0xb24
 80085e4:	4618      	mov	r0, r3
 80085e6:	f004 fa0f 	bl	800ca08 <_ZNSt6vectorIcSaIcEED1Ev>
 80085ea:	f607 333c 	addw	r3, r7, #2876	; 0xb3c
 80085ee:	4618      	mov	r0, r3
 80085f0:	f018 fddb 	bl	80211aa <_ZNSaIcED1Ev>
            this->operator[]('T').add_edge('U', Direction::STRAIGHT, {'N', 'S'}, 2.0f * UNIT);
 80085f4:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80085f8:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 80085fc:	2154      	movs	r1, #84	; 0x54
 80085fe:	6818      	ldr	r0, [r3, #0]
 8008600:	f000 fa41 	bl	8008a86 <_ZN3jlb5GraphixEc>
 8008604:	4604      	mov	r4, r0
 8008606:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800860a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800860e:	4a8b      	ldr	r2, [pc, #556]	; (800883c <_ZN3jlb5GraphC1Ev+0x321c>)
 8008610:	8812      	ldrh	r2, [r2, #0]
 8008612:	801a      	strh	r2, [r3, #0]
 8008614:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8008618:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800861c:	f607 3254 	addw	r2, r7, #2900	; 0xb54
 8008620:	601a      	str	r2, [r3, #0]
 8008622:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8008626:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800862a:	2202      	movs	r2, #2
 800862c:	605a      	str	r2, [r3, #4]
 800862e:	f607 3358 	addw	r3, r7, #2904	; 0xb58
 8008632:	4618      	mov	r0, r3
 8008634:	f018 fdb7 	bl	80211a6 <_ZNSaIcEC1Ev>
 8008638:	f607 3358 	addw	r3, r7, #2904	; 0xb58
 800863c:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8008640:	f5a2 728e 	sub.w	r2, r2, #284	; 0x11c
 8008644:	f507 6034 	add.w	r0, r7, #2880	; 0xb40
 8008648:	ca06      	ldmia	r2, {r1, r2}
 800864a:	f004 fa6f 	bl	800cb2c <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 800864e:	f507 6334 	add.w	r3, r7, #2880	; 0xb40
 8008652:	ed9f 0a7c 	vldr	s0, [pc, #496]	; 8008844 <_ZN3jlb5GraphC1Ev+0x3224>
 8008656:	2202      	movs	r2, #2
 8008658:	2155      	movs	r1, #85	; 0x55
 800865a:	4620      	mov	r0, r4
 800865c:	f7fc ff8f 	bl	800557e <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8008660:	f507 6334 	add.w	r3, r7, #2880	; 0xb40
 8008664:	4618      	mov	r0, r3
 8008666:	f004 f9cf 	bl	800ca08 <_ZNSt6vectorIcSaIcEED1Ev>
 800866a:	f607 3358 	addw	r3, r7, #2904	; 0xb58
 800866e:	4618      	mov	r0, r3
 8008670:	f018 fd9b 	bl	80211aa <_ZNSaIcED1Ev>
            this->operator[]('U').add_edge('T', Direction::STRAIGHT, {'U'}, 2.0f * UNIT);
 8008674:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8008678:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 800867c:	2155      	movs	r1, #85	; 0x55
 800867e:	6818      	ldr	r0, [r3, #0]
 8008680:	f000 fa01 	bl	8008a86 <_ZN3jlb5GraphixEc>
 8008684:	4604      	mov	r4, r0
 8008686:	2355      	movs	r3, #85	; 0x55
 8008688:	f887 3b70 	strb.w	r3, [r7, #2928]	; 0xb70
 800868c:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8008690:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8008694:	f507 6237 	add.w	r2, r7, #2928	; 0xb70
 8008698:	601a      	str	r2, [r3, #0]
 800869a:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800869e:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80086a2:	2201      	movs	r2, #1
 80086a4:	605a      	str	r2, [r3, #4]
 80086a6:	f607 3374 	addw	r3, r7, #2932	; 0xb74
 80086aa:	4618      	mov	r0, r3
 80086ac:	f018 fd7b 	bl	80211a6 <_ZNSaIcEC1Ev>
 80086b0:	f607 3374 	addw	r3, r7, #2932	; 0xb74
 80086b4:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 80086b8:	f5a2 7280 	sub.w	r2, r2, #256	; 0x100
 80086bc:	f607 305c 	addw	r0, r7, #2908	; 0xb5c
 80086c0:	ca06      	ldmia	r2, {r1, r2}
 80086c2:	f004 fa33 	bl	800cb2c <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 80086c6:	f607 335c 	addw	r3, r7, #2908	; 0xb5c
 80086ca:	ed9f 0a5e 	vldr	s0, [pc, #376]	; 8008844 <_ZN3jlb5GraphC1Ev+0x3224>
 80086ce:	2202      	movs	r2, #2
 80086d0:	2154      	movs	r1, #84	; 0x54
 80086d2:	4620      	mov	r0, r4
 80086d4:	f7fc ff53 	bl	800557e <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 80086d8:	f607 335c 	addw	r3, r7, #2908	; 0xb5c
 80086dc:	4618      	mov	r0, r3
 80086de:	f004 f993 	bl	800ca08 <_ZNSt6vectorIcSaIcEED1Ev>
 80086e2:	f607 3374 	addw	r3, r7, #2932	; 0xb74
 80086e6:	4618      	mov	r0, r3
 80086e8:	f018 fd5f 	bl	80211aa <_ZNSaIcED1Ev>
            this->operator[]('U').add_edge('O', Direction::RIGHT, {'U'}, QUARTER_CIRCLE);
 80086ec:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80086f0:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 80086f4:	2155      	movs	r1, #85	; 0x55
 80086f6:	6818      	ldr	r0, [r3, #0]
 80086f8:	f000 f9c5 	bl	8008a86 <_ZN3jlb5GraphixEc>
 80086fc:	4604      	mov	r4, r0
 80086fe:	2355      	movs	r3, #85	; 0x55
 8008700:	f887 3b8c 	strb.w	r3, [r7, #2956]	; 0xb8c
 8008704:	f607 338c 	addw	r3, r7, #2956	; 0xb8c
 8008708:	f8c7 3b84 	str.w	r3, [r7, #2948]	; 0xb84
 800870c:	2301      	movs	r3, #1
 800870e:	f8c7 3b88 	str.w	r3, [r7, #2952]	; 0xb88
 8008712:	f507 6339 	add.w	r3, r7, #2960	; 0xb90
 8008716:	4618      	mov	r0, r3
 8008718:	f018 fd45 	bl	80211a6 <_ZNSaIcEC1Ev>
 800871c:	f507 6339 	add.w	r3, r7, #2960	; 0xb90
 8008720:	f607 3078 	addw	r0, r7, #2936	; 0xb78
 8008724:	f607 3284 	addw	r2, r7, #2948	; 0xb84
 8008728:	ca06      	ldmia	r2, {r1, r2}
 800872a:	f004 f9ff 	bl	800cb2c <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 800872e:	f607 3378 	addw	r3, r7, #2936	; 0xb78
 8008732:	ed9f 0a45 	vldr	s0, [pc, #276]	; 8008848 <_ZN3jlb5GraphC1Ev+0x3228>
 8008736:	2201      	movs	r2, #1
 8008738:	214f      	movs	r1, #79	; 0x4f
 800873a:	4620      	mov	r0, r4
 800873c:	f7fc ff1f 	bl	800557e <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8008740:	f607 3378 	addw	r3, r7, #2936	; 0xb78
 8008744:	4618      	mov	r0, r3
 8008746:	f004 f95f 	bl	800ca08 <_ZNSt6vectorIcSaIcEED1Ev>
 800874a:	f507 6339 	add.w	r3, r7, #2960	; 0xb90
 800874e:	4618      	mov	r0, r3
 8008750:	f018 fd2b 	bl	80211aa <_ZNSaIcED1Ev>
            this->operator[]('V').add_edge('Q', Direction::RIGHT, {'S', 'W'}, QUARTER_CIRCLE);
 8008754:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8008758:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 800875c:	2156      	movs	r1, #86	; 0x56
 800875e:	6818      	ldr	r0, [r3, #0]
 8008760:	f000 f991 	bl	8008a86 <_ZN3jlb5GraphixEc>
 8008764:	4604      	mov	r4, r0
 8008766:	4b36      	ldr	r3, [pc, #216]	; (8008840 <_ZN3jlb5GraphC1Ev+0x3220>)
 8008768:	881b      	ldrh	r3, [r3, #0]
 800876a:	f8a7 3ba8 	strh.w	r3, [r7, #2984]	; 0xba8
 800876e:	f607 33a8 	addw	r3, r7, #2984	; 0xba8
 8008772:	f8c7 3ba0 	str.w	r3, [r7, #2976]	; 0xba0
 8008776:	2302      	movs	r3, #2
 8008778:	f8c7 3ba4 	str.w	r3, [r7, #2980]	; 0xba4
 800877c:	f607 33ac 	addw	r3, r7, #2988	; 0xbac
 8008780:	4618      	mov	r0, r3
 8008782:	f018 fd10 	bl	80211a6 <_ZNSaIcEC1Ev>
 8008786:	f607 33ac 	addw	r3, r7, #2988	; 0xbac
 800878a:	f607 3094 	addw	r0, r7, #2964	; 0xb94
 800878e:	f507 623a 	add.w	r2, r7, #2976	; 0xba0
 8008792:	ca06      	ldmia	r2, {r1, r2}
 8008794:	f004 f9ca 	bl	800cb2c <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8008798:	f607 3394 	addw	r3, r7, #2964	; 0xb94
 800879c:	ed9f 0a2a 	vldr	s0, [pc, #168]	; 8008848 <_ZN3jlb5GraphC1Ev+0x3228>
 80087a0:	2201      	movs	r2, #1
 80087a2:	2151      	movs	r1, #81	; 0x51
 80087a4:	4620      	mov	r0, r4
 80087a6:	f7fc feea 	bl	800557e <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 80087aa:	f607 3394 	addw	r3, r7, #2964	; 0xb94
 80087ae:	4618      	mov	r0, r3
 80087b0:	f004 f92a 	bl	800ca08 <_ZNSt6vectorIcSaIcEED1Ev>
 80087b4:	f607 33ac 	addw	r3, r7, #2988	; 0xbac
 80087b8:	4618      	mov	r0, r3
 80087ba:	f018 fcf6 	bl	80211aa <_ZNSaIcED1Ev>
            this->operator[]('V').add_edge('S', Direction::LEFT, {'Q'}, QUARTER_CIRCLE);
 80087be:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80087c2:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 80087c6:	2156      	movs	r1, #86	; 0x56
 80087c8:	6818      	ldr	r0, [r3, #0]
 80087ca:	f000 f95c 	bl	8008a86 <_ZN3jlb5GraphixEc>
 80087ce:	4604      	mov	r4, r0
 80087d0:	2351      	movs	r3, #81	; 0x51
 80087d2:	f887 3bc4 	strb.w	r3, [r7, #3012]	; 0xbc4
 80087d6:	f607 33c4 	addw	r3, r7, #3012	; 0xbc4
 80087da:	f8c7 3bbc 	str.w	r3, [r7, #3004]	; 0xbbc
 80087de:	2301      	movs	r3, #1
 80087e0:	f8c7 3bc0 	str.w	r3, [r7, #3008]	; 0xbc0
 80087e4:	f607 33c8 	addw	r3, r7, #3016	; 0xbc8
 80087e8:	4618      	mov	r0, r3
 80087ea:	f018 fcdc 	bl	80211a6 <_ZNSaIcEC1Ev>
 80087ee:	f607 33c8 	addw	r3, r7, #3016	; 0xbc8
 80087f2:	f507 603b 	add.w	r0, r7, #2992	; 0xbb0
 80087f6:	f607 32bc 	addw	r2, r7, #3004	; 0xbbc
 80087fa:	ca06      	ldmia	r2, {r1, r2}
 80087fc:	f004 f996 	bl	800cb2c <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8008800:	f507 633b 	add.w	r3, r7, #2992	; 0xbb0
 8008804:	ed9f 0a10 	vldr	s0, [pc, #64]	; 8008848 <_ZN3jlb5GraphC1Ev+0x3228>
 8008808:	2200      	movs	r2, #0
 800880a:	2153      	movs	r1, #83	; 0x53
 800880c:	4620      	mov	r0, r4
 800880e:	f7fc feb6 	bl	800557e <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8008812:	f507 633b 	add.w	r3, r7, #2992	; 0xbb0
 8008816:	4618      	mov	r0, r3
 8008818:	f004 f8f6 	bl	800ca08 <_ZNSt6vectorIcSaIcEED1Ev>
 800881c:	f607 33c8 	addw	r3, r7, #3016	; 0xbc8
 8008820:	4618      	mov	r0, r3
 8008822:	f018 fcc2 	bl	80211aa <_ZNSaIcED1Ev>
            this->operator[]('V').add_edge('W', Direction::STRAIGHT, {'Q'}, 2.0f * UNIT);
 8008826:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800882a:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 800882e:	2156      	movs	r1, #86	; 0x56
 8008830:	6818      	ldr	r0, [r3, #0]
 8008832:	e00b      	b.n	800884c <_ZN3jlb5GraphC1Ev+0x322c>
 8008834:	08025df8 	.word	0x08025df8
 8008838:	3f19999a 	.word	0x3f19999a
 800883c:	08025dec 	.word	0x08025dec
 8008840:	08025dfc 	.word	0x08025dfc
 8008844:	3f99999a 	.word	0x3f99999a
 8008848:	3f71463a 	.word	0x3f71463a
 800884c:	f000 f91b 	bl	8008a86 <_ZN3jlb5GraphixEc>
 8008850:	4604      	mov	r4, r0
 8008852:	2351      	movs	r3, #81	; 0x51
 8008854:	f887 3be0 	strb.w	r3, [r7, #3040]	; 0xbe0
 8008858:	f507 633e 	add.w	r3, r7, #3040	; 0xbe0
 800885c:	f8c7 3bd8 	str.w	r3, [r7, #3032]	; 0xbd8
 8008860:	2301      	movs	r3, #1
 8008862:	f8c7 3bdc 	str.w	r3, [r7, #3036]	; 0xbdc
 8008866:	f607 33e4 	addw	r3, r7, #3044	; 0xbe4
 800886a:	4618      	mov	r0, r3
 800886c:	f018 fc9b 	bl	80211a6 <_ZNSaIcEC1Ev>
 8008870:	f607 33e4 	addw	r3, r7, #3044	; 0xbe4
 8008874:	f607 30cc 	addw	r0, r7, #3020	; 0xbcc
 8008878:	f607 32d8 	addw	r2, r7, #3032	; 0xbd8
 800887c:	ca06      	ldmia	r2, {r1, r2}
 800887e:	f004 f955 	bl	800cb2c <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8008882:	f607 33cc 	addw	r3, r7, #3020	; 0xbcc
 8008886:	ed1f 0a11 	vldr	s0, [pc, #-68]	; 8008844 <_ZN3jlb5GraphC1Ev+0x3224>
 800888a:	2202      	movs	r2, #2
 800888c:	2157      	movs	r1, #87	; 0x57
 800888e:	4620      	mov	r0, r4
 8008890:	f7fc fe75 	bl	800557e <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8008894:	f607 33cc 	addw	r3, r7, #3020	; 0xbcc
 8008898:	4618      	mov	r0, r3
 800889a:	f004 f8b5 	bl	800ca08 <_ZNSt6vectorIcSaIcEED1Ev>
 800889e:	f607 33e4 	addw	r3, r7, #3044	; 0xbe4
 80088a2:	4618      	mov	r0, r3
 80088a4:	f018 fc81 	bl	80211aa <_ZNSaIcED1Ev>
            this->operator[]('W').add_edge('V', Direction::STRAIGHT, {'O'}, 2.0f * UNIT);
 80088a8:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80088ac:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 80088b0:	2157      	movs	r1, #87	; 0x57
 80088b2:	6818      	ldr	r0, [r3, #0]
 80088b4:	f000 f8e7 	bl	8008a86 <_ZN3jlb5GraphixEc>
 80088b8:	4604      	mov	r4, r0
 80088ba:	234f      	movs	r3, #79	; 0x4f
 80088bc:	f887 3bfc 	strb.w	r3, [r7, #3068]	; 0xbfc
 80088c0:	f607 33fc 	addw	r3, r7, #3068	; 0xbfc
 80088c4:	f8c7 3bf4 	str.w	r3, [r7, #3060]	; 0xbf4
 80088c8:	2301      	movs	r3, #1
 80088ca:	f8c7 3bf8 	str.w	r3, [r7, #3064]	; 0xbf8
 80088ce:	f507 6340 	add.w	r3, r7, #3072	; 0xc00
 80088d2:	4618      	mov	r0, r3
 80088d4:	f018 fc67 	bl	80211a6 <_ZNSaIcEC1Ev>
 80088d8:	f507 6340 	add.w	r3, r7, #3072	; 0xc00
 80088dc:	f607 30e8 	addw	r0, r7, #3048	; 0xbe8
 80088e0:	f607 32f4 	addw	r2, r7, #3060	; 0xbf4
 80088e4:	ca06      	ldmia	r2, {r1, r2}
 80088e6:	f004 f921 	bl	800cb2c <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 80088ea:	f607 33e8 	addw	r3, r7, #3048	; 0xbe8
 80088ee:	ed1f 0a2b 	vldr	s0, [pc, #-172]	; 8008844 <_ZN3jlb5GraphC1Ev+0x3224>
 80088f2:	2202      	movs	r2, #2
 80088f4:	2156      	movs	r1, #86	; 0x56
 80088f6:	4620      	mov	r0, r4
 80088f8:	f7fc fe41 	bl	800557e <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 80088fc:	f607 33e8 	addw	r3, r7, #3048	; 0xbe8
 8008900:	4618      	mov	r0, r3
 8008902:	f004 f881 	bl	800ca08 <_ZNSt6vectorIcSaIcEED1Ev>
 8008906:	f507 6340 	add.w	r3, r7, #3072	; 0xc00
 800890a:	4618      	mov	r0, r3
 800890c:	f018 fc4d 	bl	80211aa <_ZNSaIcED1Ev>
            this->operator[]('W').add_edge('S', Direction::RIGHT, {'O'}, QUARTER_CIRCLE);
 8008910:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8008914:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8008918:	2157      	movs	r1, #87	; 0x57
 800891a:	6818      	ldr	r0, [r3, #0]
 800891c:	f000 f8b3 	bl	8008a86 <_ZN3jlb5GraphixEc>
 8008920:	4604      	mov	r4, r0
 8008922:	234f      	movs	r3, #79	; 0x4f
 8008924:	f887 3c18 	strb.w	r3, [r7, #3096]	; 0xc18
 8008928:	f607 4318 	addw	r3, r7, #3096	; 0xc18
 800892c:	f8c7 3c10 	str.w	r3, [r7, #3088]	; 0xc10
 8008930:	2301      	movs	r3, #1
 8008932:	f8c7 3c14 	str.w	r3, [r7, #3092]	; 0xc14
 8008936:	f607 431c 	addw	r3, r7, #3100	; 0xc1c
 800893a:	4618      	mov	r0, r3
 800893c:	f018 fc33 	bl	80211a6 <_ZNSaIcEC1Ev>
 8008940:	f607 431c 	addw	r3, r7, #3100	; 0xc1c
 8008944:	f607 4004 	addw	r0, r7, #3076	; 0xc04
 8008948:	f507 6241 	add.w	r2, r7, #3088	; 0xc10
 800894c:	ca06      	ldmia	r2, {r1, r2}
 800894e:	f004 f8ed 	bl	800cb2c <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8008952:	f607 4304 	addw	r3, r7, #3076	; 0xc04
 8008956:	ed1f 0a44 	vldr	s0, [pc, #-272]	; 8008848 <_ZN3jlb5GraphC1Ev+0x3228>
 800895a:	2201      	movs	r2, #1
 800895c:	2153      	movs	r1, #83	; 0x53
 800895e:	4620      	mov	r0, r4
 8008960:	f7fc fe0d 	bl	800557e <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8008964:	f607 4304 	addw	r3, r7, #3076	; 0xc04
 8008968:	4618      	mov	r0, r3
 800896a:	f004 f84d 	bl	800ca08 <_ZNSt6vectorIcSaIcEED1Ev>
 800896e:	f607 431c 	addw	r3, r7, #3100	; 0xc1c
 8008972:	4618      	mov	r0, r3
 8008974:	f018 fc19 	bl	80211aa <_ZNSaIcED1Ev>
            this->operator[]('W').add_edge('O', Direction::STRAIGHT, {'S', 'V'}, UNIT + QUARTER_CIRCLE);
 8008978:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800897c:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8008980:	2157      	movs	r1, #87	; 0x57
 8008982:	6818      	ldr	r0, [r3, #0]
 8008984:	f000 f87f 	bl	8008a86 <_ZN3jlb5GraphixEc>
 8008988:	4604      	mov	r4, r0
 800898a:	4b35      	ldr	r3, [pc, #212]	; (8008a60 <_ZN3jlb5GraphC1Ev+0x3440>)
 800898c:	881b      	ldrh	r3, [r3, #0]
 800898e:	f8a7 3c34 	strh.w	r3, [r7, #3124]	; 0xc34
 8008992:	f607 4334 	addw	r3, r7, #3124	; 0xc34
 8008996:	f8c7 3c2c 	str.w	r3, [r7, #3116]	; 0xc2c
 800899a:	2302      	movs	r3, #2
 800899c:	f8c7 3c30 	str.w	r3, [r7, #3120]	; 0xc30
 80089a0:	f607 4338 	addw	r3, r7, #3128	; 0xc38
 80089a4:	4618      	mov	r0, r3
 80089a6:	f018 fbfe 	bl	80211a6 <_ZNSaIcEC1Ev>
 80089aa:	f607 4338 	addw	r3, r7, #3128	; 0xc38
 80089ae:	f507 6042 	add.w	r0, r7, #3104	; 0xc20
 80089b2:	f607 422c 	addw	r2, r7, #3116	; 0xc2c
 80089b6:	ca06      	ldmia	r2, {r1, r2}
 80089b8:	f004 f8b8 	bl	800cb2c <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 80089bc:	f507 6342 	add.w	r3, r7, #3104	; 0xc20
 80089c0:	ed9f 0a28 	vldr	s0, [pc, #160]	; 8008a64 <_ZN3jlb5GraphC1Ev+0x3444>
 80089c4:	2202      	movs	r2, #2
 80089c6:	214f      	movs	r1, #79	; 0x4f
 80089c8:	4620      	mov	r0, r4
 80089ca:	f7fc fdd8 	bl	800557e <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 80089ce:	f507 6342 	add.w	r3, r7, #3104	; 0xc20
 80089d2:	4618      	mov	r0, r3
 80089d4:	f004 f818 	bl	800ca08 <_ZNSt6vectorIcSaIcEED1Ev>
 80089d8:	f607 4338 	addw	r3, r7, #3128	; 0xc38
 80089dc:	4618      	mov	r0, r3
 80089de:	f018 fbe4 	bl	80211aa <_ZNSaIcED1Ev>
            this->operator[]('X').add_edge('Q', Direction::STRAIGHT, {'X'}, 2.5f * UNIT + QUARTER_CIRCLE);
 80089e2:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80089e6:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 80089ea:	2158      	movs	r1, #88	; 0x58
 80089ec:	6818      	ldr	r0, [r3, #0]
 80089ee:	f000 f84a 	bl	8008a86 <_ZN3jlb5GraphixEc>
 80089f2:	4604      	mov	r4, r0
 80089f4:	2358      	movs	r3, #88	; 0x58
 80089f6:	f887 3c50 	strb.w	r3, [r7, #3152]	; 0xc50
 80089fa:	f507 6345 	add.w	r3, r7, #3152	; 0xc50
 80089fe:	f8c7 3c48 	str.w	r3, [r7, #3144]	; 0xc48
 8008a02:	2301      	movs	r3, #1
 8008a04:	f8c7 3c4c 	str.w	r3, [r7, #3148]	; 0xc4c
 8008a08:	f607 4354 	addw	r3, r7, #3156	; 0xc54
 8008a0c:	4618      	mov	r0, r3
 8008a0e:	f018 fbca 	bl	80211a6 <_ZNSaIcEC1Ev>
 8008a12:	f607 4354 	addw	r3, r7, #3156	; 0xc54
 8008a16:	f607 403c 	addw	r0, r7, #3132	; 0xc3c
 8008a1a:	f607 4248 	addw	r2, r7, #3144	; 0xc48
 8008a1e:	ca06      	ldmia	r2, {r1, r2}
 8008a20:	f004 f884 	bl	800cb2c <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8008a24:	f607 433c 	addw	r3, r7, #3132	; 0xc3c
 8008a28:	ed9f 0a0f 	vldr	s0, [pc, #60]	; 8008a68 <_ZN3jlb5GraphC1Ev+0x3448>
 8008a2c:	2202      	movs	r2, #2
 8008a2e:	2151      	movs	r1, #81	; 0x51
 8008a30:	4620      	mov	r0, r4
 8008a32:	f7fc fda4 	bl	800557e <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8008a36:	f607 433c 	addw	r3, r7, #3132	; 0xc3c
 8008a3a:	4618      	mov	r0, r3
 8008a3c:	f003 ffe4 	bl	800ca08 <_ZNSt6vectorIcSaIcEED1Ev>
 8008a40:	f607 4354 	addw	r3, r7, #3156	; 0xc54
 8008a44:	4618      	mov	r0, r3
 8008a46:	f018 fbb0 	bl	80211aa <_ZNSaIcED1Ev>
        }
 8008a4a:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8008a4e:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8008a52:	681b      	ldr	r3, [r3, #0]
 8008a54:	4618      	mov	r0, r3
 8008a56:	f607 476c 	addw	r7, r7, #3180	; 0xc6c
 8008a5a:	46bd      	mov	sp, r7
 8008a5c:	bd90      	pop	{r4, r7, pc}
 8008a5e:	bf00      	nop
 8008a60:	08025e00 	.word	0x08025e00
 8008a64:	3fc56fea 	.word	0x3fc56fea
 8008a68:	401c518f 	.word	0x401c518f

08008a6c <_ZN3jlb5GraphD1Ev>:

        ~Graph() {}
 8008a6c:	b580      	push	{r7, lr}
 8008a6e:	b082      	sub	sp, #8
 8008a70:	af00      	add	r7, sp, #0
 8008a72:	6078      	str	r0, [r7, #4]
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	4618      	mov	r0, r3
 8008a78:	f004 f82c 	bl	800cad4 <_ZNSt6vectorIN3jlb4NodeESaIS1_EED1Ev>
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	4618      	mov	r0, r3
 8008a80:	3708      	adds	r7, #8
 8008a82:	46bd      	mov	sp, r7
 8008a84:	bd80      	pop	{r7, pc}

08008a86 <_ZN3jlb5GraphixEc>:
        Node &operator[](char name)
 8008a86:	b580      	push	{r7, lr}
 8008a88:	b082      	sub	sp, #8
 8008a8a:	af00      	add	r7, sp, #0
 8008a8c:	6078      	str	r0, [r7, #4]
 8008a8e:	460b      	mov	r3, r1
 8008a90:	70fb      	strb	r3, [r7, #3]
        {
#ifdef SIMULATION
            if (nodes.empty()) throw std::runtime_error("Graph is empty");
            if (name < 'A' || name > 'X') throw std::runtime_error("Invalid node name");
#endif
            return nodes[static_cast<int>(name - 'A')];
 8008a92:	687a      	ldr	r2, [r7, #4]
 8008a94:	78fb      	ldrb	r3, [r7, #3]
 8008a96:	3b41      	subs	r3, #65	; 0x41
 8008a98:	4619      	mov	r1, r3
 8008a9a:	4610      	mov	r0, r2
 8008a9c:	f004 f867 	bl	800cb6e <_ZNSt6vectorIN3jlb4NodeESaIS1_EEixEj>
 8008aa0:	4603      	mov	r3, r0
        }
 8008aa2:	4618      	mov	r0, r3
 8008aa4:	3708      	adds	r7, #8
 8008aa6:	46bd      	mov	sp, r7
 8008aa8:	bd80      	pop	{r7, pc}

08008aaa <_ZSt16__deque_buf_sizej>:
#define _GLIBCXX_DEQUE_BUF_SIZE 512
#endif

  _GLIBCXX_CONSTEXPR inline size_t
  __deque_buf_size(size_t __size)
  { return (__size < _GLIBCXX_DEQUE_BUF_SIZE
 8008aaa:	b480      	push	{r7}
 8008aac:	b083      	sub	sp, #12
 8008aae:	af00      	add	r7, sp, #0
 8008ab0:	6078      	str	r0, [r7, #4]
	    ? size_t(_GLIBCXX_DEQUE_BUF_SIZE / __size) : size_t(1)); }
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008ab8:	d205      	bcs.n	8008ac6 <_ZSt16__deque_buf_sizej+0x1c>
 8008aba:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	fbb2 f3f3 	udiv	r3, r2, r3
 8008ac4:	e000      	b.n	8008ac8 <_ZSt16__deque_buf_sizej+0x1e>
 8008ac6:	2301      	movs	r3, #1
 8008ac8:	4618      	mov	r0, r3
 8008aca:	370c      	adds	r7, #12
 8008acc:	46bd      	mov	sp, r7
 8008ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ad2:	4770      	bx	lr

08008ad4 <_ZNSt5dequeIfSaIfEEC1Ev>:

      /**
       *  @brief  Creates a %deque with no elements.
       */
#if __cplusplus >= 201103L
      deque() = default;
 8008ad4:	b580      	push	{r7, lr}
 8008ad6:	b082      	sub	sp, #8
 8008ad8:	af00      	add	r7, sp, #0
 8008ada:	6078      	str	r0, [r7, #4]
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	4618      	mov	r0, r3
 8008ae0:	f004 f864 	bl	800cbac <_ZNSt11_Deque_baseIfSaIfEEC1Ev>
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	4618      	mov	r0, r3
 8008ae8:	3708      	adds	r7, #8
 8008aea:	46bd      	mov	sp, r7
 8008aec:	bd80      	pop	{r7, pc}

08008aee <_ZN3jlb8OdometryC1Efff>:
        float meas_lin_acc_y = 0.0f;
        float meas_lin_acc_z = 0.0f;

        uint32_t tick_counter = 0u;
        uint32_t tick_counter_prev = 0u;
        Odometry(const float x_t_ = 0.0f, const float y_t_ = 0.0f, const float theta_t_ = 0.0f) : x_t(x_t_), y_t(y_t_), theta_t(normalize_angle(theta_t_)) {}
 8008aee:	b580      	push	{r7, lr}
 8008af0:	b084      	sub	sp, #16
 8008af2:	af00      	add	r7, sp, #0
 8008af4:	60f8      	str	r0, [r7, #12]
 8008af6:	ed87 0a02 	vstr	s0, [r7, #8]
 8008afa:	edc7 0a01 	vstr	s1, [r7, #4]
 8008afe:	ed87 1a00 	vstr	s2, [r7]
 8008b02:	68fb      	ldr	r3, [r7, #12]
 8008b04:	f04f 0200 	mov.w	r2, #0
 8008b08:	601a      	str	r2, [r3, #0]
 8008b0a:	68fb      	ldr	r3, [r7, #12]
 8008b0c:	f04f 0200 	mov.w	r2, #0
 8008b10:	605a      	str	r2, [r3, #4]
 8008b12:	68fb      	ldr	r3, [r7, #12]
 8008b14:	68ba      	ldr	r2, [r7, #8]
 8008b16:	609a      	str	r2, [r3, #8]
 8008b18:	68fb      	ldr	r3, [r7, #12]
 8008b1a:	687a      	ldr	r2, [r7, #4]
 8008b1c:	60da      	str	r2, [r3, #12]
 8008b1e:	ed97 0a00 	vldr	s0, [r7]
 8008b22:	68f8      	ldr	r0, [r7, #12]
 8008b24:	f000 fa98 	bl	8009058 <_ZN3jlb8Odometry15normalize_angleEf>
 8008b28:	eef0 7a40 	vmov.f32	s15, s0
 8008b2c:	68fb      	ldr	r3, [r7, #12]
 8008b2e:	edc3 7a04 	vstr	s15, [r3, #16]
 8008b32:	68fb      	ldr	r3, [r7, #12]
 8008b34:	f04f 0200 	mov.w	r2, #0
 8008b38:	615a      	str	r2, [r3, #20]
 8008b3a:	68fb      	ldr	r3, [r7, #12]
 8008b3c:	f04f 0200 	mov.w	r2, #0
 8008b40:	619a      	str	r2, [r3, #24]
 8008b42:	68fb      	ldr	r3, [r7, #12]
 8008b44:	f04f 0200 	mov.w	r2, #0
 8008b48:	61da      	str	r2, [r3, #28]
 8008b4a:	68fb      	ldr	r3, [r7, #12]
 8008b4c:	f04f 0200 	mov.w	r2, #0
 8008b50:	621a      	str	r2, [r3, #32]
 8008b52:	68fb      	ldr	r3, [r7, #12]
 8008b54:	f04f 0200 	mov.w	r2, #0
 8008b58:	625a      	str	r2, [r3, #36]	; 0x24
 8008b5a:	68fb      	ldr	r3, [r7, #12]
 8008b5c:	f04f 0200 	mov.w	r2, #0
 8008b60:	629a      	str	r2, [r3, #40]	; 0x28
 8008b62:	68fb      	ldr	r3, [r7, #12]
 8008b64:	f04f 0200 	mov.w	r2, #0
 8008b68:	62da      	str	r2, [r3, #44]	; 0x2c
 8008b6a:	68fb      	ldr	r3, [r7, #12]
 8008b6c:	f04f 0200 	mov.w	r2, #0
 8008b70:	631a      	str	r2, [r3, #48]	; 0x30
 8008b72:	68fb      	ldr	r3, [r7, #12]
 8008b74:	2200      	movs	r2, #0
 8008b76:	635a      	str	r2, [r3, #52]	; 0x34
 8008b78:	68fb      	ldr	r3, [r7, #12]
 8008b7a:	2200      	movs	r2, #0
 8008b7c:	639a      	str	r2, [r3, #56]	; 0x38
 8008b7e:	68fb      	ldr	r3, [r7, #12]
 8008b80:	333c      	adds	r3, #60	; 0x3c
 8008b82:	4618      	mov	r0, r3
 8008b84:	f7ff ffa6 	bl	8008ad4 <_ZNSt5dequeIfSaIfEEC1Ev>
 8008b88:	68fb      	ldr	r3, [r7, #12]
 8008b8a:	3364      	adds	r3, #100	; 0x64
 8008b8c:	4618      	mov	r0, r3
 8008b8e:	f7ff ffa1 	bl	8008ad4 <_ZNSt5dequeIfSaIfEEC1Ev>
 8008b92:	68fb      	ldr	r3, [r7, #12]
 8008b94:	2201      	movs	r2, #1
 8008b96:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
 8008b9a:	68fb      	ldr	r3, [r7, #12]
 8008b9c:	4618      	mov	r0, r3
 8008b9e:	3710      	adds	r7, #16
 8008ba0:	46bd      	mov	sp, r7
 8008ba2:	bd80      	pop	{r7, pc}

08008ba4 <_ZN3jlb8OdometryD1Ev>:

        ~Odometry() {}
 8008ba4:	b580      	push	{r7, lr}
 8008ba6:	b082      	sub	sp, #8
 8008ba8:	af00      	add	r7, sp, #0
 8008baa:	6078      	str	r0, [r7, #4]
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	3364      	adds	r3, #100	; 0x64
 8008bb0:	4618      	mov	r0, r3
 8008bb2:	f004 f82e 	bl	800cc12 <_ZNSt5dequeIfSaIfEED1Ev>
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	333c      	adds	r3, #60	; 0x3c
 8008bba:	4618      	mov	r0, r3
 8008bbc:	f004 f829 	bl	800cc12 <_ZNSt5dequeIfSaIfEED1Ev>
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	4618      	mov	r0, r3
 8008bc4:	3708      	adds	r7, #8
 8008bc6:	46bd      	mov	sp, r7
 8008bc8:	bd80      	pop	{r7, pc}
 8008bca:	0000      	movs	r0, r0
 8008bcc:	0000      	movs	r0, r0
	...

08008bd0 <_ZN3jlb8Odometry12rpm_callbackEf>:

        void rpm_callback(const float wheel_rpm)
 8008bd0:	b580      	push	{r7, lr}
 8008bd2:	ed2d 8b02 	vpush	{d8}
 8008bd6:	b08c      	sub	sp, #48	; 0x30
 8008bd8:	af00      	add	r7, sp, #0
 8008bda:	6078      	str	r0, [r7, #4]
 8008bdc:	ed87 0a00 	vstr	s0, [r7]
        {
            meas_wheel_rpm = wheel_rpm;
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	683a      	ldr	r2, [r7, #0]
 8008be4:	619a      	str	r2, [r3, #24]
            float velocity = M_PI * jlb::WHEEL_DIAMETER * wheel_rpm / 60.0f;
 8008be6:	6838      	ldr	r0, [r7, #0]
 8008be8:	f7f7 fca0 	bl	800052c <__aeabi_f2d>
 8008bec:	a33e      	add	r3, pc, #248	; (adr r3, 8008ce8 <_ZN3jlb8Odometry12rpm_callbackEf+0x118>)
 8008bee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bf2:	f7f7 fcf3 	bl	80005dc <__aeabi_dmul>
 8008bf6:	4602      	mov	r2, r0
 8008bf8:	460b      	mov	r3, r1
 8008bfa:	4610      	mov	r0, r2
 8008bfc:	4619      	mov	r1, r3
 8008bfe:	f04f 0200 	mov.w	r2, #0
 8008c02:	4b37      	ldr	r3, [pc, #220]	; (8008ce0 <_ZN3jlb8Odometry12rpm_callbackEf+0x110>)
 8008c04:	f7f7 fe14 	bl	8000830 <__aeabi_ddiv>
 8008c08:	4602      	mov	r2, r0
 8008c0a:	460b      	mov	r3, r1
 8008c0c:	4610      	mov	r0, r2
 8008c0e:	4619      	mov	r1, r3
 8008c10:	f7f7 ffdc 	bl	8000bcc <__aeabi_d2f>
 8008c14:	4603      	mov	r3, r0
 8008c16:	60fb      	str	r3, [r7, #12]

            if (std::fabs(velocity) > jlb::MAX_VELOCITY) { return; }
 8008c18:	edd7 7a03 	vldr	s15, [r7, #12]
 8008c1c:	eeb0 0a67 	vmov.f32	s0, s15
 8008c20:	f7fb fda0 	bl	8004764 <_ZSt4fabsf>
 8008c24:	eef0 7a40 	vmov.f32	s15, s0
 8008c28:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 8008c2c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008c30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008c34:	bfcc      	ite	gt
 8008c36:	2301      	movgt	r3, #1
 8008c38:	2300      	movle	r3, #0
 8008c3a:	b2db      	uxtb	r3, r3
 8008c3c:	2b00      	cmp	r3, #0
 8008c3e:	d146      	bne.n	8008cce <_ZN3jlb8Odometry12rpm_callbackEf+0xfe>

            v_buffer_.push_back(velocity);
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	333c      	adds	r3, #60	; 0x3c
 8008c44:	f107 020c 	add.w	r2, r7, #12
 8008c48:	4611      	mov	r1, r2
 8008c4a:	4618      	mov	r0, r3
 8008c4c:	f004 f806 	bl	800cc5c <_ZNSt5dequeIfSaIfEE9push_backERKf>
            if (v_buffer_.size() > jlb::VELOCITY_BUFFER_SIZE) { v_buffer_.pop_front(); }
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	333c      	adds	r3, #60	; 0x3c
 8008c54:	4618      	mov	r0, r3
 8008c56:	f004 f822 	bl	800cc9e <_ZNKSt5dequeIfSaIfEE4sizeEv>
 8008c5a:	4603      	mov	r3, r0
 8008c5c:	2b01      	cmp	r3, #1
 8008c5e:	bf8c      	ite	hi
 8008c60:	2301      	movhi	r3, #1
 8008c62:	2300      	movls	r3, #0
 8008c64:	b2db      	uxtb	r3, r3
 8008c66:	2b00      	cmp	r3, #0
 8008c68:	d004      	beq.n	8008c74 <_ZN3jlb8Odometry12rpm_callbackEf+0xa4>
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	333c      	adds	r3, #60	; 0x3c
 8008c6e:	4618      	mov	r0, r3
 8008c70:	f004 f827 	bl	800ccc2 <_ZNSt5dequeIfSaIfEE9pop_frontEv>

            vx_t = std::accumulate(v_buffer_.begin(), v_buffer_.end(), 0.0f) / v_buffer_.size();
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 8008c7a:	f107 0310 	add.w	r3, r7, #16
 8008c7e:	4611      	mov	r1, r2
 8008c80:	4618      	mov	r0, r3
 8008c82:	f004 f841 	bl	800cd08 <_ZNSt5dequeIfSaIfEE5beginEv>
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 8008c8c:	f107 0320 	add.w	r3, r7, #32
 8008c90:	4611      	mov	r1, r2
 8008c92:	4618      	mov	r0, r3
 8008c94:	f004 f847 	bl	800cd26 <_ZNSt5dequeIfSaIfEE3endEv>
 8008c98:	f107 0220 	add.w	r2, r7, #32
 8008c9c:	f107 0310 	add.w	r3, r7, #16
 8008ca0:	ed9f 0a10 	vldr	s0, [pc, #64]	; 8008ce4 <_ZN3jlb8Odometry12rpm_callbackEf+0x114>
 8008ca4:	4611      	mov	r1, r2
 8008ca6:	4618      	mov	r0, r3
 8008ca8:	f004 f857 	bl	800cd5a <_ZSt10accumulateISt15_Deque_iteratorIfRfPfEfET0_T_S5_S4_>
 8008cac:	eeb0 8a40 	vmov.f32	s16, s0
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	333c      	adds	r3, #60	; 0x3c
 8008cb4:	4618      	mov	r0, r3
 8008cb6:	f003 fff2 	bl	800cc9e <_ZNKSt5dequeIfSaIfEE4sizeEv>
 8008cba:	ee07 0a90 	vmov	s15, r0
 8008cbe:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8008cc2:	eec8 7a07 	vdiv.f32	s15, s16, s14
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	edc3 7a00 	vstr	s15, [r3]
 8008ccc:	e000      	b.n	8008cd0 <_ZN3jlb8Odometry12rpm_callbackEf+0x100>
            if (std::fabs(velocity) > jlb::MAX_VELOCITY) { return; }
 8008cce:	bf00      	nop
        }
 8008cd0:	3730      	adds	r7, #48	; 0x30
 8008cd2:	46bd      	mov	sp, r7
 8008cd4:	ecbd 8b02 	vpop	{d8}
 8008cd8:	bd80      	pop	{r7, pc}
 8008cda:	bf00      	nop
 8008cdc:	f3af 8000 	nop.w
 8008ce0:	404e0000 	.word	0x404e0000
 8008ce4:	00000000 	.word	0x00000000
 8008ce8:	64af6f9d 	.word	0x64af6f9d
 8008cec:	3fd51c8b 	.word	0x3fd51c8b

08008cf0 <_ZN3jlb8Odometry12imu_callbackEffffff>:

        void imu_callback(const float ang_vel_x, const float ang_vel_y, const float ang_vel_z, const float lin_acc_x, const float lin_acc_y, const float lin_acc_z)
 8008cf0:	b580      	push	{r7, lr}
 8008cf2:	ed2d 8b02 	vpush	{d8}
 8008cf6:	b090      	sub	sp, #64	; 0x40
 8008cf8:	af00      	add	r7, sp, #0
 8008cfa:	61f8      	str	r0, [r7, #28]
 8008cfc:	ed87 0a06 	vstr	s0, [r7, #24]
 8008d00:	edc7 0a05 	vstr	s1, [r7, #20]
 8008d04:	ed87 1a04 	vstr	s2, [r7, #16]
 8008d08:	edc7 1a03 	vstr	s3, [r7, #12]
 8008d0c:	ed87 2a02 	vstr	s4, [r7, #8]
 8008d10:	edc7 2a01 	vstr	s5, [r7, #4]
        {
        	meas_ang_vel_z = ang_vel_x;
 8008d14:	69fb      	ldr	r3, [r7, #28]
 8008d16:	69ba      	ldr	r2, [r7, #24]
 8008d18:	625a      	str	r2, [r3, #36]	; 0x24
        	meas_ang_vel_z = ang_vel_y;
 8008d1a:	69fb      	ldr	r3, [r7, #28]
 8008d1c:	697a      	ldr	r2, [r7, #20]
 8008d1e:	625a      	str	r2, [r3, #36]	; 0x24
        	meas_ang_vel_z = ang_vel_z;
 8008d20:	693a      	ldr	r2, [r7, #16]
 8008d22:	69fb      	ldr	r3, [r7, #28]
 8008d24:	625a      	str	r2, [r3, #36]	; 0x24
        	meas_lin_acc_x = lin_acc_x;
 8008d26:	69fb      	ldr	r3, [r7, #28]
 8008d28:	68fa      	ldr	r2, [r7, #12]
 8008d2a:	629a      	str	r2, [r3, #40]	; 0x28
        	meas_lin_acc_x = lin_acc_y;
 8008d2c:	69fb      	ldr	r3, [r7, #28]
 8008d2e:	68ba      	ldr	r2, [r7, #8]
 8008d30:	629a      	str	r2, [r3, #40]	; 0x28
        	meas_lin_acc_x = lin_acc_z;
 8008d32:	69fb      	ldr	r3, [r7, #28]
 8008d34:	687a      	ldr	r2, [r7, #4]
 8008d36:	629a      	str	r2, [r3, #40]	; 0x28

            if (std::fabs(ang_vel_z) > jlb::MAX_YAW_RATE) { return; }
 8008d38:	edd7 7a04 	vldr	s15, [r7, #16]
 8008d3c:	eeb0 0a67 	vmov.f32	s0, s15
 8008d40:	f7fb fd10 	bl	8004764 <_ZSt4fabsf>
 8008d44:	eef0 7a40 	vmov.f32	s15, s0
 8008d48:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 8008dfc <_ZN3jlb8Odometry12imu_callbackEffffff+0x10c>
 8008d4c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008d50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008d54:	bfcc      	ite	gt
 8008d56:	2301      	movgt	r3, #1
 8008d58:	2300      	movle	r3, #0
 8008d5a:	b2db      	uxtb	r3, r3
 8008d5c:	2b00      	cmp	r3, #0
 8008d5e:	d146      	bne.n	8008dee <_ZN3jlb8Odometry12imu_callbackEffffff+0xfe>

            w_buffer_.push_back(ang_vel_z);
 8008d60:	69fb      	ldr	r3, [r7, #28]
 8008d62:	3364      	adds	r3, #100	; 0x64
 8008d64:	f107 0210 	add.w	r2, r7, #16
 8008d68:	4611      	mov	r1, r2
 8008d6a:	4618      	mov	r0, r3
 8008d6c:	f003 ff76 	bl	800cc5c <_ZNSt5dequeIfSaIfEE9push_backERKf>
            if (w_buffer_.size() > jlb::IMU_BUFFER_SIZE) { w_buffer_.pop_front(); }
 8008d70:	69fb      	ldr	r3, [r7, #28]
 8008d72:	3364      	adds	r3, #100	; 0x64
 8008d74:	4618      	mov	r0, r3
 8008d76:	f003 ff92 	bl	800cc9e <_ZNKSt5dequeIfSaIfEE4sizeEv>
 8008d7a:	4603      	mov	r3, r0
 8008d7c:	2b0a      	cmp	r3, #10
 8008d7e:	bf8c      	ite	hi
 8008d80:	2301      	movhi	r3, #1
 8008d82:	2300      	movls	r3, #0
 8008d84:	b2db      	uxtb	r3, r3
 8008d86:	2b00      	cmp	r3, #0
 8008d88:	d004      	beq.n	8008d94 <_ZN3jlb8Odometry12imu_callbackEffffff+0xa4>
 8008d8a:	69fb      	ldr	r3, [r7, #28]
 8008d8c:	3364      	adds	r3, #100	; 0x64
 8008d8e:	4618      	mov	r0, r3
 8008d90:	f003 ff97 	bl	800ccc2 <_ZNSt5dequeIfSaIfEE9pop_frontEv>

            w_t = std::accumulate(w_buffer_.begin(), w_buffer_.end(), 0.0f) / w_buffer_.size();
 8008d94:	69fb      	ldr	r3, [r7, #28]
 8008d96:	f103 0264 	add.w	r2, r3, #100	; 0x64
 8008d9a:	f107 0320 	add.w	r3, r7, #32
 8008d9e:	4611      	mov	r1, r2
 8008da0:	4618      	mov	r0, r3
 8008da2:	f003 ffb1 	bl	800cd08 <_ZNSt5dequeIfSaIfEE5beginEv>
 8008da6:	69fb      	ldr	r3, [r7, #28]
 8008da8:	f103 0264 	add.w	r2, r3, #100	; 0x64
 8008dac:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8008db0:	4611      	mov	r1, r2
 8008db2:	4618      	mov	r0, r3
 8008db4:	f003 ffb7 	bl	800cd26 <_ZNSt5dequeIfSaIfEE3endEv>
 8008db8:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8008dbc:	f107 0320 	add.w	r3, r7, #32
 8008dc0:	ed9f 0a0f 	vldr	s0, [pc, #60]	; 8008e00 <_ZN3jlb8Odometry12imu_callbackEffffff+0x110>
 8008dc4:	4611      	mov	r1, r2
 8008dc6:	4618      	mov	r0, r3
 8008dc8:	f003 ffc7 	bl	800cd5a <_ZSt10accumulateISt15_Deque_iteratorIfRfPfEfET0_T_S5_S4_>
 8008dcc:	eeb0 8a40 	vmov.f32	s16, s0
 8008dd0:	69fb      	ldr	r3, [r7, #28]
 8008dd2:	3364      	adds	r3, #100	; 0x64
 8008dd4:	4618      	mov	r0, r3
 8008dd6:	f003 ff62 	bl	800cc9e <_ZNKSt5dequeIfSaIfEE4sizeEv>
 8008dda:	ee07 0a90 	vmov	s15, r0
 8008dde:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8008de2:	eec8 7a07 	vdiv.f32	s15, s16, s14
 8008de6:	69fb      	ldr	r3, [r7, #28]
 8008de8:	edc3 7a01 	vstr	s15, [r3, #4]
 8008dec:	e000      	b.n	8008df0 <_ZN3jlb8Odometry12imu_callbackEffffff+0x100>
            if (std::fabs(ang_vel_z) > jlb::MAX_YAW_RATE) { return; }
 8008dee:	bf00      	nop
        }
 8008df0:	3740      	adds	r7, #64	; 0x40
 8008df2:	46bd      	mov	sp, r7
 8008df4:	ecbd 8b02 	vpop	{d8}
 8008df8:	bd80      	pop	{r7, pc}
 8008dfa:	bf00      	nop
 8008dfc:	4096cbe4 	.word	0x4096cbe4
	...

08008e08 <_ZN3jlb8Odometry11update_odomEv>:

        Odom update_odom()
 8008e08:	b580      	push	{r7, lr}
 8008e0a:	ed2d 8b02 	vpush	{d8}
 8008e0e:	b08c      	sub	sp, #48	; 0x30
 8008e10:	af00      	add	r7, sp, #0
 8008e12:	6178      	str	r0, [r7, #20]
        {
#ifndef SIMULATION
            // TODO: add timestamp and dt
        	tick_counter_prev = tick_counter;
 8008e14:	697b      	ldr	r3, [r7, #20]
 8008e16:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008e18:	697b      	ldr	r3, [r7, #20]
 8008e1a:	639a      	str	r2, [r3, #56]	; 0x38
        	tick_counter = HAL_GetTick();
 8008e1c:	f00b fb98 	bl	8014550 <HAL_GetTick>
 8008e20:	4602      	mov	r2, r0
 8008e22:	697b      	ldr	r3, [r7, #20]
 8008e24:	635a      	str	r2, [r3, #52]	; 0x34
            float dt = (((float)tick_counter) - ((float)(tick_counter_prev))) / 1000.0f;
 8008e26:	697b      	ldr	r3, [r7, #20]
 8008e28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008e2a:	ee07 3a90 	vmov	s15, r3
 8008e2e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8008e32:	697b      	ldr	r3, [r7, #20]
 8008e34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e36:	ee07 3a90 	vmov	s15, r3
 8008e3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008e3e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8008e42:	eddf 6a75 	vldr	s13, [pc, #468]	; 8009018 <_ZN3jlb8Odometry11update_odomEv+0x210>
 8008e46:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8008e4a:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c

            auto  update_timestamp = std::chrono::steady_clock::now();
            float dt               = std::chrono::duration_cast<std::chrono::milliseconds>(update_timestamp - odom_timestamp_).count() / 1000.0f;
#endif

            if (dt > 0.0f)
 8008e4e:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8008e52:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8008e56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008e5a:	f340 80b0 	ble.w	8008fbe <_ZN3jlb8Odometry11update_odomEv+0x1b6>
            {
                vx_t = std::fabs(vx_t) < 0.03 ? 0.0 : vx_t;
 8008e5e:	697b      	ldr	r3, [r7, #20]
 8008e60:	edd3 7a00 	vldr	s15, [r3]
 8008e64:	eeb0 0a67 	vmov.f32	s0, s15
 8008e68:	f7fb fc7c 	bl	8004764 <_ZSt4fabsf>
 8008e6c:	ee10 3a10 	vmov	r3, s0
 8008e70:	4618      	mov	r0, r3
 8008e72:	f7f7 fb5b 	bl	800052c <__aeabi_f2d>
 8008e76:	a364      	add	r3, pc, #400	; (adr r3, 8009008 <_ZN3jlb8Odometry11update_odomEv+0x200>)
 8008e78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e7c:	f7f7 fe20 	bl	8000ac0 <__aeabi_dcmplt>
 8008e80:	4603      	mov	r3, r0
 8008e82:	2b00      	cmp	r3, #0
 8008e84:	d002      	beq.n	8008e8c <_ZN3jlb8Odometry11update_odomEv+0x84>
 8008e86:	f04f 0300 	mov.w	r3, #0
 8008e8a:	e001      	b.n	8008e90 <_ZN3jlb8Odometry11update_odomEv+0x88>
 8008e8c:	697b      	ldr	r3, [r7, #20]
 8008e8e:	681b      	ldr	r3, [r3, #0]
 8008e90:	697a      	ldr	r2, [r7, #20]
 8008e92:	6013      	str	r3, [r2, #0]
                w_t  = std::fabs(w_t) < 0.015 ? 0.0 : w_t;
 8008e94:	697b      	ldr	r3, [r7, #20]
 8008e96:	edd3 7a01 	vldr	s15, [r3, #4]
 8008e9a:	eeb0 0a67 	vmov.f32	s0, s15
 8008e9e:	f7fb fc61 	bl	8004764 <_ZSt4fabsf>
 8008ea2:	ee10 3a10 	vmov	r3, s0
 8008ea6:	4618      	mov	r0, r3
 8008ea8:	f7f7 fb40 	bl	800052c <__aeabi_f2d>
 8008eac:	a358      	add	r3, pc, #352	; (adr r3, 8009010 <_ZN3jlb8Odometry11update_odomEv+0x208>)
 8008eae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008eb2:	f7f7 fe05 	bl	8000ac0 <__aeabi_dcmplt>
 8008eb6:	4603      	mov	r3, r0
 8008eb8:	2b00      	cmp	r3, #0
 8008eba:	d002      	beq.n	8008ec2 <_ZN3jlb8Odometry11update_odomEv+0xba>
 8008ebc:	f04f 0300 	mov.w	r3, #0
 8008ec0:	e001      	b.n	8008ec6 <_ZN3jlb8Odometry11update_odomEv+0xbe>
 8008ec2:	697b      	ldr	r3, [r7, #20]
 8008ec4:	685b      	ldr	r3, [r3, #4]
 8008ec6:	697a      	ldr	r2, [r7, #20]
 8008ec8:	6053      	str	r3, [r2, #4]
                // float vy_t = WHEELBASE * w_t / 2.0f;
                float vy_t = 0.0f;
 8008eca:	f04f 0300 	mov.w	r3, #0
 8008ece:	62bb      	str	r3, [r7, #40]	; 0x28

                x_t += (vx_t * std::cos(theta_t) - vy_t * std::sin(theta_t)) * dt;
 8008ed0:	697b      	ldr	r3, [r7, #20]
 8008ed2:	ed93 8a00 	vldr	s16, [r3]
 8008ed6:	697b      	ldr	r3, [r7, #20]
 8008ed8:	edd3 7a04 	vldr	s15, [r3, #16]
 8008edc:	eeb0 0a67 	vmov.f32	s0, s15
 8008ee0:	f7fb fc30 	bl	8004744 <_ZSt3cosf>
 8008ee4:	eef0 7a40 	vmov.f32	s15, s0
 8008ee8:	ee28 8a27 	vmul.f32	s16, s16, s15
 8008eec:	697b      	ldr	r3, [r7, #20]
 8008eee:	edd3 7a04 	vldr	s15, [r3, #16]
 8008ef2:	eeb0 0a67 	vmov.f32	s0, s15
 8008ef6:	f7fb fc45 	bl	8004784 <_ZSt3sinf>
 8008efa:	eeb0 7a40 	vmov.f32	s14, s0
 8008efe:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8008f02:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008f06:	ee38 7a67 	vsub.f32	s14, s16, s15
 8008f0a:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8008f0e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8008f12:	697b      	ldr	r3, [r7, #20]
 8008f14:	edd3 7a02 	vldr	s15, [r3, #8]
 8008f18:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008f1c:	697b      	ldr	r3, [r7, #20]
 8008f1e:	edc3 7a02 	vstr	s15, [r3, #8]
                y_t += (vx_t * std::sin(theta_t) + vy_t * std::cos(theta_t)) * dt;
 8008f22:	697b      	ldr	r3, [r7, #20]
 8008f24:	ed93 8a00 	vldr	s16, [r3]
 8008f28:	697b      	ldr	r3, [r7, #20]
 8008f2a:	edd3 7a04 	vldr	s15, [r3, #16]
 8008f2e:	eeb0 0a67 	vmov.f32	s0, s15
 8008f32:	f7fb fc27 	bl	8004784 <_ZSt3sinf>
 8008f36:	eef0 7a40 	vmov.f32	s15, s0
 8008f3a:	ee28 8a27 	vmul.f32	s16, s16, s15
 8008f3e:	697b      	ldr	r3, [r7, #20]
 8008f40:	edd3 7a04 	vldr	s15, [r3, #16]
 8008f44:	eeb0 0a67 	vmov.f32	s0, s15
 8008f48:	f7fb fbfc 	bl	8004744 <_ZSt3cosf>
 8008f4c:	eeb0 7a40 	vmov.f32	s14, s0
 8008f50:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8008f54:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008f58:	ee38 7a27 	vadd.f32	s14, s16, s15
 8008f5c:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8008f60:	ee27 7a27 	vmul.f32	s14, s14, s15
 8008f64:	697b      	ldr	r3, [r7, #20]
 8008f66:	edd3 7a03 	vldr	s15, [r3, #12]
 8008f6a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008f6e:	697b      	ldr	r3, [r7, #20]
 8008f70:	edc3 7a03 	vstr	s15, [r3, #12]
                theta_t = normalize_angle(theta_t + w_t * dt);
 8008f74:	697b      	ldr	r3, [r7, #20]
 8008f76:	ed93 7a04 	vldr	s14, [r3, #16]
 8008f7a:	697b      	ldr	r3, [r7, #20]
 8008f7c:	edd3 6a01 	vldr	s13, [r3, #4]
 8008f80:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8008f84:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8008f88:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008f8c:	eeb0 0a67 	vmov.f32	s0, s15
 8008f90:	6978      	ldr	r0, [r7, #20]
 8008f92:	f000 f861 	bl	8009058 <_ZN3jlb8Odometry15normalize_angleEf>
 8008f96:	eef0 7a40 	vmov.f32	s15, s0
 8008f9a:	697b      	ldr	r3, [r7, #20]
 8008f9c:	edc3 7a04 	vstr	s15, [r3, #16]

                distance_traveled_since_checkpoint += vx_t * dt;
 8008fa0:	697b      	ldr	r3, [r7, #20]
 8008fa2:	ed93 7a05 	vldr	s14, [r3, #20]
 8008fa6:	697b      	ldr	r3, [r7, #20]
 8008fa8:	edd3 6a00 	vldr	s13, [r3]
 8008fac:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8008fb0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8008fb4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008fb8:	697b      	ldr	r3, [r7, #20]
 8008fba:	edc3 7a05 	vstr	s15, [r3, #20]
            }
#ifdef SIMULATION
            odom_timestamp_ = update_timestamp > odom_timestamp_ ? update_timestamp : odom_timestamp_;
#endif
            return {vx_t, x_t, y_t, theta_t};
 8008fbe:	697b      	ldr	r3, [r7, #20]
 8008fc0:	681b      	ldr	r3, [r3, #0]
 8008fc2:	61bb      	str	r3, [r7, #24]
 8008fc4:	697b      	ldr	r3, [r7, #20]
 8008fc6:	689b      	ldr	r3, [r3, #8]
 8008fc8:	61fb      	str	r3, [r7, #28]
 8008fca:	697b      	ldr	r3, [r7, #20]
 8008fcc:	68db      	ldr	r3, [r3, #12]
 8008fce:	623b      	str	r3, [r7, #32]
 8008fd0:	697b      	ldr	r3, [r7, #20]
 8008fd2:	691b      	ldr	r3, [r3, #16]
 8008fd4:	627b      	str	r3, [r7, #36]	; 0x24
 8008fd6:	69b8      	ldr	r0, [r7, #24]
 8008fd8:	69f9      	ldr	r1, [r7, #28]
 8008fda:	6a3a      	ldr	r2, [r7, #32]
 8008fdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fde:	ee06 0a10 	vmov	s12, r0
 8008fe2:	ee06 1a90 	vmov	s13, r1
 8008fe6:	ee07 2a10 	vmov	s14, r2
 8008fea:	ee07 3a90 	vmov	s15, r3
        }
 8008fee:	eeb0 0a46 	vmov.f32	s0, s12
 8008ff2:	eef0 0a66 	vmov.f32	s1, s13
 8008ff6:	eeb0 1a47 	vmov.f32	s2, s14
 8008ffa:	eef0 1a67 	vmov.f32	s3, s15
 8008ffe:	3730      	adds	r7, #48	; 0x30
 8009000:	46bd      	mov	sp, r7
 8009002:	ecbd 8b02 	vpop	{d8}
 8009006:	bd80      	pop	{r7, pc}
 8009008:	eb851eb8 	.word	0xeb851eb8
 800900c:	3f9eb851 	.word	0x3f9eb851
 8009010:	eb851eb8 	.word	0xeb851eb8
 8009014:	3f8eb851 	.word	0x3f8eb851
 8009018:	447a0000 	.word	0x447a0000

0800901c <_ZSt4fmodIfdEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>:
    fmod(_Tp __x, _Up __y)
 800901c:	b580      	push	{r7, lr}
 800901e:	b084      	sub	sp, #16
 8009020:	af00      	add	r7, sp, #0
 8009022:	ed87 0a03 	vstr	s0, [r7, #12]
 8009026:	ed87 1b00 	vstr	d1, [r7]
      return fmod(__type(__x), __type(__y));
 800902a:	68f8      	ldr	r0, [r7, #12]
 800902c:	f7f7 fa7e 	bl	800052c <__aeabi_f2d>
 8009030:	4602      	mov	r2, r0
 8009032:	460b      	mov	r3, r1
 8009034:	ed97 1b00 	vldr	d1, [r7]
 8009038:	ec43 2b10 	vmov	d0, r2, r3
 800903c:	f018 f8c6 	bl	80211cc <fmod>
 8009040:	eeb0 7a40 	vmov.f32	s14, s0
 8009044:	eef0 7a60 	vmov.f32	s15, s1
    }
 8009048:	eeb0 0a47 	vmov.f32	s0, s14
 800904c:	eef0 0a67 	vmov.f32	s1, s15
 8009050:	3710      	adds	r7, #16
 8009052:	46bd      	mov	sp, r7
 8009054:	bd80      	pop	{r7, pc}
	...

08009058 <_ZN3jlb8Odometry15normalize_angleEf>:

        float normalize_angle(float angle)
 8009058:	b580      	push	{r7, lr}
 800905a:	b082      	sub	sp, #8
 800905c:	af00      	add	r7, sp, #0
 800905e:	6078      	str	r0, [r7, #4]
 8009060:	ed87 0a00 	vstr	s0, [r7]
        {
            angle = std::fmod(angle, 2.0f * M_PI);
 8009064:	ed9f 1b16 	vldr	d1, [pc, #88]	; 80090c0 <_ZN3jlb8Odometry15normalize_angleEf+0x68>
 8009068:	ed97 0a00 	vldr	s0, [r7]
 800906c:	f7ff ffd6 	bl	800901c <_ZSt4fmodIfdEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8009070:	ec53 2b10 	vmov	r2, r3, d0
 8009074:	4610      	mov	r0, r2
 8009076:	4619      	mov	r1, r3
 8009078:	f7f7 fda8 	bl	8000bcc <__aeabi_d2f>
 800907c:	4603      	mov	r3, r0
 800907e:	603b      	str	r3, [r7, #0]
            if (angle < 0.0f) { angle += 2.0f * M_PI; }
 8009080:	edd7 7a00 	vldr	s15, [r7]
 8009084:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8009088:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800908c:	d50f      	bpl.n	80090ae <_ZN3jlb8Odometry15normalize_angleEf+0x56>
 800908e:	6838      	ldr	r0, [r7, #0]
 8009090:	f7f7 fa4c 	bl	800052c <__aeabi_f2d>
 8009094:	a30a      	add	r3, pc, #40	; (adr r3, 80090c0 <_ZN3jlb8Odometry15normalize_angleEf+0x68>)
 8009096:	e9d3 2300 	ldrd	r2, r3, [r3]
 800909a:	f7f7 f8e9 	bl	8000270 <__adddf3>
 800909e:	4602      	mov	r2, r0
 80090a0:	460b      	mov	r3, r1
 80090a2:	4610      	mov	r0, r2
 80090a4:	4619      	mov	r1, r3
 80090a6:	f7f7 fd91 	bl	8000bcc <__aeabi_d2f>
 80090aa:	4603      	mov	r3, r0
 80090ac:	603b      	str	r3, [r7, #0]
            return angle;
 80090ae:	683b      	ldr	r3, [r7, #0]
 80090b0:	ee07 3a90 	vmov	s15, r3
        }
 80090b4:	eeb0 0a67 	vmov.f32	s0, s15
 80090b8:	3708      	adds	r7, #8
 80090ba:	46bd      	mov	sp, r7
 80090bc:	bd80      	pop	{r7, pc}
 80090be:	bf00      	nop
 80090c0:	54442d18 	.word	0x54442d18
 80090c4:	401921fb 	.word	0x401921fb

080090c8 <_ZN3jlb8Odometry10correctionEff>:

        void correction([[maybe_unused]] float x_t_, [[maybe_unused]] float y_t_)
 80090c8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80090cc:	b094      	sub	sp, #80	; 0x50
 80090ce:	af00      	add	r7, sp, #0
 80090d0:	6178      	str	r0, [r7, #20]
 80090d2:	ed87 0a04 	vstr	s0, [r7, #16]
 80090d6:	edc7 0a03 	vstr	s1, [r7, #12]
        {
            x_t = x_t_ - (SENSOR_BASE / 2.0f * std::cos(theta_t));
 80090da:	697b      	ldr	r3, [r7, #20]
 80090dc:	edd3 7a04 	vldr	s15, [r3, #16]
 80090e0:	eeb0 0a67 	vmov.f32	s0, s15
 80090e4:	f7fb fb2e 	bl	8004744 <_ZSt3cosf>
 80090e8:	eef0 7a40 	vmov.f32	s15, s0
 80090ec:	eeb5 7a00 	vmov.f32	s14, #80	; 0x3e800000  0.250
 80090f0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80090f4:	ed97 7a04 	vldr	s14, [r7, #16]
 80090f8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80090fc:	697b      	ldr	r3, [r7, #20]
 80090fe:	edc3 7a02 	vstr	s15, [r3, #8]
            y_t = y_t_ - (SENSOR_BASE / 2.0f * std::sin(theta_t));
 8009102:	697b      	ldr	r3, [r7, #20]
 8009104:	edd3 7a04 	vldr	s15, [r3, #16]
 8009108:	eeb0 0a67 	vmov.f32	s0, s15
 800910c:	f7fb fb3a 	bl	8004784 <_ZSt3sinf>
 8009110:	eef0 7a40 	vmov.f32	s15, s0
 8009114:	eeb5 7a00 	vmov.f32	s14, #80	; 0x3e800000  0.250
 8009118:	ee67 7a87 	vmul.f32	s15, s15, s14
 800911c:	ed97 7a03 	vldr	s14, [r7, #12]
 8009120:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009124:	697b      	ldr	r3, [r7, #20]
 8009126:	edc3 7a03 	vstr	s15, [r3, #12]

            // clamp theta to certain values whichever is closer
            // the values are 0, 90, 180, 270, 360

            float theta_0   = std::fabs(theta_t);
 800912a:	697b      	ldr	r3, [r7, #20]
 800912c:	edd3 7a04 	vldr	s15, [r3, #16]
 8009130:	eeb0 0a67 	vmov.f32	s0, s15
 8009134:	f7fb fb16 	bl	8004764 <_ZSt4fabsf>
 8009138:	ed87 0a13 	vstr	s0, [r7, #76]	; 0x4c
            float theta_90  = std::fabs(theta_t - M_PI / 2.0f);
 800913c:	697b      	ldr	r3, [r7, #20]
 800913e:	691b      	ldr	r3, [r3, #16]
 8009140:	4618      	mov	r0, r3
 8009142:	f7f7 f9f3 	bl	800052c <__aeabi_f2d>
 8009146:	a396      	add	r3, pc, #600	; (adr r3, 80093a0 <_ZN3jlb8Odometry10correctionEff+0x2d8>)
 8009148:	e9d3 2300 	ldrd	r2, r3, [r3]
 800914c:	f7f7 f88e 	bl	800026c <__aeabi_dsub>
 8009150:	4602      	mov	r2, r0
 8009152:	460b      	mov	r3, r1
 8009154:	603a      	str	r2, [r7, #0]
 8009156:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800915a:	607b      	str	r3, [r7, #4]
 800915c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009160:	f7f7 fd34 	bl	8000bcc <__aeabi_d2f>
 8009164:	4603      	mov	r3, r0
 8009166:	64bb      	str	r3, [r7, #72]	; 0x48
            float theta_180 = std::fabs(theta_t - M_PI);
 8009168:	697b      	ldr	r3, [r7, #20]
 800916a:	691b      	ldr	r3, [r3, #16]
 800916c:	4618      	mov	r0, r3
 800916e:	f7f7 f9dd 	bl	800052c <__aeabi_f2d>
 8009172:	a38d      	add	r3, pc, #564	; (adr r3, 80093a8 <_ZN3jlb8Odometry10correctionEff+0x2e0>)
 8009174:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009178:	f7f7 f878 	bl	800026c <__aeabi_dsub>
 800917c:	4602      	mov	r2, r0
 800917e:	460b      	mov	r3, r1
 8009180:	4692      	mov	sl, r2
 8009182:	f023 4b00 	bic.w	fp, r3, #2147483648	; 0x80000000
 8009186:	4650      	mov	r0, sl
 8009188:	4659      	mov	r1, fp
 800918a:	f7f7 fd1f 	bl	8000bcc <__aeabi_d2f>
 800918e:	4603      	mov	r3, r0
 8009190:	647b      	str	r3, [r7, #68]	; 0x44
            float theta_270 = std::fabs(theta_t - 3.0f * M_PI / 2.0f);
 8009192:	697b      	ldr	r3, [r7, #20]
 8009194:	691b      	ldr	r3, [r3, #16]
 8009196:	4618      	mov	r0, r3
 8009198:	f7f7 f9c8 	bl	800052c <__aeabi_f2d>
 800919c:	a384      	add	r3, pc, #528	; (adr r3, 80093b0 <_ZN3jlb8Odometry10correctionEff+0x2e8>)
 800919e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091a2:	f7f7 f863 	bl	800026c <__aeabi_dsub>
 80091a6:	4602      	mov	r2, r0
 80091a8:	460b      	mov	r3, r1
 80091aa:	4690      	mov	r8, r2
 80091ac:	f023 4900 	bic.w	r9, r3, #2147483648	; 0x80000000
 80091b0:	4640      	mov	r0, r8
 80091b2:	4649      	mov	r1, r9
 80091b4:	f7f7 fd0a 	bl	8000bcc <__aeabi_d2f>
 80091b8:	4603      	mov	r3, r0
 80091ba:	643b      	str	r3, [r7, #64]	; 0x40
            float theta_360 = std::fabs(theta_t - 2.0f * M_PI);
 80091bc:	697b      	ldr	r3, [r7, #20]
 80091be:	691b      	ldr	r3, [r3, #16]
 80091c0:	4618      	mov	r0, r3
 80091c2:	f7f7 f9b3 	bl	800052c <__aeabi_f2d>
 80091c6:	a37c      	add	r3, pc, #496	; (adr r3, 80093b8 <_ZN3jlb8Odometry10correctionEff+0x2f0>)
 80091c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091cc:	f7f7 f84e 	bl	800026c <__aeabi_dsub>
 80091d0:	4602      	mov	r2, r0
 80091d2:	460b      	mov	r3, r1
 80091d4:	4614      	mov	r4, r2
 80091d6:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 80091da:	4620      	mov	r0, r4
 80091dc:	4629      	mov	r1, r5
 80091de:	f7f7 fcf5 	bl	8000bcc <__aeabi_d2f>
 80091e2:	4603      	mov	r3, r0
 80091e4:	63fb      	str	r3, [r7, #60]	; 0x3c

            float min_theta = std::min({theta_0, theta_90, theta_180, theta_270, theta_360});
 80091e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80091e8:	627b      	str	r3, [r7, #36]	; 0x24
 80091ea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80091ec:	62bb      	str	r3, [r7, #40]	; 0x28
 80091ee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80091f0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80091f2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80091f4:	633b      	str	r3, [r7, #48]	; 0x30
 80091f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80091f8:	637b      	str	r3, [r7, #52]	; 0x34
 80091fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80091fe:	61fb      	str	r3, [r7, #28]
 8009200:	2305      	movs	r3, #5
 8009202:	623b      	str	r3, [r7, #32]
 8009204:	f107 031c 	add.w	r3, r7, #28
 8009208:	e893 0003 	ldmia.w	r3, {r0, r1}
 800920c:	f003 fdd7 	bl	800cdbe <_ZSt3minIfET_St16initializer_listIS0_E>
 8009210:	ed87 0a0e 	vstr	s0, [r7, #56]	; 0x38

            if (min_theta == theta_0) { theta_t = (theta_t + 0.0f) / 2.0f; }
 8009214:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8009218:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 800921c:	eeb4 7a67 	vcmp.f32	s14, s15
 8009220:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009224:	d10e      	bne.n	8009244 <_ZN3jlb8Odometry10correctionEff+0x17c>
 8009226:	697b      	ldr	r3, [r7, #20]
 8009228:	edd3 7a04 	vldr	s15, [r3, #16]
 800922c:	ed9f 7a64 	vldr	s14, [pc, #400]	; 80093c0 <_ZN3jlb8Odometry10correctionEff+0x2f8>
 8009230:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009234:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8009238:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800923c:	697b      	ldr	r3, [r7, #20]
 800923e:	edc3 7a04 	vstr	s15, [r3, #16]
 8009242:	e09a      	b.n	800937a <_ZN3jlb8Odometry10correctionEff+0x2b2>
            else if (min_theta == theta_90) { theta_t = (theta_t + M_PI / 2.0f) / 2.0f; }
 8009244:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8009248:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 800924c:	eeb4 7a67 	vcmp.f32	s14, s15
 8009250:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009254:	d11d      	bne.n	8009292 <_ZN3jlb8Odometry10correctionEff+0x1ca>
 8009256:	697b      	ldr	r3, [r7, #20]
 8009258:	691b      	ldr	r3, [r3, #16]
 800925a:	4618      	mov	r0, r3
 800925c:	f7f7 f966 	bl	800052c <__aeabi_f2d>
 8009260:	a34f      	add	r3, pc, #316	; (adr r3, 80093a0 <_ZN3jlb8Odometry10correctionEff+0x2d8>)
 8009262:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009266:	f7f7 f803 	bl	8000270 <__adddf3>
 800926a:	4602      	mov	r2, r0
 800926c:	460b      	mov	r3, r1
 800926e:	4610      	mov	r0, r2
 8009270:	4619      	mov	r1, r3
 8009272:	f04f 0200 	mov.w	r2, #0
 8009276:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800927a:	f7f7 fad9 	bl	8000830 <__aeabi_ddiv>
 800927e:	4602      	mov	r2, r0
 8009280:	460b      	mov	r3, r1
 8009282:	4610      	mov	r0, r2
 8009284:	4619      	mov	r1, r3
 8009286:	f7f7 fca1 	bl	8000bcc <__aeabi_d2f>
 800928a:	4602      	mov	r2, r0
 800928c:	697b      	ldr	r3, [r7, #20]
 800928e:	611a      	str	r2, [r3, #16]
 8009290:	e073      	b.n	800937a <_ZN3jlb8Odometry10correctionEff+0x2b2>
            else if (min_theta == theta_180) { theta_t = (theta_t + M_PI) / 2.0f; }
 8009292:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8009296:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800929a:	eeb4 7a67 	vcmp.f32	s14, s15
 800929e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80092a2:	d11d      	bne.n	80092e0 <_ZN3jlb8Odometry10correctionEff+0x218>
 80092a4:	697b      	ldr	r3, [r7, #20]
 80092a6:	691b      	ldr	r3, [r3, #16]
 80092a8:	4618      	mov	r0, r3
 80092aa:	f7f7 f93f 	bl	800052c <__aeabi_f2d>
 80092ae:	a33e      	add	r3, pc, #248	; (adr r3, 80093a8 <_ZN3jlb8Odometry10correctionEff+0x2e0>)
 80092b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092b4:	f7f6 ffdc 	bl	8000270 <__adddf3>
 80092b8:	4602      	mov	r2, r0
 80092ba:	460b      	mov	r3, r1
 80092bc:	4610      	mov	r0, r2
 80092be:	4619      	mov	r1, r3
 80092c0:	f04f 0200 	mov.w	r2, #0
 80092c4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80092c8:	f7f7 fab2 	bl	8000830 <__aeabi_ddiv>
 80092cc:	4602      	mov	r2, r0
 80092ce:	460b      	mov	r3, r1
 80092d0:	4610      	mov	r0, r2
 80092d2:	4619      	mov	r1, r3
 80092d4:	f7f7 fc7a 	bl	8000bcc <__aeabi_d2f>
 80092d8:	4602      	mov	r2, r0
 80092da:	697b      	ldr	r3, [r7, #20]
 80092dc:	611a      	str	r2, [r3, #16]
 80092de:	e04c      	b.n	800937a <_ZN3jlb8Odometry10correctionEff+0x2b2>
            else if (min_theta == theta_270) { theta_t = (theta_t + 3.0f * M_PI / 2.0f) / 2.0f; }
 80092e0:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 80092e4:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 80092e8:	eeb4 7a67 	vcmp.f32	s14, s15
 80092ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80092f0:	d11d      	bne.n	800932e <_ZN3jlb8Odometry10correctionEff+0x266>
 80092f2:	697b      	ldr	r3, [r7, #20]
 80092f4:	691b      	ldr	r3, [r3, #16]
 80092f6:	4618      	mov	r0, r3
 80092f8:	f7f7 f918 	bl	800052c <__aeabi_f2d>
 80092fc:	a32c      	add	r3, pc, #176	; (adr r3, 80093b0 <_ZN3jlb8Odometry10correctionEff+0x2e8>)
 80092fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009302:	f7f6 ffb5 	bl	8000270 <__adddf3>
 8009306:	4602      	mov	r2, r0
 8009308:	460b      	mov	r3, r1
 800930a:	4610      	mov	r0, r2
 800930c:	4619      	mov	r1, r3
 800930e:	f04f 0200 	mov.w	r2, #0
 8009312:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8009316:	f7f7 fa8b 	bl	8000830 <__aeabi_ddiv>
 800931a:	4602      	mov	r2, r0
 800931c:	460b      	mov	r3, r1
 800931e:	4610      	mov	r0, r2
 8009320:	4619      	mov	r1, r3
 8009322:	f7f7 fc53 	bl	8000bcc <__aeabi_d2f>
 8009326:	4602      	mov	r2, r0
 8009328:	697b      	ldr	r3, [r7, #20]
 800932a:	611a      	str	r2, [r3, #16]
 800932c:	e025      	b.n	800937a <_ZN3jlb8Odometry10correctionEff+0x2b2>
            else if (min_theta == theta_360) { theta_t = (theta_t + 2.0f * M_PI) / 2.0f; }
 800932e:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8009332:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8009336:	eeb4 7a67 	vcmp.f32	s14, s15
 800933a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800933e:	d11c      	bne.n	800937a <_ZN3jlb8Odometry10correctionEff+0x2b2>
 8009340:	697b      	ldr	r3, [r7, #20]
 8009342:	691b      	ldr	r3, [r3, #16]
 8009344:	4618      	mov	r0, r3
 8009346:	f7f7 f8f1 	bl	800052c <__aeabi_f2d>
 800934a:	a31b      	add	r3, pc, #108	; (adr r3, 80093b8 <_ZN3jlb8Odometry10correctionEff+0x2f0>)
 800934c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009350:	f7f6 ff8e 	bl	8000270 <__adddf3>
 8009354:	4602      	mov	r2, r0
 8009356:	460b      	mov	r3, r1
 8009358:	4610      	mov	r0, r2
 800935a:	4619      	mov	r1, r3
 800935c:	f04f 0200 	mov.w	r2, #0
 8009360:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8009364:	f7f7 fa64 	bl	8000830 <__aeabi_ddiv>
 8009368:	4602      	mov	r2, r0
 800936a:	460b      	mov	r3, r1
 800936c:	4610      	mov	r0, r2
 800936e:	4619      	mov	r1, r3
 8009370:	f7f7 fc2c 	bl	8000bcc <__aeabi_d2f>
 8009374:	4602      	mov	r2, r0
 8009376:	697b      	ldr	r3, [r7, #20]
 8009378:	611a      	str	r2, [r3, #16]

            theta_t = normalize_angle(theta_t);
 800937a:	697b      	ldr	r3, [r7, #20]
 800937c:	edd3 7a04 	vldr	s15, [r3, #16]
 8009380:	eeb0 0a67 	vmov.f32	s0, s15
 8009384:	6978      	ldr	r0, [r7, #20]
 8009386:	f7ff fe67 	bl	8009058 <_ZN3jlb8Odometry15normalize_angleEf>
 800938a:	eef0 7a40 	vmov.f32	s15, s0
 800938e:	697b      	ldr	r3, [r7, #20]
 8009390:	edc3 7a04 	vstr	s15, [r3, #16]
        }
 8009394:	bf00      	nop
 8009396:	3750      	adds	r7, #80	; 0x50
 8009398:	46bd      	mov	sp, r7
 800939a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800939e:	bf00      	nop
 80093a0:	54442d18 	.word	0x54442d18
 80093a4:	3ff921fb 	.word	0x3ff921fb
 80093a8:	54442d18 	.word	0x54442d18
 80093ac:	400921fb 	.word	0x400921fb
 80093b0:	7f3321d2 	.word	0x7f3321d2
 80093b4:	4012d97c 	.word	0x4012d97c
 80093b8:	54442d18 	.word	0x54442d18
 80093bc:	401921fb 	.word	0x401921fb
 80093c0:	00000000 	.word	0x00000000

080093c4 <_ZN3jlb14CompositeStateC1ENS_9FastStateE>:
        Mission        mission;
        LabyrinthState labyrinth_state;
        FastState      fast_state;
        float          reference_speed = 0.0f;

        CompositeState(FastState fast_state_) : mission{Mission::FAST}, labyrinth_state{LabyrinthState::START}, fast_state{fast_state_}, reference_speed{0.0f} {}
 80093c4:	b480      	push	{r7}
 80093c6:	b083      	sub	sp, #12
 80093c8:	af00      	add	r7, sp, #0
 80093ca:	6078      	str	r0, [r7, #4]
 80093cc:	6039      	str	r1, [r7, #0]
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	2201      	movs	r2, #1
 80093d2:	601a      	str	r2, [r3, #0]
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	2200      	movs	r2, #0
 80093d8:	605a      	str	r2, [r3, #4]
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	683a      	ldr	r2, [r7, #0]
 80093de:	609a      	str	r2, [r3, #8]
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	f04f 0200 	mov.w	r2, #0
 80093e6:	60da      	str	r2, [r3, #12]
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	4618      	mov	r0, r3
 80093ec:	370c      	adds	r7, #12
 80093ee:	46bd      	mov	sp, r7
 80093f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093f4:	4770      	bx	lr

080093f6 <_ZN3jlb14CompositeStateC1ENS_7MissionENS_14LabyrinthStateENS_9FastStateEf>:
        CompositeState(LabyrinthState labyrinth_state_) : mission{Mission::LABYRINTH}, labyrinth_state{labyrinth_state_}, fast_state{FastState::FOLLOW_SAFETY_CAR}, reference_speed{0.0f} {}
        CompositeState(Mission mission_, LabyrinthState labyrinth_state_, FastState fast_state_, float reference_speed_)
 80093f6:	b480      	push	{r7}
 80093f8:	b087      	sub	sp, #28
 80093fa:	af00      	add	r7, sp, #0
 80093fc:	6178      	str	r0, [r7, #20]
 80093fe:	6139      	str	r1, [r7, #16]
 8009400:	60fa      	str	r2, [r7, #12]
 8009402:	60bb      	str	r3, [r7, #8]
 8009404:	ed87 0a01 	vstr	s0, [r7, #4]
            : mission{mission_}, labyrinth_state{labyrinth_state_}, fast_state{fast_state_}, reference_speed{reference_speed_}
 8009408:	697b      	ldr	r3, [r7, #20]
 800940a:	693a      	ldr	r2, [r7, #16]
 800940c:	601a      	str	r2, [r3, #0]
 800940e:	697b      	ldr	r3, [r7, #20]
 8009410:	68fa      	ldr	r2, [r7, #12]
 8009412:	605a      	str	r2, [r3, #4]
 8009414:	697b      	ldr	r3, [r7, #20]
 8009416:	68ba      	ldr	r2, [r7, #8]
 8009418:	609a      	str	r2, [r3, #8]
 800941a:	697b      	ldr	r3, [r7, #20]
 800941c:	687a      	ldr	r2, [r7, #4]
 800941e:	60da      	str	r2, [r3, #12]
        {
        }
 8009420:	697b      	ldr	r3, [r7, #20]
 8009422:	4618      	mov	r0, r3
 8009424:	371c      	adds	r7, #28
 8009426:	46bd      	mov	sp, r7
 8009428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800942c:	4770      	bx	lr

0800942e <_ZN3jlb7ASStateC1ERNS_8OdometryERNS_10ControllerERNS_5GraphE>:
        uint32_t tick_counter_prev = 0u;

        [[maybe_unused]] char previous_node = 'U';
        [[maybe_unused]] char next_node     = 'U';

        ASState(Odometry& odometry_, Controller& controller_, Graph& graph_) : odometry{odometry_}, controller{controller_}, graph{graph_} {}
 800942e:	b480      	push	{r7}
 8009430:	b085      	sub	sp, #20
 8009432:	af00      	add	r7, sp, #0
 8009434:	60f8      	str	r0, [r7, #12]
 8009436:	60b9      	str	r1, [r7, #8]
 8009438:	607a      	str	r2, [r7, #4]
 800943a:	603b      	str	r3, [r7, #0]
 800943c:	68fb      	ldr	r3, [r7, #12]
 800943e:	2200      	movs	r2, #0
 8009440:	601a      	str	r2, [r3, #0]
 8009442:	68fb      	ldr	r3, [r7, #12]
 8009444:	2200      	movs	r2, #0
 8009446:	605a      	str	r2, [r3, #4]
 8009448:	68fb      	ldr	r3, [r7, #12]
 800944a:	2200      	movs	r2, #0
 800944c:	609a      	str	r2, [r3, #8]
 800944e:	68fb      	ldr	r3, [r7, #12]
 8009450:	f04f 0200 	mov.w	r2, #0
 8009454:	60da      	str	r2, [r3, #12]
 8009456:	68fb      	ldr	r3, [r7, #12]
 8009458:	2200      	movs	r2, #0
 800945a:	741a      	strb	r2, [r3, #16]
 800945c:	68fb      	ldr	r3, [r7, #12]
 800945e:	2200      	movs	r2, #0
 8009460:	745a      	strb	r2, [r3, #17]
 8009462:	68fb      	ldr	r3, [r7, #12]
 8009464:	2200      	movs	r2, #0
 8009466:	749a      	strb	r2, [r3, #18]
 8009468:	68fb      	ldr	r3, [r7, #12]
 800946a:	2200      	movs	r2, #0
 800946c:	74da      	strb	r2, [r3, #19]
 800946e:	68fb      	ldr	r3, [r7, #12]
 8009470:	f04f 0200 	mov.w	r2, #0
 8009474:	615a      	str	r2, [r3, #20]
 8009476:	68fb      	ldr	r3, [r7, #12]
 8009478:	f04f 0200 	mov.w	r2, #0
 800947c:	619a      	str	r2, [r3, #24]
 800947e:	68fb      	ldr	r3, [r7, #12]
 8009480:	2200      	movs	r2, #0
 8009482:	771a      	strb	r2, [r3, #28]
 8009484:	68fb      	ldr	r3, [r7, #12]
 8009486:	2200      	movs	r2, #0
 8009488:	621a      	str	r2, [r3, #32]
 800948a:	68fb      	ldr	r3, [r7, #12]
 800948c:	2200      	movs	r2, #0
 800948e:	625a      	str	r2, [r3, #36]	; 0x24
 8009490:	68fb      	ldr	r3, [r7, #12]
 8009492:	2255      	movs	r2, #85	; 0x55
 8009494:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8009498:	68fb      	ldr	r3, [r7, #12]
 800949a:	2255      	movs	r2, #85	; 0x55
 800949c:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
 80094a0:	68fb      	ldr	r3, [r7, #12]
 80094a2:	68ba      	ldr	r2, [r7, #8]
 80094a4:	62da      	str	r2, [r3, #44]	; 0x2c
 80094a6:	68fb      	ldr	r3, [r7, #12]
 80094a8:	687a      	ldr	r2, [r7, #4]
 80094aa:	631a      	str	r2, [r3, #48]	; 0x30
 80094ac:	68fb      	ldr	r3, [r7, #12]
 80094ae:	683a      	ldr	r2, [r7, #0]
 80094b0:	635a      	str	r2, [r3, #52]	; 0x34
 80094b2:	68fb      	ldr	r3, [r7, #12]
 80094b4:	4618      	mov	r0, r3
 80094b6:	3714      	adds	r7, #20
 80094b8:	46bd      	mov	sp, r7
 80094ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094be:	4770      	bx	lr

080094c0 <_ZN3jlb7ASState10set_statesENS_14CompositeStateE>:

        void set_states(const CompositeState state_)
 80094c0:	b084      	sub	sp, #16
 80094c2:	b480      	push	{r7}
 80094c4:	b083      	sub	sp, #12
 80094c6:	af00      	add	r7, sp, #0
 80094c8:	6078      	str	r0, [r7, #4]
 80094ca:	f107 0014 	add.w	r0, r7, #20
 80094ce:	e880 000e 	stmia.w	r0, {r1, r2, r3}
        {
            mission         = state_.mission;
 80094d2:	697a      	ldr	r2, [r7, #20]
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	601a      	str	r2, [r3, #0]
            labyrinth_state = state_.labyrinth_state;
 80094d8:	69ba      	ldr	r2, [r7, #24]
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	605a      	str	r2, [r3, #4]
            fast_state      = state_.fast_state;
 80094de:	69fa      	ldr	r2, [r7, #28]
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	609a      	str	r2, [r3, #8]
        }
 80094e4:	bf00      	nop
 80094e6:	370c      	adds	r7, #12
 80094e8:	46bd      	mov	sp, r7
 80094ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094ee:	b004      	add	sp, #16
 80094f0:	4770      	bx	lr

080094f2 <_ZNK9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 80094f2:	b480      	push	{r7}
 80094f4:	b083      	sub	sp, #12
 80094f6:	af00      	add	r7, sp, #0
 80094f8:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	4618      	mov	r0, r3
 80094fe:	370c      	adds	r7, #12
 8009500:	46bd      	mov	sp, r7
 8009502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009506:	4770      	bx	lr

08009508 <_ZN3jlb7ASState6updateEv>:

        CompositeState update()
 8009508:	b5f0      	push	{r4, r5, r6, r7, lr}
 800950a:	ed2d 8b02 	vpush	{d8}
 800950e:	b08f      	sub	sp, #60	; 0x3c
 8009510:	af00      	add	r7, sp, #0
 8009512:	6078      	str	r0, [r7, #4]
 8009514:	6039      	str	r1, [r7, #0]
        {
#ifndef SIMULATION
            // TODO: add timestamp
        	tick_counter_prev = tick_counter;
 8009516:	683b      	ldr	r3, [r7, #0]
 8009518:	6a1a      	ldr	r2, [r3, #32]
 800951a:	683b      	ldr	r3, [r7, #0]
 800951c:	625a      	str	r2, [r3, #36]	; 0x24
        	tick_counter = HAL_GetTick();
 800951e:	f00b f817 	bl	8014550 <HAL_GetTick>
 8009522:	4602      	mov	r2, r0
 8009524:	683b      	ldr	r3, [r7, #0]
 8009526:	621a      	str	r2, [r3, #32]
            float dt = (((float)tick_counter) - ((float)(tick_counter_prev))) / 1000.0f;
 8009528:	683b      	ldr	r3, [r7, #0]
 800952a:	6a1b      	ldr	r3, [r3, #32]
 800952c:	ee07 3a90 	vmov	s15, r3
 8009530:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8009534:	683b      	ldr	r3, [r7, #0]
 8009536:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009538:	ee07 3a90 	vmov	s15, r3
 800953c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009540:	ee37 7a67 	vsub.f32	s14, s14, s15
 8009544:	eddf 6ac5 	vldr	s13, [pc, #788]	; 800985c <_ZN3jlb7ASState6updateEv+0x354>
 8009548:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800954c:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
            auto                   update_timestamp_ = std::chrono::steady_clock::now();
            [[maybe_unused]] float dt                = std::chrono::duration_cast<std::chrono::milliseconds>(update_timestamp_ - prev_update_timestamp_).count() / 1000.0f;
            prev_update_timestamp_                   = update_timestamp_;
#endif

            state_transition_time += dt;
 8009550:	683b      	ldr	r3, [r7, #0]
 8009552:	ed93 7a06 	vldr	s14, [r3, #24]
 8009556:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800955a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800955e:	683b      	ldr	r3, [r7, #0]
 8009560:	edc3 7a06 	vstr	s15, [r3, #24]
            state_time += dt;
 8009564:	683b      	ldr	r3, [r7, #0]
 8009566:	ed93 7a05 	vldr	s14, [r3, #20]
 800956a:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800956e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009572:	683b      	ldr	r3, [r7, #0]
 8009574:	edc3 7a05 	vstr	s15, [r3, #20]

            switch (mission)
 8009578:	683b      	ldr	r3, [r7, #0]
 800957a:	681b      	ldr	r3, [r3, #0]
 800957c:	2b00      	cmp	r3, #0
 800957e:	d003      	beq.n	8009588 <_ZN3jlb7ASState6updateEv+0x80>
 8009580:	2b01      	cmp	r3, #1
 8009582:	f000 8176 	beq.w	8009872 <_ZN3jlb7ASState6updateEv+0x36a>
                    break;
                }
                default:
                {
                    // this should never happen
                    break;
 8009586:	e2a5      	b.n	8009ad4 <_ZN3jlb7ASState6updateEv+0x5cc>
                    bool at_decision_point = under_gate || at_cross_section;
 8009588:	683b      	ldr	r3, [r7, #0]
 800958a:	7c1b      	ldrb	r3, [r3, #16]
 800958c:	2b00      	cmp	r3, #0
 800958e:	d103      	bne.n	8009598 <_ZN3jlb7ASState6updateEv+0x90>
 8009590:	683b      	ldr	r3, [r7, #0]
 8009592:	7c5b      	ldrb	r3, [r3, #17]
 8009594:	2b00      	cmp	r3, #0
 8009596:	d001      	beq.n	800959c <_ZN3jlb7ASState6updateEv+0x94>
 8009598:	2301      	movs	r3, #1
 800959a:	e000      	b.n	800959e <_ZN3jlb7ASState6updateEv+0x96>
 800959c:	2300      	movs	r3, #0
 800959e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
                    if (!prev_at_decision_point && at_decision_point)
 80095a2:	683b      	ldr	r3, [r7, #0]
 80095a4:	7c9b      	ldrb	r3, [r3, #18]
 80095a6:	f083 0301 	eor.w	r3, r3, #1
 80095aa:	b2db      	uxtb	r3, r3
 80095ac:	2b00      	cmp	r3, #0
 80095ae:	f000 8157 	beq.w	8009860 <_ZN3jlb7ASState6updateEv+0x358>
 80095b2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80095b6:	2b00      	cmp	r3, #0
 80095b8:	f000 8152 	beq.w	8009860 <_ZN3jlb7ASState6updateEv+0x358>
                        float inaccuracy = 0.25f;
 80095bc:	f04f 537a 	mov.w	r3, #1048576000	; 0x3e800000
 80095c0:	62fb      	str	r3, [r7, #44]	; 0x2c
                        if (std::sqrt(std::pow(graph[next_node].x - odometry.x_t, 2) + std::pow(graph[next_node].y - odometry.y_t, 2)) < inaccuracy)
 80095c2:	683b      	ldr	r3, [r7, #0]
 80095c4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80095c6:	683b      	ldr	r3, [r7, #0]
 80095c8:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80095cc:	4619      	mov	r1, r3
 80095ce:	4610      	mov	r0, r2
 80095d0:	f7ff fa59 	bl	8008a86 <_ZN3jlb5GraphixEc>
 80095d4:	4603      	mov	r3, r0
 80095d6:	ed93 7a01 	vldr	s14, [r3, #4]
 80095da:	683b      	ldr	r3, [r7, #0]
 80095dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80095de:	edd3 7a02 	vldr	s15, [r3, #8]
 80095e2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80095e6:	2002      	movs	r0, #2
 80095e8:	eeb0 0a67 	vmov.f32	s0, s15
 80095ec:	f7f9 f83e 	bl	800266c <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 80095f0:	ec55 4b10 	vmov	r4, r5, d0
 80095f4:	683b      	ldr	r3, [r7, #0]
 80095f6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80095f8:	683b      	ldr	r3, [r7, #0]
 80095fa:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80095fe:	4619      	mov	r1, r3
 8009600:	4610      	mov	r0, r2
 8009602:	f7ff fa40 	bl	8008a86 <_ZN3jlb5GraphixEc>
 8009606:	4603      	mov	r3, r0
 8009608:	ed93 7a02 	vldr	s14, [r3, #8]
 800960c:	683b      	ldr	r3, [r7, #0]
 800960e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009610:	edd3 7a03 	vldr	s15, [r3, #12]
 8009614:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009618:	2002      	movs	r0, #2
 800961a:	eeb0 0a67 	vmov.f32	s0, s15
 800961e:	f7f9 f825 	bl	800266c <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8009622:	ec53 2b10 	vmov	r2, r3, d0
 8009626:	4620      	mov	r0, r4
 8009628:	4629      	mov	r1, r5
 800962a:	f7f6 fe21 	bl	8000270 <__adddf3>
 800962e:	4602      	mov	r2, r0
 8009630:	460b      	mov	r3, r1
 8009632:	ec43 2b17 	vmov	d7, r2, r3
 8009636:	eeb0 0a47 	vmov.f32	s0, s14
 800963a:	eef0 0a67 	vmov.f32	s1, s15
 800963e:	f017 fe63 	bl	8021308 <sqrt>
 8009642:	ec55 4b10 	vmov	r4, r5, d0
 8009646:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009648:	f7f6 ff70 	bl	800052c <__aeabi_f2d>
 800964c:	4602      	mov	r2, r0
 800964e:	460b      	mov	r3, r1
 8009650:	2101      	movs	r1, #1
 8009652:	460e      	mov	r6, r1
 8009654:	4620      	mov	r0, r4
 8009656:	4629      	mov	r1, r5
 8009658:	f7f7 fa32 	bl	8000ac0 <__aeabi_dcmplt>
 800965c:	4603      	mov	r3, r0
 800965e:	2b00      	cmp	r3, #0
 8009660:	d101      	bne.n	8009666 <_ZN3jlb7ASState6updateEv+0x15e>
 8009662:	2300      	movs	r3, #0
 8009664:	461e      	mov	r6, r3
 8009666:	b2f3      	uxtb	r3, r6
 8009668:	2b00      	cmp	r3, #0
 800966a:	f000 80f9 	beq.w	8009860 <_ZN3jlb7ASState6updateEv+0x358>
                            auto at_node = next_node;
 800966e:	683b      	ldr	r3, [r7, #0]
 8009670:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8009674:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
                                unsigned long num_neighbors = graph[at_node].edges.size();
 8009678:	683b      	ldr	r3, [r7, #0]
 800967a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800967c:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8009680:	4611      	mov	r1, r2
 8009682:	4618      	mov	r0, r3
 8009684:	f7ff f9ff 	bl	8008a86 <_ZN3jlb5GraphixEc>
 8009688:	4603      	mov	r3, r0
 800968a:	330c      	adds	r3, #12
 800968c:	4618      	mov	r0, r3
 800968e:	f003 fbb3 	bl	800cdf8 <_ZNKSt6vectorIN3jlb4EdgeESaIS1_EE4sizeEv>
 8009692:	6278      	str	r0, [r7, #36]	; 0x24
                                auto          selected_edge = rand() % num_neighbors;
 8009694:	f01a ff02 	bl	802449c <rand>
 8009698:	4603      	mov	r3, r0
 800969a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800969c:	fbb3 f2f2 	udiv	r2, r3, r2
 80096a0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80096a2:	fb01 f202 	mul.w	r2, r1, r2
 80096a6:	1a9b      	subs	r3, r3, r2
 80096a8:	623b      	str	r3, [r7, #32]
                                if (graph[at_node].edges[selected_edge].node == 'P' || graph[at_node].edges[selected_edge].node == 'U' || graph[at_node].edges[selected_edge].node == 'X') { continue; }
 80096aa:	683b      	ldr	r3, [r7, #0]
 80096ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80096ae:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 80096b2:	4611      	mov	r1, r2
 80096b4:	4618      	mov	r0, r3
 80096b6:	f7ff f9e6 	bl	8008a86 <_ZN3jlb5GraphixEc>
 80096ba:	4603      	mov	r3, r0
 80096bc:	330c      	adds	r3, #12
 80096be:	6a39      	ldr	r1, [r7, #32]
 80096c0:	4618      	mov	r0, r3
 80096c2:	f003 fbaf 	bl	800ce24 <_ZNSt6vectorIN3jlb4EdgeESaIS1_EEixEj>
 80096c6:	4603      	mov	r3, r0
 80096c8:	781b      	ldrb	r3, [r3, #0]
 80096ca:	2b50      	cmp	r3, #80	; 0x50
 80096cc:	d023      	beq.n	8009716 <_ZN3jlb7ASState6updateEv+0x20e>
 80096ce:	683b      	ldr	r3, [r7, #0]
 80096d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80096d2:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 80096d6:	4611      	mov	r1, r2
 80096d8:	4618      	mov	r0, r3
 80096da:	f7ff f9d4 	bl	8008a86 <_ZN3jlb5GraphixEc>
 80096de:	4603      	mov	r3, r0
 80096e0:	330c      	adds	r3, #12
 80096e2:	6a39      	ldr	r1, [r7, #32]
 80096e4:	4618      	mov	r0, r3
 80096e6:	f003 fb9d 	bl	800ce24 <_ZNSt6vectorIN3jlb4EdgeESaIS1_EEixEj>
 80096ea:	4603      	mov	r3, r0
 80096ec:	781b      	ldrb	r3, [r3, #0]
 80096ee:	2b55      	cmp	r3, #85	; 0x55
 80096f0:	d011      	beq.n	8009716 <_ZN3jlb7ASState6updateEv+0x20e>
 80096f2:	683b      	ldr	r3, [r7, #0]
 80096f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80096f6:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 80096fa:	4611      	mov	r1, r2
 80096fc:	4618      	mov	r0, r3
 80096fe:	f7ff f9c2 	bl	8008a86 <_ZN3jlb5GraphixEc>
 8009702:	4603      	mov	r3, r0
 8009704:	330c      	adds	r3, #12
 8009706:	6a39      	ldr	r1, [r7, #32]
 8009708:	4618      	mov	r0, r3
 800970a:	f003 fb8b 	bl	800ce24 <_ZNSt6vectorIN3jlb4EdgeESaIS1_EEixEj>
 800970e:	4603      	mov	r3, r0
 8009710:	781b      	ldrb	r3, [r3, #0]
 8009712:	2b58      	cmp	r3, #88	; 0x58
 8009714:	d101      	bne.n	800971a <_ZN3jlb7ASState6updateEv+0x212>
 8009716:	2301      	movs	r3, #1
 8009718:	e000      	b.n	800971c <_ZN3jlb7ASState6updateEv+0x214>
 800971a:	2300      	movs	r3, #0
 800971c:	2b00      	cmp	r3, #0
 800971e:	f040 809a 	bne.w	8009856 <_ZN3jlb7ASState6updateEv+0x34e>
                                auto prev_nodes = graph[at_node].edges[selected_edge].prev_nodes;
 8009722:	683b      	ldr	r3, [r7, #0]
 8009724:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009726:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 800972a:	4611      	mov	r1, r2
 800972c:	4618      	mov	r0, r3
 800972e:	f7ff f9aa 	bl	8008a86 <_ZN3jlb5GraphixEc>
 8009732:	4603      	mov	r3, r0
 8009734:	330c      	adds	r3, #12
 8009736:	6a39      	ldr	r1, [r7, #32]
 8009738:	4618      	mov	r0, r3
 800973a:	f003 fb73 	bl	800ce24 <_ZNSt6vectorIN3jlb4EdgeESaIS1_EEixEj>
 800973e:	4603      	mov	r3, r0
 8009740:	f103 0208 	add.w	r2, r3, #8
 8009744:	f107 030c 	add.w	r3, r7, #12
 8009748:	4611      	mov	r1, r2
 800974a:	4618      	mov	r0, r3
 800974c:	f003 f91f 	bl	800c98e <_ZNSt6vectorIcSaIcEEC1ERKS1_>
                                if (std::find(prev_nodes.begin(), prev_nodes.end(), previous_node) != prev_nodes.end())
 8009750:	f107 030c 	add.w	r3, r7, #12
 8009754:	4618      	mov	r0, r3
 8009756:	f003 fb78 	bl	800ce4a <_ZNSt6vectorIcSaIcEE5beginEv>
 800975a:	4604      	mov	r4, r0
 800975c:	f107 030c 	add.w	r3, r7, #12
 8009760:	4618      	mov	r0, r3
 8009762:	f003 fb82 	bl	800ce6a <_ZNSt6vectorIcSaIcEE3endEv>
 8009766:	4601      	mov	r1, r0
 8009768:	683b      	ldr	r3, [r7, #0]
 800976a:	3328      	adds	r3, #40	; 0x28
 800976c:	461a      	mov	r2, r3
 800976e:	4620      	mov	r0, r4
 8009770:	f003 fb8c 	bl	800ce8c <_ZSt4findIN9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEEcET_S7_S7_RKT0_>
 8009774:	4603      	mov	r3, r0
 8009776:	61bb      	str	r3, [r7, #24]
 8009778:	f107 030c 	add.w	r3, r7, #12
 800977c:	4618      	mov	r0, r3
 800977e:	f003 fb74 	bl	800ce6a <_ZNSt6vectorIcSaIcEE3endEv>
 8009782:	4603      	mov	r3, r0
 8009784:	61fb      	str	r3, [r7, #28]
 8009786:	f107 021c 	add.w	r2, r7, #28
 800978a:	f107 0318 	add.w	r3, r7, #24
 800978e:	4611      	mov	r1, r2
 8009790:	4618      	mov	r0, r3
 8009792:	f003 fb8f 	bl	800ceb4 <_ZN9__gnu_cxxeqIPcSt6vectorIcSaIcEEEEbRKNS_17__normal_iteratorIT_T0_EESA_>
 8009796:	4603      	mov	r3, r0
 8009798:	f083 0301 	eor.w	r3, r3, #1
 800979c:	b2db      	uxtb	r3, r3
 800979e:	2b00      	cmp	r3, #0
 80097a0:	d050      	beq.n	8009844 <_ZN3jlb7ASState6updateEv+0x33c>
                                    next_node     = graph[at_node].edges[selected_edge].node;
 80097a2:	683b      	ldr	r3, [r7, #0]
 80097a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80097a6:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 80097aa:	4611      	mov	r1, r2
 80097ac:	4618      	mov	r0, r3
 80097ae:	f7ff f96a 	bl	8008a86 <_ZN3jlb5GraphixEc>
 80097b2:	4603      	mov	r3, r0
 80097b4:	330c      	adds	r3, #12
 80097b6:	6a39      	ldr	r1, [r7, #32]
 80097b8:	4618      	mov	r0, r3
 80097ba:	f003 fb33 	bl	800ce24 <_ZNSt6vectorIN3jlb4EdgeESaIS1_EEixEj>
 80097be:	4603      	mov	r3, r0
 80097c0:	781a      	ldrb	r2, [r3, #0]
 80097c2:	683b      	ldr	r3, [r7, #0]
 80097c4:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
                                    previous_node = at_node;
 80097c8:	683b      	ldr	r3, [r7, #0]
 80097ca:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 80097ce:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                                    controller.set_direction(graph[at_node].edges[selected_edge].direction);
 80097d2:	683b      	ldr	r3, [r7, #0]
 80097d4:	6b1c      	ldr	r4, [r3, #48]	; 0x30
 80097d6:	683b      	ldr	r3, [r7, #0]
 80097d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80097da:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 80097de:	4611      	mov	r1, r2
 80097e0:	4618      	mov	r0, r3
 80097e2:	f7ff f950 	bl	8008a86 <_ZN3jlb5GraphixEc>
 80097e6:	4603      	mov	r3, r0
 80097e8:	330c      	adds	r3, #12
 80097ea:	6a39      	ldr	r1, [r7, #32]
 80097ec:	4618      	mov	r0, r3
 80097ee:	f003 fb19 	bl	800ce24 <_ZNSt6vectorIN3jlb4EdgeESaIS1_EEixEj>
 80097f2:	4603      	mov	r3, r0
 80097f4:	685b      	ldr	r3, [r3, #4]
 80097f6:	4619      	mov	r1, r3
 80097f8:	4620      	mov	r0, r4
 80097fa:	f7fb fe3c 	bl	8005476 <_ZN3jlb10Controller13set_directionENS_9DirectionE>
                                    odometry.correction(graph[previous_node].x, graph[previous_node].y);
 80097fe:	683b      	ldr	r3, [r7, #0]
 8009800:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 8009802:	683b      	ldr	r3, [r7, #0]
 8009804:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009806:	683b      	ldr	r3, [r7, #0]
 8009808:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800980c:	4619      	mov	r1, r3
 800980e:	4610      	mov	r0, r2
 8009810:	f7ff f939 	bl	8008a86 <_ZN3jlb5GraphixEc>
 8009814:	4603      	mov	r3, r0
 8009816:	ed93 8a01 	vldr	s16, [r3, #4]
 800981a:	683b      	ldr	r3, [r7, #0]
 800981c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800981e:	683b      	ldr	r3, [r7, #0]
 8009820:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009824:	4619      	mov	r1, r3
 8009826:	4610      	mov	r0, r2
 8009828:	f7ff f92d 	bl	8008a86 <_ZN3jlb5GraphixEc>
 800982c:	4603      	mov	r3, r0
 800982e:	edd3 7a02 	vldr	s15, [r3, #8]
 8009832:	eef0 0a67 	vmov.f32	s1, s15
 8009836:	eeb0 0a48 	vmov.f32	s0, s16
 800983a:	4620      	mov	r0, r4
 800983c:	f7ff fc44 	bl	80090c8 <_ZN3jlb8Odometry10correctionEff>
                                    break;
 8009840:	2400      	movs	r4, #0
 8009842:	e000      	b.n	8009846 <_ZN3jlb7ASState6updateEv+0x33e>
                            }
 8009844:	2401      	movs	r4, #1
 8009846:	f107 030c 	add.w	r3, r7, #12
 800984a:	4618      	mov	r0, r3
 800984c:	f003 f8dc 	bl	800ca08 <_ZNSt6vectorIcSaIcEED1Ev>
 8009850:	2c01      	cmp	r4, #1
 8009852:	d105      	bne.n	8009860 <_ZN3jlb7ASState6updateEv+0x358>
 8009854:	e000      	b.n	8009858 <_ZN3jlb7ASState6updateEv+0x350>
                                if (graph[at_node].edges[selected_edge].node == 'P' || graph[at_node].edges[selected_edge].node == 'U' || graph[at_node].edges[selected_edge].node == 'X') { continue; }
 8009856:	bf00      	nop
                            }
 8009858:	e70e      	b.n	8009678 <_ZN3jlb7ASState6updateEv+0x170>
 800985a:	bf00      	nop
 800985c:	447a0000 	.word	0x447a0000
                    prev_at_decision_point = at_decision_point;
 8009860:	683b      	ldr	r3, [r7, #0]
 8009862:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 8009866:	749a      	strb	r2, [r3, #18]
                    reference_speed = LABYRINTH_SPEED;
 8009868:	683b      	ldr	r3, [r7, #0]
 800986a:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800986e:	60da      	str	r2, [r3, #12]
                    break;
 8009870:	e130      	b.n	8009ad4 <_ZN3jlb7ASState6updateEv+0x5cc>
                    switch (fast_state)
 8009872:	683b      	ldr	r3, [r7, #0]
 8009874:	689b      	ldr	r3, [r3, #8]
 8009876:	2b06      	cmp	r3, #6
 8009878:	f200 812a 	bhi.w	8009ad0 <_ZN3jlb7ASState6updateEv+0x5c8>
 800987c:	a201      	add	r2, pc, #4	; (adr r2, 8009884 <_ZN3jlb7ASState6updateEv+0x37c>)
 800987e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009882:	bf00      	nop
 8009884:	080098a1 	.word	0x080098a1
 8009888:	080098ab 	.word	0x080098ab
 800988c:	080098b5 	.word	0x080098b5
 8009890:	080098bd 	.word	0x080098bd
 8009894:	08009941 	.word	0x08009941
 8009898:	080099c5 	.word	0x080099c5
 800989c:	08009a4b 	.word	0x08009a4b
                            reference_speed = FAST_SPEED_SAFETY_CAR;
 80098a0:	683b      	ldr	r3, [r7, #0]
 80098a2:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80098a6:	60da      	str	r2, [r3, #12]
                            break;
 80098a8:	e113      	b.n	8009ad2 <_ZN3jlb7ASState6updateEv+0x5ca>
                            reference_speed = FAST_SPEED_OVERTAKE;
 80098aa:	683b      	ldr	r3, [r7, #0]
 80098ac:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80098b0:	60da      	str	r2, [r3, #12]
                            break;
 80098b2:	e10e      	b.n	8009ad2 <_ZN3jlb7ASState6updateEv+0x5ca>
                            reference_speed = FAST_SPEED;
 80098b4:	683b      	ldr	r3, [r7, #0]
 80098b6:	4a92      	ldr	r2, [pc, #584]	; (8009b00 <_ZN3jlb7ASState6updateEv+0x5f8>)
 80098b8:	60da      	str	r2, [r3, #12]
                            break;
 80098ba:	e10a      	b.n	8009ad2 <_ZN3jlb7ASState6updateEv+0x5ca>
                            if (current_number_of_lines == 1u && !started_state_transition)
 80098bc:	683b      	ldr	r3, [r7, #0]
 80098be:	7cdb      	ldrb	r3, [r3, #19]
 80098c0:	2b01      	cmp	r3, #1
 80098c2:	d10e      	bne.n	80098e2 <_ZN3jlb7ASState6updateEv+0x3da>
 80098c4:	683b      	ldr	r3, [r7, #0]
 80098c6:	7f1b      	ldrb	r3, [r3, #28]
 80098c8:	f083 0301 	eor.w	r3, r3, #1
 80098cc:	b2db      	uxtb	r3, r3
 80098ce:	2b00      	cmp	r3, #0
 80098d0:	d007      	beq.n	80098e2 <_ZN3jlb7ASState6updateEv+0x3da>
                                started_state_transition = true;
 80098d2:	683b      	ldr	r3, [r7, #0]
 80098d4:	2201      	movs	r2, #1
 80098d6:	771a      	strb	r2, [r3, #28]
                                state_transition_time    = 0.0f;
 80098d8:	683b      	ldr	r3, [r7, #0]
 80098da:	f04f 0200 	mov.w	r2, #0
 80098de:	619a      	str	r2, [r3, #24]
 80098e0:	e00a      	b.n	80098f8 <_ZN3jlb7ASState6updateEv+0x3f0>
                            else if (current_number_of_lines != 1u && started_state_transition) { started_state_transition = false; }
 80098e2:	683b      	ldr	r3, [r7, #0]
 80098e4:	7cdb      	ldrb	r3, [r3, #19]
 80098e6:	2b01      	cmp	r3, #1
 80098e8:	d006      	beq.n	80098f8 <_ZN3jlb7ASState6updateEv+0x3f0>
 80098ea:	683b      	ldr	r3, [r7, #0]
 80098ec:	7f1b      	ldrb	r3, [r3, #28]
 80098ee:	2b00      	cmp	r3, #0
 80098f0:	d002      	beq.n	80098f8 <_ZN3jlb7ASState6updateEv+0x3f0>
 80098f2:	683b      	ldr	r3, [r7, #0]
 80098f4:	2200      	movs	r2, #0
 80098f6:	771a      	strb	r2, [r3, #28]
                            if (started_state_transition && state_transition_time > STATE_TRANSITION_TIME_LIMIT && state_time > STATE_MIN_TIME)
 80098f8:	683b      	ldr	r3, [r7, #0]
 80098fa:	7f1b      	ldrb	r3, [r3, #28]
 80098fc:	2b00      	cmp	r3, #0
 80098fe:	d01b      	beq.n	8009938 <_ZN3jlb7ASState6updateEv+0x430>
 8009900:	683b      	ldr	r3, [r7, #0]
 8009902:	edd3 7a06 	vldr	s15, [r3, #24]
 8009906:	ed9f 7a7f 	vldr	s14, [pc, #508]	; 8009b04 <_ZN3jlb7ASState6updateEv+0x5fc>
 800990a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800990e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009912:	dd11      	ble.n	8009938 <_ZN3jlb7ASState6updateEv+0x430>
 8009914:	683b      	ldr	r3, [r7, #0]
 8009916:	edd3 7a05 	vldr	s15, [r3, #20]
 800991a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800991e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009922:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009926:	dd07      	ble.n	8009938 <_ZN3jlb7ASState6updateEv+0x430>
                                fast_state = FastState::OUT_ACCEL_ZONE;
 8009928:	683b      	ldr	r3, [r7, #0]
 800992a:	2204      	movs	r2, #4
 800992c:	609a      	str	r2, [r3, #8]
                                state_time = 0.0f;
 800992e:	683b      	ldr	r3, [r7, #0]
 8009930:	f04f 0200 	mov.w	r2, #0
 8009934:	615a      	str	r2, [r3, #20]
                                break;
 8009936:	e0cc      	b.n	8009ad2 <_ZN3jlb7ASState6updateEv+0x5ca>
                            reference_speed = FAST_SPEED;
 8009938:	683b      	ldr	r3, [r7, #0]
 800993a:	4a71      	ldr	r2, [pc, #452]	; (8009b00 <_ZN3jlb7ASState6updateEv+0x5f8>)
 800993c:	60da      	str	r2, [r3, #12]
                            break;
 800993e:	e0c8      	b.n	8009ad2 <_ZN3jlb7ASState6updateEv+0x5ca>
                            if (current_number_of_lines == 3u && !started_state_transition)
 8009940:	683b      	ldr	r3, [r7, #0]
 8009942:	7cdb      	ldrb	r3, [r3, #19]
 8009944:	2b03      	cmp	r3, #3
 8009946:	d10e      	bne.n	8009966 <_ZN3jlb7ASState6updateEv+0x45e>
 8009948:	683b      	ldr	r3, [r7, #0]
 800994a:	7f1b      	ldrb	r3, [r3, #28]
 800994c:	f083 0301 	eor.w	r3, r3, #1
 8009950:	b2db      	uxtb	r3, r3
 8009952:	2b00      	cmp	r3, #0
 8009954:	d007      	beq.n	8009966 <_ZN3jlb7ASState6updateEv+0x45e>
                                started_state_transition = true;
 8009956:	683b      	ldr	r3, [r7, #0]
 8009958:	2201      	movs	r2, #1
 800995a:	771a      	strb	r2, [r3, #28]
                                state_transition_time    = 0.0f;
 800995c:	683b      	ldr	r3, [r7, #0]
 800995e:	f04f 0200 	mov.w	r2, #0
 8009962:	619a      	str	r2, [r3, #24]
 8009964:	e00a      	b.n	800997c <_ZN3jlb7ASState6updateEv+0x474>
                            else if (current_number_of_lines != 3u && started_state_transition) { started_state_transition = false; }
 8009966:	683b      	ldr	r3, [r7, #0]
 8009968:	7cdb      	ldrb	r3, [r3, #19]
 800996a:	2b03      	cmp	r3, #3
 800996c:	d006      	beq.n	800997c <_ZN3jlb7ASState6updateEv+0x474>
 800996e:	683b      	ldr	r3, [r7, #0]
 8009970:	7f1b      	ldrb	r3, [r3, #28]
 8009972:	2b00      	cmp	r3, #0
 8009974:	d002      	beq.n	800997c <_ZN3jlb7ASState6updateEv+0x474>
 8009976:	683b      	ldr	r3, [r7, #0]
 8009978:	2200      	movs	r2, #0
 800997a:	771a      	strb	r2, [r3, #28]
                            if (started_state_transition && state_transition_time > STATE_TRANSITION_TIME_LIMIT && state_time > STATE_MIN_TIME)
 800997c:	683b      	ldr	r3, [r7, #0]
 800997e:	7f1b      	ldrb	r3, [r3, #28]
 8009980:	2b00      	cmp	r3, #0
 8009982:	d01b      	beq.n	80099bc <_ZN3jlb7ASState6updateEv+0x4b4>
 8009984:	683b      	ldr	r3, [r7, #0]
 8009986:	edd3 7a06 	vldr	s15, [r3, #24]
 800998a:	ed9f 7a5e 	vldr	s14, [pc, #376]	; 8009b04 <_ZN3jlb7ASState6updateEv+0x5fc>
 800998e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009992:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009996:	dd11      	ble.n	80099bc <_ZN3jlb7ASState6updateEv+0x4b4>
 8009998:	683b      	ldr	r3, [r7, #0]
 800999a:	edd3 7a05 	vldr	s15, [r3, #20]
 800999e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80099a2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80099a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80099aa:	dd07      	ble.n	80099bc <_ZN3jlb7ASState6updateEv+0x4b4>
                                fast_state = FastState::IN_BRAKE_ZONE;
 80099ac:	683b      	ldr	r3, [r7, #0]
 80099ae:	2205      	movs	r2, #5
 80099b0:	609a      	str	r2, [r3, #8]
                                state_time = 0.0f;
 80099b2:	683b      	ldr	r3, [r7, #0]
 80099b4:	f04f 0200 	mov.w	r2, #0
 80099b8:	615a      	str	r2, [r3, #20]
                                break;
 80099ba:	e08a      	b.n	8009ad2 <_ZN3jlb7ASState6updateEv+0x5ca>
                            reference_speed = FAST_SPEED;
 80099bc:	683b      	ldr	r3, [r7, #0]
 80099be:	4a50      	ldr	r2, [pc, #320]	; (8009b00 <_ZN3jlb7ASState6updateEv+0x5f8>)
 80099c0:	60da      	str	r2, [r3, #12]
                            break;
 80099c2:	e086      	b.n	8009ad2 <_ZN3jlb7ASState6updateEv+0x5ca>
                            if (current_number_of_lines == 1u && !started_state_transition)
 80099c4:	683b      	ldr	r3, [r7, #0]
 80099c6:	7cdb      	ldrb	r3, [r3, #19]
 80099c8:	2b01      	cmp	r3, #1
 80099ca:	d10e      	bne.n	80099ea <_ZN3jlb7ASState6updateEv+0x4e2>
 80099cc:	683b      	ldr	r3, [r7, #0]
 80099ce:	7f1b      	ldrb	r3, [r3, #28]
 80099d0:	f083 0301 	eor.w	r3, r3, #1
 80099d4:	b2db      	uxtb	r3, r3
 80099d6:	2b00      	cmp	r3, #0
 80099d8:	d007      	beq.n	80099ea <_ZN3jlb7ASState6updateEv+0x4e2>
                                started_state_transition = true;
 80099da:	683b      	ldr	r3, [r7, #0]
 80099dc:	2201      	movs	r2, #1
 80099de:	771a      	strb	r2, [r3, #28]
                                state_transition_time    = 0.0f;
 80099e0:	683b      	ldr	r3, [r7, #0]
 80099e2:	f04f 0200 	mov.w	r2, #0
 80099e6:	619a      	str	r2, [r3, #24]
 80099e8:	e00a      	b.n	8009a00 <_ZN3jlb7ASState6updateEv+0x4f8>
                            else if (current_number_of_lines != 1u && started_state_transition) { started_state_transition = false; }
 80099ea:	683b      	ldr	r3, [r7, #0]
 80099ec:	7cdb      	ldrb	r3, [r3, #19]
 80099ee:	2b01      	cmp	r3, #1
 80099f0:	d006      	beq.n	8009a00 <_ZN3jlb7ASState6updateEv+0x4f8>
 80099f2:	683b      	ldr	r3, [r7, #0]
 80099f4:	7f1b      	ldrb	r3, [r3, #28]
 80099f6:	2b00      	cmp	r3, #0
 80099f8:	d002      	beq.n	8009a00 <_ZN3jlb7ASState6updateEv+0x4f8>
 80099fa:	683b      	ldr	r3, [r7, #0]
 80099fc:	2200      	movs	r2, #0
 80099fe:	771a      	strb	r2, [r3, #28]
                            if (started_state_transition && state_transition_time > STATE_TRANSITION_TIME_LIMIT && state_time > STATE_MIN_TIME)
 8009a00:	683b      	ldr	r3, [r7, #0]
 8009a02:	7f1b      	ldrb	r3, [r3, #28]
 8009a04:	2b00      	cmp	r3, #0
 8009a06:	d01b      	beq.n	8009a40 <_ZN3jlb7ASState6updateEv+0x538>
 8009a08:	683b      	ldr	r3, [r7, #0]
 8009a0a:	edd3 7a06 	vldr	s15, [r3, #24]
 8009a0e:	ed9f 7a3d 	vldr	s14, [pc, #244]	; 8009b04 <_ZN3jlb7ASState6updateEv+0x5fc>
 8009a12:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009a16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009a1a:	dd11      	ble.n	8009a40 <_ZN3jlb7ASState6updateEv+0x538>
 8009a1c:	683b      	ldr	r3, [r7, #0]
 8009a1e:	edd3 7a05 	vldr	s15, [r3, #20]
 8009a22:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8009a26:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009a2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009a2e:	dd07      	ble.n	8009a40 <_ZN3jlb7ASState6updateEv+0x538>
                                fast_state = FastState::OUT_BRAKE_ZONE;
 8009a30:	683b      	ldr	r3, [r7, #0]
 8009a32:	2206      	movs	r2, #6
 8009a34:	609a      	str	r2, [r3, #8]
                                state_time = 0.0f;
 8009a36:	683b      	ldr	r3, [r7, #0]
 8009a38:	f04f 0200 	mov.w	r2, #0
 8009a3c:	615a      	str	r2, [r3, #20]
                                break;
 8009a3e:	e048      	b.n	8009ad2 <_ZN3jlb7ASState6updateEv+0x5ca>
                            reference_speed = FAST_SPEED_TURN;
 8009a40:	683b      	ldr	r3, [r7, #0]
 8009a42:	f04f 527f 	mov.w	r2, #1069547520	; 0x3fc00000
 8009a46:	60da      	str	r2, [r3, #12]
                            break;
 8009a48:	e043      	b.n	8009ad2 <_ZN3jlb7ASState6updateEv+0x5ca>
                            if (current_number_of_lines == 3u && !started_state_transition)
 8009a4a:	683b      	ldr	r3, [r7, #0]
 8009a4c:	7cdb      	ldrb	r3, [r3, #19]
 8009a4e:	2b03      	cmp	r3, #3
 8009a50:	d10e      	bne.n	8009a70 <_ZN3jlb7ASState6updateEv+0x568>
 8009a52:	683b      	ldr	r3, [r7, #0]
 8009a54:	7f1b      	ldrb	r3, [r3, #28]
 8009a56:	f083 0301 	eor.w	r3, r3, #1
 8009a5a:	b2db      	uxtb	r3, r3
 8009a5c:	2b00      	cmp	r3, #0
 8009a5e:	d007      	beq.n	8009a70 <_ZN3jlb7ASState6updateEv+0x568>
                                started_state_transition = true;
 8009a60:	683b      	ldr	r3, [r7, #0]
 8009a62:	2201      	movs	r2, #1
 8009a64:	771a      	strb	r2, [r3, #28]
                                state_transition_time    = 0.0f;
 8009a66:	683b      	ldr	r3, [r7, #0]
 8009a68:	f04f 0200 	mov.w	r2, #0
 8009a6c:	619a      	str	r2, [r3, #24]
 8009a6e:	e00a      	b.n	8009a86 <_ZN3jlb7ASState6updateEv+0x57e>
                            else if (current_number_of_lines != 3u && started_state_transition) { started_state_transition = false; }
 8009a70:	683b      	ldr	r3, [r7, #0]
 8009a72:	7cdb      	ldrb	r3, [r3, #19]
 8009a74:	2b03      	cmp	r3, #3
 8009a76:	d006      	beq.n	8009a86 <_ZN3jlb7ASState6updateEv+0x57e>
 8009a78:	683b      	ldr	r3, [r7, #0]
 8009a7a:	7f1b      	ldrb	r3, [r3, #28]
 8009a7c:	2b00      	cmp	r3, #0
 8009a7e:	d002      	beq.n	8009a86 <_ZN3jlb7ASState6updateEv+0x57e>
 8009a80:	683b      	ldr	r3, [r7, #0]
 8009a82:	2200      	movs	r2, #0
 8009a84:	771a      	strb	r2, [r3, #28]
                            if (started_state_transition && state_transition_time > STATE_TRANSITION_TIME_LIMIT && state_time > STATE_MIN_TIME)
 8009a86:	683b      	ldr	r3, [r7, #0]
 8009a88:	7f1b      	ldrb	r3, [r3, #28]
 8009a8a:	2b00      	cmp	r3, #0
 8009a8c:	d01b      	beq.n	8009ac6 <_ZN3jlb7ASState6updateEv+0x5be>
 8009a8e:	683b      	ldr	r3, [r7, #0]
 8009a90:	edd3 7a06 	vldr	s15, [r3, #24]
 8009a94:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 8009b04 <_ZN3jlb7ASState6updateEv+0x5fc>
 8009a98:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009a9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009aa0:	dd11      	ble.n	8009ac6 <_ZN3jlb7ASState6updateEv+0x5be>
 8009aa2:	683b      	ldr	r3, [r7, #0]
 8009aa4:	edd3 7a05 	vldr	s15, [r3, #20]
 8009aa8:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8009aac:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009ab0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009ab4:	dd07      	ble.n	8009ac6 <_ZN3jlb7ASState6updateEv+0x5be>
                                fast_state = FastState::IN_ACCEL_ZONE;
 8009ab6:	683b      	ldr	r3, [r7, #0]
 8009ab8:	2203      	movs	r2, #3
 8009aba:	609a      	str	r2, [r3, #8]
                                state_time = 0.0f;
 8009abc:	683b      	ldr	r3, [r7, #0]
 8009abe:	f04f 0200 	mov.w	r2, #0
 8009ac2:	615a      	str	r2, [r3, #20]
                                break;
 8009ac4:	e005      	b.n	8009ad2 <_ZN3jlb7ASState6updateEv+0x5ca>
                            reference_speed = FAST_SPEED_TURN;
 8009ac6:	683b      	ldr	r3, [r7, #0]
 8009ac8:	f04f 527f 	mov.w	r2, #1069547520	; 0x3fc00000
 8009acc:	60da      	str	r2, [r3, #12]
                            break;
 8009ace:	e000      	b.n	8009ad2 <_ZN3jlb7ASState6updateEv+0x5ca>
                            break;
 8009ad0:	bf00      	nop
                    break;
 8009ad2:	bf00      	nop
                }
            }

            return CompositeState{mission, labyrinth_state, fast_state, reference_speed};
 8009ad4:	683b      	ldr	r3, [r7, #0]
 8009ad6:	6819      	ldr	r1, [r3, #0]
 8009ad8:	683b      	ldr	r3, [r7, #0]
 8009ada:	685a      	ldr	r2, [r3, #4]
 8009adc:	683b      	ldr	r3, [r7, #0]
 8009ade:	6898      	ldr	r0, [r3, #8]
 8009ae0:	683b      	ldr	r3, [r7, #0]
 8009ae2:	edd3 7a03 	vldr	s15, [r3, #12]
 8009ae6:	eeb0 0a67 	vmov.f32	s0, s15
 8009aea:	4603      	mov	r3, r0
 8009aec:	6878      	ldr	r0, [r7, #4]
 8009aee:	f7ff fc82 	bl	80093f6 <_ZN3jlb14CompositeStateC1ENS_7MissionENS_14LabyrinthStateENS_9FastStateEf>
        }
 8009af2:	6878      	ldr	r0, [r7, #4]
 8009af4:	373c      	adds	r7, #60	; 0x3c
 8009af6:	46bd      	mov	sp, r7
 8009af8:	ecbd 8b02 	vpop	{d8}
 8009afc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009afe:	bf00      	nop
 8009b00:	40e00000 	.word	0x40e00000
 8009b04:	3ca3d70a 	.word	0x3ca3d70a

08009b08 <_ZNSt12_Vector_baseIcSaIcEE12_Vector_implD1Ev>:
      struct _Vector_impl
 8009b08:	b580      	push	{r7, lr}
 8009b0a:	b082      	sub	sp, #8
 8009b0c:	af00      	add	r7, sp, #0
 8009b0e:	6078      	str	r0, [r7, #4]
 8009b10:	6878      	ldr	r0, [r7, #4]
 8009b12:	f017 fb4a 	bl	80211aa <_ZNSaIcED1Ev>
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	4618      	mov	r0, r3
 8009b1a:	3708      	adds	r7, #8
 8009b1c:	46bd      	mov	sp, r7
 8009b1e:	bd80      	pop	{r7, pc}

08009b20 <_ZNSt12_Vector_baseIcSaIcEEC1Ev>:
      _Vector_base() = default;
 8009b20:	b580      	push	{r7, lr}
 8009b22:	b082      	sub	sp, #8
 8009b24:	af00      	add	r7, sp, #0
 8009b26:	6078      	str	r0, [r7, #4]
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	4618      	mov	r0, r3
 8009b2c:	f003 f9da 	bl	800cee4 <_ZNSt12_Vector_baseIcSaIcEE12_Vector_implC1Ev>
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	4618      	mov	r0, r3
 8009b34:	3708      	adds	r7, #8
 8009b36:	46bd      	mov	sp, r7
 8009b38:	bd80      	pop	{r7, pc}

08009b3a <_ZNSt6vectorIcSaIcEEC1Ev>:
      vector() = default;
 8009b3a:	b580      	push	{r7, lr}
 8009b3c:	b082      	sub	sp, #8
 8009b3e:	af00      	add	r7, sp, #0
 8009b40:	6078      	str	r0, [r7, #4]
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	4618      	mov	r0, r3
 8009b46:	f7ff ffeb 	bl	8009b20 <_ZNSt12_Vector_baseIcSaIcEEC1Ev>
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	4618      	mov	r0, r3
 8009b4e:	3708      	adds	r7, #8
 8009b50:	46bd      	mov	sp, r7
 8009b52:	bd80      	pop	{r7, pc}

08009b54 <_ZN3jlb12SignalSenderC1ERKNS_8OdometryERKNS_10ControllerERKNS_7ASStateERKNS_5GraphERK12Measurements>:

        std::vector<char> telemetry_data;

#ifndef SIMULATION
        // TODO: initialize UDPClient for STM32
        SignalSender(const Odometry &odometry_, const Controller &controller_, const ASState &as_state_, const Graph &graph_, const Measurements &measurements_)
 8009b54:	b580      	push	{r7, lr}
 8009b56:	b084      	sub	sp, #16
 8009b58:	af00      	add	r7, sp, #0
 8009b5a:	60f8      	str	r0, [r7, #12]
 8009b5c:	60b9      	str	r1, [r7, #8]
 8009b5e:	607a      	str	r2, [r7, #4]
 8009b60:	603b      	str	r3, [r7, #0]
            : odometry(odometry_), controller(controller_), as_state(as_state_), graph(graph_), measurements(measurements_)
 8009b62:	68fb      	ldr	r3, [r7, #12]
 8009b64:	68ba      	ldr	r2, [r7, #8]
 8009b66:	f8c3 21c8 	str.w	r2, [r3, #456]	; 0x1c8
 8009b6a:	68fb      	ldr	r3, [r7, #12]
 8009b6c:	687a      	ldr	r2, [r7, #4]
 8009b6e:	f8c3 21cc 	str.w	r2, [r3, #460]	; 0x1cc
 8009b72:	68fb      	ldr	r3, [r7, #12]
 8009b74:	683a      	ldr	r2, [r7, #0]
 8009b76:	f8c3 21d0 	str.w	r2, [r3, #464]	; 0x1d0
 8009b7a:	68fb      	ldr	r3, [r7, #12]
 8009b7c:	69ba      	ldr	r2, [r7, #24]
 8009b7e:	f8c3 21d4 	str.w	r2, [r3, #468]	; 0x1d4
 8009b82:	68fb      	ldr	r3, [r7, #12]
 8009b84:	69fa      	ldr	r2, [r7, #28]
 8009b86:	f8c3 21d8 	str.w	r2, [r3, #472]	; 0x1d8
 8009b8a:	68fb      	ldr	r3, [r7, #12]
 8009b8c:	f503 73ee 	add.w	r3, r3, #476	; 0x1dc
 8009b90:	4618      	mov	r0, r3
 8009b92:	f7ff ffd2 	bl	8009b3a <_ZNSt6vectorIcSaIcEEC1Ev>
        {
        }
 8009b96:	68fb      	ldr	r3, [r7, #12]
 8009b98:	4618      	mov	r0, r3
 8009b9a:	3710      	adds	r7, #16
 8009b9c:	46bd      	mov	sp, r7
 8009b9e:	bd80      	pop	{r7, pc}

08009ba0 <_ZN3jlb12SignalSenderD1Ev>:
            : odometry(odometry_), controller(controller_), as_state(as_state_), graph(graph_), measurements(measurements_) , client(SENDER_ADDRESS, SENDER_PORT)
        {
        }
#endif

        ~SignalSender() {}
 8009ba0:	b580      	push	{r7, lr}
 8009ba2:	b082      	sub	sp, #8
 8009ba4:	af00      	add	r7, sp, #0
 8009ba6:	6078      	str	r0, [r7, #4]
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	f503 73ee 	add.w	r3, r3, #476	; 0x1dc
 8009bae:	4618      	mov	r0, r3
 8009bb0:	f002 ff2a 	bl	800ca08 <_ZNSt6vectorIcSaIcEED1Ev>
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	4618      	mov	r0, r3
 8009bb8:	3708      	adds	r7, #8
 8009bba:	46bd      	mov	sp, r7
 8009bbc:	bd80      	pop	{r7, pc}

08009bbe <_ZN3jlb12SignalSender14send_telemetryEv>:

        void send_telemetry()
 8009bbe:	b590      	push	{r4, r7, lr}
 8009bc0:	b085      	sub	sp, #20
 8009bc2:	af00      	add	r7, sp, #0
 8009bc4:	6078      	str	r0, [r7, #4]
        {
            telemetry_data.clear();
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	f503 73ee 	add.w	r3, r3, #476	; 0x1dc
 8009bcc:	4618      	mov	r0, r3
 8009bce:	f003 f9b1 	bl	800cf34 <_ZNSt6vectorIcSaIcEE5clearEv>
            measurements_1();
 8009bd2:	6878      	ldr	r0, [r7, #4]
 8009bd4:	f000 f87e 	bl	8009cd4 <_ZN3jlb12SignalSender14measurements_1Ev>
            measurements_2();
 8009bd8:	6878      	ldr	r0, [r7, #4]
 8009bda:	f000 fe18 	bl	800a80e <_ZN3jlb12SignalSender14measurements_2Ev>
            measurements_3();
 8009bde:	6878      	ldr	r0, [r7, #4]
 8009be0:	f001 fd34 	bl	800b64c <_ZN3jlb12SignalSender14measurements_3Ev>
            measurements_4();
 8009be4:	6878      	ldr	r0, [r7, #4]
 8009be6:	f001 fd94 	bl	800b712 <_ZN3jlb12SignalSender14measurements_4Ev>
            measurements_5();
 8009bea:	6878      	ldr	r0, [r7, #4]
 8009bec:	f001 fdf4 	bl	800b7d8 <_ZN3jlb12SignalSender14measurements_5Ev>
            odometry_1();
 8009bf0:	6878      	ldr	r0, [r7, #4]
 8009bf2:	f001 fe60 	bl	800b8b6 <_ZN3jlb12SignalSender10odometry_1Ev>
            odometry_2();
 8009bf6:	6878      	ldr	r0, [r7, #4]
 8009bf8:	f001 fec0 	bl	800b97c <_ZN3jlb12SignalSender10odometry_2Ev>
            logic_1();
 8009bfc:	6878      	ldr	r0, [r7, #4]
 8009bfe:	f001 ff14 	bl	800ba2a <_ZN3jlb12SignalSender7logic_1Ev>
            logic_2();
 8009c02:	6878      	ldr	r0, [r7, #4]
 8009c04:	f001 ff80 	bl	800bb08 <_ZN3jlb12SignalSender7logic_2Ev>
            logic3();
 8009c08:	6878      	ldr	r0, [r7, #4]
 8009c0a:	f001 fff9 	bl	800bc00 <_ZN3jlb12SignalSender6logic3Ev>

            uint32_t timestamp = HAL_GetTick();
 8009c0e:	f00a fc9f 	bl	8014550 <HAL_GetTick>
 8009c12:	60f8      	str	r0, [r7, #12]
            telemetry_data.push_back((timestamp >> 24u) & 0xFF);
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	f503 72ee 	add.w	r2, r3, #476	; 0x1dc
 8009c1a:	68fb      	ldr	r3, [r7, #12]
 8009c1c:	0e1b      	lsrs	r3, r3, #24
 8009c1e:	b2db      	uxtb	r3, r3
 8009c20:	723b      	strb	r3, [r7, #8]
 8009c22:	f107 0308 	add.w	r3, r7, #8
 8009c26:	4619      	mov	r1, r3
 8009c28:	4610      	mov	r0, r2
 8009c2a:	f003 f991 	bl	800cf50 <_ZNSt6vectorIcSaIcEE9push_backEOc>
            telemetry_data.push_back((timestamp >> 16u) & 0xFF);
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	f503 72ee 	add.w	r2, r3, #476	; 0x1dc
 8009c34:	68fb      	ldr	r3, [r7, #12]
 8009c36:	0c1b      	lsrs	r3, r3, #16
 8009c38:	b2db      	uxtb	r3, r3
 8009c3a:	727b      	strb	r3, [r7, #9]
 8009c3c:	f107 0309 	add.w	r3, r7, #9
 8009c40:	4619      	mov	r1, r3
 8009c42:	4610      	mov	r0, r2
 8009c44:	f003 f984 	bl	800cf50 <_ZNSt6vectorIcSaIcEE9push_backEOc>
            telemetry_data.push_back((timestamp >> 8u) & 0xFF);
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	f503 72ee 	add.w	r2, r3, #476	; 0x1dc
 8009c4e:	68fb      	ldr	r3, [r7, #12]
 8009c50:	0a1b      	lsrs	r3, r3, #8
 8009c52:	b2db      	uxtb	r3, r3
 8009c54:	72bb      	strb	r3, [r7, #10]
 8009c56:	f107 030a 	add.w	r3, r7, #10
 8009c5a:	4619      	mov	r1, r3
 8009c5c:	4610      	mov	r0, r2
 8009c5e:	f003 f977 	bl	800cf50 <_ZNSt6vectorIcSaIcEE9push_backEOc>
            telemetry_data.push_back(timestamp & 0xFF);
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	f503 73ee 	add.w	r3, r3, #476	; 0x1dc
 8009c68:	68fa      	ldr	r2, [r7, #12]
 8009c6a:	b2d2      	uxtb	r2, r2
 8009c6c:	72fa      	strb	r2, [r7, #11]
 8009c6e:	f107 020b 	add.w	r2, r7, #11
 8009c72:	4611      	mov	r1, r2
 8009c74:	4618      	mov	r0, r3
 8009c76:	f003 f96b 	bl	800cf50 <_ZNSt6vectorIcSaIcEE9push_backEOc>
            send(telemetry_data.data(), telemetry_data.size());
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	f503 73ee 	add.w	r3, r3, #476	; 0x1dc
 8009c80:	4618      	mov	r0, r3
 8009c82:	f003 f976 	bl	800cf72 <_ZNSt6vectorIcSaIcEE4dataEv>
 8009c86:	4604      	mov	r4, r0
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	f503 73ee 	add.w	r3, r3, #476	; 0x1dc
 8009c8e:	4618      	mov	r0, r3
 8009c90:	f003 f97e 	bl	800cf90 <_ZNKSt6vectorIcSaIcEE4sizeEv>
 8009c94:	4603      	mov	r3, r0
 8009c96:	461a      	mov	r2, r3
 8009c98:	4621      	mov	r1, r4
 8009c9a:	6878      	ldr	r0, [r7, #4]
 8009c9c:	f000 f804 	bl	8009ca8 <_ZN3jlb12SignalSender4sendEPcj>
        }
 8009ca0:	bf00      	nop
 8009ca2:	3714      	adds	r7, #20
 8009ca4:	46bd      	mov	sp, r7
 8009ca6:	bd90      	pop	{r4, r7, pc}

08009ca8 <_ZN3jlb12SignalSender4sendEPcj>:
        // TODO: add UDPClient for STM32
#else
        UDPClient client;
#endif

        int send([[maybe_unused]] char *msg, [[maybe_unused]] size_t max_size)
 8009ca8:	b580      	push	{r7, lr}
 8009caa:	b084      	sub	sp, #16
 8009cac:	af00      	add	r7, sp, #0
 8009cae:	60f8      	str	r0, [r7, #12]
 8009cb0:	60b9      	str	r1, [r7, #8]
 8009cb2:	607a      	str	r2, [r7, #4]
        {
#ifndef SIMULATION
            HAL_UART_Transmit(&huart2, reinterpret_cast<uint8_t *>(msg), max_size, HAL_MAX_DELAY);
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	b29a      	uxth	r2, r3
 8009cb8:	f04f 33ff 	mov.w	r3, #4294967295
 8009cbc:	68b9      	ldr	r1, [r7, #8]
 8009cbe:	4804      	ldr	r0, [pc, #16]	; (8009cd0 <_ZN3jlb12SignalSender4sendEPcj+0x28>)
 8009cc0:	f012 fbfc 	bl	801c4bc <HAL_UART_Transmit>
            return 0;
 8009cc4:	2300      	movs	r3, #0
#else
            return client.send(msg, max_size);
#endif
        }
 8009cc6:	4618      	mov	r0, r3
 8009cc8:	3710      	adds	r7, #16
 8009cca:	46bd      	mov	sp, r7
 8009ccc:	bd80      	pop	{r7, pc}
 8009cce:	bf00      	nop
 8009cd0:	20000940 	.word	0x20000940

08009cd4 <_ZN3jlb12SignalSender14measurements_1Ev>:

        void measurements_1()
 8009cd4:	b590      	push	{r4, r7, lr}
 8009cd6:	b089      	sub	sp, #36	; 0x24
 8009cd8:	af00      	add	r7, sp, #0
 8009cda:	6078      	str	r0, [r7, #4]
        {
            jlb_rx.measurements_1.line_sensor_1  = 0 == controller.selected_front ? controller.detection_front[0] + 2.0f : controller.detection_front[0];
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 8009ce2:	681b      	ldr	r3, [r3, #0]
 8009ce4:	2b00      	cmp	r3, #0
 8009ce6:	d113      	bne.n	8009d10 <_ZN3jlb12SignalSender14measurements_1Ev+0x3c>
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 8009cee:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8009cf2:	ee07 3a90 	vmov	s15, r3
 8009cf6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009cfa:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8009cfe:	ee77 7a87 	vadd.f32	s15, s15, s14
 8009d02:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009d06:	edc7 7a00 	vstr	s15, [r7]
 8009d0a:	783b      	ldrb	r3, [r7, #0]
 8009d0c:	b2db      	uxtb	r3, r3
 8009d0e:	e00e      	b.n	8009d2e <_ZN3jlb12SignalSender14measurements_1Ev+0x5a>
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 8009d16:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8009d1a:	ee07 3a90 	vmov	s15, r3
 8009d1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009d22:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009d26:	edc7 7a00 	vstr	s15, [r7]
 8009d2a:	783b      	ldrb	r3, [r7, #0]
 8009d2c:	b2db      	uxtb	r3, r3
 8009d2e:	687a      	ldr	r2, [r7, #4]
 8009d30:	7013      	strb	r3, [r2, #0]
            jlb_rx.measurements_1.line_sensor_2  = 1 == controller.selected_front ? controller.detection_front[1] + 2.0f : controller.detection_front[1];
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 8009d38:	681b      	ldr	r3, [r3, #0]
 8009d3a:	2b01      	cmp	r3, #1
 8009d3c:	d113      	bne.n	8009d66 <_ZN3jlb12SignalSender14measurements_1Ev+0x92>
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 8009d44:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8009d48:	ee07 3a90 	vmov	s15, r3
 8009d4c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009d50:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8009d54:	ee77 7a87 	vadd.f32	s15, s15, s14
 8009d58:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009d5c:	edc7 7a00 	vstr	s15, [r7]
 8009d60:	783b      	ldrb	r3, [r7, #0]
 8009d62:	b2db      	uxtb	r3, r3
 8009d64:	e00e      	b.n	8009d84 <_ZN3jlb12SignalSender14measurements_1Ev+0xb0>
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 8009d6c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8009d70:	ee07 3a90 	vmov	s15, r3
 8009d74:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009d78:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009d7c:	edc7 7a00 	vstr	s15, [r7]
 8009d80:	783b      	ldrb	r3, [r7, #0]
 8009d82:	b2db      	uxtb	r3, r3
 8009d84:	687a      	ldr	r2, [r7, #4]
 8009d86:	7053      	strb	r3, [r2, #1]
            jlb_rx.measurements_1.line_sensor_3  = 2 == controller.selected_front ? controller.detection_front[2] + 2.0f : controller.detection_front[2];
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 8009d8e:	681b      	ldr	r3, [r3, #0]
 8009d90:	2b02      	cmp	r3, #2
 8009d92:	d113      	bne.n	8009dbc <_ZN3jlb12SignalSender14measurements_1Ev+0xe8>
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 8009d9a:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8009d9e:	ee07 3a90 	vmov	s15, r3
 8009da2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009da6:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8009daa:	ee77 7a87 	vadd.f32	s15, s15, s14
 8009dae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009db2:	edc7 7a00 	vstr	s15, [r7]
 8009db6:	783b      	ldrb	r3, [r7, #0]
 8009db8:	b2db      	uxtb	r3, r3
 8009dba:	e00e      	b.n	8009dda <_ZN3jlb12SignalSender14measurements_1Ev+0x106>
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 8009dc2:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8009dc6:	ee07 3a90 	vmov	s15, r3
 8009dca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009dce:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009dd2:	edc7 7a00 	vstr	s15, [r7]
 8009dd6:	783b      	ldrb	r3, [r7, #0]
 8009dd8:	b2db      	uxtb	r3, r3
 8009dda:	687a      	ldr	r2, [r7, #4]
 8009ddc:	7093      	strb	r3, [r2, #2]
            jlb_rx.measurements_1.line_sensor_4  = 3 == controller.selected_front ? controller.detection_front[3] + 2.0f : controller.detection_front[3];
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 8009de4:	681b      	ldr	r3, [r3, #0]
 8009de6:	2b03      	cmp	r3, #3
 8009de8:	d113      	bne.n	8009e12 <_ZN3jlb12SignalSender14measurements_1Ev+0x13e>
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 8009df0:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 8009df4:	ee07 3a90 	vmov	s15, r3
 8009df8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009dfc:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8009e00:	ee77 7a87 	vadd.f32	s15, s15, s14
 8009e04:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009e08:	edc7 7a00 	vstr	s15, [r7]
 8009e0c:	783b      	ldrb	r3, [r7, #0]
 8009e0e:	b2db      	uxtb	r3, r3
 8009e10:	e00e      	b.n	8009e30 <_ZN3jlb12SignalSender14measurements_1Ev+0x15c>
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 8009e18:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 8009e1c:	ee07 3a90 	vmov	s15, r3
 8009e20:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009e24:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009e28:	edc7 7a00 	vstr	s15, [r7]
 8009e2c:	783b      	ldrb	r3, [r7, #0]
 8009e2e:	b2db      	uxtb	r3, r3
 8009e30:	687a      	ldr	r2, [r7, #4]
 8009e32:	70d3      	strb	r3, [r2, #3]
            jlb_rx.measurements_1.line_sensor_5  = 4 == controller.selected_front ? controller.detection_front[4] + 2.0f : controller.detection_front[4];
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 8009e3a:	681b      	ldr	r3, [r3, #0]
 8009e3c:	2b04      	cmp	r3, #4
 8009e3e:	d113      	bne.n	8009e68 <_ZN3jlb12SignalSender14measurements_1Ev+0x194>
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 8009e46:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8009e4a:	ee07 3a90 	vmov	s15, r3
 8009e4e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009e52:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8009e56:	ee77 7a87 	vadd.f32	s15, s15, s14
 8009e5a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009e5e:	edc7 7a00 	vstr	s15, [r7]
 8009e62:	783b      	ldrb	r3, [r7, #0]
 8009e64:	b2db      	uxtb	r3, r3
 8009e66:	e00e      	b.n	8009e86 <_ZN3jlb12SignalSender14measurements_1Ev+0x1b2>
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 8009e6e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8009e72:	ee07 3a90 	vmov	s15, r3
 8009e76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009e7a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009e7e:	edc7 7a00 	vstr	s15, [r7]
 8009e82:	783b      	ldrb	r3, [r7, #0]
 8009e84:	b2db      	uxtb	r3, r3
 8009e86:	687a      	ldr	r2, [r7, #4]
 8009e88:	7113      	strb	r3, [r2, #4]
            jlb_rx.measurements_1.line_sensor_6  = 5 == controller.selected_front ? controller.detection_front[5] + 2.0f : controller.detection_front[5];
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 8009e90:	681b      	ldr	r3, [r3, #0]
 8009e92:	2b05      	cmp	r3, #5
 8009e94:	d113      	bne.n	8009ebe <_ZN3jlb12SignalSender14measurements_1Ev+0x1ea>
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 8009e9c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8009ea0:	ee07 3a90 	vmov	s15, r3
 8009ea4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009ea8:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8009eac:	ee77 7a87 	vadd.f32	s15, s15, s14
 8009eb0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009eb4:	edc7 7a00 	vstr	s15, [r7]
 8009eb8:	783b      	ldrb	r3, [r7, #0]
 8009eba:	b2db      	uxtb	r3, r3
 8009ebc:	e00e      	b.n	8009edc <_ZN3jlb12SignalSender14measurements_1Ev+0x208>
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 8009ec4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8009ec8:	ee07 3a90 	vmov	s15, r3
 8009ecc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009ed0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009ed4:	edc7 7a00 	vstr	s15, [r7]
 8009ed8:	783b      	ldrb	r3, [r7, #0]
 8009eda:	b2db      	uxtb	r3, r3
 8009edc:	687a      	ldr	r2, [r7, #4]
 8009ede:	7153      	strb	r3, [r2, #5]
            jlb_rx.measurements_1.line_sensor_7  = 6 == controller.selected_front ? controller.detection_front[6] + 2.0f : controller.detection_front[6];
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 8009ee6:	681b      	ldr	r3, [r3, #0]
 8009ee8:	2b06      	cmp	r3, #6
 8009eea:	d113      	bne.n	8009f14 <_ZN3jlb12SignalSender14measurements_1Ev+0x240>
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 8009ef2:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8009ef6:	ee07 3a90 	vmov	s15, r3
 8009efa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009efe:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8009f02:	ee77 7a87 	vadd.f32	s15, s15, s14
 8009f06:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009f0a:	edc7 7a00 	vstr	s15, [r7]
 8009f0e:	783b      	ldrb	r3, [r7, #0]
 8009f10:	b2db      	uxtb	r3, r3
 8009f12:	e00e      	b.n	8009f32 <_ZN3jlb12SignalSender14measurements_1Ev+0x25e>
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 8009f1a:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8009f1e:	ee07 3a90 	vmov	s15, r3
 8009f22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009f26:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009f2a:	edc7 7a00 	vstr	s15, [r7]
 8009f2e:	783b      	ldrb	r3, [r7, #0]
 8009f30:	b2db      	uxtb	r3, r3
 8009f32:	687a      	ldr	r2, [r7, #4]
 8009f34:	7193      	strb	r3, [r2, #6]
            jlb_rx.measurements_1.line_sensor_8  = 7 == controller.selected_front ? controller.detection_front[7] + 2.0f : controller.detection_front[7];
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 8009f3c:	681b      	ldr	r3, [r3, #0]
 8009f3e:	2b07      	cmp	r3, #7
 8009f40:	d113      	bne.n	8009f6a <_ZN3jlb12SignalSender14measurements_1Ev+0x296>
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 8009f48:	f893 303b 	ldrb.w	r3, [r3, #59]	; 0x3b
 8009f4c:	ee07 3a90 	vmov	s15, r3
 8009f50:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009f54:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8009f58:	ee77 7a87 	vadd.f32	s15, s15, s14
 8009f5c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009f60:	edc7 7a00 	vstr	s15, [r7]
 8009f64:	783b      	ldrb	r3, [r7, #0]
 8009f66:	b2db      	uxtb	r3, r3
 8009f68:	e00e      	b.n	8009f88 <_ZN3jlb12SignalSender14measurements_1Ev+0x2b4>
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 8009f70:	f893 303b 	ldrb.w	r3, [r3, #59]	; 0x3b
 8009f74:	ee07 3a90 	vmov	s15, r3
 8009f78:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009f7c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009f80:	edc7 7a00 	vstr	s15, [r7]
 8009f84:	783b      	ldrb	r3, [r7, #0]
 8009f86:	b2db      	uxtb	r3, r3
 8009f88:	687a      	ldr	r2, [r7, #4]
 8009f8a:	71d3      	strb	r3, [r2, #7]
            jlb_rx.measurements_1.line_sensor_9  = 8 == controller.selected_front ? controller.detection_front[8] + 2.0f : controller.detection_front[8];
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 8009f92:	681b      	ldr	r3, [r3, #0]
 8009f94:	2b08      	cmp	r3, #8
 8009f96:	d113      	bne.n	8009fc0 <_ZN3jlb12SignalSender14measurements_1Ev+0x2ec>
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 8009f9e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009fa2:	ee07 3a90 	vmov	s15, r3
 8009fa6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009faa:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8009fae:	ee77 7a87 	vadd.f32	s15, s15, s14
 8009fb2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009fb6:	edc7 7a00 	vstr	s15, [r7]
 8009fba:	783b      	ldrb	r3, [r7, #0]
 8009fbc:	b2db      	uxtb	r3, r3
 8009fbe:	e00e      	b.n	8009fde <_ZN3jlb12SignalSender14measurements_1Ev+0x30a>
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 8009fc6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009fca:	ee07 3a90 	vmov	s15, r3
 8009fce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009fd2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009fd6:	edc7 7a00 	vstr	s15, [r7]
 8009fda:	783b      	ldrb	r3, [r7, #0]
 8009fdc:	b2db      	uxtb	r3, r3
 8009fde:	687a      	ldr	r2, [r7, #4]
 8009fe0:	7213      	strb	r3, [r2, #8]
            jlb_rx.measurements_1.line_sensor_10 = 9 == controller.selected_front ? controller.detection_front[9] + 2.0f : controller.detection_front[9];
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 8009fe8:	681b      	ldr	r3, [r3, #0]
 8009fea:	2b09      	cmp	r3, #9
 8009fec:	d113      	bne.n	800a016 <_ZN3jlb12SignalSender14measurements_1Ev+0x342>
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 8009ff4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009ff8:	ee07 3a90 	vmov	s15, r3
 8009ffc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a000:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800a004:	ee77 7a87 	vadd.f32	s15, s15, s14
 800a008:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a00c:	edc7 7a00 	vstr	s15, [r7]
 800a010:	783b      	ldrb	r3, [r7, #0]
 800a012:	b2db      	uxtb	r3, r3
 800a014:	e00e      	b.n	800a034 <_ZN3jlb12SignalSender14measurements_1Ev+0x360>
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800a01c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a020:	ee07 3a90 	vmov	s15, r3
 800a024:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a028:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a02c:	edc7 7a00 	vstr	s15, [r7]
 800a030:	783b      	ldrb	r3, [r7, #0]
 800a032:	b2db      	uxtb	r3, r3
 800a034:	687a      	ldr	r2, [r7, #4]
 800a036:	7253      	strb	r3, [r2, #9]
            jlb_rx.measurements_1.line_sensor_11 = 10 == controller.selected_front ? controller.detection_front[10] + 2.0f : controller.detection_front[10];
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800a03e:	681b      	ldr	r3, [r3, #0]
 800a040:	2b0a      	cmp	r3, #10
 800a042:	d113      	bne.n	800a06c <_ZN3jlb12SignalSender14measurements_1Ev+0x398>
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800a04a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a04e:	ee07 3a90 	vmov	s15, r3
 800a052:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a056:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800a05a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800a05e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a062:	edc7 7a00 	vstr	s15, [r7]
 800a066:	783b      	ldrb	r3, [r7, #0]
 800a068:	b2db      	uxtb	r3, r3
 800a06a:	e00e      	b.n	800a08a <_ZN3jlb12SignalSender14measurements_1Ev+0x3b6>
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800a072:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a076:	ee07 3a90 	vmov	s15, r3
 800a07a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a07e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a082:	edc7 7a00 	vstr	s15, [r7]
 800a086:	783b      	ldrb	r3, [r7, #0]
 800a088:	b2db      	uxtb	r3, r3
 800a08a:	687a      	ldr	r2, [r7, #4]
 800a08c:	7293      	strb	r3, [r2, #10]
            jlb_rx.measurements_1.line_sensor_12 = 11 == controller.selected_front ? controller.detection_front[11] + 2.0f : controller.detection_front[11];
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800a094:	681b      	ldr	r3, [r3, #0]
 800a096:	2b0b      	cmp	r3, #11
 800a098:	d113      	bne.n	800a0c2 <_ZN3jlb12SignalSender14measurements_1Ev+0x3ee>
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800a0a0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800a0a4:	ee07 3a90 	vmov	s15, r3
 800a0a8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a0ac:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800a0b0:	ee77 7a87 	vadd.f32	s15, s15, s14
 800a0b4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a0b8:	edc7 7a00 	vstr	s15, [r7]
 800a0bc:	783b      	ldrb	r3, [r7, #0]
 800a0be:	b2db      	uxtb	r3, r3
 800a0c0:	e00e      	b.n	800a0e0 <_ZN3jlb12SignalSender14measurements_1Ev+0x40c>
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800a0c8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800a0cc:	ee07 3a90 	vmov	s15, r3
 800a0d0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a0d4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a0d8:	edc7 7a00 	vstr	s15, [r7]
 800a0dc:	783b      	ldrb	r3, [r7, #0]
 800a0de:	b2db      	uxtb	r3, r3
 800a0e0:	687a      	ldr	r2, [r7, #4]
 800a0e2:	72d3      	strb	r3, [r2, #11]
            jlb_rx.measurements_1.line_sensor_13 = 12 == controller.selected_front ? controller.detection_front[12] + 2.0f : controller.detection_front[12];
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800a0ea:	681b      	ldr	r3, [r3, #0]
 800a0ec:	2b0c      	cmp	r3, #12
 800a0ee:	d113      	bne.n	800a118 <_ZN3jlb12SignalSender14measurements_1Ev+0x444>
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800a0f6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800a0fa:	ee07 3a90 	vmov	s15, r3
 800a0fe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a102:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800a106:	ee77 7a87 	vadd.f32	s15, s15, s14
 800a10a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a10e:	edc7 7a00 	vstr	s15, [r7]
 800a112:	783b      	ldrb	r3, [r7, #0]
 800a114:	b2db      	uxtb	r3, r3
 800a116:	e00e      	b.n	800a136 <_ZN3jlb12SignalSender14measurements_1Ev+0x462>
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800a11e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800a122:	ee07 3a90 	vmov	s15, r3
 800a126:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a12a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a12e:	edc7 7a00 	vstr	s15, [r7]
 800a132:	783b      	ldrb	r3, [r7, #0]
 800a134:	b2db      	uxtb	r3, r3
 800a136:	687a      	ldr	r2, [r7, #4]
 800a138:	7313      	strb	r3, [r2, #12]
            jlb_rx.measurements_1.line_sensor_14 = 13 == controller.selected_front ? controller.detection_front[13] + 2.0f : controller.detection_front[13];
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800a140:	681b      	ldr	r3, [r3, #0]
 800a142:	2b0d      	cmp	r3, #13
 800a144:	d113      	bne.n	800a16e <_ZN3jlb12SignalSender14measurements_1Ev+0x49a>
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800a14c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a150:	ee07 3a90 	vmov	s15, r3
 800a154:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a158:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800a15c:	ee77 7a87 	vadd.f32	s15, s15, s14
 800a160:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a164:	edc7 7a00 	vstr	s15, [r7]
 800a168:	783b      	ldrb	r3, [r7, #0]
 800a16a:	b2db      	uxtb	r3, r3
 800a16c:	e00e      	b.n	800a18c <_ZN3jlb12SignalSender14measurements_1Ev+0x4b8>
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800a174:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a178:	ee07 3a90 	vmov	s15, r3
 800a17c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a180:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a184:	edc7 7a00 	vstr	s15, [r7]
 800a188:	783b      	ldrb	r3, [r7, #0]
 800a18a:	b2db      	uxtb	r3, r3
 800a18c:	687a      	ldr	r2, [r7, #4]
 800a18e:	7353      	strb	r3, [r2, #13]
            jlb_rx.measurements_1.line_sensor_15 = 14 == controller.selected_front ? controller.detection_front[14] + 2.0f : controller.detection_front[14];
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800a196:	681b      	ldr	r3, [r3, #0]
 800a198:	2b0e      	cmp	r3, #14
 800a19a:	d113      	bne.n	800a1c4 <_ZN3jlb12SignalSender14measurements_1Ev+0x4f0>
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800a1a2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800a1a6:	ee07 3a90 	vmov	s15, r3
 800a1aa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a1ae:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800a1b2:	ee77 7a87 	vadd.f32	s15, s15, s14
 800a1b6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a1ba:	edc7 7a00 	vstr	s15, [r7]
 800a1be:	783b      	ldrb	r3, [r7, #0]
 800a1c0:	b2db      	uxtb	r3, r3
 800a1c2:	e00e      	b.n	800a1e2 <_ZN3jlb12SignalSender14measurements_1Ev+0x50e>
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800a1ca:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800a1ce:	ee07 3a90 	vmov	s15, r3
 800a1d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a1d6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a1da:	edc7 7a00 	vstr	s15, [r7]
 800a1de:	783b      	ldrb	r3, [r7, #0]
 800a1e0:	b2db      	uxtb	r3, r3
 800a1e2:	687a      	ldr	r2, [r7, #4]
 800a1e4:	7393      	strb	r3, [r2, #14]
            jlb_rx.measurements_1.line_sensor_16 = 15 == controller.selected_front ? controller.detection_front[15] + 2.0f : controller.detection_front[15];
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800a1ec:	681b      	ldr	r3, [r3, #0]
 800a1ee:	2b0f      	cmp	r3, #15
 800a1f0:	d113      	bne.n	800a21a <_ZN3jlb12SignalSender14measurements_1Ev+0x546>
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800a1f8:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800a1fc:	ee07 3a90 	vmov	s15, r3
 800a200:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a204:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800a208:	ee77 7a87 	vadd.f32	s15, s15, s14
 800a20c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a210:	edc7 7a00 	vstr	s15, [r7]
 800a214:	783b      	ldrb	r3, [r7, #0]
 800a216:	b2db      	uxtb	r3, r3
 800a218:	e00e      	b.n	800a238 <_ZN3jlb12SignalSender14measurements_1Ev+0x564>
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800a220:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800a224:	ee07 3a90 	vmov	s15, r3
 800a228:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a22c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a230:	edc7 7a00 	vstr	s15, [r7]
 800a234:	783b      	ldrb	r3, [r7, #0]
 800a236:	b2db      	uxtb	r3, r3
 800a238:	687a      	ldr	r2, [r7, #4]
 800a23a:	73d3      	strb	r3, [r2, #15]
#ifndef SIMULATION
            jlb_rx.measurements_1.line_sensor_17 = 16 == controller.selected_front ? controller.detection_front[16] + 2.0f : controller.detection_front[16];
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800a242:	681b      	ldr	r3, [r3, #0]
 800a244:	2b10      	cmp	r3, #16
 800a246:	d113      	bne.n	800a270 <_ZN3jlb12SignalSender14measurements_1Ev+0x59c>
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800a24e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a252:	ee07 3a90 	vmov	s15, r3
 800a256:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a25a:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800a25e:	ee77 7a87 	vadd.f32	s15, s15, s14
 800a262:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a266:	edc7 7a00 	vstr	s15, [r7]
 800a26a:	783b      	ldrb	r3, [r7, #0]
 800a26c:	b2db      	uxtb	r3, r3
 800a26e:	e00e      	b.n	800a28e <_ZN3jlb12SignalSender14measurements_1Ev+0x5ba>
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800a276:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a27a:	ee07 3a90 	vmov	s15, r3
 800a27e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a282:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a286:	edc7 7a00 	vstr	s15, [r7]
 800a28a:	783b      	ldrb	r3, [r7, #0]
 800a28c:	b2db      	uxtb	r3, r3
 800a28e:	687a      	ldr	r2, [r7, #4]
 800a290:	7413      	strb	r3, [r2, #16]
            jlb_rx.measurements_1.line_sensor_18 = 17 == controller.selected_front ? controller.detection_front[17] + 2.0f : controller.detection_front[17];
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800a298:	681b      	ldr	r3, [r3, #0]
 800a29a:	2b11      	cmp	r3, #17
 800a29c:	d113      	bne.n	800a2c6 <_ZN3jlb12SignalSender14measurements_1Ev+0x5f2>
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800a2a4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a2a8:	ee07 3a90 	vmov	s15, r3
 800a2ac:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a2b0:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800a2b4:	ee77 7a87 	vadd.f32	s15, s15, s14
 800a2b8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a2bc:	edc7 7a00 	vstr	s15, [r7]
 800a2c0:	783b      	ldrb	r3, [r7, #0]
 800a2c2:	b2db      	uxtb	r3, r3
 800a2c4:	e00e      	b.n	800a2e4 <_ZN3jlb12SignalSender14measurements_1Ev+0x610>
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800a2cc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a2d0:	ee07 3a90 	vmov	s15, r3
 800a2d4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a2d8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a2dc:	edc7 7a00 	vstr	s15, [r7]
 800a2e0:	783b      	ldrb	r3, [r7, #0]
 800a2e2:	b2db      	uxtb	r3, r3
 800a2e4:	687a      	ldr	r2, [r7, #4]
 800a2e6:	7453      	strb	r3, [r2, #17]
            jlb_rx.measurements_1.line_sensor_19 = 18 == controller.selected_front ? controller.detection_front[18] + 2.0f : controller.detection_front[18];
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800a2ee:	681b      	ldr	r3, [r3, #0]
 800a2f0:	2b12      	cmp	r3, #18
 800a2f2:	d113      	bne.n	800a31c <_ZN3jlb12SignalSender14measurements_1Ev+0x648>
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800a2fa:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800a2fe:	ee07 3a90 	vmov	s15, r3
 800a302:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a306:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800a30a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800a30e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a312:	edc7 7a00 	vstr	s15, [r7]
 800a316:	783b      	ldrb	r3, [r7, #0]
 800a318:	b2db      	uxtb	r3, r3
 800a31a:	e00e      	b.n	800a33a <_ZN3jlb12SignalSender14measurements_1Ev+0x666>
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800a322:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800a326:	ee07 3a90 	vmov	s15, r3
 800a32a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a32e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a332:	edc7 7a00 	vstr	s15, [r7]
 800a336:	783b      	ldrb	r3, [r7, #0]
 800a338:	b2db      	uxtb	r3, r3
 800a33a:	687a      	ldr	r2, [r7, #4]
 800a33c:	7493      	strb	r3, [r2, #18]
            jlb_rx.measurements_1.line_sensor_20 = 19 == controller.selected_front ? controller.detection_front[19] + 2.0f : controller.detection_front[19];
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800a344:	681b      	ldr	r3, [r3, #0]
 800a346:	2b13      	cmp	r3, #19
 800a348:	d113      	bne.n	800a372 <_ZN3jlb12SignalSender14measurements_1Ev+0x69e>
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800a350:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 800a354:	ee07 3a90 	vmov	s15, r3
 800a358:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a35c:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800a360:	ee77 7a87 	vadd.f32	s15, s15, s14
 800a364:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a368:	edc7 7a00 	vstr	s15, [r7]
 800a36c:	783b      	ldrb	r3, [r7, #0]
 800a36e:	b2db      	uxtb	r3, r3
 800a370:	e00e      	b.n	800a390 <_ZN3jlb12SignalSender14measurements_1Ev+0x6bc>
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800a378:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 800a37c:	ee07 3a90 	vmov	s15, r3
 800a380:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a384:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a388:	edc7 7a00 	vstr	s15, [r7]
 800a38c:	783b      	ldrb	r3, [r7, #0]
 800a38e:	b2db      	uxtb	r3, r3
 800a390:	687a      	ldr	r2, [r7, #4]
 800a392:	74d3      	strb	r3, [r2, #19]
            jlb_rx.measurements_1.line_sensor_21 = 20 == controller.selected_front ? controller.detection_front[20] + 2.0f : controller.detection_front[20];
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800a39a:	681b      	ldr	r3, [r3, #0]
 800a39c:	2b14      	cmp	r3, #20
 800a39e:	d113      	bne.n	800a3c8 <_ZN3jlb12SignalSender14measurements_1Ev+0x6f4>
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800a3a6:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800a3aa:	ee07 3a90 	vmov	s15, r3
 800a3ae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a3b2:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800a3b6:	ee77 7a87 	vadd.f32	s15, s15, s14
 800a3ba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a3be:	edc7 7a00 	vstr	s15, [r7]
 800a3c2:	783b      	ldrb	r3, [r7, #0]
 800a3c4:	b2db      	uxtb	r3, r3
 800a3c6:	e00e      	b.n	800a3e6 <_ZN3jlb12SignalSender14measurements_1Ev+0x712>
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800a3ce:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800a3d2:	ee07 3a90 	vmov	s15, r3
 800a3d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a3da:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a3de:	edc7 7a00 	vstr	s15, [r7]
 800a3e2:	783b      	ldrb	r3, [r7, #0]
 800a3e4:	b2db      	uxtb	r3, r3
 800a3e6:	687a      	ldr	r2, [r7, #4]
 800a3e8:	7513      	strb	r3, [r2, #20]
            jlb_rx.measurements_1.line_sensor_22 = 21 == controller.selected_front ? controller.detection_front[21] + 2.0f : controller.detection_front[21];
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800a3f0:	681b      	ldr	r3, [r3, #0]
 800a3f2:	2b15      	cmp	r3, #21
 800a3f4:	d113      	bne.n	800a41e <_ZN3jlb12SignalSender14measurements_1Ev+0x74a>
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800a3fc:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 800a400:	ee07 3a90 	vmov	s15, r3
 800a404:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a408:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800a40c:	ee77 7a87 	vadd.f32	s15, s15, s14
 800a410:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a414:	edc7 7a00 	vstr	s15, [r7]
 800a418:	783b      	ldrb	r3, [r7, #0]
 800a41a:	b2db      	uxtb	r3, r3
 800a41c:	e00e      	b.n	800a43c <_ZN3jlb12SignalSender14measurements_1Ev+0x768>
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800a424:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 800a428:	ee07 3a90 	vmov	s15, r3
 800a42c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a430:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a434:	edc7 7a00 	vstr	s15, [r7]
 800a438:	783b      	ldrb	r3, [r7, #0]
 800a43a:	b2db      	uxtb	r3, r3
 800a43c:	687a      	ldr	r2, [r7, #4]
 800a43e:	7553      	strb	r3, [r2, #21]
            jlb_rx.measurements_1.line_sensor_23 = 22 == controller.selected_front ? controller.detection_front[22] + 2.0f : controller.detection_front[22];
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800a446:	681b      	ldr	r3, [r3, #0]
 800a448:	2b16      	cmp	r3, #22
 800a44a:	d113      	bne.n	800a474 <_ZN3jlb12SignalSender14measurements_1Ev+0x7a0>
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800a452:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
 800a456:	ee07 3a90 	vmov	s15, r3
 800a45a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a45e:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800a462:	ee77 7a87 	vadd.f32	s15, s15, s14
 800a466:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a46a:	edc7 7a00 	vstr	s15, [r7]
 800a46e:	783b      	ldrb	r3, [r7, #0]
 800a470:	b2db      	uxtb	r3, r3
 800a472:	e00e      	b.n	800a492 <_ZN3jlb12SignalSender14measurements_1Ev+0x7be>
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800a47a:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
 800a47e:	ee07 3a90 	vmov	s15, r3
 800a482:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a486:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a48a:	edc7 7a00 	vstr	s15, [r7]
 800a48e:	783b      	ldrb	r3, [r7, #0]
 800a490:	b2db      	uxtb	r3, r3
 800a492:	687a      	ldr	r2, [r7, #4]
 800a494:	7593      	strb	r3, [r2, #22]
            jlb_rx.measurements_1.line_sensor_24 = 23 == controller.selected_front ? controller.detection_front[23] + 2.0f : controller.detection_front[23];
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800a49c:	681b      	ldr	r3, [r3, #0]
 800a49e:	2b17      	cmp	r3, #23
 800a4a0:	d113      	bne.n	800a4ca <_ZN3jlb12SignalSender14measurements_1Ev+0x7f6>
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800a4a8:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 800a4ac:	ee07 3a90 	vmov	s15, r3
 800a4b0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a4b4:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800a4b8:	ee77 7a87 	vadd.f32	s15, s15, s14
 800a4bc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a4c0:	edc7 7a00 	vstr	s15, [r7]
 800a4c4:	783b      	ldrb	r3, [r7, #0]
 800a4c6:	b2db      	uxtb	r3, r3
 800a4c8:	e00e      	b.n	800a4e8 <_ZN3jlb12SignalSender14measurements_1Ev+0x814>
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800a4d0:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 800a4d4:	ee07 3a90 	vmov	s15, r3
 800a4d8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a4dc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a4e0:	edc7 7a00 	vstr	s15, [r7]
 800a4e4:	783b      	ldrb	r3, [r7, #0]
 800a4e6:	b2db      	uxtb	r3, r3
 800a4e8:	687a      	ldr	r2, [r7, #4]
 800a4ea:	75d3      	strb	r3, [r2, #23]
            jlb_rx.measurements_1.line_sensor_25 = 24 == controller.selected_front ? controller.detection_front[24] + 2.0f : controller.detection_front[24];
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800a4f2:	681b      	ldr	r3, [r3, #0]
 800a4f4:	2b18      	cmp	r3, #24
 800a4f6:	d113      	bne.n	800a520 <_ZN3jlb12SignalSender14measurements_1Ev+0x84c>
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800a4fe:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800a502:	ee07 3a90 	vmov	s15, r3
 800a506:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a50a:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800a50e:	ee77 7a87 	vadd.f32	s15, s15, s14
 800a512:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a516:	edc7 7a00 	vstr	s15, [r7]
 800a51a:	783b      	ldrb	r3, [r7, #0]
 800a51c:	b2db      	uxtb	r3, r3
 800a51e:	e00e      	b.n	800a53e <_ZN3jlb12SignalSender14measurements_1Ev+0x86a>
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800a526:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800a52a:	ee07 3a90 	vmov	s15, r3
 800a52e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a532:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a536:	edc7 7a00 	vstr	s15, [r7]
 800a53a:	783b      	ldrb	r3, [r7, #0]
 800a53c:	b2db      	uxtb	r3, r3
 800a53e:	687a      	ldr	r2, [r7, #4]
 800a540:	7613      	strb	r3, [r2, #24]
            jlb_rx.measurements_1.line_sensor_26 = 25 == controller.selected_front ? controller.detection_front[25] + 2.0f : controller.detection_front[25];
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800a548:	681b      	ldr	r3, [r3, #0]
 800a54a:	2b19      	cmp	r3, #25
 800a54c:	d113      	bne.n	800a576 <_ZN3jlb12SignalSender14measurements_1Ev+0x8a2>
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800a554:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 800a558:	ee07 3a90 	vmov	s15, r3
 800a55c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a560:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800a564:	ee77 7a87 	vadd.f32	s15, s15, s14
 800a568:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a56c:	edc7 7a00 	vstr	s15, [r7]
 800a570:	783b      	ldrb	r3, [r7, #0]
 800a572:	b2db      	uxtb	r3, r3
 800a574:	e00e      	b.n	800a594 <_ZN3jlb12SignalSender14measurements_1Ev+0x8c0>
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800a57c:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 800a580:	ee07 3a90 	vmov	s15, r3
 800a584:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a588:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a58c:	edc7 7a00 	vstr	s15, [r7]
 800a590:	783b      	ldrb	r3, [r7, #0]
 800a592:	b2db      	uxtb	r3, r3
 800a594:	687a      	ldr	r2, [r7, #4]
 800a596:	7653      	strb	r3, [r2, #25]
            jlb_rx.measurements_1.line_sensor_27 = 26 == controller.selected_front ? controller.detection_front[26] + 2.0f : controller.detection_front[26];
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800a59e:	681b      	ldr	r3, [r3, #0]
 800a5a0:	2b1a      	cmp	r3, #26
 800a5a2:	d113      	bne.n	800a5cc <_ZN3jlb12SignalSender14measurements_1Ev+0x8f8>
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800a5aa:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800a5ae:	ee07 3a90 	vmov	s15, r3
 800a5b2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a5b6:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800a5ba:	ee77 7a87 	vadd.f32	s15, s15, s14
 800a5be:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a5c2:	edc7 7a00 	vstr	s15, [r7]
 800a5c6:	783b      	ldrb	r3, [r7, #0]
 800a5c8:	b2db      	uxtb	r3, r3
 800a5ca:	e00e      	b.n	800a5ea <_ZN3jlb12SignalSender14measurements_1Ev+0x916>
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800a5d2:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800a5d6:	ee07 3a90 	vmov	s15, r3
 800a5da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a5de:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a5e2:	edc7 7a00 	vstr	s15, [r7]
 800a5e6:	783b      	ldrb	r3, [r7, #0]
 800a5e8:	b2db      	uxtb	r3, r3
 800a5ea:	687a      	ldr	r2, [r7, #4]
 800a5ec:	7693      	strb	r3, [r2, #26]
            jlb_rx.measurements_1.line_sensor_28 = 27 == controller.selected_front ? controller.detection_front[27] + 2.0f : controller.detection_front[27];
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800a5f4:	681b      	ldr	r3, [r3, #0]
 800a5f6:	2b1b      	cmp	r3, #27
 800a5f8:	d113      	bne.n	800a622 <_ZN3jlb12SignalSender14measurements_1Ev+0x94e>
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800a600:	f893 304f 	ldrb.w	r3, [r3, #79]	; 0x4f
 800a604:	ee07 3a90 	vmov	s15, r3
 800a608:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a60c:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800a610:	ee77 7a87 	vadd.f32	s15, s15, s14
 800a614:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a618:	edc7 7a00 	vstr	s15, [r7]
 800a61c:	783b      	ldrb	r3, [r7, #0]
 800a61e:	b2db      	uxtb	r3, r3
 800a620:	e00e      	b.n	800a640 <_ZN3jlb12SignalSender14measurements_1Ev+0x96c>
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800a628:	f893 304f 	ldrb.w	r3, [r3, #79]	; 0x4f
 800a62c:	ee07 3a90 	vmov	s15, r3
 800a630:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a634:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a638:	edc7 7a00 	vstr	s15, [r7]
 800a63c:	783b      	ldrb	r3, [r7, #0]
 800a63e:	b2db      	uxtb	r3, r3
 800a640:	687a      	ldr	r2, [r7, #4]
 800a642:	76d3      	strb	r3, [r2, #27]
            jlb_rx.measurements_1.line_sensor_29 = 28 == controller.selected_front ? controller.detection_front[28] + 2.0f : controller.detection_front[28];
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800a64a:	681b      	ldr	r3, [r3, #0]
 800a64c:	2b1c      	cmp	r3, #28
 800a64e:	d113      	bne.n	800a678 <_ZN3jlb12SignalSender14measurements_1Ev+0x9a4>
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800a656:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800a65a:	ee07 3a90 	vmov	s15, r3
 800a65e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a662:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800a666:	ee77 7a87 	vadd.f32	s15, s15, s14
 800a66a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a66e:	edc7 7a00 	vstr	s15, [r7]
 800a672:	783b      	ldrb	r3, [r7, #0]
 800a674:	b2db      	uxtb	r3, r3
 800a676:	e00e      	b.n	800a696 <_ZN3jlb12SignalSender14measurements_1Ev+0x9c2>
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800a67e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800a682:	ee07 3a90 	vmov	s15, r3
 800a686:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a68a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a68e:	edc7 7a00 	vstr	s15, [r7]
 800a692:	783b      	ldrb	r3, [r7, #0]
 800a694:	b2db      	uxtb	r3, r3
 800a696:	687a      	ldr	r2, [r7, #4]
 800a698:	7713      	strb	r3, [r2, #28]
            jlb_rx.measurements_1.line_sensor_30 = 29 == controller.selected_front ? controller.detection_front[29] + 2.0f : controller.detection_front[29];
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800a6a0:	681b      	ldr	r3, [r3, #0]
 800a6a2:	2b1d      	cmp	r3, #29
 800a6a4:	d113      	bne.n	800a6ce <_ZN3jlb12SignalSender14measurements_1Ev+0x9fa>
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800a6ac:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800a6b0:	ee07 3a90 	vmov	s15, r3
 800a6b4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a6b8:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800a6bc:	ee77 7a87 	vadd.f32	s15, s15, s14
 800a6c0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a6c4:	edc7 7a00 	vstr	s15, [r7]
 800a6c8:	783b      	ldrb	r3, [r7, #0]
 800a6ca:	b2db      	uxtb	r3, r3
 800a6cc:	e00e      	b.n	800a6ec <_ZN3jlb12SignalSender14measurements_1Ev+0xa18>
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800a6d4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800a6d8:	ee07 3a90 	vmov	s15, r3
 800a6dc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a6e0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a6e4:	edc7 7a00 	vstr	s15, [r7]
 800a6e8:	783b      	ldrb	r3, [r7, #0]
 800a6ea:	b2db      	uxtb	r3, r3
 800a6ec:	687a      	ldr	r2, [r7, #4]
 800a6ee:	7753      	strb	r3, [r2, #29]
            jlb_rx.measurements_1.line_sensor_31 = 30 == controller.selected_front ? controller.detection_front[30] + 2.0f : controller.detection_front[30];
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800a6f6:	681b      	ldr	r3, [r3, #0]
 800a6f8:	2b1e      	cmp	r3, #30
 800a6fa:	d113      	bne.n	800a724 <_ZN3jlb12SignalSender14measurements_1Ev+0xa50>
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800a702:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800a706:	ee07 3a90 	vmov	s15, r3
 800a70a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a70e:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800a712:	ee77 7a87 	vadd.f32	s15, s15, s14
 800a716:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a71a:	edc7 7a00 	vstr	s15, [r7]
 800a71e:	783b      	ldrb	r3, [r7, #0]
 800a720:	b2db      	uxtb	r3, r3
 800a722:	e00e      	b.n	800a742 <_ZN3jlb12SignalSender14measurements_1Ev+0xa6e>
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800a72a:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800a72e:	ee07 3a90 	vmov	s15, r3
 800a732:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a736:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a73a:	edc7 7a00 	vstr	s15, [r7]
 800a73e:	783b      	ldrb	r3, [r7, #0]
 800a740:	b2db      	uxtb	r3, r3
 800a742:	687a      	ldr	r2, [r7, #4]
 800a744:	7793      	strb	r3, [r2, #30]
            jlb_rx.measurements_1.line_sensor_32 = 31 == controller.selected_front ? controller.detection_front[31] + 2.0f : controller.detection_front[31];
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800a74c:	681b      	ldr	r3, [r3, #0]
 800a74e:	2b1f      	cmp	r3, #31
 800a750:	d113      	bne.n	800a77a <_ZN3jlb12SignalSender14measurements_1Ev+0xaa6>
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800a758:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 800a75c:	ee07 3a90 	vmov	s15, r3
 800a760:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a764:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800a768:	ee77 7a87 	vadd.f32	s15, s15, s14
 800a76c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a770:	edc7 7a00 	vstr	s15, [r7]
 800a774:	783b      	ldrb	r3, [r7, #0]
 800a776:	b2db      	uxtb	r3, r3
 800a778:	e00e      	b.n	800a798 <_ZN3jlb12SignalSender14measurements_1Ev+0xac4>
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800a780:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 800a784:	ee07 3a90 	vmov	s15, r3
 800a788:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a78c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a790:	edc7 7a00 	vstr	s15, [r7]
 800a794:	783b      	ldrb	r3, [r7, #0]
 800a796:	b2db      	uxtb	r3, r3
 800a798:	687a      	ldr	r2, [r7, #4]
 800a79a:	77d3      	strb	r3, [r2, #31]
#endif

            char    data[measurements_1_DLC + 2] = {0};
 800a79c:	2300      	movs	r3, #0
 800a79e:	60fb      	str	r3, [r7, #12]
 800a7a0:	f107 0310 	add.w	r3, r7, #16
 800a7a4:	2200      	movs	r2, #0
 800a7a6:	601a      	str	r2, [r3, #0]
 800a7a8:	809a      	strh	r2, [r3, #4]
            uint8_t ide                          = measurements_1_IDE;
 800a7aa:	2300      	movs	r3, #0
 800a7ac:	72fb      	strb	r3, [r7, #11]
            uint8_t dlc                          = measurements_1_DLC;
 800a7ae:	2308      	movs	r3, #8
 800a7b0:	72bb      	strb	r3, [r7, #10]
            data[0]                              = measurements_1_CANID;
 800a7b2:	2301      	movs	r3, #1
 800a7b4:	733b      	strb	r3, [r7, #12]
            data[1]                              = measurements_1_DLC;
 800a7b6:	2308      	movs	r3, #8
 800a7b8:	737b      	strb	r3, [r7, #13]
            Pack_measurements_1_jlb(&jlb_rx.measurements_1, reinterpret_cast<uint8_t *>(data + 2), &dlc, &ide);
 800a7ba:	6878      	ldr	r0, [r7, #4]
 800a7bc:	f107 010c 	add.w	r1, r7, #12
 800a7c0:	3102      	adds	r1, #2
 800a7c2:	f107 030b 	add.w	r3, r7, #11
 800a7c6:	f107 020a 	add.w	r2, r7, #10
 800a7ca:	f7f6 fd29 	bl	8001220 <Pack_measurements_1_jlb>
            telemetry_data.insert(telemetry_data.end(), data, data + measurements_1_DLC + 2);
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	f503 74ee 	add.w	r4, r3, #476	; 0x1dc
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	f503 73ee 	add.w	r3, r3, #476	; 0x1dc
 800a7da:	4618      	mov	r0, r3
 800a7dc:	f002 fb45 	bl	800ce6a <_ZNSt6vectorIcSaIcEE3endEv>
 800a7e0:	4603      	mov	r3, r0
 800a7e2:	61fb      	str	r3, [r7, #28]
 800a7e4:	f107 021c 	add.w	r2, r7, #28
 800a7e8:	f107 0318 	add.w	r3, r7, #24
 800a7ec:	4611      	mov	r1, r2
 800a7ee:	4618      	mov	r0, r3
 800a7f0:	f002 fbdd 	bl	800cfae <_ZN9__gnu_cxx17__normal_iteratorIPKcSt6vectorIcSaIcEEEC1IPcEERKNS0_IT_NS_11__enable_ifIXsrSt10__are_sameIS9_S8_E7__valueES5_E6__typeEEE>
 800a7f4:	f107 030c 	add.w	r3, r7, #12
 800a7f8:	330a      	adds	r3, #10
 800a7fa:	f107 020c 	add.w	r2, r7, #12
 800a7fe:	69b9      	ldr	r1, [r7, #24]
 800a800:	4620      	mov	r0, r4
 800a802:	f002 fbe5 	bl	800cfd0 <_ZNSt6vectorIcSaIcEE6insertIPcvEEN9__gnu_cxx17__normal_iteratorIS3_S1_EENS5_IPKcS1_EET_SA_>
        }
 800a806:	bf00      	nop
 800a808:	3724      	adds	r7, #36	; 0x24
 800a80a:	46bd      	mov	sp, r7
 800a80c:	bd90      	pop	{r4, r7, pc}

0800a80e <_ZN3jlb12SignalSender14measurements_2Ev>:

        void measurements_2()
 800a80e:	b590      	push	{r4, r7, lr}
 800a810:	b089      	sub	sp, #36	; 0x24
 800a812:	af00      	add	r7, sp, #0
 800a814:	6078      	str	r0, [r7, #4]
        {
            jlb_rx.measurements_2.line_sensor_1  = 0 == controller.selected_rear ? controller.detection_rear[0] + 2.0f : controller.detection_rear[0];
 800a816:	687b      	ldr	r3, [r7, #4]
 800a818:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800a81c:	685b      	ldr	r3, [r3, #4]
 800a81e:	2b00      	cmp	r3, #0
 800a820:	d113      	bne.n	800a84a <_ZN3jlb12SignalSender14measurements_2Ev+0x3c>
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800a828:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800a82c:	ee07 3a90 	vmov	s15, r3
 800a830:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a834:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800a838:	ee77 7a87 	vadd.f32	s15, s15, s14
 800a83c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a840:	edc7 7a00 	vstr	s15, [r7]
 800a844:	783b      	ldrb	r3, [r7, #0]
 800a846:	b2db      	uxtb	r3, r3
 800a848:	e00e      	b.n	800a868 <_ZN3jlb12SignalSender14measurements_2Ev+0x5a>
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800a850:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800a854:	ee07 3a90 	vmov	s15, r3
 800a858:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a85c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a860:	edc7 7a00 	vstr	s15, [r7]
 800a864:	783b      	ldrb	r3, [r7, #0]
 800a866:	b2db      	uxtb	r3, r3
 800a868:	687a      	ldr	r2, [r7, #4]
 800a86a:	f882 3020 	strb.w	r3, [r2, #32]
            jlb_rx.measurements_2.line_sensor_2  = 1 == controller.selected_rear ? controller.detection_rear[1] + 2.0f : controller.detection_rear[1];
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800a874:	685b      	ldr	r3, [r3, #4]
 800a876:	2b01      	cmp	r3, #1
 800a878:	d113      	bne.n	800a8a2 <_ZN3jlb12SignalSender14measurements_2Ev+0x94>
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800a880:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 800a884:	ee07 3a90 	vmov	s15, r3
 800a888:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a88c:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800a890:	ee77 7a87 	vadd.f32	s15, s15, s14
 800a894:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a898:	edc7 7a00 	vstr	s15, [r7]
 800a89c:	783b      	ldrb	r3, [r7, #0]
 800a89e:	b2db      	uxtb	r3, r3
 800a8a0:	e00e      	b.n	800a8c0 <_ZN3jlb12SignalSender14measurements_2Ev+0xb2>
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800a8a8:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 800a8ac:	ee07 3a90 	vmov	s15, r3
 800a8b0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a8b4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a8b8:	edc7 7a00 	vstr	s15, [r7]
 800a8bc:	783b      	ldrb	r3, [r7, #0]
 800a8be:	b2db      	uxtb	r3, r3
 800a8c0:	687a      	ldr	r2, [r7, #4]
 800a8c2:	f882 3021 	strb.w	r3, [r2, #33]	; 0x21
            jlb_rx.measurements_2.line_sensor_3  = 2 == controller.selected_rear ? controller.detection_rear[2] + 2.0f : controller.detection_rear[2];
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800a8cc:	685b      	ldr	r3, [r3, #4]
 800a8ce:	2b02      	cmp	r3, #2
 800a8d0:	d113      	bne.n	800a8fa <_ZN3jlb12SignalSender14measurements_2Ev+0xec>
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800a8d8:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 800a8dc:	ee07 3a90 	vmov	s15, r3
 800a8e0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a8e4:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800a8e8:	ee77 7a87 	vadd.f32	s15, s15, s14
 800a8ec:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a8f0:	edc7 7a00 	vstr	s15, [r7]
 800a8f4:	783b      	ldrb	r3, [r7, #0]
 800a8f6:	b2db      	uxtb	r3, r3
 800a8f8:	e00e      	b.n	800a918 <_ZN3jlb12SignalSender14measurements_2Ev+0x10a>
 800a8fa:	687b      	ldr	r3, [r7, #4]
 800a8fc:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800a900:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 800a904:	ee07 3a90 	vmov	s15, r3
 800a908:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a90c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a910:	edc7 7a00 	vstr	s15, [r7]
 800a914:	783b      	ldrb	r3, [r7, #0]
 800a916:	b2db      	uxtb	r3, r3
 800a918:	687a      	ldr	r2, [r7, #4]
 800a91a:	f882 3022 	strb.w	r3, [r2, #34]	; 0x22
            jlb_rx.measurements_2.line_sensor_4  = 3 == controller.selected_rear ? controller.detection_rear[3] + 2.0f : controller.detection_rear[3];
 800a91e:	687b      	ldr	r3, [r7, #4]
 800a920:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800a924:	685b      	ldr	r3, [r3, #4]
 800a926:	2b03      	cmp	r3, #3
 800a928:	d113      	bne.n	800a952 <_ZN3jlb12SignalSender14measurements_2Ev+0x144>
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800a930:	f893 3057 	ldrb.w	r3, [r3, #87]	; 0x57
 800a934:	ee07 3a90 	vmov	s15, r3
 800a938:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a93c:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800a940:	ee77 7a87 	vadd.f32	s15, s15, s14
 800a944:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a948:	edc7 7a00 	vstr	s15, [r7]
 800a94c:	783b      	ldrb	r3, [r7, #0]
 800a94e:	b2db      	uxtb	r3, r3
 800a950:	e00e      	b.n	800a970 <_ZN3jlb12SignalSender14measurements_2Ev+0x162>
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800a958:	f893 3057 	ldrb.w	r3, [r3, #87]	; 0x57
 800a95c:	ee07 3a90 	vmov	s15, r3
 800a960:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a964:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a968:	edc7 7a00 	vstr	s15, [r7]
 800a96c:	783b      	ldrb	r3, [r7, #0]
 800a96e:	b2db      	uxtb	r3, r3
 800a970:	687a      	ldr	r2, [r7, #4]
 800a972:	f882 3023 	strb.w	r3, [r2, #35]	; 0x23
            jlb_rx.measurements_2.line_sensor_5  = 4 == controller.selected_rear ? controller.detection_rear[4] + 2.0f : controller.detection_rear[4];
 800a976:	687b      	ldr	r3, [r7, #4]
 800a978:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800a97c:	685b      	ldr	r3, [r3, #4]
 800a97e:	2b04      	cmp	r3, #4
 800a980:	d113      	bne.n	800a9aa <_ZN3jlb12SignalSender14measurements_2Ev+0x19c>
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800a988:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800a98c:	ee07 3a90 	vmov	s15, r3
 800a990:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a994:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800a998:	ee77 7a87 	vadd.f32	s15, s15, s14
 800a99c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a9a0:	edc7 7a00 	vstr	s15, [r7]
 800a9a4:	783b      	ldrb	r3, [r7, #0]
 800a9a6:	b2db      	uxtb	r3, r3
 800a9a8:	e00e      	b.n	800a9c8 <_ZN3jlb12SignalSender14measurements_2Ev+0x1ba>
 800a9aa:	687b      	ldr	r3, [r7, #4]
 800a9ac:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800a9b0:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800a9b4:	ee07 3a90 	vmov	s15, r3
 800a9b8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a9bc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a9c0:	edc7 7a00 	vstr	s15, [r7]
 800a9c4:	783b      	ldrb	r3, [r7, #0]
 800a9c6:	b2db      	uxtb	r3, r3
 800a9c8:	687a      	ldr	r2, [r7, #4]
 800a9ca:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
            jlb_rx.measurements_2.line_sensor_6  = 5 == controller.selected_rear ? controller.detection_rear[5] + 2.0f : controller.detection_rear[5];
 800a9ce:	687b      	ldr	r3, [r7, #4]
 800a9d0:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800a9d4:	685b      	ldr	r3, [r3, #4]
 800a9d6:	2b05      	cmp	r3, #5
 800a9d8:	d113      	bne.n	800aa02 <_ZN3jlb12SignalSender14measurements_2Ev+0x1f4>
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800a9e0:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800a9e4:	ee07 3a90 	vmov	s15, r3
 800a9e8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a9ec:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800a9f0:	ee77 7a87 	vadd.f32	s15, s15, s14
 800a9f4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a9f8:	edc7 7a00 	vstr	s15, [r7]
 800a9fc:	783b      	ldrb	r3, [r7, #0]
 800a9fe:	b2db      	uxtb	r3, r3
 800aa00:	e00e      	b.n	800aa20 <_ZN3jlb12SignalSender14measurements_2Ev+0x212>
 800aa02:	687b      	ldr	r3, [r7, #4]
 800aa04:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800aa08:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800aa0c:	ee07 3a90 	vmov	s15, r3
 800aa10:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aa14:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800aa18:	edc7 7a00 	vstr	s15, [r7]
 800aa1c:	783b      	ldrb	r3, [r7, #0]
 800aa1e:	b2db      	uxtb	r3, r3
 800aa20:	687a      	ldr	r2, [r7, #4]
 800aa22:	f882 3025 	strb.w	r3, [r2, #37]	; 0x25
            jlb_rx.measurements_2.line_sensor_7  = 6 == controller.selected_rear ? controller.detection_rear[6] + 2.0f : controller.detection_rear[6];
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800aa2c:	685b      	ldr	r3, [r3, #4]
 800aa2e:	2b06      	cmp	r3, #6
 800aa30:	d113      	bne.n	800aa5a <_ZN3jlb12SignalSender14measurements_2Ev+0x24c>
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800aa38:	f893 305a 	ldrb.w	r3, [r3, #90]	; 0x5a
 800aa3c:	ee07 3a90 	vmov	s15, r3
 800aa40:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800aa44:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800aa48:	ee77 7a87 	vadd.f32	s15, s15, s14
 800aa4c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800aa50:	edc7 7a00 	vstr	s15, [r7]
 800aa54:	783b      	ldrb	r3, [r7, #0]
 800aa56:	b2db      	uxtb	r3, r3
 800aa58:	e00e      	b.n	800aa78 <_ZN3jlb12SignalSender14measurements_2Ev+0x26a>
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800aa60:	f893 305a 	ldrb.w	r3, [r3, #90]	; 0x5a
 800aa64:	ee07 3a90 	vmov	s15, r3
 800aa68:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aa6c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800aa70:	edc7 7a00 	vstr	s15, [r7]
 800aa74:	783b      	ldrb	r3, [r7, #0]
 800aa76:	b2db      	uxtb	r3, r3
 800aa78:	687a      	ldr	r2, [r7, #4]
 800aa7a:	f882 3026 	strb.w	r3, [r2, #38]	; 0x26
            jlb_rx.measurements_2.line_sensor_8  = 7 == controller.selected_rear ? controller.detection_rear[7] + 2.0f : controller.detection_rear[7];
 800aa7e:	687b      	ldr	r3, [r7, #4]
 800aa80:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800aa84:	685b      	ldr	r3, [r3, #4]
 800aa86:	2b07      	cmp	r3, #7
 800aa88:	d113      	bne.n	800aab2 <_ZN3jlb12SignalSender14measurements_2Ev+0x2a4>
 800aa8a:	687b      	ldr	r3, [r7, #4]
 800aa8c:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800aa90:	f893 305b 	ldrb.w	r3, [r3, #91]	; 0x5b
 800aa94:	ee07 3a90 	vmov	s15, r3
 800aa98:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800aa9c:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800aaa0:	ee77 7a87 	vadd.f32	s15, s15, s14
 800aaa4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800aaa8:	edc7 7a00 	vstr	s15, [r7]
 800aaac:	783b      	ldrb	r3, [r7, #0]
 800aaae:	b2db      	uxtb	r3, r3
 800aab0:	e00e      	b.n	800aad0 <_ZN3jlb12SignalSender14measurements_2Ev+0x2c2>
 800aab2:	687b      	ldr	r3, [r7, #4]
 800aab4:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800aab8:	f893 305b 	ldrb.w	r3, [r3, #91]	; 0x5b
 800aabc:	ee07 3a90 	vmov	s15, r3
 800aac0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aac4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800aac8:	edc7 7a00 	vstr	s15, [r7]
 800aacc:	783b      	ldrb	r3, [r7, #0]
 800aace:	b2db      	uxtb	r3, r3
 800aad0:	687a      	ldr	r2, [r7, #4]
 800aad2:	f882 3027 	strb.w	r3, [r2, #39]	; 0x27
            jlb_rx.measurements_2.line_sensor_9  = 8 == controller.selected_rear ? controller.detection_rear[8] + 2.0f : controller.detection_rear[8];
 800aad6:	687b      	ldr	r3, [r7, #4]
 800aad8:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800aadc:	685b      	ldr	r3, [r3, #4]
 800aade:	2b08      	cmp	r3, #8
 800aae0:	d113      	bne.n	800ab0a <_ZN3jlb12SignalSender14measurements_2Ev+0x2fc>
 800aae2:	687b      	ldr	r3, [r7, #4]
 800aae4:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800aae8:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800aaec:	ee07 3a90 	vmov	s15, r3
 800aaf0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800aaf4:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800aaf8:	ee77 7a87 	vadd.f32	s15, s15, s14
 800aafc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ab00:	edc7 7a00 	vstr	s15, [r7]
 800ab04:	783b      	ldrb	r3, [r7, #0]
 800ab06:	b2db      	uxtb	r3, r3
 800ab08:	e00e      	b.n	800ab28 <_ZN3jlb12SignalSender14measurements_2Ev+0x31a>
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800ab10:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800ab14:	ee07 3a90 	vmov	s15, r3
 800ab18:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ab1c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ab20:	edc7 7a00 	vstr	s15, [r7]
 800ab24:	783b      	ldrb	r3, [r7, #0]
 800ab26:	b2db      	uxtb	r3, r3
 800ab28:	687a      	ldr	r2, [r7, #4]
 800ab2a:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
            jlb_rx.measurements_2.line_sensor_10 = 9 == controller.selected_rear ? controller.detection_rear[9] + 2.0f : controller.detection_rear[9];
 800ab2e:	687b      	ldr	r3, [r7, #4]
 800ab30:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800ab34:	685b      	ldr	r3, [r3, #4]
 800ab36:	2b09      	cmp	r3, #9
 800ab38:	d113      	bne.n	800ab62 <_ZN3jlb12SignalSender14measurements_2Ev+0x354>
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800ab40:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800ab44:	ee07 3a90 	vmov	s15, r3
 800ab48:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ab4c:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800ab50:	ee77 7a87 	vadd.f32	s15, s15, s14
 800ab54:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ab58:	edc7 7a00 	vstr	s15, [r7]
 800ab5c:	783b      	ldrb	r3, [r7, #0]
 800ab5e:	b2db      	uxtb	r3, r3
 800ab60:	e00e      	b.n	800ab80 <_ZN3jlb12SignalSender14measurements_2Ev+0x372>
 800ab62:	687b      	ldr	r3, [r7, #4]
 800ab64:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800ab68:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800ab6c:	ee07 3a90 	vmov	s15, r3
 800ab70:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ab74:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ab78:	edc7 7a00 	vstr	s15, [r7]
 800ab7c:	783b      	ldrb	r3, [r7, #0]
 800ab7e:	b2db      	uxtb	r3, r3
 800ab80:	687a      	ldr	r2, [r7, #4]
 800ab82:	f882 3029 	strb.w	r3, [r2, #41]	; 0x29
            jlb_rx.measurements_2.line_sensor_11 = 10 == controller.selected_rear ? controller.detection_rear[10] + 2.0f : controller.detection_rear[10];
 800ab86:	687b      	ldr	r3, [r7, #4]
 800ab88:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800ab8c:	685b      	ldr	r3, [r3, #4]
 800ab8e:	2b0a      	cmp	r3, #10
 800ab90:	d113      	bne.n	800abba <_ZN3jlb12SignalSender14measurements_2Ev+0x3ac>
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800ab98:	f893 305e 	ldrb.w	r3, [r3, #94]	; 0x5e
 800ab9c:	ee07 3a90 	vmov	s15, r3
 800aba0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800aba4:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800aba8:	ee77 7a87 	vadd.f32	s15, s15, s14
 800abac:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800abb0:	edc7 7a00 	vstr	s15, [r7]
 800abb4:	783b      	ldrb	r3, [r7, #0]
 800abb6:	b2db      	uxtb	r3, r3
 800abb8:	e00e      	b.n	800abd8 <_ZN3jlb12SignalSender14measurements_2Ev+0x3ca>
 800abba:	687b      	ldr	r3, [r7, #4]
 800abbc:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800abc0:	f893 305e 	ldrb.w	r3, [r3, #94]	; 0x5e
 800abc4:	ee07 3a90 	vmov	s15, r3
 800abc8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800abcc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800abd0:	edc7 7a00 	vstr	s15, [r7]
 800abd4:	783b      	ldrb	r3, [r7, #0]
 800abd6:	b2db      	uxtb	r3, r3
 800abd8:	687a      	ldr	r2, [r7, #4]
 800abda:	f882 302a 	strb.w	r3, [r2, #42]	; 0x2a
            jlb_rx.measurements_2.line_sensor_12 = 11 == controller.selected_rear ? controller.detection_rear[11] + 2.0f : controller.detection_rear[11];
 800abde:	687b      	ldr	r3, [r7, #4]
 800abe0:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800abe4:	685b      	ldr	r3, [r3, #4]
 800abe6:	2b0b      	cmp	r3, #11
 800abe8:	d113      	bne.n	800ac12 <_ZN3jlb12SignalSender14measurements_2Ev+0x404>
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800abf0:	f893 305f 	ldrb.w	r3, [r3, #95]	; 0x5f
 800abf4:	ee07 3a90 	vmov	s15, r3
 800abf8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800abfc:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800ac00:	ee77 7a87 	vadd.f32	s15, s15, s14
 800ac04:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ac08:	edc7 7a00 	vstr	s15, [r7]
 800ac0c:	783b      	ldrb	r3, [r7, #0]
 800ac0e:	b2db      	uxtb	r3, r3
 800ac10:	e00e      	b.n	800ac30 <_ZN3jlb12SignalSender14measurements_2Ev+0x422>
 800ac12:	687b      	ldr	r3, [r7, #4]
 800ac14:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800ac18:	f893 305f 	ldrb.w	r3, [r3, #95]	; 0x5f
 800ac1c:	ee07 3a90 	vmov	s15, r3
 800ac20:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ac24:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ac28:	edc7 7a00 	vstr	s15, [r7]
 800ac2c:	783b      	ldrb	r3, [r7, #0]
 800ac2e:	b2db      	uxtb	r3, r3
 800ac30:	687a      	ldr	r2, [r7, #4]
 800ac32:	f882 302b 	strb.w	r3, [r2, #43]	; 0x2b
            jlb_rx.measurements_2.line_sensor_13 = 12 == controller.selected_rear ? controller.detection_rear[12] + 2.0f : controller.detection_rear[12];
 800ac36:	687b      	ldr	r3, [r7, #4]
 800ac38:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800ac3c:	685b      	ldr	r3, [r3, #4]
 800ac3e:	2b0c      	cmp	r3, #12
 800ac40:	d113      	bne.n	800ac6a <_ZN3jlb12SignalSender14measurements_2Ev+0x45c>
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800ac48:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 800ac4c:	ee07 3a90 	vmov	s15, r3
 800ac50:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ac54:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800ac58:	ee77 7a87 	vadd.f32	s15, s15, s14
 800ac5c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ac60:	edc7 7a00 	vstr	s15, [r7]
 800ac64:	783b      	ldrb	r3, [r7, #0]
 800ac66:	b2db      	uxtb	r3, r3
 800ac68:	e00e      	b.n	800ac88 <_ZN3jlb12SignalSender14measurements_2Ev+0x47a>
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800ac70:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 800ac74:	ee07 3a90 	vmov	s15, r3
 800ac78:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ac7c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ac80:	edc7 7a00 	vstr	s15, [r7]
 800ac84:	783b      	ldrb	r3, [r7, #0]
 800ac86:	b2db      	uxtb	r3, r3
 800ac88:	687a      	ldr	r2, [r7, #4]
 800ac8a:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
            jlb_rx.measurements_2.line_sensor_14 = 13 == controller.selected_rear ? controller.detection_rear[13] + 2.0f : controller.detection_rear[13];
 800ac8e:	687b      	ldr	r3, [r7, #4]
 800ac90:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800ac94:	685b      	ldr	r3, [r3, #4]
 800ac96:	2b0d      	cmp	r3, #13
 800ac98:	d113      	bne.n	800acc2 <_ZN3jlb12SignalSender14measurements_2Ev+0x4b4>
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800aca0:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 800aca4:	ee07 3a90 	vmov	s15, r3
 800aca8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800acac:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800acb0:	ee77 7a87 	vadd.f32	s15, s15, s14
 800acb4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800acb8:	edc7 7a00 	vstr	s15, [r7]
 800acbc:	783b      	ldrb	r3, [r7, #0]
 800acbe:	b2db      	uxtb	r3, r3
 800acc0:	e00e      	b.n	800ace0 <_ZN3jlb12SignalSender14measurements_2Ev+0x4d2>
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800acc8:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 800accc:	ee07 3a90 	vmov	s15, r3
 800acd0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800acd4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800acd8:	edc7 7a00 	vstr	s15, [r7]
 800acdc:	783b      	ldrb	r3, [r7, #0]
 800acde:	b2db      	uxtb	r3, r3
 800ace0:	687a      	ldr	r2, [r7, #4]
 800ace2:	f882 302d 	strb.w	r3, [r2, #45]	; 0x2d
            jlb_rx.measurements_2.line_sensor_15 = 14 == controller.selected_rear ? controller.detection_rear[14] + 2.0f : controller.detection_rear[14];
 800ace6:	687b      	ldr	r3, [r7, #4]
 800ace8:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800acec:	685b      	ldr	r3, [r3, #4]
 800acee:	2b0e      	cmp	r3, #14
 800acf0:	d113      	bne.n	800ad1a <_ZN3jlb12SignalSender14measurements_2Ev+0x50c>
 800acf2:	687b      	ldr	r3, [r7, #4]
 800acf4:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800acf8:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 800acfc:	ee07 3a90 	vmov	s15, r3
 800ad00:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ad04:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800ad08:	ee77 7a87 	vadd.f32	s15, s15, s14
 800ad0c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ad10:	edc7 7a00 	vstr	s15, [r7]
 800ad14:	783b      	ldrb	r3, [r7, #0]
 800ad16:	b2db      	uxtb	r3, r3
 800ad18:	e00e      	b.n	800ad38 <_ZN3jlb12SignalSender14measurements_2Ev+0x52a>
 800ad1a:	687b      	ldr	r3, [r7, #4]
 800ad1c:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800ad20:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 800ad24:	ee07 3a90 	vmov	s15, r3
 800ad28:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ad2c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ad30:	edc7 7a00 	vstr	s15, [r7]
 800ad34:	783b      	ldrb	r3, [r7, #0]
 800ad36:	b2db      	uxtb	r3, r3
 800ad38:	687a      	ldr	r2, [r7, #4]
 800ad3a:	f882 302e 	strb.w	r3, [r2, #46]	; 0x2e
            jlb_rx.measurements_2.line_sensor_16 = 15 == controller.selected_rear ? controller.detection_rear[15] + 2.0f : controller.detection_rear[15];
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800ad44:	685b      	ldr	r3, [r3, #4]
 800ad46:	2b0f      	cmp	r3, #15
 800ad48:	d113      	bne.n	800ad72 <_ZN3jlb12SignalSender14measurements_2Ev+0x564>
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800ad50:	f893 3063 	ldrb.w	r3, [r3, #99]	; 0x63
 800ad54:	ee07 3a90 	vmov	s15, r3
 800ad58:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ad5c:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800ad60:	ee77 7a87 	vadd.f32	s15, s15, s14
 800ad64:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ad68:	edc7 7a00 	vstr	s15, [r7]
 800ad6c:	783b      	ldrb	r3, [r7, #0]
 800ad6e:	b2db      	uxtb	r3, r3
 800ad70:	e00e      	b.n	800ad90 <_ZN3jlb12SignalSender14measurements_2Ev+0x582>
 800ad72:	687b      	ldr	r3, [r7, #4]
 800ad74:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800ad78:	f893 3063 	ldrb.w	r3, [r3, #99]	; 0x63
 800ad7c:	ee07 3a90 	vmov	s15, r3
 800ad80:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ad84:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ad88:	edc7 7a00 	vstr	s15, [r7]
 800ad8c:	783b      	ldrb	r3, [r7, #0]
 800ad8e:	b2db      	uxtb	r3, r3
 800ad90:	687a      	ldr	r2, [r7, #4]
 800ad92:	f882 302f 	strb.w	r3, [r2, #47]	; 0x2f
#ifndef SIMULATION
            jlb_rx.measurements_2.line_sensor_9  = 8 == controller.selected_rear ? controller.detection_rear[8] + 2.0f : controller.detection_rear[8];
 800ad96:	687b      	ldr	r3, [r7, #4]
 800ad98:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800ad9c:	685b      	ldr	r3, [r3, #4]
 800ad9e:	2b08      	cmp	r3, #8
 800ada0:	d113      	bne.n	800adca <_ZN3jlb12SignalSender14measurements_2Ev+0x5bc>
 800ada2:	687b      	ldr	r3, [r7, #4]
 800ada4:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800ada8:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800adac:	ee07 3a90 	vmov	s15, r3
 800adb0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800adb4:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800adb8:	ee77 7a87 	vadd.f32	s15, s15, s14
 800adbc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800adc0:	edc7 7a00 	vstr	s15, [r7]
 800adc4:	783b      	ldrb	r3, [r7, #0]
 800adc6:	b2db      	uxtb	r3, r3
 800adc8:	e00e      	b.n	800ade8 <_ZN3jlb12SignalSender14measurements_2Ev+0x5da>
 800adca:	687b      	ldr	r3, [r7, #4]
 800adcc:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800add0:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800add4:	ee07 3a90 	vmov	s15, r3
 800add8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800addc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ade0:	edc7 7a00 	vstr	s15, [r7]
 800ade4:	783b      	ldrb	r3, [r7, #0]
 800ade6:	b2db      	uxtb	r3, r3
 800ade8:	687a      	ldr	r2, [r7, #4]
 800adea:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
            jlb_rx.measurements_2.line_sensor_10 = 9 == controller.selected_rear ? controller.detection_rear[9] + 2.0f : controller.detection_rear[9];
 800adee:	687b      	ldr	r3, [r7, #4]
 800adf0:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800adf4:	685b      	ldr	r3, [r3, #4]
 800adf6:	2b09      	cmp	r3, #9
 800adf8:	d113      	bne.n	800ae22 <_ZN3jlb12SignalSender14measurements_2Ev+0x614>
 800adfa:	687b      	ldr	r3, [r7, #4]
 800adfc:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800ae00:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800ae04:	ee07 3a90 	vmov	s15, r3
 800ae08:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ae0c:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800ae10:	ee77 7a87 	vadd.f32	s15, s15, s14
 800ae14:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ae18:	edc7 7a00 	vstr	s15, [r7]
 800ae1c:	783b      	ldrb	r3, [r7, #0]
 800ae1e:	b2db      	uxtb	r3, r3
 800ae20:	e00e      	b.n	800ae40 <_ZN3jlb12SignalSender14measurements_2Ev+0x632>
 800ae22:	687b      	ldr	r3, [r7, #4]
 800ae24:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800ae28:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800ae2c:	ee07 3a90 	vmov	s15, r3
 800ae30:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ae34:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ae38:	edc7 7a00 	vstr	s15, [r7]
 800ae3c:	783b      	ldrb	r3, [r7, #0]
 800ae3e:	b2db      	uxtb	r3, r3
 800ae40:	687a      	ldr	r2, [r7, #4]
 800ae42:	f882 3029 	strb.w	r3, [r2, #41]	; 0x29
            jlb_rx.measurements_2.line_sensor_11 = 10 == controller.selected_rear ? controller.detection_rear[10] + 2.0f : controller.detection_rear[10];
 800ae46:	687b      	ldr	r3, [r7, #4]
 800ae48:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800ae4c:	685b      	ldr	r3, [r3, #4]
 800ae4e:	2b0a      	cmp	r3, #10
 800ae50:	d113      	bne.n	800ae7a <_ZN3jlb12SignalSender14measurements_2Ev+0x66c>
 800ae52:	687b      	ldr	r3, [r7, #4]
 800ae54:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800ae58:	f893 305e 	ldrb.w	r3, [r3, #94]	; 0x5e
 800ae5c:	ee07 3a90 	vmov	s15, r3
 800ae60:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ae64:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800ae68:	ee77 7a87 	vadd.f32	s15, s15, s14
 800ae6c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ae70:	edc7 7a00 	vstr	s15, [r7]
 800ae74:	783b      	ldrb	r3, [r7, #0]
 800ae76:	b2db      	uxtb	r3, r3
 800ae78:	e00e      	b.n	800ae98 <_ZN3jlb12SignalSender14measurements_2Ev+0x68a>
 800ae7a:	687b      	ldr	r3, [r7, #4]
 800ae7c:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800ae80:	f893 305e 	ldrb.w	r3, [r3, #94]	; 0x5e
 800ae84:	ee07 3a90 	vmov	s15, r3
 800ae88:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ae8c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ae90:	edc7 7a00 	vstr	s15, [r7]
 800ae94:	783b      	ldrb	r3, [r7, #0]
 800ae96:	b2db      	uxtb	r3, r3
 800ae98:	687a      	ldr	r2, [r7, #4]
 800ae9a:	f882 302a 	strb.w	r3, [r2, #42]	; 0x2a
            jlb_rx.measurements_2.line_sensor_12 = 11 == controller.selected_rear ? controller.detection_rear[11] + 2.0f : controller.detection_rear[11];
 800ae9e:	687b      	ldr	r3, [r7, #4]
 800aea0:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800aea4:	685b      	ldr	r3, [r3, #4]
 800aea6:	2b0b      	cmp	r3, #11
 800aea8:	d113      	bne.n	800aed2 <_ZN3jlb12SignalSender14measurements_2Ev+0x6c4>
 800aeaa:	687b      	ldr	r3, [r7, #4]
 800aeac:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800aeb0:	f893 305f 	ldrb.w	r3, [r3, #95]	; 0x5f
 800aeb4:	ee07 3a90 	vmov	s15, r3
 800aeb8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800aebc:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800aec0:	ee77 7a87 	vadd.f32	s15, s15, s14
 800aec4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800aec8:	edc7 7a00 	vstr	s15, [r7]
 800aecc:	783b      	ldrb	r3, [r7, #0]
 800aece:	b2db      	uxtb	r3, r3
 800aed0:	e00e      	b.n	800aef0 <_ZN3jlb12SignalSender14measurements_2Ev+0x6e2>
 800aed2:	687b      	ldr	r3, [r7, #4]
 800aed4:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800aed8:	f893 305f 	ldrb.w	r3, [r3, #95]	; 0x5f
 800aedc:	ee07 3a90 	vmov	s15, r3
 800aee0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aee4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800aee8:	edc7 7a00 	vstr	s15, [r7]
 800aeec:	783b      	ldrb	r3, [r7, #0]
 800aeee:	b2db      	uxtb	r3, r3
 800aef0:	687a      	ldr	r2, [r7, #4]
 800aef2:	f882 302b 	strb.w	r3, [r2, #43]	; 0x2b
            jlb_rx.measurements_2.line_sensor_13 = 12 == controller.selected_rear ? controller.detection_rear[12] + 2.0f : controller.detection_rear[12];
 800aef6:	687b      	ldr	r3, [r7, #4]
 800aef8:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800aefc:	685b      	ldr	r3, [r3, #4]
 800aefe:	2b0c      	cmp	r3, #12
 800af00:	d113      	bne.n	800af2a <_ZN3jlb12SignalSender14measurements_2Ev+0x71c>
 800af02:	687b      	ldr	r3, [r7, #4]
 800af04:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800af08:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 800af0c:	ee07 3a90 	vmov	s15, r3
 800af10:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800af14:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800af18:	ee77 7a87 	vadd.f32	s15, s15, s14
 800af1c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800af20:	edc7 7a00 	vstr	s15, [r7]
 800af24:	783b      	ldrb	r3, [r7, #0]
 800af26:	b2db      	uxtb	r3, r3
 800af28:	e00e      	b.n	800af48 <_ZN3jlb12SignalSender14measurements_2Ev+0x73a>
 800af2a:	687b      	ldr	r3, [r7, #4]
 800af2c:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800af30:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 800af34:	ee07 3a90 	vmov	s15, r3
 800af38:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800af3c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800af40:	edc7 7a00 	vstr	s15, [r7]
 800af44:	783b      	ldrb	r3, [r7, #0]
 800af46:	b2db      	uxtb	r3, r3
 800af48:	687a      	ldr	r2, [r7, #4]
 800af4a:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
            jlb_rx.measurements_2.line_sensor_14 = 13 == controller.selected_rear ? controller.detection_rear[13] + 2.0f : controller.detection_rear[13];
 800af4e:	687b      	ldr	r3, [r7, #4]
 800af50:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800af54:	685b      	ldr	r3, [r3, #4]
 800af56:	2b0d      	cmp	r3, #13
 800af58:	d113      	bne.n	800af82 <_ZN3jlb12SignalSender14measurements_2Ev+0x774>
 800af5a:	687b      	ldr	r3, [r7, #4]
 800af5c:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800af60:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 800af64:	ee07 3a90 	vmov	s15, r3
 800af68:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800af6c:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800af70:	ee77 7a87 	vadd.f32	s15, s15, s14
 800af74:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800af78:	edc7 7a00 	vstr	s15, [r7]
 800af7c:	783b      	ldrb	r3, [r7, #0]
 800af7e:	b2db      	uxtb	r3, r3
 800af80:	e00e      	b.n	800afa0 <_ZN3jlb12SignalSender14measurements_2Ev+0x792>
 800af82:	687b      	ldr	r3, [r7, #4]
 800af84:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800af88:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 800af8c:	ee07 3a90 	vmov	s15, r3
 800af90:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800af94:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800af98:	edc7 7a00 	vstr	s15, [r7]
 800af9c:	783b      	ldrb	r3, [r7, #0]
 800af9e:	b2db      	uxtb	r3, r3
 800afa0:	687a      	ldr	r2, [r7, #4]
 800afa2:	f882 302d 	strb.w	r3, [r2, #45]	; 0x2d
            jlb_rx.measurements_2.line_sensor_15 = 14 == controller.selected_rear ? controller.detection_rear[14] + 2.0f : controller.detection_rear[14];
 800afa6:	687b      	ldr	r3, [r7, #4]
 800afa8:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800afac:	685b      	ldr	r3, [r3, #4]
 800afae:	2b0e      	cmp	r3, #14
 800afb0:	d113      	bne.n	800afda <_ZN3jlb12SignalSender14measurements_2Ev+0x7cc>
 800afb2:	687b      	ldr	r3, [r7, #4]
 800afb4:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800afb8:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 800afbc:	ee07 3a90 	vmov	s15, r3
 800afc0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800afc4:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800afc8:	ee77 7a87 	vadd.f32	s15, s15, s14
 800afcc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800afd0:	edc7 7a00 	vstr	s15, [r7]
 800afd4:	783b      	ldrb	r3, [r7, #0]
 800afd6:	b2db      	uxtb	r3, r3
 800afd8:	e00e      	b.n	800aff8 <_ZN3jlb12SignalSender14measurements_2Ev+0x7ea>
 800afda:	687b      	ldr	r3, [r7, #4]
 800afdc:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800afe0:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 800afe4:	ee07 3a90 	vmov	s15, r3
 800afe8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800afec:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800aff0:	edc7 7a00 	vstr	s15, [r7]
 800aff4:	783b      	ldrb	r3, [r7, #0]
 800aff6:	b2db      	uxtb	r3, r3
 800aff8:	687a      	ldr	r2, [r7, #4]
 800affa:	f882 302e 	strb.w	r3, [r2, #46]	; 0x2e
            jlb_rx.measurements_2.line_sensor_16 = 15 == controller.selected_rear ? controller.detection_rear[15] + 2.0f : controller.detection_rear[15];
 800affe:	687b      	ldr	r3, [r7, #4]
 800b000:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800b004:	685b      	ldr	r3, [r3, #4]
 800b006:	2b0f      	cmp	r3, #15
 800b008:	d113      	bne.n	800b032 <_ZN3jlb12SignalSender14measurements_2Ev+0x824>
 800b00a:	687b      	ldr	r3, [r7, #4]
 800b00c:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800b010:	f893 3063 	ldrb.w	r3, [r3, #99]	; 0x63
 800b014:	ee07 3a90 	vmov	s15, r3
 800b018:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b01c:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800b020:	ee77 7a87 	vadd.f32	s15, s15, s14
 800b024:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b028:	edc7 7a00 	vstr	s15, [r7]
 800b02c:	783b      	ldrb	r3, [r7, #0]
 800b02e:	b2db      	uxtb	r3, r3
 800b030:	e00e      	b.n	800b050 <_ZN3jlb12SignalSender14measurements_2Ev+0x842>
 800b032:	687b      	ldr	r3, [r7, #4]
 800b034:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800b038:	f893 3063 	ldrb.w	r3, [r3, #99]	; 0x63
 800b03c:	ee07 3a90 	vmov	s15, r3
 800b040:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b044:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b048:	edc7 7a00 	vstr	s15, [r7]
 800b04c:	783b      	ldrb	r3, [r7, #0]
 800b04e:	b2db      	uxtb	r3, r3
 800b050:	687a      	ldr	r2, [r7, #4]
 800b052:	f882 302f 	strb.w	r3, [r2, #47]	; 0x2f
            jlb_rx.measurements_2.line_sensor_17 = 16 == controller.selected_rear ? controller.detection_rear[16] + 2.0f : controller.detection_rear[16];
 800b056:	687b      	ldr	r3, [r7, #4]
 800b058:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800b05c:	685b      	ldr	r3, [r3, #4]
 800b05e:	2b10      	cmp	r3, #16
 800b060:	d113      	bne.n	800b08a <_ZN3jlb12SignalSender14measurements_2Ev+0x87c>
 800b062:	687b      	ldr	r3, [r7, #4]
 800b064:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800b068:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 800b06c:	ee07 3a90 	vmov	s15, r3
 800b070:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b074:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800b078:	ee77 7a87 	vadd.f32	s15, s15, s14
 800b07c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b080:	edc7 7a00 	vstr	s15, [r7]
 800b084:	783b      	ldrb	r3, [r7, #0]
 800b086:	b2db      	uxtb	r3, r3
 800b088:	e00e      	b.n	800b0a8 <_ZN3jlb12SignalSender14measurements_2Ev+0x89a>
 800b08a:	687b      	ldr	r3, [r7, #4]
 800b08c:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800b090:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 800b094:	ee07 3a90 	vmov	s15, r3
 800b098:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b09c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b0a0:	edc7 7a00 	vstr	s15, [r7]
 800b0a4:	783b      	ldrb	r3, [r7, #0]
 800b0a6:	b2db      	uxtb	r3, r3
 800b0a8:	687a      	ldr	r2, [r7, #4]
 800b0aa:	f882 3030 	strb.w	r3, [r2, #48]	; 0x30
            jlb_rx.measurements_2.line_sensor_18 = 17 == controller.selected_rear ? controller.detection_rear[17] + 2.0f : controller.detection_rear[17];
 800b0ae:	687b      	ldr	r3, [r7, #4]
 800b0b0:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800b0b4:	685b      	ldr	r3, [r3, #4]
 800b0b6:	2b11      	cmp	r3, #17
 800b0b8:	d113      	bne.n	800b0e2 <_ZN3jlb12SignalSender14measurements_2Ev+0x8d4>
 800b0ba:	687b      	ldr	r3, [r7, #4]
 800b0bc:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800b0c0:	f893 3065 	ldrb.w	r3, [r3, #101]	; 0x65
 800b0c4:	ee07 3a90 	vmov	s15, r3
 800b0c8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b0cc:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800b0d0:	ee77 7a87 	vadd.f32	s15, s15, s14
 800b0d4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b0d8:	edc7 7a00 	vstr	s15, [r7]
 800b0dc:	783b      	ldrb	r3, [r7, #0]
 800b0de:	b2db      	uxtb	r3, r3
 800b0e0:	e00e      	b.n	800b100 <_ZN3jlb12SignalSender14measurements_2Ev+0x8f2>
 800b0e2:	687b      	ldr	r3, [r7, #4]
 800b0e4:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800b0e8:	f893 3065 	ldrb.w	r3, [r3, #101]	; 0x65
 800b0ec:	ee07 3a90 	vmov	s15, r3
 800b0f0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b0f4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b0f8:	edc7 7a00 	vstr	s15, [r7]
 800b0fc:	783b      	ldrb	r3, [r7, #0]
 800b0fe:	b2db      	uxtb	r3, r3
 800b100:	687a      	ldr	r2, [r7, #4]
 800b102:	f882 3031 	strb.w	r3, [r2, #49]	; 0x31
            jlb_rx.measurements_2.line_sensor_19 = 18 == controller.selected_rear ? controller.detection_rear[18] + 2.0f : controller.detection_rear[18];
 800b106:	687b      	ldr	r3, [r7, #4]
 800b108:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800b10c:	685b      	ldr	r3, [r3, #4]
 800b10e:	2b12      	cmp	r3, #18
 800b110:	d113      	bne.n	800b13a <_ZN3jlb12SignalSender14measurements_2Ev+0x92c>
 800b112:	687b      	ldr	r3, [r7, #4]
 800b114:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800b118:	f893 3066 	ldrb.w	r3, [r3, #102]	; 0x66
 800b11c:	ee07 3a90 	vmov	s15, r3
 800b120:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b124:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800b128:	ee77 7a87 	vadd.f32	s15, s15, s14
 800b12c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b130:	edc7 7a00 	vstr	s15, [r7]
 800b134:	783b      	ldrb	r3, [r7, #0]
 800b136:	b2db      	uxtb	r3, r3
 800b138:	e00e      	b.n	800b158 <_ZN3jlb12SignalSender14measurements_2Ev+0x94a>
 800b13a:	687b      	ldr	r3, [r7, #4]
 800b13c:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800b140:	f893 3066 	ldrb.w	r3, [r3, #102]	; 0x66
 800b144:	ee07 3a90 	vmov	s15, r3
 800b148:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b14c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b150:	edc7 7a00 	vstr	s15, [r7]
 800b154:	783b      	ldrb	r3, [r7, #0]
 800b156:	b2db      	uxtb	r3, r3
 800b158:	687a      	ldr	r2, [r7, #4]
 800b15a:	f882 3032 	strb.w	r3, [r2, #50]	; 0x32
            jlb_rx.measurements_2.line_sensor_20 = 19 == controller.selected_rear ? controller.detection_rear[19] + 2.0f : controller.detection_rear[19];
 800b15e:	687b      	ldr	r3, [r7, #4]
 800b160:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800b164:	685b      	ldr	r3, [r3, #4]
 800b166:	2b13      	cmp	r3, #19
 800b168:	d113      	bne.n	800b192 <_ZN3jlb12SignalSender14measurements_2Ev+0x984>
 800b16a:	687b      	ldr	r3, [r7, #4]
 800b16c:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800b170:	f893 3067 	ldrb.w	r3, [r3, #103]	; 0x67
 800b174:	ee07 3a90 	vmov	s15, r3
 800b178:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b17c:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800b180:	ee77 7a87 	vadd.f32	s15, s15, s14
 800b184:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b188:	edc7 7a00 	vstr	s15, [r7]
 800b18c:	783b      	ldrb	r3, [r7, #0]
 800b18e:	b2db      	uxtb	r3, r3
 800b190:	e00e      	b.n	800b1b0 <_ZN3jlb12SignalSender14measurements_2Ev+0x9a2>
 800b192:	687b      	ldr	r3, [r7, #4]
 800b194:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800b198:	f893 3067 	ldrb.w	r3, [r3, #103]	; 0x67
 800b19c:	ee07 3a90 	vmov	s15, r3
 800b1a0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b1a4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b1a8:	edc7 7a00 	vstr	s15, [r7]
 800b1ac:	783b      	ldrb	r3, [r7, #0]
 800b1ae:	b2db      	uxtb	r3, r3
 800b1b0:	687a      	ldr	r2, [r7, #4]
 800b1b2:	f882 3033 	strb.w	r3, [r2, #51]	; 0x33
            jlb_rx.measurements_2.line_sensor_21 = 20 == controller.selected_rear ? controller.detection_rear[20] + 2.0f : controller.detection_rear[20];
 800b1b6:	687b      	ldr	r3, [r7, #4]
 800b1b8:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800b1bc:	685b      	ldr	r3, [r3, #4]
 800b1be:	2b14      	cmp	r3, #20
 800b1c0:	d113      	bne.n	800b1ea <_ZN3jlb12SignalSender14measurements_2Ev+0x9dc>
 800b1c2:	687b      	ldr	r3, [r7, #4]
 800b1c4:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800b1c8:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 800b1cc:	ee07 3a90 	vmov	s15, r3
 800b1d0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b1d4:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800b1d8:	ee77 7a87 	vadd.f32	s15, s15, s14
 800b1dc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b1e0:	edc7 7a00 	vstr	s15, [r7]
 800b1e4:	783b      	ldrb	r3, [r7, #0]
 800b1e6:	b2db      	uxtb	r3, r3
 800b1e8:	e00e      	b.n	800b208 <_ZN3jlb12SignalSender14measurements_2Ev+0x9fa>
 800b1ea:	687b      	ldr	r3, [r7, #4]
 800b1ec:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800b1f0:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 800b1f4:	ee07 3a90 	vmov	s15, r3
 800b1f8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b1fc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b200:	edc7 7a00 	vstr	s15, [r7]
 800b204:	783b      	ldrb	r3, [r7, #0]
 800b206:	b2db      	uxtb	r3, r3
 800b208:	687a      	ldr	r2, [r7, #4]
 800b20a:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
            jlb_rx.measurements_2.line_sensor_22 = 21 == controller.selected_rear ? controller.detection_rear[21] + 2.0f : controller.detection_rear[21];
 800b20e:	687b      	ldr	r3, [r7, #4]
 800b210:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800b214:	685b      	ldr	r3, [r3, #4]
 800b216:	2b15      	cmp	r3, #21
 800b218:	d113      	bne.n	800b242 <_ZN3jlb12SignalSender14measurements_2Ev+0xa34>
 800b21a:	687b      	ldr	r3, [r7, #4]
 800b21c:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800b220:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 800b224:	ee07 3a90 	vmov	s15, r3
 800b228:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b22c:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800b230:	ee77 7a87 	vadd.f32	s15, s15, s14
 800b234:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b238:	edc7 7a00 	vstr	s15, [r7]
 800b23c:	783b      	ldrb	r3, [r7, #0]
 800b23e:	b2db      	uxtb	r3, r3
 800b240:	e00e      	b.n	800b260 <_ZN3jlb12SignalSender14measurements_2Ev+0xa52>
 800b242:	687b      	ldr	r3, [r7, #4]
 800b244:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800b248:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 800b24c:	ee07 3a90 	vmov	s15, r3
 800b250:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b254:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b258:	edc7 7a00 	vstr	s15, [r7]
 800b25c:	783b      	ldrb	r3, [r7, #0]
 800b25e:	b2db      	uxtb	r3, r3
 800b260:	687a      	ldr	r2, [r7, #4]
 800b262:	f882 3035 	strb.w	r3, [r2, #53]	; 0x35
            jlb_rx.measurements_2.line_sensor_23 = 22 == controller.selected_rear ? controller.detection_rear[22] + 2.0f : controller.detection_rear[22];
 800b266:	687b      	ldr	r3, [r7, #4]
 800b268:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800b26c:	685b      	ldr	r3, [r3, #4]
 800b26e:	2b16      	cmp	r3, #22
 800b270:	d113      	bne.n	800b29a <_ZN3jlb12SignalSender14measurements_2Ev+0xa8c>
 800b272:	687b      	ldr	r3, [r7, #4]
 800b274:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800b278:	f893 306a 	ldrb.w	r3, [r3, #106]	; 0x6a
 800b27c:	ee07 3a90 	vmov	s15, r3
 800b280:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b284:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800b288:	ee77 7a87 	vadd.f32	s15, s15, s14
 800b28c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b290:	edc7 7a00 	vstr	s15, [r7]
 800b294:	783b      	ldrb	r3, [r7, #0]
 800b296:	b2db      	uxtb	r3, r3
 800b298:	e00e      	b.n	800b2b8 <_ZN3jlb12SignalSender14measurements_2Ev+0xaaa>
 800b29a:	687b      	ldr	r3, [r7, #4]
 800b29c:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800b2a0:	f893 306a 	ldrb.w	r3, [r3, #106]	; 0x6a
 800b2a4:	ee07 3a90 	vmov	s15, r3
 800b2a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b2ac:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b2b0:	edc7 7a00 	vstr	s15, [r7]
 800b2b4:	783b      	ldrb	r3, [r7, #0]
 800b2b6:	b2db      	uxtb	r3, r3
 800b2b8:	687a      	ldr	r2, [r7, #4]
 800b2ba:	f882 3036 	strb.w	r3, [r2, #54]	; 0x36
            jlb_rx.measurements_2.line_sensor_24 = 23 == controller.selected_rear ? controller.detection_rear[23] + 2.0f : controller.detection_rear[23];
 800b2be:	687b      	ldr	r3, [r7, #4]
 800b2c0:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800b2c4:	685b      	ldr	r3, [r3, #4]
 800b2c6:	2b17      	cmp	r3, #23
 800b2c8:	d113      	bne.n	800b2f2 <_ZN3jlb12SignalSender14measurements_2Ev+0xae4>
 800b2ca:	687b      	ldr	r3, [r7, #4]
 800b2cc:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800b2d0:	f893 306b 	ldrb.w	r3, [r3, #107]	; 0x6b
 800b2d4:	ee07 3a90 	vmov	s15, r3
 800b2d8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b2dc:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800b2e0:	ee77 7a87 	vadd.f32	s15, s15, s14
 800b2e4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b2e8:	edc7 7a00 	vstr	s15, [r7]
 800b2ec:	783b      	ldrb	r3, [r7, #0]
 800b2ee:	b2db      	uxtb	r3, r3
 800b2f0:	e00e      	b.n	800b310 <_ZN3jlb12SignalSender14measurements_2Ev+0xb02>
 800b2f2:	687b      	ldr	r3, [r7, #4]
 800b2f4:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800b2f8:	f893 306b 	ldrb.w	r3, [r3, #107]	; 0x6b
 800b2fc:	ee07 3a90 	vmov	s15, r3
 800b300:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b304:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b308:	edc7 7a00 	vstr	s15, [r7]
 800b30c:	783b      	ldrb	r3, [r7, #0]
 800b30e:	b2db      	uxtb	r3, r3
 800b310:	687a      	ldr	r2, [r7, #4]
 800b312:	f882 3037 	strb.w	r3, [r2, #55]	; 0x37
            jlb_rx.measurements_2.line_sensor_25 = 24 == controller.selected_rear ? controller.detection_rear[24] + 2.0f : controller.detection_rear[24];
 800b316:	687b      	ldr	r3, [r7, #4]
 800b318:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800b31c:	685b      	ldr	r3, [r3, #4]
 800b31e:	2b18      	cmp	r3, #24
 800b320:	d113      	bne.n	800b34a <_ZN3jlb12SignalSender14measurements_2Ev+0xb3c>
 800b322:	687b      	ldr	r3, [r7, #4]
 800b324:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800b328:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 800b32c:	ee07 3a90 	vmov	s15, r3
 800b330:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b334:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800b338:	ee77 7a87 	vadd.f32	s15, s15, s14
 800b33c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b340:	edc7 7a00 	vstr	s15, [r7]
 800b344:	783b      	ldrb	r3, [r7, #0]
 800b346:	b2db      	uxtb	r3, r3
 800b348:	e00e      	b.n	800b368 <_ZN3jlb12SignalSender14measurements_2Ev+0xb5a>
 800b34a:	687b      	ldr	r3, [r7, #4]
 800b34c:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800b350:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 800b354:	ee07 3a90 	vmov	s15, r3
 800b358:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b35c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b360:	edc7 7a00 	vstr	s15, [r7]
 800b364:	783b      	ldrb	r3, [r7, #0]
 800b366:	b2db      	uxtb	r3, r3
 800b368:	687a      	ldr	r2, [r7, #4]
 800b36a:	f882 3038 	strb.w	r3, [r2, #56]	; 0x38
            jlb_rx.measurements_2.line_sensor_26 = 25 == controller.selected_rear ? controller.detection_rear[25] + 2.0f : controller.detection_rear[25];
 800b36e:	687b      	ldr	r3, [r7, #4]
 800b370:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800b374:	685b      	ldr	r3, [r3, #4]
 800b376:	2b19      	cmp	r3, #25
 800b378:	d113      	bne.n	800b3a2 <_ZN3jlb12SignalSender14measurements_2Ev+0xb94>
 800b37a:	687b      	ldr	r3, [r7, #4]
 800b37c:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800b380:	f893 306d 	ldrb.w	r3, [r3, #109]	; 0x6d
 800b384:	ee07 3a90 	vmov	s15, r3
 800b388:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b38c:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800b390:	ee77 7a87 	vadd.f32	s15, s15, s14
 800b394:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b398:	edc7 7a00 	vstr	s15, [r7]
 800b39c:	783b      	ldrb	r3, [r7, #0]
 800b39e:	b2db      	uxtb	r3, r3
 800b3a0:	e00e      	b.n	800b3c0 <_ZN3jlb12SignalSender14measurements_2Ev+0xbb2>
 800b3a2:	687b      	ldr	r3, [r7, #4]
 800b3a4:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800b3a8:	f893 306d 	ldrb.w	r3, [r3, #109]	; 0x6d
 800b3ac:	ee07 3a90 	vmov	s15, r3
 800b3b0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b3b4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b3b8:	edc7 7a00 	vstr	s15, [r7]
 800b3bc:	783b      	ldrb	r3, [r7, #0]
 800b3be:	b2db      	uxtb	r3, r3
 800b3c0:	687a      	ldr	r2, [r7, #4]
 800b3c2:	f882 3039 	strb.w	r3, [r2, #57]	; 0x39
            jlb_rx.measurements_2.line_sensor_27 = 26 == controller.selected_rear ? controller.detection_rear[26] + 2.0f : controller.detection_rear[26];
 800b3c6:	687b      	ldr	r3, [r7, #4]
 800b3c8:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800b3cc:	685b      	ldr	r3, [r3, #4]
 800b3ce:	2b1a      	cmp	r3, #26
 800b3d0:	d113      	bne.n	800b3fa <_ZN3jlb12SignalSender14measurements_2Ev+0xbec>
 800b3d2:	687b      	ldr	r3, [r7, #4]
 800b3d4:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800b3d8:	f893 306e 	ldrb.w	r3, [r3, #110]	; 0x6e
 800b3dc:	ee07 3a90 	vmov	s15, r3
 800b3e0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b3e4:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800b3e8:	ee77 7a87 	vadd.f32	s15, s15, s14
 800b3ec:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b3f0:	edc7 7a00 	vstr	s15, [r7]
 800b3f4:	783b      	ldrb	r3, [r7, #0]
 800b3f6:	b2db      	uxtb	r3, r3
 800b3f8:	e00e      	b.n	800b418 <_ZN3jlb12SignalSender14measurements_2Ev+0xc0a>
 800b3fa:	687b      	ldr	r3, [r7, #4]
 800b3fc:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800b400:	f893 306e 	ldrb.w	r3, [r3, #110]	; 0x6e
 800b404:	ee07 3a90 	vmov	s15, r3
 800b408:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b40c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b410:	edc7 7a00 	vstr	s15, [r7]
 800b414:	783b      	ldrb	r3, [r7, #0]
 800b416:	b2db      	uxtb	r3, r3
 800b418:	687a      	ldr	r2, [r7, #4]
 800b41a:	f882 303a 	strb.w	r3, [r2, #58]	; 0x3a
            jlb_rx.measurements_2.line_sensor_28 = 27 == controller.selected_rear ? controller.detection_rear[27] + 2.0f : controller.detection_rear[27];
 800b41e:	687b      	ldr	r3, [r7, #4]
 800b420:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800b424:	685b      	ldr	r3, [r3, #4]
 800b426:	2b1b      	cmp	r3, #27
 800b428:	d113      	bne.n	800b452 <_ZN3jlb12SignalSender14measurements_2Ev+0xc44>
 800b42a:	687b      	ldr	r3, [r7, #4]
 800b42c:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800b430:	f893 306f 	ldrb.w	r3, [r3, #111]	; 0x6f
 800b434:	ee07 3a90 	vmov	s15, r3
 800b438:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b43c:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800b440:	ee77 7a87 	vadd.f32	s15, s15, s14
 800b444:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b448:	edc7 7a00 	vstr	s15, [r7]
 800b44c:	783b      	ldrb	r3, [r7, #0]
 800b44e:	b2db      	uxtb	r3, r3
 800b450:	e00e      	b.n	800b470 <_ZN3jlb12SignalSender14measurements_2Ev+0xc62>
 800b452:	687b      	ldr	r3, [r7, #4]
 800b454:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800b458:	f893 306f 	ldrb.w	r3, [r3, #111]	; 0x6f
 800b45c:	ee07 3a90 	vmov	s15, r3
 800b460:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b464:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b468:	edc7 7a00 	vstr	s15, [r7]
 800b46c:	783b      	ldrb	r3, [r7, #0]
 800b46e:	b2db      	uxtb	r3, r3
 800b470:	687a      	ldr	r2, [r7, #4]
 800b472:	f882 303b 	strb.w	r3, [r2, #59]	; 0x3b
            jlb_rx.measurements_2.line_sensor_29 = 28 == controller.selected_rear ? controller.detection_rear[28] + 2.0f : controller.detection_rear[28];
 800b476:	687b      	ldr	r3, [r7, #4]
 800b478:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800b47c:	685b      	ldr	r3, [r3, #4]
 800b47e:	2b1c      	cmp	r3, #28
 800b480:	d113      	bne.n	800b4aa <_ZN3jlb12SignalSender14measurements_2Ev+0xc9c>
 800b482:	687b      	ldr	r3, [r7, #4]
 800b484:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800b488:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800b48c:	ee07 3a90 	vmov	s15, r3
 800b490:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b494:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800b498:	ee77 7a87 	vadd.f32	s15, s15, s14
 800b49c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b4a0:	edc7 7a00 	vstr	s15, [r7]
 800b4a4:	783b      	ldrb	r3, [r7, #0]
 800b4a6:	b2db      	uxtb	r3, r3
 800b4a8:	e00e      	b.n	800b4c8 <_ZN3jlb12SignalSender14measurements_2Ev+0xcba>
 800b4aa:	687b      	ldr	r3, [r7, #4]
 800b4ac:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800b4b0:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800b4b4:	ee07 3a90 	vmov	s15, r3
 800b4b8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b4bc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b4c0:	edc7 7a00 	vstr	s15, [r7]
 800b4c4:	783b      	ldrb	r3, [r7, #0]
 800b4c6:	b2db      	uxtb	r3, r3
 800b4c8:	687a      	ldr	r2, [r7, #4]
 800b4ca:	f882 303c 	strb.w	r3, [r2, #60]	; 0x3c
            jlb_rx.measurements_2.line_sensor_30 = 29 == controller.selected_rear ? controller.detection_rear[29] + 2.0f : controller.detection_rear[29];
 800b4ce:	687b      	ldr	r3, [r7, #4]
 800b4d0:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800b4d4:	685b      	ldr	r3, [r3, #4]
 800b4d6:	2b1d      	cmp	r3, #29
 800b4d8:	d113      	bne.n	800b502 <_ZN3jlb12SignalSender14measurements_2Ev+0xcf4>
 800b4da:	687b      	ldr	r3, [r7, #4]
 800b4dc:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800b4e0:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 800b4e4:	ee07 3a90 	vmov	s15, r3
 800b4e8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b4ec:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800b4f0:	ee77 7a87 	vadd.f32	s15, s15, s14
 800b4f4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b4f8:	edc7 7a00 	vstr	s15, [r7]
 800b4fc:	783b      	ldrb	r3, [r7, #0]
 800b4fe:	b2db      	uxtb	r3, r3
 800b500:	e00e      	b.n	800b520 <_ZN3jlb12SignalSender14measurements_2Ev+0xd12>
 800b502:	687b      	ldr	r3, [r7, #4]
 800b504:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800b508:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 800b50c:	ee07 3a90 	vmov	s15, r3
 800b510:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b514:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b518:	edc7 7a00 	vstr	s15, [r7]
 800b51c:	783b      	ldrb	r3, [r7, #0]
 800b51e:	b2db      	uxtb	r3, r3
 800b520:	687a      	ldr	r2, [r7, #4]
 800b522:	f882 303d 	strb.w	r3, [r2, #61]	; 0x3d
            jlb_rx.measurements_2.line_sensor_31 = 30 == controller.selected_rear ? controller.detection_rear[30] + 2.0f : controller.detection_rear[30];
 800b526:	687b      	ldr	r3, [r7, #4]
 800b528:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800b52c:	685b      	ldr	r3, [r3, #4]
 800b52e:	2b1e      	cmp	r3, #30
 800b530:	d113      	bne.n	800b55a <_ZN3jlb12SignalSender14measurements_2Ev+0xd4c>
 800b532:	687b      	ldr	r3, [r7, #4]
 800b534:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800b538:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
 800b53c:	ee07 3a90 	vmov	s15, r3
 800b540:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b544:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800b548:	ee77 7a87 	vadd.f32	s15, s15, s14
 800b54c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b550:	edc7 7a00 	vstr	s15, [r7]
 800b554:	783b      	ldrb	r3, [r7, #0]
 800b556:	b2db      	uxtb	r3, r3
 800b558:	e00e      	b.n	800b578 <_ZN3jlb12SignalSender14measurements_2Ev+0xd6a>
 800b55a:	687b      	ldr	r3, [r7, #4]
 800b55c:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800b560:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
 800b564:	ee07 3a90 	vmov	s15, r3
 800b568:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b56c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b570:	edc7 7a00 	vstr	s15, [r7]
 800b574:	783b      	ldrb	r3, [r7, #0]
 800b576:	b2db      	uxtb	r3, r3
 800b578:	687a      	ldr	r2, [r7, #4]
 800b57a:	f882 303e 	strb.w	r3, [r2, #62]	; 0x3e
            jlb_rx.measurements_2.line_sensor_32 = 31 == controller.selected_rear ? controller.detection_rear[31] + 2.0f : controller.detection_rear[31];
 800b57e:	687b      	ldr	r3, [r7, #4]
 800b580:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800b584:	685b      	ldr	r3, [r3, #4]
 800b586:	2b1f      	cmp	r3, #31
 800b588:	d113      	bne.n	800b5b2 <_ZN3jlb12SignalSender14measurements_2Ev+0xda4>
 800b58a:	687b      	ldr	r3, [r7, #4]
 800b58c:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800b590:	f893 3073 	ldrb.w	r3, [r3, #115]	; 0x73
 800b594:	ee07 3a90 	vmov	s15, r3
 800b598:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b59c:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800b5a0:	ee77 7a87 	vadd.f32	s15, s15, s14
 800b5a4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b5a8:	edc7 7a00 	vstr	s15, [r7]
 800b5ac:	783b      	ldrb	r3, [r7, #0]
 800b5ae:	b2db      	uxtb	r3, r3
 800b5b0:	e00e      	b.n	800b5d0 <_ZN3jlb12SignalSender14measurements_2Ev+0xdc2>
 800b5b2:	687b      	ldr	r3, [r7, #4]
 800b5b4:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800b5b8:	f893 3073 	ldrb.w	r3, [r3, #115]	; 0x73
 800b5bc:	ee07 3a90 	vmov	s15, r3
 800b5c0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b5c4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b5c8:	edc7 7a00 	vstr	s15, [r7]
 800b5cc:	783b      	ldrb	r3, [r7, #0]
 800b5ce:	b2db      	uxtb	r3, r3
 800b5d0:	687a      	ldr	r2, [r7, #4]
 800b5d2:	f882 303f 	strb.w	r3, [r2, #63]	; 0x3f
#endif

            char    data[measurements_2_DLC + 2] = {0};
 800b5d6:	2300      	movs	r3, #0
 800b5d8:	60fb      	str	r3, [r7, #12]
 800b5da:	f107 0310 	add.w	r3, r7, #16
 800b5de:	2200      	movs	r2, #0
 800b5e0:	601a      	str	r2, [r3, #0]
 800b5e2:	809a      	strh	r2, [r3, #4]
            uint8_t ide                          = measurements_2_IDE;
 800b5e4:	2300      	movs	r3, #0
 800b5e6:	72fb      	strb	r3, [r7, #11]
            uint8_t dlc                          = measurements_2_DLC;
 800b5e8:	2308      	movs	r3, #8
 800b5ea:	72bb      	strb	r3, [r7, #10]
            data[0]                              = measurements_2_CANID;
 800b5ec:	2302      	movs	r3, #2
 800b5ee:	733b      	strb	r3, [r7, #12]
            data[1]                              = measurements_2_DLC;
 800b5f0:	2308      	movs	r3, #8
 800b5f2:	737b      	strb	r3, [r7, #13]
            Pack_measurements_2_jlb(&jlb_rx.measurements_2, reinterpret_cast<uint8_t *>(data + 2), &dlc, &ide);
 800b5f4:	687b      	ldr	r3, [r7, #4]
 800b5f6:	f103 0020 	add.w	r0, r3, #32
 800b5fa:	f107 010c 	add.w	r1, r7, #12
 800b5fe:	3102      	adds	r1, #2
 800b600:	f107 030b 	add.w	r3, r7, #11
 800b604:	f107 020a 	add.w	r2, r7, #10
 800b608:	f7f5 ff52 	bl	80014b0 <Pack_measurements_2_jlb>
            telemetry_data.insert(telemetry_data.end(), data, data + measurements_2_DLC + 2);
 800b60c:	687b      	ldr	r3, [r7, #4]
 800b60e:	f503 74ee 	add.w	r4, r3, #476	; 0x1dc
 800b612:	687b      	ldr	r3, [r7, #4]
 800b614:	f503 73ee 	add.w	r3, r3, #476	; 0x1dc
 800b618:	4618      	mov	r0, r3
 800b61a:	f001 fc26 	bl	800ce6a <_ZNSt6vectorIcSaIcEE3endEv>
 800b61e:	4603      	mov	r3, r0
 800b620:	61fb      	str	r3, [r7, #28]
 800b622:	f107 021c 	add.w	r2, r7, #28
 800b626:	f107 0318 	add.w	r3, r7, #24
 800b62a:	4611      	mov	r1, r2
 800b62c:	4618      	mov	r0, r3
 800b62e:	f001 fcbe 	bl	800cfae <_ZN9__gnu_cxx17__normal_iteratorIPKcSt6vectorIcSaIcEEEC1IPcEERKNS0_IT_NS_11__enable_ifIXsrSt10__are_sameIS9_S8_E7__valueES5_E6__typeEEE>
 800b632:	f107 030c 	add.w	r3, r7, #12
 800b636:	330a      	adds	r3, #10
 800b638:	f107 020c 	add.w	r2, r7, #12
 800b63c:	69b9      	ldr	r1, [r7, #24]
 800b63e:	4620      	mov	r0, r4
 800b640:	f001 fcc6 	bl	800cfd0 <_ZNSt6vectorIcSaIcEE6insertIPcvEEN9__gnu_cxx17__normal_iteratorIS3_S1_EENS5_IPKcS1_EET_SA_>
        }
 800b644:	bf00      	nop
 800b646:	3724      	adds	r7, #36	; 0x24
 800b648:	46bd      	mov	sp, r7
 800b64a:	bd90      	pop	{r4, r7, pc}

0800b64c <_ZN3jlb12SignalSender14measurements_3Ev>:

        void measurements_3()
 800b64c:	b590      	push	{r4, r7, lr}
 800b64e:	b089      	sub	sp, #36	; 0x24
 800b650:	af00      	add	r7, sp, #0
 800b652:	6078      	str	r0, [r7, #4]
        {
            jlb_rx.measurements_3.angular_velocity_x_phys = odometry.meas_ang_vel_x;
 800b654:	687b      	ldr	r3, [r7, #4]
 800b656:	f8d3 31c8 	ldr.w	r3, [r3, #456]	; 0x1c8
 800b65a:	69db      	ldr	r3, [r3, #28]
 800b65c:	4618      	mov	r0, r3
 800b65e:	f7f4 ff65 	bl	800052c <__aeabi_f2d>
 800b662:	4602      	mov	r2, r0
 800b664:	460b      	mov	r3, r1
 800b666:	6879      	ldr	r1, [r7, #4]
 800b668:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
            jlb_rx.measurements_3.angular_velocity_y_phys = odometry.meas_ang_vel_y;
 800b66c:	687b      	ldr	r3, [r7, #4]
 800b66e:	f8d3 31c8 	ldr.w	r3, [r3, #456]	; 0x1c8
 800b672:	6a1b      	ldr	r3, [r3, #32]
 800b674:	4618      	mov	r0, r3
 800b676:	f7f4 ff59 	bl	800052c <__aeabi_f2d>
 800b67a:	4602      	mov	r2, r0
 800b67c:	460b      	mov	r3, r1
 800b67e:	6879      	ldr	r1, [r7, #4]
 800b680:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
            jlb_rx.measurements_3.angular_velocity_z_phys = odometry.meas_ang_vel_z;
 800b684:	687b      	ldr	r3, [r7, #4]
 800b686:	f8d3 31c8 	ldr.w	r3, [r3, #456]	; 0x1c8
 800b68a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b68c:	4618      	mov	r0, r3
 800b68e:	f7f4 ff4d 	bl	800052c <__aeabi_f2d>
 800b692:	4602      	mov	r2, r0
 800b694:	460b      	mov	r3, r1
 800b696:	6879      	ldr	r1, [r7, #4]
 800b698:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68

            char    data[measurements_2_DLC + 2] = {0};
 800b69c:	2300      	movs	r3, #0
 800b69e:	60fb      	str	r3, [r7, #12]
 800b6a0:	f107 0310 	add.w	r3, r7, #16
 800b6a4:	2200      	movs	r2, #0
 800b6a6:	601a      	str	r2, [r3, #0]
 800b6a8:	809a      	strh	r2, [r3, #4]
            uint8_t ide                          = measurements_3_IDE;
 800b6aa:	2300      	movs	r3, #0
 800b6ac:	72fb      	strb	r3, [r7, #11]
            uint8_t dlc                          = measurements_3_DLC;
 800b6ae:	2308      	movs	r3, #8
 800b6b0:	72bb      	strb	r3, [r7, #10]
            data[0]                              = measurements_3_CANID;
 800b6b2:	2303      	movs	r3, #3
 800b6b4:	733b      	strb	r3, [r7, #12]
            data[1]                              = measurements_3_DLC;
 800b6b6:	2308      	movs	r3, #8
 800b6b8:	737b      	strb	r3, [r7, #13]
            Pack_measurements_3_jlb(&jlb_rx.measurements_3, reinterpret_cast<uint8_t *>(data + 2), &dlc, &ide);
 800b6ba:	687b      	ldr	r3, [r7, #4]
 800b6bc:	f103 0040 	add.w	r0, r3, #64	; 0x40
 800b6c0:	f107 010c 	add.w	r1, r7, #12
 800b6c4:	3102      	adds	r1, #2
 800b6c6:	f107 030b 	add.w	r3, r7, #11
 800b6ca:	f107 020a 	add.w	r2, r7, #10
 800b6ce:	f7f6 f837 	bl	8001740 <Pack_measurements_3_jlb>
            telemetry_data.insert(telemetry_data.end(), data, data + measurements_3_DLC + 2);
 800b6d2:	687b      	ldr	r3, [r7, #4]
 800b6d4:	f503 74ee 	add.w	r4, r3, #476	; 0x1dc
 800b6d8:	687b      	ldr	r3, [r7, #4]
 800b6da:	f503 73ee 	add.w	r3, r3, #476	; 0x1dc
 800b6de:	4618      	mov	r0, r3
 800b6e0:	f001 fbc3 	bl	800ce6a <_ZNSt6vectorIcSaIcEE3endEv>
 800b6e4:	4603      	mov	r3, r0
 800b6e6:	61fb      	str	r3, [r7, #28]
 800b6e8:	f107 021c 	add.w	r2, r7, #28
 800b6ec:	f107 0318 	add.w	r3, r7, #24
 800b6f0:	4611      	mov	r1, r2
 800b6f2:	4618      	mov	r0, r3
 800b6f4:	f001 fc5b 	bl	800cfae <_ZN9__gnu_cxx17__normal_iteratorIPKcSt6vectorIcSaIcEEEC1IPcEERKNS0_IT_NS_11__enable_ifIXsrSt10__are_sameIS9_S8_E7__valueES5_E6__typeEEE>
 800b6f8:	f107 030c 	add.w	r3, r7, #12
 800b6fc:	330a      	adds	r3, #10
 800b6fe:	f107 020c 	add.w	r2, r7, #12
 800b702:	69b9      	ldr	r1, [r7, #24]
 800b704:	4620      	mov	r0, r4
 800b706:	f001 fc63 	bl	800cfd0 <_ZNSt6vectorIcSaIcEE6insertIPcvEEN9__gnu_cxx17__normal_iteratorIS3_S1_EENS5_IPKcS1_EET_SA_>
        }
 800b70a:	bf00      	nop
 800b70c:	3724      	adds	r7, #36	; 0x24
 800b70e:	46bd      	mov	sp, r7
 800b710:	bd90      	pop	{r4, r7, pc}

0800b712 <_ZN3jlb12SignalSender14measurements_4Ev>:

        void measurements_4()
 800b712:	b590      	push	{r4, r7, lr}
 800b714:	b089      	sub	sp, #36	; 0x24
 800b716:	af00      	add	r7, sp, #0
 800b718:	6078      	str	r0, [r7, #4]
        {
            jlb_rx.measurements_4.linear_acceleration_x_phys = odometry.meas_lin_acc_x;
 800b71a:	687b      	ldr	r3, [r7, #4]
 800b71c:	f8d3 31c8 	ldr.w	r3, [r3, #456]	; 0x1c8
 800b720:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b722:	4618      	mov	r0, r3
 800b724:	f7f4 ff02 	bl	800052c <__aeabi_f2d>
 800b728:	4602      	mov	r2, r0
 800b72a:	460b      	mov	r3, r1
 800b72c:	6879      	ldr	r1, [r7, #4]
 800b72e:	e9c1 231e 	strd	r2, r3, [r1, #120]	; 0x78
            jlb_rx.measurements_4.linear_acceleration_y_phys = odometry.meas_lin_acc_y;
 800b732:	687b      	ldr	r3, [r7, #4]
 800b734:	f8d3 31c8 	ldr.w	r3, [r3, #456]	; 0x1c8
 800b738:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b73a:	4618      	mov	r0, r3
 800b73c:	f7f4 fef6 	bl	800052c <__aeabi_f2d>
 800b740:	4602      	mov	r2, r0
 800b742:	460b      	mov	r3, r1
 800b744:	6879      	ldr	r1, [r7, #4]
 800b746:	e9c1 2322 	strd	r2, r3, [r1, #136]	; 0x88
            jlb_rx.measurements_4.linear_acceleration_z_phys = odometry.meas_lin_acc_z;
 800b74a:	687b      	ldr	r3, [r7, #4]
 800b74c:	f8d3 31c8 	ldr.w	r3, [r3, #456]	; 0x1c8
 800b750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b752:	4618      	mov	r0, r3
 800b754:	f7f4 feea 	bl	800052c <__aeabi_f2d>
 800b758:	4602      	mov	r2, r0
 800b75a:	460b      	mov	r3, r1
 800b75c:	6879      	ldr	r1, [r7, #4]
 800b75e:	e9c1 2326 	strd	r2, r3, [r1, #152]	; 0x98

            char    data[measurements_3_DLC + 2] = {0};
 800b762:	2300      	movs	r3, #0
 800b764:	60fb      	str	r3, [r7, #12]
 800b766:	f107 0310 	add.w	r3, r7, #16
 800b76a:	2200      	movs	r2, #0
 800b76c:	601a      	str	r2, [r3, #0]
 800b76e:	809a      	strh	r2, [r3, #4]
            uint8_t ide                          = measurements_4_IDE;
 800b770:	2300      	movs	r3, #0
 800b772:	72fb      	strb	r3, [r7, #11]
            uint8_t dlc                          = measurements_4_DLC;
 800b774:	2308      	movs	r3, #8
 800b776:	72bb      	strb	r3, [r7, #10]
            data[0]                              = measurements_4_CANID;
 800b778:	2304      	movs	r3, #4
 800b77a:	733b      	strb	r3, [r7, #12]
            data[1]                              = measurements_4_DLC;
 800b77c:	2308      	movs	r3, #8
 800b77e:	737b      	strb	r3, [r7, #13]
            Pack_measurements_4_jlb(&jlb_rx.measurements_4, reinterpret_cast<uint8_t *>(data + 2), &dlc, &ide);
 800b780:	687b      	ldr	r3, [r7, #4]
 800b782:	f103 0070 	add.w	r0, r3, #112	; 0x70
 800b786:	f107 010c 	add.w	r1, r7, #12
 800b78a:	3102      	adds	r1, #2
 800b78c:	f107 030b 	add.w	r3, r7, #11
 800b790:	f107 020a 	add.w	r2, r7, #10
 800b794:	f7f6 f894 	bl	80018c0 <Pack_measurements_4_jlb>
            telemetry_data.insert(telemetry_data.end(), data, data + measurements_4_DLC + 2);
 800b798:	687b      	ldr	r3, [r7, #4]
 800b79a:	f503 74ee 	add.w	r4, r3, #476	; 0x1dc
 800b79e:	687b      	ldr	r3, [r7, #4]
 800b7a0:	f503 73ee 	add.w	r3, r3, #476	; 0x1dc
 800b7a4:	4618      	mov	r0, r3
 800b7a6:	f001 fb60 	bl	800ce6a <_ZNSt6vectorIcSaIcEE3endEv>
 800b7aa:	4603      	mov	r3, r0
 800b7ac:	61fb      	str	r3, [r7, #28]
 800b7ae:	f107 021c 	add.w	r2, r7, #28
 800b7b2:	f107 0318 	add.w	r3, r7, #24
 800b7b6:	4611      	mov	r1, r2
 800b7b8:	4618      	mov	r0, r3
 800b7ba:	f001 fbf8 	bl	800cfae <_ZN9__gnu_cxx17__normal_iteratorIPKcSt6vectorIcSaIcEEEC1IPcEERKNS0_IT_NS_11__enable_ifIXsrSt10__are_sameIS9_S8_E7__valueES5_E6__typeEEE>
 800b7be:	f107 030c 	add.w	r3, r7, #12
 800b7c2:	330a      	adds	r3, #10
 800b7c4:	f107 020c 	add.w	r2, r7, #12
 800b7c8:	69b9      	ldr	r1, [r7, #24]
 800b7ca:	4620      	mov	r0, r4
 800b7cc:	f001 fc00 	bl	800cfd0 <_ZNSt6vectorIcSaIcEE6insertIPcvEEN9__gnu_cxx17__normal_iteratorIS3_S1_EENS5_IPKcS1_EET_SA_>
        }
 800b7d0:	bf00      	nop
 800b7d2:	3724      	adds	r7, #36	; 0x24
 800b7d4:	46bd      	mov	sp, r7
 800b7d6:	bd90      	pop	{r4, r7, pc}

0800b7d8 <_ZN3jlb12SignalSender14measurements_5Ev>:

        void measurements_5()
 800b7d8:	b590      	push	{r4, r7, lr}
 800b7da:	b089      	sub	sp, #36	; 0x24
 800b7dc:	af00      	add	r7, sp, #0
 800b7de:	6078      	str	r0, [r7, #4]
        {
            jlb_rx.measurements_5.duty_cycle_phys    = measurements.duty_cycle;
 800b7e0:	687b      	ldr	r3, [r7, #4]
 800b7e2:	f8d3 31d8 	ldr.w	r3, [r3, #472]	; 0x1d8
 800b7e6:	681b      	ldr	r3, [r3, #0]
 800b7e8:	4618      	mov	r0, r3
 800b7ea:	f7f4 fe9f 	bl	800052c <__aeabi_f2d>
 800b7ee:	4602      	mov	r2, r0
 800b7f0:	460b      	mov	r3, r1
 800b7f2:	6879      	ldr	r1, [r7, #4]
 800b7f4:	e9c1 2336 	strd	r2, r3, [r1, #216]	; 0xd8
            jlb_rx.measurements_5.motor_current_phys = measurements.motor_current;
 800b7f8:	687b      	ldr	r3, [r7, #4]
 800b7fa:	f8d3 31d8 	ldr.w	r3, [r3, #472]	; 0x1d8
 800b7fe:	685b      	ldr	r3, [r3, #4]
 800b800:	4618      	mov	r0, r3
 800b802:	f7f4 fe93 	bl	800052c <__aeabi_f2d>
 800b806:	4602      	mov	r2, r0
 800b808:	460b      	mov	r3, r1
 800b80a:	6879      	ldr	r1, [r7, #4]
 800b80c:	e9c1 2332 	strd	r2, r3, [r1, #200]	; 0xc8
            jlb_rx.measurements_5.object_range_phys  = measurements.object_range;
 800b810:	687b      	ldr	r3, [r7, #4]
 800b812:	f8d3 31d8 	ldr.w	r3, [r3, #472]	; 0x1d8
 800b816:	689b      	ldr	r3, [r3, #8]
 800b818:	4618      	mov	r0, r3
 800b81a:	f7f4 fe87 	bl	800052c <__aeabi_f2d>
 800b81e:	4602      	mov	r2, r0
 800b820:	460b      	mov	r3, r1
 800b822:	6879      	ldr	r1, [r7, #4]
 800b824:	e9c1 232e 	strd	r2, r3, [r1, #184]	; 0xb8
            jlb_rx.measurements_5.wheel_rpm_phys     = measurements.wheel_rpm;
 800b828:	687b      	ldr	r3, [r7, #4]
 800b82a:	f8d3 31d8 	ldr.w	r3, [r3, #472]	; 0x1d8
 800b82e:	68db      	ldr	r3, [r3, #12]
 800b830:	4618      	mov	r0, r3
 800b832:	f7f4 fe7b 	bl	800052c <__aeabi_f2d>
 800b836:	4602      	mov	r2, r0
 800b838:	460b      	mov	r3, r1
 800b83a:	6879      	ldr	r1, [r7, #4]
 800b83c:	e9c1 232a 	strd	r2, r3, [r1, #168]	; 0xa8

            char    data[measurements_4_DLC + 2] = {0};
 800b840:	2300      	movs	r3, #0
 800b842:	60fb      	str	r3, [r7, #12]
 800b844:	f107 0310 	add.w	r3, r7, #16
 800b848:	2200      	movs	r2, #0
 800b84a:	601a      	str	r2, [r3, #0]
 800b84c:	809a      	strh	r2, [r3, #4]
            uint8_t ide                          = measurements_5_IDE;
 800b84e:	2300      	movs	r3, #0
 800b850:	72fb      	strb	r3, [r7, #11]
            uint8_t dlc                          = measurements_5_DLC;
 800b852:	2308      	movs	r3, #8
 800b854:	72bb      	strb	r3, [r7, #10]
            data[0]                              = measurements_5_CANID;
 800b856:	2305      	movs	r3, #5
 800b858:	733b      	strb	r3, [r7, #12]
            data[1]                              = measurements_5_DLC;
 800b85a:	2308      	movs	r3, #8
 800b85c:	737b      	strb	r3, [r7, #13]
            Pack_measurements_5_jlb(&jlb_rx.measurements_5, reinterpret_cast<uint8_t *>(data + 2), &dlc, &ide);
 800b85e:	687b      	ldr	r3, [r7, #4]
 800b860:	f103 00a0 	add.w	r0, r3, #160	; 0xa0
 800b864:	f107 010c 	add.w	r1, r7, #12
 800b868:	3102      	adds	r1, #2
 800b86a:	f107 030b 	add.w	r3, r7, #11
 800b86e:	f107 020a 	add.w	r2, r7, #10
 800b872:	f7f6 f8e5 	bl	8001a40 <Pack_measurements_5_jlb>
            telemetry_data.insert(telemetry_data.end(), data, data + measurements_5_DLC + 2);
 800b876:	687b      	ldr	r3, [r7, #4]
 800b878:	f503 74ee 	add.w	r4, r3, #476	; 0x1dc
 800b87c:	687b      	ldr	r3, [r7, #4]
 800b87e:	f503 73ee 	add.w	r3, r3, #476	; 0x1dc
 800b882:	4618      	mov	r0, r3
 800b884:	f001 faf1 	bl	800ce6a <_ZNSt6vectorIcSaIcEE3endEv>
 800b888:	4603      	mov	r3, r0
 800b88a:	61fb      	str	r3, [r7, #28]
 800b88c:	f107 021c 	add.w	r2, r7, #28
 800b890:	f107 0318 	add.w	r3, r7, #24
 800b894:	4611      	mov	r1, r2
 800b896:	4618      	mov	r0, r3
 800b898:	f001 fb89 	bl	800cfae <_ZN9__gnu_cxx17__normal_iteratorIPKcSt6vectorIcSaIcEEEC1IPcEERKNS0_IT_NS_11__enable_ifIXsrSt10__are_sameIS9_S8_E7__valueES5_E6__typeEEE>
 800b89c:	f107 030c 	add.w	r3, r7, #12
 800b8a0:	330a      	adds	r3, #10
 800b8a2:	f107 020c 	add.w	r2, r7, #12
 800b8a6:	69b9      	ldr	r1, [r7, #24]
 800b8a8:	4620      	mov	r0, r4
 800b8aa:	f001 fb91 	bl	800cfd0 <_ZNSt6vectorIcSaIcEE6insertIPcvEEN9__gnu_cxx17__normal_iteratorIS3_S1_EENS5_IPKcS1_EET_SA_>
        }
 800b8ae:	bf00      	nop
 800b8b0:	3724      	adds	r7, #36	; 0x24
 800b8b2:	46bd      	mov	sp, r7
 800b8b4:	bd90      	pop	{r4, r7, pc}

0800b8b6 <_ZN3jlb12SignalSender10odometry_1Ev>:

        void odometry_1()
 800b8b6:	b590      	push	{r4, r7, lr}
 800b8b8:	b089      	sub	sp, #36	; 0x24
 800b8ba:	af00      	add	r7, sp, #0
 800b8bc:	6078      	str	r0, [r7, #4]
        {
            jlb_rx.odometry_1.position_x_phys  = odometry.x_t;
 800b8be:	687b      	ldr	r3, [r7, #4]
 800b8c0:	f8d3 31c8 	ldr.w	r3, [r3, #456]	; 0x1c8
 800b8c4:	689b      	ldr	r3, [r3, #8]
 800b8c6:	4618      	mov	r0, r3
 800b8c8:	f7f4 fe30 	bl	800052c <__aeabi_f2d>
 800b8cc:	4602      	mov	r2, r0
 800b8ce:	460b      	mov	r3, r1
 800b8d0:	6879      	ldr	r1, [r7, #4]
 800b8d2:	e9c1 233e 	strd	r2, r3, [r1, #248]	; 0xf8
            jlb_rx.odometry_1.position_y_phys  = odometry.y_t;
 800b8d6:	687b      	ldr	r3, [r7, #4]
 800b8d8:	f8d3 31c8 	ldr.w	r3, [r3, #456]	; 0x1c8
 800b8dc:	68db      	ldr	r3, [r3, #12]
 800b8de:	4618      	mov	r0, r3
 800b8e0:	f7f4 fe24 	bl	800052c <__aeabi_f2d>
 800b8e4:	4602      	mov	r2, r0
 800b8e6:	460b      	mov	r3, r1
 800b8e8:	6879      	ldr	r1, [r7, #4]
 800b8ea:	e9c1 2342 	strd	r2, r3, [r1, #264]	; 0x108
            jlb_rx.odometry_1.orientation_phys = odometry.theta_t;
 800b8ee:	687b      	ldr	r3, [r7, #4]
 800b8f0:	f8d3 31c8 	ldr.w	r3, [r3, #456]	; 0x1c8
 800b8f4:	691b      	ldr	r3, [r3, #16]
 800b8f6:	4618      	mov	r0, r3
 800b8f8:	f7f4 fe18 	bl	800052c <__aeabi_f2d>
 800b8fc:	4602      	mov	r2, r0
 800b8fe:	460b      	mov	r3, r1
 800b900:	6879      	ldr	r1, [r7, #4]
 800b902:	e9c1 233a 	strd	r2, r3, [r1, #232]	; 0xe8

            char    data[odometry_1_DLC + 2] = {0};
 800b906:	2300      	movs	r3, #0
 800b908:	60fb      	str	r3, [r7, #12]
 800b90a:	f107 0310 	add.w	r3, r7, #16
 800b90e:	2200      	movs	r2, #0
 800b910:	601a      	str	r2, [r3, #0]
 800b912:	809a      	strh	r2, [r3, #4]
            uint8_t ide                      = odometry_1_IDE;
 800b914:	2300      	movs	r3, #0
 800b916:	72fb      	strb	r3, [r7, #11]
            uint8_t dlc                      = odometry_1_DLC;
 800b918:	2308      	movs	r3, #8
 800b91a:	72bb      	strb	r3, [r7, #10]
            data[0]                          = odometry_1_CANID;
 800b91c:	2311      	movs	r3, #17
 800b91e:	733b      	strb	r3, [r7, #12]
            data[1]                          = odometry_1_DLC;
 800b920:	2308      	movs	r3, #8
 800b922:	737b      	strb	r3, [r7, #13]
            Pack_odometry_1_jlb(&jlb_rx.odometry_1, reinterpret_cast<uint8_t *>(data + 2), &dlc, &ide);
 800b924:	687b      	ldr	r3, [r7, #4]
 800b926:	f103 00e0 	add.w	r0, r3, #224	; 0xe0
 800b92a:	f107 010c 	add.w	r1, r7, #12
 800b92e:	3102      	adds	r1, #2
 800b930:	f107 030b 	add.w	r3, r7, #11
 800b934:	f107 020a 	add.w	r2, r7, #10
 800b938:	f7f6 f966 	bl	8001c08 <Pack_odometry_1_jlb>
            telemetry_data.insert(telemetry_data.end(), data, data + odometry_1_DLC + 2);
 800b93c:	687b      	ldr	r3, [r7, #4]
 800b93e:	f503 74ee 	add.w	r4, r3, #476	; 0x1dc
 800b942:	687b      	ldr	r3, [r7, #4]
 800b944:	f503 73ee 	add.w	r3, r3, #476	; 0x1dc
 800b948:	4618      	mov	r0, r3
 800b94a:	f001 fa8e 	bl	800ce6a <_ZNSt6vectorIcSaIcEE3endEv>
 800b94e:	4603      	mov	r3, r0
 800b950:	61fb      	str	r3, [r7, #28]
 800b952:	f107 021c 	add.w	r2, r7, #28
 800b956:	f107 0318 	add.w	r3, r7, #24
 800b95a:	4611      	mov	r1, r2
 800b95c:	4618      	mov	r0, r3
 800b95e:	f001 fb26 	bl	800cfae <_ZN9__gnu_cxx17__normal_iteratorIPKcSt6vectorIcSaIcEEEC1IPcEERKNS0_IT_NS_11__enable_ifIXsrSt10__are_sameIS9_S8_E7__valueES5_E6__typeEEE>
 800b962:	f107 030c 	add.w	r3, r7, #12
 800b966:	330a      	adds	r3, #10
 800b968:	f107 020c 	add.w	r2, r7, #12
 800b96c:	69b9      	ldr	r1, [r7, #24]
 800b96e:	4620      	mov	r0, r4
 800b970:	f001 fb2e 	bl	800cfd0 <_ZNSt6vectorIcSaIcEE6insertIPcvEEN9__gnu_cxx17__normal_iteratorIS3_S1_EENS5_IPKcS1_EET_SA_>
        }
 800b974:	bf00      	nop
 800b976:	3724      	adds	r7, #36	; 0x24
 800b978:	46bd      	mov	sp, r7
 800b97a:	bd90      	pop	{r4, r7, pc}

0800b97c <_ZN3jlb12SignalSender10odometry_2Ev>:

        void odometry_2()
 800b97c:	b590      	push	{r4, r7, lr}
 800b97e:	b089      	sub	sp, #36	; 0x24
 800b980:	af00      	add	r7, sp, #0
 800b982:	6078      	str	r0, [r7, #4]
        {
            jlb_rx.odometry_2.linear_velocity_x_phys  = odometry.vx_t;
 800b984:	687b      	ldr	r3, [r7, #4]
 800b986:	f8d3 31c8 	ldr.w	r3, [r3, #456]	; 0x1c8
 800b98a:	681b      	ldr	r3, [r3, #0]
 800b98c:	4618      	mov	r0, r3
 800b98e:	f7f4 fdcd 	bl	800052c <__aeabi_f2d>
 800b992:	4602      	mov	r2, r0
 800b994:	460b      	mov	r3, r1
 800b996:	6879      	ldr	r1, [r7, #4]
 800b998:	e9c1 234a 	strd	r2, r3, [r1, #296]	; 0x128
            jlb_rx.odometry_2.angular_velocity_z_phys = odometry.w_t;
 800b99c:	687b      	ldr	r3, [r7, #4]
 800b99e:	f8d3 31c8 	ldr.w	r3, [r3, #456]	; 0x1c8
 800b9a2:	685b      	ldr	r3, [r3, #4]
 800b9a4:	4618      	mov	r0, r3
 800b9a6:	f7f4 fdc1 	bl	800052c <__aeabi_f2d>
 800b9aa:	4602      	mov	r2, r0
 800b9ac:	460b      	mov	r3, r1
 800b9ae:	6879      	ldr	r1, [r7, #4]
 800b9b0:	e9c1 2346 	strd	r2, r3, [r1, #280]	; 0x118

            char    data[odometry_2_DLC + 2] = {0};
 800b9b4:	2300      	movs	r3, #0
 800b9b6:	60fb      	str	r3, [r7, #12]
 800b9b8:	f107 0310 	add.w	r3, r7, #16
 800b9bc:	2200      	movs	r2, #0
 800b9be:	601a      	str	r2, [r3, #0]
 800b9c0:	809a      	strh	r2, [r3, #4]
            uint8_t ide                      = odometry_2_IDE;
 800b9c2:	2300      	movs	r3, #0
 800b9c4:	72fb      	strb	r3, [r7, #11]
            uint8_t dlc                      = odometry_2_DLC;
 800b9c6:	2308      	movs	r3, #8
 800b9c8:	72bb      	strb	r3, [r7, #10]
            data[0]                          = odometry_2_CANID;
 800b9ca:	2312      	movs	r3, #18
 800b9cc:	733b      	strb	r3, [r7, #12]
            data[1]                          = odometry_2_DLC;
 800b9ce:	2308      	movs	r3, #8
 800b9d0:	737b      	strb	r3, [r7, #13]
            Pack_odometry_2_jlb(&jlb_rx.odometry_2, reinterpret_cast<uint8_t *>(data + 2), &dlc, &ide);
 800b9d2:	687b      	ldr	r3, [r7, #4]
 800b9d4:	f503 7088 	add.w	r0, r3, #272	; 0x110
 800b9d8:	f107 010c 	add.w	r1, r7, #12
 800b9dc:	3102      	adds	r1, #2
 800b9de:	f107 030b 	add.w	r3, r7, #11
 800b9e2:	f107 020a 	add.w	r2, r7, #10
 800b9e6:	f7f6 f9d7 	bl	8001d98 <Pack_odometry_2_jlb>
            telemetry_data.insert(telemetry_data.end(), data, data + odometry_2_DLC + 2);
 800b9ea:	687b      	ldr	r3, [r7, #4]
 800b9ec:	f503 74ee 	add.w	r4, r3, #476	; 0x1dc
 800b9f0:	687b      	ldr	r3, [r7, #4]
 800b9f2:	f503 73ee 	add.w	r3, r3, #476	; 0x1dc
 800b9f6:	4618      	mov	r0, r3
 800b9f8:	f001 fa37 	bl	800ce6a <_ZNSt6vectorIcSaIcEE3endEv>
 800b9fc:	4603      	mov	r3, r0
 800b9fe:	61fb      	str	r3, [r7, #28]
 800ba00:	f107 021c 	add.w	r2, r7, #28
 800ba04:	f107 0318 	add.w	r3, r7, #24
 800ba08:	4611      	mov	r1, r2
 800ba0a:	4618      	mov	r0, r3
 800ba0c:	f001 facf 	bl	800cfae <_ZN9__gnu_cxx17__normal_iteratorIPKcSt6vectorIcSaIcEEEC1IPcEERKNS0_IT_NS_11__enable_ifIXsrSt10__are_sameIS9_S8_E7__valueES5_E6__typeEEE>
 800ba10:	f107 030c 	add.w	r3, r7, #12
 800ba14:	330a      	adds	r3, #10
 800ba16:	f107 020c 	add.w	r2, r7, #12
 800ba1a:	69b9      	ldr	r1, [r7, #24]
 800ba1c:	4620      	mov	r0, r4
 800ba1e:	f001 fad7 	bl	800cfd0 <_ZNSt6vectorIcSaIcEE6insertIPcvEEN9__gnu_cxx17__normal_iteratorIS3_S1_EENS5_IPKcS1_EET_SA_>
        }
 800ba22:	bf00      	nop
 800ba24:	3724      	adds	r7, #36	; 0x24
 800ba26:	46bd      	mov	sp, r7
 800ba28:	bd90      	pop	{r4, r7, pc}

0800ba2a <_ZN3jlb12SignalSender7logic_1Ev>:

        void logic_1()
 800ba2a:	b590      	push	{r4, r7, lr}
 800ba2c:	b089      	sub	sp, #36	; 0x24
 800ba2e:	af00      	add	r7, sp, #0
 800ba30:	6078      	str	r0, [r7, #4]
        {
            jlb_rx.logic_1.target_angle_phys      = controller.target_angle;
 800ba32:	687b      	ldr	r3, [r7, #4]
 800ba34:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800ba38:	699b      	ldr	r3, [r3, #24]
 800ba3a:	4618      	mov	r0, r3
 800ba3c:	f7f4 fd76 	bl	800052c <__aeabi_f2d>
 800ba40:	4602      	mov	r2, r0
 800ba42:	460b      	mov	r3, r1
 800ba44:	6879      	ldr	r1, [r7, #4]
 800ba46:	e9c1 234e 	strd	r2, r3, [r1, #312]	; 0x138
            jlb_rx.logic_1.target_speed_phys      = controller.target_speed;
 800ba4a:	687b      	ldr	r3, [r7, #4]
 800ba4c:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800ba50:	69db      	ldr	r3, [r3, #28]
 800ba52:	4618      	mov	r0, r3
 800ba54:	f7f4 fd6a 	bl	800052c <__aeabi_f2d>
 800ba58:	4602      	mov	r2, r0
 800ba5a:	460b      	mov	r3, r1
 800ba5c:	6879      	ldr	r1, [r7, #4]
 800ba5e:	e9c1 2352 	strd	r2, r3, [r1, #328]	; 0x148
            jlb_rx.logic_1.cross_track_error_phys = controller.cross_track_error;
 800ba62:	687b      	ldr	r3, [r7, #4]
 800ba64:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800ba68:	6a1b      	ldr	r3, [r3, #32]
 800ba6a:	4618      	mov	r0, r3
 800ba6c:	f7f4 fd5e 	bl	800052c <__aeabi_f2d>
 800ba70:	4602      	mov	r2, r0
 800ba72:	460b      	mov	r3, r1
 800ba74:	6879      	ldr	r1, [r7, #4]
 800ba76:	e9c1 2356 	strd	r2, r3, [r1, #344]	; 0x158
            jlb_rx.logic_1.heading_error_phys     = controller.heading_error;
 800ba7a:	687b      	ldr	r3, [r7, #4]
 800ba7c:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800ba80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba82:	4618      	mov	r0, r3
 800ba84:	f7f4 fd52 	bl	800052c <__aeabi_f2d>
 800ba88:	4602      	mov	r2, r0
 800ba8a:	460b      	mov	r3, r1
 800ba8c:	6879      	ldr	r1, [r7, #4]
 800ba8e:	e9c1 235a 	strd	r2, r3, [r1, #360]	; 0x168

            char    data[logic_1_DLC + 2] = {0};
 800ba92:	2300      	movs	r3, #0
 800ba94:	60fb      	str	r3, [r7, #12]
 800ba96:	f107 0310 	add.w	r3, r7, #16
 800ba9a:	2200      	movs	r2, #0
 800ba9c:	601a      	str	r2, [r3, #0]
 800ba9e:	809a      	strh	r2, [r3, #4]
            uint8_t ide                   = logic_1_IDE;
 800baa0:	2300      	movs	r3, #0
 800baa2:	72fb      	strb	r3, [r7, #11]
            uint8_t dlc                   = logic_1_DLC;
 800baa4:	2308      	movs	r3, #8
 800baa6:	72bb      	strb	r3, [r7, #10]
            data[0]                       = logic_1_CANID;
 800baa8:	2321      	movs	r3, #33	; 0x21
 800baaa:	733b      	strb	r3, [r7, #12]
            data[1]                       = logic_1_DLC;
 800baac:	2308      	movs	r3, #8
 800baae:	737b      	strb	r3, [r7, #13]
            Pack_logic_1_jlb(&jlb_rx.logic_1, reinterpret_cast<uint8_t *>(data + 2), &dlc, &ide);
 800bab0:	687b      	ldr	r3, [r7, #4]
 800bab2:	f503 7098 	add.w	r0, r3, #304	; 0x130
 800bab6:	f107 010c 	add.w	r1, r7, #12
 800baba:	3102      	adds	r1, #2
 800babc:	f107 030b 	add.w	r3, r7, #11
 800bac0:	f107 020a 	add.w	r2, r7, #10
 800bac4:	f7f6 f9fc 	bl	8001ec0 <Pack_logic_1_jlb>
            telemetry_data.insert(telemetry_data.end(), data, data + logic_1_DLC + 2);
 800bac8:	687b      	ldr	r3, [r7, #4]
 800baca:	f503 74ee 	add.w	r4, r3, #476	; 0x1dc
 800bace:	687b      	ldr	r3, [r7, #4]
 800bad0:	f503 73ee 	add.w	r3, r3, #476	; 0x1dc
 800bad4:	4618      	mov	r0, r3
 800bad6:	f001 f9c8 	bl	800ce6a <_ZNSt6vectorIcSaIcEE3endEv>
 800bada:	4603      	mov	r3, r0
 800badc:	61fb      	str	r3, [r7, #28]
 800bade:	f107 021c 	add.w	r2, r7, #28
 800bae2:	f107 0318 	add.w	r3, r7, #24
 800bae6:	4611      	mov	r1, r2
 800bae8:	4618      	mov	r0, r3
 800baea:	f001 fa60 	bl	800cfae <_ZN9__gnu_cxx17__normal_iteratorIPKcSt6vectorIcSaIcEEEC1IPcEERKNS0_IT_NS_11__enable_ifIXsrSt10__are_sameIS9_S8_E7__valueES5_E6__typeEEE>
 800baee:	f107 030c 	add.w	r3, r7, #12
 800baf2:	330a      	adds	r3, #10
 800baf4:	f107 020c 	add.w	r2, r7, #12
 800baf8:	69b9      	ldr	r1, [r7, #24]
 800bafa:	4620      	mov	r0, r4
 800bafc:	f001 fa68 	bl	800cfd0 <_ZNSt6vectorIcSaIcEE6insertIPcvEEN9__gnu_cxx17__normal_iteratorIS3_S1_EENS5_IPKcS1_EET_SA_>
        }
 800bb00:	bf00      	nop
 800bb02:	3724      	adds	r7, #36	; 0x24
 800bb04:	46bd      	mov	sp, r7
 800bb06:	bd90      	pop	{r4, r7, pc}

0800bb08 <_ZN3jlb12SignalSender7logic_2Ev>:

        void logic_2()
 800bb08:	b590      	push	{r4, r7, lr}
 800bb0a:	b089      	sub	sp, #36	; 0x24
 800bb0c:	af00      	add	r7, sp, #0
 800bb0e:	6078      	str	r0, [r7, #4]
        {
            jlb_rx.logic_2.distance_traveled_phys = odometry.distance_traveled_since_checkpoint;
 800bb10:	687b      	ldr	r3, [r7, #4]
 800bb12:	f8d3 31c8 	ldr.w	r3, [r3, #456]	; 0x1c8
 800bb16:	695b      	ldr	r3, [r3, #20]
 800bb18:	4618      	mov	r0, r3
 800bb1a:	f7f4 fd07 	bl	800052c <__aeabi_f2d>
 800bb1e:	4602      	mov	r2, r0
 800bb20:	460b      	mov	r3, r1
 800bb22:	6879      	ldr	r1, [r7, #4]
 800bb24:	e9c1 235e 	strd	r2, r3, [r1, #376]	; 0x178
            jlb_rx.logic_2.labyrinth_state        = static_cast<uint8_t>(as_state.labyrinth_state);
 800bb28:	687b      	ldr	r3, [r7, #4]
 800bb2a:	f8d3 31d0 	ldr.w	r3, [r3, #464]	; 0x1d0
 800bb2e:	685b      	ldr	r3, [r3, #4]
 800bb30:	b2da      	uxtb	r2, r3
 800bb32:	687b      	ldr	r3, [r7, #4]
 800bb34:	f883 2173 	strb.w	r2, [r3, #371]	; 0x173
            jlb_rx.logic_2.fast_state             = static_cast<uint8_t>(as_state.fast_state);
 800bb38:	687b      	ldr	r3, [r7, #4]
 800bb3a:	f8d3 31d0 	ldr.w	r3, [r3, #464]	; 0x1d0
 800bb3e:	689b      	ldr	r3, [r3, #8]
 800bb40:	b2da      	uxtb	r2, r3
 800bb42:	687b      	ldr	r3, [r7, #4]
 800bb44:	f883 2172 	strb.w	r2, [r3, #370]	; 0x172
            jlb_rx.logic_2.next_node              = as_state.next_node;
 800bb48:	687b      	ldr	r3, [r7, #4]
 800bb4a:	f8d3 31d0 	ldr.w	r3, [r3, #464]	; 0x1d0
 800bb4e:	f893 2029 	ldrb.w	r2, [r3, #41]	; 0x29
 800bb52:	687b      	ldr	r3, [r7, #4]
 800bb54:	f883 2174 	strb.w	r2, [r3, #372]	; 0x174
            jlb_rx.logic_2.previous_node          = as_state.previous_node;
 800bb58:	687b      	ldr	r3, [r7, #4]
 800bb5a:	f8d3 31d0 	ldr.w	r3, [r3, #464]	; 0x1d0
 800bb5e:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
 800bb62:	687b      	ldr	r3, [r7, #4]
 800bb64:	f883 2175 	strb.w	r2, [r3, #373]	; 0x175
            jlb_rx.logic_2.direction              = static_cast<uint8_t>(controller.direction);
 800bb68:	687b      	ldr	r3, [r7, #4]
 800bb6a:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800bb6e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bb72:	b2da      	uxtb	r2, r3
 800bb74:	687b      	ldr	r3, [r7, #4]
 800bb76:	f883 2170 	strb.w	r2, [r3, #368]	; 0x170
            jlb_rx.logic_2.mission                = static_cast<uint8_t>(as_state.mission);
 800bb7a:	687b      	ldr	r3, [r7, #4]
 800bb7c:	f8d3 31d0 	ldr.w	r3, [r3, #464]	; 0x1d0
 800bb80:	681b      	ldr	r3, [r3, #0]
 800bb82:	b2da      	uxtb	r2, r3
 800bb84:	687b      	ldr	r3, [r7, #4]
 800bb86:	f883 2171 	strb.w	r2, [r3, #369]	; 0x171

            char    data[logic_2_DLC + 2] = {0};
 800bb8a:	2300      	movs	r3, #0
 800bb8c:	60fb      	str	r3, [r7, #12]
 800bb8e:	f107 0310 	add.w	r3, r7, #16
 800bb92:	2200      	movs	r2, #0
 800bb94:	601a      	str	r2, [r3, #0]
 800bb96:	809a      	strh	r2, [r3, #4]
            uint8_t ide                   = logic_2_IDE;
 800bb98:	2300      	movs	r3, #0
 800bb9a:	72fb      	strb	r3, [r7, #11]
            uint8_t dlc                   = logic_2_DLC;
 800bb9c:	2308      	movs	r3, #8
 800bb9e:	72bb      	strb	r3, [r7, #10]
            data[0]                       = logic_2_CANID;
 800bba0:	2322      	movs	r3, #34	; 0x22
 800bba2:	733b      	strb	r3, [r7, #12]
            data[1]                       = logic_2_DLC;
 800bba4:	2308      	movs	r3, #8
 800bba6:	737b      	strb	r3, [r7, #13]
            Pack_logic_2_jlb(&jlb_rx.logic_2, reinterpret_cast<uint8_t *>(data + 2), &dlc, &ide);
 800bba8:	687b      	ldr	r3, [r7, #4]
 800bbaa:	f503 70b8 	add.w	r0, r3, #368	; 0x170
 800bbae:	f107 010c 	add.w	r1, r7, #12
 800bbb2:	3102      	adds	r1, #2
 800bbb4:	f107 030b 	add.w	r3, r7, #11
 800bbb8:	f107 020a 	add.w	r2, r7, #10
 800bbbc:	f7f6 fa84 	bl	80020c8 <Pack_logic_2_jlb>
            telemetry_data.insert(telemetry_data.end(), data, data + logic_2_DLC + 2);
 800bbc0:	687b      	ldr	r3, [r7, #4]
 800bbc2:	f503 74ee 	add.w	r4, r3, #476	; 0x1dc
 800bbc6:	687b      	ldr	r3, [r7, #4]
 800bbc8:	f503 73ee 	add.w	r3, r3, #476	; 0x1dc
 800bbcc:	4618      	mov	r0, r3
 800bbce:	f001 f94c 	bl	800ce6a <_ZNSt6vectorIcSaIcEE3endEv>
 800bbd2:	4603      	mov	r3, r0
 800bbd4:	61fb      	str	r3, [r7, #28]
 800bbd6:	f107 021c 	add.w	r2, r7, #28
 800bbda:	f107 0318 	add.w	r3, r7, #24
 800bbde:	4611      	mov	r1, r2
 800bbe0:	4618      	mov	r0, r3
 800bbe2:	f001 f9e4 	bl	800cfae <_ZN9__gnu_cxx17__normal_iteratorIPKcSt6vectorIcSaIcEEEC1IPcEERKNS0_IT_NS_11__enable_ifIXsrSt10__are_sameIS9_S8_E7__valueES5_E6__typeEEE>
 800bbe6:	f107 030c 	add.w	r3, r7, #12
 800bbea:	330a      	adds	r3, #10
 800bbec:	f107 020c 	add.w	r2, r7, #12
 800bbf0:	69b9      	ldr	r1, [r7, #24]
 800bbf2:	4620      	mov	r0, r4
 800bbf4:	f001 f9ec 	bl	800cfd0 <_ZNSt6vectorIcSaIcEE6insertIPcvEEN9__gnu_cxx17__normal_iteratorIS3_S1_EENS5_IPKcS1_EET_SA_>
        }
 800bbf8:	bf00      	nop
 800bbfa:	3724      	adds	r7, #36	; 0x24
 800bbfc:	46bd      	mov	sp, r7
 800bbfe:	bd90      	pop	{r4, r7, pc}

0800bc00 <_ZN3jlb12SignalSender6logic3Ev>:

        void logic3()
 800bc00:	b590      	push	{r4, r7, lr}
 800bc02:	b089      	sub	sp, #36	; 0x24
 800bc04:	af00      	add	r7, sp, #0
 800bc06:	6078      	str	r0, [r7, #4]
        {
            jlb_rx.logic_3.ang_error_norm_phys      = controller.ang_error_norm;
 800bc08:	687b      	ldr	r3, [r7, #4]
 800bc0a:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800bc0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bc10:	4618      	mov	r0, r3
 800bc12:	f7f4 fc8b 	bl	800052c <__aeabi_f2d>
 800bc16:	4602      	mov	r2, r0
 800bc18:	460b      	mov	r3, r1
 800bc1a:	6879      	ldr	r1, [r7, #4]
 800bc1c:	e9c1 2362 	strd	r2, r3, [r1, #392]	; 0x188
            jlb_rx.logic_3.dist_error_norm_phys     = controller.dist_error_norm;
 800bc20:	687b      	ldr	r3, [r7, #4]
 800bc22:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800bc26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bc28:	4618      	mov	r0, r3
 800bc2a:	f7f4 fc7f 	bl	800052c <__aeabi_f2d>
 800bc2e:	4602      	mov	r2, r0
 800bc30:	460b      	mov	r3, r1
 800bc32:	6879      	ldr	r1, [r7, #4]
 800bc34:	e9c1 2366 	strd	r2, r3, [r1, #408]	; 0x198
            jlb_rx.logic_3.line_position_rear_phys  = controller.line_position_rear;
 800bc38:	687b      	ldr	r3, [r7, #4]
 800bc3a:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800bc3e:	68db      	ldr	r3, [r3, #12]
 800bc40:	4618      	mov	r0, r3
 800bc42:	f7f4 fc73 	bl	800052c <__aeabi_f2d>
 800bc46:	4602      	mov	r2, r0
 800bc48:	460b      	mov	r3, r1
 800bc4a:	6879      	ldr	r1, [r7, #4]
 800bc4c:	e9c1 236e 	strd	r2, r3, [r1, #440]	; 0x1b8
            jlb_rx.logic_3.line_position_front_phys = controller.line_position_front;
 800bc50:	687b      	ldr	r3, [r7, #4]
 800bc52:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800bc56:	689b      	ldr	r3, [r3, #8]
 800bc58:	4618      	mov	r0, r3
 800bc5a:	f7f4 fc67 	bl	800052c <__aeabi_f2d>
 800bc5e:	4602      	mov	r2, r0
 800bc60:	460b      	mov	r3, r1
 800bc62:	6879      	ldr	r1, [r7, #4]
 800bc64:	e9c1 236a 	strd	r2, r3, [r1, #424]	; 0x1a8
            jlb_rx.logic_3.at_cross_section         = as_state.at_cross_section;
 800bc68:	687b      	ldr	r3, [r7, #4]
 800bc6a:	f8d3 31d0 	ldr.w	r3, [r3, #464]	; 0x1d0
 800bc6e:	7c5b      	ldrb	r3, [r3, #17]
 800bc70:	461a      	mov	r2, r3
 800bc72:	687b      	ldr	r3, [r7, #4]
 800bc74:	f883 21c0 	strb.w	r2, [r3, #448]	; 0x1c0
            jlb_rx.logic_3.under_gate               = as_state.under_gate;
 800bc78:	687b      	ldr	r3, [r7, #4]
 800bc7a:	f8d3 31d0 	ldr.w	r3, [r3, #464]	; 0x1d0
 800bc7e:	7c1b      	ldrb	r3, [r3, #16]
 800bc80:	461a      	mov	r2, r3
 800bc82:	687b      	ldr	r3, [r7, #4]
 800bc84:	f883 21c1 	strb.w	r2, [r3, #449]	; 0x1c1

            char    data[logic_3_DLC + 2] = {0};
 800bc88:	2300      	movs	r3, #0
 800bc8a:	60fb      	str	r3, [r7, #12]
 800bc8c:	f107 0310 	add.w	r3, r7, #16
 800bc90:	2200      	movs	r2, #0
 800bc92:	601a      	str	r2, [r3, #0]
 800bc94:	809a      	strh	r2, [r3, #4]
            uint8_t ide                   = logic_3_IDE;
 800bc96:	2300      	movs	r3, #0
 800bc98:	72fb      	strb	r3, [r7, #11]
            uint8_t dlc                   = logic_3_DLC;
 800bc9a:	2308      	movs	r3, #8
 800bc9c:	72bb      	strb	r3, [r7, #10]
            data[0]                       = logic_3_CANID;
 800bc9e:	2323      	movs	r3, #35	; 0x23
 800bca0:	733b      	strb	r3, [r7, #12]
            data[1]                       = logic_3_DLC;
 800bca2:	2308      	movs	r3, #8
 800bca4:	737b      	strb	r3, [r7, #13]
            Pack_logic_3_jlb(&jlb_rx.logic_3, reinterpret_cast<uint8_t *>(data + 2), &dlc, &ide);
 800bca6:	687b      	ldr	r3, [r7, #4]
 800bca8:	f503 70c0 	add.w	r0, r3, #384	; 0x180
 800bcac:	f107 010c 	add.w	r1, r7, #12
 800bcb0:	3102      	adds	r1, #2
 800bcb2:	f107 030b 	add.w	r3, r7, #11
 800bcb6:	f107 020a 	add.w	r2, r7, #10
 800bcba:	f7f6 fa8d 	bl	80021d8 <Pack_logic_3_jlb>
            telemetry_data.insert(telemetry_data.end(), data, data + logic_3_DLC + 2);
 800bcbe:	687b      	ldr	r3, [r7, #4]
 800bcc0:	f503 74ee 	add.w	r4, r3, #476	; 0x1dc
 800bcc4:	687b      	ldr	r3, [r7, #4]
 800bcc6:	f503 73ee 	add.w	r3, r3, #476	; 0x1dc
 800bcca:	4618      	mov	r0, r3
 800bccc:	f001 f8cd 	bl	800ce6a <_ZNSt6vectorIcSaIcEE3endEv>
 800bcd0:	4603      	mov	r3, r0
 800bcd2:	61fb      	str	r3, [r7, #28]
 800bcd4:	f107 021c 	add.w	r2, r7, #28
 800bcd8:	f107 0318 	add.w	r3, r7, #24
 800bcdc:	4611      	mov	r1, r2
 800bcde:	4618      	mov	r0, r3
 800bce0:	f001 f965 	bl	800cfae <_ZN9__gnu_cxx17__normal_iteratorIPKcSt6vectorIcSaIcEEEC1IPcEERKNS0_IT_NS_11__enable_ifIXsrSt10__are_sameIS9_S8_E7__valueES5_E6__typeEEE>
 800bce4:	f107 030c 	add.w	r3, r7, #12
 800bce8:	330a      	adds	r3, #10
 800bcea:	f107 020c 	add.w	r2, r7, #12
 800bcee:	69b9      	ldr	r1, [r7, #24]
 800bcf0:	4620      	mov	r0, r4
 800bcf2:	f001 f96d 	bl	800cfd0 <_ZNSt6vectorIcSaIcEE6insertIPcvEEN9__gnu_cxx17__normal_iteratorIS3_S1_EENS5_IPKcS1_EET_SA_>
        }
 800bcf6:	bf00      	nop
 800bcf8:	3724      	adds	r7, #36	; 0x24
 800bcfa:	46bd      	mov	sp, r7
 800bcfc:	bd90      	pop	{r4, r7, pc}

0800bcfe <_ZN3jlb5LogicC1ENS_9DirectionEfff>:
namespace jlb
{
    class Logic
    {
    public:
        Logic(Direction direction_ = Direction::STRAIGHT, const float x_t_ = 0.0f, const float y_t_ = 0.0f, const float theta_t_ = 0.0f) : odometry(x_t_, y_t_, theta_t_), controller(direction_) {}
 800bcfe:	b5b0      	push	{r4, r5, r7, lr}
 800bd00:	b088      	sub	sp, #32
 800bd02:	af02      	add	r7, sp, #8
 800bd04:	6178      	str	r0, [r7, #20]
 800bd06:	6139      	str	r1, [r7, #16]
 800bd08:	ed87 0a03 	vstr	s0, [r7, #12]
 800bd0c:	edc7 0a02 	vstr	s1, [r7, #8]
 800bd10:	ed87 1a01 	vstr	s2, [r7, #4]
 800bd14:	697b      	ldr	r3, [r7, #20]
 800bd16:	ed97 1a01 	vldr	s2, [r7, #4]
 800bd1a:	edd7 0a02 	vldr	s1, [r7, #8]
 800bd1e:	ed97 0a03 	vldr	s0, [r7, #12]
 800bd22:	4618      	mov	r0, r3
 800bd24:	f7fc fee3 	bl	8008aee <_ZN3jlb8OdometryC1Efff>
 800bd28:	697b      	ldr	r3, [r7, #20]
 800bd2a:	3390      	adds	r3, #144	; 0x90
 800bd2c:	6939      	ldr	r1, [r7, #16]
 800bd2e:	4618      	mov	r0, r3
 800bd30:	f7f8 fdc2 	bl	80048b8 <_ZN3jlb10ControllerC1ENS_9DirectionE>
 800bd34:	697b      	ldr	r3, [r7, #20]
 800bd36:	f503 73ca 	add.w	r3, r3, #404	; 0x194
 800bd3a:	4618      	mov	r0, r3
 800bd3c:	f7f9 fc70 	bl	8005620 <_ZN3jlb5GraphC1Ev>
 800bd40:	697b      	ldr	r3, [r7, #20]
 800bd42:	f503 70d8 	add.w	r0, r3, #432	; 0x1b0
 800bd46:	6979      	ldr	r1, [r7, #20]
 800bd48:	697b      	ldr	r3, [r7, #20]
 800bd4a:	f103 0290 	add.w	r2, r3, #144	; 0x90
 800bd4e:	697b      	ldr	r3, [r7, #20]
 800bd50:	f503 73ca 	add.w	r3, r3, #404	; 0x194
 800bd54:	f7fd fb6b 	bl	800942e <_ZN3jlb7ASStateC1ERNS_8OdometryERNS_10ControllerERNS_5GraphE>
 800bd58:	697b      	ldr	r3, [r7, #20]
 800bd5a:	f503 70f4 	add.w	r0, r3, #488	; 0x1e8
 800bd5e:	6979      	ldr	r1, [r7, #20]
 800bd60:	697b      	ldr	r3, [r7, #20]
 800bd62:	f103 0490 	add.w	r4, r3, #144	; 0x90
 800bd66:	697b      	ldr	r3, [r7, #20]
 800bd68:	f503 75d8 	add.w	r5, r3, #432	; 0x1b0
 800bd6c:	697b      	ldr	r3, [r7, #20]
 800bd6e:	f503 73ca 	add.w	r3, r3, #404	; 0x194
 800bd72:	697a      	ldr	r2, [r7, #20]
 800bd74:	f502 72d0 	add.w	r2, r2, #416	; 0x1a0
 800bd78:	9201      	str	r2, [sp, #4]
 800bd7a:	9300      	str	r3, [sp, #0]
 800bd7c:	462b      	mov	r3, r5
 800bd7e:	4622      	mov	r2, r4
 800bd80:	f7fd fee8 	bl	8009b54 <_ZN3jlb12SignalSenderC1ERKNS_8OdometryERKNS_10ControllerERKNS_7ASStateERKNS_5GraphERK12Measurements>
 800bd84:	697b      	ldr	r3, [r7, #20]
 800bd86:	4618      	mov	r0, r3
 800bd88:	3718      	adds	r7, #24
 800bd8a:	46bd      	mov	sp, r7
 800bd8c:	bdb0      	pop	{r4, r5, r7, pc}

0800bd8e <_ZN3jlb5Logic6updateEv>:

        ControlSignal update()
 800bd8e:	b580      	push	{r7, lr}
 800bd90:	b090      	sub	sp, #64	; 0x40
 800bd92:	af00      	add	r7, sp, #0
 800bd94:	60f8      	str	r0, [r7, #12]
        {
            auto [vx, x, y, theta] = odometry.update_odom();
 800bd96:	68fb      	ldr	r3, [r7, #12]
 800bd98:	4618      	mov	r0, r3
 800bd9a:	f7fd f835 	bl	8008e08 <_ZN3jlb8Odometry11update_odomEv>
 800bd9e:	eeb0 6a40 	vmov.f32	s12, s0
 800bda2:	eef0 6a60 	vmov.f32	s13, s1
 800bda6:	eeb0 7a41 	vmov.f32	s14, s2
 800bdaa:	eef0 7a61 	vmov.f32	s15, s3
 800bdae:	ed87 6a0a 	vstr	s12, [r7, #40]	; 0x28
 800bdb2:	edc7 6a0b 	vstr	s13, [r7, #44]	; 0x2c
 800bdb6:	ed87 7a0c 	vstr	s14, [r7, #48]	; 0x30
 800bdba:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
            controller.set_current_velocity(vx);
 800bdbe:	68fb      	ldr	r3, [r7, #12]
 800bdc0:	3390      	adds	r3, #144	; 0x90
            auto [vx, x, y, theta] = odometry.update_odom();
 800bdc2:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
            controller.set_current_velocity(vx);
 800bdc6:	eeb0 0a67 	vmov.f32	s0, s15
 800bdca:	4618      	mov	r0, r3
 800bdcc:	f7f9 fb43 	bl	8005456 <_ZN3jlb10Controller20set_current_velocityEf>

            auto [mission, labyrinth_state, fast_state, reference_speed] = as_state.update();
 800bdd0:	68fb      	ldr	r3, [r7, #12]
 800bdd2:	f503 72d8 	add.w	r2, r3, #432	; 0x1b0
 800bdd6:	f107 0318 	add.w	r3, r7, #24
 800bdda:	4611      	mov	r1, r2
 800bddc:	4618      	mov	r0, r3
 800bdde:	f7fd fb93 	bl	8009508 <_ZN3jlb7ASState6updateEv>
            controller.set_reference_speed(reference_speed);
 800bde2:	68fb      	ldr	r3, [r7, #12]
 800bde4:	3390      	adds	r3, #144	; 0x90
            auto [mission, labyrinth_state, fast_state, reference_speed] = as_state.update();
 800bde6:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
            controller.set_reference_speed(reference_speed);
 800bdea:	eeb0 0a67 	vmov.f32	s0, s15
 800bdee:	4618      	mov	r0, r3
 800bdf0:	f7f9 fb56 	bl	80054a0 <_ZN3jlb10Controller19set_reference_speedEf>

            auto [target_angle, target_speed] = controller.update();
 800bdf4:	68fb      	ldr	r3, [r7, #12]
 800bdf6:	3390      	adds	r3, #144	; 0x90
 800bdf8:	4618      	mov	r0, r3
 800bdfa:	f7f9 fa91 	bl	8005320 <_ZN3jlb10Controller6updateEv>
 800bdfe:	eeb0 7a40 	vmov.f32	s14, s0
 800be02:	eef0 7a60 	vmov.f32	s15, s1
 800be06:	ed87 7a04 	vstr	s14, [r7, #16]
 800be0a:	edc7 7a05 	vstr	s15, [r7, #20]
 800be0e:	693b      	ldr	r3, [r7, #16]
            return ControlSignal{target_angle, target_speed};
 800be10:	63bb      	str	r3, [r7, #56]	; 0x38
            auto [target_angle, target_speed] = controller.update();
 800be12:	697b      	ldr	r3, [r7, #20]
            return ControlSignal{target_angle, target_speed};
 800be14:	63fb      	str	r3, [r7, #60]	; 0x3c
 800be16:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800be18:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800be1a:	ee07 2a10 	vmov	s14, r2
 800be1e:	ee07 3a90 	vmov	s15, r3
        }
 800be22:	eeb0 0a47 	vmov.f32	s0, s14
 800be26:	eef0 0a67 	vmov.f32	s1, s15
 800be2a:	3740      	adds	r7, #64	; 0x40
 800be2c:	46bd      	mov	sp, r7
 800be2e:	bd80      	pop	{r7, pc}

0800be30 <_ZN3jlb5Logic19set_detection_frontEPbSt6vectorIfSaIfEE>:

        void set_detection_front(bool *detection_front_, std::vector<float> line_positions_front_)
 800be30:	b590      	push	{r4, r7, lr}
 800be32:	b089      	sub	sp, #36	; 0x24
 800be34:	af00      	add	r7, sp, #0
 800be36:	60f8      	str	r0, [r7, #12]
 800be38:	60b9      	str	r1, [r7, #8]
 800be3a:	607a      	str	r2, [r7, #4]
        {
            as_state.current_number_of_lines = static_cast<uint8_t>(line_positions_front_.size());
 800be3c:	6878      	ldr	r0, [r7, #4]
 800be3e:	f7f7 fe52 	bl	8003ae6 <_ZNKSt6vectorIfSaIfEE4sizeEv>
 800be42:	4603      	mov	r3, r0
 800be44:	b2da      	uxtb	r2, r3
 800be46:	68fb      	ldr	r3, [r7, #12]
 800be48:	f883 21c3 	strb.w	r2, [r3, #451]	; 0x1c3
            controller.set_detection_front(detection_front_, line_positions_front_);
 800be4c:	68fb      	ldr	r3, [r7, #12]
 800be4e:	f103 0490 	add.w	r4, r3, #144	; 0x90
 800be52:	f107 0314 	add.w	r3, r7, #20
 800be56:	6879      	ldr	r1, [r7, #4]
 800be58:	4618      	mov	r0, r3
 800be5a:	f000 fbdb 	bl	800c614 <_ZNSt6vectorIfSaIfEEC1ERKS1_>
 800be5e:	f107 0314 	add.w	r3, r7, #20
 800be62:	461a      	mov	r2, r3
 800be64:	68b9      	ldr	r1, [r7, #8]
 800be66:	4620      	mov	r0, r4
 800be68:	f7f9 faaf 	bl	80053ca <_ZN3jlb10Controller19set_detection_frontEPbSt6vectorIfSaIfEE>
 800be6c:	f107 0314 	add.w	r3, r7, #20
 800be70:	4618      	mov	r0, r3
 800be72:	f7f7 fb99 	bl	80035a8 <_ZNSt6vectorIfSaIfEED1Ev>
        }
 800be76:	bf00      	nop
 800be78:	3724      	adds	r7, #36	; 0x24
 800be7a:	46bd      	mov	sp, r7
 800be7c:	bd90      	pop	{r4, r7, pc}

0800be7e <_ZN3jlb5Logic18set_detection_rearEPbSt6vectorIfSaIfEE>:
        void set_detection_rear(bool *detection_rear_, std::vector<float> line_positions_rear_) { controller.set_detection_rear(detection_rear_, line_positions_rear_); }
 800be7e:	b590      	push	{r4, r7, lr}
 800be80:	b089      	sub	sp, #36	; 0x24
 800be82:	af00      	add	r7, sp, #0
 800be84:	60f8      	str	r0, [r7, #12]
 800be86:	60b9      	str	r1, [r7, #8]
 800be88:	607a      	str	r2, [r7, #4]
 800be8a:	68fb      	ldr	r3, [r7, #12]
 800be8c:	f103 0490 	add.w	r4, r3, #144	; 0x90
 800be90:	f107 0314 	add.w	r3, r7, #20
 800be94:	6879      	ldr	r1, [r7, #4]
 800be96:	4618      	mov	r0, r3
 800be98:	f000 fbbc 	bl	800c614 <_ZNSt6vectorIfSaIfEEC1ERKS1_>
 800be9c:	f107 0314 	add.w	r3, r7, #20
 800bea0:	461a      	mov	r2, r3
 800bea2:	68b9      	ldr	r1, [r7, #8]
 800bea4:	4620      	mov	r0, r4
 800bea6:	f7f9 fab3 	bl	8005410 <_ZN3jlb10Controller18set_detection_rearEPbSt6vectorIfSaIfEE>
 800beaa:	f107 0314 	add.w	r3, r7, #20
 800beae:	4618      	mov	r0, r3
 800beb0:	f7f7 fb7a 	bl	80035a8 <_ZNSt6vectorIfSaIfEED1Ev>
 800beb4:	bf00      	nop
 800beb6:	3724      	adds	r7, #36	; 0x24
 800beb8:	46bd      	mov	sp, r7
 800beba:	bd90      	pop	{r4, r7, pc}

0800bebc <_ZN3jlb5Logic12imu_callbackEffffff>:
        void set_under_gate(const bool under_gate_) { as_state.under_gate = under_gate_; }
        void set_at_cross_section(const bool at_cross_section_) { as_state.at_cross_section = at_cross_section_; }
        void imu_callback(const float ang_vel_x, const float ang_vel_y, const float ang_vel_z, const float lin_acc_x, const float lin_acc_y, const float lin_acc_z) { odometry.imu_callback(ang_vel_x, ang_vel_y, ang_vel_z, lin_acc_x, lin_acc_y, lin_acc_z); }
 800bebc:	b580      	push	{r7, lr}
 800bebe:	b088      	sub	sp, #32
 800bec0:	af00      	add	r7, sp, #0
 800bec2:	61f8      	str	r0, [r7, #28]
 800bec4:	ed87 0a06 	vstr	s0, [r7, #24]
 800bec8:	edc7 0a05 	vstr	s1, [r7, #20]
 800becc:	ed87 1a04 	vstr	s2, [r7, #16]
 800bed0:	edc7 1a03 	vstr	s3, [r7, #12]
 800bed4:	ed87 2a02 	vstr	s4, [r7, #8]
 800bed8:	edc7 2a01 	vstr	s5, [r7, #4]
 800bedc:	69fb      	ldr	r3, [r7, #28]
 800bede:	edd7 2a01 	vldr	s5, [r7, #4]
 800bee2:	ed97 2a02 	vldr	s4, [r7, #8]
 800bee6:	edd7 1a03 	vldr	s3, [r7, #12]
 800beea:	ed97 1a04 	vldr	s2, [r7, #16]
 800beee:	edd7 0a05 	vldr	s1, [r7, #20]
 800bef2:	ed97 0a06 	vldr	s0, [r7, #24]
 800bef6:	4618      	mov	r0, r3
 800bef8:	f7fc fefa 	bl	8008cf0 <_ZN3jlb8Odometry12imu_callbackEffffff>
 800befc:	bf00      	nop
 800befe:	3720      	adds	r7, #32
 800bf00:	46bd      	mov	sp, r7
 800bf02:	bd80      	pop	{r7, pc}

0800bf04 <_ZN3jlb5Logic12rpm_callbackEf>:
        void rpm_callback(const float motor_rpm_) { odometry.rpm_callback(motor_rpm_); }
 800bf04:	b580      	push	{r7, lr}
 800bf06:	b082      	sub	sp, #8
 800bf08:	af00      	add	r7, sp, #0
 800bf0a:	6078      	str	r0, [r7, #4]
 800bf0c:	ed87 0a00 	vstr	s0, [r7]
 800bf10:	687b      	ldr	r3, [r7, #4]
 800bf12:	ed97 0a00 	vldr	s0, [r7]
 800bf16:	4618      	mov	r0, r3
 800bf18:	f7fc fe5a 	bl	8008bd0 <_ZN3jlb8Odometry12rpm_callbackEf>
 800bf1c:	bf00      	nop
 800bf1e:	3708      	adds	r7, #8
 800bf20:	46bd      	mov	sp, r7
 800bf22:	bd80      	pop	{r7, pc}

0800bf24 <_ZN3jlb5Logic16set_object_rangeEf>:
        void set_object_range(const float object_range_) { controller.set_object_range(object_range_); }
 800bf24:	b580      	push	{r7, lr}
 800bf26:	b082      	sub	sp, #8
 800bf28:	af00      	add	r7, sp, #0
 800bf2a:	6078      	str	r0, [r7, #4]
 800bf2c:	ed87 0a00 	vstr	s0, [r7]
 800bf30:	687b      	ldr	r3, [r7, #4]
 800bf32:	3390      	adds	r3, #144	; 0x90
 800bf34:	ed97 0a00 	vldr	s0, [r7]
 800bf38:	4618      	mov	r0, r3
 800bf3a:	f7f9 fa37 	bl	80053ac <_ZN3jlb10Controller16set_object_rangeEf>
 800bf3e:	bf00      	nop
 800bf40:	3708      	adds	r7, #8
 800bf42:	46bd      	mov	sp, r7
 800bf44:	bd80      	pop	{r7, pc}

0800bf46 <_ZN3jlb5Logic10set_statesENS_14CompositeStateE>:
        void set_states(const CompositeState state_) { as_state.set_states(state_); }
 800bf46:	b084      	sub	sp, #16
 800bf48:	b580      	push	{r7, lr}
 800bf4a:	b084      	sub	sp, #16
 800bf4c:	af02      	add	r7, sp, #8
 800bf4e:	6078      	str	r0, [r7, #4]
 800bf50:	f107 0014 	add.w	r0, r7, #20
 800bf54:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 800bf58:	687b      	ldr	r3, [r7, #4]
 800bf5a:	f503 70d8 	add.w	r0, r3, #432	; 0x1b0
 800bf5e:	6a3b      	ldr	r3, [r7, #32]
 800bf60:	9300      	str	r3, [sp, #0]
 800bf62:	f107 0314 	add.w	r3, r7, #20
 800bf66:	cb0e      	ldmia	r3, {r1, r2, r3}
 800bf68:	f7fd faaa 	bl	80094c0 <_ZN3jlb7ASState10set_statesENS_14CompositeStateE>
 800bf6c:	bf00      	nop
 800bf6e:	3708      	adds	r7, #8
 800bf70:	46bd      	mov	sp, r7
 800bf72:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800bf76:	b004      	add	sp, #16
 800bf78:	4770      	bx	lr

0800bf7a <_ZN3jlb5Logic14send_telemetryEv>:
        void send_telemetry() { signal_sender.send_telemetry(); }
 800bf7a:	b580      	push	{r7, lr}
 800bf7c:	b082      	sub	sp, #8
 800bf7e:	af00      	add	r7, sp, #0
 800bf80:	6078      	str	r0, [r7, #4]
 800bf82:	687b      	ldr	r3, [r7, #4]
 800bf84:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800bf88:	4618      	mov	r0, r3
 800bf8a:	f7fd fe18 	bl	8009bbe <_ZN3jlb12SignalSender14send_telemetryEv>
 800bf8e:	bf00      	nop
 800bf90:	3708      	adds	r7, #8
 800bf92:	46bd      	mov	sp, r7
 800bf94:	bd80      	pop	{r7, pc}

0800bf96 <_ZN3jlb5Logic16set_measurementsERK12Measurements>:
        void set_measurements(const Measurements &measurements_) { measurements = measurements_; }
 800bf96:	b490      	push	{r4, r7}
 800bf98:	b082      	sub	sp, #8
 800bf9a:	af00      	add	r7, sp, #0
 800bf9c:	6078      	str	r0, [r7, #4]
 800bf9e:	6039      	str	r1, [r7, #0]
 800bfa0:	687b      	ldr	r3, [r7, #4]
 800bfa2:	683a      	ldr	r2, [r7, #0]
 800bfa4:	f503 74d0 	add.w	r4, r3, #416	; 0x1a0
 800bfa8:	4613      	mov	r3, r2
 800bfaa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800bfac:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800bfb0:	bf00      	nop
 800bfb2:	3708      	adds	r7, #8
 800bfb4:	46bd      	mov	sp, r7
 800bfb6:	bc90      	pop	{r4, r7}
 800bfb8:	4770      	bx	lr

0800bfba <_ZN3jlb5Logic12get_odometryEv>:
        Odom get_odometry() { return {odometry.vx_t, odometry.x_t, odometry.y_t, odometry.theta_t}; }
 800bfba:	b480      	push	{r7}
 800bfbc:	b08b      	sub	sp, #44	; 0x2c
 800bfbe:	af00      	add	r7, sp, #0
 800bfc0:	6178      	str	r0, [r7, #20]
 800bfc2:	697b      	ldr	r3, [r7, #20]
 800bfc4:	681b      	ldr	r3, [r3, #0]
 800bfc6:	61bb      	str	r3, [r7, #24]
 800bfc8:	697b      	ldr	r3, [r7, #20]
 800bfca:	689b      	ldr	r3, [r3, #8]
 800bfcc:	61fb      	str	r3, [r7, #28]
 800bfce:	697b      	ldr	r3, [r7, #20]
 800bfd0:	68db      	ldr	r3, [r3, #12]
 800bfd2:	623b      	str	r3, [r7, #32]
 800bfd4:	697b      	ldr	r3, [r7, #20]
 800bfd6:	691b      	ldr	r3, [r3, #16]
 800bfd8:	627b      	str	r3, [r7, #36]	; 0x24
 800bfda:	69b8      	ldr	r0, [r7, #24]
 800bfdc:	69f9      	ldr	r1, [r7, #28]
 800bfde:	6a3a      	ldr	r2, [r7, #32]
 800bfe0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bfe2:	ee06 0a10 	vmov	s12, r0
 800bfe6:	ee06 1a90 	vmov	s13, r1
 800bfea:	ee07 2a10 	vmov	s14, r2
 800bfee:	ee07 3a90 	vmov	s15, r3
 800bff2:	eeb0 0a46 	vmov.f32	s0, s12
 800bff6:	eef0 0a66 	vmov.f32	s1, s13
 800bffa:	eeb0 1a47 	vmov.f32	s2, s14
 800bffe:	eef0 1a67 	vmov.f32	s3, s15
 800c002:	372c      	adds	r7, #44	; 0x2c
 800c004:	46bd      	mov	sp, r7
 800c006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c00a:	4770      	bx	lr

0800c00c <_Z19RegistrateUserTasksv>:
{ .name = "LoggerTask", .stack_size = 128 * 5, .priority = (osPriority_t) osPriorityHigh };



void RegistrateUserTasks()
{
 800c00c:	b580      	push	{r7, lr}
 800c00e:	af00      	add	r7, sp, #0
	adcTaskHandle = osThreadNew(ADCTask, NULL, &adcTask_attributes);
 800c010:	4a0c      	ldr	r2, [pc, #48]	; (800c044 <_Z19RegistrateUserTasksv+0x38>)
 800c012:	2100      	movs	r1, #0
 800c014:	480c      	ldr	r0, [pc, #48]	; (800c048 <_Z19RegistrateUserTasksv+0x3c>)
 800c016:	f012 fdad 	bl	801eb74 <osThreadNew>
 800c01a:	4603      	mov	r3, r0
 800c01c:	4a0b      	ldr	r2, [pc, #44]	; (800c04c <_Z19RegistrateUserTasksv+0x40>)
 800c01e:	6013      	str	r3, [r2, #0]
	mainTaskHandle = osThreadNew(MainTask, NULL, &mainTask_attributes);
 800c020:	4a0b      	ldr	r2, [pc, #44]	; (800c050 <_Z19RegistrateUserTasksv+0x44>)
 800c022:	2100      	movs	r1, #0
 800c024:	480b      	ldr	r0, [pc, #44]	; (800c054 <_Z19RegistrateUserTasksv+0x48>)
 800c026:	f012 fda5 	bl	801eb74 <osThreadNew>
 800c02a:	4603      	mov	r3, r0
 800c02c:	4a0a      	ldr	r2, [pc, #40]	; (800c058 <_Z19RegistrateUserTasksv+0x4c>)
 800c02e:	6013      	str	r3, [r2, #0]
	encoderTaskHandle = osThreadNew(Encoder_Task, NULL, &encoderTask_attributes);
 800c030:	4a0a      	ldr	r2, [pc, #40]	; (800c05c <_Z19RegistrateUserTasksv+0x50>)
 800c032:	2100      	movs	r1, #0
 800c034:	480a      	ldr	r0, [pc, #40]	; (800c060 <_Z19RegistrateUserTasksv+0x54>)
 800c036:	f012 fd9d 	bl	801eb74 <osThreadNew>
 800c03a:	4603      	mov	r3, r0
 800c03c:	4a09      	ldr	r2, [pc, #36]	; (800c064 <_Z19RegistrateUserTasksv+0x58>)
 800c03e:	6013      	str	r3, [r2, #0]

}
 800c040:	bf00      	nop
 800c042:	bd80      	pop	{r7, pc}
 800c044:	08025efc 	.word	0x08025efc
 800c048:	0800c069 	.word	0x0800c069
 800c04c:	200006e8 	.word	0x200006e8
 800c050:	08025f20 	.word	0x08025f20
 800c054:	0800c099 	.word	0x0800c099
 800c058:	200006ec 	.word	0x200006ec
 800c05c:	08025f44 	.word	0x08025f44
 800c060:	080027a9 	.word	0x080027a9
 800c064:	200006f0 	.word	0x200006f0

0800c068 <_Z7ADCTaskPv>:

void ADCTask(void *argument)
{
 800c068:	b580      	push	{r7, lr}
 800c06a:	b084      	sub	sp, #16
 800c06c:	af00      	add	r7, sp, #0
 800c06e:	6078      	str	r0, [r7, #4]
	TickType_t xLastWakeTime;
	xLastWakeTime = xTaskGetTickCount();
 800c070:	f013 fe16 	bl	801fca0 <xTaskGetTickCount>
 800c074:	4603      	mov	r3, r0
 800c076:	60fb      	str	r3, [r7, #12]
	for (;;)
	{
		HAL_ADC_Start_DMA(&hadc1, adc_values_raw, 8u);
 800c078:	2208      	movs	r2, #8
 800c07a:	4905      	ldr	r1, [pc, #20]	; (800c090 <_Z7ADCTaskPv+0x28>)
 800c07c:	4805      	ldr	r0, [pc, #20]	; (800c094 <_Z7ADCTaskPv+0x2c>)
 800c07e:	f008 fdc9 	bl	8014c14 <HAL_ADC_Start_DMA>
		vTaskDelayUntil(&xLastWakeTime, 20u);
 800c082:	f107 030c 	add.w	r3, r7, #12
 800c086:	2114      	movs	r1, #20
 800c088:	4618      	mov	r0, r3
 800c08a:	f013 fc95 	bl	801f9b8 <vTaskDelayUntil>
		HAL_ADC_Start_DMA(&hadc1, adc_values_raw, 8u);
 800c08e:	e7f3      	b.n	800c078 <_Z7ADCTaskPv+0x10>
 800c090:	2000012c 	.word	0x2000012c
 800c094:	200006f4 	.word	0x200006f4

0800c098 <_Z8MainTaskPv>:
	}
}

void MainTask(void * argument)
{
 800c098:	b590      	push	{r4, r7, lr}
 800c09a:	b09d      	sub	sp, #116	; 0x74
 800c09c:	af02      	add	r7, sp, #8
 800c09e:	6078      	str	r0, [r7, #4]
	TickType_t xLastWakeTime;
	xLastWakeTime = xTaskGetTickCount();
 800c0a0:	f013 fdfe 	bl	801fca0 <xTaskGetTickCount>
 800c0a4:	4603      	mov	r3, r0
 800c0a6:	63fb      	str	r3, [r7, #60]	; 0x3c

	logic.set_states({jlb::FastState::OUT_ACCEL_ZONE});
 800c0a8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800c0ac:	2104      	movs	r1, #4
 800c0ae:	4618      	mov	r0, r3
 800c0b0:	f7fd f988 	bl	80093c4 <_ZN3jlb14CompositeStateC1ENS_9FastStateE>
 800c0b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c0b6:	9300      	str	r3, [sp, #0]
 800c0b8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800c0bc:	cb0e      	ldmia	r3, {r1, r2, r3}
 800c0be:	488a      	ldr	r0, [pc, #552]	; (800c2e8 <_Z8MainTaskPv+0x250>)
 800c0c0:	f7ff ff41 	bl	800bf46 <_ZN3jlb5Logic10set_statesENS_14CompositeStateE>
	for (;;)
	{
		lv_battery_voltage = adc_values.lv_batt_voltage_raw / 4096.0f * 3.3f * LV_BATERY_VOLTAGE_DIVIDER * 1.04447;
 800c0c4:	4b89      	ldr	r3, [pc, #548]	; (800c2ec <_Z8MainTaskPv+0x254>)
 800c0c6:	899b      	ldrh	r3, [r3, #12]
 800c0c8:	ee07 3a90 	vmov	s15, r3
 800c0cc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800c0d0:	eddf 6a87 	vldr	s13, [pc, #540]	; 800c2f0 <_Z8MainTaskPv+0x258>
 800c0d4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800c0d8:	ed9f 7a86 	vldr	s14, [pc, #536]	; 800c2f4 <_Z8MainTaskPv+0x25c>
 800c0dc:	ee67 7a87 	vmul.f32	s15, s15, s14
 800c0e0:	ed9f 7a85 	vldr	s14, [pc, #532]	; 800c2f8 <_Z8MainTaskPv+0x260>
 800c0e4:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800c0e8:	ee16 0a90 	vmov	r0, s13
 800c0ec:	f7f4 fa1e 	bl	800052c <__aeabi_f2d>
 800c0f0:	a37b      	add	r3, pc, #492	; (adr r3, 800c2e0 <_Z8MainTaskPv+0x248>)
 800c0f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0f6:	f7f4 fa71 	bl	80005dc <__aeabi_dmul>
 800c0fa:	4602      	mov	r2, r0
 800c0fc:	460b      	mov	r3, r1
 800c0fe:	4610      	mov	r0, r2
 800c100:	4619      	mov	r1, r3
 800c102:	f7f4 fd63 	bl	8000bcc <__aeabi_d2f>
 800c106:	4603      	mov	r3, r0
 800c108:	4a7c      	ldr	r2, [pc, #496]	; (800c2fc <_Z8MainTaskPv+0x264>)
 800c10a:	6013      	str	r3, [r2, #0]
		LineSensorTask();
 800c10c:	f7f6 fe82 	bl	8002e14 <_Z14LineSensorTaskv>
		IMU_Task();
 800c110:	f7f6 fc0c 	bl	800292c <_Z8IMU_Taskv>
		DistanceSensorTask();
 800c114:	f7f6 f976 	bl	8002404 <_Z18DistanceSensorTaskv>
		wheel_rpm = CalculateRPM();
 800c118:	f7f6 fb98 	bl	800284c <_Z12CalculateRPMv>
 800c11c:	eef0 7a40 	vmov.f32	s15, s0
 800c120:	4b77      	ldr	r3, [pc, #476]	; (800c300 <_Z8MainTaskPv+0x268>)
 800c122:	edc3 7a00 	vstr	s15, [r3]


		auto [derivative, integral, prev_error] = motorcontrol_pid.get_debug();
 800c126:	4877      	ldr	r0, [pc, #476]	; (800c304 <_Z8MainTaskPv+0x26c>)
 800c128:	f7f8 fba4 	bl	8004874 <_ZN3PID9get_debugEv>
 800c12c:	eef0 6a40 	vmov.f32	s13, s0
 800c130:	eeb0 7a60 	vmov.f32	s14, s1
 800c134:	eef0 7a41 	vmov.f32	s15, s2
 800c138:	edc7 6a0c 	vstr	s13, [r7, #48]	; 0x30
 800c13c:	ed87 7a0d 	vstr	s14, [r7, #52]	; 0x34
 800c140:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38

		logic.imu_callback(lv_battery_voltage,motorcontrol.battery_voltage,imu.yaw,derivative, integral, prev_error);
 800c144:	4b6d      	ldr	r3, [pc, #436]	; (800c2fc <_Z8MainTaskPv+0x264>)
 800c146:	edd3 7a00 	vldr	s15, [r3]
 800c14a:	4b6f      	ldr	r3, [pc, #444]	; (800c308 <_Z8MainTaskPv+0x270>)
 800c14c:	ed93 7a00 	vldr	s14, [r3]
 800c150:	4b6e      	ldr	r3, [pc, #440]	; (800c30c <_Z8MainTaskPv+0x274>)
 800c152:	edd3 6a03 	vldr	s13, [r3, #12]
		auto [derivative, integral, prev_error] = motorcontrol_pid.get_debug();
 800c156:	ed97 6a0c 	vldr	s12, [r7, #48]	; 0x30
 800c15a:	edd7 5a0d 	vldr	s11, [r7, #52]	; 0x34
 800c15e:	ed97 5a0e 	vldr	s10, [r7, #56]	; 0x38
		logic.imu_callback(lv_battery_voltage,motorcontrol.battery_voltage,imu.yaw,derivative, integral, prev_error);
 800c162:	eef0 2a45 	vmov.f32	s5, s10
 800c166:	eeb0 2a65 	vmov.f32	s4, s11
 800c16a:	eef0 1a46 	vmov.f32	s3, s12
 800c16e:	eeb0 1a66 	vmov.f32	s2, s13
 800c172:	eef0 0a47 	vmov.f32	s1, s14
 800c176:	eeb0 0a67 	vmov.f32	s0, s15
 800c17a:	485b      	ldr	r0, [pc, #364]	; (800c2e8 <_Z8MainTaskPv+0x250>)
 800c17c:	f7ff fe9e 	bl	800bebc <_ZN3jlb5Logic12imu_callbackEffffff>
		logic.rpm_callback(wheel_rpm);
 800c180:	4b5f      	ldr	r3, [pc, #380]	; (800c300 <_Z8MainTaskPv+0x268>)
 800c182:	edd3 7a00 	vldr	s15, [r3]
 800c186:	eeb0 0a67 	vmov.f32	s0, s15
 800c18a:	4857      	ldr	r0, [pc, #348]	; (800c2e8 <_Z8MainTaskPv+0x250>)
 800c18c:	f7ff feba 	bl	800bf04 <_ZN3jlb5Logic12rpm_callbackEf>

		std::reverse(std::begin(ls_data.front_detection), std::end(ls_data.front_detection));
 800c190:	485f      	ldr	r0, [pc, #380]	; (800c310 <_Z8MainTaskPv+0x278>)
 800c192:	f000 f9fc 	bl	800c58e <_ZSt5beginIbLj32EEPT_RAT0__S0_>
 800c196:	4604      	mov	r4, r0
 800c198:	485d      	ldr	r0, [pc, #372]	; (800c310 <_Z8MainTaskPv+0x278>)
 800c19a:	f000 fa03 	bl	800c5a4 <_ZSt3endIbLj32EEPT_RAT0__S0_>
 800c19e:	4603      	mov	r3, r0
 800c1a0:	4619      	mov	r1, r3
 800c1a2:	4620      	mov	r0, r4
 800c1a4:	f000 ff4c 	bl	800d040 <_ZSt7reverseIPbEvT_S1_>
		logic.set_detection_front( ls_data.front_detection, ls_data.front);
 800c1a8:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800c1ac:	4959      	ldr	r1, [pc, #356]	; (800c314 <_Z8MainTaskPv+0x27c>)
 800c1ae:	4618      	mov	r0, r3
 800c1b0:	f000 fa30 	bl	800c614 <_ZNSt6vectorIfSaIfEEC1ERKS1_>
 800c1b4:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800c1b8:	461a      	mov	r2, r3
 800c1ba:	4955      	ldr	r1, [pc, #340]	; (800c310 <_Z8MainTaskPv+0x278>)
 800c1bc:	484a      	ldr	r0, [pc, #296]	; (800c2e8 <_Z8MainTaskPv+0x250>)
 800c1be:	f7ff fe37 	bl	800be30 <_ZN3jlb5Logic19set_detection_frontEPbSt6vectorIfSaIfEE>
 800c1c2:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800c1c6:	4618      	mov	r0, r3
 800c1c8:	f7f7 f9ee 	bl	80035a8 <_ZNSt6vectorIfSaIfEED1Ev>
		logic.set_detection_rear(ls_data.rear_detection, ls_data.rear);
 800c1cc:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800c1d0:	4951      	ldr	r1, [pc, #324]	; (800c318 <_Z8MainTaskPv+0x280>)
 800c1d2:	4618      	mov	r0, r3
 800c1d4:	f000 fa1e 	bl	800c614 <_ZNSt6vectorIfSaIfEEC1ERKS1_>
 800c1d8:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800c1dc:	461a      	mov	r2, r3
 800c1de:	494f      	ldr	r1, [pc, #316]	; (800c31c <_Z8MainTaskPv+0x284>)
 800c1e0:	4841      	ldr	r0, [pc, #260]	; (800c2e8 <_Z8MainTaskPv+0x250>)
 800c1e2:	f7ff fe4c 	bl	800be7e <_ZN3jlb5Logic18set_detection_rearEPbSt6vectorIfSaIfEE>
 800c1e6:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800c1ea:	4618      	mov	r0, r3
 800c1ec:	f7f7 f9dc 	bl	80035a8 <_ZNSt6vectorIfSaIfEED1Ev>
		logic.set_object_range(distance_sensor.distance);
 800c1f0:	4b4b      	ldr	r3, [pc, #300]	; (800c320 <_Z8MainTaskPv+0x288>)
 800c1f2:	edd3 7a08 	vldr	s15, [r3, #32]
 800c1f6:	eeb0 0a67 	vmov.f32	s0, s15
 800c1fa:	483b      	ldr	r0, [pc, #236]	; (800c2e8 <_Z8MainTaskPv+0x250>)
 800c1fc:	f7ff fe92 	bl	800bf24 <_ZN3jlb5Logic16set_object_rangeEf>

		auto [target_angle, target_speed] = logic.update();
 800c200:	4839      	ldr	r0, [pc, #228]	; (800c2e8 <_Z8MainTaskPv+0x250>)
 800c202:	f7ff fdc4 	bl	800bd8e <_ZN3jlb5Logic6updateEv>
 800c206:	eeb0 7a40 	vmov.f32	s14, s0
 800c20a:	eef0 7a60 	vmov.f32	s15, s1
 800c20e:	ed87 7a0a 	vstr	s14, [r7, #40]	; 0x28
 800c212:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
		auto [vx_t, x_t, y_t, theta_t] = logic.get_odometry();
 800c216:	4834      	ldr	r0, [pc, #208]	; (800c2e8 <_Z8MainTaskPv+0x250>)
 800c218:	f7ff fecf 	bl	800bfba <_ZN3jlb5Logic12get_odometryEv>
 800c21c:	eeb0 6a40 	vmov.f32	s12, s0
 800c220:	eef0 6a60 	vmov.f32	s13, s1
 800c224:	eeb0 7a41 	vmov.f32	s14, s2
 800c228:	eef0 7a61 	vmov.f32	s15, s3
 800c22c:	ed87 6a06 	vstr	s12, [r7, #24]
 800c230:	edc7 6a07 	vstr	s13, [r7, #28]
 800c234:	ed87 7a08 	vstr	s14, [r7, #32]
 800c238:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
 800c23c:	69bb      	ldr	r3, [r7, #24]

		motorcontrol.actual_velocity = vx_t;
 800c23e:	4a32      	ldr	r2, [pc, #200]	; (800c308 <_Z8MainTaskPv+0x270>)
 800c240:	6093      	str	r3, [r2, #8]
		auto [target_angle, target_speed] = logic.update();
 800c242:	6afb      	ldr	r3, [r7, #44]	; 0x2c
		motorcontrol.target_velocity = target_speed;
 800c244:	4a30      	ldr	r2, [pc, #192]	; (800c308 <_Z8MainTaskPv+0x270>)
 800c246:	60d3      	str	r3, [r2, #12]
		MotorControlTask();
 800c248:	f7f7 ff90 	bl	800416c <_Z16MotorControlTaskv>

		Measurements meas;
		meas.duty_cycle = motorcontrol.duty_cycle;
 800c24c:	4b2e      	ldr	r3, [pc, #184]	; (800c308 <_Z8MainTaskPv+0x270>)
 800c24e:	691b      	ldr	r3, [r3, #16]
 800c250:	60bb      	str	r3, [r7, #8]
		meas.motor_current = motorcontrol.motor_current;
 800c252:	4b2d      	ldr	r3, [pc, #180]	; (800c308 <_Z8MainTaskPv+0x270>)
 800c254:	685b      	ldr	r3, [r3, #4]
 800c256:	60fb      	str	r3, [r7, #12]
		meas.object_range = distance_sensor.distance;
 800c258:	4b31      	ldr	r3, [pc, #196]	; (800c320 <_Z8MainTaskPv+0x288>)
 800c25a:	6a1b      	ldr	r3, [r3, #32]
 800c25c:	613b      	str	r3, [r7, #16]
		meas.wheel_rpm = wheel_rpm;
 800c25e:	4b28      	ldr	r3, [pc, #160]	; (800c300 <_Z8MainTaskPv+0x268>)
 800c260:	681b      	ldr	r3, [r3, #0]
 800c262:	617b      	str	r3, [r7, #20]
		logic.set_measurements(meas);
 800c264:	f107 0308 	add.w	r3, r7, #8
 800c268:	4619      	mov	r1, r3
 800c26a:	481f      	ldr	r0, [pc, #124]	; (800c2e8 <_Z8MainTaskPv+0x250>)
 800c26c:	f7ff fe93 	bl	800bf96 <_ZN3jlb5Logic16set_measurementsERK12Measurements>
		auto [target_angle, target_speed] = logic.update();
 800c270:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28

		SetSteeringAngle(target_angle * -180.0f / 3.14f);
 800c274:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 800c324 <_Z8MainTaskPv+0x28c>
 800c278:	ee67 7a87 	vmul.f32	s15, s15, s14
 800c27c:	eddf 6a2a 	vldr	s13, [pc, #168]	; 800c328 <_Z8MainTaskPv+0x290>
 800c280:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800c284:	eeb0 0a47 	vmov.f32	s0, s14
 800c288:	f7f8 f984 	bl	8004594 <_Z16SetSteeringAnglef>

		logic.send_telemetry();
 800c28c:	4816      	ldr	r0, [pc, #88]	; (800c2e8 <_Z8MainTaskPv+0x250>)
 800c28e:	f7ff fe74 	bl	800bf7a <_ZN3jlb5Logic14send_telemetryEv>

		// If flood message arrives reset counter and set flood to active
		if((flood_arrived == true) && (flood_counter > 0))
 800c292:	4b26      	ldr	r3, [pc, #152]	; (800c32c <_Z8MainTaskPv+0x294>)
 800c294:	781b      	ldrb	r3, [r3, #0]
 800c296:	2b01      	cmp	r3, #1
 800c298:	d10d      	bne.n	800c2b6 <_Z8MainTaskPv+0x21e>
 800c29a:	4b25      	ldr	r3, [pc, #148]	; (800c330 <_Z8MainTaskPv+0x298>)
 800c29c:	781b      	ldrb	r3, [r3, #0]
 800c29e:	2b00      	cmp	r3, #0
 800c2a0:	d009      	beq.n	800c2b6 <_Z8MainTaskPv+0x21e>
		{
			flood_active = true;
 800c2a2:	4b24      	ldr	r3, [pc, #144]	; (800c334 <_Z8MainTaskPv+0x29c>)
 800c2a4:	2201      	movs	r2, #1
 800c2a6:	701a      	strb	r2, [r3, #0]
			flood_arrived = false;
 800c2a8:	4b20      	ldr	r3, [pc, #128]	; (800c32c <_Z8MainTaskPv+0x294>)
 800c2aa:	2200      	movs	r2, #0
 800c2ac:	701a      	strb	r2, [r3, #0]
			flood_counter = 40u;
 800c2ae:	4b20      	ldr	r3, [pc, #128]	; (800c330 <_Z8MainTaskPv+0x298>)
 800c2b0:	2228      	movs	r2, #40	; 0x28
 800c2b2:	701a      	strb	r2, [r3, #0]
 800c2b4:	e005      	b.n	800c2c2 <_Z8MainTaskPv+0x22a>
		}
		//If flood message was not sent decrement counter
		else
		{
			flood_counter--;
 800c2b6:	4b1e      	ldr	r3, [pc, #120]	; (800c330 <_Z8MainTaskPv+0x298>)
 800c2b8:	781b      	ldrb	r3, [r3, #0]
 800c2ba:	3b01      	subs	r3, #1
 800c2bc:	b2da      	uxtb	r2, r3
 800c2be:	4b1c      	ldr	r3, [pc, #112]	; (800c330 <_Z8MainTaskPv+0x298>)
 800c2c0:	701a      	strb	r2, [r3, #0]
		}
		//If decrement reaches zero flood is no longer active
		if(flood_counter == 0)
 800c2c2:	4b1b      	ldr	r3, [pc, #108]	; (800c330 <_Z8MainTaskPv+0x298>)
 800c2c4:	781b      	ldrb	r3, [r3, #0]
 800c2c6:	2b00      	cmp	r3, #0
 800c2c8:	d102      	bne.n	800c2d0 <_Z8MainTaskPv+0x238>
		{
			flood_active = false;
 800c2ca:	4b1a      	ldr	r3, [pc, #104]	; (800c334 <_Z8MainTaskPv+0x29c>)
 800c2cc:	2200      	movs	r2, #0
 800c2ce:	701a      	strb	r2, [r3, #0]
		}

		//vTaskSuspend(static_cast<TaskHandle_t>(mainTaskHandle));
		vTaskDelayUntil(&xLastWakeTime, 20u);
 800c2d0:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800c2d4:	2114      	movs	r1, #20
 800c2d6:	4618      	mov	r0, r3
 800c2d8:	f013 fb6e 	bl	801f9b8 <vTaskDelayUntil>
	}
 800c2dc:	e6f2      	b.n	800c0c4 <_Z8MainTaskPv+0x2c>
 800c2de:	bf00      	nop
 800c2e0:	2cba732e 	.word	0x2cba732e
 800c2e4:	3ff0b626 	.word	0x3ff0b626
 800c2e8:	20000318 	.word	0x20000318
 800c2ec:	2000014c 	.word	0x2000014c
 800c2f0:	45800000 	.word	0x45800000
 800c2f4:	40533333 	.word	0x40533333
 800c2f8:	3e7df3b6 	.word	0x3e7df3b6
 800c2fc:	2000030c 	.word	0x2000030c
 800c300:	20000310 	.word	0x20000310
 800c304:	200002b4 	.word	0x200002b4
 800c308:	200002a0 	.word	0x200002a0
 800c30c:	200001a8 	.word	0x200001a8
 800c310:	20000240 	.word	0x20000240
 800c314:	20000288 	.word	0x20000288
 800c318:	20000294 	.word	0x20000294
 800c31c:	20000260 	.word	0x20000260
 800c320:	2000015c 	.word	0x2000015c
 800c324:	c3340000 	.word	0xc3340000
 800c328:	4048f5c3 	.word	0x4048f5c3
 800c32c:	20000300 	.word	0x20000300
 800c330:	2000008d 	.word	0x2000008d
 800c334:	20000314 	.word	0x20000314

0800c338 <_ZSt4copyIPKcPcET0_T_S4_S3_>:
    copy(_II __first, _II __last, _OI __result)
 800c338:	b590      	push	{r4, r7, lr}
 800c33a:	b085      	sub	sp, #20
 800c33c:	af00      	add	r7, sp, #0
 800c33e:	60f8      	str	r0, [r7, #12]
 800c340:	60b9      	str	r1, [r7, #8]
 800c342:	607a      	str	r2, [r7, #4]
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 800c344:	68f8      	ldr	r0, [r7, #12]
 800c346:	f000 fe8e 	bl	800d066 <_ZSt12__miter_baseIPKcET_S2_>
 800c34a:	4604      	mov	r4, r0
 800c34c:	68b8      	ldr	r0, [r7, #8]
 800c34e:	f000 fe8a 	bl	800d066 <_ZSt12__miter_baseIPKcET_S2_>
 800c352:	4603      	mov	r3, r0
 800c354:	687a      	ldr	r2, [r7, #4]
 800c356:	4619      	mov	r1, r3
 800c358:	4620      	mov	r0, r4
 800c35a:	f000 fe8f 	bl	800d07c <_ZSt13__copy_move_aILb0EPKcPcET1_T0_S4_S3_>
 800c35e:	4603      	mov	r3, r0
    }
 800c360:	4618      	mov	r0, r3
 800c362:	3714      	adds	r7, #20
 800c364:	46bd      	mov	sp, r7
 800c366:	bd90      	pop	{r4, r7, pc}

0800c368 <_ZSt4sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEEvT_S7_>:
   *  @p stable_sort() if this is needed.
  */
  template<typename _RandomAccessIterator>
    _GLIBCXX20_CONSTEXPR
    inline void
    sort(_RandomAccessIterator __first, _RandomAccessIterator __last)
 800c368:	b590      	push	{r4, r7, lr}
 800c36a:	b083      	sub	sp, #12
 800c36c:	af00      	add	r7, sp, #0
 800c36e:	6078      	str	r0, [r7, #4]
 800c370:	6039      	str	r1, [r7, #0]
      __glibcxx_function_requires(_LessThanComparableConcept<
	    typename iterator_traits<_RandomAccessIterator>::value_type>)
      __glibcxx_requires_valid_range(__first, __last);
      __glibcxx_requires_irreflexive(__first, __last);

      std::__sort(__first, __last, __gnu_cxx::__ops::__iter_less_iter());
 800c372:	f7f8 f9a5 	bl	80046c0 <_ZN9__gnu_cxx5__ops16__iter_less_iterEv>
 800c376:	4622      	mov	r2, r4
 800c378:	6839      	ldr	r1, [r7, #0]
 800c37a:	6878      	ldr	r0, [r7, #4]
 800c37c:	f000 fec3 	bl	800d106 <_ZSt6__sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_T0_>
    }
 800c380:	bf00      	nop
 800c382:	370c      	adds	r7, #12
 800c384:	46bd      	mov	sp, r7
 800c386:	bd90      	pop	{r4, r7, pc}

0800c388 <_ZNSt6vectorIfSaIfEEixEj>:
      operator[](size_type __n) _GLIBCXX_NOEXCEPT
 800c388:	b480      	push	{r7}
 800c38a:	b083      	sub	sp, #12
 800c38c:	af00      	add	r7, sp, #0
 800c38e:	6078      	str	r0, [r7, #4]
 800c390:	6039      	str	r1, [r7, #0]
	return *(this->_M_impl._M_start + __n);
 800c392:	687b      	ldr	r3, [r7, #4]
 800c394:	681a      	ldr	r2, [r3, #0]
 800c396:	683b      	ldr	r3, [r7, #0]
 800c398:	009b      	lsls	r3, r3, #2
 800c39a:	4413      	add	r3, r2
      }
 800c39c:	4618      	mov	r0, r3
 800c39e:	370c      	adds	r7, #12
 800c3a0:	46bd      	mov	sp, r7
 800c3a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3a6:	4770      	bx	lr

0800c3a8 <_ZStmlIfESt7complexIT_ERKS1_RKS2_>:
    operator*(const _Tp& __x, const complex<_Tp>& __y)
 800c3a8:	b580      	push	{r7, lr}
 800c3aa:	b084      	sub	sp, #16
 800c3ac:	af00      	add	r7, sp, #0
 800c3ae:	6078      	str	r0, [r7, #4]
 800c3b0:	6039      	str	r1, [r7, #0]
      complex<_Tp> __r = __y;
 800c3b2:	683b      	ldr	r3, [r7, #0]
 800c3b4:	681a      	ldr	r2, [r3, #0]
 800c3b6:	60ba      	str	r2, [r7, #8]
 800c3b8:	685b      	ldr	r3, [r3, #4]
 800c3ba:	60fb      	str	r3, [r7, #12]
      __r *= __x;
 800c3bc:	687b      	ldr	r3, [r7, #4]
 800c3be:	edd3 7a00 	vldr	s15, [r3]
 800c3c2:	f107 0308 	add.w	r3, r7, #8
 800c3c6:	eeb0 0a67 	vmov.f32	s0, s15
 800c3ca:	4618      	mov	r0, r3
 800c3cc:	f7f8 fa1d 	bl	800480a <_ZNSt7complexIfEmLEf>
      return __r;
 800c3d0:	68ba      	ldr	r2, [r7, #8]
 800c3d2:	68fb      	ldr	r3, [r7, #12]
 800c3d4:	ee07 2a10 	vmov	s14, r2
 800c3d8:	ee07 3a90 	vmov	s15, r3
    }
 800c3dc:	eeb0 0a47 	vmov.f32	s0, s14
 800c3e0:	eef0 0a67 	vmov.f32	s1, s15
 800c3e4:	3710      	adds	r7, #16
 800c3e6:	46bd      	mov	sp, r7
 800c3e8:	bd80      	pop	{r7, pc}

0800c3ea <_ZNSt7complexIfEmLIfEERS0_RKS_IT_E>:
        operator*=(const complex<_Tp>& __z)
 800c3ea:	b580      	push	{r7, lr}
 800c3ec:	b086      	sub	sp, #24
 800c3ee:	af00      	add	r7, sp, #0
 800c3f0:	6078      	str	r0, [r7, #4]
 800c3f2:	6039      	str	r1, [r7, #0]
	  const _ComplexT __t = __z.__rep();
 800c3f4:	6838      	ldr	r0, [r7, #0]
 800c3f6:	f7f8 fa29 	bl	800484c <_ZNKSt7complexIfE5__repEv>
 800c3fa:	ed87 0a04 	vstr	s0, [r7, #16]
 800c3fe:	edc7 0a05 	vstr	s1, [r7, #20]
 800c402:	693b      	ldr	r3, [r7, #16]
 800c404:	60fb      	str	r3, [r7, #12]
 800c406:	697b      	ldr	r3, [r7, #20]
 800c408:	60bb      	str	r3, [r7, #8]
 800c40a:	687b      	ldr	r3, [r7, #4]
 800c40c:	edd3 7a00 	vldr	s15, [r3]
 800c410:	687b      	ldr	r3, [r7, #4]
 800c412:	ed93 7a01 	vldr	s14, [r3, #4]
	  _M_value *= __t;
 800c416:	eef0 1a47 	vmov.f32	s3, s14
 800c41a:	eeb0 1a67 	vmov.f32	s2, s15
 800c41e:	edd7 0a02 	vldr	s1, [r7, #8]
 800c422:	ed97 0a03 	vldr	s0, [r7, #12]
 800c426:	f7f4 fc39 	bl	8000c9c <__mulsc3>
 800c42a:	eeb0 7a40 	vmov.f32	s14, s0
 800c42e:	eef0 7a60 	vmov.f32	s15, s1
 800c432:	ee17 1a10 	vmov	r1, s14
 800c436:	ee17 2a90 	vmov	r2, s15
 800c43a:	687b      	ldr	r3, [r7, #4]
 800c43c:	6019      	str	r1, [r3, #0]
 800c43e:	687b      	ldr	r3, [r7, #4]
 800c440:	605a      	str	r2, [r3, #4]
	  return *this;
 800c442:	687b      	ldr	r3, [r7, #4]
	}
 800c444:	4618      	mov	r0, r3
 800c446:	3718      	adds	r7, #24
 800c448:	46bd      	mov	sp, r7
 800c44a:	bd80      	pop	{r7, pc}

0800c44c <_ZStmlIfESt7complexIT_ERKS2_S4_>:
    operator*(const complex<_Tp>& __x, const complex<_Tp>& __y)
 800c44c:	b580      	push	{r7, lr}
 800c44e:	b084      	sub	sp, #16
 800c450:	af00      	add	r7, sp, #0
 800c452:	6078      	str	r0, [r7, #4]
 800c454:	6039      	str	r1, [r7, #0]
      complex<_Tp> __r = __x;
 800c456:	687b      	ldr	r3, [r7, #4]
 800c458:	681a      	ldr	r2, [r3, #0]
 800c45a:	60ba      	str	r2, [r7, #8]
 800c45c:	685b      	ldr	r3, [r3, #4]
 800c45e:	60fb      	str	r3, [r7, #12]
      __r *= __y;
 800c460:	f107 0308 	add.w	r3, r7, #8
 800c464:	6839      	ldr	r1, [r7, #0]
 800c466:	4618      	mov	r0, r3
 800c468:	f7ff ffbf 	bl	800c3ea <_ZNSt7complexIfEmLIfEERS0_RKS_IT_E>
      return __r;
 800c46c:	68ba      	ldr	r2, [r7, #8]
 800c46e:	68fb      	ldr	r3, [r7, #12]
 800c470:	ee07 2a10 	vmov	s14, r2
 800c474:	ee07 3a90 	vmov	s15, r3
    }
 800c478:	eeb0 0a47 	vmov.f32	s0, s14
 800c47c:	eef0 0a67 	vmov.f32	s1, s15
 800c480:	3710      	adds	r7, #16
 800c482:	46bd      	mov	sp, r7
 800c484:	bd80      	pop	{r7, pc}

0800c486 <_ZNSt7complexIfEpLIfEERS0_RKS_IT_E>:
        operator+=(const complex<_Tp>& __z)
 800c486:	b580      	push	{r7, lr}
 800c488:	b082      	sub	sp, #8
 800c48a:	af00      	add	r7, sp, #0
 800c48c:	6078      	str	r0, [r7, #4]
 800c48e:	6039      	str	r1, [r7, #0]
	  _M_value += __z.__rep();
 800c490:	6838      	ldr	r0, [r7, #0]
 800c492:	f7f8 f9db 	bl	800484c <_ZNKSt7complexIfE5__repEv>
 800c496:	eeb0 7a40 	vmov.f32	s14, s0
 800c49a:	eef0 7a60 	vmov.f32	s15, s1
 800c49e:	eeb0 6a47 	vmov.f32	s12, s14
 800c4a2:	eef0 6a67 	vmov.f32	s13, s15
 800c4a6:	687b      	ldr	r3, [r7, #4]
 800c4a8:	ed93 7a00 	vldr	s14, [r3]
 800c4ac:	687b      	ldr	r3, [r7, #4]
 800c4ae:	edd3 7a01 	vldr	s15, [r3, #4]
 800c4b2:	ee36 7a07 	vadd.f32	s14, s12, s14
 800c4b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c4ba:	687b      	ldr	r3, [r7, #4]
 800c4bc:	ed83 7a00 	vstr	s14, [r3]
 800c4c0:	687b      	ldr	r3, [r7, #4]
 800c4c2:	edc3 7a01 	vstr	s15, [r3, #4]
	  return *this;
 800c4c6:	687b      	ldr	r3, [r7, #4]
	}
 800c4c8:	4618      	mov	r0, r3
 800c4ca:	3708      	adds	r7, #8
 800c4cc:	46bd      	mov	sp, r7
 800c4ce:	bd80      	pop	{r7, pc}

0800c4d0 <_ZStplIfESt7complexIT_ERKS2_S4_>:
    operator+(const complex<_Tp>& __x, const complex<_Tp>& __y)
 800c4d0:	b580      	push	{r7, lr}
 800c4d2:	b084      	sub	sp, #16
 800c4d4:	af00      	add	r7, sp, #0
 800c4d6:	6078      	str	r0, [r7, #4]
 800c4d8:	6039      	str	r1, [r7, #0]
      complex<_Tp> __r = __x;
 800c4da:	687b      	ldr	r3, [r7, #4]
 800c4dc:	681a      	ldr	r2, [r3, #0]
 800c4de:	60ba      	str	r2, [r7, #8]
 800c4e0:	685b      	ldr	r3, [r3, #4]
 800c4e2:	60fb      	str	r3, [r7, #12]
      __r += __y;
 800c4e4:	f107 0308 	add.w	r3, r7, #8
 800c4e8:	6839      	ldr	r1, [r7, #0]
 800c4ea:	4618      	mov	r0, r3
 800c4ec:	f7ff ffcb 	bl	800c486 <_ZNSt7complexIfEpLIfEERS0_RKS_IT_E>
      return __r;
 800c4f0:	68ba      	ldr	r2, [r7, #8]
 800c4f2:	68fb      	ldr	r3, [r7, #12]
 800c4f4:	ee07 2a10 	vmov	s14, r2
 800c4f8:	ee07 3a90 	vmov	s15, r3
    }
 800c4fc:	eeb0 0a47 	vmov.f32	s0, s14
 800c500:	eef0 0a67 	vmov.f32	s1, s15
 800c504:	3710      	adds	r7, #16
 800c506:	46bd      	mov	sp, r7
 800c508:	bd80      	pop	{r7, pc}

0800c50a <_ZNSt7complexIfEmIIfEERS0_RKS_IT_E>:
        operator-=(const complex<_Tp>& __z)
 800c50a:	b580      	push	{r7, lr}
 800c50c:	b082      	sub	sp, #8
 800c50e:	af00      	add	r7, sp, #0
 800c510:	6078      	str	r0, [r7, #4]
 800c512:	6039      	str	r1, [r7, #0]
	  _M_value -= __z.__rep();
 800c514:	6838      	ldr	r0, [r7, #0]
 800c516:	f7f8 f999 	bl	800484c <_ZNKSt7complexIfE5__repEv>
 800c51a:	eeb0 7a40 	vmov.f32	s14, s0
 800c51e:	eef0 7a60 	vmov.f32	s15, s1
 800c522:	eeb0 6a47 	vmov.f32	s12, s14
 800c526:	eef0 6a67 	vmov.f32	s13, s15
 800c52a:	687b      	ldr	r3, [r7, #4]
 800c52c:	ed93 7a00 	vldr	s14, [r3]
 800c530:	687b      	ldr	r3, [r7, #4]
 800c532:	edd3 7a01 	vldr	s15, [r3, #4]
 800c536:	ee37 7a46 	vsub.f32	s14, s14, s12
 800c53a:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800c53e:	687b      	ldr	r3, [r7, #4]
 800c540:	ed83 7a00 	vstr	s14, [r3]
 800c544:	687b      	ldr	r3, [r7, #4]
 800c546:	edc3 7a01 	vstr	s15, [r3, #4]
	  return *this;
 800c54a:	687b      	ldr	r3, [r7, #4]
	}
 800c54c:	4618      	mov	r0, r3
 800c54e:	3708      	adds	r7, #8
 800c550:	46bd      	mov	sp, r7
 800c552:	bd80      	pop	{r7, pc}

0800c554 <_ZStmiIfESt7complexIT_ERKS2_S4_>:
    operator-(const complex<_Tp>& __x, const complex<_Tp>& __y)
 800c554:	b580      	push	{r7, lr}
 800c556:	b084      	sub	sp, #16
 800c558:	af00      	add	r7, sp, #0
 800c55a:	6078      	str	r0, [r7, #4]
 800c55c:	6039      	str	r1, [r7, #0]
      complex<_Tp> __r = __x;
 800c55e:	687b      	ldr	r3, [r7, #4]
 800c560:	681a      	ldr	r2, [r3, #0]
 800c562:	60ba      	str	r2, [r7, #8]
 800c564:	685b      	ldr	r3, [r3, #4]
 800c566:	60fb      	str	r3, [r7, #12]
      __r -= __y;
 800c568:	f107 0308 	add.w	r3, r7, #8
 800c56c:	6839      	ldr	r1, [r7, #0]
 800c56e:	4618      	mov	r0, r3
 800c570:	f7ff ffcb 	bl	800c50a <_ZNSt7complexIfEmIIfEERS0_RKS_IT_E>
      return __r;
 800c574:	68ba      	ldr	r2, [r7, #8]
 800c576:	68fb      	ldr	r3, [r7, #12]
 800c578:	ee07 2a10 	vmov	s14, r2
 800c57c:	ee07 3a90 	vmov	s15, r3
    }
 800c580:	eeb0 0a47 	vmov.f32	s0, s14
 800c584:	eef0 0a67 	vmov.f32	s1, s15
 800c588:	3710      	adds	r7, #16
 800c58a:	46bd      	mov	sp, r7
 800c58c:	bd80      	pop	{r7, pc}

0800c58e <_ZSt5beginIbLj32EEPT_RAT0__S0_>:
   *  @brief  Return an iterator pointing to the first element of the array.
   *  @param  __arr  Array.
   */
  template<typename _Tp, size_t _Nm>
    inline _GLIBCXX14_CONSTEXPR _Tp*
    begin(_Tp (&__arr)[_Nm]) noexcept
 800c58e:	b480      	push	{r7}
 800c590:	b083      	sub	sp, #12
 800c592:	af00      	add	r7, sp, #0
 800c594:	6078      	str	r0, [r7, #4]
    { return __arr; }
 800c596:	687b      	ldr	r3, [r7, #4]
 800c598:	4618      	mov	r0, r3
 800c59a:	370c      	adds	r7, #12
 800c59c:	46bd      	mov	sp, r7
 800c59e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5a2:	4770      	bx	lr

0800c5a4 <_ZSt3endIbLj32EEPT_RAT0__S0_>:
   *          of the array.
   *  @param  __arr  Array.
   */
  template<typename _Tp, size_t _Nm>
    inline _GLIBCXX14_CONSTEXPR _Tp*
    end(_Tp (&__arr)[_Nm]) noexcept
 800c5a4:	b480      	push	{r7}
 800c5a6:	b083      	sub	sp, #12
 800c5a8:	af00      	add	r7, sp, #0
 800c5aa:	6078      	str	r0, [r7, #4]
    { return __arr + _Nm; }
 800c5ac:	687b      	ldr	r3, [r7, #4]
 800c5ae:	3320      	adds	r3, #32
 800c5b0:	4618      	mov	r0, r3
 800c5b2:	370c      	adds	r7, #12
 800c5b4:	46bd      	mov	sp, r7
 800c5b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5ba:	4770      	bx	lr

0800c5bc <_ZSt6all_ofIPbZN3jlb10Controller15lateral_controlEfEUlbE_EbT_S4_T0_>:
    all_of(_InputIterator __first, _InputIterator __last, _Predicate __pred)
 800c5bc:	b580      	push	{r7, lr}
 800c5be:	b084      	sub	sp, #16
 800c5c0:	af00      	add	r7, sp, #0
 800c5c2:	60f8      	str	r0, [r7, #12]
 800c5c4:	60b9      	str	r1, [r7, #8]
 800c5c6:	713a      	strb	r2, [r7, #4]
    { return __last == std::find_if_not(__first, __last, __pred); }
 800c5c8:	461a      	mov	r2, r3
 800c5ca:	68b9      	ldr	r1, [r7, #8]
 800c5cc:	68f8      	ldr	r0, [r7, #12]
 800c5ce:	f000 fdca 	bl	800d166 <_ZSt11find_if_notIPbZN3jlb10Controller15lateral_controlEfEUlbE_ET_S4_S4_T0_>
 800c5d2:	4602      	mov	r2, r0
 800c5d4:	68bb      	ldr	r3, [r7, #8]
 800c5d6:	4293      	cmp	r3, r2
 800c5d8:	bf0c      	ite	eq
 800c5da:	2301      	moveq	r3, #1
 800c5dc:	2300      	movne	r3, #0
 800c5de:	b2db      	uxtb	r3, r3
 800c5e0:	4618      	mov	r0, r3
 800c5e2:	3710      	adds	r7, #16
 800c5e4:	46bd      	mov	sp, r7
 800c5e6:	bd80      	pop	{r7, pc}

0800c5e8 <_ZSt6all_ofIPbZN3jlb10Controller15lateral_controlEfEUlbE0_EbT_S4_T0_>:
    all_of(_InputIterator __first, _InputIterator __last, _Predicate __pred)
 800c5e8:	b580      	push	{r7, lr}
 800c5ea:	b084      	sub	sp, #16
 800c5ec:	af00      	add	r7, sp, #0
 800c5ee:	60f8      	str	r0, [r7, #12]
 800c5f0:	60b9      	str	r1, [r7, #8]
 800c5f2:	713a      	strb	r2, [r7, #4]
    { return __last == std::find_if_not(__first, __last, __pred); }
 800c5f4:	461a      	mov	r2, r3
 800c5f6:	68b9      	ldr	r1, [r7, #8]
 800c5f8:	68f8      	ldr	r0, [r7, #12]
 800c5fa:	f000 fdc7 	bl	800d18c <_ZSt11find_if_notIPbZN3jlb10Controller15lateral_controlEfEUlbE0_ET_S4_S4_T0_>
 800c5fe:	4602      	mov	r2, r0
 800c600:	68bb      	ldr	r3, [r7, #8]
 800c602:	4293      	cmp	r3, r2
 800c604:	bf0c      	ite	eq
 800c606:	2301      	moveq	r3, #1
 800c608:	2300      	movne	r3, #0
 800c60a:	b2db      	uxtb	r3, r3
 800c60c:	4618      	mov	r0, r3
 800c60e:	3710      	adds	r7, #16
 800c610:	46bd      	mov	sp, r7
 800c612:	bd80      	pop	{r7, pc}

0800c614 <_ZNSt6vectorIfSaIfEEC1ERKS1_>:
      vector(const vector& __x)
 800c614:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c616:	b085      	sub	sp, #20
 800c618:	af00      	add	r7, sp, #0
 800c61a:	6078      	str	r0, [r7, #4]
 800c61c:	6039      	str	r1, [r7, #0]
	_Alloc_traits::_S_select_on_copy(__x._M_get_Tp_allocator()))
 800c61e:	687c      	ldr	r4, [r7, #4]
 800c620:	6838      	ldr	r0, [r7, #0]
 800c622:	f7f7 fa60 	bl	8003ae6 <_ZNKSt6vectorIfSaIfEE4sizeEv>
 800c626:	4605      	mov	r5, r0
 800c628:	683b      	ldr	r3, [r7, #0]
 800c62a:	4618      	mov	r0, r3
 800c62c:	f7f7 fb06 	bl	8003c3c <_ZNKSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>
 800c630:	4602      	mov	r2, r0
 800c632:	f107 030c 	add.w	r3, r7, #12
 800c636:	4611      	mov	r1, r2
 800c638:	4618      	mov	r0, r3
 800c63a:	f000 fdba 	bl	800d1b2 <_ZN9__gnu_cxx14__alloc_traitsISaIfEfE17_S_select_on_copyERKS1_>
 800c63e:	f107 030c 	add.w	r3, r7, #12
 800c642:	461a      	mov	r2, r3
 800c644:	4629      	mov	r1, r5
 800c646:	4620      	mov	r0, r4
 800c648:	f000 fdc1 	bl	800d1ce <_ZNSt12_Vector_baseIfSaIfEEC1EjRKS0_>
 800c64c:	f107 030c 	add.w	r3, r7, #12
 800c650:	4618      	mov	r0, r3
 800c652:	f7f6 ff85 	bl	8003560 <_ZNSaIfED1Ev>
	  std::__uninitialized_copy_a(__x.begin(), __x.end(),
 800c656:	6838      	ldr	r0, [r7, #0]
 800c658:	f000 fdcd 	bl	800d1f6 <_ZNKSt6vectorIfSaIfEE5beginEv>
 800c65c:	4605      	mov	r5, r0
 800c65e:	6838      	ldr	r0, [r7, #0]
 800c660:	f000 fdd9 	bl	800d216 <_ZNKSt6vectorIfSaIfEE3endEv>
 800c664:	4606      	mov	r6, r0
 800c666:	687b      	ldr	r3, [r7, #4]
 800c668:	681c      	ldr	r4, [r3, #0]
				      _M_get_Tp_allocator());
 800c66a:	687b      	ldr	r3, [r7, #4]
 800c66c:	4618      	mov	r0, r3
 800c66e:	f7f7 f81c 	bl	80036aa <_ZNSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>
 800c672:	4603      	mov	r3, r0
	  std::__uninitialized_copy_a(__x.begin(), __x.end(),
 800c674:	4622      	mov	r2, r4
 800c676:	4631      	mov	r1, r6
 800c678:	4628      	mov	r0, r5
 800c67a:	f000 fddd 	bl	800d238 <_ZSt22__uninitialized_copy_aIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEEPffET0_T_SA_S9_RSaIT1_E>
 800c67e:	4602      	mov	r2, r0
	this->_M_impl._M_finish =
 800c680:	687b      	ldr	r3, [r7, #4]
 800c682:	605a      	str	r2, [r3, #4]
      }
 800c684:	687b      	ldr	r3, [r7, #4]
 800c686:	4618      	mov	r0, r3
 800c688:	3714      	adds	r7, #20
 800c68a:	46bd      	mov	sp, r7
 800c68c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800c68e <_ZN9__gnu_cxx14__alloc_traitsISaIfEfE27_S_propagate_on_copy_assignEv>:
    { return _Base_type::select_on_container_copy_construction(__a); }

    static _GLIBCXX14_CONSTEXPR void _S_on_swap(_Alloc& __a, _Alloc& __b)
    { std::__alloc_on_swap(__a, __b); }

    static constexpr bool _S_propagate_on_copy_assign()
 800c68e:	b480      	push	{r7}
 800c690:	af00      	add	r7, sp, #0
    { return _Base_type::propagate_on_container_copy_assignment::value; }
 800c692:	2300      	movs	r3, #0
 800c694:	4618      	mov	r0, r3
 800c696:	46bd      	mov	sp, r7
 800c698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c69c:	4770      	bx	lr

0800c69e <_ZN9__gnu_cxx14__alloc_traitsISaIfEfE15_S_always_equalEv>:
    { return _Base_type::propagate_on_container_move_assignment::value; }

    static constexpr bool _S_propagate_on_swap()
    { return _Base_type::propagate_on_container_swap::value; }

    static constexpr bool _S_always_equal()
 800c69e:	b480      	push	{r7}
 800c6a0:	af00      	add	r7, sp, #0
    { return _Base_type::is_always_equal::value; }
 800c6a2:	2301      	movs	r3, #1
 800c6a4:	4618      	mov	r0, r3
 800c6a6:	46bd      	mov	sp, r7
 800c6a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6ac:	4770      	bx	lr

0800c6ae <_ZSteqRKSaIfES1_>:
      }
#endif // C++20

      friend _GLIBCXX20_CONSTEXPR bool
      operator==(const allocator&, const allocator&) _GLIBCXX_NOTHROW
 800c6ae:	b480      	push	{r7}
 800c6b0:	b083      	sub	sp, #12
 800c6b2:	af00      	add	r7, sp, #0
 800c6b4:	6078      	str	r0, [r7, #4]
 800c6b6:	6039      	str	r1, [r7, #0]
      { return true; }
 800c6b8:	2301      	movs	r3, #1
 800c6ba:	4618      	mov	r0, r3
 800c6bc:	370c      	adds	r7, #12
 800c6be:	46bd      	mov	sp, r7
 800c6c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6c4:	4770      	bx	lr

0800c6c6 <_ZSt4copyIPfS0_ET0_T_S2_S1_>:
    copy(_II __first, _II __last, _OI __result)
 800c6c6:	b590      	push	{r4, r7, lr}
 800c6c8:	b085      	sub	sp, #20
 800c6ca:	af00      	add	r7, sp, #0
 800c6cc:	60f8      	str	r0, [r7, #12]
 800c6ce:	60b9      	str	r1, [r7, #8]
 800c6d0:	607a      	str	r2, [r7, #4]
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 800c6d2:	68f8      	ldr	r0, [r7, #12]
 800c6d4:	f000 fe1e 	bl	800d314 <_ZSt12__miter_baseIPfET_S1_>
 800c6d8:	4604      	mov	r4, r0
 800c6da:	68b8      	ldr	r0, [r7, #8]
 800c6dc:	f000 fe1a 	bl	800d314 <_ZSt12__miter_baseIPfET_S1_>
 800c6e0:	4603      	mov	r3, r0
 800c6e2:	687a      	ldr	r2, [r7, #4]
 800c6e4:	4619      	mov	r1, r3
 800c6e6:	4620      	mov	r0, r4
 800c6e8:	f000 fe1f 	bl	800d32a <_ZSt13__copy_move_aILb0EPfS0_ET1_T0_S2_S1_>
 800c6ec:	4603      	mov	r3, r0
    }
 800c6ee:	4618      	mov	r0, r3
 800c6f0:	3714      	adds	r7, #20
 800c6f2:	46bd      	mov	sp, r7
 800c6f4:	bd90      	pop	{r4, r7, pc}

0800c6f6 <_ZNSt6vectorIfSaIfEEaSERKS1_>:
    vector<_Tp, _Alloc>::
 800c6f6:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c6f8:	b085      	sub	sp, #20
 800c6fa:	af00      	add	r7, sp, #0
 800c6fc:	6078      	str	r0, [r7, #4]
 800c6fe:	6039      	str	r1, [r7, #0]
      if (&__x != this)
 800c700:	683a      	ldr	r2, [r7, #0]
 800c702:	687b      	ldr	r3, [r7, #4]
 800c704:	429a      	cmp	r2, r3
 800c706:	f000 80e9 	beq.w	800c8dc <_ZNSt6vectorIfSaIfEEaSERKS1_+0x1e6>
	  if (_Alloc_traits::_S_propagate_on_copy_assign())
 800c70a:	f7ff ffc0 	bl	800c68e <_ZN9__gnu_cxx14__alloc_traitsISaIfEfE27_S_propagate_on_copy_assignEv>
 800c70e:	4603      	mov	r3, r0
 800c710:	2b00      	cmp	r3, #0
 800c712:	d046      	beq.n	800c7a2 <_ZNSt6vectorIfSaIfEEaSERKS1_+0xac>
	      if (!_Alloc_traits::_S_always_equal()
 800c714:	f7ff ffc3 	bl	800c69e <_ZN9__gnu_cxx14__alloc_traitsISaIfEfE15_S_always_equalEv>
 800c718:	4603      	mov	r3, r0
 800c71a:	f083 0301 	eor.w	r3, r3, #1
 800c71e:	b2db      	uxtb	r3, r3
	          && _M_get_Tp_allocator() != __x._M_get_Tp_allocator())
 800c720:	2b00      	cmp	r3, #0
 800c722:	d015      	beq.n	800c750 <_ZNSt6vectorIfSaIfEEaSERKS1_+0x5a>
 800c724:	687b      	ldr	r3, [r7, #4]
 800c726:	4618      	mov	r0, r3
 800c728:	f7f6 ffbf 	bl	80036aa <_ZNSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>
 800c72c:	4604      	mov	r4, r0
 800c72e:	683b      	ldr	r3, [r7, #0]
 800c730:	4618      	mov	r0, r3
 800c732:	f7f7 fa83 	bl	8003c3c <_ZNKSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>
 800c736:	4603      	mov	r3, r0
 800c738:	4619      	mov	r1, r3
 800c73a:	4620      	mov	r0, r4
 800c73c:	f7ff ffb7 	bl	800c6ae <_ZSteqRKSaIfES1_>
 800c740:	4603      	mov	r3, r0
 800c742:	f083 0301 	eor.w	r3, r3, #1
 800c746:	b2db      	uxtb	r3, r3
 800c748:	2b00      	cmp	r3, #0
 800c74a:	d001      	beq.n	800c750 <_ZNSt6vectorIfSaIfEEaSERKS1_+0x5a>
 800c74c:	2301      	movs	r3, #1
 800c74e:	e000      	b.n	800c752 <_ZNSt6vectorIfSaIfEEaSERKS1_+0x5c>
 800c750:	2300      	movs	r3, #0
	      if (!_Alloc_traits::_S_always_equal()
 800c752:	2b00      	cmp	r3, #0
 800c754:	d017      	beq.n	800c786 <_ZNSt6vectorIfSaIfEEaSERKS1_+0x90>
		  this->clear();
 800c756:	6878      	ldr	r0, [r7, #4]
 800c758:	f7f6 ff41 	bl	80035de <_ZNSt6vectorIfSaIfEE5clearEv>
		  _M_deallocate(this->_M_impl._M_start,
 800c75c:	6878      	ldr	r0, [r7, #4]
 800c75e:	687b      	ldr	r3, [r7, #4]
 800c760:	6819      	ldr	r1, [r3, #0]
				this->_M_impl._M_end_of_storage
 800c762:	687b      	ldr	r3, [r7, #4]
 800c764:	689a      	ldr	r2, [r3, #8]
				- this->_M_impl._M_start);
 800c766:	687b      	ldr	r3, [r7, #4]
 800c768:	681b      	ldr	r3, [r3, #0]
 800c76a:	1ad3      	subs	r3, r2, r3
 800c76c:	109b      	asrs	r3, r3, #2
		  _M_deallocate(this->_M_impl._M_start,
 800c76e:	461a      	mov	r2, r3
 800c770:	f7f6 ff88 	bl	8003684 <_ZNSt12_Vector_baseIfSaIfEE13_M_deallocateEPfj>
		  this->_M_impl._M_start = nullptr;
 800c774:	687b      	ldr	r3, [r7, #4]
 800c776:	2200      	movs	r2, #0
 800c778:	601a      	str	r2, [r3, #0]
		  this->_M_impl._M_finish = nullptr;
 800c77a:	687b      	ldr	r3, [r7, #4]
 800c77c:	2200      	movs	r2, #0
 800c77e:	605a      	str	r2, [r3, #4]
		  this->_M_impl._M_end_of_storage = nullptr;
 800c780:	687b      	ldr	r3, [r7, #4]
 800c782:	2200      	movs	r2, #0
 800c784:	609a      	str	r2, [r3, #8]
	      std::__alloc_on_copy(_M_get_Tp_allocator(),
 800c786:	687b      	ldr	r3, [r7, #4]
 800c788:	4618      	mov	r0, r3
 800c78a:	f7f6 ff8e 	bl	80036aa <_ZNSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>
 800c78e:	4604      	mov	r4, r0
				   __x._M_get_Tp_allocator());
 800c790:	683b      	ldr	r3, [r7, #0]
 800c792:	4618      	mov	r0, r3
 800c794:	f7f7 fa52 	bl	8003c3c <_ZNKSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>
 800c798:	4603      	mov	r3, r0
	      std::__alloc_on_copy(_M_get_Tp_allocator(),
 800c79a:	4619      	mov	r1, r3
 800c79c:	4620      	mov	r0, r4
 800c79e:	f000 fd5c 	bl	800d25a <_ZSt15__alloc_on_copyISaIfEEvRT_RKS1_>
	  const size_type __xlen = __x.size();
 800c7a2:	6838      	ldr	r0, [r7, #0]
 800c7a4:	f7f7 f99f 	bl	8003ae6 <_ZNKSt6vectorIfSaIfEE4sizeEv>
 800c7a8:	60f8      	str	r0, [r7, #12]
	  if (__xlen > capacity())
 800c7aa:	6878      	ldr	r0, [r7, #4]
 800c7ac:	f000 fd60 	bl	800d270 <_ZNKSt6vectorIfSaIfEE8capacityEv>
 800c7b0:	4602      	mov	r2, r0
 800c7b2:	68fb      	ldr	r3, [r7, #12]
 800c7b4:	4293      	cmp	r3, r2
 800c7b6:	bf8c      	ite	hi
 800c7b8:	2301      	movhi	r3, #1
 800c7ba:	2300      	movls	r3, #0
 800c7bc:	b2db      	uxtb	r3, r3
 800c7be:	2b00      	cmp	r3, #0
 800c7c0:	d032      	beq.n	800c828 <_ZNSt6vectorIfSaIfEEaSERKS1_+0x132>
	      pointer __tmp = _M_allocate_and_copy(__xlen, __x.begin(),
 800c7c2:	6838      	ldr	r0, [r7, #0]
 800c7c4:	f000 fd17 	bl	800d1f6 <_ZNKSt6vectorIfSaIfEE5beginEv>
 800c7c8:	4604      	mov	r4, r0
 800c7ca:	6838      	ldr	r0, [r7, #0]
 800c7cc:	f000 fd23 	bl	800d216 <_ZNKSt6vectorIfSaIfEE3endEv>
 800c7d0:	4603      	mov	r3, r0
 800c7d2:	4622      	mov	r2, r4
 800c7d4:	68f9      	ldr	r1, [r7, #12]
 800c7d6:	6878      	ldr	r0, [r7, #4]
 800c7d8:	f000 fd5a 	bl	800d290 <_ZNSt6vectorIfSaIfEE20_M_allocate_and_copyIN9__gnu_cxx17__normal_iteratorIPKfS1_EEEEPfjT_S9_>
 800c7dc:	60b8      	str	r0, [r7, #8]
	      std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 800c7de:	687b      	ldr	r3, [r7, #4]
 800c7e0:	681c      	ldr	r4, [r3, #0]
 800c7e2:	687b      	ldr	r3, [r7, #4]
 800c7e4:	685d      	ldr	r5, [r3, #4]
			    _M_get_Tp_allocator());
 800c7e6:	687b      	ldr	r3, [r7, #4]
 800c7e8:	4618      	mov	r0, r3
 800c7ea:	f7f6 ff5e 	bl	80036aa <_ZNSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>
 800c7ee:	4603      	mov	r3, r0
	      std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 800c7f0:	461a      	mov	r2, r3
 800c7f2:	4629      	mov	r1, r5
 800c7f4:	4620      	mov	r0, r4
 800c7f6:	f7f6 ff63 	bl	80036c0 <_ZSt8_DestroyIPffEvT_S1_RSaIT0_E>
	      _M_deallocate(this->_M_impl._M_start,
 800c7fa:	6878      	ldr	r0, [r7, #4]
 800c7fc:	687b      	ldr	r3, [r7, #4]
 800c7fe:	6819      	ldr	r1, [r3, #0]
			    this->_M_impl._M_end_of_storage
 800c800:	687b      	ldr	r3, [r7, #4]
 800c802:	689a      	ldr	r2, [r3, #8]
			    - this->_M_impl._M_start);
 800c804:	687b      	ldr	r3, [r7, #4]
 800c806:	681b      	ldr	r3, [r3, #0]
 800c808:	1ad3      	subs	r3, r2, r3
 800c80a:	109b      	asrs	r3, r3, #2
	      _M_deallocate(this->_M_impl._M_start,
 800c80c:	461a      	mov	r2, r3
 800c80e:	f7f6 ff39 	bl	8003684 <_ZNSt12_Vector_baseIfSaIfEE13_M_deallocateEPfj>
	      this->_M_impl._M_start = __tmp;
 800c812:	687b      	ldr	r3, [r7, #4]
 800c814:	68ba      	ldr	r2, [r7, #8]
 800c816:	601a      	str	r2, [r3, #0]
	      this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __xlen;
 800c818:	687b      	ldr	r3, [r7, #4]
 800c81a:	681a      	ldr	r2, [r3, #0]
 800c81c:	68fb      	ldr	r3, [r7, #12]
 800c81e:	009b      	lsls	r3, r3, #2
 800c820:	441a      	add	r2, r3
 800c822:	687b      	ldr	r3, [r7, #4]
 800c824:	609a      	str	r2, [r3, #8]
 800c826:	e052      	b.n	800c8ce <_ZNSt6vectorIfSaIfEEaSERKS1_+0x1d8>
	  else if (size() >= __xlen)
 800c828:	6878      	ldr	r0, [r7, #4]
 800c82a:	f7f7 f95c 	bl	8003ae6 <_ZNKSt6vectorIfSaIfEE4sizeEv>
 800c82e:	4602      	mov	r2, r0
 800c830:	68fb      	ldr	r3, [r7, #12]
 800c832:	4293      	cmp	r3, r2
 800c834:	bf94      	ite	ls
 800c836:	2301      	movls	r3, #1
 800c838:	2300      	movhi	r3, #0
 800c83a:	b2db      	uxtb	r3, r3
 800c83c:	2b00      	cmp	r3, #0
 800c83e:	d020      	beq.n	800c882 <_ZNSt6vectorIfSaIfEEaSERKS1_+0x18c>
	      std::_Destroy(std::copy(__x.begin(), __x.end(), begin()),
 800c840:	6838      	ldr	r0, [r7, #0]
 800c842:	f000 fcd8 	bl	800d1f6 <_ZNKSt6vectorIfSaIfEE5beginEv>
 800c846:	4604      	mov	r4, r0
 800c848:	6838      	ldr	r0, [r7, #0]
 800c84a:	f000 fce4 	bl	800d216 <_ZNKSt6vectorIfSaIfEE3endEv>
 800c84e:	4605      	mov	r5, r0
 800c850:	6878      	ldr	r0, [r7, #4]
 800c852:	f7f7 f8bb 	bl	80039cc <_ZNSt6vectorIfSaIfEE5beginEv>
 800c856:	4603      	mov	r3, r0
 800c858:	461a      	mov	r2, r3
 800c85a:	4629      	mov	r1, r5
 800c85c:	4620      	mov	r0, r4
 800c85e:	f000 fd33 	bl	800d2c8 <_ZSt4copyIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEENS1_IPfS6_EEET0_T_SB_SA_>
 800c862:	4604      	mov	r4, r0
 800c864:	6878      	ldr	r0, [r7, #4]
 800c866:	f7f6 ff81 	bl	800376c <_ZNSt6vectorIfSaIfEE3endEv>
 800c86a:	4605      	mov	r5, r0
			    end(), _M_get_Tp_allocator());
 800c86c:	687b      	ldr	r3, [r7, #4]
 800c86e:	4618      	mov	r0, r3
 800c870:	f7f6 ff1b 	bl	80036aa <_ZNSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>
 800c874:	4603      	mov	r3, r0
	      std::_Destroy(std::copy(__x.begin(), __x.end(), begin()),
 800c876:	461a      	mov	r2, r3
 800c878:	4629      	mov	r1, r5
 800c87a:	4620      	mov	r0, r4
 800c87c:	f000 fd3c 	bl	800d2f8 <_ZSt8_DestroyIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEfEvT_S7_RSaIT0_E>
 800c880:	e025      	b.n	800c8ce <_ZNSt6vectorIfSaIfEEaSERKS1_+0x1d8>
	      std::copy(__x._M_impl._M_start, __x._M_impl._M_start + size(),
 800c882:	683b      	ldr	r3, [r7, #0]
 800c884:	681d      	ldr	r5, [r3, #0]
 800c886:	683b      	ldr	r3, [r7, #0]
 800c888:	681c      	ldr	r4, [r3, #0]
 800c88a:	6878      	ldr	r0, [r7, #4]
 800c88c:	f7f7 f92b 	bl	8003ae6 <_ZNKSt6vectorIfSaIfEE4sizeEv>
 800c890:	4603      	mov	r3, r0
 800c892:	009b      	lsls	r3, r3, #2
 800c894:	18e1      	adds	r1, r4, r3
 800c896:	687b      	ldr	r3, [r7, #4]
 800c898:	681b      	ldr	r3, [r3, #0]
 800c89a:	461a      	mov	r2, r3
 800c89c:	4628      	mov	r0, r5
 800c89e:	f7ff ff12 	bl	800c6c6 <_ZSt4copyIPfS0_ET0_T_S2_S1_>
	      std::__uninitialized_copy_a(__x._M_impl._M_start + size(),
 800c8a2:	683b      	ldr	r3, [r7, #0]
 800c8a4:	681c      	ldr	r4, [r3, #0]
 800c8a6:	6878      	ldr	r0, [r7, #4]
 800c8a8:	f7f7 f91d 	bl	8003ae6 <_ZNKSt6vectorIfSaIfEE4sizeEv>
 800c8ac:	4603      	mov	r3, r0
 800c8ae:	009b      	lsls	r3, r3, #2
 800c8b0:	441c      	add	r4, r3
					  __x._M_impl._M_finish,
 800c8b2:	683b      	ldr	r3, [r7, #0]
 800c8b4:	685d      	ldr	r5, [r3, #4]
	      std::__uninitialized_copy_a(__x._M_impl._M_start + size(),
 800c8b6:	687b      	ldr	r3, [r7, #4]
 800c8b8:	685e      	ldr	r6, [r3, #4]
					  _M_get_Tp_allocator());
 800c8ba:	687b      	ldr	r3, [r7, #4]
 800c8bc:	4618      	mov	r0, r3
 800c8be:	f7f6 fef4 	bl	80036aa <_ZNSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>
 800c8c2:	4603      	mov	r3, r0
	      std::__uninitialized_copy_a(__x._M_impl._M_start + size(),
 800c8c4:	4632      	mov	r2, r6
 800c8c6:	4629      	mov	r1, r5
 800c8c8:	4620      	mov	r0, r4
 800c8ca:	f000 fd51 	bl	800d370 <_ZSt22__uninitialized_copy_aIPfS0_fET0_T_S2_S1_RSaIT1_E>
	  this->_M_impl._M_finish = this->_M_impl._M_start + __xlen;
 800c8ce:	687b      	ldr	r3, [r7, #4]
 800c8d0:	681a      	ldr	r2, [r3, #0]
 800c8d2:	68fb      	ldr	r3, [r7, #12]
 800c8d4:	009b      	lsls	r3, r3, #2
 800c8d6:	441a      	add	r2, r3
 800c8d8:	687b      	ldr	r3, [r7, #4]
 800c8da:	605a      	str	r2, [r3, #4]
      return *this;
 800c8dc:	687b      	ldr	r3, [r7, #4]
    }
 800c8de:	4618      	mov	r0, r3
 800c8e0:	3714      	adds	r7, #20
 800c8e2:	46bd      	mov	sp, r7
 800c8e4:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800c8e6 <_ZNSt12_Vector_baseIN3jlb4EdgeESaIS1_EE12_Vector_implC1Ev>:
	_Vector_impl() _GLIBCXX_NOEXCEPT_IF(
 800c8e6:	b580      	push	{r7, lr}
 800c8e8:	b082      	sub	sp, #8
 800c8ea:	af00      	add	r7, sp, #0
 800c8ec:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 800c8ee:	6878      	ldr	r0, [r7, #4]
 800c8f0:	f000 fd4f 	bl	800d392 <_ZNSaIN3jlb4EdgeEEC1Ev>
 800c8f4:	687b      	ldr	r3, [r7, #4]
 800c8f6:	4618      	mov	r0, r3
 800c8f8:	f000 fd57 	bl	800d3aa <_ZNSt12_Vector_baseIN3jlb4EdgeESaIS1_EE17_Vector_impl_dataC1Ev>
	{ }
 800c8fc:	687b      	ldr	r3, [r7, #4]
 800c8fe:	4618      	mov	r0, r3
 800c900:	3708      	adds	r7, #8
 800c902:	46bd      	mov	sp, r7
 800c904:	bd80      	pop	{r7, pc}

0800c906 <_ZNSaIN3jlb4EdgeEED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 800c906:	b480      	push	{r7}
 800c908:	b083      	sub	sp, #12
 800c90a:	af00      	add	r7, sp, #0
 800c90c:	6078      	str	r0, [r7, #4]
 800c90e:	687b      	ldr	r3, [r7, #4]
 800c910:	4618      	mov	r0, r3
 800c912:	370c      	adds	r7, #12
 800c914:	46bd      	mov	sp, r7
 800c916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c91a:	4770      	bx	lr

0800c91c <_ZNSt12_Vector_baseIN3jlb4EdgeESaIS1_EED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 800c91c:	b580      	push	{r7, lr}
 800c91e:	b082      	sub	sp, #8
 800c920:	af00      	add	r7, sp, #0
 800c922:	6078      	str	r0, [r7, #4]
	_M_deallocate(_M_impl._M_start,
 800c924:	687b      	ldr	r3, [r7, #4]
 800c926:	6819      	ldr	r1, [r3, #0]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 800c928:	687b      	ldr	r3, [r7, #4]
 800c92a:	689a      	ldr	r2, [r3, #8]
 800c92c:	687b      	ldr	r3, [r7, #4]
 800c92e:	681b      	ldr	r3, [r3, #0]
 800c930:	1ad3      	subs	r3, r2, r3
 800c932:	10db      	asrs	r3, r3, #3
 800c934:	4a07      	ldr	r2, [pc, #28]	; (800c954 <_ZNSt12_Vector_baseIN3jlb4EdgeESaIS1_EED1Ev+0x38>)
 800c936:	fb02 f303 	mul.w	r3, r2, r3
	_M_deallocate(_M_impl._M_start,
 800c93a:	461a      	mov	r2, r3
 800c93c:	6878      	ldr	r0, [r7, #4]
 800c93e:	f000 fd48 	bl	800d3d2 <_ZNSt12_Vector_baseIN3jlb4EdgeESaIS1_EE13_M_deallocateEPS1_j>
      }
 800c942:	687b      	ldr	r3, [r7, #4]
 800c944:	4618      	mov	r0, r3
 800c946:	f7f8 fdbb 	bl	80054c0 <_ZNSt12_Vector_baseIN3jlb4EdgeESaIS1_EE12_Vector_implD1Ev>
 800c94a:	687b      	ldr	r3, [r7, #4]
 800c94c:	4618      	mov	r0, r3
 800c94e:	3708      	adds	r7, #8
 800c950:	46bd      	mov	sp, r7
 800c952:	bd80      	pop	{r7, pc}
 800c954:	aaaaaaab 	.word	0xaaaaaaab

0800c958 <_ZNSt6vectorIN3jlb4EdgeESaIS1_EED1Ev>:
      ~vector() _GLIBCXX_NOEXCEPT
 800c958:	b5b0      	push	{r4, r5, r7, lr}
 800c95a:	b082      	sub	sp, #8
 800c95c:	af00      	add	r7, sp, #0
 800c95e:	6078      	str	r0, [r7, #4]
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 800c960:	687b      	ldr	r3, [r7, #4]
 800c962:	681c      	ldr	r4, [r3, #0]
 800c964:	687b      	ldr	r3, [r7, #4]
 800c966:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator());
 800c968:	687b      	ldr	r3, [r7, #4]
 800c96a:	4618      	mov	r0, r3
 800c96c:	f000 fd44 	bl	800d3f8 <_ZNSt12_Vector_baseIN3jlb4EdgeESaIS1_EE19_M_get_Tp_allocatorEv>
 800c970:	4603      	mov	r3, r0
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 800c972:	461a      	mov	r2, r3
 800c974:	4629      	mov	r1, r5
 800c976:	4620      	mov	r0, r4
 800c978:	f000 fd49 	bl	800d40e <_ZSt8_DestroyIPN3jlb4EdgeES1_EvT_S3_RSaIT0_E>
      }
 800c97c:	687b      	ldr	r3, [r7, #4]
 800c97e:	4618      	mov	r0, r3
 800c980:	f7ff ffcc 	bl	800c91c <_ZNSt12_Vector_baseIN3jlb4EdgeESaIS1_EED1Ev>
 800c984:	687b      	ldr	r3, [r7, #4]
 800c986:	4618      	mov	r0, r3
 800c988:	3708      	adds	r7, #8
 800c98a:	46bd      	mov	sp, r7
 800c98c:	bdb0      	pop	{r4, r5, r7, pc}

0800c98e <_ZNSt6vectorIcSaIcEEC1ERKS1_>:
      vector(const vector& __x)
 800c98e:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c990:	b085      	sub	sp, #20
 800c992:	af00      	add	r7, sp, #0
 800c994:	6078      	str	r0, [r7, #4]
 800c996:	6039      	str	r1, [r7, #0]
	_Alloc_traits::_S_select_on_copy(__x._M_get_Tp_allocator()))
 800c998:	687c      	ldr	r4, [r7, #4]
 800c99a:	6838      	ldr	r0, [r7, #0]
 800c99c:	f000 faf8 	bl	800cf90 <_ZNKSt6vectorIcSaIcEE4sizeEv>
 800c9a0:	4605      	mov	r5, r0
 800c9a2:	683b      	ldr	r3, [r7, #0]
 800c9a4:	4618      	mov	r0, r3
 800c9a6:	f000 fd4e 	bl	800d446 <_ZNKSt12_Vector_baseIcSaIcEE19_M_get_Tp_allocatorEv>
 800c9aa:	4602      	mov	r2, r0
 800c9ac:	f107 030c 	add.w	r3, r7, #12
 800c9b0:	4611      	mov	r1, r2
 800c9b2:	4618      	mov	r0, r3
 800c9b4:	f000 fd39 	bl	800d42a <_ZN9__gnu_cxx14__alloc_traitsISaIcEcE17_S_select_on_copyERKS1_>
 800c9b8:	f107 030c 	add.w	r3, r7, #12
 800c9bc:	461a      	mov	r2, r3
 800c9be:	4629      	mov	r1, r5
 800c9c0:	4620      	mov	r0, r4
 800c9c2:	f000 fd4b 	bl	800d45c <_ZNSt12_Vector_baseIcSaIcEEC1EjRKS0_>
 800c9c6:	f107 030c 	add.w	r3, r7, #12
 800c9ca:	4618      	mov	r0, r3
 800c9cc:	f014 fbed 	bl	80211aa <_ZNSaIcED1Ev>
	  std::__uninitialized_copy_a(__x.begin(), __x.end(),
 800c9d0:	6838      	ldr	r0, [r7, #0]
 800c9d2:	f000 fd57 	bl	800d484 <_ZNKSt6vectorIcSaIcEE5beginEv>
 800c9d6:	4605      	mov	r5, r0
 800c9d8:	6838      	ldr	r0, [r7, #0]
 800c9da:	f000 fd63 	bl	800d4a4 <_ZNKSt6vectorIcSaIcEE3endEv>
 800c9de:	4606      	mov	r6, r0
 800c9e0:	687b      	ldr	r3, [r7, #4]
 800c9e2:	681c      	ldr	r4, [r3, #0]
				      _M_get_Tp_allocator());
 800c9e4:	687b      	ldr	r3, [r7, #4]
 800c9e6:	4618      	mov	r0, r3
 800c9e8:	f000 fd6d 	bl	800d4c6 <_ZNSt12_Vector_baseIcSaIcEE19_M_get_Tp_allocatorEv>
 800c9ec:	4603      	mov	r3, r0
	  std::__uninitialized_copy_a(__x.begin(), __x.end(),
 800c9ee:	4622      	mov	r2, r4
 800c9f0:	4631      	mov	r1, r6
 800c9f2:	4628      	mov	r0, r5
 800c9f4:	f000 fd72 	bl	800d4dc <_ZSt22__uninitialized_copy_aIN9__gnu_cxx17__normal_iteratorIPKcSt6vectorIcSaIcEEEEPccET0_T_SA_S9_RSaIT1_E>
 800c9f8:	4602      	mov	r2, r0
	this->_M_impl._M_finish =
 800c9fa:	687b      	ldr	r3, [r7, #4]
 800c9fc:	605a      	str	r2, [r3, #4]
      }
 800c9fe:	687b      	ldr	r3, [r7, #4]
 800ca00:	4618      	mov	r0, r3
 800ca02:	3714      	adds	r7, #20
 800ca04:	46bd      	mov	sp, r7
 800ca06:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800ca08 <_ZNSt6vectorIcSaIcEED1Ev>:
      ~vector() _GLIBCXX_NOEXCEPT
 800ca08:	b5b0      	push	{r4, r5, r7, lr}
 800ca0a:	b082      	sub	sp, #8
 800ca0c:	af00      	add	r7, sp, #0
 800ca0e:	6078      	str	r0, [r7, #4]
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 800ca10:	687b      	ldr	r3, [r7, #4]
 800ca12:	681c      	ldr	r4, [r3, #0]
 800ca14:	687b      	ldr	r3, [r7, #4]
 800ca16:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator());
 800ca18:	687b      	ldr	r3, [r7, #4]
 800ca1a:	4618      	mov	r0, r3
 800ca1c:	f000 fd53 	bl	800d4c6 <_ZNSt12_Vector_baseIcSaIcEE19_M_get_Tp_allocatorEv>
 800ca20:	4603      	mov	r3, r0
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 800ca22:	461a      	mov	r2, r3
 800ca24:	4629      	mov	r1, r5
 800ca26:	4620      	mov	r0, r4
 800ca28:	f000 fd69 	bl	800d4fe <_ZSt8_DestroyIPccEvT_S1_RSaIT0_E>
      }
 800ca2c:	687b      	ldr	r3, [r7, #4]
 800ca2e:	4618      	mov	r0, r3
 800ca30:	f000 fa68 	bl	800cf04 <_ZNSt12_Vector_baseIcSaIcEED1Ev>
 800ca34:	687b      	ldr	r3, [r7, #4]
 800ca36:	4618      	mov	r0, r3
 800ca38:	3708      	adds	r7, #8
 800ca3a:	46bd      	mov	sp, r7
 800ca3c:	bdb0      	pop	{r4, r5, r7, pc}

0800ca3e <_ZNSt6vectorIN3jlb4EdgeESaIS1_EE9push_backEOS1_>:
      push_back(value_type&& __x)
 800ca3e:	b580      	push	{r7, lr}
 800ca40:	b082      	sub	sp, #8
 800ca42:	af00      	add	r7, sp, #0
 800ca44:	6078      	str	r0, [r7, #4]
 800ca46:	6039      	str	r1, [r7, #0]
      { emplace_back(std::move(__x)); }
 800ca48:	6838      	ldr	r0, [r7, #0]
 800ca4a:	f000 fd66 	bl	800d51a <_ZSt4moveIRN3jlb4EdgeEEONSt16remove_referenceIT_E4typeEOS4_>
 800ca4e:	4603      	mov	r3, r0
 800ca50:	4619      	mov	r1, r3
 800ca52:	6878      	ldr	r0, [r7, #4]
 800ca54:	f000 fd6c 	bl	800d530 <_ZNSt6vectorIN3jlb4EdgeESaIS1_EE12emplace_backIJS1_EEERS1_DpOT_>
 800ca58:	bf00      	nop
 800ca5a:	3708      	adds	r7, #8
 800ca5c:	46bd      	mov	sp, r7
 800ca5e:	bd80      	pop	{r7, pc}

0800ca60 <_ZNSt12_Vector_baseIN3jlb4NodeESaIS1_EE12_Vector_implC1Ev>:
	_Vector_impl() _GLIBCXX_NOEXCEPT_IF(
 800ca60:	b580      	push	{r7, lr}
 800ca62:	b082      	sub	sp, #8
 800ca64:	af00      	add	r7, sp, #0
 800ca66:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 800ca68:	6878      	ldr	r0, [r7, #4]
 800ca6a:	f000 fd94 	bl	800d596 <_ZNSaIN3jlb4NodeEEC1Ev>
 800ca6e:	687b      	ldr	r3, [r7, #4]
 800ca70:	4618      	mov	r0, r3
 800ca72:	f000 fd9c 	bl	800d5ae <_ZNSt12_Vector_baseIN3jlb4NodeESaIS1_EE17_Vector_impl_dataC1Ev>
	{ }
 800ca76:	687b      	ldr	r3, [r7, #4]
 800ca78:	4618      	mov	r0, r3
 800ca7a:	3708      	adds	r7, #8
 800ca7c:	46bd      	mov	sp, r7
 800ca7e:	bd80      	pop	{r7, pc}

0800ca80 <_ZNSaIN3jlb4NodeEED1Ev>:
 800ca80:	b480      	push	{r7}
 800ca82:	b083      	sub	sp, #12
 800ca84:	af00      	add	r7, sp, #0
 800ca86:	6078      	str	r0, [r7, #4]
 800ca88:	687b      	ldr	r3, [r7, #4]
 800ca8a:	4618      	mov	r0, r3
 800ca8c:	370c      	adds	r7, #12
 800ca8e:	46bd      	mov	sp, r7
 800ca90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca94:	4770      	bx	lr
	...

0800ca98 <_ZNSt12_Vector_baseIN3jlb4NodeESaIS1_EED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 800ca98:	b580      	push	{r7, lr}
 800ca9a:	b082      	sub	sp, #8
 800ca9c:	af00      	add	r7, sp, #0
 800ca9e:	6078      	str	r0, [r7, #4]
	_M_deallocate(_M_impl._M_start,
 800caa0:	687b      	ldr	r3, [r7, #4]
 800caa2:	6819      	ldr	r1, [r3, #0]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 800caa4:	687b      	ldr	r3, [r7, #4]
 800caa6:	689a      	ldr	r2, [r3, #8]
 800caa8:	687b      	ldr	r3, [r7, #4]
 800caaa:	681b      	ldr	r3, [r3, #0]
 800caac:	1ad3      	subs	r3, r2, r3
 800caae:	10db      	asrs	r3, r3, #3
 800cab0:	4a07      	ldr	r2, [pc, #28]	; (800cad0 <_ZNSt12_Vector_baseIN3jlb4NodeESaIS1_EED1Ev+0x38>)
 800cab2:	fb02 f303 	mul.w	r3, r2, r3
	_M_deallocate(_M_impl._M_start,
 800cab6:	461a      	mov	r2, r3
 800cab8:	6878      	ldr	r0, [r7, #4]
 800caba:	f000 fd8c 	bl	800d5d6 <_ZNSt12_Vector_baseIN3jlb4NodeESaIS1_EE13_M_deallocateEPS1_j>
      }
 800cabe:	687b      	ldr	r3, [r7, #4]
 800cac0:	4618      	mov	r0, r3
 800cac2:	f7f8 fd85 	bl	80055d0 <_ZNSt12_Vector_baseIN3jlb4NodeESaIS1_EE12_Vector_implD1Ev>
 800cac6:	687b      	ldr	r3, [r7, #4]
 800cac8:	4618      	mov	r0, r3
 800caca:	3708      	adds	r7, #8
 800cacc:	46bd      	mov	sp, r7
 800cace:	bd80      	pop	{r7, pc}
 800cad0:	aaaaaaab 	.word	0xaaaaaaab

0800cad4 <_ZNSt6vectorIN3jlb4NodeESaIS1_EED1Ev>:
      ~vector() _GLIBCXX_NOEXCEPT
 800cad4:	b5b0      	push	{r4, r5, r7, lr}
 800cad6:	b082      	sub	sp, #8
 800cad8:	af00      	add	r7, sp, #0
 800cada:	6078      	str	r0, [r7, #4]
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 800cadc:	687b      	ldr	r3, [r7, #4]
 800cade:	681c      	ldr	r4, [r3, #0]
 800cae0:	687b      	ldr	r3, [r7, #4]
 800cae2:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator());
 800cae4:	687b      	ldr	r3, [r7, #4]
 800cae6:	4618      	mov	r0, r3
 800cae8:	f000 fd88 	bl	800d5fc <_ZNSt12_Vector_baseIN3jlb4NodeESaIS1_EE19_M_get_Tp_allocatorEv>
 800caec:	4603      	mov	r3, r0
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 800caee:	461a      	mov	r2, r3
 800caf0:	4629      	mov	r1, r5
 800caf2:	4620      	mov	r0, r4
 800caf4:	f000 fd8d 	bl	800d612 <_ZSt8_DestroyIPN3jlb4NodeES1_EvT_S3_RSaIT0_E>
      }
 800caf8:	687b      	ldr	r3, [r7, #4]
 800cafa:	4618      	mov	r0, r3
 800cafc:	f7ff ffcc 	bl	800ca98 <_ZNSt12_Vector_baseIN3jlb4NodeESaIS1_EED1Ev>
 800cb00:	687b      	ldr	r3, [r7, #4]
 800cb02:	4618      	mov	r0, r3
 800cb04:	3708      	adds	r7, #8
 800cb06:	46bd      	mov	sp, r7
 800cb08:	bdb0      	pop	{r4, r5, r7, pc}

0800cb0a <_ZNSt6vectorIN3jlb4NodeESaIS1_EE9push_backEOS1_>:
      push_back(value_type&& __x)
 800cb0a:	b580      	push	{r7, lr}
 800cb0c:	b082      	sub	sp, #8
 800cb0e:	af00      	add	r7, sp, #0
 800cb10:	6078      	str	r0, [r7, #4]
 800cb12:	6039      	str	r1, [r7, #0]
      { emplace_back(std::move(__x)); }
 800cb14:	6838      	ldr	r0, [r7, #0]
 800cb16:	f000 fd8a 	bl	800d62e <_ZSt4moveIRN3jlb4NodeEEONSt16remove_referenceIT_E4typeEOS4_>
 800cb1a:	4603      	mov	r3, r0
 800cb1c:	4619      	mov	r1, r3
 800cb1e:	6878      	ldr	r0, [r7, #4]
 800cb20:	f000 fd90 	bl	800d644 <_ZNSt6vectorIN3jlb4NodeESaIS1_EE12emplace_backIJS1_EEERS1_DpOT_>
 800cb24:	bf00      	nop
 800cb26:	3708      	adds	r7, #8
 800cb28:	46bd      	mov	sp, r7
 800cb2a:	bd80      	pop	{r7, pc}

0800cb2c <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>:
      vector(initializer_list<value_type> __l,
 800cb2c:	b5b0      	push	{r4, r5, r7, lr}
 800cb2e:	b086      	sub	sp, #24
 800cb30:	af00      	add	r7, sp, #0
 800cb32:	60f8      	str	r0, [r7, #12]
 800cb34:	1d38      	adds	r0, r7, #4
 800cb36:	e880 0006 	stmia.w	r0, {r1, r2}
 800cb3a:	603b      	str	r3, [r7, #0]
      : _Base(__a)
 800cb3c:	68fb      	ldr	r3, [r7, #12]
 800cb3e:	6839      	ldr	r1, [r7, #0]
 800cb40:	4618      	mov	r0, r3
 800cb42:	f000 fdb2 	bl	800d6aa <_ZNSt12_Vector_baseIcSaIcEEC1ERKS0_>
	_M_range_initialize(__l.begin(), __l.end(),
 800cb46:	1d3b      	adds	r3, r7, #4
 800cb48:	4618      	mov	r0, r3
 800cb4a:	f000 fdbd 	bl	800d6c8 <_ZNKSt16initializer_listIcE5beginEv>
 800cb4e:	4604      	mov	r4, r0
 800cb50:	1d3b      	adds	r3, r7, #4
 800cb52:	4618      	mov	r0, r3
 800cb54:	f000 fdc4 	bl	800d6e0 <_ZNKSt16initializer_listIcE3endEv>
 800cb58:	4602      	mov	r2, r0
 800cb5a:	462b      	mov	r3, r5
 800cb5c:	4621      	mov	r1, r4
 800cb5e:	68f8      	ldr	r0, [r7, #12]
 800cb60:	f000 fde3 	bl	800d72a <_ZNSt6vectorIcSaIcEE19_M_range_initializeIPKcEEvT_S5_St20forward_iterator_tag>
      }
 800cb64:	68fb      	ldr	r3, [r7, #12]
 800cb66:	4618      	mov	r0, r3
 800cb68:	3718      	adds	r7, #24
 800cb6a:	46bd      	mov	sp, r7
 800cb6c:	bdb0      	pop	{r4, r5, r7, pc}

0800cb6e <_ZNSt6vectorIN3jlb4NodeESaIS1_EEixEj>:
      operator[](size_type __n) _GLIBCXX_NOEXCEPT
 800cb6e:	b480      	push	{r7}
 800cb70:	b083      	sub	sp, #12
 800cb72:	af00      	add	r7, sp, #0
 800cb74:	6078      	str	r0, [r7, #4]
 800cb76:	6039      	str	r1, [r7, #0]
	return *(this->_M_impl._M_start + __n);
 800cb78:	687b      	ldr	r3, [r7, #4]
 800cb7a:	6819      	ldr	r1, [r3, #0]
 800cb7c:	683a      	ldr	r2, [r7, #0]
 800cb7e:	4613      	mov	r3, r2
 800cb80:	005b      	lsls	r3, r3, #1
 800cb82:	4413      	add	r3, r2
 800cb84:	00db      	lsls	r3, r3, #3
 800cb86:	440b      	add	r3, r1
      }
 800cb88:	4618      	mov	r0, r3
 800cb8a:	370c      	adds	r7, #12
 800cb8c:	46bd      	mov	sp, r7
 800cb8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb92:	4770      	bx	lr

0800cb94 <_ZNSt11_Deque_baseIfSaIfEE11_Deque_implD1Ev>:
      struct _Deque_impl
 800cb94:	b580      	push	{r7, lr}
 800cb96:	b082      	sub	sp, #8
 800cb98:	af00      	add	r7, sp, #0
 800cb9a:	6078      	str	r0, [r7, #4]
 800cb9c:	6878      	ldr	r0, [r7, #4]
 800cb9e:	f7f6 fcdf 	bl	8003560 <_ZNSaIfED1Ev>
 800cba2:	687b      	ldr	r3, [r7, #4]
 800cba4:	4618      	mov	r0, r3
 800cba6:	3708      	adds	r7, #8
 800cba8:	46bd      	mov	sp, r7
 800cbaa:	bd80      	pop	{r7, pc}

0800cbac <_ZNSt11_Deque_baseIfSaIfEEC1Ev>:
      _Deque_base()
 800cbac:	b580      	push	{r7, lr}
 800cbae:	b082      	sub	sp, #8
 800cbb0:	af00      	add	r7, sp, #0
 800cbb2:	6078      	str	r0, [r7, #4]
      : _M_impl()
 800cbb4:	687b      	ldr	r3, [r7, #4]
 800cbb6:	4618      	mov	r0, r3
 800cbb8:	f000 fdef 	bl	800d79a <_ZNSt11_Deque_baseIfSaIfEE11_Deque_implC1Ev>
      { _M_initialize_map(0); }
 800cbbc:	2100      	movs	r1, #0
 800cbbe:	6878      	ldr	r0, [r7, #4]
 800cbc0:	f000 fdfb 	bl	800d7ba <_ZNSt11_Deque_baseIfSaIfEE17_M_initialize_mapEj>
 800cbc4:	687b      	ldr	r3, [r7, #4]
 800cbc6:	4618      	mov	r0, r3
 800cbc8:	3708      	adds	r7, #8
 800cbca:	46bd      	mov	sp, r7
 800cbcc:	bd80      	pop	{r7, pc}

0800cbce <_ZNSt11_Deque_baseIfSaIfEED1Ev>:
    _Deque_base<_Tp, _Alloc>::
 800cbce:	b580      	push	{r7, lr}
 800cbd0:	b082      	sub	sp, #8
 800cbd2:	af00      	add	r7, sp, #0
 800cbd4:	6078      	str	r0, [r7, #4]
      if (this->_M_impl._M_map)
 800cbd6:	687b      	ldr	r3, [r7, #4]
 800cbd8:	681b      	ldr	r3, [r3, #0]
 800cbda:	2b00      	cmp	r3, #0
 800cbdc:	d010      	beq.n	800cc00 <_ZNSt11_Deque_baseIfSaIfEED1Ev+0x32>
	  _M_destroy_nodes(this->_M_impl._M_start._M_node,
 800cbde:	687b      	ldr	r3, [r7, #4]
 800cbe0:	6959      	ldr	r1, [r3, #20]
			   this->_M_impl._M_finish._M_node + 1);
 800cbe2:	687b      	ldr	r3, [r7, #4]
 800cbe4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	  _M_destroy_nodes(this->_M_impl._M_start._M_node,
 800cbe6:	3304      	adds	r3, #4
 800cbe8:	461a      	mov	r2, r3
 800cbea:	6878      	ldr	r0, [r7, #4]
 800cbec:	f000 fe48 	bl	800d880 <_ZNSt11_Deque_baseIfSaIfEE16_M_destroy_nodesEPPfS3_>
	  _M_deallocate_map(this->_M_impl._M_map, this->_M_impl._M_map_size);
 800cbf0:	687b      	ldr	r3, [r7, #4]
 800cbf2:	6819      	ldr	r1, [r3, #0]
 800cbf4:	687b      	ldr	r3, [r7, #4]
 800cbf6:	685b      	ldr	r3, [r3, #4]
 800cbf8:	461a      	mov	r2, r3
 800cbfa:	6878      	ldr	r0, [r7, #4]
 800cbfc:	f000 fe5b 	bl	800d8b6 <_ZNSt11_Deque_baseIfSaIfEE17_M_deallocate_mapEPPfj>
    }
 800cc00:	687b      	ldr	r3, [r7, #4]
 800cc02:	4618      	mov	r0, r3
 800cc04:	f7ff ffc6 	bl	800cb94 <_ZNSt11_Deque_baseIfSaIfEE11_Deque_implD1Ev>
 800cc08:	687b      	ldr	r3, [r7, #4]
 800cc0a:	4618      	mov	r0, r3
 800cc0c:	3708      	adds	r7, #8
 800cc0e:	46bd      	mov	sp, r7
 800cc10:	bd80      	pop	{r7, pc}

0800cc12 <_ZNSt5dequeIfSaIfEED1Ev>:
      /**
       *  The dtor only erases the elements, and note that if the elements
       *  themselves are pointers, the pointed-to memory is not touched in any
       *  way.  Managing the pointer is the user's responsibility.
       */
      ~deque()
 800cc12:	b580      	push	{r7, lr}
 800cc14:	b08a      	sub	sp, #40	; 0x28
 800cc16:	af00      	add	r7, sp, #0
 800cc18:	6078      	str	r0, [r7, #4]
      { _M_destroy_data(begin(), end(), _M_get_Tp_allocator()); }
 800cc1a:	f107 0308 	add.w	r3, r7, #8
 800cc1e:	6879      	ldr	r1, [r7, #4]
 800cc20:	4618      	mov	r0, r3
 800cc22:	f000 f871 	bl	800cd08 <_ZNSt5dequeIfSaIfEE5beginEv>
 800cc26:	f107 0318 	add.w	r3, r7, #24
 800cc2a:	6879      	ldr	r1, [r7, #4]
 800cc2c:	4618      	mov	r0, r3
 800cc2e:	f000 f87a 	bl	800cd26 <_ZNSt5dequeIfSaIfEE3endEv>
 800cc32:	687b      	ldr	r3, [r7, #4]
 800cc34:	4618      	mov	r0, r3
 800cc36:	f000 fe59 	bl	800d8ec <_ZNSt11_Deque_baseIfSaIfEE19_M_get_Tp_allocatorEv>
 800cc3a:	4603      	mov	r3, r0
 800cc3c:	f107 0218 	add.w	r2, r7, #24
 800cc40:	f107 0108 	add.w	r1, r7, #8
 800cc44:	6878      	ldr	r0, [r7, #4]
 800cc46:	f000 fe5c 	bl	800d902 <_ZNSt5dequeIfSaIfEE15_M_destroy_dataESt15_Deque_iteratorIfRfPfES5_RKS0_>
 800cc4a:	687b      	ldr	r3, [r7, #4]
 800cc4c:	4618      	mov	r0, r3
 800cc4e:	f7ff ffbe 	bl	800cbce <_ZNSt11_Deque_baseIfSaIfEED1Ev>
 800cc52:	687b      	ldr	r3, [r7, #4]
 800cc54:	4618      	mov	r0, r3
 800cc56:	3728      	adds	r7, #40	; 0x28
 800cc58:	46bd      	mov	sp, r7
 800cc5a:	bd80      	pop	{r7, pc}

0800cc5c <_ZNSt5dequeIfSaIfEE9push_backERKf>:
       *  element at the end of the %deque and assigns the given data
       *  to it.  Due to the nature of a %deque this operation can be
       *  done in constant time.
       */
      void
      push_back(const value_type& __x)
 800cc5c:	b580      	push	{r7, lr}
 800cc5e:	b082      	sub	sp, #8
 800cc60:	af00      	add	r7, sp, #0
 800cc62:	6078      	str	r0, [r7, #4]
 800cc64:	6039      	str	r1, [r7, #0]
      {
	if (this->_M_impl._M_finish._M_cur
 800cc66:	687b      	ldr	r3, [r7, #4]
 800cc68:	699a      	ldr	r2, [r3, #24]
	    != this->_M_impl._M_finish._M_last - 1)
 800cc6a:	687b      	ldr	r3, [r7, #4]
 800cc6c:	6a1b      	ldr	r3, [r3, #32]
 800cc6e:	3b04      	subs	r3, #4
	if (this->_M_impl._M_finish._M_cur
 800cc70:	429a      	cmp	r2, r3
 800cc72:	d00c      	beq.n	800cc8e <_ZNSt5dequeIfSaIfEE9push_backERKf+0x32>
	  {
	    _Alloc_traits::construct(this->_M_impl,
 800cc74:	6878      	ldr	r0, [r7, #4]
 800cc76:	687b      	ldr	r3, [r7, #4]
 800cc78:	699b      	ldr	r3, [r3, #24]
 800cc7a:	683a      	ldr	r2, [r7, #0]
 800cc7c:	4619      	mov	r1, r3
 800cc7e:	f7f6 fd63 	bl	8003748 <_ZNSt16allocator_traitsISaIfEE9constructIfJRKfEEEvRS0_PT_DpOT0_>
				     this->_M_impl._M_finish._M_cur, __x);
	    ++this->_M_impl._M_finish._M_cur;
 800cc82:	687b      	ldr	r3, [r7, #4]
 800cc84:	699b      	ldr	r3, [r3, #24]
 800cc86:	1d1a      	adds	r2, r3, #4
 800cc88:	687b      	ldr	r3, [r7, #4]
 800cc8a:	619a      	str	r2, [r3, #24]
	  }
	else
	  _M_push_back_aux(__x);
      }
 800cc8c:	e003      	b.n	800cc96 <_ZNSt5dequeIfSaIfEE9push_backERKf+0x3a>
	  _M_push_back_aux(__x);
 800cc8e:	6839      	ldr	r1, [r7, #0]
 800cc90:	6878      	ldr	r0, [r7, #4]
 800cc92:	f000 fe43 	bl	800d91c <_ZNSt5dequeIfSaIfEE16_M_push_back_auxIJRKfEEEvDpOT_>
      }
 800cc96:	bf00      	nop
 800cc98:	3708      	adds	r7, #8
 800cc9a:	46bd      	mov	sp, r7
 800cc9c:	bd80      	pop	{r7, pc}

0800cc9e <_ZNKSt5dequeIfSaIfEE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 800cc9e:	b580      	push	{r7, lr}
 800cca0:	b082      	sub	sp, #8
 800cca2:	af00      	add	r7, sp, #0
 800cca4:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_finish - this->_M_impl._M_start; }
 800cca6:	687b      	ldr	r3, [r7, #4]
 800cca8:	f103 0218 	add.w	r2, r3, #24
 800ccac:	687b      	ldr	r3, [r7, #4]
 800ccae:	3308      	adds	r3, #8
 800ccb0:	4619      	mov	r1, r3
 800ccb2:	4610      	mov	r0, r2
 800ccb4:	f000 fe76 	bl	800d9a4 <_ZStmiRKSt15_Deque_iteratorIfRfPfES4_>
 800ccb8:	4603      	mov	r3, r0
 800ccba:	4618      	mov	r0, r3
 800ccbc:	3708      	adds	r7, #8
 800ccbe:	46bd      	mov	sp, r7
 800ccc0:	bd80      	pop	{r7, pc}

0800ccc2 <_ZNSt5dequeIfSaIfEE9pop_frontEv>:
       *
       *  Note that no data is returned, and if the first element's data is
       *  needed, it should be retrieved before pop_front() is called.
       */
      void
      pop_front() _GLIBCXX_NOEXCEPT
 800ccc2:	b580      	push	{r7, lr}
 800ccc4:	b082      	sub	sp, #8
 800ccc6:	af00      	add	r7, sp, #0
 800ccc8:	6078      	str	r0, [r7, #4]
      {
	__glibcxx_requires_nonempty();
	if (this->_M_impl._M_start._M_cur
 800ccca:	687b      	ldr	r3, [r7, #4]
 800cccc:	689a      	ldr	r2, [r3, #8]
	    != this->_M_impl._M_start._M_last - 1)
 800ccce:	687b      	ldr	r3, [r7, #4]
 800ccd0:	691b      	ldr	r3, [r3, #16]
 800ccd2:	3b04      	subs	r3, #4
	if (this->_M_impl._M_start._M_cur
 800ccd4:	429a      	cmp	r2, r3
 800ccd6:	d010      	beq.n	800ccfa <_ZNSt5dequeIfSaIfEE9pop_frontEv+0x38>
	  {
	    _Alloc_traits::destroy(_M_get_Tp_allocator(),
 800ccd8:	687b      	ldr	r3, [r7, #4]
 800ccda:	4618      	mov	r0, r3
 800ccdc:	f000 fe06 	bl	800d8ec <_ZNSt11_Deque_baseIfSaIfEE19_M_get_Tp_allocatorEv>
 800cce0:	4602      	mov	r2, r0
 800cce2:	687b      	ldr	r3, [r7, #4]
 800cce4:	689b      	ldr	r3, [r3, #8]
 800cce6:	4619      	mov	r1, r3
 800cce8:	4610      	mov	r0, r2
 800ccea:	f000 fe87 	bl	800d9fc <_ZNSt16allocator_traitsISaIfEE7destroyIfEEvRS0_PT_>
				   this->_M_impl._M_start._M_cur);
	    ++this->_M_impl._M_start._M_cur;
 800ccee:	687b      	ldr	r3, [r7, #4]
 800ccf0:	689b      	ldr	r3, [r3, #8]
 800ccf2:	1d1a      	adds	r2, r3, #4
 800ccf4:	687b      	ldr	r3, [r7, #4]
 800ccf6:	609a      	str	r2, [r3, #8]
	  }
	else
	  _M_pop_front_aux();
      }
 800ccf8:	e002      	b.n	800cd00 <_ZNSt5dequeIfSaIfEE9pop_frontEv+0x3e>
	  _M_pop_front_aux();
 800ccfa:	6878      	ldr	r0, [r7, #4]
 800ccfc:	f000 fe8a 	bl	800da14 <_ZNSt5dequeIfSaIfEE16_M_pop_front_auxEv>
      }
 800cd00:	bf00      	nop
 800cd02:	3708      	adds	r7, #8
 800cd04:	46bd      	mov	sp, r7
 800cd06:	bd80      	pop	{r7, pc}

0800cd08 <_ZNSt5dequeIfSaIfEE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 800cd08:	b580      	push	{r7, lr}
 800cd0a:	b082      	sub	sp, #8
 800cd0c:	af00      	add	r7, sp, #0
 800cd0e:	6078      	str	r0, [r7, #4]
 800cd10:	6039      	str	r1, [r7, #0]
      { return this->_M_impl._M_start; }
 800cd12:	683b      	ldr	r3, [r7, #0]
 800cd14:	3308      	adds	r3, #8
 800cd16:	4619      	mov	r1, r3
 800cd18:	6878      	ldr	r0, [r7, #4]
 800cd1a:	f000 fea3 	bl	800da64 <_ZNSt15_Deque_iteratorIfRfPfEC1ERKS2_>
 800cd1e:	6878      	ldr	r0, [r7, #4]
 800cd20:	3708      	adds	r7, #8
 800cd22:	46bd      	mov	sp, r7
 800cd24:	bd80      	pop	{r7, pc}

0800cd26 <_ZNSt5dequeIfSaIfEE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 800cd26:	b580      	push	{r7, lr}
 800cd28:	b082      	sub	sp, #8
 800cd2a:	af00      	add	r7, sp, #0
 800cd2c:	6078      	str	r0, [r7, #4]
 800cd2e:	6039      	str	r1, [r7, #0]
      { return this->_M_impl._M_finish; }
 800cd30:	683b      	ldr	r3, [r7, #0]
 800cd32:	3318      	adds	r3, #24
 800cd34:	4619      	mov	r1, r3
 800cd36:	6878      	ldr	r0, [r7, #4]
 800cd38:	f000 fe94 	bl	800da64 <_ZNSt15_Deque_iteratorIfRfPfEC1ERKS2_>
 800cd3c:	6878      	ldr	r0, [r7, #4]
 800cd3e:	3708      	adds	r7, #8
 800cd40:	46bd      	mov	sp, r7
 800cd42:	bd80      	pop	{r7, pc}

0800cd44 <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>:
   *  @return The parameter cast to an rvalue-reference to allow moving it.
  */
  template<typename _Tp>
    _GLIBCXX_NODISCARD
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
 800cd44:	b480      	push	{r7}
 800cd46:	b083      	sub	sp, #12
 800cd48:	af00      	add	r7, sp, #0
 800cd4a:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800cd4c:	687b      	ldr	r3, [r7, #4]
 800cd4e:	4618      	mov	r0, r3
 800cd50:	370c      	adds	r7, #12
 800cd52:	46bd      	mov	sp, r7
 800cd54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd58:	4770      	bx	lr

0800cd5a <_ZSt10accumulateISt15_Deque_iteratorIfRfPfEfET0_T_S5_S4_>:
   *  @return  The final sum.
   */
  template<typename _InputIterator, typename _Tp>
    _GLIBCXX20_CONSTEXPR
    inline _Tp
    accumulate(_InputIterator __first, _InputIterator __last, _Tp __init)
 800cd5a:	b580      	push	{r7, lr}
 800cd5c:	ed2d 8b02 	vpush	{d8}
 800cd60:	b084      	sub	sp, #16
 800cd62:	af00      	add	r7, sp, #0
 800cd64:	60f8      	str	r0, [r7, #12]
 800cd66:	60b9      	str	r1, [r7, #8]
 800cd68:	ed87 0a01 	vstr	s0, [r7, #4]
    {
      // concept requirements
      __glibcxx_function_requires(_InputIteratorConcept<_InputIterator>)
      __glibcxx_requires_valid_range(__first, __last);

      for (; __first != __last; ++__first)
 800cd6c:	e013      	b.n	800cd96 <_ZSt10accumulateISt15_Deque_iteratorIfRfPfEfET0_T_S5_S4_+0x3c>
	__init = _GLIBCXX_MOVE_IF_20(__init) + *__first;
 800cd6e:	1d3b      	adds	r3, r7, #4
 800cd70:	4618      	mov	r0, r3
 800cd72:	f7ff ffe7 	bl	800cd44 <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>
 800cd76:	4603      	mov	r3, r0
 800cd78:	ed93 8a00 	vldr	s16, [r3]
 800cd7c:	68f8      	ldr	r0, [r7, #12]
 800cd7e:	f000 fec0 	bl	800db02 <_ZNKSt15_Deque_iteratorIfRfPfEdeEv>
 800cd82:	4603      	mov	r3, r0
 800cd84:	edd3 7a00 	vldr	s15, [r3]
 800cd88:	ee78 7a27 	vadd.f32	s15, s16, s15
 800cd8c:	edc7 7a01 	vstr	s15, [r7, #4]
      for (; __first != __last; ++__first)
 800cd90:	68f8      	ldr	r0, [r7, #12]
 800cd92:	f000 fe97 	bl	800dac4 <_ZNSt15_Deque_iteratorIfRfPfEppEv>
 800cd96:	68b9      	ldr	r1, [r7, #8]
 800cd98:	68f8      	ldr	r0, [r7, #12]
 800cd9a:	f000 fe7f 	bl	800da9c <_ZSteqRKSt15_Deque_iteratorIfRfPfES4_>
 800cd9e:	4603      	mov	r3, r0
 800cda0:	f083 0301 	eor.w	r3, r3, #1
 800cda4:	b2db      	uxtb	r3, r3
 800cda6:	2b00      	cmp	r3, #0
 800cda8:	d1e1      	bne.n	800cd6e <_ZSt10accumulateISt15_Deque_iteratorIfRfPfEfET0_T_S5_S4_+0x14>
      return __init;
 800cdaa:	687b      	ldr	r3, [r7, #4]
 800cdac:	ee07 3a90 	vmov	s15, r3
    }
 800cdb0:	eeb0 0a67 	vmov.f32	s0, s15
 800cdb4:	3710      	adds	r7, #16
 800cdb6:	46bd      	mov	sp, r7
 800cdb8:	ecbd 8b02 	vpop	{d8}
 800cdbc:	bd80      	pop	{r7, pc}

0800cdbe <_ZSt3minIfET_St16initializer_listIS0_E>:
    min(initializer_list<_Tp> __l)
 800cdbe:	b590      	push	{r4, r7, lr}
 800cdc0:	b083      	sub	sp, #12
 800cdc2:	af00      	add	r7, sp, #0
 800cdc4:	463b      	mov	r3, r7
 800cdc6:	e883 0003 	stmia.w	r3, {r0, r1}
    { return *std::min_element(__l.begin(), __l.end()); }
 800cdca:	463b      	mov	r3, r7
 800cdcc:	4618      	mov	r0, r3
 800cdce:	f000 fea4 	bl	800db1a <_ZNKSt16initializer_listIfE5beginEv>
 800cdd2:	4604      	mov	r4, r0
 800cdd4:	463b      	mov	r3, r7
 800cdd6:	4618      	mov	r0, r3
 800cdd8:	f000 feab 	bl	800db32 <_ZNKSt16initializer_listIfE3endEv>
 800cddc:	4603      	mov	r3, r0
 800cdde:	4619      	mov	r1, r3
 800cde0:	4620      	mov	r0, r4
 800cde2:	f000 feb8 	bl	800db56 <_ZSt11min_elementIPKfET_S2_S2_>
 800cde6:	4603      	mov	r3, r0
 800cde8:	681b      	ldr	r3, [r3, #0]
 800cdea:	ee07 3a90 	vmov	s15, r3
 800cdee:	eeb0 0a67 	vmov.f32	s0, s15
 800cdf2:	370c      	adds	r7, #12
 800cdf4:	46bd      	mov	sp, r7
 800cdf6:	bd90      	pop	{r4, r7, pc}

0800cdf8 <_ZNKSt6vectorIN3jlb4EdgeESaIS1_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 800cdf8:	b480      	push	{r7}
 800cdfa:	b083      	sub	sp, #12
 800cdfc:	af00      	add	r7, sp, #0
 800cdfe:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 800ce00:	687b      	ldr	r3, [r7, #4]
 800ce02:	685a      	ldr	r2, [r3, #4]
 800ce04:	687b      	ldr	r3, [r7, #4]
 800ce06:	681b      	ldr	r3, [r3, #0]
 800ce08:	1ad3      	subs	r3, r2, r3
 800ce0a:	10db      	asrs	r3, r3, #3
 800ce0c:	4a04      	ldr	r2, [pc, #16]	; (800ce20 <_ZNKSt6vectorIN3jlb4EdgeESaIS1_EE4sizeEv+0x28>)
 800ce0e:	fb02 f303 	mul.w	r3, r2, r3
 800ce12:	4618      	mov	r0, r3
 800ce14:	370c      	adds	r7, #12
 800ce16:	46bd      	mov	sp, r7
 800ce18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce1c:	4770      	bx	lr
 800ce1e:	bf00      	nop
 800ce20:	aaaaaaab 	.word	0xaaaaaaab

0800ce24 <_ZNSt6vectorIN3jlb4EdgeESaIS1_EEixEj>:
      operator[](size_type __n) _GLIBCXX_NOEXCEPT
 800ce24:	b480      	push	{r7}
 800ce26:	b083      	sub	sp, #12
 800ce28:	af00      	add	r7, sp, #0
 800ce2a:	6078      	str	r0, [r7, #4]
 800ce2c:	6039      	str	r1, [r7, #0]
	return *(this->_M_impl._M_start + __n);
 800ce2e:	687b      	ldr	r3, [r7, #4]
 800ce30:	6819      	ldr	r1, [r3, #0]
 800ce32:	683a      	ldr	r2, [r7, #0]
 800ce34:	4613      	mov	r3, r2
 800ce36:	005b      	lsls	r3, r3, #1
 800ce38:	4413      	add	r3, r2
 800ce3a:	00db      	lsls	r3, r3, #3
 800ce3c:	440b      	add	r3, r1
      }
 800ce3e:	4618      	mov	r0, r3
 800ce40:	370c      	adds	r7, #12
 800ce42:	46bd      	mov	sp, r7
 800ce44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce48:	4770      	bx	lr

0800ce4a <_ZNSt6vectorIcSaIcEE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 800ce4a:	b580      	push	{r7, lr}
 800ce4c:	b084      	sub	sp, #16
 800ce4e:	af00      	add	r7, sp, #0
 800ce50:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_start); }
 800ce52:	687a      	ldr	r2, [r7, #4]
 800ce54:	f107 030c 	add.w	r3, r7, #12
 800ce58:	4611      	mov	r1, r2
 800ce5a:	4618      	mov	r0, r3
 800ce5c:	f000 fe8c 	bl	800db78 <_ZN9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEC1ERKS1_>
 800ce60:	68fb      	ldr	r3, [r7, #12]
 800ce62:	4618      	mov	r0, r3
 800ce64:	3710      	adds	r7, #16
 800ce66:	46bd      	mov	sp, r7
 800ce68:	bd80      	pop	{r7, pc}

0800ce6a <_ZNSt6vectorIcSaIcEE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 800ce6a:	b580      	push	{r7, lr}
 800ce6c:	b084      	sub	sp, #16
 800ce6e:	af00      	add	r7, sp, #0
 800ce70:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_finish); }
 800ce72:	687b      	ldr	r3, [r7, #4]
 800ce74:	1d1a      	adds	r2, r3, #4
 800ce76:	f107 030c 	add.w	r3, r7, #12
 800ce7a:	4611      	mov	r1, r2
 800ce7c:	4618      	mov	r0, r3
 800ce7e:	f000 fe7b 	bl	800db78 <_ZN9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEC1ERKS1_>
 800ce82:	68fb      	ldr	r3, [r7, #12]
 800ce84:	4618      	mov	r0, r3
 800ce86:	3710      	adds	r7, #16
 800ce88:	46bd      	mov	sp, r7
 800ce8a:	bd80      	pop	{r7, pc}

0800ce8c <_ZSt4findIN9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEEcET_S7_S7_RKT0_>:
    find(_InputIterator __first, _InputIterator __last,
 800ce8c:	b580      	push	{r7, lr}
 800ce8e:	b084      	sub	sp, #16
 800ce90:	af00      	add	r7, sp, #0
 800ce92:	60f8      	str	r0, [r7, #12]
 800ce94:	60b9      	str	r1, [r7, #8]
 800ce96:	607a      	str	r2, [r7, #4]
      return std::__find_if(__first, __last,
 800ce98:	6878      	ldr	r0, [r7, #4]
 800ce9a:	f000 fe7d 	bl	800db98 <_ZN9__gnu_cxx5__ops17__iter_equals_valIKcEENS0_16_Iter_equals_valIT_EERS4_>
 800ce9e:	4603      	mov	r3, r0
 800cea0:	461a      	mov	r2, r3
 800cea2:	68b9      	ldr	r1, [r7, #8]
 800cea4:	68f8      	ldr	r0, [r7, #12]
 800cea6:	f000 fe86 	bl	800dbb6 <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEENS0_5__ops16_Iter_equals_valIKcEEET_SB_SB_T0_>
 800ceaa:	4603      	mov	r3, r0
    }
 800ceac:	4618      	mov	r0, r3
 800ceae:	3710      	adds	r7, #16
 800ceb0:	46bd      	mov	sp, r7
 800ceb2:	bd80      	pop	{r7, pc}

0800ceb4 <_ZN9__gnu_cxxeqIPcSt6vectorIcSaIcEEEEbRKNS_17__normal_iteratorIT_T0_EESA_>:
    operator==(const __normal_iterator<_Iterator, _Container>& __lhs,
 800ceb4:	b590      	push	{r4, r7, lr}
 800ceb6:	b083      	sub	sp, #12
 800ceb8:	af00      	add	r7, sp, #0
 800ceba:	6078      	str	r0, [r7, #4]
 800cebc:	6039      	str	r1, [r7, #0]
    { return __lhs.base() == __rhs.base(); }
 800cebe:	6878      	ldr	r0, [r7, #4]
 800cec0:	f7fc fb17 	bl	80094f2 <_ZNK9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEE4baseEv>
 800cec4:	4603      	mov	r3, r0
 800cec6:	681c      	ldr	r4, [r3, #0]
 800cec8:	6838      	ldr	r0, [r7, #0]
 800ceca:	f7fc fb12 	bl	80094f2 <_ZNK9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEE4baseEv>
 800cece:	4603      	mov	r3, r0
 800ced0:	681b      	ldr	r3, [r3, #0]
 800ced2:	429c      	cmp	r4, r3
 800ced4:	bf0c      	ite	eq
 800ced6:	2301      	moveq	r3, #1
 800ced8:	2300      	movne	r3, #0
 800ceda:	b2db      	uxtb	r3, r3
 800cedc:	4618      	mov	r0, r3
 800cede:	370c      	adds	r7, #12
 800cee0:	46bd      	mov	sp, r7
 800cee2:	bd90      	pop	{r4, r7, pc}

0800cee4 <_ZNSt12_Vector_baseIcSaIcEE12_Vector_implC1Ev>:
	_Vector_impl() _GLIBCXX_NOEXCEPT_IF(
 800cee4:	b580      	push	{r7, lr}
 800cee6:	b082      	sub	sp, #8
 800cee8:	af00      	add	r7, sp, #0
 800ceea:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 800ceec:	6878      	ldr	r0, [r7, #4]
 800ceee:	f014 f95a 	bl	80211a6 <_ZNSaIcEC1Ev>
 800cef2:	687b      	ldr	r3, [r7, #4]
 800cef4:	4618      	mov	r0, r3
 800cef6:	f000 fe74 	bl	800dbe2 <_ZNSt12_Vector_baseIcSaIcEE17_Vector_impl_dataC1Ev>
	{ }
 800cefa:	687b      	ldr	r3, [r7, #4]
 800cefc:	4618      	mov	r0, r3
 800cefe:	3708      	adds	r7, #8
 800cf00:	46bd      	mov	sp, r7
 800cf02:	bd80      	pop	{r7, pc}

0800cf04 <_ZNSt12_Vector_baseIcSaIcEED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 800cf04:	b580      	push	{r7, lr}
 800cf06:	b082      	sub	sp, #8
 800cf08:	af00      	add	r7, sp, #0
 800cf0a:	6078      	str	r0, [r7, #4]
	_M_deallocate(_M_impl._M_start,
 800cf0c:	687b      	ldr	r3, [r7, #4]
 800cf0e:	6819      	ldr	r1, [r3, #0]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 800cf10:	687b      	ldr	r3, [r7, #4]
 800cf12:	689a      	ldr	r2, [r3, #8]
 800cf14:	687b      	ldr	r3, [r7, #4]
 800cf16:	681b      	ldr	r3, [r3, #0]
 800cf18:	1ad3      	subs	r3, r2, r3
	_M_deallocate(_M_impl._M_start,
 800cf1a:	461a      	mov	r2, r3
 800cf1c:	6878      	ldr	r0, [r7, #4]
 800cf1e:	f000 fe74 	bl	800dc0a <_ZNSt12_Vector_baseIcSaIcEE13_M_deallocateEPcj>
      }
 800cf22:	687b      	ldr	r3, [r7, #4]
 800cf24:	4618      	mov	r0, r3
 800cf26:	f7fc fdef 	bl	8009b08 <_ZNSt12_Vector_baseIcSaIcEE12_Vector_implD1Ev>
 800cf2a:	687b      	ldr	r3, [r7, #4]
 800cf2c:	4618      	mov	r0, r3
 800cf2e:	3708      	adds	r7, #8
 800cf30:	46bd      	mov	sp, r7
 800cf32:	bd80      	pop	{r7, pc}

0800cf34 <_ZNSt6vectorIcSaIcEE5clearEv>:
      clear() _GLIBCXX_NOEXCEPT
 800cf34:	b580      	push	{r7, lr}
 800cf36:	b082      	sub	sp, #8
 800cf38:	af00      	add	r7, sp, #0
 800cf3a:	6078      	str	r0, [r7, #4]
      { _M_erase_at_end(this->_M_impl._M_start); }
 800cf3c:	687b      	ldr	r3, [r7, #4]
 800cf3e:	681b      	ldr	r3, [r3, #0]
 800cf40:	4619      	mov	r1, r3
 800cf42:	6878      	ldr	r0, [r7, #4]
 800cf44:	f000 fe74 	bl	800dc30 <_ZNSt6vectorIcSaIcEE15_M_erase_at_endEPc>
 800cf48:	bf00      	nop
 800cf4a:	3708      	adds	r7, #8
 800cf4c:	46bd      	mov	sp, r7
 800cf4e:	bd80      	pop	{r7, pc}

0800cf50 <_ZNSt6vectorIcSaIcEE9push_backEOc>:
      push_back(value_type&& __x)
 800cf50:	b580      	push	{r7, lr}
 800cf52:	b082      	sub	sp, #8
 800cf54:	af00      	add	r7, sp, #0
 800cf56:	6078      	str	r0, [r7, #4]
 800cf58:	6039      	str	r1, [r7, #0]
      { emplace_back(std::move(__x)); }
 800cf5a:	6838      	ldr	r0, [r7, #0]
 800cf5c:	f000 fe88 	bl	800dc70 <_ZSt4moveIRcEONSt16remove_referenceIT_E4typeEOS2_>
 800cf60:	4603      	mov	r3, r0
 800cf62:	4619      	mov	r1, r3
 800cf64:	6878      	ldr	r0, [r7, #4]
 800cf66:	f000 fe8e 	bl	800dc86 <_ZNSt6vectorIcSaIcEE12emplace_backIJcEEERcDpOT_>
 800cf6a:	bf00      	nop
 800cf6c:	3708      	adds	r7, #8
 800cf6e:	46bd      	mov	sp, r7
 800cf70:	bd80      	pop	{r7, pc}

0800cf72 <_ZNSt6vectorIcSaIcEE4dataEv>:
      data() _GLIBCXX_NOEXCEPT
 800cf72:	b580      	push	{r7, lr}
 800cf74:	b082      	sub	sp, #8
 800cf76:	af00      	add	r7, sp, #0
 800cf78:	6078      	str	r0, [r7, #4]
      { return _M_data_ptr(this->_M_impl._M_start); }
 800cf7a:	687b      	ldr	r3, [r7, #4]
 800cf7c:	681b      	ldr	r3, [r3, #0]
 800cf7e:	4619      	mov	r1, r3
 800cf80:	6878      	ldr	r0, [r7, #4]
 800cf82:	f000 feb2 	bl	800dcea <_ZNKSt6vectorIcSaIcEE11_M_data_ptrIcEEPT_S4_>
 800cf86:	4603      	mov	r3, r0
 800cf88:	4618      	mov	r0, r3
 800cf8a:	3708      	adds	r7, #8
 800cf8c:	46bd      	mov	sp, r7
 800cf8e:	bd80      	pop	{r7, pc}

0800cf90 <_ZNKSt6vectorIcSaIcEE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 800cf90:	b480      	push	{r7}
 800cf92:	b083      	sub	sp, #12
 800cf94:	af00      	add	r7, sp, #0
 800cf96:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 800cf98:	687b      	ldr	r3, [r7, #4]
 800cf9a:	685a      	ldr	r2, [r3, #4]
 800cf9c:	687b      	ldr	r3, [r7, #4]
 800cf9e:	681b      	ldr	r3, [r3, #0]
 800cfa0:	1ad3      	subs	r3, r2, r3
 800cfa2:	4618      	mov	r0, r3
 800cfa4:	370c      	adds	r7, #12
 800cfa6:	46bd      	mov	sp, r7
 800cfa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfac:	4770      	bx	lr

0800cfae <_ZN9__gnu_cxx17__normal_iteratorIPKcSt6vectorIcSaIcEEEC1IPcEERKNS0_IT_NS_11__enable_ifIXsrSt10__are_sameIS9_S8_E7__valueES5_E6__typeEEE>:
        __normal_iterator(const __normal_iterator<_Iter,
 800cfae:	b580      	push	{r7, lr}
 800cfb0:	b082      	sub	sp, #8
 800cfb2:	af00      	add	r7, sp, #0
 800cfb4:	6078      	str	r0, [r7, #4]
 800cfb6:	6039      	str	r1, [r7, #0]
        : _M_current(__i.base()) { }
 800cfb8:	6838      	ldr	r0, [r7, #0]
 800cfba:	f7fc fa9a 	bl	80094f2 <_ZNK9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEE4baseEv>
 800cfbe:	4603      	mov	r3, r0
 800cfc0:	681a      	ldr	r2, [r3, #0]
 800cfc2:	687b      	ldr	r3, [r7, #4]
 800cfc4:	601a      	str	r2, [r3, #0]
 800cfc6:	687b      	ldr	r3, [r7, #4]
 800cfc8:	4618      	mov	r0, r3
 800cfca:	3708      	adds	r7, #8
 800cfcc:	46bd      	mov	sp, r7
 800cfce:	bd80      	pop	{r7, pc}

0800cfd0 <_ZNSt6vectorIcSaIcEE6insertIPcvEEN9__gnu_cxx17__normal_iteratorIS3_S1_EENS5_IPKcS1_EET_SA_>:
	insert(const_iterator __position, _InputIterator __first,
 800cfd0:	b590      	push	{r4, r7, lr}
 800cfd2:	b08b      	sub	sp, #44	; 0x2c
 800cfd4:	af02      	add	r7, sp, #8
 800cfd6:	60f8      	str	r0, [r7, #12]
 800cfd8:	60b9      	str	r1, [r7, #8]
 800cfda:	607a      	str	r2, [r7, #4]
 800cfdc:	603b      	str	r3, [r7, #0]
	  difference_type __offset = __position - cbegin();
 800cfde:	68f8      	ldr	r0, [r7, #12]
 800cfe0:	f000 fe8f 	bl	800dd02 <_ZNKSt6vectorIcSaIcEE6cbeginEv>
 800cfe4:	4603      	mov	r3, r0
 800cfe6:	613b      	str	r3, [r7, #16]
 800cfe8:	f107 0210 	add.w	r2, r7, #16
 800cfec:	f107 0308 	add.w	r3, r7, #8
 800cff0:	4611      	mov	r1, r2
 800cff2:	4618      	mov	r0, r3
 800cff4:	f000 fe95 	bl	800dd22 <_ZN9__gnu_cxxmiIPKcSt6vectorIcSaIcEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS9_SC_>
 800cff8:	61f8      	str	r0, [r7, #28]
	  _M_insert_dispatch(begin() + __offset,
 800cffa:	68f8      	ldr	r0, [r7, #12]
 800cffc:	f7ff ff25 	bl	800ce4a <_ZNSt6vectorIcSaIcEE5beginEv>
 800d000:	4603      	mov	r3, r0
 800d002:	617b      	str	r3, [r7, #20]
 800d004:	f107 0314 	add.w	r3, r7, #20
 800d008:	69f9      	ldr	r1, [r7, #28]
 800d00a:	4618      	mov	r0, r3
 800d00c:	f000 fe9d 	bl	800dd4a <_ZNK9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEplEi>
 800d010:	4601      	mov	r1, r0
 800d012:	f88d 4000 	strb.w	r4, [sp]
 800d016:	683b      	ldr	r3, [r7, #0]
 800d018:	687a      	ldr	r2, [r7, #4]
 800d01a:	68f8      	ldr	r0, [r7, #12]
 800d01c:	f000 feac 	bl	800dd78 <_ZNSt6vectorIcSaIcEE18_M_insert_dispatchIPcEEvN9__gnu_cxx17__normal_iteratorIS3_S1_EET_S7_St12__false_type>
	  return begin() + __offset;
 800d020:	68f8      	ldr	r0, [r7, #12]
 800d022:	f7ff ff12 	bl	800ce4a <_ZNSt6vectorIcSaIcEE5beginEv>
 800d026:	4603      	mov	r3, r0
 800d028:	61bb      	str	r3, [r7, #24]
 800d02a:	f107 0318 	add.w	r3, r7, #24
 800d02e:	69f9      	ldr	r1, [r7, #28]
 800d030:	4618      	mov	r0, r3
 800d032:	f000 fe8a 	bl	800dd4a <_ZNK9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEplEi>
 800d036:	4603      	mov	r3, r0
	}
 800d038:	4618      	mov	r0, r3
 800d03a:	3724      	adds	r7, #36	; 0x24
 800d03c:	46bd      	mov	sp, r7
 800d03e:	bd90      	pop	{r4, r7, pc}

0800d040 <_ZSt7reverseIPbEvT_S1_>:
    reverse(_BidirectionalIterator __first, _BidirectionalIterator __last)
 800d040:	b5b0      	push	{r4, r5, r7, lr}
 800d042:	b082      	sub	sp, #8
 800d044:	af00      	add	r7, sp, #0
 800d046:	6078      	str	r0, [r7, #4]
 800d048:	6039      	str	r1, [r7, #0]
      std::__reverse(__first, __last, std::__iterator_category(__first));
 800d04a:	687c      	ldr	r4, [r7, #4]
 800d04c:	1d3b      	adds	r3, r7, #4
 800d04e:	4618      	mov	r0, r3
 800d050:	f000 feaa 	bl	800dda8 <_ZSt19__iterator_categoryIPbENSt15iterator_traitsIT_E17iterator_categoryERKS2_>
 800d054:	462a      	mov	r2, r5
 800d056:	6839      	ldr	r1, [r7, #0]
 800d058:	4620      	mov	r0, r4
 800d05a:	f000 feaf 	bl	800ddbc <_ZSt9__reverseIPbEvT_S1_St26random_access_iterator_tag>
    }
 800d05e:	bf00      	nop
 800d060:	3708      	adds	r7, #8
 800d062:	46bd      	mov	sp, r7
 800d064:	bdb0      	pop	{r4, r5, r7, pc}

0800d066 <_ZSt12__miter_baseIPKcET_S2_>:
  // Fallback implementation of the function in bits/stl_iterator.h used to
  // remove the move_iterator wrapper.
  template<typename _Iterator>
    _GLIBCXX20_CONSTEXPR
    inline _Iterator
    __miter_base(_Iterator __it)
 800d066:	b480      	push	{r7}
 800d068:	b083      	sub	sp, #12
 800d06a:	af00      	add	r7, sp, #0
 800d06c:	6078      	str	r0, [r7, #4]
    { return __it; }
 800d06e:	687b      	ldr	r3, [r7, #4]
 800d070:	4618      	mov	r0, r3
 800d072:	370c      	adds	r7, #12
 800d074:	46bd      	mov	sp, r7
 800d076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d07a:	4770      	bx	lr

0800d07c <_ZSt13__copy_move_aILb0EPKcPcET1_T0_S4_S3_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 800d07c:	b5b0      	push	{r4, r5, r7, lr}
 800d07e:	b084      	sub	sp, #16
 800d080:	af00      	add	r7, sp, #0
 800d082:	60f8      	str	r0, [r7, #12]
 800d084:	60b9      	str	r1, [r7, #8]
 800d086:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 800d088:	68f8      	ldr	r0, [r7, #12]
 800d08a:	f000 feb8 	bl	800ddfe <_ZSt12__niter_baseIPKcET_S2_>
 800d08e:	4604      	mov	r4, r0
 800d090:	68b8      	ldr	r0, [r7, #8]
 800d092:	f000 feb4 	bl	800ddfe <_ZSt12__niter_baseIPKcET_S2_>
 800d096:	4605      	mov	r5, r0
 800d098:	687b      	ldr	r3, [r7, #4]
 800d09a:	4618      	mov	r0, r3
 800d09c:	f000 feba 	bl	800de14 <_ZSt12__niter_baseIPcET_S1_>
 800d0a0:	4603      	mov	r3, r0
 800d0a2:	461a      	mov	r2, r3
 800d0a4:	4629      	mov	r1, r5
 800d0a6:	4620      	mov	r0, r4
 800d0a8:	f000 febf 	bl	800de2a <_ZSt14__copy_move_a1ILb0EPKcPcET1_T0_S4_S3_>
 800d0ac:	4602      	mov	r2, r0
 800d0ae:	1d3b      	adds	r3, r7, #4
 800d0b0:	4611      	mov	r1, r2
 800d0b2:	4618      	mov	r0, r3
 800d0b4:	f000 fec9 	bl	800de4a <_ZSt12__niter_wrapIPcET_RKS1_S1_>
 800d0b8:	4603      	mov	r3, r0
    }
 800d0ba:	4618      	mov	r0, r3
 800d0bc:	3710      	adds	r7, #16
 800d0be:	46bd      	mov	sp, r7
 800d0c0:	bdb0      	pop	{r4, r5, r7, pc}

0800d0c2 <_ZSt19__iterator_categoryIPcENSt15iterator_traitsIT_E17iterator_categoryERKS2_>:
   *  sugar for internal library use only.
  */
  template<typename _Iter>
    inline _GLIBCXX_CONSTEXPR
    typename iterator_traits<_Iter>::iterator_category
    __iterator_category(const _Iter&)
 800d0c2:	b480      	push	{r7}
 800d0c4:	b083      	sub	sp, #12
 800d0c6:	af00      	add	r7, sp, #0
 800d0c8:	6078      	str	r0, [r7, #4]
    { return typename iterator_traits<_Iter>::iterator_category(); }
 800d0ca:	4618      	mov	r0, r3
 800d0cc:	370c      	adds	r7, #12
 800d0ce:	46bd      	mov	sp, r7
 800d0d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0d4:	4770      	bx	lr

0800d0d6 <_ZN9__gnu_cxxeqIPfSt6vectorIfSaIfEEEEbRKNS_17__normal_iteratorIT_T0_EESA_>:
    operator==(const __normal_iterator<_Iterator, _Container>& __lhs,
 800d0d6:	b590      	push	{r4, r7, lr}
 800d0d8:	b083      	sub	sp, #12
 800d0da:	af00      	add	r7, sp, #0
 800d0dc:	6078      	str	r0, [r7, #4]
 800d0de:	6039      	str	r1, [r7, #0]
    { return __lhs.base() == __rhs.base(); }
 800d0e0:	6878      	ldr	r0, [r7, #4]
 800d0e2:	f7f6 fcc0 	bl	8003a66 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEE4baseEv>
 800d0e6:	4603      	mov	r3, r0
 800d0e8:	681c      	ldr	r4, [r3, #0]
 800d0ea:	6838      	ldr	r0, [r7, #0]
 800d0ec:	f7f6 fcbb 	bl	8003a66 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEE4baseEv>
 800d0f0:	4603      	mov	r3, r0
 800d0f2:	681b      	ldr	r3, [r3, #0]
 800d0f4:	429c      	cmp	r4, r3
 800d0f6:	bf0c      	ite	eq
 800d0f8:	2301      	moveq	r3, #1
 800d0fa:	2300      	movne	r3, #0
 800d0fc:	b2db      	uxtb	r3, r3
 800d0fe:	4618      	mov	r0, r3
 800d100:	370c      	adds	r7, #12
 800d102:	46bd      	mov	sp, r7
 800d104:	bd90      	pop	{r4, r7, pc}

0800d106 <_ZSt6__sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_T0_>:
    __sort(_RandomAccessIterator __first, _RandomAccessIterator __last,
 800d106:	b5b0      	push	{r4, r5, r7, lr}
 800d108:	b084      	sub	sp, #16
 800d10a:	af00      	add	r7, sp, #0
 800d10c:	60f8      	str	r0, [r7, #12]
 800d10e:	60b9      	str	r1, [r7, #8]
 800d110:	713a      	strb	r2, [r7, #4]
      if (__first != __last)
 800d112:	f107 0208 	add.w	r2, r7, #8
 800d116:	f107 030c 	add.w	r3, r7, #12
 800d11a:	4611      	mov	r1, r2
 800d11c:	4618      	mov	r0, r3
 800d11e:	f7ff ffda 	bl	800d0d6 <_ZN9__gnu_cxxeqIPfSt6vectorIfSaIfEEEEbRKNS_17__normal_iteratorIT_T0_EESA_>
 800d122:	4603      	mov	r3, r0
 800d124:	f083 0301 	eor.w	r3, r3, #1
 800d128:	b2db      	uxtb	r3, r3
 800d12a:	2b00      	cmp	r3, #0
 800d12c:	d017      	beq.n	800d15e <_ZSt6__sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_T0_+0x58>
				std::__lg(__last - __first) * 2,
 800d12e:	f107 020c 	add.w	r2, r7, #12
 800d132:	f107 0308 	add.w	r3, r7, #8
 800d136:	4611      	mov	r1, r2
 800d138:	4618      	mov	r0, r3
 800d13a:	f7f6 fc57 	bl	80039ec <_ZN9__gnu_cxxmiIPfSt6vectorIfSaIfEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS8_SB_>
 800d13e:	4603      	mov	r3, r0
 800d140:	4618      	mov	r0, r3
 800d142:	f7f7 fad0 	bl	80046e6 <_ZSt4__lgi>
 800d146:	4603      	mov	r3, r0
	  std::__introsort_loop(__first, __last,
 800d148:	005a      	lsls	r2, r3, #1
 800d14a:	462b      	mov	r3, r5
 800d14c:	68b9      	ldr	r1, [r7, #8]
 800d14e:	68f8      	ldr	r0, [r7, #12]
 800d150:	f000 fe87 	bl	800de62 <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEiNS0_5__ops15_Iter_less_iterEEvT_S9_T0_T1_>
	  std::__final_insertion_sort(__first, __last, __comp);
 800d154:	4622      	mov	r2, r4
 800d156:	68b9      	ldr	r1, [r7, #8]
 800d158:	68f8      	ldr	r0, [r7, #12]
 800d15a:	f000 feb9 	bl	800ded0 <_ZSt22__final_insertion_sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_T0_>
    }
 800d15e:	bf00      	nop
 800d160:	3710      	adds	r7, #16
 800d162:	46bd      	mov	sp, r7
 800d164:	bdb0      	pop	{r4, r5, r7, pc}

0800d166 <_ZSt11find_if_notIPbZN3jlb10Controller15lateral_controlEfEUlbE_ET_S4_S4_T0_>:
    find_if_not(_InputIterator __first, _InputIterator __last,
 800d166:	b590      	push	{r4, r7, lr}
 800d168:	b085      	sub	sp, #20
 800d16a:	af00      	add	r7, sp, #0
 800d16c:	60f8      	str	r0, [r7, #12]
 800d16e:	60b9      	str	r1, [r7, #8]
 800d170:	713a      	strb	r2, [r7, #4]
      return std::__find_if_not(__first, __last,
 800d172:	4618      	mov	r0, r3
 800d174:	f000 fee4 	bl	800df40 <_ZN9__gnu_cxx5__ops11__pred_iterIZN3jlb10Controller15lateral_controlEfEUlbE_EENS0_10_Iter_predIT_EES6_>
 800d178:	4622      	mov	r2, r4
 800d17a:	68b9      	ldr	r1, [r7, #8]
 800d17c:	68f8      	ldr	r0, [r7, #12]
 800d17e:	f000 fef2 	bl	800df66 <_ZSt13__find_if_notIPbN9__gnu_cxx5__ops10_Iter_predIZN3jlb10Controller15lateral_controlEfEUlbE_EEET_S8_S8_T0_>
 800d182:	4603      	mov	r3, r0
    }
 800d184:	4618      	mov	r0, r3
 800d186:	3714      	adds	r7, #20
 800d188:	46bd      	mov	sp, r7
 800d18a:	bd90      	pop	{r4, r7, pc}

0800d18c <_ZSt11find_if_notIPbZN3jlb10Controller15lateral_controlEfEUlbE0_ET_S4_S4_T0_>:
    find_if_not(_InputIterator __first, _InputIterator __last,
 800d18c:	b590      	push	{r4, r7, lr}
 800d18e:	b085      	sub	sp, #20
 800d190:	af00      	add	r7, sp, #0
 800d192:	60f8      	str	r0, [r7, #12]
 800d194:	60b9      	str	r1, [r7, #8]
 800d196:	713a      	strb	r2, [r7, #4]
      return std::__find_if_not(__first, __last,
 800d198:	4618      	mov	r0, r3
 800d19a:	f000 fefe 	bl	800df9a <_ZN9__gnu_cxx5__ops11__pred_iterIZN3jlb10Controller15lateral_controlEfEUlbE0_EENS0_10_Iter_predIT_EES6_>
 800d19e:	4622      	mov	r2, r4
 800d1a0:	68b9      	ldr	r1, [r7, #8]
 800d1a2:	68f8      	ldr	r0, [r7, #12]
 800d1a4:	f000 ff0c 	bl	800dfc0 <_ZSt13__find_if_notIPbN9__gnu_cxx5__ops10_Iter_predIZN3jlb10Controller15lateral_controlEfEUlbE0_EEET_S8_S8_T0_>
 800d1a8:	4603      	mov	r3, r0
    }
 800d1aa:	4618      	mov	r0, r3
 800d1ac:	3714      	adds	r7, #20
 800d1ae:	46bd      	mov	sp, r7
 800d1b0:	bd90      	pop	{r4, r7, pc}

0800d1b2 <_ZN9__gnu_cxx14__alloc_traitsISaIfEfE17_S_select_on_copyERKS1_>:
    static constexpr _Alloc _S_select_on_copy(const _Alloc& __a)
 800d1b2:	b580      	push	{r7, lr}
 800d1b4:	b082      	sub	sp, #8
 800d1b6:	af00      	add	r7, sp, #0
 800d1b8:	6078      	str	r0, [r7, #4]
 800d1ba:	6039      	str	r1, [r7, #0]
    { return _Base_type::select_on_container_copy_construction(__a); }
 800d1bc:	687b      	ldr	r3, [r7, #4]
 800d1be:	6839      	ldr	r1, [r7, #0]
 800d1c0:	4618      	mov	r0, r3
 800d1c2:	f000 ff17 	bl	800dff4 <_ZNSt16allocator_traitsISaIfEE37select_on_container_copy_constructionERKS0_>
 800d1c6:	6878      	ldr	r0, [r7, #4]
 800d1c8:	3708      	adds	r7, #8
 800d1ca:	46bd      	mov	sp, r7
 800d1cc:	bd80      	pop	{r7, pc}

0800d1ce <_ZNSt12_Vector_baseIfSaIfEEC1EjRKS0_>:
      _Vector_base(size_t __n, const allocator_type& __a)
 800d1ce:	b580      	push	{r7, lr}
 800d1d0:	b084      	sub	sp, #16
 800d1d2:	af00      	add	r7, sp, #0
 800d1d4:	60f8      	str	r0, [r7, #12]
 800d1d6:	60b9      	str	r1, [r7, #8]
 800d1d8:	607a      	str	r2, [r7, #4]
      : _M_impl(__a)
 800d1da:	68fb      	ldr	r3, [r7, #12]
 800d1dc:	6879      	ldr	r1, [r7, #4]
 800d1de:	4618      	mov	r0, r3
 800d1e0:	f000 ff15 	bl	800e00e <_ZNSt12_Vector_baseIfSaIfEE12_Vector_implC1ERKS0_>
      { _M_create_storage(__n); }
 800d1e4:	68b9      	ldr	r1, [r7, #8]
 800d1e6:	68f8      	ldr	r0, [r7, #12]
 800d1e8:	f000 ff23 	bl	800e032 <_ZNSt12_Vector_baseIfSaIfEE17_M_create_storageEj>
 800d1ec:	68fb      	ldr	r3, [r7, #12]
 800d1ee:	4618      	mov	r0, r3
 800d1f0:	3710      	adds	r7, #16
 800d1f2:	46bd      	mov	sp, r7
 800d1f4:	bd80      	pop	{r7, pc}

0800d1f6 <_ZNKSt6vectorIfSaIfEE5beginEv>:
      begin() const _GLIBCXX_NOEXCEPT
 800d1f6:	b580      	push	{r7, lr}
 800d1f8:	b084      	sub	sp, #16
 800d1fa:	af00      	add	r7, sp, #0
 800d1fc:	6078      	str	r0, [r7, #4]
      { return const_iterator(this->_M_impl._M_start); }
 800d1fe:	687a      	ldr	r2, [r7, #4]
 800d200:	f107 030c 	add.w	r3, r7, #12
 800d204:	4611      	mov	r1, r2
 800d206:	4618      	mov	r0, r3
 800d208:	f000 ff2e 	bl	800e068 <_ZN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEC1ERKS2_>
 800d20c:	68fb      	ldr	r3, [r7, #12]
 800d20e:	4618      	mov	r0, r3
 800d210:	3710      	adds	r7, #16
 800d212:	46bd      	mov	sp, r7
 800d214:	bd80      	pop	{r7, pc}

0800d216 <_ZNKSt6vectorIfSaIfEE3endEv>:
      end() const _GLIBCXX_NOEXCEPT
 800d216:	b580      	push	{r7, lr}
 800d218:	b084      	sub	sp, #16
 800d21a:	af00      	add	r7, sp, #0
 800d21c:	6078      	str	r0, [r7, #4]
      { return const_iterator(this->_M_impl._M_finish); }
 800d21e:	687b      	ldr	r3, [r7, #4]
 800d220:	1d1a      	adds	r2, r3, #4
 800d222:	f107 030c 	add.w	r3, r7, #12
 800d226:	4611      	mov	r1, r2
 800d228:	4618      	mov	r0, r3
 800d22a:	f000 ff1d 	bl	800e068 <_ZN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEC1ERKS2_>
 800d22e:	68fb      	ldr	r3, [r7, #12]
 800d230:	4618      	mov	r0, r3
 800d232:	3710      	adds	r7, #16
 800d234:	46bd      	mov	sp, r7
 800d236:	bd80      	pop	{r7, pc}

0800d238 <_ZSt22__uninitialized_copy_aIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEEPffET0_T_SA_S9_RSaIT1_E>:
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 800d238:	b580      	push	{r7, lr}
 800d23a:	b084      	sub	sp, #16
 800d23c:	af00      	add	r7, sp, #0
 800d23e:	60f8      	str	r0, [r7, #12]
 800d240:	60b9      	str	r1, [r7, #8]
 800d242:	607a      	str	r2, [r7, #4]
 800d244:	603b      	str	r3, [r7, #0]
    { return std::uninitialized_copy(__first, __last, __result); }
 800d246:	687a      	ldr	r2, [r7, #4]
 800d248:	68b9      	ldr	r1, [r7, #8]
 800d24a:	68f8      	ldr	r0, [r7, #12]
 800d24c:	f000 ff1c 	bl	800e088 <_ZSt18uninitialized_copyIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEEPfET0_T_SA_S9_>
 800d250:	4603      	mov	r3, r0
 800d252:	4618      	mov	r0, r3
 800d254:	3710      	adds	r7, #16
 800d256:	46bd      	mov	sp, r7
 800d258:	bd80      	pop	{r7, pc}

0800d25a <_ZSt15__alloc_on_copyISaIfEEvRT_RKS1_>:
    __alloc_on_copy(_Alloc& __one, const _Alloc& __two)
 800d25a:	b480      	push	{r7}
 800d25c:	b083      	sub	sp, #12
 800d25e:	af00      	add	r7, sp, #0
 800d260:	6078      	str	r0, [r7, #4]
 800d262:	6039      	str	r1, [r7, #0]
    }
 800d264:	bf00      	nop
 800d266:	370c      	adds	r7, #12
 800d268:	46bd      	mov	sp, r7
 800d26a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d26e:	4770      	bx	lr

0800d270 <_ZNKSt6vectorIfSaIfEE8capacityEv>:
      capacity() const _GLIBCXX_NOEXCEPT
 800d270:	b480      	push	{r7}
 800d272:	b083      	sub	sp, #12
 800d274:	af00      	add	r7, sp, #0
 800d276:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_end_of_storage
 800d278:	687b      	ldr	r3, [r7, #4]
 800d27a:	689a      	ldr	r2, [r3, #8]
			 - this->_M_impl._M_start); }
 800d27c:	687b      	ldr	r3, [r7, #4]
 800d27e:	681b      	ldr	r3, [r3, #0]
 800d280:	1ad3      	subs	r3, r2, r3
 800d282:	109b      	asrs	r3, r3, #2
 800d284:	4618      	mov	r0, r3
 800d286:	370c      	adds	r7, #12
 800d288:	46bd      	mov	sp, r7
 800d28a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d28e:	4770      	bx	lr

0800d290 <_ZNSt6vectorIfSaIfEE20_M_allocate_and_copyIN9__gnu_cxx17__normal_iteratorIPKfS1_EEEEPfjT_S9_>:
	_M_allocate_and_copy(size_type __n,
 800d290:	b580      	push	{r7, lr}
 800d292:	b086      	sub	sp, #24
 800d294:	af00      	add	r7, sp, #0
 800d296:	60f8      	str	r0, [r7, #12]
 800d298:	60b9      	str	r1, [r7, #8]
 800d29a:	607a      	str	r2, [r7, #4]
 800d29c:	603b      	str	r3, [r7, #0]
	  pointer __result = this->_M_allocate(__n);
 800d29e:	68fb      	ldr	r3, [r7, #12]
 800d2a0:	68b9      	ldr	r1, [r7, #8]
 800d2a2:	4618      	mov	r0, r3
 800d2a4:	f7f6 fbb7 	bl	8003a16 <_ZNSt12_Vector_baseIfSaIfEE11_M_allocateEj>
 800d2a8:	6178      	str	r0, [r7, #20]
					  _M_get_Tp_allocator());
 800d2aa:	68fb      	ldr	r3, [r7, #12]
 800d2ac:	4618      	mov	r0, r3
 800d2ae:	f7f6 f9fc 	bl	80036aa <_ZNSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>
 800d2b2:	4603      	mov	r3, r0
	      std::__uninitialized_copy_a(__first, __last, __result,
 800d2b4:	697a      	ldr	r2, [r7, #20]
 800d2b6:	6839      	ldr	r1, [r7, #0]
 800d2b8:	6878      	ldr	r0, [r7, #4]
 800d2ba:	f7ff ffbd 	bl	800d238 <_ZSt22__uninitialized_copy_aIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEEPffET0_T_SA_S9_RSaIT1_E>
	      return __result;
 800d2be:	697b      	ldr	r3, [r7, #20]
	}
 800d2c0:	4618      	mov	r0, r3
 800d2c2:	3718      	adds	r7, #24
 800d2c4:	46bd      	mov	sp, r7
 800d2c6:	bd80      	pop	{r7, pc}

0800d2c8 <_ZSt4copyIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEENS1_IPfS6_EEET0_T_SB_SA_>:
    copy(_II __first, _II __last, _OI __result)
 800d2c8:	b590      	push	{r4, r7, lr}
 800d2ca:	b085      	sub	sp, #20
 800d2cc:	af00      	add	r7, sp, #0
 800d2ce:	60f8      	str	r0, [r7, #12]
 800d2d0:	60b9      	str	r1, [r7, #8]
 800d2d2:	607a      	str	r2, [r7, #4]
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 800d2d4:	68f8      	ldr	r0, [r7, #12]
 800d2d6:	f000 fee9 	bl	800e0ac <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEEET_S8_>
 800d2da:	4604      	mov	r4, r0
 800d2dc:	68b8      	ldr	r0, [r7, #8]
 800d2de:	f000 fee5 	bl	800e0ac <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEEET_S8_>
 800d2e2:	4603      	mov	r3, r0
 800d2e4:	687a      	ldr	r2, [r7, #4]
 800d2e6:	4619      	mov	r1, r3
 800d2e8:	4620      	mov	r0, r4
 800d2ea:	f000 feea 	bl	800e0c2 <_ZSt13__copy_move_aILb0EN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEENS1_IPfS6_EEET1_T0_SB_SA_>
 800d2ee:	4603      	mov	r3, r0
    }
 800d2f0:	4618      	mov	r0, r3
 800d2f2:	3714      	adds	r7, #20
 800d2f4:	46bd      	mov	sp, r7
 800d2f6:	bd90      	pop	{r4, r7, pc}

0800d2f8 <_ZSt8_DestroyIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEfEvT_S7_RSaIT0_E>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 800d2f8:	b580      	push	{r7, lr}
 800d2fa:	b084      	sub	sp, #16
 800d2fc:	af00      	add	r7, sp, #0
 800d2fe:	60f8      	str	r0, [r7, #12]
 800d300:	60b9      	str	r1, [r7, #8]
 800d302:	607a      	str	r2, [r7, #4]
      _Destroy(__first, __last);
 800d304:	68b9      	ldr	r1, [r7, #8]
 800d306:	68f8      	ldr	r0, [r7, #12]
 800d308:	f000 fefc 	bl	800e104 <_ZSt8_DestroyIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEEvT_S7_>
    }
 800d30c:	bf00      	nop
 800d30e:	3710      	adds	r7, #16
 800d310:	46bd      	mov	sp, r7
 800d312:	bd80      	pop	{r7, pc}

0800d314 <_ZSt12__miter_baseIPfET_S1_>:
    __miter_base(_Iterator __it)
 800d314:	b480      	push	{r7}
 800d316:	b083      	sub	sp, #12
 800d318:	af00      	add	r7, sp, #0
 800d31a:	6078      	str	r0, [r7, #4]
    { return __it; }
 800d31c:	687b      	ldr	r3, [r7, #4]
 800d31e:	4618      	mov	r0, r3
 800d320:	370c      	adds	r7, #12
 800d322:	46bd      	mov	sp, r7
 800d324:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d328:	4770      	bx	lr

0800d32a <_ZSt13__copy_move_aILb0EPfS0_ET1_T0_S2_S1_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 800d32a:	b5b0      	push	{r4, r5, r7, lr}
 800d32c:	b084      	sub	sp, #16
 800d32e:	af00      	add	r7, sp, #0
 800d330:	60f8      	str	r0, [r7, #12]
 800d332:	60b9      	str	r1, [r7, #8]
 800d334:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 800d336:	68f8      	ldr	r0, [r7, #12]
 800d338:	f7f6 fcf2 	bl	8003d20 <_ZSt12__niter_baseIPfET_S1_>
 800d33c:	4604      	mov	r4, r0
 800d33e:	68b8      	ldr	r0, [r7, #8]
 800d340:	f7f6 fcee 	bl	8003d20 <_ZSt12__niter_baseIPfET_S1_>
 800d344:	4605      	mov	r5, r0
 800d346:	687b      	ldr	r3, [r7, #4]
 800d348:	4618      	mov	r0, r3
 800d34a:	f7f6 fce9 	bl	8003d20 <_ZSt12__niter_baseIPfET_S1_>
 800d34e:	4603      	mov	r3, r0
 800d350:	461a      	mov	r2, r3
 800d352:	4629      	mov	r1, r5
 800d354:	4620      	mov	r0, r4
 800d356:	f000 feeb 	bl	800e130 <_ZSt14__copy_move_a1ILb0EPfS0_ET1_T0_S2_S1_>
 800d35a:	4602      	mov	r2, r0
 800d35c:	1d3b      	adds	r3, r7, #4
 800d35e:	4611      	mov	r1, r2
 800d360:	4618      	mov	r0, r3
 800d362:	f000 fef5 	bl	800e150 <_ZSt12__niter_wrapIPfET_RKS1_S1_>
 800d366:	4603      	mov	r3, r0
    }
 800d368:	4618      	mov	r0, r3
 800d36a:	3710      	adds	r7, #16
 800d36c:	46bd      	mov	sp, r7
 800d36e:	bdb0      	pop	{r4, r5, r7, pc}

0800d370 <_ZSt22__uninitialized_copy_aIPfS0_fET0_T_S2_S1_RSaIT1_E>:
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 800d370:	b580      	push	{r7, lr}
 800d372:	b084      	sub	sp, #16
 800d374:	af00      	add	r7, sp, #0
 800d376:	60f8      	str	r0, [r7, #12]
 800d378:	60b9      	str	r1, [r7, #8]
 800d37a:	607a      	str	r2, [r7, #4]
 800d37c:	603b      	str	r3, [r7, #0]
    { return std::uninitialized_copy(__first, __last, __result); }
 800d37e:	687a      	ldr	r2, [r7, #4]
 800d380:	68b9      	ldr	r1, [r7, #8]
 800d382:	68f8      	ldr	r0, [r7, #12]
 800d384:	f000 fef0 	bl	800e168 <_ZSt18uninitialized_copyIPfS0_ET0_T_S2_S1_>
 800d388:	4603      	mov	r3, r0
 800d38a:	4618      	mov	r0, r3
 800d38c:	3710      	adds	r7, #16
 800d38e:	46bd      	mov	sp, r7
 800d390:	bd80      	pop	{r7, pc}

0800d392 <_ZNSaIN3jlb4EdgeEEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 800d392:	b580      	push	{r7, lr}
 800d394:	b082      	sub	sp, #8
 800d396:	af00      	add	r7, sp, #0
 800d398:	6078      	str	r0, [r7, #4]
 800d39a:	6878      	ldr	r0, [r7, #4]
 800d39c:	f000 fef6 	bl	800e18c <_ZN9__gnu_cxx13new_allocatorIN3jlb4EdgeEEC1Ev>
 800d3a0:	687b      	ldr	r3, [r7, #4]
 800d3a2:	4618      	mov	r0, r3
 800d3a4:	3708      	adds	r7, #8
 800d3a6:	46bd      	mov	sp, r7
 800d3a8:	bd80      	pop	{r7, pc}

0800d3aa <_ZNSt12_Vector_baseIN3jlb4EdgeESaIS1_EE17_Vector_impl_dataC1Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
 800d3aa:	b480      	push	{r7}
 800d3ac:	b083      	sub	sp, #12
 800d3ae:	af00      	add	r7, sp, #0
 800d3b0:	6078      	str	r0, [r7, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 800d3b2:	687b      	ldr	r3, [r7, #4]
 800d3b4:	2200      	movs	r2, #0
 800d3b6:	601a      	str	r2, [r3, #0]
 800d3b8:	687b      	ldr	r3, [r7, #4]
 800d3ba:	2200      	movs	r2, #0
 800d3bc:	605a      	str	r2, [r3, #4]
 800d3be:	687b      	ldr	r3, [r7, #4]
 800d3c0:	2200      	movs	r2, #0
 800d3c2:	609a      	str	r2, [r3, #8]
	{ }
 800d3c4:	687b      	ldr	r3, [r7, #4]
 800d3c6:	4618      	mov	r0, r3
 800d3c8:	370c      	adds	r7, #12
 800d3ca:	46bd      	mov	sp, r7
 800d3cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3d0:	4770      	bx	lr

0800d3d2 <_ZNSt12_Vector_baseIN3jlb4EdgeESaIS1_EE13_M_deallocateEPS1_j>:
      _M_deallocate(pointer __p, size_t __n)
 800d3d2:	b580      	push	{r7, lr}
 800d3d4:	b084      	sub	sp, #16
 800d3d6:	af00      	add	r7, sp, #0
 800d3d8:	60f8      	str	r0, [r7, #12]
 800d3da:	60b9      	str	r1, [r7, #8]
 800d3dc:	607a      	str	r2, [r7, #4]
	if (__p)
 800d3de:	68bb      	ldr	r3, [r7, #8]
 800d3e0:	2b00      	cmp	r3, #0
 800d3e2:	d005      	beq.n	800d3f0 <_ZNSt12_Vector_baseIN3jlb4EdgeESaIS1_EE13_M_deallocateEPS1_j+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 800d3e4:	68fb      	ldr	r3, [r7, #12]
 800d3e6:	687a      	ldr	r2, [r7, #4]
 800d3e8:	68b9      	ldr	r1, [r7, #8]
 800d3ea:	4618      	mov	r0, r3
 800d3ec:	f000 fed9 	bl	800e1a2 <_ZNSt16allocator_traitsISaIN3jlb4EdgeEEE10deallocateERS2_PS1_j>
      }
 800d3f0:	bf00      	nop
 800d3f2:	3710      	adds	r7, #16
 800d3f4:	46bd      	mov	sp, r7
 800d3f6:	bd80      	pop	{r7, pc}

0800d3f8 <_ZNSt12_Vector_baseIN3jlb4EdgeESaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 800d3f8:	b480      	push	{r7}
 800d3fa:	b083      	sub	sp, #12
 800d3fc:	af00      	add	r7, sp, #0
 800d3fe:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 800d400:	687b      	ldr	r3, [r7, #4]
 800d402:	4618      	mov	r0, r3
 800d404:	370c      	adds	r7, #12
 800d406:	46bd      	mov	sp, r7
 800d408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d40c:	4770      	bx	lr

0800d40e <_ZSt8_DestroyIPN3jlb4EdgeES1_EvT_S3_RSaIT0_E>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 800d40e:	b580      	push	{r7, lr}
 800d410:	b084      	sub	sp, #16
 800d412:	af00      	add	r7, sp, #0
 800d414:	60f8      	str	r0, [r7, #12]
 800d416:	60b9      	str	r1, [r7, #8]
 800d418:	607a      	str	r2, [r7, #4]
      _Destroy(__first, __last);
 800d41a:	68b9      	ldr	r1, [r7, #8]
 800d41c:	68f8      	ldr	r0, [r7, #12]
 800d41e:	f000 fedf 	bl	800e1e0 <_ZSt8_DestroyIPN3jlb4EdgeEEvT_S3_>
    }
 800d422:	bf00      	nop
 800d424:	3710      	adds	r7, #16
 800d426:	46bd      	mov	sp, r7
 800d428:	bd80      	pop	{r7, pc}

0800d42a <_ZN9__gnu_cxx14__alloc_traitsISaIcEcE17_S_select_on_copyERKS1_>:
    static constexpr _Alloc _S_select_on_copy(const _Alloc& __a)
 800d42a:	b580      	push	{r7, lr}
 800d42c:	b082      	sub	sp, #8
 800d42e:	af00      	add	r7, sp, #0
 800d430:	6078      	str	r0, [r7, #4]
 800d432:	6039      	str	r1, [r7, #0]
    { return _Base_type::select_on_container_copy_construction(__a); }
 800d434:	687b      	ldr	r3, [r7, #4]
 800d436:	6839      	ldr	r1, [r7, #0]
 800d438:	4618      	mov	r0, r3
 800d43a:	f000 fee7 	bl	800e20c <_ZNSt16allocator_traitsISaIcEE37select_on_container_copy_constructionERKS0_>
 800d43e:	6878      	ldr	r0, [r7, #4]
 800d440:	3708      	adds	r7, #8
 800d442:	46bd      	mov	sp, r7
 800d444:	bd80      	pop	{r7, pc}

0800d446 <_ZNKSt12_Vector_baseIcSaIcEE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 800d446:	b480      	push	{r7}
 800d448:	b083      	sub	sp, #12
 800d44a:	af00      	add	r7, sp, #0
 800d44c:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 800d44e:	687b      	ldr	r3, [r7, #4]
 800d450:	4618      	mov	r0, r3
 800d452:	370c      	adds	r7, #12
 800d454:	46bd      	mov	sp, r7
 800d456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d45a:	4770      	bx	lr

0800d45c <_ZNSt12_Vector_baseIcSaIcEEC1EjRKS0_>:
      _Vector_base(size_t __n, const allocator_type& __a)
 800d45c:	b580      	push	{r7, lr}
 800d45e:	b084      	sub	sp, #16
 800d460:	af00      	add	r7, sp, #0
 800d462:	60f8      	str	r0, [r7, #12]
 800d464:	60b9      	str	r1, [r7, #8]
 800d466:	607a      	str	r2, [r7, #4]
      : _M_impl(__a)
 800d468:	68fb      	ldr	r3, [r7, #12]
 800d46a:	6879      	ldr	r1, [r7, #4]
 800d46c:	4618      	mov	r0, r3
 800d46e:	f000 feda 	bl	800e226 <_ZNSt12_Vector_baseIcSaIcEE12_Vector_implC1ERKS0_>
      { _M_create_storage(__n); }
 800d472:	68b9      	ldr	r1, [r7, #8]
 800d474:	68f8      	ldr	r0, [r7, #12]
 800d476:	f000 fee8 	bl	800e24a <_ZNSt12_Vector_baseIcSaIcEE17_M_create_storageEj>
 800d47a:	68fb      	ldr	r3, [r7, #12]
 800d47c:	4618      	mov	r0, r3
 800d47e:	3710      	adds	r7, #16
 800d480:	46bd      	mov	sp, r7
 800d482:	bd80      	pop	{r7, pc}

0800d484 <_ZNKSt6vectorIcSaIcEE5beginEv>:
      begin() const _GLIBCXX_NOEXCEPT
 800d484:	b580      	push	{r7, lr}
 800d486:	b084      	sub	sp, #16
 800d488:	af00      	add	r7, sp, #0
 800d48a:	6078      	str	r0, [r7, #4]
      { return const_iterator(this->_M_impl._M_start); }
 800d48c:	687a      	ldr	r2, [r7, #4]
 800d48e:	f107 030c 	add.w	r3, r7, #12
 800d492:	4611      	mov	r1, r2
 800d494:	4618      	mov	r0, r3
 800d496:	f000 fef2 	bl	800e27e <_ZN9__gnu_cxx17__normal_iteratorIPKcSt6vectorIcSaIcEEEC1ERKS2_>
 800d49a:	68fb      	ldr	r3, [r7, #12]
 800d49c:	4618      	mov	r0, r3
 800d49e:	3710      	adds	r7, #16
 800d4a0:	46bd      	mov	sp, r7
 800d4a2:	bd80      	pop	{r7, pc}

0800d4a4 <_ZNKSt6vectorIcSaIcEE3endEv>:
      end() const _GLIBCXX_NOEXCEPT
 800d4a4:	b580      	push	{r7, lr}
 800d4a6:	b084      	sub	sp, #16
 800d4a8:	af00      	add	r7, sp, #0
 800d4aa:	6078      	str	r0, [r7, #4]
      { return const_iterator(this->_M_impl._M_finish); }
 800d4ac:	687b      	ldr	r3, [r7, #4]
 800d4ae:	1d1a      	adds	r2, r3, #4
 800d4b0:	f107 030c 	add.w	r3, r7, #12
 800d4b4:	4611      	mov	r1, r2
 800d4b6:	4618      	mov	r0, r3
 800d4b8:	f000 fee1 	bl	800e27e <_ZN9__gnu_cxx17__normal_iteratorIPKcSt6vectorIcSaIcEEEC1ERKS2_>
 800d4bc:	68fb      	ldr	r3, [r7, #12]
 800d4be:	4618      	mov	r0, r3
 800d4c0:	3710      	adds	r7, #16
 800d4c2:	46bd      	mov	sp, r7
 800d4c4:	bd80      	pop	{r7, pc}

0800d4c6 <_ZNSt12_Vector_baseIcSaIcEE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 800d4c6:	b480      	push	{r7}
 800d4c8:	b083      	sub	sp, #12
 800d4ca:	af00      	add	r7, sp, #0
 800d4cc:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 800d4ce:	687b      	ldr	r3, [r7, #4]
 800d4d0:	4618      	mov	r0, r3
 800d4d2:	370c      	adds	r7, #12
 800d4d4:	46bd      	mov	sp, r7
 800d4d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4da:	4770      	bx	lr

0800d4dc <_ZSt22__uninitialized_copy_aIN9__gnu_cxx17__normal_iteratorIPKcSt6vectorIcSaIcEEEEPccET0_T_SA_S9_RSaIT1_E>:
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 800d4dc:	b580      	push	{r7, lr}
 800d4de:	b084      	sub	sp, #16
 800d4e0:	af00      	add	r7, sp, #0
 800d4e2:	60f8      	str	r0, [r7, #12]
 800d4e4:	60b9      	str	r1, [r7, #8]
 800d4e6:	607a      	str	r2, [r7, #4]
 800d4e8:	603b      	str	r3, [r7, #0]
    { return std::uninitialized_copy(__first, __last, __result); }
 800d4ea:	687a      	ldr	r2, [r7, #4]
 800d4ec:	68b9      	ldr	r1, [r7, #8]
 800d4ee:	68f8      	ldr	r0, [r7, #12]
 800d4f0:	f000 fed5 	bl	800e29e <_ZSt18uninitialized_copyIN9__gnu_cxx17__normal_iteratorIPKcSt6vectorIcSaIcEEEEPcET0_T_SA_S9_>
 800d4f4:	4603      	mov	r3, r0
 800d4f6:	4618      	mov	r0, r3
 800d4f8:	3710      	adds	r7, #16
 800d4fa:	46bd      	mov	sp, r7
 800d4fc:	bd80      	pop	{r7, pc}

0800d4fe <_ZSt8_DestroyIPccEvT_S1_RSaIT0_E>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 800d4fe:	b580      	push	{r7, lr}
 800d500:	b084      	sub	sp, #16
 800d502:	af00      	add	r7, sp, #0
 800d504:	60f8      	str	r0, [r7, #12]
 800d506:	60b9      	str	r1, [r7, #8]
 800d508:	607a      	str	r2, [r7, #4]
      _Destroy(__first, __last);
 800d50a:	68b9      	ldr	r1, [r7, #8]
 800d50c:	68f8      	ldr	r0, [r7, #12]
 800d50e:	f000 fed8 	bl	800e2c2 <_ZSt8_DestroyIPcEvT_S1_>
    }
 800d512:	bf00      	nop
 800d514:	3710      	adds	r7, #16
 800d516:	46bd      	mov	sp, r7
 800d518:	bd80      	pop	{r7, pc}

0800d51a <_ZSt4moveIRN3jlb4EdgeEEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
 800d51a:	b480      	push	{r7}
 800d51c:	b083      	sub	sp, #12
 800d51e:	af00      	add	r7, sp, #0
 800d520:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800d522:	687b      	ldr	r3, [r7, #4]
 800d524:	4618      	mov	r0, r3
 800d526:	370c      	adds	r7, #12
 800d528:	46bd      	mov	sp, r7
 800d52a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d52e:	4770      	bx	lr

0800d530 <_ZNSt6vectorIN3jlb4EdgeESaIS1_EE12emplace_backIJS1_EEERS1_DpOT_>:
      vector<_Tp, _Alloc>::
 800d530:	b5b0      	push	{r4, r5, r7, lr}
 800d532:	b082      	sub	sp, #8
 800d534:	af00      	add	r7, sp, #0
 800d536:	6078      	str	r0, [r7, #4]
 800d538:	6039      	str	r1, [r7, #0]
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 800d53a:	687b      	ldr	r3, [r7, #4]
 800d53c:	685a      	ldr	r2, [r3, #4]
 800d53e:	687b      	ldr	r3, [r7, #4]
 800d540:	689b      	ldr	r3, [r3, #8]
 800d542:	429a      	cmp	r2, r3
 800d544:	d012      	beq.n	800d56c <_ZNSt6vectorIN3jlb4EdgeESaIS1_EE12emplace_backIJS1_EEERS1_DpOT_+0x3c>
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
 800d546:	687c      	ldr	r4, [r7, #4]
 800d548:	687b      	ldr	r3, [r7, #4]
 800d54a:	685d      	ldr	r5, [r3, #4]
 800d54c:	6838      	ldr	r0, [r7, #0]
 800d54e:	f000 fece 	bl	800e2ee <_ZSt7forwardIN3jlb4EdgeEEOT_RNSt16remove_referenceIS2_E4typeE>
 800d552:	4603      	mov	r3, r0
 800d554:	461a      	mov	r2, r3
 800d556:	4629      	mov	r1, r5
 800d558:	4620      	mov	r0, r4
 800d55a:	f000 ff2a 	bl	800e3b2 <_ZNSt16allocator_traitsISaIN3jlb4EdgeEEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>
	    ++this->_M_impl._M_finish;
 800d55e:	687b      	ldr	r3, [r7, #4]
 800d560:	685b      	ldr	r3, [r3, #4]
 800d562:	f103 0218 	add.w	r2, r3, #24
 800d566:	687b      	ldr	r3, [r7, #4]
 800d568:	605a      	str	r2, [r3, #4]
 800d56a:	e00c      	b.n	800d586 <_ZNSt6vectorIN3jlb4EdgeESaIS1_EE12emplace_backIJS1_EEERS1_DpOT_+0x56>
	  _M_realloc_insert(end(), std::forward<_Args>(__args)...);
 800d56c:	6878      	ldr	r0, [r7, #4]
 800d56e:	f000 ff32 	bl	800e3d6 <_ZNSt6vectorIN3jlb4EdgeESaIS1_EE3endEv>
 800d572:	4604      	mov	r4, r0
 800d574:	6838      	ldr	r0, [r7, #0]
 800d576:	f000 feba 	bl	800e2ee <_ZSt7forwardIN3jlb4EdgeEEOT_RNSt16remove_referenceIS2_E4typeE>
 800d57a:	4603      	mov	r3, r0
 800d57c:	461a      	mov	r2, r3
 800d57e:	4621      	mov	r1, r4
 800d580:	6878      	ldr	r0, [r7, #4]
 800d582:	f000 ff39 	bl	800e3f8 <_ZNSt6vectorIN3jlb4EdgeESaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>
	return back();
 800d586:	6878      	ldr	r0, [r7, #4]
 800d588:	f000 ffc0 	bl	800e50c <_ZNSt6vectorIN3jlb4EdgeESaIS1_EE4backEv>
 800d58c:	4603      	mov	r3, r0
      }
 800d58e:	4618      	mov	r0, r3
 800d590:	3708      	adds	r7, #8
 800d592:	46bd      	mov	sp, r7
 800d594:	bdb0      	pop	{r4, r5, r7, pc}

0800d596 <_ZNSaIN3jlb4NodeEEC1Ev>:
 800d596:	b580      	push	{r7, lr}
 800d598:	b082      	sub	sp, #8
 800d59a:	af00      	add	r7, sp, #0
 800d59c:	6078      	str	r0, [r7, #4]
 800d59e:	6878      	ldr	r0, [r7, #4]
 800d5a0:	f000 ffcf 	bl	800e542 <_ZN9__gnu_cxx13new_allocatorIN3jlb4NodeEEC1Ev>
 800d5a4:	687b      	ldr	r3, [r7, #4]
 800d5a6:	4618      	mov	r0, r3
 800d5a8:	3708      	adds	r7, #8
 800d5aa:	46bd      	mov	sp, r7
 800d5ac:	bd80      	pop	{r7, pc}

0800d5ae <_ZNSt12_Vector_baseIN3jlb4NodeESaIS1_EE17_Vector_impl_dataC1Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
 800d5ae:	b480      	push	{r7}
 800d5b0:	b083      	sub	sp, #12
 800d5b2:	af00      	add	r7, sp, #0
 800d5b4:	6078      	str	r0, [r7, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 800d5b6:	687b      	ldr	r3, [r7, #4]
 800d5b8:	2200      	movs	r2, #0
 800d5ba:	601a      	str	r2, [r3, #0]
 800d5bc:	687b      	ldr	r3, [r7, #4]
 800d5be:	2200      	movs	r2, #0
 800d5c0:	605a      	str	r2, [r3, #4]
 800d5c2:	687b      	ldr	r3, [r7, #4]
 800d5c4:	2200      	movs	r2, #0
 800d5c6:	609a      	str	r2, [r3, #8]
	{ }
 800d5c8:	687b      	ldr	r3, [r7, #4]
 800d5ca:	4618      	mov	r0, r3
 800d5cc:	370c      	adds	r7, #12
 800d5ce:	46bd      	mov	sp, r7
 800d5d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5d4:	4770      	bx	lr

0800d5d6 <_ZNSt12_Vector_baseIN3jlb4NodeESaIS1_EE13_M_deallocateEPS1_j>:
      _M_deallocate(pointer __p, size_t __n)
 800d5d6:	b580      	push	{r7, lr}
 800d5d8:	b084      	sub	sp, #16
 800d5da:	af00      	add	r7, sp, #0
 800d5dc:	60f8      	str	r0, [r7, #12]
 800d5de:	60b9      	str	r1, [r7, #8]
 800d5e0:	607a      	str	r2, [r7, #4]
	if (__p)
 800d5e2:	68bb      	ldr	r3, [r7, #8]
 800d5e4:	2b00      	cmp	r3, #0
 800d5e6:	d005      	beq.n	800d5f4 <_ZNSt12_Vector_baseIN3jlb4NodeESaIS1_EE13_M_deallocateEPS1_j+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 800d5e8:	68fb      	ldr	r3, [r7, #12]
 800d5ea:	687a      	ldr	r2, [r7, #4]
 800d5ec:	68b9      	ldr	r1, [r7, #8]
 800d5ee:	4618      	mov	r0, r3
 800d5f0:	f000 ffb2 	bl	800e558 <_ZNSt16allocator_traitsISaIN3jlb4NodeEEE10deallocateERS2_PS1_j>
      }
 800d5f4:	bf00      	nop
 800d5f6:	3710      	adds	r7, #16
 800d5f8:	46bd      	mov	sp, r7
 800d5fa:	bd80      	pop	{r7, pc}

0800d5fc <_ZNSt12_Vector_baseIN3jlb4NodeESaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 800d5fc:	b480      	push	{r7}
 800d5fe:	b083      	sub	sp, #12
 800d600:	af00      	add	r7, sp, #0
 800d602:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 800d604:	687b      	ldr	r3, [r7, #4]
 800d606:	4618      	mov	r0, r3
 800d608:	370c      	adds	r7, #12
 800d60a:	46bd      	mov	sp, r7
 800d60c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d610:	4770      	bx	lr

0800d612 <_ZSt8_DestroyIPN3jlb4NodeES1_EvT_S3_RSaIT0_E>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 800d612:	b580      	push	{r7, lr}
 800d614:	b084      	sub	sp, #16
 800d616:	af00      	add	r7, sp, #0
 800d618:	60f8      	str	r0, [r7, #12]
 800d61a:	60b9      	str	r1, [r7, #8]
 800d61c:	607a      	str	r2, [r7, #4]
      _Destroy(__first, __last);
 800d61e:	68b9      	ldr	r1, [r7, #8]
 800d620:	68f8      	ldr	r0, [r7, #12]
 800d622:	f000 ffb8 	bl	800e596 <_ZSt8_DestroyIPN3jlb4NodeEEvT_S3_>
    }
 800d626:	bf00      	nop
 800d628:	3710      	adds	r7, #16
 800d62a:	46bd      	mov	sp, r7
 800d62c:	bd80      	pop	{r7, pc}

0800d62e <_ZSt4moveIRN3jlb4NodeEEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
 800d62e:	b480      	push	{r7}
 800d630:	b083      	sub	sp, #12
 800d632:	af00      	add	r7, sp, #0
 800d634:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800d636:	687b      	ldr	r3, [r7, #4]
 800d638:	4618      	mov	r0, r3
 800d63a:	370c      	adds	r7, #12
 800d63c:	46bd      	mov	sp, r7
 800d63e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d642:	4770      	bx	lr

0800d644 <_ZNSt6vectorIN3jlb4NodeESaIS1_EE12emplace_backIJS1_EEERS1_DpOT_>:
      vector<_Tp, _Alloc>::
 800d644:	b5b0      	push	{r4, r5, r7, lr}
 800d646:	b082      	sub	sp, #8
 800d648:	af00      	add	r7, sp, #0
 800d64a:	6078      	str	r0, [r7, #4]
 800d64c:	6039      	str	r1, [r7, #0]
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 800d64e:	687b      	ldr	r3, [r7, #4]
 800d650:	685a      	ldr	r2, [r3, #4]
 800d652:	687b      	ldr	r3, [r7, #4]
 800d654:	689b      	ldr	r3, [r3, #8]
 800d656:	429a      	cmp	r2, r3
 800d658:	d012      	beq.n	800d680 <_ZNSt6vectorIN3jlb4NodeESaIS1_EE12emplace_backIJS1_EEERS1_DpOT_+0x3c>
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
 800d65a:	687c      	ldr	r4, [r7, #4]
 800d65c:	687b      	ldr	r3, [r7, #4]
 800d65e:	685d      	ldr	r5, [r3, #4]
 800d660:	6838      	ldr	r0, [r7, #0]
 800d662:	f000 ffae 	bl	800e5c2 <_ZSt7forwardIN3jlb4NodeEEOT_RNSt16remove_referenceIS2_E4typeE>
 800d666:	4603      	mov	r3, r0
 800d668:	461a      	mov	r2, r3
 800d66a:	4629      	mov	r1, r5
 800d66c:	4620      	mov	r0, r4
 800d66e:	f000 ffea 	bl	800e646 <_ZNSt16allocator_traitsISaIN3jlb4NodeEEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>
	    ++this->_M_impl._M_finish;
 800d672:	687b      	ldr	r3, [r7, #4]
 800d674:	685b      	ldr	r3, [r3, #4]
 800d676:	f103 0218 	add.w	r2, r3, #24
 800d67a:	687b      	ldr	r3, [r7, #4]
 800d67c:	605a      	str	r2, [r3, #4]
 800d67e:	e00c      	b.n	800d69a <_ZNSt6vectorIN3jlb4NodeESaIS1_EE12emplace_backIJS1_EEERS1_DpOT_+0x56>
	  _M_realloc_insert(end(), std::forward<_Args>(__args)...);
 800d680:	6878      	ldr	r0, [r7, #4]
 800d682:	f000 fff2 	bl	800e66a <_ZNSt6vectorIN3jlb4NodeESaIS1_EE3endEv>
 800d686:	4604      	mov	r4, r0
 800d688:	6838      	ldr	r0, [r7, #0]
 800d68a:	f000 ff9a 	bl	800e5c2 <_ZSt7forwardIN3jlb4NodeEEOT_RNSt16remove_referenceIS2_E4typeE>
 800d68e:	4603      	mov	r3, r0
 800d690:	461a      	mov	r2, r3
 800d692:	4621      	mov	r1, r4
 800d694:	6878      	ldr	r0, [r7, #4]
 800d696:	f000 fff9 	bl	800e68c <_ZNSt6vectorIN3jlb4NodeESaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>
	return back();
 800d69a:	6878      	ldr	r0, [r7, #4]
 800d69c:	f001 f88a 	bl	800e7b4 <_ZNSt6vectorIN3jlb4NodeESaIS1_EE4backEv>
 800d6a0:	4603      	mov	r3, r0
      }
 800d6a2:	4618      	mov	r0, r3
 800d6a4:	3708      	adds	r7, #8
 800d6a6:	46bd      	mov	sp, r7
 800d6a8:	bdb0      	pop	{r4, r5, r7, pc}

0800d6aa <_ZNSt12_Vector_baseIcSaIcEEC1ERKS0_>:
      _Vector_base(const allocator_type& __a) _GLIBCXX_NOEXCEPT
 800d6aa:	b580      	push	{r7, lr}
 800d6ac:	b082      	sub	sp, #8
 800d6ae:	af00      	add	r7, sp, #0
 800d6b0:	6078      	str	r0, [r7, #4]
 800d6b2:	6039      	str	r1, [r7, #0]
      : _M_impl(__a) { }
 800d6b4:	687b      	ldr	r3, [r7, #4]
 800d6b6:	6839      	ldr	r1, [r7, #0]
 800d6b8:	4618      	mov	r0, r3
 800d6ba:	f000 fdb4 	bl	800e226 <_ZNSt12_Vector_baseIcSaIcEE12_Vector_implC1ERKS0_>
 800d6be:	687b      	ldr	r3, [r7, #4]
 800d6c0:	4618      	mov	r0, r3
 800d6c2:	3708      	adds	r7, #8
 800d6c4:	46bd      	mov	sp, r7
 800d6c6:	bd80      	pop	{r7, pc}

0800d6c8 <_ZNKSt16initializer_listIcE5beginEv>:
      constexpr size_type
      size() const noexcept { return _M_len; }

      // First element.
      constexpr const_iterator
      begin() const noexcept { return _M_array; }
 800d6c8:	b480      	push	{r7}
 800d6ca:	b083      	sub	sp, #12
 800d6cc:	af00      	add	r7, sp, #0
 800d6ce:	6078      	str	r0, [r7, #4]
 800d6d0:	687b      	ldr	r3, [r7, #4]
 800d6d2:	681b      	ldr	r3, [r3, #0]
 800d6d4:	4618      	mov	r0, r3
 800d6d6:	370c      	adds	r7, #12
 800d6d8:	46bd      	mov	sp, r7
 800d6da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6de:	4770      	bx	lr

0800d6e0 <_ZNKSt16initializer_listIcE3endEv>:

      // One past the last element.
      constexpr const_iterator
      end() const noexcept { return begin() + size(); }
 800d6e0:	b590      	push	{r4, r7, lr}
 800d6e2:	b083      	sub	sp, #12
 800d6e4:	af00      	add	r7, sp, #0
 800d6e6:	6078      	str	r0, [r7, #4]
 800d6e8:	6878      	ldr	r0, [r7, #4]
 800d6ea:	f7ff ffed 	bl	800d6c8 <_ZNKSt16initializer_listIcE5beginEv>
 800d6ee:	4604      	mov	r4, r0
 800d6f0:	6878      	ldr	r0, [r7, #4]
 800d6f2:	f001 f87a 	bl	800e7ea <_ZNKSt16initializer_listIcE4sizeEv>
 800d6f6:	4603      	mov	r3, r0
 800d6f8:	4423      	add	r3, r4
 800d6fa:	4618      	mov	r0, r3
 800d6fc:	370c      	adds	r7, #12
 800d6fe:	46bd      	mov	sp, r7
 800d700:	bd90      	pop	{r4, r7, pc}

0800d702 <_ZSt8distanceIPKcENSt15iterator_traitsIT_E15difference_typeES3_S3_>:
   *  and are constant time.  For other %iterator classes they are linear time.
  */
  template<typename _InputIterator>
    inline _GLIBCXX17_CONSTEXPR
    typename iterator_traits<_InputIterator>::difference_type
    distance(_InputIterator __first, _InputIterator __last)
 800d702:	b5b0      	push	{r4, r5, r7, lr}
 800d704:	b082      	sub	sp, #8
 800d706:	af00      	add	r7, sp, #0
 800d708:	6078      	str	r0, [r7, #4]
 800d70a:	6039      	str	r1, [r7, #0]
    {
      // concept requirements -- taken care of in __distance
      return std::__distance(__first, __last,
 800d70c:	687c      	ldr	r4, [r7, #4]
			     std::__iterator_category(__first));
 800d70e:	1d3b      	adds	r3, r7, #4
 800d710:	4618      	mov	r0, r3
 800d712:	f001 f876 	bl	800e802 <_ZSt19__iterator_categoryIPKcENSt15iterator_traitsIT_E17iterator_categoryERKS3_>
      return std::__distance(__first, __last,
 800d716:	462a      	mov	r2, r5
 800d718:	6839      	ldr	r1, [r7, #0]
 800d71a:	4620      	mov	r0, r4
 800d71c:	f001 f87b 	bl	800e816 <_ZSt10__distanceIPKcENSt15iterator_traitsIT_E15difference_typeES3_S3_St26random_access_iterator_tag>
 800d720:	4603      	mov	r3, r0
    }
 800d722:	4618      	mov	r0, r3
 800d724:	3708      	adds	r7, #8
 800d726:	46bd      	mov	sp, r7
 800d728:	bdb0      	pop	{r4, r5, r7, pc}

0800d72a <_ZNSt6vectorIcSaIcEE19_M_range_initializeIPKcEEvT_S5_St20forward_iterator_tag>:
	_M_range_initialize(_ForwardIterator __first, _ForwardIterator __last,
 800d72a:	b590      	push	{r4, r7, lr}
 800d72c:	b087      	sub	sp, #28
 800d72e:	af00      	add	r7, sp, #0
 800d730:	60f8      	str	r0, [r7, #12]
 800d732:	60b9      	str	r1, [r7, #8]
 800d734:	607a      	str	r2, [r7, #4]
 800d736:	703b      	strb	r3, [r7, #0]
	  const size_type __n = std::distance(__first, __last);
 800d738:	6879      	ldr	r1, [r7, #4]
 800d73a:	68b8      	ldr	r0, [r7, #8]
 800d73c:	f7ff ffe1 	bl	800d702 <_ZSt8distanceIPKcENSt15iterator_traitsIT_E15difference_typeES3_S3_>
 800d740:	4603      	mov	r3, r0
 800d742:	617b      	str	r3, [r7, #20]
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
 800d744:	68fc      	ldr	r4, [r7, #12]
 800d746:	68fb      	ldr	r3, [r7, #12]
 800d748:	4618      	mov	r0, r3
 800d74a:	f7ff febc 	bl	800d4c6 <_ZNSt12_Vector_baseIcSaIcEE19_M_get_Tp_allocatorEv>
 800d74e:	4603      	mov	r3, r0
 800d750:	4619      	mov	r1, r3
 800d752:	6978      	ldr	r0, [r7, #20]
 800d754:	f001 f86e 	bl	800e834 <_ZNSt6vectorIcSaIcEE17_S_check_init_lenEjRKS0_>
 800d758:	4603      	mov	r3, r0
 800d75a:	4619      	mov	r1, r3
 800d75c:	4620      	mov	r0, r4
 800d75e:	f001 f891 	bl	800e884 <_ZNSt12_Vector_baseIcSaIcEE11_M_allocateEj>
 800d762:	4602      	mov	r2, r0
 800d764:	68fb      	ldr	r3, [r7, #12]
 800d766:	601a      	str	r2, [r3, #0]
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 800d768:	68fb      	ldr	r3, [r7, #12]
 800d76a:	681a      	ldr	r2, [r3, #0]
 800d76c:	697b      	ldr	r3, [r7, #20]
 800d76e:	441a      	add	r2, r3
 800d770:	68fb      	ldr	r3, [r7, #12]
 800d772:	609a      	str	r2, [r3, #8]
	    std::__uninitialized_copy_a(__first, __last,
 800d774:	68fb      	ldr	r3, [r7, #12]
 800d776:	681c      	ldr	r4, [r3, #0]
					_M_get_Tp_allocator());
 800d778:	68fb      	ldr	r3, [r7, #12]
 800d77a:	4618      	mov	r0, r3
 800d77c:	f7ff fea3 	bl	800d4c6 <_ZNSt12_Vector_baseIcSaIcEE19_M_get_Tp_allocatorEv>
 800d780:	4603      	mov	r3, r0
	    std::__uninitialized_copy_a(__first, __last,
 800d782:	4622      	mov	r2, r4
 800d784:	6879      	ldr	r1, [r7, #4]
 800d786:	68b8      	ldr	r0, [r7, #8]
 800d788:	f001 f890 	bl	800e8ac <_ZSt22__uninitialized_copy_aIPKcPccET0_T_S4_S3_RSaIT1_E>
 800d78c:	4602      	mov	r2, r0
	  this->_M_impl._M_finish =
 800d78e:	68fb      	ldr	r3, [r7, #12]
 800d790:	605a      	str	r2, [r3, #4]
	}
 800d792:	bf00      	nop
 800d794:	371c      	adds	r7, #28
 800d796:	46bd      	mov	sp, r7
 800d798:	bd90      	pop	{r4, r7, pc}

0800d79a <_ZNSt11_Deque_baseIfSaIfEE11_Deque_implC1Ev>:
	_Deque_impl() _GLIBCXX_NOEXCEPT_IF(
 800d79a:	b580      	push	{r7, lr}
 800d79c:	b082      	sub	sp, #8
 800d79e:	af00      	add	r7, sp, #0
 800d7a0:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 800d7a2:	6878      	ldr	r0, [r7, #4]
 800d7a4:	f7f5 ff4e 	bl	8003644 <_ZNSaIfEC1Ev>
 800d7a8:	687b      	ldr	r3, [r7, #4]
 800d7aa:	4618      	mov	r0, r3
 800d7ac:	f001 f88f 	bl	800e8ce <_ZNSt11_Deque_baseIfSaIfEE16_Deque_impl_dataC1Ev>
	{ }
 800d7b0:	687b      	ldr	r3, [r7, #4]
 800d7b2:	4618      	mov	r0, r3
 800d7b4:	3708      	adds	r7, #8
 800d7b6:	46bd      	mov	sp, r7
 800d7b8:	bd80      	pop	{r7, pc}

0800d7ba <_ZNSt11_Deque_baseIfSaIfEE17_M_initialize_mapEj>:
    _Deque_base<_Tp, _Alloc>::
 800d7ba:	b590      	push	{r4, r7, lr}
 800d7bc:	b089      	sub	sp, #36	; 0x24
 800d7be:	af00      	add	r7, sp, #0
 800d7c0:	6078      	str	r0, [r7, #4]
 800d7c2:	6039      	str	r1, [r7, #0]
      const size_t __num_nodes = (__num_elements / __deque_buf_size(sizeof(_Tp))
 800d7c4:	2004      	movs	r0, #4
 800d7c6:	f7fb f970 	bl	8008aaa <_ZSt16__deque_buf_sizej>
 800d7ca:	4602      	mov	r2, r0
 800d7cc:	683b      	ldr	r3, [r7, #0]
 800d7ce:	fbb3 f3f2 	udiv	r3, r3, r2
 800d7d2:	3301      	adds	r3, #1
 800d7d4:	61fb      	str	r3, [r7, #28]
      this->_M_impl._M_map_size = std::max((size_t) _S_initial_map_size,
 800d7d6:	2308      	movs	r3, #8
 800d7d8:	60fb      	str	r3, [r7, #12]
					   size_t(__num_nodes + 2));
 800d7da:	69fb      	ldr	r3, [r7, #28]
 800d7dc:	3302      	adds	r3, #2
 800d7de:	613b      	str	r3, [r7, #16]
      this->_M_impl._M_map_size = std::max((size_t) _S_initial_map_size,
 800d7e0:	f107 0210 	add.w	r2, r7, #16
 800d7e4:	f107 030c 	add.w	r3, r7, #12
 800d7e8:	4611      	mov	r1, r2
 800d7ea:	4618      	mov	r0, r3
 800d7ec:	f7f6 f98b 	bl	8003b06 <_ZSt3maxIjERKT_S2_S2_>
 800d7f0:	4603      	mov	r3, r0
 800d7f2:	681a      	ldr	r2, [r3, #0]
 800d7f4:	687b      	ldr	r3, [r7, #4]
 800d7f6:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_map = _M_allocate_map(this->_M_impl._M_map_size);
 800d7f8:	687b      	ldr	r3, [r7, #4]
 800d7fa:	685b      	ldr	r3, [r3, #4]
 800d7fc:	4619      	mov	r1, r3
 800d7fe:	6878      	ldr	r0, [r7, #4]
 800d800:	f001 f87e 	bl	800e900 <_ZNSt11_Deque_baseIfSaIfEE15_M_allocate_mapEj>
 800d804:	4602      	mov	r2, r0
 800d806:	687b      	ldr	r3, [r7, #4]
 800d808:	601a      	str	r2, [r3, #0]
      _Map_pointer __nstart = (this->_M_impl._M_map
 800d80a:	687b      	ldr	r3, [r7, #4]
 800d80c:	681a      	ldr	r2, [r3, #0]
			       + (this->_M_impl._M_map_size - __num_nodes) / 2);
 800d80e:	687b      	ldr	r3, [r7, #4]
 800d810:	6859      	ldr	r1, [r3, #4]
 800d812:	69fb      	ldr	r3, [r7, #28]
 800d814:	1acb      	subs	r3, r1, r3
 800d816:	085b      	lsrs	r3, r3, #1
 800d818:	009b      	lsls	r3, r3, #2
      _Map_pointer __nstart = (this->_M_impl._M_map
 800d81a:	4413      	add	r3, r2
 800d81c:	61bb      	str	r3, [r7, #24]
      _Map_pointer __nfinish = __nstart + __num_nodes;
 800d81e:	69fb      	ldr	r3, [r7, #28]
 800d820:	009b      	lsls	r3, r3, #2
 800d822:	69ba      	ldr	r2, [r7, #24]
 800d824:	4413      	add	r3, r2
 800d826:	617b      	str	r3, [r7, #20]
	{ _M_create_nodes(__nstart, __nfinish); }
 800d828:	697a      	ldr	r2, [r7, #20]
 800d82a:	69b9      	ldr	r1, [r7, #24]
 800d82c:	6878      	ldr	r0, [r7, #4]
 800d82e:	f001 f884 	bl	800e93a <_ZNSt11_Deque_baseIfSaIfEE15_M_create_nodesEPPfS3_>
      this->_M_impl._M_start._M_set_node(__nstart);
 800d832:	687b      	ldr	r3, [r7, #4]
 800d834:	3308      	adds	r3, #8
 800d836:	69b9      	ldr	r1, [r7, #24]
 800d838:	4618      	mov	r0, r3
 800d83a:	f001 f899 	bl	800e970 <_ZNSt15_Deque_iteratorIfRfPfE11_M_set_nodeEPS1_>
      this->_M_impl._M_finish._M_set_node(__nfinish - 1);
 800d83e:	687b      	ldr	r3, [r7, #4]
 800d840:	f103 0218 	add.w	r2, r3, #24
 800d844:	697b      	ldr	r3, [r7, #20]
 800d846:	3b04      	subs	r3, #4
 800d848:	4619      	mov	r1, r3
 800d84a:	4610      	mov	r0, r2
 800d84c:	f001 f890 	bl	800e970 <_ZNSt15_Deque_iteratorIfRfPfE11_M_set_nodeEPS1_>
      this->_M_impl._M_start._M_cur = _M_impl._M_start._M_first;
 800d850:	687b      	ldr	r3, [r7, #4]
 800d852:	68da      	ldr	r2, [r3, #12]
 800d854:	687b      	ldr	r3, [r7, #4]
 800d856:	609a      	str	r2, [r3, #8]
      this->_M_impl._M_finish._M_cur = (this->_M_impl._M_finish._M_first
 800d858:	687b      	ldr	r3, [r7, #4]
 800d85a:	69dc      	ldr	r4, [r3, #28]
					% __deque_buf_size(sizeof(_Tp)));
 800d85c:	2004      	movs	r0, #4
 800d85e:	f7fb f924 	bl	8008aaa <_ZSt16__deque_buf_sizej>
 800d862:	4602      	mov	r2, r0
 800d864:	683b      	ldr	r3, [r7, #0]
 800d866:	fbb3 f1f2 	udiv	r1, r3, r2
 800d86a:	fb01 f202 	mul.w	r2, r1, r2
 800d86e:	1a9b      	subs	r3, r3, r2
					+ __num_elements
 800d870:	009b      	lsls	r3, r3, #2
 800d872:	18e2      	adds	r2, r4, r3
      this->_M_impl._M_finish._M_cur = (this->_M_impl._M_finish._M_first
 800d874:	687b      	ldr	r3, [r7, #4]
 800d876:	619a      	str	r2, [r3, #24]
    }
 800d878:	bf00      	nop
 800d87a:	3724      	adds	r7, #36	; 0x24
 800d87c:	46bd      	mov	sp, r7
 800d87e:	bd90      	pop	{r4, r7, pc}

0800d880 <_ZNSt11_Deque_baseIfSaIfEE16_M_destroy_nodesEPPfS3_>:
    _Deque_base<_Tp, _Alloc>::
 800d880:	b580      	push	{r7, lr}
 800d882:	b086      	sub	sp, #24
 800d884:	af00      	add	r7, sp, #0
 800d886:	60f8      	str	r0, [r7, #12]
 800d888:	60b9      	str	r1, [r7, #8]
 800d88a:	607a      	str	r2, [r7, #4]
      for (_Map_pointer __n = __nstart; __n < __nfinish; ++__n)
 800d88c:	68bb      	ldr	r3, [r7, #8]
 800d88e:	617b      	str	r3, [r7, #20]
 800d890:	e008      	b.n	800d8a4 <_ZNSt11_Deque_baseIfSaIfEE16_M_destroy_nodesEPPfS3_+0x24>
	_M_deallocate_node(*__n);
 800d892:	697b      	ldr	r3, [r7, #20]
 800d894:	681b      	ldr	r3, [r3, #0]
 800d896:	4619      	mov	r1, r3
 800d898:	68f8      	ldr	r0, [r7, #12]
 800d89a:	f001 f882 	bl	800e9a2 <_ZNSt11_Deque_baseIfSaIfEE18_M_deallocate_nodeEPf>
      for (_Map_pointer __n = __nstart; __n < __nfinish; ++__n)
 800d89e:	697b      	ldr	r3, [r7, #20]
 800d8a0:	3304      	adds	r3, #4
 800d8a2:	617b      	str	r3, [r7, #20]
 800d8a4:	697a      	ldr	r2, [r7, #20]
 800d8a6:	687b      	ldr	r3, [r7, #4]
 800d8a8:	429a      	cmp	r2, r3
 800d8aa:	d3f2      	bcc.n	800d892 <_ZNSt11_Deque_baseIfSaIfEE16_M_destroy_nodesEPPfS3_+0x12>
    }
 800d8ac:	bf00      	nop
 800d8ae:	bf00      	nop
 800d8b0:	3718      	adds	r7, #24
 800d8b2:	46bd      	mov	sp, r7
 800d8b4:	bd80      	pop	{r7, pc}

0800d8b6 <_ZNSt11_Deque_baseIfSaIfEE17_M_deallocate_mapEPPfj>:
      _M_deallocate_map(_Map_pointer __p, size_t __n) _GLIBCXX_NOEXCEPT
 800d8b6:	b580      	push	{r7, lr}
 800d8b8:	b086      	sub	sp, #24
 800d8ba:	af00      	add	r7, sp, #0
 800d8bc:	60f8      	str	r0, [r7, #12]
 800d8be:	60b9      	str	r1, [r7, #8]
 800d8c0:	607a      	str	r2, [r7, #4]
	_Map_alloc_type __map_alloc = _M_get_map_allocator();
 800d8c2:	f107 0314 	add.w	r3, r7, #20
 800d8c6:	68f9      	ldr	r1, [r7, #12]
 800d8c8:	4618      	mov	r0, r3
 800d8ca:	f001 f87d 	bl	800e9c8 <_ZNKSt11_Deque_baseIfSaIfEE20_M_get_map_allocatorEv>
	_Map_alloc_traits::deallocate(__map_alloc, __p, __n);
 800d8ce:	f107 0314 	add.w	r3, r7, #20
 800d8d2:	687a      	ldr	r2, [r7, #4]
 800d8d4:	68b9      	ldr	r1, [r7, #8]
 800d8d6:	4618      	mov	r0, r3
 800d8d8:	f001 f892 	bl	800ea00 <_ZNSt16allocator_traitsISaIPfEE10deallocateERS1_PS0_j>
      }
 800d8dc:	f107 0314 	add.w	r3, r7, #20
 800d8e0:	4618      	mov	r0, r3
 800d8e2:	f001 f882 	bl	800e9ea <_ZNSaIPfED1Ev>
 800d8e6:	3718      	adds	r7, #24
 800d8e8:	46bd      	mov	sp, r7
 800d8ea:	bd80      	pop	{r7, pc}

0800d8ec <_ZNSt11_Deque_baseIfSaIfEE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 800d8ec:	b480      	push	{r7}
 800d8ee:	b083      	sub	sp, #12
 800d8f0:	af00      	add	r7, sp, #0
 800d8f2:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 800d8f4:	687b      	ldr	r3, [r7, #4]
 800d8f6:	4618      	mov	r0, r3
 800d8f8:	370c      	adds	r7, #12
 800d8fa:	46bd      	mov	sp, r7
 800d8fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d900:	4770      	bx	lr

0800d902 <_ZNSt5dequeIfSaIfEE15_M_destroy_dataESt15_Deque_iteratorIfRfPfES5_RKS0_>:
	void
	_M_destroy_data(iterator __first, iterator __last, const _Alloc1&)
	{ _M_destroy_data_aux(__first, __last); }

      void
      _M_destroy_data(iterator __first, iterator __last,
 800d902:	b480      	push	{r7}
 800d904:	b08d      	sub	sp, #52	; 0x34
 800d906:	af00      	add	r7, sp, #0
 800d908:	60f8      	str	r0, [r7, #12]
 800d90a:	60b9      	str	r1, [r7, #8]
 800d90c:	607a      	str	r2, [r7, #4]
 800d90e:	603b      	str	r3, [r7, #0]
		      const std::allocator<_Tp>&)
      {
	if (!__has_trivial_destructor(value_type))
	  _M_destroy_data_aux(__first, __last);
      }
 800d910:	bf00      	nop
 800d912:	3734      	adds	r7, #52	; 0x34
 800d914:	46bd      	mov	sp, r7
 800d916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d91a:	4770      	bx	lr

0800d91c <_ZNSt5dequeIfSaIfEE16_M_push_back_auxIJRKfEEEvDpOT_>:
  // Called only if _M_impl._M_finish._M_cur == _M_impl._M_finish._M_last - 1.
  template<typename _Tp, typename _Alloc>
#if __cplusplus >= 201103L
    template<typename... _Args>
      void
      deque<_Tp, _Alloc>::
 800d91c:	b5b0      	push	{r4, r5, r7, lr}
 800d91e:	b082      	sub	sp, #8
 800d920:	af00      	add	r7, sp, #0
 800d922:	6078      	str	r0, [r7, #4]
 800d924:	6039      	str	r1, [r7, #0]
      void
      deque<_Tp, _Alloc>::
      _M_push_back_aux(const value_type& __t)
#endif
      {
	if (size() == max_size())
 800d926:	6878      	ldr	r0, [r7, #4]
 800d928:	f7ff f9b9 	bl	800cc9e <_ZNKSt5dequeIfSaIfEE4sizeEv>
 800d92c:	4604      	mov	r4, r0
 800d92e:	6878      	ldr	r0, [r7, #4]
 800d930:	f001 f885 	bl	800ea3e <_ZNKSt5dequeIfSaIfEE8max_sizeEv>
 800d934:	4603      	mov	r3, r0
 800d936:	429c      	cmp	r4, r3
 800d938:	bf0c      	ite	eq
 800d93a:	2301      	moveq	r3, #1
 800d93c:	2300      	movne	r3, #0
 800d93e:	b2db      	uxtb	r3, r3
 800d940:	2b00      	cmp	r3, #0
 800d942:	d002      	beq.n	800d94a <_ZNSt5dequeIfSaIfEE16_M_push_back_auxIJRKfEEEvDpOT_+0x2e>
	  __throw_length_error(
 800d944:	4816      	ldr	r0, [pc, #88]	; (800d9a0 <_ZNSt5dequeIfSaIfEE16_M_push_back_auxIJRKfEEEvDpOT_+0x84>)
 800d946:	f013 fc37 	bl	80211b8 <_ZSt20__throw_length_errorPKc>
	      __N("cannot create std::deque larger than max_size()"));

	_M_reserve_map_at_back();
 800d94a:	2101      	movs	r1, #1
 800d94c:	6878      	ldr	r0, [r7, #4]
 800d94e:	f001 f887 	bl	800ea60 <_ZNSt5dequeIfSaIfEE22_M_reserve_map_at_backEj>
	*(this->_M_impl._M_finish._M_node + 1) = this->_M_allocate_node();
 800d952:	687a      	ldr	r2, [r7, #4]
 800d954:	687b      	ldr	r3, [r7, #4]
 800d956:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d958:	1d1c      	adds	r4, r3, #4
 800d95a:	4610      	mov	r0, r2
 800d95c:	f001 f89b 	bl	800ea96 <_ZNSt11_Deque_baseIfSaIfEE16_M_allocate_nodeEv>
 800d960:	4603      	mov	r3, r0
 800d962:	6023      	str	r3, [r4, #0]
	__try
	  {
#if __cplusplus >= 201103L
	    _Alloc_traits::construct(this->_M_impl,
 800d964:	687c      	ldr	r4, [r7, #4]
 800d966:	687b      	ldr	r3, [r7, #4]
 800d968:	699d      	ldr	r5, [r3, #24]
 800d96a:	6838      	ldr	r0, [r7, #0]
 800d96c:	f7f5 ffcc 	bl	8003908 <_ZSt7forwardIRKfEOT_RNSt16remove_referenceIS2_E4typeE>
 800d970:	4603      	mov	r3, r0
 800d972:	461a      	mov	r2, r3
 800d974:	4629      	mov	r1, r5
 800d976:	4620      	mov	r0, r4
 800d978:	f7f5 fee6 	bl	8003748 <_ZNSt16allocator_traitsISaIfEE9constructIfJRKfEEEvRS0_PT_DpOT0_>
				     this->_M_impl._M_finish._M_cur,
				     std::forward<_Args>(__args)...);
#else
	    this->_M_impl.construct(this->_M_impl._M_finish._M_cur, __t);
#endif
	    this->_M_impl._M_finish._M_set_node(this->_M_impl._M_finish._M_node
 800d97c:	687b      	ldr	r3, [r7, #4]
 800d97e:	f103 0218 	add.w	r2, r3, #24
 800d982:	687b      	ldr	r3, [r7, #4]
 800d984:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d986:	3304      	adds	r3, #4
 800d988:	4619      	mov	r1, r3
 800d98a:	4610      	mov	r0, r2
 800d98c:	f000 fff0 	bl	800e970 <_ZNSt15_Deque_iteratorIfRfPfE11_M_set_nodeEPS1_>
						+ 1);
	    this->_M_impl._M_finish._M_cur = this->_M_impl._M_finish._M_first;
 800d990:	687b      	ldr	r3, [r7, #4]
 800d992:	69da      	ldr	r2, [r3, #28]
 800d994:	687b      	ldr	r3, [r7, #4]
 800d996:	619a      	str	r2, [r3, #24]
	__catch(...)
	  {
	    _M_deallocate_node(*(this->_M_impl._M_finish._M_node + 1));
	    __throw_exception_again;
	  }
      }
 800d998:	bf00      	nop
 800d99a:	3708      	adds	r7, #8
 800d99c:	46bd      	mov	sp, r7
 800d99e:	bdb0      	pop	{r4, r5, r7, pc}
 800d9a0:	08025e30 	.word	0x08025e30

0800d9a4 <_ZStmiRKSt15_Deque_iteratorIfRfPfES4_>:
      operator-(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 800d9a4:	b580      	push	{r7, lr}
 800d9a6:	b082      	sub	sp, #8
 800d9a8:	af00      	add	r7, sp, #0
 800d9aa:	6078      	str	r0, [r7, #4]
 800d9ac:	6039      	str	r1, [r7, #0]
	return difference_type(_S_buffer_size())
 800d9ae:	f001 f884 	bl	800eaba <_ZNSt15_Deque_iteratorIfRfPfE14_S_buffer_sizeEv>
 800d9b2:	4603      	mov	r3, r0
 800d9b4:	4619      	mov	r1, r3
	  * (__x._M_node - __y._M_node - bool(__x._M_node))
 800d9b6:	687b      	ldr	r3, [r7, #4]
 800d9b8:	68da      	ldr	r2, [r3, #12]
 800d9ba:	683b      	ldr	r3, [r7, #0]
 800d9bc:	68db      	ldr	r3, [r3, #12]
 800d9be:	1ad3      	subs	r3, r2, r3
 800d9c0:	109b      	asrs	r3, r3, #2
 800d9c2:	461a      	mov	r2, r3
 800d9c4:	687b      	ldr	r3, [r7, #4]
 800d9c6:	68db      	ldr	r3, [r3, #12]
 800d9c8:	2b00      	cmp	r3, #0
 800d9ca:	bf14      	ite	ne
 800d9cc:	2301      	movne	r3, #1
 800d9ce:	2300      	moveq	r3, #0
 800d9d0:	b2db      	uxtb	r3, r3
 800d9d2:	1ad3      	subs	r3, r2, r3
 800d9d4:	fb01 f303 	mul.w	r3, r1, r3
	  + (__x._M_cur - __x._M_first)
 800d9d8:	687a      	ldr	r2, [r7, #4]
 800d9da:	6811      	ldr	r1, [r2, #0]
 800d9dc:	687a      	ldr	r2, [r7, #4]
 800d9de:	6852      	ldr	r2, [r2, #4]
 800d9e0:	1a8a      	subs	r2, r1, r2
 800d9e2:	1092      	asrs	r2, r2, #2
 800d9e4:	4413      	add	r3, r2
	  + (__y._M_last - __y._M_cur);
 800d9e6:	683a      	ldr	r2, [r7, #0]
 800d9e8:	6891      	ldr	r1, [r2, #8]
 800d9ea:	683a      	ldr	r2, [r7, #0]
 800d9ec:	6812      	ldr	r2, [r2, #0]
 800d9ee:	1a8a      	subs	r2, r1, r2
 800d9f0:	1092      	asrs	r2, r2, #2
 800d9f2:	4413      	add	r3, r2
      }
 800d9f4:	4618      	mov	r0, r3
 800d9f6:	3708      	adds	r7, #8
 800d9f8:	46bd      	mov	sp, r7
 800d9fa:	bd80      	pop	{r7, pc}

0800d9fc <_ZNSt16allocator_traitsISaIfEE7destroyIfEEvRS0_PT_>:
	destroy(allocator_type& __a __attribute__((__unused__)), _Up* __p)
 800d9fc:	b580      	push	{r7, lr}
 800d9fe:	b082      	sub	sp, #8
 800da00:	af00      	add	r7, sp, #0
 800da02:	6078      	str	r0, [r7, #4]
 800da04:	6039      	str	r1, [r7, #0]
	  std::destroy_at(__p);
 800da06:	6838      	ldr	r0, [r7, #0]
 800da08:	f7f6 f8c3 	bl	8003b92 <_ZSt10destroy_atIfEvPT_>
	}
 800da0c:	bf00      	nop
 800da0e:	3708      	adds	r7, #8
 800da10:	46bd      	mov	sp, r7
 800da12:	bd80      	pop	{r7, pc}

0800da14 <_ZNSt5dequeIfSaIfEE16_M_pop_front_auxEv>:
  // Note that if the deque has at least one element (a precondition for this
  // member function), and if
  //   _M_impl._M_start._M_cur == _M_impl._M_start._M_last,
  // then the deque must have at least two nodes.
  template <typename _Tp, typename _Alloc>
    void deque<_Tp, _Alloc>::
 800da14:	b580      	push	{r7, lr}
 800da16:	b082      	sub	sp, #8
 800da18:	af00      	add	r7, sp, #0
 800da1a:	6078      	str	r0, [r7, #4]
    _M_pop_front_aux()
    {
      _Alloc_traits::destroy(_M_get_Tp_allocator(),
 800da1c:	687b      	ldr	r3, [r7, #4]
 800da1e:	4618      	mov	r0, r3
 800da20:	f7ff ff64 	bl	800d8ec <_ZNSt11_Deque_baseIfSaIfEE19_M_get_Tp_allocatorEv>
 800da24:	4602      	mov	r2, r0
 800da26:	687b      	ldr	r3, [r7, #4]
 800da28:	689b      	ldr	r3, [r3, #8]
 800da2a:	4619      	mov	r1, r3
 800da2c:	4610      	mov	r0, r2
 800da2e:	f7ff ffe5 	bl	800d9fc <_ZNSt16allocator_traitsISaIfEE7destroyIfEEvRS0_PT_>
			     this->_M_impl._M_start._M_cur);
      _M_deallocate_node(this->_M_impl._M_start._M_first);
 800da32:	687a      	ldr	r2, [r7, #4]
 800da34:	687b      	ldr	r3, [r7, #4]
 800da36:	68db      	ldr	r3, [r3, #12]
 800da38:	4619      	mov	r1, r3
 800da3a:	4610      	mov	r0, r2
 800da3c:	f000 ffb1 	bl	800e9a2 <_ZNSt11_Deque_baseIfSaIfEE18_M_deallocate_nodeEPf>
      this->_M_impl._M_start._M_set_node(this->_M_impl._M_start._M_node + 1);
 800da40:	687b      	ldr	r3, [r7, #4]
 800da42:	f103 0208 	add.w	r2, r3, #8
 800da46:	687b      	ldr	r3, [r7, #4]
 800da48:	695b      	ldr	r3, [r3, #20]
 800da4a:	3304      	adds	r3, #4
 800da4c:	4619      	mov	r1, r3
 800da4e:	4610      	mov	r0, r2
 800da50:	f000 ff8e 	bl	800e970 <_ZNSt15_Deque_iteratorIfRfPfE11_M_set_nodeEPS1_>
      this->_M_impl._M_start._M_cur = this->_M_impl._M_start._M_first;
 800da54:	687b      	ldr	r3, [r7, #4]
 800da56:	68da      	ldr	r2, [r3, #12]
 800da58:	687b      	ldr	r3, [r7, #4]
 800da5a:	609a      	str	r2, [r3, #8]
    }
 800da5c:	bf00      	nop
 800da5e:	3708      	adds	r7, #8
 800da60:	46bd      	mov	sp, r7
 800da62:	bd80      	pop	{r7, pc}

0800da64 <_ZNSt15_Deque_iteratorIfRfPfEC1ERKS2_>:
      _Deque_iterator(const _Deque_iterator& __x) noexcept
 800da64:	b480      	push	{r7}
 800da66:	b083      	sub	sp, #12
 800da68:	af00      	add	r7, sp, #0
 800da6a:	6078      	str	r0, [r7, #4]
 800da6c:	6039      	str	r1, [r7, #0]
       : _M_cur(__x._M_cur), _M_first(__x._M_first),
 800da6e:	683b      	ldr	r3, [r7, #0]
 800da70:	681a      	ldr	r2, [r3, #0]
 800da72:	687b      	ldr	r3, [r7, #4]
 800da74:	601a      	str	r2, [r3, #0]
 800da76:	683b      	ldr	r3, [r7, #0]
 800da78:	685a      	ldr	r2, [r3, #4]
 800da7a:	687b      	ldr	r3, [r7, #4]
 800da7c:	605a      	str	r2, [r3, #4]
	 _M_last(__x._M_last), _M_node(__x._M_node) { }
 800da7e:	683b      	ldr	r3, [r7, #0]
 800da80:	689a      	ldr	r2, [r3, #8]
 800da82:	687b      	ldr	r3, [r7, #4]
 800da84:	609a      	str	r2, [r3, #8]
 800da86:	683b      	ldr	r3, [r7, #0]
 800da88:	68da      	ldr	r2, [r3, #12]
 800da8a:	687b      	ldr	r3, [r7, #4]
 800da8c:	60da      	str	r2, [r3, #12]
 800da8e:	687b      	ldr	r3, [r7, #4]
 800da90:	4618      	mov	r0, r3
 800da92:	370c      	adds	r7, #12
 800da94:	46bd      	mov	sp, r7
 800da96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da9a:	4770      	bx	lr

0800da9c <_ZSteqRKSt15_Deque_iteratorIfRfPfES4_>:
      operator==(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 800da9c:	b480      	push	{r7}
 800da9e:	b083      	sub	sp, #12
 800daa0:	af00      	add	r7, sp, #0
 800daa2:	6078      	str	r0, [r7, #4]
 800daa4:	6039      	str	r1, [r7, #0]
      { return __x._M_cur == __y._M_cur; }
 800daa6:	687b      	ldr	r3, [r7, #4]
 800daa8:	681a      	ldr	r2, [r3, #0]
 800daaa:	683b      	ldr	r3, [r7, #0]
 800daac:	681b      	ldr	r3, [r3, #0]
 800daae:	429a      	cmp	r2, r3
 800dab0:	bf0c      	ite	eq
 800dab2:	2301      	moveq	r3, #1
 800dab4:	2300      	movne	r3, #0
 800dab6:	b2db      	uxtb	r3, r3
 800dab8:	4618      	mov	r0, r3
 800daba:	370c      	adds	r7, #12
 800dabc:	46bd      	mov	sp, r7
 800dabe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dac2:	4770      	bx	lr

0800dac4 <_ZNSt15_Deque_iteratorIfRfPfEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 800dac4:	b580      	push	{r7, lr}
 800dac6:	b082      	sub	sp, #8
 800dac8:	af00      	add	r7, sp, #0
 800daca:	6078      	str	r0, [r7, #4]
	++_M_cur;
 800dacc:	687b      	ldr	r3, [r7, #4]
 800dace:	681b      	ldr	r3, [r3, #0]
 800dad0:	1d1a      	adds	r2, r3, #4
 800dad2:	687b      	ldr	r3, [r7, #4]
 800dad4:	601a      	str	r2, [r3, #0]
	if (_M_cur == _M_last)
 800dad6:	687b      	ldr	r3, [r7, #4]
 800dad8:	681a      	ldr	r2, [r3, #0]
 800dada:	687b      	ldr	r3, [r7, #4]
 800dadc:	689b      	ldr	r3, [r3, #8]
 800dade:	429a      	cmp	r2, r3
 800dae0:	d10a      	bne.n	800daf8 <_ZNSt15_Deque_iteratorIfRfPfEppEv+0x34>
	    _M_set_node(_M_node + 1);
 800dae2:	687b      	ldr	r3, [r7, #4]
 800dae4:	68db      	ldr	r3, [r3, #12]
 800dae6:	3304      	adds	r3, #4
 800dae8:	4619      	mov	r1, r3
 800daea:	6878      	ldr	r0, [r7, #4]
 800daec:	f000 ff40 	bl	800e970 <_ZNSt15_Deque_iteratorIfRfPfE11_M_set_nodeEPS1_>
	    _M_cur = _M_first;
 800daf0:	687b      	ldr	r3, [r7, #4]
 800daf2:	685a      	ldr	r2, [r3, #4]
 800daf4:	687b      	ldr	r3, [r7, #4]
 800daf6:	601a      	str	r2, [r3, #0]
	return *this;
 800daf8:	687b      	ldr	r3, [r7, #4]
      }
 800dafa:	4618      	mov	r0, r3
 800dafc:	3708      	adds	r7, #8
 800dafe:	46bd      	mov	sp, r7
 800db00:	bd80      	pop	{r7, pc}

0800db02 <_ZNKSt15_Deque_iteratorIfRfPfEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 800db02:	b480      	push	{r7}
 800db04:	b083      	sub	sp, #12
 800db06:	af00      	add	r7, sp, #0
 800db08:	6078      	str	r0, [r7, #4]
      { return *_M_cur; }
 800db0a:	687b      	ldr	r3, [r7, #4]
 800db0c:	681b      	ldr	r3, [r3, #0]
 800db0e:	4618      	mov	r0, r3
 800db10:	370c      	adds	r7, #12
 800db12:	46bd      	mov	sp, r7
 800db14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db18:	4770      	bx	lr

0800db1a <_ZNKSt16initializer_listIfE5beginEv>:
      begin() const noexcept { return _M_array; }
 800db1a:	b480      	push	{r7}
 800db1c:	b083      	sub	sp, #12
 800db1e:	af00      	add	r7, sp, #0
 800db20:	6078      	str	r0, [r7, #4]
 800db22:	687b      	ldr	r3, [r7, #4]
 800db24:	681b      	ldr	r3, [r3, #0]
 800db26:	4618      	mov	r0, r3
 800db28:	370c      	adds	r7, #12
 800db2a:	46bd      	mov	sp, r7
 800db2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db30:	4770      	bx	lr

0800db32 <_ZNKSt16initializer_listIfE3endEv>:
      end() const noexcept { return begin() + size(); }
 800db32:	b590      	push	{r4, r7, lr}
 800db34:	b083      	sub	sp, #12
 800db36:	af00      	add	r7, sp, #0
 800db38:	6078      	str	r0, [r7, #4]
 800db3a:	6878      	ldr	r0, [r7, #4]
 800db3c:	f7ff ffed 	bl	800db1a <_ZNKSt16initializer_listIfE5beginEv>
 800db40:	4604      	mov	r4, r0
 800db42:	6878      	ldr	r0, [r7, #4]
 800db44:	f000 ffc1 	bl	800eaca <_ZNKSt16initializer_listIfE4sizeEv>
 800db48:	4603      	mov	r3, r0
 800db4a:	009b      	lsls	r3, r3, #2
 800db4c:	4423      	add	r3, r4
 800db4e:	4618      	mov	r0, r3
 800db50:	370c      	adds	r7, #12
 800db52:	46bd      	mov	sp, r7
 800db54:	bd90      	pop	{r4, r7, pc}

0800db56 <_ZSt11min_elementIPKfET_S2_S2_>:
   *  @return  Iterator referencing the first instance of the smallest value.
  */
  template<typename _ForwardIterator>
    _GLIBCXX14_CONSTEXPR
    _ForwardIterator
    inline min_element(_ForwardIterator __first, _ForwardIterator __last)
 800db56:	b590      	push	{r4, r7, lr}
 800db58:	b083      	sub	sp, #12
 800db5a:	af00      	add	r7, sp, #0
 800db5c:	6078      	str	r0, [r7, #4]
 800db5e:	6039      	str	r1, [r7, #0]
	    typename iterator_traits<_ForwardIterator>::value_type>)
      __glibcxx_requires_valid_range(__first, __last);
      __glibcxx_requires_irreflexive(__first, __last);

      return _GLIBCXX_STD_A::__min_element(__first, __last,
				__gnu_cxx::__ops::__iter_less_iter());
 800db60:	f7f6 fdae 	bl	80046c0 <_ZN9__gnu_cxx5__ops16__iter_less_iterEv>
      return _GLIBCXX_STD_A::__min_element(__first, __last,
 800db64:	4622      	mov	r2, r4
 800db66:	6839      	ldr	r1, [r7, #0]
 800db68:	6878      	ldr	r0, [r7, #4]
 800db6a:	f000 ffd4 	bl	800eb16 <_ZSt13__min_elementIPKfN9__gnu_cxx5__ops15_Iter_less_iterEET_S5_S5_T0_>
 800db6e:	4603      	mov	r3, r0
    }
 800db70:	4618      	mov	r0, r3
 800db72:	370c      	adds	r7, #12
 800db74:	46bd      	mov	sp, r7
 800db76:	bd90      	pop	{r4, r7, pc}

0800db78 <_ZN9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEC1ERKS1_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 800db78:	b480      	push	{r7}
 800db7a:	b083      	sub	sp, #12
 800db7c:	af00      	add	r7, sp, #0
 800db7e:	6078      	str	r0, [r7, #4]
 800db80:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 800db82:	683b      	ldr	r3, [r7, #0]
 800db84:	681a      	ldr	r2, [r3, #0]
 800db86:	687b      	ldr	r3, [r7, #4]
 800db88:	601a      	str	r2, [r3, #0]
 800db8a:	687b      	ldr	r3, [r7, #4]
 800db8c:	4618      	mov	r0, r3
 800db8e:	370c      	adds	r7, #12
 800db90:	46bd      	mov	sp, r7
 800db92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db96:	4770      	bx	lr

0800db98 <_ZN9__gnu_cxx5__ops17__iter_equals_valIKcEENS0_16_Iter_equals_valIT_EERS4_>:
    };

  template<typename _Value>
    _GLIBCXX20_CONSTEXPR
    inline _Iter_equals_val<_Value>
    __iter_equals_val(_Value& __val)
 800db98:	b580      	push	{r7, lr}
 800db9a:	b084      	sub	sp, #16
 800db9c:	af00      	add	r7, sp, #0
 800db9e:	6078      	str	r0, [r7, #4]
    { return _Iter_equals_val<_Value>(__val); }
 800dba0:	f107 030c 	add.w	r3, r7, #12
 800dba4:	6879      	ldr	r1, [r7, #4]
 800dba6:	4618      	mov	r0, r3
 800dba8:	f000 ffe0 	bl	800eb6c <_ZN9__gnu_cxx5__ops16_Iter_equals_valIKcEC1ERS2_>
 800dbac:	68fb      	ldr	r3, [r7, #12]
 800dbae:	4618      	mov	r0, r3
 800dbb0:	3710      	adds	r7, #16
 800dbb2:	46bd      	mov	sp, r7
 800dbb4:	bd80      	pop	{r7, pc}

0800dbb6 <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEENS0_5__ops16_Iter_equals_valIKcEEET_SB_SB_T0_>:
    }

  template<typename _Iterator, typename _Predicate>
    _GLIBCXX20_CONSTEXPR
    inline _Iterator
    __find_if(_Iterator __first, _Iterator __last, _Predicate __pred)
 800dbb6:	b590      	push	{r4, r7, lr}
 800dbb8:	b085      	sub	sp, #20
 800dbba:	af00      	add	r7, sp, #0
 800dbbc:	60f8      	str	r0, [r7, #12]
 800dbbe:	60b9      	str	r1, [r7, #8]
 800dbc0:	607a      	str	r2, [r7, #4]
    {
      return __find_if(__first, __last, __pred,
		       std::__iterator_category(__first));
 800dbc2:	f107 030c 	add.w	r3, r7, #12
 800dbc6:	4618      	mov	r0, r3
 800dbc8:	f000 ffdf 	bl	800eb8a <_ZSt19__iterator_categoryIN9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEEENSt15iterator_traitsIT_E17iterator_categoryERKS8_>
      return __find_if(__first, __last, __pred,
 800dbcc:	4623      	mov	r3, r4
 800dbce:	687a      	ldr	r2, [r7, #4]
 800dbd0:	68b9      	ldr	r1, [r7, #8]
 800dbd2:	68f8      	ldr	r0, [r7, #12]
 800dbd4:	f001 f82a 	bl	800ec2c <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEENS0_5__ops16_Iter_equals_valIKcEEET_SB_SB_T0_St26random_access_iterator_tag>
 800dbd8:	4603      	mov	r3, r0
    }
 800dbda:	4618      	mov	r0, r3
 800dbdc:	3714      	adds	r7, #20
 800dbde:	46bd      	mov	sp, r7
 800dbe0:	bd90      	pop	{r4, r7, pc}

0800dbe2 <_ZNSt12_Vector_baseIcSaIcEE17_Vector_impl_dataC1Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
 800dbe2:	b480      	push	{r7}
 800dbe4:	b083      	sub	sp, #12
 800dbe6:	af00      	add	r7, sp, #0
 800dbe8:	6078      	str	r0, [r7, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 800dbea:	687b      	ldr	r3, [r7, #4]
 800dbec:	2200      	movs	r2, #0
 800dbee:	601a      	str	r2, [r3, #0]
 800dbf0:	687b      	ldr	r3, [r7, #4]
 800dbf2:	2200      	movs	r2, #0
 800dbf4:	605a      	str	r2, [r3, #4]
 800dbf6:	687b      	ldr	r3, [r7, #4]
 800dbf8:	2200      	movs	r2, #0
 800dbfa:	609a      	str	r2, [r3, #8]
	{ }
 800dbfc:	687b      	ldr	r3, [r7, #4]
 800dbfe:	4618      	mov	r0, r3
 800dc00:	370c      	adds	r7, #12
 800dc02:	46bd      	mov	sp, r7
 800dc04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc08:	4770      	bx	lr

0800dc0a <_ZNSt12_Vector_baseIcSaIcEE13_M_deallocateEPcj>:
      _M_deallocate(pointer __p, size_t __n)
 800dc0a:	b580      	push	{r7, lr}
 800dc0c:	b084      	sub	sp, #16
 800dc0e:	af00      	add	r7, sp, #0
 800dc10:	60f8      	str	r0, [r7, #12]
 800dc12:	60b9      	str	r1, [r7, #8]
 800dc14:	607a      	str	r2, [r7, #4]
	if (__p)
 800dc16:	68bb      	ldr	r3, [r7, #8]
 800dc18:	2b00      	cmp	r3, #0
 800dc1a:	d005      	beq.n	800dc28 <_ZNSt12_Vector_baseIcSaIcEE13_M_deallocateEPcj+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 800dc1c:	68fb      	ldr	r3, [r7, #12]
 800dc1e:	687a      	ldr	r2, [r7, #4]
 800dc20:	68b9      	ldr	r1, [r7, #8]
 800dc22:	4618      	mov	r0, r3
 800dc24:	f001 f89b 	bl	800ed5e <_ZNSt16allocator_traitsISaIcEE10deallocateERS0_Pcj>
      }
 800dc28:	bf00      	nop
 800dc2a:	3710      	adds	r7, #16
 800dc2c:	46bd      	mov	sp, r7
 800dc2e:	bd80      	pop	{r7, pc}

0800dc30 <_ZNSt6vectorIcSaIcEE15_M_erase_at_endEPc>:
      _M_erase_at_end(pointer __pos) _GLIBCXX_NOEXCEPT
 800dc30:	b590      	push	{r4, r7, lr}
 800dc32:	b085      	sub	sp, #20
 800dc34:	af00      	add	r7, sp, #0
 800dc36:	6078      	str	r0, [r7, #4]
 800dc38:	6039      	str	r1, [r7, #0]
	if (size_type __n = this->_M_impl._M_finish - __pos)
 800dc3a:	687b      	ldr	r3, [r7, #4]
 800dc3c:	685a      	ldr	r2, [r3, #4]
 800dc3e:	683b      	ldr	r3, [r7, #0]
 800dc40:	1ad3      	subs	r3, r2, r3
 800dc42:	60fb      	str	r3, [r7, #12]
 800dc44:	68fb      	ldr	r3, [r7, #12]
 800dc46:	2b00      	cmp	r3, #0
 800dc48:	d00e      	beq.n	800dc68 <_ZNSt6vectorIcSaIcEE15_M_erase_at_endEPc+0x38>
	    std::_Destroy(__pos, this->_M_impl._M_finish,
 800dc4a:	687b      	ldr	r3, [r7, #4]
 800dc4c:	685c      	ldr	r4, [r3, #4]
			  _M_get_Tp_allocator());
 800dc4e:	687b      	ldr	r3, [r7, #4]
 800dc50:	4618      	mov	r0, r3
 800dc52:	f7ff fc38 	bl	800d4c6 <_ZNSt12_Vector_baseIcSaIcEE19_M_get_Tp_allocatorEv>
 800dc56:	4603      	mov	r3, r0
	    std::_Destroy(__pos, this->_M_impl._M_finish,
 800dc58:	461a      	mov	r2, r3
 800dc5a:	4621      	mov	r1, r4
 800dc5c:	6838      	ldr	r0, [r7, #0]
 800dc5e:	f7ff fc4e 	bl	800d4fe <_ZSt8_DestroyIPccEvT_S1_RSaIT0_E>
	    this->_M_impl._M_finish = __pos;
 800dc62:	687b      	ldr	r3, [r7, #4]
 800dc64:	683a      	ldr	r2, [r7, #0]
 800dc66:	605a      	str	r2, [r3, #4]
      }
 800dc68:	bf00      	nop
 800dc6a:	3714      	adds	r7, #20
 800dc6c:	46bd      	mov	sp, r7
 800dc6e:	bd90      	pop	{r4, r7, pc}

0800dc70 <_ZSt4moveIRcEONSt16remove_referenceIT_E4typeEOS2_>:
    move(_Tp&& __t) noexcept
 800dc70:	b480      	push	{r7}
 800dc72:	b083      	sub	sp, #12
 800dc74:	af00      	add	r7, sp, #0
 800dc76:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800dc78:	687b      	ldr	r3, [r7, #4]
 800dc7a:	4618      	mov	r0, r3
 800dc7c:	370c      	adds	r7, #12
 800dc7e:	46bd      	mov	sp, r7
 800dc80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc84:	4770      	bx	lr

0800dc86 <_ZNSt6vectorIcSaIcEE12emplace_backIJcEEERcDpOT_>:
      vector<_Tp, _Alloc>::
 800dc86:	b5b0      	push	{r4, r5, r7, lr}
 800dc88:	b082      	sub	sp, #8
 800dc8a:	af00      	add	r7, sp, #0
 800dc8c:	6078      	str	r0, [r7, #4]
 800dc8e:	6039      	str	r1, [r7, #0]
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 800dc90:	687b      	ldr	r3, [r7, #4]
 800dc92:	685a      	ldr	r2, [r3, #4]
 800dc94:	687b      	ldr	r3, [r7, #4]
 800dc96:	689b      	ldr	r3, [r3, #8]
 800dc98:	429a      	cmp	r2, r3
 800dc9a:	d011      	beq.n	800dcc0 <_ZNSt6vectorIcSaIcEE12emplace_backIJcEEERcDpOT_+0x3a>
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
 800dc9c:	687c      	ldr	r4, [r7, #4]
 800dc9e:	687b      	ldr	r3, [r7, #4]
 800dca0:	685d      	ldr	r5, [r3, #4]
 800dca2:	6838      	ldr	r0, [r7, #0]
 800dca4:	f001 f87a 	bl	800ed9c <_ZSt7forwardIcEOT_RNSt16remove_referenceIS0_E4typeE>
 800dca8:	4603      	mov	r3, r0
 800dcaa:	461a      	mov	r2, r3
 800dcac:	4629      	mov	r1, r5
 800dcae:	4620      	mov	r0, r4
 800dcb0:	f001 f895 	bl	800edde <_ZNSt16allocator_traitsISaIcEE9constructIcJcEEEvRS0_PT_DpOT0_>
	    ++this->_M_impl._M_finish;
 800dcb4:	687b      	ldr	r3, [r7, #4]
 800dcb6:	685b      	ldr	r3, [r3, #4]
 800dcb8:	1c5a      	adds	r2, r3, #1
 800dcba:	687b      	ldr	r3, [r7, #4]
 800dcbc:	605a      	str	r2, [r3, #4]
 800dcbe:	e00c      	b.n	800dcda <_ZNSt6vectorIcSaIcEE12emplace_backIJcEEERcDpOT_+0x54>
	  _M_realloc_insert(end(), std::forward<_Args>(__args)...);
 800dcc0:	6878      	ldr	r0, [r7, #4]
 800dcc2:	f7ff f8d2 	bl	800ce6a <_ZNSt6vectorIcSaIcEE3endEv>
 800dcc6:	4604      	mov	r4, r0
 800dcc8:	6838      	ldr	r0, [r7, #0]
 800dcca:	f001 f867 	bl	800ed9c <_ZSt7forwardIcEOT_RNSt16remove_referenceIS0_E4typeE>
 800dcce:	4603      	mov	r3, r0
 800dcd0:	461a      	mov	r2, r3
 800dcd2:	4621      	mov	r1, r4
 800dcd4:	6878      	ldr	r0, [r7, #4]
 800dcd6:	f001 f895 	bl	800ee04 <_ZNSt6vectorIcSaIcEE17_M_realloc_insertIJcEEEvN9__gnu_cxx17__normal_iteratorIPcS1_EEDpOT_>
	return back();
 800dcda:	6878      	ldr	r0, [r7, #4]
 800dcdc:	f001 f90c 	bl	800eef8 <_ZNSt6vectorIcSaIcEE4backEv>
 800dce0:	4603      	mov	r3, r0
      }
 800dce2:	4618      	mov	r0, r3
 800dce4:	3708      	adds	r7, #8
 800dce6:	46bd      	mov	sp, r7
 800dce8:	bdb0      	pop	{r4, r5, r7, pc}

0800dcea <_ZNKSt6vectorIcSaIcEE11_M_data_ptrIcEEPT_S4_>:
      }
#endif

      template<typename _Up>
	_Up*
	_M_data_ptr(_Up* __ptr) const _GLIBCXX_NOEXCEPT
 800dcea:	b480      	push	{r7}
 800dcec:	b083      	sub	sp, #12
 800dcee:	af00      	add	r7, sp, #0
 800dcf0:	6078      	str	r0, [r7, #4]
 800dcf2:	6039      	str	r1, [r7, #0]
	{ return __ptr; }
 800dcf4:	683b      	ldr	r3, [r7, #0]
 800dcf6:	4618      	mov	r0, r3
 800dcf8:	370c      	adds	r7, #12
 800dcfa:	46bd      	mov	sp, r7
 800dcfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd00:	4770      	bx	lr

0800dd02 <_ZNKSt6vectorIcSaIcEE6cbeginEv>:
      cbegin() const noexcept
 800dd02:	b580      	push	{r7, lr}
 800dd04:	b084      	sub	sp, #16
 800dd06:	af00      	add	r7, sp, #0
 800dd08:	6078      	str	r0, [r7, #4]
      { return const_iterator(this->_M_impl._M_start); }
 800dd0a:	687a      	ldr	r2, [r7, #4]
 800dd0c:	f107 030c 	add.w	r3, r7, #12
 800dd10:	4611      	mov	r1, r2
 800dd12:	4618      	mov	r0, r3
 800dd14:	f000 fab3 	bl	800e27e <_ZN9__gnu_cxx17__normal_iteratorIPKcSt6vectorIcSaIcEEEC1ERKS2_>
 800dd18:	68fb      	ldr	r3, [r7, #12]
 800dd1a:	4618      	mov	r0, r3
 800dd1c:	3710      	adds	r7, #16
 800dd1e:	46bd      	mov	sp, r7
 800dd20:	bd80      	pop	{r7, pc}

0800dd22 <_ZN9__gnu_cxxmiIPKcSt6vectorIcSaIcEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS9_SC_>:
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
 800dd22:	b590      	push	{r4, r7, lr}
 800dd24:	b083      	sub	sp, #12
 800dd26:	af00      	add	r7, sp, #0
 800dd28:	6078      	str	r0, [r7, #4]
 800dd2a:	6039      	str	r1, [r7, #0]
    { return __lhs.base() - __rhs.base(); }
 800dd2c:	6878      	ldr	r0, [r7, #4]
 800dd2e:	f001 f8fe 	bl	800ef2e <_ZNK9__gnu_cxx17__normal_iteratorIPKcSt6vectorIcSaIcEEE4baseEv>
 800dd32:	4603      	mov	r3, r0
 800dd34:	681c      	ldr	r4, [r3, #0]
 800dd36:	6838      	ldr	r0, [r7, #0]
 800dd38:	f001 f8f9 	bl	800ef2e <_ZNK9__gnu_cxx17__normal_iteratorIPKcSt6vectorIcSaIcEEE4baseEv>
 800dd3c:	4603      	mov	r3, r0
 800dd3e:	681b      	ldr	r3, [r3, #0]
 800dd40:	1ae3      	subs	r3, r4, r3
 800dd42:	4618      	mov	r0, r3
 800dd44:	370c      	adds	r7, #12
 800dd46:	46bd      	mov	sp, r7
 800dd48:	bd90      	pop	{r4, r7, pc}

0800dd4a <_ZNK9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEplEi>:
      operator+(difference_type __n) const _GLIBCXX_NOEXCEPT
 800dd4a:	b580      	push	{r7, lr}
 800dd4c:	b084      	sub	sp, #16
 800dd4e:	af00      	add	r7, sp, #0
 800dd50:	6078      	str	r0, [r7, #4]
 800dd52:	6039      	str	r1, [r7, #0]
      { return __normal_iterator(_M_current + __n); }
 800dd54:	687b      	ldr	r3, [r7, #4]
 800dd56:	681a      	ldr	r2, [r3, #0]
 800dd58:	683b      	ldr	r3, [r7, #0]
 800dd5a:	4413      	add	r3, r2
 800dd5c:	60fb      	str	r3, [r7, #12]
 800dd5e:	f107 020c 	add.w	r2, r7, #12
 800dd62:	f107 0308 	add.w	r3, r7, #8
 800dd66:	4611      	mov	r1, r2
 800dd68:	4618      	mov	r0, r3
 800dd6a:	f7ff ff05 	bl	800db78 <_ZN9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEC1ERKS1_>
 800dd6e:	68bb      	ldr	r3, [r7, #8]
 800dd70:	4618      	mov	r0, r3
 800dd72:	3710      	adds	r7, #16
 800dd74:	46bd      	mov	sp, r7
 800dd76:	bd80      	pop	{r7, pc}

0800dd78 <_ZNSt6vectorIcSaIcEE18_M_insert_dispatchIPcEEvN9__gnu_cxx17__normal_iteratorIS3_S1_EET_S7_St12__false_type>:
	_M_insert_dispatch(iterator __pos, _InputIterator __first,
 800dd78:	b5b0      	push	{r4, r5, r7, lr}
 800dd7a:	b088      	sub	sp, #32
 800dd7c:	af02      	add	r7, sp, #8
 800dd7e:	60f8      	str	r0, [r7, #12]
 800dd80:	60b9      	str	r1, [r7, #8]
 800dd82:	607a      	str	r2, [r7, #4]
 800dd84:	603b      	str	r3, [r7, #0]
	  _M_range_insert(__pos, __first, __last,
 800dd86:	687c      	ldr	r4, [r7, #4]
			  std::__iterator_category(__first));
 800dd88:	1d3b      	adds	r3, r7, #4
 800dd8a:	4618      	mov	r0, r3
 800dd8c:	f7ff f999 	bl	800d0c2 <_ZSt19__iterator_categoryIPcENSt15iterator_traitsIT_E17iterator_categoryERKS2_>
	  _M_range_insert(__pos, __first, __last,
 800dd90:	f88d 5000 	strb.w	r5, [sp]
 800dd94:	683b      	ldr	r3, [r7, #0]
 800dd96:	4622      	mov	r2, r4
 800dd98:	68b9      	ldr	r1, [r7, #8]
 800dd9a:	68f8      	ldr	r0, [r7, #12]
 800dd9c:	f001 f916 	bl	800efcc <_ZNSt6vectorIcSaIcEE15_M_range_insertIPcEEvN9__gnu_cxx17__normal_iteratorIS3_S1_EET_S7_St20forward_iterator_tag>
	}
 800dda0:	bf00      	nop
 800dda2:	3718      	adds	r7, #24
 800dda4:	46bd      	mov	sp, r7
 800dda6:	bdb0      	pop	{r4, r5, r7, pc}

0800dda8 <_ZSt19__iterator_categoryIPbENSt15iterator_traitsIT_E17iterator_categoryERKS2_>:
    __iterator_category(const _Iter&)
 800dda8:	b480      	push	{r7}
 800ddaa:	b083      	sub	sp, #12
 800ddac:	af00      	add	r7, sp, #0
 800ddae:	6078      	str	r0, [r7, #4]
    { return typename iterator_traits<_Iter>::iterator_category(); }
 800ddb0:	4618      	mov	r0, r3
 800ddb2:	370c      	adds	r7, #12
 800ddb4:	46bd      	mov	sp, r7
 800ddb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddba:	4770      	bx	lr

0800ddbc <_ZSt9__reverseIPbEvT_S1_St26random_access_iterator_tag>:
    __reverse(_RandomAccessIterator __first, _RandomAccessIterator __last,
 800ddbc:	b580      	push	{r7, lr}
 800ddbe:	b084      	sub	sp, #16
 800ddc0:	af00      	add	r7, sp, #0
 800ddc2:	60f8      	str	r0, [r7, #12]
 800ddc4:	60b9      	str	r1, [r7, #8]
 800ddc6:	713a      	strb	r2, [r7, #4]
      if (__first == __last)
 800ddc8:	68fa      	ldr	r2, [r7, #12]
 800ddca:	68bb      	ldr	r3, [r7, #8]
 800ddcc:	429a      	cmp	r2, r3
 800ddce:	d012      	beq.n	800ddf6 <_ZSt9__reverseIPbEvT_S1_St26random_access_iterator_tag+0x3a>
      --__last;
 800ddd0:	68bb      	ldr	r3, [r7, #8]
 800ddd2:	3b01      	subs	r3, #1
 800ddd4:	60bb      	str	r3, [r7, #8]
      while (__first < __last)
 800ddd6:	e009      	b.n	800ddec <_ZSt9__reverseIPbEvT_S1_St26random_access_iterator_tag+0x30>
	  std::iter_swap(__first, __last);
 800ddd8:	68b9      	ldr	r1, [r7, #8]
 800ddda:	68f8      	ldr	r0, [r7, #12]
 800dddc:	f001 f9fe 	bl	800f1dc <_ZSt9iter_swapIPbS0_EvT_T0_>
	  ++__first;
 800dde0:	68fb      	ldr	r3, [r7, #12]
 800dde2:	3301      	adds	r3, #1
 800dde4:	60fb      	str	r3, [r7, #12]
	  --__last;
 800dde6:	68bb      	ldr	r3, [r7, #8]
 800dde8:	3b01      	subs	r3, #1
 800ddea:	60bb      	str	r3, [r7, #8]
      while (__first < __last)
 800ddec:	68fa      	ldr	r2, [r7, #12]
 800ddee:	68bb      	ldr	r3, [r7, #8]
 800ddf0:	429a      	cmp	r2, r3
 800ddf2:	d3f1      	bcc.n	800ddd8 <_ZSt9__reverseIPbEvT_S1_St26random_access_iterator_tag+0x1c>
 800ddf4:	e000      	b.n	800ddf8 <_ZSt9__reverseIPbEvT_S1_St26random_access_iterator_tag+0x3c>
	return;
 800ddf6:	bf00      	nop
    }
 800ddf8:	3710      	adds	r7, #16
 800ddfa:	46bd      	mov	sp, r7
 800ddfc:	bd80      	pop	{r7, pc}

0800ddfe <_ZSt12__niter_baseIPKcET_S2_>:
    __niter_base(_Iterator __it)
 800ddfe:	b480      	push	{r7}
 800de00:	b083      	sub	sp, #12
 800de02:	af00      	add	r7, sp, #0
 800de04:	6078      	str	r0, [r7, #4]
    { return __it; }
 800de06:	687b      	ldr	r3, [r7, #4]
 800de08:	4618      	mov	r0, r3
 800de0a:	370c      	adds	r7, #12
 800de0c:	46bd      	mov	sp, r7
 800de0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de12:	4770      	bx	lr

0800de14 <_ZSt12__niter_baseIPcET_S1_>:
    __niter_base(_Iterator __it)
 800de14:	b480      	push	{r7}
 800de16:	b083      	sub	sp, #12
 800de18:	af00      	add	r7, sp, #0
 800de1a:	6078      	str	r0, [r7, #4]
    { return __it; }
 800de1c:	687b      	ldr	r3, [r7, #4]
 800de1e:	4618      	mov	r0, r3
 800de20:	370c      	adds	r7, #12
 800de22:	46bd      	mov	sp, r7
 800de24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de28:	4770      	bx	lr

0800de2a <_ZSt14__copy_move_a1ILb0EPKcPcET1_T0_S4_S3_>:
    __copy_move_a1(_II __first, _II __last, _OI __result)
 800de2a:	b580      	push	{r7, lr}
 800de2c:	b084      	sub	sp, #16
 800de2e:	af00      	add	r7, sp, #0
 800de30:	60f8      	str	r0, [r7, #12]
 800de32:	60b9      	str	r1, [r7, #8]
 800de34:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_a2<_IsMove>(__first, __last, __result); }
 800de36:	687a      	ldr	r2, [r7, #4]
 800de38:	68b9      	ldr	r1, [r7, #8]
 800de3a:	68f8      	ldr	r0, [r7, #12]
 800de3c:	f001 f9db 	bl	800f1f6 <_ZSt14__copy_move_a2ILb0EPKcPcET1_T0_S4_S3_>
 800de40:	4603      	mov	r3, r0
 800de42:	4618      	mov	r0, r3
 800de44:	3710      	adds	r7, #16
 800de46:	46bd      	mov	sp, r7
 800de48:	bd80      	pop	{r7, pc}

0800de4a <_ZSt12__niter_wrapIPcET_RKS1_S1_>:
    __niter_wrap(const _Iterator&, _Iterator __res)
 800de4a:	b480      	push	{r7}
 800de4c:	b083      	sub	sp, #12
 800de4e:	af00      	add	r7, sp, #0
 800de50:	6078      	str	r0, [r7, #4]
 800de52:	6039      	str	r1, [r7, #0]
    { return __res; }
 800de54:	683b      	ldr	r3, [r7, #0]
 800de56:	4618      	mov	r0, r3
 800de58:	370c      	adds	r7, #12
 800de5a:	46bd      	mov	sp, r7
 800de5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de60:	4770      	bx	lr

0800de62 <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEiNS0_5__ops15_Iter_less_iterEEvT_S9_T0_T1_>:
    __introsort_loop(_RandomAccessIterator __first,
 800de62:	b5f0      	push	{r4, r5, r6, r7, lr}
 800de64:	b087      	sub	sp, #28
 800de66:	af00      	add	r7, sp, #0
 800de68:	60f8      	str	r0, [r7, #12]
 800de6a:	60b9      	str	r1, [r7, #8]
 800de6c:	607a      	str	r2, [r7, #4]
 800de6e:	703b      	strb	r3, [r7, #0]
      while (__last - __first > int(_S_threshold))
 800de70:	e01b      	b.n	800deaa <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEiNS0_5__ops15_Iter_less_iterEEvT_S9_T0_T1_+0x48>
	  if (__depth_limit == 0)
 800de72:	687b      	ldr	r3, [r7, #4]
 800de74:	2b00      	cmp	r3, #0
 800de76:	d106      	bne.n	800de86 <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEiNS0_5__ops15_Iter_less_iterEEvT_S9_T0_T1_+0x24>
	      std::__partial_sort(__first, __last, __last, __comp);
 800de78:	4633      	mov	r3, r6
 800de7a:	68ba      	ldr	r2, [r7, #8]
 800de7c:	68b9      	ldr	r1, [r7, #8]
 800de7e:	68f8      	ldr	r0, [r7, #12]
 800de80:	f001 f9f4 	bl	800f26c <_ZSt14__partial_sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_S9_T0_>
 800de84:	e021      	b.n	800deca <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEiNS0_5__ops15_Iter_less_iterEEvT_S9_T0_T1_+0x68>
	  --__depth_limit;
 800de86:	687b      	ldr	r3, [r7, #4]
 800de88:	3b01      	subs	r3, #1
 800de8a:	607b      	str	r3, [r7, #4]
	    std::__unguarded_partition_pivot(__first, __last, __comp);
 800de8c:	462a      	mov	r2, r5
 800de8e:	68b9      	ldr	r1, [r7, #8]
 800de90:	68f8      	ldr	r0, [r7, #12]
 800de92:	f001 fa02 	bl	800f29a <_ZSt27__unguarded_partition_pivotIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEET_S9_S9_T0_>
 800de96:	4603      	mov	r3, r0
 800de98:	617b      	str	r3, [r7, #20]
	  std::__introsort_loop(__cut, __last, __depth_limit, __comp);
 800de9a:	4623      	mov	r3, r4
 800de9c:	687a      	ldr	r2, [r7, #4]
 800de9e:	68b9      	ldr	r1, [r7, #8]
 800dea0:	6978      	ldr	r0, [r7, #20]
 800dea2:	f7ff ffde 	bl	800de62 <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEiNS0_5__ops15_Iter_less_iterEEvT_S9_T0_T1_>
	  __last = __cut;
 800dea6:	697b      	ldr	r3, [r7, #20]
 800dea8:	60bb      	str	r3, [r7, #8]
      while (__last - __first > int(_S_threshold))
 800deaa:	f107 020c 	add.w	r2, r7, #12
 800deae:	f107 0308 	add.w	r3, r7, #8
 800deb2:	4611      	mov	r1, r2
 800deb4:	4618      	mov	r0, r3
 800deb6:	f7f5 fd99 	bl	80039ec <_ZN9__gnu_cxxmiIPfSt6vectorIfSaIfEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS8_SB_>
 800deba:	4603      	mov	r3, r0
 800debc:	2b10      	cmp	r3, #16
 800debe:	bfcc      	ite	gt
 800dec0:	2301      	movgt	r3, #1
 800dec2:	2300      	movle	r3, #0
 800dec4:	b2db      	uxtb	r3, r3
 800dec6:	2b00      	cmp	r3, #0
 800dec8:	d1d3      	bne.n	800de72 <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEiNS0_5__ops15_Iter_less_iterEEvT_S9_T0_T1_+0x10>
    }
 800deca:	371c      	adds	r7, #28
 800decc:	46bd      	mov	sp, r7
 800dece:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800ded0 <_ZSt22__final_insertion_sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_T0_>:
    __final_insertion_sort(_RandomAccessIterator __first,
 800ded0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ded2:	b085      	sub	sp, #20
 800ded4:	af00      	add	r7, sp, #0
 800ded6:	60f8      	str	r0, [r7, #12]
 800ded8:	60b9      	str	r1, [r7, #8]
 800deda:	713a      	strb	r2, [r7, #4]
      if (__last - __first > int(_S_threshold))
 800dedc:	f107 020c 	add.w	r2, r7, #12
 800dee0:	f107 0308 	add.w	r3, r7, #8
 800dee4:	4611      	mov	r1, r2
 800dee6:	4618      	mov	r0, r3
 800dee8:	f7f5 fd80 	bl	80039ec <_ZN9__gnu_cxxmiIPfSt6vectorIfSaIfEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS8_SB_>
 800deec:	4603      	mov	r3, r0
 800deee:	2b10      	cmp	r3, #16
 800def0:	bfcc      	ite	gt
 800def2:	2301      	movgt	r3, #1
 800def4:	2300      	movle	r3, #0
 800def6:	b2db      	uxtb	r3, r3
 800def8:	2b00      	cmp	r3, #0
 800defa:	d018      	beq.n	800df2e <_ZSt22__final_insertion_sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_T0_+0x5e>
	  std::__insertion_sort(__first, __first + int(_S_threshold), __comp);
 800defc:	f107 030c 	add.w	r3, r7, #12
 800df00:	2110      	movs	r1, #16
 800df02:	4618      	mov	r0, r3
 800df04:	f001 fa09 	bl	800f31a <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEplEi>
 800df08:	4603      	mov	r3, r0
 800df0a:	4632      	mov	r2, r6
 800df0c:	4619      	mov	r1, r3
 800df0e:	68f8      	ldr	r0, [r7, #12]
 800df10:	f001 fa74 	bl	800f3fc <_ZSt16__insertion_sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_T0_>
	  std::__unguarded_insertion_sort(__first + int(_S_threshold), __last,
 800df14:	f107 030c 	add.w	r3, r7, #12
 800df18:	2110      	movs	r1, #16
 800df1a:	4618      	mov	r0, r3
 800df1c:	f001 f9fd 	bl	800f31a <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEplEi>
 800df20:	4603      	mov	r3, r0
 800df22:	462a      	mov	r2, r5
 800df24:	68b9      	ldr	r1, [r7, #8]
 800df26:	4618      	mov	r0, r3
 800df28:	f001 fad1 	bl	800f4ce <_ZSt26__unguarded_insertion_sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_T0_>
    }
 800df2c:	e004      	b.n	800df38 <_ZSt22__final_insertion_sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_T0_+0x68>
	std::__insertion_sort(__first, __last, __comp);
 800df2e:	4622      	mov	r2, r4
 800df30:	68b9      	ldr	r1, [r7, #8]
 800df32:	68f8      	ldr	r0, [r7, #12]
 800df34:	f001 fa62 	bl	800f3fc <_ZSt16__insertion_sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_T0_>
    }
 800df38:	bf00      	nop
 800df3a:	3714      	adds	r7, #20
 800df3c:	46bd      	mov	sp, r7
 800df3e:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800df40 <_ZN9__gnu_cxx5__ops11__pred_iterIZN3jlb10Controller15lateral_controlEfEUlbE_EENS0_10_Iter_predIT_EES6_>:
    };

  template<typename _Predicate>
    _GLIBCXX20_CONSTEXPR
    inline _Iter_pred<_Predicate>
    __pred_iter(_Predicate __pred)
 800df40:	b5b0      	push	{r4, r5, r7, lr}
 800df42:	b084      	sub	sp, #16
 800df44:	af00      	add	r7, sp, #0
 800df46:	7138      	strb	r0, [r7, #4]
    { return _Iter_pred<_Predicate>(_GLIBCXX_MOVE(__pred)); }
 800df48:	1d3b      	adds	r3, r7, #4
 800df4a:	4618      	mov	r0, r3
 800df4c:	f001 fae7 	bl	800f51e <_ZSt4moveIRZN3jlb10Controller15lateral_controlEfEUlbE_EONSt16remove_referenceIT_E4typeEOS5_>
 800df50:	f107 030c 	add.w	r3, r7, #12
 800df54:	4629      	mov	r1, r5
 800df56:	4618      	mov	r0, r3
 800df58:	f001 faec 	bl	800f534 <_ZN9__gnu_cxx5__ops10_Iter_predIZN3jlb10Controller15lateral_controlEfEUlbE_EC1ES4_>
 800df5c:	bf00      	nop
 800df5e:	4620      	mov	r0, r4
 800df60:	3710      	adds	r7, #16
 800df62:	46bd      	mov	sp, r7
 800df64:	bdb0      	pop	{r4, r5, r7, pc}

0800df66 <_ZSt13__find_if_notIPbN9__gnu_cxx5__ops10_Iter_predIZN3jlb10Controller15lateral_controlEfEUlbE_EEET_S8_S8_T0_>:
    __find_if_not(_InputIterator __first, _InputIterator __last,
 800df66:	b5f0      	push	{r4, r5, r6, r7, lr}
 800df68:	b085      	sub	sp, #20
 800df6a:	af00      	add	r7, sp, #0
 800df6c:	60f8      	str	r0, [r7, #12]
 800df6e:	60b9      	str	r1, [r7, #8]
 800df70:	713a      	strb	r2, [r7, #4]
      return std::__find_if(__first, __last,
 800df72:	68fc      	ldr	r4, [r7, #12]
 800df74:	7938      	ldrb	r0, [r7, #4]
 800df76:	f001 faeb 	bl	800f550 <_ZN9__gnu_cxx5__ops8__negateIZN3jlb10Controller15lateral_controlEfEUlbE_EENS0_12_Iter_negateIT_EENS0_10_Iter_predIS6_EE>
			    std::__iterator_category(__first));
 800df7a:	f107 030c 	add.w	r3, r7, #12
 800df7e:	4618      	mov	r0, r3
 800df80:	f7ff ff12 	bl	800dda8 <_ZSt19__iterator_categoryIPbENSt15iterator_traitsIT_E17iterator_categoryERKS2_>
      return std::__find_if(__first, __last,
 800df84:	4633      	mov	r3, r6
 800df86:	462a      	mov	r2, r5
 800df88:	68b9      	ldr	r1, [r7, #8]
 800df8a:	4620      	mov	r0, r4
 800df8c:	f001 fb07 	bl	800f59e <_ZSt9__find_ifIPbN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEfEUlbE_EEET_S8_S8_T0_St26random_access_iterator_tag>
 800df90:	4603      	mov	r3, r0
    }
 800df92:	4618      	mov	r0, r3
 800df94:	3714      	adds	r7, #20
 800df96:	46bd      	mov	sp, r7
 800df98:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800df9a <_ZN9__gnu_cxx5__ops11__pred_iterIZN3jlb10Controller15lateral_controlEfEUlbE0_EENS0_10_Iter_predIT_EES6_>:
    __pred_iter(_Predicate __pred)
 800df9a:	b5b0      	push	{r4, r5, r7, lr}
 800df9c:	b084      	sub	sp, #16
 800df9e:	af00      	add	r7, sp, #0
 800dfa0:	7138      	strb	r0, [r7, #4]
    { return _Iter_pred<_Predicate>(_GLIBCXX_MOVE(__pred)); }
 800dfa2:	1d3b      	adds	r3, r7, #4
 800dfa4:	4618      	mov	r0, r3
 800dfa6:	f001 fb79 	bl	800f69c <_ZSt4moveIRZN3jlb10Controller15lateral_controlEfEUlbE0_EONSt16remove_referenceIT_E4typeEOS5_>
 800dfaa:	f107 030c 	add.w	r3, r7, #12
 800dfae:	4629      	mov	r1, r5
 800dfb0:	4618      	mov	r0, r3
 800dfb2:	f001 fb7e 	bl	800f6b2 <_ZN9__gnu_cxx5__ops10_Iter_predIZN3jlb10Controller15lateral_controlEfEUlbE0_EC1ES4_>
 800dfb6:	bf00      	nop
 800dfb8:	4620      	mov	r0, r4
 800dfba:	3710      	adds	r7, #16
 800dfbc:	46bd      	mov	sp, r7
 800dfbe:	bdb0      	pop	{r4, r5, r7, pc}

0800dfc0 <_ZSt13__find_if_notIPbN9__gnu_cxx5__ops10_Iter_predIZN3jlb10Controller15lateral_controlEfEUlbE0_EEET_S8_S8_T0_>:
    __find_if_not(_InputIterator __first, _InputIterator __last,
 800dfc0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800dfc2:	b085      	sub	sp, #20
 800dfc4:	af00      	add	r7, sp, #0
 800dfc6:	60f8      	str	r0, [r7, #12]
 800dfc8:	60b9      	str	r1, [r7, #8]
 800dfca:	713a      	strb	r2, [r7, #4]
      return std::__find_if(__first, __last,
 800dfcc:	68fc      	ldr	r4, [r7, #12]
 800dfce:	7938      	ldrb	r0, [r7, #4]
 800dfd0:	f001 fb7d 	bl	800f6ce <_ZN9__gnu_cxx5__ops8__negateIZN3jlb10Controller15lateral_controlEfEUlbE0_EENS0_12_Iter_negateIT_EENS0_10_Iter_predIS6_EE>
			    std::__iterator_category(__first));
 800dfd4:	f107 030c 	add.w	r3, r7, #12
 800dfd8:	4618      	mov	r0, r3
 800dfda:	f7ff fee5 	bl	800dda8 <_ZSt19__iterator_categoryIPbENSt15iterator_traitsIT_E17iterator_categoryERKS2_>
      return std::__find_if(__first, __last,
 800dfde:	4633      	mov	r3, r6
 800dfe0:	462a      	mov	r2, r5
 800dfe2:	68b9      	ldr	r1, [r7, #8]
 800dfe4:	4620      	mov	r0, r4
 800dfe6:	f001 fb99 	bl	800f71c <_ZSt9__find_ifIPbN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEfEUlbE0_EEET_S8_S8_T0_St26random_access_iterator_tag>
 800dfea:	4603      	mov	r3, r0
    }
 800dfec:	4618      	mov	r0, r3
 800dfee:	3714      	adds	r7, #20
 800dff0:	46bd      	mov	sp, r7
 800dff2:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800dff4 <_ZNSt16allocator_traitsISaIfEE37select_on_container_copy_constructionERKS0_>:
      select_on_container_copy_construction(const allocator_type& __rhs)
 800dff4:	b580      	push	{r7, lr}
 800dff6:	b082      	sub	sp, #8
 800dff8:	af00      	add	r7, sp, #0
 800dffa:	6078      	str	r0, [r7, #4]
 800dffc:	6039      	str	r1, [r7, #0]
      { return __rhs; }
 800dffe:	6839      	ldr	r1, [r7, #0]
 800e000:	6878      	ldr	r0, [r7, #4]
 800e002:	f001 fc0a 	bl	800f81a <_ZNSaIfEC1ERKS_>
 800e006:	6878      	ldr	r0, [r7, #4]
 800e008:	3708      	adds	r7, #8
 800e00a:	46bd      	mov	sp, r7
 800e00c:	bd80      	pop	{r7, pc}

0800e00e <_ZNSt12_Vector_baseIfSaIfEE12_Vector_implC1ERKS0_>:
	_Vector_impl(_Tp_alloc_type const& __a) _GLIBCXX_NOEXCEPT
 800e00e:	b580      	push	{r7, lr}
 800e010:	b082      	sub	sp, #8
 800e012:	af00      	add	r7, sp, #0
 800e014:	6078      	str	r0, [r7, #4]
 800e016:	6039      	str	r1, [r7, #0]
	: _Tp_alloc_type(__a)
 800e018:	6839      	ldr	r1, [r7, #0]
 800e01a:	6878      	ldr	r0, [r7, #4]
 800e01c:	f001 fbfd 	bl	800f81a <_ZNSaIfEC1ERKS_>
 800e020:	687b      	ldr	r3, [r7, #4]
 800e022:	4618      	mov	r0, r3
 800e024:	f7f5 fb1a 	bl	800365c <_ZNSt12_Vector_baseIfSaIfEE17_Vector_impl_dataC1Ev>
	{ }
 800e028:	687b      	ldr	r3, [r7, #4]
 800e02a:	4618      	mov	r0, r3
 800e02c:	3708      	adds	r7, #8
 800e02e:	46bd      	mov	sp, r7
 800e030:	bd80      	pop	{r7, pc}

0800e032 <_ZNSt12_Vector_baseIfSaIfEE17_M_create_storageEj>:
      _M_create_storage(size_t __n)
 800e032:	b580      	push	{r7, lr}
 800e034:	b082      	sub	sp, #8
 800e036:	af00      	add	r7, sp, #0
 800e038:	6078      	str	r0, [r7, #4]
 800e03a:	6039      	str	r1, [r7, #0]
	this->_M_impl._M_start = this->_M_allocate(__n);
 800e03c:	6839      	ldr	r1, [r7, #0]
 800e03e:	6878      	ldr	r0, [r7, #4]
 800e040:	f7f5 fce9 	bl	8003a16 <_ZNSt12_Vector_baseIfSaIfEE11_M_allocateEj>
 800e044:	4602      	mov	r2, r0
 800e046:	687b      	ldr	r3, [r7, #4]
 800e048:	601a      	str	r2, [r3, #0]
	this->_M_impl._M_finish = this->_M_impl._M_start;
 800e04a:	687b      	ldr	r3, [r7, #4]
 800e04c:	681a      	ldr	r2, [r3, #0]
 800e04e:	687b      	ldr	r3, [r7, #4]
 800e050:	605a      	str	r2, [r3, #4]
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 800e052:	687b      	ldr	r3, [r7, #4]
 800e054:	681a      	ldr	r2, [r3, #0]
 800e056:	683b      	ldr	r3, [r7, #0]
 800e058:	009b      	lsls	r3, r3, #2
 800e05a:	441a      	add	r2, r3
 800e05c:	687b      	ldr	r3, [r7, #4]
 800e05e:	609a      	str	r2, [r3, #8]
      }
 800e060:	bf00      	nop
 800e062:	3708      	adds	r7, #8
 800e064:	46bd      	mov	sp, r7
 800e066:	bd80      	pop	{r7, pc}

0800e068 <_ZN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEC1ERKS2_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 800e068:	b480      	push	{r7}
 800e06a:	b083      	sub	sp, #12
 800e06c:	af00      	add	r7, sp, #0
 800e06e:	6078      	str	r0, [r7, #4]
 800e070:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 800e072:	683b      	ldr	r3, [r7, #0]
 800e074:	681a      	ldr	r2, [r3, #0]
 800e076:	687b      	ldr	r3, [r7, #4]
 800e078:	601a      	str	r2, [r3, #0]
 800e07a:	687b      	ldr	r3, [r7, #4]
 800e07c:	4618      	mov	r0, r3
 800e07e:	370c      	adds	r7, #12
 800e080:	46bd      	mov	sp, r7
 800e082:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e086:	4770      	bx	lr

0800e088 <_ZSt18uninitialized_copyIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEEPfET0_T_SA_S9_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 800e088:	b580      	push	{r7, lr}
 800e08a:	b086      	sub	sp, #24
 800e08c:	af00      	add	r7, sp, #0
 800e08e:	60f8      	str	r0, [r7, #12]
 800e090:	60b9      	str	r1, [r7, #8]
 800e092:	607a      	str	r2, [r7, #4]
      const bool __assignable = is_assignable<_RefType2, _RefType1>::value;
 800e094:	2301      	movs	r3, #1
 800e096:	75fb      	strb	r3, [r7, #23]
	__uninit_copy(__first, __last, __result);
 800e098:	687a      	ldr	r2, [r7, #4]
 800e09a:	68b9      	ldr	r1, [r7, #8]
 800e09c:	68f8      	ldr	r0, [r7, #12]
 800e09e:	f001 fbca 	bl	800f836 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEEPfEET0_T_SC_SB_>
 800e0a2:	4603      	mov	r3, r0
    }
 800e0a4:	4618      	mov	r0, r3
 800e0a6:	3718      	adds	r7, #24
 800e0a8:	46bd      	mov	sp, r7
 800e0aa:	bd80      	pop	{r7, pc}

0800e0ac <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEEET_S8_>:
    __miter_base(_Iterator __it)
 800e0ac:	b480      	push	{r7}
 800e0ae:	b083      	sub	sp, #12
 800e0b0:	af00      	add	r7, sp, #0
 800e0b2:	6078      	str	r0, [r7, #4]
    { return __it; }
 800e0b4:	687b      	ldr	r3, [r7, #4]
 800e0b6:	4618      	mov	r0, r3
 800e0b8:	370c      	adds	r7, #12
 800e0ba:	46bd      	mov	sp, r7
 800e0bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0c0:	4770      	bx	lr

0800e0c2 <_ZSt13__copy_move_aILb0EN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEENS1_IPfS6_EEET1_T0_SB_SA_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 800e0c2:	b5b0      	push	{r4, r5, r7, lr}
 800e0c4:	b084      	sub	sp, #16
 800e0c6:	af00      	add	r7, sp, #0
 800e0c8:	60f8      	str	r0, [r7, #12]
 800e0ca:	60b9      	str	r1, [r7, #8]
 800e0cc:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 800e0ce:	68f8      	ldr	r0, [r7, #12]
 800e0d0:	f001 fbc1 	bl	800f856 <_ZSt12__niter_baseIPKfSt6vectorIfSaIfEEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>
 800e0d4:	4604      	mov	r4, r0
 800e0d6:	68b8      	ldr	r0, [r7, #8]
 800e0d8:	f001 fbbd 	bl	800f856 <_ZSt12__niter_baseIPKfSt6vectorIfSaIfEEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>
 800e0dc:	4605      	mov	r5, r0
 800e0de:	6878      	ldr	r0, [r7, #4]
 800e0e0:	f001 fbc7 	bl	800f872 <_ZSt12__niter_baseIPfSt6vectorIfSaIfEEET_N9__gnu_cxx17__normal_iteratorIS4_T0_EE>
 800e0e4:	4603      	mov	r3, r0
 800e0e6:	461a      	mov	r2, r3
 800e0e8:	4629      	mov	r1, r5
 800e0ea:	4620      	mov	r0, r4
 800e0ec:	f001 fbcf 	bl	800f88e <_ZSt14__copy_move_a1ILb0EPKfPfET1_T0_S4_S3_>
 800e0f0:	4603      	mov	r3, r0
 800e0f2:	4619      	mov	r1, r3
 800e0f4:	6878      	ldr	r0, [r7, #4]
 800e0f6:	f001 fbda 	bl	800f8ae <_ZSt12__niter_wrapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEES2_ET_S7_T0_>
 800e0fa:	4603      	mov	r3, r0
    }
 800e0fc:	4618      	mov	r0, r3
 800e0fe:	3710      	adds	r7, #16
 800e100:	46bd      	mov	sp, r7
 800e102:	bdb0      	pop	{r4, r5, r7, pc}

0800e104 <_ZSt8_DestroyIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEEvT_S7_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 800e104:	b580      	push	{r7, lr}
 800e106:	b082      	sub	sp, #8
 800e108:	af00      	add	r7, sp, #0
 800e10a:	6078      	str	r0, [r7, #4]
 800e10c:	6039      	str	r1, [r7, #0]
      if (std::is_constant_evaluated())
 800e10e:	f7f4 fcfd 	bl	8002b0c <_ZSt21is_constant_evaluatedv>
 800e112:	4603      	mov	r3, r0
 800e114:	2b00      	cmp	r3, #0
 800e116:	d004      	beq.n	800e122 <_ZSt8_DestroyIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEEvT_S7_+0x1e>
	return _Destroy_aux<false>::__destroy(__first, __last);
 800e118:	6839      	ldr	r1, [r7, #0]
 800e11a:	6878      	ldr	r0, [r7, #4]
 800e11c:	f001 fbde 	bl	800f8dc <_ZNSt12_Destroy_auxILb0EE9__destroyIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEEEvT_S9_>
 800e120:	e003      	b.n	800e12a <_ZSt8_DestroyIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEEvT_S7_+0x26>
	__destroy(__first, __last);
 800e122:	6839      	ldr	r1, [r7, #0]
 800e124:	6878      	ldr	r0, [r7, #4]
 800e126:	f001 fc00 	bl	800f92a <_ZNSt12_Destroy_auxILb1EE9__destroyIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEEEvT_S9_>
    }
 800e12a:	3708      	adds	r7, #8
 800e12c:	46bd      	mov	sp, r7
 800e12e:	bd80      	pop	{r7, pc}

0800e130 <_ZSt14__copy_move_a1ILb0EPfS0_ET1_T0_S2_S1_>:
    __copy_move_a1(_II __first, _II __last, _OI __result)
 800e130:	b580      	push	{r7, lr}
 800e132:	b084      	sub	sp, #16
 800e134:	af00      	add	r7, sp, #0
 800e136:	60f8      	str	r0, [r7, #12]
 800e138:	60b9      	str	r1, [r7, #8]
 800e13a:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_a2<_IsMove>(__first, __last, __result); }
 800e13c:	687a      	ldr	r2, [r7, #4]
 800e13e:	68b9      	ldr	r1, [r7, #8]
 800e140:	68f8      	ldr	r0, [r7, #12]
 800e142:	f001 fbfd 	bl	800f940 <_ZSt14__copy_move_a2ILb0EPfS0_ET1_T0_S2_S1_>
 800e146:	4603      	mov	r3, r0
 800e148:	4618      	mov	r0, r3
 800e14a:	3710      	adds	r7, #16
 800e14c:	46bd      	mov	sp, r7
 800e14e:	bd80      	pop	{r7, pc}

0800e150 <_ZSt12__niter_wrapIPfET_RKS1_S1_>:
    __niter_wrap(const _Iterator&, _Iterator __res)
 800e150:	b480      	push	{r7}
 800e152:	b083      	sub	sp, #12
 800e154:	af00      	add	r7, sp, #0
 800e156:	6078      	str	r0, [r7, #4]
 800e158:	6039      	str	r1, [r7, #0]
    { return __res; }
 800e15a:	683b      	ldr	r3, [r7, #0]
 800e15c:	4618      	mov	r0, r3
 800e15e:	370c      	adds	r7, #12
 800e160:	46bd      	mov	sp, r7
 800e162:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e166:	4770      	bx	lr

0800e168 <_ZSt18uninitialized_copyIPfS0_ET0_T_S2_S1_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 800e168:	b580      	push	{r7, lr}
 800e16a:	b086      	sub	sp, #24
 800e16c:	af00      	add	r7, sp, #0
 800e16e:	60f8      	str	r0, [r7, #12]
 800e170:	60b9      	str	r1, [r7, #8]
 800e172:	607a      	str	r2, [r7, #4]
      const bool __assignable = is_assignable<_RefType2, _RefType1>::value;
 800e174:	2301      	movs	r3, #1
 800e176:	75fb      	strb	r3, [r7, #23]
	__uninit_copy(__first, __last, __result);
 800e178:	687a      	ldr	r2, [r7, #4]
 800e17a:	68b9      	ldr	r1, [r7, #8]
 800e17c:	68f8      	ldr	r0, [r7, #12]
 800e17e:	f001 fbfc 	bl	800f97a <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIPfS2_EET0_T_S4_S3_>
 800e182:	4603      	mov	r3, r0
    }
 800e184:	4618      	mov	r0, r3
 800e186:	3718      	adds	r7, #24
 800e188:	46bd      	mov	sp, r7
 800e18a:	bd80      	pop	{r7, pc}

0800e18c <_ZN9__gnu_cxx13new_allocatorIN3jlb4EdgeEEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 800e18c:	b480      	push	{r7}
 800e18e:	b083      	sub	sp, #12
 800e190:	af00      	add	r7, sp, #0
 800e192:	6078      	str	r0, [r7, #4]
 800e194:	687b      	ldr	r3, [r7, #4]
 800e196:	4618      	mov	r0, r3
 800e198:	370c      	adds	r7, #12
 800e19a:	46bd      	mov	sp, r7
 800e19c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1a0:	4770      	bx	lr

0800e1a2 <_ZNSt16allocator_traitsISaIN3jlb4EdgeEEE10deallocateERS2_PS1_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 800e1a2:	b580      	push	{r7, lr}
 800e1a4:	b088      	sub	sp, #32
 800e1a6:	af00      	add	r7, sp, #0
 800e1a8:	60f8      	str	r0, [r7, #12]
 800e1aa:	60b9      	str	r1, [r7, #8]
 800e1ac:	607a      	str	r2, [r7, #4]
 800e1ae:	68fb      	ldr	r3, [r7, #12]
 800e1b0:	61fb      	str	r3, [r7, #28]
 800e1b2:	68bb      	ldr	r3, [r7, #8]
 800e1b4:	61bb      	str	r3, [r7, #24]
 800e1b6:	687b      	ldr	r3, [r7, #4]
 800e1b8:	617b      	str	r3, [r7, #20]
	if (std::is_constant_evaluated())
 800e1ba:	f7f4 fca7 	bl	8002b0c <_ZSt21is_constant_evaluatedv>
 800e1be:	4603      	mov	r3, r0
 800e1c0:	2b00      	cmp	r3, #0
 800e1c2:	d003      	beq.n	800e1cc <_ZNSt16allocator_traitsISaIN3jlb4EdgeEEE10deallocateERS2_PS1_j+0x2a>
	    ::operator delete(__p);
 800e1c4:	69b8      	ldr	r0, [r7, #24]
 800e1c6:	f012 ffd9 	bl	802117c <_ZdlPv>
	    return;
 800e1ca:	e005      	b.n	800e1d8 <_ZNSt16allocator_traitsISaIN3jlb4EdgeEEE10deallocateERS2_PS1_j+0x36>
	__allocator_base<_Tp>::deallocate(__p, __n);
 800e1cc:	697a      	ldr	r2, [r7, #20]
 800e1ce:	69b9      	ldr	r1, [r7, #24]
 800e1d0:	69f8      	ldr	r0, [r7, #28]
 800e1d2:	f002 fc0e 	bl	80109f2 <_ZN9__gnu_cxx13new_allocatorIN3jlb4EdgeEE10deallocateEPS2_j>
      { __a.deallocate(__p, __n); }
 800e1d6:	bf00      	nop
 800e1d8:	bf00      	nop
 800e1da:	3720      	adds	r7, #32
 800e1dc:	46bd      	mov	sp, r7
 800e1de:	bd80      	pop	{r7, pc}

0800e1e0 <_ZSt8_DestroyIPN3jlb4EdgeEEvT_S3_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 800e1e0:	b580      	push	{r7, lr}
 800e1e2:	b082      	sub	sp, #8
 800e1e4:	af00      	add	r7, sp, #0
 800e1e6:	6078      	str	r0, [r7, #4]
 800e1e8:	6039      	str	r1, [r7, #0]
      if (std::is_constant_evaluated())
 800e1ea:	f7f4 fc8f 	bl	8002b0c <_ZSt21is_constant_evaluatedv>
 800e1ee:	4603      	mov	r3, r0
 800e1f0:	2b00      	cmp	r3, #0
 800e1f2:	d004      	beq.n	800e1fe <_ZSt8_DestroyIPN3jlb4EdgeEEvT_S3_+0x1e>
	return _Destroy_aux<false>::__destroy(__first, __last);
 800e1f4:	6839      	ldr	r1, [r7, #0]
 800e1f6:	6878      	ldr	r0, [r7, #4]
 800e1f8:	f001 fbcf 	bl	800f99a <_ZNSt12_Destroy_auxILb0EE9__destroyIPN3jlb4EdgeEEEvT_S5_>
 800e1fc:	e003      	b.n	800e206 <_ZSt8_DestroyIPN3jlb4EdgeEEvT_S3_+0x26>
	__destroy(__first, __last);
 800e1fe:	6839      	ldr	r1, [r7, #0]
 800e200:	6878      	ldr	r0, [r7, #4]
 800e202:	f001 fbca 	bl	800f99a <_ZNSt12_Destroy_auxILb0EE9__destroyIPN3jlb4EdgeEEEvT_S5_>
    }
 800e206:	3708      	adds	r7, #8
 800e208:	46bd      	mov	sp, r7
 800e20a:	bd80      	pop	{r7, pc}

0800e20c <_ZNSt16allocator_traitsISaIcEE37select_on_container_copy_constructionERKS0_>:
      select_on_container_copy_construction(const allocator_type& __rhs)
 800e20c:	b580      	push	{r7, lr}
 800e20e:	b082      	sub	sp, #8
 800e210:	af00      	add	r7, sp, #0
 800e212:	6078      	str	r0, [r7, #4]
 800e214:	6039      	str	r1, [r7, #0]
      { return __rhs; }
 800e216:	6839      	ldr	r1, [r7, #0]
 800e218:	6878      	ldr	r0, [r7, #4]
 800e21a:	f012 ffc5 	bl	80211a8 <_ZNSaIcEC1ERKS_>
 800e21e:	6878      	ldr	r0, [r7, #4]
 800e220:	3708      	adds	r7, #8
 800e222:	46bd      	mov	sp, r7
 800e224:	bd80      	pop	{r7, pc}

0800e226 <_ZNSt12_Vector_baseIcSaIcEE12_Vector_implC1ERKS0_>:
	_Vector_impl(_Tp_alloc_type const& __a) _GLIBCXX_NOEXCEPT
 800e226:	b580      	push	{r7, lr}
 800e228:	b082      	sub	sp, #8
 800e22a:	af00      	add	r7, sp, #0
 800e22c:	6078      	str	r0, [r7, #4]
 800e22e:	6039      	str	r1, [r7, #0]
	: _Tp_alloc_type(__a)
 800e230:	6839      	ldr	r1, [r7, #0]
 800e232:	6878      	ldr	r0, [r7, #4]
 800e234:	f012 ffb8 	bl	80211a8 <_ZNSaIcEC1ERKS_>
 800e238:	687b      	ldr	r3, [r7, #4]
 800e23a:	4618      	mov	r0, r3
 800e23c:	f7ff fcd1 	bl	800dbe2 <_ZNSt12_Vector_baseIcSaIcEE17_Vector_impl_dataC1Ev>
	{ }
 800e240:	687b      	ldr	r3, [r7, #4]
 800e242:	4618      	mov	r0, r3
 800e244:	3708      	adds	r7, #8
 800e246:	46bd      	mov	sp, r7
 800e248:	bd80      	pop	{r7, pc}

0800e24a <_ZNSt12_Vector_baseIcSaIcEE17_M_create_storageEj>:
      _M_create_storage(size_t __n)
 800e24a:	b580      	push	{r7, lr}
 800e24c:	b082      	sub	sp, #8
 800e24e:	af00      	add	r7, sp, #0
 800e250:	6078      	str	r0, [r7, #4]
 800e252:	6039      	str	r1, [r7, #0]
	this->_M_impl._M_start = this->_M_allocate(__n);
 800e254:	6839      	ldr	r1, [r7, #0]
 800e256:	6878      	ldr	r0, [r7, #4]
 800e258:	f000 fb14 	bl	800e884 <_ZNSt12_Vector_baseIcSaIcEE11_M_allocateEj>
 800e25c:	4602      	mov	r2, r0
 800e25e:	687b      	ldr	r3, [r7, #4]
 800e260:	601a      	str	r2, [r3, #0]
	this->_M_impl._M_finish = this->_M_impl._M_start;
 800e262:	687b      	ldr	r3, [r7, #4]
 800e264:	681a      	ldr	r2, [r3, #0]
 800e266:	687b      	ldr	r3, [r7, #4]
 800e268:	605a      	str	r2, [r3, #4]
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 800e26a:	687b      	ldr	r3, [r7, #4]
 800e26c:	681a      	ldr	r2, [r3, #0]
 800e26e:	683b      	ldr	r3, [r7, #0]
 800e270:	441a      	add	r2, r3
 800e272:	687b      	ldr	r3, [r7, #4]
 800e274:	609a      	str	r2, [r3, #8]
      }
 800e276:	bf00      	nop
 800e278:	3708      	adds	r7, #8
 800e27a:	46bd      	mov	sp, r7
 800e27c:	bd80      	pop	{r7, pc}

0800e27e <_ZN9__gnu_cxx17__normal_iteratorIPKcSt6vectorIcSaIcEEEC1ERKS2_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 800e27e:	b480      	push	{r7}
 800e280:	b083      	sub	sp, #12
 800e282:	af00      	add	r7, sp, #0
 800e284:	6078      	str	r0, [r7, #4]
 800e286:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 800e288:	683b      	ldr	r3, [r7, #0]
 800e28a:	681a      	ldr	r2, [r3, #0]
 800e28c:	687b      	ldr	r3, [r7, #4]
 800e28e:	601a      	str	r2, [r3, #0]
 800e290:	687b      	ldr	r3, [r7, #4]
 800e292:	4618      	mov	r0, r3
 800e294:	370c      	adds	r7, #12
 800e296:	46bd      	mov	sp, r7
 800e298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e29c:	4770      	bx	lr

0800e29e <_ZSt18uninitialized_copyIN9__gnu_cxx17__normal_iteratorIPKcSt6vectorIcSaIcEEEEPcET0_T_SA_S9_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 800e29e:	b580      	push	{r7, lr}
 800e2a0:	b086      	sub	sp, #24
 800e2a2:	af00      	add	r7, sp, #0
 800e2a4:	60f8      	str	r0, [r7, #12]
 800e2a6:	60b9      	str	r1, [r7, #8]
 800e2a8:	607a      	str	r2, [r7, #4]
      const bool __assignable = is_assignable<_RefType2, _RefType1>::value;
 800e2aa:	2301      	movs	r3, #1
 800e2ac:	75fb      	strb	r3, [r7, #23]
	__uninit_copy(__first, __last, __result);
 800e2ae:	687a      	ldr	r2, [r7, #4]
 800e2b0:	68b9      	ldr	r1, [r7, #8]
 800e2b2:	68f8      	ldr	r0, [r7, #12]
 800e2b4:	f001 fb8a 	bl	800f9cc <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIN9__gnu_cxx17__normal_iteratorIPKcSt6vectorIcSaIcEEEEPcEET0_T_SC_SB_>
 800e2b8:	4603      	mov	r3, r0
    }
 800e2ba:	4618      	mov	r0, r3
 800e2bc:	3718      	adds	r7, #24
 800e2be:	46bd      	mov	sp, r7
 800e2c0:	bd80      	pop	{r7, pc}

0800e2c2 <_ZSt8_DestroyIPcEvT_S1_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 800e2c2:	b580      	push	{r7, lr}
 800e2c4:	b082      	sub	sp, #8
 800e2c6:	af00      	add	r7, sp, #0
 800e2c8:	6078      	str	r0, [r7, #4]
 800e2ca:	6039      	str	r1, [r7, #0]
      if (std::is_constant_evaluated())
 800e2cc:	f7f4 fc1e 	bl	8002b0c <_ZSt21is_constant_evaluatedv>
 800e2d0:	4603      	mov	r3, r0
 800e2d2:	2b00      	cmp	r3, #0
 800e2d4:	d004      	beq.n	800e2e0 <_ZSt8_DestroyIPcEvT_S1_+0x1e>
	return _Destroy_aux<false>::__destroy(__first, __last);
 800e2d6:	6839      	ldr	r1, [r7, #0]
 800e2d8:	6878      	ldr	r0, [r7, #4]
 800e2da:	f001 fb87 	bl	800f9ec <_ZNSt12_Destroy_auxILb0EE9__destroyIPcEEvT_S3_>
 800e2de:	e003      	b.n	800e2e8 <_ZSt8_DestroyIPcEvT_S1_+0x26>
	__destroy(__first, __last);
 800e2e0:	6839      	ldr	r1, [r7, #0]
 800e2e2:	6878      	ldr	r0, [r7, #4]
 800e2e4:	f001 fb9b 	bl	800fa1e <_ZNSt12_Destroy_auxILb1EE9__destroyIPcEEvT_S3_>
    }
 800e2e8:	3708      	adds	r7, #8
 800e2ea:	46bd      	mov	sp, r7
 800e2ec:	bd80      	pop	{r7, pc}

0800e2ee <_ZSt7forwardIN3jlb4EdgeEEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800e2ee:	b480      	push	{r7}
 800e2f0:	b083      	sub	sp, #12
 800e2f2:	af00      	add	r7, sp, #0
 800e2f4:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800e2f6:	687b      	ldr	r3, [r7, #4]
 800e2f8:	4618      	mov	r0, r3
 800e2fa:	370c      	adds	r7, #12
 800e2fc:	46bd      	mov	sp, r7
 800e2fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e302:	4770      	bx	lr

0800e304 <_ZNSt12_Vector_baseIcSaIcEEC1EOS1_>:
      _Vector_base(_Vector_base&&) = default;
 800e304:	b580      	push	{r7, lr}
 800e306:	b082      	sub	sp, #8
 800e308:	af00      	add	r7, sp, #0
 800e30a:	6078      	str	r0, [r7, #4]
 800e30c:	6039      	str	r1, [r7, #0]
 800e30e:	687b      	ldr	r3, [r7, #4]
 800e310:	683a      	ldr	r2, [r7, #0]
 800e312:	4611      	mov	r1, r2
 800e314:	4618      	mov	r0, r3
 800e316:	f001 fb8d 	bl	800fa34 <_ZNSt12_Vector_baseIcSaIcEE12_Vector_implC1EOS2_>
 800e31a:	687b      	ldr	r3, [r7, #4]
 800e31c:	4618      	mov	r0, r3
 800e31e:	3708      	adds	r7, #8
 800e320:	46bd      	mov	sp, r7
 800e322:	bd80      	pop	{r7, pc}

0800e324 <_ZNSt6vectorIcSaIcEEC1EOS1_>:
      vector(vector&&) noexcept = default;
 800e324:	b580      	push	{r7, lr}
 800e326:	b082      	sub	sp, #8
 800e328:	af00      	add	r7, sp, #0
 800e32a:	6078      	str	r0, [r7, #4]
 800e32c:	6039      	str	r1, [r7, #0]
 800e32e:	687b      	ldr	r3, [r7, #4]
 800e330:	683a      	ldr	r2, [r7, #0]
 800e332:	4611      	mov	r1, r2
 800e334:	4618      	mov	r0, r3
 800e336:	f7ff ffe5 	bl	800e304 <_ZNSt12_Vector_baseIcSaIcEEC1EOS1_>
 800e33a:	687b      	ldr	r3, [r7, #4]
 800e33c:	4618      	mov	r0, r3
 800e33e:	3708      	adds	r7, #8
 800e340:	46bd      	mov	sp, r7
 800e342:	bd80      	pop	{r7, pc}

0800e344 <_ZN3jlb4EdgeC1EOS0_>:
    struct Edge
 800e344:	b580      	push	{r7, lr}
 800e346:	b082      	sub	sp, #8
 800e348:	af00      	add	r7, sp, #0
 800e34a:	6078      	str	r0, [r7, #4]
 800e34c:	6039      	str	r1, [r7, #0]
 800e34e:	683b      	ldr	r3, [r7, #0]
 800e350:	781a      	ldrb	r2, [r3, #0]
 800e352:	687b      	ldr	r3, [r7, #4]
 800e354:	701a      	strb	r2, [r3, #0]
 800e356:	683b      	ldr	r3, [r7, #0]
 800e358:	685a      	ldr	r2, [r3, #4]
 800e35a:	687b      	ldr	r3, [r7, #4]
 800e35c:	605a      	str	r2, [r3, #4]
 800e35e:	687b      	ldr	r3, [r7, #4]
 800e360:	f103 0208 	add.w	r2, r3, #8
 800e364:	683b      	ldr	r3, [r7, #0]
 800e366:	3308      	adds	r3, #8
 800e368:	4619      	mov	r1, r3
 800e36a:	4610      	mov	r0, r2
 800e36c:	f7ff ffda 	bl	800e324 <_ZNSt6vectorIcSaIcEEC1EOS1_>
 800e370:	683b      	ldr	r3, [r7, #0]
 800e372:	695a      	ldr	r2, [r3, #20]
 800e374:	687b      	ldr	r3, [r7, #4]
 800e376:	615a      	str	r2, [r3, #20]
 800e378:	687b      	ldr	r3, [r7, #4]
 800e37a:	4618      	mov	r0, r3
 800e37c:	3708      	adds	r7, #8
 800e37e:	46bd      	mov	sp, r7
 800e380:	bd80      	pop	{r7, pc}

0800e382 <_ZSt12construct_atIN3jlb4EdgeEJS1_EEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPS3_DpOS4_>:
    construct_at(_Tp* __location, _Args&&... __args)
 800e382:	b5b0      	push	{r4, r5, r7, lr}
 800e384:	b082      	sub	sp, #8
 800e386:	af00      	add	r7, sp, #0
 800e388:	6078      	str	r0, [r7, #4]
 800e38a:	6039      	str	r1, [r7, #0]
    { return ::new((void*)__location) _Tp(std::forward<_Args>(__args)...); }
 800e38c:	6838      	ldr	r0, [r7, #0]
 800e38e:	f7ff ffae 	bl	800e2ee <_ZSt7forwardIN3jlb4EdgeEEOT_RNSt16remove_referenceIS2_E4typeE>
 800e392:	4605      	mov	r5, r0
 800e394:	687b      	ldr	r3, [r7, #4]
 800e396:	4619      	mov	r1, r3
 800e398:	2018      	movs	r0, #24
 800e39a:	f7f4 fbbf 	bl	8002b1c <_ZnwjPv>
 800e39e:	4604      	mov	r4, r0
 800e3a0:	4629      	mov	r1, r5
 800e3a2:	4620      	mov	r0, r4
 800e3a4:	f7ff ffce 	bl	800e344 <_ZN3jlb4EdgeC1EOS0_>
 800e3a8:	4623      	mov	r3, r4
 800e3aa:	4618      	mov	r0, r3
 800e3ac:	3708      	adds	r7, #8
 800e3ae:	46bd      	mov	sp, r7
 800e3b0:	bdb0      	pop	{r4, r5, r7, pc}

0800e3b2 <_ZNSt16allocator_traitsISaIN3jlb4EdgeEEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 800e3b2:	b580      	push	{r7, lr}
 800e3b4:	b084      	sub	sp, #16
 800e3b6:	af00      	add	r7, sp, #0
 800e3b8:	60f8      	str	r0, [r7, #12]
 800e3ba:	60b9      	str	r1, [r7, #8]
 800e3bc:	607a      	str	r2, [r7, #4]
	  std::construct_at(__p, std::forward<_Args>(__args)...);
 800e3be:	6878      	ldr	r0, [r7, #4]
 800e3c0:	f7ff ff95 	bl	800e2ee <_ZSt7forwardIN3jlb4EdgeEEOT_RNSt16remove_referenceIS2_E4typeE>
 800e3c4:	4603      	mov	r3, r0
 800e3c6:	4619      	mov	r1, r3
 800e3c8:	68b8      	ldr	r0, [r7, #8]
 800e3ca:	f7ff ffda 	bl	800e382 <_ZSt12construct_atIN3jlb4EdgeEJS1_EEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPS3_DpOS4_>
	}
 800e3ce:	bf00      	nop
 800e3d0:	3710      	adds	r7, #16
 800e3d2:	46bd      	mov	sp, r7
 800e3d4:	bd80      	pop	{r7, pc}

0800e3d6 <_ZNSt6vectorIN3jlb4EdgeESaIS1_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 800e3d6:	b580      	push	{r7, lr}
 800e3d8:	b084      	sub	sp, #16
 800e3da:	af00      	add	r7, sp, #0
 800e3dc:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_finish); }
 800e3de:	687b      	ldr	r3, [r7, #4]
 800e3e0:	1d1a      	adds	r2, r3, #4
 800e3e2:	f107 030c 	add.w	r3, r7, #12
 800e3e6:	4611      	mov	r1, r2
 800e3e8:	4618      	mov	r0, r3
 800e3ea:	f001 fb3e 	bl	800fa6a <_ZN9__gnu_cxx17__normal_iteratorIPN3jlb4EdgeESt6vectorIS2_SaIS2_EEEC1ERKS3_>
 800e3ee:	68fb      	ldr	r3, [r7, #12]
 800e3f0:	4618      	mov	r0, r3
 800e3f2:	3710      	adds	r7, #16
 800e3f4:	46bd      	mov	sp, r7
 800e3f6:	bd80      	pop	{r7, pc}

0800e3f8 <_ZNSt6vectorIN3jlb4EdgeESaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>:
      vector<_Tp, _Alloc>::
 800e3f8:	b5b0      	push	{r4, r5, r7, lr}
 800e3fa:	b08c      	sub	sp, #48	; 0x30
 800e3fc:	af00      	add	r7, sp, #0
 800e3fe:	60f8      	str	r0, [r7, #12]
 800e400:	60b9      	str	r1, [r7, #8]
 800e402:	607a      	str	r2, [r7, #4]
	_M_check_len(size_type(1), "vector::_M_realloc_insert");
 800e404:	4a3f      	ldr	r2, [pc, #252]	; (800e504 <_ZNSt6vectorIN3jlb4EdgeESaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x10c>)
 800e406:	2101      	movs	r1, #1
 800e408:	68f8      	ldr	r0, [r7, #12]
 800e40a:	f001 fb3e 	bl	800fa8a <_ZNKSt6vectorIN3jlb4EdgeESaIS1_EE12_M_check_lenEjPKc>
 800e40e:	62f8      	str	r0, [r7, #44]	; 0x2c
      pointer __old_start = this->_M_impl._M_start;
 800e410:	68fb      	ldr	r3, [r7, #12]
 800e412:	681b      	ldr	r3, [r3, #0]
 800e414:	62bb      	str	r3, [r7, #40]	; 0x28
      pointer __old_finish = this->_M_impl._M_finish;
 800e416:	68fb      	ldr	r3, [r7, #12]
 800e418:	685b      	ldr	r3, [r3, #4]
 800e41a:	627b      	str	r3, [r7, #36]	; 0x24
      const size_type __elems_before = __position - begin();
 800e41c:	68f8      	ldr	r0, [r7, #12]
 800e41e:	f001 fb7b 	bl	800fb18 <_ZNSt6vectorIN3jlb4EdgeESaIS1_EE5beginEv>
 800e422:	4603      	mov	r3, r0
 800e424:	617b      	str	r3, [r7, #20]
 800e426:	f107 0214 	add.w	r2, r7, #20
 800e42a:	f107 0308 	add.w	r3, r7, #8
 800e42e:	4611      	mov	r1, r2
 800e430:	4618      	mov	r0, r3
 800e432:	f001 fb81 	bl	800fb38 <_ZN9__gnu_cxxmiIPN3jlb4EdgeESt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>
 800e436:	4603      	mov	r3, r0
 800e438:	623b      	str	r3, [r7, #32]
      pointer __new_start(this->_M_allocate(__len));
 800e43a:	68fb      	ldr	r3, [r7, #12]
 800e43c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e43e:	4618      	mov	r0, r3
 800e440:	f001 fb94 	bl	800fb6c <_ZNSt12_Vector_baseIN3jlb4EdgeESaIS1_EE11_M_allocateEj>
 800e444:	61f8      	str	r0, [r7, #28]
      pointer __new_finish(__new_start);
 800e446:	69fb      	ldr	r3, [r7, #28]
 800e448:	61bb      	str	r3, [r7, #24]
	  _Alloc_traits::construct(this->_M_impl,
 800e44a:	68fc      	ldr	r4, [r7, #12]
				   __new_start + __elems_before,
 800e44c:	6a3a      	ldr	r2, [r7, #32]
 800e44e:	4613      	mov	r3, r2
 800e450:	005b      	lsls	r3, r3, #1
 800e452:	4413      	add	r3, r2
 800e454:	00db      	lsls	r3, r3, #3
 800e456:	461a      	mov	r2, r3
	  _Alloc_traits::construct(this->_M_impl,
 800e458:	69fb      	ldr	r3, [r7, #28]
 800e45a:	189d      	adds	r5, r3, r2
 800e45c:	6878      	ldr	r0, [r7, #4]
 800e45e:	f7ff ff46 	bl	800e2ee <_ZSt7forwardIN3jlb4EdgeEEOT_RNSt16remove_referenceIS2_E4typeE>
 800e462:	4603      	mov	r3, r0
 800e464:	461a      	mov	r2, r3
 800e466:	4629      	mov	r1, r5
 800e468:	4620      	mov	r0, r4
 800e46a:	f7ff ffa2 	bl	800e3b2 <_ZNSt16allocator_traitsISaIN3jlb4EdgeEEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>
	  __new_finish = pointer();
 800e46e:	2300      	movs	r3, #0
 800e470:	61bb      	str	r3, [r7, #24]
	      __new_finish = _S_relocate(__old_start, __position.base(),
 800e472:	f107 0308 	add.w	r3, r7, #8
 800e476:	4618      	mov	r0, r3
 800e478:	f001 fba0 	bl	800fbbc <_ZNK9__gnu_cxx17__normal_iteratorIPN3jlb4EdgeESt6vectorIS2_SaIS2_EEE4baseEv>
 800e47c:	4603      	mov	r3, r0
 800e47e:	681c      	ldr	r4, [r3, #0]
					 __new_start, _M_get_Tp_allocator());
 800e480:	68fb      	ldr	r3, [r7, #12]
 800e482:	4618      	mov	r0, r3
 800e484:	f7fe ffb8 	bl	800d3f8 <_ZNSt12_Vector_baseIN3jlb4EdgeESaIS1_EE19_M_get_Tp_allocatorEv>
 800e488:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__old_start, __position.base(),
 800e48a:	69fa      	ldr	r2, [r7, #28]
 800e48c:	4621      	mov	r1, r4
 800e48e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e490:	f001 fb80 	bl	800fb94 <_ZNSt6vectorIN3jlb4EdgeESaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>
 800e494:	61b8      	str	r0, [r7, #24]
	      ++__new_finish;
 800e496:	69bb      	ldr	r3, [r7, #24]
 800e498:	3318      	adds	r3, #24
 800e49a:	61bb      	str	r3, [r7, #24]
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 800e49c:	f107 0308 	add.w	r3, r7, #8
 800e4a0:	4618      	mov	r0, r3
 800e4a2:	f001 fb8b 	bl	800fbbc <_ZNK9__gnu_cxx17__normal_iteratorIPN3jlb4EdgeESt6vectorIS2_SaIS2_EEE4baseEv>
 800e4a6:	4603      	mov	r3, r0
 800e4a8:	681c      	ldr	r4, [r3, #0]
					 __new_finish, _M_get_Tp_allocator());
 800e4aa:	68fb      	ldr	r3, [r7, #12]
 800e4ac:	4618      	mov	r0, r3
 800e4ae:	f7fe ffa3 	bl	800d3f8 <_ZNSt12_Vector_baseIN3jlb4EdgeESaIS1_EE19_M_get_Tp_allocatorEv>
 800e4b2:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 800e4b4:	69ba      	ldr	r2, [r7, #24]
 800e4b6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800e4b8:	4620      	mov	r0, r4
 800e4ba:	f001 fb6b 	bl	800fb94 <_ZNSt6vectorIN3jlb4EdgeESaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>
 800e4be:	61b8      	str	r0, [r7, #24]
      _M_deallocate(__old_start,
 800e4c0:	68f8      	ldr	r0, [r7, #12]
		    this->_M_impl._M_end_of_storage - __old_start);
 800e4c2:	68fb      	ldr	r3, [r7, #12]
 800e4c4:	689a      	ldr	r2, [r3, #8]
 800e4c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e4c8:	1ad3      	subs	r3, r2, r3
 800e4ca:	10db      	asrs	r3, r3, #3
 800e4cc:	4a0e      	ldr	r2, [pc, #56]	; (800e508 <_ZNSt6vectorIN3jlb4EdgeESaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x110>)
 800e4ce:	fb02 f303 	mul.w	r3, r2, r3
      _M_deallocate(__old_start,
 800e4d2:	461a      	mov	r2, r3
 800e4d4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800e4d6:	f7fe ff7c 	bl	800d3d2 <_ZNSt12_Vector_baseIN3jlb4EdgeESaIS1_EE13_M_deallocateEPS1_j>
      this->_M_impl._M_start = __new_start;
 800e4da:	68fb      	ldr	r3, [r7, #12]
 800e4dc:	69fa      	ldr	r2, [r7, #28]
 800e4de:	601a      	str	r2, [r3, #0]
      this->_M_impl._M_finish = __new_finish;
 800e4e0:	68fb      	ldr	r3, [r7, #12]
 800e4e2:	69ba      	ldr	r2, [r7, #24]
 800e4e4:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 800e4e6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e4e8:	4613      	mov	r3, r2
 800e4ea:	005b      	lsls	r3, r3, #1
 800e4ec:	4413      	add	r3, r2
 800e4ee:	00db      	lsls	r3, r3, #3
 800e4f0:	461a      	mov	r2, r3
 800e4f2:	69fb      	ldr	r3, [r7, #28]
 800e4f4:	441a      	add	r2, r3
 800e4f6:	68fb      	ldr	r3, [r7, #12]
 800e4f8:	609a      	str	r2, [r3, #8]
    }
 800e4fa:	bf00      	nop
 800e4fc:	3730      	adds	r7, #48	; 0x30
 800e4fe:	46bd      	mov	sp, r7
 800e500:	bdb0      	pop	{r4, r5, r7, pc}
 800e502:	bf00      	nop
 800e504:	08025e60 	.word	0x08025e60
 800e508:	aaaaaaab 	.word	0xaaaaaaab

0800e50c <_ZNSt6vectorIN3jlb4EdgeESaIS1_EE4backEv>:
      back() _GLIBCXX_NOEXCEPT
 800e50c:	b580      	push	{r7, lr}
 800e50e:	b084      	sub	sp, #16
 800e510:	af00      	add	r7, sp, #0
 800e512:	6078      	str	r0, [r7, #4]
	return *(end() - 1);
 800e514:	6878      	ldr	r0, [r7, #4]
 800e516:	f7ff ff5e 	bl	800e3d6 <_ZNSt6vectorIN3jlb4EdgeESaIS1_EE3endEv>
 800e51a:	4603      	mov	r3, r0
 800e51c:	60fb      	str	r3, [r7, #12]
 800e51e:	f107 030c 	add.w	r3, r7, #12
 800e522:	2101      	movs	r1, #1
 800e524:	4618      	mov	r0, r3
 800e526:	f001 fb60 	bl	800fbea <_ZNK9__gnu_cxx17__normal_iteratorIPN3jlb4EdgeESt6vectorIS2_SaIS2_EEEmiEi>
 800e52a:	4603      	mov	r3, r0
 800e52c:	60bb      	str	r3, [r7, #8]
 800e52e:	f107 0308 	add.w	r3, r7, #8
 800e532:	4618      	mov	r0, r3
 800e534:	f001 fb75 	bl	800fc22 <_ZNK9__gnu_cxx17__normal_iteratorIPN3jlb4EdgeESt6vectorIS2_SaIS2_EEEdeEv>
 800e538:	4603      	mov	r3, r0
      }
 800e53a:	4618      	mov	r0, r3
 800e53c:	3710      	adds	r7, #16
 800e53e:	46bd      	mov	sp, r7
 800e540:	bd80      	pop	{r7, pc}

0800e542 <_ZN9__gnu_cxx13new_allocatorIN3jlb4NodeEEC1Ev>:
 800e542:	b480      	push	{r7}
 800e544:	b083      	sub	sp, #12
 800e546:	af00      	add	r7, sp, #0
 800e548:	6078      	str	r0, [r7, #4]
 800e54a:	687b      	ldr	r3, [r7, #4]
 800e54c:	4618      	mov	r0, r3
 800e54e:	370c      	adds	r7, #12
 800e550:	46bd      	mov	sp, r7
 800e552:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e556:	4770      	bx	lr

0800e558 <_ZNSt16allocator_traitsISaIN3jlb4NodeEEE10deallocateERS2_PS1_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 800e558:	b580      	push	{r7, lr}
 800e55a:	b088      	sub	sp, #32
 800e55c:	af00      	add	r7, sp, #0
 800e55e:	60f8      	str	r0, [r7, #12]
 800e560:	60b9      	str	r1, [r7, #8]
 800e562:	607a      	str	r2, [r7, #4]
 800e564:	68fb      	ldr	r3, [r7, #12]
 800e566:	61fb      	str	r3, [r7, #28]
 800e568:	68bb      	ldr	r3, [r7, #8]
 800e56a:	61bb      	str	r3, [r7, #24]
 800e56c:	687b      	ldr	r3, [r7, #4]
 800e56e:	617b      	str	r3, [r7, #20]
	if (std::is_constant_evaluated())
 800e570:	f7f4 facc 	bl	8002b0c <_ZSt21is_constant_evaluatedv>
 800e574:	4603      	mov	r3, r0
 800e576:	2b00      	cmp	r3, #0
 800e578:	d003      	beq.n	800e582 <_ZNSt16allocator_traitsISaIN3jlb4NodeEEE10deallocateERS2_PS1_j+0x2a>
	    ::operator delete(__p);
 800e57a:	69b8      	ldr	r0, [r7, #24]
 800e57c:	f012 fdfe 	bl	802117c <_ZdlPv>
	    return;
 800e580:	e005      	b.n	800e58e <_ZNSt16allocator_traitsISaIN3jlb4NodeEEE10deallocateERS2_PS1_j+0x36>
	__allocator_base<_Tp>::deallocate(__p, __n);
 800e582:	697a      	ldr	r2, [r7, #20]
 800e584:	69b9      	ldr	r1, [r7, #24]
 800e586:	69f8      	ldr	r0, [r7, #28]
 800e588:	f002 fafd 	bl	8010b86 <_ZN9__gnu_cxx13new_allocatorIN3jlb4NodeEE10deallocateEPS2_j>
      { __a.deallocate(__p, __n); }
 800e58c:	bf00      	nop
 800e58e:	bf00      	nop
 800e590:	3720      	adds	r7, #32
 800e592:	46bd      	mov	sp, r7
 800e594:	bd80      	pop	{r7, pc}

0800e596 <_ZSt8_DestroyIPN3jlb4NodeEEvT_S3_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 800e596:	b580      	push	{r7, lr}
 800e598:	b082      	sub	sp, #8
 800e59a:	af00      	add	r7, sp, #0
 800e59c:	6078      	str	r0, [r7, #4]
 800e59e:	6039      	str	r1, [r7, #0]
      if (std::is_constant_evaluated())
 800e5a0:	f7f4 fab4 	bl	8002b0c <_ZSt21is_constant_evaluatedv>
 800e5a4:	4603      	mov	r3, r0
 800e5a6:	2b00      	cmp	r3, #0
 800e5a8:	d004      	beq.n	800e5b4 <_ZSt8_DestroyIPN3jlb4NodeEEvT_S3_+0x1e>
	return _Destroy_aux<false>::__destroy(__first, __last);
 800e5aa:	6839      	ldr	r1, [r7, #0]
 800e5ac:	6878      	ldr	r0, [r7, #4]
 800e5ae:	f001 fb44 	bl	800fc3a <_ZNSt12_Destroy_auxILb0EE9__destroyIPN3jlb4NodeEEEvT_S5_>
 800e5b2:	e003      	b.n	800e5bc <_ZSt8_DestroyIPN3jlb4NodeEEvT_S3_+0x26>
	__destroy(__first, __last);
 800e5b4:	6839      	ldr	r1, [r7, #0]
 800e5b6:	6878      	ldr	r0, [r7, #4]
 800e5b8:	f001 fb3f 	bl	800fc3a <_ZNSt12_Destroy_auxILb0EE9__destroyIPN3jlb4NodeEEEvT_S5_>
    }
 800e5bc:	3708      	adds	r7, #8
 800e5be:	46bd      	mov	sp, r7
 800e5c0:	bd80      	pop	{r7, pc}

0800e5c2 <_ZSt7forwardIN3jlb4NodeEEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800e5c2:	b480      	push	{r7}
 800e5c4:	b083      	sub	sp, #12
 800e5c6:	af00      	add	r7, sp, #0
 800e5c8:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800e5ca:	687b      	ldr	r3, [r7, #4]
 800e5cc:	4618      	mov	r0, r3
 800e5ce:	370c      	adds	r7, #12
 800e5d0:	46bd      	mov	sp, r7
 800e5d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5d6:	4770      	bx	lr

0800e5d8 <_ZN3jlb4NodeC1ERKS0_>:
    class Node
 800e5d8:	b580      	push	{r7, lr}
 800e5da:	b082      	sub	sp, #8
 800e5dc:	af00      	add	r7, sp, #0
 800e5de:	6078      	str	r0, [r7, #4]
 800e5e0:	6039      	str	r1, [r7, #0]
 800e5e2:	683b      	ldr	r3, [r7, #0]
 800e5e4:	781a      	ldrb	r2, [r3, #0]
 800e5e6:	687b      	ldr	r3, [r7, #4]
 800e5e8:	701a      	strb	r2, [r3, #0]
 800e5ea:	683b      	ldr	r3, [r7, #0]
 800e5ec:	685a      	ldr	r2, [r3, #4]
 800e5ee:	687b      	ldr	r3, [r7, #4]
 800e5f0:	605a      	str	r2, [r3, #4]
 800e5f2:	683b      	ldr	r3, [r7, #0]
 800e5f4:	689a      	ldr	r2, [r3, #8]
 800e5f6:	687b      	ldr	r3, [r7, #4]
 800e5f8:	609a      	str	r2, [r3, #8]
 800e5fa:	687b      	ldr	r3, [r7, #4]
 800e5fc:	f103 020c 	add.w	r2, r3, #12
 800e600:	683b      	ldr	r3, [r7, #0]
 800e602:	330c      	adds	r3, #12
 800e604:	4619      	mov	r1, r3
 800e606:	4610      	mov	r0, r2
 800e608:	f001 fb30 	bl	800fc6c <_ZNSt6vectorIN3jlb4EdgeESaIS1_EEC1ERKS3_>
 800e60c:	687b      	ldr	r3, [r7, #4]
 800e60e:	4618      	mov	r0, r3
 800e610:	3708      	adds	r7, #8
 800e612:	46bd      	mov	sp, r7
 800e614:	bd80      	pop	{r7, pc}

0800e616 <_ZSt12construct_atIN3jlb4NodeEJS1_EEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPS3_DpOS4_>:
    construct_at(_Tp* __location, _Args&&... __args)
 800e616:	b5b0      	push	{r4, r5, r7, lr}
 800e618:	b082      	sub	sp, #8
 800e61a:	af00      	add	r7, sp, #0
 800e61c:	6078      	str	r0, [r7, #4]
 800e61e:	6039      	str	r1, [r7, #0]
    { return ::new((void*)__location) _Tp(std::forward<_Args>(__args)...); }
 800e620:	6838      	ldr	r0, [r7, #0]
 800e622:	f7ff ffce 	bl	800e5c2 <_ZSt7forwardIN3jlb4NodeEEOT_RNSt16remove_referenceIS2_E4typeE>
 800e626:	4605      	mov	r5, r0
 800e628:	687b      	ldr	r3, [r7, #4]
 800e62a:	4619      	mov	r1, r3
 800e62c:	2018      	movs	r0, #24
 800e62e:	f7f4 fa75 	bl	8002b1c <_ZnwjPv>
 800e632:	4604      	mov	r4, r0
 800e634:	4629      	mov	r1, r5
 800e636:	4620      	mov	r0, r4
 800e638:	f7ff ffce 	bl	800e5d8 <_ZN3jlb4NodeC1ERKS0_>
 800e63c:	4623      	mov	r3, r4
 800e63e:	4618      	mov	r0, r3
 800e640:	3708      	adds	r7, #8
 800e642:	46bd      	mov	sp, r7
 800e644:	bdb0      	pop	{r4, r5, r7, pc}

0800e646 <_ZNSt16allocator_traitsISaIN3jlb4NodeEEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 800e646:	b580      	push	{r7, lr}
 800e648:	b084      	sub	sp, #16
 800e64a:	af00      	add	r7, sp, #0
 800e64c:	60f8      	str	r0, [r7, #12]
 800e64e:	60b9      	str	r1, [r7, #8]
 800e650:	607a      	str	r2, [r7, #4]
	  std::construct_at(__p, std::forward<_Args>(__args)...);
 800e652:	6878      	ldr	r0, [r7, #4]
 800e654:	f7ff ffb5 	bl	800e5c2 <_ZSt7forwardIN3jlb4NodeEEOT_RNSt16remove_referenceIS2_E4typeE>
 800e658:	4603      	mov	r3, r0
 800e65a:	4619      	mov	r1, r3
 800e65c:	68b8      	ldr	r0, [r7, #8]
 800e65e:	f7ff ffda 	bl	800e616 <_ZSt12construct_atIN3jlb4NodeEJS1_EEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPS3_DpOS4_>
	}
 800e662:	bf00      	nop
 800e664:	3710      	adds	r7, #16
 800e666:	46bd      	mov	sp, r7
 800e668:	bd80      	pop	{r7, pc}

0800e66a <_ZNSt6vectorIN3jlb4NodeESaIS1_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 800e66a:	b580      	push	{r7, lr}
 800e66c:	b084      	sub	sp, #16
 800e66e:	af00      	add	r7, sp, #0
 800e670:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_finish); }
 800e672:	687b      	ldr	r3, [r7, #4]
 800e674:	1d1a      	adds	r2, r3, #4
 800e676:	f107 030c 	add.w	r3, r7, #12
 800e67a:	4611      	mov	r1, r2
 800e67c:	4618      	mov	r0, r3
 800e67e:	f001 fb32 	bl	800fce6 <_ZN9__gnu_cxx17__normal_iteratorIPN3jlb4NodeESt6vectorIS2_SaIS2_EEEC1ERKS3_>
 800e682:	68fb      	ldr	r3, [r7, #12]
 800e684:	4618      	mov	r0, r3
 800e686:	3710      	adds	r7, #16
 800e688:	46bd      	mov	sp, r7
 800e68a:	bd80      	pop	{r7, pc}

0800e68c <_ZNSt6vectorIN3jlb4NodeESaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>:
      vector<_Tp, _Alloc>::
 800e68c:	b5b0      	push	{r4, r5, r7, lr}
 800e68e:	b08c      	sub	sp, #48	; 0x30
 800e690:	af00      	add	r7, sp, #0
 800e692:	60f8      	str	r0, [r7, #12]
 800e694:	60b9      	str	r1, [r7, #8]
 800e696:	607a      	str	r2, [r7, #4]
	_M_check_len(size_type(1), "vector::_M_realloc_insert");
 800e698:	4a44      	ldr	r2, [pc, #272]	; (800e7ac <_ZNSt6vectorIN3jlb4NodeESaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x120>)
 800e69a:	2101      	movs	r1, #1
 800e69c:	68f8      	ldr	r0, [r7, #12]
 800e69e:	f001 fb32 	bl	800fd06 <_ZNKSt6vectorIN3jlb4NodeESaIS1_EE12_M_check_lenEjPKc>
 800e6a2:	62f8      	str	r0, [r7, #44]	; 0x2c
      pointer __old_start = this->_M_impl._M_start;
 800e6a4:	68fb      	ldr	r3, [r7, #12]
 800e6a6:	681b      	ldr	r3, [r3, #0]
 800e6a8:	62bb      	str	r3, [r7, #40]	; 0x28
      pointer __old_finish = this->_M_impl._M_finish;
 800e6aa:	68fb      	ldr	r3, [r7, #12]
 800e6ac:	685b      	ldr	r3, [r3, #4]
 800e6ae:	627b      	str	r3, [r7, #36]	; 0x24
      const size_type __elems_before = __position - begin();
 800e6b0:	68f8      	ldr	r0, [r7, #12]
 800e6b2:	f001 fb6f 	bl	800fd94 <_ZNSt6vectorIN3jlb4NodeESaIS1_EE5beginEv>
 800e6b6:	4603      	mov	r3, r0
 800e6b8:	617b      	str	r3, [r7, #20]
 800e6ba:	f107 0214 	add.w	r2, r7, #20
 800e6be:	f107 0308 	add.w	r3, r7, #8
 800e6c2:	4611      	mov	r1, r2
 800e6c4:	4618      	mov	r0, r3
 800e6c6:	f001 fb75 	bl	800fdb4 <_ZN9__gnu_cxxmiIPN3jlb4NodeESt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>
 800e6ca:	4603      	mov	r3, r0
 800e6cc:	623b      	str	r3, [r7, #32]
      pointer __new_start(this->_M_allocate(__len));
 800e6ce:	68fb      	ldr	r3, [r7, #12]
 800e6d0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e6d2:	4618      	mov	r0, r3
 800e6d4:	f001 fb88 	bl	800fde8 <_ZNSt12_Vector_baseIN3jlb4NodeESaIS1_EE11_M_allocateEj>
 800e6d8:	61f8      	str	r0, [r7, #28]
      pointer __new_finish(__new_start);
 800e6da:	69fb      	ldr	r3, [r7, #28]
 800e6dc:	61bb      	str	r3, [r7, #24]
	  _Alloc_traits::construct(this->_M_impl,
 800e6de:	68fc      	ldr	r4, [r7, #12]
				   __new_start + __elems_before,
 800e6e0:	6a3a      	ldr	r2, [r7, #32]
 800e6e2:	4613      	mov	r3, r2
 800e6e4:	005b      	lsls	r3, r3, #1
 800e6e6:	4413      	add	r3, r2
 800e6e8:	00db      	lsls	r3, r3, #3
 800e6ea:	461a      	mov	r2, r3
	  _Alloc_traits::construct(this->_M_impl,
 800e6ec:	69fb      	ldr	r3, [r7, #28]
 800e6ee:	189d      	adds	r5, r3, r2
 800e6f0:	6878      	ldr	r0, [r7, #4]
 800e6f2:	f7ff ff66 	bl	800e5c2 <_ZSt7forwardIN3jlb4NodeEEOT_RNSt16remove_referenceIS2_E4typeE>
 800e6f6:	4603      	mov	r3, r0
 800e6f8:	461a      	mov	r2, r3
 800e6fa:	4629      	mov	r1, r5
 800e6fc:	4620      	mov	r0, r4
 800e6fe:	f7ff ffa2 	bl	800e646 <_ZNSt16allocator_traitsISaIN3jlb4NodeEEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>
	  __new_finish = pointer();
 800e702:	2300      	movs	r3, #0
 800e704:	61bb      	str	r3, [r7, #24]
		(__old_start, __position.base(),
 800e706:	f107 0308 	add.w	r3, r7, #8
 800e70a:	4618      	mov	r0, r3
 800e70c:	f001 fb80 	bl	800fe10 <_ZNK9__gnu_cxx17__normal_iteratorIPN3jlb4NodeESt6vectorIS2_SaIS2_EEE4baseEv>
 800e710:	4603      	mov	r3, r0
 800e712:	681c      	ldr	r4, [r3, #0]
		 __new_start, _M_get_Tp_allocator());
 800e714:	68fb      	ldr	r3, [r7, #12]
 800e716:	4618      	mov	r0, r3
 800e718:	f7fe ff70 	bl	800d5fc <_ZNSt12_Vector_baseIN3jlb4NodeESaIS1_EE19_M_get_Tp_allocatorEv>
 800e71c:	4603      	mov	r3, r0
		(__old_start, __position.base(),
 800e71e:	69fa      	ldr	r2, [r7, #28]
 800e720:	4621      	mov	r1, r4
 800e722:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e724:	f001 fb7f 	bl	800fe26 <_ZSt34__uninitialized_move_if_noexcept_aIPN3jlb4NodeES2_SaIS1_EET0_T_S5_S4_RT1_>
 800e728:	61b8      	str	r0, [r7, #24]
	      ++__new_finish;
 800e72a:	69bb      	ldr	r3, [r7, #24]
 800e72c:	3318      	adds	r3, #24
 800e72e:	61bb      	str	r3, [r7, #24]
		(__position.base(), __old_finish,
 800e730:	f107 0308 	add.w	r3, r7, #8
 800e734:	4618      	mov	r0, r3
 800e736:	f001 fb6b 	bl	800fe10 <_ZNK9__gnu_cxx17__normal_iteratorIPN3jlb4NodeESt6vectorIS2_SaIS2_EEE4baseEv>
 800e73a:	4603      	mov	r3, r0
 800e73c:	681c      	ldr	r4, [r3, #0]
		 __new_finish, _M_get_Tp_allocator());
 800e73e:	68fb      	ldr	r3, [r7, #12]
 800e740:	4618      	mov	r0, r3
 800e742:	f7fe ff5b 	bl	800d5fc <_ZNSt12_Vector_baseIN3jlb4NodeESaIS1_EE19_M_get_Tp_allocatorEv>
 800e746:	4603      	mov	r3, r0
		(__position.base(), __old_finish,
 800e748:	69ba      	ldr	r2, [r7, #24]
 800e74a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800e74c:	4620      	mov	r0, r4
 800e74e:	f001 fb6a 	bl	800fe26 <_ZSt34__uninitialized_move_if_noexcept_aIPN3jlb4NodeES2_SaIS1_EET0_T_S5_S4_RT1_>
 800e752:	61b8      	str	r0, [r7, #24]
	std::_Destroy(__old_start, __old_finish, _M_get_Tp_allocator());
 800e754:	68fb      	ldr	r3, [r7, #12]
 800e756:	4618      	mov	r0, r3
 800e758:	f7fe ff50 	bl	800d5fc <_ZNSt12_Vector_baseIN3jlb4NodeESaIS1_EE19_M_get_Tp_allocatorEv>
 800e75c:	4603      	mov	r3, r0
 800e75e:	461a      	mov	r2, r3
 800e760:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800e762:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e764:	f7fe ff55 	bl	800d612 <_ZSt8_DestroyIPN3jlb4NodeES1_EvT_S3_RSaIT0_E>
      _M_deallocate(__old_start,
 800e768:	68f8      	ldr	r0, [r7, #12]
		    this->_M_impl._M_end_of_storage - __old_start);
 800e76a:	68fb      	ldr	r3, [r7, #12]
 800e76c:	689a      	ldr	r2, [r3, #8]
 800e76e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e770:	1ad3      	subs	r3, r2, r3
 800e772:	10db      	asrs	r3, r3, #3
 800e774:	4a0e      	ldr	r2, [pc, #56]	; (800e7b0 <_ZNSt6vectorIN3jlb4NodeESaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x124>)
 800e776:	fb02 f303 	mul.w	r3, r2, r3
      _M_deallocate(__old_start,
 800e77a:	461a      	mov	r2, r3
 800e77c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800e77e:	f7fe ff2a 	bl	800d5d6 <_ZNSt12_Vector_baseIN3jlb4NodeESaIS1_EE13_M_deallocateEPS1_j>
      this->_M_impl._M_start = __new_start;
 800e782:	68fb      	ldr	r3, [r7, #12]
 800e784:	69fa      	ldr	r2, [r7, #28]
 800e786:	601a      	str	r2, [r3, #0]
      this->_M_impl._M_finish = __new_finish;
 800e788:	68fb      	ldr	r3, [r7, #12]
 800e78a:	69ba      	ldr	r2, [r7, #24]
 800e78c:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 800e78e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e790:	4613      	mov	r3, r2
 800e792:	005b      	lsls	r3, r3, #1
 800e794:	4413      	add	r3, r2
 800e796:	00db      	lsls	r3, r3, #3
 800e798:	461a      	mov	r2, r3
 800e79a:	69fb      	ldr	r3, [r7, #28]
 800e79c:	441a      	add	r2, r3
 800e79e:	68fb      	ldr	r3, [r7, #12]
 800e7a0:	609a      	str	r2, [r3, #8]
    }
 800e7a2:	bf00      	nop
 800e7a4:	3730      	adds	r7, #48	; 0x30
 800e7a6:	46bd      	mov	sp, r7
 800e7a8:	bdb0      	pop	{r4, r5, r7, pc}
 800e7aa:	bf00      	nop
 800e7ac:	08025e60 	.word	0x08025e60
 800e7b0:	aaaaaaab 	.word	0xaaaaaaab

0800e7b4 <_ZNSt6vectorIN3jlb4NodeESaIS1_EE4backEv>:
      back() _GLIBCXX_NOEXCEPT
 800e7b4:	b580      	push	{r7, lr}
 800e7b6:	b084      	sub	sp, #16
 800e7b8:	af00      	add	r7, sp, #0
 800e7ba:	6078      	str	r0, [r7, #4]
	return *(end() - 1);
 800e7bc:	6878      	ldr	r0, [r7, #4]
 800e7be:	f7ff ff54 	bl	800e66a <_ZNSt6vectorIN3jlb4NodeESaIS1_EE3endEv>
 800e7c2:	4603      	mov	r3, r0
 800e7c4:	60fb      	str	r3, [r7, #12]
 800e7c6:	f107 030c 	add.w	r3, r7, #12
 800e7ca:	2101      	movs	r1, #1
 800e7cc:	4618      	mov	r0, r3
 800e7ce:	f001 fb43 	bl	800fe58 <_ZNK9__gnu_cxx17__normal_iteratorIPN3jlb4NodeESt6vectorIS2_SaIS2_EEEmiEi>
 800e7d2:	4603      	mov	r3, r0
 800e7d4:	60bb      	str	r3, [r7, #8]
 800e7d6:	f107 0308 	add.w	r3, r7, #8
 800e7da:	4618      	mov	r0, r3
 800e7dc:	f001 fb58 	bl	800fe90 <_ZNK9__gnu_cxx17__normal_iteratorIPN3jlb4NodeESt6vectorIS2_SaIS2_EEEdeEv>
 800e7e0:	4603      	mov	r3, r0
      }
 800e7e2:	4618      	mov	r0, r3
 800e7e4:	3710      	adds	r7, #16
 800e7e6:	46bd      	mov	sp, r7
 800e7e8:	bd80      	pop	{r7, pc}

0800e7ea <_ZNKSt16initializer_listIcE4sizeEv>:
      size() const noexcept { return _M_len; }
 800e7ea:	b480      	push	{r7}
 800e7ec:	b083      	sub	sp, #12
 800e7ee:	af00      	add	r7, sp, #0
 800e7f0:	6078      	str	r0, [r7, #4]
 800e7f2:	687b      	ldr	r3, [r7, #4]
 800e7f4:	685b      	ldr	r3, [r3, #4]
 800e7f6:	4618      	mov	r0, r3
 800e7f8:	370c      	adds	r7, #12
 800e7fa:	46bd      	mov	sp, r7
 800e7fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e800:	4770      	bx	lr

0800e802 <_ZSt19__iterator_categoryIPKcENSt15iterator_traitsIT_E17iterator_categoryERKS3_>:
    __iterator_category(const _Iter&)
 800e802:	b480      	push	{r7}
 800e804:	b083      	sub	sp, #12
 800e806:	af00      	add	r7, sp, #0
 800e808:	6078      	str	r0, [r7, #4]
    { return typename iterator_traits<_Iter>::iterator_category(); }
 800e80a:	4618      	mov	r0, r3
 800e80c:	370c      	adds	r7, #12
 800e80e:	46bd      	mov	sp, r7
 800e810:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e814:	4770      	bx	lr

0800e816 <_ZSt10__distanceIPKcENSt15iterator_traitsIT_E15difference_typeES3_S3_St26random_access_iterator_tag>:
    __distance(_RandomAccessIterator __first, _RandomAccessIterator __last,
 800e816:	b480      	push	{r7}
 800e818:	b085      	sub	sp, #20
 800e81a:	af00      	add	r7, sp, #0
 800e81c:	60f8      	str	r0, [r7, #12]
 800e81e:	60b9      	str	r1, [r7, #8]
 800e820:	713a      	strb	r2, [r7, #4]
      return __last - __first;
 800e822:	68ba      	ldr	r2, [r7, #8]
 800e824:	68fb      	ldr	r3, [r7, #12]
 800e826:	1ad3      	subs	r3, r2, r3
    }
 800e828:	4618      	mov	r0, r3
 800e82a:	3714      	adds	r7, #20
 800e82c:	46bd      	mov	sp, r7
 800e82e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e832:	4770      	bx	lr

0800e834 <_ZNSt6vectorIcSaIcEE17_S_check_init_lenEjRKS0_>:
      _S_check_init_len(size_type __n, const allocator_type& __a)
 800e834:	b590      	push	{r4, r7, lr}
 800e836:	b085      	sub	sp, #20
 800e838:	af00      	add	r7, sp, #0
 800e83a:	6078      	str	r0, [r7, #4]
 800e83c:	6039      	str	r1, [r7, #0]
	if (__n > _S_max_size(_Tp_alloc_type(__a)))
 800e83e:	f107 030c 	add.w	r3, r7, #12
 800e842:	6839      	ldr	r1, [r7, #0]
 800e844:	4618      	mov	r0, r3
 800e846:	f012 fcaf 	bl	80211a8 <_ZNSaIcEC1ERKS_>
 800e84a:	f107 030c 	add.w	r3, r7, #12
 800e84e:	4618      	mov	r0, r3
 800e850:	f001 fb36 	bl	800fec0 <_ZNSt6vectorIcSaIcEE11_S_max_sizeERKS0_>
 800e854:	4602      	mov	r2, r0
 800e856:	687b      	ldr	r3, [r7, #4]
 800e858:	4293      	cmp	r3, r2
 800e85a:	bf8c      	ite	hi
 800e85c:	2301      	movhi	r3, #1
 800e85e:	2300      	movls	r3, #0
 800e860:	b2dc      	uxtb	r4, r3
 800e862:	f107 030c 	add.w	r3, r7, #12
 800e866:	4618      	mov	r0, r3
 800e868:	f012 fc9f 	bl	80211aa <_ZNSaIcED1Ev>
 800e86c:	2c00      	cmp	r4, #0
 800e86e:	d002      	beq.n	800e876 <_ZNSt6vectorIcSaIcEE17_S_check_init_lenEjRKS0_+0x42>
	  __throw_length_error(
 800e870:	4803      	ldr	r0, [pc, #12]	; (800e880 <_ZNSt6vectorIcSaIcEE17_S_check_init_lenEjRKS0_+0x4c>)
 800e872:	f012 fca1 	bl	80211b8 <_ZSt20__throw_length_errorPKc>
	return __n;
 800e876:	687b      	ldr	r3, [r7, #4]
      }
 800e878:	4618      	mov	r0, r3
 800e87a:	3714      	adds	r7, #20
 800e87c:	46bd      	mov	sp, r7
 800e87e:	bd90      	pop	{r4, r7, pc}
 800e880:	08025e7c 	.word	0x08025e7c

0800e884 <_ZNSt12_Vector_baseIcSaIcEE11_M_allocateEj>:
      _M_allocate(size_t __n)
 800e884:	b580      	push	{r7, lr}
 800e886:	b082      	sub	sp, #8
 800e888:	af00      	add	r7, sp, #0
 800e88a:	6078      	str	r0, [r7, #4]
 800e88c:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 800e88e:	683b      	ldr	r3, [r7, #0]
 800e890:	2b00      	cmp	r3, #0
 800e892:	d006      	beq.n	800e8a2 <_ZNSt12_Vector_baseIcSaIcEE11_M_allocateEj+0x1e>
 800e894:	687b      	ldr	r3, [r7, #4]
 800e896:	6839      	ldr	r1, [r7, #0]
 800e898:	4618      	mov	r0, r3
 800e89a:	f000 fcc9 	bl	800f230 <_ZNSt16allocator_traitsISaIcEE8allocateERS0_j>
 800e89e:	4603      	mov	r3, r0
 800e8a0:	e000      	b.n	800e8a4 <_ZNSt12_Vector_baseIcSaIcEE11_M_allocateEj+0x20>
 800e8a2:	2300      	movs	r3, #0
      }
 800e8a4:	4618      	mov	r0, r3
 800e8a6:	3708      	adds	r7, #8
 800e8a8:	46bd      	mov	sp, r7
 800e8aa:	bd80      	pop	{r7, pc}

0800e8ac <_ZSt22__uninitialized_copy_aIPKcPccET0_T_S4_S3_RSaIT1_E>:
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 800e8ac:	b580      	push	{r7, lr}
 800e8ae:	b084      	sub	sp, #16
 800e8b0:	af00      	add	r7, sp, #0
 800e8b2:	60f8      	str	r0, [r7, #12]
 800e8b4:	60b9      	str	r1, [r7, #8]
 800e8b6:	607a      	str	r2, [r7, #4]
 800e8b8:	603b      	str	r3, [r7, #0]
    { return std::uninitialized_copy(__first, __last, __result); }
 800e8ba:	687a      	ldr	r2, [r7, #4]
 800e8bc:	68b9      	ldr	r1, [r7, #8]
 800e8be:	68f8      	ldr	r0, [r7, #12]
 800e8c0:	f001 fb18 	bl	800fef4 <_ZSt18uninitialized_copyIPKcPcET0_T_S4_S3_>
 800e8c4:	4603      	mov	r3, r0
 800e8c6:	4618      	mov	r0, r3
 800e8c8:	3710      	adds	r7, #16
 800e8ca:	46bd      	mov	sp, r7
 800e8cc:	bd80      	pop	{r7, pc}

0800e8ce <_ZNSt11_Deque_baseIfSaIfEE16_Deque_impl_dataC1Ev>:
	_Deque_impl_data() _GLIBCXX_NOEXCEPT
 800e8ce:	b580      	push	{r7, lr}
 800e8d0:	b082      	sub	sp, #8
 800e8d2:	af00      	add	r7, sp, #0
 800e8d4:	6078      	str	r0, [r7, #4]
	: _M_map(), _M_map_size(), _M_start(), _M_finish()
 800e8d6:	687b      	ldr	r3, [r7, #4]
 800e8d8:	2200      	movs	r2, #0
 800e8da:	601a      	str	r2, [r3, #0]
 800e8dc:	687b      	ldr	r3, [r7, #4]
 800e8de:	2200      	movs	r2, #0
 800e8e0:	605a      	str	r2, [r3, #4]
 800e8e2:	687b      	ldr	r3, [r7, #4]
 800e8e4:	3308      	adds	r3, #8
 800e8e6:	4618      	mov	r0, r3
 800e8e8:	f001 fb16 	bl	800ff18 <_ZNSt15_Deque_iteratorIfRfPfEC1Ev>
 800e8ec:	687b      	ldr	r3, [r7, #4]
 800e8ee:	3318      	adds	r3, #24
 800e8f0:	4618      	mov	r0, r3
 800e8f2:	f001 fb11 	bl	800ff18 <_ZNSt15_Deque_iteratorIfRfPfEC1Ev>
	{ }
 800e8f6:	687b      	ldr	r3, [r7, #4]
 800e8f8:	4618      	mov	r0, r3
 800e8fa:	3708      	adds	r7, #8
 800e8fc:	46bd      	mov	sp, r7
 800e8fe:	bd80      	pop	{r7, pc}

0800e900 <_ZNSt11_Deque_baseIfSaIfEE15_M_allocate_mapEj>:
      _M_allocate_map(size_t __n)
 800e900:	b590      	push	{r4, r7, lr}
 800e902:	b085      	sub	sp, #20
 800e904:	af00      	add	r7, sp, #0
 800e906:	6078      	str	r0, [r7, #4]
 800e908:	6039      	str	r1, [r7, #0]
	_Map_alloc_type __map_alloc = _M_get_map_allocator();
 800e90a:	f107 030c 	add.w	r3, r7, #12
 800e90e:	6879      	ldr	r1, [r7, #4]
 800e910:	4618      	mov	r0, r3
 800e912:	f000 f859 	bl	800e9c8 <_ZNKSt11_Deque_baseIfSaIfEE20_M_get_map_allocatorEv>
	return _Map_alloc_traits::allocate(__map_alloc, __n);
 800e916:	f107 030c 	add.w	r3, r7, #12
 800e91a:	6839      	ldr	r1, [r7, #0]
 800e91c:	4618      	mov	r0, r3
 800e91e:	f001 fb12 	bl	800ff46 <_ZNSt16allocator_traitsISaIPfEE8allocateERS1_j>
 800e922:	4604      	mov	r4, r0
 800e924:	bf00      	nop
      }
 800e926:	f107 030c 	add.w	r3, r7, #12
 800e92a:	4618      	mov	r0, r3
 800e92c:	f000 f85d 	bl	800e9ea <_ZNSaIPfED1Ev>
	return _Map_alloc_traits::allocate(__map_alloc, __n);
 800e930:	4623      	mov	r3, r4
      }
 800e932:	4618      	mov	r0, r3
 800e934:	3714      	adds	r7, #20
 800e936:	46bd      	mov	sp, r7
 800e938:	bd90      	pop	{r4, r7, pc}

0800e93a <_ZNSt11_Deque_baseIfSaIfEE15_M_create_nodesEPPfS3_>:
    _Deque_base<_Tp, _Alloc>::
 800e93a:	b580      	push	{r7, lr}
 800e93c:	b086      	sub	sp, #24
 800e93e:	af00      	add	r7, sp, #0
 800e940:	60f8      	str	r0, [r7, #12]
 800e942:	60b9      	str	r1, [r7, #8]
 800e944:	607a      	str	r2, [r7, #4]
	  for (__cur = __nstart; __cur < __nfinish; ++__cur)
 800e946:	68bb      	ldr	r3, [r7, #8]
 800e948:	617b      	str	r3, [r7, #20]
 800e94a:	e008      	b.n	800e95e <_ZNSt11_Deque_baseIfSaIfEE15_M_create_nodesEPPfS3_+0x24>
	    *__cur = this->_M_allocate_node();
 800e94c:	68f8      	ldr	r0, [r7, #12]
 800e94e:	f000 f8a2 	bl	800ea96 <_ZNSt11_Deque_baseIfSaIfEE16_M_allocate_nodeEv>
 800e952:	4602      	mov	r2, r0
 800e954:	697b      	ldr	r3, [r7, #20]
 800e956:	601a      	str	r2, [r3, #0]
	  for (__cur = __nstart; __cur < __nfinish; ++__cur)
 800e958:	697b      	ldr	r3, [r7, #20]
 800e95a:	3304      	adds	r3, #4
 800e95c:	617b      	str	r3, [r7, #20]
 800e95e:	697a      	ldr	r2, [r7, #20]
 800e960:	687b      	ldr	r3, [r7, #4]
 800e962:	429a      	cmp	r2, r3
 800e964:	d3f2      	bcc.n	800e94c <_ZNSt11_Deque_baseIfSaIfEE15_M_create_nodesEPPfS3_+0x12>
    }
 800e966:	bf00      	nop
 800e968:	bf00      	nop
 800e96a:	3718      	adds	r7, #24
 800e96c:	46bd      	mov	sp, r7
 800e96e:	bd80      	pop	{r7, pc}

0800e970 <_ZNSt15_Deque_iteratorIfRfPfE11_M_set_nodeEPS1_>:
      _M_set_node(_Map_pointer __new_node) _GLIBCXX_NOEXCEPT
 800e970:	b590      	push	{r4, r7, lr}
 800e972:	b083      	sub	sp, #12
 800e974:	af00      	add	r7, sp, #0
 800e976:	6078      	str	r0, [r7, #4]
 800e978:	6039      	str	r1, [r7, #0]
	_M_node = __new_node;
 800e97a:	687b      	ldr	r3, [r7, #4]
 800e97c:	683a      	ldr	r2, [r7, #0]
 800e97e:	60da      	str	r2, [r3, #12]
	_M_first = *__new_node;
 800e980:	683b      	ldr	r3, [r7, #0]
 800e982:	681a      	ldr	r2, [r3, #0]
 800e984:	687b      	ldr	r3, [r7, #4]
 800e986:	605a      	str	r2, [r3, #4]
	_M_last = _M_first + difference_type(_S_buffer_size());
 800e988:	687b      	ldr	r3, [r7, #4]
 800e98a:	685c      	ldr	r4, [r3, #4]
 800e98c:	f000 f895 	bl	800eaba <_ZNSt15_Deque_iteratorIfRfPfE14_S_buffer_sizeEv>
 800e990:	4603      	mov	r3, r0
 800e992:	009b      	lsls	r3, r3, #2
 800e994:	18e2      	adds	r2, r4, r3
 800e996:	687b      	ldr	r3, [r7, #4]
 800e998:	609a      	str	r2, [r3, #8]
      }
 800e99a:	bf00      	nop
 800e99c:	370c      	adds	r7, #12
 800e99e:	46bd      	mov	sp, r7
 800e9a0:	bd90      	pop	{r4, r7, pc}

0800e9a2 <_ZNSt11_Deque_baseIfSaIfEE18_M_deallocate_nodeEPf>:
      _M_deallocate_node(_Ptr __p) _GLIBCXX_NOEXCEPT
 800e9a2:	b590      	push	{r4, r7, lr}
 800e9a4:	b083      	sub	sp, #12
 800e9a6:	af00      	add	r7, sp, #0
 800e9a8:	6078      	str	r0, [r7, #4]
 800e9aa:	6039      	str	r1, [r7, #0]
	_Traits::deallocate(_M_impl, __p, __deque_buf_size(sizeof(_Tp)));
 800e9ac:	687c      	ldr	r4, [r7, #4]
 800e9ae:	2004      	movs	r0, #4
 800e9b0:	f7fa f87b 	bl	8008aaa <_ZSt16__deque_buf_sizej>
 800e9b4:	4603      	mov	r3, r0
 800e9b6:	461a      	mov	r2, r3
 800e9b8:	6839      	ldr	r1, [r7, #0]
 800e9ba:	4620      	mov	r0, r4
 800e9bc:	f7f4 ff6f 	bl	800389e <_ZNSt16allocator_traitsISaIfEE10deallocateERS0_Pfj>
      }
 800e9c0:	bf00      	nop
 800e9c2:	370c      	adds	r7, #12
 800e9c4:	46bd      	mov	sp, r7
 800e9c6:	bd90      	pop	{r4, r7, pc}

0800e9c8 <_ZNKSt11_Deque_baseIfSaIfEE20_M_get_map_allocatorEv>:
      _M_get_map_allocator() const _GLIBCXX_NOEXCEPT
 800e9c8:	b580      	push	{r7, lr}
 800e9ca:	b082      	sub	sp, #8
 800e9cc:	af00      	add	r7, sp, #0
 800e9ce:	6078      	str	r0, [r7, #4]
 800e9d0:	6039      	str	r1, [r7, #0]
      { return _Map_alloc_type(_M_get_Tp_allocator()); }
 800e9d2:	6838      	ldr	r0, [r7, #0]
 800e9d4:	f001 fad7 	bl	800ff86 <_ZNKSt11_Deque_baseIfSaIfEE19_M_get_Tp_allocatorEv>
 800e9d8:	4603      	mov	r3, r0
 800e9da:	4619      	mov	r1, r3
 800e9dc:	6878      	ldr	r0, [r7, #4]
 800e9de:	f001 fadd 	bl	800ff9c <_ZNSaIPfEC1IfEERKSaIT_E>
 800e9e2:	6878      	ldr	r0, [r7, #4]
 800e9e4:	3708      	adds	r7, #8
 800e9e6:	46bd      	mov	sp, r7
 800e9e8:	bd80      	pop	{r7, pc}

0800e9ea <_ZNSaIPfED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 800e9ea:	b480      	push	{r7}
 800e9ec:	b083      	sub	sp, #12
 800e9ee:	af00      	add	r7, sp, #0
 800e9f0:	6078      	str	r0, [r7, #4]
 800e9f2:	687b      	ldr	r3, [r7, #4]
 800e9f4:	4618      	mov	r0, r3
 800e9f6:	370c      	adds	r7, #12
 800e9f8:	46bd      	mov	sp, r7
 800e9fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9fe:	4770      	bx	lr

0800ea00 <_ZNSt16allocator_traitsISaIPfEE10deallocateERS1_PS0_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 800ea00:	b580      	push	{r7, lr}
 800ea02:	b088      	sub	sp, #32
 800ea04:	af00      	add	r7, sp, #0
 800ea06:	60f8      	str	r0, [r7, #12]
 800ea08:	60b9      	str	r1, [r7, #8]
 800ea0a:	607a      	str	r2, [r7, #4]
 800ea0c:	68fb      	ldr	r3, [r7, #12]
 800ea0e:	61fb      	str	r3, [r7, #28]
 800ea10:	68bb      	ldr	r3, [r7, #8]
 800ea12:	61bb      	str	r3, [r7, #24]
 800ea14:	687b      	ldr	r3, [r7, #4]
 800ea16:	617b      	str	r3, [r7, #20]
	if (std::is_constant_evaluated())
 800ea18:	f7f4 f878 	bl	8002b0c <_ZSt21is_constant_evaluatedv>
 800ea1c:	4603      	mov	r3, r0
 800ea1e:	2b00      	cmp	r3, #0
 800ea20:	d003      	beq.n	800ea2a <_ZNSt16allocator_traitsISaIPfEE10deallocateERS1_PS0_j+0x2a>
	    ::operator delete(__p);
 800ea22:	69b8      	ldr	r0, [r7, #24]
 800ea24:	f012 fbaa 	bl	802117c <_ZdlPv>
	    return;
 800ea28:	e005      	b.n	800ea36 <_ZNSt16allocator_traitsISaIPfEE10deallocateERS1_PS0_j+0x36>
	__allocator_base<_Tp>::deallocate(__p, __n);
 800ea2a:	697a      	ldr	r2, [r7, #20]
 800ea2c:	69b9      	ldr	r1, [r7, #24]
 800ea2e:	69f8      	ldr	r0, [r7, #28]
 800ea30:	f002 f9bd 	bl	8010dae <_ZN9__gnu_cxx13new_allocatorIPfE10deallocateEPS1_j>
      { __a.deallocate(__p, __n); }
 800ea34:	bf00      	nop
 800ea36:	bf00      	nop
 800ea38:	3720      	adds	r7, #32
 800ea3a:	46bd      	mov	sp, r7
 800ea3c:	bd80      	pop	{r7, pc}

0800ea3e <_ZNKSt5dequeIfSaIfEE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 800ea3e:	b580      	push	{r7, lr}
 800ea40:	b082      	sub	sp, #8
 800ea42:	af00      	add	r7, sp, #0
 800ea44:	6078      	str	r0, [r7, #4]
      { return _S_max_size(_M_get_Tp_allocator()); }
 800ea46:	687b      	ldr	r3, [r7, #4]
 800ea48:	4618      	mov	r0, r3
 800ea4a:	f001 fa9c 	bl	800ff86 <_ZNKSt11_Deque_baseIfSaIfEE19_M_get_Tp_allocatorEv>
 800ea4e:	4603      	mov	r3, r0
 800ea50:	4618      	mov	r0, r3
 800ea52:	f001 fab0 	bl	800ffb6 <_ZNSt5dequeIfSaIfEE11_S_max_sizeERKS0_>
 800ea56:	4603      	mov	r3, r0
 800ea58:	4618      	mov	r0, r3
 800ea5a:	3708      	adds	r7, #8
 800ea5c:	46bd      	mov	sp, r7
 800ea5e:	bd80      	pop	{r7, pc}

0800ea60 <_ZNSt5dequeIfSaIfEE22_M_reserve_map_at_backEj>:
       *  Makes sure the _M_map has space for new nodes.  Does not
       *  actually add the nodes.  Can invalidate _M_map pointers.
       *  (And consequently, %deque iterators.)
       */
      void
      _M_reserve_map_at_back(size_type __nodes_to_add = 1)
 800ea60:	b580      	push	{r7, lr}
 800ea62:	b082      	sub	sp, #8
 800ea64:	af00      	add	r7, sp, #0
 800ea66:	6078      	str	r0, [r7, #4]
 800ea68:	6039      	str	r1, [r7, #0]
      {
	if (__nodes_to_add + 1 > this->_M_impl._M_map_size
 800ea6a:	683b      	ldr	r3, [r7, #0]
 800ea6c:	1c5a      	adds	r2, r3, #1
 800ea6e:	687b      	ldr	r3, [r7, #4]
 800ea70:	685b      	ldr	r3, [r3, #4]
	    - (this->_M_impl._M_finish._M_node - this->_M_impl._M_map))
 800ea72:	6879      	ldr	r1, [r7, #4]
 800ea74:	6a48      	ldr	r0, [r1, #36]	; 0x24
 800ea76:	6879      	ldr	r1, [r7, #4]
 800ea78:	6809      	ldr	r1, [r1, #0]
 800ea7a:	1a41      	subs	r1, r0, r1
 800ea7c:	1089      	asrs	r1, r1, #2
 800ea7e:	1a5b      	subs	r3, r3, r1
	if (__nodes_to_add + 1 > this->_M_impl._M_map_size
 800ea80:	429a      	cmp	r2, r3
 800ea82:	d904      	bls.n	800ea8e <_ZNSt5dequeIfSaIfEE22_M_reserve_map_at_backEj+0x2e>
	  _M_reallocate_map(__nodes_to_add, false);
 800ea84:	2200      	movs	r2, #0
 800ea86:	6839      	ldr	r1, [r7, #0]
 800ea88:	6878      	ldr	r0, [r7, #4]
 800ea8a:	f001 fade 	bl	801004a <_ZNSt5dequeIfSaIfEE17_M_reallocate_mapEjb>
      }
 800ea8e:	bf00      	nop
 800ea90:	3708      	adds	r7, #8
 800ea92:	46bd      	mov	sp, r7
 800ea94:	bd80      	pop	{r7, pc}

0800ea96 <_ZNSt11_Deque_baseIfSaIfEE16_M_allocate_nodeEv>:
      _M_allocate_node()
 800ea96:	b590      	push	{r4, r7, lr}
 800ea98:	b083      	sub	sp, #12
 800ea9a:	af00      	add	r7, sp, #0
 800ea9c:	6078      	str	r0, [r7, #4]
	return _Traits::allocate(_M_impl, __deque_buf_size(sizeof(_Tp)));
 800ea9e:	687c      	ldr	r4, [r7, #4]
 800eaa0:	2004      	movs	r0, #4
 800eaa2:	f7fa f802 	bl	8008aaa <_ZSt16__deque_buf_sizej>
 800eaa6:	4603      	mov	r3, r0
 800eaa8:	4619      	mov	r1, r3
 800eaaa:	4620      	mov	r0, r4
 800eaac:	f7f5 f83f 	bl	8003b2e <_ZNSt16allocator_traitsISaIfEE8allocateERS0_j>
 800eab0:	4603      	mov	r3, r0
      }
 800eab2:	4618      	mov	r0, r3
 800eab4:	370c      	adds	r7, #12
 800eab6:	46bd      	mov	sp, r7
 800eab8:	bd90      	pop	{r4, r7, pc}

0800eaba <_ZNSt15_Deque_iteratorIfRfPfE14_S_buffer_sizeEv>:
      static size_t _S_buffer_size() _GLIBCXX_NOEXCEPT
 800eaba:	b580      	push	{r7, lr}
 800eabc:	af00      	add	r7, sp, #0
      { return __deque_buf_size(sizeof(_Tp)); }
 800eabe:	2004      	movs	r0, #4
 800eac0:	f7f9 fff3 	bl	8008aaa <_ZSt16__deque_buf_sizej>
 800eac4:	4603      	mov	r3, r0
 800eac6:	4618      	mov	r0, r3
 800eac8:	bd80      	pop	{r7, pc}

0800eaca <_ZNKSt16initializer_listIfE4sizeEv>:
 800eaca:	b480      	push	{r7}
 800eacc:	b083      	sub	sp, #12
 800eace:	af00      	add	r7, sp, #0
 800ead0:	6078      	str	r0, [r7, #4]
 800ead2:	687b      	ldr	r3, [r7, #4]
 800ead4:	685b      	ldr	r3, [r3, #4]
 800ead6:	4618      	mov	r0, r3
 800ead8:	370c      	adds	r7, #12
 800eada:	46bd      	mov	sp, r7
 800eadc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eae0:	4770      	bx	lr

0800eae2 <_ZNK9__gnu_cxx5__ops15_Iter_less_iterclIPKfS4_EEbT_T0_>:
      operator()(_Iterator1 __it1, _Iterator2 __it2) const
 800eae2:	b480      	push	{r7}
 800eae4:	b085      	sub	sp, #20
 800eae6:	af00      	add	r7, sp, #0
 800eae8:	60f8      	str	r0, [r7, #12]
 800eaea:	60b9      	str	r1, [r7, #8]
 800eaec:	607a      	str	r2, [r7, #4]
      { return *__it1 < *__it2; }
 800eaee:	68bb      	ldr	r3, [r7, #8]
 800eaf0:	ed93 7a00 	vldr	s14, [r3]
 800eaf4:	687b      	ldr	r3, [r7, #4]
 800eaf6:	edd3 7a00 	vldr	s15, [r3]
 800eafa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800eafe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eb02:	bf4c      	ite	mi
 800eb04:	2301      	movmi	r3, #1
 800eb06:	2300      	movpl	r3, #0
 800eb08:	b2db      	uxtb	r3, r3
 800eb0a:	4618      	mov	r0, r3
 800eb0c:	3714      	adds	r7, #20
 800eb0e:	46bd      	mov	sp, r7
 800eb10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb14:	4770      	bx	lr

0800eb16 <_ZSt13__min_elementIPKfN9__gnu_cxx5__ops15_Iter_less_iterEET_S5_S5_T0_>:
    __min_element(_ForwardIterator __first, _ForwardIterator __last,
 800eb16:	b580      	push	{r7, lr}
 800eb18:	b086      	sub	sp, #24
 800eb1a:	af00      	add	r7, sp, #0
 800eb1c:	60f8      	str	r0, [r7, #12]
 800eb1e:	60b9      	str	r1, [r7, #8]
 800eb20:	713a      	strb	r2, [r7, #4]
      if (__first == __last)
 800eb22:	68fa      	ldr	r2, [r7, #12]
 800eb24:	68bb      	ldr	r3, [r7, #8]
 800eb26:	429a      	cmp	r2, r3
 800eb28:	d101      	bne.n	800eb2e <_ZSt13__min_elementIPKfN9__gnu_cxx5__ops15_Iter_less_iterEET_S5_S5_T0_+0x18>
	return __first;
 800eb2a:	68fb      	ldr	r3, [r7, #12]
 800eb2c:	e01a      	b.n	800eb64 <_ZSt13__min_elementIPKfN9__gnu_cxx5__ops15_Iter_less_iterEET_S5_S5_T0_+0x4e>
      _ForwardIterator __result = __first;
 800eb2e:	68fb      	ldr	r3, [r7, #12]
 800eb30:	617b      	str	r3, [r7, #20]
      while (++__first != __last)
 800eb32:	e00a      	b.n	800eb4a <_ZSt13__min_elementIPKfN9__gnu_cxx5__ops15_Iter_less_iterEET_S5_S5_T0_+0x34>
	if (__comp(__first, __result))
 800eb34:	1d3b      	adds	r3, r7, #4
 800eb36:	697a      	ldr	r2, [r7, #20]
 800eb38:	68f9      	ldr	r1, [r7, #12]
 800eb3a:	4618      	mov	r0, r3
 800eb3c:	f7ff ffd1 	bl	800eae2 <_ZNK9__gnu_cxx5__ops15_Iter_less_iterclIPKfS4_EEbT_T0_>
 800eb40:	4603      	mov	r3, r0
 800eb42:	2b00      	cmp	r3, #0
 800eb44:	d001      	beq.n	800eb4a <_ZSt13__min_elementIPKfN9__gnu_cxx5__ops15_Iter_less_iterEET_S5_S5_T0_+0x34>
	  __result = __first;
 800eb46:	68fb      	ldr	r3, [r7, #12]
 800eb48:	617b      	str	r3, [r7, #20]
      while (++__first != __last)
 800eb4a:	68fb      	ldr	r3, [r7, #12]
 800eb4c:	3304      	adds	r3, #4
 800eb4e:	60fb      	str	r3, [r7, #12]
 800eb50:	68fa      	ldr	r2, [r7, #12]
 800eb52:	68bb      	ldr	r3, [r7, #8]
 800eb54:	429a      	cmp	r2, r3
 800eb56:	bf14      	ite	ne
 800eb58:	2301      	movne	r3, #1
 800eb5a:	2300      	moveq	r3, #0
 800eb5c:	b2db      	uxtb	r3, r3
 800eb5e:	2b00      	cmp	r3, #0
 800eb60:	d1e8      	bne.n	800eb34 <_ZSt13__min_elementIPKfN9__gnu_cxx5__ops15_Iter_less_iterEET_S5_S5_T0_+0x1e>
      return __result;
 800eb62:	697b      	ldr	r3, [r7, #20]
    }
 800eb64:	4618      	mov	r0, r3
 800eb66:	3718      	adds	r7, #24
 800eb68:	46bd      	mov	sp, r7
 800eb6a:	bd80      	pop	{r7, pc}

0800eb6c <_ZN9__gnu_cxx5__ops16_Iter_equals_valIKcEC1ERS2_>:
      _Iter_equals_val(_Value& __value)
 800eb6c:	b480      	push	{r7}
 800eb6e:	b083      	sub	sp, #12
 800eb70:	af00      	add	r7, sp, #0
 800eb72:	6078      	str	r0, [r7, #4]
 800eb74:	6039      	str	r1, [r7, #0]
	: _M_value(__value)
 800eb76:	687b      	ldr	r3, [r7, #4]
 800eb78:	683a      	ldr	r2, [r7, #0]
 800eb7a:	601a      	str	r2, [r3, #0]
      { }
 800eb7c:	687b      	ldr	r3, [r7, #4]
 800eb7e:	4618      	mov	r0, r3
 800eb80:	370c      	adds	r7, #12
 800eb82:	46bd      	mov	sp, r7
 800eb84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb88:	4770      	bx	lr

0800eb8a <_ZSt19__iterator_categoryIN9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEEENSt15iterator_traitsIT_E17iterator_categoryERKS8_>:
    __iterator_category(const _Iter&)
 800eb8a:	b480      	push	{r7}
 800eb8c:	b083      	sub	sp, #12
 800eb8e:	af00      	add	r7, sp, #0
 800eb90:	6078      	str	r0, [r7, #4]
    { return typename iterator_traits<_Iter>::iterator_category(); }
 800eb92:	4618      	mov	r0, r3
 800eb94:	370c      	adds	r7, #12
 800eb96:	46bd      	mov	sp, r7
 800eb98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb9c:	4770      	bx	lr

0800eb9e <_ZN9__gnu_cxxmiIPcSt6vectorIcSaIcEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS8_SB_>:
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
 800eb9e:	b590      	push	{r4, r7, lr}
 800eba0:	b083      	sub	sp, #12
 800eba2:	af00      	add	r7, sp, #0
 800eba4:	6078      	str	r0, [r7, #4]
 800eba6:	6039      	str	r1, [r7, #0]
    { return __lhs.base() - __rhs.base(); }
 800eba8:	6878      	ldr	r0, [r7, #4]
 800ebaa:	f7fa fca2 	bl	80094f2 <_ZNK9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEE4baseEv>
 800ebae:	4603      	mov	r3, r0
 800ebb0:	681c      	ldr	r4, [r3, #0]
 800ebb2:	6838      	ldr	r0, [r7, #0]
 800ebb4:	f7fa fc9d 	bl	80094f2 <_ZNK9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEE4baseEv>
 800ebb8:	4603      	mov	r3, r0
 800ebba:	681b      	ldr	r3, [r3, #0]
 800ebbc:	1ae3      	subs	r3, r4, r3
 800ebbe:	4618      	mov	r0, r3
 800ebc0:	370c      	adds	r7, #12
 800ebc2:	46bd      	mov	sp, r7
 800ebc4:	bd90      	pop	{r4, r7, pc}

0800ebc6 <_ZNK9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 800ebc6:	b480      	push	{r7}
 800ebc8:	b083      	sub	sp, #12
 800ebca:	af00      	add	r7, sp, #0
 800ebcc:	6078      	str	r0, [r7, #4]
      { return *_M_current; }
 800ebce:	687b      	ldr	r3, [r7, #4]
 800ebd0:	681b      	ldr	r3, [r3, #0]
 800ebd2:	4618      	mov	r0, r3
 800ebd4:	370c      	adds	r7, #12
 800ebd6:	46bd      	mov	sp, r7
 800ebd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebdc:	4770      	bx	lr

0800ebde <_ZN9__gnu_cxx5__ops16_Iter_equals_valIKcEclINS_17__normal_iteratorIPcSt6vectorIcSaIcEEEEEEbT_>:
	operator()(_Iterator __it)
 800ebde:	b580      	push	{r7, lr}
 800ebe0:	b082      	sub	sp, #8
 800ebe2:	af00      	add	r7, sp, #0
 800ebe4:	6078      	str	r0, [r7, #4]
 800ebe6:	6039      	str	r1, [r7, #0]
	{ return *__it == _M_value; }
 800ebe8:	463b      	mov	r3, r7
 800ebea:	4618      	mov	r0, r3
 800ebec:	f7ff ffeb 	bl	800ebc6 <_ZNK9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEdeEv>
 800ebf0:	4603      	mov	r3, r0
 800ebf2:	781a      	ldrb	r2, [r3, #0]
 800ebf4:	687b      	ldr	r3, [r7, #4]
 800ebf6:	681b      	ldr	r3, [r3, #0]
 800ebf8:	781b      	ldrb	r3, [r3, #0]
 800ebfa:	429a      	cmp	r2, r3
 800ebfc:	bf0c      	ite	eq
 800ebfe:	2301      	moveq	r3, #1
 800ec00:	2300      	movne	r3, #0
 800ec02:	b2db      	uxtb	r3, r3
 800ec04:	4618      	mov	r0, r3
 800ec06:	3708      	adds	r7, #8
 800ec08:	46bd      	mov	sp, r7
 800ec0a:	bd80      	pop	{r7, pc}

0800ec0c <_ZN9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 800ec0c:	b480      	push	{r7}
 800ec0e:	b083      	sub	sp, #12
 800ec10:	af00      	add	r7, sp, #0
 800ec12:	6078      	str	r0, [r7, #4]
	++_M_current;
 800ec14:	687b      	ldr	r3, [r7, #4]
 800ec16:	681b      	ldr	r3, [r3, #0]
 800ec18:	1c5a      	adds	r2, r3, #1
 800ec1a:	687b      	ldr	r3, [r7, #4]
 800ec1c:	601a      	str	r2, [r3, #0]
	return *this;
 800ec1e:	687b      	ldr	r3, [r7, #4]
      }
 800ec20:	4618      	mov	r0, r3
 800ec22:	370c      	adds	r7, #12
 800ec24:	46bd      	mov	sp, r7
 800ec26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec2a:	4770      	bx	lr

0800ec2c <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEENS0_5__ops16_Iter_equals_valIKcEEET_SB_SB_T0_St26random_access_iterator_tag>:
    __find_if(_RandomAccessIterator __first, _RandomAccessIterator __last,
 800ec2c:	b580      	push	{r7, lr}
 800ec2e:	b086      	sub	sp, #24
 800ec30:	af00      	add	r7, sp, #0
 800ec32:	60f8      	str	r0, [r7, #12]
 800ec34:	60b9      	str	r1, [r7, #8]
 800ec36:	607a      	str	r2, [r7, #4]
 800ec38:	703b      	strb	r3, [r7, #0]
	__trip_count = (__last - __first) >> 2;
 800ec3a:	f107 020c 	add.w	r2, r7, #12
 800ec3e:	f107 0308 	add.w	r3, r7, #8
 800ec42:	4611      	mov	r1, r2
 800ec44:	4618      	mov	r0, r3
 800ec46:	f7ff ffaa 	bl	800eb9e <_ZN9__gnu_cxxmiIPcSt6vectorIcSaIcEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS8_SB_>
 800ec4a:	4603      	mov	r3, r0
 800ec4c:	109b      	asrs	r3, r3, #2
 800ec4e:	617b      	str	r3, [r7, #20]
      for (; __trip_count > 0; --__trip_count)
 800ec50:	e03e      	b.n	800ecd0 <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEENS0_5__ops16_Iter_equals_valIKcEEET_SB_SB_T0_St26random_access_iterator_tag+0xa4>
	  if (__pred(__first))
 800ec52:	1d3b      	adds	r3, r7, #4
 800ec54:	68f9      	ldr	r1, [r7, #12]
 800ec56:	4618      	mov	r0, r3
 800ec58:	f7ff ffc1 	bl	800ebde <_ZN9__gnu_cxx5__ops16_Iter_equals_valIKcEclINS_17__normal_iteratorIPcSt6vectorIcSaIcEEEEEEbT_>
 800ec5c:	4603      	mov	r3, r0
 800ec5e:	2b00      	cmp	r3, #0
 800ec60:	d001      	beq.n	800ec66 <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEENS0_5__ops16_Iter_equals_valIKcEEET_SB_SB_T0_St26random_access_iterator_tag+0x3a>
	    return __first;
 800ec62:	68fb      	ldr	r3, [r7, #12]
 800ec64:	e077      	b.n	800ed56 <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEENS0_5__ops16_Iter_equals_valIKcEEET_SB_SB_T0_St26random_access_iterator_tag+0x12a>
	  ++__first;
 800ec66:	f107 030c 	add.w	r3, r7, #12
 800ec6a:	4618      	mov	r0, r3
 800ec6c:	f7ff ffce 	bl	800ec0c <_ZN9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEppEv>
	  if (__pred(__first))
 800ec70:	1d3b      	adds	r3, r7, #4
 800ec72:	68f9      	ldr	r1, [r7, #12]
 800ec74:	4618      	mov	r0, r3
 800ec76:	f7ff ffb2 	bl	800ebde <_ZN9__gnu_cxx5__ops16_Iter_equals_valIKcEclINS_17__normal_iteratorIPcSt6vectorIcSaIcEEEEEEbT_>
 800ec7a:	4603      	mov	r3, r0
 800ec7c:	2b00      	cmp	r3, #0
 800ec7e:	d001      	beq.n	800ec84 <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEENS0_5__ops16_Iter_equals_valIKcEEET_SB_SB_T0_St26random_access_iterator_tag+0x58>
	    return __first;
 800ec80:	68fb      	ldr	r3, [r7, #12]
 800ec82:	e068      	b.n	800ed56 <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEENS0_5__ops16_Iter_equals_valIKcEEET_SB_SB_T0_St26random_access_iterator_tag+0x12a>
	  ++__first;
 800ec84:	f107 030c 	add.w	r3, r7, #12
 800ec88:	4618      	mov	r0, r3
 800ec8a:	f7ff ffbf 	bl	800ec0c <_ZN9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEppEv>
	  if (__pred(__first))
 800ec8e:	1d3b      	adds	r3, r7, #4
 800ec90:	68f9      	ldr	r1, [r7, #12]
 800ec92:	4618      	mov	r0, r3
 800ec94:	f7ff ffa3 	bl	800ebde <_ZN9__gnu_cxx5__ops16_Iter_equals_valIKcEclINS_17__normal_iteratorIPcSt6vectorIcSaIcEEEEEEbT_>
 800ec98:	4603      	mov	r3, r0
 800ec9a:	2b00      	cmp	r3, #0
 800ec9c:	d001      	beq.n	800eca2 <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEENS0_5__ops16_Iter_equals_valIKcEEET_SB_SB_T0_St26random_access_iterator_tag+0x76>
	    return __first;
 800ec9e:	68fb      	ldr	r3, [r7, #12]
 800eca0:	e059      	b.n	800ed56 <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEENS0_5__ops16_Iter_equals_valIKcEEET_SB_SB_T0_St26random_access_iterator_tag+0x12a>
	  ++__first;
 800eca2:	f107 030c 	add.w	r3, r7, #12
 800eca6:	4618      	mov	r0, r3
 800eca8:	f7ff ffb0 	bl	800ec0c <_ZN9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEppEv>
	  if (__pred(__first))
 800ecac:	1d3b      	adds	r3, r7, #4
 800ecae:	68f9      	ldr	r1, [r7, #12]
 800ecb0:	4618      	mov	r0, r3
 800ecb2:	f7ff ff94 	bl	800ebde <_ZN9__gnu_cxx5__ops16_Iter_equals_valIKcEclINS_17__normal_iteratorIPcSt6vectorIcSaIcEEEEEEbT_>
 800ecb6:	4603      	mov	r3, r0
 800ecb8:	2b00      	cmp	r3, #0
 800ecba:	d001      	beq.n	800ecc0 <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEENS0_5__ops16_Iter_equals_valIKcEEET_SB_SB_T0_St26random_access_iterator_tag+0x94>
	    return __first;
 800ecbc:	68fb      	ldr	r3, [r7, #12]
 800ecbe:	e04a      	b.n	800ed56 <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEENS0_5__ops16_Iter_equals_valIKcEEET_SB_SB_T0_St26random_access_iterator_tag+0x12a>
	  ++__first;
 800ecc0:	f107 030c 	add.w	r3, r7, #12
 800ecc4:	4618      	mov	r0, r3
 800ecc6:	f7ff ffa1 	bl	800ec0c <_ZN9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEppEv>
      for (; __trip_count > 0; --__trip_count)
 800ecca:	697b      	ldr	r3, [r7, #20]
 800eccc:	3b01      	subs	r3, #1
 800ecce:	617b      	str	r3, [r7, #20]
 800ecd0:	697b      	ldr	r3, [r7, #20]
 800ecd2:	2b00      	cmp	r3, #0
 800ecd4:	dcbd      	bgt.n	800ec52 <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEENS0_5__ops16_Iter_equals_valIKcEEET_SB_SB_T0_St26random_access_iterator_tag+0x26>
      switch (__last - __first)
 800ecd6:	f107 020c 	add.w	r2, r7, #12
 800ecda:	f107 0308 	add.w	r3, r7, #8
 800ecde:	4611      	mov	r1, r2
 800ece0:	4618      	mov	r0, r3
 800ece2:	f7ff ff5c 	bl	800eb9e <_ZN9__gnu_cxxmiIPcSt6vectorIcSaIcEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS8_SB_>
 800ece6:	4603      	mov	r3, r0
 800ece8:	2b03      	cmp	r3, #3
 800ecea:	d006      	beq.n	800ecfa <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEENS0_5__ops16_Iter_equals_valIKcEEET_SB_SB_T0_St26random_access_iterator_tag+0xce>
 800ecec:	2b03      	cmp	r3, #3
 800ecee:	dc31      	bgt.n	800ed54 <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEENS0_5__ops16_Iter_equals_valIKcEEET_SB_SB_T0_St26random_access_iterator_tag+0x128>
 800ecf0:	2b01      	cmp	r3, #1
 800ecf2:	d020      	beq.n	800ed36 <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEENS0_5__ops16_Iter_equals_valIKcEEET_SB_SB_T0_St26random_access_iterator_tag+0x10a>
 800ecf4:	2b02      	cmp	r3, #2
 800ecf6:	d00f      	beq.n	800ed18 <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEENS0_5__ops16_Iter_equals_valIKcEEET_SB_SB_T0_St26random_access_iterator_tag+0xec>
 800ecf8:	e02c      	b.n	800ed54 <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEENS0_5__ops16_Iter_equals_valIKcEEET_SB_SB_T0_St26random_access_iterator_tag+0x128>
	  if (__pred(__first))
 800ecfa:	1d3b      	adds	r3, r7, #4
 800ecfc:	68f9      	ldr	r1, [r7, #12]
 800ecfe:	4618      	mov	r0, r3
 800ed00:	f7ff ff6d 	bl	800ebde <_ZN9__gnu_cxx5__ops16_Iter_equals_valIKcEclINS_17__normal_iteratorIPcSt6vectorIcSaIcEEEEEEbT_>
 800ed04:	4603      	mov	r3, r0
 800ed06:	2b00      	cmp	r3, #0
 800ed08:	d001      	beq.n	800ed0e <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEENS0_5__ops16_Iter_equals_valIKcEEET_SB_SB_T0_St26random_access_iterator_tag+0xe2>
	    return __first;
 800ed0a:	68fb      	ldr	r3, [r7, #12]
 800ed0c:	e023      	b.n	800ed56 <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEENS0_5__ops16_Iter_equals_valIKcEEET_SB_SB_T0_St26random_access_iterator_tag+0x12a>
	  ++__first;
 800ed0e:	f107 030c 	add.w	r3, r7, #12
 800ed12:	4618      	mov	r0, r3
 800ed14:	f7ff ff7a 	bl	800ec0c <_ZN9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEppEv>
	  if (__pred(__first))
 800ed18:	1d3b      	adds	r3, r7, #4
 800ed1a:	68f9      	ldr	r1, [r7, #12]
 800ed1c:	4618      	mov	r0, r3
 800ed1e:	f7ff ff5e 	bl	800ebde <_ZN9__gnu_cxx5__ops16_Iter_equals_valIKcEclINS_17__normal_iteratorIPcSt6vectorIcSaIcEEEEEEbT_>
 800ed22:	4603      	mov	r3, r0
 800ed24:	2b00      	cmp	r3, #0
 800ed26:	d001      	beq.n	800ed2c <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEENS0_5__ops16_Iter_equals_valIKcEEET_SB_SB_T0_St26random_access_iterator_tag+0x100>
	    return __first;
 800ed28:	68fb      	ldr	r3, [r7, #12]
 800ed2a:	e014      	b.n	800ed56 <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEENS0_5__ops16_Iter_equals_valIKcEEET_SB_SB_T0_St26random_access_iterator_tag+0x12a>
	  ++__first;
 800ed2c:	f107 030c 	add.w	r3, r7, #12
 800ed30:	4618      	mov	r0, r3
 800ed32:	f7ff ff6b 	bl	800ec0c <_ZN9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEppEv>
	  if (__pred(__first))
 800ed36:	1d3b      	adds	r3, r7, #4
 800ed38:	68f9      	ldr	r1, [r7, #12]
 800ed3a:	4618      	mov	r0, r3
 800ed3c:	f7ff ff4f 	bl	800ebde <_ZN9__gnu_cxx5__ops16_Iter_equals_valIKcEclINS_17__normal_iteratorIPcSt6vectorIcSaIcEEEEEEbT_>
 800ed40:	4603      	mov	r3, r0
 800ed42:	2b00      	cmp	r3, #0
 800ed44:	d001      	beq.n	800ed4a <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEENS0_5__ops16_Iter_equals_valIKcEEET_SB_SB_T0_St26random_access_iterator_tag+0x11e>
	    return __first;
 800ed46:	68fb      	ldr	r3, [r7, #12]
 800ed48:	e005      	b.n	800ed56 <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEENS0_5__ops16_Iter_equals_valIKcEEET_SB_SB_T0_St26random_access_iterator_tag+0x12a>
	  ++__first;
 800ed4a:	f107 030c 	add.w	r3, r7, #12
 800ed4e:	4618      	mov	r0, r3
 800ed50:	f7ff ff5c 	bl	800ec0c <_ZN9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEppEv>
	  return __last;
 800ed54:	68bb      	ldr	r3, [r7, #8]
    }
 800ed56:	4618      	mov	r0, r3
 800ed58:	3718      	adds	r7, #24
 800ed5a:	46bd      	mov	sp, r7
 800ed5c:	bd80      	pop	{r7, pc}

0800ed5e <_ZNSt16allocator_traitsISaIcEE10deallocateERS0_Pcj>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 800ed5e:	b580      	push	{r7, lr}
 800ed60:	b088      	sub	sp, #32
 800ed62:	af00      	add	r7, sp, #0
 800ed64:	60f8      	str	r0, [r7, #12]
 800ed66:	60b9      	str	r1, [r7, #8]
 800ed68:	607a      	str	r2, [r7, #4]
 800ed6a:	68fb      	ldr	r3, [r7, #12]
 800ed6c:	61fb      	str	r3, [r7, #28]
 800ed6e:	68bb      	ldr	r3, [r7, #8]
 800ed70:	61bb      	str	r3, [r7, #24]
 800ed72:	687b      	ldr	r3, [r7, #4]
 800ed74:	617b      	str	r3, [r7, #20]
	if (std::is_constant_evaluated())
 800ed76:	f7f3 fec9 	bl	8002b0c <_ZSt21is_constant_evaluatedv>
 800ed7a:	4603      	mov	r3, r0
 800ed7c:	2b00      	cmp	r3, #0
 800ed7e:	d003      	beq.n	800ed88 <_ZNSt16allocator_traitsISaIcEE10deallocateERS0_Pcj+0x2a>
	    ::operator delete(__p);
 800ed80:	69b8      	ldr	r0, [r7, #24]
 800ed82:	f012 f9fb 	bl	802117c <_ZdlPv>
	    return;
 800ed86:	e005      	b.n	800ed94 <_ZNSt16allocator_traitsISaIcEE10deallocateERS0_Pcj+0x36>
	__allocator_base<_Tp>::deallocate(__p, __n);
 800ed88:	697a      	ldr	r2, [r7, #20]
 800ed8a:	69b9      	ldr	r1, [r7, #24]
 800ed8c:	69f8      	ldr	r0, [r7, #28]
 800ed8e:	f002 f86e 	bl	8010e6e <_ZN9__gnu_cxx13new_allocatorIcE10deallocateEPcj>
      { __a.deallocate(__p, __n); }
 800ed92:	bf00      	nop
 800ed94:	bf00      	nop
 800ed96:	3720      	adds	r7, #32
 800ed98:	46bd      	mov	sp, r7
 800ed9a:	bd80      	pop	{r7, pc}

0800ed9c <_ZSt7forwardIcEOT_RNSt16remove_referenceIS0_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800ed9c:	b480      	push	{r7}
 800ed9e:	b083      	sub	sp, #12
 800eda0:	af00      	add	r7, sp, #0
 800eda2:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800eda4:	687b      	ldr	r3, [r7, #4]
 800eda6:	4618      	mov	r0, r3
 800eda8:	370c      	adds	r7, #12
 800edaa:	46bd      	mov	sp, r7
 800edac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edb0:	4770      	bx	lr

0800edb2 <_ZSt12construct_atIcJcEEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPS1_DpOS2_>:
    construct_at(_Tp* __location, _Args&&... __args)
 800edb2:	b590      	push	{r4, r7, lr}
 800edb4:	b083      	sub	sp, #12
 800edb6:	af00      	add	r7, sp, #0
 800edb8:	6078      	str	r0, [r7, #4]
 800edba:	6039      	str	r1, [r7, #0]
    { return ::new((void*)__location) _Tp(std::forward<_Args>(__args)...); }
 800edbc:	6838      	ldr	r0, [r7, #0]
 800edbe:	f7ff ffed 	bl	800ed9c <_ZSt7forwardIcEOT_RNSt16remove_referenceIS0_E4typeE>
 800edc2:	4603      	mov	r3, r0
 800edc4:	781c      	ldrb	r4, [r3, #0]
 800edc6:	687b      	ldr	r3, [r7, #4]
 800edc8:	4619      	mov	r1, r3
 800edca:	2001      	movs	r0, #1
 800edcc:	f7f3 fea6 	bl	8002b1c <_ZnwjPv>
 800edd0:	4603      	mov	r3, r0
 800edd2:	4622      	mov	r2, r4
 800edd4:	701a      	strb	r2, [r3, #0]
 800edd6:	4618      	mov	r0, r3
 800edd8:	370c      	adds	r7, #12
 800edda:	46bd      	mov	sp, r7
 800eddc:	bd90      	pop	{r4, r7, pc}

0800edde <_ZNSt16allocator_traitsISaIcEE9constructIcJcEEEvRS0_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 800edde:	b580      	push	{r7, lr}
 800ede0:	b084      	sub	sp, #16
 800ede2:	af00      	add	r7, sp, #0
 800ede4:	60f8      	str	r0, [r7, #12]
 800ede6:	60b9      	str	r1, [r7, #8]
 800ede8:	607a      	str	r2, [r7, #4]
	  std::construct_at(__p, std::forward<_Args>(__args)...);
 800edea:	6878      	ldr	r0, [r7, #4]
 800edec:	f7ff ffd6 	bl	800ed9c <_ZSt7forwardIcEOT_RNSt16remove_referenceIS0_E4typeE>
 800edf0:	4603      	mov	r3, r0
 800edf2:	4619      	mov	r1, r3
 800edf4:	68b8      	ldr	r0, [r7, #8]
 800edf6:	f7ff ffdc 	bl	800edb2 <_ZSt12construct_atIcJcEEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPS1_DpOS2_>
	}
 800edfa:	bf00      	nop
 800edfc:	3710      	adds	r7, #16
 800edfe:	46bd      	mov	sp, r7
 800ee00:	bd80      	pop	{r7, pc}
	...

0800ee04 <_ZNSt6vectorIcSaIcEE17_M_realloc_insertIJcEEEvN9__gnu_cxx17__normal_iteratorIPcS1_EEDpOT_>:
      vector<_Tp, _Alloc>::
 800ee04:	b5b0      	push	{r4, r5, r7, lr}
 800ee06:	b08c      	sub	sp, #48	; 0x30
 800ee08:	af00      	add	r7, sp, #0
 800ee0a:	60f8      	str	r0, [r7, #12]
 800ee0c:	60b9      	str	r1, [r7, #8]
 800ee0e:	607a      	str	r2, [r7, #4]
	_M_check_len(size_type(1), "vector::_M_realloc_insert");
 800ee10:	4a38      	ldr	r2, [pc, #224]	; (800eef4 <_ZNSt6vectorIcSaIcEE17_M_realloc_insertIJcEEEvN9__gnu_cxx17__normal_iteratorIPcS1_EEDpOT_+0xf0>)
 800ee12:	2101      	movs	r1, #1
 800ee14:	68f8      	ldr	r0, [r7, #12]
 800ee16:	f001 f9b2 	bl	801017e <_ZNKSt6vectorIcSaIcEE12_M_check_lenEjPKc>
 800ee1a:	62f8      	str	r0, [r7, #44]	; 0x2c
      pointer __old_start = this->_M_impl._M_start;
 800ee1c:	68fb      	ldr	r3, [r7, #12]
 800ee1e:	681b      	ldr	r3, [r3, #0]
 800ee20:	62bb      	str	r3, [r7, #40]	; 0x28
      pointer __old_finish = this->_M_impl._M_finish;
 800ee22:	68fb      	ldr	r3, [r7, #12]
 800ee24:	685b      	ldr	r3, [r3, #4]
 800ee26:	627b      	str	r3, [r7, #36]	; 0x24
      const size_type __elems_before = __position - begin();
 800ee28:	68f8      	ldr	r0, [r7, #12]
 800ee2a:	f7fe f80e 	bl	800ce4a <_ZNSt6vectorIcSaIcEE5beginEv>
 800ee2e:	4603      	mov	r3, r0
 800ee30:	617b      	str	r3, [r7, #20]
 800ee32:	f107 0214 	add.w	r2, r7, #20
 800ee36:	f107 0308 	add.w	r3, r7, #8
 800ee3a:	4611      	mov	r1, r2
 800ee3c:	4618      	mov	r0, r3
 800ee3e:	f7ff feae 	bl	800eb9e <_ZN9__gnu_cxxmiIPcSt6vectorIcSaIcEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS8_SB_>
 800ee42:	4603      	mov	r3, r0
 800ee44:	623b      	str	r3, [r7, #32]
      pointer __new_start(this->_M_allocate(__len));
 800ee46:	68fb      	ldr	r3, [r7, #12]
 800ee48:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ee4a:	4618      	mov	r0, r3
 800ee4c:	f7ff fd1a 	bl	800e884 <_ZNSt12_Vector_baseIcSaIcEE11_M_allocateEj>
 800ee50:	61f8      	str	r0, [r7, #28]
      pointer __new_finish(__new_start);
 800ee52:	69fb      	ldr	r3, [r7, #28]
 800ee54:	61bb      	str	r3, [r7, #24]
	  _Alloc_traits::construct(this->_M_impl,
 800ee56:	68fc      	ldr	r4, [r7, #12]
 800ee58:	69fa      	ldr	r2, [r7, #28]
 800ee5a:	6a3b      	ldr	r3, [r7, #32]
 800ee5c:	18d5      	adds	r5, r2, r3
 800ee5e:	6878      	ldr	r0, [r7, #4]
 800ee60:	f7ff ff9c 	bl	800ed9c <_ZSt7forwardIcEOT_RNSt16remove_referenceIS0_E4typeE>
 800ee64:	4603      	mov	r3, r0
 800ee66:	461a      	mov	r2, r3
 800ee68:	4629      	mov	r1, r5
 800ee6a:	4620      	mov	r0, r4
 800ee6c:	f7ff ffb7 	bl	800edde <_ZNSt16allocator_traitsISaIcEE9constructIcJcEEEvRS0_PT_DpOT0_>
	  __new_finish = pointer();
 800ee70:	2300      	movs	r3, #0
 800ee72:	61bb      	str	r3, [r7, #24]
	      __new_finish = _S_relocate(__old_start, __position.base(),
 800ee74:	f107 0308 	add.w	r3, r7, #8
 800ee78:	4618      	mov	r0, r3
 800ee7a:	f7fa fb3a 	bl	80094f2 <_ZNK9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEE4baseEv>
 800ee7e:	4603      	mov	r3, r0
 800ee80:	681c      	ldr	r4, [r3, #0]
					 __new_start, _M_get_Tp_allocator());
 800ee82:	68fb      	ldr	r3, [r7, #12]
 800ee84:	4618      	mov	r0, r3
 800ee86:	f7fe fb1e 	bl	800d4c6 <_ZNSt12_Vector_baseIcSaIcEE19_M_get_Tp_allocatorEv>
 800ee8a:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__old_start, __position.base(),
 800ee8c:	69fa      	ldr	r2, [r7, #28]
 800ee8e:	4621      	mov	r1, r4
 800ee90:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ee92:	f001 f9bb 	bl	801020c <_ZNSt6vectorIcSaIcEE11_S_relocateEPcS2_S2_RS0_>
 800ee96:	61b8      	str	r0, [r7, #24]
	      ++__new_finish;
 800ee98:	69bb      	ldr	r3, [r7, #24]
 800ee9a:	3301      	adds	r3, #1
 800ee9c:	61bb      	str	r3, [r7, #24]
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 800ee9e:	f107 0308 	add.w	r3, r7, #8
 800eea2:	4618      	mov	r0, r3
 800eea4:	f7fa fb25 	bl	80094f2 <_ZNK9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEE4baseEv>
 800eea8:	4603      	mov	r3, r0
 800eeaa:	681c      	ldr	r4, [r3, #0]
					 __new_finish, _M_get_Tp_allocator());
 800eeac:	68fb      	ldr	r3, [r7, #12]
 800eeae:	4618      	mov	r0, r3
 800eeb0:	f7fe fb09 	bl	800d4c6 <_ZNSt12_Vector_baseIcSaIcEE19_M_get_Tp_allocatorEv>
 800eeb4:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 800eeb6:	69ba      	ldr	r2, [r7, #24]
 800eeb8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800eeba:	4620      	mov	r0, r4
 800eebc:	f001 f9a6 	bl	801020c <_ZNSt6vectorIcSaIcEE11_S_relocateEPcS2_S2_RS0_>
 800eec0:	61b8      	str	r0, [r7, #24]
      _M_deallocate(__old_start,
 800eec2:	68f8      	ldr	r0, [r7, #12]
		    this->_M_impl._M_end_of_storage - __old_start);
 800eec4:	68fb      	ldr	r3, [r7, #12]
 800eec6:	689a      	ldr	r2, [r3, #8]
 800eec8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eeca:	1ad3      	subs	r3, r2, r3
      _M_deallocate(__old_start,
 800eecc:	461a      	mov	r2, r3
 800eece:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800eed0:	f7fe fe9b 	bl	800dc0a <_ZNSt12_Vector_baseIcSaIcEE13_M_deallocateEPcj>
      this->_M_impl._M_start = __new_start;
 800eed4:	68fb      	ldr	r3, [r7, #12]
 800eed6:	69fa      	ldr	r2, [r7, #28]
 800eed8:	601a      	str	r2, [r3, #0]
      this->_M_impl._M_finish = __new_finish;
 800eeda:	68fb      	ldr	r3, [r7, #12]
 800eedc:	69ba      	ldr	r2, [r7, #24]
 800eede:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 800eee0:	69fa      	ldr	r2, [r7, #28]
 800eee2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eee4:	441a      	add	r2, r3
 800eee6:	68fb      	ldr	r3, [r7, #12]
 800eee8:	609a      	str	r2, [r3, #8]
    }
 800eeea:	bf00      	nop
 800eeec:	3730      	adds	r7, #48	; 0x30
 800eeee:	46bd      	mov	sp, r7
 800eef0:	bdb0      	pop	{r4, r5, r7, pc}
 800eef2:	bf00      	nop
 800eef4:	08025e60 	.word	0x08025e60

0800eef8 <_ZNSt6vectorIcSaIcEE4backEv>:
      back() _GLIBCXX_NOEXCEPT
 800eef8:	b580      	push	{r7, lr}
 800eefa:	b084      	sub	sp, #16
 800eefc:	af00      	add	r7, sp, #0
 800eefe:	6078      	str	r0, [r7, #4]
	return *(end() - 1);
 800ef00:	6878      	ldr	r0, [r7, #4]
 800ef02:	f7fd ffb2 	bl	800ce6a <_ZNSt6vectorIcSaIcEE3endEv>
 800ef06:	4603      	mov	r3, r0
 800ef08:	60fb      	str	r3, [r7, #12]
 800ef0a:	f107 030c 	add.w	r3, r7, #12
 800ef0e:	2101      	movs	r1, #1
 800ef10:	4618      	mov	r0, r3
 800ef12:	f001 f98f 	bl	8010234 <_ZNK9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEmiEi>
 800ef16:	4603      	mov	r3, r0
 800ef18:	60bb      	str	r3, [r7, #8]
 800ef1a:	f107 0308 	add.w	r3, r7, #8
 800ef1e:	4618      	mov	r0, r3
 800ef20:	f7ff fe51 	bl	800ebc6 <_ZNK9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEdeEv>
 800ef24:	4603      	mov	r3, r0
      }
 800ef26:	4618      	mov	r0, r3
 800ef28:	3710      	adds	r7, #16
 800ef2a:	46bd      	mov	sp, r7
 800ef2c:	bd80      	pop	{r7, pc}

0800ef2e <_ZNK9__gnu_cxx17__normal_iteratorIPKcSt6vectorIcSaIcEEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 800ef2e:	b480      	push	{r7}
 800ef30:	b083      	sub	sp, #12
 800ef32:	af00      	add	r7, sp, #0
 800ef34:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 800ef36:	687b      	ldr	r3, [r7, #4]
 800ef38:	4618      	mov	r0, r3
 800ef3a:	370c      	adds	r7, #12
 800ef3c:	46bd      	mov	sp, r7
 800ef3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef42:	4770      	bx	lr

0800ef44 <_ZSt8distanceIPcENSt15iterator_traitsIT_E15difference_typeES2_S2_>:
    distance(_InputIterator __first, _InputIterator __last)
 800ef44:	b5b0      	push	{r4, r5, r7, lr}
 800ef46:	b082      	sub	sp, #8
 800ef48:	af00      	add	r7, sp, #0
 800ef4a:	6078      	str	r0, [r7, #4]
 800ef4c:	6039      	str	r1, [r7, #0]
      return std::__distance(__first, __last,
 800ef4e:	687c      	ldr	r4, [r7, #4]
			     std::__iterator_category(__first));
 800ef50:	1d3b      	adds	r3, r7, #4
 800ef52:	4618      	mov	r0, r3
 800ef54:	f7fe f8b5 	bl	800d0c2 <_ZSt19__iterator_categoryIPcENSt15iterator_traitsIT_E17iterator_categoryERKS2_>
      return std::__distance(__first, __last,
 800ef58:	462a      	mov	r2, r5
 800ef5a:	6839      	ldr	r1, [r7, #0]
 800ef5c:	4620      	mov	r0, r4
 800ef5e:	f001 f981 	bl	8010264 <_ZSt10__distanceIPcENSt15iterator_traitsIT_E15difference_typeES2_S2_St26random_access_iterator_tag>
 800ef62:	4603      	mov	r3, r0
    }
 800ef64:	4618      	mov	r0, r3
 800ef66:	3708      	adds	r7, #8
 800ef68:	46bd      	mov	sp, r7
 800ef6a:	bdb0      	pop	{r4, r5, r7, pc}

0800ef6c <_ZSt13move_backwardIPcS0_ET0_T_S2_S1_>:
    move_backward(_BI1 __first, _BI1 __last, _BI2 __result)
 800ef6c:	b590      	push	{r4, r7, lr}
 800ef6e:	b085      	sub	sp, #20
 800ef70:	af00      	add	r7, sp, #0
 800ef72:	60f8      	str	r0, [r7, #12]
 800ef74:	60b9      	str	r1, [r7, #8]
 800ef76:	607a      	str	r2, [r7, #4]
      return std::__copy_move_backward_a<true>(std::__miter_base(__first),
 800ef78:	68f8      	ldr	r0, [r7, #12]
 800ef7a:	f001 f99b 	bl	80102b4 <_ZSt12__miter_baseIPcET_S1_>
 800ef7e:	4604      	mov	r4, r0
 800ef80:	68b8      	ldr	r0, [r7, #8]
 800ef82:	f001 f997 	bl	80102b4 <_ZSt12__miter_baseIPcET_S1_>
 800ef86:	4603      	mov	r3, r0
 800ef88:	687a      	ldr	r2, [r7, #4]
 800ef8a:	4619      	mov	r1, r3
 800ef8c:	4620      	mov	r0, r4
 800ef8e:	f001 f99c 	bl	80102ca <_ZSt22__copy_move_backward_aILb1EPcS0_ET1_T0_S2_S1_>
 800ef92:	4603      	mov	r3, r0
    }
 800ef94:	4618      	mov	r0, r3
 800ef96:	3714      	adds	r7, #20
 800ef98:	46bd      	mov	sp, r7
 800ef9a:	bd90      	pop	{r4, r7, pc}

0800ef9c <_ZSt4copyIPcN9__gnu_cxx17__normal_iteratorIS0_St6vectorIcSaIcEEEEET0_T_S8_S7_>:
    copy(_II __first, _II __last, _OI __result)
 800ef9c:	b590      	push	{r4, r7, lr}
 800ef9e:	b085      	sub	sp, #20
 800efa0:	af00      	add	r7, sp, #0
 800efa2:	60f8      	str	r0, [r7, #12]
 800efa4:	60b9      	str	r1, [r7, #8]
 800efa6:	607a      	str	r2, [r7, #4]
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 800efa8:	68f8      	ldr	r0, [r7, #12]
 800efaa:	f001 f983 	bl	80102b4 <_ZSt12__miter_baseIPcET_S1_>
 800efae:	4604      	mov	r4, r0
 800efb0:	68b8      	ldr	r0, [r7, #8]
 800efb2:	f001 f97f 	bl	80102b4 <_ZSt12__miter_baseIPcET_S1_>
 800efb6:	4603      	mov	r3, r0
 800efb8:	687a      	ldr	r2, [r7, #4]
 800efba:	4619      	mov	r1, r3
 800efbc:	4620      	mov	r0, r4
 800efbe:	f001 f9a7 	bl	8010310 <_ZSt13__copy_move_aILb0EPcN9__gnu_cxx17__normal_iteratorIS0_St6vectorIcSaIcEEEEET1_T0_S8_S7_>
 800efc2:	4603      	mov	r3, r0
    }
 800efc4:	4618      	mov	r0, r3
 800efc6:	3714      	adds	r7, #20
 800efc8:	46bd      	mov	sp, r7
 800efca:	bd90      	pop	{r4, r7, pc}

0800efcc <_ZNSt6vectorIcSaIcEE15_M_range_insertIPcEEvN9__gnu_cxx17__normal_iteratorIS3_S1_EET_S7_St20forward_iterator_tag>:
      }

  template<typename _Tp, typename _Alloc>
    template<typename _ForwardIterator>
      void
      vector<_Tp, _Alloc>::
 800efcc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800efce:	b08d      	sub	sp, #52	; 0x34
 800efd0:	af00      	add	r7, sp, #0
 800efd2:	60f8      	str	r0, [r7, #12]
 800efd4:	60b9      	str	r1, [r7, #8]
 800efd6:	607a      	str	r2, [r7, #4]
 800efd8:	603b      	str	r3, [r7, #0]
      _M_range_insert(iterator __position, _ForwardIterator __first,
		      _ForwardIterator __last, std::forward_iterator_tag)
      {
	if (__first != __last)
 800efda:	687a      	ldr	r2, [r7, #4]
 800efdc:	683b      	ldr	r3, [r7, #0]
 800efde:	429a      	cmp	r2, r3
 800efe0:	f000 80f6 	beq.w	800f1d0 <_ZNSt6vectorIcSaIcEE15_M_range_insertIPcEEvN9__gnu_cxx17__normal_iteratorIS3_S1_EET_S7_St20forward_iterator_tag+0x204>
	  {
	    const size_type __n = std::distance(__first, __last);
 800efe4:	6839      	ldr	r1, [r7, #0]
 800efe6:	6878      	ldr	r0, [r7, #4]
 800efe8:	f7ff ffac 	bl	800ef44 <_ZSt8distanceIPcENSt15iterator_traitsIT_E15difference_typeES2_S2_>
 800efec:	4603      	mov	r3, r0
 800efee:	62fb      	str	r3, [r7, #44]	; 0x2c
	    if (size_type(this->_M_impl._M_end_of_storage
 800eff0:	68fb      	ldr	r3, [r7, #12]
 800eff2:	689a      	ldr	r2, [r3, #8]
			  - this->_M_impl._M_finish) >= __n)
 800eff4:	68fb      	ldr	r3, [r7, #12]
 800eff6:	685b      	ldr	r3, [r3, #4]
 800eff8:	1ad3      	subs	r3, r2, r3
	    if (size_type(this->_M_impl._M_end_of_storage
 800effa:	461a      	mov	r2, r3
 800effc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800effe:	4293      	cmp	r3, r2
 800f000:	f200 8081 	bhi.w	800f106 <_ZNSt6vectorIcSaIcEE15_M_range_insertIPcEEvN9__gnu_cxx17__normal_iteratorIS3_S1_EET_S7_St20forward_iterator_tag+0x13a>
	      {
		const size_type __elems_after = end() - __position;
 800f004:	68f8      	ldr	r0, [r7, #12]
 800f006:	f7fd ff30 	bl	800ce6a <_ZNSt6vectorIcSaIcEE3endEv>
 800f00a:	4603      	mov	r3, r0
 800f00c:	617b      	str	r3, [r7, #20]
 800f00e:	f107 0208 	add.w	r2, r7, #8
 800f012:	f107 0314 	add.w	r3, r7, #20
 800f016:	4611      	mov	r1, r2
 800f018:	4618      	mov	r0, r3
 800f01a:	f7ff fdc0 	bl	800eb9e <_ZN9__gnu_cxxmiIPcSt6vectorIcSaIcEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS8_SB_>
 800f01e:	4603      	mov	r3, r0
 800f020:	61fb      	str	r3, [r7, #28]
		pointer __old_finish(this->_M_impl._M_finish);
 800f022:	68fb      	ldr	r3, [r7, #12]
 800f024:	685b      	ldr	r3, [r3, #4]
 800f026:	61bb      	str	r3, [r7, #24]
		if (__elems_after > __n)
 800f028:	69fa      	ldr	r2, [r7, #28]
 800f02a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f02c:	429a      	cmp	r2, r3
 800f02e:	d92d      	bls.n	800f08c <_ZNSt6vectorIcSaIcEE15_M_range_insertIPcEEvN9__gnu_cxx17__normal_iteratorIS3_S1_EET_S7_St20forward_iterator_tag+0xc0>
		  {
		    _GLIBCXX_ASAN_ANNOTATE_GROW(__n);
		    std::__uninitialized_move_a(this->_M_impl._M_finish - __n,
 800f030:	68fb      	ldr	r3, [r7, #12]
 800f032:	685a      	ldr	r2, [r3, #4]
 800f034:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f036:	425b      	negs	r3, r3
 800f038:	18d4      	adds	r4, r2, r3
 800f03a:	68fb      	ldr	r3, [r7, #12]
 800f03c:	685d      	ldr	r5, [r3, #4]
 800f03e:	68fb      	ldr	r3, [r7, #12]
 800f040:	685e      	ldr	r6, [r3, #4]
						this->_M_impl._M_finish,
						this->_M_impl._M_finish,
						_M_get_Tp_allocator());
 800f042:	68fb      	ldr	r3, [r7, #12]
 800f044:	4618      	mov	r0, r3
 800f046:	f7fe fa3e 	bl	800d4c6 <_ZNSt12_Vector_baseIcSaIcEE19_M_get_Tp_allocatorEv>
 800f04a:	4603      	mov	r3, r0
		    std::__uninitialized_move_a(this->_M_impl._M_finish - __n,
 800f04c:	4632      	mov	r2, r6
 800f04e:	4629      	mov	r1, r5
 800f050:	4620      	mov	r0, r4
 800f052:	f001 f916 	bl	8010282 <_ZSt22__uninitialized_move_aIPcS0_SaIcEET0_T_S3_S2_RT1_>
		    this->_M_impl._M_finish += __n;
 800f056:	68fb      	ldr	r3, [r7, #12]
 800f058:	685a      	ldr	r2, [r3, #4]
 800f05a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f05c:	441a      	add	r2, r3
 800f05e:	68fb      	ldr	r3, [r7, #12]
 800f060:	605a      	str	r2, [r3, #4]
		    _GLIBCXX_ASAN_ANNOTATE_GREW(__n);
		    _GLIBCXX_MOVE_BACKWARD3(__position.base(),
 800f062:	f107 0308 	add.w	r3, r7, #8
 800f066:	4618      	mov	r0, r3
 800f068:	f7fa fa43 	bl	80094f2 <_ZNK9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEE4baseEv>
 800f06c:	4603      	mov	r3, r0
 800f06e:	6818      	ldr	r0, [r3, #0]
 800f070:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f072:	425b      	negs	r3, r3
 800f074:	69ba      	ldr	r2, [r7, #24]
 800f076:	4413      	add	r3, r2
 800f078:	69ba      	ldr	r2, [r7, #24]
 800f07a:	4619      	mov	r1, r3
 800f07c:	f7ff ff76 	bl	800ef6c <_ZSt13move_backwardIPcS0_ET0_T_S2_S1_>
					    __old_finish - __n, __old_finish);
		    std::copy(__first, __last, __position);
 800f080:	68ba      	ldr	r2, [r7, #8]
 800f082:	6839      	ldr	r1, [r7, #0]
 800f084:	6878      	ldr	r0, [r7, #4]
 800f086:	f7ff ff89 	bl	800ef9c <_ZSt4copyIPcN9__gnu_cxx17__normal_iteratorIS0_St6vectorIcSaIcEEEEET0_T_S8_S7_>
		this->_M_impl._M_start = __new_start;
		this->_M_impl._M_finish = __new_finish;
		this->_M_impl._M_end_of_storage = __new_start + __len;
	      }
	  }
      }
 800f08a:	e0a1      	b.n	800f1d0 <_ZNSt6vectorIcSaIcEE15_M_range_insertIPcEEvN9__gnu_cxx17__normal_iteratorIS3_S1_EET_S7_St20forward_iterator_tag+0x204>
		    _ForwardIterator __mid = __first;
 800f08c:	687b      	ldr	r3, [r7, #4]
 800f08e:	613b      	str	r3, [r7, #16]
		    std::advance(__mid, __elems_after);
 800f090:	f107 0310 	add.w	r3, r7, #16
 800f094:	69f9      	ldr	r1, [r7, #28]
 800f096:	4618      	mov	r0, r3
 800f098:	f001 f95b 	bl	8010352 <_ZSt7advanceIPcjEvRT_T0_>
		    std::__uninitialized_copy_a(__mid, __last,
 800f09c:	693c      	ldr	r4, [r7, #16]
 800f09e:	68fb      	ldr	r3, [r7, #12]
 800f0a0:	685d      	ldr	r5, [r3, #4]
						_M_get_Tp_allocator());
 800f0a2:	68fb      	ldr	r3, [r7, #12]
 800f0a4:	4618      	mov	r0, r3
 800f0a6:	f7fe fa0e 	bl	800d4c6 <_ZNSt12_Vector_baseIcSaIcEE19_M_get_Tp_allocatorEv>
 800f0aa:	4603      	mov	r3, r0
		    std::__uninitialized_copy_a(__mid, __last,
 800f0ac:	462a      	mov	r2, r5
 800f0ae:	6839      	ldr	r1, [r7, #0]
 800f0b0:	4620      	mov	r0, r4
 800f0b2:	f001 f961 	bl	8010378 <_ZSt22__uninitialized_copy_aIPcS0_cET0_T_S2_S1_RSaIT1_E>
		    this->_M_impl._M_finish += __n - __elems_after;
 800f0b6:	68fb      	ldr	r3, [r7, #12]
 800f0b8:	685a      	ldr	r2, [r3, #4]
 800f0ba:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800f0bc:	69fb      	ldr	r3, [r7, #28]
 800f0be:	1acb      	subs	r3, r1, r3
 800f0c0:	441a      	add	r2, r3
 800f0c2:	68fb      	ldr	r3, [r7, #12]
 800f0c4:	605a      	str	r2, [r3, #4]
		    std::__uninitialized_move_a(__position.base(),
 800f0c6:	f107 0308 	add.w	r3, r7, #8
 800f0ca:	4618      	mov	r0, r3
 800f0cc:	f7fa fa11 	bl	80094f2 <_ZNK9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEE4baseEv>
 800f0d0:	4603      	mov	r3, r0
 800f0d2:	681c      	ldr	r4, [r3, #0]
 800f0d4:	68fb      	ldr	r3, [r7, #12]
 800f0d6:	685d      	ldr	r5, [r3, #4]
						_M_get_Tp_allocator());
 800f0d8:	68fb      	ldr	r3, [r7, #12]
 800f0da:	4618      	mov	r0, r3
 800f0dc:	f7fe f9f3 	bl	800d4c6 <_ZNSt12_Vector_baseIcSaIcEE19_M_get_Tp_allocatorEv>
 800f0e0:	4603      	mov	r3, r0
		    std::__uninitialized_move_a(__position.base(),
 800f0e2:	462a      	mov	r2, r5
 800f0e4:	69b9      	ldr	r1, [r7, #24]
 800f0e6:	4620      	mov	r0, r4
 800f0e8:	f001 f8cb 	bl	8010282 <_ZSt22__uninitialized_move_aIPcS0_SaIcEET0_T_S3_S2_RT1_>
		    this->_M_impl._M_finish += __elems_after;
 800f0ec:	68fb      	ldr	r3, [r7, #12]
 800f0ee:	685a      	ldr	r2, [r3, #4]
 800f0f0:	69fb      	ldr	r3, [r7, #28]
 800f0f2:	441a      	add	r2, r3
 800f0f4:	68fb      	ldr	r3, [r7, #12]
 800f0f6:	605a      	str	r2, [r3, #4]
		    std::copy(__first, __mid, __position);
 800f0f8:	693b      	ldr	r3, [r7, #16]
 800f0fa:	68ba      	ldr	r2, [r7, #8]
 800f0fc:	4619      	mov	r1, r3
 800f0fe:	6878      	ldr	r0, [r7, #4]
 800f100:	f7ff ff4c 	bl	800ef9c <_ZSt4copyIPcN9__gnu_cxx17__normal_iteratorIS0_St6vectorIcSaIcEEEEET0_T_S8_S7_>
      }
 800f104:	e064      	b.n	800f1d0 <_ZNSt6vectorIcSaIcEE15_M_range_insertIPcEEvN9__gnu_cxx17__normal_iteratorIS3_S1_EET_S7_St20forward_iterator_tag+0x204>
		  _M_check_len(__n, "vector::_M_range_insert");
 800f106:	4a34      	ldr	r2, [pc, #208]	; (800f1d8 <_ZNSt6vectorIcSaIcEE15_M_range_insertIPcEEvN9__gnu_cxx17__normal_iteratorIS3_S1_EET_S7_St20forward_iterator_tag+0x20c>)
 800f108:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800f10a:	68f8      	ldr	r0, [r7, #12]
 800f10c:	f001 f837 	bl	801017e <_ZNKSt6vectorIcSaIcEE12_M_check_lenEjPKc>
 800f110:	62b8      	str	r0, [r7, #40]	; 0x28
		pointer __new_start(this->_M_allocate(__len));
 800f112:	68fb      	ldr	r3, [r7, #12]
 800f114:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800f116:	4618      	mov	r0, r3
 800f118:	f7ff fbb4 	bl	800e884 <_ZNSt12_Vector_baseIcSaIcEE11_M_allocateEj>
 800f11c:	6278      	str	r0, [r7, #36]	; 0x24
		pointer __new_finish(__new_start);
 800f11e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f120:	623b      	str	r3, [r7, #32]
		      (this->_M_impl._M_start, __position.base(),
 800f122:	68fb      	ldr	r3, [r7, #12]
 800f124:	681c      	ldr	r4, [r3, #0]
 800f126:	f107 0308 	add.w	r3, r7, #8
 800f12a:	4618      	mov	r0, r3
 800f12c:	f7fa f9e1 	bl	80094f2 <_ZNK9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEE4baseEv>
 800f130:	4603      	mov	r3, r0
 800f132:	681d      	ldr	r5, [r3, #0]
		       __new_start, _M_get_Tp_allocator());
 800f134:	68fb      	ldr	r3, [r7, #12]
 800f136:	4618      	mov	r0, r3
 800f138:	f7fe f9c5 	bl	800d4c6 <_ZNSt12_Vector_baseIcSaIcEE19_M_get_Tp_allocatorEv>
 800f13c:	4603      	mov	r3, r0
		      (this->_M_impl._M_start, __position.base(),
 800f13e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f140:	4629      	mov	r1, r5
 800f142:	4620      	mov	r0, r4
 800f144:	f001 f929 	bl	801039a <_ZSt34__uninitialized_move_if_noexcept_aIPcS0_SaIcEET0_T_S3_S2_RT1_>
 800f148:	6238      	str	r0, [r7, #32]
						    _M_get_Tp_allocator());
 800f14a:	68fb      	ldr	r3, [r7, #12]
 800f14c:	4618      	mov	r0, r3
 800f14e:	f7fe f9ba 	bl	800d4c6 <_ZNSt12_Vector_baseIcSaIcEE19_M_get_Tp_allocatorEv>
 800f152:	4603      	mov	r3, r0
		      = std::__uninitialized_copy_a(__first, __last,
 800f154:	6a3a      	ldr	r2, [r7, #32]
 800f156:	6839      	ldr	r1, [r7, #0]
 800f158:	6878      	ldr	r0, [r7, #4]
 800f15a:	f001 f90d 	bl	8010378 <_ZSt22__uninitialized_copy_aIPcS0_cET0_T_S2_S1_RSaIT1_E>
 800f15e:	6238      	str	r0, [r7, #32]
		      (__position.base(), this->_M_impl._M_finish,
 800f160:	f107 0308 	add.w	r3, r7, #8
 800f164:	4618      	mov	r0, r3
 800f166:	f7fa f9c4 	bl	80094f2 <_ZNK9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEE4baseEv>
 800f16a:	4603      	mov	r3, r0
 800f16c:	681c      	ldr	r4, [r3, #0]
 800f16e:	68fb      	ldr	r3, [r7, #12]
 800f170:	685d      	ldr	r5, [r3, #4]
		       __new_finish, _M_get_Tp_allocator());
 800f172:	68fb      	ldr	r3, [r7, #12]
 800f174:	4618      	mov	r0, r3
 800f176:	f7fe f9a6 	bl	800d4c6 <_ZNSt12_Vector_baseIcSaIcEE19_M_get_Tp_allocatorEv>
 800f17a:	4603      	mov	r3, r0
		      (__position.base(), this->_M_impl._M_finish,
 800f17c:	6a3a      	ldr	r2, [r7, #32]
 800f17e:	4629      	mov	r1, r5
 800f180:	4620      	mov	r0, r4
 800f182:	f001 f90a 	bl	801039a <_ZSt34__uninitialized_move_if_noexcept_aIPcS0_SaIcEET0_T_S3_S2_RT1_>
 800f186:	6238      	str	r0, [r7, #32]
		std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 800f188:	68fb      	ldr	r3, [r7, #12]
 800f18a:	681c      	ldr	r4, [r3, #0]
 800f18c:	68fb      	ldr	r3, [r7, #12]
 800f18e:	685d      	ldr	r5, [r3, #4]
			      _M_get_Tp_allocator());
 800f190:	68fb      	ldr	r3, [r7, #12]
 800f192:	4618      	mov	r0, r3
 800f194:	f7fe f997 	bl	800d4c6 <_ZNSt12_Vector_baseIcSaIcEE19_M_get_Tp_allocatorEv>
 800f198:	4603      	mov	r3, r0
		std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 800f19a:	461a      	mov	r2, r3
 800f19c:	4629      	mov	r1, r5
 800f19e:	4620      	mov	r0, r4
 800f1a0:	f7fe f9ad 	bl	800d4fe <_ZSt8_DestroyIPccEvT_S1_RSaIT0_E>
		_M_deallocate(this->_M_impl._M_start,
 800f1a4:	68f8      	ldr	r0, [r7, #12]
 800f1a6:	68fb      	ldr	r3, [r7, #12]
 800f1a8:	6819      	ldr	r1, [r3, #0]
			      this->_M_impl._M_end_of_storage
 800f1aa:	68fb      	ldr	r3, [r7, #12]
 800f1ac:	689a      	ldr	r2, [r3, #8]
			      - this->_M_impl._M_start);
 800f1ae:	68fb      	ldr	r3, [r7, #12]
 800f1b0:	681b      	ldr	r3, [r3, #0]
 800f1b2:	1ad3      	subs	r3, r2, r3
		_M_deallocate(this->_M_impl._M_start,
 800f1b4:	461a      	mov	r2, r3
 800f1b6:	f7fe fd28 	bl	800dc0a <_ZNSt12_Vector_baseIcSaIcEE13_M_deallocateEPcj>
		this->_M_impl._M_start = __new_start;
 800f1ba:	68fb      	ldr	r3, [r7, #12]
 800f1bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f1be:	601a      	str	r2, [r3, #0]
		this->_M_impl._M_finish = __new_finish;
 800f1c0:	68fb      	ldr	r3, [r7, #12]
 800f1c2:	6a3a      	ldr	r2, [r7, #32]
 800f1c4:	605a      	str	r2, [r3, #4]
		this->_M_impl._M_end_of_storage = __new_start + __len;
 800f1c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f1c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f1ca:	441a      	add	r2, r3
 800f1cc:	68fb      	ldr	r3, [r7, #12]
 800f1ce:	609a      	str	r2, [r3, #8]
      }
 800f1d0:	bf00      	nop
 800f1d2:	3734      	adds	r7, #52	; 0x34
 800f1d4:	46bd      	mov	sp, r7
 800f1d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f1d8:	08025eb0 	.word	0x08025eb0

0800f1dc <_ZSt9iter_swapIPbS0_EvT_T0_>:
    iter_swap(_ForwardIterator1 __a, _ForwardIterator2 __b)
 800f1dc:	b580      	push	{r7, lr}
 800f1de:	b082      	sub	sp, #8
 800f1e0:	af00      	add	r7, sp, #0
 800f1e2:	6078      	str	r0, [r7, #4]
 800f1e4:	6039      	str	r1, [r7, #0]
      swap(*__a, *__b);
 800f1e6:	6839      	ldr	r1, [r7, #0]
 800f1e8:	6878      	ldr	r0, [r7, #4]
 800f1ea:	f001 f8ef 	bl	80103cc <_ZSt4swapIbENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS4_ESt18is_move_assignableIS4_EEE5valueEvE4typeERS4_SE_>
    }
 800f1ee:	bf00      	nop
 800f1f0:	3708      	adds	r7, #8
 800f1f2:	46bd      	mov	sp, r7
 800f1f4:	bd80      	pop	{r7, pc}

0800f1f6 <_ZSt14__copy_move_a2ILb0EPKcPcET1_T0_S4_S3_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 800f1f6:	b580      	push	{r7, lr}
 800f1f8:	b084      	sub	sp, #16
 800f1fa:	af00      	add	r7, sp, #0
 800f1fc:	60f8      	str	r0, [r7, #12]
 800f1fe:	60b9      	str	r1, [r7, #8]
 800f200:	607a      	str	r2, [r7, #4]
      if (std::is_constant_evaluated())
 800f202:	f7f3 fc83 	bl	8002b0c <_ZSt21is_constant_evaluatedv>
 800f206:	4603      	mov	r3, r0
 800f208:	2b00      	cmp	r3, #0
 800f20a:	d006      	beq.n	800f21a <_ZSt14__copy_move_a2ILb0EPKcPcET1_T0_S4_S3_+0x24>
	  __copy_m(__first, __last, __result);
 800f20c:	687a      	ldr	r2, [r7, #4]
 800f20e:	68b9      	ldr	r1, [r7, #8]
 800f210:	68f8      	ldr	r0, [r7, #12]
 800f212:	f001 f8fa 	bl	801040a <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPKcPcEET0_T_S7_S6_>
 800f216:	4603      	mov	r3, r0
 800f218:	e006      	b.n	800f228 <_ZSt14__copy_move_a2ILb0EPKcPcET1_T0_S4_S3_+0x32>
			      _Category>::__copy_m(__first, __last, __result);
 800f21a:	687a      	ldr	r2, [r7, #4]
 800f21c:	68b9      	ldr	r1, [r7, #8]
 800f21e:	68f8      	ldr	r0, [r7, #12]
 800f220:	f001 f915 	bl	801044e <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIcEEPT_PKS3_S6_S4_>
 800f224:	4603      	mov	r3, r0
 800f226:	bf00      	nop
    }
 800f228:	4618      	mov	r0, r3
 800f22a:	3710      	adds	r7, #16
 800f22c:	46bd      	mov	sp, r7
 800f22e:	bd80      	pop	{r7, pc}

0800f230 <_ZNSt16allocator_traitsISaIcEE8allocateERS0_j>:
      allocate(allocator_type& __a, size_type __n)
 800f230:	b580      	push	{r7, lr}
 800f232:	b084      	sub	sp, #16
 800f234:	af00      	add	r7, sp, #0
 800f236:	6078      	str	r0, [r7, #4]
 800f238:	6039      	str	r1, [r7, #0]
 800f23a:	687b      	ldr	r3, [r7, #4]
 800f23c:	60fb      	str	r3, [r7, #12]
 800f23e:	683b      	ldr	r3, [r7, #0]
 800f240:	60bb      	str	r3, [r7, #8]
	if (std::is_constant_evaluated())
 800f242:	f7f3 fc63 	bl	8002b0c <_ZSt21is_constant_evaluatedv>
 800f246:	4603      	mov	r3, r0
 800f248:	2b00      	cmp	r3, #0
 800f24a:	d004      	beq.n	800f256 <_ZNSt16allocator_traitsISaIcEE8allocateERS0_j+0x26>
	  return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 800f24c:	68b8      	ldr	r0, [r7, #8]
 800f24e:	f011 ff99 	bl	8021184 <_Znwj>
 800f252:	4603      	mov	r3, r0
 800f254:	e006      	b.n	800f264 <_ZNSt16allocator_traitsISaIcEE8allocateERS0_j+0x34>
	return __allocator_base<_Tp>::allocate(__n, 0);
 800f256:	2200      	movs	r2, #0
 800f258:	68b9      	ldr	r1, [r7, #8]
 800f25a:	68f8      	ldr	r0, [r7, #12]
 800f25c:	f001 fef4 	bl	8011048 <_ZN9__gnu_cxx13new_allocatorIcE8allocateEjPKv>
 800f260:	4603      	mov	r3, r0
 800f262:	bf00      	nop
      { return __a.allocate(__n); }
 800f264:	4618      	mov	r0, r3
 800f266:	3710      	adds	r7, #16
 800f268:	46bd      	mov	sp, r7
 800f26a:	bd80      	pop	{r7, pc}

0800f26c <_ZSt14__partial_sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_S9_T0_>:
    __partial_sort(_RandomAccessIterator __first,
 800f26c:	b590      	push	{r4, r7, lr}
 800f26e:	b085      	sub	sp, #20
 800f270:	af00      	add	r7, sp, #0
 800f272:	60f8      	str	r0, [r7, #12]
 800f274:	60b9      	str	r1, [r7, #8]
 800f276:	607a      	str	r2, [r7, #4]
 800f278:	703b      	strb	r3, [r7, #0]
      std::__heap_select(__first, __middle, __last, __comp);
 800f27a:	4623      	mov	r3, r4
 800f27c:	687a      	ldr	r2, [r7, #4]
 800f27e:	68b9      	ldr	r1, [r7, #8]
 800f280:	68f8      	ldr	r0, [r7, #12]
 800f282:	f001 f941 	bl	8010508 <_ZSt13__heap_selectIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_S9_T0_>
      std::__sort_heap(__first, __middle, __comp);
 800f286:	463b      	mov	r3, r7
 800f288:	461a      	mov	r2, r3
 800f28a:	68b9      	ldr	r1, [r7, #8]
 800f28c:	68f8      	ldr	r0, [r7, #12]
 800f28e:	f001 f989 	bl	80105a4 <_ZSt11__sort_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_RT0_>
    }
 800f292:	bf00      	nop
 800f294:	3714      	adds	r7, #20
 800f296:	46bd      	mov	sp, r7
 800f298:	bd90      	pop	{r4, r7, pc}

0800f29a <_ZSt27__unguarded_partition_pivotIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEET_S9_S9_T0_>:
    __unguarded_partition_pivot(_RandomAccessIterator __first,
 800f29a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f29c:	b089      	sub	sp, #36	; 0x24
 800f29e:	af02      	add	r7, sp, #8
 800f2a0:	60f8      	str	r0, [r7, #12]
 800f2a2:	60b9      	str	r1, [r7, #8]
 800f2a4:	713a      	strb	r2, [r7, #4]
      _RandomAccessIterator __mid = __first + (__last - __first) / 2;
 800f2a6:	f107 020c 	add.w	r2, r7, #12
 800f2aa:	f107 0308 	add.w	r3, r7, #8
 800f2ae:	4611      	mov	r1, r2
 800f2b0:	4618      	mov	r0, r3
 800f2b2:	f7f4 fb9b 	bl	80039ec <_ZN9__gnu_cxxmiIPfSt6vectorIfSaIfEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS8_SB_>
 800f2b6:	4603      	mov	r3, r0
 800f2b8:	0fda      	lsrs	r2, r3, #31
 800f2ba:	4413      	add	r3, r2
 800f2bc:	105b      	asrs	r3, r3, #1
 800f2be:	461a      	mov	r2, r3
 800f2c0:	f107 030c 	add.w	r3, r7, #12
 800f2c4:	4611      	mov	r1, r2
 800f2c6:	4618      	mov	r0, r3
 800f2c8:	f000 f827 	bl	800f31a <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEplEi>
 800f2cc:	4603      	mov	r3, r0
 800f2ce:	617b      	str	r3, [r7, #20]
      std::__move_median_to_first(__first, __first + 1, __mid, __last - 1,
 800f2d0:	f107 030c 	add.w	r3, r7, #12
 800f2d4:	2101      	movs	r1, #1
 800f2d6:	4618      	mov	r0, r3
 800f2d8:	f000 f81f 	bl	800f31a <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEplEi>
 800f2dc:	4604      	mov	r4, r0
 800f2de:	f107 0308 	add.w	r3, r7, #8
 800f2e2:	2101      	movs	r1, #1
 800f2e4:	4618      	mov	r0, r3
 800f2e6:	f001 f984 	bl	80105f2 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEmiEi>
 800f2ea:	4603      	mov	r3, r0
 800f2ec:	f88d 5000 	strb.w	r5, [sp]
 800f2f0:	697a      	ldr	r2, [r7, #20]
 800f2f2:	4621      	mov	r1, r4
 800f2f4:	68f8      	ldr	r0, [r7, #12]
 800f2f6:	f001 f995 	bl	8010624 <_ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_S9_S9_T0_>
      return std::__unguarded_partition(__first + 1, __last, __first, __comp);
 800f2fa:	f107 030c 	add.w	r3, r7, #12
 800f2fe:	2101      	movs	r1, #1
 800f300:	4618      	mov	r0, r3
 800f302:	f000 f80a 	bl	800f31a <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEplEi>
 800f306:	4633      	mov	r3, r6
 800f308:	68fa      	ldr	r2, [r7, #12]
 800f30a:	68b9      	ldr	r1, [r7, #8]
 800f30c:	f001 f9df 	bl	80106ce <_ZSt21__unguarded_partitionIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEET_S9_S9_S9_T0_>
 800f310:	4603      	mov	r3, r0
    }
 800f312:	4618      	mov	r0, r3
 800f314:	371c      	adds	r7, #28
 800f316:	46bd      	mov	sp, r7
 800f318:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800f31a <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEplEi>:
      operator+(difference_type __n) const _GLIBCXX_NOEXCEPT
 800f31a:	b580      	push	{r7, lr}
 800f31c:	b084      	sub	sp, #16
 800f31e:	af00      	add	r7, sp, #0
 800f320:	6078      	str	r0, [r7, #4]
 800f322:	6039      	str	r1, [r7, #0]
      { return __normal_iterator(_M_current + __n); }
 800f324:	687b      	ldr	r3, [r7, #4]
 800f326:	681a      	ldr	r2, [r3, #0]
 800f328:	683b      	ldr	r3, [r7, #0]
 800f32a:	009b      	lsls	r3, r3, #2
 800f32c:	4413      	add	r3, r2
 800f32e:	60fb      	str	r3, [r7, #12]
 800f330:	f107 020c 	add.w	r2, r7, #12
 800f334:	f107 0308 	add.w	r3, r7, #8
 800f338:	4611      	mov	r1, r2
 800f33a:	4618      	mov	r0, r3
 800f33c:	f7f4 faef 	bl	800391e <_ZN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEC1ERKS1_>
 800f340:	68bb      	ldr	r3, [r7, #8]
 800f342:	4618      	mov	r0, r3
 800f344:	3710      	adds	r7, #16
 800f346:	46bd      	mov	sp, r7
 800f348:	bd80      	pop	{r7, pc}

0800f34a <_ZN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 800f34a:	b480      	push	{r7}
 800f34c:	b083      	sub	sp, #12
 800f34e:	af00      	add	r7, sp, #0
 800f350:	6078      	str	r0, [r7, #4]
	++_M_current;
 800f352:	687b      	ldr	r3, [r7, #4]
 800f354:	681b      	ldr	r3, [r3, #0]
 800f356:	1d1a      	adds	r2, r3, #4
 800f358:	687b      	ldr	r3, [r7, #4]
 800f35a:	601a      	str	r2, [r3, #0]
	return *this;
 800f35c:	687b      	ldr	r3, [r7, #4]
      }
 800f35e:	4618      	mov	r0, r3
 800f360:	370c      	adds	r7, #12
 800f362:	46bd      	mov	sp, r7
 800f364:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f368:	4770      	bx	lr

0800f36a <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 800f36a:	b480      	push	{r7}
 800f36c:	b083      	sub	sp, #12
 800f36e:	af00      	add	r7, sp, #0
 800f370:	6078      	str	r0, [r7, #4]
      { return *_M_current; }
 800f372:	687b      	ldr	r3, [r7, #4]
 800f374:	681b      	ldr	r3, [r3, #0]
 800f376:	4618      	mov	r0, r3
 800f378:	370c      	adds	r7, #12
 800f37a:	46bd      	mov	sp, r7
 800f37c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f380:	4770      	bx	lr

0800f382 <_ZNK9__gnu_cxx5__ops15_Iter_less_iterclINS_17__normal_iteratorIPfSt6vectorIfSaIfEEEES8_EEbT_T0_>:
      operator()(_Iterator1 __it1, _Iterator2 __it2) const
 800f382:	b580      	push	{r7, lr}
 800f384:	ed2d 8b02 	vpush	{d8}
 800f388:	b084      	sub	sp, #16
 800f38a:	af00      	add	r7, sp, #0
 800f38c:	60f8      	str	r0, [r7, #12]
 800f38e:	60b9      	str	r1, [r7, #8]
 800f390:	607a      	str	r2, [r7, #4]
      { return *__it1 < *__it2; }
 800f392:	f107 0308 	add.w	r3, r7, #8
 800f396:	4618      	mov	r0, r3
 800f398:	f7ff ffe7 	bl	800f36a <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEdeEv>
 800f39c:	4603      	mov	r3, r0
 800f39e:	ed93 8a00 	vldr	s16, [r3]
 800f3a2:	1d3b      	adds	r3, r7, #4
 800f3a4:	4618      	mov	r0, r3
 800f3a6:	f7ff ffe0 	bl	800f36a <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEdeEv>
 800f3aa:	4603      	mov	r3, r0
 800f3ac:	edd3 7a00 	vldr	s15, [r3]
 800f3b0:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800f3b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f3b8:	bf4c      	ite	mi
 800f3ba:	2301      	movmi	r3, #1
 800f3bc:	2300      	movpl	r3, #0
 800f3be:	b2db      	uxtb	r3, r3
 800f3c0:	4618      	mov	r0, r3
 800f3c2:	3710      	adds	r7, #16
 800f3c4:	46bd      	mov	sp, r7
 800f3c6:	ecbd 8b02 	vpop	{d8}
 800f3ca:	bd80      	pop	{r7, pc}

0800f3cc <_ZSt13move_backwardIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEES6_ET0_T_S8_S7_>:
    move_backward(_BI1 __first, _BI1 __last, _BI2 __result)
 800f3cc:	b590      	push	{r4, r7, lr}
 800f3ce:	b085      	sub	sp, #20
 800f3d0:	af00      	add	r7, sp, #0
 800f3d2:	60f8      	str	r0, [r7, #12]
 800f3d4:	60b9      	str	r1, [r7, #8]
 800f3d6:	607a      	str	r2, [r7, #4]
      return std::__copy_move_backward_a<true>(std::__miter_base(__first),
 800f3d8:	68f8      	ldr	r0, [r7, #12]
 800f3da:	f001 f9cb 	bl	8010774 <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEET_S7_>
 800f3de:	4604      	mov	r4, r0
 800f3e0:	68b8      	ldr	r0, [r7, #8]
 800f3e2:	f001 f9c7 	bl	8010774 <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEET_S7_>
 800f3e6:	4603      	mov	r3, r0
 800f3e8:	687a      	ldr	r2, [r7, #4]
 800f3ea:	4619      	mov	r1, r3
 800f3ec:	4620      	mov	r0, r4
 800f3ee:	f001 f9cc 	bl	801078a <_ZSt22__copy_move_backward_aILb1EN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEES6_ET1_T0_S8_S7_>
 800f3f2:	4603      	mov	r3, r0
    }
 800f3f4:	4618      	mov	r0, r3
 800f3f6:	3714      	adds	r7, #20
 800f3f8:	46bd      	mov	sp, r7
 800f3fa:	bd90      	pop	{r4, r7, pc}

0800f3fc <_ZSt16__insertion_sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_T0_>:
    __insertion_sort(_RandomAccessIterator __first,
 800f3fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f3fe:	b087      	sub	sp, #28
 800f400:	af00      	add	r7, sp, #0
 800f402:	60f8      	str	r0, [r7, #12]
 800f404:	60b9      	str	r1, [r7, #8]
 800f406:	713a      	strb	r2, [r7, #4]
      if (__first == __last) return;
 800f408:	f107 0208 	add.w	r2, r7, #8
 800f40c:	f107 030c 	add.w	r3, r7, #12
 800f410:	4611      	mov	r1, r2
 800f412:	4618      	mov	r0, r3
 800f414:	f7fd fe5f 	bl	800d0d6 <_ZN9__gnu_cxxeqIPfSt6vectorIfSaIfEEEEbRKNS_17__normal_iteratorIT_T0_EESA_>
 800f418:	4603      	mov	r3, r0
 800f41a:	2b00      	cmp	r3, #0
 800f41c:	d153      	bne.n	800f4c6 <_ZSt16__insertion_sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_T0_+0xca>
      for (_RandomAccessIterator __i = __first + 1; __i != __last; ++__i)
 800f41e:	f107 030c 	add.w	r3, r7, #12
 800f422:	2101      	movs	r1, #1
 800f424:	4618      	mov	r0, r3
 800f426:	f7ff ff78 	bl	800f31a <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEplEi>
 800f42a:	4603      	mov	r3, r0
 800f42c:	617b      	str	r3, [r7, #20]
 800f42e:	e03b      	b.n	800f4a8 <_ZSt16__insertion_sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_T0_+0xac>
	  if (__comp(__i, __first))
 800f430:	1d3b      	adds	r3, r7, #4
 800f432:	68fa      	ldr	r2, [r7, #12]
 800f434:	6979      	ldr	r1, [r7, #20]
 800f436:	4618      	mov	r0, r3
 800f438:	f7ff ffa3 	bl	800f382 <_ZNK9__gnu_cxx5__ops15_Iter_less_iterclINS_17__normal_iteratorIPfSt6vectorIfSaIfEEEES8_EEbT_T0_>
 800f43c:	4603      	mov	r3, r0
 800f43e:	2b00      	cmp	r3, #0
 800f440:	d026      	beq.n	800f490 <_ZSt16__insertion_sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_T0_+0x94>
		__val = _GLIBCXX_MOVE(*__i);
 800f442:	f107 0314 	add.w	r3, r7, #20
 800f446:	4618      	mov	r0, r3
 800f448:	f7ff ff8f 	bl	800f36a <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEdeEv>
 800f44c:	4603      	mov	r3, r0
 800f44e:	4618      	mov	r0, r3
 800f450:	f7fd fc78 	bl	800cd44 <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>
 800f454:	4603      	mov	r3, r0
 800f456:	681b      	ldr	r3, [r3, #0]
 800f458:	613b      	str	r3, [r7, #16]
	      _GLIBCXX_MOVE_BACKWARD3(__first, __i, __i + 1);
 800f45a:	f107 0314 	add.w	r3, r7, #20
 800f45e:	2101      	movs	r1, #1
 800f460:	4618      	mov	r0, r3
 800f462:	f7ff ff5a 	bl	800f31a <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEplEi>
 800f466:	4603      	mov	r3, r0
 800f468:	461a      	mov	r2, r3
 800f46a:	6979      	ldr	r1, [r7, #20]
 800f46c:	68f8      	ldr	r0, [r7, #12]
 800f46e:	f7ff ffad 	bl	800f3cc <_ZSt13move_backwardIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEES6_ET0_T_S8_S7_>
	      *__first = _GLIBCXX_MOVE(__val);
 800f472:	f107 0310 	add.w	r3, r7, #16
 800f476:	4618      	mov	r0, r3
 800f478:	f7fd fc64 	bl	800cd44 <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>
 800f47c:	4603      	mov	r3, r0
 800f47e:	681c      	ldr	r4, [r3, #0]
 800f480:	f107 030c 	add.w	r3, r7, #12
 800f484:	4618      	mov	r0, r3
 800f486:	f7ff ff70 	bl	800f36a <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEdeEv>
 800f48a:	4603      	mov	r3, r0
 800f48c:	601c      	str	r4, [r3, #0]
 800f48e:	e006      	b.n	800f49e <_ZSt16__insertion_sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_T0_+0xa2>
				__gnu_cxx::__ops::__val_comp_iter(__comp));
 800f490:	4630      	mov	r0, r6
 800f492:	f7f5 f91d 	bl	80046d0 <_ZN9__gnu_cxx5__ops15__val_comp_iterENS0_15_Iter_less_iterE>
	    std::__unguarded_linear_insert(__i,
 800f496:	4629      	mov	r1, r5
 800f498:	6978      	ldr	r0, [r7, #20]
 800f49a:	f001 f9b7 	bl	801080c <_ZSt25__unguarded_linear_insertIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops14_Val_less_iterEEvT_T0_>
      for (_RandomAccessIterator __i = __first + 1; __i != __last; ++__i)
 800f49e:	f107 0314 	add.w	r3, r7, #20
 800f4a2:	4618      	mov	r0, r3
 800f4a4:	f7ff ff51 	bl	800f34a <_ZN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEppEv>
 800f4a8:	f107 0208 	add.w	r2, r7, #8
 800f4ac:	f107 0314 	add.w	r3, r7, #20
 800f4b0:	4611      	mov	r1, r2
 800f4b2:	4618      	mov	r0, r3
 800f4b4:	f7fd fe0f 	bl	800d0d6 <_ZN9__gnu_cxxeqIPfSt6vectorIfSaIfEEEEbRKNS_17__normal_iteratorIT_T0_EESA_>
 800f4b8:	4603      	mov	r3, r0
 800f4ba:	f083 0301 	eor.w	r3, r3, #1
 800f4be:	b2db      	uxtb	r3, r3
 800f4c0:	2b00      	cmp	r3, #0
 800f4c2:	d1b5      	bne.n	800f430 <_ZSt16__insertion_sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_T0_+0x34>
 800f4c4:	e000      	b.n	800f4c8 <_ZSt16__insertion_sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_T0_+0xcc>
      if (__first == __last) return;
 800f4c6:	bf00      	nop
    }
 800f4c8:	371c      	adds	r7, #28
 800f4ca:	46bd      	mov	sp, r7
 800f4cc:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800f4ce <_ZSt26__unguarded_insertion_sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_T0_>:
    __unguarded_insertion_sort(_RandomAccessIterator __first,
 800f4ce:	b5b0      	push	{r4, r5, r7, lr}
 800f4d0:	b086      	sub	sp, #24
 800f4d2:	af00      	add	r7, sp, #0
 800f4d4:	60f8      	str	r0, [r7, #12]
 800f4d6:	60b9      	str	r1, [r7, #8]
 800f4d8:	713a      	strb	r2, [r7, #4]
      for (_RandomAccessIterator __i = __first; __i != __last; ++__i)
 800f4da:	68fb      	ldr	r3, [r7, #12]
 800f4dc:	617b      	str	r3, [r7, #20]
 800f4de:	e00b      	b.n	800f4f8 <_ZSt26__unguarded_insertion_sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_T0_+0x2a>
				__gnu_cxx::__ops::__val_comp_iter(__comp));
 800f4e0:	4628      	mov	r0, r5
 800f4e2:	f7f5 f8f5 	bl	80046d0 <_ZN9__gnu_cxx5__ops15__val_comp_iterENS0_15_Iter_less_iterE>
	std::__unguarded_linear_insert(__i,
 800f4e6:	4621      	mov	r1, r4
 800f4e8:	6978      	ldr	r0, [r7, #20]
 800f4ea:	f001 f98f 	bl	801080c <_ZSt25__unguarded_linear_insertIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops14_Val_less_iterEEvT_T0_>
      for (_RandomAccessIterator __i = __first; __i != __last; ++__i)
 800f4ee:	f107 0314 	add.w	r3, r7, #20
 800f4f2:	4618      	mov	r0, r3
 800f4f4:	f7ff ff29 	bl	800f34a <_ZN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEppEv>
 800f4f8:	f107 0208 	add.w	r2, r7, #8
 800f4fc:	f107 0314 	add.w	r3, r7, #20
 800f500:	4611      	mov	r1, r2
 800f502:	4618      	mov	r0, r3
 800f504:	f7fd fde7 	bl	800d0d6 <_ZN9__gnu_cxxeqIPfSt6vectorIfSaIfEEEEbRKNS_17__normal_iteratorIT_T0_EESA_>
 800f508:	4603      	mov	r3, r0
 800f50a:	f083 0301 	eor.w	r3, r3, #1
 800f50e:	b2db      	uxtb	r3, r3
 800f510:	2b00      	cmp	r3, #0
 800f512:	d1e5      	bne.n	800f4e0 <_ZSt26__unguarded_insertion_sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_T0_+0x12>
    }
 800f514:	bf00      	nop
 800f516:	bf00      	nop
 800f518:	3718      	adds	r7, #24
 800f51a:	46bd      	mov	sp, r7
 800f51c:	bdb0      	pop	{r4, r5, r7, pc}

0800f51e <_ZSt4moveIRZN3jlb10Controller15lateral_controlEfEUlbE_EONSt16remove_referenceIT_E4typeEOS5_>:
    move(_Tp&& __t) noexcept
 800f51e:	b480      	push	{r7}
 800f520:	b083      	sub	sp, #12
 800f522:	af00      	add	r7, sp, #0
 800f524:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800f526:	687b      	ldr	r3, [r7, #4]
 800f528:	4618      	mov	r0, r3
 800f52a:	370c      	adds	r7, #12
 800f52c:	46bd      	mov	sp, r7
 800f52e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f532:	4770      	bx	lr

0800f534 <_ZN9__gnu_cxx5__ops10_Iter_predIZN3jlb10Controller15lateral_controlEfEUlbE_EC1ES4_>:
      _Iter_pred(_Predicate __pred)
 800f534:	b580      	push	{r7, lr}
 800f536:	b082      	sub	sp, #8
 800f538:	af00      	add	r7, sp, #0
 800f53a:	6078      	str	r0, [r7, #4]
 800f53c:	7039      	strb	r1, [r7, #0]
	: _M_pred(_GLIBCXX_MOVE(__pred))
 800f53e:	463b      	mov	r3, r7
 800f540:	4618      	mov	r0, r3
 800f542:	f7ff ffec 	bl	800f51e <_ZSt4moveIRZN3jlb10Controller15lateral_controlEfEUlbE_EONSt16remove_referenceIT_E4typeEOS5_>
      { }
 800f546:	687b      	ldr	r3, [r7, #4]
 800f548:	4618      	mov	r0, r3
 800f54a:	3708      	adds	r7, #8
 800f54c:	46bd      	mov	sp, r7
 800f54e:	bd80      	pop	{r7, pc}

0800f550 <_ZN9__gnu_cxx5__ops8__negateIZN3jlb10Controller15lateral_controlEfEUlbE_EENS0_12_Iter_negateIT_EENS0_10_Iter_predIS6_EE>:
    };

  template<typename _Predicate>
    _GLIBCXX20_CONSTEXPR
    inline _Iter_negate<_Predicate>
    __negate(_Iter_pred<_Predicate> __pred)
 800f550:	b5b0      	push	{r4, r5, r7, lr}
 800f552:	b084      	sub	sp, #16
 800f554:	af00      	add	r7, sp, #0
 800f556:	7138      	strb	r0, [r7, #4]
    { return _Iter_negate<_Predicate>(_GLIBCXX_MOVE(__pred._M_pred)); }
 800f558:	1d3b      	adds	r3, r7, #4
 800f55a:	4618      	mov	r0, r3
 800f55c:	f7ff ffdf 	bl	800f51e <_ZSt4moveIRZN3jlb10Controller15lateral_controlEfEUlbE_EONSt16remove_referenceIT_E4typeEOS5_>
 800f560:	f107 030c 	add.w	r3, r7, #12
 800f564:	4629      	mov	r1, r5
 800f566:	4618      	mov	r0, r3
 800f568:	f001 f99b 	bl	80108a2 <_ZN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEfEUlbE_EC1ES4_>
 800f56c:	bf00      	nop
 800f56e:	4620      	mov	r0, r4
 800f570:	3710      	adds	r7, #16
 800f572:	46bd      	mov	sp, r7
 800f574:	bdb0      	pop	{r4, r5, r7, pc}

0800f576 <_ZN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEfEUlbE_EclIPbEEbT_>:
	operator()(_Iterator __it)
 800f576:	b580      	push	{r7, lr}
 800f578:	b082      	sub	sp, #8
 800f57a:	af00      	add	r7, sp, #0
 800f57c:	6078      	str	r0, [r7, #4]
 800f57e:	6039      	str	r1, [r7, #0]
	{ return !bool(_M_pred(*__it)); }
 800f580:	687a      	ldr	r2, [r7, #4]
 800f582:	683b      	ldr	r3, [r7, #0]
 800f584:	781b      	ldrb	r3, [r3, #0]
 800f586:	4619      	mov	r1, r3
 800f588:	4610      	mov	r0, r2
 800f58a:	f7f5 fccf 	bl	8004f2c <_ZZN3jlb10Controller15lateral_controlEfENKUlbE_clEb>
 800f58e:	4603      	mov	r3, r0
 800f590:	f083 0301 	eor.w	r3, r3, #1
 800f594:	b2db      	uxtb	r3, r3
 800f596:	4618      	mov	r0, r3
 800f598:	3708      	adds	r7, #8
 800f59a:	46bd      	mov	sp, r7
 800f59c:	bd80      	pop	{r7, pc}

0800f59e <_ZSt9__find_ifIPbN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEfEUlbE_EEET_S8_S8_T0_St26random_access_iterator_tag>:
    __find_if(_RandomAccessIterator __first, _RandomAccessIterator __last,
 800f59e:	b580      	push	{r7, lr}
 800f5a0:	b086      	sub	sp, #24
 800f5a2:	af00      	add	r7, sp, #0
 800f5a4:	60f8      	str	r0, [r7, #12]
 800f5a6:	60b9      	str	r1, [r7, #8]
 800f5a8:	713a      	strb	r2, [r7, #4]
 800f5aa:	703b      	strb	r3, [r7, #0]
	__trip_count = (__last - __first) >> 2;
 800f5ac:	68ba      	ldr	r2, [r7, #8]
 800f5ae:	68fb      	ldr	r3, [r7, #12]
 800f5b0:	1ad3      	subs	r3, r2, r3
 800f5b2:	109b      	asrs	r3, r3, #2
 800f5b4:	617b      	str	r3, [r7, #20]
      for (; __trip_count > 0; --__trip_count)
 800f5b6:	e036      	b.n	800f626 <_ZSt9__find_ifIPbN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEfEUlbE_EEET_S8_S8_T0_St26random_access_iterator_tag+0x88>
	  if (__pred(__first))
 800f5b8:	1d3b      	adds	r3, r7, #4
 800f5ba:	68f9      	ldr	r1, [r7, #12]
 800f5bc:	4618      	mov	r0, r3
 800f5be:	f7ff ffda 	bl	800f576 <_ZN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEfEUlbE_EclIPbEEbT_>
 800f5c2:	4603      	mov	r3, r0
 800f5c4:	2b00      	cmp	r3, #0
 800f5c6:	d001      	beq.n	800f5cc <_ZSt9__find_ifIPbN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEfEUlbE_EEET_S8_S8_T0_St26random_access_iterator_tag+0x2e>
	    return __first;
 800f5c8:	68fb      	ldr	r3, [r7, #12]
 800f5ca:	e063      	b.n	800f694 <_ZSt9__find_ifIPbN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEfEUlbE_EEET_S8_S8_T0_St26random_access_iterator_tag+0xf6>
	  ++__first;
 800f5cc:	68fb      	ldr	r3, [r7, #12]
 800f5ce:	3301      	adds	r3, #1
 800f5d0:	60fb      	str	r3, [r7, #12]
	  if (__pred(__first))
 800f5d2:	1d3b      	adds	r3, r7, #4
 800f5d4:	68f9      	ldr	r1, [r7, #12]
 800f5d6:	4618      	mov	r0, r3
 800f5d8:	f7ff ffcd 	bl	800f576 <_ZN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEfEUlbE_EclIPbEEbT_>
 800f5dc:	4603      	mov	r3, r0
 800f5de:	2b00      	cmp	r3, #0
 800f5e0:	d001      	beq.n	800f5e6 <_ZSt9__find_ifIPbN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEfEUlbE_EEET_S8_S8_T0_St26random_access_iterator_tag+0x48>
	    return __first;
 800f5e2:	68fb      	ldr	r3, [r7, #12]
 800f5e4:	e056      	b.n	800f694 <_ZSt9__find_ifIPbN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEfEUlbE_EEET_S8_S8_T0_St26random_access_iterator_tag+0xf6>
	  ++__first;
 800f5e6:	68fb      	ldr	r3, [r7, #12]
 800f5e8:	3301      	adds	r3, #1
 800f5ea:	60fb      	str	r3, [r7, #12]
	  if (__pred(__first))
 800f5ec:	1d3b      	adds	r3, r7, #4
 800f5ee:	68f9      	ldr	r1, [r7, #12]
 800f5f0:	4618      	mov	r0, r3
 800f5f2:	f7ff ffc0 	bl	800f576 <_ZN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEfEUlbE_EclIPbEEbT_>
 800f5f6:	4603      	mov	r3, r0
 800f5f8:	2b00      	cmp	r3, #0
 800f5fa:	d001      	beq.n	800f600 <_ZSt9__find_ifIPbN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEfEUlbE_EEET_S8_S8_T0_St26random_access_iterator_tag+0x62>
	    return __first;
 800f5fc:	68fb      	ldr	r3, [r7, #12]
 800f5fe:	e049      	b.n	800f694 <_ZSt9__find_ifIPbN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEfEUlbE_EEET_S8_S8_T0_St26random_access_iterator_tag+0xf6>
	  ++__first;
 800f600:	68fb      	ldr	r3, [r7, #12]
 800f602:	3301      	adds	r3, #1
 800f604:	60fb      	str	r3, [r7, #12]
	  if (__pred(__first))
 800f606:	1d3b      	adds	r3, r7, #4
 800f608:	68f9      	ldr	r1, [r7, #12]
 800f60a:	4618      	mov	r0, r3
 800f60c:	f7ff ffb3 	bl	800f576 <_ZN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEfEUlbE_EclIPbEEbT_>
 800f610:	4603      	mov	r3, r0
 800f612:	2b00      	cmp	r3, #0
 800f614:	d001      	beq.n	800f61a <_ZSt9__find_ifIPbN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEfEUlbE_EEET_S8_S8_T0_St26random_access_iterator_tag+0x7c>
	    return __first;
 800f616:	68fb      	ldr	r3, [r7, #12]
 800f618:	e03c      	b.n	800f694 <_ZSt9__find_ifIPbN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEfEUlbE_EEET_S8_S8_T0_St26random_access_iterator_tag+0xf6>
	  ++__first;
 800f61a:	68fb      	ldr	r3, [r7, #12]
 800f61c:	3301      	adds	r3, #1
 800f61e:	60fb      	str	r3, [r7, #12]
      for (; __trip_count > 0; --__trip_count)
 800f620:	697b      	ldr	r3, [r7, #20]
 800f622:	3b01      	subs	r3, #1
 800f624:	617b      	str	r3, [r7, #20]
 800f626:	697b      	ldr	r3, [r7, #20]
 800f628:	2b00      	cmp	r3, #0
 800f62a:	dcc5      	bgt.n	800f5b8 <_ZSt9__find_ifIPbN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEfEUlbE_EEET_S8_S8_T0_St26random_access_iterator_tag+0x1a>
      switch (__last - __first)
 800f62c:	68ba      	ldr	r2, [r7, #8]
 800f62e:	68fb      	ldr	r3, [r7, #12]
 800f630:	1ad3      	subs	r3, r2, r3
 800f632:	2b03      	cmp	r3, #3
 800f634:	d006      	beq.n	800f644 <_ZSt9__find_ifIPbN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEfEUlbE_EEET_S8_S8_T0_St26random_access_iterator_tag+0xa6>
 800f636:	2b03      	cmp	r3, #3
 800f638:	dc2b      	bgt.n	800f692 <_ZSt9__find_ifIPbN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEfEUlbE_EEET_S8_S8_T0_St26random_access_iterator_tag+0xf4>
 800f63a:	2b01      	cmp	r3, #1
 800f63c:	d01c      	beq.n	800f678 <_ZSt9__find_ifIPbN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEfEUlbE_EEET_S8_S8_T0_St26random_access_iterator_tag+0xda>
 800f63e:	2b02      	cmp	r3, #2
 800f640:	d00d      	beq.n	800f65e <_ZSt9__find_ifIPbN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEfEUlbE_EEET_S8_S8_T0_St26random_access_iterator_tag+0xc0>
 800f642:	e026      	b.n	800f692 <_ZSt9__find_ifIPbN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEfEUlbE_EEET_S8_S8_T0_St26random_access_iterator_tag+0xf4>
	  if (__pred(__first))
 800f644:	1d3b      	adds	r3, r7, #4
 800f646:	68f9      	ldr	r1, [r7, #12]
 800f648:	4618      	mov	r0, r3
 800f64a:	f7ff ff94 	bl	800f576 <_ZN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEfEUlbE_EclIPbEEbT_>
 800f64e:	4603      	mov	r3, r0
 800f650:	2b00      	cmp	r3, #0
 800f652:	d001      	beq.n	800f658 <_ZSt9__find_ifIPbN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEfEUlbE_EEET_S8_S8_T0_St26random_access_iterator_tag+0xba>
	    return __first;
 800f654:	68fb      	ldr	r3, [r7, #12]
 800f656:	e01d      	b.n	800f694 <_ZSt9__find_ifIPbN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEfEUlbE_EEET_S8_S8_T0_St26random_access_iterator_tag+0xf6>
	  ++__first;
 800f658:	68fb      	ldr	r3, [r7, #12]
 800f65a:	3301      	adds	r3, #1
 800f65c:	60fb      	str	r3, [r7, #12]
	  if (__pred(__first))
 800f65e:	1d3b      	adds	r3, r7, #4
 800f660:	68f9      	ldr	r1, [r7, #12]
 800f662:	4618      	mov	r0, r3
 800f664:	f7ff ff87 	bl	800f576 <_ZN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEfEUlbE_EclIPbEEbT_>
 800f668:	4603      	mov	r3, r0
 800f66a:	2b00      	cmp	r3, #0
 800f66c:	d001      	beq.n	800f672 <_ZSt9__find_ifIPbN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEfEUlbE_EEET_S8_S8_T0_St26random_access_iterator_tag+0xd4>
	    return __first;
 800f66e:	68fb      	ldr	r3, [r7, #12]
 800f670:	e010      	b.n	800f694 <_ZSt9__find_ifIPbN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEfEUlbE_EEET_S8_S8_T0_St26random_access_iterator_tag+0xf6>
	  ++__first;
 800f672:	68fb      	ldr	r3, [r7, #12]
 800f674:	3301      	adds	r3, #1
 800f676:	60fb      	str	r3, [r7, #12]
	  if (__pred(__first))
 800f678:	1d3b      	adds	r3, r7, #4
 800f67a:	68f9      	ldr	r1, [r7, #12]
 800f67c:	4618      	mov	r0, r3
 800f67e:	f7ff ff7a 	bl	800f576 <_ZN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEfEUlbE_EclIPbEEbT_>
 800f682:	4603      	mov	r3, r0
 800f684:	2b00      	cmp	r3, #0
 800f686:	d001      	beq.n	800f68c <_ZSt9__find_ifIPbN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEfEUlbE_EEET_S8_S8_T0_St26random_access_iterator_tag+0xee>
	    return __first;
 800f688:	68fb      	ldr	r3, [r7, #12]
 800f68a:	e003      	b.n	800f694 <_ZSt9__find_ifIPbN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEfEUlbE_EEET_S8_S8_T0_St26random_access_iterator_tag+0xf6>
	  ++__first;
 800f68c:	68fb      	ldr	r3, [r7, #12]
 800f68e:	3301      	adds	r3, #1
 800f690:	60fb      	str	r3, [r7, #12]
	  return __last;
 800f692:	68bb      	ldr	r3, [r7, #8]
    }
 800f694:	4618      	mov	r0, r3
 800f696:	3718      	adds	r7, #24
 800f698:	46bd      	mov	sp, r7
 800f69a:	bd80      	pop	{r7, pc}

0800f69c <_ZSt4moveIRZN3jlb10Controller15lateral_controlEfEUlbE0_EONSt16remove_referenceIT_E4typeEOS5_>:
    move(_Tp&& __t) noexcept
 800f69c:	b480      	push	{r7}
 800f69e:	b083      	sub	sp, #12
 800f6a0:	af00      	add	r7, sp, #0
 800f6a2:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800f6a4:	687b      	ldr	r3, [r7, #4]
 800f6a6:	4618      	mov	r0, r3
 800f6a8:	370c      	adds	r7, #12
 800f6aa:	46bd      	mov	sp, r7
 800f6ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6b0:	4770      	bx	lr

0800f6b2 <_ZN9__gnu_cxx5__ops10_Iter_predIZN3jlb10Controller15lateral_controlEfEUlbE0_EC1ES4_>:
      _Iter_pred(_Predicate __pred)
 800f6b2:	b580      	push	{r7, lr}
 800f6b4:	b082      	sub	sp, #8
 800f6b6:	af00      	add	r7, sp, #0
 800f6b8:	6078      	str	r0, [r7, #4]
 800f6ba:	7039      	strb	r1, [r7, #0]
	: _M_pred(_GLIBCXX_MOVE(__pred))
 800f6bc:	463b      	mov	r3, r7
 800f6be:	4618      	mov	r0, r3
 800f6c0:	f7ff ffec 	bl	800f69c <_ZSt4moveIRZN3jlb10Controller15lateral_controlEfEUlbE0_EONSt16remove_referenceIT_E4typeEOS5_>
      { }
 800f6c4:	687b      	ldr	r3, [r7, #4]
 800f6c6:	4618      	mov	r0, r3
 800f6c8:	3708      	adds	r7, #8
 800f6ca:	46bd      	mov	sp, r7
 800f6cc:	bd80      	pop	{r7, pc}

0800f6ce <_ZN9__gnu_cxx5__ops8__negateIZN3jlb10Controller15lateral_controlEfEUlbE0_EENS0_12_Iter_negateIT_EENS0_10_Iter_predIS6_EE>:
    __negate(_Iter_pred<_Predicate> __pred)
 800f6ce:	b5b0      	push	{r4, r5, r7, lr}
 800f6d0:	b084      	sub	sp, #16
 800f6d2:	af00      	add	r7, sp, #0
 800f6d4:	7138      	strb	r0, [r7, #4]
    { return _Iter_negate<_Predicate>(_GLIBCXX_MOVE(__pred._M_pred)); }
 800f6d6:	1d3b      	adds	r3, r7, #4
 800f6d8:	4618      	mov	r0, r3
 800f6da:	f7ff ffdf 	bl	800f69c <_ZSt4moveIRZN3jlb10Controller15lateral_controlEfEUlbE0_EONSt16remove_referenceIT_E4typeEOS5_>
 800f6de:	f107 030c 	add.w	r3, r7, #12
 800f6e2:	4629      	mov	r1, r5
 800f6e4:	4618      	mov	r0, r3
 800f6e6:	f001 f8ea 	bl	80108be <_ZN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEfEUlbE0_EC1ES4_>
 800f6ea:	bf00      	nop
 800f6ec:	4620      	mov	r0, r4
 800f6ee:	3710      	adds	r7, #16
 800f6f0:	46bd      	mov	sp, r7
 800f6f2:	bdb0      	pop	{r4, r5, r7, pc}

0800f6f4 <_ZN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEfEUlbE0_EclIPbEEbT_>:
	operator()(_Iterator __it)
 800f6f4:	b580      	push	{r7, lr}
 800f6f6:	b082      	sub	sp, #8
 800f6f8:	af00      	add	r7, sp, #0
 800f6fa:	6078      	str	r0, [r7, #4]
 800f6fc:	6039      	str	r1, [r7, #0]
	{ return !bool(_M_pred(*__it)); }
 800f6fe:	687a      	ldr	r2, [r7, #4]
 800f700:	683b      	ldr	r3, [r7, #0]
 800f702:	781b      	ldrb	r3, [r3, #0]
 800f704:	4619      	mov	r1, r3
 800f706:	4610      	mov	r0, r2
 800f708:	f7f5 fc1d 	bl	8004f46 <_ZZN3jlb10Controller15lateral_controlEfENKUlbE0_clEb>
 800f70c:	4603      	mov	r3, r0
 800f70e:	f083 0301 	eor.w	r3, r3, #1
 800f712:	b2db      	uxtb	r3, r3
 800f714:	4618      	mov	r0, r3
 800f716:	3708      	adds	r7, #8
 800f718:	46bd      	mov	sp, r7
 800f71a:	bd80      	pop	{r7, pc}

0800f71c <_ZSt9__find_ifIPbN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEfEUlbE0_EEET_S8_S8_T0_St26random_access_iterator_tag>:
    __find_if(_RandomAccessIterator __first, _RandomAccessIterator __last,
 800f71c:	b580      	push	{r7, lr}
 800f71e:	b086      	sub	sp, #24
 800f720:	af00      	add	r7, sp, #0
 800f722:	60f8      	str	r0, [r7, #12]
 800f724:	60b9      	str	r1, [r7, #8]
 800f726:	713a      	strb	r2, [r7, #4]
 800f728:	703b      	strb	r3, [r7, #0]
	__trip_count = (__last - __first) >> 2;
 800f72a:	68ba      	ldr	r2, [r7, #8]
 800f72c:	68fb      	ldr	r3, [r7, #12]
 800f72e:	1ad3      	subs	r3, r2, r3
 800f730:	109b      	asrs	r3, r3, #2
 800f732:	617b      	str	r3, [r7, #20]
      for (; __trip_count > 0; --__trip_count)
 800f734:	e036      	b.n	800f7a4 <_ZSt9__find_ifIPbN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEfEUlbE0_EEET_S8_S8_T0_St26random_access_iterator_tag+0x88>
	  if (__pred(__first))
 800f736:	1d3b      	adds	r3, r7, #4
 800f738:	68f9      	ldr	r1, [r7, #12]
 800f73a:	4618      	mov	r0, r3
 800f73c:	f7ff ffda 	bl	800f6f4 <_ZN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEfEUlbE0_EclIPbEEbT_>
 800f740:	4603      	mov	r3, r0
 800f742:	2b00      	cmp	r3, #0
 800f744:	d001      	beq.n	800f74a <_ZSt9__find_ifIPbN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEfEUlbE0_EEET_S8_S8_T0_St26random_access_iterator_tag+0x2e>
	    return __first;
 800f746:	68fb      	ldr	r3, [r7, #12]
 800f748:	e063      	b.n	800f812 <_ZSt9__find_ifIPbN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEfEUlbE0_EEET_S8_S8_T0_St26random_access_iterator_tag+0xf6>
	  ++__first;
 800f74a:	68fb      	ldr	r3, [r7, #12]
 800f74c:	3301      	adds	r3, #1
 800f74e:	60fb      	str	r3, [r7, #12]
	  if (__pred(__first))
 800f750:	1d3b      	adds	r3, r7, #4
 800f752:	68f9      	ldr	r1, [r7, #12]
 800f754:	4618      	mov	r0, r3
 800f756:	f7ff ffcd 	bl	800f6f4 <_ZN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEfEUlbE0_EclIPbEEbT_>
 800f75a:	4603      	mov	r3, r0
 800f75c:	2b00      	cmp	r3, #0
 800f75e:	d001      	beq.n	800f764 <_ZSt9__find_ifIPbN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEfEUlbE0_EEET_S8_S8_T0_St26random_access_iterator_tag+0x48>
	    return __first;
 800f760:	68fb      	ldr	r3, [r7, #12]
 800f762:	e056      	b.n	800f812 <_ZSt9__find_ifIPbN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEfEUlbE0_EEET_S8_S8_T0_St26random_access_iterator_tag+0xf6>
	  ++__first;
 800f764:	68fb      	ldr	r3, [r7, #12]
 800f766:	3301      	adds	r3, #1
 800f768:	60fb      	str	r3, [r7, #12]
	  if (__pred(__first))
 800f76a:	1d3b      	adds	r3, r7, #4
 800f76c:	68f9      	ldr	r1, [r7, #12]
 800f76e:	4618      	mov	r0, r3
 800f770:	f7ff ffc0 	bl	800f6f4 <_ZN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEfEUlbE0_EclIPbEEbT_>
 800f774:	4603      	mov	r3, r0
 800f776:	2b00      	cmp	r3, #0
 800f778:	d001      	beq.n	800f77e <_ZSt9__find_ifIPbN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEfEUlbE0_EEET_S8_S8_T0_St26random_access_iterator_tag+0x62>
	    return __first;
 800f77a:	68fb      	ldr	r3, [r7, #12]
 800f77c:	e049      	b.n	800f812 <_ZSt9__find_ifIPbN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEfEUlbE0_EEET_S8_S8_T0_St26random_access_iterator_tag+0xf6>
	  ++__first;
 800f77e:	68fb      	ldr	r3, [r7, #12]
 800f780:	3301      	adds	r3, #1
 800f782:	60fb      	str	r3, [r7, #12]
	  if (__pred(__first))
 800f784:	1d3b      	adds	r3, r7, #4
 800f786:	68f9      	ldr	r1, [r7, #12]
 800f788:	4618      	mov	r0, r3
 800f78a:	f7ff ffb3 	bl	800f6f4 <_ZN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEfEUlbE0_EclIPbEEbT_>
 800f78e:	4603      	mov	r3, r0
 800f790:	2b00      	cmp	r3, #0
 800f792:	d001      	beq.n	800f798 <_ZSt9__find_ifIPbN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEfEUlbE0_EEET_S8_S8_T0_St26random_access_iterator_tag+0x7c>
	    return __first;
 800f794:	68fb      	ldr	r3, [r7, #12]
 800f796:	e03c      	b.n	800f812 <_ZSt9__find_ifIPbN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEfEUlbE0_EEET_S8_S8_T0_St26random_access_iterator_tag+0xf6>
	  ++__first;
 800f798:	68fb      	ldr	r3, [r7, #12]
 800f79a:	3301      	adds	r3, #1
 800f79c:	60fb      	str	r3, [r7, #12]
      for (; __trip_count > 0; --__trip_count)
 800f79e:	697b      	ldr	r3, [r7, #20]
 800f7a0:	3b01      	subs	r3, #1
 800f7a2:	617b      	str	r3, [r7, #20]
 800f7a4:	697b      	ldr	r3, [r7, #20]
 800f7a6:	2b00      	cmp	r3, #0
 800f7a8:	dcc5      	bgt.n	800f736 <_ZSt9__find_ifIPbN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEfEUlbE0_EEET_S8_S8_T0_St26random_access_iterator_tag+0x1a>
      switch (__last - __first)
 800f7aa:	68ba      	ldr	r2, [r7, #8]
 800f7ac:	68fb      	ldr	r3, [r7, #12]
 800f7ae:	1ad3      	subs	r3, r2, r3
 800f7b0:	2b03      	cmp	r3, #3
 800f7b2:	d006      	beq.n	800f7c2 <_ZSt9__find_ifIPbN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEfEUlbE0_EEET_S8_S8_T0_St26random_access_iterator_tag+0xa6>
 800f7b4:	2b03      	cmp	r3, #3
 800f7b6:	dc2b      	bgt.n	800f810 <_ZSt9__find_ifIPbN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEfEUlbE0_EEET_S8_S8_T0_St26random_access_iterator_tag+0xf4>
 800f7b8:	2b01      	cmp	r3, #1
 800f7ba:	d01c      	beq.n	800f7f6 <_ZSt9__find_ifIPbN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEfEUlbE0_EEET_S8_S8_T0_St26random_access_iterator_tag+0xda>
 800f7bc:	2b02      	cmp	r3, #2
 800f7be:	d00d      	beq.n	800f7dc <_ZSt9__find_ifIPbN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEfEUlbE0_EEET_S8_S8_T0_St26random_access_iterator_tag+0xc0>
 800f7c0:	e026      	b.n	800f810 <_ZSt9__find_ifIPbN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEfEUlbE0_EEET_S8_S8_T0_St26random_access_iterator_tag+0xf4>
	  if (__pred(__first))
 800f7c2:	1d3b      	adds	r3, r7, #4
 800f7c4:	68f9      	ldr	r1, [r7, #12]
 800f7c6:	4618      	mov	r0, r3
 800f7c8:	f7ff ff94 	bl	800f6f4 <_ZN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEfEUlbE0_EclIPbEEbT_>
 800f7cc:	4603      	mov	r3, r0
 800f7ce:	2b00      	cmp	r3, #0
 800f7d0:	d001      	beq.n	800f7d6 <_ZSt9__find_ifIPbN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEfEUlbE0_EEET_S8_S8_T0_St26random_access_iterator_tag+0xba>
	    return __first;
 800f7d2:	68fb      	ldr	r3, [r7, #12]
 800f7d4:	e01d      	b.n	800f812 <_ZSt9__find_ifIPbN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEfEUlbE0_EEET_S8_S8_T0_St26random_access_iterator_tag+0xf6>
	  ++__first;
 800f7d6:	68fb      	ldr	r3, [r7, #12]
 800f7d8:	3301      	adds	r3, #1
 800f7da:	60fb      	str	r3, [r7, #12]
	  if (__pred(__first))
 800f7dc:	1d3b      	adds	r3, r7, #4
 800f7de:	68f9      	ldr	r1, [r7, #12]
 800f7e0:	4618      	mov	r0, r3
 800f7e2:	f7ff ff87 	bl	800f6f4 <_ZN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEfEUlbE0_EclIPbEEbT_>
 800f7e6:	4603      	mov	r3, r0
 800f7e8:	2b00      	cmp	r3, #0
 800f7ea:	d001      	beq.n	800f7f0 <_ZSt9__find_ifIPbN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEfEUlbE0_EEET_S8_S8_T0_St26random_access_iterator_tag+0xd4>
	    return __first;
 800f7ec:	68fb      	ldr	r3, [r7, #12]
 800f7ee:	e010      	b.n	800f812 <_ZSt9__find_ifIPbN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEfEUlbE0_EEET_S8_S8_T0_St26random_access_iterator_tag+0xf6>
	  ++__first;
 800f7f0:	68fb      	ldr	r3, [r7, #12]
 800f7f2:	3301      	adds	r3, #1
 800f7f4:	60fb      	str	r3, [r7, #12]
	  if (__pred(__first))
 800f7f6:	1d3b      	adds	r3, r7, #4
 800f7f8:	68f9      	ldr	r1, [r7, #12]
 800f7fa:	4618      	mov	r0, r3
 800f7fc:	f7ff ff7a 	bl	800f6f4 <_ZN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEfEUlbE0_EclIPbEEbT_>
 800f800:	4603      	mov	r3, r0
 800f802:	2b00      	cmp	r3, #0
 800f804:	d001      	beq.n	800f80a <_ZSt9__find_ifIPbN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEfEUlbE0_EEET_S8_S8_T0_St26random_access_iterator_tag+0xee>
	    return __first;
 800f806:	68fb      	ldr	r3, [r7, #12]
 800f808:	e003      	b.n	800f812 <_ZSt9__find_ifIPbN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEfEUlbE0_EEET_S8_S8_T0_St26random_access_iterator_tag+0xf6>
	  ++__first;
 800f80a:	68fb      	ldr	r3, [r7, #12]
 800f80c:	3301      	adds	r3, #1
 800f80e:	60fb      	str	r3, [r7, #12]
	  return __last;
 800f810:	68bb      	ldr	r3, [r7, #8]
    }
 800f812:	4618      	mov	r0, r3
 800f814:	3718      	adds	r7, #24
 800f816:	46bd      	mov	sp, r7
 800f818:	bd80      	pop	{r7, pc}

0800f81a <_ZNSaIfEC1ERKS_>:
      allocator(const allocator& __a) _GLIBCXX_NOTHROW
 800f81a:	b580      	push	{r7, lr}
 800f81c:	b082      	sub	sp, #8
 800f81e:	af00      	add	r7, sp, #0
 800f820:	6078      	str	r0, [r7, #4]
 800f822:	6039      	str	r1, [r7, #0]
      : __allocator_base<_Tp>(__a) { }
 800f824:	6839      	ldr	r1, [r7, #0]
 800f826:	6878      	ldr	r0, [r7, #4]
 800f828:	f001 f857 	bl	80108da <_ZN9__gnu_cxx13new_allocatorIfEC1ERKS1_>
 800f82c:	687b      	ldr	r3, [r7, #4]
 800f82e:	4618      	mov	r0, r3
 800f830:	3708      	adds	r7, #8
 800f832:	46bd      	mov	sp, r7
 800f834:	bd80      	pop	{r7, pc}

0800f836 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEEPfEET0_T_SC_SB_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 800f836:	b580      	push	{r7, lr}
 800f838:	b084      	sub	sp, #16
 800f83a:	af00      	add	r7, sp, #0
 800f83c:	60f8      	str	r0, [r7, #12]
 800f83e:	60b9      	str	r1, [r7, #8]
 800f840:	607a      	str	r2, [r7, #4]
        { return std::copy(__first, __last, __result); }
 800f842:	687a      	ldr	r2, [r7, #4]
 800f844:	68b9      	ldr	r1, [r7, #8]
 800f846:	68f8      	ldr	r0, [r7, #12]
 800f848:	f001 f853 	bl	80108f2 <_ZSt4copyIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEEPfET0_T_SA_S9_>
 800f84c:	4603      	mov	r3, r0
 800f84e:	4618      	mov	r0, r3
 800f850:	3710      	adds	r7, #16
 800f852:	46bd      	mov	sp, r7
 800f854:	bd80      	pop	{r7, pc}

0800f856 <_ZSt12__niter_baseIPKfSt6vectorIfSaIfEEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>:
_GLIBCXX_BEGIN_NAMESPACE_VERSION

  template<typename _Iterator, typename _Container>
    _GLIBCXX20_CONSTEXPR
    _Iterator
    __niter_base(__gnu_cxx::__normal_iterator<_Iterator, _Container> __it)
 800f856:	b580      	push	{r7, lr}
 800f858:	b082      	sub	sp, #8
 800f85a:	af00      	add	r7, sp, #0
 800f85c:	6078      	str	r0, [r7, #4]
    _GLIBCXX_NOEXCEPT_IF(std::is_nothrow_copy_constructible<_Iterator>::value)
    { return __it.base(); }
 800f85e:	1d3b      	adds	r3, r7, #4
 800f860:	4618      	mov	r0, r3
 800f862:	f001 f85e 	bl	8010922 <_ZNK9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEE4baseEv>
 800f866:	4603      	mov	r3, r0
 800f868:	681b      	ldr	r3, [r3, #0]
 800f86a:	4618      	mov	r0, r3
 800f86c:	3708      	adds	r7, #8
 800f86e:	46bd      	mov	sp, r7
 800f870:	bd80      	pop	{r7, pc}

0800f872 <_ZSt12__niter_baseIPfSt6vectorIfSaIfEEET_N9__gnu_cxx17__normal_iteratorIS4_T0_EE>:
    __niter_base(__gnu_cxx::__normal_iterator<_Iterator, _Container> __it)
 800f872:	b580      	push	{r7, lr}
 800f874:	b082      	sub	sp, #8
 800f876:	af00      	add	r7, sp, #0
 800f878:	6078      	str	r0, [r7, #4]
    { return __it.base(); }
 800f87a:	1d3b      	adds	r3, r7, #4
 800f87c:	4618      	mov	r0, r3
 800f87e:	f7f4 f8f2 	bl	8003a66 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEE4baseEv>
 800f882:	4603      	mov	r3, r0
 800f884:	681b      	ldr	r3, [r3, #0]
 800f886:	4618      	mov	r0, r3
 800f888:	3708      	adds	r7, #8
 800f88a:	46bd      	mov	sp, r7
 800f88c:	bd80      	pop	{r7, pc}

0800f88e <_ZSt14__copy_move_a1ILb0EPKfPfET1_T0_S4_S3_>:
    __copy_move_a1(_II __first, _II __last, _OI __result)
 800f88e:	b580      	push	{r7, lr}
 800f890:	b084      	sub	sp, #16
 800f892:	af00      	add	r7, sp, #0
 800f894:	60f8      	str	r0, [r7, #12]
 800f896:	60b9      	str	r1, [r7, #8]
 800f898:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_a2<_IsMove>(__first, __last, __result); }
 800f89a:	687a      	ldr	r2, [r7, #4]
 800f89c:	68b9      	ldr	r1, [r7, #8]
 800f89e:	68f8      	ldr	r0, [r7, #12]
 800f8a0:	f001 f84a 	bl	8010938 <_ZSt14__copy_move_a2ILb0EPKfPfET1_T0_S4_S3_>
 800f8a4:	4603      	mov	r3, r0
 800f8a6:	4618      	mov	r0, r3
 800f8a8:	3710      	adds	r7, #16
 800f8aa:	46bd      	mov	sp, r7
 800f8ac:	bd80      	pop	{r7, pc}

0800f8ae <_ZSt12__niter_wrapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEES2_ET_S7_T0_>:
    __niter_wrap(_From __from, _To __res)
 800f8ae:	b580      	push	{r7, lr}
 800f8b0:	b082      	sub	sp, #8
 800f8b2:	af00      	add	r7, sp, #0
 800f8b4:	6078      	str	r0, [r7, #4]
 800f8b6:	6039      	str	r1, [r7, #0]
    { return __from + (__res - std::__niter_base(__from)); }
 800f8b8:	6878      	ldr	r0, [r7, #4]
 800f8ba:	f7ff ffda 	bl	800f872 <_ZSt12__niter_baseIPfSt6vectorIfSaIfEEET_N9__gnu_cxx17__normal_iteratorIS4_T0_EE>
 800f8be:	4602      	mov	r2, r0
 800f8c0:	683b      	ldr	r3, [r7, #0]
 800f8c2:	1a9b      	subs	r3, r3, r2
 800f8c4:	109b      	asrs	r3, r3, #2
 800f8c6:	461a      	mov	r2, r3
 800f8c8:	1d3b      	adds	r3, r7, #4
 800f8ca:	4611      	mov	r1, r2
 800f8cc:	4618      	mov	r0, r3
 800f8ce:	f7ff fd24 	bl	800f31a <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEplEi>
 800f8d2:	4603      	mov	r3, r0
 800f8d4:	4618      	mov	r0, r3
 800f8d6:	3708      	adds	r7, #8
 800f8d8:	46bd      	mov	sp, r7
 800f8da:	bd80      	pop	{r7, pc}

0800f8dc <_ZNSt12_Destroy_auxILb0EE9__destroyIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEEEvT_S9_>:
	__destroy(_ForwardIterator __first, _ForwardIterator __last)
 800f8dc:	b580      	push	{r7, lr}
 800f8de:	b082      	sub	sp, #8
 800f8e0:	af00      	add	r7, sp, #0
 800f8e2:	6078      	str	r0, [r7, #4]
 800f8e4:	6039      	str	r1, [r7, #0]
	  for (; __first != __last; ++__first)
 800f8e6:	e00f      	b.n	800f908 <_ZNSt12_Destroy_auxILb0EE9__destroyIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEEEvT_S9_+0x2c>
	    std::_Destroy(std::__addressof(*__first));
 800f8e8:	1d3b      	adds	r3, r7, #4
 800f8ea:	4618      	mov	r0, r3
 800f8ec:	f7ff fd3d 	bl	800f36a <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEdeEv>
 800f8f0:	4603      	mov	r3, r0
 800f8f2:	4618      	mov	r0, r3
 800f8f4:	f7f4 f966 	bl	8003bc4 <_ZSt11__addressofIfEPT_RS0_>
 800f8f8:	4603      	mov	r3, r0
 800f8fa:	4618      	mov	r0, r3
 800f8fc:	f7f4 f96d 	bl	8003bda <_ZSt8_DestroyIfEvPT_>
	  for (; __first != __last; ++__first)
 800f900:	1d3b      	adds	r3, r7, #4
 800f902:	4618      	mov	r0, r3
 800f904:	f7ff fd21 	bl	800f34a <_ZN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEppEv>
 800f908:	463a      	mov	r2, r7
 800f90a:	1d3b      	adds	r3, r7, #4
 800f90c:	4611      	mov	r1, r2
 800f90e:	4618      	mov	r0, r3
 800f910:	f7fd fbe1 	bl	800d0d6 <_ZN9__gnu_cxxeqIPfSt6vectorIfSaIfEEEEbRKNS_17__normal_iteratorIT_T0_EESA_>
 800f914:	4603      	mov	r3, r0
 800f916:	f083 0301 	eor.w	r3, r3, #1
 800f91a:	b2db      	uxtb	r3, r3
 800f91c:	2b00      	cmp	r3, #0
 800f91e:	d1e3      	bne.n	800f8e8 <_ZNSt12_Destroy_auxILb0EE9__destroyIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEEEvT_S9_+0xc>
	}
 800f920:	bf00      	nop
 800f922:	bf00      	nop
 800f924:	3708      	adds	r7, #8
 800f926:	46bd      	mov	sp, r7
 800f928:	bd80      	pop	{r7, pc}

0800f92a <_ZNSt12_Destroy_auxILb1EE9__destroyIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEEEvT_S9_>:
        __destroy(_ForwardIterator, _ForwardIterator) { }
 800f92a:	b480      	push	{r7}
 800f92c:	b083      	sub	sp, #12
 800f92e:	af00      	add	r7, sp, #0
 800f930:	6078      	str	r0, [r7, #4]
 800f932:	6039      	str	r1, [r7, #0]
 800f934:	bf00      	nop
 800f936:	370c      	adds	r7, #12
 800f938:	46bd      	mov	sp, r7
 800f93a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f93e:	4770      	bx	lr

0800f940 <_ZSt14__copy_move_a2ILb0EPfS0_ET1_T0_S2_S1_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 800f940:	b580      	push	{r7, lr}
 800f942:	b084      	sub	sp, #16
 800f944:	af00      	add	r7, sp, #0
 800f946:	60f8      	str	r0, [r7, #12]
 800f948:	60b9      	str	r1, [r7, #8]
 800f94a:	607a      	str	r2, [r7, #4]
      if (std::is_constant_evaluated())
 800f94c:	f7f3 f8de 	bl	8002b0c <_ZSt21is_constant_evaluatedv>
 800f950:	4603      	mov	r3, r0
 800f952:	2b00      	cmp	r3, #0
 800f954:	d006      	beq.n	800f964 <_ZSt14__copy_move_a2ILb0EPfS0_ET1_T0_S2_S1_+0x24>
	  __copy_m(__first, __last, __result);
 800f956:	687a      	ldr	r2, [r7, #4]
 800f958:	68b9      	ldr	r1, [r7, #8]
 800f95a:	68f8      	ldr	r0, [r7, #12]
 800f95c:	f001 f809 	bl	8010972 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPfS3_EET0_T_S5_S4_>
 800f960:	4603      	mov	r3, r0
 800f962:	e006      	b.n	800f972 <_ZSt14__copy_move_a2ILb0EPfS0_ET1_T0_S2_S1_+0x32>
			      _Category>::__copy_m(__first, __last, __result);
 800f964:	687a      	ldr	r2, [r7, #4]
 800f966:	68b9      	ldr	r1, [r7, #8]
 800f968:	68f8      	ldr	r0, [r7, #12]
 800f96a:	f001 f825 	bl	80109b8 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIfEEPT_PKS3_S6_S4_>
 800f96e:	4603      	mov	r3, r0
 800f970:	bf00      	nop
    }
 800f972:	4618      	mov	r0, r3
 800f974:	3710      	adds	r7, #16
 800f976:	46bd      	mov	sp, r7
 800f978:	bd80      	pop	{r7, pc}

0800f97a <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIPfS2_EET0_T_S4_S3_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 800f97a:	b580      	push	{r7, lr}
 800f97c:	b084      	sub	sp, #16
 800f97e:	af00      	add	r7, sp, #0
 800f980:	60f8      	str	r0, [r7, #12]
 800f982:	60b9      	str	r1, [r7, #8]
 800f984:	607a      	str	r2, [r7, #4]
        { return std::copy(__first, __last, __result); }
 800f986:	687a      	ldr	r2, [r7, #4]
 800f988:	68b9      	ldr	r1, [r7, #8]
 800f98a:	68f8      	ldr	r0, [r7, #12]
 800f98c:	f7fc fe9b 	bl	800c6c6 <_ZSt4copyIPfS0_ET0_T_S2_S1_>
 800f990:	4603      	mov	r3, r0
 800f992:	4618      	mov	r0, r3
 800f994:	3710      	adds	r7, #16
 800f996:	46bd      	mov	sp, r7
 800f998:	bd80      	pop	{r7, pc}

0800f99a <_ZNSt12_Destroy_auxILb0EE9__destroyIPN3jlb4EdgeEEEvT_S5_>:
	__destroy(_ForwardIterator __first, _ForwardIterator __last)
 800f99a:	b580      	push	{r7, lr}
 800f99c:	b082      	sub	sp, #8
 800f99e:	af00      	add	r7, sp, #0
 800f9a0:	6078      	str	r0, [r7, #4]
 800f9a2:	6039      	str	r1, [r7, #0]
	  for (; __first != __last; ++__first)
 800f9a4:	e009      	b.n	800f9ba <_ZNSt12_Destroy_auxILb0EE9__destroyIPN3jlb4EdgeEEEvT_S5_+0x20>
	    std::_Destroy(std::__addressof(*__first));
 800f9a6:	6878      	ldr	r0, [r7, #4]
 800f9a8:	f001 f835 	bl	8010a16 <_ZSt11__addressofIN3jlb4EdgeEEPT_RS2_>
 800f9ac:	4603      	mov	r3, r0
 800f9ae:	4618      	mov	r0, r3
 800f9b0:	f001 f83c 	bl	8010a2c <_ZSt8_DestroyIN3jlb4EdgeEEvPT_>
	  for (; __first != __last; ++__first)
 800f9b4:	687b      	ldr	r3, [r7, #4]
 800f9b6:	3318      	adds	r3, #24
 800f9b8:	607b      	str	r3, [r7, #4]
 800f9ba:	687a      	ldr	r2, [r7, #4]
 800f9bc:	683b      	ldr	r3, [r7, #0]
 800f9be:	429a      	cmp	r2, r3
 800f9c0:	d1f1      	bne.n	800f9a6 <_ZNSt12_Destroy_auxILb0EE9__destroyIPN3jlb4EdgeEEEvT_S5_+0xc>
	}
 800f9c2:	bf00      	nop
 800f9c4:	bf00      	nop
 800f9c6:	3708      	adds	r7, #8
 800f9c8:	46bd      	mov	sp, r7
 800f9ca:	bd80      	pop	{r7, pc}

0800f9cc <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIN9__gnu_cxx17__normal_iteratorIPKcSt6vectorIcSaIcEEEEPcEET0_T_SC_SB_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 800f9cc:	b580      	push	{r7, lr}
 800f9ce:	b084      	sub	sp, #16
 800f9d0:	af00      	add	r7, sp, #0
 800f9d2:	60f8      	str	r0, [r7, #12]
 800f9d4:	60b9      	str	r1, [r7, #8]
 800f9d6:	607a      	str	r2, [r7, #4]
        { return std::copy(__first, __last, __result); }
 800f9d8:	687a      	ldr	r2, [r7, #4]
 800f9da:	68b9      	ldr	r1, [r7, #8]
 800f9dc:	68f8      	ldr	r0, [r7, #12]
 800f9de:	f001 f830 	bl	8010a42 <_ZSt4copyIN9__gnu_cxx17__normal_iteratorIPKcSt6vectorIcSaIcEEEEPcET0_T_SA_S9_>
 800f9e2:	4603      	mov	r3, r0
 800f9e4:	4618      	mov	r0, r3
 800f9e6:	3710      	adds	r7, #16
 800f9e8:	46bd      	mov	sp, r7
 800f9ea:	bd80      	pop	{r7, pc}

0800f9ec <_ZNSt12_Destroy_auxILb0EE9__destroyIPcEEvT_S3_>:
	__destroy(_ForwardIterator __first, _ForwardIterator __last)
 800f9ec:	b580      	push	{r7, lr}
 800f9ee:	b082      	sub	sp, #8
 800f9f0:	af00      	add	r7, sp, #0
 800f9f2:	6078      	str	r0, [r7, #4]
 800f9f4:	6039      	str	r1, [r7, #0]
	  for (; __first != __last; ++__first)
 800f9f6:	e009      	b.n	800fa0c <_ZNSt12_Destroy_auxILb0EE9__destroyIPcEEvT_S3_+0x20>
	    std::_Destroy(std::__addressof(*__first));
 800f9f8:	6878      	ldr	r0, [r7, #4]
 800f9fa:	f000 fd42 	bl	8010482 <_ZSt11__addressofIcEPT_RS0_>
 800f9fe:	4603      	mov	r3, r0
 800fa00:	4618      	mov	r0, r3
 800fa02:	f001 f836 	bl	8010a72 <_ZSt8_DestroyIcEvPT_>
	  for (; __first != __last; ++__first)
 800fa06:	687b      	ldr	r3, [r7, #4]
 800fa08:	3301      	adds	r3, #1
 800fa0a:	607b      	str	r3, [r7, #4]
 800fa0c:	687a      	ldr	r2, [r7, #4]
 800fa0e:	683b      	ldr	r3, [r7, #0]
 800fa10:	429a      	cmp	r2, r3
 800fa12:	d1f1      	bne.n	800f9f8 <_ZNSt12_Destroy_auxILb0EE9__destroyIPcEEvT_S3_+0xc>
	}
 800fa14:	bf00      	nop
 800fa16:	bf00      	nop
 800fa18:	3708      	adds	r7, #8
 800fa1a:	46bd      	mov	sp, r7
 800fa1c:	bd80      	pop	{r7, pc}

0800fa1e <_ZNSt12_Destroy_auxILb1EE9__destroyIPcEEvT_S3_>:
        __destroy(_ForwardIterator, _ForwardIterator) { }
 800fa1e:	b480      	push	{r7}
 800fa20:	b083      	sub	sp, #12
 800fa22:	af00      	add	r7, sp, #0
 800fa24:	6078      	str	r0, [r7, #4]
 800fa26:	6039      	str	r1, [r7, #0]
 800fa28:	bf00      	nop
 800fa2a:	370c      	adds	r7, #12
 800fa2c:	46bd      	mov	sp, r7
 800fa2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa32:	4770      	bx	lr

0800fa34 <_ZNSt12_Vector_baseIcSaIcEE12_Vector_implC1EOS2_>:
	_Vector_impl(_Vector_impl&& __x) noexcept
 800fa34:	b590      	push	{r4, r7, lr}
 800fa36:	b083      	sub	sp, #12
 800fa38:	af00      	add	r7, sp, #0
 800fa3a:	6078      	str	r0, [r7, #4]
 800fa3c:	6039      	str	r1, [r7, #0]
	: _Tp_alloc_type(std::move(__x)), _Vector_impl_data(std::move(__x))
 800fa3e:	6838      	ldr	r0, [r7, #0]
 800fa40:	f001 f822 	bl	8010a88 <_ZSt4moveIRNSt12_Vector_baseIcSaIcEE12_Vector_implEEONSt16remove_referenceIT_E4typeEOS6_>
 800fa44:	4603      	mov	r3, r0
 800fa46:	4619      	mov	r1, r3
 800fa48:	6878      	ldr	r0, [r7, #4]
 800fa4a:	f011 fbad 	bl	80211a8 <_ZNSaIcEC1ERKS_>
 800fa4e:	687c      	ldr	r4, [r7, #4]
 800fa50:	6838      	ldr	r0, [r7, #0]
 800fa52:	f001 f819 	bl	8010a88 <_ZSt4moveIRNSt12_Vector_baseIcSaIcEE12_Vector_implEEONSt16remove_referenceIT_E4typeEOS6_>
 800fa56:	4603      	mov	r3, r0
 800fa58:	4619      	mov	r1, r3
 800fa5a:	4620      	mov	r0, r4
 800fa5c:	f001 f81f 	bl	8010a9e <_ZNSt12_Vector_baseIcSaIcEE17_Vector_impl_dataC1EOS2_>
	{ }
 800fa60:	687b      	ldr	r3, [r7, #4]
 800fa62:	4618      	mov	r0, r3
 800fa64:	370c      	adds	r7, #12
 800fa66:	46bd      	mov	sp, r7
 800fa68:	bd90      	pop	{r4, r7, pc}

0800fa6a <_ZN9__gnu_cxx17__normal_iteratorIPN3jlb4EdgeESt6vectorIS2_SaIS2_EEEC1ERKS3_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 800fa6a:	b480      	push	{r7}
 800fa6c:	b083      	sub	sp, #12
 800fa6e:	af00      	add	r7, sp, #0
 800fa70:	6078      	str	r0, [r7, #4]
 800fa72:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 800fa74:	683b      	ldr	r3, [r7, #0]
 800fa76:	681a      	ldr	r2, [r3, #0]
 800fa78:	687b      	ldr	r3, [r7, #4]
 800fa7a:	601a      	str	r2, [r3, #0]
 800fa7c:	687b      	ldr	r3, [r7, #4]
 800fa7e:	4618      	mov	r0, r3
 800fa80:	370c      	adds	r7, #12
 800fa82:	46bd      	mov	sp, r7
 800fa84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa88:	4770      	bx	lr

0800fa8a <_ZNKSt6vectorIN3jlb4EdgeESaIS1_EE12_M_check_lenEjPKc>:
      _M_check_len(size_type __n, const char* __s) const
 800fa8a:	b590      	push	{r4, r7, lr}
 800fa8c:	b087      	sub	sp, #28
 800fa8e:	af00      	add	r7, sp, #0
 800fa90:	60f8      	str	r0, [r7, #12]
 800fa92:	60b9      	str	r1, [r7, #8]
 800fa94:	607a      	str	r2, [r7, #4]
	if (max_size() - size() < __n)
 800fa96:	68f8      	ldr	r0, [r7, #12]
 800fa98:	f001 f824 	bl	8010ae4 <_ZNKSt6vectorIN3jlb4EdgeESaIS1_EE8max_sizeEv>
 800fa9c:	4604      	mov	r4, r0
 800fa9e:	68f8      	ldr	r0, [r7, #12]
 800faa0:	f7fd f9aa 	bl	800cdf8 <_ZNKSt6vectorIN3jlb4EdgeESaIS1_EE4sizeEv>
 800faa4:	4603      	mov	r3, r0
 800faa6:	1ae2      	subs	r2, r4, r3
 800faa8:	68bb      	ldr	r3, [r7, #8]
 800faaa:	429a      	cmp	r2, r3
 800faac:	bf34      	ite	cc
 800faae:	2301      	movcc	r3, #1
 800fab0:	2300      	movcs	r3, #0
 800fab2:	b2db      	uxtb	r3, r3
 800fab4:	2b00      	cmp	r3, #0
 800fab6:	d002      	beq.n	800fabe <_ZNKSt6vectorIN3jlb4EdgeESaIS1_EE12_M_check_lenEjPKc+0x34>
	  __throw_length_error(__N(__s));
 800fab8:	6878      	ldr	r0, [r7, #4]
 800faba:	f011 fb7d 	bl	80211b8 <_ZSt20__throw_length_errorPKc>
	const size_type __len = size() + (std::max)(size(), __n);
 800fabe:	68f8      	ldr	r0, [r7, #12]
 800fac0:	f7fd f99a 	bl	800cdf8 <_ZNKSt6vectorIN3jlb4EdgeESaIS1_EE4sizeEv>
 800fac4:	4604      	mov	r4, r0
 800fac6:	68f8      	ldr	r0, [r7, #12]
 800fac8:	f7fd f996 	bl	800cdf8 <_ZNKSt6vectorIN3jlb4EdgeESaIS1_EE4sizeEv>
 800facc:	4603      	mov	r3, r0
 800face:	613b      	str	r3, [r7, #16]
 800fad0:	f107 0208 	add.w	r2, r7, #8
 800fad4:	f107 0310 	add.w	r3, r7, #16
 800fad8:	4611      	mov	r1, r2
 800fada:	4618      	mov	r0, r3
 800fadc:	f7f4 f813 	bl	8003b06 <_ZSt3maxIjERKT_S2_S2_>
 800fae0:	4603      	mov	r3, r0
 800fae2:	681b      	ldr	r3, [r3, #0]
 800fae4:	4423      	add	r3, r4
 800fae6:	617b      	str	r3, [r7, #20]
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 800fae8:	68f8      	ldr	r0, [r7, #12]
 800faea:	f7fd f985 	bl	800cdf8 <_ZNKSt6vectorIN3jlb4EdgeESaIS1_EE4sizeEv>
 800faee:	4602      	mov	r2, r0
 800faf0:	697b      	ldr	r3, [r7, #20]
 800faf2:	4293      	cmp	r3, r2
 800faf4:	d306      	bcc.n	800fb04 <_ZNKSt6vectorIN3jlb4EdgeESaIS1_EE12_M_check_lenEjPKc+0x7a>
 800faf6:	68f8      	ldr	r0, [r7, #12]
 800faf8:	f000 fff4 	bl	8010ae4 <_ZNKSt6vectorIN3jlb4EdgeESaIS1_EE8max_sizeEv>
 800fafc:	4602      	mov	r2, r0
 800fafe:	697b      	ldr	r3, [r7, #20]
 800fb00:	4293      	cmp	r3, r2
 800fb02:	d904      	bls.n	800fb0e <_ZNKSt6vectorIN3jlb4EdgeESaIS1_EE12_M_check_lenEjPKc+0x84>
 800fb04:	68f8      	ldr	r0, [r7, #12]
 800fb06:	f000 ffed 	bl	8010ae4 <_ZNKSt6vectorIN3jlb4EdgeESaIS1_EE8max_sizeEv>
 800fb0a:	4603      	mov	r3, r0
 800fb0c:	e000      	b.n	800fb10 <_ZNKSt6vectorIN3jlb4EdgeESaIS1_EE12_M_check_lenEjPKc+0x86>
 800fb0e:	697b      	ldr	r3, [r7, #20]
      }
 800fb10:	4618      	mov	r0, r3
 800fb12:	371c      	adds	r7, #28
 800fb14:	46bd      	mov	sp, r7
 800fb16:	bd90      	pop	{r4, r7, pc}

0800fb18 <_ZNSt6vectorIN3jlb4EdgeESaIS1_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 800fb18:	b580      	push	{r7, lr}
 800fb1a:	b084      	sub	sp, #16
 800fb1c:	af00      	add	r7, sp, #0
 800fb1e:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_start); }
 800fb20:	687a      	ldr	r2, [r7, #4]
 800fb22:	f107 030c 	add.w	r3, r7, #12
 800fb26:	4611      	mov	r1, r2
 800fb28:	4618      	mov	r0, r3
 800fb2a:	f7ff ff9e 	bl	800fa6a <_ZN9__gnu_cxx17__normal_iteratorIPN3jlb4EdgeESt6vectorIS2_SaIS2_EEEC1ERKS3_>
 800fb2e:	68fb      	ldr	r3, [r7, #12]
 800fb30:	4618      	mov	r0, r3
 800fb32:	3710      	adds	r7, #16
 800fb34:	46bd      	mov	sp, r7
 800fb36:	bd80      	pop	{r7, pc}

0800fb38 <_ZN9__gnu_cxxmiIPN3jlb4EdgeESt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>:
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
 800fb38:	b590      	push	{r4, r7, lr}
 800fb3a:	b083      	sub	sp, #12
 800fb3c:	af00      	add	r7, sp, #0
 800fb3e:	6078      	str	r0, [r7, #4]
 800fb40:	6039      	str	r1, [r7, #0]
    { return __lhs.base() - __rhs.base(); }
 800fb42:	6878      	ldr	r0, [r7, #4]
 800fb44:	f000 f83a 	bl	800fbbc <_ZNK9__gnu_cxx17__normal_iteratorIPN3jlb4EdgeESt6vectorIS2_SaIS2_EEE4baseEv>
 800fb48:	4603      	mov	r3, r0
 800fb4a:	681c      	ldr	r4, [r3, #0]
 800fb4c:	6838      	ldr	r0, [r7, #0]
 800fb4e:	f000 f835 	bl	800fbbc <_ZNK9__gnu_cxx17__normal_iteratorIPN3jlb4EdgeESt6vectorIS2_SaIS2_EEE4baseEv>
 800fb52:	4603      	mov	r3, r0
 800fb54:	681b      	ldr	r3, [r3, #0]
 800fb56:	1ae3      	subs	r3, r4, r3
 800fb58:	10db      	asrs	r3, r3, #3
 800fb5a:	4a03      	ldr	r2, [pc, #12]	; (800fb68 <_ZN9__gnu_cxxmiIPN3jlb4EdgeESt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_+0x30>)
 800fb5c:	fb02 f303 	mul.w	r3, r2, r3
 800fb60:	4618      	mov	r0, r3
 800fb62:	370c      	adds	r7, #12
 800fb64:	46bd      	mov	sp, r7
 800fb66:	bd90      	pop	{r4, r7, pc}
 800fb68:	aaaaaaab 	.word	0xaaaaaaab

0800fb6c <_ZNSt12_Vector_baseIN3jlb4EdgeESaIS1_EE11_M_allocateEj>:
      _M_allocate(size_t __n)
 800fb6c:	b580      	push	{r7, lr}
 800fb6e:	b082      	sub	sp, #8
 800fb70:	af00      	add	r7, sp, #0
 800fb72:	6078      	str	r0, [r7, #4]
 800fb74:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 800fb76:	683b      	ldr	r3, [r7, #0]
 800fb78:	2b00      	cmp	r3, #0
 800fb7a:	d006      	beq.n	800fb8a <_ZNSt12_Vector_baseIN3jlb4EdgeESaIS1_EE11_M_allocateEj+0x1e>
 800fb7c:	687b      	ldr	r3, [r7, #4]
 800fb7e:	6839      	ldr	r1, [r7, #0]
 800fb80:	4618      	mov	r0, r3
 800fb82:	f000 ffc0 	bl	8010b06 <_ZNSt16allocator_traitsISaIN3jlb4EdgeEEE8allocateERS2_j>
 800fb86:	4603      	mov	r3, r0
 800fb88:	e000      	b.n	800fb8c <_ZNSt12_Vector_baseIN3jlb4EdgeESaIS1_EE11_M_allocateEj+0x20>
 800fb8a:	2300      	movs	r3, #0
      }
 800fb8c:	4618      	mov	r0, r3
 800fb8e:	3708      	adds	r7, #8
 800fb90:	46bd      	mov	sp, r7
 800fb92:	bd80      	pop	{r7, pc}

0800fb94 <_ZNSt6vectorIN3jlb4EdgeESaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>:
      _S_relocate(pointer __first, pointer __last, pointer __result,
 800fb94:	b590      	push	{r4, r7, lr}
 800fb96:	b087      	sub	sp, #28
 800fb98:	af02      	add	r7, sp, #8
 800fb9a:	60f8      	str	r0, [r7, #12]
 800fb9c:	60b9      	str	r1, [r7, #8]
 800fb9e:	607a      	str	r2, [r7, #4]
 800fba0:	603b      	str	r3, [r7, #0]
	return _S_do_relocate(__first, __last, __result, __alloc, __do_it{});
 800fba2:	f88d 4000 	strb.w	r4, [sp]
 800fba6:	683b      	ldr	r3, [r7, #0]
 800fba8:	687a      	ldr	r2, [r7, #4]
 800fbaa:	68b9      	ldr	r1, [r7, #8]
 800fbac:	68f8      	ldr	r0, [r7, #12]
 800fbae:	f000 ffcd 	bl	8010b4c <_ZNSt6vectorIN3jlb4EdgeESaIS1_EE14_S_do_relocateEPS1_S4_S4_RS2_St17integral_constantIbLb1EE>
 800fbb2:	4603      	mov	r3, r0
      }
 800fbb4:	4618      	mov	r0, r3
 800fbb6:	3714      	adds	r7, #20
 800fbb8:	46bd      	mov	sp, r7
 800fbba:	bd90      	pop	{r4, r7, pc}

0800fbbc <_ZNK9__gnu_cxx17__normal_iteratorIPN3jlb4EdgeESt6vectorIS2_SaIS2_EEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 800fbbc:	b480      	push	{r7}
 800fbbe:	b083      	sub	sp, #12
 800fbc0:	af00      	add	r7, sp, #0
 800fbc2:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 800fbc4:	687b      	ldr	r3, [r7, #4]
 800fbc6:	4618      	mov	r0, r3
 800fbc8:	370c      	adds	r7, #12
 800fbca:	46bd      	mov	sp, r7
 800fbcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbd0:	4770      	bx	lr

0800fbd2 <_ZNSt16allocator_traitsISaIN3jlb4EdgeEEE7destroyIS1_EEvRS2_PT_>:
	destroy(allocator_type& __a __attribute__((__unused__)), _Up* __p)
 800fbd2:	b580      	push	{r7, lr}
 800fbd4:	b082      	sub	sp, #8
 800fbd6:	af00      	add	r7, sp, #0
 800fbd8:	6078      	str	r0, [r7, #4]
 800fbda:	6039      	str	r1, [r7, #0]
	  std::destroy_at(__p);
 800fbdc:	6838      	ldr	r0, [r7, #0]
 800fbde:	f000 ffc7 	bl	8010b70 <_ZSt10destroy_atIN3jlb4EdgeEEvPT_>
	}
 800fbe2:	bf00      	nop
 800fbe4:	3708      	adds	r7, #8
 800fbe6:	46bd      	mov	sp, r7
 800fbe8:	bd80      	pop	{r7, pc}

0800fbea <_ZNK9__gnu_cxx17__normal_iteratorIPN3jlb4EdgeESt6vectorIS2_SaIS2_EEEmiEi>:
      operator-(difference_type __n) const _GLIBCXX_NOEXCEPT
 800fbea:	b580      	push	{r7, lr}
 800fbec:	b084      	sub	sp, #16
 800fbee:	af00      	add	r7, sp, #0
 800fbf0:	6078      	str	r0, [r7, #4]
 800fbf2:	6039      	str	r1, [r7, #0]
      { return __normal_iterator(_M_current - __n); }
 800fbf4:	687b      	ldr	r3, [r7, #4]
 800fbf6:	6819      	ldr	r1, [r3, #0]
 800fbf8:	683a      	ldr	r2, [r7, #0]
 800fbfa:	4613      	mov	r3, r2
 800fbfc:	005b      	lsls	r3, r3, #1
 800fbfe:	4413      	add	r3, r2
 800fc00:	00db      	lsls	r3, r3, #3
 800fc02:	425b      	negs	r3, r3
 800fc04:	440b      	add	r3, r1
 800fc06:	60fb      	str	r3, [r7, #12]
 800fc08:	f107 020c 	add.w	r2, r7, #12
 800fc0c:	f107 0308 	add.w	r3, r7, #8
 800fc10:	4611      	mov	r1, r2
 800fc12:	4618      	mov	r0, r3
 800fc14:	f7ff ff29 	bl	800fa6a <_ZN9__gnu_cxx17__normal_iteratorIPN3jlb4EdgeESt6vectorIS2_SaIS2_EEEC1ERKS3_>
 800fc18:	68bb      	ldr	r3, [r7, #8]
 800fc1a:	4618      	mov	r0, r3
 800fc1c:	3710      	adds	r7, #16
 800fc1e:	46bd      	mov	sp, r7
 800fc20:	bd80      	pop	{r7, pc}

0800fc22 <_ZNK9__gnu_cxx17__normal_iteratorIPN3jlb4EdgeESt6vectorIS2_SaIS2_EEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 800fc22:	b480      	push	{r7}
 800fc24:	b083      	sub	sp, #12
 800fc26:	af00      	add	r7, sp, #0
 800fc28:	6078      	str	r0, [r7, #4]
      { return *_M_current; }
 800fc2a:	687b      	ldr	r3, [r7, #4]
 800fc2c:	681b      	ldr	r3, [r3, #0]
 800fc2e:	4618      	mov	r0, r3
 800fc30:	370c      	adds	r7, #12
 800fc32:	46bd      	mov	sp, r7
 800fc34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc38:	4770      	bx	lr

0800fc3a <_ZNSt12_Destroy_auxILb0EE9__destroyIPN3jlb4NodeEEEvT_S5_>:
	__destroy(_ForwardIterator __first, _ForwardIterator __last)
 800fc3a:	b580      	push	{r7, lr}
 800fc3c:	b082      	sub	sp, #8
 800fc3e:	af00      	add	r7, sp, #0
 800fc40:	6078      	str	r0, [r7, #4]
 800fc42:	6039      	str	r1, [r7, #0]
	  for (; __first != __last; ++__first)
 800fc44:	e009      	b.n	800fc5a <_ZNSt12_Destroy_auxILb0EE9__destroyIPN3jlb4NodeEEEvT_S5_+0x20>
	    std::_Destroy(std::__addressof(*__first));
 800fc46:	6878      	ldr	r0, [r7, #4]
 800fc48:	f000 ffaf 	bl	8010baa <_ZSt11__addressofIN3jlb4NodeEEPT_RS2_>
 800fc4c:	4603      	mov	r3, r0
 800fc4e:	4618      	mov	r0, r3
 800fc50:	f000 ffb6 	bl	8010bc0 <_ZSt8_DestroyIN3jlb4NodeEEvPT_>
	  for (; __first != __last; ++__first)
 800fc54:	687b      	ldr	r3, [r7, #4]
 800fc56:	3318      	adds	r3, #24
 800fc58:	607b      	str	r3, [r7, #4]
 800fc5a:	687a      	ldr	r2, [r7, #4]
 800fc5c:	683b      	ldr	r3, [r7, #0]
 800fc5e:	429a      	cmp	r2, r3
 800fc60:	d1f1      	bne.n	800fc46 <_ZNSt12_Destroy_auxILb0EE9__destroyIPN3jlb4NodeEEEvT_S5_+0xc>
	}
 800fc62:	bf00      	nop
 800fc64:	bf00      	nop
 800fc66:	3708      	adds	r7, #8
 800fc68:	46bd      	mov	sp, r7
 800fc6a:	bd80      	pop	{r7, pc}

0800fc6c <_ZNSt6vectorIN3jlb4EdgeESaIS1_EEC1ERKS3_>:
      vector(const vector& __x)
 800fc6c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fc6e:	b085      	sub	sp, #20
 800fc70:	af00      	add	r7, sp, #0
 800fc72:	6078      	str	r0, [r7, #4]
 800fc74:	6039      	str	r1, [r7, #0]
	_Alloc_traits::_S_select_on_copy(__x._M_get_Tp_allocator()))
 800fc76:	687c      	ldr	r4, [r7, #4]
 800fc78:	6838      	ldr	r0, [r7, #0]
 800fc7a:	f7fd f8bd 	bl	800cdf8 <_ZNKSt6vectorIN3jlb4EdgeESaIS1_EE4sizeEv>
 800fc7e:	4605      	mov	r5, r0
 800fc80:	683b      	ldr	r3, [r7, #0]
 800fc82:	4618      	mov	r0, r3
 800fc84:	f000 ffb5 	bl	8010bf2 <_ZNKSt12_Vector_baseIN3jlb4EdgeESaIS1_EE19_M_get_Tp_allocatorEv>
 800fc88:	4602      	mov	r2, r0
 800fc8a:	f107 030c 	add.w	r3, r7, #12
 800fc8e:	4611      	mov	r1, r2
 800fc90:	4618      	mov	r0, r3
 800fc92:	f000 ffa0 	bl	8010bd6 <_ZN9__gnu_cxx14__alloc_traitsISaIN3jlb4EdgeEES2_E17_S_select_on_copyERKS3_>
 800fc96:	f107 030c 	add.w	r3, r7, #12
 800fc9a:	461a      	mov	r2, r3
 800fc9c:	4629      	mov	r1, r5
 800fc9e:	4620      	mov	r0, r4
 800fca0:	f000 ffb2 	bl	8010c08 <_ZNSt12_Vector_baseIN3jlb4EdgeESaIS1_EEC1EjRKS2_>
 800fca4:	f107 030c 	add.w	r3, r7, #12
 800fca8:	4618      	mov	r0, r3
 800fcaa:	f7fc fe2c 	bl	800c906 <_ZNSaIN3jlb4EdgeEED1Ev>
	  std::__uninitialized_copy_a(__x.begin(), __x.end(),
 800fcae:	6838      	ldr	r0, [r7, #0]
 800fcb0:	f000 ffbe 	bl	8010c30 <_ZNKSt6vectorIN3jlb4EdgeESaIS1_EE5beginEv>
 800fcb4:	4605      	mov	r5, r0
 800fcb6:	6838      	ldr	r0, [r7, #0]
 800fcb8:	f000 ffca 	bl	8010c50 <_ZNKSt6vectorIN3jlb4EdgeESaIS1_EE3endEv>
 800fcbc:	4606      	mov	r6, r0
 800fcbe:	687b      	ldr	r3, [r7, #4]
 800fcc0:	681c      	ldr	r4, [r3, #0]
				      _M_get_Tp_allocator());
 800fcc2:	687b      	ldr	r3, [r7, #4]
 800fcc4:	4618      	mov	r0, r3
 800fcc6:	f7fd fb97 	bl	800d3f8 <_ZNSt12_Vector_baseIN3jlb4EdgeESaIS1_EE19_M_get_Tp_allocatorEv>
 800fcca:	4603      	mov	r3, r0
	  std::__uninitialized_copy_a(__x.begin(), __x.end(),
 800fccc:	4622      	mov	r2, r4
 800fcce:	4631      	mov	r1, r6
 800fcd0:	4628      	mov	r0, r5
 800fcd2:	f000 ffce 	bl	8010c72 <_ZSt22__uninitialized_copy_aIN9__gnu_cxx17__normal_iteratorIPKN3jlb4EdgeESt6vectorIS3_SaIS3_EEEEPS3_S3_ET0_T_SC_SB_RSaIT1_E>
 800fcd6:	4602      	mov	r2, r0
	this->_M_impl._M_finish =
 800fcd8:	687b      	ldr	r3, [r7, #4]
 800fcda:	605a      	str	r2, [r3, #4]
      }
 800fcdc:	687b      	ldr	r3, [r7, #4]
 800fcde:	4618      	mov	r0, r3
 800fce0:	3714      	adds	r7, #20
 800fce2:	46bd      	mov	sp, r7
 800fce4:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800fce6 <_ZN9__gnu_cxx17__normal_iteratorIPN3jlb4NodeESt6vectorIS2_SaIS2_EEEC1ERKS3_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 800fce6:	b480      	push	{r7}
 800fce8:	b083      	sub	sp, #12
 800fcea:	af00      	add	r7, sp, #0
 800fcec:	6078      	str	r0, [r7, #4]
 800fcee:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 800fcf0:	683b      	ldr	r3, [r7, #0]
 800fcf2:	681a      	ldr	r2, [r3, #0]
 800fcf4:	687b      	ldr	r3, [r7, #4]
 800fcf6:	601a      	str	r2, [r3, #0]
 800fcf8:	687b      	ldr	r3, [r7, #4]
 800fcfa:	4618      	mov	r0, r3
 800fcfc:	370c      	adds	r7, #12
 800fcfe:	46bd      	mov	sp, r7
 800fd00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd04:	4770      	bx	lr

0800fd06 <_ZNKSt6vectorIN3jlb4NodeESaIS1_EE12_M_check_lenEjPKc>:
      _M_check_len(size_type __n, const char* __s) const
 800fd06:	b590      	push	{r4, r7, lr}
 800fd08:	b087      	sub	sp, #28
 800fd0a:	af00      	add	r7, sp, #0
 800fd0c:	60f8      	str	r0, [r7, #12]
 800fd0e:	60b9      	str	r1, [r7, #8]
 800fd10:	607a      	str	r2, [r7, #4]
	if (max_size() - size() < __n)
 800fd12:	68f8      	ldr	r0, [r7, #12]
 800fd14:	f000 ffbe 	bl	8010c94 <_ZNKSt6vectorIN3jlb4NodeESaIS1_EE8max_sizeEv>
 800fd18:	4604      	mov	r4, r0
 800fd1a:	68f8      	ldr	r0, [r7, #12]
 800fd1c:	f000 ffcc 	bl	8010cb8 <_ZNKSt6vectorIN3jlb4NodeESaIS1_EE4sizeEv>
 800fd20:	4603      	mov	r3, r0
 800fd22:	1ae2      	subs	r2, r4, r3
 800fd24:	68bb      	ldr	r3, [r7, #8]
 800fd26:	429a      	cmp	r2, r3
 800fd28:	bf34      	ite	cc
 800fd2a:	2301      	movcc	r3, #1
 800fd2c:	2300      	movcs	r3, #0
 800fd2e:	b2db      	uxtb	r3, r3
 800fd30:	2b00      	cmp	r3, #0
 800fd32:	d002      	beq.n	800fd3a <_ZNKSt6vectorIN3jlb4NodeESaIS1_EE12_M_check_lenEjPKc+0x34>
	  __throw_length_error(__N(__s));
 800fd34:	6878      	ldr	r0, [r7, #4]
 800fd36:	f011 fa3f 	bl	80211b8 <_ZSt20__throw_length_errorPKc>
	const size_type __len = size() + (std::max)(size(), __n);
 800fd3a:	68f8      	ldr	r0, [r7, #12]
 800fd3c:	f000 ffbc 	bl	8010cb8 <_ZNKSt6vectorIN3jlb4NodeESaIS1_EE4sizeEv>
 800fd40:	4604      	mov	r4, r0
 800fd42:	68f8      	ldr	r0, [r7, #12]
 800fd44:	f000 ffb8 	bl	8010cb8 <_ZNKSt6vectorIN3jlb4NodeESaIS1_EE4sizeEv>
 800fd48:	4603      	mov	r3, r0
 800fd4a:	613b      	str	r3, [r7, #16]
 800fd4c:	f107 0208 	add.w	r2, r7, #8
 800fd50:	f107 0310 	add.w	r3, r7, #16
 800fd54:	4611      	mov	r1, r2
 800fd56:	4618      	mov	r0, r3
 800fd58:	f7f3 fed5 	bl	8003b06 <_ZSt3maxIjERKT_S2_S2_>
 800fd5c:	4603      	mov	r3, r0
 800fd5e:	681b      	ldr	r3, [r3, #0]
 800fd60:	4423      	add	r3, r4
 800fd62:	617b      	str	r3, [r7, #20]
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 800fd64:	68f8      	ldr	r0, [r7, #12]
 800fd66:	f000 ffa7 	bl	8010cb8 <_ZNKSt6vectorIN3jlb4NodeESaIS1_EE4sizeEv>
 800fd6a:	4602      	mov	r2, r0
 800fd6c:	697b      	ldr	r3, [r7, #20]
 800fd6e:	4293      	cmp	r3, r2
 800fd70:	d306      	bcc.n	800fd80 <_ZNKSt6vectorIN3jlb4NodeESaIS1_EE12_M_check_lenEjPKc+0x7a>
 800fd72:	68f8      	ldr	r0, [r7, #12]
 800fd74:	f000 ff8e 	bl	8010c94 <_ZNKSt6vectorIN3jlb4NodeESaIS1_EE8max_sizeEv>
 800fd78:	4602      	mov	r2, r0
 800fd7a:	697b      	ldr	r3, [r7, #20]
 800fd7c:	4293      	cmp	r3, r2
 800fd7e:	d904      	bls.n	800fd8a <_ZNKSt6vectorIN3jlb4NodeESaIS1_EE12_M_check_lenEjPKc+0x84>
 800fd80:	68f8      	ldr	r0, [r7, #12]
 800fd82:	f000 ff87 	bl	8010c94 <_ZNKSt6vectorIN3jlb4NodeESaIS1_EE8max_sizeEv>
 800fd86:	4603      	mov	r3, r0
 800fd88:	e000      	b.n	800fd8c <_ZNKSt6vectorIN3jlb4NodeESaIS1_EE12_M_check_lenEjPKc+0x86>
 800fd8a:	697b      	ldr	r3, [r7, #20]
      }
 800fd8c:	4618      	mov	r0, r3
 800fd8e:	371c      	adds	r7, #28
 800fd90:	46bd      	mov	sp, r7
 800fd92:	bd90      	pop	{r4, r7, pc}

0800fd94 <_ZNSt6vectorIN3jlb4NodeESaIS1_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 800fd94:	b580      	push	{r7, lr}
 800fd96:	b084      	sub	sp, #16
 800fd98:	af00      	add	r7, sp, #0
 800fd9a:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_start); }
 800fd9c:	687a      	ldr	r2, [r7, #4]
 800fd9e:	f107 030c 	add.w	r3, r7, #12
 800fda2:	4611      	mov	r1, r2
 800fda4:	4618      	mov	r0, r3
 800fda6:	f7ff ff9e 	bl	800fce6 <_ZN9__gnu_cxx17__normal_iteratorIPN3jlb4NodeESt6vectorIS2_SaIS2_EEEC1ERKS3_>
 800fdaa:	68fb      	ldr	r3, [r7, #12]
 800fdac:	4618      	mov	r0, r3
 800fdae:	3710      	adds	r7, #16
 800fdb0:	46bd      	mov	sp, r7
 800fdb2:	bd80      	pop	{r7, pc}

0800fdb4 <_ZN9__gnu_cxxmiIPN3jlb4NodeESt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>:
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
 800fdb4:	b590      	push	{r4, r7, lr}
 800fdb6:	b083      	sub	sp, #12
 800fdb8:	af00      	add	r7, sp, #0
 800fdba:	6078      	str	r0, [r7, #4]
 800fdbc:	6039      	str	r1, [r7, #0]
    { return __lhs.base() - __rhs.base(); }
 800fdbe:	6878      	ldr	r0, [r7, #4]
 800fdc0:	f000 f826 	bl	800fe10 <_ZNK9__gnu_cxx17__normal_iteratorIPN3jlb4NodeESt6vectorIS2_SaIS2_EEE4baseEv>
 800fdc4:	4603      	mov	r3, r0
 800fdc6:	681c      	ldr	r4, [r3, #0]
 800fdc8:	6838      	ldr	r0, [r7, #0]
 800fdca:	f000 f821 	bl	800fe10 <_ZNK9__gnu_cxx17__normal_iteratorIPN3jlb4NodeESt6vectorIS2_SaIS2_EEE4baseEv>
 800fdce:	4603      	mov	r3, r0
 800fdd0:	681b      	ldr	r3, [r3, #0]
 800fdd2:	1ae3      	subs	r3, r4, r3
 800fdd4:	10db      	asrs	r3, r3, #3
 800fdd6:	4a03      	ldr	r2, [pc, #12]	; (800fde4 <_ZN9__gnu_cxxmiIPN3jlb4NodeESt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_+0x30>)
 800fdd8:	fb02 f303 	mul.w	r3, r2, r3
 800fddc:	4618      	mov	r0, r3
 800fdde:	370c      	adds	r7, #12
 800fde0:	46bd      	mov	sp, r7
 800fde2:	bd90      	pop	{r4, r7, pc}
 800fde4:	aaaaaaab 	.word	0xaaaaaaab

0800fde8 <_ZNSt12_Vector_baseIN3jlb4NodeESaIS1_EE11_M_allocateEj>:
      _M_allocate(size_t __n)
 800fde8:	b580      	push	{r7, lr}
 800fdea:	b082      	sub	sp, #8
 800fdec:	af00      	add	r7, sp, #0
 800fdee:	6078      	str	r0, [r7, #4]
 800fdf0:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 800fdf2:	683b      	ldr	r3, [r7, #0]
 800fdf4:	2b00      	cmp	r3, #0
 800fdf6:	d006      	beq.n	800fe06 <_ZNSt12_Vector_baseIN3jlb4NodeESaIS1_EE11_M_allocateEj+0x1e>
 800fdf8:	687b      	ldr	r3, [r7, #4]
 800fdfa:	6839      	ldr	r1, [r7, #0]
 800fdfc:	4618      	mov	r0, r3
 800fdfe:	f000 ff71 	bl	8010ce4 <_ZNSt16allocator_traitsISaIN3jlb4NodeEEE8allocateERS2_j>
 800fe02:	4603      	mov	r3, r0
 800fe04:	e000      	b.n	800fe08 <_ZNSt12_Vector_baseIN3jlb4NodeESaIS1_EE11_M_allocateEj+0x20>
 800fe06:	2300      	movs	r3, #0
      }
 800fe08:	4618      	mov	r0, r3
 800fe0a:	3708      	adds	r7, #8
 800fe0c:	46bd      	mov	sp, r7
 800fe0e:	bd80      	pop	{r7, pc}

0800fe10 <_ZNK9__gnu_cxx17__normal_iteratorIPN3jlb4NodeESt6vectorIS2_SaIS2_EEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 800fe10:	b480      	push	{r7}
 800fe12:	b083      	sub	sp, #12
 800fe14:	af00      	add	r7, sp, #0
 800fe16:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 800fe18:	687b      	ldr	r3, [r7, #4]
 800fe1a:	4618      	mov	r0, r3
 800fe1c:	370c      	adds	r7, #12
 800fe1e:	46bd      	mov	sp, r7
 800fe20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe24:	4770      	bx	lr

0800fe26 <_ZSt34__uninitialized_move_if_noexcept_aIPN3jlb4NodeES2_SaIS1_EET0_T_S5_S4_RT1_>:
    __uninitialized_move_if_noexcept_a(_InputIterator __first,
 800fe26:	b590      	push	{r4, r7, lr}
 800fe28:	b085      	sub	sp, #20
 800fe2a:	af00      	add	r7, sp, #0
 800fe2c:	60f8      	str	r0, [r7, #12]
 800fe2e:	60b9      	str	r1, [r7, #8]
 800fe30:	607a      	str	r2, [r7, #4]
 800fe32:	603b      	str	r3, [r7, #0]
	(_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__first),
 800fe34:	68f8      	ldr	r0, [r7, #12]
 800fe36:	f000 ff78 	bl	8010d2a <_ZSt32__make_move_if_noexcept_iteratorIN3jlb4NodeEPKS1_ET0_PT_>
 800fe3a:	4604      	mov	r4, r0
 800fe3c:	68b8      	ldr	r0, [r7, #8]
 800fe3e:	f000 ff74 	bl	8010d2a <_ZSt32__make_move_if_noexcept_iteratorIN3jlb4NodeEPKS1_ET0_PT_>
 800fe42:	4601      	mov	r1, r0
 800fe44:	683b      	ldr	r3, [r7, #0]
 800fe46:	687a      	ldr	r2, [r7, #4]
 800fe48:	4620      	mov	r0, r4
 800fe4a:	f000 ff79 	bl	8010d40 <_ZSt22__uninitialized_copy_aIPKN3jlb4NodeEPS1_S1_ET0_T_S6_S5_RSaIT1_E>
 800fe4e:	4603      	mov	r3, r0
    }
 800fe50:	4618      	mov	r0, r3
 800fe52:	3714      	adds	r7, #20
 800fe54:	46bd      	mov	sp, r7
 800fe56:	bd90      	pop	{r4, r7, pc}

0800fe58 <_ZNK9__gnu_cxx17__normal_iteratorIPN3jlb4NodeESt6vectorIS2_SaIS2_EEEmiEi>:
      operator-(difference_type __n) const _GLIBCXX_NOEXCEPT
 800fe58:	b580      	push	{r7, lr}
 800fe5a:	b084      	sub	sp, #16
 800fe5c:	af00      	add	r7, sp, #0
 800fe5e:	6078      	str	r0, [r7, #4]
 800fe60:	6039      	str	r1, [r7, #0]
      { return __normal_iterator(_M_current - __n); }
 800fe62:	687b      	ldr	r3, [r7, #4]
 800fe64:	6819      	ldr	r1, [r3, #0]
 800fe66:	683a      	ldr	r2, [r7, #0]
 800fe68:	4613      	mov	r3, r2
 800fe6a:	005b      	lsls	r3, r3, #1
 800fe6c:	4413      	add	r3, r2
 800fe6e:	00db      	lsls	r3, r3, #3
 800fe70:	425b      	negs	r3, r3
 800fe72:	440b      	add	r3, r1
 800fe74:	60fb      	str	r3, [r7, #12]
 800fe76:	f107 020c 	add.w	r2, r7, #12
 800fe7a:	f107 0308 	add.w	r3, r7, #8
 800fe7e:	4611      	mov	r1, r2
 800fe80:	4618      	mov	r0, r3
 800fe82:	f7ff ff30 	bl	800fce6 <_ZN9__gnu_cxx17__normal_iteratorIPN3jlb4NodeESt6vectorIS2_SaIS2_EEEC1ERKS3_>
 800fe86:	68bb      	ldr	r3, [r7, #8]
 800fe88:	4618      	mov	r0, r3
 800fe8a:	3710      	adds	r7, #16
 800fe8c:	46bd      	mov	sp, r7
 800fe8e:	bd80      	pop	{r7, pc}

0800fe90 <_ZNK9__gnu_cxx17__normal_iteratorIPN3jlb4NodeESt6vectorIS2_SaIS2_EEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 800fe90:	b480      	push	{r7}
 800fe92:	b083      	sub	sp, #12
 800fe94:	af00      	add	r7, sp, #0
 800fe96:	6078      	str	r0, [r7, #4]
      { return *_M_current; }
 800fe98:	687b      	ldr	r3, [r7, #4]
 800fe9a:	681b      	ldr	r3, [r3, #0]
 800fe9c:	4618      	mov	r0, r3
 800fe9e:	370c      	adds	r7, #12
 800fea0:	46bd      	mov	sp, r7
 800fea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fea6:	4770      	bx	lr

0800fea8 <_ZNSt16allocator_traitsISaIcEE8max_sizeERKS0_>:
      max_size(const allocator_type& __a __attribute__((__unused__))) noexcept
 800fea8:	b480      	push	{r7}
 800feaa:	b083      	sub	sp, #12
 800feac:	af00      	add	r7, sp, #0
 800feae:	6078      	str	r0, [r7, #4]
	return size_t(-1) / sizeof(value_type);
 800feb0:	f04f 33ff 	mov.w	r3, #4294967295
      }
 800feb4:	4618      	mov	r0, r3
 800feb6:	370c      	adds	r7, #12
 800feb8:	46bd      	mov	sp, r7
 800feba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800febe:	4770      	bx	lr

0800fec0 <_ZNSt6vectorIcSaIcEE11_S_max_sizeERKS0_>:
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 800fec0:	b580      	push	{r7, lr}
 800fec2:	b084      	sub	sp, #16
 800fec4:	af00      	add	r7, sp, #0
 800fec6:	6078      	str	r0, [r7, #4]
	const size_t __diffmax
 800fec8:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800fecc:	60fb      	str	r3, [r7, #12]
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 800fece:	6878      	ldr	r0, [r7, #4]
 800fed0:	f7ff ffea 	bl	800fea8 <_ZNSt16allocator_traitsISaIcEE8max_sizeERKS0_>
 800fed4:	4603      	mov	r3, r0
 800fed6:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 800fed8:	f107 0208 	add.w	r2, r7, #8
 800fedc:	f107 030c 	add.w	r3, r7, #12
 800fee0:	4611      	mov	r1, r2
 800fee2:	4618      	mov	r0, r3
 800fee4:	f7f3 fed2 	bl	8003c8c <_ZSt3minIjERKT_S2_S2_>
 800fee8:	4603      	mov	r3, r0
 800feea:	681b      	ldr	r3, [r3, #0]
      }
 800feec:	4618      	mov	r0, r3
 800feee:	3710      	adds	r7, #16
 800fef0:	46bd      	mov	sp, r7
 800fef2:	bd80      	pop	{r7, pc}

0800fef4 <_ZSt18uninitialized_copyIPKcPcET0_T_S4_S3_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 800fef4:	b580      	push	{r7, lr}
 800fef6:	b086      	sub	sp, #24
 800fef8:	af00      	add	r7, sp, #0
 800fefa:	60f8      	str	r0, [r7, #12]
 800fefc:	60b9      	str	r1, [r7, #8]
 800fefe:	607a      	str	r2, [r7, #4]
      const bool __assignable = is_assignable<_RefType2, _RefType1>::value;
 800ff00:	2301      	movs	r3, #1
 800ff02:	75fb      	strb	r3, [r7, #23]
	__uninit_copy(__first, __last, __result);
 800ff04:	687a      	ldr	r2, [r7, #4]
 800ff06:	68b9      	ldr	r1, [r7, #8]
 800ff08:	68f8      	ldr	r0, [r7, #12]
 800ff0a:	f000 ff35 	bl	8010d78 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIPKcPcEET0_T_S6_S5_>
 800ff0e:	4603      	mov	r3, r0
    }
 800ff10:	4618      	mov	r0, r3
 800ff12:	3718      	adds	r7, #24
 800ff14:	46bd      	mov	sp, r7
 800ff16:	bd80      	pop	{r7, pc}

0800ff18 <_ZNSt15_Deque_iteratorIfRfPfEC1Ev>:
      _Deque_iterator() _GLIBCXX_NOEXCEPT
 800ff18:	b480      	push	{r7}
 800ff1a:	b083      	sub	sp, #12
 800ff1c:	af00      	add	r7, sp, #0
 800ff1e:	6078      	str	r0, [r7, #4]
      : _M_cur(), _M_first(), _M_last(), _M_node() { }
 800ff20:	687b      	ldr	r3, [r7, #4]
 800ff22:	2200      	movs	r2, #0
 800ff24:	601a      	str	r2, [r3, #0]
 800ff26:	687b      	ldr	r3, [r7, #4]
 800ff28:	2200      	movs	r2, #0
 800ff2a:	605a      	str	r2, [r3, #4]
 800ff2c:	687b      	ldr	r3, [r7, #4]
 800ff2e:	2200      	movs	r2, #0
 800ff30:	609a      	str	r2, [r3, #8]
 800ff32:	687b      	ldr	r3, [r7, #4]
 800ff34:	2200      	movs	r2, #0
 800ff36:	60da      	str	r2, [r3, #12]
 800ff38:	687b      	ldr	r3, [r7, #4]
 800ff3a:	4618      	mov	r0, r3
 800ff3c:	370c      	adds	r7, #12
 800ff3e:	46bd      	mov	sp, r7
 800ff40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff44:	4770      	bx	lr

0800ff46 <_ZNSt16allocator_traitsISaIPfEE8allocateERS1_j>:
      allocate(allocator_type& __a, size_type __n)
 800ff46:	b580      	push	{r7, lr}
 800ff48:	b084      	sub	sp, #16
 800ff4a:	af00      	add	r7, sp, #0
 800ff4c:	6078      	str	r0, [r7, #4]
 800ff4e:	6039      	str	r1, [r7, #0]
 800ff50:	687b      	ldr	r3, [r7, #4]
 800ff52:	60fb      	str	r3, [r7, #12]
 800ff54:	683b      	ldr	r3, [r7, #0]
 800ff56:	60bb      	str	r3, [r7, #8]
	if (std::is_constant_evaluated())
 800ff58:	f7f2 fdd8 	bl	8002b0c <_ZSt21is_constant_evaluatedv>
 800ff5c:	4603      	mov	r3, r0
 800ff5e:	2b00      	cmp	r3, #0
 800ff60:	d006      	beq.n	800ff70 <_ZNSt16allocator_traitsISaIPfEE8allocateERS1_j+0x2a>
	  return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 800ff62:	68bb      	ldr	r3, [r7, #8]
 800ff64:	009b      	lsls	r3, r3, #2
 800ff66:	4618      	mov	r0, r3
 800ff68:	f011 f90c 	bl	8021184 <_Znwj>
 800ff6c:	4603      	mov	r3, r0
 800ff6e:	e006      	b.n	800ff7e <_ZNSt16allocator_traitsISaIPfEE8allocateERS1_j+0x38>
	return __allocator_base<_Tp>::allocate(__n, 0);
 800ff70:	2200      	movs	r2, #0
 800ff72:	68b9      	ldr	r1, [r7, #8]
 800ff74:	68f8      	ldr	r0, [r7, #12]
 800ff76:	f001 fab4 	bl	80114e2 <_ZN9__gnu_cxx13new_allocatorIPfE8allocateEjPKv>
 800ff7a:	4603      	mov	r3, r0
 800ff7c:	bf00      	nop
      { return __a.allocate(__n); }
 800ff7e:	4618      	mov	r0, r3
 800ff80:	3710      	adds	r7, #16
 800ff82:	46bd      	mov	sp, r7
 800ff84:	bd80      	pop	{r7, pc}

0800ff86 <_ZNKSt11_Deque_baseIfSaIfEE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 800ff86:	b480      	push	{r7}
 800ff88:	b083      	sub	sp, #12
 800ff8a:	af00      	add	r7, sp, #0
 800ff8c:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 800ff8e:	687b      	ldr	r3, [r7, #4]
 800ff90:	4618      	mov	r0, r3
 800ff92:	370c      	adds	r7, #12
 800ff94:	46bd      	mov	sp, r7
 800ff96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff9a:	4770      	bx	lr

0800ff9c <_ZNSaIPfEC1IfEERKSaIT_E>:
	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }
 800ff9c:	b580      	push	{r7, lr}
 800ff9e:	b082      	sub	sp, #8
 800ffa0:	af00      	add	r7, sp, #0
 800ffa2:	6078      	str	r0, [r7, #4]
 800ffa4:	6039      	str	r1, [r7, #0]
 800ffa6:	6878      	ldr	r0, [r7, #4]
 800ffa8:	f000 fef6 	bl	8010d98 <_ZN9__gnu_cxx13new_allocatorIPfEC1Ev>
 800ffac:	687b      	ldr	r3, [r7, #4]
 800ffae:	4618      	mov	r0, r3
 800ffb0:	3708      	adds	r7, #8
 800ffb2:	46bd      	mov	sp, r7
 800ffb4:	bd80      	pop	{r7, pc}

0800ffb6 <_ZNSt5dequeIfSaIfEE11_S_max_sizeERKS0_>:
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 800ffb6:	b580      	push	{r7, lr}
 800ffb8:	b084      	sub	sp, #16
 800ffba:	af00      	add	r7, sp, #0
 800ffbc:	6078      	str	r0, [r7, #4]
	const size_t __diffmax = __gnu_cxx::__numeric_traits<ptrdiff_t>::__max;
 800ffbe:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800ffc2:	60fb      	str	r3, [r7, #12]
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 800ffc4:	6878      	ldr	r0, [r7, #4]
 800ffc6:	f7f3 fe13 	bl	8003bf0 <_ZNSt16allocator_traitsISaIfEE8max_sizeERKS0_>
 800ffca:	4603      	mov	r3, r0
 800ffcc:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 800ffce:	f107 0208 	add.w	r2, r7, #8
 800ffd2:	f107 030c 	add.w	r3, r7, #12
 800ffd6:	4611      	mov	r1, r2
 800ffd8:	4618      	mov	r0, r3
 800ffda:	f7f3 fe57 	bl	8003c8c <_ZSt3minIjERKT_S2_S2_>
 800ffde:	4603      	mov	r3, r0
 800ffe0:	681b      	ldr	r3, [r3, #0]
      }
 800ffe2:	4618      	mov	r0, r3
 800ffe4:	3710      	adds	r7, #16
 800ffe6:	46bd      	mov	sp, r7
 800ffe8:	bd80      	pop	{r7, pc}

0800ffea <_ZSt4copyIPPfS1_ET0_T_S3_S2_>:
    copy(_II __first, _II __last, _OI __result)
 800ffea:	b590      	push	{r4, r7, lr}
 800ffec:	b085      	sub	sp, #20
 800ffee:	af00      	add	r7, sp, #0
 800fff0:	60f8      	str	r0, [r7, #12]
 800fff2:	60b9      	str	r1, [r7, #8]
 800fff4:	607a      	str	r2, [r7, #4]
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 800fff6:	68f8      	ldr	r0, [r7, #12]
 800fff8:	f000 fee8 	bl	8010dcc <_ZSt12__miter_baseIPPfET_S2_>
 800fffc:	4604      	mov	r4, r0
 800fffe:	68b8      	ldr	r0, [r7, #8]
 8010000:	f000 fee4 	bl	8010dcc <_ZSt12__miter_baseIPPfET_S2_>
 8010004:	4603      	mov	r3, r0
 8010006:	687a      	ldr	r2, [r7, #4]
 8010008:	4619      	mov	r1, r3
 801000a:	4620      	mov	r0, r4
 801000c:	f000 fee9 	bl	8010de2 <_ZSt13__copy_move_aILb0EPPfS1_ET1_T0_S3_S2_>
 8010010:	4603      	mov	r3, r0
    }
 8010012:	4618      	mov	r0, r3
 8010014:	3714      	adds	r7, #20
 8010016:	46bd      	mov	sp, r7
 8010018:	bd90      	pop	{r4, r7, pc}

0801001a <_ZSt13copy_backwardIPPfS1_ET0_T_S3_S2_>:
    copy_backward(_BI1 __first, _BI1 __last, _BI2 __result)
 801001a:	b590      	push	{r4, r7, lr}
 801001c:	b085      	sub	sp, #20
 801001e:	af00      	add	r7, sp, #0
 8010020:	60f8      	str	r0, [r7, #12]
 8010022:	60b9      	str	r1, [r7, #8]
 8010024:	607a      	str	r2, [r7, #4]
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 8010026:	68f8      	ldr	r0, [r7, #12]
 8010028:	f000 fed0 	bl	8010dcc <_ZSt12__miter_baseIPPfET_S2_>
 801002c:	4604      	mov	r4, r0
 801002e:	68b8      	ldr	r0, [r7, #8]
 8010030:	f000 fecc 	bl	8010dcc <_ZSt12__miter_baseIPPfET_S2_>
 8010034:	4603      	mov	r3, r0
 8010036:	687a      	ldr	r2, [r7, #4]
 8010038:	4619      	mov	r1, r3
 801003a:	4620      	mov	r0, r4
 801003c:	f000 fef4 	bl	8010e28 <_ZSt22__copy_move_backward_aILb0EPPfS1_ET1_T0_S3_S2_>
 8010040:	4603      	mov	r3, r0
    }
 8010042:	4618      	mov	r0, r3
 8010044:	3714      	adds	r7, #20
 8010046:	46bd      	mov	sp, r7
 8010048:	bd90      	pop	{r4, r7, pc}

0801004a <_ZNSt5dequeIfSaIfEE17_M_reallocate_mapEjb>:
	}
    }

  template <typename _Tp, typename _Alloc>
    void
    deque<_Tp, _Alloc>::
 801004a:	b590      	push	{r4, r7, lr}
 801004c:	b08b      	sub	sp, #44	; 0x2c
 801004e:	af00      	add	r7, sp, #0
 8010050:	60f8      	str	r0, [r7, #12]
 8010052:	60b9      	str	r1, [r7, #8]
 8010054:	4613      	mov	r3, r2
 8010056:	71fb      	strb	r3, [r7, #7]
    _M_reallocate_map(size_type __nodes_to_add, bool __add_at_front)
    {
      const size_type __old_num_nodes
	= this->_M_impl._M_finish._M_node - this->_M_impl._M_start._M_node + 1;
 8010058:	68fb      	ldr	r3, [r7, #12]
 801005a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801005c:	68fb      	ldr	r3, [r7, #12]
 801005e:	695b      	ldr	r3, [r3, #20]
 8010060:	1ad3      	subs	r3, r2, r3
 8010062:	109b      	asrs	r3, r3, #2
 8010064:	3301      	adds	r3, #1
      const size_type __old_num_nodes
 8010066:	623b      	str	r3, [r7, #32]
      const size_type __new_num_nodes = __old_num_nodes + __nodes_to_add;
 8010068:	68bb      	ldr	r3, [r7, #8]
 801006a:	6a3a      	ldr	r2, [r7, #32]
 801006c:	4413      	add	r3, r2
 801006e:	61fb      	str	r3, [r7, #28]

      _Map_pointer __new_nstart;
      if (this->_M_impl._M_map_size > 2 * __new_num_nodes)
 8010070:	68fb      	ldr	r3, [r7, #12]
 8010072:	685a      	ldr	r2, [r3, #4]
 8010074:	69fb      	ldr	r3, [r7, #28]
 8010076:	005b      	lsls	r3, r3, #1
 8010078:	429a      	cmp	r2, r3
 801007a:	d92d      	bls.n	80100d8 <_ZNSt5dequeIfSaIfEE17_M_reallocate_mapEjb+0x8e>
	{
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
 801007c:	68fb      	ldr	r3, [r7, #12]
 801007e:	681a      	ldr	r2, [r3, #0]
 8010080:	68fb      	ldr	r3, [r7, #12]
 8010082:	6859      	ldr	r1, [r3, #4]
					 - __new_num_nodes) / 2
 8010084:	69fb      	ldr	r3, [r7, #28]
 8010086:	1acb      	subs	r3, r1, r3
 8010088:	085b      	lsrs	r3, r3, #1
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
 801008a:	0099      	lsls	r1, r3, #2
			 + (__add_at_front ? __nodes_to_add : 0);
 801008c:	79fb      	ldrb	r3, [r7, #7]
 801008e:	2b00      	cmp	r3, #0
 8010090:	d002      	beq.n	8010098 <_ZNSt5dequeIfSaIfEE17_M_reallocate_mapEjb+0x4e>
 8010092:	68bb      	ldr	r3, [r7, #8]
 8010094:	009b      	lsls	r3, r3, #2
 8010096:	e000      	b.n	801009a <_ZNSt5dequeIfSaIfEE17_M_reallocate_mapEjb+0x50>
 8010098:	2300      	movs	r3, #0
 801009a:	440b      	add	r3, r1
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
 801009c:	4413      	add	r3, r2
 801009e:	627b      	str	r3, [r7, #36]	; 0x24
	  if (__new_nstart < this->_M_impl._M_start._M_node)
 80100a0:	68fb      	ldr	r3, [r7, #12]
 80100a2:	695b      	ldr	r3, [r3, #20]
 80100a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80100a6:	429a      	cmp	r2, r3
 80100a8:	d209      	bcs.n	80100be <_ZNSt5dequeIfSaIfEE17_M_reallocate_mapEjb+0x74>
	    std::copy(this->_M_impl._M_start._M_node,
 80100aa:	68fb      	ldr	r3, [r7, #12]
 80100ac:	6958      	ldr	r0, [r3, #20]
		      this->_M_impl._M_finish._M_node + 1,
 80100ae:	68fb      	ldr	r3, [r7, #12]
 80100b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	    std::copy(this->_M_impl._M_start._M_node,
 80100b2:	3304      	adds	r3, #4
 80100b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80100b6:	4619      	mov	r1, r3
 80100b8:	f7ff ff97 	bl	800ffea <_ZSt4copyIPPfS1_ET0_T_S3_S2_>
 80100bc:	e048      	b.n	8010150 <_ZNSt5dequeIfSaIfEE17_M_reallocate_mapEjb+0x106>
		      __new_nstart);
	  else
	    std::copy_backward(this->_M_impl._M_start._M_node,
 80100be:	68fb      	ldr	r3, [r7, #12]
 80100c0:	6958      	ldr	r0, [r3, #20]
			       this->_M_impl._M_finish._M_node + 1,
 80100c2:	68fb      	ldr	r3, [r7, #12]
 80100c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	    std::copy_backward(this->_M_impl._M_start._M_node,
 80100c6:	1d19      	adds	r1, r3, #4
			       __new_nstart + __old_num_nodes);
 80100c8:	6a3b      	ldr	r3, [r7, #32]
 80100ca:	009b      	lsls	r3, r3, #2
	    std::copy_backward(this->_M_impl._M_start._M_node,
 80100cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80100ce:	4413      	add	r3, r2
 80100d0:	461a      	mov	r2, r3
 80100d2:	f7ff ffa2 	bl	801001a <_ZSt13copy_backwardIPPfS1_ET0_T_S3_S2_>
 80100d6:	e03b      	b.n	8010150 <_ZNSt5dequeIfSaIfEE17_M_reallocate_mapEjb+0x106>
	}
      else
	{
	  size_type __new_map_size = this->_M_impl._M_map_size
 80100d8:	68fb      	ldr	r3, [r7, #12]
 80100da:	685c      	ldr	r4, [r3, #4]
				     + std::max(this->_M_impl._M_map_size,
 80100dc:	68fb      	ldr	r3, [r7, #12]
 80100de:	3304      	adds	r3, #4
 80100e0:	f107 0208 	add.w	r2, r7, #8
 80100e4:	4611      	mov	r1, r2
 80100e6:	4618      	mov	r0, r3
 80100e8:	f7f3 fd0d 	bl	8003b06 <_ZSt3maxIjERKT_S2_S2_>
 80100ec:	4603      	mov	r3, r0
 80100ee:	681b      	ldr	r3, [r3, #0]
 80100f0:	4423      	add	r3, r4
	  size_type __new_map_size = this->_M_impl._M_map_size
 80100f2:	3302      	adds	r3, #2
 80100f4:	61bb      	str	r3, [r7, #24]
						__nodes_to_add) + 2;

	  _Map_pointer __new_map = this->_M_allocate_map(__new_map_size);
 80100f6:	68fb      	ldr	r3, [r7, #12]
 80100f8:	69b9      	ldr	r1, [r7, #24]
 80100fa:	4618      	mov	r0, r3
 80100fc:	f7fe fc00 	bl	800e900 <_ZNSt11_Deque_baseIfSaIfEE15_M_allocate_mapEj>
 8010100:	6178      	str	r0, [r7, #20]
	  __new_nstart = __new_map + (__new_map_size - __new_num_nodes) / 2
 8010102:	69ba      	ldr	r2, [r7, #24]
 8010104:	69fb      	ldr	r3, [r7, #28]
 8010106:	1ad3      	subs	r3, r2, r3
 8010108:	085b      	lsrs	r3, r3, #1
 801010a:	009a      	lsls	r2, r3, #2
			 + (__add_at_front ? __nodes_to_add : 0);
 801010c:	79fb      	ldrb	r3, [r7, #7]
 801010e:	2b00      	cmp	r3, #0
 8010110:	d002      	beq.n	8010118 <_ZNSt5dequeIfSaIfEE17_M_reallocate_mapEjb+0xce>
 8010112:	68bb      	ldr	r3, [r7, #8]
 8010114:	009b      	lsls	r3, r3, #2
 8010116:	e000      	b.n	801011a <_ZNSt5dequeIfSaIfEE17_M_reallocate_mapEjb+0xd0>
 8010118:	2300      	movs	r3, #0
 801011a:	4413      	add	r3, r2
	  __new_nstart = __new_map + (__new_map_size - __new_num_nodes) / 2
 801011c:	697a      	ldr	r2, [r7, #20]
 801011e:	4413      	add	r3, r2
 8010120:	627b      	str	r3, [r7, #36]	; 0x24
	  std::copy(this->_M_impl._M_start._M_node,
 8010122:	68fb      	ldr	r3, [r7, #12]
 8010124:	6958      	ldr	r0, [r3, #20]
		    this->_M_impl._M_finish._M_node + 1,
 8010126:	68fb      	ldr	r3, [r7, #12]
 8010128:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	  std::copy(this->_M_impl._M_start._M_node,
 801012a:	3304      	adds	r3, #4
 801012c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801012e:	4619      	mov	r1, r3
 8010130:	f7ff ff5b 	bl	800ffea <_ZSt4copyIPPfS1_ET0_T_S3_S2_>
		    __new_nstart);
	  _M_deallocate_map(this->_M_impl._M_map, this->_M_impl._M_map_size);
 8010134:	68f8      	ldr	r0, [r7, #12]
 8010136:	68fb      	ldr	r3, [r7, #12]
 8010138:	6819      	ldr	r1, [r3, #0]
 801013a:	68fb      	ldr	r3, [r7, #12]
 801013c:	685b      	ldr	r3, [r3, #4]
 801013e:	461a      	mov	r2, r3
 8010140:	f7fd fbb9 	bl	800d8b6 <_ZNSt11_Deque_baseIfSaIfEE17_M_deallocate_mapEPPfj>

	  this->_M_impl._M_map = __new_map;
 8010144:	68fb      	ldr	r3, [r7, #12]
 8010146:	697a      	ldr	r2, [r7, #20]
 8010148:	601a      	str	r2, [r3, #0]
	  this->_M_impl._M_map_size = __new_map_size;
 801014a:	68fb      	ldr	r3, [r7, #12]
 801014c:	69ba      	ldr	r2, [r7, #24]
 801014e:	605a      	str	r2, [r3, #4]
	}

      this->_M_impl._M_start._M_set_node(__new_nstart);
 8010150:	68fb      	ldr	r3, [r7, #12]
 8010152:	3308      	adds	r3, #8
 8010154:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8010156:	4618      	mov	r0, r3
 8010158:	f7fe fc0a 	bl	800e970 <_ZNSt15_Deque_iteratorIfRfPfE11_M_set_nodeEPS1_>
      this->_M_impl._M_finish._M_set_node(__new_nstart + __old_num_nodes - 1);
 801015c:	68fb      	ldr	r3, [r7, #12]
 801015e:	f103 0018 	add.w	r0, r3, #24
 8010162:	6a3b      	ldr	r3, [r7, #32]
 8010164:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8010168:	3b01      	subs	r3, #1
 801016a:	009b      	lsls	r3, r3, #2
 801016c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801016e:	4413      	add	r3, r2
 8010170:	4619      	mov	r1, r3
 8010172:	f7fe fbfd 	bl	800e970 <_ZNSt15_Deque_iteratorIfRfPfE11_M_set_nodeEPS1_>
    }
 8010176:	bf00      	nop
 8010178:	372c      	adds	r7, #44	; 0x2c
 801017a:	46bd      	mov	sp, r7
 801017c:	bd90      	pop	{r4, r7, pc}

0801017e <_ZNKSt6vectorIcSaIcEE12_M_check_lenEjPKc>:
      _M_check_len(size_type __n, const char* __s) const
 801017e:	b590      	push	{r4, r7, lr}
 8010180:	b087      	sub	sp, #28
 8010182:	af00      	add	r7, sp, #0
 8010184:	60f8      	str	r0, [r7, #12]
 8010186:	60b9      	str	r1, [r7, #8]
 8010188:	607a      	str	r2, [r7, #4]
	if (max_size() - size() < __n)
 801018a:	68f8      	ldr	r0, [r7, #12]
 801018c:	f000 fe7c 	bl	8010e88 <_ZNKSt6vectorIcSaIcEE8max_sizeEv>
 8010190:	4604      	mov	r4, r0
 8010192:	68f8      	ldr	r0, [r7, #12]
 8010194:	f7fc fefc 	bl	800cf90 <_ZNKSt6vectorIcSaIcEE4sizeEv>
 8010198:	4603      	mov	r3, r0
 801019a:	1ae2      	subs	r2, r4, r3
 801019c:	68bb      	ldr	r3, [r7, #8]
 801019e:	429a      	cmp	r2, r3
 80101a0:	bf34      	ite	cc
 80101a2:	2301      	movcc	r3, #1
 80101a4:	2300      	movcs	r3, #0
 80101a6:	b2db      	uxtb	r3, r3
 80101a8:	2b00      	cmp	r3, #0
 80101aa:	d002      	beq.n	80101b2 <_ZNKSt6vectorIcSaIcEE12_M_check_lenEjPKc+0x34>
	  __throw_length_error(__N(__s));
 80101ac:	6878      	ldr	r0, [r7, #4]
 80101ae:	f011 f803 	bl	80211b8 <_ZSt20__throw_length_errorPKc>
	const size_type __len = size() + (std::max)(size(), __n);
 80101b2:	68f8      	ldr	r0, [r7, #12]
 80101b4:	f7fc feec 	bl	800cf90 <_ZNKSt6vectorIcSaIcEE4sizeEv>
 80101b8:	4604      	mov	r4, r0
 80101ba:	68f8      	ldr	r0, [r7, #12]
 80101bc:	f7fc fee8 	bl	800cf90 <_ZNKSt6vectorIcSaIcEE4sizeEv>
 80101c0:	4603      	mov	r3, r0
 80101c2:	613b      	str	r3, [r7, #16]
 80101c4:	f107 0208 	add.w	r2, r7, #8
 80101c8:	f107 0310 	add.w	r3, r7, #16
 80101cc:	4611      	mov	r1, r2
 80101ce:	4618      	mov	r0, r3
 80101d0:	f7f3 fc99 	bl	8003b06 <_ZSt3maxIjERKT_S2_S2_>
 80101d4:	4603      	mov	r3, r0
 80101d6:	681b      	ldr	r3, [r3, #0]
 80101d8:	4423      	add	r3, r4
 80101da:	617b      	str	r3, [r7, #20]
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 80101dc:	68f8      	ldr	r0, [r7, #12]
 80101de:	f7fc fed7 	bl	800cf90 <_ZNKSt6vectorIcSaIcEE4sizeEv>
 80101e2:	4602      	mov	r2, r0
 80101e4:	697b      	ldr	r3, [r7, #20]
 80101e6:	4293      	cmp	r3, r2
 80101e8:	d306      	bcc.n	80101f8 <_ZNKSt6vectorIcSaIcEE12_M_check_lenEjPKc+0x7a>
 80101ea:	68f8      	ldr	r0, [r7, #12]
 80101ec:	f000 fe4c 	bl	8010e88 <_ZNKSt6vectorIcSaIcEE8max_sizeEv>
 80101f0:	4602      	mov	r2, r0
 80101f2:	697b      	ldr	r3, [r7, #20]
 80101f4:	4293      	cmp	r3, r2
 80101f6:	d904      	bls.n	8010202 <_ZNKSt6vectorIcSaIcEE12_M_check_lenEjPKc+0x84>
 80101f8:	68f8      	ldr	r0, [r7, #12]
 80101fa:	f000 fe45 	bl	8010e88 <_ZNKSt6vectorIcSaIcEE8max_sizeEv>
 80101fe:	4603      	mov	r3, r0
 8010200:	e000      	b.n	8010204 <_ZNKSt6vectorIcSaIcEE12_M_check_lenEjPKc+0x86>
 8010202:	697b      	ldr	r3, [r7, #20]
      }
 8010204:	4618      	mov	r0, r3
 8010206:	371c      	adds	r7, #28
 8010208:	46bd      	mov	sp, r7
 801020a:	bd90      	pop	{r4, r7, pc}

0801020c <_ZNSt6vectorIcSaIcEE11_S_relocateEPcS2_S2_RS0_>:
      _S_relocate(pointer __first, pointer __last, pointer __result,
 801020c:	b590      	push	{r4, r7, lr}
 801020e:	b087      	sub	sp, #28
 8010210:	af02      	add	r7, sp, #8
 8010212:	60f8      	str	r0, [r7, #12]
 8010214:	60b9      	str	r1, [r7, #8]
 8010216:	607a      	str	r2, [r7, #4]
 8010218:	603b      	str	r3, [r7, #0]
	return _S_do_relocate(__first, __last, __result, __alloc, __do_it{});
 801021a:	f88d 4000 	strb.w	r4, [sp]
 801021e:	683b      	ldr	r3, [r7, #0]
 8010220:	687a      	ldr	r2, [r7, #4]
 8010222:	68b9      	ldr	r1, [r7, #8]
 8010224:	68f8      	ldr	r0, [r7, #12]
 8010226:	f000 fe40 	bl	8010eaa <_ZNSt6vectorIcSaIcEE14_S_do_relocateEPcS2_S2_RS0_St17integral_constantIbLb1EE>
 801022a:	4603      	mov	r3, r0
      }
 801022c:	4618      	mov	r0, r3
 801022e:	3714      	adds	r7, #20
 8010230:	46bd      	mov	sp, r7
 8010232:	bd90      	pop	{r4, r7, pc}

08010234 <_ZNK9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEmiEi>:
      operator-(difference_type __n) const _GLIBCXX_NOEXCEPT
 8010234:	b580      	push	{r7, lr}
 8010236:	b084      	sub	sp, #16
 8010238:	af00      	add	r7, sp, #0
 801023a:	6078      	str	r0, [r7, #4]
 801023c:	6039      	str	r1, [r7, #0]
      { return __normal_iterator(_M_current - __n); }
 801023e:	687b      	ldr	r3, [r7, #4]
 8010240:	681a      	ldr	r2, [r3, #0]
 8010242:	683b      	ldr	r3, [r7, #0]
 8010244:	425b      	negs	r3, r3
 8010246:	4413      	add	r3, r2
 8010248:	60fb      	str	r3, [r7, #12]
 801024a:	f107 020c 	add.w	r2, r7, #12
 801024e:	f107 0308 	add.w	r3, r7, #8
 8010252:	4611      	mov	r1, r2
 8010254:	4618      	mov	r0, r3
 8010256:	f7fd fc8f 	bl	800db78 <_ZN9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEC1ERKS1_>
 801025a:	68bb      	ldr	r3, [r7, #8]
 801025c:	4618      	mov	r0, r3
 801025e:	3710      	adds	r7, #16
 8010260:	46bd      	mov	sp, r7
 8010262:	bd80      	pop	{r7, pc}

08010264 <_ZSt10__distanceIPcENSt15iterator_traitsIT_E15difference_typeES2_S2_St26random_access_iterator_tag>:
    __distance(_RandomAccessIterator __first, _RandomAccessIterator __last,
 8010264:	b480      	push	{r7}
 8010266:	b085      	sub	sp, #20
 8010268:	af00      	add	r7, sp, #0
 801026a:	60f8      	str	r0, [r7, #12]
 801026c:	60b9      	str	r1, [r7, #8]
 801026e:	713a      	strb	r2, [r7, #4]
      return __last - __first;
 8010270:	68ba      	ldr	r2, [r7, #8]
 8010272:	68fb      	ldr	r3, [r7, #12]
 8010274:	1ad3      	subs	r3, r2, r3
    }
 8010276:	4618      	mov	r0, r3
 8010278:	3714      	adds	r7, #20
 801027a:	46bd      	mov	sp, r7
 801027c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010280:	4770      	bx	lr

08010282 <_ZSt22__uninitialized_move_aIPcS0_SaIcEET0_T_S3_S2_RT1_>:
    __uninitialized_move_a(_InputIterator __first, _InputIterator __last,
 8010282:	b590      	push	{r4, r7, lr}
 8010284:	b085      	sub	sp, #20
 8010286:	af00      	add	r7, sp, #0
 8010288:	60f8      	str	r0, [r7, #12]
 801028a:	60b9      	str	r1, [r7, #8]
 801028c:	607a      	str	r2, [r7, #4]
 801028e:	603b      	str	r3, [r7, #0]
      return std::__uninitialized_copy_a(_GLIBCXX_MAKE_MOVE_ITERATOR(__first),
 8010290:	68f8      	ldr	r0, [r7, #12]
 8010292:	f000 fe26 	bl	8010ee2 <_ZSt18make_move_iteratorIPcESt13move_iteratorIT_ES2_>
 8010296:	4604      	mov	r4, r0
 8010298:	68b8      	ldr	r0, [r7, #8]
 801029a:	f000 fe22 	bl	8010ee2 <_ZSt18make_move_iteratorIPcESt13move_iteratorIT_ES2_>
 801029e:	4601      	mov	r1, r0
 80102a0:	683b      	ldr	r3, [r7, #0]
 80102a2:	687a      	ldr	r2, [r7, #4]
 80102a4:	4620      	mov	r0, r4
 80102a6:	f000 fe31 	bl	8010f0c <_ZSt22__uninitialized_copy_aISt13move_iteratorIPcES1_cET0_T_S4_S3_RSaIT1_E>
 80102aa:	4603      	mov	r3, r0
    }
 80102ac:	4618      	mov	r0, r3
 80102ae:	3714      	adds	r7, #20
 80102b0:	46bd      	mov	sp, r7
 80102b2:	bd90      	pop	{r4, r7, pc}

080102b4 <_ZSt12__miter_baseIPcET_S1_>:
    __miter_base(_Iterator __it)
 80102b4:	b480      	push	{r7}
 80102b6:	b083      	sub	sp, #12
 80102b8:	af00      	add	r7, sp, #0
 80102ba:	6078      	str	r0, [r7, #4]
    { return __it; }
 80102bc:	687b      	ldr	r3, [r7, #4]
 80102be:	4618      	mov	r0, r3
 80102c0:	370c      	adds	r7, #12
 80102c2:	46bd      	mov	sp, r7
 80102c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102c8:	4770      	bx	lr

080102ca <_ZSt22__copy_move_backward_aILb1EPcS0_ET1_T0_S2_S1_>:
    __copy_move_backward_a(_II __first, _II __last, _OI __result)
 80102ca:	b5b0      	push	{r4, r5, r7, lr}
 80102cc:	b084      	sub	sp, #16
 80102ce:	af00      	add	r7, sp, #0
 80102d0:	60f8      	str	r0, [r7, #12]
 80102d2:	60b9      	str	r1, [r7, #8]
 80102d4:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 80102d6:	68f8      	ldr	r0, [r7, #12]
 80102d8:	f7fd fd9c 	bl	800de14 <_ZSt12__niter_baseIPcET_S1_>
 80102dc:	4604      	mov	r4, r0
 80102de:	68b8      	ldr	r0, [r7, #8]
 80102e0:	f7fd fd98 	bl	800de14 <_ZSt12__niter_baseIPcET_S1_>
 80102e4:	4605      	mov	r5, r0
 80102e6:	687b      	ldr	r3, [r7, #4]
 80102e8:	4618      	mov	r0, r3
 80102ea:	f7fd fd93 	bl	800de14 <_ZSt12__niter_baseIPcET_S1_>
 80102ee:	4603      	mov	r3, r0
 80102f0:	461a      	mov	r2, r3
 80102f2:	4629      	mov	r1, r5
 80102f4:	4620      	mov	r0, r4
 80102f6:	f000 fe1a 	bl	8010f2e <_ZSt23__copy_move_backward_a1ILb1EPcS0_ET1_T0_S2_S1_>
 80102fa:	4602      	mov	r2, r0
 80102fc:	1d3b      	adds	r3, r7, #4
 80102fe:	4611      	mov	r1, r2
 8010300:	4618      	mov	r0, r3
 8010302:	f7fd fda2 	bl	800de4a <_ZSt12__niter_wrapIPcET_RKS1_S1_>
 8010306:	4603      	mov	r3, r0
    }
 8010308:	4618      	mov	r0, r3
 801030a:	3710      	adds	r7, #16
 801030c:	46bd      	mov	sp, r7
 801030e:	bdb0      	pop	{r4, r5, r7, pc}

08010310 <_ZSt13__copy_move_aILb0EPcN9__gnu_cxx17__normal_iteratorIS0_St6vectorIcSaIcEEEEET1_T0_S8_S7_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 8010310:	b5b0      	push	{r4, r5, r7, lr}
 8010312:	b084      	sub	sp, #16
 8010314:	af00      	add	r7, sp, #0
 8010316:	60f8      	str	r0, [r7, #12]
 8010318:	60b9      	str	r1, [r7, #8]
 801031a:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 801031c:	68f8      	ldr	r0, [r7, #12]
 801031e:	f7fd fd79 	bl	800de14 <_ZSt12__niter_baseIPcET_S1_>
 8010322:	4604      	mov	r4, r0
 8010324:	68b8      	ldr	r0, [r7, #8]
 8010326:	f7fd fd75 	bl	800de14 <_ZSt12__niter_baseIPcET_S1_>
 801032a:	4605      	mov	r5, r0
 801032c:	6878      	ldr	r0, [r7, #4]
 801032e:	f000 fe0e 	bl	8010f4e <_ZSt12__niter_baseIPcSt6vectorIcSaIcEEET_N9__gnu_cxx17__normal_iteratorIS4_T0_EE>
 8010332:	4603      	mov	r3, r0
 8010334:	461a      	mov	r2, r3
 8010336:	4629      	mov	r1, r5
 8010338:	4620      	mov	r0, r4
 801033a:	f000 fe16 	bl	8010f6a <_ZSt14__copy_move_a1ILb0EPcS0_ET1_T0_S2_S1_>
 801033e:	4603      	mov	r3, r0
 8010340:	4619      	mov	r1, r3
 8010342:	6878      	ldr	r0, [r7, #4]
 8010344:	f000 fe21 	bl	8010f8a <_ZSt12__niter_wrapIN9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEES2_ET_S7_T0_>
 8010348:	4603      	mov	r3, r0
    }
 801034a:	4618      	mov	r0, r3
 801034c:	3710      	adds	r7, #16
 801034e:	46bd      	mov	sp, r7
 8010350:	bdb0      	pop	{r4, r5, r7, pc}

08010352 <_ZSt7advanceIPcjEvRT_T0_>:
   *  For random access iterators, this uses their @c + and @c - operations
   *  and are constant time.  For other %iterator classes they are linear time.
  */
  template<typename _InputIterator, typename _Distance>
    inline _GLIBCXX17_CONSTEXPR void
    advance(_InputIterator& __i, _Distance __n)
 8010352:	b590      	push	{r4, r7, lr}
 8010354:	b085      	sub	sp, #20
 8010356:	af00      	add	r7, sp, #0
 8010358:	6078      	str	r0, [r7, #4]
 801035a:	6039      	str	r1, [r7, #0]
    {
      // concept requirements -- taken care of in __advance
      typename iterator_traits<_InputIterator>::difference_type __d = __n;
 801035c:	683b      	ldr	r3, [r7, #0]
 801035e:	60fb      	str	r3, [r7, #12]
      std::__advance(__i, __d, std::__iterator_category(__i));
 8010360:	6878      	ldr	r0, [r7, #4]
 8010362:	f7fc feae 	bl	800d0c2 <_ZSt19__iterator_categoryIPcENSt15iterator_traitsIT_E17iterator_categoryERKS2_>
 8010366:	4622      	mov	r2, r4
 8010368:	68f9      	ldr	r1, [r7, #12]
 801036a:	6878      	ldr	r0, [r7, #4]
 801036c:	f000 fe22 	bl	8010fb4 <_ZSt9__advanceIPciEvRT_T0_St26random_access_iterator_tag>
    }
 8010370:	bf00      	nop
 8010372:	3714      	adds	r7, #20
 8010374:	46bd      	mov	sp, r7
 8010376:	bd90      	pop	{r4, r7, pc}

08010378 <_ZSt22__uninitialized_copy_aIPcS0_cET0_T_S2_S1_RSaIT1_E>:
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 8010378:	b580      	push	{r7, lr}
 801037a:	b084      	sub	sp, #16
 801037c:	af00      	add	r7, sp, #0
 801037e:	60f8      	str	r0, [r7, #12]
 8010380:	60b9      	str	r1, [r7, #8]
 8010382:	607a      	str	r2, [r7, #4]
 8010384:	603b      	str	r3, [r7, #0]
    { return std::uninitialized_copy(__first, __last, __result); }
 8010386:	687a      	ldr	r2, [r7, #4]
 8010388:	68b9      	ldr	r1, [r7, #8]
 801038a:	68f8      	ldr	r0, [r7, #12]
 801038c:	f000 fe24 	bl	8010fd8 <_ZSt18uninitialized_copyIPcS0_ET0_T_S2_S1_>
 8010390:	4603      	mov	r3, r0
 8010392:	4618      	mov	r0, r3
 8010394:	3710      	adds	r7, #16
 8010396:	46bd      	mov	sp, r7
 8010398:	bd80      	pop	{r7, pc}

0801039a <_ZSt34__uninitialized_move_if_noexcept_aIPcS0_SaIcEET0_T_S3_S2_RT1_>:
    __uninitialized_move_if_noexcept_a(_InputIterator __first,
 801039a:	b590      	push	{r4, r7, lr}
 801039c:	b085      	sub	sp, #20
 801039e:	af00      	add	r7, sp, #0
 80103a0:	60f8      	str	r0, [r7, #12]
 80103a2:	60b9      	str	r1, [r7, #8]
 80103a4:	607a      	str	r2, [r7, #4]
 80103a6:	603b      	str	r3, [r7, #0]
	(_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__first),
 80103a8:	68f8      	ldr	r0, [r7, #12]
 80103aa:	f000 fe27 	bl	8010ffc <_ZSt32__make_move_if_noexcept_iteratorIcSt13move_iteratorIPcEET0_PT_>
 80103ae:	4604      	mov	r4, r0
 80103b0:	68b8      	ldr	r0, [r7, #8]
 80103b2:	f000 fe23 	bl	8010ffc <_ZSt32__make_move_if_noexcept_iteratorIcSt13move_iteratorIPcEET0_PT_>
 80103b6:	4601      	mov	r1, r0
 80103b8:	683b      	ldr	r3, [r7, #0]
 80103ba:	687a      	ldr	r2, [r7, #4]
 80103bc:	4620      	mov	r0, r4
 80103be:	f000 fda5 	bl	8010f0c <_ZSt22__uninitialized_copy_aISt13move_iteratorIPcES1_cET0_T_S4_S3_RSaIT1_E>
 80103c2:	4603      	mov	r3, r0
    }
 80103c4:	4618      	mov	r0, r3
 80103c6:	3714      	adds	r7, #20
 80103c8:	46bd      	mov	sp, r7
 80103ca:	bd90      	pop	{r4, r7, pc}

080103cc <_ZSt4swapIbENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS4_ESt18is_move_assignableIS4_EEE5valueEvE4typeERS4_SE_>:
			      is_move_constructible<_Tp>,
			      is_move_assignable<_Tp>>::value>::type
#else
    void
#endif
    swap(_Tp& __a, _Tp& __b)
 80103cc:	b580      	push	{r7, lr}
 80103ce:	b084      	sub	sp, #16
 80103d0:	af00      	add	r7, sp, #0
 80103d2:	6078      	str	r0, [r7, #4]
 80103d4:	6039      	str	r1, [r7, #0]
    {
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80103d6:	6878      	ldr	r0, [r7, #4]
 80103d8:	f000 fe1f 	bl	801101a <_ZSt4moveIRbEONSt16remove_referenceIT_E4typeEOS2_>
 80103dc:	4603      	mov	r3, r0
 80103de:	781b      	ldrb	r3, [r3, #0]
 80103e0:	73fb      	strb	r3, [r7, #15]
      __a = _GLIBCXX_MOVE(__b);
 80103e2:	6838      	ldr	r0, [r7, #0]
 80103e4:	f000 fe19 	bl	801101a <_ZSt4moveIRbEONSt16remove_referenceIT_E4typeEOS2_>
 80103e8:	4603      	mov	r3, r0
 80103ea:	781a      	ldrb	r2, [r3, #0]
 80103ec:	687b      	ldr	r3, [r7, #4]
 80103ee:	701a      	strb	r2, [r3, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 80103f0:	f107 030f 	add.w	r3, r7, #15
 80103f4:	4618      	mov	r0, r3
 80103f6:	f000 fe10 	bl	801101a <_ZSt4moveIRbEONSt16remove_referenceIT_E4typeEOS2_>
 80103fa:	4603      	mov	r3, r0
 80103fc:	781a      	ldrb	r2, [r3, #0]
 80103fe:	683b      	ldr	r3, [r7, #0]
 8010400:	701a      	strb	r2, [r3, #0]
    }
 8010402:	bf00      	nop
 8010404:	3710      	adds	r7, #16
 8010406:	46bd      	mov	sp, r7
 8010408:	bd80      	pop	{r7, pc}

0801040a <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPKcPcEET0_T_S7_S6_>:
	__copy_m(_II __first, _II __last, _OI __result)
 801040a:	b480      	push	{r7}
 801040c:	b087      	sub	sp, #28
 801040e:	af00      	add	r7, sp, #0
 8010410:	60f8      	str	r0, [r7, #12]
 8010412:	60b9      	str	r1, [r7, #8]
 8010414:	607a      	str	r2, [r7, #4]
	  for(_Distance __n = __last - __first; __n > 0; --__n)
 8010416:	68ba      	ldr	r2, [r7, #8]
 8010418:	68fb      	ldr	r3, [r7, #12]
 801041a:	1ad3      	subs	r3, r2, r3
 801041c:	617b      	str	r3, [r7, #20]
 801041e:	e00c      	b.n	801043a <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPKcPcEET0_T_S7_S6_+0x30>
	      *__result = *__first;
 8010420:	68fb      	ldr	r3, [r7, #12]
 8010422:	781a      	ldrb	r2, [r3, #0]
 8010424:	687b      	ldr	r3, [r7, #4]
 8010426:	701a      	strb	r2, [r3, #0]
	      ++__first;
 8010428:	68fb      	ldr	r3, [r7, #12]
 801042a:	3301      	adds	r3, #1
 801042c:	60fb      	str	r3, [r7, #12]
	      ++__result;
 801042e:	687b      	ldr	r3, [r7, #4]
 8010430:	3301      	adds	r3, #1
 8010432:	607b      	str	r3, [r7, #4]
	  for(_Distance __n = __last - __first; __n > 0; --__n)
 8010434:	697b      	ldr	r3, [r7, #20]
 8010436:	3b01      	subs	r3, #1
 8010438:	617b      	str	r3, [r7, #20]
 801043a:	697b      	ldr	r3, [r7, #20]
 801043c:	2b00      	cmp	r3, #0
 801043e:	dcef      	bgt.n	8010420 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPKcPcEET0_T_S7_S6_+0x16>
	  return __result;
 8010440:	687b      	ldr	r3, [r7, #4]
	}
 8010442:	4618      	mov	r0, r3
 8010444:	371c      	adds	r7, #28
 8010446:	46bd      	mov	sp, r7
 8010448:	f85d 7b04 	ldr.w	r7, [sp], #4
 801044c:	4770      	bx	lr

0801044e <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIcEEPT_PKS3_S6_S4_>:
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 801044e:	b580      	push	{r7, lr}
 8010450:	b086      	sub	sp, #24
 8010452:	af00      	add	r7, sp, #0
 8010454:	60f8      	str	r0, [r7, #12]
 8010456:	60b9      	str	r1, [r7, #8]
 8010458:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 801045a:	68ba      	ldr	r2, [r7, #8]
 801045c:	68fb      	ldr	r3, [r7, #12]
 801045e:	1ad3      	subs	r3, r2, r3
 8010460:	617b      	str	r3, [r7, #20]
	  if (_Num)
 8010462:	697b      	ldr	r3, [r7, #20]
 8010464:	2b00      	cmp	r3, #0
 8010466:	d005      	beq.n	8010474 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIcEEPT_PKS3_S6_S4_+0x26>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 8010468:	697b      	ldr	r3, [r7, #20]
 801046a:	461a      	mov	r2, r3
 801046c:	68f9      	ldr	r1, [r7, #12]
 801046e:	6878      	ldr	r0, [r7, #4]
 8010470:	f014 f985 	bl	802477e <memmove>
	  return __result + _Num;
 8010474:	697b      	ldr	r3, [r7, #20]
 8010476:	687a      	ldr	r2, [r7, #4]
 8010478:	4413      	add	r3, r2
	}
 801047a:	4618      	mov	r0, r3
 801047c:	3718      	adds	r7, #24
 801047e:	46bd      	mov	sp, r7
 8010480:	bd80      	pop	{r7, pc}

08010482 <_ZSt11__addressofIcEPT_RS0_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 8010482:	b480      	push	{r7}
 8010484:	b083      	sub	sp, #12
 8010486:	af00      	add	r7, sp, #0
 8010488:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 801048a:	687b      	ldr	r3, [r7, #4]
 801048c:	4618      	mov	r0, r3
 801048e:	370c      	adds	r7, #12
 8010490:	46bd      	mov	sp, r7
 8010492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010496:	4770      	bx	lr

08010498 <_ZNKSt8__detail10_Synth3wayclIPfS2_EEDaRKT_RKT0_>:
	    return noexcept(*__t < *__u) && noexcept(*__u < *__t);
	}

      template<typename _Tp, typename _Up>
	constexpr auto
	operator()(const _Tp& __t, const _Up& __u) const
 8010498:	b480      	push	{r7}
 801049a:	b085      	sub	sp, #20
 801049c:	af00      	add	r7, sp, #0
 801049e:	60f8      	str	r0, [r7, #12]
 80104a0:	60b9      	str	r1, [r7, #8]
 80104a2:	607a      	str	r2, [r7, #4]
	  { __t < __u } -> __boolean_testable;
	  { __u < __t } -> __boolean_testable;
	}
	{
	  if constexpr (three_way_comparable_with<_Tp, _Up>)
	    return __t <=> __u;
 80104a4:	68bb      	ldr	r3, [r7, #8]
 80104a6:	681a      	ldr	r2, [r3, #0]
 80104a8:	687b      	ldr	r3, [r7, #4]
 80104aa:	681b      	ldr	r3, [r3, #0]
 80104ac:	429a      	cmp	r2, r3
 80104ae:	d009      	beq.n	80104c4 <_ZNKSt8__detail10_Synth3wayclIPfS2_EEDaRKT_RKT0_+0x2c>
 80104b0:	68bb      	ldr	r3, [r7, #8]
 80104b2:	681a      	ldr	r2, [r3, #0]
 80104b4:	687b      	ldr	r3, [r7, #4]
 80104b6:	681b      	ldr	r3, [r3, #0]
 80104b8:	429a      	cmp	r2, r3
 80104ba:	d201      	bcs.n	80104c0 <_ZNKSt8__detail10_Synth3wayclIPfS2_EEDaRKT_RKT0_+0x28>
 80104bc:	23ff      	movs	r3, #255	; 0xff
 80104be:	e002      	b.n	80104c6 <_ZNKSt8__detail10_Synth3wayclIPfS2_EEDaRKT_RKT0_+0x2e>
 80104c0:	2301      	movs	r3, #1
 80104c2:	e000      	b.n	80104c6 <_ZNKSt8__detail10_Synth3wayclIPfS2_EEDaRKT_RKT0_+0x2e>
 80104c4:	2300      	movs	r3, #0
	      else if (__u < __t)
		return weak_ordering::greater;
	      else
		return weak_ordering::equivalent;
	    }
	}
 80104c6:	4618      	mov	r0, r3
 80104c8:	3714      	adds	r7, #20
 80104ca:	46bd      	mov	sp, r7
 80104cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104d0:	4770      	bx	lr
	...

080104d4 <_ZN9__gnu_cxxssIPfSt6vectorIfSaIfEEEEDTclL_ZNSt8__detail11__synth3wayEEcl7declvalIRT_EEcl7declvalIS7_EEEERKNS_17__normal_iteratorIS6_T0_EESD_>:
    operator<=>(const __normal_iterator<_Iterator, _Container>& __lhs,
 80104d4:	b590      	push	{r4, r7, lr}
 80104d6:	b083      	sub	sp, #12
 80104d8:	af00      	add	r7, sp, #0
 80104da:	6078      	str	r0, [r7, #4]
 80104dc:	6039      	str	r1, [r7, #0]
    { return std::__detail::__synth3way(__lhs.base(), __rhs.base()); }
 80104de:	6878      	ldr	r0, [r7, #4]
 80104e0:	f7f3 fac1 	bl	8003a66 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEE4baseEv>
 80104e4:	4604      	mov	r4, r0
 80104e6:	6838      	ldr	r0, [r7, #0]
 80104e8:	f7f3 fabd 	bl	8003a66 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEE4baseEv>
 80104ec:	4603      	mov	r3, r0
 80104ee:	461a      	mov	r2, r3
 80104f0:	4621      	mov	r1, r4
 80104f2:	4804      	ldr	r0, [pc, #16]	; (8010504 <_ZN9__gnu_cxxssIPfSt6vectorIfSaIfEEEEDTclL_ZNSt8__detail11__synth3wayEEcl7declvalIRT_EEcl7declvalIS7_EEEERKNS_17__normal_iteratorIS6_T0_EESD_+0x30>)
 80104f4:	f7ff ffd0 	bl	8010498 <_ZNKSt8__detail10_Synth3wayclIPfS2_EEDaRKT_RKT0_>
 80104f8:	4603      	mov	r3, r0
 80104fa:	4618      	mov	r0, r3
 80104fc:	370c      	adds	r7, #12
 80104fe:	46bd      	mov	sp, r7
 8010500:	bd90      	pop	{r4, r7, pc}
 8010502:	bf00      	nop
 8010504:	08025ef8 	.word	0x08025ef8

08010508 <_ZSt13__heap_selectIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_S9_T0_>:
    __heap_select(_RandomAccessIterator __first,
 8010508:	b590      	push	{r4, r7, lr}
 801050a:	b087      	sub	sp, #28
 801050c:	af00      	add	r7, sp, #0
 801050e:	60f8      	str	r0, [r7, #12]
 8010510:	60b9      	str	r1, [r7, #8]
 8010512:	607a      	str	r2, [r7, #4]
 8010514:	703b      	strb	r3, [r7, #0]
      std::__make_heap(__first, __middle, __comp);
 8010516:	463b      	mov	r3, r7
 8010518:	461a      	mov	r2, r3
 801051a:	68b9      	ldr	r1, [r7, #8]
 801051c:	68f8      	ldr	r0, [r7, #12]
 801051e:	f000 fdb5 	bl	801108c <_ZSt11__make_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_RT0_>
      for (_RandomAccessIterator __i = __middle; __i < __last; ++__i)
 8010522:	68bb      	ldr	r3, [r7, #8]
 8010524:	613b      	str	r3, [r7, #16]
 8010526:	e013      	b.n	8010550 <_ZSt13__heap_selectIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_S9_T0_+0x48>
	if (__comp(__i, __first))
 8010528:	463b      	mov	r3, r7
 801052a:	68fa      	ldr	r2, [r7, #12]
 801052c:	6939      	ldr	r1, [r7, #16]
 801052e:	4618      	mov	r0, r3
 8010530:	f7fe ff27 	bl	800f382 <_ZNK9__gnu_cxx5__ops15_Iter_less_iterclINS_17__normal_iteratorIPfSt6vectorIfSaIfEEEES8_EEbT_T0_>
 8010534:	4603      	mov	r3, r0
 8010536:	2b00      	cmp	r3, #0
 8010538:	d005      	beq.n	8010546 <_ZSt13__heap_selectIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_S9_T0_+0x3e>
	  std::__pop_heap(__first, __middle, __i, __comp);
 801053a:	463b      	mov	r3, r7
 801053c:	693a      	ldr	r2, [r7, #16]
 801053e:	68b9      	ldr	r1, [r7, #8]
 8010540:	68f8      	ldr	r0, [r7, #12]
 8010542:	f000 fdf9 	bl	8011138 <_ZSt10__pop_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_S9_RT0_>
      for (_RandomAccessIterator __i = __middle; __i < __last; ++__i)
 8010546:	f107 0310 	add.w	r3, r7, #16
 801054a:	4618      	mov	r0, r3
 801054c:	f7fe fefd 	bl	800f34a <_ZN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEppEv>
 8010550:	1d3a      	adds	r2, r7, #4
 8010552:	f107 0310 	add.w	r3, r7, #16
 8010556:	4611      	mov	r1, r2
 8010558:	4618      	mov	r0, r3
 801055a:	f7ff ffbb 	bl	80104d4 <_ZN9__gnu_cxxssIPfSt6vectorIfSaIfEEEEDTclL_ZNSt8__detail11__synth3wayEEcl7declvalIRT_EEcl7declvalIS7_EEEERKNS_17__normal_iteratorIS6_T0_EESD_>
 801055e:	4604      	mov	r4, r0
 8010560:	f107 0314 	add.w	r3, r7, #20
 8010564:	2100      	movs	r1, #0
 8010566:	4618      	mov	r0, r3
 8010568:	f7f4 f88e 	bl	8004688 <_ZNSt9__cmp_cat8__unspecC1EPS0_>
 801056c:	7d39      	ldrb	r1, [r7, #20]
 801056e:	4620      	mov	r0, r4
 8010570:	f7f4 f896 	bl	80046a0 <_ZStltSt15strong_orderingNSt9__cmp_cat8__unspecE>
 8010574:	4603      	mov	r3, r0
 8010576:	2b00      	cmp	r3, #0
 8010578:	d1d6      	bne.n	8010528 <_ZSt13__heap_selectIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_S9_T0_+0x20>
    }
 801057a:	bf00      	nop
 801057c:	bf00      	nop
 801057e:	371c      	adds	r7, #28
 8010580:	46bd      	mov	sp, r7
 8010582:	bd90      	pop	{r4, r7, pc}

08010584 <_ZN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEmmEv>:
      operator--() _GLIBCXX_NOEXCEPT
 8010584:	b480      	push	{r7}
 8010586:	b083      	sub	sp, #12
 8010588:	af00      	add	r7, sp, #0
 801058a:	6078      	str	r0, [r7, #4]
	--_M_current;
 801058c:	687b      	ldr	r3, [r7, #4]
 801058e:	681b      	ldr	r3, [r3, #0]
 8010590:	1f1a      	subs	r2, r3, #4
 8010592:	687b      	ldr	r3, [r7, #4]
 8010594:	601a      	str	r2, [r3, #0]
	return *this;
 8010596:	687b      	ldr	r3, [r7, #4]
      }
 8010598:	4618      	mov	r0, r3
 801059a:	370c      	adds	r7, #12
 801059c:	46bd      	mov	sp, r7
 801059e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105a2:	4770      	bx	lr

080105a4 <_ZSt11__sort_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_RT0_>:
    }

  template<typename _RandomAccessIterator, typename _Compare>
    _GLIBCXX20_CONSTEXPR
    void
    __sort_heap(_RandomAccessIterator __first, _RandomAccessIterator __last,
 80105a4:	b580      	push	{r7, lr}
 80105a6:	b084      	sub	sp, #16
 80105a8:	af00      	add	r7, sp, #0
 80105aa:	60f8      	str	r0, [r7, #12]
 80105ac:	60b9      	str	r1, [r7, #8]
 80105ae:	607a      	str	r2, [r7, #4]
		_Compare& __comp)
    {
      while (__last - __first > 1)
 80105b0:	e00a      	b.n	80105c8 <_ZSt11__sort_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_RT0_+0x24>
	{
	  --__last;
 80105b2:	f107 0308 	add.w	r3, r7, #8
 80105b6:	4618      	mov	r0, r3
 80105b8:	f7ff ffe4 	bl	8010584 <_ZN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEmmEv>
	  std::__pop_heap(__first, __last, __last, __comp);
 80105bc:	687b      	ldr	r3, [r7, #4]
 80105be:	68ba      	ldr	r2, [r7, #8]
 80105c0:	68b9      	ldr	r1, [r7, #8]
 80105c2:	68f8      	ldr	r0, [r7, #12]
 80105c4:	f000 fdb8 	bl	8011138 <_ZSt10__pop_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_S9_RT0_>
      while (__last - __first > 1)
 80105c8:	f107 020c 	add.w	r2, r7, #12
 80105cc:	f107 0308 	add.w	r3, r7, #8
 80105d0:	4611      	mov	r1, r2
 80105d2:	4618      	mov	r0, r3
 80105d4:	f7f3 fa0a 	bl	80039ec <_ZN9__gnu_cxxmiIPfSt6vectorIfSaIfEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS8_SB_>
 80105d8:	4603      	mov	r3, r0
 80105da:	2b01      	cmp	r3, #1
 80105dc:	bfcc      	ite	gt
 80105de:	2301      	movgt	r3, #1
 80105e0:	2300      	movle	r3, #0
 80105e2:	b2db      	uxtb	r3, r3
 80105e4:	2b00      	cmp	r3, #0
 80105e6:	d1e4      	bne.n	80105b2 <_ZSt11__sort_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_RT0_+0xe>
	}
    }
 80105e8:	bf00      	nop
 80105ea:	bf00      	nop
 80105ec:	3710      	adds	r7, #16
 80105ee:	46bd      	mov	sp, r7
 80105f0:	bd80      	pop	{r7, pc}

080105f2 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEmiEi>:
      operator-(difference_type __n) const _GLIBCXX_NOEXCEPT
 80105f2:	b580      	push	{r7, lr}
 80105f4:	b084      	sub	sp, #16
 80105f6:	af00      	add	r7, sp, #0
 80105f8:	6078      	str	r0, [r7, #4]
 80105fa:	6039      	str	r1, [r7, #0]
      { return __normal_iterator(_M_current - __n); }
 80105fc:	687b      	ldr	r3, [r7, #4]
 80105fe:	681a      	ldr	r2, [r3, #0]
 8010600:	683b      	ldr	r3, [r7, #0]
 8010602:	009b      	lsls	r3, r3, #2
 8010604:	425b      	negs	r3, r3
 8010606:	4413      	add	r3, r2
 8010608:	60fb      	str	r3, [r7, #12]
 801060a:	f107 020c 	add.w	r2, r7, #12
 801060e:	f107 0308 	add.w	r3, r7, #8
 8010612:	4611      	mov	r1, r2
 8010614:	4618      	mov	r0, r3
 8010616:	f7f3 f982 	bl	800391e <_ZN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEC1ERKS1_>
 801061a:	68bb      	ldr	r3, [r7, #8]
 801061c:	4618      	mov	r0, r3
 801061e:	3710      	adds	r7, #16
 8010620:	46bd      	mov	sp, r7
 8010622:	bd80      	pop	{r7, pc}

08010624 <_ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_S9_S9_T0_>:
    __move_median_to_first(_Iterator __result,_Iterator __a, _Iterator __b,
 8010624:	b580      	push	{r7, lr}
 8010626:	b084      	sub	sp, #16
 8010628:	af00      	add	r7, sp, #0
 801062a:	60f8      	str	r0, [r7, #12]
 801062c:	60b9      	str	r1, [r7, #8]
 801062e:	607a      	str	r2, [r7, #4]
 8010630:	603b      	str	r3, [r7, #0]
      if (__comp(__a, __b))
 8010632:	687a      	ldr	r2, [r7, #4]
 8010634:	68b9      	ldr	r1, [r7, #8]
 8010636:	f107 0018 	add.w	r0, r7, #24
 801063a:	f7fe fea2 	bl	800f382 <_ZNK9__gnu_cxx5__ops15_Iter_less_iterclINS_17__normal_iteratorIPfSt6vectorIfSaIfEEEES8_EEbT_T0_>
 801063e:	4603      	mov	r3, r0
 8010640:	2b00      	cmp	r3, #0
 8010642:	d020      	beq.n	8010686 <_ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_S9_S9_T0_+0x62>
	  if (__comp(__b, __c))
 8010644:	683a      	ldr	r2, [r7, #0]
 8010646:	6879      	ldr	r1, [r7, #4]
 8010648:	f107 0018 	add.w	r0, r7, #24
 801064c:	f7fe fe99 	bl	800f382 <_ZNK9__gnu_cxx5__ops15_Iter_less_iterclINS_17__normal_iteratorIPfSt6vectorIfSaIfEEEES8_EEbT_T0_>
 8010650:	4603      	mov	r3, r0
 8010652:	2b00      	cmp	r3, #0
 8010654:	d004      	beq.n	8010660 <_ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_S9_S9_T0_+0x3c>
	    std::iter_swap(__result, __b);
 8010656:	6879      	ldr	r1, [r7, #4]
 8010658:	68f8      	ldr	r0, [r7, #12]
 801065a:	f000 fdad 	bl	80111b8 <_ZSt9iter_swapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEES6_EvT_T0_>
    }
 801065e:	e032      	b.n	80106c6 <_ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_S9_S9_T0_+0xa2>
	  else if (__comp(__a, __c))
 8010660:	683a      	ldr	r2, [r7, #0]
 8010662:	68b9      	ldr	r1, [r7, #8]
 8010664:	f107 0018 	add.w	r0, r7, #24
 8010668:	f7fe fe8b 	bl	800f382 <_ZNK9__gnu_cxx5__ops15_Iter_less_iterclINS_17__normal_iteratorIPfSt6vectorIfSaIfEEEES8_EEbT_T0_>
 801066c:	4603      	mov	r3, r0
 801066e:	2b00      	cmp	r3, #0
 8010670:	d004      	beq.n	801067c <_ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_S9_S9_T0_+0x58>
	    std::iter_swap(__result, __c);
 8010672:	6839      	ldr	r1, [r7, #0]
 8010674:	68f8      	ldr	r0, [r7, #12]
 8010676:	f000 fd9f 	bl	80111b8 <_ZSt9iter_swapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEES6_EvT_T0_>
    }
 801067a:	e024      	b.n	80106c6 <_ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_S9_S9_T0_+0xa2>
	    std::iter_swap(__result, __a);
 801067c:	68b9      	ldr	r1, [r7, #8]
 801067e:	68f8      	ldr	r0, [r7, #12]
 8010680:	f000 fd9a 	bl	80111b8 <_ZSt9iter_swapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEES6_EvT_T0_>
    }
 8010684:	e01f      	b.n	80106c6 <_ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_S9_S9_T0_+0xa2>
      else if (__comp(__a, __c))
 8010686:	683a      	ldr	r2, [r7, #0]
 8010688:	68b9      	ldr	r1, [r7, #8]
 801068a:	f107 0018 	add.w	r0, r7, #24
 801068e:	f7fe fe78 	bl	800f382 <_ZNK9__gnu_cxx5__ops15_Iter_less_iterclINS_17__normal_iteratorIPfSt6vectorIfSaIfEEEES8_EEbT_T0_>
 8010692:	4603      	mov	r3, r0
 8010694:	2b00      	cmp	r3, #0
 8010696:	d004      	beq.n	80106a2 <_ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_S9_S9_T0_+0x7e>
	std::iter_swap(__result, __a);
 8010698:	68b9      	ldr	r1, [r7, #8]
 801069a:	68f8      	ldr	r0, [r7, #12]
 801069c:	f000 fd8c 	bl	80111b8 <_ZSt9iter_swapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEES6_EvT_T0_>
    }
 80106a0:	e011      	b.n	80106c6 <_ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_S9_S9_T0_+0xa2>
      else if (__comp(__b, __c))
 80106a2:	683a      	ldr	r2, [r7, #0]
 80106a4:	6879      	ldr	r1, [r7, #4]
 80106a6:	f107 0018 	add.w	r0, r7, #24
 80106aa:	f7fe fe6a 	bl	800f382 <_ZNK9__gnu_cxx5__ops15_Iter_less_iterclINS_17__normal_iteratorIPfSt6vectorIfSaIfEEEES8_EEbT_T0_>
 80106ae:	4603      	mov	r3, r0
 80106b0:	2b00      	cmp	r3, #0
 80106b2:	d004      	beq.n	80106be <_ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_S9_S9_T0_+0x9a>
	std::iter_swap(__result, __c);
 80106b4:	6839      	ldr	r1, [r7, #0]
 80106b6:	68f8      	ldr	r0, [r7, #12]
 80106b8:	f000 fd7e 	bl	80111b8 <_ZSt9iter_swapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEES6_EvT_T0_>
    }
 80106bc:	e003      	b.n	80106c6 <_ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_S9_S9_T0_+0xa2>
	std::iter_swap(__result, __b);
 80106be:	6879      	ldr	r1, [r7, #4]
 80106c0:	68f8      	ldr	r0, [r7, #12]
 80106c2:	f000 fd79 	bl	80111b8 <_ZSt9iter_swapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEES6_EvT_T0_>
    }
 80106c6:	bf00      	nop
 80106c8:	3710      	adds	r7, #16
 80106ca:	46bd      	mov	sp, r7
 80106cc:	bd80      	pop	{r7, pc}

080106ce <_ZSt21__unguarded_partitionIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEET_S9_S9_S9_T0_>:
    __unguarded_partition(_RandomAccessIterator __first,
 80106ce:	b590      	push	{r4, r7, lr}
 80106d0:	b087      	sub	sp, #28
 80106d2:	af00      	add	r7, sp, #0
 80106d4:	60f8      	str	r0, [r7, #12]
 80106d6:	60b9      	str	r1, [r7, #8]
 80106d8:	607a      	str	r2, [r7, #4]
 80106da:	703b      	strb	r3, [r7, #0]
	  while (__comp(__first, __pivot))
 80106dc:	e004      	b.n	80106e8 <_ZSt21__unguarded_partitionIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEET_S9_S9_S9_T0_+0x1a>
	    ++__first;
 80106de:	f107 030c 	add.w	r3, r7, #12
 80106e2:	4618      	mov	r0, r3
 80106e4:	f7fe fe31 	bl	800f34a <_ZN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEppEv>
	  while (__comp(__first, __pivot))
 80106e8:	463b      	mov	r3, r7
 80106ea:	687a      	ldr	r2, [r7, #4]
 80106ec:	68f9      	ldr	r1, [r7, #12]
 80106ee:	4618      	mov	r0, r3
 80106f0:	f7fe fe47 	bl	800f382 <_ZNK9__gnu_cxx5__ops15_Iter_less_iterclINS_17__normal_iteratorIPfSt6vectorIfSaIfEEEES8_EEbT_T0_>
 80106f4:	4603      	mov	r3, r0
 80106f6:	2b00      	cmp	r3, #0
 80106f8:	d1f1      	bne.n	80106de <_ZSt21__unguarded_partitionIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEET_S9_S9_S9_T0_+0x10>
	  --__last;
 80106fa:	f107 0308 	add.w	r3, r7, #8
 80106fe:	4618      	mov	r0, r3
 8010700:	f7ff ff40 	bl	8010584 <_ZN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEmmEv>
	  while (__comp(__pivot, __last))
 8010704:	e004      	b.n	8010710 <_ZSt21__unguarded_partitionIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEET_S9_S9_S9_T0_+0x42>
	    --__last;
 8010706:	f107 0308 	add.w	r3, r7, #8
 801070a:	4618      	mov	r0, r3
 801070c:	f7ff ff3a 	bl	8010584 <_ZN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEmmEv>
	  while (__comp(__pivot, __last))
 8010710:	463b      	mov	r3, r7
 8010712:	68ba      	ldr	r2, [r7, #8]
 8010714:	6879      	ldr	r1, [r7, #4]
 8010716:	4618      	mov	r0, r3
 8010718:	f7fe fe33 	bl	800f382 <_ZNK9__gnu_cxx5__ops15_Iter_less_iterclINS_17__normal_iteratorIPfSt6vectorIfSaIfEEEES8_EEbT_T0_>
 801071c:	4603      	mov	r3, r0
 801071e:	2b00      	cmp	r3, #0
 8010720:	d1f1      	bne.n	8010706 <_ZSt21__unguarded_partitionIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEET_S9_S9_S9_T0_+0x38>
	  if (!(__first < __last))
 8010722:	f107 0208 	add.w	r2, r7, #8
 8010726:	f107 030c 	add.w	r3, r7, #12
 801072a:	4611      	mov	r1, r2
 801072c:	4618      	mov	r0, r3
 801072e:	f7ff fed1 	bl	80104d4 <_ZN9__gnu_cxxssIPfSt6vectorIfSaIfEEEEDTclL_ZNSt8__detail11__synth3wayEEcl7declvalIRT_EEcl7declvalIS7_EEEERKNS_17__normal_iteratorIS6_T0_EESD_>
 8010732:	4604      	mov	r4, r0
 8010734:	f107 0314 	add.w	r3, r7, #20
 8010738:	2100      	movs	r1, #0
 801073a:	4618      	mov	r0, r3
 801073c:	f7f3 ffa4 	bl	8004688 <_ZNSt9__cmp_cat8__unspecC1EPS0_>
 8010740:	7d39      	ldrb	r1, [r7, #20]
 8010742:	4620      	mov	r0, r4
 8010744:	f7f3 ffac 	bl	80046a0 <_ZStltSt15strong_orderingNSt9__cmp_cat8__unspecE>
 8010748:	4603      	mov	r3, r0
 801074a:	f083 0301 	eor.w	r3, r3, #1
 801074e:	b2db      	uxtb	r3, r3
 8010750:	2b00      	cmp	r3, #0
 8010752:	d001      	beq.n	8010758 <_ZSt21__unguarded_partitionIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEET_S9_S9_S9_T0_+0x8a>
	    return __first;
 8010754:	68fb      	ldr	r3, [r7, #12]
 8010756:	e009      	b.n	801076c <_ZSt21__unguarded_partitionIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEET_S9_S9_S9_T0_+0x9e>
	  std::iter_swap(__first, __last);
 8010758:	68b9      	ldr	r1, [r7, #8]
 801075a:	68f8      	ldr	r0, [r7, #12]
 801075c:	f000 fd2c 	bl	80111b8 <_ZSt9iter_swapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEES6_EvT_T0_>
	  ++__first;
 8010760:	f107 030c 	add.w	r3, r7, #12
 8010764:	4618      	mov	r0, r3
 8010766:	f7fe fdf0 	bl	800f34a <_ZN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEppEv>
	  while (__comp(__first, __pivot))
 801076a:	e7bd      	b.n	80106e8 <_ZSt21__unguarded_partitionIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEET_S9_S9_S9_T0_+0x1a>
    }
 801076c:	4618      	mov	r0, r3
 801076e:	371c      	adds	r7, #28
 8010770:	46bd      	mov	sp, r7
 8010772:	bd90      	pop	{r4, r7, pc}

08010774 <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEET_S7_>:
    __miter_base(_Iterator __it)
 8010774:	b480      	push	{r7}
 8010776:	b083      	sub	sp, #12
 8010778:	af00      	add	r7, sp, #0
 801077a:	6078      	str	r0, [r7, #4]
    { return __it; }
 801077c:	687b      	ldr	r3, [r7, #4]
 801077e:	4618      	mov	r0, r3
 8010780:	370c      	adds	r7, #12
 8010782:	46bd      	mov	sp, r7
 8010784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010788:	4770      	bx	lr

0801078a <_ZSt22__copy_move_backward_aILb1EN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEES6_ET1_T0_S8_S7_>:
    __copy_move_backward_a(_II __first, _II __last, _OI __result)
 801078a:	b5b0      	push	{r4, r5, r7, lr}
 801078c:	b084      	sub	sp, #16
 801078e:	af00      	add	r7, sp, #0
 8010790:	60f8      	str	r0, [r7, #12]
 8010792:	60b9      	str	r1, [r7, #8]
 8010794:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 8010796:	68f8      	ldr	r0, [r7, #12]
 8010798:	f7ff f86b 	bl	800f872 <_ZSt12__niter_baseIPfSt6vectorIfSaIfEEET_N9__gnu_cxx17__normal_iteratorIS4_T0_EE>
 801079c:	4604      	mov	r4, r0
 801079e:	68b8      	ldr	r0, [r7, #8]
 80107a0:	f7ff f867 	bl	800f872 <_ZSt12__niter_baseIPfSt6vectorIfSaIfEEET_N9__gnu_cxx17__normal_iteratorIS4_T0_EE>
 80107a4:	4605      	mov	r5, r0
 80107a6:	6878      	ldr	r0, [r7, #4]
 80107a8:	f7ff f863 	bl	800f872 <_ZSt12__niter_baseIPfSt6vectorIfSaIfEEET_N9__gnu_cxx17__normal_iteratorIS4_T0_EE>
 80107ac:	4603      	mov	r3, r0
 80107ae:	461a      	mov	r2, r3
 80107b0:	4629      	mov	r1, r5
 80107b2:	4620      	mov	r0, r4
 80107b4:	f000 fd17 	bl	80111e6 <_ZSt23__copy_move_backward_a1ILb1EPfS0_ET1_T0_S2_S1_>
 80107b8:	4603      	mov	r3, r0
 80107ba:	4619      	mov	r1, r3
 80107bc:	6878      	ldr	r0, [r7, #4]
 80107be:	f7ff f876 	bl	800f8ae <_ZSt12__niter_wrapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEES2_ET_S7_T0_>
 80107c2:	4603      	mov	r3, r0
    }
 80107c4:	4618      	mov	r0, r3
 80107c6:	3710      	adds	r7, #16
 80107c8:	46bd      	mov	sp, r7
 80107ca:	bdb0      	pop	{r4, r5, r7, pc}

080107cc <_ZNK9__gnu_cxx5__ops14_Val_less_iterclIfNS_17__normal_iteratorIPfSt6vectorIfSaIfEEEEEEbRT_T0_>:
      operator()(_Value& __val, _Iterator __it) const
 80107cc:	b580      	push	{r7, lr}
 80107ce:	ed2d 8b02 	vpush	{d8}
 80107d2:	b084      	sub	sp, #16
 80107d4:	af00      	add	r7, sp, #0
 80107d6:	60f8      	str	r0, [r7, #12]
 80107d8:	60b9      	str	r1, [r7, #8]
 80107da:	607a      	str	r2, [r7, #4]
      { return __val < *__it; }
 80107dc:	68bb      	ldr	r3, [r7, #8]
 80107de:	ed93 8a00 	vldr	s16, [r3]
 80107e2:	1d3b      	adds	r3, r7, #4
 80107e4:	4618      	mov	r0, r3
 80107e6:	f7fe fdc0 	bl	800f36a <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEdeEv>
 80107ea:	4603      	mov	r3, r0
 80107ec:	edd3 7a00 	vldr	s15, [r3]
 80107f0:	eeb4 8ae7 	vcmpe.f32	s16, s15
 80107f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80107f8:	bf4c      	ite	mi
 80107fa:	2301      	movmi	r3, #1
 80107fc:	2300      	movpl	r3, #0
 80107fe:	b2db      	uxtb	r3, r3
 8010800:	4618      	mov	r0, r3
 8010802:	3710      	adds	r7, #16
 8010804:	46bd      	mov	sp, r7
 8010806:	ecbd 8b02 	vpop	{d8}
 801080a:	bd80      	pop	{r7, pc}

0801080c <_ZSt25__unguarded_linear_insertIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops14_Val_less_iterEEvT_T0_>:
    __unguarded_linear_insert(_RandomAccessIterator __last,
 801080c:	b590      	push	{r4, r7, lr}
 801080e:	b085      	sub	sp, #20
 8010810:	af00      	add	r7, sp, #0
 8010812:	6078      	str	r0, [r7, #4]
 8010814:	7039      	strb	r1, [r7, #0]
	__val = _GLIBCXX_MOVE(*__last);
 8010816:	1d3b      	adds	r3, r7, #4
 8010818:	4618      	mov	r0, r3
 801081a:	f7fe fda6 	bl	800f36a <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEdeEv>
 801081e:	4603      	mov	r3, r0
 8010820:	4618      	mov	r0, r3
 8010822:	f7fc fa8f 	bl	800cd44 <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>
 8010826:	4603      	mov	r3, r0
 8010828:	681b      	ldr	r3, [r3, #0]
 801082a:	60fb      	str	r3, [r7, #12]
      _RandomAccessIterator __next = __last;
 801082c:	687b      	ldr	r3, [r7, #4]
 801082e:	60bb      	str	r3, [r7, #8]
      --__next;
 8010830:	f107 0308 	add.w	r3, r7, #8
 8010834:	4618      	mov	r0, r3
 8010836:	f7ff fea5 	bl	8010584 <_ZN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEmmEv>
      while (__comp(__val, __next))
 801083a:	e017      	b.n	801086c <_ZSt25__unguarded_linear_insertIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops14_Val_less_iterEEvT_T0_+0x60>
	  *__last = _GLIBCXX_MOVE(*__next);
 801083c:	f107 0308 	add.w	r3, r7, #8
 8010840:	4618      	mov	r0, r3
 8010842:	f7fe fd92 	bl	800f36a <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEdeEv>
 8010846:	4603      	mov	r3, r0
 8010848:	4618      	mov	r0, r3
 801084a:	f7fc fa7b 	bl	800cd44 <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>
 801084e:	4603      	mov	r3, r0
 8010850:	681c      	ldr	r4, [r3, #0]
 8010852:	1d3b      	adds	r3, r7, #4
 8010854:	4618      	mov	r0, r3
 8010856:	f7fe fd88 	bl	800f36a <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEdeEv>
 801085a:	4603      	mov	r3, r0
 801085c:	601c      	str	r4, [r3, #0]
	  __last = __next;
 801085e:	68bb      	ldr	r3, [r7, #8]
 8010860:	607b      	str	r3, [r7, #4]
	  --__next;
 8010862:	f107 0308 	add.w	r3, r7, #8
 8010866:	4618      	mov	r0, r3
 8010868:	f7ff fe8c 	bl	8010584 <_ZN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEmmEv>
      while (__comp(__val, __next))
 801086c:	f107 010c 	add.w	r1, r7, #12
 8010870:	463b      	mov	r3, r7
 8010872:	68ba      	ldr	r2, [r7, #8]
 8010874:	4618      	mov	r0, r3
 8010876:	f7ff ffa9 	bl	80107cc <_ZNK9__gnu_cxx5__ops14_Val_less_iterclIfNS_17__normal_iteratorIPfSt6vectorIfSaIfEEEEEEbRT_T0_>
 801087a:	4603      	mov	r3, r0
 801087c:	2b00      	cmp	r3, #0
 801087e:	d1dd      	bne.n	801083c <_ZSt25__unguarded_linear_insertIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops14_Val_less_iterEEvT_T0_+0x30>
      *__last = _GLIBCXX_MOVE(__val);
 8010880:	f107 030c 	add.w	r3, r7, #12
 8010884:	4618      	mov	r0, r3
 8010886:	f7fc fa5d 	bl	800cd44 <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>
 801088a:	4603      	mov	r3, r0
 801088c:	681c      	ldr	r4, [r3, #0]
 801088e:	1d3b      	adds	r3, r7, #4
 8010890:	4618      	mov	r0, r3
 8010892:	f7fe fd6a 	bl	800f36a <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEdeEv>
 8010896:	4603      	mov	r3, r0
 8010898:	601c      	str	r4, [r3, #0]
    }
 801089a:	bf00      	nop
 801089c:	3714      	adds	r7, #20
 801089e:	46bd      	mov	sp, r7
 80108a0:	bd90      	pop	{r4, r7, pc}

080108a2 <_ZN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEfEUlbE_EC1ES4_>:
      _Iter_negate(_Predicate __pred)
 80108a2:	b580      	push	{r7, lr}
 80108a4:	b082      	sub	sp, #8
 80108a6:	af00      	add	r7, sp, #0
 80108a8:	6078      	str	r0, [r7, #4]
 80108aa:	7039      	strb	r1, [r7, #0]
	: _M_pred(_GLIBCXX_MOVE(__pred))
 80108ac:	463b      	mov	r3, r7
 80108ae:	4618      	mov	r0, r3
 80108b0:	f7fe fe35 	bl	800f51e <_ZSt4moveIRZN3jlb10Controller15lateral_controlEfEUlbE_EONSt16remove_referenceIT_E4typeEOS5_>
      { }
 80108b4:	687b      	ldr	r3, [r7, #4]
 80108b6:	4618      	mov	r0, r3
 80108b8:	3708      	adds	r7, #8
 80108ba:	46bd      	mov	sp, r7
 80108bc:	bd80      	pop	{r7, pc}

080108be <_ZN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEfEUlbE0_EC1ES4_>:
      _Iter_negate(_Predicate __pred)
 80108be:	b580      	push	{r7, lr}
 80108c0:	b082      	sub	sp, #8
 80108c2:	af00      	add	r7, sp, #0
 80108c4:	6078      	str	r0, [r7, #4]
 80108c6:	7039      	strb	r1, [r7, #0]
	: _M_pred(_GLIBCXX_MOVE(__pred))
 80108c8:	463b      	mov	r3, r7
 80108ca:	4618      	mov	r0, r3
 80108cc:	f7fe fee6 	bl	800f69c <_ZSt4moveIRZN3jlb10Controller15lateral_controlEfEUlbE0_EONSt16remove_referenceIT_E4typeEOS5_>
      { }
 80108d0:	687b      	ldr	r3, [r7, #4]
 80108d2:	4618      	mov	r0, r3
 80108d4:	3708      	adds	r7, #8
 80108d6:	46bd      	mov	sp, r7
 80108d8:	bd80      	pop	{r7, pc}

080108da <_ZN9__gnu_cxx13new_allocatorIfEC1ERKS1_>:
      new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
 80108da:	b480      	push	{r7}
 80108dc:	b083      	sub	sp, #12
 80108de:	af00      	add	r7, sp, #0
 80108e0:	6078      	str	r0, [r7, #4]
 80108e2:	6039      	str	r1, [r7, #0]
 80108e4:	687b      	ldr	r3, [r7, #4]
 80108e6:	4618      	mov	r0, r3
 80108e8:	370c      	adds	r7, #12
 80108ea:	46bd      	mov	sp, r7
 80108ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108f0:	4770      	bx	lr

080108f2 <_ZSt4copyIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEEPfET0_T_SA_S9_>:
    copy(_II __first, _II __last, _OI __result)
 80108f2:	b590      	push	{r4, r7, lr}
 80108f4:	b085      	sub	sp, #20
 80108f6:	af00      	add	r7, sp, #0
 80108f8:	60f8      	str	r0, [r7, #12]
 80108fa:	60b9      	str	r1, [r7, #8]
 80108fc:	607a      	str	r2, [r7, #4]
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 80108fe:	68f8      	ldr	r0, [r7, #12]
 8010900:	f7fd fbd4 	bl	800e0ac <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEEET_S8_>
 8010904:	4604      	mov	r4, r0
 8010906:	68b8      	ldr	r0, [r7, #8]
 8010908:	f7fd fbd0 	bl	800e0ac <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEEET_S8_>
 801090c:	4603      	mov	r3, r0
 801090e:	687a      	ldr	r2, [r7, #4]
 8010910:	4619      	mov	r1, r3
 8010912:	4620      	mov	r0, r4
 8010914:	f000 fc77 	bl	8011206 <_ZSt13__copy_move_aILb0EN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEEPfET1_T0_SA_S9_>
 8010918:	4603      	mov	r3, r0
    }
 801091a:	4618      	mov	r0, r3
 801091c:	3714      	adds	r7, #20
 801091e:	46bd      	mov	sp, r7
 8010920:	bd90      	pop	{r4, r7, pc}

08010922 <_ZNK9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 8010922:	b480      	push	{r7}
 8010924:	b083      	sub	sp, #12
 8010926:	af00      	add	r7, sp, #0
 8010928:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 801092a:	687b      	ldr	r3, [r7, #4]
 801092c:	4618      	mov	r0, r3
 801092e:	370c      	adds	r7, #12
 8010930:	46bd      	mov	sp, r7
 8010932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010936:	4770      	bx	lr

08010938 <_ZSt14__copy_move_a2ILb0EPKfPfET1_T0_S4_S3_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 8010938:	b580      	push	{r7, lr}
 801093a:	b084      	sub	sp, #16
 801093c:	af00      	add	r7, sp, #0
 801093e:	60f8      	str	r0, [r7, #12]
 8010940:	60b9      	str	r1, [r7, #8]
 8010942:	607a      	str	r2, [r7, #4]
      if (std::is_constant_evaluated())
 8010944:	f7f2 f8e2 	bl	8002b0c <_ZSt21is_constant_evaluatedv>
 8010948:	4603      	mov	r3, r0
 801094a:	2b00      	cmp	r3, #0
 801094c:	d006      	beq.n	801095c <_ZSt14__copy_move_a2ILb0EPKfPfET1_T0_S4_S3_+0x24>
	  __copy_m(__first, __last, __result);
 801094e:	687a      	ldr	r2, [r7, #4]
 8010950:	68b9      	ldr	r1, [r7, #8]
 8010952:	68f8      	ldr	r0, [r7, #12]
 8010954:	f000 fc7a 	bl	801124c <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPKfPfEET0_T_S7_S6_>
 8010958:	4603      	mov	r3, r0
 801095a:	e006      	b.n	801096a <_ZSt14__copy_move_a2ILb0EPKfPfET1_T0_S4_S3_+0x32>
			      _Category>::__copy_m(__first, __last, __result);
 801095c:	687a      	ldr	r2, [r7, #4]
 801095e:	68b9      	ldr	r1, [r7, #8]
 8010960:	68f8      	ldr	r0, [r7, #12]
 8010962:	f000 f829 	bl	80109b8 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIfEEPT_PKS3_S6_S4_>
 8010966:	4603      	mov	r3, r0
 8010968:	bf00      	nop
    }
 801096a:	4618      	mov	r0, r3
 801096c:	3710      	adds	r7, #16
 801096e:	46bd      	mov	sp, r7
 8010970:	bd80      	pop	{r7, pc}

08010972 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPfS3_EET0_T_S5_S4_>:
	__copy_m(_II __first, _II __last, _OI __result)
 8010972:	b480      	push	{r7}
 8010974:	b087      	sub	sp, #28
 8010976:	af00      	add	r7, sp, #0
 8010978:	60f8      	str	r0, [r7, #12]
 801097a:	60b9      	str	r1, [r7, #8]
 801097c:	607a      	str	r2, [r7, #4]
	  for(_Distance __n = __last - __first; __n > 0; --__n)
 801097e:	68ba      	ldr	r2, [r7, #8]
 8010980:	68fb      	ldr	r3, [r7, #12]
 8010982:	1ad3      	subs	r3, r2, r3
 8010984:	109b      	asrs	r3, r3, #2
 8010986:	617b      	str	r3, [r7, #20]
 8010988:	e00c      	b.n	80109a4 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPfS3_EET0_T_S5_S4_+0x32>
	      *__result = *__first;
 801098a:	68fb      	ldr	r3, [r7, #12]
 801098c:	681a      	ldr	r2, [r3, #0]
 801098e:	687b      	ldr	r3, [r7, #4]
 8010990:	601a      	str	r2, [r3, #0]
	      ++__first;
 8010992:	68fb      	ldr	r3, [r7, #12]
 8010994:	3304      	adds	r3, #4
 8010996:	60fb      	str	r3, [r7, #12]
	      ++__result;
 8010998:	687b      	ldr	r3, [r7, #4]
 801099a:	3304      	adds	r3, #4
 801099c:	607b      	str	r3, [r7, #4]
	  for(_Distance __n = __last - __first; __n > 0; --__n)
 801099e:	697b      	ldr	r3, [r7, #20]
 80109a0:	3b01      	subs	r3, #1
 80109a2:	617b      	str	r3, [r7, #20]
 80109a4:	697b      	ldr	r3, [r7, #20]
 80109a6:	2b00      	cmp	r3, #0
 80109a8:	dcef      	bgt.n	801098a <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPfS3_EET0_T_S5_S4_+0x18>
	  return __result;
 80109aa:	687b      	ldr	r3, [r7, #4]
	}
 80109ac:	4618      	mov	r0, r3
 80109ae:	371c      	adds	r7, #28
 80109b0:	46bd      	mov	sp, r7
 80109b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109b6:	4770      	bx	lr

080109b8 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIfEEPT_PKS3_S6_S4_>:
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 80109b8:	b580      	push	{r7, lr}
 80109ba:	b086      	sub	sp, #24
 80109bc:	af00      	add	r7, sp, #0
 80109be:	60f8      	str	r0, [r7, #12]
 80109c0:	60b9      	str	r1, [r7, #8]
 80109c2:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 80109c4:	68ba      	ldr	r2, [r7, #8]
 80109c6:	68fb      	ldr	r3, [r7, #12]
 80109c8:	1ad3      	subs	r3, r2, r3
 80109ca:	109b      	asrs	r3, r3, #2
 80109cc:	617b      	str	r3, [r7, #20]
	  if (_Num)
 80109ce:	697b      	ldr	r3, [r7, #20]
 80109d0:	2b00      	cmp	r3, #0
 80109d2:	d006      	beq.n	80109e2 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIfEEPT_PKS3_S6_S4_+0x2a>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 80109d4:	697b      	ldr	r3, [r7, #20]
 80109d6:	009b      	lsls	r3, r3, #2
 80109d8:	461a      	mov	r2, r3
 80109da:	68f9      	ldr	r1, [r7, #12]
 80109dc:	6878      	ldr	r0, [r7, #4]
 80109de:	f013 fece 	bl	802477e <memmove>
	  return __result + _Num;
 80109e2:	697b      	ldr	r3, [r7, #20]
 80109e4:	009b      	lsls	r3, r3, #2
 80109e6:	687a      	ldr	r2, [r7, #4]
 80109e8:	4413      	add	r3, r2
	}
 80109ea:	4618      	mov	r0, r3
 80109ec:	3718      	adds	r7, #24
 80109ee:	46bd      	mov	sp, r7
 80109f0:	bd80      	pop	{r7, pc}

080109f2 <_ZN9__gnu_cxx13new_allocatorIN3jlb4EdgeEE10deallocateEPS2_j>:
      deallocate(_Tp* __p, size_type __t __attribute__ ((__unused__)))
 80109f2:	b580      	push	{r7, lr}
 80109f4:	b084      	sub	sp, #16
 80109f6:	af00      	add	r7, sp, #0
 80109f8:	60f8      	str	r0, [r7, #12]
 80109fa:	60b9      	str	r1, [r7, #8]
 80109fc:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 80109fe:	687a      	ldr	r2, [r7, #4]
 8010a00:	4613      	mov	r3, r2
 8010a02:	005b      	lsls	r3, r3, #1
 8010a04:	4413      	add	r3, r2
 8010a06:	00db      	lsls	r3, r3, #3
 8010a08:	4619      	mov	r1, r3
 8010a0a:	68b8      	ldr	r0, [r7, #8]
 8010a0c:	f010 fbb8 	bl	8021180 <_ZdlPvj>
      }
 8010a10:	3710      	adds	r7, #16
 8010a12:	46bd      	mov	sp, r7
 8010a14:	bd80      	pop	{r7, pc}

08010a16 <_ZSt11__addressofIN3jlb4EdgeEEPT_RS2_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 8010a16:	b480      	push	{r7}
 8010a18:	b083      	sub	sp, #12
 8010a1a:	af00      	add	r7, sp, #0
 8010a1c:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 8010a1e:	687b      	ldr	r3, [r7, #4]
 8010a20:	4618      	mov	r0, r3
 8010a22:	370c      	adds	r7, #12
 8010a24:	46bd      	mov	sp, r7
 8010a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a2a:	4770      	bx	lr

08010a2c <_ZSt8_DestroyIN3jlb4EdgeEEvPT_>:
    _Destroy(_Tp* __pointer)
 8010a2c:	b580      	push	{r7, lr}
 8010a2e:	b082      	sub	sp, #8
 8010a30:	af00      	add	r7, sp, #0
 8010a32:	6078      	str	r0, [r7, #4]
      std::destroy_at(__pointer);
 8010a34:	6878      	ldr	r0, [r7, #4]
 8010a36:	f000 f89b 	bl	8010b70 <_ZSt10destroy_atIN3jlb4EdgeEEvPT_>
    }
 8010a3a:	bf00      	nop
 8010a3c:	3708      	adds	r7, #8
 8010a3e:	46bd      	mov	sp, r7
 8010a40:	bd80      	pop	{r7, pc}

08010a42 <_ZSt4copyIN9__gnu_cxx17__normal_iteratorIPKcSt6vectorIcSaIcEEEEPcET0_T_SA_S9_>:
    copy(_II __first, _II __last, _OI __result)
 8010a42:	b590      	push	{r4, r7, lr}
 8010a44:	b085      	sub	sp, #20
 8010a46:	af00      	add	r7, sp, #0
 8010a48:	60f8      	str	r0, [r7, #12]
 8010a4a:	60b9      	str	r1, [r7, #8]
 8010a4c:	607a      	str	r2, [r7, #4]
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 8010a4e:	68f8      	ldr	r0, [r7, #12]
 8010a50:	f000 fc1f 	bl	8011292 <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPKcSt6vectorIcSaIcEEEEET_S8_>
 8010a54:	4604      	mov	r4, r0
 8010a56:	68b8      	ldr	r0, [r7, #8]
 8010a58:	f000 fc1b 	bl	8011292 <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPKcSt6vectorIcSaIcEEEEET_S8_>
 8010a5c:	4603      	mov	r3, r0
 8010a5e:	687a      	ldr	r2, [r7, #4]
 8010a60:	4619      	mov	r1, r3
 8010a62:	4620      	mov	r0, r4
 8010a64:	f000 fc20 	bl	80112a8 <_ZSt13__copy_move_aILb0EN9__gnu_cxx17__normal_iteratorIPKcSt6vectorIcSaIcEEEEPcET1_T0_SA_S9_>
 8010a68:	4603      	mov	r3, r0
    }
 8010a6a:	4618      	mov	r0, r3
 8010a6c:	3714      	adds	r7, #20
 8010a6e:	46bd      	mov	sp, r7
 8010a70:	bd90      	pop	{r4, r7, pc}

08010a72 <_ZSt8_DestroyIcEvPT_>:
    _Destroy(_Tp* __pointer)
 8010a72:	b580      	push	{r7, lr}
 8010a74:	b082      	sub	sp, #8
 8010a76:	af00      	add	r7, sp, #0
 8010a78:	6078      	str	r0, [r7, #4]
      std::destroy_at(__pointer);
 8010a7a:	6878      	ldr	r0, [r7, #4]
 8010a7c:	f000 fa27 	bl	8010ece <_ZSt10destroy_atIcEvPT_>
    }
 8010a80:	bf00      	nop
 8010a82:	3708      	adds	r7, #8
 8010a84:	46bd      	mov	sp, r7
 8010a86:	bd80      	pop	{r7, pc}

08010a88 <_ZSt4moveIRNSt12_Vector_baseIcSaIcEE12_Vector_implEEONSt16remove_referenceIT_E4typeEOS6_>:
    move(_Tp&& __t) noexcept
 8010a88:	b480      	push	{r7}
 8010a8a:	b083      	sub	sp, #12
 8010a8c:	af00      	add	r7, sp, #0
 8010a8e:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8010a90:	687b      	ldr	r3, [r7, #4]
 8010a92:	4618      	mov	r0, r3
 8010a94:	370c      	adds	r7, #12
 8010a96:	46bd      	mov	sp, r7
 8010a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a9c:	4770      	bx	lr

08010a9e <_ZNSt12_Vector_baseIcSaIcEE17_Vector_impl_dataC1EOS2_>:
	_Vector_impl_data(_Vector_impl_data&& __x) noexcept
 8010a9e:	b480      	push	{r7}
 8010aa0:	b083      	sub	sp, #12
 8010aa2:	af00      	add	r7, sp, #0
 8010aa4:	6078      	str	r0, [r7, #4]
 8010aa6:	6039      	str	r1, [r7, #0]
	: _M_start(__x._M_start), _M_finish(__x._M_finish),
 8010aa8:	683b      	ldr	r3, [r7, #0]
 8010aaa:	681a      	ldr	r2, [r3, #0]
 8010aac:	687b      	ldr	r3, [r7, #4]
 8010aae:	601a      	str	r2, [r3, #0]
 8010ab0:	683b      	ldr	r3, [r7, #0]
 8010ab2:	685a      	ldr	r2, [r3, #4]
 8010ab4:	687b      	ldr	r3, [r7, #4]
 8010ab6:	605a      	str	r2, [r3, #4]
	  _M_end_of_storage(__x._M_end_of_storage)
 8010ab8:	683b      	ldr	r3, [r7, #0]
 8010aba:	689a      	ldr	r2, [r3, #8]
 8010abc:	687b      	ldr	r3, [r7, #4]
 8010abe:	609a      	str	r2, [r3, #8]
	{ __x._M_start = __x._M_finish = __x._M_end_of_storage = pointer(); }
 8010ac0:	683b      	ldr	r3, [r7, #0]
 8010ac2:	2200      	movs	r2, #0
 8010ac4:	609a      	str	r2, [r3, #8]
 8010ac6:	683b      	ldr	r3, [r7, #0]
 8010ac8:	689a      	ldr	r2, [r3, #8]
 8010aca:	683b      	ldr	r3, [r7, #0]
 8010acc:	605a      	str	r2, [r3, #4]
 8010ace:	683b      	ldr	r3, [r7, #0]
 8010ad0:	685a      	ldr	r2, [r3, #4]
 8010ad2:	683b      	ldr	r3, [r7, #0]
 8010ad4:	601a      	str	r2, [r3, #0]
 8010ad6:	687b      	ldr	r3, [r7, #4]
 8010ad8:	4618      	mov	r0, r3
 8010ada:	370c      	adds	r7, #12
 8010adc:	46bd      	mov	sp, r7
 8010ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ae2:	4770      	bx	lr

08010ae4 <_ZNKSt6vectorIN3jlb4EdgeESaIS1_EE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 8010ae4:	b580      	push	{r7, lr}
 8010ae6:	b082      	sub	sp, #8
 8010ae8:	af00      	add	r7, sp, #0
 8010aea:	6078      	str	r0, [r7, #4]
      { return _S_max_size(_M_get_Tp_allocator()); }
 8010aec:	687b      	ldr	r3, [r7, #4]
 8010aee:	4618      	mov	r0, r3
 8010af0:	f000 f87f 	bl	8010bf2 <_ZNKSt12_Vector_baseIN3jlb4EdgeESaIS1_EE19_M_get_Tp_allocatorEv>
 8010af4:	4603      	mov	r3, r0
 8010af6:	4618      	mov	r0, r3
 8010af8:	f000 fc08 	bl	801130c <_ZNSt6vectorIN3jlb4EdgeESaIS1_EE11_S_max_sizeERKS2_>
 8010afc:	4603      	mov	r3, r0
 8010afe:	4618      	mov	r0, r3
 8010b00:	3708      	adds	r7, #8
 8010b02:	46bd      	mov	sp, r7
 8010b04:	bd80      	pop	{r7, pc}

08010b06 <_ZNSt16allocator_traitsISaIN3jlb4EdgeEEE8allocateERS2_j>:
      allocate(allocator_type& __a, size_type __n)
 8010b06:	b580      	push	{r7, lr}
 8010b08:	b084      	sub	sp, #16
 8010b0a:	af00      	add	r7, sp, #0
 8010b0c:	6078      	str	r0, [r7, #4]
 8010b0e:	6039      	str	r1, [r7, #0]
 8010b10:	687b      	ldr	r3, [r7, #4]
 8010b12:	60fb      	str	r3, [r7, #12]
 8010b14:	683b      	ldr	r3, [r7, #0]
 8010b16:	60bb      	str	r3, [r7, #8]
	if (std::is_constant_evaluated())
 8010b18:	f7f1 fff8 	bl	8002b0c <_ZSt21is_constant_evaluatedv>
 8010b1c:	4603      	mov	r3, r0
 8010b1e:	2b00      	cmp	r3, #0
 8010b20:	d009      	beq.n	8010b36 <_ZNSt16allocator_traitsISaIN3jlb4EdgeEEE8allocateERS2_j+0x30>
	  return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8010b22:	68ba      	ldr	r2, [r7, #8]
 8010b24:	4613      	mov	r3, r2
 8010b26:	005b      	lsls	r3, r3, #1
 8010b28:	4413      	add	r3, r2
 8010b2a:	00db      	lsls	r3, r3, #3
 8010b2c:	4618      	mov	r0, r3
 8010b2e:	f010 fb29 	bl	8021184 <_Znwj>
 8010b32:	4603      	mov	r3, r0
 8010b34:	e006      	b.n	8010b44 <_ZNSt16allocator_traitsISaIN3jlb4EdgeEEE8allocateERS2_j+0x3e>
	return __allocator_base<_Tp>::allocate(__n, 0);
 8010b36:	2200      	movs	r2, #0
 8010b38:	68b9      	ldr	r1, [r7, #8]
 8010b3a:	68f8      	ldr	r0, [r7, #12]
 8010b3c:	f000 fec8 	bl	80118d0 <_ZN9__gnu_cxx13new_allocatorIN3jlb4EdgeEE8allocateEjPKv>
 8010b40:	4603      	mov	r3, r0
 8010b42:	bf00      	nop
      { return __a.allocate(__n); }
 8010b44:	4618      	mov	r0, r3
 8010b46:	3710      	adds	r7, #16
 8010b48:	46bd      	mov	sp, r7
 8010b4a:	bd80      	pop	{r7, pc}

08010b4c <_ZNSt6vectorIN3jlb4EdgeESaIS1_EE14_S_do_relocateEPS1_S4_S4_RS2_St17integral_constantIbLb1EE>:
      _S_do_relocate(pointer __first, pointer __last, pointer __result,
 8010b4c:	b580      	push	{r7, lr}
 8010b4e:	b084      	sub	sp, #16
 8010b50:	af00      	add	r7, sp, #0
 8010b52:	60f8      	str	r0, [r7, #12]
 8010b54:	60b9      	str	r1, [r7, #8]
 8010b56:	607a      	str	r2, [r7, #4]
 8010b58:	603b      	str	r3, [r7, #0]
	return std::__relocate_a(__first, __last, __result, __alloc);
 8010b5a:	683b      	ldr	r3, [r7, #0]
 8010b5c:	687a      	ldr	r2, [r7, #4]
 8010b5e:	68b9      	ldr	r1, [r7, #8]
 8010b60:	68f8      	ldr	r0, [r7, #12]
 8010b62:	f000 fbef 	bl	8011344 <_ZSt12__relocate_aIPN3jlb4EdgeES2_SaIS1_EET0_T_S5_S4_RT1_>
 8010b66:	4603      	mov	r3, r0
      }
 8010b68:	4618      	mov	r0, r3
 8010b6a:	3710      	adds	r7, #16
 8010b6c:	46bd      	mov	sp, r7
 8010b6e:	bd80      	pop	{r7, pc}

08010b70 <_ZSt10destroy_atIN3jlb4EdgeEEvPT_>:
    destroy_at(_Tp* __location)
 8010b70:	b580      	push	{r7, lr}
 8010b72:	b082      	sub	sp, #8
 8010b74:	af00      	add	r7, sp, #0
 8010b76:	6078      	str	r0, [r7, #4]
	__location->~_Tp();
 8010b78:	6878      	ldr	r0, [r7, #4]
 8010b7a:	f7f4 fcf2 	bl	8005562 <_ZN3jlb4EdgeD1Ev>
    }
 8010b7e:	bf00      	nop
 8010b80:	3708      	adds	r7, #8
 8010b82:	46bd      	mov	sp, r7
 8010b84:	bd80      	pop	{r7, pc}

08010b86 <_ZN9__gnu_cxx13new_allocatorIN3jlb4NodeEE10deallocateEPS2_j>:
      deallocate(_Tp* __p, size_type __t __attribute__ ((__unused__)))
 8010b86:	b580      	push	{r7, lr}
 8010b88:	b084      	sub	sp, #16
 8010b8a:	af00      	add	r7, sp, #0
 8010b8c:	60f8      	str	r0, [r7, #12]
 8010b8e:	60b9      	str	r1, [r7, #8]
 8010b90:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 8010b92:	687a      	ldr	r2, [r7, #4]
 8010b94:	4613      	mov	r3, r2
 8010b96:	005b      	lsls	r3, r3, #1
 8010b98:	4413      	add	r3, r2
 8010b9a:	00db      	lsls	r3, r3, #3
 8010b9c:	4619      	mov	r1, r3
 8010b9e:	68b8      	ldr	r0, [r7, #8]
 8010ba0:	f010 faee 	bl	8021180 <_ZdlPvj>
      }
 8010ba4:	3710      	adds	r7, #16
 8010ba6:	46bd      	mov	sp, r7
 8010ba8:	bd80      	pop	{r7, pc}

08010baa <_ZSt11__addressofIN3jlb4NodeEEPT_RS2_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 8010baa:	b480      	push	{r7}
 8010bac:	b083      	sub	sp, #12
 8010bae:	af00      	add	r7, sp, #0
 8010bb0:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 8010bb2:	687b      	ldr	r3, [r7, #4]
 8010bb4:	4618      	mov	r0, r3
 8010bb6:	370c      	adds	r7, #12
 8010bb8:	46bd      	mov	sp, r7
 8010bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010bbe:	4770      	bx	lr

08010bc0 <_ZSt8_DestroyIN3jlb4NodeEEvPT_>:
    _Destroy(_Tp* __pointer)
 8010bc0:	b580      	push	{r7, lr}
 8010bc2:	b082      	sub	sp, #8
 8010bc4:	af00      	add	r7, sp, #0
 8010bc6:	6078      	str	r0, [r7, #4]
      std::destroy_at(__pointer);
 8010bc8:	6878      	ldr	r0, [r7, #4]
 8010bca:	f000 f8ca 	bl	8010d62 <_ZSt10destroy_atIN3jlb4NodeEEvPT_>
    }
 8010bce:	bf00      	nop
 8010bd0:	3708      	adds	r7, #8
 8010bd2:	46bd      	mov	sp, r7
 8010bd4:	bd80      	pop	{r7, pc}

08010bd6 <_ZN9__gnu_cxx14__alloc_traitsISaIN3jlb4EdgeEES2_E17_S_select_on_copyERKS3_>:
    static constexpr _Alloc _S_select_on_copy(const _Alloc& __a)
 8010bd6:	b580      	push	{r7, lr}
 8010bd8:	b082      	sub	sp, #8
 8010bda:	af00      	add	r7, sp, #0
 8010bdc:	6078      	str	r0, [r7, #4]
 8010bde:	6039      	str	r1, [r7, #0]
    { return _Base_type::select_on_container_copy_construction(__a); }
 8010be0:	687b      	ldr	r3, [r7, #4]
 8010be2:	6839      	ldr	r1, [r7, #0]
 8010be4:	4618      	mov	r0, r3
 8010be6:	f000 fbca 	bl	801137e <_ZNSt16allocator_traitsISaIN3jlb4EdgeEEE37select_on_container_copy_constructionERKS2_>
 8010bea:	6878      	ldr	r0, [r7, #4]
 8010bec:	3708      	adds	r7, #8
 8010bee:	46bd      	mov	sp, r7
 8010bf0:	bd80      	pop	{r7, pc}

08010bf2 <_ZNKSt12_Vector_baseIN3jlb4EdgeESaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 8010bf2:	b480      	push	{r7}
 8010bf4:	b083      	sub	sp, #12
 8010bf6:	af00      	add	r7, sp, #0
 8010bf8:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8010bfa:	687b      	ldr	r3, [r7, #4]
 8010bfc:	4618      	mov	r0, r3
 8010bfe:	370c      	adds	r7, #12
 8010c00:	46bd      	mov	sp, r7
 8010c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c06:	4770      	bx	lr

08010c08 <_ZNSt12_Vector_baseIN3jlb4EdgeESaIS1_EEC1EjRKS2_>:
      _Vector_base(size_t __n, const allocator_type& __a)
 8010c08:	b580      	push	{r7, lr}
 8010c0a:	b084      	sub	sp, #16
 8010c0c:	af00      	add	r7, sp, #0
 8010c0e:	60f8      	str	r0, [r7, #12]
 8010c10:	60b9      	str	r1, [r7, #8]
 8010c12:	607a      	str	r2, [r7, #4]
      : _M_impl(__a)
 8010c14:	68fb      	ldr	r3, [r7, #12]
 8010c16:	6879      	ldr	r1, [r7, #4]
 8010c18:	4618      	mov	r0, r3
 8010c1a:	f000 fbbd 	bl	8011398 <_ZNSt12_Vector_baseIN3jlb4EdgeESaIS1_EE12_Vector_implC1ERKS2_>
      { _M_create_storage(__n); }
 8010c1e:	68b9      	ldr	r1, [r7, #8]
 8010c20:	68f8      	ldr	r0, [r7, #12]
 8010c22:	f000 fbcb 	bl	80113bc <_ZNSt12_Vector_baseIN3jlb4EdgeESaIS1_EE17_M_create_storageEj>
 8010c26:	68fb      	ldr	r3, [r7, #12]
 8010c28:	4618      	mov	r0, r3
 8010c2a:	3710      	adds	r7, #16
 8010c2c:	46bd      	mov	sp, r7
 8010c2e:	bd80      	pop	{r7, pc}

08010c30 <_ZNKSt6vectorIN3jlb4EdgeESaIS1_EE5beginEv>:
      begin() const _GLIBCXX_NOEXCEPT
 8010c30:	b580      	push	{r7, lr}
 8010c32:	b084      	sub	sp, #16
 8010c34:	af00      	add	r7, sp, #0
 8010c36:	6078      	str	r0, [r7, #4]
      { return const_iterator(this->_M_impl._M_start); }
 8010c38:	687a      	ldr	r2, [r7, #4]
 8010c3a:	f107 030c 	add.w	r3, r7, #12
 8010c3e:	4611      	mov	r1, r2
 8010c40:	4618      	mov	r0, r3
 8010c42:	f000 fbd9 	bl	80113f8 <_ZN9__gnu_cxx17__normal_iteratorIPKN3jlb4EdgeESt6vectorIS2_SaIS2_EEEC1ERKS4_>
 8010c46:	68fb      	ldr	r3, [r7, #12]
 8010c48:	4618      	mov	r0, r3
 8010c4a:	3710      	adds	r7, #16
 8010c4c:	46bd      	mov	sp, r7
 8010c4e:	bd80      	pop	{r7, pc}

08010c50 <_ZNKSt6vectorIN3jlb4EdgeESaIS1_EE3endEv>:
      end() const _GLIBCXX_NOEXCEPT
 8010c50:	b580      	push	{r7, lr}
 8010c52:	b084      	sub	sp, #16
 8010c54:	af00      	add	r7, sp, #0
 8010c56:	6078      	str	r0, [r7, #4]
      { return const_iterator(this->_M_impl._M_finish); }
 8010c58:	687b      	ldr	r3, [r7, #4]
 8010c5a:	1d1a      	adds	r2, r3, #4
 8010c5c:	f107 030c 	add.w	r3, r7, #12
 8010c60:	4611      	mov	r1, r2
 8010c62:	4618      	mov	r0, r3
 8010c64:	f000 fbc8 	bl	80113f8 <_ZN9__gnu_cxx17__normal_iteratorIPKN3jlb4EdgeESt6vectorIS2_SaIS2_EEEC1ERKS4_>
 8010c68:	68fb      	ldr	r3, [r7, #12]
 8010c6a:	4618      	mov	r0, r3
 8010c6c:	3710      	adds	r7, #16
 8010c6e:	46bd      	mov	sp, r7
 8010c70:	bd80      	pop	{r7, pc}

08010c72 <_ZSt22__uninitialized_copy_aIN9__gnu_cxx17__normal_iteratorIPKN3jlb4EdgeESt6vectorIS3_SaIS3_EEEEPS3_S3_ET0_T_SC_SB_RSaIT1_E>:
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 8010c72:	b580      	push	{r7, lr}
 8010c74:	b084      	sub	sp, #16
 8010c76:	af00      	add	r7, sp, #0
 8010c78:	60f8      	str	r0, [r7, #12]
 8010c7a:	60b9      	str	r1, [r7, #8]
 8010c7c:	607a      	str	r2, [r7, #4]
 8010c7e:	603b      	str	r3, [r7, #0]
    { return std::uninitialized_copy(__first, __last, __result); }
 8010c80:	687a      	ldr	r2, [r7, #4]
 8010c82:	68b9      	ldr	r1, [r7, #8]
 8010c84:	68f8      	ldr	r0, [r7, #12]
 8010c86:	f000 fbc7 	bl	8011418 <_ZSt18uninitialized_copyIN9__gnu_cxx17__normal_iteratorIPKN3jlb4EdgeESt6vectorIS3_SaIS3_EEEEPS3_ET0_T_SC_SB_>
 8010c8a:	4603      	mov	r3, r0
 8010c8c:	4618      	mov	r0, r3
 8010c8e:	3710      	adds	r7, #16
 8010c90:	46bd      	mov	sp, r7
 8010c92:	bd80      	pop	{r7, pc}

08010c94 <_ZNKSt6vectorIN3jlb4NodeESaIS1_EE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 8010c94:	b580      	push	{r7, lr}
 8010c96:	b082      	sub	sp, #8
 8010c98:	af00      	add	r7, sp, #0
 8010c9a:	6078      	str	r0, [r7, #4]
      { return _S_max_size(_M_get_Tp_allocator()); }
 8010c9c:	687b      	ldr	r3, [r7, #4]
 8010c9e:	4618      	mov	r0, r3
 8010ca0:	f000 fbf6 	bl	8011490 <_ZNKSt12_Vector_baseIN3jlb4NodeESaIS1_EE19_M_get_Tp_allocatorEv>
 8010ca4:	4603      	mov	r3, r0
 8010ca6:	4618      	mov	r0, r3
 8010ca8:	f000 fbd6 	bl	8011458 <_ZNSt6vectorIN3jlb4NodeESaIS1_EE11_S_max_sizeERKS2_>
 8010cac:	4603      	mov	r3, r0
 8010cae:	4618      	mov	r0, r3
 8010cb0:	3708      	adds	r7, #8
 8010cb2:	46bd      	mov	sp, r7
 8010cb4:	bd80      	pop	{r7, pc}
	...

08010cb8 <_ZNKSt6vectorIN3jlb4NodeESaIS1_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 8010cb8:	b480      	push	{r7}
 8010cba:	b083      	sub	sp, #12
 8010cbc:	af00      	add	r7, sp, #0
 8010cbe:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8010cc0:	687b      	ldr	r3, [r7, #4]
 8010cc2:	685a      	ldr	r2, [r3, #4]
 8010cc4:	687b      	ldr	r3, [r7, #4]
 8010cc6:	681b      	ldr	r3, [r3, #0]
 8010cc8:	1ad3      	subs	r3, r2, r3
 8010cca:	10db      	asrs	r3, r3, #3
 8010ccc:	4a04      	ldr	r2, [pc, #16]	; (8010ce0 <_ZNKSt6vectorIN3jlb4NodeESaIS1_EE4sizeEv+0x28>)
 8010cce:	fb02 f303 	mul.w	r3, r2, r3
 8010cd2:	4618      	mov	r0, r3
 8010cd4:	370c      	adds	r7, #12
 8010cd6:	46bd      	mov	sp, r7
 8010cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010cdc:	4770      	bx	lr
 8010cde:	bf00      	nop
 8010ce0:	aaaaaaab 	.word	0xaaaaaaab

08010ce4 <_ZNSt16allocator_traitsISaIN3jlb4NodeEEE8allocateERS2_j>:
      allocate(allocator_type& __a, size_type __n)
 8010ce4:	b580      	push	{r7, lr}
 8010ce6:	b084      	sub	sp, #16
 8010ce8:	af00      	add	r7, sp, #0
 8010cea:	6078      	str	r0, [r7, #4]
 8010cec:	6039      	str	r1, [r7, #0]
 8010cee:	687b      	ldr	r3, [r7, #4]
 8010cf0:	60fb      	str	r3, [r7, #12]
 8010cf2:	683b      	ldr	r3, [r7, #0]
 8010cf4:	60bb      	str	r3, [r7, #8]
	if (std::is_constant_evaluated())
 8010cf6:	f7f1 ff09 	bl	8002b0c <_ZSt21is_constant_evaluatedv>
 8010cfa:	4603      	mov	r3, r0
 8010cfc:	2b00      	cmp	r3, #0
 8010cfe:	d009      	beq.n	8010d14 <_ZNSt16allocator_traitsISaIN3jlb4NodeEEE8allocateERS2_j+0x30>
	  return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8010d00:	68ba      	ldr	r2, [r7, #8]
 8010d02:	4613      	mov	r3, r2
 8010d04:	005b      	lsls	r3, r3, #1
 8010d06:	4413      	add	r3, r2
 8010d08:	00db      	lsls	r3, r3, #3
 8010d0a:	4618      	mov	r0, r3
 8010d0c:	f010 fa3a 	bl	8021184 <_Znwj>
 8010d10:	4603      	mov	r3, r0
 8010d12:	e006      	b.n	8010d22 <_ZNSt16allocator_traitsISaIN3jlb4NodeEEE8allocateERS2_j+0x3e>
	return __allocator_base<_Tp>::allocate(__n, 0);
 8010d14:	2200      	movs	r2, #0
 8010d16:	68b9      	ldr	r1, [r7, #8]
 8010d18:	68f8      	ldr	r0, [r7, #12]
 8010d1a:	f000 fea5 	bl	8011a68 <_ZN9__gnu_cxx13new_allocatorIN3jlb4NodeEE8allocateEjPKv>
 8010d1e:	4603      	mov	r3, r0
 8010d20:	bf00      	nop
      { return __a.allocate(__n); }
 8010d22:	4618      	mov	r0, r3
 8010d24:	3710      	adds	r7, #16
 8010d26:	46bd      	mov	sp, r7
 8010d28:	bd80      	pop	{r7, pc}

08010d2a <_ZSt32__make_move_if_noexcept_iteratorIN3jlb4NodeEPKS1_ET0_PT_>:
  // returning a constant iterator when we don't want to move.
  template<typename _Tp, typename _ReturnType
    = typename conditional<__move_if_noexcept_cond<_Tp>::value,
			   const _Tp*, move_iterator<_Tp*>>::type>
    inline _GLIBCXX17_CONSTEXPR _ReturnType
    __make_move_if_noexcept_iterator(_Tp* __i)
 8010d2a:	b480      	push	{r7}
 8010d2c:	b083      	sub	sp, #12
 8010d2e:	af00      	add	r7, sp, #0
 8010d30:	6078      	str	r0, [r7, #4]
    { return _ReturnType(__i); }
 8010d32:	687b      	ldr	r3, [r7, #4]
 8010d34:	4618      	mov	r0, r3
 8010d36:	370c      	adds	r7, #12
 8010d38:	46bd      	mov	sp, r7
 8010d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d3e:	4770      	bx	lr

08010d40 <_ZSt22__uninitialized_copy_aIPKN3jlb4NodeEPS1_S1_ET0_T_S6_S5_RSaIT1_E>:
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 8010d40:	b580      	push	{r7, lr}
 8010d42:	b084      	sub	sp, #16
 8010d44:	af00      	add	r7, sp, #0
 8010d46:	60f8      	str	r0, [r7, #12]
 8010d48:	60b9      	str	r1, [r7, #8]
 8010d4a:	607a      	str	r2, [r7, #4]
 8010d4c:	603b      	str	r3, [r7, #0]
    { return std::uninitialized_copy(__first, __last, __result); }
 8010d4e:	687a      	ldr	r2, [r7, #4]
 8010d50:	68b9      	ldr	r1, [r7, #8]
 8010d52:	68f8      	ldr	r0, [r7, #12]
 8010d54:	f000 fba7 	bl	80114a6 <_ZSt18uninitialized_copyIPKN3jlb4NodeEPS1_ET0_T_S6_S5_>
 8010d58:	4603      	mov	r3, r0
 8010d5a:	4618      	mov	r0, r3
 8010d5c:	3710      	adds	r7, #16
 8010d5e:	46bd      	mov	sp, r7
 8010d60:	bd80      	pop	{r7, pc}

08010d62 <_ZSt10destroy_atIN3jlb4NodeEEvPT_>:
    destroy_at(_Tp* __location)
 8010d62:	b580      	push	{r7, lr}
 8010d64:	b082      	sub	sp, #8
 8010d66:	af00      	add	r7, sp, #0
 8010d68:	6078      	str	r0, [r7, #4]
	__location->~_Tp();
 8010d6a:	6878      	ldr	r0, [r7, #4]
 8010d6c:	f7f4 fbeb 	bl	8005546 <_ZN3jlb4NodeD1Ev>
    }
 8010d70:	bf00      	nop
 8010d72:	3708      	adds	r7, #8
 8010d74:	46bd      	mov	sp, r7
 8010d76:	bd80      	pop	{r7, pc}

08010d78 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIPKcPcEET0_T_S6_S5_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 8010d78:	b580      	push	{r7, lr}
 8010d7a:	b084      	sub	sp, #16
 8010d7c:	af00      	add	r7, sp, #0
 8010d7e:	60f8      	str	r0, [r7, #12]
 8010d80:	60b9      	str	r1, [r7, #8]
 8010d82:	607a      	str	r2, [r7, #4]
        { return std::copy(__first, __last, __result); }
 8010d84:	687a      	ldr	r2, [r7, #4]
 8010d86:	68b9      	ldr	r1, [r7, #8]
 8010d88:	68f8      	ldr	r0, [r7, #12]
 8010d8a:	f7fb fad5 	bl	800c338 <_ZSt4copyIPKcPcET0_T_S4_S3_>
 8010d8e:	4603      	mov	r3, r0
 8010d90:	4618      	mov	r0, r3
 8010d92:	3710      	adds	r7, #16
 8010d94:	46bd      	mov	sp, r7
 8010d96:	bd80      	pop	{r7, pc}

08010d98 <_ZN9__gnu_cxx13new_allocatorIPfEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8010d98:	b480      	push	{r7}
 8010d9a:	b083      	sub	sp, #12
 8010d9c:	af00      	add	r7, sp, #0
 8010d9e:	6078      	str	r0, [r7, #4]
 8010da0:	687b      	ldr	r3, [r7, #4]
 8010da2:	4618      	mov	r0, r3
 8010da4:	370c      	adds	r7, #12
 8010da6:	46bd      	mov	sp, r7
 8010da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010dac:	4770      	bx	lr

08010dae <_ZN9__gnu_cxx13new_allocatorIPfE10deallocateEPS1_j>:
      deallocate(_Tp* __p, size_type __t __attribute__ ((__unused__)))
 8010dae:	b580      	push	{r7, lr}
 8010db0:	b084      	sub	sp, #16
 8010db2:	af00      	add	r7, sp, #0
 8010db4:	60f8      	str	r0, [r7, #12]
 8010db6:	60b9      	str	r1, [r7, #8]
 8010db8:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 8010dba:	687b      	ldr	r3, [r7, #4]
 8010dbc:	009b      	lsls	r3, r3, #2
 8010dbe:	4619      	mov	r1, r3
 8010dc0:	68b8      	ldr	r0, [r7, #8]
 8010dc2:	f010 f9dd 	bl	8021180 <_ZdlPvj>
      }
 8010dc6:	3710      	adds	r7, #16
 8010dc8:	46bd      	mov	sp, r7
 8010dca:	bd80      	pop	{r7, pc}

08010dcc <_ZSt12__miter_baseIPPfET_S2_>:
    __miter_base(_Iterator __it)
 8010dcc:	b480      	push	{r7}
 8010dce:	b083      	sub	sp, #12
 8010dd0:	af00      	add	r7, sp, #0
 8010dd2:	6078      	str	r0, [r7, #4]
    { return __it; }
 8010dd4:	687b      	ldr	r3, [r7, #4]
 8010dd6:	4618      	mov	r0, r3
 8010dd8:	370c      	adds	r7, #12
 8010dda:	46bd      	mov	sp, r7
 8010ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010de0:	4770      	bx	lr

08010de2 <_ZSt13__copy_move_aILb0EPPfS1_ET1_T0_S3_S2_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 8010de2:	b5b0      	push	{r4, r5, r7, lr}
 8010de4:	b084      	sub	sp, #16
 8010de6:	af00      	add	r7, sp, #0
 8010de8:	60f8      	str	r0, [r7, #12]
 8010dea:	60b9      	str	r1, [r7, #8]
 8010dec:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 8010dee:	68f8      	ldr	r0, [r7, #12]
 8010df0:	f000 fba1 	bl	8011536 <_ZSt12__niter_baseIPPfET_S2_>
 8010df4:	4604      	mov	r4, r0
 8010df6:	68b8      	ldr	r0, [r7, #8]
 8010df8:	f000 fb9d 	bl	8011536 <_ZSt12__niter_baseIPPfET_S2_>
 8010dfc:	4605      	mov	r5, r0
 8010dfe:	687b      	ldr	r3, [r7, #4]
 8010e00:	4618      	mov	r0, r3
 8010e02:	f000 fb98 	bl	8011536 <_ZSt12__niter_baseIPPfET_S2_>
 8010e06:	4603      	mov	r3, r0
 8010e08:	461a      	mov	r2, r3
 8010e0a:	4629      	mov	r1, r5
 8010e0c:	4620      	mov	r0, r4
 8010e0e:	f000 fb9d 	bl	801154c <_ZSt14__copy_move_a1ILb0EPPfS1_ET1_T0_S3_S2_>
 8010e12:	4602      	mov	r2, r0
 8010e14:	1d3b      	adds	r3, r7, #4
 8010e16:	4611      	mov	r1, r2
 8010e18:	4618      	mov	r0, r3
 8010e1a:	f000 fba7 	bl	801156c <_ZSt12__niter_wrapIPPfET_RKS2_S2_>
 8010e1e:	4603      	mov	r3, r0
    }
 8010e20:	4618      	mov	r0, r3
 8010e22:	3710      	adds	r7, #16
 8010e24:	46bd      	mov	sp, r7
 8010e26:	bdb0      	pop	{r4, r5, r7, pc}

08010e28 <_ZSt22__copy_move_backward_aILb0EPPfS1_ET1_T0_S3_S2_>:
    __copy_move_backward_a(_II __first, _II __last, _OI __result)
 8010e28:	b5b0      	push	{r4, r5, r7, lr}
 8010e2a:	b084      	sub	sp, #16
 8010e2c:	af00      	add	r7, sp, #0
 8010e2e:	60f8      	str	r0, [r7, #12]
 8010e30:	60b9      	str	r1, [r7, #8]
 8010e32:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 8010e34:	68f8      	ldr	r0, [r7, #12]
 8010e36:	f000 fb7e 	bl	8011536 <_ZSt12__niter_baseIPPfET_S2_>
 8010e3a:	4604      	mov	r4, r0
 8010e3c:	68b8      	ldr	r0, [r7, #8]
 8010e3e:	f000 fb7a 	bl	8011536 <_ZSt12__niter_baseIPPfET_S2_>
 8010e42:	4605      	mov	r5, r0
 8010e44:	687b      	ldr	r3, [r7, #4]
 8010e46:	4618      	mov	r0, r3
 8010e48:	f000 fb75 	bl	8011536 <_ZSt12__niter_baseIPPfET_S2_>
 8010e4c:	4603      	mov	r3, r0
 8010e4e:	461a      	mov	r2, r3
 8010e50:	4629      	mov	r1, r5
 8010e52:	4620      	mov	r0, r4
 8010e54:	f000 fb96 	bl	8011584 <_ZSt23__copy_move_backward_a1ILb0EPPfS1_ET1_T0_S3_S2_>
 8010e58:	4602      	mov	r2, r0
 8010e5a:	1d3b      	adds	r3, r7, #4
 8010e5c:	4611      	mov	r1, r2
 8010e5e:	4618      	mov	r0, r3
 8010e60:	f000 fb84 	bl	801156c <_ZSt12__niter_wrapIPPfET_RKS2_S2_>
 8010e64:	4603      	mov	r3, r0
    }
 8010e66:	4618      	mov	r0, r3
 8010e68:	3710      	adds	r7, #16
 8010e6a:	46bd      	mov	sp, r7
 8010e6c:	bdb0      	pop	{r4, r5, r7, pc}

08010e6e <_ZN9__gnu_cxx13new_allocatorIcE10deallocateEPcj>:
      deallocate(_Tp* __p, size_type __t __attribute__ ((__unused__)))
 8010e6e:	b580      	push	{r7, lr}
 8010e70:	b084      	sub	sp, #16
 8010e72:	af00      	add	r7, sp, #0
 8010e74:	60f8      	str	r0, [r7, #12]
 8010e76:	60b9      	str	r1, [r7, #8]
 8010e78:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 8010e7a:	6879      	ldr	r1, [r7, #4]
 8010e7c:	68b8      	ldr	r0, [r7, #8]
 8010e7e:	f010 f97f 	bl	8021180 <_ZdlPvj>
      }
 8010e82:	3710      	adds	r7, #16
 8010e84:	46bd      	mov	sp, r7
 8010e86:	bd80      	pop	{r7, pc}

08010e88 <_ZNKSt6vectorIcSaIcEE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 8010e88:	b580      	push	{r7, lr}
 8010e8a:	b082      	sub	sp, #8
 8010e8c:	af00      	add	r7, sp, #0
 8010e8e:	6078      	str	r0, [r7, #4]
      { return _S_max_size(_M_get_Tp_allocator()); }
 8010e90:	687b      	ldr	r3, [r7, #4]
 8010e92:	4618      	mov	r0, r3
 8010e94:	f7fc fad7 	bl	800d446 <_ZNKSt12_Vector_baseIcSaIcEE19_M_get_Tp_allocatorEv>
 8010e98:	4603      	mov	r3, r0
 8010e9a:	4618      	mov	r0, r3
 8010e9c:	f7ff f810 	bl	800fec0 <_ZNSt6vectorIcSaIcEE11_S_max_sizeERKS0_>
 8010ea0:	4603      	mov	r3, r0
 8010ea2:	4618      	mov	r0, r3
 8010ea4:	3708      	adds	r7, #8
 8010ea6:	46bd      	mov	sp, r7
 8010ea8:	bd80      	pop	{r7, pc}

08010eaa <_ZNSt6vectorIcSaIcEE14_S_do_relocateEPcS2_S2_RS0_St17integral_constantIbLb1EE>:
      _S_do_relocate(pointer __first, pointer __last, pointer __result,
 8010eaa:	b580      	push	{r7, lr}
 8010eac:	b084      	sub	sp, #16
 8010eae:	af00      	add	r7, sp, #0
 8010eb0:	60f8      	str	r0, [r7, #12]
 8010eb2:	60b9      	str	r1, [r7, #8]
 8010eb4:	607a      	str	r2, [r7, #4]
 8010eb6:	603b      	str	r3, [r7, #0]
	return std::__relocate_a(__first, __last, __result, __alloc);
 8010eb8:	683b      	ldr	r3, [r7, #0]
 8010eba:	687a      	ldr	r2, [r7, #4]
 8010ebc:	68b9      	ldr	r1, [r7, #8]
 8010ebe:	68f8      	ldr	r0, [r7, #12]
 8010ec0:	f000 fb70 	bl	80115a4 <_ZSt12__relocate_aIPcS0_SaIcEET0_T_S3_S2_RT1_>
 8010ec4:	4603      	mov	r3, r0
      }
 8010ec6:	4618      	mov	r0, r3
 8010ec8:	3710      	adds	r7, #16
 8010eca:	46bd      	mov	sp, r7
 8010ecc:	bd80      	pop	{r7, pc}

08010ece <_ZSt10destroy_atIcEvPT_>:
    destroy_at(_Tp* __location)
 8010ece:	b480      	push	{r7}
 8010ed0:	b083      	sub	sp, #12
 8010ed2:	af00      	add	r7, sp, #0
 8010ed4:	6078      	str	r0, [r7, #4]
    }
 8010ed6:	bf00      	nop
 8010ed8:	370c      	adds	r7, #12
 8010eda:	46bd      	mov	sp, r7
 8010edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ee0:	4770      	bx	lr

08010ee2 <_ZSt18make_move_iteratorIPcESt13move_iteratorIT_ES2_>:
    make_move_iterator(_Iterator __i)
 8010ee2:	b580      	push	{r7, lr}
 8010ee4:	b084      	sub	sp, #16
 8010ee6:	af00      	add	r7, sp, #0
 8010ee8:	6078      	str	r0, [r7, #4]
    { return move_iterator<_Iterator>(std::move(__i)); }
 8010eea:	1d3b      	adds	r3, r7, #4
 8010eec:	4618      	mov	r0, r3
 8010eee:	f000 fb76 	bl	80115de <_ZSt4moveIRPcEONSt16remove_referenceIT_E4typeEOS3_>
 8010ef2:	4603      	mov	r3, r0
 8010ef4:	681a      	ldr	r2, [r3, #0]
 8010ef6:	f107 030c 	add.w	r3, r7, #12
 8010efa:	4611      	mov	r1, r2
 8010efc:	4618      	mov	r0, r3
 8010efe:	f000 fb79 	bl	80115f4 <_ZNSt13move_iteratorIPcEC1ES0_>
 8010f02:	68fb      	ldr	r3, [r7, #12]
 8010f04:	4618      	mov	r0, r3
 8010f06:	3710      	adds	r7, #16
 8010f08:	46bd      	mov	sp, r7
 8010f0a:	bd80      	pop	{r7, pc}

08010f0c <_ZSt22__uninitialized_copy_aISt13move_iteratorIPcES1_cET0_T_S4_S3_RSaIT1_E>:
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 8010f0c:	b580      	push	{r7, lr}
 8010f0e:	b084      	sub	sp, #16
 8010f10:	af00      	add	r7, sp, #0
 8010f12:	60f8      	str	r0, [r7, #12]
 8010f14:	60b9      	str	r1, [r7, #8]
 8010f16:	607a      	str	r2, [r7, #4]
 8010f18:	603b      	str	r3, [r7, #0]
    { return std::uninitialized_copy(__first, __last, __result); }
 8010f1a:	687a      	ldr	r2, [r7, #4]
 8010f1c:	68b9      	ldr	r1, [r7, #8]
 8010f1e:	68f8      	ldr	r0, [r7, #12]
 8010f20:	f000 fb7a 	bl	8011618 <_ZSt18uninitialized_copyISt13move_iteratorIPcES1_ET0_T_S4_S3_>
 8010f24:	4603      	mov	r3, r0
 8010f26:	4618      	mov	r0, r3
 8010f28:	3710      	adds	r7, #16
 8010f2a:	46bd      	mov	sp, r7
 8010f2c:	bd80      	pop	{r7, pc}

08010f2e <_ZSt23__copy_move_backward_a1ILb1EPcS0_ET1_T0_S2_S1_>:
    __copy_move_backward_a1(_BI1 __first, _BI1 __last, _BI2 __result)
 8010f2e:	b580      	push	{r7, lr}
 8010f30:	b084      	sub	sp, #16
 8010f32:	af00      	add	r7, sp, #0
 8010f34:	60f8      	str	r0, [r7, #12]
 8010f36:	60b9      	str	r1, [r7, #8]
 8010f38:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_backward_a2<_IsMove>(__first, __last, __result); }
 8010f3a:	687a      	ldr	r2, [r7, #4]
 8010f3c:	68b9      	ldr	r1, [r7, #8]
 8010f3e:	68f8      	ldr	r0, [r7, #12]
 8010f40:	f000 fb7c 	bl	801163c <_ZSt23__copy_move_backward_a2ILb1EPcS0_ET1_T0_S2_S1_>
 8010f44:	4603      	mov	r3, r0
 8010f46:	4618      	mov	r0, r3
 8010f48:	3710      	adds	r7, #16
 8010f4a:	46bd      	mov	sp, r7
 8010f4c:	bd80      	pop	{r7, pc}

08010f4e <_ZSt12__niter_baseIPcSt6vectorIcSaIcEEET_N9__gnu_cxx17__normal_iteratorIS4_T0_EE>:
    __niter_base(__gnu_cxx::__normal_iterator<_Iterator, _Container> __it)
 8010f4e:	b580      	push	{r7, lr}
 8010f50:	b082      	sub	sp, #8
 8010f52:	af00      	add	r7, sp, #0
 8010f54:	6078      	str	r0, [r7, #4]
    { return __it.base(); }
 8010f56:	1d3b      	adds	r3, r7, #4
 8010f58:	4618      	mov	r0, r3
 8010f5a:	f7f8 faca 	bl	80094f2 <_ZNK9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEE4baseEv>
 8010f5e:	4603      	mov	r3, r0
 8010f60:	681b      	ldr	r3, [r3, #0]
 8010f62:	4618      	mov	r0, r3
 8010f64:	3708      	adds	r7, #8
 8010f66:	46bd      	mov	sp, r7
 8010f68:	bd80      	pop	{r7, pc}

08010f6a <_ZSt14__copy_move_a1ILb0EPcS0_ET1_T0_S2_S1_>:
    __copy_move_a1(_II __first, _II __last, _OI __result)
 8010f6a:	b580      	push	{r7, lr}
 8010f6c:	b084      	sub	sp, #16
 8010f6e:	af00      	add	r7, sp, #0
 8010f70:	60f8      	str	r0, [r7, #12]
 8010f72:	60b9      	str	r1, [r7, #8]
 8010f74:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_a2<_IsMove>(__first, __last, __result); }
 8010f76:	687a      	ldr	r2, [r7, #4]
 8010f78:	68b9      	ldr	r1, [r7, #8]
 8010f7a:	68f8      	ldr	r0, [r7, #12]
 8010f7c:	f000 fb7b 	bl	8011676 <_ZSt14__copy_move_a2ILb0EPcS0_ET1_T0_S2_S1_>
 8010f80:	4603      	mov	r3, r0
 8010f82:	4618      	mov	r0, r3
 8010f84:	3710      	adds	r7, #16
 8010f86:	46bd      	mov	sp, r7
 8010f88:	bd80      	pop	{r7, pc}

08010f8a <_ZSt12__niter_wrapIN9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEES2_ET_S7_T0_>:
    __niter_wrap(_From __from, _To __res)
 8010f8a:	b580      	push	{r7, lr}
 8010f8c:	b082      	sub	sp, #8
 8010f8e:	af00      	add	r7, sp, #0
 8010f90:	6078      	str	r0, [r7, #4]
 8010f92:	6039      	str	r1, [r7, #0]
    { return __from + (__res - std::__niter_base(__from)); }
 8010f94:	6878      	ldr	r0, [r7, #4]
 8010f96:	f7ff ffda 	bl	8010f4e <_ZSt12__niter_baseIPcSt6vectorIcSaIcEEET_N9__gnu_cxx17__normal_iteratorIS4_T0_EE>
 8010f9a:	4602      	mov	r2, r0
 8010f9c:	683b      	ldr	r3, [r7, #0]
 8010f9e:	1a9a      	subs	r2, r3, r2
 8010fa0:	1d3b      	adds	r3, r7, #4
 8010fa2:	4611      	mov	r1, r2
 8010fa4:	4618      	mov	r0, r3
 8010fa6:	f7fc fed0 	bl	800dd4a <_ZNK9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEplEi>
 8010faa:	4603      	mov	r3, r0
 8010fac:	4618      	mov	r0, r3
 8010fae:	3708      	adds	r7, #8
 8010fb0:	46bd      	mov	sp, r7
 8010fb2:	bd80      	pop	{r7, pc}

08010fb4 <_ZSt9__advanceIPciEvRT_T0_St26random_access_iterator_tag>:
    __advance(_RandomAccessIterator& __i, _Distance __n,
 8010fb4:	b480      	push	{r7}
 8010fb6:	b085      	sub	sp, #20
 8010fb8:	af00      	add	r7, sp, #0
 8010fba:	60f8      	str	r0, [r7, #12]
 8010fbc:	60b9      	str	r1, [r7, #8]
 8010fbe:	713a      	strb	r2, [r7, #4]
	__i += __n;
 8010fc0:	68fb      	ldr	r3, [r7, #12]
 8010fc2:	681a      	ldr	r2, [r3, #0]
 8010fc4:	68bb      	ldr	r3, [r7, #8]
 8010fc6:	441a      	add	r2, r3
 8010fc8:	68fb      	ldr	r3, [r7, #12]
 8010fca:	601a      	str	r2, [r3, #0]
    }
 8010fcc:	bf00      	nop
 8010fce:	3714      	adds	r7, #20
 8010fd0:	46bd      	mov	sp, r7
 8010fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010fd6:	4770      	bx	lr

08010fd8 <_ZSt18uninitialized_copyIPcS0_ET0_T_S2_S1_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 8010fd8:	b580      	push	{r7, lr}
 8010fda:	b086      	sub	sp, #24
 8010fdc:	af00      	add	r7, sp, #0
 8010fde:	60f8      	str	r0, [r7, #12]
 8010fe0:	60b9      	str	r1, [r7, #8]
 8010fe2:	607a      	str	r2, [r7, #4]
      const bool __assignable = is_assignable<_RefType2, _RefType1>::value;
 8010fe4:	2301      	movs	r3, #1
 8010fe6:	75fb      	strb	r3, [r7, #23]
	__uninit_copy(__first, __last, __result);
 8010fe8:	687a      	ldr	r2, [r7, #4]
 8010fea:	68b9      	ldr	r1, [r7, #8]
 8010fec:	68f8      	ldr	r0, [r7, #12]
 8010fee:	f000 fb5f 	bl	80116b0 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIPcS2_EET0_T_S4_S3_>
 8010ff2:	4603      	mov	r3, r0
    }
 8010ff4:	4618      	mov	r0, r3
 8010ff6:	3718      	adds	r7, #24
 8010ff8:	46bd      	mov	sp, r7
 8010ffa:	bd80      	pop	{r7, pc}

08010ffc <_ZSt32__make_move_if_noexcept_iteratorIcSt13move_iteratorIPcEET0_PT_>:
    __make_move_if_noexcept_iterator(_Tp* __i)
 8010ffc:	b580      	push	{r7, lr}
 8010ffe:	b084      	sub	sp, #16
 8011000:	af00      	add	r7, sp, #0
 8011002:	6078      	str	r0, [r7, #4]
    { return _ReturnType(__i); }
 8011004:	f107 030c 	add.w	r3, r7, #12
 8011008:	6879      	ldr	r1, [r7, #4]
 801100a:	4618      	mov	r0, r3
 801100c:	f000 faf2 	bl	80115f4 <_ZNSt13move_iteratorIPcEC1ES0_>
 8011010:	68fb      	ldr	r3, [r7, #12]
 8011012:	4618      	mov	r0, r3
 8011014:	3710      	adds	r7, #16
 8011016:	46bd      	mov	sp, r7
 8011018:	bd80      	pop	{r7, pc}

0801101a <_ZSt4moveIRbEONSt16remove_referenceIT_E4typeEOS2_>:
    move(_Tp&& __t) noexcept
 801101a:	b480      	push	{r7}
 801101c:	b083      	sub	sp, #12
 801101e:	af00      	add	r7, sp, #0
 8011020:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8011022:	687b      	ldr	r3, [r7, #4]
 8011024:	4618      	mov	r0, r3
 8011026:	370c      	adds	r7, #12
 8011028:	46bd      	mov	sp, r7
 801102a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801102e:	4770      	bx	lr

08011030 <_ZNK9__gnu_cxx13new_allocatorIcE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 8011030:	b480      	push	{r7}
 8011032:	b083      	sub	sp, #12
 8011034:	af00      	add	r7, sp, #0
 8011036:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8011038:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
      }
 801103c:	4618      	mov	r0, r3
 801103e:	370c      	adds	r7, #12
 8011040:	46bd      	mov	sp, r7
 8011042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011046:	4770      	bx	lr

08011048 <_ZN9__gnu_cxx13new_allocatorIcE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8011048:	b580      	push	{r7, lr}
 801104a:	b084      	sub	sp, #16
 801104c:	af00      	add	r7, sp, #0
 801104e:	60f8      	str	r0, [r7, #12]
 8011050:	60b9      	str	r1, [r7, #8]
 8011052:	607a      	str	r2, [r7, #4]
	if (__builtin_expect(__n > this->_M_max_size(), false))
 8011054:	68f8      	ldr	r0, [r7, #12]
 8011056:	f7ff ffeb 	bl	8011030 <_ZNK9__gnu_cxx13new_allocatorIcE11_M_max_sizeEv>
 801105a:	4602      	mov	r2, r0
 801105c:	68bb      	ldr	r3, [r7, #8]
 801105e:	4293      	cmp	r3, r2
 8011060:	bf8c      	ite	hi
 8011062:	2301      	movhi	r3, #1
 8011064:	2300      	movls	r3, #0
 8011066:	b2db      	uxtb	r3, r3
 8011068:	2b00      	cmp	r3, #0
 801106a:	bf14      	ite	ne
 801106c:	2301      	movne	r3, #1
 801106e:	2300      	moveq	r3, #0
 8011070:	b2db      	uxtb	r3, r3
 8011072:	2b00      	cmp	r3, #0
 8011074:	d001      	beq.n	801107a <_ZN9__gnu_cxx13new_allocatorIcE8allocateEjPKv+0x32>
	    std::__throw_bad_alloc();
 8011076:	f010 f899 	bl	80211ac <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 801107a:	68b8      	ldr	r0, [r7, #8]
 801107c:	f010 f882 	bl	8021184 <_Znwj>
 8011080:	4603      	mov	r3, r0
 8011082:	bf00      	nop
      }
 8011084:	4618      	mov	r0, r3
 8011086:	3710      	adds	r7, #16
 8011088:	46bd      	mov	sp, r7
 801108a:	bd80      	pop	{r7, pc}

0801108c <_ZSt11__make_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_RT0_>:
    __make_heap(_RandomAccessIterator __first, _RandomAccessIterator __last,
 801108c:	b590      	push	{r4, r7, lr}
 801108e:	b089      	sub	sp, #36	; 0x24
 8011090:	af00      	add	r7, sp, #0
 8011092:	60f8      	str	r0, [r7, #12]
 8011094:	60b9      	str	r1, [r7, #8]
 8011096:	607a      	str	r2, [r7, #4]
      if (__last - __first < 2)
 8011098:	f107 020c 	add.w	r2, r7, #12
 801109c:	f107 0308 	add.w	r3, r7, #8
 80110a0:	4611      	mov	r1, r2
 80110a2:	4618      	mov	r0, r3
 80110a4:	f7f2 fca2 	bl	80039ec <_ZN9__gnu_cxxmiIPfSt6vectorIfSaIfEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS8_SB_>
 80110a8:	4603      	mov	r3, r0
 80110aa:	2b01      	cmp	r3, #1
 80110ac:	bfd4      	ite	le
 80110ae:	2301      	movle	r3, #1
 80110b0:	2300      	movgt	r3, #0
 80110b2:	b2db      	uxtb	r3, r3
 80110b4:	2b00      	cmp	r3, #0
 80110b6:	d139      	bne.n	801112c <_ZSt11__make_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_RT0_+0xa0>
      const _DistanceType __len = __last - __first;
 80110b8:	f107 020c 	add.w	r2, r7, #12
 80110bc:	f107 0308 	add.w	r3, r7, #8
 80110c0:	4611      	mov	r1, r2
 80110c2:	4618      	mov	r0, r3
 80110c4:	f7f2 fc92 	bl	80039ec <_ZN9__gnu_cxxmiIPfSt6vectorIfSaIfEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS8_SB_>
 80110c8:	61b8      	str	r0, [r7, #24]
      _DistanceType __parent = (__len - 2) / 2;
 80110ca:	69bb      	ldr	r3, [r7, #24]
 80110cc:	3b02      	subs	r3, #2
 80110ce:	0fda      	lsrs	r2, r3, #31
 80110d0:	4413      	add	r3, r2
 80110d2:	105b      	asrs	r3, r3, #1
 80110d4:	61fb      	str	r3, [r7, #28]
	  _ValueType __value = _GLIBCXX_MOVE(*(__first + __parent));
 80110d6:	f107 030c 	add.w	r3, r7, #12
 80110da:	69f9      	ldr	r1, [r7, #28]
 80110dc:	4618      	mov	r0, r3
 80110de:	f7fe f91c 	bl	800f31a <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEplEi>
 80110e2:	4603      	mov	r3, r0
 80110e4:	617b      	str	r3, [r7, #20]
 80110e6:	f107 0314 	add.w	r3, r7, #20
 80110ea:	4618      	mov	r0, r3
 80110ec:	f7fe f93d 	bl	800f36a <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEdeEv>
 80110f0:	4603      	mov	r3, r0
 80110f2:	4618      	mov	r0, r3
 80110f4:	f7fb fe26 	bl	800cd44 <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>
 80110f8:	4603      	mov	r3, r0
 80110fa:	681b      	ldr	r3, [r3, #0]
 80110fc:	613b      	str	r3, [r7, #16]
	  std::__adjust_heap(__first, __parent, __len, _GLIBCXX_MOVE(__value),
 80110fe:	f107 0310 	add.w	r3, r7, #16
 8011102:	4618      	mov	r0, r3
 8011104:	f7fb fe1e 	bl	800cd44 <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>
 8011108:	4603      	mov	r3, r0
 801110a:	edd3 7a00 	vldr	s15, [r3]
 801110e:	4623      	mov	r3, r4
 8011110:	eeb0 0a67 	vmov.f32	s0, s15
 8011114:	69ba      	ldr	r2, [r7, #24]
 8011116:	69f9      	ldr	r1, [r7, #28]
 8011118:	68f8      	ldr	r0, [r7, #12]
 801111a:	f000 fad9 	bl	80116d0 <_ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEifNS0_5__ops15_Iter_less_iterEEvT_T0_SA_T1_T2_>
	  if (__parent == 0)
 801111e:	69fb      	ldr	r3, [r7, #28]
 8011120:	2b00      	cmp	r3, #0
 8011122:	d005      	beq.n	8011130 <_ZSt11__make_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_RT0_+0xa4>
	  __parent--;
 8011124:	69fb      	ldr	r3, [r7, #28]
 8011126:	3b01      	subs	r3, #1
 8011128:	61fb      	str	r3, [r7, #28]
      while (true)
 801112a:	e7d4      	b.n	80110d6 <_ZSt11__make_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_RT0_+0x4a>
	return;
 801112c:	bf00      	nop
 801112e:	e000      	b.n	8011132 <_ZSt11__make_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_RT0_+0xa6>
	    return;
 8011130:	bf00      	nop
    }
 8011132:	3724      	adds	r7, #36	; 0x24
 8011134:	46bd      	mov	sp, r7
 8011136:	bd90      	pop	{r4, r7, pc}

08011138 <_ZSt10__pop_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_S9_RT0_>:
    __pop_heap(_RandomAccessIterator __first, _RandomAccessIterator __last,
 8011138:	b5b0      	push	{r4, r5, r7, lr}
 801113a:	b086      	sub	sp, #24
 801113c:	af00      	add	r7, sp, #0
 801113e:	60f8      	str	r0, [r7, #12]
 8011140:	60b9      	str	r1, [r7, #8]
 8011142:	607a      	str	r2, [r7, #4]
 8011144:	603b      	str	r3, [r7, #0]
      _ValueType __value = _GLIBCXX_MOVE(*__result);
 8011146:	1d3b      	adds	r3, r7, #4
 8011148:	4618      	mov	r0, r3
 801114a:	f7fe f90e 	bl	800f36a <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEdeEv>
 801114e:	4603      	mov	r3, r0
 8011150:	4618      	mov	r0, r3
 8011152:	f7fb fdf7 	bl	800cd44 <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>
 8011156:	4603      	mov	r3, r0
 8011158:	681b      	ldr	r3, [r3, #0]
 801115a:	617b      	str	r3, [r7, #20]
      *__result = _GLIBCXX_MOVE(*__first);
 801115c:	f107 030c 	add.w	r3, r7, #12
 8011160:	4618      	mov	r0, r3
 8011162:	f7fe f902 	bl	800f36a <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEdeEv>
 8011166:	4603      	mov	r3, r0
 8011168:	4618      	mov	r0, r3
 801116a:	f7fb fdeb 	bl	800cd44 <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>
 801116e:	4603      	mov	r3, r0
 8011170:	681c      	ldr	r4, [r3, #0]
 8011172:	1d3b      	adds	r3, r7, #4
 8011174:	4618      	mov	r0, r3
 8011176:	f7fe f8f8 	bl	800f36a <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEdeEv>
 801117a:	4603      	mov	r3, r0
 801117c:	601c      	str	r4, [r3, #0]
			 _DistanceType(__last - __first),
 801117e:	f107 020c 	add.w	r2, r7, #12
 8011182:	f107 0308 	add.w	r3, r7, #8
 8011186:	4611      	mov	r1, r2
 8011188:	4618      	mov	r0, r3
 801118a:	f7f2 fc2f 	bl	80039ec <_ZN9__gnu_cxxmiIPfSt6vectorIfSaIfEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS8_SB_>
 801118e:	4604      	mov	r4, r0
			 _GLIBCXX_MOVE(__value), __comp);
 8011190:	f107 0314 	add.w	r3, r7, #20
 8011194:	4618      	mov	r0, r3
 8011196:	f7fb fdd5 	bl	800cd44 <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>
 801119a:	4603      	mov	r3, r0
      std::__adjust_heap(__first, _DistanceType(0),
 801119c:	edd3 7a00 	vldr	s15, [r3]
 80111a0:	462b      	mov	r3, r5
 80111a2:	eeb0 0a67 	vmov.f32	s0, s15
 80111a6:	4622      	mov	r2, r4
 80111a8:	2100      	movs	r1, #0
 80111aa:	68f8      	ldr	r0, [r7, #12]
 80111ac:	f000 fa90 	bl	80116d0 <_ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEifNS0_5__ops15_Iter_less_iterEEvT_T0_SA_T1_T2_>
    }
 80111b0:	bf00      	nop
 80111b2:	3718      	adds	r7, #24
 80111b4:	46bd      	mov	sp, r7
 80111b6:	bdb0      	pop	{r4, r5, r7, pc}

080111b8 <_ZSt9iter_swapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEES6_EvT_T0_>:
    iter_swap(_ForwardIterator1 __a, _ForwardIterator2 __b)
 80111b8:	b590      	push	{r4, r7, lr}
 80111ba:	b083      	sub	sp, #12
 80111bc:	af00      	add	r7, sp, #0
 80111be:	6078      	str	r0, [r7, #4]
 80111c0:	6039      	str	r1, [r7, #0]
      swap(*__a, *__b);
 80111c2:	1d3b      	adds	r3, r7, #4
 80111c4:	4618      	mov	r0, r3
 80111c6:	f7fe f8d0 	bl	800f36a <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEdeEv>
 80111ca:	4604      	mov	r4, r0
 80111cc:	463b      	mov	r3, r7
 80111ce:	4618      	mov	r0, r3
 80111d0:	f7fe f8cb 	bl	800f36a <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEdeEv>
 80111d4:	4603      	mov	r3, r0
 80111d6:	4619      	mov	r1, r3
 80111d8:	4620      	mov	r0, r4
 80111da:	f000 fb21 	bl	8011820 <_ZSt4swapIfENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS4_ESt18is_move_assignableIS4_EEE5valueEvE4typeERS4_SE_>
    }
 80111de:	bf00      	nop
 80111e0:	370c      	adds	r7, #12
 80111e2:	46bd      	mov	sp, r7
 80111e4:	bd90      	pop	{r4, r7, pc}

080111e6 <_ZSt23__copy_move_backward_a1ILb1EPfS0_ET1_T0_S2_S1_>:
    __copy_move_backward_a1(_BI1 __first, _BI1 __last, _BI2 __result)
 80111e6:	b580      	push	{r7, lr}
 80111e8:	b084      	sub	sp, #16
 80111ea:	af00      	add	r7, sp, #0
 80111ec:	60f8      	str	r0, [r7, #12]
 80111ee:	60b9      	str	r1, [r7, #8]
 80111f0:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_backward_a2<_IsMove>(__first, __last, __result); }
 80111f2:	687a      	ldr	r2, [r7, #4]
 80111f4:	68b9      	ldr	r1, [r7, #8]
 80111f6:	68f8      	ldr	r0, [r7, #12]
 80111f8:	f000 fb31 	bl	801185e <_ZSt23__copy_move_backward_a2ILb1EPfS0_ET1_T0_S2_S1_>
 80111fc:	4603      	mov	r3, r0
 80111fe:	4618      	mov	r0, r3
 8011200:	3710      	adds	r7, #16
 8011202:	46bd      	mov	sp, r7
 8011204:	bd80      	pop	{r7, pc}

08011206 <_ZSt13__copy_move_aILb0EN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEEPfET1_T0_SA_S9_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 8011206:	b5b0      	push	{r4, r5, r7, lr}
 8011208:	b084      	sub	sp, #16
 801120a:	af00      	add	r7, sp, #0
 801120c:	60f8      	str	r0, [r7, #12]
 801120e:	60b9      	str	r1, [r7, #8]
 8011210:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 8011212:	68f8      	ldr	r0, [r7, #12]
 8011214:	f7fe fb1f 	bl	800f856 <_ZSt12__niter_baseIPKfSt6vectorIfSaIfEEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>
 8011218:	4604      	mov	r4, r0
 801121a:	68b8      	ldr	r0, [r7, #8]
 801121c:	f7fe fb1b 	bl	800f856 <_ZSt12__niter_baseIPKfSt6vectorIfSaIfEEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>
 8011220:	4605      	mov	r5, r0
 8011222:	687b      	ldr	r3, [r7, #4]
 8011224:	4618      	mov	r0, r3
 8011226:	f7f2 fd7b 	bl	8003d20 <_ZSt12__niter_baseIPfET_S1_>
 801122a:	4603      	mov	r3, r0
 801122c:	461a      	mov	r2, r3
 801122e:	4629      	mov	r1, r5
 8011230:	4620      	mov	r0, r4
 8011232:	f7fe fb2c 	bl	800f88e <_ZSt14__copy_move_a1ILb0EPKfPfET1_T0_S4_S3_>
 8011236:	4602      	mov	r2, r0
 8011238:	1d3b      	adds	r3, r7, #4
 801123a:	4611      	mov	r1, r2
 801123c:	4618      	mov	r0, r3
 801123e:	f7fc ff87 	bl	800e150 <_ZSt12__niter_wrapIPfET_RKS1_S1_>
 8011242:	4603      	mov	r3, r0
    }
 8011244:	4618      	mov	r0, r3
 8011246:	3710      	adds	r7, #16
 8011248:	46bd      	mov	sp, r7
 801124a:	bdb0      	pop	{r4, r5, r7, pc}

0801124c <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPKfPfEET0_T_S7_S6_>:
	__copy_m(_II __first, _II __last, _OI __result)
 801124c:	b480      	push	{r7}
 801124e:	b087      	sub	sp, #28
 8011250:	af00      	add	r7, sp, #0
 8011252:	60f8      	str	r0, [r7, #12]
 8011254:	60b9      	str	r1, [r7, #8]
 8011256:	607a      	str	r2, [r7, #4]
	  for(_Distance __n = __last - __first; __n > 0; --__n)
 8011258:	68ba      	ldr	r2, [r7, #8]
 801125a:	68fb      	ldr	r3, [r7, #12]
 801125c:	1ad3      	subs	r3, r2, r3
 801125e:	109b      	asrs	r3, r3, #2
 8011260:	617b      	str	r3, [r7, #20]
 8011262:	e00c      	b.n	801127e <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPKfPfEET0_T_S7_S6_+0x32>
	      *__result = *__first;
 8011264:	68fb      	ldr	r3, [r7, #12]
 8011266:	681a      	ldr	r2, [r3, #0]
 8011268:	687b      	ldr	r3, [r7, #4]
 801126a:	601a      	str	r2, [r3, #0]
	      ++__first;
 801126c:	68fb      	ldr	r3, [r7, #12]
 801126e:	3304      	adds	r3, #4
 8011270:	60fb      	str	r3, [r7, #12]
	      ++__result;
 8011272:	687b      	ldr	r3, [r7, #4]
 8011274:	3304      	adds	r3, #4
 8011276:	607b      	str	r3, [r7, #4]
	  for(_Distance __n = __last - __first; __n > 0; --__n)
 8011278:	697b      	ldr	r3, [r7, #20]
 801127a:	3b01      	subs	r3, #1
 801127c:	617b      	str	r3, [r7, #20]
 801127e:	697b      	ldr	r3, [r7, #20]
 8011280:	2b00      	cmp	r3, #0
 8011282:	dcef      	bgt.n	8011264 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPKfPfEET0_T_S7_S6_+0x18>
	  return __result;
 8011284:	687b      	ldr	r3, [r7, #4]
	}
 8011286:	4618      	mov	r0, r3
 8011288:	371c      	adds	r7, #28
 801128a:	46bd      	mov	sp, r7
 801128c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011290:	4770      	bx	lr

08011292 <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPKcSt6vectorIcSaIcEEEEET_S8_>:
    __miter_base(_Iterator __it)
 8011292:	b480      	push	{r7}
 8011294:	b083      	sub	sp, #12
 8011296:	af00      	add	r7, sp, #0
 8011298:	6078      	str	r0, [r7, #4]
    { return __it; }
 801129a:	687b      	ldr	r3, [r7, #4]
 801129c:	4618      	mov	r0, r3
 801129e:	370c      	adds	r7, #12
 80112a0:	46bd      	mov	sp, r7
 80112a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112a6:	4770      	bx	lr

080112a8 <_ZSt13__copy_move_aILb0EN9__gnu_cxx17__normal_iteratorIPKcSt6vectorIcSaIcEEEEPcET1_T0_SA_S9_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 80112a8:	b5b0      	push	{r4, r5, r7, lr}
 80112aa:	b084      	sub	sp, #16
 80112ac:	af00      	add	r7, sp, #0
 80112ae:	60f8      	str	r0, [r7, #12]
 80112b0:	60b9      	str	r1, [r7, #8]
 80112b2:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 80112b4:	68f8      	ldr	r0, [r7, #12]
 80112b6:	f000 faef 	bl	8011898 <_ZSt12__niter_baseIPKcSt6vectorIcSaIcEEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>
 80112ba:	4604      	mov	r4, r0
 80112bc:	68b8      	ldr	r0, [r7, #8]
 80112be:	f000 faeb 	bl	8011898 <_ZSt12__niter_baseIPKcSt6vectorIcSaIcEEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>
 80112c2:	4605      	mov	r5, r0
 80112c4:	687b      	ldr	r3, [r7, #4]
 80112c6:	4618      	mov	r0, r3
 80112c8:	f7fc fda4 	bl	800de14 <_ZSt12__niter_baseIPcET_S1_>
 80112cc:	4603      	mov	r3, r0
 80112ce:	461a      	mov	r2, r3
 80112d0:	4629      	mov	r1, r5
 80112d2:	4620      	mov	r0, r4
 80112d4:	f7fc fda9 	bl	800de2a <_ZSt14__copy_move_a1ILb0EPKcPcET1_T0_S4_S3_>
 80112d8:	4602      	mov	r2, r0
 80112da:	1d3b      	adds	r3, r7, #4
 80112dc:	4611      	mov	r1, r2
 80112de:	4618      	mov	r0, r3
 80112e0:	f7fc fdb3 	bl	800de4a <_ZSt12__niter_wrapIPcET_RKS1_S1_>
 80112e4:	4603      	mov	r3, r0
    }
 80112e6:	4618      	mov	r0, r3
 80112e8:	3710      	adds	r7, #16
 80112ea:	46bd      	mov	sp, r7
 80112ec:	bdb0      	pop	{r4, r5, r7, pc}
	...

080112f0 <_ZNSt16allocator_traitsISaIN3jlb4EdgeEEE8max_sizeERKS2_>:
      max_size(const allocator_type& __a __attribute__((__unused__))) noexcept
 80112f0:	b480      	push	{r7}
 80112f2:	b083      	sub	sp, #12
 80112f4:	af00      	add	r7, sp, #0
 80112f6:	6078      	str	r0, [r7, #4]
	return size_t(-1) / sizeof(value_type);
 80112f8:	4b03      	ldr	r3, [pc, #12]	; (8011308 <_ZNSt16allocator_traitsISaIN3jlb4EdgeEEE8max_sizeERKS2_+0x18>)
      }
 80112fa:	4618      	mov	r0, r3
 80112fc:	370c      	adds	r7, #12
 80112fe:	46bd      	mov	sp, r7
 8011300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011304:	4770      	bx	lr
 8011306:	bf00      	nop
 8011308:	0aaaaaaa 	.word	0x0aaaaaaa

0801130c <_ZNSt6vectorIN3jlb4EdgeESaIS1_EE11_S_max_sizeERKS2_>:
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 801130c:	b580      	push	{r7, lr}
 801130e:	b084      	sub	sp, #16
 8011310:	af00      	add	r7, sp, #0
 8011312:	6078      	str	r0, [r7, #4]
	const size_t __diffmax
 8011314:	4b0a      	ldr	r3, [pc, #40]	; (8011340 <_ZNSt6vectorIN3jlb4EdgeESaIS1_EE11_S_max_sizeERKS2_+0x34>)
 8011316:	60fb      	str	r3, [r7, #12]
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 8011318:	6878      	ldr	r0, [r7, #4]
 801131a:	f7ff ffe9 	bl	80112f0 <_ZNSt16allocator_traitsISaIN3jlb4EdgeEEE8max_sizeERKS2_>
 801131e:	4603      	mov	r3, r0
 8011320:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 8011322:	f107 0208 	add.w	r2, r7, #8
 8011326:	f107 030c 	add.w	r3, r7, #12
 801132a:	4611      	mov	r1, r2
 801132c:	4618      	mov	r0, r3
 801132e:	f7f2 fcad 	bl	8003c8c <_ZSt3minIjERKT_S2_S2_>
 8011332:	4603      	mov	r3, r0
 8011334:	681b      	ldr	r3, [r3, #0]
      }
 8011336:	4618      	mov	r0, r3
 8011338:	3710      	adds	r7, #16
 801133a:	46bd      	mov	sp, r7
 801133c:	bd80      	pop	{r7, pc}
 801133e:	bf00      	nop
 8011340:	05555555 	.word	0x05555555

08011344 <_ZSt12__relocate_aIPN3jlb4EdgeES2_SaIS1_EET0_T_S5_S4_RT1_>:
    __relocate_a(_InputIterator __first, _InputIterator __last,
 8011344:	b5b0      	push	{r4, r5, r7, lr}
 8011346:	b084      	sub	sp, #16
 8011348:	af00      	add	r7, sp, #0
 801134a:	60f8      	str	r0, [r7, #12]
 801134c:	60b9      	str	r1, [r7, #8]
 801134e:	607a      	str	r2, [r7, #4]
 8011350:	603b      	str	r3, [r7, #0]
      return __relocate_a_1(std::__niter_base(__first),
 8011352:	68f8      	ldr	r0, [r7, #12]
 8011354:	f000 faec 	bl	8011930 <_ZSt12__niter_baseIPN3jlb4EdgeEET_S3_>
 8011358:	4604      	mov	r4, r0
 801135a:	68b8      	ldr	r0, [r7, #8]
 801135c:	f000 fae8 	bl	8011930 <_ZSt12__niter_baseIPN3jlb4EdgeEET_S3_>
 8011360:	4605      	mov	r5, r0
 8011362:	6878      	ldr	r0, [r7, #4]
 8011364:	f000 fae4 	bl	8011930 <_ZSt12__niter_baseIPN3jlb4EdgeEET_S3_>
 8011368:	4602      	mov	r2, r0
 801136a:	683b      	ldr	r3, [r7, #0]
 801136c:	4629      	mov	r1, r5
 801136e:	4620      	mov	r0, r4
 8011370:	f000 fae9 	bl	8011946 <_ZSt14__relocate_a_1IPN3jlb4EdgeES2_SaIS1_EET0_T_S5_S4_RT1_>
 8011374:	4603      	mov	r3, r0
    }
 8011376:	4618      	mov	r0, r3
 8011378:	3710      	adds	r7, #16
 801137a:	46bd      	mov	sp, r7
 801137c:	bdb0      	pop	{r4, r5, r7, pc}

0801137e <_ZNSt16allocator_traitsISaIN3jlb4EdgeEEE37select_on_container_copy_constructionERKS2_>:
      select_on_container_copy_construction(const allocator_type& __rhs)
 801137e:	b580      	push	{r7, lr}
 8011380:	b082      	sub	sp, #8
 8011382:	af00      	add	r7, sp, #0
 8011384:	6078      	str	r0, [r7, #4]
 8011386:	6039      	str	r1, [r7, #0]
      { return __rhs; }
 8011388:	6839      	ldr	r1, [r7, #0]
 801138a:	6878      	ldr	r0, [r7, #4]
 801138c:	f000 fb01 	bl	8011992 <_ZNSaIN3jlb4EdgeEEC1ERKS1_>
 8011390:	6878      	ldr	r0, [r7, #4]
 8011392:	3708      	adds	r7, #8
 8011394:	46bd      	mov	sp, r7
 8011396:	bd80      	pop	{r7, pc}

08011398 <_ZNSt12_Vector_baseIN3jlb4EdgeESaIS1_EE12_Vector_implC1ERKS2_>:
	_Vector_impl(_Tp_alloc_type const& __a) _GLIBCXX_NOEXCEPT
 8011398:	b580      	push	{r7, lr}
 801139a:	b082      	sub	sp, #8
 801139c:	af00      	add	r7, sp, #0
 801139e:	6078      	str	r0, [r7, #4]
 80113a0:	6039      	str	r1, [r7, #0]
	: _Tp_alloc_type(__a)
 80113a2:	6839      	ldr	r1, [r7, #0]
 80113a4:	6878      	ldr	r0, [r7, #4]
 80113a6:	f000 faf4 	bl	8011992 <_ZNSaIN3jlb4EdgeEEC1ERKS1_>
 80113aa:	687b      	ldr	r3, [r7, #4]
 80113ac:	4618      	mov	r0, r3
 80113ae:	f7fb fffc 	bl	800d3aa <_ZNSt12_Vector_baseIN3jlb4EdgeESaIS1_EE17_Vector_impl_dataC1Ev>
	{ }
 80113b2:	687b      	ldr	r3, [r7, #4]
 80113b4:	4618      	mov	r0, r3
 80113b6:	3708      	adds	r7, #8
 80113b8:	46bd      	mov	sp, r7
 80113ba:	bd80      	pop	{r7, pc}

080113bc <_ZNSt12_Vector_baseIN3jlb4EdgeESaIS1_EE17_M_create_storageEj>:
      _M_create_storage(size_t __n)
 80113bc:	b580      	push	{r7, lr}
 80113be:	b082      	sub	sp, #8
 80113c0:	af00      	add	r7, sp, #0
 80113c2:	6078      	str	r0, [r7, #4]
 80113c4:	6039      	str	r1, [r7, #0]
	this->_M_impl._M_start = this->_M_allocate(__n);
 80113c6:	6839      	ldr	r1, [r7, #0]
 80113c8:	6878      	ldr	r0, [r7, #4]
 80113ca:	f7fe fbcf 	bl	800fb6c <_ZNSt12_Vector_baseIN3jlb4EdgeESaIS1_EE11_M_allocateEj>
 80113ce:	4602      	mov	r2, r0
 80113d0:	687b      	ldr	r3, [r7, #4]
 80113d2:	601a      	str	r2, [r3, #0]
	this->_M_impl._M_finish = this->_M_impl._M_start;
 80113d4:	687b      	ldr	r3, [r7, #4]
 80113d6:	681a      	ldr	r2, [r3, #0]
 80113d8:	687b      	ldr	r3, [r7, #4]
 80113da:	605a      	str	r2, [r3, #4]
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 80113dc:	687b      	ldr	r3, [r7, #4]
 80113de:	6819      	ldr	r1, [r3, #0]
 80113e0:	683a      	ldr	r2, [r7, #0]
 80113e2:	4613      	mov	r3, r2
 80113e4:	005b      	lsls	r3, r3, #1
 80113e6:	4413      	add	r3, r2
 80113e8:	00db      	lsls	r3, r3, #3
 80113ea:	18ca      	adds	r2, r1, r3
 80113ec:	687b      	ldr	r3, [r7, #4]
 80113ee:	609a      	str	r2, [r3, #8]
      }
 80113f0:	bf00      	nop
 80113f2:	3708      	adds	r7, #8
 80113f4:	46bd      	mov	sp, r7
 80113f6:	bd80      	pop	{r7, pc}

080113f8 <_ZN9__gnu_cxx17__normal_iteratorIPKN3jlb4EdgeESt6vectorIS2_SaIS2_EEEC1ERKS4_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 80113f8:	b480      	push	{r7}
 80113fa:	b083      	sub	sp, #12
 80113fc:	af00      	add	r7, sp, #0
 80113fe:	6078      	str	r0, [r7, #4]
 8011400:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 8011402:	683b      	ldr	r3, [r7, #0]
 8011404:	681a      	ldr	r2, [r3, #0]
 8011406:	687b      	ldr	r3, [r7, #4]
 8011408:	601a      	str	r2, [r3, #0]
 801140a:	687b      	ldr	r3, [r7, #4]
 801140c:	4618      	mov	r0, r3
 801140e:	370c      	adds	r7, #12
 8011410:	46bd      	mov	sp, r7
 8011412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011416:	4770      	bx	lr

08011418 <_ZSt18uninitialized_copyIN9__gnu_cxx17__normal_iteratorIPKN3jlb4EdgeESt6vectorIS3_SaIS3_EEEEPS3_ET0_T_SC_SB_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 8011418:	b580      	push	{r7, lr}
 801141a:	b086      	sub	sp, #24
 801141c:	af00      	add	r7, sp, #0
 801141e:	60f8      	str	r0, [r7, #12]
 8011420:	60b9      	str	r1, [r7, #8]
 8011422:	607a      	str	r2, [r7, #4]
      const bool __assignable = is_assignable<_RefType2, _RefType1>::value;
 8011424:	2301      	movs	r3, #1
 8011426:	75fb      	strb	r3, [r7, #23]
	__uninit_copy(__first, __last, __result);
 8011428:	687a      	ldr	r2, [r7, #4]
 801142a:	68b9      	ldr	r1, [r7, #8]
 801142c:	68f8      	ldr	r0, [r7, #12]
 801142e:	f000 fada 	bl	80119e6 <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIN9__gnu_cxx17__normal_iteratorIPKN3jlb4EdgeESt6vectorIS5_SaIS5_EEEEPS5_EET0_T_SE_SD_>
 8011432:	4603      	mov	r3, r0
    }
 8011434:	4618      	mov	r0, r3
 8011436:	3718      	adds	r7, #24
 8011438:	46bd      	mov	sp, r7
 801143a:	bd80      	pop	{r7, pc}

0801143c <_ZNSt16allocator_traitsISaIN3jlb4NodeEEE8max_sizeERKS2_>:
      max_size(const allocator_type& __a __attribute__((__unused__))) noexcept
 801143c:	b480      	push	{r7}
 801143e:	b083      	sub	sp, #12
 8011440:	af00      	add	r7, sp, #0
 8011442:	6078      	str	r0, [r7, #4]
	return size_t(-1) / sizeof(value_type);
 8011444:	4b03      	ldr	r3, [pc, #12]	; (8011454 <_ZNSt16allocator_traitsISaIN3jlb4NodeEEE8max_sizeERKS2_+0x18>)
      }
 8011446:	4618      	mov	r0, r3
 8011448:	370c      	adds	r7, #12
 801144a:	46bd      	mov	sp, r7
 801144c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011450:	4770      	bx	lr
 8011452:	bf00      	nop
 8011454:	0aaaaaaa 	.word	0x0aaaaaaa

08011458 <_ZNSt6vectorIN3jlb4NodeESaIS1_EE11_S_max_sizeERKS2_>:
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 8011458:	b580      	push	{r7, lr}
 801145a:	b084      	sub	sp, #16
 801145c:	af00      	add	r7, sp, #0
 801145e:	6078      	str	r0, [r7, #4]
	const size_t __diffmax
 8011460:	4b0a      	ldr	r3, [pc, #40]	; (801148c <_ZNSt6vectorIN3jlb4NodeESaIS1_EE11_S_max_sizeERKS2_+0x34>)
 8011462:	60fb      	str	r3, [r7, #12]
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 8011464:	6878      	ldr	r0, [r7, #4]
 8011466:	f7ff ffe9 	bl	801143c <_ZNSt16allocator_traitsISaIN3jlb4NodeEEE8max_sizeERKS2_>
 801146a:	4603      	mov	r3, r0
 801146c:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 801146e:	f107 0208 	add.w	r2, r7, #8
 8011472:	f107 030c 	add.w	r3, r7, #12
 8011476:	4611      	mov	r1, r2
 8011478:	4618      	mov	r0, r3
 801147a:	f7f2 fc07 	bl	8003c8c <_ZSt3minIjERKT_S2_S2_>
 801147e:	4603      	mov	r3, r0
 8011480:	681b      	ldr	r3, [r3, #0]
      }
 8011482:	4618      	mov	r0, r3
 8011484:	3710      	adds	r7, #16
 8011486:	46bd      	mov	sp, r7
 8011488:	bd80      	pop	{r7, pc}
 801148a:	bf00      	nop
 801148c:	05555555 	.word	0x05555555

08011490 <_ZNKSt12_Vector_baseIN3jlb4NodeESaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 8011490:	b480      	push	{r7}
 8011492:	b083      	sub	sp, #12
 8011494:	af00      	add	r7, sp, #0
 8011496:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8011498:	687b      	ldr	r3, [r7, #4]
 801149a:	4618      	mov	r0, r3
 801149c:	370c      	adds	r7, #12
 801149e:	46bd      	mov	sp, r7
 80114a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114a4:	4770      	bx	lr

080114a6 <_ZSt18uninitialized_copyIPKN3jlb4NodeEPS1_ET0_T_S6_S5_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 80114a6:	b580      	push	{r7, lr}
 80114a8:	b086      	sub	sp, #24
 80114aa:	af00      	add	r7, sp, #0
 80114ac:	60f8      	str	r0, [r7, #12]
 80114ae:	60b9      	str	r1, [r7, #8]
 80114b0:	607a      	str	r2, [r7, #4]
      const bool __assignable = is_assignable<_RefType2, _RefType1>::value;
 80114b2:	2301      	movs	r3, #1
 80114b4:	75fb      	strb	r3, [r7, #23]
	__uninit_copy(__first, __last, __result);
 80114b6:	687a      	ldr	r2, [r7, #4]
 80114b8:	68b9      	ldr	r1, [r7, #8]
 80114ba:	68f8      	ldr	r0, [r7, #12]
 80114bc:	f000 fb04 	bl	8011ac8 <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIPKN3jlb4NodeEPS3_EET0_T_S8_S7_>
 80114c0:	4603      	mov	r3, r0
    }
 80114c2:	4618      	mov	r0, r3
 80114c4:	3718      	adds	r7, #24
 80114c6:	46bd      	mov	sp, r7
 80114c8:	bd80      	pop	{r7, pc}

080114ca <_ZNK9__gnu_cxx13new_allocatorIPfE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 80114ca:	b480      	push	{r7}
 80114cc:	b083      	sub	sp, #12
 80114ce:	af00      	add	r7, sp, #0
 80114d0:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 80114d2:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
      }
 80114d6:	4618      	mov	r0, r3
 80114d8:	370c      	adds	r7, #12
 80114da:	46bd      	mov	sp, r7
 80114dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114e0:	4770      	bx	lr

080114e2 <_ZN9__gnu_cxx13new_allocatorIPfE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 80114e2:	b580      	push	{r7, lr}
 80114e4:	b084      	sub	sp, #16
 80114e6:	af00      	add	r7, sp, #0
 80114e8:	60f8      	str	r0, [r7, #12]
 80114ea:	60b9      	str	r1, [r7, #8]
 80114ec:	607a      	str	r2, [r7, #4]
	if (__builtin_expect(__n > this->_M_max_size(), false))
 80114ee:	68f8      	ldr	r0, [r7, #12]
 80114f0:	f7ff ffeb 	bl	80114ca <_ZNK9__gnu_cxx13new_allocatorIPfE11_M_max_sizeEv>
 80114f4:	4602      	mov	r2, r0
 80114f6:	68bb      	ldr	r3, [r7, #8]
 80114f8:	4293      	cmp	r3, r2
 80114fa:	bf8c      	ite	hi
 80114fc:	2301      	movhi	r3, #1
 80114fe:	2300      	movls	r3, #0
 8011500:	b2db      	uxtb	r3, r3
 8011502:	2b00      	cmp	r3, #0
 8011504:	bf14      	ite	ne
 8011506:	2301      	movne	r3, #1
 8011508:	2300      	moveq	r3, #0
 801150a:	b2db      	uxtb	r3, r3
 801150c:	2b00      	cmp	r3, #0
 801150e:	d007      	beq.n	8011520 <_ZN9__gnu_cxx13new_allocatorIPfE8allocateEjPKv+0x3e>
	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
 8011510:	68bb      	ldr	r3, [r7, #8]
 8011512:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8011516:	d301      	bcc.n	801151c <_ZN9__gnu_cxx13new_allocatorIPfE8allocateEjPKv+0x3a>
	      std::__throw_bad_array_new_length();
 8011518:	f00f fe4b 	bl	80211b2 <_ZSt28__throw_bad_array_new_lengthv>
	    std::__throw_bad_alloc();
 801151c:	f00f fe46 	bl	80211ac <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8011520:	68bb      	ldr	r3, [r7, #8]
 8011522:	009b      	lsls	r3, r3, #2
 8011524:	4618      	mov	r0, r3
 8011526:	f00f fe2d 	bl	8021184 <_Znwj>
 801152a:	4603      	mov	r3, r0
 801152c:	bf00      	nop
      }
 801152e:	4618      	mov	r0, r3
 8011530:	3710      	adds	r7, #16
 8011532:	46bd      	mov	sp, r7
 8011534:	bd80      	pop	{r7, pc}

08011536 <_ZSt12__niter_baseIPPfET_S2_>:
    __niter_base(_Iterator __it)
 8011536:	b480      	push	{r7}
 8011538:	b083      	sub	sp, #12
 801153a:	af00      	add	r7, sp, #0
 801153c:	6078      	str	r0, [r7, #4]
    { return __it; }
 801153e:	687b      	ldr	r3, [r7, #4]
 8011540:	4618      	mov	r0, r3
 8011542:	370c      	adds	r7, #12
 8011544:	46bd      	mov	sp, r7
 8011546:	f85d 7b04 	ldr.w	r7, [sp], #4
 801154a:	4770      	bx	lr

0801154c <_ZSt14__copy_move_a1ILb0EPPfS1_ET1_T0_S3_S2_>:
    __copy_move_a1(_II __first, _II __last, _OI __result)
 801154c:	b580      	push	{r7, lr}
 801154e:	b084      	sub	sp, #16
 8011550:	af00      	add	r7, sp, #0
 8011552:	60f8      	str	r0, [r7, #12]
 8011554:	60b9      	str	r1, [r7, #8]
 8011556:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_a2<_IsMove>(__first, __last, __result); }
 8011558:	687a      	ldr	r2, [r7, #4]
 801155a:	68b9      	ldr	r1, [r7, #8]
 801155c:	68f8      	ldr	r0, [r7, #12]
 801155e:	f000 fad3 	bl	8011b08 <_ZSt14__copy_move_a2ILb0EPPfS1_ET1_T0_S3_S2_>
 8011562:	4603      	mov	r3, r0
 8011564:	4618      	mov	r0, r3
 8011566:	3710      	adds	r7, #16
 8011568:	46bd      	mov	sp, r7
 801156a:	bd80      	pop	{r7, pc}

0801156c <_ZSt12__niter_wrapIPPfET_RKS2_S2_>:
    __niter_wrap(const _Iterator&, _Iterator __res)
 801156c:	b480      	push	{r7}
 801156e:	b083      	sub	sp, #12
 8011570:	af00      	add	r7, sp, #0
 8011572:	6078      	str	r0, [r7, #4]
 8011574:	6039      	str	r1, [r7, #0]
    { return __res; }
 8011576:	683b      	ldr	r3, [r7, #0]
 8011578:	4618      	mov	r0, r3
 801157a:	370c      	adds	r7, #12
 801157c:	46bd      	mov	sp, r7
 801157e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011582:	4770      	bx	lr

08011584 <_ZSt23__copy_move_backward_a1ILb0EPPfS1_ET1_T0_S3_S2_>:
    __copy_move_backward_a1(_BI1 __first, _BI1 __last, _BI2 __result)
 8011584:	b580      	push	{r7, lr}
 8011586:	b084      	sub	sp, #16
 8011588:	af00      	add	r7, sp, #0
 801158a:	60f8      	str	r0, [r7, #12]
 801158c:	60b9      	str	r1, [r7, #8]
 801158e:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_backward_a2<_IsMove>(__first, __last, __result); }
 8011590:	687a      	ldr	r2, [r7, #4]
 8011592:	68b9      	ldr	r1, [r7, #8]
 8011594:	68f8      	ldr	r0, [r7, #12]
 8011596:	f000 fad4 	bl	8011b42 <_ZSt23__copy_move_backward_a2ILb0EPPfS1_ET1_T0_S3_S2_>
 801159a:	4603      	mov	r3, r0
 801159c:	4618      	mov	r0, r3
 801159e:	3710      	adds	r7, #16
 80115a0:	46bd      	mov	sp, r7
 80115a2:	bd80      	pop	{r7, pc}

080115a4 <_ZSt12__relocate_aIPcS0_SaIcEET0_T_S3_S2_RT1_>:
    __relocate_a(_InputIterator __first, _InputIterator __last,
 80115a4:	b5b0      	push	{r4, r5, r7, lr}
 80115a6:	b084      	sub	sp, #16
 80115a8:	af00      	add	r7, sp, #0
 80115aa:	60f8      	str	r0, [r7, #12]
 80115ac:	60b9      	str	r1, [r7, #8]
 80115ae:	607a      	str	r2, [r7, #4]
 80115b0:	603b      	str	r3, [r7, #0]
      return __relocate_a_1(std::__niter_base(__first),
 80115b2:	68f8      	ldr	r0, [r7, #12]
 80115b4:	f7fc fc2e 	bl	800de14 <_ZSt12__niter_baseIPcET_S1_>
 80115b8:	4604      	mov	r4, r0
 80115ba:	68b8      	ldr	r0, [r7, #8]
 80115bc:	f7fc fc2a 	bl	800de14 <_ZSt12__niter_baseIPcET_S1_>
 80115c0:	4605      	mov	r5, r0
 80115c2:	6878      	ldr	r0, [r7, #4]
 80115c4:	f7fc fc26 	bl	800de14 <_ZSt12__niter_baseIPcET_S1_>
 80115c8:	4602      	mov	r2, r0
 80115ca:	683b      	ldr	r3, [r7, #0]
 80115cc:	4629      	mov	r1, r5
 80115ce:	4620      	mov	r0, r4
 80115d0:	f000 fad4 	bl	8011b7c <_ZSt14__relocate_a_1IccENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS2_E4typeES4_S4_S4_RSaIT0_E>
 80115d4:	4603      	mov	r3, r0
    }
 80115d6:	4618      	mov	r0, r3
 80115d8:	3710      	adds	r7, #16
 80115da:	46bd      	mov	sp, r7
 80115dc:	bdb0      	pop	{r4, r5, r7, pc}

080115de <_ZSt4moveIRPcEONSt16remove_referenceIT_E4typeEOS3_>:
    move(_Tp&& __t) noexcept
 80115de:	b480      	push	{r7}
 80115e0:	b083      	sub	sp, #12
 80115e2:	af00      	add	r7, sp, #0
 80115e4:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 80115e6:	687b      	ldr	r3, [r7, #4]
 80115e8:	4618      	mov	r0, r3
 80115ea:	370c      	adds	r7, #12
 80115ec:	46bd      	mov	sp, r7
 80115ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115f2:	4770      	bx	lr

080115f4 <_ZNSt13move_iteratorIPcEC1ES0_>:
      move_iterator(iterator_type __i)
 80115f4:	b580      	push	{r7, lr}
 80115f6:	b082      	sub	sp, #8
 80115f8:	af00      	add	r7, sp, #0
 80115fa:	6078      	str	r0, [r7, #4]
 80115fc:	6039      	str	r1, [r7, #0]
      : _M_current(std::move(__i)) { }
 80115fe:	463b      	mov	r3, r7
 8011600:	4618      	mov	r0, r3
 8011602:	f7ff ffec 	bl	80115de <_ZSt4moveIRPcEONSt16remove_referenceIT_E4typeEOS3_>
 8011606:	4603      	mov	r3, r0
 8011608:	681a      	ldr	r2, [r3, #0]
 801160a:	687b      	ldr	r3, [r7, #4]
 801160c:	601a      	str	r2, [r3, #0]
 801160e:	687b      	ldr	r3, [r7, #4]
 8011610:	4618      	mov	r0, r3
 8011612:	3708      	adds	r7, #8
 8011614:	46bd      	mov	sp, r7
 8011616:	bd80      	pop	{r7, pc}

08011618 <_ZSt18uninitialized_copyISt13move_iteratorIPcES1_ET0_T_S4_S3_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 8011618:	b580      	push	{r7, lr}
 801161a:	b086      	sub	sp, #24
 801161c:	af00      	add	r7, sp, #0
 801161e:	60f8      	str	r0, [r7, #12]
 8011620:	60b9      	str	r1, [r7, #8]
 8011622:	607a      	str	r2, [r7, #4]
      const bool __assignable = is_assignable<_RefType2, _RefType1>::value;
 8011624:	2301      	movs	r3, #1
 8011626:	75fb      	strb	r3, [r7, #23]
	__uninit_copy(__first, __last, __result);
 8011628:	687a      	ldr	r2, [r7, #4]
 801162a:	68b9      	ldr	r1, [r7, #8]
 801162c:	68f8      	ldr	r0, [r7, #12]
 801162e:	f000 fac0 	bl	8011bb2 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyISt13move_iteratorIPcES3_EET0_T_S6_S5_>
 8011632:	4603      	mov	r3, r0
    }
 8011634:	4618      	mov	r0, r3
 8011636:	3718      	adds	r7, #24
 8011638:	46bd      	mov	sp, r7
 801163a:	bd80      	pop	{r7, pc}

0801163c <_ZSt23__copy_move_backward_a2ILb1EPcS0_ET1_T0_S2_S1_>:
    __copy_move_backward_a2(_BI1 __first, _BI1 __last, _BI2 __result)
 801163c:	b580      	push	{r7, lr}
 801163e:	b084      	sub	sp, #16
 8011640:	af00      	add	r7, sp, #0
 8011642:	60f8      	str	r0, [r7, #12]
 8011644:	60b9      	str	r1, [r7, #8]
 8011646:	607a      	str	r2, [r7, #4]
      if (std::is_constant_evaluated())
 8011648:	f7f1 fa60 	bl	8002b0c <_ZSt21is_constant_evaluatedv>
 801164c:	4603      	mov	r3, r0
 801164e:	2b00      	cmp	r3, #0
 8011650:	d006      	beq.n	8011660 <_ZSt23__copy_move_backward_a2ILb1EPcS0_ET1_T0_S2_S1_+0x24>
	  __copy_move_b(__first, __last, __result);
 8011652:	687a      	ldr	r2, [r7, #4]
 8011654:	68b9      	ldr	r1, [r7, #8]
 8011656:	68f8      	ldr	r0, [r7, #12]
 8011658:	f000 fabb 	bl	8011bd2 <_ZNSt20__copy_move_backwardILb1ELb0ESt26random_access_iterator_tagE13__copy_move_bIPcS3_EET0_T_S5_S4_>
 801165c:	4603      	mov	r3, r0
 801165e:	e006      	b.n	801166e <_ZSt23__copy_move_backward_a2ILb1EPcS0_ET1_T0_S2_S1_+0x32>
				       _Category>::__copy_move_b(__first,
 8011660:	687a      	ldr	r2, [r7, #4]
 8011662:	68b9      	ldr	r1, [r7, #8]
 8011664:	68f8      	ldr	r0, [r7, #12]
 8011666:	f000 fad7 	bl	8011c18 <_ZNSt20__copy_move_backwardILb1ELb1ESt26random_access_iterator_tagE13__copy_move_bIcEEPT_PKS3_S6_S4_>
 801166a:	4603      	mov	r3, r0
								 __result);
 801166c:	bf00      	nop
    }
 801166e:	4618      	mov	r0, r3
 8011670:	3710      	adds	r7, #16
 8011672:	46bd      	mov	sp, r7
 8011674:	bd80      	pop	{r7, pc}

08011676 <_ZSt14__copy_move_a2ILb0EPcS0_ET1_T0_S2_S1_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 8011676:	b580      	push	{r7, lr}
 8011678:	b084      	sub	sp, #16
 801167a:	af00      	add	r7, sp, #0
 801167c:	60f8      	str	r0, [r7, #12]
 801167e:	60b9      	str	r1, [r7, #8]
 8011680:	607a      	str	r2, [r7, #4]
      if (std::is_constant_evaluated())
 8011682:	f7f1 fa43 	bl	8002b0c <_ZSt21is_constant_evaluatedv>
 8011686:	4603      	mov	r3, r0
 8011688:	2b00      	cmp	r3, #0
 801168a:	d006      	beq.n	801169a <_ZSt14__copy_move_a2ILb0EPcS0_ET1_T0_S2_S1_+0x24>
	  __copy_m(__first, __last, __result);
 801168c:	687a      	ldr	r2, [r7, #4]
 801168e:	68b9      	ldr	r1, [r7, #8]
 8011690:	68f8      	ldr	r0, [r7, #12]
 8011692:	f000 fadf 	bl	8011c54 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPcS3_EET0_T_S5_S4_>
 8011696:	4603      	mov	r3, r0
 8011698:	e006      	b.n	80116a8 <_ZSt14__copy_move_a2ILb0EPcS0_ET1_T0_S2_S1_+0x32>
			      _Category>::__copy_m(__first, __last, __result);
 801169a:	687a      	ldr	r2, [r7, #4]
 801169c:	68b9      	ldr	r1, [r7, #8]
 801169e:	68f8      	ldr	r0, [r7, #12]
 80116a0:	f7fe fed5 	bl	801044e <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIcEEPT_PKS3_S6_S4_>
 80116a4:	4603      	mov	r3, r0
 80116a6:	bf00      	nop
    }
 80116a8:	4618      	mov	r0, r3
 80116aa:	3710      	adds	r7, #16
 80116ac:	46bd      	mov	sp, r7
 80116ae:	bd80      	pop	{r7, pc}

080116b0 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIPcS2_EET0_T_S4_S3_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 80116b0:	b580      	push	{r7, lr}
 80116b2:	b084      	sub	sp, #16
 80116b4:	af00      	add	r7, sp, #0
 80116b6:	60f8      	str	r0, [r7, #12]
 80116b8:	60b9      	str	r1, [r7, #8]
 80116ba:	607a      	str	r2, [r7, #4]
        { return std::copy(__first, __last, __result); }
 80116bc:	687a      	ldr	r2, [r7, #4]
 80116be:	68b9      	ldr	r1, [r7, #8]
 80116c0:	68f8      	ldr	r0, [r7, #12]
 80116c2:	f000 fae9 	bl	8011c98 <_ZSt4copyIPcS0_ET0_T_S2_S1_>
 80116c6:	4603      	mov	r3, r0
 80116c8:	4618      	mov	r0, r3
 80116ca:	3710      	adds	r7, #16
 80116cc:	46bd      	mov	sp, r7
 80116ce:	bd80      	pop	{r7, pc}

080116d0 <_ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEifNS0_5__ops15_Iter_less_iterEEvT_T0_SA_T1_T2_>:
    __adjust_heap(_RandomAccessIterator __first, _Distance __holeIndex,
 80116d0:	b590      	push	{r4, r7, lr}
 80116d2:	b08f      	sub	sp, #60	; 0x3c
 80116d4:	af00      	add	r7, sp, #0
 80116d6:	6178      	str	r0, [r7, #20]
 80116d8:	6139      	str	r1, [r7, #16]
 80116da:	60fa      	str	r2, [r7, #12]
 80116dc:	ed87 0a02 	vstr	s0, [r7, #8]
 80116e0:	713b      	strb	r3, [r7, #4]
      const _Distance __topIndex = __holeIndex;
 80116e2:	693b      	ldr	r3, [r7, #16]
 80116e4:	633b      	str	r3, [r7, #48]	; 0x30
      _Distance __secondChild = __holeIndex;
 80116e6:	693b      	ldr	r3, [r7, #16]
 80116e8:	637b      	str	r3, [r7, #52]	; 0x34
      while (__secondChild < (__len - 1) / 2)
 80116ea:	e042      	b.n	8011772 <_ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEifNS0_5__ops15_Iter_less_iterEEvT_T0_SA_T1_T2_+0xa2>
	  __secondChild = 2 * (__secondChild + 1);
 80116ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80116ee:	3301      	adds	r3, #1
 80116f0:	005b      	lsls	r3, r3, #1
 80116f2:	637b      	str	r3, [r7, #52]	; 0x34
	  if (__comp(__first + __secondChild,
 80116f4:	f107 0314 	add.w	r3, r7, #20
 80116f8:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80116fa:	4618      	mov	r0, r3
 80116fc:	f7fd fe0d 	bl	800f31a <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEplEi>
 8011700:	4604      	mov	r4, r0
 8011702:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011704:	1e5a      	subs	r2, r3, #1
 8011706:	f107 0314 	add.w	r3, r7, #20
 801170a:	4611      	mov	r1, r2
 801170c:	4618      	mov	r0, r3
 801170e:	f7fd fe04 	bl	800f31a <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEplEi>
 8011712:	4602      	mov	r2, r0
 8011714:	1d3b      	adds	r3, r7, #4
 8011716:	4621      	mov	r1, r4
 8011718:	4618      	mov	r0, r3
 801171a:	f7fd fe32 	bl	800f382 <_ZNK9__gnu_cxx5__ops15_Iter_less_iterclINS_17__normal_iteratorIPfSt6vectorIfSaIfEEEES8_EEbT_T0_>
 801171e:	4603      	mov	r3, r0
 8011720:	2b00      	cmp	r3, #0
 8011722:	d002      	beq.n	801172a <_ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEifNS0_5__ops15_Iter_less_iterEEvT_T0_SA_T1_T2_+0x5a>
	    __secondChild--;
 8011724:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011726:	3b01      	subs	r3, #1
 8011728:	637b      	str	r3, [r7, #52]	; 0x34
	  *(__first + __holeIndex) = _GLIBCXX_MOVE(*(__first + __secondChild));
 801172a:	f107 0314 	add.w	r3, r7, #20
 801172e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8011730:	4618      	mov	r0, r3
 8011732:	f7fd fdf2 	bl	800f31a <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEplEi>
 8011736:	4603      	mov	r3, r0
 8011738:	623b      	str	r3, [r7, #32]
 801173a:	f107 0320 	add.w	r3, r7, #32
 801173e:	4618      	mov	r0, r3
 8011740:	f7fd fe13 	bl	800f36a <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEdeEv>
 8011744:	4603      	mov	r3, r0
 8011746:	4618      	mov	r0, r3
 8011748:	f7fb fafc 	bl	800cd44 <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>
 801174c:	4603      	mov	r3, r0
 801174e:	681c      	ldr	r4, [r3, #0]
 8011750:	f107 0314 	add.w	r3, r7, #20
 8011754:	6939      	ldr	r1, [r7, #16]
 8011756:	4618      	mov	r0, r3
 8011758:	f7fd fddf 	bl	800f31a <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEplEi>
 801175c:	4603      	mov	r3, r0
 801175e:	627b      	str	r3, [r7, #36]	; 0x24
 8011760:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8011764:	4618      	mov	r0, r3
 8011766:	f7fd fe00 	bl	800f36a <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEdeEv>
 801176a:	4603      	mov	r3, r0
 801176c:	601c      	str	r4, [r3, #0]
	  __holeIndex = __secondChild;
 801176e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011770:	613b      	str	r3, [r7, #16]
      while (__secondChild < (__len - 1) / 2)
 8011772:	68fb      	ldr	r3, [r7, #12]
 8011774:	3b01      	subs	r3, #1
 8011776:	0fda      	lsrs	r2, r3, #31
 8011778:	4413      	add	r3, r2
 801177a:	105b      	asrs	r3, r3, #1
 801177c:	461a      	mov	r2, r3
 801177e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011780:	4293      	cmp	r3, r2
 8011782:	dbb3      	blt.n	80116ec <_ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEifNS0_5__ops15_Iter_less_iterEEvT_T0_SA_T1_T2_+0x1c>
      if ((__len & 1) == 0 && __secondChild == (__len - 2) / 2)
 8011784:	68fb      	ldr	r3, [r7, #12]
 8011786:	f003 0301 	and.w	r3, r3, #1
 801178a:	2b00      	cmp	r3, #0
 801178c:	d133      	bne.n	80117f6 <_ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEifNS0_5__ops15_Iter_less_iterEEvT_T0_SA_T1_T2_+0x126>
 801178e:	68fb      	ldr	r3, [r7, #12]
 8011790:	3b02      	subs	r3, #2
 8011792:	0fda      	lsrs	r2, r3, #31
 8011794:	4413      	add	r3, r2
 8011796:	105b      	asrs	r3, r3, #1
 8011798:	461a      	mov	r2, r3
 801179a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801179c:	4293      	cmp	r3, r2
 801179e:	d12a      	bne.n	80117f6 <_ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEifNS0_5__ops15_Iter_less_iterEEvT_T0_SA_T1_T2_+0x126>
	  __secondChild = 2 * (__secondChild + 1);
 80117a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80117a2:	3301      	adds	r3, #1
 80117a4:	005b      	lsls	r3, r3, #1
 80117a6:	637b      	str	r3, [r7, #52]	; 0x34
	  *(__first + __holeIndex) = _GLIBCXX_MOVE(*(__first
 80117a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80117aa:	1e5a      	subs	r2, r3, #1
 80117ac:	f107 0314 	add.w	r3, r7, #20
 80117b0:	4611      	mov	r1, r2
 80117b2:	4618      	mov	r0, r3
 80117b4:	f7fd fdb1 	bl	800f31a <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEplEi>
 80117b8:	4603      	mov	r3, r0
 80117ba:	62bb      	str	r3, [r7, #40]	; 0x28
 80117bc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80117c0:	4618      	mov	r0, r3
 80117c2:	f7fd fdd2 	bl	800f36a <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEdeEv>
 80117c6:	4603      	mov	r3, r0
 80117c8:	4618      	mov	r0, r3
 80117ca:	f7fb fabb 	bl	800cd44 <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>
 80117ce:	4603      	mov	r3, r0
 80117d0:	681c      	ldr	r4, [r3, #0]
 80117d2:	f107 0314 	add.w	r3, r7, #20
 80117d6:	6939      	ldr	r1, [r7, #16]
 80117d8:	4618      	mov	r0, r3
 80117da:	f7fd fd9e 	bl	800f31a <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEplEi>
 80117de:	4603      	mov	r3, r0
 80117e0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80117e2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80117e6:	4618      	mov	r0, r3
 80117e8:	f7fd fdbf 	bl	800f36a <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEdeEv>
 80117ec:	4603      	mov	r3, r0
 80117ee:	601c      	str	r4, [r3, #0]
	  __holeIndex = __secondChild - 1;
 80117f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80117f2:	3b01      	subs	r3, #1
 80117f4:	613b      	str	r3, [r7, #16]
		       _GLIBCXX_MOVE(__value), __cmp);
 80117f6:	f107 0308 	add.w	r3, r7, #8
 80117fa:	4618      	mov	r0, r3
 80117fc:	f7fb faa2 	bl	800cd44 <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>
 8011800:	4603      	mov	r3, r0
      std::__push_heap(__first, __holeIndex, __topIndex,
 8011802:	edd3 7a00 	vldr	s15, [r3]
 8011806:	f107 031c 	add.w	r3, r7, #28
 801180a:	eeb0 0a67 	vmov.f32	s0, s15
 801180e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011810:	6939      	ldr	r1, [r7, #16]
 8011812:	6978      	ldr	r0, [r7, #20]
 8011814:	f000 fa75 	bl	8011d02 <_ZSt11__push_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEifNS0_5__ops14_Iter_less_valEEvT_T0_SA_T1_RT2_>
    }
 8011818:	bf00      	nop
 801181a:	373c      	adds	r7, #60	; 0x3c
 801181c:	46bd      	mov	sp, r7
 801181e:	bd90      	pop	{r4, r7, pc}

08011820 <_ZSt4swapIfENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS4_ESt18is_move_assignableIS4_EEE5valueEvE4typeERS4_SE_>:
    swap(_Tp& __a, _Tp& __b)
 8011820:	b580      	push	{r7, lr}
 8011822:	b084      	sub	sp, #16
 8011824:	af00      	add	r7, sp, #0
 8011826:	6078      	str	r0, [r7, #4]
 8011828:	6039      	str	r1, [r7, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 801182a:	6878      	ldr	r0, [r7, #4]
 801182c:	f7fb fa8a 	bl	800cd44 <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>
 8011830:	4603      	mov	r3, r0
 8011832:	681b      	ldr	r3, [r3, #0]
 8011834:	60fb      	str	r3, [r7, #12]
      __a = _GLIBCXX_MOVE(__b);
 8011836:	6838      	ldr	r0, [r7, #0]
 8011838:	f7fb fa84 	bl	800cd44 <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>
 801183c:	4603      	mov	r3, r0
 801183e:	681a      	ldr	r2, [r3, #0]
 8011840:	687b      	ldr	r3, [r7, #4]
 8011842:	601a      	str	r2, [r3, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 8011844:	f107 030c 	add.w	r3, r7, #12
 8011848:	4618      	mov	r0, r3
 801184a:	f7fb fa7b 	bl	800cd44 <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>
 801184e:	4603      	mov	r3, r0
 8011850:	681a      	ldr	r2, [r3, #0]
 8011852:	683b      	ldr	r3, [r7, #0]
 8011854:	601a      	str	r2, [r3, #0]
    }
 8011856:	bf00      	nop
 8011858:	3710      	adds	r7, #16
 801185a:	46bd      	mov	sp, r7
 801185c:	bd80      	pop	{r7, pc}

0801185e <_ZSt23__copy_move_backward_a2ILb1EPfS0_ET1_T0_S2_S1_>:
    __copy_move_backward_a2(_BI1 __first, _BI1 __last, _BI2 __result)
 801185e:	b580      	push	{r7, lr}
 8011860:	b084      	sub	sp, #16
 8011862:	af00      	add	r7, sp, #0
 8011864:	60f8      	str	r0, [r7, #12]
 8011866:	60b9      	str	r1, [r7, #8]
 8011868:	607a      	str	r2, [r7, #4]
      if (std::is_constant_evaluated())
 801186a:	f7f1 f94f 	bl	8002b0c <_ZSt21is_constant_evaluatedv>
 801186e:	4603      	mov	r3, r0
 8011870:	2b00      	cmp	r3, #0
 8011872:	d006      	beq.n	8011882 <_ZSt23__copy_move_backward_a2ILb1EPfS0_ET1_T0_S2_S1_+0x24>
	  __copy_move_b(__first, __last, __result);
 8011874:	687a      	ldr	r2, [r7, #4]
 8011876:	68b9      	ldr	r1, [r7, #8]
 8011878:	68f8      	ldr	r0, [r7, #12]
 801187a:	f000 faaf 	bl	8011ddc <_ZNSt20__copy_move_backwardILb1ELb0ESt26random_access_iterator_tagE13__copy_move_bIPfS3_EET0_T_S5_S4_>
 801187e:	4603      	mov	r3, r0
 8011880:	e006      	b.n	8011890 <_ZSt23__copy_move_backward_a2ILb1EPfS0_ET1_T0_S2_S1_+0x32>
				       _Category>::__copy_move_b(__first,
 8011882:	687a      	ldr	r2, [r7, #4]
 8011884:	68b9      	ldr	r1, [r7, #8]
 8011886:	68f8      	ldr	r0, [r7, #12]
 8011888:	f000 facc 	bl	8011e24 <_ZNSt20__copy_move_backwardILb1ELb1ESt26random_access_iterator_tagE13__copy_move_bIfEEPT_PKS3_S6_S4_>
 801188c:	4603      	mov	r3, r0
								 __result);
 801188e:	bf00      	nop
    }
 8011890:	4618      	mov	r0, r3
 8011892:	3710      	adds	r7, #16
 8011894:	46bd      	mov	sp, r7
 8011896:	bd80      	pop	{r7, pc}

08011898 <_ZSt12__niter_baseIPKcSt6vectorIcSaIcEEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>:
    __niter_base(__gnu_cxx::__normal_iterator<_Iterator, _Container> __it)
 8011898:	b580      	push	{r7, lr}
 801189a:	b082      	sub	sp, #8
 801189c:	af00      	add	r7, sp, #0
 801189e:	6078      	str	r0, [r7, #4]
    { return __it.base(); }
 80118a0:	1d3b      	adds	r3, r7, #4
 80118a2:	4618      	mov	r0, r3
 80118a4:	f7fd fb43 	bl	800ef2e <_ZNK9__gnu_cxx17__normal_iteratorIPKcSt6vectorIcSaIcEEE4baseEv>
 80118a8:	4603      	mov	r3, r0
 80118aa:	681b      	ldr	r3, [r3, #0]
 80118ac:	4618      	mov	r0, r3
 80118ae:	3708      	adds	r7, #8
 80118b0:	46bd      	mov	sp, r7
 80118b2:	bd80      	pop	{r7, pc}

080118b4 <_ZNK9__gnu_cxx13new_allocatorIN3jlb4EdgeEE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 80118b4:	b480      	push	{r7}
 80118b6:	b083      	sub	sp, #12
 80118b8:	af00      	add	r7, sp, #0
 80118ba:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 80118bc:	4b03      	ldr	r3, [pc, #12]	; (80118cc <_ZNK9__gnu_cxx13new_allocatorIN3jlb4EdgeEE11_M_max_sizeEv+0x18>)
      }
 80118be:	4618      	mov	r0, r3
 80118c0:	370c      	adds	r7, #12
 80118c2:	46bd      	mov	sp, r7
 80118c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118c8:	4770      	bx	lr
 80118ca:	bf00      	nop
 80118cc:	05555555 	.word	0x05555555

080118d0 <_ZN9__gnu_cxx13new_allocatorIN3jlb4EdgeEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 80118d0:	b580      	push	{r7, lr}
 80118d2:	b084      	sub	sp, #16
 80118d4:	af00      	add	r7, sp, #0
 80118d6:	60f8      	str	r0, [r7, #12]
 80118d8:	60b9      	str	r1, [r7, #8]
 80118da:	607a      	str	r2, [r7, #4]
	if (__builtin_expect(__n > this->_M_max_size(), false))
 80118dc:	68f8      	ldr	r0, [r7, #12]
 80118de:	f7ff ffe9 	bl	80118b4 <_ZNK9__gnu_cxx13new_allocatorIN3jlb4EdgeEE11_M_max_sizeEv>
 80118e2:	4602      	mov	r2, r0
 80118e4:	68bb      	ldr	r3, [r7, #8]
 80118e6:	4293      	cmp	r3, r2
 80118e8:	bf8c      	ite	hi
 80118ea:	2301      	movhi	r3, #1
 80118ec:	2300      	movls	r3, #0
 80118ee:	b2db      	uxtb	r3, r3
 80118f0:	2b00      	cmp	r3, #0
 80118f2:	bf14      	ite	ne
 80118f4:	2301      	movne	r3, #1
 80118f6:	2300      	moveq	r3, #0
 80118f8:	b2db      	uxtb	r3, r3
 80118fa:	2b00      	cmp	r3, #0
 80118fc:	d007      	beq.n	801190e <_ZN9__gnu_cxx13new_allocatorIN3jlb4EdgeEE8allocateEjPKv+0x3e>
	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
 80118fe:	68bb      	ldr	r3, [r7, #8]
 8011900:	4a0a      	ldr	r2, [pc, #40]	; (801192c <_ZN9__gnu_cxx13new_allocatorIN3jlb4EdgeEE8allocateEjPKv+0x5c>)
 8011902:	4293      	cmp	r3, r2
 8011904:	d901      	bls.n	801190a <_ZN9__gnu_cxx13new_allocatorIN3jlb4EdgeEE8allocateEjPKv+0x3a>
	      std::__throw_bad_array_new_length();
 8011906:	f00f fc54 	bl	80211b2 <_ZSt28__throw_bad_array_new_lengthv>
	    std::__throw_bad_alloc();
 801190a:	f00f fc4f 	bl	80211ac <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 801190e:	68ba      	ldr	r2, [r7, #8]
 8011910:	4613      	mov	r3, r2
 8011912:	005b      	lsls	r3, r3, #1
 8011914:	4413      	add	r3, r2
 8011916:	00db      	lsls	r3, r3, #3
 8011918:	4618      	mov	r0, r3
 801191a:	f00f fc33 	bl	8021184 <_Znwj>
 801191e:	4603      	mov	r3, r0
 8011920:	bf00      	nop
      }
 8011922:	4618      	mov	r0, r3
 8011924:	3710      	adds	r7, #16
 8011926:	46bd      	mov	sp, r7
 8011928:	bd80      	pop	{r7, pc}
 801192a:	bf00      	nop
 801192c:	0aaaaaaa 	.word	0x0aaaaaaa

08011930 <_ZSt12__niter_baseIPN3jlb4EdgeEET_S3_>:
    __niter_base(_Iterator __it)
 8011930:	b480      	push	{r7}
 8011932:	b083      	sub	sp, #12
 8011934:	af00      	add	r7, sp, #0
 8011936:	6078      	str	r0, [r7, #4]
    { return __it; }
 8011938:	687b      	ldr	r3, [r7, #4]
 801193a:	4618      	mov	r0, r3
 801193c:	370c      	adds	r7, #12
 801193e:	46bd      	mov	sp, r7
 8011940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011944:	4770      	bx	lr

08011946 <_ZSt14__relocate_a_1IPN3jlb4EdgeES2_SaIS1_EET0_T_S5_S4_RT1_>:
    __relocate_a_1(_InputIterator __first, _InputIterator __last,
 8011946:	b590      	push	{r4, r7, lr}
 8011948:	b087      	sub	sp, #28
 801194a:	af00      	add	r7, sp, #0
 801194c:	60f8      	str	r0, [r7, #12]
 801194e:	60b9      	str	r1, [r7, #8]
 8011950:	607a      	str	r2, [r7, #4]
 8011952:	603b      	str	r3, [r7, #0]
      _ForwardIterator __cur = __result;
 8011954:	687b      	ldr	r3, [r7, #4]
 8011956:	617b      	str	r3, [r7, #20]
      for (; __first != __last; ++__first, (void)++__cur)
 8011958:	e012      	b.n	8011980 <_ZSt14__relocate_a_1IPN3jlb4EdgeES2_SaIS1_EET0_T_S5_S4_RT1_+0x3a>
	std::__relocate_object_a(std::__addressof(*__cur),
 801195a:	6978      	ldr	r0, [r7, #20]
 801195c:	f7ff f85b 	bl	8010a16 <_ZSt11__addressofIN3jlb4EdgeEEPT_RS2_>
 8011960:	4604      	mov	r4, r0
 8011962:	68f8      	ldr	r0, [r7, #12]
 8011964:	f7ff f857 	bl	8010a16 <_ZSt11__addressofIN3jlb4EdgeEEPT_RS2_>
 8011968:	4603      	mov	r3, r0
 801196a:	683a      	ldr	r2, [r7, #0]
 801196c:	4619      	mov	r1, r3
 801196e:	4620      	mov	r0, r4
 8011970:	f000 fa7a 	bl	8011e68 <_ZSt19__relocate_object_aIN3jlb4EdgeES1_SaIS1_EEvPT_PT0_RT1_>
      for (; __first != __last; ++__first, (void)++__cur)
 8011974:	68fb      	ldr	r3, [r7, #12]
 8011976:	3318      	adds	r3, #24
 8011978:	60fb      	str	r3, [r7, #12]
 801197a:	697b      	ldr	r3, [r7, #20]
 801197c:	3318      	adds	r3, #24
 801197e:	617b      	str	r3, [r7, #20]
 8011980:	68fa      	ldr	r2, [r7, #12]
 8011982:	68bb      	ldr	r3, [r7, #8]
 8011984:	429a      	cmp	r2, r3
 8011986:	d1e8      	bne.n	801195a <_ZSt14__relocate_a_1IPN3jlb4EdgeES2_SaIS1_EET0_T_S5_S4_RT1_+0x14>
      return __cur;
 8011988:	697b      	ldr	r3, [r7, #20]
    }
 801198a:	4618      	mov	r0, r3
 801198c:	371c      	adds	r7, #28
 801198e:	46bd      	mov	sp, r7
 8011990:	bd90      	pop	{r4, r7, pc}

08011992 <_ZNSaIN3jlb4EdgeEEC1ERKS1_>:
      allocator(const allocator& __a) _GLIBCXX_NOTHROW
 8011992:	b580      	push	{r7, lr}
 8011994:	b082      	sub	sp, #8
 8011996:	af00      	add	r7, sp, #0
 8011998:	6078      	str	r0, [r7, #4]
 801199a:	6039      	str	r1, [r7, #0]
      : __allocator_base<_Tp>(__a) { }
 801199c:	6839      	ldr	r1, [r7, #0]
 801199e:	6878      	ldr	r0, [r7, #4]
 80119a0:	f000 fa7d 	bl	8011e9e <_ZN9__gnu_cxx13new_allocatorIN3jlb4EdgeEEC1ERKS3_>
 80119a4:	687b      	ldr	r3, [r7, #4]
 80119a6:	4618      	mov	r0, r3
 80119a8:	3708      	adds	r7, #8
 80119aa:	46bd      	mov	sp, r7
 80119ac:	bd80      	pop	{r7, pc}

080119ae <_ZNK9__gnu_cxx17__normal_iteratorIPKN3jlb4EdgeESt6vectorIS2_SaIS2_EEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 80119ae:	b480      	push	{r7}
 80119b0:	b083      	sub	sp, #12
 80119b2:	af00      	add	r7, sp, #0
 80119b4:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 80119b6:	687b      	ldr	r3, [r7, #4]
 80119b8:	4618      	mov	r0, r3
 80119ba:	370c      	adds	r7, #12
 80119bc:	46bd      	mov	sp, r7
 80119be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119c2:	4770      	bx	lr

080119c4 <_ZN9__gnu_cxx17__normal_iteratorIPKN3jlb4EdgeESt6vectorIS2_SaIS2_EEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 80119c4:	b480      	push	{r7}
 80119c6:	b083      	sub	sp, #12
 80119c8:	af00      	add	r7, sp, #0
 80119ca:	6078      	str	r0, [r7, #4]
	++_M_current;
 80119cc:	687b      	ldr	r3, [r7, #4]
 80119ce:	681b      	ldr	r3, [r3, #0]
 80119d0:	f103 0218 	add.w	r2, r3, #24
 80119d4:	687b      	ldr	r3, [r7, #4]
 80119d6:	601a      	str	r2, [r3, #0]
	return *this;
 80119d8:	687b      	ldr	r3, [r7, #4]
      }
 80119da:	4618      	mov	r0, r3
 80119dc:	370c      	adds	r7, #12
 80119de:	46bd      	mov	sp, r7
 80119e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119e4:	4770      	bx	lr

080119e6 <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIN9__gnu_cxx17__normal_iteratorIPKN3jlb4EdgeESt6vectorIS5_SaIS5_EEEEPS5_EET0_T_SE_SD_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 80119e6:	b590      	push	{r4, r7, lr}
 80119e8:	b087      	sub	sp, #28
 80119ea:	af00      	add	r7, sp, #0
 80119ec:	60f8      	str	r0, [r7, #12]
 80119ee:	60b9      	str	r1, [r7, #8]
 80119f0:	607a      	str	r2, [r7, #4]
	  _ForwardIterator __cur = __result;
 80119f2:	687b      	ldr	r3, [r7, #4]
 80119f4:	617b      	str	r3, [r7, #20]
	      for (; __first != __last; ++__first, (void)++__cur)
 80119f6:	e015      	b.n	8011a24 <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIN9__gnu_cxx17__normal_iteratorIPKN3jlb4EdgeESt6vectorIS5_SaIS5_EEEEPS5_EET0_T_SE_SD_+0x3e>
		std::_Construct(std::__addressof(*__cur), *__first);
 80119f8:	6978      	ldr	r0, [r7, #20]
 80119fa:	f7ff f80c 	bl	8010a16 <_ZSt11__addressofIN3jlb4EdgeEEPT_RS2_>
 80119fe:	4604      	mov	r4, r0
 8011a00:	f107 030c 	add.w	r3, r7, #12
 8011a04:	4618      	mov	r0, r3
 8011a06:	f000 fa6e 	bl	8011ee6 <_ZNK9__gnu_cxx17__normal_iteratorIPKN3jlb4EdgeESt6vectorIS2_SaIS2_EEEdeEv>
 8011a0a:	4603      	mov	r3, r0
 8011a0c:	4619      	mov	r1, r3
 8011a0e:	4620      	mov	r0, r4
 8011a10:	f000 fa94 	bl	8011f3c <_ZSt10_ConstructIN3jlb4EdgeEJRKS1_EEvPT_DpOT0_>
	      for (; __first != __last; ++__first, (void)++__cur)
 8011a14:	f107 030c 	add.w	r3, r7, #12
 8011a18:	4618      	mov	r0, r3
 8011a1a:	f7ff ffd3 	bl	80119c4 <_ZN9__gnu_cxx17__normal_iteratorIPKN3jlb4EdgeESt6vectorIS2_SaIS2_EEEppEv>
 8011a1e:	697b      	ldr	r3, [r7, #20]
 8011a20:	3318      	adds	r3, #24
 8011a22:	617b      	str	r3, [r7, #20]
 8011a24:	f107 0208 	add.w	r2, r7, #8
 8011a28:	f107 030c 	add.w	r3, r7, #12
 8011a2c:	4611      	mov	r1, r2
 8011a2e:	4618      	mov	r0, r3
 8011a30:	f000 fa41 	bl	8011eb6 <_ZN9__gnu_cxxeqIPKN3jlb4EdgeESt6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T0_EESD_>
 8011a34:	4603      	mov	r3, r0
 8011a36:	f083 0301 	eor.w	r3, r3, #1
 8011a3a:	b2db      	uxtb	r3, r3
 8011a3c:	2b00      	cmp	r3, #0
 8011a3e:	d1db      	bne.n	80119f8 <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIN9__gnu_cxx17__normal_iteratorIPKN3jlb4EdgeESt6vectorIS5_SaIS5_EEEEPS5_EET0_T_SE_SD_+0x12>
	      return __cur;
 8011a40:	697b      	ldr	r3, [r7, #20]
	}
 8011a42:	4618      	mov	r0, r3
 8011a44:	371c      	adds	r7, #28
 8011a46:	46bd      	mov	sp, r7
 8011a48:	bd90      	pop	{r4, r7, pc}
	...

08011a4c <_ZNK9__gnu_cxx13new_allocatorIN3jlb4NodeEE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 8011a4c:	b480      	push	{r7}
 8011a4e:	b083      	sub	sp, #12
 8011a50:	af00      	add	r7, sp, #0
 8011a52:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8011a54:	4b03      	ldr	r3, [pc, #12]	; (8011a64 <_ZNK9__gnu_cxx13new_allocatorIN3jlb4NodeEE11_M_max_sizeEv+0x18>)
      }
 8011a56:	4618      	mov	r0, r3
 8011a58:	370c      	adds	r7, #12
 8011a5a:	46bd      	mov	sp, r7
 8011a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a60:	4770      	bx	lr
 8011a62:	bf00      	nop
 8011a64:	05555555 	.word	0x05555555

08011a68 <_ZN9__gnu_cxx13new_allocatorIN3jlb4NodeEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8011a68:	b580      	push	{r7, lr}
 8011a6a:	b084      	sub	sp, #16
 8011a6c:	af00      	add	r7, sp, #0
 8011a6e:	60f8      	str	r0, [r7, #12]
 8011a70:	60b9      	str	r1, [r7, #8]
 8011a72:	607a      	str	r2, [r7, #4]
	if (__builtin_expect(__n > this->_M_max_size(), false))
 8011a74:	68f8      	ldr	r0, [r7, #12]
 8011a76:	f7ff ffe9 	bl	8011a4c <_ZNK9__gnu_cxx13new_allocatorIN3jlb4NodeEE11_M_max_sizeEv>
 8011a7a:	4602      	mov	r2, r0
 8011a7c:	68bb      	ldr	r3, [r7, #8]
 8011a7e:	4293      	cmp	r3, r2
 8011a80:	bf8c      	ite	hi
 8011a82:	2301      	movhi	r3, #1
 8011a84:	2300      	movls	r3, #0
 8011a86:	b2db      	uxtb	r3, r3
 8011a88:	2b00      	cmp	r3, #0
 8011a8a:	bf14      	ite	ne
 8011a8c:	2301      	movne	r3, #1
 8011a8e:	2300      	moveq	r3, #0
 8011a90:	b2db      	uxtb	r3, r3
 8011a92:	2b00      	cmp	r3, #0
 8011a94:	d007      	beq.n	8011aa6 <_ZN9__gnu_cxx13new_allocatorIN3jlb4NodeEE8allocateEjPKv+0x3e>
	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
 8011a96:	68bb      	ldr	r3, [r7, #8]
 8011a98:	4a0a      	ldr	r2, [pc, #40]	; (8011ac4 <_ZN9__gnu_cxx13new_allocatorIN3jlb4NodeEE8allocateEjPKv+0x5c>)
 8011a9a:	4293      	cmp	r3, r2
 8011a9c:	d901      	bls.n	8011aa2 <_ZN9__gnu_cxx13new_allocatorIN3jlb4NodeEE8allocateEjPKv+0x3a>
	      std::__throw_bad_array_new_length();
 8011a9e:	f00f fb88 	bl	80211b2 <_ZSt28__throw_bad_array_new_lengthv>
	    std::__throw_bad_alloc();
 8011aa2:	f00f fb83 	bl	80211ac <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8011aa6:	68ba      	ldr	r2, [r7, #8]
 8011aa8:	4613      	mov	r3, r2
 8011aaa:	005b      	lsls	r3, r3, #1
 8011aac:	4413      	add	r3, r2
 8011aae:	00db      	lsls	r3, r3, #3
 8011ab0:	4618      	mov	r0, r3
 8011ab2:	f00f fb67 	bl	8021184 <_Znwj>
 8011ab6:	4603      	mov	r3, r0
 8011ab8:	bf00      	nop
      }
 8011aba:	4618      	mov	r0, r3
 8011abc:	3710      	adds	r7, #16
 8011abe:	46bd      	mov	sp, r7
 8011ac0:	bd80      	pop	{r7, pc}
 8011ac2:	bf00      	nop
 8011ac4:	0aaaaaaa 	.word	0x0aaaaaaa

08011ac8 <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIPKN3jlb4NodeEPS3_EET0_T_S8_S7_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 8011ac8:	b580      	push	{r7, lr}
 8011aca:	b086      	sub	sp, #24
 8011acc:	af00      	add	r7, sp, #0
 8011ace:	60f8      	str	r0, [r7, #12]
 8011ad0:	60b9      	str	r1, [r7, #8]
 8011ad2:	607a      	str	r2, [r7, #4]
	  _ForwardIterator __cur = __result;
 8011ad4:	687b      	ldr	r3, [r7, #4]
 8011ad6:	617b      	str	r3, [r7, #20]
	      for (; __first != __last; ++__first, (void)++__cur)
 8011ad8:	e00d      	b.n	8011af6 <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIPKN3jlb4NodeEPS3_EET0_T_S8_S7_+0x2e>
		std::_Construct(std::__addressof(*__cur), *__first);
 8011ada:	6978      	ldr	r0, [r7, #20]
 8011adc:	f7ff f865 	bl	8010baa <_ZSt11__addressofIN3jlb4NodeEEPT_RS2_>
 8011ae0:	4603      	mov	r3, r0
 8011ae2:	68f9      	ldr	r1, [r7, #12]
 8011ae4:	4618      	mov	r0, r3
 8011ae6:	f000 fa3f 	bl	8011f68 <_ZSt10_ConstructIN3jlb4NodeEJRKS1_EEvPT_DpOT0_>
	      for (; __first != __last; ++__first, (void)++__cur)
 8011aea:	68fb      	ldr	r3, [r7, #12]
 8011aec:	3318      	adds	r3, #24
 8011aee:	60fb      	str	r3, [r7, #12]
 8011af0:	697b      	ldr	r3, [r7, #20]
 8011af2:	3318      	adds	r3, #24
 8011af4:	617b      	str	r3, [r7, #20]
 8011af6:	68fa      	ldr	r2, [r7, #12]
 8011af8:	68bb      	ldr	r3, [r7, #8]
 8011afa:	429a      	cmp	r2, r3
 8011afc:	d1ed      	bne.n	8011ada <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIPKN3jlb4NodeEPS3_EET0_T_S8_S7_+0x12>
	      return __cur;
 8011afe:	697b      	ldr	r3, [r7, #20]
	}
 8011b00:	4618      	mov	r0, r3
 8011b02:	3718      	adds	r7, #24
 8011b04:	46bd      	mov	sp, r7
 8011b06:	bd80      	pop	{r7, pc}

08011b08 <_ZSt14__copy_move_a2ILb0EPPfS1_ET1_T0_S3_S2_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 8011b08:	b580      	push	{r7, lr}
 8011b0a:	b084      	sub	sp, #16
 8011b0c:	af00      	add	r7, sp, #0
 8011b0e:	60f8      	str	r0, [r7, #12]
 8011b10:	60b9      	str	r1, [r7, #8]
 8011b12:	607a      	str	r2, [r7, #4]
      if (std::is_constant_evaluated())
 8011b14:	f7f0 fffa 	bl	8002b0c <_ZSt21is_constant_evaluatedv>
 8011b18:	4603      	mov	r3, r0
 8011b1a:	2b00      	cmp	r3, #0
 8011b1c:	d006      	beq.n	8011b2c <_ZSt14__copy_move_a2ILb0EPPfS1_ET1_T0_S3_S2_+0x24>
	  __copy_m(__first, __last, __result);
 8011b1e:	687a      	ldr	r2, [r7, #4]
 8011b20:	68b9      	ldr	r1, [r7, #8]
 8011b22:	68f8      	ldr	r0, [r7, #12]
 8011b24:	f000 fa36 	bl	8011f94 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPPfS4_EET0_T_S6_S5_>
 8011b28:	4603      	mov	r3, r0
 8011b2a:	e006      	b.n	8011b3a <_ZSt14__copy_move_a2ILb0EPPfS1_ET1_T0_S3_S2_+0x32>
			      _Category>::__copy_m(__first, __last, __result);
 8011b2c:	687a      	ldr	r2, [r7, #4]
 8011b2e:	68b9      	ldr	r1, [r7, #8]
 8011b30:	68f8      	ldr	r0, [r7, #12]
 8011b32:	f000 fa52 	bl	8011fda <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIPfEEPT_PKS4_S7_S5_>
 8011b36:	4603      	mov	r3, r0
 8011b38:	bf00      	nop
    }
 8011b3a:	4618      	mov	r0, r3
 8011b3c:	3710      	adds	r7, #16
 8011b3e:	46bd      	mov	sp, r7
 8011b40:	bd80      	pop	{r7, pc}

08011b42 <_ZSt23__copy_move_backward_a2ILb0EPPfS1_ET1_T0_S3_S2_>:
    __copy_move_backward_a2(_BI1 __first, _BI1 __last, _BI2 __result)
 8011b42:	b580      	push	{r7, lr}
 8011b44:	b084      	sub	sp, #16
 8011b46:	af00      	add	r7, sp, #0
 8011b48:	60f8      	str	r0, [r7, #12]
 8011b4a:	60b9      	str	r1, [r7, #8]
 8011b4c:	607a      	str	r2, [r7, #4]
      if (std::is_constant_evaluated())
 8011b4e:	f7f0 ffdd 	bl	8002b0c <_ZSt21is_constant_evaluatedv>
 8011b52:	4603      	mov	r3, r0
 8011b54:	2b00      	cmp	r3, #0
 8011b56:	d006      	beq.n	8011b66 <_ZSt23__copy_move_backward_a2ILb0EPPfS1_ET1_T0_S3_S2_+0x24>
	  __copy_move_b(__first, __last, __result);
 8011b58:	687a      	ldr	r2, [r7, #4]
 8011b5a:	68b9      	ldr	r1, [r7, #8]
 8011b5c:	68f8      	ldr	r0, [r7, #12]
 8011b5e:	f000 fa59 	bl	8012014 <_ZNSt20__copy_move_backwardILb0ELb0ESt26random_access_iterator_tagE13__copy_move_bIPPfS4_EET0_T_S6_S5_>
 8011b62:	4603      	mov	r3, r0
 8011b64:	e006      	b.n	8011b74 <_ZSt23__copy_move_backward_a2ILb0EPPfS1_ET1_T0_S3_S2_+0x32>
				       _Category>::__copy_move_b(__first,
 8011b66:	687a      	ldr	r2, [r7, #4]
 8011b68:	68b9      	ldr	r1, [r7, #8]
 8011b6a:	68f8      	ldr	r0, [r7, #12]
 8011b6c:	f000 fa75 	bl	801205a <_ZNSt20__copy_move_backwardILb0ELb1ESt26random_access_iterator_tagE13__copy_move_bIPfEEPT_PKS4_S7_S5_>
 8011b70:	4603      	mov	r3, r0
								 __result);
 8011b72:	bf00      	nop
    }
 8011b74:	4618      	mov	r0, r3
 8011b76:	3710      	adds	r7, #16
 8011b78:	46bd      	mov	sp, r7
 8011b7a:	bd80      	pop	{r7, pc}

08011b7c <_ZSt14__relocate_a_1IccENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS2_E4typeES4_S4_S4_RSaIT0_E>:
    __relocate_a_1(_Tp* __first, _Tp* __last,
 8011b7c:	b580      	push	{r7, lr}
 8011b7e:	b086      	sub	sp, #24
 8011b80:	af00      	add	r7, sp, #0
 8011b82:	60f8      	str	r0, [r7, #12]
 8011b84:	60b9      	str	r1, [r7, #8]
 8011b86:	607a      	str	r2, [r7, #4]
 8011b88:	603b      	str	r3, [r7, #0]
      ptrdiff_t __count = __last - __first;
 8011b8a:	68ba      	ldr	r2, [r7, #8]
 8011b8c:	68fb      	ldr	r3, [r7, #12]
 8011b8e:	1ad3      	subs	r3, r2, r3
 8011b90:	617b      	str	r3, [r7, #20]
      if (__count > 0)
 8011b92:	697b      	ldr	r3, [r7, #20]
 8011b94:	2b00      	cmp	r3, #0
 8011b96:	dd05      	ble.n	8011ba4 <_ZSt14__relocate_a_1IccENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS2_E4typeES4_S4_S4_RSaIT0_E+0x28>
	__builtin_memmove(__result, __first, __count * sizeof(_Tp));
 8011b98:	697b      	ldr	r3, [r7, #20]
 8011b9a:	461a      	mov	r2, r3
 8011b9c:	68f9      	ldr	r1, [r7, #12]
 8011b9e:	6878      	ldr	r0, [r7, #4]
 8011ba0:	f012 fded 	bl	802477e <memmove>
      return __result + __count;
 8011ba4:	697b      	ldr	r3, [r7, #20]
 8011ba6:	687a      	ldr	r2, [r7, #4]
 8011ba8:	4413      	add	r3, r2
    }
 8011baa:	4618      	mov	r0, r3
 8011bac:	3718      	adds	r7, #24
 8011bae:	46bd      	mov	sp, r7
 8011bb0:	bd80      	pop	{r7, pc}

08011bb2 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyISt13move_iteratorIPcES3_EET0_T_S6_S5_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 8011bb2:	b580      	push	{r7, lr}
 8011bb4:	b084      	sub	sp, #16
 8011bb6:	af00      	add	r7, sp, #0
 8011bb8:	60f8      	str	r0, [r7, #12]
 8011bba:	60b9      	str	r1, [r7, #8]
 8011bbc:	607a      	str	r2, [r7, #4]
        { return std::copy(__first, __last, __result); }
 8011bbe:	687a      	ldr	r2, [r7, #4]
 8011bc0:	68b9      	ldr	r1, [r7, #8]
 8011bc2:	68f8      	ldr	r0, [r7, #12]
 8011bc4:	f000 fa6b 	bl	801209e <_ZSt4copyISt13move_iteratorIPcES1_ET0_T_S4_S3_>
 8011bc8:	4603      	mov	r3, r0
 8011bca:	4618      	mov	r0, r3
 8011bcc:	3710      	adds	r7, #16
 8011bce:	46bd      	mov	sp, r7
 8011bd0:	bd80      	pop	{r7, pc}

08011bd2 <_ZNSt20__copy_move_backwardILb1ELb0ESt26random_access_iterator_tagE13__copy_move_bIPcS3_EET0_T_S5_S4_>:
	__copy_move_b(_BI1 __first, _BI1 __last, _BI2 __result)
 8011bd2:	b580      	push	{r7, lr}
 8011bd4:	b086      	sub	sp, #24
 8011bd6:	af00      	add	r7, sp, #0
 8011bd8:	60f8      	str	r0, [r7, #12]
 8011bda:	60b9      	str	r1, [r7, #8]
 8011bdc:	607a      	str	r2, [r7, #4]
	    __n = __last - __first;
 8011bde:	68ba      	ldr	r2, [r7, #8]
 8011be0:	68fb      	ldr	r3, [r7, #12]
 8011be2:	1ad3      	subs	r3, r2, r3
 8011be4:	617b      	str	r3, [r7, #20]
	  for (; __n > 0; --__n)
 8011be6:	e00f      	b.n	8011c08 <_ZNSt20__copy_move_backwardILb1ELb0ESt26random_access_iterator_tagE13__copy_move_bIPcS3_EET0_T_S5_S4_+0x36>
	    *--__result = std::move(*--__last);
 8011be8:	68bb      	ldr	r3, [r7, #8]
 8011bea:	3b01      	subs	r3, #1
 8011bec:	60bb      	str	r3, [r7, #8]
 8011bee:	68b8      	ldr	r0, [r7, #8]
 8011bf0:	f7fc f83e 	bl	800dc70 <_ZSt4moveIRcEONSt16remove_referenceIT_E4typeEOS2_>
 8011bf4:	4603      	mov	r3, r0
 8011bf6:	781a      	ldrb	r2, [r3, #0]
 8011bf8:	687b      	ldr	r3, [r7, #4]
 8011bfa:	3b01      	subs	r3, #1
 8011bfc:	607b      	str	r3, [r7, #4]
 8011bfe:	687b      	ldr	r3, [r7, #4]
 8011c00:	701a      	strb	r2, [r3, #0]
	  for (; __n > 0; --__n)
 8011c02:	697b      	ldr	r3, [r7, #20]
 8011c04:	3b01      	subs	r3, #1
 8011c06:	617b      	str	r3, [r7, #20]
 8011c08:	697b      	ldr	r3, [r7, #20]
 8011c0a:	2b00      	cmp	r3, #0
 8011c0c:	dcec      	bgt.n	8011be8 <_ZNSt20__copy_move_backwardILb1ELb0ESt26random_access_iterator_tagE13__copy_move_bIPcS3_EET0_T_S5_S4_+0x16>
	  return __result;
 8011c0e:	687b      	ldr	r3, [r7, #4]
	}
 8011c10:	4618      	mov	r0, r3
 8011c12:	3718      	adds	r7, #24
 8011c14:	46bd      	mov	sp, r7
 8011c16:	bd80      	pop	{r7, pc}

08011c18 <_ZNSt20__copy_move_backwardILb1ELb1ESt26random_access_iterator_tagE13__copy_move_bIcEEPT_PKS3_S6_S4_>:
	__copy_move_b(const _Tp* __first, const _Tp* __last, _Tp* __result)
 8011c18:	b580      	push	{r7, lr}
 8011c1a:	b086      	sub	sp, #24
 8011c1c:	af00      	add	r7, sp, #0
 8011c1e:	60f8      	str	r0, [r7, #12]
 8011c20:	60b9      	str	r1, [r7, #8]
 8011c22:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 8011c24:	68ba      	ldr	r2, [r7, #8]
 8011c26:	68fb      	ldr	r3, [r7, #12]
 8011c28:	1ad3      	subs	r3, r2, r3
 8011c2a:	617b      	str	r3, [r7, #20]
	  if (_Num)
 8011c2c:	697b      	ldr	r3, [r7, #20]
 8011c2e:	2b00      	cmp	r3, #0
 8011c30:	d008      	beq.n	8011c44 <_ZNSt20__copy_move_backwardILb1ELb1ESt26random_access_iterator_tagE13__copy_move_bIcEEPT_PKS3_S6_S4_+0x2c>
	    __builtin_memmove(__result - _Num, __first, sizeof(_Tp) * _Num);
 8011c32:	697b      	ldr	r3, [r7, #20]
 8011c34:	425b      	negs	r3, r3
 8011c36:	687a      	ldr	r2, [r7, #4]
 8011c38:	4413      	add	r3, r2
 8011c3a:	697a      	ldr	r2, [r7, #20]
 8011c3c:	68f9      	ldr	r1, [r7, #12]
 8011c3e:	4618      	mov	r0, r3
 8011c40:	f012 fd9d 	bl	802477e <memmove>
	  return __result - _Num;
 8011c44:	697b      	ldr	r3, [r7, #20]
 8011c46:	425b      	negs	r3, r3
 8011c48:	687a      	ldr	r2, [r7, #4]
 8011c4a:	4413      	add	r3, r2
	}
 8011c4c:	4618      	mov	r0, r3
 8011c4e:	3718      	adds	r7, #24
 8011c50:	46bd      	mov	sp, r7
 8011c52:	bd80      	pop	{r7, pc}

08011c54 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPcS3_EET0_T_S5_S4_>:
	__copy_m(_II __first, _II __last, _OI __result)
 8011c54:	b480      	push	{r7}
 8011c56:	b087      	sub	sp, #28
 8011c58:	af00      	add	r7, sp, #0
 8011c5a:	60f8      	str	r0, [r7, #12]
 8011c5c:	60b9      	str	r1, [r7, #8]
 8011c5e:	607a      	str	r2, [r7, #4]
	  for(_Distance __n = __last - __first; __n > 0; --__n)
 8011c60:	68ba      	ldr	r2, [r7, #8]
 8011c62:	68fb      	ldr	r3, [r7, #12]
 8011c64:	1ad3      	subs	r3, r2, r3
 8011c66:	617b      	str	r3, [r7, #20]
 8011c68:	e00c      	b.n	8011c84 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPcS3_EET0_T_S5_S4_+0x30>
	      *__result = *__first;
 8011c6a:	68fb      	ldr	r3, [r7, #12]
 8011c6c:	781a      	ldrb	r2, [r3, #0]
 8011c6e:	687b      	ldr	r3, [r7, #4]
 8011c70:	701a      	strb	r2, [r3, #0]
	      ++__first;
 8011c72:	68fb      	ldr	r3, [r7, #12]
 8011c74:	3301      	adds	r3, #1
 8011c76:	60fb      	str	r3, [r7, #12]
	      ++__result;
 8011c78:	687b      	ldr	r3, [r7, #4]
 8011c7a:	3301      	adds	r3, #1
 8011c7c:	607b      	str	r3, [r7, #4]
	  for(_Distance __n = __last - __first; __n > 0; --__n)
 8011c7e:	697b      	ldr	r3, [r7, #20]
 8011c80:	3b01      	subs	r3, #1
 8011c82:	617b      	str	r3, [r7, #20]
 8011c84:	697b      	ldr	r3, [r7, #20]
 8011c86:	2b00      	cmp	r3, #0
 8011c88:	dcef      	bgt.n	8011c6a <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPcS3_EET0_T_S5_S4_+0x16>
	  return __result;
 8011c8a:	687b      	ldr	r3, [r7, #4]
	}
 8011c8c:	4618      	mov	r0, r3
 8011c8e:	371c      	adds	r7, #28
 8011c90:	46bd      	mov	sp, r7
 8011c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c96:	4770      	bx	lr

08011c98 <_ZSt4copyIPcS0_ET0_T_S2_S1_>:
    copy(_II __first, _II __last, _OI __result)
 8011c98:	b590      	push	{r4, r7, lr}
 8011c9a:	b085      	sub	sp, #20
 8011c9c:	af00      	add	r7, sp, #0
 8011c9e:	60f8      	str	r0, [r7, #12]
 8011ca0:	60b9      	str	r1, [r7, #8]
 8011ca2:	607a      	str	r2, [r7, #4]
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 8011ca4:	68f8      	ldr	r0, [r7, #12]
 8011ca6:	f7fe fb05 	bl	80102b4 <_ZSt12__miter_baseIPcET_S1_>
 8011caa:	4604      	mov	r4, r0
 8011cac:	68b8      	ldr	r0, [r7, #8]
 8011cae:	f7fe fb01 	bl	80102b4 <_ZSt12__miter_baseIPcET_S1_>
 8011cb2:	4603      	mov	r3, r0
 8011cb4:	687a      	ldr	r2, [r7, #4]
 8011cb6:	4619      	mov	r1, r3
 8011cb8:	4620      	mov	r0, r4
 8011cba:	f000 fa08 	bl	80120ce <_ZSt13__copy_move_aILb0EPcS0_ET1_T0_S2_S1_>
 8011cbe:	4603      	mov	r3, r0
    }
 8011cc0:	4618      	mov	r0, r3
 8011cc2:	3714      	adds	r7, #20
 8011cc4:	46bd      	mov	sp, r7
 8011cc6:	bd90      	pop	{r4, r7, pc}

08011cc8 <_ZNK9__gnu_cxx5__ops14_Iter_less_valclINS_17__normal_iteratorIPfSt6vectorIfSaIfEEEEfEEbT_RT0_>:
      operator()(_Iterator __it, _Value& __val) const
 8011cc8:	b580      	push	{r7, lr}
 8011cca:	b084      	sub	sp, #16
 8011ccc:	af00      	add	r7, sp, #0
 8011cce:	60f8      	str	r0, [r7, #12]
 8011cd0:	60b9      	str	r1, [r7, #8]
 8011cd2:	607a      	str	r2, [r7, #4]
      { return *__it < __val; }
 8011cd4:	f107 0308 	add.w	r3, r7, #8
 8011cd8:	4618      	mov	r0, r3
 8011cda:	f7fd fb46 	bl	800f36a <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEdeEv>
 8011cde:	4603      	mov	r3, r0
 8011ce0:	ed93 7a00 	vldr	s14, [r3]
 8011ce4:	687b      	ldr	r3, [r7, #4]
 8011ce6:	edd3 7a00 	vldr	s15, [r3]
 8011cea:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8011cee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011cf2:	bf4c      	ite	mi
 8011cf4:	2301      	movmi	r3, #1
 8011cf6:	2300      	movpl	r3, #0
 8011cf8:	b2db      	uxtb	r3, r3
 8011cfa:	4618      	mov	r0, r3
 8011cfc:	3710      	adds	r7, #16
 8011cfe:	46bd      	mov	sp, r7
 8011d00:	bd80      	pop	{r7, pc}

08011d02 <_ZSt11__push_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEifNS0_5__ops14_Iter_less_valEEvT_T0_SA_T1_RT2_>:
    __push_heap(_RandomAccessIterator __first,
 8011d02:	b590      	push	{r4, r7, lr}
 8011d04:	b08b      	sub	sp, #44	; 0x2c
 8011d06:	af00      	add	r7, sp, #0
 8011d08:	6178      	str	r0, [r7, #20]
 8011d0a:	6139      	str	r1, [r7, #16]
 8011d0c:	60fa      	str	r2, [r7, #12]
 8011d0e:	ed87 0a02 	vstr	s0, [r7, #8]
 8011d12:	607b      	str	r3, [r7, #4]
      _Distance __parent = (__holeIndex - 1) / 2;
 8011d14:	693b      	ldr	r3, [r7, #16]
 8011d16:	3b01      	subs	r3, #1
 8011d18:	0fda      	lsrs	r2, r3, #31
 8011d1a:	4413      	add	r3, r2
 8011d1c:	105b      	asrs	r3, r3, #1
 8011d1e:	627b      	str	r3, [r7, #36]	; 0x24
      while (__holeIndex > __topIndex && __comp(__first + __parent, __value))
 8011d20:	e029      	b.n	8011d76 <_ZSt11__push_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEifNS0_5__ops14_Iter_less_valEEvT_T0_SA_T1_RT2_+0x74>
	  *(__first + __holeIndex) = _GLIBCXX_MOVE(*(__first + __parent));
 8011d22:	f107 0314 	add.w	r3, r7, #20
 8011d26:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8011d28:	4618      	mov	r0, r3
 8011d2a:	f7fd faf6 	bl	800f31a <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEplEi>
 8011d2e:	4603      	mov	r3, r0
 8011d30:	61bb      	str	r3, [r7, #24]
 8011d32:	f107 0318 	add.w	r3, r7, #24
 8011d36:	4618      	mov	r0, r3
 8011d38:	f7fd fb17 	bl	800f36a <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEdeEv>
 8011d3c:	4603      	mov	r3, r0
 8011d3e:	4618      	mov	r0, r3
 8011d40:	f7fb f800 	bl	800cd44 <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>
 8011d44:	4603      	mov	r3, r0
 8011d46:	681c      	ldr	r4, [r3, #0]
 8011d48:	f107 0314 	add.w	r3, r7, #20
 8011d4c:	6939      	ldr	r1, [r7, #16]
 8011d4e:	4618      	mov	r0, r3
 8011d50:	f7fd fae3 	bl	800f31a <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEplEi>
 8011d54:	4603      	mov	r3, r0
 8011d56:	61fb      	str	r3, [r7, #28]
 8011d58:	f107 031c 	add.w	r3, r7, #28
 8011d5c:	4618      	mov	r0, r3
 8011d5e:	f7fd fb04 	bl	800f36a <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEdeEv>
 8011d62:	4603      	mov	r3, r0
 8011d64:	601c      	str	r4, [r3, #0]
	  __holeIndex = __parent;
 8011d66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011d68:	613b      	str	r3, [r7, #16]
	  __parent = (__holeIndex - 1) / 2;
 8011d6a:	693b      	ldr	r3, [r7, #16]
 8011d6c:	3b01      	subs	r3, #1
 8011d6e:	0fda      	lsrs	r2, r3, #31
 8011d70:	4413      	add	r3, r2
 8011d72:	105b      	asrs	r3, r3, #1
 8011d74:	627b      	str	r3, [r7, #36]	; 0x24
      while (__holeIndex > __topIndex && __comp(__first + __parent, __value))
 8011d76:	693a      	ldr	r2, [r7, #16]
 8011d78:	68fb      	ldr	r3, [r7, #12]
 8011d7a:	429a      	cmp	r2, r3
 8011d7c:	dd11      	ble.n	8011da2 <_ZSt11__push_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEifNS0_5__ops14_Iter_less_valEEvT_T0_SA_T1_RT2_+0xa0>
 8011d7e:	f107 0314 	add.w	r3, r7, #20
 8011d82:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8011d84:	4618      	mov	r0, r3
 8011d86:	f7fd fac8 	bl	800f31a <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEplEi>
 8011d8a:	4601      	mov	r1, r0
 8011d8c:	f107 0308 	add.w	r3, r7, #8
 8011d90:	461a      	mov	r2, r3
 8011d92:	6878      	ldr	r0, [r7, #4]
 8011d94:	f7ff ff98 	bl	8011cc8 <_ZNK9__gnu_cxx5__ops14_Iter_less_valclINS_17__normal_iteratorIPfSt6vectorIfSaIfEEEEfEEbT_RT0_>
 8011d98:	4603      	mov	r3, r0
 8011d9a:	2b00      	cmp	r3, #0
 8011d9c:	d001      	beq.n	8011da2 <_ZSt11__push_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEifNS0_5__ops14_Iter_less_valEEvT_T0_SA_T1_RT2_+0xa0>
 8011d9e:	2301      	movs	r3, #1
 8011da0:	e000      	b.n	8011da4 <_ZSt11__push_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEifNS0_5__ops14_Iter_less_valEEvT_T0_SA_T1_RT2_+0xa2>
 8011da2:	2300      	movs	r3, #0
 8011da4:	2b00      	cmp	r3, #0
 8011da6:	d1bc      	bne.n	8011d22 <_ZSt11__push_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEifNS0_5__ops14_Iter_less_valEEvT_T0_SA_T1_RT2_+0x20>
      *(__first + __holeIndex) = _GLIBCXX_MOVE(__value);
 8011da8:	f107 0308 	add.w	r3, r7, #8
 8011dac:	4618      	mov	r0, r3
 8011dae:	f7fa ffc9 	bl	800cd44 <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>
 8011db2:	4603      	mov	r3, r0
 8011db4:	681c      	ldr	r4, [r3, #0]
 8011db6:	f107 0314 	add.w	r3, r7, #20
 8011dba:	6939      	ldr	r1, [r7, #16]
 8011dbc:	4618      	mov	r0, r3
 8011dbe:	f7fd faac 	bl	800f31a <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEplEi>
 8011dc2:	4603      	mov	r3, r0
 8011dc4:	623b      	str	r3, [r7, #32]
 8011dc6:	f107 0320 	add.w	r3, r7, #32
 8011dca:	4618      	mov	r0, r3
 8011dcc:	f7fd facd 	bl	800f36a <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEdeEv>
 8011dd0:	4603      	mov	r3, r0
 8011dd2:	601c      	str	r4, [r3, #0]
    }
 8011dd4:	bf00      	nop
 8011dd6:	372c      	adds	r7, #44	; 0x2c
 8011dd8:	46bd      	mov	sp, r7
 8011dda:	bd90      	pop	{r4, r7, pc}

08011ddc <_ZNSt20__copy_move_backwardILb1ELb0ESt26random_access_iterator_tagE13__copy_move_bIPfS3_EET0_T_S5_S4_>:
	__copy_move_b(_BI1 __first, _BI1 __last, _BI2 __result)
 8011ddc:	b580      	push	{r7, lr}
 8011dde:	b086      	sub	sp, #24
 8011de0:	af00      	add	r7, sp, #0
 8011de2:	60f8      	str	r0, [r7, #12]
 8011de4:	60b9      	str	r1, [r7, #8]
 8011de6:	607a      	str	r2, [r7, #4]
	    __n = __last - __first;
 8011de8:	68ba      	ldr	r2, [r7, #8]
 8011dea:	68fb      	ldr	r3, [r7, #12]
 8011dec:	1ad3      	subs	r3, r2, r3
 8011dee:	109b      	asrs	r3, r3, #2
 8011df0:	617b      	str	r3, [r7, #20]
	  for (; __n > 0; --__n)
 8011df2:	e00f      	b.n	8011e14 <_ZNSt20__copy_move_backwardILb1ELb0ESt26random_access_iterator_tagE13__copy_move_bIPfS3_EET0_T_S5_S4_+0x38>
	    *--__result = std::move(*--__last);
 8011df4:	68bb      	ldr	r3, [r7, #8]
 8011df6:	3b04      	subs	r3, #4
 8011df8:	60bb      	str	r3, [r7, #8]
 8011dfa:	68b8      	ldr	r0, [r7, #8]
 8011dfc:	f7fa ffa2 	bl	800cd44 <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>
 8011e00:	4603      	mov	r3, r0
 8011e02:	681a      	ldr	r2, [r3, #0]
 8011e04:	687b      	ldr	r3, [r7, #4]
 8011e06:	3b04      	subs	r3, #4
 8011e08:	607b      	str	r3, [r7, #4]
 8011e0a:	687b      	ldr	r3, [r7, #4]
 8011e0c:	601a      	str	r2, [r3, #0]
	  for (; __n > 0; --__n)
 8011e0e:	697b      	ldr	r3, [r7, #20]
 8011e10:	3b01      	subs	r3, #1
 8011e12:	617b      	str	r3, [r7, #20]
 8011e14:	697b      	ldr	r3, [r7, #20]
 8011e16:	2b00      	cmp	r3, #0
 8011e18:	dcec      	bgt.n	8011df4 <_ZNSt20__copy_move_backwardILb1ELb0ESt26random_access_iterator_tagE13__copy_move_bIPfS3_EET0_T_S5_S4_+0x18>
	  return __result;
 8011e1a:	687b      	ldr	r3, [r7, #4]
	}
 8011e1c:	4618      	mov	r0, r3
 8011e1e:	3718      	adds	r7, #24
 8011e20:	46bd      	mov	sp, r7
 8011e22:	bd80      	pop	{r7, pc}

08011e24 <_ZNSt20__copy_move_backwardILb1ELb1ESt26random_access_iterator_tagE13__copy_move_bIfEEPT_PKS3_S6_S4_>:
	__copy_move_b(const _Tp* __first, const _Tp* __last, _Tp* __result)
 8011e24:	b580      	push	{r7, lr}
 8011e26:	b086      	sub	sp, #24
 8011e28:	af00      	add	r7, sp, #0
 8011e2a:	60f8      	str	r0, [r7, #12]
 8011e2c:	60b9      	str	r1, [r7, #8]
 8011e2e:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 8011e30:	68ba      	ldr	r2, [r7, #8]
 8011e32:	68fb      	ldr	r3, [r7, #12]
 8011e34:	1ad3      	subs	r3, r2, r3
 8011e36:	109b      	asrs	r3, r3, #2
 8011e38:	617b      	str	r3, [r7, #20]
	  if (_Num)
 8011e3a:	697b      	ldr	r3, [r7, #20]
 8011e3c:	2b00      	cmp	r3, #0
 8011e3e:	d00a      	beq.n	8011e56 <_ZNSt20__copy_move_backwardILb1ELb1ESt26random_access_iterator_tagE13__copy_move_bIfEEPT_PKS3_S6_S4_+0x32>
	    __builtin_memmove(__result - _Num, __first, sizeof(_Tp) * _Num);
 8011e40:	697b      	ldr	r3, [r7, #20]
 8011e42:	009b      	lsls	r3, r3, #2
 8011e44:	425b      	negs	r3, r3
 8011e46:	687a      	ldr	r2, [r7, #4]
 8011e48:	18d0      	adds	r0, r2, r3
 8011e4a:	697b      	ldr	r3, [r7, #20]
 8011e4c:	009b      	lsls	r3, r3, #2
 8011e4e:	461a      	mov	r2, r3
 8011e50:	68f9      	ldr	r1, [r7, #12]
 8011e52:	f012 fc94 	bl	802477e <memmove>
	  return __result - _Num;
 8011e56:	697b      	ldr	r3, [r7, #20]
 8011e58:	009b      	lsls	r3, r3, #2
 8011e5a:	425b      	negs	r3, r3
 8011e5c:	687a      	ldr	r2, [r7, #4]
 8011e5e:	4413      	add	r3, r2
	}
 8011e60:	4618      	mov	r0, r3
 8011e62:	3718      	adds	r7, #24
 8011e64:	46bd      	mov	sp, r7
 8011e66:	bd80      	pop	{r7, pc}

08011e68 <_ZSt19__relocate_object_aIN3jlb4EdgeES1_SaIS1_EEvPT_PT0_RT1_>:
    __relocate_object_a(_Tp* __restrict __dest, _Up* __restrict __orig,
 8011e68:	b580      	push	{r7, lr}
 8011e6a:	b084      	sub	sp, #16
 8011e6c:	af00      	add	r7, sp, #0
 8011e6e:	60f8      	str	r0, [r7, #12]
 8011e70:	60b9      	str	r1, [r7, #8]
 8011e72:	607a      	str	r2, [r7, #4]
      __traits::construct(__alloc, __dest, std::move(*__orig));
 8011e74:	68b8      	ldr	r0, [r7, #8]
 8011e76:	f7fb fb50 	bl	800d51a <_ZSt4moveIRN3jlb4EdgeEEONSt16remove_referenceIT_E4typeEOS4_>
 8011e7a:	4603      	mov	r3, r0
 8011e7c:	461a      	mov	r2, r3
 8011e7e:	68f9      	ldr	r1, [r7, #12]
 8011e80:	6878      	ldr	r0, [r7, #4]
 8011e82:	f7fc fa96 	bl	800e3b2 <_ZNSt16allocator_traitsISaIN3jlb4EdgeEEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>
      __traits::destroy(__alloc, std::__addressof(*__orig));
 8011e86:	68b8      	ldr	r0, [r7, #8]
 8011e88:	f7fe fdc5 	bl	8010a16 <_ZSt11__addressofIN3jlb4EdgeEEPT_RS2_>
 8011e8c:	4603      	mov	r3, r0
 8011e8e:	4619      	mov	r1, r3
 8011e90:	6878      	ldr	r0, [r7, #4]
 8011e92:	f7fd fe9e 	bl	800fbd2 <_ZNSt16allocator_traitsISaIN3jlb4EdgeEEE7destroyIS1_EEvRS2_PT_>
    }
 8011e96:	bf00      	nop
 8011e98:	3710      	adds	r7, #16
 8011e9a:	46bd      	mov	sp, r7
 8011e9c:	bd80      	pop	{r7, pc}

08011e9e <_ZN9__gnu_cxx13new_allocatorIN3jlb4EdgeEEC1ERKS3_>:
      new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
 8011e9e:	b480      	push	{r7}
 8011ea0:	b083      	sub	sp, #12
 8011ea2:	af00      	add	r7, sp, #0
 8011ea4:	6078      	str	r0, [r7, #4]
 8011ea6:	6039      	str	r1, [r7, #0]
 8011ea8:	687b      	ldr	r3, [r7, #4]
 8011eaa:	4618      	mov	r0, r3
 8011eac:	370c      	adds	r7, #12
 8011eae:	46bd      	mov	sp, r7
 8011eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011eb4:	4770      	bx	lr

08011eb6 <_ZN9__gnu_cxxeqIPKN3jlb4EdgeESt6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T0_EESD_>:
    operator==(const __normal_iterator<_Iterator, _Container>& __lhs,
 8011eb6:	b590      	push	{r4, r7, lr}
 8011eb8:	b083      	sub	sp, #12
 8011eba:	af00      	add	r7, sp, #0
 8011ebc:	6078      	str	r0, [r7, #4]
 8011ebe:	6039      	str	r1, [r7, #0]
    { return __lhs.base() == __rhs.base(); }
 8011ec0:	6878      	ldr	r0, [r7, #4]
 8011ec2:	f7ff fd74 	bl	80119ae <_ZNK9__gnu_cxx17__normal_iteratorIPKN3jlb4EdgeESt6vectorIS2_SaIS2_EEE4baseEv>
 8011ec6:	4603      	mov	r3, r0
 8011ec8:	681c      	ldr	r4, [r3, #0]
 8011eca:	6838      	ldr	r0, [r7, #0]
 8011ecc:	f7ff fd6f 	bl	80119ae <_ZNK9__gnu_cxx17__normal_iteratorIPKN3jlb4EdgeESt6vectorIS2_SaIS2_EEE4baseEv>
 8011ed0:	4603      	mov	r3, r0
 8011ed2:	681b      	ldr	r3, [r3, #0]
 8011ed4:	429c      	cmp	r4, r3
 8011ed6:	bf0c      	ite	eq
 8011ed8:	2301      	moveq	r3, #1
 8011eda:	2300      	movne	r3, #0
 8011edc:	b2db      	uxtb	r3, r3
 8011ede:	4618      	mov	r0, r3
 8011ee0:	370c      	adds	r7, #12
 8011ee2:	46bd      	mov	sp, r7
 8011ee4:	bd90      	pop	{r4, r7, pc}

08011ee6 <_ZNK9__gnu_cxx17__normal_iteratorIPKN3jlb4EdgeESt6vectorIS2_SaIS2_EEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 8011ee6:	b480      	push	{r7}
 8011ee8:	b083      	sub	sp, #12
 8011eea:	af00      	add	r7, sp, #0
 8011eec:	6078      	str	r0, [r7, #4]
      { return *_M_current; }
 8011eee:	687b      	ldr	r3, [r7, #4]
 8011ef0:	681b      	ldr	r3, [r3, #0]
 8011ef2:	4618      	mov	r0, r3
 8011ef4:	370c      	adds	r7, #12
 8011ef6:	46bd      	mov	sp, r7
 8011ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011efc:	4770      	bx	lr

08011efe <_ZN3jlb4EdgeC1ERKS0_>:
    struct Edge
 8011efe:	b580      	push	{r7, lr}
 8011f00:	b082      	sub	sp, #8
 8011f02:	af00      	add	r7, sp, #0
 8011f04:	6078      	str	r0, [r7, #4]
 8011f06:	6039      	str	r1, [r7, #0]
 8011f08:	683b      	ldr	r3, [r7, #0]
 8011f0a:	781a      	ldrb	r2, [r3, #0]
 8011f0c:	687b      	ldr	r3, [r7, #4]
 8011f0e:	701a      	strb	r2, [r3, #0]
 8011f10:	683b      	ldr	r3, [r7, #0]
 8011f12:	685a      	ldr	r2, [r3, #4]
 8011f14:	687b      	ldr	r3, [r7, #4]
 8011f16:	605a      	str	r2, [r3, #4]
 8011f18:	687b      	ldr	r3, [r7, #4]
 8011f1a:	f103 0208 	add.w	r2, r3, #8
 8011f1e:	683b      	ldr	r3, [r7, #0]
 8011f20:	3308      	adds	r3, #8
 8011f22:	4619      	mov	r1, r3
 8011f24:	4610      	mov	r0, r2
 8011f26:	f7fa fd32 	bl	800c98e <_ZNSt6vectorIcSaIcEEC1ERKS1_>
 8011f2a:	683b      	ldr	r3, [r7, #0]
 8011f2c:	695a      	ldr	r2, [r3, #20]
 8011f2e:	687b      	ldr	r3, [r7, #4]
 8011f30:	615a      	str	r2, [r3, #20]
 8011f32:	687b      	ldr	r3, [r7, #4]
 8011f34:	4618      	mov	r0, r3
 8011f36:	3708      	adds	r7, #8
 8011f38:	46bd      	mov	sp, r7
 8011f3a:	bd80      	pop	{r7, pc}

08011f3c <_ZSt10_ConstructIN3jlb4EdgeEJRKS1_EEvPT_DpOT0_>:
    _Construct(_Tp* __p, _Args&&... __args)
 8011f3c:	b590      	push	{r4, r7, lr}
 8011f3e:	b083      	sub	sp, #12
 8011f40:	af00      	add	r7, sp, #0
 8011f42:	6078      	str	r0, [r7, #4]
 8011f44:	6039      	str	r1, [r7, #0]
      ::new((void*)__p) _Tp(std::forward<_Args>(__args)...);
 8011f46:	6838      	ldr	r0, [r7, #0]
 8011f48:	f000 f8e4 	bl	8012114 <_ZSt7forwardIRKN3jlb4EdgeEEOT_RNSt16remove_referenceIS4_E4typeE>
 8011f4c:	4604      	mov	r4, r0
 8011f4e:	687b      	ldr	r3, [r7, #4]
 8011f50:	4619      	mov	r1, r3
 8011f52:	2018      	movs	r0, #24
 8011f54:	f7f0 fde2 	bl	8002b1c <_ZnwjPv>
 8011f58:	4603      	mov	r3, r0
 8011f5a:	4621      	mov	r1, r4
 8011f5c:	4618      	mov	r0, r3
 8011f5e:	f7ff ffce 	bl	8011efe <_ZN3jlb4EdgeC1ERKS0_>
    }
 8011f62:	370c      	adds	r7, #12
 8011f64:	46bd      	mov	sp, r7
 8011f66:	bd90      	pop	{r4, r7, pc}

08011f68 <_ZSt10_ConstructIN3jlb4NodeEJRKS1_EEvPT_DpOT0_>:
    _Construct(_Tp* __p, _Args&&... __args)
 8011f68:	b590      	push	{r4, r7, lr}
 8011f6a:	b083      	sub	sp, #12
 8011f6c:	af00      	add	r7, sp, #0
 8011f6e:	6078      	str	r0, [r7, #4]
 8011f70:	6039      	str	r1, [r7, #0]
      ::new((void*)__p) _Tp(std::forward<_Args>(__args)...);
 8011f72:	6838      	ldr	r0, [r7, #0]
 8011f74:	f000 f8d9 	bl	801212a <_ZSt7forwardIRKN3jlb4NodeEEOT_RNSt16remove_referenceIS4_E4typeE>
 8011f78:	4604      	mov	r4, r0
 8011f7a:	687b      	ldr	r3, [r7, #4]
 8011f7c:	4619      	mov	r1, r3
 8011f7e:	2018      	movs	r0, #24
 8011f80:	f7f0 fdcc 	bl	8002b1c <_ZnwjPv>
 8011f84:	4603      	mov	r3, r0
 8011f86:	4621      	mov	r1, r4
 8011f88:	4618      	mov	r0, r3
 8011f8a:	f7fc fb25 	bl	800e5d8 <_ZN3jlb4NodeC1ERKS0_>
    }
 8011f8e:	370c      	adds	r7, #12
 8011f90:	46bd      	mov	sp, r7
 8011f92:	bd90      	pop	{r4, r7, pc}

08011f94 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPPfS4_EET0_T_S6_S5_>:
	__copy_m(_II __first, _II __last, _OI __result)
 8011f94:	b480      	push	{r7}
 8011f96:	b087      	sub	sp, #28
 8011f98:	af00      	add	r7, sp, #0
 8011f9a:	60f8      	str	r0, [r7, #12]
 8011f9c:	60b9      	str	r1, [r7, #8]
 8011f9e:	607a      	str	r2, [r7, #4]
	  for(_Distance __n = __last - __first; __n > 0; --__n)
 8011fa0:	68ba      	ldr	r2, [r7, #8]
 8011fa2:	68fb      	ldr	r3, [r7, #12]
 8011fa4:	1ad3      	subs	r3, r2, r3
 8011fa6:	109b      	asrs	r3, r3, #2
 8011fa8:	617b      	str	r3, [r7, #20]
 8011faa:	e00c      	b.n	8011fc6 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPPfS4_EET0_T_S6_S5_+0x32>
	      *__result = *__first;
 8011fac:	68fb      	ldr	r3, [r7, #12]
 8011fae:	681a      	ldr	r2, [r3, #0]
 8011fb0:	687b      	ldr	r3, [r7, #4]
 8011fb2:	601a      	str	r2, [r3, #0]
	      ++__first;
 8011fb4:	68fb      	ldr	r3, [r7, #12]
 8011fb6:	3304      	adds	r3, #4
 8011fb8:	60fb      	str	r3, [r7, #12]
	      ++__result;
 8011fba:	687b      	ldr	r3, [r7, #4]
 8011fbc:	3304      	adds	r3, #4
 8011fbe:	607b      	str	r3, [r7, #4]
	  for(_Distance __n = __last - __first; __n > 0; --__n)
 8011fc0:	697b      	ldr	r3, [r7, #20]
 8011fc2:	3b01      	subs	r3, #1
 8011fc4:	617b      	str	r3, [r7, #20]
 8011fc6:	697b      	ldr	r3, [r7, #20]
 8011fc8:	2b00      	cmp	r3, #0
 8011fca:	dcef      	bgt.n	8011fac <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPPfS4_EET0_T_S6_S5_+0x18>
	  return __result;
 8011fcc:	687b      	ldr	r3, [r7, #4]
	}
 8011fce:	4618      	mov	r0, r3
 8011fd0:	371c      	adds	r7, #28
 8011fd2:	46bd      	mov	sp, r7
 8011fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011fd8:	4770      	bx	lr

08011fda <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIPfEEPT_PKS4_S7_S5_>:
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 8011fda:	b580      	push	{r7, lr}
 8011fdc:	b086      	sub	sp, #24
 8011fde:	af00      	add	r7, sp, #0
 8011fe0:	60f8      	str	r0, [r7, #12]
 8011fe2:	60b9      	str	r1, [r7, #8]
 8011fe4:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 8011fe6:	68ba      	ldr	r2, [r7, #8]
 8011fe8:	68fb      	ldr	r3, [r7, #12]
 8011fea:	1ad3      	subs	r3, r2, r3
 8011fec:	109b      	asrs	r3, r3, #2
 8011fee:	617b      	str	r3, [r7, #20]
	  if (_Num)
 8011ff0:	697b      	ldr	r3, [r7, #20]
 8011ff2:	2b00      	cmp	r3, #0
 8011ff4:	d006      	beq.n	8012004 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIPfEEPT_PKS4_S7_S5_+0x2a>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 8011ff6:	697b      	ldr	r3, [r7, #20]
 8011ff8:	009b      	lsls	r3, r3, #2
 8011ffa:	461a      	mov	r2, r3
 8011ffc:	68f9      	ldr	r1, [r7, #12]
 8011ffe:	6878      	ldr	r0, [r7, #4]
 8012000:	f012 fbbd 	bl	802477e <memmove>
	  return __result + _Num;
 8012004:	697b      	ldr	r3, [r7, #20]
 8012006:	009b      	lsls	r3, r3, #2
 8012008:	687a      	ldr	r2, [r7, #4]
 801200a:	4413      	add	r3, r2
	}
 801200c:	4618      	mov	r0, r3
 801200e:	3718      	adds	r7, #24
 8012010:	46bd      	mov	sp, r7
 8012012:	bd80      	pop	{r7, pc}

08012014 <_ZNSt20__copy_move_backwardILb0ELb0ESt26random_access_iterator_tagE13__copy_move_bIPPfS4_EET0_T_S6_S5_>:
	__copy_move_b(_BI1 __first, _BI1 __last, _BI2 __result)
 8012014:	b480      	push	{r7}
 8012016:	b087      	sub	sp, #28
 8012018:	af00      	add	r7, sp, #0
 801201a:	60f8      	str	r0, [r7, #12]
 801201c:	60b9      	str	r1, [r7, #8]
 801201e:	607a      	str	r2, [r7, #4]
	    __n = __last - __first;
 8012020:	68ba      	ldr	r2, [r7, #8]
 8012022:	68fb      	ldr	r3, [r7, #12]
 8012024:	1ad3      	subs	r3, r2, r3
 8012026:	109b      	asrs	r3, r3, #2
 8012028:	617b      	str	r3, [r7, #20]
	  for (; __n > 0; --__n)
 801202a:	e00c      	b.n	8012046 <_ZNSt20__copy_move_backwardILb0ELb0ESt26random_access_iterator_tagE13__copy_move_bIPPfS4_EET0_T_S6_S5_+0x32>
	    *--__result = *--__last;
 801202c:	68bb      	ldr	r3, [r7, #8]
 801202e:	3b04      	subs	r3, #4
 8012030:	60bb      	str	r3, [r7, #8]
 8012032:	68bb      	ldr	r3, [r7, #8]
 8012034:	681a      	ldr	r2, [r3, #0]
 8012036:	687b      	ldr	r3, [r7, #4]
 8012038:	3b04      	subs	r3, #4
 801203a:	607b      	str	r3, [r7, #4]
 801203c:	687b      	ldr	r3, [r7, #4]
 801203e:	601a      	str	r2, [r3, #0]
	  for (; __n > 0; --__n)
 8012040:	697b      	ldr	r3, [r7, #20]
 8012042:	3b01      	subs	r3, #1
 8012044:	617b      	str	r3, [r7, #20]
 8012046:	697b      	ldr	r3, [r7, #20]
 8012048:	2b00      	cmp	r3, #0
 801204a:	dcef      	bgt.n	801202c <_ZNSt20__copy_move_backwardILb0ELb0ESt26random_access_iterator_tagE13__copy_move_bIPPfS4_EET0_T_S6_S5_+0x18>
	  return __result;
 801204c:	687b      	ldr	r3, [r7, #4]
	}
 801204e:	4618      	mov	r0, r3
 8012050:	371c      	adds	r7, #28
 8012052:	46bd      	mov	sp, r7
 8012054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012058:	4770      	bx	lr

0801205a <_ZNSt20__copy_move_backwardILb0ELb1ESt26random_access_iterator_tagE13__copy_move_bIPfEEPT_PKS4_S7_S5_>:
	__copy_move_b(const _Tp* __first, const _Tp* __last, _Tp* __result)
 801205a:	b580      	push	{r7, lr}
 801205c:	b086      	sub	sp, #24
 801205e:	af00      	add	r7, sp, #0
 8012060:	60f8      	str	r0, [r7, #12]
 8012062:	60b9      	str	r1, [r7, #8]
 8012064:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 8012066:	68ba      	ldr	r2, [r7, #8]
 8012068:	68fb      	ldr	r3, [r7, #12]
 801206a:	1ad3      	subs	r3, r2, r3
 801206c:	109b      	asrs	r3, r3, #2
 801206e:	617b      	str	r3, [r7, #20]
	  if (_Num)
 8012070:	697b      	ldr	r3, [r7, #20]
 8012072:	2b00      	cmp	r3, #0
 8012074:	d00a      	beq.n	801208c <_ZNSt20__copy_move_backwardILb0ELb1ESt26random_access_iterator_tagE13__copy_move_bIPfEEPT_PKS4_S7_S5_+0x32>
	    __builtin_memmove(__result - _Num, __first, sizeof(_Tp) * _Num);
 8012076:	697b      	ldr	r3, [r7, #20]
 8012078:	009b      	lsls	r3, r3, #2
 801207a:	425b      	negs	r3, r3
 801207c:	687a      	ldr	r2, [r7, #4]
 801207e:	18d0      	adds	r0, r2, r3
 8012080:	697b      	ldr	r3, [r7, #20]
 8012082:	009b      	lsls	r3, r3, #2
 8012084:	461a      	mov	r2, r3
 8012086:	68f9      	ldr	r1, [r7, #12]
 8012088:	f012 fb79 	bl	802477e <memmove>
	  return __result - _Num;
 801208c:	697b      	ldr	r3, [r7, #20]
 801208e:	009b      	lsls	r3, r3, #2
 8012090:	425b      	negs	r3, r3
 8012092:	687a      	ldr	r2, [r7, #4]
 8012094:	4413      	add	r3, r2
	}
 8012096:	4618      	mov	r0, r3
 8012098:	3718      	adds	r7, #24
 801209a:	46bd      	mov	sp, r7
 801209c:	bd80      	pop	{r7, pc}

0801209e <_ZSt4copyISt13move_iteratorIPcES1_ET0_T_S4_S3_>:
    copy(_II __first, _II __last, _OI __result)
 801209e:	b590      	push	{r4, r7, lr}
 80120a0:	b085      	sub	sp, #20
 80120a2:	af00      	add	r7, sp, #0
 80120a4:	60f8      	str	r0, [r7, #12]
 80120a6:	60b9      	str	r1, [r7, #8]
 80120a8:	607a      	str	r2, [r7, #4]
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 80120aa:	68f8      	ldr	r0, [r7, #12]
 80120ac:	f000 f848 	bl	8012140 <_ZSt12__miter_baseIPcEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>
 80120b0:	4604      	mov	r4, r0
 80120b2:	68b8      	ldr	r0, [r7, #8]
 80120b4:	f000 f844 	bl	8012140 <_ZSt12__miter_baseIPcEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>
 80120b8:	4603      	mov	r3, r0
 80120ba:	687a      	ldr	r2, [r7, #4]
 80120bc:	4619      	mov	r1, r3
 80120be:	4620      	mov	r0, r4
 80120c0:	f000 f850 	bl	8012164 <_ZSt13__copy_move_aILb1EPcS0_ET1_T0_S2_S1_>
 80120c4:	4603      	mov	r3, r0
    }
 80120c6:	4618      	mov	r0, r3
 80120c8:	3714      	adds	r7, #20
 80120ca:	46bd      	mov	sp, r7
 80120cc:	bd90      	pop	{r4, r7, pc}

080120ce <_ZSt13__copy_move_aILb0EPcS0_ET1_T0_S2_S1_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 80120ce:	b5b0      	push	{r4, r5, r7, lr}
 80120d0:	b084      	sub	sp, #16
 80120d2:	af00      	add	r7, sp, #0
 80120d4:	60f8      	str	r0, [r7, #12]
 80120d6:	60b9      	str	r1, [r7, #8]
 80120d8:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 80120da:	68f8      	ldr	r0, [r7, #12]
 80120dc:	f7fb fe9a 	bl	800de14 <_ZSt12__niter_baseIPcET_S1_>
 80120e0:	4604      	mov	r4, r0
 80120e2:	68b8      	ldr	r0, [r7, #8]
 80120e4:	f7fb fe96 	bl	800de14 <_ZSt12__niter_baseIPcET_S1_>
 80120e8:	4605      	mov	r5, r0
 80120ea:	687b      	ldr	r3, [r7, #4]
 80120ec:	4618      	mov	r0, r3
 80120ee:	f7fb fe91 	bl	800de14 <_ZSt12__niter_baseIPcET_S1_>
 80120f2:	4603      	mov	r3, r0
 80120f4:	461a      	mov	r2, r3
 80120f6:	4629      	mov	r1, r5
 80120f8:	4620      	mov	r0, r4
 80120fa:	f7fe ff36 	bl	8010f6a <_ZSt14__copy_move_a1ILb0EPcS0_ET1_T0_S2_S1_>
 80120fe:	4602      	mov	r2, r0
 8012100:	1d3b      	adds	r3, r7, #4
 8012102:	4611      	mov	r1, r2
 8012104:	4618      	mov	r0, r3
 8012106:	f7fb fea0 	bl	800de4a <_ZSt12__niter_wrapIPcET_RKS1_S1_>
 801210a:	4603      	mov	r3, r0
    }
 801210c:	4618      	mov	r0, r3
 801210e:	3710      	adds	r7, #16
 8012110:	46bd      	mov	sp, r7
 8012112:	bdb0      	pop	{r4, r5, r7, pc}

08012114 <_ZSt7forwardIRKN3jlb4EdgeEEOT_RNSt16remove_referenceIS4_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8012114:	b480      	push	{r7}
 8012116:	b083      	sub	sp, #12
 8012118:	af00      	add	r7, sp, #0
 801211a:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 801211c:	687b      	ldr	r3, [r7, #4]
 801211e:	4618      	mov	r0, r3
 8012120:	370c      	adds	r7, #12
 8012122:	46bd      	mov	sp, r7
 8012124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012128:	4770      	bx	lr

0801212a <_ZSt7forwardIRKN3jlb4NodeEEOT_RNSt16remove_referenceIS4_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 801212a:	b480      	push	{r7}
 801212c:	b083      	sub	sp, #12
 801212e:	af00      	add	r7, sp, #0
 8012130:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8012132:	687b      	ldr	r3, [r7, #4]
 8012134:	4618      	mov	r0, r3
 8012136:	370c      	adds	r7, #12
 8012138:	46bd      	mov	sp, r7
 801213a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801213e:	4770      	bx	lr

08012140 <_ZSt12__miter_baseIPcEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>:
    };

  template<typename _Iterator>
    _GLIBCXX20_CONSTEXPR
    auto
    __miter_base(move_iterator<_Iterator> __it)
 8012140:	b580      	push	{r7, lr}
 8012142:	b082      	sub	sp, #8
 8012144:	af00      	add	r7, sp, #0
 8012146:	6078      	str	r0, [r7, #4]
    -> decltype(__miter_base(__it.base()))
    { return __miter_base(__it.base()); }
 8012148:	1d3b      	adds	r3, r7, #4
 801214a:	4618      	mov	r0, r3
 801214c:	f000 f82d 	bl	80121aa <_ZNKRSt13move_iteratorIPcE4baseEv>
 8012150:	4603      	mov	r3, r0
 8012152:	681b      	ldr	r3, [r3, #0]
 8012154:	4618      	mov	r0, r3
 8012156:	f7fe f8ad 	bl	80102b4 <_ZSt12__miter_baseIPcET_S1_>
 801215a:	4603      	mov	r3, r0
 801215c:	4618      	mov	r0, r3
 801215e:	3708      	adds	r7, #8
 8012160:	46bd      	mov	sp, r7
 8012162:	bd80      	pop	{r7, pc}

08012164 <_ZSt13__copy_move_aILb1EPcS0_ET1_T0_S2_S1_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 8012164:	b5b0      	push	{r4, r5, r7, lr}
 8012166:	b084      	sub	sp, #16
 8012168:	af00      	add	r7, sp, #0
 801216a:	60f8      	str	r0, [r7, #12]
 801216c:	60b9      	str	r1, [r7, #8]
 801216e:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 8012170:	68f8      	ldr	r0, [r7, #12]
 8012172:	f7fb fe4f 	bl	800de14 <_ZSt12__niter_baseIPcET_S1_>
 8012176:	4604      	mov	r4, r0
 8012178:	68b8      	ldr	r0, [r7, #8]
 801217a:	f7fb fe4b 	bl	800de14 <_ZSt12__niter_baseIPcET_S1_>
 801217e:	4605      	mov	r5, r0
 8012180:	687b      	ldr	r3, [r7, #4]
 8012182:	4618      	mov	r0, r3
 8012184:	f7fb fe46 	bl	800de14 <_ZSt12__niter_baseIPcET_S1_>
 8012188:	4603      	mov	r3, r0
 801218a:	461a      	mov	r2, r3
 801218c:	4629      	mov	r1, r5
 801218e:	4620      	mov	r0, r4
 8012190:	f000 f816 	bl	80121c0 <_ZSt14__copy_move_a1ILb1EPcS0_ET1_T0_S2_S1_>
 8012194:	4602      	mov	r2, r0
 8012196:	1d3b      	adds	r3, r7, #4
 8012198:	4611      	mov	r1, r2
 801219a:	4618      	mov	r0, r3
 801219c:	f7fb fe55 	bl	800de4a <_ZSt12__niter_wrapIPcET_RKS1_S1_>
 80121a0:	4603      	mov	r3, r0
    }
 80121a2:	4618      	mov	r0, r3
 80121a4:	3710      	adds	r7, #16
 80121a6:	46bd      	mov	sp, r7
 80121a8:	bdb0      	pop	{r4, r5, r7, pc}

080121aa <_ZNKRSt13move_iteratorIPcE4baseEv>:
      base() const & noexcept
 80121aa:	b480      	push	{r7}
 80121ac:	b083      	sub	sp, #12
 80121ae:	af00      	add	r7, sp, #0
 80121b0:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 80121b2:	687b      	ldr	r3, [r7, #4]
 80121b4:	4618      	mov	r0, r3
 80121b6:	370c      	adds	r7, #12
 80121b8:	46bd      	mov	sp, r7
 80121ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80121be:	4770      	bx	lr

080121c0 <_ZSt14__copy_move_a1ILb1EPcS0_ET1_T0_S2_S1_>:
    __copy_move_a1(_II __first, _II __last, _OI __result)
 80121c0:	b580      	push	{r7, lr}
 80121c2:	b084      	sub	sp, #16
 80121c4:	af00      	add	r7, sp, #0
 80121c6:	60f8      	str	r0, [r7, #12]
 80121c8:	60b9      	str	r1, [r7, #8]
 80121ca:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_a2<_IsMove>(__first, __last, __result); }
 80121cc:	687a      	ldr	r2, [r7, #4]
 80121ce:	68b9      	ldr	r1, [r7, #8]
 80121d0:	68f8      	ldr	r0, [r7, #12]
 80121d2:	f000 f805 	bl	80121e0 <_ZSt14__copy_move_a2ILb1EPcS0_ET1_T0_S2_S1_>
 80121d6:	4603      	mov	r3, r0
 80121d8:	4618      	mov	r0, r3
 80121da:	3710      	adds	r7, #16
 80121dc:	46bd      	mov	sp, r7
 80121de:	bd80      	pop	{r7, pc}

080121e0 <_ZSt14__copy_move_a2ILb1EPcS0_ET1_T0_S2_S1_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 80121e0:	b580      	push	{r7, lr}
 80121e2:	b084      	sub	sp, #16
 80121e4:	af00      	add	r7, sp, #0
 80121e6:	60f8      	str	r0, [r7, #12]
 80121e8:	60b9      	str	r1, [r7, #8]
 80121ea:	607a      	str	r2, [r7, #4]
      if (std::is_constant_evaluated())
 80121ec:	f7f0 fc8e 	bl	8002b0c <_ZSt21is_constant_evaluatedv>
 80121f0:	4603      	mov	r3, r0
 80121f2:	2b00      	cmp	r3, #0
 80121f4:	d006      	beq.n	8012204 <_ZSt14__copy_move_a2ILb1EPcS0_ET1_T0_S2_S1_+0x24>
	  __copy_m(__first, __last, __result);
 80121f6:	687a      	ldr	r2, [r7, #4]
 80121f8:	68b9      	ldr	r1, [r7, #8]
 80121fa:	68f8      	ldr	r0, [r7, #12]
 80121fc:	f000 f80d 	bl	801221a <_ZNSt11__copy_moveILb1ELb0ESt26random_access_iterator_tagE8__copy_mIPcS3_EET0_T_S5_S4_>
 8012200:	4603      	mov	r3, r0
 8012202:	e006      	b.n	8012212 <_ZSt14__copy_move_a2ILb1EPcS0_ET1_T0_S2_S1_+0x32>
			      _Category>::__copy_m(__first, __last, __result);
 8012204:	687a      	ldr	r2, [r7, #4]
 8012206:	68b9      	ldr	r1, [r7, #8]
 8012208:	68f8      	ldr	r0, [r7, #12]
 801220a:	f000 f829 	bl	8012260 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIcEEPT_PKS3_S6_S4_>
 801220e:	4603      	mov	r3, r0
 8012210:	bf00      	nop
    }
 8012212:	4618      	mov	r0, r3
 8012214:	3710      	adds	r7, #16
 8012216:	46bd      	mov	sp, r7
 8012218:	bd80      	pop	{r7, pc}

0801221a <_ZNSt11__copy_moveILb1ELb0ESt26random_access_iterator_tagE8__copy_mIPcS3_EET0_T_S5_S4_>:
	__copy_m(_II __first, _II __last, _OI __result)
 801221a:	b580      	push	{r7, lr}
 801221c:	b086      	sub	sp, #24
 801221e:	af00      	add	r7, sp, #0
 8012220:	60f8      	str	r0, [r7, #12]
 8012222:	60b9      	str	r1, [r7, #8]
 8012224:	607a      	str	r2, [r7, #4]
	  for(_Distance __n = __last - __first; __n > 0; --__n)
 8012226:	68ba      	ldr	r2, [r7, #8]
 8012228:	68fb      	ldr	r3, [r7, #12]
 801222a:	1ad3      	subs	r3, r2, r3
 801222c:	617b      	str	r3, [r7, #20]
 801222e:	e00f      	b.n	8012250 <_ZNSt11__copy_moveILb1ELb0ESt26random_access_iterator_tagE8__copy_mIPcS3_EET0_T_S5_S4_+0x36>
	      *__result = std::move(*__first);
 8012230:	68f8      	ldr	r0, [r7, #12]
 8012232:	f7fb fd1d 	bl	800dc70 <_ZSt4moveIRcEONSt16remove_referenceIT_E4typeEOS2_>
 8012236:	4603      	mov	r3, r0
 8012238:	781a      	ldrb	r2, [r3, #0]
 801223a:	687b      	ldr	r3, [r7, #4]
 801223c:	701a      	strb	r2, [r3, #0]
	      ++__first;
 801223e:	68fb      	ldr	r3, [r7, #12]
 8012240:	3301      	adds	r3, #1
 8012242:	60fb      	str	r3, [r7, #12]
	      ++__result;
 8012244:	687b      	ldr	r3, [r7, #4]
 8012246:	3301      	adds	r3, #1
 8012248:	607b      	str	r3, [r7, #4]
	  for(_Distance __n = __last - __first; __n > 0; --__n)
 801224a:	697b      	ldr	r3, [r7, #20]
 801224c:	3b01      	subs	r3, #1
 801224e:	617b      	str	r3, [r7, #20]
 8012250:	697b      	ldr	r3, [r7, #20]
 8012252:	2b00      	cmp	r3, #0
 8012254:	dcec      	bgt.n	8012230 <_ZNSt11__copy_moveILb1ELb0ESt26random_access_iterator_tagE8__copy_mIPcS3_EET0_T_S5_S4_+0x16>
	  return __result;
 8012256:	687b      	ldr	r3, [r7, #4]
	}
 8012258:	4618      	mov	r0, r3
 801225a:	3718      	adds	r7, #24
 801225c:	46bd      	mov	sp, r7
 801225e:	bd80      	pop	{r7, pc}

08012260 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIcEEPT_PKS3_S6_S4_>:
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 8012260:	b580      	push	{r7, lr}
 8012262:	b086      	sub	sp, #24
 8012264:	af00      	add	r7, sp, #0
 8012266:	60f8      	str	r0, [r7, #12]
 8012268:	60b9      	str	r1, [r7, #8]
 801226a:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 801226c:	68ba      	ldr	r2, [r7, #8]
 801226e:	68fb      	ldr	r3, [r7, #12]
 8012270:	1ad3      	subs	r3, r2, r3
 8012272:	617b      	str	r3, [r7, #20]
	  if (_Num)
 8012274:	697b      	ldr	r3, [r7, #20]
 8012276:	2b00      	cmp	r3, #0
 8012278:	d005      	beq.n	8012286 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIcEEPT_PKS3_S6_S4_+0x26>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 801227a:	697b      	ldr	r3, [r7, #20]
 801227c:	461a      	mov	r2, r3
 801227e:	68f9      	ldr	r1, [r7, #12]
 8012280:	6878      	ldr	r0, [r7, #4]
 8012282:	f012 fa7c 	bl	802477e <memmove>
	  return __result + _Num;
 8012286:	697b      	ldr	r3, [r7, #20]
 8012288:	687a      	ldr	r2, [r7, #4]
 801228a:	4413      	add	r3, r2
	}
 801228c:	4618      	mov	r0, r3
 801228e:	3718      	adds	r7, #24
 8012290:	46bd      	mov	sp, r7
 8012292:	bd80      	pop	{r7, pc}

08012294 <_ZN3jlb5LogicD1Ev>:
    class Logic
 8012294:	b580      	push	{r7, lr}
 8012296:	b082      	sub	sp, #8
 8012298:	af00      	add	r7, sp, #0
 801229a:	6078      	str	r0, [r7, #4]
 801229c:	687b      	ldr	r3, [r7, #4]
 801229e:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 80122a2:	4618      	mov	r0, r3
 80122a4:	f7f7 fc7c 	bl	8009ba0 <_ZN3jlb12SignalSenderD1Ev>
 80122a8:	687b      	ldr	r3, [r7, #4]
 80122aa:	f503 73ca 	add.w	r3, r3, #404	; 0x194
 80122ae:	4618      	mov	r0, r3
 80122b0:	f7f6 fbdc 	bl	8008a6c <_ZN3jlb5GraphD1Ev>
 80122b4:	687b      	ldr	r3, [r7, #4]
 80122b6:	3390      	adds	r3, #144	; 0x90
 80122b8:	4618      	mov	r0, r3
 80122ba:	f7f2 fb9f 	bl	80049fc <_ZN3jlb10ControllerD1Ev>
 80122be:	687b      	ldr	r3, [r7, #4]
 80122c0:	4618      	mov	r0, r3
 80122c2:	f7f6 fc6f 	bl	8008ba4 <_ZN3jlb8OdometryD1Ev>
 80122c6:	687b      	ldr	r3, [r7, #4]
 80122c8:	4618      	mov	r0, r3
 80122ca:	3708      	adds	r7, #8
 80122cc:	46bd      	mov	sp, r7
 80122ce:	bd80      	pop	{r7, pc}

080122d0 <_Z41__static_initialization_and_destruction_0ii>:
}
 80122d0:	b580      	push	{r7, lr}
 80122d2:	b082      	sub	sp, #8
 80122d4:	af00      	add	r7, sp, #0
 80122d6:	6078      	str	r0, [r7, #4]
 80122d8:	6039      	str	r1, [r7, #0]
 80122da:	687b      	ldr	r3, [r7, #4]
 80122dc:	2b01      	cmp	r3, #1
 80122de:	d10e      	bne.n	80122fe <_Z41__static_initialization_and_destruction_0ii+0x2e>
 80122e0:	683b      	ldr	r3, [r7, #0]
 80122e2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80122e6:	4293      	cmp	r3, r2
 80122e8:	d109      	bne.n	80122fe <_Z41__static_initialization_and_destruction_0ii+0x2e>
jlb::Logic logic;
 80122ea:	ed9f 1a0c 	vldr	s2, [pc, #48]	; 801231c <_Z41__static_initialization_and_destruction_0ii+0x4c>
 80122ee:	eddf 0a0b 	vldr	s1, [pc, #44]	; 801231c <_Z41__static_initialization_and_destruction_0ii+0x4c>
 80122f2:	ed9f 0a0a 	vldr	s0, [pc, #40]	; 801231c <_Z41__static_initialization_and_destruction_0ii+0x4c>
 80122f6:	2102      	movs	r1, #2
 80122f8:	4809      	ldr	r0, [pc, #36]	; (8012320 <_Z41__static_initialization_and_destruction_0ii+0x50>)
 80122fa:	f7f9 fd00 	bl	800bcfe <_ZN3jlb5LogicC1ENS_9DirectionEfff>
 80122fe:	687b      	ldr	r3, [r7, #4]
 8012300:	2b00      	cmp	r3, #0
 8012302:	d107      	bne.n	8012314 <_Z41__static_initialization_and_destruction_0ii+0x44>
 8012304:	683b      	ldr	r3, [r7, #0]
 8012306:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801230a:	4293      	cmp	r3, r2
 801230c:	d102      	bne.n	8012314 <_Z41__static_initialization_and_destruction_0ii+0x44>
 801230e:	4804      	ldr	r0, [pc, #16]	; (8012320 <_Z41__static_initialization_and_destruction_0ii+0x50>)
 8012310:	f7ff ffc0 	bl	8012294 <_ZN3jlb5LogicD1Ev>
}
 8012314:	bf00      	nop
 8012316:	3708      	adds	r7, #8
 8012318:	46bd      	mov	sp, r7
 801231a:	bd80      	pop	{r7, pc}
 801231c:	00000000 	.word	0x00000000
 8012320:	20000318 	.word	0x20000318

08012324 <_GLOBAL__sub_I_motor_battery_voltage>:
 8012324:	b580      	push	{r7, lr}
 8012326:	af00      	add	r7, sp, #0
 8012328:	f64f 71ff 	movw	r1, #65535	; 0xffff
 801232c:	2001      	movs	r0, #1
 801232e:	f7ff ffcf 	bl	80122d0 <_Z41__static_initialization_and_destruction_0ii>
 8012332:	bd80      	pop	{r7, pc}

08012334 <_GLOBAL__sub_D_motor_battery_voltage>:
 8012334:	b580      	push	{r7, lr}
 8012336:	af00      	add	r7, sp, #0
 8012338:	f64f 71ff 	movw	r1, #65535	; 0xffff
 801233c:	2000      	movs	r0, #0
 801233e:	f7ff ffc7 	bl	80122d0 <_Z41__static_initialization_and_destruction_0ii>
 8012342:	bd80      	pop	{r7, pc}

08012344 <LL_AHB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8012344:	b480      	push	{r7}
 8012346:	b085      	sub	sp, #20
 8012348:	af00      	add	r7, sp, #0
 801234a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 801234c:	4b08      	ldr	r3, [pc, #32]	; (8012370 <LL_AHB2_GRP1_EnableClock+0x2c>)
 801234e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8012350:	4907      	ldr	r1, [pc, #28]	; (8012370 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8012352:	687b      	ldr	r3, [r7, #4]
 8012354:	4313      	orrs	r3, r2
 8012356:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8012358:	4b05      	ldr	r3, [pc, #20]	; (8012370 <LL_AHB2_GRP1_EnableClock+0x2c>)
 801235a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801235c:	687b      	ldr	r3, [r7, #4]
 801235e:	4013      	ands	r3, r2
 8012360:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8012362:	68fb      	ldr	r3, [r7, #12]
}
 8012364:	bf00      	nop
 8012366:	3714      	adds	r7, #20
 8012368:	46bd      	mov	sp, r7
 801236a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801236e:	4770      	bx	lr
 8012370:	40021000 	.word	0x40021000

08012374 <LL_APB1_GRP2_EnableClock>:
  *         @arg @ref LL_APB1_GRP2_PERIPH_USB
  *         @arg @ref LL_APB1_GRP2_PERIPH_UCPD1
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP2_EnableClock(uint32_t Periphs)
{
 8012374:	b480      	push	{r7}
 8012376:	b085      	sub	sp, #20
 8012378:	af00      	add	r7, sp, #0
 801237a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR2, Periphs);
 801237c:	4b08      	ldr	r3, [pc, #32]	; (80123a0 <LL_APB1_GRP2_EnableClock+0x2c>)
 801237e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8012380:	4907      	ldr	r1, [pc, #28]	; (80123a0 <LL_APB1_GRP2_EnableClock+0x2c>)
 8012382:	687b      	ldr	r3, [r7, #4]
 8012384:	4313      	orrs	r3, r2
 8012386:	65cb      	str	r3, [r1, #92]	; 0x5c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR2, Periphs);
 8012388:	4b05      	ldr	r3, [pc, #20]	; (80123a0 <LL_APB1_GRP2_EnableClock+0x2c>)
 801238a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 801238c:	687b      	ldr	r3, [r7, #4]
 801238e:	4013      	ands	r3, r2
 8012390:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8012392:	68fb      	ldr	r3, [r7, #12]
}
 8012394:	bf00      	nop
 8012396:	3714      	adds	r7, #20
 8012398:	46bd      	mov	sp, r7
 801239a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801239e:	4770      	bx	lr
 80123a0:	40021000 	.word	0x40021000

080123a4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80123a4:	b580      	push	{r7, lr}
 80123a6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80123a8:	f002 f8a3 	bl	80144f2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80123ac:	f000 f862 	bl	8012474 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80123b0:	f000 ffba 	bl	8013328 <_ZL12MX_GPIO_Initv>
  MX_DMA_Init();
 80123b4:	f000 ff8e 	bl	80132d4 <_ZL11MX_DMA_Initv>
  MX_LPUART1_UART_Init();
 80123b8:	f000 fa62 	bl	8012880 <_ZL20MX_LPUART1_UART_Initv>
  MX_RTC_Init();
 80123bc:	f000 fb82 	bl	8012ac4 <_ZL11MX_RTC_Initv>
  MX_UCPD1_Init();
 80123c0:	f000 ff24 	bl	801320c <_ZL13MX_UCPD1_Initv>
  MX_USB_PCD_Init();
 80123c4:	f000 ff58 	bl	8013278 <_ZL15MX_USB_PCD_Initv>
  MX_UART4_Init();
 80123c8:	f000 fabc 	bl	8012944 <_ZL13MX_UART4_Initv>
  MX_SPI1_Init();
 80123cc:	f000 fbce 	bl	8012b6c <_ZL12MX_SPI1_Initv>
  MX_SPI2_Init();
 80123d0:	f000 fc0e 	bl	8012bf0 <_ZL12MX_SPI2_Initv>
  MX_SPI3_Init();
 80123d4:	f000 fc4e 	bl	8012c74 <_ZL12MX_SPI3_Initv>
  MX_TIM1_Init();
 80123d8:	f000 fc8e 	bl	8012cf8 <_ZL12MX_TIM1_Initv>
  MX_TIM3_Init();
 80123dc:	f000 fd2e 	bl	8012e3c <_ZL12MX_TIM3_Initv>
  MX_USART2_UART_Init();
 80123e0:	f000 fb10 	bl	8012a04 <_ZL19MX_USART2_UART_Initv>
  MX_ADC1_Init();
 80123e4:	f000 f8b6 	bl	8012554 <_ZL12MX_ADC1_Initv>
  MX_TIM5_Init();
 80123e8:	f000 fd88 	bl	8012efc <_ZL12MX_TIM5_Initv>
  MX_I2C1_Init();
 80123ec:	f000 f9dc 	bl	80127a8 <_ZL12MX_I2C1_Initv>
  MX_ICACHE_Init();
 80123f0:	f000 fa28 	bl	8012844 <_ZL14MX_ICACHE_Initv>
  MX_TIM6_Init();
 80123f4:	f000 fe22 	bl	801303c <_ZL12MX_TIM6_Initv>
  MX_TIM8_Init();
 80123f8:	f000 fe60 	bl	80130bc <_ZL12MX_TIM8_Initv>
  /* USER CODE BEGIN 2 */
	Radio_Init();
 80123fc:	f7f2 f85a 	bl	80044b4 <_Z10Radio_Initv>
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 8012400:	2100      	movs	r1, #0
 8012402:	4814      	ldr	r0, [pc, #80]	; (8012454 <main+0xb0>)
 8012404:	f008 f98c 	bl	801a720 <HAL_TIM_PWM_Start>

	HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_1);
 8012408:	2100      	movs	r1, #0
 801240a:	4813      	ldr	r0, [pc, #76]	; (8012458 <main+0xb4>)
 801240c:	f008 f988 	bl	801a720 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_4);
 8012410:	210c      	movs	r1, #12
 8012412:	4811      	ldr	r0, [pc, #68]	; (8012458 <main+0xb4>)
 8012414:	f008 f984 	bl	801a720 <HAL_TIM_PWM_Start>

	HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 8012418:	213c      	movs	r1, #60	; 0x3c
 801241a:	4810      	ldr	r0, [pc, #64]	; (801245c <main+0xb8>)
 801241c:	f008 fcd8 	bl	801add0 <HAL_TIM_Encoder_Start>
	HAL_TIM_Base_Start(&htim6);
 8012420:	480f      	ldr	r0, [pc, #60]	; (8012460 <main+0xbc>)
 8012422:	f008 f84d 	bl	801a4c0 <HAL_TIM_Base_Start>

	HAL_TIM_IC_Start_IT(&htim1, TIM_CHANNEL_3);
 8012426:	2108      	movs	r1, #8
 8012428:	480e      	ldr	r0, [pc, #56]	; (8012464 <main+0xc0>)
 801242a:	f008 fae1 	bl	801a9f0 <HAL_TIM_IC_Start_IT>
	HAL_TIM_IC_Start_IT(&htim1, TIM_CHANNEL_4);
 801242e:	210c      	movs	r1, #12
 8012430:	480c      	ldr	r0, [pc, #48]	; (8012464 <main+0xc0>)
 8012432:	f008 fadd 	bl	801a9f0 <HAL_TIM_IC_Start_IT>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8012436:	f00c fb53 	bl	801eae0 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 801243a:	4a0b      	ldr	r2, [pc, #44]	; (8012468 <main+0xc4>)
 801243c:	2100      	movs	r1, #0
 801243e:	480b      	ldr	r0, [pc, #44]	; (801246c <main+0xc8>)
 8012440:	f00c fb98 	bl	801eb74 <osThreadNew>
 8012444:	4603      	mov	r3, r0
 8012446:	4a0a      	ldr	r2, [pc, #40]	; (8012470 <main+0xcc>)
 8012448:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  RegistrateUserTasks();
 801244a:	f7f9 fddf 	bl	800c00c <_Z19RegistrateUserTasksv>
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 801244e:	f00c fb6b 	bl	801eb28 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8012452:	e7fe      	b.n	8012452 <main+0xae>
 8012454:	20000c58 	.word	0x20000c58
 8012458:	20000bc0 	.word	0x20000bc0
 801245c:	20000b74 	.word	0x20000b74
 8012460:	20000c0c 	.word	0x20000c0c
 8012464:	20000b28 	.word	0x20000b28
 8012468:	08025f68 	.word	0x08025f68
 801246c:	0801358d 	.word	0x0801358d
 8012470:	20000f98 	.word	0x20000f98

08012474 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8012474:	b580      	push	{r7, lr}
 8012476:	b098      	sub	sp, #96	; 0x60
 8012478:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 801247a:	f107 0318 	add.w	r3, r7, #24
 801247e:	2248      	movs	r2, #72	; 0x48
 8012480:	2100      	movs	r1, #0
 8012482:	4618      	mov	r0, r3
 8012484:	f012 f995 	bl	80247b2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8012488:	1d3b      	adds	r3, r7, #4
 801248a:	2200      	movs	r2, #0
 801248c:	601a      	str	r2, [r3, #0]
 801248e:	605a      	str	r2, [r3, #4]
 8012490:	609a      	str	r2, [r3, #8]
 8012492:	60da      	str	r2, [r3, #12]
 8012494:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE0) != HAL_OK)
 8012496:	2000      	movs	r0, #0
 8012498:	f005 f9de 	bl	8017858 <HAL_PWREx_ControlVoltageScaling>
 801249c:	4603      	mov	r3, r0
 801249e:	2b00      	cmp	r3, #0
 80124a0:	bf14      	ite	ne
 80124a2:	2301      	movne	r3, #1
 80124a4:	2300      	moveq	r3, #0
 80124a6:	b2db      	uxtb	r3, r3
 80124a8:	2b00      	cmp	r3, #0
 80124aa:	d001      	beq.n	80124b0 <_Z18SystemClock_Configv+0x3c>
  {
    Error_Handler();
 80124ac:	f001 f88d 	bl	80135ca <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80124b0:	f005 f9b4 	bl	801781c <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80124b4:	4b26      	ldr	r3, [pc, #152]	; (8012550 <_Z18SystemClock_Configv+0xdc>)
 80124b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80124ba:	4a25      	ldr	r2, [pc, #148]	; (8012550 <_Z18SystemClock_Configv+0xdc>)
 80124bc:	f023 0318 	bic.w	r3, r3, #24
 80124c0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_LSE
 80124c4:	2334      	movs	r3, #52	; 0x34
 80124c6:	61bb      	str	r3, [r7, #24]
                              |RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80124c8:	2381      	movs	r3, #129	; 0x81
 80124ca:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80124cc:	2301      	movs	r3, #1
 80124ce:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80124d0:	2301      	movs	r3, #1
 80124d2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 80124d4:	2300      	movs	r3, #0
 80124d6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80124d8:	2360      	movs	r3, #96	; 0x60
 80124da:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80124dc:	2302      	movs	r3, #2
 80124de:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80124e0:	2301      	movs	r3, #1
 80124e2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLM = 1;
 80124e4:	2301      	movs	r3, #1
 80124e6:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLN = 55;
 80124e8:	2337      	movs	r3, #55	; 0x37
 80124ea:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80124ec:	2307      	movs	r3, #7
 80124ee:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80124f0:	2302      	movs	r3, #2
 80124f2:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80124f4:	2302      	movs	r3, #2
 80124f6:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80124f8:	f107 0318 	add.w	r3, r7, #24
 80124fc:	4618      	mov	r0, r3
 80124fe:	f005 fa3b 	bl	8017978 <HAL_RCC_OscConfig>
 8012502:	4603      	mov	r3, r0
 8012504:	2b00      	cmp	r3, #0
 8012506:	bf14      	ite	ne
 8012508:	2301      	movne	r3, #1
 801250a:	2300      	moveq	r3, #0
 801250c:	b2db      	uxtb	r3, r3
 801250e:	2b00      	cmp	r3, #0
 8012510:	d001      	beq.n	8012516 <_Z18SystemClock_Configv+0xa2>
  {
    Error_Handler();
 8012512:	f001 f85a 	bl	80135ca <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8012516:	230f      	movs	r3, #15
 8012518:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 801251a:	2303      	movs	r3, #3
 801251c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 801251e:	2300      	movs	r3, #0
 8012520:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8012522:	2300      	movs	r3, #0
 8012524:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8012526:	2300      	movs	r3, #0
 8012528:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 801252a:	1d3b      	adds	r3, r7, #4
 801252c:	2105      	movs	r1, #5
 801252e:	4618      	mov	r0, r3
 8012530:	f005 fef8 	bl	8018324 <HAL_RCC_ClockConfig>
 8012534:	4603      	mov	r3, r0
 8012536:	2b00      	cmp	r3, #0
 8012538:	bf14      	ite	ne
 801253a:	2301      	movne	r3, #1
 801253c:	2300      	moveq	r3, #0
 801253e:	b2db      	uxtb	r3, r3
 8012540:	2b00      	cmp	r3, #0
 8012542:	d001      	beq.n	8012548 <_Z18SystemClock_Configv+0xd4>
  {
    Error_Handler();
 8012544:	f001 f841 	bl	80135ca <Error_Handler>
  }
}
 8012548:	bf00      	nop
 801254a:	3760      	adds	r7, #96	; 0x60
 801254c:	46bd      	mov	sp, r7
 801254e:	bd80      	pop	{r7, pc}
 8012550:	40021000 	.word	0x40021000

08012554 <_ZL12MX_ADC1_Initv>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8012554:	b580      	push	{r7, lr}
 8012556:	b08a      	sub	sp, #40	; 0x28
 8012558:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 801255a:	f107 031c 	add.w	r3, r7, #28
 801255e:	2200      	movs	r2, #0
 8012560:	601a      	str	r2, [r3, #0]
 8012562:	605a      	str	r2, [r3, #4]
 8012564:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8012566:	1d3b      	adds	r3, r7, #4
 8012568:	2200      	movs	r2, #0
 801256a:	601a      	str	r2, [r3, #0]
 801256c:	605a      	str	r2, [r3, #4]
 801256e:	609a      	str	r2, [r3, #8]
 8012570:	60da      	str	r2, [r3, #12]
 8012572:	611a      	str	r2, [r3, #16]
 8012574:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8012576:	4b82      	ldr	r3, [pc, #520]	; (8012780 <_ZL12MX_ADC1_Initv+0x22c>)
 8012578:	4a82      	ldr	r2, [pc, #520]	; (8012784 <_ZL12MX_ADC1_Initv+0x230>)
 801257a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 801257c:	4b80      	ldr	r3, [pc, #512]	; (8012780 <_ZL12MX_ADC1_Initv+0x22c>)
 801257e:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8012582:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8012584:	4b7e      	ldr	r3, [pc, #504]	; (8012780 <_ZL12MX_ADC1_Initv+0x22c>)
 8012586:	2200      	movs	r2, #0
 8012588:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 801258a:	4b7d      	ldr	r3, [pc, #500]	; (8012780 <_ZL12MX_ADC1_Initv+0x22c>)
 801258c:	2200      	movs	r2, #0
 801258e:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8012590:	4b7b      	ldr	r3, [pc, #492]	; (8012780 <_ZL12MX_ADC1_Initv+0x22c>)
 8012592:	2201      	movs	r2, #1
 8012594:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8012596:	4b7a      	ldr	r3, [pc, #488]	; (8012780 <_ZL12MX_ADC1_Initv+0x22c>)
 8012598:	2208      	movs	r2, #8
 801259a:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = ENABLE;
 801259c:	4b78      	ldr	r3, [pc, #480]	; (8012780 <_ZL12MX_ADC1_Initv+0x22c>)
 801259e:	2201      	movs	r2, #1
 80125a0:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80125a2:	4b77      	ldr	r3, [pc, #476]	; (8012780 <_ZL12MX_ADC1_Initv+0x22c>)
 80125a4:	2200      	movs	r2, #0
 80125a6:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 8;
 80125a8:	4b75      	ldr	r3, [pc, #468]	; (8012780 <_ZL12MX_ADC1_Initv+0x22c>)
 80125aa:	2208      	movs	r2, #8
 80125ac:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80125ae:	4b74      	ldr	r3, [pc, #464]	; (8012780 <_ZL12MX_ADC1_Initv+0x22c>)
 80125b0:	2200      	movs	r2, #0
 80125b2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80125b6:	4b72      	ldr	r3, [pc, #456]	; (8012780 <_ZL12MX_ADC1_Initv+0x22c>)
 80125b8:	2200      	movs	r2, #0
 80125ba:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80125bc:	4b70      	ldr	r3, [pc, #448]	; (8012780 <_ZL12MX_ADC1_Initv+0x22c>)
 80125be:	2200      	movs	r2, #0
 80125c0:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80125c2:	4b6f      	ldr	r3, [pc, #444]	; (8012780 <_ZL12MX_ADC1_Initv+0x22c>)
 80125c4:	2201      	movs	r2, #1
 80125c6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80125ca:	4b6d      	ldr	r3, [pc, #436]	; (8012780 <_ZL12MX_ADC1_Initv+0x22c>)
 80125cc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80125d0:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = ENABLE;
 80125d2:	4b6b      	ldr	r3, [pc, #428]	; (8012780 <_ZL12MX_ADC1_Initv+0x22c>)
 80125d4:	2201      	movs	r2, #1
 80125d6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Oversampling.Ratio = ADC_OVERSAMPLING_RATIO_64;
 80125da:	4b69      	ldr	r3, [pc, #420]	; (8012780 <_ZL12MX_ADC1_Initv+0x22c>)
 80125dc:	2214      	movs	r2, #20
 80125de:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.Oversampling.RightBitShift = ADC_RIGHTBITSHIFT_6;
 80125e0:	4b67      	ldr	r3, [pc, #412]	; (8012780 <_ZL12MX_ADC1_Initv+0x22c>)
 80125e2:	22c0      	movs	r2, #192	; 0xc0
 80125e4:	641a      	str	r2, [r3, #64]	; 0x40
  hadc1.Init.Oversampling.TriggeredMode = ADC_TRIGGEREDMODE_SINGLE_TRIGGER;
 80125e6:	4b66      	ldr	r3, [pc, #408]	; (8012780 <_ZL12MX_ADC1_Initv+0x22c>)
 80125e8:	2200      	movs	r2, #0
 80125ea:	645a      	str	r2, [r3, #68]	; 0x44
  hadc1.Init.Oversampling.OversamplingStopReset = ADC_REGOVERSAMPLING_CONTINUED_MODE;
 80125ec:	4b64      	ldr	r3, [pc, #400]	; (8012780 <_ZL12MX_ADC1_Initv+0x22c>)
 80125ee:	2201      	movs	r2, #1
 80125f0:	649a      	str	r2, [r3, #72]	; 0x48
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80125f2:	4863      	ldr	r0, [pc, #396]	; (8012780 <_ZL12MX_ADC1_Initv+0x22c>)
 80125f4:	f002 f9c2 	bl	801497c <HAL_ADC_Init>
 80125f8:	4603      	mov	r3, r0
 80125fa:	2b00      	cmp	r3, #0
 80125fc:	bf14      	ite	ne
 80125fe:	2301      	movne	r3, #1
 8012600:	2300      	moveq	r3, #0
 8012602:	b2db      	uxtb	r3, r3
 8012604:	2b00      	cmp	r3, #0
 8012606:	d001      	beq.n	801260c <_ZL12MX_ADC1_Initv+0xb8>
  {
    Error_Handler();
 8012608:	f000 ffdf 	bl	80135ca <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 801260c:	2300      	movs	r3, #0
 801260e:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8012610:	f107 031c 	add.w	r3, r7, #28
 8012614:	4619      	mov	r1, r3
 8012616:	485a      	ldr	r0, [pc, #360]	; (8012780 <_ZL12MX_ADC1_Initv+0x22c>)
 8012618:	f003 fb44 	bl	8015ca4 <HAL_ADCEx_MultiModeConfigChannel>
 801261c:	4603      	mov	r3, r0
 801261e:	2b00      	cmp	r3, #0
 8012620:	bf14      	ite	ne
 8012622:	2301      	movne	r3, #1
 8012624:	2300      	moveq	r3, #0
 8012626:	b2db      	uxtb	r3, r3
 8012628:	2b00      	cmp	r3, #0
 801262a:	d001      	beq.n	8012630 <_ZL12MX_ADC1_Initv+0xdc>
  {
    Error_Handler();
 801262c:	f000 ffcd 	bl	80135ca <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8012630:	4b55      	ldr	r3, [pc, #340]	; (8012788 <_ZL12MX_ADC1_Initv+0x234>)
 8012632:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8012634:	2306      	movs	r3, #6
 8012636:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_6CYCLES_5;
 8012638:	2301      	movs	r3, #1
 801263a:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 801263c:	237f      	movs	r3, #127	; 0x7f
 801263e:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8012640:	2304      	movs	r3, #4
 8012642:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8012644:	2300      	movs	r3, #0
 8012646:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8012648:	1d3b      	adds	r3, r7, #4
 801264a:	4619      	mov	r1, r3
 801264c:	484c      	ldr	r0, [pc, #304]	; (8012780 <_ZL12MX_ADC1_Initv+0x22c>)
 801264e:	f002 fdcd 	bl	80151ec <HAL_ADC_ConfigChannel>
 8012652:	4603      	mov	r3, r0
 8012654:	2b00      	cmp	r3, #0
 8012656:	bf14      	ite	ne
 8012658:	2301      	movne	r3, #1
 801265a:	2300      	moveq	r3, #0
 801265c:	b2db      	uxtb	r3, r3
 801265e:	2b00      	cmp	r3, #0
 8012660:	d001      	beq.n	8012666 <_ZL12MX_ADC1_Initv+0x112>
  {
    Error_Handler();
 8012662:	f000 ffb2 	bl	80135ca <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8012666:	4b49      	ldr	r3, [pc, #292]	; (801278c <_ZL12MX_ADC1_Initv+0x238>)
 8012668:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 801266a:	230c      	movs	r3, #12
 801266c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 801266e:	1d3b      	adds	r3, r7, #4
 8012670:	4619      	mov	r1, r3
 8012672:	4843      	ldr	r0, [pc, #268]	; (8012780 <_ZL12MX_ADC1_Initv+0x22c>)
 8012674:	f002 fdba 	bl	80151ec <HAL_ADC_ConfigChannel>
 8012678:	4603      	mov	r3, r0
 801267a:	2b00      	cmp	r3, #0
 801267c:	bf14      	ite	ne
 801267e:	2301      	movne	r3, #1
 8012680:	2300      	moveq	r3, #0
 8012682:	b2db      	uxtb	r3, r3
 8012684:	2b00      	cmp	r3, #0
 8012686:	d001      	beq.n	801268c <_ZL12MX_ADC1_Initv+0x138>
  {
    Error_Handler();
 8012688:	f000 ff9f 	bl	80135ca <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 801268c:	4b40      	ldr	r3, [pc, #256]	; (8012790 <_ZL12MX_ADC1_Initv+0x23c>)
 801268e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8012690:	2312      	movs	r3, #18
 8012692:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8012694:	1d3b      	adds	r3, r7, #4
 8012696:	4619      	mov	r1, r3
 8012698:	4839      	ldr	r0, [pc, #228]	; (8012780 <_ZL12MX_ADC1_Initv+0x22c>)
 801269a:	f002 fda7 	bl	80151ec <HAL_ADC_ConfigChannel>
 801269e:	4603      	mov	r3, r0
 80126a0:	2b00      	cmp	r3, #0
 80126a2:	bf14      	ite	ne
 80126a4:	2301      	movne	r3, #1
 80126a6:	2300      	moveq	r3, #0
 80126a8:	b2db      	uxtb	r3, r3
 80126aa:	2b00      	cmp	r3, #0
 80126ac:	d001      	beq.n	80126b2 <_ZL12MX_ADC1_Initv+0x15e>
  {
    Error_Handler();
 80126ae:	f000 ff8c 	bl	80135ca <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 80126b2:	4b38      	ldr	r3, [pc, #224]	; (8012794 <_ZL12MX_ADC1_Initv+0x240>)
 80126b4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 80126b6:	2318      	movs	r3, #24
 80126b8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80126ba:	1d3b      	adds	r3, r7, #4
 80126bc:	4619      	mov	r1, r3
 80126be:	4830      	ldr	r0, [pc, #192]	; (8012780 <_ZL12MX_ADC1_Initv+0x22c>)
 80126c0:	f002 fd94 	bl	80151ec <HAL_ADC_ConfigChannel>
 80126c4:	4603      	mov	r3, r0
 80126c6:	2b00      	cmp	r3, #0
 80126c8:	bf14      	ite	ne
 80126ca:	2301      	movne	r3, #1
 80126cc:	2300      	moveq	r3, #0
 80126ce:	b2db      	uxtb	r3, r3
 80126d0:	2b00      	cmp	r3, #0
 80126d2:	d001      	beq.n	80126d8 <_ZL12MX_ADC1_Initv+0x184>
  {
    Error_Handler();
 80126d4:	f000 ff79 	bl	80135ca <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 80126d8:	4b2f      	ldr	r3, [pc, #188]	; (8012798 <_ZL12MX_ADC1_Initv+0x244>)
 80126da:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 80126dc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80126e0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80126e2:	1d3b      	adds	r3, r7, #4
 80126e4:	4619      	mov	r1, r3
 80126e6:	4826      	ldr	r0, [pc, #152]	; (8012780 <_ZL12MX_ADC1_Initv+0x22c>)
 80126e8:	f002 fd80 	bl	80151ec <HAL_ADC_ConfigChannel>
 80126ec:	4603      	mov	r3, r0
 80126ee:	2b00      	cmp	r3, #0
 80126f0:	bf14      	ite	ne
 80126f2:	2301      	movne	r3, #1
 80126f4:	2300      	moveq	r3, #0
 80126f6:	b2db      	uxtb	r3, r3
 80126f8:	2b00      	cmp	r3, #0
 80126fa:	d001      	beq.n	8012700 <_ZL12MX_ADC1_Initv+0x1ac>
  {
    Error_Handler();
 80126fc:	f000 ff65 	bl	80135ca <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8012700:	4b26      	ldr	r3, [pc, #152]	; (801279c <_ZL12MX_ADC1_Initv+0x248>)
 8012702:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 8012704:	f44f 7383 	mov.w	r3, #262	; 0x106
 8012708:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 801270a:	1d3b      	adds	r3, r7, #4
 801270c:	4619      	mov	r1, r3
 801270e:	481c      	ldr	r0, [pc, #112]	; (8012780 <_ZL12MX_ADC1_Initv+0x22c>)
 8012710:	f002 fd6c 	bl	80151ec <HAL_ADC_ConfigChannel>
 8012714:	4603      	mov	r3, r0
 8012716:	2b00      	cmp	r3, #0
 8012718:	bf14      	ite	ne
 801271a:	2301      	movne	r3, #1
 801271c:	2300      	moveq	r3, #0
 801271e:	b2db      	uxtb	r3, r3
 8012720:	2b00      	cmp	r3, #0
 8012722:	d001      	beq.n	8012728 <_ZL12MX_ADC1_Initv+0x1d4>
  {
    Error_Handler();
 8012724:	f000 ff51 	bl	80135ca <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8012728:	4b1d      	ldr	r3, [pc, #116]	; (80127a0 <_ZL12MX_ADC1_Initv+0x24c>)
 801272a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 801272c:	f44f 7386 	mov.w	r3, #268	; 0x10c
 8012730:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8012732:	1d3b      	adds	r3, r7, #4
 8012734:	4619      	mov	r1, r3
 8012736:	4812      	ldr	r0, [pc, #72]	; (8012780 <_ZL12MX_ADC1_Initv+0x22c>)
 8012738:	f002 fd58 	bl	80151ec <HAL_ADC_ConfigChannel>
 801273c:	4603      	mov	r3, r0
 801273e:	2b00      	cmp	r3, #0
 8012740:	bf14      	ite	ne
 8012742:	2301      	movne	r3, #1
 8012744:	2300      	moveq	r3, #0
 8012746:	b2db      	uxtb	r3, r3
 8012748:	2b00      	cmp	r3, #0
 801274a:	d001      	beq.n	8012750 <_ZL12MX_ADC1_Initv+0x1fc>
  {
    Error_Handler();
 801274c:	f000 ff3d 	bl	80135ca <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_16;
 8012750:	4b14      	ldr	r3, [pc, #80]	; (80127a4 <_ZL12MX_ADC1_Initv+0x250>)
 8012752:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_8;
 8012754:	f44f 7389 	mov.w	r3, #274	; 0x112
 8012758:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 801275a:	1d3b      	adds	r3, r7, #4
 801275c:	4619      	mov	r1, r3
 801275e:	4808      	ldr	r0, [pc, #32]	; (8012780 <_ZL12MX_ADC1_Initv+0x22c>)
 8012760:	f002 fd44 	bl	80151ec <HAL_ADC_ConfigChannel>
 8012764:	4603      	mov	r3, r0
 8012766:	2b00      	cmp	r3, #0
 8012768:	bf14      	ite	ne
 801276a:	2301      	movne	r3, #1
 801276c:	2300      	moveq	r3, #0
 801276e:	b2db      	uxtb	r3, r3
 8012770:	2b00      	cmp	r3, #0
 8012772:	d001      	beq.n	8012778 <_ZL12MX_ADC1_Initv+0x224>
  {
    Error_Handler();
 8012774:	f000 ff29 	bl	80135ca <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8012778:	bf00      	nop
 801277a:	3728      	adds	r7, #40	; 0x28
 801277c:	46bd      	mov	sp, r7
 801277e:	bd80      	pop	{r7, pc}
 8012780:	200006f4 	.word	0x200006f4
 8012784:	42028000 	.word	0x42028000
 8012788:	04300002 	.word	0x04300002
 801278c:	08600004 	.word	0x08600004
 8012790:	0c900008 	.word	0x0c900008
 8012794:	1d500080 	.word	0x1d500080
 8012798:	21800100 	.word	0x21800100
 801279c:	25b00200 	.word	0x25b00200
 80127a0:	32601000 	.word	0x32601000
 80127a4:	43210000 	.word	0x43210000

080127a8 <_ZL12MX_I2C1_Initv>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80127a8:	b580      	push	{r7, lr}
 80127aa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80127ac:	4b22      	ldr	r3, [pc, #136]	; (8012838 <_ZL12MX_I2C1_Initv+0x90>)
 80127ae:	4a23      	ldr	r2, [pc, #140]	; (801283c <_ZL12MX_I2C1_Initv+0x94>)
 80127b0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x60514452;
 80127b2:	4b21      	ldr	r3, [pc, #132]	; (8012838 <_ZL12MX_I2C1_Initv+0x90>)
 80127b4:	4a22      	ldr	r2, [pc, #136]	; (8012840 <_ZL12MX_I2C1_Initv+0x98>)
 80127b6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80127b8:	4b1f      	ldr	r3, [pc, #124]	; (8012838 <_ZL12MX_I2C1_Initv+0x90>)
 80127ba:	2200      	movs	r2, #0
 80127bc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80127be:	4b1e      	ldr	r3, [pc, #120]	; (8012838 <_ZL12MX_I2C1_Initv+0x90>)
 80127c0:	2201      	movs	r2, #1
 80127c2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80127c4:	4b1c      	ldr	r3, [pc, #112]	; (8012838 <_ZL12MX_I2C1_Initv+0x90>)
 80127c6:	2200      	movs	r2, #0
 80127c8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80127ca:	4b1b      	ldr	r3, [pc, #108]	; (8012838 <_ZL12MX_I2C1_Initv+0x90>)
 80127cc:	2200      	movs	r2, #0
 80127ce:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80127d0:	4b19      	ldr	r3, [pc, #100]	; (8012838 <_ZL12MX_I2C1_Initv+0x90>)
 80127d2:	2200      	movs	r2, #0
 80127d4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80127d6:	4b18      	ldr	r3, [pc, #96]	; (8012838 <_ZL12MX_I2C1_Initv+0x90>)
 80127d8:	2200      	movs	r2, #0
 80127da:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80127dc:	4b16      	ldr	r3, [pc, #88]	; (8012838 <_ZL12MX_I2C1_Initv+0x90>)
 80127de:	2200      	movs	r2, #0
 80127e0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80127e2:	4815      	ldr	r0, [pc, #84]	; (8012838 <_ZL12MX_I2C1_Initv+0x90>)
 80127e4:	f004 f942 	bl	8016a6c <HAL_I2C_Init>
 80127e8:	4603      	mov	r3, r0
 80127ea:	2b00      	cmp	r3, #0
 80127ec:	bf14      	ite	ne
 80127ee:	2301      	movne	r3, #1
 80127f0:	2300      	moveq	r3, #0
 80127f2:	b2db      	uxtb	r3, r3
 80127f4:	2b00      	cmp	r3, #0
 80127f6:	d001      	beq.n	80127fc <_ZL12MX_I2C1_Initv+0x54>
  {
    Error_Handler();
 80127f8:	f000 fee7 	bl	80135ca <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80127fc:	2100      	movs	r1, #0
 80127fe:	480e      	ldr	r0, [pc, #56]	; (8012838 <_ZL12MX_I2C1_Initv+0x90>)
 8012800:	f004 fe40 	bl	8017484 <HAL_I2CEx_ConfigAnalogFilter>
 8012804:	4603      	mov	r3, r0
 8012806:	2b00      	cmp	r3, #0
 8012808:	bf14      	ite	ne
 801280a:	2301      	movne	r3, #1
 801280c:	2300      	moveq	r3, #0
 801280e:	b2db      	uxtb	r3, r3
 8012810:	2b00      	cmp	r3, #0
 8012812:	d001      	beq.n	8012818 <_ZL12MX_I2C1_Initv+0x70>
  {
    Error_Handler();
 8012814:	f000 fed9 	bl	80135ca <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8012818:	2100      	movs	r1, #0
 801281a:	4807      	ldr	r0, [pc, #28]	; (8012838 <_ZL12MX_I2C1_Initv+0x90>)
 801281c:	f004 fe7d 	bl	801751a <HAL_I2CEx_ConfigDigitalFilter>
 8012820:	4603      	mov	r3, r0
 8012822:	2b00      	cmp	r3, #0
 8012824:	bf14      	ite	ne
 8012826:	2301      	movne	r3, #1
 8012828:	2300      	moveq	r3, #0
 801282a:	b2db      	uxtb	r3, r3
 801282c:	2b00      	cmp	r3, #0
 801282e:	d001      	beq.n	8012834 <_ZL12MX_I2C1_Initv+0x8c>
  {
    Error_Handler();
 8012830:	f000 fecb 	bl	80135ca <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8012834:	bf00      	nop
 8012836:	bd80      	pop	{r7, pc}
 8012838:	200007c4 	.word	0x200007c4
 801283c:	40005400 	.word	0x40005400
 8012840:	60514452 	.word	0x60514452

08012844 <_ZL14MX_ICACHE_Initv>:
  * @brief ICACHE Initialization Function
  * @param None
  * @retval None
  */
static void MX_ICACHE_Init(void)
{
 8012844:	b580      	push	{r7, lr}
 8012846:	af00      	add	r7, sp, #0

  /* USER CODE END ICACHE_Init 1 */

  /** Enable instruction cache in 1-way (direct mapped cache)
  */
  if (HAL_ICACHE_ConfigAssociativityMode(ICACHE_1WAY) != HAL_OK)
 8012848:	2000      	movs	r0, #0
 801284a:	f004 feb3 	bl	80175b4 <HAL_ICACHE_ConfigAssociativityMode>
 801284e:	4603      	mov	r3, r0
 8012850:	2b00      	cmp	r3, #0
 8012852:	bf14      	ite	ne
 8012854:	2301      	movne	r3, #1
 8012856:	2300      	moveq	r3, #0
 8012858:	b2db      	uxtb	r3, r3
 801285a:	2b00      	cmp	r3, #0
 801285c:	d001      	beq.n	8012862 <_ZL14MX_ICACHE_Initv+0x1e>
  {
    Error_Handler();
 801285e:	f000 feb4 	bl	80135ca <Error_Handler>
  }
  if (HAL_ICACHE_Enable() != HAL_OK)
 8012862:	f004 fec7 	bl	80175f4 <HAL_ICACHE_Enable>
 8012866:	4603      	mov	r3, r0
 8012868:	2b00      	cmp	r3, #0
 801286a:	bf14      	ite	ne
 801286c:	2301      	movne	r3, #1
 801286e:	2300      	moveq	r3, #0
 8012870:	b2db      	uxtb	r3, r3
 8012872:	2b00      	cmp	r3, #0
 8012874:	d001      	beq.n	801287a <_ZL14MX_ICACHE_Initv+0x36>
  {
    Error_Handler();
 8012876:	f000 fea8 	bl	80135ca <Error_Handler>
  }
  /* USER CODE BEGIN ICACHE_Init 2 */

  /* USER CODE END ICACHE_Init 2 */

}
 801287a:	bf00      	nop
 801287c:	bd80      	pop	{r7, pc}
	...

08012880 <_ZL20MX_LPUART1_UART_Initv>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8012880:	b580      	push	{r7, lr}
 8012882:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8012884:	4b2c      	ldr	r3, [pc, #176]	; (8012938 <_ZL20MX_LPUART1_UART_Initv+0xb8>)
 8012886:	4a2d      	ldr	r2, [pc, #180]	; (801293c <_ZL20MX_LPUART1_UART_Initv+0xbc>)
 8012888:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 209700;
 801288a:	4b2b      	ldr	r3, [pc, #172]	; (8012938 <_ZL20MX_LPUART1_UART_Initv+0xb8>)
 801288c:	4a2c      	ldr	r2, [pc, #176]	; (8012940 <_ZL20MX_LPUART1_UART_Initv+0xc0>)
 801288e:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8012890:	4b29      	ldr	r3, [pc, #164]	; (8012938 <_ZL20MX_LPUART1_UART_Initv+0xb8>)
 8012892:	2200      	movs	r2, #0
 8012894:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8012896:	4b28      	ldr	r3, [pc, #160]	; (8012938 <_ZL20MX_LPUART1_UART_Initv+0xb8>)
 8012898:	2200      	movs	r2, #0
 801289a:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 801289c:	4b26      	ldr	r3, [pc, #152]	; (8012938 <_ZL20MX_LPUART1_UART_Initv+0xb8>)
 801289e:	2200      	movs	r2, #0
 80128a0:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 80128a2:	4b25      	ldr	r3, [pc, #148]	; (8012938 <_ZL20MX_LPUART1_UART_Initv+0xb8>)
 80128a4:	220c      	movs	r2, #12
 80128a6:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80128a8:	4b23      	ldr	r3, [pc, #140]	; (8012938 <_ZL20MX_LPUART1_UART_Initv+0xb8>)
 80128aa:	2200      	movs	r2, #0
 80128ac:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80128ae:	4b22      	ldr	r3, [pc, #136]	; (8012938 <_ZL20MX_LPUART1_UART_Initv+0xb8>)
 80128b0:	2200      	movs	r2, #0
 80128b2:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80128b4:	4b20      	ldr	r3, [pc, #128]	; (8012938 <_ZL20MX_LPUART1_UART_Initv+0xb8>)
 80128b6:	2200      	movs	r2, #0
 80128b8:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80128ba:	4b1f      	ldr	r3, [pc, #124]	; (8012938 <_ZL20MX_LPUART1_UART_Initv+0xb8>)
 80128bc:	2200      	movs	r2, #0
 80128be:	629a      	str	r2, [r3, #40]	; 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 80128c0:	4b1d      	ldr	r3, [pc, #116]	; (8012938 <_ZL20MX_LPUART1_UART_Initv+0xb8>)
 80128c2:	2200      	movs	r2, #0
 80128c4:	665a      	str	r2, [r3, #100]	; 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 80128c6:	481c      	ldr	r0, [pc, #112]	; (8012938 <_ZL20MX_LPUART1_UART_Initv+0xb8>)
 80128c8:	f009 fda8 	bl	801c41c <HAL_UART_Init>
 80128cc:	4603      	mov	r3, r0
 80128ce:	2b00      	cmp	r3, #0
 80128d0:	bf14      	ite	ne
 80128d2:	2301      	movne	r3, #1
 80128d4:	2300      	moveq	r3, #0
 80128d6:	b2db      	uxtb	r3, r3
 80128d8:	2b00      	cmp	r3, #0
 80128da:	d001      	beq.n	80128e0 <_ZL20MX_LPUART1_UART_Initv+0x60>
  {
    Error_Handler();
 80128dc:	f000 fe75 	bl	80135ca <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80128e0:	2100      	movs	r1, #0
 80128e2:	4815      	ldr	r0, [pc, #84]	; (8012938 <_ZL20MX_LPUART1_UART_Initv+0xb8>)
 80128e4:	f00b fdf9 	bl	801e4da <HAL_UARTEx_SetTxFifoThreshold>
 80128e8:	4603      	mov	r3, r0
 80128ea:	2b00      	cmp	r3, #0
 80128ec:	bf14      	ite	ne
 80128ee:	2301      	movne	r3, #1
 80128f0:	2300      	moveq	r3, #0
 80128f2:	b2db      	uxtb	r3, r3
 80128f4:	2b00      	cmp	r3, #0
 80128f6:	d001      	beq.n	80128fc <_ZL20MX_LPUART1_UART_Initv+0x7c>
  {
    Error_Handler();
 80128f8:	f000 fe67 	bl	80135ca <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80128fc:	2100      	movs	r1, #0
 80128fe:	480e      	ldr	r0, [pc, #56]	; (8012938 <_ZL20MX_LPUART1_UART_Initv+0xb8>)
 8012900:	f00b fe29 	bl	801e556 <HAL_UARTEx_SetRxFifoThreshold>
 8012904:	4603      	mov	r3, r0
 8012906:	2b00      	cmp	r3, #0
 8012908:	bf14      	ite	ne
 801290a:	2301      	movne	r3, #1
 801290c:	2300      	moveq	r3, #0
 801290e:	b2db      	uxtb	r3, r3
 8012910:	2b00      	cmp	r3, #0
 8012912:	d001      	beq.n	8012918 <_ZL20MX_LPUART1_UART_Initv+0x98>
  {
    Error_Handler();
 8012914:	f000 fe59 	bl	80135ca <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8012918:	4807      	ldr	r0, [pc, #28]	; (8012938 <_ZL20MX_LPUART1_UART_Initv+0xb8>)
 801291a:	f00b fda5 	bl	801e468 <HAL_UARTEx_DisableFifoMode>
 801291e:	4603      	mov	r3, r0
 8012920:	2b00      	cmp	r3, #0
 8012922:	bf14      	ite	ne
 8012924:	2301      	movne	r3, #1
 8012926:	2300      	moveq	r3, #0
 8012928:	b2db      	uxtb	r3, r3
 801292a:	2b00      	cmp	r3, #0
 801292c:	d001      	beq.n	8012932 <_ZL20MX_LPUART1_UART_Initv+0xb2>
  {
    Error_Handler();
 801292e:	f000 fe4c 	bl	80135ca <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8012932:	bf00      	nop
 8012934:	bd80      	pop	{r7, pc}
 8012936:	bf00      	nop
 8012938:	20000818 	.word	0x20000818
 801293c:	40008000 	.word	0x40008000
 8012940:	00033324 	.word	0x00033324

08012944 <_ZL13MX_UART4_Initv>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8012944:	b580      	push	{r7, lr}
 8012946:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8012948:	4b2c      	ldr	r3, [pc, #176]	; (80129fc <_ZL13MX_UART4_Initv+0xb8>)
 801294a:	4a2d      	ldr	r2, [pc, #180]	; (8012a00 <_ZL13MX_UART4_Initv+0xbc>)
 801294c:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 801294e:	4b2b      	ldr	r3, [pc, #172]	; (80129fc <_ZL13MX_UART4_Initv+0xb8>)
 8012950:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8012954:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8012956:	4b29      	ldr	r3, [pc, #164]	; (80129fc <_ZL13MX_UART4_Initv+0xb8>)
 8012958:	2200      	movs	r2, #0
 801295a:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 801295c:	4b27      	ldr	r3, [pc, #156]	; (80129fc <_ZL13MX_UART4_Initv+0xb8>)
 801295e:	2200      	movs	r2, #0
 8012960:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8012962:	4b26      	ldr	r3, [pc, #152]	; (80129fc <_ZL13MX_UART4_Initv+0xb8>)
 8012964:	2200      	movs	r2, #0
 8012966:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_RX;
 8012968:	4b24      	ldr	r3, [pc, #144]	; (80129fc <_ZL13MX_UART4_Initv+0xb8>)
 801296a:	2204      	movs	r2, #4
 801296c:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 801296e:	4b23      	ldr	r3, [pc, #140]	; (80129fc <_ZL13MX_UART4_Initv+0xb8>)
 8012970:	2200      	movs	r2, #0
 8012972:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8012974:	4b21      	ldr	r3, [pc, #132]	; (80129fc <_ZL13MX_UART4_Initv+0xb8>)
 8012976:	2200      	movs	r2, #0
 8012978:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 801297a:	4b20      	ldr	r3, [pc, #128]	; (80129fc <_ZL13MX_UART4_Initv+0xb8>)
 801297c:	2200      	movs	r2, #0
 801297e:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8012980:	4b1e      	ldr	r3, [pc, #120]	; (80129fc <_ZL13MX_UART4_Initv+0xb8>)
 8012982:	2200      	movs	r2, #0
 8012984:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8012986:	4b1d      	ldr	r3, [pc, #116]	; (80129fc <_ZL13MX_UART4_Initv+0xb8>)
 8012988:	2200      	movs	r2, #0
 801298a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 801298c:	481b      	ldr	r0, [pc, #108]	; (80129fc <_ZL13MX_UART4_Initv+0xb8>)
 801298e:	f009 fd45 	bl	801c41c <HAL_UART_Init>
 8012992:	4603      	mov	r3, r0
 8012994:	2b00      	cmp	r3, #0
 8012996:	bf14      	ite	ne
 8012998:	2301      	movne	r3, #1
 801299a:	2300      	moveq	r3, #0
 801299c:	b2db      	uxtb	r3, r3
 801299e:	2b00      	cmp	r3, #0
 80129a0:	d001      	beq.n	80129a6 <_ZL13MX_UART4_Initv+0x62>
  {
    Error_Handler();
 80129a2:	f000 fe12 	bl	80135ca <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80129a6:	2100      	movs	r1, #0
 80129a8:	4814      	ldr	r0, [pc, #80]	; (80129fc <_ZL13MX_UART4_Initv+0xb8>)
 80129aa:	f00b fd96 	bl	801e4da <HAL_UARTEx_SetTxFifoThreshold>
 80129ae:	4603      	mov	r3, r0
 80129b0:	2b00      	cmp	r3, #0
 80129b2:	bf14      	ite	ne
 80129b4:	2301      	movne	r3, #1
 80129b6:	2300      	moveq	r3, #0
 80129b8:	b2db      	uxtb	r3, r3
 80129ba:	2b00      	cmp	r3, #0
 80129bc:	d001      	beq.n	80129c2 <_ZL13MX_UART4_Initv+0x7e>
  {
    Error_Handler();
 80129be:	f000 fe04 	bl	80135ca <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80129c2:	2100      	movs	r1, #0
 80129c4:	480d      	ldr	r0, [pc, #52]	; (80129fc <_ZL13MX_UART4_Initv+0xb8>)
 80129c6:	f00b fdc6 	bl	801e556 <HAL_UARTEx_SetRxFifoThreshold>
 80129ca:	4603      	mov	r3, r0
 80129cc:	2b00      	cmp	r3, #0
 80129ce:	bf14      	ite	ne
 80129d0:	2301      	movne	r3, #1
 80129d2:	2300      	moveq	r3, #0
 80129d4:	b2db      	uxtb	r3, r3
 80129d6:	2b00      	cmp	r3, #0
 80129d8:	d001      	beq.n	80129de <_ZL13MX_UART4_Initv+0x9a>
  {
    Error_Handler();
 80129da:	f000 fdf6 	bl	80135ca <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 80129de:	4807      	ldr	r0, [pc, #28]	; (80129fc <_ZL13MX_UART4_Initv+0xb8>)
 80129e0:	f00b fd42 	bl	801e468 <HAL_UARTEx_DisableFifoMode>
 80129e4:	4603      	mov	r3, r0
 80129e6:	2b00      	cmp	r3, #0
 80129e8:	bf14      	ite	ne
 80129ea:	2301      	movne	r3, #1
 80129ec:	2300      	moveq	r3, #0
 80129ee:	b2db      	uxtb	r3, r3
 80129f0:	2b00      	cmp	r3, #0
 80129f2:	d001      	beq.n	80129f8 <_ZL13MX_UART4_Initv+0xb4>
  {
    Error_Handler();
 80129f4:	f000 fde9 	bl	80135ca <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 80129f8:	bf00      	nop
 80129fa:	bd80      	pop	{r7, pc}
 80129fc:	200008ac 	.word	0x200008ac
 8012a00:	40004c00 	.word	0x40004c00

08012a04 <_ZL19MX_USART2_UART_Initv>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8012a04:	b580      	push	{r7, lr}
 8012a06:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8012a08:	4b2c      	ldr	r3, [pc, #176]	; (8012abc <_ZL19MX_USART2_UART_Initv+0xb8>)
 8012a0a:	4a2d      	ldr	r2, [pc, #180]	; (8012ac0 <_ZL19MX_USART2_UART_Initv+0xbc>)
 8012a0c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8012a0e:	4b2b      	ldr	r3, [pc, #172]	; (8012abc <_ZL19MX_USART2_UART_Initv+0xb8>)
 8012a10:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8012a14:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8012a16:	4b29      	ldr	r3, [pc, #164]	; (8012abc <_ZL19MX_USART2_UART_Initv+0xb8>)
 8012a18:	2200      	movs	r2, #0
 8012a1a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8012a1c:	4b27      	ldr	r3, [pc, #156]	; (8012abc <_ZL19MX_USART2_UART_Initv+0xb8>)
 8012a1e:	2200      	movs	r2, #0
 8012a20:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8012a22:	4b26      	ldr	r3, [pc, #152]	; (8012abc <_ZL19MX_USART2_UART_Initv+0xb8>)
 8012a24:	2200      	movs	r2, #0
 8012a26:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX;
 8012a28:	4b24      	ldr	r3, [pc, #144]	; (8012abc <_ZL19MX_USART2_UART_Initv+0xb8>)
 8012a2a:	2208      	movs	r2, #8
 8012a2c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8012a2e:	4b23      	ldr	r3, [pc, #140]	; (8012abc <_ZL19MX_USART2_UART_Initv+0xb8>)
 8012a30:	2200      	movs	r2, #0
 8012a32:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8012a34:	4b21      	ldr	r3, [pc, #132]	; (8012abc <_ZL19MX_USART2_UART_Initv+0xb8>)
 8012a36:	2200      	movs	r2, #0
 8012a38:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8012a3a:	4b20      	ldr	r3, [pc, #128]	; (8012abc <_ZL19MX_USART2_UART_Initv+0xb8>)
 8012a3c:	2200      	movs	r2, #0
 8012a3e:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8012a40:	4b1e      	ldr	r3, [pc, #120]	; (8012abc <_ZL19MX_USART2_UART_Initv+0xb8>)
 8012a42:	2200      	movs	r2, #0
 8012a44:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8012a46:	4b1d      	ldr	r3, [pc, #116]	; (8012abc <_ZL19MX_USART2_UART_Initv+0xb8>)
 8012a48:	2200      	movs	r2, #0
 8012a4a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8012a4c:	481b      	ldr	r0, [pc, #108]	; (8012abc <_ZL19MX_USART2_UART_Initv+0xb8>)
 8012a4e:	f009 fce5 	bl	801c41c <HAL_UART_Init>
 8012a52:	4603      	mov	r3, r0
 8012a54:	2b00      	cmp	r3, #0
 8012a56:	bf14      	ite	ne
 8012a58:	2301      	movne	r3, #1
 8012a5a:	2300      	moveq	r3, #0
 8012a5c:	b2db      	uxtb	r3, r3
 8012a5e:	2b00      	cmp	r3, #0
 8012a60:	d001      	beq.n	8012a66 <_ZL19MX_USART2_UART_Initv+0x62>
  {
    Error_Handler();
 8012a62:	f000 fdb2 	bl	80135ca <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8012a66:	2100      	movs	r1, #0
 8012a68:	4814      	ldr	r0, [pc, #80]	; (8012abc <_ZL19MX_USART2_UART_Initv+0xb8>)
 8012a6a:	f00b fd36 	bl	801e4da <HAL_UARTEx_SetTxFifoThreshold>
 8012a6e:	4603      	mov	r3, r0
 8012a70:	2b00      	cmp	r3, #0
 8012a72:	bf14      	ite	ne
 8012a74:	2301      	movne	r3, #1
 8012a76:	2300      	moveq	r3, #0
 8012a78:	b2db      	uxtb	r3, r3
 8012a7a:	2b00      	cmp	r3, #0
 8012a7c:	d001      	beq.n	8012a82 <_ZL19MX_USART2_UART_Initv+0x7e>
  {
    Error_Handler();
 8012a7e:	f000 fda4 	bl	80135ca <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8012a82:	2100      	movs	r1, #0
 8012a84:	480d      	ldr	r0, [pc, #52]	; (8012abc <_ZL19MX_USART2_UART_Initv+0xb8>)
 8012a86:	f00b fd66 	bl	801e556 <HAL_UARTEx_SetRxFifoThreshold>
 8012a8a:	4603      	mov	r3, r0
 8012a8c:	2b00      	cmp	r3, #0
 8012a8e:	bf14      	ite	ne
 8012a90:	2301      	movne	r3, #1
 8012a92:	2300      	moveq	r3, #0
 8012a94:	b2db      	uxtb	r3, r3
 8012a96:	2b00      	cmp	r3, #0
 8012a98:	d001      	beq.n	8012a9e <_ZL19MX_USART2_UART_Initv+0x9a>
  {
    Error_Handler();
 8012a9a:	f000 fd96 	bl	80135ca <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8012a9e:	4807      	ldr	r0, [pc, #28]	; (8012abc <_ZL19MX_USART2_UART_Initv+0xb8>)
 8012aa0:	f00b fce2 	bl	801e468 <HAL_UARTEx_DisableFifoMode>
 8012aa4:	4603      	mov	r3, r0
 8012aa6:	2b00      	cmp	r3, #0
 8012aa8:	bf14      	ite	ne
 8012aaa:	2301      	movne	r3, #1
 8012aac:	2300      	moveq	r3, #0
 8012aae:	b2db      	uxtb	r3, r3
 8012ab0:	2b00      	cmp	r3, #0
 8012ab2:	d001      	beq.n	8012ab8 <_ZL19MX_USART2_UART_Initv+0xb4>
  {
    Error_Handler();
 8012ab4:	f000 fd89 	bl	80135ca <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8012ab8:	bf00      	nop
 8012aba:	bd80      	pop	{r7, pc}
 8012abc:	20000940 	.word	0x20000940
 8012ac0:	40004400 	.word	0x40004400

08012ac4 <_ZL11MX_RTC_Initv>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8012ac4:	b580      	push	{r7, lr}
 8012ac6:	b086      	sub	sp, #24
 8012ac8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_PrivilegeStateTypeDef privilegeState = {0};
 8012aca:	463b      	mov	r3, r7
 8012acc:	2200      	movs	r2, #0
 8012ace:	601a      	str	r2, [r3, #0]
 8012ad0:	605a      	str	r2, [r3, #4]
 8012ad2:	609a      	str	r2, [r3, #8]
 8012ad4:	60da      	str	r2, [r3, #12]
 8012ad6:	611a      	str	r2, [r3, #16]
 8012ad8:	615a      	str	r2, [r3, #20]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8012ada:	4b22      	ldr	r3, [pc, #136]	; (8012b64 <_ZL11MX_RTC_Initv+0xa0>)
 8012adc:	4a22      	ldr	r2, [pc, #136]	; (8012b68 <_ZL11MX_RTC_Initv+0xa4>)
 8012ade:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8012ae0:	4b20      	ldr	r3, [pc, #128]	; (8012b64 <_ZL11MX_RTC_Initv+0xa0>)
 8012ae2:	2200      	movs	r2, #0
 8012ae4:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8012ae6:	4b1f      	ldr	r3, [pc, #124]	; (8012b64 <_ZL11MX_RTC_Initv+0xa0>)
 8012ae8:	227f      	movs	r2, #127	; 0x7f
 8012aea:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8012aec:	4b1d      	ldr	r3, [pc, #116]	; (8012b64 <_ZL11MX_RTC_Initv+0xa0>)
 8012aee:	22ff      	movs	r2, #255	; 0xff
 8012af0:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8012af2:	4b1c      	ldr	r3, [pc, #112]	; (8012b64 <_ZL11MX_RTC_Initv+0xa0>)
 8012af4:	2200      	movs	r2, #0
 8012af6:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8012af8:	4b1a      	ldr	r3, [pc, #104]	; (8012b64 <_ZL11MX_RTC_Initv+0xa0>)
 8012afa:	2200      	movs	r2, #0
 8012afc:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8012afe:	4b19      	ldr	r3, [pc, #100]	; (8012b64 <_ZL11MX_RTC_Initv+0xa0>)
 8012b00:	2200      	movs	r2, #0
 8012b02:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8012b04:	4b17      	ldr	r3, [pc, #92]	; (8012b64 <_ZL11MX_RTC_Initv+0xa0>)
 8012b06:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8012b0a:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 8012b0c:	4b15      	ldr	r3, [pc, #84]	; (8012b64 <_ZL11MX_RTC_Initv+0xa0>)
 8012b0e:	2200      	movs	r2, #0
 8012b10:	621a      	str	r2, [r3, #32]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8012b12:	4814      	ldr	r0, [pc, #80]	; (8012b64 <_ZL11MX_RTC_Initv+0xa0>)
 8012b14:	f006 fc32 	bl	801937c <HAL_RTC_Init>
 8012b18:	4603      	mov	r3, r0
 8012b1a:	2b00      	cmp	r3, #0
 8012b1c:	bf14      	ite	ne
 8012b1e:	2301      	movne	r3, #1
 8012b20:	2300      	moveq	r3, #0
 8012b22:	b2db      	uxtb	r3, r3
 8012b24:	2b00      	cmp	r3, #0
 8012b26:	d001      	beq.n	8012b2c <_ZL11MX_RTC_Initv+0x68>
  {
    Error_Handler();
 8012b28:	f000 fd4f 	bl	80135ca <Error_Handler>
  }
  privilegeState.rtcPrivilegeFull = RTC_PRIVILEGE_FULL_NO;
 8012b2c:	2300      	movs	r3, #0
 8012b2e:	603b      	str	r3, [r7, #0]
  privilegeState.backupRegisterPrivZone = RTC_PRIVILEGE_BKUP_ZONE_NONE;
 8012b30:	2300      	movs	r3, #0
 8012b32:	60fb      	str	r3, [r7, #12]
  privilegeState.backupRegisterStartZone2 = RTC_BKP_DR0;
 8012b34:	2300      	movs	r3, #0
 8012b36:	613b      	str	r3, [r7, #16]
  privilegeState.backupRegisterStartZone3 = RTC_BKP_DR0;
 8012b38:	2300      	movs	r3, #0
 8012b3a:	617b      	str	r3, [r7, #20]
  if (HAL_RTCEx_PrivilegeModeSet(&hrtc, &privilegeState) != HAL_OK)
 8012b3c:	463b      	mov	r3, r7
 8012b3e:	4619      	mov	r1, r3
 8012b40:	4808      	ldr	r0, [pc, #32]	; (8012b64 <_ZL11MX_RTC_Initv+0xa0>)
 8012b42:	f006 fd29 	bl	8019598 <HAL_RTCEx_PrivilegeModeSet>
 8012b46:	4603      	mov	r3, r0
 8012b48:	2b00      	cmp	r3, #0
 8012b4a:	bf14      	ite	ne
 8012b4c:	2301      	movne	r3, #1
 8012b4e:	2300      	moveq	r3, #0
 8012b50:	b2db      	uxtb	r3, r3
 8012b52:	2b00      	cmp	r3, #0
 8012b54:	d001      	beq.n	8012b5a <_ZL11MX_RTC_Initv+0x96>
  {
    Error_Handler();
 8012b56:	f000 fd38 	bl	80135ca <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8012b5a:	bf00      	nop
 8012b5c:	3718      	adds	r7, #24
 8012b5e:	46bd      	mov	sp, r7
 8012b60:	bd80      	pop	{r7, pc}
 8012b62:	bf00      	nop
 8012b64:	200009d4 	.word	0x200009d4
 8012b68:	40002800 	.word	0x40002800

08012b6c <_ZL12MX_SPI1_Initv>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8012b6c:	b580      	push	{r7, lr}
 8012b6e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8012b70:	4b1d      	ldr	r3, [pc, #116]	; (8012be8 <_ZL12MX_SPI1_Initv+0x7c>)
 8012b72:	4a1e      	ldr	r2, [pc, #120]	; (8012bec <_ZL12MX_SPI1_Initv+0x80>)
 8012b74:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8012b76:	4b1c      	ldr	r3, [pc, #112]	; (8012be8 <_ZL12MX_SPI1_Initv+0x7c>)
 8012b78:	f44f 7282 	mov.w	r2, #260	; 0x104
 8012b7c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8012b7e:	4b1a      	ldr	r3, [pc, #104]	; (8012be8 <_ZL12MX_SPI1_Initv+0x7c>)
 8012b80:	2200      	movs	r2, #0
 8012b82:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8012b84:	4b18      	ldr	r3, [pc, #96]	; (8012be8 <_ZL12MX_SPI1_Initv+0x7c>)
 8012b86:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8012b8a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8012b8c:	4b16      	ldr	r3, [pc, #88]	; (8012be8 <_ZL12MX_SPI1_Initv+0x7c>)
 8012b8e:	2200      	movs	r2, #0
 8012b90:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8012b92:	4b15      	ldr	r3, [pc, #84]	; (8012be8 <_ZL12MX_SPI1_Initv+0x7c>)
 8012b94:	2200      	movs	r2, #0
 8012b96:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8012b98:	4b13      	ldr	r3, [pc, #76]	; (8012be8 <_ZL12MX_SPI1_Initv+0x7c>)
 8012b9a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8012b9e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8012ba0:	4b11      	ldr	r3, [pc, #68]	; (8012be8 <_ZL12MX_SPI1_Initv+0x7c>)
 8012ba2:	2228      	movs	r2, #40	; 0x28
 8012ba4:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8012ba6:	4b10      	ldr	r3, [pc, #64]	; (8012be8 <_ZL12MX_SPI1_Initv+0x7c>)
 8012ba8:	2200      	movs	r2, #0
 8012baa:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8012bac:	4b0e      	ldr	r3, [pc, #56]	; (8012be8 <_ZL12MX_SPI1_Initv+0x7c>)
 8012bae:	2200      	movs	r2, #0
 8012bb0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8012bb2:	4b0d      	ldr	r3, [pc, #52]	; (8012be8 <_ZL12MX_SPI1_Initv+0x7c>)
 8012bb4:	2200      	movs	r2, #0
 8012bb6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8012bb8:	4b0b      	ldr	r3, [pc, #44]	; (8012be8 <_ZL12MX_SPI1_Initv+0x7c>)
 8012bba:	2207      	movs	r2, #7
 8012bbc:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8012bbe:	4b0a      	ldr	r3, [pc, #40]	; (8012be8 <_ZL12MX_SPI1_Initv+0x7c>)
 8012bc0:	2200      	movs	r2, #0
 8012bc2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8012bc4:	4b08      	ldr	r3, [pc, #32]	; (8012be8 <_ZL12MX_SPI1_Initv+0x7c>)
 8012bc6:	2208      	movs	r2, #8
 8012bc8:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8012bca:	4807      	ldr	r0, [pc, #28]	; (8012be8 <_ZL12MX_SPI1_Initv+0x7c>)
 8012bcc:	f006 fd10 	bl	80195f0 <HAL_SPI_Init>
 8012bd0:	4603      	mov	r3, r0
 8012bd2:	2b00      	cmp	r3, #0
 8012bd4:	bf14      	ite	ne
 8012bd6:	2301      	movne	r3, #1
 8012bd8:	2300      	moveq	r3, #0
 8012bda:	b2db      	uxtb	r3, r3
 8012bdc:	2b00      	cmp	r3, #0
 8012bde:	d001      	beq.n	8012be4 <_ZL12MX_SPI1_Initv+0x78>
  {
    Error_Handler();
 8012be0:	f000 fcf3 	bl	80135ca <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8012be4:	bf00      	nop
 8012be6:	bd80      	pop	{r7, pc}
 8012be8:	200009fc 	.word	0x200009fc
 8012bec:	40013000 	.word	0x40013000

08012bf0 <_ZL12MX_SPI2_Initv>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8012bf0:	b580      	push	{r7, lr}
 8012bf2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8012bf4:	4b1d      	ldr	r3, [pc, #116]	; (8012c6c <_ZL12MX_SPI2_Initv+0x7c>)
 8012bf6:	4a1e      	ldr	r2, [pc, #120]	; (8012c70 <_ZL12MX_SPI2_Initv+0x80>)
 8012bf8:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8012bfa:	4b1c      	ldr	r3, [pc, #112]	; (8012c6c <_ZL12MX_SPI2_Initv+0x7c>)
 8012bfc:	f44f 7282 	mov.w	r2, #260	; 0x104
 8012c00:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8012c02:	4b1a      	ldr	r3, [pc, #104]	; (8012c6c <_ZL12MX_SPI2_Initv+0x7c>)
 8012c04:	2200      	movs	r2, #0
 8012c06:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8012c08:	4b18      	ldr	r3, [pc, #96]	; (8012c6c <_ZL12MX_SPI2_Initv+0x7c>)
 8012c0a:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8012c0e:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8012c10:	4b16      	ldr	r3, [pc, #88]	; (8012c6c <_ZL12MX_SPI2_Initv+0x7c>)
 8012c12:	2200      	movs	r2, #0
 8012c14:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8012c16:	4b15      	ldr	r3, [pc, #84]	; (8012c6c <_ZL12MX_SPI2_Initv+0x7c>)
 8012c18:	2200      	movs	r2, #0
 8012c1a:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8012c1c:	4b13      	ldr	r3, [pc, #76]	; (8012c6c <_ZL12MX_SPI2_Initv+0x7c>)
 8012c1e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8012c22:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8012c24:	4b11      	ldr	r3, [pc, #68]	; (8012c6c <_ZL12MX_SPI2_Initv+0x7c>)
 8012c26:	2218      	movs	r2, #24
 8012c28:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_LSB;
 8012c2a:	4b10      	ldr	r3, [pc, #64]	; (8012c6c <_ZL12MX_SPI2_Initv+0x7c>)
 8012c2c:	2280      	movs	r2, #128	; 0x80
 8012c2e:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8012c30:	4b0e      	ldr	r3, [pc, #56]	; (8012c6c <_ZL12MX_SPI2_Initv+0x7c>)
 8012c32:	2200      	movs	r2, #0
 8012c34:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8012c36:	4b0d      	ldr	r3, [pc, #52]	; (8012c6c <_ZL12MX_SPI2_Initv+0x7c>)
 8012c38:	2200      	movs	r2, #0
 8012c3a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8012c3c:	4b0b      	ldr	r3, [pc, #44]	; (8012c6c <_ZL12MX_SPI2_Initv+0x7c>)
 8012c3e:	2207      	movs	r2, #7
 8012c40:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8012c42:	4b0a      	ldr	r3, [pc, #40]	; (8012c6c <_ZL12MX_SPI2_Initv+0x7c>)
 8012c44:	2200      	movs	r2, #0
 8012c46:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8012c48:	4b08      	ldr	r3, [pc, #32]	; (8012c6c <_ZL12MX_SPI2_Initv+0x7c>)
 8012c4a:	2208      	movs	r2, #8
 8012c4c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8012c4e:	4807      	ldr	r0, [pc, #28]	; (8012c6c <_ZL12MX_SPI2_Initv+0x7c>)
 8012c50:	f006 fcce 	bl	80195f0 <HAL_SPI_Init>
 8012c54:	4603      	mov	r3, r0
 8012c56:	2b00      	cmp	r3, #0
 8012c58:	bf14      	ite	ne
 8012c5a:	2301      	movne	r3, #1
 8012c5c:	2300      	moveq	r3, #0
 8012c5e:	b2db      	uxtb	r3, r3
 8012c60:	2b00      	cmp	r3, #0
 8012c62:	d001      	beq.n	8012c68 <_ZL12MX_SPI2_Initv+0x78>
  {
    Error_Handler();
 8012c64:	f000 fcb1 	bl	80135ca <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8012c68:	bf00      	nop
 8012c6a:	bd80      	pop	{r7, pc}
 8012c6c:	20000a60 	.word	0x20000a60
 8012c70:	40003800 	.word	0x40003800

08012c74 <_ZL12MX_SPI3_Initv>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8012c74:	b580      	push	{r7, lr}
 8012c76:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8012c78:	4b1d      	ldr	r3, [pc, #116]	; (8012cf0 <_ZL12MX_SPI3_Initv+0x7c>)
 8012c7a:	4a1e      	ldr	r2, [pc, #120]	; (8012cf4 <_ZL12MX_SPI3_Initv+0x80>)
 8012c7c:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8012c7e:	4b1c      	ldr	r3, [pc, #112]	; (8012cf0 <_ZL12MX_SPI3_Initv+0x7c>)
 8012c80:	f44f 7282 	mov.w	r2, #260	; 0x104
 8012c84:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8012c86:	4b1a      	ldr	r3, [pc, #104]	; (8012cf0 <_ZL12MX_SPI3_Initv+0x7c>)
 8012c88:	2200      	movs	r2, #0
 8012c8a:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8012c8c:	4b18      	ldr	r3, [pc, #96]	; (8012cf0 <_ZL12MX_SPI3_Initv+0x7c>)
 8012c8e:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8012c92:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8012c94:	4b16      	ldr	r3, [pc, #88]	; (8012cf0 <_ZL12MX_SPI3_Initv+0x7c>)
 8012c96:	2200      	movs	r2, #0
 8012c98:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8012c9a:	4b15      	ldr	r3, [pc, #84]	; (8012cf0 <_ZL12MX_SPI3_Initv+0x7c>)
 8012c9c:	2200      	movs	r2, #0
 8012c9e:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8012ca0:	4b13      	ldr	r3, [pc, #76]	; (8012cf0 <_ZL12MX_SPI3_Initv+0x7c>)
 8012ca2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8012ca6:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8012ca8:	4b11      	ldr	r3, [pc, #68]	; (8012cf0 <_ZL12MX_SPI3_Initv+0x7c>)
 8012caa:	2218      	movs	r2, #24
 8012cac:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8012cae:	4b10      	ldr	r3, [pc, #64]	; (8012cf0 <_ZL12MX_SPI3_Initv+0x7c>)
 8012cb0:	2200      	movs	r2, #0
 8012cb2:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8012cb4:	4b0e      	ldr	r3, [pc, #56]	; (8012cf0 <_ZL12MX_SPI3_Initv+0x7c>)
 8012cb6:	2200      	movs	r2, #0
 8012cb8:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8012cba:	4b0d      	ldr	r3, [pc, #52]	; (8012cf0 <_ZL12MX_SPI3_Initv+0x7c>)
 8012cbc:	2200      	movs	r2, #0
 8012cbe:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8012cc0:	4b0b      	ldr	r3, [pc, #44]	; (8012cf0 <_ZL12MX_SPI3_Initv+0x7c>)
 8012cc2:	2207      	movs	r2, #7
 8012cc4:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8012cc6:	4b0a      	ldr	r3, [pc, #40]	; (8012cf0 <_ZL12MX_SPI3_Initv+0x7c>)
 8012cc8:	2200      	movs	r2, #0
 8012cca:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8012ccc:	4b08      	ldr	r3, [pc, #32]	; (8012cf0 <_ZL12MX_SPI3_Initv+0x7c>)
 8012cce:	2208      	movs	r2, #8
 8012cd0:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8012cd2:	4807      	ldr	r0, [pc, #28]	; (8012cf0 <_ZL12MX_SPI3_Initv+0x7c>)
 8012cd4:	f006 fc8c 	bl	80195f0 <HAL_SPI_Init>
 8012cd8:	4603      	mov	r3, r0
 8012cda:	2b00      	cmp	r3, #0
 8012cdc:	bf14      	ite	ne
 8012cde:	2301      	movne	r3, #1
 8012ce0:	2300      	moveq	r3, #0
 8012ce2:	b2db      	uxtb	r3, r3
 8012ce4:	2b00      	cmp	r3, #0
 8012ce6:	d001      	beq.n	8012cec <_ZL12MX_SPI3_Initv+0x78>
  {
    Error_Handler();
 8012ce8:	f000 fc6f 	bl	80135ca <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8012cec:	bf00      	nop
 8012cee:	bd80      	pop	{r7, pc}
 8012cf0:	20000ac4 	.word	0x20000ac4
 8012cf4:	40003c00 	.word	0x40003c00

08012cf8 <_ZL12MX_TIM1_Initv>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8012cf8:	b580      	push	{r7, lr}
 8012cfa:	b08c      	sub	sp, #48	; 0x30
 8012cfc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8012cfe:	f107 0320 	add.w	r3, r7, #32
 8012d02:	2200      	movs	r2, #0
 8012d04:	601a      	str	r2, [r3, #0]
 8012d06:	605a      	str	r2, [r3, #4]
 8012d08:	609a      	str	r2, [r3, #8]
 8012d0a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8012d0c:	f107 0314 	add.w	r3, r7, #20
 8012d10:	2200      	movs	r2, #0
 8012d12:	601a      	str	r2, [r3, #0]
 8012d14:	605a      	str	r2, [r3, #4]
 8012d16:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8012d18:	1d3b      	adds	r3, r7, #4
 8012d1a:	2200      	movs	r2, #0
 8012d1c:	601a      	str	r2, [r3, #0]
 8012d1e:	605a      	str	r2, [r3, #4]
 8012d20:	609a      	str	r2, [r3, #8]
 8012d22:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8012d24:	4b43      	ldr	r3, [pc, #268]	; (8012e34 <_ZL12MX_TIM1_Initv+0x13c>)
 8012d26:	4a44      	ldr	r2, [pc, #272]	; (8012e38 <_ZL12MX_TIM1_Initv+0x140>)
 8012d28:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 110;
 8012d2a:	4b42      	ldr	r3, [pc, #264]	; (8012e34 <_ZL12MX_TIM1_Initv+0x13c>)
 8012d2c:	226e      	movs	r2, #110	; 0x6e
 8012d2e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8012d30:	4b40      	ldr	r3, [pc, #256]	; (8012e34 <_ZL12MX_TIM1_Initv+0x13c>)
 8012d32:	2200      	movs	r2, #0
 8012d34:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 50000;
 8012d36:	4b3f      	ldr	r3, [pc, #252]	; (8012e34 <_ZL12MX_TIM1_Initv+0x13c>)
 8012d38:	f24c 3250 	movw	r2, #50000	; 0xc350
 8012d3c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8012d3e:	4b3d      	ldr	r3, [pc, #244]	; (8012e34 <_ZL12MX_TIM1_Initv+0x13c>)
 8012d40:	2200      	movs	r2, #0
 8012d42:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8012d44:	4b3b      	ldr	r3, [pc, #236]	; (8012e34 <_ZL12MX_TIM1_Initv+0x13c>)
 8012d46:	2200      	movs	r2, #0
 8012d48:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8012d4a:	4b3a      	ldr	r3, [pc, #232]	; (8012e34 <_ZL12MX_TIM1_Initv+0x13c>)
 8012d4c:	2280      	movs	r2, #128	; 0x80
 8012d4e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8012d50:	4838      	ldr	r0, [pc, #224]	; (8012e34 <_ZL12MX_TIM1_Initv+0x13c>)
 8012d52:	f007 fb5d 	bl	801a410 <HAL_TIM_Base_Init>
 8012d56:	4603      	mov	r3, r0
 8012d58:	2b00      	cmp	r3, #0
 8012d5a:	bf14      	ite	ne
 8012d5c:	2301      	movne	r3, #1
 8012d5e:	2300      	moveq	r3, #0
 8012d60:	b2db      	uxtb	r3, r3
 8012d62:	2b00      	cmp	r3, #0
 8012d64:	d001      	beq.n	8012d6a <_ZL12MX_TIM1_Initv+0x72>
  {
    Error_Handler();
 8012d66:	f000 fc30 	bl	80135ca <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8012d6a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012d6e:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8012d70:	f107 0320 	add.w	r3, r7, #32
 8012d74:	4619      	mov	r1, r3
 8012d76:	482f      	ldr	r0, [pc, #188]	; (8012e34 <_ZL12MX_TIM1_Initv+0x13c>)
 8012d78:	f008 fb88 	bl	801b48c <HAL_TIM_ConfigClockSource>
 8012d7c:	4603      	mov	r3, r0
 8012d7e:	2b00      	cmp	r3, #0
 8012d80:	bf14      	ite	ne
 8012d82:	2301      	movne	r3, #1
 8012d84:	2300      	moveq	r3, #0
 8012d86:	b2db      	uxtb	r3, r3
 8012d88:	2b00      	cmp	r3, #0
 8012d8a:	d001      	beq.n	8012d90 <_ZL12MX_TIM1_Initv+0x98>
  {
    Error_Handler();
 8012d8c:	f000 fc1d 	bl	80135ca <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 8012d90:	4828      	ldr	r0, [pc, #160]	; (8012e34 <_ZL12MX_TIM1_Initv+0x13c>)
 8012d92:	f007 fdcb 	bl	801a92c <HAL_TIM_IC_Init>
 8012d96:	4603      	mov	r3, r0
 8012d98:	2b00      	cmp	r3, #0
 8012d9a:	bf14      	ite	ne
 8012d9c:	2301      	movne	r3, #1
 8012d9e:	2300      	moveq	r3, #0
 8012da0:	b2db      	uxtb	r3, r3
 8012da2:	2b00      	cmp	r3, #0
 8012da4:	d001      	beq.n	8012daa <_ZL12MX_TIM1_Initv+0xb2>
  {
    Error_Handler();
 8012da6:	f000 fc10 	bl	80135ca <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8012daa:	2300      	movs	r3, #0
 8012dac:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8012dae:	2300      	movs	r3, #0
 8012db0:	61bb      	str	r3, [r7, #24]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8012db2:	2300      	movs	r3, #0
 8012db4:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8012db6:	f107 0314 	add.w	r3, r7, #20
 8012dba:	4619      	mov	r1, r3
 8012dbc:	481d      	ldr	r0, [pc, #116]	; (8012e34 <_ZL12MX_TIM1_Initv+0x13c>)
 8012dbe:	f009 f9e7 	bl	801c190 <HAL_TIMEx_MasterConfigSynchronization>
 8012dc2:	4603      	mov	r3, r0
 8012dc4:	2b00      	cmp	r3, #0
 8012dc6:	bf14      	ite	ne
 8012dc8:	2301      	movne	r3, #1
 8012dca:	2300      	moveq	r3, #0
 8012dcc:	b2db      	uxtb	r3, r3
 8012dce:	2b00      	cmp	r3, #0
 8012dd0:	d001      	beq.n	8012dd6 <_ZL12MX_TIM1_Initv+0xde>
  {
    Error_Handler();
 8012dd2:	f000 fbfa 	bl	80135ca <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8012dd6:	2300      	movs	r3, #0
 8012dd8:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8012dda:	2301      	movs	r3, #1
 8012ddc:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8012dde:	2300      	movs	r3, #0
 8012de0:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8012de2:	2300      	movs	r3, #0
 8012de4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 8012de6:	1d3b      	adds	r3, r7, #4
 8012de8:	2208      	movs	r2, #8
 8012dea:	4619      	mov	r1, r3
 8012dec:	4811      	ldr	r0, [pc, #68]	; (8012e34 <_ZL12MX_TIM1_Initv+0x13c>)
 8012dee:	f008 f99c 	bl	801b12a <HAL_TIM_IC_ConfigChannel>
 8012df2:	4603      	mov	r3, r0
 8012df4:	2b00      	cmp	r3, #0
 8012df6:	bf14      	ite	ne
 8012df8:	2301      	movne	r3, #1
 8012dfa:	2300      	moveq	r3, #0
 8012dfc:	b2db      	uxtb	r3, r3
 8012dfe:	2b00      	cmp	r3, #0
 8012e00:	d001      	beq.n	8012e06 <_ZL12MX_TIM1_Initv+0x10e>
  {
    Error_Handler();
 8012e02:	f000 fbe2 	bl	80135ca <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8012e06:	2302      	movs	r3, #2
 8012e08:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 8012e0a:	1d3b      	adds	r3, r7, #4
 8012e0c:	220c      	movs	r2, #12
 8012e0e:	4619      	mov	r1, r3
 8012e10:	4808      	ldr	r0, [pc, #32]	; (8012e34 <_ZL12MX_TIM1_Initv+0x13c>)
 8012e12:	f008 f98a 	bl	801b12a <HAL_TIM_IC_ConfigChannel>
 8012e16:	4603      	mov	r3, r0
 8012e18:	2b00      	cmp	r3, #0
 8012e1a:	bf14      	ite	ne
 8012e1c:	2301      	movne	r3, #1
 8012e1e:	2300      	moveq	r3, #0
 8012e20:	b2db      	uxtb	r3, r3
 8012e22:	2b00      	cmp	r3, #0
 8012e24:	d001      	beq.n	8012e2a <_ZL12MX_TIM1_Initv+0x132>
  {
    Error_Handler();
 8012e26:	f000 fbd0 	bl	80135ca <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8012e2a:	bf00      	nop
 8012e2c:	3730      	adds	r7, #48	; 0x30
 8012e2e:	46bd      	mov	sp, r7
 8012e30:	bd80      	pop	{r7, pc}
 8012e32:	bf00      	nop
 8012e34:	20000b28 	.word	0x20000b28
 8012e38:	40012c00 	.word	0x40012c00

08012e3c <_ZL12MX_TIM3_Initv>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8012e3c:	b580      	push	{r7, lr}
 8012e3e:	b08c      	sub	sp, #48	; 0x30
 8012e40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8012e42:	f107 030c 	add.w	r3, r7, #12
 8012e46:	2224      	movs	r2, #36	; 0x24
 8012e48:	2100      	movs	r1, #0
 8012e4a:	4618      	mov	r0, r3
 8012e4c:	f011 fcb1 	bl	80247b2 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8012e50:	463b      	mov	r3, r7
 8012e52:	2200      	movs	r2, #0
 8012e54:	601a      	str	r2, [r3, #0]
 8012e56:	605a      	str	r2, [r3, #4]
 8012e58:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8012e5a:	4b26      	ldr	r3, [pc, #152]	; (8012ef4 <_ZL12MX_TIM3_Initv+0xb8>)
 8012e5c:	4a26      	ldr	r2, [pc, #152]	; (8012ef8 <_ZL12MX_TIM3_Initv+0xbc>)
 8012e5e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8012e60:	4b24      	ldr	r3, [pc, #144]	; (8012ef4 <_ZL12MX_TIM3_Initv+0xb8>)
 8012e62:	2200      	movs	r2, #0
 8012e64:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8012e66:	4b23      	ldr	r3, [pc, #140]	; (8012ef4 <_ZL12MX_TIM3_Initv+0xb8>)
 8012e68:	2200      	movs	r2, #0
 8012e6a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8012e6c:	4b21      	ldr	r3, [pc, #132]	; (8012ef4 <_ZL12MX_TIM3_Initv+0xb8>)
 8012e6e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8012e72:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8012e74:	4b1f      	ldr	r3, [pc, #124]	; (8012ef4 <_ZL12MX_TIM3_Initv+0xb8>)
 8012e76:	2200      	movs	r2, #0
 8012e78:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8012e7a:	4b1e      	ldr	r3, [pc, #120]	; (8012ef4 <_ZL12MX_TIM3_Initv+0xb8>)
 8012e7c:	2200      	movs	r2, #0
 8012e7e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8012e80:	2303      	movs	r3, #3
 8012e82:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8012e84:	2300      	movs	r3, #0
 8012e86:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8012e88:	2301      	movs	r3, #1
 8012e8a:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8012e8c:	2300      	movs	r3, #0
 8012e8e:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8012e90:	2300      	movs	r3, #0
 8012e92:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8012e94:	2300      	movs	r3, #0
 8012e96:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8012e98:	2301      	movs	r3, #1
 8012e9a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8012e9c:	2300      	movs	r3, #0
 8012e9e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8012ea0:	2300      	movs	r3, #0
 8012ea2:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8012ea4:	f107 030c 	add.w	r3, r7, #12
 8012ea8:	4619      	mov	r1, r3
 8012eaa:	4812      	ldr	r0, [pc, #72]	; (8012ef4 <_ZL12MX_TIM3_Initv+0xb8>)
 8012eac:	f007 feea 	bl	801ac84 <HAL_TIM_Encoder_Init>
 8012eb0:	4603      	mov	r3, r0
 8012eb2:	2b00      	cmp	r3, #0
 8012eb4:	bf14      	ite	ne
 8012eb6:	2301      	movne	r3, #1
 8012eb8:	2300      	moveq	r3, #0
 8012eba:	b2db      	uxtb	r3, r3
 8012ebc:	2b00      	cmp	r3, #0
 8012ebe:	d001      	beq.n	8012ec4 <_ZL12MX_TIM3_Initv+0x88>
  {
    Error_Handler();
 8012ec0:	f000 fb83 	bl	80135ca <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8012ec4:	2300      	movs	r3, #0
 8012ec6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8012ec8:	2300      	movs	r3, #0
 8012eca:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8012ecc:	463b      	mov	r3, r7
 8012ece:	4619      	mov	r1, r3
 8012ed0:	4808      	ldr	r0, [pc, #32]	; (8012ef4 <_ZL12MX_TIM3_Initv+0xb8>)
 8012ed2:	f009 f95d 	bl	801c190 <HAL_TIMEx_MasterConfigSynchronization>
 8012ed6:	4603      	mov	r3, r0
 8012ed8:	2b00      	cmp	r3, #0
 8012eda:	bf14      	ite	ne
 8012edc:	2301      	movne	r3, #1
 8012ede:	2300      	moveq	r3, #0
 8012ee0:	b2db      	uxtb	r3, r3
 8012ee2:	2b00      	cmp	r3, #0
 8012ee4:	d001      	beq.n	8012eea <_ZL12MX_TIM3_Initv+0xae>
  {
    Error_Handler();
 8012ee6:	f000 fb70 	bl	80135ca <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8012eea:	bf00      	nop
 8012eec:	3730      	adds	r7, #48	; 0x30
 8012eee:	46bd      	mov	sp, r7
 8012ef0:	bd80      	pop	{r7, pc}
 8012ef2:	bf00      	nop
 8012ef4:	20000b74 	.word	0x20000b74
 8012ef8:	40000400 	.word	0x40000400

08012efc <_ZL12MX_TIM5_Initv>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8012efc:	b580      	push	{r7, lr}
 8012efe:	b08e      	sub	sp, #56	; 0x38
 8012f00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8012f02:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8012f06:	2200      	movs	r2, #0
 8012f08:	601a      	str	r2, [r3, #0]
 8012f0a:	605a      	str	r2, [r3, #4]
 8012f0c:	609a      	str	r2, [r3, #8]
 8012f0e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8012f10:	f107 031c 	add.w	r3, r7, #28
 8012f14:	2200      	movs	r2, #0
 8012f16:	601a      	str	r2, [r3, #0]
 8012f18:	605a      	str	r2, [r3, #4]
 8012f1a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8012f1c:	463b      	mov	r3, r7
 8012f1e:	2200      	movs	r2, #0
 8012f20:	601a      	str	r2, [r3, #0]
 8012f22:	605a      	str	r2, [r3, #4]
 8012f24:	609a      	str	r2, [r3, #8]
 8012f26:	60da      	str	r2, [r3, #12]
 8012f28:	611a      	str	r2, [r3, #16]
 8012f2a:	615a      	str	r2, [r3, #20]
 8012f2c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8012f2e:	4b41      	ldr	r3, [pc, #260]	; (8013034 <_ZL12MX_TIM5_Initv+0x138>)
 8012f30:	4a41      	ldr	r2, [pc, #260]	; (8013038 <_ZL12MX_TIM5_Initv+0x13c>)
 8012f32:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8012f34:	4b3f      	ldr	r3, [pc, #252]	; (8013034 <_ZL12MX_TIM5_Initv+0x138>)
 8012f36:	2200      	movs	r2, #0
 8012f38:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8012f3a:	4b3e      	ldr	r3, [pc, #248]	; (8013034 <_ZL12MX_TIM5_Initv+0x138>)
 8012f3c:	2220      	movs	r2, #32
 8012f3e:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 1834;
 8012f40:	4b3c      	ldr	r3, [pc, #240]	; (8013034 <_ZL12MX_TIM5_Initv+0x138>)
 8012f42:	f240 722a 	movw	r2, #1834	; 0x72a
 8012f46:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8012f48:	4b3a      	ldr	r3, [pc, #232]	; (8013034 <_ZL12MX_TIM5_Initv+0x138>)
 8012f4a:	2200      	movs	r2, #0
 8012f4c:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8012f4e:	4b39      	ldr	r3, [pc, #228]	; (8013034 <_ZL12MX_TIM5_Initv+0x138>)
 8012f50:	2280      	movs	r2, #128	; 0x80
 8012f52:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8012f54:	4837      	ldr	r0, [pc, #220]	; (8013034 <_ZL12MX_TIM5_Initv+0x138>)
 8012f56:	f007 fa5b 	bl	801a410 <HAL_TIM_Base_Init>
 8012f5a:	4603      	mov	r3, r0
 8012f5c:	2b00      	cmp	r3, #0
 8012f5e:	bf14      	ite	ne
 8012f60:	2301      	movne	r3, #1
 8012f62:	2300      	moveq	r3, #0
 8012f64:	b2db      	uxtb	r3, r3
 8012f66:	2b00      	cmp	r3, #0
 8012f68:	d001      	beq.n	8012f6e <_ZL12MX_TIM5_Initv+0x72>
  {
    Error_Handler();
 8012f6a:	f000 fb2e 	bl	80135ca <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8012f6e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012f72:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8012f74:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8012f78:	4619      	mov	r1, r3
 8012f7a:	482e      	ldr	r0, [pc, #184]	; (8013034 <_ZL12MX_TIM5_Initv+0x138>)
 8012f7c:	f008 fa86 	bl	801b48c <HAL_TIM_ConfigClockSource>
 8012f80:	4603      	mov	r3, r0
 8012f82:	2b00      	cmp	r3, #0
 8012f84:	bf14      	ite	ne
 8012f86:	2301      	movne	r3, #1
 8012f88:	2300      	moveq	r3, #0
 8012f8a:	b2db      	uxtb	r3, r3
 8012f8c:	2b00      	cmp	r3, #0
 8012f8e:	d001      	beq.n	8012f94 <_ZL12MX_TIM5_Initv+0x98>
  {
    Error_Handler();
 8012f90:	f000 fb1b 	bl	80135ca <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8012f94:	4827      	ldr	r0, [pc, #156]	; (8013034 <_ZL12MX_TIM5_Initv+0x138>)
 8012f96:	f007 fb6b 	bl	801a670 <HAL_TIM_PWM_Init>
 8012f9a:	4603      	mov	r3, r0
 8012f9c:	2b00      	cmp	r3, #0
 8012f9e:	bf14      	ite	ne
 8012fa0:	2301      	movne	r3, #1
 8012fa2:	2300      	moveq	r3, #0
 8012fa4:	b2db      	uxtb	r3, r3
 8012fa6:	2b00      	cmp	r3, #0
 8012fa8:	d001      	beq.n	8012fae <_ZL12MX_TIM5_Initv+0xb2>
  {
    Error_Handler();
 8012faa:	f000 fb0e 	bl	80135ca <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8012fae:	2300      	movs	r3, #0
 8012fb0:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8012fb2:	2300      	movs	r3, #0
 8012fb4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8012fb6:	f107 031c 	add.w	r3, r7, #28
 8012fba:	4619      	mov	r1, r3
 8012fbc:	481d      	ldr	r0, [pc, #116]	; (8013034 <_ZL12MX_TIM5_Initv+0x138>)
 8012fbe:	f009 f8e7 	bl	801c190 <HAL_TIMEx_MasterConfigSynchronization>
 8012fc2:	4603      	mov	r3, r0
 8012fc4:	2b00      	cmp	r3, #0
 8012fc6:	bf14      	ite	ne
 8012fc8:	2301      	movne	r3, #1
 8012fca:	2300      	moveq	r3, #0
 8012fcc:	b2db      	uxtb	r3, r3
 8012fce:	2b00      	cmp	r3, #0
 8012fd0:	d001      	beq.n	8012fd6 <_ZL12MX_TIM5_Initv+0xda>
  {
    Error_Handler();
 8012fd2:	f000 fafa 	bl	80135ca <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8012fd6:	2360      	movs	r3, #96	; 0x60
 8012fd8:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8012fda:	2300      	movs	r3, #0
 8012fdc:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8012fde:	2300      	movs	r3, #0
 8012fe0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8012fe2:	2300      	movs	r3, #0
 8012fe4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8012fe6:	463b      	mov	r3, r7
 8012fe8:	2200      	movs	r2, #0
 8012fea:	4619      	mov	r1, r3
 8012fec:	4811      	ldr	r0, [pc, #68]	; (8013034 <_ZL12MX_TIM5_Initv+0x138>)
 8012fee:	f008 f939 	bl	801b264 <HAL_TIM_PWM_ConfigChannel>
 8012ff2:	4603      	mov	r3, r0
 8012ff4:	2b00      	cmp	r3, #0
 8012ff6:	bf14      	ite	ne
 8012ff8:	2301      	movne	r3, #1
 8012ffa:	2300      	moveq	r3, #0
 8012ffc:	b2db      	uxtb	r3, r3
 8012ffe:	2b00      	cmp	r3, #0
 8013000:	d001      	beq.n	8013006 <_ZL12MX_TIM5_Initv+0x10a>
  {
    Error_Handler();
 8013002:	f000 fae2 	bl	80135ca <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8013006:	463b      	mov	r3, r7
 8013008:	220c      	movs	r2, #12
 801300a:	4619      	mov	r1, r3
 801300c:	4809      	ldr	r0, [pc, #36]	; (8013034 <_ZL12MX_TIM5_Initv+0x138>)
 801300e:	f008 f929 	bl	801b264 <HAL_TIM_PWM_ConfigChannel>
 8013012:	4603      	mov	r3, r0
 8013014:	2b00      	cmp	r3, #0
 8013016:	bf14      	ite	ne
 8013018:	2301      	movne	r3, #1
 801301a:	2300      	moveq	r3, #0
 801301c:	b2db      	uxtb	r3, r3
 801301e:	2b00      	cmp	r3, #0
 8013020:	d001      	beq.n	8013026 <_ZL12MX_TIM5_Initv+0x12a>
  {
    Error_Handler();
 8013022:	f000 fad2 	bl	80135ca <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8013026:	4803      	ldr	r0, [pc, #12]	; (8013034 <_ZL12MX_TIM5_Initv+0x138>)
 8013028:	f000 ff2c 	bl	8013e84 <HAL_TIM_MspPostInit>

}
 801302c:	bf00      	nop
 801302e:	3738      	adds	r7, #56	; 0x38
 8013030:	46bd      	mov	sp, r7
 8013032:	bd80      	pop	{r7, pc}
 8013034:	20000bc0 	.word	0x20000bc0
 8013038:	40000c00 	.word	0x40000c00

0801303c <_ZL12MX_TIM6_Initv>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 801303c:	b580      	push	{r7, lr}
 801303e:	b084      	sub	sp, #16
 8013040:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8013042:	1d3b      	adds	r3, r7, #4
 8013044:	2200      	movs	r2, #0
 8013046:	601a      	str	r2, [r3, #0]
 8013048:	605a      	str	r2, [r3, #4]
 801304a:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 801304c:	4b19      	ldr	r3, [pc, #100]	; (80130b4 <_ZL12MX_TIM6_Initv+0x78>)
 801304e:	4a1a      	ldr	r2, [pc, #104]	; (80130b8 <_ZL12MX_TIM6_Initv+0x7c>)
 8013050:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 110;
 8013052:	4b18      	ldr	r3, [pc, #96]	; (80130b4 <_ZL12MX_TIM6_Initv+0x78>)
 8013054:	226e      	movs	r2, #110	; 0x6e
 8013056:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8013058:	4b16      	ldr	r3, [pc, #88]	; (80130b4 <_ZL12MX_TIM6_Initv+0x78>)
 801305a:	2200      	movs	r2, #0
 801305c:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 801305e:	4b15      	ldr	r3, [pc, #84]	; (80130b4 <_ZL12MX_TIM6_Initv+0x78>)
 8013060:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8013064:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8013066:	4b13      	ldr	r3, [pc, #76]	; (80130b4 <_ZL12MX_TIM6_Initv+0x78>)
 8013068:	2200      	movs	r2, #0
 801306a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 801306c:	4811      	ldr	r0, [pc, #68]	; (80130b4 <_ZL12MX_TIM6_Initv+0x78>)
 801306e:	f007 f9cf 	bl	801a410 <HAL_TIM_Base_Init>
 8013072:	4603      	mov	r3, r0
 8013074:	2b00      	cmp	r3, #0
 8013076:	bf14      	ite	ne
 8013078:	2301      	movne	r3, #1
 801307a:	2300      	moveq	r3, #0
 801307c:	b2db      	uxtb	r3, r3
 801307e:	2b00      	cmp	r3, #0
 8013080:	d001      	beq.n	8013086 <_ZL12MX_TIM6_Initv+0x4a>
  {
    Error_Handler();
 8013082:	f000 faa2 	bl	80135ca <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8013086:	2300      	movs	r3, #0
 8013088:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 801308a:	2300      	movs	r3, #0
 801308c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 801308e:	1d3b      	adds	r3, r7, #4
 8013090:	4619      	mov	r1, r3
 8013092:	4808      	ldr	r0, [pc, #32]	; (80130b4 <_ZL12MX_TIM6_Initv+0x78>)
 8013094:	f009 f87c 	bl	801c190 <HAL_TIMEx_MasterConfigSynchronization>
 8013098:	4603      	mov	r3, r0
 801309a:	2b00      	cmp	r3, #0
 801309c:	bf14      	ite	ne
 801309e:	2301      	movne	r3, #1
 80130a0:	2300      	moveq	r3, #0
 80130a2:	b2db      	uxtb	r3, r3
 80130a4:	2b00      	cmp	r3, #0
 80130a6:	d001      	beq.n	80130ac <_ZL12MX_TIM6_Initv+0x70>
  {
    Error_Handler();
 80130a8:	f000 fa8f 	bl	80135ca <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80130ac:	bf00      	nop
 80130ae:	3710      	adds	r7, #16
 80130b0:	46bd      	mov	sp, r7
 80130b2:	bd80      	pop	{r7, pc}
 80130b4:	20000c0c 	.word	0x20000c0c
 80130b8:	40001000 	.word	0x40001000

080130bc <_ZL12MX_TIM8_Initv>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 80130bc:	b580      	push	{r7, lr}
 80130be:	b098      	sub	sp, #96	; 0x60
 80130c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80130c2:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80130c6:	2200      	movs	r2, #0
 80130c8:	601a      	str	r2, [r3, #0]
 80130ca:	605a      	str	r2, [r3, #4]
 80130cc:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80130ce:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80130d2:	2200      	movs	r2, #0
 80130d4:	601a      	str	r2, [r3, #0]
 80130d6:	605a      	str	r2, [r3, #4]
 80130d8:	609a      	str	r2, [r3, #8]
 80130da:	60da      	str	r2, [r3, #12]
 80130dc:	611a      	str	r2, [r3, #16]
 80130de:	615a      	str	r2, [r3, #20]
 80130e0:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80130e2:	1d3b      	adds	r3, r7, #4
 80130e4:	2234      	movs	r2, #52	; 0x34
 80130e6:	2100      	movs	r1, #0
 80130e8:	4618      	mov	r0, r3
 80130ea:	f011 fb62 	bl	80247b2 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80130ee:	4b45      	ldr	r3, [pc, #276]	; (8013204 <_ZL12MX_TIM8_Initv+0x148>)
 80130f0:	4a45      	ldr	r2, [pc, #276]	; (8013208 <_ZL12MX_TIM8_Initv+0x14c>)
 80130f2:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 110;
 80130f4:	4b43      	ldr	r3, [pc, #268]	; (8013204 <_ZL12MX_TIM8_Initv+0x148>)
 80130f6:	226e      	movs	r2, #110	; 0x6e
 80130f8:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80130fa:	4b42      	ldr	r3, [pc, #264]	; (8013204 <_ZL12MX_TIM8_Initv+0x148>)
 80130fc:	2200      	movs	r2, #0
 80130fe:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = PWM_PERIOD;
 8013100:	4b40      	ldr	r3, [pc, #256]	; (8013204 <_ZL12MX_TIM8_Initv+0x148>)
 8013102:	f242 7210 	movw	r2, #10000	; 0x2710
 8013106:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8013108:	4b3e      	ldr	r3, [pc, #248]	; (8013204 <_ZL12MX_TIM8_Initv+0x148>)
 801310a:	2200      	movs	r2, #0
 801310c:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 801310e:	4b3d      	ldr	r3, [pc, #244]	; (8013204 <_ZL12MX_TIM8_Initv+0x148>)
 8013110:	2200      	movs	r2, #0
 8013112:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8013114:	4b3b      	ldr	r3, [pc, #236]	; (8013204 <_ZL12MX_TIM8_Initv+0x148>)
 8013116:	2200      	movs	r2, #0
 8013118:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 801311a:	483a      	ldr	r0, [pc, #232]	; (8013204 <_ZL12MX_TIM8_Initv+0x148>)
 801311c:	f007 faa8 	bl	801a670 <HAL_TIM_PWM_Init>
 8013120:	4603      	mov	r3, r0
 8013122:	2b00      	cmp	r3, #0
 8013124:	bf14      	ite	ne
 8013126:	2301      	movne	r3, #1
 8013128:	2300      	moveq	r3, #0
 801312a:	b2db      	uxtb	r3, r3
 801312c:	2b00      	cmp	r3, #0
 801312e:	d001      	beq.n	8013134 <_ZL12MX_TIM8_Initv+0x78>
  {
    Error_Handler();
 8013130:	f000 fa4b 	bl	80135ca <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8013134:	2300      	movs	r3, #0
 8013136:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8013138:	2300      	movs	r3, #0
 801313a:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 801313c:	2300      	movs	r3, #0
 801313e:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8013140:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8013144:	4619      	mov	r1, r3
 8013146:	482f      	ldr	r0, [pc, #188]	; (8013204 <_ZL12MX_TIM8_Initv+0x148>)
 8013148:	f009 f822 	bl	801c190 <HAL_TIMEx_MasterConfigSynchronization>
 801314c:	4603      	mov	r3, r0
 801314e:	2b00      	cmp	r3, #0
 8013150:	bf14      	ite	ne
 8013152:	2301      	movne	r3, #1
 8013154:	2300      	moveq	r3, #0
 8013156:	b2db      	uxtb	r3, r3
 8013158:	2b00      	cmp	r3, #0
 801315a:	d001      	beq.n	8013160 <_ZL12MX_TIM8_Initv+0xa4>
  {
    Error_Handler();
 801315c:	f000 fa35 	bl	80135ca <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8013160:	2360      	movs	r3, #96	; 0x60
 8013162:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 8013164:	2300      	movs	r3, #0
 8013166:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8013168:	2300      	movs	r3, #0
 801316a:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 801316c:	2300      	movs	r3, #0
 801316e:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8013170:	2300      	movs	r3, #0
 8013172:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8013174:	2300      	movs	r3, #0
 8013176:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8013178:	2300      	movs	r3, #0
 801317a:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 801317c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8013180:	2200      	movs	r2, #0
 8013182:	4619      	mov	r1, r3
 8013184:	481f      	ldr	r0, [pc, #124]	; (8013204 <_ZL12MX_TIM8_Initv+0x148>)
 8013186:	f008 f86d 	bl	801b264 <HAL_TIM_PWM_ConfigChannel>
 801318a:	4603      	mov	r3, r0
 801318c:	2b00      	cmp	r3, #0
 801318e:	bf14      	ite	ne
 8013190:	2301      	movne	r3, #1
 8013192:	2300      	moveq	r3, #0
 8013194:	b2db      	uxtb	r3, r3
 8013196:	2b00      	cmp	r3, #0
 8013198:	d001      	beq.n	801319e <_ZL12MX_TIM8_Initv+0xe2>
  {
    Error_Handler();
 801319a:	f000 fa16 	bl	80135ca <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 801319e:	2300      	movs	r3, #0
 80131a0:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80131a2:	2300      	movs	r3, #0
 80131a4:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80131a6:	2300      	movs	r3, #0
 80131a8:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80131aa:	2300      	movs	r3, #0
 80131ac:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80131ae:	2300      	movs	r3, #0
 80131b0:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80131b2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80131b6:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80131b8:	2300      	movs	r3, #0
 80131ba:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 80131bc:	2300      	movs	r3, #0
 80131be:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80131c0:	2300      	movs	r3, #0
 80131c2:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80131c4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80131c8:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 80131ca:	2300      	movs	r3, #0
 80131cc:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 80131ce:	2300      	movs	r3, #0
 80131d0:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80131d2:	2300      	movs	r3, #0
 80131d4:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 80131d6:	1d3b      	adds	r3, r7, #4
 80131d8:	4619      	mov	r1, r3
 80131da:	480a      	ldr	r0, [pc, #40]	; (8013204 <_ZL12MX_TIM8_Initv+0x148>)
 80131dc:	f009 f860 	bl	801c2a0 <HAL_TIMEx_ConfigBreakDeadTime>
 80131e0:	4603      	mov	r3, r0
 80131e2:	2b00      	cmp	r3, #0
 80131e4:	bf14      	ite	ne
 80131e6:	2301      	movne	r3, #1
 80131e8:	2300      	moveq	r3, #0
 80131ea:	b2db      	uxtb	r3, r3
 80131ec:	2b00      	cmp	r3, #0
 80131ee:	d001      	beq.n	80131f4 <_ZL12MX_TIM8_Initv+0x138>
  {
    Error_Handler();
 80131f0:	f000 f9eb 	bl	80135ca <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 80131f4:	4803      	ldr	r0, [pc, #12]	; (8013204 <_ZL12MX_TIM8_Initv+0x148>)
 80131f6:	f000 fe45 	bl	8013e84 <HAL_TIM_MspPostInit>

}
 80131fa:	bf00      	nop
 80131fc:	3760      	adds	r7, #96	; 0x60
 80131fe:	46bd      	mov	sp, r7
 8013200:	bd80      	pop	{r7, pc}
 8013202:	bf00      	nop
 8013204:	20000c58 	.word	0x20000c58
 8013208:	40013400 	.word	0x40013400

0801320c <_ZL13MX_UCPD1_Initv>:
  * @brief UCPD1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UCPD1_Init(void)
{
 801320c:	b580      	push	{r7, lr}
 801320e:	b086      	sub	sp, #24
 8013210:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN UCPD1_Init 0 */

  /* USER CODE END UCPD1_Init 0 */

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8013212:	463b      	mov	r3, r7
 8013214:	2200      	movs	r2, #0
 8013216:	601a      	str	r2, [r3, #0]
 8013218:	605a      	str	r2, [r3, #4]
 801321a:	609a      	str	r2, [r3, #8]
 801321c:	60da      	str	r2, [r3, #12]
 801321e:	611a      	str	r2, [r3, #16]
 8013220:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP2_EnableClock(LL_APB1_GRP2_PERIPH_UCPD1);
 8013222:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8013226:	f7ff f8a5 	bl	8012374 <LL_APB1_GRP2_EnableClock>

  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 801322a:	2002      	movs	r0, #2
 801322c:	f7ff f88a 	bl	8012344 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 8013230:	2001      	movs	r0, #1
 8013232:	f7ff f887 	bl	8012344 <LL_AHB2_GRP1_EnableClock>
  /**UCPD1 GPIO Configuration
  PB15   ------> UCPD1_CC2
  PA15 (JTDI)   ------> UCPD1_CC1
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_15;
 8013236:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801323a:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 801323c:	2303      	movs	r3, #3
 801323e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8013240:	2300      	movs	r3, #0
 8013242:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8013244:	463b      	mov	r3, r7
 8013246:	4619      	mov	r1, r3
 8013248:	4809      	ldr	r0, [pc, #36]	; (8013270 <_ZL13MX_UCPD1_Initv+0x64>)
 801324a:	f00b fb5c 	bl	801e906 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_15;
 801324e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8013252:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8013254:	2303      	movs	r3, #3
 8013256:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8013258:	2300      	movs	r3, #0
 801325a:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801325c:	463b      	mov	r3, r7
 801325e:	4619      	mov	r1, r3
 8013260:	4804      	ldr	r0, [pc, #16]	; (8013274 <_ZL13MX_UCPD1_Initv+0x68>)
 8013262:	f00b fb50 	bl	801e906 <LL_GPIO_Init>
  /* USER CODE END UCPD1_Init 1 */
  /* USER CODE BEGIN UCPD1_Init 2 */

  /* USER CODE END UCPD1_Init 2 */

}
 8013266:	bf00      	nop
 8013268:	3718      	adds	r7, #24
 801326a:	46bd      	mov	sp, r7
 801326c:	bd80      	pop	{r7, pc}
 801326e:	bf00      	nop
 8013270:	42020400 	.word	0x42020400
 8013274:	42020000 	.word	0x42020000

08013278 <_ZL15MX_USB_PCD_Initv>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 8013278:	b580      	push	{r7, lr}
 801327a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 801327c:	4b13      	ldr	r3, [pc, #76]	; (80132cc <_ZL15MX_USB_PCD_Initv+0x54>)
 801327e:	4a14      	ldr	r2, [pc, #80]	; (80132d0 <_ZL15MX_USB_PCD_Initv+0x58>)
 8013280:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8013282:	4b12      	ldr	r3, [pc, #72]	; (80132cc <_ZL15MX_USB_PCD_Initv+0x54>)
 8013284:	2208      	movs	r2, #8
 8013286:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8013288:	4b10      	ldr	r3, [pc, #64]	; (80132cc <_ZL15MX_USB_PCD_Initv+0x54>)
 801328a:	2202      	movs	r2, #2
 801328c:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 801328e:	4b0f      	ldr	r3, [pc, #60]	; (80132cc <_ZL15MX_USB_PCD_Initv+0x54>)
 8013290:	2202      	movs	r2, #2
 8013292:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 8013294:	4b0d      	ldr	r3, [pc, #52]	; (80132cc <_ZL15MX_USB_PCD_Initv+0x54>)
 8013296:	2200      	movs	r2, #0
 8013298:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 801329a:	4b0c      	ldr	r3, [pc, #48]	; (80132cc <_ZL15MX_USB_PCD_Initv+0x54>)
 801329c:	2200      	movs	r2, #0
 801329e:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 80132a0:	4b0a      	ldr	r3, [pc, #40]	; (80132cc <_ZL15MX_USB_PCD_Initv+0x54>)
 80132a2:	2200      	movs	r2, #0
 80132a4:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80132a6:	4b09      	ldr	r3, [pc, #36]	; (80132cc <_ZL15MX_USB_PCD_Initv+0x54>)
 80132a8:	2200      	movs	r2, #0
 80132aa:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80132ac:	4807      	ldr	r0, [pc, #28]	; (80132cc <_ZL15MX_USB_PCD_Initv+0x54>)
 80132ae:	f004 f9b1 	bl	8017614 <HAL_PCD_Init>
 80132b2:	4603      	mov	r3, r0
 80132b4:	2b00      	cmp	r3, #0
 80132b6:	bf14      	ite	ne
 80132b8:	2301      	movne	r3, #1
 80132ba:	2300      	moveq	r3, #0
 80132bc:	b2db      	uxtb	r3, r3
 80132be:	2b00      	cmp	r3, #0
 80132c0:	d001      	beq.n	80132c6 <_ZL15MX_USB_PCD_Initv+0x4e>
  {
    Error_Handler();
 80132c2:	f000 f982 	bl	80135ca <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 80132c6:	bf00      	nop
 80132c8:	bd80      	pop	{r7, pc}
 80132ca:	bf00      	nop
 80132cc:	20000ca4 	.word	0x20000ca4
 80132d0:	4000d400 	.word	0x4000d400

080132d4 <_ZL11MX_DMA_Initv>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80132d4:	b580      	push	{r7, lr}
 80132d6:	b082      	sub	sp, #8
 80132d8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80132da:	4b12      	ldr	r3, [pc, #72]	; (8013324 <_ZL11MX_DMA_Initv+0x50>)
 80132dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80132de:	4a11      	ldr	r2, [pc, #68]	; (8013324 <_ZL11MX_DMA_Initv+0x50>)
 80132e0:	f043 0304 	orr.w	r3, r3, #4
 80132e4:	6493      	str	r3, [r2, #72]	; 0x48
 80132e6:	4b0f      	ldr	r3, [pc, #60]	; (8013324 <_ZL11MX_DMA_Initv+0x50>)
 80132e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80132ea:	f003 0304 	and.w	r3, r3, #4
 80132ee:	607b      	str	r3, [r7, #4]
 80132f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80132f2:	4b0c      	ldr	r3, [pc, #48]	; (8013324 <_ZL11MX_DMA_Initv+0x50>)
 80132f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80132f6:	4a0b      	ldr	r2, [pc, #44]	; (8013324 <_ZL11MX_DMA_Initv+0x50>)
 80132f8:	f043 0301 	orr.w	r3, r3, #1
 80132fc:	6493      	str	r3, [r2, #72]	; 0x48
 80132fe:	4b09      	ldr	r3, [pc, #36]	; (8013324 <_ZL11MX_DMA_Initv+0x50>)
 8013300:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8013302:	f003 0301 	and.w	r3, r3, #1
 8013306:	603b      	str	r3, [r7, #0]
 8013308:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 801330a:	2200      	movs	r2, #0
 801330c:	2105      	movs	r1, #5
 801330e:	201d      	movs	r0, #29
 8013310:	f002 fe24 	bl	8015f5c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8013314:	201d      	movs	r0, #29
 8013316:	f002 fe3b 	bl	8015f90 <HAL_NVIC_EnableIRQ>

}
 801331a:	bf00      	nop
 801331c:	3708      	adds	r7, #8
 801331e:	46bd      	mov	sp, r7
 8013320:	bd80      	pop	{r7, pc}
 8013322:	bf00      	nop
 8013324:	40021000 	.word	0x40021000

08013328 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8013328:	b580      	push	{r7, lr}
 801332a:	b08c      	sub	sp, #48	; 0x30
 801332c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 801332e:	f107 031c 	add.w	r3, r7, #28
 8013332:	2200      	movs	r2, #0
 8013334:	601a      	str	r2, [r3, #0]
 8013336:	605a      	str	r2, [r3, #4]
 8013338:	609a      	str	r2, [r3, #8]
 801333a:	60da      	str	r2, [r3, #12]
 801333c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 801333e:	4b8b      	ldr	r3, [pc, #556]	; (801356c <_ZL12MX_GPIO_Initv+0x244>)
 8013340:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8013342:	4a8a      	ldr	r2, [pc, #552]	; (801356c <_ZL12MX_GPIO_Initv+0x244>)
 8013344:	f043 0310 	orr.w	r3, r3, #16
 8013348:	64d3      	str	r3, [r2, #76]	; 0x4c
 801334a:	4b88      	ldr	r3, [pc, #544]	; (801356c <_ZL12MX_GPIO_Initv+0x244>)
 801334c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801334e:	f003 0310 	and.w	r3, r3, #16
 8013352:	61bb      	str	r3, [r7, #24]
 8013354:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8013356:	4b85      	ldr	r3, [pc, #532]	; (801356c <_ZL12MX_GPIO_Initv+0x244>)
 8013358:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801335a:	4a84      	ldr	r2, [pc, #528]	; (801356c <_ZL12MX_GPIO_Initv+0x244>)
 801335c:	f043 0304 	orr.w	r3, r3, #4
 8013360:	64d3      	str	r3, [r2, #76]	; 0x4c
 8013362:	4b82      	ldr	r3, [pc, #520]	; (801356c <_ZL12MX_GPIO_Initv+0x244>)
 8013364:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8013366:	f003 0304 	and.w	r3, r3, #4
 801336a:	617b      	str	r3, [r7, #20]
 801336c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 801336e:	4b7f      	ldr	r3, [pc, #508]	; (801356c <_ZL12MX_GPIO_Initv+0x244>)
 8013370:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8013372:	4a7e      	ldr	r2, [pc, #504]	; (801356c <_ZL12MX_GPIO_Initv+0x244>)
 8013374:	f043 0320 	orr.w	r3, r3, #32
 8013378:	64d3      	str	r3, [r2, #76]	; 0x4c
 801337a:	4b7c      	ldr	r3, [pc, #496]	; (801356c <_ZL12MX_GPIO_Initv+0x244>)
 801337c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801337e:	f003 0320 	and.w	r3, r3, #32
 8013382:	613b      	str	r3, [r7, #16]
 8013384:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8013386:	4b79      	ldr	r3, [pc, #484]	; (801356c <_ZL12MX_GPIO_Initv+0x244>)
 8013388:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801338a:	4a78      	ldr	r2, [pc, #480]	; (801356c <_ZL12MX_GPIO_Initv+0x244>)
 801338c:	f043 0301 	orr.w	r3, r3, #1
 8013390:	64d3      	str	r3, [r2, #76]	; 0x4c
 8013392:	4b76      	ldr	r3, [pc, #472]	; (801356c <_ZL12MX_GPIO_Initv+0x244>)
 8013394:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8013396:	f003 0301 	and.w	r3, r3, #1
 801339a:	60fb      	str	r3, [r7, #12]
 801339c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 801339e:	4b73      	ldr	r3, [pc, #460]	; (801356c <_ZL12MX_GPIO_Initv+0x244>)
 80133a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80133a2:	4a72      	ldr	r2, [pc, #456]	; (801356c <_ZL12MX_GPIO_Initv+0x244>)
 80133a4:	f043 0302 	orr.w	r3, r3, #2
 80133a8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80133aa:	4b70      	ldr	r3, [pc, #448]	; (801356c <_ZL12MX_GPIO_Initv+0x244>)
 80133ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80133ae:	f003 0302 	and.w	r3, r3, #2
 80133b2:	60bb      	str	r3, [r7, #8]
 80133b4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80133b6:	4b6d      	ldr	r3, [pc, #436]	; (801356c <_ZL12MX_GPIO_Initv+0x244>)
 80133b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80133ba:	4a6c      	ldr	r2, [pc, #432]	; (801356c <_ZL12MX_GPIO_Initv+0x244>)
 80133bc:	f043 0308 	orr.w	r3, r3, #8
 80133c0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80133c2:	4b6a      	ldr	r3, [pc, #424]	; (801356c <_ZL12MX_GPIO_Initv+0x244>)
 80133c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80133c6:	f003 0308 	and.w	r3, r3, #8
 80133ca:	607b      	str	r3, [r7, #4]
 80133cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80133ce:	4b67      	ldr	r3, [pc, #412]	; (801356c <_ZL12MX_GPIO_Initv+0x244>)
 80133d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80133d2:	4a66      	ldr	r2, [pc, #408]	; (801356c <_ZL12MX_GPIO_Initv+0x244>)
 80133d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80133d8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80133da:	4b64      	ldr	r3, [pc, #400]	; (801356c <_ZL12MX_GPIO_Initv+0x244>)
 80133dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80133de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80133e2:	603b      	str	r3, [r7, #0]
 80133e4:	683b      	ldr	r3, [r7, #0]
  HAL_PWREx_EnableVddIO2();
 80133e6:	f004 fa93 	bl	8017910 <HAL_PWREx_EnableVddIO2>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, DRIVE_ENABLE_Pin|MCU_LED_Pin|MOT_BATT_L_Pin|LV_BATT_L_Pin, GPIO_PIN_RESET);
 80133ea:	2200      	movs	r2, #0
 80133ec:	f24e 0108 	movw	r1, #57352	; 0xe008
 80133f0:	485f      	ldr	r0, [pc, #380]	; (8013570 <_ZL12MX_GPIO_Initv+0x248>)
 80133f2:	f003 fb09 	bl	8016a08 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, MAX_CS_Pin|UCPD_DBN_Pin|LED_BLUE_Pin, GPIO_PIN_RESET);
 80133f6:	2200      	movs	r2, #0
 80133f8:	21a4      	movs	r1, #164	; 0xa4
 80133fa:	485e      	ldr	r0, [pc, #376]	; (8013574 <_ZL12MX_GPIO_Initv+0x24c>)
 80133fc:	f003 fb04 	bl	8016a08 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, ADCF1_CS_Pin|ADCF2_CS_Pin|ADCF3_CS_Pin|ADCF4_CS_Pin
 8013400:	2200      	movs	r2, #0
 8013402:	f64f 7187 	movw	r1, #65415	; 0xff87
 8013406:	485c      	ldr	r0, [pc, #368]	; (8013578 <_ZL12MX_GPIO_Initv+0x250>)
 8013408:	f003 fafe 	bl	8016a08 <HAL_GPIO_WritePin>
                          |ADCR1_CS_Pin|ADCR2_CS_Pin|ADCR3_CS_Pin|ADCR4_CS_Pin
                          |INFRA_LE_F_Pin|LED_LE_F_Pin|INFRA_OE_F_Pin|LED_OE_F_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 801340c:	2200      	movs	r2, #0
 801340e:	2180      	movs	r1, #128	; 0x80
 8013410:	485a      	ldr	r0, [pc, #360]	; (801357c <_ZL12MX_GPIO_Initv+0x254>)
 8013412:	f003 faf9 	bl	8016a08 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_RESET);
 8013416:	2200      	movs	r2, #0
 8013418:	f44f 7100 	mov.w	r1, #512	; 0x200
 801341c:	4858      	ldr	r0, [pc, #352]	; (8013580 <_ZL12MX_GPIO_Initv+0x258>)
 801341e:	f003 faf3 	bl	8016a08 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, INFRA_LE_R_Pin|LED_LE_R_Pin|INFRA_OE_R_Pin|LED_OE_R_Pin
 8013422:	2200      	movs	r2, #0
 8013424:	f44f 41ec 	mov.w	r1, #30208	; 0x7600
 8013428:	4856      	ldr	r0, [pc, #344]	; (8013584 <_ZL12MX_GPIO_Initv+0x25c>)
 801342a:	f003 faed 	bl	8016a08 <HAL_GPIO_WritePin>
                          |LED1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : DRIVE_ENABLE_Pin */
  GPIO_InitStruct.Pin = DRIVE_ENABLE_Pin;
 801342e:	2308      	movs	r3, #8
 8013430:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8013432:	2301      	movs	r3, #1
 8013434:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8013436:	2302      	movs	r3, #2
 8013438:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801343a:	2303      	movs	r3, #3
 801343c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(DRIVE_ENABLE_GPIO_Port, &GPIO_InitStruct);
 801343e:	f107 031c 	add.w	r3, r7, #28
 8013442:	4619      	mov	r1, r3
 8013444:	484a      	ldr	r0, [pc, #296]	; (8013570 <_ZL12MX_GPIO_Initv+0x248>)
 8013446:	f003 f95f 	bl	8016708 <HAL_GPIO_Init>

  /*Configure GPIO pins : MCU_FB_Pin REMOTE_GAS_Pin REMOTE_STEER_Pin */
  GPIO_InitStruct.Pin = MCU_FB_Pin|REMOTE_GAS_Pin|REMOTE_STEER_Pin;
 801344a:	f44f 73d0 	mov.w	r3, #416	; 0x1a0
 801344e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8013450:	2300      	movs	r3, #0
 8013452:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8013454:	2300      	movs	r3, #0
 8013456:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8013458:	f107 031c 	add.w	r3, r7, #28
 801345c:	4619      	mov	r1, r3
 801345e:	4844      	ldr	r0, [pc, #272]	; (8013570 <_ZL12MX_GPIO_Initv+0x248>)
 8013460:	f003 f952 	bl	8016708 <HAL_GPIO_Init>

  /*Configure GPIO pins : MAX_CS_Pin UCPD_DBN_Pin LED_BLUE_Pin */
  GPIO_InitStruct.Pin = MAX_CS_Pin|UCPD_DBN_Pin|LED_BLUE_Pin;
 8013464:	23a4      	movs	r3, #164	; 0xa4
 8013466:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8013468:	2301      	movs	r3, #1
 801346a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 801346c:	2300      	movs	r3, #0
 801346e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8013470:	2300      	movs	r3, #0
 8013472:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8013474:	f107 031c 	add.w	r3, r7, #28
 8013478:	4619      	mov	r1, r3
 801347a:	483e      	ldr	r0, [pc, #248]	; (8013574 <_ZL12MX_GPIO_Initv+0x24c>)
 801347c:	f003 f944 	bl	8016708 <HAL_GPIO_Init>

  /*Configure GPIO pins : MCU_LED_Pin MOT_BATT_L_Pin LV_BATT_L_Pin */
  GPIO_InitStruct.Pin = MCU_LED_Pin|MOT_BATT_L_Pin|LV_BATT_L_Pin;
 8013480:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8013484:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8013486:	2301      	movs	r3, #1
 8013488:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 801348a:	2300      	movs	r3, #0
 801348c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801348e:	2300      	movs	r3, #0
 8013490:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8013492:	f107 031c 	add.w	r3, r7, #28
 8013496:	4619      	mov	r1, r3
 8013498:	4835      	ldr	r0, [pc, #212]	; (8013570 <_ZL12MX_GPIO_Initv+0x248>)
 801349a:	f003 f935 	bl	8016708 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON2_Pin ROTARY1_Pin ROTARY2_Pin ROTARY3_Pin
                           ROTARY4_Pin BUTTON1_Pin */
  GPIO_InitStruct.Pin = BUTTON2_Pin|ROTARY1_Pin|ROTARY2_Pin|ROTARY3_Pin
 801349e:	f643 6301 	movw	r3, #15873	; 0x3e01
 80134a2:	61fb      	str	r3, [r7, #28]
                          |ROTARY4_Pin|BUTTON1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80134a4:	2300      	movs	r3, #0
 80134a6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80134a8:	2300      	movs	r3, #0
 80134aa:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80134ac:	f107 031c 	add.w	r3, r7, #28
 80134b0:	4619      	mov	r1, r3
 80134b2:	4835      	ldr	r0, [pc, #212]	; (8013588 <_ZL12MX_GPIO_Initv+0x260>)
 80134b4:	f003 f928 	bl	8016708 <HAL_GPIO_Init>

  /*Configure GPIO pin : UCPD_FLT_Pin */
  GPIO_InitStruct.Pin = UCPD_FLT_Pin;
 80134b8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80134bc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80134be:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80134c2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80134c4:	2300      	movs	r3, #0
 80134c6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(UCPD_FLT_GPIO_Port, &GPIO_InitStruct);
 80134c8:	f107 031c 	add.w	r3, r7, #28
 80134cc:	4619      	mov	r1, r3
 80134ce:	4829      	ldr	r0, [pc, #164]	; (8013574 <_ZL12MX_GPIO_Initv+0x24c>)
 80134d0:	f003 f91a 	bl	8016708 <HAL_GPIO_Init>

  /*Configure GPIO pins : ADCF1_CS_Pin ADCF2_CS_Pin ADCF3_CS_Pin ADCF4_CS_Pin
                           ADCR1_CS_Pin ADCR2_CS_Pin ADCR3_CS_Pin ADCR4_CS_Pin
                           INFRA_LE_F_Pin LED_LE_F_Pin INFRA_OE_F_Pin LED_OE_F_Pin */
  GPIO_InitStruct.Pin = ADCF1_CS_Pin|ADCF2_CS_Pin|ADCF3_CS_Pin|ADCF4_CS_Pin
 80134d4:	f64f 7387 	movw	r3, #65415	; 0xff87
 80134d8:	61fb      	str	r3, [r7, #28]
                          |ADCR1_CS_Pin|ADCR2_CS_Pin|ADCR3_CS_Pin|ADCR4_CS_Pin
                          |INFRA_LE_F_Pin|LED_LE_F_Pin|INFRA_OE_F_Pin|LED_OE_F_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80134da:	2301      	movs	r3, #1
 80134dc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80134de:	2300      	movs	r3, #0
 80134e0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80134e2:	2300      	movs	r3, #0
 80134e4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80134e6:	f107 031c 	add.w	r3, r7, #28
 80134ea:	4619      	mov	r1, r3
 80134ec:	4822      	ldr	r0, [pc, #136]	; (8013578 <_ZL12MX_GPIO_Initv+0x250>)
 80134ee:	f003 f90b 	bl	8016708 <HAL_GPIO_Init>

  /*Configure GPIO pins : RESET_BUTTON_Pin SET_BUTTON_Pin LED2_Pin */
  GPIO_InitStruct.Pin = RESET_BUTTON_Pin|SET_BUTTON_Pin|LED2_Pin;
 80134f2:	2370      	movs	r3, #112	; 0x70
 80134f4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80134f6:	2300      	movs	r3, #0
 80134f8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80134fa:	2300      	movs	r3, #0
 80134fc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80134fe:	f107 031c 	add.w	r3, r7, #28
 8013502:	4619      	mov	r1, r3
 8013504:	481f      	ldr	r0, [pc, #124]	; (8013584 <_ZL12MX_GPIO_Initv+0x25c>)
 8013506:	f003 f8ff 	bl	8016708 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_GREEN_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin;
 801350a:	2380      	movs	r3, #128	; 0x80
 801350c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 801350e:	2301      	movs	r3, #1
 8013510:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8013512:	2300      	movs	r3, #0
 8013514:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8013516:	2300      	movs	r3, #0
 8013518:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 801351a:	f107 031c 	add.w	r3, r7, #28
 801351e:	4619      	mov	r1, r3
 8013520:	4816      	ldr	r0, [pc, #88]	; (801357c <_ZL12MX_GPIO_Initv+0x254>)
 8013522:	f003 f8f1 	bl	8016708 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_RED_Pin */
  GPIO_InitStruct.Pin = LED_RED_Pin;
 8013526:	f44f 7300 	mov.w	r3, #512	; 0x200
 801352a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 801352c:	2301      	movs	r3, #1
 801352e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8013530:	2300      	movs	r3, #0
 8013532:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8013534:	2300      	movs	r3, #0
 8013536:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LED_RED_GPIO_Port, &GPIO_InitStruct);
 8013538:	f107 031c 	add.w	r3, r7, #28
 801353c:	4619      	mov	r1, r3
 801353e:	4810      	ldr	r0, [pc, #64]	; (8013580 <_ZL12MX_GPIO_Initv+0x258>)
 8013540:	f003 f8e2 	bl	8016708 <HAL_GPIO_Init>

  /*Configure GPIO pins : INFRA_LE_R_Pin LED_LE_R_Pin INFRA_OE_R_Pin LED_OE_R_Pin
                           LED1_Pin */
  GPIO_InitStruct.Pin = INFRA_LE_R_Pin|LED_LE_R_Pin|INFRA_OE_R_Pin|LED_OE_R_Pin
 8013544:	f44f 43ec 	mov.w	r3, #30208	; 0x7600
 8013548:	61fb      	str	r3, [r7, #28]
                          |LED1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 801354a:	2301      	movs	r3, #1
 801354c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 801354e:	2300      	movs	r3, #0
 8013550:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8013552:	2300      	movs	r3, #0
 8013554:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8013556:	f107 031c 	add.w	r3, r7, #28
 801355a:	4619      	mov	r1, r3
 801355c:	4809      	ldr	r0, [pc, #36]	; (8013584 <_ZL12MX_GPIO_Initv+0x25c>)
 801355e:	f003 f8d3 	bl	8016708 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8013562:	bf00      	nop
 8013564:	3730      	adds	r7, #48	; 0x30
 8013566:	46bd      	mov	sp, r7
 8013568:	bd80      	pop	{r7, pc}
 801356a:	bf00      	nop
 801356c:	40021000 	.word	0x40021000
 8013570:	42021400 	.word	0x42021400
 8013574:	42020400 	.word	0x42020400
 8013578:	42020c00 	.word	0x42020c00
 801357c:	42020800 	.word	0x42020800
 8013580:	42020000 	.word	0x42020000
 8013584:	42021800 	.word	0x42021800
 8013588:	42021000 	.word	0x42021000

0801358c <_Z16StartDefaultTaskPv>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 801358c:	b580      	push	{r7, lr}
 801358e:	b082      	sub	sp, #8
 8013590:	af00      	add	r7, sp, #0
 8013592:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  HAL_GPIO_TogglePin(LED_RED_GPIO_Port, LED_RED_Pin);
 8013594:	f44f 7100 	mov.w	r1, #512	; 0x200
 8013598:	4803      	ldr	r0, [pc, #12]	; (80135a8 <_Z16StartDefaultTaskPv+0x1c>)
 801359a:	f003 fa4d 	bl	8016a38 <HAL_GPIO_TogglePin>
	  vTaskDelay(100);
 801359e:	2064      	movs	r0, #100	; 0x64
 80135a0:	f00c fa68 	bl	801fa74 <vTaskDelay>
	  HAL_GPIO_TogglePin(LED_RED_GPIO_Port, LED_RED_Pin);
 80135a4:	e7f6      	b.n	8013594 <_Z16StartDefaultTaskPv+0x8>
 80135a6:	bf00      	nop
 80135a8:	42020000 	.word	0x42020000

080135ac <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80135ac:	b580      	push	{r7, lr}
 80135ae:	b082      	sub	sp, #8
 80135b0:	af00      	add	r7, sp, #0
 80135b2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 80135b4:	687b      	ldr	r3, [r7, #4]
 80135b6:	681b      	ldr	r3, [r3, #0]
 80135b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80135bc:	d101      	bne.n	80135c2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80135be:	f000 ffb3 	bl	8014528 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */
  /* USER CODE END Callback 1 */
}
 80135c2:	bf00      	nop
 80135c4:	3708      	adds	r7, #8
 80135c6:	46bd      	mov	sp, r7
 80135c8:	bd80      	pop	{r7, pc}

080135ca <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80135ca:	b480      	push	{r7}
 80135cc:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80135ce:	b672      	cpsid	i
}
 80135d0:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80135d2:	e7fe      	b.n	80135d2 <Error_Handler+0x8>

080135d4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80135d4:	b580      	push	{r7, lr}
 80135d6:	b082      	sub	sp, #8
 80135d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80135da:	4b11      	ldr	r3, [pc, #68]	; (8013620 <HAL_MspInit+0x4c>)
 80135dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80135de:	4a10      	ldr	r2, [pc, #64]	; (8013620 <HAL_MspInit+0x4c>)
 80135e0:	f043 0301 	orr.w	r3, r3, #1
 80135e4:	6613      	str	r3, [r2, #96]	; 0x60
 80135e6:	4b0e      	ldr	r3, [pc, #56]	; (8013620 <HAL_MspInit+0x4c>)
 80135e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80135ea:	f003 0301 	and.w	r3, r3, #1
 80135ee:	607b      	str	r3, [r7, #4]
 80135f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80135f2:	4b0b      	ldr	r3, [pc, #44]	; (8013620 <HAL_MspInit+0x4c>)
 80135f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80135f6:	4a0a      	ldr	r2, [pc, #40]	; (8013620 <HAL_MspInit+0x4c>)
 80135f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80135fc:	6593      	str	r3, [r2, #88]	; 0x58
 80135fe:	4b08      	ldr	r3, [pc, #32]	; (8013620 <HAL_MspInit+0x4c>)
 8013600:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8013602:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8013606:	603b      	str	r3, [r7, #0]
 8013608:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 7, 0);
 801360a:	2200      	movs	r2, #0
 801360c:	2107      	movs	r1, #7
 801360e:	f06f 0001 	mvn.w	r0, #1
 8013612:	f002 fca3 	bl	8015f5c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8013616:	bf00      	nop
 8013618:	3708      	adds	r7, #8
 801361a:	46bd      	mov	sp, r7
 801361c:	bd80      	pop	{r7, pc}
 801361e:	bf00      	nop
 8013620:	40021000 	.word	0x40021000

08013624 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8013624:	b580      	push	{r7, lr}
 8013626:	b08c      	sub	sp, #48	; 0x30
 8013628:	af00      	add	r7, sp, #0
 801362a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 801362c:	f107 031c 	add.w	r3, r7, #28
 8013630:	2200      	movs	r2, #0
 8013632:	601a      	str	r2, [r3, #0]
 8013634:	605a      	str	r2, [r3, #4]
 8013636:	609a      	str	r2, [r3, #8]
 8013638:	60da      	str	r2, [r3, #12]
 801363a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 801363c:	687b      	ldr	r3, [r7, #4]
 801363e:	681b      	ldr	r3, [r3, #0]
 8013640:	4a4b      	ldr	r2, [pc, #300]	; (8013770 <HAL_ADC_MspInit+0x14c>)
 8013642:	4293      	cmp	r3, r2
 8013644:	f040 8090 	bne.w	8013768 <HAL_ADC_MspInit+0x144>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8013648:	4b4a      	ldr	r3, [pc, #296]	; (8013774 <HAL_ADC_MspInit+0x150>)
 801364a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801364c:	4a49      	ldr	r2, [pc, #292]	; (8013774 <HAL_ADC_MspInit+0x150>)
 801364e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8013652:	64d3      	str	r3, [r2, #76]	; 0x4c
 8013654:	4b47      	ldr	r3, [pc, #284]	; (8013774 <HAL_ADC_MspInit+0x150>)
 8013656:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8013658:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 801365c:	61bb      	str	r3, [r7, #24]
 801365e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8013660:	4b44      	ldr	r3, [pc, #272]	; (8013774 <HAL_ADC_MspInit+0x150>)
 8013662:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8013664:	4a43      	ldr	r2, [pc, #268]	; (8013774 <HAL_ADC_MspInit+0x150>)
 8013666:	f043 0304 	orr.w	r3, r3, #4
 801366a:	64d3      	str	r3, [r2, #76]	; 0x4c
 801366c:	4b41      	ldr	r3, [pc, #260]	; (8013774 <HAL_ADC_MspInit+0x150>)
 801366e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8013670:	f003 0304 	and.w	r3, r3, #4
 8013674:	617b      	str	r3, [r7, #20]
 8013676:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8013678:	4b3e      	ldr	r3, [pc, #248]	; (8013774 <HAL_ADC_MspInit+0x150>)
 801367a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801367c:	4a3d      	ldr	r2, [pc, #244]	; (8013774 <HAL_ADC_MspInit+0x150>)
 801367e:	f043 0301 	orr.w	r3, r3, #1
 8013682:	64d3      	str	r3, [r2, #76]	; 0x4c
 8013684:	4b3b      	ldr	r3, [pc, #236]	; (8013774 <HAL_ADC_MspInit+0x150>)
 8013686:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8013688:	f003 0301 	and.w	r3, r3, #1
 801368c:	613b      	str	r3, [r7, #16]
 801368e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8013690:	4b38      	ldr	r3, [pc, #224]	; (8013774 <HAL_ADC_MspInit+0x150>)
 8013692:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8013694:	4a37      	ldr	r2, [pc, #220]	; (8013774 <HAL_ADC_MspInit+0x150>)
 8013696:	f043 0302 	orr.w	r3, r3, #2
 801369a:	64d3      	str	r3, [r2, #76]	; 0x4c
 801369c:	4b35      	ldr	r3, [pc, #212]	; (8013774 <HAL_ADC_MspInit+0x150>)
 801369e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80136a0:	f003 0302 	and.w	r3, r3, #2
 80136a4:	60fb      	str	r3, [r7, #12]
 80136a6:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> ADC1_IN9
    PA7     ------> ADC1_IN12
    PB0     ------> ADC1_IN15
    PB1     ------> ADC1_IN16
    */
    GPIO_InitStruct.Pin = BATT_VOLTAGE_Pin|MOT_CURR_Pin|VBUS_SENSE_Pin|ENC_CHA_Pin;
 80136a8:	230f      	movs	r3, #15
 80136aa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80136ac:	2303      	movs	r3, #3
 80136ae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80136b0:	2300      	movs	r3, #0
 80136b2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80136b4:	f107 031c 	add.w	r3, r7, #28
 80136b8:	4619      	mov	r1, r3
 80136ba:	482f      	ldr	r0, [pc, #188]	; (8013778 <HAL_ADC_MspInit+0x154>)
 80136bc:	f003 f824 	bl	8016708 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DISTANCE2_ADC_Pin|DISTANCE1_ADC_Pin|DISTANCE3_ADC_Pin|LV_BATT_Pin;
 80136c0:	239c      	movs	r3, #156	; 0x9c
 80136c2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80136c4:	2303      	movs	r3, #3
 80136c6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80136c8:	2300      	movs	r3, #0
 80136ca:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80136cc:	f107 031c 	add.w	r3, r7, #28
 80136d0:	4619      	mov	r1, r3
 80136d2:	482a      	ldr	r0, [pc, #168]	; (801377c <HAL_ADC_MspInit+0x158>)
 80136d4:	f003 f818 	bl	8016708 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ENC_CHBB0_Pin|DISTANCE4_ADC_Pin;
 80136d8:	2303      	movs	r3, #3
 80136da:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80136dc:	2303      	movs	r3, #3
 80136de:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80136e0:	2300      	movs	r3, #0
 80136e2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80136e4:	f107 031c 	add.w	r3, r7, #28
 80136e8:	4619      	mov	r1, r3
 80136ea:	4825      	ldr	r0, [pc, #148]	; (8013780 <HAL_ADC_MspInit+0x15c>)
 80136ec:	f003 f80c 	bl	8016708 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80136f0:	4b24      	ldr	r3, [pc, #144]	; (8013784 <HAL_ADC_MspInit+0x160>)
 80136f2:	4a25      	ldr	r2, [pc, #148]	; (8013788 <HAL_ADC_MspInit+0x164>)
 80136f4:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 80136f6:	4b23      	ldr	r3, [pc, #140]	; (8013784 <HAL_ADC_MspInit+0x160>)
 80136f8:	2205      	movs	r2, #5
 80136fa:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80136fc:	4b21      	ldr	r3, [pc, #132]	; (8013784 <HAL_ADC_MspInit+0x160>)
 80136fe:	2200      	movs	r2, #0
 8013700:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8013702:	4b20      	ldr	r3, [pc, #128]	; (8013784 <HAL_ADC_MspInit+0x160>)
 8013704:	2200      	movs	r2, #0
 8013706:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8013708:	4b1e      	ldr	r3, [pc, #120]	; (8013784 <HAL_ADC_MspInit+0x160>)
 801370a:	2280      	movs	r2, #128	; 0x80
 801370c:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 801370e:	4b1d      	ldr	r3, [pc, #116]	; (8013784 <HAL_ADC_MspInit+0x160>)
 8013710:	f44f 7200 	mov.w	r2, #512	; 0x200
 8013714:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8013716:	4b1b      	ldr	r3, [pc, #108]	; (8013784 <HAL_ADC_MspInit+0x160>)
 8013718:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801371c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 801371e:	4b19      	ldr	r3, [pc, #100]	; (8013784 <HAL_ADC_MspInit+0x160>)
 8013720:	2200      	movs	r2, #0
 8013722:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8013724:	4b17      	ldr	r3, [pc, #92]	; (8013784 <HAL_ADC_MspInit+0x160>)
 8013726:	2200      	movs	r2, #0
 8013728:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 801372a:	4816      	ldr	r0, [pc, #88]	; (8013784 <HAL_ADC_MspInit+0x160>)
 801372c:	f002 fc3e 	bl	8015fac <HAL_DMA_Init>
 8013730:	4603      	mov	r3, r0
 8013732:	2b00      	cmp	r3, #0
 8013734:	d001      	beq.n	801373a <HAL_ADC_MspInit+0x116>
    {
      Error_Handler();
 8013736:	f7ff ff48 	bl	80135ca <Error_Handler>
    }

    if (HAL_DMA_ConfigChannelAttributes(&hdma_adc1, DMA_CHANNEL_NPRIV) != HAL_OK)
 801373a:	2110      	movs	r1, #16
 801373c:	4811      	ldr	r0, [pc, #68]	; (8013784 <HAL_ADC_MspInit+0x160>)
 801373e:	f002 ff13 	bl	8016568 <HAL_DMA_ConfigChannelAttributes>
 8013742:	4603      	mov	r3, r0
 8013744:	2b00      	cmp	r3, #0
 8013746:	d001      	beq.n	801374c <HAL_ADC_MspInit+0x128>
    {
      Error_Handler();
 8013748:	f7ff ff3f 	bl	80135ca <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 801374c:	687b      	ldr	r3, [r7, #4]
 801374e:	4a0d      	ldr	r2, [pc, #52]	; (8013784 <HAL_ADC_MspInit+0x160>)
 8013750:	651a      	str	r2, [r3, #80]	; 0x50
 8013752:	4a0c      	ldr	r2, [pc, #48]	; (8013784 <HAL_ADC_MspInit+0x160>)
 8013754:	687b      	ldr	r3, [r7, #4]
 8013756:	6293      	str	r3, [r2, #40]	; 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 5, 0);
 8013758:	2200      	movs	r2, #0
 801375a:	2105      	movs	r1, #5
 801375c:	2025      	movs	r0, #37	; 0x25
 801375e:	f002 fbfd 	bl	8015f5c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8013762:	2025      	movs	r0, #37	; 0x25
 8013764:	f002 fc14 	bl	8015f90 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8013768:	bf00      	nop
 801376a:	3730      	adds	r7, #48	; 0x30
 801376c:	46bd      	mov	sp, r7
 801376e:	bd80      	pop	{r7, pc}
 8013770:	42028000 	.word	0x42028000
 8013774:	40021000 	.word	0x40021000
 8013778:	42020800 	.word	0x42020800
 801377c:	42020000 	.word	0x42020000
 8013780:	42020400 	.word	0x42020400
 8013784:	2000075c 	.word	0x2000075c
 8013788:	40020008 	.word	0x40020008

0801378c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 801378c:	b580      	push	{r7, lr}
 801378e:	b0ae      	sub	sp, #184	; 0xb8
 8013790:	af00      	add	r7, sp, #0
 8013792:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8013794:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8013798:	2200      	movs	r2, #0
 801379a:	601a      	str	r2, [r3, #0]
 801379c:	605a      	str	r2, [r3, #4]
 801379e:	609a      	str	r2, [r3, #8]
 80137a0:	60da      	str	r2, [r3, #12]
 80137a2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80137a4:	f107 0310 	add.w	r3, r7, #16
 80137a8:	2294      	movs	r2, #148	; 0x94
 80137aa:	2100      	movs	r1, #0
 80137ac:	4618      	mov	r0, r3
 80137ae:	f011 f800 	bl	80247b2 <memset>
  if(hi2c->Instance==I2C1)
 80137b2:	687b      	ldr	r3, [r7, #4]
 80137b4:	681b      	ldr	r3, [r3, #0]
 80137b6:	4a21      	ldr	r2, [pc, #132]	; (801383c <HAL_I2C_MspInit+0xb0>)
 80137b8:	4293      	cmp	r3, r2
 80137ba:	d13b      	bne.n	8013834 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80137bc:	2340      	movs	r3, #64	; 0x40
 80137be:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80137c0:	2300      	movs	r3, #0
 80137c2:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80137c4:	f107 0310 	add.w	r3, r7, #16
 80137c8:	4618      	mov	r0, r3
 80137ca:	f005 f8c1 	bl	8018950 <HAL_RCCEx_PeriphCLKConfig>
 80137ce:	4603      	mov	r3, r0
 80137d0:	2b00      	cmp	r3, #0
 80137d2:	d001      	beq.n	80137d8 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 80137d4:	f7ff fef9 	bl	80135ca <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80137d8:	4b19      	ldr	r3, [pc, #100]	; (8013840 <HAL_I2C_MspInit+0xb4>)
 80137da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80137dc:	4a18      	ldr	r2, [pc, #96]	; (8013840 <HAL_I2C_MspInit+0xb4>)
 80137de:	f043 0302 	orr.w	r3, r3, #2
 80137e2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80137e4:	4b16      	ldr	r3, [pc, #88]	; (8013840 <HAL_I2C_MspInit+0xb4>)
 80137e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80137e8:	f003 0302 	and.w	r3, r3, #2
 80137ec:	60fb      	str	r3, [r7, #12]
 80137ee:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80137f0:	f44f 7340 	mov.w	r3, #768	; 0x300
 80137f4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80137f8:	2312      	movs	r3, #18
 80137fa:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80137fe:	2300      	movs	r3, #0
 8013800:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8013804:	2300      	movs	r3, #0
 8013806:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 801380a:	2304      	movs	r3, #4
 801380c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8013810:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8013814:	4619      	mov	r1, r3
 8013816:	480b      	ldr	r0, [pc, #44]	; (8013844 <HAL_I2C_MspInit+0xb8>)
 8013818:	f002 ff76 	bl	8016708 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 801381c:	4b08      	ldr	r3, [pc, #32]	; (8013840 <HAL_I2C_MspInit+0xb4>)
 801381e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8013820:	4a07      	ldr	r2, [pc, #28]	; (8013840 <HAL_I2C_MspInit+0xb4>)
 8013822:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8013826:	6593      	str	r3, [r2, #88]	; 0x58
 8013828:	4b05      	ldr	r3, [pc, #20]	; (8013840 <HAL_I2C_MspInit+0xb4>)
 801382a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801382c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8013830:	60bb      	str	r3, [r7, #8]
 8013832:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8013834:	bf00      	nop
 8013836:	37b8      	adds	r7, #184	; 0xb8
 8013838:	46bd      	mov	sp, r7
 801383a:	bd80      	pop	{r7, pc}
 801383c:	40005400 	.word	0x40005400
 8013840:	40021000 	.word	0x40021000
 8013844:	42020400 	.word	0x42020400

08013848 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8013848:	b580      	push	{r7, lr}
 801384a:	b0b2      	sub	sp, #200	; 0xc8
 801384c:	af00      	add	r7, sp, #0
 801384e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8013850:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8013854:	2200      	movs	r2, #0
 8013856:	601a      	str	r2, [r3, #0]
 8013858:	605a      	str	r2, [r3, #4]
 801385a:	609a      	str	r2, [r3, #8]
 801385c:	60da      	str	r2, [r3, #12]
 801385e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8013860:	f107 0320 	add.w	r3, r7, #32
 8013864:	2294      	movs	r2, #148	; 0x94
 8013866:	2100      	movs	r1, #0
 8013868:	4618      	mov	r0, r3
 801386a:	f010 ffa2 	bl	80247b2 <memset>
  if(huart->Instance==LPUART1)
 801386e:	687b      	ldr	r3, [r7, #4]
 8013870:	681b      	ldr	r3, [r3, #0]
 8013872:	4a67      	ldr	r2, [pc, #412]	; (8013a10 <HAL_UART_MspInit+0x1c8>)
 8013874:	4293      	cmp	r3, r2
 8013876:	d13e      	bne.n	80138f6 <HAL_UART_MspInit+0xae>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8013878:	2320      	movs	r3, #32
 801387a:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 801387c:	2300      	movs	r3, #0
 801387e:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8013880:	f107 0320 	add.w	r3, r7, #32
 8013884:	4618      	mov	r0, r3
 8013886:	f005 f863 	bl	8018950 <HAL_RCCEx_PeriphCLKConfig>
 801388a:	4603      	mov	r3, r0
 801388c:	2b00      	cmp	r3, #0
 801388e:	d001      	beq.n	8013894 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8013890:	f7ff fe9b 	bl	80135ca <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8013894:	4b5f      	ldr	r3, [pc, #380]	; (8013a14 <HAL_UART_MspInit+0x1cc>)
 8013896:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8013898:	4a5e      	ldr	r2, [pc, #376]	; (8013a14 <HAL_UART_MspInit+0x1cc>)
 801389a:	f043 0301 	orr.w	r3, r3, #1
 801389e:	65d3      	str	r3, [r2, #92]	; 0x5c
 80138a0:	4b5c      	ldr	r3, [pc, #368]	; (8013a14 <HAL_UART_MspInit+0x1cc>)
 80138a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80138a4:	f003 0301 	and.w	r3, r3, #1
 80138a8:	61fb      	str	r3, [r7, #28]
 80138aa:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 80138ac:	4b59      	ldr	r3, [pc, #356]	; (8013a14 <HAL_UART_MspInit+0x1cc>)
 80138ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80138b0:	4a58      	ldr	r2, [pc, #352]	; (8013a14 <HAL_UART_MspInit+0x1cc>)
 80138b2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80138b6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80138b8:	4b56      	ldr	r3, [pc, #344]	; (8013a14 <HAL_UART_MspInit+0x1cc>)
 80138ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80138bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80138c0:	61bb      	str	r3, [r7, #24]
 80138c2:	69bb      	ldr	r3, [r7, #24]
    HAL_PWREx_EnableVddIO2();
 80138c4:	f004 f824 	bl	8017910 <HAL_PWREx_EnableVddIO2>
    /**LPUART1 GPIO Configuration
    PG7     ------> LPUART1_TX
    PG8     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = ST_LINK_VCP_TX_Pin|ST_LINK_VCP_RX_Pin;
 80138c8:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80138cc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80138d0:	2302      	movs	r3, #2
 80138d2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80138d6:	2300      	movs	r3, #0
 80138d8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80138dc:	2300      	movs	r3, #0
 80138de:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 80138e2:	2308      	movs	r3, #8
 80138e4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80138e8:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80138ec:	4619      	mov	r1, r3
 80138ee:	484a      	ldr	r0, [pc, #296]	; (8013a18 <HAL_UART_MspInit+0x1d0>)
 80138f0:	f002 ff0a 	bl	8016708 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80138f4:	e088      	b.n	8013a08 <HAL_UART_MspInit+0x1c0>
  else if(huart->Instance==UART4)
 80138f6:	687b      	ldr	r3, [r7, #4]
 80138f8:	681b      	ldr	r3, [r3, #0]
 80138fa:	4a48      	ldr	r2, [pc, #288]	; (8013a1c <HAL_UART_MspInit+0x1d4>)
 80138fc:	4293      	cmp	r3, r2
 80138fe:	d143      	bne.n	8013988 <HAL_UART_MspInit+0x140>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8013900:	2308      	movs	r3, #8
 8013902:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8013904:	2300      	movs	r3, #0
 8013906:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8013908:	f107 0320 	add.w	r3, r7, #32
 801390c:	4618      	mov	r0, r3
 801390e:	f005 f81f 	bl	8018950 <HAL_RCCEx_PeriphCLKConfig>
 8013912:	4603      	mov	r3, r0
 8013914:	2b00      	cmp	r3, #0
 8013916:	d001      	beq.n	801391c <HAL_UART_MspInit+0xd4>
      Error_Handler();
 8013918:	f7ff fe57 	bl	80135ca <Error_Handler>
    __HAL_RCC_UART4_CLK_ENABLE();
 801391c:	4b3d      	ldr	r3, [pc, #244]	; (8013a14 <HAL_UART_MspInit+0x1cc>)
 801391e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8013920:	4a3c      	ldr	r2, [pc, #240]	; (8013a14 <HAL_UART_MspInit+0x1cc>)
 8013922:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8013926:	6593      	str	r3, [r2, #88]	; 0x58
 8013928:	4b3a      	ldr	r3, [pc, #232]	; (8013a14 <HAL_UART_MspInit+0x1cc>)
 801392a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801392c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8013930:	617b      	str	r3, [r7, #20]
 8013932:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8013934:	4b37      	ldr	r3, [pc, #220]	; (8013a14 <HAL_UART_MspInit+0x1cc>)
 8013936:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8013938:	4a36      	ldr	r2, [pc, #216]	; (8013a14 <HAL_UART_MspInit+0x1cc>)
 801393a:	f043 0301 	orr.w	r3, r3, #1
 801393e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8013940:	4b34      	ldr	r3, [pc, #208]	; (8013a14 <HAL_UART_MspInit+0x1cc>)
 8013942:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8013944:	f003 0301 	and.w	r3, r3, #1
 8013948:	613b      	str	r3, [r7, #16]
 801394a:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 801394c:	2303      	movs	r3, #3
 801394e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8013952:	2302      	movs	r3, #2
 8013954:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8013958:	2300      	movs	r3, #0
 801395a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801395e:	2300      	movs	r3, #0
 8013960:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8013964:	2308      	movs	r3, #8
 8013966:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801396a:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 801396e:	4619      	mov	r1, r3
 8013970:	482b      	ldr	r0, [pc, #172]	; (8013a20 <HAL_UART_MspInit+0x1d8>)
 8013972:	f002 fec9 	bl	8016708 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(UART4_IRQn, 5, 0);
 8013976:	2200      	movs	r2, #0
 8013978:	2105      	movs	r1, #5
 801397a:	2040      	movs	r0, #64	; 0x40
 801397c:	f002 faee 	bl	8015f5c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8013980:	2040      	movs	r0, #64	; 0x40
 8013982:	f002 fb05 	bl	8015f90 <HAL_NVIC_EnableIRQ>
}
 8013986:	e03f      	b.n	8013a08 <HAL_UART_MspInit+0x1c0>
  else if(huart->Instance==USART2)
 8013988:	687b      	ldr	r3, [r7, #4]
 801398a:	681b      	ldr	r3, [r3, #0]
 801398c:	4a25      	ldr	r2, [pc, #148]	; (8013a24 <HAL_UART_MspInit+0x1dc>)
 801398e:	4293      	cmp	r3, r2
 8013990:	d13a      	bne.n	8013a08 <HAL_UART_MspInit+0x1c0>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8013992:	2302      	movs	r3, #2
 8013994:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8013996:	2300      	movs	r3, #0
 8013998:	65bb      	str	r3, [r7, #88]	; 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 801399a:	f107 0320 	add.w	r3, r7, #32
 801399e:	4618      	mov	r0, r3
 80139a0:	f004 ffd6 	bl	8018950 <HAL_RCCEx_PeriphCLKConfig>
 80139a4:	4603      	mov	r3, r0
 80139a6:	2b00      	cmp	r3, #0
 80139a8:	d001      	beq.n	80139ae <HAL_UART_MspInit+0x166>
      Error_Handler();
 80139aa:	f7ff fe0e 	bl	80135ca <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 80139ae:	4b19      	ldr	r3, [pc, #100]	; (8013a14 <HAL_UART_MspInit+0x1cc>)
 80139b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80139b2:	4a18      	ldr	r2, [pc, #96]	; (8013a14 <HAL_UART_MspInit+0x1cc>)
 80139b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80139b8:	6593      	str	r3, [r2, #88]	; 0x58
 80139ba:	4b16      	ldr	r3, [pc, #88]	; (8013a14 <HAL_UART_MspInit+0x1cc>)
 80139bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80139be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80139c2:	60fb      	str	r3, [r7, #12]
 80139c4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80139c6:	4b13      	ldr	r3, [pc, #76]	; (8013a14 <HAL_UART_MspInit+0x1cc>)
 80139c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80139ca:	4a12      	ldr	r2, [pc, #72]	; (8013a14 <HAL_UART_MspInit+0x1cc>)
 80139cc:	f043 0308 	orr.w	r3, r3, #8
 80139d0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80139d2:	4b10      	ldr	r3, [pc, #64]	; (8013a14 <HAL_UART_MspInit+0x1cc>)
 80139d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80139d6:	f003 0308 	and.w	r3, r3, #8
 80139da:	60bb      	str	r3, [r7, #8]
 80139dc:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = XBEE_TX_Pin|XBEE_RX_Pin;
 80139de:	2360      	movs	r3, #96	; 0x60
 80139e0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80139e4:	2302      	movs	r3, #2
 80139e6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80139ea:	2300      	movs	r3, #0
 80139ec:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80139f0:	2300      	movs	r3, #0
 80139f2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80139f6:	2307      	movs	r3, #7
 80139f8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80139fc:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8013a00:	4619      	mov	r1, r3
 8013a02:	4809      	ldr	r0, [pc, #36]	; (8013a28 <HAL_UART_MspInit+0x1e0>)
 8013a04:	f002 fe80 	bl	8016708 <HAL_GPIO_Init>
}
 8013a08:	bf00      	nop
 8013a0a:	37c8      	adds	r7, #200	; 0xc8
 8013a0c:	46bd      	mov	sp, r7
 8013a0e:	bd80      	pop	{r7, pc}
 8013a10:	40008000 	.word	0x40008000
 8013a14:	40021000 	.word	0x40021000
 8013a18:	42021800 	.word	0x42021800
 8013a1c:	40004c00 	.word	0x40004c00
 8013a20:	42020000 	.word	0x42020000
 8013a24:	40004400 	.word	0x40004400
 8013a28:	42020c00 	.word	0x42020c00

08013a2c <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8013a2c:	b580      	push	{r7, lr}
 8013a2e:	b0a8      	sub	sp, #160	; 0xa0
 8013a30:	af00      	add	r7, sp, #0
 8013a32:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8013a34:	f107 030c 	add.w	r3, r7, #12
 8013a38:	2294      	movs	r2, #148	; 0x94
 8013a3a:	2100      	movs	r1, #0
 8013a3c:	4618      	mov	r0, r3
 8013a3e:	f010 feb8 	bl	80247b2 <memset>
  if(hrtc->Instance==RTC)
 8013a42:	687b      	ldr	r3, [r7, #4]
 8013a44:	681b      	ldr	r3, [r3, #0]
 8013a46:	4a16      	ldr	r2, [pc, #88]	; (8013aa0 <HAL_RTC_MspInit+0x74>)
 8013a48:	4293      	cmp	r3, r2
 8013a4a:	d124      	bne.n	8013a96 <HAL_RTC_MspInit+0x6a>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8013a4c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8013a50:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8013a52:	f44f 7380 	mov.w	r3, #256	; 0x100
 8013a56:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8013a5a:	f107 030c 	add.w	r3, r7, #12
 8013a5e:	4618      	mov	r0, r3
 8013a60:	f004 ff76 	bl	8018950 <HAL_RCCEx_PeriphCLKConfig>
 8013a64:	4603      	mov	r3, r0
 8013a66:	2b00      	cmp	r3, #0
 8013a68:	d001      	beq.n	8013a6e <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 8013a6a:	f7ff fdae 	bl	80135ca <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8013a6e:	4b0d      	ldr	r3, [pc, #52]	; (8013aa4 <HAL_RTC_MspInit+0x78>)
 8013a70:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8013a74:	4a0b      	ldr	r2, [pc, #44]	; (8013aa4 <HAL_RTC_MspInit+0x78>)
 8013a76:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8013a7a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8013a7e:	4b09      	ldr	r3, [pc, #36]	; (8013aa4 <HAL_RTC_MspInit+0x78>)
 8013a80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8013a82:	4a08      	ldr	r2, [pc, #32]	; (8013aa4 <HAL_RTC_MspInit+0x78>)
 8013a84:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8013a88:	6593      	str	r3, [r2, #88]	; 0x58
 8013a8a:	4b06      	ldr	r3, [pc, #24]	; (8013aa4 <HAL_RTC_MspInit+0x78>)
 8013a8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8013a8e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8013a92:	60bb      	str	r3, [r7, #8]
 8013a94:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8013a96:	bf00      	nop
 8013a98:	37a0      	adds	r7, #160	; 0xa0
 8013a9a:	46bd      	mov	sp, r7
 8013a9c:	bd80      	pop	{r7, pc}
 8013a9e:	bf00      	nop
 8013aa0:	40002800 	.word	0x40002800
 8013aa4:	40021000 	.word	0x40021000

08013aa8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8013aa8:	b580      	push	{r7, lr}
 8013aaa:	b090      	sub	sp, #64	; 0x40
 8013aac:	af00      	add	r7, sp, #0
 8013aae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8013ab0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8013ab4:	2200      	movs	r2, #0
 8013ab6:	601a      	str	r2, [r3, #0]
 8013ab8:	605a      	str	r2, [r3, #4]
 8013aba:	609a      	str	r2, [r3, #8]
 8013abc:	60da      	str	r2, [r3, #12]
 8013abe:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8013ac0:	687b      	ldr	r3, [r7, #4]
 8013ac2:	681b      	ldr	r3, [r3, #0]
 8013ac4:	4a62      	ldr	r2, [pc, #392]	; (8013c50 <HAL_SPI_MspInit+0x1a8>)
 8013ac6:	4293      	cmp	r3, r2
 8013ac8:	d145      	bne.n	8013b56 <HAL_SPI_MspInit+0xae>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8013aca:	4b62      	ldr	r3, [pc, #392]	; (8013c54 <HAL_SPI_MspInit+0x1ac>)
 8013acc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8013ace:	4a61      	ldr	r2, [pc, #388]	; (8013c54 <HAL_SPI_MspInit+0x1ac>)
 8013ad0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8013ad4:	6613      	str	r3, [r2, #96]	; 0x60
 8013ad6:	4b5f      	ldr	r3, [pc, #380]	; (8013c54 <HAL_SPI_MspInit+0x1ac>)
 8013ad8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8013ada:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8013ade:	62bb      	str	r3, [r7, #40]	; 0x28
 8013ae0:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8013ae2:	4b5c      	ldr	r3, [pc, #368]	; (8013c54 <HAL_SPI_MspInit+0x1ac>)
 8013ae4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8013ae6:	4a5b      	ldr	r2, [pc, #364]	; (8013c54 <HAL_SPI_MspInit+0x1ac>)
 8013ae8:	f043 0301 	orr.w	r3, r3, #1
 8013aec:	64d3      	str	r3, [r2, #76]	; 0x4c
 8013aee:	4b59      	ldr	r3, [pc, #356]	; (8013c54 <HAL_SPI_MspInit+0x1ac>)
 8013af0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8013af2:	f003 0301 	and.w	r3, r3, #1
 8013af6:	627b      	str	r3, [r7, #36]	; 0x24
 8013af8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8013afa:	4b56      	ldr	r3, [pc, #344]	; (8013c54 <HAL_SPI_MspInit+0x1ac>)
 8013afc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8013afe:	4a55      	ldr	r2, [pc, #340]	; (8013c54 <HAL_SPI_MspInit+0x1ac>)
 8013b00:	f043 0310 	orr.w	r3, r3, #16
 8013b04:	64d3      	str	r3, [r2, #76]	; 0x4c
 8013b06:	4b53      	ldr	r3, [pc, #332]	; (8013c54 <HAL_SPI_MspInit+0x1ac>)
 8013b08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8013b0a:	f003 0310 	and.w	r3, r3, #16
 8013b0e:	623b      	str	r3, [r7, #32]
 8013b10:	6a3b      	ldr	r3, [r7, #32]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PE15     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI_ADC_CLK_Pin|SPI_ADC_MISO_Pin;
 8013b12:	2360      	movs	r3, #96	; 0x60
 8013b14:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8013b16:	2302      	movs	r3, #2
 8013b18:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8013b1a:	2300      	movs	r3, #0
 8013b1c:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8013b1e:	2300      	movs	r3, #0
 8013b20:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8013b22:	2305      	movs	r3, #5
 8013b24:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8013b26:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8013b2a:	4619      	mov	r1, r3
 8013b2c:	484a      	ldr	r0, [pc, #296]	; (8013c58 <HAL_SPI_MspInit+0x1b0>)
 8013b2e:	f002 fdeb 	bl	8016708 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SPI_ADC_MOSI_Pin;
 8013b32:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8013b36:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8013b38:	2302      	movs	r3, #2
 8013b3a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8013b3c:	2300      	movs	r3, #0
 8013b3e:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8013b40:	2300      	movs	r3, #0
 8013b42:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8013b44:	2305      	movs	r3, #5
 8013b46:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(SPI_ADC_MOSI_GPIO_Port, &GPIO_InitStruct);
 8013b48:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8013b4c:	4619      	mov	r1, r3
 8013b4e:	4843      	ldr	r0, [pc, #268]	; (8013c5c <HAL_SPI_MspInit+0x1b4>)
 8013b50:	f002 fdda 	bl	8016708 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8013b54:	e078      	b.n	8013c48 <HAL_SPI_MspInit+0x1a0>
  else if(hspi->Instance==SPI2)
 8013b56:	687b      	ldr	r3, [r7, #4]
 8013b58:	681b      	ldr	r3, [r3, #0]
 8013b5a:	4a41      	ldr	r2, [pc, #260]	; (8013c60 <HAL_SPI_MspInit+0x1b8>)
 8013b5c:	4293      	cmp	r3, r2
 8013b5e:	d145      	bne.n	8013bec <HAL_SPI_MspInit+0x144>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8013b60:	4b3c      	ldr	r3, [pc, #240]	; (8013c54 <HAL_SPI_MspInit+0x1ac>)
 8013b62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8013b64:	4a3b      	ldr	r2, [pc, #236]	; (8013c54 <HAL_SPI_MspInit+0x1ac>)
 8013b66:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8013b6a:	6593      	str	r3, [r2, #88]	; 0x58
 8013b6c:	4b39      	ldr	r3, [pc, #228]	; (8013c54 <HAL_SPI_MspInit+0x1ac>)
 8013b6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8013b70:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8013b74:	61fb      	str	r3, [r7, #28]
 8013b76:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8013b78:	4b36      	ldr	r3, [pc, #216]	; (8013c54 <HAL_SPI_MspInit+0x1ac>)
 8013b7a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8013b7c:	4a35      	ldr	r2, [pc, #212]	; (8013c54 <HAL_SPI_MspInit+0x1ac>)
 8013b7e:	f043 0302 	orr.w	r3, r3, #2
 8013b82:	64d3      	str	r3, [r2, #76]	; 0x4c
 8013b84:	4b33      	ldr	r3, [pc, #204]	; (8013c54 <HAL_SPI_MspInit+0x1ac>)
 8013b86:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8013b88:	f003 0302 	and.w	r3, r3, #2
 8013b8c:	61bb      	str	r3, [r7, #24]
 8013b8e:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8013b90:	4b30      	ldr	r3, [pc, #192]	; (8013c54 <HAL_SPI_MspInit+0x1ac>)
 8013b92:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8013b94:	4a2f      	ldr	r2, [pc, #188]	; (8013c54 <HAL_SPI_MspInit+0x1ac>)
 8013b96:	f043 0308 	orr.w	r3, r3, #8
 8013b9a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8013b9c:	4b2d      	ldr	r3, [pc, #180]	; (8013c54 <HAL_SPI_MspInit+0x1ac>)
 8013b9e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8013ba0:	f003 0308 	and.w	r3, r3, #8
 8013ba4:	617b      	str	r3, [r7, #20]
 8013ba6:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8013ba8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8013bac:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8013bae:	2302      	movs	r3, #2
 8013bb0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8013bb2:	2300      	movs	r3, #0
 8013bb4:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8013bb6:	2300      	movs	r3, #0
 8013bb8:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8013bba:	2305      	movs	r3, #5
 8013bbc:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8013bbe:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8013bc2:	4619      	mov	r1, r3
 8013bc4:	4827      	ldr	r0, [pc, #156]	; (8013c64 <HAL_SPI_MspInit+0x1bc>)
 8013bc6:	f002 fd9f 	bl	8016708 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 8013bca:	2318      	movs	r3, #24
 8013bcc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8013bce:	2302      	movs	r3, #2
 8013bd0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8013bd2:	2300      	movs	r3, #0
 8013bd4:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8013bd6:	2300      	movs	r3, #0
 8013bd8:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8013bda:	2305      	movs	r3, #5
 8013bdc:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8013bde:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8013be2:	4619      	mov	r1, r3
 8013be4:	4820      	ldr	r0, [pc, #128]	; (8013c68 <HAL_SPI_MspInit+0x1c0>)
 8013be6:	f002 fd8f 	bl	8016708 <HAL_GPIO_Init>
}
 8013bea:	e02d      	b.n	8013c48 <HAL_SPI_MspInit+0x1a0>
  else if(hspi->Instance==SPI3)
 8013bec:	687b      	ldr	r3, [r7, #4]
 8013bee:	681b      	ldr	r3, [r3, #0]
 8013bf0:	4a1e      	ldr	r2, [pc, #120]	; (8013c6c <HAL_SPI_MspInit+0x1c4>)
 8013bf2:	4293      	cmp	r3, r2
 8013bf4:	d128      	bne.n	8013c48 <HAL_SPI_MspInit+0x1a0>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8013bf6:	4b17      	ldr	r3, [pc, #92]	; (8013c54 <HAL_SPI_MspInit+0x1ac>)
 8013bf8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8013bfa:	4a16      	ldr	r2, [pc, #88]	; (8013c54 <HAL_SPI_MspInit+0x1ac>)
 8013bfc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8013c00:	6593      	str	r3, [r2, #88]	; 0x58
 8013c02:	4b14      	ldr	r3, [pc, #80]	; (8013c54 <HAL_SPI_MspInit+0x1ac>)
 8013c04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8013c06:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8013c0a:	613b      	str	r3, [r7, #16]
 8013c0c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8013c0e:	4b11      	ldr	r3, [pc, #68]	; (8013c54 <HAL_SPI_MspInit+0x1ac>)
 8013c10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8013c12:	4a10      	ldr	r2, [pc, #64]	; (8013c54 <HAL_SPI_MspInit+0x1ac>)
 8013c14:	f043 0304 	orr.w	r3, r3, #4
 8013c18:	64d3      	str	r3, [r2, #76]	; 0x4c
 8013c1a:	4b0e      	ldr	r3, [pc, #56]	; (8013c54 <HAL_SPI_MspInit+0x1ac>)
 8013c1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8013c1e:	f003 0304 	and.w	r3, r3, #4
 8013c22:	60fb      	str	r3, [r7, #12]
 8013c24:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8013c26:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8013c2a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8013c2c:	2302      	movs	r3, #2
 8013c2e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8013c30:	2300      	movs	r3, #0
 8013c32:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8013c34:	2300      	movs	r3, #0
 8013c36:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8013c38:	2306      	movs	r3, #6
 8013c3a:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8013c3c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8013c40:	4619      	mov	r1, r3
 8013c42:	480b      	ldr	r0, [pc, #44]	; (8013c70 <HAL_SPI_MspInit+0x1c8>)
 8013c44:	f002 fd60 	bl	8016708 <HAL_GPIO_Init>
}
 8013c48:	bf00      	nop
 8013c4a:	3740      	adds	r7, #64	; 0x40
 8013c4c:	46bd      	mov	sp, r7
 8013c4e:	bd80      	pop	{r7, pc}
 8013c50:	40013000 	.word	0x40013000
 8013c54:	40021000 	.word	0x40021000
 8013c58:	42020000 	.word	0x42020000
 8013c5c:	42021000 	.word	0x42021000
 8013c60:	40003800 	.word	0x40003800
 8013c64:	42020400 	.word	0x42020400
 8013c68:	42020c00 	.word	0x42020c00
 8013c6c:	40003c00 	.word	0x40003c00
 8013c70:	42020800 	.word	0x42020800

08013c74 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8013c74:	b580      	push	{r7, lr}
 8013c76:	b08c      	sub	sp, #48	; 0x30
 8013c78:	af00      	add	r7, sp, #0
 8013c7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8013c7c:	f107 031c 	add.w	r3, r7, #28
 8013c80:	2200      	movs	r2, #0
 8013c82:	601a      	str	r2, [r3, #0]
 8013c84:	605a      	str	r2, [r3, #4]
 8013c86:	609a      	str	r2, [r3, #8]
 8013c88:	60da      	str	r2, [r3, #12]
 8013c8a:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 8013c8c:	687b      	ldr	r3, [r7, #4]
 8013c8e:	681b      	ldr	r3, [r3, #0]
 8013c90:	4a40      	ldr	r2, [pc, #256]	; (8013d94 <HAL_TIM_Base_MspInit+0x120>)
 8013c92:	4293      	cmp	r3, r2
 8013c94:	d14e      	bne.n	8013d34 <HAL_TIM_Base_MspInit+0xc0>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8013c96:	4b40      	ldr	r3, [pc, #256]	; (8013d98 <HAL_TIM_Base_MspInit+0x124>)
 8013c98:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8013c9a:	4a3f      	ldr	r2, [pc, #252]	; (8013d98 <HAL_TIM_Base_MspInit+0x124>)
 8013c9c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8013ca0:	6613      	str	r3, [r2, #96]	; 0x60
 8013ca2:	4b3d      	ldr	r3, [pc, #244]	; (8013d98 <HAL_TIM_Base_MspInit+0x124>)
 8013ca4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8013ca6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8013caa:	61bb      	str	r3, [r7, #24]
 8013cac:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8013cae:	4b3a      	ldr	r3, [pc, #232]	; (8013d98 <HAL_TIM_Base_MspInit+0x124>)
 8013cb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8013cb2:	4a39      	ldr	r2, [pc, #228]	; (8013d98 <HAL_TIM_Base_MspInit+0x124>)
 8013cb4:	f043 0310 	orr.w	r3, r3, #16
 8013cb8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8013cba:	4b37      	ldr	r3, [pc, #220]	; (8013d98 <HAL_TIM_Base_MspInit+0x124>)
 8013cbc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8013cbe:	f003 0310 	and.w	r3, r3, #16
 8013cc2:	617b      	str	r3, [r7, #20]
 8013cc4:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8013cc6:	4b34      	ldr	r3, [pc, #208]	; (8013d98 <HAL_TIM_Base_MspInit+0x124>)
 8013cc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8013cca:	4a33      	ldr	r2, [pc, #204]	; (8013d98 <HAL_TIM_Base_MspInit+0x124>)
 8013ccc:	f043 0301 	orr.w	r3, r3, #1
 8013cd0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8013cd2:	4b31      	ldr	r3, [pc, #196]	; (8013d98 <HAL_TIM_Base_MspInit+0x124>)
 8013cd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8013cd6:	f003 0301 	and.w	r3, r3, #1
 8013cda:	613b      	str	r3, [r7, #16]
 8013cdc:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PE14     ------> TIM1_CH4
    PA8     ------> TIM1_CH1
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = RC_PWM_STEERING_IN_Pin;
 8013cde:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8013ce2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8013ce4:	2302      	movs	r3, #2
 8013ce6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8013ce8:	2300      	movs	r3, #0
 8013cea:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8013cec:	2300      	movs	r3, #0
 8013cee:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8013cf0:	2301      	movs	r3, #1
 8013cf2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(RC_PWM_STEERING_IN_GPIO_Port, &GPIO_InitStruct);
 8013cf4:	f107 031c 	add.w	r3, r7, #28
 8013cf8:	4619      	mov	r1, r3
 8013cfa:	4828      	ldr	r0, [pc, #160]	; (8013d9c <HAL_TIM_Base_MspInit+0x128>)
 8013cfc:	f002 fd04 	bl	8016708 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RC_PWM_STEERING_Pin|RC_PWM_THROTTLE_IN_Pin;
 8013d00:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 8013d04:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8013d06:	2302      	movs	r3, #2
 8013d08:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8013d0a:	2300      	movs	r3, #0
 8013d0c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8013d0e:	2300      	movs	r3, #0
 8013d10:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8013d12:	2301      	movs	r3, #1
 8013d14:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8013d16:	f107 031c 	add.w	r3, r7, #28
 8013d1a:	4619      	mov	r1, r3
 8013d1c:	4820      	ldr	r0, [pc, #128]	; (8013da0 <HAL_TIM_Base_MspInit+0x12c>)
 8013d1e:	f002 fcf3 	bl	8016708 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 5, 0);
 8013d22:	2200      	movs	r2, #0
 8013d24:	2105      	movs	r1, #5
 8013d26:	202c      	movs	r0, #44	; 0x2c
 8013d28:	f002 f918 	bl	8015f5c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8013d2c:	202c      	movs	r0, #44	; 0x2c
 8013d2e:	f002 f92f 	bl	8015f90 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8013d32:	e02a      	b.n	8013d8a <HAL_TIM_Base_MspInit+0x116>
  else if(htim_base->Instance==TIM5)
 8013d34:	687b      	ldr	r3, [r7, #4]
 8013d36:	681b      	ldr	r3, [r3, #0]
 8013d38:	4a1a      	ldr	r2, [pc, #104]	; (8013da4 <HAL_TIM_Base_MspInit+0x130>)
 8013d3a:	4293      	cmp	r3, r2
 8013d3c:	d10c      	bne.n	8013d58 <HAL_TIM_Base_MspInit+0xe4>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8013d3e:	4b16      	ldr	r3, [pc, #88]	; (8013d98 <HAL_TIM_Base_MspInit+0x124>)
 8013d40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8013d42:	4a15      	ldr	r2, [pc, #84]	; (8013d98 <HAL_TIM_Base_MspInit+0x124>)
 8013d44:	f043 0308 	orr.w	r3, r3, #8
 8013d48:	6593      	str	r3, [r2, #88]	; 0x58
 8013d4a:	4b13      	ldr	r3, [pc, #76]	; (8013d98 <HAL_TIM_Base_MspInit+0x124>)
 8013d4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8013d4e:	f003 0308 	and.w	r3, r3, #8
 8013d52:	60fb      	str	r3, [r7, #12]
 8013d54:	68fb      	ldr	r3, [r7, #12]
}
 8013d56:	e018      	b.n	8013d8a <HAL_TIM_Base_MspInit+0x116>
  else if(htim_base->Instance==TIM6)
 8013d58:	687b      	ldr	r3, [r7, #4]
 8013d5a:	681b      	ldr	r3, [r3, #0]
 8013d5c:	4a12      	ldr	r2, [pc, #72]	; (8013da8 <HAL_TIM_Base_MspInit+0x134>)
 8013d5e:	4293      	cmp	r3, r2
 8013d60:	d113      	bne.n	8013d8a <HAL_TIM_Base_MspInit+0x116>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8013d62:	4b0d      	ldr	r3, [pc, #52]	; (8013d98 <HAL_TIM_Base_MspInit+0x124>)
 8013d64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8013d66:	4a0c      	ldr	r2, [pc, #48]	; (8013d98 <HAL_TIM_Base_MspInit+0x124>)
 8013d68:	f043 0310 	orr.w	r3, r3, #16
 8013d6c:	6593      	str	r3, [r2, #88]	; 0x58
 8013d6e:	4b0a      	ldr	r3, [pc, #40]	; (8013d98 <HAL_TIM_Base_MspInit+0x124>)
 8013d70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8013d72:	f003 0310 	and.w	r3, r3, #16
 8013d76:	60bb      	str	r3, [r7, #8]
 8013d78:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM6_IRQn, 5, 0);
 8013d7a:	2200      	movs	r2, #0
 8013d7c:	2105      	movs	r1, #5
 8013d7e:	2031      	movs	r0, #49	; 0x31
 8013d80:	f002 f8ec 	bl	8015f5c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_IRQn);
 8013d84:	2031      	movs	r0, #49	; 0x31
 8013d86:	f002 f903 	bl	8015f90 <HAL_NVIC_EnableIRQ>
}
 8013d8a:	bf00      	nop
 8013d8c:	3730      	adds	r7, #48	; 0x30
 8013d8e:	46bd      	mov	sp, r7
 8013d90:	bd80      	pop	{r7, pc}
 8013d92:	bf00      	nop
 8013d94:	40012c00 	.word	0x40012c00
 8013d98:	40021000 	.word	0x40021000
 8013d9c:	42021000 	.word	0x42021000
 8013da0:	42020000 	.word	0x42020000
 8013da4:	40000c00 	.word	0x40000c00
 8013da8:	40001000 	.word	0x40001000

08013dac <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8013dac:	b580      	push	{r7, lr}
 8013dae:	b08a      	sub	sp, #40	; 0x28
 8013db0:	af00      	add	r7, sp, #0
 8013db2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8013db4:	f107 0314 	add.w	r3, r7, #20
 8013db8:	2200      	movs	r2, #0
 8013dba:	601a      	str	r2, [r3, #0]
 8013dbc:	605a      	str	r2, [r3, #4]
 8013dbe:	609a      	str	r2, [r3, #8]
 8013dc0:	60da      	str	r2, [r3, #12]
 8013dc2:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 8013dc4:	687b      	ldr	r3, [r7, #4]
 8013dc6:	681b      	ldr	r3, [r3, #0]
 8013dc8:	4a1b      	ldr	r2, [pc, #108]	; (8013e38 <HAL_TIM_Encoder_MspInit+0x8c>)
 8013dca:	4293      	cmp	r3, r2
 8013dcc:	d12f      	bne.n	8013e2e <HAL_TIM_Encoder_MspInit+0x82>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8013dce:	4b1b      	ldr	r3, [pc, #108]	; (8013e3c <HAL_TIM_Encoder_MspInit+0x90>)
 8013dd0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8013dd2:	4a1a      	ldr	r2, [pc, #104]	; (8013e3c <HAL_TIM_Encoder_MspInit+0x90>)
 8013dd4:	f043 0302 	orr.w	r3, r3, #2
 8013dd8:	6593      	str	r3, [r2, #88]	; 0x58
 8013dda:	4b18      	ldr	r3, [pc, #96]	; (8013e3c <HAL_TIM_Encoder_MspInit+0x90>)
 8013ddc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8013dde:	f003 0302 	and.w	r3, r3, #2
 8013de2:	613b      	str	r3, [r7, #16]
 8013de4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8013de6:	4b15      	ldr	r3, [pc, #84]	; (8013e3c <HAL_TIM_Encoder_MspInit+0x90>)
 8013de8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8013dea:	4a14      	ldr	r2, [pc, #80]	; (8013e3c <HAL_TIM_Encoder_MspInit+0x90>)
 8013dec:	f043 0310 	orr.w	r3, r3, #16
 8013df0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8013df2:	4b12      	ldr	r3, [pc, #72]	; (8013e3c <HAL_TIM_Encoder_MspInit+0x90>)
 8013df4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8013df6:	f003 0310 	and.w	r3, r3, #16
 8013dfa:	60fb      	str	r3, [r7, #12]
 8013dfc:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PE3     ------> TIM3_CH1
    PE4     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = ENC_CH_A_Pin|ENC_CHB_Pin;
 8013dfe:	2318      	movs	r3, #24
 8013e00:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8013e02:	2302      	movs	r3, #2
 8013e04:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8013e06:	2300      	movs	r3, #0
 8013e08:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8013e0a:	2300      	movs	r3, #0
 8013e0c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8013e0e:	2302      	movs	r3, #2
 8013e10:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8013e12:	f107 0314 	add.w	r3, r7, #20
 8013e16:	4619      	mov	r1, r3
 8013e18:	4809      	ldr	r0, [pc, #36]	; (8013e40 <HAL_TIM_Encoder_MspInit+0x94>)
 8013e1a:	f002 fc75 	bl	8016708 <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 8013e1e:	2200      	movs	r2, #0
 8013e20:	2105      	movs	r1, #5
 8013e22:	202e      	movs	r0, #46	; 0x2e
 8013e24:	f002 f89a 	bl	8015f5c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8013e28:	202e      	movs	r0, #46	; 0x2e
 8013e2a:	f002 f8b1 	bl	8015f90 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8013e2e:	bf00      	nop
 8013e30:	3728      	adds	r7, #40	; 0x28
 8013e32:	46bd      	mov	sp, r7
 8013e34:	bd80      	pop	{r7, pc}
 8013e36:	bf00      	nop
 8013e38:	40000400 	.word	0x40000400
 8013e3c:	40021000 	.word	0x40021000
 8013e40:	42021000 	.word	0x42021000

08013e44 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8013e44:	b480      	push	{r7}
 8013e46:	b085      	sub	sp, #20
 8013e48:	af00      	add	r7, sp, #0
 8013e4a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM8)
 8013e4c:	687b      	ldr	r3, [r7, #4]
 8013e4e:	681b      	ldr	r3, [r3, #0]
 8013e50:	4a0a      	ldr	r2, [pc, #40]	; (8013e7c <HAL_TIM_PWM_MspInit+0x38>)
 8013e52:	4293      	cmp	r3, r2
 8013e54:	d10b      	bne.n	8013e6e <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 8013e56:	4b0a      	ldr	r3, [pc, #40]	; (8013e80 <HAL_TIM_PWM_MspInit+0x3c>)
 8013e58:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8013e5a:	4a09      	ldr	r2, [pc, #36]	; (8013e80 <HAL_TIM_PWM_MspInit+0x3c>)
 8013e5c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8013e60:	6613      	str	r3, [r2, #96]	; 0x60
 8013e62:	4b07      	ldr	r3, [pc, #28]	; (8013e80 <HAL_TIM_PWM_MspInit+0x3c>)
 8013e64:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8013e66:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8013e6a:	60fb      	str	r3, [r7, #12]
 8013e6c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8013e6e:	bf00      	nop
 8013e70:	3714      	adds	r7, #20
 8013e72:	46bd      	mov	sp, r7
 8013e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e78:	4770      	bx	lr
 8013e7a:	bf00      	nop
 8013e7c:	40013400 	.word	0x40013400
 8013e80:	40021000 	.word	0x40021000

08013e84 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8013e84:	b580      	push	{r7, lr}
 8013e86:	b08a      	sub	sp, #40	; 0x28
 8013e88:	af00      	add	r7, sp, #0
 8013e8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8013e8c:	f107 0314 	add.w	r3, r7, #20
 8013e90:	2200      	movs	r2, #0
 8013e92:	601a      	str	r2, [r3, #0]
 8013e94:	605a      	str	r2, [r3, #4]
 8013e96:	609a      	str	r2, [r3, #8]
 8013e98:	60da      	str	r2, [r3, #12]
 8013e9a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM5)
 8013e9c:	687b      	ldr	r3, [r7, #4]
 8013e9e:	681b      	ldr	r3, [r3, #0]
 8013ea0:	4a22      	ldr	r2, [pc, #136]	; (8013f2c <HAL_TIM_MspPostInit+0xa8>)
 8013ea2:	4293      	cmp	r3, r2
 8013ea4:	d11d      	bne.n	8013ee2 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM5_MspPostInit 0 */

  /* USER CODE END TIM5_MspPostInit 0 */
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8013ea6:	4b22      	ldr	r3, [pc, #136]	; (8013f30 <HAL_TIM_MspPostInit+0xac>)
 8013ea8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8013eaa:	4a21      	ldr	r2, [pc, #132]	; (8013f30 <HAL_TIM_MspPostInit+0xac>)
 8013eac:	f043 0320 	orr.w	r3, r3, #32
 8013eb0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8013eb2:	4b1f      	ldr	r3, [pc, #124]	; (8013f30 <HAL_TIM_MspPostInit+0xac>)
 8013eb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8013eb6:	f003 0320 	and.w	r3, r3, #32
 8013eba:	613b      	str	r3, [r7, #16]
 8013ebc:	693b      	ldr	r3, [r7, #16]
    /**TIM5 GPIO Configuration
    PF6     ------> TIM5_CH1
    PF9     ------> TIM5_CH4
    */
    GPIO_InitStruct.Pin = MOTOR_PWM1_Pin|MOTOR_PWM2_Pin;
 8013ebe:	f44f 7310 	mov.w	r3, #576	; 0x240
 8013ec2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8013ec4:	2302      	movs	r3, #2
 8013ec6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8013ec8:	2300      	movs	r3, #0
 8013eca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8013ecc:	2300      	movs	r3, #0
 8013ece:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8013ed0:	2302      	movs	r3, #2
 8013ed2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8013ed4:	f107 0314 	add.w	r3, r7, #20
 8013ed8:	4619      	mov	r1, r3
 8013eda:	4816      	ldr	r0, [pc, #88]	; (8013f34 <HAL_TIM_MspPostInit+0xb0>)
 8013edc:	f002 fc14 	bl	8016708 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8013ee0:	e020      	b.n	8013f24 <HAL_TIM_MspPostInit+0xa0>
  else if(htim->Instance==TIM8)
 8013ee2:	687b      	ldr	r3, [r7, #4]
 8013ee4:	681b      	ldr	r3, [r3, #0]
 8013ee6:	4a14      	ldr	r2, [pc, #80]	; (8013f38 <HAL_TIM_MspPostInit+0xb4>)
 8013ee8:	4293      	cmp	r3, r2
 8013eea:	d11b      	bne.n	8013f24 <HAL_TIM_MspPostInit+0xa0>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8013eec:	4b10      	ldr	r3, [pc, #64]	; (8013f30 <HAL_TIM_MspPostInit+0xac>)
 8013eee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8013ef0:	4a0f      	ldr	r2, [pc, #60]	; (8013f30 <HAL_TIM_MspPostInit+0xac>)
 8013ef2:	f043 0304 	orr.w	r3, r3, #4
 8013ef6:	64d3      	str	r3, [r2, #76]	; 0x4c
 8013ef8:	4b0d      	ldr	r3, [pc, #52]	; (8013f30 <HAL_TIM_MspPostInit+0xac>)
 8013efa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8013efc:	f003 0304 	and.w	r3, r3, #4
 8013f00:	60fb      	str	r3, [r7, #12]
 8013f02:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8013f04:	2340      	movs	r3, #64	; 0x40
 8013f06:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8013f08:	2302      	movs	r3, #2
 8013f0a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8013f0c:	2300      	movs	r3, #0
 8013f0e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8013f10:	2300      	movs	r3, #0
 8013f12:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8013f14:	2303      	movs	r3, #3
 8013f16:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8013f18:	f107 0314 	add.w	r3, r7, #20
 8013f1c:	4619      	mov	r1, r3
 8013f1e:	4807      	ldr	r0, [pc, #28]	; (8013f3c <HAL_TIM_MspPostInit+0xb8>)
 8013f20:	f002 fbf2 	bl	8016708 <HAL_GPIO_Init>
}
 8013f24:	bf00      	nop
 8013f26:	3728      	adds	r7, #40	; 0x28
 8013f28:	46bd      	mov	sp, r7
 8013f2a:	bd80      	pop	{r7, pc}
 8013f2c:	40000c00 	.word	0x40000c00
 8013f30:	40021000 	.word	0x40021000
 8013f34:	42021400 	.word	0x42021400
 8013f38:	40013400 	.word	0x40013400
 8013f3c:	42020800 	.word	0x42020800

08013f40 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8013f40:	b580      	push	{r7, lr}
 8013f42:	b0ae      	sub	sp, #184	; 0xb8
 8013f44:	af00      	add	r7, sp, #0
 8013f46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8013f48:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8013f4c:	2200      	movs	r2, #0
 8013f4e:	601a      	str	r2, [r3, #0]
 8013f50:	605a      	str	r2, [r3, #4]
 8013f52:	609a      	str	r2, [r3, #8]
 8013f54:	60da      	str	r2, [r3, #12]
 8013f56:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8013f58:	f107 0310 	add.w	r3, r7, #16
 8013f5c:	2294      	movs	r2, #148	; 0x94
 8013f5e:	2100      	movs	r1, #0
 8013f60:	4618      	mov	r0, r3
 8013f62:	f010 fc26 	bl	80247b2 <memset>
  if(hpcd->Instance==USB)
 8013f66:	687b      	ldr	r3, [r7, #4]
 8013f68:	681b      	ldr	r3, [r3, #0]
 8013f6a:	4a22      	ldr	r2, [pc, #136]	; (8013ff4 <HAL_PCD_MspInit+0xb4>)
 8013f6c:	4293      	cmp	r3, r2
 8013f6e:	d13d      	bne.n	8013fec <HAL_PCD_MspInit+0xac>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8013f70:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8013f74:	613b      	str	r3, [r7, #16]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8013f76:	2300      	movs	r3, #0
 8013f78:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8013f7c:	f107 0310 	add.w	r3, r7, #16
 8013f80:	4618      	mov	r0, r3
 8013f82:	f004 fce5 	bl	8018950 <HAL_RCCEx_PeriphCLKConfig>
 8013f86:	4603      	mov	r3, r0
 8013f88:	2b00      	cmp	r3, #0
 8013f8a:	d001      	beq.n	8013f90 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8013f8c:	f7ff fb1d 	bl	80135ca <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8013f90:	4b19      	ldr	r3, [pc, #100]	; (8013ff8 <HAL_PCD_MspInit+0xb8>)
 8013f92:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8013f94:	4a18      	ldr	r2, [pc, #96]	; (8013ff8 <HAL_PCD_MspInit+0xb8>)
 8013f96:	f043 0301 	orr.w	r3, r3, #1
 8013f9a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8013f9c:	4b16      	ldr	r3, [pc, #88]	; (8013ff8 <HAL_PCD_MspInit+0xb8>)
 8013f9e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8013fa0:	f003 0301 	and.w	r3, r3, #1
 8013fa4:	60fb      	str	r3, [r7, #12]
 8013fa6:	68fb      	ldr	r3, [r7, #12]
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8013fa8:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8013fac:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8013fb0:	2302      	movs	r3, #2
 8013fb2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8013fb6:	2300      	movs	r3, #0
 8013fb8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8013fbc:	2300      	movs	r3, #0
 8013fbe:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 8013fc2:	230a      	movs	r3, #10
 8013fc4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8013fc8:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8013fcc:	4619      	mov	r1, r3
 8013fce:	480b      	ldr	r0, [pc, #44]	; (8013ffc <HAL_PCD_MspInit+0xbc>)
 8013fd0:	f002 fb9a 	bl	8016708 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8013fd4:	4b08      	ldr	r3, [pc, #32]	; (8013ff8 <HAL_PCD_MspInit+0xb8>)
 8013fd6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8013fd8:	4a07      	ldr	r2, [pc, #28]	; (8013ff8 <HAL_PCD_MspInit+0xb8>)
 8013fda:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8013fde:	65d3      	str	r3, [r2, #92]	; 0x5c
 8013fe0:	4b05      	ldr	r3, [pc, #20]	; (8013ff8 <HAL_PCD_MspInit+0xb8>)
 8013fe2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8013fe4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8013fe8:	60bb      	str	r3, [r7, #8]
 8013fea:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 8013fec:	bf00      	nop
 8013fee:	37b8      	adds	r7, #184	; 0xb8
 8013ff0:	46bd      	mov	sp, r7
 8013ff2:	bd80      	pop	{r7, pc}
 8013ff4:	4000d400 	.word	0x4000d400
 8013ff8:	40021000 	.word	0x40021000
 8013ffc:	42020000 	.word	0x42020000

08014000 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8014000:	b580      	push	{r7, lr}
 8014002:	b08c      	sub	sp, #48	; 0x30
 8014004:	af00      	add	r7, sp, #0
 8014006:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8014008:	2300      	movs	r3, #0
 801400a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 801400c:	2300      	movs	r3, #0
 801400e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM2 IRQ priority */
  HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority ,0);
 8014010:	2200      	movs	r2, #0
 8014012:	6879      	ldr	r1, [r7, #4]
 8014014:	202d      	movs	r0, #45	; 0x2d
 8014016:	f001 ffa1 	bl	8015f5c <HAL_NVIC_SetPriority>

  /* Enable the TIM2 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM2_IRQn);
 801401a:	202d      	movs	r0, #45	; 0x2d
 801401c:	f001 ffb8 	bl	8015f90 <HAL_NVIC_EnableIRQ>

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 8014020:	4b1f      	ldr	r3, [pc, #124]	; (80140a0 <HAL_InitTick+0xa0>)
 8014022:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8014024:	4a1e      	ldr	r2, [pc, #120]	; (80140a0 <HAL_InitTick+0xa0>)
 8014026:	f043 0301 	orr.w	r3, r3, #1
 801402a:	6593      	str	r3, [r2, #88]	; 0x58
 801402c:	4b1c      	ldr	r3, [pc, #112]	; (80140a0 <HAL_InitTick+0xa0>)
 801402e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8014030:	f003 0301 	and.w	r3, r3, #1
 8014034:	60fb      	str	r3, [r7, #12]
 8014036:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8014038:	f107 0210 	add.w	r2, r7, #16
 801403c:	f107 0314 	add.w	r3, r7, #20
 8014040:	4611      	mov	r1, r2
 8014042:	4618      	mov	r0, r3
 8014044:	f004 fb80 	bl	8018748 <HAL_RCC_GetClockConfig>

  /* Compute TIM2 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8014048:	f004 fb56 	bl	80186f8 <HAL_RCC_GetPCLK1Freq>
 801404c:	62f8      	str	r0, [r7, #44]	; 0x2c

  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 801404e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014050:	4a14      	ldr	r2, [pc, #80]	; (80140a4 <HAL_InitTick+0xa4>)
 8014052:	fba2 2303 	umull	r2, r3, r2, r3
 8014056:	0c9b      	lsrs	r3, r3, #18
 8014058:	3b01      	subs	r3, #1
 801405a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 801405c:	4b12      	ldr	r3, [pc, #72]	; (80140a8 <HAL_InitTick+0xa8>)
 801405e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8014062:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 8014064:	4b10      	ldr	r3, [pc, #64]	; (80140a8 <HAL_InitTick+0xa8>)
 8014066:	f240 32e7 	movw	r2, #999	; 0x3e7
 801406a:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 801406c:	4a0e      	ldr	r2, [pc, #56]	; (80140a8 <HAL_InitTick+0xa8>)
 801406e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014070:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 8014072:	4b0d      	ldr	r3, [pc, #52]	; (80140a8 <HAL_InitTick+0xa8>)
 8014074:	2200      	movs	r2, #0
 8014076:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8014078:	4b0b      	ldr	r3, [pc, #44]	; (80140a8 <HAL_InitTick+0xa8>)
 801407a:	2200      	movs	r2, #0
 801407c:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim2) == HAL_OK)
 801407e:	480a      	ldr	r0, [pc, #40]	; (80140a8 <HAL_InitTick+0xa8>)
 8014080:	f006 f9c6 	bl	801a410 <HAL_TIM_Base_Init>
 8014084:	4603      	mov	r3, r0
 8014086:	2b00      	cmp	r3, #0
 8014088:	d104      	bne.n	8014094 <HAL_InitTick+0x94>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim2);
 801408a:	4807      	ldr	r0, [pc, #28]	; (80140a8 <HAL_InitTick+0xa8>)
 801408c:	f006 fa80 	bl	801a590 <HAL_TIM_Base_Start_IT>
 8014090:	4603      	mov	r3, r0
 8014092:	e000      	b.n	8014096 <HAL_InitTick+0x96>
  }

  /* Return function status */
  return HAL_ERROR;
 8014094:	2301      	movs	r3, #1
}
 8014096:	4618      	mov	r0, r3
 8014098:	3730      	adds	r7, #48	; 0x30
 801409a:	46bd      	mov	sp, r7
 801409c:	bd80      	pop	{r7, pc}
 801409e:	bf00      	nop
 80140a0:	40021000 	.word	0x40021000
 80140a4:	431bde83 	.word	0x431bde83
 80140a8:	20000f9c 	.word	0x20000f9c

080140ac <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 80140ac:	b480      	push	{r7}
 80140ae:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80140b0:	f3bf 8f4f 	dsb	sy
}
 80140b4:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80140b6:	4b06      	ldr	r3, [pc, #24]	; (80140d0 <__NVIC_SystemReset+0x24>)
 80140b8:	68db      	ldr	r3, [r3, #12]
 80140ba:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80140be:	4904      	ldr	r1, [pc, #16]	; (80140d0 <__NVIC_SystemReset+0x24>)
 80140c0:	4b04      	ldr	r3, [pc, #16]	; (80140d4 <__NVIC_SystemReset+0x28>)
 80140c2:	4313      	orrs	r3, r2
 80140c4:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80140c6:	f3bf 8f4f 	dsb	sy
}
 80140ca:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80140cc:	bf00      	nop
 80140ce:	e7fd      	b.n	80140cc <__NVIC_SystemReset+0x20>
 80140d0:	e000ed00 	.word	0xe000ed00
 80140d4:	05fa0004 	.word	0x05fa0004

080140d8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80140d8:	b480      	push	{r7}
 80140da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80140dc:	e7fe      	b.n	80140dc <NMI_Handler+0x4>

080140de <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80140de:	b580      	push	{r7, lr}
 80140e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
	NVIC_SystemReset();
 80140e2:	f7ff ffe3 	bl	80140ac <__NVIC_SystemReset>

080140e6 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80140e6:	b480      	push	{r7}
 80140e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80140ea:	e7fe      	b.n	80140ea <MemManage_Handler+0x4>

080140ec <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80140ec:	b480      	push	{r7}
 80140ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80140f0:	e7fe      	b.n	80140f0 <BusFault_Handler+0x4>

080140f2 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80140f2:	b480      	push	{r7}
 80140f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80140f6:	e7fe      	b.n	80140f6 <UsageFault_Handler+0x4>

080140f8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80140f8:	b480      	push	{r7}
 80140fa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80140fc:	bf00      	nop
 80140fe:	46bd      	mov	sp, r7
 8014100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014104:	4770      	bx	lr
	...

08014108 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8014108:	b580      	push	{r7, lr}
 801410a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 801410c:	4802      	ldr	r0, [pc, #8]	; (8014118 <DMA1_Channel1_IRQHandler+0x10>)
 801410e:	f002 f92b 	bl	8016368 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8014112:	bf00      	nop
 8014114:	bd80      	pop	{r7, pc}
 8014116:	bf00      	nop
 8014118:	2000075c 	.word	0x2000075c

0801411c <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 801411c:	b580      	push	{r7, lr}
 801411e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8014120:	4802      	ldr	r0, [pc, #8]	; (801412c <ADC1_2_IRQHandler+0x10>)
 8014122:	f000 fe2b 	bl	8014d7c <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8014126:	bf00      	nop
 8014128:	bd80      	pop	{r7, pc}
 801412a:	bf00      	nop
 801412c:	200006f4 	.word	0x200006f4

08014130 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8014130:	b580      	push	{r7, lr}
 8014132:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8014134:	4802      	ldr	r0, [pc, #8]	; (8014140 <TIM1_CC_IRQHandler+0x10>)
 8014136:	f006 fed9 	bl	801aeec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 801413a:	bf00      	nop
 801413c:	bd80      	pop	{r7, pc}
 801413e:	bf00      	nop
 8014140:	20000b28 	.word	0x20000b28

08014144 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8014144:	b580      	push	{r7, lr}
 8014146:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8014148:	4802      	ldr	r0, [pc, #8]	; (8014154 <TIM2_IRQHandler+0x10>)
 801414a:	f006 fecf 	bl	801aeec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 801414e:	bf00      	nop
 8014150:	bd80      	pop	{r7, pc}
 8014152:	bf00      	nop
 8014154:	20000f9c 	.word	0x20000f9c

08014158 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8014158:	b580      	push	{r7, lr}
 801415a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 801415c:	4802      	ldr	r0, [pc, #8]	; (8014168 <TIM3_IRQHandler+0x10>)
 801415e:	f006 fec5 	bl	801aeec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8014162:	bf00      	nop
 8014164:	bd80      	pop	{r7, pc}
 8014166:	bf00      	nop
 8014168:	20000b74 	.word	0x20000b74

0801416c <TIM6_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt.
  */
void TIM6_IRQHandler(void)
{
 801416c:	b580      	push	{r7, lr}
 801416e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_IRQn 0 */

  /* USER CODE END TIM6_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8014170:	4802      	ldr	r0, [pc, #8]	; (801417c <TIM6_IRQHandler+0x10>)
 8014172:	f006 febb 	bl	801aeec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_IRQn 1 */

  /* USER CODE END TIM6_IRQn 1 */
}
 8014176:	bf00      	nop
 8014178:	bd80      	pop	{r7, pc}
 801417a:	bf00      	nop
 801417c:	20000c0c 	.word	0x20000c0c

08014180 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt / UART4 wake-up interrupt through EXTI line 29.
  */
void UART4_IRQHandler(void)
{
 8014180:	b580      	push	{r7, lr}
 8014182:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8014184:	4802      	ldr	r0, [pc, #8]	; (8014190 <UART4_IRQHandler+0x10>)
 8014186:	f008 fa73 	bl	801c670 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 801418a:	bf00      	nop
 801418c:	bd80      	pop	{r7, pc}
 801418e:	bf00      	nop
 8014190:	200008ac 	.word	0x200008ac

08014194 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8014194:	b480      	push	{r7}
 8014196:	af00      	add	r7, sp, #0
  return 1;
 8014198:	2301      	movs	r3, #1
}
 801419a:	4618      	mov	r0, r3
 801419c:	46bd      	mov	sp, r7
 801419e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80141a2:	4770      	bx	lr

080141a4 <_kill>:

int _kill(int pid, int sig)
{
 80141a4:	b580      	push	{r7, lr}
 80141a6:	b082      	sub	sp, #8
 80141a8:	af00      	add	r7, sp, #0
 80141aa:	6078      	str	r0, [r7, #4]
 80141ac:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80141ae:	f010 fba3 	bl	80248f8 <__errno>
 80141b2:	4603      	mov	r3, r0
 80141b4:	2216      	movs	r2, #22
 80141b6:	601a      	str	r2, [r3, #0]
  return -1;
 80141b8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80141bc:	4618      	mov	r0, r3
 80141be:	3708      	adds	r7, #8
 80141c0:	46bd      	mov	sp, r7
 80141c2:	bd80      	pop	{r7, pc}

080141c4 <_exit>:

void _exit (int status)
{
 80141c4:	b580      	push	{r7, lr}
 80141c6:	b082      	sub	sp, #8
 80141c8:	af00      	add	r7, sp, #0
 80141ca:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80141cc:	f04f 31ff 	mov.w	r1, #4294967295
 80141d0:	6878      	ldr	r0, [r7, #4]
 80141d2:	f7ff ffe7 	bl	80141a4 <_kill>
  while (1) {}    /* Make sure we hang here */
 80141d6:	e7fe      	b.n	80141d6 <_exit+0x12>

080141d8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80141d8:	b580      	push	{r7, lr}
 80141da:	b086      	sub	sp, #24
 80141dc:	af00      	add	r7, sp, #0
 80141de:	60f8      	str	r0, [r7, #12]
 80141e0:	60b9      	str	r1, [r7, #8]
 80141e2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80141e4:	2300      	movs	r3, #0
 80141e6:	617b      	str	r3, [r7, #20]
 80141e8:	e00a      	b.n	8014200 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80141ea:	f3af 8000 	nop.w
 80141ee:	4601      	mov	r1, r0
 80141f0:	68bb      	ldr	r3, [r7, #8]
 80141f2:	1c5a      	adds	r2, r3, #1
 80141f4:	60ba      	str	r2, [r7, #8]
 80141f6:	b2ca      	uxtb	r2, r1
 80141f8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80141fa:	697b      	ldr	r3, [r7, #20]
 80141fc:	3301      	adds	r3, #1
 80141fe:	617b      	str	r3, [r7, #20]
 8014200:	697a      	ldr	r2, [r7, #20]
 8014202:	687b      	ldr	r3, [r7, #4]
 8014204:	429a      	cmp	r2, r3
 8014206:	dbf0      	blt.n	80141ea <_read+0x12>
  }

  return len;
 8014208:	687b      	ldr	r3, [r7, #4]
}
 801420a:	4618      	mov	r0, r3
 801420c:	3718      	adds	r7, #24
 801420e:	46bd      	mov	sp, r7
 8014210:	bd80      	pop	{r7, pc}

08014212 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8014212:	b580      	push	{r7, lr}
 8014214:	b086      	sub	sp, #24
 8014216:	af00      	add	r7, sp, #0
 8014218:	60f8      	str	r0, [r7, #12]
 801421a:	60b9      	str	r1, [r7, #8]
 801421c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 801421e:	2300      	movs	r3, #0
 8014220:	617b      	str	r3, [r7, #20]
 8014222:	e009      	b.n	8014238 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8014224:	68bb      	ldr	r3, [r7, #8]
 8014226:	1c5a      	adds	r2, r3, #1
 8014228:	60ba      	str	r2, [r7, #8]
 801422a:	781b      	ldrb	r3, [r3, #0]
 801422c:	4618      	mov	r0, r3
 801422e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8014232:	697b      	ldr	r3, [r7, #20]
 8014234:	3301      	adds	r3, #1
 8014236:	617b      	str	r3, [r7, #20]
 8014238:	697a      	ldr	r2, [r7, #20]
 801423a:	687b      	ldr	r3, [r7, #4]
 801423c:	429a      	cmp	r2, r3
 801423e:	dbf1      	blt.n	8014224 <_write+0x12>
  }
  return len;
 8014240:	687b      	ldr	r3, [r7, #4]
}
 8014242:	4618      	mov	r0, r3
 8014244:	3718      	adds	r7, #24
 8014246:	46bd      	mov	sp, r7
 8014248:	bd80      	pop	{r7, pc}

0801424a <_close>:

int _close(int file)
{
 801424a:	b480      	push	{r7}
 801424c:	b083      	sub	sp, #12
 801424e:	af00      	add	r7, sp, #0
 8014250:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8014252:	f04f 33ff 	mov.w	r3, #4294967295
}
 8014256:	4618      	mov	r0, r3
 8014258:	370c      	adds	r7, #12
 801425a:	46bd      	mov	sp, r7
 801425c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014260:	4770      	bx	lr

08014262 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8014262:	b480      	push	{r7}
 8014264:	b083      	sub	sp, #12
 8014266:	af00      	add	r7, sp, #0
 8014268:	6078      	str	r0, [r7, #4]
 801426a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 801426c:	683b      	ldr	r3, [r7, #0]
 801426e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8014272:	605a      	str	r2, [r3, #4]
  return 0;
 8014274:	2300      	movs	r3, #0
}
 8014276:	4618      	mov	r0, r3
 8014278:	370c      	adds	r7, #12
 801427a:	46bd      	mov	sp, r7
 801427c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014280:	4770      	bx	lr

08014282 <_isatty>:

int _isatty(int file)
{
 8014282:	b480      	push	{r7}
 8014284:	b083      	sub	sp, #12
 8014286:	af00      	add	r7, sp, #0
 8014288:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 801428a:	2301      	movs	r3, #1
}
 801428c:	4618      	mov	r0, r3
 801428e:	370c      	adds	r7, #12
 8014290:	46bd      	mov	sp, r7
 8014292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014296:	4770      	bx	lr

08014298 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8014298:	b480      	push	{r7}
 801429a:	b085      	sub	sp, #20
 801429c:	af00      	add	r7, sp, #0
 801429e:	60f8      	str	r0, [r7, #12]
 80142a0:	60b9      	str	r1, [r7, #8]
 80142a2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80142a4:	2300      	movs	r3, #0
}
 80142a6:	4618      	mov	r0, r3
 80142a8:	3714      	adds	r7, #20
 80142aa:	46bd      	mov	sp, r7
 80142ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80142b0:	4770      	bx	lr
	...

080142b4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80142b4:	b580      	push	{r7, lr}
 80142b6:	b086      	sub	sp, #24
 80142b8:	af00      	add	r7, sp, #0
 80142ba:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80142bc:	4a14      	ldr	r2, [pc, #80]	; (8014310 <_sbrk+0x5c>)
 80142be:	4b15      	ldr	r3, [pc, #84]	; (8014314 <_sbrk+0x60>)
 80142c0:	1ad3      	subs	r3, r2, r3
 80142c2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80142c4:	697b      	ldr	r3, [r7, #20]
 80142c6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80142c8:	4b13      	ldr	r3, [pc, #76]	; (8014318 <_sbrk+0x64>)
 80142ca:	681b      	ldr	r3, [r3, #0]
 80142cc:	2b00      	cmp	r3, #0
 80142ce:	d102      	bne.n	80142d6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80142d0:	4b11      	ldr	r3, [pc, #68]	; (8014318 <_sbrk+0x64>)
 80142d2:	4a12      	ldr	r2, [pc, #72]	; (801431c <_sbrk+0x68>)
 80142d4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80142d6:	4b10      	ldr	r3, [pc, #64]	; (8014318 <_sbrk+0x64>)
 80142d8:	681a      	ldr	r2, [r3, #0]
 80142da:	687b      	ldr	r3, [r7, #4]
 80142dc:	4413      	add	r3, r2
 80142de:	693a      	ldr	r2, [r7, #16]
 80142e0:	429a      	cmp	r2, r3
 80142e2:	d207      	bcs.n	80142f4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80142e4:	f010 fb08 	bl	80248f8 <__errno>
 80142e8:	4603      	mov	r3, r0
 80142ea:	220c      	movs	r2, #12
 80142ec:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80142ee:	f04f 33ff 	mov.w	r3, #4294967295
 80142f2:	e009      	b.n	8014308 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80142f4:	4b08      	ldr	r3, [pc, #32]	; (8014318 <_sbrk+0x64>)
 80142f6:	681b      	ldr	r3, [r3, #0]
 80142f8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80142fa:	4b07      	ldr	r3, [pc, #28]	; (8014318 <_sbrk+0x64>)
 80142fc:	681a      	ldr	r2, [r3, #0]
 80142fe:	687b      	ldr	r3, [r7, #4]
 8014300:	4413      	add	r3, r2
 8014302:	4a05      	ldr	r2, [pc, #20]	; (8014318 <_sbrk+0x64>)
 8014304:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8014306:	68fb      	ldr	r3, [r7, #12]
}
 8014308:	4618      	mov	r0, r3
 801430a:	3718      	adds	r7, #24
 801430c:	46bd      	mov	sp, r7
 801430e:	bd80      	pop	{r7, pc}
 8014310:	20030000 	.word	0x20030000
 8014314:	00000400 	.word	0x00000400
 8014318:	20000fe8 	.word	0x20000fe8
 801431c:	20005e88 	.word	0x20005e88

08014320 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8014320:	b480      	push	{r7}
 8014322:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8014324:	4b06      	ldr	r3, [pc, #24]	; (8014340 <SystemInit+0x20>)
 8014326:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801432a:	4a05      	ldr	r2, [pc, #20]	; (8014340 <SystemInit+0x20>)
 801432c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8014330:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8014334:	bf00      	nop
 8014336:	46bd      	mov	sp, r7
 8014338:	f85d 7b04 	ldr.w	r7, [sp], #4
 801433c:	4770      	bx	lr
 801433e:	bf00      	nop
 8014340:	e000ed00 	.word	0xe000ed00

08014344 <SystemCoreClockUpdate>:
  *           value for HSE crystal.
  *
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 8014344:	b480      	push	{r7}
 8014346:	b087      	sub	sp, #28
 8014348:	af00      	add	r7, sp, #0
  uint32_t tmp, msirange, pllvco, pllsource, pllm, pllr;

  /* Get MSI Range frequency--------------------------------------------------*/
  if((RCC->CR & RCC_CR_MSIRGSEL) == 0U)
 801434a:	4b4f      	ldr	r3, [pc, #316]	; (8014488 <SystemCoreClockUpdate+0x144>)
 801434c:	681b      	ldr	r3, [r3, #0]
 801434e:	f003 0308 	and.w	r3, r3, #8
 8014352:	2b00      	cmp	r3, #0
 8014354:	d107      	bne.n	8014366 <SystemCoreClockUpdate+0x22>
  { /* MSISRANGE from RCC_CSR applies */
    msirange = (RCC->CSR & RCC_CSR_MSISRANGE) >> 8U;
 8014356:	4b4c      	ldr	r3, [pc, #304]	; (8014488 <SystemCoreClockUpdate+0x144>)
 8014358:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 801435c:	0a1b      	lsrs	r3, r3, #8
 801435e:	f003 030f 	and.w	r3, r3, #15
 8014362:	617b      	str	r3, [r7, #20]
 8014364:	e005      	b.n	8014372 <SystemCoreClockUpdate+0x2e>
  }
  else
  { /* MSIRANGE from RCC_CR applies */
    msirange = (RCC->CR & RCC_CR_MSIRANGE) >> 4U;
 8014366:	4b48      	ldr	r3, [pc, #288]	; (8014488 <SystemCoreClockUpdate+0x144>)
 8014368:	681b      	ldr	r3, [r3, #0]
 801436a:	091b      	lsrs	r3, r3, #4
 801436c:	f003 030f 	and.w	r3, r3, #15
 8014370:	617b      	str	r3, [r7, #20]
  }
  /*MSI frequency range in HZ*/
  msirange = MSIRangeTable[msirange];
 8014372:	4a46      	ldr	r2, [pc, #280]	; (801448c <SystemCoreClockUpdate+0x148>)
 8014374:	697b      	ldr	r3, [r7, #20]
 8014376:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801437a:	617b      	str	r3, [r7, #20]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 801437c:	4b42      	ldr	r3, [pc, #264]	; (8014488 <SystemCoreClockUpdate+0x144>)
 801437e:	689b      	ldr	r3, [r3, #8]
 8014380:	f003 030c 	and.w	r3, r3, #12
 8014384:	2b0c      	cmp	r3, #12
 8014386:	d866      	bhi.n	8014456 <SystemCoreClockUpdate+0x112>
 8014388:	a201      	add	r2, pc, #4	; (adr r2, 8014390 <SystemCoreClockUpdate+0x4c>)
 801438a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801438e:	bf00      	nop
 8014390:	080143c5 	.word	0x080143c5
 8014394:	08014457 	.word	0x08014457
 8014398:	08014457 	.word	0x08014457
 801439c:	08014457 	.word	0x08014457
 80143a0:	080143cd 	.word	0x080143cd
 80143a4:	08014457 	.word	0x08014457
 80143a8:	08014457 	.word	0x08014457
 80143ac:	08014457 	.word	0x08014457
 80143b0:	080143d5 	.word	0x080143d5
 80143b4:	08014457 	.word	0x08014457
 80143b8:	08014457 	.word	0x08014457
 80143bc:	08014457 	.word	0x08014457
 80143c0:	080143dd 	.word	0x080143dd
  {
    case 0x00:  /* MSI used as system clock source */
      SystemCoreClock = msirange;
 80143c4:	4a32      	ldr	r2, [pc, #200]	; (8014490 <SystemCoreClockUpdate+0x14c>)
 80143c6:	697b      	ldr	r3, [r7, #20]
 80143c8:	6013      	str	r3, [r2, #0]
      break;
 80143ca:	e048      	b.n	801445e <SystemCoreClockUpdate+0x11a>

    case 0x04:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 80143cc:	4b30      	ldr	r3, [pc, #192]	; (8014490 <SystemCoreClockUpdate+0x14c>)
 80143ce:	4a31      	ldr	r2, [pc, #196]	; (8014494 <SystemCoreClockUpdate+0x150>)
 80143d0:	601a      	str	r2, [r3, #0]
      break;
 80143d2:	e044      	b.n	801445e <SystemCoreClockUpdate+0x11a>

    case 0x08:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 80143d4:	4b2e      	ldr	r3, [pc, #184]	; (8014490 <SystemCoreClockUpdate+0x14c>)
 80143d6:	4a30      	ldr	r2, [pc, #192]	; (8014498 <SystemCoreClockUpdate+0x154>)
 80143d8:	601a      	str	r2, [r3, #0]
      break;
 80143da:	e040      	b.n	801445e <SystemCoreClockUpdate+0x11a>

    case 0x0C:  /* PLL used as system clock  source */
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLR
         */
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80143dc:	4b2a      	ldr	r3, [pc, #168]	; (8014488 <SystemCoreClockUpdate+0x144>)
 80143de:	68db      	ldr	r3, [r3, #12]
 80143e0:	f003 0303 	and.w	r3, r3, #3
 80143e4:	60fb      	str	r3, [r7, #12]
      pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> 4U) + 1U ;
 80143e6:	4b28      	ldr	r3, [pc, #160]	; (8014488 <SystemCoreClockUpdate+0x144>)
 80143e8:	68db      	ldr	r3, [r3, #12]
 80143ea:	091b      	lsrs	r3, r3, #4
 80143ec:	f003 030f 	and.w	r3, r3, #15
 80143f0:	3301      	adds	r3, #1
 80143f2:	60bb      	str	r3, [r7, #8]
 80143f4:	68fb      	ldr	r3, [r7, #12]
 80143f6:	2b02      	cmp	r3, #2
 80143f8:	d003      	beq.n	8014402 <SystemCoreClockUpdate+0xbe>
 80143fa:	68fb      	ldr	r3, [r7, #12]
 80143fc:	2b03      	cmp	r3, #3
 80143fe:	d006      	beq.n	801440e <SystemCoreClockUpdate+0xca>
 8014400:	e00b      	b.n	801441a <SystemCoreClockUpdate+0xd6>

      switch (pllsource)
      {
        case 0x02:  /* HSI used as PLL clock source */
          pllvco = (HSI_VALUE / pllm);
 8014402:	4a24      	ldr	r2, [pc, #144]	; (8014494 <SystemCoreClockUpdate+0x150>)
 8014404:	68bb      	ldr	r3, [r7, #8]
 8014406:	fbb2 f3f3 	udiv	r3, r2, r3
 801440a:	613b      	str	r3, [r7, #16]
          break;
 801440c:	e00b      	b.n	8014426 <SystemCoreClockUpdate+0xe2>

        case 0x03:  /* HSE used as PLL clock source */
          pllvco = (HSE_VALUE / pllm);
 801440e:	4a22      	ldr	r2, [pc, #136]	; (8014498 <SystemCoreClockUpdate+0x154>)
 8014410:	68bb      	ldr	r3, [r7, #8]
 8014412:	fbb2 f3f3 	udiv	r3, r2, r3
 8014416:	613b      	str	r3, [r7, #16]
          break;
 8014418:	e005      	b.n	8014426 <SystemCoreClockUpdate+0xe2>

        default:    /* MSI used as PLL clock source */
          pllvco = (msirange / pllm);
 801441a:	697a      	ldr	r2, [r7, #20]
 801441c:	68bb      	ldr	r3, [r7, #8]
 801441e:	fbb2 f3f3 	udiv	r3, r2, r3
 8014422:	613b      	str	r3, [r7, #16]
          break;
 8014424:	bf00      	nop
      }
      pllvco = pllvco * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 8U);
 8014426:	4b18      	ldr	r3, [pc, #96]	; (8014488 <SystemCoreClockUpdate+0x144>)
 8014428:	68db      	ldr	r3, [r3, #12]
 801442a:	0a1b      	lsrs	r3, r3, #8
 801442c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8014430:	693b      	ldr	r3, [r7, #16]
 8014432:	fb02 f303 	mul.w	r3, r2, r3
 8014436:	613b      	str	r3, [r7, #16]
      pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 25U) + 1U) * 2U;
 8014438:	4b13      	ldr	r3, [pc, #76]	; (8014488 <SystemCoreClockUpdate+0x144>)
 801443a:	68db      	ldr	r3, [r3, #12]
 801443c:	0e5b      	lsrs	r3, r3, #25
 801443e:	f003 0303 	and.w	r3, r3, #3
 8014442:	3301      	adds	r3, #1
 8014444:	005b      	lsls	r3, r3, #1
 8014446:	607b      	str	r3, [r7, #4]
      SystemCoreClock = pllvco/pllr;
 8014448:	693a      	ldr	r2, [r7, #16]
 801444a:	687b      	ldr	r3, [r7, #4]
 801444c:	fbb2 f3f3 	udiv	r3, r2, r3
 8014450:	4a0f      	ldr	r2, [pc, #60]	; (8014490 <SystemCoreClockUpdate+0x14c>)
 8014452:	6013      	str	r3, [r2, #0]
      break;
 8014454:	e003      	b.n	801445e <SystemCoreClockUpdate+0x11a>

    default:
      SystemCoreClock = msirange;
 8014456:	4a0e      	ldr	r2, [pc, #56]	; (8014490 <SystemCoreClockUpdate+0x14c>)
 8014458:	697b      	ldr	r3, [r7, #20]
 801445a:	6013      	str	r3, [r2, #0]
      break;
 801445c:	bf00      	nop
  }
  /* Compute HCLK clock frequency --------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4U)];
 801445e:	4b0a      	ldr	r3, [pc, #40]	; (8014488 <SystemCoreClockUpdate+0x144>)
 8014460:	689b      	ldr	r3, [r3, #8]
 8014462:	091b      	lsrs	r3, r3, #4
 8014464:	f003 030f 	and.w	r3, r3, #15
 8014468:	4a0c      	ldr	r2, [pc, #48]	; (801449c <SystemCoreClockUpdate+0x158>)
 801446a:	5cd3      	ldrb	r3, [r2, r3]
 801446c:	603b      	str	r3, [r7, #0]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;
 801446e:	4b08      	ldr	r3, [pc, #32]	; (8014490 <SystemCoreClockUpdate+0x14c>)
 8014470:	681a      	ldr	r2, [r3, #0]
 8014472:	683b      	ldr	r3, [r7, #0]
 8014474:	fa22 f303 	lsr.w	r3, r2, r3
 8014478:	4a05      	ldr	r2, [pc, #20]	; (8014490 <SystemCoreClockUpdate+0x14c>)
 801447a:	6013      	str	r3, [r2, #0]
}
 801447c:	bf00      	nop
 801447e:	371c      	adds	r7, #28
 8014480:	46bd      	mov	sp, r7
 8014482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014486:	4770      	bx	lr
 8014488:	40021000 	.word	0x40021000
 801448c:	08025fa4 	.word	0x08025fa4
 8014490:	20000090 	.word	0x20000090
 8014494:	00f42400 	.word	0x00f42400
 8014498:	007a1200 	.word	0x007a1200
 801449c:	08025f8c 	.word	0x08025f8c

080144a0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 80144a0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80144d8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80144a4:	f7ff ff3c 	bl	8014320 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80144a8:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80144aa:	e003      	b.n	80144b4 <LoopCopyDataInit>

080144ac <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80144ac:	4b0b      	ldr	r3, [pc, #44]	; (80144dc <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80144ae:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80144b0:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80144b2:	3104      	adds	r1, #4

080144b4 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80144b4:	480a      	ldr	r0, [pc, #40]	; (80144e0 <LoopForever+0xa>)
	ldr	r3, =_edata
 80144b6:	4b0b      	ldr	r3, [pc, #44]	; (80144e4 <LoopForever+0xe>)
	adds	r2, r0, r1
 80144b8:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80144ba:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80144bc:	d3f6      	bcc.n	80144ac <CopyDataInit>
	ldr	r2, =_sbss
 80144be:	4a0a      	ldr	r2, [pc, #40]	; (80144e8 <LoopForever+0x12>)
	b	LoopFillZerobss
 80144c0:	e002      	b.n	80144c8 <LoopFillZerobss>

080144c2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80144c2:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80144c4:	f842 3b04 	str.w	r3, [r2], #4

080144c8 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80144c8:	4b08      	ldr	r3, [pc, #32]	; (80144ec <LoopForever+0x16>)
	cmp	r2, r3
 80144ca:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80144cc:	d3f9      	bcc.n	80144c2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80144ce:	f010 fa19 	bl	8024904 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80144d2:	f7fd ff67 	bl	80123a4 <main>

080144d6 <LoopForever>:

LoopForever:
    b LoopForever
 80144d6:	e7fe      	b.n	80144d6 <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 80144d8:	20030000 	.word	0x20030000
	ldr	r3, =_sidata
 80144dc:	08026854 	.word	0x08026854
	ldr	r0, =_sdata
 80144e0:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80144e4:	2000010c 	.word	0x2000010c
	ldr	r2, =_sbss
 80144e8:	20000110 	.word	0x20000110
	ldr	r3, = _ebss
 80144ec:	20005e88 	.word	0x20005e88

080144f0 <COMP_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80144f0:	e7fe      	b.n	80144f0 <COMP_IRQHandler>

080144f2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80144f2:	b580      	push	{r7, lr}
 80144f4:	b082      	sub	sp, #8
 80144f6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80144f8:	2300      	movs	r3, #0
 80144fa:	71fb      	strb	r3, [r7, #7]

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 80144fc:	2004      	movs	r0, #4
 80144fe:	f001 fd22 	bl	8015f46 <HAL_NVIC_SetPriorityGrouping>

  /* Insure time base clock coherency */
  SystemCoreClockUpdate();
 8014502:	f7ff ff1f 	bl	8014344 <SystemCoreClockUpdate>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8014506:	2007      	movs	r0, #7
 8014508:	f7ff fd7a 	bl	8014000 <HAL_InitTick>
 801450c:	4603      	mov	r3, r0
 801450e:	2b00      	cmp	r3, #0
 8014510:	d002      	beq.n	8014518 <HAL_Init+0x26>
  {
    status = HAL_ERROR;
 8014512:	2301      	movs	r3, #1
 8014514:	71fb      	strb	r3, [r7, #7]
 8014516:	e001      	b.n	801451c <HAL_Init+0x2a>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8014518:	f7ff f85c 	bl	80135d4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 801451c:	79fb      	ldrb	r3, [r7, #7]
}
 801451e:	4618      	mov	r0, r3
 8014520:	3708      	adds	r7, #8
 8014522:	46bd      	mov	sp, r7
 8014524:	bd80      	pop	{r7, pc}
	...

08014528 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8014528:	b480      	push	{r7}
 801452a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 801452c:	4b06      	ldr	r3, [pc, #24]	; (8014548 <HAL_IncTick+0x20>)
 801452e:	781b      	ldrb	r3, [r3, #0]
 8014530:	461a      	mov	r2, r3
 8014532:	4b06      	ldr	r3, [pc, #24]	; (801454c <HAL_IncTick+0x24>)
 8014534:	681b      	ldr	r3, [r3, #0]
 8014536:	4413      	add	r3, r2
 8014538:	4a04      	ldr	r2, [pc, #16]	; (801454c <HAL_IncTick+0x24>)
 801453a:	6013      	str	r3, [r2, #0]
}
 801453c:	bf00      	nop
 801453e:	46bd      	mov	sp, r7
 8014540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014544:	4770      	bx	lr
 8014546:	bf00      	nop
 8014548:	20000098 	.word	0x20000098
 801454c:	20000fec 	.word	0x20000fec

08014550 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8014550:	b480      	push	{r7}
 8014552:	af00      	add	r7, sp, #0
  return uwTick;
 8014554:	4b03      	ldr	r3, [pc, #12]	; (8014564 <HAL_GetTick+0x14>)
 8014556:	681b      	ldr	r3, [r3, #0]
}
 8014558:	4618      	mov	r0, r3
 801455a:	46bd      	mov	sp, r7
 801455c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014560:	4770      	bx	lr
 8014562:	bf00      	nop
 8014564:	20000fec 	.word	0x20000fec

08014568 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8014568:	b480      	push	{r7}
 801456a:	b083      	sub	sp, #12
 801456c:	af00      	add	r7, sp, #0
 801456e:	6078      	str	r0, [r7, #4]
 8014570:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8014572:	687b      	ldr	r3, [r7, #4]
 8014574:	689b      	ldr	r3, [r3, #8]
 8014576:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 801457a:	683b      	ldr	r3, [r7, #0]
 801457c:	431a      	orrs	r2, r3
 801457e:	687b      	ldr	r3, [r7, #4]
 8014580:	609a      	str	r2, [r3, #8]
}
 8014582:	bf00      	nop
 8014584:	370c      	adds	r7, #12
 8014586:	46bd      	mov	sp, r7
 8014588:	f85d 7b04 	ldr.w	r7, [sp], #4
 801458c:	4770      	bx	lr

0801458e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 801458e:	b480      	push	{r7}
 8014590:	b083      	sub	sp, #12
 8014592:	af00      	add	r7, sp, #0
 8014594:	6078      	str	r0, [r7, #4]
 8014596:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8014598:	687b      	ldr	r3, [r7, #4]
 801459a:	689b      	ldr	r3, [r3, #8]
 801459c:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80145a0:	683b      	ldr	r3, [r7, #0]
 80145a2:	431a      	orrs	r2, r3
 80145a4:	687b      	ldr	r3, [r7, #4]
 80145a6:	609a      	str	r2, [r3, #8]
}
 80145a8:	bf00      	nop
 80145aa:	370c      	adds	r7, #12
 80145ac:	46bd      	mov	sp, r7
 80145ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80145b2:	4770      	bx	lr

080145b4 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80145b4:	b480      	push	{r7}
 80145b6:	b083      	sub	sp, #12
 80145b8:	af00      	add	r7, sp, #0
 80145ba:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80145bc:	687b      	ldr	r3, [r7, #4]
 80145be:	689b      	ldr	r3, [r3, #8]
 80145c0:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80145c4:	4618      	mov	r0, r3
 80145c6:	370c      	adds	r7, #12
 80145c8:	46bd      	mov	sp, r7
 80145ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80145ce:	4770      	bx	lr

080145d0 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80145d0:	b480      	push	{r7}
 80145d2:	b087      	sub	sp, #28
 80145d4:	af00      	add	r7, sp, #0
 80145d6:	60f8      	str	r0, [r7, #12]
 80145d8:	60b9      	str	r1, [r7, #8]
 80145da:	607a      	str	r2, [r7, #4]
 80145dc:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80145de:	68fb      	ldr	r3, [r7, #12]
 80145e0:	3360      	adds	r3, #96	; 0x60
 80145e2:	461a      	mov	r2, r3
 80145e4:	68bb      	ldr	r3, [r7, #8]
 80145e6:	009b      	lsls	r3, r3, #2
 80145e8:	4413      	add	r3, r2
 80145ea:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80145ec:	697b      	ldr	r3, [r7, #20]
 80145ee:	681a      	ldr	r2, [r3, #0]
 80145f0:	4b08      	ldr	r3, [pc, #32]	; (8014614 <LL_ADC_SetOffset+0x44>)
 80145f2:	4013      	ands	r3, r2
 80145f4:	687a      	ldr	r2, [r7, #4]
 80145f6:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 80145fa:	683a      	ldr	r2, [r7, #0]
 80145fc:	430a      	orrs	r2, r1
 80145fe:	4313      	orrs	r3, r2
 8014600:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8014604:	697b      	ldr	r3, [r7, #20]
 8014606:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8014608:	bf00      	nop
 801460a:	371c      	adds	r7, #28
 801460c:	46bd      	mov	sp, r7
 801460e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014612:	4770      	bx	lr
 8014614:	03fff000 	.word	0x03fff000

08014618 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8014618:	b480      	push	{r7}
 801461a:	b085      	sub	sp, #20
 801461c:	af00      	add	r7, sp, #0
 801461e:	6078      	str	r0, [r7, #4]
 8014620:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8014622:	687b      	ldr	r3, [r7, #4]
 8014624:	3360      	adds	r3, #96	; 0x60
 8014626:	461a      	mov	r2, r3
 8014628:	683b      	ldr	r3, [r7, #0]
 801462a:	009b      	lsls	r3, r3, #2
 801462c:	4413      	add	r3, r2
 801462e:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8014630:	68fb      	ldr	r3, [r7, #12]
 8014632:	681b      	ldr	r3, [r3, #0]
 8014634:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8014638:	4618      	mov	r0, r3
 801463a:	3714      	adds	r7, #20
 801463c:	46bd      	mov	sp, r7
 801463e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014642:	4770      	bx	lr

08014644 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8014644:	b480      	push	{r7}
 8014646:	b087      	sub	sp, #28
 8014648:	af00      	add	r7, sp, #0
 801464a:	60f8      	str	r0, [r7, #12]
 801464c:	60b9      	str	r1, [r7, #8]
 801464e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8014650:	68fb      	ldr	r3, [r7, #12]
 8014652:	3360      	adds	r3, #96	; 0x60
 8014654:	461a      	mov	r2, r3
 8014656:	68bb      	ldr	r3, [r7, #8]
 8014658:	009b      	lsls	r3, r3, #2
 801465a:	4413      	add	r3, r2
 801465c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 801465e:	697b      	ldr	r3, [r7, #20]
 8014660:	681b      	ldr	r3, [r3, #0]
 8014662:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8014666:	687b      	ldr	r3, [r7, #4]
 8014668:	431a      	orrs	r2, r3
 801466a:	697b      	ldr	r3, [r7, #20]
 801466c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 801466e:	bf00      	nop
 8014670:	371c      	adds	r7, #28
 8014672:	46bd      	mov	sp, r7
 8014674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014678:	4770      	bx	lr

0801467a <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 801467a:	b480      	push	{r7}
 801467c:	b083      	sub	sp, #12
 801467e:	af00      	add	r7, sp, #0
 8014680:	6078      	str	r0, [r7, #4]
 8014682:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8014684:	687b      	ldr	r3, [r7, #4]
 8014686:	695b      	ldr	r3, [r3, #20]
 8014688:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 801468c:	683b      	ldr	r3, [r7, #0]
 801468e:	431a      	orrs	r2, r3
 8014690:	687b      	ldr	r3, [r7, #4]
 8014692:	615a      	str	r2, [r3, #20]
}
 8014694:	bf00      	nop
 8014696:	370c      	adds	r7, #12
 8014698:	46bd      	mov	sp, r7
 801469a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801469e:	4770      	bx	lr

080146a0 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 80146a0:	b480      	push	{r7}
 80146a2:	b083      	sub	sp, #12
 80146a4:	af00      	add	r7, sp, #0
 80146a6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80146a8:	687b      	ldr	r3, [r7, #4]
 80146aa:	68db      	ldr	r3, [r3, #12]
 80146ac:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80146b0:	2b00      	cmp	r3, #0
 80146b2:	d101      	bne.n	80146b8 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80146b4:	2301      	movs	r3, #1
 80146b6:	e000      	b.n	80146ba <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80146b8:	2300      	movs	r3, #0
}
 80146ba:	4618      	mov	r0, r3
 80146bc:	370c      	adds	r7, #12
 80146be:	46bd      	mov	sp, r7
 80146c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80146c4:	4770      	bx	lr

080146c6 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L5, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80146c6:	b480      	push	{r7}
 80146c8:	b087      	sub	sp, #28
 80146ca:	af00      	add	r7, sp, #0
 80146cc:	60f8      	str	r0, [r7, #12]
 80146ce:	60b9      	str	r1, [r7, #8]
 80146d0:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 80146d2:	68fb      	ldr	r3, [r7, #12]
 80146d4:	3330      	adds	r3, #48	; 0x30
 80146d6:	461a      	mov	r2, r3
 80146d8:	68bb      	ldr	r3, [r7, #8]
 80146da:	0a1b      	lsrs	r3, r3, #8
 80146dc:	009b      	lsls	r3, r3, #2
 80146de:	f003 030c 	and.w	r3, r3, #12
 80146e2:	4413      	add	r3, r2
 80146e4:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80146e6:	697b      	ldr	r3, [r7, #20]
 80146e8:	681a      	ldr	r2, [r3, #0]
 80146ea:	68bb      	ldr	r3, [r7, #8]
 80146ec:	f003 031f 	and.w	r3, r3, #31
 80146f0:	211f      	movs	r1, #31
 80146f2:	fa01 f303 	lsl.w	r3, r1, r3
 80146f6:	43db      	mvns	r3, r3
 80146f8:	401a      	ands	r2, r3
 80146fa:	687b      	ldr	r3, [r7, #4]
 80146fc:	0e9b      	lsrs	r3, r3, #26
 80146fe:	f003 011f 	and.w	r1, r3, #31
 8014702:	68bb      	ldr	r3, [r7, #8]
 8014704:	f003 031f 	and.w	r3, r3, #31
 8014708:	fa01 f303 	lsl.w	r3, r1, r3
 801470c:	431a      	orrs	r2, r3
 801470e:	697b      	ldr	r3, [r7, #20]
 8014710:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8014712:	bf00      	nop
 8014714:	371c      	adds	r7, #28
 8014716:	46bd      	mov	sp, r7
 8014718:	f85d 7b04 	ldr.w	r7, [sp], #4
 801471c:	4770      	bx	lr

0801471e <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 801471e:	b480      	push	{r7}
 8014720:	b083      	sub	sp, #12
 8014722:	af00      	add	r7, sp, #0
 8014724:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8014726:	687b      	ldr	r3, [r7, #4]
 8014728:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801472a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 801472e:	2b00      	cmp	r3, #0
 8014730:	d101      	bne.n	8014736 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8014732:	2301      	movs	r3, #1
 8014734:	e000      	b.n	8014738 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8014736:	2300      	movs	r3, #0
}
 8014738:	4618      	mov	r0, r3
 801473a:	370c      	adds	r7, #12
 801473c:	46bd      	mov	sp, r7
 801473e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014742:	4770      	bx	lr

08014744 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8014744:	b480      	push	{r7}
 8014746:	b087      	sub	sp, #28
 8014748:	af00      	add	r7, sp, #0
 801474a:	60f8      	str	r0, [r7, #12]
 801474c:	60b9      	str	r1, [r7, #8]
 801474e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8014750:	68fb      	ldr	r3, [r7, #12]
 8014752:	3314      	adds	r3, #20
 8014754:	461a      	mov	r2, r3
 8014756:	68bb      	ldr	r3, [r7, #8]
 8014758:	0e5b      	lsrs	r3, r3, #25
 801475a:	009b      	lsls	r3, r3, #2
 801475c:	f003 0304 	and.w	r3, r3, #4
 8014760:	4413      	add	r3, r2
 8014762:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8014764:	697b      	ldr	r3, [r7, #20]
 8014766:	681a      	ldr	r2, [r3, #0]
 8014768:	68bb      	ldr	r3, [r7, #8]
 801476a:	0d1b      	lsrs	r3, r3, #20
 801476c:	f003 031f 	and.w	r3, r3, #31
 8014770:	2107      	movs	r1, #7
 8014772:	fa01 f303 	lsl.w	r3, r1, r3
 8014776:	43db      	mvns	r3, r3
 8014778:	401a      	ands	r2, r3
 801477a:	68bb      	ldr	r3, [r7, #8]
 801477c:	0d1b      	lsrs	r3, r3, #20
 801477e:	f003 031f 	and.w	r3, r3, #31
 8014782:	6879      	ldr	r1, [r7, #4]
 8014784:	fa01 f303 	lsl.w	r3, r1, r3
 8014788:	431a      	orrs	r2, r3
 801478a:	697b      	ldr	r3, [r7, #20]
 801478c:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 801478e:	bf00      	nop
 8014790:	371c      	adds	r7, #28
 8014792:	46bd      	mov	sp, r7
 8014794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014798:	4770      	bx	lr
	...

0801479c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 801479c:	b480      	push	{r7}
 801479e:	b085      	sub	sp, #20
 80147a0:	af00      	add	r7, sp, #0
 80147a2:	60f8      	str	r0, [r7, #12]
 80147a4:	60b9      	str	r1, [r7, #8]
 80147a6:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80147a8:	68fb      	ldr	r3, [r7, #12]
 80147aa:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80147ae:	68bb      	ldr	r3, [r7, #8]
 80147b0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80147b4:	43db      	mvns	r3, r3
 80147b6:	401a      	ands	r2, r3
 80147b8:	687b      	ldr	r3, [r7, #4]
 80147ba:	f003 0318 	and.w	r3, r3, #24
 80147be:	4908      	ldr	r1, [pc, #32]	; (80147e0 <LL_ADC_SetChannelSingleDiff+0x44>)
 80147c0:	40d9      	lsrs	r1, r3
 80147c2:	68bb      	ldr	r3, [r7, #8]
 80147c4:	400b      	ands	r3, r1
 80147c6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80147ca:	431a      	orrs	r2, r3
 80147cc:	68fb      	ldr	r3, [r7, #12]
 80147ce:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80147d2:	bf00      	nop
 80147d4:	3714      	adds	r7, #20
 80147d6:	46bd      	mov	sp, r7
 80147d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80147dc:	4770      	bx	lr
 80147de:	bf00      	nop
 80147e0:	0007ffff 	.word	0x0007ffff

080147e4 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80147e4:	b480      	push	{r7}
 80147e6:	b083      	sub	sp, #12
 80147e8:	af00      	add	r7, sp, #0
 80147ea:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80147ec:	687b      	ldr	r3, [r7, #4]
 80147ee:	689b      	ldr	r3, [r3, #8]
 80147f0:	f003 031f 	and.w	r3, r3, #31
}
 80147f4:	4618      	mov	r0, r3
 80147f6:	370c      	adds	r7, #12
 80147f8:	46bd      	mov	sp, r7
 80147fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80147fe:	4770      	bx	lr

08014800 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8014800:	b480      	push	{r7}
 8014802:	b083      	sub	sp, #12
 8014804:	af00      	add	r7, sp, #0
 8014806:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8014808:	687b      	ldr	r3, [r7, #4]
 801480a:	689b      	ldr	r3, [r3, #8]
 801480c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8014810:	4618      	mov	r0, r3
 8014812:	370c      	adds	r7, #12
 8014814:	46bd      	mov	sp, r7
 8014816:	f85d 7b04 	ldr.w	r7, [sp], #4
 801481a:	4770      	bx	lr

0801481c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 801481c:	b480      	push	{r7}
 801481e:	b083      	sub	sp, #12
 8014820:	af00      	add	r7, sp, #0
 8014822:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8014824:	687b      	ldr	r3, [r7, #4]
 8014826:	689b      	ldr	r3, [r3, #8]
 8014828:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 801482c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8014830:	687a      	ldr	r2, [r7, #4]
 8014832:	6093      	str	r3, [r2, #8]
}
 8014834:	bf00      	nop
 8014836:	370c      	adds	r7, #12
 8014838:	46bd      	mov	sp, r7
 801483a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801483e:	4770      	bx	lr

08014840 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8014840:	b480      	push	{r7}
 8014842:	b083      	sub	sp, #12
 8014844:	af00      	add	r7, sp, #0
 8014846:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8014848:	687b      	ldr	r3, [r7, #4]
 801484a:	689b      	ldr	r3, [r3, #8]
 801484c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8014850:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8014854:	d101      	bne.n	801485a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8014856:	2301      	movs	r3, #1
 8014858:	e000      	b.n	801485c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 801485a:	2300      	movs	r3, #0
}
 801485c:	4618      	mov	r0, r3
 801485e:	370c      	adds	r7, #12
 8014860:	46bd      	mov	sp, r7
 8014862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014866:	4770      	bx	lr

08014868 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8014868:	b480      	push	{r7}
 801486a:	b083      	sub	sp, #12
 801486c:	af00      	add	r7, sp, #0
 801486e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8014870:	687b      	ldr	r3, [r7, #4]
 8014872:	689b      	ldr	r3, [r3, #8]
 8014874:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8014878:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 801487c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8014880:	687b      	ldr	r3, [r7, #4]
 8014882:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8014884:	bf00      	nop
 8014886:	370c      	adds	r7, #12
 8014888:	46bd      	mov	sp, r7
 801488a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801488e:	4770      	bx	lr

08014890 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8014890:	b480      	push	{r7}
 8014892:	b083      	sub	sp, #12
 8014894:	af00      	add	r7, sp, #0
 8014896:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8014898:	687b      	ldr	r3, [r7, #4]
 801489a:	689b      	ldr	r3, [r3, #8]
 801489c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80148a0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80148a4:	d101      	bne.n	80148aa <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80148a6:	2301      	movs	r3, #1
 80148a8:	e000      	b.n	80148ac <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80148aa:	2300      	movs	r3, #0
}
 80148ac:	4618      	mov	r0, r3
 80148ae:	370c      	adds	r7, #12
 80148b0:	46bd      	mov	sp, r7
 80148b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80148b6:	4770      	bx	lr

080148b8 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80148b8:	b480      	push	{r7}
 80148ba:	b083      	sub	sp, #12
 80148bc:	af00      	add	r7, sp, #0
 80148be:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80148c0:	687b      	ldr	r3, [r7, #4]
 80148c2:	689b      	ldr	r3, [r3, #8]
 80148c4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80148c8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80148cc:	f043 0201 	orr.w	r2, r3, #1
 80148d0:	687b      	ldr	r3, [r7, #4]
 80148d2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80148d4:	bf00      	nop
 80148d6:	370c      	adds	r7, #12
 80148d8:	46bd      	mov	sp, r7
 80148da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80148de:	4770      	bx	lr

080148e0 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80148e0:	b480      	push	{r7}
 80148e2:	b083      	sub	sp, #12
 80148e4:	af00      	add	r7, sp, #0
 80148e6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80148e8:	687b      	ldr	r3, [r7, #4]
 80148ea:	689b      	ldr	r3, [r3, #8]
 80148ec:	f003 0301 	and.w	r3, r3, #1
 80148f0:	2b01      	cmp	r3, #1
 80148f2:	d101      	bne.n	80148f8 <LL_ADC_IsEnabled+0x18>
 80148f4:	2301      	movs	r3, #1
 80148f6:	e000      	b.n	80148fa <LL_ADC_IsEnabled+0x1a>
 80148f8:	2300      	movs	r3, #0
}
 80148fa:	4618      	mov	r0, r3
 80148fc:	370c      	adds	r7, #12
 80148fe:	46bd      	mov	sp, r7
 8014900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014904:	4770      	bx	lr

08014906 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8014906:	b480      	push	{r7}
 8014908:	b083      	sub	sp, #12
 801490a:	af00      	add	r7, sp, #0
 801490c:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 801490e:	687b      	ldr	r3, [r7, #4]
 8014910:	689b      	ldr	r3, [r3, #8]
 8014912:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8014916:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 801491a:	f043 0204 	orr.w	r2, r3, #4
 801491e:	687b      	ldr	r3, [r7, #4]
 8014920:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8014922:	bf00      	nop
 8014924:	370c      	adds	r7, #12
 8014926:	46bd      	mov	sp, r7
 8014928:	f85d 7b04 	ldr.w	r7, [sp], #4
 801492c:	4770      	bx	lr

0801492e <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 801492e:	b480      	push	{r7}
 8014930:	b083      	sub	sp, #12
 8014932:	af00      	add	r7, sp, #0
 8014934:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8014936:	687b      	ldr	r3, [r7, #4]
 8014938:	689b      	ldr	r3, [r3, #8]
 801493a:	f003 0304 	and.w	r3, r3, #4
 801493e:	2b04      	cmp	r3, #4
 8014940:	d101      	bne.n	8014946 <LL_ADC_REG_IsConversionOngoing+0x18>
 8014942:	2301      	movs	r3, #1
 8014944:	e000      	b.n	8014948 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8014946:	2300      	movs	r3, #0
}
 8014948:	4618      	mov	r0, r3
 801494a:	370c      	adds	r7, #12
 801494c:	46bd      	mov	sp, r7
 801494e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014952:	4770      	bx	lr

08014954 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8014954:	b480      	push	{r7}
 8014956:	b083      	sub	sp, #12
 8014958:	af00      	add	r7, sp, #0
 801495a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 801495c:	687b      	ldr	r3, [r7, #4]
 801495e:	689b      	ldr	r3, [r3, #8]
 8014960:	f003 0308 	and.w	r3, r3, #8
 8014964:	2b08      	cmp	r3, #8
 8014966:	d101      	bne.n	801496c <LL_ADC_INJ_IsConversionOngoing+0x18>
 8014968:	2301      	movs	r3, #1
 801496a:	e000      	b.n	801496e <LL_ADC_INJ_IsConversionOngoing+0x1a>
 801496c:	2300      	movs	r3, #0
}
 801496e:	4618      	mov	r0, r3
 8014970:	370c      	adds	r7, #12
 8014972:	46bd      	mov	sp, r7
 8014974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014978:	4770      	bx	lr
	...

0801497c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 801497c:	b590      	push	{r4, r7, lr}
 801497e:	b089      	sub	sp, #36	; 0x24
 8014980:	af00      	add	r7, sp, #0
 8014982:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8014984:	2300      	movs	r3, #0
 8014986:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8014988:	2300      	movs	r3, #0
 801498a:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 801498c:	687b      	ldr	r3, [r7, #4]
 801498e:	2b00      	cmp	r3, #0
 8014990:	d101      	bne.n	8014996 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8014992:	2301      	movs	r3, #1
 8014994:	e12e      	b.n	8014bf4 <HAL_ADC_Init+0x278>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8014996:	687b      	ldr	r3, [r7, #4]
 8014998:	691b      	ldr	r3, [r3, #16]
 801499a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 801499c:	687b      	ldr	r3, [r7, #4]
 801499e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80149a0:	2b00      	cmp	r3, #0
 80149a2:	d109      	bne.n	80149b8 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80149a4:	6878      	ldr	r0, [r7, #4]
 80149a6:	f7fe fe3d 	bl	8013624 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80149aa:	687b      	ldr	r3, [r7, #4]
 80149ac:	2200      	movs	r2, #0
 80149ae:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80149b0:	687b      	ldr	r3, [r7, #4]
 80149b2:	2200      	movs	r2, #0
 80149b4:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80149b8:	687b      	ldr	r3, [r7, #4]
 80149ba:	681b      	ldr	r3, [r3, #0]
 80149bc:	4618      	mov	r0, r3
 80149be:	f7ff ff3f 	bl	8014840 <LL_ADC_IsDeepPowerDownEnabled>
 80149c2:	4603      	mov	r3, r0
 80149c4:	2b00      	cmp	r3, #0
 80149c6:	d004      	beq.n	80149d2 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80149c8:	687b      	ldr	r3, [r7, #4]
 80149ca:	681b      	ldr	r3, [r3, #0]
 80149cc:	4618      	mov	r0, r3
 80149ce:	f7ff ff25 	bl	801481c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80149d2:	687b      	ldr	r3, [r7, #4]
 80149d4:	681b      	ldr	r3, [r3, #0]
 80149d6:	4618      	mov	r0, r3
 80149d8:	f7ff ff5a 	bl	8014890 <LL_ADC_IsInternalRegulatorEnabled>
 80149dc:	4603      	mov	r3, r0
 80149de:	2b00      	cmp	r3, #0
 80149e0:	d115      	bne.n	8014a0e <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80149e2:	687b      	ldr	r3, [r7, #4]
 80149e4:	681b      	ldr	r3, [r3, #0]
 80149e6:	4618      	mov	r0, r3
 80149e8:	f7ff ff3e 	bl	8014868 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80149ec:	4b83      	ldr	r3, [pc, #524]	; (8014bfc <HAL_ADC_Init+0x280>)
 80149ee:	681b      	ldr	r3, [r3, #0]
 80149f0:	099b      	lsrs	r3, r3, #6
 80149f2:	4a83      	ldr	r2, [pc, #524]	; (8014c00 <HAL_ADC_Init+0x284>)
 80149f4:	fba2 2303 	umull	r2, r3, r2, r3
 80149f8:	099b      	lsrs	r3, r3, #6
 80149fa:	3301      	adds	r3, #1
 80149fc:	005b      	lsls	r3, r3, #1
 80149fe:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8014a00:	e002      	b.n	8014a08 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8014a02:	68fb      	ldr	r3, [r7, #12]
 8014a04:	3b01      	subs	r3, #1
 8014a06:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8014a08:	68fb      	ldr	r3, [r7, #12]
 8014a0a:	2b00      	cmp	r3, #0
 8014a0c:	d1f9      	bne.n	8014a02 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8014a0e:	687b      	ldr	r3, [r7, #4]
 8014a10:	681b      	ldr	r3, [r3, #0]
 8014a12:	4618      	mov	r0, r3
 8014a14:	f7ff ff3c 	bl	8014890 <LL_ADC_IsInternalRegulatorEnabled>
 8014a18:	4603      	mov	r3, r0
 8014a1a:	2b00      	cmp	r3, #0
 8014a1c:	d10d      	bne.n	8014a3a <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8014a1e:	687b      	ldr	r3, [r7, #4]
 8014a20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8014a22:	f043 0210 	orr.w	r2, r3, #16
 8014a26:	687b      	ldr	r3, [r7, #4]
 8014a28:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8014a2a:	687b      	ldr	r3, [r7, #4]
 8014a2c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8014a2e:	f043 0201 	orr.w	r2, r3, #1
 8014a32:	687b      	ldr	r3, [r7, #4]
 8014a34:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8014a36:	2301      	movs	r3, #1
 8014a38:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8014a3a:	687b      	ldr	r3, [r7, #4]
 8014a3c:	681b      	ldr	r3, [r3, #0]
 8014a3e:	4618      	mov	r0, r3
 8014a40:	f7ff ff75 	bl	801492e <LL_ADC_REG_IsConversionOngoing>
 8014a44:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8014a46:	687b      	ldr	r3, [r7, #4]
 8014a48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8014a4a:	f003 0310 	and.w	r3, r3, #16
 8014a4e:	2b00      	cmp	r3, #0
 8014a50:	f040 80c7 	bne.w	8014be2 <HAL_ADC_Init+0x266>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8014a54:	697b      	ldr	r3, [r7, #20]
 8014a56:	2b00      	cmp	r3, #0
 8014a58:	f040 80c3 	bne.w	8014be2 <HAL_ADC_Init+0x266>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8014a5c:	687b      	ldr	r3, [r7, #4]
 8014a5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8014a60:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8014a64:	f043 0202 	orr.w	r2, r3, #2
 8014a68:	687b      	ldr	r3, [r7, #4]
 8014a6a:	659a      	str	r2, [r3, #88]	; 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8014a6c:	687b      	ldr	r3, [r7, #4]
 8014a6e:	681b      	ldr	r3, [r3, #0]
 8014a70:	4618      	mov	r0, r3
 8014a72:	f7ff ff35 	bl	80148e0 <LL_ADC_IsEnabled>
 8014a76:	4603      	mov	r3, r0
 8014a78:	2b00      	cmp	r3, #0
 8014a7a:	d110      	bne.n	8014a9e <HAL_ADC_Init+0x122>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8014a7c:	4861      	ldr	r0, [pc, #388]	; (8014c04 <HAL_ADC_Init+0x288>)
 8014a7e:	f7ff ff2f 	bl	80148e0 <LL_ADC_IsEnabled>
 8014a82:	4604      	mov	r4, r0
 8014a84:	4860      	ldr	r0, [pc, #384]	; (8014c08 <HAL_ADC_Init+0x28c>)
 8014a86:	f7ff ff2b 	bl	80148e0 <LL_ADC_IsEnabled>
 8014a8a:	4603      	mov	r3, r0
 8014a8c:	4323      	orrs	r3, r4
 8014a8e:	2b00      	cmp	r3, #0
 8014a90:	d105      	bne.n	8014a9e <HAL_ADC_Init+0x122>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8014a92:	687b      	ldr	r3, [r7, #4]
 8014a94:	685b      	ldr	r3, [r3, #4]
 8014a96:	4619      	mov	r1, r3
 8014a98:	485c      	ldr	r0, [pc, #368]	; (8014c0c <HAL_ADC_Init+0x290>)
 8014a9a:	f7ff fd65 	bl	8014568 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8014a9e:	687b      	ldr	r3, [r7, #4]
 8014aa0:	7e5b      	ldrb	r3, [r3, #25]
 8014aa2:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8014aa4:	687b      	ldr	r3, [r7, #4]
 8014aa6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8014aa8:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8014aaa:	687b      	ldr	r3, [r7, #4]
 8014aac:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8014aae:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8014ab0:	687b      	ldr	r3, [r7, #4]
 8014ab2:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8014ab4:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8014ab6:	687b      	ldr	r3, [r7, #4]
 8014ab8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8014abc:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8014abe:	4313      	orrs	r3, r2
 8014ac0:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8014ac2:	687b      	ldr	r3, [r7, #4]
 8014ac4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8014ac8:	2b01      	cmp	r3, #1
 8014aca:	d106      	bne.n	8014ada <HAL_ADC_Init+0x15e>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8014acc:	687b      	ldr	r3, [r7, #4]
 8014ace:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014ad0:	3b01      	subs	r3, #1
 8014ad2:	045b      	lsls	r3, r3, #17
 8014ad4:	69ba      	ldr	r2, [r7, #24]
 8014ad6:	4313      	orrs	r3, r2
 8014ad8:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8014ada:	687b      	ldr	r3, [r7, #4]
 8014adc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014ade:	2b00      	cmp	r3, #0
 8014ae0:	d009      	beq.n	8014af6 <HAL_ADC_Init+0x17a>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8014ae2:	687b      	ldr	r3, [r7, #4]
 8014ae4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014ae6:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8014aea:	687b      	ldr	r3, [r7, #4]
 8014aec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014aee:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8014af0:	69ba      	ldr	r2, [r7, #24]
 8014af2:	4313      	orrs	r3, r2
 8014af4:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8014af6:	687b      	ldr	r3, [r7, #4]
 8014af8:	681b      	ldr	r3, [r3, #0]
 8014afa:	68da      	ldr	r2, [r3, #12]
 8014afc:	4b44      	ldr	r3, [pc, #272]	; (8014c10 <HAL_ADC_Init+0x294>)
 8014afe:	4013      	ands	r3, r2
 8014b00:	687a      	ldr	r2, [r7, #4]
 8014b02:	6812      	ldr	r2, [r2, #0]
 8014b04:	69b9      	ldr	r1, [r7, #24]
 8014b06:	430b      	orrs	r3, r1
 8014b08:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8014b0a:	687b      	ldr	r3, [r7, #4]
 8014b0c:	681b      	ldr	r3, [r3, #0]
 8014b0e:	4618      	mov	r0, r3
 8014b10:	f7ff ff20 	bl	8014954 <LL_ADC_INJ_IsConversionOngoing>
 8014b14:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8014b16:	697b      	ldr	r3, [r7, #20]
 8014b18:	2b00      	cmp	r3, #0
 8014b1a:	d140      	bne.n	8014b9e <HAL_ADC_Init+0x222>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8014b1c:	693b      	ldr	r3, [r7, #16]
 8014b1e:	2b00      	cmp	r3, #0
 8014b20:	d13d      	bne.n	8014b9e <HAL_ADC_Init+0x222>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8014b22:	687b      	ldr	r3, [r7, #4]
 8014b24:	6cda      	ldr	r2, [r3, #76]	; 0x4c
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8014b26:	687b      	ldr	r3, [r7, #4]
 8014b28:	7e1b      	ldrb	r3, [r3, #24]
 8014b2a:	039b      	lsls	r3, r3, #14
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8014b2c:	431a      	orrs	r2, r3
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8014b2e:	687b      	ldr	r3, [r7, #4]
 8014b30:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8014b34:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8014b36:	4313      	orrs	r3, r2
 8014b38:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8014b3a:	687b      	ldr	r3, [r7, #4]
 8014b3c:	681b      	ldr	r3, [r3, #0]
 8014b3e:	68db      	ldr	r3, [r3, #12]
 8014b40:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8014b44:	f023 0306 	bic.w	r3, r3, #6
 8014b48:	687a      	ldr	r2, [r7, #4]
 8014b4a:	6812      	ldr	r2, [r2, #0]
 8014b4c:	69b9      	ldr	r1, [r7, #24]
 8014b4e:	430b      	orrs	r3, r1
 8014b50:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8014b52:	687b      	ldr	r3, [r7, #4]
 8014b54:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8014b58:	2b01      	cmp	r3, #1
 8014b5a:	d118      	bne.n	8014b8e <HAL_ADC_Init+0x212>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8014b5c:	687b      	ldr	r3, [r7, #4]
 8014b5e:	681b      	ldr	r3, [r3, #0]
 8014b60:	691b      	ldr	r3, [r3, #16]
 8014b62:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8014b66:	f023 0304 	bic.w	r3, r3, #4
 8014b6a:	687a      	ldr	r2, [r7, #4]
 8014b6c:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8014b6e:	687a      	ldr	r2, [r7, #4]
 8014b70:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8014b72:	4311      	orrs	r1, r2
 8014b74:	687a      	ldr	r2, [r7, #4]
 8014b76:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8014b78:	4311      	orrs	r1, r2
 8014b7a:	687a      	ldr	r2, [r7, #4]
 8014b7c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8014b7e:	430a      	orrs	r2, r1
 8014b80:	431a      	orrs	r2, r3
 8014b82:	687b      	ldr	r3, [r7, #4]
 8014b84:	681b      	ldr	r3, [r3, #0]
 8014b86:	f042 0201 	orr.w	r2, r2, #1
 8014b8a:	611a      	str	r2, [r3, #16]
 8014b8c:	e007      	b.n	8014b9e <HAL_ADC_Init+0x222>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8014b8e:	687b      	ldr	r3, [r7, #4]
 8014b90:	681b      	ldr	r3, [r3, #0]
 8014b92:	691a      	ldr	r2, [r3, #16]
 8014b94:	687b      	ldr	r3, [r7, #4]
 8014b96:	681b      	ldr	r3, [r3, #0]
 8014b98:	f022 0201 	bic.w	r2, r2, #1
 8014b9c:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8014b9e:	687b      	ldr	r3, [r7, #4]
 8014ba0:	691b      	ldr	r3, [r3, #16]
 8014ba2:	2b01      	cmp	r3, #1
 8014ba4:	d10c      	bne.n	8014bc0 <HAL_ADC_Init+0x244>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8014ba6:	687b      	ldr	r3, [r7, #4]
 8014ba8:	681b      	ldr	r3, [r3, #0]
 8014baa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014bac:	f023 010f 	bic.w	r1, r3, #15
 8014bb0:	687b      	ldr	r3, [r7, #4]
 8014bb2:	69db      	ldr	r3, [r3, #28]
 8014bb4:	1e5a      	subs	r2, r3, #1
 8014bb6:	687b      	ldr	r3, [r7, #4]
 8014bb8:	681b      	ldr	r3, [r3, #0]
 8014bba:	430a      	orrs	r2, r1
 8014bbc:	631a      	str	r2, [r3, #48]	; 0x30
 8014bbe:	e007      	b.n	8014bd0 <HAL_ADC_Init+0x254>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8014bc0:	687b      	ldr	r3, [r7, #4]
 8014bc2:	681b      	ldr	r3, [r3, #0]
 8014bc4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8014bc6:	687b      	ldr	r3, [r7, #4]
 8014bc8:	681b      	ldr	r3, [r3, #0]
 8014bca:	f022 020f 	bic.w	r2, r2, #15
 8014bce:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8014bd0:	687b      	ldr	r3, [r7, #4]
 8014bd2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8014bd4:	f023 0303 	bic.w	r3, r3, #3
 8014bd8:	f043 0201 	orr.w	r2, r3, #1
 8014bdc:	687b      	ldr	r3, [r7, #4]
 8014bde:	659a      	str	r2, [r3, #88]	; 0x58
 8014be0:	e007      	b.n	8014bf2 <HAL_ADC_Init+0x276>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8014be2:	687b      	ldr	r3, [r7, #4]
 8014be4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8014be6:	f043 0210 	orr.w	r2, r3, #16
 8014bea:	687b      	ldr	r3, [r7, #4]
 8014bec:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8014bee:	2301      	movs	r3, #1
 8014bf0:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8014bf2:	7ffb      	ldrb	r3, [r7, #31]
}
 8014bf4:	4618      	mov	r0, r3
 8014bf6:	3724      	adds	r7, #36	; 0x24
 8014bf8:	46bd      	mov	sp, r7
 8014bfa:	bd90      	pop	{r4, r7, pc}
 8014bfc:	20000090 	.word	0x20000090
 8014c00:	053e2d63 	.word	0x053e2d63
 8014c04:	42028000 	.word	0x42028000
 8014c08:	42028100 	.word	0x42028100
 8014c0c:	42028300 	.word	0x42028300
 8014c10:	fff0c007 	.word	0xfff0c007

08014c14 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8014c14:	b580      	push	{r7, lr}
 8014c16:	b086      	sub	sp, #24
 8014c18:	af00      	add	r7, sp, #0
 8014c1a:	60f8      	str	r0, [r7, #12]
 8014c1c:	60b9      	str	r1, [r7, #8]
 8014c1e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8014c20:	4850      	ldr	r0, [pc, #320]	; (8014d64 <HAL_ADC_Start_DMA+0x150>)
 8014c22:	f7ff fddf 	bl	80147e4 <LL_ADC_GetMultimode>
 8014c26:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8014c28:	68fb      	ldr	r3, [r7, #12]
 8014c2a:	681b      	ldr	r3, [r3, #0]
 8014c2c:	4618      	mov	r0, r3
 8014c2e:	f7ff fe7e 	bl	801492e <LL_ADC_REG_IsConversionOngoing>
 8014c32:	4603      	mov	r3, r0
 8014c34:	2b00      	cmp	r3, #0
 8014c36:	f040 808e 	bne.w	8014d56 <HAL_ADC_Start_DMA+0x142>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8014c3a:	68fb      	ldr	r3, [r7, #12]
 8014c3c:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8014c40:	2b01      	cmp	r3, #1
 8014c42:	d101      	bne.n	8014c48 <HAL_ADC_Start_DMA+0x34>
 8014c44:	2302      	movs	r3, #2
 8014c46:	e089      	b.n	8014d5c <HAL_ADC_Start_DMA+0x148>
 8014c48:	68fb      	ldr	r3, [r7, #12]
 8014c4a:	2201      	movs	r2, #1
 8014c4c:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8014c50:	693b      	ldr	r3, [r7, #16]
 8014c52:	2b00      	cmp	r3, #0
 8014c54:	d005      	beq.n	8014c62 <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8014c56:	693b      	ldr	r3, [r7, #16]
 8014c58:	2b05      	cmp	r3, #5
 8014c5a:	d002      	beq.n	8014c62 <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8014c5c:	693b      	ldr	r3, [r7, #16]
 8014c5e:	2b09      	cmp	r3, #9
 8014c60:	d172      	bne.n	8014d48 <HAL_ADC_Start_DMA+0x134>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8014c62:	68f8      	ldr	r0, [r7, #12]
 8014c64:	f000 feac 	bl	80159c0 <ADC_Enable>
 8014c68:	4603      	mov	r3, r0
 8014c6a:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8014c6c:	7dfb      	ldrb	r3, [r7, #23]
 8014c6e:	2b00      	cmp	r3, #0
 8014c70:	d165      	bne.n	8014d3e <HAL_ADC_Start_DMA+0x12a>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8014c72:	68fb      	ldr	r3, [r7, #12]
 8014c74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8014c76:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8014c7a:	f023 0301 	bic.w	r3, r3, #1
 8014c7e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8014c82:	68fb      	ldr	r3, [r7, #12]
 8014c84:	659a      	str	r2, [r3, #88]	; 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8014c86:	68fb      	ldr	r3, [r7, #12]
 8014c88:	681b      	ldr	r3, [r3, #0]
 8014c8a:	4a37      	ldr	r2, [pc, #220]	; (8014d68 <HAL_ADC_Start_DMA+0x154>)
 8014c8c:	4293      	cmp	r3, r2
 8014c8e:	d002      	beq.n	8014c96 <HAL_ADC_Start_DMA+0x82>
 8014c90:	68fb      	ldr	r3, [r7, #12]
 8014c92:	681b      	ldr	r3, [r3, #0]
 8014c94:	e000      	b.n	8014c98 <HAL_ADC_Start_DMA+0x84>
 8014c96:	4b35      	ldr	r3, [pc, #212]	; (8014d6c <HAL_ADC_Start_DMA+0x158>)
 8014c98:	68fa      	ldr	r2, [r7, #12]
 8014c9a:	6812      	ldr	r2, [r2, #0]
 8014c9c:	4293      	cmp	r3, r2
 8014c9e:	d002      	beq.n	8014ca6 <HAL_ADC_Start_DMA+0x92>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8014ca0:	693b      	ldr	r3, [r7, #16]
 8014ca2:	2b00      	cmp	r3, #0
 8014ca4:	d105      	bne.n	8014cb2 <HAL_ADC_Start_DMA+0x9e>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8014ca6:	68fb      	ldr	r3, [r7, #12]
 8014ca8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8014caa:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8014cae:	68fb      	ldr	r3, [r7, #12]
 8014cb0:	659a      	str	r2, [r3, #88]	; 0x58
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8014cb2:	68fb      	ldr	r3, [r7, #12]
 8014cb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8014cb6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8014cba:	2b00      	cmp	r3, #0
 8014cbc:	d006      	beq.n	8014ccc <HAL_ADC_Start_DMA+0xb8>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8014cbe:	68fb      	ldr	r3, [r7, #12]
 8014cc0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8014cc2:	f023 0206 	bic.w	r2, r3, #6
 8014cc6:	68fb      	ldr	r3, [r7, #12]
 8014cc8:	65da      	str	r2, [r3, #92]	; 0x5c
 8014cca:	e002      	b.n	8014cd2 <HAL_ADC_Start_DMA+0xbe>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8014ccc:	68fb      	ldr	r3, [r7, #12]
 8014cce:	2200      	movs	r2, #0
 8014cd0:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8014cd2:	68fb      	ldr	r3, [r7, #12]
 8014cd4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8014cd6:	4a26      	ldr	r2, [pc, #152]	; (8014d70 <HAL_ADC_Start_DMA+0x15c>)
 8014cd8:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8014cda:	68fb      	ldr	r3, [r7, #12]
 8014cdc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8014cde:	4a25      	ldr	r2, [pc, #148]	; (8014d74 <HAL_ADC_Start_DMA+0x160>)
 8014ce0:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8014ce2:	68fb      	ldr	r3, [r7, #12]
 8014ce4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8014ce6:	4a24      	ldr	r2, [pc, #144]	; (8014d78 <HAL_ADC_Start_DMA+0x164>)
 8014ce8:	63da      	str	r2, [r3, #60]	; 0x3c
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8014cea:	68fb      	ldr	r3, [r7, #12]
 8014cec:	681b      	ldr	r3, [r3, #0]
 8014cee:	221c      	movs	r2, #28
 8014cf0:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8014cf2:	68fb      	ldr	r3, [r7, #12]
 8014cf4:	2200      	movs	r2, #0
 8014cf6:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8014cfa:	68fb      	ldr	r3, [r7, #12]
 8014cfc:	681b      	ldr	r3, [r3, #0]
 8014cfe:	685a      	ldr	r2, [r3, #4]
 8014d00:	68fb      	ldr	r3, [r7, #12]
 8014d02:	681b      	ldr	r3, [r3, #0]
 8014d04:	f042 0210 	orr.w	r2, r2, #16
 8014d08:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8014d0a:	68fb      	ldr	r3, [r7, #12]
 8014d0c:	681b      	ldr	r3, [r3, #0]
 8014d0e:	68da      	ldr	r2, [r3, #12]
 8014d10:	68fb      	ldr	r3, [r7, #12]
 8014d12:	681b      	ldr	r3, [r3, #0]
 8014d14:	f042 0201 	orr.w	r2, r2, #1
 8014d18:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8014d1a:	68fb      	ldr	r3, [r7, #12]
 8014d1c:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8014d1e:	68fb      	ldr	r3, [r7, #12]
 8014d20:	681b      	ldr	r3, [r3, #0]
 8014d22:	3340      	adds	r3, #64	; 0x40
 8014d24:	4619      	mov	r1, r3
 8014d26:	68ba      	ldr	r2, [r7, #8]
 8014d28:	687b      	ldr	r3, [r7, #4]
 8014d2a:	f001 f9e7 	bl	80160fc <HAL_DMA_Start_IT>
 8014d2e:	4603      	mov	r3, r0
 8014d30:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8014d32:	68fb      	ldr	r3, [r7, #12]
 8014d34:	681b      	ldr	r3, [r3, #0]
 8014d36:	4618      	mov	r0, r3
 8014d38:	f7ff fde5 	bl	8014906 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8014d3c:	e00d      	b.n	8014d5a <HAL_ADC_Start_DMA+0x146>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8014d3e:	68fb      	ldr	r3, [r7, #12]
 8014d40:	2200      	movs	r2, #0
 8014d42:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
      if (tmp_hal_status == HAL_OK)
 8014d46:	e008      	b.n	8014d5a <HAL_ADC_Start_DMA+0x146>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8014d48:	2301      	movs	r3, #1
 8014d4a:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8014d4c:	68fb      	ldr	r3, [r7, #12]
 8014d4e:	2200      	movs	r2, #0
 8014d50:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 8014d54:	e001      	b.n	8014d5a <HAL_ADC_Start_DMA+0x146>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8014d56:	2302      	movs	r3, #2
 8014d58:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8014d5a:	7dfb      	ldrb	r3, [r7, #23]
}
 8014d5c:	4618      	mov	r0, r3
 8014d5e:	3718      	adds	r7, #24
 8014d60:	46bd      	mov	sp, r7
 8014d62:	bd80      	pop	{r7, pc}
 8014d64:	42028300 	.word	0x42028300
 8014d68:	42028100 	.word	0x42028100
 8014d6c:	42028000 	.word	0x42028000
 8014d70:	08015acd 	.word	0x08015acd
 8014d74:	08015ba5 	.word	0x08015ba5
 8014d78:	08015bc1 	.word	0x08015bc1

08014d7c <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8014d7c:	b580      	push	{r7, lr}
 8014d7e:	b08a      	sub	sp, #40	; 0x28
 8014d80:	af00      	add	r7, sp, #0
 8014d82:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8014d84:	2300      	movs	r3, #0
 8014d86:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8014d88:	687b      	ldr	r3, [r7, #4]
 8014d8a:	681b      	ldr	r3, [r3, #0]
 8014d8c:	681b      	ldr	r3, [r3, #0]
 8014d8e:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8014d90:	687b      	ldr	r3, [r7, #4]
 8014d92:	681b      	ldr	r3, [r3, #0]
 8014d94:	685b      	ldr	r3, [r3, #4]
 8014d96:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8014d98:	4882      	ldr	r0, [pc, #520]	; (8014fa4 <HAL_ADC_IRQHandler+0x228>)
 8014d9a:	f7ff fd23 	bl	80147e4 <LL_ADC_GetMultimode>
 8014d9e:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8014da0:	69fb      	ldr	r3, [r7, #28]
 8014da2:	f003 0302 	and.w	r3, r3, #2
 8014da6:	2b00      	cmp	r3, #0
 8014da8:	d017      	beq.n	8014dda <HAL_ADC_IRQHandler+0x5e>
 8014daa:	69bb      	ldr	r3, [r7, #24]
 8014dac:	f003 0302 	and.w	r3, r3, #2
 8014db0:	2b00      	cmp	r3, #0
 8014db2:	d012      	beq.n	8014dda <HAL_ADC_IRQHandler+0x5e>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8014db4:	687b      	ldr	r3, [r7, #4]
 8014db6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8014db8:	f003 0310 	and.w	r3, r3, #16
 8014dbc:	2b00      	cmp	r3, #0
 8014dbe:	d105      	bne.n	8014dcc <HAL_ADC_IRQHandler+0x50>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8014dc0:	687b      	ldr	r3, [r7, #4]
 8014dc2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8014dc4:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8014dc8:	687b      	ldr	r3, [r7, #4]
 8014dca:	659a      	str	r2, [r3, #88]	; 0x58

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8014dcc:	6878      	ldr	r0, [r7, #4]
 8014dce:	f000 ff5f 	bl	8015c90 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8014dd2:	687b      	ldr	r3, [r7, #4]
 8014dd4:	681b      	ldr	r3, [r3, #0]
 8014dd6:	2202      	movs	r2, #2
 8014dd8:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8014dda:	69fb      	ldr	r3, [r7, #28]
 8014ddc:	f003 0304 	and.w	r3, r3, #4
 8014de0:	2b00      	cmp	r3, #0
 8014de2:	d004      	beq.n	8014dee <HAL_ADC_IRQHandler+0x72>
 8014de4:	69bb      	ldr	r3, [r7, #24]
 8014de6:	f003 0304 	and.w	r3, r3, #4
 8014dea:	2b00      	cmp	r3, #0
 8014dec:	d10a      	bne.n	8014e04 <HAL_ADC_IRQHandler+0x88>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8014dee:	69fb      	ldr	r3, [r7, #28]
 8014df0:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8014df4:	2b00      	cmp	r3, #0
 8014df6:	f000 8083 	beq.w	8014f00 <HAL_ADC_IRQHandler+0x184>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8014dfa:	69bb      	ldr	r3, [r7, #24]
 8014dfc:	f003 0308 	and.w	r3, r3, #8
 8014e00:	2b00      	cmp	r3, #0
 8014e02:	d07d      	beq.n	8014f00 <HAL_ADC_IRQHandler+0x184>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8014e04:	687b      	ldr	r3, [r7, #4]
 8014e06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8014e08:	f003 0310 	and.w	r3, r3, #16
 8014e0c:	2b00      	cmp	r3, #0
 8014e0e:	d105      	bne.n	8014e1c <HAL_ADC_IRQHandler+0xa0>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8014e10:	687b      	ldr	r3, [r7, #4]
 8014e12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8014e14:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8014e18:	687b      	ldr	r3, [r7, #4]
 8014e1a:	659a      	str	r2, [r3, #88]	; 0x58
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8014e1c:	687b      	ldr	r3, [r7, #4]
 8014e1e:	681b      	ldr	r3, [r3, #0]
 8014e20:	4618      	mov	r0, r3
 8014e22:	f7ff fc3d 	bl	80146a0 <LL_ADC_REG_IsTriggerSourceSWStart>
 8014e26:	4603      	mov	r3, r0
 8014e28:	2b00      	cmp	r3, #0
 8014e2a:	d062      	beq.n	8014ef2 <HAL_ADC_IRQHandler+0x176>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8014e2c:	687b      	ldr	r3, [r7, #4]
 8014e2e:	681b      	ldr	r3, [r3, #0]
 8014e30:	4a5d      	ldr	r2, [pc, #372]	; (8014fa8 <HAL_ADC_IRQHandler+0x22c>)
 8014e32:	4293      	cmp	r3, r2
 8014e34:	d002      	beq.n	8014e3c <HAL_ADC_IRQHandler+0xc0>
 8014e36:	687b      	ldr	r3, [r7, #4]
 8014e38:	681b      	ldr	r3, [r3, #0]
 8014e3a:	e000      	b.n	8014e3e <HAL_ADC_IRQHandler+0xc2>
 8014e3c:	4b5b      	ldr	r3, [pc, #364]	; (8014fac <HAL_ADC_IRQHandler+0x230>)
 8014e3e:	687a      	ldr	r2, [r7, #4]
 8014e40:	6812      	ldr	r2, [r2, #0]
 8014e42:	4293      	cmp	r3, r2
 8014e44:	d008      	beq.n	8014e58 <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8014e46:	697b      	ldr	r3, [r7, #20]
 8014e48:	2b00      	cmp	r3, #0
 8014e4a:	d005      	beq.n	8014e58 <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8014e4c:	697b      	ldr	r3, [r7, #20]
 8014e4e:	2b05      	cmp	r3, #5
 8014e50:	d002      	beq.n	8014e58 <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8014e52:	697b      	ldr	r3, [r7, #20]
 8014e54:	2b09      	cmp	r3, #9
 8014e56:	d104      	bne.n	8014e62 <HAL_ADC_IRQHandler+0xe6>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8014e58:	687b      	ldr	r3, [r7, #4]
 8014e5a:	681b      	ldr	r3, [r3, #0]
 8014e5c:	68db      	ldr	r3, [r3, #12]
 8014e5e:	623b      	str	r3, [r7, #32]
 8014e60:	e00c      	b.n	8014e7c <HAL_ADC_IRQHandler+0x100>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8014e62:	687b      	ldr	r3, [r7, #4]
 8014e64:	681b      	ldr	r3, [r3, #0]
 8014e66:	4a50      	ldr	r2, [pc, #320]	; (8014fa8 <HAL_ADC_IRQHandler+0x22c>)
 8014e68:	4293      	cmp	r3, r2
 8014e6a:	d002      	beq.n	8014e72 <HAL_ADC_IRQHandler+0xf6>
 8014e6c:	687b      	ldr	r3, [r7, #4]
 8014e6e:	681b      	ldr	r3, [r3, #0]
 8014e70:	e000      	b.n	8014e74 <HAL_ADC_IRQHandler+0xf8>
 8014e72:	4b4e      	ldr	r3, [pc, #312]	; (8014fac <HAL_ADC_IRQHandler+0x230>)
 8014e74:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8014e76:	693b      	ldr	r3, [r7, #16]
 8014e78:	68db      	ldr	r3, [r3, #12]
 8014e7a:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8014e7c:	6a3b      	ldr	r3, [r7, #32]
 8014e7e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8014e82:	2b00      	cmp	r3, #0
 8014e84:	d135      	bne.n	8014ef2 <HAL_ADC_IRQHandler+0x176>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8014e86:	687b      	ldr	r3, [r7, #4]
 8014e88:	681b      	ldr	r3, [r3, #0]
 8014e8a:	681b      	ldr	r3, [r3, #0]
 8014e8c:	f003 0308 	and.w	r3, r3, #8
 8014e90:	2b08      	cmp	r3, #8
 8014e92:	d12e      	bne.n	8014ef2 <HAL_ADC_IRQHandler+0x176>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8014e94:	687b      	ldr	r3, [r7, #4]
 8014e96:	681b      	ldr	r3, [r3, #0]
 8014e98:	4618      	mov	r0, r3
 8014e9a:	f7ff fd48 	bl	801492e <LL_ADC_REG_IsConversionOngoing>
 8014e9e:	4603      	mov	r3, r0
 8014ea0:	2b00      	cmp	r3, #0
 8014ea2:	d11a      	bne.n	8014eda <HAL_ADC_IRQHandler+0x15e>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8014ea4:	687b      	ldr	r3, [r7, #4]
 8014ea6:	681b      	ldr	r3, [r3, #0]
 8014ea8:	685a      	ldr	r2, [r3, #4]
 8014eaa:	687b      	ldr	r3, [r7, #4]
 8014eac:	681b      	ldr	r3, [r3, #0]
 8014eae:	f022 020c 	bic.w	r2, r2, #12
 8014eb2:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8014eb4:	687b      	ldr	r3, [r7, #4]
 8014eb6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8014eb8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8014ebc:	687b      	ldr	r3, [r7, #4]
 8014ebe:	659a      	str	r2, [r3, #88]	; 0x58

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8014ec0:	687b      	ldr	r3, [r7, #4]
 8014ec2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8014ec4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8014ec8:	2b00      	cmp	r3, #0
 8014eca:	d112      	bne.n	8014ef2 <HAL_ADC_IRQHandler+0x176>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8014ecc:	687b      	ldr	r3, [r7, #4]
 8014ece:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8014ed0:	f043 0201 	orr.w	r2, r3, #1
 8014ed4:	687b      	ldr	r3, [r7, #4]
 8014ed6:	659a      	str	r2, [r3, #88]	; 0x58
 8014ed8:	e00b      	b.n	8014ef2 <HAL_ADC_IRQHandler+0x176>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8014eda:	687b      	ldr	r3, [r7, #4]
 8014edc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8014ede:	f043 0210 	orr.w	r2, r3, #16
 8014ee2:	687b      	ldr	r3, [r7, #4]
 8014ee4:	659a      	str	r2, [r3, #88]	; 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8014ee6:	687b      	ldr	r3, [r7, #4]
 8014ee8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8014eea:	f043 0201 	orr.w	r2, r3, #1
 8014eee:	687b      	ldr	r3, [r7, #4]
 8014ef0:	65da      	str	r2, [r3, #92]	; 0x5c
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8014ef2:	6878      	ldr	r0, [r7, #4]
 8014ef4:	f7ed fa50 	bl	8002398 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8014ef8:	687b      	ldr	r3, [r7, #4]
 8014efa:	681b      	ldr	r3, [r3, #0]
 8014efc:	220c      	movs	r2, #12
 8014efe:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8014f00:	69fb      	ldr	r3, [r7, #28]
 8014f02:	f003 0320 	and.w	r3, r3, #32
 8014f06:	2b00      	cmp	r3, #0
 8014f08:	d004      	beq.n	8014f14 <HAL_ADC_IRQHandler+0x198>
 8014f0a:	69bb      	ldr	r3, [r7, #24]
 8014f0c:	f003 0320 	and.w	r3, r3, #32
 8014f10:	2b00      	cmp	r3, #0
 8014f12:	d10b      	bne.n	8014f2c <HAL_ADC_IRQHandler+0x1b0>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8014f14:	69fb      	ldr	r3, [r7, #28]
 8014f16:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8014f1a:	2b00      	cmp	r3, #0
 8014f1c:	f000 809f 	beq.w	801505e <HAL_ADC_IRQHandler+0x2e2>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8014f20:	69bb      	ldr	r3, [r7, #24]
 8014f22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8014f26:	2b00      	cmp	r3, #0
 8014f28:	f000 8099 	beq.w	801505e <HAL_ADC_IRQHandler+0x2e2>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8014f2c:	687b      	ldr	r3, [r7, #4]
 8014f2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8014f30:	f003 0310 	and.w	r3, r3, #16
 8014f34:	2b00      	cmp	r3, #0
 8014f36:	d105      	bne.n	8014f44 <HAL_ADC_IRQHandler+0x1c8>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8014f38:	687b      	ldr	r3, [r7, #4]
 8014f3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8014f3c:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8014f40:	687b      	ldr	r3, [r7, #4]
 8014f42:	659a      	str	r2, [r3, #88]	; 0x58
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8014f44:	687b      	ldr	r3, [r7, #4]
 8014f46:	681b      	ldr	r3, [r3, #0]
 8014f48:	4618      	mov	r0, r3
 8014f4a:	f7ff fbe8 	bl	801471e <LL_ADC_INJ_IsTriggerSourceSWStart>
 8014f4e:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8014f50:	687b      	ldr	r3, [r7, #4]
 8014f52:	681b      	ldr	r3, [r3, #0]
 8014f54:	4618      	mov	r0, r3
 8014f56:	f7ff fba3 	bl	80146a0 <LL_ADC_REG_IsTriggerSourceSWStart>
 8014f5a:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8014f5c:	687b      	ldr	r3, [r7, #4]
 8014f5e:	681b      	ldr	r3, [r3, #0]
 8014f60:	4a11      	ldr	r2, [pc, #68]	; (8014fa8 <HAL_ADC_IRQHandler+0x22c>)
 8014f62:	4293      	cmp	r3, r2
 8014f64:	d002      	beq.n	8014f6c <HAL_ADC_IRQHandler+0x1f0>
 8014f66:	687b      	ldr	r3, [r7, #4]
 8014f68:	681b      	ldr	r3, [r3, #0]
 8014f6a:	e000      	b.n	8014f6e <HAL_ADC_IRQHandler+0x1f2>
 8014f6c:	4b0f      	ldr	r3, [pc, #60]	; (8014fac <HAL_ADC_IRQHandler+0x230>)
 8014f6e:	687a      	ldr	r2, [r7, #4]
 8014f70:	6812      	ldr	r2, [r2, #0]
 8014f72:	4293      	cmp	r3, r2
 8014f74:	d008      	beq.n	8014f88 <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8014f76:	697b      	ldr	r3, [r7, #20]
 8014f78:	2b00      	cmp	r3, #0
 8014f7a:	d005      	beq.n	8014f88 <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8014f7c:	697b      	ldr	r3, [r7, #20]
 8014f7e:	2b06      	cmp	r3, #6
 8014f80:	d002      	beq.n	8014f88 <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8014f82:	697b      	ldr	r3, [r7, #20]
 8014f84:	2b07      	cmp	r3, #7
 8014f86:	d104      	bne.n	8014f92 <HAL_ADC_IRQHandler+0x216>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8014f88:	687b      	ldr	r3, [r7, #4]
 8014f8a:	681b      	ldr	r3, [r3, #0]
 8014f8c:	68db      	ldr	r3, [r3, #12]
 8014f8e:	623b      	str	r3, [r7, #32]
 8014f90:	e013      	b.n	8014fba <HAL_ADC_IRQHandler+0x23e>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8014f92:	687b      	ldr	r3, [r7, #4]
 8014f94:	681b      	ldr	r3, [r3, #0]
 8014f96:	4a04      	ldr	r2, [pc, #16]	; (8014fa8 <HAL_ADC_IRQHandler+0x22c>)
 8014f98:	4293      	cmp	r3, r2
 8014f9a:	d009      	beq.n	8014fb0 <HAL_ADC_IRQHandler+0x234>
 8014f9c:	687b      	ldr	r3, [r7, #4]
 8014f9e:	681b      	ldr	r3, [r3, #0]
 8014fa0:	e007      	b.n	8014fb2 <HAL_ADC_IRQHandler+0x236>
 8014fa2:	bf00      	nop
 8014fa4:	42028300 	.word	0x42028300
 8014fa8:	42028100 	.word	0x42028100
 8014fac:	42028000 	.word	0x42028000
 8014fb0:	4b7d      	ldr	r3, [pc, #500]	; (80151a8 <HAL_ADC_IRQHandler+0x42c>)
 8014fb2:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8014fb4:	693b      	ldr	r3, [r7, #16]
 8014fb6:	68db      	ldr	r3, [r3, #12]
 8014fb8:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8014fba:	68fb      	ldr	r3, [r7, #12]
 8014fbc:	2b00      	cmp	r3, #0
 8014fbe:	d047      	beq.n	8015050 <HAL_ADC_IRQHandler+0x2d4>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8014fc0:	6a3b      	ldr	r3, [r7, #32]
 8014fc2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8014fc6:	2b00      	cmp	r3, #0
 8014fc8:	d007      	beq.n	8014fda <HAL_ADC_IRQHandler+0x25e>
 8014fca:	68bb      	ldr	r3, [r7, #8]
 8014fcc:	2b00      	cmp	r3, #0
 8014fce:	d03f      	beq.n	8015050 <HAL_ADC_IRQHandler+0x2d4>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8014fd0:	6a3b      	ldr	r3, [r7, #32]
 8014fd2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8014fd6:	2b00      	cmp	r3, #0
 8014fd8:	d13a      	bne.n	8015050 <HAL_ADC_IRQHandler+0x2d4>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8014fda:	687b      	ldr	r3, [r7, #4]
 8014fdc:	681b      	ldr	r3, [r3, #0]
 8014fde:	681b      	ldr	r3, [r3, #0]
 8014fe0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8014fe4:	2b40      	cmp	r3, #64	; 0x40
 8014fe6:	d133      	bne.n	8015050 <HAL_ADC_IRQHandler+0x2d4>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8014fe8:	6a3b      	ldr	r3, [r7, #32]
 8014fea:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8014fee:	2b00      	cmp	r3, #0
 8014ff0:	d12e      	bne.n	8015050 <HAL_ADC_IRQHandler+0x2d4>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8014ff2:	687b      	ldr	r3, [r7, #4]
 8014ff4:	681b      	ldr	r3, [r3, #0]
 8014ff6:	4618      	mov	r0, r3
 8014ff8:	f7ff fcac 	bl	8014954 <LL_ADC_INJ_IsConversionOngoing>
 8014ffc:	4603      	mov	r3, r0
 8014ffe:	2b00      	cmp	r3, #0
 8015000:	d11a      	bne.n	8015038 <HAL_ADC_IRQHandler+0x2bc>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8015002:	687b      	ldr	r3, [r7, #4]
 8015004:	681b      	ldr	r3, [r3, #0]
 8015006:	685a      	ldr	r2, [r3, #4]
 8015008:	687b      	ldr	r3, [r7, #4]
 801500a:	681b      	ldr	r3, [r3, #0]
 801500c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8015010:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8015012:	687b      	ldr	r3, [r7, #4]
 8015014:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8015016:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 801501a:	687b      	ldr	r3, [r7, #4]
 801501c:	659a      	str	r2, [r3, #88]	; 0x58

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 801501e:	687b      	ldr	r3, [r7, #4]
 8015020:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8015022:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8015026:	2b00      	cmp	r3, #0
 8015028:	d112      	bne.n	8015050 <HAL_ADC_IRQHandler+0x2d4>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 801502a:	687b      	ldr	r3, [r7, #4]
 801502c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801502e:	f043 0201 	orr.w	r2, r3, #1
 8015032:	687b      	ldr	r3, [r7, #4]
 8015034:	659a      	str	r2, [r3, #88]	; 0x58
 8015036:	e00b      	b.n	8015050 <HAL_ADC_IRQHandler+0x2d4>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8015038:	687b      	ldr	r3, [r7, #4]
 801503a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801503c:	f043 0210 	orr.w	r2, r3, #16
 8015040:	687b      	ldr	r3, [r7, #4]
 8015042:	659a      	str	r2, [r3, #88]	; 0x58

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8015044:	687b      	ldr	r3, [r7, #4]
 8015046:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8015048:	f043 0201 	orr.w	r2, r3, #1
 801504c:	687b      	ldr	r3, [r7, #4]
 801504e:	65da      	str	r2, [r3, #92]	; 0x5c
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8015050:	6878      	ldr	r0, [r7, #4]
 8015052:	f000 fdf5 	bl	8015c40 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8015056:	687b      	ldr	r3, [r7, #4]
 8015058:	681b      	ldr	r3, [r3, #0]
 801505a:	2260      	movs	r2, #96	; 0x60
 801505c:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 801505e:	69fb      	ldr	r3, [r7, #28]
 8015060:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8015064:	2b00      	cmp	r3, #0
 8015066:	d011      	beq.n	801508c <HAL_ADC_IRQHandler+0x310>
 8015068:	69bb      	ldr	r3, [r7, #24]
 801506a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801506e:	2b00      	cmp	r3, #0
 8015070:	d00c      	beq.n	801508c <HAL_ADC_IRQHandler+0x310>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8015072:	687b      	ldr	r3, [r7, #4]
 8015074:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8015076:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 801507a:	687b      	ldr	r3, [r7, #4]
 801507c:	659a      	str	r2, [r3, #88]	; 0x58

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 801507e:	6878      	ldr	r0, [r7, #4]
 8015080:	f000 f8a0 	bl	80151c4 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8015084:	687b      	ldr	r3, [r7, #4]
 8015086:	681b      	ldr	r3, [r3, #0]
 8015088:	2280      	movs	r2, #128	; 0x80
 801508a:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 801508c:	69fb      	ldr	r3, [r7, #28]
 801508e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8015092:	2b00      	cmp	r3, #0
 8015094:	d012      	beq.n	80150bc <HAL_ADC_IRQHandler+0x340>
 8015096:	69bb      	ldr	r3, [r7, #24]
 8015098:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801509c:	2b00      	cmp	r3, #0
 801509e:	d00d      	beq.n	80150bc <HAL_ADC_IRQHandler+0x340>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 80150a0:	687b      	ldr	r3, [r7, #4]
 80150a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80150a4:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80150a8:	687b      	ldr	r3, [r7, #4]
 80150aa:	659a      	str	r2, [r3, #88]	; 0x58

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 80150ac:	6878      	ldr	r0, [r7, #4]
 80150ae:	f000 fddb 	bl	8015c68 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 80150b2:	687b      	ldr	r3, [r7, #4]
 80150b4:	681b      	ldr	r3, [r3, #0]
 80150b6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80150ba:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 80150bc:	69fb      	ldr	r3, [r7, #28]
 80150be:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80150c2:	2b00      	cmp	r3, #0
 80150c4:	d012      	beq.n	80150ec <HAL_ADC_IRQHandler+0x370>
 80150c6:	69bb      	ldr	r3, [r7, #24]
 80150c8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80150cc:	2b00      	cmp	r3, #0
 80150ce:	d00d      	beq.n	80150ec <HAL_ADC_IRQHandler+0x370>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 80150d0:	687b      	ldr	r3, [r7, #4]
 80150d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80150d4:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80150d8:	687b      	ldr	r3, [r7, #4]
 80150da:	659a      	str	r2, [r3, #88]	; 0x58

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 80150dc:	6878      	ldr	r0, [r7, #4]
 80150de:	f000 fdcd 	bl	8015c7c <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 80150e2:	687b      	ldr	r3, [r7, #4]
 80150e4:	681b      	ldr	r3, [r3, #0]
 80150e6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80150ea:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 80150ec:	69fb      	ldr	r3, [r7, #28]
 80150ee:	f003 0310 	and.w	r3, r3, #16
 80150f2:	2b00      	cmp	r3, #0
 80150f4:	d036      	beq.n	8015164 <HAL_ADC_IRQHandler+0x3e8>
 80150f6:	69bb      	ldr	r3, [r7, #24]
 80150f8:	f003 0310 	and.w	r3, r3, #16
 80150fc:	2b00      	cmp	r3, #0
 80150fe:	d031      	beq.n	8015164 <HAL_ADC_IRQHandler+0x3e8>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8015100:	687b      	ldr	r3, [r7, #4]
 8015102:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8015104:	2b00      	cmp	r3, #0
 8015106:	d102      	bne.n	801510e <HAL_ADC_IRQHandler+0x392>
    {
      overrun_error = 1UL;
 8015108:	2301      	movs	r3, #1
 801510a:	627b      	str	r3, [r7, #36]	; 0x24
 801510c:	e014      	b.n	8015138 <HAL_ADC_IRQHandler+0x3bc>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 801510e:	697b      	ldr	r3, [r7, #20]
 8015110:	2b00      	cmp	r3, #0
 8015112:	d008      	beq.n	8015126 <HAL_ADC_IRQHandler+0x3aa>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8015114:	4825      	ldr	r0, [pc, #148]	; (80151ac <HAL_ADC_IRQHandler+0x430>)
 8015116:	f7ff fb73 	bl	8014800 <LL_ADC_GetMultiDMATransfer>
 801511a:	4603      	mov	r3, r0
 801511c:	2b00      	cmp	r3, #0
 801511e:	d00b      	beq.n	8015138 <HAL_ADC_IRQHandler+0x3bc>
        {
          overrun_error = 1UL;
 8015120:	2301      	movs	r3, #1
 8015122:	627b      	str	r3, [r7, #36]	; 0x24
 8015124:	e008      	b.n	8015138 <HAL_ADC_IRQHandler+0x3bc>
      }
      else
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8015126:	687b      	ldr	r3, [r7, #4]
 8015128:	681b      	ldr	r3, [r3, #0]
 801512a:	68db      	ldr	r3, [r3, #12]
 801512c:	f003 0301 	and.w	r3, r3, #1
 8015130:	2b00      	cmp	r3, #0
 8015132:	d001      	beq.n	8015138 <HAL_ADC_IRQHandler+0x3bc>
        {
          overrun_error = 1UL;
 8015134:	2301      	movs	r3, #1
 8015136:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8015138:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801513a:	2b01      	cmp	r3, #1
 801513c:	d10e      	bne.n	801515c <HAL_ADC_IRQHandler+0x3e0>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 801513e:	687b      	ldr	r3, [r7, #4]
 8015140:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8015142:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8015146:	687b      	ldr	r3, [r7, #4]
 8015148:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 801514a:	687b      	ldr	r3, [r7, #4]
 801514c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801514e:	f043 0202 	orr.w	r2, r3, #2
 8015152:	687b      	ldr	r3, [r7, #4]
 8015154:	65da      	str	r2, [r3, #92]	; 0x5c
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8015156:	6878      	ldr	r0, [r7, #4]
 8015158:	f000 f83e 	bl	80151d8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 801515c:	687b      	ldr	r3, [r7, #4]
 801515e:	681b      	ldr	r3, [r3, #0]
 8015160:	2210      	movs	r2, #16
 8015162:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8015164:	69fb      	ldr	r3, [r7, #28]
 8015166:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801516a:	2b00      	cmp	r3, #0
 801516c:	d018      	beq.n	80151a0 <HAL_ADC_IRQHandler+0x424>
 801516e:	69bb      	ldr	r3, [r7, #24]
 8015170:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8015174:	2b00      	cmp	r3, #0
 8015176:	d013      	beq.n	80151a0 <HAL_ADC_IRQHandler+0x424>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8015178:	687b      	ldr	r3, [r7, #4]
 801517a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801517c:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8015180:	687b      	ldr	r3, [r7, #4]
 8015182:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8015184:	687b      	ldr	r3, [r7, #4]
 8015186:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8015188:	f043 0208 	orr.w	r2, r3, #8
 801518c:	687b      	ldr	r3, [r7, #4]
 801518e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8015190:	687b      	ldr	r3, [r7, #4]
 8015192:	681b      	ldr	r3, [r3, #0]
 8015194:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8015198:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 801519a:	6878      	ldr	r0, [r7, #4]
 801519c:	f000 fd5a 	bl	8015c54 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 80151a0:	bf00      	nop
 80151a2:	3728      	adds	r7, #40	; 0x28
 80151a4:	46bd      	mov	sp, r7
 80151a6:	bd80      	pop	{r7, pc}
 80151a8:	42028000 	.word	0x42028000
 80151ac:	42028300 	.word	0x42028300

080151b0 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80151b0:	b480      	push	{r7}
 80151b2:	b083      	sub	sp, #12
 80151b4:	af00      	add	r7, sp, #0
 80151b6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80151b8:	bf00      	nop
 80151ba:	370c      	adds	r7, #12
 80151bc:	46bd      	mov	sp, r7
 80151be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80151c2:	4770      	bx	lr

080151c4 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 80151c4:	b480      	push	{r7}
 80151c6:	b083      	sub	sp, #12
 80151c8:	af00      	add	r7, sp, #0
 80151ca:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 80151cc:	bf00      	nop
 80151ce:	370c      	adds	r7, #12
 80151d0:	46bd      	mov	sp, r7
 80151d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80151d6:	4770      	bx	lr

080151d8 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80151d8:	b480      	push	{r7}
 80151da:	b083      	sub	sp, #12
 80151dc:	af00      	add	r7, sp, #0
 80151de:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80151e0:	bf00      	nop
 80151e2:	370c      	adds	r7, #12
 80151e4:	46bd      	mov	sp, r7
 80151e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80151ea:	4770      	bx	lr

080151ec <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 80151ec:	b590      	push	{r4, r7, lr}
 80151ee:	b0b7      	sub	sp, #220	; 0xdc
 80151f0:	af00      	add	r7, sp, #0
 80151f2:	6078      	str	r0, [r7, #4]
 80151f4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80151f6:	2300      	movs	r3, #0
 80151f8:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80151fc:	2300      	movs	r3, #0
 80151fe:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8015200:	687b      	ldr	r3, [r7, #4]
 8015202:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8015206:	2b01      	cmp	r3, #1
 8015208:	d101      	bne.n	801520e <HAL_ADC_ConfigChannel+0x22>
 801520a:	2302      	movs	r3, #2
 801520c:	e3c1      	b.n	8015992 <HAL_ADC_ConfigChannel+0x7a6>
 801520e:	687b      	ldr	r3, [r7, #4]
 8015210:	2201      	movs	r2, #1
 8015212:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8015216:	687b      	ldr	r3, [r7, #4]
 8015218:	681b      	ldr	r3, [r3, #0]
 801521a:	4618      	mov	r0, r3
 801521c:	f7ff fb87 	bl	801492e <LL_ADC_REG_IsConversionOngoing>
 8015220:	4603      	mov	r3, r0
 8015222:	2b00      	cmp	r3, #0
 8015224:	f040 83a6 	bne.w	8015974 <HAL_ADC_ConfigChannel+0x788>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8015228:	687b      	ldr	r3, [r7, #4]
 801522a:	6818      	ldr	r0, [r3, #0]
 801522c:	683b      	ldr	r3, [r7, #0]
 801522e:	6859      	ldr	r1, [r3, #4]
 8015230:	683b      	ldr	r3, [r7, #0]
 8015232:	681b      	ldr	r3, [r3, #0]
 8015234:	461a      	mov	r2, r3
 8015236:	f7ff fa46 	bl	80146c6 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 801523a:	687b      	ldr	r3, [r7, #4]
 801523c:	681b      	ldr	r3, [r3, #0]
 801523e:	4618      	mov	r0, r3
 8015240:	f7ff fb75 	bl	801492e <LL_ADC_REG_IsConversionOngoing>
 8015244:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8015248:	687b      	ldr	r3, [r7, #4]
 801524a:	681b      	ldr	r3, [r3, #0]
 801524c:	4618      	mov	r0, r3
 801524e:	f7ff fb81 	bl	8014954 <LL_ADC_INJ_IsConversionOngoing>
 8015252:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8015256:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 801525a:	2b00      	cmp	r3, #0
 801525c:	f040 81c1 	bne.w	80155e2 <HAL_ADC_ConfigChannel+0x3f6>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8015260:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8015264:	2b00      	cmp	r3, #0
 8015266:	f040 81bc 	bne.w	80155e2 <HAL_ADC_ConfigChannel+0x3f6>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 801526a:	683b      	ldr	r3, [r7, #0]
 801526c:	689b      	ldr	r3, [r3, #8]
 801526e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8015272:	d10f      	bne.n	8015294 <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8015274:	687b      	ldr	r3, [r7, #4]
 8015276:	6818      	ldr	r0, [r3, #0]
 8015278:	683b      	ldr	r3, [r7, #0]
 801527a:	681b      	ldr	r3, [r3, #0]
 801527c:	2200      	movs	r2, #0
 801527e:	4619      	mov	r1, r3
 8015280:	f7ff fa60 	bl	8014744 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8015284:	687b      	ldr	r3, [r7, #4]
 8015286:	681b      	ldr	r3, [r3, #0]
 8015288:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 801528c:	4618      	mov	r0, r3
 801528e:	f7ff f9f4 	bl	801467a <LL_ADC_SetSamplingTimeCommonConfig>
 8015292:	e00e      	b.n	80152b2 <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8015294:	687b      	ldr	r3, [r7, #4]
 8015296:	6818      	ldr	r0, [r3, #0]
 8015298:	683b      	ldr	r3, [r7, #0]
 801529a:	6819      	ldr	r1, [r3, #0]
 801529c:	683b      	ldr	r3, [r7, #0]
 801529e:	689b      	ldr	r3, [r3, #8]
 80152a0:	461a      	mov	r2, r3
 80152a2:	f7ff fa4f 	bl	8014744 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 80152a6:	687b      	ldr	r3, [r7, #4]
 80152a8:	681b      	ldr	r3, [r3, #0]
 80152aa:	2100      	movs	r1, #0
 80152ac:	4618      	mov	r0, r3
 80152ae:	f7ff f9e4 	bl	801467a <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 80152b2:	683b      	ldr	r3, [r7, #0]
 80152b4:	695a      	ldr	r2, [r3, #20]
 80152b6:	687b      	ldr	r3, [r7, #4]
 80152b8:	681b      	ldr	r3, [r3, #0]
 80152ba:	68db      	ldr	r3, [r3, #12]
 80152bc:	08db      	lsrs	r3, r3, #3
 80152be:	f003 0303 	and.w	r3, r3, #3
 80152c2:	005b      	lsls	r3, r3, #1
 80152c4:	fa02 f303 	lsl.w	r3, r2, r3
 80152c8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 80152cc:	683b      	ldr	r3, [r7, #0]
 80152ce:	691b      	ldr	r3, [r3, #16]
 80152d0:	2b04      	cmp	r3, #4
 80152d2:	d00a      	beq.n	80152ea <HAL_ADC_ConfigChannel+0xfe>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 80152d4:	687b      	ldr	r3, [r7, #4]
 80152d6:	6818      	ldr	r0, [r3, #0]
 80152d8:	683b      	ldr	r3, [r7, #0]
 80152da:	6919      	ldr	r1, [r3, #16]
 80152dc:	683b      	ldr	r3, [r7, #0]
 80152de:	681a      	ldr	r2, [r3, #0]
 80152e0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80152e4:	f7ff f974 	bl	80145d0 <LL_ADC_SetOffset>
 80152e8:	e17b      	b.n	80155e2 <HAL_ADC_ConfigChannel+0x3f6>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80152ea:	687b      	ldr	r3, [r7, #4]
 80152ec:	681b      	ldr	r3, [r3, #0]
 80152ee:	2100      	movs	r1, #0
 80152f0:	4618      	mov	r0, r3
 80152f2:	f7ff f991 	bl	8014618 <LL_ADC_GetOffsetChannel>
 80152f6:	4603      	mov	r3, r0
 80152f8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80152fc:	2b00      	cmp	r3, #0
 80152fe:	d10a      	bne.n	8015316 <HAL_ADC_ConfigChannel+0x12a>
 8015300:	687b      	ldr	r3, [r7, #4]
 8015302:	681b      	ldr	r3, [r3, #0]
 8015304:	2100      	movs	r1, #0
 8015306:	4618      	mov	r0, r3
 8015308:	f7ff f986 	bl	8014618 <LL_ADC_GetOffsetChannel>
 801530c:	4603      	mov	r3, r0
 801530e:	0e9b      	lsrs	r3, r3, #26
 8015310:	f003 021f 	and.w	r2, r3, #31
 8015314:	e01e      	b.n	8015354 <HAL_ADC_ConfigChannel+0x168>
 8015316:	687b      	ldr	r3, [r7, #4]
 8015318:	681b      	ldr	r3, [r3, #0]
 801531a:	2100      	movs	r1, #0
 801531c:	4618      	mov	r0, r3
 801531e:	f7ff f97b 	bl	8014618 <LL_ADC_GetOffsetChannel>
 8015322:	4603      	mov	r3, r0
 8015324:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8015328:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 801532c:	fa93 f3a3 	rbit	r3, r3
 8015330:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8015334:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8015338:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 801533c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8015340:	2b00      	cmp	r3, #0
 8015342:	d101      	bne.n	8015348 <HAL_ADC_ConfigChannel+0x15c>
  {
    return 32U;
 8015344:	2320      	movs	r3, #32
 8015346:	e004      	b.n	8015352 <HAL_ADC_ConfigChannel+0x166>
  }
  return __builtin_clz(value);
 8015348:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 801534c:	fab3 f383 	clz	r3, r3
 8015350:	b2db      	uxtb	r3, r3
 8015352:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8015354:	683b      	ldr	r3, [r7, #0]
 8015356:	681b      	ldr	r3, [r3, #0]
 8015358:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801535c:	2b00      	cmp	r3, #0
 801535e:	d105      	bne.n	801536c <HAL_ADC_ConfigChannel+0x180>
 8015360:	683b      	ldr	r3, [r7, #0]
 8015362:	681b      	ldr	r3, [r3, #0]
 8015364:	0e9b      	lsrs	r3, r3, #26
 8015366:	f003 031f 	and.w	r3, r3, #31
 801536a:	e018      	b.n	801539e <HAL_ADC_ConfigChannel+0x1b2>
 801536c:	683b      	ldr	r3, [r7, #0]
 801536e:	681b      	ldr	r3, [r3, #0]
 8015370:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8015374:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8015378:	fa93 f3a3 	rbit	r3, r3
 801537c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8015380:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8015384:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8015388:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 801538c:	2b00      	cmp	r3, #0
 801538e:	d101      	bne.n	8015394 <HAL_ADC_ConfigChannel+0x1a8>
    return 32U;
 8015390:	2320      	movs	r3, #32
 8015392:	e004      	b.n	801539e <HAL_ADC_ConfigChannel+0x1b2>
  return __builtin_clz(value);
 8015394:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8015398:	fab3 f383 	clz	r3, r3
 801539c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 801539e:	429a      	cmp	r2, r3
 80153a0:	d106      	bne.n	80153b0 <HAL_ADC_ConfigChannel+0x1c4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80153a2:	687b      	ldr	r3, [r7, #4]
 80153a4:	681b      	ldr	r3, [r3, #0]
 80153a6:	2200      	movs	r2, #0
 80153a8:	2100      	movs	r1, #0
 80153aa:	4618      	mov	r0, r3
 80153ac:	f7ff f94a 	bl	8014644 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80153b0:	687b      	ldr	r3, [r7, #4]
 80153b2:	681b      	ldr	r3, [r3, #0]
 80153b4:	2101      	movs	r1, #1
 80153b6:	4618      	mov	r0, r3
 80153b8:	f7ff f92e 	bl	8014618 <LL_ADC_GetOffsetChannel>
 80153bc:	4603      	mov	r3, r0
 80153be:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80153c2:	2b00      	cmp	r3, #0
 80153c4:	d10a      	bne.n	80153dc <HAL_ADC_ConfigChannel+0x1f0>
 80153c6:	687b      	ldr	r3, [r7, #4]
 80153c8:	681b      	ldr	r3, [r3, #0]
 80153ca:	2101      	movs	r1, #1
 80153cc:	4618      	mov	r0, r3
 80153ce:	f7ff f923 	bl	8014618 <LL_ADC_GetOffsetChannel>
 80153d2:	4603      	mov	r3, r0
 80153d4:	0e9b      	lsrs	r3, r3, #26
 80153d6:	f003 021f 	and.w	r2, r3, #31
 80153da:	e01e      	b.n	801541a <HAL_ADC_ConfigChannel+0x22e>
 80153dc:	687b      	ldr	r3, [r7, #4]
 80153de:	681b      	ldr	r3, [r3, #0]
 80153e0:	2101      	movs	r1, #1
 80153e2:	4618      	mov	r0, r3
 80153e4:	f7ff f918 	bl	8014618 <LL_ADC_GetOffsetChannel>
 80153e8:	4603      	mov	r3, r0
 80153ea:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80153ee:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80153f2:	fa93 f3a3 	rbit	r3, r3
 80153f6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 80153fa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80153fe:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8015402:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8015406:	2b00      	cmp	r3, #0
 8015408:	d101      	bne.n	801540e <HAL_ADC_ConfigChannel+0x222>
    return 32U;
 801540a:	2320      	movs	r3, #32
 801540c:	e004      	b.n	8015418 <HAL_ADC_ConfigChannel+0x22c>
  return __builtin_clz(value);
 801540e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8015412:	fab3 f383 	clz	r3, r3
 8015416:	b2db      	uxtb	r3, r3
 8015418:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 801541a:	683b      	ldr	r3, [r7, #0]
 801541c:	681b      	ldr	r3, [r3, #0]
 801541e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8015422:	2b00      	cmp	r3, #0
 8015424:	d105      	bne.n	8015432 <HAL_ADC_ConfigChannel+0x246>
 8015426:	683b      	ldr	r3, [r7, #0]
 8015428:	681b      	ldr	r3, [r3, #0]
 801542a:	0e9b      	lsrs	r3, r3, #26
 801542c:	f003 031f 	and.w	r3, r3, #31
 8015430:	e018      	b.n	8015464 <HAL_ADC_ConfigChannel+0x278>
 8015432:	683b      	ldr	r3, [r7, #0]
 8015434:	681b      	ldr	r3, [r3, #0]
 8015436:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 801543a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 801543e:	fa93 f3a3 	rbit	r3, r3
 8015442:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8015446:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 801544a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 801544e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8015452:	2b00      	cmp	r3, #0
 8015454:	d101      	bne.n	801545a <HAL_ADC_ConfigChannel+0x26e>
    return 32U;
 8015456:	2320      	movs	r3, #32
 8015458:	e004      	b.n	8015464 <HAL_ADC_ConfigChannel+0x278>
  return __builtin_clz(value);
 801545a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801545e:	fab3 f383 	clz	r3, r3
 8015462:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8015464:	429a      	cmp	r2, r3
 8015466:	d106      	bne.n	8015476 <HAL_ADC_ConfigChannel+0x28a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8015468:	687b      	ldr	r3, [r7, #4]
 801546a:	681b      	ldr	r3, [r3, #0]
 801546c:	2200      	movs	r2, #0
 801546e:	2101      	movs	r1, #1
 8015470:	4618      	mov	r0, r3
 8015472:	f7ff f8e7 	bl	8014644 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8015476:	687b      	ldr	r3, [r7, #4]
 8015478:	681b      	ldr	r3, [r3, #0]
 801547a:	2102      	movs	r1, #2
 801547c:	4618      	mov	r0, r3
 801547e:	f7ff f8cb 	bl	8014618 <LL_ADC_GetOffsetChannel>
 8015482:	4603      	mov	r3, r0
 8015484:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8015488:	2b00      	cmp	r3, #0
 801548a:	d10a      	bne.n	80154a2 <HAL_ADC_ConfigChannel+0x2b6>
 801548c:	687b      	ldr	r3, [r7, #4]
 801548e:	681b      	ldr	r3, [r3, #0]
 8015490:	2102      	movs	r1, #2
 8015492:	4618      	mov	r0, r3
 8015494:	f7ff f8c0 	bl	8014618 <LL_ADC_GetOffsetChannel>
 8015498:	4603      	mov	r3, r0
 801549a:	0e9b      	lsrs	r3, r3, #26
 801549c:	f003 021f 	and.w	r2, r3, #31
 80154a0:	e01e      	b.n	80154e0 <HAL_ADC_ConfigChannel+0x2f4>
 80154a2:	687b      	ldr	r3, [r7, #4]
 80154a4:	681b      	ldr	r3, [r3, #0]
 80154a6:	2102      	movs	r1, #2
 80154a8:	4618      	mov	r0, r3
 80154aa:	f7ff f8b5 	bl	8014618 <LL_ADC_GetOffsetChannel>
 80154ae:	4603      	mov	r3, r0
 80154b0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80154b4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80154b8:	fa93 f3a3 	rbit	r3, r3
 80154bc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 80154c0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80154c4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 80154c8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80154cc:	2b00      	cmp	r3, #0
 80154ce:	d101      	bne.n	80154d4 <HAL_ADC_ConfigChannel+0x2e8>
    return 32U;
 80154d0:	2320      	movs	r3, #32
 80154d2:	e004      	b.n	80154de <HAL_ADC_ConfigChannel+0x2f2>
  return __builtin_clz(value);
 80154d4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80154d8:	fab3 f383 	clz	r3, r3
 80154dc:	b2db      	uxtb	r3, r3
 80154de:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80154e0:	683b      	ldr	r3, [r7, #0]
 80154e2:	681b      	ldr	r3, [r3, #0]
 80154e4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80154e8:	2b00      	cmp	r3, #0
 80154ea:	d105      	bne.n	80154f8 <HAL_ADC_ConfigChannel+0x30c>
 80154ec:	683b      	ldr	r3, [r7, #0]
 80154ee:	681b      	ldr	r3, [r3, #0]
 80154f0:	0e9b      	lsrs	r3, r3, #26
 80154f2:	f003 031f 	and.w	r3, r3, #31
 80154f6:	e016      	b.n	8015526 <HAL_ADC_ConfigChannel+0x33a>
 80154f8:	683b      	ldr	r3, [r7, #0]
 80154fa:	681b      	ldr	r3, [r3, #0]
 80154fc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8015500:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8015504:	fa93 f3a3 	rbit	r3, r3
 8015508:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 801550a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801550c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8015510:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8015514:	2b00      	cmp	r3, #0
 8015516:	d101      	bne.n	801551c <HAL_ADC_ConfigChannel+0x330>
    return 32U;
 8015518:	2320      	movs	r3, #32
 801551a:	e004      	b.n	8015526 <HAL_ADC_ConfigChannel+0x33a>
  return __builtin_clz(value);
 801551c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8015520:	fab3 f383 	clz	r3, r3
 8015524:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8015526:	429a      	cmp	r2, r3
 8015528:	d106      	bne.n	8015538 <HAL_ADC_ConfigChannel+0x34c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 801552a:	687b      	ldr	r3, [r7, #4]
 801552c:	681b      	ldr	r3, [r3, #0]
 801552e:	2200      	movs	r2, #0
 8015530:	2102      	movs	r1, #2
 8015532:	4618      	mov	r0, r3
 8015534:	f7ff f886 	bl	8014644 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8015538:	687b      	ldr	r3, [r7, #4]
 801553a:	681b      	ldr	r3, [r3, #0]
 801553c:	2103      	movs	r1, #3
 801553e:	4618      	mov	r0, r3
 8015540:	f7ff f86a 	bl	8014618 <LL_ADC_GetOffsetChannel>
 8015544:	4603      	mov	r3, r0
 8015546:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801554a:	2b00      	cmp	r3, #0
 801554c:	d10a      	bne.n	8015564 <HAL_ADC_ConfigChannel+0x378>
 801554e:	687b      	ldr	r3, [r7, #4]
 8015550:	681b      	ldr	r3, [r3, #0]
 8015552:	2103      	movs	r1, #3
 8015554:	4618      	mov	r0, r3
 8015556:	f7ff f85f 	bl	8014618 <LL_ADC_GetOffsetChannel>
 801555a:	4603      	mov	r3, r0
 801555c:	0e9b      	lsrs	r3, r3, #26
 801555e:	f003 021f 	and.w	r2, r3, #31
 8015562:	e017      	b.n	8015594 <HAL_ADC_ConfigChannel+0x3a8>
 8015564:	687b      	ldr	r3, [r7, #4]
 8015566:	681b      	ldr	r3, [r3, #0]
 8015568:	2103      	movs	r1, #3
 801556a:	4618      	mov	r0, r3
 801556c:	f7ff f854 	bl	8014618 <LL_ADC_GetOffsetChannel>
 8015570:	4603      	mov	r3, r0
 8015572:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8015574:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8015576:	fa93 f3a3 	rbit	r3, r3
 801557a:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 801557c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801557e:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8015580:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8015582:	2b00      	cmp	r3, #0
 8015584:	d101      	bne.n	801558a <HAL_ADC_ConfigChannel+0x39e>
    return 32U;
 8015586:	2320      	movs	r3, #32
 8015588:	e003      	b.n	8015592 <HAL_ADC_ConfigChannel+0x3a6>
  return __builtin_clz(value);
 801558a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801558c:	fab3 f383 	clz	r3, r3
 8015590:	b2db      	uxtb	r3, r3
 8015592:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8015594:	683b      	ldr	r3, [r7, #0]
 8015596:	681b      	ldr	r3, [r3, #0]
 8015598:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801559c:	2b00      	cmp	r3, #0
 801559e:	d105      	bne.n	80155ac <HAL_ADC_ConfigChannel+0x3c0>
 80155a0:	683b      	ldr	r3, [r7, #0]
 80155a2:	681b      	ldr	r3, [r3, #0]
 80155a4:	0e9b      	lsrs	r3, r3, #26
 80155a6:	f003 031f 	and.w	r3, r3, #31
 80155aa:	e011      	b.n	80155d0 <HAL_ADC_ConfigChannel+0x3e4>
 80155ac:	683b      	ldr	r3, [r7, #0]
 80155ae:	681b      	ldr	r3, [r3, #0]
 80155b0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80155b2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80155b4:	fa93 f3a3 	rbit	r3, r3
 80155b8:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 80155ba:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80155bc:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 80155be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80155c0:	2b00      	cmp	r3, #0
 80155c2:	d101      	bne.n	80155c8 <HAL_ADC_ConfigChannel+0x3dc>
    return 32U;
 80155c4:	2320      	movs	r3, #32
 80155c6:	e003      	b.n	80155d0 <HAL_ADC_ConfigChannel+0x3e4>
  return __builtin_clz(value);
 80155c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80155ca:	fab3 f383 	clz	r3, r3
 80155ce:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80155d0:	429a      	cmp	r2, r3
 80155d2:	d106      	bne.n	80155e2 <HAL_ADC_ConfigChannel+0x3f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80155d4:	687b      	ldr	r3, [r7, #4]
 80155d6:	681b      	ldr	r3, [r3, #0]
 80155d8:	2200      	movs	r2, #0
 80155da:	2103      	movs	r1, #3
 80155dc:	4618      	mov	r0, r3
 80155de:	f7ff f831 	bl	8014644 <LL_ADC_SetOffsetState>

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80155e2:	687b      	ldr	r3, [r7, #4]
 80155e4:	681b      	ldr	r3, [r3, #0]
 80155e6:	4618      	mov	r0, r3
 80155e8:	f7ff f97a 	bl	80148e0 <LL_ADC_IsEnabled>
 80155ec:	4603      	mov	r3, r0
 80155ee:	2b00      	cmp	r3, #0
 80155f0:	f040 81c9 	bne.w	8015986 <HAL_ADC_ConfigChannel+0x79a>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 80155f4:	687b      	ldr	r3, [r7, #4]
 80155f6:	6818      	ldr	r0, [r3, #0]
 80155f8:	683b      	ldr	r3, [r7, #0]
 80155fa:	6819      	ldr	r1, [r3, #0]
 80155fc:	683b      	ldr	r3, [r7, #0]
 80155fe:	68db      	ldr	r3, [r3, #12]
 8015600:	461a      	mov	r2, r3
 8015602:	f7ff f8cb 	bl	801479c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8015606:	683b      	ldr	r3, [r7, #0]
 8015608:	68db      	ldr	r3, [r3, #12]
 801560a:	4a8f      	ldr	r2, [pc, #572]	; (8015848 <HAL_ADC_ConfigChannel+0x65c>)
 801560c:	4293      	cmp	r3, r2
 801560e:	f040 8131 	bne.w	8015874 <HAL_ADC_ConfigChannel+0x688>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8015612:	687b      	ldr	r3, [r7, #4]
 8015614:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8015616:	683b      	ldr	r3, [r7, #0]
 8015618:	681b      	ldr	r3, [r3, #0]
 801561a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801561e:	2b00      	cmp	r3, #0
 8015620:	d10b      	bne.n	801563a <HAL_ADC_ConfigChannel+0x44e>
 8015622:	683b      	ldr	r3, [r7, #0]
 8015624:	681b      	ldr	r3, [r3, #0]
 8015626:	0e9b      	lsrs	r3, r3, #26
 8015628:	3301      	adds	r3, #1
 801562a:	f003 031f 	and.w	r3, r3, #31
 801562e:	2b09      	cmp	r3, #9
 8015630:	bf94      	ite	ls
 8015632:	2301      	movls	r3, #1
 8015634:	2300      	movhi	r3, #0
 8015636:	b2db      	uxtb	r3, r3
 8015638:	e019      	b.n	801566e <HAL_ADC_ConfigChannel+0x482>
 801563a:	683b      	ldr	r3, [r7, #0]
 801563c:	681b      	ldr	r3, [r3, #0]
 801563e:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8015640:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8015642:	fa93 f3a3 	rbit	r3, r3
 8015646:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8015648:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801564a:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 801564c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801564e:	2b00      	cmp	r3, #0
 8015650:	d101      	bne.n	8015656 <HAL_ADC_ConfigChannel+0x46a>
    return 32U;
 8015652:	2320      	movs	r3, #32
 8015654:	e003      	b.n	801565e <HAL_ADC_ConfigChannel+0x472>
  return __builtin_clz(value);
 8015656:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8015658:	fab3 f383 	clz	r3, r3
 801565c:	b2db      	uxtb	r3, r3
 801565e:	3301      	adds	r3, #1
 8015660:	f003 031f 	and.w	r3, r3, #31
 8015664:	2b09      	cmp	r3, #9
 8015666:	bf94      	ite	ls
 8015668:	2301      	movls	r3, #1
 801566a:	2300      	movhi	r3, #0
 801566c:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 801566e:	2b00      	cmp	r3, #0
 8015670:	d079      	beq.n	8015766 <HAL_ADC_ConfigChannel+0x57a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8015672:	683b      	ldr	r3, [r7, #0]
 8015674:	681b      	ldr	r3, [r3, #0]
 8015676:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801567a:	2b00      	cmp	r3, #0
 801567c:	d107      	bne.n	801568e <HAL_ADC_ConfigChannel+0x4a2>
 801567e:	683b      	ldr	r3, [r7, #0]
 8015680:	681b      	ldr	r3, [r3, #0]
 8015682:	0e9b      	lsrs	r3, r3, #26
 8015684:	3301      	adds	r3, #1
 8015686:	069b      	lsls	r3, r3, #26
 8015688:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 801568c:	e015      	b.n	80156ba <HAL_ADC_ConfigChannel+0x4ce>
 801568e:	683b      	ldr	r3, [r7, #0]
 8015690:	681b      	ldr	r3, [r3, #0]
 8015692:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8015694:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015696:	fa93 f3a3 	rbit	r3, r3
 801569a:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 801569c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801569e:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 80156a0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80156a2:	2b00      	cmp	r3, #0
 80156a4:	d101      	bne.n	80156aa <HAL_ADC_ConfigChannel+0x4be>
    return 32U;
 80156a6:	2320      	movs	r3, #32
 80156a8:	e003      	b.n	80156b2 <HAL_ADC_ConfigChannel+0x4c6>
  return __builtin_clz(value);
 80156aa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80156ac:	fab3 f383 	clz	r3, r3
 80156b0:	b2db      	uxtb	r3, r3
 80156b2:	3301      	adds	r3, #1
 80156b4:	069b      	lsls	r3, r3, #26
 80156b6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80156ba:	683b      	ldr	r3, [r7, #0]
 80156bc:	681b      	ldr	r3, [r3, #0]
 80156be:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80156c2:	2b00      	cmp	r3, #0
 80156c4:	d109      	bne.n	80156da <HAL_ADC_ConfigChannel+0x4ee>
 80156c6:	683b      	ldr	r3, [r7, #0]
 80156c8:	681b      	ldr	r3, [r3, #0]
 80156ca:	0e9b      	lsrs	r3, r3, #26
 80156cc:	3301      	adds	r3, #1
 80156ce:	f003 031f 	and.w	r3, r3, #31
 80156d2:	2101      	movs	r1, #1
 80156d4:	fa01 f303 	lsl.w	r3, r1, r3
 80156d8:	e017      	b.n	801570a <HAL_ADC_ConfigChannel+0x51e>
 80156da:	683b      	ldr	r3, [r7, #0]
 80156dc:	681b      	ldr	r3, [r3, #0]
 80156de:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80156e0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80156e2:	fa93 f3a3 	rbit	r3, r3
 80156e6:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 80156e8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80156ea:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 80156ec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80156ee:	2b00      	cmp	r3, #0
 80156f0:	d101      	bne.n	80156f6 <HAL_ADC_ConfigChannel+0x50a>
    return 32U;
 80156f2:	2320      	movs	r3, #32
 80156f4:	e003      	b.n	80156fe <HAL_ADC_ConfigChannel+0x512>
  return __builtin_clz(value);
 80156f6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80156f8:	fab3 f383 	clz	r3, r3
 80156fc:	b2db      	uxtb	r3, r3
 80156fe:	3301      	adds	r3, #1
 8015700:	f003 031f 	and.w	r3, r3, #31
 8015704:	2101      	movs	r1, #1
 8015706:	fa01 f303 	lsl.w	r3, r1, r3
 801570a:	ea42 0103 	orr.w	r1, r2, r3
 801570e:	683b      	ldr	r3, [r7, #0]
 8015710:	681b      	ldr	r3, [r3, #0]
 8015712:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8015716:	2b00      	cmp	r3, #0
 8015718:	d10a      	bne.n	8015730 <HAL_ADC_ConfigChannel+0x544>
 801571a:	683b      	ldr	r3, [r7, #0]
 801571c:	681b      	ldr	r3, [r3, #0]
 801571e:	0e9b      	lsrs	r3, r3, #26
 8015720:	3301      	adds	r3, #1
 8015722:	f003 021f 	and.w	r2, r3, #31
 8015726:	4613      	mov	r3, r2
 8015728:	005b      	lsls	r3, r3, #1
 801572a:	4413      	add	r3, r2
 801572c:	051b      	lsls	r3, r3, #20
 801572e:	e018      	b.n	8015762 <HAL_ADC_ConfigChannel+0x576>
 8015730:	683b      	ldr	r3, [r7, #0]
 8015732:	681b      	ldr	r3, [r3, #0]
 8015734:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8015736:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015738:	fa93 f3a3 	rbit	r3, r3
 801573c:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 801573e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015740:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8015742:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015744:	2b00      	cmp	r3, #0
 8015746:	d101      	bne.n	801574c <HAL_ADC_ConfigChannel+0x560>
    return 32U;
 8015748:	2320      	movs	r3, #32
 801574a:	e003      	b.n	8015754 <HAL_ADC_ConfigChannel+0x568>
  return __builtin_clz(value);
 801574c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801574e:	fab3 f383 	clz	r3, r3
 8015752:	b2db      	uxtb	r3, r3
 8015754:	3301      	adds	r3, #1
 8015756:	f003 021f 	and.w	r2, r3, #31
 801575a:	4613      	mov	r3, r2
 801575c:	005b      	lsls	r3, r3, #1
 801575e:	4413      	add	r3, r2
 8015760:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8015762:	430b      	orrs	r3, r1
 8015764:	e081      	b.n	801586a <HAL_ADC_ConfigChannel+0x67e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8015766:	683b      	ldr	r3, [r7, #0]
 8015768:	681b      	ldr	r3, [r3, #0]
 801576a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801576e:	2b00      	cmp	r3, #0
 8015770:	d107      	bne.n	8015782 <HAL_ADC_ConfigChannel+0x596>
 8015772:	683b      	ldr	r3, [r7, #0]
 8015774:	681b      	ldr	r3, [r3, #0]
 8015776:	0e9b      	lsrs	r3, r3, #26
 8015778:	3301      	adds	r3, #1
 801577a:	069b      	lsls	r3, r3, #26
 801577c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8015780:	e015      	b.n	80157ae <HAL_ADC_ConfigChannel+0x5c2>
 8015782:	683b      	ldr	r3, [r7, #0]
 8015784:	681b      	ldr	r3, [r3, #0]
 8015786:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8015788:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801578a:	fa93 f3a3 	rbit	r3, r3
 801578e:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8015790:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015792:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8015794:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015796:	2b00      	cmp	r3, #0
 8015798:	d101      	bne.n	801579e <HAL_ADC_ConfigChannel+0x5b2>
    return 32U;
 801579a:	2320      	movs	r3, #32
 801579c:	e003      	b.n	80157a6 <HAL_ADC_ConfigChannel+0x5ba>
  return __builtin_clz(value);
 801579e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80157a0:	fab3 f383 	clz	r3, r3
 80157a4:	b2db      	uxtb	r3, r3
 80157a6:	3301      	adds	r3, #1
 80157a8:	069b      	lsls	r3, r3, #26
 80157aa:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80157ae:	683b      	ldr	r3, [r7, #0]
 80157b0:	681b      	ldr	r3, [r3, #0]
 80157b2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80157b6:	2b00      	cmp	r3, #0
 80157b8:	d109      	bne.n	80157ce <HAL_ADC_ConfigChannel+0x5e2>
 80157ba:	683b      	ldr	r3, [r7, #0]
 80157bc:	681b      	ldr	r3, [r3, #0]
 80157be:	0e9b      	lsrs	r3, r3, #26
 80157c0:	3301      	adds	r3, #1
 80157c2:	f003 031f 	and.w	r3, r3, #31
 80157c6:	2101      	movs	r1, #1
 80157c8:	fa01 f303 	lsl.w	r3, r1, r3
 80157cc:	e017      	b.n	80157fe <HAL_ADC_ConfigChannel+0x612>
 80157ce:	683b      	ldr	r3, [r7, #0]
 80157d0:	681b      	ldr	r3, [r3, #0]
 80157d2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80157d4:	6a3b      	ldr	r3, [r7, #32]
 80157d6:	fa93 f3a3 	rbit	r3, r3
 80157da:	61fb      	str	r3, [r7, #28]
  return result;
 80157dc:	69fb      	ldr	r3, [r7, #28]
 80157de:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80157e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80157e2:	2b00      	cmp	r3, #0
 80157e4:	d101      	bne.n	80157ea <HAL_ADC_ConfigChannel+0x5fe>
    return 32U;
 80157e6:	2320      	movs	r3, #32
 80157e8:	e003      	b.n	80157f2 <HAL_ADC_ConfigChannel+0x606>
  return __builtin_clz(value);
 80157ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80157ec:	fab3 f383 	clz	r3, r3
 80157f0:	b2db      	uxtb	r3, r3
 80157f2:	3301      	adds	r3, #1
 80157f4:	f003 031f 	and.w	r3, r3, #31
 80157f8:	2101      	movs	r1, #1
 80157fa:	fa01 f303 	lsl.w	r3, r1, r3
 80157fe:	ea42 0103 	orr.w	r1, r2, r3
 8015802:	683b      	ldr	r3, [r7, #0]
 8015804:	681b      	ldr	r3, [r3, #0]
 8015806:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801580a:	2b00      	cmp	r3, #0
 801580c:	d10d      	bne.n	801582a <HAL_ADC_ConfigChannel+0x63e>
 801580e:	683b      	ldr	r3, [r7, #0]
 8015810:	681b      	ldr	r3, [r3, #0]
 8015812:	0e9b      	lsrs	r3, r3, #26
 8015814:	3301      	adds	r3, #1
 8015816:	f003 021f 	and.w	r2, r3, #31
 801581a:	4613      	mov	r3, r2
 801581c:	005b      	lsls	r3, r3, #1
 801581e:	4413      	add	r3, r2
 8015820:	3b1e      	subs	r3, #30
 8015822:	051b      	lsls	r3, r3, #20
 8015824:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8015828:	e01e      	b.n	8015868 <HAL_ADC_ConfigChannel+0x67c>
 801582a:	683b      	ldr	r3, [r7, #0]
 801582c:	681b      	ldr	r3, [r3, #0]
 801582e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8015830:	697b      	ldr	r3, [r7, #20]
 8015832:	fa93 f3a3 	rbit	r3, r3
 8015836:	613b      	str	r3, [r7, #16]
  return result;
 8015838:	693b      	ldr	r3, [r7, #16]
 801583a:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 801583c:	69bb      	ldr	r3, [r7, #24]
 801583e:	2b00      	cmp	r3, #0
 8015840:	d104      	bne.n	801584c <HAL_ADC_ConfigChannel+0x660>
    return 32U;
 8015842:	2320      	movs	r3, #32
 8015844:	e006      	b.n	8015854 <HAL_ADC_ConfigChannel+0x668>
 8015846:	bf00      	nop
 8015848:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 801584c:	69bb      	ldr	r3, [r7, #24]
 801584e:	fab3 f383 	clz	r3, r3
 8015852:	b2db      	uxtb	r3, r3
 8015854:	3301      	adds	r3, #1
 8015856:	f003 021f 	and.w	r2, r3, #31
 801585a:	4613      	mov	r3, r2
 801585c:	005b      	lsls	r3, r3, #1
 801585e:	4413      	add	r3, r2
 8015860:	3b1e      	subs	r3, #30
 8015862:	051b      	lsls	r3, r3, #20
 8015864:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8015868:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 801586a:	683a      	ldr	r2, [r7, #0]
 801586c:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 801586e:	4619      	mov	r1, r3
 8015870:	f7fe ff68 	bl	8014744 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8015874:	683b      	ldr	r3, [r7, #0]
 8015876:	681a      	ldr	r2, [r3, #0]
 8015878:	4b48      	ldr	r3, [pc, #288]	; (801599c <HAL_ADC_ConfigChannel+0x7b0>)
 801587a:	4013      	ands	r3, r2
 801587c:	2b00      	cmp	r3, #0
 801587e:	f000 8082 	beq.w	8015986 <HAL_ADC_ConfigChannel+0x79a>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8015882:	4847      	ldr	r0, [pc, #284]	; (80159a0 <HAL_ADC_ConfigChannel+0x7b4>)
 8015884:	f7fe fe96 	bl	80145b4 <LL_ADC_GetCommonPathInternalCh>
 8015888:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 801588c:	4845      	ldr	r0, [pc, #276]	; (80159a4 <HAL_ADC_ConfigChannel+0x7b8>)
 801588e:	f7ff f827 	bl	80148e0 <LL_ADC_IsEnabled>
 8015892:	4604      	mov	r4, r0
 8015894:	4844      	ldr	r0, [pc, #272]	; (80159a8 <HAL_ADC_ConfigChannel+0x7bc>)
 8015896:	f7ff f823 	bl	80148e0 <LL_ADC_IsEnabled>
 801589a:	4603      	mov	r3, r0
 801589c:	4323      	orrs	r3, r4
 801589e:	2b00      	cmp	r3, #0
 80158a0:	d15e      	bne.n	8015960 <HAL_ADC_ConfigChannel+0x774>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80158a2:	683b      	ldr	r3, [r7, #0]
 80158a4:	681b      	ldr	r3, [r3, #0]
 80158a6:	4a41      	ldr	r2, [pc, #260]	; (80159ac <HAL_ADC_ConfigChannel+0x7c0>)
 80158a8:	4293      	cmp	r3, r2
 80158aa:	d127      	bne.n	80158fc <HAL_ADC_ConfigChannel+0x710>
              && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80158ac:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80158b0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80158b4:	2b00      	cmp	r3, #0
 80158b6:	d121      	bne.n	80158fc <HAL_ADC_ConfigChannel+0x710>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80158b8:	687b      	ldr	r3, [r7, #4]
 80158ba:	681b      	ldr	r3, [r3, #0]
 80158bc:	4a39      	ldr	r2, [pc, #228]	; (80159a4 <HAL_ADC_ConfigChannel+0x7b8>)
 80158be:	4293      	cmp	r3, r2
 80158c0:	d161      	bne.n	8015986 <HAL_ADC_ConfigChannel+0x79a>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80158c2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80158c6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80158ca:	4619      	mov	r1, r3
 80158cc:	4834      	ldr	r0, [pc, #208]	; (80159a0 <HAL_ADC_ConfigChannel+0x7b4>)
 80158ce:	f7fe fe5e 	bl	801458e <LL_ADC_SetCommonPathInternalCh>
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL)
                                 * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80158d2:	4b37      	ldr	r3, [pc, #220]	; (80159b0 <HAL_ADC_ConfigChannel+0x7c4>)
 80158d4:	681b      	ldr	r3, [r3, #0]
 80158d6:	099b      	lsrs	r3, r3, #6
 80158d8:	4a36      	ldr	r2, [pc, #216]	; (80159b4 <HAL_ADC_ConfigChannel+0x7c8>)
 80158da:	fba2 2303 	umull	r2, r3, r2, r3
 80158de:	099b      	lsrs	r3, r3, #6
 80158e0:	1c5a      	adds	r2, r3, #1
 80158e2:	4613      	mov	r3, r2
 80158e4:	005b      	lsls	r3, r3, #1
 80158e6:	4413      	add	r3, r2
 80158e8:	009b      	lsls	r3, r3, #2
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL)
 80158ea:	60fb      	str	r3, [r7, #12]
              while(wait_loop_index != 0UL)
 80158ec:	e002      	b.n	80158f4 <HAL_ADC_ConfigChannel+0x708>
              {
                wait_loop_index--;
 80158ee:	68fb      	ldr	r3, [r7, #12]
 80158f0:	3b01      	subs	r3, #1
 80158f2:	60fb      	str	r3, [r7, #12]
              while(wait_loop_index != 0UL)
 80158f4:	68fb      	ldr	r3, [r7, #12]
 80158f6:	2b00      	cmp	r3, #0
 80158f8:	d1f9      	bne.n	80158ee <HAL_ADC_ConfigChannel+0x702>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80158fa:	e044      	b.n	8015986 <HAL_ADC_ConfigChannel+0x79a>
              }
            }
          }
          else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 80158fc:	683b      	ldr	r3, [r7, #0]
 80158fe:	681b      	ldr	r3, [r3, #0]
 8015900:	4a2d      	ldr	r2, [pc, #180]	; (80159b8 <HAL_ADC_ConfigChannel+0x7cc>)
 8015902:	4293      	cmp	r3, r2
 8015904:	d113      	bne.n	801592e <HAL_ADC_ConfigChannel+0x742>
                   && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8015906:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 801590a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 801590e:	2b00      	cmp	r3, #0
 8015910:	d10d      	bne.n	801592e <HAL_ADC_ConfigChannel+0x742>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8015912:	687b      	ldr	r3, [r7, #4]
 8015914:	681b      	ldr	r3, [r3, #0]
 8015916:	4a23      	ldr	r2, [pc, #140]	; (80159a4 <HAL_ADC_ConfigChannel+0x7b8>)
 8015918:	4293      	cmp	r3, r2
 801591a:	d134      	bne.n	8015986 <HAL_ADC_ConfigChannel+0x79a>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 801591c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8015920:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8015924:	4619      	mov	r1, r3
 8015926:	481e      	ldr	r0, [pc, #120]	; (80159a0 <HAL_ADC_ConfigChannel+0x7b4>)
 8015928:	f7fe fe31 	bl	801458e <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 801592c:	e02b      	b.n	8015986 <HAL_ADC_ConfigChannel+0x79a>
                                             LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
            }
          }
          else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 801592e:	683b      	ldr	r3, [r7, #0]
 8015930:	681b      	ldr	r3, [r3, #0]
 8015932:	4a22      	ldr	r2, [pc, #136]	; (80159bc <HAL_ADC_ConfigChannel+0x7d0>)
 8015934:	4293      	cmp	r3, r2
 8015936:	d126      	bne.n	8015986 <HAL_ADC_ConfigChannel+0x79a>
                   && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8015938:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 801593c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8015940:	2b00      	cmp	r3, #0
 8015942:	d120      	bne.n	8015986 <HAL_ADC_ConfigChannel+0x79a>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8015944:	687b      	ldr	r3, [r7, #4]
 8015946:	681b      	ldr	r3, [r3, #0]
 8015948:	4a16      	ldr	r2, [pc, #88]	; (80159a4 <HAL_ADC_ConfigChannel+0x7b8>)
 801594a:	4293      	cmp	r3, r2
 801594c:	d11b      	bne.n	8015986 <HAL_ADC_ConfigChannel+0x79a>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 801594e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8015952:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8015956:	4619      	mov	r1, r3
 8015958:	4811      	ldr	r0, [pc, #68]	; (80159a0 <HAL_ADC_ConfigChannel+0x7b4>)
 801595a:	f7fe fe18 	bl	801458e <LL_ADC_SetCommonPathInternalCh>
 801595e:	e012      	b.n	8015986 <HAL_ADC_ConfigChannel+0x79a>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8015960:	687b      	ldr	r3, [r7, #4]
 8015962:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8015964:	f043 0220 	orr.w	r2, r3, #32
 8015968:	687b      	ldr	r3, [r7, #4]
 801596a:	659a      	str	r2, [r3, #88]	; 0x58

          tmp_hal_status = HAL_ERROR;
 801596c:	2301      	movs	r3, #1
 801596e:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8015972:	e008      	b.n	8015986 <HAL_ADC_ConfigChannel+0x79a>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8015974:	687b      	ldr	r3, [r7, #4]
 8015976:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8015978:	f043 0220 	orr.w	r2, r3, #32
 801597c:	687b      	ldr	r3, [r7, #4]
 801597e:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8015980:	2301      	movs	r3, #1
 8015982:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8015986:	687b      	ldr	r3, [r7, #4]
 8015988:	2200      	movs	r2, #0
 801598a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 801598e:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8015992:	4618      	mov	r0, r3
 8015994:	37dc      	adds	r7, #220	; 0xdc
 8015996:	46bd      	mov	sp, r7
 8015998:	bd90      	pop	{r4, r7, pc}
 801599a:	bf00      	nop
 801599c:	80080000 	.word	0x80080000
 80159a0:	42028300 	.word	0x42028300
 80159a4:	42028000 	.word	0x42028000
 80159a8:	42028100 	.word	0x42028100
 80159ac:	c7520000 	.word	0xc7520000
 80159b0:	20000090 	.word	0x20000090
 80159b4:	053e2d63 	.word	0x053e2d63
 80159b8:	cb840000 	.word	0xcb840000
 80159bc:	80000001 	.word	0x80000001

080159c0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80159c0:	b580      	push	{r7, lr}
 80159c2:	b084      	sub	sp, #16
 80159c4:	af00      	add	r7, sp, #0
 80159c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80159c8:	2300      	movs	r3, #0
 80159ca:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80159cc:	687b      	ldr	r3, [r7, #4]
 80159ce:	681b      	ldr	r3, [r3, #0]
 80159d0:	4618      	mov	r0, r3
 80159d2:	f7fe ff85 	bl	80148e0 <LL_ADC_IsEnabled>
 80159d6:	4603      	mov	r3, r0
 80159d8:	2b00      	cmp	r3, #0
 80159da:	d169      	bne.n	8015ab0 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80159dc:	687b      	ldr	r3, [r7, #4]
 80159de:	681b      	ldr	r3, [r3, #0]
 80159e0:	689a      	ldr	r2, [r3, #8]
 80159e2:	4b36      	ldr	r3, [pc, #216]	; (8015abc <ADC_Enable+0xfc>)
 80159e4:	4013      	ands	r3, r2
 80159e6:	2b00      	cmp	r3, #0
 80159e8:	d00d      	beq.n	8015a06 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80159ea:	687b      	ldr	r3, [r7, #4]
 80159ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80159ee:	f043 0210 	orr.w	r2, r3, #16
 80159f2:	687b      	ldr	r3, [r7, #4]
 80159f4:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80159f6:	687b      	ldr	r3, [r7, #4]
 80159f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80159fa:	f043 0201 	orr.w	r2, r3, #1
 80159fe:	687b      	ldr	r3, [r7, #4]
 8015a00:	65da      	str	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8015a02:	2301      	movs	r3, #1
 8015a04:	e055      	b.n	8015ab2 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8015a06:	687b      	ldr	r3, [r7, #4]
 8015a08:	681b      	ldr	r3, [r3, #0]
 8015a0a:	4618      	mov	r0, r3
 8015a0c:	f7fe ff54 	bl	80148b8 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8015a10:	482b      	ldr	r0, [pc, #172]	; (8015ac0 <ADC_Enable+0x100>)
 8015a12:	f7fe fdcf 	bl	80145b4 <LL_ADC_GetCommonPathInternalCh>
 8015a16:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8015a18:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8015a1c:	2b00      	cmp	r3, #0
 8015a1e:	d013      	beq.n	8015a48 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8015a20:	4b28      	ldr	r3, [pc, #160]	; (8015ac4 <ADC_Enable+0x104>)
 8015a22:	681b      	ldr	r3, [r3, #0]
 8015a24:	099b      	lsrs	r3, r3, #6
 8015a26:	4a28      	ldr	r2, [pc, #160]	; (8015ac8 <ADC_Enable+0x108>)
 8015a28:	fba2 2303 	umull	r2, r3, r2, r3
 8015a2c:	099b      	lsrs	r3, r3, #6
 8015a2e:	1c5a      	adds	r2, r3, #1
 8015a30:	4613      	mov	r3, r2
 8015a32:	005b      	lsls	r3, r3, #1
 8015a34:	4413      	add	r3, r2
 8015a36:	009b      	lsls	r3, r3, #2
 8015a38:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8015a3a:	e002      	b.n	8015a42 <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8015a3c:	68bb      	ldr	r3, [r7, #8]
 8015a3e:	3b01      	subs	r3, #1
 8015a40:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8015a42:	68bb      	ldr	r3, [r7, #8]
 8015a44:	2b00      	cmp	r3, #0
 8015a46:	d1f9      	bne.n	8015a3c <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8015a48:	f7fe fd82 	bl	8014550 <HAL_GetTick>
 8015a4c:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8015a4e:	e028      	b.n	8015aa2 <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8015a50:	687b      	ldr	r3, [r7, #4]
 8015a52:	681b      	ldr	r3, [r3, #0]
 8015a54:	4618      	mov	r0, r3
 8015a56:	f7fe ff43 	bl	80148e0 <LL_ADC_IsEnabled>
 8015a5a:	4603      	mov	r3, r0
 8015a5c:	2b00      	cmp	r3, #0
 8015a5e:	d104      	bne.n	8015a6a <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8015a60:	687b      	ldr	r3, [r7, #4]
 8015a62:	681b      	ldr	r3, [r3, #0]
 8015a64:	4618      	mov	r0, r3
 8015a66:	f7fe ff27 	bl	80148b8 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8015a6a:	f7fe fd71 	bl	8014550 <HAL_GetTick>
 8015a6e:	4602      	mov	r2, r0
 8015a70:	68fb      	ldr	r3, [r7, #12]
 8015a72:	1ad3      	subs	r3, r2, r3
 8015a74:	2b02      	cmp	r3, #2
 8015a76:	d914      	bls.n	8015aa2 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8015a78:	687b      	ldr	r3, [r7, #4]
 8015a7a:	681b      	ldr	r3, [r3, #0]
 8015a7c:	681b      	ldr	r3, [r3, #0]
 8015a7e:	f003 0301 	and.w	r3, r3, #1
 8015a82:	2b01      	cmp	r3, #1
 8015a84:	d00d      	beq.n	8015aa2 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8015a86:	687b      	ldr	r3, [r7, #4]
 8015a88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8015a8a:	f043 0210 	orr.w	r2, r3, #16
 8015a8e:	687b      	ldr	r3, [r7, #4]
 8015a90:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8015a92:	687b      	ldr	r3, [r7, #4]
 8015a94:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8015a96:	f043 0201 	orr.w	r2, r3, #1
 8015a9a:	687b      	ldr	r3, [r7, #4]
 8015a9c:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 8015a9e:	2301      	movs	r3, #1
 8015aa0:	e007      	b.n	8015ab2 <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8015aa2:	687b      	ldr	r3, [r7, #4]
 8015aa4:	681b      	ldr	r3, [r3, #0]
 8015aa6:	681b      	ldr	r3, [r3, #0]
 8015aa8:	f003 0301 	and.w	r3, r3, #1
 8015aac:	2b01      	cmp	r3, #1
 8015aae:	d1cf      	bne.n	8015a50 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8015ab0:	2300      	movs	r3, #0
}
 8015ab2:	4618      	mov	r0, r3
 8015ab4:	3710      	adds	r7, #16
 8015ab6:	46bd      	mov	sp, r7
 8015ab8:	bd80      	pop	{r7, pc}
 8015aba:	bf00      	nop
 8015abc:	8000003f 	.word	0x8000003f
 8015ac0:	42028300 	.word	0x42028300
 8015ac4:	20000090 	.word	0x20000090
 8015ac8:	053e2d63 	.word	0x053e2d63

08015acc <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8015acc:	b580      	push	{r7, lr}
 8015ace:	b084      	sub	sp, #16
 8015ad0:	af00      	add	r7, sp, #0
 8015ad2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8015ad4:	687b      	ldr	r3, [r7, #4]
 8015ad6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015ad8:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8015ada:	68fb      	ldr	r3, [r7, #12]
 8015adc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8015ade:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8015ae2:	2b00      	cmp	r3, #0
 8015ae4:	d14b      	bne.n	8015b7e <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8015ae6:	68fb      	ldr	r3, [r7, #12]
 8015ae8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8015aea:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8015aee:	68fb      	ldr	r3, [r7, #12]
 8015af0:	659a      	str	r2, [r3, #88]	; 0x58

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8015af2:	68fb      	ldr	r3, [r7, #12]
 8015af4:	681b      	ldr	r3, [r3, #0]
 8015af6:	681b      	ldr	r3, [r3, #0]
 8015af8:	f003 0308 	and.w	r3, r3, #8
 8015afc:	2b00      	cmp	r3, #0
 8015afe:	d021      	beq.n	8015b44 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8015b00:	68fb      	ldr	r3, [r7, #12]
 8015b02:	681b      	ldr	r3, [r3, #0]
 8015b04:	4618      	mov	r0, r3
 8015b06:	f7fe fdcb 	bl	80146a0 <LL_ADC_REG_IsTriggerSourceSWStart>
 8015b0a:	4603      	mov	r3, r0
 8015b0c:	2b00      	cmp	r3, #0
 8015b0e:	d032      	beq.n	8015b76 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8015b10:	68fb      	ldr	r3, [r7, #12]
 8015b12:	681b      	ldr	r3, [r3, #0]
 8015b14:	68db      	ldr	r3, [r3, #12]
 8015b16:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8015b1a:	2b00      	cmp	r3, #0
 8015b1c:	d12b      	bne.n	8015b76 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8015b1e:	68fb      	ldr	r3, [r7, #12]
 8015b20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8015b22:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8015b26:	68fb      	ldr	r3, [r7, #12]
 8015b28:	659a      	str	r2, [r3, #88]	; 0x58
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8015b2a:	68fb      	ldr	r3, [r7, #12]
 8015b2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8015b2e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8015b32:	2b00      	cmp	r3, #0
 8015b34:	d11f      	bne.n	8015b76 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8015b36:	68fb      	ldr	r3, [r7, #12]
 8015b38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8015b3a:	f043 0201 	orr.w	r2, r3, #1
 8015b3e:	68fb      	ldr	r3, [r7, #12]
 8015b40:	659a      	str	r2, [r3, #88]	; 0x58
 8015b42:	e018      	b.n	8015b76 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8015b44:	68fb      	ldr	r3, [r7, #12]
 8015b46:	681b      	ldr	r3, [r3, #0]
 8015b48:	68db      	ldr	r3, [r3, #12]
 8015b4a:	f003 0302 	and.w	r3, r3, #2
 8015b4e:	2b00      	cmp	r3, #0
 8015b50:	d111      	bne.n	8015b76 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8015b52:	68fb      	ldr	r3, [r7, #12]
 8015b54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8015b56:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8015b5a:	68fb      	ldr	r3, [r7, #12]
 8015b5c:	659a      	str	r2, [r3, #88]	; 0x58
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8015b5e:	68fb      	ldr	r3, [r7, #12]
 8015b60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8015b62:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8015b66:	2b00      	cmp	r3, #0
 8015b68:	d105      	bne.n	8015b76 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8015b6a:	68fb      	ldr	r3, [r7, #12]
 8015b6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8015b6e:	f043 0201 	orr.w	r2, r3, #1
 8015b72:	68fb      	ldr	r3, [r7, #12]
 8015b74:	659a      	str	r2, [r3, #88]	; 0x58

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8015b76:	68f8      	ldr	r0, [r7, #12]
 8015b78:	f7ec fc0e 	bl	8002398 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8015b7c:	e00e      	b.n	8015b9c <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8015b7e:	68fb      	ldr	r3, [r7, #12]
 8015b80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8015b82:	f003 0310 	and.w	r3, r3, #16
 8015b86:	2b00      	cmp	r3, #0
 8015b88:	d003      	beq.n	8015b92 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8015b8a:	68f8      	ldr	r0, [r7, #12]
 8015b8c:	f7ff fb24 	bl	80151d8 <HAL_ADC_ErrorCallback>
}
 8015b90:	e004      	b.n	8015b9c <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8015b92:	68fb      	ldr	r3, [r7, #12]
 8015b94:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8015b96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8015b98:	6878      	ldr	r0, [r7, #4]
 8015b9a:	4798      	blx	r3
}
 8015b9c:	bf00      	nop
 8015b9e:	3710      	adds	r7, #16
 8015ba0:	46bd      	mov	sp, r7
 8015ba2:	bd80      	pop	{r7, pc}

08015ba4 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8015ba4:	b580      	push	{r7, lr}
 8015ba6:	b084      	sub	sp, #16
 8015ba8:	af00      	add	r7, sp, #0
 8015baa:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8015bac:	687b      	ldr	r3, [r7, #4]
 8015bae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015bb0:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8015bb2:	68f8      	ldr	r0, [r7, #12]
 8015bb4:	f7ff fafc 	bl	80151b0 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8015bb8:	bf00      	nop
 8015bba:	3710      	adds	r7, #16
 8015bbc:	46bd      	mov	sp, r7
 8015bbe:	bd80      	pop	{r7, pc}

08015bc0 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8015bc0:	b580      	push	{r7, lr}
 8015bc2:	b084      	sub	sp, #16
 8015bc4:	af00      	add	r7, sp, #0
 8015bc6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8015bc8:	687b      	ldr	r3, [r7, #4]
 8015bca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015bcc:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8015bce:	68fb      	ldr	r3, [r7, #12]
 8015bd0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8015bd2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8015bd6:	68fb      	ldr	r3, [r7, #12]
 8015bd8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8015bda:	68fb      	ldr	r3, [r7, #12]
 8015bdc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8015bde:	f043 0204 	orr.w	r2, r3, #4
 8015be2:	68fb      	ldr	r3, [r7, #12]
 8015be4:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8015be6:	68f8      	ldr	r0, [r7, #12]
 8015be8:	f7ff faf6 	bl	80151d8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8015bec:	bf00      	nop
 8015bee:	3710      	adds	r7, #16
 8015bf0:	46bd      	mov	sp, r7
 8015bf2:	bd80      	pop	{r7, pc}

08015bf4 <LL_ADC_IsEnabled>:
{
 8015bf4:	b480      	push	{r7}
 8015bf6:	b083      	sub	sp, #12
 8015bf8:	af00      	add	r7, sp, #0
 8015bfa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8015bfc:	687b      	ldr	r3, [r7, #4]
 8015bfe:	689b      	ldr	r3, [r3, #8]
 8015c00:	f003 0301 	and.w	r3, r3, #1
 8015c04:	2b01      	cmp	r3, #1
 8015c06:	d101      	bne.n	8015c0c <LL_ADC_IsEnabled+0x18>
 8015c08:	2301      	movs	r3, #1
 8015c0a:	e000      	b.n	8015c0e <LL_ADC_IsEnabled+0x1a>
 8015c0c:	2300      	movs	r3, #0
}
 8015c0e:	4618      	mov	r0, r3
 8015c10:	370c      	adds	r7, #12
 8015c12:	46bd      	mov	sp, r7
 8015c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015c18:	4770      	bx	lr

08015c1a <LL_ADC_REG_IsConversionOngoing>:
{
 8015c1a:	b480      	push	{r7}
 8015c1c:	b083      	sub	sp, #12
 8015c1e:	af00      	add	r7, sp, #0
 8015c20:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8015c22:	687b      	ldr	r3, [r7, #4]
 8015c24:	689b      	ldr	r3, [r3, #8]
 8015c26:	f003 0304 	and.w	r3, r3, #4
 8015c2a:	2b04      	cmp	r3, #4
 8015c2c:	d101      	bne.n	8015c32 <LL_ADC_REG_IsConversionOngoing+0x18>
 8015c2e:	2301      	movs	r3, #1
 8015c30:	e000      	b.n	8015c34 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8015c32:	2300      	movs	r3, #0
}
 8015c34:	4618      	mov	r0, r3
 8015c36:	370c      	adds	r7, #12
 8015c38:	46bd      	mov	sp, r7
 8015c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015c3e:	4770      	bx	lr

08015c40 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8015c40:	b480      	push	{r7}
 8015c42:	b083      	sub	sp, #12
 8015c44:	af00      	add	r7, sp, #0
 8015c46:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8015c48:	bf00      	nop
 8015c4a:	370c      	adds	r7, #12
 8015c4c:	46bd      	mov	sp, r7
 8015c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015c52:	4770      	bx	lr

08015c54 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8015c54:	b480      	push	{r7}
 8015c56:	b083      	sub	sp, #12
 8015c58:	af00      	add	r7, sp, #0
 8015c5a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8015c5c:	bf00      	nop
 8015c5e:	370c      	adds	r7, #12
 8015c60:	46bd      	mov	sp, r7
 8015c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015c66:	4770      	bx	lr

08015c68 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8015c68:	b480      	push	{r7}
 8015c6a:	b083      	sub	sp, #12
 8015c6c:	af00      	add	r7, sp, #0
 8015c6e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8015c70:	bf00      	nop
 8015c72:	370c      	adds	r7, #12
 8015c74:	46bd      	mov	sp, r7
 8015c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015c7a:	4770      	bx	lr

08015c7c <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8015c7c:	b480      	push	{r7}
 8015c7e:	b083      	sub	sp, #12
 8015c80:	af00      	add	r7, sp, #0
 8015c82:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8015c84:	bf00      	nop
 8015c86:	370c      	adds	r7, #12
 8015c88:	46bd      	mov	sp, r7
 8015c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015c8e:	4770      	bx	lr

08015c90 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8015c90:	b480      	push	{r7}
 8015c92:	b083      	sub	sp, #12
 8015c94:	af00      	add	r7, sp, #0
 8015c96:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8015c98:	bf00      	nop
 8015c9a:	370c      	adds	r7, #12
 8015c9c:	46bd      	mov	sp, r7
 8015c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015ca2:	4770      	bx	lr

08015ca4 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8015ca4:	b590      	push	{r4, r7, lr}
 8015ca6:	b0a1      	sub	sp, #132	; 0x84
 8015ca8:	af00      	add	r7, sp, #0
 8015caa:	6078      	str	r0, [r7, #4]
 8015cac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8015cae:	2300      	movs	r3, #0
 8015cb0:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8015cb4:	687b      	ldr	r3, [r7, #4]
 8015cb6:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8015cba:	2b01      	cmp	r3, #1
 8015cbc:	d101      	bne.n	8015cc2 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8015cbe:	2302      	movs	r3, #2
 8015cc0:	e089      	b.n	8015dd6 <HAL_ADCEx_MultiModeConfigChannel+0x132>
 8015cc2:	687b      	ldr	r3, [r7, #4]
 8015cc4:	2201      	movs	r2, #1
 8015cc6:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8015cca:	2300      	movs	r3, #0
 8015ccc:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8015cce:	2300      	movs	r3, #0
 8015cd0:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8015cd2:	687b      	ldr	r3, [r7, #4]
 8015cd4:	681b      	ldr	r3, [r3, #0]
 8015cd6:	4a42      	ldr	r2, [pc, #264]	; (8015de0 <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 8015cd8:	4293      	cmp	r3, r2
 8015cda:	d102      	bne.n	8015ce2 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8015cdc:	4b41      	ldr	r3, [pc, #260]	; (8015de4 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8015cde:	60fb      	str	r3, [r7, #12]
 8015ce0:	e001      	b.n	8015ce6 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8015ce2:	2300      	movs	r3, #0
 8015ce4:	60fb      	str	r3, [r7, #12]

  if (tmp_hadc_slave.Instance == NULL)
 8015ce6:	68fb      	ldr	r3, [r7, #12]
 8015ce8:	2b00      	cmp	r3, #0
 8015cea:	d10b      	bne.n	8015d04 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8015cec:	687b      	ldr	r3, [r7, #4]
 8015cee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8015cf0:	f043 0220 	orr.w	r2, r3, #32
 8015cf4:	687b      	ldr	r3, [r7, #4]
 8015cf6:	659a      	str	r2, [r3, #88]	; 0x58

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8015cf8:	687b      	ldr	r3, [r7, #4]
 8015cfa:	2200      	movs	r2, #0
 8015cfc:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    return HAL_ERROR;
 8015d00:	2301      	movs	r3, #1
 8015d02:	e068      	b.n	8015dd6 <HAL_ADCEx_MultiModeConfigChannel+0x132>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8015d04:	68fb      	ldr	r3, [r7, #12]
 8015d06:	4618      	mov	r0, r3
 8015d08:	f7ff ff87 	bl	8015c1a <LL_ADC_REG_IsConversionOngoing>
 8015d0c:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8015d0e:	687b      	ldr	r3, [r7, #4]
 8015d10:	681b      	ldr	r3, [r3, #0]
 8015d12:	4618      	mov	r0, r3
 8015d14:	f7ff ff81 	bl	8015c1a <LL_ADC_REG_IsConversionOngoing>
 8015d18:	4603      	mov	r3, r0
 8015d1a:	2b00      	cmp	r3, #0
 8015d1c:	d14a      	bne.n	8015db4 <HAL_ADCEx_MultiModeConfigChannel+0x110>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8015d1e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8015d20:	2b00      	cmp	r3, #0
 8015d22:	d147      	bne.n	8015db4 <HAL_ADCEx_MultiModeConfigChannel+0x110>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8015d24:	4b30      	ldr	r3, [pc, #192]	; (8015de8 <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 8015d26:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8015d28:	683b      	ldr	r3, [r7, #0]
 8015d2a:	681b      	ldr	r3, [r3, #0]
 8015d2c:	2b00      	cmp	r3, #0
 8015d2e:	d027      	beq.n	8015d80 <HAL_ADCEx_MultiModeConfigChannel+0xdc>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8015d30:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8015d32:	689b      	ldr	r3, [r3, #8]
 8015d34:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8015d38:	683b      	ldr	r3, [r7, #0]
 8015d3a:	6859      	ldr	r1, [r3, #4]
 8015d3c:	687b      	ldr	r3, [r7, #4]
 8015d3e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8015d42:	035b      	lsls	r3, r3, #13
 8015d44:	430b      	orrs	r3, r1
 8015d46:	431a      	orrs	r2, r3
 8015d48:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8015d4a:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8015d4c:	4824      	ldr	r0, [pc, #144]	; (8015de0 <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 8015d4e:	f7ff ff51 	bl	8015bf4 <LL_ADC_IsEnabled>
 8015d52:	4604      	mov	r4, r0
 8015d54:	4823      	ldr	r0, [pc, #140]	; (8015de4 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8015d56:	f7ff ff4d 	bl	8015bf4 <LL_ADC_IsEnabled>
 8015d5a:	4603      	mov	r3, r0
 8015d5c:	4323      	orrs	r3, r4
 8015d5e:	2b00      	cmp	r3, #0
 8015d60:	d132      	bne.n	8015dc8 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8015d62:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8015d64:	689b      	ldr	r3, [r3, #8]
 8015d66:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8015d6a:	f023 030f 	bic.w	r3, r3, #15
 8015d6e:	683a      	ldr	r2, [r7, #0]
 8015d70:	6811      	ldr	r1, [r2, #0]
 8015d72:	683a      	ldr	r2, [r7, #0]
 8015d74:	6892      	ldr	r2, [r2, #8]
 8015d76:	430a      	orrs	r2, r1
 8015d78:	431a      	orrs	r2, r3
 8015d7a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8015d7c:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8015d7e:	e023      	b.n	8015dc8 <HAL_ADCEx_MultiModeConfigChannel+0x124>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8015d80:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8015d82:	689b      	ldr	r3, [r3, #8]
 8015d84:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8015d88:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8015d8a:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8015d8c:	4814      	ldr	r0, [pc, #80]	; (8015de0 <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 8015d8e:	f7ff ff31 	bl	8015bf4 <LL_ADC_IsEnabled>
 8015d92:	4604      	mov	r4, r0
 8015d94:	4813      	ldr	r0, [pc, #76]	; (8015de4 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8015d96:	f7ff ff2d 	bl	8015bf4 <LL_ADC_IsEnabled>
 8015d9a:	4603      	mov	r3, r0
 8015d9c:	4323      	orrs	r3, r4
 8015d9e:	2b00      	cmp	r3, #0
 8015da0:	d112      	bne.n	8015dc8 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8015da2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8015da4:	689b      	ldr	r3, [r3, #8]
 8015da6:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8015daa:	f023 030f 	bic.w	r3, r3, #15
 8015dae:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8015db0:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8015db2:	e009      	b.n	8015dc8 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8015db4:	687b      	ldr	r3, [r7, #4]
 8015db6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8015db8:	f043 0220 	orr.w	r2, r3, #32
 8015dbc:	687b      	ldr	r3, [r7, #4]
 8015dbe:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8015dc0:	2301      	movs	r3, #1
 8015dc2:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8015dc6:	e000      	b.n	8015dca <HAL_ADCEx_MultiModeConfigChannel+0x126>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8015dc8:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8015dca:	687b      	ldr	r3, [r7, #4]
 8015dcc:	2200      	movs	r2, #0
 8015dce:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 8015dd2:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8015dd6:	4618      	mov	r0, r3
 8015dd8:	3784      	adds	r7, #132	; 0x84
 8015dda:	46bd      	mov	sp, r7
 8015ddc:	bd90      	pop	{r4, r7, pc}
 8015dde:	bf00      	nop
 8015de0:	42028000 	.word	0x42028000
 8015de4:	42028100 	.word	0x42028100
 8015de8:	42028300 	.word	0x42028300

08015dec <__NVIC_SetPriorityGrouping>:
{
 8015dec:	b480      	push	{r7}
 8015dee:	b085      	sub	sp, #20
 8015df0:	af00      	add	r7, sp, #0
 8015df2:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8015df4:	687b      	ldr	r3, [r7, #4]
 8015df6:	f003 0307 	and.w	r3, r3, #7
 8015dfa:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8015dfc:	4b0c      	ldr	r3, [pc, #48]	; (8015e30 <__NVIC_SetPriorityGrouping+0x44>)
 8015dfe:	68db      	ldr	r3, [r3, #12]
 8015e00:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8015e02:	68ba      	ldr	r2, [r7, #8]
 8015e04:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8015e08:	4013      	ands	r3, r2
 8015e0a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8015e0c:	68fb      	ldr	r3, [r7, #12]
 8015e0e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8015e10:	68bb      	ldr	r3, [r7, #8]
 8015e12:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8015e14:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8015e18:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8015e1c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8015e1e:	4a04      	ldr	r2, [pc, #16]	; (8015e30 <__NVIC_SetPriorityGrouping+0x44>)
 8015e20:	68bb      	ldr	r3, [r7, #8]
 8015e22:	60d3      	str	r3, [r2, #12]
}
 8015e24:	bf00      	nop
 8015e26:	3714      	adds	r7, #20
 8015e28:	46bd      	mov	sp, r7
 8015e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015e2e:	4770      	bx	lr
 8015e30:	e000ed00 	.word	0xe000ed00

08015e34 <__NVIC_GetPriorityGrouping>:
{
 8015e34:	b480      	push	{r7}
 8015e36:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8015e38:	4b04      	ldr	r3, [pc, #16]	; (8015e4c <__NVIC_GetPriorityGrouping+0x18>)
 8015e3a:	68db      	ldr	r3, [r3, #12]
 8015e3c:	0a1b      	lsrs	r3, r3, #8
 8015e3e:	f003 0307 	and.w	r3, r3, #7
}
 8015e42:	4618      	mov	r0, r3
 8015e44:	46bd      	mov	sp, r7
 8015e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015e4a:	4770      	bx	lr
 8015e4c:	e000ed00 	.word	0xe000ed00

08015e50 <__NVIC_EnableIRQ>:
{
 8015e50:	b480      	push	{r7}
 8015e52:	b083      	sub	sp, #12
 8015e54:	af00      	add	r7, sp, #0
 8015e56:	4603      	mov	r3, r0
 8015e58:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8015e5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8015e5e:	2b00      	cmp	r3, #0
 8015e60:	db0b      	blt.n	8015e7a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8015e62:	79fb      	ldrb	r3, [r7, #7]
 8015e64:	f003 021f 	and.w	r2, r3, #31
 8015e68:	4907      	ldr	r1, [pc, #28]	; (8015e88 <__NVIC_EnableIRQ+0x38>)
 8015e6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8015e6e:	095b      	lsrs	r3, r3, #5
 8015e70:	2001      	movs	r0, #1
 8015e72:	fa00 f202 	lsl.w	r2, r0, r2
 8015e76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8015e7a:	bf00      	nop
 8015e7c:	370c      	adds	r7, #12
 8015e7e:	46bd      	mov	sp, r7
 8015e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015e84:	4770      	bx	lr
 8015e86:	bf00      	nop
 8015e88:	e000e100 	.word	0xe000e100

08015e8c <__NVIC_SetPriority>:
{
 8015e8c:	b480      	push	{r7}
 8015e8e:	b083      	sub	sp, #12
 8015e90:	af00      	add	r7, sp, #0
 8015e92:	4603      	mov	r3, r0
 8015e94:	6039      	str	r1, [r7, #0]
 8015e96:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8015e98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8015e9c:	2b00      	cmp	r3, #0
 8015e9e:	db0a      	blt.n	8015eb6 <__NVIC_SetPriority+0x2a>
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8015ea0:	683b      	ldr	r3, [r7, #0]
 8015ea2:	b2da      	uxtb	r2, r3
 8015ea4:	490c      	ldr	r1, [pc, #48]	; (8015ed8 <__NVIC_SetPriority+0x4c>)
 8015ea6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8015eaa:	0152      	lsls	r2, r2, #5
 8015eac:	b2d2      	uxtb	r2, r2
 8015eae:	440b      	add	r3, r1
 8015eb0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8015eb4:	e00a      	b.n	8015ecc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8015eb6:	683b      	ldr	r3, [r7, #0]
 8015eb8:	b2da      	uxtb	r2, r3
 8015eba:	4908      	ldr	r1, [pc, #32]	; (8015edc <__NVIC_SetPriority+0x50>)
 8015ebc:	79fb      	ldrb	r3, [r7, #7]
 8015ebe:	f003 030f 	and.w	r3, r3, #15
 8015ec2:	3b04      	subs	r3, #4
 8015ec4:	0152      	lsls	r2, r2, #5
 8015ec6:	b2d2      	uxtb	r2, r2
 8015ec8:	440b      	add	r3, r1
 8015eca:	761a      	strb	r2, [r3, #24]
}
 8015ecc:	bf00      	nop
 8015ece:	370c      	adds	r7, #12
 8015ed0:	46bd      	mov	sp, r7
 8015ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015ed6:	4770      	bx	lr
 8015ed8:	e000e100 	.word	0xe000e100
 8015edc:	e000ed00 	.word	0xe000ed00

08015ee0 <NVIC_EncodePriority>:
{
 8015ee0:	b480      	push	{r7}
 8015ee2:	b089      	sub	sp, #36	; 0x24
 8015ee4:	af00      	add	r7, sp, #0
 8015ee6:	60f8      	str	r0, [r7, #12]
 8015ee8:	60b9      	str	r1, [r7, #8]
 8015eea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8015eec:	68fb      	ldr	r3, [r7, #12]
 8015eee:	f003 0307 	and.w	r3, r3, #7
 8015ef2:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8015ef4:	69fb      	ldr	r3, [r7, #28]
 8015ef6:	f1c3 0307 	rsb	r3, r3, #7
 8015efa:	2b03      	cmp	r3, #3
 8015efc:	bf28      	it	cs
 8015efe:	2303      	movcs	r3, #3
 8015f00:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8015f02:	69fb      	ldr	r3, [r7, #28]
 8015f04:	3303      	adds	r3, #3
 8015f06:	2b06      	cmp	r3, #6
 8015f08:	d902      	bls.n	8015f10 <NVIC_EncodePriority+0x30>
 8015f0a:	69fb      	ldr	r3, [r7, #28]
 8015f0c:	3b04      	subs	r3, #4
 8015f0e:	e000      	b.n	8015f12 <NVIC_EncodePriority+0x32>
 8015f10:	2300      	movs	r3, #0
 8015f12:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8015f14:	f04f 32ff 	mov.w	r2, #4294967295
 8015f18:	69bb      	ldr	r3, [r7, #24]
 8015f1a:	fa02 f303 	lsl.w	r3, r2, r3
 8015f1e:	43da      	mvns	r2, r3
 8015f20:	68bb      	ldr	r3, [r7, #8]
 8015f22:	401a      	ands	r2, r3
 8015f24:	697b      	ldr	r3, [r7, #20]
 8015f26:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8015f28:	f04f 31ff 	mov.w	r1, #4294967295
 8015f2c:	697b      	ldr	r3, [r7, #20]
 8015f2e:	fa01 f303 	lsl.w	r3, r1, r3
 8015f32:	43d9      	mvns	r1, r3
 8015f34:	687b      	ldr	r3, [r7, #4]
 8015f36:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8015f38:	4313      	orrs	r3, r2
}
 8015f3a:	4618      	mov	r0, r3
 8015f3c:	3724      	adds	r7, #36	; 0x24
 8015f3e:	46bd      	mov	sp, r7
 8015f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015f44:	4770      	bx	lr

08015f46 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8015f46:	b580      	push	{r7, lr}
 8015f48:	b082      	sub	sp, #8
 8015f4a:	af00      	add	r7, sp, #0
 8015f4c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8015f4e:	6878      	ldr	r0, [r7, #4]
 8015f50:	f7ff ff4c 	bl	8015dec <__NVIC_SetPriorityGrouping>
}
 8015f54:	bf00      	nop
 8015f56:	3708      	adds	r7, #8
 8015f58:	46bd      	mov	sp, r7
 8015f5a:	bd80      	pop	{r7, pc}

08015f5c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 7
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8015f5c:	b580      	push	{r7, lr}
 8015f5e:	b086      	sub	sp, #24
 8015f60:	af00      	add	r7, sp, #0
 8015f62:	4603      	mov	r3, r0
 8015f64:	60b9      	str	r1, [r7, #8]
 8015f66:	607a      	str	r2, [r7, #4]
 8015f68:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8015f6a:	f7ff ff63 	bl	8015e34 <__NVIC_GetPriorityGrouping>
 8015f6e:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8015f70:	687a      	ldr	r2, [r7, #4]
 8015f72:	68b9      	ldr	r1, [r7, #8]
 8015f74:	6978      	ldr	r0, [r7, #20]
 8015f76:	f7ff ffb3 	bl	8015ee0 <NVIC_EncodePriority>
 8015f7a:	4602      	mov	r2, r0
 8015f7c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8015f80:	4611      	mov	r1, r2
 8015f82:	4618      	mov	r0, r3
 8015f84:	f7ff ff82 	bl	8015e8c <__NVIC_SetPriority>
}
 8015f88:	bf00      	nop
 8015f8a:	3718      	adds	r7, #24
 8015f8c:	46bd      	mov	sp, r7
 8015f8e:	bd80      	pop	{r7, pc}

08015f90 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8015f90:	b580      	push	{r7, lr}
 8015f92:	b082      	sub	sp, #8
 8015f94:	af00      	add	r7, sp, #0
 8015f96:	4603      	mov	r3, r0
 8015f98:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8015f9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8015f9e:	4618      	mov	r0, r3
 8015fa0:	f7ff ff56 	bl	8015e50 <__NVIC_EnableIRQ>
}
 8015fa4:	bf00      	nop
 8015fa6:	3708      	adds	r7, #8
 8015fa8:	46bd      	mov	sp, r7
 8015faa:	bd80      	pop	{r7, pc}

08015fac <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8015fac:	b580      	push	{r7, lr}
 8015fae:	b084      	sub	sp, #16
 8015fb0:	af00      	add	r7, sp, #0
 8015fb2:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8015fb4:	687b      	ldr	r3, [r7, #4]
 8015fb6:	2b00      	cmp	r3, #0
 8015fb8:	d101      	bne.n	8015fbe <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8015fba:	2301      	movs	r3, #1
 8015fbc:	e08d      	b.n	80160da <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8015fbe:	687b      	ldr	r3, [r7, #4]
 8015fc0:	681b      	ldr	r3, [r3, #0]
 8015fc2:	461a      	mov	r2, r3
 8015fc4:	4b47      	ldr	r3, [pc, #284]	; (80160e4 <HAL_DMA_Init+0x138>)
 8015fc6:	429a      	cmp	r2, r3
 8015fc8:	d80f      	bhi.n	8015fea <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8015fca:	687b      	ldr	r3, [r7, #4]
 8015fcc:	681b      	ldr	r3, [r3, #0]
 8015fce:	461a      	mov	r2, r3
 8015fd0:	4b45      	ldr	r3, [pc, #276]	; (80160e8 <HAL_DMA_Init+0x13c>)
 8015fd2:	4413      	add	r3, r2
 8015fd4:	4a45      	ldr	r2, [pc, #276]	; (80160ec <HAL_DMA_Init+0x140>)
 8015fd6:	fba2 2303 	umull	r2, r3, r2, r3
 8015fda:	091b      	lsrs	r3, r3, #4
 8015fdc:	009a      	lsls	r2, r3, #2
 8015fde:	687b      	ldr	r3, [r7, #4]
 8015fe0:	64da      	str	r2, [r3, #76]	; 0x4c
    hdma->DmaBaseAddress = DMA1;
 8015fe2:	687b      	ldr	r3, [r7, #4]
 8015fe4:	4a42      	ldr	r2, [pc, #264]	; (80160f0 <HAL_DMA_Init+0x144>)
 8015fe6:	649a      	str	r2, [r3, #72]	; 0x48
 8015fe8:	e00e      	b.n	8016008 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8015fea:	687b      	ldr	r3, [r7, #4]
 8015fec:	681b      	ldr	r3, [r3, #0]
 8015fee:	461a      	mov	r2, r3
 8015ff0:	4b40      	ldr	r3, [pc, #256]	; (80160f4 <HAL_DMA_Init+0x148>)
 8015ff2:	4413      	add	r3, r2
 8015ff4:	4a3d      	ldr	r2, [pc, #244]	; (80160ec <HAL_DMA_Init+0x140>)
 8015ff6:	fba2 2303 	umull	r2, r3, r2, r3
 8015ffa:	091b      	lsrs	r3, r3, #4
 8015ffc:	009a      	lsls	r2, r3, #2
 8015ffe:	687b      	ldr	r3, [r7, #4]
 8016000:	64da      	str	r2, [r3, #76]	; 0x4c
    hdma->DmaBaseAddress = DMA2;
 8016002:	687b      	ldr	r3, [r7, #4]
 8016004:	4a3c      	ldr	r2, [pc, #240]	; (80160f8 <HAL_DMA_Init+0x14c>)
 8016006:	649a      	str	r2, [r3, #72]	; 0x48
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8016008:	687b      	ldr	r3, [r7, #4]
 801600a:	2202      	movs	r2, #2
 801600c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8016010:	687b      	ldr	r3, [r7, #4]
 8016012:	681b      	ldr	r3, [r3, #0]
 8016014:	681b      	ldr	r3, [r3, #0]
 8016016:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE   | DMA_CCR_PSIZE  |
 8016018:	68fb      	ldr	r3, [r7, #12]
 801601a:	f423 33ff 	bic.w	r3, r3, #130560	; 0x1fe00
 801601e:	f423 73f8 	bic.w	r3, r3, #496	; 0x1f0
 8016022:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC    | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM | DMA_CCR_CT     |
                      DMA_CCR_DBM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8016024:	687b      	ldr	r3, [r7, #4]
 8016026:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8016028:	687b      	ldr	r3, [r7, #4]
 801602a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 801602c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 801602e:	687b      	ldr	r3, [r7, #4]
 8016030:	691b      	ldr	r3, [r3, #16]
 8016032:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8016034:	687b      	ldr	r3, [r7, #4]
 8016036:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8016038:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 801603a:	687b      	ldr	r3, [r7, #4]
 801603c:	699b      	ldr	r3, [r3, #24]
 801603e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8016040:	687b      	ldr	r3, [r7, #4]
 8016042:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8016044:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8016046:	687b      	ldr	r3, [r7, #4]
 8016048:	6a1b      	ldr	r3, [r3, #32]
 801604a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 801604c:	68fa      	ldr	r2, [r7, #12]
 801604e:	4313      	orrs	r3, r2
 8016050:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8016052:	687b      	ldr	r3, [r7, #4]
 8016054:	681b      	ldr	r3, [r3, #0]
 8016056:	68fa      	ldr	r2, [r7, #12]
 8016058:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 801605a:	6878      	ldr	r0, [r7, #4]
 801605c:	f000 faf2 	bl	8016644 <DMA_CalcDMAMUXChannelBaseAndMask>

  if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8016060:	687b      	ldr	r3, [r7, #4]
 8016062:	689b      	ldr	r3, [r3, #8]
 8016064:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8016068:	d102      	bne.n	8016070 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 801606a:	687b      	ldr	r3, [r7, #4]
 801606c:	2200      	movs	r2, #0
 801606e:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8016070:	687b      	ldr	r3, [r7, #4]
 8016072:	685a      	ldr	r2, [r3, #4]
 8016074:	687b      	ldr	r3, [r7, #4]
 8016076:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8016078:	b2d2      	uxtb	r2, r2
 801607a:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 801607c:	687b      	ldr	r3, [r7, #4]
 801607e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8016080:	687a      	ldr	r2, [r7, #4]
 8016082:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8016084:	605a      	str	r2, [r3, #4]

  if(((hdma->Init.Request > 0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8016086:	687b      	ldr	r3, [r7, #4]
 8016088:	685b      	ldr	r3, [r3, #4]
 801608a:	2b00      	cmp	r3, #0
 801608c:	d010      	beq.n	80160b0 <HAL_DMA_Init+0x104>
 801608e:	687b      	ldr	r3, [r7, #4]
 8016090:	685b      	ldr	r3, [r3, #4]
 8016092:	2b04      	cmp	r3, #4
 8016094:	d80c      	bhi.n	80160b0 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8016096:	6878      	ldr	r0, [r7, #4]
 8016098:	f000 fb12 	bl	80166c0 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 801609c:	687b      	ldr	r3, [r7, #4]
 801609e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80160a0:	2200      	movs	r2, #0
 80160a2:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80160a4:	687b      	ldr	r3, [r7, #4]
 80160a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80160a8:	687a      	ldr	r2, [r7, #4]
 80160aa:	6e52      	ldr	r2, [r2, #100]	; 0x64
 80160ac:	605a      	str	r2, [r3, #4]
 80160ae:	e008      	b.n	80160c2 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80160b0:	687b      	ldr	r3, [r7, #4]
 80160b2:	2200      	movs	r2, #0
 80160b4:	65da      	str	r2, [r3, #92]	; 0x5c
    hdma->DMAmuxRequestGenStatus = 0U;
 80160b6:	687b      	ldr	r3, [r7, #4]
 80160b8:	2200      	movs	r2, #0
 80160ba:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80160bc:	687b      	ldr	r3, [r7, #4]
 80160be:	2200      	movs	r2, #0
 80160c0:	665a      	str	r2, [r3, #100]	; 0x64
  }

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80160c2:	687b      	ldr	r3, [r7, #4]
 80160c4:	2200      	movs	r2, #0
 80160c6:	645a      	str	r2, [r3, #68]	; 0x44

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80160c8:	687b      	ldr	r3, [r7, #4]
 80160ca:	2201      	movs	r2, #1
 80160cc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80160d0:	687b      	ldr	r3, [r7, #4]
 80160d2:	2200      	movs	r2, #0
 80160d4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80160d8:	2300      	movs	r3, #0
}
 80160da:	4618      	mov	r0, r3
 80160dc:	3710      	adds	r7, #16
 80160de:	46bd      	mov	sp, r7
 80160e0:	bd80      	pop	{r7, pc}
 80160e2:	bf00      	nop
 80160e4:	40020407 	.word	0x40020407
 80160e8:	bffdfff8 	.word	0xbffdfff8
 80160ec:	cccccccd 	.word	0xcccccccd
 80160f0:	40020000 	.word	0x40020000
 80160f4:	bffdfbf8 	.word	0xbffdfbf8
 80160f8:	40020400 	.word	0x40020400

080160fc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80160fc:	b580      	push	{r7, lr}
 80160fe:	b086      	sub	sp, #24
 8016100:	af00      	add	r7, sp, #0
 8016102:	60f8      	str	r0, [r7, #12]
 8016104:	60b9      	str	r1, [r7, #8]
 8016106:	607a      	str	r2, [r7, #4]
 8016108:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 801610a:	2300      	movs	r3, #0
 801610c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 801610e:	68fb      	ldr	r3, [r7, #12]
 8016110:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8016114:	2b01      	cmp	r3, #1
 8016116:	d101      	bne.n	801611c <HAL_DMA_Start_IT+0x20>
 8016118:	2302      	movs	r3, #2
 801611a:	e066      	b.n	80161ea <HAL_DMA_Start_IT+0xee>
 801611c:	68fb      	ldr	r3, [r7, #12]
 801611e:	2201      	movs	r2, #1
 8016120:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8016124:	68fb      	ldr	r3, [r7, #12]
 8016126:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 801612a:	b2db      	uxtb	r3, r3
 801612c:	2b01      	cmp	r3, #1
 801612e:	d155      	bne.n	80161dc <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8016130:	68fb      	ldr	r3, [r7, #12]
 8016132:	2202      	movs	r2, #2
 8016134:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8016138:	68fb      	ldr	r3, [r7, #12]
 801613a:	2200      	movs	r2, #0
 801613c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 801613e:	68fb      	ldr	r3, [r7, #12]
 8016140:	681b      	ldr	r3, [r3, #0]
 8016142:	681a      	ldr	r2, [r3, #0]
 8016144:	68fb      	ldr	r3, [r7, #12]
 8016146:	681b      	ldr	r3, [r3, #0]
 8016148:	f022 0201 	bic.w	r2, r2, #1
 801614c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 801614e:	683b      	ldr	r3, [r7, #0]
 8016150:	687a      	ldr	r2, [r7, #4]
 8016152:	68b9      	ldr	r1, [r7, #8]
 8016154:	68f8      	ldr	r0, [r7, #12]
 8016156:	f000 fa37 	bl	80165c8 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 801615a:	68fb      	ldr	r3, [r7, #12]
 801615c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801615e:	2b00      	cmp	r3, #0
 8016160:	d008      	beq.n	8016174 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8016162:	68fb      	ldr	r3, [r7, #12]
 8016164:	681b      	ldr	r3, [r3, #0]
 8016166:	681a      	ldr	r2, [r3, #0]
 8016168:	68fb      	ldr	r3, [r7, #12]
 801616a:	681b      	ldr	r3, [r3, #0]
 801616c:	f042 020e 	orr.w	r2, r2, #14
 8016170:	601a      	str	r2, [r3, #0]
 8016172:	e00f      	b.n	8016194 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8016174:	68fb      	ldr	r3, [r7, #12]
 8016176:	681b      	ldr	r3, [r3, #0]
 8016178:	681a      	ldr	r2, [r3, #0]
 801617a:	68fb      	ldr	r3, [r7, #12]
 801617c:	681b      	ldr	r3, [r3, #0]
 801617e:	f022 0204 	bic.w	r2, r2, #4
 8016182:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8016184:	68fb      	ldr	r3, [r7, #12]
 8016186:	681b      	ldr	r3, [r3, #0]
 8016188:	681a      	ldr	r2, [r3, #0]
 801618a:	68fb      	ldr	r3, [r7, #12]
 801618c:	681b      	ldr	r3, [r3, #0]
 801618e:	f042 020a 	orr.w	r2, r2, #10
 8016192:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8016194:	68fb      	ldr	r3, [r7, #12]
 8016196:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8016198:	681b      	ldr	r3, [r3, #0]
 801619a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 801619e:	2b00      	cmp	r3, #0
 80161a0:	d007      	beq.n	80161b2 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80161a2:	68fb      	ldr	r3, [r7, #12]
 80161a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80161a6:	681a      	ldr	r2, [r3, #0]
 80161a8:	68fb      	ldr	r3, [r7, #12]
 80161aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80161ac:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80161b0:	601a      	str	r2, [r3, #0]
    }

    if(hdma->DMAmuxRequestGen != 0U)
 80161b2:	68fb      	ldr	r3, [r7, #12]
 80161b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80161b6:	2b00      	cmp	r3, #0
 80161b8:	d007      	beq.n	80161ca <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80161ba:	68fb      	ldr	r3, [r7, #12]
 80161bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80161be:	681a      	ldr	r2, [r3, #0]
 80161c0:	68fb      	ldr	r3, [r7, #12]
 80161c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80161c4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80161c8:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80161ca:	68fb      	ldr	r3, [r7, #12]
 80161cc:	681b      	ldr	r3, [r3, #0]
 80161ce:	681a      	ldr	r2, [r3, #0]
 80161d0:	68fb      	ldr	r3, [r7, #12]
 80161d2:	681b      	ldr	r3, [r3, #0]
 80161d4:	f042 0201 	orr.w	r2, r2, #1
 80161d8:	601a      	str	r2, [r3, #0]
 80161da:	e005      	b.n	80161e8 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80161dc:	68fb      	ldr	r3, [r7, #12]
 80161de:	2200      	movs	r2, #0
 80161e0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80161e4:	2302      	movs	r3, #2
 80161e6:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80161e8:	7dfb      	ldrb	r3, [r7, #23]
}
 80161ea:	4618      	mov	r0, r3
 80161ec:	3718      	adds	r7, #24
 80161ee:	46bd      	mov	sp, r7
 80161f0:	bd80      	pop	{r7, pc}

080161f2 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80161f2:	b480      	push	{r7}
 80161f4:	b085      	sub	sp, #20
 80161f6:	af00      	add	r7, sp, #0
 80161f8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80161fa:	2300      	movs	r3, #0
 80161fc:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80161fe:	687b      	ldr	r3, [r7, #4]
 8016200:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8016204:	b2db      	uxtb	r3, r3
 8016206:	2b02      	cmp	r3, #2
 8016208:	d008      	beq.n	801621c <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 801620a:	687b      	ldr	r3, [r7, #4]
 801620c:	2204      	movs	r2, #4
 801620e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8016210:	687b      	ldr	r3, [r7, #4]
 8016212:	2200      	movs	r2, #0
 8016214:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8016218:	2301      	movs	r3, #1
 801621a:	e040      	b.n	801629e <HAL_DMA_Abort+0xac>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 801621c:	687b      	ldr	r3, [r7, #4]
 801621e:	681b      	ldr	r3, [r3, #0]
 8016220:	681a      	ldr	r2, [r3, #0]
 8016222:	687b      	ldr	r3, [r7, #4]
 8016224:	681b      	ldr	r3, [r3, #0]
 8016226:	f022 020e 	bic.w	r2, r2, #14
 801622a:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 801622c:	687b      	ldr	r3, [r7, #4]
 801622e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8016230:	681a      	ldr	r2, [r3, #0]
 8016232:	687b      	ldr	r3, [r7, #4]
 8016234:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8016236:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 801623a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 801623c:	687b      	ldr	r3, [r7, #4]
 801623e:	681b      	ldr	r3, [r3, #0]
 8016240:	681a      	ldr	r2, [r3, #0]
 8016242:	687b      	ldr	r3, [r7, #4]
 8016244:	681b      	ldr	r3, [r3, #0]
 8016246:	f022 0201 	bic.w	r2, r2, #1
 801624a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 801624c:	687b      	ldr	r3, [r7, #4]
 801624e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8016250:	f003 021c 	and.w	r2, r3, #28
 8016254:	687b      	ldr	r3, [r7, #4]
 8016256:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8016258:	2101      	movs	r1, #1
 801625a:	fa01 f202 	lsl.w	r2, r1, r2
 801625e:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8016260:	687b      	ldr	r3, [r7, #4]
 8016262:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8016264:	687a      	ldr	r2, [r7, #4]
 8016266:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8016268:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 801626a:	687b      	ldr	r3, [r7, #4]
 801626c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801626e:	2b00      	cmp	r3, #0
 8016270:	d00c      	beq.n	801628c <HAL_DMA_Abort+0x9a>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8016272:	687b      	ldr	r3, [r7, #4]
 8016274:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8016276:	681a      	ldr	r2, [r3, #0]
 8016278:	687b      	ldr	r3, [r7, #4]
 801627a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801627c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8016280:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8016282:	687b      	ldr	r3, [r7, #4]
 8016284:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8016286:	687a      	ldr	r2, [r7, #4]
 8016288:	6e52      	ldr	r2, [r2, #100]	; 0x64
 801628a:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 801628c:	687b      	ldr	r3, [r7, #4]
 801628e:	2201      	movs	r2, #1
 8016290:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8016294:	687b      	ldr	r3, [r7, #4]
 8016296:	2200      	movs	r2, #0
 8016298:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 801629c:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 801629e:	4618      	mov	r0, r3
 80162a0:	3714      	adds	r7, #20
 80162a2:	46bd      	mov	sp, r7
 80162a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80162a8:	4770      	bx	lr

080162aa <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80162aa:	b580      	push	{r7, lr}
 80162ac:	b084      	sub	sp, #16
 80162ae:	af00      	add	r7, sp, #0
 80162b0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80162b2:	2300      	movs	r3, #0
 80162b4:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 80162b6:	687b      	ldr	r3, [r7, #4]
 80162b8:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80162bc:	b2db      	uxtb	r3, r3
 80162be:	2b02      	cmp	r3, #2
 80162c0:	d005      	beq.n	80162ce <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80162c2:	687b      	ldr	r3, [r7, #4]
 80162c4:	2204      	movs	r2, #4
 80162c6:	645a      	str	r2, [r3, #68]	; 0x44

    status = HAL_ERROR;
 80162c8:	2301      	movs	r3, #1
 80162ca:	73fb      	strb	r3, [r7, #15]
 80162cc:	e047      	b.n	801635e <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80162ce:	687b      	ldr	r3, [r7, #4]
 80162d0:	681b      	ldr	r3, [r3, #0]
 80162d2:	681a      	ldr	r2, [r3, #0]
 80162d4:	687b      	ldr	r3, [r7, #4]
 80162d6:	681b      	ldr	r3, [r3, #0]
 80162d8:	f022 020e 	bic.w	r2, r2, #14
 80162dc:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80162de:	687b      	ldr	r3, [r7, #4]
 80162e0:	681b      	ldr	r3, [r3, #0]
 80162e2:	681a      	ldr	r2, [r3, #0]
 80162e4:	687b      	ldr	r3, [r7, #4]
 80162e6:	681b      	ldr	r3, [r3, #0]
 80162e8:	f022 0201 	bic.w	r2, r2, #1
 80162ec:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80162ee:	687b      	ldr	r3, [r7, #4]
 80162f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80162f2:	681a      	ldr	r2, [r3, #0]
 80162f4:	687b      	ldr	r3, [r7, #4]
 80162f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80162f8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80162fc:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80162fe:	687b      	ldr	r3, [r7, #4]
 8016300:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8016302:	f003 021c 	and.w	r2, r3, #28
 8016306:	687b      	ldr	r3, [r7, #4]
 8016308:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801630a:	2101      	movs	r1, #1
 801630c:	fa01 f202 	lsl.w	r2, r1, r2
 8016310:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8016312:	687b      	ldr	r3, [r7, #4]
 8016314:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8016316:	687a      	ldr	r2, [r7, #4]
 8016318:	6d92      	ldr	r2, [r2, #88]	; 0x58
 801631a:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 801631c:	687b      	ldr	r3, [r7, #4]
 801631e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8016320:	2b00      	cmp	r3, #0
 8016322:	d00c      	beq.n	801633e <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8016324:	687b      	ldr	r3, [r7, #4]
 8016326:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8016328:	681a      	ldr	r2, [r3, #0]
 801632a:	687b      	ldr	r3, [r7, #4]
 801632c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801632e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8016332:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8016334:	687b      	ldr	r3, [r7, #4]
 8016336:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8016338:	687a      	ldr	r2, [r7, #4]
 801633a:	6e52      	ldr	r2, [r2, #100]	; 0x64
 801633c:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 801633e:	687b      	ldr	r3, [r7, #4]
 8016340:	2201      	movs	r2, #1
 8016342:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8016346:	687b      	ldr	r3, [r7, #4]
 8016348:	2200      	movs	r2, #0
 801634a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 801634e:	687b      	ldr	r3, [r7, #4]
 8016350:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016352:	2b00      	cmp	r3, #0
 8016354:	d003      	beq.n	801635e <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8016356:	687b      	ldr	r3, [r7, #4]
 8016358:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801635a:	6878      	ldr	r0, [r7, #4]
 801635c:	4798      	blx	r3
    }
  }
  return status;
 801635e:	7bfb      	ldrb	r3, [r7, #15]
}
 8016360:	4618      	mov	r0, r3
 8016362:	3710      	adds	r7, #16
 8016364:	46bd      	mov	sp, r7
 8016366:	bd80      	pop	{r7, pc}

08016368 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8016368:	b580      	push	{r7, lr}
 801636a:	b084      	sub	sp, #16
 801636c:	af00      	add	r7, sp, #0
 801636e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8016370:	687b      	ldr	r3, [r7, #4]
 8016372:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8016374:	681b      	ldr	r3, [r3, #0]
 8016376:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8016378:	687b      	ldr	r3, [r7, #4]
 801637a:	681b      	ldr	r3, [r3, #0]
 801637c:	681b      	ldr	r3, [r3, #0]
 801637e:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8016380:	687b      	ldr	r3, [r7, #4]
 8016382:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8016384:	f003 031c 	and.w	r3, r3, #28
 8016388:	2204      	movs	r2, #4
 801638a:	409a      	lsls	r2, r3
 801638c:	68fb      	ldr	r3, [r7, #12]
 801638e:	4013      	ands	r3, r2
 8016390:	2b00      	cmp	r3, #0
 8016392:	d053      	beq.n	801643c <HAL_DMA_IRQHandler+0xd4>
 8016394:	68bb      	ldr	r3, [r7, #8]
 8016396:	f003 0304 	and.w	r3, r3, #4
 801639a:	2b00      	cmp	r3, #0
 801639c:	d04e      	beq.n	801643c <HAL_DMA_IRQHandler+0xd4>
  {
    /* Multi_Buffering mode enabled */
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 801639e:	687b      	ldr	r3, [r7, #4]
 80163a0:	681b      	ldr	r3, [r3, #0]
 80163a2:	681b      	ldr	r3, [r3, #0]
 80163a4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80163a8:	2b00      	cmp	r3, #0
 80163aa:	d024      	beq.n	80163f6 <HAL_DMA_IRQHandler+0x8e>
    {
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80163ac:	687b      	ldr	r3, [r7, #4]
 80163ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80163b0:	f003 021c 	and.w	r2, r3, #28
 80163b4:	687b      	ldr	r3, [r7, #4]
 80163b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80163b8:	2104      	movs	r1, #4
 80163ba:	fa01 f202 	lsl.w	r2, r1, r2
 80163be:	605a      	str	r2, [r3, #4]

      /* Current memory buffer used is Memory 0 */
      if((hdma->Instance->CCR & DMA_CCR_CT) == 0U)
 80163c0:	687b      	ldr	r3, [r7, #4]
 80163c2:	681b      	ldr	r3, [r3, #0]
 80163c4:	681b      	ldr	r3, [r3, #0]
 80163c6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80163ca:	2b00      	cmp	r3, #0
 80163cc:	d109      	bne.n	80163e2 <HAL_DMA_IRQHandler+0x7a>
      {
        if(hdma->XferHalfCpltCallback != NULL)
 80163ce:	687b      	ldr	r3, [r7, #4]
 80163d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80163d2:	2b00      	cmp	r3, #0
 80163d4:	f000 80c0 	beq.w	8016558 <HAL_DMA_IRQHandler+0x1f0>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80163d8:	687b      	ldr	r3, [r7, #4]
 80163da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80163dc:	6878      	ldr	r0, [r7, #4]
 80163de:	4798      	blx	r3
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 80163e0:	e0ba      	b.n	8016558 <HAL_DMA_IRQHandler+0x1f0>
        }
      }
      /* Current memory buffer used is Memory 1 */
      else
      {
        if(hdma->XferM1HalfCpltCallback != NULL)
 80163e2:	687b      	ldr	r3, [r7, #4]
 80163e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80163e6:	2b00      	cmp	r3, #0
 80163e8:	f000 80b6 	beq.w	8016558 <HAL_DMA_IRQHandler+0x1f0>
        {
          /* Half transfer callback */
          hdma->XferM1HalfCpltCallback(hdma);
 80163ec:	687b      	ldr	r3, [r7, #4]
 80163ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80163f0:	6878      	ldr	r0, [r7, #4]
 80163f2:	4798      	blx	r3
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 80163f4:	e0b0      	b.n	8016558 <HAL_DMA_IRQHandler+0x1f0>
      }
    }
    else
    {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80163f6:	687b      	ldr	r3, [r7, #4]
 80163f8:	681b      	ldr	r3, [r3, #0]
 80163fa:	681b      	ldr	r3, [r3, #0]
 80163fc:	f003 0320 	and.w	r3, r3, #32
 8016400:	2b00      	cmp	r3, #0
 8016402:	d107      	bne.n	8016414 <HAL_DMA_IRQHandler+0xac>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8016404:	687b      	ldr	r3, [r7, #4]
 8016406:	681b      	ldr	r3, [r3, #0]
 8016408:	681a      	ldr	r2, [r3, #0]
 801640a:	687b      	ldr	r3, [r7, #4]
 801640c:	681b      	ldr	r3, [r3, #0]
 801640e:	f022 0204 	bic.w	r2, r2, #4
 8016412:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8016414:	687b      	ldr	r3, [r7, #4]
 8016416:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8016418:	f003 021c 	and.w	r2, r3, #28
 801641c:	687b      	ldr	r3, [r7, #4]
 801641e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8016420:	2104      	movs	r1, #4
 8016422:	fa01 f202 	lsl.w	r2, r1, r2
 8016426:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8016428:	687b      	ldr	r3, [r7, #4]
 801642a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801642c:	2b00      	cmp	r3, #0
 801642e:	f000 8093 	beq.w	8016558 <HAL_DMA_IRQHandler+0x1f0>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8016432:	687b      	ldr	r3, [r7, #4]
 8016434:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016436:	6878      	ldr	r0, [r7, #4]
 8016438:	4798      	blx	r3
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 801643a:	e08d      	b.n	8016558 <HAL_DMA_IRQHandler+0x1f0>
      }
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 801643c:	687b      	ldr	r3, [r7, #4]
 801643e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8016440:	f003 031c 	and.w	r3, r3, #28
 8016444:	2202      	movs	r2, #2
 8016446:	409a      	lsls	r2, r3
 8016448:	68fb      	ldr	r3, [r7, #12]
 801644a:	4013      	ands	r3, r2
 801644c:	2b00      	cmp	r3, #0
 801644e:	d04e      	beq.n	80164ee <HAL_DMA_IRQHandler+0x186>
 8016450:	68bb      	ldr	r3, [r7, #8]
 8016452:	f003 0302 	and.w	r3, r3, #2
 8016456:	2b00      	cmp	r3, #0
 8016458:	d049      	beq.n	80164ee <HAL_DMA_IRQHandler+0x186>
  {
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 801645a:	687b      	ldr	r3, [r7, #4]
 801645c:	681b      	ldr	r3, [r3, #0]
 801645e:	681b      	ldr	r3, [r3, #0]
 8016460:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8016464:	2b00      	cmp	r3, #0
 8016466:	d018      	beq.n	801649a <HAL_DMA_IRQHandler+0x132>
    {
      /* Current memory buffer used is Memory 0 */
      if((hdma->Instance->CCR & DMA_CCR_CT) == 0U)
 8016468:	687b      	ldr	r3, [r7, #4]
 801646a:	681b      	ldr	r3, [r3, #0]
 801646c:	681b      	ldr	r3, [r3, #0]
 801646e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8016472:	2b00      	cmp	r3, #0
 8016474:	d108      	bne.n	8016488 <HAL_DMA_IRQHandler+0x120>
      {
        if(hdma->XferM1CpltCallback != NULL)
 8016476:	687b      	ldr	r3, [r7, #4]
 8016478:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801647a:	2b00      	cmp	r3, #0
 801647c:	d06e      	beq.n	801655c <HAL_DMA_IRQHandler+0x1f4>
        {
          /* Transfer complete Callback for memory1 */
          hdma->XferM1CpltCallback(hdma);
 801647e:	687b      	ldr	r3, [r7, #4]
 8016480:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8016482:	6878      	ldr	r0, [r7, #4]
 8016484:	4798      	blx	r3
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 8016486:	e069      	b.n	801655c <HAL_DMA_IRQHandler+0x1f4>
        }
      }
      /* Current memory buffer used is Memory 1 */
      else
      {
        if(hdma->XferCpltCallback != NULL)
 8016488:	687b      	ldr	r3, [r7, #4]
 801648a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801648c:	2b00      	cmp	r3, #0
 801648e:	d065      	beq.n	801655c <HAL_DMA_IRQHandler+0x1f4>
        {
          /* Transfer complete Callback for memory0 */
          hdma->XferCpltCallback(hdma);
 8016490:	687b      	ldr	r3, [r7, #4]
 8016492:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016494:	6878      	ldr	r0, [r7, #4]
 8016496:	4798      	blx	r3
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 8016498:	e060      	b.n	801655c <HAL_DMA_IRQHandler+0x1f4>
        }
      }
    }
    else
    {
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 801649a:	687b      	ldr	r3, [r7, #4]
 801649c:	681b      	ldr	r3, [r3, #0]
 801649e:	681b      	ldr	r3, [r3, #0]
 80164a0:	f003 0320 	and.w	r3, r3, #32
 80164a4:	2b00      	cmp	r3, #0
 80164a6:	d10b      	bne.n	80164c0 <HAL_DMA_IRQHandler+0x158>
      {
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        /* Disable the transfer complete and error interrupt */
        /* if the DMA mode is not CIRCULAR  */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80164a8:	687b      	ldr	r3, [r7, #4]
 80164aa:	681b      	ldr	r3, [r3, #0]
 80164ac:	681a      	ldr	r2, [r3, #0]
 80164ae:	687b      	ldr	r3, [r7, #4]
 80164b0:	681b      	ldr	r3, [r3, #0]
 80164b2:	f022 020a 	bic.w	r2, r2, #10
 80164b6:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80164b8:	687b      	ldr	r3, [r7, #4]
 80164ba:	2201      	movs	r2, #1
 80164bc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
      }
      /* Clear the transfer complete flag */
      hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 80164c0:	687b      	ldr	r3, [r7, #4]
 80164c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80164c4:	f003 021c 	and.w	r2, r3, #28
 80164c8:	687b      	ldr	r3, [r7, #4]
 80164ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80164cc:	2102      	movs	r1, #2
 80164ce:	fa01 f202 	lsl.w	r2, r1, r2
 80164d2:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80164d4:	687b      	ldr	r3, [r7, #4]
 80164d6:	2200      	movs	r2, #0
 80164d8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

      if(hdma->XferCpltCallback != NULL)
 80164dc:	687b      	ldr	r3, [r7, #4]
 80164de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80164e0:	2b00      	cmp	r3, #0
 80164e2:	d03b      	beq.n	801655c <HAL_DMA_IRQHandler+0x1f4>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 80164e4:	687b      	ldr	r3, [r7, #4]
 80164e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80164e8:	6878      	ldr	r0, [r7, #4]
 80164ea:	4798      	blx	r3
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 80164ec:	e036      	b.n	801655c <HAL_DMA_IRQHandler+0x1f4>
      }
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 80164ee:	687b      	ldr	r3, [r7, #4]
 80164f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80164f2:	f003 031c 	and.w	r3, r3, #28
 80164f6:	2208      	movs	r2, #8
 80164f8:	409a      	lsls	r2, r3
 80164fa:	68fb      	ldr	r3, [r7, #12]
 80164fc:	4013      	ands	r3, r2
 80164fe:	2b00      	cmp	r3, #0
 8016500:	d02e      	beq.n	8016560 <HAL_DMA_IRQHandler+0x1f8>
 8016502:	68bb      	ldr	r3, [r7, #8]
 8016504:	f003 0308 	and.w	r3, r3, #8
 8016508:	2b00      	cmp	r3, #0
 801650a:	d029      	beq.n	8016560 <HAL_DMA_IRQHandler+0x1f8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 801650c:	687b      	ldr	r3, [r7, #4]
 801650e:	681b      	ldr	r3, [r3, #0]
 8016510:	681a      	ldr	r2, [r3, #0]
 8016512:	687b      	ldr	r3, [r7, #4]
 8016514:	681b      	ldr	r3, [r3, #0]
 8016516:	f022 020e 	bic.w	r2, r2, #14
 801651a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 801651c:	687b      	ldr	r3, [r7, #4]
 801651e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8016520:	f003 021c 	and.w	r2, r3, #28
 8016524:	687b      	ldr	r3, [r7, #4]
 8016526:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8016528:	2101      	movs	r1, #1
 801652a:	fa01 f202 	lsl.w	r2, r1, r2
 801652e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8016530:	687b      	ldr	r3, [r7, #4]
 8016532:	2201      	movs	r2, #1
 8016534:	645a      	str	r2, [r3, #68]	; 0x44

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8016536:	687b      	ldr	r3, [r7, #4]
 8016538:	2201      	movs	r2, #1
 801653a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 801653e:	687b      	ldr	r3, [r7, #4]
 8016540:	2200      	movs	r2, #0
 8016542:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8016546:	687b      	ldr	r3, [r7, #4]
 8016548:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801654a:	2b00      	cmp	r3, #0
 801654c:	d008      	beq.n	8016560 <HAL_DMA_IRQHandler+0x1f8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 801654e:	687b      	ldr	r3, [r7, #4]
 8016550:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8016552:	6878      	ldr	r0, [r7, #4]
 8016554:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8016556:	e002      	b.n	801655e <HAL_DMA_IRQHandler+0x1f6>
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 8016558:	bf00      	nop
 801655a:	e000      	b.n	801655e <HAL_DMA_IRQHandler+0x1f6>
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 801655c:	bf00      	nop
  return;
 801655e:	bf00      	nop
 8016560:	bf00      	nop
}
 8016562:	3710      	adds	r7, #16
 8016564:	46bd      	mov	sp, r7
 8016566:	bd80      	pop	{r7, pc}

08016568 <HAL_DMA_ConfigChannelAttributes>:
  * @param  ChannelAttributes specifies the DMA channel secure/privilege attributes.
  *         This parameter can be a one or a combination of @ref DMA_Channel_Attributes
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_DMA_ConfigChannelAttributes(DMA_HandleTypeDef *hdma, uint32_t ChannelAttributes)
{
 8016568:	b480      	push	{r7}
 801656a:	b085      	sub	sp, #20
 801656c:	af00      	add	r7, sp, #0
 801656e:	6078      	str	r0, [r7, #4]
 8016570:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8016572:	2300      	movs	r3, #0
 8016574:	72fb      	strb	r3, [r7, #11]
#if defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U)
  uint32_t ccr_SECM;
#endif
  
  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8016576:	687b      	ldr	r3, [r7, #4]
 8016578:	2b00      	cmp	r3, #0
 801657a:	d103      	bne.n	8016584 <HAL_DMA_ConfigChannelAttributes+0x1c>
  {
    status = HAL_ERROR;
 801657c:	2301      	movs	r3, #1
 801657e:	72fb      	strb	r3, [r7, #11]
    return status;
 8016580:	7afb      	ldrb	r3, [r7, #11]
 8016582:	e01b      	b.n	80165bc <HAL_DMA_ConfigChannelAttributes+0x54>

  /* Check the parameters */
  assert_param(IS_DMA_ATTRIBUTES(ChannelAttributes));

  /* Read CCR register */
  ccr = READ_REG(hdma->Instance->CCR);
 8016584:	687b      	ldr	r3, [r7, #4]
 8016586:	681b      	ldr	r3, [r3, #0]
 8016588:	681b      	ldr	r3, [r3, #0]
 801658a:	60fb      	str	r3, [r7, #12]

  /* Apply any requested privilege/non-privilege attributes */
  if ((ChannelAttributes & DMA_CHANNEL_ATTR_PRIV_MASK) != 0U)
 801658c:	683b      	ldr	r3, [r7, #0]
 801658e:	f003 0310 	and.w	r3, r3, #16
 8016592:	2b00      	cmp	r3, #0
 8016594:	d00d      	beq.n	80165b2 <HAL_DMA_ConfigChannelAttributes+0x4a>
  {
    if((ChannelAttributes & DMA_CCR_PRIV) != 0U)
 8016596:	683b      	ldr	r3, [r7, #0]
 8016598:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 801659c:	2b00      	cmp	r3, #0
 801659e:	d004      	beq.n	80165aa <HAL_DMA_ConfigChannelAttributes+0x42>
    {
      SET_BIT(ccr, DMA_CCR_PRIV);
 80165a0:	68fb      	ldr	r3, [r7, #12]
 80165a2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80165a6:	60fb      	str	r3, [r7, #12]
 80165a8:	e003      	b.n	80165b2 <HAL_DMA_ConfigChannelAttributes+0x4a>
    }
    else
    {
      CLEAR_BIT(ccr, DMA_CCR_PRIV);
 80165aa:	68fb      	ldr	r3, [r7, #12]
 80165ac:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80165b0:	60fb      	str	r3, [r7, #12]
  }

#endif /* __ARM_FEATURE_CMSE */

  /* Update CCR Register: PRIV, SECM, SCEC, DSEC bits */
  WRITE_REG(hdma->Instance->CCR, ccr);
 80165b2:	687b      	ldr	r3, [r7, #4]
 80165b4:	681b      	ldr	r3, [r3, #0]
 80165b6:	68fa      	ldr	r2, [r7, #12]
 80165b8:	601a      	str	r2, [r3, #0]

  return status;
 80165ba:	7afb      	ldrb	r3, [r7, #11]
}
 80165bc:	4618      	mov	r0, r3
 80165be:	3714      	adds	r7, #20
 80165c0:	46bd      	mov	sp, r7
 80165c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80165c6:	4770      	bx	lr

080165c8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80165c8:	b480      	push	{r7}
 80165ca:	b085      	sub	sp, #20
 80165cc:	af00      	add	r7, sp, #0
 80165ce:	60f8      	str	r0, [r7, #12]
 80165d0:	60b9      	str	r1, [r7, #8]
 80165d2:	607a      	str	r2, [r7, #4]
 80165d4:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80165d6:	68fb      	ldr	r3, [r7, #12]
 80165d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80165da:	68fa      	ldr	r2, [r7, #12]
 80165dc:	6d92      	ldr	r2, [r2, #88]	; 0x58
 80165de:	605a      	str	r2, [r3, #4]

  if(hdma->DMAmuxRequestGen != 0U)
 80165e0:	68fb      	ldr	r3, [r7, #12]
 80165e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80165e4:	2b00      	cmp	r3, #0
 80165e6:	d004      	beq.n	80165f2 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80165e8:	68fb      	ldr	r3, [r7, #12]
 80165ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80165ec:	68fa      	ldr	r2, [r7, #12]
 80165ee:	6e52      	ldr	r2, [r2, #100]	; 0x64
 80165f0:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80165f2:	68fb      	ldr	r3, [r7, #12]
 80165f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80165f6:	f003 021c 	and.w	r2, r3, #28
 80165fa:	68fb      	ldr	r3, [r7, #12]
 80165fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80165fe:	2101      	movs	r1, #1
 8016600:	fa01 f202 	lsl.w	r2, r1, r2
 8016604:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8016606:	68fb      	ldr	r3, [r7, #12]
 8016608:	681b      	ldr	r3, [r3, #0]
 801660a:	683a      	ldr	r2, [r7, #0]
 801660c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 801660e:	68fb      	ldr	r3, [r7, #12]
 8016610:	689b      	ldr	r3, [r3, #8]
 8016612:	2b10      	cmp	r3, #16
 8016614:	d108      	bne.n	8016628 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8016616:	68fb      	ldr	r3, [r7, #12]
 8016618:	681b      	ldr	r3, [r3, #0]
 801661a:	687a      	ldr	r2, [r7, #4]
 801661c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CM0AR = SrcAddress;
 801661e:	68fb      	ldr	r3, [r7, #12]
 8016620:	681b      	ldr	r3, [r3, #0]
 8016622:	68ba      	ldr	r2, [r7, #8]
 8016624:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CM0AR = DstAddress;
  }
}
 8016626:	e007      	b.n	8016638 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8016628:	68fb      	ldr	r3, [r7, #12]
 801662a:	681b      	ldr	r3, [r3, #0]
 801662c:	68ba      	ldr	r2, [r7, #8]
 801662e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CM0AR = DstAddress;
 8016630:	68fb      	ldr	r3, [r7, #12]
 8016632:	681b      	ldr	r3, [r3, #0]
 8016634:	687a      	ldr	r2, [r7, #4]
 8016636:	60da      	str	r2, [r3, #12]
}
 8016638:	bf00      	nop
 801663a:	3714      	adds	r7, #20
 801663c:	46bd      	mov	sp, r7
 801663e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016642:	4770      	bx	lr

08016644 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8016644:	b480      	push	{r7}
 8016646:	b085      	sub	sp, #20
 8016648:	af00      	add	r7, sp, #0
 801664a:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 801664c:	687b      	ldr	r3, [r7, #4]
 801664e:	681b      	ldr	r3, [r3, #0]
 8016650:	461a      	mov	r2, r3
 8016652:	4b17      	ldr	r3, [pc, #92]	; (80166b0 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8016654:	429a      	cmp	r2, r3
 8016656:	d80a      	bhi.n	801666e <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8016658:	687b      	ldr	r3, [r7, #4]
 801665a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801665c:	089b      	lsrs	r3, r3, #2
 801665e:	009b      	lsls	r3, r3, #2
 8016660:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8016664:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 8016668:	687a      	ldr	r2, [r7, #4]
 801666a:	6513      	str	r3, [r2, #80]	; 0x50
 801666c:	e007      	b.n	801667e <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel8 + (hdma->ChannelIndex >> 2U));
 801666e:	687b      	ldr	r3, [r7, #4]
 8016670:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8016672:	089b      	lsrs	r3, r3, #2
 8016674:	009a      	lsls	r2, r3, #2
 8016676:	4b0f      	ldr	r3, [pc, #60]	; (80166b4 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8016678:	4413      	add	r3, r2
 801667a:	687a      	ldr	r2, [r7, #4]
 801667c:	6513      	str	r3, [r2, #80]	; 0x50
  }

  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 801667e:	687b      	ldr	r3, [r7, #4]
 8016680:	681b      	ldr	r3, [r3, #0]
 8016682:	b2db      	uxtb	r3, r3
 8016684:	3b08      	subs	r3, #8
 8016686:	4a0c      	ldr	r2, [pc, #48]	; (80166b8 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8016688:	fba2 2303 	umull	r2, r3, r2, r3
 801668c:	091b      	lsrs	r3, r3, #4
 801668e:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8016690:	687b      	ldr	r3, [r7, #4]
 8016692:	4a0a      	ldr	r2, [pc, #40]	; (80166bc <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8016694:	655a      	str	r2, [r3, #84]	; 0x54
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8016696:	68fb      	ldr	r3, [r7, #12]
 8016698:	f003 031f 	and.w	r3, r3, #31
 801669c:	2201      	movs	r2, #1
 801669e:	409a      	lsls	r2, r3
 80166a0:	687b      	ldr	r3, [r7, #4]
 80166a2:	659a      	str	r2, [r3, #88]	; 0x58
}
 80166a4:	bf00      	nop
 80166a6:	3714      	adds	r7, #20
 80166a8:	46bd      	mov	sp, r7
 80166aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80166ae:	4770      	bx	lr
 80166b0:	40020407 	.word	0x40020407
 80166b4:	40020820 	.word	0x40020820
 80166b8:	cccccccd 	.word	0xcccccccd
 80166bc:	40020880 	.word	0x40020880

080166c0 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80166c0:	b480      	push	{r7}
 80166c2:	b085      	sub	sp, #20
 80166c4:	af00      	add	r7, sp, #0
 80166c6:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80166c8:	687b      	ldr	r3, [r7, #4]
 80166ca:	685b      	ldr	r3, [r3, #4]
 80166cc:	b2db      	uxtb	r3, r3
 80166ce:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80166d0:	68fa      	ldr	r2, [r7, #12]
 80166d2:	4b0b      	ldr	r3, [pc, #44]	; (8016700 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80166d4:	4413      	add	r3, r2
 80166d6:	009b      	lsls	r3, r3, #2
 80166d8:	461a      	mov	r2, r3
 80166da:	687b      	ldr	r3, [r7, #4]
 80166dc:	65da      	str	r2, [r3, #92]	; 0x5c

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80166de:	687b      	ldr	r3, [r7, #4]
 80166e0:	4a08      	ldr	r2, [pc, #32]	; (8016704 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80166e2:	661a      	str	r2, [r3, #96]	; 0x60

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 80166e4:	68fb      	ldr	r3, [r7, #12]
 80166e6:	3b01      	subs	r3, #1
 80166e8:	f003 0303 	and.w	r3, r3, #3
 80166ec:	2201      	movs	r2, #1
 80166ee:	409a      	lsls	r2, r3
 80166f0:	687b      	ldr	r3, [r7, #4]
 80166f2:	665a      	str	r2, [r3, #100]	; 0x64
}
 80166f4:	bf00      	nop
 80166f6:	3714      	adds	r7, #20
 80166f8:	46bd      	mov	sp, r7
 80166fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80166fe:	4770      	bx	lr
 8016700:	1000823f 	.word	0x1000823f
 8016704:	40020940 	.word	0x40020940

08016708 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8016708:	b480      	push	{r7}
 801670a:	b087      	sub	sp, #28
 801670c:	af00      	add	r7, sp, #0
 801670e:	6078      	str	r0, [r7, #4]
 8016710:	6039      	str	r1, [r7, #0]
  uint32_t position = 0U;
 8016712:	2300      	movs	r3, #0
 8016714:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8016716:	e158      	b.n	80169ca <HAL_GPIO_Init+0x2c2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8016718:	683b      	ldr	r3, [r7, #0]
 801671a:	681a      	ldr	r2, [r3, #0]
 801671c:	2101      	movs	r1, #1
 801671e:	697b      	ldr	r3, [r7, #20]
 8016720:	fa01 f303 	lsl.w	r3, r1, r3
 8016724:	4013      	ands	r3, r2
 8016726:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 8016728:	68fb      	ldr	r3, [r7, #12]
 801672a:	2b00      	cmp	r3, #0
 801672c:	f000 814a 	beq.w	80169c4 <HAL_GPIO_Init+0x2bc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8016730:	683b      	ldr	r3, [r7, #0]
 8016732:	685b      	ldr	r3, [r3, #4]
 8016734:	f003 0303 	and.w	r3, r3, #3
 8016738:	2b01      	cmp	r3, #1
 801673a:	d005      	beq.n	8016748 <HAL_GPIO_Init+0x40>
 801673c:	683b      	ldr	r3, [r7, #0]
 801673e:	685b      	ldr	r3, [r3, #4]
 8016740:	f003 0303 	and.w	r3, r3, #3
 8016744:	2b02      	cmp	r3, #2
 8016746:	d130      	bne.n	80167aa <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8016748:	687b      	ldr	r3, [r7, #4]
 801674a:	689b      	ldr	r3, [r3, #8]
 801674c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 801674e:	697b      	ldr	r3, [r7, #20]
 8016750:	005b      	lsls	r3, r3, #1
 8016752:	2203      	movs	r2, #3
 8016754:	fa02 f303 	lsl.w	r3, r2, r3
 8016758:	43db      	mvns	r3, r3
 801675a:	693a      	ldr	r2, [r7, #16]
 801675c:	4013      	ands	r3, r2
 801675e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8016760:	683b      	ldr	r3, [r7, #0]
 8016762:	68da      	ldr	r2, [r3, #12]
 8016764:	697b      	ldr	r3, [r7, #20]
 8016766:	005b      	lsls	r3, r3, #1
 8016768:	fa02 f303 	lsl.w	r3, r2, r3
 801676c:	693a      	ldr	r2, [r7, #16]
 801676e:	4313      	orrs	r3, r2
 8016770:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8016772:	687b      	ldr	r3, [r7, #4]
 8016774:	693a      	ldr	r2, [r7, #16]
 8016776:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8016778:	687b      	ldr	r3, [r7, #4]
 801677a:	685b      	ldr	r3, [r3, #4]
 801677c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 801677e:	2201      	movs	r2, #1
 8016780:	697b      	ldr	r3, [r7, #20]
 8016782:	fa02 f303 	lsl.w	r3, r2, r3
 8016786:	43db      	mvns	r3, r3
 8016788:	693a      	ldr	r2, [r7, #16]
 801678a:	4013      	ands	r3, r2
 801678c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 801678e:	683b      	ldr	r3, [r7, #0]
 8016790:	685b      	ldr	r3, [r3, #4]
 8016792:	091b      	lsrs	r3, r3, #4
 8016794:	f003 0201 	and.w	r2, r3, #1
 8016798:	697b      	ldr	r3, [r7, #20]
 801679a:	fa02 f303 	lsl.w	r3, r2, r3
 801679e:	693a      	ldr	r2, [r7, #16]
 80167a0:	4313      	orrs	r3, r2
 80167a2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80167a4:	687b      	ldr	r3, [r7, #4]
 80167a6:	693a      	ldr	r2, [r7, #16]
 80167a8:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80167aa:	683b      	ldr	r3, [r7, #0]
 80167ac:	685b      	ldr	r3, [r3, #4]
 80167ae:	f003 0303 	and.w	r3, r3, #3
 80167b2:	2b03      	cmp	r3, #3
 80167b4:	d017      	beq.n	80167e6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80167b6:	687b      	ldr	r3, [r7, #4]
 80167b8:	68db      	ldr	r3, [r3, #12]
 80167ba:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80167bc:	697b      	ldr	r3, [r7, #20]
 80167be:	005b      	lsls	r3, r3, #1
 80167c0:	2203      	movs	r2, #3
 80167c2:	fa02 f303 	lsl.w	r3, r2, r3
 80167c6:	43db      	mvns	r3, r3
 80167c8:	693a      	ldr	r2, [r7, #16]
 80167ca:	4013      	ands	r3, r2
 80167cc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80167ce:	683b      	ldr	r3, [r7, #0]
 80167d0:	689a      	ldr	r2, [r3, #8]
 80167d2:	697b      	ldr	r3, [r7, #20]
 80167d4:	005b      	lsls	r3, r3, #1
 80167d6:	fa02 f303 	lsl.w	r3, r2, r3
 80167da:	693a      	ldr	r2, [r7, #16]
 80167dc:	4313      	orrs	r3, r2
 80167de:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80167e0:	687b      	ldr	r3, [r7, #4]
 80167e2:	693a      	ldr	r2, [r7, #16]
 80167e4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80167e6:	683b      	ldr	r3, [r7, #0]
 80167e8:	685b      	ldr	r3, [r3, #4]
 80167ea:	f003 0303 	and.w	r3, r3, #3
 80167ee:	2b02      	cmp	r3, #2
 80167f0:	d123      	bne.n	801683a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80167f2:	697b      	ldr	r3, [r7, #20]
 80167f4:	08da      	lsrs	r2, r3, #3
 80167f6:	687b      	ldr	r3, [r7, #4]
 80167f8:	3208      	adds	r2, #8
 80167fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80167fe:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << ((position & 0x07U) * 4U)) ;
 8016800:	697b      	ldr	r3, [r7, #20]
 8016802:	f003 0307 	and.w	r3, r3, #7
 8016806:	009b      	lsls	r3, r3, #2
 8016808:	220f      	movs	r2, #15
 801680a:	fa02 f303 	lsl.w	r3, r2, r3
 801680e:	43db      	mvns	r3, r3
 8016810:	693a      	ldr	r2, [r7, #16]
 8016812:	4013      	ands	r3, r2
 8016814:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8016816:	683b      	ldr	r3, [r7, #0]
 8016818:	691a      	ldr	r2, [r3, #16]
 801681a:	697b      	ldr	r3, [r7, #20]
 801681c:	f003 0307 	and.w	r3, r3, #7
 8016820:	009b      	lsls	r3, r3, #2
 8016822:	fa02 f303 	lsl.w	r3, r2, r3
 8016826:	693a      	ldr	r2, [r7, #16]
 8016828:	4313      	orrs	r3, r2
 801682a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 801682c:	697b      	ldr	r3, [r7, #20]
 801682e:	08da      	lsrs	r2, r3, #3
 8016830:	687b      	ldr	r3, [r7, #4]
 8016832:	3208      	adds	r2, #8
 8016834:	6939      	ldr	r1, [r7, #16]
 8016836:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 801683a:	687b      	ldr	r3, [r7, #4]
 801683c:	681b      	ldr	r3, [r3, #0]
 801683e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8016840:	697b      	ldr	r3, [r7, #20]
 8016842:	005b      	lsls	r3, r3, #1
 8016844:	2203      	movs	r2, #3
 8016846:	fa02 f303 	lsl.w	r3, r2, r3
 801684a:	43db      	mvns	r3, r3
 801684c:	693a      	ldr	r2, [r7, #16]
 801684e:	4013      	ands	r3, r2
 8016850:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8016852:	683b      	ldr	r3, [r7, #0]
 8016854:	685b      	ldr	r3, [r3, #4]
 8016856:	f003 0203 	and.w	r2, r3, #3
 801685a:	697b      	ldr	r3, [r7, #20]
 801685c:	005b      	lsls	r3, r3, #1
 801685e:	fa02 f303 	lsl.w	r3, r2, r3
 8016862:	693a      	ldr	r2, [r7, #16]
 8016864:	4313      	orrs	r3, r2
 8016866:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8016868:	687b      	ldr	r3, [r7, #4]
 801686a:	693a      	ldr	r2, [r7, #16]
 801686c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 801686e:	683b      	ldr	r3, [r7, #0]
 8016870:	685b      	ldr	r3, [r3, #4]
 8016872:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8016876:	2b00      	cmp	r3, #0
 8016878:	f000 80a4 	beq.w	80169c4 <HAL_GPIO_Init+0x2bc>
      {
        temp = EXTI->EXTICR[position >> 2U];
 801687c:	4a5a      	ldr	r2, [pc, #360]	; (80169e8 <HAL_GPIO_Init+0x2e0>)
 801687e:	697b      	ldr	r3, [r7, #20]
 8016880:	089b      	lsrs	r3, r3, #2
 8016882:	3318      	adds	r3, #24
 8016884:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8016888:	613b      	str	r3, [r7, #16]
        temp &= ~((0x0FU) << (8U * (position & 0x03U)));
 801688a:	697b      	ldr	r3, [r7, #20]
 801688c:	f003 0303 	and.w	r3, r3, #3
 8016890:	00db      	lsls	r3, r3, #3
 8016892:	220f      	movs	r2, #15
 8016894:	fa02 f303 	lsl.w	r3, r2, r3
 8016898:	43db      	mvns	r3, r3
 801689a:	693a      	ldr	r2, [r7, #16]
 801689c:	4013      	ands	r3, r2
 801689e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 80168a0:	687b      	ldr	r3, [r7, #4]
 80168a2:	4a52      	ldr	r2, [pc, #328]	; (80169ec <HAL_GPIO_Init+0x2e4>)
 80168a4:	4293      	cmp	r3, r2
 80168a6:	d025      	beq.n	80168f4 <HAL_GPIO_Init+0x1ec>
 80168a8:	687b      	ldr	r3, [r7, #4]
 80168aa:	4a51      	ldr	r2, [pc, #324]	; (80169f0 <HAL_GPIO_Init+0x2e8>)
 80168ac:	4293      	cmp	r3, r2
 80168ae:	d01f      	beq.n	80168f0 <HAL_GPIO_Init+0x1e8>
 80168b0:	687b      	ldr	r3, [r7, #4]
 80168b2:	4a50      	ldr	r2, [pc, #320]	; (80169f4 <HAL_GPIO_Init+0x2ec>)
 80168b4:	4293      	cmp	r3, r2
 80168b6:	d019      	beq.n	80168ec <HAL_GPIO_Init+0x1e4>
 80168b8:	687b      	ldr	r3, [r7, #4]
 80168ba:	4a4f      	ldr	r2, [pc, #316]	; (80169f8 <HAL_GPIO_Init+0x2f0>)
 80168bc:	4293      	cmp	r3, r2
 80168be:	d013      	beq.n	80168e8 <HAL_GPIO_Init+0x1e0>
 80168c0:	687b      	ldr	r3, [r7, #4]
 80168c2:	4a4e      	ldr	r2, [pc, #312]	; (80169fc <HAL_GPIO_Init+0x2f4>)
 80168c4:	4293      	cmp	r3, r2
 80168c6:	d00d      	beq.n	80168e4 <HAL_GPIO_Init+0x1dc>
 80168c8:	687b      	ldr	r3, [r7, #4]
 80168ca:	4a4d      	ldr	r2, [pc, #308]	; (8016a00 <HAL_GPIO_Init+0x2f8>)
 80168cc:	4293      	cmp	r3, r2
 80168ce:	d007      	beq.n	80168e0 <HAL_GPIO_Init+0x1d8>
 80168d0:	687b      	ldr	r3, [r7, #4]
 80168d2:	4a4c      	ldr	r2, [pc, #304]	; (8016a04 <HAL_GPIO_Init+0x2fc>)
 80168d4:	4293      	cmp	r3, r2
 80168d6:	d101      	bne.n	80168dc <HAL_GPIO_Init+0x1d4>
 80168d8:	2306      	movs	r3, #6
 80168da:	e00c      	b.n	80168f6 <HAL_GPIO_Init+0x1ee>
 80168dc:	2307      	movs	r3, #7
 80168de:	e00a      	b.n	80168f6 <HAL_GPIO_Init+0x1ee>
 80168e0:	2305      	movs	r3, #5
 80168e2:	e008      	b.n	80168f6 <HAL_GPIO_Init+0x1ee>
 80168e4:	2304      	movs	r3, #4
 80168e6:	e006      	b.n	80168f6 <HAL_GPIO_Init+0x1ee>
 80168e8:	2303      	movs	r3, #3
 80168ea:	e004      	b.n	80168f6 <HAL_GPIO_Init+0x1ee>
 80168ec:	2302      	movs	r3, #2
 80168ee:	e002      	b.n	80168f6 <HAL_GPIO_Init+0x1ee>
 80168f0:	2301      	movs	r3, #1
 80168f2:	e000      	b.n	80168f6 <HAL_GPIO_Init+0x1ee>
 80168f4:	2300      	movs	r3, #0
 80168f6:	697a      	ldr	r2, [r7, #20]
 80168f8:	f002 0203 	and.w	r2, r2, #3
 80168fc:	00d2      	lsls	r2, r2, #3
 80168fe:	4093      	lsls	r3, r2
 8016900:	693a      	ldr	r2, [r7, #16]
 8016902:	4313      	orrs	r3, r2
 8016904:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2U] = temp;
 8016906:	4938      	ldr	r1, [pc, #224]	; (80169e8 <HAL_GPIO_Init+0x2e0>)
 8016908:	697b      	ldr	r3, [r7, #20]
 801690a:	089b      	lsrs	r3, r3, #2
 801690c:	3318      	adds	r3, #24
 801690e:	693a      	ldr	r2, [r7, #16]
 8016910:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8016914:	4b34      	ldr	r3, [pc, #208]	; (80169e8 <HAL_GPIO_Init+0x2e0>)
 8016916:	681b      	ldr	r3, [r3, #0]
 8016918:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 801691a:	68fb      	ldr	r3, [r7, #12]
 801691c:	43db      	mvns	r3, r3
 801691e:	693a      	ldr	r2, [r7, #16]
 8016920:	4013      	ands	r3, r2
 8016922:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8016924:	683b      	ldr	r3, [r7, #0]
 8016926:	685b      	ldr	r3, [r3, #4]
 8016928:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 801692c:	2b00      	cmp	r3, #0
 801692e:	d003      	beq.n	8016938 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8016930:	693a      	ldr	r2, [r7, #16]
 8016932:	68fb      	ldr	r3, [r7, #12]
 8016934:	4313      	orrs	r3, r2
 8016936:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8016938:	4a2b      	ldr	r2, [pc, #172]	; (80169e8 <HAL_GPIO_Init+0x2e0>)
 801693a:	693b      	ldr	r3, [r7, #16]
 801693c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 801693e:	4b2a      	ldr	r3, [pc, #168]	; (80169e8 <HAL_GPIO_Init+0x2e0>)
 8016940:	685b      	ldr	r3, [r3, #4]
 8016942:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8016944:	68fb      	ldr	r3, [r7, #12]
 8016946:	43db      	mvns	r3, r3
 8016948:	693a      	ldr	r2, [r7, #16]
 801694a:	4013      	ands	r3, r2
 801694c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 801694e:	683b      	ldr	r3, [r7, #0]
 8016950:	685b      	ldr	r3, [r3, #4]
 8016952:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8016956:	2b00      	cmp	r3, #0
 8016958:	d003      	beq.n	8016962 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 801695a:	693a      	ldr	r2, [r7, #16]
 801695c:	68fb      	ldr	r3, [r7, #12]
 801695e:	4313      	orrs	r3, r2
 8016960:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8016962:	4a21      	ldr	r2, [pc, #132]	; (80169e8 <HAL_GPIO_Init+0x2e0>)
 8016964:	693b      	ldr	r3, [r7, #16]
 8016966:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8016968:	4b1f      	ldr	r3, [pc, #124]	; (80169e8 <HAL_GPIO_Init+0x2e0>)
 801696a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801696e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8016970:	68fb      	ldr	r3, [r7, #12]
 8016972:	43db      	mvns	r3, r3
 8016974:	693a      	ldr	r2, [r7, #16]
 8016976:	4013      	ands	r3, r2
 8016978:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 801697a:	683b      	ldr	r3, [r7, #0]
 801697c:	685b      	ldr	r3, [r3, #4]
 801697e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8016982:	2b00      	cmp	r3, #0
 8016984:	d003      	beq.n	801698e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8016986:	693a      	ldr	r2, [r7, #16]
 8016988:	68fb      	ldr	r3, [r7, #12]
 801698a:	4313      	orrs	r3, r2
 801698c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 801698e:	4a16      	ldr	r2, [pc, #88]	; (80169e8 <HAL_GPIO_Init+0x2e0>)
 8016990:	693b      	ldr	r3, [r7, #16]
 8016992:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        temp = EXTI->IMR1;
 8016996:	4b14      	ldr	r3, [pc, #80]	; (80169e8 <HAL_GPIO_Init+0x2e0>)
 8016998:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801699c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 801699e:	68fb      	ldr	r3, [r7, #12]
 80169a0:	43db      	mvns	r3, r3
 80169a2:	693a      	ldr	r2, [r7, #16]
 80169a4:	4013      	ands	r3, r2
 80169a6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80169a8:	683b      	ldr	r3, [r7, #0]
 80169aa:	685b      	ldr	r3, [r3, #4]
 80169ac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80169b0:	2b00      	cmp	r3, #0
 80169b2:	d003      	beq.n	80169bc <HAL_GPIO_Init+0x2b4>
        {
          temp |= iocurrent;
 80169b4:	693a      	ldr	r2, [r7, #16]
 80169b6:	68fb      	ldr	r3, [r7, #12]
 80169b8:	4313      	orrs	r3, r2
 80169ba:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80169bc:	4a0a      	ldr	r2, [pc, #40]	; (80169e8 <HAL_GPIO_Init+0x2e0>)
 80169be:	693b      	ldr	r3, [r7, #16]
 80169c0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
      }
    }

    position++;
 80169c4:	697b      	ldr	r3, [r7, #20]
 80169c6:	3301      	adds	r3, #1
 80169c8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80169ca:	683b      	ldr	r3, [r7, #0]
 80169cc:	681a      	ldr	r2, [r3, #0]
 80169ce:	697b      	ldr	r3, [r7, #20]
 80169d0:	fa22 f303 	lsr.w	r3, r2, r3
 80169d4:	2b00      	cmp	r3, #0
 80169d6:	f47f ae9f 	bne.w	8016718 <HAL_GPIO_Init+0x10>
  }
}
 80169da:	bf00      	nop
 80169dc:	bf00      	nop
 80169de:	371c      	adds	r7, #28
 80169e0:	46bd      	mov	sp, r7
 80169e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80169e6:	4770      	bx	lr
 80169e8:	4002f400 	.word	0x4002f400
 80169ec:	42020000 	.word	0x42020000
 80169f0:	42020400 	.word	0x42020400
 80169f4:	42020800 	.word	0x42020800
 80169f8:	42020c00 	.word	0x42020c00
 80169fc:	42021000 	.word	0x42021000
 8016a00:	42021400 	.word	0x42021400
 8016a04:	42021800 	.word	0x42021800

08016a08 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8016a08:	b480      	push	{r7}
 8016a0a:	b083      	sub	sp, #12
 8016a0c:	af00      	add	r7, sp, #0
 8016a0e:	6078      	str	r0, [r7, #4]
 8016a10:	460b      	mov	r3, r1
 8016a12:	807b      	strh	r3, [r7, #2]
 8016a14:	4613      	mov	r3, r2
 8016a16:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8016a18:	787b      	ldrb	r3, [r7, #1]
 8016a1a:	2b00      	cmp	r3, #0
 8016a1c:	d003      	beq.n	8016a26 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8016a1e:	887a      	ldrh	r2, [r7, #2]
 8016a20:	687b      	ldr	r3, [r7, #4]
 8016a22:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8016a24:	e002      	b.n	8016a2c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8016a26:	887a      	ldrh	r2, [r7, #2]
 8016a28:	687b      	ldr	r3, [r7, #4]
 8016a2a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8016a2c:	bf00      	nop
 8016a2e:	370c      	adds	r7, #12
 8016a30:	46bd      	mov	sp, r7
 8016a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016a36:	4770      	bx	lr

08016a38 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8016a38:	b480      	push	{r7}
 8016a3a:	b085      	sub	sp, #20
 8016a3c:	af00      	add	r7, sp, #0
 8016a3e:	6078      	str	r0, [r7, #4]
 8016a40:	460b      	mov	r3, r1
 8016a42:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8016a44:	687b      	ldr	r3, [r7, #4]
 8016a46:	695b      	ldr	r3, [r3, #20]
 8016a48:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8016a4a:	887a      	ldrh	r2, [r7, #2]
 8016a4c:	68fb      	ldr	r3, [r7, #12]
 8016a4e:	4013      	ands	r3, r2
 8016a50:	041a      	lsls	r2, r3, #16
 8016a52:	68fb      	ldr	r3, [r7, #12]
 8016a54:	43d9      	mvns	r1, r3
 8016a56:	887b      	ldrh	r3, [r7, #2]
 8016a58:	400b      	ands	r3, r1
 8016a5a:	431a      	orrs	r2, r3
 8016a5c:	687b      	ldr	r3, [r7, #4]
 8016a5e:	619a      	str	r2, [r3, #24]
}
 8016a60:	bf00      	nop
 8016a62:	3714      	adds	r7, #20
 8016a64:	46bd      	mov	sp, r7
 8016a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016a6a:	4770      	bx	lr

08016a6c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8016a6c:	b580      	push	{r7, lr}
 8016a6e:	b082      	sub	sp, #8
 8016a70:	af00      	add	r7, sp, #0
 8016a72:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8016a74:	687b      	ldr	r3, [r7, #4]
 8016a76:	2b00      	cmp	r3, #0
 8016a78:	d101      	bne.n	8016a7e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8016a7a:	2301      	movs	r3, #1
 8016a7c:	e081      	b.n	8016b82 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8016a7e:	687b      	ldr	r3, [r7, #4]
 8016a80:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8016a84:	b2db      	uxtb	r3, r3
 8016a86:	2b00      	cmp	r3, #0
 8016a88:	d106      	bne.n	8016a98 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8016a8a:	687b      	ldr	r3, [r7, #4]
 8016a8c:	2200      	movs	r2, #0
 8016a8e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8016a92:	6878      	ldr	r0, [r7, #4]
 8016a94:	f7fc fe7a 	bl	801378c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8016a98:	687b      	ldr	r3, [r7, #4]
 8016a9a:	2224      	movs	r2, #36	; 0x24
 8016a9c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8016aa0:	687b      	ldr	r3, [r7, #4]
 8016aa2:	681b      	ldr	r3, [r3, #0]
 8016aa4:	681a      	ldr	r2, [r3, #0]
 8016aa6:	687b      	ldr	r3, [r7, #4]
 8016aa8:	681b      	ldr	r3, [r3, #0]
 8016aaa:	f022 0201 	bic.w	r2, r2, #1
 8016aae:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8016ab0:	687b      	ldr	r3, [r7, #4]
 8016ab2:	685a      	ldr	r2, [r3, #4]
 8016ab4:	687b      	ldr	r3, [r7, #4]
 8016ab6:	681b      	ldr	r3, [r3, #0]
 8016ab8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8016abc:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8016abe:	687b      	ldr	r3, [r7, #4]
 8016ac0:	681b      	ldr	r3, [r3, #0]
 8016ac2:	689a      	ldr	r2, [r3, #8]
 8016ac4:	687b      	ldr	r3, [r7, #4]
 8016ac6:	681b      	ldr	r3, [r3, #0]
 8016ac8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8016acc:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8016ace:	687b      	ldr	r3, [r7, #4]
 8016ad0:	68db      	ldr	r3, [r3, #12]
 8016ad2:	2b01      	cmp	r3, #1
 8016ad4:	d107      	bne.n	8016ae6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8016ad6:	687b      	ldr	r3, [r7, #4]
 8016ad8:	689a      	ldr	r2, [r3, #8]
 8016ada:	687b      	ldr	r3, [r7, #4]
 8016adc:	681b      	ldr	r3, [r3, #0]
 8016ade:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8016ae2:	609a      	str	r2, [r3, #8]
 8016ae4:	e006      	b.n	8016af4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8016ae6:	687b      	ldr	r3, [r7, #4]
 8016ae8:	689a      	ldr	r2, [r3, #8]
 8016aea:	687b      	ldr	r3, [r7, #4]
 8016aec:	681b      	ldr	r3, [r3, #0]
 8016aee:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8016af2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8016af4:	687b      	ldr	r3, [r7, #4]
 8016af6:	68db      	ldr	r3, [r3, #12]
 8016af8:	2b02      	cmp	r3, #2
 8016afa:	d104      	bne.n	8016b06 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8016afc:	687b      	ldr	r3, [r7, #4]
 8016afe:	681b      	ldr	r3, [r3, #0]
 8016b00:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8016b04:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8016b06:	687b      	ldr	r3, [r7, #4]
 8016b08:	681b      	ldr	r3, [r3, #0]
 8016b0a:	685b      	ldr	r3, [r3, #4]
 8016b0c:	687a      	ldr	r2, [r7, #4]
 8016b0e:	6812      	ldr	r2, [r2, #0]
 8016b10:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8016b14:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8016b18:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8016b1a:	687b      	ldr	r3, [r7, #4]
 8016b1c:	681b      	ldr	r3, [r3, #0]
 8016b1e:	68da      	ldr	r2, [r3, #12]
 8016b20:	687b      	ldr	r3, [r7, #4]
 8016b22:	681b      	ldr	r3, [r3, #0]
 8016b24:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8016b28:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8016b2a:	687b      	ldr	r3, [r7, #4]
 8016b2c:	691a      	ldr	r2, [r3, #16]
 8016b2e:	687b      	ldr	r3, [r7, #4]
 8016b30:	695b      	ldr	r3, [r3, #20]
 8016b32:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8016b36:	687b      	ldr	r3, [r7, #4]
 8016b38:	699b      	ldr	r3, [r3, #24]
 8016b3a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8016b3c:	687b      	ldr	r3, [r7, #4]
 8016b3e:	681b      	ldr	r3, [r3, #0]
 8016b40:	430a      	orrs	r2, r1
 8016b42:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8016b44:	687b      	ldr	r3, [r7, #4]
 8016b46:	69d9      	ldr	r1, [r3, #28]
 8016b48:	687b      	ldr	r3, [r7, #4]
 8016b4a:	6a1a      	ldr	r2, [r3, #32]
 8016b4c:	687b      	ldr	r3, [r7, #4]
 8016b4e:	681b      	ldr	r3, [r3, #0]
 8016b50:	430a      	orrs	r2, r1
 8016b52:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8016b54:	687b      	ldr	r3, [r7, #4]
 8016b56:	681b      	ldr	r3, [r3, #0]
 8016b58:	681a      	ldr	r2, [r3, #0]
 8016b5a:	687b      	ldr	r3, [r7, #4]
 8016b5c:	681b      	ldr	r3, [r3, #0]
 8016b5e:	f042 0201 	orr.w	r2, r2, #1
 8016b62:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8016b64:	687b      	ldr	r3, [r7, #4]
 8016b66:	2200      	movs	r2, #0
 8016b68:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8016b6a:	687b      	ldr	r3, [r7, #4]
 8016b6c:	2220      	movs	r2, #32
 8016b6e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8016b72:	687b      	ldr	r3, [r7, #4]
 8016b74:	2200      	movs	r2, #0
 8016b76:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8016b78:	687b      	ldr	r3, [r7, #4]
 8016b7a:	2200      	movs	r2, #0
 8016b7c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8016b80:	2300      	movs	r3, #0
}
 8016b82:	4618      	mov	r0, r3
 8016b84:	3708      	adds	r7, #8
 8016b86:	46bd      	mov	sp, r7
 8016b88:	bd80      	pop	{r7, pc}
	...

08016b8c <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8016b8c:	b580      	push	{r7, lr}
 8016b8e:	b088      	sub	sp, #32
 8016b90:	af02      	add	r7, sp, #8
 8016b92:	60f8      	str	r0, [r7, #12]
 8016b94:	607a      	str	r2, [r7, #4]
 8016b96:	461a      	mov	r2, r3
 8016b98:	460b      	mov	r3, r1
 8016b9a:	817b      	strh	r3, [r7, #10]
 8016b9c:	4613      	mov	r3, r2
 8016b9e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8016ba0:	68fb      	ldr	r3, [r7, #12]
 8016ba2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8016ba6:	b2db      	uxtb	r3, r3
 8016ba8:	2b20      	cmp	r3, #32
 8016baa:	f040 80da 	bne.w	8016d62 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8016bae:	68fb      	ldr	r3, [r7, #12]
 8016bb0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8016bb4:	2b01      	cmp	r3, #1
 8016bb6:	d101      	bne.n	8016bbc <HAL_I2C_Master_Transmit+0x30>
 8016bb8:	2302      	movs	r3, #2
 8016bba:	e0d3      	b.n	8016d64 <HAL_I2C_Master_Transmit+0x1d8>
 8016bbc:	68fb      	ldr	r3, [r7, #12]
 8016bbe:	2201      	movs	r2, #1
 8016bc0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8016bc4:	f7fd fcc4 	bl	8014550 <HAL_GetTick>
 8016bc8:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8016bca:	697b      	ldr	r3, [r7, #20]
 8016bcc:	9300      	str	r3, [sp, #0]
 8016bce:	2319      	movs	r3, #25
 8016bd0:	2201      	movs	r2, #1
 8016bd2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8016bd6:	68f8      	ldr	r0, [r7, #12]
 8016bd8:	f000 f9e6 	bl	8016fa8 <I2C_WaitOnFlagUntilTimeout>
 8016bdc:	4603      	mov	r3, r0
 8016bde:	2b00      	cmp	r3, #0
 8016be0:	d001      	beq.n	8016be6 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8016be2:	2301      	movs	r3, #1
 8016be4:	e0be      	b.n	8016d64 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8016be6:	68fb      	ldr	r3, [r7, #12]
 8016be8:	2221      	movs	r2, #33	; 0x21
 8016bea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8016bee:	68fb      	ldr	r3, [r7, #12]
 8016bf0:	2210      	movs	r2, #16
 8016bf2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8016bf6:	68fb      	ldr	r3, [r7, #12]
 8016bf8:	2200      	movs	r2, #0
 8016bfa:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8016bfc:	68fb      	ldr	r3, [r7, #12]
 8016bfe:	687a      	ldr	r2, [r7, #4]
 8016c00:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8016c02:	68fb      	ldr	r3, [r7, #12]
 8016c04:	893a      	ldrh	r2, [r7, #8]
 8016c06:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8016c08:	68fb      	ldr	r3, [r7, #12]
 8016c0a:	2200      	movs	r2, #0
 8016c0c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8016c0e:	68fb      	ldr	r3, [r7, #12]
 8016c10:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8016c12:	b29b      	uxth	r3, r3
 8016c14:	2bff      	cmp	r3, #255	; 0xff
 8016c16:	d90e      	bls.n	8016c36 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8016c18:	68fb      	ldr	r3, [r7, #12]
 8016c1a:	22ff      	movs	r2, #255	; 0xff
 8016c1c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8016c1e:	68fb      	ldr	r3, [r7, #12]
 8016c20:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8016c22:	b2da      	uxtb	r2, r3
 8016c24:	8979      	ldrh	r1, [r7, #10]
 8016c26:	4b51      	ldr	r3, [pc, #324]	; (8016d6c <HAL_I2C_Master_Transmit+0x1e0>)
 8016c28:	9300      	str	r3, [sp, #0]
 8016c2a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8016c2e:	68f8      	ldr	r0, [r7, #12]
 8016c30:	f000 fbf6 	bl	8017420 <I2C_TransferConfig>
 8016c34:	e06c      	b.n	8016d10 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8016c36:	68fb      	ldr	r3, [r7, #12]
 8016c38:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8016c3a:	b29a      	uxth	r2, r3
 8016c3c:	68fb      	ldr	r3, [r7, #12]
 8016c3e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8016c40:	68fb      	ldr	r3, [r7, #12]
 8016c42:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8016c44:	b2da      	uxtb	r2, r3
 8016c46:	8979      	ldrh	r1, [r7, #10]
 8016c48:	4b48      	ldr	r3, [pc, #288]	; (8016d6c <HAL_I2C_Master_Transmit+0x1e0>)
 8016c4a:	9300      	str	r3, [sp, #0]
 8016c4c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8016c50:	68f8      	ldr	r0, [r7, #12]
 8016c52:	f000 fbe5 	bl	8017420 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8016c56:	e05b      	b.n	8016d10 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8016c58:	697a      	ldr	r2, [r7, #20]
 8016c5a:	6a39      	ldr	r1, [r7, #32]
 8016c5c:	68f8      	ldr	r0, [r7, #12]
 8016c5e:	f000 f9f2 	bl	8017046 <I2C_WaitOnTXISFlagUntilTimeout>
 8016c62:	4603      	mov	r3, r0
 8016c64:	2b00      	cmp	r3, #0
 8016c66:	d001      	beq.n	8016c6c <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8016c68:	2301      	movs	r3, #1
 8016c6a:	e07b      	b.n	8016d64 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8016c6c:	68fb      	ldr	r3, [r7, #12]
 8016c6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016c70:	781a      	ldrb	r2, [r3, #0]
 8016c72:	68fb      	ldr	r3, [r7, #12]
 8016c74:	681b      	ldr	r3, [r3, #0]
 8016c76:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8016c78:	68fb      	ldr	r3, [r7, #12]
 8016c7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016c7c:	1c5a      	adds	r2, r3, #1
 8016c7e:	68fb      	ldr	r3, [r7, #12]
 8016c80:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8016c82:	68fb      	ldr	r3, [r7, #12]
 8016c84:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8016c86:	b29b      	uxth	r3, r3
 8016c88:	3b01      	subs	r3, #1
 8016c8a:	b29a      	uxth	r2, r3
 8016c8c:	68fb      	ldr	r3, [r7, #12]
 8016c8e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8016c90:	68fb      	ldr	r3, [r7, #12]
 8016c92:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8016c94:	3b01      	subs	r3, #1
 8016c96:	b29a      	uxth	r2, r3
 8016c98:	68fb      	ldr	r3, [r7, #12]
 8016c9a:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8016c9c:	68fb      	ldr	r3, [r7, #12]
 8016c9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8016ca0:	b29b      	uxth	r3, r3
 8016ca2:	2b00      	cmp	r3, #0
 8016ca4:	d034      	beq.n	8016d10 <HAL_I2C_Master_Transmit+0x184>
 8016ca6:	68fb      	ldr	r3, [r7, #12]
 8016ca8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8016caa:	2b00      	cmp	r3, #0
 8016cac:	d130      	bne.n	8016d10 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8016cae:	697b      	ldr	r3, [r7, #20]
 8016cb0:	9300      	str	r3, [sp, #0]
 8016cb2:	6a3b      	ldr	r3, [r7, #32]
 8016cb4:	2200      	movs	r2, #0
 8016cb6:	2180      	movs	r1, #128	; 0x80
 8016cb8:	68f8      	ldr	r0, [r7, #12]
 8016cba:	f000 f975 	bl	8016fa8 <I2C_WaitOnFlagUntilTimeout>
 8016cbe:	4603      	mov	r3, r0
 8016cc0:	2b00      	cmp	r3, #0
 8016cc2:	d001      	beq.n	8016cc8 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8016cc4:	2301      	movs	r3, #1
 8016cc6:	e04d      	b.n	8016d64 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8016cc8:	68fb      	ldr	r3, [r7, #12]
 8016cca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8016ccc:	b29b      	uxth	r3, r3
 8016cce:	2bff      	cmp	r3, #255	; 0xff
 8016cd0:	d90e      	bls.n	8016cf0 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8016cd2:	68fb      	ldr	r3, [r7, #12]
 8016cd4:	22ff      	movs	r2, #255	; 0xff
 8016cd6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8016cd8:	68fb      	ldr	r3, [r7, #12]
 8016cda:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8016cdc:	b2da      	uxtb	r2, r3
 8016cde:	8979      	ldrh	r1, [r7, #10]
 8016ce0:	2300      	movs	r3, #0
 8016ce2:	9300      	str	r3, [sp, #0]
 8016ce4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8016ce8:	68f8      	ldr	r0, [r7, #12]
 8016cea:	f000 fb99 	bl	8017420 <I2C_TransferConfig>
 8016cee:	e00f      	b.n	8016d10 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8016cf0:	68fb      	ldr	r3, [r7, #12]
 8016cf2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8016cf4:	b29a      	uxth	r2, r3
 8016cf6:	68fb      	ldr	r3, [r7, #12]
 8016cf8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8016cfa:	68fb      	ldr	r3, [r7, #12]
 8016cfc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8016cfe:	b2da      	uxtb	r2, r3
 8016d00:	8979      	ldrh	r1, [r7, #10]
 8016d02:	2300      	movs	r3, #0
 8016d04:	9300      	str	r3, [sp, #0]
 8016d06:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8016d0a:	68f8      	ldr	r0, [r7, #12]
 8016d0c:	f000 fb88 	bl	8017420 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8016d10:	68fb      	ldr	r3, [r7, #12]
 8016d12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8016d14:	b29b      	uxth	r3, r3
 8016d16:	2b00      	cmp	r3, #0
 8016d18:	d19e      	bne.n	8016c58 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8016d1a:	697a      	ldr	r2, [r7, #20]
 8016d1c:	6a39      	ldr	r1, [r7, #32]
 8016d1e:	68f8      	ldr	r0, [r7, #12]
 8016d20:	f000 f9d8 	bl	80170d4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8016d24:	4603      	mov	r3, r0
 8016d26:	2b00      	cmp	r3, #0
 8016d28:	d001      	beq.n	8016d2e <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8016d2a:	2301      	movs	r3, #1
 8016d2c:	e01a      	b.n	8016d64 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8016d2e:	68fb      	ldr	r3, [r7, #12]
 8016d30:	681b      	ldr	r3, [r3, #0]
 8016d32:	2220      	movs	r2, #32
 8016d34:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8016d36:	68fb      	ldr	r3, [r7, #12]
 8016d38:	681b      	ldr	r3, [r3, #0]
 8016d3a:	6859      	ldr	r1, [r3, #4]
 8016d3c:	68fb      	ldr	r3, [r7, #12]
 8016d3e:	681a      	ldr	r2, [r3, #0]
 8016d40:	4b0b      	ldr	r3, [pc, #44]	; (8016d70 <HAL_I2C_Master_Transmit+0x1e4>)
 8016d42:	400b      	ands	r3, r1
 8016d44:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8016d46:	68fb      	ldr	r3, [r7, #12]
 8016d48:	2220      	movs	r2, #32
 8016d4a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8016d4e:	68fb      	ldr	r3, [r7, #12]
 8016d50:	2200      	movs	r2, #0
 8016d52:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8016d56:	68fb      	ldr	r3, [r7, #12]
 8016d58:	2200      	movs	r2, #0
 8016d5a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8016d5e:	2300      	movs	r3, #0
 8016d60:	e000      	b.n	8016d64 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8016d62:	2302      	movs	r3, #2
  }
}
 8016d64:	4618      	mov	r0, r3
 8016d66:	3718      	adds	r7, #24
 8016d68:	46bd      	mov	sp, r7
 8016d6a:	bd80      	pop	{r7, pc}
 8016d6c:	80002000 	.word	0x80002000
 8016d70:	fe00e800 	.word	0xfe00e800

08016d74 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8016d74:	b580      	push	{r7, lr}
 8016d76:	b088      	sub	sp, #32
 8016d78:	af02      	add	r7, sp, #8
 8016d7a:	60f8      	str	r0, [r7, #12]
 8016d7c:	607a      	str	r2, [r7, #4]
 8016d7e:	461a      	mov	r2, r3
 8016d80:	460b      	mov	r3, r1
 8016d82:	817b      	strh	r3, [r7, #10]
 8016d84:	4613      	mov	r3, r2
 8016d86:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8016d88:	68fb      	ldr	r3, [r7, #12]
 8016d8a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8016d8e:	b2db      	uxtb	r3, r3
 8016d90:	2b20      	cmp	r3, #32
 8016d92:	f040 80db 	bne.w	8016f4c <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8016d96:	68fb      	ldr	r3, [r7, #12]
 8016d98:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8016d9c:	2b01      	cmp	r3, #1
 8016d9e:	d101      	bne.n	8016da4 <HAL_I2C_Master_Receive+0x30>
 8016da0:	2302      	movs	r3, #2
 8016da2:	e0d4      	b.n	8016f4e <HAL_I2C_Master_Receive+0x1da>
 8016da4:	68fb      	ldr	r3, [r7, #12]
 8016da6:	2201      	movs	r2, #1
 8016da8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8016dac:	f7fd fbd0 	bl	8014550 <HAL_GetTick>
 8016db0:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8016db2:	697b      	ldr	r3, [r7, #20]
 8016db4:	9300      	str	r3, [sp, #0]
 8016db6:	2319      	movs	r3, #25
 8016db8:	2201      	movs	r2, #1
 8016dba:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8016dbe:	68f8      	ldr	r0, [r7, #12]
 8016dc0:	f000 f8f2 	bl	8016fa8 <I2C_WaitOnFlagUntilTimeout>
 8016dc4:	4603      	mov	r3, r0
 8016dc6:	2b00      	cmp	r3, #0
 8016dc8:	d001      	beq.n	8016dce <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8016dca:	2301      	movs	r3, #1
 8016dcc:	e0bf      	b.n	8016f4e <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8016dce:	68fb      	ldr	r3, [r7, #12]
 8016dd0:	2222      	movs	r2, #34	; 0x22
 8016dd2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8016dd6:	68fb      	ldr	r3, [r7, #12]
 8016dd8:	2210      	movs	r2, #16
 8016dda:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8016dde:	68fb      	ldr	r3, [r7, #12]
 8016de0:	2200      	movs	r2, #0
 8016de2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8016de4:	68fb      	ldr	r3, [r7, #12]
 8016de6:	687a      	ldr	r2, [r7, #4]
 8016de8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8016dea:	68fb      	ldr	r3, [r7, #12]
 8016dec:	893a      	ldrh	r2, [r7, #8]
 8016dee:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8016df0:	68fb      	ldr	r3, [r7, #12]
 8016df2:	2200      	movs	r2, #0
 8016df4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8016df6:	68fb      	ldr	r3, [r7, #12]
 8016df8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8016dfa:	b29b      	uxth	r3, r3
 8016dfc:	2bff      	cmp	r3, #255	; 0xff
 8016dfe:	d90e      	bls.n	8016e1e <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8016e00:	68fb      	ldr	r3, [r7, #12]
 8016e02:	22ff      	movs	r2, #255	; 0xff
 8016e04:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8016e06:	68fb      	ldr	r3, [r7, #12]
 8016e08:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8016e0a:	b2da      	uxtb	r2, r3
 8016e0c:	8979      	ldrh	r1, [r7, #10]
 8016e0e:	4b52      	ldr	r3, [pc, #328]	; (8016f58 <HAL_I2C_Master_Receive+0x1e4>)
 8016e10:	9300      	str	r3, [sp, #0]
 8016e12:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8016e16:	68f8      	ldr	r0, [r7, #12]
 8016e18:	f000 fb02 	bl	8017420 <I2C_TransferConfig>
 8016e1c:	e06d      	b.n	8016efa <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8016e1e:	68fb      	ldr	r3, [r7, #12]
 8016e20:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8016e22:	b29a      	uxth	r2, r3
 8016e24:	68fb      	ldr	r3, [r7, #12]
 8016e26:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8016e28:	68fb      	ldr	r3, [r7, #12]
 8016e2a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8016e2c:	b2da      	uxtb	r2, r3
 8016e2e:	8979      	ldrh	r1, [r7, #10]
 8016e30:	4b49      	ldr	r3, [pc, #292]	; (8016f58 <HAL_I2C_Master_Receive+0x1e4>)
 8016e32:	9300      	str	r3, [sp, #0]
 8016e34:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8016e38:	68f8      	ldr	r0, [r7, #12]
 8016e3a:	f000 faf1 	bl	8017420 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8016e3e:	e05c      	b.n	8016efa <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8016e40:	697a      	ldr	r2, [r7, #20]
 8016e42:	6a39      	ldr	r1, [r7, #32]
 8016e44:	68f8      	ldr	r0, [r7, #12]
 8016e46:	f000 f989 	bl	801715c <I2C_WaitOnRXNEFlagUntilTimeout>
 8016e4a:	4603      	mov	r3, r0
 8016e4c:	2b00      	cmp	r3, #0
 8016e4e:	d001      	beq.n	8016e54 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8016e50:	2301      	movs	r3, #1
 8016e52:	e07c      	b.n	8016f4e <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8016e54:	68fb      	ldr	r3, [r7, #12]
 8016e56:	681b      	ldr	r3, [r3, #0]
 8016e58:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8016e5a:	68fb      	ldr	r3, [r7, #12]
 8016e5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016e5e:	b2d2      	uxtb	r2, r2
 8016e60:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8016e62:	68fb      	ldr	r3, [r7, #12]
 8016e64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016e66:	1c5a      	adds	r2, r3, #1
 8016e68:	68fb      	ldr	r3, [r7, #12]
 8016e6a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8016e6c:	68fb      	ldr	r3, [r7, #12]
 8016e6e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8016e70:	3b01      	subs	r3, #1
 8016e72:	b29a      	uxth	r2, r3
 8016e74:	68fb      	ldr	r3, [r7, #12]
 8016e76:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8016e78:	68fb      	ldr	r3, [r7, #12]
 8016e7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8016e7c:	b29b      	uxth	r3, r3
 8016e7e:	3b01      	subs	r3, #1
 8016e80:	b29a      	uxth	r2, r3
 8016e82:	68fb      	ldr	r3, [r7, #12]
 8016e84:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8016e86:	68fb      	ldr	r3, [r7, #12]
 8016e88:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8016e8a:	b29b      	uxth	r3, r3
 8016e8c:	2b00      	cmp	r3, #0
 8016e8e:	d034      	beq.n	8016efa <HAL_I2C_Master_Receive+0x186>
 8016e90:	68fb      	ldr	r3, [r7, #12]
 8016e92:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8016e94:	2b00      	cmp	r3, #0
 8016e96:	d130      	bne.n	8016efa <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8016e98:	697b      	ldr	r3, [r7, #20]
 8016e9a:	9300      	str	r3, [sp, #0]
 8016e9c:	6a3b      	ldr	r3, [r7, #32]
 8016e9e:	2200      	movs	r2, #0
 8016ea0:	2180      	movs	r1, #128	; 0x80
 8016ea2:	68f8      	ldr	r0, [r7, #12]
 8016ea4:	f000 f880 	bl	8016fa8 <I2C_WaitOnFlagUntilTimeout>
 8016ea8:	4603      	mov	r3, r0
 8016eaa:	2b00      	cmp	r3, #0
 8016eac:	d001      	beq.n	8016eb2 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8016eae:	2301      	movs	r3, #1
 8016eb0:	e04d      	b.n	8016f4e <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8016eb2:	68fb      	ldr	r3, [r7, #12]
 8016eb4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8016eb6:	b29b      	uxth	r3, r3
 8016eb8:	2bff      	cmp	r3, #255	; 0xff
 8016eba:	d90e      	bls.n	8016eda <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8016ebc:	68fb      	ldr	r3, [r7, #12]
 8016ebe:	22ff      	movs	r2, #255	; 0xff
 8016ec0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8016ec2:	68fb      	ldr	r3, [r7, #12]
 8016ec4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8016ec6:	b2da      	uxtb	r2, r3
 8016ec8:	8979      	ldrh	r1, [r7, #10]
 8016eca:	2300      	movs	r3, #0
 8016ecc:	9300      	str	r3, [sp, #0]
 8016ece:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8016ed2:	68f8      	ldr	r0, [r7, #12]
 8016ed4:	f000 faa4 	bl	8017420 <I2C_TransferConfig>
 8016ed8:	e00f      	b.n	8016efa <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8016eda:	68fb      	ldr	r3, [r7, #12]
 8016edc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8016ede:	b29a      	uxth	r2, r3
 8016ee0:	68fb      	ldr	r3, [r7, #12]
 8016ee2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8016ee4:	68fb      	ldr	r3, [r7, #12]
 8016ee6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8016ee8:	b2da      	uxtb	r2, r3
 8016eea:	8979      	ldrh	r1, [r7, #10]
 8016eec:	2300      	movs	r3, #0
 8016eee:	9300      	str	r3, [sp, #0]
 8016ef0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8016ef4:	68f8      	ldr	r0, [r7, #12]
 8016ef6:	f000 fa93 	bl	8017420 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8016efa:	68fb      	ldr	r3, [r7, #12]
 8016efc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8016efe:	b29b      	uxth	r3, r3
 8016f00:	2b00      	cmp	r3, #0
 8016f02:	d19d      	bne.n	8016e40 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8016f04:	697a      	ldr	r2, [r7, #20]
 8016f06:	6a39      	ldr	r1, [r7, #32]
 8016f08:	68f8      	ldr	r0, [r7, #12]
 8016f0a:	f000 f8e3 	bl	80170d4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8016f0e:	4603      	mov	r3, r0
 8016f10:	2b00      	cmp	r3, #0
 8016f12:	d001      	beq.n	8016f18 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8016f14:	2301      	movs	r3, #1
 8016f16:	e01a      	b.n	8016f4e <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8016f18:	68fb      	ldr	r3, [r7, #12]
 8016f1a:	681b      	ldr	r3, [r3, #0]
 8016f1c:	2220      	movs	r2, #32
 8016f1e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8016f20:	68fb      	ldr	r3, [r7, #12]
 8016f22:	681b      	ldr	r3, [r3, #0]
 8016f24:	6859      	ldr	r1, [r3, #4]
 8016f26:	68fb      	ldr	r3, [r7, #12]
 8016f28:	681a      	ldr	r2, [r3, #0]
 8016f2a:	4b0c      	ldr	r3, [pc, #48]	; (8016f5c <HAL_I2C_Master_Receive+0x1e8>)
 8016f2c:	400b      	ands	r3, r1
 8016f2e:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8016f30:	68fb      	ldr	r3, [r7, #12]
 8016f32:	2220      	movs	r2, #32
 8016f34:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8016f38:	68fb      	ldr	r3, [r7, #12]
 8016f3a:	2200      	movs	r2, #0
 8016f3c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8016f40:	68fb      	ldr	r3, [r7, #12]
 8016f42:	2200      	movs	r2, #0
 8016f44:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8016f48:	2300      	movs	r3, #0
 8016f4a:	e000      	b.n	8016f4e <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8016f4c:	2302      	movs	r3, #2
  }
}
 8016f4e:	4618      	mov	r0, r3
 8016f50:	3718      	adds	r7, #24
 8016f52:	46bd      	mov	sp, r7
 8016f54:	bd80      	pop	{r7, pc}
 8016f56:	bf00      	nop
 8016f58:	80002400 	.word	0x80002400
 8016f5c:	fe00e800 	.word	0xfe00e800

08016f60 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8016f60:	b480      	push	{r7}
 8016f62:	b083      	sub	sp, #12
 8016f64:	af00      	add	r7, sp, #0
 8016f66:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8016f68:	687b      	ldr	r3, [r7, #4]
 8016f6a:	681b      	ldr	r3, [r3, #0]
 8016f6c:	699b      	ldr	r3, [r3, #24]
 8016f6e:	f003 0302 	and.w	r3, r3, #2
 8016f72:	2b02      	cmp	r3, #2
 8016f74:	d103      	bne.n	8016f7e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8016f76:	687b      	ldr	r3, [r7, #4]
 8016f78:	681b      	ldr	r3, [r3, #0]
 8016f7a:	2200      	movs	r2, #0
 8016f7c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8016f7e:	687b      	ldr	r3, [r7, #4]
 8016f80:	681b      	ldr	r3, [r3, #0]
 8016f82:	699b      	ldr	r3, [r3, #24]
 8016f84:	f003 0301 	and.w	r3, r3, #1
 8016f88:	2b01      	cmp	r3, #1
 8016f8a:	d007      	beq.n	8016f9c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8016f8c:	687b      	ldr	r3, [r7, #4]
 8016f8e:	681b      	ldr	r3, [r3, #0]
 8016f90:	699a      	ldr	r2, [r3, #24]
 8016f92:	687b      	ldr	r3, [r7, #4]
 8016f94:	681b      	ldr	r3, [r3, #0]
 8016f96:	f042 0201 	orr.w	r2, r2, #1
 8016f9a:	619a      	str	r2, [r3, #24]
  }
}
 8016f9c:	bf00      	nop
 8016f9e:	370c      	adds	r7, #12
 8016fa0:	46bd      	mov	sp, r7
 8016fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016fa6:	4770      	bx	lr

08016fa8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8016fa8:	b580      	push	{r7, lr}
 8016faa:	b084      	sub	sp, #16
 8016fac:	af00      	add	r7, sp, #0
 8016fae:	60f8      	str	r0, [r7, #12]
 8016fb0:	60b9      	str	r1, [r7, #8]
 8016fb2:	603b      	str	r3, [r7, #0]
 8016fb4:	4613      	mov	r3, r2
 8016fb6:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8016fb8:	e031      	b.n	801701e <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8016fba:	683b      	ldr	r3, [r7, #0]
 8016fbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016fc0:	d02d      	beq.n	801701e <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8016fc2:	f7fd fac5 	bl	8014550 <HAL_GetTick>
 8016fc6:	4602      	mov	r2, r0
 8016fc8:	69bb      	ldr	r3, [r7, #24]
 8016fca:	1ad3      	subs	r3, r2, r3
 8016fcc:	683a      	ldr	r2, [r7, #0]
 8016fce:	429a      	cmp	r2, r3
 8016fd0:	d302      	bcc.n	8016fd8 <I2C_WaitOnFlagUntilTimeout+0x30>
 8016fd2:	683b      	ldr	r3, [r7, #0]
 8016fd4:	2b00      	cmp	r3, #0
 8016fd6:	d122      	bne.n	801701e <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8016fd8:	68fb      	ldr	r3, [r7, #12]
 8016fda:	681b      	ldr	r3, [r3, #0]
 8016fdc:	699a      	ldr	r2, [r3, #24]
 8016fde:	68bb      	ldr	r3, [r7, #8]
 8016fe0:	4013      	ands	r3, r2
 8016fe2:	68ba      	ldr	r2, [r7, #8]
 8016fe4:	429a      	cmp	r2, r3
 8016fe6:	bf0c      	ite	eq
 8016fe8:	2301      	moveq	r3, #1
 8016fea:	2300      	movne	r3, #0
 8016fec:	b2db      	uxtb	r3, r3
 8016fee:	461a      	mov	r2, r3
 8016ff0:	79fb      	ldrb	r3, [r7, #7]
 8016ff2:	429a      	cmp	r2, r3
 8016ff4:	d113      	bne.n	801701e <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8016ff6:	68fb      	ldr	r3, [r7, #12]
 8016ff8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8016ffa:	f043 0220 	orr.w	r2, r3, #32
 8016ffe:	68fb      	ldr	r3, [r7, #12]
 8017000:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8017002:	68fb      	ldr	r3, [r7, #12]
 8017004:	2220      	movs	r2, #32
 8017006:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 801700a:	68fb      	ldr	r3, [r7, #12]
 801700c:	2200      	movs	r2, #0
 801700e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8017012:	68fb      	ldr	r3, [r7, #12]
 8017014:	2200      	movs	r2, #0
 8017016:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 801701a:	2301      	movs	r3, #1
 801701c:	e00f      	b.n	801703e <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 801701e:	68fb      	ldr	r3, [r7, #12]
 8017020:	681b      	ldr	r3, [r3, #0]
 8017022:	699a      	ldr	r2, [r3, #24]
 8017024:	68bb      	ldr	r3, [r7, #8]
 8017026:	4013      	ands	r3, r2
 8017028:	68ba      	ldr	r2, [r7, #8]
 801702a:	429a      	cmp	r2, r3
 801702c:	bf0c      	ite	eq
 801702e:	2301      	moveq	r3, #1
 8017030:	2300      	movne	r3, #0
 8017032:	b2db      	uxtb	r3, r3
 8017034:	461a      	mov	r2, r3
 8017036:	79fb      	ldrb	r3, [r7, #7]
 8017038:	429a      	cmp	r2, r3
 801703a:	d0be      	beq.n	8016fba <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 801703c:	2300      	movs	r3, #0
}
 801703e:	4618      	mov	r0, r3
 8017040:	3710      	adds	r7, #16
 8017042:	46bd      	mov	sp, r7
 8017044:	bd80      	pop	{r7, pc}

08017046 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8017046:	b580      	push	{r7, lr}
 8017048:	b084      	sub	sp, #16
 801704a:	af00      	add	r7, sp, #0
 801704c:	60f8      	str	r0, [r7, #12]
 801704e:	60b9      	str	r1, [r7, #8]
 8017050:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8017052:	e033      	b.n	80170bc <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8017054:	687a      	ldr	r2, [r7, #4]
 8017056:	68b9      	ldr	r1, [r7, #8]
 8017058:	68f8      	ldr	r0, [r7, #12]
 801705a:	f000 f901 	bl	8017260 <I2C_IsErrorOccurred>
 801705e:	4603      	mov	r3, r0
 8017060:	2b00      	cmp	r3, #0
 8017062:	d001      	beq.n	8017068 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8017064:	2301      	movs	r3, #1
 8017066:	e031      	b.n	80170cc <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8017068:	68bb      	ldr	r3, [r7, #8]
 801706a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801706e:	d025      	beq.n	80170bc <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8017070:	f7fd fa6e 	bl	8014550 <HAL_GetTick>
 8017074:	4602      	mov	r2, r0
 8017076:	687b      	ldr	r3, [r7, #4]
 8017078:	1ad3      	subs	r3, r2, r3
 801707a:	68ba      	ldr	r2, [r7, #8]
 801707c:	429a      	cmp	r2, r3
 801707e:	d302      	bcc.n	8017086 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8017080:	68bb      	ldr	r3, [r7, #8]
 8017082:	2b00      	cmp	r3, #0
 8017084:	d11a      	bne.n	80170bc <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8017086:	68fb      	ldr	r3, [r7, #12]
 8017088:	681b      	ldr	r3, [r3, #0]
 801708a:	699b      	ldr	r3, [r3, #24]
 801708c:	f003 0302 	and.w	r3, r3, #2
 8017090:	2b02      	cmp	r3, #2
 8017092:	d013      	beq.n	80170bc <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8017094:	68fb      	ldr	r3, [r7, #12]
 8017096:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8017098:	f043 0220 	orr.w	r2, r3, #32
 801709c:	68fb      	ldr	r3, [r7, #12]
 801709e:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80170a0:	68fb      	ldr	r3, [r7, #12]
 80170a2:	2220      	movs	r2, #32
 80170a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80170a8:	68fb      	ldr	r3, [r7, #12]
 80170aa:	2200      	movs	r2, #0
 80170ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80170b0:	68fb      	ldr	r3, [r7, #12]
 80170b2:	2200      	movs	r2, #0
 80170b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 80170b8:	2301      	movs	r3, #1
 80170ba:	e007      	b.n	80170cc <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80170bc:	68fb      	ldr	r3, [r7, #12]
 80170be:	681b      	ldr	r3, [r3, #0]
 80170c0:	699b      	ldr	r3, [r3, #24]
 80170c2:	f003 0302 	and.w	r3, r3, #2
 80170c6:	2b02      	cmp	r3, #2
 80170c8:	d1c4      	bne.n	8017054 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80170ca:	2300      	movs	r3, #0
}
 80170cc:	4618      	mov	r0, r3
 80170ce:	3710      	adds	r7, #16
 80170d0:	46bd      	mov	sp, r7
 80170d2:	bd80      	pop	{r7, pc}

080170d4 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80170d4:	b580      	push	{r7, lr}
 80170d6:	b084      	sub	sp, #16
 80170d8:	af00      	add	r7, sp, #0
 80170da:	60f8      	str	r0, [r7, #12]
 80170dc:	60b9      	str	r1, [r7, #8]
 80170de:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80170e0:	e02f      	b.n	8017142 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80170e2:	687a      	ldr	r2, [r7, #4]
 80170e4:	68b9      	ldr	r1, [r7, #8]
 80170e6:	68f8      	ldr	r0, [r7, #12]
 80170e8:	f000 f8ba 	bl	8017260 <I2C_IsErrorOccurred>
 80170ec:	4603      	mov	r3, r0
 80170ee:	2b00      	cmp	r3, #0
 80170f0:	d001      	beq.n	80170f6 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80170f2:	2301      	movs	r3, #1
 80170f4:	e02d      	b.n	8017152 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80170f6:	f7fd fa2b 	bl	8014550 <HAL_GetTick>
 80170fa:	4602      	mov	r2, r0
 80170fc:	687b      	ldr	r3, [r7, #4]
 80170fe:	1ad3      	subs	r3, r2, r3
 8017100:	68ba      	ldr	r2, [r7, #8]
 8017102:	429a      	cmp	r2, r3
 8017104:	d302      	bcc.n	801710c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8017106:	68bb      	ldr	r3, [r7, #8]
 8017108:	2b00      	cmp	r3, #0
 801710a:	d11a      	bne.n	8017142 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 801710c:	68fb      	ldr	r3, [r7, #12]
 801710e:	681b      	ldr	r3, [r3, #0]
 8017110:	699b      	ldr	r3, [r3, #24]
 8017112:	f003 0320 	and.w	r3, r3, #32
 8017116:	2b20      	cmp	r3, #32
 8017118:	d013      	beq.n	8017142 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 801711a:	68fb      	ldr	r3, [r7, #12]
 801711c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801711e:	f043 0220 	orr.w	r2, r3, #32
 8017122:	68fb      	ldr	r3, [r7, #12]
 8017124:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8017126:	68fb      	ldr	r3, [r7, #12]
 8017128:	2220      	movs	r2, #32
 801712a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 801712e:	68fb      	ldr	r3, [r7, #12]
 8017130:	2200      	movs	r2, #0
 8017132:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8017136:	68fb      	ldr	r3, [r7, #12]
 8017138:	2200      	movs	r2, #0
 801713a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 801713e:	2301      	movs	r3, #1
 8017140:	e007      	b.n	8017152 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8017142:	68fb      	ldr	r3, [r7, #12]
 8017144:	681b      	ldr	r3, [r3, #0]
 8017146:	699b      	ldr	r3, [r3, #24]
 8017148:	f003 0320 	and.w	r3, r3, #32
 801714c:	2b20      	cmp	r3, #32
 801714e:	d1c8      	bne.n	80170e2 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8017150:	2300      	movs	r3, #0
}
 8017152:	4618      	mov	r0, r3
 8017154:	3710      	adds	r7, #16
 8017156:	46bd      	mov	sp, r7
 8017158:	bd80      	pop	{r7, pc}
	...

0801715c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 801715c:	b580      	push	{r7, lr}
 801715e:	b084      	sub	sp, #16
 8017160:	af00      	add	r7, sp, #0
 8017162:	60f8      	str	r0, [r7, #12]
 8017164:	60b9      	str	r1, [r7, #8]
 8017166:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8017168:	e06b      	b.n	8017242 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 801716a:	687a      	ldr	r2, [r7, #4]
 801716c:	68b9      	ldr	r1, [r7, #8]
 801716e:	68f8      	ldr	r0, [r7, #12]
 8017170:	f000 f876 	bl	8017260 <I2C_IsErrorOccurred>
 8017174:	4603      	mov	r3, r0
 8017176:	2b00      	cmp	r3, #0
 8017178:	d001      	beq.n	801717e <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 801717a:	2301      	movs	r3, #1
 801717c:	e069      	b.n	8017252 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 801717e:	68fb      	ldr	r3, [r7, #12]
 8017180:	681b      	ldr	r3, [r3, #0]
 8017182:	699b      	ldr	r3, [r3, #24]
 8017184:	f003 0320 	and.w	r3, r3, #32
 8017188:	2b20      	cmp	r3, #32
 801718a:	d138      	bne.n	80171fe <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 801718c:	68fb      	ldr	r3, [r7, #12]
 801718e:	681b      	ldr	r3, [r3, #0]
 8017190:	699b      	ldr	r3, [r3, #24]
 8017192:	f003 0304 	and.w	r3, r3, #4
 8017196:	2b04      	cmp	r3, #4
 8017198:	d105      	bne.n	80171a6 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 801719a:	68fb      	ldr	r3, [r7, #12]
 801719c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801719e:	2b00      	cmp	r3, #0
 80171a0:	d001      	beq.n	80171a6 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 80171a2:	2300      	movs	r3, #0
 80171a4:	e055      	b.n	8017252 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80171a6:	68fb      	ldr	r3, [r7, #12]
 80171a8:	681b      	ldr	r3, [r3, #0]
 80171aa:	699b      	ldr	r3, [r3, #24]
 80171ac:	f003 0310 	and.w	r3, r3, #16
 80171b0:	2b10      	cmp	r3, #16
 80171b2:	d107      	bne.n	80171c4 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80171b4:	68fb      	ldr	r3, [r7, #12]
 80171b6:	681b      	ldr	r3, [r3, #0]
 80171b8:	2210      	movs	r2, #16
 80171ba:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 80171bc:	68fb      	ldr	r3, [r7, #12]
 80171be:	2204      	movs	r2, #4
 80171c0:	645a      	str	r2, [r3, #68]	; 0x44
 80171c2:	e002      	b.n	80171ca <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80171c4:	68fb      	ldr	r3, [r7, #12]
 80171c6:	2200      	movs	r2, #0
 80171c8:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80171ca:	68fb      	ldr	r3, [r7, #12]
 80171cc:	681b      	ldr	r3, [r3, #0]
 80171ce:	2220      	movs	r2, #32
 80171d0:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 80171d2:	68fb      	ldr	r3, [r7, #12]
 80171d4:	681b      	ldr	r3, [r3, #0]
 80171d6:	6859      	ldr	r1, [r3, #4]
 80171d8:	68fb      	ldr	r3, [r7, #12]
 80171da:	681a      	ldr	r2, [r3, #0]
 80171dc:	4b1f      	ldr	r3, [pc, #124]	; (801725c <I2C_WaitOnRXNEFlagUntilTimeout+0x100>)
 80171de:	400b      	ands	r3, r1
 80171e0:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 80171e2:	68fb      	ldr	r3, [r7, #12]
 80171e4:	2220      	movs	r2, #32
 80171e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80171ea:	68fb      	ldr	r3, [r7, #12]
 80171ec:	2200      	movs	r2, #0
 80171ee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80171f2:	68fb      	ldr	r3, [r7, #12]
 80171f4:	2200      	movs	r2, #0
 80171f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80171fa:	2301      	movs	r3, #1
 80171fc:	e029      	b.n	8017252 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80171fe:	f7fd f9a7 	bl	8014550 <HAL_GetTick>
 8017202:	4602      	mov	r2, r0
 8017204:	687b      	ldr	r3, [r7, #4]
 8017206:	1ad3      	subs	r3, r2, r3
 8017208:	68ba      	ldr	r2, [r7, #8]
 801720a:	429a      	cmp	r2, r3
 801720c:	d302      	bcc.n	8017214 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 801720e:	68bb      	ldr	r3, [r7, #8]
 8017210:	2b00      	cmp	r3, #0
 8017212:	d116      	bne.n	8017242 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8017214:	68fb      	ldr	r3, [r7, #12]
 8017216:	681b      	ldr	r3, [r3, #0]
 8017218:	699b      	ldr	r3, [r3, #24]
 801721a:	f003 0304 	and.w	r3, r3, #4
 801721e:	2b04      	cmp	r3, #4
 8017220:	d00f      	beq.n	8017242 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8017222:	68fb      	ldr	r3, [r7, #12]
 8017224:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8017226:	f043 0220 	orr.w	r2, r3, #32
 801722a:	68fb      	ldr	r3, [r7, #12]
 801722c:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 801722e:	68fb      	ldr	r3, [r7, #12]
 8017230:	2220      	movs	r2, #32
 8017232:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8017236:	68fb      	ldr	r3, [r7, #12]
 8017238:	2200      	movs	r2, #0
 801723a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 801723e:	2301      	movs	r3, #1
 8017240:	e007      	b.n	8017252 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8017242:	68fb      	ldr	r3, [r7, #12]
 8017244:	681b      	ldr	r3, [r3, #0]
 8017246:	699b      	ldr	r3, [r3, #24]
 8017248:	f003 0304 	and.w	r3, r3, #4
 801724c:	2b04      	cmp	r3, #4
 801724e:	d18c      	bne.n	801716a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8017250:	2300      	movs	r3, #0
}
 8017252:	4618      	mov	r0, r3
 8017254:	3710      	adds	r7, #16
 8017256:	46bd      	mov	sp, r7
 8017258:	bd80      	pop	{r7, pc}
 801725a:	bf00      	nop
 801725c:	fe00e800 	.word	0xfe00e800

08017260 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8017260:	b580      	push	{r7, lr}
 8017262:	b08a      	sub	sp, #40	; 0x28
 8017264:	af00      	add	r7, sp, #0
 8017266:	60f8      	str	r0, [r7, #12]
 8017268:	60b9      	str	r1, [r7, #8]
 801726a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 801726c:	2300      	movs	r3, #0
 801726e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8017272:	68fb      	ldr	r3, [r7, #12]
 8017274:	681b      	ldr	r3, [r3, #0]
 8017276:	699b      	ldr	r3, [r3, #24]
 8017278:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 801727a:	2300      	movs	r3, #0
 801727c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 801727e:	687b      	ldr	r3, [r7, #4]
 8017280:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8017282:	69bb      	ldr	r3, [r7, #24]
 8017284:	f003 0310 	and.w	r3, r3, #16
 8017288:	2b00      	cmp	r3, #0
 801728a:	d068      	beq.n	801735e <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 801728c:	68fb      	ldr	r3, [r7, #12]
 801728e:	681b      	ldr	r3, [r3, #0]
 8017290:	2210      	movs	r2, #16
 8017292:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8017294:	e049      	b.n	801732a <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8017296:	68bb      	ldr	r3, [r7, #8]
 8017298:	f1b3 3fff 	cmp.w	r3, #4294967295
 801729c:	d045      	beq.n	801732a <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 801729e:	f7fd f957 	bl	8014550 <HAL_GetTick>
 80172a2:	4602      	mov	r2, r0
 80172a4:	69fb      	ldr	r3, [r7, #28]
 80172a6:	1ad3      	subs	r3, r2, r3
 80172a8:	68ba      	ldr	r2, [r7, #8]
 80172aa:	429a      	cmp	r2, r3
 80172ac:	d302      	bcc.n	80172b4 <I2C_IsErrorOccurred+0x54>
 80172ae:	68bb      	ldr	r3, [r7, #8]
 80172b0:	2b00      	cmp	r3, #0
 80172b2:	d13a      	bne.n	801732a <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80172b4:	68fb      	ldr	r3, [r7, #12]
 80172b6:	681b      	ldr	r3, [r3, #0]
 80172b8:	685b      	ldr	r3, [r3, #4]
 80172ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80172be:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80172c0:	68fb      	ldr	r3, [r7, #12]
 80172c2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80172c6:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80172c8:	68fb      	ldr	r3, [r7, #12]
 80172ca:	681b      	ldr	r3, [r3, #0]
 80172cc:	699b      	ldr	r3, [r3, #24]
 80172ce:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80172d2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80172d6:	d121      	bne.n	801731c <I2C_IsErrorOccurred+0xbc>
 80172d8:	697b      	ldr	r3, [r7, #20]
 80172da:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80172de:	d01d      	beq.n	801731c <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80172e0:	7cfb      	ldrb	r3, [r7, #19]
 80172e2:	2b20      	cmp	r3, #32
 80172e4:	d01a      	beq.n	801731c <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80172e6:	68fb      	ldr	r3, [r7, #12]
 80172e8:	681b      	ldr	r3, [r3, #0]
 80172ea:	685a      	ldr	r2, [r3, #4]
 80172ec:	68fb      	ldr	r3, [r7, #12]
 80172ee:	681b      	ldr	r3, [r3, #0]
 80172f0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80172f4:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80172f6:	f7fd f92b 	bl	8014550 <HAL_GetTick>
 80172fa:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80172fc:	e00e      	b.n	801731c <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80172fe:	f7fd f927 	bl	8014550 <HAL_GetTick>
 8017302:	4602      	mov	r2, r0
 8017304:	69fb      	ldr	r3, [r7, #28]
 8017306:	1ad3      	subs	r3, r2, r3
 8017308:	2b19      	cmp	r3, #25
 801730a:	d907      	bls.n	801731c <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 801730c:	6a3b      	ldr	r3, [r7, #32]
 801730e:	f043 0320 	orr.w	r3, r3, #32
 8017312:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8017314:	2301      	movs	r3, #1
 8017316:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 801731a:	e006      	b.n	801732a <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 801731c:	68fb      	ldr	r3, [r7, #12]
 801731e:	681b      	ldr	r3, [r3, #0]
 8017320:	699b      	ldr	r3, [r3, #24]
 8017322:	f003 0320 	and.w	r3, r3, #32
 8017326:	2b20      	cmp	r3, #32
 8017328:	d1e9      	bne.n	80172fe <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 801732a:	68fb      	ldr	r3, [r7, #12]
 801732c:	681b      	ldr	r3, [r3, #0]
 801732e:	699b      	ldr	r3, [r3, #24]
 8017330:	f003 0320 	and.w	r3, r3, #32
 8017334:	2b20      	cmp	r3, #32
 8017336:	d003      	beq.n	8017340 <I2C_IsErrorOccurred+0xe0>
 8017338:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801733c:	2b00      	cmp	r3, #0
 801733e:	d0aa      	beq.n	8017296 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8017340:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8017344:	2b00      	cmp	r3, #0
 8017346:	d103      	bne.n	8017350 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8017348:	68fb      	ldr	r3, [r7, #12]
 801734a:	681b      	ldr	r3, [r3, #0]
 801734c:	2220      	movs	r2, #32
 801734e:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8017350:	6a3b      	ldr	r3, [r7, #32]
 8017352:	f043 0304 	orr.w	r3, r3, #4
 8017356:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8017358:	2301      	movs	r3, #1
 801735a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 801735e:	68fb      	ldr	r3, [r7, #12]
 8017360:	681b      	ldr	r3, [r3, #0]
 8017362:	699b      	ldr	r3, [r3, #24]
 8017364:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8017366:	69bb      	ldr	r3, [r7, #24]
 8017368:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801736c:	2b00      	cmp	r3, #0
 801736e:	d00b      	beq.n	8017388 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8017370:	6a3b      	ldr	r3, [r7, #32]
 8017372:	f043 0301 	orr.w	r3, r3, #1
 8017376:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8017378:	68fb      	ldr	r3, [r7, #12]
 801737a:	681b      	ldr	r3, [r3, #0]
 801737c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8017380:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8017382:	2301      	movs	r3, #1
 8017384:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8017388:	69bb      	ldr	r3, [r7, #24]
 801738a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801738e:	2b00      	cmp	r3, #0
 8017390:	d00b      	beq.n	80173aa <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8017392:	6a3b      	ldr	r3, [r7, #32]
 8017394:	f043 0308 	orr.w	r3, r3, #8
 8017398:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 801739a:	68fb      	ldr	r3, [r7, #12]
 801739c:	681b      	ldr	r3, [r3, #0]
 801739e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80173a2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80173a4:	2301      	movs	r3, #1
 80173a6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80173aa:	69bb      	ldr	r3, [r7, #24]
 80173ac:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80173b0:	2b00      	cmp	r3, #0
 80173b2:	d00b      	beq.n	80173cc <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80173b4:	6a3b      	ldr	r3, [r7, #32]
 80173b6:	f043 0302 	orr.w	r3, r3, #2
 80173ba:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80173bc:	68fb      	ldr	r3, [r7, #12]
 80173be:	681b      	ldr	r3, [r3, #0]
 80173c0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80173c4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80173c6:	2301      	movs	r3, #1
 80173c8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 80173cc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80173d0:	2b00      	cmp	r3, #0
 80173d2:	d01c      	beq.n	801740e <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80173d4:	68f8      	ldr	r0, [r7, #12]
 80173d6:	f7ff fdc3 	bl	8016f60 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80173da:	68fb      	ldr	r3, [r7, #12]
 80173dc:	681b      	ldr	r3, [r3, #0]
 80173de:	6859      	ldr	r1, [r3, #4]
 80173e0:	68fb      	ldr	r3, [r7, #12]
 80173e2:	681a      	ldr	r2, [r3, #0]
 80173e4:	4b0d      	ldr	r3, [pc, #52]	; (801741c <I2C_IsErrorOccurred+0x1bc>)
 80173e6:	400b      	ands	r3, r1
 80173e8:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80173ea:	68fb      	ldr	r3, [r7, #12]
 80173ec:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80173ee:	6a3b      	ldr	r3, [r7, #32]
 80173f0:	431a      	orrs	r2, r3
 80173f2:	68fb      	ldr	r3, [r7, #12]
 80173f4:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80173f6:	68fb      	ldr	r3, [r7, #12]
 80173f8:	2220      	movs	r2, #32
 80173fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80173fe:	68fb      	ldr	r3, [r7, #12]
 8017400:	2200      	movs	r2, #0
 8017402:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8017406:	68fb      	ldr	r3, [r7, #12]
 8017408:	2200      	movs	r2, #0
 801740a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 801740e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8017412:	4618      	mov	r0, r3
 8017414:	3728      	adds	r7, #40	; 0x28
 8017416:	46bd      	mov	sp, r7
 8017418:	bd80      	pop	{r7, pc}
 801741a:	bf00      	nop
 801741c:	fe00e800 	.word	0xfe00e800

08017420 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8017420:	b480      	push	{r7}
 8017422:	b087      	sub	sp, #28
 8017424:	af00      	add	r7, sp, #0
 8017426:	60f8      	str	r0, [r7, #12]
 8017428:	607b      	str	r3, [r7, #4]
 801742a:	460b      	mov	r3, r1
 801742c:	817b      	strh	r3, [r7, #10]
 801742e:	4613      	mov	r3, r2
 8017430:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8017432:	897b      	ldrh	r3, [r7, #10]
 8017434:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8017438:	7a7b      	ldrb	r3, [r7, #9]
 801743a:	041b      	lsls	r3, r3, #16
 801743c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8017440:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8017442:	687b      	ldr	r3, [r7, #4]
 8017444:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8017446:	6a3b      	ldr	r3, [r7, #32]
 8017448:	4313      	orrs	r3, r2
 801744a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801744e:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8017450:	68fb      	ldr	r3, [r7, #12]
 8017452:	681b      	ldr	r3, [r3, #0]
 8017454:	685a      	ldr	r2, [r3, #4]
 8017456:	6a3b      	ldr	r3, [r7, #32]
 8017458:	0d5b      	lsrs	r3, r3, #21
 801745a:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 801745e:	4b08      	ldr	r3, [pc, #32]	; (8017480 <I2C_TransferConfig+0x60>)
 8017460:	430b      	orrs	r3, r1
 8017462:	43db      	mvns	r3, r3
 8017464:	ea02 0103 	and.w	r1, r2, r3
 8017468:	68fb      	ldr	r3, [r7, #12]
 801746a:	681b      	ldr	r3, [r3, #0]
 801746c:	697a      	ldr	r2, [r7, #20]
 801746e:	430a      	orrs	r2, r1
 8017470:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8017472:	bf00      	nop
 8017474:	371c      	adds	r7, #28
 8017476:	46bd      	mov	sp, r7
 8017478:	f85d 7b04 	ldr.w	r7, [sp], #4
 801747c:	4770      	bx	lr
 801747e:	bf00      	nop
 8017480:	03ff63ff 	.word	0x03ff63ff

08017484 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8017484:	b480      	push	{r7}
 8017486:	b083      	sub	sp, #12
 8017488:	af00      	add	r7, sp, #0
 801748a:	6078      	str	r0, [r7, #4]
 801748c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 801748e:	687b      	ldr	r3, [r7, #4]
 8017490:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8017494:	b2db      	uxtb	r3, r3
 8017496:	2b20      	cmp	r3, #32
 8017498:	d138      	bne.n	801750c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 801749a:	687b      	ldr	r3, [r7, #4]
 801749c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80174a0:	2b01      	cmp	r3, #1
 80174a2:	d101      	bne.n	80174a8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80174a4:	2302      	movs	r3, #2
 80174a6:	e032      	b.n	801750e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80174a8:	687b      	ldr	r3, [r7, #4]
 80174aa:	2201      	movs	r2, #1
 80174ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80174b0:	687b      	ldr	r3, [r7, #4]
 80174b2:	2224      	movs	r2, #36	; 0x24
 80174b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80174b8:	687b      	ldr	r3, [r7, #4]
 80174ba:	681b      	ldr	r3, [r3, #0]
 80174bc:	681a      	ldr	r2, [r3, #0]
 80174be:	687b      	ldr	r3, [r7, #4]
 80174c0:	681b      	ldr	r3, [r3, #0]
 80174c2:	f022 0201 	bic.w	r2, r2, #1
 80174c6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80174c8:	687b      	ldr	r3, [r7, #4]
 80174ca:	681b      	ldr	r3, [r3, #0]
 80174cc:	681a      	ldr	r2, [r3, #0]
 80174ce:	687b      	ldr	r3, [r7, #4]
 80174d0:	681b      	ldr	r3, [r3, #0]
 80174d2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80174d6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80174d8:	687b      	ldr	r3, [r7, #4]
 80174da:	681b      	ldr	r3, [r3, #0]
 80174dc:	6819      	ldr	r1, [r3, #0]
 80174de:	687b      	ldr	r3, [r7, #4]
 80174e0:	681b      	ldr	r3, [r3, #0]
 80174e2:	683a      	ldr	r2, [r7, #0]
 80174e4:	430a      	orrs	r2, r1
 80174e6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80174e8:	687b      	ldr	r3, [r7, #4]
 80174ea:	681b      	ldr	r3, [r3, #0]
 80174ec:	681a      	ldr	r2, [r3, #0]
 80174ee:	687b      	ldr	r3, [r7, #4]
 80174f0:	681b      	ldr	r3, [r3, #0]
 80174f2:	f042 0201 	orr.w	r2, r2, #1
 80174f6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80174f8:	687b      	ldr	r3, [r7, #4]
 80174fa:	2220      	movs	r2, #32
 80174fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8017500:	687b      	ldr	r3, [r7, #4]
 8017502:	2200      	movs	r2, #0
 8017504:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8017508:	2300      	movs	r3, #0
 801750a:	e000      	b.n	801750e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 801750c:	2302      	movs	r3, #2
  }
}
 801750e:	4618      	mov	r0, r3
 8017510:	370c      	adds	r7, #12
 8017512:	46bd      	mov	sp, r7
 8017514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017518:	4770      	bx	lr

0801751a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 801751a:	b480      	push	{r7}
 801751c:	b085      	sub	sp, #20
 801751e:	af00      	add	r7, sp, #0
 8017520:	6078      	str	r0, [r7, #4]
 8017522:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8017524:	687b      	ldr	r3, [r7, #4]
 8017526:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 801752a:	b2db      	uxtb	r3, r3
 801752c:	2b20      	cmp	r3, #32
 801752e:	d139      	bne.n	80175a4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8017530:	687b      	ldr	r3, [r7, #4]
 8017532:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8017536:	2b01      	cmp	r3, #1
 8017538:	d101      	bne.n	801753e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 801753a:	2302      	movs	r3, #2
 801753c:	e033      	b.n	80175a6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 801753e:	687b      	ldr	r3, [r7, #4]
 8017540:	2201      	movs	r2, #1
 8017542:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8017546:	687b      	ldr	r3, [r7, #4]
 8017548:	2224      	movs	r2, #36	; 0x24
 801754a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 801754e:	687b      	ldr	r3, [r7, #4]
 8017550:	681b      	ldr	r3, [r3, #0]
 8017552:	681a      	ldr	r2, [r3, #0]
 8017554:	687b      	ldr	r3, [r7, #4]
 8017556:	681b      	ldr	r3, [r3, #0]
 8017558:	f022 0201 	bic.w	r2, r2, #1
 801755c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 801755e:	687b      	ldr	r3, [r7, #4]
 8017560:	681b      	ldr	r3, [r3, #0]
 8017562:	681b      	ldr	r3, [r3, #0]
 8017564:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8017566:	68fb      	ldr	r3, [r7, #12]
 8017568:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 801756c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 801756e:	683b      	ldr	r3, [r7, #0]
 8017570:	021b      	lsls	r3, r3, #8
 8017572:	68fa      	ldr	r2, [r7, #12]
 8017574:	4313      	orrs	r3, r2
 8017576:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8017578:	687b      	ldr	r3, [r7, #4]
 801757a:	681b      	ldr	r3, [r3, #0]
 801757c:	68fa      	ldr	r2, [r7, #12]
 801757e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8017580:	687b      	ldr	r3, [r7, #4]
 8017582:	681b      	ldr	r3, [r3, #0]
 8017584:	681a      	ldr	r2, [r3, #0]
 8017586:	687b      	ldr	r3, [r7, #4]
 8017588:	681b      	ldr	r3, [r3, #0]
 801758a:	f042 0201 	orr.w	r2, r2, #1
 801758e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8017590:	687b      	ldr	r3, [r7, #4]
 8017592:	2220      	movs	r2, #32
 8017594:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8017598:	687b      	ldr	r3, [r7, #4]
 801759a:	2200      	movs	r2, #0
 801759c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80175a0:	2300      	movs	r3, #0
 80175a2:	e000      	b.n	80175a6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80175a4:	2302      	movs	r3, #2
  }
}
 80175a6:	4618      	mov	r0, r3
 80175a8:	3714      	adds	r7, #20
 80175aa:	46bd      	mov	sp, r7
 80175ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80175b0:	4770      	bx	lr
	...

080175b4 <HAL_ICACHE_ConfigAssociativityMode>:
  *            @arg ICACHE_1WAY   1-way cache (direct mapped cache)
  *            @arg ICACHE_2WAYS  2-ways set associative cache (default)
  * @retval HAL status (HAL_OK/HAL_ERROR)
  */
HAL_StatusTypeDef HAL_ICACHE_ConfigAssociativityMode(uint32_t AssociativityMode)
{
 80175b4:	b480      	push	{r7}
 80175b6:	b085      	sub	sp, #20
 80175b8:	af00      	add	r7, sp, #0
 80175ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80175bc:	2300      	movs	r3, #0
 80175be:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_ICACHE_ASSOCIATIVITY_MODE(AssociativityMode));

  /* Check cache is not enabled */
  if (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 80175c0:	4b0b      	ldr	r3, [pc, #44]	; (80175f0 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 80175c2:	681b      	ldr	r3, [r3, #0]
 80175c4:	f003 0301 	and.w	r3, r3, #1
 80175c8:	2b00      	cmp	r3, #0
 80175ca:	d002      	beq.n	80175d2 <HAL_ICACHE_ConfigAssociativityMode+0x1e>
  {
    status = HAL_ERROR;
 80175cc:	2301      	movs	r3, #1
 80175ce:	73fb      	strb	r3, [r7, #15]
 80175d0:	e007      	b.n	80175e2 <HAL_ICACHE_ConfigAssociativityMode+0x2e>
  }
  else
  {
    MODIFY_REG(ICACHE->CR, ICACHE_CR_WAYSEL, AssociativityMode);
 80175d2:	4b07      	ldr	r3, [pc, #28]	; (80175f0 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 80175d4:	681b      	ldr	r3, [r3, #0]
 80175d6:	f023 0204 	bic.w	r2, r3, #4
 80175da:	4905      	ldr	r1, [pc, #20]	; (80175f0 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 80175dc:	687b      	ldr	r3, [r7, #4]
 80175de:	4313      	orrs	r3, r2
 80175e0:	600b      	str	r3, [r1, #0]
  }

  return status;
 80175e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80175e4:	4618      	mov	r0, r3
 80175e6:	3714      	adds	r7, #20
 80175e8:	46bd      	mov	sp, r7
 80175ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80175ee:	4770      	bx	lr
 80175f0:	40030400 	.word	0x40030400

080175f4 <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 80175f4:	b480      	push	{r7}
 80175f6:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 80175f8:	4b05      	ldr	r3, [pc, #20]	; (8017610 <HAL_ICACHE_Enable+0x1c>)
 80175fa:	681b      	ldr	r3, [r3, #0]
 80175fc:	4a04      	ldr	r2, [pc, #16]	; (8017610 <HAL_ICACHE_Enable+0x1c>)
 80175fe:	f043 0301 	orr.w	r3, r3, #1
 8017602:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8017604:	2300      	movs	r3, #0
}
 8017606:	4618      	mov	r0, r3
 8017608:	46bd      	mov	sp, r7
 801760a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801760e:	4770      	bx	lr
 8017610:	40030400 	.word	0x40030400

08017614 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8017614:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017616:	b08b      	sub	sp, #44	; 0x2c
 8017618:	af06      	add	r7, sp, #24
 801761a:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 801761c:	687b      	ldr	r3, [r7, #4]
 801761e:	2b00      	cmp	r3, #0
 8017620:	d101      	bne.n	8017626 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8017622:	2301      	movs	r3, #1
 8017624:	e0cb      	b.n	80177be <HAL_PCD_Init+0x1aa>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8017626:	687b      	ldr	r3, [r7, #4]
 8017628:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 801762c:	b2db      	uxtb	r3, r3
 801762e:	2b00      	cmp	r3, #0
 8017630:	d106      	bne.n	8017640 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8017632:	687b      	ldr	r3, [r7, #4]
 8017634:	2200      	movs	r2, #0
 8017636:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 801763a:	6878      	ldr	r0, [r7, #4]
 801763c:	f7fc fc80 	bl	8013f40 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8017640:	687b      	ldr	r3, [r7, #4]
 8017642:	2203      	movs	r2, #3
 8017644:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8017648:	687b      	ldr	r3, [r7, #4]
 801764a:	681b      	ldr	r3, [r3, #0]
 801764c:	4618      	mov	r0, r3
 801764e:	f007 f9c7 	bl	801e9e0 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8017652:	2300      	movs	r3, #0
 8017654:	73fb      	strb	r3, [r7, #15]
 8017656:	e040      	b.n	80176da <HAL_PCD_Init+0xc6>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8017658:	7bfb      	ldrb	r3, [r7, #15]
 801765a:	6879      	ldr	r1, [r7, #4]
 801765c:	1c5a      	adds	r2, r3, #1
 801765e:	4613      	mov	r3, r2
 8017660:	009b      	lsls	r3, r3, #2
 8017662:	4413      	add	r3, r2
 8017664:	00db      	lsls	r3, r3, #3
 8017666:	440b      	add	r3, r1
 8017668:	3301      	adds	r3, #1
 801766a:	2201      	movs	r2, #1
 801766c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 801766e:	7bfb      	ldrb	r3, [r7, #15]
 8017670:	6879      	ldr	r1, [r7, #4]
 8017672:	1c5a      	adds	r2, r3, #1
 8017674:	4613      	mov	r3, r2
 8017676:	009b      	lsls	r3, r3, #2
 8017678:	4413      	add	r3, r2
 801767a:	00db      	lsls	r3, r3, #3
 801767c:	440b      	add	r3, r1
 801767e:	7bfa      	ldrb	r2, [r7, #15]
 8017680:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8017682:	7bfb      	ldrb	r3, [r7, #15]
 8017684:	6879      	ldr	r1, [r7, #4]
 8017686:	1c5a      	adds	r2, r3, #1
 8017688:	4613      	mov	r3, r2
 801768a:	009b      	lsls	r3, r3, #2
 801768c:	4413      	add	r3, r2
 801768e:	00db      	lsls	r3, r3, #3
 8017690:	440b      	add	r3, r1
 8017692:	3303      	adds	r3, #3
 8017694:	2200      	movs	r2, #0
 8017696:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8017698:	7bfa      	ldrb	r2, [r7, #15]
 801769a:	6879      	ldr	r1, [r7, #4]
 801769c:	4613      	mov	r3, r2
 801769e:	009b      	lsls	r3, r3, #2
 80176a0:	4413      	add	r3, r2
 80176a2:	00db      	lsls	r3, r3, #3
 80176a4:	440b      	add	r3, r1
 80176a6:	3338      	adds	r3, #56	; 0x38
 80176a8:	2200      	movs	r2, #0
 80176aa:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80176ac:	7bfa      	ldrb	r2, [r7, #15]
 80176ae:	6879      	ldr	r1, [r7, #4]
 80176b0:	4613      	mov	r3, r2
 80176b2:	009b      	lsls	r3, r3, #2
 80176b4:	4413      	add	r3, r2
 80176b6:	00db      	lsls	r3, r3, #3
 80176b8:	440b      	add	r3, r1
 80176ba:	333c      	adds	r3, #60	; 0x3c
 80176bc:	2200      	movs	r2, #0
 80176be:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80176c0:	7bfa      	ldrb	r2, [r7, #15]
 80176c2:	6879      	ldr	r1, [r7, #4]
 80176c4:	4613      	mov	r3, r2
 80176c6:	009b      	lsls	r3, r3, #2
 80176c8:	4413      	add	r3, r2
 80176ca:	00db      	lsls	r3, r3, #3
 80176cc:	440b      	add	r3, r1
 80176ce:	3340      	adds	r3, #64	; 0x40
 80176d0:	2200      	movs	r2, #0
 80176d2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80176d4:	7bfb      	ldrb	r3, [r7, #15]
 80176d6:	3301      	adds	r3, #1
 80176d8:	73fb      	strb	r3, [r7, #15]
 80176da:	7bfa      	ldrb	r2, [r7, #15]
 80176dc:	687b      	ldr	r3, [r7, #4]
 80176de:	685b      	ldr	r3, [r3, #4]
 80176e0:	429a      	cmp	r2, r3
 80176e2:	d3b9      	bcc.n	8017658 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80176e4:	2300      	movs	r3, #0
 80176e6:	73fb      	strb	r3, [r7, #15]
 80176e8:	e044      	b.n	8017774 <HAL_PCD_Init+0x160>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80176ea:	7bfa      	ldrb	r2, [r7, #15]
 80176ec:	6879      	ldr	r1, [r7, #4]
 80176ee:	4613      	mov	r3, r2
 80176f0:	009b      	lsls	r3, r3, #2
 80176f2:	4413      	add	r3, r2
 80176f4:	00db      	lsls	r3, r3, #3
 80176f6:	440b      	add	r3, r1
 80176f8:	f203 1369 	addw	r3, r3, #361	; 0x169
 80176fc:	2200      	movs	r2, #0
 80176fe:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8017700:	7bfa      	ldrb	r2, [r7, #15]
 8017702:	6879      	ldr	r1, [r7, #4]
 8017704:	4613      	mov	r3, r2
 8017706:	009b      	lsls	r3, r3, #2
 8017708:	4413      	add	r3, r2
 801770a:	00db      	lsls	r3, r3, #3
 801770c:	440b      	add	r3, r1
 801770e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8017712:	7bfa      	ldrb	r2, [r7, #15]
 8017714:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8017716:	7bfa      	ldrb	r2, [r7, #15]
 8017718:	6879      	ldr	r1, [r7, #4]
 801771a:	4613      	mov	r3, r2
 801771c:	009b      	lsls	r3, r3, #2
 801771e:	4413      	add	r3, r2
 8017720:	00db      	lsls	r3, r3, #3
 8017722:	440b      	add	r3, r1
 8017724:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8017728:	2200      	movs	r2, #0
 801772a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 801772c:	7bfa      	ldrb	r2, [r7, #15]
 801772e:	6879      	ldr	r1, [r7, #4]
 8017730:	4613      	mov	r3, r2
 8017732:	009b      	lsls	r3, r3, #2
 8017734:	4413      	add	r3, r2
 8017736:	00db      	lsls	r3, r3, #3
 8017738:	440b      	add	r3, r1
 801773a:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 801773e:	2200      	movs	r2, #0
 8017740:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8017742:	7bfa      	ldrb	r2, [r7, #15]
 8017744:	6879      	ldr	r1, [r7, #4]
 8017746:	4613      	mov	r3, r2
 8017748:	009b      	lsls	r3, r3, #2
 801774a:	4413      	add	r3, r2
 801774c:	00db      	lsls	r3, r3, #3
 801774e:	440b      	add	r3, r1
 8017750:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8017754:	2200      	movs	r2, #0
 8017756:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8017758:	7bfa      	ldrb	r2, [r7, #15]
 801775a:	6879      	ldr	r1, [r7, #4]
 801775c:	4613      	mov	r3, r2
 801775e:	009b      	lsls	r3, r3, #2
 8017760:	4413      	add	r3, r2
 8017762:	00db      	lsls	r3, r3, #3
 8017764:	440b      	add	r3, r1
 8017766:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 801776a:	2200      	movs	r2, #0
 801776c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 801776e:	7bfb      	ldrb	r3, [r7, #15]
 8017770:	3301      	adds	r3, #1
 8017772:	73fb      	strb	r3, [r7, #15]
 8017774:	7bfa      	ldrb	r2, [r7, #15]
 8017776:	687b      	ldr	r3, [r7, #4]
 8017778:	685b      	ldr	r3, [r3, #4]
 801777a:	429a      	cmp	r2, r3
 801777c:	d3b5      	bcc.n	80176ea <HAL_PCD_Init+0xd6>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 801777e:	687b      	ldr	r3, [r7, #4]
 8017780:	681b      	ldr	r3, [r3, #0]
 8017782:	603b      	str	r3, [r7, #0]
 8017784:	687e      	ldr	r6, [r7, #4]
 8017786:	466d      	mov	r5, sp
 8017788:	f106 0410 	add.w	r4, r6, #16
 801778c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801778e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8017790:	6823      	ldr	r3, [r4, #0]
 8017792:	602b      	str	r3, [r5, #0]
 8017794:	1d33      	adds	r3, r6, #4
 8017796:	cb0e      	ldmia	r3, {r1, r2, r3}
 8017798:	6838      	ldr	r0, [r7, #0]
 801779a:	f007 f93c 	bl	801ea16 <USB_DevInit>

  hpcd->USB_Address = 0U;
 801779e:	687b      	ldr	r3, [r7, #4]
 80177a0:	2200      	movs	r2, #0
 80177a2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 80177a6:	687b      	ldr	r3, [r7, #4]
 80177a8:	2201      	movs	r2, #1
 80177aa:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80177ae:	687b      	ldr	r3, [r7, #4]
 80177b0:	69db      	ldr	r3, [r3, #28]
 80177b2:	2b01      	cmp	r3, #1
 80177b4:	d102      	bne.n	80177bc <HAL_PCD_Init+0x1a8>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80177b6:	6878      	ldr	r0, [r7, #4]
 80177b8:	f000 f805 	bl	80177c6 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 80177bc:	2300      	movs	r3, #0
}
 80177be:	4618      	mov	r0, r3
 80177c0:	3714      	adds	r7, #20
 80177c2:	46bd      	mov	sp, r7
 80177c4:	bdf0      	pop	{r4, r5, r6, r7, pc}

080177c6 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80177c6:	b480      	push	{r7}
 80177c8:	b085      	sub	sp, #20
 80177ca:	af00      	add	r7, sp, #0
 80177cc:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 80177ce:	687b      	ldr	r3, [r7, #4]
 80177d0:	681b      	ldr	r3, [r3, #0]
 80177d2:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 80177d4:	687b      	ldr	r3, [r7, #4]
 80177d6:	2201      	movs	r2, #1
 80177d8:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
  hpcd->LPM_State = LPM_L0;
 80177dc:	687b      	ldr	r3, [r7, #4]
 80177de:	2200      	movs	r2, #0
 80177e0:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 80177e4:	68fb      	ldr	r3, [r7, #12]
 80177e6:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80177ea:	b29b      	uxth	r3, r3
 80177ec:	f043 0301 	orr.w	r3, r3, #1
 80177f0:	b29a      	uxth	r2, r3
 80177f2:	68fb      	ldr	r3, [r7, #12]
 80177f4:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 80177f8:	68fb      	ldr	r3, [r7, #12]
 80177fa:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80177fe:	b29b      	uxth	r3, r3
 8017800:	f043 0302 	orr.w	r3, r3, #2
 8017804:	b29a      	uxth	r2, r3
 8017806:	68fb      	ldr	r3, [r7, #12]
 8017808:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 801780c:	2300      	movs	r3, #0
}
 801780e:	4618      	mov	r0, r3
 8017810:	3714      	adds	r7, #20
 8017812:	46bd      	mov	sp, r7
 8017814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017818:	4770      	bx	lr
	...

0801781c <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 801781c:	b480      	push	{r7}
 801781e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8017820:	4b05      	ldr	r3, [pc, #20]	; (8017838 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8017822:	681b      	ldr	r3, [r3, #0]
 8017824:	4a04      	ldr	r2, [pc, #16]	; (8017838 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8017826:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801782a:	6013      	str	r3, [r2, #0]
}
 801782c:	bf00      	nop
 801782e:	46bd      	mov	sp, r7
 8017830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017834:	4770      	bx	lr
 8017836:	bf00      	nop
 8017838:	40007000 	.word	0x40007000

0801783c <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE0, PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 801783c:	b480      	push	{r7}
 801783e:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8017840:	4b04      	ldr	r3, [pc, #16]	; (8017854 <HAL_PWREx_GetVoltageRange+0x18>)
 8017842:	681b      	ldr	r3, [r3, #0]
 8017844:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8017848:	4618      	mov	r0, r3
 801784a:	46bd      	mov	sp, r7
 801784c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017850:	4770      	bx	lr
 8017852:	bf00      	nop
 8017854:	40007000 	.word	0x40007000

08017858 <HAL_PWREx_ControlVoltageScaling>:
  * @note  The VOS shall NOT be changed in LP Mode of if LP mode is asked.
  * @note  The function shall not be called in Low-power run mode (meaningless and misleading).
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8017858:	b580      	push	{r7, lr}
 801785a:	b084      	sub	sp, #16
 801785c:	af00      	add	r7, sp, #0
 801785e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  uint32_t vos_old = READ_BIT(PWR->CR1, PWR_CR1_VOS);
 8017860:	4b27      	ldr	r3, [pc, #156]	; (8017900 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8017862:	681b      	ldr	r3, [r3, #0]
 8017864:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8017868:	60bb      	str	r3, [r7, #8]

  /* VOS shall not be changed in LP Mode            */
  /* or if LP Mode is asked but not yet established */
  if (HAL_PWREx_SMPS_GetEffectiveMode() == PWR_SMPS_LOW_POWER)
 801786a:	f000 f861 	bl	8017930 <HAL_PWREx_SMPS_GetEffectiveMode>
 801786e:	4603      	mov	r3, r0
 8017870:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8017874:	d101      	bne.n	801787a <HAL_PWREx_ControlVoltageScaling+0x22>
  {
    return HAL_ERROR;
 8017876:	2301      	movs	r3, #1
 8017878:	e03e      	b.n	80178f8 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }
  if (READ_BIT(PWR->CR4, PWR_CR4_SMPSLPEN) == PWR_CR4_SMPSLPEN)
 801787a:	4b21      	ldr	r3, [pc, #132]	; (8017900 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 801787c:	68db      	ldr	r3, [r3, #12]
 801787e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8017882:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8017886:	d101      	bne.n	801788c <HAL_PWREx_ControlVoltageScaling+0x34>
  {
    return HAL_ERROR;
 8017888:	2301      	movs	r3, #1
 801788a:	e035      	b.n	80178f8 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 801788c:	68ba      	ldr	r2, [r7, #8]
 801788e:	687b      	ldr	r3, [r7, #4]
 8017890:	429a      	cmp	r2, r3
 8017892:	d101      	bne.n	8017898 <HAL_PWREx_ControlVoltageScaling+0x40>
  {
    return HAL_OK;
 8017894:	2300      	movs	r3, #0
 8017896:	e02f      	b.n	80178f8 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8017898:	4b19      	ldr	r3, [pc, #100]	; (8017900 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 801789a:	681b      	ldr	r3, [r3, #0]
 801789c:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 80178a0:	4917      	ldr	r1, [pc, #92]	; (8017900 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80178a2:	687b      	ldr	r3, [r7, #4]
 80178a4:	4313      	orrs	r3, r2
 80178a6:	600b      	str	r3, [r1, #0]

  /* Wait until VOSF is cleared */
  /* and at least one iteration loop */
  wait_loop_index = ((PWR_VOSF_SETTING_DELAY_VALUE * (SystemCoreClock / 100000U)) / 10U) + 1U;
 80178a8:	4b16      	ldr	r3, [pc, #88]	; (8017904 <HAL_PWREx_ControlVoltageScaling+0xac>)
 80178aa:	681b      	ldr	r3, [r3, #0]
 80178ac:	095b      	lsrs	r3, r3, #5
 80178ae:	4a16      	ldr	r2, [pc, #88]	; (8017908 <HAL_PWREx_ControlVoltageScaling+0xb0>)
 80178b0:	fba2 2303 	umull	r2, r3, r2, r3
 80178b4:	09db      	lsrs	r3, r3, #7
 80178b6:	2232      	movs	r2, #50	; 0x32
 80178b8:	fb02 f303 	mul.w	r3, r2, r3
 80178bc:	4a13      	ldr	r2, [pc, #76]	; (801790c <HAL_PWREx_ControlVoltageScaling+0xb4>)
 80178be:	fba2 2303 	umull	r2, r3, r2, r3
 80178c2:	08db      	lsrs	r3, r3, #3
 80178c4:	3301      	adds	r3, #1
 80178c6:	60fb      	str	r3, [r7, #12]

  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80178c8:	e002      	b.n	80178d0 <HAL_PWREx_ControlVoltageScaling+0x78>
  {
    wait_loop_index--;
 80178ca:	68fb      	ldr	r3, [r7, #12]
 80178cc:	3b01      	subs	r3, #1
 80178ce:	60fb      	str	r3, [r7, #12]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80178d0:	4b0b      	ldr	r3, [pc, #44]	; (8017900 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80178d2:	695b      	ldr	r3, [r3, #20]
 80178d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80178d8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80178dc:	d102      	bne.n	80178e4 <HAL_PWREx_ControlVoltageScaling+0x8c>
 80178de:	68fb      	ldr	r3, [r7, #12]
 80178e0:	2b00      	cmp	r3, #0
 80178e2:	d1f2      	bne.n	80178ca <HAL_PWREx_ControlVoltageScaling+0x72>
  }

  if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80178e4:	4b06      	ldr	r3, [pc, #24]	; (8017900 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80178e6:	695b      	ldr	r3, [r3, #20]
 80178e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80178ec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80178f0:	d101      	bne.n	80178f6 <HAL_PWREx_ControlVoltageScaling+0x9e>
  {
    return HAL_TIMEOUT;
 80178f2:	2303      	movs	r3, #3
 80178f4:	e000      	b.n	80178f8 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  return HAL_OK;
 80178f6:	2300      	movs	r3, #0
}
 80178f8:	4618      	mov	r0, r3
 80178fa:	3710      	adds	r7, #16
 80178fc:	46bd      	mov	sp, r7
 80178fe:	bd80      	pop	{r7, pc}
 8017900:	40007000 	.word	0x40007000
 8017904:	20000090 	.word	0x20000090
 8017908:	0a7c5ac5 	.word	0x0a7c5ac5
 801790c:	cccccccd 	.word	0xcccccccd

08017910 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8017910:	b480      	push	{r7}
 8017912:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8017914:	4b05      	ldr	r3, [pc, #20]	; (801792c <HAL_PWREx_EnableVddIO2+0x1c>)
 8017916:	685b      	ldr	r3, [r3, #4]
 8017918:	4a04      	ldr	r2, [pc, #16]	; (801792c <HAL_PWREx_EnableVddIO2+0x1c>)
 801791a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 801791e:	6053      	str	r3, [r2, #4]
}
 8017920:	bf00      	nop
 8017922:	46bd      	mov	sp, r7
 8017924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017928:	4770      	bx	lr
 801792a:	bf00      	nop
 801792c:	40007000 	.word	0x40007000

08017930 <HAL_PWREx_SMPS_GetEffectiveMode>:
  *         @arg @ref PWR_SMPS_HIGH_POWER    SMPS step down converter in high-power mode (default)
  *         @arg @ref PWR_SMPS_LOW_POWER     SMPS step down converter in low-power mode
  *         @arg @ref PWR_SMPS_BYPASS        SMPS step down converter in bypass mode
  */
uint32_t HAL_PWREx_SMPS_GetEffectiveMode(void)
{
 8017930:	b480      	push	{r7}
 8017932:	b083      	sub	sp, #12
 8017934:	af00      	add	r7, sp, #0
  uint32_t mode;
  uint32_t pwr_sr1;

  pwr_sr1 = READ_REG(PWR->SR1);
 8017936:	4b0f      	ldr	r3, [pc, #60]	; (8017974 <HAL_PWREx_SMPS_GetEffectiveMode+0x44>)
 8017938:	691b      	ldr	r3, [r3, #16]
 801793a:	603b      	str	r3, [r7, #0]
  if (READ_BIT(pwr_sr1, PWR_SR1_SMPSBYPRDY) != 0U)
 801793c:	683b      	ldr	r3, [r7, #0]
 801793e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8017942:	2b00      	cmp	r3, #0
 8017944:	d003      	beq.n	801794e <HAL_PWREx_SMPS_GetEffectiveMode+0x1e>
  {
    mode = PWR_SMPS_BYPASS;
 8017946:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801794a:	607b      	str	r3, [r7, #4]
 801794c:	e00a      	b.n	8017964 <HAL_PWREx_SMPS_GetEffectiveMode+0x34>
  }
  else if (READ_BIT(pwr_sr1, PWR_SR1_SMPSHPRDY) == 0U)
 801794e:	683b      	ldr	r3, [r7, #0]
 8017950:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8017954:	2b00      	cmp	r3, #0
 8017956:	d103      	bne.n	8017960 <HAL_PWREx_SMPS_GetEffectiveMode+0x30>
  {
    mode = PWR_SMPS_LOW_POWER;
 8017958:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801795c:	607b      	str	r3, [r7, #4]
 801795e:	e001      	b.n	8017964 <HAL_PWREx_SMPS_GetEffectiveMode+0x34>
  }
  else
  {
    mode = PWR_SMPS_HIGH_POWER;
 8017960:	2300      	movs	r3, #0
 8017962:	607b      	str	r3, [r7, #4]
  }

  return mode;
 8017964:	687b      	ldr	r3, [r7, #4]
}
 8017966:	4618      	mov	r0, r3
 8017968:	370c      	adds	r7, #12
 801796a:	46bd      	mov	sp, r7
 801796c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017970:	4770      	bx	lr
 8017972:	bf00      	nop
 8017974:	40007000 	.word	0x40007000

08017978 <HAL_RCC_OscConfig>:
  *         and is updated by this function in case of simple MSI range update when MSI
  *         used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8017978:	b580      	push	{r7, lr}
 801797a:	b088      	sub	sp, #32
 801797c:	af00      	add	r7, sp, #0
 801797e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8017980:	687b      	ldr	r3, [r7, #4]
 8017982:	2b00      	cmp	r3, #0
 8017984:	d102      	bne.n	801798c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8017986:	2301      	movs	r3, #1
 8017988:	f000 bcc2 	b.w	8018310 <HAL_RCC_OscConfig+0x998>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 801798c:	4b99      	ldr	r3, [pc, #612]	; (8017bf4 <HAL_RCC_OscConfig+0x27c>)
 801798e:	689b      	ldr	r3, [r3, #8]
 8017990:	f003 030c 	and.w	r3, r3, #12
 8017994:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8017996:	4b97      	ldr	r3, [pc, #604]	; (8017bf4 <HAL_RCC_OscConfig+0x27c>)
 8017998:	68db      	ldr	r3, [r3, #12]
 801799a:	f003 0303 	and.w	r3, r3, #3
 801799e:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80179a0:	687b      	ldr	r3, [r7, #4]
 80179a2:	681b      	ldr	r3, [r3, #0]
 80179a4:	f003 0310 	and.w	r3, r3, #16
 80179a8:	2b00      	cmp	r3, #0
 80179aa:	f000 80e9 	beq.w	8017b80 <HAL_RCC_OscConfig+0x208>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80179ae:	69bb      	ldr	r3, [r7, #24]
 80179b0:	2b00      	cmp	r3, #0
 80179b2:	d006      	beq.n	80179c2 <HAL_RCC_OscConfig+0x4a>
 80179b4:	69bb      	ldr	r3, [r7, #24]
 80179b6:	2b0c      	cmp	r3, #12
 80179b8:	f040 8083 	bne.w	8017ac2 <HAL_RCC_OscConfig+0x14a>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 80179bc:	697b      	ldr	r3, [r7, #20]
 80179be:	2b01      	cmp	r3, #1
 80179c0:	d17f      	bne.n	8017ac2 <HAL_RCC_OscConfig+0x14a>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80179c2:	4b8c      	ldr	r3, [pc, #560]	; (8017bf4 <HAL_RCC_OscConfig+0x27c>)
 80179c4:	681b      	ldr	r3, [r3, #0]
 80179c6:	f003 0302 	and.w	r3, r3, #2
 80179ca:	2b00      	cmp	r3, #0
 80179cc:	d006      	beq.n	80179dc <HAL_RCC_OscConfig+0x64>
 80179ce:	687b      	ldr	r3, [r7, #4]
 80179d0:	69db      	ldr	r3, [r3, #28]
 80179d2:	2b00      	cmp	r3, #0
 80179d4:	d102      	bne.n	80179dc <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80179d6:	2301      	movs	r3, #1
 80179d8:	f000 bc9a 	b.w	8018310 <HAL_RCC_OscConfig+0x998>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80179dc:	687b      	ldr	r3, [r7, #4]
 80179de:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80179e0:	4b84      	ldr	r3, [pc, #528]	; (8017bf4 <HAL_RCC_OscConfig+0x27c>)
 80179e2:	681b      	ldr	r3, [r3, #0]
 80179e4:	f003 0308 	and.w	r3, r3, #8
 80179e8:	2b00      	cmp	r3, #0
 80179ea:	d004      	beq.n	80179f6 <HAL_RCC_OscConfig+0x7e>
 80179ec:	4b81      	ldr	r3, [pc, #516]	; (8017bf4 <HAL_RCC_OscConfig+0x27c>)
 80179ee:	681b      	ldr	r3, [r3, #0]
 80179f0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80179f4:	e005      	b.n	8017a02 <HAL_RCC_OscConfig+0x8a>
 80179f6:	4b7f      	ldr	r3, [pc, #508]	; (8017bf4 <HAL_RCC_OscConfig+0x27c>)
 80179f8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80179fc:	091b      	lsrs	r3, r3, #4
 80179fe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8017a02:	4293      	cmp	r3, r2
 8017a04:	d224      	bcs.n	8017a50 <HAL_RCC_OscConfig+0xd8>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8017a06:	687b      	ldr	r3, [r7, #4]
 8017a08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017a0a:	4618      	mov	r0, r3
 8017a0c:	f000 fece 	bl	80187ac <RCC_SetFlashLatencyFromMSIRange>
 8017a10:	4603      	mov	r3, r0
 8017a12:	2b00      	cmp	r3, #0
 8017a14:	d002      	beq.n	8017a1c <HAL_RCC_OscConfig+0xa4>
          {
            return HAL_ERROR;
 8017a16:	2301      	movs	r3, #1
 8017a18:	f000 bc7a 	b.w	8018310 <HAL_RCC_OscConfig+0x998>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8017a1c:	4b75      	ldr	r3, [pc, #468]	; (8017bf4 <HAL_RCC_OscConfig+0x27c>)
 8017a1e:	681b      	ldr	r3, [r3, #0]
 8017a20:	4a74      	ldr	r2, [pc, #464]	; (8017bf4 <HAL_RCC_OscConfig+0x27c>)
 8017a22:	f043 0308 	orr.w	r3, r3, #8
 8017a26:	6013      	str	r3, [r2, #0]
 8017a28:	4b72      	ldr	r3, [pc, #456]	; (8017bf4 <HAL_RCC_OscConfig+0x27c>)
 8017a2a:	681b      	ldr	r3, [r3, #0]
 8017a2c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8017a30:	687b      	ldr	r3, [r7, #4]
 8017a32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017a34:	496f      	ldr	r1, [pc, #444]	; (8017bf4 <HAL_RCC_OscConfig+0x27c>)
 8017a36:	4313      	orrs	r3, r2
 8017a38:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8017a3a:	4b6e      	ldr	r3, [pc, #440]	; (8017bf4 <HAL_RCC_OscConfig+0x27c>)
 8017a3c:	685b      	ldr	r3, [r3, #4]
 8017a3e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8017a42:	687b      	ldr	r3, [r7, #4]
 8017a44:	6a1b      	ldr	r3, [r3, #32]
 8017a46:	021b      	lsls	r3, r3, #8
 8017a48:	496a      	ldr	r1, [pc, #424]	; (8017bf4 <HAL_RCC_OscConfig+0x27c>)
 8017a4a:	4313      	orrs	r3, r2
 8017a4c:	604b      	str	r3, [r1, #4]
 8017a4e:	e026      	b.n	8017a9e <HAL_RCC_OscConfig+0x126>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8017a50:	4b68      	ldr	r3, [pc, #416]	; (8017bf4 <HAL_RCC_OscConfig+0x27c>)
 8017a52:	681b      	ldr	r3, [r3, #0]
 8017a54:	4a67      	ldr	r2, [pc, #412]	; (8017bf4 <HAL_RCC_OscConfig+0x27c>)
 8017a56:	f043 0308 	orr.w	r3, r3, #8
 8017a5a:	6013      	str	r3, [r2, #0]
 8017a5c:	4b65      	ldr	r3, [pc, #404]	; (8017bf4 <HAL_RCC_OscConfig+0x27c>)
 8017a5e:	681b      	ldr	r3, [r3, #0]
 8017a60:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8017a64:	687b      	ldr	r3, [r7, #4]
 8017a66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017a68:	4962      	ldr	r1, [pc, #392]	; (8017bf4 <HAL_RCC_OscConfig+0x27c>)
 8017a6a:	4313      	orrs	r3, r2
 8017a6c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8017a6e:	4b61      	ldr	r3, [pc, #388]	; (8017bf4 <HAL_RCC_OscConfig+0x27c>)
 8017a70:	685b      	ldr	r3, [r3, #4]
 8017a72:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8017a76:	687b      	ldr	r3, [r7, #4]
 8017a78:	6a1b      	ldr	r3, [r3, #32]
 8017a7a:	021b      	lsls	r3, r3, #8
 8017a7c:	495d      	ldr	r1, [pc, #372]	; (8017bf4 <HAL_RCC_OscConfig+0x27c>)
 8017a7e:	4313      	orrs	r3, r2
 8017a80:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8017a82:	69bb      	ldr	r3, [r7, #24]
 8017a84:	2b00      	cmp	r3, #0
 8017a86:	d10a      	bne.n	8017a9e <HAL_RCC_OscConfig+0x126>
          {
            if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8017a88:	687b      	ldr	r3, [r7, #4]
 8017a8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017a8c:	4618      	mov	r0, r3
 8017a8e:	f000 fe8d 	bl	80187ac <RCC_SetFlashLatencyFromMSIRange>
 8017a92:	4603      	mov	r3, r0
 8017a94:	2b00      	cmp	r3, #0
 8017a96:	d002      	beq.n	8017a9e <HAL_RCC_OscConfig+0x126>
            {
              return HAL_ERROR;
 8017a98:	2301      	movs	r3, #1
 8017a9a:	f000 bc39 	b.w	8018310 <HAL_RCC_OscConfig+0x998>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8017a9e:	f000 fe17 	bl	80186d0 <HAL_RCC_GetHCLKFreq>
 8017aa2:	4603      	mov	r3, r0
 8017aa4:	4a54      	ldr	r2, [pc, #336]	; (8017bf8 <HAL_RCC_OscConfig+0x280>)
 8017aa6:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8017aa8:	4b54      	ldr	r3, [pc, #336]	; (8017bfc <HAL_RCC_OscConfig+0x284>)
 8017aaa:	681b      	ldr	r3, [r3, #0]
 8017aac:	4618      	mov	r0, r3
 8017aae:	f7fc faa7 	bl	8014000 <HAL_InitTick>
 8017ab2:	4603      	mov	r3, r0
 8017ab4:	73fb      	strb	r3, [r7, #15]
        if (status != HAL_OK)
 8017ab6:	7bfb      	ldrb	r3, [r7, #15]
 8017ab8:	2b00      	cmp	r3, #0
 8017aba:	d060      	beq.n	8017b7e <HAL_RCC_OscConfig+0x206>
        {
          return status;
 8017abc:	7bfb      	ldrb	r3, [r7, #15]
 8017abe:	f000 bc27 	b.w	8018310 <HAL_RCC_OscConfig+0x998>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8017ac2:	687b      	ldr	r3, [r7, #4]
 8017ac4:	69db      	ldr	r3, [r3, #28]
 8017ac6:	2b00      	cmp	r3, #0
 8017ac8:	d039      	beq.n	8017b3e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8017aca:	4b4a      	ldr	r3, [pc, #296]	; (8017bf4 <HAL_RCC_OscConfig+0x27c>)
 8017acc:	681b      	ldr	r3, [r3, #0]
 8017ace:	4a49      	ldr	r2, [pc, #292]	; (8017bf4 <HAL_RCC_OscConfig+0x27c>)
 8017ad0:	f043 0301 	orr.w	r3, r3, #1
 8017ad4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8017ad6:	f7fc fd3b 	bl	8014550 <HAL_GetTick>
 8017ada:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8017adc:	e00f      	b.n	8017afe <HAL_RCC_OscConfig+0x186>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8017ade:	f7fc fd37 	bl	8014550 <HAL_GetTick>
 8017ae2:	4602      	mov	r2, r0
 8017ae4:	693b      	ldr	r3, [r7, #16]
 8017ae6:	1ad3      	subs	r3, r2, r3
 8017ae8:	2b02      	cmp	r3, #2
 8017aea:	d908      	bls.n	8017afe <HAL_RCC_OscConfig+0x186>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8017aec:	4b41      	ldr	r3, [pc, #260]	; (8017bf4 <HAL_RCC_OscConfig+0x27c>)
 8017aee:	681b      	ldr	r3, [r3, #0]
 8017af0:	f003 0302 	and.w	r3, r3, #2
 8017af4:	2b00      	cmp	r3, #0
 8017af6:	d102      	bne.n	8017afe <HAL_RCC_OscConfig+0x186>
            {
              return HAL_TIMEOUT;
 8017af8:	2303      	movs	r3, #3
 8017afa:	f000 bc09 	b.w	8018310 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8017afe:	4b3d      	ldr	r3, [pc, #244]	; (8017bf4 <HAL_RCC_OscConfig+0x27c>)
 8017b00:	681b      	ldr	r3, [r3, #0]
 8017b02:	f003 0302 	and.w	r3, r3, #2
 8017b06:	2b00      	cmp	r3, #0
 8017b08:	d0e9      	beq.n	8017ade <HAL_RCC_OscConfig+0x166>
            }
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8017b0a:	4b3a      	ldr	r3, [pc, #232]	; (8017bf4 <HAL_RCC_OscConfig+0x27c>)
 8017b0c:	681b      	ldr	r3, [r3, #0]
 8017b0e:	4a39      	ldr	r2, [pc, #228]	; (8017bf4 <HAL_RCC_OscConfig+0x27c>)
 8017b10:	f043 0308 	orr.w	r3, r3, #8
 8017b14:	6013      	str	r3, [r2, #0]
 8017b16:	4b37      	ldr	r3, [pc, #220]	; (8017bf4 <HAL_RCC_OscConfig+0x27c>)
 8017b18:	681b      	ldr	r3, [r3, #0]
 8017b1a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8017b1e:	687b      	ldr	r3, [r7, #4]
 8017b20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017b22:	4934      	ldr	r1, [pc, #208]	; (8017bf4 <HAL_RCC_OscConfig+0x27c>)
 8017b24:	4313      	orrs	r3, r2
 8017b26:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8017b28:	4b32      	ldr	r3, [pc, #200]	; (8017bf4 <HAL_RCC_OscConfig+0x27c>)
 8017b2a:	685b      	ldr	r3, [r3, #4]
 8017b2c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8017b30:	687b      	ldr	r3, [r7, #4]
 8017b32:	6a1b      	ldr	r3, [r3, #32]
 8017b34:	021b      	lsls	r3, r3, #8
 8017b36:	492f      	ldr	r1, [pc, #188]	; (8017bf4 <HAL_RCC_OscConfig+0x27c>)
 8017b38:	4313      	orrs	r3, r2
 8017b3a:	604b      	str	r3, [r1, #4]
 8017b3c:	e020      	b.n	8017b80 <HAL_RCC_OscConfig+0x208>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8017b3e:	4b2d      	ldr	r3, [pc, #180]	; (8017bf4 <HAL_RCC_OscConfig+0x27c>)
 8017b40:	681b      	ldr	r3, [r3, #0]
 8017b42:	4a2c      	ldr	r2, [pc, #176]	; (8017bf4 <HAL_RCC_OscConfig+0x27c>)
 8017b44:	f023 0301 	bic.w	r3, r3, #1
 8017b48:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8017b4a:	f7fc fd01 	bl	8014550 <HAL_GetTick>
 8017b4e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8017b50:	e00e      	b.n	8017b70 <HAL_RCC_OscConfig+0x1f8>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8017b52:	f7fc fcfd 	bl	8014550 <HAL_GetTick>
 8017b56:	4602      	mov	r2, r0
 8017b58:	693b      	ldr	r3, [r7, #16]
 8017b5a:	1ad3      	subs	r3, r2, r3
 8017b5c:	2b02      	cmp	r3, #2
 8017b5e:	d907      	bls.n	8017b70 <HAL_RCC_OscConfig+0x1f8>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8017b60:	4b24      	ldr	r3, [pc, #144]	; (8017bf4 <HAL_RCC_OscConfig+0x27c>)
 8017b62:	681b      	ldr	r3, [r3, #0]
 8017b64:	f003 0302 	and.w	r3, r3, #2
 8017b68:	2b00      	cmp	r3, #0
 8017b6a:	d001      	beq.n	8017b70 <HAL_RCC_OscConfig+0x1f8>
            {
              return HAL_TIMEOUT;
 8017b6c:	2303      	movs	r3, #3
 8017b6e:	e3cf      	b.n	8018310 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8017b70:	4b20      	ldr	r3, [pc, #128]	; (8017bf4 <HAL_RCC_OscConfig+0x27c>)
 8017b72:	681b      	ldr	r3, [r3, #0]
 8017b74:	f003 0302 	and.w	r3, r3, #2
 8017b78:	2b00      	cmp	r3, #0
 8017b7a:	d1ea      	bne.n	8017b52 <HAL_RCC_OscConfig+0x1da>
 8017b7c:	e000      	b.n	8017b80 <HAL_RCC_OscConfig+0x208>
      if ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8017b7e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8017b80:	687b      	ldr	r3, [r7, #4]
 8017b82:	681b      	ldr	r3, [r3, #0]
 8017b84:	f003 0301 	and.w	r3, r3, #1
 8017b88:	2b00      	cmp	r3, #0
 8017b8a:	d07e      	beq.n	8017c8a <HAL_RCC_OscConfig+0x312>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8017b8c:	69bb      	ldr	r3, [r7, #24]
 8017b8e:	2b08      	cmp	r3, #8
 8017b90:	d005      	beq.n	8017b9e <HAL_RCC_OscConfig+0x226>
 8017b92:	69bb      	ldr	r3, [r7, #24]
 8017b94:	2b0c      	cmp	r3, #12
 8017b96:	d10e      	bne.n	8017bb6 <HAL_RCC_OscConfig+0x23e>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8017b98:	697b      	ldr	r3, [r7, #20]
 8017b9a:	2b03      	cmp	r3, #3
 8017b9c:	d10b      	bne.n	8017bb6 <HAL_RCC_OscConfig+0x23e>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8017b9e:	4b15      	ldr	r3, [pc, #84]	; (8017bf4 <HAL_RCC_OscConfig+0x27c>)
 8017ba0:	681b      	ldr	r3, [r3, #0]
 8017ba2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8017ba6:	2b00      	cmp	r3, #0
 8017ba8:	d06e      	beq.n	8017c88 <HAL_RCC_OscConfig+0x310>
 8017baa:	687b      	ldr	r3, [r7, #4]
 8017bac:	685b      	ldr	r3, [r3, #4]
 8017bae:	2b00      	cmp	r3, #0
 8017bb0:	d16a      	bne.n	8017c88 <HAL_RCC_OscConfig+0x310>
      {
        return HAL_ERROR;
 8017bb2:	2301      	movs	r3, #1
 8017bb4:	e3ac      	b.n	8018310 <HAL_RCC_OscConfig+0x998>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8017bb6:	687b      	ldr	r3, [r7, #4]
 8017bb8:	685b      	ldr	r3, [r3, #4]
 8017bba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8017bbe:	d106      	bne.n	8017bce <HAL_RCC_OscConfig+0x256>
 8017bc0:	4b0c      	ldr	r3, [pc, #48]	; (8017bf4 <HAL_RCC_OscConfig+0x27c>)
 8017bc2:	681b      	ldr	r3, [r3, #0]
 8017bc4:	4a0b      	ldr	r2, [pc, #44]	; (8017bf4 <HAL_RCC_OscConfig+0x27c>)
 8017bc6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8017bca:	6013      	str	r3, [r2, #0]
 8017bcc:	e024      	b.n	8017c18 <HAL_RCC_OscConfig+0x2a0>
 8017bce:	687b      	ldr	r3, [r7, #4]
 8017bd0:	685b      	ldr	r3, [r3, #4]
 8017bd2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8017bd6:	d113      	bne.n	8017c00 <HAL_RCC_OscConfig+0x288>
 8017bd8:	4b06      	ldr	r3, [pc, #24]	; (8017bf4 <HAL_RCC_OscConfig+0x27c>)
 8017bda:	681b      	ldr	r3, [r3, #0]
 8017bdc:	4a05      	ldr	r2, [pc, #20]	; (8017bf4 <HAL_RCC_OscConfig+0x27c>)
 8017bde:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8017be2:	6013      	str	r3, [r2, #0]
 8017be4:	4b03      	ldr	r3, [pc, #12]	; (8017bf4 <HAL_RCC_OscConfig+0x27c>)
 8017be6:	681b      	ldr	r3, [r3, #0]
 8017be8:	4a02      	ldr	r2, [pc, #8]	; (8017bf4 <HAL_RCC_OscConfig+0x27c>)
 8017bea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8017bee:	6013      	str	r3, [r2, #0]
 8017bf0:	e012      	b.n	8017c18 <HAL_RCC_OscConfig+0x2a0>
 8017bf2:	bf00      	nop
 8017bf4:	40021000 	.word	0x40021000
 8017bf8:	20000090 	.word	0x20000090
 8017bfc:	20000094 	.word	0x20000094
 8017c00:	4b8b      	ldr	r3, [pc, #556]	; (8017e30 <HAL_RCC_OscConfig+0x4b8>)
 8017c02:	681b      	ldr	r3, [r3, #0]
 8017c04:	4a8a      	ldr	r2, [pc, #552]	; (8017e30 <HAL_RCC_OscConfig+0x4b8>)
 8017c06:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8017c0a:	6013      	str	r3, [r2, #0]
 8017c0c:	4b88      	ldr	r3, [pc, #544]	; (8017e30 <HAL_RCC_OscConfig+0x4b8>)
 8017c0e:	681b      	ldr	r3, [r3, #0]
 8017c10:	4a87      	ldr	r2, [pc, #540]	; (8017e30 <HAL_RCC_OscConfig+0x4b8>)
 8017c12:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8017c16:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8017c18:	687b      	ldr	r3, [r7, #4]
 8017c1a:	685b      	ldr	r3, [r3, #4]
 8017c1c:	2b00      	cmp	r3, #0
 8017c1e:	d019      	beq.n	8017c54 <HAL_RCC_OscConfig+0x2dc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8017c20:	f7fc fc96 	bl	8014550 <HAL_GetTick>
 8017c24:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8017c26:	e00e      	b.n	8017c46 <HAL_RCC_OscConfig+0x2ce>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8017c28:	f7fc fc92 	bl	8014550 <HAL_GetTick>
 8017c2c:	4602      	mov	r2, r0
 8017c2e:	693b      	ldr	r3, [r7, #16]
 8017c30:	1ad3      	subs	r3, r2, r3
 8017c32:	2b64      	cmp	r3, #100	; 0x64
 8017c34:	d907      	bls.n	8017c46 <HAL_RCC_OscConfig+0x2ce>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8017c36:	4b7e      	ldr	r3, [pc, #504]	; (8017e30 <HAL_RCC_OscConfig+0x4b8>)
 8017c38:	681b      	ldr	r3, [r3, #0]
 8017c3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8017c3e:	2b00      	cmp	r3, #0
 8017c40:	d101      	bne.n	8017c46 <HAL_RCC_OscConfig+0x2ce>
            {
              return HAL_TIMEOUT;
 8017c42:	2303      	movs	r3, #3
 8017c44:	e364      	b.n	8018310 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8017c46:	4b7a      	ldr	r3, [pc, #488]	; (8017e30 <HAL_RCC_OscConfig+0x4b8>)
 8017c48:	681b      	ldr	r3, [r3, #0]
 8017c4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8017c4e:	2b00      	cmp	r3, #0
 8017c50:	d0ea      	beq.n	8017c28 <HAL_RCC_OscConfig+0x2b0>
 8017c52:	e01a      	b.n	8017c8a <HAL_RCC_OscConfig+0x312>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8017c54:	f7fc fc7c 	bl	8014550 <HAL_GetTick>
 8017c58:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8017c5a:	e00e      	b.n	8017c7a <HAL_RCC_OscConfig+0x302>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8017c5c:	f7fc fc78 	bl	8014550 <HAL_GetTick>
 8017c60:	4602      	mov	r2, r0
 8017c62:	693b      	ldr	r3, [r7, #16]
 8017c64:	1ad3      	subs	r3, r2, r3
 8017c66:	2b64      	cmp	r3, #100	; 0x64
 8017c68:	d907      	bls.n	8017c7a <HAL_RCC_OscConfig+0x302>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8017c6a:	4b71      	ldr	r3, [pc, #452]	; (8017e30 <HAL_RCC_OscConfig+0x4b8>)
 8017c6c:	681b      	ldr	r3, [r3, #0]
 8017c6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8017c72:	2b00      	cmp	r3, #0
 8017c74:	d001      	beq.n	8017c7a <HAL_RCC_OscConfig+0x302>
            {
              return HAL_TIMEOUT;
 8017c76:	2303      	movs	r3, #3
 8017c78:	e34a      	b.n	8018310 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8017c7a:	4b6d      	ldr	r3, [pc, #436]	; (8017e30 <HAL_RCC_OscConfig+0x4b8>)
 8017c7c:	681b      	ldr	r3, [r3, #0]
 8017c7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8017c82:	2b00      	cmp	r3, #0
 8017c84:	d1ea      	bne.n	8017c5c <HAL_RCC_OscConfig+0x2e4>
 8017c86:	e000      	b.n	8017c8a <HAL_RCC_OscConfig+0x312>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8017c88:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8017c8a:	687b      	ldr	r3, [r7, #4]
 8017c8c:	681b      	ldr	r3, [r3, #0]
 8017c8e:	f003 0302 	and.w	r3, r3, #2
 8017c92:	2b00      	cmp	r3, #0
 8017c94:	d06c      	beq.n	8017d70 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8017c96:	69bb      	ldr	r3, [r7, #24]
 8017c98:	2b04      	cmp	r3, #4
 8017c9a:	d005      	beq.n	8017ca8 <HAL_RCC_OscConfig+0x330>
 8017c9c:	69bb      	ldr	r3, [r7, #24]
 8017c9e:	2b0c      	cmp	r3, #12
 8017ca0:	d119      	bne.n	8017cd6 <HAL_RCC_OscConfig+0x35e>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8017ca2:	697b      	ldr	r3, [r7, #20]
 8017ca4:	2b02      	cmp	r3, #2
 8017ca6:	d116      	bne.n	8017cd6 <HAL_RCC_OscConfig+0x35e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8017ca8:	4b61      	ldr	r3, [pc, #388]	; (8017e30 <HAL_RCC_OscConfig+0x4b8>)
 8017caa:	681b      	ldr	r3, [r3, #0]
 8017cac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8017cb0:	2b00      	cmp	r3, #0
 8017cb2:	d005      	beq.n	8017cc0 <HAL_RCC_OscConfig+0x348>
 8017cb4:	687b      	ldr	r3, [r7, #4]
 8017cb6:	68db      	ldr	r3, [r3, #12]
 8017cb8:	2b00      	cmp	r3, #0
 8017cba:	d101      	bne.n	8017cc0 <HAL_RCC_OscConfig+0x348>
      {
        return HAL_ERROR;
 8017cbc:	2301      	movs	r3, #1
 8017cbe:	e327      	b.n	8018310 <HAL_RCC_OscConfig+0x998>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8017cc0:	4b5b      	ldr	r3, [pc, #364]	; (8017e30 <HAL_RCC_OscConfig+0x4b8>)
 8017cc2:	685b      	ldr	r3, [r3, #4]
 8017cc4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8017cc8:	687b      	ldr	r3, [r7, #4]
 8017cca:	691b      	ldr	r3, [r3, #16]
 8017ccc:	061b      	lsls	r3, r3, #24
 8017cce:	4958      	ldr	r1, [pc, #352]	; (8017e30 <HAL_RCC_OscConfig+0x4b8>)
 8017cd0:	4313      	orrs	r3, r2
 8017cd2:	604b      	str	r3, [r1, #4]
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8017cd4:	e04c      	b.n	8017d70 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8017cd6:	687b      	ldr	r3, [r7, #4]
 8017cd8:	68db      	ldr	r3, [r3, #12]
 8017cda:	2b00      	cmp	r3, #0
 8017cdc:	d029      	beq.n	8017d32 <HAL_RCC_OscConfig+0x3ba>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8017cde:	4b54      	ldr	r3, [pc, #336]	; (8017e30 <HAL_RCC_OscConfig+0x4b8>)
 8017ce0:	681b      	ldr	r3, [r3, #0]
 8017ce2:	4a53      	ldr	r2, [pc, #332]	; (8017e30 <HAL_RCC_OscConfig+0x4b8>)
 8017ce4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8017ce8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8017cea:	f7fc fc31 	bl	8014550 <HAL_GetTick>
 8017cee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8017cf0:	e00e      	b.n	8017d10 <HAL_RCC_OscConfig+0x398>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8017cf2:	f7fc fc2d 	bl	8014550 <HAL_GetTick>
 8017cf6:	4602      	mov	r2, r0
 8017cf8:	693b      	ldr	r3, [r7, #16]
 8017cfa:	1ad3      	subs	r3, r2, r3
 8017cfc:	2b02      	cmp	r3, #2
 8017cfe:	d907      	bls.n	8017d10 <HAL_RCC_OscConfig+0x398>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8017d00:	4b4b      	ldr	r3, [pc, #300]	; (8017e30 <HAL_RCC_OscConfig+0x4b8>)
 8017d02:	681b      	ldr	r3, [r3, #0]
 8017d04:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8017d08:	2b00      	cmp	r3, #0
 8017d0a:	d101      	bne.n	8017d10 <HAL_RCC_OscConfig+0x398>
            {
              return HAL_TIMEOUT;
 8017d0c:	2303      	movs	r3, #3
 8017d0e:	e2ff      	b.n	8018310 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8017d10:	4b47      	ldr	r3, [pc, #284]	; (8017e30 <HAL_RCC_OscConfig+0x4b8>)
 8017d12:	681b      	ldr	r3, [r3, #0]
 8017d14:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8017d18:	2b00      	cmp	r3, #0
 8017d1a:	d0ea      	beq.n	8017cf2 <HAL_RCC_OscConfig+0x37a>
            }
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8017d1c:	4b44      	ldr	r3, [pc, #272]	; (8017e30 <HAL_RCC_OscConfig+0x4b8>)
 8017d1e:	685b      	ldr	r3, [r3, #4]
 8017d20:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8017d24:	687b      	ldr	r3, [r7, #4]
 8017d26:	691b      	ldr	r3, [r3, #16]
 8017d28:	061b      	lsls	r3, r3, #24
 8017d2a:	4941      	ldr	r1, [pc, #260]	; (8017e30 <HAL_RCC_OscConfig+0x4b8>)
 8017d2c:	4313      	orrs	r3, r2
 8017d2e:	604b      	str	r3, [r1, #4]
 8017d30:	e01e      	b.n	8017d70 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8017d32:	4b3f      	ldr	r3, [pc, #252]	; (8017e30 <HAL_RCC_OscConfig+0x4b8>)
 8017d34:	681b      	ldr	r3, [r3, #0]
 8017d36:	4a3e      	ldr	r2, [pc, #248]	; (8017e30 <HAL_RCC_OscConfig+0x4b8>)
 8017d38:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8017d3c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8017d3e:	f7fc fc07 	bl	8014550 <HAL_GetTick>
 8017d42:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8017d44:	e00e      	b.n	8017d64 <HAL_RCC_OscConfig+0x3ec>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8017d46:	f7fc fc03 	bl	8014550 <HAL_GetTick>
 8017d4a:	4602      	mov	r2, r0
 8017d4c:	693b      	ldr	r3, [r7, #16]
 8017d4e:	1ad3      	subs	r3, r2, r3
 8017d50:	2b02      	cmp	r3, #2
 8017d52:	d907      	bls.n	8017d64 <HAL_RCC_OscConfig+0x3ec>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8017d54:	4b36      	ldr	r3, [pc, #216]	; (8017e30 <HAL_RCC_OscConfig+0x4b8>)
 8017d56:	681b      	ldr	r3, [r3, #0]
 8017d58:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8017d5c:	2b00      	cmp	r3, #0
 8017d5e:	d001      	beq.n	8017d64 <HAL_RCC_OscConfig+0x3ec>
            {
              return HAL_TIMEOUT;
 8017d60:	2303      	movs	r3, #3
 8017d62:	e2d5      	b.n	8018310 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8017d64:	4b32      	ldr	r3, [pc, #200]	; (8017e30 <HAL_RCC_OscConfig+0x4b8>)
 8017d66:	681b      	ldr	r3, [r3, #0]
 8017d68:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8017d6c:	2b00      	cmp	r3, #0
 8017d6e:	d1ea      	bne.n	8017d46 <HAL_RCC_OscConfig+0x3ce>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8017d70:	687b      	ldr	r3, [r7, #4]
 8017d72:	681b      	ldr	r3, [r3, #0]
 8017d74:	f003 0308 	and.w	r3, r3, #8
 8017d78:	2b00      	cmp	r3, #0
 8017d7a:	d062      	beq.n	8017e42 <HAL_RCC_OscConfig+0x4ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8017d7c:	687b      	ldr	r3, [r7, #4]
 8017d7e:	695b      	ldr	r3, [r3, #20]
 8017d80:	2b00      	cmp	r3, #0
 8017d82:	d038      	beq.n	8017df6 <HAL_RCC_OscConfig+0x47e>
    {
      /* Apply prescaler value */
      if (RCC_OscInitStruct->LSIDiv == RCC_LSI_DIV1)
 8017d84:	687b      	ldr	r3, [r7, #4]
 8017d86:	699b      	ldr	r3, [r3, #24]
 8017d88:	2b00      	cmp	r3, #0
 8017d8a:	d108      	bne.n	8017d9e <HAL_RCC_OscConfig+0x426>
      {
        CLEAR_BIT(RCC->CSR, RCC_CSR_LSIPRE);
 8017d8c:	4b28      	ldr	r3, [pc, #160]	; (8017e30 <HAL_RCC_OscConfig+0x4b8>)
 8017d8e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8017d92:	4a27      	ldr	r2, [pc, #156]	; (8017e30 <HAL_RCC_OscConfig+0x4b8>)
 8017d94:	f023 0310 	bic.w	r3, r3, #16
 8017d98:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8017d9c:	e007      	b.n	8017dae <HAL_RCC_OscConfig+0x436>
      }
      else
      {
        SET_BIT(RCC->CSR, RCC_CSR_LSIPRE);
 8017d9e:	4b24      	ldr	r3, [pc, #144]	; (8017e30 <HAL_RCC_OscConfig+0x4b8>)
 8017da0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8017da4:	4a22      	ldr	r2, [pc, #136]	; (8017e30 <HAL_RCC_OscConfig+0x4b8>)
 8017da6:	f043 0310 	orr.w	r3, r3, #16
 8017daa:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8017dae:	4b20      	ldr	r3, [pc, #128]	; (8017e30 <HAL_RCC_OscConfig+0x4b8>)
 8017db0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8017db4:	4a1e      	ldr	r2, [pc, #120]	; (8017e30 <HAL_RCC_OscConfig+0x4b8>)
 8017db6:	f043 0301 	orr.w	r3, r3, #1
 8017dba:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8017dbe:	f7fc fbc7 	bl	8014550 <HAL_GetTick>
 8017dc2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8017dc4:	e00f      	b.n	8017de6 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8017dc6:	f7fc fbc3 	bl	8014550 <HAL_GetTick>
 8017dca:	4602      	mov	r2, r0
 8017dcc:	693b      	ldr	r3, [r7, #16]
 8017dce:	1ad3      	subs	r3, r2, r3
 8017dd0:	2b07      	cmp	r3, #7
 8017dd2:	d908      	bls.n	8017de6 <HAL_RCC_OscConfig+0x46e>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8017dd4:	4b16      	ldr	r3, [pc, #88]	; (8017e30 <HAL_RCC_OscConfig+0x4b8>)
 8017dd6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8017dda:	f003 0302 	and.w	r3, r3, #2
 8017dde:	2b00      	cmp	r3, #0
 8017de0:	d101      	bne.n	8017de6 <HAL_RCC_OscConfig+0x46e>
          {
            return HAL_TIMEOUT;
 8017de2:	2303      	movs	r3, #3
 8017de4:	e294      	b.n	8018310 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8017de6:	4b12      	ldr	r3, [pc, #72]	; (8017e30 <HAL_RCC_OscConfig+0x4b8>)
 8017de8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8017dec:	f003 0302 	and.w	r3, r3, #2
 8017df0:	2b00      	cmp	r3, #0
 8017df2:	d0e8      	beq.n	8017dc6 <HAL_RCC_OscConfig+0x44e>
 8017df4:	e025      	b.n	8017e42 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8017df6:	4b0e      	ldr	r3, [pc, #56]	; (8017e30 <HAL_RCC_OscConfig+0x4b8>)
 8017df8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8017dfc:	4a0c      	ldr	r2, [pc, #48]	; (8017e30 <HAL_RCC_OscConfig+0x4b8>)
 8017dfe:	f023 0301 	bic.w	r3, r3, #1
 8017e02:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8017e06:	f7fc fba3 	bl	8014550 <HAL_GetTick>
 8017e0a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8017e0c:	e012      	b.n	8017e34 <HAL_RCC_OscConfig+0x4bc>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8017e0e:	f7fc fb9f 	bl	8014550 <HAL_GetTick>
 8017e12:	4602      	mov	r2, r0
 8017e14:	693b      	ldr	r3, [r7, #16]
 8017e16:	1ad3      	subs	r3, r2, r3
 8017e18:	2b07      	cmp	r3, #7
 8017e1a:	d90b      	bls.n	8017e34 <HAL_RCC_OscConfig+0x4bc>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8017e1c:	4b04      	ldr	r3, [pc, #16]	; (8017e30 <HAL_RCC_OscConfig+0x4b8>)
 8017e1e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8017e22:	f003 0302 	and.w	r3, r3, #2
 8017e26:	2b00      	cmp	r3, #0
 8017e28:	d004      	beq.n	8017e34 <HAL_RCC_OscConfig+0x4bc>
          {
            return HAL_TIMEOUT;
 8017e2a:	2303      	movs	r3, #3
 8017e2c:	e270      	b.n	8018310 <HAL_RCC_OscConfig+0x998>
 8017e2e:	bf00      	nop
 8017e30:	40021000 	.word	0x40021000
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8017e34:	4ba8      	ldr	r3, [pc, #672]	; (80180d8 <HAL_RCC_OscConfig+0x760>)
 8017e36:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8017e3a:	f003 0302 	and.w	r3, r3, #2
 8017e3e:	2b00      	cmp	r3, #0
 8017e40:	d1e5      	bne.n	8017e0e <HAL_RCC_OscConfig+0x496>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8017e42:	687b      	ldr	r3, [r7, #4]
 8017e44:	681b      	ldr	r3, [r3, #0]
 8017e46:	f003 0304 	and.w	r3, r3, #4
 8017e4a:	2b00      	cmp	r3, #0
 8017e4c:	f000 812d 	beq.w	80180aa <HAL_RCC_OscConfig+0x732>
  {
    FlagStatus       pwrclkchanged = RESET;
 8017e50:	2300      	movs	r3, #0
 8017e52:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8017e54:	4ba0      	ldr	r3, [pc, #640]	; (80180d8 <HAL_RCC_OscConfig+0x760>)
 8017e56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8017e58:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8017e5c:	2b00      	cmp	r3, #0
 8017e5e:	d10d      	bne.n	8017e7c <HAL_RCC_OscConfig+0x504>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8017e60:	4b9d      	ldr	r3, [pc, #628]	; (80180d8 <HAL_RCC_OscConfig+0x760>)
 8017e62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8017e64:	4a9c      	ldr	r2, [pc, #624]	; (80180d8 <HAL_RCC_OscConfig+0x760>)
 8017e66:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8017e6a:	6593      	str	r3, [r2, #88]	; 0x58
 8017e6c:	4b9a      	ldr	r3, [pc, #616]	; (80180d8 <HAL_RCC_OscConfig+0x760>)
 8017e6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8017e70:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8017e74:	60bb      	str	r3, [r7, #8]
 8017e76:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8017e78:	2301      	movs	r3, #1
 8017e7a:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8017e7c:	4b97      	ldr	r3, [pc, #604]	; (80180dc <HAL_RCC_OscConfig+0x764>)
 8017e7e:	681b      	ldr	r3, [r3, #0]
 8017e80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8017e84:	2b00      	cmp	r3, #0
 8017e86:	d11e      	bne.n	8017ec6 <HAL_RCC_OscConfig+0x54e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8017e88:	4b94      	ldr	r3, [pc, #592]	; (80180dc <HAL_RCC_OscConfig+0x764>)
 8017e8a:	681b      	ldr	r3, [r3, #0]
 8017e8c:	4a93      	ldr	r2, [pc, #588]	; (80180dc <HAL_RCC_OscConfig+0x764>)
 8017e8e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8017e92:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8017e94:	f7fc fb5c 	bl	8014550 <HAL_GetTick>
 8017e98:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8017e9a:	e00e      	b.n	8017eba <HAL_RCC_OscConfig+0x542>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8017e9c:	f7fc fb58 	bl	8014550 <HAL_GetTick>
 8017ea0:	4602      	mov	r2, r0
 8017ea2:	693b      	ldr	r3, [r7, #16]
 8017ea4:	1ad3      	subs	r3, r2, r3
 8017ea6:	2b02      	cmp	r3, #2
 8017ea8:	d907      	bls.n	8017eba <HAL_RCC_OscConfig+0x542>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8017eaa:	4b8c      	ldr	r3, [pc, #560]	; (80180dc <HAL_RCC_OscConfig+0x764>)
 8017eac:	681b      	ldr	r3, [r3, #0]
 8017eae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8017eb2:	2b00      	cmp	r3, #0
 8017eb4:	d101      	bne.n	8017eba <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8017eb6:	2303      	movs	r3, #3
 8017eb8:	e22a      	b.n	8018310 <HAL_RCC_OscConfig+0x998>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8017eba:	4b88      	ldr	r3, [pc, #544]	; (80180dc <HAL_RCC_OscConfig+0x764>)
 8017ebc:	681b      	ldr	r3, [r3, #0]
 8017ebe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8017ec2:	2b00      	cmp	r3, #0
 8017ec4:	d0ea      	beq.n	8017e9c <HAL_RCC_OscConfig+0x524>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8017ec6:	687b      	ldr	r3, [r7, #4]
 8017ec8:	689b      	ldr	r3, [r3, #8]
 8017eca:	f003 0301 	and.w	r3, r3, #1
 8017ece:	2b00      	cmp	r3, #0
 8017ed0:	d01f      	beq.n	8017f12 <HAL_RCC_OscConfig+0x59a>
    {
      if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8017ed2:	687b      	ldr	r3, [r7, #4]
 8017ed4:	689b      	ldr	r3, [r3, #8]
 8017ed6:	f003 0304 	and.w	r3, r3, #4
 8017eda:	2b00      	cmp	r3, #0
 8017edc:	d010      	beq.n	8017f00 <HAL_RCC_OscConfig+0x588>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8017ede:	4b7e      	ldr	r3, [pc, #504]	; (80180d8 <HAL_RCC_OscConfig+0x760>)
 8017ee0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8017ee4:	4a7c      	ldr	r2, [pc, #496]	; (80180d8 <HAL_RCC_OscConfig+0x760>)
 8017ee6:	f043 0304 	orr.w	r3, r3, #4
 8017eea:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8017eee:	4b7a      	ldr	r3, [pc, #488]	; (80180d8 <HAL_RCC_OscConfig+0x760>)
 8017ef0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8017ef4:	4a78      	ldr	r2, [pc, #480]	; (80180d8 <HAL_RCC_OscConfig+0x760>)
 8017ef6:	f043 0301 	orr.w	r3, r3, #1
 8017efa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8017efe:	e018      	b.n	8017f32 <HAL_RCC_OscConfig+0x5ba>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8017f00:	4b75      	ldr	r3, [pc, #468]	; (80180d8 <HAL_RCC_OscConfig+0x760>)
 8017f02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8017f06:	4a74      	ldr	r2, [pc, #464]	; (80180d8 <HAL_RCC_OscConfig+0x760>)
 8017f08:	f043 0301 	orr.w	r3, r3, #1
 8017f0c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8017f10:	e00f      	b.n	8017f32 <HAL_RCC_OscConfig+0x5ba>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8017f12:	4b71      	ldr	r3, [pc, #452]	; (80180d8 <HAL_RCC_OscConfig+0x760>)
 8017f14:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8017f18:	4a6f      	ldr	r2, [pc, #444]	; (80180d8 <HAL_RCC_OscConfig+0x760>)
 8017f1a:	f023 0301 	bic.w	r3, r3, #1
 8017f1e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8017f22:	4b6d      	ldr	r3, [pc, #436]	; (80180d8 <HAL_RCC_OscConfig+0x760>)
 8017f24:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8017f28:	4a6b      	ldr	r2, [pc, #428]	; (80180d8 <HAL_RCC_OscConfig+0x760>)
 8017f2a:	f023 0304 	bic.w	r3, r3, #4
 8017f2e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    }

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8017f32:	687b      	ldr	r3, [r7, #4]
 8017f34:	689b      	ldr	r3, [r3, #8]
 8017f36:	2b00      	cmp	r3, #0
 8017f38:	d068      	beq.n	801800c <HAL_RCC_OscConfig+0x694>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8017f3a:	f7fc fb09 	bl	8014550 <HAL_GetTick>
 8017f3e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8017f40:	e011      	b.n	8017f66 <HAL_RCC_OscConfig+0x5ee>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8017f42:	f7fc fb05 	bl	8014550 <HAL_GetTick>
 8017f46:	4602      	mov	r2, r0
 8017f48:	693b      	ldr	r3, [r7, #16]
 8017f4a:	1ad3      	subs	r3, r2, r3
 8017f4c:	f241 3288 	movw	r2, #5000	; 0x1388
 8017f50:	4293      	cmp	r3, r2
 8017f52:	d908      	bls.n	8017f66 <HAL_RCC_OscConfig+0x5ee>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8017f54:	4b60      	ldr	r3, [pc, #384]	; (80180d8 <HAL_RCC_OscConfig+0x760>)
 8017f56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8017f5a:	f003 0302 	and.w	r3, r3, #2
 8017f5e:	2b00      	cmp	r3, #0
 8017f60:	d101      	bne.n	8017f66 <HAL_RCC_OscConfig+0x5ee>
          {
            return HAL_TIMEOUT;
 8017f62:	2303      	movs	r3, #3
 8017f64:	e1d4      	b.n	8018310 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8017f66:	4b5c      	ldr	r3, [pc, #368]	; (80180d8 <HAL_RCC_OscConfig+0x760>)
 8017f68:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8017f6c:	f003 0302 	and.w	r3, r3, #2
 8017f70:	2b00      	cmp	r3, #0
 8017f72:	d0e6      	beq.n	8017f42 <HAL_RCC_OscConfig+0x5ca>
          }
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 8017f74:	687b      	ldr	r3, [r7, #4]
 8017f76:	689b      	ldr	r3, [r3, #8]
 8017f78:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8017f7c:	2b00      	cmp	r3, #0
 8017f7e:	d022      	beq.n	8017fc6 <HAL_RCC_OscConfig+0x64e>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8017f80:	4b55      	ldr	r3, [pc, #340]	; (80180d8 <HAL_RCC_OscConfig+0x760>)
 8017f82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8017f86:	4a54      	ldr	r2, [pc, #336]	; (80180d8 <HAL_RCC_OscConfig+0x760>)
 8017f88:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8017f8c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8017f90:	e011      	b.n	8017fb6 <HAL_RCC_OscConfig+0x63e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8017f92:	f7fc fadd 	bl	8014550 <HAL_GetTick>
 8017f96:	4602      	mov	r2, r0
 8017f98:	693b      	ldr	r3, [r7, #16]
 8017f9a:	1ad3      	subs	r3, r2, r3
 8017f9c:	f241 3288 	movw	r2, #5000	; 0x1388
 8017fa0:	4293      	cmp	r3, r2
 8017fa2:	d908      	bls.n	8017fb6 <HAL_RCC_OscConfig+0x63e>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8017fa4:	4b4c      	ldr	r3, [pc, #304]	; (80180d8 <HAL_RCC_OscConfig+0x760>)
 8017fa6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8017faa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8017fae:	2b00      	cmp	r3, #0
 8017fb0:	d101      	bne.n	8017fb6 <HAL_RCC_OscConfig+0x63e>
            {
              return HAL_TIMEOUT;
 8017fb2:	2303      	movs	r3, #3
 8017fb4:	e1ac      	b.n	8018310 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8017fb6:	4b48      	ldr	r3, [pc, #288]	; (80180d8 <HAL_RCC_OscConfig+0x760>)
 8017fb8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8017fbc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8017fc0:	2b00      	cmp	r3, #0
 8017fc2:	d0e6      	beq.n	8017f92 <HAL_RCC_OscConfig+0x61a>
 8017fc4:	e068      	b.n	8018098 <HAL_RCC_OscConfig+0x720>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8017fc6:	4b44      	ldr	r3, [pc, #272]	; (80180d8 <HAL_RCC_OscConfig+0x760>)
 8017fc8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8017fcc:	4a42      	ldr	r2, [pc, #264]	; (80180d8 <HAL_RCC_OscConfig+0x760>)
 8017fce:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8017fd2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8017fd6:	e011      	b.n	8017ffc <HAL_RCC_OscConfig+0x684>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8017fd8:	f7fc faba 	bl	8014550 <HAL_GetTick>
 8017fdc:	4602      	mov	r2, r0
 8017fde:	693b      	ldr	r3, [r7, #16]
 8017fe0:	1ad3      	subs	r3, r2, r3
 8017fe2:	f241 3288 	movw	r2, #5000	; 0x1388
 8017fe6:	4293      	cmp	r3, r2
 8017fe8:	d908      	bls.n	8017ffc <HAL_RCC_OscConfig+0x684>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8017fea:	4b3b      	ldr	r3, [pc, #236]	; (80180d8 <HAL_RCC_OscConfig+0x760>)
 8017fec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8017ff0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8017ff4:	2b00      	cmp	r3, #0
 8017ff6:	d001      	beq.n	8017ffc <HAL_RCC_OscConfig+0x684>
            {
              return HAL_TIMEOUT;
 8017ff8:	2303      	movs	r3, #3
 8017ffa:	e189      	b.n	8018310 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8017ffc:	4b36      	ldr	r3, [pc, #216]	; (80180d8 <HAL_RCC_OscConfig+0x760>)
 8017ffe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8018002:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8018006:	2b00      	cmp	r3, #0
 8018008:	d1e6      	bne.n	8017fd8 <HAL_RCC_OscConfig+0x660>
 801800a:	e045      	b.n	8018098 <HAL_RCC_OscConfig+0x720>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801800c:	f7fc faa0 	bl	8014550 <HAL_GetTick>
 8018010:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8018012:	e011      	b.n	8018038 <HAL_RCC_OscConfig+0x6c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8018014:	f7fc fa9c 	bl	8014550 <HAL_GetTick>
 8018018:	4602      	mov	r2, r0
 801801a:	693b      	ldr	r3, [r7, #16]
 801801c:	1ad3      	subs	r3, r2, r3
 801801e:	f241 3288 	movw	r2, #5000	; 0x1388
 8018022:	4293      	cmp	r3, r2
 8018024:	d908      	bls.n	8018038 <HAL_RCC_OscConfig+0x6c0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8018026:	4b2c      	ldr	r3, [pc, #176]	; (80180d8 <HAL_RCC_OscConfig+0x760>)
 8018028:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801802c:	f003 0302 	and.w	r3, r3, #2
 8018030:	2b00      	cmp	r3, #0
 8018032:	d001      	beq.n	8018038 <HAL_RCC_OscConfig+0x6c0>
          {
            return HAL_TIMEOUT;
 8018034:	2303      	movs	r3, #3
 8018036:	e16b      	b.n	8018310 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8018038:	4b27      	ldr	r3, [pc, #156]	; (80180d8 <HAL_RCC_OscConfig+0x760>)
 801803a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801803e:	f003 0302 	and.w	r3, r3, #2
 8018042:	2b00      	cmp	r3, #0
 8018044:	d1e6      	bne.n	8018014 <HAL_RCC_OscConfig+0x69c>
          }
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 8018046:	4b24      	ldr	r3, [pc, #144]	; (80180d8 <HAL_RCC_OscConfig+0x760>)
 8018048:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801804c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8018050:	2b00      	cmp	r3, #0
 8018052:	d021      	beq.n	8018098 <HAL_RCC_OscConfig+0x720>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8018054:	4b20      	ldr	r3, [pc, #128]	; (80180d8 <HAL_RCC_OscConfig+0x760>)
 8018056:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801805a:	4a1f      	ldr	r2, [pc, #124]	; (80180d8 <HAL_RCC_OscConfig+0x760>)
 801805c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8018060:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8018064:	e011      	b.n	801808a <HAL_RCC_OscConfig+0x712>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8018066:	f7fc fa73 	bl	8014550 <HAL_GetTick>
 801806a:	4602      	mov	r2, r0
 801806c:	693b      	ldr	r3, [r7, #16]
 801806e:	1ad3      	subs	r3, r2, r3
 8018070:	f241 3288 	movw	r2, #5000	; 0x1388
 8018074:	4293      	cmp	r3, r2
 8018076:	d908      	bls.n	801808a <HAL_RCC_OscConfig+0x712>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8018078:	4b17      	ldr	r3, [pc, #92]	; (80180d8 <HAL_RCC_OscConfig+0x760>)
 801807a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801807e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8018082:	2b00      	cmp	r3, #0
 8018084:	d001      	beq.n	801808a <HAL_RCC_OscConfig+0x712>
            {
              return HAL_TIMEOUT;
 8018086:	2303      	movs	r3, #3
 8018088:	e142      	b.n	8018310 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 801808a:	4b13      	ldr	r3, [pc, #76]	; (80180d8 <HAL_RCC_OscConfig+0x760>)
 801808c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8018090:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8018094:	2b00      	cmp	r3, #0
 8018096:	d1e6      	bne.n	8018066 <HAL_RCC_OscConfig+0x6ee>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8018098:	7ffb      	ldrb	r3, [r7, #31]
 801809a:	2b01      	cmp	r3, #1
 801809c:	d105      	bne.n	80180aa <HAL_RCC_OscConfig+0x732>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 801809e:	4b0e      	ldr	r3, [pc, #56]	; (80180d8 <HAL_RCC_OscConfig+0x760>)
 80180a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80180a2:	4a0d      	ldr	r2, [pc, #52]	; (80180d8 <HAL_RCC_OscConfig+0x760>)
 80180a4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80180a8:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80180aa:	687b      	ldr	r3, [r7, #4]
 80180ac:	681b      	ldr	r3, [r3, #0]
 80180ae:	f003 0320 	and.w	r3, r3, #32
 80180b2:	2b00      	cmp	r3, #0
 80180b4:	d04f      	beq.n	8018156 <HAL_RCC_OscConfig+0x7de>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80180b6:	687b      	ldr	r3, [r7, #4]
 80180b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80180ba:	2b00      	cmp	r3, #0
 80180bc:	d028      	beq.n	8018110 <HAL_RCC_OscConfig+0x798>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80180be:	4b06      	ldr	r3, [pc, #24]	; (80180d8 <HAL_RCC_OscConfig+0x760>)
 80180c0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80180c4:	4a04      	ldr	r2, [pc, #16]	; (80180d8 <HAL_RCC_OscConfig+0x760>)
 80180c6:	f043 0301 	orr.w	r3, r3, #1
 80180ca:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80180ce:	f7fc fa3f 	bl	8014550 <HAL_GetTick>
 80180d2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80180d4:	e014      	b.n	8018100 <HAL_RCC_OscConfig+0x788>
 80180d6:	bf00      	nop
 80180d8:	40021000 	.word	0x40021000
 80180dc:	40007000 	.word	0x40007000
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80180e0:	f7fc fa36 	bl	8014550 <HAL_GetTick>
 80180e4:	4602      	mov	r2, r0
 80180e6:	693b      	ldr	r3, [r7, #16]
 80180e8:	1ad3      	subs	r3, r2, r3
 80180ea:	2b02      	cmp	r3, #2
 80180ec:	d908      	bls.n	8018100 <HAL_RCC_OscConfig+0x788>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80180ee:	4b8a      	ldr	r3, [pc, #552]	; (8018318 <HAL_RCC_OscConfig+0x9a0>)
 80180f0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80180f4:	f003 0302 	and.w	r3, r3, #2
 80180f8:	2b00      	cmp	r3, #0
 80180fa:	d101      	bne.n	8018100 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 80180fc:	2303      	movs	r3, #3
 80180fe:	e107      	b.n	8018310 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8018100:	4b85      	ldr	r3, [pc, #532]	; (8018318 <HAL_RCC_OscConfig+0x9a0>)
 8018102:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8018106:	f003 0302 	and.w	r3, r3, #2
 801810a:	2b00      	cmp	r3, #0
 801810c:	d0e8      	beq.n	80180e0 <HAL_RCC_OscConfig+0x768>
 801810e:	e022      	b.n	8018156 <HAL_RCC_OscConfig+0x7de>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8018110:	4b81      	ldr	r3, [pc, #516]	; (8018318 <HAL_RCC_OscConfig+0x9a0>)
 8018112:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8018116:	4a80      	ldr	r2, [pc, #512]	; (8018318 <HAL_RCC_OscConfig+0x9a0>)
 8018118:	f023 0301 	bic.w	r3, r3, #1
 801811c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8018120:	f7fc fa16 	bl	8014550 <HAL_GetTick>
 8018124:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8018126:	e00f      	b.n	8018148 <HAL_RCC_OscConfig+0x7d0>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8018128:	f7fc fa12 	bl	8014550 <HAL_GetTick>
 801812c:	4602      	mov	r2, r0
 801812e:	693b      	ldr	r3, [r7, #16]
 8018130:	1ad3      	subs	r3, r2, r3
 8018132:	2b02      	cmp	r3, #2
 8018134:	d908      	bls.n	8018148 <HAL_RCC_OscConfig+0x7d0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8018136:	4b78      	ldr	r3, [pc, #480]	; (8018318 <HAL_RCC_OscConfig+0x9a0>)
 8018138:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 801813c:	f003 0302 	and.w	r3, r3, #2
 8018140:	2b00      	cmp	r3, #0
 8018142:	d001      	beq.n	8018148 <HAL_RCC_OscConfig+0x7d0>
          {
            return HAL_TIMEOUT;
 8018144:	2303      	movs	r3, #3
 8018146:	e0e3      	b.n	8018310 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8018148:	4b73      	ldr	r3, [pc, #460]	; (8018318 <HAL_RCC_OscConfig+0x9a0>)
 801814a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 801814e:	f003 0302 	and.w	r3, r3, #2
 8018152:	2b00      	cmp	r3, #0
 8018154:	d1e8      	bne.n	8018128 <HAL_RCC_OscConfig+0x7b0>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8018156:	687b      	ldr	r3, [r7, #4]
 8018158:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801815a:	2b00      	cmp	r3, #0
 801815c:	f000 80d7 	beq.w	801830e <HAL_RCC_OscConfig+0x996>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8018160:	4b6d      	ldr	r3, [pc, #436]	; (8018318 <HAL_RCC_OscConfig+0x9a0>)
 8018162:	689b      	ldr	r3, [r3, #8]
 8018164:	f003 030c 	and.w	r3, r3, #12
 8018168:	2b0c      	cmp	r3, #12
 801816a:	f000 8091 	beq.w	8018290 <HAL_RCC_OscConfig+0x918>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 801816e:	687b      	ldr	r3, [r7, #4]
 8018170:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018172:	2b02      	cmp	r3, #2
 8018174:	d166      	bne.n	8018244 <HAL_RCC_OscConfig+0x8cc>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8018176:	4b68      	ldr	r3, [pc, #416]	; (8018318 <HAL_RCC_OscConfig+0x9a0>)
 8018178:	681b      	ldr	r3, [r3, #0]
 801817a:	4a67      	ldr	r2, [pc, #412]	; (8018318 <HAL_RCC_OscConfig+0x9a0>)
 801817c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8018180:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8018182:	f7fc f9e5 	bl	8014550 <HAL_GetTick>
 8018186:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8018188:	e00e      	b.n	80181a8 <HAL_RCC_OscConfig+0x830>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 801818a:	f7fc f9e1 	bl	8014550 <HAL_GetTick>
 801818e:	4602      	mov	r2, r0
 8018190:	693b      	ldr	r3, [r7, #16]
 8018192:	1ad3      	subs	r3, r2, r3
 8018194:	2b02      	cmp	r3, #2
 8018196:	d907      	bls.n	80181a8 <HAL_RCC_OscConfig+0x830>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8018198:	4b5f      	ldr	r3, [pc, #380]	; (8018318 <HAL_RCC_OscConfig+0x9a0>)
 801819a:	681b      	ldr	r3, [r3, #0]
 801819c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80181a0:	2b00      	cmp	r3, #0
 80181a2:	d001      	beq.n	80181a8 <HAL_RCC_OscConfig+0x830>
            {
              return HAL_TIMEOUT;
 80181a4:	2303      	movs	r3, #3
 80181a6:	e0b3      	b.n	8018310 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80181a8:	4b5b      	ldr	r3, [pc, #364]	; (8018318 <HAL_RCC_OscConfig+0x9a0>)
 80181aa:	681b      	ldr	r3, [r3, #0]
 80181ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80181b0:	2b00      	cmp	r3, #0
 80181b2:	d1ea      	bne.n	801818a <HAL_RCC_OscConfig+0x812>
            }
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80181b4:	4b58      	ldr	r3, [pc, #352]	; (8018318 <HAL_RCC_OscConfig+0x9a0>)
 80181b6:	68da      	ldr	r2, [r3, #12]
 80181b8:	4b58      	ldr	r3, [pc, #352]	; (801831c <HAL_RCC_OscConfig+0x9a4>)
 80181ba:	4013      	ands	r3, r2
 80181bc:	687a      	ldr	r2, [r7, #4]
 80181be:	6b11      	ldr	r1, [r2, #48]	; 0x30
 80181c0:	687a      	ldr	r2, [r7, #4]
 80181c2:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80181c4:	3a01      	subs	r2, #1
 80181c6:	0112      	lsls	r2, r2, #4
 80181c8:	4311      	orrs	r1, r2
 80181ca:	687a      	ldr	r2, [r7, #4]
 80181cc:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80181ce:	0212      	lsls	r2, r2, #8
 80181d0:	4311      	orrs	r1, r2
 80181d2:	687a      	ldr	r2, [r7, #4]
 80181d4:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80181d6:	0852      	lsrs	r2, r2, #1
 80181d8:	3a01      	subs	r2, #1
 80181da:	0552      	lsls	r2, r2, #21
 80181dc:	4311      	orrs	r1, r2
 80181de:	687a      	ldr	r2, [r7, #4]
 80181e0:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80181e2:	0852      	lsrs	r2, r2, #1
 80181e4:	3a01      	subs	r2, #1
 80181e6:	0652      	lsls	r2, r2, #25
 80181e8:	4311      	orrs	r1, r2
 80181ea:	687a      	ldr	r2, [r7, #4]
 80181ec:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80181ee:	06d2      	lsls	r2, r2, #27
 80181f0:	430a      	orrs	r2, r1
 80181f2:	4949      	ldr	r1, [pc, #292]	; (8018318 <HAL_RCC_OscConfig+0x9a0>)
 80181f4:	4313      	orrs	r3, r2
 80181f6:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80181f8:	4b47      	ldr	r3, [pc, #284]	; (8018318 <HAL_RCC_OscConfig+0x9a0>)
 80181fa:	681b      	ldr	r3, [r3, #0]
 80181fc:	4a46      	ldr	r2, [pc, #280]	; (8018318 <HAL_RCC_OscConfig+0x9a0>)
 80181fe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8018202:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8018204:	4b44      	ldr	r3, [pc, #272]	; (8018318 <HAL_RCC_OscConfig+0x9a0>)
 8018206:	68db      	ldr	r3, [r3, #12]
 8018208:	4a43      	ldr	r2, [pc, #268]	; (8018318 <HAL_RCC_OscConfig+0x9a0>)
 801820a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 801820e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8018210:	f7fc f99e 	bl	8014550 <HAL_GetTick>
 8018214:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8018216:	e00e      	b.n	8018236 <HAL_RCC_OscConfig+0x8be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8018218:	f7fc f99a 	bl	8014550 <HAL_GetTick>
 801821c:	4602      	mov	r2, r0
 801821e:	693b      	ldr	r3, [r7, #16]
 8018220:	1ad3      	subs	r3, r2, r3
 8018222:	2b02      	cmp	r3, #2
 8018224:	d907      	bls.n	8018236 <HAL_RCC_OscConfig+0x8be>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8018226:	4b3c      	ldr	r3, [pc, #240]	; (8018318 <HAL_RCC_OscConfig+0x9a0>)
 8018228:	681b      	ldr	r3, [r3, #0]
 801822a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801822e:	2b00      	cmp	r3, #0
 8018230:	d101      	bne.n	8018236 <HAL_RCC_OscConfig+0x8be>
            {
              return HAL_TIMEOUT;
 8018232:	2303      	movs	r3, #3
 8018234:	e06c      	b.n	8018310 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8018236:	4b38      	ldr	r3, [pc, #224]	; (8018318 <HAL_RCC_OscConfig+0x9a0>)
 8018238:	681b      	ldr	r3, [r3, #0]
 801823a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801823e:	2b00      	cmp	r3, #0
 8018240:	d0ea      	beq.n	8018218 <HAL_RCC_OscConfig+0x8a0>
 8018242:	e064      	b.n	801830e <HAL_RCC_OscConfig+0x996>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8018244:	4b34      	ldr	r3, [pc, #208]	; (8018318 <HAL_RCC_OscConfig+0x9a0>)
 8018246:	681b      	ldr	r3, [r3, #0]
 8018248:	4a33      	ldr	r2, [pc, #204]	; (8018318 <HAL_RCC_OscConfig+0x9a0>)
 801824a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 801824e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8018250:	f7fc f97e 	bl	8014550 <HAL_GetTick>
 8018254:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8018256:	e00e      	b.n	8018276 <HAL_RCC_OscConfig+0x8fe>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8018258:	f7fc f97a 	bl	8014550 <HAL_GetTick>
 801825c:	4602      	mov	r2, r0
 801825e:	693b      	ldr	r3, [r7, #16]
 8018260:	1ad3      	subs	r3, r2, r3
 8018262:	2b02      	cmp	r3, #2
 8018264:	d907      	bls.n	8018276 <HAL_RCC_OscConfig+0x8fe>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8018266:	4b2c      	ldr	r3, [pc, #176]	; (8018318 <HAL_RCC_OscConfig+0x9a0>)
 8018268:	681b      	ldr	r3, [r3, #0]
 801826a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801826e:	2b00      	cmp	r3, #0
 8018270:	d001      	beq.n	8018276 <HAL_RCC_OscConfig+0x8fe>
            {
              return HAL_TIMEOUT;
 8018272:	2303      	movs	r3, #3
 8018274:	e04c      	b.n	8018310 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8018276:	4b28      	ldr	r3, [pc, #160]	; (8018318 <HAL_RCC_OscConfig+0x9a0>)
 8018278:	681b      	ldr	r3, [r3, #0]
 801827a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801827e:	2b00      	cmp	r3, #0
 8018280:	d1ea      	bne.n	8018258 <HAL_RCC_OscConfig+0x8e0>
            }
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8018282:	4b25      	ldr	r3, [pc, #148]	; (8018318 <HAL_RCC_OscConfig+0x9a0>)
 8018284:	68da      	ldr	r2, [r3, #12]
 8018286:	4924      	ldr	r1, [pc, #144]	; (8018318 <HAL_RCC_OscConfig+0x9a0>)
 8018288:	4b25      	ldr	r3, [pc, #148]	; (8018320 <HAL_RCC_OscConfig+0x9a8>)
 801828a:	4013      	ands	r3, r2
 801828c:	60cb      	str	r3, [r1, #12]
 801828e:	e03e      	b.n	801830e <HAL_RCC_OscConfig+0x996>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_OFF)
 8018290:	687b      	ldr	r3, [r7, #4]
 8018292:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018294:	2b01      	cmp	r3, #1
 8018296:	d101      	bne.n	801829c <HAL_RCC_OscConfig+0x924>
      {
        return HAL_ERROR;
 8018298:	2301      	movs	r3, #1
 801829a:	e039      	b.n	8018310 <HAL_RCC_OscConfig+0x998>
      }
      else
      {
        pll_config = RCC->PLLCFGR;
 801829c:	4b1e      	ldr	r3, [pc, #120]	; (8018318 <HAL_RCC_OscConfig+0x9a0>)
 801829e:	68db      	ldr	r3, [r3, #12]
 80182a0:	617b      	str	r3, [r7, #20]
        /* Do not return HAL_ERROR if request repeats the current configuration */
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80182a2:	697b      	ldr	r3, [r7, #20]
 80182a4:	f003 0203 	and.w	r2, r3, #3
 80182a8:	687b      	ldr	r3, [r7, #4]
 80182aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80182ac:	429a      	cmp	r2, r3
 80182ae:	d12c      	bne.n	801830a <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80182b0:	697b      	ldr	r3, [r7, #20]
 80182b2:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80182b6:	687b      	ldr	r3, [r7, #4]
 80182b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80182ba:	3b01      	subs	r3, #1
 80182bc:	011b      	lsls	r3, r3, #4
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80182be:	429a      	cmp	r2, r3
 80182c0:	d123      	bne.n	801830a <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80182c2:	697b      	ldr	r3, [r7, #20]
 80182c4:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80182c8:	687b      	ldr	r3, [r7, #4]
 80182ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80182cc:	021b      	lsls	r3, r3, #8
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80182ce:	429a      	cmp	r2, r3
 80182d0:	d11b      	bne.n	801830a <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80182d2:	697b      	ldr	r3, [r7, #20]
 80182d4:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80182d8:	687b      	ldr	r3, [r7, #4]
 80182da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80182dc:	06db      	lsls	r3, r3, #27
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80182de:	429a      	cmp	r2, r3
 80182e0:	d113      	bne.n	801830a <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80182e2:	697b      	ldr	r3, [r7, #20]
 80182e4:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80182e8:	687b      	ldr	r3, [r7, #4]
 80182ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80182ec:	085b      	lsrs	r3, r3, #1
 80182ee:	3b01      	subs	r3, #1
 80182f0:	055b      	lsls	r3, r3, #21
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80182f2:	429a      	cmp	r2, r3
 80182f4:	d109      	bne.n	801830a <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80182f6:	697b      	ldr	r3, [r7, #20]
 80182f8:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80182fc:	687b      	ldr	r3, [r7, #4]
 80182fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8018300:	085b      	lsrs	r3, r3, #1
 8018302:	3b01      	subs	r3, #1
 8018304:	065b      	lsls	r3, r3, #25
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8018306:	429a      	cmp	r2, r3
 8018308:	d001      	beq.n	801830e <HAL_RCC_OscConfig+0x996>
        {
          return HAL_ERROR;
 801830a:	2301      	movs	r3, #1
 801830c:	e000      	b.n	8018310 <HAL_RCC_OscConfig+0x998>
        }
      }
    }
  }

  return HAL_OK;
 801830e:	2300      	movs	r3, #0
}
 8018310:	4618      	mov	r0, r3
 8018312:	3720      	adds	r7, #32
 8018314:	46bd      	mov	sp, r7
 8018316:	bd80      	pop	{r7, pc}
 8018318:	40021000 	.word	0x40021000
 801831c:	019f800c 	.word	0x019f800c
 8018320:	feeefffc 	.word	0xfeeefffc

08018324 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8018324:	b580      	push	{r7, lr}
 8018326:	b086      	sub	sp, #24
 8018328:	af00      	add	r7, sp, #0
 801832a:	6078      	str	r0, [r7, #4]
 801832c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 801832e:	2300      	movs	r3, #0
 8018330:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8018332:	687b      	ldr	r3, [r7, #4]
 8018334:	2b00      	cmp	r3, #0
 8018336:	d101      	bne.n	801833c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8018338:	2301      	movs	r3, #1
 801833a:	e11c      	b.n	8018576 <HAL_RCC_ClockConfig+0x252>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 801833c:	4b90      	ldr	r3, [pc, #576]	; (8018580 <HAL_RCC_ClockConfig+0x25c>)
 801833e:	681b      	ldr	r3, [r3, #0]
 8018340:	f003 030f 	and.w	r3, r3, #15
 8018344:	683a      	ldr	r2, [r7, #0]
 8018346:	429a      	cmp	r2, r3
 8018348:	d910      	bls.n	801836c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 801834a:	4b8d      	ldr	r3, [pc, #564]	; (8018580 <HAL_RCC_ClockConfig+0x25c>)
 801834c:	681b      	ldr	r3, [r3, #0]
 801834e:	f023 020f 	bic.w	r2, r3, #15
 8018352:	498b      	ldr	r1, [pc, #556]	; (8018580 <HAL_RCC_ClockConfig+0x25c>)
 8018354:	683b      	ldr	r3, [r7, #0]
 8018356:	4313      	orrs	r3, r2
 8018358:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 801835a:	4b89      	ldr	r3, [pc, #548]	; (8018580 <HAL_RCC_ClockConfig+0x25c>)
 801835c:	681b      	ldr	r3, [r3, #0]
 801835e:	f003 030f 	and.w	r3, r3, #15
 8018362:	683a      	ldr	r2, [r7, #0]
 8018364:	429a      	cmp	r2, r3
 8018366:	d001      	beq.n	801836c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8018368:	2301      	movs	r3, #1
 801836a:	e104      	b.n	8018576 <HAL_RCC_ClockConfig+0x252>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 801836c:	687b      	ldr	r3, [r7, #4]
 801836e:	681b      	ldr	r3, [r3, #0]
 8018370:	f003 0302 	and.w	r3, r3, #2
 8018374:	2b00      	cmp	r3, #0
 8018376:	d010      	beq.n	801839a <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8018378:	687b      	ldr	r3, [r7, #4]
 801837a:	689a      	ldr	r2, [r3, #8]
 801837c:	4b81      	ldr	r3, [pc, #516]	; (8018584 <HAL_RCC_ClockConfig+0x260>)
 801837e:	689b      	ldr	r3, [r3, #8]
 8018380:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8018384:	429a      	cmp	r2, r3
 8018386:	d908      	bls.n	801839a <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8018388:	4b7e      	ldr	r3, [pc, #504]	; (8018584 <HAL_RCC_ClockConfig+0x260>)
 801838a:	689b      	ldr	r3, [r3, #8]
 801838c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8018390:	687b      	ldr	r3, [r7, #4]
 8018392:	689b      	ldr	r3, [r3, #8]
 8018394:	497b      	ldr	r1, [pc, #492]	; (8018584 <HAL_RCC_ClockConfig+0x260>)
 8018396:	4313      	orrs	r3, r2
 8018398:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 801839a:	687b      	ldr	r3, [r7, #4]
 801839c:	681b      	ldr	r3, [r3, #0]
 801839e:	f003 0301 	and.w	r3, r3, #1
 80183a2:	2b00      	cmp	r3, #0
 80183a4:	f000 8085 	beq.w	80184b2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80183a8:	687b      	ldr	r3, [r7, #4]
 80183aa:	685b      	ldr	r3, [r3, #4]
 80183ac:	2b03      	cmp	r3, #3
 80183ae:	d11f      	bne.n	80183f0 <HAL_RCC_ClockConfig+0xcc>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80183b0:	4b74      	ldr	r3, [pc, #464]	; (8018584 <HAL_RCC_ClockConfig+0x260>)
 80183b2:	681b      	ldr	r3, [r3, #0]
 80183b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80183b8:	2b00      	cmp	r3, #0
 80183ba:	d101      	bne.n	80183c0 <HAL_RCC_ClockConfig+0x9c>
      {
        return HAL_ERROR;
 80183bc:	2301      	movs	r3, #1
 80183be:	e0da      	b.n	8018576 <HAL_RCC_ClockConfig+0x252>
      }

      /* Transition state management when selecting PLL as SYSCLK source and */
      /* target frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80183c0:	f000 fa58 	bl	8018874 <RCC_GetSysClockFreqFromPLLSource>
 80183c4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if (pllfreq > 80000000U)
 80183c6:	693b      	ldr	r3, [r7, #16]
 80183c8:	4a6f      	ldr	r2, [pc, #444]	; (8018588 <HAL_RCC_ClockConfig+0x264>)
 80183ca:	4293      	cmp	r3, r2
 80183cc:	d947      	bls.n	801845e <HAL_RCC_ClockConfig+0x13a>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80183ce:	4b6d      	ldr	r3, [pc, #436]	; (8018584 <HAL_RCC_ClockConfig+0x260>)
 80183d0:	689b      	ldr	r3, [r3, #8]
 80183d2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80183d6:	2b00      	cmp	r3, #0
 80183d8:	d141      	bne.n	801845e <HAL_RCC_ClockConfig+0x13a>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80183da:	4b6a      	ldr	r3, [pc, #424]	; (8018584 <HAL_RCC_ClockConfig+0x260>)
 80183dc:	689b      	ldr	r3, [r3, #8]
 80183de:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80183e2:	4a68      	ldr	r2, [pc, #416]	; (8018584 <HAL_RCC_ClockConfig+0x260>)
 80183e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80183e8:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80183ea:	2380      	movs	r3, #128	; 0x80
 80183ec:	617b      	str	r3, [r7, #20]
 80183ee:	e036      	b.n	801845e <HAL_RCC_ClockConfig+0x13a>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80183f0:	687b      	ldr	r3, [r7, #4]
 80183f2:	685b      	ldr	r3, [r3, #4]
 80183f4:	2b02      	cmp	r3, #2
 80183f6:	d107      	bne.n	8018408 <HAL_RCC_ClockConfig+0xe4>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80183f8:	4b62      	ldr	r3, [pc, #392]	; (8018584 <HAL_RCC_ClockConfig+0x260>)
 80183fa:	681b      	ldr	r3, [r3, #0]
 80183fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8018400:	2b00      	cmp	r3, #0
 8018402:	d115      	bne.n	8018430 <HAL_RCC_ClockConfig+0x10c>
        {
          return HAL_ERROR;
 8018404:	2301      	movs	r3, #1
 8018406:	e0b6      	b.n	8018576 <HAL_RCC_ClockConfig+0x252>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8018408:	687b      	ldr	r3, [r7, #4]
 801840a:	685b      	ldr	r3, [r3, #4]
 801840c:	2b00      	cmp	r3, #0
 801840e:	d107      	bne.n	8018420 <HAL_RCC_ClockConfig+0xfc>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8018410:	4b5c      	ldr	r3, [pc, #368]	; (8018584 <HAL_RCC_ClockConfig+0x260>)
 8018412:	681b      	ldr	r3, [r3, #0]
 8018414:	f003 0302 	and.w	r3, r3, #2
 8018418:	2b00      	cmp	r3, #0
 801841a:	d109      	bne.n	8018430 <HAL_RCC_ClockConfig+0x10c>
        {
          return HAL_ERROR;
 801841c:	2301      	movs	r3, #1
 801841e:	e0aa      	b.n	8018576 <HAL_RCC_ClockConfig+0x252>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8018420:	4b58      	ldr	r3, [pc, #352]	; (8018584 <HAL_RCC_ClockConfig+0x260>)
 8018422:	681b      	ldr	r3, [r3, #0]
 8018424:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8018428:	2b00      	cmp	r3, #0
 801842a:	d101      	bne.n	8018430 <HAL_RCC_ClockConfig+0x10c>
        {
          return HAL_ERROR;
 801842c:	2301      	movs	r3, #1
 801842e:	e0a2      	b.n	8018576 <HAL_RCC_ClockConfig+0x252>
        }
      }

      /* Transition state management when when going down from PLL used as */
      /* SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8018430:	f000 f8b0 	bl	8018594 <HAL_RCC_GetSysClockFreq>
 8018434:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if (pllfreq > 80000000U)
 8018436:	693b      	ldr	r3, [r7, #16]
 8018438:	4a53      	ldr	r2, [pc, #332]	; (8018588 <HAL_RCC_ClockConfig+0x264>)
 801843a:	4293      	cmp	r3, r2
 801843c:	d90f      	bls.n	801845e <HAL_RCC_ClockConfig+0x13a>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 801843e:	4b51      	ldr	r3, [pc, #324]	; (8018584 <HAL_RCC_ClockConfig+0x260>)
 8018440:	689b      	ldr	r3, [r3, #8]
 8018442:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8018446:	2b00      	cmp	r3, #0
 8018448:	d109      	bne.n	801845e <HAL_RCC_ClockConfig+0x13a>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 801844a:	4b4e      	ldr	r3, [pc, #312]	; (8018584 <HAL_RCC_ClockConfig+0x260>)
 801844c:	689b      	ldr	r3, [r3, #8]
 801844e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8018452:	4a4c      	ldr	r2, [pc, #304]	; (8018584 <HAL_RCC_ClockConfig+0x260>)
 8018454:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8018458:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 801845a:	2380      	movs	r3, #128	; 0x80
 801845c:	617b      	str	r3, [r7, #20]
        }
      }
    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 801845e:	4b49      	ldr	r3, [pc, #292]	; (8018584 <HAL_RCC_ClockConfig+0x260>)
 8018460:	689b      	ldr	r3, [r3, #8]
 8018462:	f023 0203 	bic.w	r2, r3, #3
 8018466:	687b      	ldr	r3, [r7, #4]
 8018468:	685b      	ldr	r3, [r3, #4]
 801846a:	4946      	ldr	r1, [pc, #280]	; (8018584 <HAL_RCC_ClockConfig+0x260>)
 801846c:	4313      	orrs	r3, r2
 801846e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8018470:	f7fc f86e 	bl	8014550 <HAL_GetTick>
 8018474:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8018476:	e013      	b.n	80184a0 <HAL_RCC_ClockConfig+0x17c>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8018478:	f7fc f86a 	bl	8014550 <HAL_GetTick>
 801847c:	4602      	mov	r2, r0
 801847e:	68fb      	ldr	r3, [r7, #12]
 8018480:	1ad3      	subs	r3, r2, r3
 8018482:	f241 3288 	movw	r2, #5000	; 0x1388
 8018486:	4293      	cmp	r3, r2
 8018488:	d90a      	bls.n	80184a0 <HAL_RCC_ClockConfig+0x17c>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 801848a:	4b3e      	ldr	r3, [pc, #248]	; (8018584 <HAL_RCC_ClockConfig+0x260>)
 801848c:	689b      	ldr	r3, [r3, #8]
 801848e:	f003 020c 	and.w	r2, r3, #12
 8018492:	687b      	ldr	r3, [r7, #4]
 8018494:	685b      	ldr	r3, [r3, #4]
 8018496:	009b      	lsls	r3, r3, #2
 8018498:	429a      	cmp	r2, r3
 801849a:	d001      	beq.n	80184a0 <HAL_RCC_ClockConfig+0x17c>
        {
          return HAL_TIMEOUT;
 801849c:	2303      	movs	r3, #3
 801849e:	e06a      	b.n	8018576 <HAL_RCC_ClockConfig+0x252>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80184a0:	4b38      	ldr	r3, [pc, #224]	; (8018584 <HAL_RCC_ClockConfig+0x260>)
 80184a2:	689b      	ldr	r3, [r3, #8]
 80184a4:	f003 020c 	and.w	r2, r3, #12
 80184a8:	687b      	ldr	r3, [r7, #4]
 80184aa:	685b      	ldr	r3, [r3, #4]
 80184ac:	009b      	lsls	r3, r3, #2
 80184ae:	429a      	cmp	r2, r3
 80184b0:	d1e2      	bne.n	8018478 <HAL_RCC_ClockConfig+0x154>
      }
    }
  }

  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 80184b2:	697b      	ldr	r3, [r7, #20]
 80184b4:	2b80      	cmp	r3, #128	; 0x80
 80184b6:	d105      	bne.n	80184c4 <HAL_RCC_ClockConfig+0x1a0>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80184b8:	4b32      	ldr	r3, [pc, #200]	; (8018584 <HAL_RCC_ClockConfig+0x260>)
 80184ba:	689b      	ldr	r3, [r3, #8]
 80184bc:	4a31      	ldr	r2, [pc, #196]	; (8018584 <HAL_RCC_ClockConfig+0x260>)
 80184be:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80184c2:	6093      	str	r3, [r2, #8]
  }

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80184c4:	687b      	ldr	r3, [r7, #4]
 80184c6:	681b      	ldr	r3, [r3, #0]
 80184c8:	f003 0302 	and.w	r3, r3, #2
 80184cc:	2b00      	cmp	r3, #0
 80184ce:	d010      	beq.n	80184f2 <HAL_RCC_ClockConfig+0x1ce>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80184d0:	687b      	ldr	r3, [r7, #4]
 80184d2:	689a      	ldr	r2, [r3, #8]
 80184d4:	4b2b      	ldr	r3, [pc, #172]	; (8018584 <HAL_RCC_ClockConfig+0x260>)
 80184d6:	689b      	ldr	r3, [r3, #8]
 80184d8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80184dc:	429a      	cmp	r2, r3
 80184de:	d208      	bcs.n	80184f2 <HAL_RCC_ClockConfig+0x1ce>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80184e0:	4b28      	ldr	r3, [pc, #160]	; (8018584 <HAL_RCC_ClockConfig+0x260>)
 80184e2:	689b      	ldr	r3, [r3, #8]
 80184e4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80184e8:	687b      	ldr	r3, [r7, #4]
 80184ea:	689b      	ldr	r3, [r3, #8]
 80184ec:	4925      	ldr	r1, [pc, #148]	; (8018584 <HAL_RCC_ClockConfig+0x260>)
 80184ee:	4313      	orrs	r3, r2
 80184f0:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80184f2:	4b23      	ldr	r3, [pc, #140]	; (8018580 <HAL_RCC_ClockConfig+0x25c>)
 80184f4:	681b      	ldr	r3, [r3, #0]
 80184f6:	f003 030f 	and.w	r3, r3, #15
 80184fa:	683a      	ldr	r2, [r7, #0]
 80184fc:	429a      	cmp	r2, r3
 80184fe:	d210      	bcs.n	8018522 <HAL_RCC_ClockConfig+0x1fe>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8018500:	4b1f      	ldr	r3, [pc, #124]	; (8018580 <HAL_RCC_ClockConfig+0x25c>)
 8018502:	681b      	ldr	r3, [r3, #0]
 8018504:	f023 020f 	bic.w	r2, r3, #15
 8018508:	491d      	ldr	r1, [pc, #116]	; (8018580 <HAL_RCC_ClockConfig+0x25c>)
 801850a:	683b      	ldr	r3, [r7, #0]
 801850c:	4313      	orrs	r3, r2
 801850e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8018510:	4b1b      	ldr	r3, [pc, #108]	; (8018580 <HAL_RCC_ClockConfig+0x25c>)
 8018512:	681b      	ldr	r3, [r3, #0]
 8018514:	f003 030f 	and.w	r3, r3, #15
 8018518:	683a      	ldr	r2, [r7, #0]
 801851a:	429a      	cmp	r2, r3
 801851c:	d001      	beq.n	8018522 <HAL_RCC_ClockConfig+0x1fe>
    {
      return HAL_ERROR;
 801851e:	2301      	movs	r3, #1
 8018520:	e029      	b.n	8018576 <HAL_RCC_ClockConfig+0x252>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8018522:	687b      	ldr	r3, [r7, #4]
 8018524:	681b      	ldr	r3, [r3, #0]
 8018526:	f003 0304 	and.w	r3, r3, #4
 801852a:	2b00      	cmp	r3, #0
 801852c:	d008      	beq.n	8018540 <HAL_RCC_ClockConfig+0x21c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 801852e:	4b15      	ldr	r3, [pc, #84]	; (8018584 <HAL_RCC_ClockConfig+0x260>)
 8018530:	689b      	ldr	r3, [r3, #8]
 8018532:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8018536:	687b      	ldr	r3, [r7, #4]
 8018538:	68db      	ldr	r3, [r3, #12]
 801853a:	4912      	ldr	r1, [pc, #72]	; (8018584 <HAL_RCC_ClockConfig+0x260>)
 801853c:	4313      	orrs	r3, r2
 801853e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8018540:	687b      	ldr	r3, [r7, #4]
 8018542:	681b      	ldr	r3, [r3, #0]
 8018544:	f003 0308 	and.w	r3, r3, #8
 8018548:	2b00      	cmp	r3, #0
 801854a:	d009      	beq.n	8018560 <HAL_RCC_ClockConfig+0x23c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 801854c:	4b0d      	ldr	r3, [pc, #52]	; (8018584 <HAL_RCC_ClockConfig+0x260>)
 801854e:	689b      	ldr	r3, [r3, #8]
 8018550:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8018554:	687b      	ldr	r3, [r7, #4]
 8018556:	691b      	ldr	r3, [r3, #16]
 8018558:	00db      	lsls	r3, r3, #3
 801855a:	490a      	ldr	r1, [pc, #40]	; (8018584 <HAL_RCC_ClockConfig+0x260>)
 801855c:	4313      	orrs	r3, r2
 801855e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8018560:	f000 f8b6 	bl	80186d0 <HAL_RCC_GetHCLKFreq>
 8018564:	4603      	mov	r3, r0
 8018566:	4a09      	ldr	r2, [pc, #36]	; (801858c <HAL_RCC_ClockConfig+0x268>)
 8018568:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 801856a:	4b09      	ldr	r3, [pc, #36]	; (8018590 <HAL_RCC_ClockConfig+0x26c>)
 801856c:	681b      	ldr	r3, [r3, #0]
 801856e:	4618      	mov	r0, r3
 8018570:	f7fb fd46 	bl	8014000 <HAL_InitTick>
 8018574:	4603      	mov	r3, r0
}
 8018576:	4618      	mov	r0, r3
 8018578:	3718      	adds	r7, #24
 801857a:	46bd      	mov	sp, r7
 801857c:	bd80      	pop	{r7, pc}
 801857e:	bf00      	nop
 8018580:	40022000 	.word	0x40022000
 8018584:	40021000 	.word	0x40021000
 8018588:	04c4b400 	.word	0x04c4b400
 801858c:	20000090 	.word	0x20000090
 8018590:	20000094 	.word	0x20000094

08018594 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8018594:	b480      	push	{r7}
 8018596:	b089      	sub	sp, #36	; 0x24
 8018598:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 801859a:	2300      	movs	r3, #0
 801859c:	61fb      	str	r3, [r7, #28]
 801859e:	2300      	movs	r3, #0
 80185a0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80185a2:	4b47      	ldr	r3, [pc, #284]	; (80186c0 <HAL_RCC_GetSysClockFreq+0x12c>)
 80185a4:	689b      	ldr	r3, [r3, #8]
 80185a6:	f003 030c 	and.w	r3, r3, #12
 80185aa:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80185ac:	4b44      	ldr	r3, [pc, #272]	; (80186c0 <HAL_RCC_GetSysClockFreq+0x12c>)
 80185ae:	68db      	ldr	r3, [r3, #12]
 80185b0:	f003 0303 	and.w	r3, r3, #3
 80185b4:	60fb      	str	r3, [r7, #12]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80185b6:	693b      	ldr	r3, [r7, #16]
 80185b8:	2b00      	cmp	r3, #0
 80185ba:	d005      	beq.n	80185c8 <HAL_RCC_GetSysClockFreq+0x34>
 80185bc:	693b      	ldr	r3, [r7, #16]
 80185be:	2b0c      	cmp	r3, #12
 80185c0:	d121      	bne.n	8018606 <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80185c2:	68fb      	ldr	r3, [r7, #12]
 80185c4:	2b01      	cmp	r3, #1
 80185c6:	d11e      	bne.n	8018606 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80185c8:	4b3d      	ldr	r3, [pc, #244]	; (80186c0 <HAL_RCC_GetSysClockFreq+0x12c>)
 80185ca:	681b      	ldr	r3, [r3, #0]
 80185cc:	f003 0308 	and.w	r3, r3, #8
 80185d0:	2b00      	cmp	r3, #0
 80185d2:	d107      	bne.n	80185e4 <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80185d4:	4b3a      	ldr	r3, [pc, #232]	; (80186c0 <HAL_RCC_GetSysClockFreq+0x12c>)
 80185d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80185da:	0a1b      	lsrs	r3, r3, #8
 80185dc:	f003 030f 	and.w	r3, r3, #15
 80185e0:	61fb      	str	r3, [r7, #28]
 80185e2:	e005      	b.n	80185f0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80185e4:	4b36      	ldr	r3, [pc, #216]	; (80186c0 <HAL_RCC_GetSysClockFreq+0x12c>)
 80185e6:	681b      	ldr	r3, [r3, #0]
 80185e8:	091b      	lsrs	r3, r3, #4
 80185ea:	f003 030f 	and.w	r3, r3, #15
 80185ee:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in Hz*/
    msirange = MSIRangeTable[msirange];
 80185f0:	4a34      	ldr	r2, [pc, #208]	; (80186c4 <HAL_RCC_GetSysClockFreq+0x130>)
 80185f2:	69fb      	ldr	r3, [r7, #28]
 80185f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80185f8:	61fb      	str	r3, [r7, #28]

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80185fa:	693b      	ldr	r3, [r7, #16]
 80185fc:	2b00      	cmp	r3, #0
 80185fe:	d10d      	bne.n	801861c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8018600:	69fb      	ldr	r3, [r7, #28]
 8018602:	61bb      	str	r3, [r7, #24]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8018604:	e00a      	b.n	801861c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8018606:	693b      	ldr	r3, [r7, #16]
 8018608:	2b04      	cmp	r3, #4
 801860a:	d102      	bne.n	8018612 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 801860c:	4b2e      	ldr	r3, [pc, #184]	; (80186c8 <HAL_RCC_GetSysClockFreq+0x134>)
 801860e:	61bb      	str	r3, [r7, #24]
 8018610:	e004      	b.n	801861c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8018612:	693b      	ldr	r3, [r7, #16]
 8018614:	2b08      	cmp	r3, #8
 8018616:	d101      	bne.n	801861c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8018618:	4b2c      	ldr	r3, [pc, #176]	; (80186cc <HAL_RCC_GetSysClockFreq+0x138>)
 801861a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 801861c:	693b      	ldr	r3, [r7, #16]
 801861e:	2b0c      	cmp	r3, #12
 8018620:	d146      	bne.n	80186b0 <HAL_RCC_GetSysClockFreq+0x11c>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8018622:	4b27      	ldr	r3, [pc, #156]	; (80186c0 <HAL_RCC_GetSysClockFreq+0x12c>)
 8018624:	68db      	ldr	r3, [r3, #12]
 8018626:	f003 0303 	and.w	r3, r3, #3
 801862a:	60bb      	str	r3, [r7, #8]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 801862c:	4b24      	ldr	r3, [pc, #144]	; (80186c0 <HAL_RCC_GetSysClockFreq+0x12c>)
 801862e:	68db      	ldr	r3, [r3, #12]
 8018630:	091b      	lsrs	r3, r3, #4
 8018632:	f003 030f 	and.w	r3, r3, #15
 8018636:	3301      	adds	r3, #1
 8018638:	607b      	str	r3, [r7, #4]

    switch (pllsource)
 801863a:	68bb      	ldr	r3, [r7, #8]
 801863c:	2b02      	cmp	r3, #2
 801863e:	d003      	beq.n	8018648 <HAL_RCC_GetSysClockFreq+0xb4>
 8018640:	68bb      	ldr	r3, [r7, #8]
 8018642:	2b03      	cmp	r3, #3
 8018644:	d00d      	beq.n	8018662 <HAL_RCC_GetSysClockFreq+0xce>
 8018646:	e019      	b.n	801867c <HAL_RCC_GetSysClockFreq+0xe8>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8018648:	4a1f      	ldr	r2, [pc, #124]	; (80186c8 <HAL_RCC_GetSysClockFreq+0x134>)
 801864a:	687b      	ldr	r3, [r7, #4]
 801864c:	fbb2 f3f3 	udiv	r3, r2, r3
 8018650:	4a1b      	ldr	r2, [pc, #108]	; (80186c0 <HAL_RCC_GetSysClockFreq+0x12c>)
 8018652:	68d2      	ldr	r2, [r2, #12]
 8018654:	0a12      	lsrs	r2, r2, #8
 8018656:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 801865a:	fb02 f303 	mul.w	r3, r2, r3
 801865e:	617b      	str	r3, [r7, #20]
        break;
 8018660:	e019      	b.n	8018696 <HAL_RCC_GetSysClockFreq+0x102>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8018662:	4a1a      	ldr	r2, [pc, #104]	; (80186cc <HAL_RCC_GetSysClockFreq+0x138>)
 8018664:	687b      	ldr	r3, [r7, #4]
 8018666:	fbb2 f3f3 	udiv	r3, r2, r3
 801866a:	4a15      	ldr	r2, [pc, #84]	; (80186c0 <HAL_RCC_GetSysClockFreq+0x12c>)
 801866c:	68d2      	ldr	r2, [r2, #12]
 801866e:	0a12      	lsrs	r2, r2, #8
 8018670:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8018674:	fb02 f303 	mul.w	r3, r2, r3
 8018678:	617b      	str	r3, [r7, #20]
        break;
 801867a:	e00c      	b.n	8018696 <HAL_RCC_GetSysClockFreq+0x102>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllvco = (msirange / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 801867c:	69fa      	ldr	r2, [r7, #28]
 801867e:	687b      	ldr	r3, [r7, #4]
 8018680:	fbb2 f3f3 	udiv	r3, r2, r3
 8018684:	4a0e      	ldr	r2, [pc, #56]	; (80186c0 <HAL_RCC_GetSysClockFreq+0x12c>)
 8018686:	68d2      	ldr	r2, [r2, #12]
 8018688:	0a12      	lsrs	r2, r2, #8
 801868a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 801868e:	fb02 f303 	mul.w	r3, r2, r3
 8018692:	617b      	str	r3, [r7, #20]
        break;
 8018694:	bf00      	nop
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U) * 2U;
 8018696:	4b0a      	ldr	r3, [pc, #40]	; (80186c0 <HAL_RCC_GetSysClockFreq+0x12c>)
 8018698:	68db      	ldr	r3, [r3, #12]
 801869a:	0e5b      	lsrs	r3, r3, #25
 801869c:	f003 0303 	and.w	r3, r3, #3
 80186a0:	3301      	adds	r3, #1
 80186a2:	005b      	lsls	r3, r3, #1
 80186a4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80186a6:	697a      	ldr	r2, [r7, #20]
 80186a8:	683b      	ldr	r3, [r7, #0]
 80186aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80186ae:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80186b0:	69bb      	ldr	r3, [r7, #24]
}
 80186b2:	4618      	mov	r0, r3
 80186b4:	3724      	adds	r7, #36	; 0x24
 80186b6:	46bd      	mov	sp, r7
 80186b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80186bc:	4770      	bx	lr
 80186be:	bf00      	nop
 80186c0:	40021000 	.word	0x40021000
 80186c4:	08025fa4 	.word	0x08025fa4
 80186c8:	00f42400 	.word	0x00f42400
 80186cc:	007a1200 	.word	0x007a1200

080186d0 <HAL_RCC_GetHCLKFreq>:
  * @note   Each time HCLK changes, this function must be called to update the
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80186d0:	b580      	push	{r7, lr}
 80186d2:	af00      	add	r7, sp, #0
  return (HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]);
 80186d4:	f7ff ff5e 	bl	8018594 <HAL_RCC_GetSysClockFreq>
 80186d8:	4602      	mov	r2, r0
 80186da:	4b05      	ldr	r3, [pc, #20]	; (80186f0 <HAL_RCC_GetHCLKFreq+0x20>)
 80186dc:	689b      	ldr	r3, [r3, #8]
 80186de:	091b      	lsrs	r3, r3, #4
 80186e0:	f003 030f 	and.w	r3, r3, #15
 80186e4:	4903      	ldr	r1, [pc, #12]	; (80186f4 <HAL_RCC_GetHCLKFreq+0x24>)
 80186e6:	5ccb      	ldrb	r3, [r1, r3]
 80186e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80186ec:	4618      	mov	r0, r3
 80186ee:	bd80      	pop	{r7, pc}
 80186f0:	40021000 	.word	0x40021000
 80186f4:	08025f8c 	.word	0x08025f8c

080186f8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80186f8:	b580      	push	{r7, lr}
 80186fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80186fc:	f7ff ffe8 	bl	80186d0 <HAL_RCC_GetHCLKFreq>
 8018700:	4602      	mov	r2, r0
 8018702:	4b05      	ldr	r3, [pc, #20]	; (8018718 <HAL_RCC_GetPCLK1Freq+0x20>)
 8018704:	689b      	ldr	r3, [r3, #8]
 8018706:	0a1b      	lsrs	r3, r3, #8
 8018708:	f003 0307 	and.w	r3, r3, #7
 801870c:	4903      	ldr	r1, [pc, #12]	; (801871c <HAL_RCC_GetPCLK1Freq+0x24>)
 801870e:	5ccb      	ldrb	r3, [r1, r3]
 8018710:	fa22 f303 	lsr.w	r3, r2, r3
}
 8018714:	4618      	mov	r0, r3
 8018716:	bd80      	pop	{r7, pc}
 8018718:	40021000 	.word	0x40021000
 801871c:	08025f9c 	.word	0x08025f9c

08018720 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8018720:	b580      	push	{r7, lr}
 8018722:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8018724:	f7ff ffd4 	bl	80186d0 <HAL_RCC_GetHCLKFreq>
 8018728:	4602      	mov	r2, r0
 801872a:	4b05      	ldr	r3, [pc, #20]	; (8018740 <HAL_RCC_GetPCLK2Freq+0x20>)
 801872c:	689b      	ldr	r3, [r3, #8]
 801872e:	0adb      	lsrs	r3, r3, #11
 8018730:	f003 0307 	and.w	r3, r3, #7
 8018734:	4903      	ldr	r1, [pc, #12]	; (8018744 <HAL_RCC_GetPCLK2Freq+0x24>)
 8018736:	5ccb      	ldrb	r3, [r1, r3]
 8018738:	fa22 f303 	lsr.w	r3, r2, r3
}
 801873c:	4618      	mov	r0, r3
 801873e:	bd80      	pop	{r7, pc}
 8018740:	40021000 	.word	0x40021000
 8018744:	08025f9c 	.word	0x08025f9c

08018748 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8018748:	b480      	push	{r7}
 801874a:	b083      	sub	sp, #12
 801874c:	af00      	add	r7, sp, #0
 801874e:	6078      	str	r0, [r7, #4]
 8018750:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8018752:	687b      	ldr	r3, [r7, #4]
 8018754:	220f      	movs	r2, #15
 8018756:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8018758:	4b12      	ldr	r3, [pc, #72]	; (80187a4 <HAL_RCC_GetClockConfig+0x5c>)
 801875a:	689b      	ldr	r3, [r3, #8]
 801875c:	f003 0203 	and.w	r2, r3, #3
 8018760:	687b      	ldr	r3, [r7, #4]
 8018762:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8018764:	4b0f      	ldr	r3, [pc, #60]	; (80187a4 <HAL_RCC_GetClockConfig+0x5c>)
 8018766:	689b      	ldr	r3, [r3, #8]
 8018768:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 801876c:	687b      	ldr	r3, [r7, #4]
 801876e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8018770:	4b0c      	ldr	r3, [pc, #48]	; (80187a4 <HAL_RCC_GetClockConfig+0x5c>)
 8018772:	689b      	ldr	r3, [r3, #8]
 8018774:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8018778:	687b      	ldr	r3, [r7, #4]
 801877a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 801877c:	4b09      	ldr	r3, [pc, #36]	; (80187a4 <HAL_RCC_GetClockConfig+0x5c>)
 801877e:	689b      	ldr	r3, [r3, #8]
 8018780:	08db      	lsrs	r3, r3, #3
 8018782:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8018786:	687b      	ldr	r3, [r7, #4]
 8018788:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 801878a:	4b07      	ldr	r3, [pc, #28]	; (80187a8 <HAL_RCC_GetClockConfig+0x60>)
 801878c:	681b      	ldr	r3, [r3, #0]
 801878e:	f003 020f 	and.w	r2, r3, #15
 8018792:	683b      	ldr	r3, [r7, #0]
 8018794:	601a      	str	r2, [r3, #0]
}
 8018796:	bf00      	nop
 8018798:	370c      	adds	r7, #12
 801879a:	46bd      	mov	sp, r7
 801879c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80187a0:	4770      	bx	lr
 80187a2:	bf00      	nop
 80187a4:	40021000 	.word	0x40021000
 80187a8:	40022000 	.word	0x40022000

080187ac <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80187ac:	b580      	push	{r7, lr}
 80187ae:	b086      	sub	sp, #24
 80187b0:	af00      	add	r7, sp, #0
 80187b2:	6078      	str	r0, [r7, #4]
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80187b4:	2300      	movs	r3, #0
 80187b6:	617b      	str	r3, [r7, #20]
  uint32_t vos;

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 80187b8:	4b2c      	ldr	r3, [pc, #176]	; (801886c <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 80187ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80187bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80187c0:	2b00      	cmp	r3, #0
 80187c2:	d003      	beq.n	80187cc <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80187c4:	f7ff f83a 	bl	801783c <HAL_PWREx_GetVoltageRange>
 80187c8:	6138      	str	r0, [r7, #16]
 80187ca:	e014      	b.n	80187f6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80187cc:	4b27      	ldr	r3, [pc, #156]	; (801886c <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 80187ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80187d0:	4a26      	ldr	r2, [pc, #152]	; (801886c <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 80187d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80187d6:	6593      	str	r3, [r2, #88]	; 0x58
 80187d8:	4b24      	ldr	r3, [pc, #144]	; (801886c <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 80187da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80187dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80187e0:	60fb      	str	r3, [r7, #12]
 80187e2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80187e4:	f7ff f82a 	bl	801783c <HAL_PWREx_GetVoltageRange>
 80187e8:	6138      	str	r0, [r7, #16]
    __HAL_RCC_PWR_CLK_DISABLE();
 80187ea:	4b20      	ldr	r3, [pc, #128]	; (801886c <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 80187ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80187ee:	4a1f      	ldr	r2, [pc, #124]	; (801886c <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 80187f0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80187f4:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE0) || (vos == PWR_REGULATOR_VOLTAGE_SCALE1))
 80187f6:	693b      	ldr	r3, [r7, #16]
 80187f8:	2b00      	cmp	r3, #0
 80187fa:	d003      	beq.n	8018804 <RCC_SetFlashLatencyFromMSIRange+0x58>
 80187fc:	693b      	ldr	r3, [r7, #16]
 80187fe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8018802:	d10b      	bne.n	801881c <RCC_SetFlashLatencyFromMSIRange+0x70>
  {
    if (msirange > RCC_MSIRANGE_8)
 8018804:	687b      	ldr	r3, [r7, #4]
 8018806:	2b80      	cmp	r3, #128	; 0x80
 8018808:	d919      	bls.n	801883e <RCC_SetFlashLatencyFromMSIRange+0x92>
    {
      /* MSI > 16Mhz */
      if (msirange > RCC_MSIRANGE_10)
 801880a:	687b      	ldr	r3, [r7, #4]
 801880c:	2ba0      	cmp	r3, #160	; 0xa0
 801880e:	d902      	bls.n	8018816 <RCC_SetFlashLatencyFromMSIRange+0x6a>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8018810:	2302      	movs	r3, #2
 8018812:	617b      	str	r3, [r7, #20]
    if (msirange > RCC_MSIRANGE_8)
 8018814:	e013      	b.n	801883e <RCC_SetFlashLatencyFromMSIRange+0x92>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8018816:	2301      	movs	r3, #1
 8018818:	617b      	str	r3, [r7, #20]
    if (msirange > RCC_MSIRANGE_8)
 801881a:	e010      	b.n	801883e <RCC_SetFlashLatencyFromMSIRange+0x92>
    }
    /* else MSI <= 16Mhz default FLASH_LATENCY_0 0WS */
  }
  else
  {
    if (msirange > RCC_MSIRANGE_8)
 801881c:	687b      	ldr	r3, [r7, #4]
 801881e:	2b80      	cmp	r3, #128	; 0x80
 8018820:	d902      	bls.n	8018828 <RCC_SetFlashLatencyFromMSIRange+0x7c>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8018822:	2303      	movs	r3, #3
 8018824:	617b      	str	r3, [r7, #20]
 8018826:	e00a      	b.n	801883e <RCC_SetFlashLatencyFromMSIRange+0x92>
    }
    else
    {
      if (msirange == RCC_MSIRANGE_8)
 8018828:	687b      	ldr	r3, [r7, #4]
 801882a:	2b80      	cmp	r3, #128	; 0x80
 801882c:	d102      	bne.n	8018834 <RCC_SetFlashLatencyFromMSIRange+0x88>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 801882e:	2302      	movs	r3, #2
 8018830:	617b      	str	r3, [r7, #20]
 8018832:	e004      	b.n	801883e <RCC_SetFlashLatencyFromMSIRange+0x92>
      }
      else if (msirange == RCC_MSIRANGE_7)
 8018834:	687b      	ldr	r3, [r7, #4]
 8018836:	2b70      	cmp	r3, #112	; 0x70
 8018838:	d101      	bne.n	801883e <RCC_SetFlashLatencyFromMSIRange+0x92>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 801883a:	2301      	movs	r3, #1
 801883c:	617b      	str	r3, [r7, #20]
        /* MSI < 8Mhz default FLASH_LATENCY_0 0WS */
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 801883e:	4b0c      	ldr	r3, [pc, #48]	; (8018870 <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 8018840:	681b      	ldr	r3, [r3, #0]
 8018842:	f023 020f 	bic.w	r2, r3, #15
 8018846:	490a      	ldr	r1, [pc, #40]	; (8018870 <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 8018848:	697b      	ldr	r3, [r7, #20]
 801884a:	4313      	orrs	r3, r2
 801884c:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 801884e:	4b08      	ldr	r3, [pc, #32]	; (8018870 <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 8018850:	681b      	ldr	r3, [r3, #0]
 8018852:	f003 030f 	and.w	r3, r3, #15
 8018856:	697a      	ldr	r2, [r7, #20]
 8018858:	429a      	cmp	r2, r3
 801885a:	d001      	beq.n	8018860 <RCC_SetFlashLatencyFromMSIRange+0xb4>
  {
    return HAL_ERROR;
 801885c:	2301      	movs	r3, #1
 801885e:	e000      	b.n	8018862 <RCC_SetFlashLatencyFromMSIRange+0xb6>
  }

  return HAL_OK;
 8018860:	2300      	movs	r3, #0
}
 8018862:	4618      	mov	r0, r3
 8018864:	3718      	adds	r7, #24
 8018866:	46bd      	mov	sp, r7
 8018868:	bd80      	pop	{r7, pc}
 801886a:	bf00      	nop
 801886c:	40021000 	.word	0x40021000
 8018870:	40022000 	.word	0x40022000

08018874 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8018874:	b480      	push	{r7}
 8018876:	b087      	sub	sp, #28
 8018878:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;    /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 801887a:	4b31      	ldr	r3, [pc, #196]	; (8018940 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 801887c:	68db      	ldr	r3, [r3, #12]
 801887e:	f003 0303 	and.w	r3, r3, #3
 8018882:	60fb      	str	r3, [r7, #12]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8018884:	4b2e      	ldr	r3, [pc, #184]	; (8018940 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8018886:	68db      	ldr	r3, [r3, #12]
 8018888:	091b      	lsrs	r3, r3, #4
 801888a:	f003 030f 	and.w	r3, r3, #15
 801888e:	3301      	adds	r3, #1
 8018890:	60bb      	str	r3, [r7, #8]

  switch (pllsource)
 8018892:	68fb      	ldr	r3, [r7, #12]
 8018894:	2b03      	cmp	r3, #3
 8018896:	d015      	beq.n	80188c4 <RCC_GetSysClockFreqFromPLLSource+0x50>
 8018898:	68fb      	ldr	r3, [r7, #12]
 801889a:	2b03      	cmp	r3, #3
 801889c:	d839      	bhi.n	8018912 <RCC_GetSysClockFreqFromPLLSource+0x9e>
 801889e:	68fb      	ldr	r3, [r7, #12]
 80188a0:	2b01      	cmp	r3, #1
 80188a2:	d01c      	beq.n	80188de <RCC_GetSysClockFreqFromPLLSource+0x6a>
 80188a4:	68fb      	ldr	r3, [r7, #12]
 80188a6:	2b02      	cmp	r3, #2
 80188a8:	d133      	bne.n	8018912 <RCC_GetSysClockFreqFromPLLSource+0x9e>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80188aa:	4a26      	ldr	r2, [pc, #152]	; (8018944 <RCC_GetSysClockFreqFromPLLSource+0xd0>)
 80188ac:	68bb      	ldr	r3, [r7, #8]
 80188ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80188b2:	4a23      	ldr	r2, [pc, #140]	; (8018940 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 80188b4:	68d2      	ldr	r2, [r2, #12]
 80188b6:	0a12      	lsrs	r2, r2, #8
 80188b8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80188bc:	fb02 f303 	mul.w	r3, r2, r3
 80188c0:	613b      	str	r3, [r7, #16]
      break;
 80188c2:	e029      	b.n	8018918 <RCC_GetSysClockFreqFromPLLSource+0xa4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80188c4:	4a20      	ldr	r2, [pc, #128]	; (8018948 <RCC_GetSysClockFreqFromPLLSource+0xd4>)
 80188c6:	68bb      	ldr	r3, [r7, #8]
 80188c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80188cc:	4a1c      	ldr	r2, [pc, #112]	; (8018940 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 80188ce:	68d2      	ldr	r2, [r2, #12]
 80188d0:	0a12      	lsrs	r2, r2, #8
 80188d2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80188d6:	fb02 f303 	mul.w	r3, r2, r3
 80188da:	613b      	str	r3, [r7, #16]
      break;
 80188dc:	e01c      	b.n	8018918 <RCC_GetSysClockFreqFromPLLSource+0xa4>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      /* Get MSI range source */
      if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80188de:	4b18      	ldr	r3, [pc, #96]	; (8018940 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 80188e0:	681b      	ldr	r3, [r3, #0]
 80188e2:	f003 0308 	and.w	r3, r3, #8
 80188e6:	2b00      	cmp	r3, #0
 80188e8:	d107      	bne.n	80188fa <RCC_GetSysClockFreqFromPLLSource+0x86>
      { /* MSISRANGE from RCC_CSR applies */
        msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80188ea:	4b15      	ldr	r3, [pc, #84]	; (8018940 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 80188ec:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80188f0:	0a1b      	lsrs	r3, r3, #8
 80188f2:	f003 030f 	and.w	r3, r3, #15
 80188f6:	617b      	str	r3, [r7, #20]
 80188f8:	e005      	b.n	8018906 <RCC_GetSysClockFreqFromPLLSource+0x92>
      }
      else
      { /* MSIRANGE from RCC_CR applies */
        msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80188fa:	4b11      	ldr	r3, [pc, #68]	; (8018940 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 80188fc:	681b      	ldr	r3, [r3, #0]
 80188fe:	091b      	lsrs	r3, r3, #4
 8018900:	f003 030f 	and.w	r3, r3, #15
 8018904:	617b      	str	r3, [r7, #20]
      }
        /*MSI frequency range in HZ*/
        pllvco = MSIRangeTable[msirange];
 8018906:	4a11      	ldr	r2, [pc, #68]	; (801894c <RCC_GetSysClockFreqFromPLLSource+0xd8>)
 8018908:	697b      	ldr	r3, [r7, #20]
 801890a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801890e:	613b      	str	r3, [r7, #16]
        break;
 8018910:	e002      	b.n	8018918 <RCC_GetSysClockFreqFromPLLSource+0xa4>
    default:
      /* unexpected */
      pllvco = 0;
 8018912:	2300      	movs	r3, #0
 8018914:	613b      	str	r3, [r7, #16]
      break;
 8018916:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U) * 2U;
 8018918:	4b09      	ldr	r3, [pc, #36]	; (8018940 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 801891a:	68db      	ldr	r3, [r3, #12]
 801891c:	0e5b      	lsrs	r3, r3, #25
 801891e:	f003 0303 	and.w	r3, r3, #3
 8018922:	3301      	adds	r3, #1
 8018924:	005b      	lsls	r3, r3, #1
 8018926:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8018928:	693a      	ldr	r2, [r7, #16]
 801892a:	687b      	ldr	r3, [r7, #4]
 801892c:	fbb2 f3f3 	udiv	r3, r2, r3
 8018930:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8018932:	683b      	ldr	r3, [r7, #0]
}
 8018934:	4618      	mov	r0, r3
 8018936:	371c      	adds	r7, #28
 8018938:	46bd      	mov	sp, r7
 801893a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801893e:	4770      	bx	lr
 8018940:	40021000 	.word	0x40021000
 8018944:	00f42400 	.word	0x00f42400
 8018948:	007a1200 	.word	0x007a1200
 801894c:	08025fa4 	.word	0x08025fa4

08018950 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8018950:	b580      	push	{r7, lr}
 8018952:	b088      	sub	sp, #32
 8018954:	af00      	add	r7, sp, #0
 8018956:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8018958:	2300      	movs	r3, #0
 801895a:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 801895c:	2300      	movs	r3, #0
 801895e:	77bb      	strb	r3, [r7, #30]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8018960:	687b      	ldr	r3, [r7, #4]
 8018962:	681b      	ldr	r3, [r3, #0]
 8018964:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8018968:	2b00      	cmp	r3, #0
 801896a:	d040      	beq.n	80189ee <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 801896c:	687b      	ldr	r3, [r7, #4]
 801896e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8018970:	2b80      	cmp	r3, #128	; 0x80
 8018972:	d02a      	beq.n	80189ca <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8018974:	2b80      	cmp	r3, #128	; 0x80
 8018976:	d825      	bhi.n	80189c4 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8018978:	2b60      	cmp	r3, #96	; 0x60
 801897a:	d026      	beq.n	80189ca <HAL_RCCEx_PeriphCLKConfig+0x7a>
 801897c:	2b60      	cmp	r3, #96	; 0x60
 801897e:	d821      	bhi.n	80189c4 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8018980:	2b40      	cmp	r3, #64	; 0x40
 8018982:	d006      	beq.n	8018992 <HAL_RCCEx_PeriphCLKConfig+0x42>
 8018984:	2b40      	cmp	r3, #64	; 0x40
 8018986:	d81d      	bhi.n	80189c4 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8018988:	2b00      	cmp	r3, #0
 801898a:	d009      	beq.n	80189a0 <HAL_RCCEx_PeriphCLKConfig+0x50>
 801898c:	2b20      	cmp	r3, #32
 801898e:	d010      	beq.n	80189b2 <HAL_RCCEx_PeriphCLKConfig+0x62>
 8018990:	e018      	b.n	80189c4 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8018992:	4b8f      	ldr	r3, [pc, #572]	; (8018bd0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8018994:	68db      	ldr	r3, [r3, #12]
 8018996:	4a8e      	ldr	r2, [pc, #568]	; (8018bd0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8018998:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 801899c:	60d3      	str	r3, [r2, #12]
        /* SAI1 clock source config set later after clock selection check */
        break;
 801899e:	e015      	b.n	80189cc <HAL_RCCEx_PeriphCLKConfig+0x7c>

      case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
        /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80189a0:	687b      	ldr	r3, [r7, #4]
 80189a2:	3304      	adds	r3, #4
 80189a4:	2100      	movs	r1, #0
 80189a6:	4618      	mov	r0, r3
 80189a8:	f000 fb56 	bl	8019058 <RCCEx_PLLSAI1_Config>
 80189ac:	4603      	mov	r3, r0
 80189ae:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 80189b0:	e00c      	b.n	80189cc <HAL_RCCEx_PeriphCLKConfig+0x7c>

      case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
        /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
        ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80189b2:	687b      	ldr	r3, [r7, #4]
 80189b4:	3320      	adds	r3, #32
 80189b6:	2100      	movs	r1, #0
 80189b8:	4618      	mov	r0, r3
 80189ba:	f000 fc33 	bl	8019224 <RCCEx_PLLSAI2_Config>
 80189be:	4603      	mov	r3, r0
 80189c0:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 80189c2:	e003      	b.n	80189cc <HAL_RCCEx_PeriphCLKConfig+0x7c>
      case RCC_SAI1CLKSOURCE_HSI:      /* HSI is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80189c4:	2301      	movs	r3, #1
 80189c6:	77fb      	strb	r3, [r7, #31]
        break;
 80189c8:	e000      	b.n	80189cc <HAL_RCCEx_PeriphCLKConfig+0x7c>
        break;
 80189ca:	bf00      	nop
    }

    if (ret == HAL_OK)
 80189cc:	7ffb      	ldrb	r3, [r7, #31]
 80189ce:	2b00      	cmp	r3, #0
 80189d0:	d10b      	bne.n	80189ea <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80189d2:	4b7f      	ldr	r3, [pc, #508]	; (8018bd0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80189d4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80189d8:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 80189dc:	687b      	ldr	r3, [r7, #4]
 80189de:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80189e0:	497b      	ldr	r1, [pc, #492]	; (8018bd0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80189e2:	4313      	orrs	r3, r2
 80189e4:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 80189e8:	e001      	b.n	80189ee <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80189ea:	7ffb      	ldrb	r3, [r7, #31]
 80189ec:	77bb      	strb	r3, [r7, #30]
    }
  }

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80189ee:	687b      	ldr	r3, [r7, #4]
 80189f0:	681b      	ldr	r3, [r3, #0]
 80189f2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80189f6:	2b00      	cmp	r3, #0
 80189f8:	d047      	beq.n	8018a8a <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch (PeriphClkInit->Sai2ClockSelection)
 80189fa:	687b      	ldr	r3, [r7, #4]
 80189fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80189fe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8018a02:	d030      	beq.n	8018a66 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8018a04:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8018a08:	d82a      	bhi.n	8018a60 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8018a0a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8018a0e:	d02a      	beq.n	8018a66 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8018a10:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8018a14:	d824      	bhi.n	8018a60 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8018a16:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8018a1a:	d008      	beq.n	8018a2e <HAL_RCCEx_PeriphCLKConfig+0xde>
 8018a1c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8018a20:	d81e      	bhi.n	8018a60 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8018a22:	2b00      	cmp	r3, #0
 8018a24:	d00a      	beq.n	8018a3c <HAL_RCCEx_PeriphCLKConfig+0xec>
 8018a26:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8018a2a:	d010      	beq.n	8018a4e <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8018a2c:	e018      	b.n	8018a60 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
      case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8018a2e:	4b68      	ldr	r3, [pc, #416]	; (8018bd0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8018a30:	68db      	ldr	r3, [r3, #12]
 8018a32:	4a67      	ldr	r2, [pc, #412]	; (8018bd0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8018a34:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8018a38:	60d3      	str	r3, [r2, #12]
        /* SAI2 clock source config set later after clock selection check */
        break;
 8018a3a:	e015      	b.n	8018a68 <HAL_RCCEx_PeriphCLKConfig+0x118>

      case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
        /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8018a3c:	687b      	ldr	r3, [r7, #4]
 8018a3e:	3304      	adds	r3, #4
 8018a40:	2100      	movs	r1, #0
 8018a42:	4618      	mov	r0, r3
 8018a44:	f000 fb08 	bl	8019058 <RCCEx_PLLSAI1_Config>
 8018a48:	4603      	mov	r3, r0
 8018a4a:	77fb      	strb	r3, [r7, #31]
        /* SAI2 clock source config set later after clock selection check */
        break;
 8018a4c:	e00c      	b.n	8018a68 <HAL_RCCEx_PeriphCLKConfig+0x118>

      case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
        /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
        ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8018a4e:	687b      	ldr	r3, [r7, #4]
 8018a50:	3320      	adds	r3, #32
 8018a52:	2100      	movs	r1, #0
 8018a54:	4618      	mov	r0, r3
 8018a56:	f000 fbe5 	bl	8019224 <RCCEx_PLLSAI2_Config>
 8018a5a:	4603      	mov	r3, r0
 8018a5c:	77fb      	strb	r3, [r7, #31]
        /* SAI2 clock source config set later after clock selection check */
        break;
 8018a5e:	e003      	b.n	8018a68 <HAL_RCCEx_PeriphCLKConfig+0x118>
      case RCC_SAI2CLKSOURCE_HSI:      /* HSI is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8018a60:	2301      	movs	r3, #1
 8018a62:	77fb      	strb	r3, [r7, #31]
        break;
 8018a64:	e000      	b.n	8018a68 <HAL_RCCEx_PeriphCLKConfig+0x118>
        break;
 8018a66:	bf00      	nop
    }

    if (ret == HAL_OK)
 8018a68:	7ffb      	ldrb	r3, [r7, #31]
 8018a6a:	2b00      	cmp	r3, #0
 8018a6c:	d10b      	bne.n	8018a86 <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8018a6e:	4b58      	ldr	r3, [pc, #352]	; (8018bd0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8018a70:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8018a74:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8018a78:	687b      	ldr	r3, [r7, #4]
 8018a7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8018a7c:	4954      	ldr	r1, [pc, #336]	; (8018bd0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8018a7e:	4313      	orrs	r3, r2
 8018a80:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8018a84:	e001      	b.n	8018a8a <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8018a86:	7ffb      	ldrb	r3, [r7, #31]
 8018a88:	77bb      	strb	r3, [r7, #30]
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8018a8a:	687b      	ldr	r3, [r7, #4]
 8018a8c:	681b      	ldr	r3, [r3, #0]
 8018a8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8018a92:	2b00      	cmp	r3, #0
 8018a94:	f000 80ab 	beq.w	8018bee <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8018a98:	2300      	movs	r3, #0
 8018a9a:	75fb      	strb	r3, [r7, #23]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8018a9c:	4b4c      	ldr	r3, [pc, #304]	; (8018bd0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8018a9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8018aa0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8018aa4:	2b00      	cmp	r3, #0
 8018aa6:	d10d      	bne.n	8018ac4 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8018aa8:	4b49      	ldr	r3, [pc, #292]	; (8018bd0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8018aaa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8018aac:	4a48      	ldr	r2, [pc, #288]	; (8018bd0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8018aae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8018ab2:	6593      	str	r3, [r2, #88]	; 0x58
 8018ab4:	4b46      	ldr	r3, [pc, #280]	; (8018bd0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8018ab6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8018ab8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8018abc:	60fb      	str	r3, [r7, #12]
 8018abe:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8018ac0:	2301      	movs	r3, #1
 8018ac2:	75fb      	strb	r3, [r7, #23]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8018ac4:	4b43      	ldr	r3, [pc, #268]	; (8018bd4 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8018ac6:	681b      	ldr	r3, [r3, #0]
 8018ac8:	4a42      	ldr	r2, [pc, #264]	; (8018bd4 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8018aca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8018ace:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8018ad0:	f7fb fd3e 	bl	8014550 <HAL_GetTick>
 8018ad4:	6138      	str	r0, [r7, #16]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8018ad6:	e00f      	b.n	8018af8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8018ad8:	f7fb fd3a 	bl	8014550 <HAL_GetTick>
 8018adc:	4602      	mov	r2, r0
 8018ade:	693b      	ldr	r3, [r7, #16]
 8018ae0:	1ad3      	subs	r3, r2, r3
 8018ae2:	2b02      	cmp	r3, #2
 8018ae4:	d908      	bls.n	8018af8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8018ae6:	4b3b      	ldr	r3, [pc, #236]	; (8018bd4 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8018ae8:	681b      	ldr	r3, [r3, #0]
 8018aea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8018aee:	2b00      	cmp	r3, #0
 8018af0:	d109      	bne.n	8018b06 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
        {
          ret = HAL_TIMEOUT;
 8018af2:	2303      	movs	r3, #3
 8018af4:	77fb      	strb	r3, [r7, #31]
        }
        break;
 8018af6:	e006      	b.n	8018b06 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8018af8:	4b36      	ldr	r3, [pc, #216]	; (8018bd4 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8018afa:	681b      	ldr	r3, [r3, #0]
 8018afc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8018b00:	2b00      	cmp	r3, #0
 8018b02:	d0e9      	beq.n	8018ad8 <HAL_RCCEx_PeriphCLKConfig+0x188>
 8018b04:	e000      	b.n	8018b08 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
        break;
 8018b06:	bf00      	nop
      }
    }

    if (ret == HAL_OK)
 8018b08:	7ffb      	ldrb	r3, [r7, #31]
 8018b0a:	2b00      	cmp	r3, #0
 8018b0c:	d164      	bne.n	8018bd8 <HAL_RCCEx_PeriphCLKConfig+0x288>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8018b0e:	4b30      	ldr	r3, [pc, #192]	; (8018bd0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8018b10:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8018b14:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8018b18:	61bb      	str	r3, [r7, #24]

      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8018b1a:	69bb      	ldr	r3, [r7, #24]
 8018b1c:	2b00      	cmp	r3, #0
 8018b1e:	d01f      	beq.n	8018b60 <HAL_RCCEx_PeriphCLKConfig+0x210>
 8018b20:	687b      	ldr	r3, [r7, #4]
 8018b22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8018b26:	69ba      	ldr	r2, [r7, #24]
 8018b28:	429a      	cmp	r2, r3
 8018b2a:	d019      	beq.n	8018b60 <HAL_RCCEx_PeriphCLKConfig+0x210>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8018b2c:	4b28      	ldr	r3, [pc, #160]	; (8018bd0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8018b2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8018b32:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8018b36:	61bb      	str	r3, [r7, #24]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8018b38:	4b25      	ldr	r3, [pc, #148]	; (8018bd0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8018b3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8018b3e:	4a24      	ldr	r2, [pc, #144]	; (8018bd0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8018b40:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8018b44:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8018b48:	4b21      	ldr	r3, [pc, #132]	; (8018bd0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8018b4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8018b4e:	4a20      	ldr	r2, [pc, #128]	; (8018bd0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8018b50:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8018b54:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8018b58:	4a1d      	ldr	r2, [pc, #116]	; (8018bd0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8018b5a:	69bb      	ldr	r3, [r7, #24]
 8018b5c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8018b60:	69bb      	ldr	r3, [r7, #24]
 8018b62:	f003 0301 	and.w	r3, r3, #1
 8018b66:	2b00      	cmp	r3, #0
 8018b68:	d01f      	beq.n	8018baa <HAL_RCCEx_PeriphCLKConfig+0x25a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8018b6a:	f7fb fcf1 	bl	8014550 <HAL_GetTick>
 8018b6e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8018b70:	e012      	b.n	8018b98 <HAL_RCCEx_PeriphCLKConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8018b72:	f7fb fced 	bl	8014550 <HAL_GetTick>
 8018b76:	4602      	mov	r2, r0
 8018b78:	693b      	ldr	r3, [r7, #16]
 8018b7a:	1ad3      	subs	r3, r2, r3
 8018b7c:	f241 3288 	movw	r2, #5000	; 0x1388
 8018b80:	4293      	cmp	r3, r2
 8018b82:	d909      	bls.n	8018b98 <HAL_RCCEx_PeriphCLKConfig+0x248>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8018b84:	4b12      	ldr	r3, [pc, #72]	; (8018bd0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8018b86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8018b8a:	f003 0302 	and.w	r3, r3, #2
 8018b8e:	2b00      	cmp	r3, #0
 8018b90:	d10a      	bne.n	8018ba8 <HAL_RCCEx_PeriphCLKConfig+0x258>
            {
              ret = HAL_TIMEOUT;
 8018b92:	2303      	movs	r3, #3
 8018b94:	77fb      	strb	r3, [r7, #31]
            }
            break;
 8018b96:	e007      	b.n	8018ba8 <HAL_RCCEx_PeriphCLKConfig+0x258>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8018b98:	4b0d      	ldr	r3, [pc, #52]	; (8018bd0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8018b9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8018b9e:	f003 0302 	and.w	r3, r3, #2
 8018ba2:	2b00      	cmp	r3, #0
 8018ba4:	d0e5      	beq.n	8018b72 <HAL_RCCEx_PeriphCLKConfig+0x222>
 8018ba6:	e000      	b.n	8018baa <HAL_RCCEx_PeriphCLKConfig+0x25a>
            break;
 8018ba8:	bf00      	nop
          }
        }
      }

      if (ret == HAL_OK)
 8018baa:	7ffb      	ldrb	r3, [r7, #31]
 8018bac:	2b00      	cmp	r3, #0
 8018bae:	d10c      	bne.n	8018bca <HAL_RCCEx_PeriphCLKConfig+0x27a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8018bb0:	4b07      	ldr	r3, [pc, #28]	; (8018bd0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8018bb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8018bb6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8018bba:	687b      	ldr	r3, [r7, #4]
 8018bbc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8018bc0:	4903      	ldr	r1, [pc, #12]	; (8018bd0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8018bc2:	4313      	orrs	r3, r2
 8018bc4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8018bc8:	e008      	b.n	8018bdc <HAL_RCCEx_PeriphCLKConfig+0x28c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8018bca:	7ffb      	ldrb	r3, [r7, #31]
 8018bcc:	77bb      	strb	r3, [r7, #30]
 8018bce:	e005      	b.n	8018bdc <HAL_RCCEx_PeriphCLKConfig+0x28c>
 8018bd0:	40021000 	.word	0x40021000
 8018bd4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8018bd8:	7ffb      	ldrb	r3, [r7, #31]
 8018bda:	77bb      	strb	r3, [r7, #30]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8018bdc:	7dfb      	ldrb	r3, [r7, #23]
 8018bde:	2b01      	cmp	r3, #1
 8018be0:	d105      	bne.n	8018bee <HAL_RCCEx_PeriphCLKConfig+0x29e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8018be2:	4b9c      	ldr	r3, [pc, #624]	; (8018e54 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8018be4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8018be6:	4a9b      	ldr	r2, [pc, #620]	; (8018e54 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8018be8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8018bec:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8018bee:	687b      	ldr	r3, [r7, #4]
 8018bf0:	681b      	ldr	r3, [r3, #0]
 8018bf2:	f003 0301 	and.w	r3, r3, #1
 8018bf6:	2b00      	cmp	r3, #0
 8018bf8:	d00a      	beq.n	8018c10 <HAL_RCCEx_PeriphCLKConfig+0x2c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8018bfa:	4b96      	ldr	r3, [pc, #600]	; (8018e54 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8018bfc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8018c00:	f023 0203 	bic.w	r2, r3, #3
 8018c04:	687b      	ldr	r3, [r7, #4]
 8018c06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8018c08:	4992      	ldr	r1, [pc, #584]	; (8018e54 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8018c0a:	4313      	orrs	r3, r2
 8018c0c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8018c10:	687b      	ldr	r3, [r7, #4]
 8018c12:	681b      	ldr	r3, [r3, #0]
 8018c14:	f003 0302 	and.w	r3, r3, #2
 8018c18:	2b00      	cmp	r3, #0
 8018c1a:	d00a      	beq.n	8018c32 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8018c1c:	4b8d      	ldr	r3, [pc, #564]	; (8018e54 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8018c1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8018c22:	f023 020c 	bic.w	r2, r3, #12
 8018c26:	687b      	ldr	r3, [r7, #4]
 8018c28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8018c2a:	498a      	ldr	r1, [pc, #552]	; (8018e54 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8018c2c:	4313      	orrs	r3, r2
 8018c2e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8018c32:	687b      	ldr	r3, [r7, #4]
 8018c34:	681b      	ldr	r3, [r3, #0]
 8018c36:	f003 0304 	and.w	r3, r3, #4
 8018c3a:	2b00      	cmp	r3, #0
 8018c3c:	d00a      	beq.n	8018c54 <HAL_RCCEx_PeriphCLKConfig+0x304>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8018c3e:	4b85      	ldr	r3, [pc, #532]	; (8018e54 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8018c40:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8018c44:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8018c48:	687b      	ldr	r3, [r7, #4]
 8018c4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8018c4c:	4981      	ldr	r1, [pc, #516]	; (8018e54 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8018c4e:	4313      	orrs	r3, r2
 8018c50:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8018c54:	687b      	ldr	r3, [r7, #4]
 8018c56:	681b      	ldr	r3, [r3, #0]
 8018c58:	f003 0308 	and.w	r3, r3, #8
 8018c5c:	2b00      	cmp	r3, #0
 8018c5e:	d00a      	beq.n	8018c76 <HAL_RCCEx_PeriphCLKConfig+0x326>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8018c60:	4b7c      	ldr	r3, [pc, #496]	; (8018e54 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8018c62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8018c66:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8018c6a:	687b      	ldr	r3, [r7, #4]
 8018c6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018c6e:	4979      	ldr	r1, [pc, #484]	; (8018e54 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8018c70:	4313      	orrs	r3, r2
 8018c72:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8018c76:	687b      	ldr	r3, [r7, #4]
 8018c78:	681b      	ldr	r3, [r3, #0]
 8018c7a:	f003 0310 	and.w	r3, r3, #16
 8018c7e:	2b00      	cmp	r3, #0
 8018c80:	d00a      	beq.n	8018c98 <HAL_RCCEx_PeriphCLKConfig+0x348>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8018c82:	4b74      	ldr	r3, [pc, #464]	; (8018e54 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8018c84:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8018c88:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8018c8c:	687b      	ldr	r3, [r7, #4]
 8018c8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8018c90:	4970      	ldr	r1, [pc, #448]	; (8018e54 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8018c92:	4313      	orrs	r3, r2
 8018c94:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8018c98:	687b      	ldr	r3, [r7, #4]
 8018c9a:	681b      	ldr	r3, [r3, #0]
 8018c9c:	f003 0320 	and.w	r3, r3, #32
 8018ca0:	2b00      	cmp	r3, #0
 8018ca2:	d00a      	beq.n	8018cba <HAL_RCCEx_PeriphCLKConfig+0x36a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8018ca4:	4b6b      	ldr	r3, [pc, #428]	; (8018e54 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8018ca6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8018caa:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8018cae:	687b      	ldr	r3, [r7, #4]
 8018cb0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8018cb2:	4968      	ldr	r1, [pc, #416]	; (8018e54 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8018cb4:	4313      	orrs	r3, r2
 8018cb6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8018cba:	687b      	ldr	r3, [r7, #4]
 8018cbc:	681b      	ldr	r3, [r3, #0]
 8018cbe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8018cc2:	2b00      	cmp	r3, #0
 8018cc4:	d00a      	beq.n	8018cdc <HAL_RCCEx_PeriphCLKConfig+0x38c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8018cc6:	4b63      	ldr	r3, [pc, #396]	; (8018e54 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8018cc8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8018ccc:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8018cd0:	687b      	ldr	r3, [r7, #4]
 8018cd2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8018cd4:	495f      	ldr	r1, [pc, #380]	; (8018e54 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8018cd6:	4313      	orrs	r3, r2
 8018cd8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8018cdc:	687b      	ldr	r3, [r7, #4]
 8018cde:	681b      	ldr	r3, [r3, #0]
 8018ce0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8018ce4:	2b00      	cmp	r3, #0
 8018ce6:	d00a      	beq.n	8018cfe <HAL_RCCEx_PeriphCLKConfig+0x3ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8018ce8:	4b5a      	ldr	r3, [pc, #360]	; (8018e54 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8018cea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8018cee:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8018cf2:	687b      	ldr	r3, [r7, #4]
 8018cf4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8018cf6:	4957      	ldr	r1, [pc, #348]	; (8018e54 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8018cf8:	4313      	orrs	r3, r2
 8018cfa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 8018cfe:	687b      	ldr	r3, [r7, #4]
 8018d00:	681b      	ldr	r3, [r3, #0]
 8018d02:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8018d06:	2b00      	cmp	r3, #0
 8018d08:	d00a      	beq.n	8018d20 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLK(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 8018d0a:	4b52      	ldr	r3, [pc, #328]	; (8018e54 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8018d0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8018d10:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8018d14:	687b      	ldr	r3, [r7, #4]
 8018d16:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8018d18:	494e      	ldr	r1, [pc, #312]	; (8018e54 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8018d1a:	4313      	orrs	r3, r2
 8018d1c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- FDCAN kernel clock source configuration -------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == (RCC_PERIPHCLK_FDCAN))
 8018d20:	687b      	ldr	r3, [r7, #4]
 8018d22:	681b      	ldr	r3, [r3, #0]
 8018d24:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8018d28:	2b00      	cmp	r3, #0
 8018d2a:	d031      	beq.n	8018d90 <HAL_RCCEx_PeriphCLKConfig+0x440>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLK(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN kernel clock source */
    switch (PeriphClkInit->FdcanClockSelection)
 8018d2c:	687b      	ldr	r3, [r7, #4]
 8018d2e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8018d30:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8018d34:	d00e      	beq.n	8018d54 <HAL_RCCEx_PeriphCLKConfig+0x404>
 8018d36:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8018d3a:	d814      	bhi.n	8018d66 <HAL_RCCEx_PeriphCLKConfig+0x416>
 8018d3c:	2b00      	cmp	r3, #0
 8018d3e:	d015      	beq.n	8018d6c <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8018d40:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8018d44:	d10f      	bne.n	8018d66 <HAL_RCCEx_PeriphCLKConfig+0x416>
        /* FDCAN kernel clock source config set later after clock selection check */
        break;

      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN kernel clock*/
        /* Enable PLL48M1CLK output clock generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8018d46:	4b43      	ldr	r3, [pc, #268]	; (8018e54 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8018d48:	68db      	ldr	r3, [r3, #12]
 8018d4a:	4a42      	ldr	r2, [pc, #264]	; (8018e54 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8018d4c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8018d50:	60d3      	str	r3, [r2, #12]
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 8018d52:	e00c      	b.n	8018d6e <HAL_RCCEx_PeriphCLKConfig+0x41e>

      case RCC_FDCANCLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for FDCAN kernel clock*/
        /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8018d54:	687b      	ldr	r3, [r7, #4]
 8018d56:	3304      	adds	r3, #4
 8018d58:	2100      	movs	r1, #0
 8018d5a:	4618      	mov	r0, r3
 8018d5c:	f000 f97c 	bl	8019058 <RCCEx_PLLSAI1_Config>
 8018d60:	4603      	mov	r3, r0
 8018d62:	77fb      	strb	r3, [r7, #31]
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 8018d64:	e003      	b.n	8018d6e <HAL_RCCEx_PeriphCLKConfig+0x41e>

      default:
        ret = HAL_ERROR;
 8018d66:	2301      	movs	r3, #1
 8018d68:	77fb      	strb	r3, [r7, #31]
        break;
 8018d6a:	e000      	b.n	8018d6e <HAL_RCCEx_PeriphCLKConfig+0x41e>
        break;
 8018d6c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8018d6e:	7ffb      	ldrb	r3, [r7, #31]
 8018d70:	2b00      	cmp	r3, #0
 8018d72:	d10b      	bne.n	8018d8c <HAL_RCCEx_PeriphCLKConfig+0x43c>
    {
      /* Set the source of FDCAN kernel clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8018d74:	4b37      	ldr	r3, [pc, #220]	; (8018e54 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8018d76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8018d7a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8018d7e:	687b      	ldr	r3, [r7, #4]
 8018d80:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8018d82:	4934      	ldr	r1, [pc, #208]	; (8018e54 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8018d84:	4313      	orrs	r3, r2
 8018d86:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8018d8a:	e001      	b.n	8018d90 <HAL_RCCEx_PeriphCLKConfig+0x440>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8018d8c:	7ffb      	ldrb	r3, [r7, #31]
 8018d8e:	77bb      	strb	r3, [r7, #30]
    }
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8018d90:	687b      	ldr	r3, [r7, #4]
 8018d92:	681b      	ldr	r3, [r3, #0]
 8018d94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8018d98:	2b00      	cmp	r3, #0
 8018d9a:	d00a      	beq.n	8018db2 <HAL_RCCEx_PeriphCLKConfig+0x462>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8018d9c:	4b2d      	ldr	r3, [pc, #180]	; (8018e54 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8018d9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8018da2:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8018da6:	687b      	ldr	r3, [r7, #4]
 8018da8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8018daa:	492a      	ldr	r1, [pc, #168]	; (8018e54 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8018dac:	4313      	orrs	r3, r2
 8018dae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8018db2:	687b      	ldr	r3, [r7, #4]
 8018db4:	681b      	ldr	r3, [r3, #0]
 8018db6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8018dba:	2b00      	cmp	r3, #0
 8018dbc:	d00a      	beq.n	8018dd4 <HAL_RCCEx_PeriphCLKConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8018dbe:	4b25      	ldr	r3, [pc, #148]	; (8018e54 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8018dc0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8018dc4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8018dc8:	687b      	ldr	r3, [r7, #4]
 8018dca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8018dcc:	4921      	ldr	r1, [pc, #132]	; (8018e54 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8018dce:	4313      	orrs	r3, r2
 8018dd0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8018dd4:	687b      	ldr	r3, [r7, #4]
 8018dd6:	681b      	ldr	r3, [r3, #0]
 8018dd8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8018ddc:	2b00      	cmp	r3, #0
 8018dde:	d00a      	beq.n	8018df6 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8018de0:	4b1c      	ldr	r3, [pc, #112]	; (8018e54 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8018de2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8018de6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8018dea:	687b      	ldr	r3, [r7, #4]
 8018dec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8018dee:	4919      	ldr	r1, [pc, #100]	; (8018e54 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8018df0:	4313      	orrs	r3, r2
 8018df2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8018df6:	687b      	ldr	r3, [r7, #4]
 8018df8:	681b      	ldr	r3, [r3, #0]
 8018dfa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8018dfe:	2b00      	cmp	r3, #0
 8018e00:	d00a      	beq.n	8018e18 <HAL_RCCEx_PeriphCLKConfig+0x4c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8018e02:	4b14      	ldr	r3, [pc, #80]	; (8018e54 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8018e04:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8018e08:	f023 0203 	bic.w	r2, r3, #3
 8018e0c:	687b      	ldr	r3, [r7, #4]
 8018e0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8018e10:	4910      	ldr	r1, [pc, #64]	; (8018e54 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8018e12:	4313      	orrs	r3, r2
 8018e14:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8018e18:	687b      	ldr	r3, [r7, #4]
 8018e1a:	681b      	ldr	r3, [r3, #0]
 8018e1c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8018e20:	2b00      	cmp	r3, #0
 8018e22:	d02b      	beq.n	8018e7c <HAL_RCCEx_PeriphCLKConfig+0x52c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8018e24:	4b0b      	ldr	r3, [pc, #44]	; (8018e54 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8018e26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8018e2a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8018e2e:	687b      	ldr	r3, [r7, #4]
 8018e30:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8018e32:	4908      	ldr	r1, [pc, #32]	; (8018e54 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8018e34:	4313      	orrs	r3, r2
 8018e36:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8018e3a:	687b      	ldr	r3, [r7, #4]
 8018e3c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8018e3e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8018e42:	d109      	bne.n	8018e58 <HAL_RCCEx_PeriphCLKConfig+0x508>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8018e44:	4b03      	ldr	r3, [pc, #12]	; (8018e54 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8018e46:	68db      	ldr	r3, [r3, #12]
 8018e48:	4a02      	ldr	r2, [pc, #8]	; (8018e54 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8018e4a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8018e4e:	60d3      	str	r3, [r2, #12]
 8018e50:	e014      	b.n	8018e7c <HAL_RCCEx_PeriphCLKConfig+0x52c>
 8018e52:	bf00      	nop
 8018e54:	40021000 	.word	0x40021000
    }
    else
    {
      if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8018e58:	687b      	ldr	r3, [r7, #4]
 8018e5a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8018e5c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8018e60:	d10c      	bne.n	8018e7c <HAL_RCCEx_PeriphCLKConfig+0x52c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8018e62:	687b      	ldr	r3, [r7, #4]
 8018e64:	3304      	adds	r3, #4
 8018e66:	2101      	movs	r1, #1
 8018e68:	4618      	mov	r0, r3
 8018e6a:	f000 f8f5 	bl	8019058 <RCCEx_PLLSAI1_Config>
 8018e6e:	4603      	mov	r3, r0
 8018e70:	77fb      	strb	r3, [r7, #31]

        if (ret != HAL_OK)
 8018e72:	7ffb      	ldrb	r3, [r7, #31]
 8018e74:	2b00      	cmp	r3, #0
 8018e76:	d001      	beq.n	8018e7c <HAL_RCCEx_PeriphCLKConfig+0x52c>
        {
          /* set overall return value */
          status = ret;
 8018e78:	7ffb      	ldrb	r3, [r7, #31]
 8018e7a:	77bb      	strb	r3, [r7, #30]
  }

#endif /* USB */

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8018e7c:	687b      	ldr	r3, [r7, #4]
 8018e7e:	681b      	ldr	r3, [r3, #0]
 8018e80:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8018e84:	2b00      	cmp	r3, #0
 8018e86:	d04a      	beq.n	8018f1e <HAL_RCCEx_PeriphCLKConfig+0x5ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8018e88:	687b      	ldr	r3, [r7, #4]
 8018e8a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8018e8c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8018e90:	d108      	bne.n	8018ea4 <HAL_RCCEx_PeriphCLKConfig+0x554>
 8018e92:	4b70      	ldr	r3, [pc, #448]	; (8019054 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8018e94:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8018e98:	4a6e      	ldr	r2, [pc, #440]	; (8019054 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8018e9a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8018e9e:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8018ea2:	e012      	b.n	8018eca <HAL_RCCEx_PeriphCLKConfig+0x57a>
 8018ea4:	4b6b      	ldr	r3, [pc, #428]	; (8019054 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8018ea6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8018eaa:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8018eae:	687b      	ldr	r3, [r7, #4]
 8018eb0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8018eb2:	4968      	ldr	r1, [pc, #416]	; (8019054 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8018eb4:	4313      	orrs	r3, r2
 8018eb6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8018eba:	4b66      	ldr	r3, [pc, #408]	; (8019054 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8018ebc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8018ec0:	4a64      	ldr	r2, [pc, #400]	; (8019054 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8018ec2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8018ec6:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c

    if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8018eca:	687b      	ldr	r3, [r7, #4]
 8018ecc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8018ece:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8018ed2:	d10d      	bne.n	8018ef0 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8018ed4:	687b      	ldr	r3, [r7, #4]
 8018ed6:	3304      	adds	r3, #4
 8018ed8:	2101      	movs	r1, #1
 8018eda:	4618      	mov	r0, r3
 8018edc:	f000 f8bc 	bl	8019058 <RCCEx_PLLSAI1_Config>
 8018ee0:	4603      	mov	r3, r0
 8018ee2:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8018ee4:	7ffb      	ldrb	r3, [r7, #31]
 8018ee6:	2b00      	cmp	r3, #0
 8018ee8:	d019      	beq.n	8018f1e <HAL_RCCEx_PeriphCLKConfig+0x5ce>
      {
        /* set overall return value */
        status = ret;
 8018eea:	7ffb      	ldrb	r3, [r7, #31]
 8018eec:	77bb      	strb	r3, [r7, #30]
 8018eee:	e016      	b.n	8018f1e <HAL_RCCEx_PeriphCLKConfig+0x5ce>
      }
    }
    else if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)
 8018ef0:	687b      	ldr	r3, [r7, #4]
 8018ef2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8018ef4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8018ef8:	d106      	bne.n	8018f08 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8018efa:	4b56      	ldr	r3, [pc, #344]	; (8019054 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8018efc:	68db      	ldr	r3, [r3, #12]
 8018efe:	4a55      	ldr	r2, [pc, #340]	; (8019054 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8018f00:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8018f04:	60d3      	str	r3, [r2, #12]
 8018f06:	e00a      	b.n	8018f1e <HAL_RCCEx_PeriphCLKConfig+0x5ce>
    }
    else if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP)
 8018f08:	687b      	ldr	r3, [r7, #4]
 8018f0a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8018f0c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8018f10:	d105      	bne.n	8018f1e <HAL_RCCEx_PeriphCLKConfig+0x5ce>
    {
      /* Enable PLLSAI3CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8018f12:	4b50      	ldr	r3, [pc, #320]	; (8019054 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8018f14:	68db      	ldr	r3, [r3, #12]
 8018f16:	4a4f      	ldr	r2, [pc, #316]	; (8019054 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8018f18:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8018f1c:	60d3      	str	r3, [r2, #12]
      /* Nothing to do */
    }
  }

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8018f1e:	687b      	ldr	r3, [r7, #4]
 8018f20:	681b      	ldr	r3, [r3, #0]
 8018f22:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8018f26:	2b00      	cmp	r3, #0
 8018f28:	d028      	beq.n	8018f7c <HAL_RCCEx_PeriphCLKConfig+0x62c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8018f2a:	4b4a      	ldr	r3, [pc, #296]	; (8019054 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8018f2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8018f30:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8018f34:	687b      	ldr	r3, [r7, #4]
 8018f36:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8018f38:	4946      	ldr	r1, [pc, #280]	; (8019054 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8018f3a:	4313      	orrs	r3, r2
 8018f3c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8018f40:	687b      	ldr	r3, [r7, #4]
 8018f42:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8018f44:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8018f48:	d106      	bne.n	8018f58 <HAL_RCCEx_PeriphCLKConfig+0x608>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8018f4a:	4b42      	ldr	r3, [pc, #264]	; (8019054 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8018f4c:	68db      	ldr	r3, [r3, #12]
 8018f4e:	4a41      	ldr	r2, [pc, #260]	; (8019054 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8018f50:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8018f54:	60d3      	str	r3, [r2, #12]
 8018f56:	e011      	b.n	8018f7c <HAL_RCCEx_PeriphCLKConfig+0x62c>
    }
    else if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8018f58:	687b      	ldr	r3, [r7, #4]
 8018f5a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8018f5c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8018f60:	d10c      	bne.n	8018f7c <HAL_RCCEx_PeriphCLKConfig+0x62c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8018f62:	687b      	ldr	r3, [r7, #4]
 8018f64:	3304      	adds	r3, #4
 8018f66:	2101      	movs	r1, #1
 8018f68:	4618      	mov	r0, r3
 8018f6a:	f000 f875 	bl	8019058 <RCCEx_PLLSAI1_Config>
 8018f6e:	4603      	mov	r3, r0
 8018f70:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8018f72:	7ffb      	ldrb	r3, [r7, #31]
 8018f74:	2b00      	cmp	r3, #0
 8018f76:	d001      	beq.n	8018f7c <HAL_RCCEx_PeriphCLKConfig+0x62c>
      {
        /* set overall return value */
        status = ret;
 8018f78:	7ffb      	ldrb	r3, [r7, #31]
 8018f7a:	77bb      	strb	r3, [r7, #30]
      /* Nothing to do */
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8018f7c:	687b      	ldr	r3, [r7, #4]
 8018f7e:	681b      	ldr	r3, [r3, #0]
 8018f80:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8018f84:	2b00      	cmp	r3, #0
 8018f86:	d01e      	beq.n	8018fc6 <HAL_RCCEx_PeriphCLKConfig+0x676>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8018f88:	4b32      	ldr	r3, [pc, #200]	; (8019054 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8018f8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8018f8e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8018f92:	687b      	ldr	r3, [r7, #4]
 8018f94:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8018f98:	492e      	ldr	r1, [pc, #184]	; (8019054 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8018f9a:	4313      	orrs	r3, r2
 8018f9c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8018fa0:	687b      	ldr	r3, [r7, #4]
 8018fa2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8018fa6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8018faa:	d10c      	bne.n	8018fc6 <HAL_RCCEx_PeriphCLKConfig+0x676>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8018fac:	687b      	ldr	r3, [r7, #4]
 8018fae:	3304      	adds	r3, #4
 8018fb0:	2102      	movs	r1, #2
 8018fb2:	4618      	mov	r0, r3
 8018fb4:	f000 f850 	bl	8019058 <RCCEx_PLLSAI1_Config>
 8018fb8:	4603      	mov	r3, r0
 8018fba:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8018fbc:	7ffb      	ldrb	r3, [r7, #31]
 8018fbe:	2b00      	cmp	r3, #0
 8018fc0:	d001      	beq.n	8018fc6 <HAL_RCCEx_PeriphCLKConfig+0x676>
      {
        /* set overall return value */
        status = ret;
 8018fc2:	7ffb      	ldrb	r3, [r7, #31]
 8018fc4:	77bb      	strb	r3, [r7, #30]
      }
    }
  }

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8018fc6:	687b      	ldr	r3, [r7, #4]
 8018fc8:	681b      	ldr	r3, [r3, #0]
 8018fca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8018fce:	2b00      	cmp	r3, #0
 8018fd0:	d00b      	beq.n	8018fea <HAL_RCCEx_PeriphCLKConfig+0x69a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8018fd2:	4b20      	ldr	r3, [pc, #128]	; (8019054 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8018fd4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8018fd8:	f023 0204 	bic.w	r2, r3, #4
 8018fdc:	687b      	ldr	r3, [r7, #4]
 8018fde:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8018fe2:	491c      	ldr	r1, [pc, #112]	; (8019054 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8018fe4:	4313      	orrs	r3, r2
 8018fe6:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8018fea:	687b      	ldr	r3, [r7, #4]
 8018fec:	681b      	ldr	r3, [r3, #0]
 8018fee:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8018ff2:	2b00      	cmp	r3, #0
 8018ff4:	d00b      	beq.n	801900e <HAL_RCCEx_PeriphCLKConfig+0x6be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8018ff6:	4b17      	ldr	r3, [pc, #92]	; (8019054 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8018ff8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8018ffc:	f023 0218 	bic.w	r2, r3, #24
 8019000:	687b      	ldr	r3, [r7, #4]
 8019002:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8019006:	4913      	ldr	r1, [pc, #76]	; (8019054 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8019008:	4313      	orrs	r3, r2
 801900a:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 801900e:	687b      	ldr	r3, [r7, #4]
 8019010:	681b      	ldr	r3, [r3, #0]
 8019012:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8019016:	2b00      	cmp	r3, #0
 8019018:	d017      	beq.n	801904a <HAL_RCCEx_PeriphCLKConfig+0x6fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 801901a:	4b0e      	ldr	r3, [pc, #56]	; (8019054 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 801901c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8019020:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8019024:	687b      	ldr	r3, [r7, #4]
 8019026:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801902a:	490a      	ldr	r1, [pc, #40]	; (8019054 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 801902c:	4313      	orrs	r3, r2
 801902e:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if (PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8019032:	687b      	ldr	r3, [r7, #4]
 8019034:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8019038:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 801903c:	d105      	bne.n	801904a <HAL_RCCEx_PeriphCLKConfig+0x6fa>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 801903e:	4b05      	ldr	r3, [pc, #20]	; (8019054 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8019040:	68db      	ldr	r3, [r3, #12]
 8019042:	4a04      	ldr	r2, [pc, #16]	; (8019054 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8019044:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8019048:	60d3      	str	r3, [r2, #12]
    }
  }

  return status;
 801904a:	7fbb      	ldrb	r3, [r7, #30]
}
 801904c:	4618      	mov	r0, r3
 801904e:	3720      	adds	r7, #32
 8019050:	46bd      	mov	sp, r7
 8019052:	bd80      	pop	{r7, pc}
 8019054:	40021000 	.word	0x40021000

08019058 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *pPllSai1, uint32_t Divider)
{
 8019058:	b580      	push	{r7, lr}
 801905a:	b084      	sub	sp, #16
 801905c:	af00      	add	r7, sp, #0
 801905e:	6078      	str	r0, [r7, #4]
 8019060:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8019062:	2300      	movs	r3, #0
 8019064:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(pPllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(pPllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(pPllSai1->PLLSAI1ClockOut));

  /* Check PLLSAI1 clock source availability */
  switch (pPllSai1->PLLSAI1Source)
 8019066:	687b      	ldr	r3, [r7, #4]
 8019068:	681b      	ldr	r3, [r3, #0]
 801906a:	2b03      	cmp	r3, #3
 801906c:	d018      	beq.n	80190a0 <RCCEx_PLLSAI1_Config+0x48>
 801906e:	2b03      	cmp	r3, #3
 8019070:	d81f      	bhi.n	80190b2 <RCCEx_PLLSAI1_Config+0x5a>
 8019072:	2b01      	cmp	r3, #1
 8019074:	d002      	beq.n	801907c <RCCEx_PLLSAI1_Config+0x24>
 8019076:	2b02      	cmp	r3, #2
 8019078:	d009      	beq.n	801908e <RCCEx_PLLSAI1_Config+0x36>
 801907a:	e01a      	b.n	80190b2 <RCCEx_PLLSAI1_Config+0x5a>
  {
    case RCC_PLLSOURCE_MSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 801907c:	4b65      	ldr	r3, [pc, #404]	; (8019214 <RCCEx_PLLSAI1_Config+0x1bc>)
 801907e:	681b      	ldr	r3, [r3, #0]
 8019080:	f003 0302 	and.w	r3, r3, #2
 8019084:	2b00      	cmp	r3, #0
 8019086:	d117      	bne.n	80190b8 <RCCEx_PLLSAI1_Config+0x60>
      {
        status = HAL_ERROR;
 8019088:	2301      	movs	r3, #1
 801908a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 801908c:	e014      	b.n	80190b8 <RCCEx_PLLSAI1_Config+0x60>
    case RCC_PLLSOURCE_HSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 801908e:	4b61      	ldr	r3, [pc, #388]	; (8019214 <RCCEx_PLLSAI1_Config+0x1bc>)
 8019090:	681b      	ldr	r3, [r3, #0]
 8019092:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8019096:	2b00      	cmp	r3, #0
 8019098:	d110      	bne.n	80190bc <RCCEx_PLLSAI1_Config+0x64>
      {
        status = HAL_ERROR;
 801909a:	2301      	movs	r3, #1
 801909c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 801909e:	e00d      	b.n	80190bc <RCCEx_PLLSAI1_Config+0x64>
    case RCC_PLLSOURCE_HSE:
      if (HAL_IS_BIT_CLR(RCC->CR, (RCC_CR_HSERDY | RCC_CR_HSEBYP)))
 80190a0:	4b5c      	ldr	r3, [pc, #368]	; (8019214 <RCCEx_PLLSAI1_Config+0x1bc>)
 80190a2:	681b      	ldr	r3, [r3, #0]
 80190a4:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 80190a8:	2b00      	cmp	r3, #0
 80190aa:	d109      	bne.n	80190c0 <RCCEx_PLLSAI1_Config+0x68>
      {
        status = HAL_ERROR;
 80190ac:	2301      	movs	r3, #1
 80190ae:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80190b0:	e006      	b.n	80190c0 <RCCEx_PLLSAI1_Config+0x68>
    default:
      status = HAL_ERROR;
 80190b2:	2301      	movs	r3, #1
 80190b4:	73fb      	strb	r3, [r7, #15]
      break;
 80190b6:	e004      	b.n	80190c2 <RCCEx_PLLSAI1_Config+0x6a>
      break;
 80190b8:	bf00      	nop
 80190ba:	e002      	b.n	80190c2 <RCCEx_PLLSAI1_Config+0x6a>
      break;
 80190bc:	bf00      	nop
 80190be:	e000      	b.n	80190c2 <RCCEx_PLLSAI1_Config+0x6a>
      break;
 80190c0:	bf00      	nop
  }

  if (status == HAL_OK)
 80190c2:	7bfb      	ldrb	r3, [r7, #15]
 80190c4:	2b00      	cmp	r3, #0
 80190c6:	f040 809f 	bne.w	8019208 <RCCEx_PLLSAI1_Config+0x1b0>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80190ca:	4b52      	ldr	r3, [pc, #328]	; (8019214 <RCCEx_PLLSAI1_Config+0x1bc>)
 80190cc:	681b      	ldr	r3, [r3, #0]
 80190ce:	4a51      	ldr	r2, [pc, #324]	; (8019214 <RCCEx_PLLSAI1_Config+0x1bc>)
 80190d0:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80190d4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80190d6:	f7fb fa3b 	bl	8014550 <HAL_GetTick>
 80190da:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80190dc:	e00f      	b.n	80190fe <RCCEx_PLLSAI1_Config+0xa6>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80190de:	f7fb fa37 	bl	8014550 <HAL_GetTick>
 80190e2:	4602      	mov	r2, r0
 80190e4:	68bb      	ldr	r3, [r7, #8]
 80190e6:	1ad3      	subs	r3, r2, r3
 80190e8:	2b02      	cmp	r3, #2
 80190ea:	d908      	bls.n	80190fe <RCCEx_PLLSAI1_Config+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80190ec:	4b49      	ldr	r3, [pc, #292]	; (8019214 <RCCEx_PLLSAI1_Config+0x1bc>)
 80190ee:	681b      	ldr	r3, [r3, #0]
 80190f0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80190f4:	2b00      	cmp	r3, #0
 80190f6:	d009      	beq.n	801910c <RCCEx_PLLSAI1_Config+0xb4>
        {
          status = HAL_TIMEOUT;
 80190f8:	2303      	movs	r3, #3
 80190fa:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80190fc:	e006      	b.n	801910c <RCCEx_PLLSAI1_Config+0xb4>
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80190fe:	4b45      	ldr	r3, [pc, #276]	; (8019214 <RCCEx_PLLSAI1_Config+0x1bc>)
 8019100:	681b      	ldr	r3, [r3, #0]
 8019102:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8019106:	2b00      	cmp	r3, #0
 8019108:	d1e9      	bne.n	80190de <RCCEx_PLLSAI1_Config+0x86>
 801910a:	e000      	b.n	801910e <RCCEx_PLLSAI1_Config+0xb6>
        break;
 801910c:	bf00      	nop
      }
    }

    if (status == HAL_OK)
 801910e:	7bfb      	ldrb	r3, [r7, #15]
 8019110:	2b00      	cmp	r3, #0
 8019112:	d179      	bne.n	8019208 <RCCEx_PLLSAI1_Config+0x1b0>
    {
      if (Divider == DIVIDER_P_UPDATE)
 8019114:	683b      	ldr	r3, [r7, #0]
 8019116:	2b00      	cmp	r3, #0
 8019118:	d116      	bne.n	8019148 <RCCEx_PLLSAI1_Config+0xf0>
      {
        assert_param(IS_RCC_PLLSAI1P_VALUE(pPllSai1->PLLSAI1P));

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 801911a:	4b3e      	ldr	r3, [pc, #248]	; (8019214 <RCCEx_PLLSAI1_Config+0x1bc>)
 801911c:	691a      	ldr	r2, [r3, #16]
 801911e:	4b3e      	ldr	r3, [pc, #248]	; (8019218 <RCCEx_PLLSAI1_Config+0x1c0>)
 8019120:	4013      	ands	r3, r2
 8019122:	687a      	ldr	r2, [r7, #4]
 8019124:	6892      	ldr	r2, [r2, #8]
 8019126:	0211      	lsls	r1, r2, #8
 8019128:	687a      	ldr	r2, [r7, #4]
 801912a:	68d2      	ldr	r2, [r2, #12]
 801912c:	06d2      	lsls	r2, r2, #27
 801912e:	4311      	orrs	r1, r2
 8019130:	687a      	ldr	r2, [r7, #4]
 8019132:	6852      	ldr	r2, [r2, #4]
 8019134:	3a01      	subs	r2, #1
 8019136:	0112      	lsls	r2, r2, #4
 8019138:	4311      	orrs	r1, r2
 801913a:	687a      	ldr	r2, [r7, #4]
 801913c:	6812      	ldr	r2, [r2, #0]
 801913e:	430a      	orrs	r2, r1
 8019140:	4934      	ldr	r1, [pc, #208]	; (8019214 <RCCEx_PLLSAI1_Config+0x1bc>)
 8019142:	4313      	orrs	r3, r2
 8019144:	610b      	str	r3, [r1, #16]
 8019146:	e033      	b.n	80191b0 <RCCEx_PLLSAI1_Config+0x158>
                   (pPllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (pPllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos) |
                   ((pPllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos) |
                   pPllSai1->PLLSAI1Source);
      }
      else if (Divider == DIVIDER_Q_UPDATE)
 8019148:	683b      	ldr	r3, [r7, #0]
 801914a:	2b01      	cmp	r3, #1
 801914c:	d118      	bne.n	8019180 <RCCEx_PLLSAI1_Config+0x128>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(pPllSai1->PLLSAI1Q));

        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 801914e:	4b31      	ldr	r3, [pc, #196]	; (8019214 <RCCEx_PLLSAI1_Config+0x1bc>)
 8019150:	691a      	ldr	r2, [r3, #16]
 8019152:	4b32      	ldr	r3, [pc, #200]	; (801921c <RCCEx_PLLSAI1_Config+0x1c4>)
 8019154:	4013      	ands	r3, r2
 8019156:	687a      	ldr	r2, [r7, #4]
 8019158:	6892      	ldr	r2, [r2, #8]
 801915a:	0211      	lsls	r1, r2, #8
 801915c:	687a      	ldr	r2, [r7, #4]
 801915e:	6912      	ldr	r2, [r2, #16]
 8019160:	0852      	lsrs	r2, r2, #1
 8019162:	3a01      	subs	r2, #1
 8019164:	0552      	lsls	r2, r2, #21
 8019166:	4311      	orrs	r1, r2
 8019168:	687a      	ldr	r2, [r7, #4]
 801916a:	6852      	ldr	r2, [r2, #4]
 801916c:	3a01      	subs	r2, #1
 801916e:	0112      	lsls	r2, r2, #4
 8019170:	4311      	orrs	r1, r2
 8019172:	687a      	ldr	r2, [r7, #4]
 8019174:	6812      	ldr	r2, [r2, #0]
 8019176:	430a      	orrs	r2, r1
 8019178:	4926      	ldr	r1, [pc, #152]	; (8019214 <RCCEx_PLLSAI1_Config+0x1bc>)
 801917a:	4313      	orrs	r3, r2
 801917c:	610b      	str	r3, [r1, #16]
 801917e:	e017      	b.n	80191b0 <RCCEx_PLLSAI1_Config+0x158>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(pPllSai1->PLLSAI1R));

        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8019180:	4b24      	ldr	r3, [pc, #144]	; (8019214 <RCCEx_PLLSAI1_Config+0x1bc>)
 8019182:	691a      	ldr	r2, [r3, #16]
 8019184:	4b26      	ldr	r3, [pc, #152]	; (8019220 <RCCEx_PLLSAI1_Config+0x1c8>)
 8019186:	4013      	ands	r3, r2
 8019188:	687a      	ldr	r2, [r7, #4]
 801918a:	6892      	ldr	r2, [r2, #8]
 801918c:	0211      	lsls	r1, r2, #8
 801918e:	687a      	ldr	r2, [r7, #4]
 8019190:	6952      	ldr	r2, [r2, #20]
 8019192:	0852      	lsrs	r2, r2, #1
 8019194:	3a01      	subs	r2, #1
 8019196:	0652      	lsls	r2, r2, #25
 8019198:	4311      	orrs	r1, r2
 801919a:	687a      	ldr	r2, [r7, #4]
 801919c:	6852      	ldr	r2, [r2, #4]
 801919e:	3a01      	subs	r2, #1
 80191a0:	0112      	lsls	r2, r2, #4
 80191a2:	4311      	orrs	r1, r2
 80191a4:	687a      	ldr	r2, [r7, #4]
 80191a6:	6812      	ldr	r2, [r2, #0]
 80191a8:	430a      	orrs	r2, r1
 80191aa:	491a      	ldr	r1, [pc, #104]	; (8019214 <RCCEx_PLLSAI1_Config+0x1bc>)
 80191ac:	4313      	orrs	r3, r2
 80191ae:	610b      	str	r3, [r1, #16]
                   ((pPllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos) |
                   pPllSai1->PLLSAI1Source);
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80191b0:	4b18      	ldr	r3, [pc, #96]	; (8019214 <RCCEx_PLLSAI1_Config+0x1bc>)
 80191b2:	681b      	ldr	r3, [r3, #0]
 80191b4:	4a17      	ldr	r2, [pc, #92]	; (8019214 <RCCEx_PLLSAI1_Config+0x1bc>)
 80191b6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80191ba:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80191bc:	f7fb f9c8 	bl	8014550 <HAL_GetTick>
 80191c0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80191c2:	e00f      	b.n	80191e4 <RCCEx_PLLSAI1_Config+0x18c>
      {
        if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80191c4:	f7fb f9c4 	bl	8014550 <HAL_GetTick>
 80191c8:	4602      	mov	r2, r0
 80191ca:	68bb      	ldr	r3, [r7, #8]
 80191cc:	1ad3      	subs	r3, r2, r3
 80191ce:	2b02      	cmp	r3, #2
 80191d0:	d908      	bls.n	80191e4 <RCCEx_PLLSAI1_Config+0x18c>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80191d2:	4b10      	ldr	r3, [pc, #64]	; (8019214 <RCCEx_PLLSAI1_Config+0x1bc>)
 80191d4:	681b      	ldr	r3, [r3, #0]
 80191d6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80191da:	2b00      	cmp	r3, #0
 80191dc:	d109      	bne.n	80191f2 <RCCEx_PLLSAI1_Config+0x19a>
          {
            status = HAL_TIMEOUT;
 80191de:	2303      	movs	r3, #3
 80191e0:	73fb      	strb	r3, [r7, #15]
          }
          break;
 80191e2:	e006      	b.n	80191f2 <RCCEx_PLLSAI1_Config+0x19a>
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80191e4:	4b0b      	ldr	r3, [pc, #44]	; (8019214 <RCCEx_PLLSAI1_Config+0x1bc>)
 80191e6:	681b      	ldr	r3, [r3, #0]
 80191e8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80191ec:	2b00      	cmp	r3, #0
 80191ee:	d0e9      	beq.n	80191c4 <RCCEx_PLLSAI1_Config+0x16c>
 80191f0:	e000      	b.n	80191f4 <RCCEx_PLLSAI1_Config+0x19c>
          break;
 80191f2:	bf00      	nop
        }
      }

      if (status == HAL_OK)
 80191f4:	7bfb      	ldrb	r3, [r7, #15]
 80191f6:	2b00      	cmp	r3, #0
 80191f8:	d106      	bne.n	8019208 <RCCEx_PLLSAI1_Config+0x1b0>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(pPllSai1->PLLSAI1ClockOut);
 80191fa:	4b06      	ldr	r3, [pc, #24]	; (8019214 <RCCEx_PLLSAI1_Config+0x1bc>)
 80191fc:	691a      	ldr	r2, [r3, #16]
 80191fe:	687b      	ldr	r3, [r7, #4]
 8019200:	699b      	ldr	r3, [r3, #24]
 8019202:	4904      	ldr	r1, [pc, #16]	; (8019214 <RCCEx_PLLSAI1_Config+0x1bc>)
 8019204:	4313      	orrs	r3, r2
 8019206:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8019208:	7bfb      	ldrb	r3, [r7, #15]
}
 801920a:	4618      	mov	r0, r3
 801920c:	3710      	adds	r7, #16
 801920e:	46bd      	mov	sp, r7
 8019210:	bd80      	pop	{r7, pc}
 8019212:	bf00      	nop
 8019214:	40021000 	.word	0x40021000
 8019218:	07ff800c 	.word	0x07ff800c
 801921c:	ff9f800c 	.word	0xff9f800c
 8019220:	f9ff800c 	.word	0xf9ff800c

08019224 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *pPllSai2, uint32_t Divider)
{
 8019224:	b580      	push	{r7, lr}
 8019226:	b084      	sub	sp, #16
 8019228:	af00      	add	r7, sp, #0
 801922a:	6078      	str	r0, [r7, #4]
 801922c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 801922e:	2300      	movs	r3, #0
 8019230:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(pPllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(pPllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(pPllSai2->PLLSAI2ClockOut));

  /* Check PLLSAI2 clock source availability */
  switch (pPllSai2->PLLSAI2Source)
 8019232:	687b      	ldr	r3, [r7, #4]
 8019234:	681b      	ldr	r3, [r3, #0]
 8019236:	2b03      	cmp	r3, #3
 8019238:	d018      	beq.n	801926c <RCCEx_PLLSAI2_Config+0x48>
 801923a:	2b03      	cmp	r3, #3
 801923c:	d81f      	bhi.n	801927e <RCCEx_PLLSAI2_Config+0x5a>
 801923e:	2b01      	cmp	r3, #1
 8019240:	d002      	beq.n	8019248 <RCCEx_PLLSAI2_Config+0x24>
 8019242:	2b02      	cmp	r3, #2
 8019244:	d009      	beq.n	801925a <RCCEx_PLLSAI2_Config+0x36>
 8019246:	e01a      	b.n	801927e <RCCEx_PLLSAI2_Config+0x5a>
  {
    case RCC_PLLSOURCE_MSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8019248:	4b4a      	ldr	r3, [pc, #296]	; (8019374 <RCCEx_PLLSAI2_Config+0x150>)
 801924a:	681b      	ldr	r3, [r3, #0]
 801924c:	f003 0302 	and.w	r3, r3, #2
 8019250:	2b00      	cmp	r3, #0
 8019252:	d117      	bne.n	8019284 <RCCEx_PLLSAI2_Config+0x60>
      {
        status = HAL_ERROR;
 8019254:	2301      	movs	r3, #1
 8019256:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8019258:	e014      	b.n	8019284 <RCCEx_PLLSAI2_Config+0x60>
    case RCC_PLLSOURCE_HSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 801925a:	4b46      	ldr	r3, [pc, #280]	; (8019374 <RCCEx_PLLSAI2_Config+0x150>)
 801925c:	681b      	ldr	r3, [r3, #0]
 801925e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8019262:	2b00      	cmp	r3, #0
 8019264:	d110      	bne.n	8019288 <RCCEx_PLLSAI2_Config+0x64>
      {
        status = HAL_ERROR;
 8019266:	2301      	movs	r3, #1
 8019268:	73fb      	strb	r3, [r7, #15]
      }
      break;
 801926a:	e00d      	b.n	8019288 <RCCEx_PLLSAI2_Config+0x64>
    case RCC_PLLSOURCE_HSE:
      if (HAL_IS_BIT_CLR(RCC->CR, (RCC_CR_HSERDY | RCC_CR_HSEBYP)))
 801926c:	4b41      	ldr	r3, [pc, #260]	; (8019374 <RCCEx_PLLSAI2_Config+0x150>)
 801926e:	681b      	ldr	r3, [r3, #0]
 8019270:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8019274:	2b00      	cmp	r3, #0
 8019276:	d109      	bne.n	801928c <RCCEx_PLLSAI2_Config+0x68>
      {
        status = HAL_ERROR;
 8019278:	2301      	movs	r3, #1
 801927a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 801927c:	e006      	b.n	801928c <RCCEx_PLLSAI2_Config+0x68>
    default:
      status = HAL_ERROR;
 801927e:	2301      	movs	r3, #1
 8019280:	73fb      	strb	r3, [r7, #15]
      break;
 8019282:	e004      	b.n	801928e <RCCEx_PLLSAI2_Config+0x6a>
      break;
 8019284:	bf00      	nop
 8019286:	e002      	b.n	801928e <RCCEx_PLLSAI2_Config+0x6a>
      break;
 8019288:	bf00      	nop
 801928a:	e000      	b.n	801928e <RCCEx_PLLSAI2_Config+0x6a>
      break;
 801928c:	bf00      	nop
  }

  if (status == HAL_OK)
 801928e:	7bfb      	ldrb	r3, [r7, #15]
 8019290:	2b00      	cmp	r3, #0
 8019292:	d169      	bne.n	8019368 <RCCEx_PLLSAI2_Config+0x144>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8019294:	4b37      	ldr	r3, [pc, #220]	; (8019374 <RCCEx_PLLSAI2_Config+0x150>)
 8019296:	681b      	ldr	r3, [r3, #0]
 8019298:	4a36      	ldr	r2, [pc, #216]	; (8019374 <RCCEx_PLLSAI2_Config+0x150>)
 801929a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 801929e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80192a0:	f7fb f956 	bl	8014550 <HAL_GetTick>
 80192a4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80192a6:	e00f      	b.n	80192c8 <RCCEx_PLLSAI2_Config+0xa4>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80192a8:	f7fb f952 	bl	8014550 <HAL_GetTick>
 80192ac:	4602      	mov	r2, r0
 80192ae:	68bb      	ldr	r3, [r7, #8]
 80192b0:	1ad3      	subs	r3, r2, r3
 80192b2:	2b02      	cmp	r3, #2
 80192b4:	d908      	bls.n	80192c8 <RCCEx_PLLSAI2_Config+0xa4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80192b6:	4b2f      	ldr	r3, [pc, #188]	; (8019374 <RCCEx_PLLSAI2_Config+0x150>)
 80192b8:	681b      	ldr	r3, [r3, #0]
 80192ba:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80192be:	2b00      	cmp	r3, #0
 80192c0:	d009      	beq.n	80192d6 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_TIMEOUT;
 80192c2:	2303      	movs	r3, #3
 80192c4:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80192c6:	e006      	b.n	80192d6 <RCCEx_PLLSAI2_Config+0xb2>
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80192c8:	4b2a      	ldr	r3, [pc, #168]	; (8019374 <RCCEx_PLLSAI2_Config+0x150>)
 80192ca:	681b      	ldr	r3, [r3, #0]
 80192cc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80192d0:	2b00      	cmp	r3, #0
 80192d2:	d1e9      	bne.n	80192a8 <RCCEx_PLLSAI2_Config+0x84>
 80192d4:	e000      	b.n	80192d8 <RCCEx_PLLSAI2_Config+0xb4>
        break;
 80192d6:	bf00      	nop
      }
    }

    if (status == HAL_OK)
 80192d8:	7bfb      	ldrb	r3, [r7, #15]
 80192da:	2b00      	cmp	r3, #0
 80192dc:	d144      	bne.n	8019368 <RCCEx_PLLSAI2_Config+0x144>
    {
      if (Divider == DIVIDER_P_UPDATE)
 80192de:	683b      	ldr	r3, [r7, #0]
 80192e0:	2b00      	cmp	r3, #0
 80192e2:	d115      	bne.n	8019310 <RCCEx_PLLSAI2_Config+0xec>
      {
        assert_param(IS_RCC_PLLSAI2P_VALUE(pPllSai2->PLLSAI2P));

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80192e4:	4b23      	ldr	r3, [pc, #140]	; (8019374 <RCCEx_PLLSAI2_Config+0x150>)
 80192e6:	695a      	ldr	r2, [r3, #20]
 80192e8:	4b23      	ldr	r3, [pc, #140]	; (8019378 <RCCEx_PLLSAI2_Config+0x154>)
 80192ea:	4013      	ands	r3, r2
 80192ec:	687a      	ldr	r2, [r7, #4]
 80192ee:	6892      	ldr	r2, [r2, #8]
 80192f0:	0211      	lsls	r1, r2, #8
 80192f2:	687a      	ldr	r2, [r7, #4]
 80192f4:	68d2      	ldr	r2, [r2, #12]
 80192f6:	06d2      	lsls	r2, r2, #27
 80192f8:	4311      	orrs	r1, r2
 80192fa:	687a      	ldr	r2, [r7, #4]
 80192fc:	6852      	ldr	r2, [r2, #4]
 80192fe:	3a01      	subs	r2, #1
 8019300:	0112      	lsls	r2, r2, #4
 8019302:	4311      	orrs	r1, r2
 8019304:	687a      	ldr	r2, [r7, #4]
 8019306:	6812      	ldr	r2, [r2, #0]
 8019308:	430a      	orrs	r2, r1
 801930a:	491a      	ldr	r1, [pc, #104]	; (8019374 <RCCEx_PLLSAI2_Config+0x150>)
 801930c:	4313      	orrs	r3, r2
 801930e:	614b      	str	r3, [r1, #20]
                   pPllSai2->PLLSAI2Source);

      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8019310:	4b18      	ldr	r3, [pc, #96]	; (8019374 <RCCEx_PLLSAI2_Config+0x150>)
 8019312:	681b      	ldr	r3, [r3, #0]
 8019314:	4a17      	ldr	r2, [pc, #92]	; (8019374 <RCCEx_PLLSAI2_Config+0x150>)
 8019316:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801931a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801931c:	f7fb f918 	bl	8014550 <HAL_GetTick>
 8019320:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8019322:	e00f      	b.n	8019344 <RCCEx_PLLSAI2_Config+0x120>
      {
        if ((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8019324:	f7fb f914 	bl	8014550 <HAL_GetTick>
 8019328:	4602      	mov	r2, r0
 801932a:	68bb      	ldr	r3, [r7, #8]
 801932c:	1ad3      	subs	r3, r2, r3
 801932e:	2b02      	cmp	r3, #2
 8019330:	d908      	bls.n	8019344 <RCCEx_PLLSAI2_Config+0x120>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8019332:	4b10      	ldr	r3, [pc, #64]	; (8019374 <RCCEx_PLLSAI2_Config+0x150>)
 8019334:	681b      	ldr	r3, [r3, #0]
 8019336:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 801933a:	2b00      	cmp	r3, #0
 801933c:	d109      	bne.n	8019352 <RCCEx_PLLSAI2_Config+0x12e>
          {
            status = HAL_TIMEOUT;
 801933e:	2303      	movs	r3, #3
 8019340:	73fb      	strb	r3, [r7, #15]
          }
          break;
 8019342:	e006      	b.n	8019352 <RCCEx_PLLSAI2_Config+0x12e>
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8019344:	4b0b      	ldr	r3, [pc, #44]	; (8019374 <RCCEx_PLLSAI2_Config+0x150>)
 8019346:	681b      	ldr	r3, [r3, #0]
 8019348:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 801934c:	2b00      	cmp	r3, #0
 801934e:	d0e9      	beq.n	8019324 <RCCEx_PLLSAI2_Config+0x100>
 8019350:	e000      	b.n	8019354 <RCCEx_PLLSAI2_Config+0x130>
          break;
 8019352:	bf00      	nop
        }
      }

      if (status == HAL_OK)
 8019354:	7bfb      	ldrb	r3, [r7, #15]
 8019356:	2b00      	cmp	r3, #0
 8019358:	d106      	bne.n	8019368 <RCCEx_PLLSAI2_Config+0x144>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(pPllSai2->PLLSAI2ClockOut);
 801935a:	4b06      	ldr	r3, [pc, #24]	; (8019374 <RCCEx_PLLSAI2_Config+0x150>)
 801935c:	695a      	ldr	r2, [r3, #20]
 801935e:	687b      	ldr	r3, [r7, #4]
 8019360:	691b      	ldr	r3, [r3, #16]
 8019362:	4904      	ldr	r1, [pc, #16]	; (8019374 <RCCEx_PLLSAI2_Config+0x150>)
 8019364:	4313      	orrs	r3, r2
 8019366:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8019368:	7bfb      	ldrb	r3, [r7, #15]
}
 801936a:	4618      	mov	r0, r3
 801936c:	3710      	adds	r7, #16
 801936e:	46bd      	mov	sp, r7
 8019370:	bd80      	pop	{r7, pc}
 8019372:	bf00      	nop
 8019374:	40021000 	.word	0x40021000
 8019378:	07ff800c 	.word	0x07ff800c

0801937c <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 801937c:	b580      	push	{r7, lr}
 801937e:	b084      	sub	sp, #16
 8019380:	af00      	add	r7, sp, #0
 8019382:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8019384:	2301      	movs	r3, #1
 8019386:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8019388:	687b      	ldr	r3, [r7, #4]
 801938a:	2b00      	cmp	r3, #0
 801938c:	d066      	beq.n	801945c <HAL_RTC_Init+0xe0>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else
    if (hrtc->State == HAL_RTC_STATE_RESET)
 801938e:	687b      	ldr	r3, [r7, #4]
 8019390:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8019394:	b2db      	uxtb	r3, r3
 8019396:	2b00      	cmp	r3, #0
 8019398:	d106      	bne.n	80193a8 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 801939a:	687b      	ldr	r3, [r7, #4]
 801939c:	2200      	movs	r2, #0
 801939e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 80193a2:	6878      	ldr	r0, [r7, #4]
 80193a4:	f7fa fb42 	bl	8013a2c <HAL_RTC_MspInit>
    }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 80193a8:	687b      	ldr	r3, [r7, #4]
 80193aa:	2202      	movs	r2, #2
 80193ac:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 80193b0:	687b      	ldr	r3, [r7, #4]
 80193b2:	681b      	ldr	r3, [r3, #0]
 80193b4:	68db      	ldr	r3, [r3, #12]
 80193b6:	f003 0310 	and.w	r3, r3, #16
 80193ba:	2b10      	cmp	r3, #16
 80193bc:	d045      	beq.n	801944a <HAL_RTC_Init+0xce>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80193be:	4b2a      	ldr	r3, [pc, #168]	; (8019468 <HAL_RTC_Init+0xec>)
 80193c0:	22ca      	movs	r2, #202	; 0xca
 80193c2:	625a      	str	r2, [r3, #36]	; 0x24
 80193c4:	4b28      	ldr	r3, [pc, #160]	; (8019468 <HAL_RTC_Init+0xec>)
 80193c6:	2253      	movs	r2, #83	; 0x53
 80193c8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 80193ca:	6878      	ldr	r0, [r7, #4]
 80193cc:	f000 f872 	bl	80194b4 <RTC_EnterInitMode>
 80193d0:	4603      	mov	r3, r0
 80193d2:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 80193d4:	7bfb      	ldrb	r3, [r7, #15]
 80193d6:	2b00      	cmp	r3, #0
 80193d8:	d121      	bne.n	801941e <HAL_RTC_Init+0xa2>
      {
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        CLEAR_BIT(RTC->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 80193da:	4b23      	ldr	r3, [pc, #140]	; (8019468 <HAL_RTC_Init+0xec>)
 80193dc:	699b      	ldr	r3, [r3, #24]
 80193de:	4a22      	ldr	r2, [pc, #136]	; (8019468 <HAL_RTC_Init+0xec>)
 80193e0:	f023 638e 	bic.w	r3, r3, #74448896	; 0x4700000
 80193e4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80193e8:	6193      	str	r3, [r2, #24]
        /* Set RTC_CR register */
        SET_BIT(RTC->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 80193ea:	4b1f      	ldr	r3, [pc, #124]	; (8019468 <HAL_RTC_Init+0xec>)
 80193ec:	699a      	ldr	r2, [r3, #24]
 80193ee:	687b      	ldr	r3, [r7, #4]
 80193f0:	6859      	ldr	r1, [r3, #4]
 80193f2:	687b      	ldr	r3, [r7, #4]
 80193f4:	691b      	ldr	r3, [r3, #16]
 80193f6:	4319      	orrs	r1, r3
 80193f8:	687b      	ldr	r3, [r7, #4]
 80193fa:	699b      	ldr	r3, [r3, #24]
 80193fc:	430b      	orrs	r3, r1
 80193fe:	491a      	ldr	r1, [pc, #104]	; (8019468 <HAL_RTC_Init+0xec>)
 8019400:	4313      	orrs	r3, r2
 8019402:	618b      	str	r3, [r1, #24]

        /* Configure the RTC PRER */
        WRITE_REG(RTC->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 8019404:	687b      	ldr	r3, [r7, #4]
 8019406:	68da      	ldr	r2, [r3, #12]
 8019408:	687b      	ldr	r3, [r7, #4]
 801940a:	689b      	ldr	r3, [r3, #8]
 801940c:	041b      	lsls	r3, r3, #16
 801940e:	4916      	ldr	r1, [pc, #88]	; (8019468 <HAL_RTC_Init+0xec>)
 8019410:	4313      	orrs	r3, r2
 8019412:	610b      	str	r3, [r1, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 8019414:	6878      	ldr	r0, [r7, #4]
 8019416:	f000 f881 	bl	801951c <RTC_ExitInitMode>
 801941a:	4603      	mov	r3, r0
 801941c:	73fb      	strb	r3, [r7, #15]
      }

      if (status == HAL_OK)
 801941e:	7bfb      	ldrb	r3, [r7, #15]
 8019420:	2b00      	cmp	r3, #0
 8019422:	d10e      	bne.n	8019442 <HAL_RTC_Init+0xc6>
      {
        MODIFY_REG(RTC->CR, \
 8019424:	4b10      	ldr	r3, [pc, #64]	; (8019468 <HAL_RTC_Init+0xec>)
 8019426:	699b      	ldr	r3, [r3, #24]
 8019428:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 801942c:	687b      	ldr	r3, [r7, #4]
 801942e:	6a19      	ldr	r1, [r3, #32]
 8019430:	687b      	ldr	r3, [r7, #4]
 8019432:	69db      	ldr	r3, [r3, #28]
 8019434:	4319      	orrs	r1, r3
 8019436:	687b      	ldr	r3, [r7, #4]
 8019438:	695b      	ldr	r3, [r3, #20]
 801943a:	430b      	orrs	r3, r1
 801943c:	490a      	ldr	r1, [pc, #40]	; (8019468 <HAL_RTC_Init+0xec>)
 801943e:	4313      	orrs	r3, r2
 8019440:	618b      	str	r3, [r1, #24]
                   hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
      }


    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8019442:	4b09      	ldr	r3, [pc, #36]	; (8019468 <HAL_RTC_Init+0xec>)
 8019444:	22ff      	movs	r2, #255	; 0xff
 8019446:	625a      	str	r2, [r3, #36]	; 0x24
 8019448:	e001      	b.n	801944e <HAL_RTC_Init+0xd2>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 801944a:	2300      	movs	r3, #0
 801944c:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 801944e:	7bfb      	ldrb	r3, [r7, #15]
 8019450:	2b00      	cmp	r3, #0
 8019452:	d103      	bne.n	801945c <HAL_RTC_Init+0xe0>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 8019454:	687b      	ldr	r3, [r7, #4]
 8019456:	2201      	movs	r2, #1
 8019458:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
  }

  return status;
 801945c:	7bfb      	ldrb	r3, [r7, #15]
}
 801945e:	4618      	mov	r0, r3
 8019460:	3710      	adds	r7, #16
 8019462:	46bd      	mov	sp, r7
 8019464:	bd80      	pop	{r7, pc}
 8019466:	bf00      	nop
 8019468:	40002800 	.word	0x40002800

0801946c <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 801946c:	b580      	push	{r7, lr}
 801946e:	b084      	sub	sp, #16
 8019470:	af00      	add	r7, sp, #0
 8019472:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  UNUSED(hrtc);
  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  WRITE_REG(RTC->ICSR, ((uint32_t)(RTC_RSF_MASK & RTC_ICSR_RESERVED_MASK)));
 8019474:	4b0d      	ldr	r3, [pc, #52]	; (80194ac <HAL_RTC_WaitForSynchro+0x40>)
 8019476:	4a0e      	ldr	r2, [pc, #56]	; (80194b0 <HAL_RTC_WaitForSynchro+0x44>)
 8019478:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 801947a:	f7fb f869 	bl	8014550 <HAL_GetTick>
 801947e:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 8019480:	e009      	b.n	8019496 <HAL_RTC_WaitForSynchro+0x2a>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8019482:	f7fb f865 	bl	8014550 <HAL_GetTick>
 8019486:	4602      	mov	r2, r0
 8019488:	68fb      	ldr	r3, [r7, #12]
 801948a:	1ad3      	subs	r3, r2, r3
 801948c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8019490:	d901      	bls.n	8019496 <HAL_RTC_WaitForSynchro+0x2a>
    {
      return HAL_TIMEOUT;
 8019492:	2303      	movs	r3, #3
 8019494:	e006      	b.n	80194a4 <HAL_RTC_WaitForSynchro+0x38>
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 8019496:	4b05      	ldr	r3, [pc, #20]	; (80194ac <HAL_RTC_WaitForSynchro+0x40>)
 8019498:	68db      	ldr	r3, [r3, #12]
 801949a:	f003 0320 	and.w	r3, r3, #32
 801949e:	2b00      	cmp	r3, #0
 80194a0:	d0ef      	beq.n	8019482 <HAL_RTC_WaitForSynchro+0x16>
    }
  }

  return HAL_OK;
 80194a2:	2300      	movs	r3, #0
}
 80194a4:	4618      	mov	r0, r3
 80194a6:	3710      	adds	r7, #16
 80194a8:	46bd      	mov	sp, r7
 80194aa:	bd80      	pop	{r7, pc}
 80194ac:	40002800 	.word	0x40002800
 80194b0:	0001005c 	.word	0x0001005c

080194b4 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80194b4:	b580      	push	{r7, lr}
 80194b6:	b084      	sub	sp, #16
 80194b8:	af00      	add	r7, sp, #0
 80194ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80194bc:	2300      	movs	r3, #0
 80194be:	73fb      	strb	r3, [r7, #15]

  UNUSED(hrtc);
  /* Check if the Initialization mode is set */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 80194c0:	4b15      	ldr	r3, [pc, #84]	; (8019518 <RTC_EnterInitMode+0x64>)
 80194c2:	68db      	ldr	r3, [r3, #12]
 80194c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80194c8:	2b00      	cmp	r3, #0
 80194ca:	d120      	bne.n	801950e <RTC_EnterInitMode+0x5a>
  {
    /* Set the Initialization mode */
    SET_BIT(RTC->ICSR, RTC_ICSR_INIT);
 80194cc:	4b12      	ldr	r3, [pc, #72]	; (8019518 <RTC_EnterInitMode+0x64>)
 80194ce:	68db      	ldr	r3, [r3, #12]
 80194d0:	4a11      	ldr	r2, [pc, #68]	; (8019518 <RTC_EnterInitMode+0x64>)
 80194d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80194d6:	60d3      	str	r3, [r2, #12]

    tickstart = HAL_GetTick();
 80194d8:	f7fb f83a 	bl	8014550 <HAL_GetTick>
 80194dc:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80194de:	e00d      	b.n	80194fc <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 80194e0:	f7fb f836 	bl	8014550 <HAL_GetTick>
 80194e4:	4602      	mov	r2, r0
 80194e6:	68bb      	ldr	r3, [r7, #8]
 80194e8:	1ad3      	subs	r3, r2, r3
 80194ea:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80194ee:	d905      	bls.n	80194fc <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 80194f0:	2303      	movs	r3, #3
 80194f2:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80194f4:	687b      	ldr	r3, [r7, #4]
 80194f6:	2203      	movs	r2, #3
 80194f8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80194fc:	4b06      	ldr	r3, [pc, #24]	; (8019518 <RTC_EnterInitMode+0x64>)
 80194fe:	68db      	ldr	r3, [r3, #12]
 8019500:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8019504:	2b00      	cmp	r3, #0
 8019506:	d102      	bne.n	801950e <RTC_EnterInitMode+0x5a>
 8019508:	7bfb      	ldrb	r3, [r7, #15]
 801950a:	2b03      	cmp	r3, #3
 801950c:	d1e8      	bne.n	80194e0 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return status;
 801950e:	7bfb      	ldrb	r3, [r7, #15]
}
 8019510:	4618      	mov	r0, r3
 8019512:	3710      	adds	r7, #16
 8019514:	46bd      	mov	sp, r7
 8019516:	bd80      	pop	{r7, pc}
 8019518:	40002800 	.word	0x40002800

0801951c <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 801951c:	b580      	push	{r7, lr}
 801951e:	b084      	sub	sp, #16
 8019520:	af00      	add	r7, sp, #0
 8019522:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8019524:	2300      	movs	r3, #0
 8019526:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8019528:	4b1a      	ldr	r3, [pc, #104]	; (8019594 <RTC_ExitInitMode+0x78>)
 801952a:	68db      	ldr	r3, [r3, #12]
 801952c:	4a19      	ldr	r2, [pc, #100]	; (8019594 <RTC_ExitInitMode+0x78>)
 801952e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8019532:	60d3      	str	r3, [r2, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8019534:	4b17      	ldr	r3, [pc, #92]	; (8019594 <RTC_ExitInitMode+0x78>)
 8019536:	699b      	ldr	r3, [r3, #24]
 8019538:	f003 0320 	and.w	r3, r3, #32
 801953c:	2b00      	cmp	r3, #0
 801953e:	d10c      	bne.n	801955a <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8019540:	6878      	ldr	r0, [r7, #4]
 8019542:	f7ff ff93 	bl	801946c <HAL_RTC_WaitForSynchro>
 8019546:	4603      	mov	r3, r0
 8019548:	2b00      	cmp	r3, #0
 801954a:	d01e      	beq.n	801958a <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 801954c:	687b      	ldr	r3, [r7, #4]
 801954e:	2203      	movs	r2, #3
 8019550:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
      status = HAL_TIMEOUT;
 8019554:	2303      	movs	r3, #3
 8019556:	73fb      	strb	r3, [r7, #15]
 8019558:	e017      	b.n	801958a <RTC_ExitInitMode+0x6e>
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry.
          Please look at STM32L552xx STM32L562xx Errata sheet on the internet for details. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 801955a:	4b0e      	ldr	r3, [pc, #56]	; (8019594 <RTC_ExitInitMode+0x78>)
 801955c:	699b      	ldr	r3, [r3, #24]
 801955e:	4a0d      	ldr	r2, [pc, #52]	; (8019594 <RTC_ExitInitMode+0x78>)
 8019560:	f023 0320 	bic.w	r3, r3, #32
 8019564:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8019566:	6878      	ldr	r0, [r7, #4]
 8019568:	f7ff ff80 	bl	801946c <HAL_RTC_WaitForSynchro>
 801956c:	4603      	mov	r3, r0
 801956e:	2b00      	cmp	r3, #0
 8019570:	d005      	beq.n	801957e <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8019572:	687b      	ldr	r3, [r7, #4]
 8019574:	2203      	movs	r2, #3
 8019576:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
      status = HAL_TIMEOUT;
 801957a:	2303      	movs	r3, #3
 801957c:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 801957e:	4b05      	ldr	r3, [pc, #20]	; (8019594 <RTC_ExitInitMode+0x78>)
 8019580:	699b      	ldr	r3, [r3, #24]
 8019582:	4a04      	ldr	r2, [pc, #16]	; (8019594 <RTC_ExitInitMode+0x78>)
 8019584:	f043 0320 	orr.w	r3, r3, #32
 8019588:	6193      	str	r3, [r2, #24]
  }

  return status;
 801958a:	7bfb      	ldrb	r3, [r7, #15]
}
 801958c:	4618      	mov	r0, r3
 801958e:	3710      	adds	r7, #16
 8019590:	46bd      	mov	sp, r7
 8019592:	bd80      	pop	{r7, pc}
 8019594:	40002800 	.word	0x40002800

08019598 <HAL_RTCEx_PrivilegeModeSet>:
  * @param  hrtc RTC handle
  * @param  privilegeState  Privilege state
  * @retval HAL_StatusTypeDef
  */
HAL_StatusTypeDef HAL_RTCEx_PrivilegeModeSet(RTC_HandleTypeDef *hrtc, RTC_PrivilegeStateTypeDef *privilegeState)
{
 8019598:	b480      	push	{r7}
 801959a:	b083      	sub	sp, #12
 801959c:	af00      	add	r7, sp, #0
 801959e:	6078      	str	r0, [r7, #4]
 80195a0:	6039      	str	r1, [r7, #0]
  assert_param(IS_RTC_PRIVILEGE_BKUP_ZONE(privilegeState->backupRegisterPrivZone));
  assert_param(IS_RTC_BKP(privilegeState->backupRegisterStartZone2));
  assert_param(IS_RTC_BKP(privilegeState->backupRegisterStartZone3));

  /* RTC privilege configuration */
  WRITE_REG(RTC->PRIVCR, privilegeState->rtcPrivilegeFull | privilegeState->rtcPrivilegeFeatures);
 80195a2:	683b      	ldr	r3, [r7, #0]
 80195a4:	681a      	ldr	r2, [r3, #0]
 80195a6:	683b      	ldr	r3, [r7, #0]
 80195a8:	685b      	ldr	r3, [r3, #4]
 80195aa:	490f      	ldr	r1, [pc, #60]	; (80195e8 <HAL_RTCEx_PrivilegeModeSet+0x50>)
 80195ac:	4313      	orrs	r3, r2
 80195ae:	61cb      	str	r3, [r1, #28]

  /* TAMP and Backup registers privilege configuration
     Warning : privilegeState->backupRegisterPrivZone is only writable in secure mode or if trustzone is disabled.
               In non secure mode, a notification is generated through a flag/interrupt in the TZIC (TrustZone interrupt controller). The bits are not written. */
  WRITE_REG(TAMP->PRIVCR, privilegeState->tampPrivilegeFull | privilegeState->backupRegisterPrivZone);
 80195b0:	683b      	ldr	r3, [r7, #0]
 80195b2:	689a      	ldr	r2, [r3, #8]
 80195b4:	683b      	ldr	r3, [r7, #0]
 80195b6:	68db      	ldr	r3, [r3, #12]
 80195b8:	490c      	ldr	r1, [pc, #48]	; (80195ec <HAL_RTCEx_PrivilegeModeSet+0x54>)
 80195ba:	4313      	orrs	r3, r2
 80195bc:	624b      	str	r3, [r1, #36]	; 0x24

  /* Backup register start zone
     Warning : This parameter is only writable in secure mode or if trustzone is disabled.
               In non secure mode, a notification is generated through a flag/interrupt in the TZIC (TrustZone interrupt controller). The bits are not written.
     Warning : Backup register start zones are shared with secure configuration */
  MODIFY_REG(TAMP->SMCR,
 80195be:	4b0b      	ldr	r3, [pc, #44]	; (80195ec <HAL_RTCEx_PrivilegeModeSet+0x54>)
 80195c0:	6a1b      	ldr	r3, [r3, #32]
 80195c2:	f003 22ff 	and.w	r2, r3, #4278255360	; 0xff00ff00
 80195c6:	683b      	ldr	r3, [r7, #0]
 80195c8:	6919      	ldr	r1, [r3, #16]
 80195ca:	683b      	ldr	r3, [r7, #0]
 80195cc:	695b      	ldr	r3, [r3, #20]
 80195ce:	041b      	lsls	r3, r3, #16
 80195d0:	430b      	orrs	r3, r1
 80195d2:	4906      	ldr	r1, [pc, #24]	; (80195ec <HAL_RTCEx_PrivilegeModeSet+0x54>)
 80195d4:	4313      	orrs	r3, r2
 80195d6:	620b      	str	r3, [r1, #32]
             (TAMP_SMCR_BKPRWDPROT | TAMP_SMCR_BKPWDPROT),
             ((privilegeState->backupRegisterStartZone2 << TAMP_SMCR_BKPRWDPROT_Pos) | (privilegeState->backupRegisterStartZone3 << TAMP_SMCR_BKPWDPROT_Pos)));

  return HAL_OK;
 80195d8:	2300      	movs	r3, #0
}
 80195da:	4618      	mov	r0, r3
 80195dc:	370c      	adds	r7, #12
 80195de:	46bd      	mov	sp, r7
 80195e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80195e4:	4770      	bx	lr
 80195e6:	bf00      	nop
 80195e8:	40002800 	.word	0x40002800
 80195ec:	40003400 	.word	0x40003400

080195f0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80195f0:	b580      	push	{r7, lr}
 80195f2:	b084      	sub	sp, #16
 80195f4:	af00      	add	r7, sp, #0
 80195f6:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80195f8:	687b      	ldr	r3, [r7, #4]
 80195fa:	2b00      	cmp	r3, #0
 80195fc:	d101      	bne.n	8019602 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80195fe:	2301      	movs	r3, #1
 8019600:	e095      	b.n	801972e <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8019602:	687b      	ldr	r3, [r7, #4]
 8019604:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019606:	2b00      	cmp	r3, #0
 8019608:	d108      	bne.n	801961c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 801960a:	687b      	ldr	r3, [r7, #4]
 801960c:	685b      	ldr	r3, [r3, #4]
 801960e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8019612:	d009      	beq.n	8019628 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8019614:	687b      	ldr	r3, [r7, #4]
 8019616:	2200      	movs	r2, #0
 8019618:	61da      	str	r2, [r3, #28]
 801961a:	e005      	b.n	8019628 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 801961c:	687b      	ldr	r3, [r7, #4]
 801961e:	2200      	movs	r2, #0
 8019620:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8019622:	687b      	ldr	r3, [r7, #4]
 8019624:	2200      	movs	r2, #0
 8019626:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8019628:	687b      	ldr	r3, [r7, #4]
 801962a:	2200      	movs	r2, #0
 801962c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 801962e:	687b      	ldr	r3, [r7, #4]
 8019630:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8019634:	b2db      	uxtb	r3, r3
 8019636:	2b00      	cmp	r3, #0
 8019638:	d106      	bne.n	8019648 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 801963a:	687b      	ldr	r3, [r7, #4]
 801963c:	2200      	movs	r2, #0
 801963e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8019642:	6878      	ldr	r0, [r7, #4]
 8019644:	f7fa fa30 	bl	8013aa8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8019648:	687b      	ldr	r3, [r7, #4]
 801964a:	2202      	movs	r2, #2
 801964c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8019650:	687b      	ldr	r3, [r7, #4]
 8019652:	681b      	ldr	r3, [r3, #0]
 8019654:	681a      	ldr	r2, [r3, #0]
 8019656:	687b      	ldr	r3, [r7, #4]
 8019658:	681b      	ldr	r3, [r3, #0]
 801965a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801965e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8019660:	687b      	ldr	r3, [r7, #4]
 8019662:	68db      	ldr	r3, [r3, #12]
 8019664:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8019668:	d902      	bls.n	8019670 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 801966a:	2300      	movs	r3, #0
 801966c:	60fb      	str	r3, [r7, #12]
 801966e:	e002      	b.n	8019676 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8019670:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8019674:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8019676:	687b      	ldr	r3, [r7, #4]
 8019678:	68db      	ldr	r3, [r3, #12]
 801967a:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 801967e:	d007      	beq.n	8019690 <HAL_SPI_Init+0xa0>
 8019680:	687b      	ldr	r3, [r7, #4]
 8019682:	68db      	ldr	r3, [r3, #12]
 8019684:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8019688:	d002      	beq.n	8019690 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 801968a:	687b      	ldr	r3, [r7, #4]
 801968c:	2200      	movs	r2, #0
 801968e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8019690:	687b      	ldr	r3, [r7, #4]
 8019692:	685b      	ldr	r3, [r3, #4]
 8019694:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8019698:	687b      	ldr	r3, [r7, #4]
 801969a:	689b      	ldr	r3, [r3, #8]
 801969c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80196a0:	431a      	orrs	r2, r3
 80196a2:	687b      	ldr	r3, [r7, #4]
 80196a4:	691b      	ldr	r3, [r3, #16]
 80196a6:	f003 0302 	and.w	r3, r3, #2
 80196aa:	431a      	orrs	r2, r3
 80196ac:	687b      	ldr	r3, [r7, #4]
 80196ae:	695b      	ldr	r3, [r3, #20]
 80196b0:	f003 0301 	and.w	r3, r3, #1
 80196b4:	431a      	orrs	r2, r3
 80196b6:	687b      	ldr	r3, [r7, #4]
 80196b8:	699b      	ldr	r3, [r3, #24]
 80196ba:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80196be:	431a      	orrs	r2, r3
 80196c0:	687b      	ldr	r3, [r7, #4]
 80196c2:	69db      	ldr	r3, [r3, #28]
 80196c4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80196c8:	431a      	orrs	r2, r3
 80196ca:	687b      	ldr	r3, [r7, #4]
 80196cc:	6a1b      	ldr	r3, [r3, #32]
 80196ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80196d2:	ea42 0103 	orr.w	r1, r2, r3
 80196d6:	687b      	ldr	r3, [r7, #4]
 80196d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80196da:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80196de:	687b      	ldr	r3, [r7, #4]
 80196e0:	681b      	ldr	r3, [r3, #0]
 80196e2:	430a      	orrs	r2, r1
 80196e4:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80196e6:	687b      	ldr	r3, [r7, #4]
 80196e8:	699b      	ldr	r3, [r3, #24]
 80196ea:	0c1b      	lsrs	r3, r3, #16
 80196ec:	f003 0204 	and.w	r2, r3, #4
 80196f0:	687b      	ldr	r3, [r7, #4]
 80196f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80196f4:	f003 0310 	and.w	r3, r3, #16
 80196f8:	431a      	orrs	r2, r3
 80196fa:	687b      	ldr	r3, [r7, #4]
 80196fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80196fe:	f003 0308 	and.w	r3, r3, #8
 8019702:	431a      	orrs	r2, r3
 8019704:	687b      	ldr	r3, [r7, #4]
 8019706:	68db      	ldr	r3, [r3, #12]
 8019708:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 801970c:	ea42 0103 	orr.w	r1, r2, r3
 8019710:	68fb      	ldr	r3, [r7, #12]
 8019712:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8019716:	687b      	ldr	r3, [r7, #4]
 8019718:	681b      	ldr	r3, [r3, #0]
 801971a:	430a      	orrs	r2, r1
 801971c:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 801971e:	687b      	ldr	r3, [r7, #4]
 8019720:	2200      	movs	r2, #0
 8019722:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8019724:	687b      	ldr	r3, [r7, #4]
 8019726:	2201      	movs	r2, #1
 8019728:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 801972c:	2300      	movs	r3, #0
}
 801972e:	4618      	mov	r0, r3
 8019730:	3710      	adds	r7, #16
 8019732:	46bd      	mov	sp, r7
 8019734:	bd80      	pop	{r7, pc}

08019736 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8019736:	b580      	push	{r7, lr}
 8019738:	b088      	sub	sp, #32
 801973a:	af00      	add	r7, sp, #0
 801973c:	60f8      	str	r0, [r7, #12]
 801973e:	60b9      	str	r1, [r7, #8]
 8019740:	603b      	str	r3, [r7, #0]
 8019742:	4613      	mov	r3, r2
 8019744:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8019746:	2300      	movs	r3, #0
 8019748:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 801974a:	68fb      	ldr	r3, [r7, #12]
 801974c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8019750:	2b01      	cmp	r3, #1
 8019752:	d101      	bne.n	8019758 <HAL_SPI_Transmit+0x22>
 8019754:	2302      	movs	r3, #2
 8019756:	e158      	b.n	8019a0a <HAL_SPI_Transmit+0x2d4>
 8019758:	68fb      	ldr	r3, [r7, #12]
 801975a:	2201      	movs	r2, #1
 801975c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8019760:	f7fa fef6 	bl	8014550 <HAL_GetTick>
 8019764:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8019766:	88fb      	ldrh	r3, [r7, #6]
 8019768:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 801976a:	68fb      	ldr	r3, [r7, #12]
 801976c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8019770:	b2db      	uxtb	r3, r3
 8019772:	2b01      	cmp	r3, #1
 8019774:	d002      	beq.n	801977c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8019776:	2302      	movs	r3, #2
 8019778:	77fb      	strb	r3, [r7, #31]
    goto error;
 801977a:	e13d      	b.n	80199f8 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 801977c:	68bb      	ldr	r3, [r7, #8]
 801977e:	2b00      	cmp	r3, #0
 8019780:	d002      	beq.n	8019788 <HAL_SPI_Transmit+0x52>
 8019782:	88fb      	ldrh	r3, [r7, #6]
 8019784:	2b00      	cmp	r3, #0
 8019786:	d102      	bne.n	801978e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8019788:	2301      	movs	r3, #1
 801978a:	77fb      	strb	r3, [r7, #31]
    goto error;
 801978c:	e134      	b.n	80199f8 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 801978e:	68fb      	ldr	r3, [r7, #12]
 8019790:	2203      	movs	r2, #3
 8019792:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8019796:	68fb      	ldr	r3, [r7, #12]
 8019798:	2200      	movs	r2, #0
 801979a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 801979c:	68fb      	ldr	r3, [r7, #12]
 801979e:	68ba      	ldr	r2, [r7, #8]
 80197a0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80197a2:	68fb      	ldr	r3, [r7, #12]
 80197a4:	88fa      	ldrh	r2, [r7, #6]
 80197a6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80197a8:	68fb      	ldr	r3, [r7, #12]
 80197aa:	88fa      	ldrh	r2, [r7, #6]
 80197ac:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80197ae:	68fb      	ldr	r3, [r7, #12]
 80197b0:	2200      	movs	r2, #0
 80197b2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80197b4:	68fb      	ldr	r3, [r7, #12]
 80197b6:	2200      	movs	r2, #0
 80197b8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 80197bc:	68fb      	ldr	r3, [r7, #12]
 80197be:	2200      	movs	r2, #0
 80197c0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 80197c4:	68fb      	ldr	r3, [r7, #12]
 80197c6:	2200      	movs	r2, #0
 80197c8:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 80197ca:	68fb      	ldr	r3, [r7, #12]
 80197cc:	2200      	movs	r2, #0
 80197ce:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80197d0:	68fb      	ldr	r3, [r7, #12]
 80197d2:	689b      	ldr	r3, [r3, #8]
 80197d4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80197d8:	d10f      	bne.n	80197fa <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80197da:	68fb      	ldr	r3, [r7, #12]
 80197dc:	681b      	ldr	r3, [r3, #0]
 80197de:	681a      	ldr	r2, [r3, #0]
 80197e0:	68fb      	ldr	r3, [r7, #12]
 80197e2:	681b      	ldr	r3, [r3, #0]
 80197e4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80197e8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80197ea:	68fb      	ldr	r3, [r7, #12]
 80197ec:	681b      	ldr	r3, [r3, #0]
 80197ee:	681a      	ldr	r2, [r3, #0]
 80197f0:	68fb      	ldr	r3, [r7, #12]
 80197f2:	681b      	ldr	r3, [r3, #0]
 80197f4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80197f8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80197fa:	68fb      	ldr	r3, [r7, #12]
 80197fc:	681b      	ldr	r3, [r3, #0]
 80197fe:	681b      	ldr	r3, [r3, #0]
 8019800:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8019804:	2b40      	cmp	r3, #64	; 0x40
 8019806:	d007      	beq.n	8019818 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8019808:	68fb      	ldr	r3, [r7, #12]
 801980a:	681b      	ldr	r3, [r3, #0]
 801980c:	681a      	ldr	r2, [r3, #0]
 801980e:	68fb      	ldr	r3, [r7, #12]
 8019810:	681b      	ldr	r3, [r3, #0]
 8019812:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8019816:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8019818:	68fb      	ldr	r3, [r7, #12]
 801981a:	68db      	ldr	r3, [r3, #12]
 801981c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8019820:	d94b      	bls.n	80198ba <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8019822:	68fb      	ldr	r3, [r7, #12]
 8019824:	685b      	ldr	r3, [r3, #4]
 8019826:	2b00      	cmp	r3, #0
 8019828:	d002      	beq.n	8019830 <HAL_SPI_Transmit+0xfa>
 801982a:	8afb      	ldrh	r3, [r7, #22]
 801982c:	2b01      	cmp	r3, #1
 801982e:	d13e      	bne.n	80198ae <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8019830:	68fb      	ldr	r3, [r7, #12]
 8019832:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8019834:	881a      	ldrh	r2, [r3, #0]
 8019836:	68fb      	ldr	r3, [r7, #12]
 8019838:	681b      	ldr	r3, [r3, #0]
 801983a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 801983c:	68fb      	ldr	r3, [r7, #12]
 801983e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8019840:	1c9a      	adds	r2, r3, #2
 8019842:	68fb      	ldr	r3, [r7, #12]
 8019844:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8019846:	68fb      	ldr	r3, [r7, #12]
 8019848:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801984a:	b29b      	uxth	r3, r3
 801984c:	3b01      	subs	r3, #1
 801984e:	b29a      	uxth	r2, r3
 8019850:	68fb      	ldr	r3, [r7, #12]
 8019852:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8019854:	e02b      	b.n	80198ae <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8019856:	68fb      	ldr	r3, [r7, #12]
 8019858:	681b      	ldr	r3, [r3, #0]
 801985a:	689b      	ldr	r3, [r3, #8]
 801985c:	f003 0302 	and.w	r3, r3, #2
 8019860:	2b02      	cmp	r3, #2
 8019862:	d112      	bne.n	801988a <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8019864:	68fb      	ldr	r3, [r7, #12]
 8019866:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8019868:	881a      	ldrh	r2, [r3, #0]
 801986a:	68fb      	ldr	r3, [r7, #12]
 801986c:	681b      	ldr	r3, [r3, #0]
 801986e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8019870:	68fb      	ldr	r3, [r7, #12]
 8019872:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8019874:	1c9a      	adds	r2, r3, #2
 8019876:	68fb      	ldr	r3, [r7, #12]
 8019878:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 801987a:	68fb      	ldr	r3, [r7, #12]
 801987c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801987e:	b29b      	uxth	r3, r3
 8019880:	3b01      	subs	r3, #1
 8019882:	b29a      	uxth	r2, r3
 8019884:	68fb      	ldr	r3, [r7, #12]
 8019886:	87da      	strh	r2, [r3, #62]	; 0x3e
 8019888:	e011      	b.n	80198ae <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 801988a:	f7fa fe61 	bl	8014550 <HAL_GetTick>
 801988e:	4602      	mov	r2, r0
 8019890:	69bb      	ldr	r3, [r7, #24]
 8019892:	1ad3      	subs	r3, r2, r3
 8019894:	683a      	ldr	r2, [r7, #0]
 8019896:	429a      	cmp	r2, r3
 8019898:	d803      	bhi.n	80198a2 <HAL_SPI_Transmit+0x16c>
 801989a:	683b      	ldr	r3, [r7, #0]
 801989c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80198a0:	d102      	bne.n	80198a8 <HAL_SPI_Transmit+0x172>
 80198a2:	683b      	ldr	r3, [r7, #0]
 80198a4:	2b00      	cmp	r3, #0
 80198a6:	d102      	bne.n	80198ae <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 80198a8:	2303      	movs	r3, #3
 80198aa:	77fb      	strb	r3, [r7, #31]
          goto error;
 80198ac:	e0a4      	b.n	80199f8 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 80198ae:	68fb      	ldr	r3, [r7, #12]
 80198b0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80198b2:	b29b      	uxth	r3, r3
 80198b4:	2b00      	cmp	r3, #0
 80198b6:	d1ce      	bne.n	8019856 <HAL_SPI_Transmit+0x120>
 80198b8:	e07c      	b.n	80199b4 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80198ba:	68fb      	ldr	r3, [r7, #12]
 80198bc:	685b      	ldr	r3, [r3, #4]
 80198be:	2b00      	cmp	r3, #0
 80198c0:	d002      	beq.n	80198c8 <HAL_SPI_Transmit+0x192>
 80198c2:	8afb      	ldrh	r3, [r7, #22]
 80198c4:	2b01      	cmp	r3, #1
 80198c6:	d170      	bne.n	80199aa <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 80198c8:	68fb      	ldr	r3, [r7, #12]
 80198ca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80198cc:	b29b      	uxth	r3, r3
 80198ce:	2b01      	cmp	r3, #1
 80198d0:	d912      	bls.n	80198f8 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80198d2:	68fb      	ldr	r3, [r7, #12]
 80198d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80198d6:	881a      	ldrh	r2, [r3, #0]
 80198d8:	68fb      	ldr	r3, [r7, #12]
 80198da:	681b      	ldr	r3, [r3, #0]
 80198dc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80198de:	68fb      	ldr	r3, [r7, #12]
 80198e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80198e2:	1c9a      	adds	r2, r3, #2
 80198e4:	68fb      	ldr	r3, [r7, #12]
 80198e6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80198e8:	68fb      	ldr	r3, [r7, #12]
 80198ea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80198ec:	b29b      	uxth	r3, r3
 80198ee:	3b02      	subs	r3, #2
 80198f0:	b29a      	uxth	r2, r3
 80198f2:	68fb      	ldr	r3, [r7, #12]
 80198f4:	87da      	strh	r2, [r3, #62]	; 0x3e
 80198f6:	e058      	b.n	80199aa <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80198f8:	68fb      	ldr	r3, [r7, #12]
 80198fa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80198fc:	68fb      	ldr	r3, [r7, #12]
 80198fe:	681b      	ldr	r3, [r3, #0]
 8019900:	330c      	adds	r3, #12
 8019902:	7812      	ldrb	r2, [r2, #0]
 8019904:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8019906:	68fb      	ldr	r3, [r7, #12]
 8019908:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801990a:	1c5a      	adds	r2, r3, #1
 801990c:	68fb      	ldr	r3, [r7, #12]
 801990e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8019910:	68fb      	ldr	r3, [r7, #12]
 8019912:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8019914:	b29b      	uxth	r3, r3
 8019916:	3b01      	subs	r3, #1
 8019918:	b29a      	uxth	r2, r3
 801991a:	68fb      	ldr	r3, [r7, #12]
 801991c:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 801991e:	e044      	b.n	80199aa <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8019920:	68fb      	ldr	r3, [r7, #12]
 8019922:	681b      	ldr	r3, [r3, #0]
 8019924:	689b      	ldr	r3, [r3, #8]
 8019926:	f003 0302 	and.w	r3, r3, #2
 801992a:	2b02      	cmp	r3, #2
 801992c:	d12b      	bne.n	8019986 <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 801992e:	68fb      	ldr	r3, [r7, #12]
 8019930:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8019932:	b29b      	uxth	r3, r3
 8019934:	2b01      	cmp	r3, #1
 8019936:	d912      	bls.n	801995e <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8019938:	68fb      	ldr	r3, [r7, #12]
 801993a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801993c:	881a      	ldrh	r2, [r3, #0]
 801993e:	68fb      	ldr	r3, [r7, #12]
 8019940:	681b      	ldr	r3, [r3, #0]
 8019942:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8019944:	68fb      	ldr	r3, [r7, #12]
 8019946:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8019948:	1c9a      	adds	r2, r3, #2
 801994a:	68fb      	ldr	r3, [r7, #12]
 801994c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 801994e:	68fb      	ldr	r3, [r7, #12]
 8019950:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8019952:	b29b      	uxth	r3, r3
 8019954:	3b02      	subs	r3, #2
 8019956:	b29a      	uxth	r2, r3
 8019958:	68fb      	ldr	r3, [r7, #12]
 801995a:	87da      	strh	r2, [r3, #62]	; 0x3e
 801995c:	e025      	b.n	80199aa <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 801995e:	68fb      	ldr	r3, [r7, #12]
 8019960:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8019962:	68fb      	ldr	r3, [r7, #12]
 8019964:	681b      	ldr	r3, [r3, #0]
 8019966:	330c      	adds	r3, #12
 8019968:	7812      	ldrb	r2, [r2, #0]
 801996a:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 801996c:	68fb      	ldr	r3, [r7, #12]
 801996e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8019970:	1c5a      	adds	r2, r3, #1
 8019972:	68fb      	ldr	r3, [r7, #12]
 8019974:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8019976:	68fb      	ldr	r3, [r7, #12]
 8019978:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801997a:	b29b      	uxth	r3, r3
 801997c:	3b01      	subs	r3, #1
 801997e:	b29a      	uxth	r2, r3
 8019980:	68fb      	ldr	r3, [r7, #12]
 8019982:	87da      	strh	r2, [r3, #62]	; 0x3e
 8019984:	e011      	b.n	80199aa <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8019986:	f7fa fde3 	bl	8014550 <HAL_GetTick>
 801998a:	4602      	mov	r2, r0
 801998c:	69bb      	ldr	r3, [r7, #24]
 801998e:	1ad3      	subs	r3, r2, r3
 8019990:	683a      	ldr	r2, [r7, #0]
 8019992:	429a      	cmp	r2, r3
 8019994:	d803      	bhi.n	801999e <HAL_SPI_Transmit+0x268>
 8019996:	683b      	ldr	r3, [r7, #0]
 8019998:	f1b3 3fff 	cmp.w	r3, #4294967295
 801999c:	d102      	bne.n	80199a4 <HAL_SPI_Transmit+0x26e>
 801999e:	683b      	ldr	r3, [r7, #0]
 80199a0:	2b00      	cmp	r3, #0
 80199a2:	d102      	bne.n	80199aa <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 80199a4:	2303      	movs	r3, #3
 80199a6:	77fb      	strb	r3, [r7, #31]
          goto error;
 80199a8:	e026      	b.n	80199f8 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 80199aa:	68fb      	ldr	r3, [r7, #12]
 80199ac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80199ae:	b29b      	uxth	r3, r3
 80199b0:	2b00      	cmp	r3, #0
 80199b2:	d1b5      	bne.n	8019920 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80199b4:	69ba      	ldr	r2, [r7, #24]
 80199b6:	6839      	ldr	r1, [r7, #0]
 80199b8:	68f8      	ldr	r0, [r7, #12]
 80199ba:	f000 fce3 	bl	801a384 <SPI_EndRxTxTransaction>
 80199be:	4603      	mov	r3, r0
 80199c0:	2b00      	cmp	r3, #0
 80199c2:	d002      	beq.n	80199ca <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80199c4:	68fb      	ldr	r3, [r7, #12]
 80199c6:	2220      	movs	r2, #32
 80199c8:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80199ca:	68fb      	ldr	r3, [r7, #12]
 80199cc:	689b      	ldr	r3, [r3, #8]
 80199ce:	2b00      	cmp	r3, #0
 80199d0:	d10a      	bne.n	80199e8 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80199d2:	2300      	movs	r3, #0
 80199d4:	613b      	str	r3, [r7, #16]
 80199d6:	68fb      	ldr	r3, [r7, #12]
 80199d8:	681b      	ldr	r3, [r3, #0]
 80199da:	68db      	ldr	r3, [r3, #12]
 80199dc:	613b      	str	r3, [r7, #16]
 80199de:	68fb      	ldr	r3, [r7, #12]
 80199e0:	681b      	ldr	r3, [r3, #0]
 80199e2:	689b      	ldr	r3, [r3, #8]
 80199e4:	613b      	str	r3, [r7, #16]
 80199e6:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80199e8:	68fb      	ldr	r3, [r7, #12]
 80199ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80199ec:	2b00      	cmp	r3, #0
 80199ee:	d002      	beq.n	80199f6 <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 80199f0:	2301      	movs	r3, #1
 80199f2:	77fb      	strb	r3, [r7, #31]
 80199f4:	e000      	b.n	80199f8 <HAL_SPI_Transmit+0x2c2>
  }

error:
 80199f6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80199f8:	68fb      	ldr	r3, [r7, #12]
 80199fa:	2201      	movs	r2, #1
 80199fc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8019a00:	68fb      	ldr	r3, [r7, #12]
 8019a02:	2200      	movs	r2, #0
 8019a04:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8019a08:	7ffb      	ldrb	r3, [r7, #31]
}
 8019a0a:	4618      	mov	r0, r3
 8019a0c:	3720      	adds	r7, #32
 8019a0e:	46bd      	mov	sp, r7
 8019a10:	bd80      	pop	{r7, pc}

08019a12 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8019a12:	b580      	push	{r7, lr}
 8019a14:	b088      	sub	sp, #32
 8019a16:	af02      	add	r7, sp, #8
 8019a18:	60f8      	str	r0, [r7, #12]
 8019a1a:	60b9      	str	r1, [r7, #8]
 8019a1c:	603b      	str	r3, [r7, #0]
 8019a1e:	4613      	mov	r3, r2
 8019a20:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8019a22:	2300      	movs	r3, #0
 8019a24:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8019a26:	68fb      	ldr	r3, [r7, #12]
 8019a28:	685b      	ldr	r3, [r3, #4]
 8019a2a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8019a2e:	d112      	bne.n	8019a56 <HAL_SPI_Receive+0x44>
 8019a30:	68fb      	ldr	r3, [r7, #12]
 8019a32:	689b      	ldr	r3, [r3, #8]
 8019a34:	2b00      	cmp	r3, #0
 8019a36:	d10e      	bne.n	8019a56 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8019a38:	68fb      	ldr	r3, [r7, #12]
 8019a3a:	2204      	movs	r2, #4
 8019a3c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8019a40:	88fa      	ldrh	r2, [r7, #6]
 8019a42:	683b      	ldr	r3, [r7, #0]
 8019a44:	9300      	str	r3, [sp, #0]
 8019a46:	4613      	mov	r3, r2
 8019a48:	68ba      	ldr	r2, [r7, #8]
 8019a4a:	68b9      	ldr	r1, [r7, #8]
 8019a4c:	68f8      	ldr	r0, [r7, #12]
 8019a4e:	f000 f910 	bl	8019c72 <HAL_SPI_TransmitReceive>
 8019a52:	4603      	mov	r3, r0
 8019a54:	e109      	b.n	8019c6a <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8019a56:	68fb      	ldr	r3, [r7, #12]
 8019a58:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8019a5c:	2b01      	cmp	r3, #1
 8019a5e:	d101      	bne.n	8019a64 <HAL_SPI_Receive+0x52>
 8019a60:	2302      	movs	r3, #2
 8019a62:	e102      	b.n	8019c6a <HAL_SPI_Receive+0x258>
 8019a64:	68fb      	ldr	r3, [r7, #12]
 8019a66:	2201      	movs	r2, #1
 8019a68:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8019a6c:	f7fa fd70 	bl	8014550 <HAL_GetTick>
 8019a70:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8019a72:	68fb      	ldr	r3, [r7, #12]
 8019a74:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8019a78:	b2db      	uxtb	r3, r3
 8019a7a:	2b01      	cmp	r3, #1
 8019a7c:	d002      	beq.n	8019a84 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8019a7e:	2302      	movs	r3, #2
 8019a80:	75fb      	strb	r3, [r7, #23]
    goto error;
 8019a82:	e0e9      	b.n	8019c58 <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 8019a84:	68bb      	ldr	r3, [r7, #8]
 8019a86:	2b00      	cmp	r3, #0
 8019a88:	d002      	beq.n	8019a90 <HAL_SPI_Receive+0x7e>
 8019a8a:	88fb      	ldrh	r3, [r7, #6]
 8019a8c:	2b00      	cmp	r3, #0
 8019a8e:	d102      	bne.n	8019a96 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8019a90:	2301      	movs	r3, #1
 8019a92:	75fb      	strb	r3, [r7, #23]
    goto error;
 8019a94:	e0e0      	b.n	8019c58 <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8019a96:	68fb      	ldr	r3, [r7, #12]
 8019a98:	2204      	movs	r2, #4
 8019a9a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8019a9e:	68fb      	ldr	r3, [r7, #12]
 8019aa0:	2200      	movs	r2, #0
 8019aa2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8019aa4:	68fb      	ldr	r3, [r7, #12]
 8019aa6:	68ba      	ldr	r2, [r7, #8]
 8019aa8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8019aaa:	68fb      	ldr	r3, [r7, #12]
 8019aac:	88fa      	ldrh	r2, [r7, #6]
 8019aae:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8019ab2:	68fb      	ldr	r3, [r7, #12]
 8019ab4:	88fa      	ldrh	r2, [r7, #6]
 8019ab6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8019aba:	68fb      	ldr	r3, [r7, #12]
 8019abc:	2200      	movs	r2, #0
 8019abe:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8019ac0:	68fb      	ldr	r3, [r7, #12]
 8019ac2:	2200      	movs	r2, #0
 8019ac4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8019ac6:	68fb      	ldr	r3, [r7, #12]
 8019ac8:	2200      	movs	r2, #0
 8019aca:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8019acc:	68fb      	ldr	r3, [r7, #12]
 8019ace:	2200      	movs	r2, #0
 8019ad0:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8019ad2:	68fb      	ldr	r3, [r7, #12]
 8019ad4:	2200      	movs	r2, #0
 8019ad6:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8019ad8:	68fb      	ldr	r3, [r7, #12]
 8019ada:	68db      	ldr	r3, [r3, #12]
 8019adc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8019ae0:	d908      	bls.n	8019af4 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8019ae2:	68fb      	ldr	r3, [r7, #12]
 8019ae4:	681b      	ldr	r3, [r3, #0]
 8019ae6:	685a      	ldr	r2, [r3, #4]
 8019ae8:	68fb      	ldr	r3, [r7, #12]
 8019aea:	681b      	ldr	r3, [r3, #0]
 8019aec:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8019af0:	605a      	str	r2, [r3, #4]
 8019af2:	e007      	b.n	8019b04 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8019af4:	68fb      	ldr	r3, [r7, #12]
 8019af6:	681b      	ldr	r3, [r3, #0]
 8019af8:	685a      	ldr	r2, [r3, #4]
 8019afa:	68fb      	ldr	r3, [r7, #12]
 8019afc:	681b      	ldr	r3, [r3, #0]
 8019afe:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8019b02:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8019b04:	68fb      	ldr	r3, [r7, #12]
 8019b06:	689b      	ldr	r3, [r3, #8]
 8019b08:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8019b0c:	d10f      	bne.n	8019b2e <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8019b0e:	68fb      	ldr	r3, [r7, #12]
 8019b10:	681b      	ldr	r3, [r3, #0]
 8019b12:	681a      	ldr	r2, [r3, #0]
 8019b14:	68fb      	ldr	r3, [r7, #12]
 8019b16:	681b      	ldr	r3, [r3, #0]
 8019b18:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8019b1c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8019b1e:	68fb      	ldr	r3, [r7, #12]
 8019b20:	681b      	ldr	r3, [r3, #0]
 8019b22:	681a      	ldr	r2, [r3, #0]
 8019b24:	68fb      	ldr	r3, [r7, #12]
 8019b26:	681b      	ldr	r3, [r3, #0]
 8019b28:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8019b2c:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8019b2e:	68fb      	ldr	r3, [r7, #12]
 8019b30:	681b      	ldr	r3, [r3, #0]
 8019b32:	681b      	ldr	r3, [r3, #0]
 8019b34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8019b38:	2b40      	cmp	r3, #64	; 0x40
 8019b3a:	d007      	beq.n	8019b4c <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8019b3c:	68fb      	ldr	r3, [r7, #12]
 8019b3e:	681b      	ldr	r3, [r3, #0]
 8019b40:	681a      	ldr	r2, [r3, #0]
 8019b42:	68fb      	ldr	r3, [r7, #12]
 8019b44:	681b      	ldr	r3, [r3, #0]
 8019b46:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8019b4a:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8019b4c:	68fb      	ldr	r3, [r7, #12]
 8019b4e:	68db      	ldr	r3, [r3, #12]
 8019b50:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8019b54:	d867      	bhi.n	8019c26 <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8019b56:	e030      	b.n	8019bba <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8019b58:	68fb      	ldr	r3, [r7, #12]
 8019b5a:	681b      	ldr	r3, [r3, #0]
 8019b5c:	689b      	ldr	r3, [r3, #8]
 8019b5e:	f003 0301 	and.w	r3, r3, #1
 8019b62:	2b01      	cmp	r3, #1
 8019b64:	d117      	bne.n	8019b96 <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8019b66:	68fb      	ldr	r3, [r7, #12]
 8019b68:	681b      	ldr	r3, [r3, #0]
 8019b6a:	f103 020c 	add.w	r2, r3, #12
 8019b6e:	68fb      	ldr	r3, [r7, #12]
 8019b70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8019b72:	7812      	ldrb	r2, [r2, #0]
 8019b74:	b2d2      	uxtb	r2, r2
 8019b76:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8019b78:	68fb      	ldr	r3, [r7, #12]
 8019b7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8019b7c:	1c5a      	adds	r2, r3, #1
 8019b7e:	68fb      	ldr	r3, [r7, #12]
 8019b80:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8019b82:	68fb      	ldr	r3, [r7, #12]
 8019b84:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8019b88:	b29b      	uxth	r3, r3
 8019b8a:	3b01      	subs	r3, #1
 8019b8c:	b29a      	uxth	r2, r3
 8019b8e:	68fb      	ldr	r3, [r7, #12]
 8019b90:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8019b94:	e011      	b.n	8019bba <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8019b96:	f7fa fcdb 	bl	8014550 <HAL_GetTick>
 8019b9a:	4602      	mov	r2, r0
 8019b9c:	693b      	ldr	r3, [r7, #16]
 8019b9e:	1ad3      	subs	r3, r2, r3
 8019ba0:	683a      	ldr	r2, [r7, #0]
 8019ba2:	429a      	cmp	r2, r3
 8019ba4:	d803      	bhi.n	8019bae <HAL_SPI_Receive+0x19c>
 8019ba6:	683b      	ldr	r3, [r7, #0]
 8019ba8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8019bac:	d102      	bne.n	8019bb4 <HAL_SPI_Receive+0x1a2>
 8019bae:	683b      	ldr	r3, [r7, #0]
 8019bb0:	2b00      	cmp	r3, #0
 8019bb2:	d102      	bne.n	8019bba <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 8019bb4:	2303      	movs	r3, #3
 8019bb6:	75fb      	strb	r3, [r7, #23]
          goto error;
 8019bb8:	e04e      	b.n	8019c58 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8019bba:	68fb      	ldr	r3, [r7, #12]
 8019bbc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8019bc0:	b29b      	uxth	r3, r3
 8019bc2:	2b00      	cmp	r3, #0
 8019bc4:	d1c8      	bne.n	8019b58 <HAL_SPI_Receive+0x146>
 8019bc6:	e034      	b.n	8019c32 <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8019bc8:	68fb      	ldr	r3, [r7, #12]
 8019bca:	681b      	ldr	r3, [r3, #0]
 8019bcc:	689b      	ldr	r3, [r3, #8]
 8019bce:	f003 0301 	and.w	r3, r3, #1
 8019bd2:	2b01      	cmp	r3, #1
 8019bd4:	d115      	bne.n	8019c02 <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8019bd6:	68fb      	ldr	r3, [r7, #12]
 8019bd8:	681b      	ldr	r3, [r3, #0]
 8019bda:	68da      	ldr	r2, [r3, #12]
 8019bdc:	68fb      	ldr	r3, [r7, #12]
 8019bde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8019be0:	b292      	uxth	r2, r2
 8019be2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8019be4:	68fb      	ldr	r3, [r7, #12]
 8019be6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8019be8:	1c9a      	adds	r2, r3, #2
 8019bea:	68fb      	ldr	r3, [r7, #12]
 8019bec:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8019bee:	68fb      	ldr	r3, [r7, #12]
 8019bf0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8019bf4:	b29b      	uxth	r3, r3
 8019bf6:	3b01      	subs	r3, #1
 8019bf8:	b29a      	uxth	r2, r3
 8019bfa:	68fb      	ldr	r3, [r7, #12]
 8019bfc:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8019c00:	e011      	b.n	8019c26 <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8019c02:	f7fa fca5 	bl	8014550 <HAL_GetTick>
 8019c06:	4602      	mov	r2, r0
 8019c08:	693b      	ldr	r3, [r7, #16]
 8019c0a:	1ad3      	subs	r3, r2, r3
 8019c0c:	683a      	ldr	r2, [r7, #0]
 8019c0e:	429a      	cmp	r2, r3
 8019c10:	d803      	bhi.n	8019c1a <HAL_SPI_Receive+0x208>
 8019c12:	683b      	ldr	r3, [r7, #0]
 8019c14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8019c18:	d102      	bne.n	8019c20 <HAL_SPI_Receive+0x20e>
 8019c1a:	683b      	ldr	r3, [r7, #0]
 8019c1c:	2b00      	cmp	r3, #0
 8019c1e:	d102      	bne.n	8019c26 <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 8019c20:	2303      	movs	r3, #3
 8019c22:	75fb      	strb	r3, [r7, #23]
          goto error;
 8019c24:	e018      	b.n	8019c58 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8019c26:	68fb      	ldr	r3, [r7, #12]
 8019c28:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8019c2c:	b29b      	uxth	r3, r3
 8019c2e:	2b00      	cmp	r3, #0
 8019c30:	d1ca      	bne.n	8019bc8 <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8019c32:	693a      	ldr	r2, [r7, #16]
 8019c34:	6839      	ldr	r1, [r7, #0]
 8019c36:	68f8      	ldr	r0, [r7, #12]
 8019c38:	f000 fb4c 	bl	801a2d4 <SPI_EndRxTransaction>
 8019c3c:	4603      	mov	r3, r0
 8019c3e:	2b00      	cmp	r3, #0
 8019c40:	d002      	beq.n	8019c48 <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8019c42:	68fb      	ldr	r3, [r7, #12]
 8019c44:	2220      	movs	r2, #32
 8019c46:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8019c48:	68fb      	ldr	r3, [r7, #12]
 8019c4a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8019c4c:	2b00      	cmp	r3, #0
 8019c4e:	d002      	beq.n	8019c56 <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 8019c50:	2301      	movs	r3, #1
 8019c52:	75fb      	strb	r3, [r7, #23]
 8019c54:	e000      	b.n	8019c58 <HAL_SPI_Receive+0x246>
  }

error :
 8019c56:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8019c58:	68fb      	ldr	r3, [r7, #12]
 8019c5a:	2201      	movs	r2, #1
 8019c5c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8019c60:	68fb      	ldr	r3, [r7, #12]
 8019c62:	2200      	movs	r2, #0
 8019c64:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8019c68:	7dfb      	ldrb	r3, [r7, #23]
}
 8019c6a:	4618      	mov	r0, r3
 8019c6c:	3718      	adds	r7, #24
 8019c6e:	46bd      	mov	sp, r7
 8019c70:	bd80      	pop	{r7, pc}

08019c72 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8019c72:	b580      	push	{r7, lr}
 8019c74:	b08a      	sub	sp, #40	; 0x28
 8019c76:	af00      	add	r7, sp, #0
 8019c78:	60f8      	str	r0, [r7, #12]
 8019c7a:	60b9      	str	r1, [r7, #8]
 8019c7c:	607a      	str	r2, [r7, #4]
 8019c7e:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8019c80:	2301      	movs	r3, #1
 8019c82:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8019c84:	2300      	movs	r3, #0
 8019c86:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8019c8a:	68fb      	ldr	r3, [r7, #12]
 8019c8c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8019c90:	2b01      	cmp	r3, #1
 8019c92:	d101      	bne.n	8019c98 <HAL_SPI_TransmitReceive+0x26>
 8019c94:	2302      	movs	r3, #2
 8019c96:	e1fb      	b.n	801a090 <HAL_SPI_TransmitReceive+0x41e>
 8019c98:	68fb      	ldr	r3, [r7, #12]
 8019c9a:	2201      	movs	r2, #1
 8019c9c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8019ca0:	f7fa fc56 	bl	8014550 <HAL_GetTick>
 8019ca4:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8019ca6:	68fb      	ldr	r3, [r7, #12]
 8019ca8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8019cac:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8019cae:	68fb      	ldr	r3, [r7, #12]
 8019cb0:	685b      	ldr	r3, [r3, #4]
 8019cb2:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8019cb4:	887b      	ldrh	r3, [r7, #2]
 8019cb6:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8019cb8:	887b      	ldrh	r3, [r7, #2]
 8019cba:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8019cbc:	7efb      	ldrb	r3, [r7, #27]
 8019cbe:	2b01      	cmp	r3, #1
 8019cc0:	d00e      	beq.n	8019ce0 <HAL_SPI_TransmitReceive+0x6e>
 8019cc2:	697b      	ldr	r3, [r7, #20]
 8019cc4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8019cc8:	d106      	bne.n	8019cd8 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8019cca:	68fb      	ldr	r3, [r7, #12]
 8019ccc:	689b      	ldr	r3, [r3, #8]
 8019cce:	2b00      	cmp	r3, #0
 8019cd0:	d102      	bne.n	8019cd8 <HAL_SPI_TransmitReceive+0x66>
 8019cd2:	7efb      	ldrb	r3, [r7, #27]
 8019cd4:	2b04      	cmp	r3, #4
 8019cd6:	d003      	beq.n	8019ce0 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8019cd8:	2302      	movs	r3, #2
 8019cda:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8019cde:	e1cd      	b.n	801a07c <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8019ce0:	68bb      	ldr	r3, [r7, #8]
 8019ce2:	2b00      	cmp	r3, #0
 8019ce4:	d005      	beq.n	8019cf2 <HAL_SPI_TransmitReceive+0x80>
 8019ce6:	687b      	ldr	r3, [r7, #4]
 8019ce8:	2b00      	cmp	r3, #0
 8019cea:	d002      	beq.n	8019cf2 <HAL_SPI_TransmitReceive+0x80>
 8019cec:	887b      	ldrh	r3, [r7, #2]
 8019cee:	2b00      	cmp	r3, #0
 8019cf0:	d103      	bne.n	8019cfa <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8019cf2:	2301      	movs	r3, #1
 8019cf4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8019cf8:	e1c0      	b.n	801a07c <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8019cfa:	68fb      	ldr	r3, [r7, #12]
 8019cfc:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8019d00:	b2db      	uxtb	r3, r3
 8019d02:	2b04      	cmp	r3, #4
 8019d04:	d003      	beq.n	8019d0e <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8019d06:	68fb      	ldr	r3, [r7, #12]
 8019d08:	2205      	movs	r2, #5
 8019d0a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8019d0e:	68fb      	ldr	r3, [r7, #12]
 8019d10:	2200      	movs	r2, #0
 8019d12:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8019d14:	68fb      	ldr	r3, [r7, #12]
 8019d16:	687a      	ldr	r2, [r7, #4]
 8019d18:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8019d1a:	68fb      	ldr	r3, [r7, #12]
 8019d1c:	887a      	ldrh	r2, [r7, #2]
 8019d1e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8019d22:	68fb      	ldr	r3, [r7, #12]
 8019d24:	887a      	ldrh	r2, [r7, #2]
 8019d26:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8019d2a:	68fb      	ldr	r3, [r7, #12]
 8019d2c:	68ba      	ldr	r2, [r7, #8]
 8019d2e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8019d30:	68fb      	ldr	r3, [r7, #12]
 8019d32:	887a      	ldrh	r2, [r7, #2]
 8019d34:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8019d36:	68fb      	ldr	r3, [r7, #12]
 8019d38:	887a      	ldrh	r2, [r7, #2]
 8019d3a:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8019d3c:	68fb      	ldr	r3, [r7, #12]
 8019d3e:	2200      	movs	r2, #0
 8019d40:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8019d42:	68fb      	ldr	r3, [r7, #12]
 8019d44:	2200      	movs	r2, #0
 8019d46:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8019d48:	68fb      	ldr	r3, [r7, #12]
 8019d4a:	68db      	ldr	r3, [r3, #12]
 8019d4c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8019d50:	d802      	bhi.n	8019d58 <HAL_SPI_TransmitReceive+0xe6>
 8019d52:	8a3b      	ldrh	r3, [r7, #16]
 8019d54:	2b01      	cmp	r3, #1
 8019d56:	d908      	bls.n	8019d6a <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8019d58:	68fb      	ldr	r3, [r7, #12]
 8019d5a:	681b      	ldr	r3, [r3, #0]
 8019d5c:	685a      	ldr	r2, [r3, #4]
 8019d5e:	68fb      	ldr	r3, [r7, #12]
 8019d60:	681b      	ldr	r3, [r3, #0]
 8019d62:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8019d66:	605a      	str	r2, [r3, #4]
 8019d68:	e007      	b.n	8019d7a <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8019d6a:	68fb      	ldr	r3, [r7, #12]
 8019d6c:	681b      	ldr	r3, [r3, #0]
 8019d6e:	685a      	ldr	r2, [r3, #4]
 8019d70:	68fb      	ldr	r3, [r7, #12]
 8019d72:	681b      	ldr	r3, [r3, #0]
 8019d74:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8019d78:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8019d7a:	68fb      	ldr	r3, [r7, #12]
 8019d7c:	681b      	ldr	r3, [r3, #0]
 8019d7e:	681b      	ldr	r3, [r3, #0]
 8019d80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8019d84:	2b40      	cmp	r3, #64	; 0x40
 8019d86:	d007      	beq.n	8019d98 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8019d88:	68fb      	ldr	r3, [r7, #12]
 8019d8a:	681b      	ldr	r3, [r3, #0]
 8019d8c:	681a      	ldr	r2, [r3, #0]
 8019d8e:	68fb      	ldr	r3, [r7, #12]
 8019d90:	681b      	ldr	r3, [r3, #0]
 8019d92:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8019d96:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8019d98:	68fb      	ldr	r3, [r7, #12]
 8019d9a:	68db      	ldr	r3, [r3, #12]
 8019d9c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8019da0:	d97c      	bls.n	8019e9c <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8019da2:	68fb      	ldr	r3, [r7, #12]
 8019da4:	685b      	ldr	r3, [r3, #4]
 8019da6:	2b00      	cmp	r3, #0
 8019da8:	d002      	beq.n	8019db0 <HAL_SPI_TransmitReceive+0x13e>
 8019daa:	8a7b      	ldrh	r3, [r7, #18]
 8019dac:	2b01      	cmp	r3, #1
 8019dae:	d169      	bne.n	8019e84 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8019db0:	68fb      	ldr	r3, [r7, #12]
 8019db2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8019db4:	881a      	ldrh	r2, [r3, #0]
 8019db6:	68fb      	ldr	r3, [r7, #12]
 8019db8:	681b      	ldr	r3, [r3, #0]
 8019dba:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8019dbc:	68fb      	ldr	r3, [r7, #12]
 8019dbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8019dc0:	1c9a      	adds	r2, r3, #2
 8019dc2:	68fb      	ldr	r3, [r7, #12]
 8019dc4:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8019dc6:	68fb      	ldr	r3, [r7, #12]
 8019dc8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8019dca:	b29b      	uxth	r3, r3
 8019dcc:	3b01      	subs	r3, #1
 8019dce:	b29a      	uxth	r2, r3
 8019dd0:	68fb      	ldr	r3, [r7, #12]
 8019dd2:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8019dd4:	e056      	b.n	8019e84 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8019dd6:	68fb      	ldr	r3, [r7, #12]
 8019dd8:	681b      	ldr	r3, [r3, #0]
 8019dda:	689b      	ldr	r3, [r3, #8]
 8019ddc:	f003 0302 	and.w	r3, r3, #2
 8019de0:	2b02      	cmp	r3, #2
 8019de2:	d11b      	bne.n	8019e1c <HAL_SPI_TransmitReceive+0x1aa>
 8019de4:	68fb      	ldr	r3, [r7, #12]
 8019de6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8019de8:	b29b      	uxth	r3, r3
 8019dea:	2b00      	cmp	r3, #0
 8019dec:	d016      	beq.n	8019e1c <HAL_SPI_TransmitReceive+0x1aa>
 8019dee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019df0:	2b01      	cmp	r3, #1
 8019df2:	d113      	bne.n	8019e1c <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8019df4:	68fb      	ldr	r3, [r7, #12]
 8019df6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8019df8:	881a      	ldrh	r2, [r3, #0]
 8019dfa:	68fb      	ldr	r3, [r7, #12]
 8019dfc:	681b      	ldr	r3, [r3, #0]
 8019dfe:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8019e00:	68fb      	ldr	r3, [r7, #12]
 8019e02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8019e04:	1c9a      	adds	r2, r3, #2
 8019e06:	68fb      	ldr	r3, [r7, #12]
 8019e08:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8019e0a:	68fb      	ldr	r3, [r7, #12]
 8019e0c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8019e0e:	b29b      	uxth	r3, r3
 8019e10:	3b01      	subs	r3, #1
 8019e12:	b29a      	uxth	r2, r3
 8019e14:	68fb      	ldr	r3, [r7, #12]
 8019e16:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8019e18:	2300      	movs	r3, #0
 8019e1a:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8019e1c:	68fb      	ldr	r3, [r7, #12]
 8019e1e:	681b      	ldr	r3, [r3, #0]
 8019e20:	689b      	ldr	r3, [r3, #8]
 8019e22:	f003 0301 	and.w	r3, r3, #1
 8019e26:	2b01      	cmp	r3, #1
 8019e28:	d11c      	bne.n	8019e64 <HAL_SPI_TransmitReceive+0x1f2>
 8019e2a:	68fb      	ldr	r3, [r7, #12]
 8019e2c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8019e30:	b29b      	uxth	r3, r3
 8019e32:	2b00      	cmp	r3, #0
 8019e34:	d016      	beq.n	8019e64 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8019e36:	68fb      	ldr	r3, [r7, #12]
 8019e38:	681b      	ldr	r3, [r3, #0]
 8019e3a:	68da      	ldr	r2, [r3, #12]
 8019e3c:	68fb      	ldr	r3, [r7, #12]
 8019e3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8019e40:	b292      	uxth	r2, r2
 8019e42:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8019e44:	68fb      	ldr	r3, [r7, #12]
 8019e46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8019e48:	1c9a      	adds	r2, r3, #2
 8019e4a:	68fb      	ldr	r3, [r7, #12]
 8019e4c:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8019e4e:	68fb      	ldr	r3, [r7, #12]
 8019e50:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8019e54:	b29b      	uxth	r3, r3
 8019e56:	3b01      	subs	r3, #1
 8019e58:	b29a      	uxth	r2, r3
 8019e5a:	68fb      	ldr	r3, [r7, #12]
 8019e5c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8019e60:	2301      	movs	r3, #1
 8019e62:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8019e64:	f7fa fb74 	bl	8014550 <HAL_GetTick>
 8019e68:	4602      	mov	r2, r0
 8019e6a:	69fb      	ldr	r3, [r7, #28]
 8019e6c:	1ad3      	subs	r3, r2, r3
 8019e6e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8019e70:	429a      	cmp	r2, r3
 8019e72:	d807      	bhi.n	8019e84 <HAL_SPI_TransmitReceive+0x212>
 8019e74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019e76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8019e7a:	d003      	beq.n	8019e84 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8019e7c:	2303      	movs	r3, #3
 8019e7e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8019e82:	e0fb      	b.n	801a07c <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8019e84:	68fb      	ldr	r3, [r7, #12]
 8019e86:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8019e88:	b29b      	uxth	r3, r3
 8019e8a:	2b00      	cmp	r3, #0
 8019e8c:	d1a3      	bne.n	8019dd6 <HAL_SPI_TransmitReceive+0x164>
 8019e8e:	68fb      	ldr	r3, [r7, #12]
 8019e90:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8019e94:	b29b      	uxth	r3, r3
 8019e96:	2b00      	cmp	r3, #0
 8019e98:	d19d      	bne.n	8019dd6 <HAL_SPI_TransmitReceive+0x164>
 8019e9a:	e0df      	b.n	801a05c <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8019e9c:	68fb      	ldr	r3, [r7, #12]
 8019e9e:	685b      	ldr	r3, [r3, #4]
 8019ea0:	2b00      	cmp	r3, #0
 8019ea2:	d003      	beq.n	8019eac <HAL_SPI_TransmitReceive+0x23a>
 8019ea4:	8a7b      	ldrh	r3, [r7, #18]
 8019ea6:	2b01      	cmp	r3, #1
 8019ea8:	f040 80cb 	bne.w	801a042 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8019eac:	68fb      	ldr	r3, [r7, #12]
 8019eae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8019eb0:	b29b      	uxth	r3, r3
 8019eb2:	2b01      	cmp	r3, #1
 8019eb4:	d912      	bls.n	8019edc <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8019eb6:	68fb      	ldr	r3, [r7, #12]
 8019eb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8019eba:	881a      	ldrh	r2, [r3, #0]
 8019ebc:	68fb      	ldr	r3, [r7, #12]
 8019ebe:	681b      	ldr	r3, [r3, #0]
 8019ec0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8019ec2:	68fb      	ldr	r3, [r7, #12]
 8019ec4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8019ec6:	1c9a      	adds	r2, r3, #2
 8019ec8:	68fb      	ldr	r3, [r7, #12]
 8019eca:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8019ecc:	68fb      	ldr	r3, [r7, #12]
 8019ece:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8019ed0:	b29b      	uxth	r3, r3
 8019ed2:	3b02      	subs	r3, #2
 8019ed4:	b29a      	uxth	r2, r3
 8019ed6:	68fb      	ldr	r3, [r7, #12]
 8019ed8:	87da      	strh	r2, [r3, #62]	; 0x3e
 8019eda:	e0b2      	b.n	801a042 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8019edc:	68fb      	ldr	r3, [r7, #12]
 8019ede:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8019ee0:	68fb      	ldr	r3, [r7, #12]
 8019ee2:	681b      	ldr	r3, [r3, #0]
 8019ee4:	330c      	adds	r3, #12
 8019ee6:	7812      	ldrb	r2, [r2, #0]
 8019ee8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8019eea:	68fb      	ldr	r3, [r7, #12]
 8019eec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8019eee:	1c5a      	adds	r2, r3, #1
 8019ef0:	68fb      	ldr	r3, [r7, #12]
 8019ef2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8019ef4:	68fb      	ldr	r3, [r7, #12]
 8019ef6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8019ef8:	b29b      	uxth	r3, r3
 8019efa:	3b01      	subs	r3, #1
 8019efc:	b29a      	uxth	r2, r3
 8019efe:	68fb      	ldr	r3, [r7, #12]
 8019f00:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8019f02:	e09e      	b.n	801a042 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8019f04:	68fb      	ldr	r3, [r7, #12]
 8019f06:	681b      	ldr	r3, [r3, #0]
 8019f08:	689b      	ldr	r3, [r3, #8]
 8019f0a:	f003 0302 	and.w	r3, r3, #2
 8019f0e:	2b02      	cmp	r3, #2
 8019f10:	d134      	bne.n	8019f7c <HAL_SPI_TransmitReceive+0x30a>
 8019f12:	68fb      	ldr	r3, [r7, #12]
 8019f14:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8019f16:	b29b      	uxth	r3, r3
 8019f18:	2b00      	cmp	r3, #0
 8019f1a:	d02f      	beq.n	8019f7c <HAL_SPI_TransmitReceive+0x30a>
 8019f1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019f1e:	2b01      	cmp	r3, #1
 8019f20:	d12c      	bne.n	8019f7c <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8019f22:	68fb      	ldr	r3, [r7, #12]
 8019f24:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8019f26:	b29b      	uxth	r3, r3
 8019f28:	2b01      	cmp	r3, #1
 8019f2a:	d912      	bls.n	8019f52 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8019f2c:	68fb      	ldr	r3, [r7, #12]
 8019f2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8019f30:	881a      	ldrh	r2, [r3, #0]
 8019f32:	68fb      	ldr	r3, [r7, #12]
 8019f34:	681b      	ldr	r3, [r3, #0]
 8019f36:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8019f38:	68fb      	ldr	r3, [r7, #12]
 8019f3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8019f3c:	1c9a      	adds	r2, r3, #2
 8019f3e:	68fb      	ldr	r3, [r7, #12]
 8019f40:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8019f42:	68fb      	ldr	r3, [r7, #12]
 8019f44:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8019f46:	b29b      	uxth	r3, r3
 8019f48:	3b02      	subs	r3, #2
 8019f4a:	b29a      	uxth	r2, r3
 8019f4c:	68fb      	ldr	r3, [r7, #12]
 8019f4e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8019f50:	e012      	b.n	8019f78 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8019f52:	68fb      	ldr	r3, [r7, #12]
 8019f54:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8019f56:	68fb      	ldr	r3, [r7, #12]
 8019f58:	681b      	ldr	r3, [r3, #0]
 8019f5a:	330c      	adds	r3, #12
 8019f5c:	7812      	ldrb	r2, [r2, #0]
 8019f5e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8019f60:	68fb      	ldr	r3, [r7, #12]
 8019f62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8019f64:	1c5a      	adds	r2, r3, #1
 8019f66:	68fb      	ldr	r3, [r7, #12]
 8019f68:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8019f6a:	68fb      	ldr	r3, [r7, #12]
 8019f6c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8019f6e:	b29b      	uxth	r3, r3
 8019f70:	3b01      	subs	r3, #1
 8019f72:	b29a      	uxth	r2, r3
 8019f74:	68fb      	ldr	r3, [r7, #12]
 8019f76:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8019f78:	2300      	movs	r3, #0
 8019f7a:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8019f7c:	68fb      	ldr	r3, [r7, #12]
 8019f7e:	681b      	ldr	r3, [r3, #0]
 8019f80:	689b      	ldr	r3, [r3, #8]
 8019f82:	f003 0301 	and.w	r3, r3, #1
 8019f86:	2b01      	cmp	r3, #1
 8019f88:	d148      	bne.n	801a01c <HAL_SPI_TransmitReceive+0x3aa>
 8019f8a:	68fb      	ldr	r3, [r7, #12]
 8019f8c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8019f90:	b29b      	uxth	r3, r3
 8019f92:	2b00      	cmp	r3, #0
 8019f94:	d042      	beq.n	801a01c <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8019f96:	68fb      	ldr	r3, [r7, #12]
 8019f98:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8019f9c:	b29b      	uxth	r3, r3
 8019f9e:	2b01      	cmp	r3, #1
 8019fa0:	d923      	bls.n	8019fea <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8019fa2:	68fb      	ldr	r3, [r7, #12]
 8019fa4:	681b      	ldr	r3, [r3, #0]
 8019fa6:	68da      	ldr	r2, [r3, #12]
 8019fa8:	68fb      	ldr	r3, [r7, #12]
 8019faa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8019fac:	b292      	uxth	r2, r2
 8019fae:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8019fb0:	68fb      	ldr	r3, [r7, #12]
 8019fb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8019fb4:	1c9a      	adds	r2, r3, #2
 8019fb6:	68fb      	ldr	r3, [r7, #12]
 8019fb8:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8019fba:	68fb      	ldr	r3, [r7, #12]
 8019fbc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8019fc0:	b29b      	uxth	r3, r3
 8019fc2:	3b02      	subs	r3, #2
 8019fc4:	b29a      	uxth	r2, r3
 8019fc6:	68fb      	ldr	r3, [r7, #12]
 8019fc8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8019fcc:	68fb      	ldr	r3, [r7, #12]
 8019fce:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8019fd2:	b29b      	uxth	r3, r3
 8019fd4:	2b01      	cmp	r3, #1
 8019fd6:	d81f      	bhi.n	801a018 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8019fd8:	68fb      	ldr	r3, [r7, #12]
 8019fda:	681b      	ldr	r3, [r3, #0]
 8019fdc:	685a      	ldr	r2, [r3, #4]
 8019fde:	68fb      	ldr	r3, [r7, #12]
 8019fe0:	681b      	ldr	r3, [r3, #0]
 8019fe2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8019fe6:	605a      	str	r2, [r3, #4]
 8019fe8:	e016      	b.n	801a018 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8019fea:	68fb      	ldr	r3, [r7, #12]
 8019fec:	681b      	ldr	r3, [r3, #0]
 8019fee:	f103 020c 	add.w	r2, r3, #12
 8019ff2:	68fb      	ldr	r3, [r7, #12]
 8019ff4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8019ff6:	7812      	ldrb	r2, [r2, #0]
 8019ff8:	b2d2      	uxtb	r2, r2
 8019ffa:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8019ffc:	68fb      	ldr	r3, [r7, #12]
 8019ffe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801a000:	1c5a      	adds	r2, r3, #1
 801a002:	68fb      	ldr	r3, [r7, #12]
 801a004:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 801a006:	68fb      	ldr	r3, [r7, #12]
 801a008:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 801a00c:	b29b      	uxth	r3, r3
 801a00e:	3b01      	subs	r3, #1
 801a010:	b29a      	uxth	r2, r3
 801a012:	68fb      	ldr	r3, [r7, #12]
 801a014:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 801a018:	2301      	movs	r3, #1
 801a01a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 801a01c:	f7fa fa98 	bl	8014550 <HAL_GetTick>
 801a020:	4602      	mov	r2, r0
 801a022:	69fb      	ldr	r3, [r7, #28]
 801a024:	1ad3      	subs	r3, r2, r3
 801a026:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801a028:	429a      	cmp	r2, r3
 801a02a:	d803      	bhi.n	801a034 <HAL_SPI_TransmitReceive+0x3c2>
 801a02c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a02e:	f1b3 3fff 	cmp.w	r3, #4294967295
 801a032:	d102      	bne.n	801a03a <HAL_SPI_TransmitReceive+0x3c8>
 801a034:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a036:	2b00      	cmp	r3, #0
 801a038:	d103      	bne.n	801a042 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 801a03a:	2303      	movs	r3, #3
 801a03c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 801a040:	e01c      	b.n	801a07c <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 801a042:	68fb      	ldr	r3, [r7, #12]
 801a044:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801a046:	b29b      	uxth	r3, r3
 801a048:	2b00      	cmp	r3, #0
 801a04a:	f47f af5b 	bne.w	8019f04 <HAL_SPI_TransmitReceive+0x292>
 801a04e:	68fb      	ldr	r3, [r7, #12]
 801a050:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 801a054:	b29b      	uxth	r3, r3
 801a056:	2b00      	cmp	r3, #0
 801a058:	f47f af54 	bne.w	8019f04 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 801a05c:	69fa      	ldr	r2, [r7, #28]
 801a05e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801a060:	68f8      	ldr	r0, [r7, #12]
 801a062:	f000 f98f 	bl	801a384 <SPI_EndRxTxTransaction>
 801a066:	4603      	mov	r3, r0
 801a068:	2b00      	cmp	r3, #0
 801a06a:	d006      	beq.n	801a07a <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 801a06c:	2301      	movs	r3, #1
 801a06e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 801a072:	68fb      	ldr	r3, [r7, #12]
 801a074:	2220      	movs	r2, #32
 801a076:	661a      	str	r2, [r3, #96]	; 0x60
 801a078:	e000      	b.n	801a07c <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 801a07a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 801a07c:	68fb      	ldr	r3, [r7, #12]
 801a07e:	2201      	movs	r2, #1
 801a080:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 801a084:	68fb      	ldr	r3, [r7, #12]
 801a086:	2200      	movs	r2, #0
 801a088:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 801a08c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 801a090:	4618      	mov	r0, r3
 801a092:	3728      	adds	r7, #40	; 0x28
 801a094:	46bd      	mov	sp, r7
 801a096:	bd80      	pop	{r7, pc}

0801a098 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 801a098:	b580      	push	{r7, lr}
 801a09a:	b088      	sub	sp, #32
 801a09c:	af00      	add	r7, sp, #0
 801a09e:	60f8      	str	r0, [r7, #12]
 801a0a0:	60b9      	str	r1, [r7, #8]
 801a0a2:	603b      	str	r3, [r7, #0]
 801a0a4:	4613      	mov	r3, r2
 801a0a6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 801a0a8:	f7fa fa52 	bl	8014550 <HAL_GetTick>
 801a0ac:	4602      	mov	r2, r0
 801a0ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a0b0:	1a9b      	subs	r3, r3, r2
 801a0b2:	683a      	ldr	r2, [r7, #0]
 801a0b4:	4413      	add	r3, r2
 801a0b6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 801a0b8:	f7fa fa4a 	bl	8014550 <HAL_GetTick>
 801a0bc:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 801a0be:	4b39      	ldr	r3, [pc, #228]	; (801a1a4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 801a0c0:	681b      	ldr	r3, [r3, #0]
 801a0c2:	015b      	lsls	r3, r3, #5
 801a0c4:	0d1b      	lsrs	r3, r3, #20
 801a0c6:	69fa      	ldr	r2, [r7, #28]
 801a0c8:	fb02 f303 	mul.w	r3, r2, r3
 801a0cc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 801a0ce:	e054      	b.n	801a17a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 801a0d0:	683b      	ldr	r3, [r7, #0]
 801a0d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 801a0d6:	d050      	beq.n	801a17a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 801a0d8:	f7fa fa3a 	bl	8014550 <HAL_GetTick>
 801a0dc:	4602      	mov	r2, r0
 801a0de:	69bb      	ldr	r3, [r7, #24]
 801a0e0:	1ad3      	subs	r3, r2, r3
 801a0e2:	69fa      	ldr	r2, [r7, #28]
 801a0e4:	429a      	cmp	r2, r3
 801a0e6:	d902      	bls.n	801a0ee <SPI_WaitFlagStateUntilTimeout+0x56>
 801a0e8:	69fb      	ldr	r3, [r7, #28]
 801a0ea:	2b00      	cmp	r3, #0
 801a0ec:	d13d      	bne.n	801a16a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 801a0ee:	68fb      	ldr	r3, [r7, #12]
 801a0f0:	681b      	ldr	r3, [r3, #0]
 801a0f2:	685a      	ldr	r2, [r3, #4]
 801a0f4:	68fb      	ldr	r3, [r7, #12]
 801a0f6:	681b      	ldr	r3, [r3, #0]
 801a0f8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 801a0fc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 801a0fe:	68fb      	ldr	r3, [r7, #12]
 801a100:	685b      	ldr	r3, [r3, #4]
 801a102:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 801a106:	d111      	bne.n	801a12c <SPI_WaitFlagStateUntilTimeout+0x94>
 801a108:	68fb      	ldr	r3, [r7, #12]
 801a10a:	689b      	ldr	r3, [r3, #8]
 801a10c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801a110:	d004      	beq.n	801a11c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 801a112:	68fb      	ldr	r3, [r7, #12]
 801a114:	689b      	ldr	r3, [r3, #8]
 801a116:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801a11a:	d107      	bne.n	801a12c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 801a11c:	68fb      	ldr	r3, [r7, #12]
 801a11e:	681b      	ldr	r3, [r3, #0]
 801a120:	681a      	ldr	r2, [r3, #0]
 801a122:	68fb      	ldr	r3, [r7, #12]
 801a124:	681b      	ldr	r3, [r3, #0]
 801a126:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801a12a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 801a12c:	68fb      	ldr	r3, [r7, #12]
 801a12e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801a130:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801a134:	d10f      	bne.n	801a156 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 801a136:	68fb      	ldr	r3, [r7, #12]
 801a138:	681b      	ldr	r3, [r3, #0]
 801a13a:	681a      	ldr	r2, [r3, #0]
 801a13c:	68fb      	ldr	r3, [r7, #12]
 801a13e:	681b      	ldr	r3, [r3, #0]
 801a140:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 801a144:	601a      	str	r2, [r3, #0]
 801a146:	68fb      	ldr	r3, [r7, #12]
 801a148:	681b      	ldr	r3, [r3, #0]
 801a14a:	681a      	ldr	r2, [r3, #0]
 801a14c:	68fb      	ldr	r3, [r7, #12]
 801a14e:	681b      	ldr	r3, [r3, #0]
 801a150:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 801a154:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 801a156:	68fb      	ldr	r3, [r7, #12]
 801a158:	2201      	movs	r2, #1
 801a15a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 801a15e:	68fb      	ldr	r3, [r7, #12]
 801a160:	2200      	movs	r2, #0
 801a162:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 801a166:	2303      	movs	r3, #3
 801a168:	e017      	b.n	801a19a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 801a16a:	697b      	ldr	r3, [r7, #20]
 801a16c:	2b00      	cmp	r3, #0
 801a16e:	d101      	bne.n	801a174 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 801a170:	2300      	movs	r3, #0
 801a172:	61fb      	str	r3, [r7, #28]
      }
      count--;
 801a174:	697b      	ldr	r3, [r7, #20]
 801a176:	3b01      	subs	r3, #1
 801a178:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 801a17a:	68fb      	ldr	r3, [r7, #12]
 801a17c:	681b      	ldr	r3, [r3, #0]
 801a17e:	689a      	ldr	r2, [r3, #8]
 801a180:	68bb      	ldr	r3, [r7, #8]
 801a182:	4013      	ands	r3, r2
 801a184:	68ba      	ldr	r2, [r7, #8]
 801a186:	429a      	cmp	r2, r3
 801a188:	bf0c      	ite	eq
 801a18a:	2301      	moveq	r3, #1
 801a18c:	2300      	movne	r3, #0
 801a18e:	b2db      	uxtb	r3, r3
 801a190:	461a      	mov	r2, r3
 801a192:	79fb      	ldrb	r3, [r7, #7]
 801a194:	429a      	cmp	r2, r3
 801a196:	d19b      	bne.n	801a0d0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 801a198:	2300      	movs	r3, #0
}
 801a19a:	4618      	mov	r0, r3
 801a19c:	3720      	adds	r7, #32
 801a19e:	46bd      	mov	sp, r7
 801a1a0:	bd80      	pop	{r7, pc}
 801a1a2:	bf00      	nop
 801a1a4:	20000090 	.word	0x20000090

0801a1a8 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 801a1a8:	b580      	push	{r7, lr}
 801a1aa:	b08a      	sub	sp, #40	; 0x28
 801a1ac:	af00      	add	r7, sp, #0
 801a1ae:	60f8      	str	r0, [r7, #12]
 801a1b0:	60b9      	str	r1, [r7, #8]
 801a1b2:	607a      	str	r2, [r7, #4]
 801a1b4:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 801a1b6:	2300      	movs	r3, #0
 801a1b8:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 801a1ba:	f7fa f9c9 	bl	8014550 <HAL_GetTick>
 801a1be:	4602      	mov	r2, r0
 801a1c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a1c2:	1a9b      	subs	r3, r3, r2
 801a1c4:	683a      	ldr	r2, [r7, #0]
 801a1c6:	4413      	add	r3, r2
 801a1c8:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 801a1ca:	f7fa f9c1 	bl	8014550 <HAL_GetTick>
 801a1ce:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 801a1d0:	68fb      	ldr	r3, [r7, #12]
 801a1d2:	681b      	ldr	r3, [r3, #0]
 801a1d4:	330c      	adds	r3, #12
 801a1d6:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 801a1d8:	4b3d      	ldr	r3, [pc, #244]	; (801a2d0 <SPI_WaitFifoStateUntilTimeout+0x128>)
 801a1da:	681a      	ldr	r2, [r3, #0]
 801a1dc:	4613      	mov	r3, r2
 801a1de:	009b      	lsls	r3, r3, #2
 801a1e0:	4413      	add	r3, r2
 801a1e2:	00da      	lsls	r2, r3, #3
 801a1e4:	1ad3      	subs	r3, r2, r3
 801a1e6:	0d1b      	lsrs	r3, r3, #20
 801a1e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801a1ea:	fb02 f303 	mul.w	r3, r2, r3
 801a1ee:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 801a1f0:	e060      	b.n	801a2b4 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 801a1f2:	68bb      	ldr	r3, [r7, #8]
 801a1f4:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 801a1f8:	d107      	bne.n	801a20a <SPI_WaitFifoStateUntilTimeout+0x62>
 801a1fa:	687b      	ldr	r3, [r7, #4]
 801a1fc:	2b00      	cmp	r3, #0
 801a1fe:	d104      	bne.n	801a20a <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 801a200:	69fb      	ldr	r3, [r7, #28]
 801a202:	781b      	ldrb	r3, [r3, #0]
 801a204:	b2db      	uxtb	r3, r3
 801a206:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 801a208:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 801a20a:	683b      	ldr	r3, [r7, #0]
 801a20c:	f1b3 3fff 	cmp.w	r3, #4294967295
 801a210:	d050      	beq.n	801a2b4 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 801a212:	f7fa f99d 	bl	8014550 <HAL_GetTick>
 801a216:	4602      	mov	r2, r0
 801a218:	6a3b      	ldr	r3, [r7, #32]
 801a21a:	1ad3      	subs	r3, r2, r3
 801a21c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801a21e:	429a      	cmp	r2, r3
 801a220:	d902      	bls.n	801a228 <SPI_WaitFifoStateUntilTimeout+0x80>
 801a222:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a224:	2b00      	cmp	r3, #0
 801a226:	d13d      	bne.n	801a2a4 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 801a228:	68fb      	ldr	r3, [r7, #12]
 801a22a:	681b      	ldr	r3, [r3, #0]
 801a22c:	685a      	ldr	r2, [r3, #4]
 801a22e:	68fb      	ldr	r3, [r7, #12]
 801a230:	681b      	ldr	r3, [r3, #0]
 801a232:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 801a236:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 801a238:	68fb      	ldr	r3, [r7, #12]
 801a23a:	685b      	ldr	r3, [r3, #4]
 801a23c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 801a240:	d111      	bne.n	801a266 <SPI_WaitFifoStateUntilTimeout+0xbe>
 801a242:	68fb      	ldr	r3, [r7, #12]
 801a244:	689b      	ldr	r3, [r3, #8]
 801a246:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801a24a:	d004      	beq.n	801a256 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 801a24c:	68fb      	ldr	r3, [r7, #12]
 801a24e:	689b      	ldr	r3, [r3, #8]
 801a250:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801a254:	d107      	bne.n	801a266 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 801a256:	68fb      	ldr	r3, [r7, #12]
 801a258:	681b      	ldr	r3, [r3, #0]
 801a25a:	681a      	ldr	r2, [r3, #0]
 801a25c:	68fb      	ldr	r3, [r7, #12]
 801a25e:	681b      	ldr	r3, [r3, #0]
 801a260:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801a264:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 801a266:	68fb      	ldr	r3, [r7, #12]
 801a268:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801a26a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801a26e:	d10f      	bne.n	801a290 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 801a270:	68fb      	ldr	r3, [r7, #12]
 801a272:	681b      	ldr	r3, [r3, #0]
 801a274:	681a      	ldr	r2, [r3, #0]
 801a276:	68fb      	ldr	r3, [r7, #12]
 801a278:	681b      	ldr	r3, [r3, #0]
 801a27a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 801a27e:	601a      	str	r2, [r3, #0]
 801a280:	68fb      	ldr	r3, [r7, #12]
 801a282:	681b      	ldr	r3, [r3, #0]
 801a284:	681a      	ldr	r2, [r3, #0]
 801a286:	68fb      	ldr	r3, [r7, #12]
 801a288:	681b      	ldr	r3, [r3, #0]
 801a28a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 801a28e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 801a290:	68fb      	ldr	r3, [r7, #12]
 801a292:	2201      	movs	r2, #1
 801a294:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 801a298:	68fb      	ldr	r3, [r7, #12]
 801a29a:	2200      	movs	r2, #0
 801a29c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 801a2a0:	2303      	movs	r3, #3
 801a2a2:	e010      	b.n	801a2c6 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 801a2a4:	69bb      	ldr	r3, [r7, #24]
 801a2a6:	2b00      	cmp	r3, #0
 801a2a8:	d101      	bne.n	801a2ae <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 801a2aa:	2300      	movs	r3, #0
 801a2ac:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 801a2ae:	69bb      	ldr	r3, [r7, #24]
 801a2b0:	3b01      	subs	r3, #1
 801a2b2:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 801a2b4:	68fb      	ldr	r3, [r7, #12]
 801a2b6:	681b      	ldr	r3, [r3, #0]
 801a2b8:	689a      	ldr	r2, [r3, #8]
 801a2ba:	68bb      	ldr	r3, [r7, #8]
 801a2bc:	4013      	ands	r3, r2
 801a2be:	687a      	ldr	r2, [r7, #4]
 801a2c0:	429a      	cmp	r2, r3
 801a2c2:	d196      	bne.n	801a1f2 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 801a2c4:	2300      	movs	r3, #0
}
 801a2c6:	4618      	mov	r0, r3
 801a2c8:	3728      	adds	r7, #40	; 0x28
 801a2ca:	46bd      	mov	sp, r7
 801a2cc:	bd80      	pop	{r7, pc}
 801a2ce:	bf00      	nop
 801a2d0:	20000090 	.word	0x20000090

0801a2d4 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 801a2d4:	b580      	push	{r7, lr}
 801a2d6:	b086      	sub	sp, #24
 801a2d8:	af02      	add	r7, sp, #8
 801a2da:	60f8      	str	r0, [r7, #12]
 801a2dc:	60b9      	str	r1, [r7, #8]
 801a2de:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 801a2e0:	68fb      	ldr	r3, [r7, #12]
 801a2e2:	685b      	ldr	r3, [r3, #4]
 801a2e4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 801a2e8:	d111      	bne.n	801a30e <SPI_EndRxTransaction+0x3a>
 801a2ea:	68fb      	ldr	r3, [r7, #12]
 801a2ec:	689b      	ldr	r3, [r3, #8]
 801a2ee:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801a2f2:	d004      	beq.n	801a2fe <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 801a2f4:	68fb      	ldr	r3, [r7, #12]
 801a2f6:	689b      	ldr	r3, [r3, #8]
 801a2f8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801a2fc:	d107      	bne.n	801a30e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 801a2fe:	68fb      	ldr	r3, [r7, #12]
 801a300:	681b      	ldr	r3, [r3, #0]
 801a302:	681a      	ldr	r2, [r3, #0]
 801a304:	68fb      	ldr	r3, [r7, #12]
 801a306:	681b      	ldr	r3, [r3, #0]
 801a308:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801a30c:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 801a30e:	687b      	ldr	r3, [r7, #4]
 801a310:	9300      	str	r3, [sp, #0]
 801a312:	68bb      	ldr	r3, [r7, #8]
 801a314:	2200      	movs	r2, #0
 801a316:	2180      	movs	r1, #128	; 0x80
 801a318:	68f8      	ldr	r0, [r7, #12]
 801a31a:	f7ff febd 	bl	801a098 <SPI_WaitFlagStateUntilTimeout>
 801a31e:	4603      	mov	r3, r0
 801a320:	2b00      	cmp	r3, #0
 801a322:	d007      	beq.n	801a334 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 801a324:	68fb      	ldr	r3, [r7, #12]
 801a326:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801a328:	f043 0220 	orr.w	r2, r3, #32
 801a32c:	68fb      	ldr	r3, [r7, #12]
 801a32e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 801a330:	2303      	movs	r3, #3
 801a332:	e023      	b.n	801a37c <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 801a334:	68fb      	ldr	r3, [r7, #12]
 801a336:	685b      	ldr	r3, [r3, #4]
 801a338:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 801a33c:	d11d      	bne.n	801a37a <SPI_EndRxTransaction+0xa6>
 801a33e:	68fb      	ldr	r3, [r7, #12]
 801a340:	689b      	ldr	r3, [r3, #8]
 801a342:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801a346:	d004      	beq.n	801a352 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 801a348:	68fb      	ldr	r3, [r7, #12]
 801a34a:	689b      	ldr	r3, [r3, #8]
 801a34c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801a350:	d113      	bne.n	801a37a <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 801a352:	687b      	ldr	r3, [r7, #4]
 801a354:	9300      	str	r3, [sp, #0]
 801a356:	68bb      	ldr	r3, [r7, #8]
 801a358:	2200      	movs	r2, #0
 801a35a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 801a35e:	68f8      	ldr	r0, [r7, #12]
 801a360:	f7ff ff22 	bl	801a1a8 <SPI_WaitFifoStateUntilTimeout>
 801a364:	4603      	mov	r3, r0
 801a366:	2b00      	cmp	r3, #0
 801a368:	d007      	beq.n	801a37a <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 801a36a:	68fb      	ldr	r3, [r7, #12]
 801a36c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801a36e:	f043 0220 	orr.w	r2, r3, #32
 801a372:	68fb      	ldr	r3, [r7, #12]
 801a374:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 801a376:	2303      	movs	r3, #3
 801a378:	e000      	b.n	801a37c <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 801a37a:	2300      	movs	r3, #0
}
 801a37c:	4618      	mov	r0, r3
 801a37e:	3710      	adds	r7, #16
 801a380:	46bd      	mov	sp, r7
 801a382:	bd80      	pop	{r7, pc}

0801a384 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 801a384:	b580      	push	{r7, lr}
 801a386:	b086      	sub	sp, #24
 801a388:	af02      	add	r7, sp, #8
 801a38a:	60f8      	str	r0, [r7, #12]
 801a38c:	60b9      	str	r1, [r7, #8]
 801a38e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 801a390:	687b      	ldr	r3, [r7, #4]
 801a392:	9300      	str	r3, [sp, #0]
 801a394:	68bb      	ldr	r3, [r7, #8]
 801a396:	2200      	movs	r2, #0
 801a398:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 801a39c:	68f8      	ldr	r0, [r7, #12]
 801a39e:	f7ff ff03 	bl	801a1a8 <SPI_WaitFifoStateUntilTimeout>
 801a3a2:	4603      	mov	r3, r0
 801a3a4:	2b00      	cmp	r3, #0
 801a3a6:	d007      	beq.n	801a3b8 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 801a3a8:	68fb      	ldr	r3, [r7, #12]
 801a3aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801a3ac:	f043 0220 	orr.w	r2, r3, #32
 801a3b0:	68fb      	ldr	r3, [r7, #12]
 801a3b2:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 801a3b4:	2303      	movs	r3, #3
 801a3b6:	e027      	b.n	801a408 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 801a3b8:	687b      	ldr	r3, [r7, #4]
 801a3ba:	9300      	str	r3, [sp, #0]
 801a3bc:	68bb      	ldr	r3, [r7, #8]
 801a3be:	2200      	movs	r2, #0
 801a3c0:	2180      	movs	r1, #128	; 0x80
 801a3c2:	68f8      	ldr	r0, [r7, #12]
 801a3c4:	f7ff fe68 	bl	801a098 <SPI_WaitFlagStateUntilTimeout>
 801a3c8:	4603      	mov	r3, r0
 801a3ca:	2b00      	cmp	r3, #0
 801a3cc:	d007      	beq.n	801a3de <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 801a3ce:	68fb      	ldr	r3, [r7, #12]
 801a3d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801a3d2:	f043 0220 	orr.w	r2, r3, #32
 801a3d6:	68fb      	ldr	r3, [r7, #12]
 801a3d8:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 801a3da:	2303      	movs	r3, #3
 801a3dc:	e014      	b.n	801a408 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 801a3de:	687b      	ldr	r3, [r7, #4]
 801a3e0:	9300      	str	r3, [sp, #0]
 801a3e2:	68bb      	ldr	r3, [r7, #8]
 801a3e4:	2200      	movs	r2, #0
 801a3e6:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 801a3ea:	68f8      	ldr	r0, [r7, #12]
 801a3ec:	f7ff fedc 	bl	801a1a8 <SPI_WaitFifoStateUntilTimeout>
 801a3f0:	4603      	mov	r3, r0
 801a3f2:	2b00      	cmp	r3, #0
 801a3f4:	d007      	beq.n	801a406 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 801a3f6:	68fb      	ldr	r3, [r7, #12]
 801a3f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801a3fa:	f043 0220 	orr.w	r2, r3, #32
 801a3fe:	68fb      	ldr	r3, [r7, #12]
 801a400:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 801a402:	2303      	movs	r3, #3
 801a404:	e000      	b.n	801a408 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 801a406:	2300      	movs	r3, #0
}
 801a408:	4618      	mov	r0, r3
 801a40a:	3710      	adds	r7, #16
 801a40c:	46bd      	mov	sp, r7
 801a40e:	bd80      	pop	{r7, pc}

0801a410 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 801a410:	b580      	push	{r7, lr}
 801a412:	b082      	sub	sp, #8
 801a414:	af00      	add	r7, sp, #0
 801a416:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 801a418:	687b      	ldr	r3, [r7, #4]
 801a41a:	2b00      	cmp	r3, #0
 801a41c:	d101      	bne.n	801a422 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 801a41e:	2301      	movs	r3, #1
 801a420:	e049      	b.n	801a4b6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 801a422:	687b      	ldr	r3, [r7, #4]
 801a424:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801a428:	b2db      	uxtb	r3, r3
 801a42a:	2b00      	cmp	r3, #0
 801a42c:	d106      	bne.n	801a43c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 801a42e:	687b      	ldr	r3, [r7, #4]
 801a430:	2200      	movs	r2, #0
 801a432:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 801a436:	6878      	ldr	r0, [r7, #4]
 801a438:	f7f9 fc1c 	bl	8013c74 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801a43c:	687b      	ldr	r3, [r7, #4]
 801a43e:	2202      	movs	r2, #2
 801a440:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 801a444:	687b      	ldr	r3, [r7, #4]
 801a446:	681a      	ldr	r2, [r3, #0]
 801a448:	687b      	ldr	r3, [r7, #4]
 801a44a:	3304      	adds	r3, #4
 801a44c:	4619      	mov	r1, r3
 801a44e:	4610      	mov	r0, r2
 801a450:	f001 f948 	bl	801b6e4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 801a454:	687b      	ldr	r3, [r7, #4]
 801a456:	2201      	movs	r2, #1
 801a458:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801a45c:	687b      	ldr	r3, [r7, #4]
 801a45e:	2201      	movs	r2, #1
 801a460:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 801a464:	687b      	ldr	r3, [r7, #4]
 801a466:	2201      	movs	r2, #1
 801a468:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 801a46c:	687b      	ldr	r3, [r7, #4]
 801a46e:	2201      	movs	r2, #1
 801a470:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 801a474:	687b      	ldr	r3, [r7, #4]
 801a476:	2201      	movs	r2, #1
 801a478:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 801a47c:	687b      	ldr	r3, [r7, #4]
 801a47e:	2201      	movs	r2, #1
 801a480:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 801a484:	687b      	ldr	r3, [r7, #4]
 801a486:	2201      	movs	r2, #1
 801a488:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801a48c:	687b      	ldr	r3, [r7, #4]
 801a48e:	2201      	movs	r2, #1
 801a490:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801a494:	687b      	ldr	r3, [r7, #4]
 801a496:	2201      	movs	r2, #1
 801a498:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801a49c:	687b      	ldr	r3, [r7, #4]
 801a49e:	2201      	movs	r2, #1
 801a4a0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 801a4a4:	687b      	ldr	r3, [r7, #4]
 801a4a6:	2201      	movs	r2, #1
 801a4a8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 801a4ac:	687b      	ldr	r3, [r7, #4]
 801a4ae:	2201      	movs	r2, #1
 801a4b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 801a4b4:	2300      	movs	r3, #0
}
 801a4b6:	4618      	mov	r0, r3
 801a4b8:	3708      	adds	r7, #8
 801a4ba:	46bd      	mov	sp, r7
 801a4bc:	bd80      	pop	{r7, pc}
	...

0801a4c0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 801a4c0:	b480      	push	{r7}
 801a4c2:	b085      	sub	sp, #20
 801a4c4:	af00      	add	r7, sp, #0
 801a4c6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 801a4c8:	687b      	ldr	r3, [r7, #4]
 801a4ca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801a4ce:	b2db      	uxtb	r3, r3
 801a4d0:	2b01      	cmp	r3, #1
 801a4d2:	d001      	beq.n	801a4d8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 801a4d4:	2301      	movs	r3, #1
 801a4d6:	e047      	b.n	801a568 <HAL_TIM_Base_Start+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801a4d8:	687b      	ldr	r3, [r7, #4]
 801a4da:	2202      	movs	r2, #2
 801a4dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 801a4e0:	687b      	ldr	r3, [r7, #4]
 801a4e2:	681b      	ldr	r3, [r3, #0]
 801a4e4:	4a23      	ldr	r2, [pc, #140]	; (801a574 <HAL_TIM_Base_Start+0xb4>)
 801a4e6:	4293      	cmp	r3, r2
 801a4e8:	d01d      	beq.n	801a526 <HAL_TIM_Base_Start+0x66>
 801a4ea:	687b      	ldr	r3, [r7, #4]
 801a4ec:	681b      	ldr	r3, [r3, #0]
 801a4ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801a4f2:	d018      	beq.n	801a526 <HAL_TIM_Base_Start+0x66>
 801a4f4:	687b      	ldr	r3, [r7, #4]
 801a4f6:	681b      	ldr	r3, [r3, #0]
 801a4f8:	4a1f      	ldr	r2, [pc, #124]	; (801a578 <HAL_TIM_Base_Start+0xb8>)
 801a4fa:	4293      	cmp	r3, r2
 801a4fc:	d013      	beq.n	801a526 <HAL_TIM_Base_Start+0x66>
 801a4fe:	687b      	ldr	r3, [r7, #4]
 801a500:	681b      	ldr	r3, [r3, #0]
 801a502:	4a1e      	ldr	r2, [pc, #120]	; (801a57c <HAL_TIM_Base_Start+0xbc>)
 801a504:	4293      	cmp	r3, r2
 801a506:	d00e      	beq.n	801a526 <HAL_TIM_Base_Start+0x66>
 801a508:	687b      	ldr	r3, [r7, #4]
 801a50a:	681b      	ldr	r3, [r3, #0]
 801a50c:	4a1c      	ldr	r2, [pc, #112]	; (801a580 <HAL_TIM_Base_Start+0xc0>)
 801a50e:	4293      	cmp	r3, r2
 801a510:	d009      	beq.n	801a526 <HAL_TIM_Base_Start+0x66>
 801a512:	687b      	ldr	r3, [r7, #4]
 801a514:	681b      	ldr	r3, [r3, #0]
 801a516:	4a1b      	ldr	r2, [pc, #108]	; (801a584 <HAL_TIM_Base_Start+0xc4>)
 801a518:	4293      	cmp	r3, r2
 801a51a:	d004      	beq.n	801a526 <HAL_TIM_Base_Start+0x66>
 801a51c:	687b      	ldr	r3, [r7, #4]
 801a51e:	681b      	ldr	r3, [r3, #0]
 801a520:	4a19      	ldr	r2, [pc, #100]	; (801a588 <HAL_TIM_Base_Start+0xc8>)
 801a522:	4293      	cmp	r3, r2
 801a524:	d115      	bne.n	801a552 <HAL_TIM_Base_Start+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 801a526:	687b      	ldr	r3, [r7, #4]
 801a528:	681b      	ldr	r3, [r3, #0]
 801a52a:	689a      	ldr	r2, [r3, #8]
 801a52c:	4b17      	ldr	r3, [pc, #92]	; (801a58c <HAL_TIM_Base_Start+0xcc>)
 801a52e:	4013      	ands	r3, r2
 801a530:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801a532:	68fb      	ldr	r3, [r7, #12]
 801a534:	2b06      	cmp	r3, #6
 801a536:	d015      	beq.n	801a564 <HAL_TIM_Base_Start+0xa4>
 801a538:	68fb      	ldr	r3, [r7, #12]
 801a53a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801a53e:	d011      	beq.n	801a564 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 801a540:	687b      	ldr	r3, [r7, #4]
 801a542:	681b      	ldr	r3, [r3, #0]
 801a544:	681a      	ldr	r2, [r3, #0]
 801a546:	687b      	ldr	r3, [r7, #4]
 801a548:	681b      	ldr	r3, [r3, #0]
 801a54a:	f042 0201 	orr.w	r2, r2, #1
 801a54e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801a550:	e008      	b.n	801a564 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 801a552:	687b      	ldr	r3, [r7, #4]
 801a554:	681b      	ldr	r3, [r3, #0]
 801a556:	681a      	ldr	r2, [r3, #0]
 801a558:	687b      	ldr	r3, [r7, #4]
 801a55a:	681b      	ldr	r3, [r3, #0]
 801a55c:	f042 0201 	orr.w	r2, r2, #1
 801a560:	601a      	str	r2, [r3, #0]
 801a562:	e000      	b.n	801a566 <HAL_TIM_Base_Start+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801a564:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 801a566:	2300      	movs	r3, #0
}
 801a568:	4618      	mov	r0, r3
 801a56a:	3714      	adds	r7, #20
 801a56c:	46bd      	mov	sp, r7
 801a56e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a572:	4770      	bx	lr
 801a574:	40012c00 	.word	0x40012c00
 801a578:	40000400 	.word	0x40000400
 801a57c:	40000800 	.word	0x40000800
 801a580:	40000c00 	.word	0x40000c00
 801a584:	40013400 	.word	0x40013400
 801a588:	40014000 	.word	0x40014000
 801a58c:	00010007 	.word	0x00010007

0801a590 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 801a590:	b480      	push	{r7}
 801a592:	b085      	sub	sp, #20
 801a594:	af00      	add	r7, sp, #0
 801a596:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 801a598:	687b      	ldr	r3, [r7, #4]
 801a59a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801a59e:	b2db      	uxtb	r3, r3
 801a5a0:	2b01      	cmp	r3, #1
 801a5a2:	d001      	beq.n	801a5a8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 801a5a4:	2301      	movs	r3, #1
 801a5a6:	e04f      	b.n	801a648 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801a5a8:	687b      	ldr	r3, [r7, #4]
 801a5aa:	2202      	movs	r2, #2
 801a5ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 801a5b0:	687b      	ldr	r3, [r7, #4]
 801a5b2:	681b      	ldr	r3, [r3, #0]
 801a5b4:	68da      	ldr	r2, [r3, #12]
 801a5b6:	687b      	ldr	r3, [r7, #4]
 801a5b8:	681b      	ldr	r3, [r3, #0]
 801a5ba:	f042 0201 	orr.w	r2, r2, #1
 801a5be:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 801a5c0:	687b      	ldr	r3, [r7, #4]
 801a5c2:	681b      	ldr	r3, [r3, #0]
 801a5c4:	4a23      	ldr	r2, [pc, #140]	; (801a654 <HAL_TIM_Base_Start_IT+0xc4>)
 801a5c6:	4293      	cmp	r3, r2
 801a5c8:	d01d      	beq.n	801a606 <HAL_TIM_Base_Start_IT+0x76>
 801a5ca:	687b      	ldr	r3, [r7, #4]
 801a5cc:	681b      	ldr	r3, [r3, #0]
 801a5ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801a5d2:	d018      	beq.n	801a606 <HAL_TIM_Base_Start_IT+0x76>
 801a5d4:	687b      	ldr	r3, [r7, #4]
 801a5d6:	681b      	ldr	r3, [r3, #0]
 801a5d8:	4a1f      	ldr	r2, [pc, #124]	; (801a658 <HAL_TIM_Base_Start_IT+0xc8>)
 801a5da:	4293      	cmp	r3, r2
 801a5dc:	d013      	beq.n	801a606 <HAL_TIM_Base_Start_IT+0x76>
 801a5de:	687b      	ldr	r3, [r7, #4]
 801a5e0:	681b      	ldr	r3, [r3, #0]
 801a5e2:	4a1e      	ldr	r2, [pc, #120]	; (801a65c <HAL_TIM_Base_Start_IT+0xcc>)
 801a5e4:	4293      	cmp	r3, r2
 801a5e6:	d00e      	beq.n	801a606 <HAL_TIM_Base_Start_IT+0x76>
 801a5e8:	687b      	ldr	r3, [r7, #4]
 801a5ea:	681b      	ldr	r3, [r3, #0]
 801a5ec:	4a1c      	ldr	r2, [pc, #112]	; (801a660 <HAL_TIM_Base_Start_IT+0xd0>)
 801a5ee:	4293      	cmp	r3, r2
 801a5f0:	d009      	beq.n	801a606 <HAL_TIM_Base_Start_IT+0x76>
 801a5f2:	687b      	ldr	r3, [r7, #4]
 801a5f4:	681b      	ldr	r3, [r3, #0]
 801a5f6:	4a1b      	ldr	r2, [pc, #108]	; (801a664 <HAL_TIM_Base_Start_IT+0xd4>)
 801a5f8:	4293      	cmp	r3, r2
 801a5fa:	d004      	beq.n	801a606 <HAL_TIM_Base_Start_IT+0x76>
 801a5fc:	687b      	ldr	r3, [r7, #4]
 801a5fe:	681b      	ldr	r3, [r3, #0]
 801a600:	4a19      	ldr	r2, [pc, #100]	; (801a668 <HAL_TIM_Base_Start_IT+0xd8>)
 801a602:	4293      	cmp	r3, r2
 801a604:	d115      	bne.n	801a632 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 801a606:	687b      	ldr	r3, [r7, #4]
 801a608:	681b      	ldr	r3, [r3, #0]
 801a60a:	689a      	ldr	r2, [r3, #8]
 801a60c:	4b17      	ldr	r3, [pc, #92]	; (801a66c <HAL_TIM_Base_Start_IT+0xdc>)
 801a60e:	4013      	ands	r3, r2
 801a610:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801a612:	68fb      	ldr	r3, [r7, #12]
 801a614:	2b06      	cmp	r3, #6
 801a616:	d015      	beq.n	801a644 <HAL_TIM_Base_Start_IT+0xb4>
 801a618:	68fb      	ldr	r3, [r7, #12]
 801a61a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801a61e:	d011      	beq.n	801a644 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 801a620:	687b      	ldr	r3, [r7, #4]
 801a622:	681b      	ldr	r3, [r3, #0]
 801a624:	681a      	ldr	r2, [r3, #0]
 801a626:	687b      	ldr	r3, [r7, #4]
 801a628:	681b      	ldr	r3, [r3, #0]
 801a62a:	f042 0201 	orr.w	r2, r2, #1
 801a62e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801a630:	e008      	b.n	801a644 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 801a632:	687b      	ldr	r3, [r7, #4]
 801a634:	681b      	ldr	r3, [r3, #0]
 801a636:	681a      	ldr	r2, [r3, #0]
 801a638:	687b      	ldr	r3, [r7, #4]
 801a63a:	681b      	ldr	r3, [r3, #0]
 801a63c:	f042 0201 	orr.w	r2, r2, #1
 801a640:	601a      	str	r2, [r3, #0]
 801a642:	e000      	b.n	801a646 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801a644:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 801a646:	2300      	movs	r3, #0
}
 801a648:	4618      	mov	r0, r3
 801a64a:	3714      	adds	r7, #20
 801a64c:	46bd      	mov	sp, r7
 801a64e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a652:	4770      	bx	lr
 801a654:	40012c00 	.word	0x40012c00
 801a658:	40000400 	.word	0x40000400
 801a65c:	40000800 	.word	0x40000800
 801a660:	40000c00 	.word	0x40000c00
 801a664:	40013400 	.word	0x40013400
 801a668:	40014000 	.word	0x40014000
 801a66c:	00010007 	.word	0x00010007

0801a670 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 801a670:	b580      	push	{r7, lr}
 801a672:	b082      	sub	sp, #8
 801a674:	af00      	add	r7, sp, #0
 801a676:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 801a678:	687b      	ldr	r3, [r7, #4]
 801a67a:	2b00      	cmp	r3, #0
 801a67c:	d101      	bne.n	801a682 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 801a67e:	2301      	movs	r3, #1
 801a680:	e049      	b.n	801a716 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 801a682:	687b      	ldr	r3, [r7, #4]
 801a684:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801a688:	b2db      	uxtb	r3, r3
 801a68a:	2b00      	cmp	r3, #0
 801a68c:	d106      	bne.n	801a69c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 801a68e:	687b      	ldr	r3, [r7, #4]
 801a690:	2200      	movs	r2, #0
 801a692:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 801a696:	6878      	ldr	r0, [r7, #4]
 801a698:	f7f9 fbd4 	bl	8013e44 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801a69c:	687b      	ldr	r3, [r7, #4]
 801a69e:	2202      	movs	r2, #2
 801a6a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 801a6a4:	687b      	ldr	r3, [r7, #4]
 801a6a6:	681a      	ldr	r2, [r3, #0]
 801a6a8:	687b      	ldr	r3, [r7, #4]
 801a6aa:	3304      	adds	r3, #4
 801a6ac:	4619      	mov	r1, r3
 801a6ae:	4610      	mov	r0, r2
 801a6b0:	f001 f818 	bl	801b6e4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 801a6b4:	687b      	ldr	r3, [r7, #4]
 801a6b6:	2201      	movs	r2, #1
 801a6b8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801a6bc:	687b      	ldr	r3, [r7, #4]
 801a6be:	2201      	movs	r2, #1
 801a6c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 801a6c4:	687b      	ldr	r3, [r7, #4]
 801a6c6:	2201      	movs	r2, #1
 801a6c8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 801a6cc:	687b      	ldr	r3, [r7, #4]
 801a6ce:	2201      	movs	r2, #1
 801a6d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 801a6d4:	687b      	ldr	r3, [r7, #4]
 801a6d6:	2201      	movs	r2, #1
 801a6d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 801a6dc:	687b      	ldr	r3, [r7, #4]
 801a6de:	2201      	movs	r2, #1
 801a6e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 801a6e4:	687b      	ldr	r3, [r7, #4]
 801a6e6:	2201      	movs	r2, #1
 801a6e8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801a6ec:	687b      	ldr	r3, [r7, #4]
 801a6ee:	2201      	movs	r2, #1
 801a6f0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801a6f4:	687b      	ldr	r3, [r7, #4]
 801a6f6:	2201      	movs	r2, #1
 801a6f8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801a6fc:	687b      	ldr	r3, [r7, #4]
 801a6fe:	2201      	movs	r2, #1
 801a700:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 801a704:	687b      	ldr	r3, [r7, #4]
 801a706:	2201      	movs	r2, #1
 801a708:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 801a70c:	687b      	ldr	r3, [r7, #4]
 801a70e:	2201      	movs	r2, #1
 801a710:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 801a714:	2300      	movs	r3, #0
}
 801a716:	4618      	mov	r0, r3
 801a718:	3708      	adds	r7, #8
 801a71a:	46bd      	mov	sp, r7
 801a71c:	bd80      	pop	{r7, pc}
	...

0801a720 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 801a720:	b580      	push	{r7, lr}
 801a722:	b084      	sub	sp, #16
 801a724:	af00      	add	r7, sp, #0
 801a726:	6078      	str	r0, [r7, #4]
 801a728:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 801a72a:	683b      	ldr	r3, [r7, #0]
 801a72c:	2b00      	cmp	r3, #0
 801a72e:	d109      	bne.n	801a744 <HAL_TIM_PWM_Start+0x24>
 801a730:	687b      	ldr	r3, [r7, #4]
 801a732:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 801a736:	b2db      	uxtb	r3, r3
 801a738:	2b01      	cmp	r3, #1
 801a73a:	bf14      	ite	ne
 801a73c:	2301      	movne	r3, #1
 801a73e:	2300      	moveq	r3, #0
 801a740:	b2db      	uxtb	r3, r3
 801a742:	e03c      	b.n	801a7be <HAL_TIM_PWM_Start+0x9e>
 801a744:	683b      	ldr	r3, [r7, #0]
 801a746:	2b04      	cmp	r3, #4
 801a748:	d109      	bne.n	801a75e <HAL_TIM_PWM_Start+0x3e>
 801a74a:	687b      	ldr	r3, [r7, #4]
 801a74c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 801a750:	b2db      	uxtb	r3, r3
 801a752:	2b01      	cmp	r3, #1
 801a754:	bf14      	ite	ne
 801a756:	2301      	movne	r3, #1
 801a758:	2300      	moveq	r3, #0
 801a75a:	b2db      	uxtb	r3, r3
 801a75c:	e02f      	b.n	801a7be <HAL_TIM_PWM_Start+0x9e>
 801a75e:	683b      	ldr	r3, [r7, #0]
 801a760:	2b08      	cmp	r3, #8
 801a762:	d109      	bne.n	801a778 <HAL_TIM_PWM_Start+0x58>
 801a764:	687b      	ldr	r3, [r7, #4]
 801a766:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 801a76a:	b2db      	uxtb	r3, r3
 801a76c:	2b01      	cmp	r3, #1
 801a76e:	bf14      	ite	ne
 801a770:	2301      	movne	r3, #1
 801a772:	2300      	moveq	r3, #0
 801a774:	b2db      	uxtb	r3, r3
 801a776:	e022      	b.n	801a7be <HAL_TIM_PWM_Start+0x9e>
 801a778:	683b      	ldr	r3, [r7, #0]
 801a77a:	2b0c      	cmp	r3, #12
 801a77c:	d109      	bne.n	801a792 <HAL_TIM_PWM_Start+0x72>
 801a77e:	687b      	ldr	r3, [r7, #4]
 801a780:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 801a784:	b2db      	uxtb	r3, r3
 801a786:	2b01      	cmp	r3, #1
 801a788:	bf14      	ite	ne
 801a78a:	2301      	movne	r3, #1
 801a78c:	2300      	moveq	r3, #0
 801a78e:	b2db      	uxtb	r3, r3
 801a790:	e015      	b.n	801a7be <HAL_TIM_PWM_Start+0x9e>
 801a792:	683b      	ldr	r3, [r7, #0]
 801a794:	2b10      	cmp	r3, #16
 801a796:	d109      	bne.n	801a7ac <HAL_TIM_PWM_Start+0x8c>
 801a798:	687b      	ldr	r3, [r7, #4]
 801a79a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801a79e:	b2db      	uxtb	r3, r3
 801a7a0:	2b01      	cmp	r3, #1
 801a7a2:	bf14      	ite	ne
 801a7a4:	2301      	movne	r3, #1
 801a7a6:	2300      	moveq	r3, #0
 801a7a8:	b2db      	uxtb	r3, r3
 801a7aa:	e008      	b.n	801a7be <HAL_TIM_PWM_Start+0x9e>
 801a7ac:	687b      	ldr	r3, [r7, #4]
 801a7ae:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 801a7b2:	b2db      	uxtb	r3, r3
 801a7b4:	2b01      	cmp	r3, #1
 801a7b6:	bf14      	ite	ne
 801a7b8:	2301      	movne	r3, #1
 801a7ba:	2300      	moveq	r3, #0
 801a7bc:	b2db      	uxtb	r3, r3
 801a7be:	2b00      	cmp	r3, #0
 801a7c0:	d001      	beq.n	801a7c6 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 801a7c2:	2301      	movs	r3, #1
 801a7c4:	e09c      	b.n	801a900 <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 801a7c6:	683b      	ldr	r3, [r7, #0]
 801a7c8:	2b00      	cmp	r3, #0
 801a7ca:	d104      	bne.n	801a7d6 <HAL_TIM_PWM_Start+0xb6>
 801a7cc:	687b      	ldr	r3, [r7, #4]
 801a7ce:	2202      	movs	r2, #2
 801a7d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 801a7d4:	e023      	b.n	801a81e <HAL_TIM_PWM_Start+0xfe>
 801a7d6:	683b      	ldr	r3, [r7, #0]
 801a7d8:	2b04      	cmp	r3, #4
 801a7da:	d104      	bne.n	801a7e6 <HAL_TIM_PWM_Start+0xc6>
 801a7dc:	687b      	ldr	r3, [r7, #4]
 801a7de:	2202      	movs	r2, #2
 801a7e0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 801a7e4:	e01b      	b.n	801a81e <HAL_TIM_PWM_Start+0xfe>
 801a7e6:	683b      	ldr	r3, [r7, #0]
 801a7e8:	2b08      	cmp	r3, #8
 801a7ea:	d104      	bne.n	801a7f6 <HAL_TIM_PWM_Start+0xd6>
 801a7ec:	687b      	ldr	r3, [r7, #4]
 801a7ee:	2202      	movs	r2, #2
 801a7f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 801a7f4:	e013      	b.n	801a81e <HAL_TIM_PWM_Start+0xfe>
 801a7f6:	683b      	ldr	r3, [r7, #0]
 801a7f8:	2b0c      	cmp	r3, #12
 801a7fa:	d104      	bne.n	801a806 <HAL_TIM_PWM_Start+0xe6>
 801a7fc:	687b      	ldr	r3, [r7, #4]
 801a7fe:	2202      	movs	r2, #2
 801a800:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 801a804:	e00b      	b.n	801a81e <HAL_TIM_PWM_Start+0xfe>
 801a806:	683b      	ldr	r3, [r7, #0]
 801a808:	2b10      	cmp	r3, #16
 801a80a:	d104      	bne.n	801a816 <HAL_TIM_PWM_Start+0xf6>
 801a80c:	687b      	ldr	r3, [r7, #4]
 801a80e:	2202      	movs	r2, #2
 801a810:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 801a814:	e003      	b.n	801a81e <HAL_TIM_PWM_Start+0xfe>
 801a816:	687b      	ldr	r3, [r7, #4]
 801a818:	2202      	movs	r2, #2
 801a81a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 801a81e:	687b      	ldr	r3, [r7, #4]
 801a820:	681b      	ldr	r3, [r3, #0]
 801a822:	2201      	movs	r2, #1
 801a824:	6839      	ldr	r1, [r7, #0]
 801a826:	4618      	mov	r0, r3
 801a828:	f001 fc8c 	bl	801c144 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 801a82c:	687b      	ldr	r3, [r7, #4]
 801a82e:	681b      	ldr	r3, [r3, #0]
 801a830:	4a35      	ldr	r2, [pc, #212]	; (801a908 <HAL_TIM_PWM_Start+0x1e8>)
 801a832:	4293      	cmp	r3, r2
 801a834:	d013      	beq.n	801a85e <HAL_TIM_PWM_Start+0x13e>
 801a836:	687b      	ldr	r3, [r7, #4]
 801a838:	681b      	ldr	r3, [r3, #0]
 801a83a:	4a34      	ldr	r2, [pc, #208]	; (801a90c <HAL_TIM_PWM_Start+0x1ec>)
 801a83c:	4293      	cmp	r3, r2
 801a83e:	d00e      	beq.n	801a85e <HAL_TIM_PWM_Start+0x13e>
 801a840:	687b      	ldr	r3, [r7, #4]
 801a842:	681b      	ldr	r3, [r3, #0]
 801a844:	4a32      	ldr	r2, [pc, #200]	; (801a910 <HAL_TIM_PWM_Start+0x1f0>)
 801a846:	4293      	cmp	r3, r2
 801a848:	d009      	beq.n	801a85e <HAL_TIM_PWM_Start+0x13e>
 801a84a:	687b      	ldr	r3, [r7, #4]
 801a84c:	681b      	ldr	r3, [r3, #0]
 801a84e:	4a31      	ldr	r2, [pc, #196]	; (801a914 <HAL_TIM_PWM_Start+0x1f4>)
 801a850:	4293      	cmp	r3, r2
 801a852:	d004      	beq.n	801a85e <HAL_TIM_PWM_Start+0x13e>
 801a854:	687b      	ldr	r3, [r7, #4]
 801a856:	681b      	ldr	r3, [r3, #0]
 801a858:	4a2f      	ldr	r2, [pc, #188]	; (801a918 <HAL_TIM_PWM_Start+0x1f8>)
 801a85a:	4293      	cmp	r3, r2
 801a85c:	d101      	bne.n	801a862 <HAL_TIM_PWM_Start+0x142>
 801a85e:	2301      	movs	r3, #1
 801a860:	e000      	b.n	801a864 <HAL_TIM_PWM_Start+0x144>
 801a862:	2300      	movs	r3, #0
 801a864:	2b00      	cmp	r3, #0
 801a866:	d007      	beq.n	801a878 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 801a868:	687b      	ldr	r3, [r7, #4]
 801a86a:	681b      	ldr	r3, [r3, #0]
 801a86c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801a86e:	687b      	ldr	r3, [r7, #4]
 801a870:	681b      	ldr	r3, [r3, #0]
 801a872:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 801a876:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 801a878:	687b      	ldr	r3, [r7, #4]
 801a87a:	681b      	ldr	r3, [r3, #0]
 801a87c:	4a22      	ldr	r2, [pc, #136]	; (801a908 <HAL_TIM_PWM_Start+0x1e8>)
 801a87e:	4293      	cmp	r3, r2
 801a880:	d01d      	beq.n	801a8be <HAL_TIM_PWM_Start+0x19e>
 801a882:	687b      	ldr	r3, [r7, #4]
 801a884:	681b      	ldr	r3, [r3, #0]
 801a886:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801a88a:	d018      	beq.n	801a8be <HAL_TIM_PWM_Start+0x19e>
 801a88c:	687b      	ldr	r3, [r7, #4]
 801a88e:	681b      	ldr	r3, [r3, #0]
 801a890:	4a22      	ldr	r2, [pc, #136]	; (801a91c <HAL_TIM_PWM_Start+0x1fc>)
 801a892:	4293      	cmp	r3, r2
 801a894:	d013      	beq.n	801a8be <HAL_TIM_PWM_Start+0x19e>
 801a896:	687b      	ldr	r3, [r7, #4]
 801a898:	681b      	ldr	r3, [r3, #0]
 801a89a:	4a21      	ldr	r2, [pc, #132]	; (801a920 <HAL_TIM_PWM_Start+0x200>)
 801a89c:	4293      	cmp	r3, r2
 801a89e:	d00e      	beq.n	801a8be <HAL_TIM_PWM_Start+0x19e>
 801a8a0:	687b      	ldr	r3, [r7, #4]
 801a8a2:	681b      	ldr	r3, [r3, #0]
 801a8a4:	4a1f      	ldr	r2, [pc, #124]	; (801a924 <HAL_TIM_PWM_Start+0x204>)
 801a8a6:	4293      	cmp	r3, r2
 801a8a8:	d009      	beq.n	801a8be <HAL_TIM_PWM_Start+0x19e>
 801a8aa:	687b      	ldr	r3, [r7, #4]
 801a8ac:	681b      	ldr	r3, [r3, #0]
 801a8ae:	4a17      	ldr	r2, [pc, #92]	; (801a90c <HAL_TIM_PWM_Start+0x1ec>)
 801a8b0:	4293      	cmp	r3, r2
 801a8b2:	d004      	beq.n	801a8be <HAL_TIM_PWM_Start+0x19e>
 801a8b4:	687b      	ldr	r3, [r7, #4]
 801a8b6:	681b      	ldr	r3, [r3, #0]
 801a8b8:	4a15      	ldr	r2, [pc, #84]	; (801a910 <HAL_TIM_PWM_Start+0x1f0>)
 801a8ba:	4293      	cmp	r3, r2
 801a8bc:	d115      	bne.n	801a8ea <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 801a8be:	687b      	ldr	r3, [r7, #4]
 801a8c0:	681b      	ldr	r3, [r3, #0]
 801a8c2:	689a      	ldr	r2, [r3, #8]
 801a8c4:	4b18      	ldr	r3, [pc, #96]	; (801a928 <HAL_TIM_PWM_Start+0x208>)
 801a8c6:	4013      	ands	r3, r2
 801a8c8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801a8ca:	68fb      	ldr	r3, [r7, #12]
 801a8cc:	2b06      	cmp	r3, #6
 801a8ce:	d015      	beq.n	801a8fc <HAL_TIM_PWM_Start+0x1dc>
 801a8d0:	68fb      	ldr	r3, [r7, #12]
 801a8d2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801a8d6:	d011      	beq.n	801a8fc <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 801a8d8:	687b      	ldr	r3, [r7, #4]
 801a8da:	681b      	ldr	r3, [r3, #0]
 801a8dc:	681a      	ldr	r2, [r3, #0]
 801a8de:	687b      	ldr	r3, [r7, #4]
 801a8e0:	681b      	ldr	r3, [r3, #0]
 801a8e2:	f042 0201 	orr.w	r2, r2, #1
 801a8e6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801a8e8:	e008      	b.n	801a8fc <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 801a8ea:	687b      	ldr	r3, [r7, #4]
 801a8ec:	681b      	ldr	r3, [r3, #0]
 801a8ee:	681a      	ldr	r2, [r3, #0]
 801a8f0:	687b      	ldr	r3, [r7, #4]
 801a8f2:	681b      	ldr	r3, [r3, #0]
 801a8f4:	f042 0201 	orr.w	r2, r2, #1
 801a8f8:	601a      	str	r2, [r3, #0]
 801a8fa:	e000      	b.n	801a8fe <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801a8fc:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 801a8fe:	2300      	movs	r3, #0
}
 801a900:	4618      	mov	r0, r3
 801a902:	3710      	adds	r7, #16
 801a904:	46bd      	mov	sp, r7
 801a906:	bd80      	pop	{r7, pc}
 801a908:	40012c00 	.word	0x40012c00
 801a90c:	40013400 	.word	0x40013400
 801a910:	40014000 	.word	0x40014000
 801a914:	40014400 	.word	0x40014400
 801a918:	40014800 	.word	0x40014800
 801a91c:	40000400 	.word	0x40000400
 801a920:	40000800 	.word	0x40000800
 801a924:	40000c00 	.word	0x40000c00
 801a928:	00010007 	.word	0x00010007

0801a92c <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 801a92c:	b580      	push	{r7, lr}
 801a92e:	b082      	sub	sp, #8
 801a930:	af00      	add	r7, sp, #0
 801a932:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 801a934:	687b      	ldr	r3, [r7, #4]
 801a936:	2b00      	cmp	r3, #0
 801a938:	d101      	bne.n	801a93e <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 801a93a:	2301      	movs	r3, #1
 801a93c:	e049      	b.n	801a9d2 <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 801a93e:	687b      	ldr	r3, [r7, #4]
 801a940:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801a944:	b2db      	uxtb	r3, r3
 801a946:	2b00      	cmp	r3, #0
 801a948:	d106      	bne.n	801a958 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 801a94a:	687b      	ldr	r3, [r7, #4]
 801a94c:	2200      	movs	r2, #0
 801a94e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 801a952:	6878      	ldr	r0, [r7, #4]
 801a954:	f000 f841 	bl	801a9da <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801a958:	687b      	ldr	r3, [r7, #4]
 801a95a:	2202      	movs	r2, #2
 801a95c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 801a960:	687b      	ldr	r3, [r7, #4]
 801a962:	681a      	ldr	r2, [r3, #0]
 801a964:	687b      	ldr	r3, [r7, #4]
 801a966:	3304      	adds	r3, #4
 801a968:	4619      	mov	r1, r3
 801a96a:	4610      	mov	r0, r2
 801a96c:	f000 feba 	bl	801b6e4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 801a970:	687b      	ldr	r3, [r7, #4]
 801a972:	2201      	movs	r2, #1
 801a974:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801a978:	687b      	ldr	r3, [r7, #4]
 801a97a:	2201      	movs	r2, #1
 801a97c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 801a980:	687b      	ldr	r3, [r7, #4]
 801a982:	2201      	movs	r2, #1
 801a984:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 801a988:	687b      	ldr	r3, [r7, #4]
 801a98a:	2201      	movs	r2, #1
 801a98c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 801a990:	687b      	ldr	r3, [r7, #4]
 801a992:	2201      	movs	r2, #1
 801a994:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 801a998:	687b      	ldr	r3, [r7, #4]
 801a99a:	2201      	movs	r2, #1
 801a99c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 801a9a0:	687b      	ldr	r3, [r7, #4]
 801a9a2:	2201      	movs	r2, #1
 801a9a4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801a9a8:	687b      	ldr	r3, [r7, #4]
 801a9aa:	2201      	movs	r2, #1
 801a9ac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801a9b0:	687b      	ldr	r3, [r7, #4]
 801a9b2:	2201      	movs	r2, #1
 801a9b4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801a9b8:	687b      	ldr	r3, [r7, #4]
 801a9ba:	2201      	movs	r2, #1
 801a9bc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 801a9c0:	687b      	ldr	r3, [r7, #4]
 801a9c2:	2201      	movs	r2, #1
 801a9c4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 801a9c8:	687b      	ldr	r3, [r7, #4]
 801a9ca:	2201      	movs	r2, #1
 801a9cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 801a9d0:	2300      	movs	r3, #0
}
 801a9d2:	4618      	mov	r0, r3
 801a9d4:	3708      	adds	r7, #8
 801a9d6:	46bd      	mov	sp, r7
 801a9d8:	bd80      	pop	{r7, pc}

0801a9da <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 801a9da:	b480      	push	{r7}
 801a9dc:	b083      	sub	sp, #12
 801a9de:	af00      	add	r7, sp, #0
 801a9e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 801a9e2:	bf00      	nop
 801a9e4:	370c      	adds	r7, #12
 801a9e6:	46bd      	mov	sp, r7
 801a9e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a9ec:	4770      	bx	lr
	...

0801a9f0 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 801a9f0:	b580      	push	{r7, lr}
 801a9f2:	b084      	sub	sp, #16
 801a9f4:	af00      	add	r7, sp, #0
 801a9f6:	6078      	str	r0, [r7, #4]
 801a9f8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 801a9fa:	2300      	movs	r3, #0
 801a9fc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 801a9fe:	683b      	ldr	r3, [r7, #0]
 801aa00:	2b00      	cmp	r3, #0
 801aa02:	d104      	bne.n	801aa0e <HAL_TIM_IC_Start_IT+0x1e>
 801aa04:	687b      	ldr	r3, [r7, #4]
 801aa06:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 801aa0a:	b2db      	uxtb	r3, r3
 801aa0c:	e023      	b.n	801aa56 <HAL_TIM_IC_Start_IT+0x66>
 801aa0e:	683b      	ldr	r3, [r7, #0]
 801aa10:	2b04      	cmp	r3, #4
 801aa12:	d104      	bne.n	801aa1e <HAL_TIM_IC_Start_IT+0x2e>
 801aa14:	687b      	ldr	r3, [r7, #4]
 801aa16:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 801aa1a:	b2db      	uxtb	r3, r3
 801aa1c:	e01b      	b.n	801aa56 <HAL_TIM_IC_Start_IT+0x66>
 801aa1e:	683b      	ldr	r3, [r7, #0]
 801aa20:	2b08      	cmp	r3, #8
 801aa22:	d104      	bne.n	801aa2e <HAL_TIM_IC_Start_IT+0x3e>
 801aa24:	687b      	ldr	r3, [r7, #4]
 801aa26:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 801aa2a:	b2db      	uxtb	r3, r3
 801aa2c:	e013      	b.n	801aa56 <HAL_TIM_IC_Start_IT+0x66>
 801aa2e:	683b      	ldr	r3, [r7, #0]
 801aa30:	2b0c      	cmp	r3, #12
 801aa32:	d104      	bne.n	801aa3e <HAL_TIM_IC_Start_IT+0x4e>
 801aa34:	687b      	ldr	r3, [r7, #4]
 801aa36:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 801aa3a:	b2db      	uxtb	r3, r3
 801aa3c:	e00b      	b.n	801aa56 <HAL_TIM_IC_Start_IT+0x66>
 801aa3e:	683b      	ldr	r3, [r7, #0]
 801aa40:	2b10      	cmp	r3, #16
 801aa42:	d104      	bne.n	801aa4e <HAL_TIM_IC_Start_IT+0x5e>
 801aa44:	687b      	ldr	r3, [r7, #4]
 801aa46:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801aa4a:	b2db      	uxtb	r3, r3
 801aa4c:	e003      	b.n	801aa56 <HAL_TIM_IC_Start_IT+0x66>
 801aa4e:	687b      	ldr	r3, [r7, #4]
 801aa50:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 801aa54:	b2db      	uxtb	r3, r3
 801aa56:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 801aa58:	683b      	ldr	r3, [r7, #0]
 801aa5a:	2b00      	cmp	r3, #0
 801aa5c:	d104      	bne.n	801aa68 <HAL_TIM_IC_Start_IT+0x78>
 801aa5e:	687b      	ldr	r3, [r7, #4]
 801aa60:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801aa64:	b2db      	uxtb	r3, r3
 801aa66:	e013      	b.n	801aa90 <HAL_TIM_IC_Start_IT+0xa0>
 801aa68:	683b      	ldr	r3, [r7, #0]
 801aa6a:	2b04      	cmp	r3, #4
 801aa6c:	d104      	bne.n	801aa78 <HAL_TIM_IC_Start_IT+0x88>
 801aa6e:	687b      	ldr	r3, [r7, #4]
 801aa70:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801aa74:	b2db      	uxtb	r3, r3
 801aa76:	e00b      	b.n	801aa90 <HAL_TIM_IC_Start_IT+0xa0>
 801aa78:	683b      	ldr	r3, [r7, #0]
 801aa7a:	2b08      	cmp	r3, #8
 801aa7c:	d104      	bne.n	801aa88 <HAL_TIM_IC_Start_IT+0x98>
 801aa7e:	687b      	ldr	r3, [r7, #4]
 801aa80:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 801aa84:	b2db      	uxtb	r3, r3
 801aa86:	e003      	b.n	801aa90 <HAL_TIM_IC_Start_IT+0xa0>
 801aa88:	687b      	ldr	r3, [r7, #4]
 801aa8a:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 801aa8e:	b2db      	uxtb	r3, r3
 801aa90:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 801aa92:	7bbb      	ldrb	r3, [r7, #14]
 801aa94:	2b01      	cmp	r3, #1
 801aa96:	d102      	bne.n	801aa9e <HAL_TIM_IC_Start_IT+0xae>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 801aa98:	7b7b      	ldrb	r3, [r7, #13]
 801aa9a:	2b01      	cmp	r3, #1
 801aa9c:	d001      	beq.n	801aaa2 <HAL_TIM_IC_Start_IT+0xb2>
  {
    return HAL_ERROR;
 801aa9e:	2301      	movs	r3, #1
 801aaa0:	e0dd      	b.n	801ac5e <HAL_TIM_IC_Start_IT+0x26e>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 801aaa2:	683b      	ldr	r3, [r7, #0]
 801aaa4:	2b00      	cmp	r3, #0
 801aaa6:	d104      	bne.n	801aab2 <HAL_TIM_IC_Start_IT+0xc2>
 801aaa8:	687b      	ldr	r3, [r7, #4]
 801aaaa:	2202      	movs	r2, #2
 801aaac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 801aab0:	e023      	b.n	801aafa <HAL_TIM_IC_Start_IT+0x10a>
 801aab2:	683b      	ldr	r3, [r7, #0]
 801aab4:	2b04      	cmp	r3, #4
 801aab6:	d104      	bne.n	801aac2 <HAL_TIM_IC_Start_IT+0xd2>
 801aab8:	687b      	ldr	r3, [r7, #4]
 801aaba:	2202      	movs	r2, #2
 801aabc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 801aac0:	e01b      	b.n	801aafa <HAL_TIM_IC_Start_IT+0x10a>
 801aac2:	683b      	ldr	r3, [r7, #0]
 801aac4:	2b08      	cmp	r3, #8
 801aac6:	d104      	bne.n	801aad2 <HAL_TIM_IC_Start_IT+0xe2>
 801aac8:	687b      	ldr	r3, [r7, #4]
 801aaca:	2202      	movs	r2, #2
 801aacc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 801aad0:	e013      	b.n	801aafa <HAL_TIM_IC_Start_IT+0x10a>
 801aad2:	683b      	ldr	r3, [r7, #0]
 801aad4:	2b0c      	cmp	r3, #12
 801aad6:	d104      	bne.n	801aae2 <HAL_TIM_IC_Start_IT+0xf2>
 801aad8:	687b      	ldr	r3, [r7, #4]
 801aada:	2202      	movs	r2, #2
 801aadc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 801aae0:	e00b      	b.n	801aafa <HAL_TIM_IC_Start_IT+0x10a>
 801aae2:	683b      	ldr	r3, [r7, #0]
 801aae4:	2b10      	cmp	r3, #16
 801aae6:	d104      	bne.n	801aaf2 <HAL_TIM_IC_Start_IT+0x102>
 801aae8:	687b      	ldr	r3, [r7, #4]
 801aaea:	2202      	movs	r2, #2
 801aaec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 801aaf0:	e003      	b.n	801aafa <HAL_TIM_IC_Start_IT+0x10a>
 801aaf2:	687b      	ldr	r3, [r7, #4]
 801aaf4:	2202      	movs	r2, #2
 801aaf6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 801aafa:	683b      	ldr	r3, [r7, #0]
 801aafc:	2b00      	cmp	r3, #0
 801aafe:	d104      	bne.n	801ab0a <HAL_TIM_IC_Start_IT+0x11a>
 801ab00:	687b      	ldr	r3, [r7, #4]
 801ab02:	2202      	movs	r2, #2
 801ab04:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801ab08:	e013      	b.n	801ab32 <HAL_TIM_IC_Start_IT+0x142>
 801ab0a:	683b      	ldr	r3, [r7, #0]
 801ab0c:	2b04      	cmp	r3, #4
 801ab0e:	d104      	bne.n	801ab1a <HAL_TIM_IC_Start_IT+0x12a>
 801ab10:	687b      	ldr	r3, [r7, #4]
 801ab12:	2202      	movs	r2, #2
 801ab14:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801ab18:	e00b      	b.n	801ab32 <HAL_TIM_IC_Start_IT+0x142>
 801ab1a:	683b      	ldr	r3, [r7, #0]
 801ab1c:	2b08      	cmp	r3, #8
 801ab1e:	d104      	bne.n	801ab2a <HAL_TIM_IC_Start_IT+0x13a>
 801ab20:	687b      	ldr	r3, [r7, #4]
 801ab22:	2202      	movs	r2, #2
 801ab24:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 801ab28:	e003      	b.n	801ab32 <HAL_TIM_IC_Start_IT+0x142>
 801ab2a:	687b      	ldr	r3, [r7, #4]
 801ab2c:	2202      	movs	r2, #2
 801ab2e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  switch (Channel)
 801ab32:	683b      	ldr	r3, [r7, #0]
 801ab34:	2b0c      	cmp	r3, #12
 801ab36:	d841      	bhi.n	801abbc <HAL_TIM_IC_Start_IT+0x1cc>
 801ab38:	a201      	add	r2, pc, #4	; (adr r2, 801ab40 <HAL_TIM_IC_Start_IT+0x150>)
 801ab3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801ab3e:	bf00      	nop
 801ab40:	0801ab75 	.word	0x0801ab75
 801ab44:	0801abbd 	.word	0x0801abbd
 801ab48:	0801abbd 	.word	0x0801abbd
 801ab4c:	0801abbd 	.word	0x0801abbd
 801ab50:	0801ab87 	.word	0x0801ab87
 801ab54:	0801abbd 	.word	0x0801abbd
 801ab58:	0801abbd 	.word	0x0801abbd
 801ab5c:	0801abbd 	.word	0x0801abbd
 801ab60:	0801ab99 	.word	0x0801ab99
 801ab64:	0801abbd 	.word	0x0801abbd
 801ab68:	0801abbd 	.word	0x0801abbd
 801ab6c:	0801abbd 	.word	0x0801abbd
 801ab70:	0801abab 	.word	0x0801abab
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 801ab74:	687b      	ldr	r3, [r7, #4]
 801ab76:	681b      	ldr	r3, [r3, #0]
 801ab78:	68da      	ldr	r2, [r3, #12]
 801ab7a:	687b      	ldr	r3, [r7, #4]
 801ab7c:	681b      	ldr	r3, [r3, #0]
 801ab7e:	f042 0202 	orr.w	r2, r2, #2
 801ab82:	60da      	str	r2, [r3, #12]
      break;
 801ab84:	e01d      	b.n	801abc2 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 801ab86:	687b      	ldr	r3, [r7, #4]
 801ab88:	681b      	ldr	r3, [r3, #0]
 801ab8a:	68da      	ldr	r2, [r3, #12]
 801ab8c:	687b      	ldr	r3, [r7, #4]
 801ab8e:	681b      	ldr	r3, [r3, #0]
 801ab90:	f042 0204 	orr.w	r2, r2, #4
 801ab94:	60da      	str	r2, [r3, #12]
      break;
 801ab96:	e014      	b.n	801abc2 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 801ab98:	687b      	ldr	r3, [r7, #4]
 801ab9a:	681b      	ldr	r3, [r3, #0]
 801ab9c:	68da      	ldr	r2, [r3, #12]
 801ab9e:	687b      	ldr	r3, [r7, #4]
 801aba0:	681b      	ldr	r3, [r3, #0]
 801aba2:	f042 0208 	orr.w	r2, r2, #8
 801aba6:	60da      	str	r2, [r3, #12]
      break;
 801aba8:	e00b      	b.n	801abc2 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 801abaa:	687b      	ldr	r3, [r7, #4]
 801abac:	681b      	ldr	r3, [r3, #0]
 801abae:	68da      	ldr	r2, [r3, #12]
 801abb0:	687b      	ldr	r3, [r7, #4]
 801abb2:	681b      	ldr	r3, [r3, #0]
 801abb4:	f042 0210 	orr.w	r2, r2, #16
 801abb8:	60da      	str	r2, [r3, #12]
      break;
 801abba:	e002      	b.n	801abc2 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    default:
      status = HAL_ERROR;
 801abbc:	2301      	movs	r3, #1
 801abbe:	73fb      	strb	r3, [r7, #15]
      break;
 801abc0:	bf00      	nop
  }

  if (status == HAL_OK)
 801abc2:	7bfb      	ldrb	r3, [r7, #15]
 801abc4:	2b00      	cmp	r3, #0
 801abc6:	d149      	bne.n	801ac5c <HAL_TIM_IC_Start_IT+0x26c>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 801abc8:	687b      	ldr	r3, [r7, #4]
 801abca:	681b      	ldr	r3, [r3, #0]
 801abcc:	2201      	movs	r2, #1
 801abce:	6839      	ldr	r1, [r7, #0]
 801abd0:	4618      	mov	r0, r3
 801abd2:	f001 fab7 	bl	801c144 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 801abd6:	687b      	ldr	r3, [r7, #4]
 801abd8:	681b      	ldr	r3, [r3, #0]
 801abda:	4a23      	ldr	r2, [pc, #140]	; (801ac68 <HAL_TIM_IC_Start_IT+0x278>)
 801abdc:	4293      	cmp	r3, r2
 801abde:	d01d      	beq.n	801ac1c <HAL_TIM_IC_Start_IT+0x22c>
 801abe0:	687b      	ldr	r3, [r7, #4]
 801abe2:	681b      	ldr	r3, [r3, #0]
 801abe4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801abe8:	d018      	beq.n	801ac1c <HAL_TIM_IC_Start_IT+0x22c>
 801abea:	687b      	ldr	r3, [r7, #4]
 801abec:	681b      	ldr	r3, [r3, #0]
 801abee:	4a1f      	ldr	r2, [pc, #124]	; (801ac6c <HAL_TIM_IC_Start_IT+0x27c>)
 801abf0:	4293      	cmp	r3, r2
 801abf2:	d013      	beq.n	801ac1c <HAL_TIM_IC_Start_IT+0x22c>
 801abf4:	687b      	ldr	r3, [r7, #4]
 801abf6:	681b      	ldr	r3, [r3, #0]
 801abf8:	4a1d      	ldr	r2, [pc, #116]	; (801ac70 <HAL_TIM_IC_Start_IT+0x280>)
 801abfa:	4293      	cmp	r3, r2
 801abfc:	d00e      	beq.n	801ac1c <HAL_TIM_IC_Start_IT+0x22c>
 801abfe:	687b      	ldr	r3, [r7, #4]
 801ac00:	681b      	ldr	r3, [r3, #0]
 801ac02:	4a1c      	ldr	r2, [pc, #112]	; (801ac74 <HAL_TIM_IC_Start_IT+0x284>)
 801ac04:	4293      	cmp	r3, r2
 801ac06:	d009      	beq.n	801ac1c <HAL_TIM_IC_Start_IT+0x22c>
 801ac08:	687b      	ldr	r3, [r7, #4]
 801ac0a:	681b      	ldr	r3, [r3, #0]
 801ac0c:	4a1a      	ldr	r2, [pc, #104]	; (801ac78 <HAL_TIM_IC_Start_IT+0x288>)
 801ac0e:	4293      	cmp	r3, r2
 801ac10:	d004      	beq.n	801ac1c <HAL_TIM_IC_Start_IT+0x22c>
 801ac12:	687b      	ldr	r3, [r7, #4]
 801ac14:	681b      	ldr	r3, [r3, #0]
 801ac16:	4a19      	ldr	r2, [pc, #100]	; (801ac7c <HAL_TIM_IC_Start_IT+0x28c>)
 801ac18:	4293      	cmp	r3, r2
 801ac1a:	d115      	bne.n	801ac48 <HAL_TIM_IC_Start_IT+0x258>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 801ac1c:	687b      	ldr	r3, [r7, #4]
 801ac1e:	681b      	ldr	r3, [r3, #0]
 801ac20:	689a      	ldr	r2, [r3, #8]
 801ac22:	4b17      	ldr	r3, [pc, #92]	; (801ac80 <HAL_TIM_IC_Start_IT+0x290>)
 801ac24:	4013      	ands	r3, r2
 801ac26:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801ac28:	68bb      	ldr	r3, [r7, #8]
 801ac2a:	2b06      	cmp	r3, #6
 801ac2c:	d015      	beq.n	801ac5a <HAL_TIM_IC_Start_IT+0x26a>
 801ac2e:	68bb      	ldr	r3, [r7, #8]
 801ac30:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801ac34:	d011      	beq.n	801ac5a <HAL_TIM_IC_Start_IT+0x26a>
      {
        __HAL_TIM_ENABLE(htim);
 801ac36:	687b      	ldr	r3, [r7, #4]
 801ac38:	681b      	ldr	r3, [r3, #0]
 801ac3a:	681a      	ldr	r2, [r3, #0]
 801ac3c:	687b      	ldr	r3, [r7, #4]
 801ac3e:	681b      	ldr	r3, [r3, #0]
 801ac40:	f042 0201 	orr.w	r2, r2, #1
 801ac44:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801ac46:	e008      	b.n	801ac5a <HAL_TIM_IC_Start_IT+0x26a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 801ac48:	687b      	ldr	r3, [r7, #4]
 801ac4a:	681b      	ldr	r3, [r3, #0]
 801ac4c:	681a      	ldr	r2, [r3, #0]
 801ac4e:	687b      	ldr	r3, [r7, #4]
 801ac50:	681b      	ldr	r3, [r3, #0]
 801ac52:	f042 0201 	orr.w	r2, r2, #1
 801ac56:	601a      	str	r2, [r3, #0]
 801ac58:	e000      	b.n	801ac5c <HAL_TIM_IC_Start_IT+0x26c>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801ac5a:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 801ac5c:	7bfb      	ldrb	r3, [r7, #15]
}
 801ac5e:	4618      	mov	r0, r3
 801ac60:	3710      	adds	r7, #16
 801ac62:	46bd      	mov	sp, r7
 801ac64:	bd80      	pop	{r7, pc}
 801ac66:	bf00      	nop
 801ac68:	40012c00 	.word	0x40012c00
 801ac6c:	40000400 	.word	0x40000400
 801ac70:	40000800 	.word	0x40000800
 801ac74:	40000c00 	.word	0x40000c00
 801ac78:	40013400 	.word	0x40013400
 801ac7c:	40014000 	.word	0x40014000
 801ac80:	00010007 	.word	0x00010007

0801ac84 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 801ac84:	b580      	push	{r7, lr}
 801ac86:	b086      	sub	sp, #24
 801ac88:	af00      	add	r7, sp, #0
 801ac8a:	6078      	str	r0, [r7, #4]
 801ac8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 801ac8e:	687b      	ldr	r3, [r7, #4]
 801ac90:	2b00      	cmp	r3, #0
 801ac92:	d101      	bne.n	801ac98 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 801ac94:	2301      	movs	r3, #1
 801ac96:	e097      	b.n	801adc8 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 801ac98:	687b      	ldr	r3, [r7, #4]
 801ac9a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801ac9e:	b2db      	uxtb	r3, r3
 801aca0:	2b00      	cmp	r3, #0
 801aca2:	d106      	bne.n	801acb2 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 801aca4:	687b      	ldr	r3, [r7, #4]
 801aca6:	2200      	movs	r2, #0
 801aca8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 801acac:	6878      	ldr	r0, [r7, #4]
 801acae:	f7f9 f87d 	bl	8013dac <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801acb2:	687b      	ldr	r3, [r7, #4]
 801acb4:	2202      	movs	r2, #2
 801acb6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 801acba:	687b      	ldr	r3, [r7, #4]
 801acbc:	681b      	ldr	r3, [r3, #0]
 801acbe:	689b      	ldr	r3, [r3, #8]
 801acc0:	687a      	ldr	r2, [r7, #4]
 801acc2:	6812      	ldr	r2, [r2, #0]
 801acc4:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 801acc8:	f023 0307 	bic.w	r3, r3, #7
 801accc:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 801acce:	687b      	ldr	r3, [r7, #4]
 801acd0:	681a      	ldr	r2, [r3, #0]
 801acd2:	687b      	ldr	r3, [r7, #4]
 801acd4:	3304      	adds	r3, #4
 801acd6:	4619      	mov	r1, r3
 801acd8:	4610      	mov	r0, r2
 801acda:	f000 fd03 	bl	801b6e4 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 801acde:	687b      	ldr	r3, [r7, #4]
 801ace0:	681b      	ldr	r3, [r3, #0]
 801ace2:	689b      	ldr	r3, [r3, #8]
 801ace4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 801ace6:	687b      	ldr	r3, [r7, #4]
 801ace8:	681b      	ldr	r3, [r3, #0]
 801acea:	699b      	ldr	r3, [r3, #24]
 801acec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 801acee:	687b      	ldr	r3, [r7, #4]
 801acf0:	681b      	ldr	r3, [r3, #0]
 801acf2:	6a1b      	ldr	r3, [r3, #32]
 801acf4:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 801acf6:	683b      	ldr	r3, [r7, #0]
 801acf8:	681b      	ldr	r3, [r3, #0]
 801acfa:	697a      	ldr	r2, [r7, #20]
 801acfc:	4313      	orrs	r3, r2
 801acfe:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 801ad00:	693b      	ldr	r3, [r7, #16]
 801ad02:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801ad06:	f023 0303 	bic.w	r3, r3, #3
 801ad0a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 801ad0c:	683b      	ldr	r3, [r7, #0]
 801ad0e:	689a      	ldr	r2, [r3, #8]
 801ad10:	683b      	ldr	r3, [r7, #0]
 801ad12:	699b      	ldr	r3, [r3, #24]
 801ad14:	021b      	lsls	r3, r3, #8
 801ad16:	4313      	orrs	r3, r2
 801ad18:	693a      	ldr	r2, [r7, #16]
 801ad1a:	4313      	orrs	r3, r2
 801ad1c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 801ad1e:	693b      	ldr	r3, [r7, #16]
 801ad20:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 801ad24:	f023 030c 	bic.w	r3, r3, #12
 801ad28:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 801ad2a:	693b      	ldr	r3, [r7, #16]
 801ad2c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 801ad30:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 801ad34:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 801ad36:	683b      	ldr	r3, [r7, #0]
 801ad38:	68da      	ldr	r2, [r3, #12]
 801ad3a:	683b      	ldr	r3, [r7, #0]
 801ad3c:	69db      	ldr	r3, [r3, #28]
 801ad3e:	021b      	lsls	r3, r3, #8
 801ad40:	4313      	orrs	r3, r2
 801ad42:	693a      	ldr	r2, [r7, #16]
 801ad44:	4313      	orrs	r3, r2
 801ad46:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 801ad48:	683b      	ldr	r3, [r7, #0]
 801ad4a:	691b      	ldr	r3, [r3, #16]
 801ad4c:	011a      	lsls	r2, r3, #4
 801ad4e:	683b      	ldr	r3, [r7, #0]
 801ad50:	6a1b      	ldr	r3, [r3, #32]
 801ad52:	031b      	lsls	r3, r3, #12
 801ad54:	4313      	orrs	r3, r2
 801ad56:	693a      	ldr	r2, [r7, #16]
 801ad58:	4313      	orrs	r3, r2
 801ad5a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 801ad5c:	68fb      	ldr	r3, [r7, #12]
 801ad5e:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 801ad62:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 801ad64:	68fb      	ldr	r3, [r7, #12]
 801ad66:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 801ad6a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 801ad6c:	683b      	ldr	r3, [r7, #0]
 801ad6e:	685a      	ldr	r2, [r3, #4]
 801ad70:	683b      	ldr	r3, [r7, #0]
 801ad72:	695b      	ldr	r3, [r3, #20]
 801ad74:	011b      	lsls	r3, r3, #4
 801ad76:	4313      	orrs	r3, r2
 801ad78:	68fa      	ldr	r2, [r7, #12]
 801ad7a:	4313      	orrs	r3, r2
 801ad7c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 801ad7e:	687b      	ldr	r3, [r7, #4]
 801ad80:	681b      	ldr	r3, [r3, #0]
 801ad82:	697a      	ldr	r2, [r7, #20]
 801ad84:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 801ad86:	687b      	ldr	r3, [r7, #4]
 801ad88:	681b      	ldr	r3, [r3, #0]
 801ad8a:	693a      	ldr	r2, [r7, #16]
 801ad8c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 801ad8e:	687b      	ldr	r3, [r7, #4]
 801ad90:	681b      	ldr	r3, [r3, #0]
 801ad92:	68fa      	ldr	r2, [r7, #12]
 801ad94:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 801ad96:	687b      	ldr	r3, [r7, #4]
 801ad98:	2201      	movs	r2, #1
 801ad9a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 801ad9e:	687b      	ldr	r3, [r7, #4]
 801ada0:	2201      	movs	r2, #1
 801ada2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 801ada6:	687b      	ldr	r3, [r7, #4]
 801ada8:	2201      	movs	r2, #1
 801adaa:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 801adae:	687b      	ldr	r3, [r7, #4]
 801adb0:	2201      	movs	r2, #1
 801adb2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 801adb6:	687b      	ldr	r3, [r7, #4]
 801adb8:	2201      	movs	r2, #1
 801adba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 801adbe:	687b      	ldr	r3, [r7, #4]
 801adc0:	2201      	movs	r2, #1
 801adc2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 801adc6:	2300      	movs	r3, #0
}
 801adc8:	4618      	mov	r0, r3
 801adca:	3718      	adds	r7, #24
 801adcc:	46bd      	mov	sp, r7
 801adce:	bd80      	pop	{r7, pc}

0801add0 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 801add0:	b580      	push	{r7, lr}
 801add2:	b084      	sub	sp, #16
 801add4:	af00      	add	r7, sp, #0
 801add6:	6078      	str	r0, [r7, #4]
 801add8:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 801adda:	687b      	ldr	r3, [r7, #4]
 801addc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 801ade0:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 801ade2:	687b      	ldr	r3, [r7, #4]
 801ade4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 801ade8:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 801adea:	687b      	ldr	r3, [r7, #4]
 801adec:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801adf0:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 801adf2:	687b      	ldr	r3, [r7, #4]
 801adf4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801adf8:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 801adfa:	683b      	ldr	r3, [r7, #0]
 801adfc:	2b00      	cmp	r3, #0
 801adfe:	d110      	bne.n	801ae22 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 801ae00:	7bfb      	ldrb	r3, [r7, #15]
 801ae02:	2b01      	cmp	r3, #1
 801ae04:	d102      	bne.n	801ae0c <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 801ae06:	7b7b      	ldrb	r3, [r7, #13]
 801ae08:	2b01      	cmp	r3, #1
 801ae0a:	d001      	beq.n	801ae10 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 801ae0c:	2301      	movs	r3, #1
 801ae0e:	e069      	b.n	801aee4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 801ae10:	687b      	ldr	r3, [r7, #4]
 801ae12:	2202      	movs	r2, #2
 801ae14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 801ae18:	687b      	ldr	r3, [r7, #4]
 801ae1a:	2202      	movs	r2, #2
 801ae1c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801ae20:	e031      	b.n	801ae86 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 801ae22:	683b      	ldr	r3, [r7, #0]
 801ae24:	2b04      	cmp	r3, #4
 801ae26:	d110      	bne.n	801ae4a <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 801ae28:	7bbb      	ldrb	r3, [r7, #14]
 801ae2a:	2b01      	cmp	r3, #1
 801ae2c:	d102      	bne.n	801ae34 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 801ae2e:	7b3b      	ldrb	r3, [r7, #12]
 801ae30:	2b01      	cmp	r3, #1
 801ae32:	d001      	beq.n	801ae38 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 801ae34:	2301      	movs	r3, #1
 801ae36:	e055      	b.n	801aee4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 801ae38:	687b      	ldr	r3, [r7, #4]
 801ae3a:	2202      	movs	r2, #2
 801ae3c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 801ae40:	687b      	ldr	r3, [r7, #4]
 801ae42:	2202      	movs	r2, #2
 801ae44:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801ae48:	e01d      	b.n	801ae86 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 801ae4a:	7bfb      	ldrb	r3, [r7, #15]
 801ae4c:	2b01      	cmp	r3, #1
 801ae4e:	d108      	bne.n	801ae62 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 801ae50:	7bbb      	ldrb	r3, [r7, #14]
 801ae52:	2b01      	cmp	r3, #1
 801ae54:	d105      	bne.n	801ae62 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 801ae56:	7b7b      	ldrb	r3, [r7, #13]
 801ae58:	2b01      	cmp	r3, #1
 801ae5a:	d102      	bne.n	801ae62 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 801ae5c:	7b3b      	ldrb	r3, [r7, #12]
 801ae5e:	2b01      	cmp	r3, #1
 801ae60:	d001      	beq.n	801ae66 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 801ae62:	2301      	movs	r3, #1
 801ae64:	e03e      	b.n	801aee4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 801ae66:	687b      	ldr	r3, [r7, #4]
 801ae68:	2202      	movs	r2, #2
 801ae6a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 801ae6e:	687b      	ldr	r3, [r7, #4]
 801ae70:	2202      	movs	r2, #2
 801ae72:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 801ae76:	687b      	ldr	r3, [r7, #4]
 801ae78:	2202      	movs	r2, #2
 801ae7a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 801ae7e:	687b      	ldr	r3, [r7, #4]
 801ae80:	2202      	movs	r2, #2
 801ae82:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 801ae86:	683b      	ldr	r3, [r7, #0]
 801ae88:	2b00      	cmp	r3, #0
 801ae8a:	d003      	beq.n	801ae94 <HAL_TIM_Encoder_Start+0xc4>
 801ae8c:	683b      	ldr	r3, [r7, #0]
 801ae8e:	2b04      	cmp	r3, #4
 801ae90:	d008      	beq.n	801aea4 <HAL_TIM_Encoder_Start+0xd4>
 801ae92:	e00f      	b.n	801aeb4 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 801ae94:	687b      	ldr	r3, [r7, #4]
 801ae96:	681b      	ldr	r3, [r3, #0]
 801ae98:	2201      	movs	r2, #1
 801ae9a:	2100      	movs	r1, #0
 801ae9c:	4618      	mov	r0, r3
 801ae9e:	f001 f951 	bl	801c144 <TIM_CCxChannelCmd>
      break;
 801aea2:	e016      	b.n	801aed2 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 801aea4:	687b      	ldr	r3, [r7, #4]
 801aea6:	681b      	ldr	r3, [r3, #0]
 801aea8:	2201      	movs	r2, #1
 801aeaa:	2104      	movs	r1, #4
 801aeac:	4618      	mov	r0, r3
 801aeae:	f001 f949 	bl	801c144 <TIM_CCxChannelCmd>
      break;
 801aeb2:	e00e      	b.n	801aed2 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 801aeb4:	687b      	ldr	r3, [r7, #4]
 801aeb6:	681b      	ldr	r3, [r3, #0]
 801aeb8:	2201      	movs	r2, #1
 801aeba:	2100      	movs	r1, #0
 801aebc:	4618      	mov	r0, r3
 801aebe:	f001 f941 	bl	801c144 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 801aec2:	687b      	ldr	r3, [r7, #4]
 801aec4:	681b      	ldr	r3, [r3, #0]
 801aec6:	2201      	movs	r2, #1
 801aec8:	2104      	movs	r1, #4
 801aeca:	4618      	mov	r0, r3
 801aecc:	f001 f93a 	bl	801c144 <TIM_CCxChannelCmd>
      break;
 801aed0:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 801aed2:	687b      	ldr	r3, [r7, #4]
 801aed4:	681b      	ldr	r3, [r3, #0]
 801aed6:	681a      	ldr	r2, [r3, #0]
 801aed8:	687b      	ldr	r3, [r7, #4]
 801aeda:	681b      	ldr	r3, [r3, #0]
 801aedc:	f042 0201 	orr.w	r2, r2, #1
 801aee0:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 801aee2:	2300      	movs	r3, #0
}
 801aee4:	4618      	mov	r0, r3
 801aee6:	3710      	adds	r7, #16
 801aee8:	46bd      	mov	sp, r7
 801aeea:	bd80      	pop	{r7, pc}

0801aeec <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 801aeec:	b580      	push	{r7, lr}
 801aeee:	b082      	sub	sp, #8
 801aef0:	af00      	add	r7, sp, #0
 801aef2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 801aef4:	687b      	ldr	r3, [r7, #4]
 801aef6:	681b      	ldr	r3, [r3, #0]
 801aef8:	691b      	ldr	r3, [r3, #16]
 801aefa:	f003 0302 	and.w	r3, r3, #2
 801aefe:	2b02      	cmp	r3, #2
 801af00:	d122      	bne.n	801af48 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 801af02:	687b      	ldr	r3, [r7, #4]
 801af04:	681b      	ldr	r3, [r3, #0]
 801af06:	68db      	ldr	r3, [r3, #12]
 801af08:	f003 0302 	and.w	r3, r3, #2
 801af0c:	2b02      	cmp	r3, #2
 801af0e:	d11b      	bne.n	801af48 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 801af10:	687b      	ldr	r3, [r7, #4]
 801af12:	681b      	ldr	r3, [r3, #0]
 801af14:	f06f 0202 	mvn.w	r2, #2
 801af18:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 801af1a:	687b      	ldr	r3, [r7, #4]
 801af1c:	2201      	movs	r2, #1
 801af1e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 801af20:	687b      	ldr	r3, [r7, #4]
 801af22:	681b      	ldr	r3, [r3, #0]
 801af24:	699b      	ldr	r3, [r3, #24]
 801af26:	f003 0303 	and.w	r3, r3, #3
 801af2a:	2b00      	cmp	r3, #0
 801af2c:	d003      	beq.n	801af36 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 801af2e:	6878      	ldr	r0, [r7, #4]
 801af30:	f7e9 fb6c 	bl	800460c <HAL_TIM_IC_CaptureCallback>
 801af34:	e005      	b.n	801af42 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 801af36:	6878      	ldr	r0, [r7, #4]
 801af38:	f000 fbb6 	bl	801b6a8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 801af3c:	6878      	ldr	r0, [r7, #4]
 801af3e:	f000 fbbd 	bl	801b6bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801af42:	687b      	ldr	r3, [r7, #4]
 801af44:	2200      	movs	r2, #0
 801af46:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 801af48:	687b      	ldr	r3, [r7, #4]
 801af4a:	681b      	ldr	r3, [r3, #0]
 801af4c:	691b      	ldr	r3, [r3, #16]
 801af4e:	f003 0304 	and.w	r3, r3, #4
 801af52:	2b04      	cmp	r3, #4
 801af54:	d122      	bne.n	801af9c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 801af56:	687b      	ldr	r3, [r7, #4]
 801af58:	681b      	ldr	r3, [r3, #0]
 801af5a:	68db      	ldr	r3, [r3, #12]
 801af5c:	f003 0304 	and.w	r3, r3, #4
 801af60:	2b04      	cmp	r3, #4
 801af62:	d11b      	bne.n	801af9c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 801af64:	687b      	ldr	r3, [r7, #4]
 801af66:	681b      	ldr	r3, [r3, #0]
 801af68:	f06f 0204 	mvn.w	r2, #4
 801af6c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 801af6e:	687b      	ldr	r3, [r7, #4]
 801af70:	2202      	movs	r2, #2
 801af72:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 801af74:	687b      	ldr	r3, [r7, #4]
 801af76:	681b      	ldr	r3, [r3, #0]
 801af78:	699b      	ldr	r3, [r3, #24]
 801af7a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 801af7e:	2b00      	cmp	r3, #0
 801af80:	d003      	beq.n	801af8a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 801af82:	6878      	ldr	r0, [r7, #4]
 801af84:	f7e9 fb42 	bl	800460c <HAL_TIM_IC_CaptureCallback>
 801af88:	e005      	b.n	801af96 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 801af8a:	6878      	ldr	r0, [r7, #4]
 801af8c:	f000 fb8c 	bl	801b6a8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 801af90:	6878      	ldr	r0, [r7, #4]
 801af92:	f000 fb93 	bl	801b6bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801af96:	687b      	ldr	r3, [r7, #4]
 801af98:	2200      	movs	r2, #0
 801af9a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 801af9c:	687b      	ldr	r3, [r7, #4]
 801af9e:	681b      	ldr	r3, [r3, #0]
 801afa0:	691b      	ldr	r3, [r3, #16]
 801afa2:	f003 0308 	and.w	r3, r3, #8
 801afa6:	2b08      	cmp	r3, #8
 801afa8:	d122      	bne.n	801aff0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 801afaa:	687b      	ldr	r3, [r7, #4]
 801afac:	681b      	ldr	r3, [r3, #0]
 801afae:	68db      	ldr	r3, [r3, #12]
 801afb0:	f003 0308 	and.w	r3, r3, #8
 801afb4:	2b08      	cmp	r3, #8
 801afb6:	d11b      	bne.n	801aff0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 801afb8:	687b      	ldr	r3, [r7, #4]
 801afba:	681b      	ldr	r3, [r3, #0]
 801afbc:	f06f 0208 	mvn.w	r2, #8
 801afc0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 801afc2:	687b      	ldr	r3, [r7, #4]
 801afc4:	2204      	movs	r2, #4
 801afc6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 801afc8:	687b      	ldr	r3, [r7, #4]
 801afca:	681b      	ldr	r3, [r3, #0]
 801afcc:	69db      	ldr	r3, [r3, #28]
 801afce:	f003 0303 	and.w	r3, r3, #3
 801afd2:	2b00      	cmp	r3, #0
 801afd4:	d003      	beq.n	801afde <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 801afd6:	6878      	ldr	r0, [r7, #4]
 801afd8:	f7e9 fb18 	bl	800460c <HAL_TIM_IC_CaptureCallback>
 801afdc:	e005      	b.n	801afea <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 801afde:	6878      	ldr	r0, [r7, #4]
 801afe0:	f000 fb62 	bl	801b6a8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 801afe4:	6878      	ldr	r0, [r7, #4]
 801afe6:	f000 fb69 	bl	801b6bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801afea:	687b      	ldr	r3, [r7, #4]
 801afec:	2200      	movs	r2, #0
 801afee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 801aff0:	687b      	ldr	r3, [r7, #4]
 801aff2:	681b      	ldr	r3, [r3, #0]
 801aff4:	691b      	ldr	r3, [r3, #16]
 801aff6:	f003 0310 	and.w	r3, r3, #16
 801affa:	2b10      	cmp	r3, #16
 801affc:	d122      	bne.n	801b044 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 801affe:	687b      	ldr	r3, [r7, #4]
 801b000:	681b      	ldr	r3, [r3, #0]
 801b002:	68db      	ldr	r3, [r3, #12]
 801b004:	f003 0310 	and.w	r3, r3, #16
 801b008:	2b10      	cmp	r3, #16
 801b00a:	d11b      	bne.n	801b044 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 801b00c:	687b      	ldr	r3, [r7, #4]
 801b00e:	681b      	ldr	r3, [r3, #0]
 801b010:	f06f 0210 	mvn.w	r2, #16
 801b014:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 801b016:	687b      	ldr	r3, [r7, #4]
 801b018:	2208      	movs	r2, #8
 801b01a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 801b01c:	687b      	ldr	r3, [r7, #4]
 801b01e:	681b      	ldr	r3, [r3, #0]
 801b020:	69db      	ldr	r3, [r3, #28]
 801b022:	f403 7340 	and.w	r3, r3, #768	; 0x300
 801b026:	2b00      	cmp	r3, #0
 801b028:	d003      	beq.n	801b032 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 801b02a:	6878      	ldr	r0, [r7, #4]
 801b02c:	f7e9 faee 	bl	800460c <HAL_TIM_IC_CaptureCallback>
 801b030:	e005      	b.n	801b03e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 801b032:	6878      	ldr	r0, [r7, #4]
 801b034:	f000 fb38 	bl	801b6a8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 801b038:	6878      	ldr	r0, [r7, #4]
 801b03a:	f000 fb3f 	bl	801b6bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801b03e:	687b      	ldr	r3, [r7, #4]
 801b040:	2200      	movs	r2, #0
 801b042:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 801b044:	687b      	ldr	r3, [r7, #4]
 801b046:	681b      	ldr	r3, [r3, #0]
 801b048:	691b      	ldr	r3, [r3, #16]
 801b04a:	f003 0301 	and.w	r3, r3, #1
 801b04e:	2b01      	cmp	r3, #1
 801b050:	d10e      	bne.n	801b070 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 801b052:	687b      	ldr	r3, [r7, #4]
 801b054:	681b      	ldr	r3, [r3, #0]
 801b056:	68db      	ldr	r3, [r3, #12]
 801b058:	f003 0301 	and.w	r3, r3, #1
 801b05c:	2b01      	cmp	r3, #1
 801b05e:	d107      	bne.n	801b070 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 801b060:	687b      	ldr	r3, [r7, #4]
 801b062:	681b      	ldr	r3, [r3, #0]
 801b064:	f06f 0201 	mvn.w	r2, #1
 801b068:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 801b06a:	6878      	ldr	r0, [r7, #4]
 801b06c:	f7f8 fa9e 	bl	80135ac <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 801b070:	687b      	ldr	r3, [r7, #4]
 801b072:	681b      	ldr	r3, [r3, #0]
 801b074:	691b      	ldr	r3, [r3, #16]
 801b076:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801b07a:	2b80      	cmp	r3, #128	; 0x80
 801b07c:	d10e      	bne.n	801b09c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 801b07e:	687b      	ldr	r3, [r7, #4]
 801b080:	681b      	ldr	r3, [r3, #0]
 801b082:	68db      	ldr	r3, [r3, #12]
 801b084:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801b088:	2b80      	cmp	r3, #128	; 0x80
 801b08a:	d107      	bne.n	801b09c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 801b08c:	687b      	ldr	r3, [r7, #4]
 801b08e:	681b      	ldr	r3, [r3, #0]
 801b090:	f06f 0280 	mvn.w	r2, #128	; 0x80
 801b094:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 801b096:	6878      	ldr	r0, [r7, #4]
 801b098:	f001 f9ac 	bl	801c3f4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 801b09c:	687b      	ldr	r3, [r7, #4]
 801b09e:	681b      	ldr	r3, [r3, #0]
 801b0a0:	691b      	ldr	r3, [r3, #16]
 801b0a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801b0a6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801b0aa:	d10e      	bne.n	801b0ca <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 801b0ac:	687b      	ldr	r3, [r7, #4]
 801b0ae:	681b      	ldr	r3, [r3, #0]
 801b0b0:	68db      	ldr	r3, [r3, #12]
 801b0b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801b0b6:	2b80      	cmp	r3, #128	; 0x80
 801b0b8:	d107      	bne.n	801b0ca <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 801b0ba:	687b      	ldr	r3, [r7, #4]
 801b0bc:	681b      	ldr	r3, [r3, #0]
 801b0be:	f46f 7280 	mvn.w	r2, #256	; 0x100
 801b0c2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 801b0c4:	6878      	ldr	r0, [r7, #4]
 801b0c6:	f001 f99f 	bl	801c408 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 801b0ca:	687b      	ldr	r3, [r7, #4]
 801b0cc:	681b      	ldr	r3, [r3, #0]
 801b0ce:	691b      	ldr	r3, [r3, #16]
 801b0d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801b0d4:	2b40      	cmp	r3, #64	; 0x40
 801b0d6:	d10e      	bne.n	801b0f6 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 801b0d8:	687b      	ldr	r3, [r7, #4]
 801b0da:	681b      	ldr	r3, [r3, #0]
 801b0dc:	68db      	ldr	r3, [r3, #12]
 801b0de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801b0e2:	2b40      	cmp	r3, #64	; 0x40
 801b0e4:	d107      	bne.n	801b0f6 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 801b0e6:	687b      	ldr	r3, [r7, #4]
 801b0e8:	681b      	ldr	r3, [r3, #0]
 801b0ea:	f06f 0240 	mvn.w	r2, #64	; 0x40
 801b0ee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 801b0f0:	6878      	ldr	r0, [r7, #4]
 801b0f2:	f000 faed 	bl	801b6d0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 801b0f6:	687b      	ldr	r3, [r7, #4]
 801b0f8:	681b      	ldr	r3, [r3, #0]
 801b0fa:	691b      	ldr	r3, [r3, #16]
 801b0fc:	f003 0320 	and.w	r3, r3, #32
 801b100:	2b20      	cmp	r3, #32
 801b102:	d10e      	bne.n	801b122 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 801b104:	687b      	ldr	r3, [r7, #4]
 801b106:	681b      	ldr	r3, [r3, #0]
 801b108:	68db      	ldr	r3, [r3, #12]
 801b10a:	f003 0320 	and.w	r3, r3, #32
 801b10e:	2b20      	cmp	r3, #32
 801b110:	d107      	bne.n	801b122 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 801b112:	687b      	ldr	r3, [r7, #4]
 801b114:	681b      	ldr	r3, [r3, #0]
 801b116:	f06f 0220 	mvn.w	r2, #32
 801b11a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 801b11c:	6878      	ldr	r0, [r7, #4]
 801b11e:	f001 f95f 	bl	801c3e0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 801b122:	bf00      	nop
 801b124:	3708      	adds	r7, #8
 801b126:	46bd      	mov	sp, r7
 801b128:	bd80      	pop	{r7, pc}

0801b12a <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 801b12a:	b580      	push	{r7, lr}
 801b12c:	b086      	sub	sp, #24
 801b12e:	af00      	add	r7, sp, #0
 801b130:	60f8      	str	r0, [r7, #12]
 801b132:	60b9      	str	r1, [r7, #8]
 801b134:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 801b136:	2300      	movs	r3, #0
 801b138:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 801b13a:	68fb      	ldr	r3, [r7, #12]
 801b13c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801b140:	2b01      	cmp	r3, #1
 801b142:	d101      	bne.n	801b148 <HAL_TIM_IC_ConfigChannel+0x1e>
 801b144:	2302      	movs	r3, #2
 801b146:	e088      	b.n	801b25a <HAL_TIM_IC_ConfigChannel+0x130>
 801b148:	68fb      	ldr	r3, [r7, #12]
 801b14a:	2201      	movs	r2, #1
 801b14c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 801b150:	687b      	ldr	r3, [r7, #4]
 801b152:	2b00      	cmp	r3, #0
 801b154:	d11b      	bne.n	801b18e <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 801b156:	68fb      	ldr	r3, [r7, #12]
 801b158:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 801b15a:	68bb      	ldr	r3, [r7, #8]
 801b15c:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 801b15e:	68bb      	ldr	r3, [r7, #8]
 801b160:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 801b162:	68bb      	ldr	r3, [r7, #8]
 801b164:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 801b166:	f000 fe2d 	bl	801bdc4 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 801b16a:	68fb      	ldr	r3, [r7, #12]
 801b16c:	681b      	ldr	r3, [r3, #0]
 801b16e:	699a      	ldr	r2, [r3, #24]
 801b170:	68fb      	ldr	r3, [r7, #12]
 801b172:	681b      	ldr	r3, [r3, #0]
 801b174:	f022 020c 	bic.w	r2, r2, #12
 801b178:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 801b17a:	68fb      	ldr	r3, [r7, #12]
 801b17c:	681b      	ldr	r3, [r3, #0]
 801b17e:	6999      	ldr	r1, [r3, #24]
 801b180:	68bb      	ldr	r3, [r7, #8]
 801b182:	689a      	ldr	r2, [r3, #8]
 801b184:	68fb      	ldr	r3, [r7, #12]
 801b186:	681b      	ldr	r3, [r3, #0]
 801b188:	430a      	orrs	r2, r1
 801b18a:	619a      	str	r2, [r3, #24]
 801b18c:	e060      	b.n	801b250 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 801b18e:	687b      	ldr	r3, [r7, #4]
 801b190:	2b04      	cmp	r3, #4
 801b192:	d11c      	bne.n	801b1ce <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 801b194:	68fb      	ldr	r3, [r7, #12]
 801b196:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 801b198:	68bb      	ldr	r3, [r7, #8]
 801b19a:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 801b19c:	68bb      	ldr	r3, [r7, #8]
 801b19e:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 801b1a0:	68bb      	ldr	r3, [r7, #8]
 801b1a2:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 801b1a4:	f000 feab 	bl	801befe <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 801b1a8:	68fb      	ldr	r3, [r7, #12]
 801b1aa:	681b      	ldr	r3, [r3, #0]
 801b1ac:	699a      	ldr	r2, [r3, #24]
 801b1ae:	68fb      	ldr	r3, [r7, #12]
 801b1b0:	681b      	ldr	r3, [r3, #0]
 801b1b2:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 801b1b6:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 801b1b8:	68fb      	ldr	r3, [r7, #12]
 801b1ba:	681b      	ldr	r3, [r3, #0]
 801b1bc:	6999      	ldr	r1, [r3, #24]
 801b1be:	68bb      	ldr	r3, [r7, #8]
 801b1c0:	689b      	ldr	r3, [r3, #8]
 801b1c2:	021a      	lsls	r2, r3, #8
 801b1c4:	68fb      	ldr	r3, [r7, #12]
 801b1c6:	681b      	ldr	r3, [r3, #0]
 801b1c8:	430a      	orrs	r2, r1
 801b1ca:	619a      	str	r2, [r3, #24]
 801b1cc:	e040      	b.n	801b250 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 801b1ce:	687b      	ldr	r3, [r7, #4]
 801b1d0:	2b08      	cmp	r3, #8
 801b1d2:	d11b      	bne.n	801b20c <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 801b1d4:	68fb      	ldr	r3, [r7, #12]
 801b1d6:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 801b1d8:	68bb      	ldr	r3, [r7, #8]
 801b1da:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 801b1dc:	68bb      	ldr	r3, [r7, #8]
 801b1de:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 801b1e0:	68bb      	ldr	r3, [r7, #8]
 801b1e2:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 801b1e4:	f000 fef8 	bl	801bfd8 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 801b1e8:	68fb      	ldr	r3, [r7, #12]
 801b1ea:	681b      	ldr	r3, [r3, #0]
 801b1ec:	69da      	ldr	r2, [r3, #28]
 801b1ee:	68fb      	ldr	r3, [r7, #12]
 801b1f0:	681b      	ldr	r3, [r3, #0]
 801b1f2:	f022 020c 	bic.w	r2, r2, #12
 801b1f6:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 801b1f8:	68fb      	ldr	r3, [r7, #12]
 801b1fa:	681b      	ldr	r3, [r3, #0]
 801b1fc:	69d9      	ldr	r1, [r3, #28]
 801b1fe:	68bb      	ldr	r3, [r7, #8]
 801b200:	689a      	ldr	r2, [r3, #8]
 801b202:	68fb      	ldr	r3, [r7, #12]
 801b204:	681b      	ldr	r3, [r3, #0]
 801b206:	430a      	orrs	r2, r1
 801b208:	61da      	str	r2, [r3, #28]
 801b20a:	e021      	b.n	801b250 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 801b20c:	687b      	ldr	r3, [r7, #4]
 801b20e:	2b0c      	cmp	r3, #12
 801b210:	d11c      	bne.n	801b24c <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 801b212:	68fb      	ldr	r3, [r7, #12]
 801b214:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 801b216:	68bb      	ldr	r3, [r7, #8]
 801b218:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 801b21a:	68bb      	ldr	r3, [r7, #8]
 801b21c:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 801b21e:	68bb      	ldr	r3, [r7, #8]
 801b220:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 801b222:	f000 ff15 	bl	801c050 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 801b226:	68fb      	ldr	r3, [r7, #12]
 801b228:	681b      	ldr	r3, [r3, #0]
 801b22a:	69da      	ldr	r2, [r3, #28]
 801b22c:	68fb      	ldr	r3, [r7, #12]
 801b22e:	681b      	ldr	r3, [r3, #0]
 801b230:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 801b234:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 801b236:	68fb      	ldr	r3, [r7, #12]
 801b238:	681b      	ldr	r3, [r3, #0]
 801b23a:	69d9      	ldr	r1, [r3, #28]
 801b23c:	68bb      	ldr	r3, [r7, #8]
 801b23e:	689b      	ldr	r3, [r3, #8]
 801b240:	021a      	lsls	r2, r3, #8
 801b242:	68fb      	ldr	r3, [r7, #12]
 801b244:	681b      	ldr	r3, [r3, #0]
 801b246:	430a      	orrs	r2, r1
 801b248:	61da      	str	r2, [r3, #28]
 801b24a:	e001      	b.n	801b250 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 801b24c:	2301      	movs	r3, #1
 801b24e:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 801b250:	68fb      	ldr	r3, [r7, #12]
 801b252:	2200      	movs	r2, #0
 801b254:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 801b258:	7dfb      	ldrb	r3, [r7, #23]
}
 801b25a:	4618      	mov	r0, r3
 801b25c:	3718      	adds	r7, #24
 801b25e:	46bd      	mov	sp, r7
 801b260:	bd80      	pop	{r7, pc}
	...

0801b264 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 801b264:	b580      	push	{r7, lr}
 801b266:	b086      	sub	sp, #24
 801b268:	af00      	add	r7, sp, #0
 801b26a:	60f8      	str	r0, [r7, #12]
 801b26c:	60b9      	str	r1, [r7, #8]
 801b26e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 801b270:	2300      	movs	r3, #0
 801b272:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 801b274:	68fb      	ldr	r3, [r7, #12]
 801b276:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801b27a:	2b01      	cmp	r3, #1
 801b27c:	d101      	bne.n	801b282 <HAL_TIM_PWM_ConfigChannel+0x1e>
 801b27e:	2302      	movs	r3, #2
 801b280:	e0ff      	b.n	801b482 <HAL_TIM_PWM_ConfigChannel+0x21e>
 801b282:	68fb      	ldr	r3, [r7, #12]
 801b284:	2201      	movs	r2, #1
 801b286:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 801b28a:	687b      	ldr	r3, [r7, #4]
 801b28c:	2b14      	cmp	r3, #20
 801b28e:	f200 80f0 	bhi.w	801b472 <HAL_TIM_PWM_ConfigChannel+0x20e>
 801b292:	a201      	add	r2, pc, #4	; (adr r2, 801b298 <HAL_TIM_PWM_ConfigChannel+0x34>)
 801b294:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801b298:	0801b2ed 	.word	0x0801b2ed
 801b29c:	0801b473 	.word	0x0801b473
 801b2a0:	0801b473 	.word	0x0801b473
 801b2a4:	0801b473 	.word	0x0801b473
 801b2a8:	0801b32d 	.word	0x0801b32d
 801b2ac:	0801b473 	.word	0x0801b473
 801b2b0:	0801b473 	.word	0x0801b473
 801b2b4:	0801b473 	.word	0x0801b473
 801b2b8:	0801b36f 	.word	0x0801b36f
 801b2bc:	0801b473 	.word	0x0801b473
 801b2c0:	0801b473 	.word	0x0801b473
 801b2c4:	0801b473 	.word	0x0801b473
 801b2c8:	0801b3af 	.word	0x0801b3af
 801b2cc:	0801b473 	.word	0x0801b473
 801b2d0:	0801b473 	.word	0x0801b473
 801b2d4:	0801b473 	.word	0x0801b473
 801b2d8:	0801b3f1 	.word	0x0801b3f1
 801b2dc:	0801b473 	.word	0x0801b473
 801b2e0:	0801b473 	.word	0x0801b473
 801b2e4:	0801b473 	.word	0x0801b473
 801b2e8:	0801b431 	.word	0x0801b431
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 801b2ec:	68fb      	ldr	r3, [r7, #12]
 801b2ee:	681b      	ldr	r3, [r3, #0]
 801b2f0:	68b9      	ldr	r1, [r7, #8]
 801b2f2:	4618      	mov	r0, r3
 801b2f4:	f000 fa90 	bl	801b818 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 801b2f8:	68fb      	ldr	r3, [r7, #12]
 801b2fa:	681b      	ldr	r3, [r3, #0]
 801b2fc:	699a      	ldr	r2, [r3, #24]
 801b2fe:	68fb      	ldr	r3, [r7, #12]
 801b300:	681b      	ldr	r3, [r3, #0]
 801b302:	f042 0208 	orr.w	r2, r2, #8
 801b306:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 801b308:	68fb      	ldr	r3, [r7, #12]
 801b30a:	681b      	ldr	r3, [r3, #0]
 801b30c:	699a      	ldr	r2, [r3, #24]
 801b30e:	68fb      	ldr	r3, [r7, #12]
 801b310:	681b      	ldr	r3, [r3, #0]
 801b312:	f022 0204 	bic.w	r2, r2, #4
 801b316:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 801b318:	68fb      	ldr	r3, [r7, #12]
 801b31a:	681b      	ldr	r3, [r3, #0]
 801b31c:	6999      	ldr	r1, [r3, #24]
 801b31e:	68bb      	ldr	r3, [r7, #8]
 801b320:	691a      	ldr	r2, [r3, #16]
 801b322:	68fb      	ldr	r3, [r7, #12]
 801b324:	681b      	ldr	r3, [r3, #0]
 801b326:	430a      	orrs	r2, r1
 801b328:	619a      	str	r2, [r3, #24]
      break;
 801b32a:	e0a5      	b.n	801b478 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 801b32c:	68fb      	ldr	r3, [r7, #12]
 801b32e:	681b      	ldr	r3, [r3, #0]
 801b330:	68b9      	ldr	r1, [r7, #8]
 801b332:	4618      	mov	r0, r3
 801b334:	f000 fb00 	bl	801b938 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 801b338:	68fb      	ldr	r3, [r7, #12]
 801b33a:	681b      	ldr	r3, [r3, #0]
 801b33c:	699a      	ldr	r2, [r3, #24]
 801b33e:	68fb      	ldr	r3, [r7, #12]
 801b340:	681b      	ldr	r3, [r3, #0]
 801b342:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 801b346:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 801b348:	68fb      	ldr	r3, [r7, #12]
 801b34a:	681b      	ldr	r3, [r3, #0]
 801b34c:	699a      	ldr	r2, [r3, #24]
 801b34e:	68fb      	ldr	r3, [r7, #12]
 801b350:	681b      	ldr	r3, [r3, #0]
 801b352:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801b356:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 801b358:	68fb      	ldr	r3, [r7, #12]
 801b35a:	681b      	ldr	r3, [r3, #0]
 801b35c:	6999      	ldr	r1, [r3, #24]
 801b35e:	68bb      	ldr	r3, [r7, #8]
 801b360:	691b      	ldr	r3, [r3, #16]
 801b362:	021a      	lsls	r2, r3, #8
 801b364:	68fb      	ldr	r3, [r7, #12]
 801b366:	681b      	ldr	r3, [r3, #0]
 801b368:	430a      	orrs	r2, r1
 801b36a:	619a      	str	r2, [r3, #24]
      break;
 801b36c:	e084      	b.n	801b478 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 801b36e:	68fb      	ldr	r3, [r7, #12]
 801b370:	681b      	ldr	r3, [r3, #0]
 801b372:	68b9      	ldr	r1, [r7, #8]
 801b374:	4618      	mov	r0, r3
 801b376:	f000 fb69 	bl	801ba4c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 801b37a:	68fb      	ldr	r3, [r7, #12]
 801b37c:	681b      	ldr	r3, [r3, #0]
 801b37e:	69da      	ldr	r2, [r3, #28]
 801b380:	68fb      	ldr	r3, [r7, #12]
 801b382:	681b      	ldr	r3, [r3, #0]
 801b384:	f042 0208 	orr.w	r2, r2, #8
 801b388:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 801b38a:	68fb      	ldr	r3, [r7, #12]
 801b38c:	681b      	ldr	r3, [r3, #0]
 801b38e:	69da      	ldr	r2, [r3, #28]
 801b390:	68fb      	ldr	r3, [r7, #12]
 801b392:	681b      	ldr	r3, [r3, #0]
 801b394:	f022 0204 	bic.w	r2, r2, #4
 801b398:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 801b39a:	68fb      	ldr	r3, [r7, #12]
 801b39c:	681b      	ldr	r3, [r3, #0]
 801b39e:	69d9      	ldr	r1, [r3, #28]
 801b3a0:	68bb      	ldr	r3, [r7, #8]
 801b3a2:	691a      	ldr	r2, [r3, #16]
 801b3a4:	68fb      	ldr	r3, [r7, #12]
 801b3a6:	681b      	ldr	r3, [r3, #0]
 801b3a8:	430a      	orrs	r2, r1
 801b3aa:	61da      	str	r2, [r3, #28]
      break;
 801b3ac:	e064      	b.n	801b478 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 801b3ae:	68fb      	ldr	r3, [r7, #12]
 801b3b0:	681b      	ldr	r3, [r3, #0]
 801b3b2:	68b9      	ldr	r1, [r7, #8]
 801b3b4:	4618      	mov	r0, r3
 801b3b6:	f000 fbd1 	bl	801bb5c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 801b3ba:	68fb      	ldr	r3, [r7, #12]
 801b3bc:	681b      	ldr	r3, [r3, #0]
 801b3be:	69da      	ldr	r2, [r3, #28]
 801b3c0:	68fb      	ldr	r3, [r7, #12]
 801b3c2:	681b      	ldr	r3, [r3, #0]
 801b3c4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 801b3c8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 801b3ca:	68fb      	ldr	r3, [r7, #12]
 801b3cc:	681b      	ldr	r3, [r3, #0]
 801b3ce:	69da      	ldr	r2, [r3, #28]
 801b3d0:	68fb      	ldr	r3, [r7, #12]
 801b3d2:	681b      	ldr	r3, [r3, #0]
 801b3d4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801b3d8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 801b3da:	68fb      	ldr	r3, [r7, #12]
 801b3dc:	681b      	ldr	r3, [r3, #0]
 801b3de:	69d9      	ldr	r1, [r3, #28]
 801b3e0:	68bb      	ldr	r3, [r7, #8]
 801b3e2:	691b      	ldr	r3, [r3, #16]
 801b3e4:	021a      	lsls	r2, r3, #8
 801b3e6:	68fb      	ldr	r3, [r7, #12]
 801b3e8:	681b      	ldr	r3, [r3, #0]
 801b3ea:	430a      	orrs	r2, r1
 801b3ec:	61da      	str	r2, [r3, #28]
      break;
 801b3ee:	e043      	b.n	801b478 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 801b3f0:	68fb      	ldr	r3, [r7, #12]
 801b3f2:	681b      	ldr	r3, [r3, #0]
 801b3f4:	68b9      	ldr	r1, [r7, #8]
 801b3f6:	4618      	mov	r0, r3
 801b3f8:	f000 fc1a 	bl	801bc30 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 801b3fc:	68fb      	ldr	r3, [r7, #12]
 801b3fe:	681b      	ldr	r3, [r3, #0]
 801b400:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 801b402:	68fb      	ldr	r3, [r7, #12]
 801b404:	681b      	ldr	r3, [r3, #0]
 801b406:	f042 0208 	orr.w	r2, r2, #8
 801b40a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 801b40c:	68fb      	ldr	r3, [r7, #12]
 801b40e:	681b      	ldr	r3, [r3, #0]
 801b410:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 801b412:	68fb      	ldr	r3, [r7, #12]
 801b414:	681b      	ldr	r3, [r3, #0]
 801b416:	f022 0204 	bic.w	r2, r2, #4
 801b41a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 801b41c:	68fb      	ldr	r3, [r7, #12]
 801b41e:	681b      	ldr	r3, [r3, #0]
 801b420:	6d59      	ldr	r1, [r3, #84]	; 0x54
 801b422:	68bb      	ldr	r3, [r7, #8]
 801b424:	691a      	ldr	r2, [r3, #16]
 801b426:	68fb      	ldr	r3, [r7, #12]
 801b428:	681b      	ldr	r3, [r3, #0]
 801b42a:	430a      	orrs	r2, r1
 801b42c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 801b42e:	e023      	b.n	801b478 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 801b430:	68fb      	ldr	r3, [r7, #12]
 801b432:	681b      	ldr	r3, [r3, #0]
 801b434:	68b9      	ldr	r1, [r7, #8]
 801b436:	4618      	mov	r0, r3
 801b438:	f000 fc5e 	bl	801bcf8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 801b43c:	68fb      	ldr	r3, [r7, #12]
 801b43e:	681b      	ldr	r3, [r3, #0]
 801b440:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 801b442:	68fb      	ldr	r3, [r7, #12]
 801b444:	681b      	ldr	r3, [r3, #0]
 801b446:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 801b44a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 801b44c:	68fb      	ldr	r3, [r7, #12]
 801b44e:	681b      	ldr	r3, [r3, #0]
 801b450:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 801b452:	68fb      	ldr	r3, [r7, #12]
 801b454:	681b      	ldr	r3, [r3, #0]
 801b456:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801b45a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 801b45c:	68fb      	ldr	r3, [r7, #12]
 801b45e:	681b      	ldr	r3, [r3, #0]
 801b460:	6d59      	ldr	r1, [r3, #84]	; 0x54
 801b462:	68bb      	ldr	r3, [r7, #8]
 801b464:	691b      	ldr	r3, [r3, #16]
 801b466:	021a      	lsls	r2, r3, #8
 801b468:	68fb      	ldr	r3, [r7, #12]
 801b46a:	681b      	ldr	r3, [r3, #0]
 801b46c:	430a      	orrs	r2, r1
 801b46e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 801b470:	e002      	b.n	801b478 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 801b472:	2301      	movs	r3, #1
 801b474:	75fb      	strb	r3, [r7, #23]
      break;
 801b476:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 801b478:	68fb      	ldr	r3, [r7, #12]
 801b47a:	2200      	movs	r2, #0
 801b47c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 801b480:	7dfb      	ldrb	r3, [r7, #23]
}
 801b482:	4618      	mov	r0, r3
 801b484:	3718      	adds	r7, #24
 801b486:	46bd      	mov	sp, r7
 801b488:	bd80      	pop	{r7, pc}
 801b48a:	bf00      	nop

0801b48c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 801b48c:	b580      	push	{r7, lr}
 801b48e:	b084      	sub	sp, #16
 801b490:	af00      	add	r7, sp, #0
 801b492:	6078      	str	r0, [r7, #4]
 801b494:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 801b496:	2300      	movs	r3, #0
 801b498:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 801b49a:	687b      	ldr	r3, [r7, #4]
 801b49c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801b4a0:	2b01      	cmp	r3, #1
 801b4a2:	d101      	bne.n	801b4a8 <HAL_TIM_ConfigClockSource+0x1c>
 801b4a4:	2302      	movs	r3, #2
 801b4a6:	e0b6      	b.n	801b616 <HAL_TIM_ConfigClockSource+0x18a>
 801b4a8:	687b      	ldr	r3, [r7, #4]
 801b4aa:	2201      	movs	r2, #1
 801b4ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 801b4b0:	687b      	ldr	r3, [r7, #4]
 801b4b2:	2202      	movs	r2, #2
 801b4b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 801b4b8:	687b      	ldr	r3, [r7, #4]
 801b4ba:	681b      	ldr	r3, [r3, #0]
 801b4bc:	689b      	ldr	r3, [r3, #8]
 801b4be:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 801b4c0:	68bb      	ldr	r3, [r7, #8]
 801b4c2:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 801b4c6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 801b4ca:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 801b4cc:	68bb      	ldr	r3, [r7, #8]
 801b4ce:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 801b4d2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 801b4d4:	687b      	ldr	r3, [r7, #4]
 801b4d6:	681b      	ldr	r3, [r3, #0]
 801b4d8:	68ba      	ldr	r2, [r7, #8]
 801b4da:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 801b4dc:	683b      	ldr	r3, [r7, #0]
 801b4de:	681b      	ldr	r3, [r3, #0]
 801b4e0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801b4e4:	d03e      	beq.n	801b564 <HAL_TIM_ConfigClockSource+0xd8>
 801b4e6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801b4ea:	f200 8087 	bhi.w	801b5fc <HAL_TIM_ConfigClockSource+0x170>
 801b4ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801b4f2:	f000 8086 	beq.w	801b602 <HAL_TIM_ConfigClockSource+0x176>
 801b4f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801b4fa:	d87f      	bhi.n	801b5fc <HAL_TIM_ConfigClockSource+0x170>
 801b4fc:	2b70      	cmp	r3, #112	; 0x70
 801b4fe:	d01a      	beq.n	801b536 <HAL_TIM_ConfigClockSource+0xaa>
 801b500:	2b70      	cmp	r3, #112	; 0x70
 801b502:	d87b      	bhi.n	801b5fc <HAL_TIM_ConfigClockSource+0x170>
 801b504:	2b60      	cmp	r3, #96	; 0x60
 801b506:	d050      	beq.n	801b5aa <HAL_TIM_ConfigClockSource+0x11e>
 801b508:	2b60      	cmp	r3, #96	; 0x60
 801b50a:	d877      	bhi.n	801b5fc <HAL_TIM_ConfigClockSource+0x170>
 801b50c:	2b50      	cmp	r3, #80	; 0x50
 801b50e:	d03c      	beq.n	801b58a <HAL_TIM_ConfigClockSource+0xfe>
 801b510:	2b50      	cmp	r3, #80	; 0x50
 801b512:	d873      	bhi.n	801b5fc <HAL_TIM_ConfigClockSource+0x170>
 801b514:	2b40      	cmp	r3, #64	; 0x40
 801b516:	d058      	beq.n	801b5ca <HAL_TIM_ConfigClockSource+0x13e>
 801b518:	2b40      	cmp	r3, #64	; 0x40
 801b51a:	d86f      	bhi.n	801b5fc <HAL_TIM_ConfigClockSource+0x170>
 801b51c:	2b30      	cmp	r3, #48	; 0x30
 801b51e:	d064      	beq.n	801b5ea <HAL_TIM_ConfigClockSource+0x15e>
 801b520:	2b30      	cmp	r3, #48	; 0x30
 801b522:	d86b      	bhi.n	801b5fc <HAL_TIM_ConfigClockSource+0x170>
 801b524:	2b20      	cmp	r3, #32
 801b526:	d060      	beq.n	801b5ea <HAL_TIM_ConfigClockSource+0x15e>
 801b528:	2b20      	cmp	r3, #32
 801b52a:	d867      	bhi.n	801b5fc <HAL_TIM_ConfigClockSource+0x170>
 801b52c:	2b00      	cmp	r3, #0
 801b52e:	d05c      	beq.n	801b5ea <HAL_TIM_ConfigClockSource+0x15e>
 801b530:	2b10      	cmp	r3, #16
 801b532:	d05a      	beq.n	801b5ea <HAL_TIM_ConfigClockSource+0x15e>
 801b534:	e062      	b.n	801b5fc <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 801b536:	687b      	ldr	r3, [r7, #4]
 801b538:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 801b53a:	683b      	ldr	r3, [r7, #0]
 801b53c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 801b53e:	683b      	ldr	r3, [r7, #0]
 801b540:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 801b542:	683b      	ldr	r3, [r7, #0]
 801b544:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 801b546:	f000 fddd 	bl	801c104 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 801b54a:	687b      	ldr	r3, [r7, #4]
 801b54c:	681b      	ldr	r3, [r3, #0]
 801b54e:	689b      	ldr	r3, [r3, #8]
 801b550:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 801b552:	68bb      	ldr	r3, [r7, #8]
 801b554:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 801b558:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 801b55a:	687b      	ldr	r3, [r7, #4]
 801b55c:	681b      	ldr	r3, [r3, #0]
 801b55e:	68ba      	ldr	r2, [r7, #8]
 801b560:	609a      	str	r2, [r3, #8]
      break;
 801b562:	e04f      	b.n	801b604 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 801b564:	687b      	ldr	r3, [r7, #4]
 801b566:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 801b568:	683b      	ldr	r3, [r7, #0]
 801b56a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 801b56c:	683b      	ldr	r3, [r7, #0]
 801b56e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 801b570:	683b      	ldr	r3, [r7, #0]
 801b572:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 801b574:	f000 fdc6 	bl	801c104 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 801b578:	687b      	ldr	r3, [r7, #4]
 801b57a:	681b      	ldr	r3, [r3, #0]
 801b57c:	689a      	ldr	r2, [r3, #8]
 801b57e:	687b      	ldr	r3, [r7, #4]
 801b580:	681b      	ldr	r3, [r3, #0]
 801b582:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 801b586:	609a      	str	r2, [r3, #8]
      break;
 801b588:	e03c      	b.n	801b604 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 801b58a:	687b      	ldr	r3, [r7, #4]
 801b58c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 801b58e:	683b      	ldr	r3, [r7, #0]
 801b590:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 801b592:	683b      	ldr	r3, [r7, #0]
 801b594:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 801b596:	461a      	mov	r2, r3
 801b598:	f000 fc82 	bl	801bea0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 801b59c:	687b      	ldr	r3, [r7, #4]
 801b59e:	681b      	ldr	r3, [r3, #0]
 801b5a0:	2150      	movs	r1, #80	; 0x50
 801b5a2:	4618      	mov	r0, r3
 801b5a4:	f000 fd91 	bl	801c0ca <TIM_ITRx_SetConfig>
      break;
 801b5a8:	e02c      	b.n	801b604 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 801b5aa:	687b      	ldr	r3, [r7, #4]
 801b5ac:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 801b5ae:	683b      	ldr	r3, [r7, #0]
 801b5b0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 801b5b2:	683b      	ldr	r3, [r7, #0]
 801b5b4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 801b5b6:	461a      	mov	r2, r3
 801b5b8:	f000 fcde 	bl	801bf78 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 801b5bc:	687b      	ldr	r3, [r7, #4]
 801b5be:	681b      	ldr	r3, [r3, #0]
 801b5c0:	2160      	movs	r1, #96	; 0x60
 801b5c2:	4618      	mov	r0, r3
 801b5c4:	f000 fd81 	bl	801c0ca <TIM_ITRx_SetConfig>
      break;
 801b5c8:	e01c      	b.n	801b604 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 801b5ca:	687b      	ldr	r3, [r7, #4]
 801b5cc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 801b5ce:	683b      	ldr	r3, [r7, #0]
 801b5d0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 801b5d2:	683b      	ldr	r3, [r7, #0]
 801b5d4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 801b5d6:	461a      	mov	r2, r3
 801b5d8:	f000 fc62 	bl	801bea0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 801b5dc:	687b      	ldr	r3, [r7, #4]
 801b5de:	681b      	ldr	r3, [r3, #0]
 801b5e0:	2140      	movs	r1, #64	; 0x40
 801b5e2:	4618      	mov	r0, r3
 801b5e4:	f000 fd71 	bl	801c0ca <TIM_ITRx_SetConfig>
      break;
 801b5e8:	e00c      	b.n	801b604 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 801b5ea:	687b      	ldr	r3, [r7, #4]
 801b5ec:	681a      	ldr	r2, [r3, #0]
 801b5ee:	683b      	ldr	r3, [r7, #0]
 801b5f0:	681b      	ldr	r3, [r3, #0]
 801b5f2:	4619      	mov	r1, r3
 801b5f4:	4610      	mov	r0, r2
 801b5f6:	f000 fd68 	bl	801c0ca <TIM_ITRx_SetConfig>
      break;
 801b5fa:	e003      	b.n	801b604 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 801b5fc:	2301      	movs	r3, #1
 801b5fe:	73fb      	strb	r3, [r7, #15]
      break;
 801b600:	e000      	b.n	801b604 <HAL_TIM_ConfigClockSource+0x178>
      break;
 801b602:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 801b604:	687b      	ldr	r3, [r7, #4]
 801b606:	2201      	movs	r2, #1
 801b608:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 801b60c:	687b      	ldr	r3, [r7, #4]
 801b60e:	2200      	movs	r2, #0
 801b610:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 801b614:	7bfb      	ldrb	r3, [r7, #15]
}
 801b616:	4618      	mov	r0, r3
 801b618:	3710      	adds	r7, #16
 801b61a:	46bd      	mov	sp, r7
 801b61c:	bd80      	pop	{r7, pc}
	...

0801b620 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 801b620:	b480      	push	{r7}
 801b622:	b085      	sub	sp, #20
 801b624:	af00      	add	r7, sp, #0
 801b626:	6078      	str	r0, [r7, #4]
 801b628:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 801b62a:	2300      	movs	r3, #0
 801b62c:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 801b62e:	683b      	ldr	r3, [r7, #0]
 801b630:	2b0c      	cmp	r3, #12
 801b632:	d831      	bhi.n	801b698 <HAL_TIM_ReadCapturedValue+0x78>
 801b634:	a201      	add	r2, pc, #4	; (adr r2, 801b63c <HAL_TIM_ReadCapturedValue+0x1c>)
 801b636:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801b63a:	bf00      	nop
 801b63c:	0801b671 	.word	0x0801b671
 801b640:	0801b699 	.word	0x0801b699
 801b644:	0801b699 	.word	0x0801b699
 801b648:	0801b699 	.word	0x0801b699
 801b64c:	0801b67b 	.word	0x0801b67b
 801b650:	0801b699 	.word	0x0801b699
 801b654:	0801b699 	.word	0x0801b699
 801b658:	0801b699 	.word	0x0801b699
 801b65c:	0801b685 	.word	0x0801b685
 801b660:	0801b699 	.word	0x0801b699
 801b664:	0801b699 	.word	0x0801b699
 801b668:	0801b699 	.word	0x0801b699
 801b66c:	0801b68f 	.word	0x0801b68f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 801b670:	687b      	ldr	r3, [r7, #4]
 801b672:	681b      	ldr	r3, [r3, #0]
 801b674:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801b676:	60fb      	str	r3, [r7, #12]

      break;
 801b678:	e00f      	b.n	801b69a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 801b67a:	687b      	ldr	r3, [r7, #4]
 801b67c:	681b      	ldr	r3, [r3, #0]
 801b67e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801b680:	60fb      	str	r3, [r7, #12]

      break;
 801b682:	e00a      	b.n	801b69a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 801b684:	687b      	ldr	r3, [r7, #4]
 801b686:	681b      	ldr	r3, [r3, #0]
 801b688:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801b68a:	60fb      	str	r3, [r7, #12]

      break;
 801b68c:	e005      	b.n	801b69a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 801b68e:	687b      	ldr	r3, [r7, #4]
 801b690:	681b      	ldr	r3, [r3, #0]
 801b692:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801b694:	60fb      	str	r3, [r7, #12]

      break;
 801b696:	e000      	b.n	801b69a <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 801b698:	bf00      	nop
  }

  return tmpreg;
 801b69a:	68fb      	ldr	r3, [r7, #12]
}
 801b69c:	4618      	mov	r0, r3
 801b69e:	3714      	adds	r7, #20
 801b6a0:	46bd      	mov	sp, r7
 801b6a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b6a6:	4770      	bx	lr

0801b6a8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 801b6a8:	b480      	push	{r7}
 801b6aa:	b083      	sub	sp, #12
 801b6ac:	af00      	add	r7, sp, #0
 801b6ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 801b6b0:	bf00      	nop
 801b6b2:	370c      	adds	r7, #12
 801b6b4:	46bd      	mov	sp, r7
 801b6b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b6ba:	4770      	bx	lr

0801b6bc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 801b6bc:	b480      	push	{r7}
 801b6be:	b083      	sub	sp, #12
 801b6c0:	af00      	add	r7, sp, #0
 801b6c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 801b6c4:	bf00      	nop
 801b6c6:	370c      	adds	r7, #12
 801b6c8:	46bd      	mov	sp, r7
 801b6ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b6ce:	4770      	bx	lr

0801b6d0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 801b6d0:	b480      	push	{r7}
 801b6d2:	b083      	sub	sp, #12
 801b6d4:	af00      	add	r7, sp, #0
 801b6d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 801b6d8:	bf00      	nop
 801b6da:	370c      	adds	r7, #12
 801b6dc:	46bd      	mov	sp, r7
 801b6de:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b6e2:	4770      	bx	lr

0801b6e4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 801b6e4:	b480      	push	{r7}
 801b6e6:	b085      	sub	sp, #20
 801b6e8:	af00      	add	r7, sp, #0
 801b6ea:	6078      	str	r0, [r7, #4]
 801b6ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 801b6ee:	687b      	ldr	r3, [r7, #4]
 801b6f0:	681b      	ldr	r3, [r3, #0]
 801b6f2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 801b6f4:	687b      	ldr	r3, [r7, #4]
 801b6f6:	4a40      	ldr	r2, [pc, #256]	; (801b7f8 <TIM_Base_SetConfig+0x114>)
 801b6f8:	4293      	cmp	r3, r2
 801b6fa:	d013      	beq.n	801b724 <TIM_Base_SetConfig+0x40>
 801b6fc:	687b      	ldr	r3, [r7, #4]
 801b6fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801b702:	d00f      	beq.n	801b724 <TIM_Base_SetConfig+0x40>
 801b704:	687b      	ldr	r3, [r7, #4]
 801b706:	4a3d      	ldr	r2, [pc, #244]	; (801b7fc <TIM_Base_SetConfig+0x118>)
 801b708:	4293      	cmp	r3, r2
 801b70a:	d00b      	beq.n	801b724 <TIM_Base_SetConfig+0x40>
 801b70c:	687b      	ldr	r3, [r7, #4]
 801b70e:	4a3c      	ldr	r2, [pc, #240]	; (801b800 <TIM_Base_SetConfig+0x11c>)
 801b710:	4293      	cmp	r3, r2
 801b712:	d007      	beq.n	801b724 <TIM_Base_SetConfig+0x40>
 801b714:	687b      	ldr	r3, [r7, #4]
 801b716:	4a3b      	ldr	r2, [pc, #236]	; (801b804 <TIM_Base_SetConfig+0x120>)
 801b718:	4293      	cmp	r3, r2
 801b71a:	d003      	beq.n	801b724 <TIM_Base_SetConfig+0x40>
 801b71c:	687b      	ldr	r3, [r7, #4]
 801b71e:	4a3a      	ldr	r2, [pc, #232]	; (801b808 <TIM_Base_SetConfig+0x124>)
 801b720:	4293      	cmp	r3, r2
 801b722:	d108      	bne.n	801b736 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 801b724:	68fb      	ldr	r3, [r7, #12]
 801b726:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801b72a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 801b72c:	683b      	ldr	r3, [r7, #0]
 801b72e:	685b      	ldr	r3, [r3, #4]
 801b730:	68fa      	ldr	r2, [r7, #12]
 801b732:	4313      	orrs	r3, r2
 801b734:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 801b736:	687b      	ldr	r3, [r7, #4]
 801b738:	4a2f      	ldr	r2, [pc, #188]	; (801b7f8 <TIM_Base_SetConfig+0x114>)
 801b73a:	4293      	cmp	r3, r2
 801b73c:	d01f      	beq.n	801b77e <TIM_Base_SetConfig+0x9a>
 801b73e:	687b      	ldr	r3, [r7, #4]
 801b740:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801b744:	d01b      	beq.n	801b77e <TIM_Base_SetConfig+0x9a>
 801b746:	687b      	ldr	r3, [r7, #4]
 801b748:	4a2c      	ldr	r2, [pc, #176]	; (801b7fc <TIM_Base_SetConfig+0x118>)
 801b74a:	4293      	cmp	r3, r2
 801b74c:	d017      	beq.n	801b77e <TIM_Base_SetConfig+0x9a>
 801b74e:	687b      	ldr	r3, [r7, #4]
 801b750:	4a2b      	ldr	r2, [pc, #172]	; (801b800 <TIM_Base_SetConfig+0x11c>)
 801b752:	4293      	cmp	r3, r2
 801b754:	d013      	beq.n	801b77e <TIM_Base_SetConfig+0x9a>
 801b756:	687b      	ldr	r3, [r7, #4]
 801b758:	4a2a      	ldr	r2, [pc, #168]	; (801b804 <TIM_Base_SetConfig+0x120>)
 801b75a:	4293      	cmp	r3, r2
 801b75c:	d00f      	beq.n	801b77e <TIM_Base_SetConfig+0x9a>
 801b75e:	687b      	ldr	r3, [r7, #4]
 801b760:	4a29      	ldr	r2, [pc, #164]	; (801b808 <TIM_Base_SetConfig+0x124>)
 801b762:	4293      	cmp	r3, r2
 801b764:	d00b      	beq.n	801b77e <TIM_Base_SetConfig+0x9a>
 801b766:	687b      	ldr	r3, [r7, #4]
 801b768:	4a28      	ldr	r2, [pc, #160]	; (801b80c <TIM_Base_SetConfig+0x128>)
 801b76a:	4293      	cmp	r3, r2
 801b76c:	d007      	beq.n	801b77e <TIM_Base_SetConfig+0x9a>
 801b76e:	687b      	ldr	r3, [r7, #4]
 801b770:	4a27      	ldr	r2, [pc, #156]	; (801b810 <TIM_Base_SetConfig+0x12c>)
 801b772:	4293      	cmp	r3, r2
 801b774:	d003      	beq.n	801b77e <TIM_Base_SetConfig+0x9a>
 801b776:	687b      	ldr	r3, [r7, #4]
 801b778:	4a26      	ldr	r2, [pc, #152]	; (801b814 <TIM_Base_SetConfig+0x130>)
 801b77a:	4293      	cmp	r3, r2
 801b77c:	d108      	bne.n	801b790 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 801b77e:	68fb      	ldr	r3, [r7, #12]
 801b780:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801b784:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 801b786:	683b      	ldr	r3, [r7, #0]
 801b788:	68db      	ldr	r3, [r3, #12]
 801b78a:	68fa      	ldr	r2, [r7, #12]
 801b78c:	4313      	orrs	r3, r2
 801b78e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 801b790:	68fb      	ldr	r3, [r7, #12]
 801b792:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 801b796:	683b      	ldr	r3, [r7, #0]
 801b798:	695b      	ldr	r3, [r3, #20]
 801b79a:	4313      	orrs	r3, r2
 801b79c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 801b79e:	687b      	ldr	r3, [r7, #4]
 801b7a0:	68fa      	ldr	r2, [r7, #12]
 801b7a2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 801b7a4:	683b      	ldr	r3, [r7, #0]
 801b7a6:	689a      	ldr	r2, [r3, #8]
 801b7a8:	687b      	ldr	r3, [r7, #4]
 801b7aa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 801b7ac:	683b      	ldr	r3, [r7, #0]
 801b7ae:	681a      	ldr	r2, [r3, #0]
 801b7b0:	687b      	ldr	r3, [r7, #4]
 801b7b2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 801b7b4:	687b      	ldr	r3, [r7, #4]
 801b7b6:	4a10      	ldr	r2, [pc, #64]	; (801b7f8 <TIM_Base_SetConfig+0x114>)
 801b7b8:	4293      	cmp	r3, r2
 801b7ba:	d00f      	beq.n	801b7dc <TIM_Base_SetConfig+0xf8>
 801b7bc:	687b      	ldr	r3, [r7, #4]
 801b7be:	4a12      	ldr	r2, [pc, #72]	; (801b808 <TIM_Base_SetConfig+0x124>)
 801b7c0:	4293      	cmp	r3, r2
 801b7c2:	d00b      	beq.n	801b7dc <TIM_Base_SetConfig+0xf8>
 801b7c4:	687b      	ldr	r3, [r7, #4]
 801b7c6:	4a11      	ldr	r2, [pc, #68]	; (801b80c <TIM_Base_SetConfig+0x128>)
 801b7c8:	4293      	cmp	r3, r2
 801b7ca:	d007      	beq.n	801b7dc <TIM_Base_SetConfig+0xf8>
 801b7cc:	687b      	ldr	r3, [r7, #4]
 801b7ce:	4a10      	ldr	r2, [pc, #64]	; (801b810 <TIM_Base_SetConfig+0x12c>)
 801b7d0:	4293      	cmp	r3, r2
 801b7d2:	d003      	beq.n	801b7dc <TIM_Base_SetConfig+0xf8>
 801b7d4:	687b      	ldr	r3, [r7, #4]
 801b7d6:	4a0f      	ldr	r2, [pc, #60]	; (801b814 <TIM_Base_SetConfig+0x130>)
 801b7d8:	4293      	cmp	r3, r2
 801b7da:	d103      	bne.n	801b7e4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 801b7dc:	683b      	ldr	r3, [r7, #0]
 801b7de:	691a      	ldr	r2, [r3, #16]
 801b7e0:	687b      	ldr	r3, [r7, #4]
 801b7e2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 801b7e4:	687b      	ldr	r3, [r7, #4]
 801b7e6:	2201      	movs	r2, #1
 801b7e8:	615a      	str	r2, [r3, #20]
}
 801b7ea:	bf00      	nop
 801b7ec:	3714      	adds	r7, #20
 801b7ee:	46bd      	mov	sp, r7
 801b7f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b7f4:	4770      	bx	lr
 801b7f6:	bf00      	nop
 801b7f8:	40012c00 	.word	0x40012c00
 801b7fc:	40000400 	.word	0x40000400
 801b800:	40000800 	.word	0x40000800
 801b804:	40000c00 	.word	0x40000c00
 801b808:	40013400 	.word	0x40013400
 801b80c:	40014000 	.word	0x40014000
 801b810:	40014400 	.word	0x40014400
 801b814:	40014800 	.word	0x40014800

0801b818 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 801b818:	b480      	push	{r7}
 801b81a:	b087      	sub	sp, #28
 801b81c:	af00      	add	r7, sp, #0
 801b81e:	6078      	str	r0, [r7, #4]
 801b820:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 801b822:	687b      	ldr	r3, [r7, #4]
 801b824:	6a1b      	ldr	r3, [r3, #32]
 801b826:	f023 0201 	bic.w	r2, r3, #1
 801b82a:	687b      	ldr	r3, [r7, #4]
 801b82c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801b82e:	687b      	ldr	r3, [r7, #4]
 801b830:	6a1b      	ldr	r3, [r3, #32]
 801b832:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801b834:	687b      	ldr	r3, [r7, #4]
 801b836:	685b      	ldr	r3, [r3, #4]
 801b838:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 801b83a:	687b      	ldr	r3, [r7, #4]
 801b83c:	699b      	ldr	r3, [r3, #24]
 801b83e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 801b840:	68fb      	ldr	r3, [r7, #12]
 801b842:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 801b846:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801b84a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 801b84c:	68fb      	ldr	r3, [r7, #12]
 801b84e:	f023 0303 	bic.w	r3, r3, #3
 801b852:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 801b854:	683b      	ldr	r3, [r7, #0]
 801b856:	681b      	ldr	r3, [r3, #0]
 801b858:	68fa      	ldr	r2, [r7, #12]
 801b85a:	4313      	orrs	r3, r2
 801b85c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 801b85e:	697b      	ldr	r3, [r7, #20]
 801b860:	f023 0302 	bic.w	r3, r3, #2
 801b864:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 801b866:	683b      	ldr	r3, [r7, #0]
 801b868:	689b      	ldr	r3, [r3, #8]
 801b86a:	697a      	ldr	r2, [r7, #20]
 801b86c:	4313      	orrs	r3, r2
 801b86e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 801b870:	687b      	ldr	r3, [r7, #4]
 801b872:	4a2c      	ldr	r2, [pc, #176]	; (801b924 <TIM_OC1_SetConfig+0x10c>)
 801b874:	4293      	cmp	r3, r2
 801b876:	d00f      	beq.n	801b898 <TIM_OC1_SetConfig+0x80>
 801b878:	687b      	ldr	r3, [r7, #4]
 801b87a:	4a2b      	ldr	r2, [pc, #172]	; (801b928 <TIM_OC1_SetConfig+0x110>)
 801b87c:	4293      	cmp	r3, r2
 801b87e:	d00b      	beq.n	801b898 <TIM_OC1_SetConfig+0x80>
 801b880:	687b      	ldr	r3, [r7, #4]
 801b882:	4a2a      	ldr	r2, [pc, #168]	; (801b92c <TIM_OC1_SetConfig+0x114>)
 801b884:	4293      	cmp	r3, r2
 801b886:	d007      	beq.n	801b898 <TIM_OC1_SetConfig+0x80>
 801b888:	687b      	ldr	r3, [r7, #4]
 801b88a:	4a29      	ldr	r2, [pc, #164]	; (801b930 <TIM_OC1_SetConfig+0x118>)
 801b88c:	4293      	cmp	r3, r2
 801b88e:	d003      	beq.n	801b898 <TIM_OC1_SetConfig+0x80>
 801b890:	687b      	ldr	r3, [r7, #4]
 801b892:	4a28      	ldr	r2, [pc, #160]	; (801b934 <TIM_OC1_SetConfig+0x11c>)
 801b894:	4293      	cmp	r3, r2
 801b896:	d10c      	bne.n	801b8b2 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 801b898:	697b      	ldr	r3, [r7, #20]
 801b89a:	f023 0308 	bic.w	r3, r3, #8
 801b89e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 801b8a0:	683b      	ldr	r3, [r7, #0]
 801b8a2:	68db      	ldr	r3, [r3, #12]
 801b8a4:	697a      	ldr	r2, [r7, #20]
 801b8a6:	4313      	orrs	r3, r2
 801b8a8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 801b8aa:	697b      	ldr	r3, [r7, #20]
 801b8ac:	f023 0304 	bic.w	r3, r3, #4
 801b8b0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801b8b2:	687b      	ldr	r3, [r7, #4]
 801b8b4:	4a1b      	ldr	r2, [pc, #108]	; (801b924 <TIM_OC1_SetConfig+0x10c>)
 801b8b6:	4293      	cmp	r3, r2
 801b8b8:	d00f      	beq.n	801b8da <TIM_OC1_SetConfig+0xc2>
 801b8ba:	687b      	ldr	r3, [r7, #4]
 801b8bc:	4a1a      	ldr	r2, [pc, #104]	; (801b928 <TIM_OC1_SetConfig+0x110>)
 801b8be:	4293      	cmp	r3, r2
 801b8c0:	d00b      	beq.n	801b8da <TIM_OC1_SetConfig+0xc2>
 801b8c2:	687b      	ldr	r3, [r7, #4]
 801b8c4:	4a19      	ldr	r2, [pc, #100]	; (801b92c <TIM_OC1_SetConfig+0x114>)
 801b8c6:	4293      	cmp	r3, r2
 801b8c8:	d007      	beq.n	801b8da <TIM_OC1_SetConfig+0xc2>
 801b8ca:	687b      	ldr	r3, [r7, #4]
 801b8cc:	4a18      	ldr	r2, [pc, #96]	; (801b930 <TIM_OC1_SetConfig+0x118>)
 801b8ce:	4293      	cmp	r3, r2
 801b8d0:	d003      	beq.n	801b8da <TIM_OC1_SetConfig+0xc2>
 801b8d2:	687b      	ldr	r3, [r7, #4]
 801b8d4:	4a17      	ldr	r2, [pc, #92]	; (801b934 <TIM_OC1_SetConfig+0x11c>)
 801b8d6:	4293      	cmp	r3, r2
 801b8d8:	d111      	bne.n	801b8fe <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 801b8da:	693b      	ldr	r3, [r7, #16]
 801b8dc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801b8e0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 801b8e2:	693b      	ldr	r3, [r7, #16]
 801b8e4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 801b8e8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 801b8ea:	683b      	ldr	r3, [r7, #0]
 801b8ec:	695b      	ldr	r3, [r3, #20]
 801b8ee:	693a      	ldr	r2, [r7, #16]
 801b8f0:	4313      	orrs	r3, r2
 801b8f2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 801b8f4:	683b      	ldr	r3, [r7, #0]
 801b8f6:	699b      	ldr	r3, [r3, #24]
 801b8f8:	693a      	ldr	r2, [r7, #16]
 801b8fa:	4313      	orrs	r3, r2
 801b8fc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801b8fe:	687b      	ldr	r3, [r7, #4]
 801b900:	693a      	ldr	r2, [r7, #16]
 801b902:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 801b904:	687b      	ldr	r3, [r7, #4]
 801b906:	68fa      	ldr	r2, [r7, #12]
 801b908:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 801b90a:	683b      	ldr	r3, [r7, #0]
 801b90c:	685a      	ldr	r2, [r3, #4]
 801b90e:	687b      	ldr	r3, [r7, #4]
 801b910:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801b912:	687b      	ldr	r3, [r7, #4]
 801b914:	697a      	ldr	r2, [r7, #20]
 801b916:	621a      	str	r2, [r3, #32]
}
 801b918:	bf00      	nop
 801b91a:	371c      	adds	r7, #28
 801b91c:	46bd      	mov	sp, r7
 801b91e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b922:	4770      	bx	lr
 801b924:	40012c00 	.word	0x40012c00
 801b928:	40013400 	.word	0x40013400
 801b92c:	40014000 	.word	0x40014000
 801b930:	40014400 	.word	0x40014400
 801b934:	40014800 	.word	0x40014800

0801b938 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 801b938:	b480      	push	{r7}
 801b93a:	b087      	sub	sp, #28
 801b93c:	af00      	add	r7, sp, #0
 801b93e:	6078      	str	r0, [r7, #4]
 801b940:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 801b942:	687b      	ldr	r3, [r7, #4]
 801b944:	6a1b      	ldr	r3, [r3, #32]
 801b946:	f023 0210 	bic.w	r2, r3, #16
 801b94a:	687b      	ldr	r3, [r7, #4]
 801b94c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801b94e:	687b      	ldr	r3, [r7, #4]
 801b950:	6a1b      	ldr	r3, [r3, #32]
 801b952:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801b954:	687b      	ldr	r3, [r7, #4]
 801b956:	685b      	ldr	r3, [r3, #4]
 801b958:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 801b95a:	687b      	ldr	r3, [r7, #4]
 801b95c:	699b      	ldr	r3, [r3, #24]
 801b95e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 801b960:	68fb      	ldr	r3, [r7, #12]
 801b962:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 801b966:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 801b96a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 801b96c:	68fb      	ldr	r3, [r7, #12]
 801b96e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801b972:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 801b974:	683b      	ldr	r3, [r7, #0]
 801b976:	681b      	ldr	r3, [r3, #0]
 801b978:	021b      	lsls	r3, r3, #8
 801b97a:	68fa      	ldr	r2, [r7, #12]
 801b97c:	4313      	orrs	r3, r2
 801b97e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 801b980:	697b      	ldr	r3, [r7, #20]
 801b982:	f023 0320 	bic.w	r3, r3, #32
 801b986:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 801b988:	683b      	ldr	r3, [r7, #0]
 801b98a:	689b      	ldr	r3, [r3, #8]
 801b98c:	011b      	lsls	r3, r3, #4
 801b98e:	697a      	ldr	r2, [r7, #20]
 801b990:	4313      	orrs	r3, r2
 801b992:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 801b994:	687b      	ldr	r3, [r7, #4]
 801b996:	4a28      	ldr	r2, [pc, #160]	; (801ba38 <TIM_OC2_SetConfig+0x100>)
 801b998:	4293      	cmp	r3, r2
 801b99a:	d003      	beq.n	801b9a4 <TIM_OC2_SetConfig+0x6c>
 801b99c:	687b      	ldr	r3, [r7, #4]
 801b99e:	4a27      	ldr	r2, [pc, #156]	; (801ba3c <TIM_OC2_SetConfig+0x104>)
 801b9a0:	4293      	cmp	r3, r2
 801b9a2:	d10d      	bne.n	801b9c0 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 801b9a4:	697b      	ldr	r3, [r7, #20]
 801b9a6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801b9aa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 801b9ac:	683b      	ldr	r3, [r7, #0]
 801b9ae:	68db      	ldr	r3, [r3, #12]
 801b9b0:	011b      	lsls	r3, r3, #4
 801b9b2:	697a      	ldr	r2, [r7, #20]
 801b9b4:	4313      	orrs	r3, r2
 801b9b6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 801b9b8:	697b      	ldr	r3, [r7, #20]
 801b9ba:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801b9be:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801b9c0:	687b      	ldr	r3, [r7, #4]
 801b9c2:	4a1d      	ldr	r2, [pc, #116]	; (801ba38 <TIM_OC2_SetConfig+0x100>)
 801b9c4:	4293      	cmp	r3, r2
 801b9c6:	d00f      	beq.n	801b9e8 <TIM_OC2_SetConfig+0xb0>
 801b9c8:	687b      	ldr	r3, [r7, #4]
 801b9ca:	4a1c      	ldr	r2, [pc, #112]	; (801ba3c <TIM_OC2_SetConfig+0x104>)
 801b9cc:	4293      	cmp	r3, r2
 801b9ce:	d00b      	beq.n	801b9e8 <TIM_OC2_SetConfig+0xb0>
 801b9d0:	687b      	ldr	r3, [r7, #4]
 801b9d2:	4a1b      	ldr	r2, [pc, #108]	; (801ba40 <TIM_OC2_SetConfig+0x108>)
 801b9d4:	4293      	cmp	r3, r2
 801b9d6:	d007      	beq.n	801b9e8 <TIM_OC2_SetConfig+0xb0>
 801b9d8:	687b      	ldr	r3, [r7, #4]
 801b9da:	4a1a      	ldr	r2, [pc, #104]	; (801ba44 <TIM_OC2_SetConfig+0x10c>)
 801b9dc:	4293      	cmp	r3, r2
 801b9de:	d003      	beq.n	801b9e8 <TIM_OC2_SetConfig+0xb0>
 801b9e0:	687b      	ldr	r3, [r7, #4]
 801b9e2:	4a19      	ldr	r2, [pc, #100]	; (801ba48 <TIM_OC2_SetConfig+0x110>)
 801b9e4:	4293      	cmp	r3, r2
 801b9e6:	d113      	bne.n	801ba10 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 801b9e8:	693b      	ldr	r3, [r7, #16]
 801b9ea:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 801b9ee:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 801b9f0:	693b      	ldr	r3, [r7, #16]
 801b9f2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 801b9f6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 801b9f8:	683b      	ldr	r3, [r7, #0]
 801b9fa:	695b      	ldr	r3, [r3, #20]
 801b9fc:	009b      	lsls	r3, r3, #2
 801b9fe:	693a      	ldr	r2, [r7, #16]
 801ba00:	4313      	orrs	r3, r2
 801ba02:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 801ba04:	683b      	ldr	r3, [r7, #0]
 801ba06:	699b      	ldr	r3, [r3, #24]
 801ba08:	009b      	lsls	r3, r3, #2
 801ba0a:	693a      	ldr	r2, [r7, #16]
 801ba0c:	4313      	orrs	r3, r2
 801ba0e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801ba10:	687b      	ldr	r3, [r7, #4]
 801ba12:	693a      	ldr	r2, [r7, #16]
 801ba14:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 801ba16:	687b      	ldr	r3, [r7, #4]
 801ba18:	68fa      	ldr	r2, [r7, #12]
 801ba1a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 801ba1c:	683b      	ldr	r3, [r7, #0]
 801ba1e:	685a      	ldr	r2, [r3, #4]
 801ba20:	687b      	ldr	r3, [r7, #4]
 801ba22:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801ba24:	687b      	ldr	r3, [r7, #4]
 801ba26:	697a      	ldr	r2, [r7, #20]
 801ba28:	621a      	str	r2, [r3, #32]
}
 801ba2a:	bf00      	nop
 801ba2c:	371c      	adds	r7, #28
 801ba2e:	46bd      	mov	sp, r7
 801ba30:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ba34:	4770      	bx	lr
 801ba36:	bf00      	nop
 801ba38:	40012c00 	.word	0x40012c00
 801ba3c:	40013400 	.word	0x40013400
 801ba40:	40014000 	.word	0x40014000
 801ba44:	40014400 	.word	0x40014400
 801ba48:	40014800 	.word	0x40014800

0801ba4c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 801ba4c:	b480      	push	{r7}
 801ba4e:	b087      	sub	sp, #28
 801ba50:	af00      	add	r7, sp, #0
 801ba52:	6078      	str	r0, [r7, #4]
 801ba54:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 801ba56:	687b      	ldr	r3, [r7, #4]
 801ba58:	6a1b      	ldr	r3, [r3, #32]
 801ba5a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 801ba5e:	687b      	ldr	r3, [r7, #4]
 801ba60:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801ba62:	687b      	ldr	r3, [r7, #4]
 801ba64:	6a1b      	ldr	r3, [r3, #32]
 801ba66:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801ba68:	687b      	ldr	r3, [r7, #4]
 801ba6a:	685b      	ldr	r3, [r3, #4]
 801ba6c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 801ba6e:	687b      	ldr	r3, [r7, #4]
 801ba70:	69db      	ldr	r3, [r3, #28]
 801ba72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 801ba74:	68fb      	ldr	r3, [r7, #12]
 801ba76:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 801ba7a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801ba7e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 801ba80:	68fb      	ldr	r3, [r7, #12]
 801ba82:	f023 0303 	bic.w	r3, r3, #3
 801ba86:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 801ba88:	683b      	ldr	r3, [r7, #0]
 801ba8a:	681b      	ldr	r3, [r3, #0]
 801ba8c:	68fa      	ldr	r2, [r7, #12]
 801ba8e:	4313      	orrs	r3, r2
 801ba90:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 801ba92:	697b      	ldr	r3, [r7, #20]
 801ba94:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 801ba98:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 801ba9a:	683b      	ldr	r3, [r7, #0]
 801ba9c:	689b      	ldr	r3, [r3, #8]
 801ba9e:	021b      	lsls	r3, r3, #8
 801baa0:	697a      	ldr	r2, [r7, #20]
 801baa2:	4313      	orrs	r3, r2
 801baa4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 801baa6:	687b      	ldr	r3, [r7, #4]
 801baa8:	4a27      	ldr	r2, [pc, #156]	; (801bb48 <TIM_OC3_SetConfig+0xfc>)
 801baaa:	4293      	cmp	r3, r2
 801baac:	d003      	beq.n	801bab6 <TIM_OC3_SetConfig+0x6a>
 801baae:	687b      	ldr	r3, [r7, #4]
 801bab0:	4a26      	ldr	r2, [pc, #152]	; (801bb4c <TIM_OC3_SetConfig+0x100>)
 801bab2:	4293      	cmp	r3, r2
 801bab4:	d10d      	bne.n	801bad2 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 801bab6:	697b      	ldr	r3, [r7, #20]
 801bab8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 801babc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 801babe:	683b      	ldr	r3, [r7, #0]
 801bac0:	68db      	ldr	r3, [r3, #12]
 801bac2:	021b      	lsls	r3, r3, #8
 801bac4:	697a      	ldr	r2, [r7, #20]
 801bac6:	4313      	orrs	r3, r2
 801bac8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 801baca:	697b      	ldr	r3, [r7, #20]
 801bacc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 801bad0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801bad2:	687b      	ldr	r3, [r7, #4]
 801bad4:	4a1c      	ldr	r2, [pc, #112]	; (801bb48 <TIM_OC3_SetConfig+0xfc>)
 801bad6:	4293      	cmp	r3, r2
 801bad8:	d00f      	beq.n	801bafa <TIM_OC3_SetConfig+0xae>
 801bada:	687b      	ldr	r3, [r7, #4]
 801badc:	4a1b      	ldr	r2, [pc, #108]	; (801bb4c <TIM_OC3_SetConfig+0x100>)
 801bade:	4293      	cmp	r3, r2
 801bae0:	d00b      	beq.n	801bafa <TIM_OC3_SetConfig+0xae>
 801bae2:	687b      	ldr	r3, [r7, #4]
 801bae4:	4a1a      	ldr	r2, [pc, #104]	; (801bb50 <TIM_OC3_SetConfig+0x104>)
 801bae6:	4293      	cmp	r3, r2
 801bae8:	d007      	beq.n	801bafa <TIM_OC3_SetConfig+0xae>
 801baea:	687b      	ldr	r3, [r7, #4]
 801baec:	4a19      	ldr	r2, [pc, #100]	; (801bb54 <TIM_OC3_SetConfig+0x108>)
 801baee:	4293      	cmp	r3, r2
 801baf0:	d003      	beq.n	801bafa <TIM_OC3_SetConfig+0xae>
 801baf2:	687b      	ldr	r3, [r7, #4]
 801baf4:	4a18      	ldr	r2, [pc, #96]	; (801bb58 <TIM_OC3_SetConfig+0x10c>)
 801baf6:	4293      	cmp	r3, r2
 801baf8:	d113      	bne.n	801bb22 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 801bafa:	693b      	ldr	r3, [r7, #16]
 801bafc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801bb00:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 801bb02:	693b      	ldr	r3, [r7, #16]
 801bb04:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 801bb08:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 801bb0a:	683b      	ldr	r3, [r7, #0]
 801bb0c:	695b      	ldr	r3, [r3, #20]
 801bb0e:	011b      	lsls	r3, r3, #4
 801bb10:	693a      	ldr	r2, [r7, #16]
 801bb12:	4313      	orrs	r3, r2
 801bb14:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 801bb16:	683b      	ldr	r3, [r7, #0]
 801bb18:	699b      	ldr	r3, [r3, #24]
 801bb1a:	011b      	lsls	r3, r3, #4
 801bb1c:	693a      	ldr	r2, [r7, #16]
 801bb1e:	4313      	orrs	r3, r2
 801bb20:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801bb22:	687b      	ldr	r3, [r7, #4]
 801bb24:	693a      	ldr	r2, [r7, #16]
 801bb26:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 801bb28:	687b      	ldr	r3, [r7, #4]
 801bb2a:	68fa      	ldr	r2, [r7, #12]
 801bb2c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 801bb2e:	683b      	ldr	r3, [r7, #0]
 801bb30:	685a      	ldr	r2, [r3, #4]
 801bb32:	687b      	ldr	r3, [r7, #4]
 801bb34:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801bb36:	687b      	ldr	r3, [r7, #4]
 801bb38:	697a      	ldr	r2, [r7, #20]
 801bb3a:	621a      	str	r2, [r3, #32]
}
 801bb3c:	bf00      	nop
 801bb3e:	371c      	adds	r7, #28
 801bb40:	46bd      	mov	sp, r7
 801bb42:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bb46:	4770      	bx	lr
 801bb48:	40012c00 	.word	0x40012c00
 801bb4c:	40013400 	.word	0x40013400
 801bb50:	40014000 	.word	0x40014000
 801bb54:	40014400 	.word	0x40014400
 801bb58:	40014800 	.word	0x40014800

0801bb5c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 801bb5c:	b480      	push	{r7}
 801bb5e:	b087      	sub	sp, #28
 801bb60:	af00      	add	r7, sp, #0
 801bb62:	6078      	str	r0, [r7, #4]
 801bb64:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 801bb66:	687b      	ldr	r3, [r7, #4]
 801bb68:	6a1b      	ldr	r3, [r3, #32]
 801bb6a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 801bb6e:	687b      	ldr	r3, [r7, #4]
 801bb70:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801bb72:	687b      	ldr	r3, [r7, #4]
 801bb74:	6a1b      	ldr	r3, [r3, #32]
 801bb76:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801bb78:	687b      	ldr	r3, [r7, #4]
 801bb7a:	685b      	ldr	r3, [r3, #4]
 801bb7c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 801bb7e:	687b      	ldr	r3, [r7, #4]
 801bb80:	69db      	ldr	r3, [r3, #28]
 801bb82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 801bb84:	68fb      	ldr	r3, [r7, #12]
 801bb86:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 801bb8a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 801bb8e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 801bb90:	68fb      	ldr	r3, [r7, #12]
 801bb92:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801bb96:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 801bb98:	683b      	ldr	r3, [r7, #0]
 801bb9a:	681b      	ldr	r3, [r3, #0]
 801bb9c:	021b      	lsls	r3, r3, #8
 801bb9e:	68fa      	ldr	r2, [r7, #12]
 801bba0:	4313      	orrs	r3, r2
 801bba2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 801bba4:	693b      	ldr	r3, [r7, #16]
 801bba6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 801bbaa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 801bbac:	683b      	ldr	r3, [r7, #0]
 801bbae:	689b      	ldr	r3, [r3, #8]
 801bbb0:	031b      	lsls	r3, r3, #12
 801bbb2:	693a      	ldr	r2, [r7, #16]
 801bbb4:	4313      	orrs	r3, r2
 801bbb6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801bbb8:	687b      	ldr	r3, [r7, #4]
 801bbba:	4a18      	ldr	r2, [pc, #96]	; (801bc1c <TIM_OC4_SetConfig+0xc0>)
 801bbbc:	4293      	cmp	r3, r2
 801bbbe:	d00f      	beq.n	801bbe0 <TIM_OC4_SetConfig+0x84>
 801bbc0:	687b      	ldr	r3, [r7, #4]
 801bbc2:	4a17      	ldr	r2, [pc, #92]	; (801bc20 <TIM_OC4_SetConfig+0xc4>)
 801bbc4:	4293      	cmp	r3, r2
 801bbc6:	d00b      	beq.n	801bbe0 <TIM_OC4_SetConfig+0x84>
 801bbc8:	687b      	ldr	r3, [r7, #4]
 801bbca:	4a16      	ldr	r2, [pc, #88]	; (801bc24 <TIM_OC4_SetConfig+0xc8>)
 801bbcc:	4293      	cmp	r3, r2
 801bbce:	d007      	beq.n	801bbe0 <TIM_OC4_SetConfig+0x84>
 801bbd0:	687b      	ldr	r3, [r7, #4]
 801bbd2:	4a15      	ldr	r2, [pc, #84]	; (801bc28 <TIM_OC4_SetConfig+0xcc>)
 801bbd4:	4293      	cmp	r3, r2
 801bbd6:	d003      	beq.n	801bbe0 <TIM_OC4_SetConfig+0x84>
 801bbd8:	687b      	ldr	r3, [r7, #4]
 801bbda:	4a14      	ldr	r2, [pc, #80]	; (801bc2c <TIM_OC4_SetConfig+0xd0>)
 801bbdc:	4293      	cmp	r3, r2
 801bbde:	d109      	bne.n	801bbf4 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 801bbe0:	697b      	ldr	r3, [r7, #20]
 801bbe2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 801bbe6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 801bbe8:	683b      	ldr	r3, [r7, #0]
 801bbea:	695b      	ldr	r3, [r3, #20]
 801bbec:	019b      	lsls	r3, r3, #6
 801bbee:	697a      	ldr	r2, [r7, #20]
 801bbf0:	4313      	orrs	r3, r2
 801bbf2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801bbf4:	687b      	ldr	r3, [r7, #4]
 801bbf6:	697a      	ldr	r2, [r7, #20]
 801bbf8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 801bbfa:	687b      	ldr	r3, [r7, #4]
 801bbfc:	68fa      	ldr	r2, [r7, #12]
 801bbfe:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 801bc00:	683b      	ldr	r3, [r7, #0]
 801bc02:	685a      	ldr	r2, [r3, #4]
 801bc04:	687b      	ldr	r3, [r7, #4]
 801bc06:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801bc08:	687b      	ldr	r3, [r7, #4]
 801bc0a:	693a      	ldr	r2, [r7, #16]
 801bc0c:	621a      	str	r2, [r3, #32]
}
 801bc0e:	bf00      	nop
 801bc10:	371c      	adds	r7, #28
 801bc12:	46bd      	mov	sp, r7
 801bc14:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bc18:	4770      	bx	lr
 801bc1a:	bf00      	nop
 801bc1c:	40012c00 	.word	0x40012c00
 801bc20:	40013400 	.word	0x40013400
 801bc24:	40014000 	.word	0x40014000
 801bc28:	40014400 	.word	0x40014400
 801bc2c:	40014800 	.word	0x40014800

0801bc30 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 801bc30:	b480      	push	{r7}
 801bc32:	b087      	sub	sp, #28
 801bc34:	af00      	add	r7, sp, #0
 801bc36:	6078      	str	r0, [r7, #4]
 801bc38:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 801bc3a:	687b      	ldr	r3, [r7, #4]
 801bc3c:	6a1b      	ldr	r3, [r3, #32]
 801bc3e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 801bc42:	687b      	ldr	r3, [r7, #4]
 801bc44:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801bc46:	687b      	ldr	r3, [r7, #4]
 801bc48:	6a1b      	ldr	r3, [r3, #32]
 801bc4a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801bc4c:	687b      	ldr	r3, [r7, #4]
 801bc4e:	685b      	ldr	r3, [r3, #4]
 801bc50:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 801bc52:	687b      	ldr	r3, [r7, #4]
 801bc54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801bc56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 801bc58:	68fb      	ldr	r3, [r7, #12]
 801bc5a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 801bc5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801bc62:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 801bc64:	683b      	ldr	r3, [r7, #0]
 801bc66:	681b      	ldr	r3, [r3, #0]
 801bc68:	68fa      	ldr	r2, [r7, #12]
 801bc6a:	4313      	orrs	r3, r2
 801bc6c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 801bc6e:	693b      	ldr	r3, [r7, #16]
 801bc70:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 801bc74:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 801bc76:	683b      	ldr	r3, [r7, #0]
 801bc78:	689b      	ldr	r3, [r3, #8]
 801bc7a:	041b      	lsls	r3, r3, #16
 801bc7c:	693a      	ldr	r2, [r7, #16]
 801bc7e:	4313      	orrs	r3, r2
 801bc80:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801bc82:	687b      	ldr	r3, [r7, #4]
 801bc84:	4a17      	ldr	r2, [pc, #92]	; (801bce4 <TIM_OC5_SetConfig+0xb4>)
 801bc86:	4293      	cmp	r3, r2
 801bc88:	d00f      	beq.n	801bcaa <TIM_OC5_SetConfig+0x7a>
 801bc8a:	687b      	ldr	r3, [r7, #4]
 801bc8c:	4a16      	ldr	r2, [pc, #88]	; (801bce8 <TIM_OC5_SetConfig+0xb8>)
 801bc8e:	4293      	cmp	r3, r2
 801bc90:	d00b      	beq.n	801bcaa <TIM_OC5_SetConfig+0x7a>
 801bc92:	687b      	ldr	r3, [r7, #4]
 801bc94:	4a15      	ldr	r2, [pc, #84]	; (801bcec <TIM_OC5_SetConfig+0xbc>)
 801bc96:	4293      	cmp	r3, r2
 801bc98:	d007      	beq.n	801bcaa <TIM_OC5_SetConfig+0x7a>
 801bc9a:	687b      	ldr	r3, [r7, #4]
 801bc9c:	4a14      	ldr	r2, [pc, #80]	; (801bcf0 <TIM_OC5_SetConfig+0xc0>)
 801bc9e:	4293      	cmp	r3, r2
 801bca0:	d003      	beq.n	801bcaa <TIM_OC5_SetConfig+0x7a>
 801bca2:	687b      	ldr	r3, [r7, #4]
 801bca4:	4a13      	ldr	r2, [pc, #76]	; (801bcf4 <TIM_OC5_SetConfig+0xc4>)
 801bca6:	4293      	cmp	r3, r2
 801bca8:	d109      	bne.n	801bcbe <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 801bcaa:	697b      	ldr	r3, [r7, #20]
 801bcac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 801bcb0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 801bcb2:	683b      	ldr	r3, [r7, #0]
 801bcb4:	695b      	ldr	r3, [r3, #20]
 801bcb6:	021b      	lsls	r3, r3, #8
 801bcb8:	697a      	ldr	r2, [r7, #20]
 801bcba:	4313      	orrs	r3, r2
 801bcbc:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801bcbe:	687b      	ldr	r3, [r7, #4]
 801bcc0:	697a      	ldr	r2, [r7, #20]
 801bcc2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 801bcc4:	687b      	ldr	r3, [r7, #4]
 801bcc6:	68fa      	ldr	r2, [r7, #12]
 801bcc8:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 801bcca:	683b      	ldr	r3, [r7, #0]
 801bccc:	685a      	ldr	r2, [r3, #4]
 801bcce:	687b      	ldr	r3, [r7, #4]
 801bcd0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801bcd2:	687b      	ldr	r3, [r7, #4]
 801bcd4:	693a      	ldr	r2, [r7, #16]
 801bcd6:	621a      	str	r2, [r3, #32]
}
 801bcd8:	bf00      	nop
 801bcda:	371c      	adds	r7, #28
 801bcdc:	46bd      	mov	sp, r7
 801bcde:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bce2:	4770      	bx	lr
 801bce4:	40012c00 	.word	0x40012c00
 801bce8:	40013400 	.word	0x40013400
 801bcec:	40014000 	.word	0x40014000
 801bcf0:	40014400 	.word	0x40014400
 801bcf4:	40014800 	.word	0x40014800

0801bcf8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 801bcf8:	b480      	push	{r7}
 801bcfa:	b087      	sub	sp, #28
 801bcfc:	af00      	add	r7, sp, #0
 801bcfe:	6078      	str	r0, [r7, #4]
 801bd00:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 801bd02:	687b      	ldr	r3, [r7, #4]
 801bd04:	6a1b      	ldr	r3, [r3, #32]
 801bd06:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 801bd0a:	687b      	ldr	r3, [r7, #4]
 801bd0c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801bd0e:	687b      	ldr	r3, [r7, #4]
 801bd10:	6a1b      	ldr	r3, [r3, #32]
 801bd12:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801bd14:	687b      	ldr	r3, [r7, #4]
 801bd16:	685b      	ldr	r3, [r3, #4]
 801bd18:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 801bd1a:	687b      	ldr	r3, [r7, #4]
 801bd1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801bd1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 801bd20:	68fb      	ldr	r3, [r7, #12]
 801bd22:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 801bd26:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 801bd2a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 801bd2c:	683b      	ldr	r3, [r7, #0]
 801bd2e:	681b      	ldr	r3, [r3, #0]
 801bd30:	021b      	lsls	r3, r3, #8
 801bd32:	68fa      	ldr	r2, [r7, #12]
 801bd34:	4313      	orrs	r3, r2
 801bd36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 801bd38:	693b      	ldr	r3, [r7, #16]
 801bd3a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 801bd3e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 801bd40:	683b      	ldr	r3, [r7, #0]
 801bd42:	689b      	ldr	r3, [r3, #8]
 801bd44:	051b      	lsls	r3, r3, #20
 801bd46:	693a      	ldr	r2, [r7, #16]
 801bd48:	4313      	orrs	r3, r2
 801bd4a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801bd4c:	687b      	ldr	r3, [r7, #4]
 801bd4e:	4a18      	ldr	r2, [pc, #96]	; (801bdb0 <TIM_OC6_SetConfig+0xb8>)
 801bd50:	4293      	cmp	r3, r2
 801bd52:	d00f      	beq.n	801bd74 <TIM_OC6_SetConfig+0x7c>
 801bd54:	687b      	ldr	r3, [r7, #4]
 801bd56:	4a17      	ldr	r2, [pc, #92]	; (801bdb4 <TIM_OC6_SetConfig+0xbc>)
 801bd58:	4293      	cmp	r3, r2
 801bd5a:	d00b      	beq.n	801bd74 <TIM_OC6_SetConfig+0x7c>
 801bd5c:	687b      	ldr	r3, [r7, #4]
 801bd5e:	4a16      	ldr	r2, [pc, #88]	; (801bdb8 <TIM_OC6_SetConfig+0xc0>)
 801bd60:	4293      	cmp	r3, r2
 801bd62:	d007      	beq.n	801bd74 <TIM_OC6_SetConfig+0x7c>
 801bd64:	687b      	ldr	r3, [r7, #4]
 801bd66:	4a15      	ldr	r2, [pc, #84]	; (801bdbc <TIM_OC6_SetConfig+0xc4>)
 801bd68:	4293      	cmp	r3, r2
 801bd6a:	d003      	beq.n	801bd74 <TIM_OC6_SetConfig+0x7c>
 801bd6c:	687b      	ldr	r3, [r7, #4]
 801bd6e:	4a14      	ldr	r2, [pc, #80]	; (801bdc0 <TIM_OC6_SetConfig+0xc8>)
 801bd70:	4293      	cmp	r3, r2
 801bd72:	d109      	bne.n	801bd88 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 801bd74:	697b      	ldr	r3, [r7, #20]
 801bd76:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 801bd7a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 801bd7c:	683b      	ldr	r3, [r7, #0]
 801bd7e:	695b      	ldr	r3, [r3, #20]
 801bd80:	029b      	lsls	r3, r3, #10
 801bd82:	697a      	ldr	r2, [r7, #20]
 801bd84:	4313      	orrs	r3, r2
 801bd86:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801bd88:	687b      	ldr	r3, [r7, #4]
 801bd8a:	697a      	ldr	r2, [r7, #20]
 801bd8c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 801bd8e:	687b      	ldr	r3, [r7, #4]
 801bd90:	68fa      	ldr	r2, [r7, #12]
 801bd92:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 801bd94:	683b      	ldr	r3, [r7, #0]
 801bd96:	685a      	ldr	r2, [r3, #4]
 801bd98:	687b      	ldr	r3, [r7, #4]
 801bd9a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801bd9c:	687b      	ldr	r3, [r7, #4]
 801bd9e:	693a      	ldr	r2, [r7, #16]
 801bda0:	621a      	str	r2, [r3, #32]
}
 801bda2:	bf00      	nop
 801bda4:	371c      	adds	r7, #28
 801bda6:	46bd      	mov	sp, r7
 801bda8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bdac:	4770      	bx	lr
 801bdae:	bf00      	nop
 801bdb0:	40012c00 	.word	0x40012c00
 801bdb4:	40013400 	.word	0x40013400
 801bdb8:	40014000 	.word	0x40014000
 801bdbc:	40014400 	.word	0x40014400
 801bdc0:	40014800 	.word	0x40014800

0801bdc4 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 801bdc4:	b480      	push	{r7}
 801bdc6:	b087      	sub	sp, #28
 801bdc8:	af00      	add	r7, sp, #0
 801bdca:	60f8      	str	r0, [r7, #12]
 801bdcc:	60b9      	str	r1, [r7, #8]
 801bdce:	607a      	str	r2, [r7, #4]
 801bdd0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 801bdd2:	68fb      	ldr	r3, [r7, #12]
 801bdd4:	6a1b      	ldr	r3, [r3, #32]
 801bdd6:	f023 0201 	bic.w	r2, r3, #1
 801bdda:	68fb      	ldr	r3, [r7, #12]
 801bddc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 801bdde:	68fb      	ldr	r3, [r7, #12]
 801bde0:	699b      	ldr	r3, [r3, #24]
 801bde2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 801bde4:	68fb      	ldr	r3, [r7, #12]
 801bde6:	6a1b      	ldr	r3, [r3, #32]
 801bde8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 801bdea:	68fb      	ldr	r3, [r7, #12]
 801bdec:	4a26      	ldr	r2, [pc, #152]	; (801be88 <TIM_TI1_SetConfig+0xc4>)
 801bdee:	4293      	cmp	r3, r2
 801bdf0:	d017      	beq.n	801be22 <TIM_TI1_SetConfig+0x5e>
 801bdf2:	68fb      	ldr	r3, [r7, #12]
 801bdf4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801bdf8:	d013      	beq.n	801be22 <TIM_TI1_SetConfig+0x5e>
 801bdfa:	68fb      	ldr	r3, [r7, #12]
 801bdfc:	4a23      	ldr	r2, [pc, #140]	; (801be8c <TIM_TI1_SetConfig+0xc8>)
 801bdfe:	4293      	cmp	r3, r2
 801be00:	d00f      	beq.n	801be22 <TIM_TI1_SetConfig+0x5e>
 801be02:	68fb      	ldr	r3, [r7, #12]
 801be04:	4a22      	ldr	r2, [pc, #136]	; (801be90 <TIM_TI1_SetConfig+0xcc>)
 801be06:	4293      	cmp	r3, r2
 801be08:	d00b      	beq.n	801be22 <TIM_TI1_SetConfig+0x5e>
 801be0a:	68fb      	ldr	r3, [r7, #12]
 801be0c:	4a21      	ldr	r2, [pc, #132]	; (801be94 <TIM_TI1_SetConfig+0xd0>)
 801be0e:	4293      	cmp	r3, r2
 801be10:	d007      	beq.n	801be22 <TIM_TI1_SetConfig+0x5e>
 801be12:	68fb      	ldr	r3, [r7, #12]
 801be14:	4a20      	ldr	r2, [pc, #128]	; (801be98 <TIM_TI1_SetConfig+0xd4>)
 801be16:	4293      	cmp	r3, r2
 801be18:	d003      	beq.n	801be22 <TIM_TI1_SetConfig+0x5e>
 801be1a:	68fb      	ldr	r3, [r7, #12]
 801be1c:	4a1f      	ldr	r2, [pc, #124]	; (801be9c <TIM_TI1_SetConfig+0xd8>)
 801be1e:	4293      	cmp	r3, r2
 801be20:	d101      	bne.n	801be26 <TIM_TI1_SetConfig+0x62>
 801be22:	2301      	movs	r3, #1
 801be24:	e000      	b.n	801be28 <TIM_TI1_SetConfig+0x64>
 801be26:	2300      	movs	r3, #0
 801be28:	2b00      	cmp	r3, #0
 801be2a:	d008      	beq.n	801be3e <TIM_TI1_SetConfig+0x7a>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 801be2c:	697b      	ldr	r3, [r7, #20]
 801be2e:	f023 0303 	bic.w	r3, r3, #3
 801be32:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 801be34:	697a      	ldr	r2, [r7, #20]
 801be36:	687b      	ldr	r3, [r7, #4]
 801be38:	4313      	orrs	r3, r2
 801be3a:	617b      	str	r3, [r7, #20]
 801be3c:	e003      	b.n	801be46 <TIM_TI1_SetConfig+0x82>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 801be3e:	697b      	ldr	r3, [r7, #20]
 801be40:	f043 0301 	orr.w	r3, r3, #1
 801be44:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 801be46:	697b      	ldr	r3, [r7, #20]
 801be48:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 801be4c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 801be4e:	683b      	ldr	r3, [r7, #0]
 801be50:	011b      	lsls	r3, r3, #4
 801be52:	b2db      	uxtb	r3, r3
 801be54:	697a      	ldr	r2, [r7, #20]
 801be56:	4313      	orrs	r3, r2
 801be58:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 801be5a:	693b      	ldr	r3, [r7, #16]
 801be5c:	f023 030a 	bic.w	r3, r3, #10
 801be60:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 801be62:	68bb      	ldr	r3, [r7, #8]
 801be64:	f003 030a 	and.w	r3, r3, #10
 801be68:	693a      	ldr	r2, [r7, #16]
 801be6a:	4313      	orrs	r3, r2
 801be6c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 801be6e:	68fb      	ldr	r3, [r7, #12]
 801be70:	697a      	ldr	r2, [r7, #20]
 801be72:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 801be74:	68fb      	ldr	r3, [r7, #12]
 801be76:	693a      	ldr	r2, [r7, #16]
 801be78:	621a      	str	r2, [r3, #32]
}
 801be7a:	bf00      	nop
 801be7c:	371c      	adds	r7, #28
 801be7e:	46bd      	mov	sp, r7
 801be80:	f85d 7b04 	ldr.w	r7, [sp], #4
 801be84:	4770      	bx	lr
 801be86:	bf00      	nop
 801be88:	40012c00 	.word	0x40012c00
 801be8c:	40000400 	.word	0x40000400
 801be90:	40000800 	.word	0x40000800
 801be94:	40000c00 	.word	0x40000c00
 801be98:	40013400 	.word	0x40013400
 801be9c:	40014000 	.word	0x40014000

0801bea0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 801bea0:	b480      	push	{r7}
 801bea2:	b087      	sub	sp, #28
 801bea4:	af00      	add	r7, sp, #0
 801bea6:	60f8      	str	r0, [r7, #12]
 801bea8:	60b9      	str	r1, [r7, #8]
 801beaa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 801beac:	68fb      	ldr	r3, [r7, #12]
 801beae:	6a1b      	ldr	r3, [r3, #32]
 801beb0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 801beb2:	68fb      	ldr	r3, [r7, #12]
 801beb4:	6a1b      	ldr	r3, [r3, #32]
 801beb6:	f023 0201 	bic.w	r2, r3, #1
 801beba:	68fb      	ldr	r3, [r7, #12]
 801bebc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 801bebe:	68fb      	ldr	r3, [r7, #12]
 801bec0:	699b      	ldr	r3, [r3, #24]
 801bec2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 801bec4:	693b      	ldr	r3, [r7, #16]
 801bec6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 801beca:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 801becc:	687b      	ldr	r3, [r7, #4]
 801bece:	011b      	lsls	r3, r3, #4
 801bed0:	693a      	ldr	r2, [r7, #16]
 801bed2:	4313      	orrs	r3, r2
 801bed4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 801bed6:	697b      	ldr	r3, [r7, #20]
 801bed8:	f023 030a 	bic.w	r3, r3, #10
 801bedc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 801bede:	697a      	ldr	r2, [r7, #20]
 801bee0:	68bb      	ldr	r3, [r7, #8]
 801bee2:	4313      	orrs	r3, r2
 801bee4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 801bee6:	68fb      	ldr	r3, [r7, #12]
 801bee8:	693a      	ldr	r2, [r7, #16]
 801beea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 801beec:	68fb      	ldr	r3, [r7, #12]
 801beee:	697a      	ldr	r2, [r7, #20]
 801bef0:	621a      	str	r2, [r3, #32]
}
 801bef2:	bf00      	nop
 801bef4:	371c      	adds	r7, #28
 801bef6:	46bd      	mov	sp, r7
 801bef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801befc:	4770      	bx	lr

0801befe <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 801befe:	b480      	push	{r7}
 801bf00:	b087      	sub	sp, #28
 801bf02:	af00      	add	r7, sp, #0
 801bf04:	60f8      	str	r0, [r7, #12]
 801bf06:	60b9      	str	r1, [r7, #8]
 801bf08:	607a      	str	r2, [r7, #4]
 801bf0a:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 801bf0c:	68fb      	ldr	r3, [r7, #12]
 801bf0e:	6a1b      	ldr	r3, [r3, #32]
 801bf10:	f023 0210 	bic.w	r2, r3, #16
 801bf14:	68fb      	ldr	r3, [r7, #12]
 801bf16:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 801bf18:	68fb      	ldr	r3, [r7, #12]
 801bf1a:	699b      	ldr	r3, [r3, #24]
 801bf1c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 801bf1e:	68fb      	ldr	r3, [r7, #12]
 801bf20:	6a1b      	ldr	r3, [r3, #32]
 801bf22:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 801bf24:	697b      	ldr	r3, [r7, #20]
 801bf26:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801bf2a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 801bf2c:	687b      	ldr	r3, [r7, #4]
 801bf2e:	021b      	lsls	r3, r3, #8
 801bf30:	697a      	ldr	r2, [r7, #20]
 801bf32:	4313      	orrs	r3, r2
 801bf34:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 801bf36:	697b      	ldr	r3, [r7, #20]
 801bf38:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 801bf3c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 801bf3e:	683b      	ldr	r3, [r7, #0]
 801bf40:	031b      	lsls	r3, r3, #12
 801bf42:	b29b      	uxth	r3, r3
 801bf44:	697a      	ldr	r2, [r7, #20]
 801bf46:	4313      	orrs	r3, r2
 801bf48:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 801bf4a:	693b      	ldr	r3, [r7, #16]
 801bf4c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 801bf50:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 801bf52:	68bb      	ldr	r3, [r7, #8]
 801bf54:	011b      	lsls	r3, r3, #4
 801bf56:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 801bf5a:	693a      	ldr	r2, [r7, #16]
 801bf5c:	4313      	orrs	r3, r2
 801bf5e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 801bf60:	68fb      	ldr	r3, [r7, #12]
 801bf62:	697a      	ldr	r2, [r7, #20]
 801bf64:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 801bf66:	68fb      	ldr	r3, [r7, #12]
 801bf68:	693a      	ldr	r2, [r7, #16]
 801bf6a:	621a      	str	r2, [r3, #32]
}
 801bf6c:	bf00      	nop
 801bf6e:	371c      	adds	r7, #28
 801bf70:	46bd      	mov	sp, r7
 801bf72:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bf76:	4770      	bx	lr

0801bf78 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 801bf78:	b480      	push	{r7}
 801bf7a:	b087      	sub	sp, #28
 801bf7c:	af00      	add	r7, sp, #0
 801bf7e:	60f8      	str	r0, [r7, #12]
 801bf80:	60b9      	str	r1, [r7, #8]
 801bf82:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 801bf84:	68fb      	ldr	r3, [r7, #12]
 801bf86:	6a1b      	ldr	r3, [r3, #32]
 801bf88:	f023 0210 	bic.w	r2, r3, #16
 801bf8c:	68fb      	ldr	r3, [r7, #12]
 801bf8e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 801bf90:	68fb      	ldr	r3, [r7, #12]
 801bf92:	699b      	ldr	r3, [r3, #24]
 801bf94:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 801bf96:	68fb      	ldr	r3, [r7, #12]
 801bf98:	6a1b      	ldr	r3, [r3, #32]
 801bf9a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 801bf9c:	697b      	ldr	r3, [r7, #20]
 801bf9e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 801bfa2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 801bfa4:	687b      	ldr	r3, [r7, #4]
 801bfa6:	031b      	lsls	r3, r3, #12
 801bfa8:	697a      	ldr	r2, [r7, #20]
 801bfaa:	4313      	orrs	r3, r2
 801bfac:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 801bfae:	693b      	ldr	r3, [r7, #16]
 801bfb0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 801bfb4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 801bfb6:	68bb      	ldr	r3, [r7, #8]
 801bfb8:	011b      	lsls	r3, r3, #4
 801bfba:	693a      	ldr	r2, [r7, #16]
 801bfbc:	4313      	orrs	r3, r2
 801bfbe:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 801bfc0:	68fb      	ldr	r3, [r7, #12]
 801bfc2:	697a      	ldr	r2, [r7, #20]
 801bfc4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 801bfc6:	68fb      	ldr	r3, [r7, #12]
 801bfc8:	693a      	ldr	r2, [r7, #16]
 801bfca:	621a      	str	r2, [r3, #32]
}
 801bfcc:	bf00      	nop
 801bfce:	371c      	adds	r7, #28
 801bfd0:	46bd      	mov	sp, r7
 801bfd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bfd6:	4770      	bx	lr

0801bfd8 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 801bfd8:	b480      	push	{r7}
 801bfda:	b087      	sub	sp, #28
 801bfdc:	af00      	add	r7, sp, #0
 801bfde:	60f8      	str	r0, [r7, #12]
 801bfe0:	60b9      	str	r1, [r7, #8]
 801bfe2:	607a      	str	r2, [r7, #4]
 801bfe4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 801bfe6:	68fb      	ldr	r3, [r7, #12]
 801bfe8:	6a1b      	ldr	r3, [r3, #32]
 801bfea:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 801bfee:	68fb      	ldr	r3, [r7, #12]
 801bff0:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 801bff2:	68fb      	ldr	r3, [r7, #12]
 801bff4:	69db      	ldr	r3, [r3, #28]
 801bff6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 801bff8:	68fb      	ldr	r3, [r7, #12]
 801bffa:	6a1b      	ldr	r3, [r3, #32]
 801bffc:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 801bffe:	697b      	ldr	r3, [r7, #20]
 801c000:	f023 0303 	bic.w	r3, r3, #3
 801c004:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 801c006:	697a      	ldr	r2, [r7, #20]
 801c008:	687b      	ldr	r3, [r7, #4]
 801c00a:	4313      	orrs	r3, r2
 801c00c:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 801c00e:	697b      	ldr	r3, [r7, #20]
 801c010:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 801c014:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 801c016:	683b      	ldr	r3, [r7, #0]
 801c018:	011b      	lsls	r3, r3, #4
 801c01a:	b2db      	uxtb	r3, r3
 801c01c:	697a      	ldr	r2, [r7, #20]
 801c01e:	4313      	orrs	r3, r2
 801c020:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 801c022:	693b      	ldr	r3, [r7, #16]
 801c024:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 801c028:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 801c02a:	68bb      	ldr	r3, [r7, #8]
 801c02c:	021b      	lsls	r3, r3, #8
 801c02e:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 801c032:	693a      	ldr	r2, [r7, #16]
 801c034:	4313      	orrs	r3, r2
 801c036:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 801c038:	68fb      	ldr	r3, [r7, #12]
 801c03a:	697a      	ldr	r2, [r7, #20]
 801c03c:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 801c03e:	68fb      	ldr	r3, [r7, #12]
 801c040:	693a      	ldr	r2, [r7, #16]
 801c042:	621a      	str	r2, [r3, #32]
}
 801c044:	bf00      	nop
 801c046:	371c      	adds	r7, #28
 801c048:	46bd      	mov	sp, r7
 801c04a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c04e:	4770      	bx	lr

0801c050 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 801c050:	b480      	push	{r7}
 801c052:	b087      	sub	sp, #28
 801c054:	af00      	add	r7, sp, #0
 801c056:	60f8      	str	r0, [r7, #12]
 801c058:	60b9      	str	r1, [r7, #8]
 801c05a:	607a      	str	r2, [r7, #4]
 801c05c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 801c05e:	68fb      	ldr	r3, [r7, #12]
 801c060:	6a1b      	ldr	r3, [r3, #32]
 801c062:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 801c066:	68fb      	ldr	r3, [r7, #12]
 801c068:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 801c06a:	68fb      	ldr	r3, [r7, #12]
 801c06c:	69db      	ldr	r3, [r3, #28]
 801c06e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 801c070:	68fb      	ldr	r3, [r7, #12]
 801c072:	6a1b      	ldr	r3, [r3, #32]
 801c074:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 801c076:	697b      	ldr	r3, [r7, #20]
 801c078:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801c07c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 801c07e:	687b      	ldr	r3, [r7, #4]
 801c080:	021b      	lsls	r3, r3, #8
 801c082:	697a      	ldr	r2, [r7, #20]
 801c084:	4313      	orrs	r3, r2
 801c086:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 801c088:	697b      	ldr	r3, [r7, #20]
 801c08a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 801c08e:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 801c090:	683b      	ldr	r3, [r7, #0]
 801c092:	031b      	lsls	r3, r3, #12
 801c094:	b29b      	uxth	r3, r3
 801c096:	697a      	ldr	r2, [r7, #20]
 801c098:	4313      	orrs	r3, r2
 801c09a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 801c09c:	693b      	ldr	r3, [r7, #16]
 801c09e:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 801c0a2:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 801c0a4:	68bb      	ldr	r3, [r7, #8]
 801c0a6:	031b      	lsls	r3, r3, #12
 801c0a8:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 801c0ac:	693a      	ldr	r2, [r7, #16]
 801c0ae:	4313      	orrs	r3, r2
 801c0b0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 801c0b2:	68fb      	ldr	r3, [r7, #12]
 801c0b4:	697a      	ldr	r2, [r7, #20]
 801c0b6:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 801c0b8:	68fb      	ldr	r3, [r7, #12]
 801c0ba:	693a      	ldr	r2, [r7, #16]
 801c0bc:	621a      	str	r2, [r3, #32]
}
 801c0be:	bf00      	nop
 801c0c0:	371c      	adds	r7, #28
 801c0c2:	46bd      	mov	sp, r7
 801c0c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c0c8:	4770      	bx	lr

0801c0ca <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 801c0ca:	b480      	push	{r7}
 801c0cc:	b085      	sub	sp, #20
 801c0ce:	af00      	add	r7, sp, #0
 801c0d0:	6078      	str	r0, [r7, #4]
 801c0d2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 801c0d4:	687b      	ldr	r3, [r7, #4]
 801c0d6:	689b      	ldr	r3, [r3, #8]
 801c0d8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 801c0da:	68fb      	ldr	r3, [r7, #12]
 801c0dc:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 801c0e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801c0e4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 801c0e6:	683a      	ldr	r2, [r7, #0]
 801c0e8:	68fb      	ldr	r3, [r7, #12]
 801c0ea:	4313      	orrs	r3, r2
 801c0ec:	f043 0307 	orr.w	r3, r3, #7
 801c0f0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 801c0f2:	687b      	ldr	r3, [r7, #4]
 801c0f4:	68fa      	ldr	r2, [r7, #12]
 801c0f6:	609a      	str	r2, [r3, #8]
}
 801c0f8:	bf00      	nop
 801c0fa:	3714      	adds	r7, #20
 801c0fc:	46bd      	mov	sp, r7
 801c0fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c102:	4770      	bx	lr

0801c104 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 801c104:	b480      	push	{r7}
 801c106:	b087      	sub	sp, #28
 801c108:	af00      	add	r7, sp, #0
 801c10a:	60f8      	str	r0, [r7, #12]
 801c10c:	60b9      	str	r1, [r7, #8]
 801c10e:	607a      	str	r2, [r7, #4]
 801c110:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 801c112:	68fb      	ldr	r3, [r7, #12]
 801c114:	689b      	ldr	r3, [r3, #8]
 801c116:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 801c118:	697b      	ldr	r3, [r7, #20]
 801c11a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 801c11e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 801c120:	683b      	ldr	r3, [r7, #0]
 801c122:	021a      	lsls	r2, r3, #8
 801c124:	687b      	ldr	r3, [r7, #4]
 801c126:	431a      	orrs	r2, r3
 801c128:	68bb      	ldr	r3, [r7, #8]
 801c12a:	4313      	orrs	r3, r2
 801c12c:	697a      	ldr	r2, [r7, #20]
 801c12e:	4313      	orrs	r3, r2
 801c130:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 801c132:	68fb      	ldr	r3, [r7, #12]
 801c134:	697a      	ldr	r2, [r7, #20]
 801c136:	609a      	str	r2, [r3, #8]
}
 801c138:	bf00      	nop
 801c13a:	371c      	adds	r7, #28
 801c13c:	46bd      	mov	sp, r7
 801c13e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c142:	4770      	bx	lr

0801c144 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 801c144:	b480      	push	{r7}
 801c146:	b087      	sub	sp, #28
 801c148:	af00      	add	r7, sp, #0
 801c14a:	60f8      	str	r0, [r7, #12]
 801c14c:	60b9      	str	r1, [r7, #8]
 801c14e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 801c150:	68bb      	ldr	r3, [r7, #8]
 801c152:	f003 031f 	and.w	r3, r3, #31
 801c156:	2201      	movs	r2, #1
 801c158:	fa02 f303 	lsl.w	r3, r2, r3
 801c15c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 801c15e:	68fb      	ldr	r3, [r7, #12]
 801c160:	6a1a      	ldr	r2, [r3, #32]
 801c162:	697b      	ldr	r3, [r7, #20]
 801c164:	43db      	mvns	r3, r3
 801c166:	401a      	ands	r2, r3
 801c168:	68fb      	ldr	r3, [r7, #12]
 801c16a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 801c16c:	68fb      	ldr	r3, [r7, #12]
 801c16e:	6a1a      	ldr	r2, [r3, #32]
 801c170:	68bb      	ldr	r3, [r7, #8]
 801c172:	f003 031f 	and.w	r3, r3, #31
 801c176:	6879      	ldr	r1, [r7, #4]
 801c178:	fa01 f303 	lsl.w	r3, r1, r3
 801c17c:	431a      	orrs	r2, r3
 801c17e:	68fb      	ldr	r3, [r7, #12]
 801c180:	621a      	str	r2, [r3, #32]
}
 801c182:	bf00      	nop
 801c184:	371c      	adds	r7, #28
 801c186:	46bd      	mov	sp, r7
 801c188:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c18c:	4770      	bx	lr
	...

0801c190 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 801c190:	b480      	push	{r7}
 801c192:	b085      	sub	sp, #20
 801c194:	af00      	add	r7, sp, #0
 801c196:	6078      	str	r0, [r7, #4]
 801c198:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 801c19a:	687b      	ldr	r3, [r7, #4]
 801c19c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801c1a0:	2b01      	cmp	r3, #1
 801c1a2:	d101      	bne.n	801c1a8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 801c1a4:	2302      	movs	r3, #2
 801c1a6:	e068      	b.n	801c27a <HAL_TIMEx_MasterConfigSynchronization+0xea>
 801c1a8:	687b      	ldr	r3, [r7, #4]
 801c1aa:	2201      	movs	r2, #1
 801c1ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 801c1b0:	687b      	ldr	r3, [r7, #4]
 801c1b2:	2202      	movs	r2, #2
 801c1b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 801c1b8:	687b      	ldr	r3, [r7, #4]
 801c1ba:	681b      	ldr	r3, [r3, #0]
 801c1bc:	685b      	ldr	r3, [r3, #4]
 801c1be:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 801c1c0:	687b      	ldr	r3, [r7, #4]
 801c1c2:	681b      	ldr	r3, [r3, #0]
 801c1c4:	689b      	ldr	r3, [r3, #8]
 801c1c6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 801c1c8:	687b      	ldr	r3, [r7, #4]
 801c1ca:	681b      	ldr	r3, [r3, #0]
 801c1cc:	4a2e      	ldr	r2, [pc, #184]	; (801c288 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 801c1ce:	4293      	cmp	r3, r2
 801c1d0:	d004      	beq.n	801c1dc <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 801c1d2:	687b      	ldr	r3, [r7, #4]
 801c1d4:	681b      	ldr	r3, [r3, #0]
 801c1d6:	4a2d      	ldr	r2, [pc, #180]	; (801c28c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 801c1d8:	4293      	cmp	r3, r2
 801c1da:	d108      	bne.n	801c1ee <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 801c1dc:	68fb      	ldr	r3, [r7, #12]
 801c1de:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 801c1e2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 801c1e4:	683b      	ldr	r3, [r7, #0]
 801c1e6:	685b      	ldr	r3, [r3, #4]
 801c1e8:	68fa      	ldr	r2, [r7, #12]
 801c1ea:	4313      	orrs	r3, r2
 801c1ec:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 801c1ee:	68fb      	ldr	r3, [r7, #12]
 801c1f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801c1f4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 801c1f6:	683b      	ldr	r3, [r7, #0]
 801c1f8:	681b      	ldr	r3, [r3, #0]
 801c1fa:	68fa      	ldr	r2, [r7, #12]
 801c1fc:	4313      	orrs	r3, r2
 801c1fe:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 801c200:	687b      	ldr	r3, [r7, #4]
 801c202:	681b      	ldr	r3, [r3, #0]
 801c204:	68fa      	ldr	r2, [r7, #12]
 801c206:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 801c208:	687b      	ldr	r3, [r7, #4]
 801c20a:	681b      	ldr	r3, [r3, #0]
 801c20c:	4a1e      	ldr	r2, [pc, #120]	; (801c288 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 801c20e:	4293      	cmp	r3, r2
 801c210:	d01d      	beq.n	801c24e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 801c212:	687b      	ldr	r3, [r7, #4]
 801c214:	681b      	ldr	r3, [r3, #0]
 801c216:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801c21a:	d018      	beq.n	801c24e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 801c21c:	687b      	ldr	r3, [r7, #4]
 801c21e:	681b      	ldr	r3, [r3, #0]
 801c220:	4a1b      	ldr	r2, [pc, #108]	; (801c290 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 801c222:	4293      	cmp	r3, r2
 801c224:	d013      	beq.n	801c24e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 801c226:	687b      	ldr	r3, [r7, #4]
 801c228:	681b      	ldr	r3, [r3, #0]
 801c22a:	4a1a      	ldr	r2, [pc, #104]	; (801c294 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 801c22c:	4293      	cmp	r3, r2
 801c22e:	d00e      	beq.n	801c24e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 801c230:	687b      	ldr	r3, [r7, #4]
 801c232:	681b      	ldr	r3, [r3, #0]
 801c234:	4a18      	ldr	r2, [pc, #96]	; (801c298 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 801c236:	4293      	cmp	r3, r2
 801c238:	d009      	beq.n	801c24e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 801c23a:	687b      	ldr	r3, [r7, #4]
 801c23c:	681b      	ldr	r3, [r3, #0]
 801c23e:	4a13      	ldr	r2, [pc, #76]	; (801c28c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 801c240:	4293      	cmp	r3, r2
 801c242:	d004      	beq.n	801c24e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 801c244:	687b      	ldr	r3, [r7, #4]
 801c246:	681b      	ldr	r3, [r3, #0]
 801c248:	4a14      	ldr	r2, [pc, #80]	; (801c29c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 801c24a:	4293      	cmp	r3, r2
 801c24c:	d10c      	bne.n	801c268 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 801c24e:	68bb      	ldr	r3, [r7, #8]
 801c250:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801c254:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 801c256:	683b      	ldr	r3, [r7, #0]
 801c258:	689b      	ldr	r3, [r3, #8]
 801c25a:	68ba      	ldr	r2, [r7, #8]
 801c25c:	4313      	orrs	r3, r2
 801c25e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 801c260:	687b      	ldr	r3, [r7, #4]
 801c262:	681b      	ldr	r3, [r3, #0]
 801c264:	68ba      	ldr	r2, [r7, #8]
 801c266:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 801c268:	687b      	ldr	r3, [r7, #4]
 801c26a:	2201      	movs	r2, #1
 801c26c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 801c270:	687b      	ldr	r3, [r7, #4]
 801c272:	2200      	movs	r2, #0
 801c274:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 801c278:	2300      	movs	r3, #0
}
 801c27a:	4618      	mov	r0, r3
 801c27c:	3714      	adds	r7, #20
 801c27e:	46bd      	mov	sp, r7
 801c280:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c284:	4770      	bx	lr
 801c286:	bf00      	nop
 801c288:	40012c00 	.word	0x40012c00
 801c28c:	40013400 	.word	0x40013400
 801c290:	40000400 	.word	0x40000400
 801c294:	40000800 	.word	0x40000800
 801c298:	40000c00 	.word	0x40000c00
 801c29c:	40014000 	.word	0x40014000

0801c2a0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 801c2a0:	b480      	push	{r7}
 801c2a2:	b085      	sub	sp, #20
 801c2a4:	af00      	add	r7, sp, #0
 801c2a6:	6078      	str	r0, [r7, #4]
 801c2a8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 801c2aa:	2300      	movs	r3, #0
 801c2ac:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 801c2ae:	687b      	ldr	r3, [r7, #4]
 801c2b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801c2b4:	2b01      	cmp	r3, #1
 801c2b6:	d101      	bne.n	801c2bc <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 801c2b8:	2302      	movs	r3, #2
 801c2ba:	e087      	b.n	801c3cc <HAL_TIMEx_ConfigBreakDeadTime+0x12c>
 801c2bc:	687b      	ldr	r3, [r7, #4]
 801c2be:	2201      	movs	r2, #1
 801c2c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 801c2c4:	68fb      	ldr	r3, [r7, #12]
 801c2c6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 801c2ca:	683b      	ldr	r3, [r7, #0]
 801c2cc:	68db      	ldr	r3, [r3, #12]
 801c2ce:	4313      	orrs	r3, r2
 801c2d0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 801c2d2:	68fb      	ldr	r3, [r7, #12]
 801c2d4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 801c2d8:	683b      	ldr	r3, [r7, #0]
 801c2da:	689b      	ldr	r3, [r3, #8]
 801c2dc:	4313      	orrs	r3, r2
 801c2de:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 801c2e0:	68fb      	ldr	r3, [r7, #12]
 801c2e2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 801c2e6:	683b      	ldr	r3, [r7, #0]
 801c2e8:	685b      	ldr	r3, [r3, #4]
 801c2ea:	4313      	orrs	r3, r2
 801c2ec:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 801c2ee:	68fb      	ldr	r3, [r7, #12]
 801c2f0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 801c2f4:	683b      	ldr	r3, [r7, #0]
 801c2f6:	681b      	ldr	r3, [r3, #0]
 801c2f8:	4313      	orrs	r3, r2
 801c2fa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 801c2fc:	68fb      	ldr	r3, [r7, #12]
 801c2fe:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 801c302:	683b      	ldr	r3, [r7, #0]
 801c304:	691b      	ldr	r3, [r3, #16]
 801c306:	4313      	orrs	r3, r2
 801c308:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 801c30a:	68fb      	ldr	r3, [r7, #12]
 801c30c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 801c310:	683b      	ldr	r3, [r7, #0]
 801c312:	695b      	ldr	r3, [r3, #20]
 801c314:	4313      	orrs	r3, r2
 801c316:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 801c318:	68fb      	ldr	r3, [r7, #12]
 801c31a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 801c31e:	683b      	ldr	r3, [r7, #0]
 801c320:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801c322:	4313      	orrs	r3, r2
 801c324:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 801c326:	68fb      	ldr	r3, [r7, #12]
 801c328:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 801c32c:	683b      	ldr	r3, [r7, #0]
 801c32e:	699b      	ldr	r3, [r3, #24]
 801c330:	041b      	lsls	r3, r3, #16
 801c332:	4313      	orrs	r3, r2
 801c334:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 801c336:	687b      	ldr	r3, [r7, #4]
 801c338:	681b      	ldr	r3, [r3, #0]
 801c33a:	4a27      	ldr	r2, [pc, #156]	; (801c3d8 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 801c33c:	4293      	cmp	r3, r2
 801c33e:	d004      	beq.n	801c34a <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 801c340:	687b      	ldr	r3, [r7, #4]
 801c342:	681b      	ldr	r3, [r3, #0]
 801c344:	4a25      	ldr	r2, [pc, #148]	; (801c3dc <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 801c346:	4293      	cmp	r3, r2
 801c348:	d106      	bne.n	801c358 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 801c34a:	68fb      	ldr	r3, [r7, #12]
 801c34c:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 801c350:	683b      	ldr	r3, [r7, #0]
 801c352:	69db      	ldr	r3, [r3, #28]
 801c354:	4313      	orrs	r3, r2
 801c356:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 801c358:	687b      	ldr	r3, [r7, #4]
 801c35a:	681b      	ldr	r3, [r3, #0]
 801c35c:	4a1e      	ldr	r2, [pc, #120]	; (801c3d8 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 801c35e:	4293      	cmp	r3, r2
 801c360:	d004      	beq.n	801c36c <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 801c362:	687b      	ldr	r3, [r7, #4]
 801c364:	681b      	ldr	r3, [r3, #0]
 801c366:	4a1d      	ldr	r2, [pc, #116]	; (801c3dc <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 801c368:	4293      	cmp	r3, r2
 801c36a:	d126      	bne.n	801c3ba <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 801c36c:	68fb      	ldr	r3, [r7, #12]
 801c36e:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 801c372:	683b      	ldr	r3, [r7, #0]
 801c374:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801c376:	051b      	lsls	r3, r3, #20
 801c378:	4313      	orrs	r3, r2
 801c37a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 801c37c:	68fb      	ldr	r3, [r7, #12]
 801c37e:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 801c382:	683b      	ldr	r3, [r7, #0]
 801c384:	6a1b      	ldr	r3, [r3, #32]
 801c386:	4313      	orrs	r3, r2
 801c388:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 801c38a:	68fb      	ldr	r3, [r7, #12]
 801c38c:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 801c390:	683b      	ldr	r3, [r7, #0]
 801c392:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801c394:	4313      	orrs	r3, r2
 801c396:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 801c398:	687b      	ldr	r3, [r7, #4]
 801c39a:	681b      	ldr	r3, [r3, #0]
 801c39c:	4a0e      	ldr	r2, [pc, #56]	; (801c3d8 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 801c39e:	4293      	cmp	r3, r2
 801c3a0:	d004      	beq.n	801c3ac <HAL_TIMEx_ConfigBreakDeadTime+0x10c>
 801c3a2:	687b      	ldr	r3, [r7, #4]
 801c3a4:	681b      	ldr	r3, [r3, #0]
 801c3a6:	4a0d      	ldr	r2, [pc, #52]	; (801c3dc <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 801c3a8:	4293      	cmp	r3, r2
 801c3aa:	d106      	bne.n	801c3ba <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 801c3ac:	68fb      	ldr	r3, [r7, #12]
 801c3ae:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 801c3b2:	683b      	ldr	r3, [r7, #0]
 801c3b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801c3b6:	4313      	orrs	r3, r2
 801c3b8:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 801c3ba:	687b      	ldr	r3, [r7, #4]
 801c3bc:	681b      	ldr	r3, [r3, #0]
 801c3be:	68fa      	ldr	r2, [r7, #12]
 801c3c0:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 801c3c2:	687b      	ldr	r3, [r7, #4]
 801c3c4:	2200      	movs	r2, #0
 801c3c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 801c3ca:	2300      	movs	r3, #0
}
 801c3cc:	4618      	mov	r0, r3
 801c3ce:	3714      	adds	r7, #20
 801c3d0:	46bd      	mov	sp, r7
 801c3d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c3d6:	4770      	bx	lr
 801c3d8:	40012c00 	.word	0x40012c00
 801c3dc:	40013400 	.word	0x40013400

0801c3e0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 801c3e0:	b480      	push	{r7}
 801c3e2:	b083      	sub	sp, #12
 801c3e4:	af00      	add	r7, sp, #0
 801c3e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 801c3e8:	bf00      	nop
 801c3ea:	370c      	adds	r7, #12
 801c3ec:	46bd      	mov	sp, r7
 801c3ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c3f2:	4770      	bx	lr

0801c3f4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 801c3f4:	b480      	push	{r7}
 801c3f6:	b083      	sub	sp, #12
 801c3f8:	af00      	add	r7, sp, #0
 801c3fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 801c3fc:	bf00      	nop
 801c3fe:	370c      	adds	r7, #12
 801c400:	46bd      	mov	sp, r7
 801c402:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c406:	4770      	bx	lr

0801c408 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 801c408:	b480      	push	{r7}
 801c40a:	b083      	sub	sp, #12
 801c40c:	af00      	add	r7, sp, #0
 801c40e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 801c410:	bf00      	nop
 801c412:	370c      	adds	r7, #12
 801c414:	46bd      	mov	sp, r7
 801c416:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c41a:	4770      	bx	lr

0801c41c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 801c41c:	b580      	push	{r7, lr}
 801c41e:	b082      	sub	sp, #8
 801c420:	af00      	add	r7, sp, #0
 801c422:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 801c424:	687b      	ldr	r3, [r7, #4]
 801c426:	2b00      	cmp	r3, #0
 801c428:	d101      	bne.n	801c42e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 801c42a:	2301      	movs	r3, #1
 801c42c:	e042      	b.n	801c4b4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 801c42e:	687b      	ldr	r3, [r7, #4]
 801c430:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801c434:	2b00      	cmp	r3, #0
 801c436:	d106      	bne.n	801c446 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 801c438:	687b      	ldr	r3, [r7, #4]
 801c43a:	2200      	movs	r2, #0
 801c43c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 801c440:	6878      	ldr	r0, [r7, #4]
 801c442:	f7f7 fa01 	bl	8013848 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 801c446:	687b      	ldr	r3, [r7, #4]
 801c448:	2224      	movs	r2, #36	; 0x24
 801c44a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 801c44e:	687b      	ldr	r3, [r7, #4]
 801c450:	681b      	ldr	r3, [r3, #0]
 801c452:	681a      	ldr	r2, [r3, #0]
 801c454:	687b      	ldr	r3, [r7, #4]
 801c456:	681b      	ldr	r3, [r3, #0]
 801c458:	f022 0201 	bic.w	r2, r2, #1
 801c45c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 801c45e:	6878      	ldr	r0, [r7, #4]
 801c460:	f000 fc4a 	bl	801ccf8 <UART_SetConfig>
 801c464:	4603      	mov	r3, r0
 801c466:	2b01      	cmp	r3, #1
 801c468:	d101      	bne.n	801c46e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 801c46a:	2301      	movs	r3, #1
 801c46c:	e022      	b.n	801c4b4 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 801c46e:	687b      	ldr	r3, [r7, #4]
 801c470:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801c472:	2b00      	cmp	r3, #0
 801c474:	d002      	beq.n	801c47c <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 801c476:	6878      	ldr	r0, [r7, #4]
 801c478:	f000 ff3e 	bl	801d2f8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 801c47c:	687b      	ldr	r3, [r7, #4]
 801c47e:	681b      	ldr	r3, [r3, #0]
 801c480:	685a      	ldr	r2, [r3, #4]
 801c482:	687b      	ldr	r3, [r7, #4]
 801c484:	681b      	ldr	r3, [r3, #0]
 801c486:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 801c48a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 801c48c:	687b      	ldr	r3, [r7, #4]
 801c48e:	681b      	ldr	r3, [r3, #0]
 801c490:	689a      	ldr	r2, [r3, #8]
 801c492:	687b      	ldr	r3, [r7, #4]
 801c494:	681b      	ldr	r3, [r3, #0]
 801c496:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 801c49a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 801c49c:	687b      	ldr	r3, [r7, #4]
 801c49e:	681b      	ldr	r3, [r3, #0]
 801c4a0:	681a      	ldr	r2, [r3, #0]
 801c4a2:	687b      	ldr	r3, [r7, #4]
 801c4a4:	681b      	ldr	r3, [r3, #0]
 801c4a6:	f042 0201 	orr.w	r2, r2, #1
 801c4aa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 801c4ac:	6878      	ldr	r0, [r7, #4]
 801c4ae:	f000 ffc5 	bl	801d43c <UART_CheckIdleState>
 801c4b2:	4603      	mov	r3, r0
}
 801c4b4:	4618      	mov	r0, r3
 801c4b6:	3708      	adds	r7, #8
 801c4b8:	46bd      	mov	sp, r7
 801c4ba:	bd80      	pop	{r7, pc}

0801c4bc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 801c4bc:	b580      	push	{r7, lr}
 801c4be:	b08a      	sub	sp, #40	; 0x28
 801c4c0:	af02      	add	r7, sp, #8
 801c4c2:	60f8      	str	r0, [r7, #12]
 801c4c4:	60b9      	str	r1, [r7, #8]
 801c4c6:	603b      	str	r3, [r7, #0]
 801c4c8:	4613      	mov	r3, r2
 801c4ca:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 801c4cc:	68fb      	ldr	r3, [r7, #12]
 801c4ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801c4d2:	2b20      	cmp	r3, #32
 801c4d4:	d17b      	bne.n	801c5ce <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 801c4d6:	68bb      	ldr	r3, [r7, #8]
 801c4d8:	2b00      	cmp	r3, #0
 801c4da:	d002      	beq.n	801c4e2 <HAL_UART_Transmit+0x26>
 801c4dc:	88fb      	ldrh	r3, [r7, #6]
 801c4de:	2b00      	cmp	r3, #0
 801c4e0:	d101      	bne.n	801c4e6 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 801c4e2:	2301      	movs	r3, #1
 801c4e4:	e074      	b.n	801c5d0 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 801c4e6:	68fb      	ldr	r3, [r7, #12]
 801c4e8:	2200      	movs	r2, #0
 801c4ea:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 801c4ee:	68fb      	ldr	r3, [r7, #12]
 801c4f0:	2221      	movs	r2, #33	; 0x21
 801c4f2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 801c4f6:	f7f8 f82b 	bl	8014550 <HAL_GetTick>
 801c4fa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 801c4fc:	68fb      	ldr	r3, [r7, #12]
 801c4fe:	88fa      	ldrh	r2, [r7, #6]
 801c500:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 801c504:	68fb      	ldr	r3, [r7, #12]
 801c506:	88fa      	ldrh	r2, [r7, #6]
 801c508:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801c50c:	68fb      	ldr	r3, [r7, #12]
 801c50e:	689b      	ldr	r3, [r3, #8]
 801c510:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801c514:	d108      	bne.n	801c528 <HAL_UART_Transmit+0x6c>
 801c516:	68fb      	ldr	r3, [r7, #12]
 801c518:	691b      	ldr	r3, [r3, #16]
 801c51a:	2b00      	cmp	r3, #0
 801c51c:	d104      	bne.n	801c528 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 801c51e:	2300      	movs	r3, #0
 801c520:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 801c522:	68bb      	ldr	r3, [r7, #8]
 801c524:	61bb      	str	r3, [r7, #24]
 801c526:	e003      	b.n	801c530 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 801c528:	68bb      	ldr	r3, [r7, #8]
 801c52a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 801c52c:	2300      	movs	r3, #0
 801c52e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 801c530:	e030      	b.n	801c594 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 801c532:	683b      	ldr	r3, [r7, #0]
 801c534:	9300      	str	r3, [sp, #0]
 801c536:	697b      	ldr	r3, [r7, #20]
 801c538:	2200      	movs	r2, #0
 801c53a:	2180      	movs	r1, #128	; 0x80
 801c53c:	68f8      	ldr	r0, [r7, #12]
 801c53e:	f001 f827 	bl	801d590 <UART_WaitOnFlagUntilTimeout>
 801c542:	4603      	mov	r3, r0
 801c544:	2b00      	cmp	r3, #0
 801c546:	d005      	beq.n	801c554 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 801c548:	68fb      	ldr	r3, [r7, #12]
 801c54a:	2220      	movs	r2, #32
 801c54c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 801c550:	2303      	movs	r3, #3
 801c552:	e03d      	b.n	801c5d0 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 801c554:	69fb      	ldr	r3, [r7, #28]
 801c556:	2b00      	cmp	r3, #0
 801c558:	d10b      	bne.n	801c572 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 801c55a:	69bb      	ldr	r3, [r7, #24]
 801c55c:	881b      	ldrh	r3, [r3, #0]
 801c55e:	461a      	mov	r2, r3
 801c560:	68fb      	ldr	r3, [r7, #12]
 801c562:	681b      	ldr	r3, [r3, #0]
 801c564:	f3c2 0208 	ubfx	r2, r2, #0, #9
 801c568:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 801c56a:	69bb      	ldr	r3, [r7, #24]
 801c56c:	3302      	adds	r3, #2
 801c56e:	61bb      	str	r3, [r7, #24]
 801c570:	e007      	b.n	801c582 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 801c572:	69fb      	ldr	r3, [r7, #28]
 801c574:	781a      	ldrb	r2, [r3, #0]
 801c576:	68fb      	ldr	r3, [r7, #12]
 801c578:	681b      	ldr	r3, [r3, #0]
 801c57a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 801c57c:	69fb      	ldr	r3, [r7, #28]
 801c57e:	3301      	adds	r3, #1
 801c580:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 801c582:	68fb      	ldr	r3, [r7, #12]
 801c584:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 801c588:	b29b      	uxth	r3, r3
 801c58a:	3b01      	subs	r3, #1
 801c58c:	b29a      	uxth	r2, r3
 801c58e:	68fb      	ldr	r3, [r7, #12]
 801c590:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 801c594:	68fb      	ldr	r3, [r7, #12]
 801c596:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 801c59a:	b29b      	uxth	r3, r3
 801c59c:	2b00      	cmp	r3, #0
 801c59e:	d1c8      	bne.n	801c532 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 801c5a0:	683b      	ldr	r3, [r7, #0]
 801c5a2:	9300      	str	r3, [sp, #0]
 801c5a4:	697b      	ldr	r3, [r7, #20]
 801c5a6:	2200      	movs	r2, #0
 801c5a8:	2140      	movs	r1, #64	; 0x40
 801c5aa:	68f8      	ldr	r0, [r7, #12]
 801c5ac:	f000 fff0 	bl	801d590 <UART_WaitOnFlagUntilTimeout>
 801c5b0:	4603      	mov	r3, r0
 801c5b2:	2b00      	cmp	r3, #0
 801c5b4:	d005      	beq.n	801c5c2 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 801c5b6:	68fb      	ldr	r3, [r7, #12]
 801c5b8:	2220      	movs	r2, #32
 801c5ba:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 801c5be:	2303      	movs	r3, #3
 801c5c0:	e006      	b.n	801c5d0 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 801c5c2:	68fb      	ldr	r3, [r7, #12]
 801c5c4:	2220      	movs	r2, #32
 801c5c6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 801c5ca:	2300      	movs	r3, #0
 801c5cc:	e000      	b.n	801c5d0 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 801c5ce:	2302      	movs	r3, #2
  }
}
 801c5d0:	4618      	mov	r0, r3
 801c5d2:	3720      	adds	r7, #32
 801c5d4:	46bd      	mov	sp, r7
 801c5d6:	bd80      	pop	{r7, pc}

0801c5d8 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 801c5d8:	b580      	push	{r7, lr}
 801c5da:	b08a      	sub	sp, #40	; 0x28
 801c5dc:	af00      	add	r7, sp, #0
 801c5de:	60f8      	str	r0, [r7, #12]
 801c5e0:	60b9      	str	r1, [r7, #8]
 801c5e2:	4613      	mov	r3, r2
 801c5e4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 801c5e6:	68fb      	ldr	r3, [r7, #12]
 801c5e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801c5ec:	2b20      	cmp	r3, #32
 801c5ee:	d137      	bne.n	801c660 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 801c5f0:	68bb      	ldr	r3, [r7, #8]
 801c5f2:	2b00      	cmp	r3, #0
 801c5f4:	d002      	beq.n	801c5fc <HAL_UART_Receive_IT+0x24>
 801c5f6:	88fb      	ldrh	r3, [r7, #6]
 801c5f8:	2b00      	cmp	r3, #0
 801c5fa:	d101      	bne.n	801c600 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 801c5fc:	2301      	movs	r3, #1
 801c5fe:	e030      	b.n	801c662 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801c600:	68fb      	ldr	r3, [r7, #12]
 801c602:	2200      	movs	r2, #0
 801c604:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 801c606:	68fb      	ldr	r3, [r7, #12]
 801c608:	681b      	ldr	r3, [r3, #0]
 801c60a:	4a18      	ldr	r2, [pc, #96]	; (801c66c <HAL_UART_Receive_IT+0x94>)
 801c60c:	4293      	cmp	r3, r2
 801c60e:	d01f      	beq.n	801c650 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 801c610:	68fb      	ldr	r3, [r7, #12]
 801c612:	681b      	ldr	r3, [r3, #0]
 801c614:	685b      	ldr	r3, [r3, #4]
 801c616:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 801c61a:	2b00      	cmp	r3, #0
 801c61c:	d018      	beq.n	801c650 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 801c61e:	68fb      	ldr	r3, [r7, #12]
 801c620:	681b      	ldr	r3, [r3, #0]
 801c622:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801c624:	697b      	ldr	r3, [r7, #20]
 801c626:	e853 3f00 	ldrex	r3, [r3]
 801c62a:	613b      	str	r3, [r7, #16]
   return(result);
 801c62c:	693b      	ldr	r3, [r7, #16]
 801c62e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 801c632:	627b      	str	r3, [r7, #36]	; 0x24
 801c634:	68fb      	ldr	r3, [r7, #12]
 801c636:	681b      	ldr	r3, [r3, #0]
 801c638:	461a      	mov	r2, r3
 801c63a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c63c:	623b      	str	r3, [r7, #32]
 801c63e:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801c640:	69f9      	ldr	r1, [r7, #28]
 801c642:	6a3a      	ldr	r2, [r7, #32]
 801c644:	e841 2300 	strex	r3, r2, [r1]
 801c648:	61bb      	str	r3, [r7, #24]
   return(result);
 801c64a:	69bb      	ldr	r3, [r7, #24]
 801c64c:	2b00      	cmp	r3, #0
 801c64e:	d1e6      	bne.n	801c61e <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 801c650:	88fb      	ldrh	r3, [r7, #6]
 801c652:	461a      	mov	r2, r3
 801c654:	68b9      	ldr	r1, [r7, #8]
 801c656:	68f8      	ldr	r0, [r7, #12]
 801c658:	f001 f802 	bl	801d660 <UART_Start_Receive_IT>
 801c65c:	4603      	mov	r3, r0
 801c65e:	e000      	b.n	801c662 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 801c660:	2302      	movs	r3, #2
  }
}
 801c662:	4618      	mov	r0, r3
 801c664:	3728      	adds	r7, #40	; 0x28
 801c666:	46bd      	mov	sp, r7
 801c668:	bd80      	pop	{r7, pc}
 801c66a:	bf00      	nop
 801c66c:	40008000 	.word	0x40008000

0801c670 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 801c670:	b580      	push	{r7, lr}
 801c672:	b0ba      	sub	sp, #232	; 0xe8
 801c674:	af00      	add	r7, sp, #0
 801c676:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 801c678:	687b      	ldr	r3, [r7, #4]
 801c67a:	681b      	ldr	r3, [r3, #0]
 801c67c:	69db      	ldr	r3, [r3, #28]
 801c67e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 801c682:	687b      	ldr	r3, [r7, #4]
 801c684:	681b      	ldr	r3, [r3, #0]
 801c686:	681b      	ldr	r3, [r3, #0]
 801c688:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 801c68c:	687b      	ldr	r3, [r7, #4]
 801c68e:	681b      	ldr	r3, [r3, #0]
 801c690:	689b      	ldr	r3, [r3, #8]
 801c692:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 801c696:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 801c69a:	f640 030f 	movw	r3, #2063	; 0x80f
 801c69e:	4013      	ands	r3, r2
 801c6a0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 801c6a4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 801c6a8:	2b00      	cmp	r3, #0
 801c6aa:	d11b      	bne.n	801c6e4 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 801c6ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801c6b0:	f003 0320 	and.w	r3, r3, #32
 801c6b4:	2b00      	cmp	r3, #0
 801c6b6:	d015      	beq.n	801c6e4 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 801c6b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801c6bc:	f003 0320 	and.w	r3, r3, #32
 801c6c0:	2b00      	cmp	r3, #0
 801c6c2:	d105      	bne.n	801c6d0 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 801c6c4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 801c6c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801c6cc:	2b00      	cmp	r3, #0
 801c6ce:	d009      	beq.n	801c6e4 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 801c6d0:	687b      	ldr	r3, [r7, #4]
 801c6d2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801c6d4:	2b00      	cmp	r3, #0
 801c6d6:	f000 82e3 	beq.w	801cca0 <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 801c6da:	687b      	ldr	r3, [r7, #4]
 801c6dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801c6de:	6878      	ldr	r0, [r7, #4]
 801c6e0:	4798      	blx	r3
      }
      return;
 801c6e2:	e2dd      	b.n	801cca0 <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 801c6e4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 801c6e8:	2b00      	cmp	r3, #0
 801c6ea:	f000 8123 	beq.w	801c934 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 801c6ee:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 801c6f2:	4b8d      	ldr	r3, [pc, #564]	; (801c928 <HAL_UART_IRQHandler+0x2b8>)
 801c6f4:	4013      	ands	r3, r2
 801c6f6:	2b00      	cmp	r3, #0
 801c6f8:	d106      	bne.n	801c708 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 801c6fa:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 801c6fe:	4b8b      	ldr	r3, [pc, #556]	; (801c92c <HAL_UART_IRQHandler+0x2bc>)
 801c700:	4013      	ands	r3, r2
 801c702:	2b00      	cmp	r3, #0
 801c704:	f000 8116 	beq.w	801c934 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 801c708:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801c70c:	f003 0301 	and.w	r3, r3, #1
 801c710:	2b00      	cmp	r3, #0
 801c712:	d011      	beq.n	801c738 <HAL_UART_IRQHandler+0xc8>
 801c714:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801c718:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801c71c:	2b00      	cmp	r3, #0
 801c71e:	d00b      	beq.n	801c738 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 801c720:	687b      	ldr	r3, [r7, #4]
 801c722:	681b      	ldr	r3, [r3, #0]
 801c724:	2201      	movs	r2, #1
 801c726:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 801c728:	687b      	ldr	r3, [r7, #4]
 801c72a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801c72e:	f043 0201 	orr.w	r2, r3, #1
 801c732:	687b      	ldr	r3, [r7, #4]
 801c734:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 801c738:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801c73c:	f003 0302 	and.w	r3, r3, #2
 801c740:	2b00      	cmp	r3, #0
 801c742:	d011      	beq.n	801c768 <HAL_UART_IRQHandler+0xf8>
 801c744:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 801c748:	f003 0301 	and.w	r3, r3, #1
 801c74c:	2b00      	cmp	r3, #0
 801c74e:	d00b      	beq.n	801c768 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 801c750:	687b      	ldr	r3, [r7, #4]
 801c752:	681b      	ldr	r3, [r3, #0]
 801c754:	2202      	movs	r2, #2
 801c756:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 801c758:	687b      	ldr	r3, [r7, #4]
 801c75a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801c75e:	f043 0204 	orr.w	r2, r3, #4
 801c762:	687b      	ldr	r3, [r7, #4]
 801c764:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 801c768:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801c76c:	f003 0304 	and.w	r3, r3, #4
 801c770:	2b00      	cmp	r3, #0
 801c772:	d011      	beq.n	801c798 <HAL_UART_IRQHandler+0x128>
 801c774:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 801c778:	f003 0301 	and.w	r3, r3, #1
 801c77c:	2b00      	cmp	r3, #0
 801c77e:	d00b      	beq.n	801c798 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 801c780:	687b      	ldr	r3, [r7, #4]
 801c782:	681b      	ldr	r3, [r3, #0]
 801c784:	2204      	movs	r2, #4
 801c786:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 801c788:	687b      	ldr	r3, [r7, #4]
 801c78a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801c78e:	f043 0202 	orr.w	r2, r3, #2
 801c792:	687b      	ldr	r3, [r7, #4]
 801c794:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 801c798:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801c79c:	f003 0308 	and.w	r3, r3, #8
 801c7a0:	2b00      	cmp	r3, #0
 801c7a2:	d017      	beq.n	801c7d4 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 801c7a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801c7a8:	f003 0320 	and.w	r3, r3, #32
 801c7ac:	2b00      	cmp	r3, #0
 801c7ae:	d105      	bne.n	801c7bc <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 801c7b0:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 801c7b4:	4b5c      	ldr	r3, [pc, #368]	; (801c928 <HAL_UART_IRQHandler+0x2b8>)
 801c7b6:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 801c7b8:	2b00      	cmp	r3, #0
 801c7ba:	d00b      	beq.n	801c7d4 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 801c7bc:	687b      	ldr	r3, [r7, #4]
 801c7be:	681b      	ldr	r3, [r3, #0]
 801c7c0:	2208      	movs	r2, #8
 801c7c2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 801c7c4:	687b      	ldr	r3, [r7, #4]
 801c7c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801c7ca:	f043 0208 	orr.w	r2, r3, #8
 801c7ce:	687b      	ldr	r3, [r7, #4]
 801c7d0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 801c7d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801c7d8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801c7dc:	2b00      	cmp	r3, #0
 801c7de:	d012      	beq.n	801c806 <HAL_UART_IRQHandler+0x196>
 801c7e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801c7e4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 801c7e8:	2b00      	cmp	r3, #0
 801c7ea:	d00c      	beq.n	801c806 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 801c7ec:	687b      	ldr	r3, [r7, #4]
 801c7ee:	681b      	ldr	r3, [r3, #0]
 801c7f0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801c7f4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 801c7f6:	687b      	ldr	r3, [r7, #4]
 801c7f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801c7fc:	f043 0220 	orr.w	r2, r3, #32
 801c800:	687b      	ldr	r3, [r7, #4]
 801c802:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 801c806:	687b      	ldr	r3, [r7, #4]
 801c808:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801c80c:	2b00      	cmp	r3, #0
 801c80e:	f000 8249 	beq.w	801cca4 <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 801c812:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801c816:	f003 0320 	and.w	r3, r3, #32
 801c81a:	2b00      	cmp	r3, #0
 801c81c:	d013      	beq.n	801c846 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 801c81e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801c822:	f003 0320 	and.w	r3, r3, #32
 801c826:	2b00      	cmp	r3, #0
 801c828:	d105      	bne.n	801c836 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 801c82a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 801c82e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801c832:	2b00      	cmp	r3, #0
 801c834:	d007      	beq.n	801c846 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 801c836:	687b      	ldr	r3, [r7, #4]
 801c838:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801c83a:	2b00      	cmp	r3, #0
 801c83c:	d003      	beq.n	801c846 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 801c83e:	687b      	ldr	r3, [r7, #4]
 801c840:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801c842:	6878      	ldr	r0, [r7, #4]
 801c844:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 801c846:	687b      	ldr	r3, [r7, #4]
 801c848:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801c84c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 801c850:	687b      	ldr	r3, [r7, #4]
 801c852:	681b      	ldr	r3, [r3, #0]
 801c854:	689b      	ldr	r3, [r3, #8]
 801c856:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801c85a:	2b40      	cmp	r3, #64	; 0x40
 801c85c:	d005      	beq.n	801c86a <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 801c85e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 801c862:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 801c866:	2b00      	cmp	r3, #0
 801c868:	d054      	beq.n	801c914 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 801c86a:	6878      	ldr	r0, [r7, #4]
 801c86c:	f001 f81a 	bl	801d8a4 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801c870:	687b      	ldr	r3, [r7, #4]
 801c872:	681b      	ldr	r3, [r3, #0]
 801c874:	689b      	ldr	r3, [r3, #8]
 801c876:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801c87a:	2b40      	cmp	r3, #64	; 0x40
 801c87c:	d146      	bne.n	801c90c <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801c87e:	687b      	ldr	r3, [r7, #4]
 801c880:	681b      	ldr	r3, [r3, #0]
 801c882:	3308      	adds	r3, #8
 801c884:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801c888:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801c88c:	e853 3f00 	ldrex	r3, [r3]
 801c890:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 801c894:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 801c898:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801c89c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 801c8a0:	687b      	ldr	r3, [r7, #4]
 801c8a2:	681b      	ldr	r3, [r3, #0]
 801c8a4:	3308      	adds	r3, #8
 801c8a6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 801c8aa:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 801c8ae:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801c8b2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 801c8b6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 801c8ba:	e841 2300 	strex	r3, r2, [r1]
 801c8be:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 801c8c2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 801c8c6:	2b00      	cmp	r3, #0
 801c8c8:	d1d9      	bne.n	801c87e <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 801c8ca:	687b      	ldr	r3, [r7, #4]
 801c8cc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801c8d0:	2b00      	cmp	r3, #0
 801c8d2:	d017      	beq.n	801c904 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 801c8d4:	687b      	ldr	r3, [r7, #4]
 801c8d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801c8da:	4a15      	ldr	r2, [pc, #84]	; (801c930 <HAL_UART_IRQHandler+0x2c0>)
 801c8dc:	641a      	str	r2, [r3, #64]	; 0x40

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 801c8de:	687b      	ldr	r3, [r7, #4]
 801c8e0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801c8e4:	4618      	mov	r0, r3
 801c8e6:	f7f9 fce0 	bl	80162aa <HAL_DMA_Abort_IT>
 801c8ea:	4603      	mov	r3, r0
 801c8ec:	2b00      	cmp	r3, #0
 801c8ee:	d019      	beq.n	801c924 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 801c8f0:	687b      	ldr	r3, [r7, #4]
 801c8f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801c8f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801c8f8:	687a      	ldr	r2, [r7, #4]
 801c8fa:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 801c8fe:	4610      	mov	r0, r2
 801c900:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801c902:	e00f      	b.n	801c924 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 801c904:	6878      	ldr	r0, [r7, #4]
 801c906:	f000 f9e1 	bl	801cccc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801c90a:	e00b      	b.n	801c924 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 801c90c:	6878      	ldr	r0, [r7, #4]
 801c90e:	f000 f9dd 	bl	801cccc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801c912:	e007      	b.n	801c924 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 801c914:	6878      	ldr	r0, [r7, #4]
 801c916:	f000 f9d9 	bl	801cccc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 801c91a:	687b      	ldr	r3, [r7, #4]
 801c91c:	2200      	movs	r2, #0
 801c91e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 801c922:	e1bf      	b.n	801cca4 <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801c924:	bf00      	nop
    return;
 801c926:	e1bd      	b.n	801cca4 <HAL_UART_IRQHandler+0x634>
 801c928:	10000001 	.word	0x10000001
 801c92c:	04000120 	.word	0x04000120
 801c930:	0801d971 	.word	0x0801d971

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801c934:	687b      	ldr	r3, [r7, #4]
 801c936:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801c938:	2b01      	cmp	r3, #1
 801c93a:	f040 8153 	bne.w	801cbe4 <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 801c93e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801c942:	f003 0310 	and.w	r3, r3, #16
 801c946:	2b00      	cmp	r3, #0
 801c948:	f000 814c 	beq.w	801cbe4 <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 801c94c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801c950:	f003 0310 	and.w	r3, r3, #16
 801c954:	2b00      	cmp	r3, #0
 801c956:	f000 8145 	beq.w	801cbe4 <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 801c95a:	687b      	ldr	r3, [r7, #4]
 801c95c:	681b      	ldr	r3, [r3, #0]
 801c95e:	2210      	movs	r2, #16
 801c960:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801c962:	687b      	ldr	r3, [r7, #4]
 801c964:	681b      	ldr	r3, [r3, #0]
 801c966:	689b      	ldr	r3, [r3, #8]
 801c968:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801c96c:	2b40      	cmp	r3, #64	; 0x40
 801c96e:	f040 80bb 	bne.w	801cae8 <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 801c972:	687b      	ldr	r3, [r7, #4]
 801c974:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801c978:	681b      	ldr	r3, [r3, #0]
 801c97a:	685b      	ldr	r3, [r3, #4]
 801c97c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 801c980:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 801c984:	2b00      	cmp	r3, #0
 801c986:	f000 818f 	beq.w	801cca8 <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 801c98a:	687b      	ldr	r3, [r7, #4]
 801c98c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 801c990:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 801c994:	429a      	cmp	r2, r3
 801c996:	f080 8187 	bcs.w	801cca8 <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 801c99a:	687b      	ldr	r3, [r7, #4]
 801c99c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 801c9a0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 801c9a4:	687b      	ldr	r3, [r7, #4]
 801c9a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801c9aa:	681b      	ldr	r3, [r3, #0]
 801c9ac:	681b      	ldr	r3, [r3, #0]
 801c9ae:	f003 0320 	and.w	r3, r3, #32
 801c9b2:	2b00      	cmp	r3, #0
 801c9b4:	f040 8087 	bne.w	801cac6 <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 801c9b8:	687b      	ldr	r3, [r7, #4]
 801c9ba:	681b      	ldr	r3, [r3, #0]
 801c9bc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801c9c0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 801c9c4:	e853 3f00 	ldrex	r3, [r3]
 801c9c8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 801c9cc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 801c9d0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801c9d4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 801c9d8:	687b      	ldr	r3, [r7, #4]
 801c9da:	681b      	ldr	r3, [r3, #0]
 801c9dc:	461a      	mov	r2, r3
 801c9de:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 801c9e2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 801c9e6:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801c9ea:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 801c9ee:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 801c9f2:	e841 2300 	strex	r3, r2, [r1]
 801c9f6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 801c9fa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801c9fe:	2b00      	cmp	r3, #0
 801ca00:	d1da      	bne.n	801c9b8 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801ca02:	687b      	ldr	r3, [r7, #4]
 801ca04:	681b      	ldr	r3, [r3, #0]
 801ca06:	3308      	adds	r3, #8
 801ca08:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801ca0a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801ca0c:	e853 3f00 	ldrex	r3, [r3]
 801ca10:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 801ca12:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801ca14:	f023 0301 	bic.w	r3, r3, #1
 801ca18:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 801ca1c:	687b      	ldr	r3, [r7, #4]
 801ca1e:	681b      	ldr	r3, [r3, #0]
 801ca20:	3308      	adds	r3, #8
 801ca22:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 801ca26:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 801ca2a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801ca2c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 801ca2e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 801ca32:	e841 2300 	strex	r3, r2, [r1]
 801ca36:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 801ca38:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801ca3a:	2b00      	cmp	r3, #0
 801ca3c:	d1e1      	bne.n	801ca02 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801ca3e:	687b      	ldr	r3, [r7, #4]
 801ca40:	681b      	ldr	r3, [r3, #0]
 801ca42:	3308      	adds	r3, #8
 801ca44:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801ca46:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801ca48:	e853 3f00 	ldrex	r3, [r3]
 801ca4c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 801ca4e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801ca50:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801ca54:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 801ca58:	687b      	ldr	r3, [r7, #4]
 801ca5a:	681b      	ldr	r3, [r3, #0]
 801ca5c:	3308      	adds	r3, #8
 801ca5e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 801ca62:	66fa      	str	r2, [r7, #108]	; 0x6c
 801ca64:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801ca66:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 801ca68:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 801ca6a:	e841 2300 	strex	r3, r2, [r1]
 801ca6e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 801ca70:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801ca72:	2b00      	cmp	r3, #0
 801ca74:	d1e3      	bne.n	801ca3e <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 801ca76:	687b      	ldr	r3, [r7, #4]
 801ca78:	2220      	movs	r2, #32
 801ca7a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801ca7e:	687b      	ldr	r3, [r7, #4]
 801ca80:	2200      	movs	r2, #0
 801ca82:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801ca84:	687b      	ldr	r3, [r7, #4]
 801ca86:	681b      	ldr	r3, [r3, #0]
 801ca88:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801ca8a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801ca8c:	e853 3f00 	ldrex	r3, [r3]
 801ca90:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 801ca92:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801ca94:	f023 0310 	bic.w	r3, r3, #16
 801ca98:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 801ca9c:	687b      	ldr	r3, [r7, #4]
 801ca9e:	681b      	ldr	r3, [r3, #0]
 801caa0:	461a      	mov	r2, r3
 801caa2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 801caa6:	65bb      	str	r3, [r7, #88]	; 0x58
 801caa8:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801caaa:	6d79      	ldr	r1, [r7, #84]	; 0x54
 801caac:	6dba      	ldr	r2, [r7, #88]	; 0x58
 801caae:	e841 2300 	strex	r3, r2, [r1]
 801cab2:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 801cab4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801cab6:	2b00      	cmp	r3, #0
 801cab8:	d1e4      	bne.n	801ca84 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 801caba:	687b      	ldr	r3, [r7, #4]
 801cabc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801cac0:	4618      	mov	r0, r3
 801cac2:	f7f9 fb96 	bl	80161f2 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 801cac6:	687b      	ldr	r3, [r7, #4]
 801cac8:	2202      	movs	r2, #2
 801caca:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 801cacc:	687b      	ldr	r3, [r7, #4]
 801cace:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 801cad2:	687b      	ldr	r3, [r7, #4]
 801cad4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 801cad8:	b29b      	uxth	r3, r3
 801cada:	1ad3      	subs	r3, r2, r3
 801cadc:	b29b      	uxth	r3, r3
 801cade:	4619      	mov	r1, r3
 801cae0:	6878      	ldr	r0, [r7, #4]
 801cae2:	f000 f8fd 	bl	801cce0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 801cae6:	e0df      	b.n	801cca8 <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 801cae8:	687b      	ldr	r3, [r7, #4]
 801caea:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 801caee:	687b      	ldr	r3, [r7, #4]
 801caf0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 801caf4:	b29b      	uxth	r3, r3
 801caf6:	1ad3      	subs	r3, r2, r3
 801caf8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 801cafc:	687b      	ldr	r3, [r7, #4]
 801cafe:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 801cb02:	b29b      	uxth	r3, r3
 801cb04:	2b00      	cmp	r3, #0
 801cb06:	f000 80d1 	beq.w	801ccac <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 801cb0a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 801cb0e:	2b00      	cmp	r3, #0
 801cb10:	f000 80cc 	beq.w	801ccac <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 801cb14:	687b      	ldr	r3, [r7, #4]
 801cb16:	681b      	ldr	r3, [r3, #0]
 801cb18:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801cb1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801cb1c:	e853 3f00 	ldrex	r3, [r3]
 801cb20:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 801cb22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801cb24:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 801cb28:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 801cb2c:	687b      	ldr	r3, [r7, #4]
 801cb2e:	681b      	ldr	r3, [r3, #0]
 801cb30:	461a      	mov	r2, r3
 801cb32:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 801cb36:	647b      	str	r3, [r7, #68]	; 0x44
 801cb38:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801cb3a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 801cb3c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801cb3e:	e841 2300 	strex	r3, r2, [r1]
 801cb42:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 801cb44:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801cb46:	2b00      	cmp	r3, #0
 801cb48:	d1e4      	bne.n	801cb14 <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 801cb4a:	687b      	ldr	r3, [r7, #4]
 801cb4c:	681b      	ldr	r3, [r3, #0]
 801cb4e:	3308      	adds	r3, #8
 801cb50:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801cb52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801cb54:	e853 3f00 	ldrex	r3, [r3]
 801cb58:	623b      	str	r3, [r7, #32]
   return(result);
 801cb5a:	6a3b      	ldr	r3, [r7, #32]
 801cb5c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 801cb60:	f023 0301 	bic.w	r3, r3, #1
 801cb64:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 801cb68:	687b      	ldr	r3, [r7, #4]
 801cb6a:	681b      	ldr	r3, [r3, #0]
 801cb6c:	3308      	adds	r3, #8
 801cb6e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 801cb72:	633a      	str	r2, [r7, #48]	; 0x30
 801cb74:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801cb76:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801cb78:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801cb7a:	e841 2300 	strex	r3, r2, [r1]
 801cb7e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 801cb80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801cb82:	2b00      	cmp	r3, #0
 801cb84:	d1e1      	bne.n	801cb4a <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 801cb86:	687b      	ldr	r3, [r7, #4]
 801cb88:	2220      	movs	r2, #32
 801cb8a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801cb8e:	687b      	ldr	r3, [r7, #4]
 801cb90:	2200      	movs	r2, #0
 801cb92:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 801cb94:	687b      	ldr	r3, [r7, #4]
 801cb96:	2200      	movs	r2, #0
 801cb98:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801cb9a:	687b      	ldr	r3, [r7, #4]
 801cb9c:	681b      	ldr	r3, [r3, #0]
 801cb9e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801cba0:	693b      	ldr	r3, [r7, #16]
 801cba2:	e853 3f00 	ldrex	r3, [r3]
 801cba6:	60fb      	str	r3, [r7, #12]
   return(result);
 801cba8:	68fb      	ldr	r3, [r7, #12]
 801cbaa:	f023 0310 	bic.w	r3, r3, #16
 801cbae:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 801cbb2:	687b      	ldr	r3, [r7, #4]
 801cbb4:	681b      	ldr	r3, [r3, #0]
 801cbb6:	461a      	mov	r2, r3
 801cbb8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 801cbbc:	61fb      	str	r3, [r7, #28]
 801cbbe:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801cbc0:	69b9      	ldr	r1, [r7, #24]
 801cbc2:	69fa      	ldr	r2, [r7, #28]
 801cbc4:	e841 2300 	strex	r3, r2, [r1]
 801cbc8:	617b      	str	r3, [r7, #20]
   return(result);
 801cbca:	697b      	ldr	r3, [r7, #20]
 801cbcc:	2b00      	cmp	r3, #0
 801cbce:	d1e4      	bne.n	801cb9a <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 801cbd0:	687b      	ldr	r3, [r7, #4]
 801cbd2:	2202      	movs	r2, #2
 801cbd4:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 801cbd6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 801cbda:	4619      	mov	r1, r3
 801cbdc:	6878      	ldr	r0, [r7, #4]
 801cbde:	f000 f87f 	bl	801cce0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 801cbe2:	e063      	b.n	801ccac <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 801cbe4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801cbe8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 801cbec:	2b00      	cmp	r3, #0
 801cbee:	d00e      	beq.n	801cc0e <HAL_UART_IRQHandler+0x59e>
 801cbf0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 801cbf4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 801cbf8:	2b00      	cmp	r3, #0
 801cbfa:	d008      	beq.n	801cc0e <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 801cbfc:	687b      	ldr	r3, [r7, #4]
 801cbfe:	681b      	ldr	r3, [r3, #0]
 801cc00:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 801cc04:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 801cc06:	6878      	ldr	r0, [r7, #4]
 801cc08:	f001 fc10 	bl	801e42c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 801cc0c:	e051      	b.n	801ccb2 <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 801cc0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801cc12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801cc16:	2b00      	cmp	r3, #0
 801cc18:	d014      	beq.n	801cc44 <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 801cc1a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801cc1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801cc22:	2b00      	cmp	r3, #0
 801cc24:	d105      	bne.n	801cc32 <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 801cc26:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 801cc2a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 801cc2e:	2b00      	cmp	r3, #0
 801cc30:	d008      	beq.n	801cc44 <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 801cc32:	687b      	ldr	r3, [r7, #4]
 801cc34:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801cc36:	2b00      	cmp	r3, #0
 801cc38:	d03a      	beq.n	801ccb0 <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 801cc3a:	687b      	ldr	r3, [r7, #4]
 801cc3c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801cc3e:	6878      	ldr	r0, [r7, #4]
 801cc40:	4798      	blx	r3
    }
    return;
 801cc42:	e035      	b.n	801ccb0 <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 801cc44:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801cc48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801cc4c:	2b00      	cmp	r3, #0
 801cc4e:	d009      	beq.n	801cc64 <HAL_UART_IRQHandler+0x5f4>
 801cc50:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801cc54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801cc58:	2b00      	cmp	r3, #0
 801cc5a:	d003      	beq.n	801cc64 <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 801cc5c:	6878      	ldr	r0, [r7, #4]
 801cc5e:	f000 fe9d 	bl	801d99c <UART_EndTransmit_IT>
    return;
 801cc62:	e026      	b.n	801ccb2 <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 801cc64:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801cc68:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 801cc6c:	2b00      	cmp	r3, #0
 801cc6e:	d009      	beq.n	801cc84 <HAL_UART_IRQHandler+0x614>
 801cc70:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801cc74:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 801cc78:	2b00      	cmp	r3, #0
 801cc7a:	d003      	beq.n	801cc84 <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 801cc7c:	6878      	ldr	r0, [r7, #4]
 801cc7e:	f001 fbe9 	bl	801e454 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 801cc82:	e016      	b.n	801ccb2 <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 801cc84:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801cc88:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 801cc8c:	2b00      	cmp	r3, #0
 801cc8e:	d010      	beq.n	801ccb2 <HAL_UART_IRQHandler+0x642>
 801cc90:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801cc94:	2b00      	cmp	r3, #0
 801cc96:	da0c      	bge.n	801ccb2 <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 801cc98:	6878      	ldr	r0, [r7, #4]
 801cc9a:	f001 fbd1 	bl	801e440 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 801cc9e:	e008      	b.n	801ccb2 <HAL_UART_IRQHandler+0x642>
      return;
 801cca0:	bf00      	nop
 801cca2:	e006      	b.n	801ccb2 <HAL_UART_IRQHandler+0x642>
    return;
 801cca4:	bf00      	nop
 801cca6:	e004      	b.n	801ccb2 <HAL_UART_IRQHandler+0x642>
      return;
 801cca8:	bf00      	nop
 801ccaa:	e002      	b.n	801ccb2 <HAL_UART_IRQHandler+0x642>
      return;
 801ccac:	bf00      	nop
 801ccae:	e000      	b.n	801ccb2 <HAL_UART_IRQHandler+0x642>
    return;
 801ccb0:	bf00      	nop
  }
}
 801ccb2:	37e8      	adds	r7, #232	; 0xe8
 801ccb4:	46bd      	mov	sp, r7
 801ccb6:	bd80      	pop	{r7, pc}

0801ccb8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 801ccb8:	b480      	push	{r7}
 801ccba:	b083      	sub	sp, #12
 801ccbc:	af00      	add	r7, sp, #0
 801ccbe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 801ccc0:	bf00      	nop
 801ccc2:	370c      	adds	r7, #12
 801ccc4:	46bd      	mov	sp, r7
 801ccc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ccca:	4770      	bx	lr

0801cccc <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 801cccc:	b480      	push	{r7}
 801ccce:	b083      	sub	sp, #12
 801ccd0:	af00      	add	r7, sp, #0
 801ccd2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 801ccd4:	bf00      	nop
 801ccd6:	370c      	adds	r7, #12
 801ccd8:	46bd      	mov	sp, r7
 801ccda:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ccde:	4770      	bx	lr

0801cce0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 801cce0:	b480      	push	{r7}
 801cce2:	b083      	sub	sp, #12
 801cce4:	af00      	add	r7, sp, #0
 801cce6:	6078      	str	r0, [r7, #4]
 801cce8:	460b      	mov	r3, r1
 801ccea:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 801ccec:	bf00      	nop
 801ccee:	370c      	adds	r7, #12
 801ccf0:	46bd      	mov	sp, r7
 801ccf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ccf6:	4770      	bx	lr

0801ccf8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 801ccf8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 801ccfc:	b08c      	sub	sp, #48	; 0x30
 801ccfe:	af00      	add	r7, sp, #0
 801cd00:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 801cd02:	2300      	movs	r3, #0
 801cd04:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 801cd08:	697b      	ldr	r3, [r7, #20]
 801cd0a:	689a      	ldr	r2, [r3, #8]
 801cd0c:	697b      	ldr	r3, [r7, #20]
 801cd0e:	691b      	ldr	r3, [r3, #16]
 801cd10:	431a      	orrs	r2, r3
 801cd12:	697b      	ldr	r3, [r7, #20]
 801cd14:	695b      	ldr	r3, [r3, #20]
 801cd16:	431a      	orrs	r2, r3
 801cd18:	697b      	ldr	r3, [r7, #20]
 801cd1a:	69db      	ldr	r3, [r3, #28]
 801cd1c:	4313      	orrs	r3, r2
 801cd1e:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 801cd20:	697b      	ldr	r3, [r7, #20]
 801cd22:	681b      	ldr	r3, [r3, #0]
 801cd24:	681a      	ldr	r2, [r3, #0]
 801cd26:	4baa      	ldr	r3, [pc, #680]	; (801cfd0 <UART_SetConfig+0x2d8>)
 801cd28:	4013      	ands	r3, r2
 801cd2a:	697a      	ldr	r2, [r7, #20]
 801cd2c:	6812      	ldr	r2, [r2, #0]
 801cd2e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801cd30:	430b      	orrs	r3, r1
 801cd32:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 801cd34:	697b      	ldr	r3, [r7, #20]
 801cd36:	681b      	ldr	r3, [r3, #0]
 801cd38:	685b      	ldr	r3, [r3, #4]
 801cd3a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 801cd3e:	697b      	ldr	r3, [r7, #20]
 801cd40:	68da      	ldr	r2, [r3, #12]
 801cd42:	697b      	ldr	r3, [r7, #20]
 801cd44:	681b      	ldr	r3, [r3, #0]
 801cd46:	430a      	orrs	r2, r1
 801cd48:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 801cd4a:	697b      	ldr	r3, [r7, #20]
 801cd4c:	699b      	ldr	r3, [r3, #24]
 801cd4e:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 801cd50:	697b      	ldr	r3, [r7, #20]
 801cd52:	681b      	ldr	r3, [r3, #0]
 801cd54:	4a9f      	ldr	r2, [pc, #636]	; (801cfd4 <UART_SetConfig+0x2dc>)
 801cd56:	4293      	cmp	r3, r2
 801cd58:	d004      	beq.n	801cd64 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 801cd5a:	697b      	ldr	r3, [r7, #20]
 801cd5c:	6a1b      	ldr	r3, [r3, #32]
 801cd5e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801cd60:	4313      	orrs	r3, r2
 801cd62:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 801cd64:	697b      	ldr	r3, [r7, #20]
 801cd66:	681b      	ldr	r3, [r3, #0]
 801cd68:	689b      	ldr	r3, [r3, #8]
 801cd6a:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 801cd6e:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 801cd72:	697a      	ldr	r2, [r7, #20]
 801cd74:	6812      	ldr	r2, [r2, #0]
 801cd76:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801cd78:	430b      	orrs	r3, r1
 801cd7a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 801cd7c:	697b      	ldr	r3, [r7, #20]
 801cd7e:	681b      	ldr	r3, [r3, #0]
 801cd80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801cd82:	f023 010f 	bic.w	r1, r3, #15
 801cd86:	697b      	ldr	r3, [r7, #20]
 801cd88:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801cd8a:	697b      	ldr	r3, [r7, #20]
 801cd8c:	681b      	ldr	r3, [r3, #0]
 801cd8e:	430a      	orrs	r2, r1
 801cd90:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 801cd92:	697b      	ldr	r3, [r7, #20]
 801cd94:	681b      	ldr	r3, [r3, #0]
 801cd96:	4a90      	ldr	r2, [pc, #576]	; (801cfd8 <UART_SetConfig+0x2e0>)
 801cd98:	4293      	cmp	r3, r2
 801cd9a:	d125      	bne.n	801cde8 <UART_SetConfig+0xf0>
 801cd9c:	4b8f      	ldr	r3, [pc, #572]	; (801cfdc <UART_SetConfig+0x2e4>)
 801cd9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801cda2:	f003 0303 	and.w	r3, r3, #3
 801cda6:	2b03      	cmp	r3, #3
 801cda8:	d81a      	bhi.n	801cde0 <UART_SetConfig+0xe8>
 801cdaa:	a201      	add	r2, pc, #4	; (adr r2, 801cdb0 <UART_SetConfig+0xb8>)
 801cdac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801cdb0:	0801cdc1 	.word	0x0801cdc1
 801cdb4:	0801cdd1 	.word	0x0801cdd1
 801cdb8:	0801cdc9 	.word	0x0801cdc9
 801cdbc:	0801cdd9 	.word	0x0801cdd9
 801cdc0:	2301      	movs	r3, #1
 801cdc2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801cdc6:	e116      	b.n	801cff6 <UART_SetConfig+0x2fe>
 801cdc8:	2302      	movs	r3, #2
 801cdca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801cdce:	e112      	b.n	801cff6 <UART_SetConfig+0x2fe>
 801cdd0:	2304      	movs	r3, #4
 801cdd2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801cdd6:	e10e      	b.n	801cff6 <UART_SetConfig+0x2fe>
 801cdd8:	2308      	movs	r3, #8
 801cdda:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801cdde:	e10a      	b.n	801cff6 <UART_SetConfig+0x2fe>
 801cde0:	2310      	movs	r3, #16
 801cde2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801cde6:	e106      	b.n	801cff6 <UART_SetConfig+0x2fe>
 801cde8:	697b      	ldr	r3, [r7, #20]
 801cdea:	681b      	ldr	r3, [r3, #0]
 801cdec:	4a7c      	ldr	r2, [pc, #496]	; (801cfe0 <UART_SetConfig+0x2e8>)
 801cdee:	4293      	cmp	r3, r2
 801cdf0:	d138      	bne.n	801ce64 <UART_SetConfig+0x16c>
 801cdf2:	4b7a      	ldr	r3, [pc, #488]	; (801cfdc <UART_SetConfig+0x2e4>)
 801cdf4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801cdf8:	f003 030c 	and.w	r3, r3, #12
 801cdfc:	2b0c      	cmp	r3, #12
 801cdfe:	d82d      	bhi.n	801ce5c <UART_SetConfig+0x164>
 801ce00:	a201      	add	r2, pc, #4	; (adr r2, 801ce08 <UART_SetConfig+0x110>)
 801ce02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801ce06:	bf00      	nop
 801ce08:	0801ce3d 	.word	0x0801ce3d
 801ce0c:	0801ce5d 	.word	0x0801ce5d
 801ce10:	0801ce5d 	.word	0x0801ce5d
 801ce14:	0801ce5d 	.word	0x0801ce5d
 801ce18:	0801ce4d 	.word	0x0801ce4d
 801ce1c:	0801ce5d 	.word	0x0801ce5d
 801ce20:	0801ce5d 	.word	0x0801ce5d
 801ce24:	0801ce5d 	.word	0x0801ce5d
 801ce28:	0801ce45 	.word	0x0801ce45
 801ce2c:	0801ce5d 	.word	0x0801ce5d
 801ce30:	0801ce5d 	.word	0x0801ce5d
 801ce34:	0801ce5d 	.word	0x0801ce5d
 801ce38:	0801ce55 	.word	0x0801ce55
 801ce3c:	2300      	movs	r3, #0
 801ce3e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801ce42:	e0d8      	b.n	801cff6 <UART_SetConfig+0x2fe>
 801ce44:	2302      	movs	r3, #2
 801ce46:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801ce4a:	e0d4      	b.n	801cff6 <UART_SetConfig+0x2fe>
 801ce4c:	2304      	movs	r3, #4
 801ce4e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801ce52:	e0d0      	b.n	801cff6 <UART_SetConfig+0x2fe>
 801ce54:	2308      	movs	r3, #8
 801ce56:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801ce5a:	e0cc      	b.n	801cff6 <UART_SetConfig+0x2fe>
 801ce5c:	2310      	movs	r3, #16
 801ce5e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801ce62:	e0c8      	b.n	801cff6 <UART_SetConfig+0x2fe>
 801ce64:	697b      	ldr	r3, [r7, #20]
 801ce66:	681b      	ldr	r3, [r3, #0]
 801ce68:	4a5e      	ldr	r2, [pc, #376]	; (801cfe4 <UART_SetConfig+0x2ec>)
 801ce6a:	4293      	cmp	r3, r2
 801ce6c:	d125      	bne.n	801ceba <UART_SetConfig+0x1c2>
 801ce6e:	4b5b      	ldr	r3, [pc, #364]	; (801cfdc <UART_SetConfig+0x2e4>)
 801ce70:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801ce74:	f003 0330 	and.w	r3, r3, #48	; 0x30
 801ce78:	2b30      	cmp	r3, #48	; 0x30
 801ce7a:	d016      	beq.n	801ceaa <UART_SetConfig+0x1b2>
 801ce7c:	2b30      	cmp	r3, #48	; 0x30
 801ce7e:	d818      	bhi.n	801ceb2 <UART_SetConfig+0x1ba>
 801ce80:	2b20      	cmp	r3, #32
 801ce82:	d00a      	beq.n	801ce9a <UART_SetConfig+0x1a2>
 801ce84:	2b20      	cmp	r3, #32
 801ce86:	d814      	bhi.n	801ceb2 <UART_SetConfig+0x1ba>
 801ce88:	2b00      	cmp	r3, #0
 801ce8a:	d002      	beq.n	801ce92 <UART_SetConfig+0x19a>
 801ce8c:	2b10      	cmp	r3, #16
 801ce8e:	d008      	beq.n	801cea2 <UART_SetConfig+0x1aa>
 801ce90:	e00f      	b.n	801ceb2 <UART_SetConfig+0x1ba>
 801ce92:	2300      	movs	r3, #0
 801ce94:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801ce98:	e0ad      	b.n	801cff6 <UART_SetConfig+0x2fe>
 801ce9a:	2302      	movs	r3, #2
 801ce9c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801cea0:	e0a9      	b.n	801cff6 <UART_SetConfig+0x2fe>
 801cea2:	2304      	movs	r3, #4
 801cea4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801cea8:	e0a5      	b.n	801cff6 <UART_SetConfig+0x2fe>
 801ceaa:	2308      	movs	r3, #8
 801ceac:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801ceb0:	e0a1      	b.n	801cff6 <UART_SetConfig+0x2fe>
 801ceb2:	2310      	movs	r3, #16
 801ceb4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801ceb8:	e09d      	b.n	801cff6 <UART_SetConfig+0x2fe>
 801ceba:	697b      	ldr	r3, [r7, #20]
 801cebc:	681b      	ldr	r3, [r3, #0]
 801cebe:	4a4a      	ldr	r2, [pc, #296]	; (801cfe8 <UART_SetConfig+0x2f0>)
 801cec0:	4293      	cmp	r3, r2
 801cec2:	d125      	bne.n	801cf10 <UART_SetConfig+0x218>
 801cec4:	4b45      	ldr	r3, [pc, #276]	; (801cfdc <UART_SetConfig+0x2e4>)
 801cec6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801ceca:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 801cece:	2bc0      	cmp	r3, #192	; 0xc0
 801ced0:	d016      	beq.n	801cf00 <UART_SetConfig+0x208>
 801ced2:	2bc0      	cmp	r3, #192	; 0xc0
 801ced4:	d818      	bhi.n	801cf08 <UART_SetConfig+0x210>
 801ced6:	2b80      	cmp	r3, #128	; 0x80
 801ced8:	d00a      	beq.n	801cef0 <UART_SetConfig+0x1f8>
 801ceda:	2b80      	cmp	r3, #128	; 0x80
 801cedc:	d814      	bhi.n	801cf08 <UART_SetConfig+0x210>
 801cede:	2b00      	cmp	r3, #0
 801cee0:	d002      	beq.n	801cee8 <UART_SetConfig+0x1f0>
 801cee2:	2b40      	cmp	r3, #64	; 0x40
 801cee4:	d008      	beq.n	801cef8 <UART_SetConfig+0x200>
 801cee6:	e00f      	b.n	801cf08 <UART_SetConfig+0x210>
 801cee8:	2300      	movs	r3, #0
 801ceea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801ceee:	e082      	b.n	801cff6 <UART_SetConfig+0x2fe>
 801cef0:	2302      	movs	r3, #2
 801cef2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801cef6:	e07e      	b.n	801cff6 <UART_SetConfig+0x2fe>
 801cef8:	2304      	movs	r3, #4
 801cefa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801cefe:	e07a      	b.n	801cff6 <UART_SetConfig+0x2fe>
 801cf00:	2308      	movs	r3, #8
 801cf02:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801cf06:	e076      	b.n	801cff6 <UART_SetConfig+0x2fe>
 801cf08:	2310      	movs	r3, #16
 801cf0a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801cf0e:	e072      	b.n	801cff6 <UART_SetConfig+0x2fe>
 801cf10:	697b      	ldr	r3, [r7, #20]
 801cf12:	681b      	ldr	r3, [r3, #0]
 801cf14:	4a35      	ldr	r2, [pc, #212]	; (801cfec <UART_SetConfig+0x2f4>)
 801cf16:	4293      	cmp	r3, r2
 801cf18:	d12a      	bne.n	801cf70 <UART_SetConfig+0x278>
 801cf1a:	4b30      	ldr	r3, [pc, #192]	; (801cfdc <UART_SetConfig+0x2e4>)
 801cf1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801cf20:	f403 7340 	and.w	r3, r3, #768	; 0x300
 801cf24:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 801cf28:	d01a      	beq.n	801cf60 <UART_SetConfig+0x268>
 801cf2a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 801cf2e:	d81b      	bhi.n	801cf68 <UART_SetConfig+0x270>
 801cf30:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801cf34:	d00c      	beq.n	801cf50 <UART_SetConfig+0x258>
 801cf36:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801cf3a:	d815      	bhi.n	801cf68 <UART_SetConfig+0x270>
 801cf3c:	2b00      	cmp	r3, #0
 801cf3e:	d003      	beq.n	801cf48 <UART_SetConfig+0x250>
 801cf40:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801cf44:	d008      	beq.n	801cf58 <UART_SetConfig+0x260>
 801cf46:	e00f      	b.n	801cf68 <UART_SetConfig+0x270>
 801cf48:	2300      	movs	r3, #0
 801cf4a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801cf4e:	e052      	b.n	801cff6 <UART_SetConfig+0x2fe>
 801cf50:	2302      	movs	r3, #2
 801cf52:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801cf56:	e04e      	b.n	801cff6 <UART_SetConfig+0x2fe>
 801cf58:	2304      	movs	r3, #4
 801cf5a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801cf5e:	e04a      	b.n	801cff6 <UART_SetConfig+0x2fe>
 801cf60:	2308      	movs	r3, #8
 801cf62:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801cf66:	e046      	b.n	801cff6 <UART_SetConfig+0x2fe>
 801cf68:	2310      	movs	r3, #16
 801cf6a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801cf6e:	e042      	b.n	801cff6 <UART_SetConfig+0x2fe>
 801cf70:	697b      	ldr	r3, [r7, #20]
 801cf72:	681b      	ldr	r3, [r3, #0]
 801cf74:	4a17      	ldr	r2, [pc, #92]	; (801cfd4 <UART_SetConfig+0x2dc>)
 801cf76:	4293      	cmp	r3, r2
 801cf78:	d13a      	bne.n	801cff0 <UART_SetConfig+0x2f8>
 801cf7a:	4b18      	ldr	r3, [pc, #96]	; (801cfdc <UART_SetConfig+0x2e4>)
 801cf7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801cf80:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 801cf84:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 801cf88:	d01a      	beq.n	801cfc0 <UART_SetConfig+0x2c8>
 801cf8a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 801cf8e:	d81b      	bhi.n	801cfc8 <UART_SetConfig+0x2d0>
 801cf90:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801cf94:	d00c      	beq.n	801cfb0 <UART_SetConfig+0x2b8>
 801cf96:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801cf9a:	d815      	bhi.n	801cfc8 <UART_SetConfig+0x2d0>
 801cf9c:	2b00      	cmp	r3, #0
 801cf9e:	d003      	beq.n	801cfa8 <UART_SetConfig+0x2b0>
 801cfa0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801cfa4:	d008      	beq.n	801cfb8 <UART_SetConfig+0x2c0>
 801cfa6:	e00f      	b.n	801cfc8 <UART_SetConfig+0x2d0>
 801cfa8:	2300      	movs	r3, #0
 801cfaa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801cfae:	e022      	b.n	801cff6 <UART_SetConfig+0x2fe>
 801cfb0:	2302      	movs	r3, #2
 801cfb2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801cfb6:	e01e      	b.n	801cff6 <UART_SetConfig+0x2fe>
 801cfb8:	2304      	movs	r3, #4
 801cfba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801cfbe:	e01a      	b.n	801cff6 <UART_SetConfig+0x2fe>
 801cfc0:	2308      	movs	r3, #8
 801cfc2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801cfc6:	e016      	b.n	801cff6 <UART_SetConfig+0x2fe>
 801cfc8:	2310      	movs	r3, #16
 801cfca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801cfce:	e012      	b.n	801cff6 <UART_SetConfig+0x2fe>
 801cfd0:	cfff69f3 	.word	0xcfff69f3
 801cfd4:	40008000 	.word	0x40008000
 801cfd8:	40013800 	.word	0x40013800
 801cfdc:	40021000 	.word	0x40021000
 801cfe0:	40004400 	.word	0x40004400
 801cfe4:	40004800 	.word	0x40004800
 801cfe8:	40004c00 	.word	0x40004c00
 801cfec:	40005000 	.word	0x40005000
 801cff0:	2310      	movs	r3, #16
 801cff2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 801cff6:	697b      	ldr	r3, [r7, #20]
 801cff8:	681b      	ldr	r3, [r3, #0]
 801cffa:	4ab0      	ldr	r2, [pc, #704]	; (801d2bc <UART_SetConfig+0x5c4>)
 801cffc:	4293      	cmp	r3, r2
 801cffe:	f040 809b 	bne.w	801d138 <UART_SetConfig+0x440>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 801d002:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 801d006:	2b08      	cmp	r3, #8
 801d008:	d827      	bhi.n	801d05a <UART_SetConfig+0x362>
 801d00a:	a201      	add	r2, pc, #4	; (adr r2, 801d010 <UART_SetConfig+0x318>)
 801d00c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801d010:	0801d035 	.word	0x0801d035
 801d014:	0801d03d 	.word	0x0801d03d
 801d018:	0801d045 	.word	0x0801d045
 801d01c:	0801d05b 	.word	0x0801d05b
 801d020:	0801d04b 	.word	0x0801d04b
 801d024:	0801d05b 	.word	0x0801d05b
 801d028:	0801d05b 	.word	0x0801d05b
 801d02c:	0801d05b 	.word	0x0801d05b
 801d030:	0801d053 	.word	0x0801d053
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 801d034:	f7fb fb60 	bl	80186f8 <HAL_RCC_GetPCLK1Freq>
 801d038:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 801d03a:	e014      	b.n	801d066 <UART_SetConfig+0x36e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 801d03c:	f7fb fb70 	bl	8018720 <HAL_RCC_GetPCLK2Freq>
 801d040:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 801d042:	e010      	b.n	801d066 <UART_SetConfig+0x36e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 801d044:	4b9e      	ldr	r3, [pc, #632]	; (801d2c0 <UART_SetConfig+0x5c8>)
 801d046:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 801d048:	e00d      	b.n	801d066 <UART_SetConfig+0x36e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 801d04a:	f7fb faa3 	bl	8018594 <HAL_RCC_GetSysClockFreq>
 801d04e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 801d050:	e009      	b.n	801d066 <UART_SetConfig+0x36e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801d052:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801d056:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 801d058:	e005      	b.n	801d066 <UART_SetConfig+0x36e>
      default:
        pclk = 0U;
 801d05a:	2300      	movs	r3, #0
 801d05c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 801d05e:	2301      	movs	r3, #1
 801d060:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 801d064:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 801d066:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d068:	2b00      	cmp	r3, #0
 801d06a:	f000 8130 	beq.w	801d2ce <UART_SetConfig+0x5d6>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 801d06e:	697b      	ldr	r3, [r7, #20]
 801d070:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801d072:	4a94      	ldr	r2, [pc, #592]	; (801d2c4 <UART_SetConfig+0x5cc>)
 801d074:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801d078:	461a      	mov	r2, r3
 801d07a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d07c:	fbb3 f3f2 	udiv	r3, r3, r2
 801d080:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 801d082:	697b      	ldr	r3, [r7, #20]
 801d084:	685a      	ldr	r2, [r3, #4]
 801d086:	4613      	mov	r3, r2
 801d088:	005b      	lsls	r3, r3, #1
 801d08a:	4413      	add	r3, r2
 801d08c:	69ba      	ldr	r2, [r7, #24]
 801d08e:	429a      	cmp	r2, r3
 801d090:	d305      	bcc.n	801d09e <UART_SetConfig+0x3a6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 801d092:	697b      	ldr	r3, [r7, #20]
 801d094:	685b      	ldr	r3, [r3, #4]
 801d096:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 801d098:	69ba      	ldr	r2, [r7, #24]
 801d09a:	429a      	cmp	r2, r3
 801d09c:	d903      	bls.n	801d0a6 <UART_SetConfig+0x3ae>
      {
        ret = HAL_ERROR;
 801d09e:	2301      	movs	r3, #1
 801d0a0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 801d0a4:	e113      	b.n	801d2ce <UART_SetConfig+0x5d6>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 801d0a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d0a8:	2200      	movs	r2, #0
 801d0aa:	60bb      	str	r3, [r7, #8]
 801d0ac:	60fa      	str	r2, [r7, #12]
 801d0ae:	697b      	ldr	r3, [r7, #20]
 801d0b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801d0b2:	4a84      	ldr	r2, [pc, #528]	; (801d2c4 <UART_SetConfig+0x5cc>)
 801d0b4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801d0b8:	b29b      	uxth	r3, r3
 801d0ba:	2200      	movs	r2, #0
 801d0bc:	603b      	str	r3, [r7, #0]
 801d0be:	607a      	str	r2, [r7, #4]
 801d0c0:	e9d7 2300 	ldrd	r2, r3, [r7]
 801d0c4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 801d0c8:	f7e3 fdd0 	bl	8000c6c <__aeabi_uldivmod>
 801d0cc:	4602      	mov	r2, r0
 801d0ce:	460b      	mov	r3, r1
 801d0d0:	4610      	mov	r0, r2
 801d0d2:	4619      	mov	r1, r3
 801d0d4:	f04f 0200 	mov.w	r2, #0
 801d0d8:	f04f 0300 	mov.w	r3, #0
 801d0dc:	020b      	lsls	r3, r1, #8
 801d0de:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 801d0e2:	0202      	lsls	r2, r0, #8
 801d0e4:	6979      	ldr	r1, [r7, #20]
 801d0e6:	6849      	ldr	r1, [r1, #4]
 801d0e8:	0849      	lsrs	r1, r1, #1
 801d0ea:	2000      	movs	r0, #0
 801d0ec:	460c      	mov	r4, r1
 801d0ee:	4605      	mov	r5, r0
 801d0f0:	eb12 0804 	adds.w	r8, r2, r4
 801d0f4:	eb43 0905 	adc.w	r9, r3, r5
 801d0f8:	697b      	ldr	r3, [r7, #20]
 801d0fa:	685b      	ldr	r3, [r3, #4]
 801d0fc:	2200      	movs	r2, #0
 801d0fe:	469a      	mov	sl, r3
 801d100:	4693      	mov	fp, r2
 801d102:	4652      	mov	r2, sl
 801d104:	465b      	mov	r3, fp
 801d106:	4640      	mov	r0, r8
 801d108:	4649      	mov	r1, r9
 801d10a:	f7e3 fdaf 	bl	8000c6c <__aeabi_uldivmod>
 801d10e:	4602      	mov	r2, r0
 801d110:	460b      	mov	r3, r1
 801d112:	4613      	mov	r3, r2
 801d114:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 801d116:	6a3b      	ldr	r3, [r7, #32]
 801d118:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 801d11c:	d308      	bcc.n	801d130 <UART_SetConfig+0x438>
 801d11e:	6a3b      	ldr	r3, [r7, #32]
 801d120:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801d124:	d204      	bcs.n	801d130 <UART_SetConfig+0x438>
        {
          huart->Instance->BRR = usartdiv;
 801d126:	697b      	ldr	r3, [r7, #20]
 801d128:	681b      	ldr	r3, [r3, #0]
 801d12a:	6a3a      	ldr	r2, [r7, #32]
 801d12c:	60da      	str	r2, [r3, #12]
 801d12e:	e0ce      	b.n	801d2ce <UART_SetConfig+0x5d6>
        }
        else
        {
          ret = HAL_ERROR;
 801d130:	2301      	movs	r3, #1
 801d132:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 801d136:	e0ca      	b.n	801d2ce <UART_SetConfig+0x5d6>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 801d138:	697b      	ldr	r3, [r7, #20]
 801d13a:	69db      	ldr	r3, [r3, #28]
 801d13c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801d140:	d166      	bne.n	801d210 <UART_SetConfig+0x518>
  {
    switch (clocksource)
 801d142:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 801d146:	2b08      	cmp	r3, #8
 801d148:	d827      	bhi.n	801d19a <UART_SetConfig+0x4a2>
 801d14a:	a201      	add	r2, pc, #4	; (adr r2, 801d150 <UART_SetConfig+0x458>)
 801d14c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801d150:	0801d175 	.word	0x0801d175
 801d154:	0801d17d 	.word	0x0801d17d
 801d158:	0801d185 	.word	0x0801d185
 801d15c:	0801d19b 	.word	0x0801d19b
 801d160:	0801d18b 	.word	0x0801d18b
 801d164:	0801d19b 	.word	0x0801d19b
 801d168:	0801d19b 	.word	0x0801d19b
 801d16c:	0801d19b 	.word	0x0801d19b
 801d170:	0801d193 	.word	0x0801d193
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 801d174:	f7fb fac0 	bl	80186f8 <HAL_RCC_GetPCLK1Freq>
 801d178:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 801d17a:	e014      	b.n	801d1a6 <UART_SetConfig+0x4ae>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 801d17c:	f7fb fad0 	bl	8018720 <HAL_RCC_GetPCLK2Freq>
 801d180:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 801d182:	e010      	b.n	801d1a6 <UART_SetConfig+0x4ae>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 801d184:	4b4e      	ldr	r3, [pc, #312]	; (801d2c0 <UART_SetConfig+0x5c8>)
 801d186:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 801d188:	e00d      	b.n	801d1a6 <UART_SetConfig+0x4ae>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 801d18a:	f7fb fa03 	bl	8018594 <HAL_RCC_GetSysClockFreq>
 801d18e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 801d190:	e009      	b.n	801d1a6 <UART_SetConfig+0x4ae>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801d192:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801d196:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 801d198:	e005      	b.n	801d1a6 <UART_SetConfig+0x4ae>
      default:
        pclk = 0U;
 801d19a:	2300      	movs	r3, #0
 801d19c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 801d19e:	2301      	movs	r3, #1
 801d1a0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 801d1a4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 801d1a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d1a8:	2b00      	cmp	r3, #0
 801d1aa:	f000 8090 	beq.w	801d2ce <UART_SetConfig+0x5d6>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 801d1ae:	697b      	ldr	r3, [r7, #20]
 801d1b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801d1b2:	4a44      	ldr	r2, [pc, #272]	; (801d2c4 <UART_SetConfig+0x5cc>)
 801d1b4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801d1b8:	461a      	mov	r2, r3
 801d1ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d1bc:	fbb3 f3f2 	udiv	r3, r3, r2
 801d1c0:	005a      	lsls	r2, r3, #1
 801d1c2:	697b      	ldr	r3, [r7, #20]
 801d1c4:	685b      	ldr	r3, [r3, #4]
 801d1c6:	085b      	lsrs	r3, r3, #1
 801d1c8:	441a      	add	r2, r3
 801d1ca:	697b      	ldr	r3, [r7, #20]
 801d1cc:	685b      	ldr	r3, [r3, #4]
 801d1ce:	fbb2 f3f3 	udiv	r3, r2, r3
 801d1d2:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 801d1d4:	6a3b      	ldr	r3, [r7, #32]
 801d1d6:	2b0f      	cmp	r3, #15
 801d1d8:	d916      	bls.n	801d208 <UART_SetConfig+0x510>
 801d1da:	6a3b      	ldr	r3, [r7, #32]
 801d1dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801d1e0:	d212      	bcs.n	801d208 <UART_SetConfig+0x510>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 801d1e2:	6a3b      	ldr	r3, [r7, #32]
 801d1e4:	b29b      	uxth	r3, r3
 801d1e6:	f023 030f 	bic.w	r3, r3, #15
 801d1ea:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 801d1ec:	6a3b      	ldr	r3, [r7, #32]
 801d1ee:	085b      	lsrs	r3, r3, #1
 801d1f0:	b29b      	uxth	r3, r3
 801d1f2:	f003 0307 	and.w	r3, r3, #7
 801d1f6:	b29a      	uxth	r2, r3
 801d1f8:	8bfb      	ldrh	r3, [r7, #30]
 801d1fa:	4313      	orrs	r3, r2
 801d1fc:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 801d1fe:	697b      	ldr	r3, [r7, #20]
 801d200:	681b      	ldr	r3, [r3, #0]
 801d202:	8bfa      	ldrh	r2, [r7, #30]
 801d204:	60da      	str	r2, [r3, #12]
 801d206:	e062      	b.n	801d2ce <UART_SetConfig+0x5d6>
      }
      else
      {
        ret = HAL_ERROR;
 801d208:	2301      	movs	r3, #1
 801d20a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 801d20e:	e05e      	b.n	801d2ce <UART_SetConfig+0x5d6>
      }
    }
  }
  else
  {
    switch (clocksource)
 801d210:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 801d214:	2b08      	cmp	r3, #8
 801d216:	d828      	bhi.n	801d26a <UART_SetConfig+0x572>
 801d218:	a201      	add	r2, pc, #4	; (adr r2, 801d220 <UART_SetConfig+0x528>)
 801d21a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801d21e:	bf00      	nop
 801d220:	0801d245 	.word	0x0801d245
 801d224:	0801d24d 	.word	0x0801d24d
 801d228:	0801d255 	.word	0x0801d255
 801d22c:	0801d26b 	.word	0x0801d26b
 801d230:	0801d25b 	.word	0x0801d25b
 801d234:	0801d26b 	.word	0x0801d26b
 801d238:	0801d26b 	.word	0x0801d26b
 801d23c:	0801d26b 	.word	0x0801d26b
 801d240:	0801d263 	.word	0x0801d263
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 801d244:	f7fb fa58 	bl	80186f8 <HAL_RCC_GetPCLK1Freq>
 801d248:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 801d24a:	e014      	b.n	801d276 <UART_SetConfig+0x57e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 801d24c:	f7fb fa68 	bl	8018720 <HAL_RCC_GetPCLK2Freq>
 801d250:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 801d252:	e010      	b.n	801d276 <UART_SetConfig+0x57e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 801d254:	4b1a      	ldr	r3, [pc, #104]	; (801d2c0 <UART_SetConfig+0x5c8>)
 801d256:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 801d258:	e00d      	b.n	801d276 <UART_SetConfig+0x57e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 801d25a:	f7fb f99b 	bl	8018594 <HAL_RCC_GetSysClockFreq>
 801d25e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 801d260:	e009      	b.n	801d276 <UART_SetConfig+0x57e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801d262:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801d266:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 801d268:	e005      	b.n	801d276 <UART_SetConfig+0x57e>
      default:
        pclk = 0U;
 801d26a:	2300      	movs	r3, #0
 801d26c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 801d26e:	2301      	movs	r3, #1
 801d270:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 801d274:	bf00      	nop
    }

    if (pclk != 0U)
 801d276:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d278:	2b00      	cmp	r3, #0
 801d27a:	d028      	beq.n	801d2ce <UART_SetConfig+0x5d6>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 801d27c:	697b      	ldr	r3, [r7, #20]
 801d27e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801d280:	4a10      	ldr	r2, [pc, #64]	; (801d2c4 <UART_SetConfig+0x5cc>)
 801d282:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801d286:	461a      	mov	r2, r3
 801d288:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d28a:	fbb3 f2f2 	udiv	r2, r3, r2
 801d28e:	697b      	ldr	r3, [r7, #20]
 801d290:	685b      	ldr	r3, [r3, #4]
 801d292:	085b      	lsrs	r3, r3, #1
 801d294:	441a      	add	r2, r3
 801d296:	697b      	ldr	r3, [r7, #20]
 801d298:	685b      	ldr	r3, [r3, #4]
 801d29a:	fbb2 f3f3 	udiv	r3, r2, r3
 801d29e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 801d2a0:	6a3b      	ldr	r3, [r7, #32]
 801d2a2:	2b0f      	cmp	r3, #15
 801d2a4:	d910      	bls.n	801d2c8 <UART_SetConfig+0x5d0>
 801d2a6:	6a3b      	ldr	r3, [r7, #32]
 801d2a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801d2ac:	d20c      	bcs.n	801d2c8 <UART_SetConfig+0x5d0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 801d2ae:	6a3b      	ldr	r3, [r7, #32]
 801d2b0:	b29a      	uxth	r2, r3
 801d2b2:	697b      	ldr	r3, [r7, #20]
 801d2b4:	681b      	ldr	r3, [r3, #0]
 801d2b6:	60da      	str	r2, [r3, #12]
 801d2b8:	e009      	b.n	801d2ce <UART_SetConfig+0x5d6>
 801d2ba:	bf00      	nop
 801d2bc:	40008000 	.word	0x40008000
 801d2c0:	00f42400 	.word	0x00f42400
 801d2c4:	08025fe4 	.word	0x08025fe4
      }
      else
      {
        ret = HAL_ERROR;
 801d2c8:	2301      	movs	r3, #1
 801d2ca:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 801d2ce:	697b      	ldr	r3, [r7, #20]
 801d2d0:	2201      	movs	r2, #1
 801d2d2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 801d2d6:	697b      	ldr	r3, [r7, #20]
 801d2d8:	2201      	movs	r2, #1
 801d2da:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 801d2de:	697b      	ldr	r3, [r7, #20]
 801d2e0:	2200      	movs	r2, #0
 801d2e2:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 801d2e4:	697b      	ldr	r3, [r7, #20]
 801d2e6:	2200      	movs	r2, #0
 801d2e8:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 801d2ea:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 801d2ee:	4618      	mov	r0, r3
 801d2f0:	3730      	adds	r7, #48	; 0x30
 801d2f2:	46bd      	mov	sp, r7
 801d2f4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0801d2f8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 801d2f8:	b480      	push	{r7}
 801d2fa:	b083      	sub	sp, #12
 801d2fc:	af00      	add	r7, sp, #0
 801d2fe:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 801d300:	687b      	ldr	r3, [r7, #4]
 801d302:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801d304:	f003 0301 	and.w	r3, r3, #1
 801d308:	2b00      	cmp	r3, #0
 801d30a:	d00a      	beq.n	801d322 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 801d30c:	687b      	ldr	r3, [r7, #4]
 801d30e:	681b      	ldr	r3, [r3, #0]
 801d310:	685b      	ldr	r3, [r3, #4]
 801d312:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 801d316:	687b      	ldr	r3, [r7, #4]
 801d318:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801d31a:	687b      	ldr	r3, [r7, #4]
 801d31c:	681b      	ldr	r3, [r3, #0]
 801d31e:	430a      	orrs	r2, r1
 801d320:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 801d322:	687b      	ldr	r3, [r7, #4]
 801d324:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801d326:	f003 0302 	and.w	r3, r3, #2
 801d32a:	2b00      	cmp	r3, #0
 801d32c:	d00a      	beq.n	801d344 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 801d32e:	687b      	ldr	r3, [r7, #4]
 801d330:	681b      	ldr	r3, [r3, #0]
 801d332:	685b      	ldr	r3, [r3, #4]
 801d334:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 801d338:	687b      	ldr	r3, [r7, #4]
 801d33a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801d33c:	687b      	ldr	r3, [r7, #4]
 801d33e:	681b      	ldr	r3, [r3, #0]
 801d340:	430a      	orrs	r2, r1
 801d342:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 801d344:	687b      	ldr	r3, [r7, #4]
 801d346:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801d348:	f003 0304 	and.w	r3, r3, #4
 801d34c:	2b00      	cmp	r3, #0
 801d34e:	d00a      	beq.n	801d366 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 801d350:	687b      	ldr	r3, [r7, #4]
 801d352:	681b      	ldr	r3, [r3, #0]
 801d354:	685b      	ldr	r3, [r3, #4]
 801d356:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 801d35a:	687b      	ldr	r3, [r7, #4]
 801d35c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801d35e:	687b      	ldr	r3, [r7, #4]
 801d360:	681b      	ldr	r3, [r3, #0]
 801d362:	430a      	orrs	r2, r1
 801d364:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 801d366:	687b      	ldr	r3, [r7, #4]
 801d368:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801d36a:	f003 0308 	and.w	r3, r3, #8
 801d36e:	2b00      	cmp	r3, #0
 801d370:	d00a      	beq.n	801d388 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 801d372:	687b      	ldr	r3, [r7, #4]
 801d374:	681b      	ldr	r3, [r3, #0]
 801d376:	685b      	ldr	r3, [r3, #4]
 801d378:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 801d37c:	687b      	ldr	r3, [r7, #4]
 801d37e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801d380:	687b      	ldr	r3, [r7, #4]
 801d382:	681b      	ldr	r3, [r3, #0]
 801d384:	430a      	orrs	r2, r1
 801d386:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 801d388:	687b      	ldr	r3, [r7, #4]
 801d38a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801d38c:	f003 0310 	and.w	r3, r3, #16
 801d390:	2b00      	cmp	r3, #0
 801d392:	d00a      	beq.n	801d3aa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 801d394:	687b      	ldr	r3, [r7, #4]
 801d396:	681b      	ldr	r3, [r3, #0]
 801d398:	689b      	ldr	r3, [r3, #8]
 801d39a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 801d39e:	687b      	ldr	r3, [r7, #4]
 801d3a0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 801d3a2:	687b      	ldr	r3, [r7, #4]
 801d3a4:	681b      	ldr	r3, [r3, #0]
 801d3a6:	430a      	orrs	r2, r1
 801d3a8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 801d3aa:	687b      	ldr	r3, [r7, #4]
 801d3ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801d3ae:	f003 0320 	and.w	r3, r3, #32
 801d3b2:	2b00      	cmp	r3, #0
 801d3b4:	d00a      	beq.n	801d3cc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 801d3b6:	687b      	ldr	r3, [r7, #4]
 801d3b8:	681b      	ldr	r3, [r3, #0]
 801d3ba:	689b      	ldr	r3, [r3, #8]
 801d3bc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 801d3c0:	687b      	ldr	r3, [r7, #4]
 801d3c2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 801d3c4:	687b      	ldr	r3, [r7, #4]
 801d3c6:	681b      	ldr	r3, [r3, #0]
 801d3c8:	430a      	orrs	r2, r1
 801d3ca:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 801d3cc:	687b      	ldr	r3, [r7, #4]
 801d3ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801d3d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801d3d4:	2b00      	cmp	r3, #0
 801d3d6:	d01a      	beq.n	801d40e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 801d3d8:	687b      	ldr	r3, [r7, #4]
 801d3da:	681b      	ldr	r3, [r3, #0]
 801d3dc:	685b      	ldr	r3, [r3, #4]
 801d3de:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 801d3e2:	687b      	ldr	r3, [r7, #4]
 801d3e4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801d3e6:	687b      	ldr	r3, [r7, #4]
 801d3e8:	681b      	ldr	r3, [r3, #0]
 801d3ea:	430a      	orrs	r2, r1
 801d3ec:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 801d3ee:	687b      	ldr	r3, [r7, #4]
 801d3f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801d3f2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801d3f6:	d10a      	bne.n	801d40e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 801d3f8:	687b      	ldr	r3, [r7, #4]
 801d3fa:	681b      	ldr	r3, [r3, #0]
 801d3fc:	685b      	ldr	r3, [r3, #4]
 801d3fe:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 801d402:	687b      	ldr	r3, [r7, #4]
 801d404:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 801d406:	687b      	ldr	r3, [r7, #4]
 801d408:	681b      	ldr	r3, [r3, #0]
 801d40a:	430a      	orrs	r2, r1
 801d40c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 801d40e:	687b      	ldr	r3, [r7, #4]
 801d410:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801d412:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801d416:	2b00      	cmp	r3, #0
 801d418:	d00a      	beq.n	801d430 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 801d41a:	687b      	ldr	r3, [r7, #4]
 801d41c:	681b      	ldr	r3, [r3, #0]
 801d41e:	685b      	ldr	r3, [r3, #4]
 801d420:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 801d424:	687b      	ldr	r3, [r7, #4]
 801d426:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801d428:	687b      	ldr	r3, [r7, #4]
 801d42a:	681b      	ldr	r3, [r3, #0]
 801d42c:	430a      	orrs	r2, r1
 801d42e:	605a      	str	r2, [r3, #4]
  }
}
 801d430:	bf00      	nop
 801d432:	370c      	adds	r7, #12
 801d434:	46bd      	mov	sp, r7
 801d436:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d43a:	4770      	bx	lr

0801d43c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 801d43c:	b580      	push	{r7, lr}
 801d43e:	b098      	sub	sp, #96	; 0x60
 801d440:	af02      	add	r7, sp, #8
 801d442:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 801d444:	687b      	ldr	r3, [r7, #4]
 801d446:	2200      	movs	r2, #0
 801d448:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 801d44c:	f7f7 f880 	bl	8014550 <HAL_GetTick>
 801d450:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 801d452:	687b      	ldr	r3, [r7, #4]
 801d454:	681b      	ldr	r3, [r3, #0]
 801d456:	681b      	ldr	r3, [r3, #0]
 801d458:	f003 0308 	and.w	r3, r3, #8
 801d45c:	2b08      	cmp	r3, #8
 801d45e:	d12f      	bne.n	801d4c0 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 801d460:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 801d464:	9300      	str	r3, [sp, #0]
 801d466:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801d468:	2200      	movs	r2, #0
 801d46a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 801d46e:	6878      	ldr	r0, [r7, #4]
 801d470:	f000 f88e 	bl	801d590 <UART_WaitOnFlagUntilTimeout>
 801d474:	4603      	mov	r3, r0
 801d476:	2b00      	cmp	r3, #0
 801d478:	d022      	beq.n	801d4c0 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 801d47a:	687b      	ldr	r3, [r7, #4]
 801d47c:	681b      	ldr	r3, [r3, #0]
 801d47e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801d480:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d482:	e853 3f00 	ldrex	r3, [r3]
 801d486:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 801d488:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801d48a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801d48e:	653b      	str	r3, [r7, #80]	; 0x50
 801d490:	687b      	ldr	r3, [r7, #4]
 801d492:	681b      	ldr	r3, [r3, #0]
 801d494:	461a      	mov	r2, r3
 801d496:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801d498:	647b      	str	r3, [r7, #68]	; 0x44
 801d49a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801d49c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 801d49e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801d4a0:	e841 2300 	strex	r3, r2, [r1]
 801d4a4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 801d4a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801d4a8:	2b00      	cmp	r3, #0
 801d4aa:	d1e6      	bne.n	801d47a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 801d4ac:	687b      	ldr	r3, [r7, #4]
 801d4ae:	2220      	movs	r2, #32
 801d4b0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 801d4b4:	687b      	ldr	r3, [r7, #4]
 801d4b6:	2200      	movs	r2, #0
 801d4b8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 801d4bc:	2303      	movs	r3, #3
 801d4be:	e063      	b.n	801d588 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 801d4c0:	687b      	ldr	r3, [r7, #4]
 801d4c2:	681b      	ldr	r3, [r3, #0]
 801d4c4:	681b      	ldr	r3, [r3, #0]
 801d4c6:	f003 0304 	and.w	r3, r3, #4
 801d4ca:	2b04      	cmp	r3, #4
 801d4cc:	d149      	bne.n	801d562 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 801d4ce:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 801d4d2:	9300      	str	r3, [sp, #0]
 801d4d4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801d4d6:	2200      	movs	r2, #0
 801d4d8:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 801d4dc:	6878      	ldr	r0, [r7, #4]
 801d4de:	f000 f857 	bl	801d590 <UART_WaitOnFlagUntilTimeout>
 801d4e2:	4603      	mov	r3, r0
 801d4e4:	2b00      	cmp	r3, #0
 801d4e6:	d03c      	beq.n	801d562 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 801d4e8:	687b      	ldr	r3, [r7, #4]
 801d4ea:	681b      	ldr	r3, [r3, #0]
 801d4ec:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801d4ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d4f0:	e853 3f00 	ldrex	r3, [r3]
 801d4f4:	623b      	str	r3, [r7, #32]
   return(result);
 801d4f6:	6a3b      	ldr	r3, [r7, #32]
 801d4f8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 801d4fc:	64fb      	str	r3, [r7, #76]	; 0x4c
 801d4fe:	687b      	ldr	r3, [r7, #4]
 801d500:	681b      	ldr	r3, [r3, #0]
 801d502:	461a      	mov	r2, r3
 801d504:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801d506:	633b      	str	r3, [r7, #48]	; 0x30
 801d508:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801d50a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801d50c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801d50e:	e841 2300 	strex	r3, r2, [r1]
 801d512:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 801d514:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d516:	2b00      	cmp	r3, #0
 801d518:	d1e6      	bne.n	801d4e8 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801d51a:	687b      	ldr	r3, [r7, #4]
 801d51c:	681b      	ldr	r3, [r3, #0]
 801d51e:	3308      	adds	r3, #8
 801d520:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801d522:	693b      	ldr	r3, [r7, #16]
 801d524:	e853 3f00 	ldrex	r3, [r3]
 801d528:	60fb      	str	r3, [r7, #12]
   return(result);
 801d52a:	68fb      	ldr	r3, [r7, #12]
 801d52c:	f023 0301 	bic.w	r3, r3, #1
 801d530:	64bb      	str	r3, [r7, #72]	; 0x48
 801d532:	687b      	ldr	r3, [r7, #4]
 801d534:	681b      	ldr	r3, [r3, #0]
 801d536:	3308      	adds	r3, #8
 801d538:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801d53a:	61fa      	str	r2, [r7, #28]
 801d53c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801d53e:	69b9      	ldr	r1, [r7, #24]
 801d540:	69fa      	ldr	r2, [r7, #28]
 801d542:	e841 2300 	strex	r3, r2, [r1]
 801d546:	617b      	str	r3, [r7, #20]
   return(result);
 801d548:	697b      	ldr	r3, [r7, #20]
 801d54a:	2b00      	cmp	r3, #0
 801d54c:	d1e5      	bne.n	801d51a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 801d54e:	687b      	ldr	r3, [r7, #4]
 801d550:	2220      	movs	r2, #32
 801d552:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 801d556:	687b      	ldr	r3, [r7, #4]
 801d558:	2200      	movs	r2, #0
 801d55a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 801d55e:	2303      	movs	r3, #3
 801d560:	e012      	b.n	801d588 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 801d562:	687b      	ldr	r3, [r7, #4]
 801d564:	2220      	movs	r2, #32
 801d566:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 801d56a:	687b      	ldr	r3, [r7, #4]
 801d56c:	2220      	movs	r2, #32
 801d56e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801d572:	687b      	ldr	r3, [r7, #4]
 801d574:	2200      	movs	r2, #0
 801d576:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 801d578:	687b      	ldr	r3, [r7, #4]
 801d57a:	2200      	movs	r2, #0
 801d57c:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 801d57e:	687b      	ldr	r3, [r7, #4]
 801d580:	2200      	movs	r2, #0
 801d582:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 801d586:	2300      	movs	r3, #0
}
 801d588:	4618      	mov	r0, r3
 801d58a:	3758      	adds	r7, #88	; 0x58
 801d58c:	46bd      	mov	sp, r7
 801d58e:	bd80      	pop	{r7, pc}

0801d590 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 801d590:	b580      	push	{r7, lr}
 801d592:	b084      	sub	sp, #16
 801d594:	af00      	add	r7, sp, #0
 801d596:	60f8      	str	r0, [r7, #12]
 801d598:	60b9      	str	r1, [r7, #8]
 801d59a:	603b      	str	r3, [r7, #0]
 801d59c:	4613      	mov	r3, r2
 801d59e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 801d5a0:	e049      	b.n	801d636 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 801d5a2:	69bb      	ldr	r3, [r7, #24]
 801d5a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 801d5a8:	d045      	beq.n	801d636 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801d5aa:	f7f6 ffd1 	bl	8014550 <HAL_GetTick>
 801d5ae:	4602      	mov	r2, r0
 801d5b0:	683b      	ldr	r3, [r7, #0]
 801d5b2:	1ad3      	subs	r3, r2, r3
 801d5b4:	69ba      	ldr	r2, [r7, #24]
 801d5b6:	429a      	cmp	r2, r3
 801d5b8:	d302      	bcc.n	801d5c0 <UART_WaitOnFlagUntilTimeout+0x30>
 801d5ba:	69bb      	ldr	r3, [r7, #24]
 801d5bc:	2b00      	cmp	r3, #0
 801d5be:	d101      	bne.n	801d5c4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 801d5c0:	2303      	movs	r3, #3
 801d5c2:	e048      	b.n	801d656 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 801d5c4:	68fb      	ldr	r3, [r7, #12]
 801d5c6:	681b      	ldr	r3, [r3, #0]
 801d5c8:	681b      	ldr	r3, [r3, #0]
 801d5ca:	f003 0304 	and.w	r3, r3, #4
 801d5ce:	2b00      	cmp	r3, #0
 801d5d0:	d031      	beq.n	801d636 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 801d5d2:	68fb      	ldr	r3, [r7, #12]
 801d5d4:	681b      	ldr	r3, [r3, #0]
 801d5d6:	69db      	ldr	r3, [r3, #28]
 801d5d8:	f003 0308 	and.w	r3, r3, #8
 801d5dc:	2b08      	cmp	r3, #8
 801d5de:	d110      	bne.n	801d602 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 801d5e0:	68fb      	ldr	r3, [r7, #12]
 801d5e2:	681b      	ldr	r3, [r3, #0]
 801d5e4:	2208      	movs	r2, #8
 801d5e6:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 801d5e8:	68f8      	ldr	r0, [r7, #12]
 801d5ea:	f000 f95b 	bl	801d8a4 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 801d5ee:	68fb      	ldr	r3, [r7, #12]
 801d5f0:	2208      	movs	r2, #8
 801d5f2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 801d5f6:	68fb      	ldr	r3, [r7, #12]
 801d5f8:	2200      	movs	r2, #0
 801d5fa:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 801d5fe:	2301      	movs	r3, #1
 801d600:	e029      	b.n	801d656 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 801d602:	68fb      	ldr	r3, [r7, #12]
 801d604:	681b      	ldr	r3, [r3, #0]
 801d606:	69db      	ldr	r3, [r3, #28]
 801d608:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801d60c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801d610:	d111      	bne.n	801d636 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 801d612:	68fb      	ldr	r3, [r7, #12]
 801d614:	681b      	ldr	r3, [r3, #0]
 801d616:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801d61a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 801d61c:	68f8      	ldr	r0, [r7, #12]
 801d61e:	f000 f941 	bl	801d8a4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 801d622:	68fb      	ldr	r3, [r7, #12]
 801d624:	2220      	movs	r2, #32
 801d626:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 801d62a:	68fb      	ldr	r3, [r7, #12]
 801d62c:	2200      	movs	r2, #0
 801d62e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 801d632:	2303      	movs	r3, #3
 801d634:	e00f      	b.n	801d656 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 801d636:	68fb      	ldr	r3, [r7, #12]
 801d638:	681b      	ldr	r3, [r3, #0]
 801d63a:	69da      	ldr	r2, [r3, #28]
 801d63c:	68bb      	ldr	r3, [r7, #8]
 801d63e:	4013      	ands	r3, r2
 801d640:	68ba      	ldr	r2, [r7, #8]
 801d642:	429a      	cmp	r2, r3
 801d644:	bf0c      	ite	eq
 801d646:	2301      	moveq	r3, #1
 801d648:	2300      	movne	r3, #0
 801d64a:	b2db      	uxtb	r3, r3
 801d64c:	461a      	mov	r2, r3
 801d64e:	79fb      	ldrb	r3, [r7, #7]
 801d650:	429a      	cmp	r2, r3
 801d652:	d0a6      	beq.n	801d5a2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 801d654:	2300      	movs	r3, #0
}
 801d656:	4618      	mov	r0, r3
 801d658:	3710      	adds	r7, #16
 801d65a:	46bd      	mov	sp, r7
 801d65c:	bd80      	pop	{r7, pc}
	...

0801d660 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 801d660:	b480      	push	{r7}
 801d662:	b0a3      	sub	sp, #140	; 0x8c
 801d664:	af00      	add	r7, sp, #0
 801d666:	60f8      	str	r0, [r7, #12]
 801d668:	60b9      	str	r1, [r7, #8]
 801d66a:	4613      	mov	r3, r2
 801d66c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 801d66e:	68fb      	ldr	r3, [r7, #12]
 801d670:	68ba      	ldr	r2, [r7, #8]
 801d672:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 801d674:	68fb      	ldr	r3, [r7, #12]
 801d676:	88fa      	ldrh	r2, [r7, #6]
 801d678:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 801d67c:	68fb      	ldr	r3, [r7, #12]
 801d67e:	88fa      	ldrh	r2, [r7, #6]
 801d680:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 801d684:	68fb      	ldr	r3, [r7, #12]
 801d686:	2200      	movs	r2, #0
 801d688:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 801d68a:	68fb      	ldr	r3, [r7, #12]
 801d68c:	689b      	ldr	r3, [r3, #8]
 801d68e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801d692:	d10e      	bne.n	801d6b2 <UART_Start_Receive_IT+0x52>
 801d694:	68fb      	ldr	r3, [r7, #12]
 801d696:	691b      	ldr	r3, [r3, #16]
 801d698:	2b00      	cmp	r3, #0
 801d69a:	d105      	bne.n	801d6a8 <UART_Start_Receive_IT+0x48>
 801d69c:	68fb      	ldr	r3, [r7, #12]
 801d69e:	f240 12ff 	movw	r2, #511	; 0x1ff
 801d6a2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 801d6a6:	e02d      	b.n	801d704 <UART_Start_Receive_IT+0xa4>
 801d6a8:	68fb      	ldr	r3, [r7, #12]
 801d6aa:	22ff      	movs	r2, #255	; 0xff
 801d6ac:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 801d6b0:	e028      	b.n	801d704 <UART_Start_Receive_IT+0xa4>
 801d6b2:	68fb      	ldr	r3, [r7, #12]
 801d6b4:	689b      	ldr	r3, [r3, #8]
 801d6b6:	2b00      	cmp	r3, #0
 801d6b8:	d10d      	bne.n	801d6d6 <UART_Start_Receive_IT+0x76>
 801d6ba:	68fb      	ldr	r3, [r7, #12]
 801d6bc:	691b      	ldr	r3, [r3, #16]
 801d6be:	2b00      	cmp	r3, #0
 801d6c0:	d104      	bne.n	801d6cc <UART_Start_Receive_IT+0x6c>
 801d6c2:	68fb      	ldr	r3, [r7, #12]
 801d6c4:	22ff      	movs	r2, #255	; 0xff
 801d6c6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 801d6ca:	e01b      	b.n	801d704 <UART_Start_Receive_IT+0xa4>
 801d6cc:	68fb      	ldr	r3, [r7, #12]
 801d6ce:	227f      	movs	r2, #127	; 0x7f
 801d6d0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 801d6d4:	e016      	b.n	801d704 <UART_Start_Receive_IT+0xa4>
 801d6d6:	68fb      	ldr	r3, [r7, #12]
 801d6d8:	689b      	ldr	r3, [r3, #8]
 801d6da:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 801d6de:	d10d      	bne.n	801d6fc <UART_Start_Receive_IT+0x9c>
 801d6e0:	68fb      	ldr	r3, [r7, #12]
 801d6e2:	691b      	ldr	r3, [r3, #16]
 801d6e4:	2b00      	cmp	r3, #0
 801d6e6:	d104      	bne.n	801d6f2 <UART_Start_Receive_IT+0x92>
 801d6e8:	68fb      	ldr	r3, [r7, #12]
 801d6ea:	227f      	movs	r2, #127	; 0x7f
 801d6ec:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 801d6f0:	e008      	b.n	801d704 <UART_Start_Receive_IT+0xa4>
 801d6f2:	68fb      	ldr	r3, [r7, #12]
 801d6f4:	223f      	movs	r2, #63	; 0x3f
 801d6f6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 801d6fa:	e003      	b.n	801d704 <UART_Start_Receive_IT+0xa4>
 801d6fc:	68fb      	ldr	r3, [r7, #12]
 801d6fe:	2200      	movs	r2, #0
 801d700:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 801d704:	68fb      	ldr	r3, [r7, #12]
 801d706:	2200      	movs	r2, #0
 801d708:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 801d70c:	68fb      	ldr	r3, [r7, #12]
 801d70e:	2222      	movs	r2, #34	; 0x22
 801d710:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801d714:	68fb      	ldr	r3, [r7, #12]
 801d716:	681b      	ldr	r3, [r3, #0]
 801d718:	3308      	adds	r3, #8
 801d71a:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801d71c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801d71e:	e853 3f00 	ldrex	r3, [r3]
 801d722:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 801d724:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801d726:	f043 0301 	orr.w	r3, r3, #1
 801d72a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 801d72e:	68fb      	ldr	r3, [r7, #12]
 801d730:	681b      	ldr	r3, [r3, #0]
 801d732:	3308      	adds	r3, #8
 801d734:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 801d738:	673a      	str	r2, [r7, #112]	; 0x70
 801d73a:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801d73c:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 801d73e:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 801d740:	e841 2300 	strex	r3, r2, [r1]
 801d744:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 801d746:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801d748:	2b00      	cmp	r3, #0
 801d74a:	d1e3      	bne.n	801d714 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 801d74c:	68fb      	ldr	r3, [r7, #12]
 801d74e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801d750:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 801d754:	d14f      	bne.n	801d7f6 <UART_Start_Receive_IT+0x196>
 801d756:	68fb      	ldr	r3, [r7, #12]
 801d758:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 801d75c:	88fa      	ldrh	r2, [r7, #6]
 801d75e:	429a      	cmp	r2, r3
 801d760:	d349      	bcc.n	801d7f6 <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801d762:	68fb      	ldr	r3, [r7, #12]
 801d764:	689b      	ldr	r3, [r3, #8]
 801d766:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801d76a:	d107      	bne.n	801d77c <UART_Start_Receive_IT+0x11c>
 801d76c:	68fb      	ldr	r3, [r7, #12]
 801d76e:	691b      	ldr	r3, [r3, #16]
 801d770:	2b00      	cmp	r3, #0
 801d772:	d103      	bne.n	801d77c <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 801d774:	68fb      	ldr	r3, [r7, #12]
 801d776:	4a47      	ldr	r2, [pc, #284]	; (801d894 <UART_Start_Receive_IT+0x234>)
 801d778:	675a      	str	r2, [r3, #116]	; 0x74
 801d77a:	e002      	b.n	801d782 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 801d77c:	68fb      	ldr	r3, [r7, #12]
 801d77e:	4a46      	ldr	r2, [pc, #280]	; (801d898 <UART_Start_Receive_IT+0x238>)
 801d780:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 801d782:	68fb      	ldr	r3, [r7, #12]
 801d784:	691b      	ldr	r3, [r3, #16]
 801d786:	2b00      	cmp	r3, #0
 801d788:	d01a      	beq.n	801d7c0 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 801d78a:	68fb      	ldr	r3, [r7, #12]
 801d78c:	681b      	ldr	r3, [r3, #0]
 801d78e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801d790:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801d792:	e853 3f00 	ldrex	r3, [r3]
 801d796:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 801d798:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801d79a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801d79e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 801d7a2:	68fb      	ldr	r3, [r7, #12]
 801d7a4:	681b      	ldr	r3, [r3, #0]
 801d7a6:	461a      	mov	r2, r3
 801d7a8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 801d7ac:	65fb      	str	r3, [r7, #92]	; 0x5c
 801d7ae:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801d7b0:	6db9      	ldr	r1, [r7, #88]	; 0x58
 801d7b2:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 801d7b4:	e841 2300 	strex	r3, r2, [r1]
 801d7b8:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 801d7ba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801d7bc:	2b00      	cmp	r3, #0
 801d7be:	d1e4      	bne.n	801d78a <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 801d7c0:	68fb      	ldr	r3, [r7, #12]
 801d7c2:	681b      	ldr	r3, [r3, #0]
 801d7c4:	3308      	adds	r3, #8
 801d7c6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801d7c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801d7ca:	e853 3f00 	ldrex	r3, [r3]
 801d7ce:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 801d7d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d7d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801d7d6:	67fb      	str	r3, [r7, #124]	; 0x7c
 801d7d8:	68fb      	ldr	r3, [r7, #12]
 801d7da:	681b      	ldr	r3, [r3, #0]
 801d7dc:	3308      	adds	r3, #8
 801d7de:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 801d7e0:	64ba      	str	r2, [r7, #72]	; 0x48
 801d7e2:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801d7e4:	6c79      	ldr	r1, [r7, #68]	; 0x44
 801d7e6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801d7e8:	e841 2300 	strex	r3, r2, [r1]
 801d7ec:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 801d7ee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801d7f0:	2b00      	cmp	r3, #0
 801d7f2:	d1e5      	bne.n	801d7c0 <UART_Start_Receive_IT+0x160>
 801d7f4:	e046      	b.n	801d884 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801d7f6:	68fb      	ldr	r3, [r7, #12]
 801d7f8:	689b      	ldr	r3, [r3, #8]
 801d7fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801d7fe:	d107      	bne.n	801d810 <UART_Start_Receive_IT+0x1b0>
 801d800:	68fb      	ldr	r3, [r7, #12]
 801d802:	691b      	ldr	r3, [r3, #16]
 801d804:	2b00      	cmp	r3, #0
 801d806:	d103      	bne.n	801d810 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 801d808:	68fb      	ldr	r3, [r7, #12]
 801d80a:	4a24      	ldr	r2, [pc, #144]	; (801d89c <UART_Start_Receive_IT+0x23c>)
 801d80c:	675a      	str	r2, [r3, #116]	; 0x74
 801d80e:	e002      	b.n	801d816 <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 801d810:	68fb      	ldr	r3, [r7, #12]
 801d812:	4a23      	ldr	r2, [pc, #140]	; (801d8a0 <UART_Start_Receive_IT+0x240>)
 801d814:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 801d816:	68fb      	ldr	r3, [r7, #12]
 801d818:	691b      	ldr	r3, [r3, #16]
 801d81a:	2b00      	cmp	r3, #0
 801d81c:	d019      	beq.n	801d852 <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 801d81e:	68fb      	ldr	r3, [r7, #12]
 801d820:	681b      	ldr	r3, [r3, #0]
 801d822:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801d824:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d826:	e853 3f00 	ldrex	r3, [r3]
 801d82a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 801d82c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d82e:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 801d832:	677b      	str	r3, [r7, #116]	; 0x74
 801d834:	68fb      	ldr	r3, [r7, #12]
 801d836:	681b      	ldr	r3, [r3, #0]
 801d838:	461a      	mov	r2, r3
 801d83a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801d83c:	637b      	str	r3, [r7, #52]	; 0x34
 801d83e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801d840:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801d842:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801d844:	e841 2300 	strex	r3, r2, [r1]
 801d848:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 801d84a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d84c:	2b00      	cmp	r3, #0
 801d84e:	d1e6      	bne.n	801d81e <UART_Start_Receive_IT+0x1be>
 801d850:	e018      	b.n	801d884 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 801d852:	68fb      	ldr	r3, [r7, #12]
 801d854:	681b      	ldr	r3, [r3, #0]
 801d856:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801d858:	697b      	ldr	r3, [r7, #20]
 801d85a:	e853 3f00 	ldrex	r3, [r3]
 801d85e:	613b      	str	r3, [r7, #16]
   return(result);
 801d860:	693b      	ldr	r3, [r7, #16]
 801d862:	f043 0320 	orr.w	r3, r3, #32
 801d866:	67bb      	str	r3, [r7, #120]	; 0x78
 801d868:	68fb      	ldr	r3, [r7, #12]
 801d86a:	681b      	ldr	r3, [r3, #0]
 801d86c:	461a      	mov	r2, r3
 801d86e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801d870:	623b      	str	r3, [r7, #32]
 801d872:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801d874:	69f9      	ldr	r1, [r7, #28]
 801d876:	6a3a      	ldr	r2, [r7, #32]
 801d878:	e841 2300 	strex	r3, r2, [r1]
 801d87c:	61bb      	str	r3, [r7, #24]
   return(result);
 801d87e:	69bb      	ldr	r3, [r7, #24]
 801d880:	2b00      	cmp	r3, #0
 801d882:	d1e6      	bne.n	801d852 <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 801d884:	2300      	movs	r3, #0
}
 801d886:	4618      	mov	r0, r3
 801d888:	378c      	adds	r7, #140	; 0x8c
 801d88a:	46bd      	mov	sp, r7
 801d88c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d890:	4770      	bx	lr
 801d892:	bf00      	nop
 801d894:	0801e0c5 	.word	0x0801e0c5
 801d898:	0801dd65 	.word	0x0801dd65
 801d89c:	0801dbad 	.word	0x0801dbad
 801d8a0:	0801d9f5 	.word	0x0801d9f5

0801d8a4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 801d8a4:	b480      	push	{r7}
 801d8a6:	b095      	sub	sp, #84	; 0x54
 801d8a8:	af00      	add	r7, sp, #0
 801d8aa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 801d8ac:	687b      	ldr	r3, [r7, #4]
 801d8ae:	681b      	ldr	r3, [r3, #0]
 801d8b0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801d8b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801d8b4:	e853 3f00 	ldrex	r3, [r3]
 801d8b8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 801d8ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d8bc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 801d8c0:	64fb      	str	r3, [r7, #76]	; 0x4c
 801d8c2:	687b      	ldr	r3, [r7, #4]
 801d8c4:	681b      	ldr	r3, [r3, #0]
 801d8c6:	461a      	mov	r2, r3
 801d8c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801d8ca:	643b      	str	r3, [r7, #64]	; 0x40
 801d8cc:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801d8ce:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 801d8d0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801d8d2:	e841 2300 	strex	r3, r2, [r1]
 801d8d6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 801d8d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d8da:	2b00      	cmp	r3, #0
 801d8dc:	d1e6      	bne.n	801d8ac <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 801d8de:	687b      	ldr	r3, [r7, #4]
 801d8e0:	681b      	ldr	r3, [r3, #0]
 801d8e2:	3308      	adds	r3, #8
 801d8e4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801d8e6:	6a3b      	ldr	r3, [r7, #32]
 801d8e8:	e853 3f00 	ldrex	r3, [r3]
 801d8ec:	61fb      	str	r3, [r7, #28]
   return(result);
 801d8ee:	69fb      	ldr	r3, [r7, #28]
 801d8f0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 801d8f4:	f023 0301 	bic.w	r3, r3, #1
 801d8f8:	64bb      	str	r3, [r7, #72]	; 0x48
 801d8fa:	687b      	ldr	r3, [r7, #4]
 801d8fc:	681b      	ldr	r3, [r3, #0]
 801d8fe:	3308      	adds	r3, #8
 801d900:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801d902:	62fa      	str	r2, [r7, #44]	; 0x2c
 801d904:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801d906:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801d908:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801d90a:	e841 2300 	strex	r3, r2, [r1]
 801d90e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 801d910:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d912:	2b00      	cmp	r3, #0
 801d914:	d1e3      	bne.n	801d8de <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801d916:	687b      	ldr	r3, [r7, #4]
 801d918:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801d91a:	2b01      	cmp	r3, #1
 801d91c:	d118      	bne.n	801d950 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801d91e:	687b      	ldr	r3, [r7, #4]
 801d920:	681b      	ldr	r3, [r3, #0]
 801d922:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801d924:	68fb      	ldr	r3, [r7, #12]
 801d926:	e853 3f00 	ldrex	r3, [r3]
 801d92a:	60bb      	str	r3, [r7, #8]
   return(result);
 801d92c:	68bb      	ldr	r3, [r7, #8]
 801d92e:	f023 0310 	bic.w	r3, r3, #16
 801d932:	647b      	str	r3, [r7, #68]	; 0x44
 801d934:	687b      	ldr	r3, [r7, #4]
 801d936:	681b      	ldr	r3, [r3, #0]
 801d938:	461a      	mov	r2, r3
 801d93a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801d93c:	61bb      	str	r3, [r7, #24]
 801d93e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801d940:	6979      	ldr	r1, [r7, #20]
 801d942:	69ba      	ldr	r2, [r7, #24]
 801d944:	e841 2300 	strex	r3, r2, [r1]
 801d948:	613b      	str	r3, [r7, #16]
   return(result);
 801d94a:	693b      	ldr	r3, [r7, #16]
 801d94c:	2b00      	cmp	r3, #0
 801d94e:	d1e6      	bne.n	801d91e <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 801d950:	687b      	ldr	r3, [r7, #4]
 801d952:	2220      	movs	r2, #32
 801d954:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801d958:	687b      	ldr	r3, [r7, #4]
 801d95a:	2200      	movs	r2, #0
 801d95c:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 801d95e:	687b      	ldr	r3, [r7, #4]
 801d960:	2200      	movs	r2, #0
 801d962:	675a      	str	r2, [r3, #116]	; 0x74
}
 801d964:	bf00      	nop
 801d966:	3754      	adds	r7, #84	; 0x54
 801d968:	46bd      	mov	sp, r7
 801d96a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d96e:	4770      	bx	lr

0801d970 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 801d970:	b580      	push	{r7, lr}
 801d972:	b084      	sub	sp, #16
 801d974:	af00      	add	r7, sp, #0
 801d976:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 801d978:	687b      	ldr	r3, [r7, #4]
 801d97a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801d97c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 801d97e:	68fb      	ldr	r3, [r7, #12]
 801d980:	2200      	movs	r2, #0
 801d982:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 801d986:	68fb      	ldr	r3, [r7, #12]
 801d988:	2200      	movs	r2, #0
 801d98a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 801d98e:	68f8      	ldr	r0, [r7, #12]
 801d990:	f7ff f99c 	bl	801cccc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801d994:	bf00      	nop
 801d996:	3710      	adds	r7, #16
 801d998:	46bd      	mov	sp, r7
 801d99a:	bd80      	pop	{r7, pc}

0801d99c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 801d99c:	b580      	push	{r7, lr}
 801d99e:	b088      	sub	sp, #32
 801d9a0:	af00      	add	r7, sp, #0
 801d9a2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 801d9a4:	687b      	ldr	r3, [r7, #4]
 801d9a6:	681b      	ldr	r3, [r3, #0]
 801d9a8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801d9aa:	68fb      	ldr	r3, [r7, #12]
 801d9ac:	e853 3f00 	ldrex	r3, [r3]
 801d9b0:	60bb      	str	r3, [r7, #8]
   return(result);
 801d9b2:	68bb      	ldr	r3, [r7, #8]
 801d9b4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801d9b8:	61fb      	str	r3, [r7, #28]
 801d9ba:	687b      	ldr	r3, [r7, #4]
 801d9bc:	681b      	ldr	r3, [r3, #0]
 801d9be:	461a      	mov	r2, r3
 801d9c0:	69fb      	ldr	r3, [r7, #28]
 801d9c2:	61bb      	str	r3, [r7, #24]
 801d9c4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801d9c6:	6979      	ldr	r1, [r7, #20]
 801d9c8:	69ba      	ldr	r2, [r7, #24]
 801d9ca:	e841 2300 	strex	r3, r2, [r1]
 801d9ce:	613b      	str	r3, [r7, #16]
   return(result);
 801d9d0:	693b      	ldr	r3, [r7, #16]
 801d9d2:	2b00      	cmp	r3, #0
 801d9d4:	d1e6      	bne.n	801d9a4 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 801d9d6:	687b      	ldr	r3, [r7, #4]
 801d9d8:	2220      	movs	r2, #32
 801d9da:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 801d9de:	687b      	ldr	r3, [r7, #4]
 801d9e0:	2200      	movs	r2, #0
 801d9e2:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 801d9e4:	6878      	ldr	r0, [r7, #4]
 801d9e6:	f7ff f967 	bl	801ccb8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801d9ea:	bf00      	nop
 801d9ec:	3720      	adds	r7, #32
 801d9ee:	46bd      	mov	sp, r7
 801d9f0:	bd80      	pop	{r7, pc}
	...

0801d9f4 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 801d9f4:	b580      	push	{r7, lr}
 801d9f6:	b09c      	sub	sp, #112	; 0x70
 801d9f8:	af00      	add	r7, sp, #0
 801d9fa:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 801d9fc:	687b      	ldr	r3, [r7, #4]
 801d9fe:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801da02:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 801da06:	687b      	ldr	r3, [r7, #4]
 801da08:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801da0c:	2b22      	cmp	r3, #34	; 0x22
 801da0e:	f040 80be 	bne.w	801db8e <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 801da12:	687b      	ldr	r3, [r7, #4]
 801da14:	681b      	ldr	r3, [r3, #0]
 801da16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801da18:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 801da1c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 801da20:	b2d9      	uxtb	r1, r3
 801da22:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 801da26:	b2da      	uxtb	r2, r3
 801da28:	687b      	ldr	r3, [r7, #4]
 801da2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801da2c:	400a      	ands	r2, r1
 801da2e:	b2d2      	uxtb	r2, r2
 801da30:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 801da32:	687b      	ldr	r3, [r7, #4]
 801da34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801da36:	1c5a      	adds	r2, r3, #1
 801da38:	687b      	ldr	r3, [r7, #4]
 801da3a:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 801da3c:	687b      	ldr	r3, [r7, #4]
 801da3e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 801da42:	b29b      	uxth	r3, r3
 801da44:	3b01      	subs	r3, #1
 801da46:	b29a      	uxth	r2, r3
 801da48:	687b      	ldr	r3, [r7, #4]
 801da4a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 801da4e:	687b      	ldr	r3, [r7, #4]
 801da50:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 801da54:	b29b      	uxth	r3, r3
 801da56:	2b00      	cmp	r3, #0
 801da58:	f040 80a1 	bne.w	801db9e <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 801da5c:	687b      	ldr	r3, [r7, #4]
 801da5e:	681b      	ldr	r3, [r3, #0]
 801da60:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801da62:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801da64:	e853 3f00 	ldrex	r3, [r3]
 801da68:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 801da6a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801da6c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 801da70:	66bb      	str	r3, [r7, #104]	; 0x68
 801da72:	687b      	ldr	r3, [r7, #4]
 801da74:	681b      	ldr	r3, [r3, #0]
 801da76:	461a      	mov	r2, r3
 801da78:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801da7a:	65bb      	str	r3, [r7, #88]	; 0x58
 801da7c:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801da7e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 801da80:	6dba      	ldr	r2, [r7, #88]	; 0x58
 801da82:	e841 2300 	strex	r3, r2, [r1]
 801da86:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 801da88:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801da8a:	2b00      	cmp	r3, #0
 801da8c:	d1e6      	bne.n	801da5c <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801da8e:	687b      	ldr	r3, [r7, #4]
 801da90:	681b      	ldr	r3, [r3, #0]
 801da92:	3308      	adds	r3, #8
 801da94:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801da96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801da98:	e853 3f00 	ldrex	r3, [r3]
 801da9c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 801da9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801daa0:	f023 0301 	bic.w	r3, r3, #1
 801daa4:	667b      	str	r3, [r7, #100]	; 0x64
 801daa6:	687b      	ldr	r3, [r7, #4]
 801daa8:	681b      	ldr	r3, [r3, #0]
 801daaa:	3308      	adds	r3, #8
 801daac:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 801daae:	647a      	str	r2, [r7, #68]	; 0x44
 801dab0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801dab2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 801dab4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801dab6:	e841 2300 	strex	r3, r2, [r1]
 801daba:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 801dabc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801dabe:	2b00      	cmp	r3, #0
 801dac0:	d1e5      	bne.n	801da8e <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 801dac2:	687b      	ldr	r3, [r7, #4]
 801dac4:	2220      	movs	r2, #32
 801dac6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 801daca:	687b      	ldr	r3, [r7, #4]
 801dacc:	2200      	movs	r2, #0
 801dace:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 801dad0:	687b      	ldr	r3, [r7, #4]
 801dad2:	2200      	movs	r2, #0
 801dad4:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 801dad6:	687b      	ldr	r3, [r7, #4]
 801dad8:	681b      	ldr	r3, [r3, #0]
 801dada:	4a33      	ldr	r2, [pc, #204]	; (801dba8 <UART_RxISR_8BIT+0x1b4>)
 801dadc:	4293      	cmp	r3, r2
 801dade:	d01f      	beq.n	801db20 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 801dae0:	687b      	ldr	r3, [r7, #4]
 801dae2:	681b      	ldr	r3, [r3, #0]
 801dae4:	685b      	ldr	r3, [r3, #4]
 801dae6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 801daea:	2b00      	cmp	r3, #0
 801daec:	d018      	beq.n	801db20 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 801daee:	687b      	ldr	r3, [r7, #4]
 801daf0:	681b      	ldr	r3, [r3, #0]
 801daf2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801daf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801daf6:	e853 3f00 	ldrex	r3, [r3]
 801dafa:	623b      	str	r3, [r7, #32]
   return(result);
 801dafc:	6a3b      	ldr	r3, [r7, #32]
 801dafe:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 801db02:	663b      	str	r3, [r7, #96]	; 0x60
 801db04:	687b      	ldr	r3, [r7, #4]
 801db06:	681b      	ldr	r3, [r3, #0]
 801db08:	461a      	mov	r2, r3
 801db0a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801db0c:	633b      	str	r3, [r7, #48]	; 0x30
 801db0e:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801db10:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801db12:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801db14:	e841 2300 	strex	r3, r2, [r1]
 801db18:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 801db1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801db1c:	2b00      	cmp	r3, #0
 801db1e:	d1e6      	bne.n	801daee <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801db20:	687b      	ldr	r3, [r7, #4]
 801db22:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801db24:	2b01      	cmp	r3, #1
 801db26:	d12e      	bne.n	801db86 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801db28:	687b      	ldr	r3, [r7, #4]
 801db2a:	2200      	movs	r2, #0
 801db2c:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801db2e:	687b      	ldr	r3, [r7, #4]
 801db30:	681b      	ldr	r3, [r3, #0]
 801db32:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801db34:	693b      	ldr	r3, [r7, #16]
 801db36:	e853 3f00 	ldrex	r3, [r3]
 801db3a:	60fb      	str	r3, [r7, #12]
   return(result);
 801db3c:	68fb      	ldr	r3, [r7, #12]
 801db3e:	f023 0310 	bic.w	r3, r3, #16
 801db42:	65fb      	str	r3, [r7, #92]	; 0x5c
 801db44:	687b      	ldr	r3, [r7, #4]
 801db46:	681b      	ldr	r3, [r3, #0]
 801db48:	461a      	mov	r2, r3
 801db4a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801db4c:	61fb      	str	r3, [r7, #28]
 801db4e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801db50:	69b9      	ldr	r1, [r7, #24]
 801db52:	69fa      	ldr	r2, [r7, #28]
 801db54:	e841 2300 	strex	r3, r2, [r1]
 801db58:	617b      	str	r3, [r7, #20]
   return(result);
 801db5a:	697b      	ldr	r3, [r7, #20]
 801db5c:	2b00      	cmp	r3, #0
 801db5e:	d1e6      	bne.n	801db2e <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 801db60:	687b      	ldr	r3, [r7, #4]
 801db62:	681b      	ldr	r3, [r3, #0]
 801db64:	69db      	ldr	r3, [r3, #28]
 801db66:	f003 0310 	and.w	r3, r3, #16
 801db6a:	2b10      	cmp	r3, #16
 801db6c:	d103      	bne.n	801db76 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 801db6e:	687b      	ldr	r3, [r7, #4]
 801db70:	681b      	ldr	r3, [r3, #0]
 801db72:	2210      	movs	r2, #16
 801db74:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 801db76:	687b      	ldr	r3, [r7, #4]
 801db78:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 801db7c:	4619      	mov	r1, r3
 801db7e:	6878      	ldr	r0, [r7, #4]
 801db80:	f7ff f8ae 	bl	801cce0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 801db84:	e00b      	b.n	801db9e <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 801db86:	6878      	ldr	r0, [r7, #4]
 801db88:	f7e6 fca8 	bl	80044dc <HAL_UART_RxCpltCallback>
}
 801db8c:	e007      	b.n	801db9e <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 801db8e:	687b      	ldr	r3, [r7, #4]
 801db90:	681b      	ldr	r3, [r3, #0]
 801db92:	699a      	ldr	r2, [r3, #24]
 801db94:	687b      	ldr	r3, [r7, #4]
 801db96:	681b      	ldr	r3, [r3, #0]
 801db98:	f042 0208 	orr.w	r2, r2, #8
 801db9c:	619a      	str	r2, [r3, #24]
}
 801db9e:	bf00      	nop
 801dba0:	3770      	adds	r7, #112	; 0x70
 801dba2:	46bd      	mov	sp, r7
 801dba4:	bd80      	pop	{r7, pc}
 801dba6:	bf00      	nop
 801dba8:	40008000 	.word	0x40008000

0801dbac <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 801dbac:	b580      	push	{r7, lr}
 801dbae:	b09c      	sub	sp, #112	; 0x70
 801dbb0:	af00      	add	r7, sp, #0
 801dbb2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 801dbb4:	687b      	ldr	r3, [r7, #4]
 801dbb6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801dbba:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 801dbbe:	687b      	ldr	r3, [r7, #4]
 801dbc0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801dbc4:	2b22      	cmp	r3, #34	; 0x22
 801dbc6:	f040 80be 	bne.w	801dd46 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 801dbca:	687b      	ldr	r3, [r7, #4]
 801dbcc:	681b      	ldr	r3, [r3, #0]
 801dbce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801dbd0:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 801dbd4:	687b      	ldr	r3, [r7, #4]
 801dbd6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801dbd8:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 801dbda:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 801dbde:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 801dbe2:	4013      	ands	r3, r2
 801dbe4:	b29a      	uxth	r2, r3
 801dbe6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801dbe8:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 801dbea:	687b      	ldr	r3, [r7, #4]
 801dbec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801dbee:	1c9a      	adds	r2, r3, #2
 801dbf0:	687b      	ldr	r3, [r7, #4]
 801dbf2:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 801dbf4:	687b      	ldr	r3, [r7, #4]
 801dbf6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 801dbfa:	b29b      	uxth	r3, r3
 801dbfc:	3b01      	subs	r3, #1
 801dbfe:	b29a      	uxth	r2, r3
 801dc00:	687b      	ldr	r3, [r7, #4]
 801dc02:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 801dc06:	687b      	ldr	r3, [r7, #4]
 801dc08:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 801dc0c:	b29b      	uxth	r3, r3
 801dc0e:	2b00      	cmp	r3, #0
 801dc10:	f040 80a1 	bne.w	801dd56 <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 801dc14:	687b      	ldr	r3, [r7, #4]
 801dc16:	681b      	ldr	r3, [r3, #0]
 801dc18:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801dc1a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801dc1c:	e853 3f00 	ldrex	r3, [r3]
 801dc20:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 801dc22:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801dc24:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 801dc28:	667b      	str	r3, [r7, #100]	; 0x64
 801dc2a:	687b      	ldr	r3, [r7, #4]
 801dc2c:	681b      	ldr	r3, [r3, #0]
 801dc2e:	461a      	mov	r2, r3
 801dc30:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801dc32:	657b      	str	r3, [r7, #84]	; 0x54
 801dc34:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801dc36:	6d39      	ldr	r1, [r7, #80]	; 0x50
 801dc38:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801dc3a:	e841 2300 	strex	r3, r2, [r1]
 801dc3e:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 801dc40:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801dc42:	2b00      	cmp	r3, #0
 801dc44:	d1e6      	bne.n	801dc14 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801dc46:	687b      	ldr	r3, [r7, #4]
 801dc48:	681b      	ldr	r3, [r3, #0]
 801dc4a:	3308      	adds	r3, #8
 801dc4c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801dc4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801dc50:	e853 3f00 	ldrex	r3, [r3]
 801dc54:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 801dc56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801dc58:	f023 0301 	bic.w	r3, r3, #1
 801dc5c:	663b      	str	r3, [r7, #96]	; 0x60
 801dc5e:	687b      	ldr	r3, [r7, #4]
 801dc60:	681b      	ldr	r3, [r3, #0]
 801dc62:	3308      	adds	r3, #8
 801dc64:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 801dc66:	643a      	str	r2, [r7, #64]	; 0x40
 801dc68:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801dc6a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 801dc6c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801dc6e:	e841 2300 	strex	r3, r2, [r1]
 801dc72:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 801dc74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801dc76:	2b00      	cmp	r3, #0
 801dc78:	d1e5      	bne.n	801dc46 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 801dc7a:	687b      	ldr	r3, [r7, #4]
 801dc7c:	2220      	movs	r2, #32
 801dc7e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 801dc82:	687b      	ldr	r3, [r7, #4]
 801dc84:	2200      	movs	r2, #0
 801dc86:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 801dc88:	687b      	ldr	r3, [r7, #4]
 801dc8a:	2200      	movs	r2, #0
 801dc8c:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 801dc8e:	687b      	ldr	r3, [r7, #4]
 801dc90:	681b      	ldr	r3, [r3, #0]
 801dc92:	4a33      	ldr	r2, [pc, #204]	; (801dd60 <UART_RxISR_16BIT+0x1b4>)
 801dc94:	4293      	cmp	r3, r2
 801dc96:	d01f      	beq.n	801dcd8 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 801dc98:	687b      	ldr	r3, [r7, #4]
 801dc9a:	681b      	ldr	r3, [r3, #0]
 801dc9c:	685b      	ldr	r3, [r3, #4]
 801dc9e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 801dca2:	2b00      	cmp	r3, #0
 801dca4:	d018      	beq.n	801dcd8 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 801dca6:	687b      	ldr	r3, [r7, #4]
 801dca8:	681b      	ldr	r3, [r3, #0]
 801dcaa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801dcac:	6a3b      	ldr	r3, [r7, #32]
 801dcae:	e853 3f00 	ldrex	r3, [r3]
 801dcb2:	61fb      	str	r3, [r7, #28]
   return(result);
 801dcb4:	69fb      	ldr	r3, [r7, #28]
 801dcb6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 801dcba:	65fb      	str	r3, [r7, #92]	; 0x5c
 801dcbc:	687b      	ldr	r3, [r7, #4]
 801dcbe:	681b      	ldr	r3, [r3, #0]
 801dcc0:	461a      	mov	r2, r3
 801dcc2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801dcc4:	62fb      	str	r3, [r7, #44]	; 0x2c
 801dcc6:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801dcc8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801dcca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801dccc:	e841 2300 	strex	r3, r2, [r1]
 801dcd0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 801dcd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801dcd4:	2b00      	cmp	r3, #0
 801dcd6:	d1e6      	bne.n	801dca6 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801dcd8:	687b      	ldr	r3, [r7, #4]
 801dcda:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801dcdc:	2b01      	cmp	r3, #1
 801dcde:	d12e      	bne.n	801dd3e <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801dce0:	687b      	ldr	r3, [r7, #4]
 801dce2:	2200      	movs	r2, #0
 801dce4:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801dce6:	687b      	ldr	r3, [r7, #4]
 801dce8:	681b      	ldr	r3, [r3, #0]
 801dcea:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801dcec:	68fb      	ldr	r3, [r7, #12]
 801dcee:	e853 3f00 	ldrex	r3, [r3]
 801dcf2:	60bb      	str	r3, [r7, #8]
   return(result);
 801dcf4:	68bb      	ldr	r3, [r7, #8]
 801dcf6:	f023 0310 	bic.w	r3, r3, #16
 801dcfa:	65bb      	str	r3, [r7, #88]	; 0x58
 801dcfc:	687b      	ldr	r3, [r7, #4]
 801dcfe:	681b      	ldr	r3, [r3, #0]
 801dd00:	461a      	mov	r2, r3
 801dd02:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801dd04:	61bb      	str	r3, [r7, #24]
 801dd06:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801dd08:	6979      	ldr	r1, [r7, #20]
 801dd0a:	69ba      	ldr	r2, [r7, #24]
 801dd0c:	e841 2300 	strex	r3, r2, [r1]
 801dd10:	613b      	str	r3, [r7, #16]
   return(result);
 801dd12:	693b      	ldr	r3, [r7, #16]
 801dd14:	2b00      	cmp	r3, #0
 801dd16:	d1e6      	bne.n	801dce6 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 801dd18:	687b      	ldr	r3, [r7, #4]
 801dd1a:	681b      	ldr	r3, [r3, #0]
 801dd1c:	69db      	ldr	r3, [r3, #28]
 801dd1e:	f003 0310 	and.w	r3, r3, #16
 801dd22:	2b10      	cmp	r3, #16
 801dd24:	d103      	bne.n	801dd2e <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 801dd26:	687b      	ldr	r3, [r7, #4]
 801dd28:	681b      	ldr	r3, [r3, #0]
 801dd2a:	2210      	movs	r2, #16
 801dd2c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 801dd2e:	687b      	ldr	r3, [r7, #4]
 801dd30:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 801dd34:	4619      	mov	r1, r3
 801dd36:	6878      	ldr	r0, [r7, #4]
 801dd38:	f7fe ffd2 	bl	801cce0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 801dd3c:	e00b      	b.n	801dd56 <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 801dd3e:	6878      	ldr	r0, [r7, #4]
 801dd40:	f7e6 fbcc 	bl	80044dc <HAL_UART_RxCpltCallback>
}
 801dd44:	e007      	b.n	801dd56 <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 801dd46:	687b      	ldr	r3, [r7, #4]
 801dd48:	681b      	ldr	r3, [r3, #0]
 801dd4a:	699a      	ldr	r2, [r3, #24]
 801dd4c:	687b      	ldr	r3, [r7, #4]
 801dd4e:	681b      	ldr	r3, [r3, #0]
 801dd50:	f042 0208 	orr.w	r2, r2, #8
 801dd54:	619a      	str	r2, [r3, #24]
}
 801dd56:	bf00      	nop
 801dd58:	3770      	adds	r7, #112	; 0x70
 801dd5a:	46bd      	mov	sp, r7
 801dd5c:	bd80      	pop	{r7, pc}
 801dd5e:	bf00      	nop
 801dd60:	40008000 	.word	0x40008000

0801dd64 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 801dd64:	b580      	push	{r7, lr}
 801dd66:	b0ac      	sub	sp, #176	; 0xb0
 801dd68:	af00      	add	r7, sp, #0
 801dd6a:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 801dd6c:	687b      	ldr	r3, [r7, #4]
 801dd6e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801dd72:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 801dd76:	687b      	ldr	r3, [r7, #4]
 801dd78:	681b      	ldr	r3, [r3, #0]
 801dd7a:	69db      	ldr	r3, [r3, #28]
 801dd7c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 801dd80:	687b      	ldr	r3, [r7, #4]
 801dd82:	681b      	ldr	r3, [r3, #0]
 801dd84:	681b      	ldr	r3, [r3, #0]
 801dd86:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 801dd8a:	687b      	ldr	r3, [r7, #4]
 801dd8c:	681b      	ldr	r3, [r3, #0]
 801dd8e:	689b      	ldr	r3, [r3, #8]
 801dd90:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 801dd94:	687b      	ldr	r3, [r7, #4]
 801dd96:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801dd9a:	2b22      	cmp	r3, #34	; 0x22
 801dd9c:	f040 8182 	bne.w	801e0a4 <UART_RxISR_8BIT_FIFOEN+0x340>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 801dda0:	687b      	ldr	r3, [r7, #4]
 801dda2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 801dda6:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 801ddaa:	e125      	b.n	801dff8 <UART_RxISR_8BIT_FIFOEN+0x294>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 801ddac:	687b      	ldr	r3, [r7, #4]
 801ddae:	681b      	ldr	r3, [r3, #0]
 801ddb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801ddb2:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 801ddb6:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 801ddba:	b2d9      	uxtb	r1, r3
 801ddbc:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 801ddc0:	b2da      	uxtb	r2, r3
 801ddc2:	687b      	ldr	r3, [r7, #4]
 801ddc4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801ddc6:	400a      	ands	r2, r1
 801ddc8:	b2d2      	uxtb	r2, r2
 801ddca:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 801ddcc:	687b      	ldr	r3, [r7, #4]
 801ddce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801ddd0:	1c5a      	adds	r2, r3, #1
 801ddd2:	687b      	ldr	r3, [r7, #4]
 801ddd4:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 801ddd6:	687b      	ldr	r3, [r7, #4]
 801ddd8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 801dddc:	b29b      	uxth	r3, r3
 801ddde:	3b01      	subs	r3, #1
 801dde0:	b29a      	uxth	r2, r3
 801dde2:	687b      	ldr	r3, [r7, #4]
 801dde4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 801dde8:	687b      	ldr	r3, [r7, #4]
 801ddea:	681b      	ldr	r3, [r3, #0]
 801ddec:	69db      	ldr	r3, [r3, #28]
 801ddee:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 801ddf2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 801ddf6:	f003 0307 	and.w	r3, r3, #7
 801ddfa:	2b00      	cmp	r3, #0
 801ddfc:	d053      	beq.n	801dea6 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 801ddfe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 801de02:	f003 0301 	and.w	r3, r3, #1
 801de06:	2b00      	cmp	r3, #0
 801de08:	d011      	beq.n	801de2e <UART_RxISR_8BIT_FIFOEN+0xca>
 801de0a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 801de0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801de12:	2b00      	cmp	r3, #0
 801de14:	d00b      	beq.n	801de2e <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 801de16:	687b      	ldr	r3, [r7, #4]
 801de18:	681b      	ldr	r3, [r3, #0]
 801de1a:	2201      	movs	r2, #1
 801de1c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 801de1e:	687b      	ldr	r3, [r7, #4]
 801de20:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801de24:	f043 0201 	orr.w	r2, r3, #1
 801de28:	687b      	ldr	r3, [r7, #4]
 801de2a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 801de2e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 801de32:	f003 0302 	and.w	r3, r3, #2
 801de36:	2b00      	cmp	r3, #0
 801de38:	d011      	beq.n	801de5e <UART_RxISR_8BIT_FIFOEN+0xfa>
 801de3a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 801de3e:	f003 0301 	and.w	r3, r3, #1
 801de42:	2b00      	cmp	r3, #0
 801de44:	d00b      	beq.n	801de5e <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 801de46:	687b      	ldr	r3, [r7, #4]
 801de48:	681b      	ldr	r3, [r3, #0]
 801de4a:	2202      	movs	r2, #2
 801de4c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 801de4e:	687b      	ldr	r3, [r7, #4]
 801de50:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801de54:	f043 0204 	orr.w	r2, r3, #4
 801de58:	687b      	ldr	r3, [r7, #4]
 801de5a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 801de5e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 801de62:	f003 0304 	and.w	r3, r3, #4
 801de66:	2b00      	cmp	r3, #0
 801de68:	d011      	beq.n	801de8e <UART_RxISR_8BIT_FIFOEN+0x12a>
 801de6a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 801de6e:	f003 0301 	and.w	r3, r3, #1
 801de72:	2b00      	cmp	r3, #0
 801de74:	d00b      	beq.n	801de8e <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 801de76:	687b      	ldr	r3, [r7, #4]
 801de78:	681b      	ldr	r3, [r3, #0]
 801de7a:	2204      	movs	r2, #4
 801de7c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 801de7e:	687b      	ldr	r3, [r7, #4]
 801de80:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801de84:	f043 0202 	orr.w	r2, r3, #2
 801de88:	687b      	ldr	r3, [r7, #4]
 801de8a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 801de8e:	687b      	ldr	r3, [r7, #4]
 801de90:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801de94:	2b00      	cmp	r3, #0
 801de96:	d006      	beq.n	801dea6 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 801de98:	6878      	ldr	r0, [r7, #4]
 801de9a:	f7fe ff17 	bl	801cccc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 801de9e:	687b      	ldr	r3, [r7, #4]
 801dea0:	2200      	movs	r2, #0
 801dea2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 801dea6:	687b      	ldr	r3, [r7, #4]
 801dea8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 801deac:	b29b      	uxth	r3, r3
 801deae:	2b00      	cmp	r3, #0
 801deb0:	f040 80a2 	bne.w	801dff8 <UART_RxISR_8BIT_FIFOEN+0x294>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 801deb4:	687b      	ldr	r3, [r7, #4]
 801deb6:	681b      	ldr	r3, [r3, #0]
 801deb8:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801deba:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801debc:	e853 3f00 	ldrex	r3, [r3]
 801dec0:	66fb      	str	r3, [r7, #108]	; 0x6c
   return(result);
 801dec2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801dec4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801dec8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 801decc:	687b      	ldr	r3, [r7, #4]
 801dece:	681b      	ldr	r3, [r3, #0]
 801ded0:	461a      	mov	r2, r3
 801ded2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 801ded6:	67fb      	str	r3, [r7, #124]	; 0x7c
 801ded8:	67ba      	str	r2, [r7, #120]	; 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801deda:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 801dedc:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 801dede:	e841 2300 	strex	r3, r2, [r1]
 801dee2:	677b      	str	r3, [r7, #116]	; 0x74
   return(result);
 801dee4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801dee6:	2b00      	cmp	r3, #0
 801dee8:	d1e4      	bne.n	801deb4 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 801deea:	687b      	ldr	r3, [r7, #4]
 801deec:	681b      	ldr	r3, [r3, #0]
 801deee:	3308      	adds	r3, #8
 801def0:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801def2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801def4:	e853 3f00 	ldrex	r3, [r3]
 801def8:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 801defa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801defc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 801df00:	f023 0301 	bic.w	r3, r3, #1
 801df04:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 801df08:	687b      	ldr	r3, [r7, #4]
 801df0a:	681b      	ldr	r3, [r3, #0]
 801df0c:	3308      	adds	r3, #8
 801df0e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 801df12:	66ba      	str	r2, [r7, #104]	; 0x68
 801df14:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801df16:	6e79      	ldr	r1, [r7, #100]	; 0x64
 801df18:	6eba      	ldr	r2, [r7, #104]	; 0x68
 801df1a:	e841 2300 	strex	r3, r2, [r1]
 801df1e:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 801df20:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801df22:	2b00      	cmp	r3, #0
 801df24:	d1e1      	bne.n	801deea <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 801df26:	687b      	ldr	r3, [r7, #4]
 801df28:	2220      	movs	r2, #32
 801df2a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 801df2e:	687b      	ldr	r3, [r7, #4]
 801df30:	2200      	movs	r2, #0
 801df32:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 801df34:	687b      	ldr	r3, [r7, #4]
 801df36:	2200      	movs	r2, #0
 801df38:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 801df3a:	687b      	ldr	r3, [r7, #4]
 801df3c:	681b      	ldr	r3, [r3, #0]
 801df3e:	4a5f      	ldr	r2, [pc, #380]	; (801e0bc <UART_RxISR_8BIT_FIFOEN+0x358>)
 801df40:	4293      	cmp	r3, r2
 801df42:	d021      	beq.n	801df88 <UART_RxISR_8BIT_FIFOEN+0x224>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 801df44:	687b      	ldr	r3, [r7, #4]
 801df46:	681b      	ldr	r3, [r3, #0]
 801df48:	685b      	ldr	r3, [r3, #4]
 801df4a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 801df4e:	2b00      	cmp	r3, #0
 801df50:	d01a      	beq.n	801df88 <UART_RxISR_8BIT_FIFOEN+0x224>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 801df52:	687b      	ldr	r3, [r7, #4]
 801df54:	681b      	ldr	r3, [r3, #0]
 801df56:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801df58:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801df5a:	e853 3f00 	ldrex	r3, [r3]
 801df5e:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 801df60:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801df62:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 801df66:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 801df6a:	687b      	ldr	r3, [r7, #4]
 801df6c:	681b      	ldr	r3, [r3, #0]
 801df6e:	461a      	mov	r2, r3
 801df70:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801df74:	657b      	str	r3, [r7, #84]	; 0x54
 801df76:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801df78:	6d39      	ldr	r1, [r7, #80]	; 0x50
 801df7a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801df7c:	e841 2300 	strex	r3, r2, [r1]
 801df80:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 801df82:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801df84:	2b00      	cmp	r3, #0
 801df86:	d1e4      	bne.n	801df52 <UART_RxISR_8BIT_FIFOEN+0x1ee>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801df88:	687b      	ldr	r3, [r7, #4]
 801df8a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801df8c:	2b01      	cmp	r3, #1
 801df8e:	d130      	bne.n	801dff2 <UART_RxISR_8BIT_FIFOEN+0x28e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801df90:	687b      	ldr	r3, [r7, #4]
 801df92:	2200      	movs	r2, #0
 801df94:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801df96:	687b      	ldr	r3, [r7, #4]
 801df98:	681b      	ldr	r3, [r3, #0]
 801df9a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801df9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801df9e:	e853 3f00 	ldrex	r3, [r3]
 801dfa2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 801dfa4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801dfa6:	f023 0310 	bic.w	r3, r3, #16
 801dfaa:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 801dfae:	687b      	ldr	r3, [r7, #4]
 801dfb0:	681b      	ldr	r3, [r3, #0]
 801dfb2:	461a      	mov	r2, r3
 801dfb4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801dfb8:	643b      	str	r3, [r7, #64]	; 0x40
 801dfba:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801dfbc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 801dfbe:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801dfc0:	e841 2300 	strex	r3, r2, [r1]
 801dfc4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 801dfc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801dfc8:	2b00      	cmp	r3, #0
 801dfca:	d1e4      	bne.n	801df96 <UART_RxISR_8BIT_FIFOEN+0x232>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 801dfcc:	687b      	ldr	r3, [r7, #4]
 801dfce:	681b      	ldr	r3, [r3, #0]
 801dfd0:	69db      	ldr	r3, [r3, #28]
 801dfd2:	f003 0310 	and.w	r3, r3, #16
 801dfd6:	2b10      	cmp	r3, #16
 801dfd8:	d103      	bne.n	801dfe2 <UART_RxISR_8BIT_FIFOEN+0x27e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 801dfda:	687b      	ldr	r3, [r7, #4]
 801dfdc:	681b      	ldr	r3, [r3, #0]
 801dfde:	2210      	movs	r2, #16
 801dfe0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 801dfe2:	687b      	ldr	r3, [r7, #4]
 801dfe4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 801dfe8:	4619      	mov	r1, r3
 801dfea:	6878      	ldr	r0, [r7, #4]
 801dfec:	f7fe fe78 	bl	801cce0 <HAL_UARTEx_RxEventCallback>
 801dff0:	e002      	b.n	801dff8 <UART_RxISR_8BIT_FIFOEN+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 801dff2:	6878      	ldr	r0, [r7, #4]
 801dff4:	f7e6 fa72 	bl	80044dc <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 801dff8:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 801dffc:	2b00      	cmp	r3, #0
 801dffe:	d006      	beq.n	801e00e <UART_RxISR_8BIT_FIFOEN+0x2aa>
 801e000:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 801e004:	f003 0320 	and.w	r3, r3, #32
 801e008:	2b00      	cmp	r3, #0
 801e00a:	f47f aecf 	bne.w	801ddac <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 801e00e:	687b      	ldr	r3, [r7, #4]
 801e010:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 801e014:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 801e018:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 801e01c:	2b00      	cmp	r3, #0
 801e01e:	d049      	beq.n	801e0b4 <UART_RxISR_8BIT_FIFOEN+0x350>
 801e020:	687b      	ldr	r3, [r7, #4]
 801e022:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 801e026:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 801e02a:	429a      	cmp	r2, r3
 801e02c:	d242      	bcs.n	801e0b4 <UART_RxISR_8BIT_FIFOEN+0x350>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 801e02e:	687b      	ldr	r3, [r7, #4]
 801e030:	681b      	ldr	r3, [r3, #0]
 801e032:	3308      	adds	r3, #8
 801e034:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801e036:	6a3b      	ldr	r3, [r7, #32]
 801e038:	e853 3f00 	ldrex	r3, [r3]
 801e03c:	61fb      	str	r3, [r7, #28]
   return(result);
 801e03e:	69fb      	ldr	r3, [r7, #28]
 801e040:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 801e044:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 801e048:	687b      	ldr	r3, [r7, #4]
 801e04a:	681b      	ldr	r3, [r3, #0]
 801e04c:	3308      	adds	r3, #8
 801e04e:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 801e052:	62fa      	str	r2, [r7, #44]	; 0x2c
 801e054:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801e056:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801e058:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801e05a:	e841 2300 	strex	r3, r2, [r1]
 801e05e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 801e060:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e062:	2b00      	cmp	r3, #0
 801e064:	d1e3      	bne.n	801e02e <UART_RxISR_8BIT_FIFOEN+0x2ca>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 801e066:	687b      	ldr	r3, [r7, #4]
 801e068:	4a15      	ldr	r2, [pc, #84]	; (801e0c0 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 801e06a:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 801e06c:	687b      	ldr	r3, [r7, #4]
 801e06e:	681b      	ldr	r3, [r3, #0]
 801e070:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801e072:	68fb      	ldr	r3, [r7, #12]
 801e074:	e853 3f00 	ldrex	r3, [r3]
 801e078:	60bb      	str	r3, [r7, #8]
   return(result);
 801e07a:	68bb      	ldr	r3, [r7, #8]
 801e07c:	f043 0320 	orr.w	r3, r3, #32
 801e080:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 801e084:	687b      	ldr	r3, [r7, #4]
 801e086:	681b      	ldr	r3, [r3, #0]
 801e088:	461a      	mov	r2, r3
 801e08a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 801e08e:	61bb      	str	r3, [r7, #24]
 801e090:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801e092:	6979      	ldr	r1, [r7, #20]
 801e094:	69ba      	ldr	r2, [r7, #24]
 801e096:	e841 2300 	strex	r3, r2, [r1]
 801e09a:	613b      	str	r3, [r7, #16]
   return(result);
 801e09c:	693b      	ldr	r3, [r7, #16]
 801e09e:	2b00      	cmp	r3, #0
 801e0a0:	d1e4      	bne.n	801e06c <UART_RxISR_8BIT_FIFOEN+0x308>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 801e0a2:	e007      	b.n	801e0b4 <UART_RxISR_8BIT_FIFOEN+0x350>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 801e0a4:	687b      	ldr	r3, [r7, #4]
 801e0a6:	681b      	ldr	r3, [r3, #0]
 801e0a8:	699a      	ldr	r2, [r3, #24]
 801e0aa:	687b      	ldr	r3, [r7, #4]
 801e0ac:	681b      	ldr	r3, [r3, #0]
 801e0ae:	f042 0208 	orr.w	r2, r2, #8
 801e0b2:	619a      	str	r2, [r3, #24]
}
 801e0b4:	bf00      	nop
 801e0b6:	37b0      	adds	r7, #176	; 0xb0
 801e0b8:	46bd      	mov	sp, r7
 801e0ba:	bd80      	pop	{r7, pc}
 801e0bc:	40008000 	.word	0x40008000
 801e0c0:	0801d9f5 	.word	0x0801d9f5

0801e0c4 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 801e0c4:	b580      	push	{r7, lr}
 801e0c6:	b0ae      	sub	sp, #184	; 0xb8
 801e0c8:	af00      	add	r7, sp, #0
 801e0ca:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 801e0cc:	687b      	ldr	r3, [r7, #4]
 801e0ce:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801e0d2:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 801e0d6:	687b      	ldr	r3, [r7, #4]
 801e0d8:	681b      	ldr	r3, [r3, #0]
 801e0da:	69db      	ldr	r3, [r3, #28]
 801e0dc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 801e0e0:	687b      	ldr	r3, [r7, #4]
 801e0e2:	681b      	ldr	r3, [r3, #0]
 801e0e4:	681b      	ldr	r3, [r3, #0]
 801e0e6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 801e0ea:	687b      	ldr	r3, [r7, #4]
 801e0ec:	681b      	ldr	r3, [r3, #0]
 801e0ee:	689b      	ldr	r3, [r3, #8]
 801e0f0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 801e0f4:	687b      	ldr	r3, [r7, #4]
 801e0f6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801e0fa:	2b22      	cmp	r3, #34	; 0x22
 801e0fc:	f040 8186 	bne.w	801e40c <UART_RxISR_16BIT_FIFOEN+0x348>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 801e100:	687b      	ldr	r3, [r7, #4]
 801e102:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 801e106:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 801e10a:	e129      	b.n	801e360 <UART_RxISR_16BIT_FIFOEN+0x29c>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 801e10c:	687b      	ldr	r3, [r7, #4]
 801e10e:	681b      	ldr	r3, [r3, #0]
 801e110:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801e112:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 801e116:	687b      	ldr	r3, [r7, #4]
 801e118:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801e11a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 801e11e:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 801e122:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 801e126:	4013      	ands	r3, r2
 801e128:	b29a      	uxth	r2, r3
 801e12a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 801e12e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 801e130:	687b      	ldr	r3, [r7, #4]
 801e132:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801e134:	1c9a      	adds	r2, r3, #2
 801e136:	687b      	ldr	r3, [r7, #4]
 801e138:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 801e13a:	687b      	ldr	r3, [r7, #4]
 801e13c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 801e140:	b29b      	uxth	r3, r3
 801e142:	3b01      	subs	r3, #1
 801e144:	b29a      	uxth	r2, r3
 801e146:	687b      	ldr	r3, [r7, #4]
 801e148:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 801e14c:	687b      	ldr	r3, [r7, #4]
 801e14e:	681b      	ldr	r3, [r3, #0]
 801e150:	69db      	ldr	r3, [r3, #28]
 801e152:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 801e156:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 801e15a:	f003 0307 	and.w	r3, r3, #7
 801e15e:	2b00      	cmp	r3, #0
 801e160:	d053      	beq.n	801e20a <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 801e162:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 801e166:	f003 0301 	and.w	r3, r3, #1
 801e16a:	2b00      	cmp	r3, #0
 801e16c:	d011      	beq.n	801e192 <UART_RxISR_16BIT_FIFOEN+0xce>
 801e16e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 801e172:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801e176:	2b00      	cmp	r3, #0
 801e178:	d00b      	beq.n	801e192 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 801e17a:	687b      	ldr	r3, [r7, #4]
 801e17c:	681b      	ldr	r3, [r3, #0]
 801e17e:	2201      	movs	r2, #1
 801e180:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 801e182:	687b      	ldr	r3, [r7, #4]
 801e184:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801e188:	f043 0201 	orr.w	r2, r3, #1
 801e18c:	687b      	ldr	r3, [r7, #4]
 801e18e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 801e192:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 801e196:	f003 0302 	and.w	r3, r3, #2
 801e19a:	2b00      	cmp	r3, #0
 801e19c:	d011      	beq.n	801e1c2 <UART_RxISR_16BIT_FIFOEN+0xfe>
 801e19e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 801e1a2:	f003 0301 	and.w	r3, r3, #1
 801e1a6:	2b00      	cmp	r3, #0
 801e1a8:	d00b      	beq.n	801e1c2 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 801e1aa:	687b      	ldr	r3, [r7, #4]
 801e1ac:	681b      	ldr	r3, [r3, #0]
 801e1ae:	2202      	movs	r2, #2
 801e1b0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 801e1b2:	687b      	ldr	r3, [r7, #4]
 801e1b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801e1b8:	f043 0204 	orr.w	r2, r3, #4
 801e1bc:	687b      	ldr	r3, [r7, #4]
 801e1be:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 801e1c2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 801e1c6:	f003 0304 	and.w	r3, r3, #4
 801e1ca:	2b00      	cmp	r3, #0
 801e1cc:	d011      	beq.n	801e1f2 <UART_RxISR_16BIT_FIFOEN+0x12e>
 801e1ce:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 801e1d2:	f003 0301 	and.w	r3, r3, #1
 801e1d6:	2b00      	cmp	r3, #0
 801e1d8:	d00b      	beq.n	801e1f2 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 801e1da:	687b      	ldr	r3, [r7, #4]
 801e1dc:	681b      	ldr	r3, [r3, #0]
 801e1de:	2204      	movs	r2, #4
 801e1e0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 801e1e2:	687b      	ldr	r3, [r7, #4]
 801e1e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801e1e8:	f043 0202 	orr.w	r2, r3, #2
 801e1ec:	687b      	ldr	r3, [r7, #4]
 801e1ee:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 801e1f2:	687b      	ldr	r3, [r7, #4]
 801e1f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801e1f8:	2b00      	cmp	r3, #0
 801e1fa:	d006      	beq.n	801e20a <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 801e1fc:	6878      	ldr	r0, [r7, #4]
 801e1fe:	f7fe fd65 	bl	801cccc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 801e202:	687b      	ldr	r3, [r7, #4]
 801e204:	2200      	movs	r2, #0
 801e206:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 801e20a:	687b      	ldr	r3, [r7, #4]
 801e20c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 801e210:	b29b      	uxth	r3, r3
 801e212:	2b00      	cmp	r3, #0
 801e214:	f040 80a4 	bne.w	801e360 <UART_RxISR_16BIT_FIFOEN+0x29c>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 801e218:	687b      	ldr	r3, [r7, #4]
 801e21a:	681b      	ldr	r3, [r3, #0]
 801e21c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801e21e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801e220:	e853 3f00 	ldrex	r3, [r3]
 801e224:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 801e226:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801e228:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801e22c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 801e230:	687b      	ldr	r3, [r7, #4]
 801e232:	681b      	ldr	r3, [r3, #0]
 801e234:	461a      	mov	r2, r3
 801e236:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801e23a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 801e23e:	67fa      	str	r2, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801e240:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 801e242:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 801e246:	e841 2300 	strex	r3, r2, [r1]
 801e24a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 801e24c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801e24e:	2b00      	cmp	r3, #0
 801e250:	d1e2      	bne.n	801e218 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 801e252:	687b      	ldr	r3, [r7, #4]
 801e254:	681b      	ldr	r3, [r3, #0]
 801e256:	3308      	adds	r3, #8
 801e258:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801e25a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801e25c:	e853 3f00 	ldrex	r3, [r3]
 801e260:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 801e262:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801e264:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 801e268:	f023 0301 	bic.w	r3, r3, #1
 801e26c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 801e270:	687b      	ldr	r3, [r7, #4]
 801e272:	681b      	ldr	r3, [r3, #0]
 801e274:	3308      	adds	r3, #8
 801e276:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 801e27a:	66fa      	str	r2, [r7, #108]	; 0x6c
 801e27c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801e27e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 801e280:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 801e282:	e841 2300 	strex	r3, r2, [r1]
 801e286:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 801e288:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801e28a:	2b00      	cmp	r3, #0
 801e28c:	d1e1      	bne.n	801e252 <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 801e28e:	687b      	ldr	r3, [r7, #4]
 801e290:	2220      	movs	r2, #32
 801e292:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 801e296:	687b      	ldr	r3, [r7, #4]
 801e298:	2200      	movs	r2, #0
 801e29a:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 801e29c:	687b      	ldr	r3, [r7, #4]
 801e29e:	2200      	movs	r2, #0
 801e2a0:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 801e2a2:	687b      	ldr	r3, [r7, #4]
 801e2a4:	681b      	ldr	r3, [r3, #0]
 801e2a6:	4a5f      	ldr	r2, [pc, #380]	; (801e424 <UART_RxISR_16BIT_FIFOEN+0x360>)
 801e2a8:	4293      	cmp	r3, r2
 801e2aa:	d021      	beq.n	801e2f0 <UART_RxISR_16BIT_FIFOEN+0x22c>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 801e2ac:	687b      	ldr	r3, [r7, #4]
 801e2ae:	681b      	ldr	r3, [r3, #0]
 801e2b0:	685b      	ldr	r3, [r3, #4]
 801e2b2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 801e2b6:	2b00      	cmp	r3, #0
 801e2b8:	d01a      	beq.n	801e2f0 <UART_RxISR_16BIT_FIFOEN+0x22c>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 801e2ba:	687b      	ldr	r3, [r7, #4]
 801e2bc:	681b      	ldr	r3, [r3, #0]
 801e2be:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801e2c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801e2c2:	e853 3f00 	ldrex	r3, [r3]
 801e2c6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 801e2c8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801e2ca:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 801e2ce:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 801e2d2:	687b      	ldr	r3, [r7, #4]
 801e2d4:	681b      	ldr	r3, [r3, #0]
 801e2d6:	461a      	mov	r2, r3
 801e2d8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 801e2dc:	65bb      	str	r3, [r7, #88]	; 0x58
 801e2de:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801e2e0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 801e2e2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 801e2e4:	e841 2300 	strex	r3, r2, [r1]
 801e2e8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 801e2ea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801e2ec:	2b00      	cmp	r3, #0
 801e2ee:	d1e4      	bne.n	801e2ba <UART_RxISR_16BIT_FIFOEN+0x1f6>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801e2f0:	687b      	ldr	r3, [r7, #4]
 801e2f2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801e2f4:	2b01      	cmp	r3, #1
 801e2f6:	d130      	bne.n	801e35a <UART_RxISR_16BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801e2f8:	687b      	ldr	r3, [r7, #4]
 801e2fa:	2200      	movs	r2, #0
 801e2fc:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801e2fe:	687b      	ldr	r3, [r7, #4]
 801e300:	681b      	ldr	r3, [r3, #0]
 801e302:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801e304:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801e306:	e853 3f00 	ldrex	r3, [r3]
 801e30a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 801e30c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801e30e:	f023 0310 	bic.w	r3, r3, #16
 801e312:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 801e316:	687b      	ldr	r3, [r7, #4]
 801e318:	681b      	ldr	r3, [r3, #0]
 801e31a:	461a      	mov	r2, r3
 801e31c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801e320:	647b      	str	r3, [r7, #68]	; 0x44
 801e322:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801e324:	6c39      	ldr	r1, [r7, #64]	; 0x40
 801e326:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801e328:	e841 2300 	strex	r3, r2, [r1]
 801e32c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 801e32e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801e330:	2b00      	cmp	r3, #0
 801e332:	d1e4      	bne.n	801e2fe <UART_RxISR_16BIT_FIFOEN+0x23a>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 801e334:	687b      	ldr	r3, [r7, #4]
 801e336:	681b      	ldr	r3, [r3, #0]
 801e338:	69db      	ldr	r3, [r3, #28]
 801e33a:	f003 0310 	and.w	r3, r3, #16
 801e33e:	2b10      	cmp	r3, #16
 801e340:	d103      	bne.n	801e34a <UART_RxISR_16BIT_FIFOEN+0x286>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 801e342:	687b      	ldr	r3, [r7, #4]
 801e344:	681b      	ldr	r3, [r3, #0]
 801e346:	2210      	movs	r2, #16
 801e348:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 801e34a:	687b      	ldr	r3, [r7, #4]
 801e34c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 801e350:	4619      	mov	r1, r3
 801e352:	6878      	ldr	r0, [r7, #4]
 801e354:	f7fe fcc4 	bl	801cce0 <HAL_UARTEx_RxEventCallback>
 801e358:	e002      	b.n	801e360 <UART_RxISR_16BIT_FIFOEN+0x29c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 801e35a:	6878      	ldr	r0, [r7, #4]
 801e35c:	f7e6 f8be 	bl	80044dc <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 801e360:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 801e364:	2b00      	cmp	r3, #0
 801e366:	d006      	beq.n	801e376 <UART_RxISR_16BIT_FIFOEN+0x2b2>
 801e368:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 801e36c:	f003 0320 	and.w	r3, r3, #32
 801e370:	2b00      	cmp	r3, #0
 801e372:	f47f aecb 	bne.w	801e10c <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 801e376:	687b      	ldr	r3, [r7, #4]
 801e378:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 801e37c:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 801e380:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 801e384:	2b00      	cmp	r3, #0
 801e386:	d049      	beq.n	801e41c <UART_RxISR_16BIT_FIFOEN+0x358>
 801e388:	687b      	ldr	r3, [r7, #4]
 801e38a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 801e38e:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 801e392:	429a      	cmp	r2, r3
 801e394:	d242      	bcs.n	801e41c <UART_RxISR_16BIT_FIFOEN+0x358>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 801e396:	687b      	ldr	r3, [r7, #4]
 801e398:	681b      	ldr	r3, [r3, #0]
 801e39a:	3308      	adds	r3, #8
 801e39c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801e39e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e3a0:	e853 3f00 	ldrex	r3, [r3]
 801e3a4:	623b      	str	r3, [r7, #32]
   return(result);
 801e3a6:	6a3b      	ldr	r3, [r7, #32]
 801e3a8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 801e3ac:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 801e3b0:	687b      	ldr	r3, [r7, #4]
 801e3b2:	681b      	ldr	r3, [r3, #0]
 801e3b4:	3308      	adds	r3, #8
 801e3b6:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 801e3ba:	633a      	str	r2, [r7, #48]	; 0x30
 801e3bc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801e3be:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801e3c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801e3c2:	e841 2300 	strex	r3, r2, [r1]
 801e3c6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 801e3c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801e3ca:	2b00      	cmp	r3, #0
 801e3cc:	d1e3      	bne.n	801e396 <UART_RxISR_16BIT_FIFOEN+0x2d2>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 801e3ce:	687b      	ldr	r3, [r7, #4]
 801e3d0:	4a15      	ldr	r2, [pc, #84]	; (801e428 <UART_RxISR_16BIT_FIFOEN+0x364>)
 801e3d2:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 801e3d4:	687b      	ldr	r3, [r7, #4]
 801e3d6:	681b      	ldr	r3, [r3, #0]
 801e3d8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801e3da:	693b      	ldr	r3, [r7, #16]
 801e3dc:	e853 3f00 	ldrex	r3, [r3]
 801e3e0:	60fb      	str	r3, [r7, #12]
   return(result);
 801e3e2:	68fb      	ldr	r3, [r7, #12]
 801e3e4:	f043 0320 	orr.w	r3, r3, #32
 801e3e8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 801e3ec:	687b      	ldr	r3, [r7, #4]
 801e3ee:	681b      	ldr	r3, [r3, #0]
 801e3f0:	461a      	mov	r2, r3
 801e3f2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 801e3f6:	61fb      	str	r3, [r7, #28]
 801e3f8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801e3fa:	69b9      	ldr	r1, [r7, #24]
 801e3fc:	69fa      	ldr	r2, [r7, #28]
 801e3fe:	e841 2300 	strex	r3, r2, [r1]
 801e402:	617b      	str	r3, [r7, #20]
   return(result);
 801e404:	697b      	ldr	r3, [r7, #20]
 801e406:	2b00      	cmp	r3, #0
 801e408:	d1e4      	bne.n	801e3d4 <UART_RxISR_16BIT_FIFOEN+0x310>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 801e40a:	e007      	b.n	801e41c <UART_RxISR_16BIT_FIFOEN+0x358>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 801e40c:	687b      	ldr	r3, [r7, #4]
 801e40e:	681b      	ldr	r3, [r3, #0]
 801e410:	699a      	ldr	r2, [r3, #24]
 801e412:	687b      	ldr	r3, [r7, #4]
 801e414:	681b      	ldr	r3, [r3, #0]
 801e416:	f042 0208 	orr.w	r2, r2, #8
 801e41a:	619a      	str	r2, [r3, #24]
}
 801e41c:	bf00      	nop
 801e41e:	37b8      	adds	r7, #184	; 0xb8
 801e420:	46bd      	mov	sp, r7
 801e422:	bd80      	pop	{r7, pc}
 801e424:	40008000 	.word	0x40008000
 801e428:	0801dbad 	.word	0x0801dbad

0801e42c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 801e42c:	b480      	push	{r7}
 801e42e:	b083      	sub	sp, #12
 801e430:	af00      	add	r7, sp, #0
 801e432:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 801e434:	bf00      	nop
 801e436:	370c      	adds	r7, #12
 801e438:	46bd      	mov	sp, r7
 801e43a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e43e:	4770      	bx	lr

0801e440 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 801e440:	b480      	push	{r7}
 801e442:	b083      	sub	sp, #12
 801e444:	af00      	add	r7, sp, #0
 801e446:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 801e448:	bf00      	nop
 801e44a:	370c      	adds	r7, #12
 801e44c:	46bd      	mov	sp, r7
 801e44e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e452:	4770      	bx	lr

0801e454 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 801e454:	b480      	push	{r7}
 801e456:	b083      	sub	sp, #12
 801e458:	af00      	add	r7, sp, #0
 801e45a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 801e45c:	bf00      	nop
 801e45e:	370c      	adds	r7, #12
 801e460:	46bd      	mov	sp, r7
 801e462:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e466:	4770      	bx	lr

0801e468 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 801e468:	b480      	push	{r7}
 801e46a:	b085      	sub	sp, #20
 801e46c:	af00      	add	r7, sp, #0
 801e46e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 801e470:	687b      	ldr	r3, [r7, #4]
 801e472:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 801e476:	2b01      	cmp	r3, #1
 801e478:	d101      	bne.n	801e47e <HAL_UARTEx_DisableFifoMode+0x16>
 801e47a:	2302      	movs	r3, #2
 801e47c:	e027      	b.n	801e4ce <HAL_UARTEx_DisableFifoMode+0x66>
 801e47e:	687b      	ldr	r3, [r7, #4]
 801e480:	2201      	movs	r2, #1
 801e482:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 801e486:	687b      	ldr	r3, [r7, #4]
 801e488:	2224      	movs	r2, #36	; 0x24
 801e48a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 801e48e:	687b      	ldr	r3, [r7, #4]
 801e490:	681b      	ldr	r3, [r3, #0]
 801e492:	681b      	ldr	r3, [r3, #0]
 801e494:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 801e496:	687b      	ldr	r3, [r7, #4]
 801e498:	681b      	ldr	r3, [r3, #0]
 801e49a:	681a      	ldr	r2, [r3, #0]
 801e49c:	687b      	ldr	r3, [r7, #4]
 801e49e:	681b      	ldr	r3, [r3, #0]
 801e4a0:	f022 0201 	bic.w	r2, r2, #1
 801e4a4:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 801e4a6:	68fb      	ldr	r3, [r7, #12]
 801e4a8:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 801e4ac:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 801e4ae:	687b      	ldr	r3, [r7, #4]
 801e4b0:	2200      	movs	r2, #0
 801e4b2:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 801e4b4:	687b      	ldr	r3, [r7, #4]
 801e4b6:	681b      	ldr	r3, [r3, #0]
 801e4b8:	68fa      	ldr	r2, [r7, #12]
 801e4ba:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 801e4bc:	687b      	ldr	r3, [r7, #4]
 801e4be:	2220      	movs	r2, #32
 801e4c0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 801e4c4:	687b      	ldr	r3, [r7, #4]
 801e4c6:	2200      	movs	r2, #0
 801e4c8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 801e4cc:	2300      	movs	r3, #0
}
 801e4ce:	4618      	mov	r0, r3
 801e4d0:	3714      	adds	r7, #20
 801e4d2:	46bd      	mov	sp, r7
 801e4d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e4d8:	4770      	bx	lr

0801e4da <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 801e4da:	b580      	push	{r7, lr}
 801e4dc:	b084      	sub	sp, #16
 801e4de:	af00      	add	r7, sp, #0
 801e4e0:	6078      	str	r0, [r7, #4]
 801e4e2:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 801e4e4:	687b      	ldr	r3, [r7, #4]
 801e4e6:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 801e4ea:	2b01      	cmp	r3, #1
 801e4ec:	d101      	bne.n	801e4f2 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 801e4ee:	2302      	movs	r3, #2
 801e4f0:	e02d      	b.n	801e54e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 801e4f2:	687b      	ldr	r3, [r7, #4]
 801e4f4:	2201      	movs	r2, #1
 801e4f6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 801e4fa:	687b      	ldr	r3, [r7, #4]
 801e4fc:	2224      	movs	r2, #36	; 0x24
 801e4fe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 801e502:	687b      	ldr	r3, [r7, #4]
 801e504:	681b      	ldr	r3, [r3, #0]
 801e506:	681b      	ldr	r3, [r3, #0]
 801e508:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 801e50a:	687b      	ldr	r3, [r7, #4]
 801e50c:	681b      	ldr	r3, [r3, #0]
 801e50e:	681a      	ldr	r2, [r3, #0]
 801e510:	687b      	ldr	r3, [r7, #4]
 801e512:	681b      	ldr	r3, [r3, #0]
 801e514:	f022 0201 	bic.w	r2, r2, #1
 801e518:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 801e51a:	687b      	ldr	r3, [r7, #4]
 801e51c:	681b      	ldr	r3, [r3, #0]
 801e51e:	689b      	ldr	r3, [r3, #8]
 801e520:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 801e524:	687b      	ldr	r3, [r7, #4]
 801e526:	681b      	ldr	r3, [r3, #0]
 801e528:	683a      	ldr	r2, [r7, #0]
 801e52a:	430a      	orrs	r2, r1
 801e52c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 801e52e:	6878      	ldr	r0, [r7, #4]
 801e530:	f000 f850 	bl	801e5d4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 801e534:	687b      	ldr	r3, [r7, #4]
 801e536:	681b      	ldr	r3, [r3, #0]
 801e538:	68fa      	ldr	r2, [r7, #12]
 801e53a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 801e53c:	687b      	ldr	r3, [r7, #4]
 801e53e:	2220      	movs	r2, #32
 801e540:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 801e544:	687b      	ldr	r3, [r7, #4]
 801e546:	2200      	movs	r2, #0
 801e548:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 801e54c:	2300      	movs	r3, #0
}
 801e54e:	4618      	mov	r0, r3
 801e550:	3710      	adds	r7, #16
 801e552:	46bd      	mov	sp, r7
 801e554:	bd80      	pop	{r7, pc}

0801e556 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 801e556:	b580      	push	{r7, lr}
 801e558:	b084      	sub	sp, #16
 801e55a:	af00      	add	r7, sp, #0
 801e55c:	6078      	str	r0, [r7, #4]
 801e55e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 801e560:	687b      	ldr	r3, [r7, #4]
 801e562:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 801e566:	2b01      	cmp	r3, #1
 801e568:	d101      	bne.n	801e56e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 801e56a:	2302      	movs	r3, #2
 801e56c:	e02d      	b.n	801e5ca <HAL_UARTEx_SetRxFifoThreshold+0x74>
 801e56e:	687b      	ldr	r3, [r7, #4]
 801e570:	2201      	movs	r2, #1
 801e572:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 801e576:	687b      	ldr	r3, [r7, #4]
 801e578:	2224      	movs	r2, #36	; 0x24
 801e57a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 801e57e:	687b      	ldr	r3, [r7, #4]
 801e580:	681b      	ldr	r3, [r3, #0]
 801e582:	681b      	ldr	r3, [r3, #0]
 801e584:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 801e586:	687b      	ldr	r3, [r7, #4]
 801e588:	681b      	ldr	r3, [r3, #0]
 801e58a:	681a      	ldr	r2, [r3, #0]
 801e58c:	687b      	ldr	r3, [r7, #4]
 801e58e:	681b      	ldr	r3, [r3, #0]
 801e590:	f022 0201 	bic.w	r2, r2, #1
 801e594:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 801e596:	687b      	ldr	r3, [r7, #4]
 801e598:	681b      	ldr	r3, [r3, #0]
 801e59a:	689b      	ldr	r3, [r3, #8]
 801e59c:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 801e5a0:	687b      	ldr	r3, [r7, #4]
 801e5a2:	681b      	ldr	r3, [r3, #0]
 801e5a4:	683a      	ldr	r2, [r7, #0]
 801e5a6:	430a      	orrs	r2, r1
 801e5a8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 801e5aa:	6878      	ldr	r0, [r7, #4]
 801e5ac:	f000 f812 	bl	801e5d4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 801e5b0:	687b      	ldr	r3, [r7, #4]
 801e5b2:	681b      	ldr	r3, [r3, #0]
 801e5b4:	68fa      	ldr	r2, [r7, #12]
 801e5b6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 801e5b8:	687b      	ldr	r3, [r7, #4]
 801e5ba:	2220      	movs	r2, #32
 801e5bc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 801e5c0:	687b      	ldr	r3, [r7, #4]
 801e5c2:	2200      	movs	r2, #0
 801e5c4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 801e5c8:	2300      	movs	r3, #0
}
 801e5ca:	4618      	mov	r0, r3
 801e5cc:	3710      	adds	r7, #16
 801e5ce:	46bd      	mov	sp, r7
 801e5d0:	bd80      	pop	{r7, pc}
	...

0801e5d4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 801e5d4:	b480      	push	{r7}
 801e5d6:	b085      	sub	sp, #20
 801e5d8:	af00      	add	r7, sp, #0
 801e5da:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 801e5dc:	687b      	ldr	r3, [r7, #4]
 801e5de:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801e5e0:	2b00      	cmp	r3, #0
 801e5e2:	d108      	bne.n	801e5f6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 801e5e4:	687b      	ldr	r3, [r7, #4]
 801e5e6:	2201      	movs	r2, #1
 801e5e8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 801e5ec:	687b      	ldr	r3, [r7, #4]
 801e5ee:	2201      	movs	r2, #1
 801e5f0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 801e5f4:	e031      	b.n	801e65a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 801e5f6:	2308      	movs	r3, #8
 801e5f8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 801e5fa:	2308      	movs	r3, #8
 801e5fc:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 801e5fe:	687b      	ldr	r3, [r7, #4]
 801e600:	681b      	ldr	r3, [r3, #0]
 801e602:	689b      	ldr	r3, [r3, #8]
 801e604:	0e5b      	lsrs	r3, r3, #25
 801e606:	b2db      	uxtb	r3, r3
 801e608:	f003 0307 	and.w	r3, r3, #7
 801e60c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 801e60e:	687b      	ldr	r3, [r7, #4]
 801e610:	681b      	ldr	r3, [r3, #0]
 801e612:	689b      	ldr	r3, [r3, #8]
 801e614:	0f5b      	lsrs	r3, r3, #29
 801e616:	b2db      	uxtb	r3, r3
 801e618:	f003 0307 	and.w	r3, r3, #7
 801e61c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 801e61e:	7bbb      	ldrb	r3, [r7, #14]
 801e620:	7b3a      	ldrb	r2, [r7, #12]
 801e622:	4911      	ldr	r1, [pc, #68]	; (801e668 <UARTEx_SetNbDataToProcess+0x94>)
 801e624:	5c8a      	ldrb	r2, [r1, r2]
 801e626:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 801e62a:	7b3a      	ldrb	r2, [r7, #12]
 801e62c:	490f      	ldr	r1, [pc, #60]	; (801e66c <UARTEx_SetNbDataToProcess+0x98>)
 801e62e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 801e630:	fb93 f3f2 	sdiv	r3, r3, r2
 801e634:	b29a      	uxth	r2, r3
 801e636:	687b      	ldr	r3, [r7, #4]
 801e638:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 801e63c:	7bfb      	ldrb	r3, [r7, #15]
 801e63e:	7b7a      	ldrb	r2, [r7, #13]
 801e640:	4909      	ldr	r1, [pc, #36]	; (801e668 <UARTEx_SetNbDataToProcess+0x94>)
 801e642:	5c8a      	ldrb	r2, [r1, r2]
 801e644:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 801e648:	7b7a      	ldrb	r2, [r7, #13]
 801e64a:	4908      	ldr	r1, [pc, #32]	; (801e66c <UARTEx_SetNbDataToProcess+0x98>)
 801e64c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 801e64e:	fb93 f3f2 	sdiv	r3, r3, r2
 801e652:	b29a      	uxth	r2, r3
 801e654:	687b      	ldr	r3, [r7, #4]
 801e656:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 801e65a:	bf00      	nop
 801e65c:	3714      	adds	r7, #20
 801e65e:	46bd      	mov	sp, r7
 801e660:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e664:	4770      	bx	lr
 801e666:	bf00      	nop
 801e668:	08025ffc 	.word	0x08025ffc
 801e66c:	08026004 	.word	0x08026004

0801e670 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 801e670:	b480      	push	{r7}
 801e672:	b08b      	sub	sp, #44	; 0x2c
 801e674:	af00      	add	r7, sp, #0
 801e676:	60f8      	str	r0, [r7, #12]
 801e678:	60b9      	str	r1, [r7, #8]
 801e67a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 801e67c:	68fb      	ldr	r3, [r7, #12]
 801e67e:	681a      	ldr	r2, [r3, #0]
 801e680:	68bb      	ldr	r3, [r7, #8]
 801e682:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 801e684:	697b      	ldr	r3, [r7, #20]
 801e686:	fa93 f3a3 	rbit	r3, r3
 801e68a:	613b      	str	r3, [r7, #16]
  return result;
 801e68c:	693b      	ldr	r3, [r7, #16]
 801e68e:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 801e690:	69bb      	ldr	r3, [r7, #24]
 801e692:	2b00      	cmp	r3, #0
 801e694:	d101      	bne.n	801e69a <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 801e696:	2320      	movs	r3, #32
 801e698:	e003      	b.n	801e6a2 <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 801e69a:	69bb      	ldr	r3, [r7, #24]
 801e69c:	fab3 f383 	clz	r3, r3
 801e6a0:	b2db      	uxtb	r3, r3
 801e6a2:	005b      	lsls	r3, r3, #1
 801e6a4:	2103      	movs	r1, #3
 801e6a6:	fa01 f303 	lsl.w	r3, r1, r3
 801e6aa:	43db      	mvns	r3, r3
 801e6ac:	401a      	ands	r2, r3
 801e6ae:	68bb      	ldr	r3, [r7, #8]
 801e6b0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 801e6b2:	6a3b      	ldr	r3, [r7, #32]
 801e6b4:	fa93 f3a3 	rbit	r3, r3
 801e6b8:	61fb      	str	r3, [r7, #28]
  return result;
 801e6ba:	69fb      	ldr	r3, [r7, #28]
 801e6bc:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 801e6be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e6c0:	2b00      	cmp	r3, #0
 801e6c2:	d101      	bne.n	801e6c8 <LL_GPIO_SetPinMode+0x58>
    return 32U;
 801e6c4:	2320      	movs	r3, #32
 801e6c6:	e003      	b.n	801e6d0 <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 801e6c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e6ca:	fab3 f383 	clz	r3, r3
 801e6ce:	b2db      	uxtb	r3, r3
 801e6d0:	005b      	lsls	r3, r3, #1
 801e6d2:	6879      	ldr	r1, [r7, #4]
 801e6d4:	fa01 f303 	lsl.w	r3, r1, r3
 801e6d8:	431a      	orrs	r2, r3
 801e6da:	68fb      	ldr	r3, [r7, #12]
 801e6dc:	601a      	str	r2, [r3, #0]
}
 801e6de:	bf00      	nop
 801e6e0:	372c      	adds	r7, #44	; 0x2c
 801e6e2:	46bd      	mov	sp, r7
 801e6e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e6e8:	4770      	bx	lr

0801e6ea <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 801e6ea:	b480      	push	{r7}
 801e6ec:	b085      	sub	sp, #20
 801e6ee:	af00      	add	r7, sp, #0
 801e6f0:	60f8      	str	r0, [r7, #12]
 801e6f2:	60b9      	str	r1, [r7, #8]
 801e6f4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 801e6f6:	68fb      	ldr	r3, [r7, #12]
 801e6f8:	685a      	ldr	r2, [r3, #4]
 801e6fa:	68bb      	ldr	r3, [r7, #8]
 801e6fc:	43db      	mvns	r3, r3
 801e6fe:	401a      	ands	r2, r3
 801e700:	68bb      	ldr	r3, [r7, #8]
 801e702:	6879      	ldr	r1, [r7, #4]
 801e704:	fb01 f303 	mul.w	r3, r1, r3
 801e708:	431a      	orrs	r2, r3
 801e70a:	68fb      	ldr	r3, [r7, #12]
 801e70c:	605a      	str	r2, [r3, #4]
}
 801e70e:	bf00      	nop
 801e710:	3714      	adds	r7, #20
 801e712:	46bd      	mov	sp, r7
 801e714:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e718:	4770      	bx	lr

0801e71a <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  *         @arg @ref LL_GPIO_SPEED_FREQ_VERY_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 801e71a:	b480      	push	{r7}
 801e71c:	b08b      	sub	sp, #44	; 0x2c
 801e71e:	af00      	add	r7, sp, #0
 801e720:	60f8      	str	r0, [r7, #12]
 801e722:	60b9      	str	r1, [r7, #8]
 801e724:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 801e726:	68fb      	ldr	r3, [r7, #12]
 801e728:	689a      	ldr	r2, [r3, #8]
 801e72a:	68bb      	ldr	r3, [r7, #8]
 801e72c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 801e72e:	697b      	ldr	r3, [r7, #20]
 801e730:	fa93 f3a3 	rbit	r3, r3
 801e734:	613b      	str	r3, [r7, #16]
  return result;
 801e736:	693b      	ldr	r3, [r7, #16]
 801e738:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 801e73a:	69bb      	ldr	r3, [r7, #24]
 801e73c:	2b00      	cmp	r3, #0
 801e73e:	d101      	bne.n	801e744 <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 801e740:	2320      	movs	r3, #32
 801e742:	e003      	b.n	801e74c <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 801e744:	69bb      	ldr	r3, [r7, #24]
 801e746:	fab3 f383 	clz	r3, r3
 801e74a:	b2db      	uxtb	r3, r3
 801e74c:	005b      	lsls	r3, r3, #1
 801e74e:	2103      	movs	r1, #3
 801e750:	fa01 f303 	lsl.w	r3, r1, r3
 801e754:	43db      	mvns	r3, r3
 801e756:	401a      	ands	r2, r3
 801e758:	68bb      	ldr	r3, [r7, #8]
 801e75a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 801e75c:	6a3b      	ldr	r3, [r7, #32]
 801e75e:	fa93 f3a3 	rbit	r3, r3
 801e762:	61fb      	str	r3, [r7, #28]
  return result;
 801e764:	69fb      	ldr	r3, [r7, #28]
 801e766:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 801e768:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e76a:	2b00      	cmp	r3, #0
 801e76c:	d101      	bne.n	801e772 <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 801e76e:	2320      	movs	r3, #32
 801e770:	e003      	b.n	801e77a <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 801e772:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e774:	fab3 f383 	clz	r3, r3
 801e778:	b2db      	uxtb	r3, r3
 801e77a:	005b      	lsls	r3, r3, #1
 801e77c:	6879      	ldr	r1, [r7, #4]
 801e77e:	fa01 f303 	lsl.w	r3, r1, r3
 801e782:	431a      	orrs	r2, r3
 801e784:	68fb      	ldr	r3, [r7, #12]
 801e786:	609a      	str	r2, [r3, #8]
             (Speed << (POSITION_VAL(Pin) * 2U)));
}
 801e788:	bf00      	nop
 801e78a:	372c      	adds	r7, #44	; 0x2c
 801e78c:	46bd      	mov	sp, r7
 801e78e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e792:	4770      	bx	lr

0801e794 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 801e794:	b480      	push	{r7}
 801e796:	b08b      	sub	sp, #44	; 0x2c
 801e798:	af00      	add	r7, sp, #0
 801e79a:	60f8      	str	r0, [r7, #12]
 801e79c:	60b9      	str	r1, [r7, #8]
 801e79e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 801e7a0:	68fb      	ldr	r3, [r7, #12]
 801e7a2:	68da      	ldr	r2, [r3, #12]
 801e7a4:	68bb      	ldr	r3, [r7, #8]
 801e7a6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 801e7a8:	697b      	ldr	r3, [r7, #20]
 801e7aa:	fa93 f3a3 	rbit	r3, r3
 801e7ae:	613b      	str	r3, [r7, #16]
  return result;
 801e7b0:	693b      	ldr	r3, [r7, #16]
 801e7b2:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 801e7b4:	69bb      	ldr	r3, [r7, #24]
 801e7b6:	2b00      	cmp	r3, #0
 801e7b8:	d101      	bne.n	801e7be <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 801e7ba:	2320      	movs	r3, #32
 801e7bc:	e003      	b.n	801e7c6 <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 801e7be:	69bb      	ldr	r3, [r7, #24]
 801e7c0:	fab3 f383 	clz	r3, r3
 801e7c4:	b2db      	uxtb	r3, r3
 801e7c6:	005b      	lsls	r3, r3, #1
 801e7c8:	2103      	movs	r1, #3
 801e7ca:	fa01 f303 	lsl.w	r3, r1, r3
 801e7ce:	43db      	mvns	r3, r3
 801e7d0:	401a      	ands	r2, r3
 801e7d2:	68bb      	ldr	r3, [r7, #8]
 801e7d4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 801e7d6:	6a3b      	ldr	r3, [r7, #32]
 801e7d8:	fa93 f3a3 	rbit	r3, r3
 801e7dc:	61fb      	str	r3, [r7, #28]
  return result;
 801e7de:	69fb      	ldr	r3, [r7, #28]
 801e7e0:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 801e7e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e7e4:	2b00      	cmp	r3, #0
 801e7e6:	d101      	bne.n	801e7ec <LL_GPIO_SetPinPull+0x58>
    return 32U;
 801e7e8:	2320      	movs	r3, #32
 801e7ea:	e003      	b.n	801e7f4 <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 801e7ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e7ee:	fab3 f383 	clz	r3, r3
 801e7f2:	b2db      	uxtb	r3, r3
 801e7f4:	005b      	lsls	r3, r3, #1
 801e7f6:	6879      	ldr	r1, [r7, #4]
 801e7f8:	fa01 f303 	lsl.w	r3, r1, r3
 801e7fc:	431a      	orrs	r2, r3
 801e7fe:	68fb      	ldr	r3, [r7, #12]
 801e800:	60da      	str	r2, [r3, #12]
}
 801e802:	bf00      	nop
 801e804:	372c      	adds	r7, #44	; 0x2c
 801e806:	46bd      	mov	sp, r7
 801e808:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e80c:	4770      	bx	lr

0801e80e <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 801e80e:	b480      	push	{r7}
 801e810:	b08b      	sub	sp, #44	; 0x2c
 801e812:	af00      	add	r7, sp, #0
 801e814:	60f8      	str	r0, [r7, #12]
 801e816:	60b9      	str	r1, [r7, #8]
 801e818:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 801e81a:	68fb      	ldr	r3, [r7, #12]
 801e81c:	6a1a      	ldr	r2, [r3, #32]
 801e81e:	68bb      	ldr	r3, [r7, #8]
 801e820:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 801e822:	697b      	ldr	r3, [r7, #20]
 801e824:	fa93 f3a3 	rbit	r3, r3
 801e828:	613b      	str	r3, [r7, #16]
  return result;
 801e82a:	693b      	ldr	r3, [r7, #16]
 801e82c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 801e82e:	69bb      	ldr	r3, [r7, #24]
 801e830:	2b00      	cmp	r3, #0
 801e832:	d101      	bne.n	801e838 <LL_GPIO_SetAFPin_0_7+0x2a>
    return 32U;
 801e834:	2320      	movs	r3, #32
 801e836:	e003      	b.n	801e840 <LL_GPIO_SetAFPin_0_7+0x32>
  return __builtin_clz(value);
 801e838:	69bb      	ldr	r3, [r7, #24]
 801e83a:	fab3 f383 	clz	r3, r3
 801e83e:	b2db      	uxtb	r3, r3
 801e840:	009b      	lsls	r3, r3, #2
 801e842:	210f      	movs	r1, #15
 801e844:	fa01 f303 	lsl.w	r3, r1, r3
 801e848:	43db      	mvns	r3, r3
 801e84a:	401a      	ands	r2, r3
 801e84c:	68bb      	ldr	r3, [r7, #8]
 801e84e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 801e850:	6a3b      	ldr	r3, [r7, #32]
 801e852:	fa93 f3a3 	rbit	r3, r3
 801e856:	61fb      	str	r3, [r7, #28]
  return result;
 801e858:	69fb      	ldr	r3, [r7, #28]
 801e85a:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 801e85c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e85e:	2b00      	cmp	r3, #0
 801e860:	d101      	bne.n	801e866 <LL_GPIO_SetAFPin_0_7+0x58>
    return 32U;
 801e862:	2320      	movs	r3, #32
 801e864:	e003      	b.n	801e86e <LL_GPIO_SetAFPin_0_7+0x60>
  return __builtin_clz(value);
 801e866:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e868:	fab3 f383 	clz	r3, r3
 801e86c:	b2db      	uxtb	r3, r3
 801e86e:	009b      	lsls	r3, r3, #2
 801e870:	6879      	ldr	r1, [r7, #4]
 801e872:	fa01 f303 	lsl.w	r3, r1, r3
 801e876:	431a      	orrs	r2, r3
 801e878:	68fb      	ldr	r3, [r7, #12]
 801e87a:	621a      	str	r2, [r3, #32]
             (Alternate << (POSITION_VAL(Pin) * 4U)));
}
 801e87c:	bf00      	nop
 801e87e:	372c      	adds	r7, #44	; 0x2c
 801e880:	46bd      	mov	sp, r7
 801e882:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e886:	4770      	bx	lr

0801e888 <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 801e888:	b480      	push	{r7}
 801e88a:	b08b      	sub	sp, #44	; 0x2c
 801e88c:	af00      	add	r7, sp, #0
 801e88e:	60f8      	str	r0, [r7, #12]
 801e890:	60b9      	str	r1, [r7, #8]
 801e892:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 801e894:	68fb      	ldr	r3, [r7, #12]
 801e896:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801e898:	68bb      	ldr	r3, [r7, #8]
 801e89a:	0a1b      	lsrs	r3, r3, #8
 801e89c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 801e89e:	697b      	ldr	r3, [r7, #20]
 801e8a0:	fa93 f3a3 	rbit	r3, r3
 801e8a4:	613b      	str	r3, [r7, #16]
  return result;
 801e8a6:	693b      	ldr	r3, [r7, #16]
 801e8a8:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 801e8aa:	69bb      	ldr	r3, [r7, #24]
 801e8ac:	2b00      	cmp	r3, #0
 801e8ae:	d101      	bne.n	801e8b4 <LL_GPIO_SetAFPin_8_15+0x2c>
    return 32U;
 801e8b0:	2320      	movs	r3, #32
 801e8b2:	e003      	b.n	801e8bc <LL_GPIO_SetAFPin_8_15+0x34>
  return __builtin_clz(value);
 801e8b4:	69bb      	ldr	r3, [r7, #24]
 801e8b6:	fab3 f383 	clz	r3, r3
 801e8ba:	b2db      	uxtb	r3, r3
 801e8bc:	009b      	lsls	r3, r3, #2
 801e8be:	210f      	movs	r1, #15
 801e8c0:	fa01 f303 	lsl.w	r3, r1, r3
 801e8c4:	43db      	mvns	r3, r3
 801e8c6:	401a      	ands	r2, r3
 801e8c8:	68bb      	ldr	r3, [r7, #8]
 801e8ca:	0a1b      	lsrs	r3, r3, #8
 801e8cc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 801e8ce:	6a3b      	ldr	r3, [r7, #32]
 801e8d0:	fa93 f3a3 	rbit	r3, r3
 801e8d4:	61fb      	str	r3, [r7, #28]
  return result;
 801e8d6:	69fb      	ldr	r3, [r7, #28]
 801e8d8:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 801e8da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e8dc:	2b00      	cmp	r3, #0
 801e8de:	d101      	bne.n	801e8e4 <LL_GPIO_SetAFPin_8_15+0x5c>
    return 32U;
 801e8e0:	2320      	movs	r3, #32
 801e8e2:	e003      	b.n	801e8ec <LL_GPIO_SetAFPin_8_15+0x64>
  return __builtin_clz(value);
 801e8e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e8e6:	fab3 f383 	clz	r3, r3
 801e8ea:	b2db      	uxtb	r3, r3
 801e8ec:	009b      	lsls	r3, r3, #2
 801e8ee:	6879      	ldr	r1, [r7, #4]
 801e8f0:	fa01 f303 	lsl.w	r3, r1, r3
 801e8f4:	431a      	orrs	r2, r3
 801e8f6:	68fb      	ldr	r3, [r7, #12]
 801e8f8:	625a      	str	r2, [r3, #36]	; 0x24
             (Alternate << (POSITION_VAL(Pin >> 8U) * 4U)));
}
 801e8fa:	bf00      	nop
 801e8fc:	372c      	adds	r7, #44	; 0x2c
 801e8fe:	46bd      	mov	sp, r7
 801e900:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e904:	4770      	bx	lr

0801e906 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 801e906:	b580      	push	{r7, lr}
 801e908:	b088      	sub	sp, #32
 801e90a:	af00      	add	r7, sp, #0
 801e90c:	6078      	str	r0, [r7, #4]
 801e90e:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 801e910:	683b      	ldr	r3, [r7, #0]
 801e912:	681b      	ldr	r3, [r3, #0]
 801e914:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 801e916:	693b      	ldr	r3, [r7, #16]
 801e918:	fa93 f3a3 	rbit	r3, r3
 801e91c:	60fb      	str	r3, [r7, #12]
  return result;
 801e91e:	68fb      	ldr	r3, [r7, #12]
 801e920:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 801e922:	697b      	ldr	r3, [r7, #20]
 801e924:	2b00      	cmp	r3, #0
 801e926:	d101      	bne.n	801e92c <LL_GPIO_Init+0x26>
    return 32U;
 801e928:	2320      	movs	r3, #32
 801e92a:	e003      	b.n	801e934 <LL_GPIO_Init+0x2e>
  return __builtin_clz(value);
 801e92c:	697b      	ldr	r3, [r7, #20]
 801e92e:	fab3 f383 	clz	r3, r3
 801e932:	b2db      	uxtb	r3, r3
 801e934:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 801e936:	e047      	b.n	801e9c8 <LL_GPIO_Init+0xc2>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (1UL << pinpos);
 801e938:	683b      	ldr	r3, [r7, #0]
 801e93a:	681a      	ldr	r2, [r3, #0]
 801e93c:	2101      	movs	r1, #1
 801e93e:	69fb      	ldr	r3, [r7, #28]
 801e940:	fa01 f303 	lsl.w	r3, r1, r3
 801e944:	4013      	ands	r3, r2
 801e946:	61bb      	str	r3, [r7, #24]

    if (currentpin != 0U)
 801e948:	69bb      	ldr	r3, [r7, #24]
 801e94a:	2b00      	cmp	r3, #0
 801e94c:	d039      	beq.n	801e9c2 <LL_GPIO_Init+0xbc>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 801e94e:	683b      	ldr	r3, [r7, #0]
 801e950:	685b      	ldr	r3, [r3, #4]
 801e952:	2b01      	cmp	r3, #1
 801e954:	d003      	beq.n	801e95e <LL_GPIO_Init+0x58>
 801e956:	683b      	ldr	r3, [r7, #0]
 801e958:	685b      	ldr	r3, [r3, #4]
 801e95a:	2b02      	cmp	r3, #2
 801e95c:	d10d      	bne.n	801e97a <LL_GPIO_Init+0x74>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 801e95e:	683b      	ldr	r3, [r7, #0]
 801e960:	689b      	ldr	r3, [r3, #8]
 801e962:	461a      	mov	r2, r3
 801e964:	69b9      	ldr	r1, [r7, #24]
 801e966:	6878      	ldr	r0, [r7, #4]
 801e968:	f7ff fed7 	bl	801e71a <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 801e96c:	683b      	ldr	r3, [r7, #0]
 801e96e:	68db      	ldr	r3, [r3, #12]
 801e970:	461a      	mov	r2, r3
 801e972:	69b9      	ldr	r1, [r7, #24]
 801e974:	6878      	ldr	r0, [r7, #4]
 801e976:	f7ff feb8 	bl	801e6ea <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 801e97a:	683b      	ldr	r3, [r7, #0]
 801e97c:	691b      	ldr	r3, [r3, #16]
 801e97e:	461a      	mov	r2, r3
 801e980:	69b9      	ldr	r1, [r7, #24]
 801e982:	6878      	ldr	r0, [r7, #4]
 801e984:	f7ff ff06 	bl	801e794 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 801e988:	683b      	ldr	r3, [r7, #0]
 801e98a:	685b      	ldr	r3, [r3, #4]
 801e98c:	2b02      	cmp	r3, #2
 801e98e:	d111      	bne.n	801e9b4 <LL_GPIO_Init+0xae>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Alternate function configuration */
        if (currentpin < LL_GPIO_PIN_8)
 801e990:	69bb      	ldr	r3, [r7, #24]
 801e992:	2bff      	cmp	r3, #255	; 0xff
 801e994:	d807      	bhi.n	801e9a6 <LL_GPIO_Init+0xa0>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 801e996:	683b      	ldr	r3, [r7, #0]
 801e998:	695b      	ldr	r3, [r3, #20]
 801e99a:	461a      	mov	r2, r3
 801e99c:	69b9      	ldr	r1, [r7, #24]
 801e99e:	6878      	ldr	r0, [r7, #4]
 801e9a0:	f7ff ff35 	bl	801e80e <LL_GPIO_SetAFPin_0_7>
 801e9a4:	e006      	b.n	801e9b4 <LL_GPIO_Init+0xae>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 801e9a6:	683b      	ldr	r3, [r7, #0]
 801e9a8:	695b      	ldr	r3, [r3, #20]
 801e9aa:	461a      	mov	r2, r3
 801e9ac:	69b9      	ldr	r1, [r7, #24]
 801e9ae:	6878      	ldr	r0, [r7, #4]
 801e9b0:	f7ff ff6a 	bl	801e888 <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 801e9b4:	683b      	ldr	r3, [r7, #0]
 801e9b6:	685b      	ldr	r3, [r3, #4]
 801e9b8:	461a      	mov	r2, r3
 801e9ba:	69b9      	ldr	r1, [r7, #24]
 801e9bc:	6878      	ldr	r0, [r7, #4]
 801e9be:	f7ff fe57 	bl	801e670 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 801e9c2:	69fb      	ldr	r3, [r7, #28]
 801e9c4:	3301      	adds	r3, #1
 801e9c6:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 801e9c8:	683b      	ldr	r3, [r7, #0]
 801e9ca:	681a      	ldr	r2, [r3, #0]
 801e9cc:	69fb      	ldr	r3, [r7, #28]
 801e9ce:	fa22 f303 	lsr.w	r3, r2, r3
 801e9d2:	2b00      	cmp	r3, #0
 801e9d4:	d1b0      	bne.n	801e938 <LL_GPIO_Init+0x32>
  }

  return (SUCCESS);
 801e9d6:	2300      	movs	r3, #0
}
 801e9d8:	4618      	mov	r0, r3
 801e9da:	3720      	adds	r7, #32
 801e9dc:	46bd      	mov	sp, r7
 801e9de:	bd80      	pop	{r7, pc}

0801e9e0 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 801e9e0:	b480      	push	{r7}
 801e9e2:	b085      	sub	sp, #20
 801e9e4:	af00      	add	r7, sp, #0
 801e9e6:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 801e9e8:	f64b 7380 	movw	r3, #49024	; 0xbf80
 801e9ec:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 801e9ee:	687b      	ldr	r3, [r7, #4]
 801e9f0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 801e9f4:	b29a      	uxth	r2, r3
 801e9f6:	68fb      	ldr	r3, [r7, #12]
 801e9f8:	b29b      	uxth	r3, r3
 801e9fa:	43db      	mvns	r3, r3
 801e9fc:	b29b      	uxth	r3, r3
 801e9fe:	4013      	ands	r3, r2
 801ea00:	b29a      	uxth	r2, r3
 801ea02:	687b      	ldr	r3, [r7, #4]
 801ea04:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 801ea08:	2300      	movs	r3, #0
}
 801ea0a:	4618      	mov	r0, r3
 801ea0c:	3714      	adds	r7, #20
 801ea0e:	46bd      	mov	sp, r7
 801ea10:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ea14:	4770      	bx	lr

0801ea16 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 801ea16:	b084      	sub	sp, #16
 801ea18:	b480      	push	{r7}
 801ea1a:	b083      	sub	sp, #12
 801ea1c:	af00      	add	r7, sp, #0
 801ea1e:	6078      	str	r0, [r7, #4]
 801ea20:	f107 0014 	add.w	r0, r7, #20
 801ea24:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 801ea28:	687b      	ldr	r3, [r7, #4]
 801ea2a:	2201      	movs	r2, #1
 801ea2c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 801ea30:	687b      	ldr	r3, [r7, #4]
 801ea32:	2200      	movs	r2, #0
 801ea34:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 801ea38:	687b      	ldr	r3, [r7, #4]
 801ea3a:	2200      	movs	r2, #0
 801ea3c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 801ea40:	687b      	ldr	r3, [r7, #4]
 801ea42:	2200      	movs	r2, #0
 801ea44:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 801ea48:	2300      	movs	r3, #0
}
 801ea4a:	4618      	mov	r0, r3
 801ea4c:	370c      	adds	r7, #12
 801ea4e:	46bd      	mov	sp, r7
 801ea50:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ea54:	b004      	add	sp, #16
 801ea56:	4770      	bx	lr

0801ea58 <__NVIC_SetPriority>:
{
 801ea58:	b480      	push	{r7}
 801ea5a:	b083      	sub	sp, #12
 801ea5c:	af00      	add	r7, sp, #0
 801ea5e:	4603      	mov	r3, r0
 801ea60:	6039      	str	r1, [r7, #0]
 801ea62:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 801ea64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801ea68:	2b00      	cmp	r3, #0
 801ea6a:	db0a      	blt.n	801ea82 <__NVIC_SetPriority+0x2a>
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 801ea6c:	683b      	ldr	r3, [r7, #0]
 801ea6e:	b2da      	uxtb	r2, r3
 801ea70:	490c      	ldr	r1, [pc, #48]	; (801eaa4 <__NVIC_SetPriority+0x4c>)
 801ea72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801ea76:	0152      	lsls	r2, r2, #5
 801ea78:	b2d2      	uxtb	r2, r2
 801ea7a:	440b      	add	r3, r1
 801ea7c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 801ea80:	e00a      	b.n	801ea98 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 801ea82:	683b      	ldr	r3, [r7, #0]
 801ea84:	b2da      	uxtb	r2, r3
 801ea86:	4908      	ldr	r1, [pc, #32]	; (801eaa8 <__NVIC_SetPriority+0x50>)
 801ea88:	79fb      	ldrb	r3, [r7, #7]
 801ea8a:	f003 030f 	and.w	r3, r3, #15
 801ea8e:	3b04      	subs	r3, #4
 801ea90:	0152      	lsls	r2, r2, #5
 801ea92:	b2d2      	uxtb	r2, r2
 801ea94:	440b      	add	r3, r1
 801ea96:	761a      	strb	r2, [r3, #24]
}
 801ea98:	bf00      	nop
 801ea9a:	370c      	adds	r7, #12
 801ea9c:	46bd      	mov	sp, r7
 801ea9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801eaa2:	4770      	bx	lr
 801eaa4:	e000e100 	.word	0xe000e100
 801eaa8:	e000ed00 	.word	0xe000ed00

0801eaac <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 801eaac:	b580      	push	{r7, lr}
 801eaae:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 801eab0:	4b05      	ldr	r3, [pc, #20]	; (801eac8 <SysTick_Handler+0x1c>)
 801eab2:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 801eab4:	f001 fbe0 	bl	8020278 <xTaskGetSchedulerState>
 801eab8:	4603      	mov	r3, r0
 801eaba:	2b01      	cmp	r3, #1
 801eabc:	d001      	beq.n	801eac2 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 801eabe:	f002 f835 	bl	8020b2c <xPortSysTickHandler>
  }
}
 801eac2:	bf00      	nop
 801eac4:	bd80      	pop	{r7, pc}
 801eac6:	bf00      	nop
 801eac8:	e000e010 	.word	0xe000e010

0801eacc <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 801eacc:	b580      	push	{r7, lr}
 801eace:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 801ead0:	2100      	movs	r1, #0
 801ead2:	f06f 0004 	mvn.w	r0, #4
 801ead6:	f7ff ffbf 	bl	801ea58 <__NVIC_SetPriority>
#endif
}
 801eada:	bf00      	nop
 801eadc:	bd80      	pop	{r7, pc}
	...

0801eae0 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 801eae0:	b480      	push	{r7}
 801eae2:	b083      	sub	sp, #12
 801eae4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801eae6:	f3ef 8305 	mrs	r3, IPSR
 801eaea:	603b      	str	r3, [r7, #0]
  return(result);
 801eaec:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 801eaee:	2b00      	cmp	r3, #0
 801eaf0:	d003      	beq.n	801eafa <osKernelInitialize+0x1a>
    stat = osErrorISR;
 801eaf2:	f06f 0305 	mvn.w	r3, #5
 801eaf6:	607b      	str	r3, [r7, #4]
 801eaf8:	e00c      	b.n	801eb14 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 801eafa:	4b0a      	ldr	r3, [pc, #40]	; (801eb24 <osKernelInitialize+0x44>)
 801eafc:	681b      	ldr	r3, [r3, #0]
 801eafe:	2b00      	cmp	r3, #0
 801eb00:	d105      	bne.n	801eb0e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 801eb02:	4b08      	ldr	r3, [pc, #32]	; (801eb24 <osKernelInitialize+0x44>)
 801eb04:	2201      	movs	r2, #1
 801eb06:	601a      	str	r2, [r3, #0]
      stat = osOK;
 801eb08:	2300      	movs	r3, #0
 801eb0a:	607b      	str	r3, [r7, #4]
 801eb0c:	e002      	b.n	801eb14 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 801eb0e:	f04f 33ff 	mov.w	r3, #4294967295
 801eb12:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 801eb14:	687b      	ldr	r3, [r7, #4]
}
 801eb16:	4618      	mov	r0, r3
 801eb18:	370c      	adds	r7, #12
 801eb1a:	46bd      	mov	sp, r7
 801eb1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801eb20:	4770      	bx	lr
 801eb22:	bf00      	nop
 801eb24:	20000ff0 	.word	0x20000ff0

0801eb28 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 801eb28:	b580      	push	{r7, lr}
 801eb2a:	b082      	sub	sp, #8
 801eb2c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801eb2e:	f3ef 8305 	mrs	r3, IPSR
 801eb32:	603b      	str	r3, [r7, #0]
  return(result);
 801eb34:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 801eb36:	2b00      	cmp	r3, #0
 801eb38:	d003      	beq.n	801eb42 <osKernelStart+0x1a>
    stat = osErrorISR;
 801eb3a:	f06f 0305 	mvn.w	r3, #5
 801eb3e:	607b      	str	r3, [r7, #4]
 801eb40:	e010      	b.n	801eb64 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 801eb42:	4b0b      	ldr	r3, [pc, #44]	; (801eb70 <osKernelStart+0x48>)
 801eb44:	681b      	ldr	r3, [r3, #0]
 801eb46:	2b01      	cmp	r3, #1
 801eb48:	d109      	bne.n	801eb5e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 801eb4a:	f7ff ffbf 	bl	801eacc <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 801eb4e:	4b08      	ldr	r3, [pc, #32]	; (801eb70 <osKernelStart+0x48>)
 801eb50:	2202      	movs	r2, #2
 801eb52:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 801eb54:	f000 ffb2 	bl	801fabc <vTaskStartScheduler>
      stat = osOK;
 801eb58:	2300      	movs	r3, #0
 801eb5a:	607b      	str	r3, [r7, #4]
 801eb5c:	e002      	b.n	801eb64 <osKernelStart+0x3c>
    } else {
      stat = osError;
 801eb5e:	f04f 33ff 	mov.w	r3, #4294967295
 801eb62:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 801eb64:	687b      	ldr	r3, [r7, #4]
}
 801eb66:	4618      	mov	r0, r3
 801eb68:	3708      	adds	r7, #8
 801eb6a:	46bd      	mov	sp, r7
 801eb6c:	bd80      	pop	{r7, pc}
 801eb6e:	bf00      	nop
 801eb70:	20000ff0 	.word	0x20000ff0

0801eb74 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 801eb74:	b580      	push	{r7, lr}
 801eb76:	b08e      	sub	sp, #56	; 0x38
 801eb78:	af04      	add	r7, sp, #16
 801eb7a:	60f8      	str	r0, [r7, #12]
 801eb7c:	60b9      	str	r1, [r7, #8]
 801eb7e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 801eb80:	2300      	movs	r3, #0
 801eb82:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801eb84:	f3ef 8305 	mrs	r3, IPSR
 801eb88:	617b      	str	r3, [r7, #20]
  return(result);
 801eb8a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 801eb8c:	2b00      	cmp	r3, #0
 801eb8e:	d17e      	bne.n	801ec8e <osThreadNew+0x11a>
 801eb90:	68fb      	ldr	r3, [r7, #12]
 801eb92:	2b00      	cmp	r3, #0
 801eb94:	d07b      	beq.n	801ec8e <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 801eb96:	2380      	movs	r3, #128	; 0x80
 801eb98:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 801eb9a:	2318      	movs	r3, #24
 801eb9c:	61fb      	str	r3, [r7, #28]

    name = NULL;
 801eb9e:	2300      	movs	r3, #0
 801eba0:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 801eba2:	f04f 33ff 	mov.w	r3, #4294967295
 801eba6:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 801eba8:	687b      	ldr	r3, [r7, #4]
 801ebaa:	2b00      	cmp	r3, #0
 801ebac:	d045      	beq.n	801ec3a <osThreadNew+0xc6>
      if (attr->name != NULL) {
 801ebae:	687b      	ldr	r3, [r7, #4]
 801ebb0:	681b      	ldr	r3, [r3, #0]
 801ebb2:	2b00      	cmp	r3, #0
 801ebb4:	d002      	beq.n	801ebbc <osThreadNew+0x48>
        name = attr->name;
 801ebb6:	687b      	ldr	r3, [r7, #4]
 801ebb8:	681b      	ldr	r3, [r3, #0]
 801ebba:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 801ebbc:	687b      	ldr	r3, [r7, #4]
 801ebbe:	699b      	ldr	r3, [r3, #24]
 801ebc0:	2b00      	cmp	r3, #0
 801ebc2:	d002      	beq.n	801ebca <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 801ebc4:	687b      	ldr	r3, [r7, #4]
 801ebc6:	699b      	ldr	r3, [r3, #24]
 801ebc8:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 801ebca:	69fb      	ldr	r3, [r7, #28]
 801ebcc:	2b00      	cmp	r3, #0
 801ebce:	d008      	beq.n	801ebe2 <osThreadNew+0x6e>
 801ebd0:	69fb      	ldr	r3, [r7, #28]
 801ebd2:	2b38      	cmp	r3, #56	; 0x38
 801ebd4:	d805      	bhi.n	801ebe2 <osThreadNew+0x6e>
 801ebd6:	687b      	ldr	r3, [r7, #4]
 801ebd8:	685b      	ldr	r3, [r3, #4]
 801ebda:	f003 0301 	and.w	r3, r3, #1
 801ebde:	2b00      	cmp	r3, #0
 801ebe0:	d001      	beq.n	801ebe6 <osThreadNew+0x72>
        return (NULL);
 801ebe2:	2300      	movs	r3, #0
 801ebe4:	e054      	b.n	801ec90 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 801ebe6:	687b      	ldr	r3, [r7, #4]
 801ebe8:	695b      	ldr	r3, [r3, #20]
 801ebea:	2b00      	cmp	r3, #0
 801ebec:	d003      	beq.n	801ebf6 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 801ebee:	687b      	ldr	r3, [r7, #4]
 801ebf0:	695b      	ldr	r3, [r3, #20]
 801ebf2:	089b      	lsrs	r3, r3, #2
 801ebf4:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 801ebf6:	687b      	ldr	r3, [r7, #4]
 801ebf8:	689b      	ldr	r3, [r3, #8]
 801ebfa:	2b00      	cmp	r3, #0
 801ebfc:	d00e      	beq.n	801ec1c <osThreadNew+0xa8>
 801ebfe:	687b      	ldr	r3, [r7, #4]
 801ec00:	68db      	ldr	r3, [r3, #12]
 801ec02:	2b5b      	cmp	r3, #91	; 0x5b
 801ec04:	d90a      	bls.n	801ec1c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 801ec06:	687b      	ldr	r3, [r7, #4]
 801ec08:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 801ec0a:	2b00      	cmp	r3, #0
 801ec0c:	d006      	beq.n	801ec1c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 801ec0e:	687b      	ldr	r3, [r7, #4]
 801ec10:	695b      	ldr	r3, [r3, #20]
 801ec12:	2b00      	cmp	r3, #0
 801ec14:	d002      	beq.n	801ec1c <osThreadNew+0xa8>
        mem = 1;
 801ec16:	2301      	movs	r3, #1
 801ec18:	61bb      	str	r3, [r7, #24]
 801ec1a:	e010      	b.n	801ec3e <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 801ec1c:	687b      	ldr	r3, [r7, #4]
 801ec1e:	689b      	ldr	r3, [r3, #8]
 801ec20:	2b00      	cmp	r3, #0
 801ec22:	d10c      	bne.n	801ec3e <osThreadNew+0xca>
 801ec24:	687b      	ldr	r3, [r7, #4]
 801ec26:	68db      	ldr	r3, [r3, #12]
 801ec28:	2b00      	cmp	r3, #0
 801ec2a:	d108      	bne.n	801ec3e <osThreadNew+0xca>
 801ec2c:	687b      	ldr	r3, [r7, #4]
 801ec2e:	691b      	ldr	r3, [r3, #16]
 801ec30:	2b00      	cmp	r3, #0
 801ec32:	d104      	bne.n	801ec3e <osThreadNew+0xca>
          mem = 0;
 801ec34:	2300      	movs	r3, #0
 801ec36:	61bb      	str	r3, [r7, #24]
 801ec38:	e001      	b.n	801ec3e <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 801ec3a:	2300      	movs	r3, #0
 801ec3c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 801ec3e:	69bb      	ldr	r3, [r7, #24]
 801ec40:	2b01      	cmp	r3, #1
 801ec42:	d110      	bne.n	801ec66 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 801ec44:	687b      	ldr	r3, [r7, #4]
 801ec46:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 801ec48:	687a      	ldr	r2, [r7, #4]
 801ec4a:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 801ec4c:	9202      	str	r2, [sp, #8]
 801ec4e:	9301      	str	r3, [sp, #4]
 801ec50:	69fb      	ldr	r3, [r7, #28]
 801ec52:	9300      	str	r3, [sp, #0]
 801ec54:	68bb      	ldr	r3, [r7, #8]
 801ec56:	6a3a      	ldr	r2, [r7, #32]
 801ec58:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801ec5a:	68f8      	ldr	r0, [r7, #12]
 801ec5c:	f000 fd30 	bl	801f6c0 <xTaskCreateStatic>
 801ec60:	4603      	mov	r3, r0
 801ec62:	613b      	str	r3, [r7, #16]
 801ec64:	e013      	b.n	801ec8e <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 801ec66:	69bb      	ldr	r3, [r7, #24]
 801ec68:	2b00      	cmp	r3, #0
 801ec6a:	d110      	bne.n	801ec8e <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 801ec6c:	6a3b      	ldr	r3, [r7, #32]
 801ec6e:	b29a      	uxth	r2, r3
 801ec70:	f107 0310 	add.w	r3, r7, #16
 801ec74:	9301      	str	r3, [sp, #4]
 801ec76:	69fb      	ldr	r3, [r7, #28]
 801ec78:	9300      	str	r3, [sp, #0]
 801ec7a:	68bb      	ldr	r3, [r7, #8]
 801ec7c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801ec7e:	68f8      	ldr	r0, [r7, #12]
 801ec80:	f000 fd63 	bl	801f74a <xTaskCreate>
 801ec84:	4603      	mov	r3, r0
 801ec86:	2b01      	cmp	r3, #1
 801ec88:	d001      	beq.n	801ec8e <osThreadNew+0x11a>
            hTask = NULL;
 801ec8a:	2300      	movs	r3, #0
 801ec8c:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 801ec8e:	693b      	ldr	r3, [r7, #16]
}
 801ec90:	4618      	mov	r0, r3
 801ec92:	3728      	adds	r7, #40	; 0x28
 801ec94:	46bd      	mov	sp, r7
 801ec96:	bd80      	pop	{r7, pc}

0801ec98 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 801ec98:	b480      	push	{r7}
 801ec9a:	b085      	sub	sp, #20
 801ec9c:	af00      	add	r7, sp, #0
 801ec9e:	60f8      	str	r0, [r7, #12]
 801eca0:	60b9      	str	r1, [r7, #8]
 801eca2:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 801eca4:	68fb      	ldr	r3, [r7, #12]
 801eca6:	4a07      	ldr	r2, [pc, #28]	; (801ecc4 <vApplicationGetIdleTaskMemory+0x2c>)
 801eca8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 801ecaa:	68bb      	ldr	r3, [r7, #8]
 801ecac:	4a06      	ldr	r2, [pc, #24]	; (801ecc8 <vApplicationGetIdleTaskMemory+0x30>)
 801ecae:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 801ecb0:	687b      	ldr	r3, [r7, #4]
 801ecb2:	2280      	movs	r2, #128	; 0x80
 801ecb4:	601a      	str	r2, [r3, #0]
}
 801ecb6:	bf00      	nop
 801ecb8:	3714      	adds	r7, #20
 801ecba:	46bd      	mov	sp, r7
 801ecbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ecc0:	4770      	bx	lr
 801ecc2:	bf00      	nop
 801ecc4:	20000ff4 	.word	0x20000ff4
 801ecc8:	20001050 	.word	0x20001050

0801eccc <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 801eccc:	b480      	push	{r7}
 801ecce:	b085      	sub	sp, #20
 801ecd0:	af00      	add	r7, sp, #0
 801ecd2:	60f8      	str	r0, [r7, #12]
 801ecd4:	60b9      	str	r1, [r7, #8]
 801ecd6:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 801ecd8:	68fb      	ldr	r3, [r7, #12]
 801ecda:	4a07      	ldr	r2, [pc, #28]	; (801ecf8 <vApplicationGetTimerTaskMemory+0x2c>)
 801ecdc:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 801ecde:	68bb      	ldr	r3, [r7, #8]
 801ece0:	4a06      	ldr	r2, [pc, #24]	; (801ecfc <vApplicationGetTimerTaskMemory+0x30>)
 801ece2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 801ece4:	687b      	ldr	r3, [r7, #4]
 801ece6:	f44f 7280 	mov.w	r2, #256	; 0x100
 801ecea:	601a      	str	r2, [r3, #0]
}
 801ecec:	bf00      	nop
 801ecee:	3714      	adds	r7, #20
 801ecf0:	46bd      	mov	sp, r7
 801ecf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ecf6:	4770      	bx	lr
 801ecf8:	20001250 	.word	0x20001250
 801ecfc:	200012ac 	.word	0x200012ac

0801ed00 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 801ed00:	b480      	push	{r7}
 801ed02:	b083      	sub	sp, #12
 801ed04:	af00      	add	r7, sp, #0
 801ed06:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 801ed08:	687b      	ldr	r3, [r7, #4]
 801ed0a:	f103 0208 	add.w	r2, r3, #8
 801ed0e:	687b      	ldr	r3, [r7, #4]
 801ed10:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 801ed12:	687b      	ldr	r3, [r7, #4]
 801ed14:	f04f 32ff 	mov.w	r2, #4294967295
 801ed18:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 801ed1a:	687b      	ldr	r3, [r7, #4]
 801ed1c:	f103 0208 	add.w	r2, r3, #8
 801ed20:	687b      	ldr	r3, [r7, #4]
 801ed22:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 801ed24:	687b      	ldr	r3, [r7, #4]
 801ed26:	f103 0208 	add.w	r2, r3, #8
 801ed2a:	687b      	ldr	r3, [r7, #4]
 801ed2c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 801ed2e:	687b      	ldr	r3, [r7, #4]
 801ed30:	2200      	movs	r2, #0
 801ed32:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 801ed34:	bf00      	nop
 801ed36:	370c      	adds	r7, #12
 801ed38:	46bd      	mov	sp, r7
 801ed3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ed3e:	4770      	bx	lr

0801ed40 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 801ed40:	b480      	push	{r7}
 801ed42:	b083      	sub	sp, #12
 801ed44:	af00      	add	r7, sp, #0
 801ed46:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 801ed48:	687b      	ldr	r3, [r7, #4]
 801ed4a:	2200      	movs	r2, #0
 801ed4c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 801ed4e:	bf00      	nop
 801ed50:	370c      	adds	r7, #12
 801ed52:	46bd      	mov	sp, r7
 801ed54:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ed58:	4770      	bx	lr

0801ed5a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 801ed5a:	b480      	push	{r7}
 801ed5c:	b085      	sub	sp, #20
 801ed5e:	af00      	add	r7, sp, #0
 801ed60:	6078      	str	r0, [r7, #4]
 801ed62:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 801ed64:	687b      	ldr	r3, [r7, #4]
 801ed66:	685b      	ldr	r3, [r3, #4]
 801ed68:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 801ed6a:	683b      	ldr	r3, [r7, #0]
 801ed6c:	68fa      	ldr	r2, [r7, #12]
 801ed6e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 801ed70:	68fb      	ldr	r3, [r7, #12]
 801ed72:	689a      	ldr	r2, [r3, #8]
 801ed74:	683b      	ldr	r3, [r7, #0]
 801ed76:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 801ed78:	68fb      	ldr	r3, [r7, #12]
 801ed7a:	689b      	ldr	r3, [r3, #8]
 801ed7c:	683a      	ldr	r2, [r7, #0]
 801ed7e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 801ed80:	68fb      	ldr	r3, [r7, #12]
 801ed82:	683a      	ldr	r2, [r7, #0]
 801ed84:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 801ed86:	683b      	ldr	r3, [r7, #0]
 801ed88:	687a      	ldr	r2, [r7, #4]
 801ed8a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 801ed8c:	687b      	ldr	r3, [r7, #4]
 801ed8e:	681b      	ldr	r3, [r3, #0]
 801ed90:	1c5a      	adds	r2, r3, #1
 801ed92:	687b      	ldr	r3, [r7, #4]
 801ed94:	601a      	str	r2, [r3, #0]
}
 801ed96:	bf00      	nop
 801ed98:	3714      	adds	r7, #20
 801ed9a:	46bd      	mov	sp, r7
 801ed9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801eda0:	4770      	bx	lr

0801eda2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 801eda2:	b480      	push	{r7}
 801eda4:	b085      	sub	sp, #20
 801eda6:	af00      	add	r7, sp, #0
 801eda8:	6078      	str	r0, [r7, #4]
 801edaa:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 801edac:	683b      	ldr	r3, [r7, #0]
 801edae:	681b      	ldr	r3, [r3, #0]
 801edb0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 801edb2:	68bb      	ldr	r3, [r7, #8]
 801edb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 801edb8:	d103      	bne.n	801edc2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 801edba:	687b      	ldr	r3, [r7, #4]
 801edbc:	691b      	ldr	r3, [r3, #16]
 801edbe:	60fb      	str	r3, [r7, #12]
 801edc0:	e00c      	b.n	801eddc <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 801edc2:	687b      	ldr	r3, [r7, #4]
 801edc4:	3308      	adds	r3, #8
 801edc6:	60fb      	str	r3, [r7, #12]
 801edc8:	e002      	b.n	801edd0 <vListInsert+0x2e>
 801edca:	68fb      	ldr	r3, [r7, #12]
 801edcc:	685b      	ldr	r3, [r3, #4]
 801edce:	60fb      	str	r3, [r7, #12]
 801edd0:	68fb      	ldr	r3, [r7, #12]
 801edd2:	685b      	ldr	r3, [r3, #4]
 801edd4:	681b      	ldr	r3, [r3, #0]
 801edd6:	68ba      	ldr	r2, [r7, #8]
 801edd8:	429a      	cmp	r2, r3
 801edda:	d2f6      	bcs.n	801edca <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 801eddc:	68fb      	ldr	r3, [r7, #12]
 801edde:	685a      	ldr	r2, [r3, #4]
 801ede0:	683b      	ldr	r3, [r7, #0]
 801ede2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 801ede4:	683b      	ldr	r3, [r7, #0]
 801ede6:	685b      	ldr	r3, [r3, #4]
 801ede8:	683a      	ldr	r2, [r7, #0]
 801edea:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 801edec:	683b      	ldr	r3, [r7, #0]
 801edee:	68fa      	ldr	r2, [r7, #12]
 801edf0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 801edf2:	68fb      	ldr	r3, [r7, #12]
 801edf4:	683a      	ldr	r2, [r7, #0]
 801edf6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 801edf8:	683b      	ldr	r3, [r7, #0]
 801edfa:	687a      	ldr	r2, [r7, #4]
 801edfc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 801edfe:	687b      	ldr	r3, [r7, #4]
 801ee00:	681b      	ldr	r3, [r3, #0]
 801ee02:	1c5a      	adds	r2, r3, #1
 801ee04:	687b      	ldr	r3, [r7, #4]
 801ee06:	601a      	str	r2, [r3, #0]
}
 801ee08:	bf00      	nop
 801ee0a:	3714      	adds	r7, #20
 801ee0c:	46bd      	mov	sp, r7
 801ee0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ee12:	4770      	bx	lr

0801ee14 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 801ee14:	b480      	push	{r7}
 801ee16:	b085      	sub	sp, #20
 801ee18:	af00      	add	r7, sp, #0
 801ee1a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 801ee1c:	687b      	ldr	r3, [r7, #4]
 801ee1e:	691b      	ldr	r3, [r3, #16]
 801ee20:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 801ee22:	687b      	ldr	r3, [r7, #4]
 801ee24:	685b      	ldr	r3, [r3, #4]
 801ee26:	687a      	ldr	r2, [r7, #4]
 801ee28:	6892      	ldr	r2, [r2, #8]
 801ee2a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 801ee2c:	687b      	ldr	r3, [r7, #4]
 801ee2e:	689b      	ldr	r3, [r3, #8]
 801ee30:	687a      	ldr	r2, [r7, #4]
 801ee32:	6852      	ldr	r2, [r2, #4]
 801ee34:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 801ee36:	68fb      	ldr	r3, [r7, #12]
 801ee38:	685b      	ldr	r3, [r3, #4]
 801ee3a:	687a      	ldr	r2, [r7, #4]
 801ee3c:	429a      	cmp	r2, r3
 801ee3e:	d103      	bne.n	801ee48 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 801ee40:	687b      	ldr	r3, [r7, #4]
 801ee42:	689a      	ldr	r2, [r3, #8]
 801ee44:	68fb      	ldr	r3, [r7, #12]
 801ee46:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 801ee48:	687b      	ldr	r3, [r7, #4]
 801ee4a:	2200      	movs	r2, #0
 801ee4c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 801ee4e:	68fb      	ldr	r3, [r7, #12]
 801ee50:	681b      	ldr	r3, [r3, #0]
 801ee52:	1e5a      	subs	r2, r3, #1
 801ee54:	68fb      	ldr	r3, [r7, #12]
 801ee56:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 801ee58:	68fb      	ldr	r3, [r7, #12]
 801ee5a:	681b      	ldr	r3, [r3, #0]
}
 801ee5c:	4618      	mov	r0, r3
 801ee5e:	3714      	adds	r7, #20
 801ee60:	46bd      	mov	sp, r7
 801ee62:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ee66:	4770      	bx	lr

0801ee68 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 801ee68:	b580      	push	{r7, lr}
 801ee6a:	b084      	sub	sp, #16
 801ee6c:	af00      	add	r7, sp, #0
 801ee6e:	6078      	str	r0, [r7, #4]
 801ee70:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 801ee72:	687b      	ldr	r3, [r7, #4]
 801ee74:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 801ee76:	68fb      	ldr	r3, [r7, #12]
 801ee78:	2b00      	cmp	r3, #0
 801ee7a:	d102      	bne.n	801ee82 <xQueueGenericReset+0x1a>
 801ee7c:	f001 ff5c 	bl	8020d38 <ulSetInterruptMask>
 801ee80:	e7fe      	b.n	801ee80 <xQueueGenericReset+0x18>

	taskENTER_CRITICAL();
 801ee82:	f001 fe27 	bl	8020ad4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 801ee86:	68fb      	ldr	r3, [r7, #12]
 801ee88:	681a      	ldr	r2, [r3, #0]
 801ee8a:	68fb      	ldr	r3, [r7, #12]
 801ee8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801ee8e:	68f9      	ldr	r1, [r7, #12]
 801ee90:	6c09      	ldr	r1, [r1, #64]	; 0x40
 801ee92:	fb01 f303 	mul.w	r3, r1, r3
 801ee96:	441a      	add	r2, r3
 801ee98:	68fb      	ldr	r3, [r7, #12]
 801ee9a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 801ee9c:	68fb      	ldr	r3, [r7, #12]
 801ee9e:	2200      	movs	r2, #0
 801eea0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 801eea2:	68fb      	ldr	r3, [r7, #12]
 801eea4:	681a      	ldr	r2, [r3, #0]
 801eea6:	68fb      	ldr	r3, [r7, #12]
 801eea8:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 801eeaa:	68fb      	ldr	r3, [r7, #12]
 801eeac:	681a      	ldr	r2, [r3, #0]
 801eeae:	68fb      	ldr	r3, [r7, #12]
 801eeb0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801eeb2:	3b01      	subs	r3, #1
 801eeb4:	68f9      	ldr	r1, [r7, #12]
 801eeb6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 801eeb8:	fb01 f303 	mul.w	r3, r1, r3
 801eebc:	441a      	add	r2, r3
 801eebe:	68fb      	ldr	r3, [r7, #12]
 801eec0:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 801eec2:	68fb      	ldr	r3, [r7, #12]
 801eec4:	22ff      	movs	r2, #255	; 0xff
 801eec6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 801eeca:	68fb      	ldr	r3, [r7, #12]
 801eecc:	22ff      	movs	r2, #255	; 0xff
 801eece:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 801eed2:	683b      	ldr	r3, [r7, #0]
 801eed4:	2b00      	cmp	r3, #0
 801eed6:	d10e      	bne.n	801eef6 <xQueueGenericReset+0x8e>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801eed8:	68fb      	ldr	r3, [r7, #12]
 801eeda:	691b      	ldr	r3, [r3, #16]
 801eedc:	2b00      	cmp	r3, #0
 801eede:	d014      	beq.n	801ef0a <xQueueGenericReset+0xa2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801eee0:	68fb      	ldr	r3, [r7, #12]
 801eee2:	3310      	adds	r3, #16
 801eee4:	4618      	mov	r0, r3
 801eee6:	f001 f831 	bl	801ff4c <xTaskRemoveFromEventList>
 801eeea:	4603      	mov	r3, r0
 801eeec:	2b00      	cmp	r3, #0
 801eeee:	d00c      	beq.n	801ef0a <xQueueGenericReset+0xa2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 801eef0:	f001 fdde 	bl	8020ab0 <vPortYield>
 801eef4:	e009      	b.n	801ef0a <xQueueGenericReset+0xa2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 801eef6:	68fb      	ldr	r3, [r7, #12]
 801eef8:	3310      	adds	r3, #16
 801eefa:	4618      	mov	r0, r3
 801eefc:	f7ff ff00 	bl	801ed00 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 801ef00:	68fb      	ldr	r3, [r7, #12]
 801ef02:	3324      	adds	r3, #36	; 0x24
 801ef04:	4618      	mov	r0, r3
 801ef06:	f7ff fefb 	bl	801ed00 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 801ef0a:	f001 fdf5 	bl	8020af8 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 801ef0e:	2301      	movs	r3, #1
}
 801ef10:	4618      	mov	r0, r3
 801ef12:	3710      	adds	r7, #16
 801ef14:	46bd      	mov	sp, r7
 801ef16:	bd80      	pop	{r7, pc}

0801ef18 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 801ef18:	b580      	push	{r7, lr}
 801ef1a:	b088      	sub	sp, #32
 801ef1c:	af02      	add	r7, sp, #8
 801ef1e:	60f8      	str	r0, [r7, #12]
 801ef20:	60b9      	str	r1, [r7, #8]
 801ef22:	607a      	str	r2, [r7, #4]
 801ef24:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 801ef26:	68fb      	ldr	r3, [r7, #12]
 801ef28:	2b00      	cmp	r3, #0
 801ef2a:	d102      	bne.n	801ef32 <xQueueGenericCreateStatic+0x1a>
 801ef2c:	f001 ff04 	bl	8020d38 <ulSetInterruptMask>
 801ef30:	e7fe      	b.n	801ef30 <xQueueGenericCreateStatic+0x18>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 801ef32:	683b      	ldr	r3, [r7, #0]
 801ef34:	2b00      	cmp	r3, #0
 801ef36:	d102      	bne.n	801ef3e <xQueueGenericCreateStatic+0x26>
 801ef38:	f001 fefe 	bl	8020d38 <ulSetInterruptMask>
 801ef3c:	e7fe      	b.n	801ef3c <xQueueGenericCreateStatic+0x24>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 801ef3e:	687b      	ldr	r3, [r7, #4]
 801ef40:	2b00      	cmp	r3, #0
 801ef42:	d002      	beq.n	801ef4a <xQueueGenericCreateStatic+0x32>
 801ef44:	68bb      	ldr	r3, [r7, #8]
 801ef46:	2b00      	cmp	r3, #0
 801ef48:	d001      	beq.n	801ef4e <xQueueGenericCreateStatic+0x36>
 801ef4a:	2301      	movs	r3, #1
 801ef4c:	e000      	b.n	801ef50 <xQueueGenericCreateStatic+0x38>
 801ef4e:	2300      	movs	r3, #0
 801ef50:	2b00      	cmp	r3, #0
 801ef52:	d102      	bne.n	801ef5a <xQueueGenericCreateStatic+0x42>
 801ef54:	f001 fef0 	bl	8020d38 <ulSetInterruptMask>
 801ef58:	e7fe      	b.n	801ef58 <xQueueGenericCreateStatic+0x40>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 801ef5a:	687b      	ldr	r3, [r7, #4]
 801ef5c:	2b00      	cmp	r3, #0
 801ef5e:	d102      	bne.n	801ef66 <xQueueGenericCreateStatic+0x4e>
 801ef60:	68bb      	ldr	r3, [r7, #8]
 801ef62:	2b00      	cmp	r3, #0
 801ef64:	d101      	bne.n	801ef6a <xQueueGenericCreateStatic+0x52>
 801ef66:	2301      	movs	r3, #1
 801ef68:	e000      	b.n	801ef6c <xQueueGenericCreateStatic+0x54>
 801ef6a:	2300      	movs	r3, #0
 801ef6c:	2b00      	cmp	r3, #0
 801ef6e:	d102      	bne.n	801ef76 <xQueueGenericCreateStatic+0x5e>
 801ef70:	f001 fee2 	bl	8020d38 <ulSetInterruptMask>
 801ef74:	e7fe      	b.n	801ef74 <xQueueGenericCreateStatic+0x5c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 801ef76:	2350      	movs	r3, #80	; 0x50
 801ef78:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Queue_t ) );
 801ef7a:	693b      	ldr	r3, [r7, #16]
 801ef7c:	2b50      	cmp	r3, #80	; 0x50
 801ef7e:	d002      	beq.n	801ef86 <xQueueGenericCreateStatic+0x6e>
 801ef80:	f001 feda 	bl	8020d38 <ulSetInterruptMask>
 801ef84:	e7fe      	b.n	801ef84 <xQueueGenericCreateStatic+0x6c>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 801ef86:	693b      	ldr	r3, [r7, #16]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 801ef88:	683b      	ldr	r3, [r7, #0]
 801ef8a:	617b      	str	r3, [r7, #20]

		if( pxNewQueue != NULL )
 801ef8c:	697b      	ldr	r3, [r7, #20]
 801ef8e:	2b00      	cmp	r3, #0
 801ef90:	d00d      	beq.n	801efae <xQueueGenericCreateStatic+0x96>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 801ef92:	697b      	ldr	r3, [r7, #20]
 801ef94:	2201      	movs	r2, #1
 801ef96:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 801ef9a:	f897 2020 	ldrb.w	r2, [r7, #32]
 801ef9e:	697b      	ldr	r3, [r7, #20]
 801efa0:	9300      	str	r3, [sp, #0]
 801efa2:	4613      	mov	r3, r2
 801efa4:	687a      	ldr	r2, [r7, #4]
 801efa6:	68b9      	ldr	r1, [r7, #8]
 801efa8:	68f8      	ldr	r0, [r7, #12]
 801efaa:	f000 f805 	bl	801efb8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 801efae:	697b      	ldr	r3, [r7, #20]
	}
 801efb0:	4618      	mov	r0, r3
 801efb2:	3718      	adds	r7, #24
 801efb4:	46bd      	mov	sp, r7
 801efb6:	bd80      	pop	{r7, pc}

0801efb8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 801efb8:	b580      	push	{r7, lr}
 801efba:	b084      	sub	sp, #16
 801efbc:	af00      	add	r7, sp, #0
 801efbe:	60f8      	str	r0, [r7, #12]
 801efc0:	60b9      	str	r1, [r7, #8]
 801efc2:	607a      	str	r2, [r7, #4]
 801efc4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 801efc6:	68bb      	ldr	r3, [r7, #8]
 801efc8:	2b00      	cmp	r3, #0
 801efca:	d103      	bne.n	801efd4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 801efcc:	69bb      	ldr	r3, [r7, #24]
 801efce:	69ba      	ldr	r2, [r7, #24]
 801efd0:	601a      	str	r2, [r3, #0]
 801efd2:	e002      	b.n	801efda <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 801efd4:	69bb      	ldr	r3, [r7, #24]
 801efd6:	687a      	ldr	r2, [r7, #4]
 801efd8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 801efda:	69bb      	ldr	r3, [r7, #24]
 801efdc:	68fa      	ldr	r2, [r7, #12]
 801efde:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 801efe0:	69bb      	ldr	r3, [r7, #24]
 801efe2:	68ba      	ldr	r2, [r7, #8]
 801efe4:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 801efe6:	2101      	movs	r1, #1
 801efe8:	69b8      	ldr	r0, [r7, #24]
 801efea:	f7ff ff3d 	bl	801ee68 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 801efee:	69bb      	ldr	r3, [r7, #24]
 801eff0:	78fa      	ldrb	r2, [r7, #3]
 801eff2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 801eff6:	bf00      	nop
 801eff8:	3710      	adds	r7, #16
 801effa:	46bd      	mov	sp, r7
 801effc:	bd80      	pop	{r7, pc}

0801effe <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 801effe:	b580      	push	{r7, lr}
 801f000:	b08a      	sub	sp, #40	; 0x28
 801f002:	af00      	add	r7, sp, #0
 801f004:	60f8      	str	r0, [r7, #12]
 801f006:	60b9      	str	r1, [r7, #8]
 801f008:	607a      	str	r2, [r7, #4]
 801f00a:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 801f00c:	2300      	movs	r3, #0
 801f00e:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 801f010:	68fb      	ldr	r3, [r7, #12]
 801f012:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
 801f014:	6a3b      	ldr	r3, [r7, #32]
 801f016:	2b00      	cmp	r3, #0
 801f018:	d102      	bne.n	801f020 <xQueueGenericSend+0x22>
 801f01a:	f001 fe8d 	bl	8020d38 <ulSetInterruptMask>
 801f01e:	e7fe      	b.n	801f01e <xQueueGenericSend+0x20>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801f020:	68bb      	ldr	r3, [r7, #8]
 801f022:	2b00      	cmp	r3, #0
 801f024:	d103      	bne.n	801f02e <xQueueGenericSend+0x30>
 801f026:	6a3b      	ldr	r3, [r7, #32]
 801f028:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801f02a:	2b00      	cmp	r3, #0
 801f02c:	d101      	bne.n	801f032 <xQueueGenericSend+0x34>
 801f02e:	2301      	movs	r3, #1
 801f030:	e000      	b.n	801f034 <xQueueGenericSend+0x36>
 801f032:	2300      	movs	r3, #0
 801f034:	2b00      	cmp	r3, #0
 801f036:	d102      	bne.n	801f03e <xQueueGenericSend+0x40>
 801f038:	f001 fe7e 	bl	8020d38 <ulSetInterruptMask>
 801f03c:	e7fe      	b.n	801f03c <xQueueGenericSend+0x3e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 801f03e:	683b      	ldr	r3, [r7, #0]
 801f040:	2b02      	cmp	r3, #2
 801f042:	d103      	bne.n	801f04c <xQueueGenericSend+0x4e>
 801f044:	6a3b      	ldr	r3, [r7, #32]
 801f046:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801f048:	2b01      	cmp	r3, #1
 801f04a:	d101      	bne.n	801f050 <xQueueGenericSend+0x52>
 801f04c:	2301      	movs	r3, #1
 801f04e:	e000      	b.n	801f052 <xQueueGenericSend+0x54>
 801f050:	2300      	movs	r3, #0
 801f052:	2b00      	cmp	r3, #0
 801f054:	d102      	bne.n	801f05c <xQueueGenericSend+0x5e>
 801f056:	f001 fe6f 	bl	8020d38 <ulSetInterruptMask>
 801f05a:	e7fe      	b.n	801f05a <xQueueGenericSend+0x5c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 801f05c:	f001 f90c 	bl	8020278 <xTaskGetSchedulerState>
 801f060:	4603      	mov	r3, r0
 801f062:	2b00      	cmp	r3, #0
 801f064:	d102      	bne.n	801f06c <xQueueGenericSend+0x6e>
 801f066:	687b      	ldr	r3, [r7, #4]
 801f068:	2b00      	cmp	r3, #0
 801f06a:	d101      	bne.n	801f070 <xQueueGenericSend+0x72>
 801f06c:	2301      	movs	r3, #1
 801f06e:	e000      	b.n	801f072 <xQueueGenericSend+0x74>
 801f070:	2300      	movs	r3, #0
 801f072:	2b00      	cmp	r3, #0
 801f074:	d102      	bne.n	801f07c <xQueueGenericSend+0x7e>
 801f076:	f001 fe5f 	bl	8020d38 <ulSetInterruptMask>
 801f07a:	e7fe      	b.n	801f07a <xQueueGenericSend+0x7c>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 801f07c:	f001 fd2a 	bl	8020ad4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 801f080:	6a3b      	ldr	r3, [r7, #32]
 801f082:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801f084:	6a3b      	ldr	r3, [r7, #32]
 801f086:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801f088:	429a      	cmp	r2, r3
 801f08a:	d302      	bcc.n	801f092 <xQueueGenericSend+0x94>
 801f08c:	683b      	ldr	r3, [r7, #0]
 801f08e:	2b02      	cmp	r3, #2
 801f090:	d11d      	bne.n	801f0ce <xQueueGenericSend+0xd0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 801f092:	683a      	ldr	r2, [r7, #0]
 801f094:	68b9      	ldr	r1, [r7, #8]
 801f096:	6a38      	ldr	r0, [r7, #32]
 801f098:	f000 f9a4 	bl	801f3e4 <prvCopyDataToQueue>
 801f09c:	61f8      	str	r0, [r7, #28]

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801f09e:	6a3b      	ldr	r3, [r7, #32]
 801f0a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801f0a2:	2b00      	cmp	r3, #0
 801f0a4:	d00a      	beq.n	801f0bc <xQueueGenericSend+0xbe>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801f0a6:	6a3b      	ldr	r3, [r7, #32]
 801f0a8:	3324      	adds	r3, #36	; 0x24
 801f0aa:	4618      	mov	r0, r3
 801f0ac:	f000 ff4e 	bl	801ff4c <xTaskRemoveFromEventList>
 801f0b0:	4603      	mov	r3, r0
 801f0b2:	2b00      	cmp	r3, #0
 801f0b4:	d007      	beq.n	801f0c6 <xQueueGenericSend+0xc8>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 801f0b6:	f001 fcfb 	bl	8020ab0 <vPortYield>
 801f0ba:	e004      	b.n	801f0c6 <xQueueGenericSend+0xc8>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 801f0bc:	69fb      	ldr	r3, [r7, #28]
 801f0be:	2b00      	cmp	r3, #0
 801f0c0:	d001      	beq.n	801f0c6 <xQueueGenericSend+0xc8>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 801f0c2:	f001 fcf5 	bl	8020ab0 <vPortYield>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 801f0c6:	f001 fd17 	bl	8020af8 <vPortExitCritical>
				return pdPASS;
 801f0ca:	2301      	movs	r3, #1
 801f0cc:	e05c      	b.n	801f188 <xQueueGenericSend+0x18a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 801f0ce:	687b      	ldr	r3, [r7, #4]
 801f0d0:	2b00      	cmp	r3, #0
 801f0d2:	d103      	bne.n	801f0dc <xQueueGenericSend+0xde>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 801f0d4:	f001 fd10 	bl	8020af8 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 801f0d8:	2300      	movs	r3, #0
 801f0da:	e055      	b.n	801f188 <xQueueGenericSend+0x18a>
				}
				else if( xEntryTimeSet == pdFALSE )
 801f0dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f0de:	2b00      	cmp	r3, #0
 801f0e0:	d106      	bne.n	801f0f0 <xQueueGenericSend+0xf2>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 801f0e2:	f107 0314 	add.w	r3, r7, #20
 801f0e6:	4618      	mov	r0, r3
 801f0e8:	f000 ff8c 	bl	8020004 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 801f0ec:	2301      	movs	r3, #1
 801f0ee:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 801f0f0:	f001 fd02 	bl	8020af8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 801f0f4:	f000 fd38 	bl	801fb68 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 801f0f8:	f001 fcec 	bl	8020ad4 <vPortEnterCritical>
 801f0fc:	6a3b      	ldr	r3, [r7, #32]
 801f0fe:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801f102:	b25b      	sxtb	r3, r3
 801f104:	f1b3 3fff 	cmp.w	r3, #4294967295
 801f108:	d103      	bne.n	801f112 <xQueueGenericSend+0x114>
 801f10a:	6a3b      	ldr	r3, [r7, #32]
 801f10c:	2200      	movs	r2, #0
 801f10e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801f112:	6a3b      	ldr	r3, [r7, #32]
 801f114:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801f118:	b25b      	sxtb	r3, r3
 801f11a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801f11e:	d103      	bne.n	801f128 <xQueueGenericSend+0x12a>
 801f120:	6a3b      	ldr	r3, [r7, #32]
 801f122:	2200      	movs	r2, #0
 801f124:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801f128:	f001 fce6 	bl	8020af8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 801f12c:	1d3a      	adds	r2, r7, #4
 801f12e:	f107 0314 	add.w	r3, r7, #20
 801f132:	4611      	mov	r1, r2
 801f134:	4618      	mov	r0, r3
 801f136:	f000 ff7b 	bl	8020030 <xTaskCheckForTimeOut>
 801f13a:	4603      	mov	r3, r0
 801f13c:	2b00      	cmp	r3, #0
 801f13e:	d11d      	bne.n	801f17c <xQueueGenericSend+0x17e>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 801f140:	6a38      	ldr	r0, [r7, #32]
 801f142:	f000 fa47 	bl	801f5d4 <prvIsQueueFull>
 801f146:	4603      	mov	r3, r0
 801f148:	2b00      	cmp	r3, #0
 801f14a:	d011      	beq.n	801f170 <xQueueGenericSend+0x172>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 801f14c:	6a3b      	ldr	r3, [r7, #32]
 801f14e:	3310      	adds	r3, #16
 801f150:	687a      	ldr	r2, [r7, #4]
 801f152:	4611      	mov	r1, r2
 801f154:	4618      	mov	r0, r3
 801f156:	f000 feb9 	bl	801fecc <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 801f15a:	6a38      	ldr	r0, [r7, #32]
 801f15c:	f000 f9d2 	bl	801f504 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 801f160:	f000 fd10 	bl	801fb84 <xTaskResumeAll>
 801f164:	4603      	mov	r3, r0
 801f166:	2b00      	cmp	r3, #0
 801f168:	d188      	bne.n	801f07c <xQueueGenericSend+0x7e>
				{
					portYIELD_WITHIN_API();
 801f16a:	f001 fca1 	bl	8020ab0 <vPortYield>
 801f16e:	e785      	b.n	801f07c <xQueueGenericSend+0x7e>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 801f170:	6a38      	ldr	r0, [r7, #32]
 801f172:	f000 f9c7 	bl	801f504 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 801f176:	f000 fd05 	bl	801fb84 <xTaskResumeAll>
 801f17a:	e77f      	b.n	801f07c <xQueueGenericSend+0x7e>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 801f17c:	6a38      	ldr	r0, [r7, #32]
 801f17e:	f000 f9c1 	bl	801f504 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 801f182:	f000 fcff 	bl	801fb84 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 801f186:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 801f188:	4618      	mov	r0, r3
 801f18a:	3728      	adds	r7, #40	; 0x28
 801f18c:	46bd      	mov	sp, r7
 801f18e:	bd80      	pop	{r7, pc}

0801f190 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 801f190:	b580      	push	{r7, lr}
 801f192:	b08a      	sub	sp, #40	; 0x28
 801f194:	af00      	add	r7, sp, #0
 801f196:	60f8      	str	r0, [r7, #12]
 801f198:	60b9      	str	r1, [r7, #8]
 801f19a:	607a      	str	r2, [r7, #4]
 801f19c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 801f19e:	68fb      	ldr	r3, [r7, #12]
 801f1a0:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
 801f1a2:	6a3b      	ldr	r3, [r7, #32]
 801f1a4:	2b00      	cmp	r3, #0
 801f1a6:	d102      	bne.n	801f1ae <xQueueGenericSendFromISR+0x1e>
 801f1a8:	f001 fdc6 	bl	8020d38 <ulSetInterruptMask>
 801f1ac:	e7fe      	b.n	801f1ac <xQueueGenericSendFromISR+0x1c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801f1ae:	68bb      	ldr	r3, [r7, #8]
 801f1b0:	2b00      	cmp	r3, #0
 801f1b2:	d103      	bne.n	801f1bc <xQueueGenericSendFromISR+0x2c>
 801f1b4:	6a3b      	ldr	r3, [r7, #32]
 801f1b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801f1b8:	2b00      	cmp	r3, #0
 801f1ba:	d101      	bne.n	801f1c0 <xQueueGenericSendFromISR+0x30>
 801f1bc:	2301      	movs	r3, #1
 801f1be:	e000      	b.n	801f1c2 <xQueueGenericSendFromISR+0x32>
 801f1c0:	2300      	movs	r3, #0
 801f1c2:	2b00      	cmp	r3, #0
 801f1c4:	d102      	bne.n	801f1cc <xQueueGenericSendFromISR+0x3c>
 801f1c6:	f001 fdb7 	bl	8020d38 <ulSetInterruptMask>
 801f1ca:	e7fe      	b.n	801f1ca <xQueueGenericSendFromISR+0x3a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 801f1cc:	683b      	ldr	r3, [r7, #0]
 801f1ce:	2b02      	cmp	r3, #2
 801f1d0:	d103      	bne.n	801f1da <xQueueGenericSendFromISR+0x4a>
 801f1d2:	6a3b      	ldr	r3, [r7, #32]
 801f1d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801f1d6:	2b01      	cmp	r3, #1
 801f1d8:	d101      	bne.n	801f1de <xQueueGenericSendFromISR+0x4e>
 801f1da:	2301      	movs	r3, #1
 801f1dc:	e000      	b.n	801f1e0 <xQueueGenericSendFromISR+0x50>
 801f1de:	2300      	movs	r3, #0
 801f1e0:	2b00      	cmp	r3, #0
 801f1e2:	d102      	bne.n	801f1ea <xQueueGenericSendFromISR+0x5a>
 801f1e4:	f001 fda8 	bl	8020d38 <ulSetInterruptMask>
 801f1e8:	e7fe      	b.n	801f1e8 <xQueueGenericSendFromISR+0x58>
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 801f1ea:	f001 fda5 	bl	8020d38 <ulSetInterruptMask>
 801f1ee:	61f8      	str	r0, [r7, #28]
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 801f1f0:	6a3b      	ldr	r3, [r7, #32]
 801f1f2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801f1f4:	6a3b      	ldr	r3, [r7, #32]
 801f1f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801f1f8:	429a      	cmp	r2, r3
 801f1fa:	d302      	bcc.n	801f202 <xQueueGenericSendFromISR+0x72>
 801f1fc:	683b      	ldr	r3, [r7, #0]
 801f1fe:	2b02      	cmp	r3, #2
 801f200:	d12d      	bne.n	801f25e <xQueueGenericSendFromISR+0xce>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 801f202:	6a3b      	ldr	r3, [r7, #32]
 801f204:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801f208:	76fb      	strb	r3, [r7, #27]
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 801f20a:	6a3b      	ldr	r3, [r7, #32]
 801f20c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801f20e:	617b      	str	r3, [r7, #20]
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 801f210:	683a      	ldr	r2, [r7, #0]
 801f212:	68b9      	ldr	r1, [r7, #8]
 801f214:	6a38      	ldr	r0, [r7, #32]
 801f216:	f000 f8e5 	bl	801f3e4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 801f21a:	f997 301b 	ldrsb.w	r3, [r7, #27]
 801f21e:	f1b3 3fff 	cmp.w	r3, #4294967295
 801f222:	d112      	bne.n	801f24a <xQueueGenericSendFromISR+0xba>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801f224:	6a3b      	ldr	r3, [r7, #32]
 801f226:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801f228:	2b00      	cmp	r3, #0
 801f22a:	d015      	beq.n	801f258 <xQueueGenericSendFromISR+0xc8>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801f22c:	6a3b      	ldr	r3, [r7, #32]
 801f22e:	3324      	adds	r3, #36	; 0x24
 801f230:	4618      	mov	r0, r3
 801f232:	f000 fe8b 	bl	801ff4c <xTaskRemoveFromEventList>
 801f236:	4603      	mov	r3, r0
 801f238:	2b00      	cmp	r3, #0
 801f23a:	d00d      	beq.n	801f258 <xQueueGenericSendFromISR+0xc8>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 801f23c:	687b      	ldr	r3, [r7, #4]
 801f23e:	2b00      	cmp	r3, #0
 801f240:	d00a      	beq.n	801f258 <xQueueGenericSendFromISR+0xc8>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 801f242:	687b      	ldr	r3, [r7, #4]
 801f244:	2201      	movs	r2, #1
 801f246:	601a      	str	r2, [r3, #0]
 801f248:	e006      	b.n	801f258 <xQueueGenericSendFromISR+0xc8>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 801f24a:	7efb      	ldrb	r3, [r7, #27]
 801f24c:	3301      	adds	r3, #1
 801f24e:	b2db      	uxtb	r3, r3
 801f250:	b25a      	sxtb	r2, r3
 801f252:	6a3b      	ldr	r3, [r7, #32]
 801f254:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 801f258:	2301      	movs	r3, #1
 801f25a:	627b      	str	r3, [r7, #36]	; 0x24
		{
 801f25c:	e001      	b.n	801f262 <xQueueGenericSendFromISR+0xd2>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 801f25e:	2300      	movs	r3, #0
 801f260:	627b      	str	r3, [r7, #36]	; 0x24
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 801f262:	69f8      	ldr	r0, [r7, #28]
 801f264:	f001 fd75 	bl	8020d52 <vClearInterruptMask>

	return xReturn;
 801f268:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 801f26a:	4618      	mov	r0, r3
 801f26c:	3728      	adds	r7, #40	; 0x28
 801f26e:	46bd      	mov	sp, r7
 801f270:	bd80      	pop	{r7, pc}

0801f272 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 801f272:	b580      	push	{r7, lr}
 801f274:	b08a      	sub	sp, #40	; 0x28
 801f276:	af00      	add	r7, sp, #0
 801f278:	60f8      	str	r0, [r7, #12]
 801f27a:	60b9      	str	r1, [r7, #8]
 801f27c:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 801f27e:	2300      	movs	r3, #0
 801f280:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 801f282:	68fb      	ldr	r3, [r7, #12]
 801f284:	623b      	str	r3, [r7, #32]

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 801f286:	6a3b      	ldr	r3, [r7, #32]
 801f288:	2b00      	cmp	r3, #0
 801f28a:	d102      	bne.n	801f292 <xQueueReceive+0x20>
 801f28c:	f001 fd54 	bl	8020d38 <ulSetInterruptMask>
 801f290:	e7fe      	b.n	801f290 <xQueueReceive+0x1e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801f292:	68bb      	ldr	r3, [r7, #8]
 801f294:	2b00      	cmp	r3, #0
 801f296:	d103      	bne.n	801f2a0 <xQueueReceive+0x2e>
 801f298:	6a3b      	ldr	r3, [r7, #32]
 801f29a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801f29c:	2b00      	cmp	r3, #0
 801f29e:	d101      	bne.n	801f2a4 <xQueueReceive+0x32>
 801f2a0:	2301      	movs	r3, #1
 801f2a2:	e000      	b.n	801f2a6 <xQueueReceive+0x34>
 801f2a4:	2300      	movs	r3, #0
 801f2a6:	2b00      	cmp	r3, #0
 801f2a8:	d102      	bne.n	801f2b0 <xQueueReceive+0x3e>
 801f2aa:	f001 fd45 	bl	8020d38 <ulSetInterruptMask>
 801f2ae:	e7fe      	b.n	801f2ae <xQueueReceive+0x3c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 801f2b0:	f000 ffe2 	bl	8020278 <xTaskGetSchedulerState>
 801f2b4:	4603      	mov	r3, r0
 801f2b6:	2b00      	cmp	r3, #0
 801f2b8:	d102      	bne.n	801f2c0 <xQueueReceive+0x4e>
 801f2ba:	687b      	ldr	r3, [r7, #4]
 801f2bc:	2b00      	cmp	r3, #0
 801f2be:	d101      	bne.n	801f2c4 <xQueueReceive+0x52>
 801f2c0:	2301      	movs	r3, #1
 801f2c2:	e000      	b.n	801f2c6 <xQueueReceive+0x54>
 801f2c4:	2300      	movs	r3, #0
 801f2c6:	2b00      	cmp	r3, #0
 801f2c8:	d102      	bne.n	801f2d0 <xQueueReceive+0x5e>
 801f2ca:	f001 fd35 	bl	8020d38 <ulSetInterruptMask>
 801f2ce:	e7fe      	b.n	801f2ce <xQueueReceive+0x5c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 801f2d0:	f001 fc00 	bl	8020ad4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801f2d4:	6a3b      	ldr	r3, [r7, #32]
 801f2d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801f2d8:	61fb      	str	r3, [r7, #28]

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 801f2da:	69fb      	ldr	r3, [r7, #28]
 801f2dc:	2b00      	cmp	r3, #0
 801f2de:	d019      	beq.n	801f314 <xQueueReceive+0xa2>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 801f2e0:	68b9      	ldr	r1, [r7, #8]
 801f2e2:	6a38      	ldr	r0, [r7, #32]
 801f2e4:	f000 f8e8 	bl	801f4b8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 801f2e8:	69fb      	ldr	r3, [r7, #28]
 801f2ea:	1e5a      	subs	r2, r3, #1
 801f2ec:	6a3b      	ldr	r3, [r7, #32]
 801f2ee:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801f2f0:	6a3b      	ldr	r3, [r7, #32]
 801f2f2:	691b      	ldr	r3, [r3, #16]
 801f2f4:	2b00      	cmp	r3, #0
 801f2f6:	d009      	beq.n	801f30c <xQueueReceive+0x9a>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801f2f8:	6a3b      	ldr	r3, [r7, #32]
 801f2fa:	3310      	adds	r3, #16
 801f2fc:	4618      	mov	r0, r3
 801f2fe:	f000 fe25 	bl	801ff4c <xTaskRemoveFromEventList>
 801f302:	4603      	mov	r3, r0
 801f304:	2b00      	cmp	r3, #0
 801f306:	d001      	beq.n	801f30c <xQueueReceive+0x9a>
					{
						queueYIELD_IF_USING_PREEMPTION();
 801f308:	f001 fbd2 	bl	8020ab0 <vPortYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 801f30c:	f001 fbf4 	bl	8020af8 <vPortExitCritical>
				return pdPASS;
 801f310:	2301      	movs	r3, #1
 801f312:	e063      	b.n	801f3dc <xQueueReceive+0x16a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 801f314:	687b      	ldr	r3, [r7, #4]
 801f316:	2b00      	cmp	r3, #0
 801f318:	d103      	bne.n	801f322 <xQueueReceive+0xb0>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 801f31a:	f001 fbed 	bl	8020af8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 801f31e:	2300      	movs	r3, #0
 801f320:	e05c      	b.n	801f3dc <xQueueReceive+0x16a>
				}
				else if( xEntryTimeSet == pdFALSE )
 801f322:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f324:	2b00      	cmp	r3, #0
 801f326:	d106      	bne.n	801f336 <xQueueReceive+0xc4>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 801f328:	f107 0314 	add.w	r3, r7, #20
 801f32c:	4618      	mov	r0, r3
 801f32e:	f000 fe69 	bl	8020004 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 801f332:	2301      	movs	r3, #1
 801f334:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 801f336:	f001 fbdf 	bl	8020af8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 801f33a:	f000 fc15 	bl	801fb68 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 801f33e:	f001 fbc9 	bl	8020ad4 <vPortEnterCritical>
 801f342:	6a3b      	ldr	r3, [r7, #32]
 801f344:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801f348:	b25b      	sxtb	r3, r3
 801f34a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801f34e:	d103      	bne.n	801f358 <xQueueReceive+0xe6>
 801f350:	6a3b      	ldr	r3, [r7, #32]
 801f352:	2200      	movs	r2, #0
 801f354:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801f358:	6a3b      	ldr	r3, [r7, #32]
 801f35a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801f35e:	b25b      	sxtb	r3, r3
 801f360:	f1b3 3fff 	cmp.w	r3, #4294967295
 801f364:	d103      	bne.n	801f36e <xQueueReceive+0xfc>
 801f366:	6a3b      	ldr	r3, [r7, #32]
 801f368:	2200      	movs	r2, #0
 801f36a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801f36e:	f001 fbc3 	bl	8020af8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 801f372:	1d3a      	adds	r2, r7, #4
 801f374:	f107 0314 	add.w	r3, r7, #20
 801f378:	4611      	mov	r1, r2
 801f37a:	4618      	mov	r0, r3
 801f37c:	f000 fe58 	bl	8020030 <xTaskCheckForTimeOut>
 801f380:	4603      	mov	r3, r0
 801f382:	2b00      	cmp	r3, #0
 801f384:	d11d      	bne.n	801f3c2 <xQueueReceive+0x150>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 801f386:	6a38      	ldr	r0, [r7, #32]
 801f388:	f000 f90e 	bl	801f5a8 <prvIsQueueEmpty>
 801f38c:	4603      	mov	r3, r0
 801f38e:	2b00      	cmp	r3, #0
 801f390:	d011      	beq.n	801f3b6 <xQueueReceive+0x144>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 801f392:	6a3b      	ldr	r3, [r7, #32]
 801f394:	3324      	adds	r3, #36	; 0x24
 801f396:	687a      	ldr	r2, [r7, #4]
 801f398:	4611      	mov	r1, r2
 801f39a:	4618      	mov	r0, r3
 801f39c:	f000 fd96 	bl	801fecc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 801f3a0:	6a38      	ldr	r0, [r7, #32]
 801f3a2:	f000 f8af 	bl	801f504 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 801f3a6:	f000 fbed 	bl	801fb84 <xTaskResumeAll>
 801f3aa:	4603      	mov	r3, r0
 801f3ac:	2b00      	cmp	r3, #0
 801f3ae:	d18f      	bne.n	801f2d0 <xQueueReceive+0x5e>
				{
					portYIELD_WITHIN_API();
 801f3b0:	f001 fb7e 	bl	8020ab0 <vPortYield>
 801f3b4:	e78c      	b.n	801f2d0 <xQueueReceive+0x5e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 801f3b6:	6a38      	ldr	r0, [r7, #32]
 801f3b8:	f000 f8a4 	bl	801f504 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 801f3bc:	f000 fbe2 	bl	801fb84 <xTaskResumeAll>
 801f3c0:	e786      	b.n	801f2d0 <xQueueReceive+0x5e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 801f3c2:	6a38      	ldr	r0, [r7, #32]
 801f3c4:	f000 f89e 	bl	801f504 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 801f3c8:	f000 fbdc 	bl	801fb84 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 801f3cc:	6a38      	ldr	r0, [r7, #32]
 801f3ce:	f000 f8eb 	bl	801f5a8 <prvIsQueueEmpty>
 801f3d2:	4603      	mov	r3, r0
 801f3d4:	2b00      	cmp	r3, #0
 801f3d6:	f43f af7b 	beq.w	801f2d0 <xQueueReceive+0x5e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 801f3da:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 801f3dc:	4618      	mov	r0, r3
 801f3de:	3728      	adds	r7, #40	; 0x28
 801f3e0:	46bd      	mov	sp, r7
 801f3e2:	bd80      	pop	{r7, pc}

0801f3e4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 801f3e4:	b580      	push	{r7, lr}
 801f3e6:	b086      	sub	sp, #24
 801f3e8:	af00      	add	r7, sp, #0
 801f3ea:	60f8      	str	r0, [r7, #12]
 801f3ec:	60b9      	str	r1, [r7, #8]
 801f3ee:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 801f3f0:	2300      	movs	r3, #0
 801f3f2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801f3f4:	68fb      	ldr	r3, [r7, #12]
 801f3f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801f3f8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 801f3fa:	68fb      	ldr	r3, [r7, #12]
 801f3fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801f3fe:	2b00      	cmp	r3, #0
 801f400:	d10d      	bne.n	801f41e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 801f402:	68fb      	ldr	r3, [r7, #12]
 801f404:	681b      	ldr	r3, [r3, #0]
 801f406:	2b00      	cmp	r3, #0
 801f408:	d14d      	bne.n	801f4a6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 801f40a:	68fb      	ldr	r3, [r7, #12]
 801f40c:	689b      	ldr	r3, [r3, #8]
 801f40e:	4618      	mov	r0, r3
 801f410:	f000 ff50 	bl	80202b4 <xTaskPriorityDisinherit>
 801f414:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 801f416:	68fb      	ldr	r3, [r7, #12]
 801f418:	2200      	movs	r2, #0
 801f41a:	609a      	str	r2, [r3, #8]
 801f41c:	e043      	b.n	801f4a6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 801f41e:	687b      	ldr	r3, [r7, #4]
 801f420:	2b00      	cmp	r3, #0
 801f422:	d119      	bne.n	801f458 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 801f424:	68fb      	ldr	r3, [r7, #12]
 801f426:	6858      	ldr	r0, [r3, #4]
 801f428:	68fb      	ldr	r3, [r7, #12]
 801f42a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801f42c:	461a      	mov	r2, r3
 801f42e:	68b9      	ldr	r1, [r7, #8]
 801f430:	f005 fa8f 	bl	8024952 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 801f434:	68fb      	ldr	r3, [r7, #12]
 801f436:	685a      	ldr	r2, [r3, #4]
 801f438:	68fb      	ldr	r3, [r7, #12]
 801f43a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801f43c:	441a      	add	r2, r3
 801f43e:	68fb      	ldr	r3, [r7, #12]
 801f440:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 801f442:	68fb      	ldr	r3, [r7, #12]
 801f444:	685a      	ldr	r2, [r3, #4]
 801f446:	68fb      	ldr	r3, [r7, #12]
 801f448:	689b      	ldr	r3, [r3, #8]
 801f44a:	429a      	cmp	r2, r3
 801f44c:	d32b      	bcc.n	801f4a6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 801f44e:	68fb      	ldr	r3, [r7, #12]
 801f450:	681a      	ldr	r2, [r3, #0]
 801f452:	68fb      	ldr	r3, [r7, #12]
 801f454:	605a      	str	r2, [r3, #4]
 801f456:	e026      	b.n	801f4a6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 801f458:	68fb      	ldr	r3, [r7, #12]
 801f45a:	68d8      	ldr	r0, [r3, #12]
 801f45c:	68fb      	ldr	r3, [r7, #12]
 801f45e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801f460:	461a      	mov	r2, r3
 801f462:	68b9      	ldr	r1, [r7, #8]
 801f464:	f005 fa75 	bl	8024952 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 801f468:	68fb      	ldr	r3, [r7, #12]
 801f46a:	68da      	ldr	r2, [r3, #12]
 801f46c:	68fb      	ldr	r3, [r7, #12]
 801f46e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801f470:	425b      	negs	r3, r3
 801f472:	441a      	add	r2, r3
 801f474:	68fb      	ldr	r3, [r7, #12]
 801f476:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 801f478:	68fb      	ldr	r3, [r7, #12]
 801f47a:	68da      	ldr	r2, [r3, #12]
 801f47c:	68fb      	ldr	r3, [r7, #12]
 801f47e:	681b      	ldr	r3, [r3, #0]
 801f480:	429a      	cmp	r2, r3
 801f482:	d207      	bcs.n	801f494 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 801f484:	68fb      	ldr	r3, [r7, #12]
 801f486:	689a      	ldr	r2, [r3, #8]
 801f488:	68fb      	ldr	r3, [r7, #12]
 801f48a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801f48c:	425b      	negs	r3, r3
 801f48e:	441a      	add	r2, r3
 801f490:	68fb      	ldr	r3, [r7, #12]
 801f492:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 801f494:	687b      	ldr	r3, [r7, #4]
 801f496:	2b02      	cmp	r3, #2
 801f498:	d105      	bne.n	801f4a6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 801f49a:	693b      	ldr	r3, [r7, #16]
 801f49c:	2b00      	cmp	r3, #0
 801f49e:	d002      	beq.n	801f4a6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 801f4a0:	693b      	ldr	r3, [r7, #16]
 801f4a2:	3b01      	subs	r3, #1
 801f4a4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 801f4a6:	693b      	ldr	r3, [r7, #16]
 801f4a8:	1c5a      	adds	r2, r3, #1
 801f4aa:	68fb      	ldr	r3, [r7, #12]
 801f4ac:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 801f4ae:	697b      	ldr	r3, [r7, #20]
}
 801f4b0:	4618      	mov	r0, r3
 801f4b2:	3718      	adds	r7, #24
 801f4b4:	46bd      	mov	sp, r7
 801f4b6:	bd80      	pop	{r7, pc}

0801f4b8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 801f4b8:	b580      	push	{r7, lr}
 801f4ba:	b082      	sub	sp, #8
 801f4bc:	af00      	add	r7, sp, #0
 801f4be:	6078      	str	r0, [r7, #4]
 801f4c0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 801f4c2:	687b      	ldr	r3, [r7, #4]
 801f4c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801f4c6:	2b00      	cmp	r3, #0
 801f4c8:	d018      	beq.n	801f4fc <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 801f4ca:	687b      	ldr	r3, [r7, #4]
 801f4cc:	68da      	ldr	r2, [r3, #12]
 801f4ce:	687b      	ldr	r3, [r7, #4]
 801f4d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801f4d2:	441a      	add	r2, r3
 801f4d4:	687b      	ldr	r3, [r7, #4]
 801f4d6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 801f4d8:	687b      	ldr	r3, [r7, #4]
 801f4da:	68da      	ldr	r2, [r3, #12]
 801f4dc:	687b      	ldr	r3, [r7, #4]
 801f4de:	689b      	ldr	r3, [r3, #8]
 801f4e0:	429a      	cmp	r2, r3
 801f4e2:	d303      	bcc.n	801f4ec <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 801f4e4:	687b      	ldr	r3, [r7, #4]
 801f4e6:	681a      	ldr	r2, [r3, #0]
 801f4e8:	687b      	ldr	r3, [r7, #4]
 801f4ea:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 801f4ec:	687b      	ldr	r3, [r7, #4]
 801f4ee:	68d9      	ldr	r1, [r3, #12]
 801f4f0:	687b      	ldr	r3, [r7, #4]
 801f4f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801f4f4:	461a      	mov	r2, r3
 801f4f6:	6838      	ldr	r0, [r7, #0]
 801f4f8:	f005 fa2b 	bl	8024952 <memcpy>
	}
}
 801f4fc:	bf00      	nop
 801f4fe:	3708      	adds	r7, #8
 801f500:	46bd      	mov	sp, r7
 801f502:	bd80      	pop	{r7, pc}

0801f504 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 801f504:	b580      	push	{r7, lr}
 801f506:	b084      	sub	sp, #16
 801f508:	af00      	add	r7, sp, #0
 801f50a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 801f50c:	f001 fae2 	bl	8020ad4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 801f510:	687b      	ldr	r3, [r7, #4]
 801f512:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801f516:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 801f518:	e011      	b.n	801f53e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801f51a:	687b      	ldr	r3, [r7, #4]
 801f51c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801f51e:	2b00      	cmp	r3, #0
 801f520:	d012      	beq.n	801f548 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801f522:	687b      	ldr	r3, [r7, #4]
 801f524:	3324      	adds	r3, #36	; 0x24
 801f526:	4618      	mov	r0, r3
 801f528:	f000 fd10 	bl	801ff4c <xTaskRemoveFromEventList>
 801f52c:	4603      	mov	r3, r0
 801f52e:	2b00      	cmp	r3, #0
 801f530:	d001      	beq.n	801f536 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 801f532:	f000 fdcf 	bl	80200d4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 801f536:	7bfb      	ldrb	r3, [r7, #15]
 801f538:	3b01      	subs	r3, #1
 801f53a:	b2db      	uxtb	r3, r3
 801f53c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 801f53e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801f542:	2b00      	cmp	r3, #0
 801f544:	dce9      	bgt.n	801f51a <prvUnlockQueue+0x16>
 801f546:	e000      	b.n	801f54a <prvUnlockQueue+0x46>
					break;
 801f548:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 801f54a:	687b      	ldr	r3, [r7, #4]
 801f54c:	22ff      	movs	r2, #255	; 0xff
 801f54e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 801f552:	f001 fad1 	bl	8020af8 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 801f556:	f001 fabd 	bl	8020ad4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 801f55a:	687b      	ldr	r3, [r7, #4]
 801f55c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801f560:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 801f562:	e011      	b.n	801f588 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801f564:	687b      	ldr	r3, [r7, #4]
 801f566:	691b      	ldr	r3, [r3, #16]
 801f568:	2b00      	cmp	r3, #0
 801f56a:	d012      	beq.n	801f592 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801f56c:	687b      	ldr	r3, [r7, #4]
 801f56e:	3310      	adds	r3, #16
 801f570:	4618      	mov	r0, r3
 801f572:	f000 fceb 	bl	801ff4c <xTaskRemoveFromEventList>
 801f576:	4603      	mov	r3, r0
 801f578:	2b00      	cmp	r3, #0
 801f57a:	d001      	beq.n	801f580 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 801f57c:	f000 fdaa 	bl	80200d4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 801f580:	7bbb      	ldrb	r3, [r7, #14]
 801f582:	3b01      	subs	r3, #1
 801f584:	b2db      	uxtb	r3, r3
 801f586:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 801f588:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801f58c:	2b00      	cmp	r3, #0
 801f58e:	dce9      	bgt.n	801f564 <prvUnlockQueue+0x60>
 801f590:	e000      	b.n	801f594 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 801f592:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 801f594:	687b      	ldr	r3, [r7, #4]
 801f596:	22ff      	movs	r2, #255	; 0xff
 801f598:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 801f59c:	f001 faac 	bl	8020af8 <vPortExitCritical>
}
 801f5a0:	bf00      	nop
 801f5a2:	3710      	adds	r7, #16
 801f5a4:	46bd      	mov	sp, r7
 801f5a6:	bd80      	pop	{r7, pc}

0801f5a8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 801f5a8:	b580      	push	{r7, lr}
 801f5aa:	b084      	sub	sp, #16
 801f5ac:	af00      	add	r7, sp, #0
 801f5ae:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 801f5b0:	f001 fa90 	bl	8020ad4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 801f5b4:	687b      	ldr	r3, [r7, #4]
 801f5b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801f5b8:	2b00      	cmp	r3, #0
 801f5ba:	d102      	bne.n	801f5c2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 801f5bc:	2301      	movs	r3, #1
 801f5be:	60fb      	str	r3, [r7, #12]
 801f5c0:	e001      	b.n	801f5c6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 801f5c2:	2300      	movs	r3, #0
 801f5c4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 801f5c6:	f001 fa97 	bl	8020af8 <vPortExitCritical>

	return xReturn;
 801f5ca:	68fb      	ldr	r3, [r7, #12]
}
 801f5cc:	4618      	mov	r0, r3
 801f5ce:	3710      	adds	r7, #16
 801f5d0:	46bd      	mov	sp, r7
 801f5d2:	bd80      	pop	{r7, pc}

0801f5d4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 801f5d4:	b580      	push	{r7, lr}
 801f5d6:	b084      	sub	sp, #16
 801f5d8:	af00      	add	r7, sp, #0
 801f5da:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 801f5dc:	f001 fa7a 	bl	8020ad4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 801f5e0:	687b      	ldr	r3, [r7, #4]
 801f5e2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801f5e4:	687b      	ldr	r3, [r7, #4]
 801f5e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801f5e8:	429a      	cmp	r2, r3
 801f5ea:	d102      	bne.n	801f5f2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 801f5ec:	2301      	movs	r3, #1
 801f5ee:	60fb      	str	r3, [r7, #12]
 801f5f0:	e001      	b.n	801f5f6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 801f5f2:	2300      	movs	r3, #0
 801f5f4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 801f5f6:	f001 fa7f 	bl	8020af8 <vPortExitCritical>

	return xReturn;
 801f5fa:	68fb      	ldr	r3, [r7, #12]
}
 801f5fc:	4618      	mov	r0, r3
 801f5fe:	3710      	adds	r7, #16
 801f600:	46bd      	mov	sp, r7
 801f602:	bd80      	pop	{r7, pc}

0801f604 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 801f604:	b480      	push	{r7}
 801f606:	b085      	sub	sp, #20
 801f608:	af00      	add	r7, sp, #0
 801f60a:	6078      	str	r0, [r7, #4]
 801f60c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 801f60e:	2300      	movs	r3, #0
 801f610:	60fb      	str	r3, [r7, #12]
 801f612:	e014      	b.n	801f63e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 801f614:	4a0f      	ldr	r2, [pc, #60]	; (801f654 <vQueueAddToRegistry+0x50>)
 801f616:	68fb      	ldr	r3, [r7, #12]
 801f618:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 801f61c:	2b00      	cmp	r3, #0
 801f61e:	d10b      	bne.n	801f638 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 801f620:	490c      	ldr	r1, [pc, #48]	; (801f654 <vQueueAddToRegistry+0x50>)
 801f622:	68fb      	ldr	r3, [r7, #12]
 801f624:	683a      	ldr	r2, [r7, #0]
 801f626:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 801f62a:	4a0a      	ldr	r2, [pc, #40]	; (801f654 <vQueueAddToRegistry+0x50>)
 801f62c:	68fb      	ldr	r3, [r7, #12]
 801f62e:	00db      	lsls	r3, r3, #3
 801f630:	4413      	add	r3, r2
 801f632:	687a      	ldr	r2, [r7, #4]
 801f634:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 801f636:	e006      	b.n	801f646 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 801f638:	68fb      	ldr	r3, [r7, #12]
 801f63a:	3301      	adds	r3, #1
 801f63c:	60fb      	str	r3, [r7, #12]
 801f63e:	68fb      	ldr	r3, [r7, #12]
 801f640:	2b07      	cmp	r3, #7
 801f642:	d9e7      	bls.n	801f614 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 801f644:	bf00      	nop
 801f646:	bf00      	nop
 801f648:	3714      	adds	r7, #20
 801f64a:	46bd      	mov	sp, r7
 801f64c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f650:	4770      	bx	lr
 801f652:	bf00      	nop
 801f654:	200016ac 	.word	0x200016ac

0801f658 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 801f658:	b580      	push	{r7, lr}
 801f65a:	b086      	sub	sp, #24
 801f65c:	af00      	add	r7, sp, #0
 801f65e:	60f8      	str	r0, [r7, #12]
 801f660:	60b9      	str	r1, [r7, #8]
 801f662:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 801f664:	68fb      	ldr	r3, [r7, #12]
 801f666:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 801f668:	f001 fa34 	bl	8020ad4 <vPortEnterCritical>
 801f66c:	697b      	ldr	r3, [r7, #20]
 801f66e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801f672:	b25b      	sxtb	r3, r3
 801f674:	f1b3 3fff 	cmp.w	r3, #4294967295
 801f678:	d103      	bne.n	801f682 <vQueueWaitForMessageRestricted+0x2a>
 801f67a:	697b      	ldr	r3, [r7, #20]
 801f67c:	2200      	movs	r2, #0
 801f67e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801f682:	697b      	ldr	r3, [r7, #20]
 801f684:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801f688:	b25b      	sxtb	r3, r3
 801f68a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801f68e:	d103      	bne.n	801f698 <vQueueWaitForMessageRestricted+0x40>
 801f690:	697b      	ldr	r3, [r7, #20]
 801f692:	2200      	movs	r2, #0
 801f694:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801f698:	f001 fa2e 	bl	8020af8 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 801f69c:	697b      	ldr	r3, [r7, #20]
 801f69e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801f6a0:	2b00      	cmp	r3, #0
 801f6a2:	d106      	bne.n	801f6b2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 801f6a4:	697b      	ldr	r3, [r7, #20]
 801f6a6:	3324      	adds	r3, #36	; 0x24
 801f6a8:	687a      	ldr	r2, [r7, #4]
 801f6aa:	68b9      	ldr	r1, [r7, #8]
 801f6ac:	4618      	mov	r0, r3
 801f6ae:	f000 fc29 	bl	801ff04 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 801f6b2:	6978      	ldr	r0, [r7, #20]
 801f6b4:	f7ff ff26 	bl	801f504 <prvUnlockQueue>
	}
 801f6b8:	bf00      	nop
 801f6ba:	3718      	adds	r7, #24
 801f6bc:	46bd      	mov	sp, r7
 801f6be:	bd80      	pop	{r7, pc}

0801f6c0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 801f6c0:	b580      	push	{r7, lr}
 801f6c2:	b08c      	sub	sp, #48	; 0x30
 801f6c4:	af04      	add	r7, sp, #16
 801f6c6:	60f8      	str	r0, [r7, #12]
 801f6c8:	60b9      	str	r1, [r7, #8]
 801f6ca:	607a      	str	r2, [r7, #4]
 801f6cc:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 801f6ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801f6d0:	2b00      	cmp	r3, #0
 801f6d2:	d102      	bne.n	801f6da <xTaskCreateStatic+0x1a>
 801f6d4:	f001 fb30 	bl	8020d38 <ulSetInterruptMask>
 801f6d8:	e7fe      	b.n	801f6d8 <xTaskCreateStatic+0x18>
		configASSERT( pxTaskBuffer != NULL );
 801f6da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801f6dc:	2b00      	cmp	r3, #0
 801f6de:	d102      	bne.n	801f6e6 <xTaskCreateStatic+0x26>
 801f6e0:	f001 fb2a 	bl	8020d38 <ulSetInterruptMask>
 801f6e4:	e7fe      	b.n	801f6e4 <xTaskCreateStatic+0x24>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 801f6e6:	235c      	movs	r3, #92	; 0x5c
 801f6e8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( TCB_t ) );
 801f6ea:	697b      	ldr	r3, [r7, #20]
 801f6ec:	2b5c      	cmp	r3, #92	; 0x5c
 801f6ee:	d002      	beq.n	801f6f6 <xTaskCreateStatic+0x36>
 801f6f0:	f001 fb22 	bl	8020d38 <ulSetInterruptMask>
 801f6f4:	e7fe      	b.n	801f6f4 <xTaskCreateStatic+0x34>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 801f6f6:	697b      	ldr	r3, [r7, #20]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 801f6f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801f6fa:	2b00      	cmp	r3, #0
 801f6fc:	d01e      	beq.n	801f73c <xTaskCreateStatic+0x7c>
 801f6fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801f700:	2b00      	cmp	r3, #0
 801f702:	d01b      	beq.n	801f73c <xTaskCreateStatic+0x7c>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 801f704:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801f706:	61fb      	str	r3, [r7, #28]
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 801f708:	69fb      	ldr	r3, [r7, #28]
 801f70a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801f70c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 801f70e:	69fb      	ldr	r3, [r7, #28]
 801f710:	2202      	movs	r2, #2
 801f712:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 801f716:	2300      	movs	r3, #0
 801f718:	9303      	str	r3, [sp, #12]
 801f71a:	69fb      	ldr	r3, [r7, #28]
 801f71c:	9302      	str	r3, [sp, #8]
 801f71e:	f107 0318 	add.w	r3, r7, #24
 801f722:	9301      	str	r3, [sp, #4]
 801f724:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801f726:	9300      	str	r3, [sp, #0]
 801f728:	683b      	ldr	r3, [r7, #0]
 801f72a:	687a      	ldr	r2, [r7, #4]
 801f72c:	68b9      	ldr	r1, [r7, #8]
 801f72e:	68f8      	ldr	r0, [r7, #12]
 801f730:	f000 f850 	bl	801f7d4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 801f734:	69f8      	ldr	r0, [r7, #28]
 801f736:	f000 f8d7 	bl	801f8e8 <prvAddNewTaskToReadyList>
 801f73a:	e001      	b.n	801f740 <xTaskCreateStatic+0x80>
		}
		else
		{
			xReturn = NULL;
 801f73c:	2300      	movs	r3, #0
 801f73e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 801f740:	69bb      	ldr	r3, [r7, #24]
	}
 801f742:	4618      	mov	r0, r3
 801f744:	3720      	adds	r7, #32
 801f746:	46bd      	mov	sp, r7
 801f748:	bd80      	pop	{r7, pc}

0801f74a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 801f74a:	b580      	push	{r7, lr}
 801f74c:	b08c      	sub	sp, #48	; 0x30
 801f74e:	af04      	add	r7, sp, #16
 801f750:	60f8      	str	r0, [r7, #12]
 801f752:	60b9      	str	r1, [r7, #8]
 801f754:	603b      	str	r3, [r7, #0]
 801f756:	4613      	mov	r3, r2
 801f758:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 801f75a:	88fb      	ldrh	r3, [r7, #6]
 801f75c:	009b      	lsls	r3, r3, #2
 801f75e:	4618      	mov	r0, r3
 801f760:	f001 fb4a 	bl	8020df8 <pvPortMalloc>
 801f764:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 801f766:	697b      	ldr	r3, [r7, #20]
 801f768:	2b00      	cmp	r3, #0
 801f76a:	d00e      	beq.n	801f78a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 801f76c:	205c      	movs	r0, #92	; 0x5c
 801f76e:	f001 fb43 	bl	8020df8 <pvPortMalloc>
 801f772:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 801f774:	69fb      	ldr	r3, [r7, #28]
 801f776:	2b00      	cmp	r3, #0
 801f778:	d003      	beq.n	801f782 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 801f77a:	69fb      	ldr	r3, [r7, #28]
 801f77c:	697a      	ldr	r2, [r7, #20]
 801f77e:	631a      	str	r2, [r3, #48]	; 0x30
 801f780:	e005      	b.n	801f78e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 801f782:	6978      	ldr	r0, [r7, #20]
 801f784:	f001 fbec 	bl	8020f60 <vPortFree>
 801f788:	e001      	b.n	801f78e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 801f78a:	2300      	movs	r3, #0
 801f78c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 801f78e:	69fb      	ldr	r3, [r7, #28]
 801f790:	2b00      	cmp	r3, #0
 801f792:	d017      	beq.n	801f7c4 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 801f794:	69fb      	ldr	r3, [r7, #28]
 801f796:	2200      	movs	r2, #0
 801f798:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 801f79c:	88fa      	ldrh	r2, [r7, #6]
 801f79e:	2300      	movs	r3, #0
 801f7a0:	9303      	str	r3, [sp, #12]
 801f7a2:	69fb      	ldr	r3, [r7, #28]
 801f7a4:	9302      	str	r3, [sp, #8]
 801f7a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801f7a8:	9301      	str	r3, [sp, #4]
 801f7aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801f7ac:	9300      	str	r3, [sp, #0]
 801f7ae:	683b      	ldr	r3, [r7, #0]
 801f7b0:	68b9      	ldr	r1, [r7, #8]
 801f7b2:	68f8      	ldr	r0, [r7, #12]
 801f7b4:	f000 f80e 	bl	801f7d4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 801f7b8:	69f8      	ldr	r0, [r7, #28]
 801f7ba:	f000 f895 	bl	801f8e8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 801f7be:	2301      	movs	r3, #1
 801f7c0:	61bb      	str	r3, [r7, #24]
 801f7c2:	e002      	b.n	801f7ca <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 801f7c4:	f04f 33ff 	mov.w	r3, #4294967295
 801f7c8:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 801f7ca:	69bb      	ldr	r3, [r7, #24]
	}
 801f7cc:	4618      	mov	r0, r3
 801f7ce:	3720      	adds	r7, #32
 801f7d0:	46bd      	mov	sp, r7
 801f7d2:	bd80      	pop	{r7, pc}

0801f7d4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 801f7d4:	b580      	push	{r7, lr}
 801f7d6:	b086      	sub	sp, #24
 801f7d8:	af00      	add	r7, sp, #0
 801f7da:	60f8      	str	r0, [r7, #12]
 801f7dc:	60b9      	str	r1, [r7, #8]
 801f7de:	607a      	str	r2, [r7, #4]
 801f7e0:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 801f7e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801f7e4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 801f7e6:	687b      	ldr	r3, [r7, #4]
 801f7e8:	009b      	lsls	r3, r3, #2
 801f7ea:	461a      	mov	r2, r3
 801f7ec:	21a5      	movs	r1, #165	; 0xa5
 801f7ee:	f004 ffe0 	bl	80247b2 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 801f7f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801f7f4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801f7f6:	687b      	ldr	r3, [r7, #4]
 801f7f8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 801f7fc:	3b01      	subs	r3, #1
 801f7fe:	009b      	lsls	r3, r3, #2
 801f800:	4413      	add	r3, r2
 801f802:	613b      	str	r3, [r7, #16]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 801f804:	693b      	ldr	r3, [r7, #16]
 801f806:	f023 0307 	bic.w	r3, r3, #7
 801f80a:	613b      	str	r3, [r7, #16]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 801f80c:	693b      	ldr	r3, [r7, #16]
 801f80e:	f003 0307 	and.w	r3, r3, #7
 801f812:	2b00      	cmp	r3, #0
 801f814:	d002      	beq.n	801f81c <prvInitialiseNewTask+0x48>
 801f816:	f001 fa8f 	bl	8020d38 <ulSetInterruptMask>
 801f81a:	e7fe      	b.n	801f81a <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 801f81c:	68bb      	ldr	r3, [r7, #8]
 801f81e:	2b00      	cmp	r3, #0
 801f820:	d01f      	beq.n	801f862 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 801f822:	2300      	movs	r3, #0
 801f824:	617b      	str	r3, [r7, #20]
 801f826:	e012      	b.n	801f84e <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 801f828:	68ba      	ldr	r2, [r7, #8]
 801f82a:	697b      	ldr	r3, [r7, #20]
 801f82c:	4413      	add	r3, r2
 801f82e:	7819      	ldrb	r1, [r3, #0]
 801f830:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801f832:	697b      	ldr	r3, [r7, #20]
 801f834:	4413      	add	r3, r2
 801f836:	3334      	adds	r3, #52	; 0x34
 801f838:	460a      	mov	r2, r1
 801f83a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 801f83c:	68ba      	ldr	r2, [r7, #8]
 801f83e:	697b      	ldr	r3, [r7, #20]
 801f840:	4413      	add	r3, r2
 801f842:	781b      	ldrb	r3, [r3, #0]
 801f844:	2b00      	cmp	r3, #0
 801f846:	d006      	beq.n	801f856 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 801f848:	697b      	ldr	r3, [r7, #20]
 801f84a:	3301      	adds	r3, #1
 801f84c:	617b      	str	r3, [r7, #20]
 801f84e:	697b      	ldr	r3, [r7, #20]
 801f850:	2b0f      	cmp	r3, #15
 801f852:	d9e9      	bls.n	801f828 <prvInitialiseNewTask+0x54>
 801f854:	e000      	b.n	801f858 <prvInitialiseNewTask+0x84>
			{
				break;
 801f856:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 801f858:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801f85a:	2200      	movs	r2, #0
 801f85c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 801f860:	e003      	b.n	801f86a <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 801f862:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801f864:	2200      	movs	r2, #0
 801f866:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 801f86a:	6a3b      	ldr	r3, [r7, #32]
 801f86c:	2b37      	cmp	r3, #55	; 0x37
 801f86e:	d901      	bls.n	801f874 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 801f870:	2337      	movs	r3, #55	; 0x37
 801f872:	623b      	str	r3, [r7, #32]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 801f874:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801f876:	6a3a      	ldr	r2, [r7, #32]
 801f878:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 801f87a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801f87c:	6a3a      	ldr	r2, [r7, #32]
 801f87e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 801f880:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801f882:	2200      	movs	r2, #0
 801f884:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 801f886:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801f888:	3304      	adds	r3, #4
 801f88a:	4618      	mov	r0, r3
 801f88c:	f7ff fa58 	bl	801ed40 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 801f890:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801f892:	3318      	adds	r3, #24
 801f894:	4618      	mov	r0, r3
 801f896:	f7ff fa53 	bl	801ed40 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 801f89a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801f89c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801f89e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801f8a0:	6a3b      	ldr	r3, [r7, #32]
 801f8a2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 801f8a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801f8a8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 801f8aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801f8ac:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801f8ae:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 801f8b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801f8b2:	2200      	movs	r2, #0
 801f8b4:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 801f8b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801f8b8:	2200      	movs	r2, #0
 801f8ba:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
		function as well. */
		#if( portHAS_STACK_OVERFLOW_CHECKING == 1 )
		{
			#if( portSTACK_GROWTH < 0 )
			{
				pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxNewTCB->pxStack, pxTaskCode, pvParameters );
 801f8be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801f8c0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 801f8c2:	683b      	ldr	r3, [r7, #0]
 801f8c4:	68fa      	ldr	r2, [r7, #12]
 801f8c6:	6938      	ldr	r0, [r7, #16]
 801f8c8:	f001 f960 	bl	8020b8c <pxPortInitialiseStack>
 801f8cc:	4602      	mov	r2, r0
 801f8ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801f8d0:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 801f8d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f8d4:	2b00      	cmp	r3, #0
 801f8d6:	d002      	beq.n	801f8de <prvInitialiseNewTask+0x10a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 801f8d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f8da:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801f8dc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801f8de:	bf00      	nop
 801f8e0:	3718      	adds	r7, #24
 801f8e2:	46bd      	mov	sp, r7
 801f8e4:	bd80      	pop	{r7, pc}
	...

0801f8e8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 801f8e8:	b580      	push	{r7, lr}
 801f8ea:	b082      	sub	sp, #8
 801f8ec:	af00      	add	r7, sp, #0
 801f8ee:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 801f8f0:	f001 f8f0 	bl	8020ad4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 801f8f4:	4b2a      	ldr	r3, [pc, #168]	; (801f9a0 <prvAddNewTaskToReadyList+0xb8>)
 801f8f6:	681b      	ldr	r3, [r3, #0]
 801f8f8:	3301      	adds	r3, #1
 801f8fa:	4a29      	ldr	r2, [pc, #164]	; (801f9a0 <prvAddNewTaskToReadyList+0xb8>)
 801f8fc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 801f8fe:	4b29      	ldr	r3, [pc, #164]	; (801f9a4 <prvAddNewTaskToReadyList+0xbc>)
 801f900:	681b      	ldr	r3, [r3, #0]
 801f902:	2b00      	cmp	r3, #0
 801f904:	d109      	bne.n	801f91a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 801f906:	4a27      	ldr	r2, [pc, #156]	; (801f9a4 <prvAddNewTaskToReadyList+0xbc>)
 801f908:	687b      	ldr	r3, [r7, #4]
 801f90a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 801f90c:	4b24      	ldr	r3, [pc, #144]	; (801f9a0 <prvAddNewTaskToReadyList+0xb8>)
 801f90e:	681b      	ldr	r3, [r3, #0]
 801f910:	2b01      	cmp	r3, #1
 801f912:	d110      	bne.n	801f936 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 801f914:	f000 fbfa 	bl	802010c <prvInitialiseTaskLists>
 801f918:	e00d      	b.n	801f936 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 801f91a:	4b23      	ldr	r3, [pc, #140]	; (801f9a8 <prvAddNewTaskToReadyList+0xc0>)
 801f91c:	681b      	ldr	r3, [r3, #0]
 801f91e:	2b00      	cmp	r3, #0
 801f920:	d109      	bne.n	801f936 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 801f922:	4b20      	ldr	r3, [pc, #128]	; (801f9a4 <prvAddNewTaskToReadyList+0xbc>)
 801f924:	681b      	ldr	r3, [r3, #0]
 801f926:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801f928:	687b      	ldr	r3, [r7, #4]
 801f92a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801f92c:	429a      	cmp	r2, r3
 801f92e:	d802      	bhi.n	801f936 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 801f930:	4a1c      	ldr	r2, [pc, #112]	; (801f9a4 <prvAddNewTaskToReadyList+0xbc>)
 801f932:	687b      	ldr	r3, [r7, #4]
 801f934:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 801f936:	4b1d      	ldr	r3, [pc, #116]	; (801f9ac <prvAddNewTaskToReadyList+0xc4>)
 801f938:	681b      	ldr	r3, [r3, #0]
 801f93a:	3301      	adds	r3, #1
 801f93c:	4a1b      	ldr	r2, [pc, #108]	; (801f9ac <prvAddNewTaskToReadyList+0xc4>)
 801f93e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 801f940:	4b1a      	ldr	r3, [pc, #104]	; (801f9ac <prvAddNewTaskToReadyList+0xc4>)
 801f942:	681a      	ldr	r2, [r3, #0]
 801f944:	687b      	ldr	r3, [r7, #4]
 801f946:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 801f948:	687b      	ldr	r3, [r7, #4]
 801f94a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801f94c:	4b18      	ldr	r3, [pc, #96]	; (801f9b0 <prvAddNewTaskToReadyList+0xc8>)
 801f94e:	681b      	ldr	r3, [r3, #0]
 801f950:	429a      	cmp	r2, r3
 801f952:	d903      	bls.n	801f95c <prvAddNewTaskToReadyList+0x74>
 801f954:	687b      	ldr	r3, [r7, #4]
 801f956:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801f958:	4a15      	ldr	r2, [pc, #84]	; (801f9b0 <prvAddNewTaskToReadyList+0xc8>)
 801f95a:	6013      	str	r3, [r2, #0]
 801f95c:	687b      	ldr	r3, [r7, #4]
 801f95e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801f960:	4613      	mov	r3, r2
 801f962:	009b      	lsls	r3, r3, #2
 801f964:	4413      	add	r3, r2
 801f966:	009b      	lsls	r3, r3, #2
 801f968:	4a12      	ldr	r2, [pc, #72]	; (801f9b4 <prvAddNewTaskToReadyList+0xcc>)
 801f96a:	441a      	add	r2, r3
 801f96c:	687b      	ldr	r3, [r7, #4]
 801f96e:	3304      	adds	r3, #4
 801f970:	4619      	mov	r1, r3
 801f972:	4610      	mov	r0, r2
 801f974:	f7ff f9f1 	bl	801ed5a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 801f978:	f001 f8be 	bl	8020af8 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 801f97c:	4b0a      	ldr	r3, [pc, #40]	; (801f9a8 <prvAddNewTaskToReadyList+0xc0>)
 801f97e:	681b      	ldr	r3, [r3, #0]
 801f980:	2b00      	cmp	r3, #0
 801f982:	d008      	beq.n	801f996 <prvAddNewTaskToReadyList+0xae>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 801f984:	4b07      	ldr	r3, [pc, #28]	; (801f9a4 <prvAddNewTaskToReadyList+0xbc>)
 801f986:	681b      	ldr	r3, [r3, #0]
 801f988:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801f98a:	687b      	ldr	r3, [r7, #4]
 801f98c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801f98e:	429a      	cmp	r2, r3
 801f990:	d201      	bcs.n	801f996 <prvAddNewTaskToReadyList+0xae>
		{
			taskYIELD_IF_USING_PREEMPTION();
 801f992:	f001 f88d 	bl	8020ab0 <vPortYield>
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801f996:	bf00      	nop
 801f998:	3708      	adds	r7, #8
 801f99a:	46bd      	mov	sp, r7
 801f99c:	bd80      	pop	{r7, pc}
 801f99e:	bf00      	nop
 801f9a0:	20001bc0 	.word	0x20001bc0
 801f9a4:	200016ec 	.word	0x200016ec
 801f9a8:	20001bcc 	.word	0x20001bcc
 801f9ac:	20001bdc 	.word	0x20001bdc
 801f9b0:	20001bc8 	.word	0x20001bc8
 801f9b4:	200016f0 	.word	0x200016f0

0801f9b8 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 801f9b8:	b580      	push	{r7, lr}
 801f9ba:	b086      	sub	sp, #24
 801f9bc:	af00      	add	r7, sp, #0
 801f9be:	6078      	str	r0, [r7, #4]
 801f9c0:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 801f9c2:	2300      	movs	r3, #0
 801f9c4:	617b      	str	r3, [r7, #20]

		configASSERT( pxPreviousWakeTime );
 801f9c6:	687b      	ldr	r3, [r7, #4]
 801f9c8:	2b00      	cmp	r3, #0
 801f9ca:	d102      	bne.n	801f9d2 <vTaskDelayUntil+0x1a>
 801f9cc:	f001 f9b4 	bl	8020d38 <ulSetInterruptMask>
 801f9d0:	e7fe      	b.n	801f9d0 <vTaskDelayUntil+0x18>
		configASSERT( ( xTimeIncrement > 0U ) );
 801f9d2:	683b      	ldr	r3, [r7, #0]
 801f9d4:	2b00      	cmp	r3, #0
 801f9d6:	d102      	bne.n	801f9de <vTaskDelayUntil+0x26>
 801f9d8:	f001 f9ae 	bl	8020d38 <ulSetInterruptMask>
 801f9dc:	e7fe      	b.n	801f9dc <vTaskDelayUntil+0x24>
		configASSERT( uxSchedulerSuspended == 0 );
 801f9de:	4b23      	ldr	r3, [pc, #140]	; (801fa6c <vTaskDelayUntil+0xb4>)
 801f9e0:	681b      	ldr	r3, [r3, #0]
 801f9e2:	2b00      	cmp	r3, #0
 801f9e4:	d002      	beq.n	801f9ec <vTaskDelayUntil+0x34>
 801f9e6:	f001 f9a7 	bl	8020d38 <ulSetInterruptMask>
 801f9ea:	e7fe      	b.n	801f9ea <vTaskDelayUntil+0x32>

		vTaskSuspendAll();
 801f9ec:	f000 f8bc 	bl	801fb68 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 801f9f0:	4b1f      	ldr	r3, [pc, #124]	; (801fa70 <vTaskDelayUntil+0xb8>)
 801f9f2:	681b      	ldr	r3, [r3, #0]
 801f9f4:	613b      	str	r3, [r7, #16]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 801f9f6:	687b      	ldr	r3, [r7, #4]
 801f9f8:	681b      	ldr	r3, [r3, #0]
 801f9fa:	683a      	ldr	r2, [r7, #0]
 801f9fc:	4413      	add	r3, r2
 801f9fe:	60fb      	str	r3, [r7, #12]

			if( xConstTickCount < *pxPreviousWakeTime )
 801fa00:	687b      	ldr	r3, [r7, #4]
 801fa02:	681b      	ldr	r3, [r3, #0]
 801fa04:	693a      	ldr	r2, [r7, #16]
 801fa06:	429a      	cmp	r2, r3
 801fa08:	d20b      	bcs.n	801fa22 <vTaskDelayUntil+0x6a>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 801fa0a:	687b      	ldr	r3, [r7, #4]
 801fa0c:	681b      	ldr	r3, [r3, #0]
 801fa0e:	68fa      	ldr	r2, [r7, #12]
 801fa10:	429a      	cmp	r2, r3
 801fa12:	d211      	bcs.n	801fa38 <vTaskDelayUntil+0x80>
 801fa14:	68fa      	ldr	r2, [r7, #12]
 801fa16:	693b      	ldr	r3, [r7, #16]
 801fa18:	429a      	cmp	r2, r3
 801fa1a:	d90d      	bls.n	801fa38 <vTaskDelayUntil+0x80>
				{
					xShouldDelay = pdTRUE;
 801fa1c:	2301      	movs	r3, #1
 801fa1e:	617b      	str	r3, [r7, #20]
 801fa20:	e00a      	b.n	801fa38 <vTaskDelayUntil+0x80>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 801fa22:	687b      	ldr	r3, [r7, #4]
 801fa24:	681b      	ldr	r3, [r3, #0]
 801fa26:	68fa      	ldr	r2, [r7, #12]
 801fa28:	429a      	cmp	r2, r3
 801fa2a:	d303      	bcc.n	801fa34 <vTaskDelayUntil+0x7c>
 801fa2c:	68fa      	ldr	r2, [r7, #12]
 801fa2e:	693b      	ldr	r3, [r7, #16]
 801fa30:	429a      	cmp	r2, r3
 801fa32:	d901      	bls.n	801fa38 <vTaskDelayUntil+0x80>
				{
					xShouldDelay = pdTRUE;
 801fa34:	2301      	movs	r3, #1
 801fa36:	617b      	str	r3, [r7, #20]
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 801fa38:	687b      	ldr	r3, [r7, #4]
 801fa3a:	68fa      	ldr	r2, [r7, #12]
 801fa3c:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 801fa3e:	697b      	ldr	r3, [r7, #20]
 801fa40:	2b00      	cmp	r3, #0
 801fa42:	d006      	beq.n	801fa52 <vTaskDelayUntil+0x9a>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 801fa44:	68fa      	ldr	r2, [r7, #12]
 801fa46:	693b      	ldr	r3, [r7, #16]
 801fa48:	1ad3      	subs	r3, r2, r3
 801fa4a:	2100      	movs	r1, #0
 801fa4c:	4618      	mov	r0, r3
 801fa4e:	f000 fc8f 	bl	8020370 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 801fa52:	f000 f897 	bl	801fb84 <xTaskResumeAll>
 801fa56:	60b8      	str	r0, [r7, #8]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 801fa58:	68bb      	ldr	r3, [r7, #8]
 801fa5a:	2b00      	cmp	r3, #0
 801fa5c:	d101      	bne.n	801fa62 <vTaskDelayUntil+0xaa>
		{
			portYIELD_WITHIN_API();
 801fa5e:	f001 f827 	bl	8020ab0 <vPortYield>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 801fa62:	bf00      	nop
 801fa64:	3718      	adds	r7, #24
 801fa66:	46bd      	mov	sp, r7
 801fa68:	bd80      	pop	{r7, pc}
 801fa6a:	bf00      	nop
 801fa6c:	20001be8 	.word	0x20001be8
 801fa70:	20001bc4 	.word	0x20001bc4

0801fa74 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 801fa74:	b580      	push	{r7, lr}
 801fa76:	b084      	sub	sp, #16
 801fa78:	af00      	add	r7, sp, #0
 801fa7a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 801fa7c:	2300      	movs	r3, #0
 801fa7e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 801fa80:	687b      	ldr	r3, [r7, #4]
 801fa82:	2b00      	cmp	r3, #0
 801fa84:	d00f      	beq.n	801faa6 <vTaskDelay+0x32>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 801fa86:	4b0c      	ldr	r3, [pc, #48]	; (801fab8 <vTaskDelay+0x44>)
 801fa88:	681b      	ldr	r3, [r3, #0]
 801fa8a:	2b00      	cmp	r3, #0
 801fa8c:	d002      	beq.n	801fa94 <vTaskDelay+0x20>
 801fa8e:	f001 f953 	bl	8020d38 <ulSetInterruptMask>
 801fa92:	e7fe      	b.n	801fa92 <vTaskDelay+0x1e>
			vTaskSuspendAll();
 801fa94:	f000 f868 	bl	801fb68 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 801fa98:	2100      	movs	r1, #0
 801fa9a:	6878      	ldr	r0, [r7, #4]
 801fa9c:	f000 fc68 	bl	8020370 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 801faa0:	f000 f870 	bl	801fb84 <xTaskResumeAll>
 801faa4:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 801faa6:	68fb      	ldr	r3, [r7, #12]
 801faa8:	2b00      	cmp	r3, #0
 801faaa:	d101      	bne.n	801fab0 <vTaskDelay+0x3c>
		{
			portYIELD_WITHIN_API();
 801faac:	f001 f800 	bl	8020ab0 <vPortYield>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 801fab0:	bf00      	nop
 801fab2:	3710      	adds	r7, #16
 801fab4:	46bd      	mov	sp, r7
 801fab6:	bd80      	pop	{r7, pc}
 801fab8:	20001be8 	.word	0x20001be8

0801fabc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 801fabc:	b580      	push	{r7, lr}
 801fabe:	b088      	sub	sp, #32
 801fac0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 801fac2:	2300      	movs	r3, #0
 801fac4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 801fac6:	2300      	movs	r3, #0
 801fac8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 801faca:	463a      	mov	r2, r7
 801facc:	1d39      	adds	r1, r7, #4
 801face:	f107 0308 	add.w	r3, r7, #8
 801fad2:	4618      	mov	r0, r3
 801fad4:	f7ff f8e0 	bl	801ec98 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 801fad8:	6839      	ldr	r1, [r7, #0]
 801fada:	687b      	ldr	r3, [r7, #4]
 801fadc:	68ba      	ldr	r2, [r7, #8]
 801fade:	9202      	str	r2, [sp, #8]
 801fae0:	9301      	str	r3, [sp, #4]
 801fae2:	2300      	movs	r3, #0
 801fae4:	9300      	str	r3, [sp, #0]
 801fae6:	2300      	movs	r3, #0
 801fae8:	460a      	mov	r2, r1
 801faea:	4919      	ldr	r1, [pc, #100]	; (801fb50 <vTaskStartScheduler+0x94>)
 801faec:	4819      	ldr	r0, [pc, #100]	; (801fb54 <vTaskStartScheduler+0x98>)
 801faee:	f7ff fde7 	bl	801f6c0 <xTaskCreateStatic>
 801faf2:	4603      	mov	r3, r0
 801faf4:	4a18      	ldr	r2, [pc, #96]	; (801fb58 <vTaskStartScheduler+0x9c>)
 801faf6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 801faf8:	4b17      	ldr	r3, [pc, #92]	; (801fb58 <vTaskStartScheduler+0x9c>)
 801fafa:	681b      	ldr	r3, [r3, #0]
 801fafc:	2b00      	cmp	r3, #0
 801fafe:	d002      	beq.n	801fb06 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 801fb00:	2301      	movs	r3, #1
 801fb02:	60fb      	str	r3, [r7, #12]
 801fb04:	e001      	b.n	801fb0a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 801fb06:	2300      	movs	r3, #0
 801fb08:	60fb      	str	r3, [r7, #12]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 801fb0a:	68fb      	ldr	r3, [r7, #12]
 801fb0c:	2b01      	cmp	r3, #1
 801fb0e:	d102      	bne.n	801fb16 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 801fb10:	f000 fc82 	bl	8020418 <xTimerCreateTimerTask>
 801fb14:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 801fb16:	68fb      	ldr	r3, [r7, #12]
 801fb18:	2b01      	cmp	r3, #1
 801fb1a:	d10e      	bne.n	801fb3a <vTaskStartScheduler+0x7e>
		/* Interrupts are turned off here, to ensure a tick does not occur
		before or during the call to xPortStartScheduler().  The stacks of
		the created tasks contain a status word with interrupts switched on
		so interrupts will automatically get re-enabled when the first task
		starts to run. */
		portDISABLE_INTERRUPTS();
 801fb1c:	f001 f90c 	bl	8020d38 <ulSetInterruptMask>
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 801fb20:	4b0e      	ldr	r3, [pc, #56]	; (801fb5c <vTaskStartScheduler+0xa0>)
 801fb22:	f04f 32ff 	mov.w	r2, #4294967295
 801fb26:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 801fb28:	4b0d      	ldr	r3, [pc, #52]	; (801fb60 <vTaskStartScheduler+0xa4>)
 801fb2a:	2201      	movs	r2, #1
 801fb2c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 801fb2e:	4b0d      	ldr	r3, [pc, #52]	; (801fb64 <vTaskStartScheduler+0xa8>)
 801fb30:	2200      	movs	r2, #0
 801fb32:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 801fb34:	f001 f8b4 	bl	8020ca0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 801fb38:	e006      	b.n	801fb48 <vTaskStartScheduler+0x8c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 801fb3a:	68fb      	ldr	r3, [r7, #12]
 801fb3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 801fb40:	d102      	bne.n	801fb48 <vTaskStartScheduler+0x8c>
 801fb42:	f001 f8f9 	bl	8020d38 <ulSetInterruptMask>
 801fb46:	e7fe      	b.n	801fb46 <vTaskStartScheduler+0x8a>
}
 801fb48:	bf00      	nop
 801fb4a:	3710      	adds	r7, #16
 801fb4c:	46bd      	mov	sp, r7
 801fb4e:	bd80      	pop	{r7, pc}
 801fb50:	08025ed4 	.word	0x08025ed4
 801fb54:	080200ed 	.word	0x080200ed
 801fb58:	20001be4 	.word	0x20001be4
 801fb5c:	20001be0 	.word	0x20001be0
 801fb60:	20001bcc 	.word	0x20001bcc
 801fb64:	20001bc4 	.word	0x20001bc4

0801fb68 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 801fb68:	b480      	push	{r7}
 801fb6a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 801fb6c:	4b04      	ldr	r3, [pc, #16]	; (801fb80 <vTaskSuspendAll+0x18>)
 801fb6e:	681b      	ldr	r3, [r3, #0]
 801fb70:	3301      	adds	r3, #1
 801fb72:	4a03      	ldr	r2, [pc, #12]	; (801fb80 <vTaskSuspendAll+0x18>)
 801fb74:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 801fb76:	bf00      	nop
 801fb78:	46bd      	mov	sp, r7
 801fb7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801fb7e:	4770      	bx	lr
 801fb80:	20001be8 	.word	0x20001be8

0801fb84 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 801fb84:	b580      	push	{r7, lr}
 801fb86:	b084      	sub	sp, #16
 801fb88:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 801fb8a:	2300      	movs	r3, #0
 801fb8c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 801fb8e:	2300      	movs	r3, #0
 801fb90:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 801fb92:	4b3b      	ldr	r3, [pc, #236]	; (801fc80 <xTaskResumeAll+0xfc>)
 801fb94:	681b      	ldr	r3, [r3, #0]
 801fb96:	2b00      	cmp	r3, #0
 801fb98:	d102      	bne.n	801fba0 <xTaskResumeAll+0x1c>
 801fb9a:	f001 f8cd 	bl	8020d38 <ulSetInterruptMask>
 801fb9e:	e7fe      	b.n	801fb9e <xTaskResumeAll+0x1a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 801fba0:	f000 ff98 	bl	8020ad4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 801fba4:	4b36      	ldr	r3, [pc, #216]	; (801fc80 <xTaskResumeAll+0xfc>)
 801fba6:	681b      	ldr	r3, [r3, #0]
 801fba8:	3b01      	subs	r3, #1
 801fbaa:	4a35      	ldr	r2, [pc, #212]	; (801fc80 <xTaskResumeAll+0xfc>)
 801fbac:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801fbae:	4b34      	ldr	r3, [pc, #208]	; (801fc80 <xTaskResumeAll+0xfc>)
 801fbb0:	681b      	ldr	r3, [r3, #0]
 801fbb2:	2b00      	cmp	r3, #0
 801fbb4:	d15c      	bne.n	801fc70 <xTaskResumeAll+0xec>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 801fbb6:	4b33      	ldr	r3, [pc, #204]	; (801fc84 <xTaskResumeAll+0x100>)
 801fbb8:	681b      	ldr	r3, [r3, #0]
 801fbba:	2b00      	cmp	r3, #0
 801fbbc:	d058      	beq.n	801fc70 <xTaskResumeAll+0xec>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 801fbbe:	e02f      	b.n	801fc20 <xTaskResumeAll+0x9c>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801fbc0:	4b31      	ldr	r3, [pc, #196]	; (801fc88 <xTaskResumeAll+0x104>)
 801fbc2:	68db      	ldr	r3, [r3, #12]
 801fbc4:	68db      	ldr	r3, [r3, #12]
 801fbc6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 801fbc8:	68fb      	ldr	r3, [r7, #12]
 801fbca:	3318      	adds	r3, #24
 801fbcc:	4618      	mov	r0, r3
 801fbce:	f7ff f921 	bl	801ee14 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801fbd2:	68fb      	ldr	r3, [r7, #12]
 801fbd4:	3304      	adds	r3, #4
 801fbd6:	4618      	mov	r0, r3
 801fbd8:	f7ff f91c 	bl	801ee14 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 801fbdc:	68fb      	ldr	r3, [r7, #12]
 801fbde:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801fbe0:	4b2a      	ldr	r3, [pc, #168]	; (801fc8c <xTaskResumeAll+0x108>)
 801fbe2:	681b      	ldr	r3, [r3, #0]
 801fbe4:	429a      	cmp	r2, r3
 801fbe6:	d903      	bls.n	801fbf0 <xTaskResumeAll+0x6c>
 801fbe8:	68fb      	ldr	r3, [r7, #12]
 801fbea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801fbec:	4a27      	ldr	r2, [pc, #156]	; (801fc8c <xTaskResumeAll+0x108>)
 801fbee:	6013      	str	r3, [r2, #0]
 801fbf0:	68fb      	ldr	r3, [r7, #12]
 801fbf2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801fbf4:	4613      	mov	r3, r2
 801fbf6:	009b      	lsls	r3, r3, #2
 801fbf8:	4413      	add	r3, r2
 801fbfa:	009b      	lsls	r3, r3, #2
 801fbfc:	4a24      	ldr	r2, [pc, #144]	; (801fc90 <xTaskResumeAll+0x10c>)
 801fbfe:	441a      	add	r2, r3
 801fc00:	68fb      	ldr	r3, [r7, #12]
 801fc02:	3304      	adds	r3, #4
 801fc04:	4619      	mov	r1, r3
 801fc06:	4610      	mov	r0, r2
 801fc08:	f7ff f8a7 	bl	801ed5a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 801fc0c:	68fb      	ldr	r3, [r7, #12]
 801fc0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801fc10:	4b20      	ldr	r3, [pc, #128]	; (801fc94 <xTaskResumeAll+0x110>)
 801fc12:	681b      	ldr	r3, [r3, #0]
 801fc14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801fc16:	429a      	cmp	r2, r3
 801fc18:	d302      	bcc.n	801fc20 <xTaskResumeAll+0x9c>
					{
						xYieldPending = pdTRUE;
 801fc1a:	4b1f      	ldr	r3, [pc, #124]	; (801fc98 <xTaskResumeAll+0x114>)
 801fc1c:	2201      	movs	r2, #1
 801fc1e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 801fc20:	4b19      	ldr	r3, [pc, #100]	; (801fc88 <xTaskResumeAll+0x104>)
 801fc22:	681b      	ldr	r3, [r3, #0]
 801fc24:	2b00      	cmp	r3, #0
 801fc26:	d1cb      	bne.n	801fbc0 <xTaskResumeAll+0x3c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 801fc28:	68fb      	ldr	r3, [r7, #12]
 801fc2a:	2b00      	cmp	r3, #0
 801fc2c:	d001      	beq.n	801fc32 <xTaskResumeAll+0xae>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 801fc2e:	f000 fb03 	bl	8020238 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 801fc32:	4b1a      	ldr	r3, [pc, #104]	; (801fc9c <xTaskResumeAll+0x118>)
 801fc34:	681b      	ldr	r3, [r3, #0]
 801fc36:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 801fc38:	687b      	ldr	r3, [r7, #4]
 801fc3a:	2b00      	cmp	r3, #0
 801fc3c:	d010      	beq.n	801fc60 <xTaskResumeAll+0xdc>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 801fc3e:	f000 f83f 	bl	801fcc0 <xTaskIncrementTick>
 801fc42:	4603      	mov	r3, r0
 801fc44:	2b00      	cmp	r3, #0
 801fc46:	d002      	beq.n	801fc4e <xTaskResumeAll+0xca>
							{
								xYieldPending = pdTRUE;
 801fc48:	4b13      	ldr	r3, [pc, #76]	; (801fc98 <xTaskResumeAll+0x114>)
 801fc4a:	2201      	movs	r2, #1
 801fc4c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 801fc4e:	687b      	ldr	r3, [r7, #4]
 801fc50:	3b01      	subs	r3, #1
 801fc52:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 801fc54:	687b      	ldr	r3, [r7, #4]
 801fc56:	2b00      	cmp	r3, #0
 801fc58:	d1f1      	bne.n	801fc3e <xTaskResumeAll+0xba>

						xPendedTicks = 0;
 801fc5a:	4b10      	ldr	r3, [pc, #64]	; (801fc9c <xTaskResumeAll+0x118>)
 801fc5c:	2200      	movs	r2, #0
 801fc5e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 801fc60:	4b0d      	ldr	r3, [pc, #52]	; (801fc98 <xTaskResumeAll+0x114>)
 801fc62:	681b      	ldr	r3, [r3, #0]
 801fc64:	2b00      	cmp	r3, #0
 801fc66:	d003      	beq.n	801fc70 <xTaskResumeAll+0xec>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 801fc68:	2301      	movs	r3, #1
 801fc6a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 801fc6c:	f000 ff20 	bl	8020ab0 <vPortYield>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 801fc70:	f000 ff42 	bl	8020af8 <vPortExitCritical>

	return xAlreadyYielded;
 801fc74:	68bb      	ldr	r3, [r7, #8]
}
 801fc76:	4618      	mov	r0, r3
 801fc78:	3710      	adds	r7, #16
 801fc7a:	46bd      	mov	sp, r7
 801fc7c:	bd80      	pop	{r7, pc}
 801fc7e:	bf00      	nop
 801fc80:	20001be8 	.word	0x20001be8
 801fc84:	20001bc0 	.word	0x20001bc0
 801fc88:	20001b80 	.word	0x20001b80
 801fc8c:	20001bc8 	.word	0x20001bc8
 801fc90:	200016f0 	.word	0x200016f0
 801fc94:	200016ec 	.word	0x200016ec
 801fc98:	20001bd4 	.word	0x20001bd4
 801fc9c:	20001bd0 	.word	0x20001bd0

0801fca0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 801fca0:	b480      	push	{r7}
 801fca2:	b083      	sub	sp, #12
 801fca4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 801fca6:	4b05      	ldr	r3, [pc, #20]	; (801fcbc <xTaskGetTickCount+0x1c>)
 801fca8:	681b      	ldr	r3, [r3, #0]
 801fcaa:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 801fcac:	687b      	ldr	r3, [r7, #4]
}
 801fcae:	4618      	mov	r0, r3
 801fcb0:	370c      	adds	r7, #12
 801fcb2:	46bd      	mov	sp, r7
 801fcb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801fcb8:	4770      	bx	lr
 801fcba:	bf00      	nop
 801fcbc:	20001bc4 	.word	0x20001bc4

0801fcc0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 801fcc0:	b580      	push	{r7, lr}
 801fcc2:	b086      	sub	sp, #24
 801fcc4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 801fcc6:	2300      	movs	r3, #0
 801fcc8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801fcca:	4b4b      	ldr	r3, [pc, #300]	; (801fdf8 <xTaskIncrementTick+0x138>)
 801fccc:	681b      	ldr	r3, [r3, #0]
 801fcce:	2b00      	cmp	r3, #0
 801fcd0:	f040 8087 	bne.w	801fde2 <xTaskIncrementTick+0x122>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 801fcd4:	4b49      	ldr	r3, [pc, #292]	; (801fdfc <xTaskIncrementTick+0x13c>)
 801fcd6:	681b      	ldr	r3, [r3, #0]
 801fcd8:	3301      	adds	r3, #1
 801fcda:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 801fcdc:	4a47      	ldr	r2, [pc, #284]	; (801fdfc <xTaskIncrementTick+0x13c>)
 801fcde:	693b      	ldr	r3, [r7, #16]
 801fce0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 801fce2:	693b      	ldr	r3, [r7, #16]
 801fce4:	2b00      	cmp	r3, #0
 801fce6:	d118      	bne.n	801fd1a <xTaskIncrementTick+0x5a>
		{
			taskSWITCH_DELAYED_LISTS();
 801fce8:	4b45      	ldr	r3, [pc, #276]	; (801fe00 <xTaskIncrementTick+0x140>)
 801fcea:	681b      	ldr	r3, [r3, #0]
 801fcec:	681b      	ldr	r3, [r3, #0]
 801fcee:	2b00      	cmp	r3, #0
 801fcf0:	d002      	beq.n	801fcf8 <xTaskIncrementTick+0x38>
 801fcf2:	f001 f821 	bl	8020d38 <ulSetInterruptMask>
 801fcf6:	e7fe      	b.n	801fcf6 <xTaskIncrementTick+0x36>
 801fcf8:	4b41      	ldr	r3, [pc, #260]	; (801fe00 <xTaskIncrementTick+0x140>)
 801fcfa:	681b      	ldr	r3, [r3, #0]
 801fcfc:	60fb      	str	r3, [r7, #12]
 801fcfe:	4b41      	ldr	r3, [pc, #260]	; (801fe04 <xTaskIncrementTick+0x144>)
 801fd00:	681b      	ldr	r3, [r3, #0]
 801fd02:	4a3f      	ldr	r2, [pc, #252]	; (801fe00 <xTaskIncrementTick+0x140>)
 801fd04:	6013      	str	r3, [r2, #0]
 801fd06:	4a3f      	ldr	r2, [pc, #252]	; (801fe04 <xTaskIncrementTick+0x144>)
 801fd08:	68fb      	ldr	r3, [r7, #12]
 801fd0a:	6013      	str	r3, [r2, #0]
 801fd0c:	4b3e      	ldr	r3, [pc, #248]	; (801fe08 <xTaskIncrementTick+0x148>)
 801fd0e:	681b      	ldr	r3, [r3, #0]
 801fd10:	3301      	adds	r3, #1
 801fd12:	4a3d      	ldr	r2, [pc, #244]	; (801fe08 <xTaskIncrementTick+0x148>)
 801fd14:	6013      	str	r3, [r2, #0]
 801fd16:	f000 fa8f 	bl	8020238 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 801fd1a:	4b3c      	ldr	r3, [pc, #240]	; (801fe0c <xTaskIncrementTick+0x14c>)
 801fd1c:	681b      	ldr	r3, [r3, #0]
 801fd1e:	693a      	ldr	r2, [r7, #16]
 801fd20:	429a      	cmp	r2, r3
 801fd22:	d349      	bcc.n	801fdb8 <xTaskIncrementTick+0xf8>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801fd24:	4b36      	ldr	r3, [pc, #216]	; (801fe00 <xTaskIncrementTick+0x140>)
 801fd26:	681b      	ldr	r3, [r3, #0]
 801fd28:	681b      	ldr	r3, [r3, #0]
 801fd2a:	2b00      	cmp	r3, #0
 801fd2c:	d104      	bne.n	801fd38 <xTaskIncrementTick+0x78>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801fd2e:	4b37      	ldr	r3, [pc, #220]	; (801fe0c <xTaskIncrementTick+0x14c>)
 801fd30:	f04f 32ff 	mov.w	r2, #4294967295
 801fd34:	601a      	str	r2, [r3, #0]
					break;
 801fd36:	e03f      	b.n	801fdb8 <xTaskIncrementTick+0xf8>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801fd38:	4b31      	ldr	r3, [pc, #196]	; (801fe00 <xTaskIncrementTick+0x140>)
 801fd3a:	681b      	ldr	r3, [r3, #0]
 801fd3c:	68db      	ldr	r3, [r3, #12]
 801fd3e:	68db      	ldr	r3, [r3, #12]
 801fd40:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 801fd42:	68bb      	ldr	r3, [r7, #8]
 801fd44:	685b      	ldr	r3, [r3, #4]
 801fd46:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 801fd48:	693a      	ldr	r2, [r7, #16]
 801fd4a:	687b      	ldr	r3, [r7, #4]
 801fd4c:	429a      	cmp	r2, r3
 801fd4e:	d203      	bcs.n	801fd58 <xTaskIncrementTick+0x98>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 801fd50:	4a2e      	ldr	r2, [pc, #184]	; (801fe0c <xTaskIncrementTick+0x14c>)
 801fd52:	687b      	ldr	r3, [r7, #4]
 801fd54:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 801fd56:	e02f      	b.n	801fdb8 <xTaskIncrementTick+0xf8>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801fd58:	68bb      	ldr	r3, [r7, #8]
 801fd5a:	3304      	adds	r3, #4
 801fd5c:	4618      	mov	r0, r3
 801fd5e:	f7ff f859 	bl	801ee14 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 801fd62:	68bb      	ldr	r3, [r7, #8]
 801fd64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801fd66:	2b00      	cmp	r3, #0
 801fd68:	d004      	beq.n	801fd74 <xTaskIncrementTick+0xb4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 801fd6a:	68bb      	ldr	r3, [r7, #8]
 801fd6c:	3318      	adds	r3, #24
 801fd6e:	4618      	mov	r0, r3
 801fd70:	f7ff f850 	bl	801ee14 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 801fd74:	68bb      	ldr	r3, [r7, #8]
 801fd76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801fd78:	4b25      	ldr	r3, [pc, #148]	; (801fe10 <xTaskIncrementTick+0x150>)
 801fd7a:	681b      	ldr	r3, [r3, #0]
 801fd7c:	429a      	cmp	r2, r3
 801fd7e:	d903      	bls.n	801fd88 <xTaskIncrementTick+0xc8>
 801fd80:	68bb      	ldr	r3, [r7, #8]
 801fd82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801fd84:	4a22      	ldr	r2, [pc, #136]	; (801fe10 <xTaskIncrementTick+0x150>)
 801fd86:	6013      	str	r3, [r2, #0]
 801fd88:	68bb      	ldr	r3, [r7, #8]
 801fd8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801fd8c:	4613      	mov	r3, r2
 801fd8e:	009b      	lsls	r3, r3, #2
 801fd90:	4413      	add	r3, r2
 801fd92:	009b      	lsls	r3, r3, #2
 801fd94:	4a1f      	ldr	r2, [pc, #124]	; (801fe14 <xTaskIncrementTick+0x154>)
 801fd96:	441a      	add	r2, r3
 801fd98:	68bb      	ldr	r3, [r7, #8]
 801fd9a:	3304      	adds	r3, #4
 801fd9c:	4619      	mov	r1, r3
 801fd9e:	4610      	mov	r0, r2
 801fda0:	f7fe ffdb 	bl	801ed5a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 801fda4:	68bb      	ldr	r3, [r7, #8]
 801fda6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801fda8:	4b1b      	ldr	r3, [pc, #108]	; (801fe18 <xTaskIncrementTick+0x158>)
 801fdaa:	681b      	ldr	r3, [r3, #0]
 801fdac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801fdae:	429a      	cmp	r2, r3
 801fdb0:	d3b8      	bcc.n	801fd24 <xTaskIncrementTick+0x64>
						{
							xSwitchRequired = pdTRUE;
 801fdb2:	2301      	movs	r3, #1
 801fdb4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801fdb6:	e7b5      	b.n	801fd24 <xTaskIncrementTick+0x64>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 801fdb8:	4b17      	ldr	r3, [pc, #92]	; (801fe18 <xTaskIncrementTick+0x158>)
 801fdba:	681b      	ldr	r3, [r3, #0]
 801fdbc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801fdbe:	4915      	ldr	r1, [pc, #84]	; (801fe14 <xTaskIncrementTick+0x154>)
 801fdc0:	4613      	mov	r3, r2
 801fdc2:	009b      	lsls	r3, r3, #2
 801fdc4:	4413      	add	r3, r2
 801fdc6:	009b      	lsls	r3, r3, #2
 801fdc8:	440b      	add	r3, r1
 801fdca:	681b      	ldr	r3, [r3, #0]
 801fdcc:	2b01      	cmp	r3, #1
 801fdce:	d901      	bls.n	801fdd4 <xTaskIncrementTick+0x114>
			{
				xSwitchRequired = pdTRUE;
 801fdd0:	2301      	movs	r3, #1
 801fdd2:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 801fdd4:	4b11      	ldr	r3, [pc, #68]	; (801fe1c <xTaskIncrementTick+0x15c>)
 801fdd6:	681b      	ldr	r3, [r3, #0]
 801fdd8:	2b00      	cmp	r3, #0
 801fdda:	d007      	beq.n	801fdec <xTaskIncrementTick+0x12c>
			{
				xSwitchRequired = pdTRUE;
 801fddc:	2301      	movs	r3, #1
 801fdde:	617b      	str	r3, [r7, #20]
 801fde0:	e004      	b.n	801fdec <xTaskIncrementTick+0x12c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 801fde2:	4b0f      	ldr	r3, [pc, #60]	; (801fe20 <xTaskIncrementTick+0x160>)
 801fde4:	681b      	ldr	r3, [r3, #0]
 801fde6:	3301      	adds	r3, #1
 801fde8:	4a0d      	ldr	r2, [pc, #52]	; (801fe20 <xTaskIncrementTick+0x160>)
 801fdea:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 801fdec:	697b      	ldr	r3, [r7, #20]
}
 801fdee:	4618      	mov	r0, r3
 801fdf0:	3718      	adds	r7, #24
 801fdf2:	46bd      	mov	sp, r7
 801fdf4:	bd80      	pop	{r7, pc}
 801fdf6:	bf00      	nop
 801fdf8:	20001be8 	.word	0x20001be8
 801fdfc:	20001bc4 	.word	0x20001bc4
 801fe00:	20001b78 	.word	0x20001b78
 801fe04:	20001b7c 	.word	0x20001b7c
 801fe08:	20001bd8 	.word	0x20001bd8
 801fe0c:	20001be0 	.word	0x20001be0
 801fe10:	20001bc8 	.word	0x20001bc8
 801fe14:	200016f0 	.word	0x200016f0
 801fe18:	200016ec 	.word	0x200016ec
 801fe1c:	20001bd4 	.word	0x20001bd4
 801fe20:	20001bd0 	.word	0x20001bd0

0801fe24 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 801fe24:	b580      	push	{r7, lr}
 801fe26:	b082      	sub	sp, #8
 801fe28:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 801fe2a:	4b23      	ldr	r3, [pc, #140]	; (801feb8 <vTaskSwitchContext+0x94>)
 801fe2c:	681b      	ldr	r3, [r3, #0]
 801fe2e:	2b00      	cmp	r3, #0
 801fe30:	d003      	beq.n	801fe3a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 801fe32:	4b22      	ldr	r3, [pc, #136]	; (801febc <vTaskSwitchContext+0x98>)
 801fe34:	2201      	movs	r2, #1
 801fe36:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 801fe38:	e039      	b.n	801feae <vTaskSwitchContext+0x8a>
		xYieldPending = pdFALSE;
 801fe3a:	4b20      	ldr	r3, [pc, #128]	; (801febc <vTaskSwitchContext+0x98>)
 801fe3c:	2200      	movs	r2, #0
 801fe3e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801fe40:	4b1f      	ldr	r3, [pc, #124]	; (801fec0 <vTaskSwitchContext+0x9c>)
 801fe42:	681b      	ldr	r3, [r3, #0]
 801fe44:	607b      	str	r3, [r7, #4]
 801fe46:	e008      	b.n	801fe5a <vTaskSwitchContext+0x36>
 801fe48:	687b      	ldr	r3, [r7, #4]
 801fe4a:	2b00      	cmp	r3, #0
 801fe4c:	d102      	bne.n	801fe54 <vTaskSwitchContext+0x30>
 801fe4e:	f000 ff73 	bl	8020d38 <ulSetInterruptMask>
 801fe52:	e7fe      	b.n	801fe52 <vTaskSwitchContext+0x2e>
 801fe54:	687b      	ldr	r3, [r7, #4]
 801fe56:	3b01      	subs	r3, #1
 801fe58:	607b      	str	r3, [r7, #4]
 801fe5a:	491a      	ldr	r1, [pc, #104]	; (801fec4 <vTaskSwitchContext+0xa0>)
 801fe5c:	687a      	ldr	r2, [r7, #4]
 801fe5e:	4613      	mov	r3, r2
 801fe60:	009b      	lsls	r3, r3, #2
 801fe62:	4413      	add	r3, r2
 801fe64:	009b      	lsls	r3, r3, #2
 801fe66:	440b      	add	r3, r1
 801fe68:	681b      	ldr	r3, [r3, #0]
 801fe6a:	2b00      	cmp	r3, #0
 801fe6c:	d0ec      	beq.n	801fe48 <vTaskSwitchContext+0x24>
 801fe6e:	687a      	ldr	r2, [r7, #4]
 801fe70:	4613      	mov	r3, r2
 801fe72:	009b      	lsls	r3, r3, #2
 801fe74:	4413      	add	r3, r2
 801fe76:	009b      	lsls	r3, r3, #2
 801fe78:	4a12      	ldr	r2, [pc, #72]	; (801fec4 <vTaskSwitchContext+0xa0>)
 801fe7a:	4413      	add	r3, r2
 801fe7c:	603b      	str	r3, [r7, #0]
 801fe7e:	683b      	ldr	r3, [r7, #0]
 801fe80:	685b      	ldr	r3, [r3, #4]
 801fe82:	685a      	ldr	r2, [r3, #4]
 801fe84:	683b      	ldr	r3, [r7, #0]
 801fe86:	605a      	str	r2, [r3, #4]
 801fe88:	683b      	ldr	r3, [r7, #0]
 801fe8a:	685a      	ldr	r2, [r3, #4]
 801fe8c:	683b      	ldr	r3, [r7, #0]
 801fe8e:	3308      	adds	r3, #8
 801fe90:	429a      	cmp	r2, r3
 801fe92:	d104      	bne.n	801fe9e <vTaskSwitchContext+0x7a>
 801fe94:	683b      	ldr	r3, [r7, #0]
 801fe96:	685b      	ldr	r3, [r3, #4]
 801fe98:	685a      	ldr	r2, [r3, #4]
 801fe9a:	683b      	ldr	r3, [r7, #0]
 801fe9c:	605a      	str	r2, [r3, #4]
 801fe9e:	683b      	ldr	r3, [r7, #0]
 801fea0:	685b      	ldr	r3, [r3, #4]
 801fea2:	68db      	ldr	r3, [r3, #12]
 801fea4:	4a08      	ldr	r2, [pc, #32]	; (801fec8 <vTaskSwitchContext+0xa4>)
 801fea6:	6013      	str	r3, [r2, #0]
 801fea8:	4a05      	ldr	r2, [pc, #20]	; (801fec0 <vTaskSwitchContext+0x9c>)
 801feaa:	687b      	ldr	r3, [r7, #4]
 801feac:	6013      	str	r3, [r2, #0]
}
 801feae:	bf00      	nop
 801feb0:	3708      	adds	r7, #8
 801feb2:	46bd      	mov	sp, r7
 801feb4:	bd80      	pop	{r7, pc}
 801feb6:	bf00      	nop
 801feb8:	20001be8 	.word	0x20001be8
 801febc:	20001bd4 	.word	0x20001bd4
 801fec0:	20001bc8 	.word	0x20001bc8
 801fec4:	200016f0 	.word	0x200016f0
 801fec8:	200016ec 	.word	0x200016ec

0801fecc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 801fecc:	b580      	push	{r7, lr}
 801fece:	b082      	sub	sp, #8
 801fed0:	af00      	add	r7, sp, #0
 801fed2:	6078      	str	r0, [r7, #4]
 801fed4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 801fed6:	687b      	ldr	r3, [r7, #4]
 801fed8:	2b00      	cmp	r3, #0
 801feda:	d102      	bne.n	801fee2 <vTaskPlaceOnEventList+0x16>
 801fedc:	f000 ff2c 	bl	8020d38 <ulSetInterruptMask>
 801fee0:	e7fe      	b.n	801fee0 <vTaskPlaceOnEventList+0x14>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 801fee2:	4b07      	ldr	r3, [pc, #28]	; (801ff00 <vTaskPlaceOnEventList+0x34>)
 801fee4:	681b      	ldr	r3, [r3, #0]
 801fee6:	3318      	adds	r3, #24
 801fee8:	4619      	mov	r1, r3
 801feea:	6878      	ldr	r0, [r7, #4]
 801feec:	f7fe ff59 	bl	801eda2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 801fef0:	2101      	movs	r1, #1
 801fef2:	6838      	ldr	r0, [r7, #0]
 801fef4:	f000 fa3c 	bl	8020370 <prvAddCurrentTaskToDelayedList>
}
 801fef8:	bf00      	nop
 801fefa:	3708      	adds	r7, #8
 801fefc:	46bd      	mov	sp, r7
 801fefe:	bd80      	pop	{r7, pc}
 801ff00:	200016ec 	.word	0x200016ec

0801ff04 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 801ff04:	b580      	push	{r7, lr}
 801ff06:	b084      	sub	sp, #16
 801ff08:	af00      	add	r7, sp, #0
 801ff0a:	60f8      	str	r0, [r7, #12]
 801ff0c:	60b9      	str	r1, [r7, #8]
 801ff0e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 801ff10:	68fb      	ldr	r3, [r7, #12]
 801ff12:	2b00      	cmp	r3, #0
 801ff14:	d102      	bne.n	801ff1c <vTaskPlaceOnEventListRestricted+0x18>
 801ff16:	f000 ff0f 	bl	8020d38 <ulSetInterruptMask>
 801ff1a:	e7fe      	b.n	801ff1a <vTaskPlaceOnEventListRestricted+0x16>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 801ff1c:	4b0a      	ldr	r3, [pc, #40]	; (801ff48 <vTaskPlaceOnEventListRestricted+0x44>)
 801ff1e:	681b      	ldr	r3, [r3, #0]
 801ff20:	3318      	adds	r3, #24
 801ff22:	4619      	mov	r1, r3
 801ff24:	68f8      	ldr	r0, [r7, #12]
 801ff26:	f7fe ff18 	bl	801ed5a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 801ff2a:	687b      	ldr	r3, [r7, #4]
 801ff2c:	2b00      	cmp	r3, #0
 801ff2e:	d002      	beq.n	801ff36 <vTaskPlaceOnEventListRestricted+0x32>
		{
			xTicksToWait = portMAX_DELAY;
 801ff30:	f04f 33ff 	mov.w	r3, #4294967295
 801ff34:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 801ff36:	6879      	ldr	r1, [r7, #4]
 801ff38:	68b8      	ldr	r0, [r7, #8]
 801ff3a:	f000 fa19 	bl	8020370 <prvAddCurrentTaskToDelayedList>
	}
 801ff3e:	bf00      	nop
 801ff40:	3710      	adds	r7, #16
 801ff42:	46bd      	mov	sp, r7
 801ff44:	bd80      	pop	{r7, pc}
 801ff46:	bf00      	nop
 801ff48:	200016ec 	.word	0x200016ec

0801ff4c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 801ff4c:	b580      	push	{r7, lr}
 801ff4e:	b084      	sub	sp, #16
 801ff50:	af00      	add	r7, sp, #0
 801ff52:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801ff54:	687b      	ldr	r3, [r7, #4]
 801ff56:	68db      	ldr	r3, [r3, #12]
 801ff58:	68db      	ldr	r3, [r3, #12]
 801ff5a:	60bb      	str	r3, [r7, #8]
	configASSERT( pxUnblockedTCB );
 801ff5c:	68bb      	ldr	r3, [r7, #8]
 801ff5e:	2b00      	cmp	r3, #0
 801ff60:	d102      	bne.n	801ff68 <xTaskRemoveFromEventList+0x1c>
 801ff62:	f000 fee9 	bl	8020d38 <ulSetInterruptMask>
 801ff66:	e7fe      	b.n	801ff66 <xTaskRemoveFromEventList+0x1a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 801ff68:	68bb      	ldr	r3, [r7, #8]
 801ff6a:	3318      	adds	r3, #24
 801ff6c:	4618      	mov	r0, r3
 801ff6e:	f7fe ff51 	bl	801ee14 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801ff72:	4b1e      	ldr	r3, [pc, #120]	; (801ffec <xTaskRemoveFromEventList+0xa0>)
 801ff74:	681b      	ldr	r3, [r3, #0]
 801ff76:	2b00      	cmp	r3, #0
 801ff78:	d11d      	bne.n	801ffb6 <xTaskRemoveFromEventList+0x6a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 801ff7a:	68bb      	ldr	r3, [r7, #8]
 801ff7c:	3304      	adds	r3, #4
 801ff7e:	4618      	mov	r0, r3
 801ff80:	f7fe ff48 	bl	801ee14 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 801ff84:	68bb      	ldr	r3, [r7, #8]
 801ff86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801ff88:	4b19      	ldr	r3, [pc, #100]	; (801fff0 <xTaskRemoveFromEventList+0xa4>)
 801ff8a:	681b      	ldr	r3, [r3, #0]
 801ff8c:	429a      	cmp	r2, r3
 801ff8e:	d903      	bls.n	801ff98 <xTaskRemoveFromEventList+0x4c>
 801ff90:	68bb      	ldr	r3, [r7, #8]
 801ff92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801ff94:	4a16      	ldr	r2, [pc, #88]	; (801fff0 <xTaskRemoveFromEventList+0xa4>)
 801ff96:	6013      	str	r3, [r2, #0]
 801ff98:	68bb      	ldr	r3, [r7, #8]
 801ff9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801ff9c:	4613      	mov	r3, r2
 801ff9e:	009b      	lsls	r3, r3, #2
 801ffa0:	4413      	add	r3, r2
 801ffa2:	009b      	lsls	r3, r3, #2
 801ffa4:	4a13      	ldr	r2, [pc, #76]	; (801fff4 <xTaskRemoveFromEventList+0xa8>)
 801ffa6:	441a      	add	r2, r3
 801ffa8:	68bb      	ldr	r3, [r7, #8]
 801ffaa:	3304      	adds	r3, #4
 801ffac:	4619      	mov	r1, r3
 801ffae:	4610      	mov	r0, r2
 801ffb0:	f7fe fed3 	bl	801ed5a <vListInsertEnd>
 801ffb4:	e005      	b.n	801ffc2 <xTaskRemoveFromEventList+0x76>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 801ffb6:	68bb      	ldr	r3, [r7, #8]
 801ffb8:	3318      	adds	r3, #24
 801ffba:	4619      	mov	r1, r3
 801ffbc:	480e      	ldr	r0, [pc, #56]	; (801fff8 <xTaskRemoveFromEventList+0xac>)
 801ffbe:	f7fe fecc 	bl	801ed5a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 801ffc2:	68bb      	ldr	r3, [r7, #8]
 801ffc4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801ffc6:	4b0d      	ldr	r3, [pc, #52]	; (801fffc <xTaskRemoveFromEventList+0xb0>)
 801ffc8:	681b      	ldr	r3, [r3, #0]
 801ffca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801ffcc:	429a      	cmp	r2, r3
 801ffce:	d905      	bls.n	801ffdc <xTaskRemoveFromEventList+0x90>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 801ffd0:	2301      	movs	r3, #1
 801ffd2:	60fb      	str	r3, [r7, #12]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 801ffd4:	4b0a      	ldr	r3, [pc, #40]	; (8020000 <xTaskRemoveFromEventList+0xb4>)
 801ffd6:	2201      	movs	r2, #1
 801ffd8:	601a      	str	r2, [r3, #0]
 801ffda:	e001      	b.n	801ffe0 <xTaskRemoveFromEventList+0x94>
	}
	else
	{
		xReturn = pdFALSE;
 801ffdc:	2300      	movs	r3, #0
 801ffde:	60fb      	str	r3, [r7, #12]
	}

	return xReturn;
 801ffe0:	68fb      	ldr	r3, [r7, #12]
}
 801ffe2:	4618      	mov	r0, r3
 801ffe4:	3710      	adds	r7, #16
 801ffe6:	46bd      	mov	sp, r7
 801ffe8:	bd80      	pop	{r7, pc}
 801ffea:	bf00      	nop
 801ffec:	20001be8 	.word	0x20001be8
 801fff0:	20001bc8 	.word	0x20001bc8
 801fff4:	200016f0 	.word	0x200016f0
 801fff8:	20001b80 	.word	0x20001b80
 801fffc:	200016ec 	.word	0x200016ec
 8020000:	20001bd4 	.word	0x20001bd4

08020004 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8020004:	b480      	push	{r7}
 8020006:	b083      	sub	sp, #12
 8020008:	af00      	add	r7, sp, #0
 802000a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 802000c:	4b06      	ldr	r3, [pc, #24]	; (8020028 <vTaskInternalSetTimeOutState+0x24>)
 802000e:	681a      	ldr	r2, [r3, #0]
 8020010:	687b      	ldr	r3, [r7, #4]
 8020012:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8020014:	4b05      	ldr	r3, [pc, #20]	; (802002c <vTaskInternalSetTimeOutState+0x28>)
 8020016:	681a      	ldr	r2, [r3, #0]
 8020018:	687b      	ldr	r3, [r7, #4]
 802001a:	605a      	str	r2, [r3, #4]
}
 802001c:	bf00      	nop
 802001e:	370c      	adds	r7, #12
 8020020:	46bd      	mov	sp, r7
 8020022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020026:	4770      	bx	lr
 8020028:	20001bd8 	.word	0x20001bd8
 802002c:	20001bc4 	.word	0x20001bc4

08020030 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8020030:	b580      	push	{r7, lr}
 8020032:	b086      	sub	sp, #24
 8020034:	af00      	add	r7, sp, #0
 8020036:	6078      	str	r0, [r7, #4]
 8020038:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 802003a:	687b      	ldr	r3, [r7, #4]
 802003c:	2b00      	cmp	r3, #0
 802003e:	d102      	bne.n	8020046 <xTaskCheckForTimeOut+0x16>
 8020040:	f000 fe7a 	bl	8020d38 <ulSetInterruptMask>
 8020044:	e7fe      	b.n	8020044 <xTaskCheckForTimeOut+0x14>
	configASSERT( pxTicksToWait );
 8020046:	683b      	ldr	r3, [r7, #0]
 8020048:	2b00      	cmp	r3, #0
 802004a:	d102      	bne.n	8020052 <xTaskCheckForTimeOut+0x22>
 802004c:	f000 fe74 	bl	8020d38 <ulSetInterruptMask>
 8020050:	e7fe      	b.n	8020050 <xTaskCheckForTimeOut+0x20>

	taskENTER_CRITICAL();
 8020052:	f000 fd3f 	bl	8020ad4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8020056:	4b1d      	ldr	r3, [pc, #116]	; (80200cc <xTaskCheckForTimeOut+0x9c>)
 8020058:	681b      	ldr	r3, [r3, #0]
 802005a:	613b      	str	r3, [r7, #16]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 802005c:	687b      	ldr	r3, [r7, #4]
 802005e:	685b      	ldr	r3, [r3, #4]
 8020060:	693a      	ldr	r2, [r7, #16]
 8020062:	1ad3      	subs	r3, r2, r3
 8020064:	60fb      	str	r3, [r7, #12]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8020066:	683b      	ldr	r3, [r7, #0]
 8020068:	681b      	ldr	r3, [r3, #0]
 802006a:	f1b3 3fff 	cmp.w	r3, #4294967295
 802006e:	d102      	bne.n	8020076 <xTaskCheckForTimeOut+0x46>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8020070:	2300      	movs	r3, #0
 8020072:	617b      	str	r3, [r7, #20]
 8020074:	e023      	b.n	80200be <xTaskCheckForTimeOut+0x8e>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8020076:	687b      	ldr	r3, [r7, #4]
 8020078:	681a      	ldr	r2, [r3, #0]
 802007a:	4b15      	ldr	r3, [pc, #84]	; (80200d0 <xTaskCheckForTimeOut+0xa0>)
 802007c:	681b      	ldr	r3, [r3, #0]
 802007e:	429a      	cmp	r2, r3
 8020080:	d007      	beq.n	8020092 <xTaskCheckForTimeOut+0x62>
 8020082:	687b      	ldr	r3, [r7, #4]
 8020084:	685b      	ldr	r3, [r3, #4]
 8020086:	693a      	ldr	r2, [r7, #16]
 8020088:	429a      	cmp	r2, r3
 802008a:	d302      	bcc.n	8020092 <xTaskCheckForTimeOut+0x62>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 802008c:	2301      	movs	r3, #1
 802008e:	617b      	str	r3, [r7, #20]
 8020090:	e015      	b.n	80200be <xTaskCheckForTimeOut+0x8e>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8020092:	683b      	ldr	r3, [r7, #0]
 8020094:	681b      	ldr	r3, [r3, #0]
 8020096:	68fa      	ldr	r2, [r7, #12]
 8020098:	429a      	cmp	r2, r3
 802009a:	d20b      	bcs.n	80200b4 <xTaskCheckForTimeOut+0x84>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 802009c:	683b      	ldr	r3, [r7, #0]
 802009e:	681a      	ldr	r2, [r3, #0]
 80200a0:	68fb      	ldr	r3, [r7, #12]
 80200a2:	1ad2      	subs	r2, r2, r3
 80200a4:	683b      	ldr	r3, [r7, #0]
 80200a6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80200a8:	6878      	ldr	r0, [r7, #4]
 80200aa:	f7ff ffab 	bl	8020004 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80200ae:	2300      	movs	r3, #0
 80200b0:	617b      	str	r3, [r7, #20]
 80200b2:	e004      	b.n	80200be <xTaskCheckForTimeOut+0x8e>
		}
		else
		{
			*pxTicksToWait = 0;
 80200b4:	683b      	ldr	r3, [r7, #0]
 80200b6:	2200      	movs	r2, #0
 80200b8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80200ba:	2301      	movs	r3, #1
 80200bc:	617b      	str	r3, [r7, #20]
		}
	}
	taskEXIT_CRITICAL();
 80200be:	f000 fd1b 	bl	8020af8 <vPortExitCritical>

	return xReturn;
 80200c2:	697b      	ldr	r3, [r7, #20]
}
 80200c4:	4618      	mov	r0, r3
 80200c6:	3718      	adds	r7, #24
 80200c8:	46bd      	mov	sp, r7
 80200ca:	bd80      	pop	{r7, pc}
 80200cc:	20001bc4 	.word	0x20001bc4
 80200d0:	20001bd8 	.word	0x20001bd8

080200d4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80200d4:	b480      	push	{r7}
 80200d6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80200d8:	4b03      	ldr	r3, [pc, #12]	; (80200e8 <vTaskMissedYield+0x14>)
 80200da:	2201      	movs	r2, #1
 80200dc:	601a      	str	r2, [r3, #0]
}
 80200de:	bf00      	nop
 80200e0:	46bd      	mov	sp, r7
 80200e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80200e6:	4770      	bx	lr
 80200e8:	20001bd4 	.word	0x20001bd4

080200ec <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80200ec:	b580      	push	{r7, lr}
 80200ee:	b082      	sub	sp, #8
 80200f0:	af00      	add	r7, sp, #0
 80200f2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80200f4:	f000 f84a 	bl	802018c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80200f8:	4b03      	ldr	r3, [pc, #12]	; (8020108 <prvIdleTask+0x1c>)
 80200fa:	681b      	ldr	r3, [r3, #0]
 80200fc:	2b01      	cmp	r3, #1
 80200fe:	d9f9      	bls.n	80200f4 <prvIdleTask+0x8>
			{
				taskYIELD();
 8020100:	f000 fcd6 	bl	8020ab0 <vPortYield>
		prvCheckTasksWaitingTermination();
 8020104:	e7f6      	b.n	80200f4 <prvIdleTask+0x8>
 8020106:	bf00      	nop
 8020108:	200016f0 	.word	0x200016f0

0802010c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 802010c:	b580      	push	{r7, lr}
 802010e:	b082      	sub	sp, #8
 8020110:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8020112:	2300      	movs	r3, #0
 8020114:	607b      	str	r3, [r7, #4]
 8020116:	e00c      	b.n	8020132 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8020118:	687a      	ldr	r2, [r7, #4]
 802011a:	4613      	mov	r3, r2
 802011c:	009b      	lsls	r3, r3, #2
 802011e:	4413      	add	r3, r2
 8020120:	009b      	lsls	r3, r3, #2
 8020122:	4a12      	ldr	r2, [pc, #72]	; (802016c <prvInitialiseTaskLists+0x60>)
 8020124:	4413      	add	r3, r2
 8020126:	4618      	mov	r0, r3
 8020128:	f7fe fdea 	bl	801ed00 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 802012c:	687b      	ldr	r3, [r7, #4]
 802012e:	3301      	adds	r3, #1
 8020130:	607b      	str	r3, [r7, #4]
 8020132:	687b      	ldr	r3, [r7, #4]
 8020134:	2b37      	cmp	r3, #55	; 0x37
 8020136:	d9ef      	bls.n	8020118 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8020138:	480d      	ldr	r0, [pc, #52]	; (8020170 <prvInitialiseTaskLists+0x64>)
 802013a:	f7fe fde1 	bl	801ed00 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 802013e:	480d      	ldr	r0, [pc, #52]	; (8020174 <prvInitialiseTaskLists+0x68>)
 8020140:	f7fe fdde 	bl	801ed00 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8020144:	480c      	ldr	r0, [pc, #48]	; (8020178 <prvInitialiseTaskLists+0x6c>)
 8020146:	f7fe fddb 	bl	801ed00 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 802014a:	480c      	ldr	r0, [pc, #48]	; (802017c <prvInitialiseTaskLists+0x70>)
 802014c:	f7fe fdd8 	bl	801ed00 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8020150:	480b      	ldr	r0, [pc, #44]	; (8020180 <prvInitialiseTaskLists+0x74>)
 8020152:	f7fe fdd5 	bl	801ed00 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8020156:	4b0b      	ldr	r3, [pc, #44]	; (8020184 <prvInitialiseTaskLists+0x78>)
 8020158:	4a05      	ldr	r2, [pc, #20]	; (8020170 <prvInitialiseTaskLists+0x64>)
 802015a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 802015c:	4b0a      	ldr	r3, [pc, #40]	; (8020188 <prvInitialiseTaskLists+0x7c>)
 802015e:	4a05      	ldr	r2, [pc, #20]	; (8020174 <prvInitialiseTaskLists+0x68>)
 8020160:	601a      	str	r2, [r3, #0]
}
 8020162:	bf00      	nop
 8020164:	3708      	adds	r7, #8
 8020166:	46bd      	mov	sp, r7
 8020168:	bd80      	pop	{r7, pc}
 802016a:	bf00      	nop
 802016c:	200016f0 	.word	0x200016f0
 8020170:	20001b50 	.word	0x20001b50
 8020174:	20001b64 	.word	0x20001b64
 8020178:	20001b80 	.word	0x20001b80
 802017c:	20001b94 	.word	0x20001b94
 8020180:	20001bac 	.word	0x20001bac
 8020184:	20001b78 	.word	0x20001b78
 8020188:	20001b7c 	.word	0x20001b7c

0802018c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 802018c:	b580      	push	{r7, lr}
 802018e:	b082      	sub	sp, #8
 8020190:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8020192:	e019      	b.n	80201c8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8020194:	f000 fc9e 	bl	8020ad4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8020198:	4b10      	ldr	r3, [pc, #64]	; (80201dc <prvCheckTasksWaitingTermination+0x50>)
 802019a:	68db      	ldr	r3, [r3, #12]
 802019c:	68db      	ldr	r3, [r3, #12]
 802019e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80201a0:	687b      	ldr	r3, [r7, #4]
 80201a2:	3304      	adds	r3, #4
 80201a4:	4618      	mov	r0, r3
 80201a6:	f7fe fe35 	bl	801ee14 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80201aa:	4b0d      	ldr	r3, [pc, #52]	; (80201e0 <prvCheckTasksWaitingTermination+0x54>)
 80201ac:	681b      	ldr	r3, [r3, #0]
 80201ae:	3b01      	subs	r3, #1
 80201b0:	4a0b      	ldr	r2, [pc, #44]	; (80201e0 <prvCheckTasksWaitingTermination+0x54>)
 80201b2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80201b4:	4b0b      	ldr	r3, [pc, #44]	; (80201e4 <prvCheckTasksWaitingTermination+0x58>)
 80201b6:	681b      	ldr	r3, [r3, #0]
 80201b8:	3b01      	subs	r3, #1
 80201ba:	4a0a      	ldr	r2, [pc, #40]	; (80201e4 <prvCheckTasksWaitingTermination+0x58>)
 80201bc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80201be:	f000 fc9b 	bl	8020af8 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80201c2:	6878      	ldr	r0, [r7, #4]
 80201c4:	f000 f810 	bl	80201e8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80201c8:	4b06      	ldr	r3, [pc, #24]	; (80201e4 <prvCheckTasksWaitingTermination+0x58>)
 80201ca:	681b      	ldr	r3, [r3, #0]
 80201cc:	2b00      	cmp	r3, #0
 80201ce:	d1e1      	bne.n	8020194 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80201d0:	bf00      	nop
 80201d2:	bf00      	nop
 80201d4:	3708      	adds	r7, #8
 80201d6:	46bd      	mov	sp, r7
 80201d8:	bd80      	pop	{r7, pc}
 80201da:	bf00      	nop
 80201dc:	20001b94 	.word	0x20001b94
 80201e0:	20001bc0 	.word	0x20001bc0
 80201e4:	20001ba8 	.word	0x20001ba8

080201e8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80201e8:	b580      	push	{r7, lr}
 80201ea:	b082      	sub	sp, #8
 80201ec:	af00      	add	r7, sp, #0
 80201ee:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80201f0:	687b      	ldr	r3, [r7, #4]
 80201f2:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80201f6:	2b00      	cmp	r3, #0
 80201f8:	d108      	bne.n	802020c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80201fa:	687b      	ldr	r3, [r7, #4]
 80201fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80201fe:	4618      	mov	r0, r3
 8020200:	f000 feae 	bl	8020f60 <vPortFree>
				vPortFree( pxTCB );
 8020204:	6878      	ldr	r0, [r7, #4]
 8020206:	f000 feab 	bl	8020f60 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 802020a:	e010      	b.n	802022e <prvDeleteTCB+0x46>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 802020c:	687b      	ldr	r3, [r7, #4]
 802020e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8020212:	2b01      	cmp	r3, #1
 8020214:	d103      	bne.n	802021e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8020216:	6878      	ldr	r0, [r7, #4]
 8020218:	f000 fea2 	bl	8020f60 <vPortFree>
	}
 802021c:	e007      	b.n	802022e <prvDeleteTCB+0x46>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 802021e:	687b      	ldr	r3, [r7, #4]
 8020220:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8020224:	2b02      	cmp	r3, #2
 8020226:	d002      	beq.n	802022e <prvDeleteTCB+0x46>
 8020228:	f000 fd86 	bl	8020d38 <ulSetInterruptMask>
 802022c:	e7fe      	b.n	802022c <prvDeleteTCB+0x44>
	}
 802022e:	bf00      	nop
 8020230:	3708      	adds	r7, #8
 8020232:	46bd      	mov	sp, r7
 8020234:	bd80      	pop	{r7, pc}
	...

08020238 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8020238:	b480      	push	{r7}
 802023a:	b083      	sub	sp, #12
 802023c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 802023e:	4b0c      	ldr	r3, [pc, #48]	; (8020270 <prvResetNextTaskUnblockTime+0x38>)
 8020240:	681b      	ldr	r3, [r3, #0]
 8020242:	681b      	ldr	r3, [r3, #0]
 8020244:	2b00      	cmp	r3, #0
 8020246:	d104      	bne.n	8020252 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8020248:	4b0a      	ldr	r3, [pc, #40]	; (8020274 <prvResetNextTaskUnblockTime+0x3c>)
 802024a:	f04f 32ff 	mov.w	r2, #4294967295
 802024e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8020250:	e008      	b.n	8020264 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8020252:	4b07      	ldr	r3, [pc, #28]	; (8020270 <prvResetNextTaskUnblockTime+0x38>)
 8020254:	681b      	ldr	r3, [r3, #0]
 8020256:	68db      	ldr	r3, [r3, #12]
 8020258:	68db      	ldr	r3, [r3, #12]
 802025a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 802025c:	687b      	ldr	r3, [r7, #4]
 802025e:	685b      	ldr	r3, [r3, #4]
 8020260:	4a04      	ldr	r2, [pc, #16]	; (8020274 <prvResetNextTaskUnblockTime+0x3c>)
 8020262:	6013      	str	r3, [r2, #0]
}
 8020264:	bf00      	nop
 8020266:	370c      	adds	r7, #12
 8020268:	46bd      	mov	sp, r7
 802026a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802026e:	4770      	bx	lr
 8020270:	20001b78 	.word	0x20001b78
 8020274:	20001be0 	.word	0x20001be0

08020278 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8020278:	b480      	push	{r7}
 802027a:	b083      	sub	sp, #12
 802027c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 802027e:	4b0b      	ldr	r3, [pc, #44]	; (80202ac <xTaskGetSchedulerState+0x34>)
 8020280:	681b      	ldr	r3, [r3, #0]
 8020282:	2b00      	cmp	r3, #0
 8020284:	d102      	bne.n	802028c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8020286:	2301      	movs	r3, #1
 8020288:	607b      	str	r3, [r7, #4]
 802028a:	e008      	b.n	802029e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 802028c:	4b08      	ldr	r3, [pc, #32]	; (80202b0 <xTaskGetSchedulerState+0x38>)
 802028e:	681b      	ldr	r3, [r3, #0]
 8020290:	2b00      	cmp	r3, #0
 8020292:	d102      	bne.n	802029a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8020294:	2302      	movs	r3, #2
 8020296:	607b      	str	r3, [r7, #4]
 8020298:	e001      	b.n	802029e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 802029a:	2300      	movs	r3, #0
 802029c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 802029e:	687b      	ldr	r3, [r7, #4]
	}
 80202a0:	4618      	mov	r0, r3
 80202a2:	370c      	adds	r7, #12
 80202a4:	46bd      	mov	sp, r7
 80202a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80202aa:	4770      	bx	lr
 80202ac:	20001bcc 	.word	0x20001bcc
 80202b0:	20001be8 	.word	0x20001be8

080202b4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80202b4:	b580      	push	{r7, lr}
 80202b6:	b084      	sub	sp, #16
 80202b8:	af00      	add	r7, sp, #0
 80202ba:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80202bc:	687b      	ldr	r3, [r7, #4]
 80202be:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80202c0:	2300      	movs	r3, #0
 80202c2:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
 80202c4:	687b      	ldr	r3, [r7, #4]
 80202c6:	2b00      	cmp	r3, #0
 80202c8:	d046      	beq.n	8020358 <xTaskPriorityDisinherit+0xa4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80202ca:	4b26      	ldr	r3, [pc, #152]	; (8020364 <xTaskPriorityDisinherit+0xb0>)
 80202cc:	681b      	ldr	r3, [r3, #0]
 80202ce:	68ba      	ldr	r2, [r7, #8]
 80202d0:	429a      	cmp	r2, r3
 80202d2:	d002      	beq.n	80202da <xTaskPriorityDisinherit+0x26>
 80202d4:	f000 fd30 	bl	8020d38 <ulSetInterruptMask>
 80202d8:	e7fe      	b.n	80202d8 <xTaskPriorityDisinherit+0x24>
			configASSERT( pxTCB->uxMutexesHeld );
 80202da:	68bb      	ldr	r3, [r7, #8]
 80202dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80202de:	2b00      	cmp	r3, #0
 80202e0:	d102      	bne.n	80202e8 <xTaskPriorityDisinherit+0x34>
 80202e2:	f000 fd29 	bl	8020d38 <ulSetInterruptMask>
 80202e6:	e7fe      	b.n	80202e6 <xTaskPriorityDisinherit+0x32>
			( pxTCB->uxMutexesHeld )--;
 80202e8:	68bb      	ldr	r3, [r7, #8]
 80202ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80202ec:	1e5a      	subs	r2, r3, #1
 80202ee:	68bb      	ldr	r3, [r7, #8]
 80202f0:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80202f2:	68bb      	ldr	r3, [r7, #8]
 80202f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80202f6:	68bb      	ldr	r3, [r7, #8]
 80202f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80202fa:	429a      	cmp	r2, r3
 80202fc:	d02c      	beq.n	8020358 <xTaskPriorityDisinherit+0xa4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80202fe:	68bb      	ldr	r3, [r7, #8]
 8020300:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8020302:	2b00      	cmp	r3, #0
 8020304:	d128      	bne.n	8020358 <xTaskPriorityDisinherit+0xa4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8020306:	68bb      	ldr	r3, [r7, #8]
 8020308:	3304      	adds	r3, #4
 802030a:	4618      	mov	r0, r3
 802030c:	f7fe fd82 	bl	801ee14 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8020310:	68bb      	ldr	r3, [r7, #8]
 8020312:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8020314:	68bb      	ldr	r3, [r7, #8]
 8020316:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8020318:	68bb      	ldr	r3, [r7, #8]
 802031a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802031c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8020320:	68bb      	ldr	r3, [r7, #8]
 8020322:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8020324:	68bb      	ldr	r3, [r7, #8]
 8020326:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8020328:	4b0f      	ldr	r3, [pc, #60]	; (8020368 <xTaskPriorityDisinherit+0xb4>)
 802032a:	681b      	ldr	r3, [r3, #0]
 802032c:	429a      	cmp	r2, r3
 802032e:	d903      	bls.n	8020338 <xTaskPriorityDisinherit+0x84>
 8020330:	68bb      	ldr	r3, [r7, #8]
 8020332:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8020334:	4a0c      	ldr	r2, [pc, #48]	; (8020368 <xTaskPriorityDisinherit+0xb4>)
 8020336:	6013      	str	r3, [r2, #0]
 8020338:	68bb      	ldr	r3, [r7, #8]
 802033a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 802033c:	4613      	mov	r3, r2
 802033e:	009b      	lsls	r3, r3, #2
 8020340:	4413      	add	r3, r2
 8020342:	009b      	lsls	r3, r3, #2
 8020344:	4a09      	ldr	r2, [pc, #36]	; (802036c <xTaskPriorityDisinherit+0xb8>)
 8020346:	441a      	add	r2, r3
 8020348:	68bb      	ldr	r3, [r7, #8]
 802034a:	3304      	adds	r3, #4
 802034c:	4619      	mov	r1, r3
 802034e:	4610      	mov	r0, r2
 8020350:	f7fe fd03 	bl	801ed5a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8020354:	2301      	movs	r3, #1
 8020356:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8020358:	68fb      	ldr	r3, [r7, #12]
	}
 802035a:	4618      	mov	r0, r3
 802035c:	3710      	adds	r7, #16
 802035e:	46bd      	mov	sp, r7
 8020360:	bd80      	pop	{r7, pc}
 8020362:	bf00      	nop
 8020364:	200016ec 	.word	0x200016ec
 8020368:	20001bc8 	.word	0x20001bc8
 802036c:	200016f0 	.word	0x200016f0

08020370 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8020370:	b580      	push	{r7, lr}
 8020372:	b084      	sub	sp, #16
 8020374:	af00      	add	r7, sp, #0
 8020376:	6078      	str	r0, [r7, #4]
 8020378:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 802037a:	4b21      	ldr	r3, [pc, #132]	; (8020400 <prvAddCurrentTaskToDelayedList+0x90>)
 802037c:	681b      	ldr	r3, [r3, #0]
 802037e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8020380:	4b20      	ldr	r3, [pc, #128]	; (8020404 <prvAddCurrentTaskToDelayedList+0x94>)
 8020382:	681b      	ldr	r3, [r3, #0]
 8020384:	3304      	adds	r3, #4
 8020386:	4618      	mov	r0, r3
 8020388:	f7fe fd44 	bl	801ee14 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 802038c:	687b      	ldr	r3, [r7, #4]
 802038e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8020392:	d10a      	bne.n	80203aa <prvAddCurrentTaskToDelayedList+0x3a>
 8020394:	683b      	ldr	r3, [r7, #0]
 8020396:	2b00      	cmp	r3, #0
 8020398:	d007      	beq.n	80203aa <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 802039a:	4b1a      	ldr	r3, [pc, #104]	; (8020404 <prvAddCurrentTaskToDelayedList+0x94>)
 802039c:	681b      	ldr	r3, [r3, #0]
 802039e:	3304      	adds	r3, #4
 80203a0:	4619      	mov	r1, r3
 80203a2:	4819      	ldr	r0, [pc, #100]	; (8020408 <prvAddCurrentTaskToDelayedList+0x98>)
 80203a4:	f7fe fcd9 	bl	801ed5a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80203a8:	e026      	b.n	80203f8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80203aa:	68fa      	ldr	r2, [r7, #12]
 80203ac:	687b      	ldr	r3, [r7, #4]
 80203ae:	4413      	add	r3, r2
 80203b0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80203b2:	4b14      	ldr	r3, [pc, #80]	; (8020404 <prvAddCurrentTaskToDelayedList+0x94>)
 80203b4:	681b      	ldr	r3, [r3, #0]
 80203b6:	68ba      	ldr	r2, [r7, #8]
 80203b8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80203ba:	68ba      	ldr	r2, [r7, #8]
 80203bc:	68fb      	ldr	r3, [r7, #12]
 80203be:	429a      	cmp	r2, r3
 80203c0:	d209      	bcs.n	80203d6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80203c2:	4b12      	ldr	r3, [pc, #72]	; (802040c <prvAddCurrentTaskToDelayedList+0x9c>)
 80203c4:	681a      	ldr	r2, [r3, #0]
 80203c6:	4b0f      	ldr	r3, [pc, #60]	; (8020404 <prvAddCurrentTaskToDelayedList+0x94>)
 80203c8:	681b      	ldr	r3, [r3, #0]
 80203ca:	3304      	adds	r3, #4
 80203cc:	4619      	mov	r1, r3
 80203ce:	4610      	mov	r0, r2
 80203d0:	f7fe fce7 	bl	801eda2 <vListInsert>
}
 80203d4:	e010      	b.n	80203f8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80203d6:	4b0e      	ldr	r3, [pc, #56]	; (8020410 <prvAddCurrentTaskToDelayedList+0xa0>)
 80203d8:	681a      	ldr	r2, [r3, #0]
 80203da:	4b0a      	ldr	r3, [pc, #40]	; (8020404 <prvAddCurrentTaskToDelayedList+0x94>)
 80203dc:	681b      	ldr	r3, [r3, #0]
 80203de:	3304      	adds	r3, #4
 80203e0:	4619      	mov	r1, r3
 80203e2:	4610      	mov	r0, r2
 80203e4:	f7fe fcdd 	bl	801eda2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80203e8:	4b0a      	ldr	r3, [pc, #40]	; (8020414 <prvAddCurrentTaskToDelayedList+0xa4>)
 80203ea:	681b      	ldr	r3, [r3, #0]
 80203ec:	68ba      	ldr	r2, [r7, #8]
 80203ee:	429a      	cmp	r2, r3
 80203f0:	d202      	bcs.n	80203f8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80203f2:	4a08      	ldr	r2, [pc, #32]	; (8020414 <prvAddCurrentTaskToDelayedList+0xa4>)
 80203f4:	68bb      	ldr	r3, [r7, #8]
 80203f6:	6013      	str	r3, [r2, #0]
}
 80203f8:	bf00      	nop
 80203fa:	3710      	adds	r7, #16
 80203fc:	46bd      	mov	sp, r7
 80203fe:	bd80      	pop	{r7, pc}
 8020400:	20001bc4 	.word	0x20001bc4
 8020404:	200016ec 	.word	0x200016ec
 8020408:	20001bac 	.word	0x20001bac
 802040c:	20001b7c 	.word	0x20001b7c
 8020410:	20001b78 	.word	0x20001b78
 8020414:	20001be0 	.word	0x20001be0

08020418 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8020418:	b580      	push	{r7, lr}
 802041a:	b088      	sub	sp, #32
 802041c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 802041e:	2300      	movs	r3, #0
 8020420:	60fb      	str	r3, [r7, #12]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8020422:	f000 fac7 	bl	80209b4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8020426:	4b18      	ldr	r3, [pc, #96]	; (8020488 <xTimerCreateTimerTask+0x70>)
 8020428:	681b      	ldr	r3, [r3, #0]
 802042a:	2b00      	cmp	r3, #0
 802042c:	d020      	beq.n	8020470 <xTimerCreateTimerTask+0x58>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 802042e:	2300      	movs	r3, #0
 8020430:	60bb      	str	r3, [r7, #8]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8020432:	2300      	movs	r3, #0
 8020434:	607b      	str	r3, [r7, #4]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8020436:	463a      	mov	r2, r7
 8020438:	1d39      	adds	r1, r7, #4
 802043a:	f107 0308 	add.w	r3, r7, #8
 802043e:	4618      	mov	r0, r3
 8020440:	f7fe fc44 	bl	801eccc <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8020444:	6839      	ldr	r1, [r7, #0]
 8020446:	687b      	ldr	r3, [r7, #4]
 8020448:	68ba      	ldr	r2, [r7, #8]
 802044a:	9202      	str	r2, [sp, #8]
 802044c:	9301      	str	r3, [sp, #4]
 802044e:	2302      	movs	r3, #2
 8020450:	9300      	str	r3, [sp, #0]
 8020452:	2300      	movs	r3, #0
 8020454:	460a      	mov	r2, r1
 8020456:	490d      	ldr	r1, [pc, #52]	; (802048c <xTimerCreateTimerTask+0x74>)
 8020458:	480d      	ldr	r0, [pc, #52]	; (8020490 <xTimerCreateTimerTask+0x78>)
 802045a:	f7ff f931 	bl	801f6c0 <xTaskCreateStatic>
 802045e:	4603      	mov	r3, r0
 8020460:	4a0c      	ldr	r2, [pc, #48]	; (8020494 <xTimerCreateTimerTask+0x7c>)
 8020462:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8020464:	4b0b      	ldr	r3, [pc, #44]	; (8020494 <xTimerCreateTimerTask+0x7c>)
 8020466:	681b      	ldr	r3, [r3, #0]
 8020468:	2b00      	cmp	r3, #0
 802046a:	d001      	beq.n	8020470 <xTimerCreateTimerTask+0x58>
			{
				xReturn = pdPASS;
 802046c:	2301      	movs	r3, #1
 802046e:	60fb      	str	r3, [r7, #12]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8020470:	68fb      	ldr	r3, [r7, #12]
 8020472:	2b00      	cmp	r3, #0
 8020474:	d102      	bne.n	802047c <xTimerCreateTimerTask+0x64>
 8020476:	f000 fc5f 	bl	8020d38 <ulSetInterruptMask>
 802047a:	e7fe      	b.n	802047a <xTimerCreateTimerTask+0x62>
	return xReturn;
 802047c:	68fb      	ldr	r3, [r7, #12]
}
 802047e:	4618      	mov	r0, r3
 8020480:	3710      	adds	r7, #16
 8020482:	46bd      	mov	sp, r7
 8020484:	bd80      	pop	{r7, pc}
 8020486:	bf00      	nop
 8020488:	20001c1c 	.word	0x20001c1c
 802048c:	08025edc 	.word	0x08025edc
 8020490:	080205ad 	.word	0x080205ad
 8020494:	20001c20 	.word	0x20001c20

08020498 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8020498:	b580      	push	{r7, lr}
 802049a:	b08a      	sub	sp, #40	; 0x28
 802049c:	af00      	add	r7, sp, #0
 802049e:	60f8      	str	r0, [r7, #12]
 80204a0:	60b9      	str	r1, [r7, #8]
 80204a2:	607a      	str	r2, [r7, #4]
 80204a4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80204a6:	2300      	movs	r3, #0
 80204a8:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80204aa:	68fb      	ldr	r3, [r7, #12]
 80204ac:	2b00      	cmp	r3, #0
 80204ae:	d102      	bne.n	80204b6 <xTimerGenericCommand+0x1e>
 80204b0:	f000 fc42 	bl	8020d38 <ulSetInterruptMask>
 80204b4:	e7fe      	b.n	80204b4 <xTimerGenericCommand+0x1c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80204b6:	4b1a      	ldr	r3, [pc, #104]	; (8020520 <xTimerGenericCommand+0x88>)
 80204b8:	681b      	ldr	r3, [r3, #0]
 80204ba:	2b00      	cmp	r3, #0
 80204bc:	d02a      	beq.n	8020514 <xTimerGenericCommand+0x7c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80204be:	68bb      	ldr	r3, [r7, #8]
 80204c0:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80204c2:	687b      	ldr	r3, [r7, #4]
 80204c4:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80204c6:	68fb      	ldr	r3, [r7, #12]
 80204c8:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80204ca:	68bb      	ldr	r3, [r7, #8]
 80204cc:	2b05      	cmp	r3, #5
 80204ce:	dc18      	bgt.n	8020502 <xTimerGenericCommand+0x6a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80204d0:	f7ff fed2 	bl	8020278 <xTaskGetSchedulerState>
 80204d4:	4603      	mov	r3, r0
 80204d6:	2b02      	cmp	r3, #2
 80204d8:	d109      	bne.n	80204ee <xTimerGenericCommand+0x56>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80204da:	4b11      	ldr	r3, [pc, #68]	; (8020520 <xTimerGenericCommand+0x88>)
 80204dc:	6818      	ldr	r0, [r3, #0]
 80204de:	f107 0114 	add.w	r1, r7, #20
 80204e2:	2300      	movs	r3, #0
 80204e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80204e6:	f7fe fd8a 	bl	801effe <xQueueGenericSend>
 80204ea:	6278      	str	r0, [r7, #36]	; 0x24
 80204ec:	e012      	b.n	8020514 <xTimerGenericCommand+0x7c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80204ee:	4b0c      	ldr	r3, [pc, #48]	; (8020520 <xTimerGenericCommand+0x88>)
 80204f0:	6818      	ldr	r0, [r3, #0]
 80204f2:	f107 0114 	add.w	r1, r7, #20
 80204f6:	2300      	movs	r3, #0
 80204f8:	2200      	movs	r2, #0
 80204fa:	f7fe fd80 	bl	801effe <xQueueGenericSend>
 80204fe:	6278      	str	r0, [r7, #36]	; 0x24
 8020500:	e008      	b.n	8020514 <xTimerGenericCommand+0x7c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8020502:	4b07      	ldr	r3, [pc, #28]	; (8020520 <xTimerGenericCommand+0x88>)
 8020504:	6818      	ldr	r0, [r3, #0]
 8020506:	f107 0114 	add.w	r1, r7, #20
 802050a:	2300      	movs	r3, #0
 802050c:	683a      	ldr	r2, [r7, #0]
 802050e:	f7fe fe3f 	bl	801f190 <xQueueGenericSendFromISR>
 8020512:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8020514:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8020516:	4618      	mov	r0, r3
 8020518:	3728      	adds	r7, #40	; 0x28
 802051a:	46bd      	mov	sp, r7
 802051c:	bd80      	pop	{r7, pc}
 802051e:	bf00      	nop
 8020520:	20001c1c 	.word	0x20001c1c

08020524 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8020524:	b580      	push	{r7, lr}
 8020526:	b086      	sub	sp, #24
 8020528:	af02      	add	r7, sp, #8
 802052a:	6078      	str	r0, [r7, #4]
 802052c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 802052e:	4b1e      	ldr	r3, [pc, #120]	; (80205a8 <prvProcessExpiredTimer+0x84>)
 8020530:	681b      	ldr	r3, [r3, #0]
 8020532:	68db      	ldr	r3, [r3, #12]
 8020534:	68db      	ldr	r3, [r3, #12]
 8020536:	60fb      	str	r3, [r7, #12]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8020538:	68fb      	ldr	r3, [r7, #12]
 802053a:	3304      	adds	r3, #4
 802053c:	4618      	mov	r0, r3
 802053e:	f7fe fc69 	bl	801ee14 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8020542:	68fb      	ldr	r3, [r7, #12]
 8020544:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8020548:	f003 0304 	and.w	r3, r3, #4
 802054c:	2b00      	cmp	r3, #0
 802054e:	d01a      	beq.n	8020586 <prvProcessExpiredTimer+0x62>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8020550:	68fb      	ldr	r3, [r7, #12]
 8020552:	699a      	ldr	r2, [r3, #24]
 8020554:	687b      	ldr	r3, [r7, #4]
 8020556:	18d1      	adds	r1, r2, r3
 8020558:	687b      	ldr	r3, [r7, #4]
 802055a:	683a      	ldr	r2, [r7, #0]
 802055c:	68f8      	ldr	r0, [r7, #12]
 802055e:	f000 f8c1 	bl	80206e4 <prvInsertTimerInActiveList>
 8020562:	4603      	mov	r3, r0
 8020564:	2b00      	cmp	r3, #0
 8020566:	d017      	beq.n	8020598 <prvProcessExpiredTimer+0x74>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8020568:	2300      	movs	r3, #0
 802056a:	9300      	str	r3, [sp, #0]
 802056c:	2300      	movs	r3, #0
 802056e:	687a      	ldr	r2, [r7, #4]
 8020570:	2100      	movs	r1, #0
 8020572:	68f8      	ldr	r0, [r7, #12]
 8020574:	f7ff ff90 	bl	8020498 <xTimerGenericCommand>
 8020578:	60b8      	str	r0, [r7, #8]
			configASSERT( xResult );
 802057a:	68bb      	ldr	r3, [r7, #8]
 802057c:	2b00      	cmp	r3, #0
 802057e:	d10b      	bne.n	8020598 <prvProcessExpiredTimer+0x74>
 8020580:	f000 fbda 	bl	8020d38 <ulSetInterruptMask>
 8020584:	e7fe      	b.n	8020584 <prvProcessExpiredTimer+0x60>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8020586:	68fb      	ldr	r3, [r7, #12]
 8020588:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 802058c:	f023 0301 	bic.w	r3, r3, #1
 8020590:	b2da      	uxtb	r2, r3
 8020592:	68fb      	ldr	r3, [r7, #12]
 8020594:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8020598:	68fb      	ldr	r3, [r7, #12]
 802059a:	6a1b      	ldr	r3, [r3, #32]
 802059c:	68f8      	ldr	r0, [r7, #12]
 802059e:	4798      	blx	r3
}
 80205a0:	bf00      	nop
 80205a2:	3710      	adds	r7, #16
 80205a4:	46bd      	mov	sp, r7
 80205a6:	bd80      	pop	{r7, pc}
 80205a8:	20001c14 	.word	0x20001c14

080205ac <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80205ac:	b580      	push	{r7, lr}
 80205ae:	b084      	sub	sp, #16
 80205b0:	af00      	add	r7, sp, #0
 80205b2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80205b4:	f107 0308 	add.w	r3, r7, #8
 80205b8:	4618      	mov	r0, r3
 80205ba:	f000 f84f 	bl	802065c <prvGetNextExpireTime>
 80205be:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80205c0:	68bb      	ldr	r3, [r7, #8]
 80205c2:	4619      	mov	r1, r3
 80205c4:	68f8      	ldr	r0, [r7, #12]
 80205c6:	f000 f803 	bl	80205d0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80205ca:	f000 f8cd 	bl	8020768 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80205ce:	e7f1      	b.n	80205b4 <prvTimerTask+0x8>

080205d0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80205d0:	b580      	push	{r7, lr}
 80205d2:	b084      	sub	sp, #16
 80205d4:	af00      	add	r7, sp, #0
 80205d6:	6078      	str	r0, [r7, #4]
 80205d8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80205da:	f7ff fac5 	bl	801fb68 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80205de:	f107 0308 	add.w	r3, r7, #8
 80205e2:	4618      	mov	r0, r3
 80205e4:	f000 f85e 	bl	80206a4 <prvSampleTimeNow>
 80205e8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80205ea:	68bb      	ldr	r3, [r7, #8]
 80205ec:	2b00      	cmp	r3, #0
 80205ee:	d12a      	bne.n	8020646 <prvProcessTimerOrBlockTask+0x76>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80205f0:	683b      	ldr	r3, [r7, #0]
 80205f2:	2b00      	cmp	r3, #0
 80205f4:	d10a      	bne.n	802060c <prvProcessTimerOrBlockTask+0x3c>
 80205f6:	687a      	ldr	r2, [r7, #4]
 80205f8:	68fb      	ldr	r3, [r7, #12]
 80205fa:	429a      	cmp	r2, r3
 80205fc:	d806      	bhi.n	802060c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80205fe:	f7ff fac1 	bl	801fb84 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8020602:	68f9      	ldr	r1, [r7, #12]
 8020604:	6878      	ldr	r0, [r7, #4]
 8020606:	f7ff ff8d 	bl	8020524 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 802060a:	e01e      	b.n	802064a <prvProcessTimerOrBlockTask+0x7a>
				if( xListWasEmpty != pdFALSE )
 802060c:	683b      	ldr	r3, [r7, #0]
 802060e:	2b00      	cmp	r3, #0
 8020610:	d008      	beq.n	8020624 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8020612:	4b10      	ldr	r3, [pc, #64]	; (8020654 <prvProcessTimerOrBlockTask+0x84>)
 8020614:	681b      	ldr	r3, [r3, #0]
 8020616:	681b      	ldr	r3, [r3, #0]
 8020618:	2b00      	cmp	r3, #0
 802061a:	d101      	bne.n	8020620 <prvProcessTimerOrBlockTask+0x50>
 802061c:	2301      	movs	r3, #1
 802061e:	e000      	b.n	8020622 <prvProcessTimerOrBlockTask+0x52>
 8020620:	2300      	movs	r3, #0
 8020622:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8020624:	4b0c      	ldr	r3, [pc, #48]	; (8020658 <prvProcessTimerOrBlockTask+0x88>)
 8020626:	6818      	ldr	r0, [r3, #0]
 8020628:	687a      	ldr	r2, [r7, #4]
 802062a:	68fb      	ldr	r3, [r7, #12]
 802062c:	1ad3      	subs	r3, r2, r3
 802062e:	683a      	ldr	r2, [r7, #0]
 8020630:	4619      	mov	r1, r3
 8020632:	f7ff f811 	bl	801f658 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8020636:	f7ff faa5 	bl	801fb84 <xTaskResumeAll>
 802063a:	4603      	mov	r3, r0
 802063c:	2b00      	cmp	r3, #0
 802063e:	d104      	bne.n	802064a <prvProcessTimerOrBlockTask+0x7a>
					portYIELD_WITHIN_API();
 8020640:	f000 fa36 	bl	8020ab0 <vPortYield>
}
 8020644:	e001      	b.n	802064a <prvProcessTimerOrBlockTask+0x7a>
			( void ) xTaskResumeAll();
 8020646:	f7ff fa9d 	bl	801fb84 <xTaskResumeAll>
}
 802064a:	bf00      	nop
 802064c:	3710      	adds	r7, #16
 802064e:	46bd      	mov	sp, r7
 8020650:	bd80      	pop	{r7, pc}
 8020652:	bf00      	nop
 8020654:	20001c18 	.word	0x20001c18
 8020658:	20001c1c 	.word	0x20001c1c

0802065c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 802065c:	b480      	push	{r7}
 802065e:	b085      	sub	sp, #20
 8020660:	af00      	add	r7, sp, #0
 8020662:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8020664:	4b0e      	ldr	r3, [pc, #56]	; (80206a0 <prvGetNextExpireTime+0x44>)
 8020666:	681b      	ldr	r3, [r3, #0]
 8020668:	681b      	ldr	r3, [r3, #0]
 802066a:	2b00      	cmp	r3, #0
 802066c:	d101      	bne.n	8020672 <prvGetNextExpireTime+0x16>
 802066e:	2201      	movs	r2, #1
 8020670:	e000      	b.n	8020674 <prvGetNextExpireTime+0x18>
 8020672:	2200      	movs	r2, #0
 8020674:	687b      	ldr	r3, [r7, #4]
 8020676:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8020678:	687b      	ldr	r3, [r7, #4]
 802067a:	681b      	ldr	r3, [r3, #0]
 802067c:	2b00      	cmp	r3, #0
 802067e:	d105      	bne.n	802068c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8020680:	4b07      	ldr	r3, [pc, #28]	; (80206a0 <prvGetNextExpireTime+0x44>)
 8020682:	681b      	ldr	r3, [r3, #0]
 8020684:	68db      	ldr	r3, [r3, #12]
 8020686:	681b      	ldr	r3, [r3, #0]
 8020688:	60fb      	str	r3, [r7, #12]
 802068a:	e001      	b.n	8020690 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 802068c:	2300      	movs	r3, #0
 802068e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8020690:	68fb      	ldr	r3, [r7, #12]
}
 8020692:	4618      	mov	r0, r3
 8020694:	3714      	adds	r7, #20
 8020696:	46bd      	mov	sp, r7
 8020698:	f85d 7b04 	ldr.w	r7, [sp], #4
 802069c:	4770      	bx	lr
 802069e:	bf00      	nop
 80206a0:	20001c14 	.word	0x20001c14

080206a4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80206a4:	b580      	push	{r7, lr}
 80206a6:	b084      	sub	sp, #16
 80206a8:	af00      	add	r7, sp, #0
 80206aa:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80206ac:	f7ff faf8 	bl	801fca0 <xTaskGetTickCount>
 80206b0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80206b2:	4b0b      	ldr	r3, [pc, #44]	; (80206e0 <prvSampleTimeNow+0x3c>)
 80206b4:	681b      	ldr	r3, [r3, #0]
 80206b6:	68fa      	ldr	r2, [r7, #12]
 80206b8:	429a      	cmp	r2, r3
 80206ba:	d205      	bcs.n	80206c8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80206bc:	f000 f91e 	bl	80208fc <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80206c0:	687b      	ldr	r3, [r7, #4]
 80206c2:	2201      	movs	r2, #1
 80206c4:	601a      	str	r2, [r3, #0]
 80206c6:	e002      	b.n	80206ce <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80206c8:	687b      	ldr	r3, [r7, #4]
 80206ca:	2200      	movs	r2, #0
 80206cc:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80206ce:	4a04      	ldr	r2, [pc, #16]	; (80206e0 <prvSampleTimeNow+0x3c>)
 80206d0:	68fb      	ldr	r3, [r7, #12]
 80206d2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80206d4:	68fb      	ldr	r3, [r7, #12]
}
 80206d6:	4618      	mov	r0, r3
 80206d8:	3710      	adds	r7, #16
 80206da:	46bd      	mov	sp, r7
 80206dc:	bd80      	pop	{r7, pc}
 80206de:	bf00      	nop
 80206e0:	20001c24 	.word	0x20001c24

080206e4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80206e4:	b580      	push	{r7, lr}
 80206e6:	b086      	sub	sp, #24
 80206e8:	af00      	add	r7, sp, #0
 80206ea:	60f8      	str	r0, [r7, #12]
 80206ec:	60b9      	str	r1, [r7, #8]
 80206ee:	607a      	str	r2, [r7, #4]
 80206f0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80206f2:	2300      	movs	r3, #0
 80206f4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80206f6:	68fb      	ldr	r3, [r7, #12]
 80206f8:	68ba      	ldr	r2, [r7, #8]
 80206fa:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80206fc:	68fb      	ldr	r3, [r7, #12]
 80206fe:	68fa      	ldr	r2, [r7, #12]
 8020700:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8020702:	68ba      	ldr	r2, [r7, #8]
 8020704:	687b      	ldr	r3, [r7, #4]
 8020706:	429a      	cmp	r2, r3
 8020708:	d812      	bhi.n	8020730 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 802070a:	687a      	ldr	r2, [r7, #4]
 802070c:	683b      	ldr	r3, [r7, #0]
 802070e:	1ad2      	subs	r2, r2, r3
 8020710:	68fb      	ldr	r3, [r7, #12]
 8020712:	699b      	ldr	r3, [r3, #24]
 8020714:	429a      	cmp	r2, r3
 8020716:	d302      	bcc.n	802071e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8020718:	2301      	movs	r3, #1
 802071a:	617b      	str	r3, [r7, #20]
 802071c:	e01b      	b.n	8020756 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 802071e:	4b10      	ldr	r3, [pc, #64]	; (8020760 <prvInsertTimerInActiveList+0x7c>)
 8020720:	681a      	ldr	r2, [r3, #0]
 8020722:	68fb      	ldr	r3, [r7, #12]
 8020724:	3304      	adds	r3, #4
 8020726:	4619      	mov	r1, r3
 8020728:	4610      	mov	r0, r2
 802072a:	f7fe fb3a 	bl	801eda2 <vListInsert>
 802072e:	e012      	b.n	8020756 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8020730:	687a      	ldr	r2, [r7, #4]
 8020732:	683b      	ldr	r3, [r7, #0]
 8020734:	429a      	cmp	r2, r3
 8020736:	d206      	bcs.n	8020746 <prvInsertTimerInActiveList+0x62>
 8020738:	68ba      	ldr	r2, [r7, #8]
 802073a:	683b      	ldr	r3, [r7, #0]
 802073c:	429a      	cmp	r2, r3
 802073e:	d302      	bcc.n	8020746 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8020740:	2301      	movs	r3, #1
 8020742:	617b      	str	r3, [r7, #20]
 8020744:	e007      	b.n	8020756 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8020746:	4b07      	ldr	r3, [pc, #28]	; (8020764 <prvInsertTimerInActiveList+0x80>)
 8020748:	681a      	ldr	r2, [r3, #0]
 802074a:	68fb      	ldr	r3, [r7, #12]
 802074c:	3304      	adds	r3, #4
 802074e:	4619      	mov	r1, r3
 8020750:	4610      	mov	r0, r2
 8020752:	f7fe fb26 	bl	801eda2 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8020756:	697b      	ldr	r3, [r7, #20]
}
 8020758:	4618      	mov	r0, r3
 802075a:	3718      	adds	r7, #24
 802075c:	46bd      	mov	sp, r7
 802075e:	bd80      	pop	{r7, pc}
 8020760:	20001c18 	.word	0x20001c18
 8020764:	20001c14 	.word	0x20001c14

08020768 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8020768:	b580      	push	{r7, lr}
 802076a:	b08c      	sub	sp, #48	; 0x30
 802076c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 802076e:	e0b2      	b.n	80208d6 <prvProcessReceivedCommands+0x16e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8020770:	68bb      	ldr	r3, [r7, #8]
 8020772:	2b00      	cmp	r3, #0
 8020774:	da11      	bge.n	802079a <prvProcessReceivedCommands+0x32>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8020776:	f107 0308 	add.w	r3, r7, #8
 802077a:	3304      	adds	r3, #4
 802077c:	627b      	str	r3, [r7, #36]	; 0x24

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 802077e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8020780:	2b00      	cmp	r3, #0
 8020782:	d102      	bne.n	802078a <prvProcessReceivedCommands+0x22>
 8020784:	f000 fad8 	bl	8020d38 <ulSetInterruptMask>
 8020788:	e7fe      	b.n	8020788 <prvProcessReceivedCommands+0x20>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 802078a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802078c:	681b      	ldr	r3, [r3, #0]
 802078e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8020790:	6850      	ldr	r0, [r2, #4]
 8020792:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8020794:	6892      	ldr	r2, [r2, #8]
 8020796:	4611      	mov	r1, r2
 8020798:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 802079a:	68bb      	ldr	r3, [r7, #8]
 802079c:	2b00      	cmp	r3, #0
 802079e:	f2c0 809a 	blt.w	80208d6 <prvProcessReceivedCommands+0x16e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80207a2:	693b      	ldr	r3, [r7, #16]
 80207a4:	623b      	str	r3, [r7, #32]

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80207a6:	6a3b      	ldr	r3, [r7, #32]
 80207a8:	695b      	ldr	r3, [r3, #20]
 80207aa:	2b00      	cmp	r3, #0
 80207ac:	d004      	beq.n	80207b8 <prvProcessReceivedCommands+0x50>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80207ae:	6a3b      	ldr	r3, [r7, #32]
 80207b0:	3304      	adds	r3, #4
 80207b2:	4618      	mov	r0, r3
 80207b4:	f7fe fb2e 	bl	801ee14 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80207b8:	1d3b      	adds	r3, r7, #4
 80207ba:	4618      	mov	r0, r3
 80207bc:	f7ff ff72 	bl	80206a4 <prvSampleTimeNow>
 80207c0:	61f8      	str	r0, [r7, #28]

			switch( xMessage.xMessageID )
 80207c2:	68bb      	ldr	r3, [r7, #8]
 80207c4:	2b09      	cmp	r3, #9
 80207c6:	f200 8085 	bhi.w	80208d4 <prvProcessReceivedCommands+0x16c>
 80207ca:	a201      	add	r2, pc, #4	; (adr r2, 80207d0 <prvProcessReceivedCommands+0x68>)
 80207cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80207d0:	080207f9 	.word	0x080207f9
 80207d4:	080207f9 	.word	0x080207f9
 80207d8:	080207f9 	.word	0x080207f9
 80207dc:	0802085d 	.word	0x0802085d
 80207e0:	08020871 	.word	0x08020871
 80207e4:	080208ab 	.word	0x080208ab
 80207e8:	080207f9 	.word	0x080207f9
 80207ec:	080207f9 	.word	0x080207f9
 80207f0:	0802085d 	.word	0x0802085d
 80207f4:	08020871 	.word	0x08020871
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80207f8:	6a3b      	ldr	r3, [r7, #32]
 80207fa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80207fe:	f043 0301 	orr.w	r3, r3, #1
 8020802:	b2da      	uxtb	r2, r3
 8020804:	6a3b      	ldr	r3, [r7, #32]
 8020806:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 802080a:	68fa      	ldr	r2, [r7, #12]
 802080c:	6a3b      	ldr	r3, [r7, #32]
 802080e:	699b      	ldr	r3, [r3, #24]
 8020810:	18d1      	adds	r1, r2, r3
 8020812:	68fb      	ldr	r3, [r7, #12]
 8020814:	69fa      	ldr	r2, [r7, #28]
 8020816:	6a38      	ldr	r0, [r7, #32]
 8020818:	f7ff ff64 	bl	80206e4 <prvInsertTimerInActiveList>
 802081c:	4603      	mov	r3, r0
 802081e:	2b00      	cmp	r3, #0
 8020820:	d059      	beq.n	80208d6 <prvProcessReceivedCommands+0x16e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8020822:	6a3b      	ldr	r3, [r7, #32]
 8020824:	6a1b      	ldr	r3, [r3, #32]
 8020826:	6a38      	ldr	r0, [r7, #32]
 8020828:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 802082a:	6a3b      	ldr	r3, [r7, #32]
 802082c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8020830:	f003 0304 	and.w	r3, r3, #4
 8020834:	2b00      	cmp	r3, #0
 8020836:	d04e      	beq.n	80208d6 <prvProcessReceivedCommands+0x16e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8020838:	68fa      	ldr	r2, [r7, #12]
 802083a:	6a3b      	ldr	r3, [r7, #32]
 802083c:	699b      	ldr	r3, [r3, #24]
 802083e:	441a      	add	r2, r3
 8020840:	2300      	movs	r3, #0
 8020842:	9300      	str	r3, [sp, #0]
 8020844:	2300      	movs	r3, #0
 8020846:	2100      	movs	r1, #0
 8020848:	6a38      	ldr	r0, [r7, #32]
 802084a:	f7ff fe25 	bl	8020498 <xTimerGenericCommand>
 802084e:	61b8      	str	r0, [r7, #24]
							configASSERT( xResult );
 8020850:	69bb      	ldr	r3, [r7, #24]
 8020852:	2b00      	cmp	r3, #0
 8020854:	d13f      	bne.n	80208d6 <prvProcessReceivedCommands+0x16e>
 8020856:	f000 fa6f 	bl	8020d38 <ulSetInterruptMask>
 802085a:	e7fe      	b.n	802085a <prvProcessReceivedCommands+0xf2>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 802085c:	6a3b      	ldr	r3, [r7, #32]
 802085e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8020862:	f023 0301 	bic.w	r3, r3, #1
 8020866:	b2da      	uxtb	r2, r3
 8020868:	6a3b      	ldr	r3, [r7, #32]
 802086a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 802086e:	e032      	b.n	80208d6 <prvProcessReceivedCommands+0x16e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8020870:	6a3b      	ldr	r3, [r7, #32]
 8020872:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8020876:	f043 0301 	orr.w	r3, r3, #1
 802087a:	b2da      	uxtb	r2, r3
 802087c:	6a3b      	ldr	r3, [r7, #32]
 802087e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8020882:	68fa      	ldr	r2, [r7, #12]
 8020884:	6a3b      	ldr	r3, [r7, #32]
 8020886:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8020888:	6a3b      	ldr	r3, [r7, #32]
 802088a:	699b      	ldr	r3, [r3, #24]
 802088c:	2b00      	cmp	r3, #0
 802088e:	d102      	bne.n	8020896 <prvProcessReceivedCommands+0x12e>
 8020890:	f000 fa52 	bl	8020d38 <ulSetInterruptMask>
 8020894:	e7fe      	b.n	8020894 <prvProcessReceivedCommands+0x12c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8020896:	6a3b      	ldr	r3, [r7, #32]
 8020898:	699a      	ldr	r2, [r3, #24]
 802089a:	69fb      	ldr	r3, [r7, #28]
 802089c:	18d1      	adds	r1, r2, r3
 802089e:	69fb      	ldr	r3, [r7, #28]
 80208a0:	69fa      	ldr	r2, [r7, #28]
 80208a2:	6a38      	ldr	r0, [r7, #32]
 80208a4:	f7ff ff1e 	bl	80206e4 <prvInsertTimerInActiveList>
					break;
 80208a8:	e015      	b.n	80208d6 <prvProcessReceivedCommands+0x16e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80208aa:	6a3b      	ldr	r3, [r7, #32]
 80208ac:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80208b0:	f003 0302 	and.w	r3, r3, #2
 80208b4:	2b00      	cmp	r3, #0
 80208b6:	d103      	bne.n	80208c0 <prvProcessReceivedCommands+0x158>
						{
							vPortFree( pxTimer );
 80208b8:	6a38      	ldr	r0, [r7, #32]
 80208ba:	f000 fb51 	bl	8020f60 <vPortFree>
 80208be:	e00a      	b.n	80208d6 <prvProcessReceivedCommands+0x16e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80208c0:	6a3b      	ldr	r3, [r7, #32]
 80208c2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80208c6:	f023 0301 	bic.w	r3, r3, #1
 80208ca:	b2da      	uxtb	r2, r3
 80208cc:	6a3b      	ldr	r3, [r7, #32]
 80208ce:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80208d2:	e000      	b.n	80208d6 <prvProcessReceivedCommands+0x16e>

				default	:
					/* Don't expect to get here. */
					break;
 80208d4:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80208d6:	4b08      	ldr	r3, [pc, #32]	; (80208f8 <prvProcessReceivedCommands+0x190>)
 80208d8:	681b      	ldr	r3, [r3, #0]
 80208da:	f107 0108 	add.w	r1, r7, #8
 80208de:	2200      	movs	r2, #0
 80208e0:	4618      	mov	r0, r3
 80208e2:	f7fe fcc6 	bl	801f272 <xQueueReceive>
 80208e6:	4603      	mov	r3, r0
 80208e8:	2b00      	cmp	r3, #0
 80208ea:	f47f af41 	bne.w	8020770 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 80208ee:	bf00      	nop
 80208f0:	bf00      	nop
 80208f2:	3728      	adds	r7, #40	; 0x28
 80208f4:	46bd      	mov	sp, r7
 80208f6:	bd80      	pop	{r7, pc}
 80208f8:	20001c1c 	.word	0x20001c1c

080208fc <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80208fc:	b580      	push	{r7, lr}
 80208fe:	b088      	sub	sp, #32
 8020900:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8020902:	e040      	b.n	8020986 <prvSwitchTimerLists+0x8a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8020904:	4b29      	ldr	r3, [pc, #164]	; (80209ac <prvSwitchTimerLists+0xb0>)
 8020906:	681b      	ldr	r3, [r3, #0]
 8020908:	68db      	ldr	r3, [r3, #12]
 802090a:	681b      	ldr	r3, [r3, #0]
 802090c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 802090e:	4b27      	ldr	r3, [pc, #156]	; (80209ac <prvSwitchTimerLists+0xb0>)
 8020910:	681b      	ldr	r3, [r3, #0]
 8020912:	68db      	ldr	r3, [r3, #12]
 8020914:	68db      	ldr	r3, [r3, #12]
 8020916:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8020918:	68fb      	ldr	r3, [r7, #12]
 802091a:	3304      	adds	r3, #4
 802091c:	4618      	mov	r0, r3
 802091e:	f7fe fa79 	bl	801ee14 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8020922:	68fb      	ldr	r3, [r7, #12]
 8020924:	6a1b      	ldr	r3, [r3, #32]
 8020926:	68f8      	ldr	r0, [r7, #12]
 8020928:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 802092a:	68fb      	ldr	r3, [r7, #12]
 802092c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8020930:	f003 0304 	and.w	r3, r3, #4
 8020934:	2b00      	cmp	r3, #0
 8020936:	d026      	beq.n	8020986 <prvSwitchTimerLists+0x8a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8020938:	68fb      	ldr	r3, [r7, #12]
 802093a:	699b      	ldr	r3, [r3, #24]
 802093c:	693a      	ldr	r2, [r7, #16]
 802093e:	4413      	add	r3, r2
 8020940:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8020942:	68ba      	ldr	r2, [r7, #8]
 8020944:	693b      	ldr	r3, [r7, #16]
 8020946:	429a      	cmp	r2, r3
 8020948:	d90e      	bls.n	8020968 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 802094a:	68fb      	ldr	r3, [r7, #12]
 802094c:	68ba      	ldr	r2, [r7, #8]
 802094e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8020950:	68fb      	ldr	r3, [r7, #12]
 8020952:	68fa      	ldr	r2, [r7, #12]
 8020954:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8020956:	4b15      	ldr	r3, [pc, #84]	; (80209ac <prvSwitchTimerLists+0xb0>)
 8020958:	681a      	ldr	r2, [r3, #0]
 802095a:	68fb      	ldr	r3, [r7, #12]
 802095c:	3304      	adds	r3, #4
 802095e:	4619      	mov	r1, r3
 8020960:	4610      	mov	r0, r2
 8020962:	f7fe fa1e 	bl	801eda2 <vListInsert>
 8020966:	e00e      	b.n	8020986 <prvSwitchTimerLists+0x8a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8020968:	2300      	movs	r3, #0
 802096a:	9300      	str	r3, [sp, #0]
 802096c:	2300      	movs	r3, #0
 802096e:	693a      	ldr	r2, [r7, #16]
 8020970:	2100      	movs	r1, #0
 8020972:	68f8      	ldr	r0, [r7, #12]
 8020974:	f7ff fd90 	bl	8020498 <xTimerGenericCommand>
 8020978:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 802097a:	687b      	ldr	r3, [r7, #4]
 802097c:	2b00      	cmp	r3, #0
 802097e:	d102      	bne.n	8020986 <prvSwitchTimerLists+0x8a>
 8020980:	f000 f9da 	bl	8020d38 <ulSetInterruptMask>
 8020984:	e7fe      	b.n	8020984 <prvSwitchTimerLists+0x88>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8020986:	4b09      	ldr	r3, [pc, #36]	; (80209ac <prvSwitchTimerLists+0xb0>)
 8020988:	681b      	ldr	r3, [r3, #0]
 802098a:	681b      	ldr	r3, [r3, #0]
 802098c:	2b00      	cmp	r3, #0
 802098e:	d1b9      	bne.n	8020904 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8020990:	4b06      	ldr	r3, [pc, #24]	; (80209ac <prvSwitchTimerLists+0xb0>)
 8020992:	681b      	ldr	r3, [r3, #0]
 8020994:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8020996:	4b06      	ldr	r3, [pc, #24]	; (80209b0 <prvSwitchTimerLists+0xb4>)
 8020998:	681b      	ldr	r3, [r3, #0]
 802099a:	4a04      	ldr	r2, [pc, #16]	; (80209ac <prvSwitchTimerLists+0xb0>)
 802099c:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 802099e:	4a04      	ldr	r2, [pc, #16]	; (80209b0 <prvSwitchTimerLists+0xb4>)
 80209a0:	697b      	ldr	r3, [r7, #20]
 80209a2:	6013      	str	r3, [r2, #0]
}
 80209a4:	bf00      	nop
 80209a6:	3718      	adds	r7, #24
 80209a8:	46bd      	mov	sp, r7
 80209aa:	bd80      	pop	{r7, pc}
 80209ac:	20001c14 	.word	0x20001c14
 80209b0:	20001c18 	.word	0x20001c18

080209b4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80209b4:	b580      	push	{r7, lr}
 80209b6:	b082      	sub	sp, #8
 80209b8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80209ba:	f000 f88b 	bl	8020ad4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80209be:	4b15      	ldr	r3, [pc, #84]	; (8020a14 <prvCheckForValidListAndQueue+0x60>)
 80209c0:	681b      	ldr	r3, [r3, #0]
 80209c2:	2b00      	cmp	r3, #0
 80209c4:	d120      	bne.n	8020a08 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80209c6:	4814      	ldr	r0, [pc, #80]	; (8020a18 <prvCheckForValidListAndQueue+0x64>)
 80209c8:	f7fe f99a 	bl	801ed00 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80209cc:	4813      	ldr	r0, [pc, #76]	; (8020a1c <prvCheckForValidListAndQueue+0x68>)
 80209ce:	f7fe f997 	bl	801ed00 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80209d2:	4b13      	ldr	r3, [pc, #76]	; (8020a20 <prvCheckForValidListAndQueue+0x6c>)
 80209d4:	4a10      	ldr	r2, [pc, #64]	; (8020a18 <prvCheckForValidListAndQueue+0x64>)
 80209d6:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80209d8:	4b12      	ldr	r3, [pc, #72]	; (8020a24 <prvCheckForValidListAndQueue+0x70>)
 80209da:	4a10      	ldr	r2, [pc, #64]	; (8020a1c <prvCheckForValidListAndQueue+0x68>)
 80209dc:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80209de:	2300      	movs	r3, #0
 80209e0:	9300      	str	r3, [sp, #0]
 80209e2:	4b11      	ldr	r3, [pc, #68]	; (8020a28 <prvCheckForValidListAndQueue+0x74>)
 80209e4:	4a11      	ldr	r2, [pc, #68]	; (8020a2c <prvCheckForValidListAndQueue+0x78>)
 80209e6:	2110      	movs	r1, #16
 80209e8:	200a      	movs	r0, #10
 80209ea:	f7fe fa95 	bl	801ef18 <xQueueGenericCreateStatic>
 80209ee:	4603      	mov	r3, r0
 80209f0:	4a08      	ldr	r2, [pc, #32]	; (8020a14 <prvCheckForValidListAndQueue+0x60>)
 80209f2:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80209f4:	4b07      	ldr	r3, [pc, #28]	; (8020a14 <prvCheckForValidListAndQueue+0x60>)
 80209f6:	681b      	ldr	r3, [r3, #0]
 80209f8:	2b00      	cmp	r3, #0
 80209fa:	d005      	beq.n	8020a08 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80209fc:	4b05      	ldr	r3, [pc, #20]	; (8020a14 <prvCheckForValidListAndQueue+0x60>)
 80209fe:	681b      	ldr	r3, [r3, #0]
 8020a00:	490b      	ldr	r1, [pc, #44]	; (8020a30 <prvCheckForValidListAndQueue+0x7c>)
 8020a02:	4618      	mov	r0, r3
 8020a04:	f7fe fdfe 	bl	801f604 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8020a08:	f000 f876 	bl	8020af8 <vPortExitCritical>
}
 8020a0c:	bf00      	nop
 8020a0e:	46bd      	mov	sp, r7
 8020a10:	bd80      	pop	{r7, pc}
 8020a12:	bf00      	nop
 8020a14:	20001c1c 	.word	0x20001c1c
 8020a18:	20001bec 	.word	0x20001bec
 8020a1c:	20001c00 	.word	0x20001c00
 8020a20:	20001c14 	.word	0x20001c14
 8020a24:	20001c18 	.word	0x20001c18
 8020a28:	20001cc8 	.word	0x20001cc8
 8020a2c:	20001c28 	.word	0x20001c28
 8020a30:	08025ee4 	.word	0x08025ee4

08020a34 <vPortSetupTimerInterrupt>:
	}
#endif /* configUSE_TICKLESS_IDLE */
/*-----------------------------------------------------------*/

__attribute__(( weak )) void vPortSetupTimerInterrupt( void ) /* PRIVILEGED_FUNCTION */
{
 8020a34:	b480      	push	{r7}
 8020a36:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and reset the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8020a38:	4b0b      	ldr	r3, [pc, #44]	; (8020a68 <vPortSetupTimerInterrupt+0x34>)
 8020a3a:	2200      	movs	r2, #0
 8020a3c:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8020a3e:	4b0b      	ldr	r3, [pc, #44]	; (8020a6c <vPortSetupTimerInterrupt+0x38>)
 8020a40:	2200      	movs	r2, #0
 8020a42:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8020a44:	4b0a      	ldr	r3, [pc, #40]	; (8020a70 <vPortSetupTimerInterrupt+0x3c>)
 8020a46:	681b      	ldr	r3, [r3, #0]
 8020a48:	4a0a      	ldr	r2, [pc, #40]	; (8020a74 <vPortSetupTimerInterrupt+0x40>)
 8020a4a:	fba2 2303 	umull	r2, r3, r2, r3
 8020a4e:	099b      	lsrs	r3, r3, #6
 8020a50:	4a09      	ldr	r2, [pc, #36]	; (8020a78 <vPortSetupTimerInterrupt+0x44>)
 8020a52:	3b01      	subs	r3, #1
 8020a54:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT;
 8020a56:	4b04      	ldr	r3, [pc, #16]	; (8020a68 <vPortSetupTimerInterrupt+0x34>)
 8020a58:	2207      	movs	r2, #7
 8020a5a:	601a      	str	r2, [r3, #0]
}
 8020a5c:	bf00      	nop
 8020a5e:	46bd      	mov	sp, r7
 8020a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020a64:	4770      	bx	lr
 8020a66:	bf00      	nop
 8020a68:	e000e010 	.word	0xe000e010
 8020a6c:	e000e018 	.word	0xe000e018
 8020a70:	20000090 	.word	0x20000090
 8020a74:	10624dd3 	.word	0x10624dd3
 8020a78:	e000e014 	.word	0xe000e014

08020a7c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8020a7c:	b580      	push	{r7, lr}
 8020a7e:	b082      	sub	sp, #8
 8020a80:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8020a82:	2300      	movs	r3, #0
 8020a84:	607b      	str	r3, [r7, #4]
	/* A function that implements a task must not exit or attempt to return to
	 * its caller as there is nothing to return to. If a task wants to exit it
	 * should instead call vTaskDelete( NULL ). Artificially force an assert()
	 * to be triggered if configASSERT() is defined, then stop here so
	 * application writers can catch the error. */
	configASSERT( ulCriticalNesting == ~0UL );
 8020a86:	4b09      	ldr	r3, [pc, #36]	; (8020aac <prvTaskExitError+0x30>)
 8020a88:	681b      	ldr	r3, [r3, #0]
 8020a8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8020a8e:	d002      	beq.n	8020a96 <prvTaskExitError+0x1a>
 8020a90:	f000 f952 	bl	8020d38 <ulSetInterruptMask>
 8020a94:	e7fe      	b.n	8020a94 <prvTaskExitError+0x18>
	portDISABLE_INTERRUPTS();
 8020a96:	f000 f94f 	bl	8020d38 <ulSetInterruptMask>

	while( ulDummy == 0 )
 8020a9a:	bf00      	nop
 8020a9c:	687b      	ldr	r3, [r7, #4]
 8020a9e:	2b00      	cmp	r3, #0
 8020aa0:	d0fc      	beq.n	8020a9c <prvTaskExitError+0x20>
		 * warnings about code appearing after this function is called - making
		 * ulDummy volatile makes the compiler think the function could return
		 * and therefore not output an 'unreachable code' warning for code that
		 * appears after it. */
	}
}
 8020aa2:	bf00      	nop
 8020aa4:	bf00      	nop
 8020aa6:	3708      	adds	r7, #8
 8020aa8:	46bd      	mov	sp, r7
 8020aaa:	bd80      	pop	{r7, pc}
 8020aac:	2000009c 	.word	0x2000009c

08020ab0 <vPortYield>:
	}
#endif /* configENABLE_FPU */
/*-----------------------------------------------------------*/

void vPortYield( void ) /* PRIVILEGED_FUNCTION */
{
 8020ab0:	b480      	push	{r7}
 8020ab2:	af00      	add	r7, sp, #0
	/* Set a PendSV to request a context switch. */
	portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8020ab4:	4b06      	ldr	r3, [pc, #24]	; (8020ad0 <vPortYield+0x20>)
 8020ab6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8020aba:	601a      	str	r2, [r3, #0]

	/* Barriers are normally not required but do ensure the code is
	 * completely within the specified behaviour for the architecture. */
	__asm volatile( "dsb" ::: "memory" );
 8020abc:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 8020ac0:	f3bf 8f6f 	isb	sy
}
 8020ac4:	bf00      	nop
 8020ac6:	46bd      	mov	sp, r7
 8020ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020acc:	4770      	bx	lr
 8020ace:	bf00      	nop
 8020ad0:	e000ed04 	.word	0xe000ed04

08020ad4 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void ) /* PRIVILEGED_FUNCTION */
{
 8020ad4:	b580      	push	{r7, lr}
 8020ad6:	af00      	add	r7, sp, #0
	portDISABLE_INTERRUPTS();
 8020ad8:	f000 f92e 	bl	8020d38 <ulSetInterruptMask>
	ulCriticalNesting++;
 8020adc:	4b05      	ldr	r3, [pc, #20]	; (8020af4 <vPortEnterCritical+0x20>)
 8020ade:	681b      	ldr	r3, [r3, #0]
 8020ae0:	3301      	adds	r3, #1
 8020ae2:	4a04      	ldr	r2, [pc, #16]	; (8020af4 <vPortEnterCritical+0x20>)
 8020ae4:	6013      	str	r3, [r2, #0]

	/* Barriers are normally not required but do ensure the code is
	 * completely within the specified behaviour for the architecture. */
	__asm volatile( "dsb" ::: "memory" );
 8020ae6:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 8020aea:	f3bf 8f6f 	isb	sy
}
 8020aee:	bf00      	nop
 8020af0:	bd80      	pop	{r7, pc}
 8020af2:	bf00      	nop
 8020af4:	2000009c 	.word	0x2000009c

08020af8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void ) /* PRIVILEGED_FUNCTION */
{
 8020af8:	b580      	push	{r7, lr}
 8020afa:	af00      	add	r7, sp, #0
	configASSERT( ulCriticalNesting );
 8020afc:	4b0a      	ldr	r3, [pc, #40]	; (8020b28 <vPortExitCritical+0x30>)
 8020afe:	681b      	ldr	r3, [r3, #0]
 8020b00:	2b00      	cmp	r3, #0
 8020b02:	d102      	bne.n	8020b0a <vPortExitCritical+0x12>
 8020b04:	f000 f918 	bl	8020d38 <ulSetInterruptMask>
 8020b08:	e7fe      	b.n	8020b08 <vPortExitCritical+0x10>
	ulCriticalNesting--;
 8020b0a:	4b07      	ldr	r3, [pc, #28]	; (8020b28 <vPortExitCritical+0x30>)
 8020b0c:	681b      	ldr	r3, [r3, #0]
 8020b0e:	3b01      	subs	r3, #1
 8020b10:	4a05      	ldr	r2, [pc, #20]	; (8020b28 <vPortExitCritical+0x30>)
 8020b12:	6013      	str	r3, [r2, #0]

	if( ulCriticalNesting == 0 )
 8020b14:	4b04      	ldr	r3, [pc, #16]	; (8020b28 <vPortExitCritical+0x30>)
 8020b16:	681b      	ldr	r3, [r3, #0]
 8020b18:	2b00      	cmp	r3, #0
 8020b1a:	d102      	bne.n	8020b22 <vPortExitCritical+0x2a>
	{
		portENABLE_INTERRUPTS();
 8020b1c:	2000      	movs	r0, #0
 8020b1e:	f000 f918 	bl	8020d52 <vClearInterruptMask>
	}
}
 8020b22:	bf00      	nop
 8020b24:	bd80      	pop	{r7, pc}
 8020b26:	bf00      	nop
 8020b28:	2000009c 	.word	0x2000009c

08020b2c <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void SysTick_Handler( void ) /* PRIVILEGED_FUNCTION */
{
 8020b2c:	b580      	push	{r7, lr}
 8020b2e:	b082      	sub	sp, #8
 8020b30:	af00      	add	r7, sp, #0
uint32_t ulPreviousMask;

	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
 8020b32:	f000 f901 	bl	8020d38 <ulSetInterruptMask>
 8020b36:	6078      	str	r0, [r7, #4]
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8020b38:	f7ff f8c2 	bl	801fcc0 <xTaskIncrementTick>
 8020b3c:	4603      	mov	r3, r0
 8020b3e:	2b00      	cmp	r3, #0
 8020b40:	d003      	beq.n	8020b4a <xPortSysTickHandler+0x1e>
		{
			/* Pend a context switch. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8020b42:	4b05      	ldr	r3, [pc, #20]	; (8020b58 <xPortSysTickHandler+0x2c>)
 8020b44:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8020b48:	601a      	str	r2, [r3, #0]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
 8020b4a:	6878      	ldr	r0, [r7, #4]
 8020b4c:	f000 f901 	bl	8020d52 <vClearInterruptMask>
}
 8020b50:	bf00      	nop
 8020b52:	3708      	adds	r7, #8
 8020b54:	46bd      	mov	sp, r7
 8020b56:	bd80      	pop	{r7, pc}
 8020b58:	e000ed04 	.word	0xe000ed04

08020b5c <vPortSVCHandler_C>:
/*-----------------------------------------------------------*/

void vPortSVCHandler_C( uint32_t *pulCallerStackAddress ) /* PRIVILEGED_FUNCTION portDONT_DISCARD */
{
 8020b5c:	b580      	push	{r7, lr}
 8020b5e:	b084      	sub	sp, #16
 8020b60:	af00      	add	r7, sp, #0
 8020b62:	6078      	str	r0, [r7, #4]
#endif /* configENABLE_TRUSTZONE */
uint8_t ucSVCNumber;

	/* Register are stored on the stack in the following order - R0, R1, R2, R3,
	 * R12, LR, PC, xPSR. */
	ulPC = pulCallerStackAddress[ 6 ];
 8020b64:	687b      	ldr	r3, [r7, #4]
 8020b66:	699b      	ldr	r3, [r3, #24]
 8020b68:	60fb      	str	r3, [r7, #12]
	ucSVCNumber = ( ( uint8_t *) ulPC )[ -2 ];
 8020b6a:	68fb      	ldr	r3, [r7, #12]
 8020b6c:	3b02      	subs	r3, #2
 8020b6e:	781b      	ldrb	r3, [r3, #0]
 8020b70:	72fb      	strb	r3, [r7, #11]

	switch( ucSVCNumber )
 8020b72:	7afb      	ldrb	r3, [r7, #11]
 8020b74:	2b02      	cmp	r3, #2
 8020b76:	d102      	bne.n	8020b7e <vPortSVCHandler_C+0x22>
			}
			#endif /* configENABLE_FPU */

			/* Setup the context of the first task so that the first task starts
			 * executing. */
			vRestoreContextOfFirstTask();
 8020b78:	f000 f8b2 	bl	8020ce0 <vRestoreContextOfFirstTask>
		}
		break;
 8020b7c:	e002      	b.n	8020b84 <vPortSVCHandler_C+0x28>
		#endif /* configENABLE_MPU */

		default:
		{
			/* Incorrect SVC call. */
			configASSERT( pdFALSE );
 8020b7e:	f000 f8db 	bl	8020d38 <ulSetInterruptMask>
 8020b82:	e7fe      	b.n	8020b82 <vPortSVCHandler_C+0x26>
		}
	}
}
 8020b84:	bf00      	nop
 8020b86:	3710      	adds	r7, #16
 8020b88:	46bd      	mov	sp, r7
 8020b8a:	bd80      	pop	{r7, pc}

08020b8c <pxPortInitialiseStack>:
#if( configENABLE_MPU == 1 )
	StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, StackType_t *pxEndOfStack, TaskFunction_t pxCode, void *pvParameters, BaseType_t xRunPrivileged ) /* PRIVILEGED_FUNCTION */
#else
	StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, StackType_t *pxEndOfStack, TaskFunction_t pxCode, void *pvParameters ) /* PRIVILEGED_FUNCTION */
#endif /* configENABLE_MPU */
{
 8020b8c:	b480      	push	{r7}
 8020b8e:	b085      	sub	sp, #20
 8020b90:	af00      	add	r7, sp, #0
 8020b92:	60f8      	str	r0, [r7, #12]
 8020b94:	60b9      	str	r1, [r7, #8]
 8020b96:	607a      	str	r2, [r7, #4]
 8020b98:	603b      	str	r3, [r7, #0]
		}
		#endif /* configENABLE_TRUSTZONE */
	}
	#else /* portPRELOAD_REGISTERS */
	{
		pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8020b9a:	68fb      	ldr	r3, [r7, #12]
 8020b9c:	3b04      	subs	r3, #4
 8020b9e:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = portINITIAL_XPSR;							/* xPSR */
 8020ba0:	68fb      	ldr	r3, [r7, #12]
 8020ba2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8020ba6:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 8020ba8:	68fb      	ldr	r3, [r7, #12]
 8020baa:	3b04      	subs	r3, #4
 8020bac:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) pxCode;						/* PC */
 8020bae:	687a      	ldr	r2, [r7, #4]
 8020bb0:	68fb      	ldr	r3, [r7, #12]
 8020bb2:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 8020bb4:	68fb      	ldr	r3, [r7, #12]
 8020bb6:	3b04      	subs	r3, #4
 8020bb8:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8020bba:	4a38      	ldr	r2, [pc, #224]	; (8020c9c <pxPortInitialiseStack+0x110>)
 8020bbc:	68fb      	ldr	r3, [r7, #12]
 8020bbe:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 8020bc0:	68fb      	ldr	r3, [r7, #12]
 8020bc2:	3b04      	subs	r3, #4
 8020bc4:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) 0x12121212UL;				/* R12 */
 8020bc6:	68fb      	ldr	r3, [r7, #12]
 8020bc8:	f04f 3212 	mov.w	r2, #303174162	; 0x12121212
 8020bcc:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 8020bce:	68fb      	ldr	r3, [r7, #12]
 8020bd0:	3b04      	subs	r3, #4
 8020bd2:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) 0x03030303UL;				/* R3 */
 8020bd4:	68fb      	ldr	r3, [r7, #12]
 8020bd6:	f04f 3203 	mov.w	r2, #50529027	; 0x3030303
 8020bda:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 8020bdc:	68fb      	ldr	r3, [r7, #12]
 8020bde:	3b04      	subs	r3, #4
 8020be0:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) 0x02020202UL;				/* R2 */
 8020be2:	68fb      	ldr	r3, [r7, #12]
 8020be4:	f04f 3202 	mov.w	r2, #33686018	; 0x2020202
 8020be8:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 8020bea:	68fb      	ldr	r3, [r7, #12]
 8020bec:	3b04      	subs	r3, #4
 8020bee:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) 0x01010101UL;				/* R1 */
 8020bf0:	68fb      	ldr	r3, [r7, #12]
 8020bf2:	f04f 3201 	mov.w	r2, #16843009	; 0x1010101
 8020bf6:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 8020bf8:	68fb      	ldr	r3, [r7, #12]
 8020bfa:	3b04      	subs	r3, #4
 8020bfc:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) pvParameters;				/* R0 */
 8020bfe:	683a      	ldr	r2, [r7, #0]
 8020c00:	68fb      	ldr	r3, [r7, #12]
 8020c02:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 8020c04:	68fb      	ldr	r3, [r7, #12]
 8020c06:	3b04      	subs	r3, #4
 8020c08:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) 0x11111111UL;				/* R11 */
 8020c0a:	68fb      	ldr	r3, [r7, #12]
 8020c0c:	f04f 3211 	mov.w	r2, #286331153	; 0x11111111
 8020c10:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 8020c12:	68fb      	ldr	r3, [r7, #12]
 8020c14:	3b04      	subs	r3, #4
 8020c16:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) 0x10101010UL;				/* R10 */
 8020c18:	68fb      	ldr	r3, [r7, #12]
 8020c1a:	f04f 3210 	mov.w	r2, #269488144	; 0x10101010
 8020c1e:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 8020c20:	68fb      	ldr	r3, [r7, #12]
 8020c22:	3b04      	subs	r3, #4
 8020c24:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) 0x09090909UL;				/* R09 */
 8020c26:	68fb      	ldr	r3, [r7, #12]
 8020c28:	f04f 3209 	mov.w	r2, #151587081	; 0x9090909
 8020c2c:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 8020c2e:	68fb      	ldr	r3, [r7, #12]
 8020c30:	3b04      	subs	r3, #4
 8020c32:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) 0x08080808UL;				/* R08 */
 8020c34:	68fb      	ldr	r3, [r7, #12]
 8020c36:	f04f 3208 	mov.w	r2, #134744072	; 0x8080808
 8020c3a:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 8020c3c:	68fb      	ldr	r3, [r7, #12]
 8020c3e:	3b04      	subs	r3, #4
 8020c40:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) 0x07070707UL;				/* R07 */
 8020c42:	68fb      	ldr	r3, [r7, #12]
 8020c44:	f04f 3207 	mov.w	r2, #117901063	; 0x7070707
 8020c48:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 8020c4a:	68fb      	ldr	r3, [r7, #12]
 8020c4c:	3b04      	subs	r3, #4
 8020c4e:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) 0x06060606UL;				/* R06 */
 8020c50:	68fb      	ldr	r3, [r7, #12]
 8020c52:	f04f 3206 	mov.w	r2, #101058054	; 0x6060606
 8020c56:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 8020c58:	68fb      	ldr	r3, [r7, #12]
 8020c5a:	3b04      	subs	r3, #4
 8020c5c:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) 0x05050505UL;				/* R05 */
 8020c5e:	68fb      	ldr	r3, [r7, #12]
 8020c60:	f04f 3205 	mov.w	r2, #84215045	; 0x5050505
 8020c64:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 8020c66:	68fb      	ldr	r3, [r7, #12]
 8020c68:	3b04      	subs	r3, #4
 8020c6a:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) 0x04040404UL;				/* R04 */
 8020c6c:	68fb      	ldr	r3, [r7, #12]
 8020c6e:	f04f 3204 	mov.w	r2, #67372036	; 0x4040404
 8020c72:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 8020c74:	68fb      	ldr	r3, [r7, #12]
 8020c76:	3b04      	subs	r3, #4
 8020c78:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = portINITIAL_EXC_RETURN;						/* EXC_RETURN */
 8020c7a:	68fb      	ldr	r3, [r7, #12]
 8020c7c:	f06f 0243 	mvn.w	r2, #67	; 0x43
 8020c80:	601a      	str	r2, [r3, #0]
				*pxTopOfStack = portINITIAL_CONTROL_UNPRIVILEGED;	/* Slot used to hold this task's CONTROL value. */
			}
		}
		#endif /* configENABLE_MPU */

		pxTopOfStack--;
 8020c82:	68fb      	ldr	r3, [r7, #12]
 8020c84:	3b04      	subs	r3, #4
 8020c86:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) pxEndOfStack;	/* Slot used to hold this task's PSPLIM value. */
 8020c88:	68ba      	ldr	r2, [r7, #8]
 8020c8a:	68fb      	ldr	r3, [r7, #12]
 8020c8c:	601a      	str	r2, [r3, #0]
		}
		#endif /* configENABLE_TRUSTZONE */
	}
	#endif /* portPRELOAD_REGISTERS */

	return pxTopOfStack;
 8020c8e:	68fb      	ldr	r3, [r7, #12]
}
 8020c90:	4618      	mov	r0, r3
 8020c92:	3714      	adds	r7, #20
 8020c94:	46bd      	mov	sp, r7
 8020c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020c9a:	4770      	bx	lr
 8020c9c:	08020a7d 	.word	0x08020a7d

08020ca0 <xPortStartScheduler>:
/*-----------------------------------------------------------*/

BaseType_t xPortStartScheduler( void ) /* PRIVILEGED_FUNCTION */
{
 8020ca0:	b580      	push	{r7, lr}
 8020ca2:	af00      	add	r7, sp, #0
	/* Make PendSV, CallSV and SysTick the same priority as the kernel. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8020ca4:	4b0c      	ldr	r3, [pc, #48]	; (8020cd8 <xPortStartScheduler+0x38>)
 8020ca6:	681b      	ldr	r3, [r3, #0]
 8020ca8:	4a0b      	ldr	r2, [pc, #44]	; (8020cd8 <xPortStartScheduler+0x38>)
 8020caa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8020cae:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8020cb0:	4b09      	ldr	r3, [pc, #36]	; (8020cd8 <xPortStartScheduler+0x38>)
 8020cb2:	681b      	ldr	r3, [r3, #0]
 8020cb4:	4a08      	ldr	r2, [pc, #32]	; (8020cd8 <xPortStartScheduler+0x38>)
 8020cb6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8020cba:	6013      	str	r3, [r2, #0]
	}
	#endif /* configENABLE_MPU */

	/* Start the timer that generates the tick ISR. Interrupts are disabled
	 * here already. */
	vPortSetupTimerInterrupt();
 8020cbc:	f7ff feba 	bl	8020a34 <vPortSetupTimerInterrupt>

	/* Initialize the critical nesting count ready for the first task. */
	ulCriticalNesting = 0;
 8020cc0:	4b06      	ldr	r3, [pc, #24]	; (8020cdc <xPortStartScheduler+0x3c>)
 8020cc2:	2200      	movs	r2, #0
 8020cc4:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	vStartFirstTask();
 8020cc6:	f000 f823 	bl	8020d10 <vStartFirstTask>
	 * exit error function to prevent compiler warnings about a static function
	 * not being called in the case that the application writer overrides this
	 * functionality by defining configTASK_RETURN_ADDRESS. Call
	 * vTaskSwitchContext() so link time optimization does not remove the
	 * symbol. */
	vTaskSwitchContext();
 8020cca:	f7ff f8ab 	bl	801fe24 <vTaskSwitchContext>
	prvTaskExitError();
 8020cce:	f7ff fed5 	bl	8020a7c <prvTaskExitError>

	/* Should not get here. */
	return 0;
 8020cd2:	2300      	movs	r3, #0
}
 8020cd4:	4618      	mov	r0, r3
 8020cd6:	bd80      	pop	{r7, pc}
 8020cd8:	e000ed20 	.word	0xe000ed20
 8020cdc:	2000009c 	.word	0x2000009c

08020ce0 <vRestoreContextOfFirstTask>:
 * header files. */
#undef MPU_WRAPPERS_INCLUDED_FROM_API_FILE

void vRestoreContextOfFirstTask( void ) /* __attribute__ (( naked )) PRIVILEGED_FUNCTION */
{
	__asm volatile
 8020ce0:	4a07      	ldr	r2, [pc, #28]	; (8020d00 <pxCurrentTCBConst2>)
 8020ce2:	6811      	ldr	r1, [r2, #0]
 8020ce4:	6808      	ldr	r0, [r1, #0]
 8020ce6:	c806      	ldmia	r0!, {r1, r2}
 8020ce8:	f381 880b 	msr	PSPLIM, r1
 8020cec:	2102      	movs	r1, #2
 8020cee:	f381 8814 	msr	CONTROL, r1
 8020cf2:	3020      	adds	r0, #32
 8020cf4:	f380 8809 	msr	PSP, r0
 8020cf8:	f3bf 8f6f 	isb	sy
 8020cfc:	4710      	bx	r2
 8020cfe:	bf00      	nop

08020d00 <pxCurrentTCBConst2>:
 8020d00:	200016ec 	.word	0x200016ec
	"xMAIR0Const2: .word 0xe000edc0						\n"
	"xRNRConst2: .word 0xe000ed98						\n"
	"xRBARConst2: .word 0xe000ed9c						\n"
	#endif /* configENABLE_MPU */
	);
}
 8020d04:	bf00      	nop
 8020d06:	bf00      	nop
	...

08020d10 <vStartFirstTask>:
}
/*-----------------------------------------------------------*/

void vStartFirstTask( void ) /* __attribute__ (( naked )) PRIVILEGED_FUNCTION */
{
	__asm volatile
 8020d10:	4807      	ldr	r0, [pc, #28]	; (8020d30 <xVTORConst>)
 8020d12:	6800      	ldr	r0, [r0, #0]
 8020d14:	6800      	ldr	r0, [r0, #0]
 8020d16:	f380 8808 	msr	MSP, r0
 8020d1a:	b662      	cpsie	i
 8020d1c:	b661      	cpsie	f
 8020d1e:	f3bf 8f4f 	dsb	sy
 8020d22:	f3bf 8f6f 	isb	sy
 8020d26:	df02      	svc	2
 8020d28:	bf00      	nop
 8020d2a:	bf00      	nop
 8020d2c:	f3af 8000 	nop.w

08020d30 <xVTORConst>:
 8020d30:	e000ed08 	.word	0xe000ed08
	"													\n"
	"   .align 4										\n"
	"xVTORConst: .word 0xe000ed08						\n"
	:: "i" ( portSVC_START_SCHEDULER ) : "memory"
	);
}
 8020d34:	bf00      	nop
 8020d36:	bf00      	nop

08020d38 <ulSetInterruptMask>:
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMask( void ) /* __attribute__(( naked )) PRIVILEGED_FUNCTION */
{
	__asm volatile
 8020d38:	f3ef 8011 	mrs	r0, BASEPRI
 8020d3c:	f04f 01a0 	mov.w	r1, #160	; 0xa0
 8020d40:	f381 8811 	msr	BASEPRI, r1
 8020d44:	f3bf 8f4f 	dsb	sy
 8020d48:	f3bf 8f6f 	isb	sy
 8020d4c:	4770      	bx	lr
	"	dsb												\n"
	"	isb												\n"
	"	bx lr											\n" /* Return. */
	:: "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8020d4e:	bf00      	nop
 8020d50:	4618      	mov	r0, r3

08020d52 <vClearInterruptMask>:
/*-----------------------------------------------------------*/

void vClearInterruptMask( __attribute__( ( unused ) ) uint32_t ulMask ) /* __attribute__(( naked )) PRIVILEGED_FUNCTION */
{
	__asm volatile
 8020d52:	f380 8811 	msr	BASEPRI, r0
 8020d56:	f3bf 8f4f 	dsb	sy
 8020d5a:	f3bf 8f6f 	isb	sy
 8020d5e:	4770      	bx	lr
	"	dsb												\n"
	"	isb												\n"
	"	bx lr											\n" /* Return. */
	::: "memory"
	);
}
 8020d60:	bf00      	nop
	...

08020d70 <PendSV_Handler>:
/*-----------------------------------------------------------*/

void PendSV_Handler( void ) /* __attribute__ (( naked )) PRIVILEGED_FUNCTION */
{
	__asm volatile
 8020d70:	f3ef 8009 	mrs	r0, PSP
 8020d74:	f3ef 820b 	mrs	r2, PSPLIM
 8020d78:	4673      	mov	r3, lr
 8020d7a:	e920 0ffc 	stmdb	r0!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, fp}
 8020d7e:	4a10      	ldr	r2, [pc, #64]	; (8020dc0 <pxCurrentTCBConst>)
 8020d80:	6811      	ldr	r1, [r2, #0]
 8020d82:	6008      	str	r0, [r1, #0]
 8020d84:	f04f 00a0 	mov.w	r0, #160	; 0xa0
 8020d88:	f380 8811 	msr	BASEPRI, r0
 8020d8c:	f3bf 8f4f 	dsb	sy
 8020d90:	f3bf 8f6f 	isb	sy
 8020d94:	f7ff f846 	bl	801fe24 <vTaskSwitchContext>
 8020d98:	f04f 0000 	mov.w	r0, #0
 8020d9c:	f380 8811 	msr	BASEPRI, r0
 8020da0:	4a07      	ldr	r2, [pc, #28]	; (8020dc0 <pxCurrentTCBConst>)
 8020da2:	6811      	ldr	r1, [r2, #0]
 8020da4:	6808      	ldr	r0, [r1, #0]
 8020da6:	e8b0 0ffc 	ldmia.w	r0!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, fp}
 8020daa:	f382 880b 	msr	PSPLIM, r2
 8020dae:	f380 8809 	msr	PSP, r0
 8020db2:	4718      	bx	r3
 8020db4:	f3af 8000 	nop.w
 8020db8:	f3af 8000 	nop.w
 8020dbc:	f3af 8000 	nop.w

08020dc0 <pxCurrentTCBConst>:
 8020dc0:	200016ec 	.word	0x200016ec
	"xRNRConst: .word 0xe000ed98						\n"
	"xRBARConst: .word 0xe000ed9c						\n"
	#endif /* configENABLE_MPU */
	:: "i"( configMAX_SYSCALL_INTERRUPT_PRIORITY )
	);
}
 8020dc4:	bf00      	nop
 8020dc6:	bf00      	nop
	...

08020dd0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void SVC_Handler( void ) /* __attribute__ (( naked )) PRIVILEGED_FUNCTION */
{
	__asm volatile
 8020dd0:	f01e 0f04 	tst.w	lr, #4
 8020dd4:	bf0c      	ite	eq
 8020dd6:	f3ef 8008 	mrseq	r0, MSP
 8020dda:	f3ef 8009 	mrsne	r0, PSP
 8020dde:	4904      	ldr	r1, [pc, #16]	; (8020df0 <svchandler_address_const>)
 8020de0:	4708      	bx	r1
 8020de2:	bf00      	nop
 8020de4:	f3af 8000 	nop.w
 8020de8:	f3af 8000 	nop.w
 8020dec:	f3af 8000 	nop.w

08020df0 <svchandler_address_const>:
 8020df0:	08020b5d 	.word	0x08020b5d
	"	bx r1											\n"
	"													\n"
	"	.align 4										\n"
	"svchandler_address_const: .word vPortSVCHandler_C	\n"
	);
}
 8020df4:	bf00      	nop
 8020df6:	bf00      	nop

08020df8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8020df8:	b580      	push	{r7, lr}
 8020dfa:	b086      	sub	sp, #24
 8020dfc:	af00      	add	r7, sp, #0
 8020dfe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8020e00:	2300      	movs	r3, #0
 8020e02:	60fb      	str	r3, [r7, #12]

	vTaskSuspendAll();
 8020e04:	f7fe feb0 	bl	801fb68 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8020e08:	4b4f      	ldr	r3, [pc, #316]	; (8020f48 <pvPortMalloc+0x150>)
 8020e0a:	681b      	ldr	r3, [r3, #0]
 8020e0c:	2b00      	cmp	r3, #0
 8020e0e:	d101      	bne.n	8020e14 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8020e10:	f000 f8f8 	bl	8021004 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8020e14:	4b4d      	ldr	r3, [pc, #308]	; (8020f4c <pvPortMalloc+0x154>)
 8020e16:	681a      	ldr	r2, [r3, #0]
 8020e18:	687b      	ldr	r3, [r7, #4]
 8020e1a:	4013      	ands	r3, r2
 8020e1c:	2b00      	cmp	r3, #0
 8020e1e:	f040 8083 	bne.w	8020f28 <pvPortMalloc+0x130>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8020e22:	687b      	ldr	r3, [r7, #4]
 8020e24:	2b00      	cmp	r3, #0
 8020e26:	d015      	beq.n	8020e54 <pvPortMalloc+0x5c>
			{
				xWantedSize += xHeapStructSize;
 8020e28:	2208      	movs	r2, #8
 8020e2a:	687b      	ldr	r3, [r7, #4]
 8020e2c:	4413      	add	r3, r2
 8020e2e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8020e30:	687b      	ldr	r3, [r7, #4]
 8020e32:	f003 0307 	and.w	r3, r3, #7
 8020e36:	2b00      	cmp	r3, #0
 8020e38:	d00c      	beq.n	8020e54 <pvPortMalloc+0x5c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8020e3a:	687b      	ldr	r3, [r7, #4]
 8020e3c:	f023 0307 	bic.w	r3, r3, #7
 8020e40:	3308      	adds	r3, #8
 8020e42:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8020e44:	687b      	ldr	r3, [r7, #4]
 8020e46:	f003 0307 	and.w	r3, r3, #7
 8020e4a:	2b00      	cmp	r3, #0
 8020e4c:	d002      	beq.n	8020e54 <pvPortMalloc+0x5c>
 8020e4e:	f7ff ff73 	bl	8020d38 <ulSetInterruptMask>
 8020e52:	e7fe      	b.n	8020e52 <pvPortMalloc+0x5a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8020e54:	687b      	ldr	r3, [r7, #4]
 8020e56:	2b00      	cmp	r3, #0
 8020e58:	d066      	beq.n	8020f28 <pvPortMalloc+0x130>
 8020e5a:	4b3d      	ldr	r3, [pc, #244]	; (8020f50 <pvPortMalloc+0x158>)
 8020e5c:	681b      	ldr	r3, [r3, #0]
 8020e5e:	687a      	ldr	r2, [r7, #4]
 8020e60:	429a      	cmp	r2, r3
 8020e62:	d861      	bhi.n	8020f28 <pvPortMalloc+0x130>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8020e64:	4b3b      	ldr	r3, [pc, #236]	; (8020f54 <pvPortMalloc+0x15c>)
 8020e66:	613b      	str	r3, [r7, #16]
				pxBlock = xStart.pxNextFreeBlock;
 8020e68:	4b3a      	ldr	r3, [pc, #232]	; (8020f54 <pvPortMalloc+0x15c>)
 8020e6a:	681b      	ldr	r3, [r3, #0]
 8020e6c:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8020e6e:	e004      	b.n	8020e7a <pvPortMalloc+0x82>
				{
					pxPreviousBlock = pxBlock;
 8020e70:	697b      	ldr	r3, [r7, #20]
 8020e72:	613b      	str	r3, [r7, #16]
					pxBlock = pxBlock->pxNextFreeBlock;
 8020e74:	697b      	ldr	r3, [r7, #20]
 8020e76:	681b      	ldr	r3, [r3, #0]
 8020e78:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8020e7a:	697b      	ldr	r3, [r7, #20]
 8020e7c:	685b      	ldr	r3, [r3, #4]
 8020e7e:	687a      	ldr	r2, [r7, #4]
 8020e80:	429a      	cmp	r2, r3
 8020e82:	d903      	bls.n	8020e8c <pvPortMalloc+0x94>
 8020e84:	697b      	ldr	r3, [r7, #20]
 8020e86:	681b      	ldr	r3, [r3, #0]
 8020e88:	2b00      	cmp	r3, #0
 8020e8a:	d1f1      	bne.n	8020e70 <pvPortMalloc+0x78>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8020e8c:	4b2e      	ldr	r3, [pc, #184]	; (8020f48 <pvPortMalloc+0x150>)
 8020e8e:	681b      	ldr	r3, [r3, #0]
 8020e90:	697a      	ldr	r2, [r7, #20]
 8020e92:	429a      	cmp	r2, r3
 8020e94:	d048      	beq.n	8020f28 <pvPortMalloc+0x130>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8020e96:	693b      	ldr	r3, [r7, #16]
 8020e98:	681b      	ldr	r3, [r3, #0]
 8020e9a:	2208      	movs	r2, #8
 8020e9c:	4413      	add	r3, r2
 8020e9e:	60fb      	str	r3, [r7, #12]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8020ea0:	697b      	ldr	r3, [r7, #20]
 8020ea2:	681a      	ldr	r2, [r3, #0]
 8020ea4:	693b      	ldr	r3, [r7, #16]
 8020ea6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8020ea8:	697b      	ldr	r3, [r7, #20]
 8020eaa:	685a      	ldr	r2, [r3, #4]
 8020eac:	687b      	ldr	r3, [r7, #4]
 8020eae:	1ad2      	subs	r2, r2, r3
 8020eb0:	2308      	movs	r3, #8
 8020eb2:	005b      	lsls	r3, r3, #1
 8020eb4:	429a      	cmp	r2, r3
 8020eb6:	d917      	bls.n	8020ee8 <pvPortMalloc+0xf0>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8020eb8:	697a      	ldr	r2, [r7, #20]
 8020eba:	687b      	ldr	r3, [r7, #4]
 8020ebc:	4413      	add	r3, r2
 8020ebe:	60bb      	str	r3, [r7, #8]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8020ec0:	68bb      	ldr	r3, [r7, #8]
 8020ec2:	f003 0307 	and.w	r3, r3, #7
 8020ec6:	2b00      	cmp	r3, #0
 8020ec8:	d002      	beq.n	8020ed0 <pvPortMalloc+0xd8>
 8020eca:	f7ff ff35 	bl	8020d38 <ulSetInterruptMask>
 8020ece:	e7fe      	b.n	8020ece <pvPortMalloc+0xd6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8020ed0:	697b      	ldr	r3, [r7, #20]
 8020ed2:	685a      	ldr	r2, [r3, #4]
 8020ed4:	687b      	ldr	r3, [r7, #4]
 8020ed6:	1ad2      	subs	r2, r2, r3
 8020ed8:	68bb      	ldr	r3, [r7, #8]
 8020eda:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8020edc:	697b      	ldr	r3, [r7, #20]
 8020ede:	687a      	ldr	r2, [r7, #4]
 8020ee0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8020ee2:	68b8      	ldr	r0, [r7, #8]
 8020ee4:	f000 f8f0 	bl	80210c8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8020ee8:	4b19      	ldr	r3, [pc, #100]	; (8020f50 <pvPortMalloc+0x158>)
 8020eea:	681a      	ldr	r2, [r3, #0]
 8020eec:	697b      	ldr	r3, [r7, #20]
 8020eee:	685b      	ldr	r3, [r3, #4]
 8020ef0:	1ad3      	subs	r3, r2, r3
 8020ef2:	4a17      	ldr	r2, [pc, #92]	; (8020f50 <pvPortMalloc+0x158>)
 8020ef4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8020ef6:	4b16      	ldr	r3, [pc, #88]	; (8020f50 <pvPortMalloc+0x158>)
 8020ef8:	681a      	ldr	r2, [r3, #0]
 8020efa:	4b17      	ldr	r3, [pc, #92]	; (8020f58 <pvPortMalloc+0x160>)
 8020efc:	681b      	ldr	r3, [r3, #0]
 8020efe:	429a      	cmp	r2, r3
 8020f00:	d203      	bcs.n	8020f0a <pvPortMalloc+0x112>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8020f02:	4b13      	ldr	r3, [pc, #76]	; (8020f50 <pvPortMalloc+0x158>)
 8020f04:	681b      	ldr	r3, [r3, #0]
 8020f06:	4a14      	ldr	r2, [pc, #80]	; (8020f58 <pvPortMalloc+0x160>)
 8020f08:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8020f0a:	697b      	ldr	r3, [r7, #20]
 8020f0c:	685a      	ldr	r2, [r3, #4]
 8020f0e:	4b0f      	ldr	r3, [pc, #60]	; (8020f4c <pvPortMalloc+0x154>)
 8020f10:	681b      	ldr	r3, [r3, #0]
 8020f12:	431a      	orrs	r2, r3
 8020f14:	697b      	ldr	r3, [r7, #20]
 8020f16:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8020f18:	697b      	ldr	r3, [r7, #20]
 8020f1a:	2200      	movs	r2, #0
 8020f1c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8020f1e:	4b0f      	ldr	r3, [pc, #60]	; (8020f5c <pvPortMalloc+0x164>)
 8020f20:	681b      	ldr	r3, [r3, #0]
 8020f22:	3301      	adds	r3, #1
 8020f24:	4a0d      	ldr	r2, [pc, #52]	; (8020f5c <pvPortMalloc+0x164>)
 8020f26:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8020f28:	f7fe fe2c 	bl	801fb84 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8020f2c:	68fb      	ldr	r3, [r7, #12]
 8020f2e:	f003 0307 	and.w	r3, r3, #7
 8020f32:	2b00      	cmp	r3, #0
 8020f34:	d002      	beq.n	8020f3c <pvPortMalloc+0x144>
 8020f36:	f7ff feff 	bl	8020d38 <ulSetInterruptMask>
 8020f3a:	e7fe      	b.n	8020f3a <pvPortMalloc+0x142>
	return pvReturn;
 8020f3c:	68fb      	ldr	r3, [r7, #12]
}
 8020f3e:	4618      	mov	r0, r3
 8020f40:	3718      	adds	r7, #24
 8020f42:	46bd      	mov	sp, r7
 8020f44:	bd80      	pop	{r7, pc}
 8020f46:	bf00      	nop
 8020f48:	20005d20 	.word	0x20005d20
 8020f4c:	20005d34 	.word	0x20005d34
 8020f50:	20005d24 	.word	0x20005d24
 8020f54:	20005d18 	.word	0x20005d18
 8020f58:	20005d28 	.word	0x20005d28
 8020f5c:	20005d2c 	.word	0x20005d2c

08020f60 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8020f60:	b580      	push	{r7, lr}
 8020f62:	b084      	sub	sp, #16
 8020f64:	af00      	add	r7, sp, #0
 8020f66:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8020f68:	687b      	ldr	r3, [r7, #4]
 8020f6a:	60fb      	str	r3, [r7, #12]
BlockLink_t *pxLink;

	if( pv != NULL )
 8020f6c:	687b      	ldr	r3, [r7, #4]
 8020f6e:	2b00      	cmp	r3, #0
 8020f70:	d03d      	beq.n	8020fee <vPortFree+0x8e>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8020f72:	2308      	movs	r3, #8
 8020f74:	425b      	negs	r3, r3
 8020f76:	68fa      	ldr	r2, [r7, #12]
 8020f78:	4413      	add	r3, r2
 8020f7a:	60fb      	str	r3, [r7, #12]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8020f7c:	68fb      	ldr	r3, [r7, #12]
 8020f7e:	60bb      	str	r3, [r7, #8]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8020f80:	68bb      	ldr	r3, [r7, #8]
 8020f82:	685a      	ldr	r2, [r3, #4]
 8020f84:	4b1c      	ldr	r3, [pc, #112]	; (8020ff8 <vPortFree+0x98>)
 8020f86:	681b      	ldr	r3, [r3, #0]
 8020f88:	4013      	ands	r3, r2
 8020f8a:	2b00      	cmp	r3, #0
 8020f8c:	d102      	bne.n	8020f94 <vPortFree+0x34>
 8020f8e:	f7ff fed3 	bl	8020d38 <ulSetInterruptMask>
 8020f92:	e7fe      	b.n	8020f92 <vPortFree+0x32>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8020f94:	68bb      	ldr	r3, [r7, #8]
 8020f96:	681b      	ldr	r3, [r3, #0]
 8020f98:	2b00      	cmp	r3, #0
 8020f9a:	d002      	beq.n	8020fa2 <vPortFree+0x42>
 8020f9c:	f7ff fecc 	bl	8020d38 <ulSetInterruptMask>
 8020fa0:	e7fe      	b.n	8020fa0 <vPortFree+0x40>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8020fa2:	68bb      	ldr	r3, [r7, #8]
 8020fa4:	685a      	ldr	r2, [r3, #4]
 8020fa6:	4b14      	ldr	r3, [pc, #80]	; (8020ff8 <vPortFree+0x98>)
 8020fa8:	681b      	ldr	r3, [r3, #0]
 8020faa:	4013      	ands	r3, r2
 8020fac:	2b00      	cmp	r3, #0
 8020fae:	d01e      	beq.n	8020fee <vPortFree+0x8e>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8020fb0:	68bb      	ldr	r3, [r7, #8]
 8020fb2:	681b      	ldr	r3, [r3, #0]
 8020fb4:	2b00      	cmp	r3, #0
 8020fb6:	d11a      	bne.n	8020fee <vPortFree+0x8e>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8020fb8:	68bb      	ldr	r3, [r7, #8]
 8020fba:	685a      	ldr	r2, [r3, #4]
 8020fbc:	4b0e      	ldr	r3, [pc, #56]	; (8020ff8 <vPortFree+0x98>)
 8020fbe:	681b      	ldr	r3, [r3, #0]
 8020fc0:	43db      	mvns	r3, r3
 8020fc2:	401a      	ands	r2, r3
 8020fc4:	68bb      	ldr	r3, [r7, #8]
 8020fc6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8020fc8:	f7fe fdce 	bl	801fb68 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8020fcc:	68bb      	ldr	r3, [r7, #8]
 8020fce:	685a      	ldr	r2, [r3, #4]
 8020fd0:	4b0a      	ldr	r3, [pc, #40]	; (8020ffc <vPortFree+0x9c>)
 8020fd2:	681b      	ldr	r3, [r3, #0]
 8020fd4:	4413      	add	r3, r2
 8020fd6:	4a09      	ldr	r2, [pc, #36]	; (8020ffc <vPortFree+0x9c>)
 8020fd8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8020fda:	68b8      	ldr	r0, [r7, #8]
 8020fdc:	f000 f874 	bl	80210c8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8020fe0:	4b07      	ldr	r3, [pc, #28]	; (8021000 <vPortFree+0xa0>)
 8020fe2:	681b      	ldr	r3, [r3, #0]
 8020fe4:	3301      	adds	r3, #1
 8020fe6:	4a06      	ldr	r2, [pc, #24]	; (8021000 <vPortFree+0xa0>)
 8020fe8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8020fea:	f7fe fdcb 	bl	801fb84 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8020fee:	bf00      	nop
 8020ff0:	3710      	adds	r7, #16
 8020ff2:	46bd      	mov	sp, r7
 8020ff4:	bd80      	pop	{r7, pc}
 8020ff6:	bf00      	nop
 8020ff8:	20005d34 	.word	0x20005d34
 8020ffc:	20005d24 	.word	0x20005d24
 8021000:	20005d30 	.word	0x20005d30

08021004 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8021004:	b480      	push	{r7}
 8021006:	b085      	sub	sp, #20
 8021008:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 802100a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 802100e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8021010:	4b27      	ldr	r3, [pc, #156]	; (80210b0 <prvHeapInit+0xac>)
 8021012:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8021014:	68fb      	ldr	r3, [r7, #12]
 8021016:	f003 0307 	and.w	r3, r3, #7
 802101a:	2b00      	cmp	r3, #0
 802101c:	d00c      	beq.n	8021038 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 802101e:	68fb      	ldr	r3, [r7, #12]
 8021020:	3307      	adds	r3, #7
 8021022:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8021024:	68fb      	ldr	r3, [r7, #12]
 8021026:	f023 0307 	bic.w	r3, r3, #7
 802102a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 802102c:	68ba      	ldr	r2, [r7, #8]
 802102e:	68fb      	ldr	r3, [r7, #12]
 8021030:	1ad3      	subs	r3, r2, r3
 8021032:	4a1f      	ldr	r2, [pc, #124]	; (80210b0 <prvHeapInit+0xac>)
 8021034:	4413      	add	r3, r2
 8021036:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8021038:	68fb      	ldr	r3, [r7, #12]
 802103a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 802103c:	4a1d      	ldr	r2, [pc, #116]	; (80210b4 <prvHeapInit+0xb0>)
 802103e:	687b      	ldr	r3, [r7, #4]
 8021040:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8021042:	4b1c      	ldr	r3, [pc, #112]	; (80210b4 <prvHeapInit+0xb0>)
 8021044:	2200      	movs	r2, #0
 8021046:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8021048:	687b      	ldr	r3, [r7, #4]
 802104a:	68ba      	ldr	r2, [r7, #8]
 802104c:	4413      	add	r3, r2
 802104e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8021050:	2208      	movs	r2, #8
 8021052:	68fb      	ldr	r3, [r7, #12]
 8021054:	1a9b      	subs	r3, r3, r2
 8021056:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8021058:	68fb      	ldr	r3, [r7, #12]
 802105a:	f023 0307 	bic.w	r3, r3, #7
 802105e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8021060:	68fb      	ldr	r3, [r7, #12]
 8021062:	4a15      	ldr	r2, [pc, #84]	; (80210b8 <prvHeapInit+0xb4>)
 8021064:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8021066:	4b14      	ldr	r3, [pc, #80]	; (80210b8 <prvHeapInit+0xb4>)
 8021068:	681b      	ldr	r3, [r3, #0]
 802106a:	2200      	movs	r2, #0
 802106c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 802106e:	4b12      	ldr	r3, [pc, #72]	; (80210b8 <prvHeapInit+0xb4>)
 8021070:	681b      	ldr	r3, [r3, #0]
 8021072:	2200      	movs	r2, #0
 8021074:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8021076:	687b      	ldr	r3, [r7, #4]
 8021078:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 802107a:	683b      	ldr	r3, [r7, #0]
 802107c:	68fa      	ldr	r2, [r7, #12]
 802107e:	1ad2      	subs	r2, r2, r3
 8021080:	683b      	ldr	r3, [r7, #0]
 8021082:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8021084:	4b0c      	ldr	r3, [pc, #48]	; (80210b8 <prvHeapInit+0xb4>)
 8021086:	681a      	ldr	r2, [r3, #0]
 8021088:	683b      	ldr	r3, [r7, #0]
 802108a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 802108c:	683b      	ldr	r3, [r7, #0]
 802108e:	685b      	ldr	r3, [r3, #4]
 8021090:	4a0a      	ldr	r2, [pc, #40]	; (80210bc <prvHeapInit+0xb8>)
 8021092:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8021094:	683b      	ldr	r3, [r7, #0]
 8021096:	685b      	ldr	r3, [r3, #4]
 8021098:	4a09      	ldr	r2, [pc, #36]	; (80210c0 <prvHeapInit+0xbc>)
 802109a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 802109c:	4b09      	ldr	r3, [pc, #36]	; (80210c4 <prvHeapInit+0xc0>)
 802109e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80210a2:	601a      	str	r2, [r3, #0]
}
 80210a4:	bf00      	nop
 80210a6:	3714      	adds	r7, #20
 80210a8:	46bd      	mov	sp, r7
 80210aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80210ae:	4770      	bx	lr
 80210b0:	20001d18 	.word	0x20001d18
 80210b4:	20005d18 	.word	0x20005d18
 80210b8:	20005d20 	.word	0x20005d20
 80210bc:	20005d28 	.word	0x20005d28
 80210c0:	20005d24 	.word	0x20005d24
 80210c4:	20005d34 	.word	0x20005d34

080210c8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80210c8:	b480      	push	{r7}
 80210ca:	b085      	sub	sp, #20
 80210cc:	af00      	add	r7, sp, #0
 80210ce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80210d0:	4b28      	ldr	r3, [pc, #160]	; (8021174 <prvInsertBlockIntoFreeList+0xac>)
 80210d2:	60fb      	str	r3, [r7, #12]
 80210d4:	e002      	b.n	80210dc <prvInsertBlockIntoFreeList+0x14>
 80210d6:	68fb      	ldr	r3, [r7, #12]
 80210d8:	681b      	ldr	r3, [r3, #0]
 80210da:	60fb      	str	r3, [r7, #12]
 80210dc:	68fb      	ldr	r3, [r7, #12]
 80210de:	681b      	ldr	r3, [r3, #0]
 80210e0:	687a      	ldr	r2, [r7, #4]
 80210e2:	429a      	cmp	r2, r3
 80210e4:	d8f7      	bhi.n	80210d6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80210e6:	68fb      	ldr	r3, [r7, #12]
 80210e8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80210ea:	68fb      	ldr	r3, [r7, #12]
 80210ec:	685b      	ldr	r3, [r3, #4]
 80210ee:	68ba      	ldr	r2, [r7, #8]
 80210f0:	4413      	add	r3, r2
 80210f2:	687a      	ldr	r2, [r7, #4]
 80210f4:	429a      	cmp	r2, r3
 80210f6:	d108      	bne.n	802110a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80210f8:	68fb      	ldr	r3, [r7, #12]
 80210fa:	685a      	ldr	r2, [r3, #4]
 80210fc:	687b      	ldr	r3, [r7, #4]
 80210fe:	685b      	ldr	r3, [r3, #4]
 8021100:	441a      	add	r2, r3
 8021102:	68fb      	ldr	r3, [r7, #12]
 8021104:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8021106:	68fb      	ldr	r3, [r7, #12]
 8021108:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 802110a:	687b      	ldr	r3, [r7, #4]
 802110c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 802110e:	687b      	ldr	r3, [r7, #4]
 8021110:	685b      	ldr	r3, [r3, #4]
 8021112:	68ba      	ldr	r2, [r7, #8]
 8021114:	441a      	add	r2, r3
 8021116:	68fb      	ldr	r3, [r7, #12]
 8021118:	681b      	ldr	r3, [r3, #0]
 802111a:	429a      	cmp	r2, r3
 802111c:	d118      	bne.n	8021150 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 802111e:	68fb      	ldr	r3, [r7, #12]
 8021120:	681a      	ldr	r2, [r3, #0]
 8021122:	4b15      	ldr	r3, [pc, #84]	; (8021178 <prvInsertBlockIntoFreeList+0xb0>)
 8021124:	681b      	ldr	r3, [r3, #0]
 8021126:	429a      	cmp	r2, r3
 8021128:	d00d      	beq.n	8021146 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 802112a:	687b      	ldr	r3, [r7, #4]
 802112c:	685a      	ldr	r2, [r3, #4]
 802112e:	68fb      	ldr	r3, [r7, #12]
 8021130:	681b      	ldr	r3, [r3, #0]
 8021132:	685b      	ldr	r3, [r3, #4]
 8021134:	441a      	add	r2, r3
 8021136:	687b      	ldr	r3, [r7, #4]
 8021138:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 802113a:	68fb      	ldr	r3, [r7, #12]
 802113c:	681b      	ldr	r3, [r3, #0]
 802113e:	681a      	ldr	r2, [r3, #0]
 8021140:	687b      	ldr	r3, [r7, #4]
 8021142:	601a      	str	r2, [r3, #0]
 8021144:	e008      	b.n	8021158 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8021146:	4b0c      	ldr	r3, [pc, #48]	; (8021178 <prvInsertBlockIntoFreeList+0xb0>)
 8021148:	681a      	ldr	r2, [r3, #0]
 802114a:	687b      	ldr	r3, [r7, #4]
 802114c:	601a      	str	r2, [r3, #0]
 802114e:	e003      	b.n	8021158 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8021150:	68fb      	ldr	r3, [r7, #12]
 8021152:	681a      	ldr	r2, [r3, #0]
 8021154:	687b      	ldr	r3, [r7, #4]
 8021156:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8021158:	68fa      	ldr	r2, [r7, #12]
 802115a:	687b      	ldr	r3, [r7, #4]
 802115c:	429a      	cmp	r2, r3
 802115e:	d002      	beq.n	8021166 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8021160:	68fb      	ldr	r3, [r7, #12]
 8021162:	687a      	ldr	r2, [r7, #4]
 8021164:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8021166:	bf00      	nop
 8021168:	3714      	adds	r7, #20
 802116a:	46bd      	mov	sp, r7
 802116c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021170:	4770      	bx	lr
 8021172:	bf00      	nop
 8021174:	20005d18 	.word	0x20005d18
 8021178:	20005d20 	.word	0x20005d20

0802117c <_ZdlPv>:
 802117c:	f003 b8da 	b.w	8024334 <free>

08021180 <_ZdlPvj>:
 8021180:	f7ff bffc 	b.w	802117c <_ZdlPv>

08021184 <_Znwj>:
 8021184:	2801      	cmp	r0, #1
 8021186:	bf38      	it	cc
 8021188:	2001      	movcc	r0, #1
 802118a:	b510      	push	{r4, lr}
 802118c:	4604      	mov	r4, r0
 802118e:	4620      	mov	r0, r4
 8021190:	f003 f8c8 	bl	8024324 <malloc>
 8021194:	b100      	cbz	r0, 8021198 <_Znwj+0x14>
 8021196:	bd10      	pop	{r4, pc}
 8021198:	f000 f812 	bl	80211c0 <_ZSt15get_new_handlerv>
 802119c:	b908      	cbnz	r0, 80211a2 <_Znwj+0x1e>
 802119e:	f003 f8ba 	bl	8024316 <abort>
 80211a2:	4780      	blx	r0
 80211a4:	e7f3      	b.n	802118e <_Znwj+0xa>

080211a6 <_ZNSaIcEC1Ev>:
 80211a6:	4770      	bx	lr

080211a8 <_ZNSaIcEC1ERKS_>:
 80211a8:	4770      	bx	lr

080211aa <_ZNSaIcED1Ev>:
 80211aa:	4770      	bx	lr

080211ac <_ZSt17__throw_bad_allocv>:
 80211ac:	b508      	push	{r3, lr}
 80211ae:	f003 f8b2 	bl	8024316 <abort>

080211b2 <_ZSt28__throw_bad_array_new_lengthv>:
 80211b2:	b508      	push	{r3, lr}
 80211b4:	f003 f8af 	bl	8024316 <abort>

080211b8 <_ZSt20__throw_length_errorPKc>:
 80211b8:	b508      	push	{r3, lr}
 80211ba:	f003 f8ac 	bl	8024316 <abort>
	...

080211c0 <_ZSt15get_new_handlerv>:
 80211c0:	4b01      	ldr	r3, [pc, #4]	; (80211c8 <_ZSt15get_new_handlerv+0x8>)
 80211c2:	e8d3 0faf 	lda	r0, [r3]
 80211c6:	4770      	bx	lr
 80211c8:	20005d38 	.word	0x20005d38

080211cc <fmod>:
 80211cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80211ce:	ec57 6b10 	vmov	r6, r7, d0
 80211d2:	ec55 4b11 	vmov	r4, r5, d1
 80211d6:	ed2d 8b02 	vpush	{d8}
 80211da:	f000 fc83 	bl	8021ae4 <__ieee754_fmod>
 80211de:	4622      	mov	r2, r4
 80211e0:	462b      	mov	r3, r5
 80211e2:	4630      	mov	r0, r6
 80211e4:	4639      	mov	r1, r7
 80211e6:	eeb0 8a40 	vmov.f32	s16, s0
 80211ea:	eef0 8a60 	vmov.f32	s17, s1
 80211ee:	f7df fc8f 	bl	8000b10 <__aeabi_dcmpun>
 80211f2:	b990      	cbnz	r0, 802121a <fmod+0x4e>
 80211f4:	2200      	movs	r2, #0
 80211f6:	2300      	movs	r3, #0
 80211f8:	4620      	mov	r0, r4
 80211fa:	4629      	mov	r1, r5
 80211fc:	f7df fc56 	bl	8000aac <__aeabi_dcmpeq>
 8021200:	b158      	cbz	r0, 802121a <fmod+0x4e>
 8021202:	f003 fb79 	bl	80248f8 <__errno>
 8021206:	2321      	movs	r3, #33	; 0x21
 8021208:	2200      	movs	r2, #0
 802120a:	6003      	str	r3, [r0, #0]
 802120c:	2300      	movs	r3, #0
 802120e:	4610      	mov	r0, r2
 8021210:	4619      	mov	r1, r3
 8021212:	f7df fb0d 	bl	8000830 <__aeabi_ddiv>
 8021216:	ec41 0b18 	vmov	d8, r0, r1
 802121a:	eeb0 0a48 	vmov.f32	s0, s16
 802121e:	eef0 0a68 	vmov.f32	s1, s17
 8021222:	ecbd 8b02 	vpop	{d8}
 8021226:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08021228 <pow>:
 8021228:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802122a:	ec55 4b11 	vmov	r4, r5, d1
 802122e:	ed2d 8b02 	vpush	{d8}
 8021232:	eeb0 8a40 	vmov.f32	s16, s0
 8021236:	eef0 8a60 	vmov.f32	s17, s1
 802123a:	f000 fd61 	bl	8021d00 <__ieee754_pow>
 802123e:	4622      	mov	r2, r4
 8021240:	462b      	mov	r3, r5
 8021242:	4620      	mov	r0, r4
 8021244:	4629      	mov	r1, r5
 8021246:	ec57 6b10 	vmov	r6, r7, d0
 802124a:	f7df fc61 	bl	8000b10 <__aeabi_dcmpun>
 802124e:	2800      	cmp	r0, #0
 8021250:	d13b      	bne.n	80212ca <pow+0xa2>
 8021252:	2200      	movs	r2, #0
 8021254:	2300      	movs	r3, #0
 8021256:	ec51 0b18 	vmov	r0, r1, d8
 802125a:	f7df fc27 	bl	8000aac <__aeabi_dcmpeq>
 802125e:	b1b8      	cbz	r0, 8021290 <pow+0x68>
 8021260:	2200      	movs	r2, #0
 8021262:	2300      	movs	r3, #0
 8021264:	4620      	mov	r0, r4
 8021266:	4629      	mov	r1, r5
 8021268:	f7df fc20 	bl	8000aac <__aeabi_dcmpeq>
 802126c:	2800      	cmp	r0, #0
 802126e:	d146      	bne.n	80212fe <pow+0xd6>
 8021270:	ec45 4b10 	vmov	d0, r4, r5
 8021274:	f000 f93e 	bl	80214f4 <finite>
 8021278:	b338      	cbz	r0, 80212ca <pow+0xa2>
 802127a:	2200      	movs	r2, #0
 802127c:	2300      	movs	r3, #0
 802127e:	4620      	mov	r0, r4
 8021280:	4629      	mov	r1, r5
 8021282:	f7df fc1d 	bl	8000ac0 <__aeabi_dcmplt>
 8021286:	b300      	cbz	r0, 80212ca <pow+0xa2>
 8021288:	f003 fb36 	bl	80248f8 <__errno>
 802128c:	2322      	movs	r3, #34	; 0x22
 802128e:	e01b      	b.n	80212c8 <pow+0xa0>
 8021290:	ec47 6b10 	vmov	d0, r6, r7
 8021294:	f000 f92e 	bl	80214f4 <finite>
 8021298:	b9e0      	cbnz	r0, 80212d4 <pow+0xac>
 802129a:	eeb0 0a48 	vmov.f32	s0, s16
 802129e:	eef0 0a68 	vmov.f32	s1, s17
 80212a2:	f000 f927 	bl	80214f4 <finite>
 80212a6:	b1a8      	cbz	r0, 80212d4 <pow+0xac>
 80212a8:	ec45 4b10 	vmov	d0, r4, r5
 80212ac:	f000 f922 	bl	80214f4 <finite>
 80212b0:	b180      	cbz	r0, 80212d4 <pow+0xac>
 80212b2:	4632      	mov	r2, r6
 80212b4:	463b      	mov	r3, r7
 80212b6:	4630      	mov	r0, r6
 80212b8:	4639      	mov	r1, r7
 80212ba:	f7df fc29 	bl	8000b10 <__aeabi_dcmpun>
 80212be:	2800      	cmp	r0, #0
 80212c0:	d0e2      	beq.n	8021288 <pow+0x60>
 80212c2:	f003 fb19 	bl	80248f8 <__errno>
 80212c6:	2321      	movs	r3, #33	; 0x21
 80212c8:	6003      	str	r3, [r0, #0]
 80212ca:	ecbd 8b02 	vpop	{d8}
 80212ce:	ec47 6b10 	vmov	d0, r6, r7
 80212d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80212d4:	2200      	movs	r2, #0
 80212d6:	2300      	movs	r3, #0
 80212d8:	4630      	mov	r0, r6
 80212da:	4639      	mov	r1, r7
 80212dc:	f7df fbe6 	bl	8000aac <__aeabi_dcmpeq>
 80212e0:	2800      	cmp	r0, #0
 80212e2:	d0f2      	beq.n	80212ca <pow+0xa2>
 80212e4:	eeb0 0a48 	vmov.f32	s0, s16
 80212e8:	eef0 0a68 	vmov.f32	s1, s17
 80212ec:	f000 f902 	bl	80214f4 <finite>
 80212f0:	2800      	cmp	r0, #0
 80212f2:	d0ea      	beq.n	80212ca <pow+0xa2>
 80212f4:	ec45 4b10 	vmov	d0, r4, r5
 80212f8:	f000 f8fc 	bl	80214f4 <finite>
 80212fc:	e7c3      	b.n	8021286 <pow+0x5e>
 80212fe:	2600      	movs	r6, #0
 8021300:	4f00      	ldr	r7, [pc, #0]	; (8021304 <pow+0xdc>)
 8021302:	e7e2      	b.n	80212ca <pow+0xa2>
 8021304:	3ff00000 	.word	0x3ff00000

08021308 <sqrt>:
 8021308:	b538      	push	{r3, r4, r5, lr}
 802130a:	ec55 4b10 	vmov	r4, r5, d0
 802130e:	ed2d 8b02 	vpush	{d8}
 8021312:	f000 f8fb 	bl	802150c <__ieee754_sqrt>
 8021316:	4622      	mov	r2, r4
 8021318:	462b      	mov	r3, r5
 802131a:	4620      	mov	r0, r4
 802131c:	4629      	mov	r1, r5
 802131e:	eeb0 8a40 	vmov.f32	s16, s0
 8021322:	eef0 8a60 	vmov.f32	s17, s1
 8021326:	f7df fbf3 	bl	8000b10 <__aeabi_dcmpun>
 802132a:	b990      	cbnz	r0, 8021352 <sqrt+0x4a>
 802132c:	2200      	movs	r2, #0
 802132e:	2300      	movs	r3, #0
 8021330:	4620      	mov	r0, r4
 8021332:	4629      	mov	r1, r5
 8021334:	f7df fbc4 	bl	8000ac0 <__aeabi_dcmplt>
 8021338:	b158      	cbz	r0, 8021352 <sqrt+0x4a>
 802133a:	f003 fadd 	bl	80248f8 <__errno>
 802133e:	2321      	movs	r3, #33	; 0x21
 8021340:	2200      	movs	r2, #0
 8021342:	6003      	str	r3, [r0, #0]
 8021344:	2300      	movs	r3, #0
 8021346:	4610      	mov	r0, r2
 8021348:	4619      	mov	r1, r3
 802134a:	f7df fa71 	bl	8000830 <__aeabi_ddiv>
 802134e:	ec41 0b18 	vmov	d8, r0, r1
 8021352:	eeb0 0a48 	vmov.f32	s0, s16
 8021356:	eef0 0a68 	vmov.f32	s1, s17
 802135a:	ecbd 8b02 	vpop	{d8}
 802135e:	bd38      	pop	{r3, r4, r5, pc}

08021360 <tan>:
 8021360:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8021362:	ec53 2b10 	vmov	r2, r3, d0
 8021366:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 802136a:	4815      	ldr	r0, [pc, #84]	; (80213c0 <tan+0x60>)
 802136c:	4281      	cmp	r1, r0
 802136e:	dc07      	bgt.n	8021380 <tan+0x20>
 8021370:	2001      	movs	r0, #1
 8021372:	ed9f 1b11 	vldr	d1, [pc, #68]	; 80213b8 <tan+0x58>
 8021376:	b005      	add	sp, #20
 8021378:	f85d eb04 	ldr.w	lr, [sp], #4
 802137c:	f000 b9a8 	b.w	80216d0 <__kernel_tan>
 8021380:	4810      	ldr	r0, [pc, #64]	; (80213c4 <tan+0x64>)
 8021382:	4281      	cmp	r1, r0
 8021384:	dd09      	ble.n	802139a <tan+0x3a>
 8021386:	ee10 0a10 	vmov	r0, s0
 802138a:	4619      	mov	r1, r3
 802138c:	f7de ff6e 	bl	800026c <__aeabi_dsub>
 8021390:	ec41 0b10 	vmov	d0, r0, r1
 8021394:	b005      	add	sp, #20
 8021396:	f85d fb04 	ldr.w	pc, [sp], #4
 802139a:	4668      	mov	r0, sp
 802139c:	f001 f9e0 	bl	8022760 <__ieee754_rem_pio2>
 80213a0:	0040      	lsls	r0, r0, #1
 80213a2:	f000 0002 	and.w	r0, r0, #2
 80213a6:	ed9d 1b02 	vldr	d1, [sp, #8]
 80213aa:	ed9d 0b00 	vldr	d0, [sp]
 80213ae:	f1c0 0001 	rsb	r0, r0, #1
 80213b2:	f000 f98d 	bl	80216d0 <__kernel_tan>
 80213b6:	e7ed      	b.n	8021394 <tan+0x34>
	...
 80213c0:	3fe921fb 	.word	0x3fe921fb
 80213c4:	7fefffff 	.word	0x7fefffff

080213c8 <atan2f>:
 80213c8:	f001 bc80 	b.w	8022ccc <__ieee754_atan2f>

080213cc <cosf>:
 80213cc:	ee10 3a10 	vmov	r3, s0
 80213d0:	b507      	push	{r0, r1, r2, lr}
 80213d2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80213d6:	4a1d      	ldr	r2, [pc, #116]	; (802144c <cosf+0x80>)
 80213d8:	4293      	cmp	r3, r2
 80213da:	dc06      	bgt.n	80213ea <cosf+0x1e>
 80213dc:	eddf 0a1c 	vldr	s1, [pc, #112]	; 8021450 <cosf+0x84>
 80213e0:	b003      	add	sp, #12
 80213e2:	f85d eb04 	ldr.w	lr, [sp], #4
 80213e6:	f001 bbcb 	b.w	8022b80 <__kernel_cosf>
 80213ea:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80213ee:	db04      	blt.n	80213fa <cosf+0x2e>
 80213f0:	ee30 0a40 	vsub.f32	s0, s0, s0
 80213f4:	b003      	add	sp, #12
 80213f6:	f85d fb04 	ldr.w	pc, [sp], #4
 80213fa:	4668      	mov	r0, sp
 80213fc:	f001 fd04 	bl	8022e08 <__ieee754_rem_pio2f>
 8021400:	f000 0003 	and.w	r0, r0, #3
 8021404:	2801      	cmp	r0, #1
 8021406:	d009      	beq.n	802141c <cosf+0x50>
 8021408:	2802      	cmp	r0, #2
 802140a:	d010      	beq.n	802142e <cosf+0x62>
 802140c:	b9b0      	cbnz	r0, 802143c <cosf+0x70>
 802140e:	eddd 0a01 	vldr	s1, [sp, #4]
 8021412:	ed9d 0a00 	vldr	s0, [sp]
 8021416:	f001 fbb3 	bl	8022b80 <__kernel_cosf>
 802141a:	e7eb      	b.n	80213f4 <cosf+0x28>
 802141c:	eddd 0a01 	vldr	s1, [sp, #4]
 8021420:	ed9d 0a00 	vldr	s0, [sp]
 8021424:	f001 fc0a 	bl	8022c3c <__kernel_sinf>
 8021428:	eeb1 0a40 	vneg.f32	s0, s0
 802142c:	e7e2      	b.n	80213f4 <cosf+0x28>
 802142e:	eddd 0a01 	vldr	s1, [sp, #4]
 8021432:	ed9d 0a00 	vldr	s0, [sp]
 8021436:	f001 fba3 	bl	8022b80 <__kernel_cosf>
 802143a:	e7f5      	b.n	8021428 <cosf+0x5c>
 802143c:	2001      	movs	r0, #1
 802143e:	eddd 0a01 	vldr	s1, [sp, #4]
 8021442:	ed9d 0a00 	vldr	s0, [sp]
 8021446:	f001 fbf9 	bl	8022c3c <__kernel_sinf>
 802144a:	e7d3      	b.n	80213f4 <cosf+0x28>
 802144c:	3f490fd8 	.word	0x3f490fd8
 8021450:	00000000 	.word	0x00000000

08021454 <sinf>:
 8021454:	ee10 3a10 	vmov	r3, s0
 8021458:	b507      	push	{r0, r1, r2, lr}
 802145a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 802145e:	4a1e      	ldr	r2, [pc, #120]	; (80214d8 <sinf+0x84>)
 8021460:	4293      	cmp	r3, r2
 8021462:	dc07      	bgt.n	8021474 <sinf+0x20>
 8021464:	2000      	movs	r0, #0
 8021466:	eddf 0a1d 	vldr	s1, [pc, #116]	; 80214dc <sinf+0x88>
 802146a:	b003      	add	sp, #12
 802146c:	f85d eb04 	ldr.w	lr, [sp], #4
 8021470:	f001 bbe4 	b.w	8022c3c <__kernel_sinf>
 8021474:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8021478:	db04      	blt.n	8021484 <sinf+0x30>
 802147a:	ee30 0a40 	vsub.f32	s0, s0, s0
 802147e:	b003      	add	sp, #12
 8021480:	f85d fb04 	ldr.w	pc, [sp], #4
 8021484:	4668      	mov	r0, sp
 8021486:	f001 fcbf 	bl	8022e08 <__ieee754_rem_pio2f>
 802148a:	f000 0003 	and.w	r0, r0, #3
 802148e:	2801      	cmp	r0, #1
 8021490:	d00a      	beq.n	80214a8 <sinf+0x54>
 8021492:	2802      	cmp	r0, #2
 8021494:	d00f      	beq.n	80214b6 <sinf+0x62>
 8021496:	b9c0      	cbnz	r0, 80214ca <sinf+0x76>
 8021498:	2001      	movs	r0, #1
 802149a:	eddd 0a01 	vldr	s1, [sp, #4]
 802149e:	ed9d 0a00 	vldr	s0, [sp]
 80214a2:	f001 fbcb 	bl	8022c3c <__kernel_sinf>
 80214a6:	e7ea      	b.n	802147e <sinf+0x2a>
 80214a8:	eddd 0a01 	vldr	s1, [sp, #4]
 80214ac:	ed9d 0a00 	vldr	s0, [sp]
 80214b0:	f001 fb66 	bl	8022b80 <__kernel_cosf>
 80214b4:	e7e3      	b.n	802147e <sinf+0x2a>
 80214b6:	2001      	movs	r0, #1
 80214b8:	eddd 0a01 	vldr	s1, [sp, #4]
 80214bc:	ed9d 0a00 	vldr	s0, [sp]
 80214c0:	f001 fbbc 	bl	8022c3c <__kernel_sinf>
 80214c4:	eeb1 0a40 	vneg.f32	s0, s0
 80214c8:	e7d9      	b.n	802147e <sinf+0x2a>
 80214ca:	eddd 0a01 	vldr	s1, [sp, #4]
 80214ce:	ed9d 0a00 	vldr	s0, [sp]
 80214d2:	f001 fb55 	bl	8022b80 <__kernel_cosf>
 80214d6:	e7f5      	b.n	80214c4 <sinf+0x70>
 80214d8:	3f490fd8 	.word	0x3f490fd8
 80214dc:	00000000 	.word	0x00000000

080214e0 <log2f>:
 80214e0:	b508      	push	{r3, lr}
 80214e2:	f001 fdbb 	bl	802305c <logf>
 80214e6:	eddf 7a02 	vldr	s15, [pc, #8]	; 80214f0 <log2f+0x10>
 80214ea:	ee80 0a27 	vdiv.f32	s0, s0, s15
 80214ee:	bd08      	pop	{r3, pc}
 80214f0:	3f317218 	.word	0x3f317218

080214f4 <finite>:
 80214f4:	b082      	sub	sp, #8
 80214f6:	ed8d 0b00 	vstr	d0, [sp]
 80214fa:	9801      	ldr	r0, [sp, #4]
 80214fc:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8021500:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8021504:	0fc0      	lsrs	r0, r0, #31
 8021506:	b002      	add	sp, #8
 8021508:	4770      	bx	lr
	...

0802150c <__ieee754_sqrt>:
 802150c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021510:	4e6b      	ldr	r6, [pc, #428]	; (80216c0 <__ieee754_sqrt+0x1b4>)
 8021512:	ee10 0a10 	vmov	r0, s0
 8021516:	ee10 2a10 	vmov	r2, s0
 802151a:	ec55 4b10 	vmov	r4, r5, d0
 802151e:	43ae      	bics	r6, r5
 8021520:	4629      	mov	r1, r5
 8021522:	462b      	mov	r3, r5
 8021524:	d10d      	bne.n	8021542 <__ieee754_sqrt+0x36>
 8021526:	f7df f859 	bl	80005dc <__aeabi_dmul>
 802152a:	4602      	mov	r2, r0
 802152c:	460b      	mov	r3, r1
 802152e:	4620      	mov	r0, r4
 8021530:	4629      	mov	r1, r5
 8021532:	f7de fe9d 	bl	8000270 <__adddf3>
 8021536:	4604      	mov	r4, r0
 8021538:	460d      	mov	r5, r1
 802153a:	ec45 4b10 	vmov	d0, r4, r5
 802153e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021542:	2d00      	cmp	r5, #0
 8021544:	dc0b      	bgt.n	802155e <__ieee754_sqrt+0x52>
 8021546:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 802154a:	4326      	orrs	r6, r4
 802154c:	d0f5      	beq.n	802153a <__ieee754_sqrt+0x2e>
 802154e:	b135      	cbz	r5, 802155e <__ieee754_sqrt+0x52>
 8021550:	f7de fe8c 	bl	800026c <__aeabi_dsub>
 8021554:	4602      	mov	r2, r0
 8021556:	460b      	mov	r3, r1
 8021558:	f7df f96a 	bl	8000830 <__aeabi_ddiv>
 802155c:	e7eb      	b.n	8021536 <__ieee754_sqrt+0x2a>
 802155e:	1509      	asrs	r1, r1, #20
 8021560:	f000 8091 	beq.w	8021686 <__ieee754_sqrt+0x17a>
 8021564:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8021568:	f2a1 36ff 	subw	r6, r1, #1023	; 0x3ff
 802156c:	07c9      	lsls	r1, r1, #31
 802156e:	f04f 0500 	mov.w	r5, #0
 8021572:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8021576:	ea4f 0666 	mov.w	r6, r6, asr #1
 802157a:	f04f 0e16 	mov.w	lr, #22
 802157e:	46ac      	mov	ip, r5
 8021580:	bf58      	it	pl
 8021582:	005b      	lslpl	r3, r3, #1
 8021584:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8021588:	bf5c      	itt	pl
 802158a:	eb03 73d2 	addpl.w	r3, r3, r2, lsr #31
 802158e:	0052      	lslpl	r2, r2, #1
 8021590:	005b      	lsls	r3, r3, #1
 8021592:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8021596:	0052      	lsls	r2, r2, #1
 8021598:	eb0c 0001 	add.w	r0, ip, r1
 802159c:	4298      	cmp	r0, r3
 802159e:	bfde      	ittt	le
 80215a0:	1a1b      	suble	r3, r3, r0
 80215a2:	eb00 0c01 	addle.w	ip, r0, r1
 80215a6:	186d      	addle	r5, r5, r1
 80215a8:	f1be 0e01 	subs.w	lr, lr, #1
 80215ac:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80215b0:	ea4f 0151 	mov.w	r1, r1, lsr #1
 80215b4:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 80215b8:	ea4f 0242 	mov.w	r2, r2, lsl #1
 80215bc:	d1ec      	bne.n	8021598 <__ieee754_sqrt+0x8c>
 80215be:	4674      	mov	r4, lr
 80215c0:	2720      	movs	r7, #32
 80215c2:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 80215c6:	4563      	cmp	r3, ip
 80215c8:	eb01 000e 	add.w	r0, r1, lr
 80215cc:	dc02      	bgt.n	80215d4 <__ieee754_sqrt+0xc8>
 80215ce:	d114      	bne.n	80215fa <__ieee754_sqrt+0xee>
 80215d0:	4290      	cmp	r0, r2
 80215d2:	d812      	bhi.n	80215fa <__ieee754_sqrt+0xee>
 80215d4:	2800      	cmp	r0, #0
 80215d6:	eb00 0e01 	add.w	lr, r0, r1
 80215da:	da59      	bge.n	8021690 <__ieee754_sqrt+0x184>
 80215dc:	f1be 0f00 	cmp.w	lr, #0
 80215e0:	db56      	blt.n	8021690 <__ieee754_sqrt+0x184>
 80215e2:	f10c 0801 	add.w	r8, ip, #1
 80215e6:	eba3 030c 	sub.w	r3, r3, ip
 80215ea:	4290      	cmp	r0, r2
 80215ec:	440c      	add	r4, r1
 80215ee:	eba2 0200 	sub.w	r2, r2, r0
 80215f2:	bf88      	it	hi
 80215f4:	f103 33ff 	addhi.w	r3, r3, #4294967295
 80215f8:	46c4      	mov	ip, r8
 80215fa:	005b      	lsls	r3, r3, #1
 80215fc:	3f01      	subs	r7, #1
 80215fe:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8021602:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8021606:	ea4f 0242 	mov.w	r2, r2, lsl #1
 802160a:	d1dc      	bne.n	80215c6 <__ieee754_sqrt+0xba>
 802160c:	4313      	orrs	r3, r2
 802160e:	d01b      	beq.n	8021648 <__ieee754_sqrt+0x13c>
 8021610:	f8df a0b0 	ldr.w	sl, [pc, #176]	; 80216c4 <__ieee754_sqrt+0x1b8>
 8021614:	f8df b0b0 	ldr.w	fp, [pc, #176]	; 80216c8 <__ieee754_sqrt+0x1bc>
 8021618:	e9da 0100 	ldrd	r0, r1, [sl]
 802161c:	e9db 2300 	ldrd	r2, r3, [fp]
 8021620:	e9da 8900 	ldrd	r8, r9, [sl]
 8021624:	f7de fe22 	bl	800026c <__aeabi_dsub>
 8021628:	4602      	mov	r2, r0
 802162a:	460b      	mov	r3, r1
 802162c:	4640      	mov	r0, r8
 802162e:	4649      	mov	r1, r9
 8021630:	f7df fa50 	bl	8000ad4 <__aeabi_dcmple>
 8021634:	b140      	cbz	r0, 8021648 <__ieee754_sqrt+0x13c>
 8021636:	f1b4 3fff 	cmp.w	r4, #4294967295
 802163a:	e9da 0100 	ldrd	r0, r1, [sl]
 802163e:	e9db 2300 	ldrd	r2, r3, [fp]
 8021642:	d127      	bne.n	8021694 <__ieee754_sqrt+0x188>
 8021644:	3501      	adds	r5, #1
 8021646:	463c      	mov	r4, r7
 8021648:	106a      	asrs	r2, r5, #1
 802164a:	07e9      	lsls	r1, r5, #31
 802164c:	ea4f 0354 	mov.w	r3, r4, lsr #1
 8021650:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 8021654:	bf48      	it	mi
 8021656:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 802165a:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 802165e:	461c      	mov	r4, r3
 8021660:	eb02 5506 	add.w	r5, r2, r6, lsl #20
 8021664:	e769      	b.n	802153a <__ieee754_sqrt+0x2e>
 8021666:	0ad3      	lsrs	r3, r2, #11
 8021668:	3815      	subs	r0, #21
 802166a:	0552      	lsls	r2, r2, #21
 802166c:	2b00      	cmp	r3, #0
 802166e:	d0fa      	beq.n	8021666 <__ieee754_sqrt+0x15a>
 8021670:	02dc      	lsls	r4, r3, #11
 8021672:	d50a      	bpl.n	802168a <__ieee754_sqrt+0x17e>
 8021674:	f1c1 0420 	rsb	r4, r1, #32
 8021678:	1e4d      	subs	r5, r1, #1
 802167a:	fa22 f404 	lsr.w	r4, r2, r4
 802167e:	408a      	lsls	r2, r1
 8021680:	1b41      	subs	r1, r0, r5
 8021682:	4323      	orrs	r3, r4
 8021684:	e76e      	b.n	8021564 <__ieee754_sqrt+0x58>
 8021686:	4608      	mov	r0, r1
 8021688:	e7f0      	b.n	802166c <__ieee754_sqrt+0x160>
 802168a:	005b      	lsls	r3, r3, #1
 802168c:	3101      	adds	r1, #1
 802168e:	e7ef      	b.n	8021670 <__ieee754_sqrt+0x164>
 8021690:	46e0      	mov	r8, ip
 8021692:	e7a8      	b.n	80215e6 <__ieee754_sqrt+0xda>
 8021694:	e9da 8900 	ldrd	r8, r9, [sl]
 8021698:	f7de fdea 	bl	8000270 <__adddf3>
 802169c:	4602      	mov	r2, r0
 802169e:	460b      	mov	r3, r1
 80216a0:	4640      	mov	r0, r8
 80216a2:	4649      	mov	r1, r9
 80216a4:	f7df fa0c 	bl	8000ac0 <__aeabi_dcmplt>
 80216a8:	b128      	cbz	r0, 80216b6 <__ieee754_sqrt+0x1aa>
 80216aa:	1ca0      	adds	r0, r4, #2
 80216ac:	f104 0402 	add.w	r4, r4, #2
 80216b0:	bf08      	it	eq
 80216b2:	3501      	addeq	r5, #1
 80216b4:	e7c8      	b.n	8021648 <__ieee754_sqrt+0x13c>
 80216b6:	3401      	adds	r4, #1
 80216b8:	f024 0401 	bic.w	r4, r4, #1
 80216bc:	e7c4      	b.n	8021648 <__ieee754_sqrt+0x13c>
 80216be:	bf00      	nop
 80216c0:	7ff00000 	.word	0x7ff00000
 80216c4:	200000a0 	.word	0x200000a0
 80216c8:	200000a8 	.word	0x200000a8
 80216cc:	00000000 	.word	0x00000000

080216d0 <__kernel_tan>:
 80216d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80216d4:	ec5b ab10 	vmov	sl, fp, d0
 80216d8:	f02b 4700 	bic.w	r7, fp, #2147483648	; 0x80000000
 80216dc:	4be0      	ldr	r3, [pc, #896]	; (8021a60 <__kernel_tan+0x390>)
 80216de:	4606      	mov	r6, r0
 80216e0:	429f      	cmp	r7, r3
 80216e2:	ed2d 8b06 	vpush	{d8-d10}
 80216e6:	b083      	sub	sp, #12
 80216e8:	ec59 8b11 	vmov	r8, r9, d1
 80216ec:	f8cd b000 	str.w	fp, [sp]
 80216f0:	dc61      	bgt.n	80217b6 <__kernel_tan+0xe6>
 80216f2:	ee10 0a10 	vmov	r0, s0
 80216f6:	4659      	mov	r1, fp
 80216f8:	f7df fa20 	bl	8000b3c <__aeabi_d2iz>
 80216fc:	4605      	mov	r5, r0
 80216fe:	2800      	cmp	r0, #0
 8021700:	f040 8083 	bne.w	802180a <__kernel_tan+0x13a>
 8021704:	1c73      	adds	r3, r6, #1
 8021706:	4652      	mov	r2, sl
 8021708:	4313      	orrs	r3, r2
 802170a:	433b      	orrs	r3, r7
 802170c:	d112      	bne.n	8021734 <__kernel_tan+0x64>
 802170e:	ec4b ab10 	vmov	d0, sl, fp
 8021712:	f001 fa2b 	bl	8022b6c <fabs>
 8021716:	2000      	movs	r0, #0
 8021718:	49d2      	ldr	r1, [pc, #840]	; (8021a64 <__kernel_tan+0x394>)
 802171a:	ec53 2b10 	vmov	r2, r3, d0
 802171e:	f7df f887 	bl	8000830 <__aeabi_ddiv>
 8021722:	4682      	mov	sl, r0
 8021724:	468b      	mov	fp, r1
 8021726:	ec4b ab10 	vmov	d0, sl, fp
 802172a:	b003      	add	sp, #12
 802172c:	ecbd 8b06 	vpop	{d8-d10}
 8021730:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021734:	2e01      	cmp	r6, #1
 8021736:	d0f6      	beq.n	8021726 <__kernel_tan+0x56>
 8021738:	4642      	mov	r2, r8
 802173a:	464b      	mov	r3, r9
 802173c:	4650      	mov	r0, sl
 802173e:	4659      	mov	r1, fp
 8021740:	f7de fd96 	bl	8000270 <__adddf3>
 8021744:	4602      	mov	r2, r0
 8021746:	460b      	mov	r3, r1
 8021748:	460f      	mov	r7, r1
 802174a:	2000      	movs	r0, #0
 802174c:	49c6      	ldr	r1, [pc, #792]	; (8021a68 <__kernel_tan+0x398>)
 802174e:	f7df f86f 	bl	8000830 <__aeabi_ddiv>
 8021752:	462e      	mov	r6, r5
 8021754:	462c      	mov	r4, r5
 8021756:	e9cd 0100 	strd	r0, r1, [sp]
 802175a:	e9dd 2300 	ldrd	r2, r3, [sp]
 802175e:	4630      	mov	r0, r6
 8021760:	4652      	mov	r2, sl
 8021762:	461d      	mov	r5, r3
 8021764:	4639      	mov	r1, r7
 8021766:	465b      	mov	r3, fp
 8021768:	f7de fd80 	bl	800026c <__aeabi_dsub>
 802176c:	4602      	mov	r2, r0
 802176e:	460b      	mov	r3, r1
 8021770:	4640      	mov	r0, r8
 8021772:	4649      	mov	r1, r9
 8021774:	f7de fd7a 	bl	800026c <__aeabi_dsub>
 8021778:	4632      	mov	r2, r6
 802177a:	462b      	mov	r3, r5
 802177c:	f7de ff2e 	bl	80005dc <__aeabi_dmul>
 8021780:	4632      	mov	r2, r6
 8021782:	4680      	mov	r8, r0
 8021784:	4689      	mov	r9, r1
 8021786:	462b      	mov	r3, r5
 8021788:	4630      	mov	r0, r6
 802178a:	4639      	mov	r1, r7
 802178c:	f7de ff26 	bl	80005dc <__aeabi_dmul>
 8021790:	2200      	movs	r2, #0
 8021792:	4bb4      	ldr	r3, [pc, #720]	; (8021a64 <__kernel_tan+0x394>)
 8021794:	f7de fd6c 	bl	8000270 <__adddf3>
 8021798:	4602      	mov	r2, r0
 802179a:	460b      	mov	r3, r1
 802179c:	4640      	mov	r0, r8
 802179e:	4649      	mov	r1, r9
 80217a0:	f7de fd66 	bl	8000270 <__adddf3>
 80217a4:	e9dd 2300 	ldrd	r2, r3, [sp]
 80217a8:	f7de ff18 	bl	80005dc <__aeabi_dmul>
 80217ac:	4622      	mov	r2, r4
 80217ae:	462b      	mov	r3, r5
 80217b0:	f7de fd5e 	bl	8000270 <__adddf3>
 80217b4:	e7b5      	b.n	8021722 <__kernel_tan+0x52>
 80217b6:	4bad      	ldr	r3, [pc, #692]	; (8021a6c <__kernel_tan+0x39c>)
 80217b8:	429f      	cmp	r7, r3
 80217ba:	dd26      	ble.n	802180a <__kernel_tan+0x13a>
 80217bc:	9b00      	ldr	r3, [sp, #0]
 80217be:	2b00      	cmp	r3, #0
 80217c0:	da09      	bge.n	80217d6 <__kernel_tan+0x106>
 80217c2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80217c6:	ee10 aa10 	vmov	sl, s0
 80217ca:	ee11 8a10 	vmov	r8, s2
 80217ce:	469b      	mov	fp, r3
 80217d0:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80217d4:	4699      	mov	r9, r3
 80217d6:	4652      	mov	r2, sl
 80217d8:	465b      	mov	r3, fp
 80217da:	a183      	add	r1, pc, #524	; (adr r1, 80219e8 <__kernel_tan+0x318>)
 80217dc:	e9d1 0100 	ldrd	r0, r1, [r1]
 80217e0:	f7de fd44 	bl	800026c <__aeabi_dsub>
 80217e4:	4604      	mov	r4, r0
 80217e6:	460d      	mov	r5, r1
 80217e8:	4642      	mov	r2, r8
 80217ea:	464b      	mov	r3, r9
 80217ec:	f04f 0800 	mov.w	r8, #0
 80217f0:	f04f 0900 	mov.w	r9, #0
 80217f4:	a17e      	add	r1, pc, #504	; (adr r1, 80219f0 <__kernel_tan+0x320>)
 80217f6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80217fa:	f7de fd37 	bl	800026c <__aeabi_dsub>
 80217fe:	4622      	mov	r2, r4
 8021800:	462b      	mov	r3, r5
 8021802:	f7de fd35 	bl	8000270 <__adddf3>
 8021806:	4682      	mov	sl, r0
 8021808:	468b      	mov	fp, r1
 802180a:	4652      	mov	r2, sl
 802180c:	465b      	mov	r3, fp
 802180e:	4650      	mov	r0, sl
 8021810:	4659      	mov	r1, fp
 8021812:	f7de fee3 	bl	80005dc <__aeabi_dmul>
 8021816:	4602      	mov	r2, r0
 8021818:	460b      	mov	r3, r1
 802181a:	ec43 2b18 	vmov	d8, r2, r3
 802181e:	f7de fedd 	bl	80005dc <__aeabi_dmul>
 8021822:	4604      	mov	r4, r0
 8021824:	460d      	mov	r5, r1
 8021826:	4650      	mov	r0, sl
 8021828:	4659      	mov	r1, fp
 802182a:	ec53 2b18 	vmov	r2, r3, d8
 802182e:	f7de fed5 	bl	80005dc <__aeabi_dmul>
 8021832:	a371      	add	r3, pc, #452	; (adr r3, 80219f8 <__kernel_tan+0x328>)
 8021834:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021838:	ec41 0b19 	vmov	d9, r0, r1
 802183c:	4620      	mov	r0, r4
 802183e:	4629      	mov	r1, r5
 8021840:	f7de fecc 	bl	80005dc <__aeabi_dmul>
 8021844:	a36e      	add	r3, pc, #440	; (adr r3, 8021a00 <__kernel_tan+0x330>)
 8021846:	e9d3 2300 	ldrd	r2, r3, [r3]
 802184a:	f7de fd11 	bl	8000270 <__adddf3>
 802184e:	4622      	mov	r2, r4
 8021850:	462b      	mov	r3, r5
 8021852:	f7de fec3 	bl	80005dc <__aeabi_dmul>
 8021856:	a36c      	add	r3, pc, #432	; (adr r3, 8021a08 <__kernel_tan+0x338>)
 8021858:	e9d3 2300 	ldrd	r2, r3, [r3]
 802185c:	f7de fd08 	bl	8000270 <__adddf3>
 8021860:	4622      	mov	r2, r4
 8021862:	462b      	mov	r3, r5
 8021864:	f7de feba 	bl	80005dc <__aeabi_dmul>
 8021868:	a369      	add	r3, pc, #420	; (adr r3, 8021a10 <__kernel_tan+0x340>)
 802186a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802186e:	f7de fcff 	bl	8000270 <__adddf3>
 8021872:	4622      	mov	r2, r4
 8021874:	462b      	mov	r3, r5
 8021876:	f7de feb1 	bl	80005dc <__aeabi_dmul>
 802187a:	a367      	add	r3, pc, #412	; (adr r3, 8021a18 <__kernel_tan+0x348>)
 802187c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021880:	f7de fcf6 	bl	8000270 <__adddf3>
 8021884:	4622      	mov	r2, r4
 8021886:	462b      	mov	r3, r5
 8021888:	f7de fea8 	bl	80005dc <__aeabi_dmul>
 802188c:	a364      	add	r3, pc, #400	; (adr r3, 8021a20 <__kernel_tan+0x350>)
 802188e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021892:	f7de fced 	bl	8000270 <__adddf3>
 8021896:	ec53 2b18 	vmov	r2, r3, d8
 802189a:	f7de fe9f 	bl	80005dc <__aeabi_dmul>
 802189e:	a362      	add	r3, pc, #392	; (adr r3, 8021a28 <__kernel_tan+0x358>)
 80218a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80218a4:	ec41 0b1a 	vmov	d10, r0, r1
 80218a8:	4620      	mov	r0, r4
 80218aa:	4629      	mov	r1, r5
 80218ac:	f7de fe96 	bl	80005dc <__aeabi_dmul>
 80218b0:	a35f      	add	r3, pc, #380	; (adr r3, 8021a30 <__kernel_tan+0x360>)
 80218b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80218b6:	f7de fcdb 	bl	8000270 <__adddf3>
 80218ba:	4622      	mov	r2, r4
 80218bc:	462b      	mov	r3, r5
 80218be:	f7de fe8d 	bl	80005dc <__aeabi_dmul>
 80218c2:	a35d      	add	r3, pc, #372	; (adr r3, 8021a38 <__kernel_tan+0x368>)
 80218c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80218c8:	f7de fcd2 	bl	8000270 <__adddf3>
 80218cc:	4622      	mov	r2, r4
 80218ce:	462b      	mov	r3, r5
 80218d0:	f7de fe84 	bl	80005dc <__aeabi_dmul>
 80218d4:	a35a      	add	r3, pc, #360	; (adr r3, 8021a40 <__kernel_tan+0x370>)
 80218d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80218da:	f7de fcc9 	bl	8000270 <__adddf3>
 80218de:	4622      	mov	r2, r4
 80218e0:	462b      	mov	r3, r5
 80218e2:	f7de fe7b 	bl	80005dc <__aeabi_dmul>
 80218e6:	a358      	add	r3, pc, #352	; (adr r3, 8021a48 <__kernel_tan+0x378>)
 80218e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80218ec:	f7de fcc0 	bl	8000270 <__adddf3>
 80218f0:	4622      	mov	r2, r4
 80218f2:	462b      	mov	r3, r5
 80218f4:	f7de fe72 	bl	80005dc <__aeabi_dmul>
 80218f8:	a355      	add	r3, pc, #340	; (adr r3, 8021a50 <__kernel_tan+0x380>)
 80218fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80218fe:	f7de fcb7 	bl	8000270 <__adddf3>
 8021902:	4602      	mov	r2, r0
 8021904:	460b      	mov	r3, r1
 8021906:	ec51 0b1a 	vmov	r0, r1, d10
 802190a:	f7de fcb1 	bl	8000270 <__adddf3>
 802190e:	ec53 2b19 	vmov	r2, r3, d9
 8021912:	f7de fe63 	bl	80005dc <__aeabi_dmul>
 8021916:	4642      	mov	r2, r8
 8021918:	464b      	mov	r3, r9
 802191a:	f7de fca9 	bl	8000270 <__adddf3>
 802191e:	ec53 2b18 	vmov	r2, r3, d8
 8021922:	f7de fe5b 	bl	80005dc <__aeabi_dmul>
 8021926:	4642      	mov	r2, r8
 8021928:	464b      	mov	r3, r9
 802192a:	f7de fca1 	bl	8000270 <__adddf3>
 802192e:	4604      	mov	r4, r0
 8021930:	460d      	mov	r5, r1
 8021932:	a349      	add	r3, pc, #292	; (adr r3, 8021a58 <__kernel_tan+0x388>)
 8021934:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021938:	ec51 0b19 	vmov	r0, r1, d9
 802193c:	f7de fe4e 	bl	80005dc <__aeabi_dmul>
 8021940:	4622      	mov	r2, r4
 8021942:	462b      	mov	r3, r5
 8021944:	f7de fc94 	bl	8000270 <__adddf3>
 8021948:	460b      	mov	r3, r1
 802194a:	4602      	mov	r2, r0
 802194c:	ec41 0b18 	vmov	d8, r0, r1
 8021950:	4650      	mov	r0, sl
 8021952:	4659      	mov	r1, fp
 8021954:	f7de fc8c 	bl	8000270 <__adddf3>
 8021958:	4b44      	ldr	r3, [pc, #272]	; (8021a6c <__kernel_tan+0x39c>)
 802195a:	4604      	mov	r4, r0
 802195c:	460d      	mov	r5, r1
 802195e:	429f      	cmp	r7, r3
 8021960:	f340 8086 	ble.w	8021a70 <__kernel_tan+0x3a0>
 8021964:	4630      	mov	r0, r6
 8021966:	f7de fdcf 	bl	8000508 <__aeabi_i2d>
 802196a:	4622      	mov	r2, r4
 802196c:	4680      	mov	r8, r0
 802196e:	4689      	mov	r9, r1
 8021970:	462b      	mov	r3, r5
 8021972:	4620      	mov	r0, r4
 8021974:	4629      	mov	r1, r5
 8021976:	f7de fe31 	bl	80005dc <__aeabi_dmul>
 802197a:	4606      	mov	r6, r0
 802197c:	460f      	mov	r7, r1
 802197e:	4642      	mov	r2, r8
 8021980:	464b      	mov	r3, r9
 8021982:	4620      	mov	r0, r4
 8021984:	4629      	mov	r1, r5
 8021986:	f7de fc73 	bl	8000270 <__adddf3>
 802198a:	4602      	mov	r2, r0
 802198c:	460b      	mov	r3, r1
 802198e:	4630      	mov	r0, r6
 8021990:	4639      	mov	r1, r7
 8021992:	f7de ff4d 	bl	8000830 <__aeabi_ddiv>
 8021996:	ec53 2b18 	vmov	r2, r3, d8
 802199a:	f7de fc67 	bl	800026c <__aeabi_dsub>
 802199e:	4602      	mov	r2, r0
 80219a0:	460b      	mov	r3, r1
 80219a2:	4650      	mov	r0, sl
 80219a4:	4659      	mov	r1, fp
 80219a6:	f7de fc61 	bl	800026c <__aeabi_dsub>
 80219aa:	4602      	mov	r2, r0
 80219ac:	460b      	mov	r3, r1
 80219ae:	f7de fc5f 	bl	8000270 <__adddf3>
 80219b2:	4602      	mov	r2, r0
 80219b4:	460b      	mov	r3, r1
 80219b6:	4640      	mov	r0, r8
 80219b8:	4649      	mov	r1, r9
 80219ba:	f7de fc57 	bl	800026c <__aeabi_dsub>
 80219be:	9b00      	ldr	r3, [sp, #0]
 80219c0:	4604      	mov	r4, r0
 80219c2:	460d      	mov	r5, r1
 80219c4:	ea4f 7aa3 	mov.w	sl, r3, asr #30
 80219c8:	f00a 0a02 	and.w	sl, sl, #2
 80219cc:	f1ca 0001 	rsb	r0, sl, #1
 80219d0:	f7de fd9a 	bl	8000508 <__aeabi_i2d>
 80219d4:	4602      	mov	r2, r0
 80219d6:	460b      	mov	r3, r1
 80219d8:	4620      	mov	r0, r4
 80219da:	4629      	mov	r1, r5
 80219dc:	f7de fdfe 	bl	80005dc <__aeabi_dmul>
 80219e0:	e69f      	b.n	8021722 <__kernel_tan+0x52>
 80219e2:	bf00      	nop
 80219e4:	f3af 8000 	nop.w
 80219e8:	54442d18 	.word	0x54442d18
 80219ec:	3fe921fb 	.word	0x3fe921fb
 80219f0:	33145c07 	.word	0x33145c07
 80219f4:	3c81a626 	.word	0x3c81a626
 80219f8:	74bf7ad4 	.word	0x74bf7ad4
 80219fc:	3efb2a70 	.word	0x3efb2a70
 8021a00:	32f0a7e9 	.word	0x32f0a7e9
 8021a04:	3f12b80f 	.word	0x3f12b80f
 8021a08:	1a8d1068 	.word	0x1a8d1068
 8021a0c:	3f3026f7 	.word	0x3f3026f7
 8021a10:	fee08315 	.word	0xfee08315
 8021a14:	3f57dbc8 	.word	0x3f57dbc8
 8021a18:	e96e8493 	.word	0xe96e8493
 8021a1c:	3f8226e3 	.word	0x3f8226e3
 8021a20:	1bb341fe 	.word	0x1bb341fe
 8021a24:	3faba1ba 	.word	0x3faba1ba
 8021a28:	db605373 	.word	0xdb605373
 8021a2c:	bef375cb 	.word	0xbef375cb
 8021a30:	a03792a6 	.word	0xa03792a6
 8021a34:	3f147e88 	.word	0x3f147e88
 8021a38:	f2f26501 	.word	0xf2f26501
 8021a3c:	3f4344d8 	.word	0x3f4344d8
 8021a40:	c9560328 	.word	0xc9560328
 8021a44:	3f6d6d22 	.word	0x3f6d6d22
 8021a48:	8406d637 	.word	0x8406d637
 8021a4c:	3f9664f4 	.word	0x3f9664f4
 8021a50:	1110fe7a 	.word	0x1110fe7a
 8021a54:	3fc11111 	.word	0x3fc11111
 8021a58:	55555563 	.word	0x55555563
 8021a5c:	3fd55555 	.word	0x3fd55555
 8021a60:	3e2fffff 	.word	0x3e2fffff
 8021a64:	3ff00000 	.word	0x3ff00000
 8021a68:	bff00000 	.word	0xbff00000
 8021a6c:	3fe59427 	.word	0x3fe59427
 8021a70:	2e01      	cmp	r6, #1
 8021a72:	d02f      	beq.n	8021ad4 <__kernel_tan+0x404>
 8021a74:	2600      	movs	r6, #0
 8021a76:	460f      	mov	r7, r1
 8021a78:	4602      	mov	r2, r0
 8021a7a:	460b      	mov	r3, r1
 8021a7c:	4689      	mov	r9, r1
 8021a7e:	2000      	movs	r0, #0
 8021a80:	4916      	ldr	r1, [pc, #88]	; (8021adc <__kernel_tan+0x40c>)
 8021a82:	46b0      	mov	r8, r6
 8021a84:	f7de fed4 	bl	8000830 <__aeabi_ddiv>
 8021a88:	4652      	mov	r2, sl
 8021a8a:	465b      	mov	r3, fp
 8021a8c:	e9cd 0100 	strd	r0, r1, [sp]
 8021a90:	e9dd 4500 	ldrd	r4, r5, [sp]
 8021a94:	4630      	mov	r0, r6
 8021a96:	4639      	mov	r1, r7
 8021a98:	f7de fbe8 	bl	800026c <__aeabi_dsub>
 8021a9c:	4602      	mov	r2, r0
 8021a9e:	460b      	mov	r3, r1
 8021aa0:	4634      	mov	r4, r6
 8021aa2:	ec51 0b18 	vmov	r0, r1, d8
 8021aa6:	f7de fbe1 	bl	800026c <__aeabi_dsub>
 8021aaa:	4632      	mov	r2, r6
 8021aac:	462b      	mov	r3, r5
 8021aae:	f7de fd95 	bl	80005dc <__aeabi_dmul>
 8021ab2:	4642      	mov	r2, r8
 8021ab4:	4606      	mov	r6, r0
 8021ab6:	460f      	mov	r7, r1
 8021ab8:	462b      	mov	r3, r5
 8021aba:	4640      	mov	r0, r8
 8021abc:	4649      	mov	r1, r9
 8021abe:	f7de fd8d 	bl	80005dc <__aeabi_dmul>
 8021ac2:	2200      	movs	r2, #0
 8021ac4:	4b06      	ldr	r3, [pc, #24]	; (8021ae0 <__kernel_tan+0x410>)
 8021ac6:	f7de fbd3 	bl	8000270 <__adddf3>
 8021aca:	4602      	mov	r2, r0
 8021acc:	460b      	mov	r3, r1
 8021ace:	4630      	mov	r0, r6
 8021ad0:	4639      	mov	r1, r7
 8021ad2:	e665      	b.n	80217a0 <__kernel_tan+0xd0>
 8021ad4:	4682      	mov	sl, r0
 8021ad6:	468b      	mov	fp, r1
 8021ad8:	e625      	b.n	8021726 <__kernel_tan+0x56>
 8021ada:	bf00      	nop
 8021adc:	bff00000 	.word	0xbff00000
 8021ae0:	3ff00000 	.word	0x3ff00000

08021ae4 <__ieee754_fmod>:
 8021ae4:	ec53 2b11 	vmov	r2, r3, d1
 8021ae8:	f023 4c00 	bic.w	ip, r3, #2147483648	; 0x80000000
 8021aec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8021af0:	ea5c 0402 	orrs.w	r4, ip, r2
 8021af4:	461e      	mov	r6, r3
 8021af6:	ee11 7a10 	vmov	r7, s2
 8021afa:	ee11 ea10 	vmov	lr, s2
 8021afe:	ec51 0b10 	vmov	r0, r1, d0
 8021b02:	d00c      	beq.n	8021b1e <__ieee754_fmod+0x3a>
 8021b04:	f021 4800 	bic.w	r8, r1, #2147483648	; 0x80000000
 8021b08:	4c77      	ldr	r4, [pc, #476]	; (8021ce8 <__ieee754_fmod+0x204>)
 8021b0a:	4689      	mov	r9, r1
 8021b0c:	45a0      	cmp	r8, r4
 8021b0e:	dc06      	bgt.n	8021b1e <__ieee754_fmod+0x3a>
 8021b10:	4254      	negs	r4, r2
 8021b12:	4d76      	ldr	r5, [pc, #472]	; (8021cec <__ieee754_fmod+0x208>)
 8021b14:	4314      	orrs	r4, r2
 8021b16:	ea4c 74d4 	orr.w	r4, ip, r4, lsr #31
 8021b1a:	42ac      	cmp	r4, r5
 8021b1c:	d909      	bls.n	8021b32 <__ieee754_fmod+0x4e>
 8021b1e:	f7de fd5d 	bl	80005dc <__aeabi_dmul>
 8021b22:	4602      	mov	r2, r0
 8021b24:	460b      	mov	r3, r1
 8021b26:	f7de fe83 	bl	8000830 <__aeabi_ddiv>
 8021b2a:	ec41 0b10 	vmov	d0, r0, r1
 8021b2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8021b32:	45e0      	cmp	r8, ip
 8021b34:	ee10 aa10 	vmov	sl, s0
 8021b38:	ee10 4a10 	vmov	r4, s0
 8021b3c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8021b40:	dc09      	bgt.n	8021b56 <__ieee754_fmod+0x72>
 8021b42:	dbf2      	blt.n	8021b2a <__ieee754_fmod+0x46>
 8021b44:	4290      	cmp	r0, r2
 8021b46:	d3f0      	bcc.n	8021b2a <__ieee754_fmod+0x46>
 8021b48:	d105      	bne.n	8021b56 <__ieee754_fmod+0x72>
 8021b4a:	4b69      	ldr	r3, [pc, #420]	; (8021cf0 <__ieee754_fmod+0x20c>)
 8021b4c:	eb03 7315 	add.w	r3, r3, r5, lsr #28
 8021b50:	e9d3 0100 	ldrd	r0, r1, [r3]
 8021b54:	e7e9      	b.n	8021b2a <__ieee754_fmod+0x46>
 8021b56:	4a65      	ldr	r2, [pc, #404]	; (8021cec <__ieee754_fmod+0x208>)
 8021b58:	ea19 0f02 	tst.w	r9, r2
 8021b5c:	d148      	bne.n	8021bf0 <__ieee754_fmod+0x10c>
 8021b5e:	f1b8 0f00 	cmp.w	r8, #0
 8021b62:	d13d      	bne.n	8021be0 <__ieee754_fmod+0xfc>
 8021b64:	4653      	mov	r3, sl
 8021b66:	4963      	ldr	r1, [pc, #396]	; (8021cf4 <__ieee754_fmod+0x210>)
 8021b68:	2b00      	cmp	r3, #0
 8021b6a:	dc36      	bgt.n	8021bda <__ieee754_fmod+0xf6>
 8021b6c:	4216      	tst	r6, r2
 8021b6e:	d14f      	bne.n	8021c10 <__ieee754_fmod+0x12c>
 8021b70:	f1bc 0f00 	cmp.w	ip, #0
 8021b74:	d144      	bne.n	8021c00 <__ieee754_fmod+0x11c>
 8021b76:	463b      	mov	r3, r7
 8021b78:	4a5e      	ldr	r2, [pc, #376]	; (8021cf4 <__ieee754_fmod+0x210>)
 8021b7a:	2b00      	cmp	r3, #0
 8021b7c:	dc3d      	bgt.n	8021bfa <__ieee754_fmod+0x116>
 8021b7e:	485e      	ldr	r0, [pc, #376]	; (8021cf8 <__ieee754_fmod+0x214>)
 8021b80:	4281      	cmp	r1, r0
 8021b82:	db4a      	blt.n	8021c1a <__ieee754_fmod+0x136>
 8021b84:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8021b88:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8021b8c:	485a      	ldr	r0, [pc, #360]	; (8021cf8 <__ieee754_fmod+0x214>)
 8021b8e:	4282      	cmp	r2, r0
 8021b90:	db57      	blt.n	8021c42 <__ieee754_fmod+0x15e>
 8021b92:	f3c6 0613 	ubfx	r6, r6, #0, #20
 8021b96:	f446 1680 	orr.w	r6, r6, #1048576	; 0x100000
 8021b9a:	1a89      	subs	r1, r1, r2
 8021b9c:	1b98      	subs	r0, r3, r6
 8021b9e:	eba4 070e 	sub.w	r7, r4, lr
 8021ba2:	2900      	cmp	r1, #0
 8021ba4:	d162      	bne.n	8021c6c <__ieee754_fmod+0x188>
 8021ba6:	4574      	cmp	r4, lr
 8021ba8:	bf38      	it	cc
 8021baa:	f100 30ff 	addcc.w	r0, r0, #4294967295
 8021bae:	2800      	cmp	r0, #0
 8021bb0:	bfa4      	itt	ge
 8021bb2:	463c      	movge	r4, r7
 8021bb4:	4603      	movge	r3, r0
 8021bb6:	ea53 0104 	orrs.w	r1, r3, r4
 8021bba:	d0c6      	beq.n	8021b4a <__ieee754_fmod+0x66>
 8021bbc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8021bc0:	db69      	blt.n	8021c96 <__ieee754_fmod+0x1b2>
 8021bc2:	494d      	ldr	r1, [pc, #308]	; (8021cf8 <__ieee754_fmod+0x214>)
 8021bc4:	428a      	cmp	r2, r1
 8021bc6:	db6c      	blt.n	8021ca2 <__ieee754_fmod+0x1be>
 8021bc8:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8021bcc:	f202 32ff 	addw	r2, r2, #1023	; 0x3ff
 8021bd0:	4620      	mov	r0, r4
 8021bd2:	432b      	orrs	r3, r5
 8021bd4:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8021bd8:	e7a7      	b.n	8021b2a <__ieee754_fmod+0x46>
 8021bda:	3901      	subs	r1, #1
 8021bdc:	005b      	lsls	r3, r3, #1
 8021bde:	e7c3      	b.n	8021b68 <__ieee754_fmod+0x84>
 8021be0:	ea4f 23c8 	mov.w	r3, r8, lsl #11
 8021be4:	4944      	ldr	r1, [pc, #272]	; (8021cf8 <__ieee754_fmod+0x214>)
 8021be6:	2b00      	cmp	r3, #0
 8021be8:	ddc0      	ble.n	8021b6c <__ieee754_fmod+0x88>
 8021bea:	3901      	subs	r1, #1
 8021bec:	005b      	lsls	r3, r3, #1
 8021bee:	e7fa      	b.n	8021be6 <__ieee754_fmod+0x102>
 8021bf0:	ea4f 5128 	mov.w	r1, r8, asr #20
 8021bf4:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 8021bf8:	e7b8      	b.n	8021b6c <__ieee754_fmod+0x88>
 8021bfa:	3a01      	subs	r2, #1
 8021bfc:	005b      	lsls	r3, r3, #1
 8021bfe:	e7bc      	b.n	8021b7a <__ieee754_fmod+0x96>
 8021c00:	ea4f 23cc 	mov.w	r3, ip, lsl #11
 8021c04:	4a3c      	ldr	r2, [pc, #240]	; (8021cf8 <__ieee754_fmod+0x214>)
 8021c06:	2b00      	cmp	r3, #0
 8021c08:	ddb9      	ble.n	8021b7e <__ieee754_fmod+0x9a>
 8021c0a:	3a01      	subs	r2, #1
 8021c0c:	005b      	lsls	r3, r3, #1
 8021c0e:	e7fa      	b.n	8021c06 <__ieee754_fmod+0x122>
 8021c10:	ea4f 522c 	mov.w	r2, ip, asr #20
 8021c14:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8021c18:	e7b1      	b.n	8021b7e <__ieee754_fmod+0x9a>
 8021c1a:	1a40      	subs	r0, r0, r1
 8021c1c:	281f      	cmp	r0, #31
 8021c1e:	dc0a      	bgt.n	8021c36 <__ieee754_fmod+0x152>
 8021c20:	f201 431e 	addw	r3, r1, #1054	; 0x41e
 8021c24:	fa08 f800 	lsl.w	r8, r8, r0
 8021c28:	fa0a f400 	lsl.w	r4, sl, r0
 8021c2c:	fa2a f303 	lsr.w	r3, sl, r3
 8021c30:	ea43 0308 	orr.w	r3, r3, r8
 8021c34:	e7aa      	b.n	8021b8c <__ieee754_fmod+0xa8>
 8021c36:	4b31      	ldr	r3, [pc, #196]	; (8021cfc <__ieee754_fmod+0x218>)
 8021c38:	2400      	movs	r4, #0
 8021c3a:	1a5b      	subs	r3, r3, r1
 8021c3c:	fa0a f303 	lsl.w	r3, sl, r3
 8021c40:	e7a4      	b.n	8021b8c <__ieee754_fmod+0xa8>
 8021c42:	1a80      	subs	r0, r0, r2
 8021c44:	281f      	cmp	r0, #31
 8021c46:	dc0a      	bgt.n	8021c5e <__ieee754_fmod+0x17a>
 8021c48:	f202 461e 	addw	r6, r2, #1054	; 0x41e
 8021c4c:	fa0c fc00 	lsl.w	ip, ip, r0
 8021c50:	fa07 fe00 	lsl.w	lr, r7, r0
 8021c54:	fa27 f606 	lsr.w	r6, r7, r6
 8021c58:	ea46 060c 	orr.w	r6, r6, ip
 8021c5c:	e79d      	b.n	8021b9a <__ieee754_fmod+0xb6>
 8021c5e:	4e27      	ldr	r6, [pc, #156]	; (8021cfc <__ieee754_fmod+0x218>)
 8021c60:	f04f 0e00 	mov.w	lr, #0
 8021c64:	1ab6      	subs	r6, r6, r2
 8021c66:	fa07 f606 	lsl.w	r6, r7, r6
 8021c6a:	e796      	b.n	8021b9a <__ieee754_fmod+0xb6>
 8021c6c:	4574      	cmp	r4, lr
 8021c6e:	bf38      	it	cc
 8021c70:	f100 30ff 	addcc.w	r0, r0, #4294967295
 8021c74:	2800      	cmp	r0, #0
 8021c76:	da05      	bge.n	8021c84 <__ieee754_fmod+0x1a0>
 8021c78:	0fe0      	lsrs	r0, r4, #31
 8021c7a:	0064      	lsls	r4, r4, #1
 8021c7c:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8021c80:	3901      	subs	r1, #1
 8021c82:	e78b      	b.n	8021b9c <__ieee754_fmod+0xb8>
 8021c84:	ea50 0307 	orrs.w	r3, r0, r7
 8021c88:	f43f af5f 	beq.w	8021b4a <__ieee754_fmod+0x66>
 8021c8c:	0ffb      	lsrs	r3, r7, #31
 8021c8e:	007c      	lsls	r4, r7, #1
 8021c90:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 8021c94:	e7f4      	b.n	8021c80 <__ieee754_fmod+0x19c>
 8021c96:	0fe1      	lsrs	r1, r4, #31
 8021c98:	3a01      	subs	r2, #1
 8021c9a:	0064      	lsls	r4, r4, #1
 8021c9c:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 8021ca0:	e78c      	b.n	8021bbc <__ieee754_fmod+0xd8>
 8021ca2:	1a89      	subs	r1, r1, r2
 8021ca4:	2914      	cmp	r1, #20
 8021ca6:	dc0a      	bgt.n	8021cbe <__ieee754_fmod+0x1da>
 8021ca8:	f202 421e 	addw	r2, r2, #1054	; 0x41e
 8021cac:	40cc      	lsrs	r4, r1
 8021cae:	fa03 f202 	lsl.w	r2, r3, r2
 8021cb2:	410b      	asrs	r3, r1
 8021cb4:	4322      	orrs	r2, r4
 8021cb6:	ea43 0105 	orr.w	r1, r3, r5
 8021cba:	4610      	mov	r0, r2
 8021cbc:	e735      	b.n	8021b2a <__ieee754_fmod+0x46>
 8021cbe:	291f      	cmp	r1, #31
 8021cc0:	dc07      	bgt.n	8021cd2 <__ieee754_fmod+0x1ee>
 8021cc2:	f202 421e 	addw	r2, r2, #1054	; 0x41e
 8021cc6:	40cc      	lsrs	r4, r1
 8021cc8:	fa03 f202 	lsl.w	r2, r3, r2
 8021ccc:	4322      	orrs	r2, r4
 8021cce:	462b      	mov	r3, r5
 8021cd0:	e7f1      	b.n	8021cb6 <__ieee754_fmod+0x1d2>
 8021cd2:	f1c2 427f 	rsb	r2, r2, #4278190080	; 0xff000000
 8021cd6:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8021cda:	f502 427b 	add.w	r2, r2, #64256	; 0xfb00
 8021cde:	32e2      	adds	r2, #226	; 0xe2
 8021ce0:	fa43 f202 	asr.w	r2, r3, r2
 8021ce4:	e7f3      	b.n	8021cce <__ieee754_fmod+0x1ea>
 8021ce6:	bf00      	nop
 8021ce8:	7fefffff 	.word	0x7fefffff
 8021cec:	7ff00000 	.word	0x7ff00000
 8021cf0:	08026010 	.word	0x08026010
 8021cf4:	fffffbed 	.word	0xfffffbed
 8021cf8:	fffffc02 	.word	0xfffffc02
 8021cfc:	fffffbe2 	.word	0xfffffbe2

08021d00 <__ieee754_pow>:
 8021d00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021d04:	ed2d 8b06 	vpush	{d8-d10}
 8021d08:	b089      	sub	sp, #36	; 0x24
 8021d0a:	ed8d 1b00 	vstr	d1, [sp]
 8021d0e:	e9dd 2900 	ldrd	r2, r9, [sp]
 8021d12:	ec57 6b10 	vmov	r6, r7, d0
 8021d16:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 8021d1a:	ea58 0102 	orrs.w	r1, r8, r2
 8021d1e:	d115      	bne.n	8021d4c <__ieee754_pow+0x4c>
 8021d20:	19b3      	adds	r3, r6, r6
 8021d22:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 8021d26:	4152      	adcs	r2, r2
 8021d28:	4299      	cmp	r1, r3
 8021d2a:	4b89      	ldr	r3, [pc, #548]	; (8021f50 <__ieee754_pow+0x250>)
 8021d2c:	4193      	sbcs	r3, r2
 8021d2e:	f080 84d2 	bcs.w	80226d6 <__ieee754_pow+0x9d6>
 8021d32:	4630      	mov	r0, r6
 8021d34:	4639      	mov	r1, r7
 8021d36:	e9dd 2300 	ldrd	r2, r3, [sp]
 8021d3a:	f7de fa99 	bl	8000270 <__adddf3>
 8021d3e:	ec41 0b10 	vmov	d0, r0, r1
 8021d42:	b009      	add	sp, #36	; 0x24
 8021d44:	ecbd 8b06 	vpop	{d8-d10}
 8021d48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021d4c:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 8021d50:	4b80      	ldr	r3, [pc, #512]	; (8021f54 <__ieee754_pow+0x254>)
 8021d52:	463d      	mov	r5, r7
 8021d54:	ee10 aa10 	vmov	sl, s0
 8021d58:	429c      	cmp	r4, r3
 8021d5a:	dc06      	bgt.n	8021d6a <__ieee754_pow+0x6a>
 8021d5c:	d101      	bne.n	8021d62 <__ieee754_pow+0x62>
 8021d5e:	2e00      	cmp	r6, #0
 8021d60:	d1e7      	bne.n	8021d32 <__ieee754_pow+0x32>
 8021d62:	4598      	cmp	r8, r3
 8021d64:	dc01      	bgt.n	8021d6a <__ieee754_pow+0x6a>
 8021d66:	d10f      	bne.n	8021d88 <__ieee754_pow+0x88>
 8021d68:	b172      	cbz	r2, 8021d88 <__ieee754_pow+0x88>
 8021d6a:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 8021d6e:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 8021d72:	ea55 050a 	orrs.w	r5, r5, sl
 8021d76:	d1dc      	bne.n	8021d32 <__ieee754_pow+0x32>
 8021d78:	e9dd 3200 	ldrd	r3, r2, [sp]
 8021d7c:	18db      	adds	r3, r3, r3
 8021d7e:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 8021d82:	4152      	adcs	r2, r2
 8021d84:	429d      	cmp	r5, r3
 8021d86:	e7d0      	b.n	8021d2a <__ieee754_pow+0x2a>
 8021d88:	2d00      	cmp	r5, #0
 8021d8a:	da3b      	bge.n	8021e04 <__ieee754_pow+0x104>
 8021d8c:	4b72      	ldr	r3, [pc, #456]	; (8021f58 <__ieee754_pow+0x258>)
 8021d8e:	4598      	cmp	r8, r3
 8021d90:	dc51      	bgt.n	8021e36 <__ieee754_pow+0x136>
 8021d92:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8021d96:	4598      	cmp	r8, r3
 8021d98:	f340 84ac 	ble.w	80226f4 <__ieee754_pow+0x9f4>
 8021d9c:	ea4f 5328 	mov.w	r3, r8, asr #20
 8021da0:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8021da4:	2b14      	cmp	r3, #20
 8021da6:	dd0f      	ble.n	8021dc8 <__ieee754_pow+0xc8>
 8021da8:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8021dac:	fa22 f103 	lsr.w	r1, r2, r3
 8021db0:	fa01 f303 	lsl.w	r3, r1, r3
 8021db4:	4293      	cmp	r3, r2
 8021db6:	f040 849d 	bne.w	80226f4 <__ieee754_pow+0x9f4>
 8021dba:	f001 0101 	and.w	r1, r1, #1
 8021dbe:	f1c1 0302 	rsb	r3, r1, #2
 8021dc2:	9304      	str	r3, [sp, #16]
 8021dc4:	b182      	cbz	r2, 8021de8 <__ieee754_pow+0xe8>
 8021dc6:	e05f      	b.n	8021e88 <__ieee754_pow+0x188>
 8021dc8:	2a00      	cmp	r2, #0
 8021dca:	d15b      	bne.n	8021e84 <__ieee754_pow+0x184>
 8021dcc:	f1c3 0314 	rsb	r3, r3, #20
 8021dd0:	fa48 f103 	asr.w	r1, r8, r3
 8021dd4:	fa01 f303 	lsl.w	r3, r1, r3
 8021dd8:	4543      	cmp	r3, r8
 8021dda:	f040 8488 	bne.w	80226ee <__ieee754_pow+0x9ee>
 8021dde:	f001 0101 	and.w	r1, r1, #1
 8021de2:	f1c1 0302 	rsb	r3, r1, #2
 8021de6:	9304      	str	r3, [sp, #16]
 8021de8:	4b5c      	ldr	r3, [pc, #368]	; (8021f5c <__ieee754_pow+0x25c>)
 8021dea:	4598      	cmp	r8, r3
 8021dec:	d132      	bne.n	8021e54 <__ieee754_pow+0x154>
 8021dee:	f1b9 0f00 	cmp.w	r9, #0
 8021df2:	f280 8478 	bge.w	80226e6 <__ieee754_pow+0x9e6>
 8021df6:	4632      	mov	r2, r6
 8021df8:	463b      	mov	r3, r7
 8021dfa:	2000      	movs	r0, #0
 8021dfc:	4957      	ldr	r1, [pc, #348]	; (8021f5c <__ieee754_pow+0x25c>)
 8021dfe:	f7de fd17 	bl	8000830 <__aeabi_ddiv>
 8021e02:	e79c      	b.n	8021d3e <__ieee754_pow+0x3e>
 8021e04:	2300      	movs	r3, #0
 8021e06:	9304      	str	r3, [sp, #16]
 8021e08:	2a00      	cmp	r2, #0
 8021e0a:	d13d      	bne.n	8021e88 <__ieee754_pow+0x188>
 8021e0c:	4b51      	ldr	r3, [pc, #324]	; (8021f54 <__ieee754_pow+0x254>)
 8021e0e:	4598      	cmp	r8, r3
 8021e10:	d1ea      	bne.n	8021de8 <__ieee754_pow+0xe8>
 8021e12:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8021e16:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8021e1a:	ea53 030a 	orrs.w	r3, r3, sl
 8021e1e:	f000 845a 	beq.w	80226d6 <__ieee754_pow+0x9d6>
 8021e22:	4b4f      	ldr	r3, [pc, #316]	; (8021f60 <__ieee754_pow+0x260>)
 8021e24:	429c      	cmp	r4, r3
 8021e26:	dd08      	ble.n	8021e3a <__ieee754_pow+0x13a>
 8021e28:	f1b9 0f00 	cmp.w	r9, #0
 8021e2c:	f2c0 8457 	blt.w	80226de <__ieee754_pow+0x9de>
 8021e30:	e9dd 0100 	ldrd	r0, r1, [sp]
 8021e34:	e783      	b.n	8021d3e <__ieee754_pow+0x3e>
 8021e36:	2302      	movs	r3, #2
 8021e38:	e7e5      	b.n	8021e06 <__ieee754_pow+0x106>
 8021e3a:	f1b9 0f00 	cmp.w	r9, #0
 8021e3e:	f04f 0000 	mov.w	r0, #0
 8021e42:	f04f 0100 	mov.w	r1, #0
 8021e46:	f6bf af7a 	bge.w	8021d3e <__ieee754_pow+0x3e>
 8021e4a:	e9dd 0300 	ldrd	r0, r3, [sp]
 8021e4e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8021e52:	e774      	b.n	8021d3e <__ieee754_pow+0x3e>
 8021e54:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8021e58:	d106      	bne.n	8021e68 <__ieee754_pow+0x168>
 8021e5a:	4632      	mov	r2, r6
 8021e5c:	463b      	mov	r3, r7
 8021e5e:	4630      	mov	r0, r6
 8021e60:	4639      	mov	r1, r7
 8021e62:	f7de fbbb 	bl	80005dc <__aeabi_dmul>
 8021e66:	e76a      	b.n	8021d3e <__ieee754_pow+0x3e>
 8021e68:	4b3e      	ldr	r3, [pc, #248]	; (8021f64 <__ieee754_pow+0x264>)
 8021e6a:	4599      	cmp	r9, r3
 8021e6c:	d10c      	bne.n	8021e88 <__ieee754_pow+0x188>
 8021e6e:	2d00      	cmp	r5, #0
 8021e70:	db0a      	blt.n	8021e88 <__ieee754_pow+0x188>
 8021e72:	ec47 6b10 	vmov	d0, r6, r7
 8021e76:	b009      	add	sp, #36	; 0x24
 8021e78:	ecbd 8b06 	vpop	{d8-d10}
 8021e7c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021e80:	f7ff bb44 	b.w	802150c <__ieee754_sqrt>
 8021e84:	2300      	movs	r3, #0
 8021e86:	9304      	str	r3, [sp, #16]
 8021e88:	ec47 6b10 	vmov	d0, r6, r7
 8021e8c:	f000 fe6e 	bl	8022b6c <fabs>
 8021e90:	ec51 0b10 	vmov	r0, r1, d0
 8021e94:	f1ba 0f00 	cmp.w	sl, #0
 8021e98:	d129      	bne.n	8021eee <__ieee754_pow+0x1ee>
 8021e9a:	b124      	cbz	r4, 8021ea6 <__ieee754_pow+0x1a6>
 8021e9c:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 8021ea0:	4b2e      	ldr	r3, [pc, #184]	; (8021f5c <__ieee754_pow+0x25c>)
 8021ea2:	429a      	cmp	r2, r3
 8021ea4:	d123      	bne.n	8021eee <__ieee754_pow+0x1ee>
 8021ea6:	f1b9 0f00 	cmp.w	r9, #0
 8021eaa:	da05      	bge.n	8021eb8 <__ieee754_pow+0x1b8>
 8021eac:	4602      	mov	r2, r0
 8021eae:	460b      	mov	r3, r1
 8021eb0:	2000      	movs	r0, #0
 8021eb2:	492a      	ldr	r1, [pc, #168]	; (8021f5c <__ieee754_pow+0x25c>)
 8021eb4:	f7de fcbc 	bl	8000830 <__aeabi_ddiv>
 8021eb8:	2d00      	cmp	r5, #0
 8021eba:	f6bf af40 	bge.w	8021d3e <__ieee754_pow+0x3e>
 8021ebe:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8021ec2:	9b04      	ldr	r3, [sp, #16]
 8021ec4:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8021ec8:	431c      	orrs	r4, r3
 8021eca:	d108      	bne.n	8021ede <__ieee754_pow+0x1de>
 8021ecc:	4602      	mov	r2, r0
 8021ece:	460b      	mov	r3, r1
 8021ed0:	4610      	mov	r0, r2
 8021ed2:	4619      	mov	r1, r3
 8021ed4:	f7de f9ca 	bl	800026c <__aeabi_dsub>
 8021ed8:	4602      	mov	r2, r0
 8021eda:	460b      	mov	r3, r1
 8021edc:	e78f      	b.n	8021dfe <__ieee754_pow+0xfe>
 8021ede:	9b04      	ldr	r3, [sp, #16]
 8021ee0:	2b01      	cmp	r3, #1
 8021ee2:	f47f af2c 	bne.w	8021d3e <__ieee754_pow+0x3e>
 8021ee6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8021eea:	4619      	mov	r1, r3
 8021eec:	e727      	b.n	8021d3e <__ieee754_pow+0x3e>
 8021eee:	0feb      	lsrs	r3, r5, #31
 8021ef0:	3b01      	subs	r3, #1
 8021ef2:	9306      	str	r3, [sp, #24]
 8021ef4:	9a06      	ldr	r2, [sp, #24]
 8021ef6:	9b04      	ldr	r3, [sp, #16]
 8021ef8:	4313      	orrs	r3, r2
 8021efa:	d102      	bne.n	8021f02 <__ieee754_pow+0x202>
 8021efc:	4632      	mov	r2, r6
 8021efe:	463b      	mov	r3, r7
 8021f00:	e7e6      	b.n	8021ed0 <__ieee754_pow+0x1d0>
 8021f02:	4b19      	ldr	r3, [pc, #100]	; (8021f68 <__ieee754_pow+0x268>)
 8021f04:	4598      	cmp	r8, r3
 8021f06:	f340 80fb 	ble.w	8022100 <__ieee754_pow+0x400>
 8021f0a:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8021f0e:	4598      	cmp	r8, r3
 8021f10:	4b13      	ldr	r3, [pc, #76]	; (8021f60 <__ieee754_pow+0x260>)
 8021f12:	dd0c      	ble.n	8021f2e <__ieee754_pow+0x22e>
 8021f14:	429c      	cmp	r4, r3
 8021f16:	dc0f      	bgt.n	8021f38 <__ieee754_pow+0x238>
 8021f18:	f1b9 0f00 	cmp.w	r9, #0
 8021f1c:	da0f      	bge.n	8021f3e <__ieee754_pow+0x23e>
 8021f1e:	2000      	movs	r0, #0
 8021f20:	b009      	add	sp, #36	; 0x24
 8021f22:	ecbd 8b06 	vpop	{d8-d10}
 8021f26:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021f2a:	f001 ba46 	b.w	80233ba <__math_oflow>
 8021f2e:	429c      	cmp	r4, r3
 8021f30:	dbf2      	blt.n	8021f18 <__ieee754_pow+0x218>
 8021f32:	4b0a      	ldr	r3, [pc, #40]	; (8021f5c <__ieee754_pow+0x25c>)
 8021f34:	429c      	cmp	r4, r3
 8021f36:	dd19      	ble.n	8021f6c <__ieee754_pow+0x26c>
 8021f38:	f1b9 0f00 	cmp.w	r9, #0
 8021f3c:	dcef      	bgt.n	8021f1e <__ieee754_pow+0x21e>
 8021f3e:	2000      	movs	r0, #0
 8021f40:	b009      	add	sp, #36	; 0x24
 8021f42:	ecbd 8b06 	vpop	{d8-d10}
 8021f46:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021f4a:	f001 ba2d 	b.w	80233a8 <__math_uflow>
 8021f4e:	bf00      	nop
 8021f50:	fff00000 	.word	0xfff00000
 8021f54:	7ff00000 	.word	0x7ff00000
 8021f58:	433fffff 	.word	0x433fffff
 8021f5c:	3ff00000 	.word	0x3ff00000
 8021f60:	3fefffff 	.word	0x3fefffff
 8021f64:	3fe00000 	.word	0x3fe00000
 8021f68:	41e00000 	.word	0x41e00000
 8021f6c:	2200      	movs	r2, #0
 8021f6e:	4b60      	ldr	r3, [pc, #384]	; (80220f0 <__ieee754_pow+0x3f0>)
 8021f70:	f7de f97c 	bl	800026c <__aeabi_dsub>
 8021f74:	4604      	mov	r4, r0
 8021f76:	460d      	mov	r5, r1
 8021f78:	a353      	add	r3, pc, #332	; (adr r3, 80220c8 <__ieee754_pow+0x3c8>)
 8021f7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021f7e:	f7de fb2d 	bl	80005dc <__aeabi_dmul>
 8021f82:	4606      	mov	r6, r0
 8021f84:	460f      	mov	r7, r1
 8021f86:	4620      	mov	r0, r4
 8021f88:	4629      	mov	r1, r5
 8021f8a:	a351      	add	r3, pc, #324	; (adr r3, 80220d0 <__ieee754_pow+0x3d0>)
 8021f8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021f90:	f7de fb24 	bl	80005dc <__aeabi_dmul>
 8021f94:	2200      	movs	r2, #0
 8021f96:	4682      	mov	sl, r0
 8021f98:	468b      	mov	fp, r1
 8021f9a:	4b56      	ldr	r3, [pc, #344]	; (80220f4 <__ieee754_pow+0x3f4>)
 8021f9c:	4620      	mov	r0, r4
 8021f9e:	4629      	mov	r1, r5
 8021fa0:	f7de fb1c 	bl	80005dc <__aeabi_dmul>
 8021fa4:	4602      	mov	r2, r0
 8021fa6:	460b      	mov	r3, r1
 8021fa8:	a14b      	add	r1, pc, #300	; (adr r1, 80220d8 <__ieee754_pow+0x3d8>)
 8021faa:	e9d1 0100 	ldrd	r0, r1, [r1]
 8021fae:	f7de f95d 	bl	800026c <__aeabi_dsub>
 8021fb2:	4622      	mov	r2, r4
 8021fb4:	462b      	mov	r3, r5
 8021fb6:	f7de fb11 	bl	80005dc <__aeabi_dmul>
 8021fba:	4602      	mov	r2, r0
 8021fbc:	460b      	mov	r3, r1
 8021fbe:	2000      	movs	r0, #0
 8021fc0:	494d      	ldr	r1, [pc, #308]	; (80220f8 <__ieee754_pow+0x3f8>)
 8021fc2:	f7de f953 	bl	800026c <__aeabi_dsub>
 8021fc6:	4680      	mov	r8, r0
 8021fc8:	4689      	mov	r9, r1
 8021fca:	4622      	mov	r2, r4
 8021fcc:	462b      	mov	r3, r5
 8021fce:	4620      	mov	r0, r4
 8021fd0:	4629      	mov	r1, r5
 8021fd2:	f7de fb03 	bl	80005dc <__aeabi_dmul>
 8021fd6:	4602      	mov	r2, r0
 8021fd8:	460b      	mov	r3, r1
 8021fda:	4640      	mov	r0, r8
 8021fdc:	4649      	mov	r1, r9
 8021fde:	f7de fafd 	bl	80005dc <__aeabi_dmul>
 8021fe2:	a33f      	add	r3, pc, #252	; (adr r3, 80220e0 <__ieee754_pow+0x3e0>)
 8021fe4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021fe8:	f7de faf8 	bl	80005dc <__aeabi_dmul>
 8021fec:	4602      	mov	r2, r0
 8021fee:	460b      	mov	r3, r1
 8021ff0:	4650      	mov	r0, sl
 8021ff2:	4659      	mov	r1, fp
 8021ff4:	f7de f93a 	bl	800026c <__aeabi_dsub>
 8021ff8:	4602      	mov	r2, r0
 8021ffa:	460b      	mov	r3, r1
 8021ffc:	4680      	mov	r8, r0
 8021ffe:	4689      	mov	r9, r1
 8022000:	4630      	mov	r0, r6
 8022002:	4639      	mov	r1, r7
 8022004:	f7de f934 	bl	8000270 <__adddf3>
 8022008:	2000      	movs	r0, #0
 802200a:	4632      	mov	r2, r6
 802200c:	463b      	mov	r3, r7
 802200e:	4604      	mov	r4, r0
 8022010:	460d      	mov	r5, r1
 8022012:	f7de f92b 	bl	800026c <__aeabi_dsub>
 8022016:	4602      	mov	r2, r0
 8022018:	460b      	mov	r3, r1
 802201a:	4640      	mov	r0, r8
 802201c:	4649      	mov	r1, r9
 802201e:	f7de f925 	bl	800026c <__aeabi_dsub>
 8022022:	9b04      	ldr	r3, [sp, #16]
 8022024:	9a06      	ldr	r2, [sp, #24]
 8022026:	4682      	mov	sl, r0
 8022028:	3b01      	subs	r3, #1
 802202a:	468b      	mov	fp, r1
 802202c:	4313      	orrs	r3, r2
 802202e:	f040 81e7 	bne.w	8022400 <__ieee754_pow+0x700>
 8022032:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 80220e8 <__ieee754_pow+0x3e8>
 8022036:	e9dd 6700 	ldrd	r6, r7, [sp]
 802203a:	2600      	movs	r6, #0
 802203c:	eeb0 8a47 	vmov.f32	s16, s14
 8022040:	eef0 8a67 	vmov.f32	s17, s15
 8022044:	463b      	mov	r3, r7
 8022046:	4632      	mov	r2, r6
 8022048:	e9dd 0100 	ldrd	r0, r1, [sp]
 802204c:	f7de f90e 	bl	800026c <__aeabi_dsub>
 8022050:	4622      	mov	r2, r4
 8022052:	462b      	mov	r3, r5
 8022054:	f7de fac2 	bl	80005dc <__aeabi_dmul>
 8022058:	4680      	mov	r8, r0
 802205a:	4689      	mov	r9, r1
 802205c:	4650      	mov	r0, sl
 802205e:	4659      	mov	r1, fp
 8022060:	e9dd 2300 	ldrd	r2, r3, [sp]
 8022064:	f7de faba 	bl	80005dc <__aeabi_dmul>
 8022068:	4602      	mov	r2, r0
 802206a:	460b      	mov	r3, r1
 802206c:	4640      	mov	r0, r8
 802206e:	4649      	mov	r1, r9
 8022070:	f7de f8fe 	bl	8000270 <__adddf3>
 8022074:	4680      	mov	r8, r0
 8022076:	4689      	mov	r9, r1
 8022078:	4632      	mov	r2, r6
 802207a:	463b      	mov	r3, r7
 802207c:	4620      	mov	r0, r4
 802207e:	4629      	mov	r1, r5
 8022080:	f7de faac 	bl	80005dc <__aeabi_dmul>
 8022084:	460b      	mov	r3, r1
 8022086:	4604      	mov	r4, r0
 8022088:	460d      	mov	r5, r1
 802208a:	4602      	mov	r2, r0
 802208c:	4649      	mov	r1, r9
 802208e:	4640      	mov	r0, r8
 8022090:	f7de f8ee 	bl	8000270 <__adddf3>
 8022094:	4b19      	ldr	r3, [pc, #100]	; (80220fc <__ieee754_pow+0x3fc>)
 8022096:	4606      	mov	r6, r0
 8022098:	460f      	mov	r7, r1
 802209a:	4299      	cmp	r1, r3
 802209c:	468b      	mov	fp, r1
 802209e:	ec45 4b19 	vmov	d9, r4, r5
 80220a2:	f340 82f1 	ble.w	8022688 <__ieee754_pow+0x988>
 80220a6:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 80220aa:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 80220ae:	4303      	orrs	r3, r0
 80220b0:	f000 81e4 	beq.w	802247c <__ieee754_pow+0x77c>
 80220b4:	2200      	movs	r2, #0
 80220b6:	2300      	movs	r3, #0
 80220b8:	ec51 0b18 	vmov	r0, r1, d8
 80220bc:	f7de fd00 	bl	8000ac0 <__aeabi_dcmplt>
 80220c0:	3800      	subs	r0, #0
 80220c2:	bf18      	it	ne
 80220c4:	2001      	movne	r0, #1
 80220c6:	e72b      	b.n	8021f20 <__ieee754_pow+0x220>
 80220c8:	60000000 	.word	0x60000000
 80220cc:	3ff71547 	.word	0x3ff71547
 80220d0:	f85ddf44 	.word	0xf85ddf44
 80220d4:	3e54ae0b 	.word	0x3e54ae0b
 80220d8:	55555555 	.word	0x55555555
 80220dc:	3fd55555 	.word	0x3fd55555
 80220e0:	652b82fe 	.word	0x652b82fe
 80220e4:	3ff71547 	.word	0x3ff71547
 80220e8:	00000000 	.word	0x00000000
 80220ec:	bff00000 	.word	0xbff00000
 80220f0:	3ff00000 	.word	0x3ff00000
 80220f4:	3fd00000 	.word	0x3fd00000
 80220f8:	3fe00000 	.word	0x3fe00000
 80220fc:	408fffff 	.word	0x408fffff
 8022100:	4bd5      	ldr	r3, [pc, #852]	; (8022458 <__ieee754_pow+0x758>)
 8022102:	2200      	movs	r2, #0
 8022104:	402b      	ands	r3, r5
 8022106:	b92b      	cbnz	r3, 8022114 <__ieee754_pow+0x414>
 8022108:	4bd4      	ldr	r3, [pc, #848]	; (802245c <__ieee754_pow+0x75c>)
 802210a:	f7de fa67 	bl	80005dc <__aeabi_dmul>
 802210e:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8022112:	460c      	mov	r4, r1
 8022114:	1523      	asrs	r3, r4, #20
 8022116:	f3c4 0413 	ubfx	r4, r4, #0, #20
 802211a:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 802211e:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8022122:	4413      	add	r3, r2
 8022124:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8022128:	9305      	str	r3, [sp, #20]
 802212a:	4bcd      	ldr	r3, [pc, #820]	; (8022460 <__ieee754_pow+0x760>)
 802212c:	429c      	cmp	r4, r3
 802212e:	dd08      	ble.n	8022142 <__ieee754_pow+0x442>
 8022130:	4bcc      	ldr	r3, [pc, #816]	; (8022464 <__ieee754_pow+0x764>)
 8022132:	429c      	cmp	r4, r3
 8022134:	f340 8162 	ble.w	80223fc <__ieee754_pow+0x6fc>
 8022138:	9b05      	ldr	r3, [sp, #20]
 802213a:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 802213e:	3301      	adds	r3, #1
 8022140:	9305      	str	r3, [sp, #20]
 8022142:	2400      	movs	r4, #0
 8022144:	00e3      	lsls	r3, r4, #3
 8022146:	4682      	mov	sl, r0
 8022148:	4629      	mov	r1, r5
 802214a:	46ab      	mov	fp, r5
 802214c:	9307      	str	r3, [sp, #28]
 802214e:	4bc6      	ldr	r3, [pc, #792]	; (8022468 <__ieee754_pow+0x768>)
 8022150:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8022154:	ed93 7b00 	vldr	d7, [r3]
 8022158:	eeb0 9a47 	vmov.f32	s18, s14
 802215c:	eef0 9a67 	vmov.f32	s19, s15
 8022160:	ec53 2b17 	vmov	r2, r3, d7
 8022164:	f7de f882 	bl	800026c <__aeabi_dsub>
 8022168:	4652      	mov	r2, sl
 802216a:	4606      	mov	r6, r0
 802216c:	460f      	mov	r7, r1
 802216e:	462b      	mov	r3, r5
 8022170:	106d      	asrs	r5, r5, #1
 8022172:	ec51 0b19 	vmov	r0, r1, d9
 8022176:	f7de f87b 	bl	8000270 <__adddf3>
 802217a:	4602      	mov	r2, r0
 802217c:	460b      	mov	r3, r1
 802217e:	2000      	movs	r0, #0
 8022180:	49ba      	ldr	r1, [pc, #744]	; (802246c <__ieee754_pow+0x76c>)
 8022182:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8022186:	f7de fb53 	bl	8000830 <__aeabi_ddiv>
 802218a:	4602      	mov	r2, r0
 802218c:	460b      	mov	r3, r1
 802218e:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8022192:	ec41 0b1a 	vmov	d10, r0, r1
 8022196:	4630      	mov	r0, r6
 8022198:	4639      	mov	r1, r7
 802219a:	f7de fa1f 	bl	80005dc <__aeabi_dmul>
 802219e:	2300      	movs	r3, #0
 80221a0:	2200      	movs	r2, #0
 80221a2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80221a6:	9302      	str	r3, [sp, #8]
 80221a8:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 80221ac:	4614      	mov	r4, r2
 80221ae:	461d      	mov	r5, r3
 80221b0:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80221b4:	ec41 0b18 	vmov	d8, r0, r1
 80221b8:	4640      	mov	r0, r8
 80221ba:	4649      	mov	r1, r9
 80221bc:	f7de fa0e 	bl	80005dc <__aeabi_dmul>
 80221c0:	4602      	mov	r2, r0
 80221c2:	460b      	mov	r3, r1
 80221c4:	4630      	mov	r0, r6
 80221c6:	4639      	mov	r1, r7
 80221c8:	f7de f850 	bl	800026c <__aeabi_dsub>
 80221cc:	4606      	mov	r6, r0
 80221ce:	460f      	mov	r7, r1
 80221d0:	4620      	mov	r0, r4
 80221d2:	4629      	mov	r1, r5
 80221d4:	ec53 2b19 	vmov	r2, r3, d9
 80221d8:	f7de f848 	bl	800026c <__aeabi_dsub>
 80221dc:	4602      	mov	r2, r0
 80221de:	460b      	mov	r3, r1
 80221e0:	4650      	mov	r0, sl
 80221e2:	4659      	mov	r1, fp
 80221e4:	f7de f842 	bl	800026c <__aeabi_dsub>
 80221e8:	4642      	mov	r2, r8
 80221ea:	464b      	mov	r3, r9
 80221ec:	f7de f9f6 	bl	80005dc <__aeabi_dmul>
 80221f0:	4602      	mov	r2, r0
 80221f2:	460b      	mov	r3, r1
 80221f4:	4630      	mov	r0, r6
 80221f6:	4639      	mov	r1, r7
 80221f8:	f7de f838 	bl	800026c <__aeabi_dsub>
 80221fc:	ec53 2b1a 	vmov	r2, r3, d10
 8022200:	f7de f9ec 	bl	80005dc <__aeabi_dmul>
 8022204:	ec53 2b18 	vmov	r2, r3, d8
 8022208:	ec41 0b19 	vmov	d9, r0, r1
 802220c:	ec51 0b18 	vmov	r0, r1, d8
 8022210:	f7de f9e4 	bl	80005dc <__aeabi_dmul>
 8022214:	4604      	mov	r4, r0
 8022216:	460d      	mov	r5, r1
 8022218:	a37b      	add	r3, pc, #492	; (adr r3, 8022408 <__ieee754_pow+0x708>)
 802221a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802221e:	f7de f9dd 	bl	80005dc <__aeabi_dmul>
 8022222:	a37b      	add	r3, pc, #492	; (adr r3, 8022410 <__ieee754_pow+0x710>)
 8022224:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022228:	f7de f822 	bl	8000270 <__adddf3>
 802222c:	4622      	mov	r2, r4
 802222e:	462b      	mov	r3, r5
 8022230:	f7de f9d4 	bl	80005dc <__aeabi_dmul>
 8022234:	a378      	add	r3, pc, #480	; (adr r3, 8022418 <__ieee754_pow+0x718>)
 8022236:	e9d3 2300 	ldrd	r2, r3, [r3]
 802223a:	f7de f819 	bl	8000270 <__adddf3>
 802223e:	4622      	mov	r2, r4
 8022240:	462b      	mov	r3, r5
 8022242:	f7de f9cb 	bl	80005dc <__aeabi_dmul>
 8022246:	a376      	add	r3, pc, #472	; (adr r3, 8022420 <__ieee754_pow+0x720>)
 8022248:	e9d3 2300 	ldrd	r2, r3, [r3]
 802224c:	f7de f810 	bl	8000270 <__adddf3>
 8022250:	4622      	mov	r2, r4
 8022252:	462b      	mov	r3, r5
 8022254:	f7de f9c2 	bl	80005dc <__aeabi_dmul>
 8022258:	a373      	add	r3, pc, #460	; (adr r3, 8022428 <__ieee754_pow+0x728>)
 802225a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802225e:	f7de f807 	bl	8000270 <__adddf3>
 8022262:	4622      	mov	r2, r4
 8022264:	462b      	mov	r3, r5
 8022266:	f7de f9b9 	bl	80005dc <__aeabi_dmul>
 802226a:	a371      	add	r3, pc, #452	; (adr r3, 8022430 <__ieee754_pow+0x730>)
 802226c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022270:	f7dd fffe 	bl	8000270 <__adddf3>
 8022274:	4606      	mov	r6, r0
 8022276:	460f      	mov	r7, r1
 8022278:	4622      	mov	r2, r4
 802227a:	462b      	mov	r3, r5
 802227c:	4620      	mov	r0, r4
 802227e:	4629      	mov	r1, r5
 8022280:	f7de f9ac 	bl	80005dc <__aeabi_dmul>
 8022284:	4602      	mov	r2, r0
 8022286:	460b      	mov	r3, r1
 8022288:	4630      	mov	r0, r6
 802228a:	4639      	mov	r1, r7
 802228c:	f7de f9a6 	bl	80005dc <__aeabi_dmul>
 8022290:	4642      	mov	r2, r8
 8022292:	4604      	mov	r4, r0
 8022294:	460d      	mov	r5, r1
 8022296:	464b      	mov	r3, r9
 8022298:	ec51 0b18 	vmov	r0, r1, d8
 802229c:	f7dd ffe8 	bl	8000270 <__adddf3>
 80222a0:	ec53 2b19 	vmov	r2, r3, d9
 80222a4:	f7de f99a 	bl	80005dc <__aeabi_dmul>
 80222a8:	4622      	mov	r2, r4
 80222aa:	462b      	mov	r3, r5
 80222ac:	f7dd ffe0 	bl	8000270 <__adddf3>
 80222b0:	4642      	mov	r2, r8
 80222b2:	4682      	mov	sl, r0
 80222b4:	468b      	mov	fp, r1
 80222b6:	464b      	mov	r3, r9
 80222b8:	4640      	mov	r0, r8
 80222ba:	4649      	mov	r1, r9
 80222bc:	f7de f98e 	bl	80005dc <__aeabi_dmul>
 80222c0:	2200      	movs	r2, #0
 80222c2:	4b6b      	ldr	r3, [pc, #428]	; (8022470 <__ieee754_pow+0x770>)
 80222c4:	4606      	mov	r6, r0
 80222c6:	460f      	mov	r7, r1
 80222c8:	f7dd ffd2 	bl	8000270 <__adddf3>
 80222cc:	4652      	mov	r2, sl
 80222ce:	465b      	mov	r3, fp
 80222d0:	f7dd ffce 	bl	8000270 <__adddf3>
 80222d4:	2000      	movs	r0, #0
 80222d6:	460d      	mov	r5, r1
 80222d8:	460b      	mov	r3, r1
 80222da:	4604      	mov	r4, r0
 80222dc:	4602      	mov	r2, r0
 80222de:	4649      	mov	r1, r9
 80222e0:	4640      	mov	r0, r8
 80222e2:	f7de f97b 	bl	80005dc <__aeabi_dmul>
 80222e6:	2200      	movs	r2, #0
 80222e8:	4680      	mov	r8, r0
 80222ea:	4689      	mov	r9, r1
 80222ec:	4b60      	ldr	r3, [pc, #384]	; (8022470 <__ieee754_pow+0x770>)
 80222ee:	4620      	mov	r0, r4
 80222f0:	4629      	mov	r1, r5
 80222f2:	f7dd ffbb 	bl	800026c <__aeabi_dsub>
 80222f6:	4632      	mov	r2, r6
 80222f8:	463b      	mov	r3, r7
 80222fa:	f7dd ffb7 	bl	800026c <__aeabi_dsub>
 80222fe:	4602      	mov	r2, r0
 8022300:	460b      	mov	r3, r1
 8022302:	4650      	mov	r0, sl
 8022304:	4659      	mov	r1, fp
 8022306:	f7dd ffb1 	bl	800026c <__aeabi_dsub>
 802230a:	ec53 2b18 	vmov	r2, r3, d8
 802230e:	f7de f965 	bl	80005dc <__aeabi_dmul>
 8022312:	4606      	mov	r6, r0
 8022314:	460f      	mov	r7, r1
 8022316:	4622      	mov	r2, r4
 8022318:	462b      	mov	r3, r5
 802231a:	ec51 0b19 	vmov	r0, r1, d9
 802231e:	f7de f95d 	bl	80005dc <__aeabi_dmul>
 8022322:	4602      	mov	r2, r0
 8022324:	460b      	mov	r3, r1
 8022326:	4630      	mov	r0, r6
 8022328:	4639      	mov	r1, r7
 802232a:	f7dd ffa1 	bl	8000270 <__adddf3>
 802232e:	4606      	mov	r6, r0
 8022330:	460f      	mov	r7, r1
 8022332:	4602      	mov	r2, r0
 8022334:	460b      	mov	r3, r1
 8022336:	4640      	mov	r0, r8
 8022338:	4649      	mov	r1, r9
 802233a:	f7dd ff99 	bl	8000270 <__adddf3>
 802233e:	2000      	movs	r0, #0
 8022340:	460d      	mov	r5, r1
 8022342:	4604      	mov	r4, r0
 8022344:	a33c      	add	r3, pc, #240	; (adr r3, 8022438 <__ieee754_pow+0x738>)
 8022346:	e9d3 2300 	ldrd	r2, r3, [r3]
 802234a:	f7de f947 	bl	80005dc <__aeabi_dmul>
 802234e:	4642      	mov	r2, r8
 8022350:	464b      	mov	r3, r9
 8022352:	ec41 0b18 	vmov	d8, r0, r1
 8022356:	4620      	mov	r0, r4
 8022358:	4629      	mov	r1, r5
 802235a:	f7dd ff87 	bl	800026c <__aeabi_dsub>
 802235e:	4602      	mov	r2, r0
 8022360:	460b      	mov	r3, r1
 8022362:	4630      	mov	r0, r6
 8022364:	4639      	mov	r1, r7
 8022366:	f7dd ff81 	bl	800026c <__aeabi_dsub>
 802236a:	a335      	add	r3, pc, #212	; (adr r3, 8022440 <__ieee754_pow+0x740>)
 802236c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022370:	f7de f934 	bl	80005dc <__aeabi_dmul>
 8022374:	4606      	mov	r6, r0
 8022376:	460f      	mov	r7, r1
 8022378:	4620      	mov	r0, r4
 802237a:	4629      	mov	r1, r5
 802237c:	a332      	add	r3, pc, #200	; (adr r3, 8022448 <__ieee754_pow+0x748>)
 802237e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022382:	f7de f92b 	bl	80005dc <__aeabi_dmul>
 8022386:	4602      	mov	r2, r0
 8022388:	460b      	mov	r3, r1
 802238a:	4630      	mov	r0, r6
 802238c:	4639      	mov	r1, r7
 802238e:	f7dd ff6f 	bl	8000270 <__adddf3>
 8022392:	9a07      	ldr	r2, [sp, #28]
 8022394:	4b37      	ldr	r3, [pc, #220]	; (8022474 <__ieee754_pow+0x774>)
 8022396:	4413      	add	r3, r2
 8022398:	e9d3 2300 	ldrd	r2, r3, [r3]
 802239c:	f7dd ff68 	bl	8000270 <__adddf3>
 80223a0:	4682      	mov	sl, r0
 80223a2:	9805      	ldr	r0, [sp, #20]
 80223a4:	468b      	mov	fp, r1
 80223a6:	f7de f8af 	bl	8000508 <__aeabi_i2d>
 80223aa:	9a07      	ldr	r2, [sp, #28]
 80223ac:	4b32      	ldr	r3, [pc, #200]	; (8022478 <__ieee754_pow+0x778>)
 80223ae:	4606      	mov	r6, r0
 80223b0:	460f      	mov	r7, r1
 80223b2:	4413      	add	r3, r2
 80223b4:	4652      	mov	r2, sl
 80223b6:	e9d3 8900 	ldrd	r8, r9, [r3]
 80223ba:	ec51 0b18 	vmov	r0, r1, d8
 80223be:	465b      	mov	r3, fp
 80223c0:	f7dd ff56 	bl	8000270 <__adddf3>
 80223c4:	4642      	mov	r2, r8
 80223c6:	464b      	mov	r3, r9
 80223c8:	f7dd ff52 	bl	8000270 <__adddf3>
 80223cc:	4632      	mov	r2, r6
 80223ce:	463b      	mov	r3, r7
 80223d0:	f7dd ff4e 	bl	8000270 <__adddf3>
 80223d4:	2000      	movs	r0, #0
 80223d6:	4632      	mov	r2, r6
 80223d8:	463b      	mov	r3, r7
 80223da:	4604      	mov	r4, r0
 80223dc:	460d      	mov	r5, r1
 80223de:	f7dd ff45 	bl	800026c <__aeabi_dsub>
 80223e2:	4642      	mov	r2, r8
 80223e4:	464b      	mov	r3, r9
 80223e6:	f7dd ff41 	bl	800026c <__aeabi_dsub>
 80223ea:	ec53 2b18 	vmov	r2, r3, d8
 80223ee:	f7dd ff3d 	bl	800026c <__aeabi_dsub>
 80223f2:	4602      	mov	r2, r0
 80223f4:	460b      	mov	r3, r1
 80223f6:	4650      	mov	r0, sl
 80223f8:	4659      	mov	r1, fp
 80223fa:	e610      	b.n	802201e <__ieee754_pow+0x31e>
 80223fc:	2401      	movs	r4, #1
 80223fe:	e6a1      	b.n	8022144 <__ieee754_pow+0x444>
 8022400:	ed9f 7b13 	vldr	d7, [pc, #76]	; 8022450 <__ieee754_pow+0x750>
 8022404:	e617      	b.n	8022036 <__ieee754_pow+0x336>
 8022406:	bf00      	nop
 8022408:	4a454eef 	.word	0x4a454eef
 802240c:	3fca7e28 	.word	0x3fca7e28
 8022410:	93c9db65 	.word	0x93c9db65
 8022414:	3fcd864a 	.word	0x3fcd864a
 8022418:	a91d4101 	.word	0xa91d4101
 802241c:	3fd17460 	.word	0x3fd17460
 8022420:	518f264d 	.word	0x518f264d
 8022424:	3fd55555 	.word	0x3fd55555
 8022428:	db6fabff 	.word	0xdb6fabff
 802242c:	3fdb6db6 	.word	0x3fdb6db6
 8022430:	33333303 	.word	0x33333303
 8022434:	3fe33333 	.word	0x3fe33333
 8022438:	e0000000 	.word	0xe0000000
 802243c:	3feec709 	.word	0x3feec709
 8022440:	dc3a03fd 	.word	0xdc3a03fd
 8022444:	3feec709 	.word	0x3feec709
 8022448:	145b01f5 	.word	0x145b01f5
 802244c:	be3e2fe0 	.word	0xbe3e2fe0
 8022450:	00000000 	.word	0x00000000
 8022454:	3ff00000 	.word	0x3ff00000
 8022458:	7ff00000 	.word	0x7ff00000
 802245c:	43400000 	.word	0x43400000
 8022460:	0003988e 	.word	0x0003988e
 8022464:	000bb679 	.word	0x000bb679
 8022468:	08026020 	.word	0x08026020
 802246c:	3ff00000 	.word	0x3ff00000
 8022470:	40080000 	.word	0x40080000
 8022474:	08026040 	.word	0x08026040
 8022478:	08026030 	.word	0x08026030
 802247c:	a3b5      	add	r3, pc, #724	; (adr r3, 8022754 <__ieee754_pow+0xa54>)
 802247e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022482:	4640      	mov	r0, r8
 8022484:	4649      	mov	r1, r9
 8022486:	f7dd fef3 	bl	8000270 <__adddf3>
 802248a:	4622      	mov	r2, r4
 802248c:	462b      	mov	r3, r5
 802248e:	ec41 0b1a 	vmov	d10, r0, r1
 8022492:	4630      	mov	r0, r6
 8022494:	4639      	mov	r1, r7
 8022496:	f7dd fee9 	bl	800026c <__aeabi_dsub>
 802249a:	4602      	mov	r2, r0
 802249c:	460b      	mov	r3, r1
 802249e:	ec51 0b1a 	vmov	r0, r1, d10
 80224a2:	f7de fb2b 	bl	8000afc <__aeabi_dcmpgt>
 80224a6:	2800      	cmp	r0, #0
 80224a8:	f47f ae04 	bne.w	80220b4 <__ieee754_pow+0x3b4>
 80224ac:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80224b0:	4aa3      	ldr	r2, [pc, #652]	; (8022740 <__ieee754_pow+0xa40>)
 80224b2:	4293      	cmp	r3, r2
 80224b4:	f340 8108 	ble.w	80226c8 <__ieee754_pow+0x9c8>
 80224b8:	151b      	asrs	r3, r3, #20
 80224ba:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 80224be:	48a1      	ldr	r0, [pc, #644]	; (8022744 <__ieee754_pow+0xa44>)
 80224c0:	f1bb 0f00 	cmp.w	fp, #0
 80224c4:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 80224c8:	f04f 0200 	mov.w	r2, #0
 80224cc:	fa4a fa03 	asr.w	sl, sl, r3
 80224d0:	44da      	add	sl, fp
 80224d2:	f3ca 510a 	ubfx	r1, sl, #20, #11
 80224d6:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 80224da:	fa40 f001 	asr.w	r0, r0, r1
 80224de:	f1c1 0114 	rsb	r1, r1, #20
 80224e2:	ea00 030a 	and.w	r3, r0, sl
 80224e6:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 80224ea:	4620      	mov	r0, r4
 80224ec:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 80224f0:	fa4a fa01 	asr.w	sl, sl, r1
 80224f4:	4629      	mov	r1, r5
 80224f6:	bfb8      	it	lt
 80224f8:	f1ca 0a00 	rsblt	sl, sl, #0
 80224fc:	f7dd feb6 	bl	800026c <__aeabi_dsub>
 8022500:	ec41 0b19 	vmov	d9, r0, r1
 8022504:	4642      	mov	r2, r8
 8022506:	464b      	mov	r3, r9
 8022508:	ec51 0b19 	vmov	r0, r1, d9
 802250c:	f7dd feb0 	bl	8000270 <__adddf3>
 8022510:	2000      	movs	r0, #0
 8022512:	460d      	mov	r5, r1
 8022514:	4604      	mov	r4, r0
 8022516:	a37a      	add	r3, pc, #488	; (adr r3, 8022700 <__ieee754_pow+0xa00>)
 8022518:	e9d3 2300 	ldrd	r2, r3, [r3]
 802251c:	f7de f85e 	bl	80005dc <__aeabi_dmul>
 8022520:	4606      	mov	r6, r0
 8022522:	460f      	mov	r7, r1
 8022524:	4620      	mov	r0, r4
 8022526:	4629      	mov	r1, r5
 8022528:	ec53 2b19 	vmov	r2, r3, d9
 802252c:	f7dd fe9e 	bl	800026c <__aeabi_dsub>
 8022530:	4602      	mov	r2, r0
 8022532:	460b      	mov	r3, r1
 8022534:	4640      	mov	r0, r8
 8022536:	4649      	mov	r1, r9
 8022538:	f7dd fe98 	bl	800026c <__aeabi_dsub>
 802253c:	a372      	add	r3, pc, #456	; (adr r3, 8022708 <__ieee754_pow+0xa08>)
 802253e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022542:	f7de f84b 	bl	80005dc <__aeabi_dmul>
 8022546:	4680      	mov	r8, r0
 8022548:	4689      	mov	r9, r1
 802254a:	4620      	mov	r0, r4
 802254c:	4629      	mov	r1, r5
 802254e:	a370      	add	r3, pc, #448	; (adr r3, 8022710 <__ieee754_pow+0xa10>)
 8022550:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022554:	f7de f842 	bl	80005dc <__aeabi_dmul>
 8022558:	4602      	mov	r2, r0
 802255a:	460b      	mov	r3, r1
 802255c:	4640      	mov	r0, r8
 802255e:	4649      	mov	r1, r9
 8022560:	f7dd fe86 	bl	8000270 <__adddf3>
 8022564:	4604      	mov	r4, r0
 8022566:	460d      	mov	r5, r1
 8022568:	4602      	mov	r2, r0
 802256a:	460b      	mov	r3, r1
 802256c:	4630      	mov	r0, r6
 802256e:	4639      	mov	r1, r7
 8022570:	f7dd fe7e 	bl	8000270 <__adddf3>
 8022574:	4632      	mov	r2, r6
 8022576:	4680      	mov	r8, r0
 8022578:	4689      	mov	r9, r1
 802257a:	463b      	mov	r3, r7
 802257c:	f7dd fe76 	bl	800026c <__aeabi_dsub>
 8022580:	4602      	mov	r2, r0
 8022582:	460b      	mov	r3, r1
 8022584:	4620      	mov	r0, r4
 8022586:	4629      	mov	r1, r5
 8022588:	f7dd fe70 	bl	800026c <__aeabi_dsub>
 802258c:	4642      	mov	r2, r8
 802258e:	4606      	mov	r6, r0
 8022590:	460f      	mov	r7, r1
 8022592:	464b      	mov	r3, r9
 8022594:	4640      	mov	r0, r8
 8022596:	4649      	mov	r1, r9
 8022598:	f7de f820 	bl	80005dc <__aeabi_dmul>
 802259c:	4604      	mov	r4, r0
 802259e:	460d      	mov	r5, r1
 80225a0:	a35d      	add	r3, pc, #372	; (adr r3, 8022718 <__ieee754_pow+0xa18>)
 80225a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80225a6:	f7de f819 	bl	80005dc <__aeabi_dmul>
 80225aa:	a35d      	add	r3, pc, #372	; (adr r3, 8022720 <__ieee754_pow+0xa20>)
 80225ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80225b0:	f7dd fe5c 	bl	800026c <__aeabi_dsub>
 80225b4:	4622      	mov	r2, r4
 80225b6:	462b      	mov	r3, r5
 80225b8:	f7de f810 	bl	80005dc <__aeabi_dmul>
 80225bc:	a35a      	add	r3, pc, #360	; (adr r3, 8022728 <__ieee754_pow+0xa28>)
 80225be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80225c2:	f7dd fe55 	bl	8000270 <__adddf3>
 80225c6:	4622      	mov	r2, r4
 80225c8:	462b      	mov	r3, r5
 80225ca:	f7de f807 	bl	80005dc <__aeabi_dmul>
 80225ce:	a358      	add	r3, pc, #352	; (adr r3, 8022730 <__ieee754_pow+0xa30>)
 80225d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80225d4:	f7dd fe4a 	bl	800026c <__aeabi_dsub>
 80225d8:	4622      	mov	r2, r4
 80225da:	462b      	mov	r3, r5
 80225dc:	f7dd fffe 	bl	80005dc <__aeabi_dmul>
 80225e0:	a355      	add	r3, pc, #340	; (adr r3, 8022738 <__ieee754_pow+0xa38>)
 80225e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80225e6:	f7dd fe43 	bl	8000270 <__adddf3>
 80225ea:	4622      	mov	r2, r4
 80225ec:	462b      	mov	r3, r5
 80225ee:	f7dd fff5 	bl	80005dc <__aeabi_dmul>
 80225f2:	4602      	mov	r2, r0
 80225f4:	460b      	mov	r3, r1
 80225f6:	4640      	mov	r0, r8
 80225f8:	4649      	mov	r1, r9
 80225fa:	f7dd fe37 	bl	800026c <__aeabi_dsub>
 80225fe:	4604      	mov	r4, r0
 8022600:	460d      	mov	r5, r1
 8022602:	4602      	mov	r2, r0
 8022604:	460b      	mov	r3, r1
 8022606:	4640      	mov	r0, r8
 8022608:	4649      	mov	r1, r9
 802260a:	f7dd ffe7 	bl	80005dc <__aeabi_dmul>
 802260e:	2200      	movs	r2, #0
 8022610:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8022614:	ec41 0b19 	vmov	d9, r0, r1
 8022618:	4620      	mov	r0, r4
 802261a:	4629      	mov	r1, r5
 802261c:	f7dd fe26 	bl	800026c <__aeabi_dsub>
 8022620:	4602      	mov	r2, r0
 8022622:	460b      	mov	r3, r1
 8022624:	ec51 0b19 	vmov	r0, r1, d9
 8022628:	f7de f902 	bl	8000830 <__aeabi_ddiv>
 802262c:	4632      	mov	r2, r6
 802262e:	4604      	mov	r4, r0
 8022630:	460d      	mov	r5, r1
 8022632:	463b      	mov	r3, r7
 8022634:	4640      	mov	r0, r8
 8022636:	4649      	mov	r1, r9
 8022638:	f7dd ffd0 	bl	80005dc <__aeabi_dmul>
 802263c:	4632      	mov	r2, r6
 802263e:	463b      	mov	r3, r7
 8022640:	f7dd fe16 	bl	8000270 <__adddf3>
 8022644:	4602      	mov	r2, r0
 8022646:	460b      	mov	r3, r1
 8022648:	4620      	mov	r0, r4
 802264a:	4629      	mov	r1, r5
 802264c:	f7dd fe0e 	bl	800026c <__aeabi_dsub>
 8022650:	4642      	mov	r2, r8
 8022652:	464b      	mov	r3, r9
 8022654:	f7dd fe0a 	bl	800026c <__aeabi_dsub>
 8022658:	460b      	mov	r3, r1
 802265a:	4602      	mov	r2, r0
 802265c:	493a      	ldr	r1, [pc, #232]	; (8022748 <__ieee754_pow+0xa48>)
 802265e:	2000      	movs	r0, #0
 8022660:	f7dd fe04 	bl	800026c <__aeabi_dsub>
 8022664:	ec41 0b10 	vmov	d0, r0, r1
 8022668:	ee10 3a90 	vmov	r3, s1
 802266c:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8022670:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8022674:	da2b      	bge.n	80226ce <__ieee754_pow+0x9ce>
 8022676:	4650      	mov	r0, sl
 8022678:	f000 fdfa 	bl	8023270 <scalbn>
 802267c:	ec51 0b10 	vmov	r0, r1, d0
 8022680:	ec53 2b18 	vmov	r2, r3, d8
 8022684:	f7ff bbed 	b.w	8021e62 <__ieee754_pow+0x162>
 8022688:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 802268c:	4b2f      	ldr	r3, [pc, #188]	; (802274c <__ieee754_pow+0xa4c>)
 802268e:	429e      	cmp	r6, r3
 8022690:	f77f af0c 	ble.w	80224ac <__ieee754_pow+0x7ac>
 8022694:	4b2e      	ldr	r3, [pc, #184]	; (8022750 <__ieee754_pow+0xa50>)
 8022696:	440b      	add	r3, r1
 8022698:	4303      	orrs	r3, r0
 802269a:	d009      	beq.n	80226b0 <__ieee754_pow+0x9b0>
 802269c:	2200      	movs	r2, #0
 802269e:	2300      	movs	r3, #0
 80226a0:	ec51 0b18 	vmov	r0, r1, d8
 80226a4:	f7de fa0c 	bl	8000ac0 <__aeabi_dcmplt>
 80226a8:	3800      	subs	r0, #0
 80226aa:	bf18      	it	ne
 80226ac:	2001      	movne	r0, #1
 80226ae:	e447      	b.n	8021f40 <__ieee754_pow+0x240>
 80226b0:	4622      	mov	r2, r4
 80226b2:	462b      	mov	r3, r5
 80226b4:	f7dd fdda 	bl	800026c <__aeabi_dsub>
 80226b8:	4642      	mov	r2, r8
 80226ba:	464b      	mov	r3, r9
 80226bc:	f7de fa14 	bl	8000ae8 <__aeabi_dcmpge>
 80226c0:	2800      	cmp	r0, #0
 80226c2:	f43f aef3 	beq.w	80224ac <__ieee754_pow+0x7ac>
 80226c6:	e7e9      	b.n	802269c <__ieee754_pow+0x99c>
 80226c8:	f04f 0a00 	mov.w	sl, #0
 80226cc:	e71a      	b.n	8022504 <__ieee754_pow+0x804>
 80226ce:	ec51 0b10 	vmov	r0, r1, d0
 80226d2:	4619      	mov	r1, r3
 80226d4:	e7d4      	b.n	8022680 <__ieee754_pow+0x980>
 80226d6:	2000      	movs	r0, #0
 80226d8:	491b      	ldr	r1, [pc, #108]	; (8022748 <__ieee754_pow+0xa48>)
 80226da:	f7ff bb30 	b.w	8021d3e <__ieee754_pow+0x3e>
 80226de:	2000      	movs	r0, #0
 80226e0:	2100      	movs	r1, #0
 80226e2:	f7ff bb2c 	b.w	8021d3e <__ieee754_pow+0x3e>
 80226e6:	4630      	mov	r0, r6
 80226e8:	4639      	mov	r1, r7
 80226ea:	f7ff bb28 	b.w	8021d3e <__ieee754_pow+0x3e>
 80226ee:	9204      	str	r2, [sp, #16]
 80226f0:	f7ff bb7a 	b.w	8021de8 <__ieee754_pow+0xe8>
 80226f4:	2300      	movs	r3, #0
 80226f6:	f7ff bb64 	b.w	8021dc2 <__ieee754_pow+0xc2>
 80226fa:	bf00      	nop
 80226fc:	f3af 8000 	nop.w
 8022700:	00000000 	.word	0x00000000
 8022704:	3fe62e43 	.word	0x3fe62e43
 8022708:	fefa39ef 	.word	0xfefa39ef
 802270c:	3fe62e42 	.word	0x3fe62e42
 8022710:	0ca86c39 	.word	0x0ca86c39
 8022714:	be205c61 	.word	0xbe205c61
 8022718:	72bea4d0 	.word	0x72bea4d0
 802271c:	3e663769 	.word	0x3e663769
 8022720:	c5d26bf1 	.word	0xc5d26bf1
 8022724:	3ebbbd41 	.word	0x3ebbbd41
 8022728:	af25de2c 	.word	0xaf25de2c
 802272c:	3f11566a 	.word	0x3f11566a
 8022730:	16bebd93 	.word	0x16bebd93
 8022734:	3f66c16c 	.word	0x3f66c16c
 8022738:	5555553e 	.word	0x5555553e
 802273c:	3fc55555 	.word	0x3fc55555
 8022740:	3fe00000 	.word	0x3fe00000
 8022744:	fff00000 	.word	0xfff00000
 8022748:	3ff00000 	.word	0x3ff00000
 802274c:	4090cbff 	.word	0x4090cbff
 8022750:	3f6f3400 	.word	0x3f6f3400
 8022754:	652b82fe 	.word	0x652b82fe
 8022758:	3c971547 	.word	0x3c971547
 802275c:	00000000 	.word	0x00000000

08022760 <__ieee754_rem_pio2>:
 8022760:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022764:	ec55 4b10 	vmov	r4, r5, d0
 8022768:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 802276c:	4bca      	ldr	r3, [pc, #808]	; (8022a98 <__ieee754_rem_pio2+0x338>)
 802276e:	4682      	mov	sl, r0
 8022770:	4598      	cmp	r8, r3
 8022772:	ed2d 8b02 	vpush	{d8}
 8022776:	b08b      	sub	sp, #44	; 0x2c
 8022778:	9502      	str	r5, [sp, #8]
 802277a:	dc08      	bgt.n	802278e <__ieee754_rem_pio2+0x2e>
 802277c:	2200      	movs	r2, #0
 802277e:	2300      	movs	r3, #0
 8022780:	ed80 0b00 	vstr	d0, [r0]
 8022784:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8022788:	f04f 0b00 	mov.w	fp, #0
 802278c:	e028      	b.n	80227e0 <__ieee754_rem_pio2+0x80>
 802278e:	4bc3      	ldr	r3, [pc, #780]	; (8022a9c <__ieee754_rem_pio2+0x33c>)
 8022790:	4598      	cmp	r8, r3
 8022792:	dc78      	bgt.n	8022886 <__ieee754_rem_pio2+0x126>
 8022794:	9b02      	ldr	r3, [sp, #8]
 8022796:	ee10 0a10 	vmov	r0, s0
 802279a:	4ec1      	ldr	r6, [pc, #772]	; (8022aa0 <__ieee754_rem_pio2+0x340>)
 802279c:	4629      	mov	r1, r5
 802279e:	2b00      	cmp	r3, #0
 80227a0:	a3af      	add	r3, pc, #700	; (adr r3, 8022a60 <__ieee754_rem_pio2+0x300>)
 80227a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80227a6:	dd39      	ble.n	802281c <__ieee754_rem_pio2+0xbc>
 80227a8:	f7dd fd60 	bl	800026c <__aeabi_dsub>
 80227ac:	45b0      	cmp	r8, r6
 80227ae:	4604      	mov	r4, r0
 80227b0:	460d      	mov	r5, r1
 80227b2:	d01b      	beq.n	80227ec <__ieee754_rem_pio2+0x8c>
 80227b4:	a3ac      	add	r3, pc, #688	; (adr r3, 8022a68 <__ieee754_rem_pio2+0x308>)
 80227b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80227ba:	f7dd fd57 	bl	800026c <__aeabi_dsub>
 80227be:	4602      	mov	r2, r0
 80227c0:	460b      	mov	r3, r1
 80227c2:	4620      	mov	r0, r4
 80227c4:	4629      	mov	r1, r5
 80227c6:	e9ca 2300 	strd	r2, r3, [sl]
 80227ca:	f7dd fd4f 	bl	800026c <__aeabi_dsub>
 80227ce:	a3a6      	add	r3, pc, #664	; (adr r3, 8022a68 <__ieee754_rem_pio2+0x308>)
 80227d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80227d4:	f04f 0b01 	mov.w	fp, #1
 80227d8:	f7dd fd48 	bl	800026c <__aeabi_dsub>
 80227dc:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80227e0:	4658      	mov	r0, fp
 80227e2:	b00b      	add	sp, #44	; 0x2c
 80227e4:	ecbd 8b02 	vpop	{d8}
 80227e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80227ec:	a3a0      	add	r3, pc, #640	; (adr r3, 8022a70 <__ieee754_rem_pio2+0x310>)
 80227ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80227f2:	f7dd fd3b 	bl	800026c <__aeabi_dsub>
 80227f6:	4604      	mov	r4, r0
 80227f8:	460d      	mov	r5, r1
 80227fa:	a39f      	add	r3, pc, #636	; (adr r3, 8022a78 <__ieee754_rem_pio2+0x318>)
 80227fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022800:	f7dd fd34 	bl	800026c <__aeabi_dsub>
 8022804:	4602      	mov	r2, r0
 8022806:	460b      	mov	r3, r1
 8022808:	4620      	mov	r0, r4
 802280a:	4629      	mov	r1, r5
 802280c:	e9ca 2300 	strd	r2, r3, [sl]
 8022810:	f7dd fd2c 	bl	800026c <__aeabi_dsub>
 8022814:	a398      	add	r3, pc, #608	; (adr r3, 8022a78 <__ieee754_rem_pio2+0x318>)
 8022816:	e9d3 2300 	ldrd	r2, r3, [r3]
 802281a:	e7db      	b.n	80227d4 <__ieee754_rem_pio2+0x74>
 802281c:	f7dd fd28 	bl	8000270 <__adddf3>
 8022820:	45b0      	cmp	r8, r6
 8022822:	4604      	mov	r4, r0
 8022824:	460d      	mov	r5, r1
 8022826:	d016      	beq.n	8022856 <__ieee754_rem_pio2+0xf6>
 8022828:	a38f      	add	r3, pc, #572	; (adr r3, 8022a68 <__ieee754_rem_pio2+0x308>)
 802282a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802282e:	f7dd fd1f 	bl	8000270 <__adddf3>
 8022832:	4602      	mov	r2, r0
 8022834:	460b      	mov	r3, r1
 8022836:	4620      	mov	r0, r4
 8022838:	4629      	mov	r1, r5
 802283a:	e9ca 2300 	strd	r2, r3, [sl]
 802283e:	f7dd fd15 	bl	800026c <__aeabi_dsub>
 8022842:	a389      	add	r3, pc, #548	; (adr r3, 8022a68 <__ieee754_rem_pio2+0x308>)
 8022844:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022848:	f7dd fd12 	bl	8000270 <__adddf3>
 802284c:	f04f 3bff 	mov.w	fp, #4294967295
 8022850:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8022854:	e7c4      	b.n	80227e0 <__ieee754_rem_pio2+0x80>
 8022856:	a386      	add	r3, pc, #536	; (adr r3, 8022a70 <__ieee754_rem_pio2+0x310>)
 8022858:	e9d3 2300 	ldrd	r2, r3, [r3]
 802285c:	f7dd fd08 	bl	8000270 <__adddf3>
 8022860:	4604      	mov	r4, r0
 8022862:	460d      	mov	r5, r1
 8022864:	a384      	add	r3, pc, #528	; (adr r3, 8022a78 <__ieee754_rem_pio2+0x318>)
 8022866:	e9d3 2300 	ldrd	r2, r3, [r3]
 802286a:	f7dd fd01 	bl	8000270 <__adddf3>
 802286e:	4602      	mov	r2, r0
 8022870:	460b      	mov	r3, r1
 8022872:	4620      	mov	r0, r4
 8022874:	4629      	mov	r1, r5
 8022876:	e9ca 2300 	strd	r2, r3, [sl]
 802287a:	f7dd fcf7 	bl	800026c <__aeabi_dsub>
 802287e:	a37e      	add	r3, pc, #504	; (adr r3, 8022a78 <__ieee754_rem_pio2+0x318>)
 8022880:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022884:	e7e0      	b.n	8022848 <__ieee754_rem_pio2+0xe8>
 8022886:	4b87      	ldr	r3, [pc, #540]	; (8022aa4 <__ieee754_rem_pio2+0x344>)
 8022888:	4598      	cmp	r8, r3
 802288a:	f300 80d8 	bgt.w	8022a3e <__ieee754_rem_pio2+0x2de>
 802288e:	f000 f96d 	bl	8022b6c <fabs>
 8022892:	ee10 0a10 	vmov	r0, s0
 8022896:	ec55 4b10 	vmov	r4, r5, d0
 802289a:	a379      	add	r3, pc, #484	; (adr r3, 8022a80 <__ieee754_rem_pio2+0x320>)
 802289c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80228a0:	4629      	mov	r1, r5
 80228a2:	f7dd fe9b 	bl	80005dc <__aeabi_dmul>
 80228a6:	2200      	movs	r2, #0
 80228a8:	4b7f      	ldr	r3, [pc, #508]	; (8022aa8 <__ieee754_rem_pio2+0x348>)
 80228aa:	f7dd fce1 	bl	8000270 <__adddf3>
 80228ae:	f7de f945 	bl	8000b3c <__aeabi_d2iz>
 80228b2:	4683      	mov	fp, r0
 80228b4:	f7dd fe28 	bl	8000508 <__aeabi_i2d>
 80228b8:	4602      	mov	r2, r0
 80228ba:	460b      	mov	r3, r1
 80228bc:	ec43 2b18 	vmov	d8, r2, r3
 80228c0:	a367      	add	r3, pc, #412	; (adr r3, 8022a60 <__ieee754_rem_pio2+0x300>)
 80228c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80228c6:	f7dd fe89 	bl	80005dc <__aeabi_dmul>
 80228ca:	4602      	mov	r2, r0
 80228cc:	460b      	mov	r3, r1
 80228ce:	4620      	mov	r0, r4
 80228d0:	4629      	mov	r1, r5
 80228d2:	f7dd fccb 	bl	800026c <__aeabi_dsub>
 80228d6:	4606      	mov	r6, r0
 80228d8:	460f      	mov	r7, r1
 80228da:	a363      	add	r3, pc, #396	; (adr r3, 8022a68 <__ieee754_rem_pio2+0x308>)
 80228dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80228e0:	ec51 0b18 	vmov	r0, r1, d8
 80228e4:	f7dd fe7a 	bl	80005dc <__aeabi_dmul>
 80228e8:	f1bb 0f1f 	cmp.w	fp, #31
 80228ec:	4604      	mov	r4, r0
 80228ee:	460d      	mov	r5, r1
 80228f0:	dc0d      	bgt.n	802290e <__ieee754_rem_pio2+0x1ae>
 80228f2:	f10b 32ff 	add.w	r2, fp, #4294967295
 80228f6:	4b6d      	ldr	r3, [pc, #436]	; (8022aac <__ieee754_rem_pio2+0x34c>)
 80228f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80228fc:	4543      	cmp	r3, r8
 80228fe:	d006      	beq.n	802290e <__ieee754_rem_pio2+0x1ae>
 8022900:	4622      	mov	r2, r4
 8022902:	462b      	mov	r3, r5
 8022904:	4630      	mov	r0, r6
 8022906:	4639      	mov	r1, r7
 8022908:	f7dd fcb0 	bl	800026c <__aeabi_dsub>
 802290c:	e00e      	b.n	802292c <__ieee754_rem_pio2+0x1cc>
 802290e:	462b      	mov	r3, r5
 8022910:	4622      	mov	r2, r4
 8022912:	4630      	mov	r0, r6
 8022914:	4639      	mov	r1, r7
 8022916:	f7dd fca9 	bl	800026c <__aeabi_dsub>
 802291a:	ea4f 5328 	mov.w	r3, r8, asr #20
 802291e:	9303      	str	r3, [sp, #12]
 8022920:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8022924:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 8022928:	2b10      	cmp	r3, #16
 802292a:	dc02      	bgt.n	8022932 <__ieee754_rem_pio2+0x1d2>
 802292c:	e9ca 0100 	strd	r0, r1, [sl]
 8022930:	e039      	b.n	80229a6 <__ieee754_rem_pio2+0x246>
 8022932:	a34f      	add	r3, pc, #316	; (adr r3, 8022a70 <__ieee754_rem_pio2+0x310>)
 8022934:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022938:	ec51 0b18 	vmov	r0, r1, d8
 802293c:	f7dd fe4e 	bl	80005dc <__aeabi_dmul>
 8022940:	4604      	mov	r4, r0
 8022942:	460d      	mov	r5, r1
 8022944:	4602      	mov	r2, r0
 8022946:	460b      	mov	r3, r1
 8022948:	4630      	mov	r0, r6
 802294a:	4639      	mov	r1, r7
 802294c:	f7dd fc8e 	bl	800026c <__aeabi_dsub>
 8022950:	4602      	mov	r2, r0
 8022952:	460b      	mov	r3, r1
 8022954:	4680      	mov	r8, r0
 8022956:	4689      	mov	r9, r1
 8022958:	4630      	mov	r0, r6
 802295a:	4639      	mov	r1, r7
 802295c:	f7dd fc86 	bl	800026c <__aeabi_dsub>
 8022960:	4622      	mov	r2, r4
 8022962:	462b      	mov	r3, r5
 8022964:	f7dd fc82 	bl	800026c <__aeabi_dsub>
 8022968:	4604      	mov	r4, r0
 802296a:	460d      	mov	r5, r1
 802296c:	a342      	add	r3, pc, #264	; (adr r3, 8022a78 <__ieee754_rem_pio2+0x318>)
 802296e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022972:	ec51 0b18 	vmov	r0, r1, d8
 8022976:	f7dd fe31 	bl	80005dc <__aeabi_dmul>
 802297a:	4622      	mov	r2, r4
 802297c:	462b      	mov	r3, r5
 802297e:	f7dd fc75 	bl	800026c <__aeabi_dsub>
 8022982:	4602      	mov	r2, r0
 8022984:	460b      	mov	r3, r1
 8022986:	4604      	mov	r4, r0
 8022988:	460d      	mov	r5, r1
 802298a:	4640      	mov	r0, r8
 802298c:	4649      	mov	r1, r9
 802298e:	f7dd fc6d 	bl	800026c <__aeabi_dsub>
 8022992:	9a03      	ldr	r2, [sp, #12]
 8022994:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8022998:	1ad3      	subs	r3, r2, r3
 802299a:	2b31      	cmp	r3, #49	; 0x31
 802299c:	dc24      	bgt.n	80229e8 <__ieee754_rem_pio2+0x288>
 802299e:	4646      	mov	r6, r8
 80229a0:	464f      	mov	r7, r9
 80229a2:	e9ca 0100 	strd	r0, r1, [sl]
 80229a6:	e9da 8900 	ldrd	r8, r9, [sl]
 80229aa:	4630      	mov	r0, r6
 80229ac:	4639      	mov	r1, r7
 80229ae:	4642      	mov	r2, r8
 80229b0:	464b      	mov	r3, r9
 80229b2:	f7dd fc5b 	bl	800026c <__aeabi_dsub>
 80229b6:	462b      	mov	r3, r5
 80229b8:	4622      	mov	r2, r4
 80229ba:	f7dd fc57 	bl	800026c <__aeabi_dsub>
 80229be:	9b02      	ldr	r3, [sp, #8]
 80229c0:	2b00      	cmp	r3, #0
 80229c2:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80229c6:	f6bf af0b 	bge.w	80227e0 <__ieee754_rem_pio2+0x80>
 80229ca:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80229ce:	f8ca 8000 	str.w	r8, [sl]
 80229d2:	f8ca 0008 	str.w	r0, [sl, #8]
 80229d6:	f8ca 3004 	str.w	r3, [sl, #4]
 80229da:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80229de:	f8ca 300c 	str.w	r3, [sl, #12]
 80229e2:	f1cb 0b00 	rsb	fp, fp, #0
 80229e6:	e6fb      	b.n	80227e0 <__ieee754_rem_pio2+0x80>
 80229e8:	a327      	add	r3, pc, #156	; (adr r3, 8022a88 <__ieee754_rem_pio2+0x328>)
 80229ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80229ee:	ec51 0b18 	vmov	r0, r1, d8
 80229f2:	f7dd fdf3 	bl	80005dc <__aeabi_dmul>
 80229f6:	4604      	mov	r4, r0
 80229f8:	460d      	mov	r5, r1
 80229fa:	4602      	mov	r2, r0
 80229fc:	460b      	mov	r3, r1
 80229fe:	4640      	mov	r0, r8
 8022a00:	4649      	mov	r1, r9
 8022a02:	f7dd fc33 	bl	800026c <__aeabi_dsub>
 8022a06:	4602      	mov	r2, r0
 8022a08:	460b      	mov	r3, r1
 8022a0a:	4606      	mov	r6, r0
 8022a0c:	460f      	mov	r7, r1
 8022a0e:	4640      	mov	r0, r8
 8022a10:	4649      	mov	r1, r9
 8022a12:	f7dd fc2b 	bl	800026c <__aeabi_dsub>
 8022a16:	4622      	mov	r2, r4
 8022a18:	462b      	mov	r3, r5
 8022a1a:	f7dd fc27 	bl	800026c <__aeabi_dsub>
 8022a1e:	4604      	mov	r4, r0
 8022a20:	460d      	mov	r5, r1
 8022a22:	a31b      	add	r3, pc, #108	; (adr r3, 8022a90 <__ieee754_rem_pio2+0x330>)
 8022a24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022a28:	ec51 0b18 	vmov	r0, r1, d8
 8022a2c:	f7dd fdd6 	bl	80005dc <__aeabi_dmul>
 8022a30:	4622      	mov	r2, r4
 8022a32:	462b      	mov	r3, r5
 8022a34:	f7dd fc1a 	bl	800026c <__aeabi_dsub>
 8022a38:	4604      	mov	r4, r0
 8022a3a:	460d      	mov	r5, r1
 8022a3c:	e760      	b.n	8022900 <__ieee754_rem_pio2+0x1a0>
 8022a3e:	4b1c      	ldr	r3, [pc, #112]	; (8022ab0 <__ieee754_rem_pio2+0x350>)
 8022a40:	4598      	cmp	r8, r3
 8022a42:	dd37      	ble.n	8022ab4 <__ieee754_rem_pio2+0x354>
 8022a44:	ee10 2a10 	vmov	r2, s0
 8022a48:	462b      	mov	r3, r5
 8022a4a:	4620      	mov	r0, r4
 8022a4c:	4629      	mov	r1, r5
 8022a4e:	f7dd fc0d 	bl	800026c <__aeabi_dsub>
 8022a52:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8022a56:	e9ca 0100 	strd	r0, r1, [sl]
 8022a5a:	e695      	b.n	8022788 <__ieee754_rem_pio2+0x28>
 8022a5c:	f3af 8000 	nop.w
 8022a60:	54400000 	.word	0x54400000
 8022a64:	3ff921fb 	.word	0x3ff921fb
 8022a68:	1a626331 	.word	0x1a626331
 8022a6c:	3dd0b461 	.word	0x3dd0b461
 8022a70:	1a600000 	.word	0x1a600000
 8022a74:	3dd0b461 	.word	0x3dd0b461
 8022a78:	2e037073 	.word	0x2e037073
 8022a7c:	3ba3198a 	.word	0x3ba3198a
 8022a80:	6dc9c883 	.word	0x6dc9c883
 8022a84:	3fe45f30 	.word	0x3fe45f30
 8022a88:	2e000000 	.word	0x2e000000
 8022a8c:	3ba3198a 	.word	0x3ba3198a
 8022a90:	252049c1 	.word	0x252049c1
 8022a94:	397b839a 	.word	0x397b839a
 8022a98:	3fe921fb 	.word	0x3fe921fb
 8022a9c:	4002d97b 	.word	0x4002d97b
 8022aa0:	3ff921fb 	.word	0x3ff921fb
 8022aa4:	413921fb 	.word	0x413921fb
 8022aa8:	3fe00000 	.word	0x3fe00000
 8022aac:	08026050 	.word	0x08026050
 8022ab0:	7fefffff 	.word	0x7fefffff
 8022ab4:	ea4f 5628 	mov.w	r6, r8, asr #20
 8022ab8:	4620      	mov	r0, r4
 8022aba:	2703      	movs	r7, #3
 8022abc:	f2a6 4616 	subw	r6, r6, #1046	; 0x416
 8022ac0:	eba8 5106 	sub.w	r1, r8, r6, lsl #20
 8022ac4:	f10d 0828 	add.w	r8, sp, #40	; 0x28
 8022ac8:	460d      	mov	r5, r1
 8022aca:	f7de f837 	bl	8000b3c <__aeabi_d2iz>
 8022ace:	f7dd fd1b 	bl	8000508 <__aeabi_i2d>
 8022ad2:	4602      	mov	r2, r0
 8022ad4:	460b      	mov	r3, r1
 8022ad6:	4620      	mov	r0, r4
 8022ad8:	4629      	mov	r1, r5
 8022ada:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8022ade:	f7dd fbc5 	bl	800026c <__aeabi_dsub>
 8022ae2:	2200      	movs	r2, #0
 8022ae4:	4b1f      	ldr	r3, [pc, #124]	; (8022b64 <__ieee754_rem_pio2+0x404>)
 8022ae6:	f7dd fd79 	bl	80005dc <__aeabi_dmul>
 8022aea:	460d      	mov	r5, r1
 8022aec:	4604      	mov	r4, r0
 8022aee:	f7de f825 	bl	8000b3c <__aeabi_d2iz>
 8022af2:	f7dd fd09 	bl	8000508 <__aeabi_i2d>
 8022af6:	4602      	mov	r2, r0
 8022af8:	460b      	mov	r3, r1
 8022afa:	4620      	mov	r0, r4
 8022afc:	4629      	mov	r1, r5
 8022afe:	2400      	movs	r4, #0
 8022b00:	2500      	movs	r5, #0
 8022b02:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8022b06:	f7dd fbb1 	bl	800026c <__aeabi_dsub>
 8022b0a:	2200      	movs	r2, #0
 8022b0c:	4b15      	ldr	r3, [pc, #84]	; (8022b64 <__ieee754_rem_pio2+0x404>)
 8022b0e:	f7dd fd65 	bl	80005dc <__aeabi_dmul>
 8022b12:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8022b16:	4622      	mov	r2, r4
 8022b18:	462b      	mov	r3, r5
 8022b1a:	46b9      	mov	r9, r7
 8022b1c:	3f01      	subs	r7, #1
 8022b1e:	e978 0102 	ldrd	r0, r1, [r8, #-8]!
 8022b22:	f7dd ffc3 	bl	8000aac <__aeabi_dcmpeq>
 8022b26:	2800      	cmp	r0, #0
 8022b28:	d1f5      	bne.n	8022b16 <__ieee754_rem_pio2+0x3b6>
 8022b2a:	4b0f      	ldr	r3, [pc, #60]	; (8022b68 <__ieee754_rem_pio2+0x408>)
 8022b2c:	4632      	mov	r2, r6
 8022b2e:	4651      	mov	r1, sl
 8022b30:	a804      	add	r0, sp, #16
 8022b32:	9301      	str	r3, [sp, #4]
 8022b34:	2302      	movs	r3, #2
 8022b36:	9300      	str	r3, [sp, #0]
 8022b38:	464b      	mov	r3, r9
 8022b3a:	f000 fc4d 	bl	80233d8 <__kernel_rem_pio2>
 8022b3e:	9b02      	ldr	r3, [sp, #8]
 8022b40:	4683      	mov	fp, r0
 8022b42:	2b00      	cmp	r3, #0
 8022b44:	f6bf ae4c 	bge.w	80227e0 <__ieee754_rem_pio2+0x80>
 8022b48:	e9da 2100 	ldrd	r2, r1, [sl]
 8022b4c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8022b50:	e9ca 2300 	strd	r2, r3, [sl]
 8022b54:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 8022b58:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8022b5c:	e9ca 2302 	strd	r2, r3, [sl, #8]
 8022b60:	e73f      	b.n	80229e2 <__ieee754_rem_pio2+0x282>
 8022b62:	bf00      	nop
 8022b64:	41700000 	.word	0x41700000
 8022b68:	080260d0 	.word	0x080260d0

08022b6c <fabs>:
 8022b6c:	ec51 0b10 	vmov	r0, r1, d0
 8022b70:	ee10 2a10 	vmov	r2, s0
 8022b74:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8022b78:	ec43 2b10 	vmov	d0, r2, r3
 8022b7c:	4770      	bx	lr
	...

08022b80 <__kernel_cosf>:
 8022b80:	ee10 3a10 	vmov	r3, s0
 8022b84:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8022b88:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8022b8c:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 8022b90:	da05      	bge.n	8022b9e <__kernel_cosf+0x1e>
 8022b92:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8022b96:	ee17 2a90 	vmov	r2, s15
 8022b9a:	2a00      	cmp	r2, #0
 8022b9c:	d03b      	beq.n	8022c16 <__kernel_cosf+0x96>
 8022b9e:	ee20 7a00 	vmul.f32	s14, s0, s0
 8022ba2:	eddf 7a1e 	vldr	s15, [pc, #120]	; 8022c1c <__kernel_cosf+0x9c>
 8022ba6:	ed9f 6a1e 	vldr	s12, [pc, #120]	; 8022c20 <__kernel_cosf+0xa0>
 8022baa:	ee60 0ac0 	vnmul.f32	s1, s1, s0
 8022bae:	4a1d      	ldr	r2, [pc, #116]	; (8022c24 <__kernel_cosf+0xa4>)
 8022bb0:	eea7 6a27 	vfma.f32	s12, s14, s15
 8022bb4:	eddf 7a1c 	vldr	s15, [pc, #112]	; 8022c28 <__kernel_cosf+0xa8>
 8022bb8:	4293      	cmp	r3, r2
 8022bba:	eee6 7a07 	vfma.f32	s15, s12, s14
 8022bbe:	ed9f 6a1b 	vldr	s12, [pc, #108]	; 8022c2c <__kernel_cosf+0xac>
 8022bc2:	eea7 6a87 	vfma.f32	s12, s15, s14
 8022bc6:	eddf 7a1a 	vldr	s15, [pc, #104]	; 8022c30 <__kernel_cosf+0xb0>
 8022bca:	eee6 7a07 	vfma.f32	s15, s12, s14
 8022bce:	ed9f 6a19 	vldr	s12, [pc, #100]	; 8022c34 <__kernel_cosf+0xb4>
 8022bd2:	eea7 6a87 	vfma.f32	s12, s15, s14
 8022bd6:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8022bda:	ee67 7a27 	vmul.f32	s15, s14, s15
 8022bde:	ee26 6a07 	vmul.f32	s12, s12, s14
 8022be2:	eee7 0a06 	vfma.f32	s1, s14, s12
 8022be6:	dc04      	bgt.n	8022bf2 <__kernel_cosf+0x72>
 8022be8:	ee77 7ae0 	vsub.f32	s15, s15, s1
 8022bec:	ee36 0ae7 	vsub.f32	s0, s13, s15
 8022bf0:	4770      	bx	lr
 8022bf2:	4a11      	ldr	r2, [pc, #68]	; (8022c38 <__kernel_cosf+0xb8>)
 8022bf4:	4293      	cmp	r3, r2
 8022bf6:	bfd6      	itet	le
 8022bf8:	f103 437f 	addle.w	r3, r3, #4278190080	; 0xff000000
 8022bfc:	eeb5 7a02 	vmovgt.f32	s14, #82	; 0x3e900000  0.2812500
 8022c00:	ee07 3a10 	vmovle	s14, r3
 8022c04:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8022c08:	ee36 0ac7 	vsub.f32	s0, s13, s14
 8022c0c:	ee77 7ae0 	vsub.f32	s15, s15, s1
 8022c10:	ee30 0a67 	vsub.f32	s0, s0, s15
 8022c14:	4770      	bx	lr
 8022c16:	eeb0 0a66 	vmov.f32	s0, s13
 8022c1a:	4770      	bx	lr
 8022c1c:	ad47d74e 	.word	0xad47d74e
 8022c20:	310f74f6 	.word	0x310f74f6
 8022c24:	3e999999 	.word	0x3e999999
 8022c28:	b493f27c 	.word	0xb493f27c
 8022c2c:	37d00d01 	.word	0x37d00d01
 8022c30:	bab60b61 	.word	0xbab60b61
 8022c34:	3d2aaaab 	.word	0x3d2aaaab
 8022c38:	3f480000 	.word	0x3f480000

08022c3c <__kernel_sinf>:
 8022c3c:	ee10 3a10 	vmov	r3, s0
 8022c40:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8022c44:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 8022c48:	da04      	bge.n	8022c54 <__kernel_sinf+0x18>
 8022c4a:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8022c4e:	ee17 3a90 	vmov	r3, s15
 8022c52:	b35b      	cbz	r3, 8022cac <__kernel_sinf+0x70>
 8022c54:	ee20 7a00 	vmul.f32	s14, s0, s0
 8022c58:	eddf 7a15 	vldr	s15, [pc, #84]	; 8022cb0 <__kernel_sinf+0x74>
 8022c5c:	ed9f 6a15 	vldr	s12, [pc, #84]	; 8022cb4 <__kernel_sinf+0x78>
 8022c60:	eea7 6a27 	vfma.f32	s12, s14, s15
 8022c64:	eddf 7a14 	vldr	s15, [pc, #80]	; 8022cb8 <__kernel_sinf+0x7c>
 8022c68:	ee60 6a07 	vmul.f32	s13, s0, s14
 8022c6c:	eee6 7a07 	vfma.f32	s15, s12, s14
 8022c70:	ed9f 6a12 	vldr	s12, [pc, #72]	; 8022cbc <__kernel_sinf+0x80>
 8022c74:	eea7 6a87 	vfma.f32	s12, s15, s14
 8022c78:	eddf 7a11 	vldr	s15, [pc, #68]	; 8022cc0 <__kernel_sinf+0x84>
 8022c7c:	eee6 7a07 	vfma.f32	s15, s12, s14
 8022c80:	b930      	cbnz	r0, 8022c90 <__kernel_sinf+0x54>
 8022c82:	ed9f 6a10 	vldr	s12, [pc, #64]	; 8022cc4 <__kernel_sinf+0x88>
 8022c86:	eea7 6a27 	vfma.f32	s12, s14, s15
 8022c8a:	eea6 0a26 	vfma.f32	s0, s12, s13
 8022c8e:	4770      	bx	lr
 8022c90:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 8022c94:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8022c98:	eee0 7a86 	vfma.f32	s15, s1, s12
 8022c9c:	eed7 0a87 	vfnms.f32	s1, s15, s14
 8022ca0:	eddf 7a09 	vldr	s15, [pc, #36]	; 8022cc8 <__kernel_sinf+0x8c>
 8022ca4:	eee6 0aa7 	vfma.f32	s1, s13, s15
 8022ca8:	ee30 0a60 	vsub.f32	s0, s0, s1
 8022cac:	4770      	bx	lr
 8022cae:	bf00      	nop
 8022cb0:	2f2ec9d3 	.word	0x2f2ec9d3
 8022cb4:	b2d72f34 	.word	0xb2d72f34
 8022cb8:	3638ef1b 	.word	0x3638ef1b
 8022cbc:	b9500d01 	.word	0xb9500d01
 8022cc0:	3c088889 	.word	0x3c088889
 8022cc4:	be2aaaab 	.word	0xbe2aaaab
 8022cc8:	3e2aaaab 	.word	0x3e2aaaab

08022ccc <__ieee754_atan2f>:
 8022ccc:	ee10 2a90 	vmov	r2, s1
 8022cd0:	eef0 7a40 	vmov.f32	s15, s0
 8022cd4:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 8022cd8:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8022cdc:	b510      	push	{r4, lr}
 8022cde:	dc06      	bgt.n	8022cee <__ieee754_atan2f+0x22>
 8022ce0:	ee10 0a10 	vmov	r0, s0
 8022ce4:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 8022ce8:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8022cec:	dd04      	ble.n	8022cf8 <__ieee754_atan2f+0x2c>
 8022cee:	ee77 7aa0 	vadd.f32	s15, s15, s1
 8022cf2:	eeb0 0a67 	vmov.f32	s0, s15
 8022cf6:	bd10      	pop	{r4, pc}
 8022cf8:	f1b2 5f7e 	cmp.w	r2, #1065353216	; 0x3f800000
 8022cfc:	d103      	bne.n	8022d06 <__ieee754_atan2f+0x3a>
 8022cfe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8022d02:	f000 b9d9 	b.w	80230b8 <atanf>
 8022d06:	1794      	asrs	r4, r2, #30
 8022d08:	f004 0402 	and.w	r4, r4, #2
 8022d0c:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 8022d10:	b93b      	cbnz	r3, 8022d22 <__ieee754_atan2f+0x56>
 8022d12:	2c02      	cmp	r4, #2
 8022d14:	d05c      	beq.n	8022dd0 <__ieee754_atan2f+0x104>
 8022d16:	2c03      	cmp	r4, #3
 8022d18:	ed9f 7a32 	vldr	s14, [pc, #200]	; 8022de4 <__ieee754_atan2f+0x118>
 8022d1c:	fe47 7a00 	vseleq.f32	s15, s14, s0
 8022d20:	e7e7      	b.n	8022cf2 <__ieee754_atan2f+0x26>
 8022d22:	b939      	cbnz	r1, 8022d34 <__ieee754_atan2f+0x68>
 8022d24:	2800      	cmp	r0, #0
 8022d26:	eddf 7a30 	vldr	s15, [pc, #192]	; 8022de8 <__ieee754_atan2f+0x11c>
 8022d2a:	ed9f 7a30 	vldr	s14, [pc, #192]	; 8022dec <__ieee754_atan2f+0x120>
 8022d2e:	fe67 7a87 	vselge.f32	s15, s15, s14
 8022d32:	e7de      	b.n	8022cf2 <__ieee754_atan2f+0x26>
 8022d34:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8022d38:	d110      	bne.n	8022d5c <__ieee754_atan2f+0x90>
 8022d3a:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8022d3e:	f104 34ff 	add.w	r4, r4, #4294967295
 8022d42:	d107      	bne.n	8022d54 <__ieee754_atan2f+0x88>
 8022d44:	2c02      	cmp	r4, #2
 8022d46:	d846      	bhi.n	8022dd6 <__ieee754_atan2f+0x10a>
 8022d48:	4b29      	ldr	r3, [pc, #164]	; (8022df0 <__ieee754_atan2f+0x124>)
 8022d4a:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8022d4e:	edd3 7a00 	vldr	s15, [r3]
 8022d52:	e7ce      	b.n	8022cf2 <__ieee754_atan2f+0x26>
 8022d54:	2c02      	cmp	r4, #2
 8022d56:	d841      	bhi.n	8022ddc <__ieee754_atan2f+0x110>
 8022d58:	4b26      	ldr	r3, [pc, #152]	; (8022df4 <__ieee754_atan2f+0x128>)
 8022d5a:	e7f6      	b.n	8022d4a <__ieee754_atan2f+0x7e>
 8022d5c:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8022d60:	d0e0      	beq.n	8022d24 <__ieee754_atan2f+0x58>
 8022d62:	1a5b      	subs	r3, r3, r1
 8022d64:	f1b3 5ff4 	cmp.w	r3, #511705088	; 0x1e800000
 8022d68:	ea4f 51e3 	mov.w	r1, r3, asr #23
 8022d6c:	da1a      	bge.n	8022da4 <__ieee754_atan2f+0xd8>
 8022d6e:	2a00      	cmp	r2, #0
 8022d70:	da01      	bge.n	8022d76 <__ieee754_atan2f+0xaa>
 8022d72:	313c      	adds	r1, #60	; 0x3c
 8022d74:	db19      	blt.n	8022daa <__ieee754_atan2f+0xde>
 8022d76:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 8022d7a:	f000 fa71 	bl	8023260 <fabsf>
 8022d7e:	f000 f99b 	bl	80230b8 <atanf>
 8022d82:	eef0 7a40 	vmov.f32	s15, s0
 8022d86:	2c01      	cmp	r4, #1
 8022d88:	d012      	beq.n	8022db0 <__ieee754_atan2f+0xe4>
 8022d8a:	2c02      	cmp	r4, #2
 8022d8c:	d017      	beq.n	8022dbe <__ieee754_atan2f+0xf2>
 8022d8e:	2c00      	cmp	r4, #0
 8022d90:	d0af      	beq.n	8022cf2 <__ieee754_atan2f+0x26>
 8022d92:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8022df8 <__ieee754_atan2f+0x12c>
 8022d96:	ee77 7a87 	vadd.f32	s15, s15, s14
 8022d9a:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8022dfc <__ieee754_atan2f+0x130>
 8022d9e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8022da2:	e7a6      	b.n	8022cf2 <__ieee754_atan2f+0x26>
 8022da4:	eddf 7a10 	vldr	s15, [pc, #64]	; 8022de8 <__ieee754_atan2f+0x11c>
 8022da8:	e7ed      	b.n	8022d86 <__ieee754_atan2f+0xba>
 8022daa:	eddf 7a15 	vldr	s15, [pc, #84]	; 8022e00 <__ieee754_atan2f+0x134>
 8022dae:	e7ea      	b.n	8022d86 <__ieee754_atan2f+0xba>
 8022db0:	ee17 3a90 	vmov	r3, s15
 8022db4:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8022db8:	ee07 3a90 	vmov	s15, r3
 8022dbc:	e799      	b.n	8022cf2 <__ieee754_atan2f+0x26>
 8022dbe:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8022df8 <__ieee754_atan2f+0x12c>
 8022dc2:	ee77 7a87 	vadd.f32	s15, s15, s14
 8022dc6:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 8022dfc <__ieee754_atan2f+0x130>
 8022dca:	ee77 7a67 	vsub.f32	s15, s14, s15
 8022dce:	e790      	b.n	8022cf2 <__ieee754_atan2f+0x26>
 8022dd0:	eddf 7a0a 	vldr	s15, [pc, #40]	; 8022dfc <__ieee754_atan2f+0x130>
 8022dd4:	e78d      	b.n	8022cf2 <__ieee754_atan2f+0x26>
 8022dd6:	eddf 7a0b 	vldr	s15, [pc, #44]	; 8022e04 <__ieee754_atan2f+0x138>
 8022dda:	e78a      	b.n	8022cf2 <__ieee754_atan2f+0x26>
 8022ddc:	eddf 7a08 	vldr	s15, [pc, #32]	; 8022e00 <__ieee754_atan2f+0x134>
 8022de0:	e787      	b.n	8022cf2 <__ieee754_atan2f+0x26>
 8022de2:	bf00      	nop
 8022de4:	c0490fdb 	.word	0xc0490fdb
 8022de8:	3fc90fdb 	.word	0x3fc90fdb
 8022dec:	bfc90fdb 	.word	0xbfc90fdb
 8022df0:	080261d8 	.word	0x080261d8
 8022df4:	080261e4 	.word	0x080261e4
 8022df8:	33bbbd2e 	.word	0x33bbbd2e
 8022dfc:	40490fdb 	.word	0x40490fdb
 8022e00:	00000000 	.word	0x00000000
 8022e04:	3f490fdb 	.word	0x3f490fdb

08022e08 <__ieee754_rem_pio2f>:
 8022e08:	b5f0      	push	{r4, r5, r6, r7, lr}
 8022e0a:	ee10 6a10 	vmov	r6, s0
 8022e0e:	4b85      	ldr	r3, [pc, #532]	; (8023024 <__ieee754_rem_pio2f+0x21c>)
 8022e10:	b087      	sub	sp, #28
 8022e12:	4604      	mov	r4, r0
 8022e14:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 8022e18:	429d      	cmp	r5, r3
 8022e1a:	dc05      	bgt.n	8022e28 <__ieee754_rem_pio2f+0x20>
 8022e1c:	2300      	movs	r3, #0
 8022e1e:	ed80 0a00 	vstr	s0, [r0]
 8022e22:	6043      	str	r3, [r0, #4]
 8022e24:	2000      	movs	r0, #0
 8022e26:	e020      	b.n	8022e6a <__ieee754_rem_pio2f+0x62>
 8022e28:	4b7f      	ldr	r3, [pc, #508]	; (8023028 <__ieee754_rem_pio2f+0x220>)
 8022e2a:	429d      	cmp	r5, r3
 8022e2c:	dc38      	bgt.n	8022ea0 <__ieee754_rem_pio2f+0x98>
 8022e2e:	2e00      	cmp	r6, #0
 8022e30:	f025 050f 	bic.w	r5, r5, #15
 8022e34:	ed9f 7a7d 	vldr	s14, [pc, #500]	; 802302c <__ieee754_rem_pio2f+0x224>
 8022e38:	4b7d      	ldr	r3, [pc, #500]	; (8023030 <__ieee754_rem_pio2f+0x228>)
 8022e3a:	dd18      	ble.n	8022e6e <__ieee754_rem_pio2f+0x66>
 8022e3c:	429d      	cmp	r5, r3
 8022e3e:	ee70 7a47 	vsub.f32	s15, s0, s14
 8022e42:	bf09      	itett	eq
 8022e44:	ed9f 7a7b 	vldreq	s14, [pc, #492]	; 8023034 <__ieee754_rem_pio2f+0x22c>
 8022e48:	ed9f 7a7b 	vldrne	s14, [pc, #492]	; 8023038 <__ieee754_rem_pio2f+0x230>
 8022e4c:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 8022e50:	ed9f 7a7a 	vldreq	s14, [pc, #488]	; 802303c <__ieee754_rem_pio2f+0x234>
 8022e54:	ee77 6ac7 	vsub.f32	s13, s15, s14
 8022e58:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8022e5c:	edc0 6a00 	vstr	s13, [r0]
 8022e60:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8022e64:	edc0 7a01 	vstr	s15, [r0, #4]
 8022e68:	2001      	movs	r0, #1
 8022e6a:	b007      	add	sp, #28
 8022e6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8022e6e:	429d      	cmp	r5, r3
 8022e70:	ee70 7a07 	vadd.f32	s15, s0, s14
 8022e74:	bf09      	itett	eq
 8022e76:	ed9f 7a6f 	vldreq	s14, [pc, #444]	; 8023034 <__ieee754_rem_pio2f+0x22c>
 8022e7a:	ed9f 7a6f 	vldrne	s14, [pc, #444]	; 8023038 <__ieee754_rem_pio2f+0x230>
 8022e7e:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 8022e82:	ed9f 7a6e 	vldreq	s14, [pc, #440]	; 802303c <__ieee754_rem_pio2f+0x234>
 8022e86:	ee77 6a87 	vadd.f32	s13, s15, s14
 8022e8a:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8022e8e:	edc0 6a00 	vstr	s13, [r0]
 8022e92:	ee77 7a87 	vadd.f32	s15, s15, s14
 8022e96:	edc0 7a01 	vstr	s15, [r0, #4]
 8022e9a:	f04f 30ff 	mov.w	r0, #4294967295
 8022e9e:	e7e4      	b.n	8022e6a <__ieee754_rem_pio2f+0x62>
 8022ea0:	4b67      	ldr	r3, [pc, #412]	; (8023040 <__ieee754_rem_pio2f+0x238>)
 8022ea2:	429d      	cmp	r5, r3
 8022ea4:	dc70      	bgt.n	8022f88 <__ieee754_rem_pio2f+0x180>
 8022ea6:	f000 f9db 	bl	8023260 <fabsf>
 8022eaa:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8022eae:	ed9f 7a65 	vldr	s14, [pc, #404]	; 8023044 <__ieee754_rem_pio2f+0x23c>
 8022eb2:	eee0 7a07 	vfma.f32	s15, s0, s14
 8022eb6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8022eba:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8022ebe:	ee17 0a90 	vmov	r0, s15
 8022ec2:	eddf 7a5a 	vldr	s15, [pc, #360]	; 802302c <__ieee754_rem_pio2f+0x224>
 8022ec6:	281f      	cmp	r0, #31
 8022ec8:	eea7 0a67 	vfms.f32	s0, s14, s15
 8022ecc:	eddf 7a5a 	vldr	s15, [pc, #360]	; 8023038 <__ieee754_rem_pio2f+0x230>
 8022ed0:	eeb1 6a47 	vneg.f32	s12, s14
 8022ed4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8022ed8:	ee70 6a67 	vsub.f32	s13, s0, s15
 8022edc:	ee16 2a90 	vmov	r2, s13
 8022ee0:	dc1c      	bgt.n	8022f1c <__ieee754_rem_pio2f+0x114>
 8022ee2:	1e47      	subs	r7, r0, #1
 8022ee4:	4958      	ldr	r1, [pc, #352]	; (8023048 <__ieee754_rem_pio2f+0x240>)
 8022ee6:	f025 03ff 	bic.w	r3, r5, #255	; 0xff
 8022eea:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 8022eee:	428b      	cmp	r3, r1
 8022ef0:	d014      	beq.n	8022f1c <__ieee754_rem_pio2f+0x114>
 8022ef2:	6022      	str	r2, [r4, #0]
 8022ef4:	ed94 7a00 	vldr	s14, [r4]
 8022ef8:	2e00      	cmp	r6, #0
 8022efa:	ee30 0a47 	vsub.f32	s0, s0, s14
 8022efe:	ee30 0a67 	vsub.f32	s0, s0, s15
 8022f02:	ed84 0a01 	vstr	s0, [r4, #4]
 8022f06:	dab0      	bge.n	8022e6a <__ieee754_rem_pio2f+0x62>
 8022f08:	eeb1 7a47 	vneg.f32	s14, s14
 8022f0c:	eeb1 0a40 	vneg.f32	s0, s0
 8022f10:	ed84 7a00 	vstr	s14, [r4]
 8022f14:	ed84 0a01 	vstr	s0, [r4, #4]
 8022f18:	4240      	negs	r0, r0
 8022f1a:	e7a6      	b.n	8022e6a <__ieee754_rem_pio2f+0x62>
 8022f1c:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 8022f20:	15eb      	asrs	r3, r5, #23
 8022f22:	ebc1 51d5 	rsb	r1, r1, r5, lsr #23
 8022f26:	2908      	cmp	r1, #8
 8022f28:	dde3      	ble.n	8022ef2 <__ieee754_rem_pio2f+0xea>
 8022f2a:	eef0 6a40 	vmov.f32	s13, s0
 8022f2e:	eddf 5a41 	vldr	s11, [pc, #260]	; 8023034 <__ieee754_rem_pio2f+0x22c>
 8022f32:	eee6 6a25 	vfma.f32	s13, s12, s11
 8022f36:	ee70 7a66 	vsub.f32	s15, s0, s13
 8022f3a:	eee6 7a25 	vfma.f32	s15, s12, s11
 8022f3e:	eddf 5a3f 	vldr	s11, [pc, #252]	; 802303c <__ieee754_rem_pio2f+0x234>
 8022f42:	eed7 7a25 	vfnms.f32	s15, s14, s11
 8022f46:	ee76 5ae7 	vsub.f32	s11, s13, s15
 8022f4a:	ee15 2a90 	vmov	r2, s11
 8022f4e:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 8022f52:	1a5b      	subs	r3, r3, r1
 8022f54:	2b19      	cmp	r3, #25
 8022f56:	dc04      	bgt.n	8022f62 <__ieee754_rem_pio2f+0x15a>
 8022f58:	eeb0 0a66 	vmov.f32	s0, s13
 8022f5c:	edc4 5a00 	vstr	s11, [r4]
 8022f60:	e7c8      	b.n	8022ef4 <__ieee754_rem_pio2f+0xec>
 8022f62:	eeb0 0a66 	vmov.f32	s0, s13
 8022f66:	eddf 5a39 	vldr	s11, [pc, #228]	; 802304c <__ieee754_rem_pio2f+0x244>
 8022f6a:	eea6 0a25 	vfma.f32	s0, s12, s11
 8022f6e:	ee76 7ac0 	vsub.f32	s15, s13, s0
 8022f72:	eddf 6a37 	vldr	s13, [pc, #220]	; 8023050 <__ieee754_rem_pio2f+0x248>
 8022f76:	eee6 7a25 	vfma.f32	s15, s12, s11
 8022f7a:	eed7 7a26 	vfnms.f32	s15, s14, s13
 8022f7e:	ee30 7a67 	vsub.f32	s14, s0, s15
 8022f82:	ed84 7a00 	vstr	s14, [r4]
 8022f86:	e7b5      	b.n	8022ef4 <__ieee754_rem_pio2f+0xec>
 8022f88:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 8022f8c:	db06      	blt.n	8022f9c <__ieee754_rem_pio2f+0x194>
 8022f8e:	ee70 7a40 	vsub.f32	s15, s0, s0
 8022f92:	edc0 7a01 	vstr	s15, [r0, #4]
 8022f96:	edc0 7a00 	vstr	s15, [r0]
 8022f9a:	e743      	b.n	8022e24 <__ieee754_rem_pio2f+0x1c>
 8022f9c:	15ea      	asrs	r2, r5, #23
 8022f9e:	eddf 6a2d 	vldr	s13, [pc, #180]	; 8023054 <__ieee754_rem_pio2f+0x24c>
 8022fa2:	3a86      	subs	r2, #134	; 0x86
 8022fa4:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 8022fa8:	ee07 3a90 	vmov	s15, r3
 8022fac:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8022fb0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8022fb4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8022fb8:	ed8d 7a03 	vstr	s14, [sp, #12]
 8022fbc:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8022fc0:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8022fc4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8022fc8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8022fcc:	ed8d 7a04 	vstr	s14, [sp, #16]
 8022fd0:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8022fd4:	eef5 7a40 	vcmp.f32	s15, #0.0
 8022fd8:	edcd 7a05 	vstr	s15, [sp, #20]
 8022fdc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8022fe0:	d11e      	bne.n	8023020 <__ieee754_rem_pio2f+0x218>
 8022fe2:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8022fe6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8022fea:	bf14      	ite	ne
 8022fec:	2302      	movne	r3, #2
 8022fee:	2301      	moveq	r3, #1
 8022ff0:	4919      	ldr	r1, [pc, #100]	; (8023058 <__ieee754_rem_pio2f+0x250>)
 8022ff2:	a803      	add	r0, sp, #12
 8022ff4:	9101      	str	r1, [sp, #4]
 8022ff6:	2102      	movs	r1, #2
 8022ff8:	9100      	str	r1, [sp, #0]
 8022ffa:	4621      	mov	r1, r4
 8022ffc:	f000 fd3e 	bl	8023a7c <__kernel_rem_pio2f>
 8023000:	2e00      	cmp	r6, #0
 8023002:	f6bf af32 	bge.w	8022e6a <__ieee754_rem_pio2f+0x62>
 8023006:	edd4 7a00 	vldr	s15, [r4]
 802300a:	eef1 7a67 	vneg.f32	s15, s15
 802300e:	edc4 7a00 	vstr	s15, [r4]
 8023012:	edd4 7a01 	vldr	s15, [r4, #4]
 8023016:	eef1 7a67 	vneg.f32	s15, s15
 802301a:	edc4 7a01 	vstr	s15, [r4, #4]
 802301e:	e77b      	b.n	8022f18 <__ieee754_rem_pio2f+0x110>
 8023020:	2303      	movs	r3, #3
 8023022:	e7e5      	b.n	8022ff0 <__ieee754_rem_pio2f+0x1e8>
 8023024:	3f490fd8 	.word	0x3f490fd8
 8023028:	4016cbe3 	.word	0x4016cbe3
 802302c:	3fc90f80 	.word	0x3fc90f80
 8023030:	3fc90fd0 	.word	0x3fc90fd0
 8023034:	37354400 	.word	0x37354400
 8023038:	37354443 	.word	0x37354443
 802303c:	2e85a308 	.word	0x2e85a308
 8023040:	43490f80 	.word	0x43490f80
 8023044:	3f22f984 	.word	0x3f22f984
 8023048:	080261f0 	.word	0x080261f0
 802304c:	2e85a300 	.word	0x2e85a300
 8023050:	248d3132 	.word	0x248d3132
 8023054:	43800000 	.word	0x43800000
 8023058:	08026270 	.word	0x08026270

0802305c <logf>:
 802305c:	b508      	push	{r3, lr}
 802305e:	ed2d 8b02 	vpush	{d8}
 8023062:	eeb0 8a40 	vmov.f32	s16, s0
 8023066:	f000 ff7d 	bl	8023f64 <__ieee754_logf>
 802306a:	eeb4 8a48 	vcmp.f32	s16, s16
 802306e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8023072:	d60f      	bvs.n	8023094 <logf+0x38>
 8023074:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8023078:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802307c:	dc0a      	bgt.n	8023094 <logf+0x38>
 802307e:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8023082:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8023086:	d108      	bne.n	802309a <logf+0x3e>
 8023088:	f001 fc36 	bl	80248f8 <__errno>
 802308c:	2322      	movs	r3, #34	; 0x22
 802308e:	ed9f 0a08 	vldr	s0, [pc, #32]	; 80230b0 <logf+0x54>
 8023092:	6003      	str	r3, [r0, #0]
 8023094:	ecbd 8b02 	vpop	{d8}
 8023098:	bd08      	pop	{r3, pc}
 802309a:	f001 fc2d 	bl	80248f8 <__errno>
 802309e:	2321      	movs	r3, #33	; 0x21
 80230a0:	ecbd 8b02 	vpop	{d8}
 80230a4:	6003      	str	r3, [r0, #0]
 80230a6:	4803      	ldr	r0, [pc, #12]	; (80230b4 <logf+0x58>)
 80230a8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80230ac:	f000 b98e 	b.w	80233cc <nanf>
 80230b0:	ff800000 	.word	0xff800000
 80230b4:	080266da 	.word	0x080266da

080230b8 <atanf>:
 80230b8:	b538      	push	{r3, r4, r5, lr}
 80230ba:	ee10 5a10 	vmov	r5, s0
 80230be:	eef0 7a40 	vmov.f32	s15, s0
 80230c2:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 80230c6:	f1b4 4fa1 	cmp.w	r4, #1350565888	; 0x50800000
 80230ca:	db0f      	blt.n	80230ec <atanf+0x34>
 80230cc:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 80230d0:	dd04      	ble.n	80230dc <atanf+0x24>
 80230d2:	ee70 7a00 	vadd.f32	s15, s0, s0
 80230d6:	eeb0 0a67 	vmov.f32	s0, s15
 80230da:	bd38      	pop	{r3, r4, r5, pc}
 80230dc:	2d00      	cmp	r5, #0
 80230de:	eddf 7a4d 	vldr	s15, [pc, #308]	; 8023214 <atanf+0x15c>
 80230e2:	ed9f 7a4d 	vldr	s14, [pc, #308]	; 8023218 <atanf+0x160>
 80230e6:	fe77 7a87 	vselgt.f32	s15, s15, s14
 80230ea:	e7f4      	b.n	80230d6 <atanf+0x1e>
 80230ec:	4b4b      	ldr	r3, [pc, #300]	; (802321c <atanf+0x164>)
 80230ee:	429c      	cmp	r4, r3
 80230f0:	dc10      	bgt.n	8023114 <atanf+0x5c>
 80230f2:	f1b4 5f44 	cmp.w	r4, #822083584	; 0x31000000
 80230f6:	da0a      	bge.n	802310e <atanf+0x56>
 80230f8:	ed9f 7a49 	vldr	s14, [pc, #292]	; 8023220 <atanf+0x168>
 80230fc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8023100:	ee30 7a07 	vadd.f32	s14, s0, s14
 8023104:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8023108:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802310c:	dce3      	bgt.n	80230d6 <atanf+0x1e>
 802310e:	f04f 33ff 	mov.w	r3, #4294967295
 8023112:	e013      	b.n	802313c <atanf+0x84>
 8023114:	f000 f8a4 	bl	8023260 <fabsf>
 8023118:	4b42      	ldr	r3, [pc, #264]	; (8023224 <atanf+0x16c>)
 802311a:	429c      	cmp	r4, r3
 802311c:	dc4f      	bgt.n	80231be <atanf+0x106>
 802311e:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 8023122:	429c      	cmp	r4, r3
 8023124:	dc41      	bgt.n	80231aa <atanf+0xf2>
 8023126:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 802312a:	2300      	movs	r3, #0
 802312c:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8023130:	eea0 7a27 	vfma.f32	s14, s0, s15
 8023134:	ee30 0a27 	vadd.f32	s0, s0, s15
 8023138:	eec7 7a00 	vdiv.f32	s15, s14, s0
 802313c:	ed9f 7a3a 	vldr	s14, [pc, #232]	; 8023228 <atanf+0x170>
 8023140:	1c5a      	adds	r2, r3, #1
 8023142:	eddf 5a3a 	vldr	s11, [pc, #232]	; 802322c <atanf+0x174>
 8023146:	ed9f 5a3a 	vldr	s10, [pc, #232]	; 8023230 <atanf+0x178>
 802314a:	ee27 6aa7 	vmul.f32	s12, s15, s15
 802314e:	ee66 6a06 	vmul.f32	s13, s12, s12
 8023152:	eee6 5a87 	vfma.f32	s11, s13, s14
 8023156:	ed9f 7a37 	vldr	s14, [pc, #220]	; 8023234 <atanf+0x17c>
 802315a:	eea5 7aa6 	vfma.f32	s14, s11, s13
 802315e:	eddf 5a36 	vldr	s11, [pc, #216]	; 8023238 <atanf+0x180>
 8023162:	eee7 5a26 	vfma.f32	s11, s14, s13
 8023166:	ed9f 7a35 	vldr	s14, [pc, #212]	; 802323c <atanf+0x184>
 802316a:	eea5 7aa6 	vfma.f32	s14, s11, s13
 802316e:	eddf 5a34 	vldr	s11, [pc, #208]	; 8023240 <atanf+0x188>
 8023172:	eee7 5a26 	vfma.f32	s11, s14, s13
 8023176:	ed9f 7a33 	vldr	s14, [pc, #204]	; 8023244 <atanf+0x18c>
 802317a:	eea6 5a87 	vfma.f32	s10, s13, s14
 802317e:	ed9f 7a32 	vldr	s14, [pc, #200]	; 8023248 <atanf+0x190>
 8023182:	eea5 7a26 	vfma.f32	s14, s10, s13
 8023186:	ed9f 5a31 	vldr	s10, [pc, #196]	; 802324c <atanf+0x194>
 802318a:	eea7 5a26 	vfma.f32	s10, s14, s13
 802318e:	ed9f 7a30 	vldr	s14, [pc, #192]	; 8023250 <atanf+0x198>
 8023192:	eea5 7a26 	vfma.f32	s14, s10, s13
 8023196:	ee27 7a26 	vmul.f32	s14, s14, s13
 802319a:	eea5 7a86 	vfma.f32	s14, s11, s12
 802319e:	ee27 7a87 	vmul.f32	s14, s15, s14
 80231a2:	d121      	bne.n	80231e8 <atanf+0x130>
 80231a4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80231a8:	e795      	b.n	80230d6 <atanf+0x1e>
 80231aa:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80231ae:	2301      	movs	r3, #1
 80231b0:	ee30 7a67 	vsub.f32	s14, s0, s15
 80231b4:	ee30 0a27 	vadd.f32	s0, s0, s15
 80231b8:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80231bc:	e7be      	b.n	802313c <atanf+0x84>
 80231be:	4b25      	ldr	r3, [pc, #148]	; (8023254 <atanf+0x19c>)
 80231c0:	429c      	cmp	r4, r3
 80231c2:	dc0b      	bgt.n	80231dc <atanf+0x124>
 80231c4:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 80231c8:	2302      	movs	r3, #2
 80231ca:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80231ce:	ee70 6a67 	vsub.f32	s13, s0, s15
 80231d2:	eea0 7a27 	vfma.f32	s14, s0, s15
 80231d6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80231da:	e7af      	b.n	802313c <atanf+0x84>
 80231dc:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 80231e0:	2303      	movs	r3, #3
 80231e2:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80231e6:	e7a9      	b.n	802313c <atanf+0x84>
 80231e8:	4a1b      	ldr	r2, [pc, #108]	; (8023258 <atanf+0x1a0>)
 80231ea:	2d00      	cmp	r5, #0
 80231ec:	491b      	ldr	r1, [pc, #108]	; (802325c <atanf+0x1a4>)
 80231ee:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 80231f2:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 80231f6:	edd3 6a00 	vldr	s13, [r3]
 80231fa:	ee37 7a66 	vsub.f32	s14, s14, s13
 80231fe:	ee37 7a67 	vsub.f32	s14, s14, s15
 8023202:	edd2 7a00 	vldr	s15, [r2]
 8023206:	ee77 7ac7 	vsub.f32	s15, s15, s14
 802320a:	bfb8      	it	lt
 802320c:	eef1 7a67 	vneglt.f32	s15, s15
 8023210:	e761      	b.n	80230d6 <atanf+0x1e>
 8023212:	bf00      	nop
 8023214:	3fc90fdb 	.word	0x3fc90fdb
 8023218:	bfc90fdb 	.word	0xbfc90fdb
 802321c:	3edfffff 	.word	0x3edfffff
 8023220:	7149f2ca 	.word	0x7149f2ca
 8023224:	3f97ffff 	.word	0x3f97ffff
 8023228:	3c8569d7 	.word	0x3c8569d7
 802322c:	3d4bda59 	.word	0x3d4bda59
 8023230:	bd6ef16b 	.word	0xbd6ef16b
 8023234:	3d886b35 	.word	0x3d886b35
 8023238:	3dba2e6e 	.word	0x3dba2e6e
 802323c:	3e124925 	.word	0x3e124925
 8023240:	3eaaaaab 	.word	0x3eaaaaab
 8023244:	bd15a221 	.word	0xbd15a221
 8023248:	bd9d8795 	.word	0xbd9d8795
 802324c:	bde38e38 	.word	0xbde38e38
 8023250:	be4ccccd 	.word	0xbe4ccccd
 8023254:	401bffff 	.word	0x401bffff
 8023258:	08026588 	.word	0x08026588
 802325c:	08026598 	.word	0x08026598

08023260 <fabsf>:
 8023260:	ee10 3a10 	vmov	r3, s0
 8023264:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8023268:	ee00 3a10 	vmov	s0, r3
 802326c:	4770      	bx	lr
	...

08023270 <scalbn>:
 8023270:	b570      	push	{r4, r5, r6, lr}
 8023272:	ec55 4b10 	vmov	r4, r5, d0
 8023276:	f3c5 510a 	ubfx	r1, r5, #20, #11
 802327a:	4606      	mov	r6, r0
 802327c:	462b      	mov	r3, r5
 802327e:	b999      	cbnz	r1, 80232a8 <scalbn+0x38>
 8023280:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8023284:	4323      	orrs	r3, r4
 8023286:	d03f      	beq.n	8023308 <scalbn+0x98>
 8023288:	4b35      	ldr	r3, [pc, #212]	; (8023360 <scalbn+0xf0>)
 802328a:	4629      	mov	r1, r5
 802328c:	2200      	movs	r2, #0
 802328e:	ee10 0a10 	vmov	r0, s0
 8023292:	f7dd f9a3 	bl	80005dc <__aeabi_dmul>
 8023296:	4b33      	ldr	r3, [pc, #204]	; (8023364 <scalbn+0xf4>)
 8023298:	4604      	mov	r4, r0
 802329a:	460d      	mov	r5, r1
 802329c:	429e      	cmp	r6, r3
 802329e:	da10      	bge.n	80232c2 <scalbn+0x52>
 80232a0:	a327      	add	r3, pc, #156	; (adr r3, 8023340 <scalbn+0xd0>)
 80232a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80232a6:	e01f      	b.n	80232e8 <scalbn+0x78>
 80232a8:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80232ac:	4291      	cmp	r1, r2
 80232ae:	d10c      	bne.n	80232ca <scalbn+0x5a>
 80232b0:	ee10 2a10 	vmov	r2, s0
 80232b4:	4620      	mov	r0, r4
 80232b6:	4629      	mov	r1, r5
 80232b8:	f7dc ffda 	bl	8000270 <__adddf3>
 80232bc:	4604      	mov	r4, r0
 80232be:	460d      	mov	r5, r1
 80232c0:	e022      	b.n	8023308 <scalbn+0x98>
 80232c2:	460b      	mov	r3, r1
 80232c4:	f3c1 510a 	ubfx	r1, r1, #20, #11
 80232c8:	3936      	subs	r1, #54	; 0x36
 80232ca:	f24c 3250 	movw	r2, #50000	; 0xc350
 80232ce:	4296      	cmp	r6, r2
 80232d0:	dd0d      	ble.n	80232ee <scalbn+0x7e>
 80232d2:	2d00      	cmp	r5, #0
 80232d4:	a11c      	add	r1, pc, #112	; (adr r1, 8023348 <scalbn+0xd8>)
 80232d6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80232da:	da02      	bge.n	80232e2 <scalbn+0x72>
 80232dc:	a11c      	add	r1, pc, #112	; (adr r1, 8023350 <scalbn+0xe0>)
 80232de:	e9d1 0100 	ldrd	r0, r1, [r1]
 80232e2:	a319      	add	r3, pc, #100	; (adr r3, 8023348 <scalbn+0xd8>)
 80232e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80232e8:	f7dd f978 	bl	80005dc <__aeabi_dmul>
 80232ec:	e7e6      	b.n	80232bc <scalbn+0x4c>
 80232ee:	1872      	adds	r2, r6, r1
 80232f0:	f240 71fe 	movw	r1, #2046	; 0x7fe
 80232f4:	428a      	cmp	r2, r1
 80232f6:	dcec      	bgt.n	80232d2 <scalbn+0x62>
 80232f8:	2a00      	cmp	r2, #0
 80232fa:	dd08      	ble.n	802330e <scalbn+0x9e>
 80232fc:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8023300:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8023304:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8023308:	ec45 4b10 	vmov	d0, r4, r5
 802330c:	bd70      	pop	{r4, r5, r6, pc}
 802330e:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8023312:	da08      	bge.n	8023326 <scalbn+0xb6>
 8023314:	2d00      	cmp	r5, #0
 8023316:	a10a      	add	r1, pc, #40	; (adr r1, 8023340 <scalbn+0xd0>)
 8023318:	e9d1 0100 	ldrd	r0, r1, [r1]
 802331c:	dac0      	bge.n	80232a0 <scalbn+0x30>
 802331e:	a10e      	add	r1, pc, #56	; (adr r1, 8023358 <scalbn+0xe8>)
 8023320:	e9d1 0100 	ldrd	r0, r1, [r1]
 8023324:	e7bc      	b.n	80232a0 <scalbn+0x30>
 8023326:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 802332a:	3236      	adds	r2, #54	; 0x36
 802332c:	4620      	mov	r0, r4
 802332e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8023332:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8023336:	2200      	movs	r2, #0
 8023338:	4b0b      	ldr	r3, [pc, #44]	; (8023368 <scalbn+0xf8>)
 802333a:	e7d5      	b.n	80232e8 <scalbn+0x78>
 802333c:	f3af 8000 	nop.w
 8023340:	c2f8f359 	.word	0xc2f8f359
 8023344:	01a56e1f 	.word	0x01a56e1f
 8023348:	8800759c 	.word	0x8800759c
 802334c:	7e37e43c 	.word	0x7e37e43c
 8023350:	8800759c 	.word	0x8800759c
 8023354:	fe37e43c 	.word	0xfe37e43c
 8023358:	c2f8f359 	.word	0xc2f8f359
 802335c:	81a56e1f 	.word	0x81a56e1f
 8023360:	43500000 	.word	0x43500000
 8023364:	ffff3cb0 	.word	0xffff3cb0
 8023368:	3c900000 	.word	0x3c900000

0802336c <with_errno>:
 802336c:	b570      	push	{r4, r5, r6, lr}
 802336e:	4604      	mov	r4, r0
 8023370:	460d      	mov	r5, r1
 8023372:	4616      	mov	r6, r2
 8023374:	f001 fac0 	bl	80248f8 <__errno>
 8023378:	4629      	mov	r1, r5
 802337a:	6006      	str	r6, [r0, #0]
 802337c:	4620      	mov	r0, r4
 802337e:	bd70      	pop	{r4, r5, r6, pc}

08023380 <xflow>:
 8023380:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8023382:	4614      	mov	r4, r2
 8023384:	461d      	mov	r5, r3
 8023386:	b108      	cbz	r0, 802338c <xflow+0xc>
 8023388:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 802338c:	4620      	mov	r0, r4
 802338e:	4629      	mov	r1, r5
 8023390:	e9cd 2300 	strd	r2, r3, [sp]
 8023394:	e9dd 2300 	ldrd	r2, r3, [sp]
 8023398:	f7dd f920 	bl	80005dc <__aeabi_dmul>
 802339c:	2222      	movs	r2, #34	; 0x22
 802339e:	b003      	add	sp, #12
 80233a0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80233a4:	f7ff bfe2 	b.w	802336c <with_errno>

080233a8 <__math_uflow>:
 80233a8:	b508      	push	{r3, lr}
 80233aa:	2200      	movs	r2, #0
 80233ac:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80233b0:	f7ff ffe6 	bl	8023380 <xflow>
 80233b4:	ec41 0b10 	vmov	d0, r0, r1
 80233b8:	bd08      	pop	{r3, pc}

080233ba <__math_oflow>:
 80233ba:	b508      	push	{r3, lr}
 80233bc:	2200      	movs	r2, #0
 80233be:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 80233c2:	f7ff ffdd 	bl	8023380 <xflow>
 80233c6:	ec41 0b10 	vmov	d0, r0, r1
 80233ca:	bd08      	pop	{r3, pc}

080233cc <nanf>:
 80233cc:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80233d4 <nanf+0x8>
 80233d0:	4770      	bx	lr
 80233d2:	bf00      	nop
 80233d4:	7fc00000 	.word	0x7fc00000

080233d8 <__kernel_rem_pio2>:
 80233d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80233dc:	ed2d 8b02 	vpush	{d8}
 80233e0:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 80233e4:	f112 0f14 	cmn.w	r2, #20
 80233e8:	f04f 0500 	mov.w	r5, #0
 80233ec:	9306      	str	r3, [sp, #24]
 80233ee:	bfa8      	it	ge
 80233f0:	1ed4      	subge	r4, r2, #3
 80233f2:	4bc5      	ldr	r3, [pc, #788]	; (8023708 <__kernel_rem_pio2+0x330>)
 80233f4:	bfb8      	it	lt
 80233f6:	2400      	movlt	r4, #0
 80233f8:	9104      	str	r1, [sp, #16]
 80233fa:	ae20      	add	r6, sp, #128	; 0x80
 80233fc:	99a4      	ldr	r1, [sp, #656]	; 0x290
 80233fe:	9009      	str	r0, [sp, #36]	; 0x24
 8023400:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8023404:	9300      	str	r3, [sp, #0]
 8023406:	9b06      	ldr	r3, [sp, #24]
 8023408:	f103 33ff 	add.w	r3, r3, #4294967295
 802340c:	9305      	str	r3, [sp, #20]
 802340e:	bfa4      	itt	ge
 8023410:	2318      	movge	r3, #24
 8023412:	fb94 f4f3 	sdivge	r4, r4, r3
 8023416:	f06f 0317 	mvn.w	r3, #23
 802341a:	fb04 3303 	mla	r3, r4, r3, r3
 802341e:	eb03 0a02 	add.w	sl, r3, r2
 8023422:	9b00      	ldr	r3, [sp, #0]
 8023424:	9a05      	ldr	r2, [sp, #20]
 8023426:	eb03 0802 	add.w	r8, r3, r2
 802342a:	1aa7      	subs	r7, r4, r2
 802342c:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 802342e:	ed9f 8bb2 	vldr	d8, [pc, #712]	; 80236f8 <__kernel_rem_pio2+0x320>
 8023432:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8023436:	4545      	cmp	r5, r8
 8023438:	dd13      	ble.n	8023462 <__kernel_rem_pio2+0x8a>
 802343a:	aa20      	add	r2, sp, #128	; 0x80
 802343c:	9b06      	ldr	r3, [sp, #24]
 802343e:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 8023442:	f04f 0800 	mov.w	r8, #0
 8023446:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 802344a:	9b00      	ldr	r3, [sp, #0]
 802344c:	4598      	cmp	r8, r3
 802344e:	dc30      	bgt.n	80234b2 <__kernel_rem_pio2+0xda>
 8023450:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8023454:	462f      	mov	r7, r5
 8023456:	2600      	movs	r6, #0
 8023458:	ed9f 7ba7 	vldr	d7, [pc, #668]	; 80236f8 <__kernel_rem_pio2+0x320>
 802345c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8023460:	e01b      	b.n	802349a <__kernel_rem_pio2+0xc2>
 8023462:	42ef      	cmn	r7, r5
 8023464:	d407      	bmi.n	8023476 <__kernel_rem_pio2+0x9e>
 8023466:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 802346a:	f7dd f84d 	bl	8000508 <__aeabi_i2d>
 802346e:	3501      	adds	r5, #1
 8023470:	e8e6 0102 	strd	r0, r1, [r6], #8
 8023474:	e7df      	b.n	8023436 <__kernel_rem_pio2+0x5e>
 8023476:	ec51 0b18 	vmov	r0, r1, d8
 802347a:	e7f8      	b.n	802346e <__kernel_rem_pio2+0x96>
 802347c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8023480:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8023484:	3601      	adds	r6, #1
 8023486:	f7dd f8a9 	bl	80005dc <__aeabi_dmul>
 802348a:	4602      	mov	r2, r0
 802348c:	460b      	mov	r3, r1
 802348e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8023492:	f7dc feed 	bl	8000270 <__adddf3>
 8023496:	e9cd 0102 	strd	r0, r1, [sp, #8]
 802349a:	9b05      	ldr	r3, [sp, #20]
 802349c:	3f08      	subs	r7, #8
 802349e:	429e      	cmp	r6, r3
 80234a0:	ddec      	ble.n	802347c <__kernel_rem_pio2+0xa4>
 80234a2:	f108 0801 	add.w	r8, r8, #1
 80234a6:	3508      	adds	r5, #8
 80234a8:	ed9d 7b02 	vldr	d7, [sp, #8]
 80234ac:	ecab 7b02 	vstmia	fp!, {d7}
 80234b0:	e7cb      	b.n	802344a <__kernel_rem_pio2+0x72>
 80234b2:	9b00      	ldr	r3, [sp, #0]
 80234b4:	aa0c      	add	r2, sp, #48	; 0x30
 80234b6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80234ba:	930b      	str	r3, [sp, #44]	; 0x2c
 80234bc:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 80234be:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 80234c2:	9c00      	ldr	r4, [sp, #0]
 80234c4:	930a      	str	r3, [sp, #40]	; 0x28
 80234c6:	00e3      	lsls	r3, r4, #3
 80234c8:	f10d 0830 	add.w	r8, sp, #48	; 0x30
 80234cc:	46a1      	mov	r9, r4
 80234ce:	9308      	str	r3, [sp, #32]
 80234d0:	ab98      	add	r3, sp, #608	; 0x260
 80234d2:	46c3      	mov	fp, r8
 80234d4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80234d8:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 80234dc:	ab70      	add	r3, sp, #448	; 0x1c0
 80234de:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 80234e2:	f1b9 0f00 	cmp.w	r9, #0
 80234e6:	f1a5 0508 	sub.w	r5, r5, #8
 80234ea:	dc77      	bgt.n	80235dc <__kernel_rem_pio2+0x204>
 80234ec:	4650      	mov	r0, sl
 80234ee:	ec47 6b10 	vmov	d0, r6, r7
 80234f2:	f7ff febd 	bl	8023270 <scalbn>
 80234f6:	2200      	movs	r2, #0
 80234f8:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 80234fc:	ee10 0a10 	vmov	r0, s0
 8023500:	ec57 6b10 	vmov	r6, r7, d0
 8023504:	4639      	mov	r1, r7
 8023506:	f7dd f869 	bl	80005dc <__aeabi_dmul>
 802350a:	ec41 0b10 	vmov	d0, r0, r1
 802350e:	f000 fe7f 	bl	8024210 <floor>
 8023512:	2200      	movs	r2, #0
 8023514:	4b7d      	ldr	r3, [pc, #500]	; (802370c <__kernel_rem_pio2+0x334>)
 8023516:	ec51 0b10 	vmov	r0, r1, d0
 802351a:	f7dd f85f 	bl	80005dc <__aeabi_dmul>
 802351e:	4602      	mov	r2, r0
 8023520:	460b      	mov	r3, r1
 8023522:	4630      	mov	r0, r6
 8023524:	4639      	mov	r1, r7
 8023526:	f7dc fea1 	bl	800026c <__aeabi_dsub>
 802352a:	460f      	mov	r7, r1
 802352c:	4606      	mov	r6, r0
 802352e:	f7dd fb05 	bl	8000b3c <__aeabi_d2iz>
 8023532:	9002      	str	r0, [sp, #8]
 8023534:	f7dc ffe8 	bl	8000508 <__aeabi_i2d>
 8023538:	4602      	mov	r2, r0
 802353a:	460b      	mov	r3, r1
 802353c:	4630      	mov	r0, r6
 802353e:	4639      	mov	r1, r7
 8023540:	f7dc fe94 	bl	800026c <__aeabi_dsub>
 8023544:	f1ba 0f00 	cmp.w	sl, #0
 8023548:	4606      	mov	r6, r0
 802354a:	460f      	mov	r7, r1
 802354c:	dd6d      	ble.n	802362a <__kernel_rem_pio2+0x252>
 802354e:	1e61      	subs	r1, r4, #1
 8023550:	ab0c      	add	r3, sp, #48	; 0x30
 8023552:	f1ca 0018 	rsb	r0, sl, #24
 8023556:	9d02      	ldr	r5, [sp, #8]
 8023558:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 802355c:	fa43 f200 	asr.w	r2, r3, r0
 8023560:	4415      	add	r5, r2
 8023562:	4082      	lsls	r2, r0
 8023564:	1a9b      	subs	r3, r3, r2
 8023566:	aa0c      	add	r2, sp, #48	; 0x30
 8023568:	9502      	str	r5, [sp, #8]
 802356a:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 802356e:	f1ca 0217 	rsb	r2, sl, #23
 8023572:	fa43 fb02 	asr.w	fp, r3, r2
 8023576:	f1bb 0f00 	cmp.w	fp, #0
 802357a:	dd65      	ble.n	8023648 <__kernel_rem_pio2+0x270>
 802357c:	9b02      	ldr	r3, [sp, #8]
 802357e:	2200      	movs	r2, #0
 8023580:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8023584:	3301      	adds	r3, #1
 8023586:	4615      	mov	r5, r2
 8023588:	9302      	str	r3, [sp, #8]
 802358a:	4294      	cmp	r4, r2
 802358c:	f300 809f 	bgt.w	80236ce <__kernel_rem_pio2+0x2f6>
 8023590:	f1ba 0f00 	cmp.w	sl, #0
 8023594:	dd07      	ble.n	80235a6 <__kernel_rem_pio2+0x1ce>
 8023596:	f1ba 0f01 	cmp.w	sl, #1
 802359a:	f000 80c3 	beq.w	8023724 <__kernel_rem_pio2+0x34c>
 802359e:	f1ba 0f02 	cmp.w	sl, #2
 80235a2:	f000 80c9 	beq.w	8023738 <__kernel_rem_pio2+0x360>
 80235a6:	f1bb 0f02 	cmp.w	fp, #2
 80235aa:	d14d      	bne.n	8023648 <__kernel_rem_pio2+0x270>
 80235ac:	4632      	mov	r2, r6
 80235ae:	463b      	mov	r3, r7
 80235b0:	2000      	movs	r0, #0
 80235b2:	4957      	ldr	r1, [pc, #348]	; (8023710 <__kernel_rem_pio2+0x338>)
 80235b4:	f7dc fe5a 	bl	800026c <__aeabi_dsub>
 80235b8:	4606      	mov	r6, r0
 80235ba:	460f      	mov	r7, r1
 80235bc:	2d00      	cmp	r5, #0
 80235be:	d043      	beq.n	8023648 <__kernel_rem_pio2+0x270>
 80235c0:	4650      	mov	r0, sl
 80235c2:	ed9f 0b4f 	vldr	d0, [pc, #316]	; 8023700 <__kernel_rem_pio2+0x328>
 80235c6:	f7ff fe53 	bl	8023270 <scalbn>
 80235ca:	4630      	mov	r0, r6
 80235cc:	4639      	mov	r1, r7
 80235ce:	ec53 2b10 	vmov	r2, r3, d0
 80235d2:	f7dc fe4b 	bl	800026c <__aeabi_dsub>
 80235d6:	4606      	mov	r6, r0
 80235d8:	460f      	mov	r7, r1
 80235da:	e035      	b.n	8023648 <__kernel_rem_pio2+0x270>
 80235dc:	2200      	movs	r2, #0
 80235de:	4b4d      	ldr	r3, [pc, #308]	; (8023714 <__kernel_rem_pio2+0x33c>)
 80235e0:	4630      	mov	r0, r6
 80235e2:	4639      	mov	r1, r7
 80235e4:	f7dc fffa 	bl	80005dc <__aeabi_dmul>
 80235e8:	f109 39ff 	add.w	r9, r9, #4294967295
 80235ec:	f7dd faa6 	bl	8000b3c <__aeabi_d2iz>
 80235f0:	f7dc ff8a 	bl	8000508 <__aeabi_i2d>
 80235f4:	4602      	mov	r2, r0
 80235f6:	460b      	mov	r3, r1
 80235f8:	ec43 2b18 	vmov	d8, r2, r3
 80235fc:	2200      	movs	r2, #0
 80235fe:	4b46      	ldr	r3, [pc, #280]	; (8023718 <__kernel_rem_pio2+0x340>)
 8023600:	f7dc ffec 	bl	80005dc <__aeabi_dmul>
 8023604:	4602      	mov	r2, r0
 8023606:	460b      	mov	r3, r1
 8023608:	4630      	mov	r0, r6
 802360a:	4639      	mov	r1, r7
 802360c:	f7dc fe2e 	bl	800026c <__aeabi_dsub>
 8023610:	f7dd fa94 	bl	8000b3c <__aeabi_d2iz>
 8023614:	f84b 0b04 	str.w	r0, [fp], #4
 8023618:	e9d5 2300 	ldrd	r2, r3, [r5]
 802361c:	ec51 0b18 	vmov	r0, r1, d8
 8023620:	f7dc fe26 	bl	8000270 <__adddf3>
 8023624:	4606      	mov	r6, r0
 8023626:	460f      	mov	r7, r1
 8023628:	e75b      	b.n	80234e2 <__kernel_rem_pio2+0x10a>
 802362a:	d106      	bne.n	802363a <__kernel_rem_pio2+0x262>
 802362c:	1e63      	subs	r3, r4, #1
 802362e:	aa0c      	add	r2, sp, #48	; 0x30
 8023630:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8023634:	ea4f 5be3 	mov.w	fp, r3, asr #23
 8023638:	e79d      	b.n	8023576 <__kernel_rem_pio2+0x19e>
 802363a:	2200      	movs	r2, #0
 802363c:	4b37      	ldr	r3, [pc, #220]	; (802371c <__kernel_rem_pio2+0x344>)
 802363e:	f7dd fa53 	bl	8000ae8 <__aeabi_dcmpge>
 8023642:	2800      	cmp	r0, #0
 8023644:	d140      	bne.n	80236c8 <__kernel_rem_pio2+0x2f0>
 8023646:	4683      	mov	fp, r0
 8023648:	2200      	movs	r2, #0
 802364a:	2300      	movs	r3, #0
 802364c:	4630      	mov	r0, r6
 802364e:	4639      	mov	r1, r7
 8023650:	f7dd fa2c 	bl	8000aac <__aeabi_dcmpeq>
 8023654:	2800      	cmp	r0, #0
 8023656:	f000 80c3 	beq.w	80237e0 <__kernel_rem_pio2+0x408>
 802365a:	1e65      	subs	r5, r4, #1
 802365c:	2200      	movs	r2, #0
 802365e:	462b      	mov	r3, r5
 8023660:	9900      	ldr	r1, [sp, #0]
 8023662:	428b      	cmp	r3, r1
 8023664:	da6f      	bge.n	8023746 <__kernel_rem_pio2+0x36e>
 8023666:	2a00      	cmp	r2, #0
 8023668:	f000 808c 	beq.w	8023784 <__kernel_rem_pio2+0x3ac>
 802366c:	ab0c      	add	r3, sp, #48	; 0x30
 802366e:	f1aa 0a18 	sub.w	sl, sl, #24
 8023672:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 8023676:	2b00      	cmp	r3, #0
 8023678:	f000 80b0 	beq.w	80237dc <__kernel_rem_pio2+0x404>
 802367c:	4650      	mov	r0, sl
 802367e:	462c      	mov	r4, r5
 8023680:	f04f 0800 	mov.w	r8, #0
 8023684:	f8df 908c 	ldr.w	r9, [pc, #140]	; 8023714 <__kernel_rem_pio2+0x33c>
 8023688:	ed9f 0b1d 	vldr	d0, [pc, #116]	; 8023700 <__kernel_rem_pio2+0x328>
 802368c:	f7ff fdf0 	bl	8023270 <scalbn>
 8023690:	1c6b      	adds	r3, r5, #1
 8023692:	00da      	lsls	r2, r3, #3
 8023694:	9205      	str	r2, [sp, #20]
 8023696:	aa70      	add	r2, sp, #448	; 0x1c0
 8023698:	eb02 0ac3 	add.w	sl, r2, r3, lsl #3
 802369c:	ec57 6b10 	vmov	r6, r7, d0
 80236a0:	2c00      	cmp	r4, #0
 80236a2:	f280 80d6 	bge.w	8023852 <__kernel_rem_pio2+0x47a>
 80236a6:	462c      	mov	r4, r5
 80236a8:	2c00      	cmp	r4, #0
 80236aa:	f2c0 8104 	blt.w	80238b6 <__kernel_rem_pio2+0x4de>
 80236ae:	4b1c      	ldr	r3, [pc, #112]	; (8023720 <__kernel_rem_pio2+0x348>)
 80236b0:	f04f 0900 	mov.w	r9, #0
 80236b4:	f04f 0a00 	mov.w	sl, #0
 80236b8:	2700      	movs	r7, #0
 80236ba:	461e      	mov	r6, r3
 80236bc:	ab70      	add	r3, sp, #448	; 0x1c0
 80236be:	eb03 08c4 	add.w	r8, r3, r4, lsl #3
 80236c2:	1b2b      	subs	r3, r5, r4
 80236c4:	9306      	str	r3, [sp, #24]
 80236c6:	e0e8      	b.n	802389a <__kernel_rem_pio2+0x4c2>
 80236c8:	f04f 0b02 	mov.w	fp, #2
 80236cc:	e756      	b.n	802357c <__kernel_rem_pio2+0x1a4>
 80236ce:	f8d8 3000 	ldr.w	r3, [r8]
 80236d2:	b955      	cbnz	r5, 80236ea <__kernel_rem_pio2+0x312>
 80236d4:	b123      	cbz	r3, 80236e0 <__kernel_rem_pio2+0x308>
 80236d6:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 80236da:	f8c8 3000 	str.w	r3, [r8]
 80236de:	2301      	movs	r3, #1
 80236e0:	3201      	adds	r2, #1
 80236e2:	f108 0804 	add.w	r8, r8, #4
 80236e6:	461d      	mov	r5, r3
 80236e8:	e74f      	b.n	802358a <__kernel_rem_pio2+0x1b2>
 80236ea:	1acb      	subs	r3, r1, r3
 80236ec:	f8c8 3000 	str.w	r3, [r8]
 80236f0:	462b      	mov	r3, r5
 80236f2:	e7f5      	b.n	80236e0 <__kernel_rem_pio2+0x308>
 80236f4:	f3af 8000 	nop.w
	...
 8023704:	3ff00000 	.word	0x3ff00000
 8023708:	080265e8 	.word	0x080265e8
 802370c:	40200000 	.word	0x40200000
 8023710:	3ff00000 	.word	0x3ff00000
 8023714:	3e700000 	.word	0x3e700000
 8023718:	41700000 	.word	0x41700000
 802371c:	3fe00000 	.word	0x3fe00000
 8023720:	080265a8 	.word	0x080265a8
 8023724:	1e62      	subs	r2, r4, #1
 8023726:	ab0c      	add	r3, sp, #48	; 0x30
 8023728:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 802372c:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8023730:	a90c      	add	r1, sp, #48	; 0x30
 8023732:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8023736:	e736      	b.n	80235a6 <__kernel_rem_pio2+0x1ce>
 8023738:	1e62      	subs	r2, r4, #1
 802373a:	ab0c      	add	r3, sp, #48	; 0x30
 802373c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8023740:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8023744:	e7f4      	b.n	8023730 <__kernel_rem_pio2+0x358>
 8023746:	a90c      	add	r1, sp, #48	; 0x30
 8023748:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 802374c:	3b01      	subs	r3, #1
 802374e:	430a      	orrs	r2, r1
 8023750:	e786      	b.n	8023660 <__kernel_rem_pio2+0x288>
 8023752:	3301      	adds	r3, #1
 8023754:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8023758:	2900      	cmp	r1, #0
 802375a:	d0fa      	beq.n	8023752 <__kernel_rem_pio2+0x37a>
 802375c:	9a08      	ldr	r2, [sp, #32]
 802375e:	a920      	add	r1, sp, #128	; 0x80
 8023760:	18e3      	adds	r3, r4, r3
 8023762:	f104 0801 	add.w	r8, r4, #1
 8023766:	f502 7218 	add.w	r2, r2, #608	; 0x260
 802376a:	9302      	str	r3, [sp, #8]
 802376c:	446a      	add	r2, sp
 802376e:	3a98      	subs	r2, #152	; 0x98
 8023770:	9208      	str	r2, [sp, #32]
 8023772:	9a06      	ldr	r2, [sp, #24]
 8023774:	18a2      	adds	r2, r4, r2
 8023776:	eb01 05c2 	add.w	r5, r1, r2, lsl #3
 802377a:	9b02      	ldr	r3, [sp, #8]
 802377c:	4543      	cmp	r3, r8
 802377e:	da04      	bge.n	802378a <__kernel_rem_pio2+0x3b2>
 8023780:	461c      	mov	r4, r3
 8023782:	e6a0      	b.n	80234c6 <__kernel_rem_pio2+0xee>
 8023784:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8023786:	2301      	movs	r3, #1
 8023788:	e7e4      	b.n	8023754 <__kernel_rem_pio2+0x37c>
 802378a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802378c:	f04f 0900 	mov.w	r9, #0
 8023790:	2600      	movs	r6, #0
 8023792:	2700      	movs	r7, #0
 8023794:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8023798:	f7dc feb6 	bl	8000508 <__aeabi_i2d>
 802379c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802379e:	e8e5 0102 	strd	r0, r1, [r5], #8
 80237a2:	461c      	mov	r4, r3
 80237a4:	46ab      	mov	fp, r5
 80237a6:	9b05      	ldr	r3, [sp, #20]
 80237a8:	4599      	cmp	r9, r3
 80237aa:	dd06      	ble.n	80237ba <__kernel_rem_pio2+0x3e2>
 80237ac:	9b08      	ldr	r3, [sp, #32]
 80237ae:	f108 0801 	add.w	r8, r8, #1
 80237b2:	e8e3 6702 	strd	r6, r7, [r3], #8
 80237b6:	9308      	str	r3, [sp, #32]
 80237b8:	e7df      	b.n	802377a <__kernel_rem_pio2+0x3a2>
 80237ba:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 80237be:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 80237c2:	f7dc ff0b 	bl	80005dc <__aeabi_dmul>
 80237c6:	4602      	mov	r2, r0
 80237c8:	460b      	mov	r3, r1
 80237ca:	4630      	mov	r0, r6
 80237cc:	4639      	mov	r1, r7
 80237ce:	f109 0901 	add.w	r9, r9, #1
 80237d2:	f7dc fd4d 	bl	8000270 <__adddf3>
 80237d6:	4606      	mov	r6, r0
 80237d8:	460f      	mov	r7, r1
 80237da:	e7e4      	b.n	80237a6 <__kernel_rem_pio2+0x3ce>
 80237dc:	3d01      	subs	r5, #1
 80237de:	e745      	b.n	802366c <__kernel_rem_pio2+0x294>
 80237e0:	f1ca 0000 	rsb	r0, sl, #0
 80237e4:	ec47 6b10 	vmov	d0, r6, r7
 80237e8:	f7ff fd42 	bl	8023270 <scalbn>
 80237ec:	2200      	movs	r2, #0
 80237ee:	4ba1      	ldr	r3, [pc, #644]	; (8023a74 <__kernel_rem_pio2+0x69c>)
 80237f0:	ee10 0a10 	vmov	r0, s0
 80237f4:	ec57 6b10 	vmov	r6, r7, d0
 80237f8:	4639      	mov	r1, r7
 80237fa:	f7dd f975 	bl	8000ae8 <__aeabi_dcmpge>
 80237fe:	b1f8      	cbz	r0, 8023840 <__kernel_rem_pio2+0x468>
 8023800:	2200      	movs	r2, #0
 8023802:	4b9d      	ldr	r3, [pc, #628]	; (8023a78 <__kernel_rem_pio2+0x6a0>)
 8023804:	4630      	mov	r0, r6
 8023806:	4639      	mov	r1, r7
 8023808:	f7dc fee8 	bl	80005dc <__aeabi_dmul>
 802380c:	1c65      	adds	r5, r4, #1
 802380e:	f7dd f995 	bl	8000b3c <__aeabi_d2iz>
 8023812:	4680      	mov	r8, r0
 8023814:	f7dc fe78 	bl	8000508 <__aeabi_i2d>
 8023818:	2200      	movs	r2, #0
 802381a:	4b96      	ldr	r3, [pc, #600]	; (8023a74 <__kernel_rem_pio2+0x69c>)
 802381c:	f10a 0a18 	add.w	sl, sl, #24
 8023820:	f7dc fedc 	bl	80005dc <__aeabi_dmul>
 8023824:	460b      	mov	r3, r1
 8023826:	4602      	mov	r2, r0
 8023828:	4639      	mov	r1, r7
 802382a:	4630      	mov	r0, r6
 802382c:	f7dc fd1e 	bl	800026c <__aeabi_dsub>
 8023830:	f7dd f984 	bl	8000b3c <__aeabi_d2iz>
 8023834:	ab0c      	add	r3, sp, #48	; 0x30
 8023836:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 802383a:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 802383e:	e71d      	b.n	802367c <__kernel_rem_pio2+0x2a4>
 8023840:	4630      	mov	r0, r6
 8023842:	4639      	mov	r1, r7
 8023844:	f7dd f97a 	bl	8000b3c <__aeabi_d2iz>
 8023848:	ab0c      	add	r3, sp, #48	; 0x30
 802384a:	4625      	mov	r5, r4
 802384c:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8023850:	e714      	b.n	802367c <__kernel_rem_pio2+0x2a4>
 8023852:	ab0c      	add	r3, sp, #48	; 0x30
 8023854:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8023858:	3c01      	subs	r4, #1
 802385a:	f7dc fe55 	bl	8000508 <__aeabi_i2d>
 802385e:	4632      	mov	r2, r6
 8023860:	463b      	mov	r3, r7
 8023862:	f7dc febb 	bl	80005dc <__aeabi_dmul>
 8023866:	4642      	mov	r2, r8
 8023868:	464b      	mov	r3, r9
 802386a:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 802386e:	4630      	mov	r0, r6
 8023870:	4639      	mov	r1, r7
 8023872:	f7dc feb3 	bl	80005dc <__aeabi_dmul>
 8023876:	4606      	mov	r6, r0
 8023878:	460f      	mov	r7, r1
 802387a:	e711      	b.n	80236a0 <__kernel_rem_pio2+0x2c8>
 802387c:	e8f8 2302 	ldrd	r2, r3, [r8], #8
 8023880:	e8f6 0102 	ldrd	r0, r1, [r6], #8
 8023884:	f7dc feaa 	bl	80005dc <__aeabi_dmul>
 8023888:	4602      	mov	r2, r0
 802388a:	460b      	mov	r3, r1
 802388c:	4648      	mov	r0, r9
 802388e:	4651      	mov	r1, sl
 8023890:	3701      	adds	r7, #1
 8023892:	f7dc fced 	bl	8000270 <__adddf3>
 8023896:	4681      	mov	r9, r0
 8023898:	468a      	mov	sl, r1
 802389a:	9b00      	ldr	r3, [sp, #0]
 802389c:	429f      	cmp	r7, r3
 802389e:	dc02      	bgt.n	80238a6 <__kernel_rem_pio2+0x4ce>
 80238a0:	9b06      	ldr	r3, [sp, #24]
 80238a2:	429f      	cmp	r7, r3
 80238a4:	ddea      	ble.n	802387c <__kernel_rem_pio2+0x4a4>
 80238a6:	ab48      	add	r3, sp, #288	; 0x120
 80238a8:	9a06      	ldr	r2, [sp, #24]
 80238aa:	3c01      	subs	r4, #1
 80238ac:	eb03 06c2 	add.w	r6, r3, r2, lsl #3
 80238b0:	e9c6 9a00 	strd	r9, sl, [r6]
 80238b4:	e6f8      	b.n	80236a8 <__kernel_rem_pio2+0x2d0>
 80238b6:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 80238b8:	2b02      	cmp	r3, #2
 80238ba:	dc0b      	bgt.n	80238d4 <__kernel_rem_pio2+0x4fc>
 80238bc:	2b00      	cmp	r3, #0
 80238be:	dc39      	bgt.n	8023934 <__kernel_rem_pio2+0x55c>
 80238c0:	d05d      	beq.n	802397e <__kernel_rem_pio2+0x5a6>
 80238c2:	9b02      	ldr	r3, [sp, #8]
 80238c4:	f003 0007 	and.w	r0, r3, #7
 80238c8:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 80238cc:	ecbd 8b02 	vpop	{d8}
 80238d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80238d4:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 80238d6:	2b03      	cmp	r3, #3
 80238d8:	d1f3      	bne.n	80238c2 <__kernel_rem_pio2+0x4ea>
 80238da:	9b05      	ldr	r3, [sp, #20]
 80238dc:	9500      	str	r5, [sp, #0]
 80238de:	f503 7318 	add.w	r3, r3, #608	; 0x260
 80238e2:	eb0d 0403 	add.w	r4, sp, r3
 80238e6:	f5a4 74a4 	sub.w	r4, r4, #328	; 0x148
 80238ea:	46a2      	mov	sl, r4
 80238ec:	9b00      	ldr	r3, [sp, #0]
 80238ee:	f1aa 0a08 	sub.w	sl, sl, #8
 80238f2:	2b00      	cmp	r3, #0
 80238f4:	dc69      	bgt.n	80239ca <__kernel_rem_pio2+0x5f2>
 80238f6:	46aa      	mov	sl, r5
 80238f8:	f1ba 0f01 	cmp.w	sl, #1
 80238fc:	f1a4 0408 	sub.w	r4, r4, #8
 8023900:	f300 8083 	bgt.w	8023a0a <__kernel_rem_pio2+0x632>
 8023904:	9c05      	ldr	r4, [sp, #20]
 8023906:	ab48      	add	r3, sp, #288	; 0x120
 8023908:	2000      	movs	r0, #0
 802390a:	2100      	movs	r1, #0
 802390c:	441c      	add	r4, r3
 802390e:	2d01      	cmp	r5, #1
 8023910:	f300 809a 	bgt.w	8023a48 <__kernel_rem_pio2+0x670>
 8023914:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	; 0x120
 8023918:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 802391c:	f1bb 0f00 	cmp.w	fp, #0
 8023920:	f040 8098 	bne.w	8023a54 <__kernel_rem_pio2+0x67c>
 8023924:	9b04      	ldr	r3, [sp, #16]
 8023926:	e9c3 7800 	strd	r7, r8, [r3]
 802392a:	e9c3 5602 	strd	r5, r6, [r3, #8]
 802392e:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8023932:	e7c6      	b.n	80238c2 <__kernel_rem_pio2+0x4ea>
 8023934:	9e05      	ldr	r6, [sp, #20]
 8023936:	ab48      	add	r3, sp, #288	; 0x120
 8023938:	462c      	mov	r4, r5
 802393a:	2000      	movs	r0, #0
 802393c:	441e      	add	r6, r3
 802393e:	2100      	movs	r1, #0
 8023940:	2c00      	cmp	r4, #0
 8023942:	da33      	bge.n	80239ac <__kernel_rem_pio2+0x5d4>
 8023944:	f1bb 0f00 	cmp.w	fp, #0
 8023948:	d036      	beq.n	80239b8 <__kernel_rem_pio2+0x5e0>
 802394a:	4602      	mov	r2, r0
 802394c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8023950:	9c04      	ldr	r4, [sp, #16]
 8023952:	ae4a      	add	r6, sp, #296	; 0x128
 8023954:	e9c4 2300 	strd	r2, r3, [r4]
 8023958:	2401      	movs	r4, #1
 802395a:	4602      	mov	r2, r0
 802395c:	460b      	mov	r3, r1
 802395e:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 8023962:	f7dc fc83 	bl	800026c <__aeabi_dsub>
 8023966:	42a5      	cmp	r5, r4
 8023968:	da29      	bge.n	80239be <__kernel_rem_pio2+0x5e6>
 802396a:	f1bb 0f00 	cmp.w	fp, #0
 802396e:	d002      	beq.n	8023976 <__kernel_rem_pio2+0x59e>
 8023970:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8023974:	4619      	mov	r1, r3
 8023976:	9b04      	ldr	r3, [sp, #16]
 8023978:	e9c3 0102 	strd	r0, r1, [r3, #8]
 802397c:	e7a1      	b.n	80238c2 <__kernel_rem_pio2+0x4ea>
 802397e:	9c05      	ldr	r4, [sp, #20]
 8023980:	ab48      	add	r3, sp, #288	; 0x120
 8023982:	2000      	movs	r0, #0
 8023984:	2100      	movs	r1, #0
 8023986:	441c      	add	r4, r3
 8023988:	2d00      	cmp	r5, #0
 802398a:	da09      	bge.n	80239a0 <__kernel_rem_pio2+0x5c8>
 802398c:	f1bb 0f00 	cmp.w	fp, #0
 8023990:	d002      	beq.n	8023998 <__kernel_rem_pio2+0x5c0>
 8023992:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8023996:	4619      	mov	r1, r3
 8023998:	9b04      	ldr	r3, [sp, #16]
 802399a:	e9c3 0100 	strd	r0, r1, [r3]
 802399e:	e790      	b.n	80238c2 <__kernel_rem_pio2+0x4ea>
 80239a0:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80239a4:	3d01      	subs	r5, #1
 80239a6:	f7dc fc63 	bl	8000270 <__adddf3>
 80239aa:	e7ed      	b.n	8023988 <__kernel_rem_pio2+0x5b0>
 80239ac:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 80239b0:	3c01      	subs	r4, #1
 80239b2:	f7dc fc5d 	bl	8000270 <__adddf3>
 80239b6:	e7c3      	b.n	8023940 <__kernel_rem_pio2+0x568>
 80239b8:	4602      	mov	r2, r0
 80239ba:	460b      	mov	r3, r1
 80239bc:	e7c8      	b.n	8023950 <__kernel_rem_pio2+0x578>
 80239be:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 80239c2:	3401      	adds	r4, #1
 80239c4:	f7dc fc54 	bl	8000270 <__adddf3>
 80239c8:	e7cd      	b.n	8023966 <__kernel_rem_pio2+0x58e>
 80239ca:	9b00      	ldr	r3, [sp, #0]
 80239cc:	e9da 8900 	ldrd	r8, r9, [sl]
 80239d0:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 80239d4:	3b01      	subs	r3, #1
 80239d6:	4640      	mov	r0, r8
 80239d8:	4632      	mov	r2, r6
 80239da:	4649      	mov	r1, r9
 80239dc:	9300      	str	r3, [sp, #0]
 80239de:	463b      	mov	r3, r7
 80239e0:	f7dc fc46 	bl	8000270 <__adddf3>
 80239e4:	4602      	mov	r2, r0
 80239e6:	460b      	mov	r3, r1
 80239e8:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80239ec:	4640      	mov	r0, r8
 80239ee:	4649      	mov	r1, r9
 80239f0:	f7dc fc3c 	bl	800026c <__aeabi_dsub>
 80239f4:	4632      	mov	r2, r6
 80239f6:	463b      	mov	r3, r7
 80239f8:	f7dc fc3a 	bl	8000270 <__adddf3>
 80239fc:	ed9d 7b06 	vldr	d7, [sp, #24]
 8023a00:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8023a04:	ed8a 7b00 	vstr	d7, [sl]
 8023a08:	e770      	b.n	80238ec <__kernel_rem_pio2+0x514>
 8023a0a:	e9d4 8900 	ldrd	r8, r9, [r4]
 8023a0e:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 8023a12:	4640      	mov	r0, r8
 8023a14:	4649      	mov	r1, r9
 8023a16:	4632      	mov	r2, r6
 8023a18:	463b      	mov	r3, r7
 8023a1a:	f7dc fc29 	bl	8000270 <__adddf3>
 8023a1e:	4602      	mov	r2, r0
 8023a20:	460b      	mov	r3, r1
 8023a22:	f10a 3aff 	add.w	sl, sl, #4294967295
 8023a26:	e9cd 0100 	strd	r0, r1, [sp]
 8023a2a:	4640      	mov	r0, r8
 8023a2c:	4649      	mov	r1, r9
 8023a2e:	f7dc fc1d 	bl	800026c <__aeabi_dsub>
 8023a32:	4632      	mov	r2, r6
 8023a34:	463b      	mov	r3, r7
 8023a36:	f7dc fc1b 	bl	8000270 <__adddf3>
 8023a3a:	ed9d 7b00 	vldr	d7, [sp]
 8023a3e:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8023a42:	ed84 7b00 	vstr	d7, [r4]
 8023a46:	e757      	b.n	80238f8 <__kernel_rem_pio2+0x520>
 8023a48:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8023a4c:	3d01      	subs	r5, #1
 8023a4e:	f7dc fc0f 	bl	8000270 <__adddf3>
 8023a52:	e75c      	b.n	802390e <__kernel_rem_pio2+0x536>
 8023a54:	9b04      	ldr	r3, [sp, #16]
 8023a56:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 8023a5a:	9a04      	ldr	r2, [sp, #16]
 8023a5c:	601f      	str	r7, [r3, #0]
 8023a5e:	605c      	str	r4, [r3, #4]
 8023a60:	609d      	str	r5, [r3, #8]
 8023a62:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8023a66:	6110      	str	r0, [r2, #16]
 8023a68:	60d3      	str	r3, [r2, #12]
 8023a6a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8023a6e:	6153      	str	r3, [r2, #20]
 8023a70:	e727      	b.n	80238c2 <__kernel_rem_pio2+0x4ea>
 8023a72:	bf00      	nop
 8023a74:	41700000 	.word	0x41700000
 8023a78:	3e700000 	.word	0x3e700000

08023a7c <__kernel_rem_pio2f>:
 8023a7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023a80:	ed2d 8b04 	vpush	{d8-d9}
 8023a84:	b0d9      	sub	sp, #356	; 0x164
 8023a86:	4688      	mov	r8, r1
 8023a88:	49b9      	ldr	r1, [pc, #740]	; (8023d70 <__kernel_rem_pio2f+0x2f4>)
 8023a8a:	9002      	str	r0, [sp, #8]
 8023a8c:	9866      	ldr	r0, [sp, #408]	; 0x198
 8023a8e:	9301      	str	r3, [sp, #4]
 8023a90:	f851 a020 	ldr.w	sl, [r1, r0, lsl #2]
 8023a94:	9901      	ldr	r1, [sp, #4]
 8023a96:	9b67      	ldr	r3, [sp, #412]	; 0x19c
 8023a98:	f101 3bff 	add.w	fp, r1, #4294967295
 8023a9c:	1d11      	adds	r1, r2, #4
 8023a9e:	db25      	blt.n	8023aec <__kernel_rem_pio2f+0x70>
 8023aa0:	1ed0      	subs	r0, r2, #3
 8023aa2:	bf48      	it	mi
 8023aa4:	1d10      	addmi	r0, r2, #4
 8023aa6:	10c0      	asrs	r0, r0, #3
 8023aa8:	1c45      	adds	r5, r0, #1
 8023aaa:	eba0 070b 	sub.w	r7, r0, fp
 8023aae:	eb0a 0c0b 	add.w	ip, sl, fp
 8023ab2:	ae1c      	add	r6, sp, #112	; 0x70
 8023ab4:	00e9      	lsls	r1, r5, #3
 8023ab6:	2400      	movs	r4, #0
 8023ab8:	eba2 05c5 	sub.w	r5, r2, r5, lsl #3
 8023abc:	ed9f 7ab0 	vldr	s14, [pc, #704]	; 8023d80 <__kernel_rem_pio2f+0x304>
 8023ac0:	eb03 0e87 	add.w	lr, r3, r7, lsl #2
 8023ac4:	9103      	str	r1, [sp, #12]
 8023ac6:	4564      	cmp	r4, ip
 8023ac8:	dd12      	ble.n	8023af0 <__kernel_rem_pio2f+0x74>
 8023aca:	ac1c      	add	r4, sp, #112	; 0x70
 8023acc:	9901      	ldr	r1, [sp, #4]
 8023ace:	f50d 7988 	add.w	r9, sp, #272	; 0x110
 8023ad2:	f04f 0c00 	mov.w	ip, #0
 8023ad6:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 8023ada:	45d4      	cmp	ip, sl
 8023adc:	dc29      	bgt.n	8023b32 <__kernel_rem_pio2f+0xb6>
 8023ade:	f8dd e008 	ldr.w	lr, [sp, #8]
 8023ae2:	4627      	mov	r7, r4
 8023ae4:	eddf 7aa6 	vldr	s15, [pc, #664]	; 8023d80 <__kernel_rem_pio2f+0x304>
 8023ae8:	2600      	movs	r6, #0
 8023aea:	e018      	b.n	8023b1e <__kernel_rem_pio2f+0xa2>
 8023aec:	2000      	movs	r0, #0
 8023aee:	e7db      	b.n	8023aa8 <__kernel_rem_pio2f+0x2c>
 8023af0:	42e7      	cmn	r7, r4
 8023af2:	bf54      	ite	pl
 8023af4:	f85e 1024 	ldrpl.w	r1, [lr, r4, lsl #2]
 8023af8:	eef0 7a47 	vmovmi.f32	s15, s14
 8023afc:	f104 0401 	add.w	r4, r4, #1
 8023b00:	bf5c      	itt	pl
 8023b02:	ee07 1a90 	vmovpl	s15, r1
 8023b06:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 8023b0a:	ece6 7a01 	vstmia	r6!, {s15}
 8023b0e:	e7da      	b.n	8023ac6 <__kernel_rem_pio2f+0x4a>
 8023b10:	ecfe 6a01 	vldmia	lr!, {s13}
 8023b14:	3601      	adds	r6, #1
 8023b16:	ed97 7a00 	vldr	s14, [r7]
 8023b1a:	eee6 7a87 	vfma.f32	s15, s13, s14
 8023b1e:	455e      	cmp	r6, fp
 8023b20:	f1a7 0704 	sub.w	r7, r7, #4
 8023b24:	ddf4      	ble.n	8023b10 <__kernel_rem_pio2f+0x94>
 8023b26:	f10c 0c01 	add.w	ip, ip, #1
 8023b2a:	3404      	adds	r4, #4
 8023b2c:	ece9 7a01 	vstmia	r9!, {s15}
 8023b30:	e7d3      	b.n	8023ada <__kernel_rem_pio2f+0x5e>
 8023b32:	a908      	add	r1, sp, #32
 8023b34:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 8023b38:	4656      	mov	r6, sl
 8023b3a:	eddf 8a90 	vldr	s17, [pc, #576]	; 8023d7c <__kernel_rem_pio2f+0x300>
 8023b3e:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8023b42:	ed9f 9a8d 	vldr	s18, [pc, #564]	; 8023d78 <__kernel_rem_pio2f+0x2fc>
 8023b46:	9304      	str	r3, [sp, #16]
 8023b48:	9105      	str	r1, [sp, #20]
 8023b4a:	00b3      	lsls	r3, r6, #2
 8023b4c:	ac08      	add	r4, sp, #32
 8023b4e:	4637      	mov	r7, r6
 8023b50:	9306      	str	r3, [sp, #24]
 8023b52:	ab58      	add	r3, sp, #352	; 0x160
 8023b54:	46a4      	mov	ip, r4
 8023b56:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 8023b5a:	ab44      	add	r3, sp, #272	; 0x110
 8023b5c:	ed10 0a14 	vldr	s0, [r0, #-80]	; 0xffffffb0
 8023b60:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 8023b64:	2f00      	cmp	r7, #0
 8023b66:	f1a0 0004 	sub.w	r0, r0, #4
 8023b6a:	dc4a      	bgt.n	8023c02 <__kernel_rem_pio2f+0x186>
 8023b6c:	4628      	mov	r0, r5
 8023b6e:	9207      	str	r2, [sp, #28]
 8023b70:	f000 fae8 	bl	8024144 <scalbnf>
 8023b74:	eeb0 8a40 	vmov.f32	s16, s0
 8023b78:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 8023b7c:	ee28 0a00 	vmul.f32	s0, s16, s0
 8023b80:	f000 fbc6 	bl	8024310 <floorf>
 8023b84:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 8023b88:	2d00      	cmp	r5, #0
 8023b8a:	9a07      	ldr	r2, [sp, #28]
 8023b8c:	eea0 8a67 	vfms.f32	s16, s0, s15
 8023b90:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 8023b94:	ee17 9a90 	vmov	r9, s15
 8023b98:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8023b9c:	ee38 8a67 	vsub.f32	s16, s16, s15
 8023ba0:	dd41      	ble.n	8023c26 <__kernel_rem_pio2f+0x1aa>
 8023ba2:	f106 3cff 	add.w	ip, r6, #4294967295
 8023ba6:	ab08      	add	r3, sp, #32
 8023ba8:	f1c5 0e08 	rsb	lr, r5, #8
 8023bac:	f853 702c 	ldr.w	r7, [r3, ip, lsl #2]
 8023bb0:	fa47 f00e 	asr.w	r0, r7, lr
 8023bb4:	4481      	add	r9, r0
 8023bb6:	fa00 f00e 	lsl.w	r0, r0, lr
 8023bba:	1a3f      	subs	r7, r7, r0
 8023bbc:	f1c5 0007 	rsb	r0, r5, #7
 8023bc0:	f843 702c 	str.w	r7, [r3, ip, lsl #2]
 8023bc4:	4107      	asrs	r7, r0
 8023bc6:	2f00      	cmp	r7, #0
 8023bc8:	dd3c      	ble.n	8023c44 <__kernel_rem_pio2f+0x1c8>
 8023bca:	f04f 0e00 	mov.w	lr, #0
 8023bce:	f109 0901 	add.w	r9, r9, #1
 8023bd2:	4671      	mov	r1, lr
 8023bd4:	4576      	cmp	r6, lr
 8023bd6:	dc67      	bgt.n	8023ca8 <__kernel_rem_pio2f+0x22c>
 8023bd8:	2d00      	cmp	r5, #0
 8023bda:	dd03      	ble.n	8023be4 <__kernel_rem_pio2f+0x168>
 8023bdc:	2d01      	cmp	r5, #1
 8023bde:	d074      	beq.n	8023cca <__kernel_rem_pio2f+0x24e>
 8023be0:	2d02      	cmp	r5, #2
 8023be2:	d07b      	beq.n	8023cdc <__kernel_rem_pio2f+0x260>
 8023be4:	2f02      	cmp	r7, #2
 8023be6:	d12d      	bne.n	8023c44 <__kernel_rem_pio2f+0x1c8>
 8023be8:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8023bec:	ee30 8a48 	vsub.f32	s16, s0, s16
 8023bf0:	b341      	cbz	r1, 8023c44 <__kernel_rem_pio2f+0x1c8>
 8023bf2:	4628      	mov	r0, r5
 8023bf4:	9207      	str	r2, [sp, #28]
 8023bf6:	f000 faa5 	bl	8024144 <scalbnf>
 8023bfa:	9a07      	ldr	r2, [sp, #28]
 8023bfc:	ee38 8a40 	vsub.f32	s16, s16, s0
 8023c00:	e020      	b.n	8023c44 <__kernel_rem_pio2f+0x1c8>
 8023c02:	ee60 7a28 	vmul.f32	s15, s0, s17
 8023c06:	3f01      	subs	r7, #1
 8023c08:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8023c0c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8023c10:	eea7 0ac9 	vfms.f32	s0, s15, s18
 8023c14:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8023c18:	ecac 0a01 	vstmia	ip!, {s0}
 8023c1c:	ed90 0a00 	vldr	s0, [r0]
 8023c20:	ee37 0a80 	vadd.f32	s0, s15, s0
 8023c24:	e79e      	b.n	8023b64 <__kernel_rem_pio2f+0xe8>
 8023c26:	d105      	bne.n	8023c34 <__kernel_rem_pio2f+0x1b8>
 8023c28:	1e70      	subs	r0, r6, #1
 8023c2a:	ab08      	add	r3, sp, #32
 8023c2c:	f853 7020 	ldr.w	r7, [r3, r0, lsl #2]
 8023c30:	11ff      	asrs	r7, r7, #7
 8023c32:	e7c8      	b.n	8023bc6 <__kernel_rem_pio2f+0x14a>
 8023c34:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8023c38:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8023c3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8023c40:	da30      	bge.n	8023ca4 <__kernel_rem_pio2f+0x228>
 8023c42:	2700      	movs	r7, #0
 8023c44:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8023c48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8023c4c:	f040 809a 	bne.w	8023d84 <__kernel_rem_pio2f+0x308>
 8023c50:	1e74      	subs	r4, r6, #1
 8023c52:	2100      	movs	r1, #0
 8023c54:	46a4      	mov	ip, r4
 8023c56:	45d4      	cmp	ip, sl
 8023c58:	da47      	bge.n	8023cea <__kernel_rem_pio2f+0x26e>
 8023c5a:	2900      	cmp	r1, #0
 8023c5c:	d063      	beq.n	8023d26 <__kernel_rem_pio2f+0x2aa>
 8023c5e:	ab08      	add	r3, sp, #32
 8023c60:	3d08      	subs	r5, #8
 8023c62:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8023c66:	2b00      	cmp	r3, #0
 8023c68:	d07f      	beq.n	8023d6a <__kernel_rem_pio2f+0x2ee>
 8023c6a:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8023c6e:	4628      	mov	r0, r5
 8023c70:	f000 fa68 	bl	8024144 <scalbnf>
 8023c74:	1c63      	adds	r3, r4, #1
 8023c76:	aa44      	add	r2, sp, #272	; 0x110
 8023c78:	ed9f 7a40 	vldr	s14, [pc, #256]	; 8023d7c <__kernel_rem_pio2f+0x300>
 8023c7c:	0099      	lsls	r1, r3, #2
 8023c7e:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8023c82:	4623      	mov	r3, r4
 8023c84:	2b00      	cmp	r3, #0
 8023c86:	f280 80ad 	bge.w	8023de4 <__kernel_rem_pio2f+0x368>
 8023c8a:	4623      	mov	r3, r4
 8023c8c:	2b00      	cmp	r3, #0
 8023c8e:	f2c0 80cb 	blt.w	8023e28 <__kernel_rem_pio2f+0x3ac>
 8023c92:	aa44      	add	r2, sp, #272	; 0x110
 8023c94:	4e37      	ldr	r6, [pc, #220]	; (8023d74 <__kernel_rem_pio2f+0x2f8>)
 8023c96:	eddf 7a3a 	vldr	s15, [pc, #232]	; 8023d80 <__kernel_rem_pio2f+0x304>
 8023c9a:	2000      	movs	r0, #0
 8023c9c:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 8023ca0:	1ae2      	subs	r2, r4, r3
 8023ca2:	e0b6      	b.n	8023e12 <__kernel_rem_pio2f+0x396>
 8023ca4:	2702      	movs	r7, #2
 8023ca6:	e790      	b.n	8023bca <__kernel_rem_pio2f+0x14e>
 8023ca8:	6820      	ldr	r0, [r4, #0]
 8023caa:	b949      	cbnz	r1, 8023cc0 <__kernel_rem_pio2f+0x244>
 8023cac:	b118      	cbz	r0, 8023cb6 <__kernel_rem_pio2f+0x23a>
 8023cae:	f5c0 7080 	rsb	r0, r0, #256	; 0x100
 8023cb2:	6020      	str	r0, [r4, #0]
 8023cb4:	2001      	movs	r0, #1
 8023cb6:	f10e 0e01 	add.w	lr, lr, #1
 8023cba:	3404      	adds	r4, #4
 8023cbc:	4601      	mov	r1, r0
 8023cbe:	e789      	b.n	8023bd4 <__kernel_rem_pio2f+0x158>
 8023cc0:	f1c0 00ff 	rsb	r0, r0, #255	; 0xff
 8023cc4:	6020      	str	r0, [r4, #0]
 8023cc6:	4608      	mov	r0, r1
 8023cc8:	e7f5      	b.n	8023cb6 <__kernel_rem_pio2f+0x23a>
 8023cca:	1e74      	subs	r4, r6, #1
 8023ccc:	ab08      	add	r3, sp, #32
 8023cce:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8023cd2:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 8023cd6:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8023cda:	e783      	b.n	8023be4 <__kernel_rem_pio2f+0x168>
 8023cdc:	1e74      	subs	r4, r6, #1
 8023cde:	ab08      	add	r3, sp, #32
 8023ce0:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8023ce4:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 8023ce8:	e7f5      	b.n	8023cd6 <__kernel_rem_pio2f+0x25a>
 8023cea:	ab08      	add	r3, sp, #32
 8023cec:	f853 002c 	ldr.w	r0, [r3, ip, lsl #2]
 8023cf0:	f10c 3cff 	add.w	ip, ip, #4294967295
 8023cf4:	4301      	orrs	r1, r0
 8023cf6:	e7ae      	b.n	8023c56 <__kernel_rem_pio2f+0x1da>
 8023cf8:	3001      	adds	r0, #1
 8023cfa:	f854 7d04 	ldr.w	r7, [r4, #-4]!
 8023cfe:	2f00      	cmp	r7, #0
 8023d00:	d0fa      	beq.n	8023cf8 <__kernel_rem_pio2f+0x27c>
 8023d02:	9b06      	ldr	r3, [sp, #24]
 8023d04:	f106 0c01 	add.w	ip, r6, #1
 8023d08:	4430      	add	r0, r6
 8023d0a:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 8023d0e:	eb0d 0403 	add.w	r4, sp, r3
 8023d12:	9b01      	ldr	r3, [sp, #4]
 8023d14:	18f7      	adds	r7, r6, r3
 8023d16:	ab1c      	add	r3, sp, #112	; 0x70
 8023d18:	3c4c      	subs	r4, #76	; 0x4c
 8023d1a:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8023d1e:	4560      	cmp	r0, ip
 8023d20:	da04      	bge.n	8023d2c <__kernel_rem_pio2f+0x2b0>
 8023d22:	4606      	mov	r6, r0
 8023d24:	e711      	b.n	8023b4a <__kernel_rem_pio2f+0xce>
 8023d26:	9c05      	ldr	r4, [sp, #20]
 8023d28:	2001      	movs	r0, #1
 8023d2a:	e7e6      	b.n	8023cfa <__kernel_rem_pio2f+0x27e>
 8023d2c:	9b04      	ldr	r3, [sp, #16]
 8023d2e:	2600      	movs	r6, #0
 8023d30:	f8dd e008 	ldr.w	lr, [sp, #8]
 8023d34:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 8023d38:	ee07 3a90 	vmov	s15, r3
 8023d3c:	9306      	str	r3, [sp, #24]
 8023d3e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8023d42:	ece7 7a01 	vstmia	r7!, {s15}
 8023d46:	46b9      	mov	r9, r7
 8023d48:	eddf 7a0d 	vldr	s15, [pc, #52]	; 8023d80 <__kernel_rem_pio2f+0x304>
 8023d4c:	455e      	cmp	r6, fp
 8023d4e:	dd04      	ble.n	8023d5a <__kernel_rem_pio2f+0x2de>
 8023d50:	f10c 0c01 	add.w	ip, ip, #1
 8023d54:	ece4 7a01 	vstmia	r4!, {s15}
 8023d58:	e7e1      	b.n	8023d1e <__kernel_rem_pio2f+0x2a2>
 8023d5a:	ecfe 6a01 	vldmia	lr!, {s13}
 8023d5e:	3601      	adds	r6, #1
 8023d60:	ed39 7a01 	vldmdb	r9!, {s14}
 8023d64:	eee6 7a87 	vfma.f32	s15, s13, s14
 8023d68:	e7f0      	b.n	8023d4c <__kernel_rem_pio2f+0x2d0>
 8023d6a:	3c01      	subs	r4, #1
 8023d6c:	e777      	b.n	8023c5e <__kernel_rem_pio2f+0x1e2>
 8023d6e:	bf00      	nop
 8023d70:	08026624 	.word	0x08026624
 8023d74:	080265f8 	.word	0x080265f8
 8023d78:	43800000 	.word	0x43800000
 8023d7c:	3b800000 	.word	0x3b800000
 8023d80:	00000000 	.word	0x00000000
 8023d84:	9b03      	ldr	r3, [sp, #12]
 8023d86:	eeb0 0a48 	vmov.f32	s0, s16
 8023d8a:	1a98      	subs	r0, r3, r2
 8023d8c:	f000 f9da 	bl	8024144 <scalbnf>
 8023d90:	ed1f 7a07 	vldr	s14, [pc, #-28]	; 8023d78 <__kernel_rem_pio2f+0x2fc>
 8023d94:	eeb4 0ac7 	vcmpe.f32	s0, s14
 8023d98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8023d9c:	db19      	blt.n	8023dd2 <__kernel_rem_pio2f+0x356>
 8023d9e:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 8023d7c <__kernel_rem_pio2f+0x300>
 8023da2:	aa08      	add	r2, sp, #32
 8023da4:	1c74      	adds	r4, r6, #1
 8023da6:	3508      	adds	r5, #8
 8023da8:	ee60 7a27 	vmul.f32	s15, s0, s15
 8023dac:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8023db0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8023db4:	eea7 0ac7 	vfms.f32	s0, s15, s14
 8023db8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8023dbc:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8023dc0:	ee10 3a10 	vmov	r3, s0
 8023dc4:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 8023dc8:	ee17 3a90 	vmov	r3, s15
 8023dcc:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 8023dd0:	e74b      	b.n	8023c6a <__kernel_rem_pio2f+0x1ee>
 8023dd2:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8023dd6:	aa08      	add	r2, sp, #32
 8023dd8:	4634      	mov	r4, r6
 8023dda:	ee10 3a10 	vmov	r3, s0
 8023dde:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 8023de2:	e742      	b.n	8023c6a <__kernel_rem_pio2f+0x1ee>
 8023de4:	a808      	add	r0, sp, #32
 8023de6:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 8023dea:	3b01      	subs	r3, #1
 8023dec:	ee07 0a90 	vmov	s15, r0
 8023df0:	9001      	str	r0, [sp, #4]
 8023df2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8023df6:	ee67 7a80 	vmul.f32	s15, s15, s0
 8023dfa:	ee20 0a07 	vmul.f32	s0, s0, s14
 8023dfe:	ed62 7a01 	vstmdb	r2!, {s15}
 8023e02:	e73f      	b.n	8023c84 <__kernel_rem_pio2f+0x208>
 8023e04:	ecf6 6a01 	vldmia	r6!, {s13}
 8023e08:	3001      	adds	r0, #1
 8023e0a:	ecb5 7a01 	vldmia	r5!, {s14}
 8023e0e:	eee6 7a87 	vfma.f32	s15, s13, s14
 8023e12:	4550      	cmp	r0, sl
 8023e14:	dc01      	bgt.n	8023e1a <__kernel_rem_pio2f+0x39e>
 8023e16:	4290      	cmp	r0, r2
 8023e18:	ddf4      	ble.n	8023e04 <__kernel_rem_pio2f+0x388>
 8023e1a:	a858      	add	r0, sp, #352	; 0x160
 8023e1c:	3b01      	subs	r3, #1
 8023e1e:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8023e22:	ed42 7a28 	vstr	s15, [r2, #-160]	; 0xffffff60
 8023e26:	e731      	b.n	8023c8c <__kernel_rem_pio2f+0x210>
 8023e28:	9b66      	ldr	r3, [sp, #408]	; 0x198
 8023e2a:	2b02      	cmp	r3, #2
 8023e2c:	dc09      	bgt.n	8023e42 <__kernel_rem_pio2f+0x3c6>
 8023e2e:	2b00      	cmp	r3, #0
 8023e30:	dc2b      	bgt.n	8023e8a <__kernel_rem_pio2f+0x40e>
 8023e32:	d044      	beq.n	8023ebe <__kernel_rem_pio2f+0x442>
 8023e34:	f009 0007 	and.w	r0, r9, #7
 8023e38:	b059      	add	sp, #356	; 0x164
 8023e3a:	ecbd 8b04 	vpop	{d8-d9}
 8023e3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023e42:	9b66      	ldr	r3, [sp, #408]	; 0x198
 8023e44:	2b03      	cmp	r3, #3
 8023e46:	d1f5      	bne.n	8023e34 <__kernel_rem_pio2f+0x3b8>
 8023e48:	aa30      	add	r2, sp, #192	; 0xc0
 8023e4a:	1f0b      	subs	r3, r1, #4
 8023e4c:	4620      	mov	r0, r4
 8023e4e:	4413      	add	r3, r2
 8023e50:	461a      	mov	r2, r3
 8023e52:	2800      	cmp	r0, #0
 8023e54:	f1a2 0204 	sub.w	r2, r2, #4
 8023e58:	dc52      	bgt.n	8023f00 <__kernel_rem_pio2f+0x484>
 8023e5a:	4622      	mov	r2, r4
 8023e5c:	2a01      	cmp	r2, #1
 8023e5e:	f1a3 0304 	sub.w	r3, r3, #4
 8023e62:	dc5d      	bgt.n	8023f20 <__kernel_rem_pio2f+0x4a4>
 8023e64:	ab30      	add	r3, sp, #192	; 0xc0
 8023e66:	ed5f 7a3a 	vldr	s15, [pc, #-232]	; 8023d80 <__kernel_rem_pio2f+0x304>
 8023e6a:	440b      	add	r3, r1
 8023e6c:	2c01      	cmp	r4, #1
 8023e6e:	dc67      	bgt.n	8023f40 <__kernel_rem_pio2f+0x4c4>
 8023e70:	eddd 6a30 	vldr	s13, [sp, #192]	; 0xc0
 8023e74:	ed9d 7a31 	vldr	s14, [sp, #196]	; 0xc4
 8023e78:	2f00      	cmp	r7, #0
 8023e7a:	d167      	bne.n	8023f4c <__kernel_rem_pio2f+0x4d0>
 8023e7c:	edc8 6a00 	vstr	s13, [r8]
 8023e80:	ed88 7a01 	vstr	s14, [r8, #4]
 8023e84:	edc8 7a02 	vstr	s15, [r8, #8]
 8023e88:	e7d4      	b.n	8023e34 <__kernel_rem_pio2f+0x3b8>
 8023e8a:	ab30      	add	r3, sp, #192	; 0xc0
 8023e8c:	4622      	mov	r2, r4
 8023e8e:	ed1f 7a44 	vldr	s14, [pc, #-272]	; 8023d80 <__kernel_rem_pio2f+0x304>
 8023e92:	440b      	add	r3, r1
 8023e94:	2a00      	cmp	r2, #0
 8023e96:	da24      	bge.n	8023ee2 <__kernel_rem_pio2f+0x466>
 8023e98:	b34f      	cbz	r7, 8023eee <__kernel_rem_pio2f+0x472>
 8023e9a:	eef1 7a47 	vneg.f32	s15, s14
 8023e9e:	edc8 7a00 	vstr	s15, [r8]
 8023ea2:	aa31      	add	r2, sp, #196	; 0xc4
 8023ea4:	eddd 7a30 	vldr	s15, [sp, #192]	; 0xc0
 8023ea8:	2301      	movs	r3, #1
 8023eaa:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8023eae:	429c      	cmp	r4, r3
 8023eb0:	da20      	bge.n	8023ef4 <__kernel_rem_pio2f+0x478>
 8023eb2:	b10f      	cbz	r7, 8023eb8 <__kernel_rem_pio2f+0x43c>
 8023eb4:	eef1 7a67 	vneg.f32	s15, s15
 8023eb8:	edc8 7a01 	vstr	s15, [r8, #4]
 8023ebc:	e7ba      	b.n	8023e34 <__kernel_rem_pio2f+0x3b8>
 8023ebe:	ab30      	add	r3, sp, #192	; 0xc0
 8023ec0:	ed5f 7a51 	vldr	s15, [pc, #-324]	; 8023d80 <__kernel_rem_pio2f+0x304>
 8023ec4:	440b      	add	r3, r1
 8023ec6:	2c00      	cmp	r4, #0
 8023ec8:	da05      	bge.n	8023ed6 <__kernel_rem_pio2f+0x45a>
 8023eca:	b10f      	cbz	r7, 8023ed0 <__kernel_rem_pio2f+0x454>
 8023ecc:	eef1 7a67 	vneg.f32	s15, s15
 8023ed0:	edc8 7a00 	vstr	s15, [r8]
 8023ed4:	e7ae      	b.n	8023e34 <__kernel_rem_pio2f+0x3b8>
 8023ed6:	ed33 7a01 	vldmdb	r3!, {s14}
 8023eda:	3c01      	subs	r4, #1
 8023edc:	ee77 7a87 	vadd.f32	s15, s15, s14
 8023ee0:	e7f1      	b.n	8023ec6 <__kernel_rem_pio2f+0x44a>
 8023ee2:	ed73 7a01 	vldmdb	r3!, {s15}
 8023ee6:	3a01      	subs	r2, #1
 8023ee8:	ee37 7a27 	vadd.f32	s14, s14, s15
 8023eec:	e7d2      	b.n	8023e94 <__kernel_rem_pio2f+0x418>
 8023eee:	eef0 7a47 	vmov.f32	s15, s14
 8023ef2:	e7d4      	b.n	8023e9e <__kernel_rem_pio2f+0x422>
 8023ef4:	ecb2 7a01 	vldmia	r2!, {s14}
 8023ef8:	3301      	adds	r3, #1
 8023efa:	ee77 7a87 	vadd.f32	s15, s15, s14
 8023efe:	e7d6      	b.n	8023eae <__kernel_rem_pio2f+0x432>
 8023f00:	edd2 7a00 	vldr	s15, [r2]
 8023f04:	3801      	subs	r0, #1
 8023f06:	edd2 6a01 	vldr	s13, [r2, #4]
 8023f0a:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8023f0e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8023f12:	ed82 7a00 	vstr	s14, [r2]
 8023f16:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8023f1a:	edc2 7a01 	vstr	s15, [r2, #4]
 8023f1e:	e798      	b.n	8023e52 <__kernel_rem_pio2f+0x3d6>
 8023f20:	edd3 7a00 	vldr	s15, [r3]
 8023f24:	3a01      	subs	r2, #1
 8023f26:	edd3 6a01 	vldr	s13, [r3, #4]
 8023f2a:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8023f2e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8023f32:	ed83 7a00 	vstr	s14, [r3]
 8023f36:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8023f3a:	edc3 7a01 	vstr	s15, [r3, #4]
 8023f3e:	e78d      	b.n	8023e5c <__kernel_rem_pio2f+0x3e0>
 8023f40:	ed33 7a01 	vldmdb	r3!, {s14}
 8023f44:	3c01      	subs	r4, #1
 8023f46:	ee77 7a87 	vadd.f32	s15, s15, s14
 8023f4a:	e78f      	b.n	8023e6c <__kernel_rem_pio2f+0x3f0>
 8023f4c:	eef1 6a66 	vneg.f32	s13, s13
 8023f50:	eeb1 7a47 	vneg.f32	s14, s14
 8023f54:	eef1 7a67 	vneg.f32	s15, s15
 8023f58:	edc8 6a00 	vstr	s13, [r8]
 8023f5c:	ed88 7a01 	vstr	s14, [r8, #4]
 8023f60:	e790      	b.n	8023e84 <__kernel_rem_pio2f+0x408>
 8023f62:	bf00      	nop

08023f64 <__ieee754_logf>:
 8023f64:	ee10 3a10 	vmov	r3, s0
 8023f68:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 8023f6c:	d106      	bne.n	8023f7c <__ieee754_logf+0x18>
 8023f6e:	ed9f 7a65 	vldr	s14, [pc, #404]	; 8024104 <__ieee754_logf+0x1a0>
 8023f72:	eddf 7a65 	vldr	s15, [pc, #404]	; 8024108 <__ieee754_logf+0x1a4>
 8023f76:	ee87 0a27 	vdiv.f32	s0, s14, s15
 8023f7a:	4770      	bx	lr
 8023f7c:	2b00      	cmp	r3, #0
 8023f7e:	da02      	bge.n	8023f86 <__ieee754_logf+0x22>
 8023f80:	ee30 7a40 	vsub.f32	s14, s0, s0
 8023f84:	e7f5      	b.n	8023f72 <__ieee754_logf+0xe>
 8023f86:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8023f8a:	db02      	blt.n	8023f92 <__ieee754_logf+0x2e>
 8023f8c:	ee30 0a00 	vadd.f32	s0, s0, s0
 8023f90:	4770      	bx	lr
 8023f92:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8023f96:	485d      	ldr	r0, [pc, #372]	; (802410c <__ieee754_logf+0x1a8>)
 8023f98:	bfbb      	ittet	lt
 8023f9a:	eddf 7a5d 	vldrlt	s15, [pc, #372]	; 8024110 <__ieee754_logf+0x1ac>
 8023f9e:	f06f 0118 	mvnlt.w	r1, #24
 8023fa2:	2100      	movge	r1, #0
 8023fa4:	ee60 7a27 	vmullt.f32	s15, s0, s15
 8023fa8:	bfb8      	it	lt
 8023faa:	ee17 3a90 	vmovlt	r3, s15
 8023fae:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8023fb2:	15da      	asrs	r2, r3, #23
 8023fb4:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8023fb8:	3a7f      	subs	r2, #127	; 0x7f
 8023fba:	4418      	add	r0, r3
 8023fbc:	440a      	add	r2, r1
 8023fbe:	f400 0100 	and.w	r1, r0, #8388608	; 0x800000
 8023fc2:	f081 517e 	eor.w	r1, r1, #1065353216	; 0x3f800000
 8023fc6:	eb02 52d0 	add.w	r2, r2, r0, lsr #23
 8023fca:	f103 000f 	add.w	r0, r3, #15
 8023fce:	4319      	orrs	r1, r3
 8023fd0:	ee00 1a10 	vmov	s0, r1
 8023fd4:	494f      	ldr	r1, [pc, #316]	; (8024114 <__ieee754_logf+0x1b0>)
 8023fd6:	4001      	ands	r1, r0
 8023fd8:	ee30 0a67 	vsub.f32	s0, s0, s15
 8023fdc:	bb89      	cbnz	r1, 8024042 <__ieee754_logf+0xde>
 8023fde:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8023fe2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8023fe6:	d10f      	bne.n	8024008 <__ieee754_logf+0xa4>
 8023fe8:	2a00      	cmp	r2, #0
 8023fea:	f000 8087 	beq.w	80240fc <__ieee754_logf+0x198>
 8023fee:	ee07 2a90 	vmov	s15, r2
 8023ff2:	ed9f 0a49 	vldr	s0, [pc, #292]	; 8024118 <__ieee754_logf+0x1b4>
 8023ff6:	ed9f 7a49 	vldr	s14, [pc, #292]	; 802411c <__ieee754_logf+0x1b8>
 8023ffa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8023ffe:	ee27 0a80 	vmul.f32	s0, s15, s0
 8024002:	eea7 0a87 	vfma.f32	s0, s15, s14
 8024006:	4770      	bx	lr
 8024008:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 802400c:	eddf 6a44 	vldr	s13, [pc, #272]	; 8024120 <__ieee754_logf+0x1bc>
 8024010:	ee20 7a00 	vmul.f32	s14, s0, s0
 8024014:	eee0 7a66 	vfms.f32	s15, s0, s13
 8024018:	ee27 7a27 	vmul.f32	s14, s14, s15
 802401c:	b912      	cbnz	r2, 8024024 <__ieee754_logf+0xc0>
 802401e:	ee30 0a47 	vsub.f32	s0, s0, s14
 8024022:	4770      	bx	lr
 8024024:	ee07 2a90 	vmov	s15, r2
 8024028:	eddf 6a3b 	vldr	s13, [pc, #236]	; 8024118 <__ieee754_logf+0x1b4>
 802402c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8024030:	eea7 7ae6 	vfms.f32	s14, s15, s13
 8024034:	ee37 0a40 	vsub.f32	s0, s14, s0
 8024038:	ed9f 7a38 	vldr	s14, [pc, #224]	; 802411c <__ieee754_logf+0x1b8>
 802403c:	ee97 0a87 	vfnms.f32	s0, s15, s14
 8024040:	4770      	bx	lr
 8024042:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 8024046:	eddf 5a37 	vldr	s11, [pc, #220]	; 8024124 <__ieee754_logf+0x1c0>
 802404a:	eddf 4a37 	vldr	s9, [pc, #220]	; 8024128 <__ieee754_logf+0x1c4>
 802404e:	4937      	ldr	r1, [pc, #220]	; (802412c <__ieee754_logf+0x1c8>)
 8024050:	ee70 7a27 	vadd.f32	s15, s0, s15
 8024054:	4419      	add	r1, r3
 8024056:	f5c3 1357 	rsb	r3, r3, #3522560	; 0x35c000
 802405a:	ee80 6a27 	vdiv.f32	s12, s0, s15
 802405e:	ee07 2a90 	vmov	s15, r2
 8024062:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8024066:	430b      	orrs	r3, r1
 8024068:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 802406c:	eddf 7a30 	vldr	s15, [pc, #192]	; 8024130 <__ieee754_logf+0x1cc>
 8024070:	2b00      	cmp	r3, #0
 8024072:	ee26 5a06 	vmul.f32	s10, s12, s12
 8024076:	ee25 7a05 	vmul.f32	s14, s10, s10
 802407a:	eee7 7a25 	vfma.f32	s15, s14, s11
 802407e:	eddf 5a2d 	vldr	s11, [pc, #180]	; 8024134 <__ieee754_logf+0x1d0>
 8024082:	eee7 5a87 	vfma.f32	s11, s15, s14
 8024086:	eddf 7a2c 	vldr	s15, [pc, #176]	; 8024138 <__ieee754_logf+0x1d4>
 802408a:	eee7 7a24 	vfma.f32	s15, s14, s9
 802408e:	eddf 4a2b 	vldr	s9, [pc, #172]	; 802413c <__ieee754_logf+0x1d8>
 8024092:	eee7 4a87 	vfma.f32	s9, s15, s14
 8024096:	eddf 7a2a 	vldr	s15, [pc, #168]	; 8024140 <__ieee754_logf+0x1dc>
 802409a:	eee4 7a87 	vfma.f32	s15, s9, s14
 802409e:	ee67 7a85 	vmul.f32	s15, s15, s10
 80240a2:	eee5 7a87 	vfma.f32	s15, s11, s14
 80240a6:	dd1a      	ble.n	80240de <__ieee754_logf+0x17a>
 80240a8:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80240ac:	ee20 7a07 	vmul.f32	s14, s0, s14
 80240b0:	ee27 7a00 	vmul.f32	s14, s14, s0
 80240b4:	ee77 7a87 	vadd.f32	s15, s15, s14
 80240b8:	ee67 7a86 	vmul.f32	s15, s15, s12
 80240bc:	b912      	cbnz	r2, 80240c4 <__ieee754_logf+0x160>
 80240be:	ee37 7a67 	vsub.f32	s14, s14, s15
 80240c2:	e7ac      	b.n	802401e <__ieee754_logf+0xba>
 80240c4:	ed9f 6a14 	vldr	s12, [pc, #80]	; 8024118 <__ieee754_logf+0x1b4>
 80240c8:	eee6 7a86 	vfma.f32	s15, s13, s12
 80240cc:	ee37 7a67 	vsub.f32	s14, s14, s15
 80240d0:	ee37 0a40 	vsub.f32	s0, s14, s0
 80240d4:	eddf 7a11 	vldr	s15, [pc, #68]	; 802411c <__ieee754_logf+0x1b8>
 80240d8:	ee96 0aa7 	vfnms.f32	s0, s13, s15
 80240dc:	4770      	bx	lr
 80240de:	ee70 7a67 	vsub.f32	s15, s0, s15
 80240e2:	ee67 7a86 	vmul.f32	s15, s15, s12
 80240e6:	b912      	cbnz	r2, 80240ee <__ieee754_logf+0x18a>
 80240e8:	ee30 0a67 	vsub.f32	s0, s0, s15
 80240ec:	4770      	bx	lr
 80240ee:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 8024118 <__ieee754_logf+0x1b4>
 80240f2:	eee6 7ac7 	vfms.f32	s15, s13, s14
 80240f6:	ee37 0ac0 	vsub.f32	s0, s15, s0
 80240fa:	e7eb      	b.n	80240d4 <__ieee754_logf+0x170>
 80240fc:	ed9f 0a02 	vldr	s0, [pc, #8]	; 8024108 <__ieee754_logf+0x1a4>
 8024100:	4770      	bx	lr
 8024102:	bf00      	nop
 8024104:	cc000000 	.word	0xcc000000
 8024108:	00000000 	.word	0x00000000
 802410c:	004afb20 	.word	0x004afb20
 8024110:	4c000000 	.word	0x4c000000
 8024114:	007ffff0 	.word	0x007ffff0
 8024118:	3717f7d1 	.word	0x3717f7d1
 802411c:	3f317180 	.word	0x3f317180
 8024120:	3eaaaaab 	.word	0x3eaaaaab
 8024124:	3e1cd04f 	.word	0x3e1cd04f
 8024128:	3e178897 	.word	0x3e178897
 802412c:	ffcf5c30 	.word	0xffcf5c30
 8024130:	3e638e29 	.word	0x3e638e29
 8024134:	3ecccccd 	.word	0x3ecccccd
 8024138:	3e3a3325 	.word	0x3e3a3325
 802413c:	3e924925 	.word	0x3e924925
 8024140:	3f2aaaab 	.word	0x3f2aaaab

08024144 <scalbnf>:
 8024144:	ee10 3a10 	vmov	r3, s0
 8024148:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 802414c:	d02a      	beq.n	80241a4 <scalbnf+0x60>
 802414e:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 8024152:	d302      	bcc.n	802415a <scalbnf+0x16>
 8024154:	ee30 0a00 	vadd.f32	s0, s0, s0
 8024158:	4770      	bx	lr
 802415a:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 802415e:	d122      	bne.n	80241a6 <scalbnf+0x62>
 8024160:	4b23      	ldr	r3, [pc, #140]	; (80241f0 <scalbnf+0xac>)
 8024162:	eddf 7a24 	vldr	s15, [pc, #144]	; 80241f4 <scalbnf+0xb0>
 8024166:	4298      	cmp	r0, r3
 8024168:	ee20 0a27 	vmul.f32	s0, s0, s15
 802416c:	db16      	blt.n	802419c <scalbnf+0x58>
 802416e:	ee10 3a10 	vmov	r3, s0
 8024172:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8024176:	3a19      	subs	r2, #25
 8024178:	f24c 3150 	movw	r1, #50000	; 0xc350
 802417c:	4288      	cmp	r0, r1
 802417e:	dd14      	ble.n	80241aa <scalbnf+0x66>
 8024180:	eddf 7a1d 	vldr	s15, [pc, #116]	; 80241f8 <scalbnf+0xb4>
 8024184:	ee10 3a10 	vmov	r3, s0
 8024188:	eddf 6a1c 	vldr	s13, [pc, #112]	; 80241fc <scalbnf+0xb8>
 802418c:	eeb0 7a67 	vmov.f32	s14, s15
 8024190:	2b00      	cmp	r3, #0
 8024192:	fe67 7aa6 	vselge.f32	s15, s15, s13
 8024196:	ee27 0a87 	vmul.f32	s0, s15, s14
 802419a:	4770      	bx	lr
 802419c:	eddf 7a18 	vldr	s15, [pc, #96]	; 8024200 <scalbnf+0xbc>
 80241a0:	ee27 0a80 	vmul.f32	s0, s15, s0
 80241a4:	4770      	bx	lr
 80241a6:	0dd2      	lsrs	r2, r2, #23
 80241a8:	e7e6      	b.n	8024178 <scalbnf+0x34>
 80241aa:	4410      	add	r0, r2
 80241ac:	28fe      	cmp	r0, #254	; 0xfe
 80241ae:	dce7      	bgt.n	8024180 <scalbnf+0x3c>
 80241b0:	2800      	cmp	r0, #0
 80241b2:	dd06      	ble.n	80241c2 <scalbnf+0x7e>
 80241b4:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80241b8:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 80241bc:	ee00 3a10 	vmov	s0, r3
 80241c0:	4770      	bx	lr
 80241c2:	f110 0f16 	cmn.w	r0, #22
 80241c6:	da09      	bge.n	80241dc <scalbnf+0x98>
 80241c8:	eddf 7a0d 	vldr	s15, [pc, #52]	; 8024200 <scalbnf+0xbc>
 80241cc:	ee10 3a10 	vmov	r3, s0
 80241d0:	eddf 6a0c 	vldr	s13, [pc, #48]	; 8024204 <scalbnf+0xc0>
 80241d4:	eeb0 7a67 	vmov.f32	s14, s15
 80241d8:	2b00      	cmp	r3, #0
 80241da:	e7da      	b.n	8024192 <scalbnf+0x4e>
 80241dc:	3019      	adds	r0, #25
 80241de:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80241e2:	ed9f 0a09 	vldr	s0, [pc, #36]	; 8024208 <scalbnf+0xc4>
 80241e6:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 80241ea:	ee07 3a90 	vmov	s15, r3
 80241ee:	e7d7      	b.n	80241a0 <scalbnf+0x5c>
 80241f0:	ffff3cb0 	.word	0xffff3cb0
 80241f4:	4c000000 	.word	0x4c000000
 80241f8:	7149f2ca 	.word	0x7149f2ca
 80241fc:	f149f2ca 	.word	0xf149f2ca
 8024200:	0da24260 	.word	0x0da24260
 8024204:	8da24260 	.word	0x8da24260
 8024208:	33000000 	.word	0x33000000
 802420c:	00000000 	.word	0x00000000

08024210 <floor>:
 8024210:	ec51 0b10 	vmov	r0, r1, d0
 8024214:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8024218:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802421c:	f2a3 36ff 	subw	r6, r3, #1023	; 0x3ff
 8024220:	460c      	mov	r4, r1
 8024222:	ee10 5a10 	vmov	r5, s0
 8024226:	ee10 8a10 	vmov	r8, s0
 802422a:	2e13      	cmp	r6, #19
 802422c:	dc32      	bgt.n	8024294 <floor+0x84>
 802422e:	2e00      	cmp	r6, #0
 8024230:	da14      	bge.n	802425c <floor+0x4c>
 8024232:	a333      	add	r3, pc, #204	; (adr r3, 8024300 <floor+0xf0>)
 8024234:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024238:	f7dc f81a 	bl	8000270 <__adddf3>
 802423c:	2200      	movs	r2, #0
 802423e:	2300      	movs	r3, #0
 8024240:	f7dc fc5c 	bl	8000afc <__aeabi_dcmpgt>
 8024244:	b138      	cbz	r0, 8024256 <floor+0x46>
 8024246:	2c00      	cmp	r4, #0
 8024248:	da54      	bge.n	80242f4 <floor+0xe4>
 802424a:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 802424e:	4325      	orrs	r5, r4
 8024250:	d053      	beq.n	80242fa <floor+0xea>
 8024252:	2500      	movs	r5, #0
 8024254:	4c2c      	ldr	r4, [pc, #176]	; (8024308 <floor+0xf8>)
 8024256:	4621      	mov	r1, r4
 8024258:	4628      	mov	r0, r5
 802425a:	e025      	b.n	80242a8 <floor+0x98>
 802425c:	4f2b      	ldr	r7, [pc, #172]	; (802430c <floor+0xfc>)
 802425e:	4137      	asrs	r7, r6
 8024260:	ea01 0307 	and.w	r3, r1, r7
 8024264:	4303      	orrs	r3, r0
 8024266:	d01f      	beq.n	80242a8 <floor+0x98>
 8024268:	a325      	add	r3, pc, #148	; (adr r3, 8024300 <floor+0xf0>)
 802426a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802426e:	f7db ffff 	bl	8000270 <__adddf3>
 8024272:	2200      	movs	r2, #0
 8024274:	2300      	movs	r3, #0
 8024276:	f7dc fc41 	bl	8000afc <__aeabi_dcmpgt>
 802427a:	2800      	cmp	r0, #0
 802427c:	d0eb      	beq.n	8024256 <floor+0x46>
 802427e:	2c00      	cmp	r4, #0
 8024280:	f04f 0500 	mov.w	r5, #0
 8024284:	bfbe      	ittt	lt
 8024286:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 802428a:	4133      	asrlt	r3, r6
 802428c:	18e4      	addlt	r4, r4, r3
 802428e:	ea24 0407 	bic.w	r4, r4, r7
 8024292:	e7e0      	b.n	8024256 <floor+0x46>
 8024294:	2e33      	cmp	r6, #51	; 0x33
 8024296:	dd0b      	ble.n	80242b0 <floor+0xa0>
 8024298:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 802429c:	d104      	bne.n	80242a8 <floor+0x98>
 802429e:	ee10 2a10 	vmov	r2, s0
 80242a2:	460b      	mov	r3, r1
 80242a4:	f7db ffe4 	bl	8000270 <__adddf3>
 80242a8:	ec41 0b10 	vmov	d0, r0, r1
 80242ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80242b0:	f2a3 4313 	subw	r3, r3, #1043	; 0x413
 80242b4:	f04f 37ff 	mov.w	r7, #4294967295
 80242b8:	40df      	lsrs	r7, r3
 80242ba:	4238      	tst	r0, r7
 80242bc:	d0f4      	beq.n	80242a8 <floor+0x98>
 80242be:	a310      	add	r3, pc, #64	; (adr r3, 8024300 <floor+0xf0>)
 80242c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80242c4:	f7db ffd4 	bl	8000270 <__adddf3>
 80242c8:	2200      	movs	r2, #0
 80242ca:	2300      	movs	r3, #0
 80242cc:	f7dc fc16 	bl	8000afc <__aeabi_dcmpgt>
 80242d0:	2800      	cmp	r0, #0
 80242d2:	d0c0      	beq.n	8024256 <floor+0x46>
 80242d4:	2c00      	cmp	r4, #0
 80242d6:	da0a      	bge.n	80242ee <floor+0xde>
 80242d8:	2e14      	cmp	r6, #20
 80242da:	d101      	bne.n	80242e0 <floor+0xd0>
 80242dc:	3401      	adds	r4, #1
 80242de:	e006      	b.n	80242ee <floor+0xde>
 80242e0:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 80242e4:	2301      	movs	r3, #1
 80242e6:	40b3      	lsls	r3, r6
 80242e8:	441d      	add	r5, r3
 80242ea:	45a8      	cmp	r8, r5
 80242ec:	d8f6      	bhi.n	80242dc <floor+0xcc>
 80242ee:	ea25 0507 	bic.w	r5, r5, r7
 80242f2:	e7b0      	b.n	8024256 <floor+0x46>
 80242f4:	2500      	movs	r5, #0
 80242f6:	462c      	mov	r4, r5
 80242f8:	e7ad      	b.n	8024256 <floor+0x46>
 80242fa:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 80242fe:	e7aa      	b.n	8024256 <floor+0x46>
 8024300:	8800759c 	.word	0x8800759c
 8024304:	7e37e43c 	.word	0x7e37e43c
 8024308:	bff00000 	.word	0xbff00000
 802430c:	000fffff 	.word	0x000fffff

08024310 <floorf>:
 8024310:	febb 0a40 	vrintm.f32	s0, s0
 8024314:	4770      	bx	lr

08024316 <abort>:
 8024316:	2006      	movs	r0, #6
 8024318:	b508      	push	{r3, lr}
 802431a:	f000 fa7b 	bl	8024814 <raise>
 802431e:	2001      	movs	r0, #1
 8024320:	f7ef ff50 	bl	80141c4 <_exit>

08024324 <malloc>:
 8024324:	4b02      	ldr	r3, [pc, #8]	; (8024330 <malloc+0xc>)
 8024326:	4601      	mov	r1, r0
 8024328:	6818      	ldr	r0, [r3, #0]
 802432a:	f000 b82b 	b.w	8024384 <_malloc_r>
 802432e:	bf00      	nop
 8024330:	20000108 	.word	0x20000108

08024334 <free>:
 8024334:	4b02      	ldr	r3, [pc, #8]	; (8024340 <free+0xc>)
 8024336:	4601      	mov	r1, r0
 8024338:	6818      	ldr	r0, [r3, #0]
 802433a:	f000 bb35 	b.w	80249a8 <_free_r>
 802433e:	bf00      	nop
 8024340:	20000108 	.word	0x20000108

08024344 <sbrk_aligned>:
 8024344:	b570      	push	{r4, r5, r6, lr}
 8024346:	4e0e      	ldr	r6, [pc, #56]	; (8024380 <sbrk_aligned+0x3c>)
 8024348:	460c      	mov	r4, r1
 802434a:	4605      	mov	r5, r0
 802434c:	6831      	ldr	r1, [r6, #0]
 802434e:	b911      	cbnz	r1, 8024356 <sbrk_aligned+0x12>
 8024350:	f000 fab0 	bl	80248b4 <_sbrk_r>
 8024354:	6030      	str	r0, [r6, #0]
 8024356:	4621      	mov	r1, r4
 8024358:	4628      	mov	r0, r5
 802435a:	f000 faab 	bl	80248b4 <_sbrk_r>
 802435e:	1c43      	adds	r3, r0, #1
 8024360:	d00a      	beq.n	8024378 <sbrk_aligned+0x34>
 8024362:	1cc4      	adds	r4, r0, #3
 8024364:	f024 0403 	bic.w	r4, r4, #3
 8024368:	42a0      	cmp	r0, r4
 802436a:	d007      	beq.n	802437c <sbrk_aligned+0x38>
 802436c:	1a21      	subs	r1, r4, r0
 802436e:	4628      	mov	r0, r5
 8024370:	f000 faa0 	bl	80248b4 <_sbrk_r>
 8024374:	3001      	adds	r0, #1
 8024376:	d101      	bne.n	802437c <sbrk_aligned+0x38>
 8024378:	f04f 34ff 	mov.w	r4, #4294967295
 802437c:	4620      	mov	r0, r4
 802437e:	bd70      	pop	{r4, r5, r6, pc}
 8024380:	20005d40 	.word	0x20005d40

08024384 <_malloc_r>:
 8024384:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8024388:	1ccd      	adds	r5, r1, #3
 802438a:	4607      	mov	r7, r0
 802438c:	f025 0503 	bic.w	r5, r5, #3
 8024390:	3508      	adds	r5, #8
 8024392:	2d0c      	cmp	r5, #12
 8024394:	bf38      	it	cc
 8024396:	250c      	movcc	r5, #12
 8024398:	2d00      	cmp	r5, #0
 802439a:	db01      	blt.n	80243a0 <_malloc_r+0x1c>
 802439c:	42a9      	cmp	r1, r5
 802439e:	d905      	bls.n	80243ac <_malloc_r+0x28>
 80243a0:	230c      	movs	r3, #12
 80243a2:	2600      	movs	r6, #0
 80243a4:	603b      	str	r3, [r7, #0]
 80243a6:	4630      	mov	r0, r6
 80243a8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80243ac:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8024480 <_malloc_r+0xfc>
 80243b0:	f000 f868 	bl	8024484 <__malloc_lock>
 80243b4:	f8d8 3000 	ldr.w	r3, [r8]
 80243b8:	461c      	mov	r4, r3
 80243ba:	bb5c      	cbnz	r4, 8024414 <_malloc_r+0x90>
 80243bc:	4629      	mov	r1, r5
 80243be:	4638      	mov	r0, r7
 80243c0:	f7ff ffc0 	bl	8024344 <sbrk_aligned>
 80243c4:	1c43      	adds	r3, r0, #1
 80243c6:	4604      	mov	r4, r0
 80243c8:	d155      	bne.n	8024476 <_malloc_r+0xf2>
 80243ca:	f8d8 4000 	ldr.w	r4, [r8]
 80243ce:	4626      	mov	r6, r4
 80243d0:	2e00      	cmp	r6, #0
 80243d2:	d145      	bne.n	8024460 <_malloc_r+0xdc>
 80243d4:	2c00      	cmp	r4, #0
 80243d6:	d048      	beq.n	802446a <_malloc_r+0xe6>
 80243d8:	6823      	ldr	r3, [r4, #0]
 80243da:	4631      	mov	r1, r6
 80243dc:	4638      	mov	r0, r7
 80243de:	eb04 0903 	add.w	r9, r4, r3
 80243e2:	f000 fa67 	bl	80248b4 <_sbrk_r>
 80243e6:	4581      	cmp	r9, r0
 80243e8:	d13f      	bne.n	802446a <_malloc_r+0xe6>
 80243ea:	6821      	ldr	r1, [r4, #0]
 80243ec:	4638      	mov	r0, r7
 80243ee:	1a6d      	subs	r5, r5, r1
 80243f0:	4629      	mov	r1, r5
 80243f2:	f7ff ffa7 	bl	8024344 <sbrk_aligned>
 80243f6:	3001      	adds	r0, #1
 80243f8:	d037      	beq.n	802446a <_malloc_r+0xe6>
 80243fa:	6823      	ldr	r3, [r4, #0]
 80243fc:	442b      	add	r3, r5
 80243fe:	6023      	str	r3, [r4, #0]
 8024400:	f8d8 3000 	ldr.w	r3, [r8]
 8024404:	2b00      	cmp	r3, #0
 8024406:	d038      	beq.n	802447a <_malloc_r+0xf6>
 8024408:	685a      	ldr	r2, [r3, #4]
 802440a:	42a2      	cmp	r2, r4
 802440c:	d12b      	bne.n	8024466 <_malloc_r+0xe2>
 802440e:	2200      	movs	r2, #0
 8024410:	605a      	str	r2, [r3, #4]
 8024412:	e00f      	b.n	8024434 <_malloc_r+0xb0>
 8024414:	6822      	ldr	r2, [r4, #0]
 8024416:	1b52      	subs	r2, r2, r5
 8024418:	d41f      	bmi.n	802445a <_malloc_r+0xd6>
 802441a:	2a0b      	cmp	r2, #11
 802441c:	d917      	bls.n	802444e <_malloc_r+0xca>
 802441e:	1961      	adds	r1, r4, r5
 8024420:	42a3      	cmp	r3, r4
 8024422:	6025      	str	r5, [r4, #0]
 8024424:	bf18      	it	ne
 8024426:	6059      	strne	r1, [r3, #4]
 8024428:	6863      	ldr	r3, [r4, #4]
 802442a:	bf08      	it	eq
 802442c:	f8c8 1000 	streq.w	r1, [r8]
 8024430:	5162      	str	r2, [r4, r5]
 8024432:	604b      	str	r3, [r1, #4]
 8024434:	f104 060b 	add.w	r6, r4, #11
 8024438:	4638      	mov	r0, r7
 802443a:	f000 f829 	bl	8024490 <__malloc_unlock>
 802443e:	1d23      	adds	r3, r4, #4
 8024440:	f026 0607 	bic.w	r6, r6, #7
 8024444:	1af2      	subs	r2, r6, r3
 8024446:	d0ae      	beq.n	80243a6 <_malloc_r+0x22>
 8024448:	1b9b      	subs	r3, r3, r6
 802444a:	50a3      	str	r3, [r4, r2]
 802444c:	e7ab      	b.n	80243a6 <_malloc_r+0x22>
 802444e:	42a3      	cmp	r3, r4
 8024450:	6862      	ldr	r2, [r4, #4]
 8024452:	d1dd      	bne.n	8024410 <_malloc_r+0x8c>
 8024454:	f8c8 2000 	str.w	r2, [r8]
 8024458:	e7ec      	b.n	8024434 <_malloc_r+0xb0>
 802445a:	4623      	mov	r3, r4
 802445c:	6864      	ldr	r4, [r4, #4]
 802445e:	e7ac      	b.n	80243ba <_malloc_r+0x36>
 8024460:	4634      	mov	r4, r6
 8024462:	6876      	ldr	r6, [r6, #4]
 8024464:	e7b4      	b.n	80243d0 <_malloc_r+0x4c>
 8024466:	4613      	mov	r3, r2
 8024468:	e7cc      	b.n	8024404 <_malloc_r+0x80>
 802446a:	230c      	movs	r3, #12
 802446c:	4638      	mov	r0, r7
 802446e:	603b      	str	r3, [r7, #0]
 8024470:	f000 f80e 	bl	8024490 <__malloc_unlock>
 8024474:	e797      	b.n	80243a6 <_malloc_r+0x22>
 8024476:	6025      	str	r5, [r4, #0]
 8024478:	e7dc      	b.n	8024434 <_malloc_r+0xb0>
 802447a:	605b      	str	r3, [r3, #4]
 802447c:	deff      	udf	#255	; 0xff
 802447e:	bf00      	nop
 8024480:	20005d3c 	.word	0x20005d3c

08024484 <__malloc_lock>:
 8024484:	4801      	ldr	r0, [pc, #4]	; (802448c <__malloc_lock+0x8>)
 8024486:	f000 ba62 	b.w	802494e <__retarget_lock_acquire_recursive>
 802448a:	bf00      	nop
 802448c:	20005e84 	.word	0x20005e84

08024490 <__malloc_unlock>:
 8024490:	4801      	ldr	r0, [pc, #4]	; (8024498 <__malloc_unlock+0x8>)
 8024492:	f000 ba5d 	b.w	8024950 <__retarget_lock_release_recursive>
 8024496:	bf00      	nop
 8024498:	20005e84 	.word	0x20005e84

0802449c <rand>:
 802449c:	4b16      	ldr	r3, [pc, #88]	; (80244f8 <rand+0x5c>)
 802449e:	b510      	push	{r4, lr}
 80244a0:	681c      	ldr	r4, [r3, #0]
 80244a2:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80244a4:	b9b3      	cbnz	r3, 80244d4 <rand+0x38>
 80244a6:	2018      	movs	r0, #24
 80244a8:	f7ff ff3c 	bl	8024324 <malloc>
 80244ac:	4602      	mov	r2, r0
 80244ae:	6320      	str	r0, [r4, #48]	; 0x30
 80244b0:	b920      	cbnz	r0, 80244bc <rand+0x20>
 80244b2:	4b12      	ldr	r3, [pc, #72]	; (80244fc <rand+0x60>)
 80244b4:	2152      	movs	r1, #82	; 0x52
 80244b6:	4812      	ldr	r0, [pc, #72]	; (8024500 <rand+0x64>)
 80244b8:	f000 fa58 	bl	802496c <__assert_func>
 80244bc:	4911      	ldr	r1, [pc, #68]	; (8024504 <rand+0x68>)
 80244be:	4b12      	ldr	r3, [pc, #72]	; (8024508 <rand+0x6c>)
 80244c0:	e9c0 1300 	strd	r1, r3, [r0]
 80244c4:	4b11      	ldr	r3, [pc, #68]	; (802450c <rand+0x70>)
 80244c6:	2100      	movs	r1, #0
 80244c8:	6083      	str	r3, [r0, #8]
 80244ca:	230b      	movs	r3, #11
 80244cc:	8183      	strh	r3, [r0, #12]
 80244ce:	2001      	movs	r0, #1
 80244d0:	e9c2 0104 	strd	r0, r1, [r2, #16]
 80244d4:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80244d6:	480e      	ldr	r0, [pc, #56]	; (8024510 <rand+0x74>)
 80244d8:	690b      	ldr	r3, [r1, #16]
 80244da:	694c      	ldr	r4, [r1, #20]
 80244dc:	4a0d      	ldr	r2, [pc, #52]	; (8024514 <rand+0x78>)
 80244de:	4358      	muls	r0, r3
 80244e0:	fb02 0004 	mla	r0, r2, r4, r0
 80244e4:	fba3 3202 	umull	r3, r2, r3, r2
 80244e8:	3301      	adds	r3, #1
 80244ea:	eb40 0002 	adc.w	r0, r0, r2
 80244ee:	e9c1 3004 	strd	r3, r0, [r1, #16]
 80244f2:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 80244f6:	bd10      	pop	{r4, pc}
 80244f8:	20000108 	.word	0x20000108
 80244fc:	08026630 	.word	0x08026630
 8024500:	08026647 	.word	0x08026647
 8024504:	abcd330e 	.word	0xabcd330e
 8024508:	e66d1234 	.word	0xe66d1234
 802450c:	0005deec 	.word	0x0005deec
 8024510:	5851f42d 	.word	0x5851f42d
 8024514:	4c957f2d 	.word	0x4c957f2d

08024518 <std>:
 8024518:	2300      	movs	r3, #0
 802451a:	b510      	push	{r4, lr}
 802451c:	4604      	mov	r4, r0
 802451e:	6083      	str	r3, [r0, #8]
 8024520:	8181      	strh	r1, [r0, #12]
 8024522:	4619      	mov	r1, r3
 8024524:	6643      	str	r3, [r0, #100]	; 0x64
 8024526:	81c2      	strh	r2, [r0, #14]
 8024528:	2208      	movs	r2, #8
 802452a:	6183      	str	r3, [r0, #24]
 802452c:	e9c0 3300 	strd	r3, r3, [r0]
 8024530:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8024534:	305c      	adds	r0, #92	; 0x5c
 8024536:	f000 f93c 	bl	80247b2 <memset>
 802453a:	4b0d      	ldr	r3, [pc, #52]	; (8024570 <std+0x58>)
 802453c:	6224      	str	r4, [r4, #32]
 802453e:	6263      	str	r3, [r4, #36]	; 0x24
 8024540:	4b0c      	ldr	r3, [pc, #48]	; (8024574 <std+0x5c>)
 8024542:	62a3      	str	r3, [r4, #40]	; 0x28
 8024544:	4b0c      	ldr	r3, [pc, #48]	; (8024578 <std+0x60>)
 8024546:	62e3      	str	r3, [r4, #44]	; 0x2c
 8024548:	4b0c      	ldr	r3, [pc, #48]	; (802457c <std+0x64>)
 802454a:	6323      	str	r3, [r4, #48]	; 0x30
 802454c:	4b0c      	ldr	r3, [pc, #48]	; (8024580 <std+0x68>)
 802454e:	429c      	cmp	r4, r3
 8024550:	d006      	beq.n	8024560 <std+0x48>
 8024552:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8024556:	4294      	cmp	r4, r2
 8024558:	d002      	beq.n	8024560 <std+0x48>
 802455a:	33d0      	adds	r3, #208	; 0xd0
 802455c:	429c      	cmp	r4, r3
 802455e:	d105      	bne.n	802456c <std+0x54>
 8024560:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8024564:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8024568:	f000 b9f0 	b.w	802494c <__retarget_lock_init_recursive>
 802456c:	bd10      	pop	{r4, pc}
 802456e:	bf00      	nop
 8024570:	080246f5 	.word	0x080246f5
 8024574:	0802471b 	.word	0x0802471b
 8024578:	08024753 	.word	0x08024753
 802457c:	08024777 	.word	0x08024777
 8024580:	20005d44 	.word	0x20005d44

08024584 <stdio_exit_handler>:
 8024584:	4a02      	ldr	r2, [pc, #8]	; (8024590 <stdio_exit_handler+0xc>)
 8024586:	4903      	ldr	r1, [pc, #12]	; (8024594 <stdio_exit_handler+0x10>)
 8024588:	4803      	ldr	r0, [pc, #12]	; (8024598 <stdio_exit_handler+0x14>)
 802458a:	f000 b869 	b.w	8024660 <_fwalk_sglue>
 802458e:	bf00      	nop
 8024590:	200000b0 	.word	0x200000b0
 8024594:	08025185 	.word	0x08025185
 8024598:	200000bc 	.word	0x200000bc

0802459c <cleanup_stdio>:
 802459c:	6841      	ldr	r1, [r0, #4]
 802459e:	4b0c      	ldr	r3, [pc, #48]	; (80245d0 <cleanup_stdio+0x34>)
 80245a0:	4299      	cmp	r1, r3
 80245a2:	b510      	push	{r4, lr}
 80245a4:	4604      	mov	r4, r0
 80245a6:	d001      	beq.n	80245ac <cleanup_stdio+0x10>
 80245a8:	f000 fdec 	bl	8025184 <_fflush_r>
 80245ac:	68a1      	ldr	r1, [r4, #8]
 80245ae:	4b09      	ldr	r3, [pc, #36]	; (80245d4 <cleanup_stdio+0x38>)
 80245b0:	4299      	cmp	r1, r3
 80245b2:	d002      	beq.n	80245ba <cleanup_stdio+0x1e>
 80245b4:	4620      	mov	r0, r4
 80245b6:	f000 fde5 	bl	8025184 <_fflush_r>
 80245ba:	68e1      	ldr	r1, [r4, #12]
 80245bc:	4b06      	ldr	r3, [pc, #24]	; (80245d8 <cleanup_stdio+0x3c>)
 80245be:	4299      	cmp	r1, r3
 80245c0:	d004      	beq.n	80245cc <cleanup_stdio+0x30>
 80245c2:	4620      	mov	r0, r4
 80245c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80245c8:	f000 bddc 	b.w	8025184 <_fflush_r>
 80245cc:	bd10      	pop	{r4, pc}
 80245ce:	bf00      	nop
 80245d0:	20005d44 	.word	0x20005d44
 80245d4:	20005dac 	.word	0x20005dac
 80245d8:	20005e14 	.word	0x20005e14

080245dc <global_stdio_init.part.0>:
 80245dc:	b510      	push	{r4, lr}
 80245de:	4b0b      	ldr	r3, [pc, #44]	; (802460c <global_stdio_init.part.0+0x30>)
 80245e0:	2104      	movs	r1, #4
 80245e2:	4c0b      	ldr	r4, [pc, #44]	; (8024610 <global_stdio_init.part.0+0x34>)
 80245e4:	4a0b      	ldr	r2, [pc, #44]	; (8024614 <global_stdio_init.part.0+0x38>)
 80245e6:	4620      	mov	r0, r4
 80245e8:	601a      	str	r2, [r3, #0]
 80245ea:	2200      	movs	r2, #0
 80245ec:	f7ff ff94 	bl	8024518 <std>
 80245f0:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80245f4:	2201      	movs	r2, #1
 80245f6:	2109      	movs	r1, #9
 80245f8:	f7ff ff8e 	bl	8024518 <std>
 80245fc:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8024600:	2202      	movs	r2, #2
 8024602:	2112      	movs	r1, #18
 8024604:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8024608:	f7ff bf86 	b.w	8024518 <std>
 802460c:	20005e7c 	.word	0x20005e7c
 8024610:	20005d44 	.word	0x20005d44
 8024614:	08024585 	.word	0x08024585

08024618 <__sfp_lock_acquire>:
 8024618:	4801      	ldr	r0, [pc, #4]	; (8024620 <__sfp_lock_acquire+0x8>)
 802461a:	f000 b998 	b.w	802494e <__retarget_lock_acquire_recursive>
 802461e:	bf00      	nop
 8024620:	20005e85 	.word	0x20005e85

08024624 <__sfp_lock_release>:
 8024624:	4801      	ldr	r0, [pc, #4]	; (802462c <__sfp_lock_release+0x8>)
 8024626:	f000 b993 	b.w	8024950 <__retarget_lock_release_recursive>
 802462a:	bf00      	nop
 802462c:	20005e85 	.word	0x20005e85

08024630 <__sinit>:
 8024630:	b510      	push	{r4, lr}
 8024632:	4604      	mov	r4, r0
 8024634:	f7ff fff0 	bl	8024618 <__sfp_lock_acquire>
 8024638:	6a23      	ldr	r3, [r4, #32]
 802463a:	b11b      	cbz	r3, 8024644 <__sinit+0x14>
 802463c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8024640:	f7ff bff0 	b.w	8024624 <__sfp_lock_release>
 8024644:	4b04      	ldr	r3, [pc, #16]	; (8024658 <__sinit+0x28>)
 8024646:	6223      	str	r3, [r4, #32]
 8024648:	4b04      	ldr	r3, [pc, #16]	; (802465c <__sinit+0x2c>)
 802464a:	681b      	ldr	r3, [r3, #0]
 802464c:	2b00      	cmp	r3, #0
 802464e:	d1f5      	bne.n	802463c <__sinit+0xc>
 8024650:	f7ff ffc4 	bl	80245dc <global_stdio_init.part.0>
 8024654:	e7f2      	b.n	802463c <__sinit+0xc>
 8024656:	bf00      	nop
 8024658:	0802459d 	.word	0x0802459d
 802465c:	20005e7c 	.word	0x20005e7c

08024660 <_fwalk_sglue>:
 8024660:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8024664:	4607      	mov	r7, r0
 8024666:	4688      	mov	r8, r1
 8024668:	4614      	mov	r4, r2
 802466a:	2600      	movs	r6, #0
 802466c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8024670:	f1b9 0901 	subs.w	r9, r9, #1
 8024674:	d505      	bpl.n	8024682 <_fwalk_sglue+0x22>
 8024676:	6824      	ldr	r4, [r4, #0]
 8024678:	2c00      	cmp	r4, #0
 802467a:	d1f7      	bne.n	802466c <_fwalk_sglue+0xc>
 802467c:	4630      	mov	r0, r6
 802467e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8024682:	89ab      	ldrh	r3, [r5, #12]
 8024684:	2b01      	cmp	r3, #1
 8024686:	d907      	bls.n	8024698 <_fwalk_sglue+0x38>
 8024688:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 802468c:	3301      	adds	r3, #1
 802468e:	d003      	beq.n	8024698 <_fwalk_sglue+0x38>
 8024690:	4629      	mov	r1, r5
 8024692:	4638      	mov	r0, r7
 8024694:	47c0      	blx	r8
 8024696:	4306      	orrs	r6, r0
 8024698:	3568      	adds	r5, #104	; 0x68
 802469a:	e7e9      	b.n	8024670 <_fwalk_sglue+0x10>

0802469c <siscanf>:
 802469c:	b40e      	push	{r1, r2, r3}
 802469e:	b510      	push	{r4, lr}
 80246a0:	b09f      	sub	sp, #124	; 0x7c
 80246a2:	f44f 7101 	mov.w	r1, #516	; 0x204
 80246a6:	ac21      	add	r4, sp, #132	; 0x84
 80246a8:	f8ad 101c 	strh.w	r1, [sp, #28]
 80246ac:	9004      	str	r0, [sp, #16]
 80246ae:	f854 2b04 	ldr.w	r2, [r4], #4
 80246b2:	9008      	str	r0, [sp, #32]
 80246b4:	9201      	str	r2, [sp, #4]
 80246b6:	f7db fdcd 	bl	8000254 <strlen>
 80246ba:	4b0c      	ldr	r3, [pc, #48]	; (80246ec <siscanf+0x50>)
 80246bc:	a904      	add	r1, sp, #16
 80246be:	9005      	str	r0, [sp, #20]
 80246c0:	930d      	str	r3, [sp, #52]	; 0x34
 80246c2:	2300      	movs	r3, #0
 80246c4:	9009      	str	r0, [sp, #36]	; 0x24
 80246c6:	9311      	str	r3, [sp, #68]	; 0x44
 80246c8:	9316      	str	r3, [sp, #88]	; 0x58
 80246ca:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80246ce:	4808      	ldr	r0, [pc, #32]	; (80246f0 <siscanf+0x54>)
 80246d0:	f8ad 301e 	strh.w	r3, [sp, #30]
 80246d4:	4623      	mov	r3, r4
 80246d6:	9a01      	ldr	r2, [sp, #4]
 80246d8:	6800      	ldr	r0, [r0, #0]
 80246da:	9403      	str	r4, [sp, #12]
 80246dc:	f000 fa0a 	bl	8024af4 <__ssvfiscanf_r>
 80246e0:	b01f      	add	sp, #124	; 0x7c
 80246e2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80246e6:	b003      	add	sp, #12
 80246e8:	4770      	bx	lr
 80246ea:	bf00      	nop
 80246ec:	08024717 	.word	0x08024717
 80246f0:	20000108 	.word	0x20000108

080246f4 <__sread>:
 80246f4:	b510      	push	{r4, lr}
 80246f6:	460c      	mov	r4, r1
 80246f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80246fc:	f000 f8b4 	bl	8024868 <_read_r>
 8024700:	2800      	cmp	r0, #0
 8024702:	bfab      	itete	ge
 8024704:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8024706:	89a3      	ldrhlt	r3, [r4, #12]
 8024708:	181b      	addge	r3, r3, r0
 802470a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 802470e:	bfac      	ite	ge
 8024710:	6563      	strge	r3, [r4, #84]	; 0x54
 8024712:	81a3      	strhlt	r3, [r4, #12]
 8024714:	bd10      	pop	{r4, pc}

08024716 <__seofread>:
 8024716:	2000      	movs	r0, #0
 8024718:	4770      	bx	lr

0802471a <__swrite>:
 802471a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802471e:	461f      	mov	r7, r3
 8024720:	898b      	ldrh	r3, [r1, #12]
 8024722:	4605      	mov	r5, r0
 8024724:	460c      	mov	r4, r1
 8024726:	05db      	lsls	r3, r3, #23
 8024728:	4616      	mov	r6, r2
 802472a:	d505      	bpl.n	8024738 <__swrite+0x1e>
 802472c:	2302      	movs	r3, #2
 802472e:	2200      	movs	r2, #0
 8024730:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8024734:	f000 f886 	bl	8024844 <_lseek_r>
 8024738:	89a3      	ldrh	r3, [r4, #12]
 802473a:	4632      	mov	r2, r6
 802473c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8024740:	4628      	mov	r0, r5
 8024742:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8024746:	81a3      	strh	r3, [r4, #12]
 8024748:	463b      	mov	r3, r7
 802474a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 802474e:	f000 b8c1 	b.w	80248d4 <_write_r>

08024752 <__sseek>:
 8024752:	b510      	push	{r4, lr}
 8024754:	460c      	mov	r4, r1
 8024756:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802475a:	f000 f873 	bl	8024844 <_lseek_r>
 802475e:	1c43      	adds	r3, r0, #1
 8024760:	89a3      	ldrh	r3, [r4, #12]
 8024762:	bf15      	itete	ne
 8024764:	6560      	strne	r0, [r4, #84]	; 0x54
 8024766:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 802476a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 802476e:	81a3      	strheq	r3, [r4, #12]
 8024770:	bf18      	it	ne
 8024772:	81a3      	strhne	r3, [r4, #12]
 8024774:	bd10      	pop	{r4, pc}

08024776 <__sclose>:
 8024776:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802477a:	f000 b853 	b.w	8024824 <_close_r>

0802477e <memmove>:
 802477e:	4288      	cmp	r0, r1
 8024780:	b510      	push	{r4, lr}
 8024782:	eb01 0402 	add.w	r4, r1, r2
 8024786:	d902      	bls.n	802478e <memmove+0x10>
 8024788:	4284      	cmp	r4, r0
 802478a:	4623      	mov	r3, r4
 802478c:	d807      	bhi.n	802479e <memmove+0x20>
 802478e:	1e43      	subs	r3, r0, #1
 8024790:	42a1      	cmp	r1, r4
 8024792:	d008      	beq.n	80247a6 <memmove+0x28>
 8024794:	f811 2b01 	ldrb.w	r2, [r1], #1
 8024798:	f803 2f01 	strb.w	r2, [r3, #1]!
 802479c:	e7f8      	b.n	8024790 <memmove+0x12>
 802479e:	4402      	add	r2, r0
 80247a0:	4601      	mov	r1, r0
 80247a2:	428a      	cmp	r2, r1
 80247a4:	d100      	bne.n	80247a8 <memmove+0x2a>
 80247a6:	bd10      	pop	{r4, pc}
 80247a8:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80247ac:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80247b0:	e7f7      	b.n	80247a2 <memmove+0x24>

080247b2 <memset>:
 80247b2:	4402      	add	r2, r0
 80247b4:	4603      	mov	r3, r0
 80247b6:	4293      	cmp	r3, r2
 80247b8:	d100      	bne.n	80247bc <memset+0xa>
 80247ba:	4770      	bx	lr
 80247bc:	f803 1b01 	strb.w	r1, [r3], #1
 80247c0:	e7f9      	b.n	80247b6 <memset+0x4>

080247c2 <_raise_r>:
 80247c2:	291f      	cmp	r1, #31
 80247c4:	b538      	push	{r3, r4, r5, lr}
 80247c6:	4604      	mov	r4, r0
 80247c8:	460d      	mov	r5, r1
 80247ca:	d904      	bls.n	80247d6 <_raise_r+0x14>
 80247cc:	2316      	movs	r3, #22
 80247ce:	6003      	str	r3, [r0, #0]
 80247d0:	f04f 30ff 	mov.w	r0, #4294967295
 80247d4:	bd38      	pop	{r3, r4, r5, pc}
 80247d6:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 80247d8:	b112      	cbz	r2, 80247e0 <_raise_r+0x1e>
 80247da:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80247de:	b94b      	cbnz	r3, 80247f4 <_raise_r+0x32>
 80247e0:	4620      	mov	r0, r4
 80247e2:	f000 f865 	bl	80248b0 <_getpid_r>
 80247e6:	462a      	mov	r2, r5
 80247e8:	4601      	mov	r1, r0
 80247ea:	4620      	mov	r0, r4
 80247ec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80247f0:	f000 b84c 	b.w	802488c <_kill_r>
 80247f4:	2b01      	cmp	r3, #1
 80247f6:	d00a      	beq.n	802480e <_raise_r+0x4c>
 80247f8:	1c59      	adds	r1, r3, #1
 80247fa:	d103      	bne.n	8024804 <_raise_r+0x42>
 80247fc:	2316      	movs	r3, #22
 80247fe:	6003      	str	r3, [r0, #0]
 8024800:	2001      	movs	r0, #1
 8024802:	e7e7      	b.n	80247d4 <_raise_r+0x12>
 8024804:	2400      	movs	r4, #0
 8024806:	4628      	mov	r0, r5
 8024808:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 802480c:	4798      	blx	r3
 802480e:	2000      	movs	r0, #0
 8024810:	e7e0      	b.n	80247d4 <_raise_r+0x12>
	...

08024814 <raise>:
 8024814:	4b02      	ldr	r3, [pc, #8]	; (8024820 <raise+0xc>)
 8024816:	4601      	mov	r1, r0
 8024818:	6818      	ldr	r0, [r3, #0]
 802481a:	f7ff bfd2 	b.w	80247c2 <_raise_r>
 802481e:	bf00      	nop
 8024820:	20000108 	.word	0x20000108

08024824 <_close_r>:
 8024824:	b538      	push	{r3, r4, r5, lr}
 8024826:	2300      	movs	r3, #0
 8024828:	4d05      	ldr	r5, [pc, #20]	; (8024840 <_close_r+0x1c>)
 802482a:	4604      	mov	r4, r0
 802482c:	4608      	mov	r0, r1
 802482e:	602b      	str	r3, [r5, #0]
 8024830:	f7ef fd0b 	bl	801424a <_close>
 8024834:	1c43      	adds	r3, r0, #1
 8024836:	d102      	bne.n	802483e <_close_r+0x1a>
 8024838:	682b      	ldr	r3, [r5, #0]
 802483a:	b103      	cbz	r3, 802483e <_close_r+0x1a>
 802483c:	6023      	str	r3, [r4, #0]
 802483e:	bd38      	pop	{r3, r4, r5, pc}
 8024840:	20005e80 	.word	0x20005e80

08024844 <_lseek_r>:
 8024844:	b538      	push	{r3, r4, r5, lr}
 8024846:	4604      	mov	r4, r0
 8024848:	4d06      	ldr	r5, [pc, #24]	; (8024864 <_lseek_r+0x20>)
 802484a:	4608      	mov	r0, r1
 802484c:	4611      	mov	r1, r2
 802484e:	2200      	movs	r2, #0
 8024850:	602a      	str	r2, [r5, #0]
 8024852:	461a      	mov	r2, r3
 8024854:	f7ef fd20 	bl	8014298 <_lseek>
 8024858:	1c43      	adds	r3, r0, #1
 802485a:	d102      	bne.n	8024862 <_lseek_r+0x1e>
 802485c:	682b      	ldr	r3, [r5, #0]
 802485e:	b103      	cbz	r3, 8024862 <_lseek_r+0x1e>
 8024860:	6023      	str	r3, [r4, #0]
 8024862:	bd38      	pop	{r3, r4, r5, pc}
 8024864:	20005e80 	.word	0x20005e80

08024868 <_read_r>:
 8024868:	b538      	push	{r3, r4, r5, lr}
 802486a:	4604      	mov	r4, r0
 802486c:	4d06      	ldr	r5, [pc, #24]	; (8024888 <_read_r+0x20>)
 802486e:	4608      	mov	r0, r1
 8024870:	4611      	mov	r1, r2
 8024872:	2200      	movs	r2, #0
 8024874:	602a      	str	r2, [r5, #0]
 8024876:	461a      	mov	r2, r3
 8024878:	f7ef fcae 	bl	80141d8 <_read>
 802487c:	1c43      	adds	r3, r0, #1
 802487e:	d102      	bne.n	8024886 <_read_r+0x1e>
 8024880:	682b      	ldr	r3, [r5, #0]
 8024882:	b103      	cbz	r3, 8024886 <_read_r+0x1e>
 8024884:	6023      	str	r3, [r4, #0]
 8024886:	bd38      	pop	{r3, r4, r5, pc}
 8024888:	20005e80 	.word	0x20005e80

0802488c <_kill_r>:
 802488c:	b538      	push	{r3, r4, r5, lr}
 802488e:	2300      	movs	r3, #0
 8024890:	4d06      	ldr	r5, [pc, #24]	; (80248ac <_kill_r+0x20>)
 8024892:	4604      	mov	r4, r0
 8024894:	4608      	mov	r0, r1
 8024896:	4611      	mov	r1, r2
 8024898:	602b      	str	r3, [r5, #0]
 802489a:	f7ef fc83 	bl	80141a4 <_kill>
 802489e:	1c43      	adds	r3, r0, #1
 80248a0:	d102      	bne.n	80248a8 <_kill_r+0x1c>
 80248a2:	682b      	ldr	r3, [r5, #0]
 80248a4:	b103      	cbz	r3, 80248a8 <_kill_r+0x1c>
 80248a6:	6023      	str	r3, [r4, #0]
 80248a8:	bd38      	pop	{r3, r4, r5, pc}
 80248aa:	bf00      	nop
 80248ac:	20005e80 	.word	0x20005e80

080248b0 <_getpid_r>:
 80248b0:	f7ef bc70 	b.w	8014194 <_getpid>

080248b4 <_sbrk_r>:
 80248b4:	b538      	push	{r3, r4, r5, lr}
 80248b6:	2300      	movs	r3, #0
 80248b8:	4d05      	ldr	r5, [pc, #20]	; (80248d0 <_sbrk_r+0x1c>)
 80248ba:	4604      	mov	r4, r0
 80248bc:	4608      	mov	r0, r1
 80248be:	602b      	str	r3, [r5, #0]
 80248c0:	f7ef fcf8 	bl	80142b4 <_sbrk>
 80248c4:	1c43      	adds	r3, r0, #1
 80248c6:	d102      	bne.n	80248ce <_sbrk_r+0x1a>
 80248c8:	682b      	ldr	r3, [r5, #0]
 80248ca:	b103      	cbz	r3, 80248ce <_sbrk_r+0x1a>
 80248cc:	6023      	str	r3, [r4, #0]
 80248ce:	bd38      	pop	{r3, r4, r5, pc}
 80248d0:	20005e80 	.word	0x20005e80

080248d4 <_write_r>:
 80248d4:	b538      	push	{r3, r4, r5, lr}
 80248d6:	4604      	mov	r4, r0
 80248d8:	4d06      	ldr	r5, [pc, #24]	; (80248f4 <_write_r+0x20>)
 80248da:	4608      	mov	r0, r1
 80248dc:	4611      	mov	r1, r2
 80248de:	2200      	movs	r2, #0
 80248e0:	602a      	str	r2, [r5, #0]
 80248e2:	461a      	mov	r2, r3
 80248e4:	f7ef fc95 	bl	8014212 <_write>
 80248e8:	1c43      	adds	r3, r0, #1
 80248ea:	d102      	bne.n	80248f2 <_write_r+0x1e>
 80248ec:	682b      	ldr	r3, [r5, #0]
 80248ee:	b103      	cbz	r3, 80248f2 <_write_r+0x1e>
 80248f0:	6023      	str	r3, [r4, #0]
 80248f2:	bd38      	pop	{r3, r4, r5, pc}
 80248f4:	20005e80 	.word	0x20005e80

080248f8 <__errno>:
 80248f8:	4b01      	ldr	r3, [pc, #4]	; (8024900 <__errno+0x8>)
 80248fa:	6818      	ldr	r0, [r3, #0]
 80248fc:	4770      	bx	lr
 80248fe:	bf00      	nop
 8024900:	20000108 	.word	0x20000108

08024904 <__libc_init_array>:
 8024904:	b570      	push	{r4, r5, r6, lr}
 8024906:	4d0d      	ldr	r5, [pc, #52]	; (802493c <__libc_init_array+0x38>)
 8024908:	2600      	movs	r6, #0
 802490a:	4c0d      	ldr	r4, [pc, #52]	; (8024940 <__libc_init_array+0x3c>)
 802490c:	1b64      	subs	r4, r4, r5
 802490e:	10a4      	asrs	r4, r4, #2
 8024910:	42a6      	cmp	r6, r4
 8024912:	d109      	bne.n	8024928 <__libc_init_array+0x24>
 8024914:	4d0b      	ldr	r5, [pc, #44]	; (8024944 <__libc_init_array+0x40>)
 8024916:	2600      	movs	r6, #0
 8024918:	4c0b      	ldr	r4, [pc, #44]	; (8024948 <__libc_init_array+0x44>)
 802491a:	f001 fa0b 	bl	8025d34 <_init>
 802491e:	1b64      	subs	r4, r4, r5
 8024920:	10a4      	asrs	r4, r4, #2
 8024922:	42a6      	cmp	r6, r4
 8024924:	d105      	bne.n	8024932 <__libc_init_array+0x2e>
 8024926:	bd70      	pop	{r4, r5, r6, pc}
 8024928:	f855 3b04 	ldr.w	r3, [r5], #4
 802492c:	3601      	adds	r6, #1
 802492e:	4798      	blx	r3
 8024930:	e7ee      	b.n	8024910 <__libc_init_array+0xc>
 8024932:	f855 3b04 	ldr.w	r3, [r5], #4
 8024936:	3601      	adds	r6, #1
 8024938:	4798      	blx	r3
 802493a:	e7f2      	b.n	8024922 <__libc_init_array+0x1e>
 802493c:	08026834 	.word	0x08026834
 8024940:	08026834 	.word	0x08026834
 8024944:	08026834 	.word	0x08026834
 8024948:	08026844 	.word	0x08026844

0802494c <__retarget_lock_init_recursive>:
 802494c:	4770      	bx	lr

0802494e <__retarget_lock_acquire_recursive>:
 802494e:	4770      	bx	lr

08024950 <__retarget_lock_release_recursive>:
 8024950:	4770      	bx	lr

08024952 <memcpy>:
 8024952:	440a      	add	r2, r1
 8024954:	1e43      	subs	r3, r0, #1
 8024956:	4291      	cmp	r1, r2
 8024958:	d100      	bne.n	802495c <memcpy+0xa>
 802495a:	4770      	bx	lr
 802495c:	b510      	push	{r4, lr}
 802495e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8024962:	4291      	cmp	r1, r2
 8024964:	f803 4f01 	strb.w	r4, [r3, #1]!
 8024968:	d1f9      	bne.n	802495e <memcpy+0xc>
 802496a:	bd10      	pop	{r4, pc}

0802496c <__assert_func>:
 802496c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 802496e:	4614      	mov	r4, r2
 8024970:	461a      	mov	r2, r3
 8024972:	4b09      	ldr	r3, [pc, #36]	; (8024998 <__assert_func+0x2c>)
 8024974:	4605      	mov	r5, r0
 8024976:	681b      	ldr	r3, [r3, #0]
 8024978:	68d8      	ldr	r0, [r3, #12]
 802497a:	b14c      	cbz	r4, 8024990 <__assert_func+0x24>
 802497c:	4b07      	ldr	r3, [pc, #28]	; (802499c <__assert_func+0x30>)
 802497e:	9100      	str	r1, [sp, #0]
 8024980:	4907      	ldr	r1, [pc, #28]	; (80249a0 <__assert_func+0x34>)
 8024982:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8024986:	462b      	mov	r3, r5
 8024988:	f000 fc24 	bl	80251d4 <fiprintf>
 802498c:	f7ff fcc3 	bl	8024316 <abort>
 8024990:	4b04      	ldr	r3, [pc, #16]	; (80249a4 <__assert_func+0x38>)
 8024992:	461c      	mov	r4, r3
 8024994:	e7f3      	b.n	802497e <__assert_func+0x12>
 8024996:	bf00      	nop
 8024998:	20000108 	.word	0x20000108
 802499c:	0802669f 	.word	0x0802669f
 80249a0:	080266ac 	.word	0x080266ac
 80249a4:	080266da 	.word	0x080266da

080249a8 <_free_r>:
 80249a8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80249aa:	2900      	cmp	r1, #0
 80249ac:	d043      	beq.n	8024a36 <_free_r+0x8e>
 80249ae:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80249b2:	1f0c      	subs	r4, r1, #4
 80249b4:	9001      	str	r0, [sp, #4]
 80249b6:	2b00      	cmp	r3, #0
 80249b8:	bfb8      	it	lt
 80249ba:	18e4      	addlt	r4, r4, r3
 80249bc:	f7ff fd62 	bl	8024484 <__malloc_lock>
 80249c0:	4a1e      	ldr	r2, [pc, #120]	; (8024a3c <_free_r+0x94>)
 80249c2:	9801      	ldr	r0, [sp, #4]
 80249c4:	6813      	ldr	r3, [r2, #0]
 80249c6:	b933      	cbnz	r3, 80249d6 <_free_r+0x2e>
 80249c8:	6063      	str	r3, [r4, #4]
 80249ca:	6014      	str	r4, [r2, #0]
 80249cc:	b003      	add	sp, #12
 80249ce:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80249d2:	f7ff bd5d 	b.w	8024490 <__malloc_unlock>
 80249d6:	42a3      	cmp	r3, r4
 80249d8:	d908      	bls.n	80249ec <_free_r+0x44>
 80249da:	6825      	ldr	r5, [r4, #0]
 80249dc:	1961      	adds	r1, r4, r5
 80249de:	428b      	cmp	r3, r1
 80249e0:	bf01      	itttt	eq
 80249e2:	6819      	ldreq	r1, [r3, #0]
 80249e4:	685b      	ldreq	r3, [r3, #4]
 80249e6:	1949      	addeq	r1, r1, r5
 80249e8:	6021      	streq	r1, [r4, #0]
 80249ea:	e7ed      	b.n	80249c8 <_free_r+0x20>
 80249ec:	461a      	mov	r2, r3
 80249ee:	685b      	ldr	r3, [r3, #4]
 80249f0:	b10b      	cbz	r3, 80249f6 <_free_r+0x4e>
 80249f2:	42a3      	cmp	r3, r4
 80249f4:	d9fa      	bls.n	80249ec <_free_r+0x44>
 80249f6:	6811      	ldr	r1, [r2, #0]
 80249f8:	1855      	adds	r5, r2, r1
 80249fa:	42a5      	cmp	r5, r4
 80249fc:	d10b      	bne.n	8024a16 <_free_r+0x6e>
 80249fe:	6824      	ldr	r4, [r4, #0]
 8024a00:	4421      	add	r1, r4
 8024a02:	1854      	adds	r4, r2, r1
 8024a04:	6011      	str	r1, [r2, #0]
 8024a06:	42a3      	cmp	r3, r4
 8024a08:	d1e0      	bne.n	80249cc <_free_r+0x24>
 8024a0a:	681c      	ldr	r4, [r3, #0]
 8024a0c:	685b      	ldr	r3, [r3, #4]
 8024a0e:	440c      	add	r4, r1
 8024a10:	6053      	str	r3, [r2, #4]
 8024a12:	6014      	str	r4, [r2, #0]
 8024a14:	e7da      	b.n	80249cc <_free_r+0x24>
 8024a16:	d902      	bls.n	8024a1e <_free_r+0x76>
 8024a18:	230c      	movs	r3, #12
 8024a1a:	6003      	str	r3, [r0, #0]
 8024a1c:	e7d6      	b.n	80249cc <_free_r+0x24>
 8024a1e:	6825      	ldr	r5, [r4, #0]
 8024a20:	1961      	adds	r1, r4, r5
 8024a22:	428b      	cmp	r3, r1
 8024a24:	bf02      	ittt	eq
 8024a26:	6819      	ldreq	r1, [r3, #0]
 8024a28:	685b      	ldreq	r3, [r3, #4]
 8024a2a:	1949      	addeq	r1, r1, r5
 8024a2c:	6063      	str	r3, [r4, #4]
 8024a2e:	bf08      	it	eq
 8024a30:	6021      	streq	r1, [r4, #0]
 8024a32:	6054      	str	r4, [r2, #4]
 8024a34:	e7ca      	b.n	80249cc <_free_r+0x24>
 8024a36:	b003      	add	sp, #12
 8024a38:	bd30      	pop	{r4, r5, pc}
 8024a3a:	bf00      	nop
 8024a3c:	20005d3c 	.word	0x20005d3c

08024a40 <_sungetc_r>:
 8024a40:	b538      	push	{r3, r4, r5, lr}
 8024a42:	1c4b      	adds	r3, r1, #1
 8024a44:	4614      	mov	r4, r2
 8024a46:	d103      	bne.n	8024a50 <_sungetc_r+0x10>
 8024a48:	f04f 35ff 	mov.w	r5, #4294967295
 8024a4c:	4628      	mov	r0, r5
 8024a4e:	bd38      	pop	{r3, r4, r5, pc}
 8024a50:	8993      	ldrh	r3, [r2, #12]
 8024a52:	b2cd      	uxtb	r5, r1
 8024a54:	f023 0320 	bic.w	r3, r3, #32
 8024a58:	8193      	strh	r3, [r2, #12]
 8024a5a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8024a5c:	6852      	ldr	r2, [r2, #4]
 8024a5e:	b18b      	cbz	r3, 8024a84 <_sungetc_r+0x44>
 8024a60:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8024a62:	4293      	cmp	r3, r2
 8024a64:	dd08      	ble.n	8024a78 <_sungetc_r+0x38>
 8024a66:	6823      	ldr	r3, [r4, #0]
 8024a68:	1e5a      	subs	r2, r3, #1
 8024a6a:	6022      	str	r2, [r4, #0]
 8024a6c:	f803 5c01 	strb.w	r5, [r3, #-1]
 8024a70:	6863      	ldr	r3, [r4, #4]
 8024a72:	3301      	adds	r3, #1
 8024a74:	6063      	str	r3, [r4, #4]
 8024a76:	e7e9      	b.n	8024a4c <_sungetc_r+0xc>
 8024a78:	4621      	mov	r1, r4
 8024a7a:	f000 fbf6 	bl	802526a <__submore>
 8024a7e:	2800      	cmp	r0, #0
 8024a80:	d0f1      	beq.n	8024a66 <_sungetc_r+0x26>
 8024a82:	e7e1      	b.n	8024a48 <_sungetc_r+0x8>
 8024a84:	6921      	ldr	r1, [r4, #16]
 8024a86:	6823      	ldr	r3, [r4, #0]
 8024a88:	b151      	cbz	r1, 8024aa0 <_sungetc_r+0x60>
 8024a8a:	4299      	cmp	r1, r3
 8024a8c:	d208      	bcs.n	8024aa0 <_sungetc_r+0x60>
 8024a8e:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8024a92:	42a9      	cmp	r1, r5
 8024a94:	d104      	bne.n	8024aa0 <_sungetc_r+0x60>
 8024a96:	3b01      	subs	r3, #1
 8024a98:	3201      	adds	r2, #1
 8024a9a:	6023      	str	r3, [r4, #0]
 8024a9c:	6062      	str	r2, [r4, #4]
 8024a9e:	e7d5      	b.n	8024a4c <_sungetc_r+0xc>
 8024aa0:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8024aa4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8024aa8:	6363      	str	r3, [r4, #52]	; 0x34
 8024aaa:	2303      	movs	r3, #3
 8024aac:	63a3      	str	r3, [r4, #56]	; 0x38
 8024aae:	4623      	mov	r3, r4
 8024ab0:	f803 5f46 	strb.w	r5, [r3, #70]!
 8024ab4:	6023      	str	r3, [r4, #0]
 8024ab6:	2301      	movs	r3, #1
 8024ab8:	e7dc      	b.n	8024a74 <_sungetc_r+0x34>

08024aba <__ssrefill_r>:
 8024aba:	b510      	push	{r4, lr}
 8024abc:	460c      	mov	r4, r1
 8024abe:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8024ac0:	b169      	cbz	r1, 8024ade <__ssrefill_r+0x24>
 8024ac2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8024ac6:	4299      	cmp	r1, r3
 8024ac8:	d001      	beq.n	8024ace <__ssrefill_r+0x14>
 8024aca:	f7ff ff6d 	bl	80249a8 <_free_r>
 8024ace:	2000      	movs	r0, #0
 8024ad0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8024ad2:	6360      	str	r0, [r4, #52]	; 0x34
 8024ad4:	6063      	str	r3, [r4, #4]
 8024ad6:	b113      	cbz	r3, 8024ade <__ssrefill_r+0x24>
 8024ad8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8024ada:	6023      	str	r3, [r4, #0]
 8024adc:	bd10      	pop	{r4, pc}
 8024ade:	6923      	ldr	r3, [r4, #16]
 8024ae0:	f04f 30ff 	mov.w	r0, #4294967295
 8024ae4:	6023      	str	r3, [r4, #0]
 8024ae6:	2300      	movs	r3, #0
 8024ae8:	6063      	str	r3, [r4, #4]
 8024aea:	89a3      	ldrh	r3, [r4, #12]
 8024aec:	f043 0320 	orr.w	r3, r3, #32
 8024af0:	81a3      	strh	r3, [r4, #12]
 8024af2:	e7f3      	b.n	8024adc <__ssrefill_r+0x22>

08024af4 <__ssvfiscanf_r>:
 8024af4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8024af8:	460c      	mov	r4, r1
 8024afa:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 8024afe:	2100      	movs	r1, #0
 8024b00:	4606      	mov	r6, r0
 8024b02:	f10d 0804 	add.w	r8, sp, #4
 8024b06:	4fa6      	ldr	r7, [pc, #664]	; (8024da0 <__ssvfiscanf_r+0x2ac>)
 8024b08:	f8df 92a0 	ldr.w	r9, [pc, #672]	; 8024dac <__ssvfiscanf_r+0x2b8>
 8024b0c:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8024b10:	9300      	str	r3, [sp, #0]
 8024b12:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 8024b16:	49a3      	ldr	r1, [pc, #652]	; (8024da4 <__ssvfiscanf_r+0x2b0>)
 8024b18:	91a0      	str	r1, [sp, #640]	; 0x280
 8024b1a:	49a3      	ldr	r1, [pc, #652]	; (8024da8 <__ssvfiscanf_r+0x2b4>)
 8024b1c:	91a1      	str	r1, [sp, #644]	; 0x284
 8024b1e:	7813      	ldrb	r3, [r2, #0]
 8024b20:	2b00      	cmp	r3, #0
 8024b22:	f000 815a 	beq.w	8024dda <__ssvfiscanf_r+0x2e6>
 8024b26:	5cf9      	ldrb	r1, [r7, r3]
 8024b28:	1c55      	adds	r5, r2, #1
 8024b2a:	f011 0108 	ands.w	r1, r1, #8
 8024b2e:	d019      	beq.n	8024b64 <__ssvfiscanf_r+0x70>
 8024b30:	6863      	ldr	r3, [r4, #4]
 8024b32:	2b00      	cmp	r3, #0
 8024b34:	dd0f      	ble.n	8024b56 <__ssvfiscanf_r+0x62>
 8024b36:	6823      	ldr	r3, [r4, #0]
 8024b38:	781a      	ldrb	r2, [r3, #0]
 8024b3a:	5cba      	ldrb	r2, [r7, r2]
 8024b3c:	0712      	lsls	r2, r2, #28
 8024b3e:	d401      	bmi.n	8024b44 <__ssvfiscanf_r+0x50>
 8024b40:	462a      	mov	r2, r5
 8024b42:	e7ec      	b.n	8024b1e <__ssvfiscanf_r+0x2a>
 8024b44:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8024b46:	3301      	adds	r3, #1
 8024b48:	3201      	adds	r2, #1
 8024b4a:	6023      	str	r3, [r4, #0]
 8024b4c:	9245      	str	r2, [sp, #276]	; 0x114
 8024b4e:	6862      	ldr	r2, [r4, #4]
 8024b50:	3a01      	subs	r2, #1
 8024b52:	6062      	str	r2, [r4, #4]
 8024b54:	e7ec      	b.n	8024b30 <__ssvfiscanf_r+0x3c>
 8024b56:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8024b58:	4621      	mov	r1, r4
 8024b5a:	4630      	mov	r0, r6
 8024b5c:	4798      	blx	r3
 8024b5e:	2800      	cmp	r0, #0
 8024b60:	d0e9      	beq.n	8024b36 <__ssvfiscanf_r+0x42>
 8024b62:	e7ed      	b.n	8024b40 <__ssvfiscanf_r+0x4c>
 8024b64:	2b25      	cmp	r3, #37	; 0x25
 8024b66:	d012      	beq.n	8024b8e <__ssvfiscanf_r+0x9a>
 8024b68:	469a      	mov	sl, r3
 8024b6a:	6863      	ldr	r3, [r4, #4]
 8024b6c:	2b00      	cmp	r3, #0
 8024b6e:	f340 8092 	ble.w	8024c96 <__ssvfiscanf_r+0x1a2>
 8024b72:	6822      	ldr	r2, [r4, #0]
 8024b74:	7813      	ldrb	r3, [r2, #0]
 8024b76:	4553      	cmp	r3, sl
 8024b78:	f040 812f 	bne.w	8024dda <__ssvfiscanf_r+0x2e6>
 8024b7c:	6863      	ldr	r3, [r4, #4]
 8024b7e:	3201      	adds	r2, #1
 8024b80:	3b01      	subs	r3, #1
 8024b82:	6022      	str	r2, [r4, #0]
 8024b84:	6063      	str	r3, [r4, #4]
 8024b86:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8024b88:	3301      	adds	r3, #1
 8024b8a:	9345      	str	r3, [sp, #276]	; 0x114
 8024b8c:	e7d8      	b.n	8024b40 <__ssvfiscanf_r+0x4c>
 8024b8e:	9141      	str	r1, [sp, #260]	; 0x104
 8024b90:	9143      	str	r1, [sp, #268]	; 0x10c
 8024b92:	7853      	ldrb	r3, [r2, #1]
 8024b94:	2b2a      	cmp	r3, #42	; 0x2a
 8024b96:	bf04      	itt	eq
 8024b98:	2310      	moveq	r3, #16
 8024b9a:	1c95      	addeq	r5, r2, #2
 8024b9c:	f04f 020a 	mov.w	r2, #10
 8024ba0:	bf08      	it	eq
 8024ba2:	9341      	streq	r3, [sp, #260]	; 0x104
 8024ba4:	46aa      	mov	sl, r5
 8024ba6:	f81a 1b01 	ldrb.w	r1, [sl], #1
 8024baa:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 8024bae:	2b09      	cmp	r3, #9
 8024bb0:	d91c      	bls.n	8024bec <__ssvfiscanf_r+0xf8>
 8024bb2:	2203      	movs	r2, #3
 8024bb4:	487d      	ldr	r0, [pc, #500]	; (8024dac <__ssvfiscanf_r+0x2b8>)
 8024bb6:	f000 fb8f 	bl	80252d8 <memchr>
 8024bba:	b138      	cbz	r0, 8024bcc <__ssvfiscanf_r+0xd8>
 8024bbc:	eba0 0009 	sub.w	r0, r0, r9
 8024bc0:	2301      	movs	r3, #1
 8024bc2:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8024bc4:	4655      	mov	r5, sl
 8024bc6:	4083      	lsls	r3, r0
 8024bc8:	4313      	orrs	r3, r2
 8024bca:	9341      	str	r3, [sp, #260]	; 0x104
 8024bcc:	f815 3b01 	ldrb.w	r3, [r5], #1
 8024bd0:	2b78      	cmp	r3, #120	; 0x78
 8024bd2:	d806      	bhi.n	8024be2 <__ssvfiscanf_r+0xee>
 8024bd4:	2b57      	cmp	r3, #87	; 0x57
 8024bd6:	d810      	bhi.n	8024bfa <__ssvfiscanf_r+0x106>
 8024bd8:	2b25      	cmp	r3, #37	; 0x25
 8024bda:	d0c5      	beq.n	8024b68 <__ssvfiscanf_r+0x74>
 8024bdc:	d856      	bhi.n	8024c8c <__ssvfiscanf_r+0x198>
 8024bde:	2b00      	cmp	r3, #0
 8024be0:	d064      	beq.n	8024cac <__ssvfiscanf_r+0x1b8>
 8024be2:	2303      	movs	r3, #3
 8024be4:	9347      	str	r3, [sp, #284]	; 0x11c
 8024be6:	230a      	movs	r3, #10
 8024be8:	9342      	str	r3, [sp, #264]	; 0x108
 8024bea:	e075      	b.n	8024cd8 <__ssvfiscanf_r+0x1e4>
 8024bec:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8024bee:	4655      	mov	r5, sl
 8024bf0:	fb02 1103 	mla	r1, r2, r3, r1
 8024bf4:	3930      	subs	r1, #48	; 0x30
 8024bf6:	9143      	str	r1, [sp, #268]	; 0x10c
 8024bf8:	e7d4      	b.n	8024ba4 <__ssvfiscanf_r+0xb0>
 8024bfa:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 8024bfe:	2a20      	cmp	r2, #32
 8024c00:	d8ef      	bhi.n	8024be2 <__ssvfiscanf_r+0xee>
 8024c02:	a101      	add	r1, pc, #4	; (adr r1, 8024c08 <__ssvfiscanf_r+0x114>)
 8024c04:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8024c08:	08024cbb 	.word	0x08024cbb
 8024c0c:	08024be3 	.word	0x08024be3
 8024c10:	08024be3 	.word	0x08024be3
 8024c14:	08024d19 	.word	0x08024d19
 8024c18:	08024be3 	.word	0x08024be3
 8024c1c:	08024be3 	.word	0x08024be3
 8024c20:	08024be3 	.word	0x08024be3
 8024c24:	08024be3 	.word	0x08024be3
 8024c28:	08024be3 	.word	0x08024be3
 8024c2c:	08024be3 	.word	0x08024be3
 8024c30:	08024be3 	.word	0x08024be3
 8024c34:	08024d2f 	.word	0x08024d2f
 8024c38:	08024d15 	.word	0x08024d15
 8024c3c:	08024c93 	.word	0x08024c93
 8024c40:	08024c93 	.word	0x08024c93
 8024c44:	08024c93 	.word	0x08024c93
 8024c48:	08024be3 	.word	0x08024be3
 8024c4c:	08024cd1 	.word	0x08024cd1
 8024c50:	08024be3 	.word	0x08024be3
 8024c54:	08024be3 	.word	0x08024be3
 8024c58:	08024be3 	.word	0x08024be3
 8024c5c:	08024be3 	.word	0x08024be3
 8024c60:	08024d3f 	.word	0x08024d3f
 8024c64:	08024d0d 	.word	0x08024d0d
 8024c68:	08024cb3 	.word	0x08024cb3
 8024c6c:	08024be3 	.word	0x08024be3
 8024c70:	08024be3 	.word	0x08024be3
 8024c74:	08024d3b 	.word	0x08024d3b
 8024c78:	08024be3 	.word	0x08024be3
 8024c7c:	08024d15 	.word	0x08024d15
 8024c80:	08024be3 	.word	0x08024be3
 8024c84:	08024be3 	.word	0x08024be3
 8024c88:	08024cbb 	.word	0x08024cbb
 8024c8c:	3b45      	subs	r3, #69	; 0x45
 8024c8e:	2b02      	cmp	r3, #2
 8024c90:	d8a7      	bhi.n	8024be2 <__ssvfiscanf_r+0xee>
 8024c92:	2305      	movs	r3, #5
 8024c94:	e01f      	b.n	8024cd6 <__ssvfiscanf_r+0x1e2>
 8024c96:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8024c98:	4621      	mov	r1, r4
 8024c9a:	4630      	mov	r0, r6
 8024c9c:	4798      	blx	r3
 8024c9e:	2800      	cmp	r0, #0
 8024ca0:	f43f af67 	beq.w	8024b72 <__ssvfiscanf_r+0x7e>
 8024ca4:	9844      	ldr	r0, [sp, #272]	; 0x110
 8024ca6:	2800      	cmp	r0, #0
 8024ca8:	f040 808d 	bne.w	8024dc6 <__ssvfiscanf_r+0x2d2>
 8024cac:	f04f 30ff 	mov.w	r0, #4294967295
 8024cb0:	e08f      	b.n	8024dd2 <__ssvfiscanf_r+0x2de>
 8024cb2:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8024cb4:	f042 0220 	orr.w	r2, r2, #32
 8024cb8:	9241      	str	r2, [sp, #260]	; 0x104
 8024cba:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8024cbc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8024cc0:	9241      	str	r2, [sp, #260]	; 0x104
 8024cc2:	2210      	movs	r2, #16
 8024cc4:	2b6f      	cmp	r3, #111	; 0x6f
 8024cc6:	9242      	str	r2, [sp, #264]	; 0x108
 8024cc8:	bf34      	ite	cc
 8024cca:	2303      	movcc	r3, #3
 8024ccc:	2304      	movcs	r3, #4
 8024cce:	e002      	b.n	8024cd6 <__ssvfiscanf_r+0x1e2>
 8024cd0:	2300      	movs	r3, #0
 8024cd2:	9342      	str	r3, [sp, #264]	; 0x108
 8024cd4:	2303      	movs	r3, #3
 8024cd6:	9347      	str	r3, [sp, #284]	; 0x11c
 8024cd8:	6863      	ldr	r3, [r4, #4]
 8024cda:	2b00      	cmp	r3, #0
 8024cdc:	dd3e      	ble.n	8024d5c <__ssvfiscanf_r+0x268>
 8024cde:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8024ce0:	0659      	lsls	r1, r3, #25
 8024ce2:	d404      	bmi.n	8024cee <__ssvfiscanf_r+0x1fa>
 8024ce4:	6823      	ldr	r3, [r4, #0]
 8024ce6:	781a      	ldrb	r2, [r3, #0]
 8024ce8:	5cba      	ldrb	r2, [r7, r2]
 8024cea:	0712      	lsls	r2, r2, #28
 8024cec:	d43d      	bmi.n	8024d6a <__ssvfiscanf_r+0x276>
 8024cee:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8024cf0:	2b02      	cmp	r3, #2
 8024cf2:	dc4c      	bgt.n	8024d8e <__ssvfiscanf_r+0x29a>
 8024cf4:	466b      	mov	r3, sp
 8024cf6:	4622      	mov	r2, r4
 8024cf8:	a941      	add	r1, sp, #260	; 0x104
 8024cfa:	4630      	mov	r0, r6
 8024cfc:	f000 f872 	bl	8024de4 <_scanf_chars>
 8024d00:	2801      	cmp	r0, #1
 8024d02:	d06a      	beq.n	8024dda <__ssvfiscanf_r+0x2e6>
 8024d04:	2802      	cmp	r0, #2
 8024d06:	f47f af1b 	bne.w	8024b40 <__ssvfiscanf_r+0x4c>
 8024d0a:	e7cb      	b.n	8024ca4 <__ssvfiscanf_r+0x1b0>
 8024d0c:	2308      	movs	r3, #8
 8024d0e:	9342      	str	r3, [sp, #264]	; 0x108
 8024d10:	2304      	movs	r3, #4
 8024d12:	e7e0      	b.n	8024cd6 <__ssvfiscanf_r+0x1e2>
 8024d14:	220a      	movs	r2, #10
 8024d16:	e7d5      	b.n	8024cc4 <__ssvfiscanf_r+0x1d0>
 8024d18:	4629      	mov	r1, r5
 8024d1a:	4640      	mov	r0, r8
 8024d1c:	f000 fa6c 	bl	80251f8 <__sccl>
 8024d20:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8024d22:	4605      	mov	r5, r0
 8024d24:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8024d28:	9341      	str	r3, [sp, #260]	; 0x104
 8024d2a:	2301      	movs	r3, #1
 8024d2c:	e7d3      	b.n	8024cd6 <__ssvfiscanf_r+0x1e2>
 8024d2e:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8024d30:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8024d34:	9341      	str	r3, [sp, #260]	; 0x104
 8024d36:	2300      	movs	r3, #0
 8024d38:	e7cd      	b.n	8024cd6 <__ssvfiscanf_r+0x1e2>
 8024d3a:	2302      	movs	r3, #2
 8024d3c:	e7cb      	b.n	8024cd6 <__ssvfiscanf_r+0x1e2>
 8024d3e:	9841      	ldr	r0, [sp, #260]	; 0x104
 8024d40:	06c3      	lsls	r3, r0, #27
 8024d42:	f53f aefd 	bmi.w	8024b40 <__ssvfiscanf_r+0x4c>
 8024d46:	9b00      	ldr	r3, [sp, #0]
 8024d48:	07c0      	lsls	r0, r0, #31
 8024d4a:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8024d4c:	f103 0104 	add.w	r1, r3, #4
 8024d50:	9100      	str	r1, [sp, #0]
 8024d52:	681b      	ldr	r3, [r3, #0]
 8024d54:	bf4c      	ite	mi
 8024d56:	801a      	strhmi	r2, [r3, #0]
 8024d58:	601a      	strpl	r2, [r3, #0]
 8024d5a:	e6f1      	b.n	8024b40 <__ssvfiscanf_r+0x4c>
 8024d5c:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8024d5e:	4621      	mov	r1, r4
 8024d60:	4630      	mov	r0, r6
 8024d62:	4798      	blx	r3
 8024d64:	2800      	cmp	r0, #0
 8024d66:	d0ba      	beq.n	8024cde <__ssvfiscanf_r+0x1ea>
 8024d68:	e79c      	b.n	8024ca4 <__ssvfiscanf_r+0x1b0>
 8024d6a:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8024d6c:	3201      	adds	r2, #1
 8024d6e:	9245      	str	r2, [sp, #276]	; 0x114
 8024d70:	6862      	ldr	r2, [r4, #4]
 8024d72:	3a01      	subs	r2, #1
 8024d74:	2a00      	cmp	r2, #0
 8024d76:	6062      	str	r2, [r4, #4]
 8024d78:	dd02      	ble.n	8024d80 <__ssvfiscanf_r+0x28c>
 8024d7a:	3301      	adds	r3, #1
 8024d7c:	6023      	str	r3, [r4, #0]
 8024d7e:	e7b1      	b.n	8024ce4 <__ssvfiscanf_r+0x1f0>
 8024d80:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8024d82:	4621      	mov	r1, r4
 8024d84:	4630      	mov	r0, r6
 8024d86:	4798      	blx	r3
 8024d88:	2800      	cmp	r0, #0
 8024d8a:	d0ab      	beq.n	8024ce4 <__ssvfiscanf_r+0x1f0>
 8024d8c:	e78a      	b.n	8024ca4 <__ssvfiscanf_r+0x1b0>
 8024d8e:	2b04      	cmp	r3, #4
 8024d90:	dc0e      	bgt.n	8024db0 <__ssvfiscanf_r+0x2bc>
 8024d92:	466b      	mov	r3, sp
 8024d94:	4622      	mov	r2, r4
 8024d96:	a941      	add	r1, sp, #260	; 0x104
 8024d98:	4630      	mov	r0, r6
 8024d9a:	f000 f87d 	bl	8024e98 <_scanf_i>
 8024d9e:	e7af      	b.n	8024d00 <__ssvfiscanf_r+0x20c>
 8024da0:	080266fb 	.word	0x080266fb
 8024da4:	08024a41 	.word	0x08024a41
 8024da8:	08024abb 	.word	0x08024abb
 8024dac:	080266db 	.word	0x080266db
 8024db0:	4b0b      	ldr	r3, [pc, #44]	; (8024de0 <__ssvfiscanf_r+0x2ec>)
 8024db2:	2b00      	cmp	r3, #0
 8024db4:	f43f aec4 	beq.w	8024b40 <__ssvfiscanf_r+0x4c>
 8024db8:	466b      	mov	r3, sp
 8024dba:	4622      	mov	r2, r4
 8024dbc:	a941      	add	r1, sp, #260	; 0x104
 8024dbe:	4630      	mov	r0, r6
 8024dc0:	f3af 8000 	nop.w
 8024dc4:	e79c      	b.n	8024d00 <__ssvfiscanf_r+0x20c>
 8024dc6:	89a3      	ldrh	r3, [r4, #12]
 8024dc8:	f013 0f40 	tst.w	r3, #64	; 0x40
 8024dcc:	bf18      	it	ne
 8024dce:	f04f 30ff 	movne.w	r0, #4294967295
 8024dd2:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 8024dd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8024dda:	9844      	ldr	r0, [sp, #272]	; 0x110
 8024ddc:	e7f9      	b.n	8024dd2 <__ssvfiscanf_r+0x2de>
 8024dde:	bf00      	nop
 8024de0:	00000000 	.word	0x00000000

08024de4 <_scanf_chars>:
 8024de4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8024de8:	4615      	mov	r5, r2
 8024dea:	688a      	ldr	r2, [r1, #8]
 8024dec:	4680      	mov	r8, r0
 8024dee:	460c      	mov	r4, r1
 8024df0:	b932      	cbnz	r2, 8024e00 <_scanf_chars+0x1c>
 8024df2:	698a      	ldr	r2, [r1, #24]
 8024df4:	2a00      	cmp	r2, #0
 8024df6:	bf0c      	ite	eq
 8024df8:	2201      	moveq	r2, #1
 8024dfa:	f04f 32ff 	movne.w	r2, #4294967295
 8024dfe:	608a      	str	r2, [r1, #8]
 8024e00:	6822      	ldr	r2, [r4, #0]
 8024e02:	2700      	movs	r7, #0
 8024e04:	f8df 908c 	ldr.w	r9, [pc, #140]	; 8024e94 <_scanf_chars+0xb0>
 8024e08:	06d1      	lsls	r1, r2, #27
 8024e0a:	bf5f      	itttt	pl
 8024e0c:	681a      	ldrpl	r2, [r3, #0]
 8024e0e:	1d11      	addpl	r1, r2, #4
 8024e10:	6019      	strpl	r1, [r3, #0]
 8024e12:	6816      	ldrpl	r6, [r2, #0]
 8024e14:	69a0      	ldr	r0, [r4, #24]
 8024e16:	b188      	cbz	r0, 8024e3c <_scanf_chars+0x58>
 8024e18:	2801      	cmp	r0, #1
 8024e1a:	d107      	bne.n	8024e2c <_scanf_chars+0x48>
 8024e1c:	682a      	ldr	r2, [r5, #0]
 8024e1e:	7811      	ldrb	r1, [r2, #0]
 8024e20:	6962      	ldr	r2, [r4, #20]
 8024e22:	5c52      	ldrb	r2, [r2, r1]
 8024e24:	b952      	cbnz	r2, 8024e3c <_scanf_chars+0x58>
 8024e26:	2f00      	cmp	r7, #0
 8024e28:	d031      	beq.n	8024e8e <_scanf_chars+0xaa>
 8024e2a:	e022      	b.n	8024e72 <_scanf_chars+0x8e>
 8024e2c:	2802      	cmp	r0, #2
 8024e2e:	d120      	bne.n	8024e72 <_scanf_chars+0x8e>
 8024e30:	682b      	ldr	r3, [r5, #0]
 8024e32:	781b      	ldrb	r3, [r3, #0]
 8024e34:	f819 3003 	ldrb.w	r3, [r9, r3]
 8024e38:	071b      	lsls	r3, r3, #28
 8024e3a:	d41a      	bmi.n	8024e72 <_scanf_chars+0x8e>
 8024e3c:	6823      	ldr	r3, [r4, #0]
 8024e3e:	3701      	adds	r7, #1
 8024e40:	06da      	lsls	r2, r3, #27
 8024e42:	bf5e      	ittt	pl
 8024e44:	682b      	ldrpl	r3, [r5, #0]
 8024e46:	781b      	ldrbpl	r3, [r3, #0]
 8024e48:	f806 3b01 	strbpl.w	r3, [r6], #1
 8024e4c:	682a      	ldr	r2, [r5, #0]
 8024e4e:	686b      	ldr	r3, [r5, #4]
 8024e50:	3201      	adds	r2, #1
 8024e52:	3b01      	subs	r3, #1
 8024e54:	602a      	str	r2, [r5, #0]
 8024e56:	68a2      	ldr	r2, [r4, #8]
 8024e58:	606b      	str	r3, [r5, #4]
 8024e5a:	3a01      	subs	r2, #1
 8024e5c:	60a2      	str	r2, [r4, #8]
 8024e5e:	b142      	cbz	r2, 8024e72 <_scanf_chars+0x8e>
 8024e60:	2b00      	cmp	r3, #0
 8024e62:	dcd7      	bgt.n	8024e14 <_scanf_chars+0x30>
 8024e64:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8024e68:	4629      	mov	r1, r5
 8024e6a:	4640      	mov	r0, r8
 8024e6c:	4798      	blx	r3
 8024e6e:	2800      	cmp	r0, #0
 8024e70:	d0d0      	beq.n	8024e14 <_scanf_chars+0x30>
 8024e72:	6823      	ldr	r3, [r4, #0]
 8024e74:	f013 0310 	ands.w	r3, r3, #16
 8024e78:	d105      	bne.n	8024e86 <_scanf_chars+0xa2>
 8024e7a:	68e2      	ldr	r2, [r4, #12]
 8024e7c:	3201      	adds	r2, #1
 8024e7e:	60e2      	str	r2, [r4, #12]
 8024e80:	69a2      	ldr	r2, [r4, #24]
 8024e82:	b102      	cbz	r2, 8024e86 <_scanf_chars+0xa2>
 8024e84:	7033      	strb	r3, [r6, #0]
 8024e86:	6923      	ldr	r3, [r4, #16]
 8024e88:	2000      	movs	r0, #0
 8024e8a:	443b      	add	r3, r7
 8024e8c:	6123      	str	r3, [r4, #16]
 8024e8e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8024e92:	bf00      	nop
 8024e94:	080266fb 	.word	0x080266fb

08024e98 <_scanf_i>:
 8024e98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024e9c:	4698      	mov	r8, r3
 8024e9e:	b087      	sub	sp, #28
 8024ea0:	4b72      	ldr	r3, [pc, #456]	; (802506c <_scanf_i+0x1d4>)
 8024ea2:	460c      	mov	r4, r1
 8024ea4:	4682      	mov	sl, r0
 8024ea6:	4616      	mov	r6, r2
 8024ea8:	4627      	mov	r7, r4
 8024eaa:	f04f 0b00 	mov.w	fp, #0
 8024eae:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8024eb2:	ab03      	add	r3, sp, #12
 8024eb4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8024eb8:	4b6d      	ldr	r3, [pc, #436]	; (8025070 <_scanf_i+0x1d8>)
 8024eba:	69a1      	ldr	r1, [r4, #24]
 8024ebc:	4a6d      	ldr	r2, [pc, #436]	; (8025074 <_scanf_i+0x1dc>)
 8024ebe:	2903      	cmp	r1, #3
 8024ec0:	bf18      	it	ne
 8024ec2:	461a      	movne	r2, r3
 8024ec4:	68a3      	ldr	r3, [r4, #8]
 8024ec6:	9201      	str	r2, [sp, #4]
 8024ec8:	1e5a      	subs	r2, r3, #1
 8024eca:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8024ece:	bf89      	itett	hi
 8024ed0:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8024ed4:	f04f 0900 	movls.w	r9, #0
 8024ed8:	eb03 0905 	addhi.w	r9, r3, r5
 8024edc:	f240 135d 	movwhi	r3, #349	; 0x15d
 8024ee0:	bf88      	it	hi
 8024ee2:	60a3      	strhi	r3, [r4, #8]
 8024ee4:	f857 3b1c 	ldr.w	r3, [r7], #28
 8024ee8:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8024eec:	463d      	mov	r5, r7
 8024eee:	6023      	str	r3, [r4, #0]
 8024ef0:	6831      	ldr	r1, [r6, #0]
 8024ef2:	ab03      	add	r3, sp, #12
 8024ef4:	2202      	movs	r2, #2
 8024ef6:	7809      	ldrb	r1, [r1, #0]
 8024ef8:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8024efc:	f000 f9ec 	bl	80252d8 <memchr>
 8024f00:	b328      	cbz	r0, 8024f4e <_scanf_i+0xb6>
 8024f02:	f1bb 0f01 	cmp.w	fp, #1
 8024f06:	d159      	bne.n	8024fbc <_scanf_i+0x124>
 8024f08:	6862      	ldr	r2, [r4, #4]
 8024f0a:	b92a      	cbnz	r2, 8024f18 <_scanf_i+0x80>
 8024f0c:	6822      	ldr	r2, [r4, #0]
 8024f0e:	2308      	movs	r3, #8
 8024f10:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8024f14:	6063      	str	r3, [r4, #4]
 8024f16:	6022      	str	r2, [r4, #0]
 8024f18:	6822      	ldr	r2, [r4, #0]
 8024f1a:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8024f1e:	6022      	str	r2, [r4, #0]
 8024f20:	68a2      	ldr	r2, [r4, #8]
 8024f22:	1e51      	subs	r1, r2, #1
 8024f24:	60a1      	str	r1, [r4, #8]
 8024f26:	b192      	cbz	r2, 8024f4e <_scanf_i+0xb6>
 8024f28:	6832      	ldr	r2, [r6, #0]
 8024f2a:	1c51      	adds	r1, r2, #1
 8024f2c:	6031      	str	r1, [r6, #0]
 8024f2e:	7812      	ldrb	r2, [r2, #0]
 8024f30:	f805 2b01 	strb.w	r2, [r5], #1
 8024f34:	6872      	ldr	r2, [r6, #4]
 8024f36:	3a01      	subs	r2, #1
 8024f38:	2a00      	cmp	r2, #0
 8024f3a:	6072      	str	r2, [r6, #4]
 8024f3c:	dc07      	bgt.n	8024f4e <_scanf_i+0xb6>
 8024f3e:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 8024f42:	4631      	mov	r1, r6
 8024f44:	4650      	mov	r0, sl
 8024f46:	4790      	blx	r2
 8024f48:	2800      	cmp	r0, #0
 8024f4a:	f040 8085 	bne.w	8025058 <_scanf_i+0x1c0>
 8024f4e:	f10b 0b01 	add.w	fp, fp, #1
 8024f52:	f1bb 0f03 	cmp.w	fp, #3
 8024f56:	d1cb      	bne.n	8024ef0 <_scanf_i+0x58>
 8024f58:	6863      	ldr	r3, [r4, #4]
 8024f5a:	b90b      	cbnz	r3, 8024f60 <_scanf_i+0xc8>
 8024f5c:	230a      	movs	r3, #10
 8024f5e:	6063      	str	r3, [r4, #4]
 8024f60:	6863      	ldr	r3, [r4, #4]
 8024f62:	f04f 0b00 	mov.w	fp, #0
 8024f66:	4944      	ldr	r1, [pc, #272]	; (8025078 <_scanf_i+0x1e0>)
 8024f68:	6960      	ldr	r0, [r4, #20]
 8024f6a:	1ac9      	subs	r1, r1, r3
 8024f6c:	f000 f944 	bl	80251f8 <__sccl>
 8024f70:	68a3      	ldr	r3, [r4, #8]
 8024f72:	6822      	ldr	r2, [r4, #0]
 8024f74:	2b00      	cmp	r3, #0
 8024f76:	d03d      	beq.n	8024ff4 <_scanf_i+0x15c>
 8024f78:	6831      	ldr	r1, [r6, #0]
 8024f7a:	6960      	ldr	r0, [r4, #20]
 8024f7c:	f891 c000 	ldrb.w	ip, [r1]
 8024f80:	f810 000c 	ldrb.w	r0, [r0, ip]
 8024f84:	2800      	cmp	r0, #0
 8024f86:	d035      	beq.n	8024ff4 <_scanf_i+0x15c>
 8024f88:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8024f8c:	d124      	bne.n	8024fd8 <_scanf_i+0x140>
 8024f8e:	0510      	lsls	r0, r2, #20
 8024f90:	d522      	bpl.n	8024fd8 <_scanf_i+0x140>
 8024f92:	f10b 0b01 	add.w	fp, fp, #1
 8024f96:	f1b9 0f00 	cmp.w	r9, #0
 8024f9a:	d003      	beq.n	8024fa4 <_scanf_i+0x10c>
 8024f9c:	3301      	adds	r3, #1
 8024f9e:	f109 39ff 	add.w	r9, r9, #4294967295
 8024fa2:	60a3      	str	r3, [r4, #8]
 8024fa4:	6873      	ldr	r3, [r6, #4]
 8024fa6:	3b01      	subs	r3, #1
 8024fa8:	2b00      	cmp	r3, #0
 8024faa:	6073      	str	r3, [r6, #4]
 8024fac:	dd1b      	ble.n	8024fe6 <_scanf_i+0x14e>
 8024fae:	6833      	ldr	r3, [r6, #0]
 8024fb0:	3301      	adds	r3, #1
 8024fb2:	6033      	str	r3, [r6, #0]
 8024fb4:	68a3      	ldr	r3, [r4, #8]
 8024fb6:	3b01      	subs	r3, #1
 8024fb8:	60a3      	str	r3, [r4, #8]
 8024fba:	e7d9      	b.n	8024f70 <_scanf_i+0xd8>
 8024fbc:	f1bb 0f02 	cmp.w	fp, #2
 8024fc0:	d1ae      	bne.n	8024f20 <_scanf_i+0x88>
 8024fc2:	6822      	ldr	r2, [r4, #0]
 8024fc4:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8024fc8:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8024fcc:	d1bf      	bne.n	8024f4e <_scanf_i+0xb6>
 8024fce:	2310      	movs	r3, #16
 8024fd0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8024fd4:	6063      	str	r3, [r4, #4]
 8024fd6:	e7a2      	b.n	8024f1e <_scanf_i+0x86>
 8024fd8:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8024fdc:	6022      	str	r2, [r4, #0]
 8024fde:	780b      	ldrb	r3, [r1, #0]
 8024fe0:	f805 3b01 	strb.w	r3, [r5], #1
 8024fe4:	e7de      	b.n	8024fa4 <_scanf_i+0x10c>
 8024fe6:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8024fea:	4631      	mov	r1, r6
 8024fec:	4650      	mov	r0, sl
 8024fee:	4798      	blx	r3
 8024ff0:	2800      	cmp	r0, #0
 8024ff2:	d0df      	beq.n	8024fb4 <_scanf_i+0x11c>
 8024ff4:	6823      	ldr	r3, [r4, #0]
 8024ff6:	05d9      	lsls	r1, r3, #23
 8024ff8:	d50d      	bpl.n	8025016 <_scanf_i+0x17e>
 8024ffa:	42bd      	cmp	r5, r7
 8024ffc:	d909      	bls.n	8025012 <_scanf_i+0x17a>
 8024ffe:	f105 39ff 	add.w	r9, r5, #4294967295
 8025002:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8025006:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 802500a:	4632      	mov	r2, r6
 802500c:	464d      	mov	r5, r9
 802500e:	4650      	mov	r0, sl
 8025010:	4798      	blx	r3
 8025012:	42bd      	cmp	r5, r7
 8025014:	d028      	beq.n	8025068 <_scanf_i+0x1d0>
 8025016:	6822      	ldr	r2, [r4, #0]
 8025018:	f012 0210 	ands.w	r2, r2, #16
 802501c:	d113      	bne.n	8025046 <_scanf_i+0x1ae>
 802501e:	702a      	strb	r2, [r5, #0]
 8025020:	4639      	mov	r1, r7
 8025022:	6863      	ldr	r3, [r4, #4]
 8025024:	4650      	mov	r0, sl
 8025026:	9e01      	ldr	r6, [sp, #4]
 8025028:	47b0      	blx	r6
 802502a:	f8d8 3000 	ldr.w	r3, [r8]
 802502e:	6821      	ldr	r1, [r4, #0]
 8025030:	1d1a      	adds	r2, r3, #4
 8025032:	f011 0f20 	tst.w	r1, #32
 8025036:	f8c8 2000 	str.w	r2, [r8]
 802503a:	681b      	ldr	r3, [r3, #0]
 802503c:	d00f      	beq.n	802505e <_scanf_i+0x1c6>
 802503e:	6018      	str	r0, [r3, #0]
 8025040:	68e3      	ldr	r3, [r4, #12]
 8025042:	3301      	adds	r3, #1
 8025044:	60e3      	str	r3, [r4, #12]
 8025046:	1bed      	subs	r5, r5, r7
 8025048:	6923      	ldr	r3, [r4, #16]
 802504a:	2000      	movs	r0, #0
 802504c:	445d      	add	r5, fp
 802504e:	442b      	add	r3, r5
 8025050:	6123      	str	r3, [r4, #16]
 8025052:	b007      	add	sp, #28
 8025054:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8025058:	f04f 0b00 	mov.w	fp, #0
 802505c:	e7ca      	b.n	8024ff4 <_scanf_i+0x15c>
 802505e:	07ca      	lsls	r2, r1, #31
 8025060:	bf4c      	ite	mi
 8025062:	8018      	strhmi	r0, [r3, #0]
 8025064:	6018      	strpl	r0, [r3, #0]
 8025066:	e7eb      	b.n	8025040 <_scanf_i+0x1a8>
 8025068:	2001      	movs	r0, #1
 802506a:	e7f2      	b.n	8025052 <_scanf_i+0x1ba>
 802506c:	08025eec 	.word	0x08025eec
 8025070:	08025541 	.word	0x08025541
 8025074:	08025459 	.word	0x08025459
 8025078:	080266ef 	.word	0x080266ef

0802507c <__sflush_r>:
 802507c:	898a      	ldrh	r2, [r1, #12]
 802507e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8025082:	4605      	mov	r5, r0
 8025084:	0710      	lsls	r0, r2, #28
 8025086:	460c      	mov	r4, r1
 8025088:	d458      	bmi.n	802513c <__sflush_r+0xc0>
 802508a:	684b      	ldr	r3, [r1, #4]
 802508c:	2b00      	cmp	r3, #0
 802508e:	dc05      	bgt.n	802509c <__sflush_r+0x20>
 8025090:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8025092:	2b00      	cmp	r3, #0
 8025094:	dc02      	bgt.n	802509c <__sflush_r+0x20>
 8025096:	2000      	movs	r0, #0
 8025098:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802509c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 802509e:	2e00      	cmp	r6, #0
 80250a0:	d0f9      	beq.n	8025096 <__sflush_r+0x1a>
 80250a2:	2300      	movs	r3, #0
 80250a4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80250a8:	682f      	ldr	r7, [r5, #0]
 80250aa:	6a21      	ldr	r1, [r4, #32]
 80250ac:	602b      	str	r3, [r5, #0]
 80250ae:	d032      	beq.n	8025116 <__sflush_r+0x9a>
 80250b0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80250b2:	89a3      	ldrh	r3, [r4, #12]
 80250b4:	075a      	lsls	r2, r3, #29
 80250b6:	d505      	bpl.n	80250c4 <__sflush_r+0x48>
 80250b8:	6863      	ldr	r3, [r4, #4]
 80250ba:	1ac0      	subs	r0, r0, r3
 80250bc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80250be:	b10b      	cbz	r3, 80250c4 <__sflush_r+0x48>
 80250c0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80250c2:	1ac0      	subs	r0, r0, r3
 80250c4:	2300      	movs	r3, #0
 80250c6:	4602      	mov	r2, r0
 80250c8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80250ca:	4628      	mov	r0, r5
 80250cc:	6a21      	ldr	r1, [r4, #32]
 80250ce:	47b0      	blx	r6
 80250d0:	1c43      	adds	r3, r0, #1
 80250d2:	89a3      	ldrh	r3, [r4, #12]
 80250d4:	d106      	bne.n	80250e4 <__sflush_r+0x68>
 80250d6:	6829      	ldr	r1, [r5, #0]
 80250d8:	291d      	cmp	r1, #29
 80250da:	d82b      	bhi.n	8025134 <__sflush_r+0xb8>
 80250dc:	4a28      	ldr	r2, [pc, #160]	; (8025180 <__sflush_r+0x104>)
 80250de:	410a      	asrs	r2, r1
 80250e0:	07d6      	lsls	r6, r2, #31
 80250e2:	d427      	bmi.n	8025134 <__sflush_r+0xb8>
 80250e4:	2200      	movs	r2, #0
 80250e6:	04d9      	lsls	r1, r3, #19
 80250e8:	6062      	str	r2, [r4, #4]
 80250ea:	6922      	ldr	r2, [r4, #16]
 80250ec:	6022      	str	r2, [r4, #0]
 80250ee:	d504      	bpl.n	80250fa <__sflush_r+0x7e>
 80250f0:	1c42      	adds	r2, r0, #1
 80250f2:	d101      	bne.n	80250f8 <__sflush_r+0x7c>
 80250f4:	682b      	ldr	r3, [r5, #0]
 80250f6:	b903      	cbnz	r3, 80250fa <__sflush_r+0x7e>
 80250f8:	6560      	str	r0, [r4, #84]	; 0x54
 80250fa:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80250fc:	602f      	str	r7, [r5, #0]
 80250fe:	2900      	cmp	r1, #0
 8025100:	d0c9      	beq.n	8025096 <__sflush_r+0x1a>
 8025102:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8025106:	4299      	cmp	r1, r3
 8025108:	d002      	beq.n	8025110 <__sflush_r+0x94>
 802510a:	4628      	mov	r0, r5
 802510c:	f7ff fc4c 	bl	80249a8 <_free_r>
 8025110:	2000      	movs	r0, #0
 8025112:	6360      	str	r0, [r4, #52]	; 0x34
 8025114:	e7c0      	b.n	8025098 <__sflush_r+0x1c>
 8025116:	2301      	movs	r3, #1
 8025118:	4628      	mov	r0, r5
 802511a:	47b0      	blx	r6
 802511c:	1c41      	adds	r1, r0, #1
 802511e:	d1c8      	bne.n	80250b2 <__sflush_r+0x36>
 8025120:	682b      	ldr	r3, [r5, #0]
 8025122:	2b00      	cmp	r3, #0
 8025124:	d0c5      	beq.n	80250b2 <__sflush_r+0x36>
 8025126:	2b1d      	cmp	r3, #29
 8025128:	d001      	beq.n	802512e <__sflush_r+0xb2>
 802512a:	2b16      	cmp	r3, #22
 802512c:	d101      	bne.n	8025132 <__sflush_r+0xb6>
 802512e:	602f      	str	r7, [r5, #0]
 8025130:	e7b1      	b.n	8025096 <__sflush_r+0x1a>
 8025132:	89a3      	ldrh	r3, [r4, #12]
 8025134:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8025138:	81a3      	strh	r3, [r4, #12]
 802513a:	e7ad      	b.n	8025098 <__sflush_r+0x1c>
 802513c:	690f      	ldr	r7, [r1, #16]
 802513e:	2f00      	cmp	r7, #0
 8025140:	d0a9      	beq.n	8025096 <__sflush_r+0x1a>
 8025142:	0793      	lsls	r3, r2, #30
 8025144:	680e      	ldr	r6, [r1, #0]
 8025146:	600f      	str	r7, [r1, #0]
 8025148:	bf0c      	ite	eq
 802514a:	694b      	ldreq	r3, [r1, #20]
 802514c:	2300      	movne	r3, #0
 802514e:	eba6 0807 	sub.w	r8, r6, r7
 8025152:	608b      	str	r3, [r1, #8]
 8025154:	f1b8 0f00 	cmp.w	r8, #0
 8025158:	dd9d      	ble.n	8025096 <__sflush_r+0x1a>
 802515a:	4643      	mov	r3, r8
 802515c:	463a      	mov	r2, r7
 802515e:	6a21      	ldr	r1, [r4, #32]
 8025160:	4628      	mov	r0, r5
 8025162:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8025164:	47b0      	blx	r6
 8025166:	2800      	cmp	r0, #0
 8025168:	dc06      	bgt.n	8025178 <__sflush_r+0xfc>
 802516a:	89a3      	ldrh	r3, [r4, #12]
 802516c:	f04f 30ff 	mov.w	r0, #4294967295
 8025170:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8025174:	81a3      	strh	r3, [r4, #12]
 8025176:	e78f      	b.n	8025098 <__sflush_r+0x1c>
 8025178:	4407      	add	r7, r0
 802517a:	eba8 0800 	sub.w	r8, r8, r0
 802517e:	e7e9      	b.n	8025154 <__sflush_r+0xd8>
 8025180:	dfbffffe 	.word	0xdfbffffe

08025184 <_fflush_r>:
 8025184:	b538      	push	{r3, r4, r5, lr}
 8025186:	690b      	ldr	r3, [r1, #16]
 8025188:	4605      	mov	r5, r0
 802518a:	460c      	mov	r4, r1
 802518c:	b913      	cbnz	r3, 8025194 <_fflush_r+0x10>
 802518e:	2500      	movs	r5, #0
 8025190:	4628      	mov	r0, r5
 8025192:	bd38      	pop	{r3, r4, r5, pc}
 8025194:	b118      	cbz	r0, 802519e <_fflush_r+0x1a>
 8025196:	6a03      	ldr	r3, [r0, #32]
 8025198:	b90b      	cbnz	r3, 802519e <_fflush_r+0x1a>
 802519a:	f7ff fa49 	bl	8024630 <__sinit>
 802519e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80251a2:	2b00      	cmp	r3, #0
 80251a4:	d0f3      	beq.n	802518e <_fflush_r+0xa>
 80251a6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80251a8:	07d0      	lsls	r0, r2, #31
 80251aa:	d404      	bmi.n	80251b6 <_fflush_r+0x32>
 80251ac:	0599      	lsls	r1, r3, #22
 80251ae:	d402      	bmi.n	80251b6 <_fflush_r+0x32>
 80251b0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80251b2:	f7ff fbcc 	bl	802494e <__retarget_lock_acquire_recursive>
 80251b6:	4628      	mov	r0, r5
 80251b8:	4621      	mov	r1, r4
 80251ba:	f7ff ff5f 	bl	802507c <__sflush_r>
 80251be:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80251c0:	4605      	mov	r5, r0
 80251c2:	07da      	lsls	r2, r3, #31
 80251c4:	d4e4      	bmi.n	8025190 <_fflush_r+0xc>
 80251c6:	89a3      	ldrh	r3, [r4, #12]
 80251c8:	059b      	lsls	r3, r3, #22
 80251ca:	d4e1      	bmi.n	8025190 <_fflush_r+0xc>
 80251cc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80251ce:	f7ff fbbf 	bl	8024950 <__retarget_lock_release_recursive>
 80251d2:	e7dd      	b.n	8025190 <_fflush_r+0xc>

080251d4 <fiprintf>:
 80251d4:	b40e      	push	{r1, r2, r3}
 80251d6:	b503      	push	{r0, r1, lr}
 80251d8:	ab03      	add	r3, sp, #12
 80251da:	4601      	mov	r1, r0
 80251dc:	4805      	ldr	r0, [pc, #20]	; (80251f4 <fiprintf+0x20>)
 80251de:	f853 2b04 	ldr.w	r2, [r3], #4
 80251e2:	6800      	ldr	r0, [r0, #0]
 80251e4:	9301      	str	r3, [sp, #4]
 80251e6:	f000 f9d7 	bl	8025598 <_vfiprintf_r>
 80251ea:	b002      	add	sp, #8
 80251ec:	f85d eb04 	ldr.w	lr, [sp], #4
 80251f0:	b003      	add	sp, #12
 80251f2:	4770      	bx	lr
 80251f4:	20000108 	.word	0x20000108

080251f8 <__sccl>:
 80251f8:	b570      	push	{r4, r5, r6, lr}
 80251fa:	780b      	ldrb	r3, [r1, #0]
 80251fc:	4604      	mov	r4, r0
 80251fe:	3801      	subs	r0, #1
 8025200:	2b5e      	cmp	r3, #94	; 0x5e
 8025202:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 8025206:	bf13      	iteet	ne
 8025208:	1c4a      	addne	r2, r1, #1
 802520a:	1c8a      	addeq	r2, r1, #2
 802520c:	784b      	ldrbeq	r3, [r1, #1]
 802520e:	2100      	movne	r1, #0
 8025210:	bf08      	it	eq
 8025212:	2101      	moveq	r1, #1
 8025214:	f800 1f01 	strb.w	r1, [r0, #1]!
 8025218:	42a8      	cmp	r0, r5
 802521a:	d1fb      	bne.n	8025214 <__sccl+0x1c>
 802521c:	b90b      	cbnz	r3, 8025222 <__sccl+0x2a>
 802521e:	1e50      	subs	r0, r2, #1
 8025220:	bd70      	pop	{r4, r5, r6, pc}
 8025222:	f081 0101 	eor.w	r1, r1, #1
 8025226:	4610      	mov	r0, r2
 8025228:	54e1      	strb	r1, [r4, r3]
 802522a:	4602      	mov	r2, r0
 802522c:	f812 5b01 	ldrb.w	r5, [r2], #1
 8025230:	2d2d      	cmp	r5, #45	; 0x2d
 8025232:	d005      	beq.n	8025240 <__sccl+0x48>
 8025234:	2d5d      	cmp	r5, #93	; 0x5d
 8025236:	d016      	beq.n	8025266 <__sccl+0x6e>
 8025238:	2d00      	cmp	r5, #0
 802523a:	d0f1      	beq.n	8025220 <__sccl+0x28>
 802523c:	462b      	mov	r3, r5
 802523e:	e7f2      	b.n	8025226 <__sccl+0x2e>
 8025240:	7846      	ldrb	r6, [r0, #1]
 8025242:	2e5d      	cmp	r6, #93	; 0x5d
 8025244:	d0fa      	beq.n	802523c <__sccl+0x44>
 8025246:	42b3      	cmp	r3, r6
 8025248:	dcf8      	bgt.n	802523c <__sccl+0x44>
 802524a:	3002      	adds	r0, #2
 802524c:	461a      	mov	r2, r3
 802524e:	3201      	adds	r2, #1
 8025250:	4296      	cmp	r6, r2
 8025252:	54a1      	strb	r1, [r4, r2]
 8025254:	dcfb      	bgt.n	802524e <__sccl+0x56>
 8025256:	1af2      	subs	r2, r6, r3
 8025258:	1c5d      	adds	r5, r3, #1
 802525a:	3a01      	subs	r2, #1
 802525c:	42b3      	cmp	r3, r6
 802525e:	bfa8      	it	ge
 8025260:	2200      	movge	r2, #0
 8025262:	18ab      	adds	r3, r5, r2
 8025264:	e7e1      	b.n	802522a <__sccl+0x32>
 8025266:	4610      	mov	r0, r2
 8025268:	e7da      	b.n	8025220 <__sccl+0x28>

0802526a <__submore>:
 802526a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802526e:	460c      	mov	r4, r1
 8025270:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8025272:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8025276:	4299      	cmp	r1, r3
 8025278:	d11a      	bne.n	80252b0 <__submore+0x46>
 802527a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 802527e:	f7ff f881 	bl	8024384 <_malloc_r>
 8025282:	b918      	cbnz	r0, 802528c <__submore+0x22>
 8025284:	f04f 30ff 	mov.w	r0, #4294967295
 8025288:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802528c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8025290:	6360      	str	r0, [r4, #52]	; 0x34
 8025292:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8025296:	63a3      	str	r3, [r4, #56]	; 0x38
 8025298:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 802529c:	7083      	strb	r3, [r0, #2]
 802529e:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 80252a2:	7043      	strb	r3, [r0, #1]
 80252a4:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80252a8:	7003      	strb	r3, [r0, #0]
 80252aa:	6020      	str	r0, [r4, #0]
 80252ac:	2000      	movs	r0, #0
 80252ae:	e7eb      	b.n	8025288 <__submore+0x1e>
 80252b0:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 80252b2:	0077      	lsls	r7, r6, #1
 80252b4:	463a      	mov	r2, r7
 80252b6:	f000 f81d 	bl	80252f4 <_realloc_r>
 80252ba:	4605      	mov	r5, r0
 80252bc:	2800      	cmp	r0, #0
 80252be:	d0e1      	beq.n	8025284 <__submore+0x1a>
 80252c0:	eb00 0806 	add.w	r8, r0, r6
 80252c4:	4601      	mov	r1, r0
 80252c6:	4632      	mov	r2, r6
 80252c8:	4640      	mov	r0, r8
 80252ca:	f7ff fb42 	bl	8024952 <memcpy>
 80252ce:	f8c4 8000 	str.w	r8, [r4]
 80252d2:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 80252d6:	e7e9      	b.n	80252ac <__submore+0x42>

080252d8 <memchr>:
 80252d8:	b2c9      	uxtb	r1, r1
 80252da:	4402      	add	r2, r0
 80252dc:	b510      	push	{r4, lr}
 80252de:	4290      	cmp	r0, r2
 80252e0:	4603      	mov	r3, r0
 80252e2:	d101      	bne.n	80252e8 <memchr+0x10>
 80252e4:	2300      	movs	r3, #0
 80252e6:	e003      	b.n	80252f0 <memchr+0x18>
 80252e8:	781c      	ldrb	r4, [r3, #0]
 80252ea:	3001      	adds	r0, #1
 80252ec:	428c      	cmp	r4, r1
 80252ee:	d1f6      	bne.n	80252de <memchr+0x6>
 80252f0:	4618      	mov	r0, r3
 80252f2:	bd10      	pop	{r4, pc}

080252f4 <_realloc_r>:
 80252f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80252f8:	4680      	mov	r8, r0
 80252fa:	4614      	mov	r4, r2
 80252fc:	460e      	mov	r6, r1
 80252fe:	b921      	cbnz	r1, 802530a <_realloc_r+0x16>
 8025300:	4611      	mov	r1, r2
 8025302:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8025306:	f7ff b83d 	b.w	8024384 <_malloc_r>
 802530a:	b92a      	cbnz	r2, 8025318 <_realloc_r+0x24>
 802530c:	4625      	mov	r5, r4
 802530e:	f7ff fb4b 	bl	80249a8 <_free_r>
 8025312:	4628      	mov	r0, r5
 8025314:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8025318:	f000 fc80 	bl	8025c1c <_malloc_usable_size_r>
 802531c:	4284      	cmp	r4, r0
 802531e:	4607      	mov	r7, r0
 8025320:	d802      	bhi.n	8025328 <_realloc_r+0x34>
 8025322:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8025326:	d812      	bhi.n	802534e <_realloc_r+0x5a>
 8025328:	4621      	mov	r1, r4
 802532a:	4640      	mov	r0, r8
 802532c:	f7ff f82a 	bl	8024384 <_malloc_r>
 8025330:	4605      	mov	r5, r0
 8025332:	2800      	cmp	r0, #0
 8025334:	d0ed      	beq.n	8025312 <_realloc_r+0x1e>
 8025336:	42bc      	cmp	r4, r7
 8025338:	4622      	mov	r2, r4
 802533a:	4631      	mov	r1, r6
 802533c:	bf28      	it	cs
 802533e:	463a      	movcs	r2, r7
 8025340:	f7ff fb07 	bl	8024952 <memcpy>
 8025344:	4631      	mov	r1, r6
 8025346:	4640      	mov	r0, r8
 8025348:	f7ff fb2e 	bl	80249a8 <_free_r>
 802534c:	e7e1      	b.n	8025312 <_realloc_r+0x1e>
 802534e:	4635      	mov	r5, r6
 8025350:	e7df      	b.n	8025312 <_realloc_r+0x1e>
	...

08025354 <_strtol_l.constprop.0>:
 8025354:	2b01      	cmp	r3, #1
 8025356:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802535a:	d001      	beq.n	8025360 <_strtol_l.constprop.0+0xc>
 802535c:	2b24      	cmp	r3, #36	; 0x24
 802535e:	d906      	bls.n	802536e <_strtol_l.constprop.0+0x1a>
 8025360:	f7ff faca 	bl	80248f8 <__errno>
 8025364:	2316      	movs	r3, #22
 8025366:	6003      	str	r3, [r0, #0]
 8025368:	2000      	movs	r0, #0
 802536a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802536e:	460d      	mov	r5, r1
 8025370:	f8df c0e0 	ldr.w	ip, [pc, #224]	; 8025454 <_strtol_l.constprop.0+0x100>
 8025374:	462e      	mov	r6, r5
 8025376:	f815 4b01 	ldrb.w	r4, [r5], #1
 802537a:	f81c 7004 	ldrb.w	r7, [ip, r4]
 802537e:	f017 0708 	ands.w	r7, r7, #8
 8025382:	d1f7      	bne.n	8025374 <_strtol_l.constprop.0+0x20>
 8025384:	2c2d      	cmp	r4, #45	; 0x2d
 8025386:	d132      	bne.n	80253ee <_strtol_l.constprop.0+0x9a>
 8025388:	782c      	ldrb	r4, [r5, #0]
 802538a:	2701      	movs	r7, #1
 802538c:	1cb5      	adds	r5, r6, #2
 802538e:	2b00      	cmp	r3, #0
 8025390:	d05b      	beq.n	802544a <_strtol_l.constprop.0+0xf6>
 8025392:	2b10      	cmp	r3, #16
 8025394:	d109      	bne.n	80253aa <_strtol_l.constprop.0+0x56>
 8025396:	2c30      	cmp	r4, #48	; 0x30
 8025398:	d107      	bne.n	80253aa <_strtol_l.constprop.0+0x56>
 802539a:	782c      	ldrb	r4, [r5, #0]
 802539c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80253a0:	2c58      	cmp	r4, #88	; 0x58
 80253a2:	d14d      	bne.n	8025440 <_strtol_l.constprop.0+0xec>
 80253a4:	786c      	ldrb	r4, [r5, #1]
 80253a6:	2310      	movs	r3, #16
 80253a8:	3502      	adds	r5, #2
 80253aa:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 80253ae:	f04f 0e00 	mov.w	lr, #0
 80253b2:	f108 38ff 	add.w	r8, r8, #4294967295
 80253b6:	4676      	mov	r6, lr
 80253b8:	fbb8 f9f3 	udiv	r9, r8, r3
 80253bc:	fb03 8a19 	mls	sl, r3, r9, r8
 80253c0:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 80253c4:	f1bc 0f09 	cmp.w	ip, #9
 80253c8:	d816      	bhi.n	80253f8 <_strtol_l.constprop.0+0xa4>
 80253ca:	4664      	mov	r4, ip
 80253cc:	42a3      	cmp	r3, r4
 80253ce:	dd24      	ble.n	802541a <_strtol_l.constprop.0+0xc6>
 80253d0:	f1be 3fff 	cmp.w	lr, #4294967295
 80253d4:	d008      	beq.n	80253e8 <_strtol_l.constprop.0+0x94>
 80253d6:	45b1      	cmp	r9, r6
 80253d8:	d31c      	bcc.n	8025414 <_strtol_l.constprop.0+0xc0>
 80253da:	d101      	bne.n	80253e0 <_strtol_l.constprop.0+0x8c>
 80253dc:	45a2      	cmp	sl, r4
 80253de:	db19      	blt.n	8025414 <_strtol_l.constprop.0+0xc0>
 80253e0:	fb06 4603 	mla	r6, r6, r3, r4
 80253e4:	f04f 0e01 	mov.w	lr, #1
 80253e8:	f815 4b01 	ldrb.w	r4, [r5], #1
 80253ec:	e7e8      	b.n	80253c0 <_strtol_l.constprop.0+0x6c>
 80253ee:	2c2b      	cmp	r4, #43	; 0x2b
 80253f0:	bf04      	itt	eq
 80253f2:	782c      	ldrbeq	r4, [r5, #0]
 80253f4:	1cb5      	addeq	r5, r6, #2
 80253f6:	e7ca      	b.n	802538e <_strtol_l.constprop.0+0x3a>
 80253f8:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 80253fc:	f1bc 0f19 	cmp.w	ip, #25
 8025400:	d801      	bhi.n	8025406 <_strtol_l.constprop.0+0xb2>
 8025402:	3c37      	subs	r4, #55	; 0x37
 8025404:	e7e2      	b.n	80253cc <_strtol_l.constprop.0+0x78>
 8025406:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 802540a:	f1bc 0f19 	cmp.w	ip, #25
 802540e:	d804      	bhi.n	802541a <_strtol_l.constprop.0+0xc6>
 8025410:	3c57      	subs	r4, #87	; 0x57
 8025412:	e7db      	b.n	80253cc <_strtol_l.constprop.0+0x78>
 8025414:	f04f 3eff 	mov.w	lr, #4294967295
 8025418:	e7e6      	b.n	80253e8 <_strtol_l.constprop.0+0x94>
 802541a:	f1be 3fff 	cmp.w	lr, #4294967295
 802541e:	d105      	bne.n	802542c <_strtol_l.constprop.0+0xd8>
 8025420:	2322      	movs	r3, #34	; 0x22
 8025422:	4646      	mov	r6, r8
 8025424:	6003      	str	r3, [r0, #0]
 8025426:	b942      	cbnz	r2, 802543a <_strtol_l.constprop.0+0xe6>
 8025428:	4630      	mov	r0, r6
 802542a:	e79e      	b.n	802536a <_strtol_l.constprop.0+0x16>
 802542c:	b107      	cbz	r7, 8025430 <_strtol_l.constprop.0+0xdc>
 802542e:	4276      	negs	r6, r6
 8025430:	2a00      	cmp	r2, #0
 8025432:	d0f9      	beq.n	8025428 <_strtol_l.constprop.0+0xd4>
 8025434:	f1be 0f00 	cmp.w	lr, #0
 8025438:	d000      	beq.n	802543c <_strtol_l.constprop.0+0xe8>
 802543a:	1e69      	subs	r1, r5, #1
 802543c:	6011      	str	r1, [r2, #0]
 802543e:	e7f3      	b.n	8025428 <_strtol_l.constprop.0+0xd4>
 8025440:	2430      	movs	r4, #48	; 0x30
 8025442:	2b00      	cmp	r3, #0
 8025444:	d1b1      	bne.n	80253aa <_strtol_l.constprop.0+0x56>
 8025446:	2308      	movs	r3, #8
 8025448:	e7af      	b.n	80253aa <_strtol_l.constprop.0+0x56>
 802544a:	2c30      	cmp	r4, #48	; 0x30
 802544c:	d0a5      	beq.n	802539a <_strtol_l.constprop.0+0x46>
 802544e:	230a      	movs	r3, #10
 8025450:	e7ab      	b.n	80253aa <_strtol_l.constprop.0+0x56>
 8025452:	bf00      	nop
 8025454:	080266fb 	.word	0x080266fb

08025458 <_strtol_r>:
 8025458:	f7ff bf7c 	b.w	8025354 <_strtol_l.constprop.0>

0802545c <_strtoul_l.constprop.0>:
 802545c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8025460:	4686      	mov	lr, r0
 8025462:	460d      	mov	r5, r1
 8025464:	4f35      	ldr	r7, [pc, #212]	; (802553c <_strtoul_l.constprop.0+0xe0>)
 8025466:	4628      	mov	r0, r5
 8025468:	f815 4b01 	ldrb.w	r4, [r5], #1
 802546c:	5d3e      	ldrb	r6, [r7, r4]
 802546e:	f016 0608 	ands.w	r6, r6, #8
 8025472:	d1f8      	bne.n	8025466 <_strtoul_l.constprop.0+0xa>
 8025474:	2c2d      	cmp	r4, #45	; 0x2d
 8025476:	d130      	bne.n	80254da <_strtoul_l.constprop.0+0x7e>
 8025478:	782c      	ldrb	r4, [r5, #0]
 802547a:	2601      	movs	r6, #1
 802547c:	1c85      	adds	r5, r0, #2
 802547e:	2b00      	cmp	r3, #0
 8025480:	d057      	beq.n	8025532 <_strtoul_l.constprop.0+0xd6>
 8025482:	2b10      	cmp	r3, #16
 8025484:	d109      	bne.n	802549a <_strtoul_l.constprop.0+0x3e>
 8025486:	2c30      	cmp	r4, #48	; 0x30
 8025488:	d107      	bne.n	802549a <_strtoul_l.constprop.0+0x3e>
 802548a:	7828      	ldrb	r0, [r5, #0]
 802548c:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8025490:	2858      	cmp	r0, #88	; 0x58
 8025492:	d149      	bne.n	8025528 <_strtoul_l.constprop.0+0xcc>
 8025494:	786c      	ldrb	r4, [r5, #1]
 8025496:	2310      	movs	r3, #16
 8025498:	3502      	adds	r5, #2
 802549a:	f04f 38ff 	mov.w	r8, #4294967295
 802549e:	2700      	movs	r7, #0
 80254a0:	fbb8 f8f3 	udiv	r8, r8, r3
 80254a4:	fb03 f908 	mul.w	r9, r3, r8
 80254a8:	4638      	mov	r0, r7
 80254aa:	ea6f 0909 	mvn.w	r9, r9
 80254ae:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 80254b2:	f1bc 0f09 	cmp.w	ip, #9
 80254b6:	d815      	bhi.n	80254e4 <_strtoul_l.constprop.0+0x88>
 80254b8:	4664      	mov	r4, ip
 80254ba:	42a3      	cmp	r3, r4
 80254bc:	dd23      	ble.n	8025506 <_strtoul_l.constprop.0+0xaa>
 80254be:	f1b7 3fff 	cmp.w	r7, #4294967295
 80254c2:	d007      	beq.n	80254d4 <_strtoul_l.constprop.0+0x78>
 80254c4:	4580      	cmp	r8, r0
 80254c6:	d31b      	bcc.n	8025500 <_strtoul_l.constprop.0+0xa4>
 80254c8:	d101      	bne.n	80254ce <_strtoul_l.constprop.0+0x72>
 80254ca:	45a1      	cmp	r9, r4
 80254cc:	db18      	blt.n	8025500 <_strtoul_l.constprop.0+0xa4>
 80254ce:	fb00 4003 	mla	r0, r0, r3, r4
 80254d2:	2701      	movs	r7, #1
 80254d4:	f815 4b01 	ldrb.w	r4, [r5], #1
 80254d8:	e7e9      	b.n	80254ae <_strtoul_l.constprop.0+0x52>
 80254da:	2c2b      	cmp	r4, #43	; 0x2b
 80254dc:	bf04      	itt	eq
 80254de:	782c      	ldrbeq	r4, [r5, #0]
 80254e0:	1c85      	addeq	r5, r0, #2
 80254e2:	e7cc      	b.n	802547e <_strtoul_l.constprop.0+0x22>
 80254e4:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 80254e8:	f1bc 0f19 	cmp.w	ip, #25
 80254ec:	d801      	bhi.n	80254f2 <_strtoul_l.constprop.0+0x96>
 80254ee:	3c37      	subs	r4, #55	; 0x37
 80254f0:	e7e3      	b.n	80254ba <_strtoul_l.constprop.0+0x5e>
 80254f2:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 80254f6:	f1bc 0f19 	cmp.w	ip, #25
 80254fa:	d804      	bhi.n	8025506 <_strtoul_l.constprop.0+0xaa>
 80254fc:	3c57      	subs	r4, #87	; 0x57
 80254fe:	e7dc      	b.n	80254ba <_strtoul_l.constprop.0+0x5e>
 8025500:	f04f 37ff 	mov.w	r7, #4294967295
 8025504:	e7e6      	b.n	80254d4 <_strtoul_l.constprop.0+0x78>
 8025506:	1c7b      	adds	r3, r7, #1
 8025508:	d106      	bne.n	8025518 <_strtoul_l.constprop.0+0xbc>
 802550a:	2322      	movs	r3, #34	; 0x22
 802550c:	4638      	mov	r0, r7
 802550e:	f8ce 3000 	str.w	r3, [lr]
 8025512:	b932      	cbnz	r2, 8025522 <_strtoul_l.constprop.0+0xc6>
 8025514:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8025518:	b106      	cbz	r6, 802551c <_strtoul_l.constprop.0+0xc0>
 802551a:	4240      	negs	r0, r0
 802551c:	2a00      	cmp	r2, #0
 802551e:	d0f9      	beq.n	8025514 <_strtoul_l.constprop.0+0xb8>
 8025520:	b107      	cbz	r7, 8025524 <_strtoul_l.constprop.0+0xc8>
 8025522:	1e69      	subs	r1, r5, #1
 8025524:	6011      	str	r1, [r2, #0]
 8025526:	e7f5      	b.n	8025514 <_strtoul_l.constprop.0+0xb8>
 8025528:	2430      	movs	r4, #48	; 0x30
 802552a:	2b00      	cmp	r3, #0
 802552c:	d1b5      	bne.n	802549a <_strtoul_l.constprop.0+0x3e>
 802552e:	2308      	movs	r3, #8
 8025530:	e7b3      	b.n	802549a <_strtoul_l.constprop.0+0x3e>
 8025532:	2c30      	cmp	r4, #48	; 0x30
 8025534:	d0a9      	beq.n	802548a <_strtoul_l.constprop.0+0x2e>
 8025536:	230a      	movs	r3, #10
 8025538:	e7af      	b.n	802549a <_strtoul_l.constprop.0+0x3e>
 802553a:	bf00      	nop
 802553c:	080266fb 	.word	0x080266fb

08025540 <_strtoul_r>:
 8025540:	f7ff bf8c 	b.w	802545c <_strtoul_l.constprop.0>

08025544 <__sfputc_r>:
 8025544:	6893      	ldr	r3, [r2, #8]
 8025546:	3b01      	subs	r3, #1
 8025548:	2b00      	cmp	r3, #0
 802554a:	6093      	str	r3, [r2, #8]
 802554c:	b410      	push	{r4}
 802554e:	da08      	bge.n	8025562 <__sfputc_r+0x1e>
 8025550:	6994      	ldr	r4, [r2, #24]
 8025552:	42a3      	cmp	r3, r4
 8025554:	db01      	blt.n	802555a <__sfputc_r+0x16>
 8025556:	290a      	cmp	r1, #10
 8025558:	d103      	bne.n	8025562 <__sfputc_r+0x1e>
 802555a:	f85d 4b04 	ldr.w	r4, [sp], #4
 802555e:	f000 bac7 	b.w	8025af0 <__swbuf_r>
 8025562:	6813      	ldr	r3, [r2, #0]
 8025564:	1c58      	adds	r0, r3, #1
 8025566:	6010      	str	r0, [r2, #0]
 8025568:	4608      	mov	r0, r1
 802556a:	7019      	strb	r1, [r3, #0]
 802556c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8025570:	4770      	bx	lr

08025572 <__sfputs_r>:
 8025572:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8025574:	4606      	mov	r6, r0
 8025576:	460f      	mov	r7, r1
 8025578:	4614      	mov	r4, r2
 802557a:	18d5      	adds	r5, r2, r3
 802557c:	42ac      	cmp	r4, r5
 802557e:	d101      	bne.n	8025584 <__sfputs_r+0x12>
 8025580:	2000      	movs	r0, #0
 8025582:	e007      	b.n	8025594 <__sfputs_r+0x22>
 8025584:	463a      	mov	r2, r7
 8025586:	f814 1b01 	ldrb.w	r1, [r4], #1
 802558a:	4630      	mov	r0, r6
 802558c:	f7ff ffda 	bl	8025544 <__sfputc_r>
 8025590:	1c43      	adds	r3, r0, #1
 8025592:	d1f3      	bne.n	802557c <__sfputs_r+0xa>
 8025594:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08025598 <_vfiprintf_r>:
 8025598:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802559c:	460d      	mov	r5, r1
 802559e:	b09d      	sub	sp, #116	; 0x74
 80255a0:	4614      	mov	r4, r2
 80255a2:	4698      	mov	r8, r3
 80255a4:	4606      	mov	r6, r0
 80255a6:	b118      	cbz	r0, 80255b0 <_vfiprintf_r+0x18>
 80255a8:	6a03      	ldr	r3, [r0, #32]
 80255aa:	b90b      	cbnz	r3, 80255b0 <_vfiprintf_r+0x18>
 80255ac:	f7ff f840 	bl	8024630 <__sinit>
 80255b0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80255b2:	07d9      	lsls	r1, r3, #31
 80255b4:	d405      	bmi.n	80255c2 <_vfiprintf_r+0x2a>
 80255b6:	89ab      	ldrh	r3, [r5, #12]
 80255b8:	059a      	lsls	r2, r3, #22
 80255ba:	d402      	bmi.n	80255c2 <_vfiprintf_r+0x2a>
 80255bc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80255be:	f7ff f9c6 	bl	802494e <__retarget_lock_acquire_recursive>
 80255c2:	89ab      	ldrh	r3, [r5, #12]
 80255c4:	071b      	lsls	r3, r3, #28
 80255c6:	d501      	bpl.n	80255cc <_vfiprintf_r+0x34>
 80255c8:	692b      	ldr	r3, [r5, #16]
 80255ca:	b99b      	cbnz	r3, 80255f4 <_vfiprintf_r+0x5c>
 80255cc:	4629      	mov	r1, r5
 80255ce:	4630      	mov	r0, r6
 80255d0:	f000 facc 	bl	8025b6c <__swsetup_r>
 80255d4:	b170      	cbz	r0, 80255f4 <_vfiprintf_r+0x5c>
 80255d6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80255d8:	07dc      	lsls	r4, r3, #31
 80255da:	d504      	bpl.n	80255e6 <_vfiprintf_r+0x4e>
 80255dc:	f04f 30ff 	mov.w	r0, #4294967295
 80255e0:	b01d      	add	sp, #116	; 0x74
 80255e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80255e6:	89ab      	ldrh	r3, [r5, #12]
 80255e8:	0598      	lsls	r0, r3, #22
 80255ea:	d4f7      	bmi.n	80255dc <_vfiprintf_r+0x44>
 80255ec:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80255ee:	f7ff f9af 	bl	8024950 <__retarget_lock_release_recursive>
 80255f2:	e7f3      	b.n	80255dc <_vfiprintf_r+0x44>
 80255f4:	2300      	movs	r3, #0
 80255f6:	f8cd 800c 	str.w	r8, [sp, #12]
 80255fa:	f04f 0901 	mov.w	r9, #1
 80255fe:	f8df 81b8 	ldr.w	r8, [pc, #440]	; 80257b8 <_vfiprintf_r+0x220>
 8025602:	9309      	str	r3, [sp, #36]	; 0x24
 8025604:	2320      	movs	r3, #32
 8025606:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 802560a:	2330      	movs	r3, #48	; 0x30
 802560c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8025610:	4623      	mov	r3, r4
 8025612:	469a      	mov	sl, r3
 8025614:	f813 2b01 	ldrb.w	r2, [r3], #1
 8025618:	b10a      	cbz	r2, 802561e <_vfiprintf_r+0x86>
 802561a:	2a25      	cmp	r2, #37	; 0x25
 802561c:	d1f9      	bne.n	8025612 <_vfiprintf_r+0x7a>
 802561e:	ebba 0b04 	subs.w	fp, sl, r4
 8025622:	d00b      	beq.n	802563c <_vfiprintf_r+0xa4>
 8025624:	465b      	mov	r3, fp
 8025626:	4622      	mov	r2, r4
 8025628:	4629      	mov	r1, r5
 802562a:	4630      	mov	r0, r6
 802562c:	f7ff ffa1 	bl	8025572 <__sfputs_r>
 8025630:	3001      	adds	r0, #1
 8025632:	f000 80a9 	beq.w	8025788 <_vfiprintf_r+0x1f0>
 8025636:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8025638:	445a      	add	r2, fp
 802563a:	9209      	str	r2, [sp, #36]	; 0x24
 802563c:	f89a 3000 	ldrb.w	r3, [sl]
 8025640:	2b00      	cmp	r3, #0
 8025642:	f000 80a1 	beq.w	8025788 <_vfiprintf_r+0x1f0>
 8025646:	2300      	movs	r3, #0
 8025648:	f04f 32ff 	mov.w	r2, #4294967295
 802564c:	f10a 0a01 	add.w	sl, sl, #1
 8025650:	9304      	str	r3, [sp, #16]
 8025652:	9307      	str	r3, [sp, #28]
 8025654:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8025658:	931a      	str	r3, [sp, #104]	; 0x68
 802565a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 802565e:	4654      	mov	r4, sl
 8025660:	2205      	movs	r2, #5
 8025662:	4855      	ldr	r0, [pc, #340]	; (80257b8 <_vfiprintf_r+0x220>)
 8025664:	f814 1b01 	ldrb.w	r1, [r4], #1
 8025668:	f7ff fe36 	bl	80252d8 <memchr>
 802566c:	9a04      	ldr	r2, [sp, #16]
 802566e:	b9d8      	cbnz	r0, 80256a8 <_vfiprintf_r+0x110>
 8025670:	06d1      	lsls	r1, r2, #27
 8025672:	bf44      	itt	mi
 8025674:	2320      	movmi	r3, #32
 8025676:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 802567a:	0713      	lsls	r3, r2, #28
 802567c:	bf44      	itt	mi
 802567e:	232b      	movmi	r3, #43	; 0x2b
 8025680:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8025684:	f89a 3000 	ldrb.w	r3, [sl]
 8025688:	2b2a      	cmp	r3, #42	; 0x2a
 802568a:	d015      	beq.n	80256b8 <_vfiprintf_r+0x120>
 802568c:	9a07      	ldr	r2, [sp, #28]
 802568e:	4654      	mov	r4, sl
 8025690:	2000      	movs	r0, #0
 8025692:	f04f 0c0a 	mov.w	ip, #10
 8025696:	4621      	mov	r1, r4
 8025698:	f811 3b01 	ldrb.w	r3, [r1], #1
 802569c:	3b30      	subs	r3, #48	; 0x30
 802569e:	2b09      	cmp	r3, #9
 80256a0:	d94d      	bls.n	802573e <_vfiprintf_r+0x1a6>
 80256a2:	b1b0      	cbz	r0, 80256d2 <_vfiprintf_r+0x13a>
 80256a4:	9207      	str	r2, [sp, #28]
 80256a6:	e014      	b.n	80256d2 <_vfiprintf_r+0x13a>
 80256a8:	eba0 0308 	sub.w	r3, r0, r8
 80256ac:	46a2      	mov	sl, r4
 80256ae:	fa09 f303 	lsl.w	r3, r9, r3
 80256b2:	4313      	orrs	r3, r2
 80256b4:	9304      	str	r3, [sp, #16]
 80256b6:	e7d2      	b.n	802565e <_vfiprintf_r+0xc6>
 80256b8:	9b03      	ldr	r3, [sp, #12]
 80256ba:	1d19      	adds	r1, r3, #4
 80256bc:	681b      	ldr	r3, [r3, #0]
 80256be:	2b00      	cmp	r3, #0
 80256c0:	9103      	str	r1, [sp, #12]
 80256c2:	bfbb      	ittet	lt
 80256c4:	425b      	neglt	r3, r3
 80256c6:	f042 0202 	orrlt.w	r2, r2, #2
 80256ca:	9307      	strge	r3, [sp, #28]
 80256cc:	9307      	strlt	r3, [sp, #28]
 80256ce:	bfb8      	it	lt
 80256d0:	9204      	strlt	r2, [sp, #16]
 80256d2:	7823      	ldrb	r3, [r4, #0]
 80256d4:	2b2e      	cmp	r3, #46	; 0x2e
 80256d6:	d10c      	bne.n	80256f2 <_vfiprintf_r+0x15a>
 80256d8:	7863      	ldrb	r3, [r4, #1]
 80256da:	2b2a      	cmp	r3, #42	; 0x2a
 80256dc:	d134      	bne.n	8025748 <_vfiprintf_r+0x1b0>
 80256de:	9b03      	ldr	r3, [sp, #12]
 80256e0:	3402      	adds	r4, #2
 80256e2:	1d1a      	adds	r2, r3, #4
 80256e4:	681b      	ldr	r3, [r3, #0]
 80256e6:	2b00      	cmp	r3, #0
 80256e8:	9203      	str	r2, [sp, #12]
 80256ea:	bfb8      	it	lt
 80256ec:	f04f 33ff 	movlt.w	r3, #4294967295
 80256f0:	9305      	str	r3, [sp, #20]
 80256f2:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 80257c8 <_vfiprintf_r+0x230>
 80256f6:	2203      	movs	r2, #3
 80256f8:	7821      	ldrb	r1, [r4, #0]
 80256fa:	4650      	mov	r0, sl
 80256fc:	f7ff fdec 	bl	80252d8 <memchr>
 8025700:	b138      	cbz	r0, 8025712 <_vfiprintf_r+0x17a>
 8025702:	eba0 000a 	sub.w	r0, r0, sl
 8025706:	2240      	movs	r2, #64	; 0x40
 8025708:	9b04      	ldr	r3, [sp, #16]
 802570a:	3401      	adds	r4, #1
 802570c:	4082      	lsls	r2, r0
 802570e:	4313      	orrs	r3, r2
 8025710:	9304      	str	r3, [sp, #16]
 8025712:	f814 1b01 	ldrb.w	r1, [r4], #1
 8025716:	2206      	movs	r2, #6
 8025718:	4828      	ldr	r0, [pc, #160]	; (80257bc <_vfiprintf_r+0x224>)
 802571a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 802571e:	f7ff fddb 	bl	80252d8 <memchr>
 8025722:	2800      	cmp	r0, #0
 8025724:	d03f      	beq.n	80257a6 <_vfiprintf_r+0x20e>
 8025726:	4b26      	ldr	r3, [pc, #152]	; (80257c0 <_vfiprintf_r+0x228>)
 8025728:	bb1b      	cbnz	r3, 8025772 <_vfiprintf_r+0x1da>
 802572a:	9b03      	ldr	r3, [sp, #12]
 802572c:	3307      	adds	r3, #7
 802572e:	f023 0307 	bic.w	r3, r3, #7
 8025732:	3308      	adds	r3, #8
 8025734:	9303      	str	r3, [sp, #12]
 8025736:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8025738:	443b      	add	r3, r7
 802573a:	9309      	str	r3, [sp, #36]	; 0x24
 802573c:	e768      	b.n	8025610 <_vfiprintf_r+0x78>
 802573e:	fb0c 3202 	mla	r2, ip, r2, r3
 8025742:	460c      	mov	r4, r1
 8025744:	2001      	movs	r0, #1
 8025746:	e7a6      	b.n	8025696 <_vfiprintf_r+0xfe>
 8025748:	2300      	movs	r3, #0
 802574a:	3401      	adds	r4, #1
 802574c:	f04f 0c0a 	mov.w	ip, #10
 8025750:	4619      	mov	r1, r3
 8025752:	9305      	str	r3, [sp, #20]
 8025754:	4620      	mov	r0, r4
 8025756:	f810 2b01 	ldrb.w	r2, [r0], #1
 802575a:	3a30      	subs	r2, #48	; 0x30
 802575c:	2a09      	cmp	r2, #9
 802575e:	d903      	bls.n	8025768 <_vfiprintf_r+0x1d0>
 8025760:	2b00      	cmp	r3, #0
 8025762:	d0c6      	beq.n	80256f2 <_vfiprintf_r+0x15a>
 8025764:	9105      	str	r1, [sp, #20]
 8025766:	e7c4      	b.n	80256f2 <_vfiprintf_r+0x15a>
 8025768:	fb0c 2101 	mla	r1, ip, r1, r2
 802576c:	4604      	mov	r4, r0
 802576e:	2301      	movs	r3, #1
 8025770:	e7f0      	b.n	8025754 <_vfiprintf_r+0x1bc>
 8025772:	ab03      	add	r3, sp, #12
 8025774:	462a      	mov	r2, r5
 8025776:	a904      	add	r1, sp, #16
 8025778:	4630      	mov	r0, r6
 802577a:	9300      	str	r3, [sp, #0]
 802577c:	4b11      	ldr	r3, [pc, #68]	; (80257c4 <_vfiprintf_r+0x22c>)
 802577e:	f3af 8000 	nop.w
 8025782:	4607      	mov	r7, r0
 8025784:	1c78      	adds	r0, r7, #1
 8025786:	d1d6      	bne.n	8025736 <_vfiprintf_r+0x19e>
 8025788:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 802578a:	07d9      	lsls	r1, r3, #31
 802578c:	d405      	bmi.n	802579a <_vfiprintf_r+0x202>
 802578e:	89ab      	ldrh	r3, [r5, #12]
 8025790:	059a      	lsls	r2, r3, #22
 8025792:	d402      	bmi.n	802579a <_vfiprintf_r+0x202>
 8025794:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8025796:	f7ff f8db 	bl	8024950 <__retarget_lock_release_recursive>
 802579a:	89ab      	ldrh	r3, [r5, #12]
 802579c:	065b      	lsls	r3, r3, #25
 802579e:	f53f af1d 	bmi.w	80255dc <_vfiprintf_r+0x44>
 80257a2:	9809      	ldr	r0, [sp, #36]	; 0x24
 80257a4:	e71c      	b.n	80255e0 <_vfiprintf_r+0x48>
 80257a6:	ab03      	add	r3, sp, #12
 80257a8:	462a      	mov	r2, r5
 80257aa:	a904      	add	r1, sp, #16
 80257ac:	4630      	mov	r0, r6
 80257ae:	9300      	str	r3, [sp, #0]
 80257b0:	4b04      	ldr	r3, [pc, #16]	; (80257c4 <_vfiprintf_r+0x22c>)
 80257b2:	f000 f87d 	bl	80258b0 <_printf_i>
 80257b6:	e7e4      	b.n	8025782 <_vfiprintf_r+0x1ea>
 80257b8:	080267fb 	.word	0x080267fb
 80257bc:	08026801 	.word	0x08026801
 80257c0:	00000000 	.word	0x00000000
 80257c4:	08025573 	.word	0x08025573
 80257c8:	080266db 	.word	0x080266db

080257cc <_printf_common>:
 80257cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80257d0:	4616      	mov	r6, r2
 80257d2:	4699      	mov	r9, r3
 80257d4:	688a      	ldr	r2, [r1, #8]
 80257d6:	4607      	mov	r7, r0
 80257d8:	690b      	ldr	r3, [r1, #16]
 80257da:	460c      	mov	r4, r1
 80257dc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80257e0:	4293      	cmp	r3, r2
 80257e2:	bfb8      	it	lt
 80257e4:	4613      	movlt	r3, r2
 80257e6:	6033      	str	r3, [r6, #0]
 80257e8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80257ec:	b10a      	cbz	r2, 80257f2 <_printf_common+0x26>
 80257ee:	3301      	adds	r3, #1
 80257f0:	6033      	str	r3, [r6, #0]
 80257f2:	6823      	ldr	r3, [r4, #0]
 80257f4:	0699      	lsls	r1, r3, #26
 80257f6:	bf42      	ittt	mi
 80257f8:	6833      	ldrmi	r3, [r6, #0]
 80257fa:	3302      	addmi	r3, #2
 80257fc:	6033      	strmi	r3, [r6, #0]
 80257fe:	6825      	ldr	r5, [r4, #0]
 8025800:	f015 0506 	ands.w	r5, r5, #6
 8025804:	d106      	bne.n	8025814 <_printf_common+0x48>
 8025806:	f104 0a19 	add.w	sl, r4, #25
 802580a:	68e3      	ldr	r3, [r4, #12]
 802580c:	6832      	ldr	r2, [r6, #0]
 802580e:	1a9b      	subs	r3, r3, r2
 8025810:	42ab      	cmp	r3, r5
 8025812:	dc2b      	bgt.n	802586c <_printf_common+0xa0>
 8025814:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8025818:	1e13      	subs	r3, r2, #0
 802581a:	6822      	ldr	r2, [r4, #0]
 802581c:	bf18      	it	ne
 802581e:	2301      	movne	r3, #1
 8025820:	0692      	lsls	r2, r2, #26
 8025822:	d430      	bmi.n	8025886 <_printf_common+0xba>
 8025824:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8025828:	4649      	mov	r1, r9
 802582a:	4638      	mov	r0, r7
 802582c:	47c0      	blx	r8
 802582e:	3001      	adds	r0, #1
 8025830:	d023      	beq.n	802587a <_printf_common+0xae>
 8025832:	6823      	ldr	r3, [r4, #0]
 8025834:	341a      	adds	r4, #26
 8025836:	f854 2c0a 	ldr.w	r2, [r4, #-10]
 802583a:	f003 0306 	and.w	r3, r3, #6
 802583e:	2b04      	cmp	r3, #4
 8025840:	bf0a      	itet	eq
 8025842:	f854 5c0e 	ldreq.w	r5, [r4, #-14]
 8025846:	2500      	movne	r5, #0
 8025848:	6833      	ldreq	r3, [r6, #0]
 802584a:	f04f 0600 	mov.w	r6, #0
 802584e:	bf08      	it	eq
 8025850:	1aed      	subeq	r5, r5, r3
 8025852:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8025856:	bf08      	it	eq
 8025858:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 802585c:	4293      	cmp	r3, r2
 802585e:	bfc4      	itt	gt
 8025860:	1a9b      	subgt	r3, r3, r2
 8025862:	18ed      	addgt	r5, r5, r3
 8025864:	42b5      	cmp	r5, r6
 8025866:	d11a      	bne.n	802589e <_printf_common+0xd2>
 8025868:	2000      	movs	r0, #0
 802586a:	e008      	b.n	802587e <_printf_common+0xb2>
 802586c:	2301      	movs	r3, #1
 802586e:	4652      	mov	r2, sl
 8025870:	4649      	mov	r1, r9
 8025872:	4638      	mov	r0, r7
 8025874:	47c0      	blx	r8
 8025876:	3001      	adds	r0, #1
 8025878:	d103      	bne.n	8025882 <_printf_common+0xb6>
 802587a:	f04f 30ff 	mov.w	r0, #4294967295
 802587e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8025882:	3501      	adds	r5, #1
 8025884:	e7c1      	b.n	802580a <_printf_common+0x3e>
 8025886:	18e1      	adds	r1, r4, r3
 8025888:	1c5a      	adds	r2, r3, #1
 802588a:	2030      	movs	r0, #48	; 0x30
 802588c:	3302      	adds	r3, #2
 802588e:	4422      	add	r2, r4
 8025890:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8025894:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8025898:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 802589c:	e7c2      	b.n	8025824 <_printf_common+0x58>
 802589e:	2301      	movs	r3, #1
 80258a0:	4622      	mov	r2, r4
 80258a2:	4649      	mov	r1, r9
 80258a4:	4638      	mov	r0, r7
 80258a6:	47c0      	blx	r8
 80258a8:	3001      	adds	r0, #1
 80258aa:	d0e6      	beq.n	802587a <_printf_common+0xae>
 80258ac:	3601      	adds	r6, #1
 80258ae:	e7d9      	b.n	8025864 <_printf_common+0x98>

080258b0 <_printf_i>:
 80258b0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80258b4:	7e0f      	ldrb	r7, [r1, #24]
 80258b6:	4691      	mov	r9, r2
 80258b8:	4680      	mov	r8, r0
 80258ba:	460c      	mov	r4, r1
 80258bc:	2f78      	cmp	r7, #120	; 0x78
 80258be:	469a      	mov	sl, r3
 80258c0:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80258c2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80258c6:	d807      	bhi.n	80258d8 <_printf_i+0x28>
 80258c8:	2f62      	cmp	r7, #98	; 0x62
 80258ca:	d80a      	bhi.n	80258e2 <_printf_i+0x32>
 80258cc:	2f00      	cmp	r7, #0
 80258ce:	f000 80d3 	beq.w	8025a78 <_printf_i+0x1c8>
 80258d2:	2f58      	cmp	r7, #88	; 0x58
 80258d4:	f000 80bf 	beq.w	8025a56 <_printf_i+0x1a6>
 80258d8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80258dc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80258e0:	e03a      	b.n	8025958 <_printf_i+0xa8>
 80258e2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80258e6:	2b15      	cmp	r3, #21
 80258e8:	d8f6      	bhi.n	80258d8 <_printf_i+0x28>
 80258ea:	a101      	add	r1, pc, #4	; (adr r1, 80258f0 <_printf_i+0x40>)
 80258ec:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80258f0:	08025949 	.word	0x08025949
 80258f4:	0802595d 	.word	0x0802595d
 80258f8:	080258d9 	.word	0x080258d9
 80258fc:	080258d9 	.word	0x080258d9
 8025900:	080258d9 	.word	0x080258d9
 8025904:	080258d9 	.word	0x080258d9
 8025908:	0802595d 	.word	0x0802595d
 802590c:	080258d9 	.word	0x080258d9
 8025910:	080258d9 	.word	0x080258d9
 8025914:	080258d9 	.word	0x080258d9
 8025918:	080258d9 	.word	0x080258d9
 802591c:	08025a5f 	.word	0x08025a5f
 8025920:	08025989 	.word	0x08025989
 8025924:	08025a1b 	.word	0x08025a1b
 8025928:	080258d9 	.word	0x080258d9
 802592c:	080258d9 	.word	0x080258d9
 8025930:	08025a81 	.word	0x08025a81
 8025934:	080258d9 	.word	0x080258d9
 8025938:	08025989 	.word	0x08025989
 802593c:	080258d9 	.word	0x080258d9
 8025940:	080258d9 	.word	0x080258d9
 8025944:	08025a23 	.word	0x08025a23
 8025948:	682b      	ldr	r3, [r5, #0]
 802594a:	1d1a      	adds	r2, r3, #4
 802594c:	681b      	ldr	r3, [r3, #0]
 802594e:	602a      	str	r2, [r5, #0]
 8025950:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8025954:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8025958:	2301      	movs	r3, #1
 802595a:	e09e      	b.n	8025a9a <_printf_i+0x1ea>
 802595c:	6820      	ldr	r0, [r4, #0]
 802595e:	682b      	ldr	r3, [r5, #0]
 8025960:	0607      	lsls	r7, r0, #24
 8025962:	f103 0104 	add.w	r1, r3, #4
 8025966:	6029      	str	r1, [r5, #0]
 8025968:	d501      	bpl.n	802596e <_printf_i+0xbe>
 802596a:	681e      	ldr	r6, [r3, #0]
 802596c:	e003      	b.n	8025976 <_printf_i+0xc6>
 802596e:	0646      	lsls	r6, r0, #25
 8025970:	d5fb      	bpl.n	802596a <_printf_i+0xba>
 8025972:	f9b3 6000 	ldrsh.w	r6, [r3]
 8025976:	2e00      	cmp	r6, #0
 8025978:	da03      	bge.n	8025982 <_printf_i+0xd2>
 802597a:	232d      	movs	r3, #45	; 0x2d
 802597c:	4276      	negs	r6, r6
 802597e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8025982:	4859      	ldr	r0, [pc, #356]	; (8025ae8 <_printf_i+0x238>)
 8025984:	230a      	movs	r3, #10
 8025986:	e012      	b.n	80259ae <_printf_i+0xfe>
 8025988:	682b      	ldr	r3, [r5, #0]
 802598a:	6820      	ldr	r0, [r4, #0]
 802598c:	1d19      	adds	r1, r3, #4
 802598e:	6029      	str	r1, [r5, #0]
 8025990:	0605      	lsls	r5, r0, #24
 8025992:	d501      	bpl.n	8025998 <_printf_i+0xe8>
 8025994:	681e      	ldr	r6, [r3, #0]
 8025996:	e002      	b.n	802599e <_printf_i+0xee>
 8025998:	0641      	lsls	r1, r0, #25
 802599a:	d5fb      	bpl.n	8025994 <_printf_i+0xe4>
 802599c:	881e      	ldrh	r6, [r3, #0]
 802599e:	2f6f      	cmp	r7, #111	; 0x6f
 80259a0:	4851      	ldr	r0, [pc, #324]	; (8025ae8 <_printf_i+0x238>)
 80259a2:	bf0c      	ite	eq
 80259a4:	2308      	moveq	r3, #8
 80259a6:	230a      	movne	r3, #10
 80259a8:	2100      	movs	r1, #0
 80259aa:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80259ae:	6865      	ldr	r5, [r4, #4]
 80259b0:	2d00      	cmp	r5, #0
 80259b2:	60a5      	str	r5, [r4, #8]
 80259b4:	bfa2      	ittt	ge
 80259b6:	6821      	ldrge	r1, [r4, #0]
 80259b8:	f021 0104 	bicge.w	r1, r1, #4
 80259bc:	6021      	strge	r1, [r4, #0]
 80259be:	b90e      	cbnz	r6, 80259c4 <_printf_i+0x114>
 80259c0:	2d00      	cmp	r5, #0
 80259c2:	d04a      	beq.n	8025a5a <_printf_i+0x1aa>
 80259c4:	4615      	mov	r5, r2
 80259c6:	fbb6 f1f3 	udiv	r1, r6, r3
 80259ca:	fb03 6711 	mls	r7, r3, r1, r6
 80259ce:	5dc7      	ldrb	r7, [r0, r7]
 80259d0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80259d4:	4637      	mov	r7, r6
 80259d6:	460e      	mov	r6, r1
 80259d8:	42bb      	cmp	r3, r7
 80259da:	d9f4      	bls.n	80259c6 <_printf_i+0x116>
 80259dc:	2b08      	cmp	r3, #8
 80259de:	d10b      	bne.n	80259f8 <_printf_i+0x148>
 80259e0:	6823      	ldr	r3, [r4, #0]
 80259e2:	07de      	lsls	r6, r3, #31
 80259e4:	d508      	bpl.n	80259f8 <_printf_i+0x148>
 80259e6:	6923      	ldr	r3, [r4, #16]
 80259e8:	6861      	ldr	r1, [r4, #4]
 80259ea:	4299      	cmp	r1, r3
 80259ec:	bfde      	ittt	le
 80259ee:	2330      	movle	r3, #48	; 0x30
 80259f0:	f805 3c01 	strble.w	r3, [r5, #-1]
 80259f4:	f105 35ff 	addle.w	r5, r5, #4294967295
 80259f8:	1b52      	subs	r2, r2, r5
 80259fa:	6122      	str	r2, [r4, #16]
 80259fc:	464b      	mov	r3, r9
 80259fe:	aa03      	add	r2, sp, #12
 8025a00:	4621      	mov	r1, r4
 8025a02:	4640      	mov	r0, r8
 8025a04:	f8cd a000 	str.w	sl, [sp]
 8025a08:	f7ff fee0 	bl	80257cc <_printf_common>
 8025a0c:	3001      	adds	r0, #1
 8025a0e:	d149      	bne.n	8025aa4 <_printf_i+0x1f4>
 8025a10:	f04f 30ff 	mov.w	r0, #4294967295
 8025a14:	b004      	add	sp, #16
 8025a16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8025a1a:	6823      	ldr	r3, [r4, #0]
 8025a1c:	f043 0320 	orr.w	r3, r3, #32
 8025a20:	6023      	str	r3, [r4, #0]
 8025a22:	2778      	movs	r7, #120	; 0x78
 8025a24:	4831      	ldr	r0, [pc, #196]	; (8025aec <_printf_i+0x23c>)
 8025a26:	6823      	ldr	r3, [r4, #0]
 8025a28:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8025a2c:	061f      	lsls	r7, r3, #24
 8025a2e:	6829      	ldr	r1, [r5, #0]
 8025a30:	f851 6b04 	ldr.w	r6, [r1], #4
 8025a34:	d402      	bmi.n	8025a3c <_printf_i+0x18c>
 8025a36:	065f      	lsls	r7, r3, #25
 8025a38:	bf48      	it	mi
 8025a3a:	b2b6      	uxthmi	r6, r6
 8025a3c:	07df      	lsls	r7, r3, #31
 8025a3e:	6029      	str	r1, [r5, #0]
 8025a40:	bf44      	itt	mi
 8025a42:	f043 0320 	orrmi.w	r3, r3, #32
 8025a46:	6023      	strmi	r3, [r4, #0]
 8025a48:	b91e      	cbnz	r6, 8025a52 <_printf_i+0x1a2>
 8025a4a:	6823      	ldr	r3, [r4, #0]
 8025a4c:	f023 0320 	bic.w	r3, r3, #32
 8025a50:	6023      	str	r3, [r4, #0]
 8025a52:	2310      	movs	r3, #16
 8025a54:	e7a8      	b.n	80259a8 <_printf_i+0xf8>
 8025a56:	4824      	ldr	r0, [pc, #144]	; (8025ae8 <_printf_i+0x238>)
 8025a58:	e7e5      	b.n	8025a26 <_printf_i+0x176>
 8025a5a:	4615      	mov	r5, r2
 8025a5c:	e7be      	b.n	80259dc <_printf_i+0x12c>
 8025a5e:	682b      	ldr	r3, [r5, #0]
 8025a60:	6826      	ldr	r6, [r4, #0]
 8025a62:	1d18      	adds	r0, r3, #4
 8025a64:	6961      	ldr	r1, [r4, #20]
 8025a66:	6028      	str	r0, [r5, #0]
 8025a68:	0635      	lsls	r5, r6, #24
 8025a6a:	681b      	ldr	r3, [r3, #0]
 8025a6c:	d501      	bpl.n	8025a72 <_printf_i+0x1c2>
 8025a6e:	6019      	str	r1, [r3, #0]
 8025a70:	e002      	b.n	8025a78 <_printf_i+0x1c8>
 8025a72:	0670      	lsls	r0, r6, #25
 8025a74:	d5fb      	bpl.n	8025a6e <_printf_i+0x1be>
 8025a76:	8019      	strh	r1, [r3, #0]
 8025a78:	2300      	movs	r3, #0
 8025a7a:	4615      	mov	r5, r2
 8025a7c:	6123      	str	r3, [r4, #16]
 8025a7e:	e7bd      	b.n	80259fc <_printf_i+0x14c>
 8025a80:	682b      	ldr	r3, [r5, #0]
 8025a82:	2100      	movs	r1, #0
 8025a84:	1d1a      	adds	r2, r3, #4
 8025a86:	602a      	str	r2, [r5, #0]
 8025a88:	681d      	ldr	r5, [r3, #0]
 8025a8a:	6862      	ldr	r2, [r4, #4]
 8025a8c:	4628      	mov	r0, r5
 8025a8e:	f7ff fc23 	bl	80252d8 <memchr>
 8025a92:	b108      	cbz	r0, 8025a98 <_printf_i+0x1e8>
 8025a94:	1b40      	subs	r0, r0, r5
 8025a96:	6060      	str	r0, [r4, #4]
 8025a98:	6863      	ldr	r3, [r4, #4]
 8025a9a:	6123      	str	r3, [r4, #16]
 8025a9c:	2300      	movs	r3, #0
 8025a9e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8025aa2:	e7ab      	b.n	80259fc <_printf_i+0x14c>
 8025aa4:	6923      	ldr	r3, [r4, #16]
 8025aa6:	462a      	mov	r2, r5
 8025aa8:	4649      	mov	r1, r9
 8025aaa:	4640      	mov	r0, r8
 8025aac:	47d0      	blx	sl
 8025aae:	3001      	adds	r0, #1
 8025ab0:	d0ae      	beq.n	8025a10 <_printf_i+0x160>
 8025ab2:	6823      	ldr	r3, [r4, #0]
 8025ab4:	079b      	lsls	r3, r3, #30
 8025ab6:	d413      	bmi.n	8025ae0 <_printf_i+0x230>
 8025ab8:	68e0      	ldr	r0, [r4, #12]
 8025aba:	9b03      	ldr	r3, [sp, #12]
 8025abc:	4298      	cmp	r0, r3
 8025abe:	bfb8      	it	lt
 8025ac0:	4618      	movlt	r0, r3
 8025ac2:	e7a7      	b.n	8025a14 <_printf_i+0x164>
 8025ac4:	2301      	movs	r3, #1
 8025ac6:	4632      	mov	r2, r6
 8025ac8:	4649      	mov	r1, r9
 8025aca:	4640      	mov	r0, r8
 8025acc:	47d0      	blx	sl
 8025ace:	3001      	adds	r0, #1
 8025ad0:	d09e      	beq.n	8025a10 <_printf_i+0x160>
 8025ad2:	3501      	adds	r5, #1
 8025ad4:	68e3      	ldr	r3, [r4, #12]
 8025ad6:	9903      	ldr	r1, [sp, #12]
 8025ad8:	1a5b      	subs	r3, r3, r1
 8025ada:	42ab      	cmp	r3, r5
 8025adc:	dcf2      	bgt.n	8025ac4 <_printf_i+0x214>
 8025ade:	e7eb      	b.n	8025ab8 <_printf_i+0x208>
 8025ae0:	2500      	movs	r5, #0
 8025ae2:	f104 0619 	add.w	r6, r4, #25
 8025ae6:	e7f5      	b.n	8025ad4 <_printf_i+0x224>
 8025ae8:	08026808 	.word	0x08026808
 8025aec:	08026819 	.word	0x08026819

08025af0 <__swbuf_r>:
 8025af0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8025af2:	460e      	mov	r6, r1
 8025af4:	4614      	mov	r4, r2
 8025af6:	4605      	mov	r5, r0
 8025af8:	b118      	cbz	r0, 8025b02 <__swbuf_r+0x12>
 8025afa:	6a03      	ldr	r3, [r0, #32]
 8025afc:	b90b      	cbnz	r3, 8025b02 <__swbuf_r+0x12>
 8025afe:	f7fe fd97 	bl	8024630 <__sinit>
 8025b02:	69a3      	ldr	r3, [r4, #24]
 8025b04:	60a3      	str	r3, [r4, #8]
 8025b06:	89a3      	ldrh	r3, [r4, #12]
 8025b08:	071a      	lsls	r2, r3, #28
 8025b0a:	d525      	bpl.n	8025b58 <__swbuf_r+0x68>
 8025b0c:	6923      	ldr	r3, [r4, #16]
 8025b0e:	b31b      	cbz	r3, 8025b58 <__swbuf_r+0x68>
 8025b10:	6823      	ldr	r3, [r4, #0]
 8025b12:	b2f6      	uxtb	r6, r6
 8025b14:	6922      	ldr	r2, [r4, #16]
 8025b16:	4637      	mov	r7, r6
 8025b18:	1a98      	subs	r0, r3, r2
 8025b1a:	6963      	ldr	r3, [r4, #20]
 8025b1c:	4283      	cmp	r3, r0
 8025b1e:	dc04      	bgt.n	8025b2a <__swbuf_r+0x3a>
 8025b20:	4621      	mov	r1, r4
 8025b22:	4628      	mov	r0, r5
 8025b24:	f7ff fb2e 	bl	8025184 <_fflush_r>
 8025b28:	b9e0      	cbnz	r0, 8025b64 <__swbuf_r+0x74>
 8025b2a:	68a3      	ldr	r3, [r4, #8]
 8025b2c:	3b01      	subs	r3, #1
 8025b2e:	60a3      	str	r3, [r4, #8]
 8025b30:	6823      	ldr	r3, [r4, #0]
 8025b32:	1c5a      	adds	r2, r3, #1
 8025b34:	6022      	str	r2, [r4, #0]
 8025b36:	701e      	strb	r6, [r3, #0]
 8025b38:	1c43      	adds	r3, r0, #1
 8025b3a:	6962      	ldr	r2, [r4, #20]
 8025b3c:	429a      	cmp	r2, r3
 8025b3e:	d004      	beq.n	8025b4a <__swbuf_r+0x5a>
 8025b40:	89a3      	ldrh	r3, [r4, #12]
 8025b42:	07db      	lsls	r3, r3, #31
 8025b44:	d506      	bpl.n	8025b54 <__swbuf_r+0x64>
 8025b46:	2e0a      	cmp	r6, #10
 8025b48:	d104      	bne.n	8025b54 <__swbuf_r+0x64>
 8025b4a:	4621      	mov	r1, r4
 8025b4c:	4628      	mov	r0, r5
 8025b4e:	f7ff fb19 	bl	8025184 <_fflush_r>
 8025b52:	b938      	cbnz	r0, 8025b64 <__swbuf_r+0x74>
 8025b54:	4638      	mov	r0, r7
 8025b56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8025b58:	4621      	mov	r1, r4
 8025b5a:	4628      	mov	r0, r5
 8025b5c:	f000 f806 	bl	8025b6c <__swsetup_r>
 8025b60:	2800      	cmp	r0, #0
 8025b62:	d0d5      	beq.n	8025b10 <__swbuf_r+0x20>
 8025b64:	f04f 37ff 	mov.w	r7, #4294967295
 8025b68:	e7f4      	b.n	8025b54 <__swbuf_r+0x64>
	...

08025b6c <__swsetup_r>:
 8025b6c:	b538      	push	{r3, r4, r5, lr}
 8025b6e:	4b2a      	ldr	r3, [pc, #168]	; (8025c18 <__swsetup_r+0xac>)
 8025b70:	4605      	mov	r5, r0
 8025b72:	460c      	mov	r4, r1
 8025b74:	6818      	ldr	r0, [r3, #0]
 8025b76:	b118      	cbz	r0, 8025b80 <__swsetup_r+0x14>
 8025b78:	6a03      	ldr	r3, [r0, #32]
 8025b7a:	b90b      	cbnz	r3, 8025b80 <__swsetup_r+0x14>
 8025b7c:	f7fe fd58 	bl	8024630 <__sinit>
 8025b80:	89a3      	ldrh	r3, [r4, #12]
 8025b82:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8025b86:	0718      	lsls	r0, r3, #28
 8025b88:	d422      	bmi.n	8025bd0 <__swsetup_r+0x64>
 8025b8a:	06d9      	lsls	r1, r3, #27
 8025b8c:	d407      	bmi.n	8025b9e <__swsetup_r+0x32>
 8025b8e:	2309      	movs	r3, #9
 8025b90:	602b      	str	r3, [r5, #0]
 8025b92:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8025b96:	f04f 30ff 	mov.w	r0, #4294967295
 8025b9a:	81a3      	strh	r3, [r4, #12]
 8025b9c:	e034      	b.n	8025c08 <__swsetup_r+0x9c>
 8025b9e:	0758      	lsls	r0, r3, #29
 8025ba0:	d512      	bpl.n	8025bc8 <__swsetup_r+0x5c>
 8025ba2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8025ba4:	b141      	cbz	r1, 8025bb8 <__swsetup_r+0x4c>
 8025ba6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8025baa:	4299      	cmp	r1, r3
 8025bac:	d002      	beq.n	8025bb4 <__swsetup_r+0x48>
 8025bae:	4628      	mov	r0, r5
 8025bb0:	f7fe fefa 	bl	80249a8 <_free_r>
 8025bb4:	2300      	movs	r3, #0
 8025bb6:	6363      	str	r3, [r4, #52]	; 0x34
 8025bb8:	89a3      	ldrh	r3, [r4, #12]
 8025bba:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8025bbe:	81a3      	strh	r3, [r4, #12]
 8025bc0:	2300      	movs	r3, #0
 8025bc2:	6063      	str	r3, [r4, #4]
 8025bc4:	6923      	ldr	r3, [r4, #16]
 8025bc6:	6023      	str	r3, [r4, #0]
 8025bc8:	89a3      	ldrh	r3, [r4, #12]
 8025bca:	f043 0308 	orr.w	r3, r3, #8
 8025bce:	81a3      	strh	r3, [r4, #12]
 8025bd0:	6923      	ldr	r3, [r4, #16]
 8025bd2:	b94b      	cbnz	r3, 8025be8 <__swsetup_r+0x7c>
 8025bd4:	89a3      	ldrh	r3, [r4, #12]
 8025bd6:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8025bda:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8025bde:	d003      	beq.n	8025be8 <__swsetup_r+0x7c>
 8025be0:	4621      	mov	r1, r4
 8025be2:	4628      	mov	r0, r5
 8025be4:	f000 f847 	bl	8025c76 <__smakebuf_r>
 8025be8:	89a0      	ldrh	r0, [r4, #12]
 8025bea:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8025bee:	f010 0301 	ands.w	r3, r0, #1
 8025bf2:	d00a      	beq.n	8025c0a <__swsetup_r+0x9e>
 8025bf4:	2300      	movs	r3, #0
 8025bf6:	60a3      	str	r3, [r4, #8]
 8025bf8:	6963      	ldr	r3, [r4, #20]
 8025bfa:	425b      	negs	r3, r3
 8025bfc:	61a3      	str	r3, [r4, #24]
 8025bfe:	6923      	ldr	r3, [r4, #16]
 8025c00:	b943      	cbnz	r3, 8025c14 <__swsetup_r+0xa8>
 8025c02:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8025c06:	d1c4      	bne.n	8025b92 <__swsetup_r+0x26>
 8025c08:	bd38      	pop	{r3, r4, r5, pc}
 8025c0a:	0781      	lsls	r1, r0, #30
 8025c0c:	bf58      	it	pl
 8025c0e:	6963      	ldrpl	r3, [r4, #20]
 8025c10:	60a3      	str	r3, [r4, #8]
 8025c12:	e7f4      	b.n	8025bfe <__swsetup_r+0x92>
 8025c14:	2000      	movs	r0, #0
 8025c16:	e7f7      	b.n	8025c08 <__swsetup_r+0x9c>
 8025c18:	20000108 	.word	0x20000108

08025c1c <_malloc_usable_size_r>:
 8025c1c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8025c20:	1f18      	subs	r0, r3, #4
 8025c22:	2b00      	cmp	r3, #0
 8025c24:	bfbc      	itt	lt
 8025c26:	580b      	ldrlt	r3, [r1, r0]
 8025c28:	18c0      	addlt	r0, r0, r3
 8025c2a:	4770      	bx	lr

08025c2c <__swhatbuf_r>:
 8025c2c:	b570      	push	{r4, r5, r6, lr}
 8025c2e:	460c      	mov	r4, r1
 8025c30:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8025c34:	b096      	sub	sp, #88	; 0x58
 8025c36:	4615      	mov	r5, r2
 8025c38:	2900      	cmp	r1, #0
 8025c3a:	461e      	mov	r6, r3
 8025c3c:	da0c      	bge.n	8025c58 <__swhatbuf_r+0x2c>
 8025c3e:	89a3      	ldrh	r3, [r4, #12]
 8025c40:	2100      	movs	r1, #0
 8025c42:	f013 0f80 	tst.w	r3, #128	; 0x80
 8025c46:	bf0c      	ite	eq
 8025c48:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8025c4c:	2340      	movne	r3, #64	; 0x40
 8025c4e:	2000      	movs	r0, #0
 8025c50:	6031      	str	r1, [r6, #0]
 8025c52:	602b      	str	r3, [r5, #0]
 8025c54:	b016      	add	sp, #88	; 0x58
 8025c56:	bd70      	pop	{r4, r5, r6, pc}
 8025c58:	466a      	mov	r2, sp
 8025c5a:	f000 f849 	bl	8025cf0 <_fstat_r>
 8025c5e:	2800      	cmp	r0, #0
 8025c60:	dbed      	blt.n	8025c3e <__swhatbuf_r+0x12>
 8025c62:	9901      	ldr	r1, [sp, #4]
 8025c64:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8025c68:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8025c6c:	4259      	negs	r1, r3
 8025c6e:	4159      	adcs	r1, r3
 8025c70:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8025c74:	e7eb      	b.n	8025c4e <__swhatbuf_r+0x22>

08025c76 <__smakebuf_r>:
 8025c76:	898b      	ldrh	r3, [r1, #12]
 8025c78:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8025c7a:	079d      	lsls	r5, r3, #30
 8025c7c:	4606      	mov	r6, r0
 8025c7e:	460c      	mov	r4, r1
 8025c80:	d507      	bpl.n	8025c92 <__smakebuf_r+0x1c>
 8025c82:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8025c86:	6023      	str	r3, [r4, #0]
 8025c88:	6123      	str	r3, [r4, #16]
 8025c8a:	2301      	movs	r3, #1
 8025c8c:	6163      	str	r3, [r4, #20]
 8025c8e:	b002      	add	sp, #8
 8025c90:	bd70      	pop	{r4, r5, r6, pc}
 8025c92:	ab01      	add	r3, sp, #4
 8025c94:	466a      	mov	r2, sp
 8025c96:	f7ff ffc9 	bl	8025c2c <__swhatbuf_r>
 8025c9a:	9900      	ldr	r1, [sp, #0]
 8025c9c:	4605      	mov	r5, r0
 8025c9e:	4630      	mov	r0, r6
 8025ca0:	f7fe fb70 	bl	8024384 <_malloc_r>
 8025ca4:	b948      	cbnz	r0, 8025cba <__smakebuf_r+0x44>
 8025ca6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8025caa:	059a      	lsls	r2, r3, #22
 8025cac:	d4ef      	bmi.n	8025c8e <__smakebuf_r+0x18>
 8025cae:	f023 0303 	bic.w	r3, r3, #3
 8025cb2:	f043 0302 	orr.w	r3, r3, #2
 8025cb6:	81a3      	strh	r3, [r4, #12]
 8025cb8:	e7e3      	b.n	8025c82 <__smakebuf_r+0xc>
 8025cba:	89a3      	ldrh	r3, [r4, #12]
 8025cbc:	6020      	str	r0, [r4, #0]
 8025cbe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8025cc2:	6120      	str	r0, [r4, #16]
 8025cc4:	81a3      	strh	r3, [r4, #12]
 8025cc6:	9b00      	ldr	r3, [sp, #0]
 8025cc8:	6163      	str	r3, [r4, #20]
 8025cca:	9b01      	ldr	r3, [sp, #4]
 8025ccc:	b15b      	cbz	r3, 8025ce6 <__smakebuf_r+0x70>
 8025cce:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8025cd2:	4630      	mov	r0, r6
 8025cd4:	f000 f81e 	bl	8025d14 <_isatty_r>
 8025cd8:	b128      	cbz	r0, 8025ce6 <__smakebuf_r+0x70>
 8025cda:	89a3      	ldrh	r3, [r4, #12]
 8025cdc:	f023 0303 	bic.w	r3, r3, #3
 8025ce0:	f043 0301 	orr.w	r3, r3, #1
 8025ce4:	81a3      	strh	r3, [r4, #12]
 8025ce6:	89a3      	ldrh	r3, [r4, #12]
 8025ce8:	431d      	orrs	r5, r3
 8025cea:	81a5      	strh	r5, [r4, #12]
 8025cec:	e7cf      	b.n	8025c8e <__smakebuf_r+0x18>
	...

08025cf0 <_fstat_r>:
 8025cf0:	b538      	push	{r3, r4, r5, lr}
 8025cf2:	2300      	movs	r3, #0
 8025cf4:	4d06      	ldr	r5, [pc, #24]	; (8025d10 <_fstat_r+0x20>)
 8025cf6:	4604      	mov	r4, r0
 8025cf8:	4608      	mov	r0, r1
 8025cfa:	4611      	mov	r1, r2
 8025cfc:	602b      	str	r3, [r5, #0]
 8025cfe:	f7ee fab0 	bl	8014262 <_fstat>
 8025d02:	1c43      	adds	r3, r0, #1
 8025d04:	d102      	bne.n	8025d0c <_fstat_r+0x1c>
 8025d06:	682b      	ldr	r3, [r5, #0]
 8025d08:	b103      	cbz	r3, 8025d0c <_fstat_r+0x1c>
 8025d0a:	6023      	str	r3, [r4, #0]
 8025d0c:	bd38      	pop	{r3, r4, r5, pc}
 8025d0e:	bf00      	nop
 8025d10:	20005e80 	.word	0x20005e80

08025d14 <_isatty_r>:
 8025d14:	b538      	push	{r3, r4, r5, lr}
 8025d16:	2300      	movs	r3, #0
 8025d18:	4d05      	ldr	r5, [pc, #20]	; (8025d30 <_isatty_r+0x1c>)
 8025d1a:	4604      	mov	r4, r0
 8025d1c:	4608      	mov	r0, r1
 8025d1e:	602b      	str	r3, [r5, #0]
 8025d20:	f7ee faaf 	bl	8014282 <_isatty>
 8025d24:	1c43      	adds	r3, r0, #1
 8025d26:	d102      	bne.n	8025d2e <_isatty_r+0x1a>
 8025d28:	682b      	ldr	r3, [r5, #0]
 8025d2a:	b103      	cbz	r3, 8025d2e <_isatty_r+0x1a>
 8025d2c:	6023      	str	r3, [r4, #0]
 8025d2e:	bd38      	pop	{r3, r4, r5, pc}
 8025d30:	20005e80 	.word	0x20005e80

08025d34 <_init>:
 8025d34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8025d36:	bf00      	nop
 8025d38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8025d3a:	bc08      	pop	{r3}
 8025d3c:	469e      	mov	lr, r3
 8025d3e:	4770      	bx	lr

08025d40 <_fini>:
 8025d40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8025d42:	bf00      	nop
 8025d44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8025d46:	bc08      	pop	{r3}
 8025d48:	469e      	mov	lr, r3
 8025d4a:	4770      	bx	lr
