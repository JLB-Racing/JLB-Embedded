
JLBRacing2024.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e1bc  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000234  0800e3bc  0800e3bc  0001e3bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e5f0  0800e5f0  00020064  2**0
                  CONTENTS
  4 .ARM          00000008  0800e5f0  0800e5f0  0001e5f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e5f8  0800e5f8  00020064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e5f8  0800e5f8  0001e5f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e5fc  0800e5fc  0001e5fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000064  20000000  0800e600  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000037a8  20000064  0800e664  00020064  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000380c  0800e664  0002380c  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002009a  2**0
                  CONTENTS, READONLY
 13 .debug_info   00032451  00000000  00000000  000200dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00005ff7  00000000  00000000  0005252e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002a50  00000000  00000000  00058528  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000020d2  00000000  00000000  0005af78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00033295  00000000  00000000  0005d04a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0003264c  00000000  00000000  000902df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00145864  00000000  00000000  000c292b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000bc00  00000000  00000000  00208190  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  00213d90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000064 	.word	0x20000064
 800021c:	00000000 	.word	0x00000000
 8000220:	0800e3a4 	.word	0x0800e3a4

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000068 	.word	0x20000068
 800023c:	0800e3a4 	.word	0x0800e3a4

08000240 <strcmp>:
 8000240:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000244:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000248:	2a01      	cmp	r2, #1
 800024a:	bf28      	it	cs
 800024c:	429a      	cmpcs	r2, r3
 800024e:	d0f7      	beq.n	8000240 <strcmp>
 8000250:	1ad0      	subs	r0, r2, r3
 8000252:	4770      	bx	lr

08000254 <strlen>:
 8000254:	4603      	mov	r3, r0
 8000256:	f813 2b01 	ldrb.w	r2, [r3], #1
 800025a:	2a00      	cmp	r2, #0
 800025c:	d1fb      	bne.n	8000256 <strlen+0x2>
 800025e:	1a18      	subs	r0, r3, r0
 8000260:	3801      	subs	r0, #1
 8000262:	4770      	bx	lr

08000264 <__aeabi_uldivmod>:
 8000264:	b953      	cbnz	r3, 800027c <__aeabi_uldivmod+0x18>
 8000266:	b94a      	cbnz	r2, 800027c <__aeabi_uldivmod+0x18>
 8000268:	2900      	cmp	r1, #0
 800026a:	bf08      	it	eq
 800026c:	2800      	cmpeq	r0, #0
 800026e:	bf1c      	itt	ne
 8000270:	f04f 31ff 	movne.w	r1, #4294967295
 8000274:	f04f 30ff 	movne.w	r0, #4294967295
 8000278:	f000 b982 	b.w	8000580 <__aeabi_idiv0>
 800027c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000280:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000284:	f000 f806 	bl	8000294 <__udivmoddi4>
 8000288:	f8dd e004 	ldr.w	lr, [sp, #4]
 800028c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000290:	b004      	add	sp, #16
 8000292:	4770      	bx	lr

08000294 <__udivmoddi4>:
 8000294:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000298:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800029a:	460d      	mov	r5, r1
 800029c:	4604      	mov	r4, r0
 800029e:	460f      	mov	r7, r1
 80002a0:	2b00      	cmp	r3, #0
 80002a2:	d146      	bne.n	8000332 <__udivmoddi4+0x9e>
 80002a4:	428a      	cmp	r2, r1
 80002a6:	4694      	mov	ip, r2
 80002a8:	d95e      	bls.n	8000368 <__udivmoddi4+0xd4>
 80002aa:	fab2 f382 	clz	r3, r2
 80002ae:	b143      	cbz	r3, 80002c2 <__udivmoddi4+0x2e>
 80002b0:	fa02 fc03 	lsl.w	ip, r2, r3
 80002b4:	f1c3 0220 	rsb	r2, r3, #32
 80002b8:	409f      	lsls	r7, r3
 80002ba:	409c      	lsls	r4, r3
 80002bc:	fa20 f202 	lsr.w	r2, r0, r2
 80002c0:	4317      	orrs	r7, r2
 80002c2:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002c6:	fa1f f58c 	uxth.w	r5, ip
 80002ca:	0c22      	lsrs	r2, r4, #16
 80002cc:	fbb7 f1fe 	udiv	r1, r7, lr
 80002d0:	fb0e 7711 	mls	r7, lr, r1, r7
 80002d4:	fb01 f005 	mul.w	r0, r1, r5
 80002d8:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002dc:	4290      	cmp	r0, r2
 80002de:	d908      	bls.n	80002f2 <__udivmoddi4+0x5e>
 80002e0:	eb1c 0202 	adds.w	r2, ip, r2
 80002e4:	f101 37ff 	add.w	r7, r1, #4294967295
 80002e8:	d202      	bcs.n	80002f0 <__udivmoddi4+0x5c>
 80002ea:	4290      	cmp	r0, r2
 80002ec:	f200 8134 	bhi.w	8000558 <__udivmoddi4+0x2c4>
 80002f0:	4639      	mov	r1, r7
 80002f2:	1a12      	subs	r2, r2, r0
 80002f4:	b2a4      	uxth	r4, r4
 80002f6:	fbb2 f0fe 	udiv	r0, r2, lr
 80002fa:	fb0e 2210 	mls	r2, lr, r0, r2
 80002fe:	fb00 f505 	mul.w	r5, r0, r5
 8000302:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000306:	42a5      	cmp	r5, r4
 8000308:	d908      	bls.n	800031c <__udivmoddi4+0x88>
 800030a:	eb1c 0404 	adds.w	r4, ip, r4
 800030e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x86>
 8000314:	42a5      	cmp	r5, r4
 8000316:	f200 8119 	bhi.w	800054c <__udivmoddi4+0x2b8>
 800031a:	4610      	mov	r0, r2
 800031c:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000320:	1b64      	subs	r4, r4, r5
 8000322:	2100      	movs	r1, #0
 8000324:	b11e      	cbz	r6, 800032e <__udivmoddi4+0x9a>
 8000326:	40dc      	lsrs	r4, r3
 8000328:	2300      	movs	r3, #0
 800032a:	e9c6 4300 	strd	r4, r3, [r6]
 800032e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000332:	428b      	cmp	r3, r1
 8000334:	d908      	bls.n	8000348 <__udivmoddi4+0xb4>
 8000336:	2e00      	cmp	r6, #0
 8000338:	f000 80fc 	beq.w	8000534 <__udivmoddi4+0x2a0>
 800033c:	2100      	movs	r1, #0
 800033e:	e9c6 0500 	strd	r0, r5, [r6]
 8000342:	4608      	mov	r0, r1
 8000344:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000348:	fab3 f183 	clz	r1, r3
 800034c:	2900      	cmp	r1, #0
 800034e:	d14c      	bne.n	80003ea <__udivmoddi4+0x156>
 8000350:	42ab      	cmp	r3, r5
 8000352:	f0c0 80f2 	bcc.w	800053a <__udivmoddi4+0x2a6>
 8000356:	4282      	cmp	r2, r0
 8000358:	f240 80ef 	bls.w	800053a <__udivmoddi4+0x2a6>
 800035c:	4608      	mov	r0, r1
 800035e:	2e00      	cmp	r6, #0
 8000360:	d0e5      	beq.n	800032e <__udivmoddi4+0x9a>
 8000362:	e9c6 4700 	strd	r4, r7, [r6]
 8000366:	e7e2      	b.n	800032e <__udivmoddi4+0x9a>
 8000368:	b902      	cbnz	r2, 800036c <__udivmoddi4+0xd8>
 800036a:	deff      	udf	#255	; 0xff
 800036c:	fab2 f382 	clz	r3, r2
 8000370:	2b00      	cmp	r3, #0
 8000372:	f040 809f 	bne.w	80004b4 <__udivmoddi4+0x220>
 8000376:	1a8a      	subs	r2, r1, r2
 8000378:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800037c:	fa1f f78c 	uxth.w	r7, ip
 8000380:	2101      	movs	r1, #1
 8000382:	fbb2 f5fe 	udiv	r5, r2, lr
 8000386:	fb0e 2015 	mls	r0, lr, r5, r2
 800038a:	0c22      	lsrs	r2, r4, #16
 800038c:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000390:	fb07 f005 	mul.w	r0, r7, r5
 8000394:	4290      	cmp	r0, r2
 8000396:	d90f      	bls.n	80003b8 <__udivmoddi4+0x124>
 8000398:	eb1c 0202 	adds.w	r2, ip, r2
 800039c:	f105 38ff 	add.w	r8, r5, #4294967295
 80003a0:	bf2c      	ite	cs
 80003a2:	f04f 0901 	movcs.w	r9, #1
 80003a6:	f04f 0900 	movcc.w	r9, #0
 80003aa:	4290      	cmp	r0, r2
 80003ac:	d903      	bls.n	80003b6 <__udivmoddi4+0x122>
 80003ae:	f1b9 0f00 	cmp.w	r9, #0
 80003b2:	f000 80ce 	beq.w	8000552 <__udivmoddi4+0x2be>
 80003b6:	4645      	mov	r5, r8
 80003b8:	1a12      	subs	r2, r2, r0
 80003ba:	b2a4      	uxth	r4, r4
 80003bc:	fbb2 f0fe 	udiv	r0, r2, lr
 80003c0:	fb0e 2210 	mls	r2, lr, r0, r2
 80003c4:	fb00 f707 	mul.w	r7, r0, r7
 80003c8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003cc:	42a7      	cmp	r7, r4
 80003ce:	d908      	bls.n	80003e2 <__udivmoddi4+0x14e>
 80003d0:	eb1c 0404 	adds.w	r4, ip, r4
 80003d4:	f100 32ff 	add.w	r2, r0, #4294967295
 80003d8:	d202      	bcs.n	80003e0 <__udivmoddi4+0x14c>
 80003da:	42a7      	cmp	r7, r4
 80003dc:	f200 80b3 	bhi.w	8000546 <__udivmoddi4+0x2b2>
 80003e0:	4610      	mov	r0, r2
 80003e2:	1be4      	subs	r4, r4, r7
 80003e4:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80003e8:	e79c      	b.n	8000324 <__udivmoddi4+0x90>
 80003ea:	f1c1 0420 	rsb	r4, r1, #32
 80003ee:	408b      	lsls	r3, r1
 80003f0:	fa05 fc01 	lsl.w	ip, r5, r1
 80003f4:	fa22 f704 	lsr.w	r7, r2, r4
 80003f8:	40e5      	lsrs	r5, r4
 80003fa:	408a      	lsls	r2, r1
 80003fc:	431f      	orrs	r7, r3
 80003fe:	fa20 f304 	lsr.w	r3, r0, r4
 8000402:	4088      	lsls	r0, r1
 8000404:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000408:	ea43 030c 	orr.w	r3, r3, ip
 800040c:	fa1f fc87 	uxth.w	ip, r7
 8000410:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000414:	fbb5 fef8 	udiv	lr, r5, r8
 8000418:	fb08 551e 	mls	r5, r8, lr, r5
 800041c:	ea49 4505 	orr.w	r5, r9, r5, lsl #16
 8000420:	fb0e f90c 	mul.w	r9, lr, ip
 8000424:	45a9      	cmp	r9, r5
 8000426:	d90e      	bls.n	8000446 <__udivmoddi4+0x1b2>
 8000428:	197d      	adds	r5, r7, r5
 800042a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800042e:	bf2c      	ite	cs
 8000430:	f04f 0b01 	movcs.w	fp, #1
 8000434:	f04f 0b00 	movcc.w	fp, #0
 8000438:	45a9      	cmp	r9, r5
 800043a:	d903      	bls.n	8000444 <__udivmoddi4+0x1b0>
 800043c:	f1bb 0f00 	cmp.w	fp, #0
 8000440:	f000 808d 	beq.w	800055e <__udivmoddi4+0x2ca>
 8000444:	46d6      	mov	lr, sl
 8000446:	eba5 0509 	sub.w	r5, r5, r9
 800044a:	fa1f f983 	uxth.w	r9, r3
 800044e:	fbb5 f3f8 	udiv	r3, r5, r8
 8000452:	fb08 5513 	mls	r5, r8, r3, r5
 8000456:	fb03 fc0c 	mul.w	ip, r3, ip
 800045a:	ea49 4505 	orr.w	r5, r9, r5, lsl #16
 800045e:	45ac      	cmp	ip, r5
 8000460:	d906      	bls.n	8000470 <__udivmoddi4+0x1dc>
 8000462:	197d      	adds	r5, r7, r5
 8000464:	f103 38ff 	add.w	r8, r3, #4294967295
 8000468:	d201      	bcs.n	800046e <__udivmoddi4+0x1da>
 800046a:	45ac      	cmp	ip, r5
 800046c:	d87e      	bhi.n	800056c <__udivmoddi4+0x2d8>
 800046e:	4643      	mov	r3, r8
 8000470:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
 8000474:	eba5 050c 	sub.w	r5, r5, ip
 8000478:	fba3 9802 	umull	r9, r8, r3, r2
 800047c:	4545      	cmp	r5, r8
 800047e:	46ce      	mov	lr, r9
 8000480:	46c4      	mov	ip, r8
 8000482:	d302      	bcc.n	800048a <__udivmoddi4+0x1f6>
 8000484:	d106      	bne.n	8000494 <__udivmoddi4+0x200>
 8000486:	4548      	cmp	r0, r9
 8000488:	d204      	bcs.n	8000494 <__udivmoddi4+0x200>
 800048a:	3b01      	subs	r3, #1
 800048c:	ebb9 0e02 	subs.w	lr, r9, r2
 8000490:	eb68 0c07 	sbc.w	ip, r8, r7
 8000494:	2e00      	cmp	r6, #0
 8000496:	d06f      	beq.n	8000578 <__udivmoddi4+0x2e4>
 8000498:	ebb0 020e 	subs.w	r2, r0, lr
 800049c:	eb65 050c 	sbc.w	r5, r5, ip
 80004a0:	40ca      	lsrs	r2, r1
 80004a2:	fa05 f404 	lsl.w	r4, r5, r4
 80004a6:	40cd      	lsrs	r5, r1
 80004a8:	4618      	mov	r0, r3
 80004aa:	4314      	orrs	r4, r2
 80004ac:	2100      	movs	r1, #0
 80004ae:	e9c6 4500 	strd	r4, r5, [r6]
 80004b2:	e73c      	b.n	800032e <__udivmoddi4+0x9a>
 80004b4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004b8:	f1c3 0220 	rsb	r2, r3, #32
 80004bc:	4099      	lsls	r1, r3
 80004be:	409c      	lsls	r4, r3
 80004c0:	40d5      	lsrs	r5, r2
 80004c2:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80004c6:	fa20 f202 	lsr.w	r2, r0, r2
 80004ca:	fa1f f78c 	uxth.w	r7, ip
 80004ce:	fbb5 f0fe 	udiv	r0, r5, lr
 80004d2:	430a      	orrs	r2, r1
 80004d4:	fb0e 5510 	mls	r5, lr, r0, r5
 80004d8:	0c11      	lsrs	r1, r2, #16
 80004da:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004de:	fb00 f507 	mul.w	r5, r0, r7
 80004e2:	428d      	cmp	r5, r1
 80004e4:	d90e      	bls.n	8000504 <__udivmoddi4+0x270>
 80004e6:	eb1c 0101 	adds.w	r1, ip, r1
 80004ea:	f100 38ff 	add.w	r8, r0, #4294967295
 80004ee:	bf2c      	ite	cs
 80004f0:	f04f 0901 	movcs.w	r9, #1
 80004f4:	f04f 0900 	movcc.w	r9, #0
 80004f8:	428d      	cmp	r5, r1
 80004fa:	d902      	bls.n	8000502 <__udivmoddi4+0x26e>
 80004fc:	f1b9 0f00 	cmp.w	r9, #0
 8000500:	d031      	beq.n	8000566 <__udivmoddi4+0x2d2>
 8000502:	4640      	mov	r0, r8
 8000504:	1b49      	subs	r1, r1, r5
 8000506:	b292      	uxth	r2, r2
 8000508:	fbb1 f5fe 	udiv	r5, r1, lr
 800050c:	fb0e 1115 	mls	r1, lr, r5, r1
 8000510:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000514:	fb05 f107 	mul.w	r1, r5, r7
 8000518:	4291      	cmp	r1, r2
 800051a:	d907      	bls.n	800052c <__udivmoddi4+0x298>
 800051c:	eb1c 0202 	adds.w	r2, ip, r2
 8000520:	f105 38ff 	add.w	r8, r5, #4294967295
 8000524:	d201      	bcs.n	800052a <__udivmoddi4+0x296>
 8000526:	4291      	cmp	r1, r2
 8000528:	d823      	bhi.n	8000572 <__udivmoddi4+0x2de>
 800052a:	4645      	mov	r5, r8
 800052c:	1a52      	subs	r2, r2, r1
 800052e:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000532:	e726      	b.n	8000382 <__udivmoddi4+0xee>
 8000534:	4631      	mov	r1, r6
 8000536:	4630      	mov	r0, r6
 8000538:	e6f9      	b.n	800032e <__udivmoddi4+0x9a>
 800053a:	1a84      	subs	r4, r0, r2
 800053c:	eb65 0203 	sbc.w	r2, r5, r3
 8000540:	2001      	movs	r0, #1
 8000542:	4617      	mov	r7, r2
 8000544:	e70b      	b.n	800035e <__udivmoddi4+0xca>
 8000546:	4464      	add	r4, ip
 8000548:	3802      	subs	r0, #2
 800054a:	e74a      	b.n	80003e2 <__udivmoddi4+0x14e>
 800054c:	4464      	add	r4, ip
 800054e:	3802      	subs	r0, #2
 8000550:	e6e4      	b.n	800031c <__udivmoddi4+0x88>
 8000552:	3d02      	subs	r5, #2
 8000554:	4462      	add	r2, ip
 8000556:	e72f      	b.n	80003b8 <__udivmoddi4+0x124>
 8000558:	3902      	subs	r1, #2
 800055a:	4462      	add	r2, ip
 800055c:	e6c9      	b.n	80002f2 <__udivmoddi4+0x5e>
 800055e:	f1ae 0e02 	sub.w	lr, lr, #2
 8000562:	443d      	add	r5, r7
 8000564:	e76f      	b.n	8000446 <__udivmoddi4+0x1b2>
 8000566:	3802      	subs	r0, #2
 8000568:	4461      	add	r1, ip
 800056a:	e7cb      	b.n	8000504 <__udivmoddi4+0x270>
 800056c:	3b02      	subs	r3, #2
 800056e:	443d      	add	r5, r7
 8000570:	e77e      	b.n	8000470 <__udivmoddi4+0x1dc>
 8000572:	3d02      	subs	r5, #2
 8000574:	4462      	add	r2, ip
 8000576:	e7d9      	b.n	800052c <__udivmoddi4+0x298>
 8000578:	4618      	mov	r0, r3
 800057a:	4631      	mov	r1, r6
 800057c:	e6d7      	b.n	800032e <__udivmoddi4+0x9a>
 800057e:	bf00      	nop

08000580 <__aeabi_idiv0>:
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop

08000584 <HAL_ADC_ConvCpltCallback>:
extern uint32_t adc_values_raw[8];
analog_signals_s adc_values = {0u};
uint8_t channel_idx = 0;

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8000584:	b480      	push	{r7}
 8000586:	b083      	sub	sp, #12
 8000588:	af00      	add	r7, sp, #0
 800058a:	6078      	str	r0, [r7, #4]
	adc_values.motor_batt_voltage_raw = adc_values_raw[0];
 800058c:	4b16      	ldr	r3, [pc, #88]	; (80005e8 <HAL_ADC_ConvCpltCallback+0x64>)
 800058e:	681b      	ldr	r3, [r3, #0]
 8000590:	b29a      	uxth	r2, r3
 8000592:	4b16      	ldr	r3, [pc, #88]	; (80005ec <HAL_ADC_ConvCpltCallback+0x68>)
 8000594:	801a      	strh	r2, [r3, #0]
	adc_values.motor_curr_raw = adc_values_raw[1];
 8000596:	4b14      	ldr	r3, [pc, #80]	; (80005e8 <HAL_ADC_ConvCpltCallback+0x64>)
 8000598:	685b      	ldr	r3, [r3, #4]
 800059a:	b29a      	uxth	r2, r3
 800059c:	4b13      	ldr	r3, [pc, #76]	; (80005ec <HAL_ADC_ConvCpltCallback+0x68>)
 800059e:	805a      	strh	r2, [r3, #2]
	adc_values.vbus_raw = adc_values_raw[2];
 80005a0:	4b11      	ldr	r3, [pc, #68]	; (80005e8 <HAL_ADC_ConvCpltCallback+0x64>)
 80005a2:	689b      	ldr	r3, [r3, #8]
 80005a4:	b29a      	uxth	r2, r3
 80005a6:	4b11      	ldr	r3, [pc, #68]	; (80005ec <HAL_ADC_ConvCpltCallback+0x68>)
 80005a8:	809a      	strh	r2, [r3, #4]
	adc_values.distance_short2_raw = adc_values_raw[3];
 80005aa:	4b0f      	ldr	r3, [pc, #60]	; (80005e8 <HAL_ADC_ConvCpltCallback+0x64>)
 80005ac:	68db      	ldr	r3, [r3, #12]
 80005ae:	b29a      	uxth	r2, r3
 80005b0:	4b0e      	ldr	r3, [pc, #56]	; (80005ec <HAL_ADC_ConvCpltCallback+0x68>)
 80005b2:	80da      	strh	r2, [r3, #6]
	adc_values.distance_short1_raw = adc_values_raw[4];
 80005b4:	4b0c      	ldr	r3, [pc, #48]	; (80005e8 <HAL_ADC_ConvCpltCallback+0x64>)
 80005b6:	691b      	ldr	r3, [r3, #16]
 80005b8:	b29a      	uxth	r2, r3
 80005ba:	4b0c      	ldr	r3, [pc, #48]	; (80005ec <HAL_ADC_ConvCpltCallback+0x68>)
 80005bc:	811a      	strh	r2, [r3, #8]
	adc_values.distance_long1_raw = adc_values_raw[5];
 80005be:	4b0a      	ldr	r3, [pc, #40]	; (80005e8 <HAL_ADC_ConvCpltCallback+0x64>)
 80005c0:	695b      	ldr	r3, [r3, #20]
 80005c2:	b29a      	uxth	r2, r3
 80005c4:	4b09      	ldr	r3, [pc, #36]	; (80005ec <HAL_ADC_ConvCpltCallback+0x68>)
 80005c6:	815a      	strh	r2, [r3, #10]
	adc_values.lv_batt_voltage_raw = adc_values_raw[6];
 80005c8:	4b07      	ldr	r3, [pc, #28]	; (80005e8 <HAL_ADC_ConvCpltCallback+0x64>)
 80005ca:	699b      	ldr	r3, [r3, #24]
 80005cc:	b29a      	uxth	r2, r3
 80005ce:	4b07      	ldr	r3, [pc, #28]	; (80005ec <HAL_ADC_ConvCpltCallback+0x68>)
 80005d0:	819a      	strh	r2, [r3, #12]
	adc_values.distance_long2_raw = adc_values_raw[7];
 80005d2:	4b05      	ldr	r3, [pc, #20]	; (80005e8 <HAL_ADC_ConvCpltCallback+0x64>)
 80005d4:	69db      	ldr	r3, [r3, #28]
 80005d6:	b29a      	uxth	r2, r3
 80005d8:	4b04      	ldr	r3, [pc, #16]	; (80005ec <HAL_ADC_ConvCpltCallback+0x68>)
 80005da:	81da      	strh	r2, [r3, #14]

	//TODO: enable run in  analog signal dependent tasks
}
 80005dc:	bf00      	nop
 80005de:	370c      	adds	r7, #12
 80005e0:	46bd      	mov	sp, r7
 80005e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e6:	4770      	bx	lr
 80005e8:	20000904 	.word	0x20000904
 80005ec:	20000080 	.word	0x20000080

080005f0 <Radio_Init>:
bool flood_active = false;
uint8_t flood_counter = 0;
char pirate_from, pirate_to, pirate_next;
int pirate_percentage = 0;
void Radio_Init()
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	af00      	add	r7, sp, #0
    HAL_UART_Receive_IT (&huart4, radio_rxBuffer, 12);
 80005f4:	220c      	movs	r2, #12
 80005f6:	4903      	ldr	r1, [pc, #12]	; (8000604 <Radio_Init+0x14>)
 80005f8:	4803      	ldr	r0, [pc, #12]	; (8000608 <Radio_Init+0x18>)
 80005fa:	f008 fae1 	bl	8008bc0 <HAL_UART_Receive_IT>

}
 80005fe:	bf00      	nop
 8000600:	bd80      	pop	{r7, pc}
 8000602:	bf00      	nop
 8000604:	20000090 	.word	0x20000090
 8000608:	20000260 	.word	0x20000260

0800060c <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	b086      	sub	sp, #24
 8000610:	af02      	add	r7, sp, #8
 8000612:	6078      	str	r0, [r7, #4]
	uint8_t i, length;
    HAL_UART_Receive_IT(&huart4, radio_rxBuffer, 12);
 8000614:	220c      	movs	r2, #12
 8000616:	4922      	ldr	r1, [pc, #136]	; (80006a0 <HAL_UART_RxCpltCallback+0x94>)
 8000618:	4822      	ldr	r0, [pc, #136]	; (80006a4 <HAL_UART_RxCpltCallback+0x98>)
 800061a:	f008 fad1 	bl	8008bc0 <HAL_UART_Receive_IT>
    // Check to see where is the termination character to determine what type of message is received
    for(i = 0; i < 12; ++i)
 800061e:	2300      	movs	r3, #0
 8000620:	73fb      	strb	r3, [r7, #15]
 8000622:	e009      	b.n	8000638 <HAL_UART_RxCpltCallback+0x2c>
    {
    	if(radio_rxBuffer[i] == '\r')
 8000624:	7bfb      	ldrb	r3, [r7, #15]
 8000626:	4a1e      	ldr	r2, [pc, #120]	; (80006a0 <HAL_UART_RxCpltCallback+0x94>)
 8000628:	5cd3      	ldrb	r3, [r2, r3]
 800062a:	2b0d      	cmp	r3, #13
 800062c:	d101      	bne.n	8000632 <HAL_UART_RxCpltCallback+0x26>
    	{
    		length = i;
 800062e:	7bfb      	ldrb	r3, [r7, #15]
 8000630:	73bb      	strb	r3, [r7, #14]
    for(i = 0; i < 12; ++i)
 8000632:	7bfb      	ldrb	r3, [r7, #15]
 8000634:	3301      	adds	r3, #1
 8000636:	73fb      	strb	r3, [r7, #15]
 8000638:	7bfb      	ldrb	r3, [r7, #15]
 800063a:	2b0b      	cmp	r3, #11
 800063c:	d9f2      	bls.n	8000624 <HAL_UART_RxCpltCallback+0x18>
    	}
    }
    // Labirinth countdown message received
    if(length == 1)
 800063e:	7bbb      	ldrb	r3, [r7, #14]
 8000640:	2b01      	cmp	r3, #1
 8000642:	d103      	bne.n	800064c <HAL_UART_RxCpltCallback+0x40>
    {
    	countdown_value = radio_rxBuffer[0];
 8000644:	4b16      	ldr	r3, [pc, #88]	; (80006a0 <HAL_UART_RxCpltCallback+0x94>)
 8000646:	781a      	ldrb	r2, [r3, #0]
 8000648:	4b17      	ldr	r3, [pc, #92]	; (80006a8 <HAL_UART_RxCpltCallback+0x9c>)
 800064a:	701a      	strb	r2, [r3, #0]
    }
    if(length == 6)
 800064c:	7bbb      	ldrb	r3, [r7, #14]
 800064e:	2b06      	cmp	r3, #6
 8000650:	d115      	bne.n	800067e <HAL_UART_RxCpltCallback+0x72>
    {
    	//FLOOD message received
    	if(!strcmp("FLOOD!\r", radio_rxBuffer))
 8000652:	4913      	ldr	r1, [pc, #76]	; (80006a0 <HAL_UART_RxCpltCallback+0x94>)
 8000654:	4815      	ldr	r0, [pc, #84]	; (80006ac <HAL_UART_RxCpltCallback+0xa0>)
 8000656:	f7ff fdf3 	bl	8000240 <strcmp>
 800065a:	4603      	mov	r3, r0
 800065c:	2b00      	cmp	r3, #0
 800065e:	d103      	bne.n	8000668 <HAL_UART_RxCpltCallback+0x5c>
    	{
    		flood_active = true;
 8000660:	4b13      	ldr	r3, [pc, #76]	; (80006b0 <HAL_UART_RxCpltCallback+0xa4>)
 8000662:	2201      	movs	r2, #1
 8000664:	701a      	strb	r2, [r3, #0]
 8000666:	e010      	b.n	800068a <HAL_UART_RxCpltCallback+0x7e>
    	}
    	else
    	{
    		sscanf(radio_rxBuffer, "%c%c%c%03d", &pirate_from, &pirate_to, &pirate_next, &pirate_percentage);
 8000668:	4b12      	ldr	r3, [pc, #72]	; (80006b4 <HAL_UART_RxCpltCallback+0xa8>)
 800066a:	9301      	str	r3, [sp, #4]
 800066c:	4b12      	ldr	r3, [pc, #72]	; (80006b8 <HAL_UART_RxCpltCallback+0xac>)
 800066e:	9300      	str	r3, [sp, #0]
 8000670:	4b12      	ldr	r3, [pc, #72]	; (80006bc <HAL_UART_RxCpltCallback+0xb0>)
 8000672:	4a13      	ldr	r2, [pc, #76]	; (80006c0 <HAL_UART_RxCpltCallback+0xb4>)
 8000674:	4913      	ldr	r1, [pc, #76]	; (80006c4 <HAL_UART_RxCpltCallback+0xb8>)
 8000676:	480a      	ldr	r0, [pc, #40]	; (80006a0 <HAL_UART_RxCpltCallback+0x94>)
 8000678:	f00d f850 	bl	800d71c <siscanf>
 800067c:	e005      	b.n	800068a <HAL_UART_RxCpltCallback+0x7e>
    	}
    }

    else
    {
    	flood_counter++;
 800067e:	4b12      	ldr	r3, [pc, #72]	; (80006c8 <HAL_UART_RxCpltCallback+0xbc>)
 8000680:	781b      	ldrb	r3, [r3, #0]
 8000682:	3301      	adds	r3, #1
 8000684:	b2da      	uxtb	r2, r3
 8000686:	4b10      	ldr	r3, [pc, #64]	; (80006c8 <HAL_UART_RxCpltCallback+0xbc>)
 8000688:	701a      	strb	r2, [r3, #0]
    }

    if(flood_counter > 10)
 800068a:	4b0f      	ldr	r3, [pc, #60]	; (80006c8 <HAL_UART_RxCpltCallback+0xbc>)
 800068c:	781b      	ldrb	r3, [r3, #0]
 800068e:	2b0a      	cmp	r3, #10
 8000690:	d902      	bls.n	8000698 <HAL_UART_RxCpltCallback+0x8c>
    {
    	flood_active = false;
 8000692:	4b07      	ldr	r3, [pc, #28]	; (80006b0 <HAL_UART_RxCpltCallback+0xa4>)
 8000694:	2200      	movs	r2, #0
 8000696:	701a      	strb	r2, [r3, #0]
    }

}
 8000698:	bf00      	nop
 800069a:	3710      	adds	r7, #16
 800069c:	46bd      	mov	sp, r7
 800069e:	bd80      	pop	{r7, pc}
 80006a0:	20000090 	.word	0x20000090
 80006a4:	20000260 	.word	0x20000260
 80006a8:	20000000 	.word	0x20000000
 80006ac:	0800e3bc 	.word	0x0800e3bc
 80006b0:	2000009c 	.word	0x2000009c
 80006b4:	200000a4 	.word	0x200000a4
 80006b8:	200000a0 	.word	0x200000a0
 80006bc:	2000009f 	.word	0x2000009f
 80006c0:	2000009e 	.word	0x2000009e
 80006c4:	0800e3c4 	.word	0x0800e3c4
 80006c8:	2000009d 	.word	0x2000009d

080006cc <ADCTask>:
#include "cmsis_os.h"

extern uint32_t adc_values_raw[8];
extern ADC_HandleTypeDef hadc1;
void ADCTask(void *argument)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	b084      	sub	sp, #16
 80006d0:	af00      	add	r7, sp, #0
 80006d2:	6078      	str	r0, [r7, #4]
	TickType_t xLastWakeTime;
	xLastWakeTime = xTaskGetTickCount();
 80006d4:	f00b fdb4 	bl	800c240 <xTaskGetTickCount>
 80006d8:	4603      	mov	r3, r0
 80006da:	60fb      	str	r3, [r7, #12]
	for (;;)
	{
		HAL_ADC_Start_DMA(&hadc1, adc_values_raw, 8u);
 80006dc:	2208      	movs	r2, #8
 80006de:	4905      	ldr	r1, [pc, #20]	; (80006f4 <ADCTask+0x28>)
 80006e0:	4805      	ldr	r0, [pc, #20]	; (80006f8 <ADCTask+0x2c>)
 80006e2:	f002 fa89 	bl	8002bf8 <HAL_ADC_Start_DMA>
		vTaskDelayUntil(&xLastWakeTime, 5u);
 80006e6:	f107 030c 	add.w	r3, r7, #12
 80006ea:	2105      	movs	r1, #5
 80006ec:	4618      	mov	r0, r3
 80006ee:	f00b fc57 	bl	800bfa0 <vTaskDelayUntil>
		HAL_ADC_Start_DMA(&hadc1, adc_values_raw, 8u);
 80006f2:	e7f3      	b.n	80006dc <ADCTask+0x10>
 80006f4:	20000904 	.word	0x20000904
 80006f8:	200000a8 	.word	0x200000a8

080006fc <LL_AHB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 80006fc:	b480      	push	{r7}
 80006fe:	b085      	sub	sp, #20
 8000700:	af00      	add	r7, sp, #0
 8000702:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000704:	4b08      	ldr	r3, [pc, #32]	; (8000728 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8000706:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000708:	4907      	ldr	r1, [pc, #28]	; (8000728 <LL_AHB2_GRP1_EnableClock+0x2c>)
 800070a:	687b      	ldr	r3, [r7, #4]
 800070c:	4313      	orrs	r3, r2
 800070e:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000710:	4b05      	ldr	r3, [pc, #20]	; (8000728 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8000712:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	4013      	ands	r3, r2
 8000718:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800071a:	68fb      	ldr	r3, [r7, #12]
}
 800071c:	bf00      	nop
 800071e:	3714      	adds	r7, #20
 8000720:	46bd      	mov	sp, r7
 8000722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000726:	4770      	bx	lr
 8000728:	40021000 	.word	0x40021000

0800072c <LL_APB1_GRP2_EnableClock>:
  *         @arg @ref LL_APB1_GRP2_PERIPH_USB
  *         @arg @ref LL_APB1_GRP2_PERIPH_UCPD1
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP2_EnableClock(uint32_t Periphs)
{
 800072c:	b480      	push	{r7}
 800072e:	b085      	sub	sp, #20
 8000730:	af00      	add	r7, sp, #0
 8000732:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR2, Periphs);
 8000734:	4b08      	ldr	r3, [pc, #32]	; (8000758 <LL_APB1_GRP2_EnableClock+0x2c>)
 8000736:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8000738:	4907      	ldr	r1, [pc, #28]	; (8000758 <LL_APB1_GRP2_EnableClock+0x2c>)
 800073a:	687b      	ldr	r3, [r7, #4]
 800073c:	4313      	orrs	r3, r2
 800073e:	65cb      	str	r3, [r1, #92]	; 0x5c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR2, Periphs);
 8000740:	4b05      	ldr	r3, [pc, #20]	; (8000758 <LL_APB1_GRP2_EnableClock+0x2c>)
 8000742:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	4013      	ands	r3, r2
 8000748:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800074a:	68fb      	ldr	r3, [r7, #12]
}
 800074c:	bf00      	nop
 800074e:	3714      	adds	r7, #20
 8000750:	46bd      	mov	sp, r7
 8000752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000756:	4770      	bx	lr
 8000758:	40021000 	.word	0x40021000

0800075c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000760:	f001 fe93 	bl	800248a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000764:	f000 f856 	bl	8000814 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000768:	f000 fe5a 	bl	8001420 <MX_GPIO_Init>
  MX_DMA_Init();
 800076c:	f000 fe2e 	bl	80013cc <MX_DMA_Init>
  MX_LPUART1_UART_Init();
 8000770:	f000 f9f6 	bl	8000b60 <MX_LPUART1_UART_Init>
  MX_RTC_Init();
 8000774:	f000 fada 	bl	8000d2c <MX_RTC_Init>
  MX_UCPD1_Init();
 8000778:	f000 fdca 	bl	8001310 <MX_UCPD1_Init>
  MX_USB_PCD_Init();
 800077c:	f000 fdfe 	bl	800137c <MX_USB_PCD_Init>
  MX_UART4_Init();
 8000780:	f000 fa3c 	bl	8000bfc <MX_UART4_Init>
  MX_SPI1_Init();
 8000784:	f000 fb1c 	bl	8000dc0 <MX_SPI1_Init>
  MX_SPI2_Init();
 8000788:	f000 fb58 	bl	8000e3c <MX_SPI2_Init>
  MX_SPI3_Init();
 800078c:	f000 fb94 	bl	8000eb8 <MX_SPI3_Init>
  MX_TIM1_Init();
 8000790:	f000 fbd0 	bl	8000f34 <MX_TIM1_Init>
  MX_TIM3_Init();
 8000794:	f000 fcae 	bl	80010f4 <MX_TIM3_Init>
  MX_USART2_UART_Init();
 8000798:	f000 fa7c 	bl	8000c94 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 800079c:	f000 f89c 	bl	80008d8 <MX_ADC1_Init>
  MX_TIM5_Init();
 80007a0:	f000 fcfe 	bl	80011a0 <MX_TIM5_Init>
  MX_I2C1_Init();
 80007a4:	f000 f988 	bl	8000ab8 <MX_I2C1_Init>
  MX_ICACHE_Init();
 80007a8:	f000 f9c6 	bl	8000b38 <MX_ICACHE_Init>
  MX_TIM6_Init();
 80007ac:	f000 fd7a 	bl	80012a4 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */
	Radio_Init();
 80007b0:	f7ff ff1e 	bl	80005f0 <Radio_Init>
	HAL_ADC_Start_DMA(&hadc1, adc_values_raw, 8u);
 80007b4:	2208      	movs	r2, #8
 80007b6:	490e      	ldr	r1, [pc, #56]	; (80007f0 <main+0x94>)
 80007b8:	480e      	ldr	r0, [pc, #56]	; (80007f4 <main+0x98>)
 80007ba:	f002 fa1d 	bl	8002bf8 <HAL_ADC_Start_DMA>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80007be:	2100      	movs	r1, #0
 80007c0:	480d      	ldr	r0, [pc, #52]	; (80007f8 <main+0x9c>)
 80007c2:	f006 fd43 	bl	800724c <HAL_TIM_PWM_Start>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80007c6:	f00a fc7f 	bl	800b0c8 <osKernelInitialize>
	/* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80007ca:	4a0c      	ldr	r2, [pc, #48]	; (80007fc <main+0xa0>)
 80007cc:	2100      	movs	r1, #0
 80007ce:	480c      	ldr	r0, [pc, #48]	; (8000800 <main+0xa4>)
 80007d0:	f00a fcc4 	bl	800b15c <osThreadNew>
 80007d4:	4603      	mov	r3, r0
 80007d6:	4a0b      	ldr	r2, [pc, #44]	; (8000804 <main+0xa8>)
 80007d8:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
	/* add threads, ... */
  adcTaskHandle = osThreadNew(ADCTask, NULL, &adcTask_attributes);
 80007da:	4a0b      	ldr	r2, [pc, #44]	; (8000808 <main+0xac>)
 80007dc:	2100      	movs	r1, #0
 80007de:	480b      	ldr	r0, [pc, #44]	; (800080c <main+0xb0>)
 80007e0:	f00a fcbc 	bl	800b15c <osThreadNew>
 80007e4:	4603      	mov	r3, r0
 80007e6:	4a0a      	ldr	r2, [pc, #40]	; (8000810 <main+0xb4>)
 80007e8:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
	/* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80007ea:	f00a fc91 	bl	800b110 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
 80007ee:	e7fe      	b.n	80007ee <main+0x92>
 80007f0:	20000904 	.word	0x20000904
 80007f4:	200000a8 	.word	0x200000a8
 80007f8:	200004dc 	.word	0x200004dc
 80007fc:	0800e408 	.word	0x0800e408
 8000800:	08001685 	.word	0x08001685
 8000804:	20000900 	.word	0x20000900
 8000808:	0800e42c 	.word	0x0800e42c
 800080c:	080006cd 	.word	0x080006cd
 8000810:	20000924 	.word	0x20000924

08000814 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	b098      	sub	sp, #96	; 0x60
 8000818:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800081a:	f107 0318 	add.w	r3, r7, #24
 800081e:	2248      	movs	r2, #72	; 0x48
 8000820:	2100      	movs	r1, #0
 8000822:	4618      	mov	r0, r3
 8000824:	f00c ffa8 	bl	800d778 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000828:	1d3b      	adds	r3, r7, #4
 800082a:	2200      	movs	r2, #0
 800082c:	601a      	str	r2, [r3, #0]
 800082e:	605a      	str	r2, [r3, #4]
 8000830:	609a      	str	r2, [r3, #8]
 8000832:	60da      	str	r2, [r3, #12]
 8000834:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE0) != HAL_OK)
 8000836:	2000      	movs	r0, #0
 8000838:	f004 fc70 	bl	800511c <HAL_PWREx_ControlVoltageScaling>
 800083c:	4603      	mov	r3, r0
 800083e:	2b00      	cmp	r3, #0
 8000840:	d001      	beq.n	8000846 <SystemClock_Config+0x32>
  {
    Error_Handler();
 8000842:	f000 ff44 	bl	80016ce <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000846:	f004 fc4b 	bl	80050e0 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 800084a:	4b22      	ldr	r3, [pc, #136]	; (80008d4 <SystemClock_Config+0xc0>)
 800084c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000850:	4a20      	ldr	r2, [pc, #128]	; (80008d4 <SystemClock_Config+0xc0>)
 8000852:	f023 0318 	bic.w	r3, r3, #24
 8000856:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_LSE
 800085a:	2334      	movs	r3, #52	; 0x34
 800085c:	61bb      	str	r3, [r7, #24]
                              |RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800085e:	2381      	movs	r3, #129	; 0x81
 8000860:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000862:	2301      	movs	r3, #1
 8000864:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000866:	2301      	movs	r3, #1
 8000868:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 800086a:	2300      	movs	r3, #0
 800086c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800086e:	2360      	movs	r3, #96	; 0x60
 8000870:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000872:	2302      	movs	r3, #2
 8000874:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000876:	2301      	movs	r3, #1
 8000878:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLM = 1;
 800087a:	2301      	movs	r3, #1
 800087c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLN = 55;
 800087e:	2337      	movs	r3, #55	; 0x37
 8000880:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000882:	2307      	movs	r3, #7
 8000884:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000886:	2302      	movs	r3, #2
 8000888:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800088a:	2302      	movs	r3, #2
 800088c:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800088e:	f107 0318 	add.w	r3, r7, #24
 8000892:	4618      	mov	r0, r3
 8000894:	f004 fcd2 	bl	800523c <HAL_RCC_OscConfig>
 8000898:	4603      	mov	r3, r0
 800089a:	2b00      	cmp	r3, #0
 800089c:	d001      	beq.n	80008a2 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 800089e:	f000 ff16 	bl	80016ce <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008a2:	230f      	movs	r3, #15
 80008a4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008a6:	2303      	movs	r3, #3
 80008a8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008aa:	2300      	movs	r3, #0
 80008ac:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80008ae:	2300      	movs	r3, #0
 80008b0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80008b2:	2300      	movs	r3, #0
 80008b4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80008b6:	1d3b      	adds	r3, r7, #4
 80008b8:	2105      	movs	r1, #5
 80008ba:	4618      	mov	r0, r3
 80008bc:	f005 f994 	bl	8005be8 <HAL_RCC_ClockConfig>
 80008c0:	4603      	mov	r3, r0
 80008c2:	2b00      	cmp	r3, #0
 80008c4:	d001      	beq.n	80008ca <SystemClock_Config+0xb6>
  {
    Error_Handler();
 80008c6:	f000 ff02 	bl	80016ce <Error_Handler>
  }
}
 80008ca:	bf00      	nop
 80008cc:	3760      	adds	r7, #96	; 0x60
 80008ce:	46bd      	mov	sp, r7
 80008d0:	bd80      	pop	{r7, pc}
 80008d2:	bf00      	nop
 80008d4:	40021000 	.word	0x40021000

080008d8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	b08a      	sub	sp, #40	; 0x28
 80008dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80008de:	f107 031c 	add.w	r3, r7, #28
 80008e2:	2200      	movs	r2, #0
 80008e4:	601a      	str	r2, [r3, #0]
 80008e6:	605a      	str	r2, [r3, #4]
 80008e8:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80008ea:	1d3b      	adds	r3, r7, #4
 80008ec:	2200      	movs	r2, #0
 80008ee:	601a      	str	r2, [r3, #0]
 80008f0:	605a      	str	r2, [r3, #4]
 80008f2:	609a      	str	r2, [r3, #8]
 80008f4:	60da      	str	r2, [r3, #12]
 80008f6:	611a      	str	r2, [r3, #16]
 80008f8:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80008fa:	4b65      	ldr	r3, [pc, #404]	; (8000a90 <MX_ADC1_Init+0x1b8>)
 80008fc:	4a65      	ldr	r2, [pc, #404]	; (8000a94 <MX_ADC1_Init+0x1bc>)
 80008fe:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV64;
 8000900:	4b63      	ldr	r3, [pc, #396]	; (8000a90 <MX_ADC1_Init+0x1b8>)
 8000902:	f44f 1210 	mov.w	r2, #2359296	; 0x240000
 8000906:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000908:	4b61      	ldr	r3, [pc, #388]	; (8000a90 <MX_ADC1_Init+0x1b8>)
 800090a:	2200      	movs	r2, #0
 800090c:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800090e:	4b60      	ldr	r3, [pc, #384]	; (8000a90 <MX_ADC1_Init+0x1b8>)
 8000910:	2200      	movs	r2, #0
 8000912:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000914:	4b5e      	ldr	r3, [pc, #376]	; (8000a90 <MX_ADC1_Init+0x1b8>)
 8000916:	2201      	movs	r2, #1
 8000918:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 800091a:	4b5d      	ldr	r3, [pc, #372]	; (8000a90 <MX_ADC1_Init+0x1b8>)
 800091c:	2208      	movs	r2, #8
 800091e:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000920:	4b5b      	ldr	r3, [pc, #364]	; (8000a90 <MX_ADC1_Init+0x1b8>)
 8000922:	2200      	movs	r2, #0
 8000924:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000926:	4b5a      	ldr	r3, [pc, #360]	; (8000a90 <MX_ADC1_Init+0x1b8>)
 8000928:	2200      	movs	r2, #0
 800092a:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 8;
 800092c:	4b58      	ldr	r3, [pc, #352]	; (8000a90 <MX_ADC1_Init+0x1b8>)
 800092e:	2208      	movs	r2, #8
 8000930:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000932:	4b57      	ldr	r3, [pc, #348]	; (8000a90 <MX_ADC1_Init+0x1b8>)
 8000934:	2200      	movs	r2, #0
 8000936:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800093a:	4b55      	ldr	r3, [pc, #340]	; (8000a90 <MX_ADC1_Init+0x1b8>)
 800093c:	2200      	movs	r2, #0
 800093e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000940:	4b53      	ldr	r3, [pc, #332]	; (8000a90 <MX_ADC1_Init+0x1b8>)
 8000942:	2200      	movs	r2, #0
 8000944:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000946:	4b52      	ldr	r3, [pc, #328]	; (8000a90 <MX_ADC1_Init+0x1b8>)
 8000948:	2201      	movs	r2, #1
 800094a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 800094e:	4b50      	ldr	r3, [pc, #320]	; (8000a90 <MX_ADC1_Init+0x1b8>)
 8000950:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000954:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000956:	4b4e      	ldr	r3, [pc, #312]	; (8000a90 <MX_ADC1_Init+0x1b8>)
 8000958:	2200      	movs	r2, #0
 800095a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800095e:	484c      	ldr	r0, [pc, #304]	; (8000a90 <MX_ADC1_Init+0x1b8>)
 8000960:	f001 fffe 	bl	8002960 <HAL_ADC_Init>
 8000964:	4603      	mov	r3, r0
 8000966:	2b00      	cmp	r3, #0
 8000968:	d001      	beq.n	800096e <MX_ADC1_Init+0x96>
  {
    Error_Handler();
 800096a:	f000 feb0 	bl	80016ce <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800096e:	2300      	movs	r3, #0
 8000970:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000972:	f107 031c 	add.w	r3, r7, #28
 8000976:	4619      	mov	r1, r3
 8000978:	4845      	ldr	r0, [pc, #276]	; (8000a90 <MX_ADC1_Init+0x1b8>)
 800097a:	f003 fa73 	bl	8003e64 <HAL_ADCEx_MultiModeConfigChannel>
 800097e:	4603      	mov	r3, r0
 8000980:	2b00      	cmp	r3, #0
 8000982:	d001      	beq.n	8000988 <MX_ADC1_Init+0xb0>
  {
    Error_Handler();
 8000984:	f000 fea3 	bl	80016ce <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000988:	4b43      	ldr	r3, [pc, #268]	; (8000a98 <MX_ADC1_Init+0x1c0>)
 800098a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800098c:	2306      	movs	r3, #6
 800098e:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 8000990:	2307      	movs	r3, #7
 8000992:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000994:	237f      	movs	r3, #127	; 0x7f
 8000996:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000998:	2304      	movs	r3, #4
 800099a:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800099c:	2300      	movs	r3, #0
 800099e:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80009a0:	1d3b      	adds	r3, r7, #4
 80009a2:	4619      	mov	r1, r3
 80009a4:	483a      	ldr	r0, [pc, #232]	; (8000a90 <MX_ADC1_Init+0x1b8>)
 80009a6:	f002 fc13 	bl	80031d0 <HAL_ADC_ConfigChannel>
 80009aa:	4603      	mov	r3, r0
 80009ac:	2b00      	cmp	r3, #0
 80009ae:	d001      	beq.n	80009b4 <MX_ADC1_Init+0xdc>
  {
    Error_Handler();
 80009b0:	f000 fe8d 	bl	80016ce <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80009b4:	4b39      	ldr	r3, [pc, #228]	; (8000a9c <MX_ADC1_Init+0x1c4>)
 80009b6:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80009b8:	230c      	movs	r3, #12
 80009ba:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80009bc:	1d3b      	adds	r3, r7, #4
 80009be:	4619      	mov	r1, r3
 80009c0:	4833      	ldr	r0, [pc, #204]	; (8000a90 <MX_ADC1_Init+0x1b8>)
 80009c2:	f002 fc05 	bl	80031d0 <HAL_ADC_ConfigChannel>
 80009c6:	4603      	mov	r3, r0
 80009c8:	2b00      	cmp	r3, #0
 80009ca:	d001      	beq.n	80009d0 <MX_ADC1_Init+0xf8>
  {
    Error_Handler();
 80009cc:	f000 fe7f 	bl	80016ce <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80009d0:	4b33      	ldr	r3, [pc, #204]	; (8000aa0 <MX_ADC1_Init+0x1c8>)
 80009d2:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80009d4:	2312      	movs	r3, #18
 80009d6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80009d8:	1d3b      	adds	r3, r7, #4
 80009da:	4619      	mov	r1, r3
 80009dc:	482c      	ldr	r0, [pc, #176]	; (8000a90 <MX_ADC1_Init+0x1b8>)
 80009de:	f002 fbf7 	bl	80031d0 <HAL_ADC_ConfigChannel>
 80009e2:	4603      	mov	r3, r0
 80009e4:	2b00      	cmp	r3, #0
 80009e6:	d001      	beq.n	80009ec <MX_ADC1_Init+0x114>
  {
    Error_Handler();
 80009e8:	f000 fe71 	bl	80016ce <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 80009ec:	4b2d      	ldr	r3, [pc, #180]	; (8000aa4 <MX_ADC1_Init+0x1cc>)
 80009ee:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 80009f0:	2318      	movs	r3, #24
 80009f2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80009f4:	1d3b      	adds	r3, r7, #4
 80009f6:	4619      	mov	r1, r3
 80009f8:	4825      	ldr	r0, [pc, #148]	; (8000a90 <MX_ADC1_Init+0x1b8>)
 80009fa:	f002 fbe9 	bl	80031d0 <HAL_ADC_ConfigChannel>
 80009fe:	4603      	mov	r3, r0
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	d001      	beq.n	8000a08 <MX_ADC1_Init+0x130>
  {
    Error_Handler();
 8000a04:	f000 fe63 	bl	80016ce <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000a08:	4b27      	ldr	r3, [pc, #156]	; (8000aa8 <MX_ADC1_Init+0x1d0>)
 8000a0a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8000a0c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000a10:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a12:	1d3b      	adds	r3, r7, #4
 8000a14:	4619      	mov	r1, r3
 8000a16:	481e      	ldr	r0, [pc, #120]	; (8000a90 <MX_ADC1_Init+0x1b8>)
 8000a18:	f002 fbda 	bl	80031d0 <HAL_ADC_ConfigChannel>
 8000a1c:	4603      	mov	r3, r0
 8000a1e:	2b00      	cmp	r3, #0
 8000a20:	d001      	beq.n	8000a26 <MX_ADC1_Init+0x14e>
  {
    Error_Handler();
 8000a22:	f000 fe54 	bl	80016ce <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000a26:	4b21      	ldr	r3, [pc, #132]	; (8000aac <MX_ADC1_Init+0x1d4>)
 8000a28:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 8000a2a:	f44f 7383 	mov.w	r3, #262	; 0x106
 8000a2e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a30:	1d3b      	adds	r3, r7, #4
 8000a32:	4619      	mov	r1, r3
 8000a34:	4816      	ldr	r0, [pc, #88]	; (8000a90 <MX_ADC1_Init+0x1b8>)
 8000a36:	f002 fbcb 	bl	80031d0 <HAL_ADC_ConfigChannel>
 8000a3a:	4603      	mov	r3, r0
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	d001      	beq.n	8000a44 <MX_ADC1_Init+0x16c>
  {
    Error_Handler();
 8000a40:	f000 fe45 	bl	80016ce <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8000a44:	4b1a      	ldr	r3, [pc, #104]	; (8000ab0 <MX_ADC1_Init+0x1d8>)
 8000a46:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 8000a48:	f44f 7386 	mov.w	r3, #268	; 0x10c
 8000a4c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a4e:	1d3b      	adds	r3, r7, #4
 8000a50:	4619      	mov	r1, r3
 8000a52:	480f      	ldr	r0, [pc, #60]	; (8000a90 <MX_ADC1_Init+0x1b8>)
 8000a54:	f002 fbbc 	bl	80031d0 <HAL_ADC_ConfigChannel>
 8000a58:	4603      	mov	r3, r0
 8000a5a:	2b00      	cmp	r3, #0
 8000a5c:	d001      	beq.n	8000a62 <MX_ADC1_Init+0x18a>
  {
    Error_Handler();
 8000a5e:	f000 fe36 	bl	80016ce <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_16;
 8000a62:	4b14      	ldr	r3, [pc, #80]	; (8000ab4 <MX_ADC1_Init+0x1dc>)
 8000a64:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_8;
 8000a66:	f44f 7389 	mov.w	r3, #274	; 0x112
 8000a6a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a6c:	1d3b      	adds	r3, r7, #4
 8000a6e:	4619      	mov	r1, r3
 8000a70:	4807      	ldr	r0, [pc, #28]	; (8000a90 <MX_ADC1_Init+0x1b8>)
 8000a72:	f002 fbad 	bl	80031d0 <HAL_ADC_ConfigChannel>
 8000a76:	4603      	mov	r3, r0
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	d001      	beq.n	8000a80 <MX_ADC1_Init+0x1a8>
  {
    Error_Handler();
 8000a7c:	f000 fe27 	bl	80016ce <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */
	HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 8000a80:	217f      	movs	r1, #127	; 0x7f
 8000a82:	4803      	ldr	r0, [pc, #12]	; (8000a90 <MX_ADC1_Init+0x1b8>)
 8000a84:	f003 f95a 	bl	8003d3c <HAL_ADCEx_Calibration_Start>
  /* USER CODE END ADC1_Init 2 */

}
 8000a88:	bf00      	nop
 8000a8a:	3728      	adds	r7, #40	; 0x28
 8000a8c:	46bd      	mov	sp, r7
 8000a8e:	bd80      	pop	{r7, pc}
 8000a90:	200000a8 	.word	0x200000a8
 8000a94:	42028000 	.word	0x42028000
 8000a98:	04300002 	.word	0x04300002
 8000a9c:	08600004 	.word	0x08600004
 8000aa0:	0c900008 	.word	0x0c900008
 8000aa4:	1d500080 	.word	0x1d500080
 8000aa8:	21800100 	.word	0x21800100
 8000aac:	25b00200 	.word	0x25b00200
 8000ab0:	32601000 	.word	0x32601000
 8000ab4:	43210000 	.word	0x43210000

08000ab8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000abc:	4b1b      	ldr	r3, [pc, #108]	; (8000b2c <MX_I2C1_Init+0x74>)
 8000abe:	4a1c      	ldr	r2, [pc, #112]	; (8000b30 <MX_I2C1_Init+0x78>)
 8000ac0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10A21D58;
 8000ac2:	4b1a      	ldr	r3, [pc, #104]	; (8000b2c <MX_I2C1_Init+0x74>)
 8000ac4:	4a1b      	ldr	r2, [pc, #108]	; (8000b34 <MX_I2C1_Init+0x7c>)
 8000ac6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000ac8:	4b18      	ldr	r3, [pc, #96]	; (8000b2c <MX_I2C1_Init+0x74>)
 8000aca:	2200      	movs	r2, #0
 8000acc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000ace:	4b17      	ldr	r3, [pc, #92]	; (8000b2c <MX_I2C1_Init+0x74>)
 8000ad0:	2201      	movs	r2, #1
 8000ad2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000ad4:	4b15      	ldr	r3, [pc, #84]	; (8000b2c <MX_I2C1_Init+0x74>)
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000ada:	4b14      	ldr	r3, [pc, #80]	; (8000b2c <MX_I2C1_Init+0x74>)
 8000adc:	2200      	movs	r2, #0
 8000ade:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000ae0:	4b12      	ldr	r3, [pc, #72]	; (8000b2c <MX_I2C1_Init+0x74>)
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000ae6:	4b11      	ldr	r3, [pc, #68]	; (8000b2c <MX_I2C1_Init+0x74>)
 8000ae8:	2200      	movs	r2, #0
 8000aea:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000aec:	4b0f      	ldr	r3, [pc, #60]	; (8000b2c <MX_I2C1_Init+0x74>)
 8000aee:	2200      	movs	r2, #0
 8000af0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000af2:	480e      	ldr	r0, [pc, #56]	; (8000b2c <MX_I2C1_Init+0x74>)
 8000af4:	f004 f89a 	bl	8004c2c <HAL_I2C_Init>
 8000af8:	4603      	mov	r3, r0
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	d001      	beq.n	8000b02 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000afe:	f000 fde6 	bl	80016ce <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000b02:	2100      	movs	r1, #0
 8000b04:	4809      	ldr	r0, [pc, #36]	; (8000b2c <MX_I2C1_Init+0x74>)
 8000b06:	f004 f920 	bl	8004d4a <HAL_I2CEx_ConfigAnalogFilter>
 8000b0a:	4603      	mov	r3, r0
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	d001      	beq.n	8000b14 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000b10:	f000 fddd 	bl	80016ce <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000b14:	2100      	movs	r1, #0
 8000b16:	4805      	ldr	r0, [pc, #20]	; (8000b2c <MX_I2C1_Init+0x74>)
 8000b18:	f004 f962 	bl	8004de0 <HAL_I2CEx_ConfigDigitalFilter>
 8000b1c:	4603      	mov	r3, r0
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	d001      	beq.n	8000b26 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000b22:	f000 fdd4 	bl	80016ce <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000b26:	bf00      	nop
 8000b28:	bd80      	pop	{r7, pc}
 8000b2a:	bf00      	nop
 8000b2c:	20000178 	.word	0x20000178
 8000b30:	40005400 	.word	0x40005400
 8000b34:	10a21d58 	.word	0x10a21d58

08000b38 <MX_ICACHE_Init>:
  * @brief ICACHE Initialization Function
  * @param None
  * @retval None
  */
static void MX_ICACHE_Init(void)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	af00      	add	r7, sp, #0

  /* USER CODE END ICACHE_Init 1 */

  /** Enable instruction cache in 1-way (direct mapped cache)
  */
  if (HAL_ICACHE_ConfigAssociativityMode(ICACHE_1WAY) != HAL_OK)
 8000b3c:	2000      	movs	r0, #0
 8000b3e:	f004 f99b 	bl	8004e78 <HAL_ICACHE_ConfigAssociativityMode>
 8000b42:	4603      	mov	r3, r0
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	d001      	beq.n	8000b4c <MX_ICACHE_Init+0x14>
  {
    Error_Handler();
 8000b48:	f000 fdc1 	bl	80016ce <Error_Handler>
  }
  if (HAL_ICACHE_Enable() != HAL_OK)
 8000b4c:	f004 f9b4 	bl	8004eb8 <HAL_ICACHE_Enable>
 8000b50:	4603      	mov	r3, r0
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	d001      	beq.n	8000b5a <MX_ICACHE_Init+0x22>
  {
    Error_Handler();
 8000b56:	f000 fdba 	bl	80016ce <Error_Handler>
  }
  /* USER CODE BEGIN ICACHE_Init 2 */

  /* USER CODE END ICACHE_Init 2 */

}
 8000b5a:	bf00      	nop
 8000b5c:	bd80      	pop	{r7, pc}
	...

08000b60 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8000b64:	4b22      	ldr	r3, [pc, #136]	; (8000bf0 <MX_LPUART1_UART_Init+0x90>)
 8000b66:	4a23      	ldr	r2, [pc, #140]	; (8000bf4 <MX_LPUART1_UART_Init+0x94>)
 8000b68:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 209700;
 8000b6a:	4b21      	ldr	r3, [pc, #132]	; (8000bf0 <MX_LPUART1_UART_Init+0x90>)
 8000b6c:	4a22      	ldr	r2, [pc, #136]	; (8000bf8 <MX_LPUART1_UART_Init+0x98>)
 8000b6e:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000b70:	4b1f      	ldr	r3, [pc, #124]	; (8000bf0 <MX_LPUART1_UART_Init+0x90>)
 8000b72:	2200      	movs	r2, #0
 8000b74:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8000b76:	4b1e      	ldr	r3, [pc, #120]	; (8000bf0 <MX_LPUART1_UART_Init+0x90>)
 8000b78:	2200      	movs	r2, #0
 8000b7a:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8000b7c:	4b1c      	ldr	r3, [pc, #112]	; (8000bf0 <MX_LPUART1_UART_Init+0x90>)
 8000b7e:	2200      	movs	r2, #0
 8000b80:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8000b82:	4b1b      	ldr	r3, [pc, #108]	; (8000bf0 <MX_LPUART1_UART_Init+0x90>)
 8000b84:	220c      	movs	r2, #12
 8000b86:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b88:	4b19      	ldr	r3, [pc, #100]	; (8000bf0 <MX_LPUART1_UART_Init+0x90>)
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b8e:	4b18      	ldr	r3, [pc, #96]	; (8000bf0 <MX_LPUART1_UART_Init+0x90>)
 8000b90:	2200      	movs	r2, #0
 8000b92:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000b94:	4b16      	ldr	r3, [pc, #88]	; (8000bf0 <MX_LPUART1_UART_Init+0x90>)
 8000b96:	2200      	movs	r2, #0
 8000b98:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b9a:	4b15      	ldr	r3, [pc, #84]	; (8000bf0 <MX_LPUART1_UART_Init+0x90>)
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	629a      	str	r2, [r3, #40]	; 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 8000ba0:	4b13      	ldr	r3, [pc, #76]	; (8000bf0 <MX_LPUART1_UART_Init+0x90>)
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	665a      	str	r2, [r3, #100]	; 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8000ba6:	4812      	ldr	r0, [pc, #72]	; (8000bf0 <MX_LPUART1_UART_Init+0x90>)
 8000ba8:	f007 ffba 	bl	8008b20 <HAL_UART_Init>
 8000bac:	4603      	mov	r3, r0
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	d001      	beq.n	8000bb6 <MX_LPUART1_UART_Init+0x56>
  {
    Error_Handler();
 8000bb2:	f000 fd8c 	bl	80016ce <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000bb6:	2100      	movs	r1, #0
 8000bb8:	480d      	ldr	r0, [pc, #52]	; (8000bf0 <MX_LPUART1_UART_Init+0x90>)
 8000bba:	f009 ff82 	bl	800aac2 <HAL_UARTEx_SetTxFifoThreshold>
 8000bbe:	4603      	mov	r3, r0
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	d001      	beq.n	8000bc8 <MX_LPUART1_UART_Init+0x68>
  {
    Error_Handler();
 8000bc4:	f000 fd83 	bl	80016ce <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000bc8:	2100      	movs	r1, #0
 8000bca:	4809      	ldr	r0, [pc, #36]	; (8000bf0 <MX_LPUART1_UART_Init+0x90>)
 8000bcc:	f009 ffb7 	bl	800ab3e <HAL_UARTEx_SetRxFifoThreshold>
 8000bd0:	4603      	mov	r3, r0
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d001      	beq.n	8000bda <MX_LPUART1_UART_Init+0x7a>
  {
    Error_Handler();
 8000bd6:	f000 fd7a 	bl	80016ce <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8000bda:	4805      	ldr	r0, [pc, #20]	; (8000bf0 <MX_LPUART1_UART_Init+0x90>)
 8000bdc:	f009 ff38 	bl	800aa50 <HAL_UARTEx_DisableFifoMode>
 8000be0:	4603      	mov	r3, r0
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d001      	beq.n	8000bea <MX_LPUART1_UART_Init+0x8a>
  {
    Error_Handler();
 8000be6:	f000 fd72 	bl	80016ce <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8000bea:	bf00      	nop
 8000bec:	bd80      	pop	{r7, pc}
 8000bee:	bf00      	nop
 8000bf0:	200001cc 	.word	0x200001cc
 8000bf4:	40008000 	.word	0x40008000
 8000bf8:	00033324 	.word	0x00033324

08000bfc <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8000c00:	4b22      	ldr	r3, [pc, #136]	; (8000c8c <MX_UART4_Init+0x90>)
 8000c02:	4a23      	ldr	r2, [pc, #140]	; (8000c90 <MX_UART4_Init+0x94>)
 8000c04:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8000c06:	4b21      	ldr	r3, [pc, #132]	; (8000c8c <MX_UART4_Init+0x90>)
 8000c08:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000c0c:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8000c0e:	4b1f      	ldr	r3, [pc, #124]	; (8000c8c <MX_UART4_Init+0x90>)
 8000c10:	2200      	movs	r2, #0
 8000c12:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000c14:	4b1d      	ldr	r3, [pc, #116]	; (8000c8c <MX_UART4_Init+0x90>)
 8000c16:	2200      	movs	r2, #0
 8000c18:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8000c1a:	4b1c      	ldr	r3, [pc, #112]	; (8000c8c <MX_UART4_Init+0x90>)
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_RX;
 8000c20:	4b1a      	ldr	r3, [pc, #104]	; (8000c8c <MX_UART4_Init+0x90>)
 8000c22:	2204      	movs	r2, #4
 8000c24:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c26:	4b19      	ldr	r3, [pc, #100]	; (8000c8c <MX_UART4_Init+0x90>)
 8000c28:	2200      	movs	r2, #0
 8000c2a:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c2c:	4b17      	ldr	r3, [pc, #92]	; (8000c8c <MX_UART4_Init+0x90>)
 8000c2e:	2200      	movs	r2, #0
 8000c30:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c32:	4b16      	ldr	r3, [pc, #88]	; (8000c8c <MX_UART4_Init+0x90>)
 8000c34:	2200      	movs	r2, #0
 8000c36:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000c38:	4b14      	ldr	r3, [pc, #80]	; (8000c8c <MX_UART4_Init+0x90>)
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c3e:	4b13      	ldr	r3, [pc, #76]	; (8000c8c <MX_UART4_Init+0x90>)
 8000c40:	2200      	movs	r2, #0
 8000c42:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8000c44:	4811      	ldr	r0, [pc, #68]	; (8000c8c <MX_UART4_Init+0x90>)
 8000c46:	f007 ff6b 	bl	8008b20 <HAL_UART_Init>
 8000c4a:	4603      	mov	r3, r0
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	d001      	beq.n	8000c54 <MX_UART4_Init+0x58>
  {
    Error_Handler();
 8000c50:	f000 fd3d 	bl	80016ce <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c54:	2100      	movs	r1, #0
 8000c56:	480d      	ldr	r0, [pc, #52]	; (8000c8c <MX_UART4_Init+0x90>)
 8000c58:	f009 ff33 	bl	800aac2 <HAL_UARTEx_SetTxFifoThreshold>
 8000c5c:	4603      	mov	r3, r0
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	d001      	beq.n	8000c66 <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 8000c62:	f000 fd34 	bl	80016ce <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c66:	2100      	movs	r1, #0
 8000c68:	4808      	ldr	r0, [pc, #32]	; (8000c8c <MX_UART4_Init+0x90>)
 8000c6a:	f009 ff68 	bl	800ab3e <HAL_UARTEx_SetRxFifoThreshold>
 8000c6e:	4603      	mov	r3, r0
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	d001      	beq.n	8000c78 <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 8000c74:	f000 fd2b 	bl	80016ce <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8000c78:	4804      	ldr	r0, [pc, #16]	; (8000c8c <MX_UART4_Init+0x90>)
 8000c7a:	f009 fee9 	bl	800aa50 <HAL_UARTEx_DisableFifoMode>
 8000c7e:	4603      	mov	r3, r0
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d001      	beq.n	8000c88 <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 8000c84:	f000 fd23 	bl	80016ce <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8000c88:	bf00      	nop
 8000c8a:	bd80      	pop	{r7, pc}
 8000c8c:	20000260 	.word	0x20000260
 8000c90:	40004c00 	.word	0x40004c00

08000c94 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000c98:	4b22      	ldr	r3, [pc, #136]	; (8000d24 <MX_USART2_UART_Init+0x90>)
 8000c9a:	4a23      	ldr	r2, [pc, #140]	; (8000d28 <MX_USART2_UART_Init+0x94>)
 8000c9c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000c9e:	4b21      	ldr	r3, [pc, #132]	; (8000d24 <MX_USART2_UART_Init+0x90>)
 8000ca0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000ca4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000ca6:	4b1f      	ldr	r3, [pc, #124]	; (8000d24 <MX_USART2_UART_Init+0x90>)
 8000ca8:	2200      	movs	r2, #0
 8000caa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000cac:	4b1d      	ldr	r3, [pc, #116]	; (8000d24 <MX_USART2_UART_Init+0x90>)
 8000cae:	2200      	movs	r2, #0
 8000cb0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000cb2:	4b1c      	ldr	r3, [pc, #112]	; (8000d24 <MX_USART2_UART_Init+0x90>)
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000cb8:	4b1a      	ldr	r3, [pc, #104]	; (8000d24 <MX_USART2_UART_Init+0x90>)
 8000cba:	220c      	movs	r2, #12
 8000cbc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000cbe:	4b19      	ldr	r3, [pc, #100]	; (8000d24 <MX_USART2_UART_Init+0x90>)
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000cc4:	4b17      	ldr	r3, [pc, #92]	; (8000d24 <MX_USART2_UART_Init+0x90>)
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000cca:	4b16      	ldr	r3, [pc, #88]	; (8000d24 <MX_USART2_UART_Init+0x90>)
 8000ccc:	2200      	movs	r2, #0
 8000cce:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000cd0:	4b14      	ldr	r3, [pc, #80]	; (8000d24 <MX_USART2_UART_Init+0x90>)
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000cd6:	4b13      	ldr	r3, [pc, #76]	; (8000d24 <MX_USART2_UART_Init+0x90>)
 8000cd8:	2200      	movs	r2, #0
 8000cda:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000cdc:	4811      	ldr	r0, [pc, #68]	; (8000d24 <MX_USART2_UART_Init+0x90>)
 8000cde:	f007 ff1f 	bl	8008b20 <HAL_UART_Init>
 8000ce2:	4603      	mov	r3, r0
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d001      	beq.n	8000cec <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000ce8:	f000 fcf1 	bl	80016ce <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000cec:	2100      	movs	r1, #0
 8000cee:	480d      	ldr	r0, [pc, #52]	; (8000d24 <MX_USART2_UART_Init+0x90>)
 8000cf0:	f009 fee7 	bl	800aac2 <HAL_UARTEx_SetTxFifoThreshold>
 8000cf4:	4603      	mov	r3, r0
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d001      	beq.n	8000cfe <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8000cfa:	f000 fce8 	bl	80016ce <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000cfe:	2100      	movs	r1, #0
 8000d00:	4808      	ldr	r0, [pc, #32]	; (8000d24 <MX_USART2_UART_Init+0x90>)
 8000d02:	f009 ff1c 	bl	800ab3e <HAL_UARTEx_SetRxFifoThreshold>
 8000d06:	4603      	mov	r3, r0
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	d001      	beq.n	8000d10 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000d0c:	f000 fcdf 	bl	80016ce <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000d10:	4804      	ldr	r0, [pc, #16]	; (8000d24 <MX_USART2_UART_Init+0x90>)
 8000d12:	f009 fe9d 	bl	800aa50 <HAL_UARTEx_DisableFifoMode>
 8000d16:	4603      	mov	r3, r0
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	d001      	beq.n	8000d20 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000d1c:	f000 fcd7 	bl	80016ce <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000d20:	bf00      	nop
 8000d22:	bd80      	pop	{r7, pc}
 8000d24:	200002f4 	.word	0x200002f4
 8000d28:	40004400 	.word	0x40004400

08000d2c <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	b086      	sub	sp, #24
 8000d30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_PrivilegeStateTypeDef privilegeState = {0};
 8000d32:	463b      	mov	r3, r7
 8000d34:	2200      	movs	r2, #0
 8000d36:	601a      	str	r2, [r3, #0]
 8000d38:	605a      	str	r2, [r3, #4]
 8000d3a:	609a      	str	r2, [r3, #8]
 8000d3c:	60da      	str	r2, [r3, #12]
 8000d3e:	611a      	str	r2, [r3, #16]
 8000d40:	615a      	str	r2, [r3, #20]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000d42:	4b1d      	ldr	r3, [pc, #116]	; (8000db8 <MX_RTC_Init+0x8c>)
 8000d44:	4a1d      	ldr	r2, [pc, #116]	; (8000dbc <MX_RTC_Init+0x90>)
 8000d46:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000d48:	4b1b      	ldr	r3, [pc, #108]	; (8000db8 <MX_RTC_Init+0x8c>)
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000d4e:	4b1a      	ldr	r3, [pc, #104]	; (8000db8 <MX_RTC_Init+0x8c>)
 8000d50:	227f      	movs	r2, #127	; 0x7f
 8000d52:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000d54:	4b18      	ldr	r3, [pc, #96]	; (8000db8 <MX_RTC_Init+0x8c>)
 8000d56:	22ff      	movs	r2, #255	; 0xff
 8000d58:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000d5a:	4b17      	ldr	r3, [pc, #92]	; (8000db8 <MX_RTC_Init+0x8c>)
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8000d60:	4b15      	ldr	r3, [pc, #84]	; (8000db8 <MX_RTC_Init+0x8c>)
 8000d62:	2200      	movs	r2, #0
 8000d64:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000d66:	4b14      	ldr	r3, [pc, #80]	; (8000db8 <MX_RTC_Init+0x8c>)
 8000d68:	2200      	movs	r2, #0
 8000d6a:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000d6c:	4b12      	ldr	r3, [pc, #72]	; (8000db8 <MX_RTC_Init+0x8c>)
 8000d6e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000d72:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 8000d74:	4b10      	ldr	r3, [pc, #64]	; (8000db8 <MX_RTC_Init+0x8c>)
 8000d76:	2200      	movs	r2, #0
 8000d78:	621a      	str	r2, [r3, #32]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000d7a:	480f      	ldr	r0, [pc, #60]	; (8000db8 <MX_RTC_Init+0x8c>)
 8000d7c:	f005 ff60 	bl	8006c40 <HAL_RTC_Init>
 8000d80:	4603      	mov	r3, r0
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d001      	beq.n	8000d8a <MX_RTC_Init+0x5e>
  {
    Error_Handler();
 8000d86:	f000 fca2 	bl	80016ce <Error_Handler>
  }
  privilegeState.rtcPrivilegeFull = RTC_PRIVILEGE_FULL_NO;
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	603b      	str	r3, [r7, #0]
  privilegeState.backupRegisterPrivZone = RTC_PRIVILEGE_BKUP_ZONE_NONE;
 8000d8e:	2300      	movs	r3, #0
 8000d90:	60fb      	str	r3, [r7, #12]
  privilegeState.backupRegisterStartZone2 = RTC_BKP_DR0;
 8000d92:	2300      	movs	r3, #0
 8000d94:	613b      	str	r3, [r7, #16]
  privilegeState.backupRegisterStartZone3 = RTC_BKP_DR0;
 8000d96:	2300      	movs	r3, #0
 8000d98:	617b      	str	r3, [r7, #20]
  if (HAL_RTCEx_PrivilegeModeSet(&hrtc, &privilegeState) != HAL_OK)
 8000d9a:	463b      	mov	r3, r7
 8000d9c:	4619      	mov	r1, r3
 8000d9e:	4806      	ldr	r0, [pc, #24]	; (8000db8 <MX_RTC_Init+0x8c>)
 8000da0:	f006 f85c 	bl	8006e5c <HAL_RTCEx_PrivilegeModeSet>
 8000da4:	4603      	mov	r3, r0
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d001      	beq.n	8000dae <MX_RTC_Init+0x82>
  {
    Error_Handler();
 8000daa:	f000 fc90 	bl	80016ce <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000dae:	bf00      	nop
 8000db0:	3718      	adds	r7, #24
 8000db2:	46bd      	mov	sp, r7
 8000db4:	bd80      	pop	{r7, pc}
 8000db6:	bf00      	nop
 8000db8:	20000388 	.word	0x20000388
 8000dbc:	40002800 	.word	0x40002800

08000dc0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000dc4:	4b1b      	ldr	r3, [pc, #108]	; (8000e34 <MX_SPI1_Init+0x74>)
 8000dc6:	4a1c      	ldr	r2, [pc, #112]	; (8000e38 <MX_SPI1_Init+0x78>)
 8000dc8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000dca:	4b1a      	ldr	r3, [pc, #104]	; (8000e34 <MX_SPI1_Init+0x74>)
 8000dcc:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000dd0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000dd2:	4b18      	ldr	r3, [pc, #96]	; (8000e34 <MX_SPI1_Init+0x74>)
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000dd8:	4b16      	ldr	r3, [pc, #88]	; (8000e34 <MX_SPI1_Init+0x74>)
 8000dda:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000dde:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000de0:	4b14      	ldr	r3, [pc, #80]	; (8000e34 <MX_SPI1_Init+0x74>)
 8000de2:	2200      	movs	r2, #0
 8000de4:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000de6:	4b13      	ldr	r3, [pc, #76]	; (8000e34 <MX_SPI1_Init+0x74>)
 8000de8:	2200      	movs	r2, #0
 8000dea:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000dec:	4b11      	ldr	r3, [pc, #68]	; (8000e34 <MX_SPI1_Init+0x74>)
 8000dee:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000df2:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8000df4:	4b0f      	ldr	r3, [pc, #60]	; (8000e34 <MX_SPI1_Init+0x74>)
 8000df6:	2210      	movs	r2, #16
 8000df8:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000dfa:	4b0e      	ldr	r3, [pc, #56]	; (8000e34 <MX_SPI1_Init+0x74>)
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000e00:	4b0c      	ldr	r3, [pc, #48]	; (8000e34 <MX_SPI1_Init+0x74>)
 8000e02:	2200      	movs	r2, #0
 8000e04:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000e06:	4b0b      	ldr	r3, [pc, #44]	; (8000e34 <MX_SPI1_Init+0x74>)
 8000e08:	2200      	movs	r2, #0
 8000e0a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000e0c:	4b09      	ldr	r3, [pc, #36]	; (8000e34 <MX_SPI1_Init+0x74>)
 8000e0e:	2207      	movs	r2, #7
 8000e10:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000e12:	4b08      	ldr	r3, [pc, #32]	; (8000e34 <MX_SPI1_Init+0x74>)
 8000e14:	2200      	movs	r2, #0
 8000e16:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000e18:	4b06      	ldr	r3, [pc, #24]	; (8000e34 <MX_SPI1_Init+0x74>)
 8000e1a:	2208      	movs	r2, #8
 8000e1c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000e1e:	4805      	ldr	r0, [pc, #20]	; (8000e34 <MX_SPI1_Init+0x74>)
 8000e20:	f006 f848 	bl	8006eb4 <HAL_SPI_Init>
 8000e24:	4603      	mov	r3, r0
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d001      	beq.n	8000e2e <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000e2a:	f000 fc50 	bl	80016ce <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000e2e:	bf00      	nop
 8000e30:	bd80      	pop	{r7, pc}
 8000e32:	bf00      	nop
 8000e34:	200003b0 	.word	0x200003b0
 8000e38:	40013000 	.word	0x40013000

08000e3c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000e40:	4b1b      	ldr	r3, [pc, #108]	; (8000eb0 <MX_SPI2_Init+0x74>)
 8000e42:	4a1c      	ldr	r2, [pc, #112]	; (8000eb4 <MX_SPI2_Init+0x78>)
 8000e44:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000e46:	4b1a      	ldr	r3, [pc, #104]	; (8000eb0 <MX_SPI2_Init+0x74>)
 8000e48:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000e4c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000e4e:	4b18      	ldr	r3, [pc, #96]	; (8000eb0 <MX_SPI2_Init+0x74>)
 8000e50:	2200      	movs	r2, #0
 8000e52:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000e54:	4b16      	ldr	r3, [pc, #88]	; (8000eb0 <MX_SPI2_Init+0x74>)
 8000e56:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000e5a:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000e5c:	4b14      	ldr	r3, [pc, #80]	; (8000eb0 <MX_SPI2_Init+0x74>)
 8000e5e:	2200      	movs	r2, #0
 8000e60:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000e62:	4b13      	ldr	r3, [pc, #76]	; (8000eb0 <MX_SPI2_Init+0x74>)
 8000e64:	2200      	movs	r2, #0
 8000e66:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000e68:	4b11      	ldr	r3, [pc, #68]	; (8000eb0 <MX_SPI2_Init+0x74>)
 8000e6a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000e6e:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8000e70:	4b0f      	ldr	r3, [pc, #60]	; (8000eb0 <MX_SPI2_Init+0x74>)
 8000e72:	2218      	movs	r2, #24
 8000e74:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000e76:	4b0e      	ldr	r3, [pc, #56]	; (8000eb0 <MX_SPI2_Init+0x74>)
 8000e78:	2200      	movs	r2, #0
 8000e7a:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000e7c:	4b0c      	ldr	r3, [pc, #48]	; (8000eb0 <MX_SPI2_Init+0x74>)
 8000e7e:	2200      	movs	r2, #0
 8000e80:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000e82:	4b0b      	ldr	r3, [pc, #44]	; (8000eb0 <MX_SPI2_Init+0x74>)
 8000e84:	2200      	movs	r2, #0
 8000e86:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8000e88:	4b09      	ldr	r3, [pc, #36]	; (8000eb0 <MX_SPI2_Init+0x74>)
 8000e8a:	2207      	movs	r2, #7
 8000e8c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000e8e:	4b08      	ldr	r3, [pc, #32]	; (8000eb0 <MX_SPI2_Init+0x74>)
 8000e90:	2200      	movs	r2, #0
 8000e92:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000e94:	4b06      	ldr	r3, [pc, #24]	; (8000eb0 <MX_SPI2_Init+0x74>)
 8000e96:	2208      	movs	r2, #8
 8000e98:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000e9a:	4805      	ldr	r0, [pc, #20]	; (8000eb0 <MX_SPI2_Init+0x74>)
 8000e9c:	f006 f80a 	bl	8006eb4 <HAL_SPI_Init>
 8000ea0:	4603      	mov	r3, r0
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d001      	beq.n	8000eaa <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8000ea6:	f000 fc12 	bl	80016ce <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000eaa:	bf00      	nop
 8000eac:	bd80      	pop	{r7, pc}
 8000eae:	bf00      	nop
 8000eb0:	20000414 	.word	0x20000414
 8000eb4:	40003800 	.word	0x40003800

08000eb8 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8000ebc:	4b1b      	ldr	r3, [pc, #108]	; (8000f2c <MX_SPI3_Init+0x74>)
 8000ebe:	4a1c      	ldr	r2, [pc, #112]	; (8000f30 <MX_SPI3_Init+0x78>)
 8000ec0:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8000ec2:	4b1a      	ldr	r3, [pc, #104]	; (8000f2c <MX_SPI3_Init+0x74>)
 8000ec4:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000ec8:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000eca:	4b18      	ldr	r3, [pc, #96]	; (8000f2c <MX_SPI3_Init+0x74>)
 8000ecc:	2200      	movs	r2, #0
 8000ece:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8000ed0:	4b16      	ldr	r3, [pc, #88]	; (8000f2c <MX_SPI3_Init+0x74>)
 8000ed2:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000ed6:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000ed8:	4b14      	ldr	r3, [pc, #80]	; (8000f2c <MX_SPI3_Init+0x74>)
 8000eda:	2200      	movs	r2, #0
 8000edc:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000ede:	4b13      	ldr	r3, [pc, #76]	; (8000f2c <MX_SPI3_Init+0x74>)
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8000ee4:	4b11      	ldr	r3, [pc, #68]	; (8000f2c <MX_SPI3_Init+0x74>)
 8000ee6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000eea:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8000eec:	4b0f      	ldr	r3, [pc, #60]	; (8000f2c <MX_SPI3_Init+0x74>)
 8000eee:	2218      	movs	r2, #24
 8000ef0:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000ef2:	4b0e      	ldr	r3, [pc, #56]	; (8000f2c <MX_SPI3_Init+0x74>)
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000ef8:	4b0c      	ldr	r3, [pc, #48]	; (8000f2c <MX_SPI3_Init+0x74>)
 8000efa:	2200      	movs	r2, #0
 8000efc:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000efe:	4b0b      	ldr	r3, [pc, #44]	; (8000f2c <MX_SPI3_Init+0x74>)
 8000f00:	2200      	movs	r2, #0
 8000f02:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8000f04:	4b09      	ldr	r3, [pc, #36]	; (8000f2c <MX_SPI3_Init+0x74>)
 8000f06:	2207      	movs	r2, #7
 8000f08:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000f0a:	4b08      	ldr	r3, [pc, #32]	; (8000f2c <MX_SPI3_Init+0x74>)
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000f10:	4b06      	ldr	r3, [pc, #24]	; (8000f2c <MX_SPI3_Init+0x74>)
 8000f12:	2208      	movs	r2, #8
 8000f14:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000f16:	4805      	ldr	r0, [pc, #20]	; (8000f2c <MX_SPI3_Init+0x74>)
 8000f18:	f005 ffcc 	bl	8006eb4 <HAL_SPI_Init>
 8000f1c:	4603      	mov	r3, r0
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d001      	beq.n	8000f26 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8000f22:	f000 fbd4 	bl	80016ce <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000f26:	bf00      	nop
 8000f28:	bd80      	pop	{r7, pc}
 8000f2a:	bf00      	nop
 8000f2c:	20000478 	.word	0x20000478
 8000f30:	40003c00 	.word	0x40003c00

08000f34 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b0a0      	sub	sp, #128	; 0x80
 8000f38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f3a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000f3e:	2200      	movs	r2, #0
 8000f40:	601a      	str	r2, [r3, #0]
 8000f42:	605a      	str	r2, [r3, #4]
 8000f44:	609a      	str	r2, [r3, #8]
 8000f46:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f48:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	601a      	str	r2, [r3, #0]
 8000f50:	605a      	str	r2, [r3, #4]
 8000f52:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000f54:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000f58:	2200      	movs	r2, #0
 8000f5a:	601a      	str	r2, [r3, #0]
 8000f5c:	605a      	str	r2, [r3, #4]
 8000f5e:	609a      	str	r2, [r3, #8]
 8000f60:	60da      	str	r2, [r3, #12]
 8000f62:	611a      	str	r2, [r3, #16]
 8000f64:	615a      	str	r2, [r3, #20]
 8000f66:	619a      	str	r2, [r3, #24]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000f68:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	601a      	str	r2, [r3, #0]
 8000f70:	605a      	str	r2, [r3, #4]
 8000f72:	609a      	str	r2, [r3, #8]
 8000f74:	60da      	str	r2, [r3, #12]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000f76:	1d3b      	adds	r3, r7, #4
 8000f78:	2234      	movs	r2, #52	; 0x34
 8000f7a:	2100      	movs	r1, #0
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	f00c fbfb 	bl	800d778 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000f82:	4b5a      	ldr	r3, [pc, #360]	; (80010ec <MX_TIM1_Init+0x1b8>)
 8000f84:	4a5a      	ldr	r2, [pc, #360]	; (80010f0 <MX_TIM1_Init+0x1bc>)
 8000f86:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 110-1;
 8000f88:	4b58      	ldr	r3, [pc, #352]	; (80010ec <MX_TIM1_Init+0x1b8>)
 8000f8a:	226d      	movs	r2, #109	; 0x6d
 8000f8c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f8e:	4b57      	ldr	r3, [pc, #348]	; (80010ec <MX_TIM1_Init+0x1b8>)
 8000f90:	2200      	movs	r2, #0
 8000f92:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 20000-1;
 8000f94:	4b55      	ldr	r3, [pc, #340]	; (80010ec <MX_TIM1_Init+0x1b8>)
 8000f96:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8000f9a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f9c:	4b53      	ldr	r3, [pc, #332]	; (80010ec <MX_TIM1_Init+0x1b8>)
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000fa2:	4b52      	ldr	r3, [pc, #328]	; (80010ec <MX_TIM1_Init+0x1b8>)
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000fa8:	4b50      	ldr	r3, [pc, #320]	; (80010ec <MX_TIM1_Init+0x1b8>)
 8000faa:	2280      	movs	r2, #128	; 0x80
 8000fac:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000fae:	484f      	ldr	r0, [pc, #316]	; (80010ec <MX_TIM1_Init+0x1b8>)
 8000fb0:	f006 f823 	bl	8006ffa <HAL_TIM_Base_Init>
 8000fb4:	4603      	mov	r3, r0
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d001      	beq.n	8000fbe <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 8000fba:	f000 fb88 	bl	80016ce <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000fbe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000fc2:	673b      	str	r3, [r7, #112]	; 0x70
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000fc4:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000fc8:	4619      	mov	r1, r3
 8000fca:	4848      	ldr	r0, [pc, #288]	; (80010ec <MX_TIM1_Init+0x1b8>)
 8000fcc:	f006 fe1a 	bl	8007c04 <HAL_TIM_ConfigClockSource>
 8000fd0:	4603      	mov	r3, r0
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d001      	beq.n	8000fda <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8000fd6:	f000 fb7a 	bl	80016ce <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000fda:	4844      	ldr	r0, [pc, #272]	; (80010ec <MX_TIM1_Init+0x1b8>)
 8000fdc:	f006 f8d4 	bl	8007188 <HAL_TIM_PWM_Init>
 8000fe0:	4603      	mov	r3, r0
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d001      	beq.n	8000fea <MX_TIM1_Init+0xb6>
  {
    Error_Handler();
 8000fe6:	f000 fb72 	bl	80016ce <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 8000fea:	4840      	ldr	r0, [pc, #256]	; (80010ec <MX_TIM1_Init+0x1b8>)
 8000fec:	f006 fa34 	bl	8007458 <HAL_TIM_IC_Init>
 8000ff0:	4603      	mov	r3, r0
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d001      	beq.n	8000ffa <MX_TIM1_Init+0xc6>
  {
    Error_Handler();
 8000ff6:	f000 fb6a 	bl	80016ce <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	667b      	str	r3, [r7, #100]	; 0x64
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000ffe:	2300      	movs	r3, #0
 8001000:	66bb      	str	r3, [r7, #104]	; 0x68
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001002:	2300      	movs	r3, #0
 8001004:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001006:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800100a:	4619      	mov	r1, r3
 800100c:	4837      	ldr	r0, [pc, #220]	; (80010ec <MX_TIM1_Init+0x1b8>)
 800100e:	f007 fc41 	bl	8008894 <HAL_TIMEx_MasterConfigSynchronization>
 8001012:	4603      	mov	r3, r0
 8001014:	2b00      	cmp	r3, #0
 8001016:	d001      	beq.n	800101c <MX_TIM1_Init+0xe8>
  {
    Error_Handler();
 8001018:	f000 fb59 	bl	80016ce <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800101c:	2360      	movs	r3, #96	; 0x60
 800101e:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.Pulse = 0;
 8001020:	2300      	movs	r3, #0
 8001022:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001024:	2300      	movs	r3, #0
 8001026:	653b      	str	r3, [r7, #80]	; 0x50
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001028:	2300      	movs	r3, #0
 800102a:	657b      	str	r3, [r7, #84]	; 0x54
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800102c:	2300      	movs	r3, #0
 800102e:	65bb      	str	r3, [r7, #88]	; 0x58
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001030:	2300      	movs	r3, #0
 8001032:	65fb      	str	r3, [r7, #92]	; 0x5c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001034:	2300      	movs	r3, #0
 8001036:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001038:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800103c:	2200      	movs	r2, #0
 800103e:	4619      	mov	r1, r3
 8001040:	482a      	ldr	r0, [pc, #168]	; (80010ec <MX_TIM1_Init+0x1b8>)
 8001042:	f006 fccb 	bl	80079dc <HAL_TIM_PWM_ConfigChannel>
 8001046:	4603      	mov	r3, r0
 8001048:	2b00      	cmp	r3, #0
 800104a:	d001      	beq.n	8001050 <MX_TIM1_Init+0x11c>
  {
    Error_Handler();
 800104c:	f000 fb3f 	bl	80016ce <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001050:	2300      	movs	r3, #0
 8001052:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001054:	2301      	movs	r3, #1
 8001056:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001058:	2300      	movs	r3, #0
 800105a:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigIC.ICFilter = 0;
 800105c:	2300      	movs	r3, #0
 800105e:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 8001060:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001064:	2208      	movs	r2, #8
 8001066:	4619      	mov	r1, r3
 8001068:	4820      	ldr	r0, [pc, #128]	; (80010ec <MX_TIM1_Init+0x1b8>)
 800106a:	f006 fc1b 	bl	80078a4 <HAL_TIM_IC_ConfigChannel>
 800106e:	4603      	mov	r3, r0
 8001070:	2b00      	cmp	r3, #0
 8001072:	d001      	beq.n	8001078 <MX_TIM1_Init+0x144>
  {
    Error_Handler();
 8001074:	f000 fb2b 	bl	80016ce <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 8001078:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800107c:	220c      	movs	r2, #12
 800107e:	4619      	mov	r1, r3
 8001080:	481a      	ldr	r0, [pc, #104]	; (80010ec <MX_TIM1_Init+0x1b8>)
 8001082:	f006 fc0f 	bl	80078a4 <HAL_TIM_IC_ConfigChannel>
 8001086:	4603      	mov	r3, r0
 8001088:	2b00      	cmp	r3, #0
 800108a:	d001      	beq.n	8001090 <MX_TIM1_Init+0x15c>
  {
    Error_Handler();
 800108c:	f000 fb1f 	bl	80016ce <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001090:	2300      	movs	r3, #0
 8001092:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001094:	2300      	movs	r3, #0
 8001096:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001098:	2300      	movs	r3, #0
 800109a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800109c:	2300      	movs	r3, #0
 800109e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80010a0:	2300      	movs	r3, #0
 80010a2:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80010a4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80010a8:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80010aa:	2300      	movs	r3, #0
 80010ac:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 80010ae:	2300      	movs	r3, #0
 80010b0:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80010b2:	2300      	movs	r3, #0
 80010b4:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80010b6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80010ba:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 80010bc:	2300      	movs	r3, #0
 80010be:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 80010c0:	2300      	movs	r3, #0
 80010c2:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80010c4:	2300      	movs	r3, #0
 80010c6:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80010c8:	1d3b      	adds	r3, r7, #4
 80010ca:	4619      	mov	r1, r3
 80010cc:	4807      	ldr	r0, [pc, #28]	; (80010ec <MX_TIM1_Init+0x1b8>)
 80010ce:	f007 fc69 	bl	80089a4 <HAL_TIMEx_ConfigBreakDeadTime>
 80010d2:	4603      	mov	r3, r0
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d001      	beq.n	80010dc <MX_TIM1_Init+0x1a8>
  {
    Error_Handler();
 80010d8:	f000 faf9 	bl	80016ce <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80010dc:	4803      	ldr	r0, [pc, #12]	; (80010ec <MX_TIM1_Init+0x1b8>)
 80010de:	f000 ff4d 	bl	8001f7c <HAL_TIM_MspPostInit>

}
 80010e2:	bf00      	nop
 80010e4:	3780      	adds	r7, #128	; 0x80
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bd80      	pop	{r7, pc}
 80010ea:	bf00      	nop
 80010ec:	200004dc 	.word	0x200004dc
 80010f0:	40012c00 	.word	0x40012c00

080010f4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b08c      	sub	sp, #48	; 0x30
 80010f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80010fa:	f107 030c 	add.w	r3, r7, #12
 80010fe:	2224      	movs	r2, #36	; 0x24
 8001100:	2100      	movs	r1, #0
 8001102:	4618      	mov	r0, r3
 8001104:	f00c fb38 	bl	800d778 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001108:	463b      	mov	r3, r7
 800110a:	2200      	movs	r2, #0
 800110c:	601a      	str	r2, [r3, #0]
 800110e:	605a      	str	r2, [r3, #4]
 8001110:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001112:	4b21      	ldr	r3, [pc, #132]	; (8001198 <MX_TIM3_Init+0xa4>)
 8001114:	4a21      	ldr	r2, [pc, #132]	; (800119c <MX_TIM3_Init+0xa8>)
 8001116:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001118:	4b1f      	ldr	r3, [pc, #124]	; (8001198 <MX_TIM3_Init+0xa4>)
 800111a:	2200      	movs	r2, #0
 800111c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800111e:	4b1e      	ldr	r3, [pc, #120]	; (8001198 <MX_TIM3_Init+0xa4>)
 8001120:	2200      	movs	r2, #0
 8001122:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001124:	4b1c      	ldr	r3, [pc, #112]	; (8001198 <MX_TIM3_Init+0xa4>)
 8001126:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800112a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800112c:	4b1a      	ldr	r3, [pc, #104]	; (8001198 <MX_TIM3_Init+0xa4>)
 800112e:	2200      	movs	r2, #0
 8001130:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001132:	4b19      	ldr	r3, [pc, #100]	; (8001198 <MX_TIM3_Init+0xa4>)
 8001134:	2200      	movs	r2, #0
 8001136:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001138:	2303      	movs	r3, #3
 800113a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800113c:	2300      	movs	r3, #0
 800113e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001140:	2301      	movs	r3, #1
 8001142:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001144:	2300      	movs	r3, #0
 8001146:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001148:	2300      	movs	r3, #0
 800114a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800114c:	2300      	movs	r3, #0
 800114e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001150:	2301      	movs	r3, #1
 8001152:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001154:	2300      	movs	r3, #0
 8001156:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001158:	2300      	movs	r3, #0
 800115a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 800115c:	f107 030c 	add.w	r3, r7, #12
 8001160:	4619      	mov	r1, r3
 8001162:	480d      	ldr	r0, [pc, #52]	; (8001198 <MX_TIM3_Init+0xa4>)
 8001164:	f006 f9d9 	bl	800751a <HAL_TIM_Encoder_Init>
 8001168:	4603      	mov	r3, r0
 800116a:	2b00      	cmp	r3, #0
 800116c:	d001      	beq.n	8001172 <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 800116e:	f000 faae 	bl	80016ce <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001172:	2300      	movs	r3, #0
 8001174:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001176:	2300      	movs	r3, #0
 8001178:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800117a:	463b      	mov	r3, r7
 800117c:	4619      	mov	r1, r3
 800117e:	4806      	ldr	r0, [pc, #24]	; (8001198 <MX_TIM3_Init+0xa4>)
 8001180:	f007 fb88 	bl	8008894 <HAL_TIMEx_MasterConfigSynchronization>
 8001184:	4603      	mov	r3, r0
 8001186:	2b00      	cmp	r3, #0
 8001188:	d001      	beq.n	800118e <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 800118a:	f000 faa0 	bl	80016ce <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800118e:	bf00      	nop
 8001190:	3730      	adds	r7, #48	; 0x30
 8001192:	46bd      	mov	sp, r7
 8001194:	bd80      	pop	{r7, pc}
 8001196:	bf00      	nop
 8001198:	20000528 	.word	0x20000528
 800119c:	40000400 	.word	0x40000400

080011a0 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b08e      	sub	sp, #56	; 0x38
 80011a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80011a6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80011aa:	2200      	movs	r2, #0
 80011ac:	601a      	str	r2, [r3, #0]
 80011ae:	605a      	str	r2, [r3, #4]
 80011b0:	609a      	str	r2, [r3, #8]
 80011b2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011b4:	f107 031c 	add.w	r3, r7, #28
 80011b8:	2200      	movs	r2, #0
 80011ba:	601a      	str	r2, [r3, #0]
 80011bc:	605a      	str	r2, [r3, #4]
 80011be:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80011c0:	463b      	mov	r3, r7
 80011c2:	2200      	movs	r2, #0
 80011c4:	601a      	str	r2, [r3, #0]
 80011c6:	605a      	str	r2, [r3, #4]
 80011c8:	609a      	str	r2, [r3, #8]
 80011ca:	60da      	str	r2, [r3, #12]
 80011cc:	611a      	str	r2, [r3, #16]
 80011ce:	615a      	str	r2, [r3, #20]
 80011d0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80011d2:	4b32      	ldr	r3, [pc, #200]	; (800129c <MX_TIM5_Init+0xfc>)
 80011d4:	4a32      	ldr	r2, [pc, #200]	; (80012a0 <MX_TIM5_Init+0x100>)
 80011d6:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 11;
 80011d8:	4b30      	ldr	r3, [pc, #192]	; (800129c <MX_TIM5_Init+0xfc>)
 80011da:	220b      	movs	r2, #11
 80011dc:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 80011de:	4b2f      	ldr	r3, [pc, #188]	; (800129c <MX_TIM5_Init+0xfc>)
 80011e0:	2220      	movs	r2, #32
 80011e2:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 1834;
 80011e4:	4b2d      	ldr	r3, [pc, #180]	; (800129c <MX_TIM5_Init+0xfc>)
 80011e6:	f240 722a 	movw	r2, #1834	; 0x72a
 80011ea:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011ec:	4b2b      	ldr	r3, [pc, #172]	; (800129c <MX_TIM5_Init+0xfc>)
 80011ee:	2200      	movs	r2, #0
 80011f0:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80011f2:	4b2a      	ldr	r3, [pc, #168]	; (800129c <MX_TIM5_Init+0xfc>)
 80011f4:	2280      	movs	r2, #128	; 0x80
 80011f6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80011f8:	4828      	ldr	r0, [pc, #160]	; (800129c <MX_TIM5_Init+0xfc>)
 80011fa:	f005 fefe 	bl	8006ffa <HAL_TIM_Base_Init>
 80011fe:	4603      	mov	r3, r0
 8001200:	2b00      	cmp	r3, #0
 8001202:	d001      	beq.n	8001208 <MX_TIM5_Init+0x68>
  {
    Error_Handler();
 8001204:	f000 fa63 	bl	80016ce <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001208:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800120c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 800120e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001212:	4619      	mov	r1, r3
 8001214:	4821      	ldr	r0, [pc, #132]	; (800129c <MX_TIM5_Init+0xfc>)
 8001216:	f006 fcf5 	bl	8007c04 <HAL_TIM_ConfigClockSource>
 800121a:	4603      	mov	r3, r0
 800121c:	2b00      	cmp	r3, #0
 800121e:	d001      	beq.n	8001224 <MX_TIM5_Init+0x84>
  {
    Error_Handler();
 8001220:	f000 fa55 	bl	80016ce <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8001224:	481d      	ldr	r0, [pc, #116]	; (800129c <MX_TIM5_Init+0xfc>)
 8001226:	f005 ffaf 	bl	8007188 <HAL_TIM_PWM_Init>
 800122a:	4603      	mov	r3, r0
 800122c:	2b00      	cmp	r3, #0
 800122e:	d001      	beq.n	8001234 <MX_TIM5_Init+0x94>
  {
    Error_Handler();
 8001230:	f000 fa4d 	bl	80016ce <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001234:	2300      	movs	r3, #0
 8001236:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001238:	2300      	movs	r3, #0
 800123a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800123c:	f107 031c 	add.w	r3, r7, #28
 8001240:	4619      	mov	r1, r3
 8001242:	4816      	ldr	r0, [pc, #88]	; (800129c <MX_TIM5_Init+0xfc>)
 8001244:	f007 fb26 	bl	8008894 <HAL_TIMEx_MasterConfigSynchronization>
 8001248:	4603      	mov	r3, r0
 800124a:	2b00      	cmp	r3, #0
 800124c:	d001      	beq.n	8001252 <MX_TIM5_Init+0xb2>
  {
    Error_Handler();
 800124e:	f000 fa3e 	bl	80016ce <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001252:	2360      	movs	r3, #96	; 0x60
 8001254:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001256:	2300      	movs	r3, #0
 8001258:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800125a:	2300      	movs	r3, #0
 800125c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800125e:	2300      	movs	r3, #0
 8001260:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001262:	463b      	mov	r3, r7
 8001264:	2200      	movs	r2, #0
 8001266:	4619      	mov	r1, r3
 8001268:	480c      	ldr	r0, [pc, #48]	; (800129c <MX_TIM5_Init+0xfc>)
 800126a:	f006 fbb7 	bl	80079dc <HAL_TIM_PWM_ConfigChannel>
 800126e:	4603      	mov	r3, r0
 8001270:	2b00      	cmp	r3, #0
 8001272:	d001      	beq.n	8001278 <MX_TIM5_Init+0xd8>
  {
    Error_Handler();
 8001274:	f000 fa2b 	bl	80016ce <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001278:	463b      	mov	r3, r7
 800127a:	220c      	movs	r2, #12
 800127c:	4619      	mov	r1, r3
 800127e:	4807      	ldr	r0, [pc, #28]	; (800129c <MX_TIM5_Init+0xfc>)
 8001280:	f006 fbac 	bl	80079dc <HAL_TIM_PWM_ConfigChannel>
 8001284:	4603      	mov	r3, r0
 8001286:	2b00      	cmp	r3, #0
 8001288:	d001      	beq.n	800128e <MX_TIM5_Init+0xee>
  {
    Error_Handler();
 800128a:	f000 fa20 	bl	80016ce <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 800128e:	4803      	ldr	r0, [pc, #12]	; (800129c <MX_TIM5_Init+0xfc>)
 8001290:	f000 fe74 	bl	8001f7c <HAL_TIM_MspPostInit>

}
 8001294:	bf00      	nop
 8001296:	3738      	adds	r7, #56	; 0x38
 8001298:	46bd      	mov	sp, r7
 800129a:	bd80      	pop	{r7, pc}
 800129c:	20000574 	.word	0x20000574
 80012a0:	40000c00 	.word	0x40000c00

080012a4 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b084      	sub	sp, #16
 80012a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012aa:	1d3b      	adds	r3, r7, #4
 80012ac:	2200      	movs	r2, #0
 80012ae:	601a      	str	r2, [r3, #0]
 80012b0:	605a      	str	r2, [r3, #4]
 80012b2:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80012b4:	4b14      	ldr	r3, [pc, #80]	; (8001308 <MX_TIM6_Init+0x64>)
 80012b6:	4a15      	ldr	r2, [pc, #84]	; (800130c <MX_TIM6_Init+0x68>)
 80012b8:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 110;
 80012ba:	4b13      	ldr	r3, [pc, #76]	; (8001308 <MX_TIM6_Init+0x64>)
 80012bc:	226e      	movs	r2, #110	; 0x6e
 80012be:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012c0:	4b11      	ldr	r3, [pc, #68]	; (8001308 <MX_TIM6_Init+0x64>)
 80012c2:	2200      	movs	r2, #0
 80012c4:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 80012c6:	4b10      	ldr	r3, [pc, #64]	; (8001308 <MX_TIM6_Init+0x64>)
 80012c8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80012cc:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012ce:	4b0e      	ldr	r3, [pc, #56]	; (8001308 <MX_TIM6_Init+0x64>)
 80012d0:	2200      	movs	r2, #0
 80012d2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80012d4:	480c      	ldr	r0, [pc, #48]	; (8001308 <MX_TIM6_Init+0x64>)
 80012d6:	f005 fe90 	bl	8006ffa <HAL_TIM_Base_Init>
 80012da:	4603      	mov	r3, r0
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d001      	beq.n	80012e4 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 80012e0:	f000 f9f5 	bl	80016ce <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012e4:	2300      	movs	r3, #0
 80012e6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012e8:	2300      	movs	r3, #0
 80012ea:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80012ec:	1d3b      	adds	r3, r7, #4
 80012ee:	4619      	mov	r1, r3
 80012f0:	4805      	ldr	r0, [pc, #20]	; (8001308 <MX_TIM6_Init+0x64>)
 80012f2:	f007 facf 	bl	8008894 <HAL_TIMEx_MasterConfigSynchronization>
 80012f6:	4603      	mov	r3, r0
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d001      	beq.n	8001300 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 80012fc:	f000 f9e7 	bl	80016ce <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001300:	bf00      	nop
 8001302:	3710      	adds	r7, #16
 8001304:	46bd      	mov	sp, r7
 8001306:	bd80      	pop	{r7, pc}
 8001308:	200005c0 	.word	0x200005c0
 800130c:	40001000 	.word	0x40001000

08001310 <MX_UCPD1_Init>:
  * @brief UCPD1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UCPD1_Init(void)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	b086      	sub	sp, #24
 8001314:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN UCPD1_Init 0 */

  /* USER CODE END UCPD1_Init 0 */

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001316:	463b      	mov	r3, r7
 8001318:	2200      	movs	r2, #0
 800131a:	601a      	str	r2, [r3, #0]
 800131c:	605a      	str	r2, [r3, #4]
 800131e:	609a      	str	r2, [r3, #8]
 8001320:	60da      	str	r2, [r3, #12]
 8001322:	611a      	str	r2, [r3, #16]
 8001324:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP2_EnableClock(LL_APB1_GRP2_PERIPH_UCPD1);
 8001326:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 800132a:	f7ff f9ff 	bl	800072c <LL_APB1_GRP2_EnableClock>

  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 800132e:	2002      	movs	r0, #2
 8001330:	f7ff f9e4 	bl	80006fc <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 8001334:	2001      	movs	r0, #1
 8001336:	f7ff f9e1 	bl	80006fc <LL_AHB2_GRP1_EnableClock>
  /**UCPD1 GPIO Configuration
  PB15   ------> UCPD1_CC2
  PA15 (JTDI)   ------> UCPD1_CC1
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_15;
 800133a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800133e:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8001340:	2303      	movs	r3, #3
 8001342:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001344:	2300      	movs	r3, #0
 8001346:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001348:	463b      	mov	r3, r7
 800134a:	4619      	mov	r1, r3
 800134c:	4809      	ldr	r0, [pc, #36]	; (8001374 <MX_UCPD1_Init+0x64>)
 800134e:	f009 fdce 	bl	800aeee <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_15;
 8001352:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001356:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8001358:	2303      	movs	r3, #3
 800135a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800135c:	2300      	movs	r3, #0
 800135e:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001360:	463b      	mov	r3, r7
 8001362:	4619      	mov	r1, r3
 8001364:	4804      	ldr	r0, [pc, #16]	; (8001378 <MX_UCPD1_Init+0x68>)
 8001366:	f009 fdc2 	bl	800aeee <LL_GPIO_Init>
  /* USER CODE END UCPD1_Init 1 */
  /* USER CODE BEGIN UCPD1_Init 2 */

  /* USER CODE END UCPD1_Init 2 */

}
 800136a:	bf00      	nop
 800136c:	3718      	adds	r7, #24
 800136e:	46bd      	mov	sp, r7
 8001370:	bd80      	pop	{r7, pc}
 8001372:	bf00      	nop
 8001374:	42020400 	.word	0x42020400
 8001378:	42020000 	.word	0x42020000

0800137c <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 8001380:	4b10      	ldr	r3, [pc, #64]	; (80013c4 <MX_USB_PCD_Init+0x48>)
 8001382:	4a11      	ldr	r2, [pc, #68]	; (80013c8 <MX_USB_PCD_Init+0x4c>)
 8001384:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8001386:	4b0f      	ldr	r3, [pc, #60]	; (80013c4 <MX_USB_PCD_Init+0x48>)
 8001388:	2208      	movs	r2, #8
 800138a:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800138c:	4b0d      	ldr	r3, [pc, #52]	; (80013c4 <MX_USB_PCD_Init+0x48>)
 800138e:	2202      	movs	r2, #2
 8001390:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001392:	4b0c      	ldr	r3, [pc, #48]	; (80013c4 <MX_USB_PCD_Init+0x48>)
 8001394:	2202      	movs	r2, #2
 8001396:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 8001398:	4b0a      	ldr	r3, [pc, #40]	; (80013c4 <MX_USB_PCD_Init+0x48>)
 800139a:	2200      	movs	r2, #0
 800139c:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800139e:	4b09      	ldr	r3, [pc, #36]	; (80013c4 <MX_USB_PCD_Init+0x48>)
 80013a0:	2200      	movs	r2, #0
 80013a2:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 80013a4:	4b07      	ldr	r3, [pc, #28]	; (80013c4 <MX_USB_PCD_Init+0x48>)
 80013a6:	2200      	movs	r2, #0
 80013a8:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80013aa:	4b06      	ldr	r3, [pc, #24]	; (80013c4 <MX_USB_PCD_Init+0x48>)
 80013ac:	2200      	movs	r2, #0
 80013ae:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80013b0:	4804      	ldr	r0, [pc, #16]	; (80013c4 <MX_USB_PCD_Init+0x48>)
 80013b2:	f003 fd91 	bl	8004ed8 <HAL_PCD_Init>
 80013b6:	4603      	mov	r3, r0
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d001      	beq.n	80013c0 <MX_USB_PCD_Init+0x44>
  {
    Error_Handler();
 80013bc:	f000 f987 	bl	80016ce <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 80013c0:	bf00      	nop
 80013c2:	bd80      	pop	{r7, pc}
 80013c4:	2000060c 	.word	0x2000060c
 80013c8:	4000d400 	.word	0x4000d400

080013cc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b082      	sub	sp, #8
 80013d0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80013d2:	4b12      	ldr	r3, [pc, #72]	; (800141c <MX_DMA_Init+0x50>)
 80013d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80013d6:	4a11      	ldr	r2, [pc, #68]	; (800141c <MX_DMA_Init+0x50>)
 80013d8:	f043 0304 	orr.w	r3, r3, #4
 80013dc:	6493      	str	r3, [r2, #72]	; 0x48
 80013de:	4b0f      	ldr	r3, [pc, #60]	; (800141c <MX_DMA_Init+0x50>)
 80013e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80013e2:	f003 0304 	and.w	r3, r3, #4
 80013e6:	607b      	str	r3, [r7, #4]
 80013e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80013ea:	4b0c      	ldr	r3, [pc, #48]	; (800141c <MX_DMA_Init+0x50>)
 80013ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80013ee:	4a0b      	ldr	r2, [pc, #44]	; (800141c <MX_DMA_Init+0x50>)
 80013f0:	f043 0301 	orr.w	r3, r3, #1
 80013f4:	6493      	str	r3, [r2, #72]	; 0x48
 80013f6:	4b09      	ldr	r3, [pc, #36]	; (800141c <MX_DMA_Init+0x50>)
 80013f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80013fa:	f003 0301 	and.w	r3, r3, #1
 80013fe:	603b      	str	r3, [r7, #0]
 8001400:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 8001402:	2200      	movs	r2, #0
 8001404:	2105      	movs	r1, #5
 8001406:	201d      	movs	r0, #29
 8001408:	f002 fe88 	bl	800411c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800140c:	201d      	movs	r0, #29
 800140e:	f002 fe9f 	bl	8004150 <HAL_NVIC_EnableIRQ>

}
 8001412:	bf00      	nop
 8001414:	3708      	adds	r7, #8
 8001416:	46bd      	mov	sp, r7
 8001418:	bd80      	pop	{r7, pc}
 800141a:	bf00      	nop
 800141c:	40021000 	.word	0x40021000

08001420 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	b08c      	sub	sp, #48	; 0x30
 8001424:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001426:	f107 031c 	add.w	r3, r7, #28
 800142a:	2200      	movs	r2, #0
 800142c:	601a      	str	r2, [r3, #0]
 800142e:	605a      	str	r2, [r3, #4]
 8001430:	609a      	str	r2, [r3, #8]
 8001432:	60da      	str	r2, [r3, #12]
 8001434:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001436:	4b8b      	ldr	r3, [pc, #556]	; (8001664 <MX_GPIO_Init+0x244>)
 8001438:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800143a:	4a8a      	ldr	r2, [pc, #552]	; (8001664 <MX_GPIO_Init+0x244>)
 800143c:	f043 0310 	orr.w	r3, r3, #16
 8001440:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001442:	4b88      	ldr	r3, [pc, #544]	; (8001664 <MX_GPIO_Init+0x244>)
 8001444:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001446:	f003 0310 	and.w	r3, r3, #16
 800144a:	61bb      	str	r3, [r7, #24]
 800144c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800144e:	4b85      	ldr	r3, [pc, #532]	; (8001664 <MX_GPIO_Init+0x244>)
 8001450:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001452:	4a84      	ldr	r2, [pc, #528]	; (8001664 <MX_GPIO_Init+0x244>)
 8001454:	f043 0304 	orr.w	r3, r3, #4
 8001458:	64d3      	str	r3, [r2, #76]	; 0x4c
 800145a:	4b82      	ldr	r3, [pc, #520]	; (8001664 <MX_GPIO_Init+0x244>)
 800145c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800145e:	f003 0304 	and.w	r3, r3, #4
 8001462:	617b      	str	r3, [r7, #20]
 8001464:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001466:	4b7f      	ldr	r3, [pc, #508]	; (8001664 <MX_GPIO_Init+0x244>)
 8001468:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800146a:	4a7e      	ldr	r2, [pc, #504]	; (8001664 <MX_GPIO_Init+0x244>)
 800146c:	f043 0320 	orr.w	r3, r3, #32
 8001470:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001472:	4b7c      	ldr	r3, [pc, #496]	; (8001664 <MX_GPIO_Init+0x244>)
 8001474:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001476:	f003 0320 	and.w	r3, r3, #32
 800147a:	613b      	str	r3, [r7, #16]
 800147c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800147e:	4b79      	ldr	r3, [pc, #484]	; (8001664 <MX_GPIO_Init+0x244>)
 8001480:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001482:	4a78      	ldr	r2, [pc, #480]	; (8001664 <MX_GPIO_Init+0x244>)
 8001484:	f043 0301 	orr.w	r3, r3, #1
 8001488:	64d3      	str	r3, [r2, #76]	; 0x4c
 800148a:	4b76      	ldr	r3, [pc, #472]	; (8001664 <MX_GPIO_Init+0x244>)
 800148c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800148e:	f003 0301 	and.w	r3, r3, #1
 8001492:	60fb      	str	r3, [r7, #12]
 8001494:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001496:	4b73      	ldr	r3, [pc, #460]	; (8001664 <MX_GPIO_Init+0x244>)
 8001498:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800149a:	4a72      	ldr	r2, [pc, #456]	; (8001664 <MX_GPIO_Init+0x244>)
 800149c:	f043 0302 	orr.w	r3, r3, #2
 80014a0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80014a2:	4b70      	ldr	r3, [pc, #448]	; (8001664 <MX_GPIO_Init+0x244>)
 80014a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014a6:	f003 0302 	and.w	r3, r3, #2
 80014aa:	60bb      	str	r3, [r7, #8]
 80014ac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80014ae:	4b6d      	ldr	r3, [pc, #436]	; (8001664 <MX_GPIO_Init+0x244>)
 80014b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014b2:	4a6c      	ldr	r2, [pc, #432]	; (8001664 <MX_GPIO_Init+0x244>)
 80014b4:	f043 0308 	orr.w	r3, r3, #8
 80014b8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80014ba:	4b6a      	ldr	r3, [pc, #424]	; (8001664 <MX_GPIO_Init+0x244>)
 80014bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014be:	f003 0308 	and.w	r3, r3, #8
 80014c2:	607b      	str	r3, [r7, #4]
 80014c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80014c6:	4b67      	ldr	r3, [pc, #412]	; (8001664 <MX_GPIO_Init+0x244>)
 80014c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014ca:	4a66      	ldr	r2, [pc, #408]	; (8001664 <MX_GPIO_Init+0x244>)
 80014cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80014d0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80014d2:	4b64      	ldr	r3, [pc, #400]	; (8001664 <MX_GPIO_Init+0x244>)
 80014d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80014da:	603b      	str	r3, [r7, #0]
 80014dc:	683b      	ldr	r3, [r7, #0]
  HAL_PWREx_EnableVddIO2();
 80014de:	f003 fe79 	bl	80051d4 <HAL_PWREx_EnableVddIO2>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, DRIVE_E_Pin|MCU_LED_Pin|MOT_BATT_L_Pin|LV_BATT_L_Pin, GPIO_PIN_RESET);
 80014e2:	2200      	movs	r2, #0
 80014e4:	f24e 0108 	movw	r1, #57352	; 0xe008
 80014e8:	485f      	ldr	r0, [pc, #380]	; (8001668 <MX_GPIO_Init+0x248>)
 80014ea:	f003 fb6d 	bl	8004bc8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, MAX_CS_Pin|UCPD_DBN_Pin|LED_BLUE_Pin, GPIO_PIN_RESET);
 80014ee:	2200      	movs	r2, #0
 80014f0:	21a4      	movs	r1, #164	; 0xa4
 80014f2:	485e      	ldr	r0, [pc, #376]	; (800166c <MX_GPIO_Init+0x24c>)
 80014f4:	f003 fb68 	bl	8004bc8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, ADCF1_CS_Pin|ADCF2_CS_Pin|ADCF3_CS_Pin|ADCF4_CS_Pin
 80014f8:	2200      	movs	r2, #0
 80014fa:	f64f 7187 	movw	r1, #65415	; 0xff87
 80014fe:	485c      	ldr	r0, [pc, #368]	; (8001670 <MX_GPIO_Init+0x250>)
 8001500:	f003 fb62 	bl	8004bc8 <HAL_GPIO_WritePin>
                          |ADCR1_CS_Pin|ADCR2_CS_Pin|ADCR3_CS_Pin|ADCR4_CS_Pin
                          |LED_LE_F_Pin|INFRA_LE_F_Pin|LED_OE_F_Pin|INFRA_OE_F_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 8001504:	2200      	movs	r2, #0
 8001506:	2180      	movs	r1, #128	; 0x80
 8001508:	485a      	ldr	r0, [pc, #360]	; (8001674 <MX_GPIO_Init+0x254>)
 800150a:	f003 fb5d 	bl	8004bc8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_RESET);
 800150e:	2200      	movs	r2, #0
 8001510:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001514:	4858      	ldr	r0, [pc, #352]	; (8001678 <MX_GPIO_Init+0x258>)
 8001516:	f003 fb57 	bl	8004bc8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LED_LE_R_Pin|INFRA_LE_R_Pin|LED_OE_R_Pin|INFRA_OE_R_Pin
 800151a:	2200      	movs	r2, #0
 800151c:	f44f 41ec 	mov.w	r1, #30208	; 0x7600
 8001520:	4856      	ldr	r0, [pc, #344]	; (800167c <MX_GPIO_Init+0x25c>)
 8001522:	f003 fb51 	bl	8004bc8 <HAL_GPIO_WritePin>
                          |LED1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : DRIVE_E_Pin */
  GPIO_InitStruct.Pin = DRIVE_E_Pin;
 8001526:	2308      	movs	r3, #8
 8001528:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800152a:	2301      	movs	r3, #1
 800152c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800152e:	2300      	movs	r3, #0
 8001530:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001532:	2303      	movs	r3, #3
 8001534:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(DRIVE_E_GPIO_Port, &GPIO_InitStruct);
 8001536:	f107 031c 	add.w	r3, r7, #28
 800153a:	4619      	mov	r1, r3
 800153c:	484a      	ldr	r0, [pc, #296]	; (8001668 <MX_GPIO_Init+0x248>)
 800153e:	f003 f9c3 	bl	80048c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : MCU_FB_Pin REMOTE_GAS_Pin REMOTE_STEER_Pin */
  GPIO_InitStruct.Pin = MCU_FB_Pin|REMOTE_GAS_Pin|REMOTE_STEER_Pin;
 8001542:	f44f 73d0 	mov.w	r3, #416	; 0x1a0
 8001546:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001548:	2300      	movs	r3, #0
 800154a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800154c:	2300      	movs	r3, #0
 800154e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001550:	f107 031c 	add.w	r3, r7, #28
 8001554:	4619      	mov	r1, r3
 8001556:	4844      	ldr	r0, [pc, #272]	; (8001668 <MX_GPIO_Init+0x248>)
 8001558:	f003 f9b6 	bl	80048c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : MAX_CS_Pin UCPD_DBN_Pin LED_BLUE_Pin */
  GPIO_InitStruct.Pin = MAX_CS_Pin|UCPD_DBN_Pin|LED_BLUE_Pin;
 800155c:	23a4      	movs	r3, #164	; 0xa4
 800155e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001560:	2301      	movs	r3, #1
 8001562:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001564:	2300      	movs	r3, #0
 8001566:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001568:	2300      	movs	r3, #0
 800156a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800156c:	f107 031c 	add.w	r3, r7, #28
 8001570:	4619      	mov	r1, r3
 8001572:	483e      	ldr	r0, [pc, #248]	; (800166c <MX_GPIO_Init+0x24c>)
 8001574:	f003 f9a8 	bl	80048c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : MCU_LED_Pin MOT_BATT_L_Pin LV_BATT_L_Pin */
  GPIO_InitStruct.Pin = MCU_LED_Pin|MOT_BATT_L_Pin|LV_BATT_L_Pin;
 8001578:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 800157c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800157e:	2301      	movs	r3, #1
 8001580:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001582:	2300      	movs	r3, #0
 8001584:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001586:	2300      	movs	r3, #0
 8001588:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800158a:	f107 031c 	add.w	r3, r7, #28
 800158e:	4619      	mov	r1, r3
 8001590:	4835      	ldr	r0, [pc, #212]	; (8001668 <MX_GPIO_Init+0x248>)
 8001592:	f003 f999 	bl	80048c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON2_Pin ROTARY1_Pin ROTARY2_Pin ROTARY3_Pin
                           ROTARY4_Pin BUTTON1_Pin */
  GPIO_InitStruct.Pin = BUTTON2_Pin|ROTARY1_Pin|ROTARY2_Pin|ROTARY3_Pin
 8001596:	f643 6301 	movw	r3, #15873	; 0x3e01
 800159a:	61fb      	str	r3, [r7, #28]
                          |ROTARY4_Pin|BUTTON1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800159c:	2300      	movs	r3, #0
 800159e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015a0:	2300      	movs	r3, #0
 80015a2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80015a4:	f107 031c 	add.w	r3, r7, #28
 80015a8:	4619      	mov	r1, r3
 80015aa:	4835      	ldr	r0, [pc, #212]	; (8001680 <MX_GPIO_Init+0x260>)
 80015ac:	f003 f98c 	bl	80048c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : UCPD_FLT_Pin */
  GPIO_InitStruct.Pin = UCPD_FLT_Pin;
 80015b0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80015b4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80015b6:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80015ba:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015bc:	2300      	movs	r3, #0
 80015be:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(UCPD_FLT_GPIO_Port, &GPIO_InitStruct);
 80015c0:	f107 031c 	add.w	r3, r7, #28
 80015c4:	4619      	mov	r1, r3
 80015c6:	4829      	ldr	r0, [pc, #164]	; (800166c <MX_GPIO_Init+0x24c>)
 80015c8:	f003 f97e 	bl	80048c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ADCF1_CS_Pin ADCF2_CS_Pin ADCF3_CS_Pin ADCF4_CS_Pin
                           ADCR1_CS_Pin ADCR2_CS_Pin ADCR3_CS_Pin ADCR4_CS_Pin
                           LED_LE_F_Pin INFRA_LE_F_Pin LED_OE_F_Pin INFRA_OE_F_Pin */
  GPIO_InitStruct.Pin = ADCF1_CS_Pin|ADCF2_CS_Pin|ADCF3_CS_Pin|ADCF4_CS_Pin
 80015cc:	f64f 7387 	movw	r3, #65415	; 0xff87
 80015d0:	61fb      	str	r3, [r7, #28]
                          |ADCR1_CS_Pin|ADCR2_CS_Pin|ADCR3_CS_Pin|ADCR4_CS_Pin
                          |LED_LE_F_Pin|INFRA_LE_F_Pin|LED_OE_F_Pin|INFRA_OE_F_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015d2:	2301      	movs	r3, #1
 80015d4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015d6:	2300      	movs	r3, #0
 80015d8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015da:	2300      	movs	r3, #0
 80015dc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80015de:	f107 031c 	add.w	r3, r7, #28
 80015e2:	4619      	mov	r1, r3
 80015e4:	4822      	ldr	r0, [pc, #136]	; (8001670 <MX_GPIO_Init+0x250>)
 80015e6:	f003 f96f 	bl	80048c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : RESET_BUTTON_Pin SET_BUTTON_Pin LED2_Pin */
  GPIO_InitStruct.Pin = RESET_BUTTON_Pin|SET_BUTTON_Pin|LED2_Pin;
 80015ea:	2370      	movs	r3, #112	; 0x70
 80015ec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015ee:	2300      	movs	r3, #0
 80015f0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015f2:	2300      	movs	r3, #0
 80015f4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80015f6:	f107 031c 	add.w	r3, r7, #28
 80015fa:	4619      	mov	r1, r3
 80015fc:	481f      	ldr	r0, [pc, #124]	; (800167c <MX_GPIO_Init+0x25c>)
 80015fe:	f003 f963 	bl	80048c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_GREEN_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin;
 8001602:	2380      	movs	r3, #128	; 0x80
 8001604:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001606:	2301      	movs	r3, #1
 8001608:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800160a:	2300      	movs	r3, #0
 800160c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800160e:	2300      	movs	r3, #0
 8001610:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 8001612:	f107 031c 	add.w	r3, r7, #28
 8001616:	4619      	mov	r1, r3
 8001618:	4816      	ldr	r0, [pc, #88]	; (8001674 <MX_GPIO_Init+0x254>)
 800161a:	f003 f955 	bl	80048c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_RED_Pin */
  GPIO_InitStruct.Pin = LED_RED_Pin;
 800161e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001622:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001624:	2301      	movs	r3, #1
 8001626:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001628:	2300      	movs	r3, #0
 800162a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800162c:	2300      	movs	r3, #0
 800162e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LED_RED_GPIO_Port, &GPIO_InitStruct);
 8001630:	f107 031c 	add.w	r3, r7, #28
 8001634:	4619      	mov	r1, r3
 8001636:	4810      	ldr	r0, [pc, #64]	; (8001678 <MX_GPIO_Init+0x258>)
 8001638:	f003 f946 	bl	80048c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_LE_R_Pin INFRA_LE_R_Pin LED_OE_R_Pin INFRA_OE_R_Pin
                           LED1_Pin */
  GPIO_InitStruct.Pin = LED_LE_R_Pin|INFRA_LE_R_Pin|LED_OE_R_Pin|INFRA_OE_R_Pin
 800163c:	f44f 43ec 	mov.w	r3, #30208	; 0x7600
 8001640:	61fb      	str	r3, [r7, #28]
                          |LED1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001642:	2301      	movs	r3, #1
 8001644:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001646:	2300      	movs	r3, #0
 8001648:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800164a:	2300      	movs	r3, #0
 800164c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800164e:	f107 031c 	add.w	r3, r7, #28
 8001652:	4619      	mov	r1, r3
 8001654:	4809      	ldr	r0, [pc, #36]	; (800167c <MX_GPIO_Init+0x25c>)
 8001656:	f003 f937 	bl	80048c8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800165a:	bf00      	nop
 800165c:	3730      	adds	r7, #48	; 0x30
 800165e:	46bd      	mov	sp, r7
 8001660:	bd80      	pop	{r7, pc}
 8001662:	bf00      	nop
 8001664:	40021000 	.word	0x40021000
 8001668:	42021400 	.word	0x42021400
 800166c:	42020400 	.word	0x42020400
 8001670:	42020c00 	.word	0x42020c00
 8001674:	42020800 	.word	0x42020800
 8001678:	42020000 	.word	0x42020000
 800167c:	42021800 	.word	0x42021800
 8001680:	42021000 	.word	0x42021000

08001684 <StartDefaultTask>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	b084      	sub	sp, #16
 8001688:	af00      	add	r7, sp, #0
 800168a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	/* Infinite loop */
	TickType_t xLastWakeTime;
	xLastWakeTime = xTaskGetTickCount();
 800168c:	f00a fdd8 	bl	800c240 <xTaskGetTickCount>
 8001690:	4603      	mov	r3, r0
 8001692:	60fb      	str	r3, [r7, #12]
	for (;;)
	{
		HAL_GPIO_TogglePin(LED_RED_GPIO_Port, LED_RED_Pin);
 8001694:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001698:	4804      	ldr	r0, [pc, #16]	; (80016ac <StartDefaultTask+0x28>)
 800169a:	f003 faad 	bl	8004bf8 <HAL_GPIO_TogglePin>

		vTaskDelayUntil(&xLastWakeTime, 100u);
 800169e:	f107 030c 	add.w	r3, r7, #12
 80016a2:	2164      	movs	r1, #100	; 0x64
 80016a4:	4618      	mov	r0, r3
 80016a6:	f00a fc7b 	bl	800bfa0 <vTaskDelayUntil>
		HAL_GPIO_TogglePin(LED_RED_GPIO_Port, LED_RED_Pin);
 80016aa:	e7f3      	b.n	8001694 <StartDefaultTask+0x10>
 80016ac:	42020000 	.word	0x42020000

080016b0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b082      	sub	sp, #8
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80016c0:	d101      	bne.n	80016c6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80016c2:	f000 fefd 	bl	80024c0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80016c6:	bf00      	nop
 80016c8:	3708      	adds	r7, #8
 80016ca:	46bd      	mov	sp, r7
 80016cc:	bd80      	pop	{r7, pc}

080016ce <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80016ce:	b480      	push	{r7}
 80016d0:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80016d2:	b672      	cpsid	i
}
 80016d4:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 80016d6:	e7fe      	b.n	80016d6 <Error_Handler+0x8>

080016d8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	b082      	sub	sp, #8
 80016dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016de:	4b11      	ldr	r3, [pc, #68]	; (8001724 <HAL_MspInit+0x4c>)
 80016e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80016e2:	4a10      	ldr	r2, [pc, #64]	; (8001724 <HAL_MspInit+0x4c>)
 80016e4:	f043 0301 	orr.w	r3, r3, #1
 80016e8:	6613      	str	r3, [r2, #96]	; 0x60
 80016ea:	4b0e      	ldr	r3, [pc, #56]	; (8001724 <HAL_MspInit+0x4c>)
 80016ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80016ee:	f003 0301 	and.w	r3, r3, #1
 80016f2:	607b      	str	r3, [r7, #4]
 80016f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80016f6:	4b0b      	ldr	r3, [pc, #44]	; (8001724 <HAL_MspInit+0x4c>)
 80016f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016fa:	4a0a      	ldr	r2, [pc, #40]	; (8001724 <HAL_MspInit+0x4c>)
 80016fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001700:	6593      	str	r3, [r2, #88]	; 0x58
 8001702:	4b08      	ldr	r3, [pc, #32]	; (8001724 <HAL_MspInit+0x4c>)
 8001704:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001706:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800170a:	603b      	str	r3, [r7, #0]
 800170c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 7, 0);
 800170e:	2200      	movs	r2, #0
 8001710:	2107      	movs	r1, #7
 8001712:	f06f 0001 	mvn.w	r0, #1
 8001716:	f002 fd01 	bl	800411c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800171a:	bf00      	nop
 800171c:	3708      	adds	r7, #8
 800171e:	46bd      	mov	sp, r7
 8001720:	bd80      	pop	{r7, pc}
 8001722:	bf00      	nop
 8001724:	40021000 	.word	0x40021000

08001728 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	b0b0      	sub	sp, #192	; 0xc0
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001730:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001734:	2200      	movs	r2, #0
 8001736:	601a      	str	r2, [r3, #0]
 8001738:	605a      	str	r2, [r3, #4]
 800173a:	609a      	str	r2, [r3, #8]
 800173c:	60da      	str	r2, [r3, #12]
 800173e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001740:	f107 0318 	add.w	r3, r7, #24
 8001744:	2294      	movs	r2, #148	; 0x94
 8001746:	2100      	movs	r1, #0
 8001748:	4618      	mov	r0, r3
 800174a:	f00c f815 	bl	800d778 <memset>
  if(hadc->Instance==ADC1)
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	4a59      	ldr	r2, [pc, #356]	; (80018b8 <HAL_ADC_MspInit+0x190>)
 8001754:	4293      	cmp	r3, r2
 8001756:	f040 80aa 	bne.w	80018ae <HAL_ADC_MspInit+0x186>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800175a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800175e:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
 8001760:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 8001764:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001768:	f107 0318 	add.w	r3, r7, #24
 800176c:	4618      	mov	r0, r3
 800176e:	f004 fd51 	bl	8006214 <HAL_RCCEx_PeriphCLKConfig>
 8001772:	4603      	mov	r3, r0
 8001774:	2b00      	cmp	r3, #0
 8001776:	d001      	beq.n	800177c <HAL_ADC_MspInit+0x54>
    {
      Error_Handler();
 8001778:	f7ff ffa9 	bl	80016ce <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 800177c:	4b4f      	ldr	r3, [pc, #316]	; (80018bc <HAL_ADC_MspInit+0x194>)
 800177e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001780:	4a4e      	ldr	r2, [pc, #312]	; (80018bc <HAL_ADC_MspInit+0x194>)
 8001782:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001786:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001788:	4b4c      	ldr	r3, [pc, #304]	; (80018bc <HAL_ADC_MspInit+0x194>)
 800178a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800178c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001790:	617b      	str	r3, [r7, #20]
 8001792:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001794:	4b49      	ldr	r3, [pc, #292]	; (80018bc <HAL_ADC_MspInit+0x194>)
 8001796:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001798:	4a48      	ldr	r2, [pc, #288]	; (80018bc <HAL_ADC_MspInit+0x194>)
 800179a:	f043 0304 	orr.w	r3, r3, #4
 800179e:	64d3      	str	r3, [r2, #76]	; 0x4c
 80017a0:	4b46      	ldr	r3, [pc, #280]	; (80018bc <HAL_ADC_MspInit+0x194>)
 80017a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017a4:	f003 0304 	and.w	r3, r3, #4
 80017a8:	613b      	str	r3, [r7, #16]
 80017aa:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017ac:	4b43      	ldr	r3, [pc, #268]	; (80018bc <HAL_ADC_MspInit+0x194>)
 80017ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017b0:	4a42      	ldr	r2, [pc, #264]	; (80018bc <HAL_ADC_MspInit+0x194>)
 80017b2:	f043 0301 	orr.w	r3, r3, #1
 80017b6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80017b8:	4b40      	ldr	r3, [pc, #256]	; (80018bc <HAL_ADC_MspInit+0x194>)
 80017ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017bc:	f003 0301 	and.w	r3, r3, #1
 80017c0:	60fb      	str	r3, [r7, #12]
 80017c2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80017c4:	4b3d      	ldr	r3, [pc, #244]	; (80018bc <HAL_ADC_MspInit+0x194>)
 80017c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017c8:	4a3c      	ldr	r2, [pc, #240]	; (80018bc <HAL_ADC_MspInit+0x194>)
 80017ca:	f043 0302 	orr.w	r3, r3, #2
 80017ce:	64d3      	str	r3, [r2, #76]	; 0x4c
 80017d0:	4b3a      	ldr	r3, [pc, #232]	; (80018bc <HAL_ADC_MspInit+0x194>)
 80017d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017d4:	f003 0302 	and.w	r3, r3, #2
 80017d8:	60bb      	str	r3, [r7, #8]
 80017da:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> ADC1_IN9
    PA7     ------> ADC1_IN12
    PB0     ------> ADC1_IN15
    PB1     ------> ADC1_IN16
    */
    GPIO_InitStruct.Pin = BATT_VOLTAGE_Pin|MOT_CURR_Pin|VBUS_SENSE_Pin|ENC_CHA_Pin;
 80017dc:	230f      	movs	r3, #15
 80017de:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80017e2:	2303      	movs	r3, #3
 80017e4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017e8:	2300      	movs	r3, #0
 80017ea:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80017ee:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80017f2:	4619      	mov	r1, r3
 80017f4:	4832      	ldr	r0, [pc, #200]	; (80018c0 <HAL_ADC_MspInit+0x198>)
 80017f6:	f003 f867 	bl	80048c8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DISTANCE2_ADC_Pin|DISTANCE1_ADC_Pin|DISTANCE3_ADC_Pin|LV_BATT_Pin;
 80017fa:	239c      	movs	r3, #156	; 0x9c
 80017fc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001800:	2303      	movs	r3, #3
 8001802:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001806:	2300      	movs	r3, #0
 8001808:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800180c:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001810:	4619      	mov	r1, r3
 8001812:	482c      	ldr	r0, [pc, #176]	; (80018c4 <HAL_ADC_MspInit+0x19c>)
 8001814:	f003 f858 	bl	80048c8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ENC_CHBB0_Pin|DISTANCE4_ADC_Pin;
 8001818:	2303      	movs	r3, #3
 800181a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800181e:	2303      	movs	r3, #3
 8001820:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001824:	2300      	movs	r3, #0
 8001826:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800182a:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800182e:	4619      	mov	r1, r3
 8001830:	4825      	ldr	r0, [pc, #148]	; (80018c8 <HAL_ADC_MspInit+0x1a0>)
 8001832:	f003 f849 	bl	80048c8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8001836:	4b25      	ldr	r3, [pc, #148]	; (80018cc <HAL_ADC_MspInit+0x1a4>)
 8001838:	4a25      	ldr	r2, [pc, #148]	; (80018d0 <HAL_ADC_MspInit+0x1a8>)
 800183a:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 800183c:	4b23      	ldr	r3, [pc, #140]	; (80018cc <HAL_ADC_MspInit+0x1a4>)
 800183e:	2205      	movs	r2, #5
 8001840:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001842:	4b22      	ldr	r3, [pc, #136]	; (80018cc <HAL_ADC_MspInit+0x1a4>)
 8001844:	2200      	movs	r2, #0
 8001846:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001848:	4b20      	ldr	r3, [pc, #128]	; (80018cc <HAL_ADC_MspInit+0x1a4>)
 800184a:	2200      	movs	r2, #0
 800184c:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800184e:	4b1f      	ldr	r3, [pc, #124]	; (80018cc <HAL_ADC_MspInit+0x1a4>)
 8001850:	2280      	movs	r2, #128	; 0x80
 8001852:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001854:	4b1d      	ldr	r3, [pc, #116]	; (80018cc <HAL_ADC_MspInit+0x1a4>)
 8001856:	f44f 7200 	mov.w	r2, #512	; 0x200
 800185a:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800185c:	4b1b      	ldr	r3, [pc, #108]	; (80018cc <HAL_ADC_MspInit+0x1a4>)
 800185e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001862:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8001864:	4b19      	ldr	r3, [pc, #100]	; (80018cc <HAL_ADC_MspInit+0x1a4>)
 8001866:	2200      	movs	r2, #0
 8001868:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800186a:	4b18      	ldr	r3, [pc, #96]	; (80018cc <HAL_ADC_MspInit+0x1a4>)
 800186c:	2200      	movs	r2, #0
 800186e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001870:	4816      	ldr	r0, [pc, #88]	; (80018cc <HAL_ADC_MspInit+0x1a4>)
 8001872:	f002 fc7b 	bl	800416c <HAL_DMA_Init>
 8001876:	4603      	mov	r3, r0
 8001878:	2b00      	cmp	r3, #0
 800187a:	d001      	beq.n	8001880 <HAL_ADC_MspInit+0x158>
    {
      Error_Handler();
 800187c:	f7ff ff27 	bl	80016ce <Error_Handler>
    }

    if (HAL_DMA_ConfigChannelAttributes(&hdma_adc1, DMA_CHANNEL_NPRIV) != HAL_OK)
 8001880:	2110      	movs	r1, #16
 8001882:	4812      	ldr	r0, [pc, #72]	; (80018cc <HAL_ADC_MspInit+0x1a4>)
 8001884:	f002 ff50 	bl	8004728 <HAL_DMA_ConfigChannelAttributes>
 8001888:	4603      	mov	r3, r0
 800188a:	2b00      	cmp	r3, #0
 800188c:	d001      	beq.n	8001892 <HAL_ADC_MspInit+0x16a>
    {
      Error_Handler();
 800188e:	f7ff ff1e 	bl	80016ce <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	4a0d      	ldr	r2, [pc, #52]	; (80018cc <HAL_ADC_MspInit+0x1a4>)
 8001896:	651a      	str	r2, [r3, #80]	; 0x50
 8001898:	4a0c      	ldr	r2, [pc, #48]	; (80018cc <HAL_ADC_MspInit+0x1a4>)
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	6293      	str	r3, [r2, #40]	; 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 5, 0);
 800189e:	2200      	movs	r2, #0
 80018a0:	2105      	movs	r1, #5
 80018a2:	2025      	movs	r0, #37	; 0x25
 80018a4:	f002 fc3a 	bl	800411c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 80018a8:	2025      	movs	r0, #37	; 0x25
 80018aa:	f002 fc51 	bl	8004150 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80018ae:	bf00      	nop
 80018b0:	37c0      	adds	r7, #192	; 0xc0
 80018b2:	46bd      	mov	sp, r7
 80018b4:	bd80      	pop	{r7, pc}
 80018b6:	bf00      	nop
 80018b8:	42028000 	.word	0x42028000
 80018bc:	40021000 	.word	0x40021000
 80018c0:	42020800 	.word	0x42020800
 80018c4:	42020000 	.word	0x42020000
 80018c8:	42020400 	.word	0x42020400
 80018cc:	20000110 	.word	0x20000110
 80018d0:	40020008 	.word	0x40020008

080018d4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b0ae      	sub	sp, #184	; 0xb8
 80018d8:	af00      	add	r7, sp, #0
 80018da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018dc:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80018e0:	2200      	movs	r2, #0
 80018e2:	601a      	str	r2, [r3, #0]
 80018e4:	605a      	str	r2, [r3, #4]
 80018e6:	609a      	str	r2, [r3, #8]
 80018e8:	60da      	str	r2, [r3, #12]
 80018ea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80018ec:	f107 0310 	add.w	r3, r7, #16
 80018f0:	2294      	movs	r2, #148	; 0x94
 80018f2:	2100      	movs	r1, #0
 80018f4:	4618      	mov	r0, r3
 80018f6:	f00b ff3f 	bl	800d778 <memset>
  if(hi2c->Instance==I2C1)
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	4a21      	ldr	r2, [pc, #132]	; (8001984 <HAL_I2C_MspInit+0xb0>)
 8001900:	4293      	cmp	r3, r2
 8001902:	d13b      	bne.n	800197c <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001904:	2340      	movs	r3, #64	; 0x40
 8001906:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001908:	2300      	movs	r3, #0
 800190a:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800190c:	f107 0310 	add.w	r3, r7, #16
 8001910:	4618      	mov	r0, r3
 8001912:	f004 fc7f 	bl	8006214 <HAL_RCCEx_PeriphCLKConfig>
 8001916:	4603      	mov	r3, r0
 8001918:	2b00      	cmp	r3, #0
 800191a:	d001      	beq.n	8001920 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 800191c:	f7ff fed7 	bl	80016ce <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001920:	4b19      	ldr	r3, [pc, #100]	; (8001988 <HAL_I2C_MspInit+0xb4>)
 8001922:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001924:	4a18      	ldr	r2, [pc, #96]	; (8001988 <HAL_I2C_MspInit+0xb4>)
 8001926:	f043 0302 	orr.w	r3, r3, #2
 800192a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800192c:	4b16      	ldr	r3, [pc, #88]	; (8001988 <HAL_I2C_MspInit+0xb4>)
 800192e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001930:	f003 0302 	and.w	r3, r3, #2
 8001934:	60fb      	str	r3, [r7, #12]
 8001936:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001938:	f44f 7340 	mov.w	r3, #768	; 0x300
 800193c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001940:	2312      	movs	r3, #18
 8001942:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001946:	2300      	movs	r3, #0
 8001948:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800194c:	2300      	movs	r3, #0
 800194e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001952:	2304      	movs	r3, #4
 8001954:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001958:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800195c:	4619      	mov	r1, r3
 800195e:	480b      	ldr	r0, [pc, #44]	; (800198c <HAL_I2C_MspInit+0xb8>)
 8001960:	f002 ffb2 	bl	80048c8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001964:	4b08      	ldr	r3, [pc, #32]	; (8001988 <HAL_I2C_MspInit+0xb4>)
 8001966:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001968:	4a07      	ldr	r2, [pc, #28]	; (8001988 <HAL_I2C_MspInit+0xb4>)
 800196a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800196e:	6593      	str	r3, [r2, #88]	; 0x58
 8001970:	4b05      	ldr	r3, [pc, #20]	; (8001988 <HAL_I2C_MspInit+0xb4>)
 8001972:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001974:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001978:	60bb      	str	r3, [r7, #8]
 800197a:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800197c:	bf00      	nop
 800197e:	37b8      	adds	r7, #184	; 0xb8
 8001980:	46bd      	mov	sp, r7
 8001982:	bd80      	pop	{r7, pc}
 8001984:	40005400 	.word	0x40005400
 8001988:	40021000 	.word	0x40021000
 800198c:	42020400 	.word	0x42020400

08001990 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	b0b2      	sub	sp, #200	; 0xc8
 8001994:	af00      	add	r7, sp, #0
 8001996:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001998:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 800199c:	2200      	movs	r2, #0
 800199e:	601a      	str	r2, [r3, #0]
 80019a0:	605a      	str	r2, [r3, #4]
 80019a2:	609a      	str	r2, [r3, #8]
 80019a4:	60da      	str	r2, [r3, #12]
 80019a6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80019a8:	f107 0320 	add.w	r3, r7, #32
 80019ac:	2294      	movs	r2, #148	; 0x94
 80019ae:	2100      	movs	r1, #0
 80019b0:	4618      	mov	r0, r3
 80019b2:	f00b fee1 	bl	800d778 <memset>
  if(huart->Instance==LPUART1)
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	4a67      	ldr	r2, [pc, #412]	; (8001b58 <HAL_UART_MspInit+0x1c8>)
 80019bc:	4293      	cmp	r3, r2
 80019be:	d13e      	bne.n	8001a3e <HAL_UART_MspInit+0xae>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 80019c0:	2320      	movs	r3, #32
 80019c2:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 80019c4:	2300      	movs	r3, #0
 80019c6:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80019c8:	f107 0320 	add.w	r3, r7, #32
 80019cc:	4618      	mov	r0, r3
 80019ce:	f004 fc21 	bl	8006214 <HAL_RCCEx_PeriphCLKConfig>
 80019d2:	4603      	mov	r3, r0
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d001      	beq.n	80019dc <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80019d8:	f7ff fe79 	bl	80016ce <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 80019dc:	4b5f      	ldr	r3, [pc, #380]	; (8001b5c <HAL_UART_MspInit+0x1cc>)
 80019de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019e0:	4a5e      	ldr	r2, [pc, #376]	; (8001b5c <HAL_UART_MspInit+0x1cc>)
 80019e2:	f043 0301 	orr.w	r3, r3, #1
 80019e6:	65d3      	str	r3, [r2, #92]	; 0x5c
 80019e8:	4b5c      	ldr	r3, [pc, #368]	; (8001b5c <HAL_UART_MspInit+0x1cc>)
 80019ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019ec:	f003 0301 	and.w	r3, r3, #1
 80019f0:	61fb      	str	r3, [r7, #28]
 80019f2:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 80019f4:	4b59      	ldr	r3, [pc, #356]	; (8001b5c <HAL_UART_MspInit+0x1cc>)
 80019f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019f8:	4a58      	ldr	r2, [pc, #352]	; (8001b5c <HAL_UART_MspInit+0x1cc>)
 80019fa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80019fe:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a00:	4b56      	ldr	r3, [pc, #344]	; (8001b5c <HAL_UART_MspInit+0x1cc>)
 8001a02:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001a08:	61bb      	str	r3, [r7, #24]
 8001a0a:	69bb      	ldr	r3, [r7, #24]
    HAL_PWREx_EnableVddIO2();
 8001a0c:	f003 fbe2 	bl	80051d4 <HAL_PWREx_EnableVddIO2>
    /**LPUART1 GPIO Configuration
    PG7     ------> LPUART1_TX
    PG8     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = ST_LINK_VCP_TX_Pin|ST_LINK_VCP_RX_Pin;
 8001a10:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8001a14:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a18:	2302      	movs	r3, #2
 8001a1a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a1e:	2300      	movs	r3, #0
 8001a20:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a24:	2300      	movs	r3, #0
 8001a26:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8001a2a:	2308      	movs	r3, #8
 8001a2c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001a30:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001a34:	4619      	mov	r1, r3
 8001a36:	484a      	ldr	r0, [pc, #296]	; (8001b60 <HAL_UART_MspInit+0x1d0>)
 8001a38:	f002 ff46 	bl	80048c8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001a3c:	e088      	b.n	8001b50 <HAL_UART_MspInit+0x1c0>
  else if(huart->Instance==UART4)
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	4a48      	ldr	r2, [pc, #288]	; (8001b64 <HAL_UART_MspInit+0x1d4>)
 8001a44:	4293      	cmp	r3, r2
 8001a46:	d143      	bne.n	8001ad0 <HAL_UART_MspInit+0x140>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8001a48:	2308      	movs	r3, #8
 8001a4a:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001a50:	f107 0320 	add.w	r3, r7, #32
 8001a54:	4618      	mov	r0, r3
 8001a56:	f004 fbdd 	bl	8006214 <HAL_RCCEx_PeriphCLKConfig>
 8001a5a:	4603      	mov	r3, r0
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d001      	beq.n	8001a64 <HAL_UART_MspInit+0xd4>
      Error_Handler();
 8001a60:	f7ff fe35 	bl	80016ce <Error_Handler>
    __HAL_RCC_UART4_CLK_ENABLE();
 8001a64:	4b3d      	ldr	r3, [pc, #244]	; (8001b5c <HAL_UART_MspInit+0x1cc>)
 8001a66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a68:	4a3c      	ldr	r2, [pc, #240]	; (8001b5c <HAL_UART_MspInit+0x1cc>)
 8001a6a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001a6e:	6593      	str	r3, [r2, #88]	; 0x58
 8001a70:	4b3a      	ldr	r3, [pc, #232]	; (8001b5c <HAL_UART_MspInit+0x1cc>)
 8001a72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a74:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001a78:	617b      	str	r3, [r7, #20]
 8001a7a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a7c:	4b37      	ldr	r3, [pc, #220]	; (8001b5c <HAL_UART_MspInit+0x1cc>)
 8001a7e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a80:	4a36      	ldr	r2, [pc, #216]	; (8001b5c <HAL_UART_MspInit+0x1cc>)
 8001a82:	f043 0301 	orr.w	r3, r3, #1
 8001a86:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a88:	4b34      	ldr	r3, [pc, #208]	; (8001b5c <HAL_UART_MspInit+0x1cc>)
 8001a8a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a8c:	f003 0301 	and.w	r3, r3, #1
 8001a90:	613b      	str	r3, [r7, #16]
 8001a92:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001a94:	2303      	movs	r3, #3
 8001a96:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a9a:	2302      	movs	r3, #2
 8001a9c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001aac:	2308      	movs	r3, #8
 8001aae:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ab2:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001ab6:	4619      	mov	r1, r3
 8001ab8:	482b      	ldr	r0, [pc, #172]	; (8001b68 <HAL_UART_MspInit+0x1d8>)
 8001aba:	f002 ff05 	bl	80048c8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(UART4_IRQn, 5, 0);
 8001abe:	2200      	movs	r2, #0
 8001ac0:	2105      	movs	r1, #5
 8001ac2:	2040      	movs	r0, #64	; 0x40
 8001ac4:	f002 fb2a 	bl	800411c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8001ac8:	2040      	movs	r0, #64	; 0x40
 8001aca:	f002 fb41 	bl	8004150 <HAL_NVIC_EnableIRQ>
}
 8001ace:	e03f      	b.n	8001b50 <HAL_UART_MspInit+0x1c0>
  else if(huart->Instance==USART2)
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	4a25      	ldr	r2, [pc, #148]	; (8001b6c <HAL_UART_MspInit+0x1dc>)
 8001ad6:	4293      	cmp	r3, r2
 8001ad8:	d13a      	bne.n	8001b50 <HAL_UART_MspInit+0x1c0>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001ada:	2302      	movs	r3, #2
 8001adc:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001ade:	2300      	movs	r3, #0
 8001ae0:	65bb      	str	r3, [r7, #88]	; 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001ae2:	f107 0320 	add.w	r3, r7, #32
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	f004 fb94 	bl	8006214 <HAL_RCCEx_PeriphCLKConfig>
 8001aec:	4603      	mov	r3, r0
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d001      	beq.n	8001af6 <HAL_UART_MspInit+0x166>
      Error_Handler();
 8001af2:	f7ff fdec 	bl	80016ce <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001af6:	4b19      	ldr	r3, [pc, #100]	; (8001b5c <HAL_UART_MspInit+0x1cc>)
 8001af8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001afa:	4a18      	ldr	r2, [pc, #96]	; (8001b5c <HAL_UART_MspInit+0x1cc>)
 8001afc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b00:	6593      	str	r3, [r2, #88]	; 0x58
 8001b02:	4b16      	ldr	r3, [pc, #88]	; (8001b5c <HAL_UART_MspInit+0x1cc>)
 8001b04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b0a:	60fb      	str	r3, [r7, #12]
 8001b0c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001b0e:	4b13      	ldr	r3, [pc, #76]	; (8001b5c <HAL_UART_MspInit+0x1cc>)
 8001b10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b12:	4a12      	ldr	r2, [pc, #72]	; (8001b5c <HAL_UART_MspInit+0x1cc>)
 8001b14:	f043 0308 	orr.w	r3, r3, #8
 8001b18:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b1a:	4b10      	ldr	r3, [pc, #64]	; (8001b5c <HAL_UART_MspInit+0x1cc>)
 8001b1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b1e:	f003 0308 	and.w	r3, r3, #8
 8001b22:	60bb      	str	r3, [r7, #8]
 8001b24:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = XBEE_TX_Pin|XBEE_RX_Pin;
 8001b26:	2360      	movs	r3, #96	; 0x60
 8001b28:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b2c:	2302      	movs	r3, #2
 8001b2e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b32:	2300      	movs	r3, #0
 8001b34:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b38:	2300      	movs	r3, #0
 8001b3a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001b3e:	2307      	movs	r3, #7
 8001b40:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001b44:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001b48:	4619      	mov	r1, r3
 8001b4a:	4809      	ldr	r0, [pc, #36]	; (8001b70 <HAL_UART_MspInit+0x1e0>)
 8001b4c:	f002 febc 	bl	80048c8 <HAL_GPIO_Init>
}
 8001b50:	bf00      	nop
 8001b52:	37c8      	adds	r7, #200	; 0xc8
 8001b54:	46bd      	mov	sp, r7
 8001b56:	bd80      	pop	{r7, pc}
 8001b58:	40008000 	.word	0x40008000
 8001b5c:	40021000 	.word	0x40021000
 8001b60:	42021800 	.word	0x42021800
 8001b64:	40004c00 	.word	0x40004c00
 8001b68:	42020000 	.word	0x42020000
 8001b6c:	40004400 	.word	0x40004400
 8001b70:	42020c00 	.word	0x42020c00

08001b74 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	b0a8      	sub	sp, #160	; 0xa0
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001b7c:	f107 030c 	add.w	r3, r7, #12
 8001b80:	2294      	movs	r2, #148	; 0x94
 8001b82:	2100      	movs	r1, #0
 8001b84:	4618      	mov	r0, r3
 8001b86:	f00b fdf7 	bl	800d778 <memset>
  if(hrtc->Instance==RTC)
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	4a16      	ldr	r2, [pc, #88]	; (8001be8 <HAL_RTC_MspInit+0x74>)
 8001b90:	4293      	cmp	r3, r2
 8001b92:	d124      	bne.n	8001bde <HAL_RTC_MspInit+0x6a>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001b94:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001b98:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8001b9a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001b9e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001ba2:	f107 030c 	add.w	r3, r7, #12
 8001ba6:	4618      	mov	r0, r3
 8001ba8:	f004 fb34 	bl	8006214 <HAL_RCCEx_PeriphCLKConfig>
 8001bac:	4603      	mov	r3, r0
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d001      	beq.n	8001bb6 <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 8001bb2:	f7ff fd8c 	bl	80016ce <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001bb6:	4b0d      	ldr	r3, [pc, #52]	; (8001bec <HAL_RTC_MspInit+0x78>)
 8001bb8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001bbc:	4a0b      	ldr	r2, [pc, #44]	; (8001bec <HAL_RTC_MspInit+0x78>)
 8001bbe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001bc2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8001bc6:	4b09      	ldr	r3, [pc, #36]	; (8001bec <HAL_RTC_MspInit+0x78>)
 8001bc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bca:	4a08      	ldr	r2, [pc, #32]	; (8001bec <HAL_RTC_MspInit+0x78>)
 8001bcc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001bd0:	6593      	str	r3, [r2, #88]	; 0x58
 8001bd2:	4b06      	ldr	r3, [pc, #24]	; (8001bec <HAL_RTC_MspInit+0x78>)
 8001bd4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bd6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001bda:	60bb      	str	r3, [r7, #8]
 8001bdc:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8001bde:	bf00      	nop
 8001be0:	37a0      	adds	r7, #160	; 0xa0
 8001be2:	46bd      	mov	sp, r7
 8001be4:	bd80      	pop	{r7, pc}
 8001be6:	bf00      	nop
 8001be8:	40002800 	.word	0x40002800
 8001bec:	40021000 	.word	0x40021000

08001bf0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	b090      	sub	sp, #64	; 0x40
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bf8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	601a      	str	r2, [r3, #0]
 8001c00:	605a      	str	r2, [r3, #4]
 8001c02:	609a      	str	r2, [r3, #8]
 8001c04:	60da      	str	r2, [r3, #12]
 8001c06:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	4a62      	ldr	r2, [pc, #392]	; (8001d98 <HAL_SPI_MspInit+0x1a8>)
 8001c0e:	4293      	cmp	r3, r2
 8001c10:	d145      	bne.n	8001c9e <HAL_SPI_MspInit+0xae>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001c12:	4b62      	ldr	r3, [pc, #392]	; (8001d9c <HAL_SPI_MspInit+0x1ac>)
 8001c14:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c16:	4a61      	ldr	r2, [pc, #388]	; (8001d9c <HAL_SPI_MspInit+0x1ac>)
 8001c18:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001c1c:	6613      	str	r3, [r2, #96]	; 0x60
 8001c1e:	4b5f      	ldr	r3, [pc, #380]	; (8001d9c <HAL_SPI_MspInit+0x1ac>)
 8001c20:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c22:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001c26:	62bb      	str	r3, [r7, #40]	; 0x28
 8001c28:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c2a:	4b5c      	ldr	r3, [pc, #368]	; (8001d9c <HAL_SPI_MspInit+0x1ac>)
 8001c2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c2e:	4a5b      	ldr	r2, [pc, #364]	; (8001d9c <HAL_SPI_MspInit+0x1ac>)
 8001c30:	f043 0301 	orr.w	r3, r3, #1
 8001c34:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c36:	4b59      	ldr	r3, [pc, #356]	; (8001d9c <HAL_SPI_MspInit+0x1ac>)
 8001c38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c3a:	f003 0301 	and.w	r3, r3, #1
 8001c3e:	627b      	str	r3, [r7, #36]	; 0x24
 8001c40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001c42:	4b56      	ldr	r3, [pc, #344]	; (8001d9c <HAL_SPI_MspInit+0x1ac>)
 8001c44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c46:	4a55      	ldr	r2, [pc, #340]	; (8001d9c <HAL_SPI_MspInit+0x1ac>)
 8001c48:	f043 0310 	orr.w	r3, r3, #16
 8001c4c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c4e:	4b53      	ldr	r3, [pc, #332]	; (8001d9c <HAL_SPI_MspInit+0x1ac>)
 8001c50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c52:	f003 0310 	and.w	r3, r3, #16
 8001c56:	623b      	str	r3, [r7, #32]
 8001c58:	6a3b      	ldr	r3, [r7, #32]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PE15     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI_ADC_CLK_Pin|SPI_ADC_MISO_Pin;
 8001c5a:	2360      	movs	r3, #96	; 0x60
 8001c5c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c5e:	2302      	movs	r3, #2
 8001c60:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c62:	2300      	movs	r3, #0
 8001c64:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c66:	2300      	movs	r3, #0
 8001c68:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001c6a:	2305      	movs	r3, #5
 8001c6c:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c6e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001c72:	4619      	mov	r1, r3
 8001c74:	484a      	ldr	r0, [pc, #296]	; (8001da0 <HAL_SPI_MspInit+0x1b0>)
 8001c76:	f002 fe27 	bl	80048c8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SPI_ADC_MOSI_Pin;
 8001c7a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001c7e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c80:	2302      	movs	r3, #2
 8001c82:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c84:	2300      	movs	r3, #0
 8001c86:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c88:	2300      	movs	r3, #0
 8001c8a:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001c8c:	2305      	movs	r3, #5
 8001c8e:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(SPI_ADC_MOSI_GPIO_Port, &GPIO_InitStruct);
 8001c90:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001c94:	4619      	mov	r1, r3
 8001c96:	4843      	ldr	r0, [pc, #268]	; (8001da4 <HAL_SPI_MspInit+0x1b4>)
 8001c98:	f002 fe16 	bl	80048c8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001c9c:	e078      	b.n	8001d90 <HAL_SPI_MspInit+0x1a0>
  else if(hspi->Instance==SPI2)
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	4a41      	ldr	r2, [pc, #260]	; (8001da8 <HAL_SPI_MspInit+0x1b8>)
 8001ca4:	4293      	cmp	r3, r2
 8001ca6:	d145      	bne.n	8001d34 <HAL_SPI_MspInit+0x144>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001ca8:	4b3c      	ldr	r3, [pc, #240]	; (8001d9c <HAL_SPI_MspInit+0x1ac>)
 8001caa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cac:	4a3b      	ldr	r2, [pc, #236]	; (8001d9c <HAL_SPI_MspInit+0x1ac>)
 8001cae:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001cb2:	6593      	str	r3, [r2, #88]	; 0x58
 8001cb4:	4b39      	ldr	r3, [pc, #228]	; (8001d9c <HAL_SPI_MspInit+0x1ac>)
 8001cb6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cb8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001cbc:	61fb      	str	r3, [r7, #28]
 8001cbe:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001cc0:	4b36      	ldr	r3, [pc, #216]	; (8001d9c <HAL_SPI_MspInit+0x1ac>)
 8001cc2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cc4:	4a35      	ldr	r2, [pc, #212]	; (8001d9c <HAL_SPI_MspInit+0x1ac>)
 8001cc6:	f043 0302 	orr.w	r3, r3, #2
 8001cca:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001ccc:	4b33      	ldr	r3, [pc, #204]	; (8001d9c <HAL_SPI_MspInit+0x1ac>)
 8001cce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cd0:	f003 0302 	and.w	r3, r3, #2
 8001cd4:	61bb      	str	r3, [r7, #24]
 8001cd6:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001cd8:	4b30      	ldr	r3, [pc, #192]	; (8001d9c <HAL_SPI_MspInit+0x1ac>)
 8001cda:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cdc:	4a2f      	ldr	r2, [pc, #188]	; (8001d9c <HAL_SPI_MspInit+0x1ac>)
 8001cde:	f043 0308 	orr.w	r3, r3, #8
 8001ce2:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001ce4:	4b2d      	ldr	r3, [pc, #180]	; (8001d9c <HAL_SPI_MspInit+0x1ac>)
 8001ce6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ce8:	f003 0308 	and.w	r3, r3, #8
 8001cec:	617b      	str	r3, [r7, #20]
 8001cee:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001cf0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001cf4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cf6:	2302      	movs	r3, #2
 8001cf8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cfe:	2300      	movs	r3, #0
 8001d00:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001d02:	2305      	movs	r3, #5
 8001d04:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d06:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001d0a:	4619      	mov	r1, r3
 8001d0c:	4827      	ldr	r0, [pc, #156]	; (8001dac <HAL_SPI_MspInit+0x1bc>)
 8001d0e:	f002 fddb 	bl	80048c8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 8001d12:	2318      	movs	r3, #24
 8001d14:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d16:	2302      	movs	r3, #2
 8001d18:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d1e:	2300      	movs	r3, #0
 8001d20:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001d22:	2305      	movs	r3, #5
 8001d24:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001d26:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001d2a:	4619      	mov	r1, r3
 8001d2c:	4820      	ldr	r0, [pc, #128]	; (8001db0 <HAL_SPI_MspInit+0x1c0>)
 8001d2e:	f002 fdcb 	bl	80048c8 <HAL_GPIO_Init>
}
 8001d32:	e02d      	b.n	8001d90 <HAL_SPI_MspInit+0x1a0>
  else if(hspi->Instance==SPI3)
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	4a1e      	ldr	r2, [pc, #120]	; (8001db4 <HAL_SPI_MspInit+0x1c4>)
 8001d3a:	4293      	cmp	r3, r2
 8001d3c:	d128      	bne.n	8001d90 <HAL_SPI_MspInit+0x1a0>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001d3e:	4b17      	ldr	r3, [pc, #92]	; (8001d9c <HAL_SPI_MspInit+0x1ac>)
 8001d40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d42:	4a16      	ldr	r2, [pc, #88]	; (8001d9c <HAL_SPI_MspInit+0x1ac>)
 8001d44:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001d48:	6593      	str	r3, [r2, #88]	; 0x58
 8001d4a:	4b14      	ldr	r3, [pc, #80]	; (8001d9c <HAL_SPI_MspInit+0x1ac>)
 8001d4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d4e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001d52:	613b      	str	r3, [r7, #16]
 8001d54:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d56:	4b11      	ldr	r3, [pc, #68]	; (8001d9c <HAL_SPI_MspInit+0x1ac>)
 8001d58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d5a:	4a10      	ldr	r2, [pc, #64]	; (8001d9c <HAL_SPI_MspInit+0x1ac>)
 8001d5c:	f043 0304 	orr.w	r3, r3, #4
 8001d60:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d62:	4b0e      	ldr	r3, [pc, #56]	; (8001d9c <HAL_SPI_MspInit+0x1ac>)
 8001d64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d66:	f003 0304 	and.w	r3, r3, #4
 8001d6a:	60fb      	str	r3, [r7, #12]
 8001d6c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8001d6e:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8001d72:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d74:	2302      	movs	r3, #2
 8001d76:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d78:	2300      	movs	r3, #0
 8001d7a:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d7c:	2300      	movs	r3, #0
 8001d7e:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001d80:	2306      	movs	r3, #6
 8001d82:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d84:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001d88:	4619      	mov	r1, r3
 8001d8a:	480b      	ldr	r0, [pc, #44]	; (8001db8 <HAL_SPI_MspInit+0x1c8>)
 8001d8c:	f002 fd9c 	bl	80048c8 <HAL_GPIO_Init>
}
 8001d90:	bf00      	nop
 8001d92:	3740      	adds	r7, #64	; 0x40
 8001d94:	46bd      	mov	sp, r7
 8001d96:	bd80      	pop	{r7, pc}
 8001d98:	40013000 	.word	0x40013000
 8001d9c:	40021000 	.word	0x40021000
 8001da0:	42020000 	.word	0x42020000
 8001da4:	42021000 	.word	0x42021000
 8001da8:	40003800 	.word	0x40003800
 8001dac:	42020400 	.word	0x42020400
 8001db0:	42020c00 	.word	0x42020c00
 8001db4:	40003c00 	.word	0x40003c00
 8001db8:	42020800 	.word	0x42020800

08001dbc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	b08c      	sub	sp, #48	; 0x30
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dc4:	f107 031c 	add.w	r3, r7, #28
 8001dc8:	2200      	movs	r2, #0
 8001dca:	601a      	str	r2, [r3, #0]
 8001dcc:	605a      	str	r2, [r3, #4]
 8001dce:	609a      	str	r2, [r3, #8]
 8001dd0:	60da      	str	r2, [r3, #12]
 8001dd2:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	4a3c      	ldr	r2, [pc, #240]	; (8001ecc <HAL_TIM_Base_MspInit+0x110>)
 8001dda:	4293      	cmp	r3, r2
 8001ddc:	d146      	bne.n	8001e6c <HAL_TIM_Base_MspInit+0xb0>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001dde:	4b3c      	ldr	r3, [pc, #240]	; (8001ed0 <HAL_TIM_Base_MspInit+0x114>)
 8001de0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001de2:	4a3b      	ldr	r2, [pc, #236]	; (8001ed0 <HAL_TIM_Base_MspInit+0x114>)
 8001de4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001de8:	6613      	str	r3, [r2, #96]	; 0x60
 8001dea:	4b39      	ldr	r3, [pc, #228]	; (8001ed0 <HAL_TIM_Base_MspInit+0x114>)
 8001dec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001dee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001df2:	61bb      	str	r3, [r7, #24]
 8001df4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001df6:	4b36      	ldr	r3, [pc, #216]	; (8001ed0 <HAL_TIM_Base_MspInit+0x114>)
 8001df8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001dfa:	4a35      	ldr	r2, [pc, #212]	; (8001ed0 <HAL_TIM_Base_MspInit+0x114>)
 8001dfc:	f043 0310 	orr.w	r3, r3, #16
 8001e00:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001e02:	4b33      	ldr	r3, [pc, #204]	; (8001ed0 <HAL_TIM_Base_MspInit+0x114>)
 8001e04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e06:	f003 0310 	and.w	r3, r3, #16
 8001e0a:	617b      	str	r3, [r7, #20]
 8001e0c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e0e:	4b30      	ldr	r3, [pc, #192]	; (8001ed0 <HAL_TIM_Base_MspInit+0x114>)
 8001e10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e12:	4a2f      	ldr	r2, [pc, #188]	; (8001ed0 <HAL_TIM_Base_MspInit+0x114>)
 8001e14:	f043 0301 	orr.w	r3, r3, #1
 8001e18:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001e1a:	4b2d      	ldr	r3, [pc, #180]	; (8001ed0 <HAL_TIM_Base_MspInit+0x114>)
 8001e1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e1e:	f003 0301 	and.w	r3, r3, #1
 8001e22:	613b      	str	r3, [r7, #16]
 8001e24:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PE14     ------> TIM1_CH4
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = RC_PWM_STEERING_IN_Pin;
 8001e26:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001e2a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e2c:	2302      	movs	r3, #2
 8001e2e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e30:	2300      	movs	r3, #0
 8001e32:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e34:	2300      	movs	r3, #0
 8001e36:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001e38:	2301      	movs	r3, #1
 8001e3a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(RC_PWM_STEERING_IN_GPIO_Port, &GPIO_InitStruct);
 8001e3c:	f107 031c 	add.w	r3, r7, #28
 8001e40:	4619      	mov	r1, r3
 8001e42:	4824      	ldr	r0, [pc, #144]	; (8001ed4 <HAL_TIM_Base_MspInit+0x118>)
 8001e44:	f002 fd40 	bl	80048c8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RC_PWM_THROTTLE_IN_Pin;
 8001e48:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001e4c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e4e:	2302      	movs	r3, #2
 8001e50:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e52:	2300      	movs	r3, #0
 8001e54:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e56:	2300      	movs	r3, #0
 8001e58:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001e5a:	2301      	movs	r3, #1
 8001e5c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(RC_PWM_THROTTLE_IN_GPIO_Port, &GPIO_InitStruct);
 8001e5e:	f107 031c 	add.w	r3, r7, #28
 8001e62:	4619      	mov	r1, r3
 8001e64:	481c      	ldr	r0, [pc, #112]	; (8001ed8 <HAL_TIM_Base_MspInit+0x11c>)
 8001e66:	f002 fd2f 	bl	80048c8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8001e6a:	e02a      	b.n	8001ec2 <HAL_TIM_Base_MspInit+0x106>
  else if(htim_base->Instance==TIM5)
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	4a1a      	ldr	r2, [pc, #104]	; (8001edc <HAL_TIM_Base_MspInit+0x120>)
 8001e72:	4293      	cmp	r3, r2
 8001e74:	d10c      	bne.n	8001e90 <HAL_TIM_Base_MspInit+0xd4>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001e76:	4b16      	ldr	r3, [pc, #88]	; (8001ed0 <HAL_TIM_Base_MspInit+0x114>)
 8001e78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e7a:	4a15      	ldr	r2, [pc, #84]	; (8001ed0 <HAL_TIM_Base_MspInit+0x114>)
 8001e7c:	f043 0308 	orr.w	r3, r3, #8
 8001e80:	6593      	str	r3, [r2, #88]	; 0x58
 8001e82:	4b13      	ldr	r3, [pc, #76]	; (8001ed0 <HAL_TIM_Base_MspInit+0x114>)
 8001e84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e86:	f003 0308 	and.w	r3, r3, #8
 8001e8a:	60fb      	str	r3, [r7, #12]
 8001e8c:	68fb      	ldr	r3, [r7, #12]
}
 8001e8e:	e018      	b.n	8001ec2 <HAL_TIM_Base_MspInit+0x106>
  else if(htim_base->Instance==TIM6)
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	4a12      	ldr	r2, [pc, #72]	; (8001ee0 <HAL_TIM_Base_MspInit+0x124>)
 8001e96:	4293      	cmp	r3, r2
 8001e98:	d113      	bne.n	8001ec2 <HAL_TIM_Base_MspInit+0x106>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001e9a:	4b0d      	ldr	r3, [pc, #52]	; (8001ed0 <HAL_TIM_Base_MspInit+0x114>)
 8001e9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e9e:	4a0c      	ldr	r2, [pc, #48]	; (8001ed0 <HAL_TIM_Base_MspInit+0x114>)
 8001ea0:	f043 0310 	orr.w	r3, r3, #16
 8001ea4:	6593      	str	r3, [r2, #88]	; 0x58
 8001ea6:	4b0a      	ldr	r3, [pc, #40]	; (8001ed0 <HAL_TIM_Base_MspInit+0x114>)
 8001ea8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001eaa:	f003 0310 	and.w	r3, r3, #16
 8001eae:	60bb      	str	r3, [r7, #8]
 8001eb0:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM6_IRQn, 5, 0);
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	2105      	movs	r1, #5
 8001eb6:	2031      	movs	r0, #49	; 0x31
 8001eb8:	f002 f930 	bl	800411c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_IRQn);
 8001ebc:	2031      	movs	r0, #49	; 0x31
 8001ebe:	f002 f947 	bl	8004150 <HAL_NVIC_EnableIRQ>
}
 8001ec2:	bf00      	nop
 8001ec4:	3730      	adds	r7, #48	; 0x30
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	bd80      	pop	{r7, pc}
 8001eca:	bf00      	nop
 8001ecc:	40012c00 	.word	0x40012c00
 8001ed0:	40021000 	.word	0x40021000
 8001ed4:	42021000 	.word	0x42021000
 8001ed8:	42020000 	.word	0x42020000
 8001edc:	40000c00 	.word	0x40000c00
 8001ee0:	40001000 	.word	0x40001000

08001ee4 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	b08a      	sub	sp, #40	; 0x28
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001eec:	f107 0314 	add.w	r3, r7, #20
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	601a      	str	r2, [r3, #0]
 8001ef4:	605a      	str	r2, [r3, #4]
 8001ef6:	609a      	str	r2, [r3, #8]
 8001ef8:	60da      	str	r2, [r3, #12]
 8001efa:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	4a1b      	ldr	r2, [pc, #108]	; (8001f70 <HAL_TIM_Encoder_MspInit+0x8c>)
 8001f02:	4293      	cmp	r3, r2
 8001f04:	d12f      	bne.n	8001f66 <HAL_TIM_Encoder_MspInit+0x82>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001f06:	4b1b      	ldr	r3, [pc, #108]	; (8001f74 <HAL_TIM_Encoder_MspInit+0x90>)
 8001f08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f0a:	4a1a      	ldr	r2, [pc, #104]	; (8001f74 <HAL_TIM_Encoder_MspInit+0x90>)
 8001f0c:	f043 0302 	orr.w	r3, r3, #2
 8001f10:	6593      	str	r3, [r2, #88]	; 0x58
 8001f12:	4b18      	ldr	r3, [pc, #96]	; (8001f74 <HAL_TIM_Encoder_MspInit+0x90>)
 8001f14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f16:	f003 0302 	and.w	r3, r3, #2
 8001f1a:	613b      	str	r3, [r7, #16]
 8001f1c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001f1e:	4b15      	ldr	r3, [pc, #84]	; (8001f74 <HAL_TIM_Encoder_MspInit+0x90>)
 8001f20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f22:	4a14      	ldr	r2, [pc, #80]	; (8001f74 <HAL_TIM_Encoder_MspInit+0x90>)
 8001f24:	f043 0310 	orr.w	r3, r3, #16
 8001f28:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001f2a:	4b12      	ldr	r3, [pc, #72]	; (8001f74 <HAL_TIM_Encoder_MspInit+0x90>)
 8001f2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f2e:	f003 0310 	and.w	r3, r3, #16
 8001f32:	60fb      	str	r3, [r7, #12]
 8001f34:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PE3     ------> TIM3_CH1
    PE4     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = ENC_CH_A_Pin|ENC_CHB_Pin;
 8001f36:	2318      	movs	r3, #24
 8001f38:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f3a:	2302      	movs	r3, #2
 8001f3c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f3e:	2300      	movs	r3, #0
 8001f40:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f42:	2300      	movs	r3, #0
 8001f44:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001f46:	2302      	movs	r3, #2
 8001f48:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001f4a:	f107 0314 	add.w	r3, r7, #20
 8001f4e:	4619      	mov	r1, r3
 8001f50:	4809      	ldr	r0, [pc, #36]	; (8001f78 <HAL_TIM_Encoder_MspInit+0x94>)
 8001f52:	f002 fcb9 	bl	80048c8 <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 8001f56:	2200      	movs	r2, #0
 8001f58:	2105      	movs	r1, #5
 8001f5a:	202e      	movs	r0, #46	; 0x2e
 8001f5c:	f002 f8de 	bl	800411c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001f60:	202e      	movs	r0, #46	; 0x2e
 8001f62:	f002 f8f5 	bl	8004150 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001f66:	bf00      	nop
 8001f68:	3728      	adds	r7, #40	; 0x28
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	bd80      	pop	{r7, pc}
 8001f6e:	bf00      	nop
 8001f70:	40000400 	.word	0x40000400
 8001f74:	40021000 	.word	0x40021000
 8001f78:	42021000 	.word	0x42021000

08001f7c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	b08a      	sub	sp, #40	; 0x28
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f84:	f107 0314 	add.w	r3, r7, #20
 8001f88:	2200      	movs	r2, #0
 8001f8a:	601a      	str	r2, [r3, #0]
 8001f8c:	605a      	str	r2, [r3, #4]
 8001f8e:	609a      	str	r2, [r3, #8]
 8001f90:	60da      	str	r2, [r3, #12]
 8001f92:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	4a23      	ldr	r2, [pc, #140]	; (8002028 <HAL_TIM_MspPostInit+0xac>)
 8001f9a:	4293      	cmp	r3, r2
 8001f9c:	d11d      	bne.n	8001fda <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f9e:	4b23      	ldr	r3, [pc, #140]	; (800202c <HAL_TIM_MspPostInit+0xb0>)
 8001fa0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fa2:	4a22      	ldr	r2, [pc, #136]	; (800202c <HAL_TIM_MspPostInit+0xb0>)
 8001fa4:	f043 0301 	orr.w	r3, r3, #1
 8001fa8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001faa:	4b20      	ldr	r3, [pc, #128]	; (800202c <HAL_TIM_MspPostInit+0xb0>)
 8001fac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fae:	f003 0301 	and.w	r3, r3, #1
 8001fb2:	613b      	str	r3, [r7, #16]
 8001fb4:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = RC_PWM_STEERING_Pin;
 8001fb6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001fba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fbc:	2302      	movs	r3, #2
 8001fbe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fc0:	2300      	movs	r3, #0
 8001fc2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fc4:	2300      	movs	r3, #0
 8001fc6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001fc8:	2301      	movs	r3, #1
 8001fca:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(RC_PWM_STEERING_GPIO_Port, &GPIO_InitStruct);
 8001fcc:	f107 0314 	add.w	r3, r7, #20
 8001fd0:	4619      	mov	r1, r3
 8001fd2:	4817      	ldr	r0, [pc, #92]	; (8002030 <HAL_TIM_MspPostInit+0xb4>)
 8001fd4:	f002 fc78 	bl	80048c8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 8001fd8:	e021      	b.n	800201e <HAL_TIM_MspPostInit+0xa2>
  else if(htim->Instance==TIM5)
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	4a15      	ldr	r2, [pc, #84]	; (8002034 <HAL_TIM_MspPostInit+0xb8>)
 8001fe0:	4293      	cmp	r3, r2
 8001fe2:	d11c      	bne.n	800201e <HAL_TIM_MspPostInit+0xa2>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001fe4:	4b11      	ldr	r3, [pc, #68]	; (800202c <HAL_TIM_MspPostInit+0xb0>)
 8001fe6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fe8:	4a10      	ldr	r2, [pc, #64]	; (800202c <HAL_TIM_MspPostInit+0xb0>)
 8001fea:	f043 0320 	orr.w	r3, r3, #32
 8001fee:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001ff0:	4b0e      	ldr	r3, [pc, #56]	; (800202c <HAL_TIM_MspPostInit+0xb0>)
 8001ff2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ff4:	f003 0320 	and.w	r3, r3, #32
 8001ff8:	60fb      	str	r3, [r7, #12]
 8001ffa:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = MOTOR_PWM1_Pin|MOTOR_PWM2_Pin;
 8001ffc:	f44f 7310 	mov.w	r3, #576	; 0x240
 8002000:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002002:	2302      	movs	r3, #2
 8002004:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002006:	2300      	movs	r3, #0
 8002008:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800200a:	2300      	movs	r3, #0
 800200c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 800200e:	2302      	movs	r3, #2
 8002010:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002012:	f107 0314 	add.w	r3, r7, #20
 8002016:	4619      	mov	r1, r3
 8002018:	4807      	ldr	r0, [pc, #28]	; (8002038 <HAL_TIM_MspPostInit+0xbc>)
 800201a:	f002 fc55 	bl	80048c8 <HAL_GPIO_Init>
}
 800201e:	bf00      	nop
 8002020:	3728      	adds	r7, #40	; 0x28
 8002022:	46bd      	mov	sp, r7
 8002024:	bd80      	pop	{r7, pc}
 8002026:	bf00      	nop
 8002028:	40012c00 	.word	0x40012c00
 800202c:	40021000 	.word	0x40021000
 8002030:	42020000 	.word	0x42020000
 8002034:	40000c00 	.word	0x40000c00
 8002038:	42021400 	.word	0x42021400

0800203c <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 800203c:	b580      	push	{r7, lr}
 800203e:	b0ae      	sub	sp, #184	; 0xb8
 8002040:	af00      	add	r7, sp, #0
 8002042:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002044:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002048:	2200      	movs	r2, #0
 800204a:	601a      	str	r2, [r3, #0]
 800204c:	605a      	str	r2, [r3, #4]
 800204e:	609a      	str	r2, [r3, #8]
 8002050:	60da      	str	r2, [r3, #12]
 8002052:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002054:	f107 0310 	add.w	r3, r7, #16
 8002058:	2294      	movs	r2, #148	; 0x94
 800205a:	2100      	movs	r1, #0
 800205c:	4618      	mov	r0, r3
 800205e:	f00b fb8b 	bl	800d778 <memset>
  if(hpcd->Instance==USB)
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	4a22      	ldr	r2, [pc, #136]	; (80020f0 <HAL_PCD_MspInit+0xb4>)
 8002068:	4293      	cmp	r3, r2
 800206a:	d13d      	bne.n	80020e8 <HAL_PCD_MspInit+0xac>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800206c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002070:	613b      	str	r3, [r7, #16]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8002072:	2300      	movs	r3, #0
 8002074:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002078:	f107 0310 	add.w	r3, r7, #16
 800207c:	4618      	mov	r0, r3
 800207e:	f004 f8c9 	bl	8006214 <HAL_RCCEx_PeriphCLKConfig>
 8002082:	4603      	mov	r3, r0
 8002084:	2b00      	cmp	r3, #0
 8002086:	d001      	beq.n	800208c <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8002088:	f7ff fb21 	bl	80016ce <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800208c:	4b19      	ldr	r3, [pc, #100]	; (80020f4 <HAL_PCD_MspInit+0xb8>)
 800208e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002090:	4a18      	ldr	r2, [pc, #96]	; (80020f4 <HAL_PCD_MspInit+0xb8>)
 8002092:	f043 0301 	orr.w	r3, r3, #1
 8002096:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002098:	4b16      	ldr	r3, [pc, #88]	; (80020f4 <HAL_PCD_MspInit+0xb8>)
 800209a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800209c:	f003 0301 	and.w	r3, r3, #1
 80020a0:	60fb      	str	r3, [r7, #12]
 80020a2:	68fb      	ldr	r3, [r7, #12]
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80020a4:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80020a8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020ac:	2302      	movs	r3, #2
 80020ae:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020b2:	2300      	movs	r3, #0
 80020b4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020b8:	2300      	movs	r3, #0
 80020ba:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 80020be:	230a      	movs	r3, #10
 80020c0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020c4:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80020c8:	4619      	mov	r1, r3
 80020ca:	480b      	ldr	r0, [pc, #44]	; (80020f8 <HAL_PCD_MspInit+0xbc>)
 80020cc:	f002 fbfc 	bl	80048c8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80020d0:	4b08      	ldr	r3, [pc, #32]	; (80020f4 <HAL_PCD_MspInit+0xb8>)
 80020d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020d4:	4a07      	ldr	r2, [pc, #28]	; (80020f4 <HAL_PCD_MspInit+0xb8>)
 80020d6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80020da:	65d3      	str	r3, [r2, #92]	; 0x5c
 80020dc:	4b05      	ldr	r3, [pc, #20]	; (80020f4 <HAL_PCD_MspInit+0xb8>)
 80020de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020e0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80020e4:	60bb      	str	r3, [r7, #8]
 80020e6:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 80020e8:	bf00      	nop
 80020ea:	37b8      	adds	r7, #184	; 0xb8
 80020ec:	46bd      	mov	sp, r7
 80020ee:	bd80      	pop	{r7, pc}
 80020f0:	4000d400 	.word	0x4000d400
 80020f4:	40021000 	.word	0x40021000
 80020f8:	42020000 	.word	0x42020000

080020fc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80020fc:	b580      	push	{r7, lr}
 80020fe:	b08c      	sub	sp, #48	; 0x30
 8002100:	af00      	add	r7, sp, #0
 8002102:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8002104:	2300      	movs	r3, #0
 8002106:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8002108:	2300      	movs	r3, #0
 800210a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM2 IRQ priority */
  HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority ,0);
 800210c:	2200      	movs	r2, #0
 800210e:	6879      	ldr	r1, [r7, #4]
 8002110:	202d      	movs	r0, #45	; 0x2d
 8002112:	f002 f803 	bl	800411c <HAL_NVIC_SetPriority>

  /* Enable the TIM2 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002116:	202d      	movs	r0, #45	; 0x2d
 8002118:	f002 f81a 	bl	8004150 <HAL_NVIC_EnableIRQ>

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 800211c:	4b1f      	ldr	r3, [pc, #124]	; (800219c <HAL_InitTick+0xa0>)
 800211e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002120:	4a1e      	ldr	r2, [pc, #120]	; (800219c <HAL_InitTick+0xa0>)
 8002122:	f043 0301 	orr.w	r3, r3, #1
 8002126:	6593      	str	r3, [r2, #88]	; 0x58
 8002128:	4b1c      	ldr	r3, [pc, #112]	; (800219c <HAL_InitTick+0xa0>)
 800212a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800212c:	f003 0301 	and.w	r3, r3, #1
 8002130:	60fb      	str	r3, [r7, #12]
 8002132:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002134:	f107 0210 	add.w	r2, r7, #16
 8002138:	f107 0314 	add.w	r3, r7, #20
 800213c:	4611      	mov	r1, r2
 800213e:	4618      	mov	r0, r3
 8002140:	f003 ff64 	bl	800600c <HAL_RCC_GetClockConfig>

  /* Compute TIM2 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8002144:	f003 ff3a 	bl	8005fbc <HAL_RCC_GetPCLK1Freq>
 8002148:	62f8      	str	r0, [r7, #44]	; 0x2c

  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800214a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800214c:	4a14      	ldr	r2, [pc, #80]	; (80021a0 <HAL_InitTick+0xa4>)
 800214e:	fba2 2303 	umull	r2, r3, r2, r3
 8002152:	0c9b      	lsrs	r3, r3, #18
 8002154:	3b01      	subs	r3, #1
 8002156:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 8002158:	4b12      	ldr	r3, [pc, #72]	; (80021a4 <HAL_InitTick+0xa8>)
 800215a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800215e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 8002160:	4b10      	ldr	r3, [pc, #64]	; (80021a4 <HAL_InitTick+0xa8>)
 8002162:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002166:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 8002168:	4a0e      	ldr	r2, [pc, #56]	; (80021a4 <HAL_InitTick+0xa8>)
 800216a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800216c:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 800216e:	4b0d      	ldr	r3, [pc, #52]	; (80021a4 <HAL_InitTick+0xa8>)
 8002170:	2200      	movs	r2, #0
 8002172:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002174:	4b0b      	ldr	r3, [pc, #44]	; (80021a4 <HAL_InitTick+0xa8>)
 8002176:	2200      	movs	r2, #0
 8002178:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim2) == HAL_OK)
 800217a:	480a      	ldr	r0, [pc, #40]	; (80021a4 <HAL_InitTick+0xa8>)
 800217c:	f004 ff3d 	bl	8006ffa <HAL_TIM_Base_Init>
 8002180:	4603      	mov	r3, r0
 8002182:	2b00      	cmp	r3, #0
 8002184:	d104      	bne.n	8002190 <HAL_InitTick+0x94>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim2);
 8002186:	4807      	ldr	r0, [pc, #28]	; (80021a4 <HAL_InitTick+0xa8>)
 8002188:	f004 ff8e 	bl	80070a8 <HAL_TIM_Base_Start_IT>
 800218c:	4603      	mov	r3, r0
 800218e:	e000      	b.n	8002192 <HAL_InitTick+0x96>
  }

  /* Return function status */
  return HAL_ERROR;
 8002190:	2301      	movs	r3, #1
}
 8002192:	4618      	mov	r0, r3
 8002194:	3730      	adds	r7, #48	; 0x30
 8002196:	46bd      	mov	sp, r7
 8002198:	bd80      	pop	{r7, pc}
 800219a:	bf00      	nop
 800219c:	40021000 	.word	0x40021000
 80021a0:	431bde83 	.word	0x431bde83
 80021a4:	20000928 	.word	0x20000928

080021a8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80021a8:	b480      	push	{r7}
 80021aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80021ac:	e7fe      	b.n	80021ac <NMI_Handler+0x4>

080021ae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80021ae:	b480      	push	{r7}
 80021b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80021b2:	e7fe      	b.n	80021b2 <HardFault_Handler+0x4>

080021b4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80021b4:	b480      	push	{r7}
 80021b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80021b8:	e7fe      	b.n	80021b8 <MemManage_Handler+0x4>

080021ba <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80021ba:	b480      	push	{r7}
 80021bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80021be:	e7fe      	b.n	80021be <BusFault_Handler+0x4>

080021c0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80021c0:	b480      	push	{r7}
 80021c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80021c4:	e7fe      	b.n	80021c4 <UsageFault_Handler+0x4>

080021c6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80021c6:	b480      	push	{r7}
 80021c8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80021ca:	bf00      	nop
 80021cc:	46bd      	mov	sp, r7
 80021ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d2:	4770      	bx	lr

080021d4 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80021d4:	b580      	push	{r7, lr}
 80021d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80021d8:	4802      	ldr	r0, [pc, #8]	; (80021e4 <DMA1_Channel1_IRQHandler+0x10>)
 80021da:	f002 f9a5 	bl	8004528 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80021de:	bf00      	nop
 80021e0:	bd80      	pop	{r7, pc}
 80021e2:	bf00      	nop
 80021e4:	20000110 	.word	0x20000110

080021e8 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80021ec:	4802      	ldr	r0, [pc, #8]	; (80021f8 <ADC1_2_IRQHandler+0x10>)
 80021ee:	f000 fdb7 	bl	8002d60 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 80021f2:	bf00      	nop
 80021f4:	bd80      	pop	{r7, pc}
 80021f6:	bf00      	nop
 80021f8:	200000a8 	.word	0x200000a8

080021fc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80021fc:	b580      	push	{r7, lr}
 80021fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002200:	4802      	ldr	r0, [pc, #8]	; (800220c <TIM2_IRQHandler+0x10>)
 8002202:	f005 fa30 	bl	8007666 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002206:	bf00      	nop
 8002208:	bd80      	pop	{r7, pc}
 800220a:	bf00      	nop
 800220c:	20000928 	.word	0x20000928

08002210 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002210:	b580      	push	{r7, lr}
 8002212:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002214:	4802      	ldr	r0, [pc, #8]	; (8002220 <TIM3_IRQHandler+0x10>)
 8002216:	f005 fa26 	bl	8007666 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800221a:	bf00      	nop
 800221c:	bd80      	pop	{r7, pc}
 800221e:	bf00      	nop
 8002220:	20000528 	.word	0x20000528

08002224 <TIM6_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt.
  */
void TIM6_IRQHandler(void)
{
 8002224:	b580      	push	{r7, lr}
 8002226:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_IRQn 0 */

  /* USER CODE END TIM6_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002228:	4802      	ldr	r0, [pc, #8]	; (8002234 <TIM6_IRQHandler+0x10>)
 800222a:	f005 fa1c 	bl	8007666 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_IRQn 1 */

  /* USER CODE END TIM6_IRQn 1 */
}
 800222e:	bf00      	nop
 8002230:	bd80      	pop	{r7, pc}
 8002232:	bf00      	nop
 8002234:	200005c0 	.word	0x200005c0

08002238 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt / UART4 wake-up interrupt through EXTI line 29.
  */
void UART4_IRQHandler(void)
{
 8002238:	b580      	push	{r7, lr}
 800223a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 800223c:	4802      	ldr	r0, [pc, #8]	; (8002248 <UART4_IRQHandler+0x10>)
 800223e:	f006 fd0b 	bl	8008c58 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8002242:	bf00      	nop
 8002244:	bd80      	pop	{r7, pc}
 8002246:	bf00      	nop
 8002248:	20000260 	.word	0x20000260

0800224c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800224c:	b580      	push	{r7, lr}
 800224e:	b086      	sub	sp, #24
 8002250:	af00      	add	r7, sp, #0
 8002252:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002254:	4a14      	ldr	r2, [pc, #80]	; (80022a8 <_sbrk+0x5c>)
 8002256:	4b15      	ldr	r3, [pc, #84]	; (80022ac <_sbrk+0x60>)
 8002258:	1ad3      	subs	r3, r2, r3
 800225a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800225c:	697b      	ldr	r3, [r7, #20]
 800225e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002260:	4b13      	ldr	r3, [pc, #76]	; (80022b0 <_sbrk+0x64>)
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	2b00      	cmp	r3, #0
 8002266:	d102      	bne.n	800226e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002268:	4b11      	ldr	r3, [pc, #68]	; (80022b0 <_sbrk+0x64>)
 800226a:	4a12      	ldr	r2, [pc, #72]	; (80022b4 <_sbrk+0x68>)
 800226c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800226e:	4b10      	ldr	r3, [pc, #64]	; (80022b0 <_sbrk+0x64>)
 8002270:	681a      	ldr	r2, [r3, #0]
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	4413      	add	r3, r2
 8002276:	693a      	ldr	r2, [r7, #16]
 8002278:	429a      	cmp	r2, r3
 800227a:	d207      	bcs.n	800228c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800227c:	f00b fa84 	bl	800d788 <__errno>
 8002280:	4603      	mov	r3, r0
 8002282:	220c      	movs	r2, #12
 8002284:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002286:	f04f 33ff 	mov.w	r3, #4294967295
 800228a:	e009      	b.n	80022a0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800228c:	4b08      	ldr	r3, [pc, #32]	; (80022b0 <_sbrk+0x64>)
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002292:	4b07      	ldr	r3, [pc, #28]	; (80022b0 <_sbrk+0x64>)
 8002294:	681a      	ldr	r2, [r3, #0]
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	4413      	add	r3, r2
 800229a:	4a05      	ldr	r2, [pc, #20]	; (80022b0 <_sbrk+0x64>)
 800229c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800229e:	68fb      	ldr	r3, [r7, #12]
}
 80022a0:	4618      	mov	r0, r3
 80022a2:	3718      	adds	r7, #24
 80022a4:	46bd      	mov	sp, r7
 80022a6:	bd80      	pop	{r7, pc}
 80022a8:	20030000 	.word	0x20030000
 80022ac:	00000400 	.word	0x00000400
 80022b0:	20000974 	.word	0x20000974
 80022b4:	20003810 	.word	0x20003810

080022b8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80022b8:	b480      	push	{r7}
 80022ba:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80022bc:	4b06      	ldr	r3, [pc, #24]	; (80022d8 <SystemInit+0x20>)
 80022be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022c2:	4a05      	ldr	r2, [pc, #20]	; (80022d8 <SystemInit+0x20>)
 80022c4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80022c8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80022cc:	bf00      	nop
 80022ce:	46bd      	mov	sp, r7
 80022d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d4:	4770      	bx	lr
 80022d6:	bf00      	nop
 80022d8:	e000ed00 	.word	0xe000ed00

080022dc <SystemCoreClockUpdate>:
  *           value for HSE crystal.
  *
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 80022dc:	b480      	push	{r7}
 80022de:	b087      	sub	sp, #28
 80022e0:	af00      	add	r7, sp, #0
  uint32_t tmp, msirange, pllvco, pllsource, pllm, pllr;

  /* Get MSI Range frequency--------------------------------------------------*/
  if((RCC->CR & RCC_CR_MSIRGSEL) == 0U)
 80022e2:	4b4f      	ldr	r3, [pc, #316]	; (8002420 <SystemCoreClockUpdate+0x144>)
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f003 0308 	and.w	r3, r3, #8
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d107      	bne.n	80022fe <SystemCoreClockUpdate+0x22>
  { /* MSISRANGE from RCC_CSR applies */
    msirange = (RCC->CSR & RCC_CSR_MSISRANGE) >> 8U;
 80022ee:	4b4c      	ldr	r3, [pc, #304]	; (8002420 <SystemCoreClockUpdate+0x144>)
 80022f0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80022f4:	0a1b      	lsrs	r3, r3, #8
 80022f6:	f003 030f 	and.w	r3, r3, #15
 80022fa:	617b      	str	r3, [r7, #20]
 80022fc:	e005      	b.n	800230a <SystemCoreClockUpdate+0x2e>
  }
  else
  { /* MSIRANGE from RCC_CR applies */
    msirange = (RCC->CR & RCC_CR_MSIRANGE) >> 4U;
 80022fe:	4b48      	ldr	r3, [pc, #288]	; (8002420 <SystemCoreClockUpdate+0x144>)
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	091b      	lsrs	r3, r3, #4
 8002304:	f003 030f 	and.w	r3, r3, #15
 8002308:	617b      	str	r3, [r7, #20]
  }
  /*MSI frequency range in HZ*/
  msirange = MSIRangeTable[msirange];
 800230a:	4a46      	ldr	r2, [pc, #280]	; (8002424 <SystemCoreClockUpdate+0x148>)
 800230c:	697b      	ldr	r3, [r7, #20]
 800230e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002312:	617b      	str	r3, [r7, #20]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002314:	4b42      	ldr	r3, [pc, #264]	; (8002420 <SystemCoreClockUpdate+0x144>)
 8002316:	689b      	ldr	r3, [r3, #8]
 8002318:	f003 030c 	and.w	r3, r3, #12
 800231c:	2b0c      	cmp	r3, #12
 800231e:	d866      	bhi.n	80023ee <SystemCoreClockUpdate+0x112>
 8002320:	a201      	add	r2, pc, #4	; (adr r2, 8002328 <SystemCoreClockUpdate+0x4c>)
 8002322:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002326:	bf00      	nop
 8002328:	0800235d 	.word	0x0800235d
 800232c:	080023ef 	.word	0x080023ef
 8002330:	080023ef 	.word	0x080023ef
 8002334:	080023ef 	.word	0x080023ef
 8002338:	08002365 	.word	0x08002365
 800233c:	080023ef 	.word	0x080023ef
 8002340:	080023ef 	.word	0x080023ef
 8002344:	080023ef 	.word	0x080023ef
 8002348:	0800236d 	.word	0x0800236d
 800234c:	080023ef 	.word	0x080023ef
 8002350:	080023ef 	.word	0x080023ef
 8002354:	080023ef 	.word	0x080023ef
 8002358:	08002375 	.word	0x08002375
  {
    case 0x00:  /* MSI used as system clock source */
      SystemCoreClock = msirange;
 800235c:	4a32      	ldr	r2, [pc, #200]	; (8002428 <SystemCoreClockUpdate+0x14c>)
 800235e:	697b      	ldr	r3, [r7, #20]
 8002360:	6013      	str	r3, [r2, #0]
      break;
 8002362:	e048      	b.n	80023f6 <SystemCoreClockUpdate+0x11a>

    case 0x04:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 8002364:	4b30      	ldr	r3, [pc, #192]	; (8002428 <SystemCoreClockUpdate+0x14c>)
 8002366:	4a31      	ldr	r2, [pc, #196]	; (800242c <SystemCoreClockUpdate+0x150>)
 8002368:	601a      	str	r2, [r3, #0]
      break;
 800236a:	e044      	b.n	80023f6 <SystemCoreClockUpdate+0x11a>

    case 0x08:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 800236c:	4b2e      	ldr	r3, [pc, #184]	; (8002428 <SystemCoreClockUpdate+0x14c>)
 800236e:	4a30      	ldr	r2, [pc, #192]	; (8002430 <SystemCoreClockUpdate+0x154>)
 8002370:	601a      	str	r2, [r3, #0]
      break;
 8002372:	e040      	b.n	80023f6 <SystemCoreClockUpdate+0x11a>

    case 0x0C:  /* PLL used as system clock  source */
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLR
         */
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8002374:	4b2a      	ldr	r3, [pc, #168]	; (8002420 <SystemCoreClockUpdate+0x144>)
 8002376:	68db      	ldr	r3, [r3, #12]
 8002378:	f003 0303 	and.w	r3, r3, #3
 800237c:	60fb      	str	r3, [r7, #12]
      pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> 4U) + 1U ;
 800237e:	4b28      	ldr	r3, [pc, #160]	; (8002420 <SystemCoreClockUpdate+0x144>)
 8002380:	68db      	ldr	r3, [r3, #12]
 8002382:	091b      	lsrs	r3, r3, #4
 8002384:	f003 030f 	and.w	r3, r3, #15
 8002388:	3301      	adds	r3, #1
 800238a:	60bb      	str	r3, [r7, #8]
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	2b02      	cmp	r3, #2
 8002390:	d003      	beq.n	800239a <SystemCoreClockUpdate+0xbe>
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	2b03      	cmp	r3, #3
 8002396:	d006      	beq.n	80023a6 <SystemCoreClockUpdate+0xca>
 8002398:	e00b      	b.n	80023b2 <SystemCoreClockUpdate+0xd6>

      switch (pllsource)
      {
        case 0x02:  /* HSI used as PLL clock source */
          pllvco = (HSI_VALUE / pllm);
 800239a:	4a24      	ldr	r2, [pc, #144]	; (800242c <SystemCoreClockUpdate+0x150>)
 800239c:	68bb      	ldr	r3, [r7, #8]
 800239e:	fbb2 f3f3 	udiv	r3, r2, r3
 80023a2:	613b      	str	r3, [r7, #16]
          break;
 80023a4:	e00b      	b.n	80023be <SystemCoreClockUpdate+0xe2>

        case 0x03:  /* HSE used as PLL clock source */
          pllvco = (HSE_VALUE / pllm);
 80023a6:	4a22      	ldr	r2, [pc, #136]	; (8002430 <SystemCoreClockUpdate+0x154>)
 80023a8:	68bb      	ldr	r3, [r7, #8]
 80023aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80023ae:	613b      	str	r3, [r7, #16]
          break;
 80023b0:	e005      	b.n	80023be <SystemCoreClockUpdate+0xe2>

        default:    /* MSI used as PLL clock source */
          pllvco = (msirange / pllm);
 80023b2:	697a      	ldr	r2, [r7, #20]
 80023b4:	68bb      	ldr	r3, [r7, #8]
 80023b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80023ba:	613b      	str	r3, [r7, #16]
          break;
 80023bc:	bf00      	nop
      }
      pllvco = pllvco * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 8U);
 80023be:	4b18      	ldr	r3, [pc, #96]	; (8002420 <SystemCoreClockUpdate+0x144>)
 80023c0:	68db      	ldr	r3, [r3, #12]
 80023c2:	0a1b      	lsrs	r3, r3, #8
 80023c4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80023c8:	693b      	ldr	r3, [r7, #16]
 80023ca:	fb02 f303 	mul.w	r3, r2, r3
 80023ce:	613b      	str	r3, [r7, #16]
      pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 25U) + 1U) * 2U;
 80023d0:	4b13      	ldr	r3, [pc, #76]	; (8002420 <SystemCoreClockUpdate+0x144>)
 80023d2:	68db      	ldr	r3, [r3, #12]
 80023d4:	0e5b      	lsrs	r3, r3, #25
 80023d6:	f003 0303 	and.w	r3, r3, #3
 80023da:	3301      	adds	r3, #1
 80023dc:	005b      	lsls	r3, r3, #1
 80023de:	607b      	str	r3, [r7, #4]
      SystemCoreClock = pllvco/pllr;
 80023e0:	693a      	ldr	r2, [r7, #16]
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80023e8:	4a0f      	ldr	r2, [pc, #60]	; (8002428 <SystemCoreClockUpdate+0x14c>)
 80023ea:	6013      	str	r3, [r2, #0]
      break;
 80023ec:	e003      	b.n	80023f6 <SystemCoreClockUpdate+0x11a>

    default:
      SystemCoreClock = msirange;
 80023ee:	4a0e      	ldr	r2, [pc, #56]	; (8002428 <SystemCoreClockUpdate+0x14c>)
 80023f0:	697b      	ldr	r3, [r7, #20]
 80023f2:	6013      	str	r3, [r2, #0]
      break;
 80023f4:	bf00      	nop
  }
  /* Compute HCLK clock frequency --------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4U)];
 80023f6:	4b0a      	ldr	r3, [pc, #40]	; (8002420 <SystemCoreClockUpdate+0x144>)
 80023f8:	689b      	ldr	r3, [r3, #8]
 80023fa:	091b      	lsrs	r3, r3, #4
 80023fc:	f003 030f 	and.w	r3, r3, #15
 8002400:	4a0c      	ldr	r2, [pc, #48]	; (8002434 <SystemCoreClockUpdate+0x158>)
 8002402:	5cd3      	ldrb	r3, [r2, r3]
 8002404:	603b      	str	r3, [r7, #0]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;
 8002406:	4b08      	ldr	r3, [pc, #32]	; (8002428 <SystemCoreClockUpdate+0x14c>)
 8002408:	681a      	ldr	r2, [r3, #0]
 800240a:	683b      	ldr	r3, [r7, #0]
 800240c:	fa22 f303 	lsr.w	r3, r2, r3
 8002410:	4a05      	ldr	r2, [pc, #20]	; (8002428 <SystemCoreClockUpdate+0x14c>)
 8002412:	6013      	str	r3, [r2, #0]
}
 8002414:	bf00      	nop
 8002416:	371c      	adds	r7, #28
 8002418:	46bd      	mov	sp, r7
 800241a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241e:	4770      	bx	lr
 8002420:	40021000 	.word	0x40021000
 8002424:	0800e468 	.word	0x0800e468
 8002428:	20000004 	.word	0x20000004
 800242c:	00f42400 	.word	0x00f42400
 8002430:	007a1200 	.word	0x007a1200
 8002434:	0800e450 	.word	0x0800e450

08002438 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 8002438:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002470 <LoopForever+0x2>

/* Call the clock system initialization function.*/
  bl  SystemInit
 800243c:	f7ff ff3c 	bl	80022b8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8002440:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8002442:	e003      	b.n	800244c <LoopCopyDataInit>

08002444 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8002444:	4b0b      	ldr	r3, [pc, #44]	; (8002474 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8002446:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8002448:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800244a:	3104      	adds	r1, #4

0800244c <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 800244c:	480a      	ldr	r0, [pc, #40]	; (8002478 <LoopForever+0xa>)
	ldr	r3, =_edata
 800244e:	4b0b      	ldr	r3, [pc, #44]	; (800247c <LoopForever+0xe>)
	adds	r2, r0, r1
 8002450:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8002452:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8002454:	d3f6      	bcc.n	8002444 <CopyDataInit>
	ldr	r2, =_sbss
 8002456:	4a0a      	ldr	r2, [pc, #40]	; (8002480 <LoopForever+0x12>)
	b	LoopFillZerobss
 8002458:	e002      	b.n	8002460 <LoopFillZerobss>

0800245a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800245a:	2300      	movs	r3, #0
	str	r3, [r2], #4
 800245c:	f842 3b04 	str.w	r3, [r2], #4

08002460 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8002460:	4b08      	ldr	r3, [pc, #32]	; (8002484 <LoopForever+0x16>)
	cmp	r2, r3
 8002462:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8002464:	d3f9      	bcc.n	800245a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8002466:	f00b f995 	bl	800d794 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800246a:	f7fe f977 	bl	800075c <main>

0800246e <LoopForever>:

LoopForever:
    b LoopForever
 800246e:	e7fe      	b.n	800246e <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 8002470:	20030000 	.word	0x20030000
	ldr	r3, =_sidata
 8002474:	0800e600 	.word	0x0800e600
	ldr	r0, =_sdata
 8002478:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 800247c:	20000064 	.word	0x20000064
	ldr	r2, =_sbss
 8002480:	20000064 	.word	0x20000064
	ldr	r3, = _ebss
 8002484:	2000380c 	.word	0x2000380c

08002488 <COMP_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002488:	e7fe      	b.n	8002488 <COMP_IRQHandler>

0800248a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800248a:	b580      	push	{r7, lr}
 800248c:	b082      	sub	sp, #8
 800248e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002490:	2300      	movs	r3, #0
 8002492:	71fb      	strb	r3, [r7, #7]

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 8002494:	2004      	movs	r0, #4
 8002496:	f001 fe36 	bl	8004106 <HAL_NVIC_SetPriorityGrouping>

  /* Insure time base clock coherency */
  SystemCoreClockUpdate();
 800249a:	f7ff ff1f 	bl	80022dc <SystemCoreClockUpdate>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800249e:	2007      	movs	r0, #7
 80024a0:	f7ff fe2c 	bl	80020fc <HAL_InitTick>
 80024a4:	4603      	mov	r3, r0
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d002      	beq.n	80024b0 <HAL_Init+0x26>
  {
    status = HAL_ERROR;
 80024aa:	2301      	movs	r3, #1
 80024ac:	71fb      	strb	r3, [r7, #7]
 80024ae:	e001      	b.n	80024b4 <HAL_Init+0x2a>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80024b0:	f7ff f912 	bl	80016d8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80024b4:	79fb      	ldrb	r3, [r7, #7]
}
 80024b6:	4618      	mov	r0, r3
 80024b8:	3708      	adds	r7, #8
 80024ba:	46bd      	mov	sp, r7
 80024bc:	bd80      	pop	{r7, pc}
	...

080024c0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80024c0:	b480      	push	{r7}
 80024c2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80024c4:	4b06      	ldr	r3, [pc, #24]	; (80024e0 <HAL_IncTick+0x20>)
 80024c6:	781b      	ldrb	r3, [r3, #0]
 80024c8:	461a      	mov	r2, r3
 80024ca:	4b06      	ldr	r3, [pc, #24]	; (80024e4 <HAL_IncTick+0x24>)
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	4413      	add	r3, r2
 80024d0:	4a04      	ldr	r2, [pc, #16]	; (80024e4 <HAL_IncTick+0x24>)
 80024d2:	6013      	str	r3, [r2, #0]
}
 80024d4:	bf00      	nop
 80024d6:	46bd      	mov	sp, r7
 80024d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024dc:	4770      	bx	lr
 80024de:	bf00      	nop
 80024e0:	2000000c 	.word	0x2000000c
 80024e4:	20000978 	.word	0x20000978

080024e8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80024e8:	b480      	push	{r7}
 80024ea:	af00      	add	r7, sp, #0
  return uwTick;
 80024ec:	4b03      	ldr	r3, [pc, #12]	; (80024fc <HAL_GetTick+0x14>)
 80024ee:	681b      	ldr	r3, [r3, #0]
}
 80024f0:	4618      	mov	r0, r3
 80024f2:	46bd      	mov	sp, r7
 80024f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f8:	4770      	bx	lr
 80024fa:	bf00      	nop
 80024fc:	20000978 	.word	0x20000978

08002500 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002500:	b480      	push	{r7}
 8002502:	b083      	sub	sp, #12
 8002504:	af00      	add	r7, sp, #0
 8002506:	6078      	str	r0, [r7, #4]
 8002508:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	689b      	ldr	r3, [r3, #8]
 800250e:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8002512:	683b      	ldr	r3, [r7, #0]
 8002514:	431a      	orrs	r2, r3
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	609a      	str	r2, [r3, #8]
}
 800251a:	bf00      	nop
 800251c:	370c      	adds	r7, #12
 800251e:	46bd      	mov	sp, r7
 8002520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002524:	4770      	bx	lr

08002526 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002526:	b480      	push	{r7}
 8002528:	b083      	sub	sp, #12
 800252a:	af00      	add	r7, sp, #0
 800252c:	6078      	str	r0, [r7, #4]
 800252e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	689b      	ldr	r3, [r3, #8]
 8002534:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8002538:	683b      	ldr	r3, [r7, #0]
 800253a:	431a      	orrs	r2, r3
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	609a      	str	r2, [r3, #8]
}
 8002540:	bf00      	nop
 8002542:	370c      	adds	r7, #12
 8002544:	46bd      	mov	sp, r7
 8002546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254a:	4770      	bx	lr

0800254c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 800254c:	b480      	push	{r7}
 800254e:	b083      	sub	sp, #12
 8002550:	af00      	add	r7, sp, #0
 8002552:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	689b      	ldr	r3, [r3, #8]
 8002558:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 800255c:	4618      	mov	r0, r3
 800255e:	370c      	adds	r7, #12
 8002560:	46bd      	mov	sp, r7
 8002562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002566:	4770      	bx	lr

08002568 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002568:	b480      	push	{r7}
 800256a:	b087      	sub	sp, #28
 800256c:	af00      	add	r7, sp, #0
 800256e:	60f8      	str	r0, [r7, #12]
 8002570:	60b9      	str	r1, [r7, #8]
 8002572:	607a      	str	r2, [r7, #4]
 8002574:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	3360      	adds	r3, #96	; 0x60
 800257a:	461a      	mov	r2, r3
 800257c:	68bb      	ldr	r3, [r7, #8]
 800257e:	009b      	lsls	r3, r3, #2
 8002580:	4413      	add	r3, r2
 8002582:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002584:	697b      	ldr	r3, [r7, #20]
 8002586:	681a      	ldr	r2, [r3, #0]
 8002588:	4b08      	ldr	r3, [pc, #32]	; (80025ac <LL_ADC_SetOffset+0x44>)
 800258a:	4013      	ands	r3, r2
 800258c:	687a      	ldr	r2, [r7, #4]
 800258e:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8002592:	683a      	ldr	r2, [r7, #0]
 8002594:	430a      	orrs	r2, r1
 8002596:	4313      	orrs	r3, r2
 8002598:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800259c:	697b      	ldr	r3, [r7, #20]
 800259e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80025a0:	bf00      	nop
 80025a2:	371c      	adds	r7, #28
 80025a4:	46bd      	mov	sp, r7
 80025a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025aa:	4770      	bx	lr
 80025ac:	03fff000 	.word	0x03fff000

080025b0 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80025b0:	b480      	push	{r7}
 80025b2:	b085      	sub	sp, #20
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	6078      	str	r0, [r7, #4]
 80025b8:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	3360      	adds	r3, #96	; 0x60
 80025be:	461a      	mov	r2, r3
 80025c0:	683b      	ldr	r3, [r7, #0]
 80025c2:	009b      	lsls	r3, r3, #2
 80025c4:	4413      	add	r3, r2
 80025c6:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 80025d0:	4618      	mov	r0, r3
 80025d2:	3714      	adds	r7, #20
 80025d4:	46bd      	mov	sp, r7
 80025d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025da:	4770      	bx	lr

080025dc <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80025dc:	b480      	push	{r7}
 80025de:	b087      	sub	sp, #28
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	60f8      	str	r0, [r7, #12]
 80025e4:	60b9      	str	r1, [r7, #8]
 80025e6:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	3360      	adds	r3, #96	; 0x60
 80025ec:	461a      	mov	r2, r3
 80025ee:	68bb      	ldr	r3, [r7, #8]
 80025f0:	009b      	lsls	r3, r3, #2
 80025f2:	4413      	add	r3, r2
 80025f4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80025f6:	697b      	ldr	r3, [r7, #20]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	431a      	orrs	r2, r3
 8002602:	697b      	ldr	r3, [r7, #20]
 8002604:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8002606:	bf00      	nop
 8002608:	371c      	adds	r7, #28
 800260a:	46bd      	mov	sp, r7
 800260c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002610:	4770      	bx	lr

08002612 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8002612:	b480      	push	{r7}
 8002614:	b083      	sub	sp, #12
 8002616:	af00      	add	r7, sp, #0
 8002618:	6078      	str	r0, [r7, #4]
 800261a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	695b      	ldr	r3, [r3, #20]
 8002620:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002624:	683b      	ldr	r3, [r7, #0]
 8002626:	431a      	orrs	r2, r3
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	615a      	str	r2, [r3, #20]
}
 800262c:	bf00      	nop
 800262e:	370c      	adds	r7, #12
 8002630:	46bd      	mov	sp, r7
 8002632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002636:	4770      	bx	lr

08002638 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8002638:	b480      	push	{r7}
 800263a:	b083      	sub	sp, #12
 800263c:	af00      	add	r7, sp, #0
 800263e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	68db      	ldr	r3, [r3, #12]
 8002644:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002648:	2b00      	cmp	r3, #0
 800264a:	d101      	bne.n	8002650 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800264c:	2301      	movs	r3, #1
 800264e:	e000      	b.n	8002652 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002650:	2300      	movs	r3, #0
}
 8002652:	4618      	mov	r0, r3
 8002654:	370c      	adds	r7, #12
 8002656:	46bd      	mov	sp, r7
 8002658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800265c:	4770      	bx	lr

0800265e <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L5, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800265e:	b480      	push	{r7}
 8002660:	b087      	sub	sp, #28
 8002662:	af00      	add	r7, sp, #0
 8002664:	60f8      	str	r0, [r7, #12]
 8002666:	60b9      	str	r1, [r7, #8]
 8002668:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	3330      	adds	r3, #48	; 0x30
 800266e:	461a      	mov	r2, r3
 8002670:	68bb      	ldr	r3, [r7, #8]
 8002672:	0a1b      	lsrs	r3, r3, #8
 8002674:	009b      	lsls	r3, r3, #2
 8002676:	f003 030c 	and.w	r3, r3, #12
 800267a:	4413      	add	r3, r2
 800267c:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800267e:	697b      	ldr	r3, [r7, #20]
 8002680:	681a      	ldr	r2, [r3, #0]
 8002682:	68bb      	ldr	r3, [r7, #8]
 8002684:	f003 031f 	and.w	r3, r3, #31
 8002688:	211f      	movs	r1, #31
 800268a:	fa01 f303 	lsl.w	r3, r1, r3
 800268e:	43db      	mvns	r3, r3
 8002690:	401a      	ands	r2, r3
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	0e9b      	lsrs	r3, r3, #26
 8002696:	f003 011f 	and.w	r1, r3, #31
 800269a:	68bb      	ldr	r3, [r7, #8]
 800269c:	f003 031f 	and.w	r3, r3, #31
 80026a0:	fa01 f303 	lsl.w	r3, r1, r3
 80026a4:	431a      	orrs	r2, r3
 80026a6:	697b      	ldr	r3, [r7, #20]
 80026a8:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80026aa:	bf00      	nop
 80026ac:	371c      	adds	r7, #28
 80026ae:	46bd      	mov	sp, r7
 80026b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b4:	4770      	bx	lr

080026b6 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 80026b6:	b480      	push	{r7}
 80026b8:	b083      	sub	sp, #12
 80026ba:	af00      	add	r7, sp, #0
 80026bc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026c2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d101      	bne.n	80026ce <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 80026ca:	2301      	movs	r3, #1
 80026cc:	e000      	b.n	80026d0 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 80026ce:	2300      	movs	r3, #0
}
 80026d0:	4618      	mov	r0, r3
 80026d2:	370c      	adds	r7, #12
 80026d4:	46bd      	mov	sp, r7
 80026d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026da:	4770      	bx	lr

080026dc <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80026dc:	b480      	push	{r7}
 80026de:	b087      	sub	sp, #28
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	60f8      	str	r0, [r7, #12]
 80026e4:	60b9      	str	r1, [r7, #8]
 80026e6:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	3314      	adds	r3, #20
 80026ec:	461a      	mov	r2, r3
 80026ee:	68bb      	ldr	r3, [r7, #8]
 80026f0:	0e5b      	lsrs	r3, r3, #25
 80026f2:	009b      	lsls	r3, r3, #2
 80026f4:	f003 0304 	and.w	r3, r3, #4
 80026f8:	4413      	add	r3, r2
 80026fa:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80026fc:	697b      	ldr	r3, [r7, #20]
 80026fe:	681a      	ldr	r2, [r3, #0]
 8002700:	68bb      	ldr	r3, [r7, #8]
 8002702:	0d1b      	lsrs	r3, r3, #20
 8002704:	f003 031f 	and.w	r3, r3, #31
 8002708:	2107      	movs	r1, #7
 800270a:	fa01 f303 	lsl.w	r3, r1, r3
 800270e:	43db      	mvns	r3, r3
 8002710:	401a      	ands	r2, r3
 8002712:	68bb      	ldr	r3, [r7, #8]
 8002714:	0d1b      	lsrs	r3, r3, #20
 8002716:	f003 031f 	and.w	r3, r3, #31
 800271a:	6879      	ldr	r1, [r7, #4]
 800271c:	fa01 f303 	lsl.w	r3, r1, r3
 8002720:	431a      	orrs	r2, r3
 8002722:	697b      	ldr	r3, [r7, #20]
 8002724:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002726:	bf00      	nop
 8002728:	371c      	adds	r7, #28
 800272a:	46bd      	mov	sp, r7
 800272c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002730:	4770      	bx	lr
	...

08002734 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002734:	b480      	push	{r7}
 8002736:	b085      	sub	sp, #20
 8002738:	af00      	add	r7, sp, #0
 800273a:	60f8      	str	r0, [r7, #12]
 800273c:	60b9      	str	r1, [r7, #8]
 800273e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8002746:	68bb      	ldr	r3, [r7, #8]
 8002748:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800274c:	43db      	mvns	r3, r3
 800274e:	401a      	ands	r2, r3
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	f003 0318 	and.w	r3, r3, #24
 8002756:	4908      	ldr	r1, [pc, #32]	; (8002778 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002758:	40d9      	lsrs	r1, r3
 800275a:	68bb      	ldr	r3, [r7, #8]
 800275c:	400b      	ands	r3, r1
 800275e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002762:	431a      	orrs	r2, r3
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800276a:	bf00      	nop
 800276c:	3714      	adds	r7, #20
 800276e:	46bd      	mov	sp, r7
 8002770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002774:	4770      	bx	lr
 8002776:	bf00      	nop
 8002778:	0007ffff 	.word	0x0007ffff

0800277c <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 800277c:	b480      	push	{r7}
 800277e:	b083      	sub	sp, #12
 8002780:	af00      	add	r7, sp, #0
 8002782:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	689b      	ldr	r3, [r3, #8]
 8002788:	f003 031f 	and.w	r3, r3, #31
}
 800278c:	4618      	mov	r0, r3
 800278e:	370c      	adds	r7, #12
 8002790:	46bd      	mov	sp, r7
 8002792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002796:	4770      	bx	lr

08002798 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002798:	b480      	push	{r7}
 800279a:	b083      	sub	sp, #12
 800279c:	af00      	add	r7, sp, #0
 800279e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	689b      	ldr	r3, [r3, #8]
 80027a4:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 80027a8:	4618      	mov	r0, r3
 80027aa:	370c      	adds	r7, #12
 80027ac:	46bd      	mov	sp, r7
 80027ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b2:	4770      	bx	lr

080027b4 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80027b4:	b480      	push	{r7}
 80027b6:	b083      	sub	sp, #12
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	689b      	ldr	r3, [r3, #8]
 80027c0:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80027c4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80027c8:	687a      	ldr	r2, [r7, #4]
 80027ca:	6093      	str	r3, [r2, #8]
}
 80027cc:	bf00      	nop
 80027ce:	370c      	adds	r7, #12
 80027d0:	46bd      	mov	sp, r7
 80027d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d6:	4770      	bx	lr

080027d8 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 80027d8:	b480      	push	{r7}
 80027da:	b083      	sub	sp, #12
 80027dc:	af00      	add	r7, sp, #0
 80027de:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	689b      	ldr	r3, [r3, #8]
 80027e4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80027e8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80027ec:	d101      	bne.n	80027f2 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80027ee:	2301      	movs	r3, #1
 80027f0:	e000      	b.n	80027f4 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80027f2:	2300      	movs	r3, #0
}
 80027f4:	4618      	mov	r0, r3
 80027f6:	370c      	adds	r7, #12
 80027f8:	46bd      	mov	sp, r7
 80027fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027fe:	4770      	bx	lr

08002800 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002800:	b480      	push	{r7}
 8002802:	b083      	sub	sp, #12
 8002804:	af00      	add	r7, sp, #0
 8002806:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	689b      	ldr	r3, [r3, #8]
 800280c:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8002810:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002814:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800281c:	bf00      	nop
 800281e:	370c      	adds	r7, #12
 8002820:	46bd      	mov	sp, r7
 8002822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002826:	4770      	bx	lr

08002828 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8002828:	b480      	push	{r7}
 800282a:	b083      	sub	sp, #12
 800282c:	af00      	add	r7, sp, #0
 800282e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	689b      	ldr	r3, [r3, #8]
 8002834:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002838:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800283c:	d101      	bne.n	8002842 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800283e:	2301      	movs	r3, #1
 8002840:	e000      	b.n	8002844 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002842:	2300      	movs	r3, #0
}
 8002844:	4618      	mov	r0, r3
 8002846:	370c      	adds	r7, #12
 8002848:	46bd      	mov	sp, r7
 800284a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800284e:	4770      	bx	lr

08002850 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002850:	b480      	push	{r7}
 8002852:	b083      	sub	sp, #12
 8002854:	af00      	add	r7, sp, #0
 8002856:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	689b      	ldr	r3, [r3, #8]
 800285c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002860:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002864:	f043 0201 	orr.w	r2, r3, #1
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 800286c:	bf00      	nop
 800286e:	370c      	adds	r7, #12
 8002870:	46bd      	mov	sp, r7
 8002872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002876:	4770      	bx	lr

08002878 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8002878:	b480      	push	{r7}
 800287a:	b083      	sub	sp, #12
 800287c:	af00      	add	r7, sp, #0
 800287e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	689b      	ldr	r3, [r3, #8]
 8002884:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002888:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800288c:	f043 0202 	orr.w	r2, r3, #2
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8002894:	bf00      	nop
 8002896:	370c      	adds	r7, #12
 8002898:	46bd      	mov	sp, r7
 800289a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800289e:	4770      	bx	lr

080028a0 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80028a0:	b480      	push	{r7}
 80028a2:	b083      	sub	sp, #12
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	689b      	ldr	r3, [r3, #8]
 80028ac:	f003 0301 	and.w	r3, r3, #1
 80028b0:	2b01      	cmp	r3, #1
 80028b2:	d101      	bne.n	80028b8 <LL_ADC_IsEnabled+0x18>
 80028b4:	2301      	movs	r3, #1
 80028b6:	e000      	b.n	80028ba <LL_ADC_IsEnabled+0x1a>
 80028b8:	2300      	movs	r3, #0
}
 80028ba:	4618      	mov	r0, r3
 80028bc:	370c      	adds	r7, #12
 80028be:	46bd      	mov	sp, r7
 80028c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c4:	4770      	bx	lr

080028c6 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 80028c6:	b480      	push	{r7}
 80028c8:	b083      	sub	sp, #12
 80028ca:	af00      	add	r7, sp, #0
 80028cc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	689b      	ldr	r3, [r3, #8]
 80028d2:	f003 0302 	and.w	r3, r3, #2
 80028d6:	2b02      	cmp	r3, #2
 80028d8:	d101      	bne.n	80028de <LL_ADC_IsDisableOngoing+0x18>
 80028da:	2301      	movs	r3, #1
 80028dc:	e000      	b.n	80028e0 <LL_ADC_IsDisableOngoing+0x1a>
 80028de:	2300      	movs	r3, #0
}
 80028e0:	4618      	mov	r0, r3
 80028e2:	370c      	adds	r7, #12
 80028e4:	46bd      	mov	sp, r7
 80028e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ea:	4770      	bx	lr

080028ec <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80028ec:	b480      	push	{r7}
 80028ee:	b083      	sub	sp, #12
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	689b      	ldr	r3, [r3, #8]
 80028f8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80028fc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002900:	f043 0204 	orr.w	r2, r3, #4
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002908:	bf00      	nop
 800290a:	370c      	adds	r7, #12
 800290c:	46bd      	mov	sp, r7
 800290e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002912:	4770      	bx	lr

08002914 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002914:	b480      	push	{r7}
 8002916:	b083      	sub	sp, #12
 8002918:	af00      	add	r7, sp, #0
 800291a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	689b      	ldr	r3, [r3, #8]
 8002920:	f003 0304 	and.w	r3, r3, #4
 8002924:	2b04      	cmp	r3, #4
 8002926:	d101      	bne.n	800292c <LL_ADC_REG_IsConversionOngoing+0x18>
 8002928:	2301      	movs	r3, #1
 800292a:	e000      	b.n	800292e <LL_ADC_REG_IsConversionOngoing+0x1a>
 800292c:	2300      	movs	r3, #0
}
 800292e:	4618      	mov	r0, r3
 8002930:	370c      	adds	r7, #12
 8002932:	46bd      	mov	sp, r7
 8002934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002938:	4770      	bx	lr

0800293a <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800293a:	b480      	push	{r7}
 800293c:	b083      	sub	sp, #12
 800293e:	af00      	add	r7, sp, #0
 8002940:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	689b      	ldr	r3, [r3, #8]
 8002946:	f003 0308 	and.w	r3, r3, #8
 800294a:	2b08      	cmp	r3, #8
 800294c:	d101      	bne.n	8002952 <LL_ADC_INJ_IsConversionOngoing+0x18>
 800294e:	2301      	movs	r3, #1
 8002950:	e000      	b.n	8002954 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002952:	2300      	movs	r3, #0
}
 8002954:	4618      	mov	r0, r3
 8002956:	370c      	adds	r7, #12
 8002958:	46bd      	mov	sp, r7
 800295a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800295e:	4770      	bx	lr

08002960 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002960:	b590      	push	{r4, r7, lr}
 8002962:	b089      	sub	sp, #36	; 0x24
 8002964:	af00      	add	r7, sp, #0
 8002966:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002968:	2300      	movs	r3, #0
 800296a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 800296c:	2300      	movs	r3, #0
 800296e:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	2b00      	cmp	r3, #0
 8002974:	d101      	bne.n	800297a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002976:	2301      	movs	r3, #1
 8002978:	e12e      	b.n	8002bd8 <HAL_ADC_Init+0x278>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	691b      	ldr	r3, [r3, #16]
 800297e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002984:	2b00      	cmp	r3, #0
 8002986:	d109      	bne.n	800299c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002988:	6878      	ldr	r0, [r7, #4]
 800298a:	f7fe fecd 	bl	8001728 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	2200      	movs	r2, #0
 8002992:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	2200      	movs	r2, #0
 8002998:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	4618      	mov	r0, r3
 80029a2:	f7ff ff19 	bl	80027d8 <LL_ADC_IsDeepPowerDownEnabled>
 80029a6:	4603      	mov	r3, r0
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d004      	beq.n	80029b6 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	4618      	mov	r0, r3
 80029b2:	f7ff feff 	bl	80027b4 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	4618      	mov	r0, r3
 80029bc:	f7ff ff34 	bl	8002828 <LL_ADC_IsInternalRegulatorEnabled>
 80029c0:	4603      	mov	r3, r0
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d115      	bne.n	80029f2 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	4618      	mov	r0, r3
 80029cc:	f7ff ff18 	bl	8002800 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80029d0:	4b83      	ldr	r3, [pc, #524]	; (8002be0 <HAL_ADC_Init+0x280>)
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	099b      	lsrs	r3, r3, #6
 80029d6:	4a83      	ldr	r2, [pc, #524]	; (8002be4 <HAL_ADC_Init+0x284>)
 80029d8:	fba2 2303 	umull	r2, r3, r2, r3
 80029dc:	099b      	lsrs	r3, r3, #6
 80029de:	3301      	adds	r3, #1
 80029e0:	005b      	lsls	r3, r3, #1
 80029e2:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80029e4:	e002      	b.n	80029ec <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	3b01      	subs	r3, #1
 80029ea:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d1f9      	bne.n	80029e6 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	4618      	mov	r0, r3
 80029f8:	f7ff ff16 	bl	8002828 <LL_ADC_IsInternalRegulatorEnabled>
 80029fc:	4603      	mov	r3, r0
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d10d      	bne.n	8002a1e <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a06:	f043 0210 	orr.w	r2, r3, #16
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a12:	f043 0201 	orr.w	r2, r3, #1
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002a1a:	2301      	movs	r3, #1
 8002a1c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	4618      	mov	r0, r3
 8002a24:	f7ff ff76 	bl	8002914 <LL_ADC_REG_IsConversionOngoing>
 8002a28:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a2e:	f003 0310 	and.w	r3, r3, #16
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	f040 80c7 	bne.w	8002bc6 <HAL_ADC_Init+0x266>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8002a38:	697b      	ldr	r3, [r7, #20]
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	f040 80c3 	bne.w	8002bc6 <HAL_ADC_Init+0x266>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a44:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002a48:	f043 0202 	orr.w	r2, r3, #2
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	659a      	str	r2, [r3, #88]	; 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	4618      	mov	r0, r3
 8002a56:	f7ff ff23 	bl	80028a0 <LL_ADC_IsEnabled>
 8002a5a:	4603      	mov	r3, r0
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d110      	bne.n	8002a82 <HAL_ADC_Init+0x122>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002a60:	4861      	ldr	r0, [pc, #388]	; (8002be8 <HAL_ADC_Init+0x288>)
 8002a62:	f7ff ff1d 	bl	80028a0 <LL_ADC_IsEnabled>
 8002a66:	4604      	mov	r4, r0
 8002a68:	4860      	ldr	r0, [pc, #384]	; (8002bec <HAL_ADC_Init+0x28c>)
 8002a6a:	f7ff ff19 	bl	80028a0 <LL_ADC_IsEnabled>
 8002a6e:	4603      	mov	r3, r0
 8002a70:	4323      	orrs	r3, r4
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d105      	bne.n	8002a82 <HAL_ADC_Init+0x122>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	685b      	ldr	r3, [r3, #4]
 8002a7a:	4619      	mov	r1, r3
 8002a7c:	485c      	ldr	r0, [pc, #368]	; (8002bf0 <HAL_ADC_Init+0x290>)
 8002a7e:	f7ff fd3f 	bl	8002500 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	7e5b      	ldrb	r3, [r3, #25]
 8002a86:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002a8c:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8002a92:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8002a98:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002aa0:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002aa2:	4313      	orrs	r3, r2
 8002aa4:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002aac:	2b01      	cmp	r3, #1
 8002aae:	d106      	bne.n	8002abe <HAL_ADC_Init+0x15e>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ab4:	3b01      	subs	r3, #1
 8002ab6:	045b      	lsls	r3, r3, #17
 8002ab8:	69ba      	ldr	r2, [r7, #24]
 8002aba:	4313      	orrs	r3, r2
 8002abc:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d009      	beq.n	8002ada <HAL_ADC_Init+0x17a>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002aca:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ad2:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002ad4:	69ba      	ldr	r2, [r7, #24]
 8002ad6:	4313      	orrs	r3, r2
 8002ad8:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	68da      	ldr	r2, [r3, #12]
 8002ae0:	4b44      	ldr	r3, [pc, #272]	; (8002bf4 <HAL_ADC_Init+0x294>)
 8002ae2:	4013      	ands	r3, r2
 8002ae4:	687a      	ldr	r2, [r7, #4]
 8002ae6:	6812      	ldr	r2, [r2, #0]
 8002ae8:	69b9      	ldr	r1, [r7, #24]
 8002aea:	430b      	orrs	r3, r1
 8002aec:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	4618      	mov	r0, r3
 8002af4:	f7ff ff21 	bl	800293a <LL_ADC_INJ_IsConversionOngoing>
 8002af8:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002afa:	697b      	ldr	r3, [r7, #20]
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d140      	bne.n	8002b82 <HAL_ADC_Init+0x222>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002b00:	693b      	ldr	r3, [r7, #16]
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d13d      	bne.n	8002b82 <HAL_ADC_Init+0x222>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	6cda      	ldr	r2, [r3, #76]	; 0x4c
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	7e1b      	ldrb	r3, [r3, #24]
 8002b0e:	039b      	lsls	r3, r3, #14
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002b10:	431a      	orrs	r2, r3
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002b18:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002b1a:	4313      	orrs	r3, r2
 8002b1c:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	68db      	ldr	r3, [r3, #12]
 8002b24:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002b28:	f023 0306 	bic.w	r3, r3, #6
 8002b2c:	687a      	ldr	r2, [r7, #4]
 8002b2e:	6812      	ldr	r2, [r2, #0]
 8002b30:	69b9      	ldr	r1, [r7, #24]
 8002b32:	430b      	orrs	r3, r1
 8002b34:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002b3c:	2b01      	cmp	r3, #1
 8002b3e:	d118      	bne.n	8002b72 <HAL_ADC_Init+0x212>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	691b      	ldr	r3, [r3, #16]
 8002b46:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8002b4a:	f023 0304 	bic.w	r3, r3, #4
 8002b4e:	687a      	ldr	r2, [r7, #4]
 8002b50:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8002b52:	687a      	ldr	r2, [r7, #4]
 8002b54:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002b56:	4311      	orrs	r1, r2
 8002b58:	687a      	ldr	r2, [r7, #4]
 8002b5a:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002b5c:	4311      	orrs	r1, r2
 8002b5e:	687a      	ldr	r2, [r7, #4]
 8002b60:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002b62:	430a      	orrs	r2, r1
 8002b64:	431a      	orrs	r2, r3
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f042 0201 	orr.w	r2, r2, #1
 8002b6e:	611a      	str	r2, [r3, #16]
 8002b70:	e007      	b.n	8002b82 <HAL_ADC_Init+0x222>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	691a      	ldr	r2, [r3, #16]
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	f022 0201 	bic.w	r2, r2, #1
 8002b80:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	691b      	ldr	r3, [r3, #16]
 8002b86:	2b01      	cmp	r3, #1
 8002b88:	d10c      	bne.n	8002ba4 <HAL_ADC_Init+0x244>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b90:	f023 010f 	bic.w	r1, r3, #15
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	69db      	ldr	r3, [r3, #28]
 8002b98:	1e5a      	subs	r2, r3, #1
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	430a      	orrs	r2, r1
 8002ba0:	631a      	str	r2, [r3, #48]	; 0x30
 8002ba2:	e007      	b.n	8002bb4 <HAL_ADC_Init+0x254>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f022 020f 	bic.w	r2, r2, #15
 8002bb2:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bb8:	f023 0303 	bic.w	r3, r3, #3
 8002bbc:	f043 0201 	orr.w	r2, r3, #1
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	659a      	str	r2, [r3, #88]	; 0x58
 8002bc4:	e007      	b.n	8002bd6 <HAL_ADC_Init+0x276>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bca:	f043 0210 	orr.w	r2, r3, #16
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002bd2:	2301      	movs	r3, #1
 8002bd4:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002bd6:	7ffb      	ldrb	r3, [r7, #31]
}
 8002bd8:	4618      	mov	r0, r3
 8002bda:	3724      	adds	r7, #36	; 0x24
 8002bdc:	46bd      	mov	sp, r7
 8002bde:	bd90      	pop	{r4, r7, pc}
 8002be0:	20000004 	.word	0x20000004
 8002be4:	053e2d63 	.word	0x053e2d63
 8002be8:	42028000 	.word	0x42028000
 8002bec:	42028100 	.word	0x42028100
 8002bf0:	42028300 	.word	0x42028300
 8002bf4:	fff0c007 	.word	0xfff0c007

08002bf8 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8002bf8:	b580      	push	{r7, lr}
 8002bfa:	b086      	sub	sp, #24
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	60f8      	str	r0, [r7, #12]
 8002c00:	60b9      	str	r1, [r7, #8]
 8002c02:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002c04:	4850      	ldr	r0, [pc, #320]	; (8002d48 <HAL_ADC_Start_DMA+0x150>)
 8002c06:	f7ff fdb9 	bl	800277c <LL_ADC_GetMultimode>
 8002c0a:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	4618      	mov	r0, r3
 8002c12:	f7ff fe7f 	bl	8002914 <LL_ADC_REG_IsConversionOngoing>
 8002c16:	4603      	mov	r3, r0
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	f040 808e 	bne.w	8002d3a <HAL_ADC_Start_DMA+0x142>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8002c24:	2b01      	cmp	r3, #1
 8002c26:	d101      	bne.n	8002c2c <HAL_ADC_Start_DMA+0x34>
 8002c28:	2302      	movs	r3, #2
 8002c2a:	e089      	b.n	8002d40 <HAL_ADC_Start_DMA+0x148>
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	2201      	movs	r2, #1
 8002c30:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002c34:	693b      	ldr	r3, [r7, #16]
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d005      	beq.n	8002c46 <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002c3a:	693b      	ldr	r3, [r7, #16]
 8002c3c:	2b05      	cmp	r3, #5
 8002c3e:	d002      	beq.n	8002c46 <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002c40:	693b      	ldr	r3, [r7, #16]
 8002c42:	2b09      	cmp	r3, #9
 8002c44:	d172      	bne.n	8002d2c <HAL_ADC_Start_DMA+0x134>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8002c46:	68f8      	ldr	r0, [r7, #12]
 8002c48:	f000 feac 	bl	80039a4 <ADC_Enable>
 8002c4c:	4603      	mov	r3, r0
 8002c4e:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8002c50:	7dfb      	ldrb	r3, [r7, #23]
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d165      	bne.n	8002d22 <HAL_ADC_Start_DMA+0x12a>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c5a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002c5e:	f023 0301 	bic.w	r3, r3, #1
 8002c62:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	659a      	str	r2, [r3, #88]	; 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	4a37      	ldr	r2, [pc, #220]	; (8002d4c <HAL_ADC_Start_DMA+0x154>)
 8002c70:	4293      	cmp	r3, r2
 8002c72:	d002      	beq.n	8002c7a <HAL_ADC_Start_DMA+0x82>
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	e000      	b.n	8002c7c <HAL_ADC_Start_DMA+0x84>
 8002c7a:	4b35      	ldr	r3, [pc, #212]	; (8002d50 <HAL_ADC_Start_DMA+0x158>)
 8002c7c:	68fa      	ldr	r2, [r7, #12]
 8002c7e:	6812      	ldr	r2, [r2, #0]
 8002c80:	4293      	cmp	r3, r2
 8002c82:	d002      	beq.n	8002c8a <HAL_ADC_Start_DMA+0x92>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002c84:	693b      	ldr	r3, [r7, #16]
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d105      	bne.n	8002c96 <HAL_ADC_Start_DMA+0x9e>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c8e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	659a      	str	r2, [r3, #88]	; 0x58
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c9a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d006      	beq.n	8002cb0 <HAL_ADC_Start_DMA+0xb8>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ca6:	f023 0206 	bic.w	r2, r3, #6
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	65da      	str	r2, [r3, #92]	; 0x5c
 8002cae:	e002      	b.n	8002cb6 <HAL_ADC_Start_DMA+0xbe>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	2200      	movs	r2, #0
 8002cb4:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002cba:	4a26      	ldr	r2, [pc, #152]	; (8002d54 <HAL_ADC_Start_DMA+0x15c>)
 8002cbc:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002cc2:	4a25      	ldr	r2, [pc, #148]	; (8002d58 <HAL_ADC_Start_DMA+0x160>)
 8002cc4:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002cca:	4a24      	ldr	r2, [pc, #144]	; (8002d5c <HAL_ADC_Start_DMA+0x164>)
 8002ccc:	63da      	str	r2, [r3, #60]	; 0x3c
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	221c      	movs	r2, #28
 8002cd4:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	2200      	movs	r2, #0
 8002cda:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	685a      	ldr	r2, [r3, #4]
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f042 0210 	orr.w	r2, r2, #16
 8002cec:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	68da      	ldr	r2, [r3, #12]
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f042 0201 	orr.w	r2, r2, #1
 8002cfc:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	3340      	adds	r3, #64	; 0x40
 8002d08:	4619      	mov	r1, r3
 8002d0a:	68ba      	ldr	r2, [r7, #8]
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	f001 fad5 	bl	80042bc <HAL_DMA_Start_IT>
 8002d12:	4603      	mov	r3, r0
 8002d14:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	4618      	mov	r0, r3
 8002d1c:	f7ff fde6 	bl	80028ec <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8002d20:	e00d      	b.n	8002d3e <HAL_ADC_Start_DMA+0x146>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	2200      	movs	r2, #0
 8002d26:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
      if (tmp_hal_status == HAL_OK)
 8002d2a:	e008      	b.n	8002d3e <HAL_ADC_Start_DMA+0x146>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8002d2c:	2301      	movs	r3, #1
 8002d2e:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	2200      	movs	r2, #0
 8002d34:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 8002d38:	e001      	b.n	8002d3e <HAL_ADC_Start_DMA+0x146>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002d3a:	2302      	movs	r3, #2
 8002d3c:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8002d3e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002d40:	4618      	mov	r0, r3
 8002d42:	3718      	adds	r7, #24
 8002d44:	46bd      	mov	sp, r7
 8002d46:	bd80      	pop	{r7, pc}
 8002d48:	42028300 	.word	0x42028300
 8002d4c:	42028100 	.word	0x42028100
 8002d50:	42028000 	.word	0x42028000
 8002d54:	08003b6f 	.word	0x08003b6f
 8002d58:	08003c47 	.word	0x08003c47
 8002d5c:	08003c63 	.word	0x08003c63

08002d60 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8002d60:	b580      	push	{r7, lr}
 8002d62:	b08a      	sub	sp, #40	; 0x28
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8002d68:	2300      	movs	r3, #0
 8002d6a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	685b      	ldr	r3, [r3, #4]
 8002d7a:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002d7c:	4882      	ldr	r0, [pc, #520]	; (8002f88 <HAL_ADC_IRQHandler+0x228>)
 8002d7e:	f7ff fcfd 	bl	800277c <LL_ADC_GetMultimode>
 8002d82:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8002d84:	69fb      	ldr	r3, [r7, #28]
 8002d86:	f003 0302 	and.w	r3, r3, #2
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d017      	beq.n	8002dbe <HAL_ADC_IRQHandler+0x5e>
 8002d8e:	69bb      	ldr	r3, [r7, #24]
 8002d90:	f003 0302 	and.w	r3, r3, #2
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d012      	beq.n	8002dbe <HAL_ADC_IRQHandler+0x5e>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d9c:	f003 0310 	and.w	r3, r3, #16
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d105      	bne.n	8002db0 <HAL_ADC_IRQHandler+0x50>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002da8:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	659a      	str	r2, [r3, #88]	; 0x58

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8002db0:	6878      	ldr	r0, [r7, #4]
 8002db2:	f001 f84d 	bl	8003e50 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	2202      	movs	r2, #2
 8002dbc:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8002dbe:	69fb      	ldr	r3, [r7, #28]
 8002dc0:	f003 0304 	and.w	r3, r3, #4
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d004      	beq.n	8002dd2 <HAL_ADC_IRQHandler+0x72>
 8002dc8:	69bb      	ldr	r3, [r7, #24]
 8002dca:	f003 0304 	and.w	r3, r3, #4
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d10a      	bne.n	8002de8 <HAL_ADC_IRQHandler+0x88>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8002dd2:	69fb      	ldr	r3, [r7, #28]
 8002dd4:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	f000 8083 	beq.w	8002ee4 <HAL_ADC_IRQHandler+0x184>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8002dde:	69bb      	ldr	r3, [r7, #24]
 8002de0:	f003 0308 	and.w	r3, r3, #8
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d07d      	beq.n	8002ee4 <HAL_ADC_IRQHandler+0x184>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002dec:	f003 0310 	and.w	r3, r3, #16
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d105      	bne.n	8002e00 <HAL_ADC_IRQHandler+0xa0>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002df8:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	659a      	str	r2, [r3, #88]	; 0x58
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	4618      	mov	r0, r3
 8002e06:	f7ff fc17 	bl	8002638 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002e0a:	4603      	mov	r3, r0
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d062      	beq.n	8002ed6 <HAL_ADC_IRQHandler+0x176>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	4a5d      	ldr	r2, [pc, #372]	; (8002f8c <HAL_ADC_IRQHandler+0x22c>)
 8002e16:	4293      	cmp	r3, r2
 8002e18:	d002      	beq.n	8002e20 <HAL_ADC_IRQHandler+0xc0>
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	e000      	b.n	8002e22 <HAL_ADC_IRQHandler+0xc2>
 8002e20:	4b5b      	ldr	r3, [pc, #364]	; (8002f90 <HAL_ADC_IRQHandler+0x230>)
 8002e22:	687a      	ldr	r2, [r7, #4]
 8002e24:	6812      	ldr	r2, [r2, #0]
 8002e26:	4293      	cmp	r3, r2
 8002e28:	d008      	beq.n	8002e3c <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002e2a:	697b      	ldr	r3, [r7, #20]
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d005      	beq.n	8002e3c <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002e30:	697b      	ldr	r3, [r7, #20]
 8002e32:	2b05      	cmp	r3, #5
 8002e34:	d002      	beq.n	8002e3c <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002e36:	697b      	ldr	r3, [r7, #20]
 8002e38:	2b09      	cmp	r3, #9
 8002e3a:	d104      	bne.n	8002e46 <HAL_ADC_IRQHandler+0xe6>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	68db      	ldr	r3, [r3, #12]
 8002e42:	623b      	str	r3, [r7, #32]
 8002e44:	e00c      	b.n	8002e60 <HAL_ADC_IRQHandler+0x100>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	4a50      	ldr	r2, [pc, #320]	; (8002f8c <HAL_ADC_IRQHandler+0x22c>)
 8002e4c:	4293      	cmp	r3, r2
 8002e4e:	d002      	beq.n	8002e56 <HAL_ADC_IRQHandler+0xf6>
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	e000      	b.n	8002e58 <HAL_ADC_IRQHandler+0xf8>
 8002e56:	4b4e      	ldr	r3, [pc, #312]	; (8002f90 <HAL_ADC_IRQHandler+0x230>)
 8002e58:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8002e5a:	693b      	ldr	r3, [r7, #16]
 8002e5c:	68db      	ldr	r3, [r3, #12]
 8002e5e:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8002e60:	6a3b      	ldr	r3, [r7, #32]
 8002e62:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d135      	bne.n	8002ed6 <HAL_ADC_IRQHandler+0x176>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f003 0308 	and.w	r3, r3, #8
 8002e74:	2b08      	cmp	r3, #8
 8002e76:	d12e      	bne.n	8002ed6 <HAL_ADC_IRQHandler+0x176>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	4618      	mov	r0, r3
 8002e7e:	f7ff fd49 	bl	8002914 <LL_ADC_REG_IsConversionOngoing>
 8002e82:	4603      	mov	r3, r0
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d11a      	bne.n	8002ebe <HAL_ADC_IRQHandler+0x15e>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	685a      	ldr	r2, [r3, #4]
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	f022 020c 	bic.w	r2, r2, #12
 8002e96:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e9c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	659a      	str	r2, [r3, #88]	; 0x58

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ea8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d112      	bne.n	8002ed6 <HAL_ADC_IRQHandler+0x176>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002eb4:	f043 0201 	orr.w	r2, r3, #1
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	659a      	str	r2, [r3, #88]	; 0x58
 8002ebc:	e00b      	b.n	8002ed6 <HAL_ADC_IRQHandler+0x176>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ec2:	f043 0210 	orr.w	r2, r3, #16
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	659a      	str	r2, [r3, #88]	; 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ece:	f043 0201 	orr.w	r2, r3, #1
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	65da      	str	r2, [r3, #92]	; 0x5c
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002ed6:	6878      	ldr	r0, [r7, #4]
 8002ed8:	f7fd fb54 	bl	8000584 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	220c      	movs	r2, #12
 8002ee2:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8002ee4:	69fb      	ldr	r3, [r7, #28]
 8002ee6:	f003 0320 	and.w	r3, r3, #32
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d004      	beq.n	8002ef8 <HAL_ADC_IRQHandler+0x198>
 8002eee:	69bb      	ldr	r3, [r7, #24]
 8002ef0:	f003 0320 	and.w	r3, r3, #32
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d10b      	bne.n	8002f10 <HAL_ADC_IRQHandler+0x1b0>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8002ef8:	69fb      	ldr	r3, [r7, #28]
 8002efa:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	f000 809f 	beq.w	8003042 <HAL_ADC_IRQHandler+0x2e2>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8002f04:	69bb      	ldr	r3, [r7, #24]
 8002f06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	f000 8099 	beq.w	8003042 <HAL_ADC_IRQHandler+0x2e2>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f14:	f003 0310 	and.w	r3, r3, #16
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d105      	bne.n	8002f28 <HAL_ADC_IRQHandler+0x1c8>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f20:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	659a      	str	r2, [r3, #88]	; 0x58
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	4618      	mov	r0, r3
 8002f2e:	f7ff fbc2 	bl	80026b6 <LL_ADC_INJ_IsTriggerSourceSWStart>
 8002f32:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	4618      	mov	r0, r3
 8002f3a:	f7ff fb7d 	bl	8002638 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002f3e:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	4a11      	ldr	r2, [pc, #68]	; (8002f8c <HAL_ADC_IRQHandler+0x22c>)
 8002f46:	4293      	cmp	r3, r2
 8002f48:	d002      	beq.n	8002f50 <HAL_ADC_IRQHandler+0x1f0>
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	e000      	b.n	8002f52 <HAL_ADC_IRQHandler+0x1f2>
 8002f50:	4b0f      	ldr	r3, [pc, #60]	; (8002f90 <HAL_ADC_IRQHandler+0x230>)
 8002f52:	687a      	ldr	r2, [r7, #4]
 8002f54:	6812      	ldr	r2, [r2, #0]
 8002f56:	4293      	cmp	r3, r2
 8002f58:	d008      	beq.n	8002f6c <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002f5a:	697b      	ldr	r3, [r7, #20]
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d005      	beq.n	8002f6c <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8002f60:	697b      	ldr	r3, [r7, #20]
 8002f62:	2b06      	cmp	r3, #6
 8002f64:	d002      	beq.n	8002f6c <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8002f66:	697b      	ldr	r3, [r7, #20]
 8002f68:	2b07      	cmp	r3, #7
 8002f6a:	d104      	bne.n	8002f76 <HAL_ADC_IRQHandler+0x216>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	68db      	ldr	r3, [r3, #12]
 8002f72:	623b      	str	r3, [r7, #32]
 8002f74:	e013      	b.n	8002f9e <HAL_ADC_IRQHandler+0x23e>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	4a04      	ldr	r2, [pc, #16]	; (8002f8c <HAL_ADC_IRQHandler+0x22c>)
 8002f7c:	4293      	cmp	r3, r2
 8002f7e:	d009      	beq.n	8002f94 <HAL_ADC_IRQHandler+0x234>
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	e007      	b.n	8002f96 <HAL_ADC_IRQHandler+0x236>
 8002f86:	bf00      	nop
 8002f88:	42028300 	.word	0x42028300
 8002f8c:	42028100 	.word	0x42028100
 8002f90:	42028000 	.word	0x42028000
 8002f94:	4b7d      	ldr	r3, [pc, #500]	; (800318c <HAL_ADC_IRQHandler+0x42c>)
 8002f96:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8002f98:	693b      	ldr	r3, [r7, #16]
 8002f9a:	68db      	ldr	r3, [r3, #12]
 8002f9c:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d047      	beq.n	8003034 <HAL_ADC_IRQHandler+0x2d4>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8002fa4:	6a3b      	ldr	r3, [r7, #32]
 8002fa6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d007      	beq.n	8002fbe <HAL_ADC_IRQHandler+0x25e>
 8002fae:	68bb      	ldr	r3, [r7, #8]
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d03f      	beq.n	8003034 <HAL_ADC_IRQHandler+0x2d4>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8002fb4:	6a3b      	ldr	r3, [r7, #32]
 8002fb6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d13a      	bne.n	8003034 <HAL_ADC_IRQHandler+0x2d4>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fc8:	2b40      	cmp	r3, #64	; 0x40
 8002fca:	d133      	bne.n	8003034 <HAL_ADC_IRQHandler+0x2d4>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8002fcc:	6a3b      	ldr	r3, [r7, #32]
 8002fce:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d12e      	bne.n	8003034 <HAL_ADC_IRQHandler+0x2d4>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	4618      	mov	r0, r3
 8002fdc:	f7ff fcad 	bl	800293a <LL_ADC_INJ_IsConversionOngoing>
 8002fe0:	4603      	mov	r3, r0
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d11a      	bne.n	800301c <HAL_ADC_IRQHandler+0x2bc>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	685a      	ldr	r2, [r3, #4]
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002ff4:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ffa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	659a      	str	r2, [r3, #88]	; 0x58

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003006:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800300a:	2b00      	cmp	r3, #0
 800300c:	d112      	bne.n	8003034 <HAL_ADC_IRQHandler+0x2d4>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003012:	f043 0201 	orr.w	r2, r3, #1
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	659a      	str	r2, [r3, #88]	; 0x58
 800301a:	e00b      	b.n	8003034 <HAL_ADC_IRQHandler+0x2d4>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003020:	f043 0210 	orr.w	r2, r3, #16
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	659a      	str	r2, [r3, #88]	; 0x58

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800302c:	f043 0201 	orr.w	r2, r3, #1
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	65da      	str	r2, [r3, #92]	; 0x5c
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8003034:	6878      	ldr	r0, [r7, #4]
 8003036:	f000 fee3 	bl	8003e00 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	2260      	movs	r2, #96	; 0x60
 8003040:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8003042:	69fb      	ldr	r3, [r7, #28]
 8003044:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003048:	2b00      	cmp	r3, #0
 800304a:	d011      	beq.n	8003070 <HAL_ADC_IRQHandler+0x310>
 800304c:	69bb      	ldr	r3, [r7, #24]
 800304e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003052:	2b00      	cmp	r3, #0
 8003054:	d00c      	beq.n	8003070 <HAL_ADC_IRQHandler+0x310>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800305a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	659a      	str	r2, [r3, #88]	; 0x58

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8003062:	6878      	ldr	r0, [r7, #4]
 8003064:	f000 f8a0 	bl	80031a8 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	2280      	movs	r2, #128	; 0x80
 800306e:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8003070:	69fb      	ldr	r3, [r7, #28]
 8003072:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003076:	2b00      	cmp	r3, #0
 8003078:	d012      	beq.n	80030a0 <HAL_ADC_IRQHandler+0x340>
 800307a:	69bb      	ldr	r3, [r7, #24]
 800307c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003080:	2b00      	cmp	r3, #0
 8003082:	d00d      	beq.n	80030a0 <HAL_ADC_IRQHandler+0x340>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003088:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	659a      	str	r2, [r3, #88]	; 0x58

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8003090:	6878      	ldr	r0, [r7, #4]
 8003092:	f000 fec9 	bl	8003e28 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800309e:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 80030a0:	69fb      	ldr	r3, [r7, #28]
 80030a2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d012      	beq.n	80030d0 <HAL_ADC_IRQHandler+0x370>
 80030aa:	69bb      	ldr	r3, [r7, #24]
 80030ac:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d00d      	beq.n	80030d0 <HAL_ADC_IRQHandler+0x370>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030b8:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	659a      	str	r2, [r3, #88]	; 0x58

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 80030c0:	6878      	ldr	r0, [r7, #4]
 80030c2:	f000 febb 	bl	8003e3c <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f44f 7200 	mov.w	r2, #512	; 0x200
 80030ce:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 80030d0:	69fb      	ldr	r3, [r7, #28]
 80030d2:	f003 0310 	and.w	r3, r3, #16
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d036      	beq.n	8003148 <HAL_ADC_IRQHandler+0x3e8>
 80030da:	69bb      	ldr	r3, [r7, #24]
 80030dc:	f003 0310 	and.w	r3, r3, #16
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d031      	beq.n	8003148 <HAL_ADC_IRQHandler+0x3e8>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d102      	bne.n	80030f2 <HAL_ADC_IRQHandler+0x392>
    {
      overrun_error = 1UL;
 80030ec:	2301      	movs	r3, #1
 80030ee:	627b      	str	r3, [r7, #36]	; 0x24
 80030f0:	e014      	b.n	800311c <HAL_ADC_IRQHandler+0x3bc>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 80030f2:	697b      	ldr	r3, [r7, #20]
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d008      	beq.n	800310a <HAL_ADC_IRQHandler+0x3aa>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 80030f8:	4825      	ldr	r0, [pc, #148]	; (8003190 <HAL_ADC_IRQHandler+0x430>)
 80030fa:	f7ff fb4d 	bl	8002798 <LL_ADC_GetMultiDMATransfer>
 80030fe:	4603      	mov	r3, r0
 8003100:	2b00      	cmp	r3, #0
 8003102:	d00b      	beq.n	800311c <HAL_ADC_IRQHandler+0x3bc>
        {
          overrun_error = 1UL;
 8003104:	2301      	movs	r3, #1
 8003106:	627b      	str	r3, [r7, #36]	; 0x24
 8003108:	e008      	b.n	800311c <HAL_ADC_IRQHandler+0x3bc>
      }
      else
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	68db      	ldr	r3, [r3, #12]
 8003110:	f003 0301 	and.w	r3, r3, #1
 8003114:	2b00      	cmp	r3, #0
 8003116:	d001      	beq.n	800311c <HAL_ADC_IRQHandler+0x3bc>
        {
          overrun_error = 1UL;
 8003118:	2301      	movs	r3, #1
 800311a:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 800311c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800311e:	2b01      	cmp	r3, #1
 8003120:	d10e      	bne.n	8003140 <HAL_ADC_IRQHandler+0x3e0>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003126:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003132:	f043 0202 	orr.w	r2, r3, #2
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	65da      	str	r2, [r3, #92]	; 0x5c
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 800313a:	6878      	ldr	r0, [r7, #4]
 800313c:	f000 f83e 	bl	80031bc <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	2210      	movs	r2, #16
 8003146:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8003148:	69fb      	ldr	r3, [r7, #28]
 800314a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800314e:	2b00      	cmp	r3, #0
 8003150:	d018      	beq.n	8003184 <HAL_ADC_IRQHandler+0x424>
 8003152:	69bb      	ldr	r3, [r7, #24]
 8003154:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003158:	2b00      	cmp	r3, #0
 800315a:	d013      	beq.n	8003184 <HAL_ADC_IRQHandler+0x424>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003160:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800316c:	f043 0208 	orr.w	r2, r3, #8
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800317c:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 800317e:	6878      	ldr	r0, [r7, #4]
 8003180:	f000 fe48 	bl	8003e14 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8003184:	bf00      	nop
 8003186:	3728      	adds	r7, #40	; 0x28
 8003188:	46bd      	mov	sp, r7
 800318a:	bd80      	pop	{r7, pc}
 800318c:	42028000 	.word	0x42028000
 8003190:	42028300 	.word	0x42028300

08003194 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003194:	b480      	push	{r7}
 8003196:	b083      	sub	sp, #12
 8003198:	af00      	add	r7, sp, #0
 800319a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 800319c:	bf00      	nop
 800319e:	370c      	adds	r7, #12
 80031a0:	46bd      	mov	sp, r7
 80031a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a6:	4770      	bx	lr

080031a8 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 80031a8:	b480      	push	{r7}
 80031aa:	b083      	sub	sp, #12
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 80031b0:	bf00      	nop
 80031b2:	370c      	adds	r7, #12
 80031b4:	46bd      	mov	sp, r7
 80031b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ba:	4770      	bx	lr

080031bc <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80031bc:	b480      	push	{r7}
 80031be:	b083      	sub	sp, #12
 80031c0:	af00      	add	r7, sp, #0
 80031c2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80031c4:	bf00      	nop
 80031c6:	370c      	adds	r7, #12
 80031c8:	46bd      	mov	sp, r7
 80031ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ce:	4770      	bx	lr

080031d0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 80031d0:	b590      	push	{r4, r7, lr}
 80031d2:	b0b7      	sub	sp, #220	; 0xdc
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	6078      	str	r0, [r7, #4]
 80031d8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80031da:	2300      	movs	r3, #0
 80031dc:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80031e0:	2300      	movs	r3, #0
 80031e2:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80031ea:	2b01      	cmp	r3, #1
 80031ec:	d101      	bne.n	80031f2 <HAL_ADC_ConfigChannel+0x22>
 80031ee:	2302      	movs	r3, #2
 80031f0:	e3c1      	b.n	8003976 <HAL_ADC_ConfigChannel+0x7a6>
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	2201      	movs	r2, #1
 80031f6:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	4618      	mov	r0, r3
 8003200:	f7ff fb88 	bl	8002914 <LL_ADC_REG_IsConversionOngoing>
 8003204:	4603      	mov	r3, r0
 8003206:	2b00      	cmp	r3, #0
 8003208:	f040 83a6 	bne.w	8003958 <HAL_ADC_ConfigChannel+0x788>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	6818      	ldr	r0, [r3, #0]
 8003210:	683b      	ldr	r3, [r7, #0]
 8003212:	6859      	ldr	r1, [r3, #4]
 8003214:	683b      	ldr	r3, [r7, #0]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	461a      	mov	r2, r3
 800321a:	f7ff fa20 	bl	800265e <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	4618      	mov	r0, r3
 8003224:	f7ff fb76 	bl	8002914 <LL_ADC_REG_IsConversionOngoing>
 8003228:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	4618      	mov	r0, r3
 8003232:	f7ff fb82 	bl	800293a <LL_ADC_INJ_IsConversionOngoing>
 8003236:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800323a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800323e:	2b00      	cmp	r3, #0
 8003240:	f040 81c1 	bne.w	80035c6 <HAL_ADC_ConfigChannel+0x3f6>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003244:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003248:	2b00      	cmp	r3, #0
 800324a:	f040 81bc 	bne.w	80035c6 <HAL_ADC_ConfigChannel+0x3f6>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 800324e:	683b      	ldr	r3, [r7, #0]
 8003250:	689b      	ldr	r3, [r3, #8]
 8003252:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003256:	d10f      	bne.n	8003278 <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	6818      	ldr	r0, [r3, #0]
 800325c:	683b      	ldr	r3, [r7, #0]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	2200      	movs	r2, #0
 8003262:	4619      	mov	r1, r3
 8003264:	f7ff fa3a 	bl	80026dc <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8003270:	4618      	mov	r0, r3
 8003272:	f7ff f9ce 	bl	8002612 <LL_ADC_SetSamplingTimeCommonConfig>
 8003276:	e00e      	b.n	8003296 <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	6818      	ldr	r0, [r3, #0]
 800327c:	683b      	ldr	r3, [r7, #0]
 800327e:	6819      	ldr	r1, [r3, #0]
 8003280:	683b      	ldr	r3, [r7, #0]
 8003282:	689b      	ldr	r3, [r3, #8]
 8003284:	461a      	mov	r2, r3
 8003286:	f7ff fa29 	bl	80026dc <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	2100      	movs	r1, #0
 8003290:	4618      	mov	r0, r3
 8003292:	f7ff f9be 	bl	8002612 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8003296:	683b      	ldr	r3, [r7, #0]
 8003298:	695a      	ldr	r2, [r3, #20]
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	68db      	ldr	r3, [r3, #12]
 80032a0:	08db      	lsrs	r3, r3, #3
 80032a2:	f003 0303 	and.w	r3, r3, #3
 80032a6:	005b      	lsls	r3, r3, #1
 80032a8:	fa02 f303 	lsl.w	r3, r2, r3
 80032ac:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 80032b0:	683b      	ldr	r3, [r7, #0]
 80032b2:	691b      	ldr	r3, [r3, #16]
 80032b4:	2b04      	cmp	r3, #4
 80032b6:	d00a      	beq.n	80032ce <HAL_ADC_ConfigChannel+0xfe>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	6818      	ldr	r0, [r3, #0]
 80032bc:	683b      	ldr	r3, [r7, #0]
 80032be:	6919      	ldr	r1, [r3, #16]
 80032c0:	683b      	ldr	r3, [r7, #0]
 80032c2:	681a      	ldr	r2, [r3, #0]
 80032c4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80032c8:	f7ff f94e 	bl	8002568 <LL_ADC_SetOffset>
 80032cc:	e17b      	b.n	80035c6 <HAL_ADC_ConfigChannel+0x3f6>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	2100      	movs	r1, #0
 80032d4:	4618      	mov	r0, r3
 80032d6:	f7ff f96b 	bl	80025b0 <LL_ADC_GetOffsetChannel>
 80032da:	4603      	mov	r3, r0
 80032dc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d10a      	bne.n	80032fa <HAL_ADC_ConfigChannel+0x12a>
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	2100      	movs	r1, #0
 80032ea:	4618      	mov	r0, r3
 80032ec:	f7ff f960 	bl	80025b0 <LL_ADC_GetOffsetChannel>
 80032f0:	4603      	mov	r3, r0
 80032f2:	0e9b      	lsrs	r3, r3, #26
 80032f4:	f003 021f 	and.w	r2, r3, #31
 80032f8:	e01e      	b.n	8003338 <HAL_ADC_ConfigChannel+0x168>
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	2100      	movs	r1, #0
 8003300:	4618      	mov	r0, r3
 8003302:	f7ff f955 	bl	80025b0 <LL_ADC_GetOffsetChannel>
 8003306:	4603      	mov	r3, r0
 8003308:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800330c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003310:	fa93 f3a3 	rbit	r3, r3
 8003314:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003318:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800331c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003320:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003324:	2b00      	cmp	r3, #0
 8003326:	d101      	bne.n	800332c <HAL_ADC_ConfigChannel+0x15c>
  {
    return 32U;
 8003328:	2320      	movs	r3, #32
 800332a:	e004      	b.n	8003336 <HAL_ADC_ConfigChannel+0x166>
  }
  return __builtin_clz(value);
 800332c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003330:	fab3 f383 	clz	r3, r3
 8003334:	b2db      	uxtb	r3, r3
 8003336:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003338:	683b      	ldr	r3, [r7, #0]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003340:	2b00      	cmp	r3, #0
 8003342:	d105      	bne.n	8003350 <HAL_ADC_ConfigChannel+0x180>
 8003344:	683b      	ldr	r3, [r7, #0]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	0e9b      	lsrs	r3, r3, #26
 800334a:	f003 031f 	and.w	r3, r3, #31
 800334e:	e018      	b.n	8003382 <HAL_ADC_ConfigChannel+0x1b2>
 8003350:	683b      	ldr	r3, [r7, #0]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003358:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800335c:	fa93 f3a3 	rbit	r3, r3
 8003360:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8003364:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003368:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 800336c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003370:	2b00      	cmp	r3, #0
 8003372:	d101      	bne.n	8003378 <HAL_ADC_ConfigChannel+0x1a8>
    return 32U;
 8003374:	2320      	movs	r3, #32
 8003376:	e004      	b.n	8003382 <HAL_ADC_ConfigChannel+0x1b2>
  return __builtin_clz(value);
 8003378:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800337c:	fab3 f383 	clz	r3, r3
 8003380:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003382:	429a      	cmp	r2, r3
 8003384:	d106      	bne.n	8003394 <HAL_ADC_ConfigChannel+0x1c4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	2200      	movs	r2, #0
 800338c:	2100      	movs	r1, #0
 800338e:	4618      	mov	r0, r3
 8003390:	f7ff f924 	bl	80025dc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	2101      	movs	r1, #1
 800339a:	4618      	mov	r0, r3
 800339c:	f7ff f908 	bl	80025b0 <LL_ADC_GetOffsetChannel>
 80033a0:	4603      	mov	r3, r0
 80033a2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d10a      	bne.n	80033c0 <HAL_ADC_ConfigChannel+0x1f0>
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	2101      	movs	r1, #1
 80033b0:	4618      	mov	r0, r3
 80033b2:	f7ff f8fd 	bl	80025b0 <LL_ADC_GetOffsetChannel>
 80033b6:	4603      	mov	r3, r0
 80033b8:	0e9b      	lsrs	r3, r3, #26
 80033ba:	f003 021f 	and.w	r2, r3, #31
 80033be:	e01e      	b.n	80033fe <HAL_ADC_ConfigChannel+0x22e>
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	2101      	movs	r1, #1
 80033c6:	4618      	mov	r0, r3
 80033c8:	f7ff f8f2 	bl	80025b0 <LL_ADC_GetOffsetChannel>
 80033cc:	4603      	mov	r3, r0
 80033ce:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033d2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80033d6:	fa93 f3a3 	rbit	r3, r3
 80033da:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 80033de:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80033e2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 80033e6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d101      	bne.n	80033f2 <HAL_ADC_ConfigChannel+0x222>
    return 32U;
 80033ee:	2320      	movs	r3, #32
 80033f0:	e004      	b.n	80033fc <HAL_ADC_ConfigChannel+0x22c>
  return __builtin_clz(value);
 80033f2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80033f6:	fab3 f383 	clz	r3, r3
 80033fa:	b2db      	uxtb	r3, r3
 80033fc:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80033fe:	683b      	ldr	r3, [r7, #0]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003406:	2b00      	cmp	r3, #0
 8003408:	d105      	bne.n	8003416 <HAL_ADC_ConfigChannel+0x246>
 800340a:	683b      	ldr	r3, [r7, #0]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	0e9b      	lsrs	r3, r3, #26
 8003410:	f003 031f 	and.w	r3, r3, #31
 8003414:	e018      	b.n	8003448 <HAL_ADC_ConfigChannel+0x278>
 8003416:	683b      	ldr	r3, [r7, #0]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800341e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003422:	fa93 f3a3 	rbit	r3, r3
 8003426:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 800342a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800342e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8003432:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003436:	2b00      	cmp	r3, #0
 8003438:	d101      	bne.n	800343e <HAL_ADC_ConfigChannel+0x26e>
    return 32U;
 800343a:	2320      	movs	r3, #32
 800343c:	e004      	b.n	8003448 <HAL_ADC_ConfigChannel+0x278>
  return __builtin_clz(value);
 800343e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003442:	fab3 f383 	clz	r3, r3
 8003446:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003448:	429a      	cmp	r2, r3
 800344a:	d106      	bne.n	800345a <HAL_ADC_ConfigChannel+0x28a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	2200      	movs	r2, #0
 8003452:	2101      	movs	r1, #1
 8003454:	4618      	mov	r0, r3
 8003456:	f7ff f8c1 	bl	80025dc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	2102      	movs	r1, #2
 8003460:	4618      	mov	r0, r3
 8003462:	f7ff f8a5 	bl	80025b0 <LL_ADC_GetOffsetChannel>
 8003466:	4603      	mov	r3, r0
 8003468:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800346c:	2b00      	cmp	r3, #0
 800346e:	d10a      	bne.n	8003486 <HAL_ADC_ConfigChannel+0x2b6>
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	2102      	movs	r1, #2
 8003476:	4618      	mov	r0, r3
 8003478:	f7ff f89a 	bl	80025b0 <LL_ADC_GetOffsetChannel>
 800347c:	4603      	mov	r3, r0
 800347e:	0e9b      	lsrs	r3, r3, #26
 8003480:	f003 021f 	and.w	r2, r3, #31
 8003484:	e01e      	b.n	80034c4 <HAL_ADC_ConfigChannel+0x2f4>
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	2102      	movs	r1, #2
 800348c:	4618      	mov	r0, r3
 800348e:	f7ff f88f 	bl	80025b0 <LL_ADC_GetOffsetChannel>
 8003492:	4603      	mov	r3, r0
 8003494:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003498:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800349c:	fa93 f3a3 	rbit	r3, r3
 80034a0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 80034a4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80034a8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 80034ac:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d101      	bne.n	80034b8 <HAL_ADC_ConfigChannel+0x2e8>
    return 32U;
 80034b4:	2320      	movs	r3, #32
 80034b6:	e004      	b.n	80034c2 <HAL_ADC_ConfigChannel+0x2f2>
  return __builtin_clz(value);
 80034b8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80034bc:	fab3 f383 	clz	r3, r3
 80034c0:	b2db      	uxtb	r3, r3
 80034c2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80034c4:	683b      	ldr	r3, [r7, #0]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d105      	bne.n	80034dc <HAL_ADC_ConfigChannel+0x30c>
 80034d0:	683b      	ldr	r3, [r7, #0]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	0e9b      	lsrs	r3, r3, #26
 80034d6:	f003 031f 	and.w	r3, r3, #31
 80034da:	e016      	b.n	800350a <HAL_ADC_ConfigChannel+0x33a>
 80034dc:	683b      	ldr	r3, [r7, #0]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034e4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80034e8:	fa93 f3a3 	rbit	r3, r3
 80034ec:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 80034ee:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80034f0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 80034f4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d101      	bne.n	8003500 <HAL_ADC_ConfigChannel+0x330>
    return 32U;
 80034fc:	2320      	movs	r3, #32
 80034fe:	e004      	b.n	800350a <HAL_ADC_ConfigChannel+0x33a>
  return __builtin_clz(value);
 8003500:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003504:	fab3 f383 	clz	r3, r3
 8003508:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800350a:	429a      	cmp	r2, r3
 800350c:	d106      	bne.n	800351c <HAL_ADC_ConfigChannel+0x34c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	2200      	movs	r2, #0
 8003514:	2102      	movs	r1, #2
 8003516:	4618      	mov	r0, r3
 8003518:	f7ff f860 	bl	80025dc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	2103      	movs	r1, #3
 8003522:	4618      	mov	r0, r3
 8003524:	f7ff f844 	bl	80025b0 <LL_ADC_GetOffsetChannel>
 8003528:	4603      	mov	r3, r0
 800352a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800352e:	2b00      	cmp	r3, #0
 8003530:	d10a      	bne.n	8003548 <HAL_ADC_ConfigChannel+0x378>
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	2103      	movs	r1, #3
 8003538:	4618      	mov	r0, r3
 800353a:	f7ff f839 	bl	80025b0 <LL_ADC_GetOffsetChannel>
 800353e:	4603      	mov	r3, r0
 8003540:	0e9b      	lsrs	r3, r3, #26
 8003542:	f003 021f 	and.w	r2, r3, #31
 8003546:	e017      	b.n	8003578 <HAL_ADC_ConfigChannel+0x3a8>
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	2103      	movs	r1, #3
 800354e:	4618      	mov	r0, r3
 8003550:	f7ff f82e 	bl	80025b0 <LL_ADC_GetOffsetChannel>
 8003554:	4603      	mov	r3, r0
 8003556:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003558:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800355a:	fa93 f3a3 	rbit	r3, r3
 800355e:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8003560:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003562:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8003564:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003566:	2b00      	cmp	r3, #0
 8003568:	d101      	bne.n	800356e <HAL_ADC_ConfigChannel+0x39e>
    return 32U;
 800356a:	2320      	movs	r3, #32
 800356c:	e003      	b.n	8003576 <HAL_ADC_ConfigChannel+0x3a6>
  return __builtin_clz(value);
 800356e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003570:	fab3 f383 	clz	r3, r3
 8003574:	b2db      	uxtb	r3, r3
 8003576:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003578:	683b      	ldr	r3, [r7, #0]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003580:	2b00      	cmp	r3, #0
 8003582:	d105      	bne.n	8003590 <HAL_ADC_ConfigChannel+0x3c0>
 8003584:	683b      	ldr	r3, [r7, #0]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	0e9b      	lsrs	r3, r3, #26
 800358a:	f003 031f 	and.w	r3, r3, #31
 800358e:	e011      	b.n	80035b4 <HAL_ADC_ConfigChannel+0x3e4>
 8003590:	683b      	ldr	r3, [r7, #0]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003596:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003598:	fa93 f3a3 	rbit	r3, r3
 800359c:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 800359e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80035a0:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 80035a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d101      	bne.n	80035ac <HAL_ADC_ConfigChannel+0x3dc>
    return 32U;
 80035a8:	2320      	movs	r3, #32
 80035aa:	e003      	b.n	80035b4 <HAL_ADC_ConfigChannel+0x3e4>
  return __builtin_clz(value);
 80035ac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80035ae:	fab3 f383 	clz	r3, r3
 80035b2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80035b4:	429a      	cmp	r2, r3
 80035b6:	d106      	bne.n	80035c6 <HAL_ADC_ConfigChannel+0x3f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	2200      	movs	r2, #0
 80035be:	2103      	movs	r1, #3
 80035c0:	4618      	mov	r0, r3
 80035c2:	f7ff f80b 	bl	80025dc <LL_ADC_SetOffsetState>

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	4618      	mov	r0, r3
 80035cc:	f7ff f968 	bl	80028a0 <LL_ADC_IsEnabled>
 80035d0:	4603      	mov	r3, r0
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	f040 81c9 	bne.w	800396a <HAL_ADC_ConfigChannel+0x79a>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	6818      	ldr	r0, [r3, #0]
 80035dc:	683b      	ldr	r3, [r7, #0]
 80035de:	6819      	ldr	r1, [r3, #0]
 80035e0:	683b      	ldr	r3, [r7, #0]
 80035e2:	68db      	ldr	r3, [r3, #12]
 80035e4:	461a      	mov	r2, r3
 80035e6:	f7ff f8a5 	bl	8002734 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80035ea:	683b      	ldr	r3, [r7, #0]
 80035ec:	68db      	ldr	r3, [r3, #12]
 80035ee:	4a8f      	ldr	r2, [pc, #572]	; (800382c <HAL_ADC_ConfigChannel+0x65c>)
 80035f0:	4293      	cmp	r3, r2
 80035f2:	f040 8131 	bne.w	8003858 <HAL_ADC_ConfigChannel+0x688>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80035fa:	683b      	ldr	r3, [r7, #0]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003602:	2b00      	cmp	r3, #0
 8003604:	d10b      	bne.n	800361e <HAL_ADC_ConfigChannel+0x44e>
 8003606:	683b      	ldr	r3, [r7, #0]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	0e9b      	lsrs	r3, r3, #26
 800360c:	3301      	adds	r3, #1
 800360e:	f003 031f 	and.w	r3, r3, #31
 8003612:	2b09      	cmp	r3, #9
 8003614:	bf94      	ite	ls
 8003616:	2301      	movls	r3, #1
 8003618:	2300      	movhi	r3, #0
 800361a:	b2db      	uxtb	r3, r3
 800361c:	e019      	b.n	8003652 <HAL_ADC_ConfigChannel+0x482>
 800361e:	683b      	ldr	r3, [r7, #0]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003624:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003626:	fa93 f3a3 	rbit	r3, r3
 800362a:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 800362c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800362e:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8003630:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003632:	2b00      	cmp	r3, #0
 8003634:	d101      	bne.n	800363a <HAL_ADC_ConfigChannel+0x46a>
    return 32U;
 8003636:	2320      	movs	r3, #32
 8003638:	e003      	b.n	8003642 <HAL_ADC_ConfigChannel+0x472>
  return __builtin_clz(value);
 800363a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800363c:	fab3 f383 	clz	r3, r3
 8003640:	b2db      	uxtb	r3, r3
 8003642:	3301      	adds	r3, #1
 8003644:	f003 031f 	and.w	r3, r3, #31
 8003648:	2b09      	cmp	r3, #9
 800364a:	bf94      	ite	ls
 800364c:	2301      	movls	r3, #1
 800364e:	2300      	movhi	r3, #0
 8003650:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003652:	2b00      	cmp	r3, #0
 8003654:	d079      	beq.n	800374a <HAL_ADC_ConfigChannel+0x57a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003656:	683b      	ldr	r3, [r7, #0]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800365e:	2b00      	cmp	r3, #0
 8003660:	d107      	bne.n	8003672 <HAL_ADC_ConfigChannel+0x4a2>
 8003662:	683b      	ldr	r3, [r7, #0]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	0e9b      	lsrs	r3, r3, #26
 8003668:	3301      	adds	r3, #1
 800366a:	069b      	lsls	r3, r3, #26
 800366c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003670:	e015      	b.n	800369e <HAL_ADC_ConfigChannel+0x4ce>
 8003672:	683b      	ldr	r3, [r7, #0]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003678:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800367a:	fa93 f3a3 	rbit	r3, r3
 800367e:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8003680:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003682:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8003684:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003686:	2b00      	cmp	r3, #0
 8003688:	d101      	bne.n	800368e <HAL_ADC_ConfigChannel+0x4be>
    return 32U;
 800368a:	2320      	movs	r3, #32
 800368c:	e003      	b.n	8003696 <HAL_ADC_ConfigChannel+0x4c6>
  return __builtin_clz(value);
 800368e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003690:	fab3 f383 	clz	r3, r3
 8003694:	b2db      	uxtb	r3, r3
 8003696:	3301      	adds	r3, #1
 8003698:	069b      	lsls	r3, r3, #26
 800369a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800369e:	683b      	ldr	r3, [r7, #0]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d109      	bne.n	80036be <HAL_ADC_ConfigChannel+0x4ee>
 80036aa:	683b      	ldr	r3, [r7, #0]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	0e9b      	lsrs	r3, r3, #26
 80036b0:	3301      	adds	r3, #1
 80036b2:	f003 031f 	and.w	r3, r3, #31
 80036b6:	2101      	movs	r1, #1
 80036b8:	fa01 f303 	lsl.w	r3, r1, r3
 80036bc:	e017      	b.n	80036ee <HAL_ADC_ConfigChannel+0x51e>
 80036be:	683b      	ldr	r3, [r7, #0]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036c4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80036c6:	fa93 f3a3 	rbit	r3, r3
 80036ca:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 80036cc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80036ce:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 80036d0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d101      	bne.n	80036da <HAL_ADC_ConfigChannel+0x50a>
    return 32U;
 80036d6:	2320      	movs	r3, #32
 80036d8:	e003      	b.n	80036e2 <HAL_ADC_ConfigChannel+0x512>
  return __builtin_clz(value);
 80036da:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80036dc:	fab3 f383 	clz	r3, r3
 80036e0:	b2db      	uxtb	r3, r3
 80036e2:	3301      	adds	r3, #1
 80036e4:	f003 031f 	and.w	r3, r3, #31
 80036e8:	2101      	movs	r1, #1
 80036ea:	fa01 f303 	lsl.w	r3, r1, r3
 80036ee:	ea42 0103 	orr.w	r1, r2, r3
 80036f2:	683b      	ldr	r3, [r7, #0]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d10a      	bne.n	8003714 <HAL_ADC_ConfigChannel+0x544>
 80036fe:	683b      	ldr	r3, [r7, #0]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	0e9b      	lsrs	r3, r3, #26
 8003704:	3301      	adds	r3, #1
 8003706:	f003 021f 	and.w	r2, r3, #31
 800370a:	4613      	mov	r3, r2
 800370c:	005b      	lsls	r3, r3, #1
 800370e:	4413      	add	r3, r2
 8003710:	051b      	lsls	r3, r3, #20
 8003712:	e018      	b.n	8003746 <HAL_ADC_ConfigChannel+0x576>
 8003714:	683b      	ldr	r3, [r7, #0]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800371a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800371c:	fa93 f3a3 	rbit	r3, r3
 8003720:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8003722:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003724:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8003726:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003728:	2b00      	cmp	r3, #0
 800372a:	d101      	bne.n	8003730 <HAL_ADC_ConfigChannel+0x560>
    return 32U;
 800372c:	2320      	movs	r3, #32
 800372e:	e003      	b.n	8003738 <HAL_ADC_ConfigChannel+0x568>
  return __builtin_clz(value);
 8003730:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003732:	fab3 f383 	clz	r3, r3
 8003736:	b2db      	uxtb	r3, r3
 8003738:	3301      	adds	r3, #1
 800373a:	f003 021f 	and.w	r2, r3, #31
 800373e:	4613      	mov	r3, r2
 8003740:	005b      	lsls	r3, r3, #1
 8003742:	4413      	add	r3, r2
 8003744:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003746:	430b      	orrs	r3, r1
 8003748:	e081      	b.n	800384e <HAL_ADC_ConfigChannel+0x67e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800374a:	683b      	ldr	r3, [r7, #0]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003752:	2b00      	cmp	r3, #0
 8003754:	d107      	bne.n	8003766 <HAL_ADC_ConfigChannel+0x596>
 8003756:	683b      	ldr	r3, [r7, #0]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	0e9b      	lsrs	r3, r3, #26
 800375c:	3301      	adds	r3, #1
 800375e:	069b      	lsls	r3, r3, #26
 8003760:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003764:	e015      	b.n	8003792 <HAL_ADC_ConfigChannel+0x5c2>
 8003766:	683b      	ldr	r3, [r7, #0]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800376c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800376e:	fa93 f3a3 	rbit	r3, r3
 8003772:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8003774:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003776:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8003778:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800377a:	2b00      	cmp	r3, #0
 800377c:	d101      	bne.n	8003782 <HAL_ADC_ConfigChannel+0x5b2>
    return 32U;
 800377e:	2320      	movs	r3, #32
 8003780:	e003      	b.n	800378a <HAL_ADC_ConfigChannel+0x5ba>
  return __builtin_clz(value);
 8003782:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003784:	fab3 f383 	clz	r3, r3
 8003788:	b2db      	uxtb	r3, r3
 800378a:	3301      	adds	r3, #1
 800378c:	069b      	lsls	r3, r3, #26
 800378e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003792:	683b      	ldr	r3, [r7, #0]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800379a:	2b00      	cmp	r3, #0
 800379c:	d109      	bne.n	80037b2 <HAL_ADC_ConfigChannel+0x5e2>
 800379e:	683b      	ldr	r3, [r7, #0]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	0e9b      	lsrs	r3, r3, #26
 80037a4:	3301      	adds	r3, #1
 80037a6:	f003 031f 	and.w	r3, r3, #31
 80037aa:	2101      	movs	r1, #1
 80037ac:	fa01 f303 	lsl.w	r3, r1, r3
 80037b0:	e017      	b.n	80037e2 <HAL_ADC_ConfigChannel+0x612>
 80037b2:	683b      	ldr	r3, [r7, #0]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037b8:	6a3b      	ldr	r3, [r7, #32]
 80037ba:	fa93 f3a3 	rbit	r3, r3
 80037be:	61fb      	str	r3, [r7, #28]
  return result;
 80037c0:	69fb      	ldr	r3, [r7, #28]
 80037c2:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80037c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d101      	bne.n	80037ce <HAL_ADC_ConfigChannel+0x5fe>
    return 32U;
 80037ca:	2320      	movs	r3, #32
 80037cc:	e003      	b.n	80037d6 <HAL_ADC_ConfigChannel+0x606>
  return __builtin_clz(value);
 80037ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037d0:	fab3 f383 	clz	r3, r3
 80037d4:	b2db      	uxtb	r3, r3
 80037d6:	3301      	adds	r3, #1
 80037d8:	f003 031f 	and.w	r3, r3, #31
 80037dc:	2101      	movs	r1, #1
 80037de:	fa01 f303 	lsl.w	r3, r1, r3
 80037e2:	ea42 0103 	orr.w	r1, r2, r3
 80037e6:	683b      	ldr	r3, [r7, #0]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d10d      	bne.n	800380e <HAL_ADC_ConfigChannel+0x63e>
 80037f2:	683b      	ldr	r3, [r7, #0]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	0e9b      	lsrs	r3, r3, #26
 80037f8:	3301      	adds	r3, #1
 80037fa:	f003 021f 	and.w	r2, r3, #31
 80037fe:	4613      	mov	r3, r2
 8003800:	005b      	lsls	r3, r3, #1
 8003802:	4413      	add	r3, r2
 8003804:	3b1e      	subs	r3, #30
 8003806:	051b      	lsls	r3, r3, #20
 8003808:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800380c:	e01e      	b.n	800384c <HAL_ADC_ConfigChannel+0x67c>
 800380e:	683b      	ldr	r3, [r7, #0]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003814:	697b      	ldr	r3, [r7, #20]
 8003816:	fa93 f3a3 	rbit	r3, r3
 800381a:	613b      	str	r3, [r7, #16]
  return result;
 800381c:	693b      	ldr	r3, [r7, #16]
 800381e:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8003820:	69bb      	ldr	r3, [r7, #24]
 8003822:	2b00      	cmp	r3, #0
 8003824:	d104      	bne.n	8003830 <HAL_ADC_ConfigChannel+0x660>
    return 32U;
 8003826:	2320      	movs	r3, #32
 8003828:	e006      	b.n	8003838 <HAL_ADC_ConfigChannel+0x668>
 800382a:	bf00      	nop
 800382c:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8003830:	69bb      	ldr	r3, [r7, #24]
 8003832:	fab3 f383 	clz	r3, r3
 8003836:	b2db      	uxtb	r3, r3
 8003838:	3301      	adds	r3, #1
 800383a:	f003 021f 	and.w	r2, r3, #31
 800383e:	4613      	mov	r3, r2
 8003840:	005b      	lsls	r3, r3, #1
 8003842:	4413      	add	r3, r2
 8003844:	3b1e      	subs	r3, #30
 8003846:	051b      	lsls	r3, r3, #20
 8003848:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800384c:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 800384e:	683a      	ldr	r2, [r7, #0]
 8003850:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003852:	4619      	mov	r1, r3
 8003854:	f7fe ff42 	bl	80026dc <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8003858:	683b      	ldr	r3, [r7, #0]
 800385a:	681a      	ldr	r2, [r3, #0]
 800385c:	4b48      	ldr	r3, [pc, #288]	; (8003980 <HAL_ADC_ConfigChannel+0x7b0>)
 800385e:	4013      	ands	r3, r2
 8003860:	2b00      	cmp	r3, #0
 8003862:	f000 8082 	beq.w	800396a <HAL_ADC_ConfigChannel+0x79a>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003866:	4847      	ldr	r0, [pc, #284]	; (8003984 <HAL_ADC_ConfigChannel+0x7b4>)
 8003868:	f7fe fe70 	bl	800254c <LL_ADC_GetCommonPathInternalCh>
 800386c:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003870:	4845      	ldr	r0, [pc, #276]	; (8003988 <HAL_ADC_ConfigChannel+0x7b8>)
 8003872:	f7ff f815 	bl	80028a0 <LL_ADC_IsEnabled>
 8003876:	4604      	mov	r4, r0
 8003878:	4844      	ldr	r0, [pc, #272]	; (800398c <HAL_ADC_ConfigChannel+0x7bc>)
 800387a:	f7ff f811 	bl	80028a0 <LL_ADC_IsEnabled>
 800387e:	4603      	mov	r3, r0
 8003880:	4323      	orrs	r3, r4
 8003882:	2b00      	cmp	r3, #0
 8003884:	d15e      	bne.n	8003944 <HAL_ADC_ConfigChannel+0x774>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003886:	683b      	ldr	r3, [r7, #0]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	4a41      	ldr	r2, [pc, #260]	; (8003990 <HAL_ADC_ConfigChannel+0x7c0>)
 800388c:	4293      	cmp	r3, r2
 800388e:	d127      	bne.n	80038e0 <HAL_ADC_ConfigChannel+0x710>
              && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003890:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003894:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003898:	2b00      	cmp	r3, #0
 800389a:	d121      	bne.n	80038e0 <HAL_ADC_ConfigChannel+0x710>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	4a39      	ldr	r2, [pc, #228]	; (8003988 <HAL_ADC_ConfigChannel+0x7b8>)
 80038a2:	4293      	cmp	r3, r2
 80038a4:	d161      	bne.n	800396a <HAL_ADC_ConfigChannel+0x79a>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80038a6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80038aa:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80038ae:	4619      	mov	r1, r3
 80038b0:	4834      	ldr	r0, [pc, #208]	; (8003984 <HAL_ADC_ConfigChannel+0x7b4>)
 80038b2:	f7fe fe38 	bl	8002526 <LL_ADC_SetCommonPathInternalCh>
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL)
                                 * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80038b6:	4b37      	ldr	r3, [pc, #220]	; (8003994 <HAL_ADC_ConfigChannel+0x7c4>)
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	099b      	lsrs	r3, r3, #6
 80038bc:	4a36      	ldr	r2, [pc, #216]	; (8003998 <HAL_ADC_ConfigChannel+0x7c8>)
 80038be:	fba2 2303 	umull	r2, r3, r2, r3
 80038c2:	099b      	lsrs	r3, r3, #6
 80038c4:	1c5a      	adds	r2, r3, #1
 80038c6:	4613      	mov	r3, r2
 80038c8:	005b      	lsls	r3, r3, #1
 80038ca:	4413      	add	r3, r2
 80038cc:	009b      	lsls	r3, r3, #2
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL)
 80038ce:	60fb      	str	r3, [r7, #12]
              while(wait_loop_index != 0UL)
 80038d0:	e002      	b.n	80038d8 <HAL_ADC_ConfigChannel+0x708>
              {
                wait_loop_index--;
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	3b01      	subs	r3, #1
 80038d6:	60fb      	str	r3, [r7, #12]
              while(wait_loop_index != 0UL)
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d1f9      	bne.n	80038d2 <HAL_ADC_ConfigChannel+0x702>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80038de:	e044      	b.n	800396a <HAL_ADC_ConfigChannel+0x79a>
              }
            }
          }
          else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 80038e0:	683b      	ldr	r3, [r7, #0]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	4a2d      	ldr	r2, [pc, #180]	; (800399c <HAL_ADC_ConfigChannel+0x7cc>)
 80038e6:	4293      	cmp	r3, r2
 80038e8:	d113      	bne.n	8003912 <HAL_ADC_ConfigChannel+0x742>
                   && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80038ea:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80038ee:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d10d      	bne.n	8003912 <HAL_ADC_ConfigChannel+0x742>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	4a23      	ldr	r2, [pc, #140]	; (8003988 <HAL_ADC_ConfigChannel+0x7b8>)
 80038fc:	4293      	cmp	r3, r2
 80038fe:	d134      	bne.n	800396a <HAL_ADC_ConfigChannel+0x79a>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003900:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003904:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003908:	4619      	mov	r1, r3
 800390a:	481e      	ldr	r0, [pc, #120]	; (8003984 <HAL_ADC_ConfigChannel+0x7b4>)
 800390c:	f7fe fe0b 	bl	8002526 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003910:	e02b      	b.n	800396a <HAL_ADC_ConfigChannel+0x79a>
                                             LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
            }
          }
          else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8003912:	683b      	ldr	r3, [r7, #0]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	4a22      	ldr	r2, [pc, #136]	; (80039a0 <HAL_ADC_ConfigChannel+0x7d0>)
 8003918:	4293      	cmp	r3, r2
 800391a:	d126      	bne.n	800396a <HAL_ADC_ConfigChannel+0x79a>
                   && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800391c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003920:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003924:	2b00      	cmp	r3, #0
 8003926:	d120      	bne.n	800396a <HAL_ADC_ConfigChannel+0x79a>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	4a16      	ldr	r2, [pc, #88]	; (8003988 <HAL_ADC_ConfigChannel+0x7b8>)
 800392e:	4293      	cmp	r3, r2
 8003930:	d11b      	bne.n	800396a <HAL_ADC_ConfigChannel+0x79a>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003932:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003936:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800393a:	4619      	mov	r1, r3
 800393c:	4811      	ldr	r0, [pc, #68]	; (8003984 <HAL_ADC_ConfigChannel+0x7b4>)
 800393e:	f7fe fdf2 	bl	8002526 <LL_ADC_SetCommonPathInternalCh>
 8003942:	e012      	b.n	800396a <HAL_ADC_ConfigChannel+0x79a>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003948:	f043 0220 	orr.w	r2, r3, #32
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	659a      	str	r2, [r3, #88]	; 0x58

          tmp_hal_status = HAL_ERROR;
 8003950:	2301      	movs	r3, #1
 8003952:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8003956:	e008      	b.n	800396a <HAL_ADC_ConfigChannel+0x79a>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800395c:	f043 0220 	orr.w	r2, r3, #32
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8003964:	2301      	movs	r3, #1
 8003966:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	2200      	movs	r2, #0
 800396e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 8003972:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8003976:	4618      	mov	r0, r3
 8003978:	37dc      	adds	r7, #220	; 0xdc
 800397a:	46bd      	mov	sp, r7
 800397c:	bd90      	pop	{r4, r7, pc}
 800397e:	bf00      	nop
 8003980:	80080000 	.word	0x80080000
 8003984:	42028300 	.word	0x42028300
 8003988:	42028000 	.word	0x42028000
 800398c:	42028100 	.word	0x42028100
 8003990:	c7520000 	.word	0xc7520000
 8003994:	20000004 	.word	0x20000004
 8003998:	053e2d63 	.word	0x053e2d63
 800399c:	cb840000 	.word	0xcb840000
 80039a0:	80000001 	.word	0x80000001

080039a4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80039a4:	b580      	push	{r7, lr}
 80039a6:	b084      	sub	sp, #16
 80039a8:	af00      	add	r7, sp, #0
 80039aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80039ac:	2300      	movs	r3, #0
 80039ae:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	4618      	mov	r0, r3
 80039b6:	f7fe ff73 	bl	80028a0 <LL_ADC_IsEnabled>
 80039ba:	4603      	mov	r3, r0
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d169      	bne.n	8003a94 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	689a      	ldr	r2, [r3, #8]
 80039c6:	4b36      	ldr	r3, [pc, #216]	; (8003aa0 <ADC_Enable+0xfc>)
 80039c8:	4013      	ands	r3, r2
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d00d      	beq.n	80039ea <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039d2:	f043 0210 	orr.w	r2, r3, #16
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039de:	f043 0201 	orr.w	r2, r3, #1
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	65da      	str	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 80039e6:	2301      	movs	r3, #1
 80039e8:	e055      	b.n	8003a96 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	4618      	mov	r0, r3
 80039f0:	f7fe ff2e 	bl	8002850 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80039f4:	482b      	ldr	r0, [pc, #172]	; (8003aa4 <ADC_Enable+0x100>)
 80039f6:	f7fe fda9 	bl	800254c <LL_ADC_GetCommonPathInternalCh>
 80039fa:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 80039fc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d013      	beq.n	8003a2c <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003a04:	4b28      	ldr	r3, [pc, #160]	; (8003aa8 <ADC_Enable+0x104>)
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	099b      	lsrs	r3, r3, #6
 8003a0a:	4a28      	ldr	r2, [pc, #160]	; (8003aac <ADC_Enable+0x108>)
 8003a0c:	fba2 2303 	umull	r2, r3, r2, r3
 8003a10:	099b      	lsrs	r3, r3, #6
 8003a12:	1c5a      	adds	r2, r3, #1
 8003a14:	4613      	mov	r3, r2
 8003a16:	005b      	lsls	r3, r3, #1
 8003a18:	4413      	add	r3, r2
 8003a1a:	009b      	lsls	r3, r3, #2
 8003a1c:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8003a1e:	e002      	b.n	8003a26 <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8003a20:	68bb      	ldr	r3, [r7, #8]
 8003a22:	3b01      	subs	r3, #1
 8003a24:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8003a26:	68bb      	ldr	r3, [r7, #8]
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d1f9      	bne.n	8003a20 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8003a2c:	f7fe fd5c 	bl	80024e8 <HAL_GetTick>
 8003a30:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003a32:	e028      	b.n	8003a86 <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	4618      	mov	r0, r3
 8003a3a:	f7fe ff31 	bl	80028a0 <LL_ADC_IsEnabled>
 8003a3e:	4603      	mov	r3, r0
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d104      	bne.n	8003a4e <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	4618      	mov	r0, r3
 8003a4a:	f7fe ff01 	bl	8002850 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003a4e:	f7fe fd4b 	bl	80024e8 <HAL_GetTick>
 8003a52:	4602      	mov	r2, r0
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	1ad3      	subs	r3, r2, r3
 8003a58:	2b02      	cmp	r3, #2
 8003a5a:	d914      	bls.n	8003a86 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	f003 0301 	and.w	r3, r3, #1
 8003a66:	2b01      	cmp	r3, #1
 8003a68:	d00d      	beq.n	8003a86 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a6e:	f043 0210 	orr.w	r2, r3, #16
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a7a:	f043 0201 	orr.w	r2, r3, #1
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 8003a82:	2301      	movs	r3, #1
 8003a84:	e007      	b.n	8003a96 <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	f003 0301 	and.w	r3, r3, #1
 8003a90:	2b01      	cmp	r3, #1
 8003a92:	d1cf      	bne.n	8003a34 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003a94:	2300      	movs	r3, #0
}
 8003a96:	4618      	mov	r0, r3
 8003a98:	3710      	adds	r7, #16
 8003a9a:	46bd      	mov	sp, r7
 8003a9c:	bd80      	pop	{r7, pc}
 8003a9e:	bf00      	nop
 8003aa0:	8000003f 	.word	0x8000003f
 8003aa4:	42028300 	.word	0x42028300
 8003aa8:	20000004 	.word	0x20000004
 8003aac:	053e2d63 	.word	0x053e2d63

08003ab0 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8003ab0:	b580      	push	{r7, lr}
 8003ab2:	b084      	sub	sp, #16
 8003ab4:	af00      	add	r7, sp, #0
 8003ab6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	4618      	mov	r0, r3
 8003abe:	f7fe ff02 	bl	80028c6 <LL_ADC_IsDisableOngoing>
 8003ac2:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	4618      	mov	r0, r3
 8003aca:	f7fe fee9 	bl	80028a0 <LL_ADC_IsEnabled>
 8003ace:	4603      	mov	r3, r0
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d047      	beq.n	8003b64 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d144      	bne.n	8003b64 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	689b      	ldr	r3, [r3, #8]
 8003ae0:	f003 030d 	and.w	r3, r3, #13
 8003ae4:	2b01      	cmp	r3, #1
 8003ae6:	d10c      	bne.n	8003b02 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	4618      	mov	r0, r3
 8003aee:	f7fe fec3 	bl	8002878 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	2203      	movs	r2, #3
 8003af8:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003afa:	f7fe fcf5 	bl	80024e8 <HAL_GetTick>
 8003afe:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003b00:	e029      	b.n	8003b56 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b06:	f043 0210 	orr.w	r2, r3, #16
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	659a      	str	r2, [r3, #88]	; 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b12:	f043 0201 	orr.w	r2, r3, #1
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	65da      	str	r2, [r3, #92]	; 0x5c
      return HAL_ERROR;
 8003b1a:	2301      	movs	r3, #1
 8003b1c:	e023      	b.n	8003b66 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003b1e:	f7fe fce3 	bl	80024e8 <HAL_GetTick>
 8003b22:	4602      	mov	r2, r0
 8003b24:	68bb      	ldr	r3, [r7, #8]
 8003b26:	1ad3      	subs	r3, r2, r3
 8003b28:	2b02      	cmp	r3, #2
 8003b2a:	d914      	bls.n	8003b56 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	689b      	ldr	r3, [r3, #8]
 8003b32:	f003 0301 	and.w	r3, r3, #1
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d00d      	beq.n	8003b56 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b3e:	f043 0210 	orr.w	r2, r3, #16
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b4a:	f043 0201 	orr.w	r2, r3, #1
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 8003b52:	2301      	movs	r3, #1
 8003b54:	e007      	b.n	8003b66 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	689b      	ldr	r3, [r3, #8]
 8003b5c:	f003 0301 	and.w	r3, r3, #1
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d1dc      	bne.n	8003b1e <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003b64:	2300      	movs	r3, #0
}
 8003b66:	4618      	mov	r0, r3
 8003b68:	3710      	adds	r7, #16
 8003b6a:	46bd      	mov	sp, r7
 8003b6c:	bd80      	pop	{r7, pc}

08003b6e <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8003b6e:	b580      	push	{r7, lr}
 8003b70:	b084      	sub	sp, #16
 8003b72:	af00      	add	r7, sp, #0
 8003b74:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b7a:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b80:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d14b      	bne.n	8003c20 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b8c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	659a      	str	r2, [r3, #88]	; 0x58

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	f003 0308 	and.w	r3, r3, #8
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d021      	beq.n	8003be6 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	4618      	mov	r0, r3
 8003ba8:	f7fe fd46 	bl	8002638 <LL_ADC_REG_IsTriggerSourceSWStart>
 8003bac:	4603      	mov	r3, r0
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d032      	beq.n	8003c18 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	68db      	ldr	r3, [r3, #12]
 8003bb8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d12b      	bne.n	8003c18 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bc4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	659a      	str	r2, [r3, #88]	; 0x58
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bd0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d11f      	bne.n	8003c18 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bdc:	f043 0201 	orr.w	r2, r3, #1
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	659a      	str	r2, [r3, #88]	; 0x58
 8003be4:	e018      	b.n	8003c18 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	68db      	ldr	r3, [r3, #12]
 8003bec:	f003 0302 	and.w	r3, r3, #2
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d111      	bne.n	8003c18 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bf8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	659a      	str	r2, [r3, #88]	; 0x58
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c04:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d105      	bne.n	8003c18 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c10:	f043 0201 	orr.w	r2, r3, #1
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	659a      	str	r2, [r3, #88]	; 0x58

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003c18:	68f8      	ldr	r0, [r7, #12]
 8003c1a:	f7fc fcb3 	bl	8000584 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8003c1e:	e00e      	b.n	8003c3e <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c24:	f003 0310 	and.w	r3, r3, #16
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d003      	beq.n	8003c34 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8003c2c:	68f8      	ldr	r0, [r7, #12]
 8003c2e:	f7ff fac5 	bl	80031bc <HAL_ADC_ErrorCallback>
}
 8003c32:	e004      	b.n	8003c3e <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c3a:	6878      	ldr	r0, [r7, #4]
 8003c3c:	4798      	blx	r3
}
 8003c3e:	bf00      	nop
 8003c40:	3710      	adds	r7, #16
 8003c42:	46bd      	mov	sp, r7
 8003c44:	bd80      	pop	{r7, pc}

08003c46 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8003c46:	b580      	push	{r7, lr}
 8003c48:	b084      	sub	sp, #16
 8003c4a:	af00      	add	r7, sp, #0
 8003c4c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c52:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003c54:	68f8      	ldr	r0, [r7, #12]
 8003c56:	f7ff fa9d 	bl	8003194 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003c5a:	bf00      	nop
 8003c5c:	3710      	adds	r7, #16
 8003c5e:	46bd      	mov	sp, r7
 8003c60:	bd80      	pop	{r7, pc}

08003c62 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8003c62:	b580      	push	{r7, lr}
 8003c64:	b084      	sub	sp, #16
 8003c66:	af00      	add	r7, sp, #0
 8003c68:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c6e:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c74:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c80:	f043 0204 	orr.w	r2, r3, #4
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003c88:	68f8      	ldr	r0, [r7, #12]
 8003c8a:	f7ff fa97 	bl	80031bc <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003c8e:	bf00      	nop
 8003c90:	3710      	adds	r7, #16
 8003c92:	46bd      	mov	sp, r7
 8003c94:	bd80      	pop	{r7, pc}

08003c96 <LL_ADC_IsEnabled>:
{
 8003c96:	b480      	push	{r7}
 8003c98:	b083      	sub	sp, #12
 8003c9a:	af00      	add	r7, sp, #0
 8003c9c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	689b      	ldr	r3, [r3, #8]
 8003ca2:	f003 0301 	and.w	r3, r3, #1
 8003ca6:	2b01      	cmp	r3, #1
 8003ca8:	d101      	bne.n	8003cae <LL_ADC_IsEnabled+0x18>
 8003caa:	2301      	movs	r3, #1
 8003cac:	e000      	b.n	8003cb0 <LL_ADC_IsEnabled+0x1a>
 8003cae:	2300      	movs	r3, #0
}
 8003cb0:	4618      	mov	r0, r3
 8003cb2:	370c      	adds	r7, #12
 8003cb4:	46bd      	mov	sp, r7
 8003cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cba:	4770      	bx	lr

08003cbc <LL_ADC_StartCalibration>:
{
 8003cbc:	b480      	push	{r7}
 8003cbe:	b083      	sub	sp, #12
 8003cc0:	af00      	add	r7, sp, #0
 8003cc2:	6078      	str	r0, [r7, #4]
 8003cc4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	689b      	ldr	r3, [r3, #8]
 8003cca:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8003cce:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003cd2:	683a      	ldr	r2, [r7, #0]
 8003cd4:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8003cd8:	4313      	orrs	r3, r2
 8003cda:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	609a      	str	r2, [r3, #8]
}
 8003ce2:	bf00      	nop
 8003ce4:	370c      	adds	r7, #12
 8003ce6:	46bd      	mov	sp, r7
 8003ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cec:	4770      	bx	lr

08003cee <LL_ADC_IsCalibrationOnGoing>:
{
 8003cee:	b480      	push	{r7}
 8003cf0:	b083      	sub	sp, #12
 8003cf2:	af00      	add	r7, sp, #0
 8003cf4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	689b      	ldr	r3, [r3, #8]
 8003cfa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003cfe:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003d02:	d101      	bne.n	8003d08 <LL_ADC_IsCalibrationOnGoing+0x1a>
 8003d04:	2301      	movs	r3, #1
 8003d06:	e000      	b.n	8003d0a <LL_ADC_IsCalibrationOnGoing+0x1c>
 8003d08:	2300      	movs	r3, #0
}
 8003d0a:	4618      	mov	r0, r3
 8003d0c:	370c      	adds	r7, #12
 8003d0e:	46bd      	mov	sp, r7
 8003d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d14:	4770      	bx	lr

08003d16 <LL_ADC_REG_IsConversionOngoing>:
{
 8003d16:	b480      	push	{r7}
 8003d18:	b083      	sub	sp, #12
 8003d1a:	af00      	add	r7, sp, #0
 8003d1c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	689b      	ldr	r3, [r3, #8]
 8003d22:	f003 0304 	and.w	r3, r3, #4
 8003d26:	2b04      	cmp	r3, #4
 8003d28:	d101      	bne.n	8003d2e <LL_ADC_REG_IsConversionOngoing+0x18>
 8003d2a:	2301      	movs	r3, #1
 8003d2c:	e000      	b.n	8003d30 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003d2e:	2300      	movs	r3, #0
}
 8003d30:	4618      	mov	r0, r3
 8003d32:	370c      	adds	r7, #12
 8003d34:	46bd      	mov	sp, r7
 8003d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d3a:	4770      	bx	lr

08003d3c <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8003d3c:	b580      	push	{r7, lr}
 8003d3e:	b084      	sub	sp, #16
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	6078      	str	r0, [r7, #4]
 8003d44:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8003d46:	2300      	movs	r3, #0
 8003d48:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8003d50:	2b01      	cmp	r3, #1
 8003d52:	d101      	bne.n	8003d58 <HAL_ADCEx_Calibration_Start+0x1c>
 8003d54:	2302      	movs	r3, #2
 8003d56:	e04d      	b.n	8003df4 <HAL_ADCEx_Calibration_Start+0xb8>
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	2201      	movs	r2, #1
 8003d5c:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8003d60:	6878      	ldr	r0, [r7, #4]
 8003d62:	f7ff fea5 	bl	8003ab0 <ADC_Disable>
 8003d66:	4603      	mov	r3, r0
 8003d68:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8003d6a:	7bfb      	ldrb	r3, [r7, #15]
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d136      	bne.n	8003dde <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d74:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003d78:	f023 0302 	bic.w	r3, r3, #2
 8003d7c:	f043 0202 	orr.w	r2, r3, #2
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	659a      	str	r2, [r3, #88]	; 0x58
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	6839      	ldr	r1, [r7, #0]
 8003d8a:	4618      	mov	r0, r3
 8003d8c:	f7ff ff96 	bl	8003cbc <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003d90:	e014      	b.n	8003dbc <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8003d92:	68bb      	ldr	r3, [r7, #8]
 8003d94:	3301      	adds	r3, #1
 8003d96:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8003d98:	68bb      	ldr	r3, [r7, #8]
 8003d9a:	4a18      	ldr	r2, [pc, #96]	; (8003dfc <HAL_ADCEx_Calibration_Start+0xc0>)
 8003d9c:	4293      	cmp	r3, r2
 8003d9e:	d90d      	bls.n	8003dbc <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003da4:	f023 0312 	bic.w	r3, r3, #18
 8003da8:	f043 0210 	orr.w	r2, r3, #16
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	659a      	str	r2, [r3, #88]	; 0x58
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	2200      	movs	r2, #0
 8003db4:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

        return HAL_ERROR;
 8003db8:	2301      	movs	r3, #1
 8003dba:	e01b      	b.n	8003df4 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	4618      	mov	r0, r3
 8003dc2:	f7ff ff94 	bl	8003cee <LL_ADC_IsCalibrationOnGoing>
 8003dc6:	4603      	mov	r3, r0
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d1e2      	bne.n	8003d92 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003dd0:	f023 0303 	bic.w	r3, r3, #3
 8003dd4:	f043 0201 	orr.w	r2, r3, #1
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	659a      	str	r2, [r3, #88]	; 0x58
 8003ddc:	e005      	b.n	8003dea <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003de2:	f043 0210 	orr.w	r2, r3, #16
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	659a      	str	r2, [r3, #88]	; 0x58
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	2200      	movs	r2, #0
 8003dee:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 8003df2:	7bfb      	ldrb	r3, [r7, #15]
}
 8003df4:	4618      	mov	r0, r3
 8003df6:	3710      	adds	r7, #16
 8003df8:	46bd      	mov	sp, r7
 8003dfa:	bd80      	pop	{r7, pc}
 8003dfc:	0006cbff 	.word	0x0006cbff

08003e00 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003e00:	b480      	push	{r7}
 8003e02:	b083      	sub	sp, #12
 8003e04:	af00      	add	r7, sp, #0
 8003e06:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8003e08:	bf00      	nop
 8003e0a:	370c      	adds	r7, #12
 8003e0c:	46bd      	mov	sp, r7
 8003e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e12:	4770      	bx	lr

08003e14 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8003e14:	b480      	push	{r7}
 8003e16:	b083      	sub	sp, #12
 8003e18:	af00      	add	r7, sp, #0
 8003e1a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8003e1c:	bf00      	nop
 8003e1e:	370c      	adds	r7, #12
 8003e20:	46bd      	mov	sp, r7
 8003e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e26:	4770      	bx	lr

08003e28 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8003e28:	b480      	push	{r7}
 8003e2a:	b083      	sub	sp, #12
 8003e2c:	af00      	add	r7, sp, #0
 8003e2e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8003e30:	bf00      	nop
 8003e32:	370c      	adds	r7, #12
 8003e34:	46bd      	mov	sp, r7
 8003e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e3a:	4770      	bx	lr

08003e3c <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8003e3c:	b480      	push	{r7}
 8003e3e:	b083      	sub	sp, #12
 8003e40:	af00      	add	r7, sp, #0
 8003e42:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8003e44:	bf00      	nop
 8003e46:	370c      	adds	r7, #12
 8003e48:	46bd      	mov	sp, r7
 8003e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e4e:	4770      	bx	lr

08003e50 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8003e50:	b480      	push	{r7}
 8003e52:	b083      	sub	sp, #12
 8003e54:	af00      	add	r7, sp, #0
 8003e56:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8003e58:	bf00      	nop
 8003e5a:	370c      	adds	r7, #12
 8003e5c:	46bd      	mov	sp, r7
 8003e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e62:	4770      	bx	lr

08003e64 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8003e64:	b590      	push	{r4, r7, lr}
 8003e66:	b0a1      	sub	sp, #132	; 0x84
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	6078      	str	r0, [r7, #4]
 8003e6c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003e6e:	2300      	movs	r3, #0
 8003e70:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8003e7a:	2b01      	cmp	r3, #1
 8003e7c:	d101      	bne.n	8003e82 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8003e7e:	2302      	movs	r3, #2
 8003e80:	e089      	b.n	8003f96 <HAL_ADCEx_MultiModeConfigChannel+0x132>
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	2201      	movs	r2, #1
 8003e86:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8003e8a:	2300      	movs	r3, #0
 8003e8c:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8003e8e:	2300      	movs	r3, #0
 8003e90:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	4a42      	ldr	r2, [pc, #264]	; (8003fa0 <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 8003e98:	4293      	cmp	r3, r2
 8003e9a:	d102      	bne.n	8003ea2 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8003e9c:	4b41      	ldr	r3, [pc, #260]	; (8003fa4 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8003e9e:	60fb      	str	r3, [r7, #12]
 8003ea0:	e001      	b.n	8003ea6 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8003ea2:	2300      	movs	r3, #0
 8003ea4:	60fb      	str	r3, [r7, #12]

  if (tmp_hadc_slave.Instance == NULL)
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d10b      	bne.n	8003ec4 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003eb0:	f043 0220 	orr.w	r2, r3, #32
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	659a      	str	r2, [r3, #88]	; 0x58

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	2200      	movs	r2, #0
 8003ebc:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    return HAL_ERROR;
 8003ec0:	2301      	movs	r3, #1
 8003ec2:	e068      	b.n	8003f96 <HAL_ADCEx_MultiModeConfigChannel+0x132>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	4618      	mov	r0, r3
 8003ec8:	f7ff ff25 	bl	8003d16 <LL_ADC_REG_IsConversionOngoing>
 8003ecc:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	4618      	mov	r0, r3
 8003ed4:	f7ff ff1f 	bl	8003d16 <LL_ADC_REG_IsConversionOngoing>
 8003ed8:	4603      	mov	r3, r0
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d14a      	bne.n	8003f74 <HAL_ADCEx_MultiModeConfigChannel+0x110>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8003ede:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d147      	bne.n	8003f74 <HAL_ADCEx_MultiModeConfigChannel+0x110>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003ee4:	4b30      	ldr	r3, [pc, #192]	; (8003fa8 <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 8003ee6:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003ee8:	683b      	ldr	r3, [r7, #0]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d027      	beq.n	8003f40 <HAL_ADCEx_MultiModeConfigChannel+0xdc>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8003ef0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003ef2:	689b      	ldr	r3, [r3, #8]
 8003ef4:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003ef8:	683b      	ldr	r3, [r7, #0]
 8003efa:	6859      	ldr	r1, [r3, #4]
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003f02:	035b      	lsls	r3, r3, #13
 8003f04:	430b      	orrs	r3, r1
 8003f06:	431a      	orrs	r2, r3
 8003f08:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003f0a:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003f0c:	4824      	ldr	r0, [pc, #144]	; (8003fa0 <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 8003f0e:	f7ff fec2 	bl	8003c96 <LL_ADC_IsEnabled>
 8003f12:	4604      	mov	r4, r0
 8003f14:	4823      	ldr	r0, [pc, #140]	; (8003fa4 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8003f16:	f7ff febe 	bl	8003c96 <LL_ADC_IsEnabled>
 8003f1a:	4603      	mov	r3, r0
 8003f1c:	4323      	orrs	r3, r4
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d132      	bne.n	8003f88 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8003f22:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003f24:	689b      	ldr	r3, [r3, #8]
 8003f26:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8003f2a:	f023 030f 	bic.w	r3, r3, #15
 8003f2e:	683a      	ldr	r2, [r7, #0]
 8003f30:	6811      	ldr	r1, [r2, #0]
 8003f32:	683a      	ldr	r2, [r7, #0]
 8003f34:	6892      	ldr	r2, [r2, #8]
 8003f36:	430a      	orrs	r2, r1
 8003f38:	431a      	orrs	r2, r3
 8003f3a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003f3c:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003f3e:	e023      	b.n	8003f88 <HAL_ADCEx_MultiModeConfigChannel+0x124>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8003f40:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003f42:	689b      	ldr	r3, [r3, #8]
 8003f44:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003f48:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003f4a:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003f4c:	4814      	ldr	r0, [pc, #80]	; (8003fa0 <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 8003f4e:	f7ff fea2 	bl	8003c96 <LL_ADC_IsEnabled>
 8003f52:	4604      	mov	r4, r0
 8003f54:	4813      	ldr	r0, [pc, #76]	; (8003fa4 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8003f56:	f7ff fe9e 	bl	8003c96 <LL_ADC_IsEnabled>
 8003f5a:	4603      	mov	r3, r0
 8003f5c:	4323      	orrs	r3, r4
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d112      	bne.n	8003f88 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8003f62:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003f64:	689b      	ldr	r3, [r3, #8]
 8003f66:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8003f6a:	f023 030f 	bic.w	r3, r3, #15
 8003f6e:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8003f70:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003f72:	e009      	b.n	8003f88 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f78:	f043 0220 	orr.w	r2, r3, #32
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8003f80:	2301      	movs	r3, #1
 8003f82:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8003f86:	e000      	b.n	8003f8a <HAL_ADCEx_MultiModeConfigChannel+0x126>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003f88:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	2200      	movs	r2, #0
 8003f8e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 8003f92:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8003f96:	4618      	mov	r0, r3
 8003f98:	3784      	adds	r7, #132	; 0x84
 8003f9a:	46bd      	mov	sp, r7
 8003f9c:	bd90      	pop	{r4, r7, pc}
 8003f9e:	bf00      	nop
 8003fa0:	42028000 	.word	0x42028000
 8003fa4:	42028100 	.word	0x42028100
 8003fa8:	42028300 	.word	0x42028300

08003fac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003fac:	b480      	push	{r7}
 8003fae:	b085      	sub	sp, #20
 8003fb0:	af00      	add	r7, sp, #0
 8003fb2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	f003 0307 	and.w	r3, r3, #7
 8003fba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003fbc:	4b0c      	ldr	r3, [pc, #48]	; (8003ff0 <__NVIC_SetPriorityGrouping+0x44>)
 8003fbe:	68db      	ldr	r3, [r3, #12]
 8003fc0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003fc2:	68ba      	ldr	r2, [r7, #8]
 8003fc4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003fc8:	4013      	ands	r3, r2
 8003fca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003fd0:	68bb      	ldr	r3, [r7, #8]
 8003fd2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003fd4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003fd8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003fdc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003fde:	4a04      	ldr	r2, [pc, #16]	; (8003ff0 <__NVIC_SetPriorityGrouping+0x44>)
 8003fe0:	68bb      	ldr	r3, [r7, #8]
 8003fe2:	60d3      	str	r3, [r2, #12]
}
 8003fe4:	bf00      	nop
 8003fe6:	3714      	adds	r7, #20
 8003fe8:	46bd      	mov	sp, r7
 8003fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fee:	4770      	bx	lr
 8003ff0:	e000ed00 	.word	0xe000ed00

08003ff4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003ff4:	b480      	push	{r7}
 8003ff6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003ff8:	4b04      	ldr	r3, [pc, #16]	; (800400c <__NVIC_GetPriorityGrouping+0x18>)
 8003ffa:	68db      	ldr	r3, [r3, #12]
 8003ffc:	0a1b      	lsrs	r3, r3, #8
 8003ffe:	f003 0307 	and.w	r3, r3, #7
}
 8004002:	4618      	mov	r0, r3
 8004004:	46bd      	mov	sp, r7
 8004006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800400a:	4770      	bx	lr
 800400c:	e000ed00 	.word	0xe000ed00

08004010 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004010:	b480      	push	{r7}
 8004012:	b083      	sub	sp, #12
 8004014:	af00      	add	r7, sp, #0
 8004016:	4603      	mov	r3, r0
 8004018:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800401a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800401e:	2b00      	cmp	r3, #0
 8004020:	db0b      	blt.n	800403a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004022:	79fb      	ldrb	r3, [r7, #7]
 8004024:	f003 021f 	and.w	r2, r3, #31
 8004028:	4907      	ldr	r1, [pc, #28]	; (8004048 <__NVIC_EnableIRQ+0x38>)
 800402a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800402e:	095b      	lsrs	r3, r3, #5
 8004030:	2001      	movs	r0, #1
 8004032:	fa00 f202 	lsl.w	r2, r0, r2
 8004036:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800403a:	bf00      	nop
 800403c:	370c      	adds	r7, #12
 800403e:	46bd      	mov	sp, r7
 8004040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004044:	4770      	bx	lr
 8004046:	bf00      	nop
 8004048:	e000e100 	.word	0xe000e100

0800404c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800404c:	b480      	push	{r7}
 800404e:	b083      	sub	sp, #12
 8004050:	af00      	add	r7, sp, #0
 8004052:	4603      	mov	r3, r0
 8004054:	6039      	str	r1, [r7, #0]
 8004056:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004058:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800405c:	2b00      	cmp	r3, #0
 800405e:	db0a      	blt.n	8004076 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004060:	683b      	ldr	r3, [r7, #0]
 8004062:	b2da      	uxtb	r2, r3
 8004064:	490c      	ldr	r1, [pc, #48]	; (8004098 <__NVIC_SetPriority+0x4c>)
 8004066:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800406a:	0152      	lsls	r2, r2, #5
 800406c:	b2d2      	uxtb	r2, r2
 800406e:	440b      	add	r3, r1
 8004070:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004074:	e00a      	b.n	800408c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004076:	683b      	ldr	r3, [r7, #0]
 8004078:	b2da      	uxtb	r2, r3
 800407a:	4908      	ldr	r1, [pc, #32]	; (800409c <__NVIC_SetPriority+0x50>)
 800407c:	79fb      	ldrb	r3, [r7, #7]
 800407e:	f003 030f 	and.w	r3, r3, #15
 8004082:	3b04      	subs	r3, #4
 8004084:	0152      	lsls	r2, r2, #5
 8004086:	b2d2      	uxtb	r2, r2
 8004088:	440b      	add	r3, r1
 800408a:	761a      	strb	r2, [r3, #24]
}
 800408c:	bf00      	nop
 800408e:	370c      	adds	r7, #12
 8004090:	46bd      	mov	sp, r7
 8004092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004096:	4770      	bx	lr
 8004098:	e000e100 	.word	0xe000e100
 800409c:	e000ed00 	.word	0xe000ed00

080040a0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80040a0:	b480      	push	{r7}
 80040a2:	b089      	sub	sp, #36	; 0x24
 80040a4:	af00      	add	r7, sp, #0
 80040a6:	60f8      	str	r0, [r7, #12]
 80040a8:	60b9      	str	r1, [r7, #8]
 80040aa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	f003 0307 	and.w	r3, r3, #7
 80040b2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80040b4:	69fb      	ldr	r3, [r7, #28]
 80040b6:	f1c3 0307 	rsb	r3, r3, #7
 80040ba:	2b03      	cmp	r3, #3
 80040bc:	bf28      	it	cs
 80040be:	2303      	movcs	r3, #3
 80040c0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80040c2:	69fb      	ldr	r3, [r7, #28]
 80040c4:	3303      	adds	r3, #3
 80040c6:	2b06      	cmp	r3, #6
 80040c8:	d902      	bls.n	80040d0 <NVIC_EncodePriority+0x30>
 80040ca:	69fb      	ldr	r3, [r7, #28]
 80040cc:	3b04      	subs	r3, #4
 80040ce:	e000      	b.n	80040d2 <NVIC_EncodePriority+0x32>
 80040d0:	2300      	movs	r3, #0
 80040d2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80040d4:	f04f 32ff 	mov.w	r2, #4294967295
 80040d8:	69bb      	ldr	r3, [r7, #24]
 80040da:	fa02 f303 	lsl.w	r3, r2, r3
 80040de:	43da      	mvns	r2, r3
 80040e0:	68bb      	ldr	r3, [r7, #8]
 80040e2:	401a      	ands	r2, r3
 80040e4:	697b      	ldr	r3, [r7, #20]
 80040e6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80040e8:	f04f 31ff 	mov.w	r1, #4294967295
 80040ec:	697b      	ldr	r3, [r7, #20]
 80040ee:	fa01 f303 	lsl.w	r3, r1, r3
 80040f2:	43d9      	mvns	r1, r3
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80040f8:	4313      	orrs	r3, r2
         );
}
 80040fa:	4618      	mov	r0, r3
 80040fc:	3724      	adds	r7, #36	; 0x24
 80040fe:	46bd      	mov	sp, r7
 8004100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004104:	4770      	bx	lr

08004106 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004106:	b580      	push	{r7, lr}
 8004108:	b082      	sub	sp, #8
 800410a:	af00      	add	r7, sp, #0
 800410c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800410e:	6878      	ldr	r0, [r7, #4]
 8004110:	f7ff ff4c 	bl	8003fac <__NVIC_SetPriorityGrouping>
}
 8004114:	bf00      	nop
 8004116:	3708      	adds	r7, #8
 8004118:	46bd      	mov	sp, r7
 800411a:	bd80      	pop	{r7, pc}

0800411c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 7
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800411c:	b580      	push	{r7, lr}
 800411e:	b086      	sub	sp, #24
 8004120:	af00      	add	r7, sp, #0
 8004122:	4603      	mov	r3, r0
 8004124:	60b9      	str	r1, [r7, #8]
 8004126:	607a      	str	r2, [r7, #4]
 8004128:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800412a:	f7ff ff63 	bl	8003ff4 <__NVIC_GetPriorityGrouping>
 800412e:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004130:	687a      	ldr	r2, [r7, #4]
 8004132:	68b9      	ldr	r1, [r7, #8]
 8004134:	6978      	ldr	r0, [r7, #20]
 8004136:	f7ff ffb3 	bl	80040a0 <NVIC_EncodePriority>
 800413a:	4602      	mov	r2, r0
 800413c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004140:	4611      	mov	r1, r2
 8004142:	4618      	mov	r0, r3
 8004144:	f7ff ff82 	bl	800404c <__NVIC_SetPriority>
}
 8004148:	bf00      	nop
 800414a:	3718      	adds	r7, #24
 800414c:	46bd      	mov	sp, r7
 800414e:	bd80      	pop	{r7, pc}

08004150 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004150:	b580      	push	{r7, lr}
 8004152:	b082      	sub	sp, #8
 8004154:	af00      	add	r7, sp, #0
 8004156:	4603      	mov	r3, r0
 8004158:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800415a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800415e:	4618      	mov	r0, r3
 8004160:	f7ff ff56 	bl	8004010 <__NVIC_EnableIRQ>
}
 8004164:	bf00      	nop
 8004166:	3708      	adds	r7, #8
 8004168:	46bd      	mov	sp, r7
 800416a:	bd80      	pop	{r7, pc}

0800416c <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800416c:	b580      	push	{r7, lr}
 800416e:	b084      	sub	sp, #16
 8004170:	af00      	add	r7, sp, #0
 8004172:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	2b00      	cmp	r3, #0
 8004178:	d101      	bne.n	800417e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800417a:	2301      	movs	r3, #1
 800417c:	e08d      	b.n	800429a <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	461a      	mov	r2, r3
 8004184:	4b47      	ldr	r3, [pc, #284]	; (80042a4 <HAL_DMA_Init+0x138>)
 8004186:	429a      	cmp	r2, r3
 8004188:	d80f      	bhi.n	80041aa <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	461a      	mov	r2, r3
 8004190:	4b45      	ldr	r3, [pc, #276]	; (80042a8 <HAL_DMA_Init+0x13c>)
 8004192:	4413      	add	r3, r2
 8004194:	4a45      	ldr	r2, [pc, #276]	; (80042ac <HAL_DMA_Init+0x140>)
 8004196:	fba2 2303 	umull	r2, r3, r2, r3
 800419a:	091b      	lsrs	r3, r3, #4
 800419c:	009a      	lsls	r2, r3, #2
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	64da      	str	r2, [r3, #76]	; 0x4c
    hdma->DmaBaseAddress = DMA1;
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	4a42      	ldr	r2, [pc, #264]	; (80042b0 <HAL_DMA_Init+0x144>)
 80041a6:	649a      	str	r2, [r3, #72]	; 0x48
 80041a8:	e00e      	b.n	80041c8 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	461a      	mov	r2, r3
 80041b0:	4b40      	ldr	r3, [pc, #256]	; (80042b4 <HAL_DMA_Init+0x148>)
 80041b2:	4413      	add	r3, r2
 80041b4:	4a3d      	ldr	r2, [pc, #244]	; (80042ac <HAL_DMA_Init+0x140>)
 80041b6:	fba2 2303 	umull	r2, r3, r2, r3
 80041ba:	091b      	lsrs	r3, r3, #4
 80041bc:	009a      	lsls	r2, r3, #2
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	64da      	str	r2, [r3, #76]	; 0x4c
    hdma->DmaBaseAddress = DMA2;
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	4a3c      	ldr	r2, [pc, #240]	; (80042b8 <HAL_DMA_Init+0x14c>)
 80041c6:	649a      	str	r2, [r3, #72]	; 0x48
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	2202      	movs	r2, #2
 80041cc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE   | DMA_CCR_PSIZE  |
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	f423 33ff 	bic.w	r3, r3, #130560	; 0x1fe00
 80041de:	f423 73f8 	bic.w	r3, r3, #496	; 0x1f0
 80041e2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC    | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM | DMA_CCR_CT     |
                      DMA_CCR_DBM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80041ec:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	691b      	ldr	r3, [r3, #16]
 80041f2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80041f8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	699b      	ldr	r3, [r3, #24]
 80041fe:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004204:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	6a1b      	ldr	r3, [r3, #32]
 800420a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800420c:	68fa      	ldr	r2, [r7, #12]
 800420e:	4313      	orrs	r3, r2
 8004210:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	68fa      	ldr	r2, [r7, #12]
 8004218:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800421a:	6878      	ldr	r0, [r7, #4]
 800421c:	f000 faf2 	bl	8004804 <DMA_CalcDMAMUXChannelBaseAndMask>

  if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	689b      	ldr	r3, [r3, #8]
 8004224:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004228:	d102      	bne.n	8004230 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	2200      	movs	r2, #0
 800422e:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	685a      	ldr	r2, [r3, #4]
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004238:	b2d2      	uxtb	r2, r2
 800423a:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004240:	687a      	ldr	r2, [r7, #4]
 8004242:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8004244:	605a      	str	r2, [r3, #4]

  if(((hdma->Init.Request > 0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	685b      	ldr	r3, [r3, #4]
 800424a:	2b00      	cmp	r3, #0
 800424c:	d010      	beq.n	8004270 <HAL_DMA_Init+0x104>
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	685b      	ldr	r3, [r3, #4]
 8004252:	2b04      	cmp	r3, #4
 8004254:	d80c      	bhi.n	8004270 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8004256:	6878      	ldr	r0, [r7, #4]
 8004258:	f000 fb12 	bl	8004880 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004260:	2200      	movs	r2, #0
 8004262:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004268:	687a      	ldr	r2, [r7, #4]
 800426a:	6e52      	ldr	r2, [r2, #100]	; 0x64
 800426c:	605a      	str	r2, [r3, #4]
 800426e:	e008      	b.n	8004282 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	2200      	movs	r2, #0
 8004274:	65da      	str	r2, [r3, #92]	; 0x5c
    hdma->DMAmuxRequestGenStatus = 0U;
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	2200      	movs	r2, #0
 800427a:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxRequestGenStatusMask = 0U;
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	2200      	movs	r2, #0
 8004280:	665a      	str	r2, [r3, #100]	; 0x64
  }

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	2200      	movs	r2, #0
 8004286:	645a      	str	r2, [r3, #68]	; 0x44

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	2201      	movs	r2, #1
 800428c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	2200      	movs	r2, #0
 8004294:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8004298:	2300      	movs	r3, #0
}
 800429a:	4618      	mov	r0, r3
 800429c:	3710      	adds	r7, #16
 800429e:	46bd      	mov	sp, r7
 80042a0:	bd80      	pop	{r7, pc}
 80042a2:	bf00      	nop
 80042a4:	40020407 	.word	0x40020407
 80042a8:	bffdfff8 	.word	0xbffdfff8
 80042ac:	cccccccd 	.word	0xcccccccd
 80042b0:	40020000 	.word	0x40020000
 80042b4:	bffdfbf8 	.word	0xbffdfbf8
 80042b8:	40020400 	.word	0x40020400

080042bc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80042bc:	b580      	push	{r7, lr}
 80042be:	b086      	sub	sp, #24
 80042c0:	af00      	add	r7, sp, #0
 80042c2:	60f8      	str	r0, [r7, #12]
 80042c4:	60b9      	str	r1, [r7, #8]
 80042c6:	607a      	str	r2, [r7, #4]
 80042c8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80042ca:	2300      	movs	r3, #0
 80042cc:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80042d4:	2b01      	cmp	r3, #1
 80042d6:	d101      	bne.n	80042dc <HAL_DMA_Start_IT+0x20>
 80042d8:	2302      	movs	r3, #2
 80042da:	e066      	b.n	80043aa <HAL_DMA_Start_IT+0xee>
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	2201      	movs	r2, #1
 80042e0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80042ea:	b2db      	uxtb	r3, r3
 80042ec:	2b01      	cmp	r3, #1
 80042ee:	d155      	bne.n	800439c <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	2202      	movs	r2, #2
 80042f4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	2200      	movs	r2, #0
 80042fc:	645a      	str	r2, [r3, #68]	; 0x44

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	681a      	ldr	r2, [r3, #0]
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	f022 0201 	bic.w	r2, r2, #1
 800430c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800430e:	683b      	ldr	r3, [r7, #0]
 8004310:	687a      	ldr	r2, [r7, #4]
 8004312:	68b9      	ldr	r1, [r7, #8]
 8004314:	68f8      	ldr	r0, [r7, #12]
 8004316:	f000 fa37 	bl	8004788 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800431e:	2b00      	cmp	r3, #0
 8004320:	d008      	beq.n	8004334 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	681a      	ldr	r2, [r3, #0]
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	f042 020e 	orr.w	r2, r2, #14
 8004330:	601a      	str	r2, [r3, #0]
 8004332:	e00f      	b.n	8004354 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	681a      	ldr	r2, [r3, #0]
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	f022 0204 	bic.w	r2, r2, #4
 8004342:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	681a      	ldr	r2, [r3, #0]
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	f042 020a 	orr.w	r2, r2, #10
 8004352:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800435e:	2b00      	cmp	r3, #0
 8004360:	d007      	beq.n	8004372 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004366:	681a      	ldr	r2, [r3, #0]
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800436c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004370:	601a      	str	r2, [r3, #0]
    }

    if(hdma->DMAmuxRequestGen != 0U)
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004376:	2b00      	cmp	r3, #0
 8004378:	d007      	beq.n	800438a <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800437e:	681a      	ldr	r2, [r3, #0]
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004384:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004388:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	681a      	ldr	r2, [r3, #0]
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	f042 0201 	orr.w	r2, r2, #1
 8004398:	601a      	str	r2, [r3, #0]
 800439a:	e005      	b.n	80043a8 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	2200      	movs	r2, #0
 80043a0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80043a4:	2302      	movs	r3, #2
 80043a6:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80043a8:	7dfb      	ldrb	r3, [r7, #23]
}
 80043aa:	4618      	mov	r0, r3
 80043ac:	3718      	adds	r7, #24
 80043ae:	46bd      	mov	sp, r7
 80043b0:	bd80      	pop	{r7, pc}

080043b2 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80043b2:	b480      	push	{r7}
 80043b4:	b085      	sub	sp, #20
 80043b6:	af00      	add	r7, sp, #0
 80043b8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80043ba:	2300      	movs	r3, #0
 80043bc:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80043c4:	b2db      	uxtb	r3, r3
 80043c6:	2b02      	cmp	r3, #2
 80043c8:	d008      	beq.n	80043dc <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	2204      	movs	r2, #4
 80043ce:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	2200      	movs	r2, #0
 80043d4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80043d8:	2301      	movs	r3, #1
 80043da:	e040      	b.n	800445e <HAL_DMA_Abort+0xac>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	681a      	ldr	r2, [r3, #0]
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	f022 020e 	bic.w	r2, r2, #14
 80043ea:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80043f0:	681a      	ldr	r2, [r3, #0]
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80043f6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80043fa:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	681a      	ldr	r2, [r3, #0]
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	f022 0201 	bic.w	r2, r2, #1
 800440a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004410:	f003 021c 	and.w	r2, r3, #28
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004418:	2101      	movs	r1, #1
 800441a:	fa01 f202 	lsl.w	r2, r1, r2
 800441e:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004424:	687a      	ldr	r2, [r7, #4]
 8004426:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8004428:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800442e:	2b00      	cmp	r3, #0
 8004430:	d00c      	beq.n	800444c <HAL_DMA_Abort+0x9a>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004436:	681a      	ldr	r2, [r3, #0]
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800443c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004440:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004446:	687a      	ldr	r2, [r7, #4]
 8004448:	6e52      	ldr	r2, [r2, #100]	; 0x64
 800444a:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	2201      	movs	r2, #1
 8004450:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	2200      	movs	r2, #0
 8004458:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 800445c:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 800445e:	4618      	mov	r0, r3
 8004460:	3714      	adds	r7, #20
 8004462:	46bd      	mov	sp, r7
 8004464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004468:	4770      	bx	lr

0800446a <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800446a:	b580      	push	{r7, lr}
 800446c:	b084      	sub	sp, #16
 800446e:	af00      	add	r7, sp, #0
 8004470:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004472:	2300      	movs	r3, #0
 8004474:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800447c:	b2db      	uxtb	r3, r3
 800447e:	2b02      	cmp	r3, #2
 8004480:	d005      	beq.n	800448e <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	2204      	movs	r2, #4
 8004486:	645a      	str	r2, [r3, #68]	; 0x44

    status = HAL_ERROR;
 8004488:	2301      	movs	r3, #1
 800448a:	73fb      	strb	r3, [r7, #15]
 800448c:	e047      	b.n	800451e <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	681a      	ldr	r2, [r3, #0]
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	f022 020e 	bic.w	r2, r2, #14
 800449c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	681a      	ldr	r2, [r3, #0]
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	f022 0201 	bic.w	r2, r2, #1
 80044ac:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80044b2:	681a      	ldr	r2, [r3, #0]
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80044b8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80044bc:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80044c2:	f003 021c 	and.w	r2, r3, #28
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80044ca:	2101      	movs	r1, #1
 80044cc:	fa01 f202 	lsl.w	r2, r1, r2
 80044d0:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044d6:	687a      	ldr	r2, [r7, #4]
 80044d8:	6d92      	ldr	r2, [r2, #88]	; 0x58
 80044da:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d00c      	beq.n	80044fe <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80044e8:	681a      	ldr	r2, [r3, #0]
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80044ee:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80044f2:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80044f8:	687a      	ldr	r2, [r7, #4]
 80044fa:	6e52      	ldr	r2, [r2, #100]	; 0x64
 80044fc:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	2201      	movs	r2, #1
 8004502:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	2200      	movs	r2, #0
 800450a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004512:	2b00      	cmp	r3, #0
 8004514:	d003      	beq.n	800451e <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800451a:	6878      	ldr	r0, [r7, #4]
 800451c:	4798      	blx	r3
    }
  }
  return status;
 800451e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004520:	4618      	mov	r0, r3
 8004522:	3710      	adds	r7, #16
 8004524:	46bd      	mov	sp, r7
 8004526:	bd80      	pop	{r7, pc}

08004528 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004528:	b580      	push	{r7, lr}
 800452a:	b084      	sub	sp, #16
 800452c:	af00      	add	r7, sp, #0
 800452e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004544:	f003 031c 	and.w	r3, r3, #28
 8004548:	2204      	movs	r2, #4
 800454a:	409a      	lsls	r2, r3
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	4013      	ands	r3, r2
 8004550:	2b00      	cmp	r3, #0
 8004552:	d053      	beq.n	80045fc <HAL_DMA_IRQHandler+0xd4>
 8004554:	68bb      	ldr	r3, [r7, #8]
 8004556:	f003 0304 	and.w	r3, r3, #4
 800455a:	2b00      	cmp	r3, #0
 800455c:	d04e      	beq.n	80045fc <HAL_DMA_IRQHandler+0xd4>
  {
    /* Multi_Buffering mode enabled */
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004568:	2b00      	cmp	r3, #0
 800456a:	d024      	beq.n	80045b6 <HAL_DMA_IRQHandler+0x8e>
    {
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004570:	f003 021c 	and.w	r2, r3, #28
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004578:	2104      	movs	r1, #4
 800457a:	fa01 f202 	lsl.w	r2, r1, r2
 800457e:	605a      	str	r2, [r3, #4]

      /* Current memory buffer used is Memory 0 */
      if((hdma->Instance->CCR & DMA_CCR_CT) == 0U)
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800458a:	2b00      	cmp	r3, #0
 800458c:	d109      	bne.n	80045a2 <HAL_DMA_IRQHandler+0x7a>
      {
        if(hdma->XferHalfCpltCallback != NULL)
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004592:	2b00      	cmp	r3, #0
 8004594:	f000 80c0 	beq.w	8004718 <HAL_DMA_IRQHandler+0x1f0>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800459c:	6878      	ldr	r0, [r7, #4]
 800459e:	4798      	blx	r3
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 80045a0:	e0ba      	b.n	8004718 <HAL_DMA_IRQHandler+0x1f0>
        }
      }
      /* Current memory buffer used is Memory 1 */
      else
      {
        if(hdma->XferM1HalfCpltCallback != NULL)
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	f000 80b6 	beq.w	8004718 <HAL_DMA_IRQHandler+0x1f0>
        {
          /* Half transfer callback */
          hdma->XferM1HalfCpltCallback(hdma);
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045b0:	6878      	ldr	r0, [r7, #4]
 80045b2:	4798      	blx	r3
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 80045b4:	e0b0      	b.n	8004718 <HAL_DMA_IRQHandler+0x1f0>
      }
    }
    else
    {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	f003 0320 	and.w	r3, r3, #32
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d107      	bne.n	80045d4 <HAL_DMA_IRQHandler+0xac>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	681a      	ldr	r2, [r3, #0]
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	f022 0204 	bic.w	r2, r2, #4
 80045d2:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80045d8:	f003 021c 	and.w	r2, r3, #28
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80045e0:	2104      	movs	r1, #4
 80045e2:	fa01 f202 	lsl.w	r2, r1, r2
 80045e6:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	f000 8093 	beq.w	8004718 <HAL_DMA_IRQHandler+0x1f0>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045f6:	6878      	ldr	r0, [r7, #4]
 80045f8:	4798      	blx	r3
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 80045fa:	e08d      	b.n	8004718 <HAL_DMA_IRQHandler+0x1f0>
      }
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004600:	f003 031c 	and.w	r3, r3, #28
 8004604:	2202      	movs	r2, #2
 8004606:	409a      	lsls	r2, r3
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	4013      	ands	r3, r2
 800460c:	2b00      	cmp	r3, #0
 800460e:	d04e      	beq.n	80046ae <HAL_DMA_IRQHandler+0x186>
 8004610:	68bb      	ldr	r3, [r7, #8]
 8004612:	f003 0302 	and.w	r3, r3, #2
 8004616:	2b00      	cmp	r3, #0
 8004618:	d049      	beq.n	80046ae <HAL_DMA_IRQHandler+0x186>
  {
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004624:	2b00      	cmp	r3, #0
 8004626:	d018      	beq.n	800465a <HAL_DMA_IRQHandler+0x132>
    {
      /* Current memory buffer used is Memory 0 */
      if((hdma->Instance->CCR & DMA_CCR_CT) == 0U)
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004632:	2b00      	cmp	r3, #0
 8004634:	d108      	bne.n	8004648 <HAL_DMA_IRQHandler+0x120>
      {
        if(hdma->XferM1CpltCallback != NULL)
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800463a:	2b00      	cmp	r3, #0
 800463c:	d06e      	beq.n	800471c <HAL_DMA_IRQHandler+0x1f4>
        {
          /* Transfer complete Callback for memory1 */
          hdma->XferM1CpltCallback(hdma);
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004642:	6878      	ldr	r0, [r7, #4]
 8004644:	4798      	blx	r3
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 8004646:	e069      	b.n	800471c <HAL_DMA_IRQHandler+0x1f4>
        }
      }
      /* Current memory buffer used is Memory 1 */
      else
      {
        if(hdma->XferCpltCallback != NULL)
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800464c:	2b00      	cmp	r3, #0
 800464e:	d065      	beq.n	800471c <HAL_DMA_IRQHandler+0x1f4>
        {
          /* Transfer complete Callback for memory0 */
          hdma->XferCpltCallback(hdma);
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004654:	6878      	ldr	r0, [r7, #4]
 8004656:	4798      	blx	r3
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 8004658:	e060      	b.n	800471c <HAL_DMA_IRQHandler+0x1f4>
        }
      }
    }
    else
    {
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	f003 0320 	and.w	r3, r3, #32
 8004664:	2b00      	cmp	r3, #0
 8004666:	d10b      	bne.n	8004680 <HAL_DMA_IRQHandler+0x158>
      {
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        /* Disable the transfer complete and error interrupt */
        /* if the DMA mode is not CIRCULAR  */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	681a      	ldr	r2, [r3, #0]
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	f022 020a 	bic.w	r2, r2, #10
 8004676:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	2201      	movs	r2, #1
 800467c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
      }
      /* Clear the transfer complete flag */
      hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004684:	f003 021c 	and.w	r2, r3, #28
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800468c:	2102      	movs	r1, #2
 800468e:	fa01 f202 	lsl.w	r2, r1, r2
 8004692:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	2200      	movs	r2, #0
 8004698:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

      if(hdma->XferCpltCallback != NULL)
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d03b      	beq.n	800471c <HAL_DMA_IRQHandler+0x1f4>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046a8:	6878      	ldr	r0, [r7, #4]
 80046aa:	4798      	blx	r3
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 80046ac:	e036      	b.n	800471c <HAL_DMA_IRQHandler+0x1f4>
      }
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80046b2:	f003 031c 	and.w	r3, r3, #28
 80046b6:	2208      	movs	r2, #8
 80046b8:	409a      	lsls	r2, r3
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	4013      	ands	r3, r2
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d02e      	beq.n	8004720 <HAL_DMA_IRQHandler+0x1f8>
 80046c2:	68bb      	ldr	r3, [r7, #8]
 80046c4:	f003 0308 	and.w	r3, r3, #8
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d029      	beq.n	8004720 <HAL_DMA_IRQHandler+0x1f8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	681a      	ldr	r2, [r3, #0]
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	f022 020e 	bic.w	r2, r2, #14
 80046da:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80046e0:	f003 021c 	and.w	r2, r3, #28
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80046e8:	2101      	movs	r1, #1
 80046ea:	fa01 f202 	lsl.w	r2, r1, r2
 80046ee:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	2201      	movs	r2, #1
 80046f4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	2201      	movs	r2, #1
 80046fa:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	2200      	movs	r2, #0
 8004702:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800470a:	2b00      	cmp	r3, #0
 800470c:	d008      	beq.n	8004720 <HAL_DMA_IRQHandler+0x1f8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004712:	6878      	ldr	r0, [r7, #4]
 8004714:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8004716:	e002      	b.n	800471e <HAL_DMA_IRQHandler+0x1f6>
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 8004718:	bf00      	nop
 800471a:	e000      	b.n	800471e <HAL_DMA_IRQHandler+0x1f6>
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 800471c:	bf00      	nop
  return;
 800471e:	bf00      	nop
 8004720:	bf00      	nop
}
 8004722:	3710      	adds	r7, #16
 8004724:	46bd      	mov	sp, r7
 8004726:	bd80      	pop	{r7, pc}

08004728 <HAL_DMA_ConfigChannelAttributes>:
  * @param  ChannelAttributes specifies the DMA channel secure/privilege attributes.
  *         This parameter can be a one or a combination of @ref DMA_Channel_Attributes
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_DMA_ConfigChannelAttributes(DMA_HandleTypeDef *hdma, uint32_t ChannelAttributes)
{
 8004728:	b480      	push	{r7}
 800472a:	b085      	sub	sp, #20
 800472c:	af00      	add	r7, sp, #0
 800472e:	6078      	str	r0, [r7, #4]
 8004730:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004732:	2300      	movs	r3, #0
 8004734:	72fb      	strb	r3, [r7, #11]
#if defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U)
  uint32_t ccr_SECM;
#endif
  
  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	2b00      	cmp	r3, #0
 800473a:	d103      	bne.n	8004744 <HAL_DMA_ConfigChannelAttributes+0x1c>
  {
    status = HAL_ERROR;
 800473c:	2301      	movs	r3, #1
 800473e:	72fb      	strb	r3, [r7, #11]
    return status;
 8004740:	7afb      	ldrb	r3, [r7, #11]
 8004742:	e01b      	b.n	800477c <HAL_DMA_ConfigChannelAttributes+0x54>

  /* Check the parameters */
  assert_param(IS_DMA_ATTRIBUTES(ChannelAttributes));

  /* Read CCR register */
  ccr = READ_REG(hdma->Instance->CCR);
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	60fb      	str	r3, [r7, #12]

  /* Apply any requested privilege/non-privilege attributes */
  if ((ChannelAttributes & DMA_CHANNEL_ATTR_PRIV_MASK) != 0U)
 800474c:	683b      	ldr	r3, [r7, #0]
 800474e:	f003 0310 	and.w	r3, r3, #16
 8004752:	2b00      	cmp	r3, #0
 8004754:	d00d      	beq.n	8004772 <HAL_DMA_ConfigChannelAttributes+0x4a>
  {
    if((ChannelAttributes & DMA_CCR_PRIV) != 0U)
 8004756:	683b      	ldr	r3, [r7, #0]
 8004758:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800475c:	2b00      	cmp	r3, #0
 800475e:	d004      	beq.n	800476a <HAL_DMA_ConfigChannelAttributes+0x42>
    {
      SET_BIT(ccr, DMA_CCR_PRIV);
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004766:	60fb      	str	r3, [r7, #12]
 8004768:	e003      	b.n	8004772 <HAL_DMA_ConfigChannelAttributes+0x4a>
    }
    else
    {
      CLEAR_BIT(ccr, DMA_CCR_PRIV);
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8004770:	60fb      	str	r3, [r7, #12]
  }

#endif /* __ARM_FEATURE_CMSE */

  /* Update CCR Register: PRIV, SECM, SCEC, DSEC bits */
  WRITE_REG(hdma->Instance->CCR, ccr);
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	68fa      	ldr	r2, [r7, #12]
 8004778:	601a      	str	r2, [r3, #0]

  return status;
 800477a:	7afb      	ldrb	r3, [r7, #11]
}
 800477c:	4618      	mov	r0, r3
 800477e:	3714      	adds	r7, #20
 8004780:	46bd      	mov	sp, r7
 8004782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004786:	4770      	bx	lr

08004788 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004788:	b480      	push	{r7}
 800478a:	b085      	sub	sp, #20
 800478c:	af00      	add	r7, sp, #0
 800478e:	60f8      	str	r0, [r7, #12]
 8004790:	60b9      	str	r1, [r7, #8]
 8004792:	607a      	str	r2, [r7, #4]
 8004794:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800479a:	68fa      	ldr	r2, [r7, #12]
 800479c:	6d92      	ldr	r2, [r2, #88]	; 0x58
 800479e:	605a      	str	r2, [r3, #4]

  if(hdma->DMAmuxRequestGen != 0U)
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d004      	beq.n	80047b2 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80047ac:	68fa      	ldr	r2, [r7, #12]
 80047ae:	6e52      	ldr	r2, [r2, #100]	; 0x64
 80047b0:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80047b6:	f003 021c 	and.w	r2, r3, #28
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80047be:	2101      	movs	r1, #1
 80047c0:	fa01 f202 	lsl.w	r2, r1, r2
 80047c4:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	683a      	ldr	r2, [r7, #0]
 80047cc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	689b      	ldr	r3, [r3, #8]
 80047d2:	2b10      	cmp	r3, #16
 80047d4:	d108      	bne.n	80047e8 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	687a      	ldr	r2, [r7, #4]
 80047dc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CM0AR = SrcAddress;
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	68ba      	ldr	r2, [r7, #8]
 80047e4:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CM0AR = DstAddress;
  }
}
 80047e6:	e007      	b.n	80047f8 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	68ba      	ldr	r2, [r7, #8]
 80047ee:	609a      	str	r2, [r3, #8]
    hdma->Instance->CM0AR = DstAddress;
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	687a      	ldr	r2, [r7, #4]
 80047f6:	60da      	str	r2, [r3, #12]
}
 80047f8:	bf00      	nop
 80047fa:	3714      	adds	r7, #20
 80047fc:	46bd      	mov	sp, r7
 80047fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004802:	4770      	bx	lr

08004804 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004804:	b480      	push	{r7}
 8004806:	b085      	sub	sp, #20
 8004808:	af00      	add	r7, sp, #0
 800480a:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	461a      	mov	r2, r3
 8004812:	4b17      	ldr	r3, [pc, #92]	; (8004870 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8004814:	429a      	cmp	r2, r3
 8004816:	d80a      	bhi.n	800482e <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800481c:	089b      	lsrs	r3, r3, #2
 800481e:	009b      	lsls	r3, r3, #2
 8004820:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004824:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 8004828:	687a      	ldr	r2, [r7, #4]
 800482a:	6513      	str	r3, [r2, #80]	; 0x50
 800482c:	e007      	b.n	800483e <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel8 + (hdma->ChannelIndex >> 2U));
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004832:	089b      	lsrs	r3, r3, #2
 8004834:	009a      	lsls	r2, r3, #2
 8004836:	4b0f      	ldr	r3, [pc, #60]	; (8004874 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8004838:	4413      	add	r3, r2
 800483a:	687a      	ldr	r2, [r7, #4]
 800483c:	6513      	str	r3, [r2, #80]	; 0x50
  }

  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	b2db      	uxtb	r3, r3
 8004844:	3b08      	subs	r3, #8
 8004846:	4a0c      	ldr	r2, [pc, #48]	; (8004878 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8004848:	fba2 2303 	umull	r2, r3, r2, r3
 800484c:	091b      	lsrs	r3, r3, #4
 800484e:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	4a0a      	ldr	r2, [pc, #40]	; (800487c <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8004854:	655a      	str	r2, [r3, #84]	; 0x54
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	f003 031f 	and.w	r3, r3, #31
 800485c:	2201      	movs	r2, #1
 800485e:	409a      	lsls	r2, r3
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	659a      	str	r2, [r3, #88]	; 0x58
}
 8004864:	bf00      	nop
 8004866:	3714      	adds	r7, #20
 8004868:	46bd      	mov	sp, r7
 800486a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800486e:	4770      	bx	lr
 8004870:	40020407 	.word	0x40020407
 8004874:	40020820 	.word	0x40020820
 8004878:	cccccccd 	.word	0xcccccccd
 800487c:	40020880 	.word	0x40020880

08004880 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004880:	b480      	push	{r7}
 8004882:	b085      	sub	sp, #20
 8004884:	af00      	add	r7, sp, #0
 8004886:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	685b      	ldr	r3, [r3, #4]
 800488c:	b2db      	uxtb	r3, r3
 800488e:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004890:	68fa      	ldr	r2, [r7, #12]
 8004892:	4b0b      	ldr	r3, [pc, #44]	; (80048c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8004894:	4413      	add	r3, r2
 8004896:	009b      	lsls	r3, r3, #2
 8004898:	461a      	mov	r2, r3
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	65da      	str	r2, [r3, #92]	; 0x5c

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	4a08      	ldr	r2, [pc, #32]	; (80048c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80048a2:	661a      	str	r2, [r3, #96]	; 0x60

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	3b01      	subs	r3, #1
 80048a8:	f003 0303 	and.w	r3, r3, #3
 80048ac:	2201      	movs	r2, #1
 80048ae:	409a      	lsls	r2, r3
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	665a      	str	r2, [r3, #100]	; 0x64
}
 80048b4:	bf00      	nop
 80048b6:	3714      	adds	r7, #20
 80048b8:	46bd      	mov	sp, r7
 80048ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048be:	4770      	bx	lr
 80048c0:	1000823f 	.word	0x1000823f
 80048c4:	40020940 	.word	0x40020940

080048c8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80048c8:	b480      	push	{r7}
 80048ca:	b087      	sub	sp, #28
 80048cc:	af00      	add	r7, sp, #0
 80048ce:	6078      	str	r0, [r7, #4]
 80048d0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0U;
 80048d2:	2300      	movs	r3, #0
 80048d4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80048d6:	e158      	b.n	8004b8a <HAL_GPIO_Init+0x2c2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80048d8:	683b      	ldr	r3, [r7, #0]
 80048da:	681a      	ldr	r2, [r3, #0]
 80048dc:	2101      	movs	r1, #1
 80048de:	697b      	ldr	r3, [r7, #20]
 80048e0:	fa01 f303 	lsl.w	r3, r1, r3
 80048e4:	4013      	ands	r3, r2
 80048e6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	f000 814a 	beq.w	8004b84 <HAL_GPIO_Init+0x2bc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80048f0:	683b      	ldr	r3, [r7, #0]
 80048f2:	685b      	ldr	r3, [r3, #4]
 80048f4:	f003 0303 	and.w	r3, r3, #3
 80048f8:	2b01      	cmp	r3, #1
 80048fa:	d005      	beq.n	8004908 <HAL_GPIO_Init+0x40>
 80048fc:	683b      	ldr	r3, [r7, #0]
 80048fe:	685b      	ldr	r3, [r3, #4]
 8004900:	f003 0303 	and.w	r3, r3, #3
 8004904:	2b02      	cmp	r3, #2
 8004906:	d130      	bne.n	800496a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	689b      	ldr	r3, [r3, #8]
 800490c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800490e:	697b      	ldr	r3, [r7, #20]
 8004910:	005b      	lsls	r3, r3, #1
 8004912:	2203      	movs	r2, #3
 8004914:	fa02 f303 	lsl.w	r3, r2, r3
 8004918:	43db      	mvns	r3, r3
 800491a:	693a      	ldr	r2, [r7, #16]
 800491c:	4013      	ands	r3, r2
 800491e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004920:	683b      	ldr	r3, [r7, #0]
 8004922:	68da      	ldr	r2, [r3, #12]
 8004924:	697b      	ldr	r3, [r7, #20]
 8004926:	005b      	lsls	r3, r3, #1
 8004928:	fa02 f303 	lsl.w	r3, r2, r3
 800492c:	693a      	ldr	r2, [r7, #16]
 800492e:	4313      	orrs	r3, r2
 8004930:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	693a      	ldr	r2, [r7, #16]
 8004936:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	685b      	ldr	r3, [r3, #4]
 800493c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800493e:	2201      	movs	r2, #1
 8004940:	697b      	ldr	r3, [r7, #20]
 8004942:	fa02 f303 	lsl.w	r3, r2, r3
 8004946:	43db      	mvns	r3, r3
 8004948:	693a      	ldr	r2, [r7, #16]
 800494a:	4013      	ands	r3, r2
 800494c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800494e:	683b      	ldr	r3, [r7, #0]
 8004950:	685b      	ldr	r3, [r3, #4]
 8004952:	091b      	lsrs	r3, r3, #4
 8004954:	f003 0201 	and.w	r2, r3, #1
 8004958:	697b      	ldr	r3, [r7, #20]
 800495a:	fa02 f303 	lsl.w	r3, r2, r3
 800495e:	693a      	ldr	r2, [r7, #16]
 8004960:	4313      	orrs	r3, r2
 8004962:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	693a      	ldr	r2, [r7, #16]
 8004968:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800496a:	683b      	ldr	r3, [r7, #0]
 800496c:	685b      	ldr	r3, [r3, #4]
 800496e:	f003 0303 	and.w	r3, r3, #3
 8004972:	2b03      	cmp	r3, #3
 8004974:	d017      	beq.n	80049a6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	68db      	ldr	r3, [r3, #12]
 800497a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800497c:	697b      	ldr	r3, [r7, #20]
 800497e:	005b      	lsls	r3, r3, #1
 8004980:	2203      	movs	r2, #3
 8004982:	fa02 f303 	lsl.w	r3, r2, r3
 8004986:	43db      	mvns	r3, r3
 8004988:	693a      	ldr	r2, [r7, #16]
 800498a:	4013      	ands	r3, r2
 800498c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800498e:	683b      	ldr	r3, [r7, #0]
 8004990:	689a      	ldr	r2, [r3, #8]
 8004992:	697b      	ldr	r3, [r7, #20]
 8004994:	005b      	lsls	r3, r3, #1
 8004996:	fa02 f303 	lsl.w	r3, r2, r3
 800499a:	693a      	ldr	r2, [r7, #16]
 800499c:	4313      	orrs	r3, r2
 800499e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	693a      	ldr	r2, [r7, #16]
 80049a4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80049a6:	683b      	ldr	r3, [r7, #0]
 80049a8:	685b      	ldr	r3, [r3, #4]
 80049aa:	f003 0303 	and.w	r3, r3, #3
 80049ae:	2b02      	cmp	r3, #2
 80049b0:	d123      	bne.n	80049fa <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80049b2:	697b      	ldr	r3, [r7, #20]
 80049b4:	08da      	lsrs	r2, r3, #3
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	3208      	adds	r2, #8
 80049ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80049be:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << ((position & 0x07U) * 4U)) ;
 80049c0:	697b      	ldr	r3, [r7, #20]
 80049c2:	f003 0307 	and.w	r3, r3, #7
 80049c6:	009b      	lsls	r3, r3, #2
 80049c8:	220f      	movs	r2, #15
 80049ca:	fa02 f303 	lsl.w	r3, r2, r3
 80049ce:	43db      	mvns	r3, r3
 80049d0:	693a      	ldr	r2, [r7, #16]
 80049d2:	4013      	ands	r3, r2
 80049d4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80049d6:	683b      	ldr	r3, [r7, #0]
 80049d8:	691a      	ldr	r2, [r3, #16]
 80049da:	697b      	ldr	r3, [r7, #20]
 80049dc:	f003 0307 	and.w	r3, r3, #7
 80049e0:	009b      	lsls	r3, r3, #2
 80049e2:	fa02 f303 	lsl.w	r3, r2, r3
 80049e6:	693a      	ldr	r2, [r7, #16]
 80049e8:	4313      	orrs	r3, r2
 80049ea:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80049ec:	697b      	ldr	r3, [r7, #20]
 80049ee:	08da      	lsrs	r2, r3, #3
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	3208      	adds	r2, #8
 80049f4:	6939      	ldr	r1, [r7, #16]
 80049f6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004a00:	697b      	ldr	r3, [r7, #20]
 8004a02:	005b      	lsls	r3, r3, #1
 8004a04:	2203      	movs	r2, #3
 8004a06:	fa02 f303 	lsl.w	r3, r2, r3
 8004a0a:	43db      	mvns	r3, r3
 8004a0c:	693a      	ldr	r2, [r7, #16]
 8004a0e:	4013      	ands	r3, r2
 8004a10:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004a12:	683b      	ldr	r3, [r7, #0]
 8004a14:	685b      	ldr	r3, [r3, #4]
 8004a16:	f003 0203 	and.w	r2, r3, #3
 8004a1a:	697b      	ldr	r3, [r7, #20]
 8004a1c:	005b      	lsls	r3, r3, #1
 8004a1e:	fa02 f303 	lsl.w	r3, r2, r3
 8004a22:	693a      	ldr	r2, [r7, #16]
 8004a24:	4313      	orrs	r3, r2
 8004a26:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	693a      	ldr	r2, [r7, #16]
 8004a2c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004a2e:	683b      	ldr	r3, [r7, #0]
 8004a30:	685b      	ldr	r3, [r3, #4]
 8004a32:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	f000 80a4 	beq.w	8004b84 <HAL_GPIO_Init+0x2bc>
      {
        temp = EXTI->EXTICR[position >> 2U];
 8004a3c:	4a5a      	ldr	r2, [pc, #360]	; (8004ba8 <HAL_GPIO_Init+0x2e0>)
 8004a3e:	697b      	ldr	r3, [r7, #20]
 8004a40:	089b      	lsrs	r3, r3, #2
 8004a42:	3318      	adds	r3, #24
 8004a44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004a48:	613b      	str	r3, [r7, #16]
        temp &= ~((0x0FU) << (8U * (position & 0x03U)));
 8004a4a:	697b      	ldr	r3, [r7, #20]
 8004a4c:	f003 0303 	and.w	r3, r3, #3
 8004a50:	00db      	lsls	r3, r3, #3
 8004a52:	220f      	movs	r2, #15
 8004a54:	fa02 f303 	lsl.w	r3, r2, r3
 8004a58:	43db      	mvns	r3, r3
 8004a5a:	693a      	ldr	r2, [r7, #16]
 8004a5c:	4013      	ands	r3, r2
 8004a5e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	4a52      	ldr	r2, [pc, #328]	; (8004bac <HAL_GPIO_Init+0x2e4>)
 8004a64:	4293      	cmp	r3, r2
 8004a66:	d025      	beq.n	8004ab4 <HAL_GPIO_Init+0x1ec>
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	4a51      	ldr	r2, [pc, #324]	; (8004bb0 <HAL_GPIO_Init+0x2e8>)
 8004a6c:	4293      	cmp	r3, r2
 8004a6e:	d01f      	beq.n	8004ab0 <HAL_GPIO_Init+0x1e8>
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	4a50      	ldr	r2, [pc, #320]	; (8004bb4 <HAL_GPIO_Init+0x2ec>)
 8004a74:	4293      	cmp	r3, r2
 8004a76:	d019      	beq.n	8004aac <HAL_GPIO_Init+0x1e4>
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	4a4f      	ldr	r2, [pc, #316]	; (8004bb8 <HAL_GPIO_Init+0x2f0>)
 8004a7c:	4293      	cmp	r3, r2
 8004a7e:	d013      	beq.n	8004aa8 <HAL_GPIO_Init+0x1e0>
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	4a4e      	ldr	r2, [pc, #312]	; (8004bbc <HAL_GPIO_Init+0x2f4>)
 8004a84:	4293      	cmp	r3, r2
 8004a86:	d00d      	beq.n	8004aa4 <HAL_GPIO_Init+0x1dc>
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	4a4d      	ldr	r2, [pc, #308]	; (8004bc0 <HAL_GPIO_Init+0x2f8>)
 8004a8c:	4293      	cmp	r3, r2
 8004a8e:	d007      	beq.n	8004aa0 <HAL_GPIO_Init+0x1d8>
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	4a4c      	ldr	r2, [pc, #304]	; (8004bc4 <HAL_GPIO_Init+0x2fc>)
 8004a94:	4293      	cmp	r3, r2
 8004a96:	d101      	bne.n	8004a9c <HAL_GPIO_Init+0x1d4>
 8004a98:	2306      	movs	r3, #6
 8004a9a:	e00c      	b.n	8004ab6 <HAL_GPIO_Init+0x1ee>
 8004a9c:	2307      	movs	r3, #7
 8004a9e:	e00a      	b.n	8004ab6 <HAL_GPIO_Init+0x1ee>
 8004aa0:	2305      	movs	r3, #5
 8004aa2:	e008      	b.n	8004ab6 <HAL_GPIO_Init+0x1ee>
 8004aa4:	2304      	movs	r3, #4
 8004aa6:	e006      	b.n	8004ab6 <HAL_GPIO_Init+0x1ee>
 8004aa8:	2303      	movs	r3, #3
 8004aaa:	e004      	b.n	8004ab6 <HAL_GPIO_Init+0x1ee>
 8004aac:	2302      	movs	r3, #2
 8004aae:	e002      	b.n	8004ab6 <HAL_GPIO_Init+0x1ee>
 8004ab0:	2301      	movs	r3, #1
 8004ab2:	e000      	b.n	8004ab6 <HAL_GPIO_Init+0x1ee>
 8004ab4:	2300      	movs	r3, #0
 8004ab6:	697a      	ldr	r2, [r7, #20]
 8004ab8:	f002 0203 	and.w	r2, r2, #3
 8004abc:	00d2      	lsls	r2, r2, #3
 8004abe:	4093      	lsls	r3, r2
 8004ac0:	693a      	ldr	r2, [r7, #16]
 8004ac2:	4313      	orrs	r3, r2
 8004ac4:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2U] = temp;
 8004ac6:	4938      	ldr	r1, [pc, #224]	; (8004ba8 <HAL_GPIO_Init+0x2e0>)
 8004ac8:	697b      	ldr	r3, [r7, #20]
 8004aca:	089b      	lsrs	r3, r3, #2
 8004acc:	3318      	adds	r3, #24
 8004ace:	693a      	ldr	r2, [r7, #16]
 8004ad0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004ad4:	4b34      	ldr	r3, [pc, #208]	; (8004ba8 <HAL_GPIO_Init+0x2e0>)
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	43db      	mvns	r3, r3
 8004ade:	693a      	ldr	r2, [r7, #16]
 8004ae0:	4013      	ands	r3, r2
 8004ae2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004ae4:	683b      	ldr	r3, [r7, #0]
 8004ae6:	685b      	ldr	r3, [r3, #4]
 8004ae8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d003      	beq.n	8004af8 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8004af0:	693a      	ldr	r2, [r7, #16]
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	4313      	orrs	r3, r2
 8004af6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004af8:	4a2b      	ldr	r2, [pc, #172]	; (8004ba8 <HAL_GPIO_Init+0x2e0>)
 8004afa:	693b      	ldr	r3, [r7, #16]
 8004afc:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8004afe:	4b2a      	ldr	r3, [pc, #168]	; (8004ba8 <HAL_GPIO_Init+0x2e0>)
 8004b00:	685b      	ldr	r3, [r3, #4]
 8004b02:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	43db      	mvns	r3, r3
 8004b08:	693a      	ldr	r2, [r7, #16]
 8004b0a:	4013      	ands	r3, r2
 8004b0c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004b0e:	683b      	ldr	r3, [r7, #0]
 8004b10:	685b      	ldr	r3, [r3, #4]
 8004b12:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d003      	beq.n	8004b22 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8004b1a:	693a      	ldr	r2, [r7, #16]
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	4313      	orrs	r3, r2
 8004b20:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004b22:	4a21      	ldr	r2, [pc, #132]	; (8004ba8 <HAL_GPIO_Init+0x2e0>)
 8004b24:	693b      	ldr	r3, [r7, #16]
 8004b26:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8004b28:	4b1f      	ldr	r3, [pc, #124]	; (8004ba8 <HAL_GPIO_Init+0x2e0>)
 8004b2a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004b2e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	43db      	mvns	r3, r3
 8004b34:	693a      	ldr	r2, [r7, #16]
 8004b36:	4013      	ands	r3, r2
 8004b38:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004b3a:	683b      	ldr	r3, [r7, #0]
 8004b3c:	685b      	ldr	r3, [r3, #4]
 8004b3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d003      	beq.n	8004b4e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8004b46:	693a      	ldr	r2, [r7, #16]
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	4313      	orrs	r3, r2
 8004b4c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004b4e:	4a16      	ldr	r2, [pc, #88]	; (8004ba8 <HAL_GPIO_Init+0x2e0>)
 8004b50:	693b      	ldr	r3, [r7, #16]
 8004b52:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        temp = EXTI->IMR1;
 8004b56:	4b14      	ldr	r3, [pc, #80]	; (8004ba8 <HAL_GPIO_Init+0x2e0>)
 8004b58:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004b5c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	43db      	mvns	r3, r3
 8004b62:	693a      	ldr	r2, [r7, #16]
 8004b64:	4013      	ands	r3, r2
 8004b66:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004b68:	683b      	ldr	r3, [r7, #0]
 8004b6a:	685b      	ldr	r3, [r3, #4]
 8004b6c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d003      	beq.n	8004b7c <HAL_GPIO_Init+0x2b4>
        {
          temp |= iocurrent;
 8004b74:	693a      	ldr	r2, [r7, #16]
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	4313      	orrs	r3, r2
 8004b7a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004b7c:	4a0a      	ldr	r2, [pc, #40]	; (8004ba8 <HAL_GPIO_Init+0x2e0>)
 8004b7e:	693b      	ldr	r3, [r7, #16]
 8004b80:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
      }
    }

    position++;
 8004b84:	697b      	ldr	r3, [r7, #20]
 8004b86:	3301      	adds	r3, #1
 8004b88:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8004b8a:	683b      	ldr	r3, [r7, #0]
 8004b8c:	681a      	ldr	r2, [r3, #0]
 8004b8e:	697b      	ldr	r3, [r7, #20]
 8004b90:	fa22 f303 	lsr.w	r3, r2, r3
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	f47f ae9f 	bne.w	80048d8 <HAL_GPIO_Init+0x10>
  }
}
 8004b9a:	bf00      	nop
 8004b9c:	bf00      	nop
 8004b9e:	371c      	adds	r7, #28
 8004ba0:	46bd      	mov	sp, r7
 8004ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba6:	4770      	bx	lr
 8004ba8:	4002f400 	.word	0x4002f400
 8004bac:	42020000 	.word	0x42020000
 8004bb0:	42020400 	.word	0x42020400
 8004bb4:	42020800 	.word	0x42020800
 8004bb8:	42020c00 	.word	0x42020c00
 8004bbc:	42021000 	.word	0x42021000
 8004bc0:	42021400 	.word	0x42021400
 8004bc4:	42021800 	.word	0x42021800

08004bc8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004bc8:	b480      	push	{r7}
 8004bca:	b083      	sub	sp, #12
 8004bcc:	af00      	add	r7, sp, #0
 8004bce:	6078      	str	r0, [r7, #4]
 8004bd0:	460b      	mov	r3, r1
 8004bd2:	807b      	strh	r3, [r7, #2]
 8004bd4:	4613      	mov	r3, r2
 8004bd6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004bd8:	787b      	ldrb	r3, [r7, #1]
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d003      	beq.n	8004be6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004bde:	887a      	ldrh	r2, [r7, #2]
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004be4:	e002      	b.n	8004bec <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004be6:	887a      	ldrh	r2, [r7, #2]
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004bec:	bf00      	nop
 8004bee:	370c      	adds	r7, #12
 8004bf0:	46bd      	mov	sp, r7
 8004bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf6:	4770      	bx	lr

08004bf8 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004bf8:	b480      	push	{r7}
 8004bfa:	b085      	sub	sp, #20
 8004bfc:	af00      	add	r7, sp, #0
 8004bfe:	6078      	str	r0, [r7, #4]
 8004c00:	460b      	mov	r3, r1
 8004c02:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	695b      	ldr	r3, [r3, #20]
 8004c08:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004c0a:	887a      	ldrh	r2, [r7, #2]
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	4013      	ands	r3, r2
 8004c10:	041a      	lsls	r2, r3, #16
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	43d9      	mvns	r1, r3
 8004c16:	887b      	ldrh	r3, [r7, #2]
 8004c18:	400b      	ands	r3, r1
 8004c1a:	431a      	orrs	r2, r3
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	619a      	str	r2, [r3, #24]
}
 8004c20:	bf00      	nop
 8004c22:	3714      	adds	r7, #20
 8004c24:	46bd      	mov	sp, r7
 8004c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c2a:	4770      	bx	lr

08004c2c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004c2c:	b580      	push	{r7, lr}
 8004c2e:	b082      	sub	sp, #8
 8004c30:	af00      	add	r7, sp, #0
 8004c32:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d101      	bne.n	8004c3e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004c3a:	2301      	movs	r3, #1
 8004c3c:	e081      	b.n	8004d42 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004c44:	b2db      	uxtb	r3, r3
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d106      	bne.n	8004c58 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	2200      	movs	r2, #0
 8004c4e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004c52:	6878      	ldr	r0, [r7, #4]
 8004c54:	f7fc fe3e 	bl	80018d4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	2224      	movs	r2, #36	; 0x24
 8004c5c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	681a      	ldr	r2, [r3, #0]
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	f022 0201 	bic.w	r2, r2, #1
 8004c6e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	685a      	ldr	r2, [r3, #4]
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004c7c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	689a      	ldr	r2, [r3, #8]
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004c8c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	68db      	ldr	r3, [r3, #12]
 8004c92:	2b01      	cmp	r3, #1
 8004c94:	d107      	bne.n	8004ca6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	689a      	ldr	r2, [r3, #8]
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004ca2:	609a      	str	r2, [r3, #8]
 8004ca4:	e006      	b.n	8004cb4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	689a      	ldr	r2, [r3, #8]
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8004cb2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	68db      	ldr	r3, [r3, #12]
 8004cb8:	2b02      	cmp	r3, #2
 8004cba:	d104      	bne.n	8004cc6 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004cc4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	685b      	ldr	r3, [r3, #4]
 8004ccc:	687a      	ldr	r2, [r7, #4]
 8004cce:	6812      	ldr	r2, [r2, #0]
 8004cd0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004cd4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004cd8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	68da      	ldr	r2, [r3, #12]
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004ce8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	691a      	ldr	r2, [r3, #16]
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	695b      	ldr	r3, [r3, #20]
 8004cf2:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	699b      	ldr	r3, [r3, #24]
 8004cfa:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	430a      	orrs	r2, r1
 8004d02:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	69d9      	ldr	r1, [r3, #28]
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	6a1a      	ldr	r2, [r3, #32]
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	430a      	orrs	r2, r1
 8004d12:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	681a      	ldr	r2, [r3, #0]
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	f042 0201 	orr.w	r2, r2, #1
 8004d22:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	2200      	movs	r2, #0
 8004d28:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	2220      	movs	r2, #32
 8004d2e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	2200      	movs	r2, #0
 8004d36:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	2200      	movs	r2, #0
 8004d3c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8004d40:	2300      	movs	r3, #0
}
 8004d42:	4618      	mov	r0, r3
 8004d44:	3708      	adds	r7, #8
 8004d46:	46bd      	mov	sp, r7
 8004d48:	bd80      	pop	{r7, pc}

08004d4a <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004d4a:	b480      	push	{r7}
 8004d4c:	b083      	sub	sp, #12
 8004d4e:	af00      	add	r7, sp, #0
 8004d50:	6078      	str	r0, [r7, #4]
 8004d52:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004d5a:	b2db      	uxtb	r3, r3
 8004d5c:	2b20      	cmp	r3, #32
 8004d5e:	d138      	bne.n	8004dd2 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004d66:	2b01      	cmp	r3, #1
 8004d68:	d101      	bne.n	8004d6e <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004d6a:	2302      	movs	r3, #2
 8004d6c:	e032      	b.n	8004dd4 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	2201      	movs	r2, #1
 8004d72:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	2224      	movs	r2, #36	; 0x24
 8004d7a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	681a      	ldr	r2, [r3, #0]
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	f022 0201 	bic.w	r2, r2, #1
 8004d8c:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	681a      	ldr	r2, [r3, #0]
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004d9c:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	6819      	ldr	r1, [r3, #0]
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	683a      	ldr	r2, [r7, #0]
 8004daa:	430a      	orrs	r2, r1
 8004dac:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	681a      	ldr	r2, [r3, #0]
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	f042 0201 	orr.w	r2, r2, #1
 8004dbc:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	2220      	movs	r2, #32
 8004dc2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	2200      	movs	r2, #0
 8004dca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004dce:	2300      	movs	r3, #0
 8004dd0:	e000      	b.n	8004dd4 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004dd2:	2302      	movs	r3, #2
  }
}
 8004dd4:	4618      	mov	r0, r3
 8004dd6:	370c      	adds	r7, #12
 8004dd8:	46bd      	mov	sp, r7
 8004dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dde:	4770      	bx	lr

08004de0 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004de0:	b480      	push	{r7}
 8004de2:	b085      	sub	sp, #20
 8004de4:	af00      	add	r7, sp, #0
 8004de6:	6078      	str	r0, [r7, #4]
 8004de8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004df0:	b2db      	uxtb	r3, r3
 8004df2:	2b20      	cmp	r3, #32
 8004df4:	d139      	bne.n	8004e6a <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004dfc:	2b01      	cmp	r3, #1
 8004dfe:	d101      	bne.n	8004e04 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004e00:	2302      	movs	r3, #2
 8004e02:	e033      	b.n	8004e6c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	2201      	movs	r2, #1
 8004e08:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	2224      	movs	r2, #36	; 0x24
 8004e10:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	681a      	ldr	r2, [r3, #0]
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	f022 0201 	bic.w	r2, r2, #1
 8004e22:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004e32:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004e34:	683b      	ldr	r3, [r7, #0]
 8004e36:	021b      	lsls	r3, r3, #8
 8004e38:	68fa      	ldr	r2, [r7, #12]
 8004e3a:	4313      	orrs	r3, r2
 8004e3c:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	68fa      	ldr	r2, [r7, #12]
 8004e44:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	681a      	ldr	r2, [r3, #0]
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	f042 0201 	orr.w	r2, r2, #1
 8004e54:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	2220      	movs	r2, #32
 8004e5a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	2200      	movs	r2, #0
 8004e62:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004e66:	2300      	movs	r3, #0
 8004e68:	e000      	b.n	8004e6c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004e6a:	2302      	movs	r3, #2
  }
}
 8004e6c:	4618      	mov	r0, r3
 8004e6e:	3714      	adds	r7, #20
 8004e70:	46bd      	mov	sp, r7
 8004e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e76:	4770      	bx	lr

08004e78 <HAL_ICACHE_ConfigAssociativityMode>:
  *            @arg ICACHE_1WAY   1-way cache (direct mapped cache)
  *            @arg ICACHE_2WAYS  2-ways set associative cache (default)
  * @retval HAL status (HAL_OK/HAL_ERROR)
  */
HAL_StatusTypeDef HAL_ICACHE_ConfigAssociativityMode(uint32_t AssociativityMode)
{
 8004e78:	b480      	push	{r7}
 8004e7a:	b085      	sub	sp, #20
 8004e7c:	af00      	add	r7, sp, #0
 8004e7e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004e80:	2300      	movs	r3, #0
 8004e82:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_ICACHE_ASSOCIATIVITY_MODE(AssociativityMode));

  /* Check cache is not enabled */
  if (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 8004e84:	4b0b      	ldr	r3, [pc, #44]	; (8004eb4 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	f003 0301 	and.w	r3, r3, #1
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d002      	beq.n	8004e96 <HAL_ICACHE_ConfigAssociativityMode+0x1e>
  {
    status = HAL_ERROR;
 8004e90:	2301      	movs	r3, #1
 8004e92:	73fb      	strb	r3, [r7, #15]
 8004e94:	e007      	b.n	8004ea6 <HAL_ICACHE_ConfigAssociativityMode+0x2e>
  }
  else
  {
    MODIFY_REG(ICACHE->CR, ICACHE_CR_WAYSEL, AssociativityMode);
 8004e96:	4b07      	ldr	r3, [pc, #28]	; (8004eb4 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	f023 0204 	bic.w	r2, r3, #4
 8004e9e:	4905      	ldr	r1, [pc, #20]	; (8004eb4 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	4313      	orrs	r3, r2
 8004ea4:	600b      	str	r3, [r1, #0]
  }

  return status;
 8004ea6:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ea8:	4618      	mov	r0, r3
 8004eaa:	3714      	adds	r7, #20
 8004eac:	46bd      	mov	sp, r7
 8004eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb2:	4770      	bx	lr
 8004eb4:	40030400 	.word	0x40030400

08004eb8 <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 8004eb8:	b480      	push	{r7}
 8004eba:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 8004ebc:	4b05      	ldr	r3, [pc, #20]	; (8004ed4 <HAL_ICACHE_Enable+0x1c>)
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	4a04      	ldr	r2, [pc, #16]	; (8004ed4 <HAL_ICACHE_Enable+0x1c>)
 8004ec2:	f043 0301 	orr.w	r3, r3, #1
 8004ec6:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8004ec8:	2300      	movs	r3, #0
}
 8004eca:	4618      	mov	r0, r3
 8004ecc:	46bd      	mov	sp, r7
 8004ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed2:	4770      	bx	lr
 8004ed4:	40030400 	.word	0x40030400

08004ed8 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004ed8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004eda:	b08b      	sub	sp, #44	; 0x2c
 8004edc:	af06      	add	r7, sp, #24
 8004ede:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d101      	bne.n	8004eea <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004ee6:	2301      	movs	r3, #1
 8004ee8:	e0cb      	b.n	8005082 <HAL_PCD_Init+0x1aa>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8004ef0:	b2db      	uxtb	r3, r3
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d106      	bne.n	8004f04 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	2200      	movs	r2, #0
 8004efa:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8004efe:	6878      	ldr	r0, [r7, #4]
 8004f00:	f7fd f89c 	bl	800203c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	2203      	movs	r2, #3
 8004f08:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	4618      	mov	r0, r3
 8004f12:	f006 f859 	bl	800afc8 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004f16:	2300      	movs	r3, #0
 8004f18:	73fb      	strb	r3, [r7, #15]
 8004f1a:	e040      	b.n	8004f9e <HAL_PCD_Init+0xc6>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004f1c:	7bfb      	ldrb	r3, [r7, #15]
 8004f1e:	6879      	ldr	r1, [r7, #4]
 8004f20:	1c5a      	adds	r2, r3, #1
 8004f22:	4613      	mov	r3, r2
 8004f24:	009b      	lsls	r3, r3, #2
 8004f26:	4413      	add	r3, r2
 8004f28:	00db      	lsls	r3, r3, #3
 8004f2a:	440b      	add	r3, r1
 8004f2c:	3301      	adds	r3, #1
 8004f2e:	2201      	movs	r2, #1
 8004f30:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004f32:	7bfb      	ldrb	r3, [r7, #15]
 8004f34:	6879      	ldr	r1, [r7, #4]
 8004f36:	1c5a      	adds	r2, r3, #1
 8004f38:	4613      	mov	r3, r2
 8004f3a:	009b      	lsls	r3, r3, #2
 8004f3c:	4413      	add	r3, r2
 8004f3e:	00db      	lsls	r3, r3, #3
 8004f40:	440b      	add	r3, r1
 8004f42:	7bfa      	ldrb	r2, [r7, #15]
 8004f44:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004f46:	7bfb      	ldrb	r3, [r7, #15]
 8004f48:	6879      	ldr	r1, [r7, #4]
 8004f4a:	1c5a      	adds	r2, r3, #1
 8004f4c:	4613      	mov	r3, r2
 8004f4e:	009b      	lsls	r3, r3, #2
 8004f50:	4413      	add	r3, r2
 8004f52:	00db      	lsls	r3, r3, #3
 8004f54:	440b      	add	r3, r1
 8004f56:	3303      	adds	r3, #3
 8004f58:	2200      	movs	r2, #0
 8004f5a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004f5c:	7bfa      	ldrb	r2, [r7, #15]
 8004f5e:	6879      	ldr	r1, [r7, #4]
 8004f60:	4613      	mov	r3, r2
 8004f62:	009b      	lsls	r3, r3, #2
 8004f64:	4413      	add	r3, r2
 8004f66:	00db      	lsls	r3, r3, #3
 8004f68:	440b      	add	r3, r1
 8004f6a:	3338      	adds	r3, #56	; 0x38
 8004f6c:	2200      	movs	r2, #0
 8004f6e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004f70:	7bfa      	ldrb	r2, [r7, #15]
 8004f72:	6879      	ldr	r1, [r7, #4]
 8004f74:	4613      	mov	r3, r2
 8004f76:	009b      	lsls	r3, r3, #2
 8004f78:	4413      	add	r3, r2
 8004f7a:	00db      	lsls	r3, r3, #3
 8004f7c:	440b      	add	r3, r1
 8004f7e:	333c      	adds	r3, #60	; 0x3c
 8004f80:	2200      	movs	r2, #0
 8004f82:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004f84:	7bfa      	ldrb	r2, [r7, #15]
 8004f86:	6879      	ldr	r1, [r7, #4]
 8004f88:	4613      	mov	r3, r2
 8004f8a:	009b      	lsls	r3, r3, #2
 8004f8c:	4413      	add	r3, r2
 8004f8e:	00db      	lsls	r3, r3, #3
 8004f90:	440b      	add	r3, r1
 8004f92:	3340      	adds	r3, #64	; 0x40
 8004f94:	2200      	movs	r2, #0
 8004f96:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004f98:	7bfb      	ldrb	r3, [r7, #15]
 8004f9a:	3301      	adds	r3, #1
 8004f9c:	73fb      	strb	r3, [r7, #15]
 8004f9e:	7bfa      	ldrb	r2, [r7, #15]
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	685b      	ldr	r3, [r3, #4]
 8004fa4:	429a      	cmp	r2, r3
 8004fa6:	d3b9      	bcc.n	8004f1c <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004fa8:	2300      	movs	r3, #0
 8004faa:	73fb      	strb	r3, [r7, #15]
 8004fac:	e044      	b.n	8005038 <HAL_PCD_Init+0x160>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004fae:	7bfa      	ldrb	r2, [r7, #15]
 8004fb0:	6879      	ldr	r1, [r7, #4]
 8004fb2:	4613      	mov	r3, r2
 8004fb4:	009b      	lsls	r3, r3, #2
 8004fb6:	4413      	add	r3, r2
 8004fb8:	00db      	lsls	r3, r3, #3
 8004fba:	440b      	add	r3, r1
 8004fbc:	f203 1369 	addw	r3, r3, #361	; 0x169
 8004fc0:	2200      	movs	r2, #0
 8004fc2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004fc4:	7bfa      	ldrb	r2, [r7, #15]
 8004fc6:	6879      	ldr	r1, [r7, #4]
 8004fc8:	4613      	mov	r3, r2
 8004fca:	009b      	lsls	r3, r3, #2
 8004fcc:	4413      	add	r3, r2
 8004fce:	00db      	lsls	r3, r3, #3
 8004fd0:	440b      	add	r3, r1
 8004fd2:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004fd6:	7bfa      	ldrb	r2, [r7, #15]
 8004fd8:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004fda:	7bfa      	ldrb	r2, [r7, #15]
 8004fdc:	6879      	ldr	r1, [r7, #4]
 8004fde:	4613      	mov	r3, r2
 8004fe0:	009b      	lsls	r3, r3, #2
 8004fe2:	4413      	add	r3, r2
 8004fe4:	00db      	lsls	r3, r3, #3
 8004fe6:	440b      	add	r3, r1
 8004fe8:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8004fec:	2200      	movs	r2, #0
 8004fee:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004ff0:	7bfa      	ldrb	r2, [r7, #15]
 8004ff2:	6879      	ldr	r1, [r7, #4]
 8004ff4:	4613      	mov	r3, r2
 8004ff6:	009b      	lsls	r3, r3, #2
 8004ff8:	4413      	add	r3, r2
 8004ffa:	00db      	lsls	r3, r3, #3
 8004ffc:	440b      	add	r3, r1
 8004ffe:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8005002:	2200      	movs	r2, #0
 8005004:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8005006:	7bfa      	ldrb	r2, [r7, #15]
 8005008:	6879      	ldr	r1, [r7, #4]
 800500a:	4613      	mov	r3, r2
 800500c:	009b      	lsls	r3, r3, #2
 800500e:	4413      	add	r3, r2
 8005010:	00db      	lsls	r3, r3, #3
 8005012:	440b      	add	r3, r1
 8005014:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8005018:	2200      	movs	r2, #0
 800501a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800501c:	7bfa      	ldrb	r2, [r7, #15]
 800501e:	6879      	ldr	r1, [r7, #4]
 8005020:	4613      	mov	r3, r2
 8005022:	009b      	lsls	r3, r3, #2
 8005024:	4413      	add	r3, r2
 8005026:	00db      	lsls	r3, r3, #3
 8005028:	440b      	add	r3, r1
 800502a:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 800502e:	2200      	movs	r2, #0
 8005030:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005032:	7bfb      	ldrb	r3, [r7, #15]
 8005034:	3301      	adds	r3, #1
 8005036:	73fb      	strb	r3, [r7, #15]
 8005038:	7bfa      	ldrb	r2, [r7, #15]
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	685b      	ldr	r3, [r3, #4]
 800503e:	429a      	cmp	r2, r3
 8005040:	d3b5      	bcc.n	8004fae <HAL_PCD_Init+0xd6>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	603b      	str	r3, [r7, #0]
 8005048:	687e      	ldr	r6, [r7, #4]
 800504a:	466d      	mov	r5, sp
 800504c:	f106 0410 	add.w	r4, r6, #16
 8005050:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005052:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005054:	6823      	ldr	r3, [r4, #0]
 8005056:	602b      	str	r3, [r5, #0]
 8005058:	1d33      	adds	r3, r6, #4
 800505a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800505c:	6838      	ldr	r0, [r7, #0]
 800505e:	f005 ffce 	bl	800affe <USB_DevInit>

  hpcd->USB_Address = 0U;
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	2200      	movs	r2, #0
 8005066:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	2201      	movs	r2, #1
 800506e:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	69db      	ldr	r3, [r3, #28]
 8005076:	2b01      	cmp	r3, #1
 8005078:	d102      	bne.n	8005080 <HAL_PCD_Init+0x1a8>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800507a:	6878      	ldr	r0, [r7, #4]
 800507c:	f000 f805 	bl	800508a <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8005080:	2300      	movs	r3, #0
}
 8005082:	4618      	mov	r0, r3
 8005084:	3714      	adds	r7, #20
 8005086:	46bd      	mov	sp, r7
 8005088:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800508a <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800508a:	b480      	push	{r7}
 800508c:	b085      	sub	sp, #20
 800508e:	af00      	add	r7, sp, #0
 8005090:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	2201      	movs	r2, #1
 800509c:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
  hpcd->LPM_State = LPM_L0;
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	2200      	movs	r2, #0
 80050a4:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80050ae:	b29b      	uxth	r3, r3
 80050b0:	f043 0301 	orr.w	r3, r3, #1
 80050b4:	b29a      	uxth	r2, r3
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80050c2:	b29b      	uxth	r3, r3
 80050c4:	f043 0302 	orr.w	r3, r3, #2
 80050c8:	b29a      	uxth	r2, r3
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 80050d0:	2300      	movs	r3, #0
}
 80050d2:	4618      	mov	r0, r3
 80050d4:	3714      	adds	r7, #20
 80050d6:	46bd      	mov	sp, r7
 80050d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050dc:	4770      	bx	lr
	...

080050e0 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80050e0:	b480      	push	{r7}
 80050e2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80050e4:	4b05      	ldr	r3, [pc, #20]	; (80050fc <HAL_PWR_EnableBkUpAccess+0x1c>)
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	4a04      	ldr	r2, [pc, #16]	; (80050fc <HAL_PWR_EnableBkUpAccess+0x1c>)
 80050ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80050ee:	6013      	str	r3, [r2, #0]
}
 80050f0:	bf00      	nop
 80050f2:	46bd      	mov	sp, r7
 80050f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f8:	4770      	bx	lr
 80050fa:	bf00      	nop
 80050fc:	40007000 	.word	0x40007000

08005100 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE0, PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8005100:	b480      	push	{r7}
 8005102:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8005104:	4b04      	ldr	r3, [pc, #16]	; (8005118 <HAL_PWREx_GetVoltageRange+0x18>)
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 800510c:	4618      	mov	r0, r3
 800510e:	46bd      	mov	sp, r7
 8005110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005114:	4770      	bx	lr
 8005116:	bf00      	nop
 8005118:	40007000 	.word	0x40007000

0800511c <HAL_PWREx_ControlVoltageScaling>:
  * @note  The VOS shall NOT be changed in LP Mode of if LP mode is asked.
  * @note  The function shall not be called in Low-power run mode (meaningless and misleading).
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800511c:	b580      	push	{r7, lr}
 800511e:	b084      	sub	sp, #16
 8005120:	af00      	add	r7, sp, #0
 8005122:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  uint32_t vos_old = READ_BIT(PWR->CR1, PWR_CR1_VOS);
 8005124:	4b27      	ldr	r3, [pc, #156]	; (80051c4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800512c:	60bb      	str	r3, [r7, #8]

  /* VOS shall not be changed in LP Mode            */
  /* or if LP Mode is asked but not yet established */
  if (HAL_PWREx_SMPS_GetEffectiveMode() == PWR_SMPS_LOW_POWER)
 800512e:	f000 f861 	bl	80051f4 <HAL_PWREx_SMPS_GetEffectiveMode>
 8005132:	4603      	mov	r3, r0
 8005134:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005138:	d101      	bne.n	800513e <HAL_PWREx_ControlVoltageScaling+0x22>
  {
    return HAL_ERROR;
 800513a:	2301      	movs	r3, #1
 800513c:	e03e      	b.n	80051bc <HAL_PWREx_ControlVoltageScaling+0xa0>
  }
  if (READ_BIT(PWR->CR4, PWR_CR4_SMPSLPEN) == PWR_CR4_SMPSLPEN)
 800513e:	4b21      	ldr	r3, [pc, #132]	; (80051c4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8005140:	68db      	ldr	r3, [r3, #12]
 8005142:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005146:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800514a:	d101      	bne.n	8005150 <HAL_PWREx_ControlVoltageScaling+0x34>
  {
    return HAL_ERROR;
 800514c:	2301      	movs	r3, #1
 800514e:	e035      	b.n	80051bc <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 8005150:	68ba      	ldr	r2, [r7, #8]
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	429a      	cmp	r2, r3
 8005156:	d101      	bne.n	800515c <HAL_PWREx_ControlVoltageScaling+0x40>
  {
    return HAL_OK;
 8005158:	2300      	movs	r3, #0
 800515a:	e02f      	b.n	80051bc <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 800515c:	4b19      	ldr	r3, [pc, #100]	; (80051c4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8005164:	4917      	ldr	r1, [pc, #92]	; (80051c4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	4313      	orrs	r3, r2
 800516a:	600b      	str	r3, [r1, #0]

  /* Wait until VOSF is cleared */
  /* and at least one iteration loop */
  wait_loop_index = ((PWR_VOSF_SETTING_DELAY_VALUE * (SystemCoreClock / 100000U)) / 10U) + 1U;
 800516c:	4b16      	ldr	r3, [pc, #88]	; (80051c8 <HAL_PWREx_ControlVoltageScaling+0xac>)
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	095b      	lsrs	r3, r3, #5
 8005172:	4a16      	ldr	r2, [pc, #88]	; (80051cc <HAL_PWREx_ControlVoltageScaling+0xb0>)
 8005174:	fba2 2303 	umull	r2, r3, r2, r3
 8005178:	09db      	lsrs	r3, r3, #7
 800517a:	2232      	movs	r2, #50	; 0x32
 800517c:	fb02 f303 	mul.w	r3, r2, r3
 8005180:	4a13      	ldr	r2, [pc, #76]	; (80051d0 <HAL_PWREx_ControlVoltageScaling+0xb4>)
 8005182:	fba2 2303 	umull	r2, r3, r2, r3
 8005186:	08db      	lsrs	r3, r3, #3
 8005188:	3301      	adds	r3, #1
 800518a:	60fb      	str	r3, [r7, #12]

  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800518c:	e002      	b.n	8005194 <HAL_PWREx_ControlVoltageScaling+0x78>
  {
    wait_loop_index--;
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	3b01      	subs	r3, #1
 8005192:	60fb      	str	r3, [r7, #12]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005194:	4b0b      	ldr	r3, [pc, #44]	; (80051c4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8005196:	695b      	ldr	r3, [r3, #20]
 8005198:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800519c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80051a0:	d102      	bne.n	80051a8 <HAL_PWREx_ControlVoltageScaling+0x8c>
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d1f2      	bne.n	800518e <HAL_PWREx_ControlVoltageScaling+0x72>
  }

  if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80051a8:	4b06      	ldr	r3, [pc, #24]	; (80051c4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80051aa:	695b      	ldr	r3, [r3, #20]
 80051ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80051b0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80051b4:	d101      	bne.n	80051ba <HAL_PWREx_ControlVoltageScaling+0x9e>
  {
    return HAL_TIMEOUT;
 80051b6:	2303      	movs	r3, #3
 80051b8:	e000      	b.n	80051bc <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  return HAL_OK;
 80051ba:	2300      	movs	r3, #0
}
 80051bc:	4618      	mov	r0, r3
 80051be:	3710      	adds	r7, #16
 80051c0:	46bd      	mov	sp, r7
 80051c2:	bd80      	pop	{r7, pc}
 80051c4:	40007000 	.word	0x40007000
 80051c8:	20000004 	.word	0x20000004
 80051cc:	0a7c5ac5 	.word	0x0a7c5ac5
 80051d0:	cccccccd 	.word	0xcccccccd

080051d4 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 80051d4:	b480      	push	{r7}
 80051d6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 80051d8:	4b05      	ldr	r3, [pc, #20]	; (80051f0 <HAL_PWREx_EnableVddIO2+0x1c>)
 80051da:	685b      	ldr	r3, [r3, #4]
 80051dc:	4a04      	ldr	r2, [pc, #16]	; (80051f0 <HAL_PWREx_EnableVddIO2+0x1c>)
 80051de:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80051e2:	6053      	str	r3, [r2, #4]
}
 80051e4:	bf00      	nop
 80051e6:	46bd      	mov	sp, r7
 80051e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ec:	4770      	bx	lr
 80051ee:	bf00      	nop
 80051f0:	40007000 	.word	0x40007000

080051f4 <HAL_PWREx_SMPS_GetEffectiveMode>:
  *         @arg @ref PWR_SMPS_HIGH_POWER    SMPS step down converter in high-power mode (default)
  *         @arg @ref PWR_SMPS_LOW_POWER     SMPS step down converter in low-power mode
  *         @arg @ref PWR_SMPS_BYPASS        SMPS step down converter in bypass mode
  */
uint32_t HAL_PWREx_SMPS_GetEffectiveMode(void)
{
 80051f4:	b480      	push	{r7}
 80051f6:	b083      	sub	sp, #12
 80051f8:	af00      	add	r7, sp, #0
  uint32_t mode;
  uint32_t pwr_sr1;

  pwr_sr1 = READ_REG(PWR->SR1);
 80051fa:	4b0f      	ldr	r3, [pc, #60]	; (8005238 <HAL_PWREx_SMPS_GetEffectiveMode+0x44>)
 80051fc:	691b      	ldr	r3, [r3, #16]
 80051fe:	603b      	str	r3, [r7, #0]
  if (READ_BIT(pwr_sr1, PWR_SR1_SMPSBYPRDY) != 0U)
 8005200:	683b      	ldr	r3, [r7, #0]
 8005202:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005206:	2b00      	cmp	r3, #0
 8005208:	d003      	beq.n	8005212 <HAL_PWREx_SMPS_GetEffectiveMode+0x1e>
  {
    mode = PWR_SMPS_BYPASS;
 800520a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800520e:	607b      	str	r3, [r7, #4]
 8005210:	e00a      	b.n	8005228 <HAL_PWREx_SMPS_GetEffectiveMode+0x34>
  }
  else if (READ_BIT(pwr_sr1, PWR_SR1_SMPSHPRDY) == 0U)
 8005212:	683b      	ldr	r3, [r7, #0]
 8005214:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005218:	2b00      	cmp	r3, #0
 800521a:	d103      	bne.n	8005224 <HAL_PWREx_SMPS_GetEffectiveMode+0x30>
  {
    mode = PWR_SMPS_LOW_POWER;
 800521c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005220:	607b      	str	r3, [r7, #4]
 8005222:	e001      	b.n	8005228 <HAL_PWREx_SMPS_GetEffectiveMode+0x34>
  }
  else
  {
    mode = PWR_SMPS_HIGH_POWER;
 8005224:	2300      	movs	r3, #0
 8005226:	607b      	str	r3, [r7, #4]
  }

  return mode;
 8005228:	687b      	ldr	r3, [r7, #4]
}
 800522a:	4618      	mov	r0, r3
 800522c:	370c      	adds	r7, #12
 800522e:	46bd      	mov	sp, r7
 8005230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005234:	4770      	bx	lr
 8005236:	bf00      	nop
 8005238:	40007000 	.word	0x40007000

0800523c <HAL_RCC_OscConfig>:
  *         and is updated by this function in case of simple MSI range update when MSI
  *         used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800523c:	b580      	push	{r7, lr}
 800523e:	b088      	sub	sp, #32
 8005240:	af00      	add	r7, sp, #0
 8005242:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	2b00      	cmp	r3, #0
 8005248:	d102      	bne.n	8005250 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800524a:	2301      	movs	r3, #1
 800524c:	f000 bcc2 	b.w	8005bd4 <HAL_RCC_OscConfig+0x998>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005250:	4b99      	ldr	r3, [pc, #612]	; (80054b8 <HAL_RCC_OscConfig+0x27c>)
 8005252:	689b      	ldr	r3, [r3, #8]
 8005254:	f003 030c 	and.w	r3, r3, #12
 8005258:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800525a:	4b97      	ldr	r3, [pc, #604]	; (80054b8 <HAL_RCC_OscConfig+0x27c>)
 800525c:	68db      	ldr	r3, [r3, #12]
 800525e:	f003 0303 	and.w	r3, r3, #3
 8005262:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	f003 0310 	and.w	r3, r3, #16
 800526c:	2b00      	cmp	r3, #0
 800526e:	f000 80e9 	beq.w	8005444 <HAL_RCC_OscConfig+0x208>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8005272:	69bb      	ldr	r3, [r7, #24]
 8005274:	2b00      	cmp	r3, #0
 8005276:	d006      	beq.n	8005286 <HAL_RCC_OscConfig+0x4a>
 8005278:	69bb      	ldr	r3, [r7, #24]
 800527a:	2b0c      	cmp	r3, #12
 800527c:	f040 8083 	bne.w	8005386 <HAL_RCC_OscConfig+0x14a>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8005280:	697b      	ldr	r3, [r7, #20]
 8005282:	2b01      	cmp	r3, #1
 8005284:	d17f      	bne.n	8005386 <HAL_RCC_OscConfig+0x14a>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005286:	4b8c      	ldr	r3, [pc, #560]	; (80054b8 <HAL_RCC_OscConfig+0x27c>)
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	f003 0302 	and.w	r3, r3, #2
 800528e:	2b00      	cmp	r3, #0
 8005290:	d006      	beq.n	80052a0 <HAL_RCC_OscConfig+0x64>
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	69db      	ldr	r3, [r3, #28]
 8005296:	2b00      	cmp	r3, #0
 8005298:	d102      	bne.n	80052a0 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 800529a:	2301      	movs	r3, #1
 800529c:	f000 bc9a 	b.w	8005bd4 <HAL_RCC_OscConfig+0x998>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80052a4:	4b84      	ldr	r3, [pc, #528]	; (80054b8 <HAL_RCC_OscConfig+0x27c>)
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	f003 0308 	and.w	r3, r3, #8
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d004      	beq.n	80052ba <HAL_RCC_OscConfig+0x7e>
 80052b0:	4b81      	ldr	r3, [pc, #516]	; (80054b8 <HAL_RCC_OscConfig+0x27c>)
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80052b8:	e005      	b.n	80052c6 <HAL_RCC_OscConfig+0x8a>
 80052ba:	4b7f      	ldr	r3, [pc, #508]	; (80054b8 <HAL_RCC_OscConfig+0x27c>)
 80052bc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80052c0:	091b      	lsrs	r3, r3, #4
 80052c2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80052c6:	4293      	cmp	r3, r2
 80052c8:	d224      	bcs.n	8005314 <HAL_RCC_OscConfig+0xd8>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052ce:	4618      	mov	r0, r3
 80052d0:	f000 fece 	bl	8006070 <RCC_SetFlashLatencyFromMSIRange>
 80052d4:	4603      	mov	r3, r0
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d002      	beq.n	80052e0 <HAL_RCC_OscConfig+0xa4>
          {
            return HAL_ERROR;
 80052da:	2301      	movs	r3, #1
 80052dc:	f000 bc7a 	b.w	8005bd4 <HAL_RCC_OscConfig+0x998>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80052e0:	4b75      	ldr	r3, [pc, #468]	; (80054b8 <HAL_RCC_OscConfig+0x27c>)
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	4a74      	ldr	r2, [pc, #464]	; (80054b8 <HAL_RCC_OscConfig+0x27c>)
 80052e6:	f043 0308 	orr.w	r3, r3, #8
 80052ea:	6013      	str	r3, [r2, #0]
 80052ec:	4b72      	ldr	r3, [pc, #456]	; (80054b8 <HAL_RCC_OscConfig+0x27c>)
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052f8:	496f      	ldr	r1, [pc, #444]	; (80054b8 <HAL_RCC_OscConfig+0x27c>)
 80052fa:	4313      	orrs	r3, r2
 80052fc:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80052fe:	4b6e      	ldr	r3, [pc, #440]	; (80054b8 <HAL_RCC_OscConfig+0x27c>)
 8005300:	685b      	ldr	r3, [r3, #4]
 8005302:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	6a1b      	ldr	r3, [r3, #32]
 800530a:	021b      	lsls	r3, r3, #8
 800530c:	496a      	ldr	r1, [pc, #424]	; (80054b8 <HAL_RCC_OscConfig+0x27c>)
 800530e:	4313      	orrs	r3, r2
 8005310:	604b      	str	r3, [r1, #4]
 8005312:	e026      	b.n	8005362 <HAL_RCC_OscConfig+0x126>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005314:	4b68      	ldr	r3, [pc, #416]	; (80054b8 <HAL_RCC_OscConfig+0x27c>)
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	4a67      	ldr	r2, [pc, #412]	; (80054b8 <HAL_RCC_OscConfig+0x27c>)
 800531a:	f043 0308 	orr.w	r3, r3, #8
 800531e:	6013      	str	r3, [r2, #0]
 8005320:	4b65      	ldr	r3, [pc, #404]	; (80054b8 <HAL_RCC_OscConfig+0x27c>)
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800532c:	4962      	ldr	r1, [pc, #392]	; (80054b8 <HAL_RCC_OscConfig+0x27c>)
 800532e:	4313      	orrs	r3, r2
 8005330:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005332:	4b61      	ldr	r3, [pc, #388]	; (80054b8 <HAL_RCC_OscConfig+0x27c>)
 8005334:	685b      	ldr	r3, [r3, #4]
 8005336:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	6a1b      	ldr	r3, [r3, #32]
 800533e:	021b      	lsls	r3, r3, #8
 8005340:	495d      	ldr	r1, [pc, #372]	; (80054b8 <HAL_RCC_OscConfig+0x27c>)
 8005342:	4313      	orrs	r3, r2
 8005344:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8005346:	69bb      	ldr	r3, [r7, #24]
 8005348:	2b00      	cmp	r3, #0
 800534a:	d10a      	bne.n	8005362 <HAL_RCC_OscConfig+0x126>
          {
            if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005350:	4618      	mov	r0, r3
 8005352:	f000 fe8d 	bl	8006070 <RCC_SetFlashLatencyFromMSIRange>
 8005356:	4603      	mov	r3, r0
 8005358:	2b00      	cmp	r3, #0
 800535a:	d002      	beq.n	8005362 <HAL_RCC_OscConfig+0x126>
            {
              return HAL_ERROR;
 800535c:	2301      	movs	r3, #1
 800535e:	f000 bc39 	b.w	8005bd4 <HAL_RCC_OscConfig+0x998>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8005362:	f000 fe17 	bl	8005f94 <HAL_RCC_GetHCLKFreq>
 8005366:	4603      	mov	r3, r0
 8005368:	4a54      	ldr	r2, [pc, #336]	; (80054bc <HAL_RCC_OscConfig+0x280>)
 800536a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800536c:	4b54      	ldr	r3, [pc, #336]	; (80054c0 <HAL_RCC_OscConfig+0x284>)
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	4618      	mov	r0, r3
 8005372:	f7fc fec3 	bl	80020fc <HAL_InitTick>
 8005376:	4603      	mov	r3, r0
 8005378:	73fb      	strb	r3, [r7, #15]
        if (status != HAL_OK)
 800537a:	7bfb      	ldrb	r3, [r7, #15]
 800537c:	2b00      	cmp	r3, #0
 800537e:	d060      	beq.n	8005442 <HAL_RCC_OscConfig+0x206>
        {
          return status;
 8005380:	7bfb      	ldrb	r3, [r7, #15]
 8005382:	f000 bc27 	b.w	8005bd4 <HAL_RCC_OscConfig+0x998>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	69db      	ldr	r3, [r3, #28]
 800538a:	2b00      	cmp	r3, #0
 800538c:	d039      	beq.n	8005402 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800538e:	4b4a      	ldr	r3, [pc, #296]	; (80054b8 <HAL_RCC_OscConfig+0x27c>)
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	4a49      	ldr	r2, [pc, #292]	; (80054b8 <HAL_RCC_OscConfig+0x27c>)
 8005394:	f043 0301 	orr.w	r3, r3, #1
 8005398:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800539a:	f7fd f8a5 	bl	80024e8 <HAL_GetTick>
 800539e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80053a0:	e00f      	b.n	80053c2 <HAL_RCC_OscConfig+0x186>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80053a2:	f7fd f8a1 	bl	80024e8 <HAL_GetTick>
 80053a6:	4602      	mov	r2, r0
 80053a8:	693b      	ldr	r3, [r7, #16]
 80053aa:	1ad3      	subs	r3, r2, r3
 80053ac:	2b02      	cmp	r3, #2
 80053ae:	d908      	bls.n	80053c2 <HAL_RCC_OscConfig+0x186>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80053b0:	4b41      	ldr	r3, [pc, #260]	; (80054b8 <HAL_RCC_OscConfig+0x27c>)
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	f003 0302 	and.w	r3, r3, #2
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d102      	bne.n	80053c2 <HAL_RCC_OscConfig+0x186>
            {
              return HAL_TIMEOUT;
 80053bc:	2303      	movs	r3, #3
 80053be:	f000 bc09 	b.w	8005bd4 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80053c2:	4b3d      	ldr	r3, [pc, #244]	; (80054b8 <HAL_RCC_OscConfig+0x27c>)
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	f003 0302 	and.w	r3, r3, #2
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d0e9      	beq.n	80053a2 <HAL_RCC_OscConfig+0x166>
            }
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80053ce:	4b3a      	ldr	r3, [pc, #232]	; (80054b8 <HAL_RCC_OscConfig+0x27c>)
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	4a39      	ldr	r2, [pc, #228]	; (80054b8 <HAL_RCC_OscConfig+0x27c>)
 80053d4:	f043 0308 	orr.w	r3, r3, #8
 80053d8:	6013      	str	r3, [r2, #0]
 80053da:	4b37      	ldr	r3, [pc, #220]	; (80054b8 <HAL_RCC_OscConfig+0x27c>)
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053e6:	4934      	ldr	r1, [pc, #208]	; (80054b8 <HAL_RCC_OscConfig+0x27c>)
 80053e8:	4313      	orrs	r3, r2
 80053ea:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80053ec:	4b32      	ldr	r3, [pc, #200]	; (80054b8 <HAL_RCC_OscConfig+0x27c>)
 80053ee:	685b      	ldr	r3, [r3, #4]
 80053f0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	6a1b      	ldr	r3, [r3, #32]
 80053f8:	021b      	lsls	r3, r3, #8
 80053fa:	492f      	ldr	r1, [pc, #188]	; (80054b8 <HAL_RCC_OscConfig+0x27c>)
 80053fc:	4313      	orrs	r3, r2
 80053fe:	604b      	str	r3, [r1, #4]
 8005400:	e020      	b.n	8005444 <HAL_RCC_OscConfig+0x208>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8005402:	4b2d      	ldr	r3, [pc, #180]	; (80054b8 <HAL_RCC_OscConfig+0x27c>)
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	4a2c      	ldr	r2, [pc, #176]	; (80054b8 <HAL_RCC_OscConfig+0x27c>)
 8005408:	f023 0301 	bic.w	r3, r3, #1
 800540c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800540e:	f7fd f86b 	bl	80024e8 <HAL_GetTick>
 8005412:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8005414:	e00e      	b.n	8005434 <HAL_RCC_OscConfig+0x1f8>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005416:	f7fd f867 	bl	80024e8 <HAL_GetTick>
 800541a:	4602      	mov	r2, r0
 800541c:	693b      	ldr	r3, [r7, #16]
 800541e:	1ad3      	subs	r3, r2, r3
 8005420:	2b02      	cmp	r3, #2
 8005422:	d907      	bls.n	8005434 <HAL_RCC_OscConfig+0x1f8>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8005424:	4b24      	ldr	r3, [pc, #144]	; (80054b8 <HAL_RCC_OscConfig+0x27c>)
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	f003 0302 	and.w	r3, r3, #2
 800542c:	2b00      	cmp	r3, #0
 800542e:	d001      	beq.n	8005434 <HAL_RCC_OscConfig+0x1f8>
            {
              return HAL_TIMEOUT;
 8005430:	2303      	movs	r3, #3
 8005432:	e3cf      	b.n	8005bd4 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8005434:	4b20      	ldr	r3, [pc, #128]	; (80054b8 <HAL_RCC_OscConfig+0x27c>)
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	f003 0302 	and.w	r3, r3, #2
 800543c:	2b00      	cmp	r3, #0
 800543e:	d1ea      	bne.n	8005416 <HAL_RCC_OscConfig+0x1da>
 8005440:	e000      	b.n	8005444 <HAL_RCC_OscConfig+0x208>
      if ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005442:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	f003 0301 	and.w	r3, r3, #1
 800544c:	2b00      	cmp	r3, #0
 800544e:	d07e      	beq.n	800554e <HAL_RCC_OscConfig+0x312>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8005450:	69bb      	ldr	r3, [r7, #24]
 8005452:	2b08      	cmp	r3, #8
 8005454:	d005      	beq.n	8005462 <HAL_RCC_OscConfig+0x226>
 8005456:	69bb      	ldr	r3, [r7, #24]
 8005458:	2b0c      	cmp	r3, #12
 800545a:	d10e      	bne.n	800547a <HAL_RCC_OscConfig+0x23e>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 800545c:	697b      	ldr	r3, [r7, #20]
 800545e:	2b03      	cmp	r3, #3
 8005460:	d10b      	bne.n	800547a <HAL_RCC_OscConfig+0x23e>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005462:	4b15      	ldr	r3, [pc, #84]	; (80054b8 <HAL_RCC_OscConfig+0x27c>)
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800546a:	2b00      	cmp	r3, #0
 800546c:	d06e      	beq.n	800554c <HAL_RCC_OscConfig+0x310>
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	685b      	ldr	r3, [r3, #4]
 8005472:	2b00      	cmp	r3, #0
 8005474:	d16a      	bne.n	800554c <HAL_RCC_OscConfig+0x310>
      {
        return HAL_ERROR;
 8005476:	2301      	movs	r3, #1
 8005478:	e3ac      	b.n	8005bd4 <HAL_RCC_OscConfig+0x998>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	685b      	ldr	r3, [r3, #4]
 800547e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005482:	d106      	bne.n	8005492 <HAL_RCC_OscConfig+0x256>
 8005484:	4b0c      	ldr	r3, [pc, #48]	; (80054b8 <HAL_RCC_OscConfig+0x27c>)
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	4a0b      	ldr	r2, [pc, #44]	; (80054b8 <HAL_RCC_OscConfig+0x27c>)
 800548a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800548e:	6013      	str	r3, [r2, #0]
 8005490:	e024      	b.n	80054dc <HAL_RCC_OscConfig+0x2a0>
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	685b      	ldr	r3, [r3, #4]
 8005496:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800549a:	d113      	bne.n	80054c4 <HAL_RCC_OscConfig+0x288>
 800549c:	4b06      	ldr	r3, [pc, #24]	; (80054b8 <HAL_RCC_OscConfig+0x27c>)
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	4a05      	ldr	r2, [pc, #20]	; (80054b8 <HAL_RCC_OscConfig+0x27c>)
 80054a2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80054a6:	6013      	str	r3, [r2, #0]
 80054a8:	4b03      	ldr	r3, [pc, #12]	; (80054b8 <HAL_RCC_OscConfig+0x27c>)
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	4a02      	ldr	r2, [pc, #8]	; (80054b8 <HAL_RCC_OscConfig+0x27c>)
 80054ae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80054b2:	6013      	str	r3, [r2, #0]
 80054b4:	e012      	b.n	80054dc <HAL_RCC_OscConfig+0x2a0>
 80054b6:	bf00      	nop
 80054b8:	40021000 	.word	0x40021000
 80054bc:	20000004 	.word	0x20000004
 80054c0:	20000008 	.word	0x20000008
 80054c4:	4b8b      	ldr	r3, [pc, #556]	; (80056f4 <HAL_RCC_OscConfig+0x4b8>)
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	4a8a      	ldr	r2, [pc, #552]	; (80056f4 <HAL_RCC_OscConfig+0x4b8>)
 80054ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80054ce:	6013      	str	r3, [r2, #0]
 80054d0:	4b88      	ldr	r3, [pc, #544]	; (80056f4 <HAL_RCC_OscConfig+0x4b8>)
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	4a87      	ldr	r2, [pc, #540]	; (80056f4 <HAL_RCC_OscConfig+0x4b8>)
 80054d6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80054da:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	685b      	ldr	r3, [r3, #4]
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d019      	beq.n	8005518 <HAL_RCC_OscConfig+0x2dc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80054e4:	f7fd f800 	bl	80024e8 <HAL_GetTick>
 80054e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80054ea:	e00e      	b.n	800550a <HAL_RCC_OscConfig+0x2ce>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80054ec:	f7fc fffc 	bl	80024e8 <HAL_GetTick>
 80054f0:	4602      	mov	r2, r0
 80054f2:	693b      	ldr	r3, [r7, #16]
 80054f4:	1ad3      	subs	r3, r2, r3
 80054f6:	2b64      	cmp	r3, #100	; 0x64
 80054f8:	d907      	bls.n	800550a <HAL_RCC_OscConfig+0x2ce>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80054fa:	4b7e      	ldr	r3, [pc, #504]	; (80056f4 <HAL_RCC_OscConfig+0x4b8>)
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005502:	2b00      	cmp	r3, #0
 8005504:	d101      	bne.n	800550a <HAL_RCC_OscConfig+0x2ce>
            {
              return HAL_TIMEOUT;
 8005506:	2303      	movs	r3, #3
 8005508:	e364      	b.n	8005bd4 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800550a:	4b7a      	ldr	r3, [pc, #488]	; (80056f4 <HAL_RCC_OscConfig+0x4b8>)
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005512:	2b00      	cmp	r3, #0
 8005514:	d0ea      	beq.n	80054ec <HAL_RCC_OscConfig+0x2b0>
 8005516:	e01a      	b.n	800554e <HAL_RCC_OscConfig+0x312>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005518:	f7fc ffe6 	bl	80024e8 <HAL_GetTick>
 800551c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800551e:	e00e      	b.n	800553e <HAL_RCC_OscConfig+0x302>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005520:	f7fc ffe2 	bl	80024e8 <HAL_GetTick>
 8005524:	4602      	mov	r2, r0
 8005526:	693b      	ldr	r3, [r7, #16]
 8005528:	1ad3      	subs	r3, r2, r3
 800552a:	2b64      	cmp	r3, #100	; 0x64
 800552c:	d907      	bls.n	800553e <HAL_RCC_OscConfig+0x302>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800552e:	4b71      	ldr	r3, [pc, #452]	; (80056f4 <HAL_RCC_OscConfig+0x4b8>)
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005536:	2b00      	cmp	r3, #0
 8005538:	d001      	beq.n	800553e <HAL_RCC_OscConfig+0x302>
            {
              return HAL_TIMEOUT;
 800553a:	2303      	movs	r3, #3
 800553c:	e34a      	b.n	8005bd4 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800553e:	4b6d      	ldr	r3, [pc, #436]	; (80056f4 <HAL_RCC_OscConfig+0x4b8>)
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005546:	2b00      	cmp	r3, #0
 8005548:	d1ea      	bne.n	8005520 <HAL_RCC_OscConfig+0x2e4>
 800554a:	e000      	b.n	800554e <HAL_RCC_OscConfig+0x312>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800554c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	f003 0302 	and.w	r3, r3, #2
 8005556:	2b00      	cmp	r3, #0
 8005558:	d06c      	beq.n	8005634 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 800555a:	69bb      	ldr	r3, [r7, #24]
 800555c:	2b04      	cmp	r3, #4
 800555e:	d005      	beq.n	800556c <HAL_RCC_OscConfig+0x330>
 8005560:	69bb      	ldr	r3, [r7, #24]
 8005562:	2b0c      	cmp	r3, #12
 8005564:	d119      	bne.n	800559a <HAL_RCC_OscConfig+0x35e>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8005566:	697b      	ldr	r3, [r7, #20]
 8005568:	2b02      	cmp	r3, #2
 800556a:	d116      	bne.n	800559a <HAL_RCC_OscConfig+0x35e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800556c:	4b61      	ldr	r3, [pc, #388]	; (80056f4 <HAL_RCC_OscConfig+0x4b8>)
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005574:	2b00      	cmp	r3, #0
 8005576:	d005      	beq.n	8005584 <HAL_RCC_OscConfig+0x348>
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	68db      	ldr	r3, [r3, #12]
 800557c:	2b00      	cmp	r3, #0
 800557e:	d101      	bne.n	8005584 <HAL_RCC_OscConfig+0x348>
      {
        return HAL_ERROR;
 8005580:	2301      	movs	r3, #1
 8005582:	e327      	b.n	8005bd4 <HAL_RCC_OscConfig+0x998>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005584:	4b5b      	ldr	r3, [pc, #364]	; (80056f4 <HAL_RCC_OscConfig+0x4b8>)
 8005586:	685b      	ldr	r3, [r3, #4]
 8005588:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	691b      	ldr	r3, [r3, #16]
 8005590:	061b      	lsls	r3, r3, #24
 8005592:	4958      	ldr	r1, [pc, #352]	; (80056f4 <HAL_RCC_OscConfig+0x4b8>)
 8005594:	4313      	orrs	r3, r2
 8005596:	604b      	str	r3, [r1, #4]
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005598:	e04c      	b.n	8005634 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	68db      	ldr	r3, [r3, #12]
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d029      	beq.n	80055f6 <HAL_RCC_OscConfig+0x3ba>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80055a2:	4b54      	ldr	r3, [pc, #336]	; (80056f4 <HAL_RCC_OscConfig+0x4b8>)
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	4a53      	ldr	r2, [pc, #332]	; (80056f4 <HAL_RCC_OscConfig+0x4b8>)
 80055a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80055ac:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055ae:	f7fc ff9b 	bl	80024e8 <HAL_GetTick>
 80055b2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80055b4:	e00e      	b.n	80055d4 <HAL_RCC_OscConfig+0x398>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80055b6:	f7fc ff97 	bl	80024e8 <HAL_GetTick>
 80055ba:	4602      	mov	r2, r0
 80055bc:	693b      	ldr	r3, [r7, #16]
 80055be:	1ad3      	subs	r3, r2, r3
 80055c0:	2b02      	cmp	r3, #2
 80055c2:	d907      	bls.n	80055d4 <HAL_RCC_OscConfig+0x398>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80055c4:	4b4b      	ldr	r3, [pc, #300]	; (80056f4 <HAL_RCC_OscConfig+0x4b8>)
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d101      	bne.n	80055d4 <HAL_RCC_OscConfig+0x398>
            {
              return HAL_TIMEOUT;
 80055d0:	2303      	movs	r3, #3
 80055d2:	e2ff      	b.n	8005bd4 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80055d4:	4b47      	ldr	r3, [pc, #284]	; (80056f4 <HAL_RCC_OscConfig+0x4b8>)
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d0ea      	beq.n	80055b6 <HAL_RCC_OscConfig+0x37a>
            }
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80055e0:	4b44      	ldr	r3, [pc, #272]	; (80056f4 <HAL_RCC_OscConfig+0x4b8>)
 80055e2:	685b      	ldr	r3, [r3, #4]
 80055e4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	691b      	ldr	r3, [r3, #16]
 80055ec:	061b      	lsls	r3, r3, #24
 80055ee:	4941      	ldr	r1, [pc, #260]	; (80056f4 <HAL_RCC_OscConfig+0x4b8>)
 80055f0:	4313      	orrs	r3, r2
 80055f2:	604b      	str	r3, [r1, #4]
 80055f4:	e01e      	b.n	8005634 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80055f6:	4b3f      	ldr	r3, [pc, #252]	; (80056f4 <HAL_RCC_OscConfig+0x4b8>)
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	4a3e      	ldr	r2, [pc, #248]	; (80056f4 <HAL_RCC_OscConfig+0x4b8>)
 80055fc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005600:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005602:	f7fc ff71 	bl	80024e8 <HAL_GetTick>
 8005606:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005608:	e00e      	b.n	8005628 <HAL_RCC_OscConfig+0x3ec>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800560a:	f7fc ff6d 	bl	80024e8 <HAL_GetTick>
 800560e:	4602      	mov	r2, r0
 8005610:	693b      	ldr	r3, [r7, #16]
 8005612:	1ad3      	subs	r3, r2, r3
 8005614:	2b02      	cmp	r3, #2
 8005616:	d907      	bls.n	8005628 <HAL_RCC_OscConfig+0x3ec>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005618:	4b36      	ldr	r3, [pc, #216]	; (80056f4 <HAL_RCC_OscConfig+0x4b8>)
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005620:	2b00      	cmp	r3, #0
 8005622:	d001      	beq.n	8005628 <HAL_RCC_OscConfig+0x3ec>
            {
              return HAL_TIMEOUT;
 8005624:	2303      	movs	r3, #3
 8005626:	e2d5      	b.n	8005bd4 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005628:	4b32      	ldr	r3, [pc, #200]	; (80056f4 <HAL_RCC_OscConfig+0x4b8>)
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005630:	2b00      	cmp	r3, #0
 8005632:	d1ea      	bne.n	800560a <HAL_RCC_OscConfig+0x3ce>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	f003 0308 	and.w	r3, r3, #8
 800563c:	2b00      	cmp	r3, #0
 800563e:	d062      	beq.n	8005706 <HAL_RCC_OscConfig+0x4ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	695b      	ldr	r3, [r3, #20]
 8005644:	2b00      	cmp	r3, #0
 8005646:	d038      	beq.n	80056ba <HAL_RCC_OscConfig+0x47e>
    {
      /* Apply prescaler value */
      if (RCC_OscInitStruct->LSIDiv == RCC_LSI_DIV1)
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	699b      	ldr	r3, [r3, #24]
 800564c:	2b00      	cmp	r3, #0
 800564e:	d108      	bne.n	8005662 <HAL_RCC_OscConfig+0x426>
      {
        CLEAR_BIT(RCC->CSR, RCC_CSR_LSIPRE);
 8005650:	4b28      	ldr	r3, [pc, #160]	; (80056f4 <HAL_RCC_OscConfig+0x4b8>)
 8005652:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005656:	4a27      	ldr	r2, [pc, #156]	; (80056f4 <HAL_RCC_OscConfig+0x4b8>)
 8005658:	f023 0310 	bic.w	r3, r3, #16
 800565c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8005660:	e007      	b.n	8005672 <HAL_RCC_OscConfig+0x436>
      }
      else
      {
        SET_BIT(RCC->CSR, RCC_CSR_LSIPRE);
 8005662:	4b24      	ldr	r3, [pc, #144]	; (80056f4 <HAL_RCC_OscConfig+0x4b8>)
 8005664:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005668:	4a22      	ldr	r2, [pc, #136]	; (80056f4 <HAL_RCC_OscConfig+0x4b8>)
 800566a:	f043 0310 	orr.w	r3, r3, #16
 800566e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005672:	4b20      	ldr	r3, [pc, #128]	; (80056f4 <HAL_RCC_OscConfig+0x4b8>)
 8005674:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005678:	4a1e      	ldr	r2, [pc, #120]	; (80056f4 <HAL_RCC_OscConfig+0x4b8>)
 800567a:	f043 0301 	orr.w	r3, r3, #1
 800567e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005682:	f7fc ff31 	bl	80024e8 <HAL_GetTick>
 8005686:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005688:	e00f      	b.n	80056aa <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800568a:	f7fc ff2d 	bl	80024e8 <HAL_GetTick>
 800568e:	4602      	mov	r2, r0
 8005690:	693b      	ldr	r3, [r7, #16]
 8005692:	1ad3      	subs	r3, r2, r3
 8005694:	2b07      	cmp	r3, #7
 8005696:	d908      	bls.n	80056aa <HAL_RCC_OscConfig+0x46e>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005698:	4b16      	ldr	r3, [pc, #88]	; (80056f4 <HAL_RCC_OscConfig+0x4b8>)
 800569a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800569e:	f003 0302 	and.w	r3, r3, #2
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d101      	bne.n	80056aa <HAL_RCC_OscConfig+0x46e>
          {
            return HAL_TIMEOUT;
 80056a6:	2303      	movs	r3, #3
 80056a8:	e294      	b.n	8005bd4 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80056aa:	4b12      	ldr	r3, [pc, #72]	; (80056f4 <HAL_RCC_OscConfig+0x4b8>)
 80056ac:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80056b0:	f003 0302 	and.w	r3, r3, #2
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d0e8      	beq.n	800568a <HAL_RCC_OscConfig+0x44e>
 80056b8:	e025      	b.n	8005706 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80056ba:	4b0e      	ldr	r3, [pc, #56]	; (80056f4 <HAL_RCC_OscConfig+0x4b8>)
 80056bc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80056c0:	4a0c      	ldr	r2, [pc, #48]	; (80056f4 <HAL_RCC_OscConfig+0x4b8>)
 80056c2:	f023 0301 	bic.w	r3, r3, #1
 80056c6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80056ca:	f7fc ff0d 	bl	80024e8 <HAL_GetTick>
 80056ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80056d0:	e012      	b.n	80056f8 <HAL_RCC_OscConfig+0x4bc>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80056d2:	f7fc ff09 	bl	80024e8 <HAL_GetTick>
 80056d6:	4602      	mov	r2, r0
 80056d8:	693b      	ldr	r3, [r7, #16]
 80056da:	1ad3      	subs	r3, r2, r3
 80056dc:	2b07      	cmp	r3, #7
 80056de:	d90b      	bls.n	80056f8 <HAL_RCC_OscConfig+0x4bc>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80056e0:	4b04      	ldr	r3, [pc, #16]	; (80056f4 <HAL_RCC_OscConfig+0x4b8>)
 80056e2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80056e6:	f003 0302 	and.w	r3, r3, #2
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d004      	beq.n	80056f8 <HAL_RCC_OscConfig+0x4bc>
          {
            return HAL_TIMEOUT;
 80056ee:	2303      	movs	r3, #3
 80056f0:	e270      	b.n	8005bd4 <HAL_RCC_OscConfig+0x998>
 80056f2:	bf00      	nop
 80056f4:	40021000 	.word	0x40021000
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80056f8:	4ba8      	ldr	r3, [pc, #672]	; (800599c <HAL_RCC_OscConfig+0x760>)
 80056fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80056fe:	f003 0302 	and.w	r3, r3, #2
 8005702:	2b00      	cmp	r3, #0
 8005704:	d1e5      	bne.n	80056d2 <HAL_RCC_OscConfig+0x496>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	f003 0304 	and.w	r3, r3, #4
 800570e:	2b00      	cmp	r3, #0
 8005710:	f000 812d 	beq.w	800596e <HAL_RCC_OscConfig+0x732>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005714:	2300      	movs	r3, #0
 8005716:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8005718:	4ba0      	ldr	r3, [pc, #640]	; (800599c <HAL_RCC_OscConfig+0x760>)
 800571a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800571c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005720:	2b00      	cmp	r3, #0
 8005722:	d10d      	bne.n	8005740 <HAL_RCC_OscConfig+0x504>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005724:	4b9d      	ldr	r3, [pc, #628]	; (800599c <HAL_RCC_OscConfig+0x760>)
 8005726:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005728:	4a9c      	ldr	r2, [pc, #624]	; (800599c <HAL_RCC_OscConfig+0x760>)
 800572a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800572e:	6593      	str	r3, [r2, #88]	; 0x58
 8005730:	4b9a      	ldr	r3, [pc, #616]	; (800599c <HAL_RCC_OscConfig+0x760>)
 8005732:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005734:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005738:	60bb      	str	r3, [r7, #8]
 800573a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800573c:	2301      	movs	r3, #1
 800573e:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005740:	4b97      	ldr	r3, [pc, #604]	; (80059a0 <HAL_RCC_OscConfig+0x764>)
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005748:	2b00      	cmp	r3, #0
 800574a:	d11e      	bne.n	800578a <HAL_RCC_OscConfig+0x54e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800574c:	4b94      	ldr	r3, [pc, #592]	; (80059a0 <HAL_RCC_OscConfig+0x764>)
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	4a93      	ldr	r2, [pc, #588]	; (80059a0 <HAL_RCC_OscConfig+0x764>)
 8005752:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005756:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005758:	f7fc fec6 	bl	80024e8 <HAL_GetTick>
 800575c:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800575e:	e00e      	b.n	800577e <HAL_RCC_OscConfig+0x542>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005760:	f7fc fec2 	bl	80024e8 <HAL_GetTick>
 8005764:	4602      	mov	r2, r0
 8005766:	693b      	ldr	r3, [r7, #16]
 8005768:	1ad3      	subs	r3, r2, r3
 800576a:	2b02      	cmp	r3, #2
 800576c:	d907      	bls.n	800577e <HAL_RCC_OscConfig+0x542>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800576e:	4b8c      	ldr	r3, [pc, #560]	; (80059a0 <HAL_RCC_OscConfig+0x764>)
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005776:	2b00      	cmp	r3, #0
 8005778:	d101      	bne.n	800577e <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800577a:	2303      	movs	r3, #3
 800577c:	e22a      	b.n	8005bd4 <HAL_RCC_OscConfig+0x998>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800577e:	4b88      	ldr	r3, [pc, #544]	; (80059a0 <HAL_RCC_OscConfig+0x764>)
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005786:	2b00      	cmp	r3, #0
 8005788:	d0ea      	beq.n	8005760 <HAL_RCC_OscConfig+0x524>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	689b      	ldr	r3, [r3, #8]
 800578e:	f003 0301 	and.w	r3, r3, #1
 8005792:	2b00      	cmp	r3, #0
 8005794:	d01f      	beq.n	80057d6 <HAL_RCC_OscConfig+0x59a>
    {
      if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	689b      	ldr	r3, [r3, #8]
 800579a:	f003 0304 	and.w	r3, r3, #4
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d010      	beq.n	80057c4 <HAL_RCC_OscConfig+0x588>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80057a2:	4b7e      	ldr	r3, [pc, #504]	; (800599c <HAL_RCC_OscConfig+0x760>)
 80057a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80057a8:	4a7c      	ldr	r2, [pc, #496]	; (800599c <HAL_RCC_OscConfig+0x760>)
 80057aa:	f043 0304 	orr.w	r3, r3, #4
 80057ae:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80057b2:	4b7a      	ldr	r3, [pc, #488]	; (800599c <HAL_RCC_OscConfig+0x760>)
 80057b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80057b8:	4a78      	ldr	r2, [pc, #480]	; (800599c <HAL_RCC_OscConfig+0x760>)
 80057ba:	f043 0301 	orr.w	r3, r3, #1
 80057be:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80057c2:	e018      	b.n	80057f6 <HAL_RCC_OscConfig+0x5ba>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80057c4:	4b75      	ldr	r3, [pc, #468]	; (800599c <HAL_RCC_OscConfig+0x760>)
 80057c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80057ca:	4a74      	ldr	r2, [pc, #464]	; (800599c <HAL_RCC_OscConfig+0x760>)
 80057cc:	f043 0301 	orr.w	r3, r3, #1
 80057d0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80057d4:	e00f      	b.n	80057f6 <HAL_RCC_OscConfig+0x5ba>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80057d6:	4b71      	ldr	r3, [pc, #452]	; (800599c <HAL_RCC_OscConfig+0x760>)
 80057d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80057dc:	4a6f      	ldr	r2, [pc, #444]	; (800599c <HAL_RCC_OscConfig+0x760>)
 80057de:	f023 0301 	bic.w	r3, r3, #1
 80057e2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80057e6:	4b6d      	ldr	r3, [pc, #436]	; (800599c <HAL_RCC_OscConfig+0x760>)
 80057e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80057ec:	4a6b      	ldr	r2, [pc, #428]	; (800599c <HAL_RCC_OscConfig+0x760>)
 80057ee:	f023 0304 	bic.w	r3, r3, #4
 80057f2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    }

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	689b      	ldr	r3, [r3, #8]
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d068      	beq.n	80058d0 <HAL_RCC_OscConfig+0x694>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80057fe:	f7fc fe73 	bl	80024e8 <HAL_GetTick>
 8005802:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005804:	e011      	b.n	800582a <HAL_RCC_OscConfig+0x5ee>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005806:	f7fc fe6f 	bl	80024e8 <HAL_GetTick>
 800580a:	4602      	mov	r2, r0
 800580c:	693b      	ldr	r3, [r7, #16]
 800580e:	1ad3      	subs	r3, r2, r3
 8005810:	f241 3288 	movw	r2, #5000	; 0x1388
 8005814:	4293      	cmp	r3, r2
 8005816:	d908      	bls.n	800582a <HAL_RCC_OscConfig+0x5ee>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005818:	4b60      	ldr	r3, [pc, #384]	; (800599c <HAL_RCC_OscConfig+0x760>)
 800581a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800581e:	f003 0302 	and.w	r3, r3, #2
 8005822:	2b00      	cmp	r3, #0
 8005824:	d101      	bne.n	800582a <HAL_RCC_OscConfig+0x5ee>
          {
            return HAL_TIMEOUT;
 8005826:	2303      	movs	r3, #3
 8005828:	e1d4      	b.n	8005bd4 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800582a:	4b5c      	ldr	r3, [pc, #368]	; (800599c <HAL_RCC_OscConfig+0x760>)
 800582c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005830:	f003 0302 	and.w	r3, r3, #2
 8005834:	2b00      	cmp	r3, #0
 8005836:	d0e6      	beq.n	8005806 <HAL_RCC_OscConfig+0x5ca>
          }
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	689b      	ldr	r3, [r3, #8]
 800583c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005840:	2b00      	cmp	r3, #0
 8005842:	d022      	beq.n	800588a <HAL_RCC_OscConfig+0x64e>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8005844:	4b55      	ldr	r3, [pc, #340]	; (800599c <HAL_RCC_OscConfig+0x760>)
 8005846:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800584a:	4a54      	ldr	r2, [pc, #336]	; (800599c <HAL_RCC_OscConfig+0x760>)
 800584c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005850:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8005854:	e011      	b.n	800587a <HAL_RCC_OscConfig+0x63e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005856:	f7fc fe47 	bl	80024e8 <HAL_GetTick>
 800585a:	4602      	mov	r2, r0
 800585c:	693b      	ldr	r3, [r7, #16]
 800585e:	1ad3      	subs	r3, r2, r3
 8005860:	f241 3288 	movw	r2, #5000	; 0x1388
 8005864:	4293      	cmp	r3, r2
 8005866:	d908      	bls.n	800587a <HAL_RCC_OscConfig+0x63e>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8005868:	4b4c      	ldr	r3, [pc, #304]	; (800599c <HAL_RCC_OscConfig+0x760>)
 800586a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800586e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005872:	2b00      	cmp	r3, #0
 8005874:	d101      	bne.n	800587a <HAL_RCC_OscConfig+0x63e>
            {
              return HAL_TIMEOUT;
 8005876:	2303      	movs	r3, #3
 8005878:	e1ac      	b.n	8005bd4 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 800587a:	4b48      	ldr	r3, [pc, #288]	; (800599c <HAL_RCC_OscConfig+0x760>)
 800587c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005880:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005884:	2b00      	cmp	r3, #0
 8005886:	d0e6      	beq.n	8005856 <HAL_RCC_OscConfig+0x61a>
 8005888:	e068      	b.n	800595c <HAL_RCC_OscConfig+0x720>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800588a:	4b44      	ldr	r3, [pc, #272]	; (800599c <HAL_RCC_OscConfig+0x760>)
 800588c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005890:	4a42      	ldr	r2, [pc, #264]	; (800599c <HAL_RCC_OscConfig+0x760>)
 8005892:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005896:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800589a:	e011      	b.n	80058c0 <HAL_RCC_OscConfig+0x684>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800589c:	f7fc fe24 	bl	80024e8 <HAL_GetTick>
 80058a0:	4602      	mov	r2, r0
 80058a2:	693b      	ldr	r3, [r7, #16]
 80058a4:	1ad3      	subs	r3, r2, r3
 80058a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80058aa:	4293      	cmp	r3, r2
 80058ac:	d908      	bls.n	80058c0 <HAL_RCC_OscConfig+0x684>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80058ae:	4b3b      	ldr	r3, [pc, #236]	; (800599c <HAL_RCC_OscConfig+0x760>)
 80058b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80058b4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d001      	beq.n	80058c0 <HAL_RCC_OscConfig+0x684>
            {
              return HAL_TIMEOUT;
 80058bc:	2303      	movs	r3, #3
 80058be:	e189      	b.n	8005bd4 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80058c0:	4b36      	ldr	r3, [pc, #216]	; (800599c <HAL_RCC_OscConfig+0x760>)
 80058c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80058c6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d1e6      	bne.n	800589c <HAL_RCC_OscConfig+0x660>
 80058ce:	e045      	b.n	800595c <HAL_RCC_OscConfig+0x720>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80058d0:	f7fc fe0a 	bl	80024e8 <HAL_GetTick>
 80058d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80058d6:	e011      	b.n	80058fc <HAL_RCC_OscConfig+0x6c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80058d8:	f7fc fe06 	bl	80024e8 <HAL_GetTick>
 80058dc:	4602      	mov	r2, r0
 80058de:	693b      	ldr	r3, [r7, #16]
 80058e0:	1ad3      	subs	r3, r2, r3
 80058e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80058e6:	4293      	cmp	r3, r2
 80058e8:	d908      	bls.n	80058fc <HAL_RCC_OscConfig+0x6c0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80058ea:	4b2c      	ldr	r3, [pc, #176]	; (800599c <HAL_RCC_OscConfig+0x760>)
 80058ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80058f0:	f003 0302 	and.w	r3, r3, #2
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d001      	beq.n	80058fc <HAL_RCC_OscConfig+0x6c0>
          {
            return HAL_TIMEOUT;
 80058f8:	2303      	movs	r3, #3
 80058fa:	e16b      	b.n	8005bd4 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80058fc:	4b27      	ldr	r3, [pc, #156]	; (800599c <HAL_RCC_OscConfig+0x760>)
 80058fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005902:	f003 0302 	and.w	r3, r3, #2
 8005906:	2b00      	cmp	r3, #0
 8005908:	d1e6      	bne.n	80058d8 <HAL_RCC_OscConfig+0x69c>
          }
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 800590a:	4b24      	ldr	r3, [pc, #144]	; (800599c <HAL_RCC_OscConfig+0x760>)
 800590c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005910:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005914:	2b00      	cmp	r3, #0
 8005916:	d021      	beq.n	800595c <HAL_RCC_OscConfig+0x720>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8005918:	4b20      	ldr	r3, [pc, #128]	; (800599c <HAL_RCC_OscConfig+0x760>)
 800591a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800591e:	4a1f      	ldr	r2, [pc, #124]	; (800599c <HAL_RCC_OscConfig+0x760>)
 8005920:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005924:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8005928:	e011      	b.n	800594e <HAL_RCC_OscConfig+0x712>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800592a:	f7fc fddd 	bl	80024e8 <HAL_GetTick>
 800592e:	4602      	mov	r2, r0
 8005930:	693b      	ldr	r3, [r7, #16]
 8005932:	1ad3      	subs	r3, r2, r3
 8005934:	f241 3288 	movw	r2, #5000	; 0x1388
 8005938:	4293      	cmp	r3, r2
 800593a:	d908      	bls.n	800594e <HAL_RCC_OscConfig+0x712>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800593c:	4b17      	ldr	r3, [pc, #92]	; (800599c <HAL_RCC_OscConfig+0x760>)
 800593e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005942:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005946:	2b00      	cmp	r3, #0
 8005948:	d001      	beq.n	800594e <HAL_RCC_OscConfig+0x712>
            {
              return HAL_TIMEOUT;
 800594a:	2303      	movs	r3, #3
 800594c:	e142      	b.n	8005bd4 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800594e:	4b13      	ldr	r3, [pc, #76]	; (800599c <HAL_RCC_OscConfig+0x760>)
 8005950:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005954:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005958:	2b00      	cmp	r3, #0
 800595a:	d1e6      	bne.n	800592a <HAL_RCC_OscConfig+0x6ee>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800595c:	7ffb      	ldrb	r3, [r7, #31]
 800595e:	2b01      	cmp	r3, #1
 8005960:	d105      	bne.n	800596e <HAL_RCC_OscConfig+0x732>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005962:	4b0e      	ldr	r3, [pc, #56]	; (800599c <HAL_RCC_OscConfig+0x760>)
 8005964:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005966:	4a0d      	ldr	r2, [pc, #52]	; (800599c <HAL_RCC_OscConfig+0x760>)
 8005968:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800596c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	f003 0320 	and.w	r3, r3, #32
 8005976:	2b00      	cmp	r3, #0
 8005978:	d04f      	beq.n	8005a1a <HAL_RCC_OscConfig+0x7de>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800597e:	2b00      	cmp	r3, #0
 8005980:	d028      	beq.n	80059d4 <HAL_RCC_OscConfig+0x798>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005982:	4b06      	ldr	r3, [pc, #24]	; (800599c <HAL_RCC_OscConfig+0x760>)
 8005984:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005988:	4a04      	ldr	r2, [pc, #16]	; (800599c <HAL_RCC_OscConfig+0x760>)
 800598a:	f043 0301 	orr.w	r3, r3, #1
 800598e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005992:	f7fc fda9 	bl	80024e8 <HAL_GetTick>
 8005996:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005998:	e014      	b.n	80059c4 <HAL_RCC_OscConfig+0x788>
 800599a:	bf00      	nop
 800599c:	40021000 	.word	0x40021000
 80059a0:	40007000 	.word	0x40007000
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80059a4:	f7fc fda0 	bl	80024e8 <HAL_GetTick>
 80059a8:	4602      	mov	r2, r0
 80059aa:	693b      	ldr	r3, [r7, #16]
 80059ac:	1ad3      	subs	r3, r2, r3
 80059ae:	2b02      	cmp	r3, #2
 80059b0:	d908      	bls.n	80059c4 <HAL_RCC_OscConfig+0x788>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80059b2:	4b8a      	ldr	r3, [pc, #552]	; (8005bdc <HAL_RCC_OscConfig+0x9a0>)
 80059b4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80059b8:	f003 0302 	and.w	r3, r3, #2
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d101      	bne.n	80059c4 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 80059c0:	2303      	movs	r3, #3
 80059c2:	e107      	b.n	8005bd4 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80059c4:	4b85      	ldr	r3, [pc, #532]	; (8005bdc <HAL_RCC_OscConfig+0x9a0>)
 80059c6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80059ca:	f003 0302 	and.w	r3, r3, #2
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d0e8      	beq.n	80059a4 <HAL_RCC_OscConfig+0x768>
 80059d2:	e022      	b.n	8005a1a <HAL_RCC_OscConfig+0x7de>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80059d4:	4b81      	ldr	r3, [pc, #516]	; (8005bdc <HAL_RCC_OscConfig+0x9a0>)
 80059d6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80059da:	4a80      	ldr	r2, [pc, #512]	; (8005bdc <HAL_RCC_OscConfig+0x9a0>)
 80059dc:	f023 0301 	bic.w	r3, r3, #1
 80059e0:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80059e4:	f7fc fd80 	bl	80024e8 <HAL_GetTick>
 80059e8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80059ea:	e00f      	b.n	8005a0c <HAL_RCC_OscConfig+0x7d0>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80059ec:	f7fc fd7c 	bl	80024e8 <HAL_GetTick>
 80059f0:	4602      	mov	r2, r0
 80059f2:	693b      	ldr	r3, [r7, #16]
 80059f4:	1ad3      	subs	r3, r2, r3
 80059f6:	2b02      	cmp	r3, #2
 80059f8:	d908      	bls.n	8005a0c <HAL_RCC_OscConfig+0x7d0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80059fa:	4b78      	ldr	r3, [pc, #480]	; (8005bdc <HAL_RCC_OscConfig+0x9a0>)
 80059fc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005a00:	f003 0302 	and.w	r3, r3, #2
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d001      	beq.n	8005a0c <HAL_RCC_OscConfig+0x7d0>
          {
            return HAL_TIMEOUT;
 8005a08:	2303      	movs	r3, #3
 8005a0a:	e0e3      	b.n	8005bd4 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005a0c:	4b73      	ldr	r3, [pc, #460]	; (8005bdc <HAL_RCC_OscConfig+0x9a0>)
 8005a0e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005a12:	f003 0302 	and.w	r3, r3, #2
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d1e8      	bne.n	80059ec <HAL_RCC_OscConfig+0x7b0>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	f000 80d7 	beq.w	8005bd2 <HAL_RCC_OscConfig+0x996>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005a24:	4b6d      	ldr	r3, [pc, #436]	; (8005bdc <HAL_RCC_OscConfig+0x9a0>)
 8005a26:	689b      	ldr	r3, [r3, #8]
 8005a28:	f003 030c 	and.w	r3, r3, #12
 8005a2c:	2b0c      	cmp	r3, #12
 8005a2e:	f000 8091 	beq.w	8005b54 <HAL_RCC_OscConfig+0x918>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a36:	2b02      	cmp	r3, #2
 8005a38:	d166      	bne.n	8005b08 <HAL_RCC_OscConfig+0x8cc>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005a3a:	4b68      	ldr	r3, [pc, #416]	; (8005bdc <HAL_RCC_OscConfig+0x9a0>)
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	4a67      	ldr	r2, [pc, #412]	; (8005bdc <HAL_RCC_OscConfig+0x9a0>)
 8005a40:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005a44:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a46:	f7fc fd4f 	bl	80024e8 <HAL_GetTick>
 8005a4a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005a4c:	e00e      	b.n	8005a6c <HAL_RCC_OscConfig+0x830>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005a4e:	f7fc fd4b 	bl	80024e8 <HAL_GetTick>
 8005a52:	4602      	mov	r2, r0
 8005a54:	693b      	ldr	r3, [r7, #16]
 8005a56:	1ad3      	subs	r3, r2, r3
 8005a58:	2b02      	cmp	r3, #2
 8005a5a:	d907      	bls.n	8005a6c <HAL_RCC_OscConfig+0x830>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005a5c:	4b5f      	ldr	r3, [pc, #380]	; (8005bdc <HAL_RCC_OscConfig+0x9a0>)
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d001      	beq.n	8005a6c <HAL_RCC_OscConfig+0x830>
            {
              return HAL_TIMEOUT;
 8005a68:	2303      	movs	r3, #3
 8005a6a:	e0b3      	b.n	8005bd4 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005a6c:	4b5b      	ldr	r3, [pc, #364]	; (8005bdc <HAL_RCC_OscConfig+0x9a0>)
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d1ea      	bne.n	8005a4e <HAL_RCC_OscConfig+0x812>
            }
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005a78:	4b58      	ldr	r3, [pc, #352]	; (8005bdc <HAL_RCC_OscConfig+0x9a0>)
 8005a7a:	68da      	ldr	r2, [r3, #12]
 8005a7c:	4b58      	ldr	r3, [pc, #352]	; (8005be0 <HAL_RCC_OscConfig+0x9a4>)
 8005a7e:	4013      	ands	r3, r2
 8005a80:	687a      	ldr	r2, [r7, #4]
 8005a82:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8005a84:	687a      	ldr	r2, [r7, #4]
 8005a86:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005a88:	3a01      	subs	r2, #1
 8005a8a:	0112      	lsls	r2, r2, #4
 8005a8c:	4311      	orrs	r1, r2
 8005a8e:	687a      	ldr	r2, [r7, #4]
 8005a90:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005a92:	0212      	lsls	r2, r2, #8
 8005a94:	4311      	orrs	r1, r2
 8005a96:	687a      	ldr	r2, [r7, #4]
 8005a98:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8005a9a:	0852      	lsrs	r2, r2, #1
 8005a9c:	3a01      	subs	r2, #1
 8005a9e:	0552      	lsls	r2, r2, #21
 8005aa0:	4311      	orrs	r1, r2
 8005aa2:	687a      	ldr	r2, [r7, #4]
 8005aa4:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8005aa6:	0852      	lsrs	r2, r2, #1
 8005aa8:	3a01      	subs	r2, #1
 8005aaa:	0652      	lsls	r2, r2, #25
 8005aac:	4311      	orrs	r1, r2
 8005aae:	687a      	ldr	r2, [r7, #4]
 8005ab0:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8005ab2:	06d2      	lsls	r2, r2, #27
 8005ab4:	430a      	orrs	r2, r1
 8005ab6:	4949      	ldr	r1, [pc, #292]	; (8005bdc <HAL_RCC_OscConfig+0x9a0>)
 8005ab8:	4313      	orrs	r3, r2
 8005aba:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005abc:	4b47      	ldr	r3, [pc, #284]	; (8005bdc <HAL_RCC_OscConfig+0x9a0>)
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	4a46      	ldr	r2, [pc, #280]	; (8005bdc <HAL_RCC_OscConfig+0x9a0>)
 8005ac2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005ac6:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005ac8:	4b44      	ldr	r3, [pc, #272]	; (8005bdc <HAL_RCC_OscConfig+0x9a0>)
 8005aca:	68db      	ldr	r3, [r3, #12]
 8005acc:	4a43      	ldr	r2, [pc, #268]	; (8005bdc <HAL_RCC_OscConfig+0x9a0>)
 8005ace:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005ad2:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ad4:	f7fc fd08 	bl	80024e8 <HAL_GetTick>
 8005ad8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005ada:	e00e      	b.n	8005afa <HAL_RCC_OscConfig+0x8be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005adc:	f7fc fd04 	bl	80024e8 <HAL_GetTick>
 8005ae0:	4602      	mov	r2, r0
 8005ae2:	693b      	ldr	r3, [r7, #16]
 8005ae4:	1ad3      	subs	r3, r2, r3
 8005ae6:	2b02      	cmp	r3, #2
 8005ae8:	d907      	bls.n	8005afa <HAL_RCC_OscConfig+0x8be>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005aea:	4b3c      	ldr	r3, [pc, #240]	; (8005bdc <HAL_RCC_OscConfig+0x9a0>)
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d101      	bne.n	8005afa <HAL_RCC_OscConfig+0x8be>
            {
              return HAL_TIMEOUT;
 8005af6:	2303      	movs	r3, #3
 8005af8:	e06c      	b.n	8005bd4 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005afa:	4b38      	ldr	r3, [pc, #224]	; (8005bdc <HAL_RCC_OscConfig+0x9a0>)
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d0ea      	beq.n	8005adc <HAL_RCC_OscConfig+0x8a0>
 8005b06:	e064      	b.n	8005bd2 <HAL_RCC_OscConfig+0x996>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005b08:	4b34      	ldr	r3, [pc, #208]	; (8005bdc <HAL_RCC_OscConfig+0x9a0>)
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	4a33      	ldr	r2, [pc, #204]	; (8005bdc <HAL_RCC_OscConfig+0x9a0>)
 8005b0e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005b12:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b14:	f7fc fce8 	bl	80024e8 <HAL_GetTick>
 8005b18:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005b1a:	e00e      	b.n	8005b3a <HAL_RCC_OscConfig+0x8fe>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005b1c:	f7fc fce4 	bl	80024e8 <HAL_GetTick>
 8005b20:	4602      	mov	r2, r0
 8005b22:	693b      	ldr	r3, [r7, #16]
 8005b24:	1ad3      	subs	r3, r2, r3
 8005b26:	2b02      	cmp	r3, #2
 8005b28:	d907      	bls.n	8005b3a <HAL_RCC_OscConfig+0x8fe>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005b2a:	4b2c      	ldr	r3, [pc, #176]	; (8005bdc <HAL_RCC_OscConfig+0x9a0>)
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d001      	beq.n	8005b3a <HAL_RCC_OscConfig+0x8fe>
            {
              return HAL_TIMEOUT;
 8005b36:	2303      	movs	r3, #3
 8005b38:	e04c      	b.n	8005bd4 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005b3a:	4b28      	ldr	r3, [pc, #160]	; (8005bdc <HAL_RCC_OscConfig+0x9a0>)
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d1ea      	bne.n	8005b1c <HAL_RCC_OscConfig+0x8e0>
            }
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8005b46:	4b25      	ldr	r3, [pc, #148]	; (8005bdc <HAL_RCC_OscConfig+0x9a0>)
 8005b48:	68da      	ldr	r2, [r3, #12]
 8005b4a:	4924      	ldr	r1, [pc, #144]	; (8005bdc <HAL_RCC_OscConfig+0x9a0>)
 8005b4c:	4b25      	ldr	r3, [pc, #148]	; (8005be4 <HAL_RCC_OscConfig+0x9a8>)
 8005b4e:	4013      	ands	r3, r2
 8005b50:	60cb      	str	r3, [r1, #12]
 8005b52:	e03e      	b.n	8005bd2 <HAL_RCC_OscConfig+0x996>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_OFF)
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b58:	2b01      	cmp	r3, #1
 8005b5a:	d101      	bne.n	8005b60 <HAL_RCC_OscConfig+0x924>
      {
        return HAL_ERROR;
 8005b5c:	2301      	movs	r3, #1
 8005b5e:	e039      	b.n	8005bd4 <HAL_RCC_OscConfig+0x998>
      }
      else
      {
        pll_config = RCC->PLLCFGR;
 8005b60:	4b1e      	ldr	r3, [pc, #120]	; (8005bdc <HAL_RCC_OscConfig+0x9a0>)
 8005b62:	68db      	ldr	r3, [r3, #12]
 8005b64:	617b      	str	r3, [r7, #20]
        /* Do not return HAL_ERROR if request repeats the current configuration */
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005b66:	697b      	ldr	r3, [r7, #20]
 8005b68:	f003 0203 	and.w	r2, r3, #3
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b70:	429a      	cmp	r2, r3
 8005b72:	d12c      	bne.n	8005bce <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005b74:	697b      	ldr	r3, [r7, #20]
 8005b76:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b7e:	3b01      	subs	r3, #1
 8005b80:	011b      	lsls	r3, r3, #4
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005b82:	429a      	cmp	r2, r3
 8005b84:	d123      	bne.n	8005bce <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005b86:	697b      	ldr	r3, [r7, #20]
 8005b88:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b90:	021b      	lsls	r3, r3, #8
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005b92:	429a      	cmp	r2, r3
 8005b94:	d11b      	bne.n	8005bce <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005b96:	697b      	ldr	r3, [r7, #20]
 8005b98:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ba0:	06db      	lsls	r3, r3, #27
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005ba2:	429a      	cmp	r2, r3
 8005ba4:	d113      	bne.n	8005bce <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005ba6:	697b      	ldr	r3, [r7, #20]
 8005ba8:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bb0:	085b      	lsrs	r3, r3, #1
 8005bb2:	3b01      	subs	r3, #1
 8005bb4:	055b      	lsls	r3, r3, #21
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005bb6:	429a      	cmp	r2, r3
 8005bb8:	d109      	bne.n	8005bce <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8005bba:	697b      	ldr	r3, [r7, #20]
 8005bbc:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005bc4:	085b      	lsrs	r3, r3, #1
 8005bc6:	3b01      	subs	r3, #1
 8005bc8:	065b      	lsls	r3, r3, #25
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005bca:	429a      	cmp	r2, r3
 8005bcc:	d001      	beq.n	8005bd2 <HAL_RCC_OscConfig+0x996>
        {
          return HAL_ERROR;
 8005bce:	2301      	movs	r3, #1
 8005bd0:	e000      	b.n	8005bd4 <HAL_RCC_OscConfig+0x998>
        }
      }
    }
  }

  return HAL_OK;
 8005bd2:	2300      	movs	r3, #0
}
 8005bd4:	4618      	mov	r0, r3
 8005bd6:	3720      	adds	r7, #32
 8005bd8:	46bd      	mov	sp, r7
 8005bda:	bd80      	pop	{r7, pc}
 8005bdc:	40021000 	.word	0x40021000
 8005be0:	019f800c 	.word	0x019f800c
 8005be4:	feeefffc 	.word	0xfeeefffc

08005be8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005be8:	b580      	push	{r7, lr}
 8005bea:	b086      	sub	sp, #24
 8005bec:	af00      	add	r7, sp, #0
 8005bee:	6078      	str	r0, [r7, #4]
 8005bf0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8005bf2:	2300      	movs	r3, #0
 8005bf4:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d101      	bne.n	8005c00 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005bfc:	2301      	movs	r3, #1
 8005bfe:	e11c      	b.n	8005e3a <HAL_RCC_ClockConfig+0x252>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005c00:	4b90      	ldr	r3, [pc, #576]	; (8005e44 <HAL_RCC_ClockConfig+0x25c>)
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	f003 030f 	and.w	r3, r3, #15
 8005c08:	683a      	ldr	r2, [r7, #0]
 8005c0a:	429a      	cmp	r2, r3
 8005c0c:	d910      	bls.n	8005c30 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005c0e:	4b8d      	ldr	r3, [pc, #564]	; (8005e44 <HAL_RCC_ClockConfig+0x25c>)
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	f023 020f 	bic.w	r2, r3, #15
 8005c16:	498b      	ldr	r1, [pc, #556]	; (8005e44 <HAL_RCC_ClockConfig+0x25c>)
 8005c18:	683b      	ldr	r3, [r7, #0]
 8005c1a:	4313      	orrs	r3, r2
 8005c1c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005c1e:	4b89      	ldr	r3, [pc, #548]	; (8005e44 <HAL_RCC_ClockConfig+0x25c>)
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	f003 030f 	and.w	r3, r3, #15
 8005c26:	683a      	ldr	r2, [r7, #0]
 8005c28:	429a      	cmp	r2, r3
 8005c2a:	d001      	beq.n	8005c30 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005c2c:	2301      	movs	r3, #1
 8005c2e:	e104      	b.n	8005e3a <HAL_RCC_ClockConfig+0x252>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	f003 0302 	and.w	r3, r3, #2
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d010      	beq.n	8005c5e <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	689a      	ldr	r2, [r3, #8]
 8005c40:	4b81      	ldr	r3, [pc, #516]	; (8005e48 <HAL_RCC_ClockConfig+0x260>)
 8005c42:	689b      	ldr	r3, [r3, #8]
 8005c44:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005c48:	429a      	cmp	r2, r3
 8005c4a:	d908      	bls.n	8005c5e <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005c4c:	4b7e      	ldr	r3, [pc, #504]	; (8005e48 <HAL_RCC_ClockConfig+0x260>)
 8005c4e:	689b      	ldr	r3, [r3, #8]
 8005c50:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	689b      	ldr	r3, [r3, #8]
 8005c58:	497b      	ldr	r1, [pc, #492]	; (8005e48 <HAL_RCC_ClockConfig+0x260>)
 8005c5a:	4313      	orrs	r3, r2
 8005c5c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	f003 0301 	and.w	r3, r3, #1
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	f000 8085 	beq.w	8005d76 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	685b      	ldr	r3, [r3, #4]
 8005c70:	2b03      	cmp	r3, #3
 8005c72:	d11f      	bne.n	8005cb4 <HAL_RCC_ClockConfig+0xcc>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005c74:	4b74      	ldr	r3, [pc, #464]	; (8005e48 <HAL_RCC_ClockConfig+0x260>)
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d101      	bne.n	8005c84 <HAL_RCC_ClockConfig+0x9c>
      {
        return HAL_ERROR;
 8005c80:	2301      	movs	r3, #1
 8005c82:	e0da      	b.n	8005e3a <HAL_RCC_ClockConfig+0x252>
      }

      /* Transition state management when selecting PLL as SYSCLK source and */
      /* target frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8005c84:	f000 fa58 	bl	8006138 <RCC_GetSysClockFreqFromPLLSource>
 8005c88:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if (pllfreq > 80000000U)
 8005c8a:	693b      	ldr	r3, [r7, #16]
 8005c8c:	4a6f      	ldr	r2, [pc, #444]	; (8005e4c <HAL_RCC_ClockConfig+0x264>)
 8005c8e:	4293      	cmp	r3, r2
 8005c90:	d947      	bls.n	8005d22 <HAL_RCC_ClockConfig+0x13a>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8005c92:	4b6d      	ldr	r3, [pc, #436]	; (8005e48 <HAL_RCC_ClockConfig+0x260>)
 8005c94:	689b      	ldr	r3, [r3, #8]
 8005c96:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d141      	bne.n	8005d22 <HAL_RCC_ClockConfig+0x13a>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005c9e:	4b6a      	ldr	r3, [pc, #424]	; (8005e48 <HAL_RCC_ClockConfig+0x260>)
 8005ca0:	689b      	ldr	r3, [r3, #8]
 8005ca2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005ca6:	4a68      	ldr	r2, [pc, #416]	; (8005e48 <HAL_RCC_ClockConfig+0x260>)
 8005ca8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005cac:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8005cae:	2380      	movs	r3, #128	; 0x80
 8005cb0:	617b      	str	r3, [r7, #20]
 8005cb2:	e036      	b.n	8005d22 <HAL_RCC_ClockConfig+0x13a>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	685b      	ldr	r3, [r3, #4]
 8005cb8:	2b02      	cmp	r3, #2
 8005cba:	d107      	bne.n	8005ccc <HAL_RCC_ClockConfig+0xe4>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005cbc:	4b62      	ldr	r3, [pc, #392]	; (8005e48 <HAL_RCC_ClockConfig+0x260>)
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d115      	bne.n	8005cf4 <HAL_RCC_ClockConfig+0x10c>
        {
          return HAL_ERROR;
 8005cc8:	2301      	movs	r3, #1
 8005cca:	e0b6      	b.n	8005e3a <HAL_RCC_ClockConfig+0x252>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	685b      	ldr	r3, [r3, #4]
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d107      	bne.n	8005ce4 <HAL_RCC_ClockConfig+0xfc>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005cd4:	4b5c      	ldr	r3, [pc, #368]	; (8005e48 <HAL_RCC_ClockConfig+0x260>)
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	f003 0302 	and.w	r3, r3, #2
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d109      	bne.n	8005cf4 <HAL_RCC_ClockConfig+0x10c>
        {
          return HAL_ERROR;
 8005ce0:	2301      	movs	r3, #1
 8005ce2:	e0aa      	b.n	8005e3a <HAL_RCC_ClockConfig+0x252>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005ce4:	4b58      	ldr	r3, [pc, #352]	; (8005e48 <HAL_RCC_ClockConfig+0x260>)
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d101      	bne.n	8005cf4 <HAL_RCC_ClockConfig+0x10c>
        {
          return HAL_ERROR;
 8005cf0:	2301      	movs	r3, #1
 8005cf2:	e0a2      	b.n	8005e3a <HAL_RCC_ClockConfig+0x252>
        }
      }

      /* Transition state management when when going down from PLL used as */
      /* SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8005cf4:	f000 f8b0 	bl	8005e58 <HAL_RCC_GetSysClockFreq>
 8005cf8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if (pllfreq > 80000000U)
 8005cfa:	693b      	ldr	r3, [r7, #16]
 8005cfc:	4a53      	ldr	r2, [pc, #332]	; (8005e4c <HAL_RCC_ClockConfig+0x264>)
 8005cfe:	4293      	cmp	r3, r2
 8005d00:	d90f      	bls.n	8005d22 <HAL_RCC_ClockConfig+0x13a>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8005d02:	4b51      	ldr	r3, [pc, #324]	; (8005e48 <HAL_RCC_ClockConfig+0x260>)
 8005d04:	689b      	ldr	r3, [r3, #8]
 8005d06:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d109      	bne.n	8005d22 <HAL_RCC_ClockConfig+0x13a>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005d0e:	4b4e      	ldr	r3, [pc, #312]	; (8005e48 <HAL_RCC_ClockConfig+0x260>)
 8005d10:	689b      	ldr	r3, [r3, #8]
 8005d12:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005d16:	4a4c      	ldr	r2, [pc, #304]	; (8005e48 <HAL_RCC_ClockConfig+0x260>)
 8005d18:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005d1c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8005d1e:	2380      	movs	r3, #128	; 0x80
 8005d20:	617b      	str	r3, [r7, #20]
        }
      }
    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005d22:	4b49      	ldr	r3, [pc, #292]	; (8005e48 <HAL_RCC_ClockConfig+0x260>)
 8005d24:	689b      	ldr	r3, [r3, #8]
 8005d26:	f023 0203 	bic.w	r2, r3, #3
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	685b      	ldr	r3, [r3, #4]
 8005d2e:	4946      	ldr	r1, [pc, #280]	; (8005e48 <HAL_RCC_ClockConfig+0x260>)
 8005d30:	4313      	orrs	r3, r2
 8005d32:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005d34:	f7fc fbd8 	bl	80024e8 <HAL_GetTick>
 8005d38:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005d3a:	e013      	b.n	8005d64 <HAL_RCC_ClockConfig+0x17c>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005d3c:	f7fc fbd4 	bl	80024e8 <HAL_GetTick>
 8005d40:	4602      	mov	r2, r0
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	1ad3      	subs	r3, r2, r3
 8005d46:	f241 3288 	movw	r2, #5000	; 0x1388
 8005d4a:	4293      	cmp	r3, r2
 8005d4c:	d90a      	bls.n	8005d64 <HAL_RCC_ClockConfig+0x17c>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005d4e:	4b3e      	ldr	r3, [pc, #248]	; (8005e48 <HAL_RCC_ClockConfig+0x260>)
 8005d50:	689b      	ldr	r3, [r3, #8]
 8005d52:	f003 020c 	and.w	r2, r3, #12
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	685b      	ldr	r3, [r3, #4]
 8005d5a:	009b      	lsls	r3, r3, #2
 8005d5c:	429a      	cmp	r2, r3
 8005d5e:	d001      	beq.n	8005d64 <HAL_RCC_ClockConfig+0x17c>
        {
          return HAL_TIMEOUT;
 8005d60:	2303      	movs	r3, #3
 8005d62:	e06a      	b.n	8005e3a <HAL_RCC_ClockConfig+0x252>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005d64:	4b38      	ldr	r3, [pc, #224]	; (8005e48 <HAL_RCC_ClockConfig+0x260>)
 8005d66:	689b      	ldr	r3, [r3, #8]
 8005d68:	f003 020c 	and.w	r2, r3, #12
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	685b      	ldr	r3, [r3, #4]
 8005d70:	009b      	lsls	r3, r3, #2
 8005d72:	429a      	cmp	r2, r3
 8005d74:	d1e2      	bne.n	8005d3c <HAL_RCC_ClockConfig+0x154>
      }
    }
  }

  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 8005d76:	697b      	ldr	r3, [r7, #20]
 8005d78:	2b80      	cmp	r3, #128	; 0x80
 8005d7a:	d105      	bne.n	8005d88 <HAL_RCC_ClockConfig+0x1a0>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8005d7c:	4b32      	ldr	r3, [pc, #200]	; (8005e48 <HAL_RCC_ClockConfig+0x260>)
 8005d7e:	689b      	ldr	r3, [r3, #8]
 8005d80:	4a31      	ldr	r2, [pc, #196]	; (8005e48 <HAL_RCC_ClockConfig+0x260>)
 8005d82:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005d86:	6093      	str	r3, [r2, #8]
  }

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	f003 0302 	and.w	r3, r3, #2
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d010      	beq.n	8005db6 <HAL_RCC_ClockConfig+0x1ce>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	689a      	ldr	r2, [r3, #8]
 8005d98:	4b2b      	ldr	r3, [pc, #172]	; (8005e48 <HAL_RCC_ClockConfig+0x260>)
 8005d9a:	689b      	ldr	r3, [r3, #8]
 8005d9c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005da0:	429a      	cmp	r2, r3
 8005da2:	d208      	bcs.n	8005db6 <HAL_RCC_ClockConfig+0x1ce>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005da4:	4b28      	ldr	r3, [pc, #160]	; (8005e48 <HAL_RCC_ClockConfig+0x260>)
 8005da6:	689b      	ldr	r3, [r3, #8]
 8005da8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	689b      	ldr	r3, [r3, #8]
 8005db0:	4925      	ldr	r1, [pc, #148]	; (8005e48 <HAL_RCC_ClockConfig+0x260>)
 8005db2:	4313      	orrs	r3, r2
 8005db4:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005db6:	4b23      	ldr	r3, [pc, #140]	; (8005e44 <HAL_RCC_ClockConfig+0x25c>)
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	f003 030f 	and.w	r3, r3, #15
 8005dbe:	683a      	ldr	r2, [r7, #0]
 8005dc0:	429a      	cmp	r2, r3
 8005dc2:	d210      	bcs.n	8005de6 <HAL_RCC_ClockConfig+0x1fe>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005dc4:	4b1f      	ldr	r3, [pc, #124]	; (8005e44 <HAL_RCC_ClockConfig+0x25c>)
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	f023 020f 	bic.w	r2, r3, #15
 8005dcc:	491d      	ldr	r1, [pc, #116]	; (8005e44 <HAL_RCC_ClockConfig+0x25c>)
 8005dce:	683b      	ldr	r3, [r7, #0]
 8005dd0:	4313      	orrs	r3, r2
 8005dd2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005dd4:	4b1b      	ldr	r3, [pc, #108]	; (8005e44 <HAL_RCC_ClockConfig+0x25c>)
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	f003 030f 	and.w	r3, r3, #15
 8005ddc:	683a      	ldr	r2, [r7, #0]
 8005dde:	429a      	cmp	r2, r3
 8005de0:	d001      	beq.n	8005de6 <HAL_RCC_ClockConfig+0x1fe>
    {
      return HAL_ERROR;
 8005de2:	2301      	movs	r3, #1
 8005de4:	e029      	b.n	8005e3a <HAL_RCC_ClockConfig+0x252>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	f003 0304 	and.w	r3, r3, #4
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d008      	beq.n	8005e04 <HAL_RCC_ClockConfig+0x21c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005df2:	4b15      	ldr	r3, [pc, #84]	; (8005e48 <HAL_RCC_ClockConfig+0x260>)
 8005df4:	689b      	ldr	r3, [r3, #8]
 8005df6:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	68db      	ldr	r3, [r3, #12]
 8005dfe:	4912      	ldr	r1, [pc, #72]	; (8005e48 <HAL_RCC_ClockConfig+0x260>)
 8005e00:	4313      	orrs	r3, r2
 8005e02:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	f003 0308 	and.w	r3, r3, #8
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d009      	beq.n	8005e24 <HAL_RCC_ClockConfig+0x23c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005e10:	4b0d      	ldr	r3, [pc, #52]	; (8005e48 <HAL_RCC_ClockConfig+0x260>)
 8005e12:	689b      	ldr	r3, [r3, #8]
 8005e14:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	691b      	ldr	r3, [r3, #16]
 8005e1c:	00db      	lsls	r3, r3, #3
 8005e1e:	490a      	ldr	r1, [pc, #40]	; (8005e48 <HAL_RCC_ClockConfig+0x260>)
 8005e20:	4313      	orrs	r3, r2
 8005e22:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8005e24:	f000 f8b6 	bl	8005f94 <HAL_RCC_GetHCLKFreq>
 8005e28:	4603      	mov	r3, r0
 8005e2a:	4a09      	ldr	r2, [pc, #36]	; (8005e50 <HAL_RCC_ClockConfig+0x268>)
 8005e2c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8005e2e:	4b09      	ldr	r3, [pc, #36]	; (8005e54 <HAL_RCC_ClockConfig+0x26c>)
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	4618      	mov	r0, r3
 8005e34:	f7fc f962 	bl	80020fc <HAL_InitTick>
 8005e38:	4603      	mov	r3, r0
}
 8005e3a:	4618      	mov	r0, r3
 8005e3c:	3718      	adds	r7, #24
 8005e3e:	46bd      	mov	sp, r7
 8005e40:	bd80      	pop	{r7, pc}
 8005e42:	bf00      	nop
 8005e44:	40022000 	.word	0x40022000
 8005e48:	40021000 	.word	0x40021000
 8005e4c:	04c4b400 	.word	0x04c4b400
 8005e50:	20000004 	.word	0x20000004
 8005e54:	20000008 	.word	0x20000008

08005e58 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005e58:	b480      	push	{r7}
 8005e5a:	b089      	sub	sp, #36	; 0x24
 8005e5c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8005e5e:	2300      	movs	r3, #0
 8005e60:	61fb      	str	r3, [r7, #28]
 8005e62:	2300      	movs	r3, #0
 8005e64:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005e66:	4b47      	ldr	r3, [pc, #284]	; (8005f84 <HAL_RCC_GetSysClockFreq+0x12c>)
 8005e68:	689b      	ldr	r3, [r3, #8]
 8005e6a:	f003 030c 	and.w	r3, r3, #12
 8005e6e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005e70:	4b44      	ldr	r3, [pc, #272]	; (8005f84 <HAL_RCC_GetSysClockFreq+0x12c>)
 8005e72:	68db      	ldr	r3, [r3, #12]
 8005e74:	f003 0303 	and.w	r3, r3, #3
 8005e78:	60fb      	str	r3, [r7, #12]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8005e7a:	693b      	ldr	r3, [r7, #16]
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d005      	beq.n	8005e8c <HAL_RCC_GetSysClockFreq+0x34>
 8005e80:	693b      	ldr	r3, [r7, #16]
 8005e82:	2b0c      	cmp	r3, #12
 8005e84:	d121      	bne.n	8005eca <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	2b01      	cmp	r3, #1
 8005e8a:	d11e      	bne.n	8005eca <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8005e8c:	4b3d      	ldr	r3, [pc, #244]	; (8005f84 <HAL_RCC_GetSysClockFreq+0x12c>)
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	f003 0308 	and.w	r3, r3, #8
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d107      	bne.n	8005ea8 <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8005e98:	4b3a      	ldr	r3, [pc, #232]	; (8005f84 <HAL_RCC_GetSysClockFreq+0x12c>)
 8005e9a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005e9e:	0a1b      	lsrs	r3, r3, #8
 8005ea0:	f003 030f 	and.w	r3, r3, #15
 8005ea4:	61fb      	str	r3, [r7, #28]
 8005ea6:	e005      	b.n	8005eb4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8005ea8:	4b36      	ldr	r3, [pc, #216]	; (8005f84 <HAL_RCC_GetSysClockFreq+0x12c>)
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	091b      	lsrs	r3, r3, #4
 8005eae:	f003 030f 	and.w	r3, r3, #15
 8005eb2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in Hz*/
    msirange = MSIRangeTable[msirange];
 8005eb4:	4a34      	ldr	r2, [pc, #208]	; (8005f88 <HAL_RCC_GetSysClockFreq+0x130>)
 8005eb6:	69fb      	ldr	r3, [r7, #28]
 8005eb8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005ebc:	61fb      	str	r3, [r7, #28]

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8005ebe:	693b      	ldr	r3, [r7, #16]
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d10d      	bne.n	8005ee0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8005ec4:	69fb      	ldr	r3, [r7, #28]
 8005ec6:	61bb      	str	r3, [r7, #24]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8005ec8:	e00a      	b.n	8005ee0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005eca:	693b      	ldr	r3, [r7, #16]
 8005ecc:	2b04      	cmp	r3, #4
 8005ece:	d102      	bne.n	8005ed6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005ed0:	4b2e      	ldr	r3, [pc, #184]	; (8005f8c <HAL_RCC_GetSysClockFreq+0x134>)
 8005ed2:	61bb      	str	r3, [r7, #24]
 8005ed4:	e004      	b.n	8005ee0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005ed6:	693b      	ldr	r3, [r7, #16]
 8005ed8:	2b08      	cmp	r3, #8
 8005eda:	d101      	bne.n	8005ee0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005edc:	4b2c      	ldr	r3, [pc, #176]	; (8005f90 <HAL_RCC_GetSysClockFreq+0x138>)
 8005ede:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005ee0:	693b      	ldr	r3, [r7, #16]
 8005ee2:	2b0c      	cmp	r3, #12
 8005ee4:	d146      	bne.n	8005f74 <HAL_RCC_GetSysClockFreq+0x11c>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8005ee6:	4b27      	ldr	r3, [pc, #156]	; (8005f84 <HAL_RCC_GetSysClockFreq+0x12c>)
 8005ee8:	68db      	ldr	r3, [r3, #12]
 8005eea:	f003 0303 	and.w	r3, r3, #3
 8005eee:	60bb      	str	r3, [r7, #8]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005ef0:	4b24      	ldr	r3, [pc, #144]	; (8005f84 <HAL_RCC_GetSysClockFreq+0x12c>)
 8005ef2:	68db      	ldr	r3, [r3, #12]
 8005ef4:	091b      	lsrs	r3, r3, #4
 8005ef6:	f003 030f 	and.w	r3, r3, #15
 8005efa:	3301      	adds	r3, #1
 8005efc:	607b      	str	r3, [r7, #4]

    switch (pllsource)
 8005efe:	68bb      	ldr	r3, [r7, #8]
 8005f00:	2b02      	cmp	r3, #2
 8005f02:	d003      	beq.n	8005f0c <HAL_RCC_GetSysClockFreq+0xb4>
 8005f04:	68bb      	ldr	r3, [r7, #8]
 8005f06:	2b03      	cmp	r3, #3
 8005f08:	d00d      	beq.n	8005f26 <HAL_RCC_GetSysClockFreq+0xce>
 8005f0a:	e019      	b.n	8005f40 <HAL_RCC_GetSysClockFreq+0xe8>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005f0c:	4a1f      	ldr	r2, [pc, #124]	; (8005f8c <HAL_RCC_GetSysClockFreq+0x134>)
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f14:	4a1b      	ldr	r2, [pc, #108]	; (8005f84 <HAL_RCC_GetSysClockFreq+0x12c>)
 8005f16:	68d2      	ldr	r2, [r2, #12]
 8005f18:	0a12      	lsrs	r2, r2, #8
 8005f1a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005f1e:	fb02 f303 	mul.w	r3, r2, r3
 8005f22:	617b      	str	r3, [r7, #20]
        break;
 8005f24:	e019      	b.n	8005f5a <HAL_RCC_GetSysClockFreq+0x102>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005f26:	4a1a      	ldr	r2, [pc, #104]	; (8005f90 <HAL_RCC_GetSysClockFreq+0x138>)
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f2e:	4a15      	ldr	r2, [pc, #84]	; (8005f84 <HAL_RCC_GetSysClockFreq+0x12c>)
 8005f30:	68d2      	ldr	r2, [r2, #12]
 8005f32:	0a12      	lsrs	r2, r2, #8
 8005f34:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005f38:	fb02 f303 	mul.w	r3, r2, r3
 8005f3c:	617b      	str	r3, [r7, #20]
        break;
 8005f3e:	e00c      	b.n	8005f5a <HAL_RCC_GetSysClockFreq+0x102>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllvco = (msirange / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005f40:	69fa      	ldr	r2, [r7, #28]
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f48:	4a0e      	ldr	r2, [pc, #56]	; (8005f84 <HAL_RCC_GetSysClockFreq+0x12c>)
 8005f4a:	68d2      	ldr	r2, [r2, #12]
 8005f4c:	0a12      	lsrs	r2, r2, #8
 8005f4e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005f52:	fb02 f303 	mul.w	r3, r2, r3
 8005f56:	617b      	str	r3, [r7, #20]
        break;
 8005f58:	bf00      	nop
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U) * 2U;
 8005f5a:	4b0a      	ldr	r3, [pc, #40]	; (8005f84 <HAL_RCC_GetSysClockFreq+0x12c>)
 8005f5c:	68db      	ldr	r3, [r3, #12]
 8005f5e:	0e5b      	lsrs	r3, r3, #25
 8005f60:	f003 0303 	and.w	r3, r3, #3
 8005f64:	3301      	adds	r3, #1
 8005f66:	005b      	lsls	r3, r3, #1
 8005f68:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8005f6a:	697a      	ldr	r2, [r7, #20]
 8005f6c:	683b      	ldr	r3, [r7, #0]
 8005f6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f72:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8005f74:	69bb      	ldr	r3, [r7, #24]
}
 8005f76:	4618      	mov	r0, r3
 8005f78:	3724      	adds	r7, #36	; 0x24
 8005f7a:	46bd      	mov	sp, r7
 8005f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f80:	4770      	bx	lr
 8005f82:	bf00      	nop
 8005f84:	40021000 	.word	0x40021000
 8005f88:	0800e468 	.word	0x0800e468
 8005f8c:	00f42400 	.word	0x00f42400
 8005f90:	007a1200 	.word	0x007a1200

08005f94 <HAL_RCC_GetHCLKFreq>:
  * @note   Each time HCLK changes, this function must be called to update the
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005f94:	b580      	push	{r7, lr}
 8005f96:	af00      	add	r7, sp, #0
  return (HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]);
 8005f98:	f7ff ff5e 	bl	8005e58 <HAL_RCC_GetSysClockFreq>
 8005f9c:	4602      	mov	r2, r0
 8005f9e:	4b05      	ldr	r3, [pc, #20]	; (8005fb4 <HAL_RCC_GetHCLKFreq+0x20>)
 8005fa0:	689b      	ldr	r3, [r3, #8]
 8005fa2:	091b      	lsrs	r3, r3, #4
 8005fa4:	f003 030f 	and.w	r3, r3, #15
 8005fa8:	4903      	ldr	r1, [pc, #12]	; (8005fb8 <HAL_RCC_GetHCLKFreq+0x24>)
 8005faa:	5ccb      	ldrb	r3, [r1, r3]
 8005fac:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005fb0:	4618      	mov	r0, r3
 8005fb2:	bd80      	pop	{r7, pc}
 8005fb4:	40021000 	.word	0x40021000
 8005fb8:	0800e450 	.word	0x0800e450

08005fbc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005fbc:	b580      	push	{r7, lr}
 8005fbe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005fc0:	f7ff ffe8 	bl	8005f94 <HAL_RCC_GetHCLKFreq>
 8005fc4:	4602      	mov	r2, r0
 8005fc6:	4b05      	ldr	r3, [pc, #20]	; (8005fdc <HAL_RCC_GetPCLK1Freq+0x20>)
 8005fc8:	689b      	ldr	r3, [r3, #8]
 8005fca:	0a1b      	lsrs	r3, r3, #8
 8005fcc:	f003 0307 	and.w	r3, r3, #7
 8005fd0:	4903      	ldr	r1, [pc, #12]	; (8005fe0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005fd2:	5ccb      	ldrb	r3, [r1, r3]
 8005fd4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005fd8:	4618      	mov	r0, r3
 8005fda:	bd80      	pop	{r7, pc}
 8005fdc:	40021000 	.word	0x40021000
 8005fe0:	0800e460 	.word	0x0800e460

08005fe4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005fe4:	b580      	push	{r7, lr}
 8005fe6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005fe8:	f7ff ffd4 	bl	8005f94 <HAL_RCC_GetHCLKFreq>
 8005fec:	4602      	mov	r2, r0
 8005fee:	4b05      	ldr	r3, [pc, #20]	; (8006004 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005ff0:	689b      	ldr	r3, [r3, #8]
 8005ff2:	0adb      	lsrs	r3, r3, #11
 8005ff4:	f003 0307 	and.w	r3, r3, #7
 8005ff8:	4903      	ldr	r1, [pc, #12]	; (8006008 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005ffa:	5ccb      	ldrb	r3, [r1, r3]
 8005ffc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006000:	4618      	mov	r0, r3
 8006002:	bd80      	pop	{r7, pc}
 8006004:	40021000 	.word	0x40021000
 8006008:	0800e460 	.word	0x0800e460

0800600c <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800600c:	b480      	push	{r7}
 800600e:	b083      	sub	sp, #12
 8006010:	af00      	add	r7, sp, #0
 8006012:	6078      	str	r0, [r7, #4]
 8006014:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	220f      	movs	r2, #15
 800601a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800601c:	4b12      	ldr	r3, [pc, #72]	; (8006068 <HAL_RCC_GetClockConfig+0x5c>)
 800601e:	689b      	ldr	r3, [r3, #8]
 8006020:	f003 0203 	and.w	r2, r3, #3
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8006028:	4b0f      	ldr	r3, [pc, #60]	; (8006068 <HAL_RCC_GetClockConfig+0x5c>)
 800602a:	689b      	ldr	r3, [r3, #8]
 800602c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8006034:	4b0c      	ldr	r3, [pc, #48]	; (8006068 <HAL_RCC_GetClockConfig+0x5c>)
 8006036:	689b      	ldr	r3, [r3, #8]
 8006038:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8006040:	4b09      	ldr	r3, [pc, #36]	; (8006068 <HAL_RCC_GetClockConfig+0x5c>)
 8006042:	689b      	ldr	r3, [r3, #8]
 8006044:	08db      	lsrs	r3, r3, #3
 8006046:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800604e:	4b07      	ldr	r3, [pc, #28]	; (800606c <HAL_RCC_GetClockConfig+0x60>)
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	f003 020f 	and.w	r2, r3, #15
 8006056:	683b      	ldr	r3, [r7, #0]
 8006058:	601a      	str	r2, [r3, #0]
}
 800605a:	bf00      	nop
 800605c:	370c      	adds	r7, #12
 800605e:	46bd      	mov	sp, r7
 8006060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006064:	4770      	bx	lr
 8006066:	bf00      	nop
 8006068:	40021000 	.word	0x40021000
 800606c:	40022000 	.word	0x40022000

08006070 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8006070:	b580      	push	{r7, lr}
 8006072:	b086      	sub	sp, #24
 8006074:	af00      	add	r7, sp, #0
 8006076:	6078      	str	r0, [r7, #4]
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8006078:	2300      	movs	r3, #0
 800607a:	617b      	str	r3, [r7, #20]
  uint32_t vos;

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 800607c:	4b2c      	ldr	r3, [pc, #176]	; (8006130 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 800607e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006080:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006084:	2b00      	cmp	r3, #0
 8006086:	d003      	beq.n	8006090 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8006088:	f7ff f83a 	bl	8005100 <HAL_PWREx_GetVoltageRange>
 800608c:	6138      	str	r0, [r7, #16]
 800608e:	e014      	b.n	80060ba <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8006090:	4b27      	ldr	r3, [pc, #156]	; (8006130 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8006092:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006094:	4a26      	ldr	r2, [pc, #152]	; (8006130 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8006096:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800609a:	6593      	str	r3, [r2, #88]	; 0x58
 800609c:	4b24      	ldr	r3, [pc, #144]	; (8006130 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 800609e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80060a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80060a4:	60fb      	str	r3, [r7, #12]
 80060a6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80060a8:	f7ff f82a 	bl	8005100 <HAL_PWREx_GetVoltageRange>
 80060ac:	6138      	str	r0, [r7, #16]
    __HAL_RCC_PWR_CLK_DISABLE();
 80060ae:	4b20      	ldr	r3, [pc, #128]	; (8006130 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 80060b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80060b2:	4a1f      	ldr	r2, [pc, #124]	; (8006130 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 80060b4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80060b8:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE0) || (vos == PWR_REGULATOR_VOLTAGE_SCALE1))
 80060ba:	693b      	ldr	r3, [r7, #16]
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d003      	beq.n	80060c8 <RCC_SetFlashLatencyFromMSIRange+0x58>
 80060c0:	693b      	ldr	r3, [r7, #16]
 80060c2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80060c6:	d10b      	bne.n	80060e0 <RCC_SetFlashLatencyFromMSIRange+0x70>
  {
    if (msirange > RCC_MSIRANGE_8)
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	2b80      	cmp	r3, #128	; 0x80
 80060cc:	d919      	bls.n	8006102 <RCC_SetFlashLatencyFromMSIRange+0x92>
    {
      /* MSI > 16Mhz */
      if (msirange > RCC_MSIRANGE_10)
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	2ba0      	cmp	r3, #160	; 0xa0
 80060d2:	d902      	bls.n	80060da <RCC_SetFlashLatencyFromMSIRange+0x6a>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80060d4:	2302      	movs	r3, #2
 80060d6:	617b      	str	r3, [r7, #20]
    if (msirange > RCC_MSIRANGE_8)
 80060d8:	e013      	b.n	8006102 <RCC_SetFlashLatencyFromMSIRange+0x92>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80060da:	2301      	movs	r3, #1
 80060dc:	617b      	str	r3, [r7, #20]
    if (msirange > RCC_MSIRANGE_8)
 80060de:	e010      	b.n	8006102 <RCC_SetFlashLatencyFromMSIRange+0x92>
    }
    /* else MSI <= 16Mhz default FLASH_LATENCY_0 0WS */
  }
  else
  {
    if (msirange > RCC_MSIRANGE_8)
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	2b80      	cmp	r3, #128	; 0x80
 80060e4:	d902      	bls.n	80060ec <RCC_SetFlashLatencyFromMSIRange+0x7c>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80060e6:	2303      	movs	r3, #3
 80060e8:	617b      	str	r3, [r7, #20]
 80060ea:	e00a      	b.n	8006102 <RCC_SetFlashLatencyFromMSIRange+0x92>
    }
    else
    {
      if (msirange == RCC_MSIRANGE_8)
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	2b80      	cmp	r3, #128	; 0x80
 80060f0:	d102      	bne.n	80060f8 <RCC_SetFlashLatencyFromMSIRange+0x88>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80060f2:	2302      	movs	r3, #2
 80060f4:	617b      	str	r3, [r7, #20]
 80060f6:	e004      	b.n	8006102 <RCC_SetFlashLatencyFromMSIRange+0x92>
      }
      else if (msirange == RCC_MSIRANGE_7)
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	2b70      	cmp	r3, #112	; 0x70
 80060fc:	d101      	bne.n	8006102 <RCC_SetFlashLatencyFromMSIRange+0x92>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80060fe:	2301      	movs	r3, #1
 8006100:	617b      	str	r3, [r7, #20]
        /* MSI < 8Mhz default FLASH_LATENCY_0 0WS */
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8006102:	4b0c      	ldr	r3, [pc, #48]	; (8006134 <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	f023 020f 	bic.w	r2, r3, #15
 800610a:	490a      	ldr	r1, [pc, #40]	; (8006134 <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 800610c:	697b      	ldr	r3, [r7, #20]
 800610e:	4313      	orrs	r3, r2
 8006110:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 8006112:	4b08      	ldr	r3, [pc, #32]	; (8006134 <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	f003 030f 	and.w	r3, r3, #15
 800611a:	697a      	ldr	r2, [r7, #20]
 800611c:	429a      	cmp	r2, r3
 800611e:	d001      	beq.n	8006124 <RCC_SetFlashLatencyFromMSIRange+0xb4>
  {
    return HAL_ERROR;
 8006120:	2301      	movs	r3, #1
 8006122:	e000      	b.n	8006126 <RCC_SetFlashLatencyFromMSIRange+0xb6>
  }

  return HAL_OK;
 8006124:	2300      	movs	r3, #0
}
 8006126:	4618      	mov	r0, r3
 8006128:	3718      	adds	r7, #24
 800612a:	46bd      	mov	sp, r7
 800612c:	bd80      	pop	{r7, pc}
 800612e:	bf00      	nop
 8006130:	40021000 	.word	0x40021000
 8006134:	40022000 	.word	0x40022000

08006138 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8006138:	b480      	push	{r7}
 800613a:	b087      	sub	sp, #28
 800613c:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;    /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800613e:	4b31      	ldr	r3, [pc, #196]	; (8006204 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8006140:	68db      	ldr	r3, [r3, #12]
 8006142:	f003 0303 	and.w	r3, r3, #3
 8006146:	60fb      	str	r3, [r7, #12]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006148:	4b2e      	ldr	r3, [pc, #184]	; (8006204 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 800614a:	68db      	ldr	r3, [r3, #12]
 800614c:	091b      	lsrs	r3, r3, #4
 800614e:	f003 030f 	and.w	r3, r3, #15
 8006152:	3301      	adds	r3, #1
 8006154:	60bb      	str	r3, [r7, #8]

  switch (pllsource)
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	2b03      	cmp	r3, #3
 800615a:	d015      	beq.n	8006188 <RCC_GetSysClockFreqFromPLLSource+0x50>
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	2b03      	cmp	r3, #3
 8006160:	d839      	bhi.n	80061d6 <RCC_GetSysClockFreqFromPLLSource+0x9e>
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	2b01      	cmp	r3, #1
 8006166:	d01c      	beq.n	80061a2 <RCC_GetSysClockFreqFromPLLSource+0x6a>
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	2b02      	cmp	r3, #2
 800616c:	d133      	bne.n	80061d6 <RCC_GetSysClockFreqFromPLLSource+0x9e>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800616e:	4a26      	ldr	r2, [pc, #152]	; (8006208 <RCC_GetSysClockFreqFromPLLSource+0xd0>)
 8006170:	68bb      	ldr	r3, [r7, #8]
 8006172:	fbb2 f3f3 	udiv	r3, r2, r3
 8006176:	4a23      	ldr	r2, [pc, #140]	; (8006204 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8006178:	68d2      	ldr	r2, [r2, #12]
 800617a:	0a12      	lsrs	r2, r2, #8
 800617c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8006180:	fb02 f303 	mul.w	r3, r2, r3
 8006184:	613b      	str	r3, [r7, #16]
      break;
 8006186:	e029      	b.n	80061dc <RCC_GetSysClockFreqFromPLLSource+0xa4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006188:	4a20      	ldr	r2, [pc, #128]	; (800620c <RCC_GetSysClockFreqFromPLLSource+0xd4>)
 800618a:	68bb      	ldr	r3, [r7, #8]
 800618c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006190:	4a1c      	ldr	r2, [pc, #112]	; (8006204 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8006192:	68d2      	ldr	r2, [r2, #12]
 8006194:	0a12      	lsrs	r2, r2, #8
 8006196:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800619a:	fb02 f303 	mul.w	r3, r2, r3
 800619e:	613b      	str	r3, [r7, #16]
      break;
 80061a0:	e01c      	b.n	80061dc <RCC_GetSysClockFreqFromPLLSource+0xa4>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      /* Get MSI range source */
      if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80061a2:	4b18      	ldr	r3, [pc, #96]	; (8006204 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	f003 0308 	and.w	r3, r3, #8
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d107      	bne.n	80061be <RCC_GetSysClockFreqFromPLLSource+0x86>
      { /* MSISRANGE from RCC_CSR applies */
        msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80061ae:	4b15      	ldr	r3, [pc, #84]	; (8006204 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 80061b0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80061b4:	0a1b      	lsrs	r3, r3, #8
 80061b6:	f003 030f 	and.w	r3, r3, #15
 80061ba:	617b      	str	r3, [r7, #20]
 80061bc:	e005      	b.n	80061ca <RCC_GetSysClockFreqFromPLLSource+0x92>
      }
      else
      { /* MSIRANGE from RCC_CR applies */
        msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80061be:	4b11      	ldr	r3, [pc, #68]	; (8006204 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	091b      	lsrs	r3, r3, #4
 80061c4:	f003 030f 	and.w	r3, r3, #15
 80061c8:	617b      	str	r3, [r7, #20]
      }
        /*MSI frequency range in HZ*/
        pllvco = MSIRangeTable[msirange];
 80061ca:	4a11      	ldr	r2, [pc, #68]	; (8006210 <RCC_GetSysClockFreqFromPLLSource+0xd8>)
 80061cc:	697b      	ldr	r3, [r7, #20]
 80061ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80061d2:	613b      	str	r3, [r7, #16]
        break;
 80061d4:	e002      	b.n	80061dc <RCC_GetSysClockFreqFromPLLSource+0xa4>
    default:
      /* unexpected */
      pllvco = 0;
 80061d6:	2300      	movs	r3, #0
 80061d8:	613b      	str	r3, [r7, #16]
      break;
 80061da:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U) * 2U;
 80061dc:	4b09      	ldr	r3, [pc, #36]	; (8006204 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 80061de:	68db      	ldr	r3, [r3, #12]
 80061e0:	0e5b      	lsrs	r3, r3, #25
 80061e2:	f003 0303 	and.w	r3, r3, #3
 80061e6:	3301      	adds	r3, #1
 80061e8:	005b      	lsls	r3, r3, #1
 80061ea:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 80061ec:	693a      	ldr	r2, [r7, #16]
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80061f4:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 80061f6:	683b      	ldr	r3, [r7, #0]
}
 80061f8:	4618      	mov	r0, r3
 80061fa:	371c      	adds	r7, #28
 80061fc:	46bd      	mov	sp, r7
 80061fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006202:	4770      	bx	lr
 8006204:	40021000 	.word	0x40021000
 8006208:	00f42400 	.word	0x00f42400
 800620c:	007a1200 	.word	0x007a1200
 8006210:	0800e468 	.word	0x0800e468

08006214 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006214:	b580      	push	{r7, lr}
 8006216:	b088      	sub	sp, #32
 8006218:	af00      	add	r7, sp, #0
 800621a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800621c:	2300      	movs	r3, #0
 800621e:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006220:	2300      	movs	r3, #0
 8006222:	77bb      	strb	r3, [r7, #30]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800622c:	2b00      	cmp	r3, #0
 800622e:	d040      	beq.n	80062b2 <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006234:	2b80      	cmp	r3, #128	; 0x80
 8006236:	d02a      	beq.n	800628e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8006238:	2b80      	cmp	r3, #128	; 0x80
 800623a:	d825      	bhi.n	8006288 <HAL_RCCEx_PeriphCLKConfig+0x74>
 800623c:	2b60      	cmp	r3, #96	; 0x60
 800623e:	d026      	beq.n	800628e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8006240:	2b60      	cmp	r3, #96	; 0x60
 8006242:	d821      	bhi.n	8006288 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8006244:	2b40      	cmp	r3, #64	; 0x40
 8006246:	d006      	beq.n	8006256 <HAL_RCCEx_PeriphCLKConfig+0x42>
 8006248:	2b40      	cmp	r3, #64	; 0x40
 800624a:	d81d      	bhi.n	8006288 <HAL_RCCEx_PeriphCLKConfig+0x74>
 800624c:	2b00      	cmp	r3, #0
 800624e:	d009      	beq.n	8006264 <HAL_RCCEx_PeriphCLKConfig+0x50>
 8006250:	2b20      	cmp	r3, #32
 8006252:	d010      	beq.n	8006276 <HAL_RCCEx_PeriphCLKConfig+0x62>
 8006254:	e018      	b.n	8006288 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8006256:	4b8f      	ldr	r3, [pc, #572]	; (8006494 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006258:	68db      	ldr	r3, [r3, #12]
 800625a:	4a8e      	ldr	r2, [pc, #568]	; (8006494 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800625c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006260:	60d3      	str	r3, [r2, #12]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8006262:	e015      	b.n	8006290 <HAL_RCCEx_PeriphCLKConfig+0x7c>

      case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
        /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	3304      	adds	r3, #4
 8006268:	2100      	movs	r1, #0
 800626a:	4618      	mov	r0, r3
 800626c:	f000 fb56 	bl	800691c <RCCEx_PLLSAI1_Config>
 8006270:	4603      	mov	r3, r0
 8006272:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8006274:	e00c      	b.n	8006290 <HAL_RCCEx_PeriphCLKConfig+0x7c>

      case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
        /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
        ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	3320      	adds	r3, #32
 800627a:	2100      	movs	r1, #0
 800627c:	4618      	mov	r0, r3
 800627e:	f000 fc33 	bl	8006ae8 <RCCEx_PLLSAI2_Config>
 8006282:	4603      	mov	r3, r0
 8006284:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8006286:	e003      	b.n	8006290 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      case RCC_SAI1CLKSOURCE_HSI:      /* HSI is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006288:	2301      	movs	r3, #1
 800628a:	77fb      	strb	r3, [r7, #31]
        break;
 800628c:	e000      	b.n	8006290 <HAL_RCCEx_PeriphCLKConfig+0x7c>
        break;
 800628e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006290:	7ffb      	ldrb	r3, [r7, #31]
 8006292:	2b00      	cmp	r3, #0
 8006294:	d10b      	bne.n	80062ae <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006296:	4b7f      	ldr	r3, [pc, #508]	; (8006494 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006298:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800629c:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80062a4:	497b      	ldr	r1, [pc, #492]	; (8006494 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80062a6:	4313      	orrs	r3, r2
 80062a8:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 80062ac:	e001      	b.n	80062b2 <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80062ae:	7ffb      	ldrb	r3, [r7, #31]
 80062b0:	77bb      	strb	r3, [r7, #30]
    }
  }

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d047      	beq.n	800634e <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch (PeriphClkInit->Sai2ClockSelection)
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80062c2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80062c6:	d030      	beq.n	800632a <HAL_RCCEx_PeriphCLKConfig+0x116>
 80062c8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80062cc:	d82a      	bhi.n	8006324 <HAL_RCCEx_PeriphCLKConfig+0x110>
 80062ce:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80062d2:	d02a      	beq.n	800632a <HAL_RCCEx_PeriphCLKConfig+0x116>
 80062d4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80062d8:	d824      	bhi.n	8006324 <HAL_RCCEx_PeriphCLKConfig+0x110>
 80062da:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80062de:	d008      	beq.n	80062f2 <HAL_RCCEx_PeriphCLKConfig+0xde>
 80062e0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80062e4:	d81e      	bhi.n	8006324 <HAL_RCCEx_PeriphCLKConfig+0x110>
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d00a      	beq.n	8006300 <HAL_RCCEx_PeriphCLKConfig+0xec>
 80062ea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80062ee:	d010      	beq.n	8006312 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80062f0:	e018      	b.n	8006324 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
      case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80062f2:	4b68      	ldr	r3, [pc, #416]	; (8006494 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80062f4:	68db      	ldr	r3, [r3, #12]
 80062f6:	4a67      	ldr	r2, [pc, #412]	; (8006494 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80062f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80062fc:	60d3      	str	r3, [r2, #12]
        /* SAI2 clock source config set later after clock selection check */
        break;
 80062fe:	e015      	b.n	800632c <HAL_RCCEx_PeriphCLKConfig+0x118>

      case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
        /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	3304      	adds	r3, #4
 8006304:	2100      	movs	r1, #0
 8006306:	4618      	mov	r0, r3
 8006308:	f000 fb08 	bl	800691c <RCCEx_PLLSAI1_Config>
 800630c:	4603      	mov	r3, r0
 800630e:	77fb      	strb	r3, [r7, #31]
        /* SAI2 clock source config set later after clock selection check */
        break;
 8006310:	e00c      	b.n	800632c <HAL_RCCEx_PeriphCLKConfig+0x118>

      case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
        /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
        ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	3320      	adds	r3, #32
 8006316:	2100      	movs	r1, #0
 8006318:	4618      	mov	r0, r3
 800631a:	f000 fbe5 	bl	8006ae8 <RCCEx_PLLSAI2_Config>
 800631e:	4603      	mov	r3, r0
 8006320:	77fb      	strb	r3, [r7, #31]
        /* SAI2 clock source config set later after clock selection check */
        break;
 8006322:	e003      	b.n	800632c <HAL_RCCEx_PeriphCLKConfig+0x118>
      case RCC_SAI2CLKSOURCE_HSI:      /* HSI is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006324:	2301      	movs	r3, #1
 8006326:	77fb      	strb	r3, [r7, #31]
        break;
 8006328:	e000      	b.n	800632c <HAL_RCCEx_PeriphCLKConfig+0x118>
        break;
 800632a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800632c:	7ffb      	ldrb	r3, [r7, #31]
 800632e:	2b00      	cmp	r3, #0
 8006330:	d10b      	bne.n	800634a <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8006332:	4b58      	ldr	r3, [pc, #352]	; (8006494 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006334:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006338:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006340:	4954      	ldr	r1, [pc, #336]	; (8006494 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006342:	4313      	orrs	r3, r2
 8006344:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8006348:	e001      	b.n	800634e <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800634a:	7ffb      	ldrb	r3, [r7, #31]
 800634c:	77bb      	strb	r3, [r7, #30]
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006356:	2b00      	cmp	r3, #0
 8006358:	f000 80ab 	beq.w	80064b2 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800635c:	2300      	movs	r3, #0
 800635e:	75fb      	strb	r3, [r7, #23]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006360:	4b4c      	ldr	r3, [pc, #304]	; (8006494 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006362:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006364:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006368:	2b00      	cmp	r3, #0
 800636a:	d10d      	bne.n	8006388 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800636c:	4b49      	ldr	r3, [pc, #292]	; (8006494 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800636e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006370:	4a48      	ldr	r2, [pc, #288]	; (8006494 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006372:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006376:	6593      	str	r3, [r2, #88]	; 0x58
 8006378:	4b46      	ldr	r3, [pc, #280]	; (8006494 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800637a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800637c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006380:	60fb      	str	r3, [r7, #12]
 8006382:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8006384:	2301      	movs	r3, #1
 8006386:	75fb      	strb	r3, [r7, #23]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006388:	4b43      	ldr	r3, [pc, #268]	; (8006498 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	4a42      	ldr	r2, [pc, #264]	; (8006498 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800638e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006392:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006394:	f7fc f8a8 	bl	80024e8 <HAL_GetTick>
 8006398:	6138      	str	r0, [r7, #16]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800639a:	e00f      	b.n	80063bc <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800639c:	f7fc f8a4 	bl	80024e8 <HAL_GetTick>
 80063a0:	4602      	mov	r2, r0
 80063a2:	693b      	ldr	r3, [r7, #16]
 80063a4:	1ad3      	subs	r3, r2, r3
 80063a6:	2b02      	cmp	r3, #2
 80063a8:	d908      	bls.n	80063bc <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80063aa:	4b3b      	ldr	r3, [pc, #236]	; (8006498 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d109      	bne.n	80063ca <HAL_RCCEx_PeriphCLKConfig+0x1b6>
        {
          ret = HAL_TIMEOUT;
 80063b6:	2303      	movs	r3, #3
 80063b8:	77fb      	strb	r3, [r7, #31]
        }
        break;
 80063ba:	e006      	b.n	80063ca <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80063bc:	4b36      	ldr	r3, [pc, #216]	; (8006498 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d0e9      	beq.n	800639c <HAL_RCCEx_PeriphCLKConfig+0x188>
 80063c8:	e000      	b.n	80063cc <HAL_RCCEx_PeriphCLKConfig+0x1b8>
        break;
 80063ca:	bf00      	nop
      }
    }

    if (ret == HAL_OK)
 80063cc:	7ffb      	ldrb	r3, [r7, #31]
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d164      	bne.n	800649c <HAL_RCCEx_PeriphCLKConfig+0x288>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80063d2:	4b30      	ldr	r3, [pc, #192]	; (8006494 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80063d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80063d8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80063dc:	61bb      	str	r3, [r7, #24]

      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80063de:	69bb      	ldr	r3, [r7, #24]
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d01f      	beq.n	8006424 <HAL_RCCEx_PeriphCLKConfig+0x210>
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80063ea:	69ba      	ldr	r2, [r7, #24]
 80063ec:	429a      	cmp	r2, r3
 80063ee:	d019      	beq.n	8006424 <HAL_RCCEx_PeriphCLKConfig+0x210>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80063f0:	4b28      	ldr	r3, [pc, #160]	; (8006494 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80063f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80063f6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80063fa:	61bb      	str	r3, [r7, #24]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80063fc:	4b25      	ldr	r3, [pc, #148]	; (8006494 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80063fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006402:	4a24      	ldr	r2, [pc, #144]	; (8006494 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006404:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006408:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800640c:	4b21      	ldr	r3, [pc, #132]	; (8006494 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800640e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006412:	4a20      	ldr	r2, [pc, #128]	; (8006494 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006414:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006418:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800641c:	4a1d      	ldr	r2, [pc, #116]	; (8006494 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800641e:	69bb      	ldr	r3, [r7, #24]
 8006420:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8006424:	69bb      	ldr	r3, [r7, #24]
 8006426:	f003 0301 	and.w	r3, r3, #1
 800642a:	2b00      	cmp	r3, #0
 800642c:	d01f      	beq.n	800646e <HAL_RCCEx_PeriphCLKConfig+0x25a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800642e:	f7fc f85b 	bl	80024e8 <HAL_GetTick>
 8006432:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006434:	e012      	b.n	800645c <HAL_RCCEx_PeriphCLKConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006436:	f7fc f857 	bl	80024e8 <HAL_GetTick>
 800643a:	4602      	mov	r2, r0
 800643c:	693b      	ldr	r3, [r7, #16]
 800643e:	1ad3      	subs	r3, r2, r3
 8006440:	f241 3288 	movw	r2, #5000	; 0x1388
 8006444:	4293      	cmp	r3, r2
 8006446:	d909      	bls.n	800645c <HAL_RCCEx_PeriphCLKConfig+0x248>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006448:	4b12      	ldr	r3, [pc, #72]	; (8006494 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800644a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800644e:	f003 0302 	and.w	r3, r3, #2
 8006452:	2b00      	cmp	r3, #0
 8006454:	d10a      	bne.n	800646c <HAL_RCCEx_PeriphCLKConfig+0x258>
            {
              ret = HAL_TIMEOUT;
 8006456:	2303      	movs	r3, #3
 8006458:	77fb      	strb	r3, [r7, #31]
            }
            break;
 800645a:	e007      	b.n	800646c <HAL_RCCEx_PeriphCLKConfig+0x258>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800645c:	4b0d      	ldr	r3, [pc, #52]	; (8006494 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800645e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006462:	f003 0302 	and.w	r3, r3, #2
 8006466:	2b00      	cmp	r3, #0
 8006468:	d0e5      	beq.n	8006436 <HAL_RCCEx_PeriphCLKConfig+0x222>
 800646a:	e000      	b.n	800646e <HAL_RCCEx_PeriphCLKConfig+0x25a>
            break;
 800646c:	bf00      	nop
          }
        }
      }

      if (ret == HAL_OK)
 800646e:	7ffb      	ldrb	r3, [r7, #31]
 8006470:	2b00      	cmp	r3, #0
 8006472:	d10c      	bne.n	800648e <HAL_RCCEx_PeriphCLKConfig+0x27a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006474:	4b07      	ldr	r3, [pc, #28]	; (8006494 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006476:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800647a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006484:	4903      	ldr	r1, [pc, #12]	; (8006494 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006486:	4313      	orrs	r3, r2
 8006488:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800648c:	e008      	b.n	80064a0 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800648e:	7ffb      	ldrb	r3, [r7, #31]
 8006490:	77bb      	strb	r3, [r7, #30]
 8006492:	e005      	b.n	80064a0 <HAL_RCCEx_PeriphCLKConfig+0x28c>
 8006494:	40021000 	.word	0x40021000
 8006498:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800649c:	7ffb      	ldrb	r3, [r7, #31]
 800649e:	77bb      	strb	r3, [r7, #30]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80064a0:	7dfb      	ldrb	r3, [r7, #23]
 80064a2:	2b01      	cmp	r3, #1
 80064a4:	d105      	bne.n	80064b2 <HAL_RCCEx_PeriphCLKConfig+0x29e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80064a6:	4b9c      	ldr	r3, [pc, #624]	; (8006718 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80064a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80064aa:	4a9b      	ldr	r2, [pc, #620]	; (8006718 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80064ac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80064b0:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	f003 0301 	and.w	r3, r3, #1
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d00a      	beq.n	80064d4 <HAL_RCCEx_PeriphCLKConfig+0x2c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80064be:	4b96      	ldr	r3, [pc, #600]	; (8006718 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80064c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80064c4:	f023 0203 	bic.w	r2, r3, #3
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80064cc:	4992      	ldr	r1, [pc, #584]	; (8006718 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80064ce:	4313      	orrs	r3, r2
 80064d0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	f003 0302 	and.w	r3, r3, #2
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d00a      	beq.n	80064f6 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80064e0:	4b8d      	ldr	r3, [pc, #564]	; (8006718 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80064e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80064e6:	f023 020c 	bic.w	r2, r3, #12
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064ee:	498a      	ldr	r1, [pc, #552]	; (8006718 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80064f0:	4313      	orrs	r3, r2
 80064f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	f003 0304 	and.w	r3, r3, #4
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d00a      	beq.n	8006518 <HAL_RCCEx_PeriphCLKConfig+0x304>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8006502:	4b85      	ldr	r3, [pc, #532]	; (8006718 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8006504:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006508:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006510:	4981      	ldr	r1, [pc, #516]	; (8006718 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8006512:	4313      	orrs	r3, r2
 8006514:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	f003 0308 	and.w	r3, r3, #8
 8006520:	2b00      	cmp	r3, #0
 8006522:	d00a      	beq.n	800653a <HAL_RCCEx_PeriphCLKConfig+0x326>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8006524:	4b7c      	ldr	r3, [pc, #496]	; (8006718 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8006526:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800652a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006532:	4979      	ldr	r1, [pc, #484]	; (8006718 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8006534:	4313      	orrs	r3, r2
 8006536:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	f003 0310 	and.w	r3, r3, #16
 8006542:	2b00      	cmp	r3, #0
 8006544:	d00a      	beq.n	800655c <HAL_RCCEx_PeriphCLKConfig+0x348>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8006546:	4b74      	ldr	r3, [pc, #464]	; (8006718 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8006548:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800654c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006554:	4970      	ldr	r1, [pc, #448]	; (8006718 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8006556:	4313      	orrs	r3, r2
 8006558:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	f003 0320 	and.w	r3, r3, #32
 8006564:	2b00      	cmp	r3, #0
 8006566:	d00a      	beq.n	800657e <HAL_RCCEx_PeriphCLKConfig+0x36a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006568:	4b6b      	ldr	r3, [pc, #428]	; (8006718 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800656a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800656e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006576:	4968      	ldr	r1, [pc, #416]	; (8006718 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8006578:	4313      	orrs	r3, r2
 800657a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006586:	2b00      	cmp	r3, #0
 8006588:	d00a      	beq.n	80065a0 <HAL_RCCEx_PeriphCLKConfig+0x38c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800658a:	4b63      	ldr	r3, [pc, #396]	; (8006718 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800658c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006590:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006598:	495f      	ldr	r1, [pc, #380]	; (8006718 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800659a:	4313      	orrs	r3, r2
 800659c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d00a      	beq.n	80065c2 <HAL_RCCEx_PeriphCLKConfig+0x3ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80065ac:	4b5a      	ldr	r3, [pc, #360]	; (8006718 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80065ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80065b2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80065ba:	4957      	ldr	r1, [pc, #348]	; (8006718 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80065bc:	4313      	orrs	r3, r2
 80065be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d00a      	beq.n	80065e4 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLK(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 80065ce:	4b52      	ldr	r3, [pc, #328]	; (8006718 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80065d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80065d4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80065dc:	494e      	ldr	r1, [pc, #312]	; (8006718 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80065de:	4313      	orrs	r3, r2
 80065e0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- FDCAN kernel clock source configuration -------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == (RCC_PERIPHCLK_FDCAN))
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d031      	beq.n	8006654 <HAL_RCCEx_PeriphCLKConfig+0x440>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLK(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN kernel clock source */
    switch (PeriphClkInit->FdcanClockSelection)
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80065f4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80065f8:	d00e      	beq.n	8006618 <HAL_RCCEx_PeriphCLKConfig+0x404>
 80065fa:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80065fe:	d814      	bhi.n	800662a <HAL_RCCEx_PeriphCLKConfig+0x416>
 8006600:	2b00      	cmp	r3, #0
 8006602:	d015      	beq.n	8006630 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8006604:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006608:	d10f      	bne.n	800662a <HAL_RCCEx_PeriphCLKConfig+0x416>
        /* FDCAN kernel clock source config set later after clock selection check */
        break;

      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN kernel clock*/
        /* Enable PLL48M1CLK output clock generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800660a:	4b43      	ldr	r3, [pc, #268]	; (8006718 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800660c:	68db      	ldr	r3, [r3, #12]
 800660e:	4a42      	ldr	r2, [pc, #264]	; (8006718 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8006610:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006614:	60d3      	str	r3, [r2, #12]
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 8006616:	e00c      	b.n	8006632 <HAL_RCCEx_PeriphCLKConfig+0x41e>

      case RCC_FDCANCLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for FDCAN kernel clock*/
        /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	3304      	adds	r3, #4
 800661c:	2100      	movs	r1, #0
 800661e:	4618      	mov	r0, r3
 8006620:	f000 f97c 	bl	800691c <RCCEx_PLLSAI1_Config>
 8006624:	4603      	mov	r3, r0
 8006626:	77fb      	strb	r3, [r7, #31]
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 8006628:	e003      	b.n	8006632 <HAL_RCCEx_PeriphCLKConfig+0x41e>

      default:
        ret = HAL_ERROR;
 800662a:	2301      	movs	r3, #1
 800662c:	77fb      	strb	r3, [r7, #31]
        break;
 800662e:	e000      	b.n	8006632 <HAL_RCCEx_PeriphCLKConfig+0x41e>
        break;
 8006630:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006632:	7ffb      	ldrb	r3, [r7, #31]
 8006634:	2b00      	cmp	r3, #0
 8006636:	d10b      	bne.n	8006650 <HAL_RCCEx_PeriphCLKConfig+0x43c>
    {
      /* Set the source of FDCAN kernel clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8006638:	4b37      	ldr	r3, [pc, #220]	; (8006718 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800663a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800663e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006646:	4934      	ldr	r1, [pc, #208]	; (8006718 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8006648:	4313      	orrs	r3, r2
 800664a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800664e:	e001      	b.n	8006654 <HAL_RCCEx_PeriphCLKConfig+0x440>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006650:	7ffb      	ldrb	r3, [r7, #31]
 8006652:	77bb      	strb	r3, [r7, #30]
    }
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800665c:	2b00      	cmp	r3, #0
 800665e:	d00a      	beq.n	8006676 <HAL_RCCEx_PeriphCLKConfig+0x462>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006660:	4b2d      	ldr	r3, [pc, #180]	; (8006718 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8006662:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006666:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800666e:	492a      	ldr	r1, [pc, #168]	; (8006718 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8006670:	4313      	orrs	r3, r2
 8006672:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800667e:	2b00      	cmp	r3, #0
 8006680:	d00a      	beq.n	8006698 <HAL_RCCEx_PeriphCLKConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006682:	4b25      	ldr	r3, [pc, #148]	; (8006718 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8006684:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006688:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006690:	4921      	ldr	r1, [pc, #132]	; (8006718 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8006692:	4313      	orrs	r3, r2
 8006694:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d00a      	beq.n	80066ba <HAL_RCCEx_PeriphCLKConfig+0x4a6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80066a4:	4b1c      	ldr	r3, [pc, #112]	; (8006718 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80066a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80066aa:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80066b2:	4919      	ldr	r1, [pc, #100]	; (8006718 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80066b4:	4313      	orrs	r3, r2
 80066b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d00a      	beq.n	80066dc <HAL_RCCEx_PeriphCLKConfig+0x4c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80066c6:	4b14      	ldr	r3, [pc, #80]	; (8006718 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80066c8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80066cc:	f023 0203 	bic.w	r2, r3, #3
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80066d4:	4910      	ldr	r1, [pc, #64]	; (8006718 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80066d6:	4313      	orrs	r3, r2
 80066d8:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d02b      	beq.n	8006740 <HAL_RCCEx_PeriphCLKConfig+0x52c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80066e8:	4b0b      	ldr	r3, [pc, #44]	; (8006718 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80066ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80066ee:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80066f6:	4908      	ldr	r1, [pc, #32]	; (8006718 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80066f8:	4313      	orrs	r3, r2
 80066fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006702:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006706:	d109      	bne.n	800671c <HAL_RCCEx_PeriphCLKConfig+0x508>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006708:	4b03      	ldr	r3, [pc, #12]	; (8006718 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800670a:	68db      	ldr	r3, [r3, #12]
 800670c:	4a02      	ldr	r2, [pc, #8]	; (8006718 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800670e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006712:	60d3      	str	r3, [r2, #12]
 8006714:	e014      	b.n	8006740 <HAL_RCCEx_PeriphCLKConfig+0x52c>
 8006716:	bf00      	nop
 8006718:	40021000 	.word	0x40021000
    }
    else
    {
      if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006720:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006724:	d10c      	bne.n	8006740 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	3304      	adds	r3, #4
 800672a:	2101      	movs	r1, #1
 800672c:	4618      	mov	r0, r3
 800672e:	f000 f8f5 	bl	800691c <RCCEx_PLLSAI1_Config>
 8006732:	4603      	mov	r3, r0
 8006734:	77fb      	strb	r3, [r7, #31]

        if (ret != HAL_OK)
 8006736:	7ffb      	ldrb	r3, [r7, #31]
 8006738:	2b00      	cmp	r3, #0
 800673a:	d001      	beq.n	8006740 <HAL_RCCEx_PeriphCLKConfig+0x52c>
        {
          /* set overall return value */
          status = ret;
 800673c:	7ffb      	ldrb	r3, [r7, #31]
 800673e:	77bb      	strb	r3, [r7, #30]
  }

#endif /* USB */

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006748:	2b00      	cmp	r3, #0
 800674a:	d04a      	beq.n	80067e2 <HAL_RCCEx_PeriphCLKConfig+0x5ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006750:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006754:	d108      	bne.n	8006768 <HAL_RCCEx_PeriphCLKConfig+0x554>
 8006756:	4b70      	ldr	r3, [pc, #448]	; (8006918 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8006758:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800675c:	4a6e      	ldr	r2, [pc, #440]	; (8006918 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 800675e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006762:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8006766:	e012      	b.n	800678e <HAL_RCCEx_PeriphCLKConfig+0x57a>
 8006768:	4b6b      	ldr	r3, [pc, #428]	; (8006918 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 800676a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800676e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006776:	4968      	ldr	r1, [pc, #416]	; (8006918 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8006778:	4313      	orrs	r3, r2
 800677a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800677e:	4b66      	ldr	r3, [pc, #408]	; (8006918 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8006780:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006784:	4a64      	ldr	r2, [pc, #400]	; (8006918 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8006786:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800678a:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c

    if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006792:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006796:	d10d      	bne.n	80067b4 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	3304      	adds	r3, #4
 800679c:	2101      	movs	r1, #1
 800679e:	4618      	mov	r0, r3
 80067a0:	f000 f8bc 	bl	800691c <RCCEx_PLLSAI1_Config>
 80067a4:	4603      	mov	r3, r0
 80067a6:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 80067a8:	7ffb      	ldrb	r3, [r7, #31]
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d019      	beq.n	80067e2 <HAL_RCCEx_PeriphCLKConfig+0x5ce>
      {
        /* set overall return value */
        status = ret;
 80067ae:	7ffb      	ldrb	r3, [r7, #31]
 80067b0:	77bb      	strb	r3, [r7, #30]
 80067b2:	e016      	b.n	80067e2 <HAL_RCCEx_PeriphCLKConfig+0x5ce>
      }
    }
    else if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80067b8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80067bc:	d106      	bne.n	80067cc <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80067be:	4b56      	ldr	r3, [pc, #344]	; (8006918 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80067c0:	68db      	ldr	r3, [r3, #12]
 80067c2:	4a55      	ldr	r2, [pc, #340]	; (8006918 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80067c4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80067c8:	60d3      	str	r3, [r2, #12]
 80067ca:	e00a      	b.n	80067e2 <HAL_RCCEx_PeriphCLKConfig+0x5ce>
    }
    else if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP)
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80067d0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80067d4:	d105      	bne.n	80067e2 <HAL_RCCEx_PeriphCLKConfig+0x5ce>
    {
      /* Enable PLLSAI3CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80067d6:	4b50      	ldr	r3, [pc, #320]	; (8006918 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80067d8:	68db      	ldr	r3, [r3, #12]
 80067da:	4a4f      	ldr	r2, [pc, #316]	; (8006918 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80067dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80067e0:	60d3      	str	r3, [r2, #12]
      /* Nothing to do */
    }
  }

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d028      	beq.n	8006840 <HAL_RCCEx_PeriphCLKConfig+0x62c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80067ee:	4b4a      	ldr	r3, [pc, #296]	; (8006918 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80067f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80067f4:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80067fc:	4946      	ldr	r1, [pc, #280]	; (8006918 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80067fe:	4313      	orrs	r3, r2
 8006800:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006808:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800680c:	d106      	bne.n	800681c <HAL_RCCEx_PeriphCLKConfig+0x608>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800680e:	4b42      	ldr	r3, [pc, #264]	; (8006918 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8006810:	68db      	ldr	r3, [r3, #12]
 8006812:	4a41      	ldr	r2, [pc, #260]	; (8006918 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8006814:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006818:	60d3      	str	r3, [r2, #12]
 800681a:	e011      	b.n	8006840 <HAL_RCCEx_PeriphCLKConfig+0x62c>
    }
    else if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006820:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006824:	d10c      	bne.n	8006840 <HAL_RCCEx_PeriphCLKConfig+0x62c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	3304      	adds	r3, #4
 800682a:	2101      	movs	r1, #1
 800682c:	4618      	mov	r0, r3
 800682e:	f000 f875 	bl	800691c <RCCEx_PLLSAI1_Config>
 8006832:	4603      	mov	r3, r0
 8006834:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8006836:	7ffb      	ldrb	r3, [r7, #31]
 8006838:	2b00      	cmp	r3, #0
 800683a:	d001      	beq.n	8006840 <HAL_RCCEx_PeriphCLKConfig+0x62c>
      {
        /* set overall return value */
        status = ret;
 800683c:	7ffb      	ldrb	r3, [r7, #31]
 800683e:	77bb      	strb	r3, [r7, #30]
      /* Nothing to do */
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006848:	2b00      	cmp	r3, #0
 800684a:	d01e      	beq.n	800688a <HAL_RCCEx_PeriphCLKConfig+0x676>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800684c:	4b32      	ldr	r3, [pc, #200]	; (8006918 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 800684e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006852:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800685c:	492e      	ldr	r1, [pc, #184]	; (8006918 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 800685e:	4313      	orrs	r3, r2
 8006860:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800686a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800686e:	d10c      	bne.n	800688a <HAL_RCCEx_PeriphCLKConfig+0x676>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	3304      	adds	r3, #4
 8006874:	2102      	movs	r1, #2
 8006876:	4618      	mov	r0, r3
 8006878:	f000 f850 	bl	800691c <RCCEx_PLLSAI1_Config>
 800687c:	4603      	mov	r3, r0
 800687e:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8006880:	7ffb      	ldrb	r3, [r7, #31]
 8006882:	2b00      	cmp	r3, #0
 8006884:	d001      	beq.n	800688a <HAL_RCCEx_PeriphCLKConfig+0x676>
      {
        /* set overall return value */
        status = ret;
 8006886:	7ffb      	ldrb	r3, [r7, #31]
 8006888:	77bb      	strb	r3, [r7, #30]
      }
    }
  }

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006892:	2b00      	cmp	r3, #0
 8006894:	d00b      	beq.n	80068ae <HAL_RCCEx_PeriphCLKConfig+0x69a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8006896:	4b20      	ldr	r3, [pc, #128]	; (8006918 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8006898:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800689c:	f023 0204 	bic.w	r2, r3, #4
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80068a6:	491c      	ldr	r1, [pc, #112]	; (8006918 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80068a8:	4313      	orrs	r3, r2
 80068aa:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d00b      	beq.n	80068d2 <HAL_RCCEx_PeriphCLKConfig+0x6be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80068ba:	4b17      	ldr	r3, [pc, #92]	; (8006918 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80068bc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80068c0:	f023 0218 	bic.w	r2, r3, #24
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80068ca:	4913      	ldr	r1, [pc, #76]	; (8006918 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80068cc:	4313      	orrs	r3, r2
 80068ce:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d017      	beq.n	800690e <HAL_RCCEx_PeriphCLKConfig+0x6fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 80068de:	4b0e      	ldr	r3, [pc, #56]	; (8006918 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80068e0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80068e4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80068ee:	490a      	ldr	r1, [pc, #40]	; (8006918 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80068f0:	4313      	orrs	r3, r2
 80068f2:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if (PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80068fc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006900:	d105      	bne.n	800690e <HAL_RCCEx_PeriphCLKConfig+0x6fa>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006902:	4b05      	ldr	r3, [pc, #20]	; (8006918 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8006904:	68db      	ldr	r3, [r3, #12]
 8006906:	4a04      	ldr	r2, [pc, #16]	; (8006918 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8006908:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800690c:	60d3      	str	r3, [r2, #12]
    }
  }

  return status;
 800690e:	7fbb      	ldrb	r3, [r7, #30]
}
 8006910:	4618      	mov	r0, r3
 8006912:	3720      	adds	r7, #32
 8006914:	46bd      	mov	sp, r7
 8006916:	bd80      	pop	{r7, pc}
 8006918:	40021000 	.word	0x40021000

0800691c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *pPllSai1, uint32_t Divider)
{
 800691c:	b580      	push	{r7, lr}
 800691e:	b084      	sub	sp, #16
 8006920:	af00      	add	r7, sp, #0
 8006922:	6078      	str	r0, [r7, #4]
 8006924:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006926:	2300      	movs	r3, #0
 8006928:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(pPllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(pPllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(pPllSai1->PLLSAI1ClockOut));

  /* Check PLLSAI1 clock source availability */
  switch (pPllSai1->PLLSAI1Source)
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	2b03      	cmp	r3, #3
 8006930:	d018      	beq.n	8006964 <RCCEx_PLLSAI1_Config+0x48>
 8006932:	2b03      	cmp	r3, #3
 8006934:	d81f      	bhi.n	8006976 <RCCEx_PLLSAI1_Config+0x5a>
 8006936:	2b01      	cmp	r3, #1
 8006938:	d002      	beq.n	8006940 <RCCEx_PLLSAI1_Config+0x24>
 800693a:	2b02      	cmp	r3, #2
 800693c:	d009      	beq.n	8006952 <RCCEx_PLLSAI1_Config+0x36>
 800693e:	e01a      	b.n	8006976 <RCCEx_PLLSAI1_Config+0x5a>
  {
    case RCC_PLLSOURCE_MSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8006940:	4b65      	ldr	r3, [pc, #404]	; (8006ad8 <RCCEx_PLLSAI1_Config+0x1bc>)
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	f003 0302 	and.w	r3, r3, #2
 8006948:	2b00      	cmp	r3, #0
 800694a:	d117      	bne.n	800697c <RCCEx_PLLSAI1_Config+0x60>
      {
        status = HAL_ERROR;
 800694c:	2301      	movs	r3, #1
 800694e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006950:	e014      	b.n	800697c <RCCEx_PLLSAI1_Config+0x60>
    case RCC_PLLSOURCE_HSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8006952:	4b61      	ldr	r3, [pc, #388]	; (8006ad8 <RCCEx_PLLSAI1_Config+0x1bc>)
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800695a:	2b00      	cmp	r3, #0
 800695c:	d110      	bne.n	8006980 <RCCEx_PLLSAI1_Config+0x64>
      {
        status = HAL_ERROR;
 800695e:	2301      	movs	r3, #1
 8006960:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006962:	e00d      	b.n	8006980 <RCCEx_PLLSAI1_Config+0x64>
    case RCC_PLLSOURCE_HSE:
      if (HAL_IS_BIT_CLR(RCC->CR, (RCC_CR_HSERDY | RCC_CR_HSEBYP)))
 8006964:	4b5c      	ldr	r3, [pc, #368]	; (8006ad8 <RCCEx_PLLSAI1_Config+0x1bc>)
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 800696c:	2b00      	cmp	r3, #0
 800696e:	d109      	bne.n	8006984 <RCCEx_PLLSAI1_Config+0x68>
      {
        status = HAL_ERROR;
 8006970:	2301      	movs	r3, #1
 8006972:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006974:	e006      	b.n	8006984 <RCCEx_PLLSAI1_Config+0x68>
    default:
      status = HAL_ERROR;
 8006976:	2301      	movs	r3, #1
 8006978:	73fb      	strb	r3, [r7, #15]
      break;
 800697a:	e004      	b.n	8006986 <RCCEx_PLLSAI1_Config+0x6a>
      break;
 800697c:	bf00      	nop
 800697e:	e002      	b.n	8006986 <RCCEx_PLLSAI1_Config+0x6a>
      break;
 8006980:	bf00      	nop
 8006982:	e000      	b.n	8006986 <RCCEx_PLLSAI1_Config+0x6a>
      break;
 8006984:	bf00      	nop
  }

  if (status == HAL_OK)
 8006986:	7bfb      	ldrb	r3, [r7, #15]
 8006988:	2b00      	cmp	r3, #0
 800698a:	f040 809f 	bne.w	8006acc <RCCEx_PLLSAI1_Config+0x1b0>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800698e:	4b52      	ldr	r3, [pc, #328]	; (8006ad8 <RCCEx_PLLSAI1_Config+0x1bc>)
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	4a51      	ldr	r2, [pc, #324]	; (8006ad8 <RCCEx_PLLSAI1_Config+0x1bc>)
 8006994:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006998:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800699a:	f7fb fda5 	bl	80024e8 <HAL_GetTick>
 800699e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80069a0:	e00f      	b.n	80069c2 <RCCEx_PLLSAI1_Config+0xa6>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80069a2:	f7fb fda1 	bl	80024e8 <HAL_GetTick>
 80069a6:	4602      	mov	r2, r0
 80069a8:	68bb      	ldr	r3, [r7, #8]
 80069aa:	1ad3      	subs	r3, r2, r3
 80069ac:	2b02      	cmp	r3, #2
 80069ae:	d908      	bls.n	80069c2 <RCCEx_PLLSAI1_Config+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80069b0:	4b49      	ldr	r3, [pc, #292]	; (8006ad8 <RCCEx_PLLSAI1_Config+0x1bc>)
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d009      	beq.n	80069d0 <RCCEx_PLLSAI1_Config+0xb4>
        {
          status = HAL_TIMEOUT;
 80069bc:	2303      	movs	r3, #3
 80069be:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80069c0:	e006      	b.n	80069d0 <RCCEx_PLLSAI1_Config+0xb4>
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80069c2:	4b45      	ldr	r3, [pc, #276]	; (8006ad8 <RCCEx_PLLSAI1_Config+0x1bc>)
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d1e9      	bne.n	80069a2 <RCCEx_PLLSAI1_Config+0x86>
 80069ce:	e000      	b.n	80069d2 <RCCEx_PLLSAI1_Config+0xb6>
        break;
 80069d0:	bf00      	nop
      }
    }

    if (status == HAL_OK)
 80069d2:	7bfb      	ldrb	r3, [r7, #15]
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d179      	bne.n	8006acc <RCCEx_PLLSAI1_Config+0x1b0>
    {
      if (Divider == DIVIDER_P_UPDATE)
 80069d8:	683b      	ldr	r3, [r7, #0]
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d116      	bne.n	8006a0c <RCCEx_PLLSAI1_Config+0xf0>
      {
        assert_param(IS_RCC_PLLSAI1P_VALUE(pPllSai1->PLLSAI1P));

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80069de:	4b3e      	ldr	r3, [pc, #248]	; (8006ad8 <RCCEx_PLLSAI1_Config+0x1bc>)
 80069e0:	691a      	ldr	r2, [r3, #16]
 80069e2:	4b3e      	ldr	r3, [pc, #248]	; (8006adc <RCCEx_PLLSAI1_Config+0x1c0>)
 80069e4:	4013      	ands	r3, r2
 80069e6:	687a      	ldr	r2, [r7, #4]
 80069e8:	6892      	ldr	r2, [r2, #8]
 80069ea:	0211      	lsls	r1, r2, #8
 80069ec:	687a      	ldr	r2, [r7, #4]
 80069ee:	68d2      	ldr	r2, [r2, #12]
 80069f0:	06d2      	lsls	r2, r2, #27
 80069f2:	4311      	orrs	r1, r2
 80069f4:	687a      	ldr	r2, [r7, #4]
 80069f6:	6852      	ldr	r2, [r2, #4]
 80069f8:	3a01      	subs	r2, #1
 80069fa:	0112      	lsls	r2, r2, #4
 80069fc:	4311      	orrs	r1, r2
 80069fe:	687a      	ldr	r2, [r7, #4]
 8006a00:	6812      	ldr	r2, [r2, #0]
 8006a02:	430a      	orrs	r2, r1
 8006a04:	4934      	ldr	r1, [pc, #208]	; (8006ad8 <RCCEx_PLLSAI1_Config+0x1bc>)
 8006a06:	4313      	orrs	r3, r2
 8006a08:	610b      	str	r3, [r1, #16]
 8006a0a:	e033      	b.n	8006a74 <RCCEx_PLLSAI1_Config+0x158>
                   (pPllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (pPllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos) |
                   ((pPllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos) |
                   pPllSai1->PLLSAI1Source);
      }
      else if (Divider == DIVIDER_Q_UPDATE)
 8006a0c:	683b      	ldr	r3, [r7, #0]
 8006a0e:	2b01      	cmp	r3, #1
 8006a10:	d118      	bne.n	8006a44 <RCCEx_PLLSAI1_Config+0x128>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(pPllSai1->PLLSAI1Q));

        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006a12:	4b31      	ldr	r3, [pc, #196]	; (8006ad8 <RCCEx_PLLSAI1_Config+0x1bc>)
 8006a14:	691a      	ldr	r2, [r3, #16]
 8006a16:	4b32      	ldr	r3, [pc, #200]	; (8006ae0 <RCCEx_PLLSAI1_Config+0x1c4>)
 8006a18:	4013      	ands	r3, r2
 8006a1a:	687a      	ldr	r2, [r7, #4]
 8006a1c:	6892      	ldr	r2, [r2, #8]
 8006a1e:	0211      	lsls	r1, r2, #8
 8006a20:	687a      	ldr	r2, [r7, #4]
 8006a22:	6912      	ldr	r2, [r2, #16]
 8006a24:	0852      	lsrs	r2, r2, #1
 8006a26:	3a01      	subs	r2, #1
 8006a28:	0552      	lsls	r2, r2, #21
 8006a2a:	4311      	orrs	r1, r2
 8006a2c:	687a      	ldr	r2, [r7, #4]
 8006a2e:	6852      	ldr	r2, [r2, #4]
 8006a30:	3a01      	subs	r2, #1
 8006a32:	0112      	lsls	r2, r2, #4
 8006a34:	4311      	orrs	r1, r2
 8006a36:	687a      	ldr	r2, [r7, #4]
 8006a38:	6812      	ldr	r2, [r2, #0]
 8006a3a:	430a      	orrs	r2, r1
 8006a3c:	4926      	ldr	r1, [pc, #152]	; (8006ad8 <RCCEx_PLLSAI1_Config+0x1bc>)
 8006a3e:	4313      	orrs	r3, r2
 8006a40:	610b      	str	r3, [r1, #16]
 8006a42:	e017      	b.n	8006a74 <RCCEx_PLLSAI1_Config+0x158>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(pPllSai1->PLLSAI1R));

        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006a44:	4b24      	ldr	r3, [pc, #144]	; (8006ad8 <RCCEx_PLLSAI1_Config+0x1bc>)
 8006a46:	691a      	ldr	r2, [r3, #16]
 8006a48:	4b26      	ldr	r3, [pc, #152]	; (8006ae4 <RCCEx_PLLSAI1_Config+0x1c8>)
 8006a4a:	4013      	ands	r3, r2
 8006a4c:	687a      	ldr	r2, [r7, #4]
 8006a4e:	6892      	ldr	r2, [r2, #8]
 8006a50:	0211      	lsls	r1, r2, #8
 8006a52:	687a      	ldr	r2, [r7, #4]
 8006a54:	6952      	ldr	r2, [r2, #20]
 8006a56:	0852      	lsrs	r2, r2, #1
 8006a58:	3a01      	subs	r2, #1
 8006a5a:	0652      	lsls	r2, r2, #25
 8006a5c:	4311      	orrs	r1, r2
 8006a5e:	687a      	ldr	r2, [r7, #4]
 8006a60:	6852      	ldr	r2, [r2, #4]
 8006a62:	3a01      	subs	r2, #1
 8006a64:	0112      	lsls	r2, r2, #4
 8006a66:	4311      	orrs	r1, r2
 8006a68:	687a      	ldr	r2, [r7, #4]
 8006a6a:	6812      	ldr	r2, [r2, #0]
 8006a6c:	430a      	orrs	r2, r1
 8006a6e:	491a      	ldr	r1, [pc, #104]	; (8006ad8 <RCCEx_PLLSAI1_Config+0x1bc>)
 8006a70:	4313      	orrs	r3, r2
 8006a72:	610b      	str	r3, [r1, #16]
                   ((pPllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos) |
                   pPllSai1->PLLSAI1Source);
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8006a74:	4b18      	ldr	r3, [pc, #96]	; (8006ad8 <RCCEx_PLLSAI1_Config+0x1bc>)
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	4a17      	ldr	r2, [pc, #92]	; (8006ad8 <RCCEx_PLLSAI1_Config+0x1bc>)
 8006a7a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006a7e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006a80:	f7fb fd32 	bl	80024e8 <HAL_GetTick>
 8006a84:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8006a86:	e00f      	b.n	8006aa8 <RCCEx_PLLSAI1_Config+0x18c>
      {
        if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006a88:	f7fb fd2e 	bl	80024e8 <HAL_GetTick>
 8006a8c:	4602      	mov	r2, r0
 8006a8e:	68bb      	ldr	r3, [r7, #8]
 8006a90:	1ad3      	subs	r3, r2, r3
 8006a92:	2b02      	cmp	r3, #2
 8006a94:	d908      	bls.n	8006aa8 <RCCEx_PLLSAI1_Config+0x18c>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8006a96:	4b10      	ldr	r3, [pc, #64]	; (8006ad8 <RCCEx_PLLSAI1_Config+0x1bc>)
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d109      	bne.n	8006ab6 <RCCEx_PLLSAI1_Config+0x19a>
          {
            status = HAL_TIMEOUT;
 8006aa2:	2303      	movs	r3, #3
 8006aa4:	73fb      	strb	r3, [r7, #15]
          }
          break;
 8006aa6:	e006      	b.n	8006ab6 <RCCEx_PLLSAI1_Config+0x19a>
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8006aa8:	4b0b      	ldr	r3, [pc, #44]	; (8006ad8 <RCCEx_PLLSAI1_Config+0x1bc>)
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d0e9      	beq.n	8006a88 <RCCEx_PLLSAI1_Config+0x16c>
 8006ab4:	e000      	b.n	8006ab8 <RCCEx_PLLSAI1_Config+0x19c>
          break;
 8006ab6:	bf00      	nop
        }
      }

      if (status == HAL_OK)
 8006ab8:	7bfb      	ldrb	r3, [r7, #15]
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d106      	bne.n	8006acc <RCCEx_PLLSAI1_Config+0x1b0>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(pPllSai1->PLLSAI1ClockOut);
 8006abe:	4b06      	ldr	r3, [pc, #24]	; (8006ad8 <RCCEx_PLLSAI1_Config+0x1bc>)
 8006ac0:	691a      	ldr	r2, [r3, #16]
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	699b      	ldr	r3, [r3, #24]
 8006ac6:	4904      	ldr	r1, [pc, #16]	; (8006ad8 <RCCEx_PLLSAI1_Config+0x1bc>)
 8006ac8:	4313      	orrs	r3, r2
 8006aca:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8006acc:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ace:	4618      	mov	r0, r3
 8006ad0:	3710      	adds	r7, #16
 8006ad2:	46bd      	mov	sp, r7
 8006ad4:	bd80      	pop	{r7, pc}
 8006ad6:	bf00      	nop
 8006ad8:	40021000 	.word	0x40021000
 8006adc:	07ff800c 	.word	0x07ff800c
 8006ae0:	ff9f800c 	.word	0xff9f800c
 8006ae4:	f9ff800c 	.word	0xf9ff800c

08006ae8 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *pPllSai2, uint32_t Divider)
{
 8006ae8:	b580      	push	{r7, lr}
 8006aea:	b084      	sub	sp, #16
 8006aec:	af00      	add	r7, sp, #0
 8006aee:	6078      	str	r0, [r7, #4]
 8006af0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006af2:	2300      	movs	r3, #0
 8006af4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(pPllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(pPllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(pPllSai2->PLLSAI2ClockOut));

  /* Check PLLSAI2 clock source availability */
  switch (pPllSai2->PLLSAI2Source)
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	2b03      	cmp	r3, #3
 8006afc:	d018      	beq.n	8006b30 <RCCEx_PLLSAI2_Config+0x48>
 8006afe:	2b03      	cmp	r3, #3
 8006b00:	d81f      	bhi.n	8006b42 <RCCEx_PLLSAI2_Config+0x5a>
 8006b02:	2b01      	cmp	r3, #1
 8006b04:	d002      	beq.n	8006b0c <RCCEx_PLLSAI2_Config+0x24>
 8006b06:	2b02      	cmp	r3, #2
 8006b08:	d009      	beq.n	8006b1e <RCCEx_PLLSAI2_Config+0x36>
 8006b0a:	e01a      	b.n	8006b42 <RCCEx_PLLSAI2_Config+0x5a>
  {
    case RCC_PLLSOURCE_MSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8006b0c:	4b4a      	ldr	r3, [pc, #296]	; (8006c38 <RCCEx_PLLSAI2_Config+0x150>)
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	f003 0302 	and.w	r3, r3, #2
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d117      	bne.n	8006b48 <RCCEx_PLLSAI2_Config+0x60>
      {
        status = HAL_ERROR;
 8006b18:	2301      	movs	r3, #1
 8006b1a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006b1c:	e014      	b.n	8006b48 <RCCEx_PLLSAI2_Config+0x60>
    case RCC_PLLSOURCE_HSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8006b1e:	4b46      	ldr	r3, [pc, #280]	; (8006c38 <RCCEx_PLLSAI2_Config+0x150>)
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d110      	bne.n	8006b4c <RCCEx_PLLSAI2_Config+0x64>
      {
        status = HAL_ERROR;
 8006b2a:	2301      	movs	r3, #1
 8006b2c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006b2e:	e00d      	b.n	8006b4c <RCCEx_PLLSAI2_Config+0x64>
    case RCC_PLLSOURCE_HSE:
      if (HAL_IS_BIT_CLR(RCC->CR, (RCC_CR_HSERDY | RCC_CR_HSEBYP)))
 8006b30:	4b41      	ldr	r3, [pc, #260]	; (8006c38 <RCCEx_PLLSAI2_Config+0x150>)
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d109      	bne.n	8006b50 <RCCEx_PLLSAI2_Config+0x68>
      {
        status = HAL_ERROR;
 8006b3c:	2301      	movs	r3, #1
 8006b3e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006b40:	e006      	b.n	8006b50 <RCCEx_PLLSAI2_Config+0x68>
    default:
      status = HAL_ERROR;
 8006b42:	2301      	movs	r3, #1
 8006b44:	73fb      	strb	r3, [r7, #15]
      break;
 8006b46:	e004      	b.n	8006b52 <RCCEx_PLLSAI2_Config+0x6a>
      break;
 8006b48:	bf00      	nop
 8006b4a:	e002      	b.n	8006b52 <RCCEx_PLLSAI2_Config+0x6a>
      break;
 8006b4c:	bf00      	nop
 8006b4e:	e000      	b.n	8006b52 <RCCEx_PLLSAI2_Config+0x6a>
      break;
 8006b50:	bf00      	nop
  }

  if (status == HAL_OK)
 8006b52:	7bfb      	ldrb	r3, [r7, #15]
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d169      	bne.n	8006c2c <RCCEx_PLLSAI2_Config+0x144>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8006b58:	4b37      	ldr	r3, [pc, #220]	; (8006c38 <RCCEx_PLLSAI2_Config+0x150>)
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	4a36      	ldr	r2, [pc, #216]	; (8006c38 <RCCEx_PLLSAI2_Config+0x150>)
 8006b5e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006b62:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006b64:	f7fb fcc0 	bl	80024e8 <HAL_GetTick>
 8006b68:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8006b6a:	e00f      	b.n	8006b8c <RCCEx_PLLSAI2_Config+0xa4>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8006b6c:	f7fb fcbc 	bl	80024e8 <HAL_GetTick>
 8006b70:	4602      	mov	r2, r0
 8006b72:	68bb      	ldr	r3, [r7, #8]
 8006b74:	1ad3      	subs	r3, r2, r3
 8006b76:	2b02      	cmp	r3, #2
 8006b78:	d908      	bls.n	8006b8c <RCCEx_PLLSAI2_Config+0xa4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8006b7a:	4b2f      	ldr	r3, [pc, #188]	; (8006c38 <RCCEx_PLLSAI2_Config+0x150>)
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d009      	beq.n	8006b9a <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_TIMEOUT;
 8006b86:	2303      	movs	r3, #3
 8006b88:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8006b8a:	e006      	b.n	8006b9a <RCCEx_PLLSAI2_Config+0xb2>
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8006b8c:	4b2a      	ldr	r3, [pc, #168]	; (8006c38 <RCCEx_PLLSAI2_Config+0x150>)
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d1e9      	bne.n	8006b6c <RCCEx_PLLSAI2_Config+0x84>
 8006b98:	e000      	b.n	8006b9c <RCCEx_PLLSAI2_Config+0xb4>
        break;
 8006b9a:	bf00      	nop
      }
    }

    if (status == HAL_OK)
 8006b9c:	7bfb      	ldrb	r3, [r7, #15]
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d144      	bne.n	8006c2c <RCCEx_PLLSAI2_Config+0x144>
    {
      if (Divider == DIVIDER_P_UPDATE)
 8006ba2:	683b      	ldr	r3, [r7, #0]
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	d115      	bne.n	8006bd4 <RCCEx_PLLSAI2_Config+0xec>
      {
        assert_param(IS_RCC_PLLSAI2P_VALUE(pPllSai2->PLLSAI2P));

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8006ba8:	4b23      	ldr	r3, [pc, #140]	; (8006c38 <RCCEx_PLLSAI2_Config+0x150>)
 8006baa:	695a      	ldr	r2, [r3, #20]
 8006bac:	4b23      	ldr	r3, [pc, #140]	; (8006c3c <RCCEx_PLLSAI2_Config+0x154>)
 8006bae:	4013      	ands	r3, r2
 8006bb0:	687a      	ldr	r2, [r7, #4]
 8006bb2:	6892      	ldr	r2, [r2, #8]
 8006bb4:	0211      	lsls	r1, r2, #8
 8006bb6:	687a      	ldr	r2, [r7, #4]
 8006bb8:	68d2      	ldr	r2, [r2, #12]
 8006bba:	06d2      	lsls	r2, r2, #27
 8006bbc:	4311      	orrs	r1, r2
 8006bbe:	687a      	ldr	r2, [r7, #4]
 8006bc0:	6852      	ldr	r2, [r2, #4]
 8006bc2:	3a01      	subs	r2, #1
 8006bc4:	0112      	lsls	r2, r2, #4
 8006bc6:	4311      	orrs	r1, r2
 8006bc8:	687a      	ldr	r2, [r7, #4]
 8006bca:	6812      	ldr	r2, [r2, #0]
 8006bcc:	430a      	orrs	r2, r1
 8006bce:	491a      	ldr	r1, [pc, #104]	; (8006c38 <RCCEx_PLLSAI2_Config+0x150>)
 8006bd0:	4313      	orrs	r3, r2
 8006bd2:	614b      	str	r3, [r1, #20]
                   pPllSai2->PLLSAI2Source);

      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8006bd4:	4b18      	ldr	r3, [pc, #96]	; (8006c38 <RCCEx_PLLSAI2_Config+0x150>)
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	4a17      	ldr	r2, [pc, #92]	; (8006c38 <RCCEx_PLLSAI2_Config+0x150>)
 8006bda:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006bde:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006be0:	f7fb fc82 	bl	80024e8 <HAL_GetTick>
 8006be4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8006be6:	e00f      	b.n	8006c08 <RCCEx_PLLSAI2_Config+0x120>
      {
        if ((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8006be8:	f7fb fc7e 	bl	80024e8 <HAL_GetTick>
 8006bec:	4602      	mov	r2, r0
 8006bee:	68bb      	ldr	r3, [r7, #8]
 8006bf0:	1ad3      	subs	r3, r2, r3
 8006bf2:	2b02      	cmp	r3, #2
 8006bf4:	d908      	bls.n	8006c08 <RCCEx_PLLSAI2_Config+0x120>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8006bf6:	4b10      	ldr	r3, [pc, #64]	; (8006c38 <RCCEx_PLLSAI2_Config+0x150>)
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d109      	bne.n	8006c16 <RCCEx_PLLSAI2_Config+0x12e>
          {
            status = HAL_TIMEOUT;
 8006c02:	2303      	movs	r3, #3
 8006c04:	73fb      	strb	r3, [r7, #15]
          }
          break;
 8006c06:	e006      	b.n	8006c16 <RCCEx_PLLSAI2_Config+0x12e>
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8006c08:	4b0b      	ldr	r3, [pc, #44]	; (8006c38 <RCCEx_PLLSAI2_Config+0x150>)
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d0e9      	beq.n	8006be8 <RCCEx_PLLSAI2_Config+0x100>
 8006c14:	e000      	b.n	8006c18 <RCCEx_PLLSAI2_Config+0x130>
          break;
 8006c16:	bf00      	nop
        }
      }

      if (status == HAL_OK)
 8006c18:	7bfb      	ldrb	r3, [r7, #15]
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d106      	bne.n	8006c2c <RCCEx_PLLSAI2_Config+0x144>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(pPllSai2->PLLSAI2ClockOut);
 8006c1e:	4b06      	ldr	r3, [pc, #24]	; (8006c38 <RCCEx_PLLSAI2_Config+0x150>)
 8006c20:	695a      	ldr	r2, [r3, #20]
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	691b      	ldr	r3, [r3, #16]
 8006c26:	4904      	ldr	r1, [pc, #16]	; (8006c38 <RCCEx_PLLSAI2_Config+0x150>)
 8006c28:	4313      	orrs	r3, r2
 8006c2a:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8006c2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c2e:	4618      	mov	r0, r3
 8006c30:	3710      	adds	r7, #16
 8006c32:	46bd      	mov	sp, r7
 8006c34:	bd80      	pop	{r7, pc}
 8006c36:	bf00      	nop
 8006c38:	40021000 	.word	0x40021000
 8006c3c:	07ff800c 	.word	0x07ff800c

08006c40 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8006c40:	b580      	push	{r7, lr}
 8006c42:	b084      	sub	sp, #16
 8006c44:	af00      	add	r7, sp, #0
 8006c46:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8006c48:	2301      	movs	r3, #1
 8006c4a:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d066      	beq.n	8006d20 <HAL_RTC_Init+0xe0>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8006c58:	b2db      	uxtb	r3, r3
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d106      	bne.n	8006c6c <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	2200      	movs	r2, #0
 8006c62:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8006c66:	6878      	ldr	r0, [r7, #4]
 8006c68:	f7fa ff84 	bl	8001b74 <HAL_RTC_MspInit>
    }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	2202      	movs	r2, #2
 8006c70:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	68db      	ldr	r3, [r3, #12]
 8006c7a:	f003 0310 	and.w	r3, r3, #16
 8006c7e:	2b10      	cmp	r3, #16
 8006c80:	d045      	beq.n	8006d0e <HAL_RTC_Init+0xce>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006c82:	4b2a      	ldr	r3, [pc, #168]	; (8006d2c <HAL_RTC_Init+0xec>)
 8006c84:	22ca      	movs	r2, #202	; 0xca
 8006c86:	625a      	str	r2, [r3, #36]	; 0x24
 8006c88:	4b28      	ldr	r3, [pc, #160]	; (8006d2c <HAL_RTC_Init+0xec>)
 8006c8a:	2253      	movs	r2, #83	; 0x53
 8006c8c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 8006c8e:	6878      	ldr	r0, [r7, #4]
 8006c90:	f000 f872 	bl	8006d78 <RTC_EnterInitMode>
 8006c94:	4603      	mov	r3, r0
 8006c96:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8006c98:	7bfb      	ldrb	r3, [r7, #15]
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d121      	bne.n	8006ce2 <HAL_RTC_Init+0xa2>
      {
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        CLEAR_BIT(RTC->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 8006c9e:	4b23      	ldr	r3, [pc, #140]	; (8006d2c <HAL_RTC_Init+0xec>)
 8006ca0:	699b      	ldr	r3, [r3, #24]
 8006ca2:	4a22      	ldr	r2, [pc, #136]	; (8006d2c <HAL_RTC_Init+0xec>)
 8006ca4:	f023 638e 	bic.w	r3, r3, #74448896	; 0x4700000
 8006ca8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006cac:	6193      	str	r3, [r2, #24]
        /* Set RTC_CR register */
        SET_BIT(RTC->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 8006cae:	4b1f      	ldr	r3, [pc, #124]	; (8006d2c <HAL_RTC_Init+0xec>)
 8006cb0:	699a      	ldr	r2, [r3, #24]
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	6859      	ldr	r1, [r3, #4]
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	691b      	ldr	r3, [r3, #16]
 8006cba:	4319      	orrs	r1, r3
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	699b      	ldr	r3, [r3, #24]
 8006cc0:	430b      	orrs	r3, r1
 8006cc2:	491a      	ldr	r1, [pc, #104]	; (8006d2c <HAL_RTC_Init+0xec>)
 8006cc4:	4313      	orrs	r3, r2
 8006cc6:	618b      	str	r3, [r1, #24]

        /* Configure the RTC PRER */
        WRITE_REG(RTC->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	68da      	ldr	r2, [r3, #12]
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	689b      	ldr	r3, [r3, #8]
 8006cd0:	041b      	lsls	r3, r3, #16
 8006cd2:	4916      	ldr	r1, [pc, #88]	; (8006d2c <HAL_RTC_Init+0xec>)
 8006cd4:	4313      	orrs	r3, r2
 8006cd6:	610b      	str	r3, [r1, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 8006cd8:	6878      	ldr	r0, [r7, #4]
 8006cda:	f000 f881 	bl	8006de0 <RTC_ExitInitMode>
 8006cde:	4603      	mov	r3, r0
 8006ce0:	73fb      	strb	r3, [r7, #15]
      }

      if (status == HAL_OK)
 8006ce2:	7bfb      	ldrb	r3, [r7, #15]
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d10e      	bne.n	8006d06 <HAL_RTC_Init+0xc6>
      {
        MODIFY_REG(RTC->CR, \
 8006ce8:	4b10      	ldr	r3, [pc, #64]	; (8006d2c <HAL_RTC_Init+0xec>)
 8006cea:	699b      	ldr	r3, [r3, #24]
 8006cec:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	6a19      	ldr	r1, [r3, #32]
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	69db      	ldr	r3, [r3, #28]
 8006cf8:	4319      	orrs	r1, r3
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	695b      	ldr	r3, [r3, #20]
 8006cfe:	430b      	orrs	r3, r1
 8006d00:	490a      	ldr	r1, [pc, #40]	; (8006d2c <HAL_RTC_Init+0xec>)
 8006d02:	4313      	orrs	r3, r2
 8006d04:	618b      	str	r3, [r1, #24]
                   hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
      }


    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006d06:	4b09      	ldr	r3, [pc, #36]	; (8006d2c <HAL_RTC_Init+0xec>)
 8006d08:	22ff      	movs	r2, #255	; 0xff
 8006d0a:	625a      	str	r2, [r3, #36]	; 0x24
 8006d0c:	e001      	b.n	8006d12 <HAL_RTC_Init+0xd2>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 8006d0e:	2300      	movs	r3, #0
 8006d10:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8006d12:	7bfb      	ldrb	r3, [r7, #15]
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d103      	bne.n	8006d20 <HAL_RTC_Init+0xe0>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	2201      	movs	r2, #1
 8006d1c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
  }

  return status;
 8006d20:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d22:	4618      	mov	r0, r3
 8006d24:	3710      	adds	r7, #16
 8006d26:	46bd      	mov	sp, r7
 8006d28:	bd80      	pop	{r7, pc}
 8006d2a:	bf00      	nop
 8006d2c:	40002800 	.word	0x40002800

08006d30 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8006d30:	b580      	push	{r7, lr}
 8006d32:	b084      	sub	sp, #16
 8006d34:	af00      	add	r7, sp, #0
 8006d36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  UNUSED(hrtc);
  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  WRITE_REG(RTC->ICSR, ((uint32_t)(RTC_RSF_MASK & RTC_ICSR_RESERVED_MASK)));
 8006d38:	4b0d      	ldr	r3, [pc, #52]	; (8006d70 <HAL_RTC_WaitForSynchro+0x40>)
 8006d3a:	4a0e      	ldr	r2, [pc, #56]	; (8006d74 <HAL_RTC_WaitForSynchro+0x44>)
 8006d3c:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8006d3e:	f7fb fbd3 	bl	80024e8 <HAL_GetTick>
 8006d42:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 8006d44:	e009      	b.n	8006d5a <HAL_RTC_WaitForSynchro+0x2a>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8006d46:	f7fb fbcf 	bl	80024e8 <HAL_GetTick>
 8006d4a:	4602      	mov	r2, r0
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	1ad3      	subs	r3, r2, r3
 8006d50:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006d54:	d901      	bls.n	8006d5a <HAL_RTC_WaitForSynchro+0x2a>
    {
      return HAL_TIMEOUT;
 8006d56:	2303      	movs	r3, #3
 8006d58:	e006      	b.n	8006d68 <HAL_RTC_WaitForSynchro+0x38>
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 8006d5a:	4b05      	ldr	r3, [pc, #20]	; (8006d70 <HAL_RTC_WaitForSynchro+0x40>)
 8006d5c:	68db      	ldr	r3, [r3, #12]
 8006d5e:	f003 0320 	and.w	r3, r3, #32
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d0ef      	beq.n	8006d46 <HAL_RTC_WaitForSynchro+0x16>
    }
  }

  return HAL_OK;
 8006d66:	2300      	movs	r3, #0
}
 8006d68:	4618      	mov	r0, r3
 8006d6a:	3710      	adds	r7, #16
 8006d6c:	46bd      	mov	sp, r7
 8006d6e:	bd80      	pop	{r7, pc}
 8006d70:	40002800 	.word	0x40002800
 8006d74:	0001005c 	.word	0x0001005c

08006d78 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8006d78:	b580      	push	{r7, lr}
 8006d7a:	b084      	sub	sp, #16
 8006d7c:	af00      	add	r7, sp, #0
 8006d7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006d80:	2300      	movs	r3, #0
 8006d82:	73fb      	strb	r3, [r7, #15]

  UNUSED(hrtc);
  /* Check if the Initialization mode is set */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 8006d84:	4b15      	ldr	r3, [pc, #84]	; (8006ddc <RTC_EnterInitMode+0x64>)
 8006d86:	68db      	ldr	r3, [r3, #12]
 8006d88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	d120      	bne.n	8006dd2 <RTC_EnterInitMode+0x5a>
  {
    /* Set the Initialization mode */
    SET_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8006d90:	4b12      	ldr	r3, [pc, #72]	; (8006ddc <RTC_EnterInitMode+0x64>)
 8006d92:	68db      	ldr	r3, [r3, #12]
 8006d94:	4a11      	ldr	r2, [pc, #68]	; (8006ddc <RTC_EnterInitMode+0x64>)
 8006d96:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006d9a:	60d3      	str	r3, [r2, #12]

    tickstart = HAL_GetTick();
 8006d9c:	f7fb fba4 	bl	80024e8 <HAL_GetTick>
 8006da0:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8006da2:	e00d      	b.n	8006dc0 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8006da4:	f7fb fba0 	bl	80024e8 <HAL_GetTick>
 8006da8:	4602      	mov	r2, r0
 8006daa:	68bb      	ldr	r3, [r7, #8]
 8006dac:	1ad3      	subs	r3, r2, r3
 8006dae:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006db2:	d905      	bls.n	8006dc0 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8006db4:	2303      	movs	r3, #3
 8006db6:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	2203      	movs	r2, #3
 8006dbc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8006dc0:	4b06      	ldr	r3, [pc, #24]	; (8006ddc <RTC_EnterInitMode+0x64>)
 8006dc2:	68db      	ldr	r3, [r3, #12]
 8006dc4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	d102      	bne.n	8006dd2 <RTC_EnterInitMode+0x5a>
 8006dcc:	7bfb      	ldrb	r3, [r7, #15]
 8006dce:	2b03      	cmp	r3, #3
 8006dd0:	d1e8      	bne.n	8006da4 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return status;
 8006dd2:	7bfb      	ldrb	r3, [r7, #15]
}
 8006dd4:	4618      	mov	r0, r3
 8006dd6:	3710      	adds	r7, #16
 8006dd8:	46bd      	mov	sp, r7
 8006dda:	bd80      	pop	{r7, pc}
 8006ddc:	40002800 	.word	0x40002800

08006de0 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8006de0:	b580      	push	{r7, lr}
 8006de2:	b084      	sub	sp, #16
 8006de4:	af00      	add	r7, sp, #0
 8006de6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006de8:	2300      	movs	r3, #0
 8006dea:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8006dec:	4b1a      	ldr	r3, [pc, #104]	; (8006e58 <RTC_ExitInitMode+0x78>)
 8006dee:	68db      	ldr	r3, [r3, #12]
 8006df0:	4a19      	ldr	r2, [pc, #100]	; (8006e58 <RTC_ExitInitMode+0x78>)
 8006df2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006df6:	60d3      	str	r3, [r2, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8006df8:	4b17      	ldr	r3, [pc, #92]	; (8006e58 <RTC_ExitInitMode+0x78>)
 8006dfa:	699b      	ldr	r3, [r3, #24]
 8006dfc:	f003 0320 	and.w	r3, r3, #32
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d10c      	bne.n	8006e1e <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006e04:	6878      	ldr	r0, [r7, #4]
 8006e06:	f7ff ff93 	bl	8006d30 <HAL_RTC_WaitForSynchro>
 8006e0a:	4603      	mov	r3, r0
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	d01e      	beq.n	8006e4e <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	2203      	movs	r2, #3
 8006e14:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
      status = HAL_TIMEOUT;
 8006e18:	2303      	movs	r3, #3
 8006e1a:	73fb      	strb	r3, [r7, #15]
 8006e1c:	e017      	b.n	8006e4e <RTC_ExitInitMode+0x6e>
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry.
          Please look at STM32L552xx STM32L562xx Errata sheet on the internet for details. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8006e1e:	4b0e      	ldr	r3, [pc, #56]	; (8006e58 <RTC_ExitInitMode+0x78>)
 8006e20:	699b      	ldr	r3, [r3, #24]
 8006e22:	4a0d      	ldr	r2, [pc, #52]	; (8006e58 <RTC_ExitInitMode+0x78>)
 8006e24:	f023 0320 	bic.w	r3, r3, #32
 8006e28:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006e2a:	6878      	ldr	r0, [r7, #4]
 8006e2c:	f7ff ff80 	bl	8006d30 <HAL_RTC_WaitForSynchro>
 8006e30:	4603      	mov	r3, r0
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d005      	beq.n	8006e42 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	2203      	movs	r2, #3
 8006e3a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
      status = HAL_TIMEOUT;
 8006e3e:	2303      	movs	r3, #3
 8006e40:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8006e42:	4b05      	ldr	r3, [pc, #20]	; (8006e58 <RTC_ExitInitMode+0x78>)
 8006e44:	699b      	ldr	r3, [r3, #24]
 8006e46:	4a04      	ldr	r2, [pc, #16]	; (8006e58 <RTC_ExitInitMode+0x78>)
 8006e48:	f043 0320 	orr.w	r3, r3, #32
 8006e4c:	6193      	str	r3, [r2, #24]
  }

  return status;
 8006e4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e50:	4618      	mov	r0, r3
 8006e52:	3710      	adds	r7, #16
 8006e54:	46bd      	mov	sp, r7
 8006e56:	bd80      	pop	{r7, pc}
 8006e58:	40002800 	.word	0x40002800

08006e5c <HAL_RTCEx_PrivilegeModeSet>:
  * @param  hrtc RTC handle
  * @param  privilegeState  Privilege state
  * @retval HAL_StatusTypeDef
  */
HAL_StatusTypeDef HAL_RTCEx_PrivilegeModeSet(RTC_HandleTypeDef *hrtc, RTC_PrivilegeStateTypeDef *privilegeState)
{
 8006e5c:	b480      	push	{r7}
 8006e5e:	b083      	sub	sp, #12
 8006e60:	af00      	add	r7, sp, #0
 8006e62:	6078      	str	r0, [r7, #4]
 8006e64:	6039      	str	r1, [r7, #0]
  assert_param(IS_RTC_PRIVILEGE_BKUP_ZONE(privilegeState->backupRegisterPrivZone));
  assert_param(IS_RTC_BKP(privilegeState->backupRegisterStartZone2));
  assert_param(IS_RTC_BKP(privilegeState->backupRegisterStartZone3));

  /* RTC privilege configuration */
  WRITE_REG(RTC->PRIVCR, privilegeState->rtcPrivilegeFull | privilegeState->rtcPrivilegeFeatures);
 8006e66:	683b      	ldr	r3, [r7, #0]
 8006e68:	681a      	ldr	r2, [r3, #0]
 8006e6a:	683b      	ldr	r3, [r7, #0]
 8006e6c:	685b      	ldr	r3, [r3, #4]
 8006e6e:	490f      	ldr	r1, [pc, #60]	; (8006eac <HAL_RTCEx_PrivilegeModeSet+0x50>)
 8006e70:	4313      	orrs	r3, r2
 8006e72:	61cb      	str	r3, [r1, #28]

  /* TAMP and Backup registers privilege configuration
     Warning : privilegeState->backupRegisterPrivZone is only writable in secure mode or if trustzone is disabled.
               In non secure mode, a notification is generated through a flag/interrupt in the TZIC (TrustZone interrupt controller). The bits are not written. */
  WRITE_REG(TAMP->PRIVCR, privilegeState->tampPrivilegeFull | privilegeState->backupRegisterPrivZone);
 8006e74:	683b      	ldr	r3, [r7, #0]
 8006e76:	689a      	ldr	r2, [r3, #8]
 8006e78:	683b      	ldr	r3, [r7, #0]
 8006e7a:	68db      	ldr	r3, [r3, #12]
 8006e7c:	490c      	ldr	r1, [pc, #48]	; (8006eb0 <HAL_RTCEx_PrivilegeModeSet+0x54>)
 8006e7e:	4313      	orrs	r3, r2
 8006e80:	624b      	str	r3, [r1, #36]	; 0x24

  /* Backup register start zone
     Warning : This parameter is only writable in secure mode or if trustzone is disabled.
               In non secure mode, a notification is generated through a flag/interrupt in the TZIC (TrustZone interrupt controller). The bits are not written.
     Warning : Backup register start zones are shared with secure configuration */
  MODIFY_REG(TAMP->SMCR,
 8006e82:	4b0b      	ldr	r3, [pc, #44]	; (8006eb0 <HAL_RTCEx_PrivilegeModeSet+0x54>)
 8006e84:	6a1b      	ldr	r3, [r3, #32]
 8006e86:	f003 22ff 	and.w	r2, r3, #4278255360	; 0xff00ff00
 8006e8a:	683b      	ldr	r3, [r7, #0]
 8006e8c:	6919      	ldr	r1, [r3, #16]
 8006e8e:	683b      	ldr	r3, [r7, #0]
 8006e90:	695b      	ldr	r3, [r3, #20]
 8006e92:	041b      	lsls	r3, r3, #16
 8006e94:	430b      	orrs	r3, r1
 8006e96:	4906      	ldr	r1, [pc, #24]	; (8006eb0 <HAL_RTCEx_PrivilegeModeSet+0x54>)
 8006e98:	4313      	orrs	r3, r2
 8006e9a:	620b      	str	r3, [r1, #32]
             (TAMP_SMCR_BKPRWDPROT | TAMP_SMCR_BKPWDPROT),
             ((privilegeState->backupRegisterStartZone2 << TAMP_SMCR_BKPRWDPROT_Pos) | (privilegeState->backupRegisterStartZone3 << TAMP_SMCR_BKPWDPROT_Pos)));

  return HAL_OK;
 8006e9c:	2300      	movs	r3, #0
}
 8006e9e:	4618      	mov	r0, r3
 8006ea0:	370c      	adds	r7, #12
 8006ea2:	46bd      	mov	sp, r7
 8006ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ea8:	4770      	bx	lr
 8006eaa:	bf00      	nop
 8006eac:	40002800 	.word	0x40002800
 8006eb0:	40003400 	.word	0x40003400

08006eb4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006eb4:	b580      	push	{r7, lr}
 8006eb6:	b084      	sub	sp, #16
 8006eb8:	af00      	add	r7, sp, #0
 8006eba:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d101      	bne.n	8006ec6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006ec2:	2301      	movs	r3, #1
 8006ec4:	e095      	b.n	8006ff2 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d108      	bne.n	8006ee0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	685b      	ldr	r3, [r3, #4]
 8006ed2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006ed6:	d009      	beq.n	8006eec <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	2200      	movs	r2, #0
 8006edc:	61da      	str	r2, [r3, #28]
 8006ede:	e005      	b.n	8006eec <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	2200      	movs	r2, #0
 8006ee4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	2200      	movs	r2, #0
 8006eea:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	2200      	movs	r2, #0
 8006ef0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006ef8:	b2db      	uxtb	r3, r3
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d106      	bne.n	8006f0c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	2200      	movs	r2, #0
 8006f02:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006f06:	6878      	ldr	r0, [r7, #4]
 8006f08:	f7fa fe72 	bl	8001bf0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	2202      	movs	r2, #2
 8006f10:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	681a      	ldr	r2, [r3, #0]
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006f22:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	68db      	ldr	r3, [r3, #12]
 8006f28:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006f2c:	d902      	bls.n	8006f34 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8006f2e:	2300      	movs	r3, #0
 8006f30:	60fb      	str	r3, [r7, #12]
 8006f32:	e002      	b.n	8006f3a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8006f34:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006f38:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	68db      	ldr	r3, [r3, #12]
 8006f3e:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8006f42:	d007      	beq.n	8006f54 <HAL_SPI_Init+0xa0>
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	68db      	ldr	r3, [r3, #12]
 8006f48:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006f4c:	d002      	beq.n	8006f54 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	2200      	movs	r2, #0
 8006f52:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	685b      	ldr	r3, [r3, #4]
 8006f58:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	689b      	ldr	r3, [r3, #8]
 8006f60:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006f64:	431a      	orrs	r2, r3
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	691b      	ldr	r3, [r3, #16]
 8006f6a:	f003 0302 	and.w	r3, r3, #2
 8006f6e:	431a      	orrs	r2, r3
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	695b      	ldr	r3, [r3, #20]
 8006f74:	f003 0301 	and.w	r3, r3, #1
 8006f78:	431a      	orrs	r2, r3
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	699b      	ldr	r3, [r3, #24]
 8006f7e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006f82:	431a      	orrs	r2, r3
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	69db      	ldr	r3, [r3, #28]
 8006f88:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006f8c:	431a      	orrs	r2, r3
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	6a1b      	ldr	r3, [r3, #32]
 8006f92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006f96:	ea42 0103 	orr.w	r1, r2, r3
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f9e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	430a      	orrs	r2, r1
 8006fa8:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	699b      	ldr	r3, [r3, #24]
 8006fae:	0c1b      	lsrs	r3, r3, #16
 8006fb0:	f003 0204 	and.w	r2, r3, #4
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fb8:	f003 0310 	and.w	r3, r3, #16
 8006fbc:	431a      	orrs	r2, r3
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006fc2:	f003 0308 	and.w	r3, r3, #8
 8006fc6:	431a      	orrs	r2, r3
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	68db      	ldr	r3, [r3, #12]
 8006fcc:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8006fd0:	ea42 0103 	orr.w	r1, r2, r3
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	430a      	orrs	r2, r1
 8006fe0:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	2200      	movs	r2, #0
 8006fe6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	2201      	movs	r2, #1
 8006fec:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8006ff0:	2300      	movs	r3, #0
}
 8006ff2:	4618      	mov	r0, r3
 8006ff4:	3710      	adds	r7, #16
 8006ff6:	46bd      	mov	sp, r7
 8006ff8:	bd80      	pop	{r7, pc}

08006ffa <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006ffa:	b580      	push	{r7, lr}
 8006ffc:	b082      	sub	sp, #8
 8006ffe:	af00      	add	r7, sp, #0
 8007000:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	2b00      	cmp	r3, #0
 8007006:	d101      	bne.n	800700c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007008:	2301      	movs	r3, #1
 800700a:	e049      	b.n	80070a0 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007012:	b2db      	uxtb	r3, r3
 8007014:	2b00      	cmp	r3, #0
 8007016:	d106      	bne.n	8007026 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	2200      	movs	r2, #0
 800701c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007020:	6878      	ldr	r0, [r7, #4]
 8007022:	f7fa fecb 	bl	8001dbc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	2202      	movs	r2, #2
 800702a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	681a      	ldr	r2, [r3, #0]
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	3304      	adds	r3, #4
 8007036:	4619      	mov	r1, r3
 8007038:	4610      	mov	r0, r2
 800703a:	f000 fed5 	bl	8007de8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	2201      	movs	r2, #1
 8007042:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	2201      	movs	r2, #1
 800704a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	2201      	movs	r2, #1
 8007052:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	2201      	movs	r2, #1
 800705a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	2201      	movs	r2, #1
 8007062:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	2201      	movs	r2, #1
 800706a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	2201      	movs	r2, #1
 8007072:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	2201      	movs	r2, #1
 800707a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	2201      	movs	r2, #1
 8007082:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	2201      	movs	r2, #1
 800708a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	2201      	movs	r2, #1
 8007092:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	2201      	movs	r2, #1
 800709a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800709e:	2300      	movs	r3, #0
}
 80070a0:	4618      	mov	r0, r3
 80070a2:	3708      	adds	r7, #8
 80070a4:	46bd      	mov	sp, r7
 80070a6:	bd80      	pop	{r7, pc}

080070a8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80070a8:	b480      	push	{r7}
 80070aa:	b085      	sub	sp, #20
 80070ac:	af00      	add	r7, sp, #0
 80070ae:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80070b6:	b2db      	uxtb	r3, r3
 80070b8:	2b01      	cmp	r3, #1
 80070ba:	d001      	beq.n	80070c0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80070bc:	2301      	movs	r3, #1
 80070be:	e04f      	b.n	8007160 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	2202      	movs	r2, #2
 80070c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	68da      	ldr	r2, [r3, #12]
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	f042 0201 	orr.w	r2, r2, #1
 80070d6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	4a23      	ldr	r2, [pc, #140]	; (800716c <HAL_TIM_Base_Start_IT+0xc4>)
 80070de:	4293      	cmp	r3, r2
 80070e0:	d01d      	beq.n	800711e <HAL_TIM_Base_Start_IT+0x76>
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80070ea:	d018      	beq.n	800711e <HAL_TIM_Base_Start_IT+0x76>
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	4a1f      	ldr	r2, [pc, #124]	; (8007170 <HAL_TIM_Base_Start_IT+0xc8>)
 80070f2:	4293      	cmp	r3, r2
 80070f4:	d013      	beq.n	800711e <HAL_TIM_Base_Start_IT+0x76>
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	4a1e      	ldr	r2, [pc, #120]	; (8007174 <HAL_TIM_Base_Start_IT+0xcc>)
 80070fc:	4293      	cmp	r3, r2
 80070fe:	d00e      	beq.n	800711e <HAL_TIM_Base_Start_IT+0x76>
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	4a1c      	ldr	r2, [pc, #112]	; (8007178 <HAL_TIM_Base_Start_IT+0xd0>)
 8007106:	4293      	cmp	r3, r2
 8007108:	d009      	beq.n	800711e <HAL_TIM_Base_Start_IT+0x76>
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	4a1b      	ldr	r2, [pc, #108]	; (800717c <HAL_TIM_Base_Start_IT+0xd4>)
 8007110:	4293      	cmp	r3, r2
 8007112:	d004      	beq.n	800711e <HAL_TIM_Base_Start_IT+0x76>
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	4a19      	ldr	r2, [pc, #100]	; (8007180 <HAL_TIM_Base_Start_IT+0xd8>)
 800711a:	4293      	cmp	r3, r2
 800711c:	d115      	bne.n	800714a <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	689a      	ldr	r2, [r3, #8]
 8007124:	4b17      	ldr	r3, [pc, #92]	; (8007184 <HAL_TIM_Base_Start_IT+0xdc>)
 8007126:	4013      	ands	r3, r2
 8007128:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	2b06      	cmp	r3, #6
 800712e:	d015      	beq.n	800715c <HAL_TIM_Base_Start_IT+0xb4>
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007136:	d011      	beq.n	800715c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	681a      	ldr	r2, [r3, #0]
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	f042 0201 	orr.w	r2, r2, #1
 8007146:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007148:	e008      	b.n	800715c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	681a      	ldr	r2, [r3, #0]
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	f042 0201 	orr.w	r2, r2, #1
 8007158:	601a      	str	r2, [r3, #0]
 800715a:	e000      	b.n	800715e <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800715c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800715e:	2300      	movs	r3, #0
}
 8007160:	4618      	mov	r0, r3
 8007162:	3714      	adds	r7, #20
 8007164:	46bd      	mov	sp, r7
 8007166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800716a:	4770      	bx	lr
 800716c:	40012c00 	.word	0x40012c00
 8007170:	40000400 	.word	0x40000400
 8007174:	40000800 	.word	0x40000800
 8007178:	40000c00 	.word	0x40000c00
 800717c:	40013400 	.word	0x40013400
 8007180:	40014000 	.word	0x40014000
 8007184:	00010007 	.word	0x00010007

08007188 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007188:	b580      	push	{r7, lr}
 800718a:	b082      	sub	sp, #8
 800718c:	af00      	add	r7, sp, #0
 800718e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	2b00      	cmp	r3, #0
 8007194:	d101      	bne.n	800719a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007196:	2301      	movs	r3, #1
 8007198:	e049      	b.n	800722e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80071a0:	b2db      	uxtb	r3, r3
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	d106      	bne.n	80071b4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	2200      	movs	r2, #0
 80071aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80071ae:	6878      	ldr	r0, [r7, #4]
 80071b0:	f000 f841 	bl	8007236 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	2202      	movs	r2, #2
 80071b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	681a      	ldr	r2, [r3, #0]
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	3304      	adds	r3, #4
 80071c4:	4619      	mov	r1, r3
 80071c6:	4610      	mov	r0, r2
 80071c8:	f000 fe0e 	bl	8007de8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	2201      	movs	r2, #1
 80071d0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	2201      	movs	r2, #1
 80071d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	2201      	movs	r2, #1
 80071e0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	2201      	movs	r2, #1
 80071e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	2201      	movs	r2, #1
 80071f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	2201      	movs	r2, #1
 80071f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	2201      	movs	r2, #1
 8007200:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	2201      	movs	r2, #1
 8007208:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	2201      	movs	r2, #1
 8007210:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	2201      	movs	r2, #1
 8007218:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	2201      	movs	r2, #1
 8007220:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	2201      	movs	r2, #1
 8007228:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800722c:	2300      	movs	r3, #0
}
 800722e:	4618      	mov	r0, r3
 8007230:	3708      	adds	r7, #8
 8007232:	46bd      	mov	sp, r7
 8007234:	bd80      	pop	{r7, pc}

08007236 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8007236:	b480      	push	{r7}
 8007238:	b083      	sub	sp, #12
 800723a:	af00      	add	r7, sp, #0
 800723c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800723e:	bf00      	nop
 8007240:	370c      	adds	r7, #12
 8007242:	46bd      	mov	sp, r7
 8007244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007248:	4770      	bx	lr
	...

0800724c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800724c:	b580      	push	{r7, lr}
 800724e:	b084      	sub	sp, #16
 8007250:	af00      	add	r7, sp, #0
 8007252:	6078      	str	r0, [r7, #4]
 8007254:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007256:	683b      	ldr	r3, [r7, #0]
 8007258:	2b00      	cmp	r3, #0
 800725a:	d109      	bne.n	8007270 <HAL_TIM_PWM_Start+0x24>
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007262:	b2db      	uxtb	r3, r3
 8007264:	2b01      	cmp	r3, #1
 8007266:	bf14      	ite	ne
 8007268:	2301      	movne	r3, #1
 800726a:	2300      	moveq	r3, #0
 800726c:	b2db      	uxtb	r3, r3
 800726e:	e03c      	b.n	80072ea <HAL_TIM_PWM_Start+0x9e>
 8007270:	683b      	ldr	r3, [r7, #0]
 8007272:	2b04      	cmp	r3, #4
 8007274:	d109      	bne.n	800728a <HAL_TIM_PWM_Start+0x3e>
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800727c:	b2db      	uxtb	r3, r3
 800727e:	2b01      	cmp	r3, #1
 8007280:	bf14      	ite	ne
 8007282:	2301      	movne	r3, #1
 8007284:	2300      	moveq	r3, #0
 8007286:	b2db      	uxtb	r3, r3
 8007288:	e02f      	b.n	80072ea <HAL_TIM_PWM_Start+0x9e>
 800728a:	683b      	ldr	r3, [r7, #0]
 800728c:	2b08      	cmp	r3, #8
 800728e:	d109      	bne.n	80072a4 <HAL_TIM_PWM_Start+0x58>
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007296:	b2db      	uxtb	r3, r3
 8007298:	2b01      	cmp	r3, #1
 800729a:	bf14      	ite	ne
 800729c:	2301      	movne	r3, #1
 800729e:	2300      	moveq	r3, #0
 80072a0:	b2db      	uxtb	r3, r3
 80072a2:	e022      	b.n	80072ea <HAL_TIM_PWM_Start+0x9e>
 80072a4:	683b      	ldr	r3, [r7, #0]
 80072a6:	2b0c      	cmp	r3, #12
 80072a8:	d109      	bne.n	80072be <HAL_TIM_PWM_Start+0x72>
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80072b0:	b2db      	uxtb	r3, r3
 80072b2:	2b01      	cmp	r3, #1
 80072b4:	bf14      	ite	ne
 80072b6:	2301      	movne	r3, #1
 80072b8:	2300      	moveq	r3, #0
 80072ba:	b2db      	uxtb	r3, r3
 80072bc:	e015      	b.n	80072ea <HAL_TIM_PWM_Start+0x9e>
 80072be:	683b      	ldr	r3, [r7, #0]
 80072c0:	2b10      	cmp	r3, #16
 80072c2:	d109      	bne.n	80072d8 <HAL_TIM_PWM_Start+0x8c>
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80072ca:	b2db      	uxtb	r3, r3
 80072cc:	2b01      	cmp	r3, #1
 80072ce:	bf14      	ite	ne
 80072d0:	2301      	movne	r3, #1
 80072d2:	2300      	moveq	r3, #0
 80072d4:	b2db      	uxtb	r3, r3
 80072d6:	e008      	b.n	80072ea <HAL_TIM_PWM_Start+0x9e>
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80072de:	b2db      	uxtb	r3, r3
 80072e0:	2b01      	cmp	r3, #1
 80072e2:	bf14      	ite	ne
 80072e4:	2301      	movne	r3, #1
 80072e6:	2300      	moveq	r3, #0
 80072e8:	b2db      	uxtb	r3, r3
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d001      	beq.n	80072f2 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80072ee:	2301      	movs	r3, #1
 80072f0:	e09c      	b.n	800742c <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80072f2:	683b      	ldr	r3, [r7, #0]
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	d104      	bne.n	8007302 <HAL_TIM_PWM_Start+0xb6>
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	2202      	movs	r2, #2
 80072fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007300:	e023      	b.n	800734a <HAL_TIM_PWM_Start+0xfe>
 8007302:	683b      	ldr	r3, [r7, #0]
 8007304:	2b04      	cmp	r3, #4
 8007306:	d104      	bne.n	8007312 <HAL_TIM_PWM_Start+0xc6>
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	2202      	movs	r2, #2
 800730c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007310:	e01b      	b.n	800734a <HAL_TIM_PWM_Start+0xfe>
 8007312:	683b      	ldr	r3, [r7, #0]
 8007314:	2b08      	cmp	r3, #8
 8007316:	d104      	bne.n	8007322 <HAL_TIM_PWM_Start+0xd6>
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	2202      	movs	r2, #2
 800731c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007320:	e013      	b.n	800734a <HAL_TIM_PWM_Start+0xfe>
 8007322:	683b      	ldr	r3, [r7, #0]
 8007324:	2b0c      	cmp	r3, #12
 8007326:	d104      	bne.n	8007332 <HAL_TIM_PWM_Start+0xe6>
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	2202      	movs	r2, #2
 800732c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007330:	e00b      	b.n	800734a <HAL_TIM_PWM_Start+0xfe>
 8007332:	683b      	ldr	r3, [r7, #0]
 8007334:	2b10      	cmp	r3, #16
 8007336:	d104      	bne.n	8007342 <HAL_TIM_PWM_Start+0xf6>
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	2202      	movs	r2, #2
 800733c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007340:	e003      	b.n	800734a <HAL_TIM_PWM_Start+0xfe>
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	2202      	movs	r2, #2
 8007346:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	2201      	movs	r2, #1
 8007350:	6839      	ldr	r1, [r7, #0]
 8007352:	4618      	mov	r0, r3
 8007354:	f001 fa78 	bl	8008848 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	4a35      	ldr	r2, [pc, #212]	; (8007434 <HAL_TIM_PWM_Start+0x1e8>)
 800735e:	4293      	cmp	r3, r2
 8007360:	d013      	beq.n	800738a <HAL_TIM_PWM_Start+0x13e>
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	4a34      	ldr	r2, [pc, #208]	; (8007438 <HAL_TIM_PWM_Start+0x1ec>)
 8007368:	4293      	cmp	r3, r2
 800736a:	d00e      	beq.n	800738a <HAL_TIM_PWM_Start+0x13e>
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	4a32      	ldr	r2, [pc, #200]	; (800743c <HAL_TIM_PWM_Start+0x1f0>)
 8007372:	4293      	cmp	r3, r2
 8007374:	d009      	beq.n	800738a <HAL_TIM_PWM_Start+0x13e>
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	4a31      	ldr	r2, [pc, #196]	; (8007440 <HAL_TIM_PWM_Start+0x1f4>)
 800737c:	4293      	cmp	r3, r2
 800737e:	d004      	beq.n	800738a <HAL_TIM_PWM_Start+0x13e>
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	4a2f      	ldr	r2, [pc, #188]	; (8007444 <HAL_TIM_PWM_Start+0x1f8>)
 8007386:	4293      	cmp	r3, r2
 8007388:	d101      	bne.n	800738e <HAL_TIM_PWM_Start+0x142>
 800738a:	2301      	movs	r3, #1
 800738c:	e000      	b.n	8007390 <HAL_TIM_PWM_Start+0x144>
 800738e:	2300      	movs	r3, #0
 8007390:	2b00      	cmp	r3, #0
 8007392:	d007      	beq.n	80073a4 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80073a2:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	4a22      	ldr	r2, [pc, #136]	; (8007434 <HAL_TIM_PWM_Start+0x1e8>)
 80073aa:	4293      	cmp	r3, r2
 80073ac:	d01d      	beq.n	80073ea <HAL_TIM_PWM_Start+0x19e>
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80073b6:	d018      	beq.n	80073ea <HAL_TIM_PWM_Start+0x19e>
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	4a22      	ldr	r2, [pc, #136]	; (8007448 <HAL_TIM_PWM_Start+0x1fc>)
 80073be:	4293      	cmp	r3, r2
 80073c0:	d013      	beq.n	80073ea <HAL_TIM_PWM_Start+0x19e>
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	4a21      	ldr	r2, [pc, #132]	; (800744c <HAL_TIM_PWM_Start+0x200>)
 80073c8:	4293      	cmp	r3, r2
 80073ca:	d00e      	beq.n	80073ea <HAL_TIM_PWM_Start+0x19e>
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	4a1f      	ldr	r2, [pc, #124]	; (8007450 <HAL_TIM_PWM_Start+0x204>)
 80073d2:	4293      	cmp	r3, r2
 80073d4:	d009      	beq.n	80073ea <HAL_TIM_PWM_Start+0x19e>
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	4a17      	ldr	r2, [pc, #92]	; (8007438 <HAL_TIM_PWM_Start+0x1ec>)
 80073dc:	4293      	cmp	r3, r2
 80073de:	d004      	beq.n	80073ea <HAL_TIM_PWM_Start+0x19e>
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	4a15      	ldr	r2, [pc, #84]	; (800743c <HAL_TIM_PWM_Start+0x1f0>)
 80073e6:	4293      	cmp	r3, r2
 80073e8:	d115      	bne.n	8007416 <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	689a      	ldr	r2, [r3, #8]
 80073f0:	4b18      	ldr	r3, [pc, #96]	; (8007454 <HAL_TIM_PWM_Start+0x208>)
 80073f2:	4013      	ands	r3, r2
 80073f4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	2b06      	cmp	r3, #6
 80073fa:	d015      	beq.n	8007428 <HAL_TIM_PWM_Start+0x1dc>
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007402:	d011      	beq.n	8007428 <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	681a      	ldr	r2, [r3, #0]
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	f042 0201 	orr.w	r2, r2, #1
 8007412:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007414:	e008      	b.n	8007428 <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	681a      	ldr	r2, [r3, #0]
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	f042 0201 	orr.w	r2, r2, #1
 8007424:	601a      	str	r2, [r3, #0]
 8007426:	e000      	b.n	800742a <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007428:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800742a:	2300      	movs	r3, #0
}
 800742c:	4618      	mov	r0, r3
 800742e:	3710      	adds	r7, #16
 8007430:	46bd      	mov	sp, r7
 8007432:	bd80      	pop	{r7, pc}
 8007434:	40012c00 	.word	0x40012c00
 8007438:	40013400 	.word	0x40013400
 800743c:	40014000 	.word	0x40014000
 8007440:	40014400 	.word	0x40014400
 8007444:	40014800 	.word	0x40014800
 8007448:	40000400 	.word	0x40000400
 800744c:	40000800 	.word	0x40000800
 8007450:	40000c00 	.word	0x40000c00
 8007454:	00010007 	.word	0x00010007

08007458 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8007458:	b580      	push	{r7, lr}
 800745a:	b082      	sub	sp, #8
 800745c:	af00      	add	r7, sp, #0
 800745e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	2b00      	cmp	r3, #0
 8007464:	d101      	bne.n	800746a <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8007466:	2301      	movs	r3, #1
 8007468:	e049      	b.n	80074fe <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007470:	b2db      	uxtb	r3, r3
 8007472:	2b00      	cmp	r3, #0
 8007474:	d106      	bne.n	8007484 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	2200      	movs	r2, #0
 800747a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800747e:	6878      	ldr	r0, [r7, #4]
 8007480:	f000 f841 	bl	8007506 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	2202      	movs	r2, #2
 8007488:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	681a      	ldr	r2, [r3, #0]
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	3304      	adds	r3, #4
 8007494:	4619      	mov	r1, r3
 8007496:	4610      	mov	r0, r2
 8007498:	f000 fca6 	bl	8007de8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	2201      	movs	r2, #1
 80074a0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	2201      	movs	r2, #1
 80074a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	2201      	movs	r2, #1
 80074b0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	2201      	movs	r2, #1
 80074b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	2201      	movs	r2, #1
 80074c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	2201      	movs	r2, #1
 80074c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	2201      	movs	r2, #1
 80074d0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	2201      	movs	r2, #1
 80074d8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	2201      	movs	r2, #1
 80074e0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	2201      	movs	r2, #1
 80074e8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	2201      	movs	r2, #1
 80074f0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	2201      	movs	r2, #1
 80074f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80074fc:	2300      	movs	r3, #0
}
 80074fe:	4618      	mov	r0, r3
 8007500:	3708      	adds	r7, #8
 8007502:	46bd      	mov	sp, r7
 8007504:	bd80      	pop	{r7, pc}

08007506 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8007506:	b480      	push	{r7}
 8007508:	b083      	sub	sp, #12
 800750a:	af00      	add	r7, sp, #0
 800750c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 800750e:	bf00      	nop
 8007510:	370c      	adds	r7, #12
 8007512:	46bd      	mov	sp, r7
 8007514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007518:	4770      	bx	lr

0800751a <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800751a:	b580      	push	{r7, lr}
 800751c:	b086      	sub	sp, #24
 800751e:	af00      	add	r7, sp, #0
 8007520:	6078      	str	r0, [r7, #4]
 8007522:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	2b00      	cmp	r3, #0
 8007528:	d101      	bne.n	800752e <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800752a:	2301      	movs	r3, #1
 800752c:	e097      	b.n	800765e <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007534:	b2db      	uxtb	r3, r3
 8007536:	2b00      	cmp	r3, #0
 8007538:	d106      	bne.n	8007548 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	2200      	movs	r2, #0
 800753e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8007542:	6878      	ldr	r0, [r7, #4]
 8007544:	f7fa fcce 	bl	8001ee4 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	2202      	movs	r2, #2
 800754c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	689b      	ldr	r3, [r3, #8]
 8007556:	687a      	ldr	r2, [r7, #4]
 8007558:	6812      	ldr	r2, [r2, #0]
 800755a:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 800755e:	f023 0307 	bic.w	r3, r3, #7
 8007562:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	681a      	ldr	r2, [r3, #0]
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	3304      	adds	r3, #4
 800756c:	4619      	mov	r1, r3
 800756e:	4610      	mov	r0, r2
 8007570:	f000 fc3a 	bl	8007de8 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	689b      	ldr	r3, [r3, #8]
 800757a:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	699b      	ldr	r3, [r3, #24]
 8007582:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	6a1b      	ldr	r3, [r3, #32]
 800758a:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800758c:	683b      	ldr	r3, [r7, #0]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	697a      	ldr	r2, [r7, #20]
 8007592:	4313      	orrs	r3, r2
 8007594:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8007596:	693b      	ldr	r3, [r7, #16]
 8007598:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800759c:	f023 0303 	bic.w	r3, r3, #3
 80075a0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80075a2:	683b      	ldr	r3, [r7, #0]
 80075a4:	689a      	ldr	r2, [r3, #8]
 80075a6:	683b      	ldr	r3, [r7, #0]
 80075a8:	699b      	ldr	r3, [r3, #24]
 80075aa:	021b      	lsls	r3, r3, #8
 80075ac:	4313      	orrs	r3, r2
 80075ae:	693a      	ldr	r2, [r7, #16]
 80075b0:	4313      	orrs	r3, r2
 80075b2:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80075b4:	693b      	ldr	r3, [r7, #16]
 80075b6:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80075ba:	f023 030c 	bic.w	r3, r3, #12
 80075be:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80075c0:	693b      	ldr	r3, [r7, #16]
 80075c2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80075c6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80075ca:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80075cc:	683b      	ldr	r3, [r7, #0]
 80075ce:	68da      	ldr	r2, [r3, #12]
 80075d0:	683b      	ldr	r3, [r7, #0]
 80075d2:	69db      	ldr	r3, [r3, #28]
 80075d4:	021b      	lsls	r3, r3, #8
 80075d6:	4313      	orrs	r3, r2
 80075d8:	693a      	ldr	r2, [r7, #16]
 80075da:	4313      	orrs	r3, r2
 80075dc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80075de:	683b      	ldr	r3, [r7, #0]
 80075e0:	691b      	ldr	r3, [r3, #16]
 80075e2:	011a      	lsls	r2, r3, #4
 80075e4:	683b      	ldr	r3, [r7, #0]
 80075e6:	6a1b      	ldr	r3, [r3, #32]
 80075e8:	031b      	lsls	r3, r3, #12
 80075ea:	4313      	orrs	r3, r2
 80075ec:	693a      	ldr	r2, [r7, #16]
 80075ee:	4313      	orrs	r3, r2
 80075f0:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80075f8:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8007600:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8007602:	683b      	ldr	r3, [r7, #0]
 8007604:	685a      	ldr	r2, [r3, #4]
 8007606:	683b      	ldr	r3, [r7, #0]
 8007608:	695b      	ldr	r3, [r3, #20]
 800760a:	011b      	lsls	r3, r3, #4
 800760c:	4313      	orrs	r3, r2
 800760e:	68fa      	ldr	r2, [r7, #12]
 8007610:	4313      	orrs	r3, r2
 8007612:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	697a      	ldr	r2, [r7, #20]
 800761a:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	693a      	ldr	r2, [r7, #16]
 8007622:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	68fa      	ldr	r2, [r7, #12]
 800762a:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	2201      	movs	r2, #1
 8007630:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	2201      	movs	r2, #1
 8007638:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	2201      	movs	r2, #1
 8007640:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	2201      	movs	r2, #1
 8007648:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	2201      	movs	r2, #1
 8007650:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	2201      	movs	r2, #1
 8007658:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800765c:	2300      	movs	r3, #0
}
 800765e:	4618      	mov	r0, r3
 8007660:	3718      	adds	r7, #24
 8007662:	46bd      	mov	sp, r7
 8007664:	bd80      	pop	{r7, pc}

08007666 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007666:	b580      	push	{r7, lr}
 8007668:	b082      	sub	sp, #8
 800766a:	af00      	add	r7, sp, #0
 800766c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	691b      	ldr	r3, [r3, #16]
 8007674:	f003 0302 	and.w	r3, r3, #2
 8007678:	2b02      	cmp	r3, #2
 800767a:	d122      	bne.n	80076c2 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	68db      	ldr	r3, [r3, #12]
 8007682:	f003 0302 	and.w	r3, r3, #2
 8007686:	2b02      	cmp	r3, #2
 8007688:	d11b      	bne.n	80076c2 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	f06f 0202 	mvn.w	r2, #2
 8007692:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	2201      	movs	r2, #1
 8007698:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	699b      	ldr	r3, [r3, #24]
 80076a0:	f003 0303 	and.w	r3, r3, #3
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	d003      	beq.n	80076b0 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80076a8:	6878      	ldr	r0, [r7, #4]
 80076aa:	f000 fb7e 	bl	8007daa <HAL_TIM_IC_CaptureCallback>
 80076ae:	e005      	b.n	80076bc <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80076b0:	6878      	ldr	r0, [r7, #4]
 80076b2:	f000 fb70 	bl	8007d96 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80076b6:	6878      	ldr	r0, [r7, #4]
 80076b8:	f000 fb81 	bl	8007dbe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	2200      	movs	r2, #0
 80076c0:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	691b      	ldr	r3, [r3, #16]
 80076c8:	f003 0304 	and.w	r3, r3, #4
 80076cc:	2b04      	cmp	r3, #4
 80076ce:	d122      	bne.n	8007716 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	68db      	ldr	r3, [r3, #12]
 80076d6:	f003 0304 	and.w	r3, r3, #4
 80076da:	2b04      	cmp	r3, #4
 80076dc:	d11b      	bne.n	8007716 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	f06f 0204 	mvn.w	r2, #4
 80076e6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	2202      	movs	r2, #2
 80076ec:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	699b      	ldr	r3, [r3, #24]
 80076f4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	d003      	beq.n	8007704 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80076fc:	6878      	ldr	r0, [r7, #4]
 80076fe:	f000 fb54 	bl	8007daa <HAL_TIM_IC_CaptureCallback>
 8007702:	e005      	b.n	8007710 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007704:	6878      	ldr	r0, [r7, #4]
 8007706:	f000 fb46 	bl	8007d96 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800770a:	6878      	ldr	r0, [r7, #4]
 800770c:	f000 fb57 	bl	8007dbe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	2200      	movs	r2, #0
 8007714:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	691b      	ldr	r3, [r3, #16]
 800771c:	f003 0308 	and.w	r3, r3, #8
 8007720:	2b08      	cmp	r3, #8
 8007722:	d122      	bne.n	800776a <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	68db      	ldr	r3, [r3, #12]
 800772a:	f003 0308 	and.w	r3, r3, #8
 800772e:	2b08      	cmp	r3, #8
 8007730:	d11b      	bne.n	800776a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	f06f 0208 	mvn.w	r2, #8
 800773a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	2204      	movs	r2, #4
 8007740:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	69db      	ldr	r3, [r3, #28]
 8007748:	f003 0303 	and.w	r3, r3, #3
 800774c:	2b00      	cmp	r3, #0
 800774e:	d003      	beq.n	8007758 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007750:	6878      	ldr	r0, [r7, #4]
 8007752:	f000 fb2a 	bl	8007daa <HAL_TIM_IC_CaptureCallback>
 8007756:	e005      	b.n	8007764 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007758:	6878      	ldr	r0, [r7, #4]
 800775a:	f000 fb1c 	bl	8007d96 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800775e:	6878      	ldr	r0, [r7, #4]
 8007760:	f000 fb2d 	bl	8007dbe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	2200      	movs	r2, #0
 8007768:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	691b      	ldr	r3, [r3, #16]
 8007770:	f003 0310 	and.w	r3, r3, #16
 8007774:	2b10      	cmp	r3, #16
 8007776:	d122      	bne.n	80077be <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	68db      	ldr	r3, [r3, #12]
 800777e:	f003 0310 	and.w	r3, r3, #16
 8007782:	2b10      	cmp	r3, #16
 8007784:	d11b      	bne.n	80077be <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	f06f 0210 	mvn.w	r2, #16
 800778e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	2208      	movs	r2, #8
 8007794:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	69db      	ldr	r3, [r3, #28]
 800779c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80077a0:	2b00      	cmp	r3, #0
 80077a2:	d003      	beq.n	80077ac <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80077a4:	6878      	ldr	r0, [r7, #4]
 80077a6:	f000 fb00 	bl	8007daa <HAL_TIM_IC_CaptureCallback>
 80077aa:	e005      	b.n	80077b8 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80077ac:	6878      	ldr	r0, [r7, #4]
 80077ae:	f000 faf2 	bl	8007d96 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80077b2:	6878      	ldr	r0, [r7, #4]
 80077b4:	f000 fb03 	bl	8007dbe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	2200      	movs	r2, #0
 80077bc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	691b      	ldr	r3, [r3, #16]
 80077c4:	f003 0301 	and.w	r3, r3, #1
 80077c8:	2b01      	cmp	r3, #1
 80077ca:	d10e      	bne.n	80077ea <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	68db      	ldr	r3, [r3, #12]
 80077d2:	f003 0301 	and.w	r3, r3, #1
 80077d6:	2b01      	cmp	r3, #1
 80077d8:	d107      	bne.n	80077ea <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	f06f 0201 	mvn.w	r2, #1
 80077e2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80077e4:	6878      	ldr	r0, [r7, #4]
 80077e6:	f7f9 ff63 	bl	80016b0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	691b      	ldr	r3, [r3, #16]
 80077f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80077f4:	2b80      	cmp	r3, #128	; 0x80
 80077f6:	d10e      	bne.n	8007816 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	68db      	ldr	r3, [r3, #12]
 80077fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007802:	2b80      	cmp	r3, #128	; 0x80
 8007804:	d107      	bne.n	8007816 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800780e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007810:	6878      	ldr	r0, [r7, #4]
 8007812:	f001 f971 	bl	8008af8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	691b      	ldr	r3, [r3, #16]
 800781c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007820:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007824:	d10e      	bne.n	8007844 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	68db      	ldr	r3, [r3, #12]
 800782c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007830:	2b80      	cmp	r3, #128	; 0x80
 8007832:	d107      	bne.n	8007844 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800783c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800783e:	6878      	ldr	r0, [r7, #4]
 8007840:	f001 f964 	bl	8008b0c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	691b      	ldr	r3, [r3, #16]
 800784a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800784e:	2b40      	cmp	r3, #64	; 0x40
 8007850:	d10e      	bne.n	8007870 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	68db      	ldr	r3, [r3, #12]
 8007858:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800785c:	2b40      	cmp	r3, #64	; 0x40
 800785e:	d107      	bne.n	8007870 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007868:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800786a:	6878      	ldr	r0, [r7, #4]
 800786c:	f000 fab1 	bl	8007dd2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	691b      	ldr	r3, [r3, #16]
 8007876:	f003 0320 	and.w	r3, r3, #32
 800787a:	2b20      	cmp	r3, #32
 800787c:	d10e      	bne.n	800789c <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	68db      	ldr	r3, [r3, #12]
 8007884:	f003 0320 	and.w	r3, r3, #32
 8007888:	2b20      	cmp	r3, #32
 800788a:	d107      	bne.n	800789c <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	f06f 0220 	mvn.w	r2, #32
 8007894:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007896:	6878      	ldr	r0, [r7, #4]
 8007898:	f001 f924 	bl	8008ae4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800789c:	bf00      	nop
 800789e:	3708      	adds	r7, #8
 80078a0:	46bd      	mov	sp, r7
 80078a2:	bd80      	pop	{r7, pc}

080078a4 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80078a4:	b580      	push	{r7, lr}
 80078a6:	b086      	sub	sp, #24
 80078a8:	af00      	add	r7, sp, #0
 80078aa:	60f8      	str	r0, [r7, #12]
 80078ac:	60b9      	str	r1, [r7, #8]
 80078ae:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80078b0:	2300      	movs	r3, #0
 80078b2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80078ba:	2b01      	cmp	r3, #1
 80078bc:	d101      	bne.n	80078c2 <HAL_TIM_IC_ConfigChannel+0x1e>
 80078be:	2302      	movs	r3, #2
 80078c0:	e088      	b.n	80079d4 <HAL_TIM_IC_ConfigChannel+0x130>
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	2201      	movs	r2, #1
 80078c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	d11b      	bne.n	8007908 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80078d4:	68bb      	ldr	r3, [r7, #8]
 80078d6:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80078d8:	68bb      	ldr	r3, [r7, #8]
 80078da:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80078dc:	68bb      	ldr	r3, [r7, #8]
 80078de:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 80078e0:	f000 fdf2 	bl	80084c8 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	699a      	ldr	r2, [r3, #24]
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	f022 020c 	bic.w	r2, r2, #12
 80078f2:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	6999      	ldr	r1, [r3, #24]
 80078fa:	68bb      	ldr	r3, [r7, #8]
 80078fc:	689a      	ldr	r2, [r3, #8]
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	430a      	orrs	r2, r1
 8007904:	619a      	str	r2, [r3, #24]
 8007906:	e060      	b.n	80079ca <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	2b04      	cmp	r3, #4
 800790c:	d11c      	bne.n	8007948 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8007912:	68bb      	ldr	r3, [r7, #8]
 8007914:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8007916:	68bb      	ldr	r3, [r7, #8]
 8007918:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800791a:	68bb      	ldr	r3, [r7, #8]
 800791c:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 800791e:	f000 fe70 	bl	8008602 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8007922:	68fb      	ldr	r3, [r7, #12]
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	699a      	ldr	r2, [r3, #24]
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8007930:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	6999      	ldr	r1, [r3, #24]
 8007938:	68bb      	ldr	r3, [r7, #8]
 800793a:	689b      	ldr	r3, [r3, #8]
 800793c:	021a      	lsls	r2, r3, #8
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	430a      	orrs	r2, r1
 8007944:	619a      	str	r2, [r3, #24]
 8007946:	e040      	b.n	80079ca <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	2b08      	cmp	r3, #8
 800794c:	d11b      	bne.n	8007986 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8007952:	68bb      	ldr	r3, [r7, #8]
 8007954:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8007956:	68bb      	ldr	r3, [r7, #8]
 8007958:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800795a:	68bb      	ldr	r3, [r7, #8]
 800795c:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 800795e:	f000 febd 	bl	80086dc <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8007962:	68fb      	ldr	r3, [r7, #12]
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	69da      	ldr	r2, [r3, #28]
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	f022 020c 	bic.w	r2, r2, #12
 8007970:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	69d9      	ldr	r1, [r3, #28]
 8007978:	68bb      	ldr	r3, [r7, #8]
 800797a:	689a      	ldr	r2, [r3, #8]
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	430a      	orrs	r2, r1
 8007982:	61da      	str	r2, [r3, #28]
 8007984:	e021      	b.n	80079ca <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	2b0c      	cmp	r3, #12
 800798a:	d11c      	bne.n	80079c6 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8007990:	68bb      	ldr	r3, [r7, #8]
 8007992:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8007994:	68bb      	ldr	r3, [r7, #8]
 8007996:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8007998:	68bb      	ldr	r3, [r7, #8]
 800799a:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 800799c:	f000 feda 	bl	8008754 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	69da      	ldr	r2, [r3, #28]
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80079ae:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	69d9      	ldr	r1, [r3, #28]
 80079b6:	68bb      	ldr	r3, [r7, #8]
 80079b8:	689b      	ldr	r3, [r3, #8]
 80079ba:	021a      	lsls	r2, r3, #8
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	430a      	orrs	r2, r1
 80079c2:	61da      	str	r2, [r3, #28]
 80079c4:	e001      	b.n	80079ca <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 80079c6:	2301      	movs	r3, #1
 80079c8:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	2200      	movs	r2, #0
 80079ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80079d2:	7dfb      	ldrb	r3, [r7, #23]
}
 80079d4:	4618      	mov	r0, r3
 80079d6:	3718      	adds	r7, #24
 80079d8:	46bd      	mov	sp, r7
 80079da:	bd80      	pop	{r7, pc}

080079dc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80079dc:	b580      	push	{r7, lr}
 80079de:	b086      	sub	sp, #24
 80079e0:	af00      	add	r7, sp, #0
 80079e2:	60f8      	str	r0, [r7, #12]
 80079e4:	60b9      	str	r1, [r7, #8]
 80079e6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80079e8:	2300      	movs	r3, #0
 80079ea:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80079f2:	2b01      	cmp	r3, #1
 80079f4:	d101      	bne.n	80079fa <HAL_TIM_PWM_ConfigChannel+0x1e>
 80079f6:	2302      	movs	r3, #2
 80079f8:	e0ff      	b.n	8007bfa <HAL_TIM_PWM_ConfigChannel+0x21e>
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	2201      	movs	r2, #1
 80079fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	2b14      	cmp	r3, #20
 8007a06:	f200 80f0 	bhi.w	8007bea <HAL_TIM_PWM_ConfigChannel+0x20e>
 8007a0a:	a201      	add	r2, pc, #4	; (adr r2, 8007a10 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007a0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a10:	08007a65 	.word	0x08007a65
 8007a14:	08007beb 	.word	0x08007beb
 8007a18:	08007beb 	.word	0x08007beb
 8007a1c:	08007beb 	.word	0x08007beb
 8007a20:	08007aa5 	.word	0x08007aa5
 8007a24:	08007beb 	.word	0x08007beb
 8007a28:	08007beb 	.word	0x08007beb
 8007a2c:	08007beb 	.word	0x08007beb
 8007a30:	08007ae7 	.word	0x08007ae7
 8007a34:	08007beb 	.word	0x08007beb
 8007a38:	08007beb 	.word	0x08007beb
 8007a3c:	08007beb 	.word	0x08007beb
 8007a40:	08007b27 	.word	0x08007b27
 8007a44:	08007beb 	.word	0x08007beb
 8007a48:	08007beb 	.word	0x08007beb
 8007a4c:	08007beb 	.word	0x08007beb
 8007a50:	08007b69 	.word	0x08007b69
 8007a54:	08007beb 	.word	0x08007beb
 8007a58:	08007beb 	.word	0x08007beb
 8007a5c:	08007beb 	.word	0x08007beb
 8007a60:	08007ba9 	.word	0x08007ba9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	68b9      	ldr	r1, [r7, #8]
 8007a6a:	4618      	mov	r0, r3
 8007a6c:	f000 fa56 	bl	8007f1c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	699a      	ldr	r2, [r3, #24]
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	f042 0208 	orr.w	r2, r2, #8
 8007a7e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	699a      	ldr	r2, [r3, #24]
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	f022 0204 	bic.w	r2, r2, #4
 8007a8e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007a90:	68fb      	ldr	r3, [r7, #12]
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	6999      	ldr	r1, [r3, #24]
 8007a96:	68bb      	ldr	r3, [r7, #8]
 8007a98:	691a      	ldr	r2, [r3, #16]
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	430a      	orrs	r2, r1
 8007aa0:	619a      	str	r2, [r3, #24]
      break;
 8007aa2:	e0a5      	b.n	8007bf0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	68b9      	ldr	r1, [r7, #8]
 8007aaa:	4618      	mov	r0, r3
 8007aac:	f000 fac6 	bl	800803c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	699a      	ldr	r2, [r3, #24]
 8007ab6:	68fb      	ldr	r3, [r7, #12]
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007abe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007ac0:	68fb      	ldr	r3, [r7, #12]
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	699a      	ldr	r2, [r3, #24]
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007ace:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	6999      	ldr	r1, [r3, #24]
 8007ad6:	68bb      	ldr	r3, [r7, #8]
 8007ad8:	691b      	ldr	r3, [r3, #16]
 8007ada:	021a      	lsls	r2, r3, #8
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	430a      	orrs	r2, r1
 8007ae2:	619a      	str	r2, [r3, #24]
      break;
 8007ae4:	e084      	b.n	8007bf0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007ae6:	68fb      	ldr	r3, [r7, #12]
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	68b9      	ldr	r1, [r7, #8]
 8007aec:	4618      	mov	r0, r3
 8007aee:	f000 fb2f 	bl	8008150 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007af2:	68fb      	ldr	r3, [r7, #12]
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	69da      	ldr	r2, [r3, #28]
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	f042 0208 	orr.w	r2, r2, #8
 8007b00:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007b02:	68fb      	ldr	r3, [r7, #12]
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	69da      	ldr	r2, [r3, #28]
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	f022 0204 	bic.w	r2, r2, #4
 8007b10:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007b12:	68fb      	ldr	r3, [r7, #12]
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	69d9      	ldr	r1, [r3, #28]
 8007b18:	68bb      	ldr	r3, [r7, #8]
 8007b1a:	691a      	ldr	r2, [r3, #16]
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	430a      	orrs	r2, r1
 8007b22:	61da      	str	r2, [r3, #28]
      break;
 8007b24:	e064      	b.n	8007bf0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007b26:	68fb      	ldr	r3, [r7, #12]
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	68b9      	ldr	r1, [r7, #8]
 8007b2c:	4618      	mov	r0, r3
 8007b2e:	f000 fb97 	bl	8008260 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007b32:	68fb      	ldr	r3, [r7, #12]
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	69da      	ldr	r2, [r3, #28]
 8007b38:	68fb      	ldr	r3, [r7, #12]
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007b40:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007b42:	68fb      	ldr	r3, [r7, #12]
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	69da      	ldr	r2, [r3, #28]
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007b50:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	69d9      	ldr	r1, [r3, #28]
 8007b58:	68bb      	ldr	r3, [r7, #8]
 8007b5a:	691b      	ldr	r3, [r3, #16]
 8007b5c:	021a      	lsls	r2, r3, #8
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	430a      	orrs	r2, r1
 8007b64:	61da      	str	r2, [r3, #28]
      break;
 8007b66:	e043      	b.n	8007bf0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	68b9      	ldr	r1, [r7, #8]
 8007b6e:	4618      	mov	r0, r3
 8007b70:	f000 fbe0 	bl	8008334 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8007b74:	68fb      	ldr	r3, [r7, #12]
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007b7a:	68fb      	ldr	r3, [r7, #12]
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	f042 0208 	orr.w	r2, r2, #8
 8007b82:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007b8a:	68fb      	ldr	r3, [r7, #12]
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	f022 0204 	bic.w	r2, r2, #4
 8007b92:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8007b9a:	68bb      	ldr	r3, [r7, #8]
 8007b9c:	691a      	ldr	r2, [r3, #16]
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	430a      	orrs	r2, r1
 8007ba4:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8007ba6:	e023      	b.n	8007bf0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	68b9      	ldr	r1, [r7, #8]
 8007bae:	4618      	mov	r0, r3
 8007bb0:	f000 fc24 	bl	80083fc <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007bba:	68fb      	ldr	r3, [r7, #12]
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007bc2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007bd2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8007bda:	68bb      	ldr	r3, [r7, #8]
 8007bdc:	691b      	ldr	r3, [r3, #16]
 8007bde:	021a      	lsls	r2, r3, #8
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	430a      	orrs	r2, r1
 8007be6:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8007be8:	e002      	b.n	8007bf0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8007bea:	2301      	movs	r3, #1
 8007bec:	75fb      	strb	r3, [r7, #23]
      break;
 8007bee:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007bf0:	68fb      	ldr	r3, [r7, #12]
 8007bf2:	2200      	movs	r2, #0
 8007bf4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007bf8:	7dfb      	ldrb	r3, [r7, #23]
}
 8007bfa:	4618      	mov	r0, r3
 8007bfc:	3718      	adds	r7, #24
 8007bfe:	46bd      	mov	sp, r7
 8007c00:	bd80      	pop	{r7, pc}
 8007c02:	bf00      	nop

08007c04 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007c04:	b580      	push	{r7, lr}
 8007c06:	b084      	sub	sp, #16
 8007c08:	af00      	add	r7, sp, #0
 8007c0a:	6078      	str	r0, [r7, #4]
 8007c0c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007c0e:	2300      	movs	r3, #0
 8007c10:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007c18:	2b01      	cmp	r3, #1
 8007c1a:	d101      	bne.n	8007c20 <HAL_TIM_ConfigClockSource+0x1c>
 8007c1c:	2302      	movs	r3, #2
 8007c1e:	e0b6      	b.n	8007d8e <HAL_TIM_ConfigClockSource+0x18a>
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	2201      	movs	r2, #1
 8007c24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	2202      	movs	r2, #2
 8007c2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	689b      	ldr	r3, [r3, #8]
 8007c36:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007c38:	68bb      	ldr	r3, [r7, #8]
 8007c3a:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 8007c3e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8007c42:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007c44:	68bb      	ldr	r3, [r7, #8]
 8007c46:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007c4a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	68ba      	ldr	r2, [r7, #8]
 8007c52:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007c54:	683b      	ldr	r3, [r7, #0]
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007c5c:	d03e      	beq.n	8007cdc <HAL_TIM_ConfigClockSource+0xd8>
 8007c5e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007c62:	f200 8087 	bhi.w	8007d74 <HAL_TIM_ConfigClockSource+0x170>
 8007c66:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007c6a:	f000 8086 	beq.w	8007d7a <HAL_TIM_ConfigClockSource+0x176>
 8007c6e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007c72:	d87f      	bhi.n	8007d74 <HAL_TIM_ConfigClockSource+0x170>
 8007c74:	2b70      	cmp	r3, #112	; 0x70
 8007c76:	d01a      	beq.n	8007cae <HAL_TIM_ConfigClockSource+0xaa>
 8007c78:	2b70      	cmp	r3, #112	; 0x70
 8007c7a:	d87b      	bhi.n	8007d74 <HAL_TIM_ConfigClockSource+0x170>
 8007c7c:	2b60      	cmp	r3, #96	; 0x60
 8007c7e:	d050      	beq.n	8007d22 <HAL_TIM_ConfigClockSource+0x11e>
 8007c80:	2b60      	cmp	r3, #96	; 0x60
 8007c82:	d877      	bhi.n	8007d74 <HAL_TIM_ConfigClockSource+0x170>
 8007c84:	2b50      	cmp	r3, #80	; 0x50
 8007c86:	d03c      	beq.n	8007d02 <HAL_TIM_ConfigClockSource+0xfe>
 8007c88:	2b50      	cmp	r3, #80	; 0x50
 8007c8a:	d873      	bhi.n	8007d74 <HAL_TIM_ConfigClockSource+0x170>
 8007c8c:	2b40      	cmp	r3, #64	; 0x40
 8007c8e:	d058      	beq.n	8007d42 <HAL_TIM_ConfigClockSource+0x13e>
 8007c90:	2b40      	cmp	r3, #64	; 0x40
 8007c92:	d86f      	bhi.n	8007d74 <HAL_TIM_ConfigClockSource+0x170>
 8007c94:	2b30      	cmp	r3, #48	; 0x30
 8007c96:	d064      	beq.n	8007d62 <HAL_TIM_ConfigClockSource+0x15e>
 8007c98:	2b30      	cmp	r3, #48	; 0x30
 8007c9a:	d86b      	bhi.n	8007d74 <HAL_TIM_ConfigClockSource+0x170>
 8007c9c:	2b20      	cmp	r3, #32
 8007c9e:	d060      	beq.n	8007d62 <HAL_TIM_ConfigClockSource+0x15e>
 8007ca0:	2b20      	cmp	r3, #32
 8007ca2:	d867      	bhi.n	8007d74 <HAL_TIM_ConfigClockSource+0x170>
 8007ca4:	2b00      	cmp	r3, #0
 8007ca6:	d05c      	beq.n	8007d62 <HAL_TIM_ConfigClockSource+0x15e>
 8007ca8:	2b10      	cmp	r3, #16
 8007caa:	d05a      	beq.n	8007d62 <HAL_TIM_ConfigClockSource+0x15e>
 8007cac:	e062      	b.n	8007d74 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007cb2:	683b      	ldr	r3, [r7, #0]
 8007cb4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007cb6:	683b      	ldr	r3, [r7, #0]
 8007cb8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007cba:	683b      	ldr	r3, [r7, #0]
 8007cbc:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007cbe:	f000 fda3 	bl	8008808 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	689b      	ldr	r3, [r3, #8]
 8007cc8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007cca:	68bb      	ldr	r3, [r7, #8]
 8007ccc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007cd0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	68ba      	ldr	r2, [r7, #8]
 8007cd8:	609a      	str	r2, [r3, #8]
      break;
 8007cda:	e04f      	b.n	8007d7c <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007ce0:	683b      	ldr	r3, [r7, #0]
 8007ce2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007ce4:	683b      	ldr	r3, [r7, #0]
 8007ce6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007ce8:	683b      	ldr	r3, [r7, #0]
 8007cea:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007cec:	f000 fd8c 	bl	8008808 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	689a      	ldr	r2, [r3, #8]
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007cfe:	609a      	str	r2, [r3, #8]
      break;
 8007d00:	e03c      	b.n	8007d7c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007d06:	683b      	ldr	r3, [r7, #0]
 8007d08:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007d0a:	683b      	ldr	r3, [r7, #0]
 8007d0c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007d0e:	461a      	mov	r2, r3
 8007d10:	f000 fc48 	bl	80085a4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	2150      	movs	r1, #80	; 0x50
 8007d1a:	4618      	mov	r0, r3
 8007d1c:	f000 fd57 	bl	80087ce <TIM_ITRx_SetConfig>
      break;
 8007d20:	e02c      	b.n	8007d7c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007d26:	683b      	ldr	r3, [r7, #0]
 8007d28:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007d2a:	683b      	ldr	r3, [r7, #0]
 8007d2c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007d2e:	461a      	mov	r2, r3
 8007d30:	f000 fca4 	bl	800867c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	2160      	movs	r1, #96	; 0x60
 8007d3a:	4618      	mov	r0, r3
 8007d3c:	f000 fd47 	bl	80087ce <TIM_ITRx_SetConfig>
      break;
 8007d40:	e01c      	b.n	8007d7c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007d46:	683b      	ldr	r3, [r7, #0]
 8007d48:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007d4a:	683b      	ldr	r3, [r7, #0]
 8007d4c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007d4e:	461a      	mov	r2, r3
 8007d50:	f000 fc28 	bl	80085a4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	2140      	movs	r1, #64	; 0x40
 8007d5a:	4618      	mov	r0, r3
 8007d5c:	f000 fd37 	bl	80087ce <TIM_ITRx_SetConfig>
      break;
 8007d60:	e00c      	b.n	8007d7c <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	681a      	ldr	r2, [r3, #0]
 8007d66:	683b      	ldr	r3, [r7, #0]
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	4619      	mov	r1, r3
 8007d6c:	4610      	mov	r0, r2
 8007d6e:	f000 fd2e 	bl	80087ce <TIM_ITRx_SetConfig>
      break;
 8007d72:	e003      	b.n	8007d7c <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8007d74:	2301      	movs	r3, #1
 8007d76:	73fb      	strb	r3, [r7, #15]
      break;
 8007d78:	e000      	b.n	8007d7c <HAL_TIM_ConfigClockSource+0x178>
      break;
 8007d7a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	2201      	movs	r2, #1
 8007d80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	2200      	movs	r2, #0
 8007d88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007d8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d8e:	4618      	mov	r0, r3
 8007d90:	3710      	adds	r7, #16
 8007d92:	46bd      	mov	sp, r7
 8007d94:	bd80      	pop	{r7, pc}

08007d96 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007d96:	b480      	push	{r7}
 8007d98:	b083      	sub	sp, #12
 8007d9a:	af00      	add	r7, sp, #0
 8007d9c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007d9e:	bf00      	nop
 8007da0:	370c      	adds	r7, #12
 8007da2:	46bd      	mov	sp, r7
 8007da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007da8:	4770      	bx	lr

08007daa <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007daa:	b480      	push	{r7}
 8007dac:	b083      	sub	sp, #12
 8007dae:	af00      	add	r7, sp, #0
 8007db0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007db2:	bf00      	nop
 8007db4:	370c      	adds	r7, #12
 8007db6:	46bd      	mov	sp, r7
 8007db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dbc:	4770      	bx	lr

08007dbe <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007dbe:	b480      	push	{r7}
 8007dc0:	b083      	sub	sp, #12
 8007dc2:	af00      	add	r7, sp, #0
 8007dc4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007dc6:	bf00      	nop
 8007dc8:	370c      	adds	r7, #12
 8007dca:	46bd      	mov	sp, r7
 8007dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dd0:	4770      	bx	lr

08007dd2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007dd2:	b480      	push	{r7}
 8007dd4:	b083      	sub	sp, #12
 8007dd6:	af00      	add	r7, sp, #0
 8007dd8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007dda:	bf00      	nop
 8007ddc:	370c      	adds	r7, #12
 8007dde:	46bd      	mov	sp, r7
 8007de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007de4:	4770      	bx	lr
	...

08007de8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007de8:	b480      	push	{r7}
 8007dea:	b085      	sub	sp, #20
 8007dec:	af00      	add	r7, sp, #0
 8007dee:	6078      	str	r0, [r7, #4]
 8007df0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	4a40      	ldr	r2, [pc, #256]	; (8007efc <TIM_Base_SetConfig+0x114>)
 8007dfc:	4293      	cmp	r3, r2
 8007dfe:	d013      	beq.n	8007e28 <TIM_Base_SetConfig+0x40>
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007e06:	d00f      	beq.n	8007e28 <TIM_Base_SetConfig+0x40>
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	4a3d      	ldr	r2, [pc, #244]	; (8007f00 <TIM_Base_SetConfig+0x118>)
 8007e0c:	4293      	cmp	r3, r2
 8007e0e:	d00b      	beq.n	8007e28 <TIM_Base_SetConfig+0x40>
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	4a3c      	ldr	r2, [pc, #240]	; (8007f04 <TIM_Base_SetConfig+0x11c>)
 8007e14:	4293      	cmp	r3, r2
 8007e16:	d007      	beq.n	8007e28 <TIM_Base_SetConfig+0x40>
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	4a3b      	ldr	r2, [pc, #236]	; (8007f08 <TIM_Base_SetConfig+0x120>)
 8007e1c:	4293      	cmp	r3, r2
 8007e1e:	d003      	beq.n	8007e28 <TIM_Base_SetConfig+0x40>
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	4a3a      	ldr	r2, [pc, #232]	; (8007f0c <TIM_Base_SetConfig+0x124>)
 8007e24:	4293      	cmp	r3, r2
 8007e26:	d108      	bne.n	8007e3a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007e28:	68fb      	ldr	r3, [r7, #12]
 8007e2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007e2e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007e30:	683b      	ldr	r3, [r7, #0]
 8007e32:	685b      	ldr	r3, [r3, #4]
 8007e34:	68fa      	ldr	r2, [r7, #12]
 8007e36:	4313      	orrs	r3, r2
 8007e38:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	4a2f      	ldr	r2, [pc, #188]	; (8007efc <TIM_Base_SetConfig+0x114>)
 8007e3e:	4293      	cmp	r3, r2
 8007e40:	d01f      	beq.n	8007e82 <TIM_Base_SetConfig+0x9a>
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007e48:	d01b      	beq.n	8007e82 <TIM_Base_SetConfig+0x9a>
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	4a2c      	ldr	r2, [pc, #176]	; (8007f00 <TIM_Base_SetConfig+0x118>)
 8007e4e:	4293      	cmp	r3, r2
 8007e50:	d017      	beq.n	8007e82 <TIM_Base_SetConfig+0x9a>
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	4a2b      	ldr	r2, [pc, #172]	; (8007f04 <TIM_Base_SetConfig+0x11c>)
 8007e56:	4293      	cmp	r3, r2
 8007e58:	d013      	beq.n	8007e82 <TIM_Base_SetConfig+0x9a>
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	4a2a      	ldr	r2, [pc, #168]	; (8007f08 <TIM_Base_SetConfig+0x120>)
 8007e5e:	4293      	cmp	r3, r2
 8007e60:	d00f      	beq.n	8007e82 <TIM_Base_SetConfig+0x9a>
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	4a29      	ldr	r2, [pc, #164]	; (8007f0c <TIM_Base_SetConfig+0x124>)
 8007e66:	4293      	cmp	r3, r2
 8007e68:	d00b      	beq.n	8007e82 <TIM_Base_SetConfig+0x9a>
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	4a28      	ldr	r2, [pc, #160]	; (8007f10 <TIM_Base_SetConfig+0x128>)
 8007e6e:	4293      	cmp	r3, r2
 8007e70:	d007      	beq.n	8007e82 <TIM_Base_SetConfig+0x9a>
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	4a27      	ldr	r2, [pc, #156]	; (8007f14 <TIM_Base_SetConfig+0x12c>)
 8007e76:	4293      	cmp	r3, r2
 8007e78:	d003      	beq.n	8007e82 <TIM_Base_SetConfig+0x9a>
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	4a26      	ldr	r2, [pc, #152]	; (8007f18 <TIM_Base_SetConfig+0x130>)
 8007e7e:	4293      	cmp	r3, r2
 8007e80:	d108      	bne.n	8007e94 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007e82:	68fb      	ldr	r3, [r7, #12]
 8007e84:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007e88:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007e8a:	683b      	ldr	r3, [r7, #0]
 8007e8c:	68db      	ldr	r3, [r3, #12]
 8007e8e:	68fa      	ldr	r2, [r7, #12]
 8007e90:	4313      	orrs	r3, r2
 8007e92:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007e9a:	683b      	ldr	r3, [r7, #0]
 8007e9c:	695b      	ldr	r3, [r3, #20]
 8007e9e:	4313      	orrs	r3, r2
 8007ea0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	68fa      	ldr	r2, [r7, #12]
 8007ea6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007ea8:	683b      	ldr	r3, [r7, #0]
 8007eaa:	689a      	ldr	r2, [r3, #8]
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007eb0:	683b      	ldr	r3, [r7, #0]
 8007eb2:	681a      	ldr	r2, [r3, #0]
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	4a10      	ldr	r2, [pc, #64]	; (8007efc <TIM_Base_SetConfig+0x114>)
 8007ebc:	4293      	cmp	r3, r2
 8007ebe:	d00f      	beq.n	8007ee0 <TIM_Base_SetConfig+0xf8>
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	4a12      	ldr	r2, [pc, #72]	; (8007f0c <TIM_Base_SetConfig+0x124>)
 8007ec4:	4293      	cmp	r3, r2
 8007ec6:	d00b      	beq.n	8007ee0 <TIM_Base_SetConfig+0xf8>
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	4a11      	ldr	r2, [pc, #68]	; (8007f10 <TIM_Base_SetConfig+0x128>)
 8007ecc:	4293      	cmp	r3, r2
 8007ece:	d007      	beq.n	8007ee0 <TIM_Base_SetConfig+0xf8>
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	4a10      	ldr	r2, [pc, #64]	; (8007f14 <TIM_Base_SetConfig+0x12c>)
 8007ed4:	4293      	cmp	r3, r2
 8007ed6:	d003      	beq.n	8007ee0 <TIM_Base_SetConfig+0xf8>
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	4a0f      	ldr	r2, [pc, #60]	; (8007f18 <TIM_Base_SetConfig+0x130>)
 8007edc:	4293      	cmp	r3, r2
 8007ede:	d103      	bne.n	8007ee8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007ee0:	683b      	ldr	r3, [r7, #0]
 8007ee2:	691a      	ldr	r2, [r3, #16]
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	2201      	movs	r2, #1
 8007eec:	615a      	str	r2, [r3, #20]
}
 8007eee:	bf00      	nop
 8007ef0:	3714      	adds	r7, #20
 8007ef2:	46bd      	mov	sp, r7
 8007ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ef8:	4770      	bx	lr
 8007efa:	bf00      	nop
 8007efc:	40012c00 	.word	0x40012c00
 8007f00:	40000400 	.word	0x40000400
 8007f04:	40000800 	.word	0x40000800
 8007f08:	40000c00 	.word	0x40000c00
 8007f0c:	40013400 	.word	0x40013400
 8007f10:	40014000 	.word	0x40014000
 8007f14:	40014400 	.word	0x40014400
 8007f18:	40014800 	.word	0x40014800

08007f1c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007f1c:	b480      	push	{r7}
 8007f1e:	b087      	sub	sp, #28
 8007f20:	af00      	add	r7, sp, #0
 8007f22:	6078      	str	r0, [r7, #4]
 8007f24:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	6a1b      	ldr	r3, [r3, #32]
 8007f2a:	f023 0201 	bic.w	r2, r3, #1
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	6a1b      	ldr	r3, [r3, #32]
 8007f36:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	685b      	ldr	r3, [r3, #4]
 8007f3c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	699b      	ldr	r3, [r3, #24]
 8007f42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007f44:	68fb      	ldr	r3, [r7, #12]
 8007f46:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007f4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007f4e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	f023 0303 	bic.w	r3, r3, #3
 8007f56:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007f58:	683b      	ldr	r3, [r7, #0]
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	68fa      	ldr	r2, [r7, #12]
 8007f5e:	4313      	orrs	r3, r2
 8007f60:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007f62:	697b      	ldr	r3, [r7, #20]
 8007f64:	f023 0302 	bic.w	r3, r3, #2
 8007f68:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007f6a:	683b      	ldr	r3, [r7, #0]
 8007f6c:	689b      	ldr	r3, [r3, #8]
 8007f6e:	697a      	ldr	r2, [r7, #20]
 8007f70:	4313      	orrs	r3, r2
 8007f72:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	4a2c      	ldr	r2, [pc, #176]	; (8008028 <TIM_OC1_SetConfig+0x10c>)
 8007f78:	4293      	cmp	r3, r2
 8007f7a:	d00f      	beq.n	8007f9c <TIM_OC1_SetConfig+0x80>
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	4a2b      	ldr	r2, [pc, #172]	; (800802c <TIM_OC1_SetConfig+0x110>)
 8007f80:	4293      	cmp	r3, r2
 8007f82:	d00b      	beq.n	8007f9c <TIM_OC1_SetConfig+0x80>
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	4a2a      	ldr	r2, [pc, #168]	; (8008030 <TIM_OC1_SetConfig+0x114>)
 8007f88:	4293      	cmp	r3, r2
 8007f8a:	d007      	beq.n	8007f9c <TIM_OC1_SetConfig+0x80>
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	4a29      	ldr	r2, [pc, #164]	; (8008034 <TIM_OC1_SetConfig+0x118>)
 8007f90:	4293      	cmp	r3, r2
 8007f92:	d003      	beq.n	8007f9c <TIM_OC1_SetConfig+0x80>
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	4a28      	ldr	r2, [pc, #160]	; (8008038 <TIM_OC1_SetConfig+0x11c>)
 8007f98:	4293      	cmp	r3, r2
 8007f9a:	d10c      	bne.n	8007fb6 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007f9c:	697b      	ldr	r3, [r7, #20]
 8007f9e:	f023 0308 	bic.w	r3, r3, #8
 8007fa2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007fa4:	683b      	ldr	r3, [r7, #0]
 8007fa6:	68db      	ldr	r3, [r3, #12]
 8007fa8:	697a      	ldr	r2, [r7, #20]
 8007faa:	4313      	orrs	r3, r2
 8007fac:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007fae:	697b      	ldr	r3, [r7, #20]
 8007fb0:	f023 0304 	bic.w	r3, r3, #4
 8007fb4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	4a1b      	ldr	r2, [pc, #108]	; (8008028 <TIM_OC1_SetConfig+0x10c>)
 8007fba:	4293      	cmp	r3, r2
 8007fbc:	d00f      	beq.n	8007fde <TIM_OC1_SetConfig+0xc2>
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	4a1a      	ldr	r2, [pc, #104]	; (800802c <TIM_OC1_SetConfig+0x110>)
 8007fc2:	4293      	cmp	r3, r2
 8007fc4:	d00b      	beq.n	8007fde <TIM_OC1_SetConfig+0xc2>
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	4a19      	ldr	r2, [pc, #100]	; (8008030 <TIM_OC1_SetConfig+0x114>)
 8007fca:	4293      	cmp	r3, r2
 8007fcc:	d007      	beq.n	8007fde <TIM_OC1_SetConfig+0xc2>
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	4a18      	ldr	r2, [pc, #96]	; (8008034 <TIM_OC1_SetConfig+0x118>)
 8007fd2:	4293      	cmp	r3, r2
 8007fd4:	d003      	beq.n	8007fde <TIM_OC1_SetConfig+0xc2>
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	4a17      	ldr	r2, [pc, #92]	; (8008038 <TIM_OC1_SetConfig+0x11c>)
 8007fda:	4293      	cmp	r3, r2
 8007fdc:	d111      	bne.n	8008002 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007fde:	693b      	ldr	r3, [r7, #16]
 8007fe0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007fe4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007fe6:	693b      	ldr	r3, [r7, #16]
 8007fe8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007fec:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007fee:	683b      	ldr	r3, [r7, #0]
 8007ff0:	695b      	ldr	r3, [r3, #20]
 8007ff2:	693a      	ldr	r2, [r7, #16]
 8007ff4:	4313      	orrs	r3, r2
 8007ff6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007ff8:	683b      	ldr	r3, [r7, #0]
 8007ffa:	699b      	ldr	r3, [r3, #24]
 8007ffc:	693a      	ldr	r2, [r7, #16]
 8007ffe:	4313      	orrs	r3, r2
 8008000:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	693a      	ldr	r2, [r7, #16]
 8008006:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	68fa      	ldr	r2, [r7, #12]
 800800c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800800e:	683b      	ldr	r3, [r7, #0]
 8008010:	685a      	ldr	r2, [r3, #4]
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	697a      	ldr	r2, [r7, #20]
 800801a:	621a      	str	r2, [r3, #32]
}
 800801c:	bf00      	nop
 800801e:	371c      	adds	r7, #28
 8008020:	46bd      	mov	sp, r7
 8008022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008026:	4770      	bx	lr
 8008028:	40012c00 	.word	0x40012c00
 800802c:	40013400 	.word	0x40013400
 8008030:	40014000 	.word	0x40014000
 8008034:	40014400 	.word	0x40014400
 8008038:	40014800 	.word	0x40014800

0800803c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800803c:	b480      	push	{r7}
 800803e:	b087      	sub	sp, #28
 8008040:	af00      	add	r7, sp, #0
 8008042:	6078      	str	r0, [r7, #4]
 8008044:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	6a1b      	ldr	r3, [r3, #32]
 800804a:	f023 0210 	bic.w	r2, r3, #16
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	6a1b      	ldr	r3, [r3, #32]
 8008056:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	685b      	ldr	r3, [r3, #4]
 800805c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	699b      	ldr	r3, [r3, #24]
 8008062:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008064:	68fb      	ldr	r3, [r7, #12]
 8008066:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800806a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800806e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008070:	68fb      	ldr	r3, [r7, #12]
 8008072:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008076:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008078:	683b      	ldr	r3, [r7, #0]
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	021b      	lsls	r3, r3, #8
 800807e:	68fa      	ldr	r2, [r7, #12]
 8008080:	4313      	orrs	r3, r2
 8008082:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008084:	697b      	ldr	r3, [r7, #20]
 8008086:	f023 0320 	bic.w	r3, r3, #32
 800808a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800808c:	683b      	ldr	r3, [r7, #0]
 800808e:	689b      	ldr	r3, [r3, #8]
 8008090:	011b      	lsls	r3, r3, #4
 8008092:	697a      	ldr	r2, [r7, #20]
 8008094:	4313      	orrs	r3, r2
 8008096:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	4a28      	ldr	r2, [pc, #160]	; (800813c <TIM_OC2_SetConfig+0x100>)
 800809c:	4293      	cmp	r3, r2
 800809e:	d003      	beq.n	80080a8 <TIM_OC2_SetConfig+0x6c>
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	4a27      	ldr	r2, [pc, #156]	; (8008140 <TIM_OC2_SetConfig+0x104>)
 80080a4:	4293      	cmp	r3, r2
 80080a6:	d10d      	bne.n	80080c4 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80080a8:	697b      	ldr	r3, [r7, #20]
 80080aa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80080ae:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80080b0:	683b      	ldr	r3, [r7, #0]
 80080b2:	68db      	ldr	r3, [r3, #12]
 80080b4:	011b      	lsls	r3, r3, #4
 80080b6:	697a      	ldr	r2, [r7, #20]
 80080b8:	4313      	orrs	r3, r2
 80080ba:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80080bc:	697b      	ldr	r3, [r7, #20]
 80080be:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80080c2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	4a1d      	ldr	r2, [pc, #116]	; (800813c <TIM_OC2_SetConfig+0x100>)
 80080c8:	4293      	cmp	r3, r2
 80080ca:	d00f      	beq.n	80080ec <TIM_OC2_SetConfig+0xb0>
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	4a1c      	ldr	r2, [pc, #112]	; (8008140 <TIM_OC2_SetConfig+0x104>)
 80080d0:	4293      	cmp	r3, r2
 80080d2:	d00b      	beq.n	80080ec <TIM_OC2_SetConfig+0xb0>
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	4a1b      	ldr	r2, [pc, #108]	; (8008144 <TIM_OC2_SetConfig+0x108>)
 80080d8:	4293      	cmp	r3, r2
 80080da:	d007      	beq.n	80080ec <TIM_OC2_SetConfig+0xb0>
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	4a1a      	ldr	r2, [pc, #104]	; (8008148 <TIM_OC2_SetConfig+0x10c>)
 80080e0:	4293      	cmp	r3, r2
 80080e2:	d003      	beq.n	80080ec <TIM_OC2_SetConfig+0xb0>
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	4a19      	ldr	r2, [pc, #100]	; (800814c <TIM_OC2_SetConfig+0x110>)
 80080e8:	4293      	cmp	r3, r2
 80080ea:	d113      	bne.n	8008114 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80080ec:	693b      	ldr	r3, [r7, #16]
 80080ee:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80080f2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80080f4:	693b      	ldr	r3, [r7, #16]
 80080f6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80080fa:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80080fc:	683b      	ldr	r3, [r7, #0]
 80080fe:	695b      	ldr	r3, [r3, #20]
 8008100:	009b      	lsls	r3, r3, #2
 8008102:	693a      	ldr	r2, [r7, #16]
 8008104:	4313      	orrs	r3, r2
 8008106:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008108:	683b      	ldr	r3, [r7, #0]
 800810a:	699b      	ldr	r3, [r3, #24]
 800810c:	009b      	lsls	r3, r3, #2
 800810e:	693a      	ldr	r2, [r7, #16]
 8008110:	4313      	orrs	r3, r2
 8008112:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	693a      	ldr	r2, [r7, #16]
 8008118:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	68fa      	ldr	r2, [r7, #12]
 800811e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008120:	683b      	ldr	r3, [r7, #0]
 8008122:	685a      	ldr	r2, [r3, #4]
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	697a      	ldr	r2, [r7, #20]
 800812c:	621a      	str	r2, [r3, #32]
}
 800812e:	bf00      	nop
 8008130:	371c      	adds	r7, #28
 8008132:	46bd      	mov	sp, r7
 8008134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008138:	4770      	bx	lr
 800813a:	bf00      	nop
 800813c:	40012c00 	.word	0x40012c00
 8008140:	40013400 	.word	0x40013400
 8008144:	40014000 	.word	0x40014000
 8008148:	40014400 	.word	0x40014400
 800814c:	40014800 	.word	0x40014800

08008150 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008150:	b480      	push	{r7}
 8008152:	b087      	sub	sp, #28
 8008154:	af00      	add	r7, sp, #0
 8008156:	6078      	str	r0, [r7, #4]
 8008158:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	6a1b      	ldr	r3, [r3, #32]
 800815e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	6a1b      	ldr	r3, [r3, #32]
 800816a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	685b      	ldr	r3, [r3, #4]
 8008170:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	69db      	ldr	r3, [r3, #28]
 8008176:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008178:	68fb      	ldr	r3, [r7, #12]
 800817a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800817e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008182:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008184:	68fb      	ldr	r3, [r7, #12]
 8008186:	f023 0303 	bic.w	r3, r3, #3
 800818a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800818c:	683b      	ldr	r3, [r7, #0]
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	68fa      	ldr	r2, [r7, #12]
 8008192:	4313      	orrs	r3, r2
 8008194:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008196:	697b      	ldr	r3, [r7, #20]
 8008198:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800819c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800819e:	683b      	ldr	r3, [r7, #0]
 80081a0:	689b      	ldr	r3, [r3, #8]
 80081a2:	021b      	lsls	r3, r3, #8
 80081a4:	697a      	ldr	r2, [r7, #20]
 80081a6:	4313      	orrs	r3, r2
 80081a8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	4a27      	ldr	r2, [pc, #156]	; (800824c <TIM_OC3_SetConfig+0xfc>)
 80081ae:	4293      	cmp	r3, r2
 80081b0:	d003      	beq.n	80081ba <TIM_OC3_SetConfig+0x6a>
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	4a26      	ldr	r2, [pc, #152]	; (8008250 <TIM_OC3_SetConfig+0x100>)
 80081b6:	4293      	cmp	r3, r2
 80081b8:	d10d      	bne.n	80081d6 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80081ba:	697b      	ldr	r3, [r7, #20]
 80081bc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80081c0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80081c2:	683b      	ldr	r3, [r7, #0]
 80081c4:	68db      	ldr	r3, [r3, #12]
 80081c6:	021b      	lsls	r3, r3, #8
 80081c8:	697a      	ldr	r2, [r7, #20]
 80081ca:	4313      	orrs	r3, r2
 80081cc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80081ce:	697b      	ldr	r3, [r7, #20]
 80081d0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80081d4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	4a1c      	ldr	r2, [pc, #112]	; (800824c <TIM_OC3_SetConfig+0xfc>)
 80081da:	4293      	cmp	r3, r2
 80081dc:	d00f      	beq.n	80081fe <TIM_OC3_SetConfig+0xae>
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	4a1b      	ldr	r2, [pc, #108]	; (8008250 <TIM_OC3_SetConfig+0x100>)
 80081e2:	4293      	cmp	r3, r2
 80081e4:	d00b      	beq.n	80081fe <TIM_OC3_SetConfig+0xae>
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	4a1a      	ldr	r2, [pc, #104]	; (8008254 <TIM_OC3_SetConfig+0x104>)
 80081ea:	4293      	cmp	r3, r2
 80081ec:	d007      	beq.n	80081fe <TIM_OC3_SetConfig+0xae>
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	4a19      	ldr	r2, [pc, #100]	; (8008258 <TIM_OC3_SetConfig+0x108>)
 80081f2:	4293      	cmp	r3, r2
 80081f4:	d003      	beq.n	80081fe <TIM_OC3_SetConfig+0xae>
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	4a18      	ldr	r2, [pc, #96]	; (800825c <TIM_OC3_SetConfig+0x10c>)
 80081fa:	4293      	cmp	r3, r2
 80081fc:	d113      	bne.n	8008226 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80081fe:	693b      	ldr	r3, [r7, #16]
 8008200:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008204:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008206:	693b      	ldr	r3, [r7, #16]
 8008208:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800820c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800820e:	683b      	ldr	r3, [r7, #0]
 8008210:	695b      	ldr	r3, [r3, #20]
 8008212:	011b      	lsls	r3, r3, #4
 8008214:	693a      	ldr	r2, [r7, #16]
 8008216:	4313      	orrs	r3, r2
 8008218:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800821a:	683b      	ldr	r3, [r7, #0]
 800821c:	699b      	ldr	r3, [r3, #24]
 800821e:	011b      	lsls	r3, r3, #4
 8008220:	693a      	ldr	r2, [r7, #16]
 8008222:	4313      	orrs	r3, r2
 8008224:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	693a      	ldr	r2, [r7, #16]
 800822a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	68fa      	ldr	r2, [r7, #12]
 8008230:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008232:	683b      	ldr	r3, [r7, #0]
 8008234:	685a      	ldr	r2, [r3, #4]
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	697a      	ldr	r2, [r7, #20]
 800823e:	621a      	str	r2, [r3, #32]
}
 8008240:	bf00      	nop
 8008242:	371c      	adds	r7, #28
 8008244:	46bd      	mov	sp, r7
 8008246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800824a:	4770      	bx	lr
 800824c:	40012c00 	.word	0x40012c00
 8008250:	40013400 	.word	0x40013400
 8008254:	40014000 	.word	0x40014000
 8008258:	40014400 	.word	0x40014400
 800825c:	40014800 	.word	0x40014800

08008260 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008260:	b480      	push	{r7}
 8008262:	b087      	sub	sp, #28
 8008264:	af00      	add	r7, sp, #0
 8008266:	6078      	str	r0, [r7, #4]
 8008268:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	6a1b      	ldr	r3, [r3, #32]
 800826e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	6a1b      	ldr	r3, [r3, #32]
 800827a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	685b      	ldr	r3, [r3, #4]
 8008280:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	69db      	ldr	r3, [r3, #28]
 8008286:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008288:	68fb      	ldr	r3, [r7, #12]
 800828a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800828e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008292:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008294:	68fb      	ldr	r3, [r7, #12]
 8008296:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800829a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800829c:	683b      	ldr	r3, [r7, #0]
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	021b      	lsls	r3, r3, #8
 80082a2:	68fa      	ldr	r2, [r7, #12]
 80082a4:	4313      	orrs	r3, r2
 80082a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80082a8:	693b      	ldr	r3, [r7, #16]
 80082aa:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80082ae:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80082b0:	683b      	ldr	r3, [r7, #0]
 80082b2:	689b      	ldr	r3, [r3, #8]
 80082b4:	031b      	lsls	r3, r3, #12
 80082b6:	693a      	ldr	r2, [r7, #16]
 80082b8:	4313      	orrs	r3, r2
 80082ba:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	4a18      	ldr	r2, [pc, #96]	; (8008320 <TIM_OC4_SetConfig+0xc0>)
 80082c0:	4293      	cmp	r3, r2
 80082c2:	d00f      	beq.n	80082e4 <TIM_OC4_SetConfig+0x84>
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	4a17      	ldr	r2, [pc, #92]	; (8008324 <TIM_OC4_SetConfig+0xc4>)
 80082c8:	4293      	cmp	r3, r2
 80082ca:	d00b      	beq.n	80082e4 <TIM_OC4_SetConfig+0x84>
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	4a16      	ldr	r2, [pc, #88]	; (8008328 <TIM_OC4_SetConfig+0xc8>)
 80082d0:	4293      	cmp	r3, r2
 80082d2:	d007      	beq.n	80082e4 <TIM_OC4_SetConfig+0x84>
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	4a15      	ldr	r2, [pc, #84]	; (800832c <TIM_OC4_SetConfig+0xcc>)
 80082d8:	4293      	cmp	r3, r2
 80082da:	d003      	beq.n	80082e4 <TIM_OC4_SetConfig+0x84>
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	4a14      	ldr	r2, [pc, #80]	; (8008330 <TIM_OC4_SetConfig+0xd0>)
 80082e0:	4293      	cmp	r3, r2
 80082e2:	d109      	bne.n	80082f8 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80082e4:	697b      	ldr	r3, [r7, #20]
 80082e6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80082ea:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80082ec:	683b      	ldr	r3, [r7, #0]
 80082ee:	695b      	ldr	r3, [r3, #20]
 80082f0:	019b      	lsls	r3, r3, #6
 80082f2:	697a      	ldr	r2, [r7, #20]
 80082f4:	4313      	orrs	r3, r2
 80082f6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	697a      	ldr	r2, [r7, #20]
 80082fc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	68fa      	ldr	r2, [r7, #12]
 8008302:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008304:	683b      	ldr	r3, [r7, #0]
 8008306:	685a      	ldr	r2, [r3, #4]
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	693a      	ldr	r2, [r7, #16]
 8008310:	621a      	str	r2, [r3, #32]
}
 8008312:	bf00      	nop
 8008314:	371c      	adds	r7, #28
 8008316:	46bd      	mov	sp, r7
 8008318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800831c:	4770      	bx	lr
 800831e:	bf00      	nop
 8008320:	40012c00 	.word	0x40012c00
 8008324:	40013400 	.word	0x40013400
 8008328:	40014000 	.word	0x40014000
 800832c:	40014400 	.word	0x40014400
 8008330:	40014800 	.word	0x40014800

08008334 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8008334:	b480      	push	{r7}
 8008336:	b087      	sub	sp, #28
 8008338:	af00      	add	r7, sp, #0
 800833a:	6078      	str	r0, [r7, #4]
 800833c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	6a1b      	ldr	r3, [r3, #32]
 8008342:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	6a1b      	ldr	r3, [r3, #32]
 800834e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	685b      	ldr	r3, [r3, #4]
 8008354:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800835a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800835c:	68fb      	ldr	r3, [r7, #12]
 800835e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008362:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008366:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008368:	683b      	ldr	r3, [r7, #0]
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	68fa      	ldr	r2, [r7, #12]
 800836e:	4313      	orrs	r3, r2
 8008370:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8008372:	693b      	ldr	r3, [r7, #16]
 8008374:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8008378:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800837a:	683b      	ldr	r3, [r7, #0]
 800837c:	689b      	ldr	r3, [r3, #8]
 800837e:	041b      	lsls	r3, r3, #16
 8008380:	693a      	ldr	r2, [r7, #16]
 8008382:	4313      	orrs	r3, r2
 8008384:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	4a17      	ldr	r2, [pc, #92]	; (80083e8 <TIM_OC5_SetConfig+0xb4>)
 800838a:	4293      	cmp	r3, r2
 800838c:	d00f      	beq.n	80083ae <TIM_OC5_SetConfig+0x7a>
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	4a16      	ldr	r2, [pc, #88]	; (80083ec <TIM_OC5_SetConfig+0xb8>)
 8008392:	4293      	cmp	r3, r2
 8008394:	d00b      	beq.n	80083ae <TIM_OC5_SetConfig+0x7a>
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	4a15      	ldr	r2, [pc, #84]	; (80083f0 <TIM_OC5_SetConfig+0xbc>)
 800839a:	4293      	cmp	r3, r2
 800839c:	d007      	beq.n	80083ae <TIM_OC5_SetConfig+0x7a>
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	4a14      	ldr	r2, [pc, #80]	; (80083f4 <TIM_OC5_SetConfig+0xc0>)
 80083a2:	4293      	cmp	r3, r2
 80083a4:	d003      	beq.n	80083ae <TIM_OC5_SetConfig+0x7a>
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	4a13      	ldr	r2, [pc, #76]	; (80083f8 <TIM_OC5_SetConfig+0xc4>)
 80083aa:	4293      	cmp	r3, r2
 80083ac:	d109      	bne.n	80083c2 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80083ae:	697b      	ldr	r3, [r7, #20]
 80083b0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80083b4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80083b6:	683b      	ldr	r3, [r7, #0]
 80083b8:	695b      	ldr	r3, [r3, #20]
 80083ba:	021b      	lsls	r3, r3, #8
 80083bc:	697a      	ldr	r2, [r7, #20]
 80083be:	4313      	orrs	r3, r2
 80083c0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	697a      	ldr	r2, [r7, #20]
 80083c6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	68fa      	ldr	r2, [r7, #12]
 80083cc:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80083ce:	683b      	ldr	r3, [r7, #0]
 80083d0:	685a      	ldr	r2, [r3, #4]
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	693a      	ldr	r2, [r7, #16]
 80083da:	621a      	str	r2, [r3, #32]
}
 80083dc:	bf00      	nop
 80083de:	371c      	adds	r7, #28
 80083e0:	46bd      	mov	sp, r7
 80083e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083e6:	4770      	bx	lr
 80083e8:	40012c00 	.word	0x40012c00
 80083ec:	40013400 	.word	0x40013400
 80083f0:	40014000 	.word	0x40014000
 80083f4:	40014400 	.word	0x40014400
 80083f8:	40014800 	.word	0x40014800

080083fc <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80083fc:	b480      	push	{r7}
 80083fe:	b087      	sub	sp, #28
 8008400:	af00      	add	r7, sp, #0
 8008402:	6078      	str	r0, [r7, #4]
 8008404:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	6a1b      	ldr	r3, [r3, #32]
 800840a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	6a1b      	ldr	r3, [r3, #32]
 8008416:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	685b      	ldr	r3, [r3, #4]
 800841c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008422:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8008424:	68fb      	ldr	r3, [r7, #12]
 8008426:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800842a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800842e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008430:	683b      	ldr	r3, [r7, #0]
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	021b      	lsls	r3, r3, #8
 8008436:	68fa      	ldr	r2, [r7, #12]
 8008438:	4313      	orrs	r3, r2
 800843a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800843c:	693b      	ldr	r3, [r7, #16]
 800843e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008442:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8008444:	683b      	ldr	r3, [r7, #0]
 8008446:	689b      	ldr	r3, [r3, #8]
 8008448:	051b      	lsls	r3, r3, #20
 800844a:	693a      	ldr	r2, [r7, #16]
 800844c:	4313      	orrs	r3, r2
 800844e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	4a18      	ldr	r2, [pc, #96]	; (80084b4 <TIM_OC6_SetConfig+0xb8>)
 8008454:	4293      	cmp	r3, r2
 8008456:	d00f      	beq.n	8008478 <TIM_OC6_SetConfig+0x7c>
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	4a17      	ldr	r2, [pc, #92]	; (80084b8 <TIM_OC6_SetConfig+0xbc>)
 800845c:	4293      	cmp	r3, r2
 800845e:	d00b      	beq.n	8008478 <TIM_OC6_SetConfig+0x7c>
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	4a16      	ldr	r2, [pc, #88]	; (80084bc <TIM_OC6_SetConfig+0xc0>)
 8008464:	4293      	cmp	r3, r2
 8008466:	d007      	beq.n	8008478 <TIM_OC6_SetConfig+0x7c>
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	4a15      	ldr	r2, [pc, #84]	; (80084c0 <TIM_OC6_SetConfig+0xc4>)
 800846c:	4293      	cmp	r3, r2
 800846e:	d003      	beq.n	8008478 <TIM_OC6_SetConfig+0x7c>
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	4a14      	ldr	r2, [pc, #80]	; (80084c4 <TIM_OC6_SetConfig+0xc8>)
 8008474:	4293      	cmp	r3, r2
 8008476:	d109      	bne.n	800848c <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8008478:	697b      	ldr	r3, [r7, #20]
 800847a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800847e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8008480:	683b      	ldr	r3, [r7, #0]
 8008482:	695b      	ldr	r3, [r3, #20]
 8008484:	029b      	lsls	r3, r3, #10
 8008486:	697a      	ldr	r2, [r7, #20]
 8008488:	4313      	orrs	r3, r2
 800848a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	697a      	ldr	r2, [r7, #20]
 8008490:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	68fa      	ldr	r2, [r7, #12]
 8008496:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8008498:	683b      	ldr	r3, [r7, #0]
 800849a:	685a      	ldr	r2, [r3, #4]
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	693a      	ldr	r2, [r7, #16]
 80084a4:	621a      	str	r2, [r3, #32]
}
 80084a6:	bf00      	nop
 80084a8:	371c      	adds	r7, #28
 80084aa:	46bd      	mov	sp, r7
 80084ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084b0:	4770      	bx	lr
 80084b2:	bf00      	nop
 80084b4:	40012c00 	.word	0x40012c00
 80084b8:	40013400 	.word	0x40013400
 80084bc:	40014000 	.word	0x40014000
 80084c0:	40014400 	.word	0x40014400
 80084c4:	40014800 	.word	0x40014800

080084c8 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80084c8:	b480      	push	{r7}
 80084ca:	b087      	sub	sp, #28
 80084cc:	af00      	add	r7, sp, #0
 80084ce:	60f8      	str	r0, [r7, #12]
 80084d0:	60b9      	str	r1, [r7, #8]
 80084d2:	607a      	str	r2, [r7, #4]
 80084d4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80084d6:	68fb      	ldr	r3, [r7, #12]
 80084d8:	6a1b      	ldr	r3, [r3, #32]
 80084da:	f023 0201 	bic.w	r2, r3, #1
 80084de:	68fb      	ldr	r3, [r7, #12]
 80084e0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80084e2:	68fb      	ldr	r3, [r7, #12]
 80084e4:	699b      	ldr	r3, [r3, #24]
 80084e6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80084e8:	68fb      	ldr	r3, [r7, #12]
 80084ea:	6a1b      	ldr	r3, [r3, #32]
 80084ec:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80084ee:	68fb      	ldr	r3, [r7, #12]
 80084f0:	4a26      	ldr	r2, [pc, #152]	; (800858c <TIM_TI1_SetConfig+0xc4>)
 80084f2:	4293      	cmp	r3, r2
 80084f4:	d017      	beq.n	8008526 <TIM_TI1_SetConfig+0x5e>
 80084f6:	68fb      	ldr	r3, [r7, #12]
 80084f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80084fc:	d013      	beq.n	8008526 <TIM_TI1_SetConfig+0x5e>
 80084fe:	68fb      	ldr	r3, [r7, #12]
 8008500:	4a23      	ldr	r2, [pc, #140]	; (8008590 <TIM_TI1_SetConfig+0xc8>)
 8008502:	4293      	cmp	r3, r2
 8008504:	d00f      	beq.n	8008526 <TIM_TI1_SetConfig+0x5e>
 8008506:	68fb      	ldr	r3, [r7, #12]
 8008508:	4a22      	ldr	r2, [pc, #136]	; (8008594 <TIM_TI1_SetConfig+0xcc>)
 800850a:	4293      	cmp	r3, r2
 800850c:	d00b      	beq.n	8008526 <TIM_TI1_SetConfig+0x5e>
 800850e:	68fb      	ldr	r3, [r7, #12]
 8008510:	4a21      	ldr	r2, [pc, #132]	; (8008598 <TIM_TI1_SetConfig+0xd0>)
 8008512:	4293      	cmp	r3, r2
 8008514:	d007      	beq.n	8008526 <TIM_TI1_SetConfig+0x5e>
 8008516:	68fb      	ldr	r3, [r7, #12]
 8008518:	4a20      	ldr	r2, [pc, #128]	; (800859c <TIM_TI1_SetConfig+0xd4>)
 800851a:	4293      	cmp	r3, r2
 800851c:	d003      	beq.n	8008526 <TIM_TI1_SetConfig+0x5e>
 800851e:	68fb      	ldr	r3, [r7, #12]
 8008520:	4a1f      	ldr	r2, [pc, #124]	; (80085a0 <TIM_TI1_SetConfig+0xd8>)
 8008522:	4293      	cmp	r3, r2
 8008524:	d101      	bne.n	800852a <TIM_TI1_SetConfig+0x62>
 8008526:	2301      	movs	r3, #1
 8008528:	e000      	b.n	800852c <TIM_TI1_SetConfig+0x64>
 800852a:	2300      	movs	r3, #0
 800852c:	2b00      	cmp	r3, #0
 800852e:	d008      	beq.n	8008542 <TIM_TI1_SetConfig+0x7a>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8008530:	697b      	ldr	r3, [r7, #20]
 8008532:	f023 0303 	bic.w	r3, r3, #3
 8008536:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8008538:	697a      	ldr	r2, [r7, #20]
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	4313      	orrs	r3, r2
 800853e:	617b      	str	r3, [r7, #20]
 8008540:	e003      	b.n	800854a <TIM_TI1_SetConfig+0x82>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8008542:	697b      	ldr	r3, [r7, #20]
 8008544:	f043 0301 	orr.w	r3, r3, #1
 8008548:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800854a:	697b      	ldr	r3, [r7, #20]
 800854c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008550:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8008552:	683b      	ldr	r3, [r7, #0]
 8008554:	011b      	lsls	r3, r3, #4
 8008556:	b2db      	uxtb	r3, r3
 8008558:	697a      	ldr	r2, [r7, #20]
 800855a:	4313      	orrs	r3, r2
 800855c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800855e:	693b      	ldr	r3, [r7, #16]
 8008560:	f023 030a 	bic.w	r3, r3, #10
 8008564:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8008566:	68bb      	ldr	r3, [r7, #8]
 8008568:	f003 030a 	and.w	r3, r3, #10
 800856c:	693a      	ldr	r2, [r7, #16]
 800856e:	4313      	orrs	r3, r2
 8008570:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008572:	68fb      	ldr	r3, [r7, #12]
 8008574:	697a      	ldr	r2, [r7, #20]
 8008576:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008578:	68fb      	ldr	r3, [r7, #12]
 800857a:	693a      	ldr	r2, [r7, #16]
 800857c:	621a      	str	r2, [r3, #32]
}
 800857e:	bf00      	nop
 8008580:	371c      	adds	r7, #28
 8008582:	46bd      	mov	sp, r7
 8008584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008588:	4770      	bx	lr
 800858a:	bf00      	nop
 800858c:	40012c00 	.word	0x40012c00
 8008590:	40000400 	.word	0x40000400
 8008594:	40000800 	.word	0x40000800
 8008598:	40000c00 	.word	0x40000c00
 800859c:	40013400 	.word	0x40013400
 80085a0:	40014000 	.word	0x40014000

080085a4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80085a4:	b480      	push	{r7}
 80085a6:	b087      	sub	sp, #28
 80085a8:	af00      	add	r7, sp, #0
 80085aa:	60f8      	str	r0, [r7, #12]
 80085ac:	60b9      	str	r1, [r7, #8]
 80085ae:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80085b0:	68fb      	ldr	r3, [r7, #12]
 80085b2:	6a1b      	ldr	r3, [r3, #32]
 80085b4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80085b6:	68fb      	ldr	r3, [r7, #12]
 80085b8:	6a1b      	ldr	r3, [r3, #32]
 80085ba:	f023 0201 	bic.w	r2, r3, #1
 80085be:	68fb      	ldr	r3, [r7, #12]
 80085c0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80085c2:	68fb      	ldr	r3, [r7, #12]
 80085c4:	699b      	ldr	r3, [r3, #24]
 80085c6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80085c8:	693b      	ldr	r3, [r7, #16]
 80085ca:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80085ce:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	011b      	lsls	r3, r3, #4
 80085d4:	693a      	ldr	r2, [r7, #16]
 80085d6:	4313      	orrs	r3, r2
 80085d8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80085da:	697b      	ldr	r3, [r7, #20]
 80085dc:	f023 030a 	bic.w	r3, r3, #10
 80085e0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80085e2:	697a      	ldr	r2, [r7, #20]
 80085e4:	68bb      	ldr	r3, [r7, #8]
 80085e6:	4313      	orrs	r3, r2
 80085e8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80085ea:	68fb      	ldr	r3, [r7, #12]
 80085ec:	693a      	ldr	r2, [r7, #16]
 80085ee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80085f0:	68fb      	ldr	r3, [r7, #12]
 80085f2:	697a      	ldr	r2, [r7, #20]
 80085f4:	621a      	str	r2, [r3, #32]
}
 80085f6:	bf00      	nop
 80085f8:	371c      	adds	r7, #28
 80085fa:	46bd      	mov	sp, r7
 80085fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008600:	4770      	bx	lr

08008602 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8008602:	b480      	push	{r7}
 8008604:	b087      	sub	sp, #28
 8008606:	af00      	add	r7, sp, #0
 8008608:	60f8      	str	r0, [r7, #12]
 800860a:	60b9      	str	r1, [r7, #8]
 800860c:	607a      	str	r2, [r7, #4]
 800860e:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008610:	68fb      	ldr	r3, [r7, #12]
 8008612:	6a1b      	ldr	r3, [r3, #32]
 8008614:	f023 0210 	bic.w	r2, r3, #16
 8008618:	68fb      	ldr	r3, [r7, #12]
 800861a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800861c:	68fb      	ldr	r3, [r7, #12]
 800861e:	699b      	ldr	r3, [r3, #24]
 8008620:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008622:	68fb      	ldr	r3, [r7, #12]
 8008624:	6a1b      	ldr	r3, [r3, #32]
 8008626:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8008628:	697b      	ldr	r3, [r7, #20]
 800862a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800862e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	021b      	lsls	r3, r3, #8
 8008634:	697a      	ldr	r2, [r7, #20]
 8008636:	4313      	orrs	r3, r2
 8008638:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800863a:	697b      	ldr	r3, [r7, #20]
 800863c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008640:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8008642:	683b      	ldr	r3, [r7, #0]
 8008644:	031b      	lsls	r3, r3, #12
 8008646:	b29b      	uxth	r3, r3
 8008648:	697a      	ldr	r2, [r7, #20]
 800864a:	4313      	orrs	r3, r2
 800864c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800864e:	693b      	ldr	r3, [r7, #16]
 8008650:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008654:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8008656:	68bb      	ldr	r3, [r7, #8]
 8008658:	011b      	lsls	r3, r3, #4
 800865a:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800865e:	693a      	ldr	r2, [r7, #16]
 8008660:	4313      	orrs	r3, r2
 8008662:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008664:	68fb      	ldr	r3, [r7, #12]
 8008666:	697a      	ldr	r2, [r7, #20]
 8008668:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800866a:	68fb      	ldr	r3, [r7, #12]
 800866c:	693a      	ldr	r2, [r7, #16]
 800866e:	621a      	str	r2, [r3, #32]
}
 8008670:	bf00      	nop
 8008672:	371c      	adds	r7, #28
 8008674:	46bd      	mov	sp, r7
 8008676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800867a:	4770      	bx	lr

0800867c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800867c:	b480      	push	{r7}
 800867e:	b087      	sub	sp, #28
 8008680:	af00      	add	r7, sp, #0
 8008682:	60f8      	str	r0, [r7, #12]
 8008684:	60b9      	str	r1, [r7, #8]
 8008686:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008688:	68fb      	ldr	r3, [r7, #12]
 800868a:	6a1b      	ldr	r3, [r3, #32]
 800868c:	f023 0210 	bic.w	r2, r3, #16
 8008690:	68fb      	ldr	r3, [r7, #12]
 8008692:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008694:	68fb      	ldr	r3, [r7, #12]
 8008696:	699b      	ldr	r3, [r3, #24]
 8008698:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800869a:	68fb      	ldr	r3, [r7, #12]
 800869c:	6a1b      	ldr	r3, [r3, #32]
 800869e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80086a0:	697b      	ldr	r3, [r7, #20]
 80086a2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80086a6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	031b      	lsls	r3, r3, #12
 80086ac:	697a      	ldr	r2, [r7, #20]
 80086ae:	4313      	orrs	r3, r2
 80086b0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80086b2:	693b      	ldr	r3, [r7, #16]
 80086b4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80086b8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80086ba:	68bb      	ldr	r3, [r7, #8]
 80086bc:	011b      	lsls	r3, r3, #4
 80086be:	693a      	ldr	r2, [r7, #16]
 80086c0:	4313      	orrs	r3, r2
 80086c2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80086c4:	68fb      	ldr	r3, [r7, #12]
 80086c6:	697a      	ldr	r2, [r7, #20]
 80086c8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80086ca:	68fb      	ldr	r3, [r7, #12]
 80086cc:	693a      	ldr	r2, [r7, #16]
 80086ce:	621a      	str	r2, [r3, #32]
}
 80086d0:	bf00      	nop
 80086d2:	371c      	adds	r7, #28
 80086d4:	46bd      	mov	sp, r7
 80086d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086da:	4770      	bx	lr

080086dc <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80086dc:	b480      	push	{r7}
 80086de:	b087      	sub	sp, #28
 80086e0:	af00      	add	r7, sp, #0
 80086e2:	60f8      	str	r0, [r7, #12]
 80086e4:	60b9      	str	r1, [r7, #8]
 80086e6:	607a      	str	r2, [r7, #4]
 80086e8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80086ea:	68fb      	ldr	r3, [r7, #12]
 80086ec:	6a1b      	ldr	r3, [r3, #32]
 80086ee:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80086f2:	68fb      	ldr	r3, [r7, #12]
 80086f4:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80086f6:	68fb      	ldr	r3, [r7, #12]
 80086f8:	69db      	ldr	r3, [r3, #28]
 80086fa:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80086fc:	68fb      	ldr	r3, [r7, #12]
 80086fe:	6a1b      	ldr	r3, [r3, #32]
 8008700:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8008702:	697b      	ldr	r3, [r7, #20]
 8008704:	f023 0303 	bic.w	r3, r3, #3
 8008708:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 800870a:	697a      	ldr	r2, [r7, #20]
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	4313      	orrs	r3, r2
 8008710:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8008712:	697b      	ldr	r3, [r7, #20]
 8008714:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008718:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800871a:	683b      	ldr	r3, [r7, #0]
 800871c:	011b      	lsls	r3, r3, #4
 800871e:	b2db      	uxtb	r3, r3
 8008720:	697a      	ldr	r2, [r7, #20]
 8008722:	4313      	orrs	r3, r2
 8008724:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8008726:	693b      	ldr	r3, [r7, #16]
 8008728:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 800872c:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800872e:	68bb      	ldr	r3, [r7, #8]
 8008730:	021b      	lsls	r3, r3, #8
 8008732:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8008736:	693a      	ldr	r2, [r7, #16]
 8008738:	4313      	orrs	r3, r2
 800873a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800873c:	68fb      	ldr	r3, [r7, #12]
 800873e:	697a      	ldr	r2, [r7, #20]
 8008740:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8008742:	68fb      	ldr	r3, [r7, #12]
 8008744:	693a      	ldr	r2, [r7, #16]
 8008746:	621a      	str	r2, [r3, #32]
}
 8008748:	bf00      	nop
 800874a:	371c      	adds	r7, #28
 800874c:	46bd      	mov	sp, r7
 800874e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008752:	4770      	bx	lr

08008754 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8008754:	b480      	push	{r7}
 8008756:	b087      	sub	sp, #28
 8008758:	af00      	add	r7, sp, #0
 800875a:	60f8      	str	r0, [r7, #12]
 800875c:	60b9      	str	r1, [r7, #8]
 800875e:	607a      	str	r2, [r7, #4]
 8008760:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008762:	68fb      	ldr	r3, [r7, #12]
 8008764:	6a1b      	ldr	r3, [r3, #32]
 8008766:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800876a:	68fb      	ldr	r3, [r7, #12]
 800876c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800876e:	68fb      	ldr	r3, [r7, #12]
 8008770:	69db      	ldr	r3, [r3, #28]
 8008772:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008774:	68fb      	ldr	r3, [r7, #12]
 8008776:	6a1b      	ldr	r3, [r3, #32]
 8008778:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800877a:	697b      	ldr	r3, [r7, #20]
 800877c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008780:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	021b      	lsls	r3, r3, #8
 8008786:	697a      	ldr	r2, [r7, #20]
 8008788:	4313      	orrs	r3, r2
 800878a:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800878c:	697b      	ldr	r3, [r7, #20]
 800878e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008792:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8008794:	683b      	ldr	r3, [r7, #0]
 8008796:	031b      	lsls	r3, r3, #12
 8008798:	b29b      	uxth	r3, r3
 800879a:	697a      	ldr	r2, [r7, #20]
 800879c:	4313      	orrs	r3, r2
 800879e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80087a0:	693b      	ldr	r3, [r7, #16]
 80087a2:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 80087a6:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80087a8:	68bb      	ldr	r3, [r7, #8]
 80087aa:	031b      	lsls	r3, r3, #12
 80087ac:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 80087b0:	693a      	ldr	r2, [r7, #16]
 80087b2:	4313      	orrs	r3, r2
 80087b4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80087b6:	68fb      	ldr	r3, [r7, #12]
 80087b8:	697a      	ldr	r2, [r7, #20]
 80087ba:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80087bc:	68fb      	ldr	r3, [r7, #12]
 80087be:	693a      	ldr	r2, [r7, #16]
 80087c0:	621a      	str	r2, [r3, #32]
}
 80087c2:	bf00      	nop
 80087c4:	371c      	adds	r7, #28
 80087c6:	46bd      	mov	sp, r7
 80087c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087cc:	4770      	bx	lr

080087ce <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80087ce:	b480      	push	{r7}
 80087d0:	b085      	sub	sp, #20
 80087d2:	af00      	add	r7, sp, #0
 80087d4:	6078      	str	r0, [r7, #4]
 80087d6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	689b      	ldr	r3, [r3, #8]
 80087dc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80087de:	68fb      	ldr	r3, [r7, #12]
 80087e0:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80087e4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80087e8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80087ea:	683a      	ldr	r2, [r7, #0]
 80087ec:	68fb      	ldr	r3, [r7, #12]
 80087ee:	4313      	orrs	r3, r2
 80087f0:	f043 0307 	orr.w	r3, r3, #7
 80087f4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	68fa      	ldr	r2, [r7, #12]
 80087fa:	609a      	str	r2, [r3, #8]
}
 80087fc:	bf00      	nop
 80087fe:	3714      	adds	r7, #20
 8008800:	46bd      	mov	sp, r7
 8008802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008806:	4770      	bx	lr

08008808 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008808:	b480      	push	{r7}
 800880a:	b087      	sub	sp, #28
 800880c:	af00      	add	r7, sp, #0
 800880e:	60f8      	str	r0, [r7, #12]
 8008810:	60b9      	str	r1, [r7, #8]
 8008812:	607a      	str	r2, [r7, #4]
 8008814:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008816:	68fb      	ldr	r3, [r7, #12]
 8008818:	689b      	ldr	r3, [r3, #8]
 800881a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800881c:	697b      	ldr	r3, [r7, #20]
 800881e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008822:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008824:	683b      	ldr	r3, [r7, #0]
 8008826:	021a      	lsls	r2, r3, #8
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	431a      	orrs	r2, r3
 800882c:	68bb      	ldr	r3, [r7, #8]
 800882e:	4313      	orrs	r3, r2
 8008830:	697a      	ldr	r2, [r7, #20]
 8008832:	4313      	orrs	r3, r2
 8008834:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008836:	68fb      	ldr	r3, [r7, #12]
 8008838:	697a      	ldr	r2, [r7, #20]
 800883a:	609a      	str	r2, [r3, #8]
}
 800883c:	bf00      	nop
 800883e:	371c      	adds	r7, #28
 8008840:	46bd      	mov	sp, r7
 8008842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008846:	4770      	bx	lr

08008848 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008848:	b480      	push	{r7}
 800884a:	b087      	sub	sp, #28
 800884c:	af00      	add	r7, sp, #0
 800884e:	60f8      	str	r0, [r7, #12]
 8008850:	60b9      	str	r1, [r7, #8]
 8008852:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008854:	68bb      	ldr	r3, [r7, #8]
 8008856:	f003 031f 	and.w	r3, r3, #31
 800885a:	2201      	movs	r2, #1
 800885c:	fa02 f303 	lsl.w	r3, r2, r3
 8008860:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008862:	68fb      	ldr	r3, [r7, #12]
 8008864:	6a1a      	ldr	r2, [r3, #32]
 8008866:	697b      	ldr	r3, [r7, #20]
 8008868:	43db      	mvns	r3, r3
 800886a:	401a      	ands	r2, r3
 800886c:	68fb      	ldr	r3, [r7, #12]
 800886e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008870:	68fb      	ldr	r3, [r7, #12]
 8008872:	6a1a      	ldr	r2, [r3, #32]
 8008874:	68bb      	ldr	r3, [r7, #8]
 8008876:	f003 031f 	and.w	r3, r3, #31
 800887a:	6879      	ldr	r1, [r7, #4]
 800887c:	fa01 f303 	lsl.w	r3, r1, r3
 8008880:	431a      	orrs	r2, r3
 8008882:	68fb      	ldr	r3, [r7, #12]
 8008884:	621a      	str	r2, [r3, #32]
}
 8008886:	bf00      	nop
 8008888:	371c      	adds	r7, #28
 800888a:	46bd      	mov	sp, r7
 800888c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008890:	4770      	bx	lr
	...

08008894 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008894:	b480      	push	{r7}
 8008896:	b085      	sub	sp, #20
 8008898:	af00      	add	r7, sp, #0
 800889a:	6078      	str	r0, [r7, #4]
 800889c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80088a4:	2b01      	cmp	r3, #1
 80088a6:	d101      	bne.n	80088ac <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80088a8:	2302      	movs	r3, #2
 80088aa:	e068      	b.n	800897e <HAL_TIMEx_MasterConfigSynchronization+0xea>
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	2201      	movs	r2, #1
 80088b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	2202      	movs	r2, #2
 80088b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	685b      	ldr	r3, [r3, #4]
 80088c2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	689b      	ldr	r3, [r3, #8]
 80088ca:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	681b      	ldr	r3, [r3, #0]
 80088d0:	4a2e      	ldr	r2, [pc, #184]	; (800898c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80088d2:	4293      	cmp	r3, r2
 80088d4:	d004      	beq.n	80088e0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	681b      	ldr	r3, [r3, #0]
 80088da:	4a2d      	ldr	r2, [pc, #180]	; (8008990 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80088dc:	4293      	cmp	r3, r2
 80088de:	d108      	bne.n	80088f2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80088e0:	68fb      	ldr	r3, [r7, #12]
 80088e2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80088e6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80088e8:	683b      	ldr	r3, [r7, #0]
 80088ea:	685b      	ldr	r3, [r3, #4]
 80088ec:	68fa      	ldr	r2, [r7, #12]
 80088ee:	4313      	orrs	r3, r2
 80088f0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80088f2:	68fb      	ldr	r3, [r7, #12]
 80088f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80088f8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80088fa:	683b      	ldr	r3, [r7, #0]
 80088fc:	681b      	ldr	r3, [r3, #0]
 80088fe:	68fa      	ldr	r2, [r7, #12]
 8008900:	4313      	orrs	r3, r2
 8008902:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	68fa      	ldr	r2, [r7, #12]
 800890a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	681b      	ldr	r3, [r3, #0]
 8008910:	4a1e      	ldr	r2, [pc, #120]	; (800898c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8008912:	4293      	cmp	r3, r2
 8008914:	d01d      	beq.n	8008952 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	681b      	ldr	r3, [r3, #0]
 800891a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800891e:	d018      	beq.n	8008952 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	681b      	ldr	r3, [r3, #0]
 8008924:	4a1b      	ldr	r2, [pc, #108]	; (8008994 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8008926:	4293      	cmp	r3, r2
 8008928:	d013      	beq.n	8008952 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	681b      	ldr	r3, [r3, #0]
 800892e:	4a1a      	ldr	r2, [pc, #104]	; (8008998 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8008930:	4293      	cmp	r3, r2
 8008932:	d00e      	beq.n	8008952 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	681b      	ldr	r3, [r3, #0]
 8008938:	4a18      	ldr	r2, [pc, #96]	; (800899c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800893a:	4293      	cmp	r3, r2
 800893c:	d009      	beq.n	8008952 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	681b      	ldr	r3, [r3, #0]
 8008942:	4a13      	ldr	r2, [pc, #76]	; (8008990 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8008944:	4293      	cmp	r3, r2
 8008946:	d004      	beq.n	8008952 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	4a14      	ldr	r2, [pc, #80]	; (80089a0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800894e:	4293      	cmp	r3, r2
 8008950:	d10c      	bne.n	800896c <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008952:	68bb      	ldr	r3, [r7, #8]
 8008954:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008958:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800895a:	683b      	ldr	r3, [r7, #0]
 800895c:	689b      	ldr	r3, [r3, #8]
 800895e:	68ba      	ldr	r2, [r7, #8]
 8008960:	4313      	orrs	r3, r2
 8008962:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	681b      	ldr	r3, [r3, #0]
 8008968:	68ba      	ldr	r2, [r7, #8]
 800896a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	2201      	movs	r2, #1
 8008970:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	2200      	movs	r2, #0
 8008978:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800897c:	2300      	movs	r3, #0
}
 800897e:	4618      	mov	r0, r3
 8008980:	3714      	adds	r7, #20
 8008982:	46bd      	mov	sp, r7
 8008984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008988:	4770      	bx	lr
 800898a:	bf00      	nop
 800898c:	40012c00 	.word	0x40012c00
 8008990:	40013400 	.word	0x40013400
 8008994:	40000400 	.word	0x40000400
 8008998:	40000800 	.word	0x40000800
 800899c:	40000c00 	.word	0x40000c00
 80089a0:	40014000 	.word	0x40014000

080089a4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80089a4:	b480      	push	{r7}
 80089a6:	b085      	sub	sp, #20
 80089a8:	af00      	add	r7, sp, #0
 80089aa:	6078      	str	r0, [r7, #4]
 80089ac:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80089ae:	2300      	movs	r3, #0
 80089b0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80089b8:	2b01      	cmp	r3, #1
 80089ba:	d101      	bne.n	80089c0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80089bc:	2302      	movs	r3, #2
 80089be:	e087      	b.n	8008ad0 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	2201      	movs	r2, #1
 80089c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80089c8:	68fb      	ldr	r3, [r7, #12]
 80089ca:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80089ce:	683b      	ldr	r3, [r7, #0]
 80089d0:	68db      	ldr	r3, [r3, #12]
 80089d2:	4313      	orrs	r3, r2
 80089d4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80089d6:	68fb      	ldr	r3, [r7, #12]
 80089d8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80089dc:	683b      	ldr	r3, [r7, #0]
 80089de:	689b      	ldr	r3, [r3, #8]
 80089e0:	4313      	orrs	r3, r2
 80089e2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80089e4:	68fb      	ldr	r3, [r7, #12]
 80089e6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80089ea:	683b      	ldr	r3, [r7, #0]
 80089ec:	685b      	ldr	r3, [r3, #4]
 80089ee:	4313      	orrs	r3, r2
 80089f0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80089f2:	68fb      	ldr	r3, [r7, #12]
 80089f4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80089f8:	683b      	ldr	r3, [r7, #0]
 80089fa:	681b      	ldr	r3, [r3, #0]
 80089fc:	4313      	orrs	r3, r2
 80089fe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8008a00:	68fb      	ldr	r3, [r7, #12]
 8008a02:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008a06:	683b      	ldr	r3, [r7, #0]
 8008a08:	691b      	ldr	r3, [r3, #16]
 8008a0a:	4313      	orrs	r3, r2
 8008a0c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8008a0e:	68fb      	ldr	r3, [r7, #12]
 8008a10:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8008a14:	683b      	ldr	r3, [r7, #0]
 8008a16:	695b      	ldr	r3, [r3, #20]
 8008a18:	4313      	orrs	r3, r2
 8008a1a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8008a1c:	68fb      	ldr	r3, [r7, #12]
 8008a1e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8008a22:	683b      	ldr	r3, [r7, #0]
 8008a24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a26:	4313      	orrs	r3, r2
 8008a28:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8008a2a:	68fb      	ldr	r3, [r7, #12]
 8008a2c:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8008a30:	683b      	ldr	r3, [r7, #0]
 8008a32:	699b      	ldr	r3, [r3, #24]
 8008a34:	041b      	lsls	r3, r3, #16
 8008a36:	4313      	orrs	r3, r2
 8008a38:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	4a27      	ldr	r2, [pc, #156]	; (8008adc <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8008a40:	4293      	cmp	r3, r2
 8008a42:	d004      	beq.n	8008a4e <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	681b      	ldr	r3, [r3, #0]
 8008a48:	4a25      	ldr	r2, [pc, #148]	; (8008ae0 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8008a4a:	4293      	cmp	r3, r2
 8008a4c:	d106      	bne.n	8008a5c <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8008a4e:	68fb      	ldr	r3, [r7, #12]
 8008a50:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8008a54:	683b      	ldr	r3, [r7, #0]
 8008a56:	69db      	ldr	r3, [r3, #28]
 8008a58:	4313      	orrs	r3, r2
 8008a5a:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	4a1e      	ldr	r2, [pc, #120]	; (8008adc <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8008a62:	4293      	cmp	r3, r2
 8008a64:	d004      	beq.n	8008a70 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	681b      	ldr	r3, [r3, #0]
 8008a6a:	4a1d      	ldr	r2, [pc, #116]	; (8008ae0 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8008a6c:	4293      	cmp	r3, r2
 8008a6e:	d126      	bne.n	8008abe <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8008a70:	68fb      	ldr	r3, [r7, #12]
 8008a72:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8008a76:	683b      	ldr	r3, [r7, #0]
 8008a78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a7a:	051b      	lsls	r3, r3, #20
 8008a7c:	4313      	orrs	r3, r2
 8008a7e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8008a80:	68fb      	ldr	r3, [r7, #12]
 8008a82:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8008a86:	683b      	ldr	r3, [r7, #0]
 8008a88:	6a1b      	ldr	r3, [r3, #32]
 8008a8a:	4313      	orrs	r3, r2
 8008a8c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8008a8e:	68fb      	ldr	r3, [r7, #12]
 8008a90:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8008a94:	683b      	ldr	r3, [r7, #0]
 8008a96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a98:	4313      	orrs	r3, r2
 8008a9a:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	681b      	ldr	r3, [r3, #0]
 8008aa0:	4a0e      	ldr	r2, [pc, #56]	; (8008adc <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8008aa2:	4293      	cmp	r3, r2
 8008aa4:	d004      	beq.n	8008ab0 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	681b      	ldr	r3, [r3, #0]
 8008aaa:	4a0d      	ldr	r2, [pc, #52]	; (8008ae0 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8008aac:	4293      	cmp	r3, r2
 8008aae:	d106      	bne.n	8008abe <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8008ab0:	68fb      	ldr	r3, [r7, #12]
 8008ab2:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8008ab6:	683b      	ldr	r3, [r7, #0]
 8008ab8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008aba:	4313      	orrs	r3, r2
 8008abc:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	68fa      	ldr	r2, [r7, #12]
 8008ac4:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	2200      	movs	r2, #0
 8008aca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008ace:	2300      	movs	r3, #0
}
 8008ad0:	4618      	mov	r0, r3
 8008ad2:	3714      	adds	r7, #20
 8008ad4:	46bd      	mov	sp, r7
 8008ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ada:	4770      	bx	lr
 8008adc:	40012c00 	.word	0x40012c00
 8008ae0:	40013400 	.word	0x40013400

08008ae4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008ae4:	b480      	push	{r7}
 8008ae6:	b083      	sub	sp, #12
 8008ae8:	af00      	add	r7, sp, #0
 8008aea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008aec:	bf00      	nop
 8008aee:	370c      	adds	r7, #12
 8008af0:	46bd      	mov	sp, r7
 8008af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008af6:	4770      	bx	lr

08008af8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008af8:	b480      	push	{r7}
 8008afa:	b083      	sub	sp, #12
 8008afc:	af00      	add	r7, sp, #0
 8008afe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008b00:	bf00      	nop
 8008b02:	370c      	adds	r7, #12
 8008b04:	46bd      	mov	sp, r7
 8008b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b0a:	4770      	bx	lr

08008b0c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8008b0c:	b480      	push	{r7}
 8008b0e:	b083      	sub	sp, #12
 8008b10:	af00      	add	r7, sp, #0
 8008b12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8008b14:	bf00      	nop
 8008b16:	370c      	adds	r7, #12
 8008b18:	46bd      	mov	sp, r7
 8008b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b1e:	4770      	bx	lr

08008b20 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008b20:	b580      	push	{r7, lr}
 8008b22:	b082      	sub	sp, #8
 8008b24:	af00      	add	r7, sp, #0
 8008b26:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	2b00      	cmp	r3, #0
 8008b2c:	d101      	bne.n	8008b32 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008b2e:	2301      	movs	r3, #1
 8008b30:	e042      	b.n	8008bb8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008b38:	2b00      	cmp	r3, #0
 8008b3a:	d106      	bne.n	8008b4a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	2200      	movs	r2, #0
 8008b40:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008b44:	6878      	ldr	r0, [r7, #4]
 8008b46:	f7f8 ff23 	bl	8001990 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	2224      	movs	r2, #36	; 0x24
 8008b4e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	681b      	ldr	r3, [r3, #0]
 8008b56:	681a      	ldr	r2, [r3, #0]
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	f022 0201 	bic.w	r2, r2, #1
 8008b60:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008b62:	6878      	ldr	r0, [r7, #4]
 8008b64:	f000 fbbc 	bl	80092e0 <UART_SetConfig>
 8008b68:	4603      	mov	r3, r0
 8008b6a:	2b01      	cmp	r3, #1
 8008b6c:	d101      	bne.n	8008b72 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8008b6e:	2301      	movs	r3, #1
 8008b70:	e022      	b.n	8008bb8 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b76:	2b00      	cmp	r3, #0
 8008b78:	d002      	beq.n	8008b80 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8008b7a:	6878      	ldr	r0, [r7, #4]
 8008b7c:	f000 feb0 	bl	80098e0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	681b      	ldr	r3, [r3, #0]
 8008b84:	685a      	ldr	r2, [r3, #4]
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	681b      	ldr	r3, [r3, #0]
 8008b8a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008b8e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	681b      	ldr	r3, [r3, #0]
 8008b94:	689a      	ldr	r2, [r3, #8]
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	681b      	ldr	r3, [r3, #0]
 8008b9a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008b9e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	681b      	ldr	r3, [r3, #0]
 8008ba4:	681a      	ldr	r2, [r3, #0]
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	681b      	ldr	r3, [r3, #0]
 8008baa:	f042 0201 	orr.w	r2, r2, #1
 8008bae:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008bb0:	6878      	ldr	r0, [r7, #4]
 8008bb2:	f000 ff37 	bl	8009a24 <UART_CheckIdleState>
 8008bb6:	4603      	mov	r3, r0
}
 8008bb8:	4618      	mov	r0, r3
 8008bba:	3708      	adds	r7, #8
 8008bbc:	46bd      	mov	sp, r7
 8008bbe:	bd80      	pop	{r7, pc}

08008bc0 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008bc0:	b580      	push	{r7, lr}
 8008bc2:	b08a      	sub	sp, #40	; 0x28
 8008bc4:	af00      	add	r7, sp, #0
 8008bc6:	60f8      	str	r0, [r7, #12]
 8008bc8:	60b9      	str	r1, [r7, #8]
 8008bca:	4613      	mov	r3, r2
 8008bcc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008bce:	68fb      	ldr	r3, [r7, #12]
 8008bd0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008bd4:	2b20      	cmp	r3, #32
 8008bd6:	d137      	bne.n	8008c48 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8008bd8:	68bb      	ldr	r3, [r7, #8]
 8008bda:	2b00      	cmp	r3, #0
 8008bdc:	d002      	beq.n	8008be4 <HAL_UART_Receive_IT+0x24>
 8008bde:	88fb      	ldrh	r3, [r7, #6]
 8008be0:	2b00      	cmp	r3, #0
 8008be2:	d101      	bne.n	8008be8 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8008be4:	2301      	movs	r3, #1
 8008be6:	e030      	b.n	8008c4a <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008be8:	68fb      	ldr	r3, [r7, #12]
 8008bea:	2200      	movs	r2, #0
 8008bec:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008bee:	68fb      	ldr	r3, [r7, #12]
 8008bf0:	681b      	ldr	r3, [r3, #0]
 8008bf2:	4a18      	ldr	r2, [pc, #96]	; (8008c54 <HAL_UART_Receive_IT+0x94>)
 8008bf4:	4293      	cmp	r3, r2
 8008bf6:	d01f      	beq.n	8008c38 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008bf8:	68fb      	ldr	r3, [r7, #12]
 8008bfa:	681b      	ldr	r3, [r3, #0]
 8008bfc:	685b      	ldr	r3, [r3, #4]
 8008bfe:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008c02:	2b00      	cmp	r3, #0
 8008c04:	d018      	beq.n	8008c38 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008c06:	68fb      	ldr	r3, [r7, #12]
 8008c08:	681b      	ldr	r3, [r3, #0]
 8008c0a:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c0c:	697b      	ldr	r3, [r7, #20]
 8008c0e:	e853 3f00 	ldrex	r3, [r3]
 8008c12:	613b      	str	r3, [r7, #16]
   return(result);
 8008c14:	693b      	ldr	r3, [r7, #16]
 8008c16:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8008c1a:	627b      	str	r3, [r7, #36]	; 0x24
 8008c1c:	68fb      	ldr	r3, [r7, #12]
 8008c1e:	681b      	ldr	r3, [r3, #0]
 8008c20:	461a      	mov	r2, r3
 8008c22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c24:	623b      	str	r3, [r7, #32]
 8008c26:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c28:	69f9      	ldr	r1, [r7, #28]
 8008c2a:	6a3a      	ldr	r2, [r7, #32]
 8008c2c:	e841 2300 	strex	r3, r2, [r1]
 8008c30:	61bb      	str	r3, [r7, #24]
   return(result);
 8008c32:	69bb      	ldr	r3, [r7, #24]
 8008c34:	2b00      	cmp	r3, #0
 8008c36:	d1e6      	bne.n	8008c06 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8008c38:	88fb      	ldrh	r3, [r7, #6]
 8008c3a:	461a      	mov	r2, r3
 8008c3c:	68b9      	ldr	r1, [r7, #8]
 8008c3e:	68f8      	ldr	r0, [r7, #12]
 8008c40:	f001 f802 	bl	8009c48 <UART_Start_Receive_IT>
 8008c44:	4603      	mov	r3, r0
 8008c46:	e000      	b.n	8008c4a <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8008c48:	2302      	movs	r3, #2
  }
}
 8008c4a:	4618      	mov	r0, r3
 8008c4c:	3728      	adds	r7, #40	; 0x28
 8008c4e:	46bd      	mov	sp, r7
 8008c50:	bd80      	pop	{r7, pc}
 8008c52:	bf00      	nop
 8008c54:	40008000 	.word	0x40008000

08008c58 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008c58:	b580      	push	{r7, lr}
 8008c5a:	b0ba      	sub	sp, #232	; 0xe8
 8008c5c:	af00      	add	r7, sp, #0
 8008c5e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	681b      	ldr	r3, [r3, #0]
 8008c64:	69db      	ldr	r3, [r3, #28]
 8008c66:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	681b      	ldr	r3, [r3, #0]
 8008c6e:	681b      	ldr	r3, [r3, #0]
 8008c70:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	681b      	ldr	r3, [r3, #0]
 8008c78:	689b      	ldr	r3, [r3, #8]
 8008c7a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8008c7e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8008c82:	f640 030f 	movw	r3, #2063	; 0x80f
 8008c86:	4013      	ands	r3, r2
 8008c88:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8008c8c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008c90:	2b00      	cmp	r3, #0
 8008c92:	d11b      	bne.n	8008ccc <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8008c94:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008c98:	f003 0320 	and.w	r3, r3, #32
 8008c9c:	2b00      	cmp	r3, #0
 8008c9e:	d015      	beq.n	8008ccc <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8008ca0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008ca4:	f003 0320 	and.w	r3, r3, #32
 8008ca8:	2b00      	cmp	r3, #0
 8008caa:	d105      	bne.n	8008cb8 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8008cac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008cb0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008cb4:	2b00      	cmp	r3, #0
 8008cb6:	d009      	beq.n	8008ccc <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008cbc:	2b00      	cmp	r3, #0
 8008cbe:	f000 82e3 	beq.w	8009288 <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008cc6:	6878      	ldr	r0, [r7, #4]
 8008cc8:	4798      	blx	r3
      }
      return;
 8008cca:	e2dd      	b.n	8009288 <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8008ccc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008cd0:	2b00      	cmp	r3, #0
 8008cd2:	f000 8123 	beq.w	8008f1c <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8008cd6:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8008cda:	4b8d      	ldr	r3, [pc, #564]	; (8008f10 <HAL_UART_IRQHandler+0x2b8>)
 8008cdc:	4013      	ands	r3, r2
 8008cde:	2b00      	cmp	r3, #0
 8008ce0:	d106      	bne.n	8008cf0 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8008ce2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8008ce6:	4b8b      	ldr	r3, [pc, #556]	; (8008f14 <HAL_UART_IRQHandler+0x2bc>)
 8008ce8:	4013      	ands	r3, r2
 8008cea:	2b00      	cmp	r3, #0
 8008cec:	f000 8116 	beq.w	8008f1c <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008cf0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008cf4:	f003 0301 	and.w	r3, r3, #1
 8008cf8:	2b00      	cmp	r3, #0
 8008cfa:	d011      	beq.n	8008d20 <HAL_UART_IRQHandler+0xc8>
 8008cfc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008d00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008d04:	2b00      	cmp	r3, #0
 8008d06:	d00b      	beq.n	8008d20 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	681b      	ldr	r3, [r3, #0]
 8008d0c:	2201      	movs	r2, #1
 8008d0e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008d16:	f043 0201 	orr.w	r2, r3, #1
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008d20:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008d24:	f003 0302 	and.w	r3, r3, #2
 8008d28:	2b00      	cmp	r3, #0
 8008d2a:	d011      	beq.n	8008d50 <HAL_UART_IRQHandler+0xf8>
 8008d2c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008d30:	f003 0301 	and.w	r3, r3, #1
 8008d34:	2b00      	cmp	r3, #0
 8008d36:	d00b      	beq.n	8008d50 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	681b      	ldr	r3, [r3, #0]
 8008d3c:	2202      	movs	r2, #2
 8008d3e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008d46:	f043 0204 	orr.w	r2, r3, #4
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008d50:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008d54:	f003 0304 	and.w	r3, r3, #4
 8008d58:	2b00      	cmp	r3, #0
 8008d5a:	d011      	beq.n	8008d80 <HAL_UART_IRQHandler+0x128>
 8008d5c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008d60:	f003 0301 	and.w	r3, r3, #1
 8008d64:	2b00      	cmp	r3, #0
 8008d66:	d00b      	beq.n	8008d80 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	681b      	ldr	r3, [r3, #0]
 8008d6c:	2204      	movs	r2, #4
 8008d6e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008d76:	f043 0202 	orr.w	r2, r3, #2
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8008d80:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008d84:	f003 0308 	and.w	r3, r3, #8
 8008d88:	2b00      	cmp	r3, #0
 8008d8a:	d017      	beq.n	8008dbc <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8008d8c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008d90:	f003 0320 	and.w	r3, r3, #32
 8008d94:	2b00      	cmp	r3, #0
 8008d96:	d105      	bne.n	8008da4 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8008d98:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8008d9c:	4b5c      	ldr	r3, [pc, #368]	; (8008f10 <HAL_UART_IRQHandler+0x2b8>)
 8008d9e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8008da0:	2b00      	cmp	r3, #0
 8008da2:	d00b      	beq.n	8008dbc <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	681b      	ldr	r3, [r3, #0]
 8008da8:	2208      	movs	r2, #8
 8008daa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008db2:	f043 0208 	orr.w	r2, r3, #8
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8008dbc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008dc0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008dc4:	2b00      	cmp	r3, #0
 8008dc6:	d012      	beq.n	8008dee <HAL_UART_IRQHandler+0x196>
 8008dc8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008dcc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8008dd0:	2b00      	cmp	r3, #0
 8008dd2:	d00c      	beq.n	8008dee <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	681b      	ldr	r3, [r3, #0]
 8008dd8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008ddc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008de4:	f043 0220 	orr.w	r2, r3, #32
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008df4:	2b00      	cmp	r3, #0
 8008df6:	f000 8249 	beq.w	800928c <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8008dfa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008dfe:	f003 0320 	and.w	r3, r3, #32
 8008e02:	2b00      	cmp	r3, #0
 8008e04:	d013      	beq.n	8008e2e <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8008e06:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008e0a:	f003 0320 	and.w	r3, r3, #32
 8008e0e:	2b00      	cmp	r3, #0
 8008e10:	d105      	bne.n	8008e1e <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8008e12:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008e16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008e1a:	2b00      	cmp	r3, #0
 8008e1c:	d007      	beq.n	8008e2e <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008e22:	2b00      	cmp	r3, #0
 8008e24:	d003      	beq.n	8008e2e <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008e2a:	6878      	ldr	r0, [r7, #4]
 8008e2c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008e34:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	689b      	ldr	r3, [r3, #8]
 8008e3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008e42:	2b40      	cmp	r3, #64	; 0x40
 8008e44:	d005      	beq.n	8008e52 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8008e46:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008e4a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008e4e:	2b00      	cmp	r3, #0
 8008e50:	d054      	beq.n	8008efc <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008e52:	6878      	ldr	r0, [r7, #4]
 8008e54:	f001 f81a 	bl	8009e8c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	681b      	ldr	r3, [r3, #0]
 8008e5c:	689b      	ldr	r3, [r3, #8]
 8008e5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008e62:	2b40      	cmp	r3, #64	; 0x40
 8008e64:	d146      	bne.n	8008ef4 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	681b      	ldr	r3, [r3, #0]
 8008e6a:	3308      	adds	r3, #8
 8008e6c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e70:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008e74:	e853 3f00 	ldrex	r3, [r3]
 8008e78:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8008e7c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008e80:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008e84:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	681b      	ldr	r3, [r3, #0]
 8008e8c:	3308      	adds	r3, #8
 8008e8e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8008e92:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8008e96:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e9a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8008e9e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8008ea2:	e841 2300 	strex	r3, r2, [r1]
 8008ea6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8008eaa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008eae:	2b00      	cmp	r3, #0
 8008eb0:	d1d9      	bne.n	8008e66 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008eb8:	2b00      	cmp	r3, #0
 8008eba:	d017      	beq.n	8008eec <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008ec2:	4a15      	ldr	r2, [pc, #84]	; (8008f18 <HAL_UART_IRQHandler+0x2c0>)
 8008ec4:	641a      	str	r2, [r3, #64]	; 0x40

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008ecc:	4618      	mov	r0, r3
 8008ece:	f7fb facc 	bl	800446a <HAL_DMA_Abort_IT>
 8008ed2:	4603      	mov	r3, r0
 8008ed4:	2b00      	cmp	r3, #0
 8008ed6:	d019      	beq.n	8008f0c <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008ede:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ee0:	687a      	ldr	r2, [r7, #4]
 8008ee2:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 8008ee6:	4610      	mov	r0, r2
 8008ee8:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008eea:	e00f      	b.n	8008f0c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008eec:	6878      	ldr	r0, [r7, #4]
 8008eee:	f000 f9e1 	bl	80092b4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008ef2:	e00b      	b.n	8008f0c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008ef4:	6878      	ldr	r0, [r7, #4]
 8008ef6:	f000 f9dd 	bl	80092b4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008efa:	e007      	b.n	8008f0c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008efc:	6878      	ldr	r0, [r7, #4]
 8008efe:	f000 f9d9 	bl	80092b4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	2200      	movs	r2, #0
 8008f06:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 8008f0a:	e1bf      	b.n	800928c <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008f0c:	bf00      	nop
    return;
 8008f0e:	e1bd      	b.n	800928c <HAL_UART_IRQHandler+0x634>
 8008f10:	10000001 	.word	0x10000001
 8008f14:	04000120 	.word	0x04000120
 8008f18:	08009f59 	.word	0x08009f59

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008f20:	2b01      	cmp	r3, #1
 8008f22:	f040 8153 	bne.w	80091cc <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8008f26:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008f2a:	f003 0310 	and.w	r3, r3, #16
 8008f2e:	2b00      	cmp	r3, #0
 8008f30:	f000 814c 	beq.w	80091cc <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8008f34:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008f38:	f003 0310 	and.w	r3, r3, #16
 8008f3c:	2b00      	cmp	r3, #0
 8008f3e:	f000 8145 	beq.w	80091cc <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	681b      	ldr	r3, [r3, #0]
 8008f46:	2210      	movs	r2, #16
 8008f48:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	681b      	ldr	r3, [r3, #0]
 8008f4e:	689b      	ldr	r3, [r3, #8]
 8008f50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008f54:	2b40      	cmp	r3, #64	; 0x40
 8008f56:	f040 80bb 	bne.w	80090d0 <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008f60:	681b      	ldr	r3, [r3, #0]
 8008f62:	685b      	ldr	r3, [r3, #4]
 8008f64:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008f68:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8008f6c:	2b00      	cmp	r3, #0
 8008f6e:	f000 818f 	beq.w	8009290 <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008f78:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008f7c:	429a      	cmp	r2, r3
 8008f7e:	f080 8187 	bcs.w	8009290 <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008f88:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008f92:	681b      	ldr	r3, [r3, #0]
 8008f94:	681b      	ldr	r3, [r3, #0]
 8008f96:	f003 0320 	and.w	r3, r3, #32
 8008f9a:	2b00      	cmp	r3, #0
 8008f9c:	f040 8087 	bne.w	80090ae <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	681b      	ldr	r3, [r3, #0]
 8008fa4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008fa8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008fac:	e853 3f00 	ldrex	r3, [r3]
 8008fb0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8008fb4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008fb8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008fbc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	681b      	ldr	r3, [r3, #0]
 8008fc4:	461a      	mov	r2, r3
 8008fc6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008fca:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8008fce:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008fd2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8008fd6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8008fda:	e841 2300 	strex	r3, r2, [r1]
 8008fde:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8008fe2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008fe6:	2b00      	cmp	r3, #0
 8008fe8:	d1da      	bne.n	8008fa0 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	681b      	ldr	r3, [r3, #0]
 8008fee:	3308      	adds	r3, #8
 8008ff0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ff2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008ff4:	e853 3f00 	ldrex	r3, [r3]
 8008ff8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8008ffa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008ffc:	f023 0301 	bic.w	r3, r3, #1
 8009000:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	681b      	ldr	r3, [r3, #0]
 8009008:	3308      	adds	r3, #8
 800900a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800900e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8009012:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009014:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8009016:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800901a:	e841 2300 	strex	r3, r2, [r1]
 800901e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8009020:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009022:	2b00      	cmp	r3, #0
 8009024:	d1e1      	bne.n	8008fea <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	681b      	ldr	r3, [r3, #0]
 800902a:	3308      	adds	r3, #8
 800902c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800902e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009030:	e853 3f00 	ldrex	r3, [r3]
 8009034:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8009036:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009038:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800903c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	681b      	ldr	r3, [r3, #0]
 8009044:	3308      	adds	r3, #8
 8009046:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800904a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800904c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800904e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8009050:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8009052:	e841 2300 	strex	r3, r2, [r1]
 8009056:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8009058:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800905a:	2b00      	cmp	r3, #0
 800905c:	d1e3      	bne.n	8009026 <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	2220      	movs	r2, #32
 8009062:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	2200      	movs	r2, #0
 800906a:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	681b      	ldr	r3, [r3, #0]
 8009070:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009072:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009074:	e853 3f00 	ldrex	r3, [r3]
 8009078:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800907a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800907c:	f023 0310 	bic.w	r3, r3, #16
 8009080:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	681b      	ldr	r3, [r3, #0]
 8009088:	461a      	mov	r2, r3
 800908a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800908e:	65bb      	str	r3, [r7, #88]	; 0x58
 8009090:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009092:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8009094:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009096:	e841 2300 	strex	r3, r2, [r1]
 800909a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800909c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800909e:	2b00      	cmp	r3, #0
 80090a0:	d1e4      	bne.n	800906c <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80090a8:	4618      	mov	r0, r3
 80090aa:	f7fb f982 	bl	80043b2 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	2202      	movs	r2, #2
 80090b2:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80090c0:	b29b      	uxth	r3, r3
 80090c2:	1ad3      	subs	r3, r2, r3
 80090c4:	b29b      	uxth	r3, r3
 80090c6:	4619      	mov	r1, r3
 80090c8:	6878      	ldr	r0, [r7, #4]
 80090ca:	f000 f8fd 	bl	80092c8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80090ce:	e0df      	b.n	8009290 <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80090dc:	b29b      	uxth	r3, r3
 80090de:	1ad3      	subs	r3, r2, r3
 80090e0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80090ea:	b29b      	uxth	r3, r3
 80090ec:	2b00      	cmp	r3, #0
 80090ee:	f000 80d1 	beq.w	8009294 <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 80090f2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80090f6:	2b00      	cmp	r3, #0
 80090f8:	f000 80cc 	beq.w	8009294 <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	681b      	ldr	r3, [r3, #0]
 8009100:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009102:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009104:	e853 3f00 	ldrex	r3, [r3]
 8009108:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800910a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800910c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009110:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	681b      	ldr	r3, [r3, #0]
 8009118:	461a      	mov	r2, r3
 800911a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800911e:	647b      	str	r3, [r7, #68]	; 0x44
 8009120:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009122:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009124:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009126:	e841 2300 	strex	r3, r2, [r1]
 800912a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800912c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800912e:	2b00      	cmp	r3, #0
 8009130:	d1e4      	bne.n	80090fc <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	681b      	ldr	r3, [r3, #0]
 8009136:	3308      	adds	r3, #8
 8009138:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800913a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800913c:	e853 3f00 	ldrex	r3, [r3]
 8009140:	623b      	str	r3, [r7, #32]
   return(result);
 8009142:	6a3b      	ldr	r3, [r7, #32]
 8009144:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009148:	f023 0301 	bic.w	r3, r3, #1
 800914c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	681b      	ldr	r3, [r3, #0]
 8009154:	3308      	adds	r3, #8
 8009156:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800915a:	633a      	str	r2, [r7, #48]	; 0x30
 800915c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800915e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009160:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009162:	e841 2300 	strex	r3, r2, [r1]
 8009166:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009168:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800916a:	2b00      	cmp	r3, #0
 800916c:	d1e1      	bne.n	8009132 <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	2220      	movs	r2, #32
 8009172:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	2200      	movs	r2, #0
 800917a:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	2200      	movs	r2, #0
 8009180:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	681b      	ldr	r3, [r3, #0]
 8009186:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009188:	693b      	ldr	r3, [r7, #16]
 800918a:	e853 3f00 	ldrex	r3, [r3]
 800918e:	60fb      	str	r3, [r7, #12]
   return(result);
 8009190:	68fb      	ldr	r3, [r7, #12]
 8009192:	f023 0310 	bic.w	r3, r3, #16
 8009196:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	681b      	ldr	r3, [r3, #0]
 800919e:	461a      	mov	r2, r3
 80091a0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80091a4:	61fb      	str	r3, [r7, #28]
 80091a6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091a8:	69b9      	ldr	r1, [r7, #24]
 80091aa:	69fa      	ldr	r2, [r7, #28]
 80091ac:	e841 2300 	strex	r3, r2, [r1]
 80091b0:	617b      	str	r3, [r7, #20]
   return(result);
 80091b2:	697b      	ldr	r3, [r7, #20]
 80091b4:	2b00      	cmp	r3, #0
 80091b6:	d1e4      	bne.n	8009182 <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	2202      	movs	r2, #2
 80091bc:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80091be:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80091c2:	4619      	mov	r1, r3
 80091c4:	6878      	ldr	r0, [r7, #4]
 80091c6:	f000 f87f 	bl	80092c8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80091ca:	e063      	b.n	8009294 <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80091cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80091d0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80091d4:	2b00      	cmp	r3, #0
 80091d6:	d00e      	beq.n	80091f6 <HAL_UART_IRQHandler+0x59e>
 80091d8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80091dc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80091e0:	2b00      	cmp	r3, #0
 80091e2:	d008      	beq.n	80091f6 <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	681b      	ldr	r3, [r3, #0]
 80091e8:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80091ec:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80091ee:	6878      	ldr	r0, [r7, #4]
 80091f0:	f001 fc10 	bl	800aa14 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80091f4:	e051      	b.n	800929a <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80091f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80091fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80091fe:	2b00      	cmp	r3, #0
 8009200:	d014      	beq.n	800922c <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8009202:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009206:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800920a:	2b00      	cmp	r3, #0
 800920c:	d105      	bne.n	800921a <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800920e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009212:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009216:	2b00      	cmp	r3, #0
 8009218:	d008      	beq.n	800922c <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800921e:	2b00      	cmp	r3, #0
 8009220:	d03a      	beq.n	8009298 <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009226:	6878      	ldr	r0, [r7, #4]
 8009228:	4798      	blx	r3
    }
    return;
 800922a:	e035      	b.n	8009298 <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800922c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009230:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009234:	2b00      	cmp	r3, #0
 8009236:	d009      	beq.n	800924c <HAL_UART_IRQHandler+0x5f4>
 8009238:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800923c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009240:	2b00      	cmp	r3, #0
 8009242:	d003      	beq.n	800924c <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 8009244:	6878      	ldr	r0, [r7, #4]
 8009246:	f000 fe9d 	bl	8009f84 <UART_EndTransmit_IT>
    return;
 800924a:	e026      	b.n	800929a <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800924c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009250:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009254:	2b00      	cmp	r3, #0
 8009256:	d009      	beq.n	800926c <HAL_UART_IRQHandler+0x614>
 8009258:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800925c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8009260:	2b00      	cmp	r3, #0
 8009262:	d003      	beq.n	800926c <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8009264:	6878      	ldr	r0, [r7, #4]
 8009266:	f001 fbe9 	bl	800aa3c <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800926a:	e016      	b.n	800929a <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800926c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009270:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009274:	2b00      	cmp	r3, #0
 8009276:	d010      	beq.n	800929a <HAL_UART_IRQHandler+0x642>
 8009278:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800927c:	2b00      	cmp	r3, #0
 800927e:	da0c      	bge.n	800929a <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8009280:	6878      	ldr	r0, [r7, #4]
 8009282:	f001 fbd1 	bl	800aa28 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009286:	e008      	b.n	800929a <HAL_UART_IRQHandler+0x642>
      return;
 8009288:	bf00      	nop
 800928a:	e006      	b.n	800929a <HAL_UART_IRQHandler+0x642>
    return;
 800928c:	bf00      	nop
 800928e:	e004      	b.n	800929a <HAL_UART_IRQHandler+0x642>
      return;
 8009290:	bf00      	nop
 8009292:	e002      	b.n	800929a <HAL_UART_IRQHandler+0x642>
      return;
 8009294:	bf00      	nop
 8009296:	e000      	b.n	800929a <HAL_UART_IRQHandler+0x642>
    return;
 8009298:	bf00      	nop
  }
}
 800929a:	37e8      	adds	r7, #232	; 0xe8
 800929c:	46bd      	mov	sp, r7
 800929e:	bd80      	pop	{r7, pc}

080092a0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80092a0:	b480      	push	{r7}
 80092a2:	b083      	sub	sp, #12
 80092a4:	af00      	add	r7, sp, #0
 80092a6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80092a8:	bf00      	nop
 80092aa:	370c      	adds	r7, #12
 80092ac:	46bd      	mov	sp, r7
 80092ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092b2:	4770      	bx	lr

080092b4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80092b4:	b480      	push	{r7}
 80092b6:	b083      	sub	sp, #12
 80092b8:	af00      	add	r7, sp, #0
 80092ba:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80092bc:	bf00      	nop
 80092be:	370c      	adds	r7, #12
 80092c0:	46bd      	mov	sp, r7
 80092c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092c6:	4770      	bx	lr

080092c8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80092c8:	b480      	push	{r7}
 80092ca:	b083      	sub	sp, #12
 80092cc:	af00      	add	r7, sp, #0
 80092ce:	6078      	str	r0, [r7, #4]
 80092d0:	460b      	mov	r3, r1
 80092d2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80092d4:	bf00      	nop
 80092d6:	370c      	adds	r7, #12
 80092d8:	46bd      	mov	sp, r7
 80092da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092de:	4770      	bx	lr

080092e0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80092e0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80092e4:	b08c      	sub	sp, #48	; 0x30
 80092e6:	af00      	add	r7, sp, #0
 80092e8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80092ea:	2300      	movs	r3, #0
 80092ec:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80092f0:	697b      	ldr	r3, [r7, #20]
 80092f2:	689a      	ldr	r2, [r3, #8]
 80092f4:	697b      	ldr	r3, [r7, #20]
 80092f6:	691b      	ldr	r3, [r3, #16]
 80092f8:	431a      	orrs	r2, r3
 80092fa:	697b      	ldr	r3, [r7, #20]
 80092fc:	695b      	ldr	r3, [r3, #20]
 80092fe:	431a      	orrs	r2, r3
 8009300:	697b      	ldr	r3, [r7, #20]
 8009302:	69db      	ldr	r3, [r3, #28]
 8009304:	4313      	orrs	r3, r2
 8009306:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009308:	697b      	ldr	r3, [r7, #20]
 800930a:	681b      	ldr	r3, [r3, #0]
 800930c:	681a      	ldr	r2, [r3, #0]
 800930e:	4baa      	ldr	r3, [pc, #680]	; (80095b8 <UART_SetConfig+0x2d8>)
 8009310:	4013      	ands	r3, r2
 8009312:	697a      	ldr	r2, [r7, #20]
 8009314:	6812      	ldr	r2, [r2, #0]
 8009316:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009318:	430b      	orrs	r3, r1
 800931a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800931c:	697b      	ldr	r3, [r7, #20]
 800931e:	681b      	ldr	r3, [r3, #0]
 8009320:	685b      	ldr	r3, [r3, #4]
 8009322:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8009326:	697b      	ldr	r3, [r7, #20]
 8009328:	68da      	ldr	r2, [r3, #12]
 800932a:	697b      	ldr	r3, [r7, #20]
 800932c:	681b      	ldr	r3, [r3, #0]
 800932e:	430a      	orrs	r2, r1
 8009330:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009332:	697b      	ldr	r3, [r7, #20]
 8009334:	699b      	ldr	r3, [r3, #24]
 8009336:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8009338:	697b      	ldr	r3, [r7, #20]
 800933a:	681b      	ldr	r3, [r3, #0]
 800933c:	4a9f      	ldr	r2, [pc, #636]	; (80095bc <UART_SetConfig+0x2dc>)
 800933e:	4293      	cmp	r3, r2
 8009340:	d004      	beq.n	800934c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8009342:	697b      	ldr	r3, [r7, #20]
 8009344:	6a1b      	ldr	r3, [r3, #32]
 8009346:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009348:	4313      	orrs	r3, r2
 800934a:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800934c:	697b      	ldr	r3, [r7, #20]
 800934e:	681b      	ldr	r3, [r3, #0]
 8009350:	689b      	ldr	r3, [r3, #8]
 8009352:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8009356:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800935a:	697a      	ldr	r2, [r7, #20]
 800935c:	6812      	ldr	r2, [r2, #0]
 800935e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009360:	430b      	orrs	r3, r1
 8009362:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8009364:	697b      	ldr	r3, [r7, #20]
 8009366:	681b      	ldr	r3, [r3, #0]
 8009368:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800936a:	f023 010f 	bic.w	r1, r3, #15
 800936e:	697b      	ldr	r3, [r7, #20]
 8009370:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009372:	697b      	ldr	r3, [r7, #20]
 8009374:	681b      	ldr	r3, [r3, #0]
 8009376:	430a      	orrs	r2, r1
 8009378:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800937a:	697b      	ldr	r3, [r7, #20]
 800937c:	681b      	ldr	r3, [r3, #0]
 800937e:	4a90      	ldr	r2, [pc, #576]	; (80095c0 <UART_SetConfig+0x2e0>)
 8009380:	4293      	cmp	r3, r2
 8009382:	d125      	bne.n	80093d0 <UART_SetConfig+0xf0>
 8009384:	4b8f      	ldr	r3, [pc, #572]	; (80095c4 <UART_SetConfig+0x2e4>)
 8009386:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800938a:	f003 0303 	and.w	r3, r3, #3
 800938e:	2b03      	cmp	r3, #3
 8009390:	d81a      	bhi.n	80093c8 <UART_SetConfig+0xe8>
 8009392:	a201      	add	r2, pc, #4	; (adr r2, 8009398 <UART_SetConfig+0xb8>)
 8009394:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009398:	080093a9 	.word	0x080093a9
 800939c:	080093b9 	.word	0x080093b9
 80093a0:	080093b1 	.word	0x080093b1
 80093a4:	080093c1 	.word	0x080093c1
 80093a8:	2301      	movs	r3, #1
 80093aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80093ae:	e116      	b.n	80095de <UART_SetConfig+0x2fe>
 80093b0:	2302      	movs	r3, #2
 80093b2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80093b6:	e112      	b.n	80095de <UART_SetConfig+0x2fe>
 80093b8:	2304      	movs	r3, #4
 80093ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80093be:	e10e      	b.n	80095de <UART_SetConfig+0x2fe>
 80093c0:	2308      	movs	r3, #8
 80093c2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80093c6:	e10a      	b.n	80095de <UART_SetConfig+0x2fe>
 80093c8:	2310      	movs	r3, #16
 80093ca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80093ce:	e106      	b.n	80095de <UART_SetConfig+0x2fe>
 80093d0:	697b      	ldr	r3, [r7, #20]
 80093d2:	681b      	ldr	r3, [r3, #0]
 80093d4:	4a7c      	ldr	r2, [pc, #496]	; (80095c8 <UART_SetConfig+0x2e8>)
 80093d6:	4293      	cmp	r3, r2
 80093d8:	d138      	bne.n	800944c <UART_SetConfig+0x16c>
 80093da:	4b7a      	ldr	r3, [pc, #488]	; (80095c4 <UART_SetConfig+0x2e4>)
 80093dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80093e0:	f003 030c 	and.w	r3, r3, #12
 80093e4:	2b0c      	cmp	r3, #12
 80093e6:	d82d      	bhi.n	8009444 <UART_SetConfig+0x164>
 80093e8:	a201      	add	r2, pc, #4	; (adr r2, 80093f0 <UART_SetConfig+0x110>)
 80093ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80093ee:	bf00      	nop
 80093f0:	08009425 	.word	0x08009425
 80093f4:	08009445 	.word	0x08009445
 80093f8:	08009445 	.word	0x08009445
 80093fc:	08009445 	.word	0x08009445
 8009400:	08009435 	.word	0x08009435
 8009404:	08009445 	.word	0x08009445
 8009408:	08009445 	.word	0x08009445
 800940c:	08009445 	.word	0x08009445
 8009410:	0800942d 	.word	0x0800942d
 8009414:	08009445 	.word	0x08009445
 8009418:	08009445 	.word	0x08009445
 800941c:	08009445 	.word	0x08009445
 8009420:	0800943d 	.word	0x0800943d
 8009424:	2300      	movs	r3, #0
 8009426:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800942a:	e0d8      	b.n	80095de <UART_SetConfig+0x2fe>
 800942c:	2302      	movs	r3, #2
 800942e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009432:	e0d4      	b.n	80095de <UART_SetConfig+0x2fe>
 8009434:	2304      	movs	r3, #4
 8009436:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800943a:	e0d0      	b.n	80095de <UART_SetConfig+0x2fe>
 800943c:	2308      	movs	r3, #8
 800943e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009442:	e0cc      	b.n	80095de <UART_SetConfig+0x2fe>
 8009444:	2310      	movs	r3, #16
 8009446:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800944a:	e0c8      	b.n	80095de <UART_SetConfig+0x2fe>
 800944c:	697b      	ldr	r3, [r7, #20]
 800944e:	681b      	ldr	r3, [r3, #0]
 8009450:	4a5e      	ldr	r2, [pc, #376]	; (80095cc <UART_SetConfig+0x2ec>)
 8009452:	4293      	cmp	r3, r2
 8009454:	d125      	bne.n	80094a2 <UART_SetConfig+0x1c2>
 8009456:	4b5b      	ldr	r3, [pc, #364]	; (80095c4 <UART_SetConfig+0x2e4>)
 8009458:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800945c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8009460:	2b30      	cmp	r3, #48	; 0x30
 8009462:	d016      	beq.n	8009492 <UART_SetConfig+0x1b2>
 8009464:	2b30      	cmp	r3, #48	; 0x30
 8009466:	d818      	bhi.n	800949a <UART_SetConfig+0x1ba>
 8009468:	2b20      	cmp	r3, #32
 800946a:	d00a      	beq.n	8009482 <UART_SetConfig+0x1a2>
 800946c:	2b20      	cmp	r3, #32
 800946e:	d814      	bhi.n	800949a <UART_SetConfig+0x1ba>
 8009470:	2b00      	cmp	r3, #0
 8009472:	d002      	beq.n	800947a <UART_SetConfig+0x19a>
 8009474:	2b10      	cmp	r3, #16
 8009476:	d008      	beq.n	800948a <UART_SetConfig+0x1aa>
 8009478:	e00f      	b.n	800949a <UART_SetConfig+0x1ba>
 800947a:	2300      	movs	r3, #0
 800947c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009480:	e0ad      	b.n	80095de <UART_SetConfig+0x2fe>
 8009482:	2302      	movs	r3, #2
 8009484:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009488:	e0a9      	b.n	80095de <UART_SetConfig+0x2fe>
 800948a:	2304      	movs	r3, #4
 800948c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009490:	e0a5      	b.n	80095de <UART_SetConfig+0x2fe>
 8009492:	2308      	movs	r3, #8
 8009494:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009498:	e0a1      	b.n	80095de <UART_SetConfig+0x2fe>
 800949a:	2310      	movs	r3, #16
 800949c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80094a0:	e09d      	b.n	80095de <UART_SetConfig+0x2fe>
 80094a2:	697b      	ldr	r3, [r7, #20]
 80094a4:	681b      	ldr	r3, [r3, #0]
 80094a6:	4a4a      	ldr	r2, [pc, #296]	; (80095d0 <UART_SetConfig+0x2f0>)
 80094a8:	4293      	cmp	r3, r2
 80094aa:	d125      	bne.n	80094f8 <UART_SetConfig+0x218>
 80094ac:	4b45      	ldr	r3, [pc, #276]	; (80095c4 <UART_SetConfig+0x2e4>)
 80094ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80094b2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80094b6:	2bc0      	cmp	r3, #192	; 0xc0
 80094b8:	d016      	beq.n	80094e8 <UART_SetConfig+0x208>
 80094ba:	2bc0      	cmp	r3, #192	; 0xc0
 80094bc:	d818      	bhi.n	80094f0 <UART_SetConfig+0x210>
 80094be:	2b80      	cmp	r3, #128	; 0x80
 80094c0:	d00a      	beq.n	80094d8 <UART_SetConfig+0x1f8>
 80094c2:	2b80      	cmp	r3, #128	; 0x80
 80094c4:	d814      	bhi.n	80094f0 <UART_SetConfig+0x210>
 80094c6:	2b00      	cmp	r3, #0
 80094c8:	d002      	beq.n	80094d0 <UART_SetConfig+0x1f0>
 80094ca:	2b40      	cmp	r3, #64	; 0x40
 80094cc:	d008      	beq.n	80094e0 <UART_SetConfig+0x200>
 80094ce:	e00f      	b.n	80094f0 <UART_SetConfig+0x210>
 80094d0:	2300      	movs	r3, #0
 80094d2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80094d6:	e082      	b.n	80095de <UART_SetConfig+0x2fe>
 80094d8:	2302      	movs	r3, #2
 80094da:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80094de:	e07e      	b.n	80095de <UART_SetConfig+0x2fe>
 80094e0:	2304      	movs	r3, #4
 80094e2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80094e6:	e07a      	b.n	80095de <UART_SetConfig+0x2fe>
 80094e8:	2308      	movs	r3, #8
 80094ea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80094ee:	e076      	b.n	80095de <UART_SetConfig+0x2fe>
 80094f0:	2310      	movs	r3, #16
 80094f2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80094f6:	e072      	b.n	80095de <UART_SetConfig+0x2fe>
 80094f8:	697b      	ldr	r3, [r7, #20]
 80094fa:	681b      	ldr	r3, [r3, #0]
 80094fc:	4a35      	ldr	r2, [pc, #212]	; (80095d4 <UART_SetConfig+0x2f4>)
 80094fe:	4293      	cmp	r3, r2
 8009500:	d12a      	bne.n	8009558 <UART_SetConfig+0x278>
 8009502:	4b30      	ldr	r3, [pc, #192]	; (80095c4 <UART_SetConfig+0x2e4>)
 8009504:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009508:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800950c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009510:	d01a      	beq.n	8009548 <UART_SetConfig+0x268>
 8009512:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009516:	d81b      	bhi.n	8009550 <UART_SetConfig+0x270>
 8009518:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800951c:	d00c      	beq.n	8009538 <UART_SetConfig+0x258>
 800951e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009522:	d815      	bhi.n	8009550 <UART_SetConfig+0x270>
 8009524:	2b00      	cmp	r3, #0
 8009526:	d003      	beq.n	8009530 <UART_SetConfig+0x250>
 8009528:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800952c:	d008      	beq.n	8009540 <UART_SetConfig+0x260>
 800952e:	e00f      	b.n	8009550 <UART_SetConfig+0x270>
 8009530:	2300      	movs	r3, #0
 8009532:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009536:	e052      	b.n	80095de <UART_SetConfig+0x2fe>
 8009538:	2302      	movs	r3, #2
 800953a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800953e:	e04e      	b.n	80095de <UART_SetConfig+0x2fe>
 8009540:	2304      	movs	r3, #4
 8009542:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009546:	e04a      	b.n	80095de <UART_SetConfig+0x2fe>
 8009548:	2308      	movs	r3, #8
 800954a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800954e:	e046      	b.n	80095de <UART_SetConfig+0x2fe>
 8009550:	2310      	movs	r3, #16
 8009552:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009556:	e042      	b.n	80095de <UART_SetConfig+0x2fe>
 8009558:	697b      	ldr	r3, [r7, #20]
 800955a:	681b      	ldr	r3, [r3, #0]
 800955c:	4a17      	ldr	r2, [pc, #92]	; (80095bc <UART_SetConfig+0x2dc>)
 800955e:	4293      	cmp	r3, r2
 8009560:	d13a      	bne.n	80095d8 <UART_SetConfig+0x2f8>
 8009562:	4b18      	ldr	r3, [pc, #96]	; (80095c4 <UART_SetConfig+0x2e4>)
 8009564:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009568:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800956c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009570:	d01a      	beq.n	80095a8 <UART_SetConfig+0x2c8>
 8009572:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009576:	d81b      	bhi.n	80095b0 <UART_SetConfig+0x2d0>
 8009578:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800957c:	d00c      	beq.n	8009598 <UART_SetConfig+0x2b8>
 800957e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009582:	d815      	bhi.n	80095b0 <UART_SetConfig+0x2d0>
 8009584:	2b00      	cmp	r3, #0
 8009586:	d003      	beq.n	8009590 <UART_SetConfig+0x2b0>
 8009588:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800958c:	d008      	beq.n	80095a0 <UART_SetConfig+0x2c0>
 800958e:	e00f      	b.n	80095b0 <UART_SetConfig+0x2d0>
 8009590:	2300      	movs	r3, #0
 8009592:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009596:	e022      	b.n	80095de <UART_SetConfig+0x2fe>
 8009598:	2302      	movs	r3, #2
 800959a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800959e:	e01e      	b.n	80095de <UART_SetConfig+0x2fe>
 80095a0:	2304      	movs	r3, #4
 80095a2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80095a6:	e01a      	b.n	80095de <UART_SetConfig+0x2fe>
 80095a8:	2308      	movs	r3, #8
 80095aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80095ae:	e016      	b.n	80095de <UART_SetConfig+0x2fe>
 80095b0:	2310      	movs	r3, #16
 80095b2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80095b6:	e012      	b.n	80095de <UART_SetConfig+0x2fe>
 80095b8:	cfff69f3 	.word	0xcfff69f3
 80095bc:	40008000 	.word	0x40008000
 80095c0:	40013800 	.word	0x40013800
 80095c4:	40021000 	.word	0x40021000
 80095c8:	40004400 	.word	0x40004400
 80095cc:	40004800 	.word	0x40004800
 80095d0:	40004c00 	.word	0x40004c00
 80095d4:	40005000 	.word	0x40005000
 80095d8:	2310      	movs	r3, #16
 80095da:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80095de:	697b      	ldr	r3, [r7, #20]
 80095e0:	681b      	ldr	r3, [r3, #0]
 80095e2:	4ab0      	ldr	r2, [pc, #704]	; (80098a4 <UART_SetConfig+0x5c4>)
 80095e4:	4293      	cmp	r3, r2
 80095e6:	f040 809b 	bne.w	8009720 <UART_SetConfig+0x440>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80095ea:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80095ee:	2b08      	cmp	r3, #8
 80095f0:	d827      	bhi.n	8009642 <UART_SetConfig+0x362>
 80095f2:	a201      	add	r2, pc, #4	; (adr r2, 80095f8 <UART_SetConfig+0x318>)
 80095f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80095f8:	0800961d 	.word	0x0800961d
 80095fc:	08009625 	.word	0x08009625
 8009600:	0800962d 	.word	0x0800962d
 8009604:	08009643 	.word	0x08009643
 8009608:	08009633 	.word	0x08009633
 800960c:	08009643 	.word	0x08009643
 8009610:	08009643 	.word	0x08009643
 8009614:	08009643 	.word	0x08009643
 8009618:	0800963b 	.word	0x0800963b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800961c:	f7fc fcce 	bl	8005fbc <HAL_RCC_GetPCLK1Freq>
 8009620:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8009622:	e014      	b.n	800964e <UART_SetConfig+0x36e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009624:	f7fc fcde 	bl	8005fe4 <HAL_RCC_GetPCLK2Freq>
 8009628:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800962a:	e010      	b.n	800964e <UART_SetConfig+0x36e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800962c:	4b9e      	ldr	r3, [pc, #632]	; (80098a8 <UART_SetConfig+0x5c8>)
 800962e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8009630:	e00d      	b.n	800964e <UART_SetConfig+0x36e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009632:	f7fc fc11 	bl	8005e58 <HAL_RCC_GetSysClockFreq>
 8009636:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8009638:	e009      	b.n	800964e <UART_SetConfig+0x36e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800963a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800963e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8009640:	e005      	b.n	800964e <UART_SetConfig+0x36e>
      default:
        pclk = 0U;
 8009642:	2300      	movs	r3, #0
 8009644:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8009646:	2301      	movs	r3, #1
 8009648:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800964c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800964e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009650:	2b00      	cmp	r3, #0
 8009652:	f000 8130 	beq.w	80098b6 <UART_SetConfig+0x5d6>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8009656:	697b      	ldr	r3, [r7, #20]
 8009658:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800965a:	4a94      	ldr	r2, [pc, #592]	; (80098ac <UART_SetConfig+0x5cc>)
 800965c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009660:	461a      	mov	r2, r3
 8009662:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009664:	fbb3 f3f2 	udiv	r3, r3, r2
 8009668:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800966a:	697b      	ldr	r3, [r7, #20]
 800966c:	685a      	ldr	r2, [r3, #4]
 800966e:	4613      	mov	r3, r2
 8009670:	005b      	lsls	r3, r3, #1
 8009672:	4413      	add	r3, r2
 8009674:	69ba      	ldr	r2, [r7, #24]
 8009676:	429a      	cmp	r2, r3
 8009678:	d305      	bcc.n	8009686 <UART_SetConfig+0x3a6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800967a:	697b      	ldr	r3, [r7, #20]
 800967c:	685b      	ldr	r3, [r3, #4]
 800967e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009680:	69ba      	ldr	r2, [r7, #24]
 8009682:	429a      	cmp	r2, r3
 8009684:	d903      	bls.n	800968e <UART_SetConfig+0x3ae>
      {
        ret = HAL_ERROR;
 8009686:	2301      	movs	r3, #1
 8009688:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800968c:	e113      	b.n	80098b6 <UART_SetConfig+0x5d6>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800968e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009690:	2200      	movs	r2, #0
 8009692:	60bb      	str	r3, [r7, #8]
 8009694:	60fa      	str	r2, [r7, #12]
 8009696:	697b      	ldr	r3, [r7, #20]
 8009698:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800969a:	4a84      	ldr	r2, [pc, #528]	; (80098ac <UART_SetConfig+0x5cc>)
 800969c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80096a0:	b29b      	uxth	r3, r3
 80096a2:	2200      	movs	r2, #0
 80096a4:	603b      	str	r3, [r7, #0]
 80096a6:	607a      	str	r2, [r7, #4]
 80096a8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80096ac:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80096b0:	f7f6 fdd8 	bl	8000264 <__aeabi_uldivmod>
 80096b4:	4602      	mov	r2, r0
 80096b6:	460b      	mov	r3, r1
 80096b8:	4610      	mov	r0, r2
 80096ba:	4619      	mov	r1, r3
 80096bc:	f04f 0200 	mov.w	r2, #0
 80096c0:	f04f 0300 	mov.w	r3, #0
 80096c4:	020b      	lsls	r3, r1, #8
 80096c6:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80096ca:	0202      	lsls	r2, r0, #8
 80096cc:	6979      	ldr	r1, [r7, #20]
 80096ce:	6849      	ldr	r1, [r1, #4]
 80096d0:	0849      	lsrs	r1, r1, #1
 80096d2:	2000      	movs	r0, #0
 80096d4:	460c      	mov	r4, r1
 80096d6:	4605      	mov	r5, r0
 80096d8:	eb12 0804 	adds.w	r8, r2, r4
 80096dc:	eb43 0905 	adc.w	r9, r3, r5
 80096e0:	697b      	ldr	r3, [r7, #20]
 80096e2:	685b      	ldr	r3, [r3, #4]
 80096e4:	2200      	movs	r2, #0
 80096e6:	469a      	mov	sl, r3
 80096e8:	4693      	mov	fp, r2
 80096ea:	4652      	mov	r2, sl
 80096ec:	465b      	mov	r3, fp
 80096ee:	4640      	mov	r0, r8
 80096f0:	4649      	mov	r1, r9
 80096f2:	f7f6 fdb7 	bl	8000264 <__aeabi_uldivmod>
 80096f6:	4602      	mov	r2, r0
 80096f8:	460b      	mov	r3, r1
 80096fa:	4613      	mov	r3, r2
 80096fc:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80096fe:	6a3b      	ldr	r3, [r7, #32]
 8009700:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009704:	d308      	bcc.n	8009718 <UART_SetConfig+0x438>
 8009706:	6a3b      	ldr	r3, [r7, #32]
 8009708:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800970c:	d204      	bcs.n	8009718 <UART_SetConfig+0x438>
        {
          huart->Instance->BRR = usartdiv;
 800970e:	697b      	ldr	r3, [r7, #20]
 8009710:	681b      	ldr	r3, [r3, #0]
 8009712:	6a3a      	ldr	r2, [r7, #32]
 8009714:	60da      	str	r2, [r3, #12]
 8009716:	e0ce      	b.n	80098b6 <UART_SetConfig+0x5d6>
        }
        else
        {
          ret = HAL_ERROR;
 8009718:	2301      	movs	r3, #1
 800971a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800971e:	e0ca      	b.n	80098b6 <UART_SetConfig+0x5d6>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009720:	697b      	ldr	r3, [r7, #20]
 8009722:	69db      	ldr	r3, [r3, #28]
 8009724:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009728:	d166      	bne.n	80097f8 <UART_SetConfig+0x518>
  {
    switch (clocksource)
 800972a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800972e:	2b08      	cmp	r3, #8
 8009730:	d827      	bhi.n	8009782 <UART_SetConfig+0x4a2>
 8009732:	a201      	add	r2, pc, #4	; (adr r2, 8009738 <UART_SetConfig+0x458>)
 8009734:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009738:	0800975d 	.word	0x0800975d
 800973c:	08009765 	.word	0x08009765
 8009740:	0800976d 	.word	0x0800976d
 8009744:	08009783 	.word	0x08009783
 8009748:	08009773 	.word	0x08009773
 800974c:	08009783 	.word	0x08009783
 8009750:	08009783 	.word	0x08009783
 8009754:	08009783 	.word	0x08009783
 8009758:	0800977b 	.word	0x0800977b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800975c:	f7fc fc2e 	bl	8005fbc <HAL_RCC_GetPCLK1Freq>
 8009760:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8009762:	e014      	b.n	800978e <UART_SetConfig+0x4ae>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009764:	f7fc fc3e 	bl	8005fe4 <HAL_RCC_GetPCLK2Freq>
 8009768:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800976a:	e010      	b.n	800978e <UART_SetConfig+0x4ae>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800976c:	4b4e      	ldr	r3, [pc, #312]	; (80098a8 <UART_SetConfig+0x5c8>)
 800976e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8009770:	e00d      	b.n	800978e <UART_SetConfig+0x4ae>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009772:	f7fc fb71 	bl	8005e58 <HAL_RCC_GetSysClockFreq>
 8009776:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8009778:	e009      	b.n	800978e <UART_SetConfig+0x4ae>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800977a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800977e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8009780:	e005      	b.n	800978e <UART_SetConfig+0x4ae>
      default:
        pclk = 0U;
 8009782:	2300      	movs	r3, #0
 8009784:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8009786:	2301      	movs	r3, #1
 8009788:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800978c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800978e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009790:	2b00      	cmp	r3, #0
 8009792:	f000 8090 	beq.w	80098b6 <UART_SetConfig+0x5d6>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009796:	697b      	ldr	r3, [r7, #20]
 8009798:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800979a:	4a44      	ldr	r2, [pc, #272]	; (80098ac <UART_SetConfig+0x5cc>)
 800979c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80097a0:	461a      	mov	r2, r3
 80097a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097a4:	fbb3 f3f2 	udiv	r3, r3, r2
 80097a8:	005a      	lsls	r2, r3, #1
 80097aa:	697b      	ldr	r3, [r7, #20]
 80097ac:	685b      	ldr	r3, [r3, #4]
 80097ae:	085b      	lsrs	r3, r3, #1
 80097b0:	441a      	add	r2, r3
 80097b2:	697b      	ldr	r3, [r7, #20]
 80097b4:	685b      	ldr	r3, [r3, #4]
 80097b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80097ba:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80097bc:	6a3b      	ldr	r3, [r7, #32]
 80097be:	2b0f      	cmp	r3, #15
 80097c0:	d916      	bls.n	80097f0 <UART_SetConfig+0x510>
 80097c2:	6a3b      	ldr	r3, [r7, #32]
 80097c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80097c8:	d212      	bcs.n	80097f0 <UART_SetConfig+0x510>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80097ca:	6a3b      	ldr	r3, [r7, #32]
 80097cc:	b29b      	uxth	r3, r3
 80097ce:	f023 030f 	bic.w	r3, r3, #15
 80097d2:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80097d4:	6a3b      	ldr	r3, [r7, #32]
 80097d6:	085b      	lsrs	r3, r3, #1
 80097d8:	b29b      	uxth	r3, r3
 80097da:	f003 0307 	and.w	r3, r3, #7
 80097de:	b29a      	uxth	r2, r3
 80097e0:	8bfb      	ldrh	r3, [r7, #30]
 80097e2:	4313      	orrs	r3, r2
 80097e4:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80097e6:	697b      	ldr	r3, [r7, #20]
 80097e8:	681b      	ldr	r3, [r3, #0]
 80097ea:	8bfa      	ldrh	r2, [r7, #30]
 80097ec:	60da      	str	r2, [r3, #12]
 80097ee:	e062      	b.n	80098b6 <UART_SetConfig+0x5d6>
      }
      else
      {
        ret = HAL_ERROR;
 80097f0:	2301      	movs	r3, #1
 80097f2:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80097f6:	e05e      	b.n	80098b6 <UART_SetConfig+0x5d6>
      }
    }
  }
  else
  {
    switch (clocksource)
 80097f8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80097fc:	2b08      	cmp	r3, #8
 80097fe:	d828      	bhi.n	8009852 <UART_SetConfig+0x572>
 8009800:	a201      	add	r2, pc, #4	; (adr r2, 8009808 <UART_SetConfig+0x528>)
 8009802:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009806:	bf00      	nop
 8009808:	0800982d 	.word	0x0800982d
 800980c:	08009835 	.word	0x08009835
 8009810:	0800983d 	.word	0x0800983d
 8009814:	08009853 	.word	0x08009853
 8009818:	08009843 	.word	0x08009843
 800981c:	08009853 	.word	0x08009853
 8009820:	08009853 	.word	0x08009853
 8009824:	08009853 	.word	0x08009853
 8009828:	0800984b 	.word	0x0800984b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800982c:	f7fc fbc6 	bl	8005fbc <HAL_RCC_GetPCLK1Freq>
 8009830:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8009832:	e014      	b.n	800985e <UART_SetConfig+0x57e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009834:	f7fc fbd6 	bl	8005fe4 <HAL_RCC_GetPCLK2Freq>
 8009838:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800983a:	e010      	b.n	800985e <UART_SetConfig+0x57e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800983c:	4b1a      	ldr	r3, [pc, #104]	; (80098a8 <UART_SetConfig+0x5c8>)
 800983e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8009840:	e00d      	b.n	800985e <UART_SetConfig+0x57e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009842:	f7fc fb09 	bl	8005e58 <HAL_RCC_GetSysClockFreq>
 8009846:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8009848:	e009      	b.n	800985e <UART_SetConfig+0x57e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800984a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800984e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8009850:	e005      	b.n	800985e <UART_SetConfig+0x57e>
      default:
        pclk = 0U;
 8009852:	2300      	movs	r3, #0
 8009854:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8009856:	2301      	movs	r3, #1
 8009858:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800985c:	bf00      	nop
    }

    if (pclk != 0U)
 800985e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009860:	2b00      	cmp	r3, #0
 8009862:	d028      	beq.n	80098b6 <UART_SetConfig+0x5d6>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009864:	697b      	ldr	r3, [r7, #20]
 8009866:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009868:	4a10      	ldr	r2, [pc, #64]	; (80098ac <UART_SetConfig+0x5cc>)
 800986a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800986e:	461a      	mov	r2, r3
 8009870:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009872:	fbb3 f2f2 	udiv	r2, r3, r2
 8009876:	697b      	ldr	r3, [r7, #20]
 8009878:	685b      	ldr	r3, [r3, #4]
 800987a:	085b      	lsrs	r3, r3, #1
 800987c:	441a      	add	r2, r3
 800987e:	697b      	ldr	r3, [r7, #20]
 8009880:	685b      	ldr	r3, [r3, #4]
 8009882:	fbb2 f3f3 	udiv	r3, r2, r3
 8009886:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009888:	6a3b      	ldr	r3, [r7, #32]
 800988a:	2b0f      	cmp	r3, #15
 800988c:	d910      	bls.n	80098b0 <UART_SetConfig+0x5d0>
 800988e:	6a3b      	ldr	r3, [r7, #32]
 8009890:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009894:	d20c      	bcs.n	80098b0 <UART_SetConfig+0x5d0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8009896:	6a3b      	ldr	r3, [r7, #32]
 8009898:	b29a      	uxth	r2, r3
 800989a:	697b      	ldr	r3, [r7, #20]
 800989c:	681b      	ldr	r3, [r3, #0]
 800989e:	60da      	str	r2, [r3, #12]
 80098a0:	e009      	b.n	80098b6 <UART_SetConfig+0x5d6>
 80098a2:	bf00      	nop
 80098a4:	40008000 	.word	0x40008000
 80098a8:	00f42400 	.word	0x00f42400
 80098ac:	0800e4a8 	.word	0x0800e4a8
      }
      else
      {
        ret = HAL_ERROR;
 80098b0:	2301      	movs	r3, #1
 80098b2:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80098b6:	697b      	ldr	r3, [r7, #20]
 80098b8:	2201      	movs	r2, #1
 80098ba:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80098be:	697b      	ldr	r3, [r7, #20]
 80098c0:	2201      	movs	r2, #1
 80098c2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80098c6:	697b      	ldr	r3, [r7, #20]
 80098c8:	2200      	movs	r2, #0
 80098ca:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 80098cc:	697b      	ldr	r3, [r7, #20]
 80098ce:	2200      	movs	r2, #0
 80098d0:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 80098d2:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 80098d6:	4618      	mov	r0, r3
 80098d8:	3730      	adds	r7, #48	; 0x30
 80098da:	46bd      	mov	sp, r7
 80098dc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080098e0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80098e0:	b480      	push	{r7}
 80098e2:	b083      	sub	sp, #12
 80098e4:	af00      	add	r7, sp, #0
 80098e6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80098ec:	f003 0301 	and.w	r3, r3, #1
 80098f0:	2b00      	cmp	r3, #0
 80098f2:	d00a      	beq.n	800990a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	681b      	ldr	r3, [r3, #0]
 80098f8:	685b      	ldr	r3, [r3, #4]
 80098fa:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	681b      	ldr	r3, [r3, #0]
 8009906:	430a      	orrs	r2, r1
 8009908:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800990e:	f003 0302 	and.w	r3, r3, #2
 8009912:	2b00      	cmp	r3, #0
 8009914:	d00a      	beq.n	800992c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	681b      	ldr	r3, [r3, #0]
 800991a:	685b      	ldr	r3, [r3, #4]
 800991c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	681b      	ldr	r3, [r3, #0]
 8009928:	430a      	orrs	r2, r1
 800992a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009930:	f003 0304 	and.w	r3, r3, #4
 8009934:	2b00      	cmp	r3, #0
 8009936:	d00a      	beq.n	800994e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	681b      	ldr	r3, [r3, #0]
 800993c:	685b      	ldr	r3, [r3, #4]
 800993e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	681b      	ldr	r3, [r3, #0]
 800994a:	430a      	orrs	r2, r1
 800994c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009952:	f003 0308 	and.w	r3, r3, #8
 8009956:	2b00      	cmp	r3, #0
 8009958:	d00a      	beq.n	8009970 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	681b      	ldr	r3, [r3, #0]
 800995e:	685b      	ldr	r3, [r3, #4]
 8009960:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	681b      	ldr	r3, [r3, #0]
 800996c:	430a      	orrs	r2, r1
 800996e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009974:	f003 0310 	and.w	r3, r3, #16
 8009978:	2b00      	cmp	r3, #0
 800997a:	d00a      	beq.n	8009992 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	681b      	ldr	r3, [r3, #0]
 8009980:	689b      	ldr	r3, [r3, #8]
 8009982:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	681b      	ldr	r3, [r3, #0]
 800998e:	430a      	orrs	r2, r1
 8009990:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009996:	f003 0320 	and.w	r3, r3, #32
 800999a:	2b00      	cmp	r3, #0
 800999c:	d00a      	beq.n	80099b4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	681b      	ldr	r3, [r3, #0]
 80099a2:	689b      	ldr	r3, [r3, #8]
 80099a4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	681b      	ldr	r3, [r3, #0]
 80099b0:	430a      	orrs	r2, r1
 80099b2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80099b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80099bc:	2b00      	cmp	r3, #0
 80099be:	d01a      	beq.n	80099f6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	681b      	ldr	r3, [r3, #0]
 80099c4:	685b      	ldr	r3, [r3, #4]
 80099c6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	681b      	ldr	r3, [r3, #0]
 80099d2:	430a      	orrs	r2, r1
 80099d4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80099da:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80099de:	d10a      	bne.n	80099f6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	681b      	ldr	r3, [r3, #0]
 80099e4:	685b      	ldr	r3, [r3, #4]
 80099e6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	681b      	ldr	r3, [r3, #0]
 80099f2:	430a      	orrs	r2, r1
 80099f4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80099fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80099fe:	2b00      	cmp	r3, #0
 8009a00:	d00a      	beq.n	8009a18 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	681b      	ldr	r3, [r3, #0]
 8009a06:	685b      	ldr	r3, [r3, #4]
 8009a08:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	681b      	ldr	r3, [r3, #0]
 8009a14:	430a      	orrs	r2, r1
 8009a16:	605a      	str	r2, [r3, #4]
  }
}
 8009a18:	bf00      	nop
 8009a1a:	370c      	adds	r7, #12
 8009a1c:	46bd      	mov	sp, r7
 8009a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a22:	4770      	bx	lr

08009a24 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009a24:	b580      	push	{r7, lr}
 8009a26:	b098      	sub	sp, #96	; 0x60
 8009a28:	af02      	add	r7, sp, #8
 8009a2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	2200      	movs	r2, #0
 8009a30:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009a34:	f7f8 fd58 	bl	80024e8 <HAL_GetTick>
 8009a38:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	681b      	ldr	r3, [r3, #0]
 8009a3e:	681b      	ldr	r3, [r3, #0]
 8009a40:	f003 0308 	and.w	r3, r3, #8
 8009a44:	2b08      	cmp	r3, #8
 8009a46:	d12f      	bne.n	8009aa8 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009a48:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009a4c:	9300      	str	r3, [sp, #0]
 8009a4e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009a50:	2200      	movs	r2, #0
 8009a52:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8009a56:	6878      	ldr	r0, [r7, #4]
 8009a58:	f000 f88e 	bl	8009b78 <UART_WaitOnFlagUntilTimeout>
 8009a5c:	4603      	mov	r3, r0
 8009a5e:	2b00      	cmp	r3, #0
 8009a60:	d022      	beq.n	8009aa8 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	681b      	ldr	r3, [r3, #0]
 8009a66:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a6a:	e853 3f00 	ldrex	r3, [r3]
 8009a6e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009a70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009a72:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009a76:	653b      	str	r3, [r7, #80]	; 0x50
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	681b      	ldr	r3, [r3, #0]
 8009a7c:	461a      	mov	r2, r3
 8009a7e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009a80:	647b      	str	r3, [r7, #68]	; 0x44
 8009a82:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a84:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009a86:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009a88:	e841 2300 	strex	r3, r2, [r1]
 8009a8c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009a8e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009a90:	2b00      	cmp	r3, #0
 8009a92:	d1e6      	bne.n	8009a62 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	2220      	movs	r2, #32
 8009a98:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	2200      	movs	r2, #0
 8009aa0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009aa4:	2303      	movs	r3, #3
 8009aa6:	e063      	b.n	8009b70 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	681b      	ldr	r3, [r3, #0]
 8009aac:	681b      	ldr	r3, [r3, #0]
 8009aae:	f003 0304 	and.w	r3, r3, #4
 8009ab2:	2b04      	cmp	r3, #4
 8009ab4:	d149      	bne.n	8009b4a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009ab6:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009aba:	9300      	str	r3, [sp, #0]
 8009abc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009abe:	2200      	movs	r2, #0
 8009ac0:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8009ac4:	6878      	ldr	r0, [r7, #4]
 8009ac6:	f000 f857 	bl	8009b78 <UART_WaitOnFlagUntilTimeout>
 8009aca:	4603      	mov	r3, r0
 8009acc:	2b00      	cmp	r3, #0
 8009ace:	d03c      	beq.n	8009b4a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	681b      	ldr	r3, [r3, #0]
 8009ad4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ad6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ad8:	e853 3f00 	ldrex	r3, [r3]
 8009adc:	623b      	str	r3, [r7, #32]
   return(result);
 8009ade:	6a3b      	ldr	r3, [r7, #32]
 8009ae0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009ae4:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	681b      	ldr	r3, [r3, #0]
 8009aea:	461a      	mov	r2, r3
 8009aec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009aee:	633b      	str	r3, [r7, #48]	; 0x30
 8009af0:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009af2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009af4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009af6:	e841 2300 	strex	r3, r2, [r1]
 8009afa:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009afc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009afe:	2b00      	cmp	r3, #0
 8009b00:	d1e6      	bne.n	8009ad0 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	681b      	ldr	r3, [r3, #0]
 8009b06:	3308      	adds	r3, #8
 8009b08:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b0a:	693b      	ldr	r3, [r7, #16]
 8009b0c:	e853 3f00 	ldrex	r3, [r3]
 8009b10:	60fb      	str	r3, [r7, #12]
   return(result);
 8009b12:	68fb      	ldr	r3, [r7, #12]
 8009b14:	f023 0301 	bic.w	r3, r3, #1
 8009b18:	64bb      	str	r3, [r7, #72]	; 0x48
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	681b      	ldr	r3, [r3, #0]
 8009b1e:	3308      	adds	r3, #8
 8009b20:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009b22:	61fa      	str	r2, [r7, #28]
 8009b24:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b26:	69b9      	ldr	r1, [r7, #24]
 8009b28:	69fa      	ldr	r2, [r7, #28]
 8009b2a:	e841 2300 	strex	r3, r2, [r1]
 8009b2e:	617b      	str	r3, [r7, #20]
   return(result);
 8009b30:	697b      	ldr	r3, [r7, #20]
 8009b32:	2b00      	cmp	r3, #0
 8009b34:	d1e5      	bne.n	8009b02 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	2220      	movs	r2, #32
 8009b3a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	2200      	movs	r2, #0
 8009b42:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009b46:	2303      	movs	r3, #3
 8009b48:	e012      	b.n	8009b70 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	2220      	movs	r2, #32
 8009b4e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	2220      	movs	r2, #32
 8009b56:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	2200      	movs	r2, #0
 8009b5e:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	2200      	movs	r2, #0
 8009b64:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	2200      	movs	r2, #0
 8009b6a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8009b6e:	2300      	movs	r3, #0
}
 8009b70:	4618      	mov	r0, r3
 8009b72:	3758      	adds	r7, #88	; 0x58
 8009b74:	46bd      	mov	sp, r7
 8009b76:	bd80      	pop	{r7, pc}

08009b78 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009b78:	b580      	push	{r7, lr}
 8009b7a:	b084      	sub	sp, #16
 8009b7c:	af00      	add	r7, sp, #0
 8009b7e:	60f8      	str	r0, [r7, #12]
 8009b80:	60b9      	str	r1, [r7, #8]
 8009b82:	603b      	str	r3, [r7, #0]
 8009b84:	4613      	mov	r3, r2
 8009b86:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009b88:	e049      	b.n	8009c1e <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009b8a:	69bb      	ldr	r3, [r7, #24]
 8009b8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009b90:	d045      	beq.n	8009c1e <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009b92:	f7f8 fca9 	bl	80024e8 <HAL_GetTick>
 8009b96:	4602      	mov	r2, r0
 8009b98:	683b      	ldr	r3, [r7, #0]
 8009b9a:	1ad3      	subs	r3, r2, r3
 8009b9c:	69ba      	ldr	r2, [r7, #24]
 8009b9e:	429a      	cmp	r2, r3
 8009ba0:	d302      	bcc.n	8009ba8 <UART_WaitOnFlagUntilTimeout+0x30>
 8009ba2:	69bb      	ldr	r3, [r7, #24]
 8009ba4:	2b00      	cmp	r3, #0
 8009ba6:	d101      	bne.n	8009bac <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8009ba8:	2303      	movs	r3, #3
 8009baa:	e048      	b.n	8009c3e <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8009bac:	68fb      	ldr	r3, [r7, #12]
 8009bae:	681b      	ldr	r3, [r3, #0]
 8009bb0:	681b      	ldr	r3, [r3, #0]
 8009bb2:	f003 0304 	and.w	r3, r3, #4
 8009bb6:	2b00      	cmp	r3, #0
 8009bb8:	d031      	beq.n	8009c1e <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8009bba:	68fb      	ldr	r3, [r7, #12]
 8009bbc:	681b      	ldr	r3, [r3, #0]
 8009bbe:	69db      	ldr	r3, [r3, #28]
 8009bc0:	f003 0308 	and.w	r3, r3, #8
 8009bc4:	2b08      	cmp	r3, #8
 8009bc6:	d110      	bne.n	8009bea <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009bc8:	68fb      	ldr	r3, [r7, #12]
 8009bca:	681b      	ldr	r3, [r3, #0]
 8009bcc:	2208      	movs	r2, #8
 8009bce:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8009bd0:	68f8      	ldr	r0, [r7, #12]
 8009bd2:	f000 f95b 	bl	8009e8c <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8009bd6:	68fb      	ldr	r3, [r7, #12]
 8009bd8:	2208      	movs	r2, #8
 8009bda:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8009bde:	68fb      	ldr	r3, [r7, #12]
 8009be0:	2200      	movs	r2, #0
 8009be2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 8009be6:	2301      	movs	r3, #1
 8009be8:	e029      	b.n	8009c3e <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009bea:	68fb      	ldr	r3, [r7, #12]
 8009bec:	681b      	ldr	r3, [r3, #0]
 8009bee:	69db      	ldr	r3, [r3, #28]
 8009bf0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009bf4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009bf8:	d111      	bne.n	8009c1e <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009bfa:	68fb      	ldr	r3, [r7, #12]
 8009bfc:	681b      	ldr	r3, [r3, #0]
 8009bfe:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009c02:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009c04:	68f8      	ldr	r0, [r7, #12]
 8009c06:	f000 f941 	bl	8009e8c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009c0a:	68fb      	ldr	r3, [r7, #12]
 8009c0c:	2220      	movs	r2, #32
 8009c0e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009c12:	68fb      	ldr	r3, [r7, #12]
 8009c14:	2200      	movs	r2, #0
 8009c16:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8009c1a:	2303      	movs	r3, #3
 8009c1c:	e00f      	b.n	8009c3e <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009c1e:	68fb      	ldr	r3, [r7, #12]
 8009c20:	681b      	ldr	r3, [r3, #0]
 8009c22:	69da      	ldr	r2, [r3, #28]
 8009c24:	68bb      	ldr	r3, [r7, #8]
 8009c26:	4013      	ands	r3, r2
 8009c28:	68ba      	ldr	r2, [r7, #8]
 8009c2a:	429a      	cmp	r2, r3
 8009c2c:	bf0c      	ite	eq
 8009c2e:	2301      	moveq	r3, #1
 8009c30:	2300      	movne	r3, #0
 8009c32:	b2db      	uxtb	r3, r3
 8009c34:	461a      	mov	r2, r3
 8009c36:	79fb      	ldrb	r3, [r7, #7]
 8009c38:	429a      	cmp	r2, r3
 8009c3a:	d0a6      	beq.n	8009b8a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009c3c:	2300      	movs	r3, #0
}
 8009c3e:	4618      	mov	r0, r3
 8009c40:	3710      	adds	r7, #16
 8009c42:	46bd      	mov	sp, r7
 8009c44:	bd80      	pop	{r7, pc}
	...

08009c48 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009c48:	b480      	push	{r7}
 8009c4a:	b0a3      	sub	sp, #140	; 0x8c
 8009c4c:	af00      	add	r7, sp, #0
 8009c4e:	60f8      	str	r0, [r7, #12]
 8009c50:	60b9      	str	r1, [r7, #8]
 8009c52:	4613      	mov	r3, r2
 8009c54:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8009c56:	68fb      	ldr	r3, [r7, #12]
 8009c58:	68ba      	ldr	r2, [r7, #8]
 8009c5a:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8009c5c:	68fb      	ldr	r3, [r7, #12]
 8009c5e:	88fa      	ldrh	r2, [r7, #6]
 8009c60:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 8009c64:	68fb      	ldr	r3, [r7, #12]
 8009c66:	88fa      	ldrh	r2, [r7, #6]
 8009c68:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 8009c6c:	68fb      	ldr	r3, [r7, #12]
 8009c6e:	2200      	movs	r2, #0
 8009c70:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8009c72:	68fb      	ldr	r3, [r7, #12]
 8009c74:	689b      	ldr	r3, [r3, #8]
 8009c76:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009c7a:	d10e      	bne.n	8009c9a <UART_Start_Receive_IT+0x52>
 8009c7c:	68fb      	ldr	r3, [r7, #12]
 8009c7e:	691b      	ldr	r3, [r3, #16]
 8009c80:	2b00      	cmp	r3, #0
 8009c82:	d105      	bne.n	8009c90 <UART_Start_Receive_IT+0x48>
 8009c84:	68fb      	ldr	r3, [r7, #12]
 8009c86:	f240 12ff 	movw	r2, #511	; 0x1ff
 8009c8a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8009c8e:	e02d      	b.n	8009cec <UART_Start_Receive_IT+0xa4>
 8009c90:	68fb      	ldr	r3, [r7, #12]
 8009c92:	22ff      	movs	r2, #255	; 0xff
 8009c94:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8009c98:	e028      	b.n	8009cec <UART_Start_Receive_IT+0xa4>
 8009c9a:	68fb      	ldr	r3, [r7, #12]
 8009c9c:	689b      	ldr	r3, [r3, #8]
 8009c9e:	2b00      	cmp	r3, #0
 8009ca0:	d10d      	bne.n	8009cbe <UART_Start_Receive_IT+0x76>
 8009ca2:	68fb      	ldr	r3, [r7, #12]
 8009ca4:	691b      	ldr	r3, [r3, #16]
 8009ca6:	2b00      	cmp	r3, #0
 8009ca8:	d104      	bne.n	8009cb4 <UART_Start_Receive_IT+0x6c>
 8009caa:	68fb      	ldr	r3, [r7, #12]
 8009cac:	22ff      	movs	r2, #255	; 0xff
 8009cae:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8009cb2:	e01b      	b.n	8009cec <UART_Start_Receive_IT+0xa4>
 8009cb4:	68fb      	ldr	r3, [r7, #12]
 8009cb6:	227f      	movs	r2, #127	; 0x7f
 8009cb8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8009cbc:	e016      	b.n	8009cec <UART_Start_Receive_IT+0xa4>
 8009cbe:	68fb      	ldr	r3, [r7, #12]
 8009cc0:	689b      	ldr	r3, [r3, #8]
 8009cc2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009cc6:	d10d      	bne.n	8009ce4 <UART_Start_Receive_IT+0x9c>
 8009cc8:	68fb      	ldr	r3, [r7, #12]
 8009cca:	691b      	ldr	r3, [r3, #16]
 8009ccc:	2b00      	cmp	r3, #0
 8009cce:	d104      	bne.n	8009cda <UART_Start_Receive_IT+0x92>
 8009cd0:	68fb      	ldr	r3, [r7, #12]
 8009cd2:	227f      	movs	r2, #127	; 0x7f
 8009cd4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8009cd8:	e008      	b.n	8009cec <UART_Start_Receive_IT+0xa4>
 8009cda:	68fb      	ldr	r3, [r7, #12]
 8009cdc:	223f      	movs	r2, #63	; 0x3f
 8009cde:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8009ce2:	e003      	b.n	8009cec <UART_Start_Receive_IT+0xa4>
 8009ce4:	68fb      	ldr	r3, [r7, #12]
 8009ce6:	2200      	movs	r2, #0
 8009ce8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009cec:	68fb      	ldr	r3, [r7, #12]
 8009cee:	2200      	movs	r2, #0
 8009cf0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009cf4:	68fb      	ldr	r3, [r7, #12]
 8009cf6:	2222      	movs	r2, #34	; 0x22
 8009cf8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009cfc:	68fb      	ldr	r3, [r7, #12]
 8009cfe:	681b      	ldr	r3, [r3, #0]
 8009d00:	3308      	adds	r3, #8
 8009d02:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d04:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009d06:	e853 3f00 	ldrex	r3, [r3]
 8009d0a:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8009d0c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009d0e:	f043 0301 	orr.w	r3, r3, #1
 8009d12:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8009d16:	68fb      	ldr	r3, [r7, #12]
 8009d18:	681b      	ldr	r3, [r3, #0]
 8009d1a:	3308      	adds	r3, #8
 8009d1c:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8009d20:	673a      	str	r2, [r7, #112]	; 0x70
 8009d22:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d24:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8009d26:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8009d28:	e841 2300 	strex	r3, r2, [r1]
 8009d2c:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 8009d2e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009d30:	2b00      	cmp	r3, #0
 8009d32:	d1e3      	bne.n	8009cfc <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8009d34:	68fb      	ldr	r3, [r7, #12]
 8009d36:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009d38:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009d3c:	d14f      	bne.n	8009dde <UART_Start_Receive_IT+0x196>
 8009d3e:	68fb      	ldr	r3, [r7, #12]
 8009d40:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8009d44:	88fa      	ldrh	r2, [r7, #6]
 8009d46:	429a      	cmp	r2, r3
 8009d48:	d349      	bcc.n	8009dde <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009d4a:	68fb      	ldr	r3, [r7, #12]
 8009d4c:	689b      	ldr	r3, [r3, #8]
 8009d4e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009d52:	d107      	bne.n	8009d64 <UART_Start_Receive_IT+0x11c>
 8009d54:	68fb      	ldr	r3, [r7, #12]
 8009d56:	691b      	ldr	r3, [r3, #16]
 8009d58:	2b00      	cmp	r3, #0
 8009d5a:	d103      	bne.n	8009d64 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8009d5c:	68fb      	ldr	r3, [r7, #12]
 8009d5e:	4a47      	ldr	r2, [pc, #284]	; (8009e7c <UART_Start_Receive_IT+0x234>)
 8009d60:	675a      	str	r2, [r3, #116]	; 0x74
 8009d62:	e002      	b.n	8009d6a <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8009d64:	68fb      	ldr	r3, [r7, #12]
 8009d66:	4a46      	ldr	r2, [pc, #280]	; (8009e80 <UART_Start_Receive_IT+0x238>)
 8009d68:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8009d6a:	68fb      	ldr	r3, [r7, #12]
 8009d6c:	691b      	ldr	r3, [r3, #16]
 8009d6e:	2b00      	cmp	r3, #0
 8009d70:	d01a      	beq.n	8009da8 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009d72:	68fb      	ldr	r3, [r7, #12]
 8009d74:	681b      	ldr	r3, [r3, #0]
 8009d76:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d78:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009d7a:	e853 3f00 	ldrex	r3, [r3]
 8009d7e:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8009d80:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009d82:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009d86:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8009d8a:	68fb      	ldr	r3, [r7, #12]
 8009d8c:	681b      	ldr	r3, [r3, #0]
 8009d8e:	461a      	mov	r2, r3
 8009d90:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8009d94:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009d96:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d98:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009d9a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8009d9c:	e841 2300 	strex	r3, r2, [r1]
 8009da0:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8009da2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009da4:	2b00      	cmp	r3, #0
 8009da6:	d1e4      	bne.n	8009d72 <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8009da8:	68fb      	ldr	r3, [r7, #12]
 8009daa:	681b      	ldr	r3, [r3, #0]
 8009dac:	3308      	adds	r3, #8
 8009dae:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009db0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009db2:	e853 3f00 	ldrex	r3, [r3]
 8009db6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009db8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009dba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009dbe:	67fb      	str	r3, [r7, #124]	; 0x7c
 8009dc0:	68fb      	ldr	r3, [r7, #12]
 8009dc2:	681b      	ldr	r3, [r3, #0]
 8009dc4:	3308      	adds	r3, #8
 8009dc6:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8009dc8:	64ba      	str	r2, [r7, #72]	; 0x48
 8009dca:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009dcc:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8009dce:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009dd0:	e841 2300 	strex	r3, r2, [r1]
 8009dd4:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8009dd6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009dd8:	2b00      	cmp	r3, #0
 8009dda:	d1e5      	bne.n	8009da8 <UART_Start_Receive_IT+0x160>
 8009ddc:	e046      	b.n	8009e6c <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009dde:	68fb      	ldr	r3, [r7, #12]
 8009de0:	689b      	ldr	r3, [r3, #8]
 8009de2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009de6:	d107      	bne.n	8009df8 <UART_Start_Receive_IT+0x1b0>
 8009de8:	68fb      	ldr	r3, [r7, #12]
 8009dea:	691b      	ldr	r3, [r3, #16]
 8009dec:	2b00      	cmp	r3, #0
 8009dee:	d103      	bne.n	8009df8 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8009df0:	68fb      	ldr	r3, [r7, #12]
 8009df2:	4a24      	ldr	r2, [pc, #144]	; (8009e84 <UART_Start_Receive_IT+0x23c>)
 8009df4:	675a      	str	r2, [r3, #116]	; 0x74
 8009df6:	e002      	b.n	8009dfe <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8009df8:	68fb      	ldr	r3, [r7, #12]
 8009dfa:	4a23      	ldr	r2, [pc, #140]	; (8009e88 <UART_Start_Receive_IT+0x240>)
 8009dfc:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8009dfe:	68fb      	ldr	r3, [r7, #12]
 8009e00:	691b      	ldr	r3, [r3, #16]
 8009e02:	2b00      	cmp	r3, #0
 8009e04:	d019      	beq.n	8009e3a <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8009e06:	68fb      	ldr	r3, [r7, #12]
 8009e08:	681b      	ldr	r3, [r3, #0]
 8009e0a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e0e:	e853 3f00 	ldrex	r3, [r3]
 8009e12:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009e14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e16:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8009e1a:	677b      	str	r3, [r7, #116]	; 0x74
 8009e1c:	68fb      	ldr	r3, [r7, #12]
 8009e1e:	681b      	ldr	r3, [r3, #0]
 8009e20:	461a      	mov	r2, r3
 8009e22:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009e24:	637b      	str	r3, [r7, #52]	; 0x34
 8009e26:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e28:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009e2a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009e2c:	e841 2300 	strex	r3, r2, [r1]
 8009e30:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8009e32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e34:	2b00      	cmp	r3, #0
 8009e36:	d1e6      	bne.n	8009e06 <UART_Start_Receive_IT+0x1be>
 8009e38:	e018      	b.n	8009e6c <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8009e3a:	68fb      	ldr	r3, [r7, #12]
 8009e3c:	681b      	ldr	r3, [r3, #0]
 8009e3e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e40:	697b      	ldr	r3, [r7, #20]
 8009e42:	e853 3f00 	ldrex	r3, [r3]
 8009e46:	613b      	str	r3, [r7, #16]
   return(result);
 8009e48:	693b      	ldr	r3, [r7, #16]
 8009e4a:	f043 0320 	orr.w	r3, r3, #32
 8009e4e:	67bb      	str	r3, [r7, #120]	; 0x78
 8009e50:	68fb      	ldr	r3, [r7, #12]
 8009e52:	681b      	ldr	r3, [r3, #0]
 8009e54:	461a      	mov	r2, r3
 8009e56:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009e58:	623b      	str	r3, [r7, #32]
 8009e5a:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e5c:	69f9      	ldr	r1, [r7, #28]
 8009e5e:	6a3a      	ldr	r2, [r7, #32]
 8009e60:	e841 2300 	strex	r3, r2, [r1]
 8009e64:	61bb      	str	r3, [r7, #24]
   return(result);
 8009e66:	69bb      	ldr	r3, [r7, #24]
 8009e68:	2b00      	cmp	r3, #0
 8009e6a:	d1e6      	bne.n	8009e3a <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 8009e6c:	2300      	movs	r3, #0
}
 8009e6e:	4618      	mov	r0, r3
 8009e70:	378c      	adds	r7, #140	; 0x8c
 8009e72:	46bd      	mov	sp, r7
 8009e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e78:	4770      	bx	lr
 8009e7a:	bf00      	nop
 8009e7c:	0800a6ad 	.word	0x0800a6ad
 8009e80:	0800a34d 	.word	0x0800a34d
 8009e84:	0800a195 	.word	0x0800a195
 8009e88:	08009fdd 	.word	0x08009fdd

08009e8c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009e8c:	b480      	push	{r7}
 8009e8e:	b095      	sub	sp, #84	; 0x54
 8009e90:	af00      	add	r7, sp, #0
 8009e92:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	681b      	ldr	r3, [r3, #0]
 8009e98:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009e9c:	e853 3f00 	ldrex	r3, [r3]
 8009ea0:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8009ea2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ea4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009ea8:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	681b      	ldr	r3, [r3, #0]
 8009eae:	461a      	mov	r2, r3
 8009eb0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009eb2:	643b      	str	r3, [r7, #64]	; 0x40
 8009eb4:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009eb6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009eb8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009eba:	e841 2300 	strex	r3, r2, [r1]
 8009ebe:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009ec0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ec2:	2b00      	cmp	r3, #0
 8009ec4:	d1e6      	bne.n	8009e94 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	681b      	ldr	r3, [r3, #0]
 8009eca:	3308      	adds	r3, #8
 8009ecc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ece:	6a3b      	ldr	r3, [r7, #32]
 8009ed0:	e853 3f00 	ldrex	r3, [r3]
 8009ed4:	61fb      	str	r3, [r7, #28]
   return(result);
 8009ed6:	69fb      	ldr	r3, [r7, #28]
 8009ed8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009edc:	f023 0301 	bic.w	r3, r3, #1
 8009ee0:	64bb      	str	r3, [r7, #72]	; 0x48
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	681b      	ldr	r3, [r3, #0]
 8009ee6:	3308      	adds	r3, #8
 8009ee8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009eea:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009eec:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009eee:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009ef0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009ef2:	e841 2300 	strex	r3, r2, [r1]
 8009ef6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009ef8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009efa:	2b00      	cmp	r3, #0
 8009efc:	d1e3      	bne.n	8009ec6 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009f02:	2b01      	cmp	r3, #1
 8009f04:	d118      	bne.n	8009f38 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	681b      	ldr	r3, [r3, #0]
 8009f0a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f0c:	68fb      	ldr	r3, [r7, #12]
 8009f0e:	e853 3f00 	ldrex	r3, [r3]
 8009f12:	60bb      	str	r3, [r7, #8]
   return(result);
 8009f14:	68bb      	ldr	r3, [r7, #8]
 8009f16:	f023 0310 	bic.w	r3, r3, #16
 8009f1a:	647b      	str	r3, [r7, #68]	; 0x44
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	681b      	ldr	r3, [r3, #0]
 8009f20:	461a      	mov	r2, r3
 8009f22:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009f24:	61bb      	str	r3, [r7, #24]
 8009f26:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f28:	6979      	ldr	r1, [r7, #20]
 8009f2a:	69ba      	ldr	r2, [r7, #24]
 8009f2c:	e841 2300 	strex	r3, r2, [r1]
 8009f30:	613b      	str	r3, [r7, #16]
   return(result);
 8009f32:	693b      	ldr	r3, [r7, #16]
 8009f34:	2b00      	cmp	r3, #0
 8009f36:	d1e6      	bne.n	8009f06 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	2220      	movs	r2, #32
 8009f3c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	2200      	movs	r2, #0
 8009f44:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	2200      	movs	r2, #0
 8009f4a:	675a      	str	r2, [r3, #116]	; 0x74
}
 8009f4c:	bf00      	nop
 8009f4e:	3754      	adds	r7, #84	; 0x54
 8009f50:	46bd      	mov	sp, r7
 8009f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f56:	4770      	bx	lr

08009f58 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009f58:	b580      	push	{r7, lr}
 8009f5a:	b084      	sub	sp, #16
 8009f5c:	af00      	add	r7, sp, #0
 8009f5e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009f64:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8009f66:	68fb      	ldr	r3, [r7, #12]
 8009f68:	2200      	movs	r2, #0
 8009f6a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8009f6e:	68fb      	ldr	r3, [r7, #12]
 8009f70:	2200      	movs	r2, #0
 8009f72:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009f76:	68f8      	ldr	r0, [r7, #12]
 8009f78:	f7ff f99c 	bl	80092b4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009f7c:	bf00      	nop
 8009f7e:	3710      	adds	r7, #16
 8009f80:	46bd      	mov	sp, r7
 8009f82:	bd80      	pop	{r7, pc}

08009f84 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009f84:	b580      	push	{r7, lr}
 8009f86:	b088      	sub	sp, #32
 8009f88:	af00      	add	r7, sp, #0
 8009f8a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	681b      	ldr	r3, [r3, #0]
 8009f90:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f92:	68fb      	ldr	r3, [r7, #12]
 8009f94:	e853 3f00 	ldrex	r3, [r3]
 8009f98:	60bb      	str	r3, [r7, #8]
   return(result);
 8009f9a:	68bb      	ldr	r3, [r7, #8]
 8009f9c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009fa0:	61fb      	str	r3, [r7, #28]
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	681b      	ldr	r3, [r3, #0]
 8009fa6:	461a      	mov	r2, r3
 8009fa8:	69fb      	ldr	r3, [r7, #28]
 8009faa:	61bb      	str	r3, [r7, #24]
 8009fac:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009fae:	6979      	ldr	r1, [r7, #20]
 8009fb0:	69ba      	ldr	r2, [r7, #24]
 8009fb2:	e841 2300 	strex	r3, r2, [r1]
 8009fb6:	613b      	str	r3, [r7, #16]
   return(result);
 8009fb8:	693b      	ldr	r3, [r7, #16]
 8009fba:	2b00      	cmp	r3, #0
 8009fbc:	d1e6      	bne.n	8009f8c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	2220      	movs	r2, #32
 8009fc2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	2200      	movs	r2, #0
 8009fca:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009fcc:	6878      	ldr	r0, [r7, #4]
 8009fce:	f7ff f967 	bl	80092a0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009fd2:	bf00      	nop
 8009fd4:	3720      	adds	r7, #32
 8009fd6:	46bd      	mov	sp, r7
 8009fd8:	bd80      	pop	{r7, pc}
	...

08009fdc <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8009fdc:	b580      	push	{r7, lr}
 8009fde:	b09c      	sub	sp, #112	; 0x70
 8009fe0:	af00      	add	r7, sp, #0
 8009fe2:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8009fea:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009ff4:	2b22      	cmp	r3, #34	; 0x22
 8009ff6:	f040 80be 	bne.w	800a176 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	681b      	ldr	r3, [r3, #0]
 8009ffe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a000:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800a004:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800a008:	b2d9      	uxtb	r1, r3
 800a00a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800a00e:	b2da      	uxtb	r2, r3
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a014:	400a      	ands	r2, r1
 800a016:	b2d2      	uxtb	r2, r2
 800a018:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a01e:	1c5a      	adds	r2, r3, #1
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800a02a:	b29b      	uxth	r3, r3
 800a02c:	3b01      	subs	r3, #1
 800a02e:	b29a      	uxth	r2, r3
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800a03c:	b29b      	uxth	r3, r3
 800a03e:	2b00      	cmp	r3, #0
 800a040:	f040 80a1 	bne.w	800a186 <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	681b      	ldr	r3, [r3, #0]
 800a048:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a04a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a04c:	e853 3f00 	ldrex	r3, [r3]
 800a050:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800a052:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a054:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a058:	66bb      	str	r3, [r7, #104]	; 0x68
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	681b      	ldr	r3, [r3, #0]
 800a05e:	461a      	mov	r2, r3
 800a060:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800a062:	65bb      	str	r3, [r7, #88]	; 0x58
 800a064:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a066:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800a068:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a06a:	e841 2300 	strex	r3, r2, [r1]
 800a06e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800a070:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a072:	2b00      	cmp	r3, #0
 800a074:	d1e6      	bne.n	800a044 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	681b      	ldr	r3, [r3, #0]
 800a07a:	3308      	adds	r3, #8
 800a07c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a07e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a080:	e853 3f00 	ldrex	r3, [r3]
 800a084:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800a086:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a088:	f023 0301 	bic.w	r3, r3, #1
 800a08c:	667b      	str	r3, [r7, #100]	; 0x64
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	681b      	ldr	r3, [r3, #0]
 800a092:	3308      	adds	r3, #8
 800a094:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800a096:	647a      	str	r2, [r7, #68]	; 0x44
 800a098:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a09a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800a09c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a09e:	e841 2300 	strex	r3, r2, [r1]
 800a0a2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800a0a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a0a6:	2b00      	cmp	r3, #0
 800a0a8:	d1e5      	bne.n	800a076 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	2220      	movs	r2, #32
 800a0ae:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	2200      	movs	r2, #0
 800a0b6:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	2200      	movs	r2, #0
 800a0bc:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	681b      	ldr	r3, [r3, #0]
 800a0c2:	4a33      	ldr	r2, [pc, #204]	; (800a190 <UART_RxISR_8BIT+0x1b4>)
 800a0c4:	4293      	cmp	r3, r2
 800a0c6:	d01f      	beq.n	800a108 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	681b      	ldr	r3, [r3, #0]
 800a0cc:	685b      	ldr	r3, [r3, #4]
 800a0ce:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a0d2:	2b00      	cmp	r3, #0
 800a0d4:	d018      	beq.n	800a108 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	681b      	ldr	r3, [r3, #0]
 800a0da:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a0dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0de:	e853 3f00 	ldrex	r3, [r3]
 800a0e2:	623b      	str	r3, [r7, #32]
   return(result);
 800a0e4:	6a3b      	ldr	r3, [r7, #32]
 800a0e6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800a0ea:	663b      	str	r3, [r7, #96]	; 0x60
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	681b      	ldr	r3, [r3, #0]
 800a0f0:	461a      	mov	r2, r3
 800a0f2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a0f4:	633b      	str	r3, [r7, #48]	; 0x30
 800a0f6:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a0f8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a0fa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a0fc:	e841 2300 	strex	r3, r2, [r1]
 800a100:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a102:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a104:	2b00      	cmp	r3, #0
 800a106:	d1e6      	bne.n	800a0d6 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a10c:	2b01      	cmp	r3, #1
 800a10e:	d12e      	bne.n	800a16e <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	2200      	movs	r2, #0
 800a114:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	681b      	ldr	r3, [r3, #0]
 800a11a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a11c:	693b      	ldr	r3, [r7, #16]
 800a11e:	e853 3f00 	ldrex	r3, [r3]
 800a122:	60fb      	str	r3, [r7, #12]
   return(result);
 800a124:	68fb      	ldr	r3, [r7, #12]
 800a126:	f023 0310 	bic.w	r3, r3, #16
 800a12a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	681b      	ldr	r3, [r3, #0]
 800a130:	461a      	mov	r2, r3
 800a132:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a134:	61fb      	str	r3, [r7, #28]
 800a136:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a138:	69b9      	ldr	r1, [r7, #24]
 800a13a:	69fa      	ldr	r2, [r7, #28]
 800a13c:	e841 2300 	strex	r3, r2, [r1]
 800a140:	617b      	str	r3, [r7, #20]
   return(result);
 800a142:	697b      	ldr	r3, [r7, #20]
 800a144:	2b00      	cmp	r3, #0
 800a146:	d1e6      	bne.n	800a116 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	681b      	ldr	r3, [r3, #0]
 800a14c:	69db      	ldr	r3, [r3, #28]
 800a14e:	f003 0310 	and.w	r3, r3, #16
 800a152:	2b10      	cmp	r3, #16
 800a154:	d103      	bne.n	800a15e <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	681b      	ldr	r3, [r3, #0]
 800a15a:	2210      	movs	r2, #16
 800a15c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800a164:	4619      	mov	r1, r3
 800a166:	6878      	ldr	r0, [r7, #4]
 800a168:	f7ff f8ae 	bl	80092c8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800a16c:	e00b      	b.n	800a186 <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800a16e:	6878      	ldr	r0, [r7, #4]
 800a170:	f7f6 fa4c 	bl	800060c <HAL_UART_RxCpltCallback>
}
 800a174:	e007      	b.n	800a186 <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	681b      	ldr	r3, [r3, #0]
 800a17a:	699a      	ldr	r2, [r3, #24]
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	681b      	ldr	r3, [r3, #0]
 800a180:	f042 0208 	orr.w	r2, r2, #8
 800a184:	619a      	str	r2, [r3, #24]
}
 800a186:	bf00      	nop
 800a188:	3770      	adds	r7, #112	; 0x70
 800a18a:	46bd      	mov	sp, r7
 800a18c:	bd80      	pop	{r7, pc}
 800a18e:	bf00      	nop
 800a190:	40008000 	.word	0x40008000

0800a194 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800a194:	b580      	push	{r7, lr}
 800a196:	b09c      	sub	sp, #112	; 0x70
 800a198:	af00      	add	r7, sp, #0
 800a19a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800a1a2:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a1ac:	2b22      	cmp	r3, #34	; 0x22
 800a1ae:	f040 80be 	bne.w	800a32e <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	681b      	ldr	r3, [r3, #0]
 800a1b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1b8:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a1c0:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800a1c2:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 800a1c6:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800a1ca:	4013      	ands	r3, r2
 800a1cc:	b29a      	uxth	r2, r3
 800a1ce:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800a1d0:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a1d6:	1c9a      	adds	r2, r3, #2
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800a1e2:	b29b      	uxth	r3, r3
 800a1e4:	3b01      	subs	r3, #1
 800a1e6:	b29a      	uxth	r2, r3
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800a1f4:	b29b      	uxth	r3, r3
 800a1f6:	2b00      	cmp	r3, #0
 800a1f8:	f040 80a1 	bne.w	800a33e <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	681b      	ldr	r3, [r3, #0]
 800a200:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a202:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a204:	e853 3f00 	ldrex	r3, [r3]
 800a208:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800a20a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a20c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a210:	667b      	str	r3, [r7, #100]	; 0x64
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	681b      	ldr	r3, [r3, #0]
 800a216:	461a      	mov	r2, r3
 800a218:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a21a:	657b      	str	r3, [r7, #84]	; 0x54
 800a21c:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a21e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800a220:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800a222:	e841 2300 	strex	r3, r2, [r1]
 800a226:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800a228:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a22a:	2b00      	cmp	r3, #0
 800a22c:	d1e6      	bne.n	800a1fc <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	681b      	ldr	r3, [r3, #0]
 800a232:	3308      	adds	r3, #8
 800a234:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a236:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a238:	e853 3f00 	ldrex	r3, [r3]
 800a23c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800a23e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a240:	f023 0301 	bic.w	r3, r3, #1
 800a244:	663b      	str	r3, [r7, #96]	; 0x60
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	681b      	ldr	r3, [r3, #0]
 800a24a:	3308      	adds	r3, #8
 800a24c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800a24e:	643a      	str	r2, [r7, #64]	; 0x40
 800a250:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a252:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800a254:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a256:	e841 2300 	strex	r3, r2, [r1]
 800a25a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a25c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a25e:	2b00      	cmp	r3, #0
 800a260:	d1e5      	bne.n	800a22e <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	2220      	movs	r2, #32
 800a266:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	2200      	movs	r2, #0
 800a26e:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	2200      	movs	r2, #0
 800a274:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	681b      	ldr	r3, [r3, #0]
 800a27a:	4a33      	ldr	r2, [pc, #204]	; (800a348 <UART_RxISR_16BIT+0x1b4>)
 800a27c:	4293      	cmp	r3, r2
 800a27e:	d01f      	beq.n	800a2c0 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	681b      	ldr	r3, [r3, #0]
 800a284:	685b      	ldr	r3, [r3, #4]
 800a286:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a28a:	2b00      	cmp	r3, #0
 800a28c:	d018      	beq.n	800a2c0 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	681b      	ldr	r3, [r3, #0]
 800a292:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a294:	6a3b      	ldr	r3, [r7, #32]
 800a296:	e853 3f00 	ldrex	r3, [r3]
 800a29a:	61fb      	str	r3, [r7, #28]
   return(result);
 800a29c:	69fb      	ldr	r3, [r7, #28]
 800a29e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800a2a2:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	681b      	ldr	r3, [r3, #0]
 800a2a8:	461a      	mov	r2, r3
 800a2aa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a2ac:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a2ae:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a2b0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a2b2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a2b4:	e841 2300 	strex	r3, r2, [r1]
 800a2b8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a2ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2bc:	2b00      	cmp	r3, #0
 800a2be:	d1e6      	bne.n	800a28e <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a2c4:	2b01      	cmp	r3, #1
 800a2c6:	d12e      	bne.n	800a326 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	2200      	movs	r2, #0
 800a2cc:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	681b      	ldr	r3, [r3, #0]
 800a2d2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a2d4:	68fb      	ldr	r3, [r7, #12]
 800a2d6:	e853 3f00 	ldrex	r3, [r3]
 800a2da:	60bb      	str	r3, [r7, #8]
   return(result);
 800a2dc:	68bb      	ldr	r3, [r7, #8]
 800a2de:	f023 0310 	bic.w	r3, r3, #16
 800a2e2:	65bb      	str	r3, [r7, #88]	; 0x58
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	681b      	ldr	r3, [r3, #0]
 800a2e8:	461a      	mov	r2, r3
 800a2ea:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a2ec:	61bb      	str	r3, [r7, #24]
 800a2ee:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a2f0:	6979      	ldr	r1, [r7, #20]
 800a2f2:	69ba      	ldr	r2, [r7, #24]
 800a2f4:	e841 2300 	strex	r3, r2, [r1]
 800a2f8:	613b      	str	r3, [r7, #16]
   return(result);
 800a2fa:	693b      	ldr	r3, [r7, #16]
 800a2fc:	2b00      	cmp	r3, #0
 800a2fe:	d1e6      	bne.n	800a2ce <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	681b      	ldr	r3, [r3, #0]
 800a304:	69db      	ldr	r3, [r3, #28]
 800a306:	f003 0310 	and.w	r3, r3, #16
 800a30a:	2b10      	cmp	r3, #16
 800a30c:	d103      	bne.n	800a316 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	681b      	ldr	r3, [r3, #0]
 800a312:	2210      	movs	r2, #16
 800a314:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800a31c:	4619      	mov	r1, r3
 800a31e:	6878      	ldr	r0, [r7, #4]
 800a320:	f7fe ffd2 	bl	80092c8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800a324:	e00b      	b.n	800a33e <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800a326:	6878      	ldr	r0, [r7, #4]
 800a328:	f7f6 f970 	bl	800060c <HAL_UART_RxCpltCallback>
}
 800a32c:	e007      	b.n	800a33e <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	681b      	ldr	r3, [r3, #0]
 800a332:	699a      	ldr	r2, [r3, #24]
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	681b      	ldr	r3, [r3, #0]
 800a338:	f042 0208 	orr.w	r2, r2, #8
 800a33c:	619a      	str	r2, [r3, #24]
}
 800a33e:	bf00      	nop
 800a340:	3770      	adds	r7, #112	; 0x70
 800a342:	46bd      	mov	sp, r7
 800a344:	bd80      	pop	{r7, pc}
 800a346:	bf00      	nop
 800a348:	40008000 	.word	0x40008000

0800a34c <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800a34c:	b580      	push	{r7, lr}
 800a34e:	b0ac      	sub	sp, #176	; 0xb0
 800a350:	af00      	add	r7, sp, #0
 800a352:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800a35a:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	681b      	ldr	r3, [r3, #0]
 800a362:	69db      	ldr	r3, [r3, #28]
 800a364:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	681b      	ldr	r3, [r3, #0]
 800a36c:	681b      	ldr	r3, [r3, #0]
 800a36e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	681b      	ldr	r3, [r3, #0]
 800a376:	689b      	ldr	r3, [r3, #8]
 800a378:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a382:	2b22      	cmp	r3, #34	; 0x22
 800a384:	f040 8182 	bne.w	800a68c <UART_RxISR_8BIT_FIFOEN+0x340>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800a38e:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800a392:	e125      	b.n	800a5e0 <UART_RxISR_8BIT_FIFOEN+0x294>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	681b      	ldr	r3, [r3, #0]
 800a398:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a39a:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800a39e:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 800a3a2:	b2d9      	uxtb	r1, r3
 800a3a4:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 800a3a8:	b2da      	uxtb	r2, r3
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a3ae:	400a      	ands	r2, r1
 800a3b0:	b2d2      	uxtb	r2, r2
 800a3b2:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a3b8:	1c5a      	adds	r2, r3, #1
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800a3c4:	b29b      	uxth	r3, r3
 800a3c6:	3b01      	subs	r3, #1
 800a3c8:	b29a      	uxth	r2, r3
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	681b      	ldr	r3, [r3, #0]
 800a3d4:	69db      	ldr	r3, [r3, #28]
 800a3d6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800a3da:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800a3de:	f003 0307 	and.w	r3, r3, #7
 800a3e2:	2b00      	cmp	r3, #0
 800a3e4:	d053      	beq.n	800a48e <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800a3e6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800a3ea:	f003 0301 	and.w	r3, r3, #1
 800a3ee:	2b00      	cmp	r3, #0
 800a3f0:	d011      	beq.n	800a416 <UART_RxISR_8BIT_FIFOEN+0xca>
 800a3f2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800a3f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a3fa:	2b00      	cmp	r3, #0
 800a3fc:	d00b      	beq.n	800a416 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	681b      	ldr	r3, [r3, #0]
 800a402:	2201      	movs	r2, #1
 800a404:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a40c:	f043 0201 	orr.w	r2, r3, #1
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a416:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800a41a:	f003 0302 	and.w	r3, r3, #2
 800a41e:	2b00      	cmp	r3, #0
 800a420:	d011      	beq.n	800a446 <UART_RxISR_8BIT_FIFOEN+0xfa>
 800a422:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800a426:	f003 0301 	and.w	r3, r3, #1
 800a42a:	2b00      	cmp	r3, #0
 800a42c:	d00b      	beq.n	800a446 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	681b      	ldr	r3, [r3, #0]
 800a432:	2202      	movs	r2, #2
 800a434:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a43c:	f043 0204 	orr.w	r2, r3, #4
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a446:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800a44a:	f003 0304 	and.w	r3, r3, #4
 800a44e:	2b00      	cmp	r3, #0
 800a450:	d011      	beq.n	800a476 <UART_RxISR_8BIT_FIFOEN+0x12a>
 800a452:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800a456:	f003 0301 	and.w	r3, r3, #1
 800a45a:	2b00      	cmp	r3, #0
 800a45c:	d00b      	beq.n	800a476 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	681b      	ldr	r3, [r3, #0]
 800a462:	2204      	movs	r2, #4
 800a464:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a46c:	f043 0202 	orr.w	r2, r3, #2
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a476:	687b      	ldr	r3, [r7, #4]
 800a478:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a47c:	2b00      	cmp	r3, #0
 800a47e:	d006      	beq.n	800a48e <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800a480:	6878      	ldr	r0, [r7, #4]
 800a482:	f7fe ff17 	bl	80092b4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	2200      	movs	r2, #0
 800a48a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800a494:	b29b      	uxth	r3, r3
 800a496:	2b00      	cmp	r3, #0
 800a498:	f040 80a2 	bne.w	800a5e0 <UART_RxISR_8BIT_FIFOEN+0x294>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	681b      	ldr	r3, [r3, #0]
 800a4a0:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a4a2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a4a4:	e853 3f00 	ldrex	r3, [r3]
 800a4a8:	66fb      	str	r3, [r7, #108]	; 0x6c
   return(result);
 800a4aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a4ac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a4b0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	681b      	ldr	r3, [r3, #0]
 800a4b8:	461a      	mov	r2, r3
 800a4ba:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800a4be:	67fb      	str	r3, [r7, #124]	; 0x7c
 800a4c0:	67ba      	str	r2, [r7, #120]	; 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a4c2:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 800a4c4:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800a4c6:	e841 2300 	strex	r3, r2, [r1]
 800a4ca:	677b      	str	r3, [r7, #116]	; 0x74
   return(result);
 800a4cc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a4ce:	2b00      	cmp	r3, #0
 800a4d0:	d1e4      	bne.n	800a49c <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	681b      	ldr	r3, [r3, #0]
 800a4d6:	3308      	adds	r3, #8
 800a4d8:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a4da:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a4dc:	e853 3f00 	ldrex	r3, [r3]
 800a4e0:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 800a4e2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a4e4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a4e8:	f023 0301 	bic.w	r3, r3, #1
 800a4ec:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	681b      	ldr	r3, [r3, #0]
 800a4f4:	3308      	adds	r3, #8
 800a4f6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800a4fa:	66ba      	str	r2, [r7, #104]	; 0x68
 800a4fc:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a4fe:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800a500:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800a502:	e841 2300 	strex	r3, r2, [r1]
 800a506:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800a508:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a50a:	2b00      	cmp	r3, #0
 800a50c:	d1e1      	bne.n	800a4d2 <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	2220      	movs	r2, #32
 800a512:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	2200      	movs	r2, #0
 800a51a:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	2200      	movs	r2, #0
 800a520:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	681b      	ldr	r3, [r3, #0]
 800a526:	4a5f      	ldr	r2, [pc, #380]	; (800a6a4 <UART_RxISR_8BIT_FIFOEN+0x358>)
 800a528:	4293      	cmp	r3, r2
 800a52a:	d021      	beq.n	800a570 <UART_RxISR_8BIT_FIFOEN+0x224>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	681b      	ldr	r3, [r3, #0]
 800a530:	685b      	ldr	r3, [r3, #4]
 800a532:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a536:	2b00      	cmp	r3, #0
 800a538:	d01a      	beq.n	800a570 <UART_RxISR_8BIT_FIFOEN+0x224>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	681b      	ldr	r3, [r3, #0]
 800a53e:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a540:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a542:	e853 3f00 	ldrex	r3, [r3]
 800a546:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800a548:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a54a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800a54e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	681b      	ldr	r3, [r3, #0]
 800a556:	461a      	mov	r2, r3
 800a558:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800a55c:	657b      	str	r3, [r7, #84]	; 0x54
 800a55e:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a560:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800a562:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800a564:	e841 2300 	strex	r3, r2, [r1]
 800a568:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800a56a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a56c:	2b00      	cmp	r3, #0
 800a56e:	d1e4      	bne.n	800a53a <UART_RxISR_8BIT_FIFOEN+0x1ee>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a574:	2b01      	cmp	r3, #1
 800a576:	d130      	bne.n	800a5da <UART_RxISR_8BIT_FIFOEN+0x28e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	2200      	movs	r2, #0
 800a57c:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	681b      	ldr	r3, [r3, #0]
 800a582:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a584:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a586:	e853 3f00 	ldrex	r3, [r3]
 800a58a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800a58c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a58e:	f023 0310 	bic.w	r3, r3, #16
 800a592:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	681b      	ldr	r3, [r3, #0]
 800a59a:	461a      	mov	r2, r3
 800a59c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a5a0:	643b      	str	r3, [r7, #64]	; 0x40
 800a5a2:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a5a4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800a5a6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a5a8:	e841 2300 	strex	r3, r2, [r1]
 800a5ac:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a5ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a5b0:	2b00      	cmp	r3, #0
 800a5b2:	d1e4      	bne.n	800a57e <UART_RxISR_8BIT_FIFOEN+0x232>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	681b      	ldr	r3, [r3, #0]
 800a5b8:	69db      	ldr	r3, [r3, #28]
 800a5ba:	f003 0310 	and.w	r3, r3, #16
 800a5be:	2b10      	cmp	r3, #16
 800a5c0:	d103      	bne.n	800a5ca <UART_RxISR_8BIT_FIFOEN+0x27e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	681b      	ldr	r3, [r3, #0]
 800a5c6:	2210      	movs	r2, #16
 800a5c8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800a5d0:	4619      	mov	r1, r3
 800a5d2:	6878      	ldr	r0, [r7, #4]
 800a5d4:	f7fe fe78 	bl	80092c8 <HAL_UARTEx_RxEventCallback>
 800a5d8:	e002      	b.n	800a5e0 <UART_RxISR_8BIT_FIFOEN+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800a5da:	6878      	ldr	r0, [r7, #4]
 800a5dc:	f7f6 f816 	bl	800060c <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800a5e0:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 800a5e4:	2b00      	cmp	r3, #0
 800a5e6:	d006      	beq.n	800a5f6 <UART_RxISR_8BIT_FIFOEN+0x2aa>
 800a5e8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800a5ec:	f003 0320 	and.w	r3, r3, #32
 800a5f0:	2b00      	cmp	r3, #0
 800a5f2:	f47f aecf 	bne.w	800a394 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800a5fc:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800a600:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800a604:	2b00      	cmp	r3, #0
 800a606:	d049      	beq.n	800a69c <UART_RxISR_8BIT_FIFOEN+0x350>
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800a60e:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 800a612:	429a      	cmp	r2, r3
 800a614:	d242      	bcs.n	800a69c <UART_RxISR_8BIT_FIFOEN+0x350>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	681b      	ldr	r3, [r3, #0]
 800a61a:	3308      	adds	r3, #8
 800a61c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a61e:	6a3b      	ldr	r3, [r7, #32]
 800a620:	e853 3f00 	ldrex	r3, [r3]
 800a624:	61fb      	str	r3, [r7, #28]
   return(result);
 800a626:	69fb      	ldr	r3, [r7, #28]
 800a628:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a62c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	681b      	ldr	r3, [r3, #0]
 800a634:	3308      	adds	r3, #8
 800a636:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800a63a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800a63c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a63e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a640:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a642:	e841 2300 	strex	r3, r2, [r1]
 800a646:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a648:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a64a:	2b00      	cmp	r3, #0
 800a64c:	d1e3      	bne.n	800a616 <UART_RxISR_8BIT_FIFOEN+0x2ca>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	4a15      	ldr	r2, [pc, #84]	; (800a6a8 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 800a652:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	681b      	ldr	r3, [r3, #0]
 800a658:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a65a:	68fb      	ldr	r3, [r7, #12]
 800a65c:	e853 3f00 	ldrex	r3, [r3]
 800a660:	60bb      	str	r3, [r7, #8]
   return(result);
 800a662:	68bb      	ldr	r3, [r7, #8]
 800a664:	f043 0320 	orr.w	r3, r3, #32
 800a668:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	681b      	ldr	r3, [r3, #0]
 800a670:	461a      	mov	r2, r3
 800a672:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800a676:	61bb      	str	r3, [r7, #24]
 800a678:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a67a:	6979      	ldr	r1, [r7, #20]
 800a67c:	69ba      	ldr	r2, [r7, #24]
 800a67e:	e841 2300 	strex	r3, r2, [r1]
 800a682:	613b      	str	r3, [r7, #16]
   return(result);
 800a684:	693b      	ldr	r3, [r7, #16]
 800a686:	2b00      	cmp	r3, #0
 800a688:	d1e4      	bne.n	800a654 <UART_RxISR_8BIT_FIFOEN+0x308>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800a68a:	e007      	b.n	800a69c <UART_RxISR_8BIT_FIFOEN+0x350>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	681b      	ldr	r3, [r3, #0]
 800a690:	699a      	ldr	r2, [r3, #24]
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	681b      	ldr	r3, [r3, #0]
 800a696:	f042 0208 	orr.w	r2, r2, #8
 800a69a:	619a      	str	r2, [r3, #24]
}
 800a69c:	bf00      	nop
 800a69e:	37b0      	adds	r7, #176	; 0xb0
 800a6a0:	46bd      	mov	sp, r7
 800a6a2:	bd80      	pop	{r7, pc}
 800a6a4:	40008000 	.word	0x40008000
 800a6a8:	08009fdd 	.word	0x08009fdd

0800a6ac <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800a6ac:	b580      	push	{r7, lr}
 800a6ae:	b0ae      	sub	sp, #184	; 0xb8
 800a6b0:	af00      	add	r7, sp, #0
 800a6b2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800a6ba:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	681b      	ldr	r3, [r3, #0]
 800a6c2:	69db      	ldr	r3, [r3, #28]
 800a6c4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	681b      	ldr	r3, [r3, #0]
 800a6cc:	681b      	ldr	r3, [r3, #0]
 800a6ce:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	681b      	ldr	r3, [r3, #0]
 800a6d6:	689b      	ldr	r3, [r3, #8]
 800a6d8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a6e2:	2b22      	cmp	r3, #34	; 0x22
 800a6e4:	f040 8186 	bne.w	800a9f4 <UART_RxISR_16BIT_FIFOEN+0x348>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800a6ee:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800a6f2:	e129      	b.n	800a948 <UART_RxISR_16BIT_FIFOEN+0x29c>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	681b      	ldr	r3, [r3, #0]
 800a6f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6fa:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a702:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 800a706:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 800a70a:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 800a70e:	4013      	ands	r3, r2
 800a710:	b29a      	uxth	r2, r3
 800a712:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800a716:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a71c:	1c9a      	adds	r2, r3, #2
 800a71e:	687b      	ldr	r3, [r7, #4]
 800a720:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800a728:	b29b      	uxth	r3, r3
 800a72a:	3b01      	subs	r3, #1
 800a72c:	b29a      	uxth	r2, r3
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	681b      	ldr	r3, [r3, #0]
 800a738:	69db      	ldr	r3, [r3, #28]
 800a73a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800a73e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800a742:	f003 0307 	and.w	r3, r3, #7
 800a746:	2b00      	cmp	r3, #0
 800a748:	d053      	beq.n	800a7f2 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800a74a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800a74e:	f003 0301 	and.w	r3, r3, #1
 800a752:	2b00      	cmp	r3, #0
 800a754:	d011      	beq.n	800a77a <UART_RxISR_16BIT_FIFOEN+0xce>
 800a756:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800a75a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a75e:	2b00      	cmp	r3, #0
 800a760:	d00b      	beq.n	800a77a <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	681b      	ldr	r3, [r3, #0]
 800a766:	2201      	movs	r2, #1
 800a768:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a770:	f043 0201 	orr.w	r2, r3, #1
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a77a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800a77e:	f003 0302 	and.w	r3, r3, #2
 800a782:	2b00      	cmp	r3, #0
 800a784:	d011      	beq.n	800a7aa <UART_RxISR_16BIT_FIFOEN+0xfe>
 800a786:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800a78a:	f003 0301 	and.w	r3, r3, #1
 800a78e:	2b00      	cmp	r3, #0
 800a790:	d00b      	beq.n	800a7aa <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	681b      	ldr	r3, [r3, #0]
 800a796:	2202      	movs	r2, #2
 800a798:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a7a0:	f043 0204 	orr.w	r2, r3, #4
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a7aa:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800a7ae:	f003 0304 	and.w	r3, r3, #4
 800a7b2:	2b00      	cmp	r3, #0
 800a7b4:	d011      	beq.n	800a7da <UART_RxISR_16BIT_FIFOEN+0x12e>
 800a7b6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800a7ba:	f003 0301 	and.w	r3, r3, #1
 800a7be:	2b00      	cmp	r3, #0
 800a7c0:	d00b      	beq.n	800a7da <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	681b      	ldr	r3, [r3, #0]
 800a7c6:	2204      	movs	r2, #4
 800a7c8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a7d0:	f043 0202 	orr.w	r2, r3, #2
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a7e0:	2b00      	cmp	r3, #0
 800a7e2:	d006      	beq.n	800a7f2 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800a7e4:	6878      	ldr	r0, [r7, #4]
 800a7e6:	f7fe fd65 	bl	80092b4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	2200      	movs	r2, #0
 800a7ee:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800a7f8:	b29b      	uxth	r3, r3
 800a7fa:	2b00      	cmp	r3, #0
 800a7fc:	f040 80a4 	bne.w	800a948 <UART_RxISR_16BIT_FIFOEN+0x29c>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	681b      	ldr	r3, [r3, #0]
 800a804:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a806:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a808:	e853 3f00 	ldrex	r3, [r3]
 800a80c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800a80e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a810:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a814:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	681b      	ldr	r3, [r3, #0]
 800a81c:	461a      	mov	r2, r3
 800a81e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800a822:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800a826:	67fa      	str	r2, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a828:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800a82a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800a82e:	e841 2300 	strex	r3, r2, [r1]
 800a832:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800a834:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a836:	2b00      	cmp	r3, #0
 800a838:	d1e2      	bne.n	800a800 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	681b      	ldr	r3, [r3, #0]
 800a83e:	3308      	adds	r3, #8
 800a840:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a842:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a844:	e853 3f00 	ldrex	r3, [r3]
 800a848:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800a84a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a84c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a850:	f023 0301 	bic.w	r3, r3, #1
 800a854:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	681b      	ldr	r3, [r3, #0]
 800a85c:	3308      	adds	r3, #8
 800a85e:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800a862:	66fa      	str	r2, [r7, #108]	; 0x6c
 800a864:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a866:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800a868:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800a86a:	e841 2300 	strex	r3, r2, [r1]
 800a86e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800a870:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a872:	2b00      	cmp	r3, #0
 800a874:	d1e1      	bne.n	800a83a <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	2220      	movs	r2, #32
 800a87a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	2200      	movs	r2, #0
 800a882:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	2200      	movs	r2, #0
 800a888:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	681b      	ldr	r3, [r3, #0]
 800a88e:	4a5f      	ldr	r2, [pc, #380]	; (800aa0c <UART_RxISR_16BIT_FIFOEN+0x360>)
 800a890:	4293      	cmp	r3, r2
 800a892:	d021      	beq.n	800a8d8 <UART_RxISR_16BIT_FIFOEN+0x22c>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	681b      	ldr	r3, [r3, #0]
 800a898:	685b      	ldr	r3, [r3, #4]
 800a89a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a89e:	2b00      	cmp	r3, #0
 800a8a0:	d01a      	beq.n	800a8d8 <UART_RxISR_16BIT_FIFOEN+0x22c>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	681b      	ldr	r3, [r3, #0]
 800a8a6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a8a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a8aa:	e853 3f00 	ldrex	r3, [r3]
 800a8ae:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800a8b0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a8b2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800a8b6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	681b      	ldr	r3, [r3, #0]
 800a8be:	461a      	mov	r2, r3
 800a8c0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800a8c4:	65bb      	str	r3, [r7, #88]	; 0x58
 800a8c6:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a8c8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800a8ca:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a8cc:	e841 2300 	strex	r3, r2, [r1]
 800a8d0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800a8d2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a8d4:	2b00      	cmp	r3, #0
 800a8d6:	d1e4      	bne.n	800a8a2 <UART_RxISR_16BIT_FIFOEN+0x1f6>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a8dc:	2b01      	cmp	r3, #1
 800a8de:	d130      	bne.n	800a942 <UART_RxISR_16BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	2200      	movs	r2, #0
 800a8e4:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	681b      	ldr	r3, [r3, #0]
 800a8ea:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a8ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a8ee:	e853 3f00 	ldrex	r3, [r3]
 800a8f2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800a8f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a8f6:	f023 0310 	bic.w	r3, r3, #16
 800a8fa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	681b      	ldr	r3, [r3, #0]
 800a902:	461a      	mov	r2, r3
 800a904:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800a908:	647b      	str	r3, [r7, #68]	; 0x44
 800a90a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a90c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800a90e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a910:	e841 2300 	strex	r3, r2, [r1]
 800a914:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800a916:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a918:	2b00      	cmp	r3, #0
 800a91a:	d1e4      	bne.n	800a8e6 <UART_RxISR_16BIT_FIFOEN+0x23a>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	681b      	ldr	r3, [r3, #0]
 800a920:	69db      	ldr	r3, [r3, #28]
 800a922:	f003 0310 	and.w	r3, r3, #16
 800a926:	2b10      	cmp	r3, #16
 800a928:	d103      	bne.n	800a932 <UART_RxISR_16BIT_FIFOEN+0x286>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	681b      	ldr	r3, [r3, #0]
 800a92e:	2210      	movs	r2, #16
 800a930:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800a938:	4619      	mov	r1, r3
 800a93a:	6878      	ldr	r0, [r7, #4]
 800a93c:	f7fe fcc4 	bl	80092c8 <HAL_UARTEx_RxEventCallback>
 800a940:	e002      	b.n	800a948 <UART_RxISR_16BIT_FIFOEN+0x29c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800a942:	6878      	ldr	r0, [r7, #4]
 800a944:	f7f5 fe62 	bl	800060c <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800a948:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 800a94c:	2b00      	cmp	r3, #0
 800a94e:	d006      	beq.n	800a95e <UART_RxISR_16BIT_FIFOEN+0x2b2>
 800a950:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800a954:	f003 0320 	and.w	r3, r3, #32
 800a958:	2b00      	cmp	r3, #0
 800a95a:	f47f aecb 	bne.w	800a6f4 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800a95e:	687b      	ldr	r3, [r7, #4]
 800a960:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800a964:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800a968:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 800a96c:	2b00      	cmp	r3, #0
 800a96e:	d049      	beq.n	800aa04 <UART_RxISR_16BIT_FIFOEN+0x358>
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800a976:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 800a97a:	429a      	cmp	r2, r3
 800a97c:	d242      	bcs.n	800aa04 <UART_RxISR_16BIT_FIFOEN+0x358>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	681b      	ldr	r3, [r3, #0]
 800a982:	3308      	adds	r3, #8
 800a984:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a986:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a988:	e853 3f00 	ldrex	r3, [r3]
 800a98c:	623b      	str	r3, [r7, #32]
   return(result);
 800a98e:	6a3b      	ldr	r3, [r7, #32]
 800a990:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a994:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	681b      	ldr	r3, [r3, #0]
 800a99c:	3308      	adds	r3, #8
 800a99e:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800a9a2:	633a      	str	r2, [r7, #48]	; 0x30
 800a9a4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a9a6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a9a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a9aa:	e841 2300 	strex	r3, r2, [r1]
 800a9ae:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a9b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9b2:	2b00      	cmp	r3, #0
 800a9b4:	d1e3      	bne.n	800a97e <UART_RxISR_16BIT_FIFOEN+0x2d2>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	4a15      	ldr	r2, [pc, #84]	; (800aa10 <UART_RxISR_16BIT_FIFOEN+0x364>)
 800a9ba:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	681b      	ldr	r3, [r3, #0]
 800a9c0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a9c2:	693b      	ldr	r3, [r7, #16]
 800a9c4:	e853 3f00 	ldrex	r3, [r3]
 800a9c8:	60fb      	str	r3, [r7, #12]
   return(result);
 800a9ca:	68fb      	ldr	r3, [r7, #12]
 800a9cc:	f043 0320 	orr.w	r3, r3, #32
 800a9d0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	681b      	ldr	r3, [r3, #0]
 800a9d8:	461a      	mov	r2, r3
 800a9da:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800a9de:	61fb      	str	r3, [r7, #28]
 800a9e0:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a9e2:	69b9      	ldr	r1, [r7, #24]
 800a9e4:	69fa      	ldr	r2, [r7, #28]
 800a9e6:	e841 2300 	strex	r3, r2, [r1]
 800a9ea:	617b      	str	r3, [r7, #20]
   return(result);
 800a9ec:	697b      	ldr	r3, [r7, #20]
 800a9ee:	2b00      	cmp	r3, #0
 800a9f0:	d1e4      	bne.n	800a9bc <UART_RxISR_16BIT_FIFOEN+0x310>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800a9f2:	e007      	b.n	800aa04 <UART_RxISR_16BIT_FIFOEN+0x358>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	681b      	ldr	r3, [r3, #0]
 800a9f8:	699a      	ldr	r2, [r3, #24]
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	681b      	ldr	r3, [r3, #0]
 800a9fe:	f042 0208 	orr.w	r2, r2, #8
 800aa02:	619a      	str	r2, [r3, #24]
}
 800aa04:	bf00      	nop
 800aa06:	37b8      	adds	r7, #184	; 0xb8
 800aa08:	46bd      	mov	sp, r7
 800aa0a:	bd80      	pop	{r7, pc}
 800aa0c:	40008000 	.word	0x40008000
 800aa10:	0800a195 	.word	0x0800a195

0800aa14 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800aa14:	b480      	push	{r7}
 800aa16:	b083      	sub	sp, #12
 800aa18:	af00      	add	r7, sp, #0
 800aa1a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800aa1c:	bf00      	nop
 800aa1e:	370c      	adds	r7, #12
 800aa20:	46bd      	mov	sp, r7
 800aa22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa26:	4770      	bx	lr

0800aa28 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800aa28:	b480      	push	{r7}
 800aa2a:	b083      	sub	sp, #12
 800aa2c:	af00      	add	r7, sp, #0
 800aa2e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800aa30:	bf00      	nop
 800aa32:	370c      	adds	r7, #12
 800aa34:	46bd      	mov	sp, r7
 800aa36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa3a:	4770      	bx	lr

0800aa3c <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800aa3c:	b480      	push	{r7}
 800aa3e:	b083      	sub	sp, #12
 800aa40:	af00      	add	r7, sp, #0
 800aa42:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800aa44:	bf00      	nop
 800aa46:	370c      	adds	r7, #12
 800aa48:	46bd      	mov	sp, r7
 800aa4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa4e:	4770      	bx	lr

0800aa50 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800aa50:	b480      	push	{r7}
 800aa52:	b085      	sub	sp, #20
 800aa54:	af00      	add	r7, sp, #0
 800aa56:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800aa5e:	2b01      	cmp	r3, #1
 800aa60:	d101      	bne.n	800aa66 <HAL_UARTEx_DisableFifoMode+0x16>
 800aa62:	2302      	movs	r3, #2
 800aa64:	e027      	b.n	800aab6 <HAL_UARTEx_DisableFifoMode+0x66>
 800aa66:	687b      	ldr	r3, [r7, #4]
 800aa68:	2201      	movs	r2, #1
 800aa6a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800aa6e:	687b      	ldr	r3, [r7, #4]
 800aa70:	2224      	movs	r2, #36	; 0x24
 800aa72:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800aa76:	687b      	ldr	r3, [r7, #4]
 800aa78:	681b      	ldr	r3, [r3, #0]
 800aa7a:	681b      	ldr	r3, [r3, #0]
 800aa7c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800aa7e:	687b      	ldr	r3, [r7, #4]
 800aa80:	681b      	ldr	r3, [r3, #0]
 800aa82:	681a      	ldr	r2, [r3, #0]
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	681b      	ldr	r3, [r3, #0]
 800aa88:	f022 0201 	bic.w	r2, r2, #1
 800aa8c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800aa8e:	68fb      	ldr	r3, [r7, #12]
 800aa90:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800aa94:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	2200      	movs	r2, #0
 800aa9a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	681b      	ldr	r3, [r3, #0]
 800aaa0:	68fa      	ldr	r2, [r7, #12]
 800aaa2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	2220      	movs	r2, #32
 800aaa8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	2200      	movs	r2, #0
 800aab0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800aab4:	2300      	movs	r3, #0
}
 800aab6:	4618      	mov	r0, r3
 800aab8:	3714      	adds	r7, #20
 800aaba:	46bd      	mov	sp, r7
 800aabc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aac0:	4770      	bx	lr

0800aac2 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800aac2:	b580      	push	{r7, lr}
 800aac4:	b084      	sub	sp, #16
 800aac6:	af00      	add	r7, sp, #0
 800aac8:	6078      	str	r0, [r7, #4]
 800aaca:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800aad2:	2b01      	cmp	r3, #1
 800aad4:	d101      	bne.n	800aada <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800aad6:	2302      	movs	r3, #2
 800aad8:	e02d      	b.n	800ab36 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	2201      	movs	r2, #1
 800aade:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800aae2:	687b      	ldr	r3, [r7, #4]
 800aae4:	2224      	movs	r2, #36	; 0x24
 800aae6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	681b      	ldr	r3, [r3, #0]
 800aaee:	681b      	ldr	r3, [r3, #0]
 800aaf0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800aaf2:	687b      	ldr	r3, [r7, #4]
 800aaf4:	681b      	ldr	r3, [r3, #0]
 800aaf6:	681a      	ldr	r2, [r3, #0]
 800aaf8:	687b      	ldr	r3, [r7, #4]
 800aafa:	681b      	ldr	r3, [r3, #0]
 800aafc:	f022 0201 	bic.w	r2, r2, #1
 800ab00:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	681b      	ldr	r3, [r3, #0]
 800ab06:	689b      	ldr	r3, [r3, #8]
 800ab08:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	681b      	ldr	r3, [r3, #0]
 800ab10:	683a      	ldr	r2, [r7, #0]
 800ab12:	430a      	orrs	r2, r1
 800ab14:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800ab16:	6878      	ldr	r0, [r7, #4]
 800ab18:	f000 f850 	bl	800abbc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	681b      	ldr	r3, [r3, #0]
 800ab20:	68fa      	ldr	r2, [r7, #12]
 800ab22:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	2220      	movs	r2, #32
 800ab28:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	2200      	movs	r2, #0
 800ab30:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800ab34:	2300      	movs	r3, #0
}
 800ab36:	4618      	mov	r0, r3
 800ab38:	3710      	adds	r7, #16
 800ab3a:	46bd      	mov	sp, r7
 800ab3c:	bd80      	pop	{r7, pc}

0800ab3e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800ab3e:	b580      	push	{r7, lr}
 800ab40:	b084      	sub	sp, #16
 800ab42:	af00      	add	r7, sp, #0
 800ab44:	6078      	str	r0, [r7, #4]
 800ab46:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800ab4e:	2b01      	cmp	r3, #1
 800ab50:	d101      	bne.n	800ab56 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800ab52:	2302      	movs	r3, #2
 800ab54:	e02d      	b.n	800abb2 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800ab56:	687b      	ldr	r3, [r7, #4]
 800ab58:	2201      	movs	r2, #1
 800ab5a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800ab5e:	687b      	ldr	r3, [r7, #4]
 800ab60:	2224      	movs	r2, #36	; 0x24
 800ab62:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ab66:	687b      	ldr	r3, [r7, #4]
 800ab68:	681b      	ldr	r3, [r3, #0]
 800ab6a:	681b      	ldr	r3, [r3, #0]
 800ab6c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ab6e:	687b      	ldr	r3, [r7, #4]
 800ab70:	681b      	ldr	r3, [r3, #0]
 800ab72:	681a      	ldr	r2, [r3, #0]
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	681b      	ldr	r3, [r3, #0]
 800ab78:	f022 0201 	bic.w	r2, r2, #1
 800ab7c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800ab7e:	687b      	ldr	r3, [r7, #4]
 800ab80:	681b      	ldr	r3, [r3, #0]
 800ab82:	689b      	ldr	r3, [r3, #8]
 800ab84:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	681b      	ldr	r3, [r3, #0]
 800ab8c:	683a      	ldr	r2, [r7, #0]
 800ab8e:	430a      	orrs	r2, r1
 800ab90:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800ab92:	6878      	ldr	r0, [r7, #4]
 800ab94:	f000 f812 	bl	800abbc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	681b      	ldr	r3, [r3, #0]
 800ab9c:	68fa      	ldr	r2, [r7, #12]
 800ab9e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800aba0:	687b      	ldr	r3, [r7, #4]
 800aba2:	2220      	movs	r2, #32
 800aba4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	2200      	movs	r2, #0
 800abac:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800abb0:	2300      	movs	r3, #0
}
 800abb2:	4618      	mov	r0, r3
 800abb4:	3710      	adds	r7, #16
 800abb6:	46bd      	mov	sp, r7
 800abb8:	bd80      	pop	{r7, pc}
	...

0800abbc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800abbc:	b480      	push	{r7}
 800abbe:	b085      	sub	sp, #20
 800abc0:	af00      	add	r7, sp, #0
 800abc2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800abc4:	687b      	ldr	r3, [r7, #4]
 800abc6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800abc8:	2b00      	cmp	r3, #0
 800abca:	d108      	bne.n	800abde <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800abcc:	687b      	ldr	r3, [r7, #4]
 800abce:	2201      	movs	r2, #1
 800abd0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	2201      	movs	r2, #1
 800abd8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800abdc:	e031      	b.n	800ac42 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800abde:	2308      	movs	r3, #8
 800abe0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800abe2:	2308      	movs	r3, #8
 800abe4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800abe6:	687b      	ldr	r3, [r7, #4]
 800abe8:	681b      	ldr	r3, [r3, #0]
 800abea:	689b      	ldr	r3, [r3, #8]
 800abec:	0e5b      	lsrs	r3, r3, #25
 800abee:	b2db      	uxtb	r3, r3
 800abf0:	f003 0307 	and.w	r3, r3, #7
 800abf4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800abf6:	687b      	ldr	r3, [r7, #4]
 800abf8:	681b      	ldr	r3, [r3, #0]
 800abfa:	689b      	ldr	r3, [r3, #8]
 800abfc:	0f5b      	lsrs	r3, r3, #29
 800abfe:	b2db      	uxtb	r3, r3
 800ac00:	f003 0307 	and.w	r3, r3, #7
 800ac04:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800ac06:	7bbb      	ldrb	r3, [r7, #14]
 800ac08:	7b3a      	ldrb	r2, [r7, #12]
 800ac0a:	4911      	ldr	r1, [pc, #68]	; (800ac50 <UARTEx_SetNbDataToProcess+0x94>)
 800ac0c:	5c8a      	ldrb	r2, [r1, r2]
 800ac0e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800ac12:	7b3a      	ldrb	r2, [r7, #12]
 800ac14:	490f      	ldr	r1, [pc, #60]	; (800ac54 <UARTEx_SetNbDataToProcess+0x98>)
 800ac16:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800ac18:	fb93 f3f2 	sdiv	r3, r3, r2
 800ac1c:	b29a      	uxth	r2, r3
 800ac1e:	687b      	ldr	r3, [r7, #4]
 800ac20:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800ac24:	7bfb      	ldrb	r3, [r7, #15]
 800ac26:	7b7a      	ldrb	r2, [r7, #13]
 800ac28:	4909      	ldr	r1, [pc, #36]	; (800ac50 <UARTEx_SetNbDataToProcess+0x94>)
 800ac2a:	5c8a      	ldrb	r2, [r1, r2]
 800ac2c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800ac30:	7b7a      	ldrb	r2, [r7, #13]
 800ac32:	4908      	ldr	r1, [pc, #32]	; (800ac54 <UARTEx_SetNbDataToProcess+0x98>)
 800ac34:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800ac36:	fb93 f3f2 	sdiv	r3, r3, r2
 800ac3a:	b29a      	uxth	r2, r3
 800ac3c:	687b      	ldr	r3, [r7, #4]
 800ac3e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800ac42:	bf00      	nop
 800ac44:	3714      	adds	r7, #20
 800ac46:	46bd      	mov	sp, r7
 800ac48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac4c:	4770      	bx	lr
 800ac4e:	bf00      	nop
 800ac50:	0800e4c0 	.word	0x0800e4c0
 800ac54:	0800e4c8 	.word	0x0800e4c8

0800ac58 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 800ac58:	b480      	push	{r7}
 800ac5a:	b08b      	sub	sp, #44	; 0x2c
 800ac5c:	af00      	add	r7, sp, #0
 800ac5e:	60f8      	str	r0, [r7, #12]
 800ac60:	60b9      	str	r1, [r7, #8]
 800ac62:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 800ac64:	68fb      	ldr	r3, [r7, #12]
 800ac66:	681a      	ldr	r2, [r3, #0]
 800ac68:	68bb      	ldr	r3, [r7, #8]
 800ac6a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800ac6c:	697b      	ldr	r3, [r7, #20]
 800ac6e:	fa93 f3a3 	rbit	r3, r3
 800ac72:	613b      	str	r3, [r7, #16]
  return result;
 800ac74:	693b      	ldr	r3, [r7, #16]
 800ac76:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800ac78:	69bb      	ldr	r3, [r7, #24]
 800ac7a:	2b00      	cmp	r3, #0
 800ac7c:	d101      	bne.n	800ac82 <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 800ac7e:	2320      	movs	r3, #32
 800ac80:	e003      	b.n	800ac8a <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 800ac82:	69bb      	ldr	r3, [r7, #24]
 800ac84:	fab3 f383 	clz	r3, r3
 800ac88:	b2db      	uxtb	r3, r3
 800ac8a:	005b      	lsls	r3, r3, #1
 800ac8c:	2103      	movs	r1, #3
 800ac8e:	fa01 f303 	lsl.w	r3, r1, r3
 800ac92:	43db      	mvns	r3, r3
 800ac94:	401a      	ands	r2, r3
 800ac96:	68bb      	ldr	r3, [r7, #8]
 800ac98:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800ac9a:	6a3b      	ldr	r3, [r7, #32]
 800ac9c:	fa93 f3a3 	rbit	r3, r3
 800aca0:	61fb      	str	r3, [r7, #28]
  return result;
 800aca2:	69fb      	ldr	r3, [r7, #28]
 800aca4:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800aca6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aca8:	2b00      	cmp	r3, #0
 800acaa:	d101      	bne.n	800acb0 <LL_GPIO_SetPinMode+0x58>
    return 32U;
 800acac:	2320      	movs	r3, #32
 800acae:	e003      	b.n	800acb8 <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 800acb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800acb2:	fab3 f383 	clz	r3, r3
 800acb6:	b2db      	uxtb	r3, r3
 800acb8:	005b      	lsls	r3, r3, #1
 800acba:	6879      	ldr	r1, [r7, #4]
 800acbc:	fa01 f303 	lsl.w	r3, r1, r3
 800acc0:	431a      	orrs	r2, r3
 800acc2:	68fb      	ldr	r3, [r7, #12]
 800acc4:	601a      	str	r2, [r3, #0]
}
 800acc6:	bf00      	nop
 800acc8:	372c      	adds	r7, #44	; 0x2c
 800acca:	46bd      	mov	sp, r7
 800accc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acd0:	4770      	bx	lr

0800acd2 <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 800acd2:	b480      	push	{r7}
 800acd4:	b085      	sub	sp, #20
 800acd6:	af00      	add	r7, sp, #0
 800acd8:	60f8      	str	r0, [r7, #12]
 800acda:	60b9      	str	r1, [r7, #8]
 800acdc:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 800acde:	68fb      	ldr	r3, [r7, #12]
 800ace0:	685a      	ldr	r2, [r3, #4]
 800ace2:	68bb      	ldr	r3, [r7, #8]
 800ace4:	43db      	mvns	r3, r3
 800ace6:	401a      	ands	r2, r3
 800ace8:	68bb      	ldr	r3, [r7, #8]
 800acea:	6879      	ldr	r1, [r7, #4]
 800acec:	fb01 f303 	mul.w	r3, r1, r3
 800acf0:	431a      	orrs	r2, r3
 800acf2:	68fb      	ldr	r3, [r7, #12]
 800acf4:	605a      	str	r2, [r3, #4]
}
 800acf6:	bf00      	nop
 800acf8:	3714      	adds	r7, #20
 800acfa:	46bd      	mov	sp, r7
 800acfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad00:	4770      	bx	lr

0800ad02 <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  *         @arg @ref LL_GPIO_SPEED_FREQ_VERY_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 800ad02:	b480      	push	{r7}
 800ad04:	b08b      	sub	sp, #44	; 0x2c
 800ad06:	af00      	add	r7, sp, #0
 800ad08:	60f8      	str	r0, [r7, #12]
 800ad0a:	60b9      	str	r1, [r7, #8]
 800ad0c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 800ad0e:	68fb      	ldr	r3, [r7, #12]
 800ad10:	689a      	ldr	r2, [r3, #8]
 800ad12:	68bb      	ldr	r3, [r7, #8]
 800ad14:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800ad16:	697b      	ldr	r3, [r7, #20]
 800ad18:	fa93 f3a3 	rbit	r3, r3
 800ad1c:	613b      	str	r3, [r7, #16]
  return result;
 800ad1e:	693b      	ldr	r3, [r7, #16]
 800ad20:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800ad22:	69bb      	ldr	r3, [r7, #24]
 800ad24:	2b00      	cmp	r3, #0
 800ad26:	d101      	bne.n	800ad2c <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 800ad28:	2320      	movs	r3, #32
 800ad2a:	e003      	b.n	800ad34 <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 800ad2c:	69bb      	ldr	r3, [r7, #24]
 800ad2e:	fab3 f383 	clz	r3, r3
 800ad32:	b2db      	uxtb	r3, r3
 800ad34:	005b      	lsls	r3, r3, #1
 800ad36:	2103      	movs	r1, #3
 800ad38:	fa01 f303 	lsl.w	r3, r1, r3
 800ad3c:	43db      	mvns	r3, r3
 800ad3e:	401a      	ands	r2, r3
 800ad40:	68bb      	ldr	r3, [r7, #8]
 800ad42:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800ad44:	6a3b      	ldr	r3, [r7, #32]
 800ad46:	fa93 f3a3 	rbit	r3, r3
 800ad4a:	61fb      	str	r3, [r7, #28]
  return result;
 800ad4c:	69fb      	ldr	r3, [r7, #28]
 800ad4e:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800ad50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad52:	2b00      	cmp	r3, #0
 800ad54:	d101      	bne.n	800ad5a <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 800ad56:	2320      	movs	r3, #32
 800ad58:	e003      	b.n	800ad62 <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 800ad5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad5c:	fab3 f383 	clz	r3, r3
 800ad60:	b2db      	uxtb	r3, r3
 800ad62:	005b      	lsls	r3, r3, #1
 800ad64:	6879      	ldr	r1, [r7, #4]
 800ad66:	fa01 f303 	lsl.w	r3, r1, r3
 800ad6a:	431a      	orrs	r2, r3
 800ad6c:	68fb      	ldr	r3, [r7, #12]
 800ad6e:	609a      	str	r2, [r3, #8]
             (Speed << (POSITION_VAL(Pin) * 2U)));
}
 800ad70:	bf00      	nop
 800ad72:	372c      	adds	r7, #44	; 0x2c
 800ad74:	46bd      	mov	sp, r7
 800ad76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad7a:	4770      	bx	lr

0800ad7c <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 800ad7c:	b480      	push	{r7}
 800ad7e:	b08b      	sub	sp, #44	; 0x2c
 800ad80:	af00      	add	r7, sp, #0
 800ad82:	60f8      	str	r0, [r7, #12]
 800ad84:	60b9      	str	r1, [r7, #8]
 800ad86:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 800ad88:	68fb      	ldr	r3, [r7, #12]
 800ad8a:	68da      	ldr	r2, [r3, #12]
 800ad8c:	68bb      	ldr	r3, [r7, #8]
 800ad8e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800ad90:	697b      	ldr	r3, [r7, #20]
 800ad92:	fa93 f3a3 	rbit	r3, r3
 800ad96:	613b      	str	r3, [r7, #16]
  return result;
 800ad98:	693b      	ldr	r3, [r7, #16]
 800ad9a:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800ad9c:	69bb      	ldr	r3, [r7, #24]
 800ad9e:	2b00      	cmp	r3, #0
 800ada0:	d101      	bne.n	800ada6 <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 800ada2:	2320      	movs	r3, #32
 800ada4:	e003      	b.n	800adae <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 800ada6:	69bb      	ldr	r3, [r7, #24]
 800ada8:	fab3 f383 	clz	r3, r3
 800adac:	b2db      	uxtb	r3, r3
 800adae:	005b      	lsls	r3, r3, #1
 800adb0:	2103      	movs	r1, #3
 800adb2:	fa01 f303 	lsl.w	r3, r1, r3
 800adb6:	43db      	mvns	r3, r3
 800adb8:	401a      	ands	r2, r3
 800adba:	68bb      	ldr	r3, [r7, #8]
 800adbc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800adbe:	6a3b      	ldr	r3, [r7, #32]
 800adc0:	fa93 f3a3 	rbit	r3, r3
 800adc4:	61fb      	str	r3, [r7, #28]
  return result;
 800adc6:	69fb      	ldr	r3, [r7, #28]
 800adc8:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800adca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800adcc:	2b00      	cmp	r3, #0
 800adce:	d101      	bne.n	800add4 <LL_GPIO_SetPinPull+0x58>
    return 32U;
 800add0:	2320      	movs	r3, #32
 800add2:	e003      	b.n	800addc <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 800add4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800add6:	fab3 f383 	clz	r3, r3
 800adda:	b2db      	uxtb	r3, r3
 800addc:	005b      	lsls	r3, r3, #1
 800adde:	6879      	ldr	r1, [r7, #4]
 800ade0:	fa01 f303 	lsl.w	r3, r1, r3
 800ade4:	431a      	orrs	r2, r3
 800ade6:	68fb      	ldr	r3, [r7, #12]
 800ade8:	60da      	str	r2, [r3, #12]
}
 800adea:	bf00      	nop
 800adec:	372c      	adds	r7, #44	; 0x2c
 800adee:	46bd      	mov	sp, r7
 800adf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adf4:	4770      	bx	lr

0800adf6 <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 800adf6:	b480      	push	{r7}
 800adf8:	b08b      	sub	sp, #44	; 0x2c
 800adfa:	af00      	add	r7, sp, #0
 800adfc:	60f8      	str	r0, [r7, #12]
 800adfe:	60b9      	str	r1, [r7, #8]
 800ae00:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 800ae02:	68fb      	ldr	r3, [r7, #12]
 800ae04:	6a1a      	ldr	r2, [r3, #32]
 800ae06:	68bb      	ldr	r3, [r7, #8]
 800ae08:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800ae0a:	697b      	ldr	r3, [r7, #20]
 800ae0c:	fa93 f3a3 	rbit	r3, r3
 800ae10:	613b      	str	r3, [r7, #16]
  return result;
 800ae12:	693b      	ldr	r3, [r7, #16]
 800ae14:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800ae16:	69bb      	ldr	r3, [r7, #24]
 800ae18:	2b00      	cmp	r3, #0
 800ae1a:	d101      	bne.n	800ae20 <LL_GPIO_SetAFPin_0_7+0x2a>
    return 32U;
 800ae1c:	2320      	movs	r3, #32
 800ae1e:	e003      	b.n	800ae28 <LL_GPIO_SetAFPin_0_7+0x32>
  return __builtin_clz(value);
 800ae20:	69bb      	ldr	r3, [r7, #24]
 800ae22:	fab3 f383 	clz	r3, r3
 800ae26:	b2db      	uxtb	r3, r3
 800ae28:	009b      	lsls	r3, r3, #2
 800ae2a:	210f      	movs	r1, #15
 800ae2c:	fa01 f303 	lsl.w	r3, r1, r3
 800ae30:	43db      	mvns	r3, r3
 800ae32:	401a      	ands	r2, r3
 800ae34:	68bb      	ldr	r3, [r7, #8]
 800ae36:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800ae38:	6a3b      	ldr	r3, [r7, #32]
 800ae3a:	fa93 f3a3 	rbit	r3, r3
 800ae3e:	61fb      	str	r3, [r7, #28]
  return result;
 800ae40:	69fb      	ldr	r3, [r7, #28]
 800ae42:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800ae44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae46:	2b00      	cmp	r3, #0
 800ae48:	d101      	bne.n	800ae4e <LL_GPIO_SetAFPin_0_7+0x58>
    return 32U;
 800ae4a:	2320      	movs	r3, #32
 800ae4c:	e003      	b.n	800ae56 <LL_GPIO_SetAFPin_0_7+0x60>
  return __builtin_clz(value);
 800ae4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae50:	fab3 f383 	clz	r3, r3
 800ae54:	b2db      	uxtb	r3, r3
 800ae56:	009b      	lsls	r3, r3, #2
 800ae58:	6879      	ldr	r1, [r7, #4]
 800ae5a:	fa01 f303 	lsl.w	r3, r1, r3
 800ae5e:	431a      	orrs	r2, r3
 800ae60:	68fb      	ldr	r3, [r7, #12]
 800ae62:	621a      	str	r2, [r3, #32]
             (Alternate << (POSITION_VAL(Pin) * 4U)));
}
 800ae64:	bf00      	nop
 800ae66:	372c      	adds	r7, #44	; 0x2c
 800ae68:	46bd      	mov	sp, r7
 800ae6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae6e:	4770      	bx	lr

0800ae70 <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 800ae70:	b480      	push	{r7}
 800ae72:	b08b      	sub	sp, #44	; 0x2c
 800ae74:	af00      	add	r7, sp, #0
 800ae76:	60f8      	str	r0, [r7, #12]
 800ae78:	60b9      	str	r1, [r7, #8]
 800ae7a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 800ae7c:	68fb      	ldr	r3, [r7, #12]
 800ae7e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ae80:	68bb      	ldr	r3, [r7, #8]
 800ae82:	0a1b      	lsrs	r3, r3, #8
 800ae84:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800ae86:	697b      	ldr	r3, [r7, #20]
 800ae88:	fa93 f3a3 	rbit	r3, r3
 800ae8c:	613b      	str	r3, [r7, #16]
  return result;
 800ae8e:	693b      	ldr	r3, [r7, #16]
 800ae90:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800ae92:	69bb      	ldr	r3, [r7, #24]
 800ae94:	2b00      	cmp	r3, #0
 800ae96:	d101      	bne.n	800ae9c <LL_GPIO_SetAFPin_8_15+0x2c>
    return 32U;
 800ae98:	2320      	movs	r3, #32
 800ae9a:	e003      	b.n	800aea4 <LL_GPIO_SetAFPin_8_15+0x34>
  return __builtin_clz(value);
 800ae9c:	69bb      	ldr	r3, [r7, #24]
 800ae9e:	fab3 f383 	clz	r3, r3
 800aea2:	b2db      	uxtb	r3, r3
 800aea4:	009b      	lsls	r3, r3, #2
 800aea6:	210f      	movs	r1, #15
 800aea8:	fa01 f303 	lsl.w	r3, r1, r3
 800aeac:	43db      	mvns	r3, r3
 800aeae:	401a      	ands	r2, r3
 800aeb0:	68bb      	ldr	r3, [r7, #8]
 800aeb2:	0a1b      	lsrs	r3, r3, #8
 800aeb4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800aeb6:	6a3b      	ldr	r3, [r7, #32]
 800aeb8:	fa93 f3a3 	rbit	r3, r3
 800aebc:	61fb      	str	r3, [r7, #28]
  return result;
 800aebe:	69fb      	ldr	r3, [r7, #28]
 800aec0:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800aec2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aec4:	2b00      	cmp	r3, #0
 800aec6:	d101      	bne.n	800aecc <LL_GPIO_SetAFPin_8_15+0x5c>
    return 32U;
 800aec8:	2320      	movs	r3, #32
 800aeca:	e003      	b.n	800aed4 <LL_GPIO_SetAFPin_8_15+0x64>
  return __builtin_clz(value);
 800aecc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aece:	fab3 f383 	clz	r3, r3
 800aed2:	b2db      	uxtb	r3, r3
 800aed4:	009b      	lsls	r3, r3, #2
 800aed6:	6879      	ldr	r1, [r7, #4]
 800aed8:	fa01 f303 	lsl.w	r3, r1, r3
 800aedc:	431a      	orrs	r2, r3
 800aede:	68fb      	ldr	r3, [r7, #12]
 800aee0:	625a      	str	r2, [r3, #36]	; 0x24
             (Alternate << (POSITION_VAL(Pin >> 8U) * 4U)));
}
 800aee2:	bf00      	nop
 800aee4:	372c      	adds	r7, #44	; 0x2c
 800aee6:	46bd      	mov	sp, r7
 800aee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeec:	4770      	bx	lr

0800aeee <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 800aeee:	b580      	push	{r7, lr}
 800aef0:	b088      	sub	sp, #32
 800aef2:	af00      	add	r7, sp, #0
 800aef4:	6078      	str	r0, [r7, #4]
 800aef6:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 800aef8:	683b      	ldr	r3, [r7, #0]
 800aefa:	681b      	ldr	r3, [r3, #0]
 800aefc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800aefe:	693b      	ldr	r3, [r7, #16]
 800af00:	fa93 f3a3 	rbit	r3, r3
 800af04:	60fb      	str	r3, [r7, #12]
  return result;
 800af06:	68fb      	ldr	r3, [r7, #12]
 800af08:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 800af0a:	697b      	ldr	r3, [r7, #20]
 800af0c:	2b00      	cmp	r3, #0
 800af0e:	d101      	bne.n	800af14 <LL_GPIO_Init+0x26>
    return 32U;
 800af10:	2320      	movs	r3, #32
 800af12:	e003      	b.n	800af1c <LL_GPIO_Init+0x2e>
  return __builtin_clz(value);
 800af14:	697b      	ldr	r3, [r7, #20]
 800af16:	fab3 f383 	clz	r3, r3
 800af1a:	b2db      	uxtb	r3, r3
 800af1c:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 800af1e:	e047      	b.n	800afb0 <LL_GPIO_Init+0xc2>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (1UL << pinpos);
 800af20:	683b      	ldr	r3, [r7, #0]
 800af22:	681a      	ldr	r2, [r3, #0]
 800af24:	2101      	movs	r1, #1
 800af26:	69fb      	ldr	r3, [r7, #28]
 800af28:	fa01 f303 	lsl.w	r3, r1, r3
 800af2c:	4013      	ands	r3, r2
 800af2e:	61bb      	str	r3, [r7, #24]

    if (currentpin != 0U)
 800af30:	69bb      	ldr	r3, [r7, #24]
 800af32:	2b00      	cmp	r3, #0
 800af34:	d039      	beq.n	800afaa <LL_GPIO_Init+0xbc>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 800af36:	683b      	ldr	r3, [r7, #0]
 800af38:	685b      	ldr	r3, [r3, #4]
 800af3a:	2b01      	cmp	r3, #1
 800af3c:	d003      	beq.n	800af46 <LL_GPIO_Init+0x58>
 800af3e:	683b      	ldr	r3, [r7, #0]
 800af40:	685b      	ldr	r3, [r3, #4]
 800af42:	2b02      	cmp	r3, #2
 800af44:	d10d      	bne.n	800af62 <LL_GPIO_Init+0x74>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 800af46:	683b      	ldr	r3, [r7, #0]
 800af48:	689b      	ldr	r3, [r3, #8]
 800af4a:	461a      	mov	r2, r3
 800af4c:	69b9      	ldr	r1, [r7, #24]
 800af4e:	6878      	ldr	r0, [r7, #4]
 800af50:	f7ff fed7 	bl	800ad02 <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 800af54:	683b      	ldr	r3, [r7, #0]
 800af56:	68db      	ldr	r3, [r3, #12]
 800af58:	461a      	mov	r2, r3
 800af5a:	69b9      	ldr	r1, [r7, #24]
 800af5c:	6878      	ldr	r0, [r7, #4]
 800af5e:	f7ff feb8 	bl	800acd2 <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 800af62:	683b      	ldr	r3, [r7, #0]
 800af64:	691b      	ldr	r3, [r3, #16]
 800af66:	461a      	mov	r2, r3
 800af68:	69b9      	ldr	r1, [r7, #24]
 800af6a:	6878      	ldr	r0, [r7, #4]
 800af6c:	f7ff ff06 	bl	800ad7c <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 800af70:	683b      	ldr	r3, [r7, #0]
 800af72:	685b      	ldr	r3, [r3, #4]
 800af74:	2b02      	cmp	r3, #2
 800af76:	d111      	bne.n	800af9c <LL_GPIO_Init+0xae>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Alternate function configuration */
        if (currentpin < LL_GPIO_PIN_8)
 800af78:	69bb      	ldr	r3, [r7, #24]
 800af7a:	2bff      	cmp	r3, #255	; 0xff
 800af7c:	d807      	bhi.n	800af8e <LL_GPIO_Init+0xa0>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800af7e:	683b      	ldr	r3, [r7, #0]
 800af80:	695b      	ldr	r3, [r3, #20]
 800af82:	461a      	mov	r2, r3
 800af84:	69b9      	ldr	r1, [r7, #24]
 800af86:	6878      	ldr	r0, [r7, #4]
 800af88:	f7ff ff35 	bl	800adf6 <LL_GPIO_SetAFPin_0_7>
 800af8c:	e006      	b.n	800af9c <LL_GPIO_Init+0xae>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800af8e:	683b      	ldr	r3, [r7, #0]
 800af90:	695b      	ldr	r3, [r3, #20]
 800af92:	461a      	mov	r2, r3
 800af94:	69b9      	ldr	r1, [r7, #24]
 800af96:	6878      	ldr	r0, [r7, #4]
 800af98:	f7ff ff6a 	bl	800ae70 <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 800af9c:	683b      	ldr	r3, [r7, #0]
 800af9e:	685b      	ldr	r3, [r3, #4]
 800afa0:	461a      	mov	r2, r3
 800afa2:	69b9      	ldr	r1, [r7, #24]
 800afa4:	6878      	ldr	r0, [r7, #4]
 800afa6:	f7ff fe57 	bl	800ac58 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 800afaa:	69fb      	ldr	r3, [r7, #28]
 800afac:	3301      	adds	r3, #1
 800afae:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 800afb0:	683b      	ldr	r3, [r7, #0]
 800afb2:	681a      	ldr	r2, [r3, #0]
 800afb4:	69fb      	ldr	r3, [r7, #28]
 800afb6:	fa22 f303 	lsr.w	r3, r2, r3
 800afba:	2b00      	cmp	r3, #0
 800afbc:	d1b0      	bne.n	800af20 <LL_GPIO_Init+0x32>
  }

  return (SUCCESS);
 800afbe:	2300      	movs	r3, #0
}
 800afc0:	4618      	mov	r0, r3
 800afc2:	3720      	adds	r7, #32
 800afc4:	46bd      	mov	sp, r7
 800afc6:	bd80      	pop	{r7, pc}

0800afc8 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800afc8:	b480      	push	{r7}
 800afca:	b085      	sub	sp, #20
 800afcc:	af00      	add	r7, sp, #0
 800afce:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800afd0:	f64b 7380 	movw	r3, #49024	; 0xbf80
 800afd4:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800afd6:	687b      	ldr	r3, [r7, #4]
 800afd8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800afdc:	b29a      	uxth	r2, r3
 800afde:	68fb      	ldr	r3, [r7, #12]
 800afe0:	b29b      	uxth	r3, r3
 800afe2:	43db      	mvns	r3, r3
 800afe4:	b29b      	uxth	r3, r3
 800afe6:	4013      	ands	r3, r2
 800afe8:	b29a      	uxth	r2, r3
 800afea:	687b      	ldr	r3, [r7, #4]
 800afec:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800aff0:	2300      	movs	r3, #0
}
 800aff2:	4618      	mov	r0, r3
 800aff4:	3714      	adds	r7, #20
 800aff6:	46bd      	mov	sp, r7
 800aff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800affc:	4770      	bx	lr

0800affe <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800affe:	b084      	sub	sp, #16
 800b000:	b480      	push	{r7}
 800b002:	b083      	sub	sp, #12
 800b004:	af00      	add	r7, sp, #0
 800b006:	6078      	str	r0, [r7, #4]
 800b008:	f107 0014 	add.w	r0, r7, #20
 800b00c:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800b010:	687b      	ldr	r3, [r7, #4]
 800b012:	2201      	movs	r2, #1
 800b014:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800b018:	687b      	ldr	r3, [r7, #4]
 800b01a:	2200      	movs	r2, #0
 800b01c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800b020:	687b      	ldr	r3, [r7, #4]
 800b022:	2200      	movs	r2, #0
 800b024:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800b028:	687b      	ldr	r3, [r7, #4]
 800b02a:	2200      	movs	r2, #0
 800b02c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 800b030:	2300      	movs	r3, #0
}
 800b032:	4618      	mov	r0, r3
 800b034:	370c      	adds	r7, #12
 800b036:	46bd      	mov	sp, r7
 800b038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b03c:	b004      	add	sp, #16
 800b03e:	4770      	bx	lr

0800b040 <__NVIC_SetPriority>:
{
 800b040:	b480      	push	{r7}
 800b042:	b083      	sub	sp, #12
 800b044:	af00      	add	r7, sp, #0
 800b046:	4603      	mov	r3, r0
 800b048:	6039      	str	r1, [r7, #0]
 800b04a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800b04c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b050:	2b00      	cmp	r3, #0
 800b052:	db0a      	blt.n	800b06a <__NVIC_SetPriority+0x2a>
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800b054:	683b      	ldr	r3, [r7, #0]
 800b056:	b2da      	uxtb	r2, r3
 800b058:	490c      	ldr	r1, [pc, #48]	; (800b08c <__NVIC_SetPriority+0x4c>)
 800b05a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b05e:	0152      	lsls	r2, r2, #5
 800b060:	b2d2      	uxtb	r2, r2
 800b062:	440b      	add	r3, r1
 800b064:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800b068:	e00a      	b.n	800b080 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800b06a:	683b      	ldr	r3, [r7, #0]
 800b06c:	b2da      	uxtb	r2, r3
 800b06e:	4908      	ldr	r1, [pc, #32]	; (800b090 <__NVIC_SetPriority+0x50>)
 800b070:	79fb      	ldrb	r3, [r7, #7]
 800b072:	f003 030f 	and.w	r3, r3, #15
 800b076:	3b04      	subs	r3, #4
 800b078:	0152      	lsls	r2, r2, #5
 800b07a:	b2d2      	uxtb	r2, r2
 800b07c:	440b      	add	r3, r1
 800b07e:	761a      	strb	r2, [r3, #24]
}
 800b080:	bf00      	nop
 800b082:	370c      	adds	r7, #12
 800b084:	46bd      	mov	sp, r7
 800b086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b08a:	4770      	bx	lr
 800b08c:	e000e100 	.word	0xe000e100
 800b090:	e000ed00 	.word	0xe000ed00

0800b094 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800b094:	b580      	push	{r7, lr}
 800b096:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800b098:	4b05      	ldr	r3, [pc, #20]	; (800b0b0 <SysTick_Handler+0x1c>)
 800b09a:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800b09c:	f001 fbbc 	bl	800c818 <xTaskGetSchedulerState>
 800b0a0:	4603      	mov	r3, r0
 800b0a2:	2b01      	cmp	r3, #1
 800b0a4:	d001      	beq.n	800b0aa <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800b0a6:	f002 f811 	bl	800d0cc <xPortSysTickHandler>
  }
}
 800b0aa:	bf00      	nop
 800b0ac:	bd80      	pop	{r7, pc}
 800b0ae:	bf00      	nop
 800b0b0:	e000e010 	.word	0xe000e010

0800b0b4 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800b0b4:	b580      	push	{r7, lr}
 800b0b6:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800b0b8:	2100      	movs	r1, #0
 800b0ba:	f06f 0004 	mvn.w	r0, #4
 800b0be:	f7ff ffbf 	bl	800b040 <__NVIC_SetPriority>
#endif
}
 800b0c2:	bf00      	nop
 800b0c4:	bd80      	pop	{r7, pc}
	...

0800b0c8 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800b0c8:	b480      	push	{r7}
 800b0ca:	b083      	sub	sp, #12
 800b0cc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b0ce:	f3ef 8305 	mrs	r3, IPSR
 800b0d2:	603b      	str	r3, [r7, #0]
  return(result);
 800b0d4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800b0d6:	2b00      	cmp	r3, #0
 800b0d8:	d003      	beq.n	800b0e2 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800b0da:	f06f 0305 	mvn.w	r3, #5
 800b0de:	607b      	str	r3, [r7, #4]
 800b0e0:	e00c      	b.n	800b0fc <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800b0e2:	4b0a      	ldr	r3, [pc, #40]	; (800b10c <osKernelInitialize+0x44>)
 800b0e4:	681b      	ldr	r3, [r3, #0]
 800b0e6:	2b00      	cmp	r3, #0
 800b0e8:	d105      	bne.n	800b0f6 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800b0ea:	4b08      	ldr	r3, [pc, #32]	; (800b10c <osKernelInitialize+0x44>)
 800b0ec:	2201      	movs	r2, #1
 800b0ee:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800b0f0:	2300      	movs	r3, #0
 800b0f2:	607b      	str	r3, [r7, #4]
 800b0f4:	e002      	b.n	800b0fc <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800b0f6:	f04f 33ff 	mov.w	r3, #4294967295
 800b0fa:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800b0fc:	687b      	ldr	r3, [r7, #4]
}
 800b0fe:	4618      	mov	r0, r3
 800b100:	370c      	adds	r7, #12
 800b102:	46bd      	mov	sp, r7
 800b104:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b108:	4770      	bx	lr
 800b10a:	bf00      	nop
 800b10c:	2000097c 	.word	0x2000097c

0800b110 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800b110:	b580      	push	{r7, lr}
 800b112:	b082      	sub	sp, #8
 800b114:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b116:	f3ef 8305 	mrs	r3, IPSR
 800b11a:	603b      	str	r3, [r7, #0]
  return(result);
 800b11c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800b11e:	2b00      	cmp	r3, #0
 800b120:	d003      	beq.n	800b12a <osKernelStart+0x1a>
    stat = osErrorISR;
 800b122:	f06f 0305 	mvn.w	r3, #5
 800b126:	607b      	str	r3, [r7, #4]
 800b128:	e010      	b.n	800b14c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800b12a:	4b0b      	ldr	r3, [pc, #44]	; (800b158 <osKernelStart+0x48>)
 800b12c:	681b      	ldr	r3, [r3, #0]
 800b12e:	2b01      	cmp	r3, #1
 800b130:	d109      	bne.n	800b146 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800b132:	f7ff ffbf 	bl	800b0b4 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800b136:	4b08      	ldr	r3, [pc, #32]	; (800b158 <osKernelStart+0x48>)
 800b138:	2202      	movs	r2, #2
 800b13a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800b13c:	f000 ff8e 	bl	800c05c <vTaskStartScheduler>
      stat = osOK;
 800b140:	2300      	movs	r3, #0
 800b142:	607b      	str	r3, [r7, #4]
 800b144:	e002      	b.n	800b14c <osKernelStart+0x3c>
    } else {
      stat = osError;
 800b146:	f04f 33ff 	mov.w	r3, #4294967295
 800b14a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800b14c:	687b      	ldr	r3, [r7, #4]
}
 800b14e:	4618      	mov	r0, r3
 800b150:	3708      	adds	r7, #8
 800b152:	46bd      	mov	sp, r7
 800b154:	bd80      	pop	{r7, pc}
 800b156:	bf00      	nop
 800b158:	2000097c 	.word	0x2000097c

0800b15c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800b15c:	b580      	push	{r7, lr}
 800b15e:	b08e      	sub	sp, #56	; 0x38
 800b160:	af04      	add	r7, sp, #16
 800b162:	60f8      	str	r0, [r7, #12]
 800b164:	60b9      	str	r1, [r7, #8]
 800b166:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800b168:	2300      	movs	r3, #0
 800b16a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b16c:	f3ef 8305 	mrs	r3, IPSR
 800b170:	617b      	str	r3, [r7, #20]
  return(result);
 800b172:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800b174:	2b00      	cmp	r3, #0
 800b176:	d17e      	bne.n	800b276 <osThreadNew+0x11a>
 800b178:	68fb      	ldr	r3, [r7, #12]
 800b17a:	2b00      	cmp	r3, #0
 800b17c:	d07b      	beq.n	800b276 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800b17e:	2380      	movs	r3, #128	; 0x80
 800b180:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800b182:	2318      	movs	r3, #24
 800b184:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800b186:	2300      	movs	r3, #0
 800b188:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800b18a:	f04f 33ff 	mov.w	r3, #4294967295
 800b18e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800b190:	687b      	ldr	r3, [r7, #4]
 800b192:	2b00      	cmp	r3, #0
 800b194:	d045      	beq.n	800b222 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800b196:	687b      	ldr	r3, [r7, #4]
 800b198:	681b      	ldr	r3, [r3, #0]
 800b19a:	2b00      	cmp	r3, #0
 800b19c:	d002      	beq.n	800b1a4 <osThreadNew+0x48>
        name = attr->name;
 800b19e:	687b      	ldr	r3, [r7, #4]
 800b1a0:	681b      	ldr	r3, [r3, #0]
 800b1a2:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800b1a4:	687b      	ldr	r3, [r7, #4]
 800b1a6:	699b      	ldr	r3, [r3, #24]
 800b1a8:	2b00      	cmp	r3, #0
 800b1aa:	d002      	beq.n	800b1b2 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800b1ac:	687b      	ldr	r3, [r7, #4]
 800b1ae:	699b      	ldr	r3, [r3, #24]
 800b1b0:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800b1b2:	69fb      	ldr	r3, [r7, #28]
 800b1b4:	2b00      	cmp	r3, #0
 800b1b6:	d008      	beq.n	800b1ca <osThreadNew+0x6e>
 800b1b8:	69fb      	ldr	r3, [r7, #28]
 800b1ba:	2b38      	cmp	r3, #56	; 0x38
 800b1bc:	d805      	bhi.n	800b1ca <osThreadNew+0x6e>
 800b1be:	687b      	ldr	r3, [r7, #4]
 800b1c0:	685b      	ldr	r3, [r3, #4]
 800b1c2:	f003 0301 	and.w	r3, r3, #1
 800b1c6:	2b00      	cmp	r3, #0
 800b1c8:	d001      	beq.n	800b1ce <osThreadNew+0x72>
        return (NULL);
 800b1ca:	2300      	movs	r3, #0
 800b1cc:	e054      	b.n	800b278 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800b1ce:	687b      	ldr	r3, [r7, #4]
 800b1d0:	695b      	ldr	r3, [r3, #20]
 800b1d2:	2b00      	cmp	r3, #0
 800b1d4:	d003      	beq.n	800b1de <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800b1d6:	687b      	ldr	r3, [r7, #4]
 800b1d8:	695b      	ldr	r3, [r3, #20]
 800b1da:	089b      	lsrs	r3, r3, #2
 800b1dc:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800b1de:	687b      	ldr	r3, [r7, #4]
 800b1e0:	689b      	ldr	r3, [r3, #8]
 800b1e2:	2b00      	cmp	r3, #0
 800b1e4:	d00e      	beq.n	800b204 <osThreadNew+0xa8>
 800b1e6:	687b      	ldr	r3, [r7, #4]
 800b1e8:	68db      	ldr	r3, [r3, #12]
 800b1ea:	2b5b      	cmp	r3, #91	; 0x5b
 800b1ec:	d90a      	bls.n	800b204 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800b1ee:	687b      	ldr	r3, [r7, #4]
 800b1f0:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800b1f2:	2b00      	cmp	r3, #0
 800b1f4:	d006      	beq.n	800b204 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800b1f6:	687b      	ldr	r3, [r7, #4]
 800b1f8:	695b      	ldr	r3, [r3, #20]
 800b1fa:	2b00      	cmp	r3, #0
 800b1fc:	d002      	beq.n	800b204 <osThreadNew+0xa8>
        mem = 1;
 800b1fe:	2301      	movs	r3, #1
 800b200:	61bb      	str	r3, [r7, #24]
 800b202:	e010      	b.n	800b226 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800b204:	687b      	ldr	r3, [r7, #4]
 800b206:	689b      	ldr	r3, [r3, #8]
 800b208:	2b00      	cmp	r3, #0
 800b20a:	d10c      	bne.n	800b226 <osThreadNew+0xca>
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	68db      	ldr	r3, [r3, #12]
 800b210:	2b00      	cmp	r3, #0
 800b212:	d108      	bne.n	800b226 <osThreadNew+0xca>
 800b214:	687b      	ldr	r3, [r7, #4]
 800b216:	691b      	ldr	r3, [r3, #16]
 800b218:	2b00      	cmp	r3, #0
 800b21a:	d104      	bne.n	800b226 <osThreadNew+0xca>
          mem = 0;
 800b21c:	2300      	movs	r3, #0
 800b21e:	61bb      	str	r3, [r7, #24]
 800b220:	e001      	b.n	800b226 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800b222:	2300      	movs	r3, #0
 800b224:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800b226:	69bb      	ldr	r3, [r7, #24]
 800b228:	2b01      	cmp	r3, #1
 800b22a:	d110      	bne.n	800b24e <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800b22c:	687b      	ldr	r3, [r7, #4]
 800b22e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800b230:	687a      	ldr	r2, [r7, #4]
 800b232:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800b234:	9202      	str	r2, [sp, #8]
 800b236:	9301      	str	r3, [sp, #4]
 800b238:	69fb      	ldr	r3, [r7, #28]
 800b23a:	9300      	str	r3, [sp, #0]
 800b23c:	68bb      	ldr	r3, [r7, #8]
 800b23e:	6a3a      	ldr	r2, [r7, #32]
 800b240:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b242:	68f8      	ldr	r0, [r7, #12]
 800b244:	f000 fd30 	bl	800bca8 <xTaskCreateStatic>
 800b248:	4603      	mov	r3, r0
 800b24a:	613b      	str	r3, [r7, #16]
 800b24c:	e013      	b.n	800b276 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800b24e:	69bb      	ldr	r3, [r7, #24]
 800b250:	2b00      	cmp	r3, #0
 800b252:	d110      	bne.n	800b276 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800b254:	6a3b      	ldr	r3, [r7, #32]
 800b256:	b29a      	uxth	r2, r3
 800b258:	f107 0310 	add.w	r3, r7, #16
 800b25c:	9301      	str	r3, [sp, #4]
 800b25e:	69fb      	ldr	r3, [r7, #28]
 800b260:	9300      	str	r3, [sp, #0]
 800b262:	68bb      	ldr	r3, [r7, #8]
 800b264:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b266:	68f8      	ldr	r0, [r7, #12]
 800b268:	f000 fd63 	bl	800bd32 <xTaskCreate>
 800b26c:	4603      	mov	r3, r0
 800b26e:	2b01      	cmp	r3, #1
 800b270:	d001      	beq.n	800b276 <osThreadNew+0x11a>
            hTask = NULL;
 800b272:	2300      	movs	r3, #0
 800b274:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800b276:	693b      	ldr	r3, [r7, #16]
}
 800b278:	4618      	mov	r0, r3
 800b27a:	3728      	adds	r7, #40	; 0x28
 800b27c:	46bd      	mov	sp, r7
 800b27e:	bd80      	pop	{r7, pc}

0800b280 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800b280:	b480      	push	{r7}
 800b282:	b085      	sub	sp, #20
 800b284:	af00      	add	r7, sp, #0
 800b286:	60f8      	str	r0, [r7, #12]
 800b288:	60b9      	str	r1, [r7, #8]
 800b28a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800b28c:	68fb      	ldr	r3, [r7, #12]
 800b28e:	4a07      	ldr	r2, [pc, #28]	; (800b2ac <vApplicationGetIdleTaskMemory+0x2c>)
 800b290:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800b292:	68bb      	ldr	r3, [r7, #8]
 800b294:	4a06      	ldr	r2, [pc, #24]	; (800b2b0 <vApplicationGetIdleTaskMemory+0x30>)
 800b296:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800b298:	687b      	ldr	r3, [r7, #4]
 800b29a:	2280      	movs	r2, #128	; 0x80
 800b29c:	601a      	str	r2, [r3, #0]
}
 800b29e:	bf00      	nop
 800b2a0:	3714      	adds	r7, #20
 800b2a2:	46bd      	mov	sp, r7
 800b2a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2a8:	4770      	bx	lr
 800b2aa:	bf00      	nop
 800b2ac:	20000980 	.word	0x20000980
 800b2b0:	200009dc 	.word	0x200009dc

0800b2b4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800b2b4:	b480      	push	{r7}
 800b2b6:	b085      	sub	sp, #20
 800b2b8:	af00      	add	r7, sp, #0
 800b2ba:	60f8      	str	r0, [r7, #12]
 800b2bc:	60b9      	str	r1, [r7, #8]
 800b2be:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800b2c0:	68fb      	ldr	r3, [r7, #12]
 800b2c2:	4a07      	ldr	r2, [pc, #28]	; (800b2e0 <vApplicationGetTimerTaskMemory+0x2c>)
 800b2c4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800b2c6:	68bb      	ldr	r3, [r7, #8]
 800b2c8:	4a06      	ldr	r2, [pc, #24]	; (800b2e4 <vApplicationGetTimerTaskMemory+0x30>)
 800b2ca:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800b2cc:	687b      	ldr	r3, [r7, #4]
 800b2ce:	f44f 7280 	mov.w	r2, #256	; 0x100
 800b2d2:	601a      	str	r2, [r3, #0]
}
 800b2d4:	bf00      	nop
 800b2d6:	3714      	adds	r7, #20
 800b2d8:	46bd      	mov	sp, r7
 800b2da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2de:	4770      	bx	lr
 800b2e0:	20000bdc 	.word	0x20000bdc
 800b2e4:	20000c38 	.word	0x20000c38

0800b2e8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800b2e8:	b480      	push	{r7}
 800b2ea:	b083      	sub	sp, #12
 800b2ec:	af00      	add	r7, sp, #0
 800b2ee:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b2f0:	687b      	ldr	r3, [r7, #4]
 800b2f2:	f103 0208 	add.w	r2, r3, #8
 800b2f6:	687b      	ldr	r3, [r7, #4]
 800b2f8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800b2fa:	687b      	ldr	r3, [r7, #4]
 800b2fc:	f04f 32ff 	mov.w	r2, #4294967295
 800b300:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b302:	687b      	ldr	r3, [r7, #4]
 800b304:	f103 0208 	add.w	r2, r3, #8
 800b308:	687b      	ldr	r3, [r7, #4]
 800b30a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b30c:	687b      	ldr	r3, [r7, #4]
 800b30e:	f103 0208 	add.w	r2, r3, #8
 800b312:	687b      	ldr	r3, [r7, #4]
 800b314:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800b316:	687b      	ldr	r3, [r7, #4]
 800b318:	2200      	movs	r2, #0
 800b31a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800b31c:	bf00      	nop
 800b31e:	370c      	adds	r7, #12
 800b320:	46bd      	mov	sp, r7
 800b322:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b326:	4770      	bx	lr

0800b328 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800b328:	b480      	push	{r7}
 800b32a:	b083      	sub	sp, #12
 800b32c:	af00      	add	r7, sp, #0
 800b32e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800b330:	687b      	ldr	r3, [r7, #4]
 800b332:	2200      	movs	r2, #0
 800b334:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800b336:	bf00      	nop
 800b338:	370c      	adds	r7, #12
 800b33a:	46bd      	mov	sp, r7
 800b33c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b340:	4770      	bx	lr

0800b342 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800b342:	b480      	push	{r7}
 800b344:	b085      	sub	sp, #20
 800b346:	af00      	add	r7, sp, #0
 800b348:	6078      	str	r0, [r7, #4]
 800b34a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800b34c:	687b      	ldr	r3, [r7, #4]
 800b34e:	685b      	ldr	r3, [r3, #4]
 800b350:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800b352:	683b      	ldr	r3, [r7, #0]
 800b354:	68fa      	ldr	r2, [r7, #12]
 800b356:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800b358:	68fb      	ldr	r3, [r7, #12]
 800b35a:	689a      	ldr	r2, [r3, #8]
 800b35c:	683b      	ldr	r3, [r7, #0]
 800b35e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800b360:	68fb      	ldr	r3, [r7, #12]
 800b362:	689b      	ldr	r3, [r3, #8]
 800b364:	683a      	ldr	r2, [r7, #0]
 800b366:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800b368:	68fb      	ldr	r3, [r7, #12]
 800b36a:	683a      	ldr	r2, [r7, #0]
 800b36c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800b36e:	683b      	ldr	r3, [r7, #0]
 800b370:	687a      	ldr	r2, [r7, #4]
 800b372:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800b374:	687b      	ldr	r3, [r7, #4]
 800b376:	681b      	ldr	r3, [r3, #0]
 800b378:	1c5a      	adds	r2, r3, #1
 800b37a:	687b      	ldr	r3, [r7, #4]
 800b37c:	601a      	str	r2, [r3, #0]
}
 800b37e:	bf00      	nop
 800b380:	3714      	adds	r7, #20
 800b382:	46bd      	mov	sp, r7
 800b384:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b388:	4770      	bx	lr

0800b38a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800b38a:	b480      	push	{r7}
 800b38c:	b085      	sub	sp, #20
 800b38e:	af00      	add	r7, sp, #0
 800b390:	6078      	str	r0, [r7, #4]
 800b392:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800b394:	683b      	ldr	r3, [r7, #0]
 800b396:	681b      	ldr	r3, [r3, #0]
 800b398:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800b39a:	68bb      	ldr	r3, [r7, #8]
 800b39c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b3a0:	d103      	bne.n	800b3aa <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800b3a2:	687b      	ldr	r3, [r7, #4]
 800b3a4:	691b      	ldr	r3, [r3, #16]
 800b3a6:	60fb      	str	r3, [r7, #12]
 800b3a8:	e00c      	b.n	800b3c4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800b3aa:	687b      	ldr	r3, [r7, #4]
 800b3ac:	3308      	adds	r3, #8
 800b3ae:	60fb      	str	r3, [r7, #12]
 800b3b0:	e002      	b.n	800b3b8 <vListInsert+0x2e>
 800b3b2:	68fb      	ldr	r3, [r7, #12]
 800b3b4:	685b      	ldr	r3, [r3, #4]
 800b3b6:	60fb      	str	r3, [r7, #12]
 800b3b8:	68fb      	ldr	r3, [r7, #12]
 800b3ba:	685b      	ldr	r3, [r3, #4]
 800b3bc:	681b      	ldr	r3, [r3, #0]
 800b3be:	68ba      	ldr	r2, [r7, #8]
 800b3c0:	429a      	cmp	r2, r3
 800b3c2:	d2f6      	bcs.n	800b3b2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800b3c4:	68fb      	ldr	r3, [r7, #12]
 800b3c6:	685a      	ldr	r2, [r3, #4]
 800b3c8:	683b      	ldr	r3, [r7, #0]
 800b3ca:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800b3cc:	683b      	ldr	r3, [r7, #0]
 800b3ce:	685b      	ldr	r3, [r3, #4]
 800b3d0:	683a      	ldr	r2, [r7, #0]
 800b3d2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800b3d4:	683b      	ldr	r3, [r7, #0]
 800b3d6:	68fa      	ldr	r2, [r7, #12]
 800b3d8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800b3da:	68fb      	ldr	r3, [r7, #12]
 800b3dc:	683a      	ldr	r2, [r7, #0]
 800b3de:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800b3e0:	683b      	ldr	r3, [r7, #0]
 800b3e2:	687a      	ldr	r2, [r7, #4]
 800b3e4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800b3e6:	687b      	ldr	r3, [r7, #4]
 800b3e8:	681b      	ldr	r3, [r3, #0]
 800b3ea:	1c5a      	adds	r2, r3, #1
 800b3ec:	687b      	ldr	r3, [r7, #4]
 800b3ee:	601a      	str	r2, [r3, #0]
}
 800b3f0:	bf00      	nop
 800b3f2:	3714      	adds	r7, #20
 800b3f4:	46bd      	mov	sp, r7
 800b3f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3fa:	4770      	bx	lr

0800b3fc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800b3fc:	b480      	push	{r7}
 800b3fe:	b085      	sub	sp, #20
 800b400:	af00      	add	r7, sp, #0
 800b402:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800b404:	687b      	ldr	r3, [r7, #4]
 800b406:	691b      	ldr	r3, [r3, #16]
 800b408:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800b40a:	687b      	ldr	r3, [r7, #4]
 800b40c:	685b      	ldr	r3, [r3, #4]
 800b40e:	687a      	ldr	r2, [r7, #4]
 800b410:	6892      	ldr	r2, [r2, #8]
 800b412:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800b414:	687b      	ldr	r3, [r7, #4]
 800b416:	689b      	ldr	r3, [r3, #8]
 800b418:	687a      	ldr	r2, [r7, #4]
 800b41a:	6852      	ldr	r2, [r2, #4]
 800b41c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800b41e:	68fb      	ldr	r3, [r7, #12]
 800b420:	685b      	ldr	r3, [r3, #4]
 800b422:	687a      	ldr	r2, [r7, #4]
 800b424:	429a      	cmp	r2, r3
 800b426:	d103      	bne.n	800b430 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800b428:	687b      	ldr	r3, [r7, #4]
 800b42a:	689a      	ldr	r2, [r3, #8]
 800b42c:	68fb      	ldr	r3, [r7, #12]
 800b42e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800b430:	687b      	ldr	r3, [r7, #4]
 800b432:	2200      	movs	r2, #0
 800b434:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800b436:	68fb      	ldr	r3, [r7, #12]
 800b438:	681b      	ldr	r3, [r3, #0]
 800b43a:	1e5a      	subs	r2, r3, #1
 800b43c:	68fb      	ldr	r3, [r7, #12]
 800b43e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800b440:	68fb      	ldr	r3, [r7, #12]
 800b442:	681b      	ldr	r3, [r3, #0]
}
 800b444:	4618      	mov	r0, r3
 800b446:	3714      	adds	r7, #20
 800b448:	46bd      	mov	sp, r7
 800b44a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b44e:	4770      	bx	lr

0800b450 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800b450:	b580      	push	{r7, lr}
 800b452:	b084      	sub	sp, #16
 800b454:	af00      	add	r7, sp, #0
 800b456:	6078      	str	r0, [r7, #4]
 800b458:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800b45a:	687b      	ldr	r3, [r7, #4]
 800b45c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800b45e:	68fb      	ldr	r3, [r7, #12]
 800b460:	2b00      	cmp	r3, #0
 800b462:	d102      	bne.n	800b46a <xQueueGenericReset+0x1a>
 800b464:	f001 ff38 	bl	800d2d8 <ulSetInterruptMask>
 800b468:	e7fe      	b.n	800b468 <xQueueGenericReset+0x18>

	taskENTER_CRITICAL();
 800b46a:	f001 fe03 	bl	800d074 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b46e:	68fb      	ldr	r3, [r7, #12]
 800b470:	681a      	ldr	r2, [r3, #0]
 800b472:	68fb      	ldr	r3, [r7, #12]
 800b474:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b476:	68f9      	ldr	r1, [r7, #12]
 800b478:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800b47a:	fb01 f303 	mul.w	r3, r1, r3
 800b47e:	441a      	add	r2, r3
 800b480:	68fb      	ldr	r3, [r7, #12]
 800b482:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800b484:	68fb      	ldr	r3, [r7, #12]
 800b486:	2200      	movs	r2, #0
 800b488:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800b48a:	68fb      	ldr	r3, [r7, #12]
 800b48c:	681a      	ldr	r2, [r3, #0]
 800b48e:	68fb      	ldr	r3, [r7, #12]
 800b490:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b492:	68fb      	ldr	r3, [r7, #12]
 800b494:	681a      	ldr	r2, [r3, #0]
 800b496:	68fb      	ldr	r3, [r7, #12]
 800b498:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b49a:	3b01      	subs	r3, #1
 800b49c:	68f9      	ldr	r1, [r7, #12]
 800b49e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800b4a0:	fb01 f303 	mul.w	r3, r1, r3
 800b4a4:	441a      	add	r2, r3
 800b4a6:	68fb      	ldr	r3, [r7, #12]
 800b4a8:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800b4aa:	68fb      	ldr	r3, [r7, #12]
 800b4ac:	22ff      	movs	r2, #255	; 0xff
 800b4ae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800b4b2:	68fb      	ldr	r3, [r7, #12]
 800b4b4:	22ff      	movs	r2, #255	; 0xff
 800b4b6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800b4ba:	683b      	ldr	r3, [r7, #0]
 800b4bc:	2b00      	cmp	r3, #0
 800b4be:	d10e      	bne.n	800b4de <xQueueGenericReset+0x8e>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b4c0:	68fb      	ldr	r3, [r7, #12]
 800b4c2:	691b      	ldr	r3, [r3, #16]
 800b4c4:	2b00      	cmp	r3, #0
 800b4c6:	d014      	beq.n	800b4f2 <xQueueGenericReset+0xa2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b4c8:	68fb      	ldr	r3, [r7, #12]
 800b4ca:	3310      	adds	r3, #16
 800b4cc:	4618      	mov	r0, r3
 800b4ce:	f001 f80d 	bl	800c4ec <xTaskRemoveFromEventList>
 800b4d2:	4603      	mov	r3, r0
 800b4d4:	2b00      	cmp	r3, #0
 800b4d6:	d00c      	beq.n	800b4f2 <xQueueGenericReset+0xa2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800b4d8:	f001 fdba 	bl	800d050 <vPortYield>
 800b4dc:	e009      	b.n	800b4f2 <xQueueGenericReset+0xa2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800b4de:	68fb      	ldr	r3, [r7, #12]
 800b4e0:	3310      	adds	r3, #16
 800b4e2:	4618      	mov	r0, r3
 800b4e4:	f7ff ff00 	bl	800b2e8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800b4e8:	68fb      	ldr	r3, [r7, #12]
 800b4ea:	3324      	adds	r3, #36	; 0x24
 800b4ec:	4618      	mov	r0, r3
 800b4ee:	f7ff fefb 	bl	800b2e8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800b4f2:	f001 fdd1 	bl	800d098 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800b4f6:	2301      	movs	r3, #1
}
 800b4f8:	4618      	mov	r0, r3
 800b4fa:	3710      	adds	r7, #16
 800b4fc:	46bd      	mov	sp, r7
 800b4fe:	bd80      	pop	{r7, pc}

0800b500 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800b500:	b580      	push	{r7, lr}
 800b502:	b088      	sub	sp, #32
 800b504:	af02      	add	r7, sp, #8
 800b506:	60f8      	str	r0, [r7, #12]
 800b508:	60b9      	str	r1, [r7, #8]
 800b50a:	607a      	str	r2, [r7, #4]
 800b50c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800b50e:	68fb      	ldr	r3, [r7, #12]
 800b510:	2b00      	cmp	r3, #0
 800b512:	d102      	bne.n	800b51a <xQueueGenericCreateStatic+0x1a>
 800b514:	f001 fee0 	bl	800d2d8 <ulSetInterruptMask>
 800b518:	e7fe      	b.n	800b518 <xQueueGenericCreateStatic+0x18>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800b51a:	683b      	ldr	r3, [r7, #0]
 800b51c:	2b00      	cmp	r3, #0
 800b51e:	d102      	bne.n	800b526 <xQueueGenericCreateStatic+0x26>
 800b520:	f001 feda 	bl	800d2d8 <ulSetInterruptMask>
 800b524:	e7fe      	b.n	800b524 <xQueueGenericCreateStatic+0x24>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800b526:	687b      	ldr	r3, [r7, #4]
 800b528:	2b00      	cmp	r3, #0
 800b52a:	d002      	beq.n	800b532 <xQueueGenericCreateStatic+0x32>
 800b52c:	68bb      	ldr	r3, [r7, #8]
 800b52e:	2b00      	cmp	r3, #0
 800b530:	d001      	beq.n	800b536 <xQueueGenericCreateStatic+0x36>
 800b532:	2301      	movs	r3, #1
 800b534:	e000      	b.n	800b538 <xQueueGenericCreateStatic+0x38>
 800b536:	2300      	movs	r3, #0
 800b538:	2b00      	cmp	r3, #0
 800b53a:	d102      	bne.n	800b542 <xQueueGenericCreateStatic+0x42>
 800b53c:	f001 fecc 	bl	800d2d8 <ulSetInterruptMask>
 800b540:	e7fe      	b.n	800b540 <xQueueGenericCreateStatic+0x40>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800b542:	687b      	ldr	r3, [r7, #4]
 800b544:	2b00      	cmp	r3, #0
 800b546:	d102      	bne.n	800b54e <xQueueGenericCreateStatic+0x4e>
 800b548:	68bb      	ldr	r3, [r7, #8]
 800b54a:	2b00      	cmp	r3, #0
 800b54c:	d101      	bne.n	800b552 <xQueueGenericCreateStatic+0x52>
 800b54e:	2301      	movs	r3, #1
 800b550:	e000      	b.n	800b554 <xQueueGenericCreateStatic+0x54>
 800b552:	2300      	movs	r3, #0
 800b554:	2b00      	cmp	r3, #0
 800b556:	d102      	bne.n	800b55e <xQueueGenericCreateStatic+0x5e>
 800b558:	f001 febe 	bl	800d2d8 <ulSetInterruptMask>
 800b55c:	e7fe      	b.n	800b55c <xQueueGenericCreateStatic+0x5c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800b55e:	2350      	movs	r3, #80	; 0x50
 800b560:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Queue_t ) );
 800b562:	693b      	ldr	r3, [r7, #16]
 800b564:	2b50      	cmp	r3, #80	; 0x50
 800b566:	d002      	beq.n	800b56e <xQueueGenericCreateStatic+0x6e>
 800b568:	f001 feb6 	bl	800d2d8 <ulSetInterruptMask>
 800b56c:	e7fe      	b.n	800b56c <xQueueGenericCreateStatic+0x6c>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800b56e:	693b      	ldr	r3, [r7, #16]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800b570:	683b      	ldr	r3, [r7, #0]
 800b572:	617b      	str	r3, [r7, #20]

		if( pxNewQueue != NULL )
 800b574:	697b      	ldr	r3, [r7, #20]
 800b576:	2b00      	cmp	r3, #0
 800b578:	d00d      	beq.n	800b596 <xQueueGenericCreateStatic+0x96>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800b57a:	697b      	ldr	r3, [r7, #20]
 800b57c:	2201      	movs	r2, #1
 800b57e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800b582:	f897 2020 	ldrb.w	r2, [r7, #32]
 800b586:	697b      	ldr	r3, [r7, #20]
 800b588:	9300      	str	r3, [sp, #0]
 800b58a:	4613      	mov	r3, r2
 800b58c:	687a      	ldr	r2, [r7, #4]
 800b58e:	68b9      	ldr	r1, [r7, #8]
 800b590:	68f8      	ldr	r0, [r7, #12]
 800b592:	f000 f805 	bl	800b5a0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800b596:	697b      	ldr	r3, [r7, #20]
	}
 800b598:	4618      	mov	r0, r3
 800b59a:	3718      	adds	r7, #24
 800b59c:	46bd      	mov	sp, r7
 800b59e:	bd80      	pop	{r7, pc}

0800b5a0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800b5a0:	b580      	push	{r7, lr}
 800b5a2:	b084      	sub	sp, #16
 800b5a4:	af00      	add	r7, sp, #0
 800b5a6:	60f8      	str	r0, [r7, #12]
 800b5a8:	60b9      	str	r1, [r7, #8]
 800b5aa:	607a      	str	r2, [r7, #4]
 800b5ac:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800b5ae:	68bb      	ldr	r3, [r7, #8]
 800b5b0:	2b00      	cmp	r3, #0
 800b5b2:	d103      	bne.n	800b5bc <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800b5b4:	69bb      	ldr	r3, [r7, #24]
 800b5b6:	69ba      	ldr	r2, [r7, #24]
 800b5b8:	601a      	str	r2, [r3, #0]
 800b5ba:	e002      	b.n	800b5c2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800b5bc:	69bb      	ldr	r3, [r7, #24]
 800b5be:	687a      	ldr	r2, [r7, #4]
 800b5c0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800b5c2:	69bb      	ldr	r3, [r7, #24]
 800b5c4:	68fa      	ldr	r2, [r7, #12]
 800b5c6:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800b5c8:	69bb      	ldr	r3, [r7, #24]
 800b5ca:	68ba      	ldr	r2, [r7, #8]
 800b5cc:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800b5ce:	2101      	movs	r1, #1
 800b5d0:	69b8      	ldr	r0, [r7, #24]
 800b5d2:	f7ff ff3d 	bl	800b450 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800b5d6:	69bb      	ldr	r3, [r7, #24]
 800b5d8:	78fa      	ldrb	r2, [r7, #3]
 800b5da:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800b5de:	bf00      	nop
 800b5e0:	3710      	adds	r7, #16
 800b5e2:	46bd      	mov	sp, r7
 800b5e4:	bd80      	pop	{r7, pc}

0800b5e6 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800b5e6:	b580      	push	{r7, lr}
 800b5e8:	b08a      	sub	sp, #40	; 0x28
 800b5ea:	af00      	add	r7, sp, #0
 800b5ec:	60f8      	str	r0, [r7, #12]
 800b5ee:	60b9      	str	r1, [r7, #8]
 800b5f0:	607a      	str	r2, [r7, #4]
 800b5f2:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800b5f4:	2300      	movs	r3, #0
 800b5f6:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800b5f8:	68fb      	ldr	r3, [r7, #12]
 800b5fa:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
 800b5fc:	6a3b      	ldr	r3, [r7, #32]
 800b5fe:	2b00      	cmp	r3, #0
 800b600:	d102      	bne.n	800b608 <xQueueGenericSend+0x22>
 800b602:	f001 fe69 	bl	800d2d8 <ulSetInterruptMask>
 800b606:	e7fe      	b.n	800b606 <xQueueGenericSend+0x20>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b608:	68bb      	ldr	r3, [r7, #8]
 800b60a:	2b00      	cmp	r3, #0
 800b60c:	d103      	bne.n	800b616 <xQueueGenericSend+0x30>
 800b60e:	6a3b      	ldr	r3, [r7, #32]
 800b610:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b612:	2b00      	cmp	r3, #0
 800b614:	d101      	bne.n	800b61a <xQueueGenericSend+0x34>
 800b616:	2301      	movs	r3, #1
 800b618:	e000      	b.n	800b61c <xQueueGenericSend+0x36>
 800b61a:	2300      	movs	r3, #0
 800b61c:	2b00      	cmp	r3, #0
 800b61e:	d102      	bne.n	800b626 <xQueueGenericSend+0x40>
 800b620:	f001 fe5a 	bl	800d2d8 <ulSetInterruptMask>
 800b624:	e7fe      	b.n	800b624 <xQueueGenericSend+0x3e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800b626:	683b      	ldr	r3, [r7, #0]
 800b628:	2b02      	cmp	r3, #2
 800b62a:	d103      	bne.n	800b634 <xQueueGenericSend+0x4e>
 800b62c:	6a3b      	ldr	r3, [r7, #32]
 800b62e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b630:	2b01      	cmp	r3, #1
 800b632:	d101      	bne.n	800b638 <xQueueGenericSend+0x52>
 800b634:	2301      	movs	r3, #1
 800b636:	e000      	b.n	800b63a <xQueueGenericSend+0x54>
 800b638:	2300      	movs	r3, #0
 800b63a:	2b00      	cmp	r3, #0
 800b63c:	d102      	bne.n	800b644 <xQueueGenericSend+0x5e>
 800b63e:	f001 fe4b 	bl	800d2d8 <ulSetInterruptMask>
 800b642:	e7fe      	b.n	800b642 <xQueueGenericSend+0x5c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b644:	f001 f8e8 	bl	800c818 <xTaskGetSchedulerState>
 800b648:	4603      	mov	r3, r0
 800b64a:	2b00      	cmp	r3, #0
 800b64c:	d102      	bne.n	800b654 <xQueueGenericSend+0x6e>
 800b64e:	687b      	ldr	r3, [r7, #4]
 800b650:	2b00      	cmp	r3, #0
 800b652:	d101      	bne.n	800b658 <xQueueGenericSend+0x72>
 800b654:	2301      	movs	r3, #1
 800b656:	e000      	b.n	800b65a <xQueueGenericSend+0x74>
 800b658:	2300      	movs	r3, #0
 800b65a:	2b00      	cmp	r3, #0
 800b65c:	d102      	bne.n	800b664 <xQueueGenericSend+0x7e>
 800b65e:	f001 fe3b 	bl	800d2d8 <ulSetInterruptMask>
 800b662:	e7fe      	b.n	800b662 <xQueueGenericSend+0x7c>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800b664:	f001 fd06 	bl	800d074 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800b668:	6a3b      	ldr	r3, [r7, #32]
 800b66a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b66c:	6a3b      	ldr	r3, [r7, #32]
 800b66e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b670:	429a      	cmp	r2, r3
 800b672:	d302      	bcc.n	800b67a <xQueueGenericSend+0x94>
 800b674:	683b      	ldr	r3, [r7, #0]
 800b676:	2b02      	cmp	r3, #2
 800b678:	d11d      	bne.n	800b6b6 <xQueueGenericSend+0xd0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800b67a:	683a      	ldr	r2, [r7, #0]
 800b67c:	68b9      	ldr	r1, [r7, #8]
 800b67e:	6a38      	ldr	r0, [r7, #32]
 800b680:	f000 f9a4 	bl	800b9cc <prvCopyDataToQueue>
 800b684:	61f8      	str	r0, [r7, #28]

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b686:	6a3b      	ldr	r3, [r7, #32]
 800b688:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b68a:	2b00      	cmp	r3, #0
 800b68c:	d00a      	beq.n	800b6a4 <xQueueGenericSend+0xbe>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b68e:	6a3b      	ldr	r3, [r7, #32]
 800b690:	3324      	adds	r3, #36	; 0x24
 800b692:	4618      	mov	r0, r3
 800b694:	f000 ff2a 	bl	800c4ec <xTaskRemoveFromEventList>
 800b698:	4603      	mov	r3, r0
 800b69a:	2b00      	cmp	r3, #0
 800b69c:	d007      	beq.n	800b6ae <xQueueGenericSend+0xc8>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800b69e:	f001 fcd7 	bl	800d050 <vPortYield>
 800b6a2:	e004      	b.n	800b6ae <xQueueGenericSend+0xc8>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800b6a4:	69fb      	ldr	r3, [r7, #28]
 800b6a6:	2b00      	cmp	r3, #0
 800b6a8:	d001      	beq.n	800b6ae <xQueueGenericSend+0xc8>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800b6aa:	f001 fcd1 	bl	800d050 <vPortYield>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800b6ae:	f001 fcf3 	bl	800d098 <vPortExitCritical>
				return pdPASS;
 800b6b2:	2301      	movs	r3, #1
 800b6b4:	e05c      	b.n	800b770 <xQueueGenericSend+0x18a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800b6b6:	687b      	ldr	r3, [r7, #4]
 800b6b8:	2b00      	cmp	r3, #0
 800b6ba:	d103      	bne.n	800b6c4 <xQueueGenericSend+0xde>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800b6bc:	f001 fcec 	bl	800d098 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800b6c0:	2300      	movs	r3, #0
 800b6c2:	e055      	b.n	800b770 <xQueueGenericSend+0x18a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800b6c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6c6:	2b00      	cmp	r3, #0
 800b6c8:	d106      	bne.n	800b6d8 <xQueueGenericSend+0xf2>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b6ca:	f107 0314 	add.w	r3, r7, #20
 800b6ce:	4618      	mov	r0, r3
 800b6d0:	f000 ff68 	bl	800c5a4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800b6d4:	2301      	movs	r3, #1
 800b6d6:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800b6d8:	f001 fcde 	bl	800d098 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800b6dc:	f000 fd14 	bl	800c108 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b6e0:	f001 fcc8 	bl	800d074 <vPortEnterCritical>
 800b6e4:	6a3b      	ldr	r3, [r7, #32]
 800b6e6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b6ea:	b25b      	sxtb	r3, r3
 800b6ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b6f0:	d103      	bne.n	800b6fa <xQueueGenericSend+0x114>
 800b6f2:	6a3b      	ldr	r3, [r7, #32]
 800b6f4:	2200      	movs	r2, #0
 800b6f6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b6fa:	6a3b      	ldr	r3, [r7, #32]
 800b6fc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b700:	b25b      	sxtb	r3, r3
 800b702:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b706:	d103      	bne.n	800b710 <xQueueGenericSend+0x12a>
 800b708:	6a3b      	ldr	r3, [r7, #32]
 800b70a:	2200      	movs	r2, #0
 800b70c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b710:	f001 fcc2 	bl	800d098 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b714:	1d3a      	adds	r2, r7, #4
 800b716:	f107 0314 	add.w	r3, r7, #20
 800b71a:	4611      	mov	r1, r2
 800b71c:	4618      	mov	r0, r3
 800b71e:	f000 ff57 	bl	800c5d0 <xTaskCheckForTimeOut>
 800b722:	4603      	mov	r3, r0
 800b724:	2b00      	cmp	r3, #0
 800b726:	d11d      	bne.n	800b764 <xQueueGenericSend+0x17e>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800b728:	6a38      	ldr	r0, [r7, #32]
 800b72a:	f000 fa47 	bl	800bbbc <prvIsQueueFull>
 800b72e:	4603      	mov	r3, r0
 800b730:	2b00      	cmp	r3, #0
 800b732:	d011      	beq.n	800b758 <xQueueGenericSend+0x172>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800b734:	6a3b      	ldr	r3, [r7, #32]
 800b736:	3310      	adds	r3, #16
 800b738:	687a      	ldr	r2, [r7, #4]
 800b73a:	4611      	mov	r1, r2
 800b73c:	4618      	mov	r0, r3
 800b73e:	f000 fe95 	bl	800c46c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800b742:	6a38      	ldr	r0, [r7, #32]
 800b744:	f000 f9d2 	bl	800baec <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800b748:	f000 fcec 	bl	800c124 <xTaskResumeAll>
 800b74c:	4603      	mov	r3, r0
 800b74e:	2b00      	cmp	r3, #0
 800b750:	d188      	bne.n	800b664 <xQueueGenericSend+0x7e>
				{
					portYIELD_WITHIN_API();
 800b752:	f001 fc7d 	bl	800d050 <vPortYield>
 800b756:	e785      	b.n	800b664 <xQueueGenericSend+0x7e>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800b758:	6a38      	ldr	r0, [r7, #32]
 800b75a:	f000 f9c7 	bl	800baec <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b75e:	f000 fce1 	bl	800c124 <xTaskResumeAll>
 800b762:	e77f      	b.n	800b664 <xQueueGenericSend+0x7e>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800b764:	6a38      	ldr	r0, [r7, #32]
 800b766:	f000 f9c1 	bl	800baec <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b76a:	f000 fcdb 	bl	800c124 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800b76e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800b770:	4618      	mov	r0, r3
 800b772:	3728      	adds	r7, #40	; 0x28
 800b774:	46bd      	mov	sp, r7
 800b776:	bd80      	pop	{r7, pc}

0800b778 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800b778:	b580      	push	{r7, lr}
 800b77a:	b08a      	sub	sp, #40	; 0x28
 800b77c:	af00      	add	r7, sp, #0
 800b77e:	60f8      	str	r0, [r7, #12]
 800b780:	60b9      	str	r1, [r7, #8]
 800b782:	607a      	str	r2, [r7, #4]
 800b784:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800b786:	68fb      	ldr	r3, [r7, #12]
 800b788:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
 800b78a:	6a3b      	ldr	r3, [r7, #32]
 800b78c:	2b00      	cmp	r3, #0
 800b78e:	d102      	bne.n	800b796 <xQueueGenericSendFromISR+0x1e>
 800b790:	f001 fda2 	bl	800d2d8 <ulSetInterruptMask>
 800b794:	e7fe      	b.n	800b794 <xQueueGenericSendFromISR+0x1c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b796:	68bb      	ldr	r3, [r7, #8]
 800b798:	2b00      	cmp	r3, #0
 800b79a:	d103      	bne.n	800b7a4 <xQueueGenericSendFromISR+0x2c>
 800b79c:	6a3b      	ldr	r3, [r7, #32]
 800b79e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b7a0:	2b00      	cmp	r3, #0
 800b7a2:	d101      	bne.n	800b7a8 <xQueueGenericSendFromISR+0x30>
 800b7a4:	2301      	movs	r3, #1
 800b7a6:	e000      	b.n	800b7aa <xQueueGenericSendFromISR+0x32>
 800b7a8:	2300      	movs	r3, #0
 800b7aa:	2b00      	cmp	r3, #0
 800b7ac:	d102      	bne.n	800b7b4 <xQueueGenericSendFromISR+0x3c>
 800b7ae:	f001 fd93 	bl	800d2d8 <ulSetInterruptMask>
 800b7b2:	e7fe      	b.n	800b7b2 <xQueueGenericSendFromISR+0x3a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800b7b4:	683b      	ldr	r3, [r7, #0]
 800b7b6:	2b02      	cmp	r3, #2
 800b7b8:	d103      	bne.n	800b7c2 <xQueueGenericSendFromISR+0x4a>
 800b7ba:	6a3b      	ldr	r3, [r7, #32]
 800b7bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b7be:	2b01      	cmp	r3, #1
 800b7c0:	d101      	bne.n	800b7c6 <xQueueGenericSendFromISR+0x4e>
 800b7c2:	2301      	movs	r3, #1
 800b7c4:	e000      	b.n	800b7c8 <xQueueGenericSendFromISR+0x50>
 800b7c6:	2300      	movs	r3, #0
 800b7c8:	2b00      	cmp	r3, #0
 800b7ca:	d102      	bne.n	800b7d2 <xQueueGenericSendFromISR+0x5a>
 800b7cc:	f001 fd84 	bl	800d2d8 <ulSetInterruptMask>
 800b7d0:	e7fe      	b.n	800b7d0 <xQueueGenericSendFromISR+0x58>
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800b7d2:	f001 fd81 	bl	800d2d8 <ulSetInterruptMask>
 800b7d6:	61f8      	str	r0, [r7, #28]
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800b7d8:	6a3b      	ldr	r3, [r7, #32]
 800b7da:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b7dc:	6a3b      	ldr	r3, [r7, #32]
 800b7de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b7e0:	429a      	cmp	r2, r3
 800b7e2:	d302      	bcc.n	800b7ea <xQueueGenericSendFromISR+0x72>
 800b7e4:	683b      	ldr	r3, [r7, #0]
 800b7e6:	2b02      	cmp	r3, #2
 800b7e8:	d12d      	bne.n	800b846 <xQueueGenericSendFromISR+0xce>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800b7ea:	6a3b      	ldr	r3, [r7, #32]
 800b7ec:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b7f0:	76fb      	strb	r3, [r7, #27]
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b7f2:	6a3b      	ldr	r3, [r7, #32]
 800b7f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b7f6:	617b      	str	r3, [r7, #20]
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800b7f8:	683a      	ldr	r2, [r7, #0]
 800b7fa:	68b9      	ldr	r1, [r7, #8]
 800b7fc:	6a38      	ldr	r0, [r7, #32]
 800b7fe:	f000 f8e5 	bl	800b9cc <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800b802:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800b806:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b80a:	d112      	bne.n	800b832 <xQueueGenericSendFromISR+0xba>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b80c:	6a3b      	ldr	r3, [r7, #32]
 800b80e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b810:	2b00      	cmp	r3, #0
 800b812:	d015      	beq.n	800b840 <xQueueGenericSendFromISR+0xc8>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b814:	6a3b      	ldr	r3, [r7, #32]
 800b816:	3324      	adds	r3, #36	; 0x24
 800b818:	4618      	mov	r0, r3
 800b81a:	f000 fe67 	bl	800c4ec <xTaskRemoveFromEventList>
 800b81e:	4603      	mov	r3, r0
 800b820:	2b00      	cmp	r3, #0
 800b822:	d00d      	beq.n	800b840 <xQueueGenericSendFromISR+0xc8>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800b824:	687b      	ldr	r3, [r7, #4]
 800b826:	2b00      	cmp	r3, #0
 800b828:	d00a      	beq.n	800b840 <xQueueGenericSendFromISR+0xc8>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800b82a:	687b      	ldr	r3, [r7, #4]
 800b82c:	2201      	movs	r2, #1
 800b82e:	601a      	str	r2, [r3, #0]
 800b830:	e006      	b.n	800b840 <xQueueGenericSendFromISR+0xc8>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800b832:	7efb      	ldrb	r3, [r7, #27]
 800b834:	3301      	adds	r3, #1
 800b836:	b2db      	uxtb	r3, r3
 800b838:	b25a      	sxtb	r2, r3
 800b83a:	6a3b      	ldr	r3, [r7, #32]
 800b83c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800b840:	2301      	movs	r3, #1
 800b842:	627b      	str	r3, [r7, #36]	; 0x24
		{
 800b844:	e001      	b.n	800b84a <xQueueGenericSendFromISR+0xd2>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800b846:	2300      	movs	r3, #0
 800b848:	627b      	str	r3, [r7, #36]	; 0x24
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 800b84a:	69f8      	ldr	r0, [r7, #28]
 800b84c:	f001 fd51 	bl	800d2f2 <vClearInterruptMask>

	return xReturn;
 800b850:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800b852:	4618      	mov	r0, r3
 800b854:	3728      	adds	r7, #40	; 0x28
 800b856:	46bd      	mov	sp, r7
 800b858:	bd80      	pop	{r7, pc}

0800b85a <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800b85a:	b580      	push	{r7, lr}
 800b85c:	b08a      	sub	sp, #40	; 0x28
 800b85e:	af00      	add	r7, sp, #0
 800b860:	60f8      	str	r0, [r7, #12]
 800b862:	60b9      	str	r1, [r7, #8]
 800b864:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800b866:	2300      	movs	r3, #0
 800b868:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800b86a:	68fb      	ldr	r3, [r7, #12]
 800b86c:	623b      	str	r3, [r7, #32]

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800b86e:	6a3b      	ldr	r3, [r7, #32]
 800b870:	2b00      	cmp	r3, #0
 800b872:	d102      	bne.n	800b87a <xQueueReceive+0x20>
 800b874:	f001 fd30 	bl	800d2d8 <ulSetInterruptMask>
 800b878:	e7fe      	b.n	800b878 <xQueueReceive+0x1e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b87a:	68bb      	ldr	r3, [r7, #8]
 800b87c:	2b00      	cmp	r3, #0
 800b87e:	d103      	bne.n	800b888 <xQueueReceive+0x2e>
 800b880:	6a3b      	ldr	r3, [r7, #32]
 800b882:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b884:	2b00      	cmp	r3, #0
 800b886:	d101      	bne.n	800b88c <xQueueReceive+0x32>
 800b888:	2301      	movs	r3, #1
 800b88a:	e000      	b.n	800b88e <xQueueReceive+0x34>
 800b88c:	2300      	movs	r3, #0
 800b88e:	2b00      	cmp	r3, #0
 800b890:	d102      	bne.n	800b898 <xQueueReceive+0x3e>
 800b892:	f001 fd21 	bl	800d2d8 <ulSetInterruptMask>
 800b896:	e7fe      	b.n	800b896 <xQueueReceive+0x3c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b898:	f000 ffbe 	bl	800c818 <xTaskGetSchedulerState>
 800b89c:	4603      	mov	r3, r0
 800b89e:	2b00      	cmp	r3, #0
 800b8a0:	d102      	bne.n	800b8a8 <xQueueReceive+0x4e>
 800b8a2:	687b      	ldr	r3, [r7, #4]
 800b8a4:	2b00      	cmp	r3, #0
 800b8a6:	d101      	bne.n	800b8ac <xQueueReceive+0x52>
 800b8a8:	2301      	movs	r3, #1
 800b8aa:	e000      	b.n	800b8ae <xQueueReceive+0x54>
 800b8ac:	2300      	movs	r3, #0
 800b8ae:	2b00      	cmp	r3, #0
 800b8b0:	d102      	bne.n	800b8b8 <xQueueReceive+0x5e>
 800b8b2:	f001 fd11 	bl	800d2d8 <ulSetInterruptMask>
 800b8b6:	e7fe      	b.n	800b8b6 <xQueueReceive+0x5c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800b8b8:	f001 fbdc 	bl	800d074 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b8bc:	6a3b      	ldr	r3, [r7, #32]
 800b8be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b8c0:	61fb      	str	r3, [r7, #28]

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b8c2:	69fb      	ldr	r3, [r7, #28]
 800b8c4:	2b00      	cmp	r3, #0
 800b8c6:	d019      	beq.n	800b8fc <xQueueReceive+0xa2>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800b8c8:	68b9      	ldr	r1, [r7, #8]
 800b8ca:	6a38      	ldr	r0, [r7, #32]
 800b8cc:	f000 f8e8 	bl	800baa0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800b8d0:	69fb      	ldr	r3, [r7, #28]
 800b8d2:	1e5a      	subs	r2, r3, #1
 800b8d4:	6a3b      	ldr	r3, [r7, #32]
 800b8d6:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b8d8:	6a3b      	ldr	r3, [r7, #32]
 800b8da:	691b      	ldr	r3, [r3, #16]
 800b8dc:	2b00      	cmp	r3, #0
 800b8de:	d009      	beq.n	800b8f4 <xQueueReceive+0x9a>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b8e0:	6a3b      	ldr	r3, [r7, #32]
 800b8e2:	3310      	adds	r3, #16
 800b8e4:	4618      	mov	r0, r3
 800b8e6:	f000 fe01 	bl	800c4ec <xTaskRemoveFromEventList>
 800b8ea:	4603      	mov	r3, r0
 800b8ec:	2b00      	cmp	r3, #0
 800b8ee:	d001      	beq.n	800b8f4 <xQueueReceive+0x9a>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800b8f0:	f001 fbae 	bl	800d050 <vPortYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800b8f4:	f001 fbd0 	bl	800d098 <vPortExitCritical>
				return pdPASS;
 800b8f8:	2301      	movs	r3, #1
 800b8fa:	e063      	b.n	800b9c4 <xQueueReceive+0x16a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800b8fc:	687b      	ldr	r3, [r7, #4]
 800b8fe:	2b00      	cmp	r3, #0
 800b900:	d103      	bne.n	800b90a <xQueueReceive+0xb0>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800b902:	f001 fbc9 	bl	800d098 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800b906:	2300      	movs	r3, #0
 800b908:	e05c      	b.n	800b9c4 <xQueueReceive+0x16a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800b90a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b90c:	2b00      	cmp	r3, #0
 800b90e:	d106      	bne.n	800b91e <xQueueReceive+0xc4>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b910:	f107 0314 	add.w	r3, r7, #20
 800b914:	4618      	mov	r0, r3
 800b916:	f000 fe45 	bl	800c5a4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800b91a:	2301      	movs	r3, #1
 800b91c:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800b91e:	f001 fbbb 	bl	800d098 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800b922:	f000 fbf1 	bl	800c108 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b926:	f001 fba5 	bl	800d074 <vPortEnterCritical>
 800b92a:	6a3b      	ldr	r3, [r7, #32]
 800b92c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b930:	b25b      	sxtb	r3, r3
 800b932:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b936:	d103      	bne.n	800b940 <xQueueReceive+0xe6>
 800b938:	6a3b      	ldr	r3, [r7, #32]
 800b93a:	2200      	movs	r2, #0
 800b93c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b940:	6a3b      	ldr	r3, [r7, #32]
 800b942:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b946:	b25b      	sxtb	r3, r3
 800b948:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b94c:	d103      	bne.n	800b956 <xQueueReceive+0xfc>
 800b94e:	6a3b      	ldr	r3, [r7, #32]
 800b950:	2200      	movs	r2, #0
 800b952:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b956:	f001 fb9f 	bl	800d098 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b95a:	1d3a      	adds	r2, r7, #4
 800b95c:	f107 0314 	add.w	r3, r7, #20
 800b960:	4611      	mov	r1, r2
 800b962:	4618      	mov	r0, r3
 800b964:	f000 fe34 	bl	800c5d0 <xTaskCheckForTimeOut>
 800b968:	4603      	mov	r3, r0
 800b96a:	2b00      	cmp	r3, #0
 800b96c:	d11d      	bne.n	800b9aa <xQueueReceive+0x150>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b96e:	6a38      	ldr	r0, [r7, #32]
 800b970:	f000 f90e 	bl	800bb90 <prvIsQueueEmpty>
 800b974:	4603      	mov	r3, r0
 800b976:	2b00      	cmp	r3, #0
 800b978:	d011      	beq.n	800b99e <xQueueReceive+0x144>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800b97a:	6a3b      	ldr	r3, [r7, #32]
 800b97c:	3324      	adds	r3, #36	; 0x24
 800b97e:	687a      	ldr	r2, [r7, #4]
 800b980:	4611      	mov	r1, r2
 800b982:	4618      	mov	r0, r3
 800b984:	f000 fd72 	bl	800c46c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800b988:	6a38      	ldr	r0, [r7, #32]
 800b98a:	f000 f8af 	bl	800baec <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800b98e:	f000 fbc9 	bl	800c124 <xTaskResumeAll>
 800b992:	4603      	mov	r3, r0
 800b994:	2b00      	cmp	r3, #0
 800b996:	d18f      	bne.n	800b8b8 <xQueueReceive+0x5e>
				{
					portYIELD_WITHIN_API();
 800b998:	f001 fb5a 	bl	800d050 <vPortYield>
 800b99c:	e78c      	b.n	800b8b8 <xQueueReceive+0x5e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800b99e:	6a38      	ldr	r0, [r7, #32]
 800b9a0:	f000 f8a4 	bl	800baec <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b9a4:	f000 fbbe 	bl	800c124 <xTaskResumeAll>
 800b9a8:	e786      	b.n	800b8b8 <xQueueReceive+0x5e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800b9aa:	6a38      	ldr	r0, [r7, #32]
 800b9ac:	f000 f89e 	bl	800baec <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b9b0:	f000 fbb8 	bl	800c124 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b9b4:	6a38      	ldr	r0, [r7, #32]
 800b9b6:	f000 f8eb 	bl	800bb90 <prvIsQueueEmpty>
 800b9ba:	4603      	mov	r3, r0
 800b9bc:	2b00      	cmp	r3, #0
 800b9be:	f43f af7b 	beq.w	800b8b8 <xQueueReceive+0x5e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800b9c2:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800b9c4:	4618      	mov	r0, r3
 800b9c6:	3728      	adds	r7, #40	; 0x28
 800b9c8:	46bd      	mov	sp, r7
 800b9ca:	bd80      	pop	{r7, pc}

0800b9cc <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800b9cc:	b580      	push	{r7, lr}
 800b9ce:	b086      	sub	sp, #24
 800b9d0:	af00      	add	r7, sp, #0
 800b9d2:	60f8      	str	r0, [r7, #12]
 800b9d4:	60b9      	str	r1, [r7, #8]
 800b9d6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800b9d8:	2300      	movs	r3, #0
 800b9da:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b9dc:	68fb      	ldr	r3, [r7, #12]
 800b9de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b9e0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800b9e2:	68fb      	ldr	r3, [r7, #12]
 800b9e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b9e6:	2b00      	cmp	r3, #0
 800b9e8:	d10d      	bne.n	800ba06 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800b9ea:	68fb      	ldr	r3, [r7, #12]
 800b9ec:	681b      	ldr	r3, [r3, #0]
 800b9ee:	2b00      	cmp	r3, #0
 800b9f0:	d14d      	bne.n	800ba8e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800b9f2:	68fb      	ldr	r3, [r7, #12]
 800b9f4:	689b      	ldr	r3, [r3, #8]
 800b9f6:	4618      	mov	r0, r3
 800b9f8:	f000 ff2c 	bl	800c854 <xTaskPriorityDisinherit>
 800b9fc:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800b9fe:	68fb      	ldr	r3, [r7, #12]
 800ba00:	2200      	movs	r2, #0
 800ba02:	609a      	str	r2, [r3, #8]
 800ba04:	e043      	b.n	800ba8e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800ba06:	687b      	ldr	r3, [r7, #4]
 800ba08:	2b00      	cmp	r3, #0
 800ba0a:	d119      	bne.n	800ba40 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800ba0c:	68fb      	ldr	r3, [r7, #12]
 800ba0e:	6858      	ldr	r0, [r3, #4]
 800ba10:	68fb      	ldr	r3, [r7, #12]
 800ba12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ba14:	461a      	mov	r2, r3
 800ba16:	68b9      	ldr	r1, [r7, #8]
 800ba18:	f001 fee2 	bl	800d7e0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800ba1c:	68fb      	ldr	r3, [r7, #12]
 800ba1e:	685a      	ldr	r2, [r3, #4]
 800ba20:	68fb      	ldr	r3, [r7, #12]
 800ba22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ba24:	441a      	add	r2, r3
 800ba26:	68fb      	ldr	r3, [r7, #12]
 800ba28:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800ba2a:	68fb      	ldr	r3, [r7, #12]
 800ba2c:	685a      	ldr	r2, [r3, #4]
 800ba2e:	68fb      	ldr	r3, [r7, #12]
 800ba30:	689b      	ldr	r3, [r3, #8]
 800ba32:	429a      	cmp	r2, r3
 800ba34:	d32b      	bcc.n	800ba8e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800ba36:	68fb      	ldr	r3, [r7, #12]
 800ba38:	681a      	ldr	r2, [r3, #0]
 800ba3a:	68fb      	ldr	r3, [r7, #12]
 800ba3c:	605a      	str	r2, [r3, #4]
 800ba3e:	e026      	b.n	800ba8e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800ba40:	68fb      	ldr	r3, [r7, #12]
 800ba42:	68d8      	ldr	r0, [r3, #12]
 800ba44:	68fb      	ldr	r3, [r7, #12]
 800ba46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ba48:	461a      	mov	r2, r3
 800ba4a:	68b9      	ldr	r1, [r7, #8]
 800ba4c:	f001 fec8 	bl	800d7e0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800ba50:	68fb      	ldr	r3, [r7, #12]
 800ba52:	68da      	ldr	r2, [r3, #12]
 800ba54:	68fb      	ldr	r3, [r7, #12]
 800ba56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ba58:	425b      	negs	r3, r3
 800ba5a:	441a      	add	r2, r3
 800ba5c:	68fb      	ldr	r3, [r7, #12]
 800ba5e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800ba60:	68fb      	ldr	r3, [r7, #12]
 800ba62:	68da      	ldr	r2, [r3, #12]
 800ba64:	68fb      	ldr	r3, [r7, #12]
 800ba66:	681b      	ldr	r3, [r3, #0]
 800ba68:	429a      	cmp	r2, r3
 800ba6a:	d207      	bcs.n	800ba7c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800ba6c:	68fb      	ldr	r3, [r7, #12]
 800ba6e:	689a      	ldr	r2, [r3, #8]
 800ba70:	68fb      	ldr	r3, [r7, #12]
 800ba72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ba74:	425b      	negs	r3, r3
 800ba76:	441a      	add	r2, r3
 800ba78:	68fb      	ldr	r3, [r7, #12]
 800ba7a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800ba7c:	687b      	ldr	r3, [r7, #4]
 800ba7e:	2b02      	cmp	r3, #2
 800ba80:	d105      	bne.n	800ba8e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800ba82:	693b      	ldr	r3, [r7, #16]
 800ba84:	2b00      	cmp	r3, #0
 800ba86:	d002      	beq.n	800ba8e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800ba88:	693b      	ldr	r3, [r7, #16]
 800ba8a:	3b01      	subs	r3, #1
 800ba8c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800ba8e:	693b      	ldr	r3, [r7, #16]
 800ba90:	1c5a      	adds	r2, r3, #1
 800ba92:	68fb      	ldr	r3, [r7, #12]
 800ba94:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800ba96:	697b      	ldr	r3, [r7, #20]
}
 800ba98:	4618      	mov	r0, r3
 800ba9a:	3718      	adds	r7, #24
 800ba9c:	46bd      	mov	sp, r7
 800ba9e:	bd80      	pop	{r7, pc}

0800baa0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800baa0:	b580      	push	{r7, lr}
 800baa2:	b082      	sub	sp, #8
 800baa4:	af00      	add	r7, sp, #0
 800baa6:	6078      	str	r0, [r7, #4]
 800baa8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800baaa:	687b      	ldr	r3, [r7, #4]
 800baac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800baae:	2b00      	cmp	r3, #0
 800bab0:	d018      	beq.n	800bae4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800bab2:	687b      	ldr	r3, [r7, #4]
 800bab4:	68da      	ldr	r2, [r3, #12]
 800bab6:	687b      	ldr	r3, [r7, #4]
 800bab8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800baba:	441a      	add	r2, r3
 800babc:	687b      	ldr	r3, [r7, #4]
 800babe:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800bac0:	687b      	ldr	r3, [r7, #4]
 800bac2:	68da      	ldr	r2, [r3, #12]
 800bac4:	687b      	ldr	r3, [r7, #4]
 800bac6:	689b      	ldr	r3, [r3, #8]
 800bac8:	429a      	cmp	r2, r3
 800baca:	d303      	bcc.n	800bad4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800bacc:	687b      	ldr	r3, [r7, #4]
 800bace:	681a      	ldr	r2, [r3, #0]
 800bad0:	687b      	ldr	r3, [r7, #4]
 800bad2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800bad4:	687b      	ldr	r3, [r7, #4]
 800bad6:	68d9      	ldr	r1, [r3, #12]
 800bad8:	687b      	ldr	r3, [r7, #4]
 800bada:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800badc:	461a      	mov	r2, r3
 800bade:	6838      	ldr	r0, [r7, #0]
 800bae0:	f001 fe7e 	bl	800d7e0 <memcpy>
	}
}
 800bae4:	bf00      	nop
 800bae6:	3708      	adds	r7, #8
 800bae8:	46bd      	mov	sp, r7
 800baea:	bd80      	pop	{r7, pc}

0800baec <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800baec:	b580      	push	{r7, lr}
 800baee:	b084      	sub	sp, #16
 800baf0:	af00      	add	r7, sp, #0
 800baf2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800baf4:	f001 fabe 	bl	800d074 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800baf8:	687b      	ldr	r3, [r7, #4]
 800bafa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800bafe:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800bb00:	e011      	b.n	800bb26 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800bb02:	687b      	ldr	r3, [r7, #4]
 800bb04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb06:	2b00      	cmp	r3, #0
 800bb08:	d012      	beq.n	800bb30 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800bb0a:	687b      	ldr	r3, [r7, #4]
 800bb0c:	3324      	adds	r3, #36	; 0x24
 800bb0e:	4618      	mov	r0, r3
 800bb10:	f000 fcec 	bl	800c4ec <xTaskRemoveFromEventList>
 800bb14:	4603      	mov	r3, r0
 800bb16:	2b00      	cmp	r3, #0
 800bb18:	d001      	beq.n	800bb1e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800bb1a:	f000 fdab 	bl	800c674 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800bb1e:	7bfb      	ldrb	r3, [r7, #15]
 800bb20:	3b01      	subs	r3, #1
 800bb22:	b2db      	uxtb	r3, r3
 800bb24:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800bb26:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bb2a:	2b00      	cmp	r3, #0
 800bb2c:	dce9      	bgt.n	800bb02 <prvUnlockQueue+0x16>
 800bb2e:	e000      	b.n	800bb32 <prvUnlockQueue+0x46>
					break;
 800bb30:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800bb32:	687b      	ldr	r3, [r7, #4]
 800bb34:	22ff      	movs	r2, #255	; 0xff
 800bb36:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800bb3a:	f001 faad 	bl	800d098 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800bb3e:	f001 fa99 	bl	800d074 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800bb42:	687b      	ldr	r3, [r7, #4]
 800bb44:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800bb48:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800bb4a:	e011      	b.n	800bb70 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800bb4c:	687b      	ldr	r3, [r7, #4]
 800bb4e:	691b      	ldr	r3, [r3, #16]
 800bb50:	2b00      	cmp	r3, #0
 800bb52:	d012      	beq.n	800bb7a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800bb54:	687b      	ldr	r3, [r7, #4]
 800bb56:	3310      	adds	r3, #16
 800bb58:	4618      	mov	r0, r3
 800bb5a:	f000 fcc7 	bl	800c4ec <xTaskRemoveFromEventList>
 800bb5e:	4603      	mov	r3, r0
 800bb60:	2b00      	cmp	r3, #0
 800bb62:	d001      	beq.n	800bb68 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800bb64:	f000 fd86 	bl	800c674 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800bb68:	7bbb      	ldrb	r3, [r7, #14]
 800bb6a:	3b01      	subs	r3, #1
 800bb6c:	b2db      	uxtb	r3, r3
 800bb6e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800bb70:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800bb74:	2b00      	cmp	r3, #0
 800bb76:	dce9      	bgt.n	800bb4c <prvUnlockQueue+0x60>
 800bb78:	e000      	b.n	800bb7c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800bb7a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800bb7c:	687b      	ldr	r3, [r7, #4]
 800bb7e:	22ff      	movs	r2, #255	; 0xff
 800bb80:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800bb84:	f001 fa88 	bl	800d098 <vPortExitCritical>
}
 800bb88:	bf00      	nop
 800bb8a:	3710      	adds	r7, #16
 800bb8c:	46bd      	mov	sp, r7
 800bb8e:	bd80      	pop	{r7, pc}

0800bb90 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800bb90:	b580      	push	{r7, lr}
 800bb92:	b084      	sub	sp, #16
 800bb94:	af00      	add	r7, sp, #0
 800bb96:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800bb98:	f001 fa6c 	bl	800d074 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800bb9c:	687b      	ldr	r3, [r7, #4]
 800bb9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bba0:	2b00      	cmp	r3, #0
 800bba2:	d102      	bne.n	800bbaa <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800bba4:	2301      	movs	r3, #1
 800bba6:	60fb      	str	r3, [r7, #12]
 800bba8:	e001      	b.n	800bbae <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800bbaa:	2300      	movs	r3, #0
 800bbac:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800bbae:	f001 fa73 	bl	800d098 <vPortExitCritical>

	return xReturn;
 800bbb2:	68fb      	ldr	r3, [r7, #12]
}
 800bbb4:	4618      	mov	r0, r3
 800bbb6:	3710      	adds	r7, #16
 800bbb8:	46bd      	mov	sp, r7
 800bbba:	bd80      	pop	{r7, pc}

0800bbbc <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800bbbc:	b580      	push	{r7, lr}
 800bbbe:	b084      	sub	sp, #16
 800bbc0:	af00      	add	r7, sp, #0
 800bbc2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800bbc4:	f001 fa56 	bl	800d074 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800bbc8:	687b      	ldr	r3, [r7, #4]
 800bbca:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bbcc:	687b      	ldr	r3, [r7, #4]
 800bbce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bbd0:	429a      	cmp	r2, r3
 800bbd2:	d102      	bne.n	800bbda <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800bbd4:	2301      	movs	r3, #1
 800bbd6:	60fb      	str	r3, [r7, #12]
 800bbd8:	e001      	b.n	800bbde <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800bbda:	2300      	movs	r3, #0
 800bbdc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800bbde:	f001 fa5b 	bl	800d098 <vPortExitCritical>

	return xReturn;
 800bbe2:	68fb      	ldr	r3, [r7, #12]
}
 800bbe4:	4618      	mov	r0, r3
 800bbe6:	3710      	adds	r7, #16
 800bbe8:	46bd      	mov	sp, r7
 800bbea:	bd80      	pop	{r7, pc}

0800bbec <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800bbec:	b480      	push	{r7}
 800bbee:	b085      	sub	sp, #20
 800bbf0:	af00      	add	r7, sp, #0
 800bbf2:	6078      	str	r0, [r7, #4]
 800bbf4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800bbf6:	2300      	movs	r3, #0
 800bbf8:	60fb      	str	r3, [r7, #12]
 800bbfa:	e014      	b.n	800bc26 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800bbfc:	4a0f      	ldr	r2, [pc, #60]	; (800bc3c <vQueueAddToRegistry+0x50>)
 800bbfe:	68fb      	ldr	r3, [r7, #12]
 800bc00:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800bc04:	2b00      	cmp	r3, #0
 800bc06:	d10b      	bne.n	800bc20 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800bc08:	490c      	ldr	r1, [pc, #48]	; (800bc3c <vQueueAddToRegistry+0x50>)
 800bc0a:	68fb      	ldr	r3, [r7, #12]
 800bc0c:	683a      	ldr	r2, [r7, #0]
 800bc0e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800bc12:	4a0a      	ldr	r2, [pc, #40]	; (800bc3c <vQueueAddToRegistry+0x50>)
 800bc14:	68fb      	ldr	r3, [r7, #12]
 800bc16:	00db      	lsls	r3, r3, #3
 800bc18:	4413      	add	r3, r2
 800bc1a:	687a      	ldr	r2, [r7, #4]
 800bc1c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800bc1e:	e006      	b.n	800bc2e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800bc20:	68fb      	ldr	r3, [r7, #12]
 800bc22:	3301      	adds	r3, #1
 800bc24:	60fb      	str	r3, [r7, #12]
 800bc26:	68fb      	ldr	r3, [r7, #12]
 800bc28:	2b07      	cmp	r3, #7
 800bc2a:	d9e7      	bls.n	800bbfc <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800bc2c:	bf00      	nop
 800bc2e:	bf00      	nop
 800bc30:	3714      	adds	r7, #20
 800bc32:	46bd      	mov	sp, r7
 800bc34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc38:	4770      	bx	lr
 800bc3a:	bf00      	nop
 800bc3c:	20001038 	.word	0x20001038

0800bc40 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800bc40:	b580      	push	{r7, lr}
 800bc42:	b086      	sub	sp, #24
 800bc44:	af00      	add	r7, sp, #0
 800bc46:	60f8      	str	r0, [r7, #12]
 800bc48:	60b9      	str	r1, [r7, #8]
 800bc4a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800bc4c:	68fb      	ldr	r3, [r7, #12]
 800bc4e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800bc50:	f001 fa10 	bl	800d074 <vPortEnterCritical>
 800bc54:	697b      	ldr	r3, [r7, #20]
 800bc56:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800bc5a:	b25b      	sxtb	r3, r3
 800bc5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bc60:	d103      	bne.n	800bc6a <vQueueWaitForMessageRestricted+0x2a>
 800bc62:	697b      	ldr	r3, [r7, #20]
 800bc64:	2200      	movs	r2, #0
 800bc66:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800bc6a:	697b      	ldr	r3, [r7, #20]
 800bc6c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800bc70:	b25b      	sxtb	r3, r3
 800bc72:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bc76:	d103      	bne.n	800bc80 <vQueueWaitForMessageRestricted+0x40>
 800bc78:	697b      	ldr	r3, [r7, #20]
 800bc7a:	2200      	movs	r2, #0
 800bc7c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800bc80:	f001 fa0a 	bl	800d098 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800bc84:	697b      	ldr	r3, [r7, #20]
 800bc86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bc88:	2b00      	cmp	r3, #0
 800bc8a:	d106      	bne.n	800bc9a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800bc8c:	697b      	ldr	r3, [r7, #20]
 800bc8e:	3324      	adds	r3, #36	; 0x24
 800bc90:	687a      	ldr	r2, [r7, #4]
 800bc92:	68b9      	ldr	r1, [r7, #8]
 800bc94:	4618      	mov	r0, r3
 800bc96:	f000 fc05 	bl	800c4a4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800bc9a:	6978      	ldr	r0, [r7, #20]
 800bc9c:	f7ff ff26 	bl	800baec <prvUnlockQueue>
	}
 800bca0:	bf00      	nop
 800bca2:	3718      	adds	r7, #24
 800bca4:	46bd      	mov	sp, r7
 800bca6:	bd80      	pop	{r7, pc}

0800bca8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800bca8:	b580      	push	{r7, lr}
 800bcaa:	b08c      	sub	sp, #48	; 0x30
 800bcac:	af04      	add	r7, sp, #16
 800bcae:	60f8      	str	r0, [r7, #12]
 800bcb0:	60b9      	str	r1, [r7, #8]
 800bcb2:	607a      	str	r2, [r7, #4]
 800bcb4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800bcb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bcb8:	2b00      	cmp	r3, #0
 800bcba:	d102      	bne.n	800bcc2 <xTaskCreateStatic+0x1a>
 800bcbc:	f001 fb0c 	bl	800d2d8 <ulSetInterruptMask>
 800bcc0:	e7fe      	b.n	800bcc0 <xTaskCreateStatic+0x18>
		configASSERT( pxTaskBuffer != NULL );
 800bcc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bcc4:	2b00      	cmp	r3, #0
 800bcc6:	d102      	bne.n	800bcce <xTaskCreateStatic+0x26>
 800bcc8:	f001 fb06 	bl	800d2d8 <ulSetInterruptMask>
 800bccc:	e7fe      	b.n	800bccc <xTaskCreateStatic+0x24>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800bcce:	235c      	movs	r3, #92	; 0x5c
 800bcd0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( TCB_t ) );
 800bcd2:	697b      	ldr	r3, [r7, #20]
 800bcd4:	2b5c      	cmp	r3, #92	; 0x5c
 800bcd6:	d002      	beq.n	800bcde <xTaskCreateStatic+0x36>
 800bcd8:	f001 fafe 	bl	800d2d8 <ulSetInterruptMask>
 800bcdc:	e7fe      	b.n	800bcdc <xTaskCreateStatic+0x34>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800bcde:	697b      	ldr	r3, [r7, #20]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800bce0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bce2:	2b00      	cmp	r3, #0
 800bce4:	d01e      	beq.n	800bd24 <xTaskCreateStatic+0x7c>
 800bce6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bce8:	2b00      	cmp	r3, #0
 800bcea:	d01b      	beq.n	800bd24 <xTaskCreateStatic+0x7c>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800bcec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bcee:	61fb      	str	r3, [r7, #28]
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800bcf0:	69fb      	ldr	r3, [r7, #28]
 800bcf2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bcf4:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800bcf6:	69fb      	ldr	r3, [r7, #28]
 800bcf8:	2202      	movs	r2, #2
 800bcfa:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800bcfe:	2300      	movs	r3, #0
 800bd00:	9303      	str	r3, [sp, #12]
 800bd02:	69fb      	ldr	r3, [r7, #28]
 800bd04:	9302      	str	r3, [sp, #8]
 800bd06:	f107 0318 	add.w	r3, r7, #24
 800bd0a:	9301      	str	r3, [sp, #4]
 800bd0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd0e:	9300      	str	r3, [sp, #0]
 800bd10:	683b      	ldr	r3, [r7, #0]
 800bd12:	687a      	ldr	r2, [r7, #4]
 800bd14:	68b9      	ldr	r1, [r7, #8]
 800bd16:	68f8      	ldr	r0, [r7, #12]
 800bd18:	f000 f850 	bl	800bdbc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800bd1c:	69f8      	ldr	r0, [r7, #28]
 800bd1e:	f000 f8d7 	bl	800bed0 <prvAddNewTaskToReadyList>
 800bd22:	e001      	b.n	800bd28 <xTaskCreateStatic+0x80>
		}
		else
		{
			xReturn = NULL;
 800bd24:	2300      	movs	r3, #0
 800bd26:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800bd28:	69bb      	ldr	r3, [r7, #24]
	}
 800bd2a:	4618      	mov	r0, r3
 800bd2c:	3720      	adds	r7, #32
 800bd2e:	46bd      	mov	sp, r7
 800bd30:	bd80      	pop	{r7, pc}

0800bd32 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800bd32:	b580      	push	{r7, lr}
 800bd34:	b08c      	sub	sp, #48	; 0x30
 800bd36:	af04      	add	r7, sp, #16
 800bd38:	60f8      	str	r0, [r7, #12]
 800bd3a:	60b9      	str	r1, [r7, #8]
 800bd3c:	603b      	str	r3, [r7, #0]
 800bd3e:	4613      	mov	r3, r2
 800bd40:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800bd42:	88fb      	ldrh	r3, [r7, #6]
 800bd44:	009b      	lsls	r3, r3, #2
 800bd46:	4618      	mov	r0, r3
 800bd48:	f001 fb26 	bl	800d398 <pvPortMalloc>
 800bd4c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800bd4e:	697b      	ldr	r3, [r7, #20]
 800bd50:	2b00      	cmp	r3, #0
 800bd52:	d00e      	beq.n	800bd72 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800bd54:	205c      	movs	r0, #92	; 0x5c
 800bd56:	f001 fb1f 	bl	800d398 <pvPortMalloc>
 800bd5a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800bd5c:	69fb      	ldr	r3, [r7, #28]
 800bd5e:	2b00      	cmp	r3, #0
 800bd60:	d003      	beq.n	800bd6a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800bd62:	69fb      	ldr	r3, [r7, #28]
 800bd64:	697a      	ldr	r2, [r7, #20]
 800bd66:	631a      	str	r2, [r3, #48]	; 0x30
 800bd68:	e005      	b.n	800bd76 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800bd6a:	6978      	ldr	r0, [r7, #20]
 800bd6c:	f001 fbc8 	bl	800d500 <vPortFree>
 800bd70:	e001      	b.n	800bd76 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800bd72:	2300      	movs	r3, #0
 800bd74:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800bd76:	69fb      	ldr	r3, [r7, #28]
 800bd78:	2b00      	cmp	r3, #0
 800bd7a:	d017      	beq.n	800bdac <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800bd7c:	69fb      	ldr	r3, [r7, #28]
 800bd7e:	2200      	movs	r2, #0
 800bd80:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800bd84:	88fa      	ldrh	r2, [r7, #6]
 800bd86:	2300      	movs	r3, #0
 800bd88:	9303      	str	r3, [sp, #12]
 800bd8a:	69fb      	ldr	r3, [r7, #28]
 800bd8c:	9302      	str	r3, [sp, #8]
 800bd8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd90:	9301      	str	r3, [sp, #4]
 800bd92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd94:	9300      	str	r3, [sp, #0]
 800bd96:	683b      	ldr	r3, [r7, #0]
 800bd98:	68b9      	ldr	r1, [r7, #8]
 800bd9a:	68f8      	ldr	r0, [r7, #12]
 800bd9c:	f000 f80e 	bl	800bdbc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800bda0:	69f8      	ldr	r0, [r7, #28]
 800bda2:	f000 f895 	bl	800bed0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800bda6:	2301      	movs	r3, #1
 800bda8:	61bb      	str	r3, [r7, #24]
 800bdaa:	e002      	b.n	800bdb2 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800bdac:	f04f 33ff 	mov.w	r3, #4294967295
 800bdb0:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800bdb2:	69bb      	ldr	r3, [r7, #24]
	}
 800bdb4:	4618      	mov	r0, r3
 800bdb6:	3720      	adds	r7, #32
 800bdb8:	46bd      	mov	sp, r7
 800bdba:	bd80      	pop	{r7, pc}

0800bdbc <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800bdbc:	b580      	push	{r7, lr}
 800bdbe:	b086      	sub	sp, #24
 800bdc0:	af00      	add	r7, sp, #0
 800bdc2:	60f8      	str	r0, [r7, #12]
 800bdc4:	60b9      	str	r1, [r7, #8]
 800bdc6:	607a      	str	r2, [r7, #4]
 800bdc8:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800bdca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bdcc:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800bdce:	687b      	ldr	r3, [r7, #4]
 800bdd0:	009b      	lsls	r3, r3, #2
 800bdd2:	461a      	mov	r2, r3
 800bdd4:	21a5      	movs	r1, #165	; 0xa5
 800bdd6:	f001 fccf 	bl	800d778 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800bdda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bddc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800bdde:	687b      	ldr	r3, [r7, #4]
 800bde0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800bde4:	3b01      	subs	r3, #1
 800bde6:	009b      	lsls	r3, r3, #2
 800bde8:	4413      	add	r3, r2
 800bdea:	613b      	str	r3, [r7, #16]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800bdec:	693b      	ldr	r3, [r7, #16]
 800bdee:	f023 0307 	bic.w	r3, r3, #7
 800bdf2:	613b      	str	r3, [r7, #16]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800bdf4:	693b      	ldr	r3, [r7, #16]
 800bdf6:	f003 0307 	and.w	r3, r3, #7
 800bdfa:	2b00      	cmp	r3, #0
 800bdfc:	d002      	beq.n	800be04 <prvInitialiseNewTask+0x48>
 800bdfe:	f001 fa6b 	bl	800d2d8 <ulSetInterruptMask>
 800be02:	e7fe      	b.n	800be02 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800be04:	68bb      	ldr	r3, [r7, #8]
 800be06:	2b00      	cmp	r3, #0
 800be08:	d01f      	beq.n	800be4a <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800be0a:	2300      	movs	r3, #0
 800be0c:	617b      	str	r3, [r7, #20]
 800be0e:	e012      	b.n	800be36 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800be10:	68ba      	ldr	r2, [r7, #8]
 800be12:	697b      	ldr	r3, [r7, #20]
 800be14:	4413      	add	r3, r2
 800be16:	7819      	ldrb	r1, [r3, #0]
 800be18:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800be1a:	697b      	ldr	r3, [r7, #20]
 800be1c:	4413      	add	r3, r2
 800be1e:	3334      	adds	r3, #52	; 0x34
 800be20:	460a      	mov	r2, r1
 800be22:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800be24:	68ba      	ldr	r2, [r7, #8]
 800be26:	697b      	ldr	r3, [r7, #20]
 800be28:	4413      	add	r3, r2
 800be2a:	781b      	ldrb	r3, [r3, #0]
 800be2c:	2b00      	cmp	r3, #0
 800be2e:	d006      	beq.n	800be3e <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800be30:	697b      	ldr	r3, [r7, #20]
 800be32:	3301      	adds	r3, #1
 800be34:	617b      	str	r3, [r7, #20]
 800be36:	697b      	ldr	r3, [r7, #20]
 800be38:	2b0f      	cmp	r3, #15
 800be3a:	d9e9      	bls.n	800be10 <prvInitialiseNewTask+0x54>
 800be3c:	e000      	b.n	800be40 <prvInitialiseNewTask+0x84>
			{
				break;
 800be3e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800be40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be42:	2200      	movs	r2, #0
 800be44:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800be48:	e003      	b.n	800be52 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800be4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be4c:	2200      	movs	r2, #0
 800be4e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800be52:	6a3b      	ldr	r3, [r7, #32]
 800be54:	2b37      	cmp	r3, #55	; 0x37
 800be56:	d901      	bls.n	800be5c <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800be58:	2337      	movs	r3, #55	; 0x37
 800be5a:	623b      	str	r3, [r7, #32]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800be5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be5e:	6a3a      	ldr	r2, [r7, #32]
 800be60:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800be62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be64:	6a3a      	ldr	r2, [r7, #32]
 800be66:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800be68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be6a:	2200      	movs	r2, #0
 800be6c:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800be6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be70:	3304      	adds	r3, #4
 800be72:	4618      	mov	r0, r3
 800be74:	f7ff fa58 	bl	800b328 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800be78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be7a:	3318      	adds	r3, #24
 800be7c:	4618      	mov	r0, r3
 800be7e:	f7ff fa53 	bl	800b328 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800be82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be84:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800be86:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800be88:	6a3b      	ldr	r3, [r7, #32]
 800be8a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800be8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be90:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800be92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be94:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800be96:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800be98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be9a:	2200      	movs	r2, #0
 800be9c:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800be9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bea0:	2200      	movs	r2, #0
 800bea2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
		function as well. */
		#if( portHAS_STACK_OVERFLOW_CHECKING == 1 )
		{
			#if( portSTACK_GROWTH < 0 )
			{
				pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxNewTCB->pxStack, pxTaskCode, pvParameters );
 800bea6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bea8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800beaa:	683b      	ldr	r3, [r7, #0]
 800beac:	68fa      	ldr	r2, [r7, #12]
 800beae:	6938      	ldr	r0, [r7, #16]
 800beb0:	f001 f93c 	bl	800d12c <pxPortInitialiseStack>
 800beb4:	4602      	mov	r2, r0
 800beb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800beb8:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800beba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bebc:	2b00      	cmp	r3, #0
 800bebe:	d002      	beq.n	800bec6 <prvInitialiseNewTask+0x10a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800bec0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bec2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bec4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800bec6:	bf00      	nop
 800bec8:	3718      	adds	r7, #24
 800beca:	46bd      	mov	sp, r7
 800becc:	bd80      	pop	{r7, pc}
	...

0800bed0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800bed0:	b580      	push	{r7, lr}
 800bed2:	b082      	sub	sp, #8
 800bed4:	af00      	add	r7, sp, #0
 800bed6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800bed8:	f001 f8cc 	bl	800d074 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800bedc:	4b2a      	ldr	r3, [pc, #168]	; (800bf88 <prvAddNewTaskToReadyList+0xb8>)
 800bede:	681b      	ldr	r3, [r3, #0]
 800bee0:	3301      	adds	r3, #1
 800bee2:	4a29      	ldr	r2, [pc, #164]	; (800bf88 <prvAddNewTaskToReadyList+0xb8>)
 800bee4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800bee6:	4b29      	ldr	r3, [pc, #164]	; (800bf8c <prvAddNewTaskToReadyList+0xbc>)
 800bee8:	681b      	ldr	r3, [r3, #0]
 800beea:	2b00      	cmp	r3, #0
 800beec:	d109      	bne.n	800bf02 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800beee:	4a27      	ldr	r2, [pc, #156]	; (800bf8c <prvAddNewTaskToReadyList+0xbc>)
 800bef0:	687b      	ldr	r3, [r7, #4]
 800bef2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800bef4:	4b24      	ldr	r3, [pc, #144]	; (800bf88 <prvAddNewTaskToReadyList+0xb8>)
 800bef6:	681b      	ldr	r3, [r3, #0]
 800bef8:	2b01      	cmp	r3, #1
 800befa:	d110      	bne.n	800bf1e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800befc:	f000 fbd6 	bl	800c6ac <prvInitialiseTaskLists>
 800bf00:	e00d      	b.n	800bf1e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800bf02:	4b23      	ldr	r3, [pc, #140]	; (800bf90 <prvAddNewTaskToReadyList+0xc0>)
 800bf04:	681b      	ldr	r3, [r3, #0]
 800bf06:	2b00      	cmp	r3, #0
 800bf08:	d109      	bne.n	800bf1e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800bf0a:	4b20      	ldr	r3, [pc, #128]	; (800bf8c <prvAddNewTaskToReadyList+0xbc>)
 800bf0c:	681b      	ldr	r3, [r3, #0]
 800bf0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bf10:	687b      	ldr	r3, [r7, #4]
 800bf12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf14:	429a      	cmp	r2, r3
 800bf16:	d802      	bhi.n	800bf1e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800bf18:	4a1c      	ldr	r2, [pc, #112]	; (800bf8c <prvAddNewTaskToReadyList+0xbc>)
 800bf1a:	687b      	ldr	r3, [r7, #4]
 800bf1c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800bf1e:	4b1d      	ldr	r3, [pc, #116]	; (800bf94 <prvAddNewTaskToReadyList+0xc4>)
 800bf20:	681b      	ldr	r3, [r3, #0]
 800bf22:	3301      	adds	r3, #1
 800bf24:	4a1b      	ldr	r2, [pc, #108]	; (800bf94 <prvAddNewTaskToReadyList+0xc4>)
 800bf26:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800bf28:	4b1a      	ldr	r3, [pc, #104]	; (800bf94 <prvAddNewTaskToReadyList+0xc4>)
 800bf2a:	681a      	ldr	r2, [r3, #0]
 800bf2c:	687b      	ldr	r3, [r7, #4]
 800bf2e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800bf30:	687b      	ldr	r3, [r7, #4]
 800bf32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bf34:	4b18      	ldr	r3, [pc, #96]	; (800bf98 <prvAddNewTaskToReadyList+0xc8>)
 800bf36:	681b      	ldr	r3, [r3, #0]
 800bf38:	429a      	cmp	r2, r3
 800bf3a:	d903      	bls.n	800bf44 <prvAddNewTaskToReadyList+0x74>
 800bf3c:	687b      	ldr	r3, [r7, #4]
 800bf3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf40:	4a15      	ldr	r2, [pc, #84]	; (800bf98 <prvAddNewTaskToReadyList+0xc8>)
 800bf42:	6013      	str	r3, [r2, #0]
 800bf44:	687b      	ldr	r3, [r7, #4]
 800bf46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bf48:	4613      	mov	r3, r2
 800bf4a:	009b      	lsls	r3, r3, #2
 800bf4c:	4413      	add	r3, r2
 800bf4e:	009b      	lsls	r3, r3, #2
 800bf50:	4a12      	ldr	r2, [pc, #72]	; (800bf9c <prvAddNewTaskToReadyList+0xcc>)
 800bf52:	441a      	add	r2, r3
 800bf54:	687b      	ldr	r3, [r7, #4]
 800bf56:	3304      	adds	r3, #4
 800bf58:	4619      	mov	r1, r3
 800bf5a:	4610      	mov	r0, r2
 800bf5c:	f7ff f9f1 	bl	800b342 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800bf60:	f001 f89a 	bl	800d098 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800bf64:	4b0a      	ldr	r3, [pc, #40]	; (800bf90 <prvAddNewTaskToReadyList+0xc0>)
 800bf66:	681b      	ldr	r3, [r3, #0]
 800bf68:	2b00      	cmp	r3, #0
 800bf6a:	d008      	beq.n	800bf7e <prvAddNewTaskToReadyList+0xae>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800bf6c:	4b07      	ldr	r3, [pc, #28]	; (800bf8c <prvAddNewTaskToReadyList+0xbc>)
 800bf6e:	681b      	ldr	r3, [r3, #0]
 800bf70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bf72:	687b      	ldr	r3, [r7, #4]
 800bf74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf76:	429a      	cmp	r2, r3
 800bf78:	d201      	bcs.n	800bf7e <prvAddNewTaskToReadyList+0xae>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800bf7a:	f001 f869 	bl	800d050 <vPortYield>
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800bf7e:	bf00      	nop
 800bf80:	3708      	adds	r7, #8
 800bf82:	46bd      	mov	sp, r7
 800bf84:	bd80      	pop	{r7, pc}
 800bf86:	bf00      	nop
 800bf88:	2000154c 	.word	0x2000154c
 800bf8c:	20001078 	.word	0x20001078
 800bf90:	20001558 	.word	0x20001558
 800bf94:	20001568 	.word	0x20001568
 800bf98:	20001554 	.word	0x20001554
 800bf9c:	2000107c 	.word	0x2000107c

0800bfa0 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 800bfa0:	b580      	push	{r7, lr}
 800bfa2:	b086      	sub	sp, #24
 800bfa4:	af00      	add	r7, sp, #0
 800bfa6:	6078      	str	r0, [r7, #4]
 800bfa8:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 800bfaa:	2300      	movs	r3, #0
 800bfac:	617b      	str	r3, [r7, #20]

		configASSERT( pxPreviousWakeTime );
 800bfae:	687b      	ldr	r3, [r7, #4]
 800bfb0:	2b00      	cmp	r3, #0
 800bfb2:	d102      	bne.n	800bfba <vTaskDelayUntil+0x1a>
 800bfb4:	f001 f990 	bl	800d2d8 <ulSetInterruptMask>
 800bfb8:	e7fe      	b.n	800bfb8 <vTaskDelayUntil+0x18>
		configASSERT( ( xTimeIncrement > 0U ) );
 800bfba:	683b      	ldr	r3, [r7, #0]
 800bfbc:	2b00      	cmp	r3, #0
 800bfbe:	d102      	bne.n	800bfc6 <vTaskDelayUntil+0x26>
 800bfc0:	f001 f98a 	bl	800d2d8 <ulSetInterruptMask>
 800bfc4:	e7fe      	b.n	800bfc4 <vTaskDelayUntil+0x24>
		configASSERT( uxSchedulerSuspended == 0 );
 800bfc6:	4b23      	ldr	r3, [pc, #140]	; (800c054 <vTaskDelayUntil+0xb4>)
 800bfc8:	681b      	ldr	r3, [r3, #0]
 800bfca:	2b00      	cmp	r3, #0
 800bfcc:	d002      	beq.n	800bfd4 <vTaskDelayUntil+0x34>
 800bfce:	f001 f983 	bl	800d2d8 <ulSetInterruptMask>
 800bfd2:	e7fe      	b.n	800bfd2 <vTaskDelayUntil+0x32>

		vTaskSuspendAll();
 800bfd4:	f000 f898 	bl	800c108 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 800bfd8:	4b1f      	ldr	r3, [pc, #124]	; (800c058 <vTaskDelayUntil+0xb8>)
 800bfda:	681b      	ldr	r3, [r3, #0]
 800bfdc:	613b      	str	r3, [r7, #16]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 800bfde:	687b      	ldr	r3, [r7, #4]
 800bfe0:	681b      	ldr	r3, [r3, #0]
 800bfe2:	683a      	ldr	r2, [r7, #0]
 800bfe4:	4413      	add	r3, r2
 800bfe6:	60fb      	str	r3, [r7, #12]

			if( xConstTickCount < *pxPreviousWakeTime )
 800bfe8:	687b      	ldr	r3, [r7, #4]
 800bfea:	681b      	ldr	r3, [r3, #0]
 800bfec:	693a      	ldr	r2, [r7, #16]
 800bfee:	429a      	cmp	r2, r3
 800bff0:	d20b      	bcs.n	800c00a <vTaskDelayUntil+0x6a>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 800bff2:	687b      	ldr	r3, [r7, #4]
 800bff4:	681b      	ldr	r3, [r3, #0]
 800bff6:	68fa      	ldr	r2, [r7, #12]
 800bff8:	429a      	cmp	r2, r3
 800bffa:	d211      	bcs.n	800c020 <vTaskDelayUntil+0x80>
 800bffc:	68fa      	ldr	r2, [r7, #12]
 800bffe:	693b      	ldr	r3, [r7, #16]
 800c000:	429a      	cmp	r2, r3
 800c002:	d90d      	bls.n	800c020 <vTaskDelayUntil+0x80>
				{
					xShouldDelay = pdTRUE;
 800c004:	2301      	movs	r3, #1
 800c006:	617b      	str	r3, [r7, #20]
 800c008:	e00a      	b.n	800c020 <vTaskDelayUntil+0x80>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 800c00a:	687b      	ldr	r3, [r7, #4]
 800c00c:	681b      	ldr	r3, [r3, #0]
 800c00e:	68fa      	ldr	r2, [r7, #12]
 800c010:	429a      	cmp	r2, r3
 800c012:	d303      	bcc.n	800c01c <vTaskDelayUntil+0x7c>
 800c014:	68fa      	ldr	r2, [r7, #12]
 800c016:	693b      	ldr	r3, [r7, #16]
 800c018:	429a      	cmp	r2, r3
 800c01a:	d901      	bls.n	800c020 <vTaskDelayUntil+0x80>
				{
					xShouldDelay = pdTRUE;
 800c01c:	2301      	movs	r3, #1
 800c01e:	617b      	str	r3, [r7, #20]
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 800c020:	687b      	ldr	r3, [r7, #4]
 800c022:	68fa      	ldr	r2, [r7, #12]
 800c024:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 800c026:	697b      	ldr	r3, [r7, #20]
 800c028:	2b00      	cmp	r3, #0
 800c02a:	d006      	beq.n	800c03a <vTaskDelayUntil+0x9a>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 800c02c:	68fa      	ldr	r2, [r7, #12]
 800c02e:	693b      	ldr	r3, [r7, #16]
 800c030:	1ad3      	subs	r3, r2, r3
 800c032:	2100      	movs	r1, #0
 800c034:	4618      	mov	r0, r3
 800c036:	f000 fc6b 	bl	800c910 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 800c03a:	f000 f873 	bl	800c124 <xTaskResumeAll>
 800c03e:	60b8      	str	r0, [r7, #8]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800c040:	68bb      	ldr	r3, [r7, #8]
 800c042:	2b00      	cmp	r3, #0
 800c044:	d101      	bne.n	800c04a <vTaskDelayUntil+0xaa>
		{
			portYIELD_WITHIN_API();
 800c046:	f001 f803 	bl	800d050 <vPortYield>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800c04a:	bf00      	nop
 800c04c:	3718      	adds	r7, #24
 800c04e:	46bd      	mov	sp, r7
 800c050:	bd80      	pop	{r7, pc}
 800c052:	bf00      	nop
 800c054:	20001574 	.word	0x20001574
 800c058:	20001550 	.word	0x20001550

0800c05c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800c05c:	b580      	push	{r7, lr}
 800c05e:	b088      	sub	sp, #32
 800c060:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800c062:	2300      	movs	r3, #0
 800c064:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800c066:	2300      	movs	r3, #0
 800c068:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800c06a:	463a      	mov	r2, r7
 800c06c:	1d39      	adds	r1, r7, #4
 800c06e:	f107 0308 	add.w	r3, r7, #8
 800c072:	4618      	mov	r0, r3
 800c074:	f7ff f904 	bl	800b280 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800c078:	6839      	ldr	r1, [r7, #0]
 800c07a:	687b      	ldr	r3, [r7, #4]
 800c07c:	68ba      	ldr	r2, [r7, #8]
 800c07e:	9202      	str	r2, [sp, #8]
 800c080:	9301      	str	r3, [sp, #4]
 800c082:	2300      	movs	r3, #0
 800c084:	9300      	str	r3, [sp, #0]
 800c086:	2300      	movs	r3, #0
 800c088:	460a      	mov	r2, r1
 800c08a:	4919      	ldr	r1, [pc, #100]	; (800c0f0 <vTaskStartScheduler+0x94>)
 800c08c:	4819      	ldr	r0, [pc, #100]	; (800c0f4 <vTaskStartScheduler+0x98>)
 800c08e:	f7ff fe0b 	bl	800bca8 <xTaskCreateStatic>
 800c092:	4603      	mov	r3, r0
 800c094:	4a18      	ldr	r2, [pc, #96]	; (800c0f8 <vTaskStartScheduler+0x9c>)
 800c096:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800c098:	4b17      	ldr	r3, [pc, #92]	; (800c0f8 <vTaskStartScheduler+0x9c>)
 800c09a:	681b      	ldr	r3, [r3, #0]
 800c09c:	2b00      	cmp	r3, #0
 800c09e:	d002      	beq.n	800c0a6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800c0a0:	2301      	movs	r3, #1
 800c0a2:	60fb      	str	r3, [r7, #12]
 800c0a4:	e001      	b.n	800c0aa <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800c0a6:	2300      	movs	r3, #0
 800c0a8:	60fb      	str	r3, [r7, #12]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800c0aa:	68fb      	ldr	r3, [r7, #12]
 800c0ac:	2b01      	cmp	r3, #1
 800c0ae:	d102      	bne.n	800c0b6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800c0b0:	f000 fc82 	bl	800c9b8 <xTimerCreateTimerTask>
 800c0b4:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800c0b6:	68fb      	ldr	r3, [r7, #12]
 800c0b8:	2b01      	cmp	r3, #1
 800c0ba:	d10e      	bne.n	800c0da <vTaskStartScheduler+0x7e>
		/* Interrupts are turned off here, to ensure a tick does not occur
		before or during the call to xPortStartScheduler().  The stacks of
		the created tasks contain a status word with interrupts switched on
		so interrupts will automatically get re-enabled when the first task
		starts to run. */
		portDISABLE_INTERRUPTS();
 800c0bc:	f001 f90c 	bl	800d2d8 <ulSetInterruptMask>
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800c0c0:	4b0e      	ldr	r3, [pc, #56]	; (800c0fc <vTaskStartScheduler+0xa0>)
 800c0c2:	f04f 32ff 	mov.w	r2, #4294967295
 800c0c6:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800c0c8:	4b0d      	ldr	r3, [pc, #52]	; (800c100 <vTaskStartScheduler+0xa4>)
 800c0ca:	2201      	movs	r2, #1
 800c0cc:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800c0ce:	4b0d      	ldr	r3, [pc, #52]	; (800c104 <vTaskStartScheduler+0xa8>)
 800c0d0:	2200      	movs	r2, #0
 800c0d2:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800c0d4:	f001 f8b4 	bl	800d240 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800c0d8:	e006      	b.n	800c0e8 <vTaskStartScheduler+0x8c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800c0da:	68fb      	ldr	r3, [r7, #12]
 800c0dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c0e0:	d102      	bne.n	800c0e8 <vTaskStartScheduler+0x8c>
 800c0e2:	f001 f8f9 	bl	800d2d8 <ulSetInterruptMask>
 800c0e6:	e7fe      	b.n	800c0e6 <vTaskStartScheduler+0x8a>
}
 800c0e8:	bf00      	nop
 800c0ea:	3710      	adds	r7, #16
 800c0ec:	46bd      	mov	sp, r7
 800c0ee:	bd80      	pop	{r7, pc}
 800c0f0:	0800e3e4 	.word	0x0800e3e4
 800c0f4:	0800c68d 	.word	0x0800c68d
 800c0f8:	20001570 	.word	0x20001570
 800c0fc:	2000156c 	.word	0x2000156c
 800c100:	20001558 	.word	0x20001558
 800c104:	20001550 	.word	0x20001550

0800c108 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800c108:	b480      	push	{r7}
 800c10a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800c10c:	4b04      	ldr	r3, [pc, #16]	; (800c120 <vTaskSuspendAll+0x18>)
 800c10e:	681b      	ldr	r3, [r3, #0]
 800c110:	3301      	adds	r3, #1
 800c112:	4a03      	ldr	r2, [pc, #12]	; (800c120 <vTaskSuspendAll+0x18>)
 800c114:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800c116:	bf00      	nop
 800c118:	46bd      	mov	sp, r7
 800c11a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c11e:	4770      	bx	lr
 800c120:	20001574 	.word	0x20001574

0800c124 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800c124:	b580      	push	{r7, lr}
 800c126:	b084      	sub	sp, #16
 800c128:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800c12a:	2300      	movs	r3, #0
 800c12c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800c12e:	2300      	movs	r3, #0
 800c130:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800c132:	4b3b      	ldr	r3, [pc, #236]	; (800c220 <xTaskResumeAll+0xfc>)
 800c134:	681b      	ldr	r3, [r3, #0]
 800c136:	2b00      	cmp	r3, #0
 800c138:	d102      	bne.n	800c140 <xTaskResumeAll+0x1c>
 800c13a:	f001 f8cd 	bl	800d2d8 <ulSetInterruptMask>
 800c13e:	e7fe      	b.n	800c13e <xTaskResumeAll+0x1a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800c140:	f000 ff98 	bl	800d074 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800c144:	4b36      	ldr	r3, [pc, #216]	; (800c220 <xTaskResumeAll+0xfc>)
 800c146:	681b      	ldr	r3, [r3, #0]
 800c148:	3b01      	subs	r3, #1
 800c14a:	4a35      	ldr	r2, [pc, #212]	; (800c220 <xTaskResumeAll+0xfc>)
 800c14c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c14e:	4b34      	ldr	r3, [pc, #208]	; (800c220 <xTaskResumeAll+0xfc>)
 800c150:	681b      	ldr	r3, [r3, #0]
 800c152:	2b00      	cmp	r3, #0
 800c154:	d15c      	bne.n	800c210 <xTaskResumeAll+0xec>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800c156:	4b33      	ldr	r3, [pc, #204]	; (800c224 <xTaskResumeAll+0x100>)
 800c158:	681b      	ldr	r3, [r3, #0]
 800c15a:	2b00      	cmp	r3, #0
 800c15c:	d058      	beq.n	800c210 <xTaskResumeAll+0xec>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800c15e:	e02f      	b.n	800c1c0 <xTaskResumeAll+0x9c>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c160:	4b31      	ldr	r3, [pc, #196]	; (800c228 <xTaskResumeAll+0x104>)
 800c162:	68db      	ldr	r3, [r3, #12]
 800c164:	68db      	ldr	r3, [r3, #12]
 800c166:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800c168:	68fb      	ldr	r3, [r7, #12]
 800c16a:	3318      	adds	r3, #24
 800c16c:	4618      	mov	r0, r3
 800c16e:	f7ff f945 	bl	800b3fc <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c172:	68fb      	ldr	r3, [r7, #12]
 800c174:	3304      	adds	r3, #4
 800c176:	4618      	mov	r0, r3
 800c178:	f7ff f940 	bl	800b3fc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800c17c:	68fb      	ldr	r3, [r7, #12]
 800c17e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c180:	4b2a      	ldr	r3, [pc, #168]	; (800c22c <xTaskResumeAll+0x108>)
 800c182:	681b      	ldr	r3, [r3, #0]
 800c184:	429a      	cmp	r2, r3
 800c186:	d903      	bls.n	800c190 <xTaskResumeAll+0x6c>
 800c188:	68fb      	ldr	r3, [r7, #12]
 800c18a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c18c:	4a27      	ldr	r2, [pc, #156]	; (800c22c <xTaskResumeAll+0x108>)
 800c18e:	6013      	str	r3, [r2, #0]
 800c190:	68fb      	ldr	r3, [r7, #12]
 800c192:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c194:	4613      	mov	r3, r2
 800c196:	009b      	lsls	r3, r3, #2
 800c198:	4413      	add	r3, r2
 800c19a:	009b      	lsls	r3, r3, #2
 800c19c:	4a24      	ldr	r2, [pc, #144]	; (800c230 <xTaskResumeAll+0x10c>)
 800c19e:	441a      	add	r2, r3
 800c1a0:	68fb      	ldr	r3, [r7, #12]
 800c1a2:	3304      	adds	r3, #4
 800c1a4:	4619      	mov	r1, r3
 800c1a6:	4610      	mov	r0, r2
 800c1a8:	f7ff f8cb 	bl	800b342 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800c1ac:	68fb      	ldr	r3, [r7, #12]
 800c1ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c1b0:	4b20      	ldr	r3, [pc, #128]	; (800c234 <xTaskResumeAll+0x110>)
 800c1b2:	681b      	ldr	r3, [r3, #0]
 800c1b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c1b6:	429a      	cmp	r2, r3
 800c1b8:	d302      	bcc.n	800c1c0 <xTaskResumeAll+0x9c>
					{
						xYieldPending = pdTRUE;
 800c1ba:	4b1f      	ldr	r3, [pc, #124]	; (800c238 <xTaskResumeAll+0x114>)
 800c1bc:	2201      	movs	r2, #1
 800c1be:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800c1c0:	4b19      	ldr	r3, [pc, #100]	; (800c228 <xTaskResumeAll+0x104>)
 800c1c2:	681b      	ldr	r3, [r3, #0]
 800c1c4:	2b00      	cmp	r3, #0
 800c1c6:	d1cb      	bne.n	800c160 <xTaskResumeAll+0x3c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800c1c8:	68fb      	ldr	r3, [r7, #12]
 800c1ca:	2b00      	cmp	r3, #0
 800c1cc:	d001      	beq.n	800c1d2 <xTaskResumeAll+0xae>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800c1ce:	f000 fb03 	bl	800c7d8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800c1d2:	4b1a      	ldr	r3, [pc, #104]	; (800c23c <xTaskResumeAll+0x118>)
 800c1d4:	681b      	ldr	r3, [r3, #0]
 800c1d6:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800c1d8:	687b      	ldr	r3, [r7, #4]
 800c1da:	2b00      	cmp	r3, #0
 800c1dc:	d010      	beq.n	800c200 <xTaskResumeAll+0xdc>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800c1de:	f000 f83f 	bl	800c260 <xTaskIncrementTick>
 800c1e2:	4603      	mov	r3, r0
 800c1e4:	2b00      	cmp	r3, #0
 800c1e6:	d002      	beq.n	800c1ee <xTaskResumeAll+0xca>
							{
								xYieldPending = pdTRUE;
 800c1e8:	4b13      	ldr	r3, [pc, #76]	; (800c238 <xTaskResumeAll+0x114>)
 800c1ea:	2201      	movs	r2, #1
 800c1ec:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800c1ee:	687b      	ldr	r3, [r7, #4]
 800c1f0:	3b01      	subs	r3, #1
 800c1f2:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800c1f4:	687b      	ldr	r3, [r7, #4]
 800c1f6:	2b00      	cmp	r3, #0
 800c1f8:	d1f1      	bne.n	800c1de <xTaskResumeAll+0xba>

						xPendedTicks = 0;
 800c1fa:	4b10      	ldr	r3, [pc, #64]	; (800c23c <xTaskResumeAll+0x118>)
 800c1fc:	2200      	movs	r2, #0
 800c1fe:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800c200:	4b0d      	ldr	r3, [pc, #52]	; (800c238 <xTaskResumeAll+0x114>)
 800c202:	681b      	ldr	r3, [r3, #0]
 800c204:	2b00      	cmp	r3, #0
 800c206:	d003      	beq.n	800c210 <xTaskResumeAll+0xec>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800c208:	2301      	movs	r3, #1
 800c20a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800c20c:	f000 ff20 	bl	800d050 <vPortYield>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800c210:	f000 ff42 	bl	800d098 <vPortExitCritical>

	return xAlreadyYielded;
 800c214:	68bb      	ldr	r3, [r7, #8]
}
 800c216:	4618      	mov	r0, r3
 800c218:	3710      	adds	r7, #16
 800c21a:	46bd      	mov	sp, r7
 800c21c:	bd80      	pop	{r7, pc}
 800c21e:	bf00      	nop
 800c220:	20001574 	.word	0x20001574
 800c224:	2000154c 	.word	0x2000154c
 800c228:	2000150c 	.word	0x2000150c
 800c22c:	20001554 	.word	0x20001554
 800c230:	2000107c 	.word	0x2000107c
 800c234:	20001078 	.word	0x20001078
 800c238:	20001560 	.word	0x20001560
 800c23c:	2000155c 	.word	0x2000155c

0800c240 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800c240:	b480      	push	{r7}
 800c242:	b083      	sub	sp, #12
 800c244:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800c246:	4b05      	ldr	r3, [pc, #20]	; (800c25c <xTaskGetTickCount+0x1c>)
 800c248:	681b      	ldr	r3, [r3, #0]
 800c24a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800c24c:	687b      	ldr	r3, [r7, #4]
}
 800c24e:	4618      	mov	r0, r3
 800c250:	370c      	adds	r7, #12
 800c252:	46bd      	mov	sp, r7
 800c254:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c258:	4770      	bx	lr
 800c25a:	bf00      	nop
 800c25c:	20001550 	.word	0x20001550

0800c260 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800c260:	b580      	push	{r7, lr}
 800c262:	b086      	sub	sp, #24
 800c264:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800c266:	2300      	movs	r3, #0
 800c268:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c26a:	4b4b      	ldr	r3, [pc, #300]	; (800c398 <xTaskIncrementTick+0x138>)
 800c26c:	681b      	ldr	r3, [r3, #0]
 800c26e:	2b00      	cmp	r3, #0
 800c270:	f040 8087 	bne.w	800c382 <xTaskIncrementTick+0x122>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800c274:	4b49      	ldr	r3, [pc, #292]	; (800c39c <xTaskIncrementTick+0x13c>)
 800c276:	681b      	ldr	r3, [r3, #0]
 800c278:	3301      	adds	r3, #1
 800c27a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800c27c:	4a47      	ldr	r2, [pc, #284]	; (800c39c <xTaskIncrementTick+0x13c>)
 800c27e:	693b      	ldr	r3, [r7, #16]
 800c280:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800c282:	693b      	ldr	r3, [r7, #16]
 800c284:	2b00      	cmp	r3, #0
 800c286:	d118      	bne.n	800c2ba <xTaskIncrementTick+0x5a>
		{
			taskSWITCH_DELAYED_LISTS();
 800c288:	4b45      	ldr	r3, [pc, #276]	; (800c3a0 <xTaskIncrementTick+0x140>)
 800c28a:	681b      	ldr	r3, [r3, #0]
 800c28c:	681b      	ldr	r3, [r3, #0]
 800c28e:	2b00      	cmp	r3, #0
 800c290:	d002      	beq.n	800c298 <xTaskIncrementTick+0x38>
 800c292:	f001 f821 	bl	800d2d8 <ulSetInterruptMask>
 800c296:	e7fe      	b.n	800c296 <xTaskIncrementTick+0x36>
 800c298:	4b41      	ldr	r3, [pc, #260]	; (800c3a0 <xTaskIncrementTick+0x140>)
 800c29a:	681b      	ldr	r3, [r3, #0]
 800c29c:	60fb      	str	r3, [r7, #12]
 800c29e:	4b41      	ldr	r3, [pc, #260]	; (800c3a4 <xTaskIncrementTick+0x144>)
 800c2a0:	681b      	ldr	r3, [r3, #0]
 800c2a2:	4a3f      	ldr	r2, [pc, #252]	; (800c3a0 <xTaskIncrementTick+0x140>)
 800c2a4:	6013      	str	r3, [r2, #0]
 800c2a6:	4a3f      	ldr	r2, [pc, #252]	; (800c3a4 <xTaskIncrementTick+0x144>)
 800c2a8:	68fb      	ldr	r3, [r7, #12]
 800c2aa:	6013      	str	r3, [r2, #0]
 800c2ac:	4b3e      	ldr	r3, [pc, #248]	; (800c3a8 <xTaskIncrementTick+0x148>)
 800c2ae:	681b      	ldr	r3, [r3, #0]
 800c2b0:	3301      	adds	r3, #1
 800c2b2:	4a3d      	ldr	r2, [pc, #244]	; (800c3a8 <xTaskIncrementTick+0x148>)
 800c2b4:	6013      	str	r3, [r2, #0]
 800c2b6:	f000 fa8f 	bl	800c7d8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800c2ba:	4b3c      	ldr	r3, [pc, #240]	; (800c3ac <xTaskIncrementTick+0x14c>)
 800c2bc:	681b      	ldr	r3, [r3, #0]
 800c2be:	693a      	ldr	r2, [r7, #16]
 800c2c0:	429a      	cmp	r2, r3
 800c2c2:	d349      	bcc.n	800c358 <xTaskIncrementTick+0xf8>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c2c4:	4b36      	ldr	r3, [pc, #216]	; (800c3a0 <xTaskIncrementTick+0x140>)
 800c2c6:	681b      	ldr	r3, [r3, #0]
 800c2c8:	681b      	ldr	r3, [r3, #0]
 800c2ca:	2b00      	cmp	r3, #0
 800c2cc:	d104      	bne.n	800c2d8 <xTaskIncrementTick+0x78>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c2ce:	4b37      	ldr	r3, [pc, #220]	; (800c3ac <xTaskIncrementTick+0x14c>)
 800c2d0:	f04f 32ff 	mov.w	r2, #4294967295
 800c2d4:	601a      	str	r2, [r3, #0]
					break;
 800c2d6:	e03f      	b.n	800c358 <xTaskIncrementTick+0xf8>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c2d8:	4b31      	ldr	r3, [pc, #196]	; (800c3a0 <xTaskIncrementTick+0x140>)
 800c2da:	681b      	ldr	r3, [r3, #0]
 800c2dc:	68db      	ldr	r3, [r3, #12]
 800c2de:	68db      	ldr	r3, [r3, #12]
 800c2e0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800c2e2:	68bb      	ldr	r3, [r7, #8]
 800c2e4:	685b      	ldr	r3, [r3, #4]
 800c2e6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800c2e8:	693a      	ldr	r2, [r7, #16]
 800c2ea:	687b      	ldr	r3, [r7, #4]
 800c2ec:	429a      	cmp	r2, r3
 800c2ee:	d203      	bcs.n	800c2f8 <xTaskIncrementTick+0x98>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800c2f0:	4a2e      	ldr	r2, [pc, #184]	; (800c3ac <xTaskIncrementTick+0x14c>)
 800c2f2:	687b      	ldr	r3, [r7, #4]
 800c2f4:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800c2f6:	e02f      	b.n	800c358 <xTaskIncrementTick+0xf8>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c2f8:	68bb      	ldr	r3, [r7, #8]
 800c2fa:	3304      	adds	r3, #4
 800c2fc:	4618      	mov	r0, r3
 800c2fe:	f7ff f87d 	bl	800b3fc <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800c302:	68bb      	ldr	r3, [r7, #8]
 800c304:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c306:	2b00      	cmp	r3, #0
 800c308:	d004      	beq.n	800c314 <xTaskIncrementTick+0xb4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800c30a:	68bb      	ldr	r3, [r7, #8]
 800c30c:	3318      	adds	r3, #24
 800c30e:	4618      	mov	r0, r3
 800c310:	f7ff f874 	bl	800b3fc <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800c314:	68bb      	ldr	r3, [r7, #8]
 800c316:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c318:	4b25      	ldr	r3, [pc, #148]	; (800c3b0 <xTaskIncrementTick+0x150>)
 800c31a:	681b      	ldr	r3, [r3, #0]
 800c31c:	429a      	cmp	r2, r3
 800c31e:	d903      	bls.n	800c328 <xTaskIncrementTick+0xc8>
 800c320:	68bb      	ldr	r3, [r7, #8]
 800c322:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c324:	4a22      	ldr	r2, [pc, #136]	; (800c3b0 <xTaskIncrementTick+0x150>)
 800c326:	6013      	str	r3, [r2, #0]
 800c328:	68bb      	ldr	r3, [r7, #8]
 800c32a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c32c:	4613      	mov	r3, r2
 800c32e:	009b      	lsls	r3, r3, #2
 800c330:	4413      	add	r3, r2
 800c332:	009b      	lsls	r3, r3, #2
 800c334:	4a1f      	ldr	r2, [pc, #124]	; (800c3b4 <xTaskIncrementTick+0x154>)
 800c336:	441a      	add	r2, r3
 800c338:	68bb      	ldr	r3, [r7, #8]
 800c33a:	3304      	adds	r3, #4
 800c33c:	4619      	mov	r1, r3
 800c33e:	4610      	mov	r0, r2
 800c340:	f7fe ffff 	bl	800b342 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800c344:	68bb      	ldr	r3, [r7, #8]
 800c346:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c348:	4b1b      	ldr	r3, [pc, #108]	; (800c3b8 <xTaskIncrementTick+0x158>)
 800c34a:	681b      	ldr	r3, [r3, #0]
 800c34c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c34e:	429a      	cmp	r2, r3
 800c350:	d3b8      	bcc.n	800c2c4 <xTaskIncrementTick+0x64>
						{
							xSwitchRequired = pdTRUE;
 800c352:	2301      	movs	r3, #1
 800c354:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c356:	e7b5      	b.n	800c2c4 <xTaskIncrementTick+0x64>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800c358:	4b17      	ldr	r3, [pc, #92]	; (800c3b8 <xTaskIncrementTick+0x158>)
 800c35a:	681b      	ldr	r3, [r3, #0]
 800c35c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c35e:	4915      	ldr	r1, [pc, #84]	; (800c3b4 <xTaskIncrementTick+0x154>)
 800c360:	4613      	mov	r3, r2
 800c362:	009b      	lsls	r3, r3, #2
 800c364:	4413      	add	r3, r2
 800c366:	009b      	lsls	r3, r3, #2
 800c368:	440b      	add	r3, r1
 800c36a:	681b      	ldr	r3, [r3, #0]
 800c36c:	2b01      	cmp	r3, #1
 800c36e:	d901      	bls.n	800c374 <xTaskIncrementTick+0x114>
			{
				xSwitchRequired = pdTRUE;
 800c370:	2301      	movs	r3, #1
 800c372:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800c374:	4b11      	ldr	r3, [pc, #68]	; (800c3bc <xTaskIncrementTick+0x15c>)
 800c376:	681b      	ldr	r3, [r3, #0]
 800c378:	2b00      	cmp	r3, #0
 800c37a:	d007      	beq.n	800c38c <xTaskIncrementTick+0x12c>
			{
				xSwitchRequired = pdTRUE;
 800c37c:	2301      	movs	r3, #1
 800c37e:	617b      	str	r3, [r7, #20]
 800c380:	e004      	b.n	800c38c <xTaskIncrementTick+0x12c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800c382:	4b0f      	ldr	r3, [pc, #60]	; (800c3c0 <xTaskIncrementTick+0x160>)
 800c384:	681b      	ldr	r3, [r3, #0]
 800c386:	3301      	adds	r3, #1
 800c388:	4a0d      	ldr	r2, [pc, #52]	; (800c3c0 <xTaskIncrementTick+0x160>)
 800c38a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800c38c:	697b      	ldr	r3, [r7, #20]
}
 800c38e:	4618      	mov	r0, r3
 800c390:	3718      	adds	r7, #24
 800c392:	46bd      	mov	sp, r7
 800c394:	bd80      	pop	{r7, pc}
 800c396:	bf00      	nop
 800c398:	20001574 	.word	0x20001574
 800c39c:	20001550 	.word	0x20001550
 800c3a0:	20001504 	.word	0x20001504
 800c3a4:	20001508 	.word	0x20001508
 800c3a8:	20001564 	.word	0x20001564
 800c3ac:	2000156c 	.word	0x2000156c
 800c3b0:	20001554 	.word	0x20001554
 800c3b4:	2000107c 	.word	0x2000107c
 800c3b8:	20001078 	.word	0x20001078
 800c3bc:	20001560 	.word	0x20001560
 800c3c0:	2000155c 	.word	0x2000155c

0800c3c4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800c3c4:	b580      	push	{r7, lr}
 800c3c6:	b082      	sub	sp, #8
 800c3c8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800c3ca:	4b23      	ldr	r3, [pc, #140]	; (800c458 <vTaskSwitchContext+0x94>)
 800c3cc:	681b      	ldr	r3, [r3, #0]
 800c3ce:	2b00      	cmp	r3, #0
 800c3d0:	d003      	beq.n	800c3da <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800c3d2:	4b22      	ldr	r3, [pc, #136]	; (800c45c <vTaskSwitchContext+0x98>)
 800c3d4:	2201      	movs	r2, #1
 800c3d6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800c3d8:	e039      	b.n	800c44e <vTaskSwitchContext+0x8a>
		xYieldPending = pdFALSE;
 800c3da:	4b20      	ldr	r3, [pc, #128]	; (800c45c <vTaskSwitchContext+0x98>)
 800c3dc:	2200      	movs	r2, #0
 800c3de:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c3e0:	4b1f      	ldr	r3, [pc, #124]	; (800c460 <vTaskSwitchContext+0x9c>)
 800c3e2:	681b      	ldr	r3, [r3, #0]
 800c3e4:	607b      	str	r3, [r7, #4]
 800c3e6:	e008      	b.n	800c3fa <vTaskSwitchContext+0x36>
 800c3e8:	687b      	ldr	r3, [r7, #4]
 800c3ea:	2b00      	cmp	r3, #0
 800c3ec:	d102      	bne.n	800c3f4 <vTaskSwitchContext+0x30>
 800c3ee:	f000 ff73 	bl	800d2d8 <ulSetInterruptMask>
 800c3f2:	e7fe      	b.n	800c3f2 <vTaskSwitchContext+0x2e>
 800c3f4:	687b      	ldr	r3, [r7, #4]
 800c3f6:	3b01      	subs	r3, #1
 800c3f8:	607b      	str	r3, [r7, #4]
 800c3fa:	491a      	ldr	r1, [pc, #104]	; (800c464 <vTaskSwitchContext+0xa0>)
 800c3fc:	687a      	ldr	r2, [r7, #4]
 800c3fe:	4613      	mov	r3, r2
 800c400:	009b      	lsls	r3, r3, #2
 800c402:	4413      	add	r3, r2
 800c404:	009b      	lsls	r3, r3, #2
 800c406:	440b      	add	r3, r1
 800c408:	681b      	ldr	r3, [r3, #0]
 800c40a:	2b00      	cmp	r3, #0
 800c40c:	d0ec      	beq.n	800c3e8 <vTaskSwitchContext+0x24>
 800c40e:	687a      	ldr	r2, [r7, #4]
 800c410:	4613      	mov	r3, r2
 800c412:	009b      	lsls	r3, r3, #2
 800c414:	4413      	add	r3, r2
 800c416:	009b      	lsls	r3, r3, #2
 800c418:	4a12      	ldr	r2, [pc, #72]	; (800c464 <vTaskSwitchContext+0xa0>)
 800c41a:	4413      	add	r3, r2
 800c41c:	603b      	str	r3, [r7, #0]
 800c41e:	683b      	ldr	r3, [r7, #0]
 800c420:	685b      	ldr	r3, [r3, #4]
 800c422:	685a      	ldr	r2, [r3, #4]
 800c424:	683b      	ldr	r3, [r7, #0]
 800c426:	605a      	str	r2, [r3, #4]
 800c428:	683b      	ldr	r3, [r7, #0]
 800c42a:	685a      	ldr	r2, [r3, #4]
 800c42c:	683b      	ldr	r3, [r7, #0]
 800c42e:	3308      	adds	r3, #8
 800c430:	429a      	cmp	r2, r3
 800c432:	d104      	bne.n	800c43e <vTaskSwitchContext+0x7a>
 800c434:	683b      	ldr	r3, [r7, #0]
 800c436:	685b      	ldr	r3, [r3, #4]
 800c438:	685a      	ldr	r2, [r3, #4]
 800c43a:	683b      	ldr	r3, [r7, #0]
 800c43c:	605a      	str	r2, [r3, #4]
 800c43e:	683b      	ldr	r3, [r7, #0]
 800c440:	685b      	ldr	r3, [r3, #4]
 800c442:	68db      	ldr	r3, [r3, #12]
 800c444:	4a08      	ldr	r2, [pc, #32]	; (800c468 <vTaskSwitchContext+0xa4>)
 800c446:	6013      	str	r3, [r2, #0]
 800c448:	4a05      	ldr	r2, [pc, #20]	; (800c460 <vTaskSwitchContext+0x9c>)
 800c44a:	687b      	ldr	r3, [r7, #4]
 800c44c:	6013      	str	r3, [r2, #0]
}
 800c44e:	bf00      	nop
 800c450:	3708      	adds	r7, #8
 800c452:	46bd      	mov	sp, r7
 800c454:	bd80      	pop	{r7, pc}
 800c456:	bf00      	nop
 800c458:	20001574 	.word	0x20001574
 800c45c:	20001560 	.word	0x20001560
 800c460:	20001554 	.word	0x20001554
 800c464:	2000107c 	.word	0x2000107c
 800c468:	20001078 	.word	0x20001078

0800c46c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800c46c:	b580      	push	{r7, lr}
 800c46e:	b082      	sub	sp, #8
 800c470:	af00      	add	r7, sp, #0
 800c472:	6078      	str	r0, [r7, #4]
 800c474:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800c476:	687b      	ldr	r3, [r7, #4]
 800c478:	2b00      	cmp	r3, #0
 800c47a:	d102      	bne.n	800c482 <vTaskPlaceOnEventList+0x16>
 800c47c:	f000 ff2c 	bl	800d2d8 <ulSetInterruptMask>
 800c480:	e7fe      	b.n	800c480 <vTaskPlaceOnEventList+0x14>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800c482:	4b07      	ldr	r3, [pc, #28]	; (800c4a0 <vTaskPlaceOnEventList+0x34>)
 800c484:	681b      	ldr	r3, [r3, #0]
 800c486:	3318      	adds	r3, #24
 800c488:	4619      	mov	r1, r3
 800c48a:	6878      	ldr	r0, [r7, #4]
 800c48c:	f7fe ff7d 	bl	800b38a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800c490:	2101      	movs	r1, #1
 800c492:	6838      	ldr	r0, [r7, #0]
 800c494:	f000 fa3c 	bl	800c910 <prvAddCurrentTaskToDelayedList>
}
 800c498:	bf00      	nop
 800c49a:	3708      	adds	r7, #8
 800c49c:	46bd      	mov	sp, r7
 800c49e:	bd80      	pop	{r7, pc}
 800c4a0:	20001078 	.word	0x20001078

0800c4a4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800c4a4:	b580      	push	{r7, lr}
 800c4a6:	b084      	sub	sp, #16
 800c4a8:	af00      	add	r7, sp, #0
 800c4aa:	60f8      	str	r0, [r7, #12]
 800c4ac:	60b9      	str	r1, [r7, #8]
 800c4ae:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800c4b0:	68fb      	ldr	r3, [r7, #12]
 800c4b2:	2b00      	cmp	r3, #0
 800c4b4:	d102      	bne.n	800c4bc <vTaskPlaceOnEventListRestricted+0x18>
 800c4b6:	f000 ff0f 	bl	800d2d8 <ulSetInterruptMask>
 800c4ba:	e7fe      	b.n	800c4ba <vTaskPlaceOnEventListRestricted+0x16>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800c4bc:	4b0a      	ldr	r3, [pc, #40]	; (800c4e8 <vTaskPlaceOnEventListRestricted+0x44>)
 800c4be:	681b      	ldr	r3, [r3, #0]
 800c4c0:	3318      	adds	r3, #24
 800c4c2:	4619      	mov	r1, r3
 800c4c4:	68f8      	ldr	r0, [r7, #12]
 800c4c6:	f7fe ff3c 	bl	800b342 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800c4ca:	687b      	ldr	r3, [r7, #4]
 800c4cc:	2b00      	cmp	r3, #0
 800c4ce:	d002      	beq.n	800c4d6 <vTaskPlaceOnEventListRestricted+0x32>
		{
			xTicksToWait = portMAX_DELAY;
 800c4d0:	f04f 33ff 	mov.w	r3, #4294967295
 800c4d4:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800c4d6:	6879      	ldr	r1, [r7, #4]
 800c4d8:	68b8      	ldr	r0, [r7, #8]
 800c4da:	f000 fa19 	bl	800c910 <prvAddCurrentTaskToDelayedList>
	}
 800c4de:	bf00      	nop
 800c4e0:	3710      	adds	r7, #16
 800c4e2:	46bd      	mov	sp, r7
 800c4e4:	bd80      	pop	{r7, pc}
 800c4e6:	bf00      	nop
 800c4e8:	20001078 	.word	0x20001078

0800c4ec <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800c4ec:	b580      	push	{r7, lr}
 800c4ee:	b084      	sub	sp, #16
 800c4f0:	af00      	add	r7, sp, #0
 800c4f2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c4f4:	687b      	ldr	r3, [r7, #4]
 800c4f6:	68db      	ldr	r3, [r3, #12]
 800c4f8:	68db      	ldr	r3, [r3, #12]
 800c4fa:	60bb      	str	r3, [r7, #8]
	configASSERT( pxUnblockedTCB );
 800c4fc:	68bb      	ldr	r3, [r7, #8]
 800c4fe:	2b00      	cmp	r3, #0
 800c500:	d102      	bne.n	800c508 <xTaskRemoveFromEventList+0x1c>
 800c502:	f000 fee9 	bl	800d2d8 <ulSetInterruptMask>
 800c506:	e7fe      	b.n	800c506 <xTaskRemoveFromEventList+0x1a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800c508:	68bb      	ldr	r3, [r7, #8]
 800c50a:	3318      	adds	r3, #24
 800c50c:	4618      	mov	r0, r3
 800c50e:	f7fe ff75 	bl	800b3fc <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c512:	4b1e      	ldr	r3, [pc, #120]	; (800c58c <xTaskRemoveFromEventList+0xa0>)
 800c514:	681b      	ldr	r3, [r3, #0]
 800c516:	2b00      	cmp	r3, #0
 800c518:	d11d      	bne.n	800c556 <xTaskRemoveFromEventList+0x6a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800c51a:	68bb      	ldr	r3, [r7, #8]
 800c51c:	3304      	adds	r3, #4
 800c51e:	4618      	mov	r0, r3
 800c520:	f7fe ff6c 	bl	800b3fc <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800c524:	68bb      	ldr	r3, [r7, #8]
 800c526:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c528:	4b19      	ldr	r3, [pc, #100]	; (800c590 <xTaskRemoveFromEventList+0xa4>)
 800c52a:	681b      	ldr	r3, [r3, #0]
 800c52c:	429a      	cmp	r2, r3
 800c52e:	d903      	bls.n	800c538 <xTaskRemoveFromEventList+0x4c>
 800c530:	68bb      	ldr	r3, [r7, #8]
 800c532:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c534:	4a16      	ldr	r2, [pc, #88]	; (800c590 <xTaskRemoveFromEventList+0xa4>)
 800c536:	6013      	str	r3, [r2, #0]
 800c538:	68bb      	ldr	r3, [r7, #8]
 800c53a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c53c:	4613      	mov	r3, r2
 800c53e:	009b      	lsls	r3, r3, #2
 800c540:	4413      	add	r3, r2
 800c542:	009b      	lsls	r3, r3, #2
 800c544:	4a13      	ldr	r2, [pc, #76]	; (800c594 <xTaskRemoveFromEventList+0xa8>)
 800c546:	441a      	add	r2, r3
 800c548:	68bb      	ldr	r3, [r7, #8]
 800c54a:	3304      	adds	r3, #4
 800c54c:	4619      	mov	r1, r3
 800c54e:	4610      	mov	r0, r2
 800c550:	f7fe fef7 	bl	800b342 <vListInsertEnd>
 800c554:	e005      	b.n	800c562 <xTaskRemoveFromEventList+0x76>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800c556:	68bb      	ldr	r3, [r7, #8]
 800c558:	3318      	adds	r3, #24
 800c55a:	4619      	mov	r1, r3
 800c55c:	480e      	ldr	r0, [pc, #56]	; (800c598 <xTaskRemoveFromEventList+0xac>)
 800c55e:	f7fe fef0 	bl	800b342 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800c562:	68bb      	ldr	r3, [r7, #8]
 800c564:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c566:	4b0d      	ldr	r3, [pc, #52]	; (800c59c <xTaskRemoveFromEventList+0xb0>)
 800c568:	681b      	ldr	r3, [r3, #0]
 800c56a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c56c:	429a      	cmp	r2, r3
 800c56e:	d905      	bls.n	800c57c <xTaskRemoveFromEventList+0x90>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800c570:	2301      	movs	r3, #1
 800c572:	60fb      	str	r3, [r7, #12]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800c574:	4b0a      	ldr	r3, [pc, #40]	; (800c5a0 <xTaskRemoveFromEventList+0xb4>)
 800c576:	2201      	movs	r2, #1
 800c578:	601a      	str	r2, [r3, #0]
 800c57a:	e001      	b.n	800c580 <xTaskRemoveFromEventList+0x94>
	}
	else
	{
		xReturn = pdFALSE;
 800c57c:	2300      	movs	r3, #0
 800c57e:	60fb      	str	r3, [r7, #12]
	}

	return xReturn;
 800c580:	68fb      	ldr	r3, [r7, #12]
}
 800c582:	4618      	mov	r0, r3
 800c584:	3710      	adds	r7, #16
 800c586:	46bd      	mov	sp, r7
 800c588:	bd80      	pop	{r7, pc}
 800c58a:	bf00      	nop
 800c58c:	20001574 	.word	0x20001574
 800c590:	20001554 	.word	0x20001554
 800c594:	2000107c 	.word	0x2000107c
 800c598:	2000150c 	.word	0x2000150c
 800c59c:	20001078 	.word	0x20001078
 800c5a0:	20001560 	.word	0x20001560

0800c5a4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800c5a4:	b480      	push	{r7}
 800c5a6:	b083      	sub	sp, #12
 800c5a8:	af00      	add	r7, sp, #0
 800c5aa:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800c5ac:	4b06      	ldr	r3, [pc, #24]	; (800c5c8 <vTaskInternalSetTimeOutState+0x24>)
 800c5ae:	681a      	ldr	r2, [r3, #0]
 800c5b0:	687b      	ldr	r3, [r7, #4]
 800c5b2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800c5b4:	4b05      	ldr	r3, [pc, #20]	; (800c5cc <vTaskInternalSetTimeOutState+0x28>)
 800c5b6:	681a      	ldr	r2, [r3, #0]
 800c5b8:	687b      	ldr	r3, [r7, #4]
 800c5ba:	605a      	str	r2, [r3, #4]
}
 800c5bc:	bf00      	nop
 800c5be:	370c      	adds	r7, #12
 800c5c0:	46bd      	mov	sp, r7
 800c5c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5c6:	4770      	bx	lr
 800c5c8:	20001564 	.word	0x20001564
 800c5cc:	20001550 	.word	0x20001550

0800c5d0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800c5d0:	b580      	push	{r7, lr}
 800c5d2:	b086      	sub	sp, #24
 800c5d4:	af00      	add	r7, sp, #0
 800c5d6:	6078      	str	r0, [r7, #4]
 800c5d8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800c5da:	687b      	ldr	r3, [r7, #4]
 800c5dc:	2b00      	cmp	r3, #0
 800c5de:	d102      	bne.n	800c5e6 <xTaskCheckForTimeOut+0x16>
 800c5e0:	f000 fe7a 	bl	800d2d8 <ulSetInterruptMask>
 800c5e4:	e7fe      	b.n	800c5e4 <xTaskCheckForTimeOut+0x14>
	configASSERT( pxTicksToWait );
 800c5e6:	683b      	ldr	r3, [r7, #0]
 800c5e8:	2b00      	cmp	r3, #0
 800c5ea:	d102      	bne.n	800c5f2 <xTaskCheckForTimeOut+0x22>
 800c5ec:	f000 fe74 	bl	800d2d8 <ulSetInterruptMask>
 800c5f0:	e7fe      	b.n	800c5f0 <xTaskCheckForTimeOut+0x20>

	taskENTER_CRITICAL();
 800c5f2:	f000 fd3f 	bl	800d074 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800c5f6:	4b1d      	ldr	r3, [pc, #116]	; (800c66c <xTaskCheckForTimeOut+0x9c>)
 800c5f8:	681b      	ldr	r3, [r3, #0]
 800c5fa:	613b      	str	r3, [r7, #16]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800c5fc:	687b      	ldr	r3, [r7, #4]
 800c5fe:	685b      	ldr	r3, [r3, #4]
 800c600:	693a      	ldr	r2, [r7, #16]
 800c602:	1ad3      	subs	r3, r2, r3
 800c604:	60fb      	str	r3, [r7, #12]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800c606:	683b      	ldr	r3, [r7, #0]
 800c608:	681b      	ldr	r3, [r3, #0]
 800c60a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c60e:	d102      	bne.n	800c616 <xTaskCheckForTimeOut+0x46>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800c610:	2300      	movs	r3, #0
 800c612:	617b      	str	r3, [r7, #20]
 800c614:	e023      	b.n	800c65e <xTaskCheckForTimeOut+0x8e>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800c616:	687b      	ldr	r3, [r7, #4]
 800c618:	681a      	ldr	r2, [r3, #0]
 800c61a:	4b15      	ldr	r3, [pc, #84]	; (800c670 <xTaskCheckForTimeOut+0xa0>)
 800c61c:	681b      	ldr	r3, [r3, #0]
 800c61e:	429a      	cmp	r2, r3
 800c620:	d007      	beq.n	800c632 <xTaskCheckForTimeOut+0x62>
 800c622:	687b      	ldr	r3, [r7, #4]
 800c624:	685b      	ldr	r3, [r3, #4]
 800c626:	693a      	ldr	r2, [r7, #16]
 800c628:	429a      	cmp	r2, r3
 800c62a:	d302      	bcc.n	800c632 <xTaskCheckForTimeOut+0x62>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800c62c:	2301      	movs	r3, #1
 800c62e:	617b      	str	r3, [r7, #20]
 800c630:	e015      	b.n	800c65e <xTaskCheckForTimeOut+0x8e>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800c632:	683b      	ldr	r3, [r7, #0]
 800c634:	681b      	ldr	r3, [r3, #0]
 800c636:	68fa      	ldr	r2, [r7, #12]
 800c638:	429a      	cmp	r2, r3
 800c63a:	d20b      	bcs.n	800c654 <xTaskCheckForTimeOut+0x84>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800c63c:	683b      	ldr	r3, [r7, #0]
 800c63e:	681a      	ldr	r2, [r3, #0]
 800c640:	68fb      	ldr	r3, [r7, #12]
 800c642:	1ad2      	subs	r2, r2, r3
 800c644:	683b      	ldr	r3, [r7, #0]
 800c646:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800c648:	6878      	ldr	r0, [r7, #4]
 800c64a:	f7ff ffab 	bl	800c5a4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800c64e:	2300      	movs	r3, #0
 800c650:	617b      	str	r3, [r7, #20]
 800c652:	e004      	b.n	800c65e <xTaskCheckForTimeOut+0x8e>
		}
		else
		{
			*pxTicksToWait = 0;
 800c654:	683b      	ldr	r3, [r7, #0]
 800c656:	2200      	movs	r2, #0
 800c658:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800c65a:	2301      	movs	r3, #1
 800c65c:	617b      	str	r3, [r7, #20]
		}
	}
	taskEXIT_CRITICAL();
 800c65e:	f000 fd1b 	bl	800d098 <vPortExitCritical>

	return xReturn;
 800c662:	697b      	ldr	r3, [r7, #20]
}
 800c664:	4618      	mov	r0, r3
 800c666:	3718      	adds	r7, #24
 800c668:	46bd      	mov	sp, r7
 800c66a:	bd80      	pop	{r7, pc}
 800c66c:	20001550 	.word	0x20001550
 800c670:	20001564 	.word	0x20001564

0800c674 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800c674:	b480      	push	{r7}
 800c676:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800c678:	4b03      	ldr	r3, [pc, #12]	; (800c688 <vTaskMissedYield+0x14>)
 800c67a:	2201      	movs	r2, #1
 800c67c:	601a      	str	r2, [r3, #0]
}
 800c67e:	bf00      	nop
 800c680:	46bd      	mov	sp, r7
 800c682:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c686:	4770      	bx	lr
 800c688:	20001560 	.word	0x20001560

0800c68c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800c68c:	b580      	push	{r7, lr}
 800c68e:	b082      	sub	sp, #8
 800c690:	af00      	add	r7, sp, #0
 800c692:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800c694:	f000 f84a 	bl	800c72c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800c698:	4b03      	ldr	r3, [pc, #12]	; (800c6a8 <prvIdleTask+0x1c>)
 800c69a:	681b      	ldr	r3, [r3, #0]
 800c69c:	2b01      	cmp	r3, #1
 800c69e:	d9f9      	bls.n	800c694 <prvIdleTask+0x8>
			{
				taskYIELD();
 800c6a0:	f000 fcd6 	bl	800d050 <vPortYield>
		prvCheckTasksWaitingTermination();
 800c6a4:	e7f6      	b.n	800c694 <prvIdleTask+0x8>
 800c6a6:	bf00      	nop
 800c6a8:	2000107c 	.word	0x2000107c

0800c6ac <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800c6ac:	b580      	push	{r7, lr}
 800c6ae:	b082      	sub	sp, #8
 800c6b0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800c6b2:	2300      	movs	r3, #0
 800c6b4:	607b      	str	r3, [r7, #4]
 800c6b6:	e00c      	b.n	800c6d2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800c6b8:	687a      	ldr	r2, [r7, #4]
 800c6ba:	4613      	mov	r3, r2
 800c6bc:	009b      	lsls	r3, r3, #2
 800c6be:	4413      	add	r3, r2
 800c6c0:	009b      	lsls	r3, r3, #2
 800c6c2:	4a12      	ldr	r2, [pc, #72]	; (800c70c <prvInitialiseTaskLists+0x60>)
 800c6c4:	4413      	add	r3, r2
 800c6c6:	4618      	mov	r0, r3
 800c6c8:	f7fe fe0e 	bl	800b2e8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800c6cc:	687b      	ldr	r3, [r7, #4]
 800c6ce:	3301      	adds	r3, #1
 800c6d0:	607b      	str	r3, [r7, #4]
 800c6d2:	687b      	ldr	r3, [r7, #4]
 800c6d4:	2b37      	cmp	r3, #55	; 0x37
 800c6d6:	d9ef      	bls.n	800c6b8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800c6d8:	480d      	ldr	r0, [pc, #52]	; (800c710 <prvInitialiseTaskLists+0x64>)
 800c6da:	f7fe fe05 	bl	800b2e8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800c6de:	480d      	ldr	r0, [pc, #52]	; (800c714 <prvInitialiseTaskLists+0x68>)
 800c6e0:	f7fe fe02 	bl	800b2e8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800c6e4:	480c      	ldr	r0, [pc, #48]	; (800c718 <prvInitialiseTaskLists+0x6c>)
 800c6e6:	f7fe fdff 	bl	800b2e8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800c6ea:	480c      	ldr	r0, [pc, #48]	; (800c71c <prvInitialiseTaskLists+0x70>)
 800c6ec:	f7fe fdfc 	bl	800b2e8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800c6f0:	480b      	ldr	r0, [pc, #44]	; (800c720 <prvInitialiseTaskLists+0x74>)
 800c6f2:	f7fe fdf9 	bl	800b2e8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800c6f6:	4b0b      	ldr	r3, [pc, #44]	; (800c724 <prvInitialiseTaskLists+0x78>)
 800c6f8:	4a05      	ldr	r2, [pc, #20]	; (800c710 <prvInitialiseTaskLists+0x64>)
 800c6fa:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800c6fc:	4b0a      	ldr	r3, [pc, #40]	; (800c728 <prvInitialiseTaskLists+0x7c>)
 800c6fe:	4a05      	ldr	r2, [pc, #20]	; (800c714 <prvInitialiseTaskLists+0x68>)
 800c700:	601a      	str	r2, [r3, #0]
}
 800c702:	bf00      	nop
 800c704:	3708      	adds	r7, #8
 800c706:	46bd      	mov	sp, r7
 800c708:	bd80      	pop	{r7, pc}
 800c70a:	bf00      	nop
 800c70c:	2000107c 	.word	0x2000107c
 800c710:	200014dc 	.word	0x200014dc
 800c714:	200014f0 	.word	0x200014f0
 800c718:	2000150c 	.word	0x2000150c
 800c71c:	20001520 	.word	0x20001520
 800c720:	20001538 	.word	0x20001538
 800c724:	20001504 	.word	0x20001504
 800c728:	20001508 	.word	0x20001508

0800c72c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800c72c:	b580      	push	{r7, lr}
 800c72e:	b082      	sub	sp, #8
 800c730:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800c732:	e019      	b.n	800c768 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800c734:	f000 fc9e 	bl	800d074 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c738:	4b10      	ldr	r3, [pc, #64]	; (800c77c <prvCheckTasksWaitingTermination+0x50>)
 800c73a:	68db      	ldr	r3, [r3, #12]
 800c73c:	68db      	ldr	r3, [r3, #12]
 800c73e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c740:	687b      	ldr	r3, [r7, #4]
 800c742:	3304      	adds	r3, #4
 800c744:	4618      	mov	r0, r3
 800c746:	f7fe fe59 	bl	800b3fc <uxListRemove>
				--uxCurrentNumberOfTasks;
 800c74a:	4b0d      	ldr	r3, [pc, #52]	; (800c780 <prvCheckTasksWaitingTermination+0x54>)
 800c74c:	681b      	ldr	r3, [r3, #0]
 800c74e:	3b01      	subs	r3, #1
 800c750:	4a0b      	ldr	r2, [pc, #44]	; (800c780 <prvCheckTasksWaitingTermination+0x54>)
 800c752:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800c754:	4b0b      	ldr	r3, [pc, #44]	; (800c784 <prvCheckTasksWaitingTermination+0x58>)
 800c756:	681b      	ldr	r3, [r3, #0]
 800c758:	3b01      	subs	r3, #1
 800c75a:	4a0a      	ldr	r2, [pc, #40]	; (800c784 <prvCheckTasksWaitingTermination+0x58>)
 800c75c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800c75e:	f000 fc9b 	bl	800d098 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800c762:	6878      	ldr	r0, [r7, #4]
 800c764:	f000 f810 	bl	800c788 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800c768:	4b06      	ldr	r3, [pc, #24]	; (800c784 <prvCheckTasksWaitingTermination+0x58>)
 800c76a:	681b      	ldr	r3, [r3, #0]
 800c76c:	2b00      	cmp	r3, #0
 800c76e:	d1e1      	bne.n	800c734 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800c770:	bf00      	nop
 800c772:	bf00      	nop
 800c774:	3708      	adds	r7, #8
 800c776:	46bd      	mov	sp, r7
 800c778:	bd80      	pop	{r7, pc}
 800c77a:	bf00      	nop
 800c77c:	20001520 	.word	0x20001520
 800c780:	2000154c 	.word	0x2000154c
 800c784:	20001534 	.word	0x20001534

0800c788 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800c788:	b580      	push	{r7, lr}
 800c78a:	b082      	sub	sp, #8
 800c78c:	af00      	add	r7, sp, #0
 800c78e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800c790:	687b      	ldr	r3, [r7, #4]
 800c792:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800c796:	2b00      	cmp	r3, #0
 800c798:	d108      	bne.n	800c7ac <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800c79a:	687b      	ldr	r3, [r7, #4]
 800c79c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c79e:	4618      	mov	r0, r3
 800c7a0:	f000 feae 	bl	800d500 <vPortFree>
				vPortFree( pxTCB );
 800c7a4:	6878      	ldr	r0, [r7, #4]
 800c7a6:	f000 feab 	bl	800d500 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800c7aa:	e010      	b.n	800c7ce <prvDeleteTCB+0x46>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800c7ac:	687b      	ldr	r3, [r7, #4]
 800c7ae:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800c7b2:	2b01      	cmp	r3, #1
 800c7b4:	d103      	bne.n	800c7be <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800c7b6:	6878      	ldr	r0, [r7, #4]
 800c7b8:	f000 fea2 	bl	800d500 <vPortFree>
	}
 800c7bc:	e007      	b.n	800c7ce <prvDeleteTCB+0x46>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800c7be:	687b      	ldr	r3, [r7, #4]
 800c7c0:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800c7c4:	2b02      	cmp	r3, #2
 800c7c6:	d002      	beq.n	800c7ce <prvDeleteTCB+0x46>
 800c7c8:	f000 fd86 	bl	800d2d8 <ulSetInterruptMask>
 800c7cc:	e7fe      	b.n	800c7cc <prvDeleteTCB+0x44>
	}
 800c7ce:	bf00      	nop
 800c7d0:	3708      	adds	r7, #8
 800c7d2:	46bd      	mov	sp, r7
 800c7d4:	bd80      	pop	{r7, pc}
	...

0800c7d8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800c7d8:	b480      	push	{r7}
 800c7da:	b083      	sub	sp, #12
 800c7dc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c7de:	4b0c      	ldr	r3, [pc, #48]	; (800c810 <prvResetNextTaskUnblockTime+0x38>)
 800c7e0:	681b      	ldr	r3, [r3, #0]
 800c7e2:	681b      	ldr	r3, [r3, #0]
 800c7e4:	2b00      	cmp	r3, #0
 800c7e6:	d104      	bne.n	800c7f2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800c7e8:	4b0a      	ldr	r3, [pc, #40]	; (800c814 <prvResetNextTaskUnblockTime+0x3c>)
 800c7ea:	f04f 32ff 	mov.w	r2, #4294967295
 800c7ee:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800c7f0:	e008      	b.n	800c804 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c7f2:	4b07      	ldr	r3, [pc, #28]	; (800c810 <prvResetNextTaskUnblockTime+0x38>)
 800c7f4:	681b      	ldr	r3, [r3, #0]
 800c7f6:	68db      	ldr	r3, [r3, #12]
 800c7f8:	68db      	ldr	r3, [r3, #12]
 800c7fa:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800c7fc:	687b      	ldr	r3, [r7, #4]
 800c7fe:	685b      	ldr	r3, [r3, #4]
 800c800:	4a04      	ldr	r2, [pc, #16]	; (800c814 <prvResetNextTaskUnblockTime+0x3c>)
 800c802:	6013      	str	r3, [r2, #0]
}
 800c804:	bf00      	nop
 800c806:	370c      	adds	r7, #12
 800c808:	46bd      	mov	sp, r7
 800c80a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c80e:	4770      	bx	lr
 800c810:	20001504 	.word	0x20001504
 800c814:	2000156c 	.word	0x2000156c

0800c818 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800c818:	b480      	push	{r7}
 800c81a:	b083      	sub	sp, #12
 800c81c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800c81e:	4b0b      	ldr	r3, [pc, #44]	; (800c84c <xTaskGetSchedulerState+0x34>)
 800c820:	681b      	ldr	r3, [r3, #0]
 800c822:	2b00      	cmp	r3, #0
 800c824:	d102      	bne.n	800c82c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800c826:	2301      	movs	r3, #1
 800c828:	607b      	str	r3, [r7, #4]
 800c82a:	e008      	b.n	800c83e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c82c:	4b08      	ldr	r3, [pc, #32]	; (800c850 <xTaskGetSchedulerState+0x38>)
 800c82e:	681b      	ldr	r3, [r3, #0]
 800c830:	2b00      	cmp	r3, #0
 800c832:	d102      	bne.n	800c83a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800c834:	2302      	movs	r3, #2
 800c836:	607b      	str	r3, [r7, #4]
 800c838:	e001      	b.n	800c83e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800c83a:	2300      	movs	r3, #0
 800c83c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800c83e:	687b      	ldr	r3, [r7, #4]
	}
 800c840:	4618      	mov	r0, r3
 800c842:	370c      	adds	r7, #12
 800c844:	46bd      	mov	sp, r7
 800c846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c84a:	4770      	bx	lr
 800c84c:	20001558 	.word	0x20001558
 800c850:	20001574 	.word	0x20001574

0800c854 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800c854:	b580      	push	{r7, lr}
 800c856:	b084      	sub	sp, #16
 800c858:	af00      	add	r7, sp, #0
 800c85a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800c85c:	687b      	ldr	r3, [r7, #4]
 800c85e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800c860:	2300      	movs	r3, #0
 800c862:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
 800c864:	687b      	ldr	r3, [r7, #4]
 800c866:	2b00      	cmp	r3, #0
 800c868:	d046      	beq.n	800c8f8 <xTaskPriorityDisinherit+0xa4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800c86a:	4b26      	ldr	r3, [pc, #152]	; (800c904 <xTaskPriorityDisinherit+0xb0>)
 800c86c:	681b      	ldr	r3, [r3, #0]
 800c86e:	68ba      	ldr	r2, [r7, #8]
 800c870:	429a      	cmp	r2, r3
 800c872:	d002      	beq.n	800c87a <xTaskPriorityDisinherit+0x26>
 800c874:	f000 fd30 	bl	800d2d8 <ulSetInterruptMask>
 800c878:	e7fe      	b.n	800c878 <xTaskPriorityDisinherit+0x24>
			configASSERT( pxTCB->uxMutexesHeld );
 800c87a:	68bb      	ldr	r3, [r7, #8]
 800c87c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c87e:	2b00      	cmp	r3, #0
 800c880:	d102      	bne.n	800c888 <xTaskPriorityDisinherit+0x34>
 800c882:	f000 fd29 	bl	800d2d8 <ulSetInterruptMask>
 800c886:	e7fe      	b.n	800c886 <xTaskPriorityDisinherit+0x32>
			( pxTCB->uxMutexesHeld )--;
 800c888:	68bb      	ldr	r3, [r7, #8]
 800c88a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c88c:	1e5a      	subs	r2, r3, #1
 800c88e:	68bb      	ldr	r3, [r7, #8]
 800c890:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800c892:	68bb      	ldr	r3, [r7, #8]
 800c894:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c896:	68bb      	ldr	r3, [r7, #8]
 800c898:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c89a:	429a      	cmp	r2, r3
 800c89c:	d02c      	beq.n	800c8f8 <xTaskPriorityDisinherit+0xa4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800c89e:	68bb      	ldr	r3, [r7, #8]
 800c8a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c8a2:	2b00      	cmp	r3, #0
 800c8a4:	d128      	bne.n	800c8f8 <xTaskPriorityDisinherit+0xa4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c8a6:	68bb      	ldr	r3, [r7, #8]
 800c8a8:	3304      	adds	r3, #4
 800c8aa:	4618      	mov	r0, r3
 800c8ac:	f7fe fda6 	bl	800b3fc <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800c8b0:	68bb      	ldr	r3, [r7, #8]
 800c8b2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800c8b4:	68bb      	ldr	r3, [r7, #8]
 800c8b6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c8b8:	68bb      	ldr	r3, [r7, #8]
 800c8ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c8bc:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800c8c0:	68bb      	ldr	r3, [r7, #8]
 800c8c2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800c8c4:	68bb      	ldr	r3, [r7, #8]
 800c8c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c8c8:	4b0f      	ldr	r3, [pc, #60]	; (800c908 <xTaskPriorityDisinherit+0xb4>)
 800c8ca:	681b      	ldr	r3, [r3, #0]
 800c8cc:	429a      	cmp	r2, r3
 800c8ce:	d903      	bls.n	800c8d8 <xTaskPriorityDisinherit+0x84>
 800c8d0:	68bb      	ldr	r3, [r7, #8]
 800c8d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c8d4:	4a0c      	ldr	r2, [pc, #48]	; (800c908 <xTaskPriorityDisinherit+0xb4>)
 800c8d6:	6013      	str	r3, [r2, #0]
 800c8d8:	68bb      	ldr	r3, [r7, #8]
 800c8da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c8dc:	4613      	mov	r3, r2
 800c8de:	009b      	lsls	r3, r3, #2
 800c8e0:	4413      	add	r3, r2
 800c8e2:	009b      	lsls	r3, r3, #2
 800c8e4:	4a09      	ldr	r2, [pc, #36]	; (800c90c <xTaskPriorityDisinherit+0xb8>)
 800c8e6:	441a      	add	r2, r3
 800c8e8:	68bb      	ldr	r3, [r7, #8]
 800c8ea:	3304      	adds	r3, #4
 800c8ec:	4619      	mov	r1, r3
 800c8ee:	4610      	mov	r0, r2
 800c8f0:	f7fe fd27 	bl	800b342 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800c8f4:	2301      	movs	r3, #1
 800c8f6:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800c8f8:	68fb      	ldr	r3, [r7, #12]
	}
 800c8fa:	4618      	mov	r0, r3
 800c8fc:	3710      	adds	r7, #16
 800c8fe:	46bd      	mov	sp, r7
 800c900:	bd80      	pop	{r7, pc}
 800c902:	bf00      	nop
 800c904:	20001078 	.word	0x20001078
 800c908:	20001554 	.word	0x20001554
 800c90c:	2000107c 	.word	0x2000107c

0800c910 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800c910:	b580      	push	{r7, lr}
 800c912:	b084      	sub	sp, #16
 800c914:	af00      	add	r7, sp, #0
 800c916:	6078      	str	r0, [r7, #4]
 800c918:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800c91a:	4b21      	ldr	r3, [pc, #132]	; (800c9a0 <prvAddCurrentTaskToDelayedList+0x90>)
 800c91c:	681b      	ldr	r3, [r3, #0]
 800c91e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c920:	4b20      	ldr	r3, [pc, #128]	; (800c9a4 <prvAddCurrentTaskToDelayedList+0x94>)
 800c922:	681b      	ldr	r3, [r3, #0]
 800c924:	3304      	adds	r3, #4
 800c926:	4618      	mov	r0, r3
 800c928:	f7fe fd68 	bl	800b3fc <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800c92c:	687b      	ldr	r3, [r7, #4]
 800c92e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c932:	d10a      	bne.n	800c94a <prvAddCurrentTaskToDelayedList+0x3a>
 800c934:	683b      	ldr	r3, [r7, #0]
 800c936:	2b00      	cmp	r3, #0
 800c938:	d007      	beq.n	800c94a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c93a:	4b1a      	ldr	r3, [pc, #104]	; (800c9a4 <prvAddCurrentTaskToDelayedList+0x94>)
 800c93c:	681b      	ldr	r3, [r3, #0]
 800c93e:	3304      	adds	r3, #4
 800c940:	4619      	mov	r1, r3
 800c942:	4819      	ldr	r0, [pc, #100]	; (800c9a8 <prvAddCurrentTaskToDelayedList+0x98>)
 800c944:	f7fe fcfd 	bl	800b342 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800c948:	e026      	b.n	800c998 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800c94a:	68fa      	ldr	r2, [r7, #12]
 800c94c:	687b      	ldr	r3, [r7, #4]
 800c94e:	4413      	add	r3, r2
 800c950:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800c952:	4b14      	ldr	r3, [pc, #80]	; (800c9a4 <prvAddCurrentTaskToDelayedList+0x94>)
 800c954:	681b      	ldr	r3, [r3, #0]
 800c956:	68ba      	ldr	r2, [r7, #8]
 800c958:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800c95a:	68ba      	ldr	r2, [r7, #8]
 800c95c:	68fb      	ldr	r3, [r7, #12]
 800c95e:	429a      	cmp	r2, r3
 800c960:	d209      	bcs.n	800c976 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c962:	4b12      	ldr	r3, [pc, #72]	; (800c9ac <prvAddCurrentTaskToDelayedList+0x9c>)
 800c964:	681a      	ldr	r2, [r3, #0]
 800c966:	4b0f      	ldr	r3, [pc, #60]	; (800c9a4 <prvAddCurrentTaskToDelayedList+0x94>)
 800c968:	681b      	ldr	r3, [r3, #0]
 800c96a:	3304      	adds	r3, #4
 800c96c:	4619      	mov	r1, r3
 800c96e:	4610      	mov	r0, r2
 800c970:	f7fe fd0b 	bl	800b38a <vListInsert>
}
 800c974:	e010      	b.n	800c998 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c976:	4b0e      	ldr	r3, [pc, #56]	; (800c9b0 <prvAddCurrentTaskToDelayedList+0xa0>)
 800c978:	681a      	ldr	r2, [r3, #0]
 800c97a:	4b0a      	ldr	r3, [pc, #40]	; (800c9a4 <prvAddCurrentTaskToDelayedList+0x94>)
 800c97c:	681b      	ldr	r3, [r3, #0]
 800c97e:	3304      	adds	r3, #4
 800c980:	4619      	mov	r1, r3
 800c982:	4610      	mov	r0, r2
 800c984:	f7fe fd01 	bl	800b38a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800c988:	4b0a      	ldr	r3, [pc, #40]	; (800c9b4 <prvAddCurrentTaskToDelayedList+0xa4>)
 800c98a:	681b      	ldr	r3, [r3, #0]
 800c98c:	68ba      	ldr	r2, [r7, #8]
 800c98e:	429a      	cmp	r2, r3
 800c990:	d202      	bcs.n	800c998 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800c992:	4a08      	ldr	r2, [pc, #32]	; (800c9b4 <prvAddCurrentTaskToDelayedList+0xa4>)
 800c994:	68bb      	ldr	r3, [r7, #8]
 800c996:	6013      	str	r3, [r2, #0]
}
 800c998:	bf00      	nop
 800c99a:	3710      	adds	r7, #16
 800c99c:	46bd      	mov	sp, r7
 800c99e:	bd80      	pop	{r7, pc}
 800c9a0:	20001550 	.word	0x20001550
 800c9a4:	20001078 	.word	0x20001078
 800c9a8:	20001538 	.word	0x20001538
 800c9ac:	20001508 	.word	0x20001508
 800c9b0:	20001504 	.word	0x20001504
 800c9b4:	2000156c 	.word	0x2000156c

0800c9b8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800c9b8:	b580      	push	{r7, lr}
 800c9ba:	b088      	sub	sp, #32
 800c9bc:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800c9be:	2300      	movs	r3, #0
 800c9c0:	60fb      	str	r3, [r7, #12]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800c9c2:	f000 fac7 	bl	800cf54 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800c9c6:	4b18      	ldr	r3, [pc, #96]	; (800ca28 <xTimerCreateTimerTask+0x70>)
 800c9c8:	681b      	ldr	r3, [r3, #0]
 800c9ca:	2b00      	cmp	r3, #0
 800c9cc:	d020      	beq.n	800ca10 <xTimerCreateTimerTask+0x58>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800c9ce:	2300      	movs	r3, #0
 800c9d0:	60bb      	str	r3, [r7, #8]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800c9d2:	2300      	movs	r3, #0
 800c9d4:	607b      	str	r3, [r7, #4]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800c9d6:	463a      	mov	r2, r7
 800c9d8:	1d39      	adds	r1, r7, #4
 800c9da:	f107 0308 	add.w	r3, r7, #8
 800c9de:	4618      	mov	r0, r3
 800c9e0:	f7fe fc68 	bl	800b2b4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800c9e4:	6839      	ldr	r1, [r7, #0]
 800c9e6:	687b      	ldr	r3, [r7, #4]
 800c9e8:	68ba      	ldr	r2, [r7, #8]
 800c9ea:	9202      	str	r2, [sp, #8]
 800c9ec:	9301      	str	r3, [sp, #4]
 800c9ee:	2302      	movs	r3, #2
 800c9f0:	9300      	str	r3, [sp, #0]
 800c9f2:	2300      	movs	r3, #0
 800c9f4:	460a      	mov	r2, r1
 800c9f6:	490d      	ldr	r1, [pc, #52]	; (800ca2c <xTimerCreateTimerTask+0x74>)
 800c9f8:	480d      	ldr	r0, [pc, #52]	; (800ca30 <xTimerCreateTimerTask+0x78>)
 800c9fa:	f7ff f955 	bl	800bca8 <xTaskCreateStatic>
 800c9fe:	4603      	mov	r3, r0
 800ca00:	4a0c      	ldr	r2, [pc, #48]	; (800ca34 <xTimerCreateTimerTask+0x7c>)
 800ca02:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800ca04:	4b0b      	ldr	r3, [pc, #44]	; (800ca34 <xTimerCreateTimerTask+0x7c>)
 800ca06:	681b      	ldr	r3, [r3, #0]
 800ca08:	2b00      	cmp	r3, #0
 800ca0a:	d001      	beq.n	800ca10 <xTimerCreateTimerTask+0x58>
			{
				xReturn = pdPASS;
 800ca0c:	2301      	movs	r3, #1
 800ca0e:	60fb      	str	r3, [r7, #12]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800ca10:	68fb      	ldr	r3, [r7, #12]
 800ca12:	2b00      	cmp	r3, #0
 800ca14:	d102      	bne.n	800ca1c <xTimerCreateTimerTask+0x64>
 800ca16:	f000 fc5f 	bl	800d2d8 <ulSetInterruptMask>
 800ca1a:	e7fe      	b.n	800ca1a <xTimerCreateTimerTask+0x62>
	return xReturn;
 800ca1c:	68fb      	ldr	r3, [r7, #12]
}
 800ca1e:	4618      	mov	r0, r3
 800ca20:	3710      	adds	r7, #16
 800ca22:	46bd      	mov	sp, r7
 800ca24:	bd80      	pop	{r7, pc}
 800ca26:	bf00      	nop
 800ca28:	200015a8 	.word	0x200015a8
 800ca2c:	0800e3ec 	.word	0x0800e3ec
 800ca30:	0800cb4d 	.word	0x0800cb4d
 800ca34:	200015ac 	.word	0x200015ac

0800ca38 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800ca38:	b580      	push	{r7, lr}
 800ca3a:	b08a      	sub	sp, #40	; 0x28
 800ca3c:	af00      	add	r7, sp, #0
 800ca3e:	60f8      	str	r0, [r7, #12]
 800ca40:	60b9      	str	r1, [r7, #8]
 800ca42:	607a      	str	r2, [r7, #4]
 800ca44:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800ca46:	2300      	movs	r3, #0
 800ca48:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800ca4a:	68fb      	ldr	r3, [r7, #12]
 800ca4c:	2b00      	cmp	r3, #0
 800ca4e:	d102      	bne.n	800ca56 <xTimerGenericCommand+0x1e>
 800ca50:	f000 fc42 	bl	800d2d8 <ulSetInterruptMask>
 800ca54:	e7fe      	b.n	800ca54 <xTimerGenericCommand+0x1c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800ca56:	4b1a      	ldr	r3, [pc, #104]	; (800cac0 <xTimerGenericCommand+0x88>)
 800ca58:	681b      	ldr	r3, [r3, #0]
 800ca5a:	2b00      	cmp	r3, #0
 800ca5c:	d02a      	beq.n	800cab4 <xTimerGenericCommand+0x7c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800ca5e:	68bb      	ldr	r3, [r7, #8]
 800ca60:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800ca62:	687b      	ldr	r3, [r7, #4]
 800ca64:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800ca66:	68fb      	ldr	r3, [r7, #12]
 800ca68:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800ca6a:	68bb      	ldr	r3, [r7, #8]
 800ca6c:	2b05      	cmp	r3, #5
 800ca6e:	dc18      	bgt.n	800caa2 <xTimerGenericCommand+0x6a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800ca70:	f7ff fed2 	bl	800c818 <xTaskGetSchedulerState>
 800ca74:	4603      	mov	r3, r0
 800ca76:	2b02      	cmp	r3, #2
 800ca78:	d109      	bne.n	800ca8e <xTimerGenericCommand+0x56>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800ca7a:	4b11      	ldr	r3, [pc, #68]	; (800cac0 <xTimerGenericCommand+0x88>)
 800ca7c:	6818      	ldr	r0, [r3, #0]
 800ca7e:	f107 0114 	add.w	r1, r7, #20
 800ca82:	2300      	movs	r3, #0
 800ca84:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ca86:	f7fe fdae 	bl	800b5e6 <xQueueGenericSend>
 800ca8a:	6278      	str	r0, [r7, #36]	; 0x24
 800ca8c:	e012      	b.n	800cab4 <xTimerGenericCommand+0x7c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800ca8e:	4b0c      	ldr	r3, [pc, #48]	; (800cac0 <xTimerGenericCommand+0x88>)
 800ca90:	6818      	ldr	r0, [r3, #0]
 800ca92:	f107 0114 	add.w	r1, r7, #20
 800ca96:	2300      	movs	r3, #0
 800ca98:	2200      	movs	r2, #0
 800ca9a:	f7fe fda4 	bl	800b5e6 <xQueueGenericSend>
 800ca9e:	6278      	str	r0, [r7, #36]	; 0x24
 800caa0:	e008      	b.n	800cab4 <xTimerGenericCommand+0x7c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800caa2:	4b07      	ldr	r3, [pc, #28]	; (800cac0 <xTimerGenericCommand+0x88>)
 800caa4:	6818      	ldr	r0, [r3, #0]
 800caa6:	f107 0114 	add.w	r1, r7, #20
 800caaa:	2300      	movs	r3, #0
 800caac:	683a      	ldr	r2, [r7, #0]
 800caae:	f7fe fe63 	bl	800b778 <xQueueGenericSendFromISR>
 800cab2:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800cab4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800cab6:	4618      	mov	r0, r3
 800cab8:	3728      	adds	r7, #40	; 0x28
 800caba:	46bd      	mov	sp, r7
 800cabc:	bd80      	pop	{r7, pc}
 800cabe:	bf00      	nop
 800cac0:	200015a8 	.word	0x200015a8

0800cac4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800cac4:	b580      	push	{r7, lr}
 800cac6:	b086      	sub	sp, #24
 800cac8:	af02      	add	r7, sp, #8
 800caca:	6078      	str	r0, [r7, #4]
 800cacc:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cace:	4b1e      	ldr	r3, [pc, #120]	; (800cb48 <prvProcessExpiredTimer+0x84>)
 800cad0:	681b      	ldr	r3, [r3, #0]
 800cad2:	68db      	ldr	r3, [r3, #12]
 800cad4:	68db      	ldr	r3, [r3, #12]
 800cad6:	60fb      	str	r3, [r7, #12]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800cad8:	68fb      	ldr	r3, [r7, #12]
 800cada:	3304      	adds	r3, #4
 800cadc:	4618      	mov	r0, r3
 800cade:	f7fe fc8d 	bl	800b3fc <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800cae2:	68fb      	ldr	r3, [r7, #12]
 800cae4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800cae8:	f003 0304 	and.w	r3, r3, #4
 800caec:	2b00      	cmp	r3, #0
 800caee:	d01a      	beq.n	800cb26 <prvProcessExpiredTimer+0x62>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800caf0:	68fb      	ldr	r3, [r7, #12]
 800caf2:	699a      	ldr	r2, [r3, #24]
 800caf4:	687b      	ldr	r3, [r7, #4]
 800caf6:	18d1      	adds	r1, r2, r3
 800caf8:	687b      	ldr	r3, [r7, #4]
 800cafa:	683a      	ldr	r2, [r7, #0]
 800cafc:	68f8      	ldr	r0, [r7, #12]
 800cafe:	f000 f8c1 	bl	800cc84 <prvInsertTimerInActiveList>
 800cb02:	4603      	mov	r3, r0
 800cb04:	2b00      	cmp	r3, #0
 800cb06:	d017      	beq.n	800cb38 <prvProcessExpiredTimer+0x74>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800cb08:	2300      	movs	r3, #0
 800cb0a:	9300      	str	r3, [sp, #0]
 800cb0c:	2300      	movs	r3, #0
 800cb0e:	687a      	ldr	r2, [r7, #4]
 800cb10:	2100      	movs	r1, #0
 800cb12:	68f8      	ldr	r0, [r7, #12]
 800cb14:	f7ff ff90 	bl	800ca38 <xTimerGenericCommand>
 800cb18:	60b8      	str	r0, [r7, #8]
			configASSERT( xResult );
 800cb1a:	68bb      	ldr	r3, [r7, #8]
 800cb1c:	2b00      	cmp	r3, #0
 800cb1e:	d10b      	bne.n	800cb38 <prvProcessExpiredTimer+0x74>
 800cb20:	f000 fbda 	bl	800d2d8 <ulSetInterruptMask>
 800cb24:	e7fe      	b.n	800cb24 <prvProcessExpiredTimer+0x60>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800cb26:	68fb      	ldr	r3, [r7, #12]
 800cb28:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800cb2c:	f023 0301 	bic.w	r3, r3, #1
 800cb30:	b2da      	uxtb	r2, r3
 800cb32:	68fb      	ldr	r3, [r7, #12]
 800cb34:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800cb38:	68fb      	ldr	r3, [r7, #12]
 800cb3a:	6a1b      	ldr	r3, [r3, #32]
 800cb3c:	68f8      	ldr	r0, [r7, #12]
 800cb3e:	4798      	blx	r3
}
 800cb40:	bf00      	nop
 800cb42:	3710      	adds	r7, #16
 800cb44:	46bd      	mov	sp, r7
 800cb46:	bd80      	pop	{r7, pc}
 800cb48:	200015a0 	.word	0x200015a0

0800cb4c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800cb4c:	b580      	push	{r7, lr}
 800cb4e:	b084      	sub	sp, #16
 800cb50:	af00      	add	r7, sp, #0
 800cb52:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800cb54:	f107 0308 	add.w	r3, r7, #8
 800cb58:	4618      	mov	r0, r3
 800cb5a:	f000 f84f 	bl	800cbfc <prvGetNextExpireTime>
 800cb5e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800cb60:	68bb      	ldr	r3, [r7, #8]
 800cb62:	4619      	mov	r1, r3
 800cb64:	68f8      	ldr	r0, [r7, #12]
 800cb66:	f000 f803 	bl	800cb70 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800cb6a:	f000 f8cd 	bl	800cd08 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800cb6e:	e7f1      	b.n	800cb54 <prvTimerTask+0x8>

0800cb70 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800cb70:	b580      	push	{r7, lr}
 800cb72:	b084      	sub	sp, #16
 800cb74:	af00      	add	r7, sp, #0
 800cb76:	6078      	str	r0, [r7, #4]
 800cb78:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800cb7a:	f7ff fac5 	bl	800c108 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800cb7e:	f107 0308 	add.w	r3, r7, #8
 800cb82:	4618      	mov	r0, r3
 800cb84:	f000 f85e 	bl	800cc44 <prvSampleTimeNow>
 800cb88:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800cb8a:	68bb      	ldr	r3, [r7, #8]
 800cb8c:	2b00      	cmp	r3, #0
 800cb8e:	d12a      	bne.n	800cbe6 <prvProcessTimerOrBlockTask+0x76>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800cb90:	683b      	ldr	r3, [r7, #0]
 800cb92:	2b00      	cmp	r3, #0
 800cb94:	d10a      	bne.n	800cbac <prvProcessTimerOrBlockTask+0x3c>
 800cb96:	687a      	ldr	r2, [r7, #4]
 800cb98:	68fb      	ldr	r3, [r7, #12]
 800cb9a:	429a      	cmp	r2, r3
 800cb9c:	d806      	bhi.n	800cbac <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800cb9e:	f7ff fac1 	bl	800c124 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800cba2:	68f9      	ldr	r1, [r7, #12]
 800cba4:	6878      	ldr	r0, [r7, #4]
 800cba6:	f7ff ff8d 	bl	800cac4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800cbaa:	e01e      	b.n	800cbea <prvProcessTimerOrBlockTask+0x7a>
				if( xListWasEmpty != pdFALSE )
 800cbac:	683b      	ldr	r3, [r7, #0]
 800cbae:	2b00      	cmp	r3, #0
 800cbb0:	d008      	beq.n	800cbc4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800cbb2:	4b10      	ldr	r3, [pc, #64]	; (800cbf4 <prvProcessTimerOrBlockTask+0x84>)
 800cbb4:	681b      	ldr	r3, [r3, #0]
 800cbb6:	681b      	ldr	r3, [r3, #0]
 800cbb8:	2b00      	cmp	r3, #0
 800cbba:	d101      	bne.n	800cbc0 <prvProcessTimerOrBlockTask+0x50>
 800cbbc:	2301      	movs	r3, #1
 800cbbe:	e000      	b.n	800cbc2 <prvProcessTimerOrBlockTask+0x52>
 800cbc0:	2300      	movs	r3, #0
 800cbc2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800cbc4:	4b0c      	ldr	r3, [pc, #48]	; (800cbf8 <prvProcessTimerOrBlockTask+0x88>)
 800cbc6:	6818      	ldr	r0, [r3, #0]
 800cbc8:	687a      	ldr	r2, [r7, #4]
 800cbca:	68fb      	ldr	r3, [r7, #12]
 800cbcc:	1ad3      	subs	r3, r2, r3
 800cbce:	683a      	ldr	r2, [r7, #0]
 800cbd0:	4619      	mov	r1, r3
 800cbd2:	f7ff f835 	bl	800bc40 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800cbd6:	f7ff faa5 	bl	800c124 <xTaskResumeAll>
 800cbda:	4603      	mov	r3, r0
 800cbdc:	2b00      	cmp	r3, #0
 800cbde:	d104      	bne.n	800cbea <prvProcessTimerOrBlockTask+0x7a>
					portYIELD_WITHIN_API();
 800cbe0:	f000 fa36 	bl	800d050 <vPortYield>
}
 800cbe4:	e001      	b.n	800cbea <prvProcessTimerOrBlockTask+0x7a>
			( void ) xTaskResumeAll();
 800cbe6:	f7ff fa9d 	bl	800c124 <xTaskResumeAll>
}
 800cbea:	bf00      	nop
 800cbec:	3710      	adds	r7, #16
 800cbee:	46bd      	mov	sp, r7
 800cbf0:	bd80      	pop	{r7, pc}
 800cbf2:	bf00      	nop
 800cbf4:	200015a4 	.word	0x200015a4
 800cbf8:	200015a8 	.word	0x200015a8

0800cbfc <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800cbfc:	b480      	push	{r7}
 800cbfe:	b085      	sub	sp, #20
 800cc00:	af00      	add	r7, sp, #0
 800cc02:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800cc04:	4b0e      	ldr	r3, [pc, #56]	; (800cc40 <prvGetNextExpireTime+0x44>)
 800cc06:	681b      	ldr	r3, [r3, #0]
 800cc08:	681b      	ldr	r3, [r3, #0]
 800cc0a:	2b00      	cmp	r3, #0
 800cc0c:	d101      	bne.n	800cc12 <prvGetNextExpireTime+0x16>
 800cc0e:	2201      	movs	r2, #1
 800cc10:	e000      	b.n	800cc14 <prvGetNextExpireTime+0x18>
 800cc12:	2200      	movs	r2, #0
 800cc14:	687b      	ldr	r3, [r7, #4]
 800cc16:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800cc18:	687b      	ldr	r3, [r7, #4]
 800cc1a:	681b      	ldr	r3, [r3, #0]
 800cc1c:	2b00      	cmp	r3, #0
 800cc1e:	d105      	bne.n	800cc2c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800cc20:	4b07      	ldr	r3, [pc, #28]	; (800cc40 <prvGetNextExpireTime+0x44>)
 800cc22:	681b      	ldr	r3, [r3, #0]
 800cc24:	68db      	ldr	r3, [r3, #12]
 800cc26:	681b      	ldr	r3, [r3, #0]
 800cc28:	60fb      	str	r3, [r7, #12]
 800cc2a:	e001      	b.n	800cc30 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800cc2c:	2300      	movs	r3, #0
 800cc2e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800cc30:	68fb      	ldr	r3, [r7, #12]
}
 800cc32:	4618      	mov	r0, r3
 800cc34:	3714      	adds	r7, #20
 800cc36:	46bd      	mov	sp, r7
 800cc38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc3c:	4770      	bx	lr
 800cc3e:	bf00      	nop
 800cc40:	200015a0 	.word	0x200015a0

0800cc44 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800cc44:	b580      	push	{r7, lr}
 800cc46:	b084      	sub	sp, #16
 800cc48:	af00      	add	r7, sp, #0
 800cc4a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800cc4c:	f7ff faf8 	bl	800c240 <xTaskGetTickCount>
 800cc50:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800cc52:	4b0b      	ldr	r3, [pc, #44]	; (800cc80 <prvSampleTimeNow+0x3c>)
 800cc54:	681b      	ldr	r3, [r3, #0]
 800cc56:	68fa      	ldr	r2, [r7, #12]
 800cc58:	429a      	cmp	r2, r3
 800cc5a:	d205      	bcs.n	800cc68 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800cc5c:	f000 f91e 	bl	800ce9c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800cc60:	687b      	ldr	r3, [r7, #4]
 800cc62:	2201      	movs	r2, #1
 800cc64:	601a      	str	r2, [r3, #0]
 800cc66:	e002      	b.n	800cc6e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800cc68:	687b      	ldr	r3, [r7, #4]
 800cc6a:	2200      	movs	r2, #0
 800cc6c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800cc6e:	4a04      	ldr	r2, [pc, #16]	; (800cc80 <prvSampleTimeNow+0x3c>)
 800cc70:	68fb      	ldr	r3, [r7, #12]
 800cc72:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800cc74:	68fb      	ldr	r3, [r7, #12]
}
 800cc76:	4618      	mov	r0, r3
 800cc78:	3710      	adds	r7, #16
 800cc7a:	46bd      	mov	sp, r7
 800cc7c:	bd80      	pop	{r7, pc}
 800cc7e:	bf00      	nop
 800cc80:	200015b0 	.word	0x200015b0

0800cc84 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800cc84:	b580      	push	{r7, lr}
 800cc86:	b086      	sub	sp, #24
 800cc88:	af00      	add	r7, sp, #0
 800cc8a:	60f8      	str	r0, [r7, #12]
 800cc8c:	60b9      	str	r1, [r7, #8]
 800cc8e:	607a      	str	r2, [r7, #4]
 800cc90:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800cc92:	2300      	movs	r3, #0
 800cc94:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800cc96:	68fb      	ldr	r3, [r7, #12]
 800cc98:	68ba      	ldr	r2, [r7, #8]
 800cc9a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800cc9c:	68fb      	ldr	r3, [r7, #12]
 800cc9e:	68fa      	ldr	r2, [r7, #12]
 800cca0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800cca2:	68ba      	ldr	r2, [r7, #8]
 800cca4:	687b      	ldr	r3, [r7, #4]
 800cca6:	429a      	cmp	r2, r3
 800cca8:	d812      	bhi.n	800ccd0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ccaa:	687a      	ldr	r2, [r7, #4]
 800ccac:	683b      	ldr	r3, [r7, #0]
 800ccae:	1ad2      	subs	r2, r2, r3
 800ccb0:	68fb      	ldr	r3, [r7, #12]
 800ccb2:	699b      	ldr	r3, [r3, #24]
 800ccb4:	429a      	cmp	r2, r3
 800ccb6:	d302      	bcc.n	800ccbe <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800ccb8:	2301      	movs	r3, #1
 800ccba:	617b      	str	r3, [r7, #20]
 800ccbc:	e01b      	b.n	800ccf6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800ccbe:	4b10      	ldr	r3, [pc, #64]	; (800cd00 <prvInsertTimerInActiveList+0x7c>)
 800ccc0:	681a      	ldr	r2, [r3, #0]
 800ccc2:	68fb      	ldr	r3, [r7, #12]
 800ccc4:	3304      	adds	r3, #4
 800ccc6:	4619      	mov	r1, r3
 800ccc8:	4610      	mov	r0, r2
 800ccca:	f7fe fb5e 	bl	800b38a <vListInsert>
 800ccce:	e012      	b.n	800ccf6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800ccd0:	687a      	ldr	r2, [r7, #4]
 800ccd2:	683b      	ldr	r3, [r7, #0]
 800ccd4:	429a      	cmp	r2, r3
 800ccd6:	d206      	bcs.n	800cce6 <prvInsertTimerInActiveList+0x62>
 800ccd8:	68ba      	ldr	r2, [r7, #8]
 800ccda:	683b      	ldr	r3, [r7, #0]
 800ccdc:	429a      	cmp	r2, r3
 800ccde:	d302      	bcc.n	800cce6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800cce0:	2301      	movs	r3, #1
 800cce2:	617b      	str	r3, [r7, #20]
 800cce4:	e007      	b.n	800ccf6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800cce6:	4b07      	ldr	r3, [pc, #28]	; (800cd04 <prvInsertTimerInActiveList+0x80>)
 800cce8:	681a      	ldr	r2, [r3, #0]
 800ccea:	68fb      	ldr	r3, [r7, #12]
 800ccec:	3304      	adds	r3, #4
 800ccee:	4619      	mov	r1, r3
 800ccf0:	4610      	mov	r0, r2
 800ccf2:	f7fe fb4a 	bl	800b38a <vListInsert>
		}
	}

	return xProcessTimerNow;
 800ccf6:	697b      	ldr	r3, [r7, #20]
}
 800ccf8:	4618      	mov	r0, r3
 800ccfa:	3718      	adds	r7, #24
 800ccfc:	46bd      	mov	sp, r7
 800ccfe:	bd80      	pop	{r7, pc}
 800cd00:	200015a4 	.word	0x200015a4
 800cd04:	200015a0 	.word	0x200015a0

0800cd08 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800cd08:	b580      	push	{r7, lr}
 800cd0a:	b08c      	sub	sp, #48	; 0x30
 800cd0c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800cd0e:	e0b2      	b.n	800ce76 <prvProcessReceivedCommands+0x16e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800cd10:	68bb      	ldr	r3, [r7, #8]
 800cd12:	2b00      	cmp	r3, #0
 800cd14:	da11      	bge.n	800cd3a <prvProcessReceivedCommands+0x32>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800cd16:	f107 0308 	add.w	r3, r7, #8
 800cd1a:	3304      	adds	r3, #4
 800cd1c:	627b      	str	r3, [r7, #36]	; 0x24

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800cd1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd20:	2b00      	cmp	r3, #0
 800cd22:	d102      	bne.n	800cd2a <prvProcessReceivedCommands+0x22>
 800cd24:	f000 fad8 	bl	800d2d8 <ulSetInterruptMask>
 800cd28:	e7fe      	b.n	800cd28 <prvProcessReceivedCommands+0x20>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800cd2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd2c:	681b      	ldr	r3, [r3, #0]
 800cd2e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cd30:	6850      	ldr	r0, [r2, #4]
 800cd32:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cd34:	6892      	ldr	r2, [r2, #8]
 800cd36:	4611      	mov	r1, r2
 800cd38:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800cd3a:	68bb      	ldr	r3, [r7, #8]
 800cd3c:	2b00      	cmp	r3, #0
 800cd3e:	f2c0 809a 	blt.w	800ce76 <prvProcessReceivedCommands+0x16e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800cd42:	693b      	ldr	r3, [r7, #16]
 800cd44:	623b      	str	r3, [r7, #32]

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800cd46:	6a3b      	ldr	r3, [r7, #32]
 800cd48:	695b      	ldr	r3, [r3, #20]
 800cd4a:	2b00      	cmp	r3, #0
 800cd4c:	d004      	beq.n	800cd58 <prvProcessReceivedCommands+0x50>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800cd4e:	6a3b      	ldr	r3, [r7, #32]
 800cd50:	3304      	adds	r3, #4
 800cd52:	4618      	mov	r0, r3
 800cd54:	f7fe fb52 	bl	800b3fc <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800cd58:	1d3b      	adds	r3, r7, #4
 800cd5a:	4618      	mov	r0, r3
 800cd5c:	f7ff ff72 	bl	800cc44 <prvSampleTimeNow>
 800cd60:	61f8      	str	r0, [r7, #28]

			switch( xMessage.xMessageID )
 800cd62:	68bb      	ldr	r3, [r7, #8]
 800cd64:	2b09      	cmp	r3, #9
 800cd66:	f200 8085 	bhi.w	800ce74 <prvProcessReceivedCommands+0x16c>
 800cd6a:	a201      	add	r2, pc, #4	; (adr r2, 800cd70 <prvProcessReceivedCommands+0x68>)
 800cd6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cd70:	0800cd99 	.word	0x0800cd99
 800cd74:	0800cd99 	.word	0x0800cd99
 800cd78:	0800cd99 	.word	0x0800cd99
 800cd7c:	0800cdfd 	.word	0x0800cdfd
 800cd80:	0800ce11 	.word	0x0800ce11
 800cd84:	0800ce4b 	.word	0x0800ce4b
 800cd88:	0800cd99 	.word	0x0800cd99
 800cd8c:	0800cd99 	.word	0x0800cd99
 800cd90:	0800cdfd 	.word	0x0800cdfd
 800cd94:	0800ce11 	.word	0x0800ce11
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800cd98:	6a3b      	ldr	r3, [r7, #32]
 800cd9a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800cd9e:	f043 0301 	orr.w	r3, r3, #1
 800cda2:	b2da      	uxtb	r2, r3
 800cda4:	6a3b      	ldr	r3, [r7, #32]
 800cda6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800cdaa:	68fa      	ldr	r2, [r7, #12]
 800cdac:	6a3b      	ldr	r3, [r7, #32]
 800cdae:	699b      	ldr	r3, [r3, #24]
 800cdb0:	18d1      	adds	r1, r2, r3
 800cdb2:	68fb      	ldr	r3, [r7, #12]
 800cdb4:	69fa      	ldr	r2, [r7, #28]
 800cdb6:	6a38      	ldr	r0, [r7, #32]
 800cdb8:	f7ff ff64 	bl	800cc84 <prvInsertTimerInActiveList>
 800cdbc:	4603      	mov	r3, r0
 800cdbe:	2b00      	cmp	r3, #0
 800cdc0:	d059      	beq.n	800ce76 <prvProcessReceivedCommands+0x16e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800cdc2:	6a3b      	ldr	r3, [r7, #32]
 800cdc4:	6a1b      	ldr	r3, [r3, #32]
 800cdc6:	6a38      	ldr	r0, [r7, #32]
 800cdc8:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800cdca:	6a3b      	ldr	r3, [r7, #32]
 800cdcc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800cdd0:	f003 0304 	and.w	r3, r3, #4
 800cdd4:	2b00      	cmp	r3, #0
 800cdd6:	d04e      	beq.n	800ce76 <prvProcessReceivedCommands+0x16e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800cdd8:	68fa      	ldr	r2, [r7, #12]
 800cdda:	6a3b      	ldr	r3, [r7, #32]
 800cddc:	699b      	ldr	r3, [r3, #24]
 800cdde:	441a      	add	r2, r3
 800cde0:	2300      	movs	r3, #0
 800cde2:	9300      	str	r3, [sp, #0]
 800cde4:	2300      	movs	r3, #0
 800cde6:	2100      	movs	r1, #0
 800cde8:	6a38      	ldr	r0, [r7, #32]
 800cdea:	f7ff fe25 	bl	800ca38 <xTimerGenericCommand>
 800cdee:	61b8      	str	r0, [r7, #24]
							configASSERT( xResult );
 800cdf0:	69bb      	ldr	r3, [r7, #24]
 800cdf2:	2b00      	cmp	r3, #0
 800cdf4:	d13f      	bne.n	800ce76 <prvProcessReceivedCommands+0x16e>
 800cdf6:	f000 fa6f 	bl	800d2d8 <ulSetInterruptMask>
 800cdfa:	e7fe      	b.n	800cdfa <prvProcessReceivedCommands+0xf2>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800cdfc:	6a3b      	ldr	r3, [r7, #32]
 800cdfe:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ce02:	f023 0301 	bic.w	r3, r3, #1
 800ce06:	b2da      	uxtb	r2, r3
 800ce08:	6a3b      	ldr	r3, [r7, #32]
 800ce0a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800ce0e:	e032      	b.n	800ce76 <prvProcessReceivedCommands+0x16e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800ce10:	6a3b      	ldr	r3, [r7, #32]
 800ce12:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ce16:	f043 0301 	orr.w	r3, r3, #1
 800ce1a:	b2da      	uxtb	r2, r3
 800ce1c:	6a3b      	ldr	r3, [r7, #32]
 800ce1e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800ce22:	68fa      	ldr	r2, [r7, #12]
 800ce24:	6a3b      	ldr	r3, [r7, #32]
 800ce26:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800ce28:	6a3b      	ldr	r3, [r7, #32]
 800ce2a:	699b      	ldr	r3, [r3, #24]
 800ce2c:	2b00      	cmp	r3, #0
 800ce2e:	d102      	bne.n	800ce36 <prvProcessReceivedCommands+0x12e>
 800ce30:	f000 fa52 	bl	800d2d8 <ulSetInterruptMask>
 800ce34:	e7fe      	b.n	800ce34 <prvProcessReceivedCommands+0x12c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800ce36:	6a3b      	ldr	r3, [r7, #32]
 800ce38:	699a      	ldr	r2, [r3, #24]
 800ce3a:	69fb      	ldr	r3, [r7, #28]
 800ce3c:	18d1      	adds	r1, r2, r3
 800ce3e:	69fb      	ldr	r3, [r7, #28]
 800ce40:	69fa      	ldr	r2, [r7, #28]
 800ce42:	6a38      	ldr	r0, [r7, #32]
 800ce44:	f7ff ff1e 	bl	800cc84 <prvInsertTimerInActiveList>
					break;
 800ce48:	e015      	b.n	800ce76 <prvProcessReceivedCommands+0x16e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800ce4a:	6a3b      	ldr	r3, [r7, #32]
 800ce4c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ce50:	f003 0302 	and.w	r3, r3, #2
 800ce54:	2b00      	cmp	r3, #0
 800ce56:	d103      	bne.n	800ce60 <prvProcessReceivedCommands+0x158>
						{
							vPortFree( pxTimer );
 800ce58:	6a38      	ldr	r0, [r7, #32]
 800ce5a:	f000 fb51 	bl	800d500 <vPortFree>
 800ce5e:	e00a      	b.n	800ce76 <prvProcessReceivedCommands+0x16e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800ce60:	6a3b      	ldr	r3, [r7, #32]
 800ce62:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ce66:	f023 0301 	bic.w	r3, r3, #1
 800ce6a:	b2da      	uxtb	r2, r3
 800ce6c:	6a3b      	ldr	r3, [r7, #32]
 800ce6e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800ce72:	e000      	b.n	800ce76 <prvProcessReceivedCommands+0x16e>

				default	:
					/* Don't expect to get here. */
					break;
 800ce74:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800ce76:	4b08      	ldr	r3, [pc, #32]	; (800ce98 <prvProcessReceivedCommands+0x190>)
 800ce78:	681b      	ldr	r3, [r3, #0]
 800ce7a:	f107 0108 	add.w	r1, r7, #8
 800ce7e:	2200      	movs	r2, #0
 800ce80:	4618      	mov	r0, r3
 800ce82:	f7fe fcea 	bl	800b85a <xQueueReceive>
 800ce86:	4603      	mov	r3, r0
 800ce88:	2b00      	cmp	r3, #0
 800ce8a:	f47f af41 	bne.w	800cd10 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800ce8e:	bf00      	nop
 800ce90:	bf00      	nop
 800ce92:	3728      	adds	r7, #40	; 0x28
 800ce94:	46bd      	mov	sp, r7
 800ce96:	bd80      	pop	{r7, pc}
 800ce98:	200015a8 	.word	0x200015a8

0800ce9c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800ce9c:	b580      	push	{r7, lr}
 800ce9e:	b088      	sub	sp, #32
 800cea0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800cea2:	e040      	b.n	800cf26 <prvSwitchTimerLists+0x8a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800cea4:	4b29      	ldr	r3, [pc, #164]	; (800cf4c <prvSwitchTimerLists+0xb0>)
 800cea6:	681b      	ldr	r3, [r3, #0]
 800cea8:	68db      	ldr	r3, [r3, #12]
 800ceaa:	681b      	ldr	r3, [r3, #0]
 800ceac:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ceae:	4b27      	ldr	r3, [pc, #156]	; (800cf4c <prvSwitchTimerLists+0xb0>)
 800ceb0:	681b      	ldr	r3, [r3, #0]
 800ceb2:	68db      	ldr	r3, [r3, #12]
 800ceb4:	68db      	ldr	r3, [r3, #12]
 800ceb6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ceb8:	68fb      	ldr	r3, [r7, #12]
 800ceba:	3304      	adds	r3, #4
 800cebc:	4618      	mov	r0, r3
 800cebe:	f7fe fa9d 	bl	800b3fc <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800cec2:	68fb      	ldr	r3, [r7, #12]
 800cec4:	6a1b      	ldr	r3, [r3, #32]
 800cec6:	68f8      	ldr	r0, [r7, #12]
 800cec8:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800ceca:	68fb      	ldr	r3, [r7, #12]
 800cecc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ced0:	f003 0304 	and.w	r3, r3, #4
 800ced4:	2b00      	cmp	r3, #0
 800ced6:	d026      	beq.n	800cf26 <prvSwitchTimerLists+0x8a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800ced8:	68fb      	ldr	r3, [r7, #12]
 800ceda:	699b      	ldr	r3, [r3, #24]
 800cedc:	693a      	ldr	r2, [r7, #16]
 800cede:	4413      	add	r3, r2
 800cee0:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800cee2:	68ba      	ldr	r2, [r7, #8]
 800cee4:	693b      	ldr	r3, [r7, #16]
 800cee6:	429a      	cmp	r2, r3
 800cee8:	d90e      	bls.n	800cf08 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800ceea:	68fb      	ldr	r3, [r7, #12]
 800ceec:	68ba      	ldr	r2, [r7, #8]
 800ceee:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800cef0:	68fb      	ldr	r3, [r7, #12]
 800cef2:	68fa      	ldr	r2, [r7, #12]
 800cef4:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800cef6:	4b15      	ldr	r3, [pc, #84]	; (800cf4c <prvSwitchTimerLists+0xb0>)
 800cef8:	681a      	ldr	r2, [r3, #0]
 800cefa:	68fb      	ldr	r3, [r7, #12]
 800cefc:	3304      	adds	r3, #4
 800cefe:	4619      	mov	r1, r3
 800cf00:	4610      	mov	r0, r2
 800cf02:	f7fe fa42 	bl	800b38a <vListInsert>
 800cf06:	e00e      	b.n	800cf26 <prvSwitchTimerLists+0x8a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800cf08:	2300      	movs	r3, #0
 800cf0a:	9300      	str	r3, [sp, #0]
 800cf0c:	2300      	movs	r3, #0
 800cf0e:	693a      	ldr	r2, [r7, #16]
 800cf10:	2100      	movs	r1, #0
 800cf12:	68f8      	ldr	r0, [r7, #12]
 800cf14:	f7ff fd90 	bl	800ca38 <xTimerGenericCommand>
 800cf18:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800cf1a:	687b      	ldr	r3, [r7, #4]
 800cf1c:	2b00      	cmp	r3, #0
 800cf1e:	d102      	bne.n	800cf26 <prvSwitchTimerLists+0x8a>
 800cf20:	f000 f9da 	bl	800d2d8 <ulSetInterruptMask>
 800cf24:	e7fe      	b.n	800cf24 <prvSwitchTimerLists+0x88>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800cf26:	4b09      	ldr	r3, [pc, #36]	; (800cf4c <prvSwitchTimerLists+0xb0>)
 800cf28:	681b      	ldr	r3, [r3, #0]
 800cf2a:	681b      	ldr	r3, [r3, #0]
 800cf2c:	2b00      	cmp	r3, #0
 800cf2e:	d1b9      	bne.n	800cea4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800cf30:	4b06      	ldr	r3, [pc, #24]	; (800cf4c <prvSwitchTimerLists+0xb0>)
 800cf32:	681b      	ldr	r3, [r3, #0]
 800cf34:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800cf36:	4b06      	ldr	r3, [pc, #24]	; (800cf50 <prvSwitchTimerLists+0xb4>)
 800cf38:	681b      	ldr	r3, [r3, #0]
 800cf3a:	4a04      	ldr	r2, [pc, #16]	; (800cf4c <prvSwitchTimerLists+0xb0>)
 800cf3c:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800cf3e:	4a04      	ldr	r2, [pc, #16]	; (800cf50 <prvSwitchTimerLists+0xb4>)
 800cf40:	697b      	ldr	r3, [r7, #20]
 800cf42:	6013      	str	r3, [r2, #0]
}
 800cf44:	bf00      	nop
 800cf46:	3718      	adds	r7, #24
 800cf48:	46bd      	mov	sp, r7
 800cf4a:	bd80      	pop	{r7, pc}
 800cf4c:	200015a0 	.word	0x200015a0
 800cf50:	200015a4 	.word	0x200015a4

0800cf54 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800cf54:	b580      	push	{r7, lr}
 800cf56:	b082      	sub	sp, #8
 800cf58:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800cf5a:	f000 f88b 	bl	800d074 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800cf5e:	4b15      	ldr	r3, [pc, #84]	; (800cfb4 <prvCheckForValidListAndQueue+0x60>)
 800cf60:	681b      	ldr	r3, [r3, #0]
 800cf62:	2b00      	cmp	r3, #0
 800cf64:	d120      	bne.n	800cfa8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800cf66:	4814      	ldr	r0, [pc, #80]	; (800cfb8 <prvCheckForValidListAndQueue+0x64>)
 800cf68:	f7fe f9be 	bl	800b2e8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800cf6c:	4813      	ldr	r0, [pc, #76]	; (800cfbc <prvCheckForValidListAndQueue+0x68>)
 800cf6e:	f7fe f9bb 	bl	800b2e8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800cf72:	4b13      	ldr	r3, [pc, #76]	; (800cfc0 <prvCheckForValidListAndQueue+0x6c>)
 800cf74:	4a10      	ldr	r2, [pc, #64]	; (800cfb8 <prvCheckForValidListAndQueue+0x64>)
 800cf76:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800cf78:	4b12      	ldr	r3, [pc, #72]	; (800cfc4 <prvCheckForValidListAndQueue+0x70>)
 800cf7a:	4a10      	ldr	r2, [pc, #64]	; (800cfbc <prvCheckForValidListAndQueue+0x68>)
 800cf7c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800cf7e:	2300      	movs	r3, #0
 800cf80:	9300      	str	r3, [sp, #0]
 800cf82:	4b11      	ldr	r3, [pc, #68]	; (800cfc8 <prvCheckForValidListAndQueue+0x74>)
 800cf84:	4a11      	ldr	r2, [pc, #68]	; (800cfcc <prvCheckForValidListAndQueue+0x78>)
 800cf86:	2110      	movs	r1, #16
 800cf88:	200a      	movs	r0, #10
 800cf8a:	f7fe fab9 	bl	800b500 <xQueueGenericCreateStatic>
 800cf8e:	4603      	mov	r3, r0
 800cf90:	4a08      	ldr	r2, [pc, #32]	; (800cfb4 <prvCheckForValidListAndQueue+0x60>)
 800cf92:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800cf94:	4b07      	ldr	r3, [pc, #28]	; (800cfb4 <prvCheckForValidListAndQueue+0x60>)
 800cf96:	681b      	ldr	r3, [r3, #0]
 800cf98:	2b00      	cmp	r3, #0
 800cf9a:	d005      	beq.n	800cfa8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800cf9c:	4b05      	ldr	r3, [pc, #20]	; (800cfb4 <prvCheckForValidListAndQueue+0x60>)
 800cf9e:	681b      	ldr	r3, [r3, #0]
 800cfa0:	490b      	ldr	r1, [pc, #44]	; (800cfd0 <prvCheckForValidListAndQueue+0x7c>)
 800cfa2:	4618      	mov	r0, r3
 800cfa4:	f7fe fe22 	bl	800bbec <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800cfa8:	f000 f876 	bl	800d098 <vPortExitCritical>
}
 800cfac:	bf00      	nop
 800cfae:	46bd      	mov	sp, r7
 800cfb0:	bd80      	pop	{r7, pc}
 800cfb2:	bf00      	nop
 800cfb4:	200015a8 	.word	0x200015a8
 800cfb8:	20001578 	.word	0x20001578
 800cfbc:	2000158c 	.word	0x2000158c
 800cfc0:	200015a0 	.word	0x200015a0
 800cfc4:	200015a4 	.word	0x200015a4
 800cfc8:	20001654 	.word	0x20001654
 800cfcc:	200015b4 	.word	0x200015b4
 800cfd0:	0800e3f4 	.word	0x0800e3f4

0800cfd4 <vPortSetupTimerInterrupt>:
	}
#endif /* configUSE_TICKLESS_IDLE */
/*-----------------------------------------------------------*/

__attribute__(( weak )) void vPortSetupTimerInterrupt( void ) /* PRIVILEGED_FUNCTION */
{
 800cfd4:	b480      	push	{r7}
 800cfd6:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and reset the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800cfd8:	4b0b      	ldr	r3, [pc, #44]	; (800d008 <vPortSetupTimerInterrupt+0x34>)
 800cfda:	2200      	movs	r2, #0
 800cfdc:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800cfde:	4b0b      	ldr	r3, [pc, #44]	; (800d00c <vPortSetupTimerInterrupt+0x38>)
 800cfe0:	2200      	movs	r2, #0
 800cfe2:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800cfe4:	4b0a      	ldr	r3, [pc, #40]	; (800d010 <vPortSetupTimerInterrupt+0x3c>)
 800cfe6:	681b      	ldr	r3, [r3, #0]
 800cfe8:	4a0a      	ldr	r2, [pc, #40]	; (800d014 <vPortSetupTimerInterrupt+0x40>)
 800cfea:	fba2 2303 	umull	r2, r3, r2, r3
 800cfee:	099b      	lsrs	r3, r3, #6
 800cff0:	4a09      	ldr	r2, [pc, #36]	; (800d018 <vPortSetupTimerInterrupt+0x44>)
 800cff2:	3b01      	subs	r3, #1
 800cff4:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT;
 800cff6:	4b04      	ldr	r3, [pc, #16]	; (800d008 <vPortSetupTimerInterrupt+0x34>)
 800cff8:	2207      	movs	r2, #7
 800cffa:	601a      	str	r2, [r3, #0]
}
 800cffc:	bf00      	nop
 800cffe:	46bd      	mov	sp, r7
 800d000:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d004:	4770      	bx	lr
 800d006:	bf00      	nop
 800d008:	e000e010 	.word	0xe000e010
 800d00c:	e000e018 	.word	0xe000e018
 800d010:	20000004 	.word	0x20000004
 800d014:	10624dd3 	.word	0x10624dd3
 800d018:	e000e014 	.word	0xe000e014

0800d01c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800d01c:	b580      	push	{r7, lr}
 800d01e:	b082      	sub	sp, #8
 800d020:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 800d022:	2300      	movs	r3, #0
 800d024:	607b      	str	r3, [r7, #4]
	/* A function that implements a task must not exit or attempt to return to
	 * its caller as there is nothing to return to. If a task wants to exit it
	 * should instead call vTaskDelete( NULL ). Artificially force an assert()
	 * to be triggered if configASSERT() is defined, then stop here so
	 * application writers can catch the error. */
	configASSERT( ulCriticalNesting == ~0UL );
 800d026:	4b09      	ldr	r3, [pc, #36]	; (800d04c <prvTaskExitError+0x30>)
 800d028:	681b      	ldr	r3, [r3, #0]
 800d02a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d02e:	d002      	beq.n	800d036 <prvTaskExitError+0x1a>
 800d030:	f000 f952 	bl	800d2d8 <ulSetInterruptMask>
 800d034:	e7fe      	b.n	800d034 <prvTaskExitError+0x18>
	portDISABLE_INTERRUPTS();
 800d036:	f000 f94f 	bl	800d2d8 <ulSetInterruptMask>

	while( ulDummy == 0 )
 800d03a:	bf00      	nop
 800d03c:	687b      	ldr	r3, [r7, #4]
 800d03e:	2b00      	cmp	r3, #0
 800d040:	d0fc      	beq.n	800d03c <prvTaskExitError+0x20>
		 * warnings about code appearing after this function is called - making
		 * ulDummy volatile makes the compiler think the function could return
		 * and therefore not output an 'unreachable code' warning for code that
		 * appears after it. */
	}
}
 800d042:	bf00      	nop
 800d044:	bf00      	nop
 800d046:	3708      	adds	r7, #8
 800d048:	46bd      	mov	sp, r7
 800d04a:	bd80      	pop	{r7, pc}
 800d04c:	20000010 	.word	0x20000010

0800d050 <vPortYield>:
	}
#endif /* configENABLE_FPU */
/*-----------------------------------------------------------*/

void vPortYield( void ) /* PRIVILEGED_FUNCTION */
{
 800d050:	b480      	push	{r7}
 800d052:	af00      	add	r7, sp, #0
	/* Set a PendSV to request a context switch. */
	portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800d054:	4b06      	ldr	r3, [pc, #24]	; (800d070 <vPortYield+0x20>)
 800d056:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d05a:	601a      	str	r2, [r3, #0]

	/* Barriers are normally not required but do ensure the code is
	 * completely within the specified behaviour for the architecture. */
	__asm volatile( "dsb" ::: "memory" );
 800d05c:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 800d060:	f3bf 8f6f 	isb	sy
}
 800d064:	bf00      	nop
 800d066:	46bd      	mov	sp, r7
 800d068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d06c:	4770      	bx	lr
 800d06e:	bf00      	nop
 800d070:	e000ed04 	.word	0xe000ed04

0800d074 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void ) /* PRIVILEGED_FUNCTION */
{
 800d074:	b580      	push	{r7, lr}
 800d076:	af00      	add	r7, sp, #0
	portDISABLE_INTERRUPTS();
 800d078:	f000 f92e 	bl	800d2d8 <ulSetInterruptMask>
	ulCriticalNesting++;
 800d07c:	4b05      	ldr	r3, [pc, #20]	; (800d094 <vPortEnterCritical+0x20>)
 800d07e:	681b      	ldr	r3, [r3, #0]
 800d080:	3301      	adds	r3, #1
 800d082:	4a04      	ldr	r2, [pc, #16]	; (800d094 <vPortEnterCritical+0x20>)
 800d084:	6013      	str	r3, [r2, #0]

	/* Barriers are normally not required but do ensure the code is
	 * completely within the specified behaviour for the architecture. */
	__asm volatile( "dsb" ::: "memory" );
 800d086:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 800d08a:	f3bf 8f6f 	isb	sy
}
 800d08e:	bf00      	nop
 800d090:	bd80      	pop	{r7, pc}
 800d092:	bf00      	nop
 800d094:	20000010 	.word	0x20000010

0800d098 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void ) /* PRIVILEGED_FUNCTION */
{
 800d098:	b580      	push	{r7, lr}
 800d09a:	af00      	add	r7, sp, #0
	configASSERT( ulCriticalNesting );
 800d09c:	4b0a      	ldr	r3, [pc, #40]	; (800d0c8 <vPortExitCritical+0x30>)
 800d09e:	681b      	ldr	r3, [r3, #0]
 800d0a0:	2b00      	cmp	r3, #0
 800d0a2:	d102      	bne.n	800d0aa <vPortExitCritical+0x12>
 800d0a4:	f000 f918 	bl	800d2d8 <ulSetInterruptMask>
 800d0a8:	e7fe      	b.n	800d0a8 <vPortExitCritical+0x10>
	ulCriticalNesting--;
 800d0aa:	4b07      	ldr	r3, [pc, #28]	; (800d0c8 <vPortExitCritical+0x30>)
 800d0ac:	681b      	ldr	r3, [r3, #0]
 800d0ae:	3b01      	subs	r3, #1
 800d0b0:	4a05      	ldr	r2, [pc, #20]	; (800d0c8 <vPortExitCritical+0x30>)
 800d0b2:	6013      	str	r3, [r2, #0]

	if( ulCriticalNesting == 0 )
 800d0b4:	4b04      	ldr	r3, [pc, #16]	; (800d0c8 <vPortExitCritical+0x30>)
 800d0b6:	681b      	ldr	r3, [r3, #0]
 800d0b8:	2b00      	cmp	r3, #0
 800d0ba:	d102      	bne.n	800d0c2 <vPortExitCritical+0x2a>
	{
		portENABLE_INTERRUPTS();
 800d0bc:	2000      	movs	r0, #0
 800d0be:	f000 f918 	bl	800d2f2 <vClearInterruptMask>
	}
}
 800d0c2:	bf00      	nop
 800d0c4:	bd80      	pop	{r7, pc}
 800d0c6:	bf00      	nop
 800d0c8:	20000010 	.word	0x20000010

0800d0cc <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void SysTick_Handler( void ) /* PRIVILEGED_FUNCTION */
{
 800d0cc:	b580      	push	{r7, lr}
 800d0ce:	b082      	sub	sp, #8
 800d0d0:	af00      	add	r7, sp, #0
uint32_t ulPreviousMask;

	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
 800d0d2:	f000 f901 	bl	800d2d8 <ulSetInterruptMask>
 800d0d6:	6078      	str	r0, [r7, #4]
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800d0d8:	f7ff f8c2 	bl	800c260 <xTaskIncrementTick>
 800d0dc:	4603      	mov	r3, r0
 800d0de:	2b00      	cmp	r3, #0
 800d0e0:	d003      	beq.n	800d0ea <xPortSysTickHandler+0x1e>
		{
			/* Pend a context switch. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800d0e2:	4b05      	ldr	r3, [pc, #20]	; (800d0f8 <xPortSysTickHandler+0x2c>)
 800d0e4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d0e8:	601a      	str	r2, [r3, #0]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
 800d0ea:	6878      	ldr	r0, [r7, #4]
 800d0ec:	f000 f901 	bl	800d2f2 <vClearInterruptMask>
}
 800d0f0:	bf00      	nop
 800d0f2:	3708      	adds	r7, #8
 800d0f4:	46bd      	mov	sp, r7
 800d0f6:	bd80      	pop	{r7, pc}
 800d0f8:	e000ed04 	.word	0xe000ed04

0800d0fc <vPortSVCHandler_C>:
/*-----------------------------------------------------------*/

void vPortSVCHandler_C( uint32_t *pulCallerStackAddress ) /* PRIVILEGED_FUNCTION portDONT_DISCARD */
{
 800d0fc:	b580      	push	{r7, lr}
 800d0fe:	b084      	sub	sp, #16
 800d100:	af00      	add	r7, sp, #0
 800d102:	6078      	str	r0, [r7, #4]
#endif /* configENABLE_TRUSTZONE */
uint8_t ucSVCNumber;

	/* Register are stored on the stack in the following order - R0, R1, R2, R3,
	 * R12, LR, PC, xPSR. */
	ulPC = pulCallerStackAddress[ 6 ];
 800d104:	687b      	ldr	r3, [r7, #4]
 800d106:	699b      	ldr	r3, [r3, #24]
 800d108:	60fb      	str	r3, [r7, #12]
	ucSVCNumber = ( ( uint8_t *) ulPC )[ -2 ];
 800d10a:	68fb      	ldr	r3, [r7, #12]
 800d10c:	3b02      	subs	r3, #2
 800d10e:	781b      	ldrb	r3, [r3, #0]
 800d110:	72fb      	strb	r3, [r7, #11]

	switch( ucSVCNumber )
 800d112:	7afb      	ldrb	r3, [r7, #11]
 800d114:	2b02      	cmp	r3, #2
 800d116:	d102      	bne.n	800d11e <vPortSVCHandler_C+0x22>
			}
			#endif /* configENABLE_FPU */

			/* Setup the context of the first task so that the first task starts
			 * executing. */
			vRestoreContextOfFirstTask();
 800d118:	f000 f8b2 	bl	800d280 <vRestoreContextOfFirstTask>
		}
		break;
 800d11c:	e002      	b.n	800d124 <vPortSVCHandler_C+0x28>
		#endif /* configENABLE_MPU */

		default:
		{
			/* Incorrect SVC call. */
			configASSERT( pdFALSE );
 800d11e:	f000 f8db 	bl	800d2d8 <ulSetInterruptMask>
 800d122:	e7fe      	b.n	800d122 <vPortSVCHandler_C+0x26>
		}
	}
}
 800d124:	bf00      	nop
 800d126:	3710      	adds	r7, #16
 800d128:	46bd      	mov	sp, r7
 800d12a:	bd80      	pop	{r7, pc}

0800d12c <pxPortInitialiseStack>:
#if( configENABLE_MPU == 1 )
	StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, StackType_t *pxEndOfStack, TaskFunction_t pxCode, void *pvParameters, BaseType_t xRunPrivileged ) /* PRIVILEGED_FUNCTION */
#else
	StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, StackType_t *pxEndOfStack, TaskFunction_t pxCode, void *pvParameters ) /* PRIVILEGED_FUNCTION */
#endif /* configENABLE_MPU */
{
 800d12c:	b480      	push	{r7}
 800d12e:	b085      	sub	sp, #20
 800d130:	af00      	add	r7, sp, #0
 800d132:	60f8      	str	r0, [r7, #12]
 800d134:	60b9      	str	r1, [r7, #8]
 800d136:	607a      	str	r2, [r7, #4]
 800d138:	603b      	str	r3, [r7, #0]
		}
		#endif /* configENABLE_TRUSTZONE */
	}
	#else /* portPRELOAD_REGISTERS */
	{
		pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 800d13a:	68fb      	ldr	r3, [r7, #12]
 800d13c:	3b04      	subs	r3, #4
 800d13e:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = portINITIAL_XPSR;							/* xPSR */
 800d140:	68fb      	ldr	r3, [r7, #12]
 800d142:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800d146:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 800d148:	68fb      	ldr	r3, [r7, #12]
 800d14a:	3b04      	subs	r3, #4
 800d14c:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) pxCode;						/* PC */
 800d14e:	687a      	ldr	r2, [r7, #4]
 800d150:	68fb      	ldr	r3, [r7, #12]
 800d152:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 800d154:	68fb      	ldr	r3, [r7, #12]
 800d156:	3b04      	subs	r3, #4
 800d158:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800d15a:	4a38      	ldr	r2, [pc, #224]	; (800d23c <pxPortInitialiseStack+0x110>)
 800d15c:	68fb      	ldr	r3, [r7, #12]
 800d15e:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 800d160:	68fb      	ldr	r3, [r7, #12]
 800d162:	3b04      	subs	r3, #4
 800d164:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) 0x12121212UL;				/* R12 */
 800d166:	68fb      	ldr	r3, [r7, #12]
 800d168:	f04f 3212 	mov.w	r2, #303174162	; 0x12121212
 800d16c:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 800d16e:	68fb      	ldr	r3, [r7, #12]
 800d170:	3b04      	subs	r3, #4
 800d172:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) 0x03030303UL;				/* R3 */
 800d174:	68fb      	ldr	r3, [r7, #12]
 800d176:	f04f 3203 	mov.w	r2, #50529027	; 0x3030303
 800d17a:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 800d17c:	68fb      	ldr	r3, [r7, #12]
 800d17e:	3b04      	subs	r3, #4
 800d180:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) 0x02020202UL;				/* R2 */
 800d182:	68fb      	ldr	r3, [r7, #12]
 800d184:	f04f 3202 	mov.w	r2, #33686018	; 0x2020202
 800d188:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 800d18a:	68fb      	ldr	r3, [r7, #12]
 800d18c:	3b04      	subs	r3, #4
 800d18e:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) 0x01010101UL;				/* R1 */
 800d190:	68fb      	ldr	r3, [r7, #12]
 800d192:	f04f 3201 	mov.w	r2, #16843009	; 0x1010101
 800d196:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 800d198:	68fb      	ldr	r3, [r7, #12]
 800d19a:	3b04      	subs	r3, #4
 800d19c:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) pvParameters;				/* R0 */
 800d19e:	683a      	ldr	r2, [r7, #0]
 800d1a0:	68fb      	ldr	r3, [r7, #12]
 800d1a2:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 800d1a4:	68fb      	ldr	r3, [r7, #12]
 800d1a6:	3b04      	subs	r3, #4
 800d1a8:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) 0x11111111UL;				/* R11 */
 800d1aa:	68fb      	ldr	r3, [r7, #12]
 800d1ac:	f04f 3211 	mov.w	r2, #286331153	; 0x11111111
 800d1b0:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 800d1b2:	68fb      	ldr	r3, [r7, #12]
 800d1b4:	3b04      	subs	r3, #4
 800d1b6:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) 0x10101010UL;				/* R10 */
 800d1b8:	68fb      	ldr	r3, [r7, #12]
 800d1ba:	f04f 3210 	mov.w	r2, #269488144	; 0x10101010
 800d1be:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 800d1c0:	68fb      	ldr	r3, [r7, #12]
 800d1c2:	3b04      	subs	r3, #4
 800d1c4:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) 0x09090909UL;				/* R09 */
 800d1c6:	68fb      	ldr	r3, [r7, #12]
 800d1c8:	f04f 3209 	mov.w	r2, #151587081	; 0x9090909
 800d1cc:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 800d1ce:	68fb      	ldr	r3, [r7, #12]
 800d1d0:	3b04      	subs	r3, #4
 800d1d2:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) 0x08080808UL;				/* R08 */
 800d1d4:	68fb      	ldr	r3, [r7, #12]
 800d1d6:	f04f 3208 	mov.w	r2, #134744072	; 0x8080808
 800d1da:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 800d1dc:	68fb      	ldr	r3, [r7, #12]
 800d1de:	3b04      	subs	r3, #4
 800d1e0:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) 0x07070707UL;				/* R07 */
 800d1e2:	68fb      	ldr	r3, [r7, #12]
 800d1e4:	f04f 3207 	mov.w	r2, #117901063	; 0x7070707
 800d1e8:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 800d1ea:	68fb      	ldr	r3, [r7, #12]
 800d1ec:	3b04      	subs	r3, #4
 800d1ee:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) 0x06060606UL;				/* R06 */
 800d1f0:	68fb      	ldr	r3, [r7, #12]
 800d1f2:	f04f 3206 	mov.w	r2, #101058054	; 0x6060606
 800d1f6:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 800d1f8:	68fb      	ldr	r3, [r7, #12]
 800d1fa:	3b04      	subs	r3, #4
 800d1fc:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) 0x05050505UL;				/* R05 */
 800d1fe:	68fb      	ldr	r3, [r7, #12]
 800d200:	f04f 3205 	mov.w	r2, #84215045	; 0x5050505
 800d204:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 800d206:	68fb      	ldr	r3, [r7, #12]
 800d208:	3b04      	subs	r3, #4
 800d20a:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) 0x04040404UL;				/* R04 */
 800d20c:	68fb      	ldr	r3, [r7, #12]
 800d20e:	f04f 3204 	mov.w	r2, #67372036	; 0x4040404
 800d212:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 800d214:	68fb      	ldr	r3, [r7, #12]
 800d216:	3b04      	subs	r3, #4
 800d218:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = portINITIAL_EXC_RETURN;						/* EXC_RETURN */
 800d21a:	68fb      	ldr	r3, [r7, #12]
 800d21c:	f06f 0243 	mvn.w	r2, #67	; 0x43
 800d220:	601a      	str	r2, [r3, #0]
				*pxTopOfStack = portINITIAL_CONTROL_UNPRIVILEGED;	/* Slot used to hold this task's CONTROL value. */
			}
		}
		#endif /* configENABLE_MPU */

		pxTopOfStack--;
 800d222:	68fb      	ldr	r3, [r7, #12]
 800d224:	3b04      	subs	r3, #4
 800d226:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) pxEndOfStack;	/* Slot used to hold this task's PSPLIM value. */
 800d228:	68ba      	ldr	r2, [r7, #8]
 800d22a:	68fb      	ldr	r3, [r7, #12]
 800d22c:	601a      	str	r2, [r3, #0]
		}
		#endif /* configENABLE_TRUSTZONE */
	}
	#endif /* portPRELOAD_REGISTERS */

	return pxTopOfStack;
 800d22e:	68fb      	ldr	r3, [r7, #12]
}
 800d230:	4618      	mov	r0, r3
 800d232:	3714      	adds	r7, #20
 800d234:	46bd      	mov	sp, r7
 800d236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d23a:	4770      	bx	lr
 800d23c:	0800d01d 	.word	0x0800d01d

0800d240 <xPortStartScheduler>:
/*-----------------------------------------------------------*/

BaseType_t xPortStartScheduler( void ) /* PRIVILEGED_FUNCTION */
{
 800d240:	b580      	push	{r7, lr}
 800d242:	af00      	add	r7, sp, #0
	/* Make PendSV, CallSV and SysTick the same priority as the kernel. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800d244:	4b0c      	ldr	r3, [pc, #48]	; (800d278 <xPortStartScheduler+0x38>)
 800d246:	681b      	ldr	r3, [r3, #0]
 800d248:	4a0b      	ldr	r2, [pc, #44]	; (800d278 <xPortStartScheduler+0x38>)
 800d24a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800d24e:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800d250:	4b09      	ldr	r3, [pc, #36]	; (800d278 <xPortStartScheduler+0x38>)
 800d252:	681b      	ldr	r3, [r3, #0]
 800d254:	4a08      	ldr	r2, [pc, #32]	; (800d278 <xPortStartScheduler+0x38>)
 800d256:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800d25a:	6013      	str	r3, [r2, #0]
	}
	#endif /* configENABLE_MPU */

	/* Start the timer that generates the tick ISR. Interrupts are disabled
	 * here already. */
	vPortSetupTimerInterrupt();
 800d25c:	f7ff feba 	bl	800cfd4 <vPortSetupTimerInterrupt>

	/* Initialize the critical nesting count ready for the first task. */
	ulCriticalNesting = 0;
 800d260:	4b06      	ldr	r3, [pc, #24]	; (800d27c <xPortStartScheduler+0x3c>)
 800d262:	2200      	movs	r2, #0
 800d264:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	vStartFirstTask();
 800d266:	f000 f823 	bl	800d2b0 <vStartFirstTask>
	 * exit error function to prevent compiler warnings about a static function
	 * not being called in the case that the application writer overrides this
	 * functionality by defining configTASK_RETURN_ADDRESS. Call
	 * vTaskSwitchContext() so link time optimization does not remove the
	 * symbol. */
	vTaskSwitchContext();
 800d26a:	f7ff f8ab 	bl	800c3c4 <vTaskSwitchContext>
	prvTaskExitError();
 800d26e:	f7ff fed5 	bl	800d01c <prvTaskExitError>

	/* Should not get here. */
	return 0;
 800d272:	2300      	movs	r3, #0
}
 800d274:	4618      	mov	r0, r3
 800d276:	bd80      	pop	{r7, pc}
 800d278:	e000ed20 	.word	0xe000ed20
 800d27c:	20000010 	.word	0x20000010

0800d280 <vRestoreContextOfFirstTask>:
 * header files. */
#undef MPU_WRAPPERS_INCLUDED_FROM_API_FILE

void vRestoreContextOfFirstTask( void ) /* __attribute__ (( naked )) PRIVILEGED_FUNCTION */
{
	__asm volatile
 800d280:	4a07      	ldr	r2, [pc, #28]	; (800d2a0 <pxCurrentTCBConst2>)
 800d282:	6811      	ldr	r1, [r2, #0]
 800d284:	6808      	ldr	r0, [r1, #0]
 800d286:	c806      	ldmia	r0!, {r1, r2}
 800d288:	f381 880b 	msr	PSPLIM, r1
 800d28c:	2102      	movs	r1, #2
 800d28e:	f381 8814 	msr	CONTROL, r1
 800d292:	3020      	adds	r0, #32
 800d294:	f380 8809 	msr	PSP, r0
 800d298:	f3bf 8f6f 	isb	sy
 800d29c:	4710      	bx	r2
 800d29e:	bf00      	nop

0800d2a0 <pxCurrentTCBConst2>:
 800d2a0:	20001078 	.word	0x20001078
	"xMAIR0Const2: .word 0xe000edc0						\n"
	"xRNRConst2: .word 0xe000ed98						\n"
	"xRBARConst2: .word 0xe000ed9c						\n"
	#endif /* configENABLE_MPU */
	);
}
 800d2a4:	bf00      	nop
 800d2a6:	bf00      	nop
	...

0800d2b0 <vStartFirstTask>:
}
/*-----------------------------------------------------------*/

void vStartFirstTask( void ) /* __attribute__ (( naked )) PRIVILEGED_FUNCTION */
{
	__asm volatile
 800d2b0:	4807      	ldr	r0, [pc, #28]	; (800d2d0 <xVTORConst>)
 800d2b2:	6800      	ldr	r0, [r0, #0]
 800d2b4:	6800      	ldr	r0, [r0, #0]
 800d2b6:	f380 8808 	msr	MSP, r0
 800d2ba:	b662      	cpsie	i
 800d2bc:	b661      	cpsie	f
 800d2be:	f3bf 8f4f 	dsb	sy
 800d2c2:	f3bf 8f6f 	isb	sy
 800d2c6:	df02      	svc	2
 800d2c8:	bf00      	nop
 800d2ca:	bf00      	nop
 800d2cc:	f3af 8000 	nop.w

0800d2d0 <xVTORConst>:
 800d2d0:	e000ed08 	.word	0xe000ed08
	"													\n"
	"   .align 4										\n"
	"xVTORConst: .word 0xe000ed08						\n"
	:: "i" ( portSVC_START_SCHEDULER ) : "memory"
	);
}
 800d2d4:	bf00      	nop
 800d2d6:	bf00      	nop

0800d2d8 <ulSetInterruptMask>:
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMask( void ) /* __attribute__(( naked )) PRIVILEGED_FUNCTION */
{
	__asm volatile
 800d2d8:	f3ef 8011 	mrs	r0, BASEPRI
 800d2dc:	f04f 01a0 	mov.w	r1, #160	; 0xa0
 800d2e0:	f381 8811 	msr	BASEPRI, r1
 800d2e4:	f3bf 8f4f 	dsb	sy
 800d2e8:	f3bf 8f6f 	isb	sy
 800d2ec:	4770      	bx	lr
	"	dsb												\n"
	"	isb												\n"
	"	bx lr											\n" /* Return. */
	:: "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800d2ee:	bf00      	nop
 800d2f0:	4618      	mov	r0, r3

0800d2f2 <vClearInterruptMask>:
/*-----------------------------------------------------------*/

void vClearInterruptMask( __attribute__( ( unused ) ) uint32_t ulMask ) /* __attribute__(( naked )) PRIVILEGED_FUNCTION */
{
	__asm volatile
 800d2f2:	f380 8811 	msr	BASEPRI, r0
 800d2f6:	f3bf 8f4f 	dsb	sy
 800d2fa:	f3bf 8f6f 	isb	sy
 800d2fe:	4770      	bx	lr
	"	dsb												\n"
	"	isb												\n"
	"	bx lr											\n" /* Return. */
	::: "memory"
	);
}
 800d300:	bf00      	nop
	...

0800d310 <PendSV_Handler>:
/*-----------------------------------------------------------*/

void PendSV_Handler( void ) /* __attribute__ (( naked )) PRIVILEGED_FUNCTION */
{
	__asm volatile
 800d310:	f3ef 8009 	mrs	r0, PSP
 800d314:	f3ef 820b 	mrs	r2, PSPLIM
 800d318:	4673      	mov	r3, lr
 800d31a:	e920 0ffc 	stmdb	r0!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, fp}
 800d31e:	4a10      	ldr	r2, [pc, #64]	; (800d360 <pxCurrentTCBConst>)
 800d320:	6811      	ldr	r1, [r2, #0]
 800d322:	6008      	str	r0, [r1, #0]
 800d324:	f04f 00a0 	mov.w	r0, #160	; 0xa0
 800d328:	f380 8811 	msr	BASEPRI, r0
 800d32c:	f3bf 8f4f 	dsb	sy
 800d330:	f3bf 8f6f 	isb	sy
 800d334:	f7ff f846 	bl	800c3c4 <vTaskSwitchContext>
 800d338:	f04f 0000 	mov.w	r0, #0
 800d33c:	f380 8811 	msr	BASEPRI, r0
 800d340:	4a07      	ldr	r2, [pc, #28]	; (800d360 <pxCurrentTCBConst>)
 800d342:	6811      	ldr	r1, [r2, #0]
 800d344:	6808      	ldr	r0, [r1, #0]
 800d346:	e8b0 0ffc 	ldmia.w	r0!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, fp}
 800d34a:	f382 880b 	msr	PSPLIM, r2
 800d34e:	f380 8809 	msr	PSP, r0
 800d352:	4718      	bx	r3
 800d354:	f3af 8000 	nop.w
 800d358:	f3af 8000 	nop.w
 800d35c:	f3af 8000 	nop.w

0800d360 <pxCurrentTCBConst>:
 800d360:	20001078 	.word	0x20001078
	"xRNRConst: .word 0xe000ed98						\n"
	"xRBARConst: .word 0xe000ed9c						\n"
	#endif /* configENABLE_MPU */
	:: "i"( configMAX_SYSCALL_INTERRUPT_PRIORITY )
	);
}
 800d364:	bf00      	nop
 800d366:	bf00      	nop
	...

0800d370 <SVC_Handler>:
/*-----------------------------------------------------------*/

void SVC_Handler( void ) /* __attribute__ (( naked )) PRIVILEGED_FUNCTION */
{
	__asm volatile
 800d370:	f01e 0f04 	tst.w	lr, #4
 800d374:	bf0c      	ite	eq
 800d376:	f3ef 8008 	mrseq	r0, MSP
 800d37a:	f3ef 8009 	mrsne	r0, PSP
 800d37e:	4904      	ldr	r1, [pc, #16]	; (800d390 <svchandler_address_const>)
 800d380:	4708      	bx	r1
 800d382:	bf00      	nop
 800d384:	f3af 8000 	nop.w
 800d388:	f3af 8000 	nop.w
 800d38c:	f3af 8000 	nop.w

0800d390 <svchandler_address_const>:
 800d390:	0800d0fd 	.word	0x0800d0fd
	"	bx r1											\n"
	"													\n"
	"	.align 4										\n"
	"svchandler_address_const: .word vPortSVCHandler_C	\n"
	);
}
 800d394:	bf00      	nop
 800d396:	bf00      	nop

0800d398 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800d398:	b580      	push	{r7, lr}
 800d39a:	b086      	sub	sp, #24
 800d39c:	af00      	add	r7, sp, #0
 800d39e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800d3a0:	2300      	movs	r3, #0
 800d3a2:	60fb      	str	r3, [r7, #12]

	vTaskSuspendAll();
 800d3a4:	f7fe feb0 	bl	800c108 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800d3a8:	4b4f      	ldr	r3, [pc, #316]	; (800d4e8 <pvPortMalloc+0x150>)
 800d3aa:	681b      	ldr	r3, [r3, #0]
 800d3ac:	2b00      	cmp	r3, #0
 800d3ae:	d101      	bne.n	800d3b4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800d3b0:	f000 f8f8 	bl	800d5a4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800d3b4:	4b4d      	ldr	r3, [pc, #308]	; (800d4ec <pvPortMalloc+0x154>)
 800d3b6:	681a      	ldr	r2, [r3, #0]
 800d3b8:	687b      	ldr	r3, [r7, #4]
 800d3ba:	4013      	ands	r3, r2
 800d3bc:	2b00      	cmp	r3, #0
 800d3be:	f040 8083 	bne.w	800d4c8 <pvPortMalloc+0x130>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800d3c2:	687b      	ldr	r3, [r7, #4]
 800d3c4:	2b00      	cmp	r3, #0
 800d3c6:	d015      	beq.n	800d3f4 <pvPortMalloc+0x5c>
			{
				xWantedSize += xHeapStructSize;
 800d3c8:	2208      	movs	r2, #8
 800d3ca:	687b      	ldr	r3, [r7, #4]
 800d3cc:	4413      	add	r3, r2
 800d3ce:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800d3d0:	687b      	ldr	r3, [r7, #4]
 800d3d2:	f003 0307 	and.w	r3, r3, #7
 800d3d6:	2b00      	cmp	r3, #0
 800d3d8:	d00c      	beq.n	800d3f4 <pvPortMalloc+0x5c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800d3da:	687b      	ldr	r3, [r7, #4]
 800d3dc:	f023 0307 	bic.w	r3, r3, #7
 800d3e0:	3308      	adds	r3, #8
 800d3e2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800d3e4:	687b      	ldr	r3, [r7, #4]
 800d3e6:	f003 0307 	and.w	r3, r3, #7
 800d3ea:	2b00      	cmp	r3, #0
 800d3ec:	d002      	beq.n	800d3f4 <pvPortMalloc+0x5c>
 800d3ee:	f7ff ff73 	bl	800d2d8 <ulSetInterruptMask>
 800d3f2:	e7fe      	b.n	800d3f2 <pvPortMalloc+0x5a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800d3f4:	687b      	ldr	r3, [r7, #4]
 800d3f6:	2b00      	cmp	r3, #0
 800d3f8:	d066      	beq.n	800d4c8 <pvPortMalloc+0x130>
 800d3fa:	4b3d      	ldr	r3, [pc, #244]	; (800d4f0 <pvPortMalloc+0x158>)
 800d3fc:	681b      	ldr	r3, [r3, #0]
 800d3fe:	687a      	ldr	r2, [r7, #4]
 800d400:	429a      	cmp	r2, r3
 800d402:	d861      	bhi.n	800d4c8 <pvPortMalloc+0x130>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800d404:	4b3b      	ldr	r3, [pc, #236]	; (800d4f4 <pvPortMalloc+0x15c>)
 800d406:	613b      	str	r3, [r7, #16]
				pxBlock = xStart.pxNextFreeBlock;
 800d408:	4b3a      	ldr	r3, [pc, #232]	; (800d4f4 <pvPortMalloc+0x15c>)
 800d40a:	681b      	ldr	r3, [r3, #0]
 800d40c:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800d40e:	e004      	b.n	800d41a <pvPortMalloc+0x82>
				{
					pxPreviousBlock = pxBlock;
 800d410:	697b      	ldr	r3, [r7, #20]
 800d412:	613b      	str	r3, [r7, #16]
					pxBlock = pxBlock->pxNextFreeBlock;
 800d414:	697b      	ldr	r3, [r7, #20]
 800d416:	681b      	ldr	r3, [r3, #0]
 800d418:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800d41a:	697b      	ldr	r3, [r7, #20]
 800d41c:	685b      	ldr	r3, [r3, #4]
 800d41e:	687a      	ldr	r2, [r7, #4]
 800d420:	429a      	cmp	r2, r3
 800d422:	d903      	bls.n	800d42c <pvPortMalloc+0x94>
 800d424:	697b      	ldr	r3, [r7, #20]
 800d426:	681b      	ldr	r3, [r3, #0]
 800d428:	2b00      	cmp	r3, #0
 800d42a:	d1f1      	bne.n	800d410 <pvPortMalloc+0x78>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800d42c:	4b2e      	ldr	r3, [pc, #184]	; (800d4e8 <pvPortMalloc+0x150>)
 800d42e:	681b      	ldr	r3, [r3, #0]
 800d430:	697a      	ldr	r2, [r7, #20]
 800d432:	429a      	cmp	r2, r3
 800d434:	d048      	beq.n	800d4c8 <pvPortMalloc+0x130>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800d436:	693b      	ldr	r3, [r7, #16]
 800d438:	681b      	ldr	r3, [r3, #0]
 800d43a:	2208      	movs	r2, #8
 800d43c:	4413      	add	r3, r2
 800d43e:	60fb      	str	r3, [r7, #12]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800d440:	697b      	ldr	r3, [r7, #20]
 800d442:	681a      	ldr	r2, [r3, #0]
 800d444:	693b      	ldr	r3, [r7, #16]
 800d446:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800d448:	697b      	ldr	r3, [r7, #20]
 800d44a:	685a      	ldr	r2, [r3, #4]
 800d44c:	687b      	ldr	r3, [r7, #4]
 800d44e:	1ad2      	subs	r2, r2, r3
 800d450:	2308      	movs	r3, #8
 800d452:	005b      	lsls	r3, r3, #1
 800d454:	429a      	cmp	r2, r3
 800d456:	d917      	bls.n	800d488 <pvPortMalloc+0xf0>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800d458:	697a      	ldr	r2, [r7, #20]
 800d45a:	687b      	ldr	r3, [r7, #4]
 800d45c:	4413      	add	r3, r2
 800d45e:	60bb      	str	r3, [r7, #8]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800d460:	68bb      	ldr	r3, [r7, #8]
 800d462:	f003 0307 	and.w	r3, r3, #7
 800d466:	2b00      	cmp	r3, #0
 800d468:	d002      	beq.n	800d470 <pvPortMalloc+0xd8>
 800d46a:	f7ff ff35 	bl	800d2d8 <ulSetInterruptMask>
 800d46e:	e7fe      	b.n	800d46e <pvPortMalloc+0xd6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800d470:	697b      	ldr	r3, [r7, #20]
 800d472:	685a      	ldr	r2, [r3, #4]
 800d474:	687b      	ldr	r3, [r7, #4]
 800d476:	1ad2      	subs	r2, r2, r3
 800d478:	68bb      	ldr	r3, [r7, #8]
 800d47a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800d47c:	697b      	ldr	r3, [r7, #20]
 800d47e:	687a      	ldr	r2, [r7, #4]
 800d480:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800d482:	68b8      	ldr	r0, [r7, #8]
 800d484:	f000 f8f0 	bl	800d668 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800d488:	4b19      	ldr	r3, [pc, #100]	; (800d4f0 <pvPortMalloc+0x158>)
 800d48a:	681a      	ldr	r2, [r3, #0]
 800d48c:	697b      	ldr	r3, [r7, #20]
 800d48e:	685b      	ldr	r3, [r3, #4]
 800d490:	1ad3      	subs	r3, r2, r3
 800d492:	4a17      	ldr	r2, [pc, #92]	; (800d4f0 <pvPortMalloc+0x158>)
 800d494:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800d496:	4b16      	ldr	r3, [pc, #88]	; (800d4f0 <pvPortMalloc+0x158>)
 800d498:	681a      	ldr	r2, [r3, #0]
 800d49a:	4b17      	ldr	r3, [pc, #92]	; (800d4f8 <pvPortMalloc+0x160>)
 800d49c:	681b      	ldr	r3, [r3, #0]
 800d49e:	429a      	cmp	r2, r3
 800d4a0:	d203      	bcs.n	800d4aa <pvPortMalloc+0x112>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800d4a2:	4b13      	ldr	r3, [pc, #76]	; (800d4f0 <pvPortMalloc+0x158>)
 800d4a4:	681b      	ldr	r3, [r3, #0]
 800d4a6:	4a14      	ldr	r2, [pc, #80]	; (800d4f8 <pvPortMalloc+0x160>)
 800d4a8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800d4aa:	697b      	ldr	r3, [r7, #20]
 800d4ac:	685a      	ldr	r2, [r3, #4]
 800d4ae:	4b0f      	ldr	r3, [pc, #60]	; (800d4ec <pvPortMalloc+0x154>)
 800d4b0:	681b      	ldr	r3, [r3, #0]
 800d4b2:	431a      	orrs	r2, r3
 800d4b4:	697b      	ldr	r3, [r7, #20]
 800d4b6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800d4b8:	697b      	ldr	r3, [r7, #20]
 800d4ba:	2200      	movs	r2, #0
 800d4bc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800d4be:	4b0f      	ldr	r3, [pc, #60]	; (800d4fc <pvPortMalloc+0x164>)
 800d4c0:	681b      	ldr	r3, [r3, #0]
 800d4c2:	3301      	adds	r3, #1
 800d4c4:	4a0d      	ldr	r2, [pc, #52]	; (800d4fc <pvPortMalloc+0x164>)
 800d4c6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800d4c8:	f7fe fe2c 	bl	800c124 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800d4cc:	68fb      	ldr	r3, [r7, #12]
 800d4ce:	f003 0307 	and.w	r3, r3, #7
 800d4d2:	2b00      	cmp	r3, #0
 800d4d4:	d002      	beq.n	800d4dc <pvPortMalloc+0x144>
 800d4d6:	f7ff feff 	bl	800d2d8 <ulSetInterruptMask>
 800d4da:	e7fe      	b.n	800d4da <pvPortMalloc+0x142>
	return pvReturn;
 800d4dc:	68fb      	ldr	r3, [r7, #12]
}
 800d4de:	4618      	mov	r0, r3
 800d4e0:	3718      	adds	r7, #24
 800d4e2:	46bd      	mov	sp, r7
 800d4e4:	bd80      	pop	{r7, pc}
 800d4e6:	bf00      	nop
 800d4e8:	200036ac 	.word	0x200036ac
 800d4ec:	200036c0 	.word	0x200036c0
 800d4f0:	200036b0 	.word	0x200036b0
 800d4f4:	200036a4 	.word	0x200036a4
 800d4f8:	200036b4 	.word	0x200036b4
 800d4fc:	200036b8 	.word	0x200036b8

0800d500 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800d500:	b580      	push	{r7, lr}
 800d502:	b084      	sub	sp, #16
 800d504:	af00      	add	r7, sp, #0
 800d506:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800d508:	687b      	ldr	r3, [r7, #4]
 800d50a:	60fb      	str	r3, [r7, #12]
BlockLink_t *pxLink;

	if( pv != NULL )
 800d50c:	687b      	ldr	r3, [r7, #4]
 800d50e:	2b00      	cmp	r3, #0
 800d510:	d03d      	beq.n	800d58e <vPortFree+0x8e>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800d512:	2308      	movs	r3, #8
 800d514:	425b      	negs	r3, r3
 800d516:	68fa      	ldr	r2, [r7, #12]
 800d518:	4413      	add	r3, r2
 800d51a:	60fb      	str	r3, [r7, #12]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800d51c:	68fb      	ldr	r3, [r7, #12]
 800d51e:	60bb      	str	r3, [r7, #8]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800d520:	68bb      	ldr	r3, [r7, #8]
 800d522:	685a      	ldr	r2, [r3, #4]
 800d524:	4b1c      	ldr	r3, [pc, #112]	; (800d598 <vPortFree+0x98>)
 800d526:	681b      	ldr	r3, [r3, #0]
 800d528:	4013      	ands	r3, r2
 800d52a:	2b00      	cmp	r3, #0
 800d52c:	d102      	bne.n	800d534 <vPortFree+0x34>
 800d52e:	f7ff fed3 	bl	800d2d8 <ulSetInterruptMask>
 800d532:	e7fe      	b.n	800d532 <vPortFree+0x32>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800d534:	68bb      	ldr	r3, [r7, #8]
 800d536:	681b      	ldr	r3, [r3, #0]
 800d538:	2b00      	cmp	r3, #0
 800d53a:	d002      	beq.n	800d542 <vPortFree+0x42>
 800d53c:	f7ff fecc 	bl	800d2d8 <ulSetInterruptMask>
 800d540:	e7fe      	b.n	800d540 <vPortFree+0x40>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800d542:	68bb      	ldr	r3, [r7, #8]
 800d544:	685a      	ldr	r2, [r3, #4]
 800d546:	4b14      	ldr	r3, [pc, #80]	; (800d598 <vPortFree+0x98>)
 800d548:	681b      	ldr	r3, [r3, #0]
 800d54a:	4013      	ands	r3, r2
 800d54c:	2b00      	cmp	r3, #0
 800d54e:	d01e      	beq.n	800d58e <vPortFree+0x8e>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800d550:	68bb      	ldr	r3, [r7, #8]
 800d552:	681b      	ldr	r3, [r3, #0]
 800d554:	2b00      	cmp	r3, #0
 800d556:	d11a      	bne.n	800d58e <vPortFree+0x8e>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800d558:	68bb      	ldr	r3, [r7, #8]
 800d55a:	685a      	ldr	r2, [r3, #4]
 800d55c:	4b0e      	ldr	r3, [pc, #56]	; (800d598 <vPortFree+0x98>)
 800d55e:	681b      	ldr	r3, [r3, #0]
 800d560:	43db      	mvns	r3, r3
 800d562:	401a      	ands	r2, r3
 800d564:	68bb      	ldr	r3, [r7, #8]
 800d566:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800d568:	f7fe fdce 	bl	800c108 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800d56c:	68bb      	ldr	r3, [r7, #8]
 800d56e:	685a      	ldr	r2, [r3, #4]
 800d570:	4b0a      	ldr	r3, [pc, #40]	; (800d59c <vPortFree+0x9c>)
 800d572:	681b      	ldr	r3, [r3, #0]
 800d574:	4413      	add	r3, r2
 800d576:	4a09      	ldr	r2, [pc, #36]	; (800d59c <vPortFree+0x9c>)
 800d578:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800d57a:	68b8      	ldr	r0, [r7, #8]
 800d57c:	f000 f874 	bl	800d668 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800d580:	4b07      	ldr	r3, [pc, #28]	; (800d5a0 <vPortFree+0xa0>)
 800d582:	681b      	ldr	r3, [r3, #0]
 800d584:	3301      	adds	r3, #1
 800d586:	4a06      	ldr	r2, [pc, #24]	; (800d5a0 <vPortFree+0xa0>)
 800d588:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800d58a:	f7fe fdcb 	bl	800c124 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800d58e:	bf00      	nop
 800d590:	3710      	adds	r7, #16
 800d592:	46bd      	mov	sp, r7
 800d594:	bd80      	pop	{r7, pc}
 800d596:	bf00      	nop
 800d598:	200036c0 	.word	0x200036c0
 800d59c:	200036b0 	.word	0x200036b0
 800d5a0:	200036bc 	.word	0x200036bc

0800d5a4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800d5a4:	b480      	push	{r7}
 800d5a6:	b085      	sub	sp, #20
 800d5a8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800d5aa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800d5ae:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800d5b0:	4b27      	ldr	r3, [pc, #156]	; (800d650 <prvHeapInit+0xac>)
 800d5b2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800d5b4:	68fb      	ldr	r3, [r7, #12]
 800d5b6:	f003 0307 	and.w	r3, r3, #7
 800d5ba:	2b00      	cmp	r3, #0
 800d5bc:	d00c      	beq.n	800d5d8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800d5be:	68fb      	ldr	r3, [r7, #12]
 800d5c0:	3307      	adds	r3, #7
 800d5c2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d5c4:	68fb      	ldr	r3, [r7, #12]
 800d5c6:	f023 0307 	bic.w	r3, r3, #7
 800d5ca:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800d5cc:	68ba      	ldr	r2, [r7, #8]
 800d5ce:	68fb      	ldr	r3, [r7, #12]
 800d5d0:	1ad3      	subs	r3, r2, r3
 800d5d2:	4a1f      	ldr	r2, [pc, #124]	; (800d650 <prvHeapInit+0xac>)
 800d5d4:	4413      	add	r3, r2
 800d5d6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800d5d8:	68fb      	ldr	r3, [r7, #12]
 800d5da:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800d5dc:	4a1d      	ldr	r2, [pc, #116]	; (800d654 <prvHeapInit+0xb0>)
 800d5de:	687b      	ldr	r3, [r7, #4]
 800d5e0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800d5e2:	4b1c      	ldr	r3, [pc, #112]	; (800d654 <prvHeapInit+0xb0>)
 800d5e4:	2200      	movs	r2, #0
 800d5e6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800d5e8:	687b      	ldr	r3, [r7, #4]
 800d5ea:	68ba      	ldr	r2, [r7, #8]
 800d5ec:	4413      	add	r3, r2
 800d5ee:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800d5f0:	2208      	movs	r2, #8
 800d5f2:	68fb      	ldr	r3, [r7, #12]
 800d5f4:	1a9b      	subs	r3, r3, r2
 800d5f6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d5f8:	68fb      	ldr	r3, [r7, #12]
 800d5fa:	f023 0307 	bic.w	r3, r3, #7
 800d5fe:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800d600:	68fb      	ldr	r3, [r7, #12]
 800d602:	4a15      	ldr	r2, [pc, #84]	; (800d658 <prvHeapInit+0xb4>)
 800d604:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800d606:	4b14      	ldr	r3, [pc, #80]	; (800d658 <prvHeapInit+0xb4>)
 800d608:	681b      	ldr	r3, [r3, #0]
 800d60a:	2200      	movs	r2, #0
 800d60c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800d60e:	4b12      	ldr	r3, [pc, #72]	; (800d658 <prvHeapInit+0xb4>)
 800d610:	681b      	ldr	r3, [r3, #0]
 800d612:	2200      	movs	r2, #0
 800d614:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800d616:	687b      	ldr	r3, [r7, #4]
 800d618:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800d61a:	683b      	ldr	r3, [r7, #0]
 800d61c:	68fa      	ldr	r2, [r7, #12]
 800d61e:	1ad2      	subs	r2, r2, r3
 800d620:	683b      	ldr	r3, [r7, #0]
 800d622:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800d624:	4b0c      	ldr	r3, [pc, #48]	; (800d658 <prvHeapInit+0xb4>)
 800d626:	681a      	ldr	r2, [r3, #0]
 800d628:	683b      	ldr	r3, [r7, #0]
 800d62a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d62c:	683b      	ldr	r3, [r7, #0]
 800d62e:	685b      	ldr	r3, [r3, #4]
 800d630:	4a0a      	ldr	r2, [pc, #40]	; (800d65c <prvHeapInit+0xb8>)
 800d632:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d634:	683b      	ldr	r3, [r7, #0]
 800d636:	685b      	ldr	r3, [r3, #4]
 800d638:	4a09      	ldr	r2, [pc, #36]	; (800d660 <prvHeapInit+0xbc>)
 800d63a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800d63c:	4b09      	ldr	r3, [pc, #36]	; (800d664 <prvHeapInit+0xc0>)
 800d63e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800d642:	601a      	str	r2, [r3, #0]
}
 800d644:	bf00      	nop
 800d646:	3714      	adds	r7, #20
 800d648:	46bd      	mov	sp, r7
 800d64a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d64e:	4770      	bx	lr
 800d650:	200016a4 	.word	0x200016a4
 800d654:	200036a4 	.word	0x200036a4
 800d658:	200036ac 	.word	0x200036ac
 800d65c:	200036b4 	.word	0x200036b4
 800d660:	200036b0 	.word	0x200036b0
 800d664:	200036c0 	.word	0x200036c0

0800d668 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800d668:	b480      	push	{r7}
 800d66a:	b085      	sub	sp, #20
 800d66c:	af00      	add	r7, sp, #0
 800d66e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800d670:	4b28      	ldr	r3, [pc, #160]	; (800d714 <prvInsertBlockIntoFreeList+0xac>)
 800d672:	60fb      	str	r3, [r7, #12]
 800d674:	e002      	b.n	800d67c <prvInsertBlockIntoFreeList+0x14>
 800d676:	68fb      	ldr	r3, [r7, #12]
 800d678:	681b      	ldr	r3, [r3, #0]
 800d67a:	60fb      	str	r3, [r7, #12]
 800d67c:	68fb      	ldr	r3, [r7, #12]
 800d67e:	681b      	ldr	r3, [r3, #0]
 800d680:	687a      	ldr	r2, [r7, #4]
 800d682:	429a      	cmp	r2, r3
 800d684:	d8f7      	bhi.n	800d676 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800d686:	68fb      	ldr	r3, [r7, #12]
 800d688:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800d68a:	68fb      	ldr	r3, [r7, #12]
 800d68c:	685b      	ldr	r3, [r3, #4]
 800d68e:	68ba      	ldr	r2, [r7, #8]
 800d690:	4413      	add	r3, r2
 800d692:	687a      	ldr	r2, [r7, #4]
 800d694:	429a      	cmp	r2, r3
 800d696:	d108      	bne.n	800d6aa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800d698:	68fb      	ldr	r3, [r7, #12]
 800d69a:	685a      	ldr	r2, [r3, #4]
 800d69c:	687b      	ldr	r3, [r7, #4]
 800d69e:	685b      	ldr	r3, [r3, #4]
 800d6a0:	441a      	add	r2, r3
 800d6a2:	68fb      	ldr	r3, [r7, #12]
 800d6a4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800d6a6:	68fb      	ldr	r3, [r7, #12]
 800d6a8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800d6aa:	687b      	ldr	r3, [r7, #4]
 800d6ac:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800d6ae:	687b      	ldr	r3, [r7, #4]
 800d6b0:	685b      	ldr	r3, [r3, #4]
 800d6b2:	68ba      	ldr	r2, [r7, #8]
 800d6b4:	441a      	add	r2, r3
 800d6b6:	68fb      	ldr	r3, [r7, #12]
 800d6b8:	681b      	ldr	r3, [r3, #0]
 800d6ba:	429a      	cmp	r2, r3
 800d6bc:	d118      	bne.n	800d6f0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800d6be:	68fb      	ldr	r3, [r7, #12]
 800d6c0:	681a      	ldr	r2, [r3, #0]
 800d6c2:	4b15      	ldr	r3, [pc, #84]	; (800d718 <prvInsertBlockIntoFreeList+0xb0>)
 800d6c4:	681b      	ldr	r3, [r3, #0]
 800d6c6:	429a      	cmp	r2, r3
 800d6c8:	d00d      	beq.n	800d6e6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800d6ca:	687b      	ldr	r3, [r7, #4]
 800d6cc:	685a      	ldr	r2, [r3, #4]
 800d6ce:	68fb      	ldr	r3, [r7, #12]
 800d6d0:	681b      	ldr	r3, [r3, #0]
 800d6d2:	685b      	ldr	r3, [r3, #4]
 800d6d4:	441a      	add	r2, r3
 800d6d6:	687b      	ldr	r3, [r7, #4]
 800d6d8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800d6da:	68fb      	ldr	r3, [r7, #12]
 800d6dc:	681b      	ldr	r3, [r3, #0]
 800d6de:	681a      	ldr	r2, [r3, #0]
 800d6e0:	687b      	ldr	r3, [r7, #4]
 800d6e2:	601a      	str	r2, [r3, #0]
 800d6e4:	e008      	b.n	800d6f8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800d6e6:	4b0c      	ldr	r3, [pc, #48]	; (800d718 <prvInsertBlockIntoFreeList+0xb0>)
 800d6e8:	681a      	ldr	r2, [r3, #0]
 800d6ea:	687b      	ldr	r3, [r7, #4]
 800d6ec:	601a      	str	r2, [r3, #0]
 800d6ee:	e003      	b.n	800d6f8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800d6f0:	68fb      	ldr	r3, [r7, #12]
 800d6f2:	681a      	ldr	r2, [r3, #0]
 800d6f4:	687b      	ldr	r3, [r7, #4]
 800d6f6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800d6f8:	68fa      	ldr	r2, [r7, #12]
 800d6fa:	687b      	ldr	r3, [r7, #4]
 800d6fc:	429a      	cmp	r2, r3
 800d6fe:	d002      	beq.n	800d706 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800d700:	68fb      	ldr	r3, [r7, #12]
 800d702:	687a      	ldr	r2, [r7, #4]
 800d704:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d706:	bf00      	nop
 800d708:	3714      	adds	r7, #20
 800d70a:	46bd      	mov	sp, r7
 800d70c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d710:	4770      	bx	lr
 800d712:	bf00      	nop
 800d714:	200036a4 	.word	0x200036a4
 800d718:	200036ac 	.word	0x200036ac

0800d71c <siscanf>:
 800d71c:	b40e      	push	{r1, r2, r3}
 800d71e:	b510      	push	{r4, lr}
 800d720:	b09f      	sub	sp, #124	; 0x7c
 800d722:	f44f 7101 	mov.w	r1, #516	; 0x204
 800d726:	ac21      	add	r4, sp, #132	; 0x84
 800d728:	f8ad 101c 	strh.w	r1, [sp, #28]
 800d72c:	9004      	str	r0, [sp, #16]
 800d72e:	f854 2b04 	ldr.w	r2, [r4], #4
 800d732:	9008      	str	r0, [sp, #32]
 800d734:	9201      	str	r2, [sp, #4]
 800d736:	f7f2 fd8d 	bl	8000254 <strlen>
 800d73a:	4b0c      	ldr	r3, [pc, #48]	; (800d76c <siscanf+0x50>)
 800d73c:	a904      	add	r1, sp, #16
 800d73e:	9005      	str	r0, [sp, #20]
 800d740:	930d      	str	r3, [sp, #52]	; 0x34
 800d742:	2300      	movs	r3, #0
 800d744:	9009      	str	r0, [sp, #36]	; 0x24
 800d746:	9311      	str	r3, [sp, #68]	; 0x44
 800d748:	9316      	str	r3, [sp, #88]	; 0x58
 800d74a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800d74e:	4808      	ldr	r0, [pc, #32]	; (800d770 <siscanf+0x54>)
 800d750:	f8ad 301e 	strh.w	r3, [sp, #30]
 800d754:	4623      	mov	r3, r4
 800d756:	9a01      	ldr	r2, [sp, #4]
 800d758:	6800      	ldr	r0, [r0, #0]
 800d75a:	9403      	str	r4, [sp, #12]
 800d75c:	f000 f9a0 	bl	800daa0 <__ssvfiscanf_r>
 800d760:	b01f      	add	sp, #124	; 0x7c
 800d762:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d766:	b003      	add	sp, #12
 800d768:	4770      	bx	lr
 800d76a:	bf00      	nop
 800d76c:	0800d775 	.word	0x0800d775
 800d770:	20000060 	.word	0x20000060

0800d774 <__seofread>:
 800d774:	2000      	movs	r0, #0
 800d776:	4770      	bx	lr

0800d778 <memset>:
 800d778:	4402      	add	r2, r0
 800d77a:	4603      	mov	r3, r0
 800d77c:	4293      	cmp	r3, r2
 800d77e:	d100      	bne.n	800d782 <memset+0xa>
 800d780:	4770      	bx	lr
 800d782:	f803 1b01 	strb.w	r1, [r3], #1
 800d786:	e7f9      	b.n	800d77c <memset+0x4>

0800d788 <__errno>:
 800d788:	4b01      	ldr	r3, [pc, #4]	; (800d790 <__errno+0x8>)
 800d78a:	6818      	ldr	r0, [r3, #0]
 800d78c:	4770      	bx	lr
 800d78e:	bf00      	nop
 800d790:	20000060 	.word	0x20000060

0800d794 <__libc_init_array>:
 800d794:	b570      	push	{r4, r5, r6, lr}
 800d796:	4d0d      	ldr	r5, [pc, #52]	; (800d7cc <__libc_init_array+0x38>)
 800d798:	2600      	movs	r6, #0
 800d79a:	4c0d      	ldr	r4, [pc, #52]	; (800d7d0 <__libc_init_array+0x3c>)
 800d79c:	1b64      	subs	r4, r4, r5
 800d79e:	10a4      	asrs	r4, r4, #2
 800d7a0:	42a6      	cmp	r6, r4
 800d7a2:	d109      	bne.n	800d7b8 <__libc_init_array+0x24>
 800d7a4:	4d0b      	ldr	r5, [pc, #44]	; (800d7d4 <__libc_init_array+0x40>)
 800d7a6:	2600      	movs	r6, #0
 800d7a8:	4c0b      	ldr	r4, [pc, #44]	; (800d7d8 <__libc_init_array+0x44>)
 800d7aa:	f000 fdfb 	bl	800e3a4 <_init>
 800d7ae:	1b64      	subs	r4, r4, r5
 800d7b0:	10a4      	asrs	r4, r4, #2
 800d7b2:	42a6      	cmp	r6, r4
 800d7b4:	d105      	bne.n	800d7c2 <__libc_init_array+0x2e>
 800d7b6:	bd70      	pop	{r4, r5, r6, pc}
 800d7b8:	f855 3b04 	ldr.w	r3, [r5], #4
 800d7bc:	3601      	adds	r6, #1
 800d7be:	4798      	blx	r3
 800d7c0:	e7ee      	b.n	800d7a0 <__libc_init_array+0xc>
 800d7c2:	f855 3b04 	ldr.w	r3, [r5], #4
 800d7c6:	3601      	adds	r6, #1
 800d7c8:	4798      	blx	r3
 800d7ca:	e7f2      	b.n	800d7b2 <__libc_init_array+0x1e>
 800d7cc:	0800e5f8 	.word	0x0800e5f8
 800d7d0:	0800e5f8 	.word	0x0800e5f8
 800d7d4:	0800e5f8 	.word	0x0800e5f8
 800d7d8:	0800e5fc 	.word	0x0800e5fc

0800d7dc <__retarget_lock_acquire_recursive>:
 800d7dc:	4770      	bx	lr

0800d7de <__retarget_lock_release_recursive>:
 800d7de:	4770      	bx	lr

0800d7e0 <memcpy>:
 800d7e0:	440a      	add	r2, r1
 800d7e2:	1e43      	subs	r3, r0, #1
 800d7e4:	4291      	cmp	r1, r2
 800d7e6:	d100      	bne.n	800d7ea <memcpy+0xa>
 800d7e8:	4770      	bx	lr
 800d7ea:	b510      	push	{r4, lr}
 800d7ec:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d7f0:	4291      	cmp	r1, r2
 800d7f2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d7f6:	d1f9      	bne.n	800d7ec <memcpy+0xc>
 800d7f8:	bd10      	pop	{r4, pc}
	...

0800d7fc <_free_r>:
 800d7fc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d7fe:	2900      	cmp	r1, #0
 800d800:	d043      	beq.n	800d88a <_free_r+0x8e>
 800d802:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d806:	1f0c      	subs	r4, r1, #4
 800d808:	9001      	str	r0, [sp, #4]
 800d80a:	2b00      	cmp	r3, #0
 800d80c:	bfb8      	it	lt
 800d80e:	18e4      	addlt	r4, r4, r3
 800d810:	f000 f8e0 	bl	800d9d4 <__malloc_lock>
 800d814:	4a1e      	ldr	r2, [pc, #120]	; (800d890 <_free_r+0x94>)
 800d816:	9801      	ldr	r0, [sp, #4]
 800d818:	6813      	ldr	r3, [r2, #0]
 800d81a:	b933      	cbnz	r3, 800d82a <_free_r+0x2e>
 800d81c:	6063      	str	r3, [r4, #4]
 800d81e:	6014      	str	r4, [r2, #0]
 800d820:	b003      	add	sp, #12
 800d822:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d826:	f000 b8db 	b.w	800d9e0 <__malloc_unlock>
 800d82a:	42a3      	cmp	r3, r4
 800d82c:	d908      	bls.n	800d840 <_free_r+0x44>
 800d82e:	6825      	ldr	r5, [r4, #0]
 800d830:	1961      	adds	r1, r4, r5
 800d832:	428b      	cmp	r3, r1
 800d834:	bf01      	itttt	eq
 800d836:	6819      	ldreq	r1, [r3, #0]
 800d838:	685b      	ldreq	r3, [r3, #4]
 800d83a:	1949      	addeq	r1, r1, r5
 800d83c:	6021      	streq	r1, [r4, #0]
 800d83e:	e7ed      	b.n	800d81c <_free_r+0x20>
 800d840:	461a      	mov	r2, r3
 800d842:	685b      	ldr	r3, [r3, #4]
 800d844:	b10b      	cbz	r3, 800d84a <_free_r+0x4e>
 800d846:	42a3      	cmp	r3, r4
 800d848:	d9fa      	bls.n	800d840 <_free_r+0x44>
 800d84a:	6811      	ldr	r1, [r2, #0]
 800d84c:	1855      	adds	r5, r2, r1
 800d84e:	42a5      	cmp	r5, r4
 800d850:	d10b      	bne.n	800d86a <_free_r+0x6e>
 800d852:	6824      	ldr	r4, [r4, #0]
 800d854:	4421      	add	r1, r4
 800d856:	1854      	adds	r4, r2, r1
 800d858:	6011      	str	r1, [r2, #0]
 800d85a:	42a3      	cmp	r3, r4
 800d85c:	d1e0      	bne.n	800d820 <_free_r+0x24>
 800d85e:	681c      	ldr	r4, [r3, #0]
 800d860:	685b      	ldr	r3, [r3, #4]
 800d862:	440c      	add	r4, r1
 800d864:	6053      	str	r3, [r2, #4]
 800d866:	6014      	str	r4, [r2, #0]
 800d868:	e7da      	b.n	800d820 <_free_r+0x24>
 800d86a:	d902      	bls.n	800d872 <_free_r+0x76>
 800d86c:	230c      	movs	r3, #12
 800d86e:	6003      	str	r3, [r0, #0]
 800d870:	e7d6      	b.n	800d820 <_free_r+0x24>
 800d872:	6825      	ldr	r5, [r4, #0]
 800d874:	1961      	adds	r1, r4, r5
 800d876:	428b      	cmp	r3, r1
 800d878:	bf02      	ittt	eq
 800d87a:	6819      	ldreq	r1, [r3, #0]
 800d87c:	685b      	ldreq	r3, [r3, #4]
 800d87e:	1949      	addeq	r1, r1, r5
 800d880:	6063      	str	r3, [r4, #4]
 800d882:	bf08      	it	eq
 800d884:	6021      	streq	r1, [r4, #0]
 800d886:	6054      	str	r4, [r2, #4]
 800d888:	e7ca      	b.n	800d820 <_free_r+0x24>
 800d88a:	b003      	add	sp, #12
 800d88c:	bd30      	pop	{r4, r5, pc}
 800d88e:	bf00      	nop
 800d890:	20003804 	.word	0x20003804

0800d894 <sbrk_aligned>:
 800d894:	b570      	push	{r4, r5, r6, lr}
 800d896:	4e0e      	ldr	r6, [pc, #56]	; (800d8d0 <sbrk_aligned+0x3c>)
 800d898:	460c      	mov	r4, r1
 800d89a:	4605      	mov	r5, r0
 800d89c:	6831      	ldr	r1, [r6, #0]
 800d89e:	b911      	cbnz	r1, 800d8a6 <sbrk_aligned+0x12>
 800d8a0:	f000 fc32 	bl	800e108 <_sbrk_r>
 800d8a4:	6030      	str	r0, [r6, #0]
 800d8a6:	4621      	mov	r1, r4
 800d8a8:	4628      	mov	r0, r5
 800d8aa:	f000 fc2d 	bl	800e108 <_sbrk_r>
 800d8ae:	1c43      	adds	r3, r0, #1
 800d8b0:	d00a      	beq.n	800d8c8 <sbrk_aligned+0x34>
 800d8b2:	1cc4      	adds	r4, r0, #3
 800d8b4:	f024 0403 	bic.w	r4, r4, #3
 800d8b8:	42a0      	cmp	r0, r4
 800d8ba:	d007      	beq.n	800d8cc <sbrk_aligned+0x38>
 800d8bc:	1a21      	subs	r1, r4, r0
 800d8be:	4628      	mov	r0, r5
 800d8c0:	f000 fc22 	bl	800e108 <_sbrk_r>
 800d8c4:	3001      	adds	r0, #1
 800d8c6:	d101      	bne.n	800d8cc <sbrk_aligned+0x38>
 800d8c8:	f04f 34ff 	mov.w	r4, #4294967295
 800d8cc:	4620      	mov	r0, r4
 800d8ce:	bd70      	pop	{r4, r5, r6, pc}
 800d8d0:	20003808 	.word	0x20003808

0800d8d4 <_malloc_r>:
 800d8d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d8d8:	1ccd      	adds	r5, r1, #3
 800d8da:	4607      	mov	r7, r0
 800d8dc:	f025 0503 	bic.w	r5, r5, #3
 800d8e0:	3508      	adds	r5, #8
 800d8e2:	2d0c      	cmp	r5, #12
 800d8e4:	bf38      	it	cc
 800d8e6:	250c      	movcc	r5, #12
 800d8e8:	2d00      	cmp	r5, #0
 800d8ea:	db01      	blt.n	800d8f0 <_malloc_r+0x1c>
 800d8ec:	42a9      	cmp	r1, r5
 800d8ee:	d905      	bls.n	800d8fc <_malloc_r+0x28>
 800d8f0:	230c      	movs	r3, #12
 800d8f2:	2600      	movs	r6, #0
 800d8f4:	603b      	str	r3, [r7, #0]
 800d8f6:	4630      	mov	r0, r6
 800d8f8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d8fc:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800d9d0 <_malloc_r+0xfc>
 800d900:	f000 f868 	bl	800d9d4 <__malloc_lock>
 800d904:	f8d8 3000 	ldr.w	r3, [r8]
 800d908:	461c      	mov	r4, r3
 800d90a:	bb5c      	cbnz	r4, 800d964 <_malloc_r+0x90>
 800d90c:	4629      	mov	r1, r5
 800d90e:	4638      	mov	r0, r7
 800d910:	f7ff ffc0 	bl	800d894 <sbrk_aligned>
 800d914:	1c43      	adds	r3, r0, #1
 800d916:	4604      	mov	r4, r0
 800d918:	d155      	bne.n	800d9c6 <_malloc_r+0xf2>
 800d91a:	f8d8 4000 	ldr.w	r4, [r8]
 800d91e:	4626      	mov	r6, r4
 800d920:	2e00      	cmp	r6, #0
 800d922:	d145      	bne.n	800d9b0 <_malloc_r+0xdc>
 800d924:	2c00      	cmp	r4, #0
 800d926:	d048      	beq.n	800d9ba <_malloc_r+0xe6>
 800d928:	6823      	ldr	r3, [r4, #0]
 800d92a:	4631      	mov	r1, r6
 800d92c:	4638      	mov	r0, r7
 800d92e:	eb04 0903 	add.w	r9, r4, r3
 800d932:	f000 fbe9 	bl	800e108 <_sbrk_r>
 800d936:	4581      	cmp	r9, r0
 800d938:	d13f      	bne.n	800d9ba <_malloc_r+0xe6>
 800d93a:	6821      	ldr	r1, [r4, #0]
 800d93c:	4638      	mov	r0, r7
 800d93e:	1a6d      	subs	r5, r5, r1
 800d940:	4629      	mov	r1, r5
 800d942:	f7ff ffa7 	bl	800d894 <sbrk_aligned>
 800d946:	3001      	adds	r0, #1
 800d948:	d037      	beq.n	800d9ba <_malloc_r+0xe6>
 800d94a:	6823      	ldr	r3, [r4, #0]
 800d94c:	442b      	add	r3, r5
 800d94e:	6023      	str	r3, [r4, #0]
 800d950:	f8d8 3000 	ldr.w	r3, [r8]
 800d954:	2b00      	cmp	r3, #0
 800d956:	d038      	beq.n	800d9ca <_malloc_r+0xf6>
 800d958:	685a      	ldr	r2, [r3, #4]
 800d95a:	42a2      	cmp	r2, r4
 800d95c:	d12b      	bne.n	800d9b6 <_malloc_r+0xe2>
 800d95e:	2200      	movs	r2, #0
 800d960:	605a      	str	r2, [r3, #4]
 800d962:	e00f      	b.n	800d984 <_malloc_r+0xb0>
 800d964:	6822      	ldr	r2, [r4, #0]
 800d966:	1b52      	subs	r2, r2, r5
 800d968:	d41f      	bmi.n	800d9aa <_malloc_r+0xd6>
 800d96a:	2a0b      	cmp	r2, #11
 800d96c:	d917      	bls.n	800d99e <_malloc_r+0xca>
 800d96e:	1961      	adds	r1, r4, r5
 800d970:	42a3      	cmp	r3, r4
 800d972:	6025      	str	r5, [r4, #0]
 800d974:	bf18      	it	ne
 800d976:	6059      	strne	r1, [r3, #4]
 800d978:	6863      	ldr	r3, [r4, #4]
 800d97a:	bf08      	it	eq
 800d97c:	f8c8 1000 	streq.w	r1, [r8]
 800d980:	5162      	str	r2, [r4, r5]
 800d982:	604b      	str	r3, [r1, #4]
 800d984:	f104 060b 	add.w	r6, r4, #11
 800d988:	4638      	mov	r0, r7
 800d98a:	f000 f829 	bl	800d9e0 <__malloc_unlock>
 800d98e:	1d23      	adds	r3, r4, #4
 800d990:	f026 0607 	bic.w	r6, r6, #7
 800d994:	1af2      	subs	r2, r6, r3
 800d996:	d0ae      	beq.n	800d8f6 <_malloc_r+0x22>
 800d998:	1b9b      	subs	r3, r3, r6
 800d99a:	50a3      	str	r3, [r4, r2]
 800d99c:	e7ab      	b.n	800d8f6 <_malloc_r+0x22>
 800d99e:	42a3      	cmp	r3, r4
 800d9a0:	6862      	ldr	r2, [r4, #4]
 800d9a2:	d1dd      	bne.n	800d960 <_malloc_r+0x8c>
 800d9a4:	f8c8 2000 	str.w	r2, [r8]
 800d9a8:	e7ec      	b.n	800d984 <_malloc_r+0xb0>
 800d9aa:	4623      	mov	r3, r4
 800d9ac:	6864      	ldr	r4, [r4, #4]
 800d9ae:	e7ac      	b.n	800d90a <_malloc_r+0x36>
 800d9b0:	4634      	mov	r4, r6
 800d9b2:	6876      	ldr	r6, [r6, #4]
 800d9b4:	e7b4      	b.n	800d920 <_malloc_r+0x4c>
 800d9b6:	4613      	mov	r3, r2
 800d9b8:	e7cc      	b.n	800d954 <_malloc_r+0x80>
 800d9ba:	230c      	movs	r3, #12
 800d9bc:	4638      	mov	r0, r7
 800d9be:	603b      	str	r3, [r7, #0]
 800d9c0:	f000 f80e 	bl	800d9e0 <__malloc_unlock>
 800d9c4:	e797      	b.n	800d8f6 <_malloc_r+0x22>
 800d9c6:	6025      	str	r5, [r4, #0]
 800d9c8:	e7dc      	b.n	800d984 <_malloc_r+0xb0>
 800d9ca:	605b      	str	r3, [r3, #4]
 800d9cc:	deff      	udf	#255	; 0xff
 800d9ce:	bf00      	nop
 800d9d0:	20003804 	.word	0x20003804

0800d9d4 <__malloc_lock>:
 800d9d4:	4801      	ldr	r0, [pc, #4]	; (800d9dc <__malloc_lock+0x8>)
 800d9d6:	f7ff bf01 	b.w	800d7dc <__retarget_lock_acquire_recursive>
 800d9da:	bf00      	nop
 800d9dc:	20003800 	.word	0x20003800

0800d9e0 <__malloc_unlock>:
 800d9e0:	4801      	ldr	r0, [pc, #4]	; (800d9e8 <__malloc_unlock+0x8>)
 800d9e2:	f7ff befc 	b.w	800d7de <__retarget_lock_release_recursive>
 800d9e6:	bf00      	nop
 800d9e8:	20003800 	.word	0x20003800

0800d9ec <_sungetc_r>:
 800d9ec:	b538      	push	{r3, r4, r5, lr}
 800d9ee:	1c4b      	adds	r3, r1, #1
 800d9f0:	4614      	mov	r4, r2
 800d9f2:	d103      	bne.n	800d9fc <_sungetc_r+0x10>
 800d9f4:	f04f 35ff 	mov.w	r5, #4294967295
 800d9f8:	4628      	mov	r0, r5
 800d9fa:	bd38      	pop	{r3, r4, r5, pc}
 800d9fc:	8993      	ldrh	r3, [r2, #12]
 800d9fe:	b2cd      	uxtb	r5, r1
 800da00:	f023 0320 	bic.w	r3, r3, #32
 800da04:	8193      	strh	r3, [r2, #12]
 800da06:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800da08:	6852      	ldr	r2, [r2, #4]
 800da0a:	b18b      	cbz	r3, 800da30 <_sungetc_r+0x44>
 800da0c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800da0e:	4293      	cmp	r3, r2
 800da10:	dd08      	ble.n	800da24 <_sungetc_r+0x38>
 800da12:	6823      	ldr	r3, [r4, #0]
 800da14:	1e5a      	subs	r2, r3, #1
 800da16:	6022      	str	r2, [r4, #0]
 800da18:	f803 5c01 	strb.w	r5, [r3, #-1]
 800da1c:	6863      	ldr	r3, [r4, #4]
 800da1e:	3301      	adds	r3, #1
 800da20:	6063      	str	r3, [r4, #4]
 800da22:	e7e9      	b.n	800d9f8 <_sungetc_r+0xc>
 800da24:	4621      	mov	r1, r4
 800da26:	f000 fb38 	bl	800e09a <__submore>
 800da2a:	2800      	cmp	r0, #0
 800da2c:	d0f1      	beq.n	800da12 <_sungetc_r+0x26>
 800da2e:	e7e1      	b.n	800d9f4 <_sungetc_r+0x8>
 800da30:	6921      	ldr	r1, [r4, #16]
 800da32:	6823      	ldr	r3, [r4, #0]
 800da34:	b151      	cbz	r1, 800da4c <_sungetc_r+0x60>
 800da36:	4299      	cmp	r1, r3
 800da38:	d208      	bcs.n	800da4c <_sungetc_r+0x60>
 800da3a:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800da3e:	42a9      	cmp	r1, r5
 800da40:	d104      	bne.n	800da4c <_sungetc_r+0x60>
 800da42:	3b01      	subs	r3, #1
 800da44:	3201      	adds	r2, #1
 800da46:	6023      	str	r3, [r4, #0]
 800da48:	6062      	str	r2, [r4, #4]
 800da4a:	e7d5      	b.n	800d9f8 <_sungetc_r+0xc>
 800da4c:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 800da50:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800da54:	6363      	str	r3, [r4, #52]	; 0x34
 800da56:	2303      	movs	r3, #3
 800da58:	63a3      	str	r3, [r4, #56]	; 0x38
 800da5a:	4623      	mov	r3, r4
 800da5c:	f803 5f46 	strb.w	r5, [r3, #70]!
 800da60:	6023      	str	r3, [r4, #0]
 800da62:	2301      	movs	r3, #1
 800da64:	e7dc      	b.n	800da20 <_sungetc_r+0x34>

0800da66 <__ssrefill_r>:
 800da66:	b510      	push	{r4, lr}
 800da68:	460c      	mov	r4, r1
 800da6a:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800da6c:	b169      	cbz	r1, 800da8a <__ssrefill_r+0x24>
 800da6e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800da72:	4299      	cmp	r1, r3
 800da74:	d001      	beq.n	800da7a <__ssrefill_r+0x14>
 800da76:	f7ff fec1 	bl	800d7fc <_free_r>
 800da7a:	2000      	movs	r0, #0
 800da7c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800da7e:	6360      	str	r0, [r4, #52]	; 0x34
 800da80:	6063      	str	r3, [r4, #4]
 800da82:	b113      	cbz	r3, 800da8a <__ssrefill_r+0x24>
 800da84:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800da86:	6023      	str	r3, [r4, #0]
 800da88:	bd10      	pop	{r4, pc}
 800da8a:	6923      	ldr	r3, [r4, #16]
 800da8c:	f04f 30ff 	mov.w	r0, #4294967295
 800da90:	6023      	str	r3, [r4, #0]
 800da92:	2300      	movs	r3, #0
 800da94:	6063      	str	r3, [r4, #4]
 800da96:	89a3      	ldrh	r3, [r4, #12]
 800da98:	f043 0320 	orr.w	r3, r3, #32
 800da9c:	81a3      	strh	r3, [r4, #12]
 800da9e:	e7f3      	b.n	800da88 <__ssrefill_r+0x22>

0800daa0 <__ssvfiscanf_r>:
 800daa0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800daa4:	460c      	mov	r4, r1
 800daa6:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 800daaa:	2100      	movs	r1, #0
 800daac:	4606      	mov	r6, r0
 800daae:	f10d 0804 	add.w	r8, sp, #4
 800dab2:	4fa6      	ldr	r7, [pc, #664]	; (800dd4c <__ssvfiscanf_r+0x2ac>)
 800dab4:	f8df 92a0 	ldr.w	r9, [pc, #672]	; 800dd58 <__ssvfiscanf_r+0x2b8>
 800dab8:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 800dabc:	9300      	str	r3, [sp, #0]
 800dabe:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 800dac2:	49a3      	ldr	r1, [pc, #652]	; (800dd50 <__ssvfiscanf_r+0x2b0>)
 800dac4:	91a0      	str	r1, [sp, #640]	; 0x280
 800dac6:	49a3      	ldr	r1, [pc, #652]	; (800dd54 <__ssvfiscanf_r+0x2b4>)
 800dac8:	91a1      	str	r1, [sp, #644]	; 0x284
 800daca:	7813      	ldrb	r3, [r2, #0]
 800dacc:	2b00      	cmp	r3, #0
 800dace:	f000 815a 	beq.w	800dd86 <__ssvfiscanf_r+0x2e6>
 800dad2:	5cf9      	ldrb	r1, [r7, r3]
 800dad4:	1c55      	adds	r5, r2, #1
 800dad6:	f011 0108 	ands.w	r1, r1, #8
 800dada:	d019      	beq.n	800db10 <__ssvfiscanf_r+0x70>
 800dadc:	6863      	ldr	r3, [r4, #4]
 800dade:	2b00      	cmp	r3, #0
 800dae0:	dd0f      	ble.n	800db02 <__ssvfiscanf_r+0x62>
 800dae2:	6823      	ldr	r3, [r4, #0]
 800dae4:	781a      	ldrb	r2, [r3, #0]
 800dae6:	5cba      	ldrb	r2, [r7, r2]
 800dae8:	0712      	lsls	r2, r2, #28
 800daea:	d401      	bmi.n	800daf0 <__ssvfiscanf_r+0x50>
 800daec:	462a      	mov	r2, r5
 800daee:	e7ec      	b.n	800daca <__ssvfiscanf_r+0x2a>
 800daf0:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800daf2:	3301      	adds	r3, #1
 800daf4:	3201      	adds	r2, #1
 800daf6:	6023      	str	r3, [r4, #0]
 800daf8:	9245      	str	r2, [sp, #276]	; 0x114
 800dafa:	6862      	ldr	r2, [r4, #4]
 800dafc:	3a01      	subs	r2, #1
 800dafe:	6062      	str	r2, [r4, #4]
 800db00:	e7ec      	b.n	800dadc <__ssvfiscanf_r+0x3c>
 800db02:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800db04:	4621      	mov	r1, r4
 800db06:	4630      	mov	r0, r6
 800db08:	4798      	blx	r3
 800db0a:	2800      	cmp	r0, #0
 800db0c:	d0e9      	beq.n	800dae2 <__ssvfiscanf_r+0x42>
 800db0e:	e7ed      	b.n	800daec <__ssvfiscanf_r+0x4c>
 800db10:	2b25      	cmp	r3, #37	; 0x25
 800db12:	d012      	beq.n	800db3a <__ssvfiscanf_r+0x9a>
 800db14:	469a      	mov	sl, r3
 800db16:	6863      	ldr	r3, [r4, #4]
 800db18:	2b00      	cmp	r3, #0
 800db1a:	f340 8092 	ble.w	800dc42 <__ssvfiscanf_r+0x1a2>
 800db1e:	6822      	ldr	r2, [r4, #0]
 800db20:	7813      	ldrb	r3, [r2, #0]
 800db22:	4553      	cmp	r3, sl
 800db24:	f040 812f 	bne.w	800dd86 <__ssvfiscanf_r+0x2e6>
 800db28:	6863      	ldr	r3, [r4, #4]
 800db2a:	3201      	adds	r2, #1
 800db2c:	3b01      	subs	r3, #1
 800db2e:	6022      	str	r2, [r4, #0]
 800db30:	6063      	str	r3, [r4, #4]
 800db32:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800db34:	3301      	adds	r3, #1
 800db36:	9345      	str	r3, [sp, #276]	; 0x114
 800db38:	e7d8      	b.n	800daec <__ssvfiscanf_r+0x4c>
 800db3a:	9141      	str	r1, [sp, #260]	; 0x104
 800db3c:	9143      	str	r1, [sp, #268]	; 0x10c
 800db3e:	7853      	ldrb	r3, [r2, #1]
 800db40:	2b2a      	cmp	r3, #42	; 0x2a
 800db42:	bf04      	itt	eq
 800db44:	2310      	moveq	r3, #16
 800db46:	1c95      	addeq	r5, r2, #2
 800db48:	f04f 020a 	mov.w	r2, #10
 800db4c:	bf08      	it	eq
 800db4e:	9341      	streq	r3, [sp, #260]	; 0x104
 800db50:	46aa      	mov	sl, r5
 800db52:	f81a 1b01 	ldrb.w	r1, [sl], #1
 800db56:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 800db5a:	2b09      	cmp	r3, #9
 800db5c:	d91c      	bls.n	800db98 <__ssvfiscanf_r+0xf8>
 800db5e:	2203      	movs	r2, #3
 800db60:	487d      	ldr	r0, [pc, #500]	; (800dd58 <__ssvfiscanf_r+0x2b8>)
 800db62:	f000 fae1 	bl	800e128 <memchr>
 800db66:	b138      	cbz	r0, 800db78 <__ssvfiscanf_r+0xd8>
 800db68:	eba0 0009 	sub.w	r0, r0, r9
 800db6c:	2301      	movs	r3, #1
 800db6e:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800db70:	4655      	mov	r5, sl
 800db72:	4083      	lsls	r3, r0
 800db74:	4313      	orrs	r3, r2
 800db76:	9341      	str	r3, [sp, #260]	; 0x104
 800db78:	f815 3b01 	ldrb.w	r3, [r5], #1
 800db7c:	2b78      	cmp	r3, #120	; 0x78
 800db7e:	d806      	bhi.n	800db8e <__ssvfiscanf_r+0xee>
 800db80:	2b57      	cmp	r3, #87	; 0x57
 800db82:	d810      	bhi.n	800dba6 <__ssvfiscanf_r+0x106>
 800db84:	2b25      	cmp	r3, #37	; 0x25
 800db86:	d0c5      	beq.n	800db14 <__ssvfiscanf_r+0x74>
 800db88:	d856      	bhi.n	800dc38 <__ssvfiscanf_r+0x198>
 800db8a:	2b00      	cmp	r3, #0
 800db8c:	d064      	beq.n	800dc58 <__ssvfiscanf_r+0x1b8>
 800db8e:	2303      	movs	r3, #3
 800db90:	9347      	str	r3, [sp, #284]	; 0x11c
 800db92:	230a      	movs	r3, #10
 800db94:	9342      	str	r3, [sp, #264]	; 0x108
 800db96:	e075      	b.n	800dc84 <__ssvfiscanf_r+0x1e4>
 800db98:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800db9a:	4655      	mov	r5, sl
 800db9c:	fb02 1103 	mla	r1, r2, r3, r1
 800dba0:	3930      	subs	r1, #48	; 0x30
 800dba2:	9143      	str	r1, [sp, #268]	; 0x10c
 800dba4:	e7d4      	b.n	800db50 <__ssvfiscanf_r+0xb0>
 800dba6:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 800dbaa:	2a20      	cmp	r2, #32
 800dbac:	d8ef      	bhi.n	800db8e <__ssvfiscanf_r+0xee>
 800dbae:	a101      	add	r1, pc, #4	; (adr r1, 800dbb4 <__ssvfiscanf_r+0x114>)
 800dbb0:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800dbb4:	0800dc67 	.word	0x0800dc67
 800dbb8:	0800db8f 	.word	0x0800db8f
 800dbbc:	0800db8f 	.word	0x0800db8f
 800dbc0:	0800dcc5 	.word	0x0800dcc5
 800dbc4:	0800db8f 	.word	0x0800db8f
 800dbc8:	0800db8f 	.word	0x0800db8f
 800dbcc:	0800db8f 	.word	0x0800db8f
 800dbd0:	0800db8f 	.word	0x0800db8f
 800dbd4:	0800db8f 	.word	0x0800db8f
 800dbd8:	0800db8f 	.word	0x0800db8f
 800dbdc:	0800db8f 	.word	0x0800db8f
 800dbe0:	0800dcdb 	.word	0x0800dcdb
 800dbe4:	0800dcc1 	.word	0x0800dcc1
 800dbe8:	0800dc3f 	.word	0x0800dc3f
 800dbec:	0800dc3f 	.word	0x0800dc3f
 800dbf0:	0800dc3f 	.word	0x0800dc3f
 800dbf4:	0800db8f 	.word	0x0800db8f
 800dbf8:	0800dc7d 	.word	0x0800dc7d
 800dbfc:	0800db8f 	.word	0x0800db8f
 800dc00:	0800db8f 	.word	0x0800db8f
 800dc04:	0800db8f 	.word	0x0800db8f
 800dc08:	0800db8f 	.word	0x0800db8f
 800dc0c:	0800dceb 	.word	0x0800dceb
 800dc10:	0800dcb9 	.word	0x0800dcb9
 800dc14:	0800dc5f 	.word	0x0800dc5f
 800dc18:	0800db8f 	.word	0x0800db8f
 800dc1c:	0800db8f 	.word	0x0800db8f
 800dc20:	0800dce7 	.word	0x0800dce7
 800dc24:	0800db8f 	.word	0x0800db8f
 800dc28:	0800dcc1 	.word	0x0800dcc1
 800dc2c:	0800db8f 	.word	0x0800db8f
 800dc30:	0800db8f 	.word	0x0800db8f
 800dc34:	0800dc67 	.word	0x0800dc67
 800dc38:	3b45      	subs	r3, #69	; 0x45
 800dc3a:	2b02      	cmp	r3, #2
 800dc3c:	d8a7      	bhi.n	800db8e <__ssvfiscanf_r+0xee>
 800dc3e:	2305      	movs	r3, #5
 800dc40:	e01f      	b.n	800dc82 <__ssvfiscanf_r+0x1e2>
 800dc42:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800dc44:	4621      	mov	r1, r4
 800dc46:	4630      	mov	r0, r6
 800dc48:	4798      	blx	r3
 800dc4a:	2800      	cmp	r0, #0
 800dc4c:	f43f af67 	beq.w	800db1e <__ssvfiscanf_r+0x7e>
 800dc50:	9844      	ldr	r0, [sp, #272]	; 0x110
 800dc52:	2800      	cmp	r0, #0
 800dc54:	f040 808d 	bne.w	800dd72 <__ssvfiscanf_r+0x2d2>
 800dc58:	f04f 30ff 	mov.w	r0, #4294967295
 800dc5c:	e08f      	b.n	800dd7e <__ssvfiscanf_r+0x2de>
 800dc5e:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800dc60:	f042 0220 	orr.w	r2, r2, #32
 800dc64:	9241      	str	r2, [sp, #260]	; 0x104
 800dc66:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800dc68:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800dc6c:	9241      	str	r2, [sp, #260]	; 0x104
 800dc6e:	2210      	movs	r2, #16
 800dc70:	2b6f      	cmp	r3, #111	; 0x6f
 800dc72:	9242      	str	r2, [sp, #264]	; 0x108
 800dc74:	bf34      	ite	cc
 800dc76:	2303      	movcc	r3, #3
 800dc78:	2304      	movcs	r3, #4
 800dc7a:	e002      	b.n	800dc82 <__ssvfiscanf_r+0x1e2>
 800dc7c:	2300      	movs	r3, #0
 800dc7e:	9342      	str	r3, [sp, #264]	; 0x108
 800dc80:	2303      	movs	r3, #3
 800dc82:	9347      	str	r3, [sp, #284]	; 0x11c
 800dc84:	6863      	ldr	r3, [r4, #4]
 800dc86:	2b00      	cmp	r3, #0
 800dc88:	dd3e      	ble.n	800dd08 <__ssvfiscanf_r+0x268>
 800dc8a:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800dc8c:	0659      	lsls	r1, r3, #25
 800dc8e:	d404      	bmi.n	800dc9a <__ssvfiscanf_r+0x1fa>
 800dc90:	6823      	ldr	r3, [r4, #0]
 800dc92:	781a      	ldrb	r2, [r3, #0]
 800dc94:	5cba      	ldrb	r2, [r7, r2]
 800dc96:	0712      	lsls	r2, r2, #28
 800dc98:	d43d      	bmi.n	800dd16 <__ssvfiscanf_r+0x276>
 800dc9a:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 800dc9c:	2b02      	cmp	r3, #2
 800dc9e:	dc4c      	bgt.n	800dd3a <__ssvfiscanf_r+0x29a>
 800dca0:	466b      	mov	r3, sp
 800dca2:	4622      	mov	r2, r4
 800dca4:	a941      	add	r1, sp, #260	; 0x104
 800dca6:	4630      	mov	r0, r6
 800dca8:	f000 f872 	bl	800dd90 <_scanf_chars>
 800dcac:	2801      	cmp	r0, #1
 800dcae:	d06a      	beq.n	800dd86 <__ssvfiscanf_r+0x2e6>
 800dcb0:	2802      	cmp	r0, #2
 800dcb2:	f47f af1b 	bne.w	800daec <__ssvfiscanf_r+0x4c>
 800dcb6:	e7cb      	b.n	800dc50 <__ssvfiscanf_r+0x1b0>
 800dcb8:	2308      	movs	r3, #8
 800dcba:	9342      	str	r3, [sp, #264]	; 0x108
 800dcbc:	2304      	movs	r3, #4
 800dcbe:	e7e0      	b.n	800dc82 <__ssvfiscanf_r+0x1e2>
 800dcc0:	220a      	movs	r2, #10
 800dcc2:	e7d5      	b.n	800dc70 <__ssvfiscanf_r+0x1d0>
 800dcc4:	4629      	mov	r1, r5
 800dcc6:	4640      	mov	r0, r8
 800dcc8:	f000 f9ae 	bl	800e028 <__sccl>
 800dccc:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800dcce:	4605      	mov	r5, r0
 800dcd0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800dcd4:	9341      	str	r3, [sp, #260]	; 0x104
 800dcd6:	2301      	movs	r3, #1
 800dcd8:	e7d3      	b.n	800dc82 <__ssvfiscanf_r+0x1e2>
 800dcda:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800dcdc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800dce0:	9341      	str	r3, [sp, #260]	; 0x104
 800dce2:	2300      	movs	r3, #0
 800dce4:	e7cd      	b.n	800dc82 <__ssvfiscanf_r+0x1e2>
 800dce6:	2302      	movs	r3, #2
 800dce8:	e7cb      	b.n	800dc82 <__ssvfiscanf_r+0x1e2>
 800dcea:	9841      	ldr	r0, [sp, #260]	; 0x104
 800dcec:	06c3      	lsls	r3, r0, #27
 800dcee:	f53f aefd 	bmi.w	800daec <__ssvfiscanf_r+0x4c>
 800dcf2:	9b00      	ldr	r3, [sp, #0]
 800dcf4:	07c0      	lsls	r0, r0, #31
 800dcf6:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800dcf8:	f103 0104 	add.w	r1, r3, #4
 800dcfc:	9100      	str	r1, [sp, #0]
 800dcfe:	681b      	ldr	r3, [r3, #0]
 800dd00:	bf4c      	ite	mi
 800dd02:	801a      	strhmi	r2, [r3, #0]
 800dd04:	601a      	strpl	r2, [r3, #0]
 800dd06:	e6f1      	b.n	800daec <__ssvfiscanf_r+0x4c>
 800dd08:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800dd0a:	4621      	mov	r1, r4
 800dd0c:	4630      	mov	r0, r6
 800dd0e:	4798      	blx	r3
 800dd10:	2800      	cmp	r0, #0
 800dd12:	d0ba      	beq.n	800dc8a <__ssvfiscanf_r+0x1ea>
 800dd14:	e79c      	b.n	800dc50 <__ssvfiscanf_r+0x1b0>
 800dd16:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800dd18:	3201      	adds	r2, #1
 800dd1a:	9245      	str	r2, [sp, #276]	; 0x114
 800dd1c:	6862      	ldr	r2, [r4, #4]
 800dd1e:	3a01      	subs	r2, #1
 800dd20:	2a00      	cmp	r2, #0
 800dd22:	6062      	str	r2, [r4, #4]
 800dd24:	dd02      	ble.n	800dd2c <__ssvfiscanf_r+0x28c>
 800dd26:	3301      	adds	r3, #1
 800dd28:	6023      	str	r3, [r4, #0]
 800dd2a:	e7b1      	b.n	800dc90 <__ssvfiscanf_r+0x1f0>
 800dd2c:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800dd2e:	4621      	mov	r1, r4
 800dd30:	4630      	mov	r0, r6
 800dd32:	4798      	blx	r3
 800dd34:	2800      	cmp	r0, #0
 800dd36:	d0ab      	beq.n	800dc90 <__ssvfiscanf_r+0x1f0>
 800dd38:	e78a      	b.n	800dc50 <__ssvfiscanf_r+0x1b0>
 800dd3a:	2b04      	cmp	r3, #4
 800dd3c:	dc0e      	bgt.n	800dd5c <__ssvfiscanf_r+0x2bc>
 800dd3e:	466b      	mov	r3, sp
 800dd40:	4622      	mov	r2, r4
 800dd42:	a941      	add	r1, sp, #260	; 0x104
 800dd44:	4630      	mov	r0, r6
 800dd46:	f000 f87d 	bl	800de44 <_scanf_i>
 800dd4a:	e7af      	b.n	800dcac <__ssvfiscanf_r+0x20c>
 800dd4c:	0800e4f0 	.word	0x0800e4f0
 800dd50:	0800d9ed 	.word	0x0800d9ed
 800dd54:	0800da67 	.word	0x0800da67
 800dd58:	0800e4d0 	.word	0x0800e4d0
 800dd5c:	4b0b      	ldr	r3, [pc, #44]	; (800dd8c <__ssvfiscanf_r+0x2ec>)
 800dd5e:	2b00      	cmp	r3, #0
 800dd60:	f43f aec4 	beq.w	800daec <__ssvfiscanf_r+0x4c>
 800dd64:	466b      	mov	r3, sp
 800dd66:	4622      	mov	r2, r4
 800dd68:	a941      	add	r1, sp, #260	; 0x104
 800dd6a:	4630      	mov	r0, r6
 800dd6c:	f3af 8000 	nop.w
 800dd70:	e79c      	b.n	800dcac <__ssvfiscanf_r+0x20c>
 800dd72:	89a3      	ldrh	r3, [r4, #12]
 800dd74:	f013 0f40 	tst.w	r3, #64	; 0x40
 800dd78:	bf18      	it	ne
 800dd7a:	f04f 30ff 	movne.w	r0, #4294967295
 800dd7e:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 800dd82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dd86:	9844      	ldr	r0, [sp, #272]	; 0x110
 800dd88:	e7f9      	b.n	800dd7e <__ssvfiscanf_r+0x2de>
 800dd8a:	bf00      	nop
 800dd8c:	00000000 	.word	0x00000000

0800dd90 <_scanf_chars>:
 800dd90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800dd94:	4615      	mov	r5, r2
 800dd96:	688a      	ldr	r2, [r1, #8]
 800dd98:	4680      	mov	r8, r0
 800dd9a:	460c      	mov	r4, r1
 800dd9c:	b932      	cbnz	r2, 800ddac <_scanf_chars+0x1c>
 800dd9e:	698a      	ldr	r2, [r1, #24]
 800dda0:	2a00      	cmp	r2, #0
 800dda2:	bf0c      	ite	eq
 800dda4:	2201      	moveq	r2, #1
 800dda6:	f04f 32ff 	movne.w	r2, #4294967295
 800ddaa:	608a      	str	r2, [r1, #8]
 800ddac:	6822      	ldr	r2, [r4, #0]
 800ddae:	2700      	movs	r7, #0
 800ddb0:	f8df 908c 	ldr.w	r9, [pc, #140]	; 800de40 <_scanf_chars+0xb0>
 800ddb4:	06d1      	lsls	r1, r2, #27
 800ddb6:	bf5f      	itttt	pl
 800ddb8:	681a      	ldrpl	r2, [r3, #0]
 800ddba:	1d11      	addpl	r1, r2, #4
 800ddbc:	6019      	strpl	r1, [r3, #0]
 800ddbe:	6816      	ldrpl	r6, [r2, #0]
 800ddc0:	69a0      	ldr	r0, [r4, #24]
 800ddc2:	b188      	cbz	r0, 800dde8 <_scanf_chars+0x58>
 800ddc4:	2801      	cmp	r0, #1
 800ddc6:	d107      	bne.n	800ddd8 <_scanf_chars+0x48>
 800ddc8:	682a      	ldr	r2, [r5, #0]
 800ddca:	7811      	ldrb	r1, [r2, #0]
 800ddcc:	6962      	ldr	r2, [r4, #20]
 800ddce:	5c52      	ldrb	r2, [r2, r1]
 800ddd0:	b952      	cbnz	r2, 800dde8 <_scanf_chars+0x58>
 800ddd2:	2f00      	cmp	r7, #0
 800ddd4:	d031      	beq.n	800de3a <_scanf_chars+0xaa>
 800ddd6:	e022      	b.n	800de1e <_scanf_chars+0x8e>
 800ddd8:	2802      	cmp	r0, #2
 800ddda:	d120      	bne.n	800de1e <_scanf_chars+0x8e>
 800dddc:	682b      	ldr	r3, [r5, #0]
 800ddde:	781b      	ldrb	r3, [r3, #0]
 800dde0:	f819 3003 	ldrb.w	r3, [r9, r3]
 800dde4:	071b      	lsls	r3, r3, #28
 800dde6:	d41a      	bmi.n	800de1e <_scanf_chars+0x8e>
 800dde8:	6823      	ldr	r3, [r4, #0]
 800ddea:	3701      	adds	r7, #1
 800ddec:	06da      	lsls	r2, r3, #27
 800ddee:	bf5e      	ittt	pl
 800ddf0:	682b      	ldrpl	r3, [r5, #0]
 800ddf2:	781b      	ldrbpl	r3, [r3, #0]
 800ddf4:	f806 3b01 	strbpl.w	r3, [r6], #1
 800ddf8:	682a      	ldr	r2, [r5, #0]
 800ddfa:	686b      	ldr	r3, [r5, #4]
 800ddfc:	3201      	adds	r2, #1
 800ddfe:	3b01      	subs	r3, #1
 800de00:	602a      	str	r2, [r5, #0]
 800de02:	68a2      	ldr	r2, [r4, #8]
 800de04:	606b      	str	r3, [r5, #4]
 800de06:	3a01      	subs	r2, #1
 800de08:	60a2      	str	r2, [r4, #8]
 800de0a:	b142      	cbz	r2, 800de1e <_scanf_chars+0x8e>
 800de0c:	2b00      	cmp	r3, #0
 800de0e:	dcd7      	bgt.n	800ddc0 <_scanf_chars+0x30>
 800de10:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800de14:	4629      	mov	r1, r5
 800de16:	4640      	mov	r0, r8
 800de18:	4798      	blx	r3
 800de1a:	2800      	cmp	r0, #0
 800de1c:	d0d0      	beq.n	800ddc0 <_scanf_chars+0x30>
 800de1e:	6823      	ldr	r3, [r4, #0]
 800de20:	f013 0310 	ands.w	r3, r3, #16
 800de24:	d105      	bne.n	800de32 <_scanf_chars+0xa2>
 800de26:	68e2      	ldr	r2, [r4, #12]
 800de28:	3201      	adds	r2, #1
 800de2a:	60e2      	str	r2, [r4, #12]
 800de2c:	69a2      	ldr	r2, [r4, #24]
 800de2e:	b102      	cbz	r2, 800de32 <_scanf_chars+0xa2>
 800de30:	7033      	strb	r3, [r6, #0]
 800de32:	6923      	ldr	r3, [r4, #16]
 800de34:	2000      	movs	r0, #0
 800de36:	443b      	add	r3, r7
 800de38:	6123      	str	r3, [r4, #16]
 800de3a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800de3e:	bf00      	nop
 800de40:	0800e4f0 	.word	0x0800e4f0

0800de44 <_scanf_i>:
 800de44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800de48:	4698      	mov	r8, r3
 800de4a:	b087      	sub	sp, #28
 800de4c:	4b72      	ldr	r3, [pc, #456]	; (800e018 <_scanf_i+0x1d4>)
 800de4e:	460c      	mov	r4, r1
 800de50:	4682      	mov	sl, r0
 800de52:	4616      	mov	r6, r2
 800de54:	4627      	mov	r7, r4
 800de56:	f04f 0b00 	mov.w	fp, #0
 800de5a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800de5e:	ab03      	add	r3, sp, #12
 800de60:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800de64:	4b6d      	ldr	r3, [pc, #436]	; (800e01c <_scanf_i+0x1d8>)
 800de66:	69a1      	ldr	r1, [r4, #24]
 800de68:	4a6d      	ldr	r2, [pc, #436]	; (800e020 <_scanf_i+0x1dc>)
 800de6a:	2903      	cmp	r1, #3
 800de6c:	bf18      	it	ne
 800de6e:	461a      	movne	r2, r3
 800de70:	68a3      	ldr	r3, [r4, #8]
 800de72:	9201      	str	r2, [sp, #4]
 800de74:	1e5a      	subs	r2, r3, #1
 800de76:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800de7a:	bf89      	itett	hi
 800de7c:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800de80:	f04f 0900 	movls.w	r9, #0
 800de84:	eb03 0905 	addhi.w	r9, r3, r5
 800de88:	f240 135d 	movwhi	r3, #349	; 0x15d
 800de8c:	bf88      	it	hi
 800de8e:	60a3      	strhi	r3, [r4, #8]
 800de90:	f857 3b1c 	ldr.w	r3, [r7], #28
 800de94:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 800de98:	463d      	mov	r5, r7
 800de9a:	6023      	str	r3, [r4, #0]
 800de9c:	6831      	ldr	r1, [r6, #0]
 800de9e:	ab03      	add	r3, sp, #12
 800dea0:	2202      	movs	r2, #2
 800dea2:	7809      	ldrb	r1, [r1, #0]
 800dea4:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800dea8:	f000 f93e 	bl	800e128 <memchr>
 800deac:	b328      	cbz	r0, 800defa <_scanf_i+0xb6>
 800deae:	f1bb 0f01 	cmp.w	fp, #1
 800deb2:	d159      	bne.n	800df68 <_scanf_i+0x124>
 800deb4:	6862      	ldr	r2, [r4, #4]
 800deb6:	b92a      	cbnz	r2, 800dec4 <_scanf_i+0x80>
 800deb8:	6822      	ldr	r2, [r4, #0]
 800deba:	2308      	movs	r3, #8
 800debc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800dec0:	6063      	str	r3, [r4, #4]
 800dec2:	6022      	str	r2, [r4, #0]
 800dec4:	6822      	ldr	r2, [r4, #0]
 800dec6:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 800deca:	6022      	str	r2, [r4, #0]
 800decc:	68a2      	ldr	r2, [r4, #8]
 800dece:	1e51      	subs	r1, r2, #1
 800ded0:	60a1      	str	r1, [r4, #8]
 800ded2:	b192      	cbz	r2, 800defa <_scanf_i+0xb6>
 800ded4:	6832      	ldr	r2, [r6, #0]
 800ded6:	1c51      	adds	r1, r2, #1
 800ded8:	6031      	str	r1, [r6, #0]
 800deda:	7812      	ldrb	r2, [r2, #0]
 800dedc:	f805 2b01 	strb.w	r2, [r5], #1
 800dee0:	6872      	ldr	r2, [r6, #4]
 800dee2:	3a01      	subs	r2, #1
 800dee4:	2a00      	cmp	r2, #0
 800dee6:	6072      	str	r2, [r6, #4]
 800dee8:	dc07      	bgt.n	800defa <_scanf_i+0xb6>
 800deea:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 800deee:	4631      	mov	r1, r6
 800def0:	4650      	mov	r0, sl
 800def2:	4790      	blx	r2
 800def4:	2800      	cmp	r0, #0
 800def6:	f040 8085 	bne.w	800e004 <_scanf_i+0x1c0>
 800defa:	f10b 0b01 	add.w	fp, fp, #1
 800defe:	f1bb 0f03 	cmp.w	fp, #3
 800df02:	d1cb      	bne.n	800de9c <_scanf_i+0x58>
 800df04:	6863      	ldr	r3, [r4, #4]
 800df06:	b90b      	cbnz	r3, 800df0c <_scanf_i+0xc8>
 800df08:	230a      	movs	r3, #10
 800df0a:	6063      	str	r3, [r4, #4]
 800df0c:	6863      	ldr	r3, [r4, #4]
 800df0e:	f04f 0b00 	mov.w	fp, #0
 800df12:	4944      	ldr	r1, [pc, #272]	; (800e024 <_scanf_i+0x1e0>)
 800df14:	6960      	ldr	r0, [r4, #20]
 800df16:	1ac9      	subs	r1, r1, r3
 800df18:	f000 f886 	bl	800e028 <__sccl>
 800df1c:	68a3      	ldr	r3, [r4, #8]
 800df1e:	6822      	ldr	r2, [r4, #0]
 800df20:	2b00      	cmp	r3, #0
 800df22:	d03d      	beq.n	800dfa0 <_scanf_i+0x15c>
 800df24:	6831      	ldr	r1, [r6, #0]
 800df26:	6960      	ldr	r0, [r4, #20]
 800df28:	f891 c000 	ldrb.w	ip, [r1]
 800df2c:	f810 000c 	ldrb.w	r0, [r0, ip]
 800df30:	2800      	cmp	r0, #0
 800df32:	d035      	beq.n	800dfa0 <_scanf_i+0x15c>
 800df34:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 800df38:	d124      	bne.n	800df84 <_scanf_i+0x140>
 800df3a:	0510      	lsls	r0, r2, #20
 800df3c:	d522      	bpl.n	800df84 <_scanf_i+0x140>
 800df3e:	f10b 0b01 	add.w	fp, fp, #1
 800df42:	f1b9 0f00 	cmp.w	r9, #0
 800df46:	d003      	beq.n	800df50 <_scanf_i+0x10c>
 800df48:	3301      	adds	r3, #1
 800df4a:	f109 39ff 	add.w	r9, r9, #4294967295
 800df4e:	60a3      	str	r3, [r4, #8]
 800df50:	6873      	ldr	r3, [r6, #4]
 800df52:	3b01      	subs	r3, #1
 800df54:	2b00      	cmp	r3, #0
 800df56:	6073      	str	r3, [r6, #4]
 800df58:	dd1b      	ble.n	800df92 <_scanf_i+0x14e>
 800df5a:	6833      	ldr	r3, [r6, #0]
 800df5c:	3301      	adds	r3, #1
 800df5e:	6033      	str	r3, [r6, #0]
 800df60:	68a3      	ldr	r3, [r4, #8]
 800df62:	3b01      	subs	r3, #1
 800df64:	60a3      	str	r3, [r4, #8]
 800df66:	e7d9      	b.n	800df1c <_scanf_i+0xd8>
 800df68:	f1bb 0f02 	cmp.w	fp, #2
 800df6c:	d1ae      	bne.n	800decc <_scanf_i+0x88>
 800df6e:	6822      	ldr	r2, [r4, #0]
 800df70:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 800df74:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800df78:	d1bf      	bne.n	800defa <_scanf_i+0xb6>
 800df7a:	2310      	movs	r3, #16
 800df7c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800df80:	6063      	str	r3, [r4, #4]
 800df82:	e7a2      	b.n	800deca <_scanf_i+0x86>
 800df84:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 800df88:	6022      	str	r2, [r4, #0]
 800df8a:	780b      	ldrb	r3, [r1, #0]
 800df8c:	f805 3b01 	strb.w	r3, [r5], #1
 800df90:	e7de      	b.n	800df50 <_scanf_i+0x10c>
 800df92:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800df96:	4631      	mov	r1, r6
 800df98:	4650      	mov	r0, sl
 800df9a:	4798      	blx	r3
 800df9c:	2800      	cmp	r0, #0
 800df9e:	d0df      	beq.n	800df60 <_scanf_i+0x11c>
 800dfa0:	6823      	ldr	r3, [r4, #0]
 800dfa2:	05d9      	lsls	r1, r3, #23
 800dfa4:	d50d      	bpl.n	800dfc2 <_scanf_i+0x17e>
 800dfa6:	42bd      	cmp	r5, r7
 800dfa8:	d909      	bls.n	800dfbe <_scanf_i+0x17a>
 800dfaa:	f105 39ff 	add.w	r9, r5, #4294967295
 800dfae:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800dfb2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800dfb6:	4632      	mov	r2, r6
 800dfb8:	464d      	mov	r5, r9
 800dfba:	4650      	mov	r0, sl
 800dfbc:	4798      	blx	r3
 800dfbe:	42bd      	cmp	r5, r7
 800dfc0:	d028      	beq.n	800e014 <_scanf_i+0x1d0>
 800dfc2:	6822      	ldr	r2, [r4, #0]
 800dfc4:	f012 0210 	ands.w	r2, r2, #16
 800dfc8:	d113      	bne.n	800dff2 <_scanf_i+0x1ae>
 800dfca:	702a      	strb	r2, [r5, #0]
 800dfcc:	4639      	mov	r1, r7
 800dfce:	6863      	ldr	r3, [r4, #4]
 800dfd0:	4650      	mov	r0, sl
 800dfd2:	9e01      	ldr	r6, [sp, #4]
 800dfd4:	47b0      	blx	r6
 800dfd6:	f8d8 3000 	ldr.w	r3, [r8]
 800dfda:	6821      	ldr	r1, [r4, #0]
 800dfdc:	1d1a      	adds	r2, r3, #4
 800dfde:	f011 0f20 	tst.w	r1, #32
 800dfe2:	f8c8 2000 	str.w	r2, [r8]
 800dfe6:	681b      	ldr	r3, [r3, #0]
 800dfe8:	d00f      	beq.n	800e00a <_scanf_i+0x1c6>
 800dfea:	6018      	str	r0, [r3, #0]
 800dfec:	68e3      	ldr	r3, [r4, #12]
 800dfee:	3301      	adds	r3, #1
 800dff0:	60e3      	str	r3, [r4, #12]
 800dff2:	1bed      	subs	r5, r5, r7
 800dff4:	6923      	ldr	r3, [r4, #16]
 800dff6:	2000      	movs	r0, #0
 800dff8:	445d      	add	r5, fp
 800dffa:	442b      	add	r3, r5
 800dffc:	6123      	str	r3, [r4, #16]
 800dffe:	b007      	add	sp, #28
 800e000:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e004:	f04f 0b00 	mov.w	fp, #0
 800e008:	e7ca      	b.n	800dfa0 <_scanf_i+0x15c>
 800e00a:	07ca      	lsls	r2, r1, #31
 800e00c:	bf4c      	ite	mi
 800e00e:	8018      	strhmi	r0, [r3, #0]
 800e010:	6018      	strpl	r0, [r3, #0]
 800e012:	e7eb      	b.n	800dfec <_scanf_i+0x1a8>
 800e014:	2001      	movs	r0, #1
 800e016:	e7f2      	b.n	800dffe <_scanf_i+0x1ba>
 800e018:	0800e3fc 	.word	0x0800e3fc
 800e01c:	0800e391 	.word	0x0800e391
 800e020:	0800e2a9 	.word	0x0800e2a9
 800e024:	0800e4e4 	.word	0x0800e4e4

0800e028 <__sccl>:
 800e028:	b570      	push	{r4, r5, r6, lr}
 800e02a:	780b      	ldrb	r3, [r1, #0]
 800e02c:	4604      	mov	r4, r0
 800e02e:	3801      	subs	r0, #1
 800e030:	2b5e      	cmp	r3, #94	; 0x5e
 800e032:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 800e036:	bf13      	iteet	ne
 800e038:	1c4a      	addne	r2, r1, #1
 800e03a:	1c8a      	addeq	r2, r1, #2
 800e03c:	784b      	ldrbeq	r3, [r1, #1]
 800e03e:	2100      	movne	r1, #0
 800e040:	bf08      	it	eq
 800e042:	2101      	moveq	r1, #1
 800e044:	f800 1f01 	strb.w	r1, [r0, #1]!
 800e048:	42a8      	cmp	r0, r5
 800e04a:	d1fb      	bne.n	800e044 <__sccl+0x1c>
 800e04c:	b90b      	cbnz	r3, 800e052 <__sccl+0x2a>
 800e04e:	1e50      	subs	r0, r2, #1
 800e050:	bd70      	pop	{r4, r5, r6, pc}
 800e052:	f081 0101 	eor.w	r1, r1, #1
 800e056:	4610      	mov	r0, r2
 800e058:	54e1      	strb	r1, [r4, r3]
 800e05a:	4602      	mov	r2, r0
 800e05c:	f812 5b01 	ldrb.w	r5, [r2], #1
 800e060:	2d2d      	cmp	r5, #45	; 0x2d
 800e062:	d005      	beq.n	800e070 <__sccl+0x48>
 800e064:	2d5d      	cmp	r5, #93	; 0x5d
 800e066:	d016      	beq.n	800e096 <__sccl+0x6e>
 800e068:	2d00      	cmp	r5, #0
 800e06a:	d0f1      	beq.n	800e050 <__sccl+0x28>
 800e06c:	462b      	mov	r3, r5
 800e06e:	e7f2      	b.n	800e056 <__sccl+0x2e>
 800e070:	7846      	ldrb	r6, [r0, #1]
 800e072:	2e5d      	cmp	r6, #93	; 0x5d
 800e074:	d0fa      	beq.n	800e06c <__sccl+0x44>
 800e076:	42b3      	cmp	r3, r6
 800e078:	dcf8      	bgt.n	800e06c <__sccl+0x44>
 800e07a:	3002      	adds	r0, #2
 800e07c:	461a      	mov	r2, r3
 800e07e:	3201      	adds	r2, #1
 800e080:	4296      	cmp	r6, r2
 800e082:	54a1      	strb	r1, [r4, r2]
 800e084:	dcfb      	bgt.n	800e07e <__sccl+0x56>
 800e086:	1af2      	subs	r2, r6, r3
 800e088:	1c5d      	adds	r5, r3, #1
 800e08a:	3a01      	subs	r2, #1
 800e08c:	42b3      	cmp	r3, r6
 800e08e:	bfa8      	it	ge
 800e090:	2200      	movge	r2, #0
 800e092:	18ab      	adds	r3, r5, r2
 800e094:	e7e1      	b.n	800e05a <__sccl+0x32>
 800e096:	4610      	mov	r0, r2
 800e098:	e7da      	b.n	800e050 <__sccl+0x28>

0800e09a <__submore>:
 800e09a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e09e:	460c      	mov	r4, r1
 800e0a0:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800e0a2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e0a6:	4299      	cmp	r1, r3
 800e0a8:	d11a      	bne.n	800e0e0 <__submore+0x46>
 800e0aa:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800e0ae:	f7ff fc11 	bl	800d8d4 <_malloc_r>
 800e0b2:	b918      	cbnz	r0, 800e0bc <__submore+0x22>
 800e0b4:	f04f 30ff 	mov.w	r0, #4294967295
 800e0b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e0bc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e0c0:	6360      	str	r0, [r4, #52]	; 0x34
 800e0c2:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 800e0c6:	63a3      	str	r3, [r4, #56]	; 0x38
 800e0c8:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800e0cc:	7083      	strb	r3, [r0, #2]
 800e0ce:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800e0d2:	7043      	strb	r3, [r0, #1]
 800e0d4:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800e0d8:	7003      	strb	r3, [r0, #0]
 800e0da:	6020      	str	r0, [r4, #0]
 800e0dc:	2000      	movs	r0, #0
 800e0de:	e7eb      	b.n	800e0b8 <__submore+0x1e>
 800e0e0:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800e0e2:	0077      	lsls	r7, r6, #1
 800e0e4:	463a      	mov	r2, r7
 800e0e6:	f000 f82d 	bl	800e144 <_realloc_r>
 800e0ea:	4605      	mov	r5, r0
 800e0ec:	2800      	cmp	r0, #0
 800e0ee:	d0e1      	beq.n	800e0b4 <__submore+0x1a>
 800e0f0:	eb00 0806 	add.w	r8, r0, r6
 800e0f4:	4601      	mov	r1, r0
 800e0f6:	4632      	mov	r2, r6
 800e0f8:	4640      	mov	r0, r8
 800e0fa:	f7ff fb71 	bl	800d7e0 <memcpy>
 800e0fe:	f8c4 8000 	str.w	r8, [r4]
 800e102:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 800e106:	e7e9      	b.n	800e0dc <__submore+0x42>

0800e108 <_sbrk_r>:
 800e108:	b538      	push	{r3, r4, r5, lr}
 800e10a:	2300      	movs	r3, #0
 800e10c:	4d05      	ldr	r5, [pc, #20]	; (800e124 <_sbrk_r+0x1c>)
 800e10e:	4604      	mov	r4, r0
 800e110:	4608      	mov	r0, r1
 800e112:	602b      	str	r3, [r5, #0]
 800e114:	f7f4 f89a 	bl	800224c <_sbrk>
 800e118:	1c43      	adds	r3, r0, #1
 800e11a:	d102      	bne.n	800e122 <_sbrk_r+0x1a>
 800e11c:	682b      	ldr	r3, [r5, #0]
 800e11e:	b103      	cbz	r3, 800e122 <_sbrk_r+0x1a>
 800e120:	6023      	str	r3, [r4, #0]
 800e122:	bd38      	pop	{r3, r4, r5, pc}
 800e124:	200037fc 	.word	0x200037fc

0800e128 <memchr>:
 800e128:	b2c9      	uxtb	r1, r1
 800e12a:	4402      	add	r2, r0
 800e12c:	b510      	push	{r4, lr}
 800e12e:	4290      	cmp	r0, r2
 800e130:	4603      	mov	r3, r0
 800e132:	d101      	bne.n	800e138 <memchr+0x10>
 800e134:	2300      	movs	r3, #0
 800e136:	e003      	b.n	800e140 <memchr+0x18>
 800e138:	781c      	ldrb	r4, [r3, #0]
 800e13a:	3001      	adds	r0, #1
 800e13c:	428c      	cmp	r4, r1
 800e13e:	d1f6      	bne.n	800e12e <memchr+0x6>
 800e140:	4618      	mov	r0, r3
 800e142:	bd10      	pop	{r4, pc}

0800e144 <_realloc_r>:
 800e144:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e148:	4680      	mov	r8, r0
 800e14a:	4614      	mov	r4, r2
 800e14c:	460e      	mov	r6, r1
 800e14e:	b921      	cbnz	r1, 800e15a <_realloc_r+0x16>
 800e150:	4611      	mov	r1, r2
 800e152:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e156:	f7ff bbbd 	b.w	800d8d4 <_malloc_r>
 800e15a:	b92a      	cbnz	r2, 800e168 <_realloc_r+0x24>
 800e15c:	4625      	mov	r5, r4
 800e15e:	f7ff fb4d 	bl	800d7fc <_free_r>
 800e162:	4628      	mov	r0, r5
 800e164:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e168:	f000 f914 	bl	800e394 <_malloc_usable_size_r>
 800e16c:	4284      	cmp	r4, r0
 800e16e:	4607      	mov	r7, r0
 800e170:	d802      	bhi.n	800e178 <_realloc_r+0x34>
 800e172:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800e176:	d812      	bhi.n	800e19e <_realloc_r+0x5a>
 800e178:	4621      	mov	r1, r4
 800e17a:	4640      	mov	r0, r8
 800e17c:	f7ff fbaa 	bl	800d8d4 <_malloc_r>
 800e180:	4605      	mov	r5, r0
 800e182:	2800      	cmp	r0, #0
 800e184:	d0ed      	beq.n	800e162 <_realloc_r+0x1e>
 800e186:	42bc      	cmp	r4, r7
 800e188:	4622      	mov	r2, r4
 800e18a:	4631      	mov	r1, r6
 800e18c:	bf28      	it	cs
 800e18e:	463a      	movcs	r2, r7
 800e190:	f7ff fb26 	bl	800d7e0 <memcpy>
 800e194:	4631      	mov	r1, r6
 800e196:	4640      	mov	r0, r8
 800e198:	f7ff fb30 	bl	800d7fc <_free_r>
 800e19c:	e7e1      	b.n	800e162 <_realloc_r+0x1e>
 800e19e:	4635      	mov	r5, r6
 800e1a0:	e7df      	b.n	800e162 <_realloc_r+0x1e>
	...

0800e1a4 <_strtol_l.constprop.0>:
 800e1a4:	2b01      	cmp	r3, #1
 800e1a6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e1aa:	d001      	beq.n	800e1b0 <_strtol_l.constprop.0+0xc>
 800e1ac:	2b24      	cmp	r3, #36	; 0x24
 800e1ae:	d906      	bls.n	800e1be <_strtol_l.constprop.0+0x1a>
 800e1b0:	f7ff faea 	bl	800d788 <__errno>
 800e1b4:	2316      	movs	r3, #22
 800e1b6:	6003      	str	r3, [r0, #0]
 800e1b8:	2000      	movs	r0, #0
 800e1ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e1be:	460d      	mov	r5, r1
 800e1c0:	f8df c0e0 	ldr.w	ip, [pc, #224]	; 800e2a4 <_strtol_l.constprop.0+0x100>
 800e1c4:	462e      	mov	r6, r5
 800e1c6:	f815 4b01 	ldrb.w	r4, [r5], #1
 800e1ca:	f81c 7004 	ldrb.w	r7, [ip, r4]
 800e1ce:	f017 0708 	ands.w	r7, r7, #8
 800e1d2:	d1f7      	bne.n	800e1c4 <_strtol_l.constprop.0+0x20>
 800e1d4:	2c2d      	cmp	r4, #45	; 0x2d
 800e1d6:	d132      	bne.n	800e23e <_strtol_l.constprop.0+0x9a>
 800e1d8:	782c      	ldrb	r4, [r5, #0]
 800e1da:	2701      	movs	r7, #1
 800e1dc:	1cb5      	adds	r5, r6, #2
 800e1de:	2b00      	cmp	r3, #0
 800e1e0:	d05b      	beq.n	800e29a <_strtol_l.constprop.0+0xf6>
 800e1e2:	2b10      	cmp	r3, #16
 800e1e4:	d109      	bne.n	800e1fa <_strtol_l.constprop.0+0x56>
 800e1e6:	2c30      	cmp	r4, #48	; 0x30
 800e1e8:	d107      	bne.n	800e1fa <_strtol_l.constprop.0+0x56>
 800e1ea:	782c      	ldrb	r4, [r5, #0]
 800e1ec:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800e1f0:	2c58      	cmp	r4, #88	; 0x58
 800e1f2:	d14d      	bne.n	800e290 <_strtol_l.constprop.0+0xec>
 800e1f4:	786c      	ldrb	r4, [r5, #1]
 800e1f6:	2310      	movs	r3, #16
 800e1f8:	3502      	adds	r5, #2
 800e1fa:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800e1fe:	f04f 0e00 	mov.w	lr, #0
 800e202:	f108 38ff 	add.w	r8, r8, #4294967295
 800e206:	4676      	mov	r6, lr
 800e208:	fbb8 f9f3 	udiv	r9, r8, r3
 800e20c:	fb03 8a19 	mls	sl, r3, r9, r8
 800e210:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800e214:	f1bc 0f09 	cmp.w	ip, #9
 800e218:	d816      	bhi.n	800e248 <_strtol_l.constprop.0+0xa4>
 800e21a:	4664      	mov	r4, ip
 800e21c:	42a3      	cmp	r3, r4
 800e21e:	dd24      	ble.n	800e26a <_strtol_l.constprop.0+0xc6>
 800e220:	f1be 3fff 	cmp.w	lr, #4294967295
 800e224:	d008      	beq.n	800e238 <_strtol_l.constprop.0+0x94>
 800e226:	45b1      	cmp	r9, r6
 800e228:	d31c      	bcc.n	800e264 <_strtol_l.constprop.0+0xc0>
 800e22a:	d101      	bne.n	800e230 <_strtol_l.constprop.0+0x8c>
 800e22c:	45a2      	cmp	sl, r4
 800e22e:	db19      	blt.n	800e264 <_strtol_l.constprop.0+0xc0>
 800e230:	fb06 4603 	mla	r6, r6, r3, r4
 800e234:	f04f 0e01 	mov.w	lr, #1
 800e238:	f815 4b01 	ldrb.w	r4, [r5], #1
 800e23c:	e7e8      	b.n	800e210 <_strtol_l.constprop.0+0x6c>
 800e23e:	2c2b      	cmp	r4, #43	; 0x2b
 800e240:	bf04      	itt	eq
 800e242:	782c      	ldrbeq	r4, [r5, #0]
 800e244:	1cb5      	addeq	r5, r6, #2
 800e246:	e7ca      	b.n	800e1de <_strtol_l.constprop.0+0x3a>
 800e248:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800e24c:	f1bc 0f19 	cmp.w	ip, #25
 800e250:	d801      	bhi.n	800e256 <_strtol_l.constprop.0+0xb2>
 800e252:	3c37      	subs	r4, #55	; 0x37
 800e254:	e7e2      	b.n	800e21c <_strtol_l.constprop.0+0x78>
 800e256:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800e25a:	f1bc 0f19 	cmp.w	ip, #25
 800e25e:	d804      	bhi.n	800e26a <_strtol_l.constprop.0+0xc6>
 800e260:	3c57      	subs	r4, #87	; 0x57
 800e262:	e7db      	b.n	800e21c <_strtol_l.constprop.0+0x78>
 800e264:	f04f 3eff 	mov.w	lr, #4294967295
 800e268:	e7e6      	b.n	800e238 <_strtol_l.constprop.0+0x94>
 800e26a:	f1be 3fff 	cmp.w	lr, #4294967295
 800e26e:	d105      	bne.n	800e27c <_strtol_l.constprop.0+0xd8>
 800e270:	2322      	movs	r3, #34	; 0x22
 800e272:	4646      	mov	r6, r8
 800e274:	6003      	str	r3, [r0, #0]
 800e276:	b942      	cbnz	r2, 800e28a <_strtol_l.constprop.0+0xe6>
 800e278:	4630      	mov	r0, r6
 800e27a:	e79e      	b.n	800e1ba <_strtol_l.constprop.0+0x16>
 800e27c:	b107      	cbz	r7, 800e280 <_strtol_l.constprop.0+0xdc>
 800e27e:	4276      	negs	r6, r6
 800e280:	2a00      	cmp	r2, #0
 800e282:	d0f9      	beq.n	800e278 <_strtol_l.constprop.0+0xd4>
 800e284:	f1be 0f00 	cmp.w	lr, #0
 800e288:	d000      	beq.n	800e28c <_strtol_l.constprop.0+0xe8>
 800e28a:	1e69      	subs	r1, r5, #1
 800e28c:	6011      	str	r1, [r2, #0]
 800e28e:	e7f3      	b.n	800e278 <_strtol_l.constprop.0+0xd4>
 800e290:	2430      	movs	r4, #48	; 0x30
 800e292:	2b00      	cmp	r3, #0
 800e294:	d1b1      	bne.n	800e1fa <_strtol_l.constprop.0+0x56>
 800e296:	2308      	movs	r3, #8
 800e298:	e7af      	b.n	800e1fa <_strtol_l.constprop.0+0x56>
 800e29a:	2c30      	cmp	r4, #48	; 0x30
 800e29c:	d0a5      	beq.n	800e1ea <_strtol_l.constprop.0+0x46>
 800e29e:	230a      	movs	r3, #10
 800e2a0:	e7ab      	b.n	800e1fa <_strtol_l.constprop.0+0x56>
 800e2a2:	bf00      	nop
 800e2a4:	0800e4f0 	.word	0x0800e4f0

0800e2a8 <_strtol_r>:
 800e2a8:	f7ff bf7c 	b.w	800e1a4 <_strtol_l.constprop.0>

0800e2ac <_strtoul_l.constprop.0>:
 800e2ac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e2b0:	4686      	mov	lr, r0
 800e2b2:	460d      	mov	r5, r1
 800e2b4:	4f35      	ldr	r7, [pc, #212]	; (800e38c <_strtoul_l.constprop.0+0xe0>)
 800e2b6:	4628      	mov	r0, r5
 800e2b8:	f815 4b01 	ldrb.w	r4, [r5], #1
 800e2bc:	5d3e      	ldrb	r6, [r7, r4]
 800e2be:	f016 0608 	ands.w	r6, r6, #8
 800e2c2:	d1f8      	bne.n	800e2b6 <_strtoul_l.constprop.0+0xa>
 800e2c4:	2c2d      	cmp	r4, #45	; 0x2d
 800e2c6:	d130      	bne.n	800e32a <_strtoul_l.constprop.0+0x7e>
 800e2c8:	782c      	ldrb	r4, [r5, #0]
 800e2ca:	2601      	movs	r6, #1
 800e2cc:	1c85      	adds	r5, r0, #2
 800e2ce:	2b00      	cmp	r3, #0
 800e2d0:	d057      	beq.n	800e382 <_strtoul_l.constprop.0+0xd6>
 800e2d2:	2b10      	cmp	r3, #16
 800e2d4:	d109      	bne.n	800e2ea <_strtoul_l.constprop.0+0x3e>
 800e2d6:	2c30      	cmp	r4, #48	; 0x30
 800e2d8:	d107      	bne.n	800e2ea <_strtoul_l.constprop.0+0x3e>
 800e2da:	7828      	ldrb	r0, [r5, #0]
 800e2dc:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800e2e0:	2858      	cmp	r0, #88	; 0x58
 800e2e2:	d149      	bne.n	800e378 <_strtoul_l.constprop.0+0xcc>
 800e2e4:	786c      	ldrb	r4, [r5, #1]
 800e2e6:	2310      	movs	r3, #16
 800e2e8:	3502      	adds	r5, #2
 800e2ea:	f04f 38ff 	mov.w	r8, #4294967295
 800e2ee:	2700      	movs	r7, #0
 800e2f0:	fbb8 f8f3 	udiv	r8, r8, r3
 800e2f4:	fb03 f908 	mul.w	r9, r3, r8
 800e2f8:	4638      	mov	r0, r7
 800e2fa:	ea6f 0909 	mvn.w	r9, r9
 800e2fe:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800e302:	f1bc 0f09 	cmp.w	ip, #9
 800e306:	d815      	bhi.n	800e334 <_strtoul_l.constprop.0+0x88>
 800e308:	4664      	mov	r4, ip
 800e30a:	42a3      	cmp	r3, r4
 800e30c:	dd23      	ble.n	800e356 <_strtoul_l.constprop.0+0xaa>
 800e30e:	f1b7 3fff 	cmp.w	r7, #4294967295
 800e312:	d007      	beq.n	800e324 <_strtoul_l.constprop.0+0x78>
 800e314:	4580      	cmp	r8, r0
 800e316:	d31b      	bcc.n	800e350 <_strtoul_l.constprop.0+0xa4>
 800e318:	d101      	bne.n	800e31e <_strtoul_l.constprop.0+0x72>
 800e31a:	45a1      	cmp	r9, r4
 800e31c:	db18      	blt.n	800e350 <_strtoul_l.constprop.0+0xa4>
 800e31e:	fb00 4003 	mla	r0, r0, r3, r4
 800e322:	2701      	movs	r7, #1
 800e324:	f815 4b01 	ldrb.w	r4, [r5], #1
 800e328:	e7e9      	b.n	800e2fe <_strtoul_l.constprop.0+0x52>
 800e32a:	2c2b      	cmp	r4, #43	; 0x2b
 800e32c:	bf04      	itt	eq
 800e32e:	782c      	ldrbeq	r4, [r5, #0]
 800e330:	1c85      	addeq	r5, r0, #2
 800e332:	e7cc      	b.n	800e2ce <_strtoul_l.constprop.0+0x22>
 800e334:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800e338:	f1bc 0f19 	cmp.w	ip, #25
 800e33c:	d801      	bhi.n	800e342 <_strtoul_l.constprop.0+0x96>
 800e33e:	3c37      	subs	r4, #55	; 0x37
 800e340:	e7e3      	b.n	800e30a <_strtoul_l.constprop.0+0x5e>
 800e342:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800e346:	f1bc 0f19 	cmp.w	ip, #25
 800e34a:	d804      	bhi.n	800e356 <_strtoul_l.constprop.0+0xaa>
 800e34c:	3c57      	subs	r4, #87	; 0x57
 800e34e:	e7dc      	b.n	800e30a <_strtoul_l.constprop.0+0x5e>
 800e350:	f04f 37ff 	mov.w	r7, #4294967295
 800e354:	e7e6      	b.n	800e324 <_strtoul_l.constprop.0+0x78>
 800e356:	1c7b      	adds	r3, r7, #1
 800e358:	d106      	bne.n	800e368 <_strtoul_l.constprop.0+0xbc>
 800e35a:	2322      	movs	r3, #34	; 0x22
 800e35c:	4638      	mov	r0, r7
 800e35e:	f8ce 3000 	str.w	r3, [lr]
 800e362:	b932      	cbnz	r2, 800e372 <_strtoul_l.constprop.0+0xc6>
 800e364:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e368:	b106      	cbz	r6, 800e36c <_strtoul_l.constprop.0+0xc0>
 800e36a:	4240      	negs	r0, r0
 800e36c:	2a00      	cmp	r2, #0
 800e36e:	d0f9      	beq.n	800e364 <_strtoul_l.constprop.0+0xb8>
 800e370:	b107      	cbz	r7, 800e374 <_strtoul_l.constprop.0+0xc8>
 800e372:	1e69      	subs	r1, r5, #1
 800e374:	6011      	str	r1, [r2, #0]
 800e376:	e7f5      	b.n	800e364 <_strtoul_l.constprop.0+0xb8>
 800e378:	2430      	movs	r4, #48	; 0x30
 800e37a:	2b00      	cmp	r3, #0
 800e37c:	d1b5      	bne.n	800e2ea <_strtoul_l.constprop.0+0x3e>
 800e37e:	2308      	movs	r3, #8
 800e380:	e7b3      	b.n	800e2ea <_strtoul_l.constprop.0+0x3e>
 800e382:	2c30      	cmp	r4, #48	; 0x30
 800e384:	d0a9      	beq.n	800e2da <_strtoul_l.constprop.0+0x2e>
 800e386:	230a      	movs	r3, #10
 800e388:	e7af      	b.n	800e2ea <_strtoul_l.constprop.0+0x3e>
 800e38a:	bf00      	nop
 800e38c:	0800e4f0 	.word	0x0800e4f0

0800e390 <_strtoul_r>:
 800e390:	f7ff bf8c 	b.w	800e2ac <_strtoul_l.constprop.0>

0800e394 <_malloc_usable_size_r>:
 800e394:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e398:	1f18      	subs	r0, r3, #4
 800e39a:	2b00      	cmp	r3, #0
 800e39c:	bfbc      	itt	lt
 800e39e:	580b      	ldrlt	r3, [r1, r0]
 800e3a0:	18c0      	addlt	r0, r0, r3
 800e3a2:	4770      	bx	lr

0800e3a4 <_init>:
 800e3a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e3a6:	bf00      	nop
 800e3a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e3aa:	bc08      	pop	{r3}
 800e3ac:	469e      	mov	lr, r3
 800e3ae:	4770      	bx	lr

0800e3b0 <_fini>:
 800e3b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e3b2:	bf00      	nop
 800e3b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e3b6:	bc08      	pop	{r3}
 800e3b8:	469e      	mov	lr, r3
 800e3ba:	4770      	bx	lr
