
JLBRacing2024.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001ee50  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000008bc  0801f050  0801f050  0002f050  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801f90c  0801f90c  0003010c  2**0
                  CONTENTS
  4 .ARM          00000008  0801f90c  0801f90c  0002f90c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801f914  0801f914  0003010c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801f914  0801f914  0002f914  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801f918  0801f918  0002f918  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000010c  20000000  0801f91c  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000396c  2000010c  0801fa28  0003010c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20003a78  0801fa28  00033a78  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  0003010c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00030142  2**0
                  CONTENTS, READONLY
 13 .debug_info   00050633  00000000  00000000  00030185  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00007a9e  00000000  00000000  000807b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00003b68  00000000  00000000  00088258  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00002dea  00000000  00000000  0008bdc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0003821d  00000000  00000000  0008ebaa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0003e879  00000000  00000000  000c6dc7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    001666d8  00000000  00000000  00105640  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00011b0c  00000000  00000000  0026bd18  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000048  00000000  00000000  0027d824  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	2000010c 	.word	0x2000010c
 800021c:	00000000 	.word	0x00000000
 8000220:	0801f038 	.word	0x0801f038

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000110 	.word	0x20000110
 800023c:	0801f038 	.word	0x0801f038

08000240 <strcmp>:
 8000240:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000244:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000248:	2a01      	cmp	r2, #1
 800024a:	bf28      	it	cs
 800024c:	429a      	cmpcs	r2, r3
 800024e:	d0f7      	beq.n	8000240 <strcmp>
 8000250:	1ad0      	subs	r0, r2, r3
 8000252:	4770      	bx	lr

08000254 <strlen>:
 8000254:	4603      	mov	r3, r0
 8000256:	f813 2b01 	ldrb.w	r2, [r3], #1
 800025a:	2a00      	cmp	r2, #0
 800025c:	d1fb      	bne.n	8000256 <strlen+0x2>
 800025e:	1a18      	subs	r0, r3, r0
 8000260:	3801      	subs	r0, #1
 8000262:	4770      	bx	lr

08000264 <__aeabi_drsub>:
 8000264:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000268:	e002      	b.n	8000270 <__adddf3>
 800026a:	bf00      	nop

0800026c <__aeabi_dsub>:
 800026c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000270 <__adddf3>:
 8000270:	b530      	push	{r4, r5, lr}
 8000272:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000276:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800027a:	ea94 0f05 	teq	r4, r5
 800027e:	bf08      	it	eq
 8000280:	ea90 0f02 	teqeq	r0, r2
 8000284:	bf1f      	itttt	ne
 8000286:	ea54 0c00 	orrsne.w	ip, r4, r0
 800028a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800028e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000292:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000296:	f000 80e2 	beq.w	800045e <__adddf3+0x1ee>
 800029a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800029e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002a2:	bfb8      	it	lt
 80002a4:	426d      	neglt	r5, r5
 80002a6:	dd0c      	ble.n	80002c2 <__adddf3+0x52>
 80002a8:	442c      	add	r4, r5
 80002aa:	ea80 0202 	eor.w	r2, r0, r2
 80002ae:	ea81 0303 	eor.w	r3, r1, r3
 80002b2:	ea82 0000 	eor.w	r0, r2, r0
 80002b6:	ea83 0101 	eor.w	r1, r3, r1
 80002ba:	ea80 0202 	eor.w	r2, r0, r2
 80002be:	ea81 0303 	eor.w	r3, r1, r3
 80002c2:	2d36      	cmp	r5, #54	; 0x36
 80002c4:	bf88      	it	hi
 80002c6:	bd30      	pophi	{r4, r5, pc}
 80002c8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002cc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002d0:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002d4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002d8:	d002      	beq.n	80002e0 <__adddf3+0x70>
 80002da:	4240      	negs	r0, r0
 80002dc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002e0:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002e4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002e8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002ec:	d002      	beq.n	80002f4 <__adddf3+0x84>
 80002ee:	4252      	negs	r2, r2
 80002f0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002f4:	ea94 0f05 	teq	r4, r5
 80002f8:	f000 80a7 	beq.w	800044a <__adddf3+0x1da>
 80002fc:	f1a4 0401 	sub.w	r4, r4, #1
 8000300:	f1d5 0e20 	rsbs	lr, r5, #32
 8000304:	db0d      	blt.n	8000322 <__adddf3+0xb2>
 8000306:	fa02 fc0e 	lsl.w	ip, r2, lr
 800030a:	fa22 f205 	lsr.w	r2, r2, r5
 800030e:	1880      	adds	r0, r0, r2
 8000310:	f141 0100 	adc.w	r1, r1, #0
 8000314:	fa03 f20e 	lsl.w	r2, r3, lr
 8000318:	1880      	adds	r0, r0, r2
 800031a:	fa43 f305 	asr.w	r3, r3, r5
 800031e:	4159      	adcs	r1, r3
 8000320:	e00e      	b.n	8000340 <__adddf3+0xd0>
 8000322:	f1a5 0520 	sub.w	r5, r5, #32
 8000326:	f10e 0e20 	add.w	lr, lr, #32
 800032a:	2a01      	cmp	r2, #1
 800032c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000330:	bf28      	it	cs
 8000332:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	18c0      	adds	r0, r0, r3
 800033c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000340:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000344:	d507      	bpl.n	8000356 <__adddf3+0xe6>
 8000346:	f04f 0e00 	mov.w	lr, #0
 800034a:	f1dc 0c00 	rsbs	ip, ip, #0
 800034e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000352:	eb6e 0101 	sbc.w	r1, lr, r1
 8000356:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800035a:	d31b      	bcc.n	8000394 <__adddf3+0x124>
 800035c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000360:	d30c      	bcc.n	800037c <__adddf3+0x10c>
 8000362:	0849      	lsrs	r1, r1, #1
 8000364:	ea5f 0030 	movs.w	r0, r0, rrx
 8000368:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800036c:	f104 0401 	add.w	r4, r4, #1
 8000370:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000374:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000378:	f080 809a 	bcs.w	80004b0 <__adddf3+0x240>
 800037c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000380:	bf08      	it	eq
 8000382:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000386:	f150 0000 	adcs.w	r0, r0, #0
 800038a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800038e:	ea41 0105 	orr.w	r1, r1, r5
 8000392:	bd30      	pop	{r4, r5, pc}
 8000394:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000398:	4140      	adcs	r0, r0
 800039a:	eb41 0101 	adc.w	r1, r1, r1
 800039e:	3c01      	subs	r4, #1
 80003a0:	bf28      	it	cs
 80003a2:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003a6:	d2e9      	bcs.n	800037c <__adddf3+0x10c>
 80003a8:	f091 0f00 	teq	r1, #0
 80003ac:	bf04      	itt	eq
 80003ae:	4601      	moveq	r1, r0
 80003b0:	2000      	moveq	r0, #0
 80003b2:	fab1 f381 	clz	r3, r1
 80003b6:	bf08      	it	eq
 80003b8:	3320      	addeq	r3, #32
 80003ba:	f1a3 030b 	sub.w	r3, r3, #11
 80003be:	f1b3 0220 	subs.w	r2, r3, #32
 80003c2:	da0c      	bge.n	80003de <__adddf3+0x16e>
 80003c4:	320c      	adds	r2, #12
 80003c6:	dd08      	ble.n	80003da <__adddf3+0x16a>
 80003c8:	f102 0c14 	add.w	ip, r2, #20
 80003cc:	f1c2 020c 	rsb	r2, r2, #12
 80003d0:	fa01 f00c 	lsl.w	r0, r1, ip
 80003d4:	fa21 f102 	lsr.w	r1, r1, r2
 80003d8:	e00c      	b.n	80003f4 <__adddf3+0x184>
 80003da:	f102 0214 	add.w	r2, r2, #20
 80003de:	bfd8      	it	le
 80003e0:	f1c2 0c20 	rsble	ip, r2, #32
 80003e4:	fa01 f102 	lsl.w	r1, r1, r2
 80003e8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003ec:	bfdc      	itt	le
 80003ee:	ea41 010c 	orrle.w	r1, r1, ip
 80003f2:	4090      	lslle	r0, r2
 80003f4:	1ae4      	subs	r4, r4, r3
 80003f6:	bfa2      	ittt	ge
 80003f8:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003fc:	4329      	orrge	r1, r5
 80003fe:	bd30      	popge	{r4, r5, pc}
 8000400:	ea6f 0404 	mvn.w	r4, r4
 8000404:	3c1f      	subs	r4, #31
 8000406:	da1c      	bge.n	8000442 <__adddf3+0x1d2>
 8000408:	340c      	adds	r4, #12
 800040a:	dc0e      	bgt.n	800042a <__adddf3+0x1ba>
 800040c:	f104 0414 	add.w	r4, r4, #20
 8000410:	f1c4 0220 	rsb	r2, r4, #32
 8000414:	fa20 f004 	lsr.w	r0, r0, r4
 8000418:	fa01 f302 	lsl.w	r3, r1, r2
 800041c:	ea40 0003 	orr.w	r0, r0, r3
 8000420:	fa21 f304 	lsr.w	r3, r1, r4
 8000424:	ea45 0103 	orr.w	r1, r5, r3
 8000428:	bd30      	pop	{r4, r5, pc}
 800042a:	f1c4 040c 	rsb	r4, r4, #12
 800042e:	f1c4 0220 	rsb	r2, r4, #32
 8000432:	fa20 f002 	lsr.w	r0, r0, r2
 8000436:	fa01 f304 	lsl.w	r3, r1, r4
 800043a:	ea40 0003 	orr.w	r0, r0, r3
 800043e:	4629      	mov	r1, r5
 8000440:	bd30      	pop	{r4, r5, pc}
 8000442:	fa21 f004 	lsr.w	r0, r1, r4
 8000446:	4629      	mov	r1, r5
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	f094 0f00 	teq	r4, #0
 800044e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000452:	bf06      	itte	eq
 8000454:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000458:	3401      	addeq	r4, #1
 800045a:	3d01      	subne	r5, #1
 800045c:	e74e      	b.n	80002fc <__adddf3+0x8c>
 800045e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000462:	bf18      	it	ne
 8000464:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000468:	d029      	beq.n	80004be <__adddf3+0x24e>
 800046a:	ea94 0f05 	teq	r4, r5
 800046e:	bf08      	it	eq
 8000470:	ea90 0f02 	teqeq	r0, r2
 8000474:	d005      	beq.n	8000482 <__adddf3+0x212>
 8000476:	ea54 0c00 	orrs.w	ip, r4, r0
 800047a:	bf04      	itt	eq
 800047c:	4619      	moveq	r1, r3
 800047e:	4610      	moveq	r0, r2
 8000480:	bd30      	pop	{r4, r5, pc}
 8000482:	ea91 0f03 	teq	r1, r3
 8000486:	bf1e      	ittt	ne
 8000488:	2100      	movne	r1, #0
 800048a:	2000      	movne	r0, #0
 800048c:	bd30      	popne	{r4, r5, pc}
 800048e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000492:	d105      	bne.n	80004a0 <__adddf3+0x230>
 8000494:	0040      	lsls	r0, r0, #1
 8000496:	4149      	adcs	r1, r1
 8000498:	bf28      	it	cs
 800049a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800049e:	bd30      	pop	{r4, r5, pc}
 80004a0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004a4:	bf3c      	itt	cc
 80004a6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004aa:	bd30      	popcc	{r4, r5, pc}
 80004ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004b0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004b4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004b8:	f04f 0000 	mov.w	r0, #0
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004c2:	bf1a      	itte	ne
 80004c4:	4619      	movne	r1, r3
 80004c6:	4610      	movne	r0, r2
 80004c8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004cc:	bf1c      	itt	ne
 80004ce:	460b      	movne	r3, r1
 80004d0:	4602      	movne	r2, r0
 80004d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004d6:	bf06      	itte	eq
 80004d8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004dc:	ea91 0f03 	teqeq	r1, r3
 80004e0:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004e4:	bd30      	pop	{r4, r5, pc}
 80004e6:	bf00      	nop

080004e8 <__aeabi_ui2d>:
 80004e8:	f090 0f00 	teq	r0, #0
 80004ec:	bf04      	itt	eq
 80004ee:	2100      	moveq	r1, #0
 80004f0:	4770      	bxeq	lr
 80004f2:	b530      	push	{r4, r5, lr}
 80004f4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004f8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004fc:	f04f 0500 	mov.w	r5, #0
 8000500:	f04f 0100 	mov.w	r1, #0
 8000504:	e750      	b.n	80003a8 <__adddf3+0x138>
 8000506:	bf00      	nop

08000508 <__aeabi_i2d>:
 8000508:	f090 0f00 	teq	r0, #0
 800050c:	bf04      	itt	eq
 800050e:	2100      	moveq	r1, #0
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000518:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800051c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000520:	bf48      	it	mi
 8000522:	4240      	negmi	r0, r0
 8000524:	f04f 0100 	mov.w	r1, #0
 8000528:	e73e      	b.n	80003a8 <__adddf3+0x138>
 800052a:	bf00      	nop

0800052c <__aeabi_f2d>:
 800052c:	0042      	lsls	r2, r0, #1
 800052e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000532:	ea4f 0131 	mov.w	r1, r1, rrx
 8000536:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800053a:	bf1f      	itttt	ne
 800053c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000540:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000544:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000548:	4770      	bxne	lr
 800054a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800054e:	bf08      	it	eq
 8000550:	4770      	bxeq	lr
 8000552:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000556:	bf04      	itt	eq
 8000558:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000564:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000568:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800056c:	e71c      	b.n	80003a8 <__adddf3+0x138>
 800056e:	bf00      	nop

08000570 <__aeabi_ul2d>:
 8000570:	ea50 0201 	orrs.w	r2, r0, r1
 8000574:	bf08      	it	eq
 8000576:	4770      	bxeq	lr
 8000578:	b530      	push	{r4, r5, lr}
 800057a:	f04f 0500 	mov.w	r5, #0
 800057e:	e00a      	b.n	8000596 <__aeabi_l2d+0x16>

08000580 <__aeabi_l2d>:
 8000580:	ea50 0201 	orrs.w	r2, r0, r1
 8000584:	bf08      	it	eq
 8000586:	4770      	bxeq	lr
 8000588:	b530      	push	{r4, r5, lr}
 800058a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800058e:	d502      	bpl.n	8000596 <__aeabi_l2d+0x16>
 8000590:	4240      	negs	r0, r0
 8000592:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000596:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800059a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800059e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005a2:	f43f aed8 	beq.w	8000356 <__adddf3+0xe6>
 80005a6:	f04f 0203 	mov.w	r2, #3
 80005aa:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ae:	bf18      	it	ne
 80005b0:	3203      	addne	r2, #3
 80005b2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005b6:	bf18      	it	ne
 80005b8:	3203      	addne	r2, #3
 80005ba:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005be:	f1c2 0320 	rsb	r3, r2, #32
 80005c2:	fa00 fc03 	lsl.w	ip, r0, r3
 80005c6:	fa20 f002 	lsr.w	r0, r0, r2
 80005ca:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ce:	ea40 000e 	orr.w	r0, r0, lr
 80005d2:	fa21 f102 	lsr.w	r1, r1, r2
 80005d6:	4414      	add	r4, r2
 80005d8:	e6bd      	b.n	8000356 <__adddf3+0xe6>
 80005da:	bf00      	nop

080005dc <__aeabi_dmul>:
 80005dc:	b570      	push	{r4, r5, r6, lr}
 80005de:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005e2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005e6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005ea:	bf1d      	ittte	ne
 80005ec:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005f0:	ea94 0f0c 	teqne	r4, ip
 80005f4:	ea95 0f0c 	teqne	r5, ip
 80005f8:	f000 f8de 	bleq	80007b8 <__aeabi_dmul+0x1dc>
 80005fc:	442c      	add	r4, r5
 80005fe:	ea81 0603 	eor.w	r6, r1, r3
 8000602:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000606:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800060a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800060e:	bf18      	it	ne
 8000610:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000618:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800061c:	d038      	beq.n	8000690 <__aeabi_dmul+0xb4>
 800061e:	fba0 ce02 	umull	ip, lr, r0, r2
 8000622:	f04f 0500 	mov.w	r5, #0
 8000626:	fbe1 e502 	umlal	lr, r5, r1, r2
 800062a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800062e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000632:	f04f 0600 	mov.w	r6, #0
 8000636:	fbe1 5603 	umlal	r5, r6, r1, r3
 800063a:	f09c 0f00 	teq	ip, #0
 800063e:	bf18      	it	ne
 8000640:	f04e 0e01 	orrne.w	lr, lr, #1
 8000644:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000648:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 800064c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000650:	d204      	bcs.n	800065c <__aeabi_dmul+0x80>
 8000652:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000656:	416d      	adcs	r5, r5
 8000658:	eb46 0606 	adc.w	r6, r6, r6
 800065c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000660:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000664:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000668:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800066c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000670:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000674:	bf88      	it	hi
 8000676:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800067a:	d81e      	bhi.n	80006ba <__aeabi_dmul+0xde>
 800067c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000680:	bf08      	it	eq
 8000682:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000686:	f150 0000 	adcs.w	r0, r0, #0
 800068a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800068e:	bd70      	pop	{r4, r5, r6, pc}
 8000690:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000694:	ea46 0101 	orr.w	r1, r6, r1
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	ea81 0103 	eor.w	r1, r1, r3
 80006a0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006a4:	bfc2      	ittt	gt
 80006a6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006aa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ae:	bd70      	popgt	{r4, r5, r6, pc}
 80006b0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006b4:	f04f 0e00 	mov.w	lr, #0
 80006b8:	3c01      	subs	r4, #1
 80006ba:	f300 80ab 	bgt.w	8000814 <__aeabi_dmul+0x238>
 80006be:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006c2:	bfde      	ittt	le
 80006c4:	2000      	movle	r0, #0
 80006c6:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006ca:	bd70      	pople	{r4, r5, r6, pc}
 80006cc:	f1c4 0400 	rsb	r4, r4, #0
 80006d0:	3c20      	subs	r4, #32
 80006d2:	da35      	bge.n	8000740 <__aeabi_dmul+0x164>
 80006d4:	340c      	adds	r4, #12
 80006d6:	dc1b      	bgt.n	8000710 <__aeabi_dmul+0x134>
 80006d8:	f104 0414 	add.w	r4, r4, #20
 80006dc:	f1c4 0520 	rsb	r5, r4, #32
 80006e0:	fa00 f305 	lsl.w	r3, r0, r5
 80006e4:	fa20 f004 	lsr.w	r0, r0, r4
 80006e8:	fa01 f205 	lsl.w	r2, r1, r5
 80006ec:	ea40 0002 	orr.w	r0, r0, r2
 80006f0:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006f4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006f8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006fc:	fa21 f604 	lsr.w	r6, r1, r4
 8000700:	eb42 0106 	adc.w	r1, r2, r6
 8000704:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000708:	bf08      	it	eq
 800070a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800070e:	bd70      	pop	{r4, r5, r6, pc}
 8000710:	f1c4 040c 	rsb	r4, r4, #12
 8000714:	f1c4 0520 	rsb	r5, r4, #32
 8000718:	fa00 f304 	lsl.w	r3, r0, r4
 800071c:	fa20 f005 	lsr.w	r0, r0, r5
 8000720:	fa01 f204 	lsl.w	r2, r1, r4
 8000724:	ea40 0002 	orr.w	r0, r0, r2
 8000728:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800072c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000730:	f141 0100 	adc.w	r1, r1, #0
 8000734:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000738:	bf08      	it	eq
 800073a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073e:	bd70      	pop	{r4, r5, r6, pc}
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f205 	lsl.w	r2, r0, r5
 8000748:	ea4e 0e02 	orr.w	lr, lr, r2
 800074c:	fa20 f304 	lsr.w	r3, r0, r4
 8000750:	fa01 f205 	lsl.w	r2, r1, r5
 8000754:	ea43 0302 	orr.w	r3, r3, r2
 8000758:	fa21 f004 	lsr.w	r0, r1, r4
 800075c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000760:	fa21 f204 	lsr.w	r2, r1, r4
 8000764:	ea20 0002 	bic.w	r0, r0, r2
 8000768:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800076c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000770:	bf08      	it	eq
 8000772:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000776:	bd70      	pop	{r4, r5, r6, pc}
 8000778:	f094 0f00 	teq	r4, #0
 800077c:	d10f      	bne.n	800079e <__aeabi_dmul+0x1c2>
 800077e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000782:	0040      	lsls	r0, r0, #1
 8000784:	eb41 0101 	adc.w	r1, r1, r1
 8000788:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800078c:	bf08      	it	eq
 800078e:	3c01      	subeq	r4, #1
 8000790:	d0f7      	beq.n	8000782 <__aeabi_dmul+0x1a6>
 8000792:	ea41 0106 	orr.w	r1, r1, r6
 8000796:	f095 0f00 	teq	r5, #0
 800079a:	bf18      	it	ne
 800079c:	4770      	bxne	lr
 800079e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007a2:	0052      	lsls	r2, r2, #1
 80007a4:	eb43 0303 	adc.w	r3, r3, r3
 80007a8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007ac:	bf08      	it	eq
 80007ae:	3d01      	subeq	r5, #1
 80007b0:	d0f7      	beq.n	80007a2 <__aeabi_dmul+0x1c6>
 80007b2:	ea43 0306 	orr.w	r3, r3, r6
 80007b6:	4770      	bx	lr
 80007b8:	ea94 0f0c 	teq	r4, ip
 80007bc:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007c0:	bf18      	it	ne
 80007c2:	ea95 0f0c 	teqne	r5, ip
 80007c6:	d00c      	beq.n	80007e2 <__aeabi_dmul+0x206>
 80007c8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007cc:	bf18      	it	ne
 80007ce:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007d2:	d1d1      	bne.n	8000778 <__aeabi_dmul+0x19c>
 80007d4:	ea81 0103 	eor.w	r1, r1, r3
 80007d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007dc:	f04f 0000 	mov.w	r0, #0
 80007e0:	bd70      	pop	{r4, r5, r6, pc}
 80007e2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e6:	bf06      	itte	eq
 80007e8:	4610      	moveq	r0, r2
 80007ea:	4619      	moveq	r1, r3
 80007ec:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007f0:	d019      	beq.n	8000826 <__aeabi_dmul+0x24a>
 80007f2:	ea94 0f0c 	teq	r4, ip
 80007f6:	d102      	bne.n	80007fe <__aeabi_dmul+0x222>
 80007f8:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007fc:	d113      	bne.n	8000826 <__aeabi_dmul+0x24a>
 80007fe:	ea95 0f0c 	teq	r5, ip
 8000802:	d105      	bne.n	8000810 <__aeabi_dmul+0x234>
 8000804:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000808:	bf1c      	itt	ne
 800080a:	4610      	movne	r0, r2
 800080c:	4619      	movne	r1, r3
 800080e:	d10a      	bne.n	8000826 <__aeabi_dmul+0x24a>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800081c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000820:	f04f 0000 	mov.w	r0, #0
 8000824:	bd70      	pop	{r4, r5, r6, pc}
 8000826:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800082a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800082e:	bd70      	pop	{r4, r5, r6, pc}

08000830 <__aeabi_ddiv>:
 8000830:	b570      	push	{r4, r5, r6, lr}
 8000832:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000836:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800083a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800083e:	bf1d      	ittte	ne
 8000840:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000844:	ea94 0f0c 	teqne	r4, ip
 8000848:	ea95 0f0c 	teqne	r5, ip
 800084c:	f000 f8a7 	bleq	800099e <__aeabi_ddiv+0x16e>
 8000850:	eba4 0405 	sub.w	r4, r4, r5
 8000854:	ea81 0e03 	eor.w	lr, r1, r3
 8000858:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800085c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000860:	f000 8088 	beq.w	8000974 <__aeabi_ddiv+0x144>
 8000864:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000868:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 800086c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000870:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000874:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000878:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 800087c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000880:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000884:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000888:	429d      	cmp	r5, r3
 800088a:	bf08      	it	eq
 800088c:	4296      	cmpeq	r6, r2
 800088e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000892:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000896:	d202      	bcs.n	800089e <__aeabi_ddiv+0x6e>
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	1ab6      	subs	r6, r6, r2
 80008a0:	eb65 0503 	sbc.w	r5, r5, r3
 80008a4:	085b      	lsrs	r3, r3, #1
 80008a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008aa:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ae:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008b2:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ba:	bf22      	ittt	cs
 80008bc:	1ab6      	subcs	r6, r6, r2
 80008be:	4675      	movcs	r5, lr
 80008c0:	ea40 000c 	orrcs.w	r0, r0, ip
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ce:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d2:	bf22      	ittt	cs
 80008d4:	1ab6      	subcs	r6, r6, r2
 80008d6:	4675      	movcs	r5, lr
 80008d8:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008dc:	085b      	lsrs	r3, r3, #1
 80008de:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e2:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ea:	bf22      	ittt	cs
 80008ec:	1ab6      	subcs	r6, r6, r2
 80008ee:	4675      	movcs	r5, lr
 80008f0:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fe:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000902:	bf22      	ittt	cs
 8000904:	1ab6      	subcs	r6, r6, r2
 8000906:	4675      	movcs	r5, lr
 8000908:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800090c:	ea55 0e06 	orrs.w	lr, r5, r6
 8000910:	d018      	beq.n	8000944 <__aeabi_ddiv+0x114>
 8000912:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000916:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800091a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800091e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000922:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000926:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800092a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800092e:	d1c0      	bne.n	80008b2 <__aeabi_ddiv+0x82>
 8000930:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000934:	d10b      	bne.n	800094e <__aeabi_ddiv+0x11e>
 8000936:	ea41 0100 	orr.w	r1, r1, r0
 800093a:	f04f 0000 	mov.w	r0, #0
 800093e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000942:	e7b6      	b.n	80008b2 <__aeabi_ddiv+0x82>
 8000944:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000948:	bf04      	itt	eq
 800094a:	4301      	orreq	r1, r0
 800094c:	2000      	moveq	r0, #0
 800094e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000952:	bf88      	it	hi
 8000954:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000958:	f63f aeaf 	bhi.w	80006ba <__aeabi_dmul+0xde>
 800095c:	ebb5 0c03 	subs.w	ip, r5, r3
 8000960:	bf04      	itt	eq
 8000962:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000966:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800096a:	f150 0000 	adcs.w	r0, r0, #0
 800096e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000972:	bd70      	pop	{r4, r5, r6, pc}
 8000974:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000978:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 800097c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000980:	bfc2      	ittt	gt
 8000982:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000986:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800098a:	bd70      	popgt	{r4, r5, r6, pc}
 800098c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000990:	f04f 0e00 	mov.w	lr, #0
 8000994:	3c01      	subs	r4, #1
 8000996:	e690      	b.n	80006ba <__aeabi_dmul+0xde>
 8000998:	ea45 0e06 	orr.w	lr, r5, r6
 800099c:	e68d      	b.n	80006ba <__aeabi_dmul+0xde>
 800099e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009a2:	ea94 0f0c 	teq	r4, ip
 80009a6:	bf08      	it	eq
 80009a8:	ea95 0f0c 	teqeq	r5, ip
 80009ac:	f43f af3b 	beq.w	8000826 <__aeabi_dmul+0x24a>
 80009b0:	ea94 0f0c 	teq	r4, ip
 80009b4:	d10a      	bne.n	80009cc <__aeabi_ddiv+0x19c>
 80009b6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009ba:	f47f af34 	bne.w	8000826 <__aeabi_dmul+0x24a>
 80009be:	ea95 0f0c 	teq	r5, ip
 80009c2:	f47f af25 	bne.w	8000810 <__aeabi_dmul+0x234>
 80009c6:	4610      	mov	r0, r2
 80009c8:	4619      	mov	r1, r3
 80009ca:	e72c      	b.n	8000826 <__aeabi_dmul+0x24a>
 80009cc:	ea95 0f0c 	teq	r5, ip
 80009d0:	d106      	bne.n	80009e0 <__aeabi_ddiv+0x1b0>
 80009d2:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009d6:	f43f aefd 	beq.w	80007d4 <__aeabi_dmul+0x1f8>
 80009da:	4610      	mov	r0, r2
 80009dc:	4619      	mov	r1, r3
 80009de:	e722      	b.n	8000826 <__aeabi_dmul+0x24a>
 80009e0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009e4:	bf18      	it	ne
 80009e6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009ea:	f47f aec5 	bne.w	8000778 <__aeabi_dmul+0x19c>
 80009ee:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009f2:	f47f af0d 	bne.w	8000810 <__aeabi_dmul+0x234>
 80009f6:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009fa:	f47f aeeb 	bne.w	80007d4 <__aeabi_dmul+0x1f8>
 80009fe:	e712      	b.n	8000826 <__aeabi_dmul+0x24a>

08000a00 <__gedf2>:
 8000a00:	f04f 3cff 	mov.w	ip, #4294967295
 8000a04:	e006      	b.n	8000a14 <__cmpdf2+0x4>
 8000a06:	bf00      	nop

08000a08 <__ledf2>:
 8000a08:	f04f 0c01 	mov.w	ip, #1
 8000a0c:	e002      	b.n	8000a14 <__cmpdf2+0x4>
 8000a0e:	bf00      	nop

08000a10 <__cmpdf2>:
 8000a10:	f04f 0c01 	mov.w	ip, #1
 8000a14:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a18:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a20:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a24:	bf18      	it	ne
 8000a26:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a2a:	d01b      	beq.n	8000a64 <__cmpdf2+0x54>
 8000a2c:	b001      	add	sp, #4
 8000a2e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a32:	bf0c      	ite	eq
 8000a34:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a38:	ea91 0f03 	teqne	r1, r3
 8000a3c:	bf02      	ittt	eq
 8000a3e:	ea90 0f02 	teqeq	r0, r2
 8000a42:	2000      	moveq	r0, #0
 8000a44:	4770      	bxeq	lr
 8000a46:	f110 0f00 	cmn.w	r0, #0
 8000a4a:	ea91 0f03 	teq	r1, r3
 8000a4e:	bf58      	it	pl
 8000a50:	4299      	cmppl	r1, r3
 8000a52:	bf08      	it	eq
 8000a54:	4290      	cmpeq	r0, r2
 8000a56:	bf2c      	ite	cs
 8000a58:	17d8      	asrcs	r0, r3, #31
 8000a5a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a5e:	f040 0001 	orr.w	r0, r0, #1
 8000a62:	4770      	bx	lr
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	d102      	bne.n	8000a74 <__cmpdf2+0x64>
 8000a6e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a72:	d107      	bne.n	8000a84 <__cmpdf2+0x74>
 8000a74:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	d1d6      	bne.n	8000a2c <__cmpdf2+0x1c>
 8000a7e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a82:	d0d3      	beq.n	8000a2c <__cmpdf2+0x1c>
 8000a84:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a88:	4770      	bx	lr
 8000a8a:	bf00      	nop

08000a8c <__aeabi_cdrcmple>:
 8000a8c:	4684      	mov	ip, r0
 8000a8e:	4610      	mov	r0, r2
 8000a90:	4662      	mov	r2, ip
 8000a92:	468c      	mov	ip, r1
 8000a94:	4619      	mov	r1, r3
 8000a96:	4663      	mov	r3, ip
 8000a98:	e000      	b.n	8000a9c <__aeabi_cdcmpeq>
 8000a9a:	bf00      	nop

08000a9c <__aeabi_cdcmpeq>:
 8000a9c:	b501      	push	{r0, lr}
 8000a9e:	f7ff ffb7 	bl	8000a10 <__cmpdf2>
 8000aa2:	2800      	cmp	r0, #0
 8000aa4:	bf48      	it	mi
 8000aa6:	f110 0f00 	cmnmi.w	r0, #0
 8000aaa:	bd01      	pop	{r0, pc}

08000aac <__aeabi_dcmpeq>:
 8000aac:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab0:	f7ff fff4 	bl	8000a9c <__aeabi_cdcmpeq>
 8000ab4:	bf0c      	ite	eq
 8000ab6:	2001      	moveq	r0, #1
 8000ab8:	2000      	movne	r0, #0
 8000aba:	f85d fb08 	ldr.w	pc, [sp], #8
 8000abe:	bf00      	nop

08000ac0 <__aeabi_dcmplt>:
 8000ac0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac4:	f7ff ffea 	bl	8000a9c <__aeabi_cdcmpeq>
 8000ac8:	bf34      	ite	cc
 8000aca:	2001      	movcc	r0, #1
 8000acc:	2000      	movcs	r0, #0
 8000ace:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ad2:	bf00      	nop

08000ad4 <__aeabi_dcmple>:
 8000ad4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad8:	f7ff ffe0 	bl	8000a9c <__aeabi_cdcmpeq>
 8000adc:	bf94      	ite	ls
 8000ade:	2001      	movls	r0, #1
 8000ae0:	2000      	movhi	r0, #0
 8000ae2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_dcmpge>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff ffce 	bl	8000a8c <__aeabi_cdrcmple>
 8000af0:	bf94      	ite	ls
 8000af2:	2001      	movls	r0, #1
 8000af4:	2000      	movhi	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmpgt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffc4 	bl	8000a8c <__aeabi_cdrcmple>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmpun>:
 8000b10:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b14:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b18:	d102      	bne.n	8000b20 <__aeabi_dcmpun+0x10>
 8000b1a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b1e:	d10a      	bne.n	8000b36 <__aeabi_dcmpun+0x26>
 8000b20:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b24:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b28:	d102      	bne.n	8000b30 <__aeabi_dcmpun+0x20>
 8000b2a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b2e:	d102      	bne.n	8000b36 <__aeabi_dcmpun+0x26>
 8000b30:	f04f 0000 	mov.w	r0, #0
 8000b34:	4770      	bx	lr
 8000b36:	f04f 0001 	mov.w	r0, #1
 8000b3a:	4770      	bx	lr

08000b3c <__aeabi_d2f>:
 8000b3c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b40:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b44:	bf24      	itt	cs
 8000b46:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b4a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b4e:	d90d      	bls.n	8000b6c <__aeabi_d2f+0x30>
 8000b50:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b54:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b58:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b5c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b60:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b64:	bf08      	it	eq
 8000b66:	f020 0001 	biceq.w	r0, r0, #1
 8000b6a:	4770      	bx	lr
 8000b6c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b70:	d121      	bne.n	8000bb6 <__aeabi_d2f+0x7a>
 8000b72:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b76:	bfbc      	itt	lt
 8000b78:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b7c:	4770      	bxlt	lr
 8000b7e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b82:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b86:	f1c2 0218 	rsb	r2, r2, #24
 8000b8a:	f1c2 0c20 	rsb	ip, r2, #32
 8000b8e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b92:	fa20 f002 	lsr.w	r0, r0, r2
 8000b96:	bf18      	it	ne
 8000b98:	f040 0001 	orrne.w	r0, r0, #1
 8000b9c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ba4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ba8:	ea40 000c 	orr.w	r0, r0, ip
 8000bac:	fa23 f302 	lsr.w	r3, r3, r2
 8000bb0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bb4:	e7cc      	b.n	8000b50 <__aeabi_d2f+0x14>
 8000bb6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bba:	d107      	bne.n	8000bcc <__aeabi_d2f+0x90>
 8000bbc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bc0:	bf1e      	ittt	ne
 8000bc2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000bc6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000bca:	4770      	bxne	lr
 8000bcc:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000bd0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000bd4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bd8:	4770      	bx	lr
 8000bda:	bf00      	nop

08000bdc <__aeabi_uldivmod>:
 8000bdc:	b953      	cbnz	r3, 8000bf4 <__aeabi_uldivmod+0x18>
 8000bde:	b94a      	cbnz	r2, 8000bf4 <__aeabi_uldivmod+0x18>
 8000be0:	2900      	cmp	r1, #0
 8000be2:	bf08      	it	eq
 8000be4:	2800      	cmpeq	r0, #0
 8000be6:	bf1c      	itt	ne
 8000be8:	f04f 31ff 	movne.w	r1, #4294967295
 8000bec:	f04f 30ff 	movne.w	r0, #4294967295
 8000bf0:	f000 b982 	b.w	8000ef8 <__aeabi_idiv0>
 8000bf4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bf8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bfc:	f000 f806 	bl	8000c0c <__udivmoddi4>
 8000c00:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c04:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c08:	b004      	add	sp, #16
 8000c0a:	4770      	bx	lr

08000c0c <__udivmoddi4>:
 8000c0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000c10:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8000c12:	460d      	mov	r5, r1
 8000c14:	4604      	mov	r4, r0
 8000c16:	460f      	mov	r7, r1
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d146      	bne.n	8000caa <__udivmoddi4+0x9e>
 8000c1c:	428a      	cmp	r2, r1
 8000c1e:	4694      	mov	ip, r2
 8000c20:	d95e      	bls.n	8000ce0 <__udivmoddi4+0xd4>
 8000c22:	fab2 f382 	clz	r3, r2
 8000c26:	b143      	cbz	r3, 8000c3a <__udivmoddi4+0x2e>
 8000c28:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c2c:	f1c3 0220 	rsb	r2, r3, #32
 8000c30:	409f      	lsls	r7, r3
 8000c32:	409c      	lsls	r4, r3
 8000c34:	fa20 f202 	lsr.w	r2, r0, r2
 8000c38:	4317      	orrs	r7, r2
 8000c3a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000c3e:	fa1f f58c 	uxth.w	r5, ip
 8000c42:	0c22      	lsrs	r2, r4, #16
 8000c44:	fbb7 f1fe 	udiv	r1, r7, lr
 8000c48:	fb0e 7711 	mls	r7, lr, r1, r7
 8000c4c:	fb01 f005 	mul.w	r0, r1, r5
 8000c50:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c54:	4290      	cmp	r0, r2
 8000c56:	d908      	bls.n	8000c6a <__udivmoddi4+0x5e>
 8000c58:	eb1c 0202 	adds.w	r2, ip, r2
 8000c5c:	f101 37ff 	add.w	r7, r1, #4294967295
 8000c60:	d202      	bcs.n	8000c68 <__udivmoddi4+0x5c>
 8000c62:	4290      	cmp	r0, r2
 8000c64:	f200 8134 	bhi.w	8000ed0 <__udivmoddi4+0x2c4>
 8000c68:	4639      	mov	r1, r7
 8000c6a:	1a12      	subs	r2, r2, r0
 8000c6c:	b2a4      	uxth	r4, r4
 8000c6e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c72:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c76:	fb00 f505 	mul.w	r5, r0, r5
 8000c7a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c7e:	42a5      	cmp	r5, r4
 8000c80:	d908      	bls.n	8000c94 <__udivmoddi4+0x88>
 8000c82:	eb1c 0404 	adds.w	r4, ip, r4
 8000c86:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c8a:	d202      	bcs.n	8000c92 <__udivmoddi4+0x86>
 8000c8c:	42a5      	cmp	r5, r4
 8000c8e:	f200 8119 	bhi.w	8000ec4 <__udivmoddi4+0x2b8>
 8000c92:	4610      	mov	r0, r2
 8000c94:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c98:	1b64      	subs	r4, r4, r5
 8000c9a:	2100      	movs	r1, #0
 8000c9c:	b11e      	cbz	r6, 8000ca6 <__udivmoddi4+0x9a>
 8000c9e:	40dc      	lsrs	r4, r3
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	e9c6 4300 	strd	r4, r3, [r6]
 8000ca6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000caa:	428b      	cmp	r3, r1
 8000cac:	d908      	bls.n	8000cc0 <__udivmoddi4+0xb4>
 8000cae:	2e00      	cmp	r6, #0
 8000cb0:	f000 80fc 	beq.w	8000eac <__udivmoddi4+0x2a0>
 8000cb4:	2100      	movs	r1, #0
 8000cb6:	e9c6 0500 	strd	r0, r5, [r6]
 8000cba:	4608      	mov	r0, r1
 8000cbc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000cc0:	fab3 f183 	clz	r1, r3
 8000cc4:	2900      	cmp	r1, #0
 8000cc6:	d14c      	bne.n	8000d62 <__udivmoddi4+0x156>
 8000cc8:	42ab      	cmp	r3, r5
 8000cca:	f0c0 80f2 	bcc.w	8000eb2 <__udivmoddi4+0x2a6>
 8000cce:	4282      	cmp	r2, r0
 8000cd0:	f240 80ef 	bls.w	8000eb2 <__udivmoddi4+0x2a6>
 8000cd4:	4608      	mov	r0, r1
 8000cd6:	2e00      	cmp	r6, #0
 8000cd8:	d0e5      	beq.n	8000ca6 <__udivmoddi4+0x9a>
 8000cda:	e9c6 4700 	strd	r4, r7, [r6]
 8000cde:	e7e2      	b.n	8000ca6 <__udivmoddi4+0x9a>
 8000ce0:	b902      	cbnz	r2, 8000ce4 <__udivmoddi4+0xd8>
 8000ce2:	deff      	udf	#255	; 0xff
 8000ce4:	fab2 f382 	clz	r3, r2
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	f040 809f 	bne.w	8000e2c <__udivmoddi4+0x220>
 8000cee:	1a8a      	subs	r2, r1, r2
 8000cf0:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000cf4:	fa1f f78c 	uxth.w	r7, ip
 8000cf8:	2101      	movs	r1, #1
 8000cfa:	fbb2 f5fe 	udiv	r5, r2, lr
 8000cfe:	fb0e 2015 	mls	r0, lr, r5, r2
 8000d02:	0c22      	lsrs	r2, r4, #16
 8000d04:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000d08:	fb07 f005 	mul.w	r0, r7, r5
 8000d0c:	4290      	cmp	r0, r2
 8000d0e:	d90f      	bls.n	8000d30 <__udivmoddi4+0x124>
 8000d10:	eb1c 0202 	adds.w	r2, ip, r2
 8000d14:	f105 38ff 	add.w	r8, r5, #4294967295
 8000d18:	bf2c      	ite	cs
 8000d1a:	f04f 0901 	movcs.w	r9, #1
 8000d1e:	f04f 0900 	movcc.w	r9, #0
 8000d22:	4290      	cmp	r0, r2
 8000d24:	d903      	bls.n	8000d2e <__udivmoddi4+0x122>
 8000d26:	f1b9 0f00 	cmp.w	r9, #0
 8000d2a:	f000 80ce 	beq.w	8000eca <__udivmoddi4+0x2be>
 8000d2e:	4645      	mov	r5, r8
 8000d30:	1a12      	subs	r2, r2, r0
 8000d32:	b2a4      	uxth	r4, r4
 8000d34:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d38:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d3c:	fb00 f707 	mul.w	r7, r0, r7
 8000d40:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d44:	42a7      	cmp	r7, r4
 8000d46:	d908      	bls.n	8000d5a <__udivmoddi4+0x14e>
 8000d48:	eb1c 0404 	adds.w	r4, ip, r4
 8000d4c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d50:	d202      	bcs.n	8000d58 <__udivmoddi4+0x14c>
 8000d52:	42a7      	cmp	r7, r4
 8000d54:	f200 80b3 	bhi.w	8000ebe <__udivmoddi4+0x2b2>
 8000d58:	4610      	mov	r0, r2
 8000d5a:	1be4      	subs	r4, r4, r7
 8000d5c:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000d60:	e79c      	b.n	8000c9c <__udivmoddi4+0x90>
 8000d62:	f1c1 0420 	rsb	r4, r1, #32
 8000d66:	408b      	lsls	r3, r1
 8000d68:	fa05 fc01 	lsl.w	ip, r5, r1
 8000d6c:	fa22 f704 	lsr.w	r7, r2, r4
 8000d70:	40e5      	lsrs	r5, r4
 8000d72:	408a      	lsls	r2, r1
 8000d74:	431f      	orrs	r7, r3
 8000d76:	fa20 f304 	lsr.w	r3, r0, r4
 8000d7a:	4088      	lsls	r0, r1
 8000d7c:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000d80:	ea43 030c 	orr.w	r3, r3, ip
 8000d84:	fa1f fc87 	uxth.w	ip, r7
 8000d88:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d8c:	fbb5 fef8 	udiv	lr, r5, r8
 8000d90:	fb08 551e 	mls	r5, r8, lr, r5
 8000d94:	ea49 4505 	orr.w	r5, r9, r5, lsl #16
 8000d98:	fb0e f90c 	mul.w	r9, lr, ip
 8000d9c:	45a9      	cmp	r9, r5
 8000d9e:	d90e      	bls.n	8000dbe <__udivmoddi4+0x1b2>
 8000da0:	197d      	adds	r5, r7, r5
 8000da2:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000da6:	bf2c      	ite	cs
 8000da8:	f04f 0b01 	movcs.w	fp, #1
 8000dac:	f04f 0b00 	movcc.w	fp, #0
 8000db0:	45a9      	cmp	r9, r5
 8000db2:	d903      	bls.n	8000dbc <__udivmoddi4+0x1b0>
 8000db4:	f1bb 0f00 	cmp.w	fp, #0
 8000db8:	f000 808d 	beq.w	8000ed6 <__udivmoddi4+0x2ca>
 8000dbc:	46d6      	mov	lr, sl
 8000dbe:	eba5 0509 	sub.w	r5, r5, r9
 8000dc2:	fa1f f983 	uxth.w	r9, r3
 8000dc6:	fbb5 f3f8 	udiv	r3, r5, r8
 8000dca:	fb08 5513 	mls	r5, r8, r3, r5
 8000dce:	fb03 fc0c 	mul.w	ip, r3, ip
 8000dd2:	ea49 4505 	orr.w	r5, r9, r5, lsl #16
 8000dd6:	45ac      	cmp	ip, r5
 8000dd8:	d906      	bls.n	8000de8 <__udivmoddi4+0x1dc>
 8000dda:	197d      	adds	r5, r7, r5
 8000ddc:	f103 38ff 	add.w	r8, r3, #4294967295
 8000de0:	d201      	bcs.n	8000de6 <__udivmoddi4+0x1da>
 8000de2:	45ac      	cmp	ip, r5
 8000de4:	d87e      	bhi.n	8000ee4 <__udivmoddi4+0x2d8>
 8000de6:	4643      	mov	r3, r8
 8000de8:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
 8000dec:	eba5 050c 	sub.w	r5, r5, ip
 8000df0:	fba3 9802 	umull	r9, r8, r3, r2
 8000df4:	4545      	cmp	r5, r8
 8000df6:	46ce      	mov	lr, r9
 8000df8:	46c4      	mov	ip, r8
 8000dfa:	d302      	bcc.n	8000e02 <__udivmoddi4+0x1f6>
 8000dfc:	d106      	bne.n	8000e0c <__udivmoddi4+0x200>
 8000dfe:	4548      	cmp	r0, r9
 8000e00:	d204      	bcs.n	8000e0c <__udivmoddi4+0x200>
 8000e02:	3b01      	subs	r3, #1
 8000e04:	ebb9 0e02 	subs.w	lr, r9, r2
 8000e08:	eb68 0c07 	sbc.w	ip, r8, r7
 8000e0c:	2e00      	cmp	r6, #0
 8000e0e:	d06f      	beq.n	8000ef0 <__udivmoddi4+0x2e4>
 8000e10:	ebb0 020e 	subs.w	r2, r0, lr
 8000e14:	eb65 050c 	sbc.w	r5, r5, ip
 8000e18:	40ca      	lsrs	r2, r1
 8000e1a:	fa05 f404 	lsl.w	r4, r5, r4
 8000e1e:	40cd      	lsrs	r5, r1
 8000e20:	4618      	mov	r0, r3
 8000e22:	4314      	orrs	r4, r2
 8000e24:	2100      	movs	r1, #0
 8000e26:	e9c6 4500 	strd	r4, r5, [r6]
 8000e2a:	e73c      	b.n	8000ca6 <__udivmoddi4+0x9a>
 8000e2c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000e30:	f1c3 0220 	rsb	r2, r3, #32
 8000e34:	4099      	lsls	r1, r3
 8000e36:	409c      	lsls	r4, r3
 8000e38:	40d5      	lsrs	r5, r2
 8000e3a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000e3e:	fa20 f202 	lsr.w	r2, r0, r2
 8000e42:	fa1f f78c 	uxth.w	r7, ip
 8000e46:	fbb5 f0fe 	udiv	r0, r5, lr
 8000e4a:	430a      	orrs	r2, r1
 8000e4c:	fb0e 5510 	mls	r5, lr, r0, r5
 8000e50:	0c11      	lsrs	r1, r2, #16
 8000e52:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000e56:	fb00 f507 	mul.w	r5, r0, r7
 8000e5a:	428d      	cmp	r5, r1
 8000e5c:	d90e      	bls.n	8000e7c <__udivmoddi4+0x270>
 8000e5e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e62:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e66:	bf2c      	ite	cs
 8000e68:	f04f 0901 	movcs.w	r9, #1
 8000e6c:	f04f 0900 	movcc.w	r9, #0
 8000e70:	428d      	cmp	r5, r1
 8000e72:	d902      	bls.n	8000e7a <__udivmoddi4+0x26e>
 8000e74:	f1b9 0f00 	cmp.w	r9, #0
 8000e78:	d031      	beq.n	8000ede <__udivmoddi4+0x2d2>
 8000e7a:	4640      	mov	r0, r8
 8000e7c:	1b49      	subs	r1, r1, r5
 8000e7e:	b292      	uxth	r2, r2
 8000e80:	fbb1 f5fe 	udiv	r5, r1, lr
 8000e84:	fb0e 1115 	mls	r1, lr, r5, r1
 8000e88:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e8c:	fb05 f107 	mul.w	r1, r5, r7
 8000e90:	4291      	cmp	r1, r2
 8000e92:	d907      	bls.n	8000ea4 <__udivmoddi4+0x298>
 8000e94:	eb1c 0202 	adds.w	r2, ip, r2
 8000e98:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e9c:	d201      	bcs.n	8000ea2 <__udivmoddi4+0x296>
 8000e9e:	4291      	cmp	r1, r2
 8000ea0:	d823      	bhi.n	8000eea <__udivmoddi4+0x2de>
 8000ea2:	4645      	mov	r5, r8
 8000ea4:	1a52      	subs	r2, r2, r1
 8000ea6:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000eaa:	e726      	b.n	8000cfa <__udivmoddi4+0xee>
 8000eac:	4631      	mov	r1, r6
 8000eae:	4630      	mov	r0, r6
 8000eb0:	e6f9      	b.n	8000ca6 <__udivmoddi4+0x9a>
 8000eb2:	1a84      	subs	r4, r0, r2
 8000eb4:	eb65 0203 	sbc.w	r2, r5, r3
 8000eb8:	2001      	movs	r0, #1
 8000eba:	4617      	mov	r7, r2
 8000ebc:	e70b      	b.n	8000cd6 <__udivmoddi4+0xca>
 8000ebe:	4464      	add	r4, ip
 8000ec0:	3802      	subs	r0, #2
 8000ec2:	e74a      	b.n	8000d5a <__udivmoddi4+0x14e>
 8000ec4:	4464      	add	r4, ip
 8000ec6:	3802      	subs	r0, #2
 8000ec8:	e6e4      	b.n	8000c94 <__udivmoddi4+0x88>
 8000eca:	3d02      	subs	r5, #2
 8000ecc:	4462      	add	r2, ip
 8000ece:	e72f      	b.n	8000d30 <__udivmoddi4+0x124>
 8000ed0:	3902      	subs	r1, #2
 8000ed2:	4462      	add	r2, ip
 8000ed4:	e6c9      	b.n	8000c6a <__udivmoddi4+0x5e>
 8000ed6:	f1ae 0e02 	sub.w	lr, lr, #2
 8000eda:	443d      	add	r5, r7
 8000edc:	e76f      	b.n	8000dbe <__udivmoddi4+0x1b2>
 8000ede:	3802      	subs	r0, #2
 8000ee0:	4461      	add	r1, ip
 8000ee2:	e7cb      	b.n	8000e7c <__udivmoddi4+0x270>
 8000ee4:	3b02      	subs	r3, #2
 8000ee6:	443d      	add	r5, r7
 8000ee8:	e77e      	b.n	8000de8 <__udivmoddi4+0x1dc>
 8000eea:	3d02      	subs	r5, #2
 8000eec:	4462      	add	r2, ip
 8000eee:	e7d9      	b.n	8000ea4 <__udivmoddi4+0x298>
 8000ef0:	4618      	mov	r0, r3
 8000ef2:	4631      	mov	r1, r6
 8000ef4:	e6d7      	b.n	8000ca6 <__udivmoddi4+0x9a>
 8000ef6:	bf00      	nop

08000ef8 <__aeabi_idiv0>:
 8000ef8:	4770      	bx	lr
 8000efa:	bf00      	nop

08000efc <HAL_ADC_ConvCpltCallback>:
uint32_t adc_values_raw[8];
analog_signals_s adc_values = {0u};
uint8_t channel_idx = 0;

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b082      	sub	sp, #8
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	6078      	str	r0, [r7, #4]
	adc_values.motor_batt_voltage_raw = adc_values_raw[0];
 8000f04:	4b18      	ldr	r3, [pc, #96]	; (8000f68 <HAL_ADC_ConvCpltCallback+0x6c>)
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	b29a      	uxth	r2, r3
 8000f0a:	4b18      	ldr	r3, [pc, #96]	; (8000f6c <HAL_ADC_ConvCpltCallback+0x70>)
 8000f0c:	801a      	strh	r2, [r3, #0]
	adc_values.motor_curr_raw = adc_values_raw[1];
 8000f0e:	4b16      	ldr	r3, [pc, #88]	; (8000f68 <HAL_ADC_ConvCpltCallback+0x6c>)
 8000f10:	685b      	ldr	r3, [r3, #4]
 8000f12:	b29a      	uxth	r2, r3
 8000f14:	4b15      	ldr	r3, [pc, #84]	; (8000f6c <HAL_ADC_ConvCpltCallback+0x70>)
 8000f16:	805a      	strh	r2, [r3, #2]
	adc_values.vbus_raw = adc_values_raw[2];
 8000f18:	4b13      	ldr	r3, [pc, #76]	; (8000f68 <HAL_ADC_ConvCpltCallback+0x6c>)
 8000f1a:	689b      	ldr	r3, [r3, #8]
 8000f1c:	b29a      	uxth	r2, r3
 8000f1e:	4b13      	ldr	r3, [pc, #76]	; (8000f6c <HAL_ADC_ConvCpltCallback+0x70>)
 8000f20:	809a      	strh	r2, [r3, #4]
	adc_values.distance_short2_raw = adc_values_raw[5];
 8000f22:	4b11      	ldr	r3, [pc, #68]	; (8000f68 <HAL_ADC_ConvCpltCallback+0x6c>)
 8000f24:	695b      	ldr	r3, [r3, #20]
 8000f26:	b29a      	uxth	r2, r3
 8000f28:	4b10      	ldr	r3, [pc, #64]	; (8000f6c <HAL_ADC_ConvCpltCallback+0x70>)
 8000f2a:	80da      	strh	r2, [r3, #6]
	adc_values.distance_short1_raw = adc_values_raw[3];
 8000f2c:	4b0e      	ldr	r3, [pc, #56]	; (8000f68 <HAL_ADC_ConvCpltCallback+0x6c>)
 8000f2e:	68db      	ldr	r3, [r3, #12]
 8000f30:	b29a      	uxth	r2, r3
 8000f32:	4b0e      	ldr	r3, [pc, #56]	; (8000f6c <HAL_ADC_ConvCpltCallback+0x70>)
 8000f34:	811a      	strh	r2, [r3, #8]
	adc_values.distance_long1_raw = adc_values_raw[4];
 8000f36:	4b0c      	ldr	r3, [pc, #48]	; (8000f68 <HAL_ADC_ConvCpltCallback+0x6c>)
 8000f38:	691b      	ldr	r3, [r3, #16]
 8000f3a:	b29a      	uxth	r2, r3
 8000f3c:	4b0b      	ldr	r3, [pc, #44]	; (8000f6c <HAL_ADC_ConvCpltCallback+0x70>)
 8000f3e:	815a      	strh	r2, [r3, #10]
	adc_values.lv_batt_voltage_raw = adc_values_raw[6];
 8000f40:	4b09      	ldr	r3, [pc, #36]	; (8000f68 <HAL_ADC_ConvCpltCallback+0x6c>)
 8000f42:	699b      	ldr	r3, [r3, #24]
 8000f44:	b29a      	uxth	r2, r3
 8000f46:	4b09      	ldr	r3, [pc, #36]	; (8000f6c <HAL_ADC_ConvCpltCallback+0x70>)
 8000f48:	819a      	strh	r2, [r3, #12]
	adc_values.distance_long2_raw = adc_values_raw[7];
 8000f4a:	4b07      	ldr	r3, [pc, #28]	; (8000f68 <HAL_ADC_ConvCpltCallback+0x6c>)
 8000f4c:	69db      	ldr	r3, [r3, #28]
 8000f4e:	b29a      	uxth	r2, r3
 8000f50:	4b06      	ldr	r3, [pc, #24]	; (8000f6c <HAL_ADC_ConvCpltCallback+0x70>)
 8000f52:	81da      	strh	r2, [r3, #14]

	vTaskResume(static_cast<TaskHandle_t>(mainTaskHandle));
 8000f54:	4b06      	ldr	r3, [pc, #24]	; (8000f70 <HAL_ADC_ConvCpltCallback+0x74>)
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	4618      	mov	r0, r3
 8000f5a:	f019 f823 	bl	8019fa4 <vTaskResume>
}
 8000f5e:	bf00      	nop
 8000f60:	3708      	adds	r7, #8
 8000f62:	46bd      	mov	sp, r7
 8000f64:	bd80      	pop	{r7, pc}
 8000f66:	bf00      	nop
 8000f68:	20000128 	.word	0x20000128
 8000f6c:	20000148 	.word	0x20000148
 8000f70:	200002dc 	.word	0x200002dc

08000f74 <_Z18DistanceSensorTaskv>:
extern analog_signals_s adc_values;
DistanceSensorData_s distance_sensor = {0u};


void DistanceSensorTask()
{
 8000f74:	b5b0      	push	{r4, r5, r7, lr}
 8000f76:	b082      	sub	sp, #8
 8000f78:	af00      	add	r7, sp, #0
	uint8_t i,j;
	distance_sensor.voltage_long[0] = ((float)(adc_values.distance_long1_raw)) / 4096.0f * 3.3f;
 8000f7a:	4b91      	ldr	r3, [pc, #580]	; (80011c0 <_Z18DistanceSensorTaskv+0x24c>)
 8000f7c:	895b      	ldrh	r3, [r3, #10]
 8000f7e:	ee07 3a90 	vmov	s15, r3
 8000f82:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000f86:	eddf 6a8f 	vldr	s13, [pc, #572]	; 80011c4 <_Z18DistanceSensorTaskv+0x250>
 8000f8a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000f8e:	ed9f 7a8e 	vldr	s14, [pc, #568]	; 80011c8 <_Z18DistanceSensorTaskv+0x254>
 8000f92:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000f96:	4b8d      	ldr	r3, [pc, #564]	; (80011cc <_Z18DistanceSensorTaskv+0x258>)
 8000f98:	edc3 7a00 	vstr	s15, [r3]
	distance_sensor.voltage_long[1] = ((float)(adc_values.distance_long2_raw)) / 4096.0f * 3.3f;
 8000f9c:	4b88      	ldr	r3, [pc, #544]	; (80011c0 <_Z18DistanceSensorTaskv+0x24c>)
 8000f9e:	89db      	ldrh	r3, [r3, #14]
 8000fa0:	ee07 3a90 	vmov	s15, r3
 8000fa4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000fa8:	eddf 6a86 	vldr	s13, [pc, #536]	; 80011c4 <_Z18DistanceSensorTaskv+0x250>
 8000fac:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000fb0:	ed9f 7a85 	vldr	s14, [pc, #532]	; 80011c8 <_Z18DistanceSensorTaskv+0x254>
 8000fb4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000fb8:	4b84      	ldr	r3, [pc, #528]	; (80011cc <_Z18DistanceSensorTaskv+0x258>)
 8000fba:	edc3 7a01 	vstr	s15, [r3, #4]
	distance_sensor.voltage_short[0] = ((float)(adc_values.distance_short1_raw)) / 4096.0f * 3.3f;
 8000fbe:	4b80      	ldr	r3, [pc, #512]	; (80011c0 <_Z18DistanceSensorTaskv+0x24c>)
 8000fc0:	891b      	ldrh	r3, [r3, #8]
 8000fc2:	ee07 3a90 	vmov	s15, r3
 8000fc6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000fca:	eddf 6a7e 	vldr	s13, [pc, #504]	; 80011c4 <_Z18DistanceSensorTaskv+0x250>
 8000fce:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000fd2:	ed9f 7a7d 	vldr	s14, [pc, #500]	; 80011c8 <_Z18DistanceSensorTaskv+0x254>
 8000fd6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000fda:	4b7c      	ldr	r3, [pc, #496]	; (80011cc <_Z18DistanceSensorTaskv+0x258>)
 8000fdc:	edc3 7a02 	vstr	s15, [r3, #8]
	distance_sensor.voltage_short[1] = ((float)(adc_values.distance_short2_raw)) / 4096.0f * 3.3f;
 8000fe0:	4b77      	ldr	r3, [pc, #476]	; (80011c0 <_Z18DistanceSensorTaskv+0x24c>)
 8000fe2:	88db      	ldrh	r3, [r3, #6]
 8000fe4:	ee07 3a90 	vmov	s15, r3
 8000fe8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000fec:	eddf 6a75 	vldr	s13, [pc, #468]	; 80011c4 <_Z18DistanceSensorTaskv+0x250>
 8000ff0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000ff4:	ed9f 7a74 	vldr	s14, [pc, #464]	; 80011c8 <_Z18DistanceSensorTaskv+0x254>
 8000ff8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000ffc:	4b73      	ldr	r3, [pc, #460]	; (80011cc <_Z18DistanceSensorTaskv+0x258>)
 8000ffe:	edc3 7a03 	vstr	s15, [r3, #12]

	for(i = 0; i < 1; ++i)
 8001002:	2300      	movs	r3, #0
 8001004:	71fb      	strb	r3, [r7, #7]
 8001006:	e0a1      	b.n	800114c <_Z18DistanceSensorTaskv+0x1d8>
	{
		float x = distance_sensor.voltage_long[i];
 8001008:	79fb      	ldrb	r3, [r7, #7]
 800100a:	4a70      	ldr	r2, [pc, #448]	; (80011cc <_Z18DistanceSensorTaskv+0x258>)
 800100c:	009b      	lsls	r3, r3, #2
 800100e:	4413      	add	r3, r2
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	603b      	str	r3, [r7, #0]
		distance_sensor.distance_long[i] = 0.0f;
 8001014:	79fb      	ldrb	r3, [r7, #7]
 8001016:	4a6d      	ldr	r2, [pc, #436]	; (80011cc <_Z18DistanceSensorTaskv+0x258>)
 8001018:	3304      	adds	r3, #4
 800101a:	009b      	lsls	r3, r3, #2
 800101c:	4413      	add	r3, r2
 800101e:	f04f 0200 	mov.w	r2, #0
 8001022:	601a      	str	r2, [r3, #0]
		for(j = 0; j < 6; ++j)
 8001024:	2300      	movs	r3, #0
 8001026:	71bb      	strb	r3, [r7, #6]
 8001028:	e03a      	b.n	80010a0 <_Z18DistanceSensorTaskv+0x12c>
		{
			distance_sensor.distance_long[i] += pow(x,5-j) * long_poly_coeff[j];
 800102a:	79bb      	ldrb	r3, [r7, #6]
 800102c:	f1c3 0305 	rsb	r3, r3, #5
 8001030:	4618      	mov	r0, r3
 8001032:	ed97 0a00 	vldr	s0, [r7]
 8001036:	f000 f8d1 	bl	80011dc <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 800103a:	ec55 4b10 	vmov	r4, r5, d0
 800103e:	79bb      	ldrb	r3, [r7, #6]
 8001040:	4a63      	ldr	r2, [pc, #396]	; (80011d0 <_Z18DistanceSensorTaskv+0x25c>)
 8001042:	009b      	lsls	r3, r3, #2
 8001044:	4413      	add	r3, r2
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	4618      	mov	r0, r3
 800104a:	f7ff fa6f 	bl	800052c <__aeabi_f2d>
 800104e:	4602      	mov	r2, r0
 8001050:	460b      	mov	r3, r1
 8001052:	4620      	mov	r0, r4
 8001054:	4629      	mov	r1, r5
 8001056:	f7ff fac1 	bl	80005dc <__aeabi_dmul>
 800105a:	4602      	mov	r2, r0
 800105c:	460b      	mov	r3, r1
 800105e:	4614      	mov	r4, r2
 8001060:	461d      	mov	r5, r3
 8001062:	79fb      	ldrb	r3, [r7, #7]
 8001064:	4a59      	ldr	r2, [pc, #356]	; (80011cc <_Z18DistanceSensorTaskv+0x258>)
 8001066:	3304      	adds	r3, #4
 8001068:	009b      	lsls	r3, r3, #2
 800106a:	4413      	add	r3, r2
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	4618      	mov	r0, r3
 8001070:	f7ff fa5c 	bl	800052c <__aeabi_f2d>
 8001074:	4602      	mov	r2, r0
 8001076:	460b      	mov	r3, r1
 8001078:	4620      	mov	r0, r4
 800107a:	4629      	mov	r1, r5
 800107c:	f7ff f8f8 	bl	8000270 <__adddf3>
 8001080:	4602      	mov	r2, r0
 8001082:	460b      	mov	r3, r1
 8001084:	79fc      	ldrb	r4, [r7, #7]
 8001086:	4610      	mov	r0, r2
 8001088:	4619      	mov	r1, r3
 800108a:	f7ff fd57 	bl	8000b3c <__aeabi_d2f>
 800108e:	4602      	mov	r2, r0
 8001090:	494e      	ldr	r1, [pc, #312]	; (80011cc <_Z18DistanceSensorTaskv+0x258>)
 8001092:	1d23      	adds	r3, r4, #4
 8001094:	009b      	lsls	r3, r3, #2
 8001096:	440b      	add	r3, r1
 8001098:	601a      	str	r2, [r3, #0]
		for(j = 0; j < 6; ++j)
 800109a:	79bb      	ldrb	r3, [r7, #6]
 800109c:	3301      	adds	r3, #1
 800109e:	71bb      	strb	r3, [r7, #6]
 80010a0:	79bb      	ldrb	r3, [r7, #6]
 80010a2:	2b05      	cmp	r3, #5
 80010a4:	d9c1      	bls.n	800102a <_Z18DistanceSensorTaskv+0xb6>
		}

		distance_sensor.distance_short[i] = 0.0f;
 80010a6:	79fb      	ldrb	r3, [r7, #7]
 80010a8:	4a48      	ldr	r2, [pc, #288]	; (80011cc <_Z18DistanceSensorTaskv+0x258>)
 80010aa:	3306      	adds	r3, #6
 80010ac:	009b      	lsls	r3, r3, #2
 80010ae:	4413      	add	r3, r2
 80010b0:	f04f 0200 	mov.w	r2, #0
 80010b4:	601a      	str	r2, [r3, #0]
		x = distance_sensor.voltage_short[i];
 80010b6:	79fb      	ldrb	r3, [r7, #7]
 80010b8:	4a44      	ldr	r2, [pc, #272]	; (80011cc <_Z18DistanceSensorTaskv+0x258>)
 80010ba:	3302      	adds	r3, #2
 80010bc:	009b      	lsls	r3, r3, #2
 80010be:	4413      	add	r3, r2
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	603b      	str	r3, [r7, #0]
		for(j = 0; j < 6; ++j)
 80010c4:	2300      	movs	r3, #0
 80010c6:	71bb      	strb	r3, [r7, #6]
 80010c8:	e03a      	b.n	8001140 <_Z18DistanceSensorTaskv+0x1cc>
		{
			distance_sensor.distance_short[i] += pow(x,5-j) * short_poly_coeff[j];
 80010ca:	79bb      	ldrb	r3, [r7, #6]
 80010cc:	f1c3 0305 	rsb	r3, r3, #5
 80010d0:	4618      	mov	r0, r3
 80010d2:	ed97 0a00 	vldr	s0, [r7]
 80010d6:	f000 f881 	bl	80011dc <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 80010da:	ec55 4b10 	vmov	r4, r5, d0
 80010de:	79bb      	ldrb	r3, [r7, #6]
 80010e0:	4a3c      	ldr	r2, [pc, #240]	; (80011d4 <_Z18DistanceSensorTaskv+0x260>)
 80010e2:	009b      	lsls	r3, r3, #2
 80010e4:	4413      	add	r3, r2
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	4618      	mov	r0, r3
 80010ea:	f7ff fa1f 	bl	800052c <__aeabi_f2d>
 80010ee:	4602      	mov	r2, r0
 80010f0:	460b      	mov	r3, r1
 80010f2:	4620      	mov	r0, r4
 80010f4:	4629      	mov	r1, r5
 80010f6:	f7ff fa71 	bl	80005dc <__aeabi_dmul>
 80010fa:	4602      	mov	r2, r0
 80010fc:	460b      	mov	r3, r1
 80010fe:	4614      	mov	r4, r2
 8001100:	461d      	mov	r5, r3
 8001102:	79fb      	ldrb	r3, [r7, #7]
 8001104:	4a31      	ldr	r2, [pc, #196]	; (80011cc <_Z18DistanceSensorTaskv+0x258>)
 8001106:	3306      	adds	r3, #6
 8001108:	009b      	lsls	r3, r3, #2
 800110a:	4413      	add	r3, r2
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	4618      	mov	r0, r3
 8001110:	f7ff fa0c 	bl	800052c <__aeabi_f2d>
 8001114:	4602      	mov	r2, r0
 8001116:	460b      	mov	r3, r1
 8001118:	4620      	mov	r0, r4
 800111a:	4629      	mov	r1, r5
 800111c:	f7ff f8a8 	bl	8000270 <__adddf3>
 8001120:	4602      	mov	r2, r0
 8001122:	460b      	mov	r3, r1
 8001124:	79fc      	ldrb	r4, [r7, #7]
 8001126:	4610      	mov	r0, r2
 8001128:	4619      	mov	r1, r3
 800112a:	f7ff fd07 	bl	8000b3c <__aeabi_d2f>
 800112e:	4602      	mov	r2, r0
 8001130:	4926      	ldr	r1, [pc, #152]	; (80011cc <_Z18DistanceSensorTaskv+0x258>)
 8001132:	1da3      	adds	r3, r4, #6
 8001134:	009b      	lsls	r3, r3, #2
 8001136:	440b      	add	r3, r1
 8001138:	601a      	str	r2, [r3, #0]
		for(j = 0; j < 6; ++j)
 800113a:	79bb      	ldrb	r3, [r7, #6]
 800113c:	3301      	adds	r3, #1
 800113e:	71bb      	strb	r3, [r7, #6]
 8001140:	79bb      	ldrb	r3, [r7, #6]
 8001142:	2b05      	cmp	r3, #5
 8001144:	d9c1      	bls.n	80010ca <_Z18DistanceSensorTaskv+0x156>
	for(i = 0; i < 1; ++i)
 8001146:	79fb      	ldrb	r3, [r7, #7]
 8001148:	3301      	adds	r3, #1
 800114a:	71fb      	strb	r3, [r7, #7]
 800114c:	79fb      	ldrb	r3, [r7, #7]
 800114e:	2b00      	cmp	r3, #0
 8001150:	f43f af5a 	beq.w	8001008 <_Z18DistanceSensorTaskv+0x94>
		}
	}

	if((distance_sensor.distance_short[0] >= 20.0f) || (distance_sensor.distance_short[1] >= 20.0f))
 8001154:	4b1d      	ldr	r3, [pc, #116]	; (80011cc <_Z18DistanceSensorTaskv+0x258>)
 8001156:	edd3 7a06 	vldr	s15, [r3, #24]
 800115a:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 800115e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001162:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001166:	da09      	bge.n	800117c <_Z18DistanceSensorTaskv+0x208>
 8001168:	4b18      	ldr	r3, [pc, #96]	; (80011cc <_Z18DistanceSensorTaskv+0x258>)
 800116a:	edd3 7a07 	vldr	s15, [r3, #28]
 800116e:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8001172:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001176:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800117a:	db04      	blt.n	8001186 <_Z18DistanceSensorTaskv+0x212>
	{
		//distance_sensor.distance = (distance_sensor.distance_long[0] + distance_sensor.distance_long[1]) / 2.0f;
		distance_sensor.distance = distance_sensor.distance_long[0];
 800117c:	4b13      	ldr	r3, [pc, #76]	; (80011cc <_Z18DistanceSensorTaskv+0x258>)
 800117e:	691b      	ldr	r3, [r3, #16]
 8001180:	4a12      	ldr	r2, [pc, #72]	; (80011cc <_Z18DistanceSensorTaskv+0x258>)
 8001182:	6213      	str	r3, [r2, #32]
 8001184:	e003      	b.n	800118e <_Z18DistanceSensorTaskv+0x21a>
	}
	else
	{
		//distance_sensor.distance = (distance_sensor.distance_short[0] + distance_sensor.distance_short[1]) / 2.0f;
		distance_sensor.distance = distance_sensor.distance_short[0];
 8001186:	4b11      	ldr	r3, [pc, #68]	; (80011cc <_Z18DistanceSensorTaskv+0x258>)
 8001188:	699b      	ldr	r3, [r3, #24]
 800118a:	4a10      	ldr	r2, [pc, #64]	; (80011cc <_Z18DistanceSensorTaskv+0x258>)
 800118c:	6213      	str	r3, [r2, #32]
	}

	distance_sensor.distance -= 7.0f;
 800118e:	4b0f      	ldr	r3, [pc, #60]	; (80011cc <_Z18DistanceSensorTaskv+0x258>)
 8001190:	edd3 7a08 	vldr	s15, [r3, #32]
 8001194:	eeb1 7a0c 	vmov.f32	s14, #28	; 0x40e00000  7.0
 8001198:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800119c:	4b0b      	ldr	r3, [pc, #44]	; (80011cc <_Z18DistanceSensorTaskv+0x258>)
 800119e:	edc3 7a08 	vstr	s15, [r3, #32]
	distance_sensor.distance /= 100.0f;
 80011a2:	4b0a      	ldr	r3, [pc, #40]	; (80011cc <_Z18DistanceSensorTaskv+0x258>)
 80011a4:	ed93 7a08 	vldr	s14, [r3, #32]
 80011a8:	eddf 6a0b 	vldr	s13, [pc, #44]	; 80011d8 <_Z18DistanceSensorTaskv+0x264>
 80011ac:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80011b0:	4b06      	ldr	r3, [pc, #24]	; (80011cc <_Z18DistanceSensorTaskv+0x258>)
 80011b2:	edc3 7a08 	vstr	s15, [r3, #32]
}
 80011b6:	bf00      	nop
 80011b8:	3708      	adds	r7, #8
 80011ba:	46bd      	mov	sp, r7
 80011bc:	bdb0      	pop	{r4, r5, r7, pc}
 80011be:	bf00      	nop
 80011c0:	20000148 	.word	0x20000148
 80011c4:	45800000 	.word	0x45800000
 80011c8:	40533333 	.word	0x40533333
 80011cc:	20000158 	.word	0x20000158
 80011d0:	20000018 	.word	0x20000018
 80011d4:	20000000 	.word	0x20000000
 80011d8:	42c80000 	.word	0x42c80000

080011dc <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>:
#endif

  template<typename _Tp, typename _Up>
    inline _GLIBCXX_CONSTEXPR
    typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    pow(_Tp __x, _Up __y)
 80011dc:	b5b0      	push	{r4, r5, r7, lr}
 80011de:	b082      	sub	sp, #8
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	ed87 0a01 	vstr	s0, [r7, #4]
 80011e6:	6038      	str	r0, [r7, #0]
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return pow(__type(__x), __type(__y));
 80011e8:	6878      	ldr	r0, [r7, #4]
 80011ea:	f7ff f99f 	bl	800052c <__aeabi_f2d>
 80011ee:	4604      	mov	r4, r0
 80011f0:	460d      	mov	r5, r1
 80011f2:	6838      	ldr	r0, [r7, #0]
 80011f4:	f7ff f988 	bl	8000508 <__aeabi_i2d>
 80011f8:	4602      	mov	r2, r0
 80011fa:	460b      	mov	r3, r1
 80011fc:	ec43 2b11 	vmov	d1, r2, r3
 8001200:	ec45 4b10 	vmov	d0, r4, r5
 8001204:	f01a fad8 	bl	801b7b8 <pow>
 8001208:	eeb0 7a40 	vmov.f32	s14, s0
 800120c:	eef0 7a60 	vmov.f32	s15, s1
    }
 8001210:	eeb0 0a47 	vmov.f32	s0, s14
 8001214:	eef0 0a67 	vmov.f32	s1, s15
 8001218:	3708      	adds	r7, #8
 800121a:	46bd      	mov	sp, r7
 800121c:	bdb0      	pop	{r4, r5, r7, pc}
	...

08001220 <_Z14update_encoderP16encoder_instanceP17TIM_HandleTypeDef>:

encoder_instance enc_instance_mot;
extern TIM_HandleTypeDef htim3;

void update_encoder(encoder_instance *encoder_value, TIM_HandleTypeDef *htim)
{
 8001220:	b480      	push	{r7}
 8001222:	b085      	sub	sp, #20
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
 8001228:	6039      	str	r1, [r7, #0]
	uint32_t temp_counter = __HAL_TIM_GET_COUNTER(htim);
 800122a:	683b      	ldr	r3, [r7, #0]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001230:	60fb      	str	r3, [r7, #12]
	static uint8_t first_time = 0;
	if (!first_time)
 8001232:	4b38      	ldr	r3, [pc, #224]	; (8001314 <_Z14update_encoderP16encoder_instanceP17TIM_HandleTypeDef+0xf4>)
 8001234:	781b      	ldrb	r3, [r3, #0]
 8001236:	2b00      	cmp	r3, #0
 8001238:	d106      	bne.n	8001248 <_Z14update_encoderP16encoder_instanceP17TIM_HandleTypeDef+0x28>
	{
		encoder_value->velocity = 0;
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	2200      	movs	r2, #0
 800123e:	801a      	strh	r2, [r3, #0]
		first_time = 1;
 8001240:	4b34      	ldr	r3, [pc, #208]	; (8001314 <_Z14update_encoderP16encoder_instanceP17TIM_HandleTypeDef+0xf4>)
 8001242:	2201      	movs	r2, #1
 8001244:	701a      	strb	r2, [r3, #0]
 8001246:	e05c      	b.n	8001302 <_Z14update_encoderP16encoder_instanceP17TIM_HandleTypeDef+0xe2>
	}
	else
	{
		if (temp_counter == encoder_value->last_counter_value)
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	685b      	ldr	r3, [r3, #4]
 800124c:	68fa      	ldr	r2, [r7, #12]
 800124e:	429a      	cmp	r2, r3
 8001250:	d103      	bne.n	800125a <_Z14update_encoderP16encoder_instanceP17TIM_HandleTypeDef+0x3a>
		{
			encoder_value->velocity = 0;
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	2200      	movs	r2, #0
 8001256:	801a      	strh	r2, [r3, #0]
 8001258:	e053      	b.n	8001302 <_Z14update_encoderP16encoder_instanceP17TIM_HandleTypeDef+0xe2>
		}
		else if (temp_counter > encoder_value->last_counter_value)
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	685b      	ldr	r3, [r3, #4]
 800125e:	68fa      	ldr	r2, [r7, #12]
 8001260:	429a      	cmp	r2, r3
 8001262:	d927      	bls.n	80012b4 <_Z14update_encoderP16encoder_instanceP17TIM_HandleTypeDef+0x94>
		{
			if (__HAL_TIM_IS_TIM_COUNTING_DOWN(htim))
 8001264:	683b      	ldr	r3, [r7, #0]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	f003 0310 	and.w	r3, r3, #16
 800126e:	2b10      	cmp	r3, #16
 8001270:	bf0c      	ite	eq
 8001272:	2301      	moveq	r3, #1
 8001274:	2300      	movne	r3, #0
 8001276:	b2db      	uxtb	r3, r3
 8001278:	2b00      	cmp	r3, #0
 800127a:	d010      	beq.n	800129e <_Z14update_encoderP16encoder_instanceP17TIM_HandleTypeDef+0x7e>
			{
				encoder_value->velocity = -encoder_value->last_counter_value - (__HAL_TIM_GET_AUTORELOAD(htim) - temp_counter);
 800127c:	68fb      	ldr	r3, [r7, #12]
 800127e:	b29a      	uxth	r2, r3
 8001280:	683b      	ldr	r3, [r7, #0]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001286:	b29b      	uxth	r3, r3
 8001288:	1ad3      	subs	r3, r2, r3
 800128a:	b29a      	uxth	r2, r3
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	685b      	ldr	r3, [r3, #4]
 8001290:	b29b      	uxth	r3, r3
 8001292:	1ad3      	subs	r3, r2, r3
 8001294:	b29b      	uxth	r3, r3
 8001296:	b21a      	sxth	r2, r3
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	801a      	strh	r2, [r3, #0]
 800129c:	e031      	b.n	8001302 <_Z14update_encoderP16encoder_instanceP17TIM_HandleTypeDef+0xe2>
			}
			else
			{
				encoder_value->velocity = temp_counter - encoder_value->last_counter_value;
 800129e:	68fb      	ldr	r3, [r7, #12]
 80012a0:	b29a      	uxth	r2, r3
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	685b      	ldr	r3, [r3, #4]
 80012a6:	b29b      	uxth	r3, r3
 80012a8:	1ad3      	subs	r3, r2, r3
 80012aa:	b29b      	uxth	r3, r3
 80012ac:	b21a      	sxth	r2, r3
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	801a      	strh	r2, [r3, #0]
 80012b2:	e026      	b.n	8001302 <_Z14update_encoderP16encoder_instanceP17TIM_HandleTypeDef+0xe2>
			}
		}
		else
		{
			if (__HAL_TIM_IS_TIM_COUNTING_DOWN(htim))
 80012b4:	683b      	ldr	r3, [r7, #0]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	f003 0310 	and.w	r3, r3, #16
 80012be:	2b10      	cmp	r3, #16
 80012c0:	bf0c      	ite	eq
 80012c2:	2301      	moveq	r3, #1
 80012c4:	2300      	movne	r3, #0
 80012c6:	b2db      	uxtb	r3, r3
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d00a      	beq.n	80012e2 <_Z14update_encoderP16encoder_instanceP17TIM_HandleTypeDef+0xc2>
			{
				encoder_value->velocity = temp_counter - encoder_value->last_counter_value;
 80012cc:	68fb      	ldr	r3, [r7, #12]
 80012ce:	b29a      	uxth	r2, r3
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	685b      	ldr	r3, [r3, #4]
 80012d4:	b29b      	uxth	r3, r3
 80012d6:	1ad3      	subs	r3, r2, r3
 80012d8:	b29b      	uxth	r3, r3
 80012da:	b21a      	sxth	r2, r3
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	801a      	strh	r2, [r3, #0]
 80012e0:	e00f      	b.n	8001302 <_Z14update_encoderP16encoder_instanceP17TIM_HandleTypeDef+0xe2>
			}
			else
			{
				encoder_value->velocity = temp_counter + (__HAL_TIM_GET_AUTORELOAD(htim) - encoder_value->last_counter_value);
 80012e2:	683b      	ldr	r3, [r7, #0]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012e8:	b29a      	uxth	r2, r3
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	685b      	ldr	r3, [r3, #4]
 80012ee:	b29b      	uxth	r3, r3
 80012f0:	1ad3      	subs	r3, r2, r3
 80012f2:	b29a      	uxth	r2, r3
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	b29b      	uxth	r3, r3
 80012f8:	4413      	add	r3, r2
 80012fa:	b29b      	uxth	r3, r3
 80012fc:	b21a      	sxth	r2, r3
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	801a      	strh	r2, [r3, #0]
			}
		}
	}
	//encoder_value->rpm = ((float) (encoder_value->velocity) / ENCODER_TASK_TIMESTEP) / 2 * 1000.0f * AB_ROT_PER_PULSE * GEAR_RATIO * 60;
	encoder_value->last_counter_value = temp_counter;
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	68fa      	ldr	r2, [r7, #12]
 8001306:	605a      	str	r2, [r3, #4]
}
 8001308:	bf00      	nop
 800130a:	3714      	adds	r7, #20
 800130c:	46bd      	mov	sp, r7
 800130e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001312:	4770      	bx	lr
 8001314:	20000188 	.word	0x20000188

08001318 <_Z12Encoder_TaskPv>:

void Encoder_Task(void * argument)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	b086      	sub	sp, #24
 800131c:	af00      	add	r7, sp, #0
 800131e:	6078      	str	r0, [r7, #4]
	// measure velocity, position
	int16_t velocity_values[5] = {0};
 8001320:	f107 030c 	add.w	r3, r7, #12
 8001324:	2200      	movs	r2, #0
 8001326:	601a      	str	r2, [r3, #0]
 8001328:	605a      	str	r2, [r3, #4]
 800132a:	811a      	strh	r2, [r3, #8]
	uint8_t index = 0;
 800132c:	2300      	movs	r3, #0
 800132e:	75fb      	strb	r3, [r7, #23]
	uint8_t i;

	TickType_t xLastWakeTime;
	xLastWakeTime = xTaskGetTickCount();
 8001330:	f018 ff78 	bl	801a224 <xTaskGetTickCount>
 8001334:	4603      	mov	r3, r0
 8001336:	60bb      	str	r3, [r7, #8]
	for(;;)
	{
		update_encoder(&enc_instance_mot, &htim3);
 8001338:	491e      	ldr	r1, [pc, #120]	; (80013b4 <_Z12Encoder_TaskPv+0x9c>)
 800133a:	481f      	ldr	r0, [pc, #124]	; (80013b8 <_Z12Encoder_TaskPv+0xa0>)
 800133c:	f7ff ff70 	bl	8001220 <_Z14update_encoderP16encoder_instanceP17TIM_HandleTypeDef>
		velocity_values[index++] = enc_instance_mot.velocity;
 8001340:	4b1d      	ldr	r3, [pc, #116]	; (80013b8 <_Z12Encoder_TaskPv+0xa0>)
 8001342:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001346:	7dfb      	ldrb	r3, [r7, #23]
 8001348:	1c59      	adds	r1, r3, #1
 800134a:	75f9      	strb	r1, [r7, #23]
 800134c:	005b      	lsls	r3, r3, #1
 800134e:	3318      	adds	r3, #24
 8001350:	443b      	add	r3, r7
 8001352:	f823 2c0c 	strh.w	r2, [r3, #-12]

		if(index == 5)
 8001356:	7dfb      	ldrb	r3, [r7, #23]
 8001358:	2b05      	cmp	r3, #5
 800135a:	d101      	bne.n	8001360 <_Z12Encoder_TaskPv+0x48>
		{
			index = 0;
 800135c:	2300      	movs	r3, #0
 800135e:	75fb      	strb	r3, [r7, #23]
		}

		enc_instance_mot.rpm = 0.0f;
 8001360:	4b15      	ldr	r3, [pc, #84]	; (80013b8 <_Z12Encoder_TaskPv+0xa0>)
 8001362:	f04f 0200 	mov.w	r2, #0
 8001366:	609a      	str	r2, [r3, #8]
		for(i = 0 ; i < 5; ++i)
 8001368:	2300      	movs	r3, #0
 800136a:	75bb      	strb	r3, [r7, #22]
 800136c:	e018      	b.n	80013a0 <_Z12Encoder_TaskPv+0x88>
		{
			enc_instance_mot.rpm += ((float)(velocity_values[i])) / 5.0f;
 800136e:	4b12      	ldr	r3, [pc, #72]	; (80013b8 <_Z12Encoder_TaskPv+0xa0>)
 8001370:	ed93 7a02 	vldr	s14, [r3, #8]
 8001374:	7dbb      	ldrb	r3, [r7, #22]
 8001376:	005b      	lsls	r3, r3, #1
 8001378:	3318      	adds	r3, #24
 800137a:	443b      	add	r3, r7
 800137c:	f933 3c0c 	ldrsh.w	r3, [r3, #-12]
 8001380:	ee07 3a90 	vmov	s15, r3
 8001384:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001388:	eeb1 6a04 	vmov.f32	s12, #20	; 0x40a00000  5.0
 800138c:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8001390:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001394:	4b08      	ldr	r3, [pc, #32]	; (80013b8 <_Z12Encoder_TaskPv+0xa0>)
 8001396:	edc3 7a02 	vstr	s15, [r3, #8]
		for(i = 0 ; i < 5; ++i)
 800139a:	7dbb      	ldrb	r3, [r7, #22]
 800139c:	3301      	adds	r3, #1
 800139e:	75bb      	strb	r3, [r7, #22]
 80013a0:	7dbb      	ldrb	r3, [r7, #22]
 80013a2:	2b04      	cmp	r3, #4
 80013a4:	d9e3      	bls.n	800136e <_Z12Encoder_TaskPv+0x56>
		}

		vTaskDelayUntil(&xLastWakeTime, 1u);
 80013a6:	f107 0308 	add.w	r3, r7, #8
 80013aa:	2101      	movs	r1, #1
 80013ac:	4618      	mov	r0, r3
 80013ae:	f018 fce9 	bl	8019d84 <vTaskDelayUntil>
		update_encoder(&enc_instance_mot, &htim3);
 80013b2:	e7c1      	b.n	8001338 <_Z12Encoder_TaskPv+0x20>
 80013b4:	20000764 	.word	0x20000764
 80013b8:	2000017c 	.word	0x2000017c

080013bc <_Z12CalculateRPMv>:
	}
}

float CalculateRPM()
{
 80013bc:	b480      	push	{r7}
 80013be:	b083      	sub	sp, #12
 80013c0:	af00      	add	r7, sp, #0
	uint8_t i;
	static uint8_t index = 0u;;
	static float rpm_averaging_array[5];
	float averaged_rpm = 0.0f;
 80013c2:	f04f 0300 	mov.w	r3, #0
 80013c6:	603b      	str	r3, [r7, #0]
	rpm_averaging_array[index++] = enc_instance_mot.rpm;
 80013c8:	4b20      	ldr	r3, [pc, #128]	; (800144c <_Z12CalculateRPMv+0x90>)
 80013ca:	689a      	ldr	r2, [r3, #8]
 80013cc:	4b20      	ldr	r3, [pc, #128]	; (8001450 <_Z12CalculateRPMv+0x94>)
 80013ce:	781b      	ldrb	r3, [r3, #0]
 80013d0:	1c59      	adds	r1, r3, #1
 80013d2:	b2c8      	uxtb	r0, r1
 80013d4:	491e      	ldr	r1, [pc, #120]	; (8001450 <_Z12CalculateRPMv+0x94>)
 80013d6:	7008      	strb	r0, [r1, #0]
 80013d8:	491e      	ldr	r1, [pc, #120]	; (8001454 <_Z12CalculateRPMv+0x98>)
 80013da:	009b      	lsls	r3, r3, #2
 80013dc:	440b      	add	r3, r1
 80013de:	601a      	str	r2, [r3, #0]

	if(index == 5)
 80013e0:	4b1b      	ldr	r3, [pc, #108]	; (8001450 <_Z12CalculateRPMv+0x94>)
 80013e2:	781b      	ldrb	r3, [r3, #0]
 80013e4:	2b05      	cmp	r3, #5
 80013e6:	d102      	bne.n	80013ee <_Z12CalculateRPMv+0x32>
	{
		index = 0;
 80013e8:	4b19      	ldr	r3, [pc, #100]	; (8001450 <_Z12CalculateRPMv+0x94>)
 80013ea:	2200      	movs	r2, #0
 80013ec:	701a      	strb	r2, [r3, #0]
	}

	averaged_rpm = 0.0f;
 80013ee:	f04f 0300 	mov.w	r3, #0
 80013f2:	603b      	str	r3, [r7, #0]
	for(i = 0 ; i < 5; ++i)
 80013f4:	2300      	movs	r3, #0
 80013f6:	71fb      	strb	r3, [r7, #7]
 80013f8:	e012      	b.n	8001420 <_Z12CalculateRPMv+0x64>
	{
		averaged_rpm += rpm_averaging_array[i] / 5.0f;
 80013fa:	79fb      	ldrb	r3, [r7, #7]
 80013fc:	4a15      	ldr	r2, [pc, #84]	; (8001454 <_Z12CalculateRPMv+0x98>)
 80013fe:	009b      	lsls	r3, r3, #2
 8001400:	4413      	add	r3, r2
 8001402:	ed93 7a00 	vldr	s14, [r3]
 8001406:	eef1 6a04 	vmov.f32	s13, #20	; 0x40a00000  5.0
 800140a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800140e:	ed97 7a00 	vldr	s14, [r7]
 8001412:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001416:	edc7 7a00 	vstr	s15, [r7]
	for(i = 0 ; i < 5; ++i)
 800141a:	79fb      	ldrb	r3, [r7, #7]
 800141c:	3301      	adds	r3, #1
 800141e:	71fb      	strb	r3, [r7, #7]
 8001420:	79fb      	ldrb	r3, [r7, #7]
 8001422:	2b04      	cmp	r3, #4
 8001424:	d9e9      	bls.n	80013fa <_Z12CalculateRPMv+0x3e>
	}

	averaged_rpm *= -1.36f;
 8001426:	edd7 7a00 	vldr	s15, [r7]
 800142a:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 8001458 <_Z12CalculateRPMv+0x9c>
 800142e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001432:	edc7 7a00 	vstr	s15, [r7]

	return averaged_rpm;
 8001436:	683b      	ldr	r3, [r7, #0]
 8001438:	ee07 3a90 	vmov	s15, r3
}
 800143c:	eeb0 0a67 	vmov.f32	s0, s15
 8001440:	370c      	adds	r7, #12
 8001442:	46bd      	mov	sp, r7
 8001444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001448:	4770      	bx	lr
 800144a:	bf00      	nop
 800144c:	2000017c 	.word	0x2000017c
 8001450:	20000189 	.word	0x20000189
 8001454:	2000018c 	.word	0x2000018c
 8001458:	bfae147b 	.word	0xbfae147b

0800145c <_Z15readByteFromIMUh>:
extern I2C_HandleTypeDef hi2c1;
uint8_t IMU_initialized = 0u;
IMU_signals_s imu;

uint8_t readByteFromIMU(uint8_t address)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	b086      	sub	sp, #24
 8001460:	af02      	add	r7, sp, #8
 8001462:	4603      	mov	r3, r0
 8001464:	71fb      	strb	r3, [r7, #7]
	uint8_t ret = 0u;
 8001466:	2300      	movs	r3, #0
 8001468:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Master_Transmit(&hi2c1, IMU_I2C_WRITE_ADDRESS, &address, 1, 100);
 800146a:	1dfa      	adds	r2, r7, #7
 800146c:	2364      	movs	r3, #100	; 0x64
 800146e:	9300      	str	r3, [sp, #0]
 8001470:	2301      	movs	r3, #1
 8001472:	21d6      	movs	r1, #214	; 0xd6
 8001474:	4808      	ldr	r0, [pc, #32]	; (8001498 <_Z15readByteFromIMUh+0x3c>)
 8001476:	f00f fdfd 	bl	8011074 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c1, IMU_I2C_READ_ADDRESS, &ret, 1, 100);
 800147a:	f107 020f 	add.w	r2, r7, #15
 800147e:	2364      	movs	r3, #100	; 0x64
 8001480:	9300      	str	r3, [sp, #0]
 8001482:	2301      	movs	r3, #1
 8001484:	21d7      	movs	r1, #215	; 0xd7
 8001486:	4804      	ldr	r0, [pc, #16]	; (8001498 <_Z15readByteFromIMUh+0x3c>)
 8001488:	f00f fee8 	bl	801125c <HAL_I2C_Master_Receive>
	return ret;
 800148c:	7bfb      	ldrb	r3, [r7, #15]
}
 800148e:	4618      	mov	r0, r3
 8001490:	3710      	adds	r7, #16
 8001492:	46bd      	mov	sp, r7
 8001494:	bd80      	pop	{r7, pc}
 8001496:	bf00      	nop
 8001498:	200003b4 	.word	0x200003b4

0800149c <_Z8IMU_Taskv>:
uint8_t test_data[6] = {0u};

void IMU_Task()
{
 800149c:	b580      	push	{r7, lr}
 800149e:	b086      	sub	sp, #24
 80014a0:	af02      	add	r7, sp, #8
	if(IMU_initialized == 0u)
 80014a2:	4b6f      	ldr	r3, [pc, #444]	; (8001660 <_Z8IMU_Taskv+0x1c4>)
 80014a4:	781b      	ldrb	r3, [r3, #0]
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d13f      	bne.n	800152a <_Z8IMU_Taskv+0x8e>
	{
		uint8_t whoami = 0u;
 80014aa:	2300      	movs	r3, #0
 80014ac:	72bb      	strb	r3, [r7, #10]
		uint8_t whoami_reg = WHO_AM_I_ADDR;
 80014ae:	230f      	movs	r3, #15
 80014b0:	727b      	strb	r3, [r7, #9]
		HAL_I2C_Master_Transmit(&hi2c1, IMU_I2C_WRITE_ADDRESS, &whoami_reg, 1, 100);
 80014b2:	f107 0209 	add.w	r2, r7, #9
 80014b6:	2364      	movs	r3, #100	; 0x64
 80014b8:	9300      	str	r3, [sp, #0]
 80014ba:	2301      	movs	r3, #1
 80014bc:	21d6      	movs	r1, #214	; 0xd6
 80014be:	4869      	ldr	r0, [pc, #420]	; (8001664 <_Z8IMU_Taskv+0x1c8>)
 80014c0:	f00f fdd8 	bl	8011074 <HAL_I2C_Master_Transmit>
		HAL_I2C_Master_Receive(&hi2c1, IMU_I2C_READ_ADDRESS, &whoami, 1, 100);
 80014c4:	f107 020a 	add.w	r2, r7, #10
 80014c8:	2364      	movs	r3, #100	; 0x64
 80014ca:	9300      	str	r3, [sp, #0]
 80014cc:	2301      	movs	r3, #1
 80014ce:	21d7      	movs	r1, #215	; 0xd7
 80014d0:	4864      	ldr	r0, [pc, #400]	; (8001664 <_Z8IMU_Taskv+0x1c8>)
 80014d2:	f00f fec3 	bl	801125c <HAL_I2C_Master_Receive>
		if(whoami != 0x6A)
 80014d6:	7abb      	ldrb	r3, [r7, #10]
 80014d8:	2b6a      	cmp	r3, #106	; 0x6a
 80014da:	f040 80bd 	bne.w	8001658 <_Z8IMU_Taskv+0x1bc>
		{
			return;
		}

		uint8_t pData[2] = {CTRL1_XL_ADDR, 0x60};
 80014de:	f246 0310 	movw	r3, #24592	; 0x6010
 80014e2:	80bb      	strh	r3, [r7, #4]
		//HAL_I2C_Master_Transmit(&hi2c1, IMU_I2C_WRITE_ADDRESS, pData, 2, 100);

		pData[0] = CTRL2_G_ADDR;
 80014e4:	2311      	movs	r3, #17
 80014e6:	713b      	strb	r3, [r7, #4]
		HAL_I2C_Master_Transmit(&hi2c1, IMU_I2C_WRITE_ADDRESS, pData, 2, 100);
 80014e8:	1d3a      	adds	r2, r7, #4
 80014ea:	2364      	movs	r3, #100	; 0x64
 80014ec:	9300      	str	r3, [sp, #0]
 80014ee:	2302      	movs	r3, #2
 80014f0:	21d6      	movs	r1, #214	; 0xd6
 80014f2:	485c      	ldr	r0, [pc, #368]	; (8001664 <_Z8IMU_Taskv+0x1c8>)
 80014f4:	f00f fdbe 	bl	8011074 <HAL_I2C_Master_Transmit>

		uint8_t ctrl3c = readByteFromIMU(0x12);
 80014f8:	2012      	movs	r0, #18
 80014fa:	f7ff ffaf 	bl	800145c <_Z15readByteFromIMUh>
 80014fe:	4603      	mov	r3, r0
 8001500:	72fb      	strb	r3, [r7, #11]
		ctrl3c = ctrl3c & (~0x04);
 8001502:	7afb      	ldrb	r3, [r7, #11]
 8001504:	f023 0304 	bic.w	r3, r3, #4
 8001508:	72fb      	strb	r3, [r7, #11]
		pData[0] = 0x12;
 800150a:	2312      	movs	r3, #18
 800150c:	713b      	strb	r3, [r7, #4]
		pData[1] = ctrl3c;
 800150e:	7afb      	ldrb	r3, [r7, #11]
 8001510:	717b      	strb	r3, [r7, #5]
		HAL_I2C_Master_Transmit(&hi2c1, IMU_I2C_WRITE_ADDRESS, pData, 2, 100);
 8001512:	1d3a      	adds	r2, r7, #4
 8001514:	2364      	movs	r3, #100	; 0x64
 8001516:	9300      	str	r3, [sp, #0]
 8001518:	2302      	movs	r3, #2
 800151a:	21d6      	movs	r1, #214	; 0xd6
 800151c:	4851      	ldr	r0, [pc, #324]	; (8001664 <_Z8IMU_Taskv+0x1c8>)
 800151e:	f00f fda9 	bl	8011074 <HAL_I2C_Master_Transmit>

		IMU_initialized = 1u;
 8001522:	4b4f      	ldr	r3, [pc, #316]	; (8001660 <_Z8IMU_Taskv+0x1c4>)
 8001524:	2201      	movs	r2, #1
 8001526:	701a      	strb	r2, [r3, #0]
 8001528:	e097      	b.n	800165a <_Z8IMU_Taskv+0x1be>
	}
	else
	{
		uint8_t status = 0u;
 800152a:	2300      	movs	r3, #0
 800152c:	70fb      	strb	r3, [r7, #3]
		uint8_t status_reg = STATUS_REG;
 800152e:	231e      	movs	r3, #30
 8001530:	70bb      	strb	r3, [r7, #2]
		HAL_I2C_Master_Transmit(&hi2c1, IMU_I2C_WRITE_ADDRESS, &status_reg, 1, 100);
 8001532:	1cba      	adds	r2, r7, #2
 8001534:	2364      	movs	r3, #100	; 0x64
 8001536:	9300      	str	r3, [sp, #0]
 8001538:	2301      	movs	r3, #1
 800153a:	21d6      	movs	r1, #214	; 0xd6
 800153c:	4849      	ldr	r0, [pc, #292]	; (8001664 <_Z8IMU_Taskv+0x1c8>)
 800153e:	f00f fd99 	bl	8011074 <HAL_I2C_Master_Transmit>
		HAL_I2C_Master_Receive(&hi2c1, IMU_I2C_READ_ADDRESS, &status, 1, 100);
 8001542:	1cfa      	adds	r2, r7, #3
 8001544:	2364      	movs	r3, #100	; 0x64
 8001546:	9300      	str	r3, [sp, #0]
 8001548:	2301      	movs	r3, #1
 800154a:	21d7      	movs	r1, #215	; 0xd7
 800154c:	4845      	ldr	r0, [pc, #276]	; (8001664 <_Z8IMU_Taskv+0x1c8>)
 800154e:	f00f fe85 	bl	801125c <HAL_I2C_Master_Receive>

		//Accelerometer new data available
		if((status & 0x01) == 1u)
 8001552:	78fb      	ldrb	r3, [r7, #3]
 8001554:	f003 0301 	and.w	r3, r3, #1
 8001558:	2b00      	cmp	r3, #0
 800155a:	d053      	beq.n	8001604 <_Z8IMU_Taskv+0x168>
		{
			uint8_t tmp_low, tmp_high;
			tmp_low = readByteFromIMU(OUTX_L_XL);
 800155c:	2028      	movs	r0, #40	; 0x28
 800155e:	f7ff ff7d 	bl	800145c <_Z15readByteFromIMUh>
 8001562:	4603      	mov	r3, r0
 8001564:	73fb      	strb	r3, [r7, #15]
			tmp_high = readByteFromIMU(OUTX_H_XL);
 8001566:	2029      	movs	r0, #41	; 0x29
 8001568:	f7ff ff78 	bl	800145c <_Z15readByteFromIMUh>
 800156c:	4603      	mov	r3, r0
 800156e:	73bb      	strb	r3, [r7, #14]
			imu.acc_x = ((int16_t)((tmp_high << 8u)| tmp_low)) * AXL_SENSITIVITY;
 8001570:	7bbb      	ldrb	r3, [r7, #14]
 8001572:	021b      	lsls	r3, r3, #8
 8001574:	b21a      	sxth	r2, r3
 8001576:	7bfb      	ldrb	r3, [r7, #15]
 8001578:	b21b      	sxth	r3, r3
 800157a:	4313      	orrs	r3, r2
 800157c:	b21b      	sxth	r3, r3
 800157e:	ee07 3a90 	vmov	s15, r3
 8001582:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001586:	ed9f 7a38 	vldr	s14, [pc, #224]	; 8001668 <_Z8IMU_Taskv+0x1cc>
 800158a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800158e:	4b37      	ldr	r3, [pc, #220]	; (800166c <_Z8IMU_Taskv+0x1d0>)
 8001590:	edc3 7a00 	vstr	s15, [r3]

			tmp_low = readByteFromIMU(OUTY_L_XL);
 8001594:	202a      	movs	r0, #42	; 0x2a
 8001596:	f7ff ff61 	bl	800145c <_Z15readByteFromIMUh>
 800159a:	4603      	mov	r3, r0
 800159c:	73fb      	strb	r3, [r7, #15]
			tmp_high = readByteFromIMU(OUTY_L_XL);
 800159e:	202a      	movs	r0, #42	; 0x2a
 80015a0:	f7ff ff5c 	bl	800145c <_Z15readByteFromIMUh>
 80015a4:	4603      	mov	r3, r0
 80015a6:	73bb      	strb	r3, [r7, #14]
			imu.acc_y = ((int16_t)((tmp_high << 8u)| tmp_low)) * AXL_SENSITIVITY;
 80015a8:	7bbb      	ldrb	r3, [r7, #14]
 80015aa:	021b      	lsls	r3, r3, #8
 80015ac:	b21a      	sxth	r2, r3
 80015ae:	7bfb      	ldrb	r3, [r7, #15]
 80015b0:	b21b      	sxth	r3, r3
 80015b2:	4313      	orrs	r3, r2
 80015b4:	b21b      	sxth	r3, r3
 80015b6:	ee07 3a90 	vmov	s15, r3
 80015ba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80015be:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 8001668 <_Z8IMU_Taskv+0x1cc>
 80015c2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80015c6:	4b29      	ldr	r3, [pc, #164]	; (800166c <_Z8IMU_Taskv+0x1d0>)
 80015c8:	edc3 7a01 	vstr	s15, [r3, #4]

			tmp_low = readByteFromIMU(OUTZ_L_XL);
 80015cc:	202c      	movs	r0, #44	; 0x2c
 80015ce:	f7ff ff45 	bl	800145c <_Z15readByteFromIMUh>
 80015d2:	4603      	mov	r3, r0
 80015d4:	73fb      	strb	r3, [r7, #15]
			tmp_high = readByteFromIMU(OUTZ_L_XL);
 80015d6:	202c      	movs	r0, #44	; 0x2c
 80015d8:	f7ff ff40 	bl	800145c <_Z15readByteFromIMUh>
 80015dc:	4603      	mov	r3, r0
 80015de:	73bb      	strb	r3, [r7, #14]
			imu.acc_z = ((int16_t)((tmp_high << 8u)| tmp_low)) * AXL_SENSITIVITY;
 80015e0:	7bbb      	ldrb	r3, [r7, #14]
 80015e2:	021b      	lsls	r3, r3, #8
 80015e4:	b21a      	sxth	r2, r3
 80015e6:	7bfb      	ldrb	r3, [r7, #15]
 80015e8:	b21b      	sxth	r3, r3
 80015ea:	4313      	orrs	r3, r2
 80015ec:	b21b      	sxth	r3, r3
 80015ee:	ee07 3a90 	vmov	s15, r3
 80015f2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80015f6:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8001668 <_Z8IMU_Taskv+0x1cc>
 80015fa:	ee67 7a87 	vmul.f32	s15, s15, s14
 80015fe:	4b1b      	ldr	r3, [pc, #108]	; (800166c <_Z8IMU_Taskv+0x1d0>)
 8001600:	edc3 7a02 	vstr	s15, [r3, #8]

		}
		//Gyroscope new data available
		if((status & 0x02) == 2u)
 8001604:	78fb      	ldrb	r3, [r7, #3]
 8001606:	f003 0302 	and.w	r3, r3, #2
 800160a:	2b00      	cmp	r3, #0
 800160c:	d025      	beq.n	800165a <_Z8IMU_Taskv+0x1be>
		{
			uint8_t tmp_low, tmp_high;

			tmp_low = readByteFromIMU(OUTZ_L_G);
 800160e:	2026      	movs	r0, #38	; 0x26
 8001610:	f7ff ff24 	bl	800145c <_Z15readByteFromIMUh>
 8001614:	4603      	mov	r3, r0
 8001616:	737b      	strb	r3, [r7, #13]
			tmp_high = readByteFromIMU(OUTZ_H_G);
 8001618:	2027      	movs	r0, #39	; 0x27
 800161a:	f7ff ff1f 	bl	800145c <_Z15readByteFromIMUh>
 800161e:	4603      	mov	r3, r0
 8001620:	733b      	strb	r3, [r7, #12]
			imu.yaw = ((int16_t)((tmp_high << 8u)| tmp_low)) * G_SENSITIVITY / 1000.0f * 0.017453f;
 8001622:	7b3b      	ldrb	r3, [r7, #12]
 8001624:	021b      	lsls	r3, r3, #8
 8001626:	b21a      	sxth	r2, r3
 8001628:	7b7b      	ldrb	r3, [r7, #13]
 800162a:	b21b      	sxth	r3, r3
 800162c:	4313      	orrs	r3, r2
 800162e:	b21b      	sxth	r3, r3
 8001630:	ee07 3a90 	vmov	s15, r3
 8001634:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001638:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 8001670 <_Z8IMU_Taskv+0x1d4>
 800163c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001640:	eddf 6a0c 	vldr	s13, [pc, #48]	; 8001674 <_Z8IMU_Taskv+0x1d8>
 8001644:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001648:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 8001678 <_Z8IMU_Taskv+0x1dc>
 800164c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001650:	4b06      	ldr	r3, [pc, #24]	; (800166c <_Z8IMU_Taskv+0x1d0>)
 8001652:	edc3 7a03 	vstr	s15, [r3, #12]
 8001656:	e000      	b.n	800165a <_Z8IMU_Taskv+0x1be>
			return;
 8001658:	bf00      	nop
			//tmp_high = readByteFromIMU(OUTY_H_G);
			//imu.pitch = ((int16_t)((tmp_high << 8u)| tmp_low)) * G_SENSITIVITY;

		}
	}
}
 800165a:	3710      	adds	r7, #16
 800165c:	46bd      	mov	sp, r7
 800165e:	bd80      	pop	{r7, pc}
 8001660:	200001a0 	.word	0x200001a0
 8001664:	200003b4 	.word	0x200003b4
 8001668:	3d79db23 	.word	0x3d79db23
 800166c:	200001a4 	.word	0x200001a4
 8001670:	407423e2 	.word	0x407423e2
 8001674:	447a0000 	.word	0x447a0000
 8001678:	3c8ef998 	.word	0x3c8ef998

0800167c <_Z15TurnOnInfraLEDsPP12GPIO_TypeDefPtS1_S2_h>:
uint16_t infra_adc_values_test[32];
uint8_t infra_adc_data[32*2];

/* Turns on every #num and #num + 4 Infraled on every led driving IC.*/
void TurnOnInfraLEDs(GPIO_TypeDef* LE_port[2], uint16_t LE_pin[2],GPIO_TypeDef* OE_port[2], uint16_t OE_pin[2], uint8_t num)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	b086      	sub	sp, #24
 8001680:	af00      	add	r7, sp, #0
 8001682:	60f8      	str	r0, [r7, #12]
 8001684:	60b9      	str	r1, [r7, #8]
 8001686:	607a      	str	r2, [r7, #4]
 8001688:	603b      	str	r3, [r7, #0]
	uint8_t i;
	uint8_t data = 0x11 << num;
 800168a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800168e:	2211      	movs	r2, #17
 8001690:	fa02 f303 	lsl.w	r3, r2, r3
 8001694:	b2db      	uxtb	r3, r3
 8001696:	75bb      	strb	r3, [r7, #22]

	for(i = 0; i < 4; ++i)
 8001698:	2300      	movs	r3, #0
 800169a:	75fb      	strb	r3, [r7, #23]
 800169c:	e00a      	b.n	80016b4 <_Z15TurnOnInfraLEDsPP12GPIO_TypeDefPtS1_S2_h+0x38>
	{
		HAL_SPI_Transmit(&hspi2, &data, 1, HAL_MAX_DELAY);
 800169e:	f107 0116 	add.w	r1, r7, #22
 80016a2:	f04f 33ff 	mov.w	r3, #4294967295
 80016a6:	2201      	movs	r2, #1
 80016a8:	4821      	ldr	r0, [pc, #132]	; (8001730 <_Z15TurnOnInfraLEDsPP12GPIO_TypeDefPtS1_S2_h+0xb4>)
 80016aa:	f012 fab8 	bl	8013c1e <HAL_SPI_Transmit>
	for(i = 0; i < 4; ++i)
 80016ae:	7dfb      	ldrb	r3, [r7, #23]
 80016b0:	3301      	adds	r3, #1
 80016b2:	75fb      	strb	r3, [r7, #23]
 80016b4:	7dfb      	ldrb	r3, [r7, #23]
 80016b6:	2b03      	cmp	r3, #3
 80016b8:	d9f1      	bls.n	800169e <_Z15TurnOnInfraLEDsPP12GPIO_TypeDefPtS1_S2_h+0x22>
	}
	//TODO: maybe add a delay to let the latch in
	HAL_GPIO_WritePin(LE_port[0], LE_pin[0], GPIO_PIN_SET);
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	6818      	ldr	r0, [r3, #0]
 80016be:	68bb      	ldr	r3, [r7, #8]
 80016c0:	881b      	ldrh	r3, [r3, #0]
 80016c2:	2201      	movs	r2, #1
 80016c4:	4619      	mov	r1, r3
 80016c6:	f00f fc13 	bl	8010ef0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LE_port[1], LE_pin[1], GPIO_PIN_SET);
 80016ca:	68fb      	ldr	r3, [r7, #12]
 80016cc:	3304      	adds	r3, #4
 80016ce:	6818      	ldr	r0, [r3, #0]
 80016d0:	68bb      	ldr	r3, [r7, #8]
 80016d2:	3302      	adds	r3, #2
 80016d4:	881b      	ldrh	r3, [r3, #0]
 80016d6:	2201      	movs	r2, #1
 80016d8:	4619      	mov	r1, r3
 80016da:	f00f fc09 	bl	8010ef0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LE_port[0], LE_pin[0], GPIO_PIN_RESET);
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	6818      	ldr	r0, [r3, #0]
 80016e2:	68bb      	ldr	r3, [r7, #8]
 80016e4:	881b      	ldrh	r3, [r3, #0]
 80016e6:	2200      	movs	r2, #0
 80016e8:	4619      	mov	r1, r3
 80016ea:	f00f fc01 	bl	8010ef0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LE_port[1], LE_pin[1], GPIO_PIN_RESET);
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	3304      	adds	r3, #4
 80016f2:	6818      	ldr	r0, [r3, #0]
 80016f4:	68bb      	ldr	r3, [r7, #8]
 80016f6:	3302      	adds	r3, #2
 80016f8:	881b      	ldrh	r3, [r3, #0]
 80016fa:	2200      	movs	r2, #0
 80016fc:	4619      	mov	r1, r3
 80016fe:	f00f fbf7 	bl	8010ef0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(OE_port[0], OE_pin[0], GPIO_PIN_RESET);
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	6818      	ldr	r0, [r3, #0]
 8001706:	683b      	ldr	r3, [r7, #0]
 8001708:	881b      	ldrh	r3, [r3, #0]
 800170a:	2200      	movs	r2, #0
 800170c:	4619      	mov	r1, r3
 800170e:	f00f fbef 	bl	8010ef0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(OE_port[1], OE_pin[1], GPIO_PIN_RESET);
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	3304      	adds	r3, #4
 8001716:	6818      	ldr	r0, [r3, #0]
 8001718:	683b      	ldr	r3, [r7, #0]
 800171a:	3302      	adds	r3, #2
 800171c:	881b      	ldrh	r3, [r3, #0]
 800171e:	2200      	movs	r2, #0
 8001720:	4619      	mov	r1, r3
 8001722:	f00f fbe5 	bl	8010ef0 <HAL_GPIO_WritePin>

}
 8001726:	bf00      	nop
 8001728:	3718      	adds	r7, #24
 800172a:	46bd      	mov	sp, r7
 800172c:	bd80      	pop	{r7, pc}
 800172e:	bf00      	nop
 8001730:	20000650 	.word	0x20000650

08001734 <_Z10TurnOnLEDsPP12GPIO_TypeDefPtS1_S2_mm>:

void TurnOnLEDs(GPIO_TypeDef *LE_port[2], uint16_t LE_pin[2], GPIO_TypeDef *OE_port[2], uint16_t OE_pin[2], uint32_t front, uint32_t rear)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	b086      	sub	sp, #24
 8001738:	af00      	add	r7, sp, #0
 800173a:	60f8      	str	r0, [r7, #12]
 800173c:	60b9      	str	r1, [r7, #8]
 800173e:	607a      	str	r2, [r7, #4]
 8001740:	603b      	str	r3, [r7, #0]
	HAL_GPIO_WritePin(OE_port[0], OE_pin[0], GPIO_PIN_SET);
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	6818      	ldr	r0, [r3, #0]
 8001746:	683b      	ldr	r3, [r7, #0]
 8001748:	881b      	ldrh	r3, [r3, #0]
 800174a:	2201      	movs	r2, #1
 800174c:	4619      	mov	r1, r3
 800174e:	f00f fbcf 	bl	8010ef0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(OE_port[1], OE_pin[1], GPIO_PIN_SET);
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	3304      	adds	r3, #4
 8001756:	6818      	ldr	r0, [r3, #0]
 8001758:	683b      	ldr	r3, [r7, #0]
 800175a:	3302      	adds	r3, #2
 800175c:	881b      	ldrh	r3, [r3, #0]
 800175e:	2201      	movs	r2, #1
 8001760:	4619      	mov	r1, r3
 8001762:	f00f fbc5 	bl	8010ef0 <HAL_GPIO_WritePin>
	uint8_t i;
	for (i = 0; i < 4; ++i)
 8001766:	2300      	movs	r3, #0
 8001768:	75fb      	strb	r3, [r7, #23]
 800176a:	e011      	b.n	8001790 <_Z10TurnOnLEDsPP12GPIO_TypeDefPtS1_S2_mm+0x5c>
	{
		uint8_t data_front = (front >> (8u*i)) & 0xFF;
 800176c:	7dfb      	ldrb	r3, [r7, #23]
 800176e:	00db      	lsls	r3, r3, #3
 8001770:	6a3a      	ldr	r2, [r7, #32]
 8001772:	fa22 f303 	lsr.w	r3, r2, r3
 8001776:	b2db      	uxtb	r3, r3
 8001778:	75bb      	strb	r3, [r7, #22]
		HAL_SPI_Transmit(&hspi2, &data_front, 1, HAL_MAX_DELAY);
 800177a:	f107 0116 	add.w	r1, r7, #22
 800177e:	f04f 33ff 	mov.w	r3, #4294967295
 8001782:	2201      	movs	r2, #1
 8001784:	482d      	ldr	r0, [pc, #180]	; (800183c <_Z10TurnOnLEDsPP12GPIO_TypeDefPtS1_S2_mm+0x108>)
 8001786:	f012 fa4a 	bl	8013c1e <HAL_SPI_Transmit>
	for (i = 0; i < 4; ++i)
 800178a:	7dfb      	ldrb	r3, [r7, #23]
 800178c:	3301      	adds	r3, #1
 800178e:	75fb      	strb	r3, [r7, #23]
 8001790:	7dfb      	ldrb	r3, [r7, #23]
 8001792:	2b03      	cmp	r3, #3
 8001794:	d9ea      	bls.n	800176c <_Z10TurnOnLEDsPP12GPIO_TypeDefPtS1_S2_mm+0x38>
	}
	//TODO: maybe add a delay to let the latch in
	HAL_GPIO_WritePin(LE_port[0], LE_pin[0], GPIO_PIN_SET);
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	6818      	ldr	r0, [r3, #0]
 800179a:	68bb      	ldr	r3, [r7, #8]
 800179c:	881b      	ldrh	r3, [r3, #0]
 800179e:	2201      	movs	r2, #1
 80017a0:	4619      	mov	r1, r3
 80017a2:	f00f fba5 	bl	8010ef0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LE_port[0], LE_pin[0], GPIO_PIN_RESET);
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	6818      	ldr	r0, [r3, #0]
 80017aa:	68bb      	ldr	r3, [r7, #8]
 80017ac:	881b      	ldrh	r3, [r3, #0]
 80017ae:	2200      	movs	r2, #0
 80017b0:	4619      	mov	r1, r3
 80017b2:	f00f fb9d 	bl	8010ef0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(OE_port[0], OE_pin[0], GPIO_PIN_RESET);
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	6818      	ldr	r0, [r3, #0]
 80017ba:	683b      	ldr	r3, [r7, #0]
 80017bc:	881b      	ldrh	r3, [r3, #0]
 80017be:	2200      	movs	r2, #0
 80017c0:	4619      	mov	r1, r3
 80017c2:	f00f fb95 	bl	8010ef0 <HAL_GPIO_WritePin>
	for (i = 0; i < 4; ++i)
 80017c6:	2300      	movs	r3, #0
 80017c8:	75fb      	strb	r3, [r7, #23]
 80017ca:	e011      	b.n	80017f0 <_Z10TurnOnLEDsPP12GPIO_TypeDefPtS1_S2_mm+0xbc>
	{
		uint8_t data_rear = (rear >> (8u*i)) & 0xFF;
 80017cc:	7dfb      	ldrb	r3, [r7, #23]
 80017ce:	00db      	lsls	r3, r3, #3
 80017d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80017d2:	fa22 f303 	lsr.w	r3, r2, r3
 80017d6:	b2db      	uxtb	r3, r3
 80017d8:	757b      	strb	r3, [r7, #21]
		HAL_SPI_Transmit(&hspi2, &data_rear, 1, HAL_MAX_DELAY);
 80017da:	f107 0115 	add.w	r1, r7, #21
 80017de:	f04f 33ff 	mov.w	r3, #4294967295
 80017e2:	2201      	movs	r2, #1
 80017e4:	4815      	ldr	r0, [pc, #84]	; (800183c <_Z10TurnOnLEDsPP12GPIO_TypeDefPtS1_S2_mm+0x108>)
 80017e6:	f012 fa1a 	bl	8013c1e <HAL_SPI_Transmit>
	for (i = 0; i < 4; ++i)
 80017ea:	7dfb      	ldrb	r3, [r7, #23]
 80017ec:	3301      	adds	r3, #1
 80017ee:	75fb      	strb	r3, [r7, #23]
 80017f0:	7dfb      	ldrb	r3, [r7, #23]
 80017f2:	2b03      	cmp	r3, #3
 80017f4:	d9ea      	bls.n	80017cc <_Z10TurnOnLEDsPP12GPIO_TypeDefPtS1_S2_mm+0x98>
	}

	//TODO: maybe add a delay to let the latch in
	HAL_GPIO_WritePin(LE_port[1], LE_pin[1], GPIO_PIN_SET);
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	3304      	adds	r3, #4
 80017fa:	6818      	ldr	r0, [r3, #0]
 80017fc:	68bb      	ldr	r3, [r7, #8]
 80017fe:	3302      	adds	r3, #2
 8001800:	881b      	ldrh	r3, [r3, #0]
 8001802:	2201      	movs	r2, #1
 8001804:	4619      	mov	r1, r3
 8001806:	f00f fb73 	bl	8010ef0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LE_port[1], LE_pin[1], GPIO_PIN_RESET);
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	3304      	adds	r3, #4
 800180e:	6818      	ldr	r0, [r3, #0]
 8001810:	68bb      	ldr	r3, [r7, #8]
 8001812:	3302      	adds	r3, #2
 8001814:	881b      	ldrh	r3, [r3, #0]
 8001816:	2200      	movs	r2, #0
 8001818:	4619      	mov	r1, r3
 800181a:	f00f fb69 	bl	8010ef0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(OE_port[1], OE_pin[1], GPIO_PIN_RESET);
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	3304      	adds	r3, #4
 8001822:	6818      	ldr	r0, [r3, #0]
 8001824:	683b      	ldr	r3, [r7, #0]
 8001826:	3302      	adds	r3, #2
 8001828:	881b      	ldrh	r3, [r3, #0]
 800182a:	2200      	movs	r2, #0
 800182c:	4619      	mov	r1, r3
 800182e:	f00f fb5f 	bl	8010ef0 <HAL_GPIO_WritePin>
}
 8001832:	bf00      	nop
 8001834:	3718      	adds	r7, #24
 8001836:	46bd      	mov	sp, r7
 8001838:	bd80      	pop	{r7, pc}
 800183a:	bf00      	nop
 800183c:	20000650 	.word	0x20000650

08001840 <_Z16TurnOffInfraLEDsPP12GPIO_TypeDefPt>:


void TurnOffInfraLEDs(GPIO_TypeDef* OE_port[2], uint16_t OE_pin[2])
{
 8001840:	b580      	push	{r7, lr}
 8001842:	b082      	sub	sp, #8
 8001844:	af00      	add	r7, sp, #0
 8001846:	6078      	str	r0, [r7, #4]
 8001848:	6039      	str	r1, [r7, #0]
	HAL_GPIO_WritePin(OE_port[0], OE_pin[0], GPIO_PIN_SET);
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	6818      	ldr	r0, [r3, #0]
 800184e:	683b      	ldr	r3, [r7, #0]
 8001850:	881b      	ldrh	r3, [r3, #0]
 8001852:	2201      	movs	r2, #1
 8001854:	4619      	mov	r1, r3
 8001856:	f00f fb4b 	bl	8010ef0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(OE_port[1], OE_pin[1], GPIO_PIN_SET);
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	3304      	adds	r3, #4
 800185e:	6818      	ldr	r0, [r3, #0]
 8001860:	683b      	ldr	r3, [r7, #0]
 8001862:	3302      	adds	r3, #2
 8001864:	881b      	ldrh	r3, [r3, #0]
 8001866:	2201      	movs	r2, #1
 8001868:	4619      	mov	r1, r3
 800186a:	f00f fb41 	bl	8010ef0 <HAL_GPIO_WritePin>
}
 800186e:	bf00      	nop
 8001870:	3708      	adds	r7, #8
 8001872:	46bd      	mov	sp, r7
 8001874:	bd80      	pop	{r7, pc}
	...

08001878 <_Z13ReadADCValuesPP12GPIO_TypeDefPthPh>:

/* Reads out from all of the 4 adc ICs on one line sensor card 2 adc values each defined by num and writes it to res */
void ReadADCValues(GPIO_TypeDef* ports[4], uint16_t pins[4], uint8_t adc_ic_index, uint8_t *res)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	b086      	sub	sp, #24
 800187c:	af00      	add	r7, sp, #0
 800187e:	60f8      	str	r0, [r7, #12]
 8001880:	60b9      	str	r1, [r7, #8]
 8001882:	603b      	str	r3, [r7, #0]
 8001884:	4613      	mov	r3, r2
 8001886:	71fb      	strb	r3, [r7, #7]
	uint8_t i;
	uint8_t tmp[2] = {0, 0};
 8001888:	2300      	movs	r3, #0
 800188a:	82bb      	strh	r3, [r7, #20]
	HAL_GPIO_WritePin(ports[adc_ic_index], pins[adc_ic_index], GPIO_PIN_RESET);
 800188c:	79fb      	ldrb	r3, [r7, #7]
 800188e:	009b      	lsls	r3, r3, #2
 8001890:	68fa      	ldr	r2, [r7, #12]
 8001892:	4413      	add	r3, r2
 8001894:	6818      	ldr	r0, [r3, #0]
 8001896:	79fb      	ldrb	r3, [r7, #7]
 8001898:	005b      	lsls	r3, r3, #1
 800189a:	68ba      	ldr	r2, [r7, #8]
 800189c:	4413      	add	r3, r2
 800189e:	881b      	ldrh	r3, [r3, #0]
 80018a0:	2200      	movs	r2, #0
 80018a2:	4619      	mov	r1, r3
 80018a4:	f00f fb24 	bl	8010ef0 <HAL_GPIO_WritePin>
	for(i = 0; i < 8; ++i)
 80018a8:	2300      	movs	r3, #0
 80018aa:	75fb      	strb	r3, [r7, #23]
 80018ac:	e019      	b.n	80018e2 <_Z13ReadADCValuesPP12GPIO_TypeDefPthPh+0x6a>
	{
		tmp[0] = i << 3u;
 80018ae:	7dfb      	ldrb	r3, [r7, #23]
 80018b0:	00db      	lsls	r3, r3, #3
 80018b2:	b2db      	uxtb	r3, r3
 80018b4:	753b      	strb	r3, [r7, #20]
		HAL_SPI_Transmit(&hspi1, tmp, 2, HAL_MAX_DELAY);
 80018b6:	f107 0114 	add.w	r1, r7, #20
 80018ba:	f04f 33ff 	mov.w	r3, #4294967295
 80018be:	2202      	movs	r2, #2
 80018c0:	4812      	ldr	r0, [pc, #72]	; (800190c <_Z13ReadADCValuesPP12GPIO_TypeDefPthPh+0x94>)
 80018c2:	f012 f9ac 	bl	8013c1e <HAL_SPI_Transmit>
		HAL_SPI_Receive(&hspi1, &res[i*2], 2, HAL_MAX_DELAY);
 80018c6:	7dfb      	ldrb	r3, [r7, #23]
 80018c8:	005b      	lsls	r3, r3, #1
 80018ca:	461a      	mov	r2, r3
 80018cc:	683b      	ldr	r3, [r7, #0]
 80018ce:	1899      	adds	r1, r3, r2
 80018d0:	f04f 33ff 	mov.w	r3, #4294967295
 80018d4:	2202      	movs	r2, #2
 80018d6:	480d      	ldr	r0, [pc, #52]	; (800190c <_Z13ReadADCValuesPP12GPIO_TypeDefPthPh+0x94>)
 80018d8:	f012 fb0f 	bl	8013efa <HAL_SPI_Receive>
	for(i = 0; i < 8; ++i)
 80018dc:	7dfb      	ldrb	r3, [r7, #23]
 80018de:	3301      	adds	r3, #1
 80018e0:	75fb      	strb	r3, [r7, #23]
 80018e2:	7dfb      	ldrb	r3, [r7, #23]
 80018e4:	2b07      	cmp	r3, #7
 80018e6:	d9e2      	bls.n	80018ae <_Z13ReadADCValuesPP12GPIO_TypeDefPthPh+0x36>
	}
	HAL_GPIO_WritePin(ports[adc_ic_index], pins[adc_ic_index], GPIO_PIN_SET);
 80018e8:	79fb      	ldrb	r3, [r7, #7]
 80018ea:	009b      	lsls	r3, r3, #2
 80018ec:	68fa      	ldr	r2, [r7, #12]
 80018ee:	4413      	add	r3, r2
 80018f0:	6818      	ldr	r0, [r3, #0]
 80018f2:	79fb      	ldrb	r3, [r7, #7]
 80018f4:	005b      	lsls	r3, r3, #1
 80018f6:	68ba      	ldr	r2, [r7, #8]
 80018f8:	4413      	add	r3, r2
 80018fa:	881b      	ldrh	r3, [r3, #0]
 80018fc:	2201      	movs	r2, #1
 80018fe:	4619      	mov	r1, r3
 8001900:	f00f faf6 	bl	8010ef0 <HAL_GPIO_WritePin>

}
 8001904:	bf00      	nop
 8001906:	3718      	adds	r7, #24
 8001908:	46bd      	mov	sp, r7
 800190a:	bd80      	pop	{r7, pc}
 800190c:	200005ec 	.word	0x200005ec

08001910 <_Z14LineSensorTaskv>:
void LineSensorTask(void)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	b092      	sub	sp, #72	; 0x48
 8001914:	af02      	add	r7, sp, #8


#else
	uint8_t j;
	int8_t i;
	for(i = 0; i < 4; ++i)
 8001916:	2300      	movs	r3, #0
 8001918:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 800191c:	e0c0      	b.n	8001aa0 <_Z14LineSensorTaskv+0x190>
	{
		TurnOnInfraLEDs(infra_le_ports, infra_le_pins, infra_oe_ports, infra_le_pins, i);
 800191e:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8001922:	9300      	str	r3, [sp, #0]
 8001924:	4b92      	ldr	r3, [pc, #584]	; (8001b70 <_Z14LineSensorTaskv+0x260>)
 8001926:	4a93      	ldr	r2, [pc, #588]	; (8001b74 <_Z14LineSensorTaskv+0x264>)
 8001928:	4991      	ldr	r1, [pc, #580]	; (8001b70 <_Z14LineSensorTaskv+0x260>)
 800192a:	4893      	ldr	r0, [pc, #588]	; (8001b78 <_Z14LineSensorTaskv+0x268>)
 800192c:	f7ff fea6 	bl	800167c <_Z15TurnOnInfraLEDsPP12GPIO_TypeDefPtS1_S2_h>

		uint32_t delay_start = __HAL_TIM_GetCounter(&htim6);
 8001930:	4b92      	ldr	r3, [pc, #584]	; (8001b7c <_Z14LineSensorTaskv+0x26c>)
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001936:	627b      	str	r3, [r7, #36]	; 0x24
		while((__HAL_TIM_GetCounter(&htim6) - delay_start) < INFRA_WAIT_TIME);
 8001938:	bf00      	nop
 800193a:	4b90      	ldr	r3, [pc, #576]	; (8001b7c <_Z14LineSensorTaskv+0x26c>)
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001940:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001942:	1ad3      	subs	r3, r2, r3
 8001944:	2b95      	cmp	r3, #149	; 0x95
 8001946:	bf94      	ite	ls
 8001948:	2301      	movls	r3, #1
 800194a:	2300      	movhi	r3, #0
 800194c:	b2db      	uxtb	r3, r3
 800194e:	2b00      	cmp	r3, #0
 8001950:	d1f3      	bne.n	800193a <_Z14LineSensorTaskv+0x2a>

		for(j = 0; j < 4; ++j)
 8001952:	2300      	movs	r3, #0
 8001954:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8001958:	e093      	b.n	8001a82 <_Z14LineSensorTaskv+0x172>
		{
			uint8_t adc_front_values[16];
			uint8_t adc_rear_values[16];
			ReadADCValues(front_adc_cs_ports, front_adc_cs_pins, j, adc_front_values);
 800195a:	f107 0314 	add.w	r3, r7, #20
 800195e:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8001962:	4987      	ldr	r1, [pc, #540]	; (8001b80 <_Z14LineSensorTaskv+0x270>)
 8001964:	4887      	ldr	r0, [pc, #540]	; (8001b84 <_Z14LineSensorTaskv+0x274>)
 8001966:	f7ff ff87 	bl	8001878 <_Z13ReadADCValuesPP12GPIO_TypeDefPthPh>
			ReadADCValues(rear_adc_cs_ports, rear_adc_cs_pins, j, adc_rear_values);
 800196a:	1d3b      	adds	r3, r7, #4
 800196c:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8001970:	4985      	ldr	r1, [pc, #532]	; (8001b88 <_Z14LineSensorTaskv+0x278>)
 8001972:	4886      	ldr	r0, [pc, #536]	; (8001b8c <_Z14LineSensorTaskv+0x27c>)
 8001974:	f7ff ff80 	bl	8001878 <_Z13ReadADCValuesPP12GPIO_TypeDefPthPh>

			// i = id of LED, j = id of ic, adc_ic_values contains the 8 adc values from one ic
			ls_data.adc_values_f[j*8 + i] = (uint16_t)(adc_front_values[i*2] << 8u) | (adc_front_values[i*2+1]);
 8001978:	f997 303e 	ldrsb.w	r3, [r7, #62]	; 0x3e
 800197c:	005b      	lsls	r3, r3, #1
 800197e:	3340      	adds	r3, #64	; 0x40
 8001980:	443b      	add	r3, r7
 8001982:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 8001986:	b29b      	uxth	r3, r3
 8001988:	021b      	lsls	r3, r3, #8
 800198a:	b299      	uxth	r1, r3
 800198c:	f997 303e 	ldrsb.w	r3, [r7, #62]	; 0x3e
 8001990:	005b      	lsls	r3, r3, #1
 8001992:	3301      	adds	r3, #1
 8001994:	3340      	adds	r3, #64	; 0x40
 8001996:	443b      	add	r3, r7
 8001998:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 800199c:	b29a      	uxth	r2, r3
 800199e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80019a2:	00d8      	lsls	r0, r3, #3
 80019a4:	f997 303e 	ldrsb.w	r3, [r7, #62]	; 0x3e
 80019a8:	4403      	add	r3, r0
 80019aa:	430a      	orrs	r2, r1
 80019ac:	b291      	uxth	r1, r2
 80019ae:	4a78      	ldr	r2, [pc, #480]	; (8001b90 <_Z14LineSensorTaskv+0x280>)
 80019b0:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			ls_data.adc_values_f[j*8 + i + 4] = (uint16_t)(adc_front_values[(i*2) + 8] << 8u) | (adc_front_values[(i*2) + 8 + 1]);
 80019b4:	f997 303e 	ldrsb.w	r3, [r7, #62]	; 0x3e
 80019b8:	3304      	adds	r3, #4
 80019ba:	005b      	lsls	r3, r3, #1
 80019bc:	3340      	adds	r3, #64	; 0x40
 80019be:	443b      	add	r3, r7
 80019c0:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 80019c4:	b29b      	uxth	r3, r3
 80019c6:	021b      	lsls	r3, r3, #8
 80019c8:	b299      	uxth	r1, r3
 80019ca:	f997 303e 	ldrsb.w	r3, [r7, #62]	; 0x3e
 80019ce:	3304      	adds	r3, #4
 80019d0:	005b      	lsls	r3, r3, #1
 80019d2:	3301      	adds	r3, #1
 80019d4:	3340      	adds	r3, #64	; 0x40
 80019d6:	443b      	add	r3, r7
 80019d8:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 80019dc:	b29a      	uxth	r2, r3
 80019de:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80019e2:	00d8      	lsls	r0, r3, #3
 80019e4:	f997 303e 	ldrsb.w	r3, [r7, #62]	; 0x3e
 80019e8:	4403      	add	r3, r0
 80019ea:	3304      	adds	r3, #4
 80019ec:	430a      	orrs	r2, r1
 80019ee:	b291      	uxth	r1, r2
 80019f0:	4a67      	ldr	r2, [pc, #412]	; (8001b90 <_Z14LineSensorTaskv+0x280>)
 80019f2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

			ls_data.adc_values_r[j*8 + i] = (uint16_t)(adc_rear_values[i*2] << 8u) | (adc_rear_values[i*2+1]);
 80019f6:	f997 303e 	ldrsb.w	r3, [r7, #62]	; 0x3e
 80019fa:	005b      	lsls	r3, r3, #1
 80019fc:	3340      	adds	r3, #64	; 0x40
 80019fe:	443b      	add	r3, r7
 8001a00:	f813 3c3c 	ldrb.w	r3, [r3, #-60]
 8001a04:	b29b      	uxth	r3, r3
 8001a06:	021b      	lsls	r3, r3, #8
 8001a08:	b299      	uxth	r1, r3
 8001a0a:	f997 303e 	ldrsb.w	r3, [r7, #62]	; 0x3e
 8001a0e:	005b      	lsls	r3, r3, #1
 8001a10:	3301      	adds	r3, #1
 8001a12:	3340      	adds	r3, #64	; 0x40
 8001a14:	443b      	add	r3, r7
 8001a16:	f813 3c3c 	ldrb.w	r3, [r3, #-60]
 8001a1a:	b29a      	uxth	r2, r3
 8001a1c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001a20:	00d8      	lsls	r0, r3, #3
 8001a22:	f997 303e 	ldrsb.w	r3, [r7, #62]	; 0x3e
 8001a26:	4403      	add	r3, r0
 8001a28:	430a      	orrs	r2, r1
 8001a2a:	b291      	uxth	r1, r2
 8001a2c:	4a58      	ldr	r2, [pc, #352]	; (8001b90 <_Z14LineSensorTaskv+0x280>)
 8001a2e:	3320      	adds	r3, #32
 8001a30:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			ls_data.adc_values_r[j*8 + i + 4] = (uint16_t)(adc_rear_values[(i*2) + 8] << 8u) | (adc_rear_values[(i*2) + 8 + 1]);
 8001a34:	f997 303e 	ldrsb.w	r3, [r7, #62]	; 0x3e
 8001a38:	3304      	adds	r3, #4
 8001a3a:	005b      	lsls	r3, r3, #1
 8001a3c:	3340      	adds	r3, #64	; 0x40
 8001a3e:	443b      	add	r3, r7
 8001a40:	f813 3c3c 	ldrb.w	r3, [r3, #-60]
 8001a44:	b29b      	uxth	r3, r3
 8001a46:	021b      	lsls	r3, r3, #8
 8001a48:	b299      	uxth	r1, r3
 8001a4a:	f997 303e 	ldrsb.w	r3, [r7, #62]	; 0x3e
 8001a4e:	3304      	adds	r3, #4
 8001a50:	005b      	lsls	r3, r3, #1
 8001a52:	3301      	adds	r3, #1
 8001a54:	3340      	adds	r3, #64	; 0x40
 8001a56:	443b      	add	r3, r7
 8001a58:	f813 3c3c 	ldrb.w	r3, [r3, #-60]
 8001a5c:	b29a      	uxth	r2, r3
 8001a5e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001a62:	00d8      	lsls	r0, r3, #3
 8001a64:	f997 303e 	ldrsb.w	r3, [r7, #62]	; 0x3e
 8001a68:	4403      	add	r3, r0
 8001a6a:	3304      	adds	r3, #4
 8001a6c:	430a      	orrs	r2, r1
 8001a6e:	b291      	uxth	r1, r2
 8001a70:	4a47      	ldr	r2, [pc, #284]	; (8001b90 <_Z14LineSensorTaskv+0x280>)
 8001a72:	3320      	adds	r3, #32
 8001a74:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		for(j = 0; j < 4; ++j)
 8001a78:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001a7c:	3301      	adds	r3, #1
 8001a7e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8001a82:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001a86:	2b03      	cmp	r3, #3
 8001a88:	f67f af67 	bls.w	800195a <_Z14LineSensorTaskv+0x4a>
		}

		TurnOffInfraLEDs(infra_oe_ports, infra_le_pins);
 8001a8c:	4938      	ldr	r1, [pc, #224]	; (8001b70 <_Z14LineSensorTaskv+0x260>)
 8001a8e:	4839      	ldr	r0, [pc, #228]	; (8001b74 <_Z14LineSensorTaskv+0x264>)
 8001a90:	f7ff fed6 	bl	8001840 <_Z16TurnOffInfraLEDsPP12GPIO_TypeDefPt>
	for(i = 0; i < 4; ++i)
 8001a94:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8001a98:	3301      	adds	r3, #1
 8001a9a:	b2db      	uxtb	r3, r3
 8001a9c:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 8001aa0:	f997 303e 	ldrsb.w	r3, [r7, #62]	; 0x3e
 8001aa4:	2b03      	cmp	r3, #3
 8001aa6:	f77f af3a 	ble.w	800191e <_Z14LineSensorTaskv+0xe>
	}

	float denominator_f = 0.0f;
 8001aaa:	f04f 0300 	mov.w	r3, #0
 8001aae:	63bb      	str	r3, [r7, #56]	; 0x38
	float denominator_r = 0.0f;
 8001ab0:	f04f 0300 	mov.w	r3, #0
 8001ab4:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t led_front = 0u;
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t led_rear = 0u;
 8001aba:	2300      	movs	r3, #0
 8001abc:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint8_t front_max_index = 0u;
 8001abe:	2300      	movs	r3, #0
 8001ac0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	uint8_t rear_max_index = 0u;
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	for(i = 1; i < 31; ++i)
 8001aca:	2301      	movs	r3, #1
 8001acc:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 8001ad0:	e035      	b.n	8001b3e <_Z14LineSensorTaskv+0x22e>
	{
		if(ls_data.adc_values_f[i] > ls_data.adc_values_f[front_max_index])
 8001ad2:	f997 303e 	ldrsb.w	r3, [r7, #62]	; 0x3e
 8001ad6:	4a2e      	ldr	r2, [pc, #184]	; (8001b90 <_Z14LineSensorTaskv+0x280>)
 8001ad8:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8001adc:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8001ae0:	492b      	ldr	r1, [pc, #172]	; (8001b90 <_Z14LineSensorTaskv+0x280>)
 8001ae2:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001ae6:	429a      	cmp	r2, r3
 8001ae8:	d903      	bls.n	8001af2 <_Z14LineSensorTaskv+0x1e2>
		{
			front_max_index = i;
 8001aea:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8001aee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
		}
		if(ls_data.adc_values_r[i] > ls_data.adc_values_r[rear_max_index])
 8001af2:	f997 303e 	ldrsb.w	r3, [r7, #62]	; 0x3e
 8001af6:	4a26      	ldr	r2, [pc, #152]	; (8001b90 <_Z14LineSensorTaskv+0x280>)
 8001af8:	3320      	adds	r3, #32
 8001afa:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8001afe:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8001b02:	4923      	ldr	r1, [pc, #140]	; (8001b90 <_Z14LineSensorTaskv+0x280>)
 8001b04:	3320      	adds	r3, #32
 8001b06:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001b0a:	429a      	cmp	r2, r3
 8001b0c:	d903      	bls.n	8001b16 <_Z14LineSensorTaskv+0x206>
		{
			rear_max_index = i;
 8001b0e:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8001b12:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
		}
		ls_data.front_detection[i] = true;
 8001b16:	f997 303e 	ldrsb.w	r3, [r7, #62]	; 0x3e
 8001b1a:	4a1d      	ldr	r2, [pc, #116]	; (8001b90 <_Z14LineSensorTaskv+0x280>)
 8001b1c:	4413      	add	r3, r2
 8001b1e:	2201      	movs	r2, #1
 8001b20:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
		ls_data.rear_detection[i] = true;
 8001b24:	f997 303e 	ldrsb.w	r3, [r7, #62]	; 0x3e
 8001b28:	4a19      	ldr	r2, [pc, #100]	; (8001b90 <_Z14LineSensorTaskv+0x280>)
 8001b2a:	4413      	add	r3, r2
 8001b2c:	2201      	movs	r2, #1
 8001b2e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
	for(i = 1; i < 31; ++i)
 8001b32:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8001b36:	3301      	adds	r3, #1
 8001b38:	b2db      	uxtb	r3, r3
 8001b3a:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 8001b3e:	f997 303e 	ldrsb.w	r3, [r7, #62]	; 0x3e
 8001b42:	2b1e      	cmp	r3, #30
 8001b44:	ddc5      	ble.n	8001ad2 <_Z14LineSensorTaskv+0x1c2>
	}

	ls_data.front_detection[0] = true;
 8001b46:	4b12      	ldr	r3, [pc, #72]	; (8001b90 <_Z14LineSensorTaskv+0x280>)
 8001b48:	2201      	movs	r2, #1
 8001b4a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
	ls_data.front_detection[31] = true;
 8001b4e:	4b10      	ldr	r3, [pc, #64]	; (8001b90 <_Z14LineSensorTaskv+0x280>)
 8001b50:	2201      	movs	r2, #1
 8001b52:	f883 209f 	strb.w	r2, [r3, #159]	; 0x9f
	ls_data.rear_detection[0] = true;
 8001b56:	4b0e      	ldr	r3, [pc, #56]	; (8001b90 <_Z14LineSensorTaskv+0x280>)
 8001b58:	2201      	movs	r2, #1
 8001b5a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
	ls_data.rear_detection[31] = true;
 8001b5e:	4b0c      	ldr	r3, [pc, #48]	; (8001b90 <_Z14LineSensorTaskv+0x280>)
 8001b60:	2201      	movs	r2, #1
 8001b62:	f883 20bf 	strb.w	r2, [r3, #191]	; 0xbf
	for(i = 1; i < 31; ++i)
 8001b66:	2301      	movs	r3, #1
 8001b68:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 8001b6c:	e0a3      	b.n	8001cb6 <_Z14LineSensorTaskv+0x3a6>
 8001b6e:	bf00      	nop
 8001b70:	20000068 	.word	0x20000068
 8001b74:	2000006c 	.word	0x2000006c
 8001b78:	20000060 	.word	0x20000060
 8001b7c:	200007fc 	.word	0x200007fc
 8001b80:	20000040 	.word	0x20000040
 8001b84:	20000030 	.word	0x20000030
 8001b88:	20000058 	.word	0x20000058
 8001b8c:	20000048 	.word	0x20000048
 8001b90:	200001bc 	.word	0x200001bc
	{
		ls_data.position_front += (float)((i - 16.0f/* - front_max_index*/) * ls_data.adc_values_f[i]);
 8001b94:	4b64      	ldr	r3, [pc, #400]	; (8001d28 <_Z14LineSensorTaskv+0x418>)
 8001b96:	ed93 7a30 	vldr	s14, [r3, #192]	; 0xc0
 8001b9a:	f997 303e 	ldrsb.w	r3, [r7, #62]	; 0x3e
 8001b9e:	ee07 3a90 	vmov	s15, r3
 8001ba2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001ba6:	eef3 6a00 	vmov.f32	s13, #48	; 0x41800000  16.0
 8001baa:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8001bae:	f997 303e 	ldrsb.w	r3, [r7, #62]	; 0x3e
 8001bb2:	4a5d      	ldr	r2, [pc, #372]	; (8001d28 <_Z14LineSensorTaskv+0x418>)
 8001bb4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001bb8:	ee07 3a90 	vmov	s15, r3
 8001bbc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001bc0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001bc4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001bc8:	4b57      	ldr	r3, [pc, #348]	; (8001d28 <_Z14LineSensorTaskv+0x418>)
 8001bca:	edc3 7a30 	vstr	s15, [r3, #192]	; 0xc0
		ls_data.position_rear += (float)((i - 16.0f/* - rear_max_index*/) * ls_data.adc_values_r[i]);
 8001bce:	4b56      	ldr	r3, [pc, #344]	; (8001d28 <_Z14LineSensorTaskv+0x418>)
 8001bd0:	ed93 7a31 	vldr	s14, [r3, #196]	; 0xc4
 8001bd4:	f997 303e 	ldrsb.w	r3, [r7, #62]	; 0x3e
 8001bd8:	ee07 3a90 	vmov	s15, r3
 8001bdc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001be0:	eef3 6a00 	vmov.f32	s13, #48	; 0x41800000  16.0
 8001be4:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8001be8:	f997 303e 	ldrsb.w	r3, [r7, #62]	; 0x3e
 8001bec:	4a4e      	ldr	r2, [pc, #312]	; (8001d28 <_Z14LineSensorTaskv+0x418>)
 8001bee:	3320      	adds	r3, #32
 8001bf0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001bf4:	ee07 3a90 	vmov	s15, r3
 8001bf8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001bfc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001c00:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c04:	4b48      	ldr	r3, [pc, #288]	; (8001d28 <_Z14LineSensorTaskv+0x418>)
 8001c06:	edc3 7a31 	vstr	s15, [r3, #196]	; 0xc4
		denominator_f += (float)(ls_data.adc_values_f[i]);
 8001c0a:	f997 303e 	ldrsb.w	r3, [r7, #62]	; 0x3e
 8001c0e:	4a46      	ldr	r2, [pc, #280]	; (8001d28 <_Z14LineSensorTaskv+0x418>)
 8001c10:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001c14:	ee07 3a90 	vmov	s15, r3
 8001c18:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001c1c:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8001c20:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c24:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
		denominator_r += (float)(ls_data.adc_values_r[i]);
 8001c28:	f997 303e 	ldrsb.w	r3, [r7, #62]	; 0x3e
 8001c2c:	4a3e      	ldr	r2, [pc, #248]	; (8001d28 <_Z14LineSensorTaskv+0x418>)
 8001c2e:	3320      	adds	r3, #32
 8001c30:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001c34:	ee07 3a90 	vmov	s15, r3
 8001c38:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001c3c:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8001c40:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c44:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
		if(ls_data.adc_values_f[i] > 2000)
 8001c48:	f997 303e 	ldrsb.w	r3, [r7, #62]	; 0x3e
 8001c4c:	4a36      	ldr	r2, [pc, #216]	; (8001d28 <_Z14LineSensorTaskv+0x418>)
 8001c4e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001c52:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8001c56:	d90f      	bls.n	8001c78 <_Z14LineSensorTaskv+0x368>
		{
			led_front |= 0x80000000 >> (i);
 8001c58:	f997 303e 	ldrsb.w	r3, [r7, #62]	; 0x3e
 8001c5c:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8001c60:	fa22 f303 	lsr.w	r3, r2, r3
 8001c64:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001c66:	4313      	orrs	r3, r2
 8001c68:	633b      	str	r3, [r7, #48]	; 0x30
			ls_data.front_detection[i] = false;
 8001c6a:	f997 303e 	ldrsb.w	r3, [r7, #62]	; 0x3e
 8001c6e:	4a2e      	ldr	r2, [pc, #184]	; (8001d28 <_Z14LineSensorTaskv+0x418>)
 8001c70:	4413      	add	r3, r2
 8001c72:	2200      	movs	r2, #0
 8001c74:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

		}

		if(ls_data.adc_values_r[i] > 2000)
 8001c78:	f997 303e 	ldrsb.w	r3, [r7, #62]	; 0x3e
 8001c7c:	4a2a      	ldr	r2, [pc, #168]	; (8001d28 <_Z14LineSensorTaskv+0x418>)
 8001c7e:	3320      	adds	r3, #32
 8001c80:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001c84:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8001c88:	d90f      	bls.n	8001caa <_Z14LineSensorTaskv+0x39a>
		{
			led_rear |= 0x80000000 >> (i);
 8001c8a:	f997 303e 	ldrsb.w	r3, [r7, #62]	; 0x3e
 8001c8e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8001c92:	fa22 f303 	lsr.w	r3, r2, r3
 8001c96:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001c98:	4313      	orrs	r3, r2
 8001c9a:	62fb      	str	r3, [r7, #44]	; 0x2c
			ls_data.rear_detection[i] = false;
 8001c9c:	f997 303e 	ldrsb.w	r3, [r7, #62]	; 0x3e
 8001ca0:	4a21      	ldr	r2, [pc, #132]	; (8001d28 <_Z14LineSensorTaskv+0x418>)
 8001ca2:	4413      	add	r3, r2
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
	for(i = 1; i < 31; ++i)
 8001caa:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8001cae:	3301      	adds	r3, #1
 8001cb0:	b2db      	uxtb	r3, r3
 8001cb2:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 8001cb6:	f997 303e 	ldrsb.w	r3, [r7, #62]	; 0x3e
 8001cba:	2b1e      	cmp	r3, #30
 8001cbc:	f77f af6a 	ble.w	8001b94 <_Z14LineSensorTaskv+0x284>
		}
	}

	TurnOnLEDs(led_le_ports, led_le_pins, led_oe_ports, led_oe_pins, led_front, led_rear);
 8001cc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001cc2:	9301      	str	r3, [sp, #4]
 8001cc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001cc6:	9300      	str	r3, [sp, #0]
 8001cc8:	4b18      	ldr	r3, [pc, #96]	; (8001d2c <_Z14LineSensorTaskv+0x41c>)
 8001cca:	4a19      	ldr	r2, [pc, #100]	; (8001d30 <_Z14LineSensorTaskv+0x420>)
 8001ccc:	4919      	ldr	r1, [pc, #100]	; (8001d34 <_Z14LineSensorTaskv+0x424>)
 8001cce:	481a      	ldr	r0, [pc, #104]	; (8001d38 <_Z14LineSensorTaskv+0x428>)
 8001cd0:	f7ff fd30 	bl	8001734 <_Z10TurnOnLEDsPP12GPIO_TypeDefPtS1_S2_mm>

	ls_data.position_front = -1.0f * ls_data.position_front * 2.5f / 100.0f / denominator_f;
 8001cd4:	4b14      	ldr	r3, [pc, #80]	; (8001d28 <_Z14LineSensorTaskv+0x418>)
 8001cd6:	edd3 7a30 	vldr	s15, [r3, #192]	; 0xc0
 8001cda:	eef1 7a67 	vneg.f32	s15, s15
 8001cde:	eeb0 7a04 	vmov.f32	s14, #4	; 0x40200000  2.5
 8001ce2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001ce6:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8001d3c <_Z14LineSensorTaskv+0x42c>
 8001cea:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001cee:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8001cf2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001cf6:	4b0c      	ldr	r3, [pc, #48]	; (8001d28 <_Z14LineSensorTaskv+0x418>)
 8001cf8:	edc3 7a30 	vstr	s15, [r3, #192]	; 0xc0
	ls_data.position_rear = ls_data.position_rear * 2.5f / 100.0f / denominator_r;
 8001cfc:	4b0a      	ldr	r3, [pc, #40]	; (8001d28 <_Z14LineSensorTaskv+0x418>)
 8001cfe:	edd3 7a31 	vldr	s15, [r3, #196]	; 0xc4
 8001d02:	eeb0 7a04 	vmov.f32	s14, #4	; 0x40200000  2.5
 8001d06:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001d0a:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8001d3c <_Z14LineSensorTaskv+0x42c>
 8001d0e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001d12:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8001d16:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001d1a:	4b03      	ldr	r3, [pc, #12]	; (8001d28 <_Z14LineSensorTaskv+0x418>)
 8001d1c:	edc3 7a31 	vstr	s15, [r3, #196]	; 0xc4


#endif
}
 8001d20:	bf00      	nop
 8001d22:	3740      	adds	r7, #64	; 0x40
 8001d24:	46bd      	mov	sp, r7
 8001d26:	bd80      	pop	{r7, pc}
 8001d28:	200001bc 	.word	0x200001bc
 8001d2c:	20000088 	.word	0x20000088
 8001d30:	20000080 	.word	0x20000080
 8001d34:	2000007c 	.word	0x2000007c
 8001d38:	20000074 	.word	0x20000074
 8001d3c:	42c80000 	.word	0x42c80000

08001d40 <_Z16MotorControlTaskv>:
extern uint32_t usWidth_throttle;

float pi_integral_error = 0.0f;

void MotorControlTask()
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	b082      	sub	sp, #8
 8001d44:	af00      	add	r7, sp, #0

	if((usWidth_throttle > 1800) && (usWidth_throttle < 2800))
 8001d46:	4b61      	ldr	r3, [pc, #388]	; (8001ecc <_Z16MotorControlTaskv+0x18c>)
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	f5b3 6fe1 	cmp.w	r3, #1800	; 0x708
 8001d4e:	d90a      	bls.n	8001d66 <_Z16MotorControlTaskv+0x26>
 8001d50:	4b5e      	ldr	r3, [pc, #376]	; (8001ecc <_Z16MotorControlTaskv+0x18c>)
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	f5b3 6f2f 	cmp.w	r3, #2800	; 0xaf0
 8001d58:	d205      	bcs.n	8001d66 <_Z16MotorControlTaskv+0x26>
	{
		HAL_GPIO_WritePin(DRIVE_ENABLE_GPIO_Port, DRIVE_ENABLE_Pin, GPIO_PIN_SET);
 8001d5a:	2201      	movs	r2, #1
 8001d5c:	2108      	movs	r1, #8
 8001d5e:	485c      	ldr	r0, [pc, #368]	; (8001ed0 <_Z16MotorControlTaskv+0x190>)
 8001d60:	f00f f8c6 	bl	8010ef0 <HAL_GPIO_WritePin>
 8001d64:	e008      	b.n	8001d78 <_Z16MotorControlTaskv+0x38>
	}
	else
	{
		HAL_GPIO_WritePin(DRIVE_ENABLE_GPIO_Port, DRIVE_ENABLE_Pin, GPIO_PIN_RESET);
 8001d66:	2200      	movs	r2, #0
 8001d68:	2108      	movs	r1, #8
 8001d6a:	4859      	ldr	r0, [pc, #356]	; (8001ed0 <_Z16MotorControlTaskv+0x190>)
 8001d6c:	f00f f8c0 	bl	8010ef0 <HAL_GPIO_WritePin>
		pi_integral_error = 0.0f;
 8001d70:	4b58      	ldr	r3, [pc, #352]	; (8001ed4 <_Z16MotorControlTaskv+0x194>)
 8001d72:	f04f 0200 	mov.w	r2, #0
 8001d76:	601a      	str	r2, [r3, #0]
	}
	motorcontrol.battery_voltage = ((float)(adc_values.motor_batt_voltage_raw)) / 4096.0f * 3.3f * ANALOG_TO_MOTOR_BATT;
 8001d78:	4b57      	ldr	r3, [pc, #348]	; (8001ed8 <_Z16MotorControlTaskv+0x198>)
 8001d7a:	881b      	ldrh	r3, [r3, #0]
 8001d7c:	ee07 3a90 	vmov	s15, r3
 8001d80:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001d84:	eddf 6a55 	vldr	s13, [pc, #340]	; 8001edc <_Z16MotorControlTaskv+0x19c>
 8001d88:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001d8c:	ed9f 7a54 	vldr	s14, [pc, #336]	; 8001ee0 <_Z16MotorControlTaskv+0x1a0>
 8001d90:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001d94:	eeb1 7a08 	vmov.f32	s14, #24	; 0x40c00000  6.0
 8001d98:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001d9c:	4b51      	ldr	r3, [pc, #324]	; (8001ee4 <_Z16MotorControlTaskv+0x1a4>)
 8001d9e:	edc3 7a00 	vstr	s15, [r3]
	motorcontrol.motor_current = (((float)((adc_values.motor_curr_raw)) / 4096.0f) * 3.3f - MOTOR_CURR_NULL) / MOTOR_CURR_SENSITIVITY;
 8001da2:	4b4d      	ldr	r3, [pc, #308]	; (8001ed8 <_Z16MotorControlTaskv+0x198>)
 8001da4:	885b      	ldrh	r3, [r3, #2]
 8001da6:	ee07 3a90 	vmov	s15, r3
 8001daa:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001dae:	eddf 6a4b 	vldr	s13, [pc, #300]	; 8001edc <_Z16MotorControlTaskv+0x19c>
 8001db2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001db6:	ed9f 7a4a 	vldr	s14, [pc, #296]	; 8001ee0 <_Z16MotorControlTaskv+0x1a0>
 8001dba:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001dbe:	ed9f 7a4a 	vldr	s14, [pc, #296]	; 8001ee8 <_Z16MotorControlTaskv+0x1a8>
 8001dc2:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8001dc6:	eddf 6a49 	vldr	s13, [pc, #292]	; 8001eec <_Z16MotorControlTaskv+0x1ac>
 8001dca:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001dce:	4b45      	ldr	r3, [pc, #276]	; (8001ee4 <_Z16MotorControlTaskv+0x1a4>)
 8001dd0:	edc3 7a01 	vstr	s15, [r3, #4]

	float pi_error = motorcontrol.target_velocity - motorcontrol.actual_velocity;
 8001dd4:	4b43      	ldr	r3, [pc, #268]	; (8001ee4 <_Z16MotorControlTaskv+0x1a4>)
 8001dd6:	ed93 7a03 	vldr	s14, [r3, #12]
 8001dda:	4b42      	ldr	r3, [pc, #264]	; (8001ee4 <_Z16MotorControlTaskv+0x1a4>)
 8001ddc:	edd3 7a02 	vldr	s15, [r3, #8]
 8001de0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001de4:	edc7 7a01 	vstr	s15, [r7, #4]
	float pi_proportional_error = pi_error * SPEED_CONTROLER_KP;
 8001de8:	edd7 7a01 	vldr	s15, [r7, #4]
 8001dec:	ed9f 7a40 	vldr	s14, [pc, #256]	; 8001ef0 <_Z16MotorControlTaskv+0x1b0>
 8001df0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001df4:	edc7 7a00 	vstr	s15, [r7]
	pi_integral_error += pi_error * SPEED_CONTROLLER_KI / MOTOR_CONTROL_TASK_FREQ;
 8001df8:	edd7 7a01 	vldr	s15, [r7, #4]
 8001dfc:	ed9f 7a3d 	vldr	s14, [pc, #244]	; 8001ef4 <_Z16MotorControlTaskv+0x1b4>
 8001e00:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001e04:	eddf 6a3c 	vldr	s13, [pc, #240]	; 8001ef8 <_Z16MotorControlTaskv+0x1b8>
 8001e08:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001e0c:	4b31      	ldr	r3, [pc, #196]	; (8001ed4 <_Z16MotorControlTaskv+0x194>)
 8001e0e:	edd3 7a00 	vldr	s15, [r3]
 8001e12:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e16:	4b2f      	ldr	r3, [pc, #188]	; (8001ed4 <_Z16MotorControlTaskv+0x194>)
 8001e18:	edc3 7a00 	vstr	s15, [r3]

	motorcontrol.duty_cycle = pi_integral_error + pi_proportional_error;
 8001e1c:	4b2d      	ldr	r3, [pc, #180]	; (8001ed4 <_Z16MotorControlTaskv+0x194>)
 8001e1e:	ed93 7a00 	vldr	s14, [r3]
 8001e22:	edd7 7a00 	vldr	s15, [r7]
 8001e26:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e2a:	4b2e      	ldr	r3, [pc, #184]	; (8001ee4 <_Z16MotorControlTaskv+0x1a4>)
 8001e2c:	edc3 7a04 	vstr	s15, [r3, #16]
	motorcontrol.duty_cycle += 0.5f;
 8001e30:	4b2c      	ldr	r3, [pc, #176]	; (8001ee4 <_Z16MotorControlTaskv+0x1a4>)
 8001e32:	edd3 7a04 	vldr	s15, [r3, #16]
 8001e36:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001e3a:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001e3e:	4b29      	ldr	r3, [pc, #164]	; (8001ee4 <_Z16MotorControlTaskv+0x1a4>)
 8001e40:	edc3 7a04 	vstr	s15, [r3, #16]
	motorcontrol.duty_cycle = (motorcontrol.duty_cycle > 0.95f) ? 0.95f : motorcontrol.duty_cycle;
 8001e44:	4b27      	ldr	r3, [pc, #156]	; (8001ee4 <_Z16MotorControlTaskv+0x1a4>)
 8001e46:	edd3 7a04 	vldr	s15, [r3, #16]
 8001e4a:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 8001efc <_Z16MotorControlTaskv+0x1bc>
 8001e4e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001e52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e56:	dd01      	ble.n	8001e5c <_Z16MotorControlTaskv+0x11c>
 8001e58:	4b29      	ldr	r3, [pc, #164]	; (8001f00 <_Z16MotorControlTaskv+0x1c0>)
 8001e5a:	e001      	b.n	8001e60 <_Z16MotorControlTaskv+0x120>
 8001e5c:	4b21      	ldr	r3, [pc, #132]	; (8001ee4 <_Z16MotorControlTaskv+0x1a4>)
 8001e5e:	691b      	ldr	r3, [r3, #16]
 8001e60:	4a20      	ldr	r2, [pc, #128]	; (8001ee4 <_Z16MotorControlTaskv+0x1a4>)
 8001e62:	6113      	str	r3, [r2, #16]
	motorcontrol.duty_cycle = (motorcontrol.duty_cycle < 0.5f) ? 0.05f : motorcontrol.duty_cycle;
 8001e64:	4b1f      	ldr	r3, [pc, #124]	; (8001ee4 <_Z16MotorControlTaskv+0x1a4>)
 8001e66:	edd3 7a04 	vldr	s15, [r3, #16]
 8001e6a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001e6e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001e72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e76:	d501      	bpl.n	8001e7c <_Z16MotorControlTaskv+0x13c>
 8001e78:	4b22      	ldr	r3, [pc, #136]	; (8001f04 <_Z16MotorControlTaskv+0x1c4>)
 8001e7a:	e001      	b.n	8001e80 <_Z16MotorControlTaskv+0x140>
 8001e7c:	4b19      	ldr	r3, [pc, #100]	; (8001ee4 <_Z16MotorControlTaskv+0x1a4>)
 8001e7e:	691b      	ldr	r3, [r3, #16]
 8001e80:	4a18      	ldr	r2, [pc, #96]	; (8001ee4 <_Z16MotorControlTaskv+0x1a4>)
 8001e82:	6113      	str	r3, [r2, #16]

	//float duty_cycle = 0.6f;
    __HAL_TIM_SET_COMPARE(&htim5, TIM_CHANNEL_4, motorcontrol.duty_cycle * PWM_COUNTER_PREIOD);
 8001e84:	4b17      	ldr	r3, [pc, #92]	; (8001ee4 <_Z16MotorControlTaskv+0x1a4>)
 8001e86:	edd3 7a04 	vldr	s15, [r3, #16]
 8001e8a:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 8001f08 <_Z16MotorControlTaskv+0x1c8>
 8001e8e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001e92:	4b1e      	ldr	r3, [pc, #120]	; (8001f0c <_Z16MotorControlTaskv+0x1cc>)
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001e9a:	ee17 2a90 	vmov	r2, s15
 8001e9e:	641a      	str	r2, [r3, #64]	; 0x40
    __HAL_TIM_SET_COMPARE(&htim5, TIM_CHANNEL_1, PWM_COUNTER_PREIOD - (motorcontrol.duty_cycle * PWM_COUNTER_PREIOD));
 8001ea0:	4b10      	ldr	r3, [pc, #64]	; (8001ee4 <_Z16MotorControlTaskv+0x1a4>)
 8001ea2:	edd3 7a04 	vldr	s15, [r3, #16]
 8001ea6:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8001f08 <_Z16MotorControlTaskv+0x1c8>
 8001eaa:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001eae:	ed9f 7a16 	vldr	s14, [pc, #88]	; 8001f08 <_Z16MotorControlTaskv+0x1c8>
 8001eb2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001eb6:	4b15      	ldr	r3, [pc, #84]	; (8001f0c <_Z16MotorControlTaskv+0x1cc>)
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001ebe:	ee17 2a90 	vmov	r2, s15
 8001ec2:	635a      	str	r2, [r3, #52]	; 0x34

}
 8001ec4:	bf00      	nop
 8001ec6:	3708      	adds	r7, #8
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	bd80      	pop	{r7, pc}
 8001ecc:	200002b4 	.word	0x200002b4
 8001ed0:	42021400 	.word	0x42021400
 8001ed4:	20000298 	.word	0x20000298
 8001ed8:	20000148 	.word	0x20000148
 8001edc:	45800000 	.word	0x45800000
 8001ee0:	40533333 	.word	0x40533333
 8001ee4:	20000284 	.word	0x20000284
 8001ee8:	3fd47ae1 	.word	0x3fd47ae1
 8001eec:	3c0ce704 	.word	0x3c0ce704
 8001ef0:	3c54fdf4 	.word	0x3c54fdf4
 8001ef4:	3dcccccd 	.word	0x3dcccccd
 8001ef8:	43480000 	.word	0x43480000
 8001efc:	3f733333 	.word	0x3f733333
 8001f00:	3f733333 	.word	0x3f733333
 8001f04:	3d4ccccd 	.word	0x3d4ccccd
 8001f08:	44e54000 	.word	0x44e54000
 8001f0c:	200007b0 	.word	0x200007b0

08001f10 <_Z10Radio_Initv>:
bool flood_active = false;
uint8_t flood_counter = 0;
char pirate_from, pirate_to, pirate_next;
int pirate_percentage = 0;
void Radio_Init()
{
 8001f10:	b580      	push	{r7, lr}
 8001f12:	af00      	add	r7, sp, #0
    HAL_UART_Receive_IT (&huart4, radio_rxBuffer, 12);
 8001f14:	220c      	movs	r2, #12
 8001f16:	4903      	ldr	r1, [pc, #12]	; (8001f24 <_Z10Radio_Initv+0x14>)
 8001f18:	4803      	ldr	r0, [pc, #12]	; (8001f28 <_Z10Radio_Initv+0x18>)
 8001f1a:	f014 fd43 	bl	80169a4 <HAL_UART_Receive_IT>

}
 8001f1e:	bf00      	nop
 8001f20:	bd80      	pop	{r7, pc}
 8001f22:	bf00      	nop
 8001f24:	2000029c 	.word	0x2000029c
 8001f28:	2000049c 	.word	0x2000049c

08001f2c <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	b086      	sub	sp, #24
 8001f30:	af02      	add	r7, sp, #8
 8001f32:	6078      	str	r0, [r7, #4]
	uint8_t i, length;
    // Check to see where is the termination character to determine what type of message is received
    for(i = 0; i < 12; ++i)
 8001f34:	2300      	movs	r3, #0
 8001f36:	73fb      	strb	r3, [r7, #15]
 8001f38:	e009      	b.n	8001f4e <HAL_UART_RxCpltCallback+0x22>
    {
    	if(radio_rxBuffer[i] == '\r')
 8001f3a:	7bfb      	ldrb	r3, [r7, #15]
 8001f3c:	4a20      	ldr	r2, [pc, #128]	; (8001fc0 <HAL_UART_RxCpltCallback+0x94>)
 8001f3e:	5cd3      	ldrb	r3, [r2, r3]
 8001f40:	2b0d      	cmp	r3, #13
 8001f42:	d101      	bne.n	8001f48 <HAL_UART_RxCpltCallback+0x1c>
    	{
    		length = i;
 8001f44:	7bfb      	ldrb	r3, [r7, #15]
 8001f46:	73bb      	strb	r3, [r7, #14]
    for(i = 0; i < 12; ++i)
 8001f48:	7bfb      	ldrb	r3, [r7, #15]
 8001f4a:	3301      	adds	r3, #1
 8001f4c:	73fb      	strb	r3, [r7, #15]
 8001f4e:	7bfb      	ldrb	r3, [r7, #15]
 8001f50:	2b0b      	cmp	r3, #11
 8001f52:	d9f2      	bls.n	8001f3a <HAL_UART_RxCpltCallback+0xe>
    	}
    }
    // Labirinth countdown message received
    if(length == 1)
 8001f54:	7bbb      	ldrb	r3, [r7, #14]
 8001f56:	2b01      	cmp	r3, #1
 8001f58:	d103      	bne.n	8001f62 <HAL_UART_RxCpltCallback+0x36>
    {
    	countdown_value = radio_rxBuffer[0];
 8001f5a:	4b19      	ldr	r3, [pc, #100]	; (8001fc0 <HAL_UART_RxCpltCallback+0x94>)
 8001f5c:	781a      	ldrb	r2, [r3, #0]
 8001f5e:	4b19      	ldr	r3, [pc, #100]	; (8001fc4 <HAL_UART_RxCpltCallback+0x98>)
 8001f60:	701a      	strb	r2, [r3, #0]
    }
    if(length == 6)
 8001f62:	7bbb      	ldrb	r3, [r7, #14]
 8001f64:	2b06      	cmp	r3, #6
 8001f66:	d115      	bne.n	8001f94 <HAL_UART_RxCpltCallback+0x68>
    {
    	//FLOOD message received
    	if(!strcmp("FLOOD!\r", reinterpret_cast<const char*>(radio_rxBuffer)))
 8001f68:	4915      	ldr	r1, [pc, #84]	; (8001fc0 <HAL_UART_RxCpltCallback+0x94>)
 8001f6a:	4817      	ldr	r0, [pc, #92]	; (8001fc8 <HAL_UART_RxCpltCallback+0x9c>)
 8001f6c:	f7fe f968 	bl	8000240 <strcmp>
 8001f70:	4603      	mov	r3, r0
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d103      	bne.n	8001f7e <HAL_UART_RxCpltCallback+0x52>
    	{
    		flood_active = true;
 8001f76:	4b15      	ldr	r3, [pc, #84]	; (8001fcc <HAL_UART_RxCpltCallback+0xa0>)
 8001f78:	2201      	movs	r2, #1
 8001f7a:	701a      	strb	r2, [r3, #0]
 8001f7c:	e010      	b.n	8001fa0 <HAL_UART_RxCpltCallback+0x74>
    	}
    	else
    	{
    		sscanf(reinterpret_cast<const char*>(radio_rxBuffer), "%c%c%c%03d", &pirate_from, &pirate_to, &pirate_next, &pirate_percentage);
 8001f7e:	4b14      	ldr	r3, [pc, #80]	; (8001fd0 <HAL_UART_RxCpltCallback+0xa4>)
 8001f80:	9301      	str	r3, [sp, #4]
 8001f82:	4b14      	ldr	r3, [pc, #80]	; (8001fd4 <HAL_UART_RxCpltCallback+0xa8>)
 8001f84:	9300      	str	r3, [sp, #0]
 8001f86:	4b14      	ldr	r3, [pc, #80]	; (8001fd8 <HAL_UART_RxCpltCallback+0xac>)
 8001f88:	4a14      	ldr	r2, [pc, #80]	; (8001fdc <HAL_UART_RxCpltCallback+0xb0>)
 8001f8a:	4915      	ldr	r1, [pc, #84]	; (8001fe0 <HAL_UART_RxCpltCallback+0xb4>)
 8001f8c:	480c      	ldr	r0, [pc, #48]	; (8001fc0 <HAL_UART_RxCpltCallback+0x94>)
 8001f8e:	f01b fd07 	bl	801d9a0 <siscanf>
 8001f92:	e005      	b.n	8001fa0 <HAL_UART_RxCpltCallback+0x74>
    	}
    }

    else
    {
    	flood_counter++;
 8001f94:	4b13      	ldr	r3, [pc, #76]	; (8001fe4 <HAL_UART_RxCpltCallback+0xb8>)
 8001f96:	781b      	ldrb	r3, [r3, #0]
 8001f98:	3301      	adds	r3, #1
 8001f9a:	b2da      	uxtb	r2, r3
 8001f9c:	4b11      	ldr	r3, [pc, #68]	; (8001fe4 <HAL_UART_RxCpltCallback+0xb8>)
 8001f9e:	701a      	strb	r2, [r3, #0]
    }

    if(flood_counter > 10)
 8001fa0:	4b10      	ldr	r3, [pc, #64]	; (8001fe4 <HAL_UART_RxCpltCallback+0xb8>)
 8001fa2:	781b      	ldrb	r3, [r3, #0]
 8001fa4:	2b0a      	cmp	r3, #10
 8001fa6:	d902      	bls.n	8001fae <HAL_UART_RxCpltCallback+0x82>
    {
    	flood_active = false;
 8001fa8:	4b08      	ldr	r3, [pc, #32]	; (8001fcc <HAL_UART_RxCpltCallback+0xa0>)
 8001faa:	2200      	movs	r2, #0
 8001fac:	701a      	strb	r2, [r3, #0]
    }
    HAL_UART_Receive_IT(&huart4, radio_rxBuffer, 12);
 8001fae:	220c      	movs	r2, #12
 8001fb0:	4903      	ldr	r1, [pc, #12]	; (8001fc0 <HAL_UART_RxCpltCallback+0x94>)
 8001fb2:	480d      	ldr	r0, [pc, #52]	; (8001fe8 <HAL_UART_RxCpltCallback+0xbc>)
 8001fb4:	f014 fcf6 	bl	80169a4 <HAL_UART_Receive_IT>

}
 8001fb8:	bf00      	nop
 8001fba:	3710      	adds	r7, #16
 8001fbc:	46bd      	mov	sp, r7
 8001fbe:	bd80      	pop	{r7, pc}
 8001fc0:	2000029c 	.word	0x2000029c
 8001fc4:	2000008c 	.word	0x2000008c
 8001fc8:	0801f050 	.word	0x0801f050
 8001fcc:	200002a8 	.word	0x200002a8
 8001fd0:	200002b0 	.word	0x200002b0
 8001fd4:	200002ac 	.word	0x200002ac
 8001fd8:	200002ab 	.word	0x200002ab
 8001fdc:	200002aa 	.word	0x200002aa
 8001fe0:	0801f058 	.word	0x0801f058
 8001fe4:	200002a9 	.word	0x200002a9
 8001fe8:	2000049c 	.word	0x2000049c

08001fec <_Z16SetSteeringAnglef>:
uint8_t Is_First_Captured = 0;


/* Angle in +90 to -90 degree */
void SetSteeringAngle(float angle)
{
 8001fec:	b480      	push	{r7}
 8001fee:	b085      	sub	sp, #20
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	ed87 0a01 	vstr	s0, [r7, #4]
	uint16_t compare = SERVO_NULL + (angle/ 21.5f * SERVO_RANGE);
 8001ff6:	ed97 7a01 	vldr	s14, [r7, #4]
 8001ffa:	eddf 6a0d 	vldr	s13, [pc, #52]	; 8002030 <_Z16SetSteeringAnglef+0x44>
 8001ffe:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002002:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8002034 <_Z16SetSteeringAnglef+0x48>
 8002006:	ee67 7a87 	vmul.f32	s15, s15, s14
 800200a:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 8002038 <_Z16SetSteeringAnglef+0x4c>
 800200e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002012:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002016:	ee17 3a90 	vmov	r3, s15
 800201a:	81fb      	strh	r3, [r7, #14]
	//uint16_t compare = (uint16_t)(angle);
    __HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_1, compare);
 800201c:	4b07      	ldr	r3, [pc, #28]	; (800203c <_Z16SetSteeringAnglef+0x50>)
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	89fa      	ldrh	r2, [r7, #14]
 8002022:	635a      	str	r2, [r3, #52]	; 0x34
}
 8002024:	bf00      	nop
 8002026:	3714      	adds	r7, #20
 8002028:	46bd      	mov	sp, r7
 800202a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202e:	4770      	bx	lr
 8002030:	41ac0000 	.word	0x41ac0000
 8002034:	43c80000 	.word	0x43c80000
 8002038:	44960000 	.word	0x44960000
 800203c:	20000848 	.word	0x20000848

08002040 <HAL_TIM_IC_CaptureCallback>:



void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002040:	b580      	push	{r7, lr}
 8002042:	b084      	sub	sp, #16
 8002044:	af00      	add	r7, sp, #0
 8002046:	6078      	str	r0, [r7, #4]
	if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_4)  // if the interrupt source is channel1
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	7f1b      	ldrb	r3, [r3, #28]
 800204c:	2b08      	cmp	r3, #8
 800204e:	d163      	bne.n	8002118 <HAL_TIM_IC_CaptureCallback+0xd8>
	{
		if (Is_First_Captured==0) // if the first value is not captured
 8002050:	4b33      	ldr	r3, [pc, #204]	; (8002120 <HAL_TIM_IC_CaptureCallback+0xe0>)
 8002052:	781b      	ldrb	r3, [r3, #0]
 8002054:	2b00      	cmp	r3, #0
 8002056:	d10e      	bne.n	8002076 <HAL_TIM_IC_CaptureCallback+0x36>
		{
			IC_Val1_prev = IC_Val1;
 8002058:	4b32      	ldr	r3, [pc, #200]	; (8002124 <HAL_TIM_IC_CaptureCallback+0xe4>)
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	4a32      	ldr	r2, [pc, #200]	; (8002128 <HAL_TIM_IC_CaptureCallback+0xe8>)
 800205e:	6013      	str	r3, [r2, #0]
			IC_Val1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_4); // read the first value
 8002060:	210c      	movs	r1, #12
 8002062:	6878      	ldr	r0, [r7, #4]
 8002064:	f013 fd50 	bl	8015b08 <HAL_TIM_ReadCapturedValue>
 8002068:	4603      	mov	r3, r0
 800206a:	4a2e      	ldr	r2, [pc, #184]	; (8002124 <HAL_TIM_IC_CaptureCallback+0xe4>)
 800206c:	6013      	str	r3, [r2, #0]
			Is_First_Captured = 1;  // set the first captured as true
 800206e:	4b2c      	ldr	r3, [pc, #176]	; (8002120 <HAL_TIM_IC_CaptureCallback+0xe0>)
 8002070:	2201      	movs	r2, #1
 8002072:	701a      	strb	r2, [r3, #0]
			__HAL_TIM_SET_COUNTER(htim, 0);  // reset the counter
			Is_First_Captured = 0; // set it back to false
		}

	}
}
 8002074:	e050      	b.n	8002118 <HAL_TIM_IC_CaptureCallback+0xd8>
			IC_Val2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_4);  // read second value
 8002076:	210c      	movs	r1, #12
 8002078:	6878      	ldr	r0, [r7, #4]
 800207a:	f013 fd45 	bl	8015b08 <HAL_TIM_ReadCapturedValue>
 800207e:	4603      	mov	r3, r0
 8002080:	4a2a      	ldr	r2, [pc, #168]	; (800212c <HAL_TIM_IC_CaptureCallback+0xec>)
 8002082:	6013      	str	r3, [r2, #0]
			if (IC_Val2 > IC_Val1)
 8002084:	4b29      	ldr	r3, [pc, #164]	; (800212c <HAL_TIM_IC_CaptureCallback+0xec>)
 8002086:	681a      	ldr	r2, [r3, #0]
 8002088:	4b26      	ldr	r3, [pc, #152]	; (8002124 <HAL_TIM_IC_CaptureCallback+0xe4>)
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	429a      	cmp	r2, r3
 800208e:	d907      	bls.n	80020a0 <HAL_TIM_IC_CaptureCallback+0x60>
				Difference = IC_Val2-IC_Val1;
 8002090:	4b26      	ldr	r3, [pc, #152]	; (800212c <HAL_TIM_IC_CaptureCallback+0xec>)
 8002092:	681a      	ldr	r2, [r3, #0]
 8002094:	4b23      	ldr	r3, [pc, #140]	; (8002124 <HAL_TIM_IC_CaptureCallback+0xe4>)
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	1ad3      	subs	r3, r2, r3
 800209a:	4a25      	ldr	r2, [pc, #148]	; (8002130 <HAL_TIM_IC_CaptureCallback+0xf0>)
 800209c:	6013      	str	r3, [r2, #0]
 800209e:	e00d      	b.n	80020bc <HAL_TIM_IC_CaptureCallback+0x7c>
			else if (IC_Val1 > IC_Val2)
 80020a0:	4b20      	ldr	r3, [pc, #128]	; (8002124 <HAL_TIM_IC_CaptureCallback+0xe4>)
 80020a2:	681a      	ldr	r2, [r3, #0]
 80020a4:	4b21      	ldr	r3, [pc, #132]	; (800212c <HAL_TIM_IC_CaptureCallback+0xec>)
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	429a      	cmp	r2, r3
 80020aa:	d907      	bls.n	80020bc <HAL_TIM_IC_CaptureCallback+0x7c>
				Difference = (0xffffffff - IC_Val1) + IC_Val2;
 80020ac:	4b1f      	ldr	r3, [pc, #124]	; (800212c <HAL_TIM_IC_CaptureCallback+0xec>)
 80020ae:	681a      	ldr	r2, [r3, #0]
 80020b0:	4b1c      	ldr	r3, [pc, #112]	; (8002124 <HAL_TIM_IC_CaptureCallback+0xe4>)
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	1ad3      	subs	r3, r2, r3
 80020b6:	3b01      	subs	r3, #1
 80020b8:	4a1d      	ldr	r2, [pc, #116]	; (8002130 <HAL_TIM_IC_CaptureCallback+0xf0>)
 80020ba:	6013      	str	r3, [r2, #0]
			float refClock = TIMCLOCK/(PRESCALAR);
 80020bc:	4b1d      	ldr	r3, [pc, #116]	; (8002134 <HAL_TIM_IC_CaptureCallback+0xf4>)
 80020be:	60fb      	str	r3, [r7, #12]
			float mFactor = 1000000/refClock;
 80020c0:	eddf 6a1d 	vldr	s13, [pc, #116]	; 8002138 <HAL_TIM_IC_CaptureCallback+0xf8>
 80020c4:	ed97 7a03 	vldr	s14, [r7, #12]
 80020c8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80020cc:	edc7 7a02 	vstr	s15, [r7, #8]
			usWidth_throttle = Difference*mFactor;
 80020d0:	4b17      	ldr	r3, [pc, #92]	; (8002130 <HAL_TIM_IC_CaptureCallback+0xf0>)
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	ee07 3a90 	vmov	s15, r3
 80020d8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80020dc:	edd7 7a02 	vldr	s15, [r7, #8]
 80020e0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80020e4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80020e8:	ee17 2a90 	vmov	r2, s15
 80020ec:	4b13      	ldr	r3, [pc, #76]	; (800213c <HAL_TIM_IC_CaptureCallback+0xfc>)
 80020ee:	601a      	str	r2, [r3, #0]
			period_length = refClock / Difference;
 80020f0:	4b0f      	ldr	r3, [pc, #60]	; (8002130 <HAL_TIM_IC_CaptureCallback+0xf0>)
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	ee07 3a90 	vmov	s15, r3
 80020f8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80020fc:	edd7 6a03 	vldr	s13, [r7, #12]
 8002100:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002104:	4b0e      	ldr	r3, [pc, #56]	; (8002140 <HAL_TIM_IC_CaptureCallback+0x100>)
 8002106:	edc3 7a00 	vstr	s15, [r3]
			__HAL_TIM_SET_COUNTER(htim, 0);  // reset the counter
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	2200      	movs	r2, #0
 8002110:	625a      	str	r2, [r3, #36]	; 0x24
			Is_First_Captured = 0; // set it back to false
 8002112:	4b03      	ldr	r3, [pc, #12]	; (8002120 <HAL_TIM_IC_CaptureCallback+0xe0>)
 8002114:	2200      	movs	r2, #0
 8002116:	701a      	strb	r2, [r3, #0]
}
 8002118:	bf00      	nop
 800211a:	3710      	adds	r7, #16
 800211c:	46bd      	mov	sp, r7
 800211e:	bd80      	pop	{r7, pc}
 8002120:	200002cc 	.word	0x200002cc
 8002124:	200002b8 	.word	0x200002b8
 8002128:	200002bc 	.word	0x200002bc
 800212c:	200002c4 	.word	0x200002c4
 8002130:	200002c8 	.word	0x200002c8
 8002134:	49742400 	.word	0x49742400
 8002138:	49742400 	.word	0x49742400
 800213c:	200002b4 	.word	0x200002b4
 8002140:	200002c0 	.word	0x200002c0

08002144 <_ZSt5atan2ff>:
  { return __builtin_atan2f(__y, __x); }
 8002144:	b580      	push	{r7, lr}
 8002146:	b082      	sub	sp, #8
 8002148:	af00      	add	r7, sp, #0
 800214a:	ed87 0a01 	vstr	s0, [r7, #4]
 800214e:	edc7 0a00 	vstr	s1, [r7]
 8002152:	edd7 0a00 	vldr	s1, [r7]
 8002156:	ed97 0a01 	vldr	s0, [r7, #4]
 800215a:	f019 fbc9 	bl	801b8f0 <atan2f>
 800215e:	eef0 7a40 	vmov.f32	s15, s0
 8002162:	eeb0 0a67 	vmov.f32	s0, s15
 8002166:	3708      	adds	r7, #8
 8002168:	46bd      	mov	sp, r7
 800216a:	bd80      	pop	{r7, pc}

0800216c <_ZSt3cosf>:
  { return __builtin_cosf(__x); }
 800216c:	b580      	push	{r7, lr}
 800216e:	b082      	sub	sp, #8
 8002170:	af00      	add	r7, sp, #0
 8002172:	ed87 0a01 	vstr	s0, [r7, #4]
 8002176:	ed97 0a01 	vldr	s0, [r7, #4]
 800217a:	f019 fbbb 	bl	801b8f4 <cosf>
 800217e:	eef0 7a40 	vmov.f32	s15, s0
 8002182:	eeb0 0a67 	vmov.f32	s0, s15
 8002186:	3708      	adds	r7, #8
 8002188:	46bd      	mov	sp, r7
 800218a:	bd80      	pop	{r7, pc}

0800218c <_ZSt4fabsf>:
  { return __builtin_fabsf(__x); }
 800218c:	b480      	push	{r7}
 800218e:	b083      	sub	sp, #12
 8002190:	af00      	add	r7, sp, #0
 8002192:	ed87 0a01 	vstr	s0, [r7, #4]
 8002196:	edd7 7a01 	vldr	s15, [r7, #4]
 800219a:	eef0 7ae7 	vabs.f32	s15, s15
 800219e:	eeb0 0a67 	vmov.f32	s0, s15
 80021a2:	370c      	adds	r7, #12
 80021a4:	46bd      	mov	sp, r7
 80021a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021aa:	4770      	bx	lr

080021ac <_ZSt3sinf>:
  using ::sin;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  sin(float __x)
  { return __builtin_sinf(__x); }
 80021ac:	b580      	push	{r7, lr}
 80021ae:	b082      	sub	sp, #8
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	ed87 0a01 	vstr	s0, [r7, #4]
 80021b6:	ed97 0a01 	vldr	s0, [r7, #4]
 80021ba:	f019 fbdf 	bl	801b97c <sinf>
 80021be:	eef0 7a40 	vmov.f32	s15, s0
 80021c2:	eeb0 0a67 	vmov.f32	s0, s15
 80021c6:	3708      	adds	r7, #8
 80021c8:	46bd      	mov	sp, r7
 80021ca:	bd80      	pop	{r7, pc}

080021cc <_ZSt21is_constant_evaluatedv>:
#define __cpp_lib_is_constant_evaluated 201811L

  /// Returns true only when called during constant evaluation.
  constexpr inline bool
  is_constant_evaluated() noexcept
  { return __builtin_is_constant_evaluated(); }
 80021cc:	b480      	push	{r7}
 80021ce:	af00      	add	r7, sp, #0
 80021d0:	2300      	movs	r3, #0
 80021d2:	4618      	mov	r0, r3
 80021d4:	46bd      	mov	sp, r7
 80021d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021da:	4770      	bx	lr

080021dc <_ZNSt9__cmp_cat8__unspecC1EPS0_>:

    enum class _Ncmp : type { _Unordered = 2 };

    struct __unspec
    {
      constexpr __unspec(__unspec*) noexcept { }
 80021dc:	b480      	push	{r7}
 80021de:	b083      	sub	sp, #12
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	6078      	str	r0, [r7, #4]
 80021e4:	6039      	str	r1, [r7, #0]
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	4618      	mov	r0, r3
 80021ea:	370c      	adds	r7, #12
 80021ec:	46bd      	mov	sp, r7
 80021ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f2:	4770      	bx	lr

080021f4 <_ZStltSt15strong_orderingNSt9__cmp_cat8__unspecE>:

    friend constexpr bool
    operator==(strong_ordering, strong_ordering) noexcept = default;

    friend constexpr bool
    operator< (strong_ordering __v, __cmp_cat::__unspec) noexcept
 80021f4:	b480      	push	{r7}
 80021f6:	b083      	sub	sp, #12
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	7138      	strb	r0, [r7, #4]
 80021fc:	7039      	strb	r1, [r7, #0]
    { return __v._M_value < 0; }
 80021fe:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8002202:	b2db      	uxtb	r3, r3
 8002204:	09db      	lsrs	r3, r3, #7
 8002206:	b2db      	uxtb	r3, r3
 8002208:	4618      	mov	r0, r3
 800220a:	370c      	adds	r7, #12
 800220c:	46bd      	mov	sp, r7
 800220e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002212:	4770      	bx	lr

08002214 <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
_GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 8002214:	b480      	push	{r7}
 8002216:	b083      	sub	sp, #12
 8002218:	af00      	add	r7, sp, #0
 800221a:	6078      	str	r0, [r7, #4]
 800221c:	6039      	str	r1, [r7, #0]
 800221e:	683b      	ldr	r3, [r7, #0]
 8002220:	4618      	mov	r0, r3
 8002222:	370c      	adds	r7, #12
 8002224:	46bd      	mov	sp, r7
 8002226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222a:	4770      	bx	lr

0800222c <_ZN9__gnu_cxx5__ops16__iter_less_iterEv>:
  };

  _GLIBCXX14_CONSTEXPR
  inline _Iter_less_iter
  __iter_less_iter()
  { return _Iter_less_iter(); }
 800222c:	b480      	push	{r7}
 800222e:	af00      	add	r7, sp, #0
 8002230:	bf00      	nop
 8002232:	4618      	mov	r0, r3
 8002234:	46bd      	mov	sp, r7
 8002236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800223a:	4770      	bx	lr

0800223c <_ZN9__gnu_cxx5__ops15__val_comp_iterENS0_15_Iter_less_iterE>:
  { return _Val_less_iter(); }

  _GLIBCXX20_CONSTEXPR
  inline _Val_less_iter
  __val_comp_iter(_Iter_less_iter)
  { return _Val_less_iter(); }
 800223c:	b480      	push	{r7}
 800223e:	b083      	sub	sp, #12
 8002240:	af00      	add	r7, sp, #0
 8002242:	7138      	strb	r0, [r7, #4]
 8002244:	bf00      	nop
 8002246:	4618      	mov	r0, r3
 8002248:	370c      	adds	r7, #12
 800224a:	46bd      	mov	sp, r7
 800224c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002250:	4770      	bx	lr

08002252 <_ZSt4__lgi>:

  /// This is a helper function for the sort routines and for random.tcc.
  //  Precondition: __n > 0.
  inline _GLIBCXX_CONSTEXPR int
  __lg(int __n)
  { return (int)sizeof(int) * __CHAR_BIT__  - 1 - __builtin_clz(__n); }
 8002252:	b480      	push	{r7}
 8002254:	b083      	sub	sp, #12
 8002256:	af00      	add	r7, sp, #0
 8002258:	6078      	str	r0, [r7, #4]
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	fab3 f383 	clz	r3, r3
 8002260:	f1c3 031f 	rsb	r3, r3, #31
 8002264:	4618      	mov	r0, r3
 8002266:	370c      	adds	r7, #12
 8002268:	46bd      	mov	sp, r7
 800226a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226e:	4770      	bx	lr

08002270 <_ZSt16__deque_buf_sizej>:
#define _GLIBCXX_DEQUE_BUF_SIZE 512
#endif

  _GLIBCXX_CONSTEXPR inline size_t
  __deque_buf_size(size_t __size)
  { return (__size < _GLIBCXX_DEQUE_BUF_SIZE
 8002270:	b480      	push	{r7}
 8002272:	b083      	sub	sp, #12
 8002274:	af00      	add	r7, sp, #0
 8002276:	6078      	str	r0, [r7, #4]
	    ? size_t(_GLIBCXX_DEQUE_BUF_SIZE / __size) : size_t(1)); }
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800227e:	d205      	bcs.n	800228c <_ZSt16__deque_buf_sizej+0x1c>
 8002280:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	fbb2 f3f3 	udiv	r3, r2, r3
 800228a:	e000      	b.n	800228e <_ZSt16__deque_buf_sizej+0x1e>
 800228c:	2301      	movs	r3, #1
 800228e:	4618      	mov	r0, r3
 8002290:	370c      	adds	r7, #12
 8002292:	46bd      	mov	sp, r7
 8002294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002298:	4770      	bx	lr

0800229a <_ZNSt5dequeIfSaIfEEC1Ev>:

      /**
       *  @brief  Creates a %deque with no elements.
       */
#if __cplusplus >= 201103L
      deque() = default;
 800229a:	b580      	push	{r7, lr}
 800229c:	b082      	sub	sp, #8
 800229e:	af00      	add	r7, sp, #0
 80022a0:	6078      	str	r0, [r7, #4]
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	4618      	mov	r0, r3
 80022a6:	f005 f81d 	bl	80072e4 <_ZNSt11_Deque_baseIfSaIfEEC1Ev>
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	4618      	mov	r0, r3
 80022ae:	3708      	adds	r7, #8
 80022b0:	46bd      	mov	sp, r7
 80022b2:	bd80      	pop	{r7, pc}

080022b4 <_ZN3jlb8OdometryC1Efff>:
        float meas_ang_vel_z = 0.0f;
        float meas_lin_acc_x = 0.0f;
        float meas_lin_acc_y = 0.0f;
        float meas_lin_acc_z = 0.0f;

        Odometry(const float x_t_ = 0.0f, const float y_t_ = 0.0f, const float theta_t_ = 0.0f)
 80022b4:	b580      	push	{r7, lr}
 80022b6:	b084      	sub	sp, #16
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	60f8      	str	r0, [r7, #12]
 80022bc:	ed87 0a02 	vstr	s0, [r7, #8]
 80022c0:	edc7 0a01 	vstr	s1, [r7, #4]
 80022c4:	ed87 1a00 	vstr	s2, [r7]
            : x_t(x_t_), y_t(y_t_), theta_t(normalize_angle(theta_t_)) {}
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	f04f 0200 	mov.w	r2, #0
 80022ce:	601a      	str	r2, [r3, #0]
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	f04f 0200 	mov.w	r2, #0
 80022d6:	605a      	str	r2, [r3, #4]
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	68ba      	ldr	r2, [r7, #8]
 80022dc:	609a      	str	r2, [r3, #8]
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	687a      	ldr	r2, [r7, #4]
 80022e2:	60da      	str	r2, [r3, #12]
 80022e4:	ed97 0a00 	vldr	s0, [r7]
 80022e8:	68f8      	ldr	r0, [r7, #12]
 80022ea:	f000 fa41 	bl	8002770 <_ZN3jlb8Odometry15normalize_angleEf>
 80022ee:	eef0 7a40 	vmov.f32	s15, s0
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	edc3 7a04 	vstr	s15, [r3, #16]
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	f04f 0200 	mov.w	r2, #0
 80022fe:	615a      	str	r2, [r3, #20]
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	f04f 0200 	mov.w	r2, #0
 8002306:	619a      	str	r2, [r3, #24]
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	f04f 0200 	mov.w	r2, #0
 800230e:	61da      	str	r2, [r3, #28]
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	f04f 0200 	mov.w	r2, #0
 8002316:	621a      	str	r2, [r3, #32]
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	f04f 0200 	mov.w	r2, #0
 800231e:	625a      	str	r2, [r3, #36]	; 0x24
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	f04f 0200 	mov.w	r2, #0
 8002326:	629a      	str	r2, [r3, #40]	; 0x28
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	f04f 0200 	mov.w	r2, #0
 800232e:	62da      	str	r2, [r3, #44]	; 0x2c
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	3330      	adds	r3, #48	; 0x30
 8002334:	4618      	mov	r0, r3
 8002336:	f7ff ffb0 	bl	800229a <_ZNSt5dequeIfSaIfEEC1Ev>
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	3358      	adds	r3, #88	; 0x58
 800233e:	4618      	mov	r0, r3
 8002340:	f7ff ffab 	bl	800229a <_ZNSt5dequeIfSaIfEEC1Ev>
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	2201      	movs	r2, #1
 8002348:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	4618      	mov	r0, r3
 8002350:	3710      	adds	r7, #16
 8002352:	46bd      	mov	sp, r7
 8002354:	bd80      	pop	{r7, pc}
	...

08002358 <_ZN3jlb8Odometry12rpm_callbackEf>:

        ~Odometry() {}

        void rpm_callback(const float motor_rpm)
 8002358:	b580      	push	{r7, lr}
 800235a:	ed2d 8b02 	vpush	{d8}
 800235e:	b08c      	sub	sp, #48	; 0x30
 8002360:	af00      	add	r7, sp, #0
 8002362:	6078      	str	r0, [r7, #4]
 8002364:	ed87 0a00 	vstr	s0, [r7]
        {
            meas_motor_rpm = motor_rpm;
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	683a      	ldr	r2, [r7, #0]
 800236c:	615a      	str	r2, [r3, #20]

            float wheel_rpm = motor_rpm * jlb::GEAR_RATIO_MOTOR_TO_WHEEL;
 800236e:	edd7 7a00 	vldr	s15, [r7]
 8002372:	ed9f 7a43 	vldr	s14, [pc, #268]	; 8002480 <_ZN3jlb8Odometry12rpm_callbackEf+0x128>
 8002376:	ee67 7a87 	vmul.f32	s15, s15, s14
 800237a:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
            float velocity = M_PI * jlb::WHEEL_DIAMETER * wheel_rpm / 60.0f;
 800237e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002380:	f7fe f8d4 	bl	800052c <__aeabi_f2d>
 8002384:	a33c      	add	r3, pc, #240	; (adr r3, 8002478 <_ZN3jlb8Odometry12rpm_callbackEf+0x120>)
 8002386:	e9d3 2300 	ldrd	r2, r3, [r3]
 800238a:	f7fe f927 	bl	80005dc <__aeabi_dmul>
 800238e:	4602      	mov	r2, r0
 8002390:	460b      	mov	r3, r1
 8002392:	4610      	mov	r0, r2
 8002394:	4619      	mov	r1, r3
 8002396:	f04f 0200 	mov.w	r2, #0
 800239a:	4b3a      	ldr	r3, [pc, #232]	; (8002484 <_ZN3jlb8Odometry12rpm_callbackEf+0x12c>)
 800239c:	f7fe fa48 	bl	8000830 <__aeabi_ddiv>
 80023a0:	4602      	mov	r2, r0
 80023a2:	460b      	mov	r3, r1
 80023a4:	4610      	mov	r0, r2
 80023a6:	4619      	mov	r1, r3
 80023a8:	f7fe fbc8 	bl	8000b3c <__aeabi_d2f>
 80023ac:	4603      	mov	r3, r0
 80023ae:	60bb      	str	r3, [r7, #8]

            if (std::fabs(velocity) > jlb::MAX_VELOCITY)
 80023b0:	edd7 7a02 	vldr	s15, [r7, #8]
 80023b4:	eeb0 0a67 	vmov.f32	s0, s15
 80023b8:	f7ff fee8 	bl	800218c <_ZSt4fabsf>
 80023bc:	eef0 7a40 	vmov.f32	s15, s0
 80023c0:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 80023c4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80023c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80023cc:	bfcc      	ite	gt
 80023ce:	2301      	movgt	r3, #1
 80023d0:	2300      	movle	r3, #0
 80023d2:	b2db      	uxtb	r3, r3
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d146      	bne.n	8002466 <_ZN3jlb8Odometry12rpm_callbackEf+0x10e>
            {
                return;
            }

            v_buffer_.push_back(velocity);
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	3330      	adds	r3, #48	; 0x30
 80023dc:	f107 0208 	add.w	r2, r7, #8
 80023e0:	4611      	mov	r1, r2
 80023e2:	4618      	mov	r0, r3
 80023e4:	f004 ff8f 	bl	8007306 <_ZNSt5dequeIfSaIfEE9push_backERKf>
            if (v_buffer_.size() > jlb::VELOCITY_BUFFER_SIZE)
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	3330      	adds	r3, #48	; 0x30
 80023ec:	4618      	mov	r0, r3
 80023ee:	f004 ffab 	bl	8007348 <_ZNKSt5dequeIfSaIfEE4sizeEv>
 80023f2:	4603      	mov	r3, r0
 80023f4:	2b01      	cmp	r3, #1
 80023f6:	bf8c      	ite	hi
 80023f8:	2301      	movhi	r3, #1
 80023fa:	2300      	movls	r3, #0
 80023fc:	b2db      	uxtb	r3, r3
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d004      	beq.n	800240c <_ZN3jlb8Odometry12rpm_callbackEf+0xb4>
            {
                v_buffer_.pop_front();
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	3330      	adds	r3, #48	; 0x30
 8002406:	4618      	mov	r0, r3
 8002408:	f004 ffb0 	bl	800736c <_ZNSt5dequeIfSaIfEE9pop_frontEv>
            }

            vx_t = std::accumulate(v_buffer_.begin(), v_buffer_.end(), 0.0f) / v_buffer_.size();
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8002412:	f107 030c 	add.w	r3, r7, #12
 8002416:	4611      	mov	r1, r2
 8002418:	4618      	mov	r0, r3
 800241a:	f004 ffca 	bl	80073b2 <_ZNSt5dequeIfSaIfEE5beginEv>
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8002424:	f107 031c 	add.w	r3, r7, #28
 8002428:	4611      	mov	r1, r2
 800242a:	4618      	mov	r0, r3
 800242c:	f004 ffd0 	bl	80073d0 <_ZNSt5dequeIfSaIfEE3endEv>
 8002430:	f107 021c 	add.w	r2, r7, #28
 8002434:	f107 030c 	add.w	r3, r7, #12
 8002438:	ed9f 0a13 	vldr	s0, [pc, #76]	; 8002488 <_ZN3jlb8Odometry12rpm_callbackEf+0x130>
 800243c:	4611      	mov	r1, r2
 800243e:	4618      	mov	r0, r3
 8002440:	f004 ffe0 	bl	8007404 <_ZSt10accumulateISt15_Deque_iteratorIfRfPfEfET0_T_S5_S4_>
 8002444:	eeb0 8a40 	vmov.f32	s16, s0
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	3330      	adds	r3, #48	; 0x30
 800244c:	4618      	mov	r0, r3
 800244e:	f004 ff7b 	bl	8007348 <_ZNKSt5dequeIfSaIfEE4sizeEv>
 8002452:	ee07 0a90 	vmov	s15, r0
 8002456:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800245a:	eec8 7a07 	vdiv.f32	s15, s16, s14
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	edc3 7a00 	vstr	s15, [r3]
 8002464:	e000      	b.n	8002468 <_ZN3jlb8Odometry12rpm_callbackEf+0x110>
                return;
 8002466:	bf00      	nop
        }
 8002468:	3730      	adds	r7, #48	; 0x30
 800246a:	46bd      	mov	sp, r7
 800246c:	ecbd 8b02 	vpop	{d8}
 8002470:	bd80      	pop	{r7, pc}
 8002472:	bf00      	nop
 8002474:	f3af 8000 	nop.w
 8002478:	64af6f9d 	.word	0x64af6f9d
 800247c:	3fd51c8b 	.word	0x3fd51c8b
 8002480:	406c4ec5 	.word	0x406c4ec5
 8002484:	404e0000 	.word	0x404e0000
 8002488:	00000000 	.word	0x00000000

0800248c <_ZN3jlb8Odometry12imu_callbackEf>:

        void imu_callback(const float ang_vel_z)
 800248c:	b580      	push	{r7, lr}
 800248e:	ed2d 8b02 	vpush	{d8}
 8002492:	b08a      	sub	sp, #40	; 0x28
 8002494:	af00      	add	r7, sp, #0
 8002496:	6078      	str	r0, [r7, #4]
 8002498:	ed87 0a00 	vstr	s0, [r7]
        {
            meas_ang_vel_z = ang_vel_z;
 800249c:	683a      	ldr	r2, [r7, #0]
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	621a      	str	r2, [r3, #32]

            if (std::fabs(ang_vel_z) > jlb::MAX_YAW_RATE)
 80024a2:	edd7 7a00 	vldr	s15, [r7]
 80024a6:	eeb0 0a67 	vmov.f32	s0, s15
 80024aa:	f7ff fe6f 	bl	800218c <_ZSt4fabsf>
 80024ae:	eef0 7a40 	vmov.f32	s15, s0
 80024b2:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 8002564 <_ZN3jlb8Odometry12imu_callbackEf+0xd8>
 80024b6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80024ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024be:	bfcc      	ite	gt
 80024c0:	2301      	movgt	r3, #1
 80024c2:	2300      	movle	r3, #0
 80024c4:	b2db      	uxtb	r3, r3
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d145      	bne.n	8002556 <_ZN3jlb8Odometry12imu_callbackEf+0xca>
            {
                return;
            }

            w_buffer_.push_back(ang_vel_z);
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	3358      	adds	r3, #88	; 0x58
 80024ce:	463a      	mov	r2, r7
 80024d0:	4611      	mov	r1, r2
 80024d2:	4618      	mov	r0, r3
 80024d4:	f004 ff17 	bl	8007306 <_ZNSt5dequeIfSaIfEE9push_backERKf>
            if (w_buffer_.size() > jlb::IMU_BUFFER_SIZE)
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	3358      	adds	r3, #88	; 0x58
 80024dc:	4618      	mov	r0, r3
 80024de:	f004 ff33 	bl	8007348 <_ZNKSt5dequeIfSaIfEE4sizeEv>
 80024e2:	4603      	mov	r3, r0
 80024e4:	2b0a      	cmp	r3, #10
 80024e6:	bf8c      	ite	hi
 80024e8:	2301      	movhi	r3, #1
 80024ea:	2300      	movls	r3, #0
 80024ec:	b2db      	uxtb	r3, r3
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d004      	beq.n	80024fc <_ZN3jlb8Odometry12imu_callbackEf+0x70>
            {
                w_buffer_.pop_front();
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	3358      	adds	r3, #88	; 0x58
 80024f6:	4618      	mov	r0, r3
 80024f8:	f004 ff38 	bl	800736c <_ZNSt5dequeIfSaIfEE9pop_frontEv>
            }

            w_t = std::accumulate(w_buffer_.begin(), w_buffer_.end(), 0.0f) / w_buffer_.size();
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	f103 0258 	add.w	r2, r3, #88	; 0x58
 8002502:	f107 0308 	add.w	r3, r7, #8
 8002506:	4611      	mov	r1, r2
 8002508:	4618      	mov	r0, r3
 800250a:	f004 ff52 	bl	80073b2 <_ZNSt5dequeIfSaIfEE5beginEv>
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	f103 0258 	add.w	r2, r3, #88	; 0x58
 8002514:	f107 0318 	add.w	r3, r7, #24
 8002518:	4611      	mov	r1, r2
 800251a:	4618      	mov	r0, r3
 800251c:	f004 ff58 	bl	80073d0 <_ZNSt5dequeIfSaIfEE3endEv>
 8002520:	f107 0218 	add.w	r2, r7, #24
 8002524:	f107 0308 	add.w	r3, r7, #8
 8002528:	ed9f 0a0f 	vldr	s0, [pc, #60]	; 8002568 <_ZN3jlb8Odometry12imu_callbackEf+0xdc>
 800252c:	4611      	mov	r1, r2
 800252e:	4618      	mov	r0, r3
 8002530:	f004 ff68 	bl	8007404 <_ZSt10accumulateISt15_Deque_iteratorIfRfPfEfET0_T_S5_S4_>
 8002534:	eeb0 8a40 	vmov.f32	s16, s0
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	3358      	adds	r3, #88	; 0x58
 800253c:	4618      	mov	r0, r3
 800253e:	f004 ff03 	bl	8007348 <_ZNKSt5dequeIfSaIfEE4sizeEv>
 8002542:	ee07 0a90 	vmov	s15, r0
 8002546:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800254a:	eec8 7a07 	vdiv.f32	s15, s16, s14
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	edc3 7a01 	vstr	s15, [r3, #4]
 8002554:	e000      	b.n	8002558 <_ZN3jlb8Odometry12imu_callbackEf+0xcc>
                return;
 8002556:	bf00      	nop
        }
 8002558:	3728      	adds	r7, #40	; 0x28
 800255a:	46bd      	mov	sp, r7
 800255c:	ecbd 8b02 	vpop	{d8}
 8002560:	bd80      	pop	{r7, pc}
 8002562:	bf00      	nop
 8002564:	4096cbe4 	.word	0x4096cbe4
	...

08002570 <_ZN3jlb8Odometry11update_odomEv>:

        Odom update_odom()
 8002570:	b580      	push	{r7, lr}
 8002572:	ed2d 8b02 	vpush	{d8}
 8002576:	b08c      	sub	sp, #48	; 0x30
 8002578:	af00      	add	r7, sp, #0
 800257a:	6178      	str	r0, [r7, #20]
        {
#ifndef SIMULATION
            // TODO: add timestamp and dt
            float dt = 0.005f;
 800257c:	4b6c      	ldr	r3, [pc, #432]	; (8002730 <_ZN3jlb8Odometry11update_odomEv+0x1c0>)
 800257e:	62fb      	str	r3, [r7, #44]	; 0x2c

            auto update_timestamp = std::chrono::steady_clock::now();
            float dt = std::chrono::duration_cast<std::chrono::milliseconds>(update_timestamp - odom_timestamp_).count() / 1000.0f;
#endif

            if (dt > 0.0f)
 8002580:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8002584:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002588:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800258c:	f340 80a1 	ble.w	80026d2 <_ZN3jlb8Odometry11update_odomEv+0x162>
            {
                vx_t = std::fabs(vx_t) < 0.03 ? 0.0 : vx_t;
 8002590:	697b      	ldr	r3, [r7, #20]
 8002592:	edd3 7a00 	vldr	s15, [r3]
 8002596:	eeb0 0a67 	vmov.f32	s0, s15
 800259a:	f7ff fdf7 	bl	800218c <_ZSt4fabsf>
 800259e:	ee10 3a10 	vmov	r3, s0
 80025a2:	4618      	mov	r0, r3
 80025a4:	f7fd ffc2 	bl	800052c <__aeabi_f2d>
 80025a8:	a35d      	add	r3, pc, #372	; (adr r3, 8002720 <_ZN3jlb8Odometry11update_odomEv+0x1b0>)
 80025aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025ae:	f7fe fa87 	bl	8000ac0 <__aeabi_dcmplt>
 80025b2:	4603      	mov	r3, r0
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d002      	beq.n	80025be <_ZN3jlb8Odometry11update_odomEv+0x4e>
 80025b8:	f04f 0300 	mov.w	r3, #0
 80025bc:	e001      	b.n	80025c2 <_ZN3jlb8Odometry11update_odomEv+0x52>
 80025be:	697b      	ldr	r3, [r7, #20]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	697a      	ldr	r2, [r7, #20]
 80025c4:	6013      	str	r3, [r2, #0]
                w_t = std::fabs(w_t) < 0.015 ? 0.0 : w_t;
 80025c6:	697b      	ldr	r3, [r7, #20]
 80025c8:	edd3 7a01 	vldr	s15, [r3, #4]
 80025cc:	eeb0 0a67 	vmov.f32	s0, s15
 80025d0:	f7ff fddc 	bl	800218c <_ZSt4fabsf>
 80025d4:	ee10 3a10 	vmov	r3, s0
 80025d8:	4618      	mov	r0, r3
 80025da:	f7fd ffa7 	bl	800052c <__aeabi_f2d>
 80025de:	a352      	add	r3, pc, #328	; (adr r3, 8002728 <_ZN3jlb8Odometry11update_odomEv+0x1b8>)
 80025e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025e4:	f7fe fa6c 	bl	8000ac0 <__aeabi_dcmplt>
 80025e8:	4603      	mov	r3, r0
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d002      	beq.n	80025f4 <_ZN3jlb8Odometry11update_odomEv+0x84>
 80025ee:	f04f 0300 	mov.w	r3, #0
 80025f2:	e001      	b.n	80025f8 <_ZN3jlb8Odometry11update_odomEv+0x88>
 80025f4:	697b      	ldr	r3, [r7, #20]
 80025f6:	685b      	ldr	r3, [r3, #4]
 80025f8:	697a      	ldr	r2, [r7, #20]
 80025fa:	6053      	str	r3, [r2, #4]
                // float vy_t = WHEELBASE * w_t / 2.0f;
                float vy_t = 0.0f;
 80025fc:	f04f 0300 	mov.w	r3, #0
 8002600:	62bb      	str	r3, [r7, #40]	; 0x28

                x_t += (vx_t * std::cos(theta_t) - vy_t * std::sin(theta_t)) * dt;
 8002602:	697b      	ldr	r3, [r7, #20]
 8002604:	ed93 8a00 	vldr	s16, [r3]
 8002608:	697b      	ldr	r3, [r7, #20]
 800260a:	edd3 7a04 	vldr	s15, [r3, #16]
 800260e:	eeb0 0a67 	vmov.f32	s0, s15
 8002612:	f7ff fdab 	bl	800216c <_ZSt3cosf>
 8002616:	eef0 7a40 	vmov.f32	s15, s0
 800261a:	ee28 8a27 	vmul.f32	s16, s16, s15
 800261e:	697b      	ldr	r3, [r7, #20]
 8002620:	edd3 7a04 	vldr	s15, [r3, #16]
 8002624:	eeb0 0a67 	vmov.f32	s0, s15
 8002628:	f7ff fdc0 	bl	80021ac <_ZSt3sinf>
 800262c:	eeb0 7a40 	vmov.f32	s14, s0
 8002630:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8002634:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002638:	ee38 7a67 	vsub.f32	s14, s16, s15
 800263c:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8002640:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002644:	697b      	ldr	r3, [r7, #20]
 8002646:	edd3 7a02 	vldr	s15, [r3, #8]
 800264a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800264e:	697b      	ldr	r3, [r7, #20]
 8002650:	edc3 7a02 	vstr	s15, [r3, #8]
                y_t += (vx_t * std::sin(theta_t) + vy_t * std::cos(theta_t)) * dt;
 8002654:	697b      	ldr	r3, [r7, #20]
 8002656:	ed93 8a00 	vldr	s16, [r3]
 800265a:	697b      	ldr	r3, [r7, #20]
 800265c:	edd3 7a04 	vldr	s15, [r3, #16]
 8002660:	eeb0 0a67 	vmov.f32	s0, s15
 8002664:	f7ff fda2 	bl	80021ac <_ZSt3sinf>
 8002668:	eef0 7a40 	vmov.f32	s15, s0
 800266c:	ee28 8a27 	vmul.f32	s16, s16, s15
 8002670:	697b      	ldr	r3, [r7, #20]
 8002672:	edd3 7a04 	vldr	s15, [r3, #16]
 8002676:	eeb0 0a67 	vmov.f32	s0, s15
 800267a:	f7ff fd77 	bl	800216c <_ZSt3cosf>
 800267e:	eeb0 7a40 	vmov.f32	s14, s0
 8002682:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8002686:	ee67 7a27 	vmul.f32	s15, s14, s15
 800268a:	ee38 7a27 	vadd.f32	s14, s16, s15
 800268e:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8002692:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002696:	697b      	ldr	r3, [r7, #20]
 8002698:	edd3 7a03 	vldr	s15, [r3, #12]
 800269c:	ee77 7a27 	vadd.f32	s15, s14, s15
 80026a0:	697b      	ldr	r3, [r7, #20]
 80026a2:	edc3 7a03 	vstr	s15, [r3, #12]
                theta_t = normalize_angle(theta_t + w_t * dt);
 80026a6:	697b      	ldr	r3, [r7, #20]
 80026a8:	ed93 7a04 	vldr	s14, [r3, #16]
 80026ac:	697b      	ldr	r3, [r7, #20]
 80026ae:	edd3 6a01 	vldr	s13, [r3, #4]
 80026b2:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80026b6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80026ba:	ee77 7a27 	vadd.f32	s15, s14, s15
 80026be:	eeb0 0a67 	vmov.f32	s0, s15
 80026c2:	6978      	ldr	r0, [r7, #20]
 80026c4:	f000 f854 	bl	8002770 <_ZN3jlb8Odometry15normalize_angleEf>
 80026c8:	eef0 7a40 	vmov.f32	s15, s0
 80026cc:	697b      	ldr	r3, [r7, #20]
 80026ce:	edc3 7a04 	vstr	s15, [r3, #16]
            }
#ifdef SIMULATION
            odom_timestamp_ = update_timestamp > odom_timestamp_ ? update_timestamp : odom_timestamp_;
#endif
            return {vx_t, x_t, y_t, theta_t};
 80026d2:	697b      	ldr	r3, [r7, #20]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	61bb      	str	r3, [r7, #24]
 80026d8:	697b      	ldr	r3, [r7, #20]
 80026da:	689b      	ldr	r3, [r3, #8]
 80026dc:	61fb      	str	r3, [r7, #28]
 80026de:	697b      	ldr	r3, [r7, #20]
 80026e0:	68db      	ldr	r3, [r3, #12]
 80026e2:	623b      	str	r3, [r7, #32]
 80026e4:	697b      	ldr	r3, [r7, #20]
 80026e6:	691b      	ldr	r3, [r3, #16]
 80026e8:	627b      	str	r3, [r7, #36]	; 0x24
 80026ea:	69b8      	ldr	r0, [r7, #24]
 80026ec:	69f9      	ldr	r1, [r7, #28]
 80026ee:	6a3a      	ldr	r2, [r7, #32]
 80026f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026f2:	ee06 0a10 	vmov	s12, r0
 80026f6:	ee06 1a90 	vmov	s13, r1
 80026fa:	ee07 2a10 	vmov	s14, r2
 80026fe:	ee07 3a90 	vmov	s15, r3
        }
 8002702:	eeb0 0a46 	vmov.f32	s0, s12
 8002706:	eef0 0a66 	vmov.f32	s1, s13
 800270a:	eeb0 1a47 	vmov.f32	s2, s14
 800270e:	eef0 1a67 	vmov.f32	s3, s15
 8002712:	3730      	adds	r7, #48	; 0x30
 8002714:	46bd      	mov	sp, r7
 8002716:	ecbd 8b02 	vpop	{d8}
 800271a:	bd80      	pop	{r7, pc}
 800271c:	f3af 8000 	nop.w
 8002720:	eb851eb8 	.word	0xeb851eb8
 8002724:	3f9eb851 	.word	0x3f9eb851
 8002728:	eb851eb8 	.word	0xeb851eb8
 800272c:	3f8eb851 	.word	0x3f8eb851
 8002730:	3ba3d70a 	.word	0x3ba3d70a

08002734 <_ZSt4fmodIfdEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>:
    fmod(_Tp __x, _Up __y)
 8002734:	b580      	push	{r7, lr}
 8002736:	b084      	sub	sp, #16
 8002738:	af00      	add	r7, sp, #0
 800273a:	ed87 0a03 	vstr	s0, [r7, #12]
 800273e:	ed87 1b00 	vstr	d1, [r7]
      return fmod(__type(__x), __type(__y));
 8002742:	68f8      	ldr	r0, [r7, #12]
 8002744:	f7fd fef2 	bl	800052c <__aeabi_f2d>
 8002748:	4602      	mov	r2, r0
 800274a:	460b      	mov	r3, r1
 800274c:	ed97 1b00 	vldr	d1, [r7]
 8002750:	ec43 2b10 	vmov	d0, r2, r3
 8002754:	f019 f802 	bl	801b75c <fmod>
 8002758:	eeb0 7a40 	vmov.f32	s14, s0
 800275c:	eef0 7a60 	vmov.f32	s15, s1
    }
 8002760:	eeb0 0a47 	vmov.f32	s0, s14
 8002764:	eef0 0a67 	vmov.f32	s1, s15
 8002768:	3710      	adds	r7, #16
 800276a:	46bd      	mov	sp, r7
 800276c:	bd80      	pop	{r7, pc}
	...

08002770 <_ZN3jlb8Odometry15normalize_angleEf>:

        float normalize_angle(float angle)
 8002770:	b580      	push	{r7, lr}
 8002772:	b082      	sub	sp, #8
 8002774:	af00      	add	r7, sp, #0
 8002776:	6078      	str	r0, [r7, #4]
 8002778:	ed87 0a00 	vstr	s0, [r7]
        {
            angle = std::fmod(angle, 2.0f * M_PI);
 800277c:	ed9f 1b16 	vldr	d1, [pc, #88]	; 80027d8 <_ZN3jlb8Odometry15normalize_angleEf+0x68>
 8002780:	ed97 0a00 	vldr	s0, [r7]
 8002784:	f7ff ffd6 	bl	8002734 <_ZSt4fmodIfdEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8002788:	ec53 2b10 	vmov	r2, r3, d0
 800278c:	4610      	mov	r0, r2
 800278e:	4619      	mov	r1, r3
 8002790:	f7fe f9d4 	bl	8000b3c <__aeabi_d2f>
 8002794:	4603      	mov	r3, r0
 8002796:	603b      	str	r3, [r7, #0]
            if (angle < 0.0f)
 8002798:	edd7 7a00 	vldr	s15, [r7]
 800279c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80027a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80027a4:	d50f      	bpl.n	80027c6 <_ZN3jlb8Odometry15normalize_angleEf+0x56>
            {
                angle += 2.0f * M_PI;
 80027a6:	6838      	ldr	r0, [r7, #0]
 80027a8:	f7fd fec0 	bl	800052c <__aeabi_f2d>
 80027ac:	a30a      	add	r3, pc, #40	; (adr r3, 80027d8 <_ZN3jlb8Odometry15normalize_angleEf+0x68>)
 80027ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027b2:	f7fd fd5d 	bl	8000270 <__adddf3>
 80027b6:	4602      	mov	r2, r0
 80027b8:	460b      	mov	r3, r1
 80027ba:	4610      	mov	r0, r2
 80027bc:	4619      	mov	r1, r3
 80027be:	f7fe f9bd 	bl	8000b3c <__aeabi_d2f>
 80027c2:	4603      	mov	r3, r0
 80027c4:	603b      	str	r3, [r7, #0]
            }
            return angle;
 80027c6:	683b      	ldr	r3, [r7, #0]
 80027c8:	ee07 3a90 	vmov	s15, r3
        }
 80027cc:	eeb0 0a67 	vmov.f32	s0, s15
 80027d0:	3708      	adds	r7, #8
 80027d2:	46bd      	mov	sp, r7
 80027d4:	bd80      	pop	{r7, pc}
 80027d6:	bf00      	nop
 80027d8:	54442d18 	.word	0x54442d18
 80027dc:	401921fb 	.word	0x401921fb

080027e0 <_ZN3jlb8Odometry10correctionEff>:

        void correction([[maybe_unused]] float x_t_, [[maybe_unused]] float y_t_)
 80027e0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80027e4:	b094      	sub	sp, #80	; 0x50
 80027e6:	af00      	add	r7, sp, #0
 80027e8:	6178      	str	r0, [r7, #20]
 80027ea:	ed87 0a04 	vstr	s0, [r7, #16]
 80027ee:	edc7 0a03 	vstr	s1, [r7, #12]
        {
            x_t = x_t_ - (SENSOR_BASE / 2.0f * std::cos(theta_t));
 80027f2:	697b      	ldr	r3, [r7, #20]
 80027f4:	edd3 7a04 	vldr	s15, [r3, #16]
 80027f8:	eeb0 0a67 	vmov.f32	s0, s15
 80027fc:	f7ff fcb6 	bl	800216c <_ZSt3cosf>
 8002800:	eef0 7a40 	vmov.f32	s15, s0
 8002804:	eeb5 7a00 	vmov.f32	s14, #80	; 0x3e800000  0.250
 8002808:	ee67 7a87 	vmul.f32	s15, s15, s14
 800280c:	ed97 7a04 	vldr	s14, [r7, #16]
 8002810:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002814:	697b      	ldr	r3, [r7, #20]
 8002816:	edc3 7a02 	vstr	s15, [r3, #8]
            y_t = y_t_ - (SENSOR_BASE / 2.0f * std::sin(theta_t));
 800281a:	697b      	ldr	r3, [r7, #20]
 800281c:	edd3 7a04 	vldr	s15, [r3, #16]
 8002820:	eeb0 0a67 	vmov.f32	s0, s15
 8002824:	f7ff fcc2 	bl	80021ac <_ZSt3sinf>
 8002828:	eef0 7a40 	vmov.f32	s15, s0
 800282c:	eeb5 7a00 	vmov.f32	s14, #80	; 0x3e800000  0.250
 8002830:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002834:	ed97 7a03 	vldr	s14, [r7, #12]
 8002838:	ee77 7a67 	vsub.f32	s15, s14, s15
 800283c:	697b      	ldr	r3, [r7, #20]
 800283e:	edc3 7a03 	vstr	s15, [r3, #12]

            // clamp theta to certain values whichever is closer
            // the values are 0, 90, 180, 270, 360

            float theta_0 = std::fabs(theta_t);
 8002842:	697b      	ldr	r3, [r7, #20]
 8002844:	edd3 7a04 	vldr	s15, [r3, #16]
 8002848:	eeb0 0a67 	vmov.f32	s0, s15
 800284c:	f7ff fc9e 	bl	800218c <_ZSt4fabsf>
 8002850:	ed87 0a13 	vstr	s0, [r7, #76]	; 0x4c
            float theta_90 = std::fabs(theta_t - M_PI / 2.0f);
 8002854:	697b      	ldr	r3, [r7, #20]
 8002856:	691b      	ldr	r3, [r3, #16]
 8002858:	4618      	mov	r0, r3
 800285a:	f7fd fe67 	bl	800052c <__aeabi_f2d>
 800285e:	a396      	add	r3, pc, #600	; (adr r3, 8002ab8 <_ZN3jlb8Odometry10correctionEff+0x2d8>)
 8002860:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002864:	f7fd fd02 	bl	800026c <__aeabi_dsub>
 8002868:	4602      	mov	r2, r0
 800286a:	460b      	mov	r3, r1
 800286c:	603a      	str	r2, [r7, #0]
 800286e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002872:	607b      	str	r3, [r7, #4]
 8002874:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002878:	f7fe f960 	bl	8000b3c <__aeabi_d2f>
 800287c:	4603      	mov	r3, r0
 800287e:	64bb      	str	r3, [r7, #72]	; 0x48
            float theta_180 = std::fabs(theta_t - M_PI);
 8002880:	697b      	ldr	r3, [r7, #20]
 8002882:	691b      	ldr	r3, [r3, #16]
 8002884:	4618      	mov	r0, r3
 8002886:	f7fd fe51 	bl	800052c <__aeabi_f2d>
 800288a:	a38d      	add	r3, pc, #564	; (adr r3, 8002ac0 <_ZN3jlb8Odometry10correctionEff+0x2e0>)
 800288c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002890:	f7fd fcec 	bl	800026c <__aeabi_dsub>
 8002894:	4602      	mov	r2, r0
 8002896:	460b      	mov	r3, r1
 8002898:	4692      	mov	sl, r2
 800289a:	f023 4b00 	bic.w	fp, r3, #2147483648	; 0x80000000
 800289e:	4650      	mov	r0, sl
 80028a0:	4659      	mov	r1, fp
 80028a2:	f7fe f94b 	bl	8000b3c <__aeabi_d2f>
 80028a6:	4603      	mov	r3, r0
 80028a8:	647b      	str	r3, [r7, #68]	; 0x44
            float theta_270 = std::fabs(theta_t - 3.0f * M_PI / 2.0f);
 80028aa:	697b      	ldr	r3, [r7, #20]
 80028ac:	691b      	ldr	r3, [r3, #16]
 80028ae:	4618      	mov	r0, r3
 80028b0:	f7fd fe3c 	bl	800052c <__aeabi_f2d>
 80028b4:	a384      	add	r3, pc, #528	; (adr r3, 8002ac8 <_ZN3jlb8Odometry10correctionEff+0x2e8>)
 80028b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028ba:	f7fd fcd7 	bl	800026c <__aeabi_dsub>
 80028be:	4602      	mov	r2, r0
 80028c0:	460b      	mov	r3, r1
 80028c2:	4690      	mov	r8, r2
 80028c4:	f023 4900 	bic.w	r9, r3, #2147483648	; 0x80000000
 80028c8:	4640      	mov	r0, r8
 80028ca:	4649      	mov	r1, r9
 80028cc:	f7fe f936 	bl	8000b3c <__aeabi_d2f>
 80028d0:	4603      	mov	r3, r0
 80028d2:	643b      	str	r3, [r7, #64]	; 0x40
            float theta_360 = std::fabs(theta_t - 2.0f * M_PI);
 80028d4:	697b      	ldr	r3, [r7, #20]
 80028d6:	691b      	ldr	r3, [r3, #16]
 80028d8:	4618      	mov	r0, r3
 80028da:	f7fd fe27 	bl	800052c <__aeabi_f2d>
 80028de:	a37c      	add	r3, pc, #496	; (adr r3, 8002ad0 <_ZN3jlb8Odometry10correctionEff+0x2f0>)
 80028e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028e4:	f7fd fcc2 	bl	800026c <__aeabi_dsub>
 80028e8:	4602      	mov	r2, r0
 80028ea:	460b      	mov	r3, r1
 80028ec:	4614      	mov	r4, r2
 80028ee:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 80028f2:	4620      	mov	r0, r4
 80028f4:	4629      	mov	r1, r5
 80028f6:	f7fe f921 	bl	8000b3c <__aeabi_d2f>
 80028fa:	4603      	mov	r3, r0
 80028fc:	63fb      	str	r3, [r7, #60]	; 0x3c

            float min_theta = std::min({theta_0, theta_90, theta_180, theta_270, theta_360});
 80028fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002900:	627b      	str	r3, [r7, #36]	; 0x24
 8002902:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002904:	62bb      	str	r3, [r7, #40]	; 0x28
 8002906:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002908:	62fb      	str	r3, [r7, #44]	; 0x2c
 800290a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800290c:	633b      	str	r3, [r7, #48]	; 0x30
 800290e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002910:	637b      	str	r3, [r7, #52]	; 0x34
 8002912:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002916:	61fb      	str	r3, [r7, #28]
 8002918:	2305      	movs	r3, #5
 800291a:	623b      	str	r3, [r7, #32]
 800291c:	f107 031c 	add.w	r3, r7, #28
 8002920:	e893 0003 	ldmia.w	r3, {r0, r1}
 8002924:	f004 fda0 	bl	8007468 <_ZSt3minIfET_St16initializer_listIS0_E>
 8002928:	ed87 0a0e 	vstr	s0, [r7, #56]	; 0x38

            if (min_theta == theta_0)
 800292c:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8002930:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 8002934:	eeb4 7a67 	vcmp.f32	s14, s15
 8002938:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800293c:	d10e      	bne.n	800295c <_ZN3jlb8Odometry10correctionEff+0x17c>
            {
                theta_t = (theta_t + 0.0f) / 2.0f;
 800293e:	697b      	ldr	r3, [r7, #20]
 8002940:	edd3 7a04 	vldr	s15, [r3, #16]
 8002944:	ed9f 7a64 	vldr	s14, [pc, #400]	; 8002ad8 <_ZN3jlb8Odometry10correctionEff+0x2f8>
 8002948:	ee37 7a87 	vadd.f32	s14, s15, s14
 800294c:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8002950:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002954:	697b      	ldr	r3, [r7, #20]
 8002956:	edc3 7a04 	vstr	s15, [r3, #16]
 800295a:	e09a      	b.n	8002a92 <_ZN3jlb8Odometry10correctionEff+0x2b2>
            }
            else if (min_theta == theta_90)
 800295c:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8002960:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8002964:	eeb4 7a67 	vcmp.f32	s14, s15
 8002968:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800296c:	d11d      	bne.n	80029aa <_ZN3jlb8Odometry10correctionEff+0x1ca>
            {
                theta_t = (theta_t + M_PI / 2.0f) / 2.0f;
 800296e:	697b      	ldr	r3, [r7, #20]
 8002970:	691b      	ldr	r3, [r3, #16]
 8002972:	4618      	mov	r0, r3
 8002974:	f7fd fdda 	bl	800052c <__aeabi_f2d>
 8002978:	a34f      	add	r3, pc, #316	; (adr r3, 8002ab8 <_ZN3jlb8Odometry10correctionEff+0x2d8>)
 800297a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800297e:	f7fd fc77 	bl	8000270 <__adddf3>
 8002982:	4602      	mov	r2, r0
 8002984:	460b      	mov	r3, r1
 8002986:	4610      	mov	r0, r2
 8002988:	4619      	mov	r1, r3
 800298a:	f04f 0200 	mov.w	r2, #0
 800298e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002992:	f7fd ff4d 	bl	8000830 <__aeabi_ddiv>
 8002996:	4602      	mov	r2, r0
 8002998:	460b      	mov	r3, r1
 800299a:	4610      	mov	r0, r2
 800299c:	4619      	mov	r1, r3
 800299e:	f7fe f8cd 	bl	8000b3c <__aeabi_d2f>
 80029a2:	4602      	mov	r2, r0
 80029a4:	697b      	ldr	r3, [r7, #20]
 80029a6:	611a      	str	r2, [r3, #16]
 80029a8:	e073      	b.n	8002a92 <_ZN3jlb8Odometry10correctionEff+0x2b2>
            }
            else if (min_theta == theta_180)
 80029aa:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 80029ae:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80029b2:	eeb4 7a67 	vcmp.f32	s14, s15
 80029b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80029ba:	d11d      	bne.n	80029f8 <_ZN3jlb8Odometry10correctionEff+0x218>
            {
                theta_t = (theta_t + M_PI) / 2.0f;
 80029bc:	697b      	ldr	r3, [r7, #20]
 80029be:	691b      	ldr	r3, [r3, #16]
 80029c0:	4618      	mov	r0, r3
 80029c2:	f7fd fdb3 	bl	800052c <__aeabi_f2d>
 80029c6:	a33e      	add	r3, pc, #248	; (adr r3, 8002ac0 <_ZN3jlb8Odometry10correctionEff+0x2e0>)
 80029c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029cc:	f7fd fc50 	bl	8000270 <__adddf3>
 80029d0:	4602      	mov	r2, r0
 80029d2:	460b      	mov	r3, r1
 80029d4:	4610      	mov	r0, r2
 80029d6:	4619      	mov	r1, r3
 80029d8:	f04f 0200 	mov.w	r2, #0
 80029dc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80029e0:	f7fd ff26 	bl	8000830 <__aeabi_ddiv>
 80029e4:	4602      	mov	r2, r0
 80029e6:	460b      	mov	r3, r1
 80029e8:	4610      	mov	r0, r2
 80029ea:	4619      	mov	r1, r3
 80029ec:	f7fe f8a6 	bl	8000b3c <__aeabi_d2f>
 80029f0:	4602      	mov	r2, r0
 80029f2:	697b      	ldr	r3, [r7, #20]
 80029f4:	611a      	str	r2, [r3, #16]
 80029f6:	e04c      	b.n	8002a92 <_ZN3jlb8Odometry10correctionEff+0x2b2>
            }
            else if (min_theta == theta_270)
 80029f8:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 80029fc:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8002a00:	eeb4 7a67 	vcmp.f32	s14, s15
 8002a04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a08:	d11d      	bne.n	8002a46 <_ZN3jlb8Odometry10correctionEff+0x266>
            {
                theta_t = (theta_t + 3.0f * M_PI / 2.0f) / 2.0f;
 8002a0a:	697b      	ldr	r3, [r7, #20]
 8002a0c:	691b      	ldr	r3, [r3, #16]
 8002a0e:	4618      	mov	r0, r3
 8002a10:	f7fd fd8c 	bl	800052c <__aeabi_f2d>
 8002a14:	a32c      	add	r3, pc, #176	; (adr r3, 8002ac8 <_ZN3jlb8Odometry10correctionEff+0x2e8>)
 8002a16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a1a:	f7fd fc29 	bl	8000270 <__adddf3>
 8002a1e:	4602      	mov	r2, r0
 8002a20:	460b      	mov	r3, r1
 8002a22:	4610      	mov	r0, r2
 8002a24:	4619      	mov	r1, r3
 8002a26:	f04f 0200 	mov.w	r2, #0
 8002a2a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002a2e:	f7fd feff 	bl	8000830 <__aeabi_ddiv>
 8002a32:	4602      	mov	r2, r0
 8002a34:	460b      	mov	r3, r1
 8002a36:	4610      	mov	r0, r2
 8002a38:	4619      	mov	r1, r3
 8002a3a:	f7fe f87f 	bl	8000b3c <__aeabi_d2f>
 8002a3e:	4602      	mov	r2, r0
 8002a40:	697b      	ldr	r3, [r7, #20]
 8002a42:	611a      	str	r2, [r3, #16]
 8002a44:	e025      	b.n	8002a92 <_ZN3jlb8Odometry10correctionEff+0x2b2>
            }
            else if (min_theta == theta_360)
 8002a46:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8002a4a:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8002a4e:	eeb4 7a67 	vcmp.f32	s14, s15
 8002a52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a56:	d11c      	bne.n	8002a92 <_ZN3jlb8Odometry10correctionEff+0x2b2>
            {
                theta_t = (theta_t + 2.0f * M_PI) / 2.0f;
 8002a58:	697b      	ldr	r3, [r7, #20]
 8002a5a:	691b      	ldr	r3, [r3, #16]
 8002a5c:	4618      	mov	r0, r3
 8002a5e:	f7fd fd65 	bl	800052c <__aeabi_f2d>
 8002a62:	a31b      	add	r3, pc, #108	; (adr r3, 8002ad0 <_ZN3jlb8Odometry10correctionEff+0x2f0>)
 8002a64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a68:	f7fd fc02 	bl	8000270 <__adddf3>
 8002a6c:	4602      	mov	r2, r0
 8002a6e:	460b      	mov	r3, r1
 8002a70:	4610      	mov	r0, r2
 8002a72:	4619      	mov	r1, r3
 8002a74:	f04f 0200 	mov.w	r2, #0
 8002a78:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002a7c:	f7fd fed8 	bl	8000830 <__aeabi_ddiv>
 8002a80:	4602      	mov	r2, r0
 8002a82:	460b      	mov	r3, r1
 8002a84:	4610      	mov	r0, r2
 8002a86:	4619      	mov	r1, r3
 8002a88:	f7fe f858 	bl	8000b3c <__aeabi_d2f>
 8002a8c:	4602      	mov	r2, r0
 8002a8e:	697b      	ldr	r3, [r7, #20]
 8002a90:	611a      	str	r2, [r3, #16]
            }

            theta_t = normalize_angle(theta_t);
 8002a92:	697b      	ldr	r3, [r7, #20]
 8002a94:	edd3 7a04 	vldr	s15, [r3, #16]
 8002a98:	eeb0 0a67 	vmov.f32	s0, s15
 8002a9c:	6978      	ldr	r0, [r7, #20]
 8002a9e:	f7ff fe67 	bl	8002770 <_ZN3jlb8Odometry15normalize_angleEf>
 8002aa2:	eef0 7a40 	vmov.f32	s15, s0
 8002aa6:	697b      	ldr	r3, [r7, #20]
 8002aa8:	edc3 7a04 	vstr	s15, [r3, #16]
        }
 8002aac:	bf00      	nop
 8002aae:	3750      	adds	r7, #80	; 0x50
 8002ab0:	46bd      	mov	sp, r7
 8002ab2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002ab6:	bf00      	nop
 8002ab8:	54442d18 	.word	0x54442d18
 8002abc:	3ff921fb 	.word	0x3ff921fb
 8002ac0:	54442d18 	.word	0x54442d18
 8002ac4:	400921fb 	.word	0x400921fb
 8002ac8:	7f3321d2 	.word	0x7f3321d2
 8002acc:	4012d97c 	.word	0x4012d97c
 8002ad0:	54442d18 	.word	0x54442d18
 8002ad4:	401921fb 	.word	0x401921fb
 8002ad8:	00000000 	.word	0x00000000

08002adc <_ZN3PIDC1Ev>:
#define PID_HXX

class PID
{
public:
    PID() {}
 8002adc:	b480      	push	{r7}
 8002ade:	b083      	sub	sp, #12
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	6078      	str	r0, [r7, #4]
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	4618      	mov	r0, r3
 8002ae8:	370c      	adds	r7, #12
 8002aea:	46bd      	mov	sp, r7
 8002aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af0:	4770      	bx	lr

08002af2 <_ZN3PID4initEfffffff>:
    ~PID() {}

    void init(float kp, float ki, float kd, float tau, float T, float minOutput, float maxOutput)
 8002af2:	b480      	push	{r7}
 8002af4:	b089      	sub	sp, #36	; 0x24
 8002af6:	af00      	add	r7, sp, #0
 8002af8:	61f8      	str	r0, [r7, #28]
 8002afa:	ed87 0a06 	vstr	s0, [r7, #24]
 8002afe:	edc7 0a05 	vstr	s1, [r7, #20]
 8002b02:	ed87 1a04 	vstr	s2, [r7, #16]
 8002b06:	edc7 1a03 	vstr	s3, [r7, #12]
 8002b0a:	ed87 2a02 	vstr	s4, [r7, #8]
 8002b0e:	edc7 2a01 	vstr	s5, [r7, #4]
 8002b12:	ed87 3a00 	vstr	s6, [r7]
    {
        kp_ = kp;
 8002b16:	69fb      	ldr	r3, [r7, #28]
 8002b18:	69ba      	ldr	r2, [r7, #24]
 8002b1a:	601a      	str	r2, [r3, #0]
        ki_ = ki;
 8002b1c:	69fb      	ldr	r3, [r7, #28]
 8002b1e:	697a      	ldr	r2, [r7, #20]
 8002b20:	605a      	str	r2, [r3, #4]
        kd_ = kd;
 8002b22:	69fb      	ldr	r3, [r7, #28]
 8002b24:	693a      	ldr	r2, [r7, #16]
 8002b26:	609a      	str	r2, [r3, #8]
        tau_ = tau;
 8002b28:	69fb      	ldr	r3, [r7, #28]
 8002b2a:	68fa      	ldr	r2, [r7, #12]
 8002b2c:	60da      	str	r2, [r3, #12]
        T_ = T;
 8002b2e:	69fb      	ldr	r3, [r7, #28]
 8002b30:	68ba      	ldr	r2, [r7, #8]
 8002b32:	611a      	str	r2, [r3, #16]
        minOutput_ = minOutput;
 8002b34:	69fb      	ldr	r3, [r7, #28]
 8002b36:	687a      	ldr	r2, [r7, #4]
 8002b38:	615a      	str	r2, [r3, #20]
        maxOutput_ = maxOutput;
 8002b3a:	69fb      	ldr	r3, [r7, #28]
 8002b3c:	683a      	ldr	r2, [r7, #0]
 8002b3e:	619a      	str	r2, [r3, #24]
        prevError_ = 0;
 8002b40:	69fb      	ldr	r3, [r7, #28]
 8002b42:	f04f 0200 	mov.w	r2, #0
 8002b46:	61da      	str	r2, [r3, #28]
        integral_ = 0;
 8002b48:	69fb      	ldr	r3, [r7, #28]
 8002b4a:	f04f 0200 	mov.w	r2, #0
 8002b4e:	621a      	str	r2, [r3, #32]
    }
 8002b50:	bf00      	nop
 8002b52:	3724      	adds	r7, #36	; 0x24
 8002b54:	46bd      	mov	sp, r7
 8002b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b5a:	4770      	bx	lr

08002b5c <_ZN3PID6updateEfff>:

    float update(float setpoint, float processVariable, float dt)
 8002b5c:	b480      	push	{r7}
 8002b5e:	b089      	sub	sp, #36	; 0x24
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	60f8      	str	r0, [r7, #12]
 8002b64:	ed87 0a02 	vstr	s0, [r7, #8]
 8002b68:	edc7 0a01 	vstr	s1, [r7, #4]
 8002b6c:	ed87 1a00 	vstr	s2, [r7]
    {
        if (dt == 0)
 8002b70:	edd7 7a00 	vldr	s15, [r7]
 8002b74:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002b78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b7c:	d102      	bne.n	8002b84 <_ZN3PID6updateEfff+0x28>
            return 0;
 8002b7e:	f04f 0300 	mov.w	r3, #0
 8002b82:	e097      	b.n	8002cb4 <_ZN3PID6updateEfff+0x158>

        float error = setpoint - processVariable;
 8002b84:	ed97 7a02 	vldr	s14, [r7, #8]
 8002b88:	edd7 7a01 	vldr	s15, [r7, #4]
 8002b8c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002b90:	edc7 7a06 	vstr	s15, [r7, #24]
        integral_ += (error * dt);
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	ed93 7a08 	vldr	s14, [r3, #32]
 8002b9a:	edd7 6a06 	vldr	s13, [r7, #24]
 8002b9e:	edd7 7a00 	vldr	s15, [r7]
 8002ba2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002ba6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	edc3 7a08 	vstr	s15, [r3, #32]

        // Anti-windup: Limit the integral term
        if (integral_ > maxOutput_)
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	ed93 7a08 	vldr	s14, [r3, #32]
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	edd3 7a06 	vldr	s15, [r3, #24]
 8002bbc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002bc0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002bc4:	dd04      	ble.n	8002bd0 <_ZN3PID6updateEfff+0x74>
            integral_ = maxOutput_;
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	699a      	ldr	r2, [r3, #24]
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	621a      	str	r2, [r3, #32]
 8002bce:	e00e      	b.n	8002bee <_ZN3PID6updateEfff+0x92>
        else if (integral_ < minOutput_)
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	ed93 7a08 	vldr	s14, [r3, #32]
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	edd3 7a05 	vldr	s15, [r3, #20]
 8002bdc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002be0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002be4:	d503      	bpl.n	8002bee <_ZN3PID6updateEfff+0x92>
            integral_ = minOutput_;
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	695a      	ldr	r2, [r3, #20]
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	621a      	str	r2, [r3, #32]

        float derivative = (error - prevError_) / dt;
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	edd3 7a07 	vldr	s15, [r3, #28]
 8002bf4:	ed97 7a06 	vldr	s14, [r7, #24]
 8002bf8:	ee77 6a67 	vsub.f32	s13, s14, s15
 8002bfc:	ed97 7a00 	vldr	s14, [r7]
 8002c00:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002c04:	edc7 7a05 	vstr	s15, [r7, #20]

        float output = kp_ * (1 + dt / (tau_ + T_)) * error + ki_ * (dt / T_) * integral_ - kd_ * derivative;
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	ed93 7a00 	vldr	s14, [r3]
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	edd3 6a03 	vldr	s13, [r3, #12]
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	edd3 7a04 	vldr	s15, [r3, #16]
 8002c1a:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8002c1e:	ed97 6a00 	vldr	s12, [r7]
 8002c22:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8002c26:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002c2a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002c2e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002c32:	edd7 7a06 	vldr	s15, [r7, #24]
 8002c36:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	edd3 6a01 	vldr	s13, [r3, #4]
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	ed93 6a04 	vldr	s12, [r3, #16]
 8002c46:	edd7 5a00 	vldr	s11, [r7]
 8002c4a:	eec5 7a86 	vdiv.f32	s15, s11, s12
 8002c4e:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	edd3 7a08 	vldr	s15, [r3, #32]
 8002c58:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002c5c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	edd3 6a02 	vldr	s13, [r3, #8]
 8002c66:	edd7 7a05 	vldr	s15, [r7, #20]
 8002c6a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002c6e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002c72:	edc7 7a07 	vstr	s15, [r7, #28]

        // Output clamping: Limit the output within the specified range
        if (output > maxOutput_)
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	edd3 7a06 	vldr	s15, [r3, #24]
 8002c7c:	ed97 7a07 	vldr	s14, [r7, #28]
 8002c80:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002c84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c88:	dd03      	ble.n	8002c92 <_ZN3PID6updateEfff+0x136>
            output = maxOutput_;
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	699b      	ldr	r3, [r3, #24]
 8002c8e:	61fb      	str	r3, [r7, #28]
 8002c90:	e00c      	b.n	8002cac <_ZN3PID6updateEfff+0x150>
        else if (output < minOutput_)
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	edd3 7a05 	vldr	s15, [r3, #20]
 8002c98:	ed97 7a07 	vldr	s14, [r7, #28]
 8002c9c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002ca0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ca4:	d502      	bpl.n	8002cac <_ZN3PID6updateEfff+0x150>
            output = minOutput_;
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	695b      	ldr	r3, [r3, #20]
 8002caa:	61fb      	str	r3, [r7, #28]

        prevError_ = error;
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	69ba      	ldr	r2, [r7, #24]
 8002cb0:	61da      	str	r2, [r3, #28]

        return output;
 8002cb2:	69fb      	ldr	r3, [r7, #28]
    }
 8002cb4:	ee07 3a90 	vmov	s15, r3
 8002cb8:	eeb0 0a67 	vmov.f32	s0, s15
 8002cbc:	3724      	adds	r7, #36	; 0x24
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc4:	4770      	bx	lr

08002cc6 <_ZNSt12_Vector_baseIfSaIfEE12_Vector_implD1Ev>:
	  _M_copy_data(__x);
	  __x._M_copy_data(__tmp);
	}
      };

      struct _Vector_impl
 8002cc6:	b580      	push	{r7, lr}
 8002cc8:	b082      	sub	sp, #8
 8002cca:	af00      	add	r7, sp, #0
 8002ccc:	6078      	str	r0, [r7, #4]
 8002cce:	6878      	ldr	r0, [r7, #4]
 8002cd0:	f004 fbf7 	bl	80074c2 <_ZNSaIfED1Ev>
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	4618      	mov	r0, r3
 8002cd8:	3708      	adds	r7, #8
 8002cda:	46bd      	mov	sp, r7
 8002cdc:	bd80      	pop	{r7, pc}

08002cde <_ZNSt12_Vector_baseIfSaIfEEC1Ev>:
      allocator_type
      get_allocator() const _GLIBCXX_NOEXCEPT
      { return allocator_type(_M_get_Tp_allocator()); }

#if __cplusplus >= 201103L
      _Vector_base() = default;
 8002cde:	b580      	push	{r7, lr}
 8002ce0:	b082      	sub	sp, #8
 8002ce2:	af00      	add	r7, sp, #0
 8002ce4:	6078      	str	r0, [r7, #4]
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	4618      	mov	r0, r3
 8002cea:	f004 fbda 	bl	80074a2 <_ZNSt12_Vector_baseIfSaIfEE12_Vector_implC1Ev>
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	4618      	mov	r0, r3
 8002cf2:	3708      	adds	r7, #8
 8002cf4:	46bd      	mov	sp, r7
 8002cf6:	bd80      	pop	{r7, pc}

08002cf8 <_ZNSt6vectorIfSaIfEEC1Ev>:

      /**
       *  @brief  Creates a %vector with no elements.
       */
#if __cplusplus >= 201103L
      vector() = default;
 8002cf8:	b580      	push	{r7, lr}
 8002cfa:	b082      	sub	sp, #8
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	6078      	str	r0, [r7, #4]
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	4618      	mov	r0, r3
 8002d04:	f7ff ffeb 	bl	8002cde <_ZNSt12_Vector_baseIfSaIfEEC1Ev>
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	4618      	mov	r0, r3
 8002d0c:	3708      	adds	r7, #8
 8002d0e:	46bd      	mov	sp, r7
 8002d10:	bd80      	pop	{r7, pc}
	...

08002d14 <_ZN3jlb10ControllerC1ENS_9DirectionE>:

        Direction direction = Direction::STRAIGHT;
        Direction prev_direction = Direction::STRAIGHT;
        Mission mission = Mission::LABYRINTH;

        Controller(Direction direction_ = Direction::STRAIGHT) : direction{direction_}
 8002d14:	b580      	push	{r7, lr}
 8002d16:	b082      	sub	sp, #8
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	6078      	str	r0, [r7, #4]
 8002d1c:	6039      	str	r1, [r7, #0]
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	2210      	movs	r2, #16
 8002d22:	601a      	str	r2, [r3, #0]
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	2210      	movs	r2, #16
 8002d28:	605a      	str	r2, [r3, #4]
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	f04f 0200 	mov.w	r2, #0
 8002d30:	609a      	str	r2, [r3, #8]
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	f04f 0200 	mov.w	r2, #0
 8002d38:	60da      	str	r2, [r3, #12]
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	f04f 0200 	mov.w	r2, #0
 8002d40:	611a      	str	r2, [r3, #16]
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	f04f 0200 	mov.w	r2, #0
 8002d48:	615a      	str	r2, [r3, #20]
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	f04f 0200 	mov.w	r2, #0
 8002d50:	619a      	str	r2, [r3, #24]
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	f04f 0200 	mov.w	r2, #0
 8002d58:	61da      	str	r2, [r3, #28]
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	f04f 0200 	mov.w	r2, #0
 8002d60:	621a      	str	r2, [r3, #32]
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	f04f 0200 	mov.w	r2, #0
 8002d68:	625a      	str	r2, [r3, #36]	; 0x24
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	4a1c      	ldr	r2, [pc, #112]	; (8002de0 <_ZN3jlb10ControllerC1ENS_9DirectionE+0xcc>)
 8002d6e:	629a      	str	r2, [r3, #40]	; 0x28
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	336c      	adds	r3, #108	; 0x6c
 8002d74:	4618      	mov	r0, r3
 8002d76:	f7ff ffbf 	bl	8002cf8 <_ZNSt6vectorIfSaIfEEC1Ev>
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	3378      	adds	r3, #120	; 0x78
 8002d7e:	4618      	mov	r0, r3
 8002d80:	f7ff ffba 	bl	8002cf8 <_ZNSt6vectorIfSaIfEEC1Ev>
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	683a      	ldr	r2, [r7, #0]
 8002d88:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	2202      	movs	r2, #2
 8002d90:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	2200      	movs	r2, #0
 8002d98:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	f04f 0200 	mov.w	r2, #0
 8002da2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	3394      	adds	r3, #148	; 0x94
 8002daa:	4618      	mov	r0, r3
 8002dac:	f7ff fe96 	bl	8002adc <_ZN3PIDC1Ev>
        {
            object_pid.init(kP, kI, kD, TAU, T, LIM_MIN, LIM_MAX);
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	3394      	adds	r3, #148	; 0x94
 8002db4:	eeb7 3a00 	vmov.f32	s6, #112	; 0x3f800000  1.0
 8002db8:	eddf 2a0a 	vldr	s5, [pc, #40]	; 8002de4 <_ZN3jlb10ControllerC1ENS_9DirectionE+0xd0>
 8002dbc:	ed9f 2a0a 	vldr	s4, [pc, #40]	; 8002de8 <_ZN3jlb10ControllerC1ENS_9DirectionE+0xd4>
 8002dc0:	eddf 1a0a 	vldr	s3, [pc, #40]	; 8002dec <_ZN3jlb10ControllerC1ENS_9DirectionE+0xd8>
 8002dc4:	ed9f 1a07 	vldr	s2, [pc, #28]	; 8002de4 <_ZN3jlb10ControllerC1ENS_9DirectionE+0xd0>
 8002dc8:	eddf 0a06 	vldr	s1, [pc, #24]	; 8002de4 <_ZN3jlb10ControllerC1ENS_9DirectionE+0xd0>
 8002dcc:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8002dd0:	4618      	mov	r0, r3
 8002dd2:	f7ff fe8e 	bl	8002af2 <_ZN3PID4initEfffffff>
        }
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	4618      	mov	r0, r3
 8002dda:	3708      	adds	r7, #8
 8002ddc:	46bd      	mov	sp, r7
 8002dde:	bd80      	pop	{r7, pc}
 8002de0:	42c80000 	.word	0x42c80000
 8002de4:	00000000 	.word	0x00000000
 8002de8:	3ba3d70a 	.word	0x3ba3d70a
 8002dec:	3d4ccccd 	.word	0x3d4ccccd

08002df0 <_ZN3jlb10Controller7stanleyEff>:
        ~Controller() {}

        float stanley(const float cross_track_error, const float heading_error)
 8002df0:	b580      	push	{r7, lr}
 8002df2:	ed2d 8b02 	vpush	{d8}
 8002df6:	b084      	sub	sp, #16
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	60f8      	str	r0, [r7, #12]
 8002dfc:	ed87 0a02 	vstr	s0, [r7, #8]
 8002e00:	edc7 0a01 	vstr	s1, [r7, #4]
        {
            return kAng * heading_error + std::atan2(kDist * cross_track_error, kSoft + kDamp * current_velocity);
 8002e04:	edd7 7a01 	vldr	s15, [r7, #4]
 8002e08:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002e0c:	ee27 8a87 	vmul.f32	s16, s15, s14
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	edd3 7a24 	vldr	s15, [r3, #144]	; 0x90
 8002e16:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8002e48 <_ZN3jlb10Controller7stanleyEff+0x58>
 8002e1a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002e1e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002e22:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002e26:	eef0 0a67 	vmov.f32	s1, s15
 8002e2a:	ed97 0a02 	vldr	s0, [r7, #8]
 8002e2e:	f7ff f989 	bl	8002144 <_ZSt5atan2ff>
 8002e32:	eef0 7a40 	vmov.f32	s15, s0
 8002e36:	ee78 7a27 	vadd.f32	s15, s16, s15
        }
 8002e3a:	eeb0 0a67 	vmov.f32	s0, s15
 8002e3e:	3710      	adds	r7, #16
 8002e40:	46bd      	mov	sp, r7
 8002e42:	ecbd 8b02 	vpop	{d8}
 8002e46:	bd80      	pop	{r7, pc}
 8002e48:	00000000 	.word	0x00000000

08002e4c <_ZN3jlb10Controller20select_control_pointESt6vectorIfSaIfEEf>:

        float select_control_point(std::vector<float> line_positions, float prev_line_position)
 8002e4c:	b590      	push	{r4, r7, lr}
 8002e4e:	ed2d 8b02 	vpush	{d8}
 8002e52:	b085      	sub	sp, #20
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	60f8      	str	r0, [r7, #12]
 8002e58:	60b9      	str	r1, [r7, #8]
 8002e5a:	ed87 0a01 	vstr	s0, [r7, #4]
        {
            std::sort(line_positions.begin(), line_positions.end());
 8002e5e:	68b8      	ldr	r0, [r7, #8]
 8002e60:	f004 fb6e 	bl	8007540 <_ZNSt6vectorIfSaIfEE5beginEv>
 8002e64:	4604      	mov	r4, r0
 8002e66:	68b8      	ldr	r0, [r7, #8]
 8002e68:	f004 fb7a 	bl	8007560 <_ZNSt6vectorIfSaIfEE3endEv>
 8002e6c:	4603      	mov	r3, r0
 8002e6e:	4619      	mov	r1, r3
 8002e70:	4620      	mov	r0, r4
 8002e72:	f004 fb86 	bl	8007582 <_ZSt4sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEEvT_S7_>

            if (line_positions.size() == 1)
 8002e76:	68b8      	ldr	r0, [r7, #8]
 8002e78:	f004 fb93 	bl	80075a2 <_ZNKSt6vectorIfSaIfEE4sizeEv>
 8002e7c:	4603      	mov	r3, r0
 8002e7e:	2b01      	cmp	r3, #1
 8002e80:	bf0c      	ite	eq
 8002e82:	2301      	moveq	r3, #1
 8002e84:	2300      	movne	r3, #0
 8002e86:	b2db      	uxtb	r3, r3
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d007      	beq.n	8002e9c <_ZN3jlb10Controller20select_control_pointESt6vectorIfSaIfEEf+0x50>
            {
                return line_positions[0];
 8002e8c:	2100      	movs	r1, #0
 8002e8e:	68b8      	ldr	r0, [r7, #8]
 8002e90:	f004 fb97 	bl	80075c2 <_ZNSt6vectorIfSaIfEEixEj>
 8002e94:	4603      	mov	r3, r0
 8002e96:	edd3 7a00 	vldr	s15, [r3]
 8002e9a:	e114      	b.n	80030c6 <_ZN3jlb10Controller20select_control_pointESt6vectorIfSaIfEEf+0x27a>
            }
            else if (line_positions.size() == 2)
 8002e9c:	68b8      	ldr	r0, [r7, #8]
 8002e9e:	f004 fb80 	bl	80075a2 <_ZNKSt6vectorIfSaIfEE4sizeEv>
 8002ea2:	4603      	mov	r3, r0
 8002ea4:	2b02      	cmp	r3, #2
 8002ea6:	bf0c      	ite	eq
 8002ea8:	2301      	moveq	r3, #1
 8002eaa:	2300      	movne	r3, #0
 8002eac:	b2db      	uxtb	r3, r3
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	f000 8096 	beq.w	8002fe0 <_ZN3jlb10Controller20select_control_pointESt6vectorIfSaIfEEf+0x194>
            {
                switch (direction)
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002eba:	2b02      	cmp	r3, #2
 8002ebc:	d00f      	beq.n	8002ede <_ZN3jlb10Controller20select_control_pointESt6vectorIfSaIfEEf+0x92>
 8002ebe:	2b02      	cmp	r3, #2
 8002ec0:	f300 808b 	bgt.w	8002fda <_ZN3jlb10Controller20select_control_pointESt6vectorIfSaIfEEf+0x18e>
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d002      	beq.n	8002ece <_ZN3jlb10Controller20select_control_pointESt6vectorIfSaIfEEf+0x82>
 8002ec8:	2b01      	cmp	r3, #1
 8002eca:	d07e      	beq.n	8002fca <_ZN3jlb10Controller20select_control_pointESt6vectorIfSaIfEEf+0x17e>
 8002ecc:	e085      	b.n	8002fda <_ZN3jlb10Controller20select_control_pointESt6vectorIfSaIfEEf+0x18e>
                {
                case Direction::LEFT:
                {
                    return line_positions[0];
 8002ece:	2100      	movs	r1, #0
 8002ed0:	68b8      	ldr	r0, [r7, #8]
 8002ed2:	f004 fb76 	bl	80075c2 <_ZNSt6vectorIfSaIfEEixEj>
 8002ed6:	4603      	mov	r3, r0
 8002ed8:	edd3 7a00 	vldr	s15, [r3]
 8002edc:	e0f3      	b.n	80030c6 <_ZN3jlb10Controller20select_control_pointESt6vectorIfSaIfEEf+0x27a>
                }
                case Direction::STRAIGHT:
                {
                    if (direction == prev_direction)
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002eea:	429a      	cmp	r2, r3
 8002eec:	d136      	bne.n	8002f5c <_ZN3jlb10Controller20select_control_pointESt6vectorIfSaIfEEf+0x110>
                    {
                        return std::fabs(line_positions[0] - prev_line_position) < std::fabs(line_positions[1] - prev_line_position) ? line_positions[0] : line_positions[1];
 8002eee:	2100      	movs	r1, #0
 8002ef0:	68b8      	ldr	r0, [r7, #8]
 8002ef2:	f004 fb66 	bl	80075c2 <_ZNSt6vectorIfSaIfEEixEj>
 8002ef6:	4603      	mov	r3, r0
 8002ef8:	ed93 7a00 	vldr	s14, [r3]
 8002efc:	edd7 7a01 	vldr	s15, [r7, #4]
 8002f00:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002f04:	eeb0 0a67 	vmov.f32	s0, s15
 8002f08:	f7ff f940 	bl	800218c <_ZSt4fabsf>
 8002f0c:	eeb0 8a40 	vmov.f32	s16, s0
 8002f10:	2101      	movs	r1, #1
 8002f12:	68b8      	ldr	r0, [r7, #8]
 8002f14:	f004 fb55 	bl	80075c2 <_ZNSt6vectorIfSaIfEEixEj>
 8002f18:	4603      	mov	r3, r0
 8002f1a:	ed93 7a00 	vldr	s14, [r3]
 8002f1e:	edd7 7a01 	vldr	s15, [r7, #4]
 8002f22:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002f26:	eeb0 0a67 	vmov.f32	s0, s15
 8002f2a:	f7ff f92f 	bl	800218c <_ZSt4fabsf>
 8002f2e:	eef0 7a40 	vmov.f32	s15, s0
 8002f32:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8002f36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f3a:	d507      	bpl.n	8002f4c <_ZN3jlb10Controller20select_control_pointESt6vectorIfSaIfEEf+0x100>
 8002f3c:	2100      	movs	r1, #0
 8002f3e:	68b8      	ldr	r0, [r7, #8]
 8002f40:	f004 fb3f 	bl	80075c2 <_ZNSt6vectorIfSaIfEEixEj>
 8002f44:	4603      	mov	r3, r0
 8002f46:	edd3 7a00 	vldr	s15, [r3]
 8002f4a:	e0bc      	b.n	80030c6 <_ZN3jlb10Controller20select_control_pointESt6vectorIfSaIfEEf+0x27a>
 8002f4c:	2101      	movs	r1, #1
 8002f4e:	68b8      	ldr	r0, [r7, #8]
 8002f50:	f004 fb37 	bl	80075c2 <_ZNSt6vectorIfSaIfEEixEj>
 8002f54:	4603      	mov	r3, r0
 8002f56:	edd3 7a00 	vldr	s15, [r3]
 8002f5a:	e0b4      	b.n	80030c6 <_ZN3jlb10Controller20select_control_pointESt6vectorIfSaIfEEf+0x27a>
                    }
                    else
                    {
                        return std::fabs(line_positions[0] - prev_line_position) > std::fabs(line_positions[1] - prev_line_position) ? line_positions[0] : line_positions[1];
 8002f5c:	2100      	movs	r1, #0
 8002f5e:	68b8      	ldr	r0, [r7, #8]
 8002f60:	f004 fb2f 	bl	80075c2 <_ZNSt6vectorIfSaIfEEixEj>
 8002f64:	4603      	mov	r3, r0
 8002f66:	ed93 7a00 	vldr	s14, [r3]
 8002f6a:	edd7 7a01 	vldr	s15, [r7, #4]
 8002f6e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002f72:	eeb0 0a67 	vmov.f32	s0, s15
 8002f76:	f7ff f909 	bl	800218c <_ZSt4fabsf>
 8002f7a:	eeb0 8a40 	vmov.f32	s16, s0
 8002f7e:	2101      	movs	r1, #1
 8002f80:	68b8      	ldr	r0, [r7, #8]
 8002f82:	f004 fb1e 	bl	80075c2 <_ZNSt6vectorIfSaIfEEixEj>
 8002f86:	4603      	mov	r3, r0
 8002f88:	ed93 7a00 	vldr	s14, [r3]
 8002f8c:	edd7 7a01 	vldr	s15, [r7, #4]
 8002f90:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002f94:	eeb0 0a67 	vmov.f32	s0, s15
 8002f98:	f7ff f8f8 	bl	800218c <_ZSt4fabsf>
 8002f9c:	eef0 7a40 	vmov.f32	s15, s0
 8002fa0:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8002fa4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002fa8:	dd07      	ble.n	8002fba <_ZN3jlb10Controller20select_control_pointESt6vectorIfSaIfEEf+0x16e>
 8002faa:	2100      	movs	r1, #0
 8002fac:	68b8      	ldr	r0, [r7, #8]
 8002fae:	f004 fb08 	bl	80075c2 <_ZNSt6vectorIfSaIfEEixEj>
 8002fb2:	4603      	mov	r3, r0
 8002fb4:	edd3 7a00 	vldr	s15, [r3]
 8002fb8:	e085      	b.n	80030c6 <_ZN3jlb10Controller20select_control_pointESt6vectorIfSaIfEEf+0x27a>
 8002fba:	2101      	movs	r1, #1
 8002fbc:	68b8      	ldr	r0, [r7, #8]
 8002fbe:	f004 fb00 	bl	80075c2 <_ZNSt6vectorIfSaIfEEixEj>
 8002fc2:	4603      	mov	r3, r0
 8002fc4:	edd3 7a00 	vldr	s15, [r3]
 8002fc8:	e07d      	b.n	80030c6 <_ZN3jlb10Controller20select_control_pointESt6vectorIfSaIfEEf+0x27a>
                    }
                }
                case Direction::RIGHT:
                {
                    return line_positions[1];
 8002fca:	2101      	movs	r1, #1
 8002fcc:	68b8      	ldr	r0, [r7, #8]
 8002fce:	f004 faf8 	bl	80075c2 <_ZNSt6vectorIfSaIfEEixEj>
 8002fd2:	4603      	mov	r3, r0
 8002fd4:	edd3 7a00 	vldr	s15, [r3]
 8002fd8:	e075      	b.n	80030c6 <_ZN3jlb10Controller20select_control_pointESt6vectorIfSaIfEEf+0x27a>
                }
                default:
                    return 0.0f;
 8002fda:	eddf 7a3e 	vldr	s15, [pc, #248]	; 80030d4 <_ZN3jlb10Controller20select_control_pointESt6vectorIfSaIfEEf+0x288>
 8002fde:	e072      	b.n	80030c6 <_ZN3jlb10Controller20select_control_pointESt6vectorIfSaIfEEf+0x27a>
                }
            }
            else if (line_positions.size() == 3)
 8002fe0:	68b8      	ldr	r0, [r7, #8]
 8002fe2:	f004 fade 	bl	80075a2 <_ZNKSt6vectorIfSaIfEE4sizeEv>
 8002fe6:	4603      	mov	r3, r0
 8002fe8:	2b03      	cmp	r3, #3
 8002fea:	bf0c      	ite	eq
 8002fec:	2301      	moveq	r3, #1
 8002fee:	2300      	movne	r3, #0
 8002ff0:	b2db      	uxtb	r3, r3
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d026      	beq.n	8003044 <_ZN3jlb10Controller20select_control_pointESt6vectorIfSaIfEEf+0x1f8>
            {
                switch (direction)
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002ffc:	2b02      	cmp	r3, #2
 8002ffe:	d00e      	beq.n	800301e <_ZN3jlb10Controller20select_control_pointESt6vectorIfSaIfEEf+0x1d2>
 8003000:	2b02      	cmp	r3, #2
 8003002:	dc1c      	bgt.n	800303e <_ZN3jlb10Controller20select_control_pointESt6vectorIfSaIfEEf+0x1f2>
 8003004:	2b00      	cmp	r3, #0
 8003006:	d002      	beq.n	800300e <_ZN3jlb10Controller20select_control_pointESt6vectorIfSaIfEEf+0x1c2>
 8003008:	2b01      	cmp	r3, #1
 800300a:	d010      	beq.n	800302e <_ZN3jlb10Controller20select_control_pointESt6vectorIfSaIfEEf+0x1e2>
 800300c:	e017      	b.n	800303e <_ZN3jlb10Controller20select_control_pointESt6vectorIfSaIfEEf+0x1f2>
                {
                case Direction::LEFT:
                {
                    return line_positions[0];
 800300e:	2100      	movs	r1, #0
 8003010:	68b8      	ldr	r0, [r7, #8]
 8003012:	f004 fad6 	bl	80075c2 <_ZNSt6vectorIfSaIfEEixEj>
 8003016:	4603      	mov	r3, r0
 8003018:	edd3 7a00 	vldr	s15, [r3]
 800301c:	e053      	b.n	80030c6 <_ZN3jlb10Controller20select_control_pointESt6vectorIfSaIfEEf+0x27a>
                }
                case Direction::STRAIGHT:
                {
                    return line_positions[1];
 800301e:	2101      	movs	r1, #1
 8003020:	68b8      	ldr	r0, [r7, #8]
 8003022:	f004 face 	bl	80075c2 <_ZNSt6vectorIfSaIfEEixEj>
 8003026:	4603      	mov	r3, r0
 8003028:	edd3 7a00 	vldr	s15, [r3]
 800302c:	e04b      	b.n	80030c6 <_ZN3jlb10Controller20select_control_pointESt6vectorIfSaIfEEf+0x27a>
                }
                case Direction::RIGHT:
                {
                    return line_positions[2];
 800302e:	2102      	movs	r1, #2
 8003030:	68b8      	ldr	r0, [r7, #8]
 8003032:	f004 fac6 	bl	80075c2 <_ZNSt6vectorIfSaIfEEixEj>
 8003036:	4603      	mov	r3, r0
 8003038:	edd3 7a00 	vldr	s15, [r3]
 800303c:	e043      	b.n	80030c6 <_ZN3jlb10Controller20select_control_pointESt6vectorIfSaIfEEf+0x27a>
                }
                default:
                    return 0.0f;
 800303e:	eddf 7a25 	vldr	s15, [pc, #148]	; 80030d4 <_ZN3jlb10Controller20select_control_pointESt6vectorIfSaIfEEf+0x288>
 8003042:	e040      	b.n	80030c6 <_ZN3jlb10Controller20select_control_pointESt6vectorIfSaIfEEf+0x27a>
                }
            }
            else if (line_positions.size() == 4)
 8003044:	68b8      	ldr	r0, [r7, #8]
 8003046:	f004 faac 	bl	80075a2 <_ZNKSt6vectorIfSaIfEE4sizeEv>
 800304a:	4603      	mov	r3, r0
 800304c:	2b04      	cmp	r3, #4
 800304e:	bf0c      	ite	eq
 8003050:	2301      	moveq	r3, #1
 8003052:	2300      	movne	r3, #0
 8003054:	b2db      	uxtb	r3, r3
 8003056:	2b00      	cmp	r3, #0
 8003058:	d033      	beq.n	80030c2 <_ZN3jlb10Controller20select_control_pointESt6vectorIfSaIfEEf+0x276>
            {
                switch (direction)
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003060:	2b02      	cmp	r3, #2
 8003062:	d00e      	beq.n	8003082 <_ZN3jlb10Controller20select_control_pointESt6vectorIfSaIfEEf+0x236>
 8003064:	2b02      	cmp	r3, #2
 8003066:	dc29      	bgt.n	80030bc <_ZN3jlb10Controller20select_control_pointESt6vectorIfSaIfEEf+0x270>
 8003068:	2b00      	cmp	r3, #0
 800306a:	d002      	beq.n	8003072 <_ZN3jlb10Controller20select_control_pointESt6vectorIfSaIfEEf+0x226>
 800306c:	2b01      	cmp	r3, #1
 800306e:	d01d      	beq.n	80030ac <_ZN3jlb10Controller20select_control_pointESt6vectorIfSaIfEEf+0x260>
 8003070:	e024      	b.n	80030bc <_ZN3jlb10Controller20select_control_pointESt6vectorIfSaIfEEf+0x270>
                {
                case Direction::LEFT:
                {
                    return line_positions[0];
 8003072:	2100      	movs	r1, #0
 8003074:	68b8      	ldr	r0, [r7, #8]
 8003076:	f004 faa4 	bl	80075c2 <_ZNSt6vectorIfSaIfEEixEj>
 800307a:	4603      	mov	r3, r0
 800307c:	edd3 7a00 	vldr	s15, [r3]
 8003080:	e021      	b.n	80030c6 <_ZN3jlb10Controller20select_control_pointESt6vectorIfSaIfEEf+0x27a>
                }
                case Direction::STRAIGHT:
                {
                    return line_positions[1] + line_positions[2] / 2.0f;
 8003082:	2101      	movs	r1, #1
 8003084:	68b8      	ldr	r0, [r7, #8]
 8003086:	f004 fa9c 	bl	80075c2 <_ZNSt6vectorIfSaIfEEixEj>
 800308a:	4603      	mov	r3, r0
 800308c:	ed93 8a00 	vldr	s16, [r3]
 8003090:	2102      	movs	r1, #2
 8003092:	68b8      	ldr	r0, [r7, #8]
 8003094:	f004 fa95 	bl	80075c2 <_ZNSt6vectorIfSaIfEEixEj>
 8003098:	4603      	mov	r3, r0
 800309a:	ed93 7a00 	vldr	s14, [r3]
 800309e:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80030a2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80030a6:	ee78 7a27 	vadd.f32	s15, s16, s15
 80030aa:	e00c      	b.n	80030c6 <_ZN3jlb10Controller20select_control_pointESt6vectorIfSaIfEEf+0x27a>
                }
                case Direction::RIGHT:
                {
                    return line_positions[3];
 80030ac:	2103      	movs	r1, #3
 80030ae:	68b8      	ldr	r0, [r7, #8]
 80030b0:	f004 fa87 	bl	80075c2 <_ZNSt6vectorIfSaIfEEixEj>
 80030b4:	4603      	mov	r3, r0
 80030b6:	edd3 7a00 	vldr	s15, [r3]
 80030ba:	e004      	b.n	80030c6 <_ZN3jlb10Controller20select_control_pointESt6vectorIfSaIfEEf+0x27a>
                }
                default:
                    return 0.0f;
 80030bc:	eddf 7a05 	vldr	s15, [pc, #20]	; 80030d4 <_ZN3jlb10Controller20select_control_pointESt6vectorIfSaIfEEf+0x288>
 80030c0:	e001      	b.n	80030c6 <_ZN3jlb10Controller20select_control_pointESt6vectorIfSaIfEEf+0x27a>
            }
            else
            {
                // this should never happen

                return 0.0f;
 80030c2:	eddf 7a04 	vldr	s15, [pc, #16]	; 80030d4 <_ZN3jlb10Controller20select_control_pointESt6vectorIfSaIfEEf+0x288>
            }
        }
 80030c6:	eeb0 0a67 	vmov.f32	s0, s15
 80030ca:	3714      	adds	r7, #20
 80030cc:	46bd      	mov	sp, r7
 80030ce:	ecbd 8b02 	vpop	{d8}
 80030d2:	bd90      	pop	{r4, r7, pc}
 80030d4:	00000000 	.word	0x00000000

080030d8 <_ZZN3jlb10Controller15lateral_controlEvENKUlbE_clEb>:

        void lateral_control()
        {
            if (std::all_of(std::begin(detection_front), std::end(detection_front), [](bool b)
 80030d8:	b480      	push	{r7}
 80030da:	b083      	sub	sp, #12
 80030dc:	af00      	add	r7, sp, #0
 80030de:	6078      	str	r0, [r7, #4]
 80030e0:	460b      	mov	r3, r1
 80030e2:	70fb      	strb	r3, [r7, #3]
                            { return b; }))
 80030e4:	78fb      	ldrb	r3, [r7, #3]
 80030e6:	4618      	mov	r0, r3
 80030e8:	370c      	adds	r7, #12
 80030ea:	46bd      	mov	sp, r7
 80030ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f0:	4770      	bx	lr

080030f2 <_ZZN3jlb10Controller15lateral_controlEvENKUlbE0_clEb>:
            {
                return;
            }

            if (std::all_of(std::begin(detection_rear), std::end(detection_rear), [](bool b)
 80030f2:	b480      	push	{r7}
 80030f4:	b083      	sub	sp, #12
 80030f6:	af00      	add	r7, sp, #0
 80030f8:	6078      	str	r0, [r7, #4]
 80030fa:	460b      	mov	r3, r1
 80030fc:	70fb      	strb	r3, [r7, #3]
                            { return b; }))
 80030fe:	78fb      	ldrb	r3, [r7, #3]
 8003100:	4618      	mov	r0, r3
 8003102:	370c      	adds	r7, #12
 8003104:	46bd      	mov	sp, r7
 8003106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800310a:	4770      	bx	lr

0800310c <_ZN3jlb10Controller15lateral_controlEv>:
        void lateral_control()
 800310c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800310e:	b08b      	sub	sp, #44	; 0x2c
 8003110:	af00      	add	r7, sp, #0
 8003112:	6078      	str	r0, [r7, #4]
            if (std::all_of(std::begin(detection_front), std::end(detection_front), [](bool b)
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	332c      	adds	r3, #44	; 0x2c
 8003118:	4618      	mov	r0, r3
 800311a:	f004 fa62 	bl	80075e2 <_ZSt5beginIbLj32EEPT_RAT0__S0_>
 800311e:	4604      	mov	r4, r0
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	332c      	adds	r3, #44	; 0x2c
 8003124:	4618      	mov	r0, r3
 8003126:	f004 fa67 	bl	80075f8 <_ZSt3endIbLj32EEPT_RAT0__S0_>
 800312a:	4603      	mov	r3, r0
 800312c:	4632      	mov	r2, r6
 800312e:	4619      	mov	r1, r3
 8003130:	4620      	mov	r0, r4
 8003132:	f004 fa6d 	bl	8007610 <_ZSt6all_ofIPbZN3jlb10Controller15lateral_controlEvEUlbE_EbT_S4_T0_>
 8003136:	4603      	mov	r3, r0
 8003138:	2b00      	cmp	r3, #0
 800313a:	f040 8101 	bne.w	8003340 <_ZN3jlb10Controller15lateral_controlEv+0x234>
            if (std::all_of(std::begin(detection_rear), std::end(detection_rear), [](bool b)
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	334c      	adds	r3, #76	; 0x4c
 8003142:	4618      	mov	r0, r3
 8003144:	f004 fa4d 	bl	80075e2 <_ZSt5beginIbLj32EEPT_RAT0__S0_>
 8003148:	4604      	mov	r4, r0
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	334c      	adds	r3, #76	; 0x4c
 800314e:	4618      	mov	r0, r3
 8003150:	f004 fa52 	bl	80075f8 <_ZSt3endIbLj32EEPT_RAT0__S0_>
 8003154:	4603      	mov	r3, r0
 8003156:	462a      	mov	r2, r5
 8003158:	4619      	mov	r1, r3
 800315a:	4620      	mov	r0, r4
 800315c:	f004 fa6e 	bl	800763c <_ZSt6all_ofIPbZN3jlb10Controller15lateral_controlEvEUlbE0_EbT_S4_T0_>
 8003160:	4603      	mov	r3, r0
 8003162:	2b00      	cmp	r3, #0
 8003164:	f040 80ee 	bne.w	8003344 <_ZN3jlb10Controller15lateral_controlEv+0x238>
            {
                return;
            }

            if (line_positions_front.size() == 0 || line_positions_rear.size() == 0 || line_positions_front.size() > 4 || line_positions_rear.size() > 4)
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	336c      	adds	r3, #108	; 0x6c
 800316c:	4618      	mov	r0, r3
 800316e:	f004 fa18 	bl	80075a2 <_ZNKSt6vectorIfSaIfEE4sizeEv>
 8003172:	4603      	mov	r3, r0
 8003174:	2b00      	cmp	r3, #0
 8003176:	d017      	beq.n	80031a8 <_ZN3jlb10Controller15lateral_controlEv+0x9c>
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	3378      	adds	r3, #120	; 0x78
 800317c:	4618      	mov	r0, r3
 800317e:	f004 fa10 	bl	80075a2 <_ZNKSt6vectorIfSaIfEE4sizeEv>
 8003182:	4603      	mov	r3, r0
 8003184:	2b00      	cmp	r3, #0
 8003186:	d00f      	beq.n	80031a8 <_ZN3jlb10Controller15lateral_controlEv+0x9c>
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	336c      	adds	r3, #108	; 0x6c
 800318c:	4618      	mov	r0, r3
 800318e:	f004 fa08 	bl	80075a2 <_ZNKSt6vectorIfSaIfEE4sizeEv>
 8003192:	4603      	mov	r3, r0
 8003194:	2b04      	cmp	r3, #4
 8003196:	d807      	bhi.n	80031a8 <_ZN3jlb10Controller15lateral_controlEv+0x9c>
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	3378      	adds	r3, #120	; 0x78
 800319c:	4618      	mov	r0, r3
 800319e:	f004 fa00 	bl	80075a2 <_ZNKSt6vectorIfSaIfEE4sizeEv>
 80031a2:	4603      	mov	r3, r0
 80031a4:	2b04      	cmp	r3, #4
 80031a6:	d901      	bls.n	80031ac <_ZN3jlb10Controller15lateral_controlEv+0xa0>
 80031a8:	2301      	movs	r3, #1
 80031aa:	e000      	b.n	80031ae <_ZN3jlb10Controller15lateral_controlEv+0xa2>
 80031ac:	2300      	movs	r3, #0
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	f040 80ca 	bne.w	8003348 <_ZN3jlb10Controller15lateral_controlEv+0x23c>
            {
                return;
            }

            line_position_front = select_control_point(line_positions_front, prev_line_position_front);
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	f103 026c 	add.w	r2, r3, #108	; 0x6c
 80031ba:	f107 0308 	add.w	r3, r7, #8
 80031be:	4611      	mov	r1, r2
 80031c0:	4618      	mov	r0, r3
 80031c2:	f004 fa51 	bl	8007668 <_ZNSt6vectorIfSaIfEEC1ERKS1_>
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	edd3 7a04 	vldr	s15, [r3, #16]
 80031cc:	f107 0308 	add.w	r3, r7, #8
 80031d0:	eeb0 0a67 	vmov.f32	s0, s15
 80031d4:	4619      	mov	r1, r3
 80031d6:	6878      	ldr	r0, [r7, #4]
 80031d8:	f7ff fe38 	bl	8002e4c <_ZN3jlb10Controller20select_control_pointESt6vectorIfSaIfEEf>
 80031dc:	eef0 7a40 	vmov.f32	s15, s0
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	edc3 7a02 	vstr	s15, [r3, #8]
 80031e6:	f107 0308 	add.w	r3, r7, #8
 80031ea:	4618      	mov	r0, r3
 80031ec:	f004 f98d 	bl	800750a <_ZNSt6vectorIfSaIfEED1Ev>
            line_position_rear = select_control_point(line_positions_rear, prev_line_position_rear);
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	f103 0278 	add.w	r2, r3, #120	; 0x78
 80031f6:	f107 0314 	add.w	r3, r7, #20
 80031fa:	4611      	mov	r1, r2
 80031fc:	4618      	mov	r0, r3
 80031fe:	f004 fa33 	bl	8007668 <_ZNSt6vectorIfSaIfEEC1ERKS1_>
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	edd3 7a05 	vldr	s15, [r3, #20]
 8003208:	f107 0314 	add.w	r3, r7, #20
 800320c:	eeb0 0a67 	vmov.f32	s0, s15
 8003210:	4619      	mov	r1, r3
 8003212:	6878      	ldr	r0, [r7, #4]
 8003214:	f7ff fe1a 	bl	8002e4c <_ZN3jlb10Controller20select_control_pointESt6vectorIfSaIfEEf>
 8003218:	eef0 7a40 	vmov.f32	s15, s0
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	edc3 7a03 	vstr	s15, [r3, #12]
 8003222:	f107 0314 	add.w	r3, r7, #20
 8003226:	4618      	mov	r0, r3
 8003228:	f004 f96f 	bl	800750a <_ZNSt6vectorIfSaIfEED1Ev>
            prev_line_position_front = line_position_front;
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	689a      	ldr	r2, [r3, #8]
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	611a      	str	r2, [r3, #16]
            prev_line_position_rear = line_position_rear;
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	68da      	ldr	r2, [r3, #12]
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	615a      	str	r2, [r3, #20]

            float sensor_rate = SENSOR_WIDTH / SENSOR_COUNT;
 800323c:	4b44      	ldr	r3, [pc, #272]	; (8003350 <_ZN3jlb10Controller15lateral_controlEv+0x244>)
 800323e:	627b      	str	r3, [r7, #36]	; 0x24
            float sensor_center = SENSOR_COUNT / 2.0f;
 8003240:	f04f 4383 	mov.w	r3, #1098907648	; 0x41800000
 8003244:	623b      	str	r3, [r7, #32]
            selected_front = static_cast<unsigned long>(line_position_front / sensor_rate + sensor_center);
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	edd3 6a02 	vldr	s13, [r3, #8]
 800324c:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8003250:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003254:	edd7 7a08 	vldr	s15, [r7, #32]
 8003258:	ee77 7a27 	vadd.f32	s15, s14, s15
 800325c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003260:	ee17 2a90 	vmov	r2, s15
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	601a      	str	r2, [r3, #0]
            selected_rear = static_cast<unsigned long>(line_position_rear / sensor_rate + sensor_center);
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	edd3 6a03 	vldr	s13, [r3, #12]
 800326e:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8003272:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003276:	edd7 7a08 	vldr	s15, [r7, #32]
 800327a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800327e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003282:	ee17 2a90 	vmov	r2, s15
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	605a      	str	r2, [r3, #4]

            cross_track_error = line_position_front;
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	689a      	ldr	r2, [r3, #8]
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	621a      	str	r2, [r3, #32]
            heading_error = std::atan2(line_position_front - line_position_rear, SENSOR_BASE);
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	ed93 7a02 	vldr	s14, [r3, #8]
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	edd3 7a03 	vldr	s15, [r3, #12]
 800329e:	ee77 7a67 	vsub.f32	s15, s14, s15
 80032a2:	eef6 0a00 	vmov.f32	s1, #96	; 0x3f000000  0.5
 80032a6:	eeb0 0a67 	vmov.f32	s0, s15
 80032aa:	f7fe ff4b 	bl	8002144 <_ZSt5atan2ff>
 80032ae:	eef0 7a40 	vmov.f32	s15, s0
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24

            target_angle = stanley(cross_track_error, heading_error);
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	edd3 7a08 	vldr	s15, [r3, #32]
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 80032c4:	eef0 0a47 	vmov.f32	s1, s14
 80032c8:	eeb0 0a67 	vmov.f32	s0, s15
 80032cc:	6878      	ldr	r0, [r7, #4]
 80032ce:	f7ff fd8f 	bl	8002df0 <_ZN3jlb10Controller7stanleyEff>
 80032d2:	eef0 7a40 	vmov.f32	s15, s0
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	edc3 7a06 	vstr	s15, [r3, #24]

            if (target_angle > MAX_WHEEL_ANGLE)
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	edd3 7a06 	vldr	s15, [r3, #24]
 80032e2:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8003354 <_ZN3jlb10Controller15lateral_controlEv+0x248>
 80032e6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80032ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80032ee:	dd02      	ble.n	80032f6 <_ZN3jlb10Controller15lateral_controlEv+0x1ea>
                target_angle = MAX_WHEEL_ANGLE;
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	4a19      	ldr	r2, [pc, #100]	; (8003358 <_ZN3jlb10Controller15lateral_controlEv+0x24c>)
 80032f4:	619a      	str	r2, [r3, #24]
            if (target_angle < -MAX_WHEEL_ANGLE)
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	edd3 7a06 	vldr	s15, [r3, #24]
 80032fc:	ed9f 7a17 	vldr	s14, [pc, #92]	; 800335c <_ZN3jlb10Controller15lateral_controlEv+0x250>
 8003300:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003304:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003308:	d502      	bpl.n	8003310 <_ZN3jlb10Controller15lateral_controlEv+0x204>
                target_angle = -MAX_WHEEL_ANGLE;
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	4a14      	ldr	r2, [pc, #80]	; (8003360 <_ZN3jlb10Controller15lateral_controlEv+0x254>)
 800330e:	619a      	str	r2, [r3, #24]

            if (direction == Direction::REVERSE_LEFT || direction == Direction::REVERSE_RIGHT || direction == Direction::REVERSE_STRAIGHT)
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003316:	2b03      	cmp	r3, #3
 8003318:	d009      	beq.n	800332e <_ZN3jlb10Controller15lateral_controlEv+0x222>
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003320:	2b04      	cmp	r3, #4
 8003322:	d004      	beq.n	800332e <_ZN3jlb10Controller15lateral_controlEv+0x222>
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800332a:	2b05      	cmp	r3, #5
 800332c:	d10d      	bne.n	800334a <_ZN3jlb10Controller15lateral_controlEv+0x23e>
            {
                target_angle = -target_angle;
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	edd3 7a06 	vldr	s15, [r3, #24]
 8003334:	eef1 7a67 	vneg.f32	s15, s15
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	edc3 7a06 	vstr	s15, [r3, #24]
 800333e:	e004      	b.n	800334a <_ZN3jlb10Controller15lateral_controlEv+0x23e>
                return;
 8003340:	bf00      	nop
 8003342:	e002      	b.n	800334a <_ZN3jlb10Controller15lateral_controlEv+0x23e>
                return;
 8003344:	bf00      	nop
 8003346:	e000      	b.n	800334a <_ZN3jlb10Controller15lateral_controlEv+0x23e>
                return;
 8003348:	bf00      	nop
            }
        }
 800334a:	372c      	adds	r7, #44	; 0x2c
 800334c:	46bd      	mov	sp, r7
 800334e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003350:	3bcccccd 	.word	0x3bcccccd
 8003354:	3ec02037 	.word	0x3ec02037
 8003358:	3ec02037 	.word	0x3ec02037
 800335c:	bec02037 	.word	0xbec02037
 8003360:	bec02037 	.word	0xbec02037

08003364 <_ZN3jlb10Controller20longitudinal_controlEv>:

        void longitudinal_control()
 8003364:	b580      	push	{r7, lr}
 8003366:	b084      	sub	sp, #16
 8003368:	af00      	add	r7, sp, #0
 800336a:	6078      	str	r0, [r7, #4]
        {
            switch (mission)
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003372:	2b03      	cmp	r3, #3
 8003374:	d834      	bhi.n	80033e0 <_ZN3jlb10Controller20longitudinal_controlEv+0x7c>
 8003376:	a201      	add	r2, pc, #4	; (adr r2, 800337c <_ZN3jlb10Controller20longitudinal_controlEv+0x18>)
 8003378:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800337c:	0800338d 	.word	0x0800338d
 8003380:	080033c5 	.word	0x080033c5
 8003384:	080033cd 	.word	0x080033cd
 8003388:	080033d7 	.word	0x080033d7
            {
            case Mission::LABYRINTH:
            {
                target_speed = LABYRINTH_SPEED;
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8003392:	61da      	str	r2, [r3, #28]

                if (direction == Direction::REVERSE_LEFT || direction == Direction::REVERSE_RIGHT || direction == Direction::REVERSE_STRAIGHT)
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800339a:	2b03      	cmp	r3, #3
 800339c:	d009      	beq.n	80033b2 <_ZN3jlb10Controller20longitudinal_controlEv+0x4e>
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80033a4:	2b04      	cmp	r3, #4
 80033a6:	d004      	beq.n	80033b2 <_ZN3jlb10Controller20longitudinal_controlEv+0x4e>
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80033ae:	2b05      	cmp	r3, #5
 80033b0:	d118      	bne.n	80033e4 <_ZN3jlb10Controller20longitudinal_controlEv+0x80>
                {
                    target_speed = -target_speed;
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	edd3 7a07 	vldr	s15, [r3, #28]
 80033b8:	eef1 7a67 	vneg.f32	s15, s15
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	edc3 7a07 	vstr	s15, [r3, #28]
                }
                break;
 80033c2:	e00f      	b.n	80033e4 <_ZN3jlb10Controller20longitudinal_controlEv+0x80>
            }
            case Mission::FAST:
                target_speed = FAST_SPEED;
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	4a1a      	ldr	r2, [pc, #104]	; (8003430 <_ZN3jlb10Controller20longitudinal_controlEv+0xcc>)
 80033c8:	61da      	str	r2, [r3, #28]
                break;
 80033ca:	e00c      	b.n	80033e6 <_ZN3jlb10Controller20longitudinal_controlEv+0x82>

            case Mission::FAST_TURN:
                target_speed = FAST_SPEED_TURN;
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 80033d2:	61da      	str	r2, [r3, #28]
                break;
 80033d4:	e007      	b.n	80033e6 <_ZN3jlb10Controller20longitudinal_controlEv+0x82>

            case Mission::FAST_OVERTAKE:
                target_speed = FAST_SPEED_OVERTAKE;
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80033dc:	61da      	str	r2, [r3, #28]
                break;
 80033de:	e002      	b.n	80033e6 <_ZN3jlb10Controller20longitudinal_controlEv+0x82>

            default:
                break;
 80033e0:	bf00      	nop
 80033e2:	e000      	b.n	80033e6 <_ZN3jlb10Controller20longitudinal_controlEv+0x82>
                break;
 80033e4:	bf00      	nop
            }

#ifndef SIMULATION
            // TODO: add timestamp
            float dt = 0.005f;
 80033e6:	4b13      	ldr	r3, [pc, #76]	; (8003434 <_ZN3jlb10Controller20longitudinal_controlEv+0xd0>)
 80033e8:	60fb      	str	r3, [r7, #12]
#else
            auto control_timestamp_ = std::chrono::steady_clock::now();
            [[maybe_unused]] float dt = std::chrono::duration_cast<std::chrono::milliseconds>(control_timestamp_ - prev_control_timestamp_).count() / 1000.0f;
            prev_control_timestamp_ = control_timestamp_;
#endif
            float object_rate = object_pid.update(FOLLOW_DISTANCE, object_range, dt);
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	f103 0294 	add.w	r2, r3, #148	; 0x94
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 80033f6:	ed97 1a03 	vldr	s2, [r7, #12]
 80033fa:	eef0 0a67 	vmov.f32	s1, s15
 80033fe:	eeb5 0a00 	vmov.f32	s0, #80	; 0x3e800000  0.250
 8003402:	4610      	mov	r0, r2
 8003404:	f7ff fbaa 	bl	8002b5c <_ZN3PID6updateEfff>
 8003408:	ed87 0a02 	vstr	s0, [r7, #8]
            target_speed *= (1 - object_rate);
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	ed93 7a07 	vldr	s14, [r3, #28]
 8003412:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003416:	edd7 7a02 	vldr	s15, [r7, #8]
 800341a:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800341e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	edc3 7a07 	vstr	s15, [r3, #28]
        }
 8003428:	bf00      	nop
 800342a:	3710      	adds	r7, #16
 800342c:	46bd      	mov	sp, r7
 800342e:	bd80      	pop	{r7, pc}
 8003430:	40a00000 	.word	0x40a00000
 8003434:	3ba3d70a 	.word	0x3ba3d70a

08003438 <_ZN3jlb10Controller6updateEv>:

        ControlSignal update()
 8003438:	b580      	push	{r7, lr}
 800343a:	b086      	sub	sp, #24
 800343c:	af00      	add	r7, sp, #0
 800343e:	60f8      	str	r0, [r7, #12]
        {
            lateral_control();
 8003440:	68f8      	ldr	r0, [r7, #12]
 8003442:	f7ff fe63 	bl	800310c <_ZN3jlb10Controller15lateral_controlEv>
            longitudinal_control();
 8003446:	68f8      	ldr	r0, [r7, #12]
 8003448:	f7ff ff8c 	bl	8003364 <_ZN3jlb10Controller20longitudinal_controlEv>

            return {target_angle, target_speed};
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	699b      	ldr	r3, [r3, #24]
 8003450:	613b      	str	r3, [r7, #16]
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	69db      	ldr	r3, [r3, #28]
 8003456:	617b      	str	r3, [r7, #20]
 8003458:	693a      	ldr	r2, [r7, #16]
 800345a:	697b      	ldr	r3, [r7, #20]
 800345c:	ee07 2a10 	vmov	s14, r2
 8003460:	ee07 3a90 	vmov	s15, r3
        }
 8003464:	eeb0 0a47 	vmov.f32	s0, s14
 8003468:	eef0 0a67 	vmov.f32	s1, s15
 800346c:	3718      	adds	r7, #24
 800346e:	46bd      	mov	sp, r7
 8003470:	bd80      	pop	{r7, pc}

08003472 <_ZN3jlb10Controller16set_object_rangeEf>:

        void set_object_range(const float object_range_)
 8003472:	b480      	push	{r7}
 8003474:	b083      	sub	sp, #12
 8003476:	af00      	add	r7, sp, #0
 8003478:	6078      	str	r0, [r7, #4]
 800347a:	ed87 0a00 	vstr	s0, [r7]
        {
            object_range = object_range_;
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	683a      	ldr	r2, [r7, #0]
 8003482:	629a      	str	r2, [r3, #40]	; 0x28
        }
 8003484:	bf00      	nop
 8003486:	370c      	adds	r7, #12
 8003488:	46bd      	mov	sp, r7
 800348a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800348e:	4770      	bx	lr

08003490 <_ZN3jlb10Controller19set_detection_frontEPbSt6vectorIfSaIfEE>:

        void set_detection_front(bool *detection_front_, std::vector<float> line_positions_front_)
 8003490:	b580      	push	{r7, lr}
 8003492:	b086      	sub	sp, #24
 8003494:	af00      	add	r7, sp, #0
 8003496:	60f8      	str	r0, [r7, #12]
 8003498:	60b9      	str	r1, [r7, #8]
 800349a:	607a      	str	r2, [r7, #4]
        {
            for (unsigned long i = 0; i < SENSOR_COUNT; i++)
 800349c:	2300      	movs	r3, #0
 800349e:	617b      	str	r3, [r7, #20]
 80034a0:	e00c      	b.n	80034bc <_ZN3jlb10Controller19set_detection_frontEPbSt6vectorIfSaIfEE+0x2c>
                detection_front[i] = detection_front_[i];
 80034a2:	68ba      	ldr	r2, [r7, #8]
 80034a4:	697b      	ldr	r3, [r7, #20]
 80034a6:	4413      	add	r3, r2
 80034a8:	7819      	ldrb	r1, [r3, #0]
 80034aa:	68fa      	ldr	r2, [r7, #12]
 80034ac:	697b      	ldr	r3, [r7, #20]
 80034ae:	4413      	add	r3, r2
 80034b0:	332c      	adds	r3, #44	; 0x2c
 80034b2:	460a      	mov	r2, r1
 80034b4:	701a      	strb	r2, [r3, #0]
            for (unsigned long i = 0; i < SENSOR_COUNT; i++)
 80034b6:	697b      	ldr	r3, [r7, #20]
 80034b8:	3301      	adds	r3, #1
 80034ba:	617b      	str	r3, [r7, #20]
 80034bc:	697b      	ldr	r3, [r7, #20]
 80034be:	2b1f      	cmp	r3, #31
 80034c0:	d9ef      	bls.n	80034a2 <_ZN3jlb10Controller19set_detection_frontEPbSt6vectorIfSaIfEE+0x12>
            line_positions_front = line_positions_front_;
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	336c      	adds	r3, #108	; 0x6c
 80034c6:	6879      	ldr	r1, [r7, #4]
 80034c8:	4618      	mov	r0, r3
 80034ca:	f004 f93e 	bl	800774a <_ZNSt6vectorIfSaIfEEaSERKS1_>
        }
 80034ce:	bf00      	nop
 80034d0:	3718      	adds	r7, #24
 80034d2:	46bd      	mov	sp, r7
 80034d4:	bd80      	pop	{r7, pc}

080034d6 <_ZN3jlb10Controller18set_detection_rearEPbSt6vectorIfSaIfEE>:

        void set_detection_rear(bool *detection_rear_, std::vector<float> line_positions_rear_)
 80034d6:	b580      	push	{r7, lr}
 80034d8:	b086      	sub	sp, #24
 80034da:	af00      	add	r7, sp, #0
 80034dc:	60f8      	str	r0, [r7, #12]
 80034de:	60b9      	str	r1, [r7, #8]
 80034e0:	607a      	str	r2, [r7, #4]
        {
            for (unsigned long i = 0; i < SENSOR_COUNT; i++)
 80034e2:	2300      	movs	r3, #0
 80034e4:	617b      	str	r3, [r7, #20]
 80034e6:	e00c      	b.n	8003502 <_ZN3jlb10Controller18set_detection_rearEPbSt6vectorIfSaIfEE+0x2c>
                detection_rear[i] = detection_rear_[i];
 80034e8:	68ba      	ldr	r2, [r7, #8]
 80034ea:	697b      	ldr	r3, [r7, #20]
 80034ec:	4413      	add	r3, r2
 80034ee:	7819      	ldrb	r1, [r3, #0]
 80034f0:	68fa      	ldr	r2, [r7, #12]
 80034f2:	697b      	ldr	r3, [r7, #20]
 80034f4:	4413      	add	r3, r2
 80034f6:	334c      	adds	r3, #76	; 0x4c
 80034f8:	460a      	mov	r2, r1
 80034fa:	701a      	strb	r2, [r3, #0]
            for (unsigned long i = 0; i < SENSOR_COUNT; i++)
 80034fc:	697b      	ldr	r3, [r7, #20]
 80034fe:	3301      	adds	r3, #1
 8003500:	617b      	str	r3, [r7, #20]
 8003502:	697b      	ldr	r3, [r7, #20]
 8003504:	2b1f      	cmp	r3, #31
 8003506:	d9ef      	bls.n	80034e8 <_ZN3jlb10Controller18set_detection_rearEPbSt6vectorIfSaIfEE+0x12>
            line_positions_rear = line_positions_rear_;
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	3378      	adds	r3, #120	; 0x78
 800350c:	6879      	ldr	r1, [r7, #4]
 800350e:	4618      	mov	r0, r3
 8003510:	f004 f91b 	bl	800774a <_ZNSt6vectorIfSaIfEEaSERKS1_>
        }
 8003514:	bf00      	nop
 8003516:	3718      	adds	r7, #24
 8003518:	46bd      	mov	sp, r7
 800351a:	bd80      	pop	{r7, pc}

0800351c <_ZN3jlb10Controller20set_current_velocityEf>:

        void set_current_velocity(const float current_velocity_)
 800351c:	b480      	push	{r7}
 800351e:	b083      	sub	sp, #12
 8003520:	af00      	add	r7, sp, #0
 8003522:	6078      	str	r0, [r7, #4]
 8003524:	ed87 0a00 	vstr	s0, [r7]
        {
            current_velocity = current_velocity_;
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	683a      	ldr	r2, [r7, #0]
 800352c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
 8003530:	bf00      	nop
 8003532:	370c      	adds	r7, #12
 8003534:	46bd      	mov	sp, r7
 8003536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800353a:	4770      	bx	lr

0800353c <_ZN3jlb10Controller13set_directionENS_9DirectionE>:

        void set_direction(const Direction direction_)
 800353c:	b480      	push	{r7}
 800353e:	b083      	sub	sp, #12
 8003540:	af00      	add	r7, sp, #0
 8003542:	6078      	str	r0, [r7, #4]
 8003544:	6039      	str	r1, [r7, #0]
        {
            prev_direction = direction;
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
            direction = direction_;
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	683a      	ldr	r2, [r7, #0]
 8003556:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        }
 800355a:	bf00      	nop
 800355c:	370c      	adds	r7, #12
 800355e:	46bd      	mov	sp, r7
 8003560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003564:	4770      	bx	lr

08003566 <_ZNSt12_Vector_baseIN3jlb4EdgeESaIS1_EE12_Vector_implD1Ev>:
      struct _Vector_impl
 8003566:	b580      	push	{r7, lr}
 8003568:	b082      	sub	sp, #8
 800356a:	af00      	add	r7, sp, #0
 800356c:	6078      	str	r0, [r7, #4]
 800356e:	6878      	ldr	r0, [r7, #4]
 8003570:	f004 f9f3 	bl	800795a <_ZNSaIN3jlb4EdgeEED1Ev>
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	4618      	mov	r0, r3
 8003578:	3708      	adds	r7, #8
 800357a:	46bd      	mov	sp, r7
 800357c:	bd80      	pop	{r7, pc}

0800357e <_ZNSt12_Vector_baseIN3jlb4EdgeESaIS1_EEC1Ev>:
      _Vector_base() = default;
 800357e:	b580      	push	{r7, lr}
 8003580:	b082      	sub	sp, #8
 8003582:	af00      	add	r7, sp, #0
 8003584:	6078      	str	r0, [r7, #4]
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	4618      	mov	r0, r3
 800358a:	f004 f9d6 	bl	800793a <_ZNSt12_Vector_baseIN3jlb4EdgeESaIS1_EE12_Vector_implC1Ev>
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	4618      	mov	r0, r3
 8003592:	3708      	adds	r7, #8
 8003594:	46bd      	mov	sp, r7
 8003596:	bd80      	pop	{r7, pc}

08003598 <_ZNSt6vectorIN3jlb4EdgeESaIS1_EEC1Ev>:
      vector() = default;
 8003598:	b580      	push	{r7, lr}
 800359a:	b082      	sub	sp, #8
 800359c:	af00      	add	r7, sp, #0
 800359e:	6078      	str	r0, [r7, #4]
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	4618      	mov	r0, r3
 80035a4:	f7ff ffeb 	bl	800357e <_ZNSt12_Vector_baseIN3jlb4EdgeESaIS1_EEC1Ev>
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	4618      	mov	r0, r3
 80035ac:	3708      	adds	r7, #8
 80035ae:	46bd      	mov	sp, r7
 80035b0:	bd80      	pop	{r7, pc}

080035b2 <_ZN3jlb4NodeC1Ecff>:
        char name;
        float x;
        float y;
        std::vector<Edge> edges;

        Node(char name_, float x_, float y_) : name{name_}, x(x_), y(y_) {}
 80035b2:	b580      	push	{r7, lr}
 80035b4:	b084      	sub	sp, #16
 80035b6:	af00      	add	r7, sp, #0
 80035b8:	60f8      	str	r0, [r7, #12]
 80035ba:	460b      	mov	r3, r1
 80035bc:	ed87 0a01 	vstr	s0, [r7, #4]
 80035c0:	edc7 0a00 	vstr	s1, [r7]
 80035c4:	72fb      	strb	r3, [r7, #11]
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	7afa      	ldrb	r2, [r7, #11]
 80035ca:	701a      	strb	r2, [r3, #0]
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	687a      	ldr	r2, [r7, #4]
 80035d0:	605a      	str	r2, [r3, #4]
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	683a      	ldr	r2, [r7, #0]
 80035d6:	609a      	str	r2, [r3, #8]
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	330c      	adds	r3, #12
 80035dc:	4618      	mov	r0, r3
 80035de:	f7ff ffdb 	bl	8003598 <_ZNSt6vectorIN3jlb4EdgeESaIS1_EEC1Ev>
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	4618      	mov	r0, r3
 80035e6:	3710      	adds	r7, #16
 80035e8:	46bd      	mov	sp, r7
 80035ea:	bd80      	pop	{r7, pc}

080035ec <_ZN3jlb4NodeD1Ev>:
        ~Node() {}
 80035ec:	b580      	push	{r7, lr}
 80035ee:	b082      	sub	sp, #8
 80035f0:	af00      	add	r7, sp, #0
 80035f2:	6078      	str	r0, [r7, #4]
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	330c      	adds	r3, #12
 80035f8:	4618      	mov	r0, r3
 80035fa:	f004 f9d7 	bl	80079ac <_ZNSt6vectorIN3jlb4EdgeESaIS1_EED1Ev>
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	4618      	mov	r0, r3
 8003602:	3708      	adds	r7, #8
 8003604:	46bd      	mov	sp, r7
 8003606:	bd80      	pop	{r7, pc}

08003608 <_ZN3jlb4EdgeD1Ev>:
    struct Edge
 8003608:	b580      	push	{r7, lr}
 800360a:	b082      	sub	sp, #8
 800360c:	af00      	add	r7, sp, #0
 800360e:	6078      	str	r0, [r7, #4]
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	3308      	adds	r3, #8
 8003614:	4618      	mov	r0, r3
 8003616:	f004 fa21 	bl	8007a5c <_ZNSt6vectorIcSaIcEED1Ev>
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	4618      	mov	r0, r3
 800361e:	3708      	adds	r7, #8
 8003620:	46bd      	mov	sp, r7
 8003622:	bd80      	pop	{r7, pc}

08003624 <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>:

        void add_edge(char name_, Direction direction_, std::vector<char> prev_nodes_, float weight_ = 0.0f)
 8003624:	b590      	push	{r4, r7, lr}
 8003626:	b08d      	sub	sp, #52	; 0x34
 8003628:	af00      	add	r7, sp, #0
 800362a:	6178      	str	r0, [r7, #20]
 800362c:	60fa      	str	r2, [r7, #12]
 800362e:	60bb      	str	r3, [r7, #8]
 8003630:	ed87 0a01 	vstr	s0, [r7, #4]
 8003634:	460b      	mov	r3, r1
 8003636:	74fb      	strb	r3, [r7, #19]
        {
            edges.push_back(Edge{name_, direction_, prev_nodes_, weight_});
 8003638:	697b      	ldr	r3, [r7, #20]
 800363a:	f103 040c 	add.w	r4, r3, #12
 800363e:	7cfb      	ldrb	r3, [r7, #19]
 8003640:	763b      	strb	r3, [r7, #24]
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	61fb      	str	r3, [r7, #28]
 8003646:	f107 0318 	add.w	r3, r7, #24
 800364a:	3308      	adds	r3, #8
 800364c:	68b9      	ldr	r1, [r7, #8]
 800364e:	4618      	mov	r0, r3
 8003650:	f004 f9c7 	bl	80079e2 <_ZNSt6vectorIcSaIcEEC1ERKS1_>
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003658:	f107 0318 	add.w	r3, r7, #24
 800365c:	4619      	mov	r1, r3
 800365e:	4620      	mov	r0, r4
 8003660:	f004 fa17 	bl	8007a92 <_ZNSt6vectorIN3jlb4EdgeESaIS1_EE9push_backEOS1_>
 8003664:	f107 0318 	add.w	r3, r7, #24
 8003668:	4618      	mov	r0, r3
 800366a:	f7ff ffcd 	bl	8003608 <_ZN3jlb4EdgeD1Ev>
        }
 800366e:	bf00      	nop
 8003670:	3734      	adds	r7, #52	; 0x34
 8003672:	46bd      	mov	sp, r7
 8003674:	bd90      	pop	{r4, r7, pc}

08003676 <_ZNSt12_Vector_baseIN3jlb4NodeESaIS1_EEC1Ev>:
      _Vector_base() = default;
 8003676:	b580      	push	{r7, lr}
 8003678:	b082      	sub	sp, #8
 800367a:	af00      	add	r7, sp, #0
 800367c:	6078      	str	r0, [r7, #4]
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	4618      	mov	r0, r3
 8003682:	f004 fa17 	bl	8007ab4 <_ZNSt12_Vector_baseIN3jlb4NodeESaIS1_EE12_Vector_implC1Ev>
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	4618      	mov	r0, r3
 800368a:	3708      	adds	r7, #8
 800368c:	46bd      	mov	sp, r7
 800368e:	bd80      	pop	{r7, pc}

08003690 <_ZNSt6vectorIN3jlb4NodeESaIS1_EEC1Ev>:
      vector() = default;
 8003690:	b580      	push	{r7, lr}
 8003692:	b082      	sub	sp, #8
 8003694:	af00      	add	r7, sp, #0
 8003696:	6078      	str	r0, [r7, #4]
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	4618      	mov	r0, r3
 800369c:	f7ff ffeb 	bl	8003676 <_ZNSt12_Vector_baseIN3jlb4NodeESaIS1_EEC1Ev>
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	4618      	mov	r0, r3
 80036a4:	3708      	adds	r7, #8
 80036a6:	46bd      	mov	sp, r7
 80036a8:	bd80      	pop	{r7, pc}
 80036aa:	0000      	movs	r0, r0
 80036ac:	0000      	movs	r0, r0
	...

080036b0 <_ZN3jlb5GraphC1Ev>:
    class Graph
    {
    public:
        std::vector<Node> nodes;

        Graph()
 80036b0:	b590      	push	{r4, r7, lr}
 80036b2:	f6ad 4d6c 	subw	sp, sp, #3180	; 0xc6c
 80036b6:	af00      	add	r7, sp, #0
 80036b8:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80036bc:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 80036c0:	6018      	str	r0, [r3, #0]
        {
 80036c2:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80036c6:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	4618      	mov	r0, r3
 80036ce:	f7ff ffdf 	bl	8003690 <_ZNSt6vectorIN3jlb4NodeESaIS1_EEC1Ev>
            nodes.push_back(Node{static_cast<char>('A'), px_to_m(704), px_to_m(448)});
 80036d2:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80036d6:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 80036da:	681c      	ldr	r4, [r3, #0]
 80036dc:	f107 0308 	add.w	r3, r7, #8
 80036e0:	eddf 0af3 	vldr	s1, [pc, #972]	; 8003ab0 <_ZN3jlb5GraphC1Ev+0x400>
 80036e4:	ed9f 0af3 	vldr	s0, [pc, #972]	; 8003ab4 <_ZN3jlb5GraphC1Ev+0x404>
 80036e8:	2141      	movs	r1, #65	; 0x41
 80036ea:	4618      	mov	r0, r3
 80036ec:	f7ff ff61 	bl	80035b2 <_ZN3jlb4NodeC1Ecff>
 80036f0:	f107 0308 	add.w	r3, r7, #8
 80036f4:	4619      	mov	r1, r3
 80036f6:	4620      	mov	r0, r4
 80036f8:	f004 f9ec 	bl	8007ad4 <_ZNSt6vectorIN3jlb4NodeESaIS1_EE9push_backEOS1_>
 80036fc:	f107 0308 	add.w	r3, r7, #8
 8003700:	4618      	mov	r0, r3
 8003702:	f7ff ff73 	bl	80035ec <_ZN3jlb4NodeD1Ev>
            nodes.push_back(Node{static_cast<char>('B'), px_to_m(704), px_to_m(576)});
 8003706:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800370a:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 800370e:	681c      	ldr	r4, [r3, #0]
 8003710:	f107 0320 	add.w	r3, r7, #32
 8003714:	eddf 0aeb 	vldr	s1, [pc, #940]	; 8003ac4 <_ZN3jlb5GraphC1Ev+0x414>
 8003718:	ed9f 0ae6 	vldr	s0, [pc, #920]	; 8003ab4 <_ZN3jlb5GraphC1Ev+0x404>
 800371c:	2142      	movs	r1, #66	; 0x42
 800371e:	4618      	mov	r0, r3
 8003720:	f7ff ff47 	bl	80035b2 <_ZN3jlb4NodeC1Ecff>
 8003724:	f107 0320 	add.w	r3, r7, #32
 8003728:	4619      	mov	r1, r3
 800372a:	4620      	mov	r0, r4
 800372c:	f004 f9d2 	bl	8007ad4 <_ZNSt6vectorIN3jlb4NodeESaIS1_EE9push_backEOS1_>
 8003730:	f107 0320 	add.w	r3, r7, #32
 8003734:	4618      	mov	r0, r3
 8003736:	f7ff ff59 	bl	80035ec <_ZN3jlb4NodeD1Ev>
            nodes.push_back(Node{static_cast<char>('C'), px_to_m(640), px_to_m(384)});
 800373a:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800373e:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8003742:	681c      	ldr	r4, [r3, #0]
 8003744:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8003748:	eddf 0adb 	vldr	s1, [pc, #876]	; 8003ab8 <_ZN3jlb5GraphC1Ev+0x408>
 800374c:	eeb1 0a08 	vmov.f32	s0, #24	; 0x40c00000  6.0
 8003750:	2143      	movs	r1, #67	; 0x43
 8003752:	4618      	mov	r0, r3
 8003754:	f7ff ff2d 	bl	80035b2 <_ZN3jlb4NodeC1Ecff>
 8003758:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800375c:	4619      	mov	r1, r3
 800375e:	4620      	mov	r0, r4
 8003760:	f004 f9b8 	bl	8007ad4 <_ZNSt6vectorIN3jlb4NodeESaIS1_EE9push_backEOS1_>
 8003764:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8003768:	4618      	mov	r0, r3
 800376a:	f7ff ff3f 	bl	80035ec <_ZN3jlb4NodeD1Ev>
            nodes.push_back(Node{static_cast<char>('D'), px_to_m(640), px_to_m(512)});
 800376e:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8003772:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8003776:	681c      	ldr	r4, [r3, #0]
 8003778:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800377c:	eddf 0acf 	vldr	s1, [pc, #828]	; 8003abc <_ZN3jlb5GraphC1Ev+0x40c>
 8003780:	eeb1 0a08 	vmov.f32	s0, #24	; 0x40c00000  6.0
 8003784:	2144      	movs	r1, #68	; 0x44
 8003786:	4618      	mov	r0, r3
 8003788:	f7ff ff13 	bl	80035b2 <_ZN3jlb4NodeC1Ecff>
 800378c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003790:	4619      	mov	r1, r3
 8003792:	4620      	mov	r0, r4
 8003794:	f004 f99e 	bl	8007ad4 <_ZNSt6vectorIN3jlb4NodeESaIS1_EE9push_backEOS1_>
 8003798:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800379c:	4618      	mov	r0, r3
 800379e:	f7ff ff25 	bl	80035ec <_ZN3jlb4NodeD1Ev>
            nodes.push_back(Node{static_cast<char>('E'), px_to_m(640), px_to_m(640)});
 80037a2:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80037a6:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 80037aa:	681c      	ldr	r4, [r3, #0]
 80037ac:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80037b0:	eef1 0a08 	vmov.f32	s1, #24	; 0x40c00000  6.0
 80037b4:	eeb1 0a08 	vmov.f32	s0, #24	; 0x40c00000  6.0
 80037b8:	2145      	movs	r1, #69	; 0x45
 80037ba:	4618      	mov	r0, r3
 80037bc:	f7ff fef9 	bl	80035b2 <_ZN3jlb4NodeC1Ecff>
 80037c0:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80037c4:	4619      	mov	r1, r3
 80037c6:	4620      	mov	r0, r4
 80037c8:	f004 f984 	bl	8007ad4 <_ZNSt6vectorIN3jlb4NodeESaIS1_EE9push_backEOS1_>
 80037cc:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80037d0:	4618      	mov	r0, r3
 80037d2:	f7ff ff0b 	bl	80035ec <_ZN3jlb4NodeD1Ev>
            nodes.push_back(Node{static_cast<char>('F'), px_to_m(576), px_to_m(448)});
 80037d6:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80037da:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 80037de:	681c      	ldr	r4, [r3, #0]
 80037e0:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80037e4:	eddf 0ab2 	vldr	s1, [pc, #712]	; 8003ab0 <_ZN3jlb5GraphC1Ev+0x400>
 80037e8:	ed9f 0ab6 	vldr	s0, [pc, #728]	; 8003ac4 <_ZN3jlb5GraphC1Ev+0x414>
 80037ec:	2146      	movs	r1, #70	; 0x46
 80037ee:	4618      	mov	r0, r3
 80037f0:	f7ff fedf 	bl	80035b2 <_ZN3jlb4NodeC1Ecff>
 80037f4:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80037f8:	4619      	mov	r1, r3
 80037fa:	4620      	mov	r0, r4
 80037fc:	f004 f96a 	bl	8007ad4 <_ZNSt6vectorIN3jlb4NodeESaIS1_EE9push_backEOS1_>
 8003800:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8003804:	4618      	mov	r0, r3
 8003806:	f7ff fef1 	bl	80035ec <_ZN3jlb4NodeD1Ev>
            nodes.push_back(Node{static_cast<char>('G'), px_to_m(576), px_to_m(576)});
 800380a:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800380e:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8003812:	681c      	ldr	r4, [r3, #0]
 8003814:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8003818:	eddf 0aaa 	vldr	s1, [pc, #680]	; 8003ac4 <_ZN3jlb5GraphC1Ev+0x414>
 800381c:	ed9f 0aa9 	vldr	s0, [pc, #676]	; 8003ac4 <_ZN3jlb5GraphC1Ev+0x414>
 8003820:	2147      	movs	r1, #71	; 0x47
 8003822:	4618      	mov	r0, r3
 8003824:	f7ff fec5 	bl	80035b2 <_ZN3jlb4NodeC1Ecff>
 8003828:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800382c:	4619      	mov	r1, r3
 800382e:	4620      	mov	r0, r4
 8003830:	f004 f950 	bl	8007ad4 <_ZNSt6vectorIN3jlb4NodeESaIS1_EE9push_backEOS1_>
 8003834:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8003838:	4618      	mov	r0, r3
 800383a:	f7ff fed7 	bl	80035ec <_ZN3jlb4NodeD1Ev>
            nodes.push_back(Node{static_cast<char>('H'), px_to_m(512), px_to_m(384)});
 800383e:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8003842:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8003846:	681c      	ldr	r4, [r3, #0]
 8003848:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 800384c:	eddf 0a9a 	vldr	s1, [pc, #616]	; 8003ab8 <_ZN3jlb5GraphC1Ev+0x408>
 8003850:	ed9f 0a9a 	vldr	s0, [pc, #616]	; 8003abc <_ZN3jlb5GraphC1Ev+0x40c>
 8003854:	2148      	movs	r1, #72	; 0x48
 8003856:	4618      	mov	r0, r3
 8003858:	f7ff feab 	bl	80035b2 <_ZN3jlb4NodeC1Ecff>
 800385c:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8003860:	4619      	mov	r1, r3
 8003862:	4620      	mov	r0, r4
 8003864:	f004 f936 	bl	8007ad4 <_ZNSt6vectorIN3jlb4NodeESaIS1_EE9push_backEOS1_>
 8003868:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 800386c:	4618      	mov	r0, r3
 800386e:	f7ff febd 	bl	80035ec <_ZN3jlb4NodeD1Ev>
            nodes.push_back(Node{static_cast<char>('I'), px_to_m(512), px_to_m(512)});
 8003872:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8003876:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 800387a:	681c      	ldr	r4, [r3, #0]
 800387c:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8003880:	eddf 0a8e 	vldr	s1, [pc, #568]	; 8003abc <_ZN3jlb5GraphC1Ev+0x40c>
 8003884:	ed9f 0a8d 	vldr	s0, [pc, #564]	; 8003abc <_ZN3jlb5GraphC1Ev+0x40c>
 8003888:	2149      	movs	r1, #73	; 0x49
 800388a:	4618      	mov	r0, r3
 800388c:	f7ff fe91 	bl	80035b2 <_ZN3jlb4NodeC1Ecff>
 8003890:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8003894:	4619      	mov	r1, r3
 8003896:	4620      	mov	r0, r4
 8003898:	f004 f91c 	bl	8007ad4 <_ZNSt6vectorIN3jlb4NodeESaIS1_EE9push_backEOS1_>
 800389c:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80038a0:	4618      	mov	r0, r3
 80038a2:	f7ff fea3 	bl	80035ec <_ZN3jlb4NodeD1Ev>
            nodes.push_back(Node{static_cast<char>('J'), px_to_m(512), px_to_m(640)});
 80038a6:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80038aa:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 80038ae:	681c      	ldr	r4, [r3, #0]
 80038b0:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80038b4:	eef1 0a08 	vmov.f32	s1, #24	; 0x40c00000  6.0
 80038b8:	ed9f 0a80 	vldr	s0, [pc, #512]	; 8003abc <_ZN3jlb5GraphC1Ev+0x40c>
 80038bc:	214a      	movs	r1, #74	; 0x4a
 80038be:	4618      	mov	r0, r3
 80038c0:	f7ff fe77 	bl	80035b2 <_ZN3jlb4NodeC1Ecff>
 80038c4:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80038c8:	4619      	mov	r1, r3
 80038ca:	4620      	mov	r0, r4
 80038cc:	f004 f902 	bl	8007ad4 <_ZNSt6vectorIN3jlb4NodeESaIS1_EE9push_backEOS1_>
 80038d0:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80038d4:	4618      	mov	r0, r3
 80038d6:	f7ff fe89 	bl	80035ec <_ZN3jlb4NodeD1Ev>
            nodes.push_back(Node{static_cast<char>('K'), px_to_m(448), px_to_m(448)});
 80038da:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80038de:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 80038e2:	681c      	ldr	r4, [r3, #0]
 80038e4:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 80038e8:	eddf 0a71 	vldr	s1, [pc, #452]	; 8003ab0 <_ZN3jlb5GraphC1Ev+0x400>
 80038ec:	ed9f 0a70 	vldr	s0, [pc, #448]	; 8003ab0 <_ZN3jlb5GraphC1Ev+0x400>
 80038f0:	214b      	movs	r1, #75	; 0x4b
 80038f2:	4618      	mov	r0, r3
 80038f4:	f7ff fe5d 	bl	80035b2 <_ZN3jlb4NodeC1Ecff>
 80038f8:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 80038fc:	4619      	mov	r1, r3
 80038fe:	4620      	mov	r0, r4
 8003900:	f004 f8e8 	bl	8007ad4 <_ZNSt6vectorIN3jlb4NodeESaIS1_EE9push_backEOS1_>
 8003904:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8003908:	4618      	mov	r0, r3
 800390a:	f7ff fe6f 	bl	80035ec <_ZN3jlb4NodeD1Ev>
            nodes.push_back(Node{static_cast<char>('L'), px_to_m(448), px_to_m(576)});
 800390e:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8003912:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8003916:	681c      	ldr	r4, [r3, #0]
 8003918:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800391c:	eddf 0a69 	vldr	s1, [pc, #420]	; 8003ac4 <_ZN3jlb5GraphC1Ev+0x414>
 8003920:	ed9f 0a63 	vldr	s0, [pc, #396]	; 8003ab0 <_ZN3jlb5GraphC1Ev+0x400>
 8003924:	214c      	movs	r1, #76	; 0x4c
 8003926:	4618      	mov	r0, r3
 8003928:	f7ff fe43 	bl	80035b2 <_ZN3jlb4NodeC1Ecff>
 800392c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8003930:	4619      	mov	r1, r3
 8003932:	4620      	mov	r0, r4
 8003934:	f004 f8ce 	bl	8007ad4 <_ZNSt6vectorIN3jlb4NodeESaIS1_EE9push_backEOS1_>
 8003938:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800393c:	4618      	mov	r0, r3
 800393e:	f7ff fe55 	bl	80035ec <_ZN3jlb4NodeD1Ev>
            nodes.push_back(Node{static_cast<char>('M'), px_to_m(384), px_to_m(384)});
 8003942:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8003946:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 800394a:	681c      	ldr	r4, [r3, #0]
 800394c:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8003950:	eddf 0a59 	vldr	s1, [pc, #356]	; 8003ab8 <_ZN3jlb5GraphC1Ev+0x408>
 8003954:	ed9f 0a58 	vldr	s0, [pc, #352]	; 8003ab8 <_ZN3jlb5GraphC1Ev+0x408>
 8003958:	214d      	movs	r1, #77	; 0x4d
 800395a:	4618      	mov	r0, r3
 800395c:	f7ff fe29 	bl	80035b2 <_ZN3jlb4NodeC1Ecff>
 8003960:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8003964:	4619      	mov	r1, r3
 8003966:	4620      	mov	r0, r4
 8003968:	f004 f8b4 	bl	8007ad4 <_ZNSt6vectorIN3jlb4NodeESaIS1_EE9push_backEOS1_>
 800396c:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8003970:	4618      	mov	r0, r3
 8003972:	f7ff fe3b 	bl	80035ec <_ZN3jlb4NodeD1Ev>
            nodes.push_back(Node{static_cast<char>('N'), px_to_m(384), px_to_m(512)});
 8003976:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800397a:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 800397e:	681c      	ldr	r4, [r3, #0]
 8003980:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8003984:	eddf 0a4d 	vldr	s1, [pc, #308]	; 8003abc <_ZN3jlb5GraphC1Ev+0x40c>
 8003988:	ed9f 0a4b 	vldr	s0, [pc, #300]	; 8003ab8 <_ZN3jlb5GraphC1Ev+0x408>
 800398c:	214e      	movs	r1, #78	; 0x4e
 800398e:	4618      	mov	r0, r3
 8003990:	f7ff fe0f 	bl	80035b2 <_ZN3jlb4NodeC1Ecff>
 8003994:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8003998:	4619      	mov	r1, r3
 800399a:	4620      	mov	r0, r4
 800399c:	f004 f89a 	bl	8007ad4 <_ZNSt6vectorIN3jlb4NodeESaIS1_EE9push_backEOS1_>
 80039a0:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80039a4:	4618      	mov	r0, r3
 80039a6:	f7ff fe21 	bl	80035ec <_ZN3jlb4NodeD1Ev>
            nodes.push_back(Node{static_cast<char>('O'), px_to_m(384), px_to_m(640)});
 80039aa:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80039ae:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 80039b2:	681c      	ldr	r4, [r3, #0]
 80039b4:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 80039b8:	eef1 0a08 	vmov.f32	s1, #24	; 0x40c00000  6.0
 80039bc:	ed9f 0a3e 	vldr	s0, [pc, #248]	; 8003ab8 <_ZN3jlb5GraphC1Ev+0x408>
 80039c0:	214f      	movs	r1, #79	; 0x4f
 80039c2:	4618      	mov	r0, r3
 80039c4:	f7ff fdf5 	bl	80035b2 <_ZN3jlb4NodeC1Ecff>
 80039c8:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 80039cc:	4619      	mov	r1, r3
 80039ce:	4620      	mov	r0, r4
 80039d0:	f004 f880 	bl	8007ad4 <_ZNSt6vectorIN3jlb4NodeESaIS1_EE9push_backEOS1_>
 80039d4:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 80039d8:	4618      	mov	r0, r3
 80039da:	f7ff fe07 	bl	80035ec <_ZN3jlb4NodeD1Ev>
            nodes.push_back(Node{static_cast<char>('P'), px_to_m(320), px_to_m(320)});
 80039de:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80039e2:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 80039e6:	681c      	ldr	r4, [r3, #0]
 80039e8:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 80039ec:	eef0 0a08 	vmov.f32	s1, #8	; 0x40400000  3.0
 80039f0:	eeb0 0a08 	vmov.f32	s0, #8	; 0x40400000  3.0
 80039f4:	2150      	movs	r1, #80	; 0x50
 80039f6:	4618      	mov	r0, r3
 80039f8:	f7ff fddb 	bl	80035b2 <_ZN3jlb4NodeC1Ecff>
 80039fc:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 8003a00:	4619      	mov	r1, r3
 8003a02:	4620      	mov	r0, r4
 8003a04:	f004 f866 	bl	8007ad4 <_ZNSt6vectorIN3jlb4NodeESaIS1_EE9push_backEOS1_>
 8003a08:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 8003a0c:	4618      	mov	r0, r3
 8003a0e:	f7ff fded 	bl	80035ec <_ZN3jlb4NodeD1Ev>
            nodes.push_back(Node{static_cast<char>('Q'), px_to_m(320), px_to_m(384)});
 8003a12:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8003a16:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8003a1a:	681c      	ldr	r4, [r3, #0]
 8003a1c:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8003a20:	eddf 0a25 	vldr	s1, [pc, #148]	; 8003ab8 <_ZN3jlb5GraphC1Ev+0x408>
 8003a24:	eeb0 0a08 	vmov.f32	s0, #8	; 0x40400000  3.0
 8003a28:	2151      	movs	r1, #81	; 0x51
 8003a2a:	4618      	mov	r0, r3
 8003a2c:	f7ff fdc1 	bl	80035b2 <_ZN3jlb4NodeC1Ecff>
 8003a30:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8003a34:	4619      	mov	r1, r3
 8003a36:	4620      	mov	r0, r4
 8003a38:	f004 f84c 	bl	8007ad4 <_ZNSt6vectorIN3jlb4NodeESaIS1_EE9push_backEOS1_>
 8003a3c:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8003a40:	4618      	mov	r0, r3
 8003a42:	f7ff fdd3 	bl	80035ec <_ZN3jlb4NodeD1Ev>
            nodes.push_back(Node{static_cast<char>('R'), px_to_m(320), px_to_m(448)});
 8003a46:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8003a4a:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8003a4e:	681c      	ldr	r4, [r3, #0]
 8003a50:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8003a54:	eddf 0a16 	vldr	s1, [pc, #88]	; 8003ab0 <_ZN3jlb5GraphC1Ev+0x400>
 8003a58:	eeb0 0a08 	vmov.f32	s0, #8	; 0x40400000  3.0
 8003a5c:	2152      	movs	r1, #82	; 0x52
 8003a5e:	4618      	mov	r0, r3
 8003a60:	f7ff fda7 	bl	80035b2 <_ZN3jlb4NodeC1Ecff>
 8003a64:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8003a68:	4619      	mov	r1, r3
 8003a6a:	4620      	mov	r0, r4
 8003a6c:	f004 f832 	bl	8007ad4 <_ZNSt6vectorIN3jlb4NodeESaIS1_EE9push_backEOS1_>
 8003a70:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8003a74:	4618      	mov	r0, r3
 8003a76:	f7ff fdb9 	bl	80035ec <_ZN3jlb4NodeD1Ev>
            nodes.push_back(Node{static_cast<char>('S'), px_to_m(320), px_to_m(512)});
 8003a7a:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8003a7e:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8003a82:	681c      	ldr	r4, [r3, #0]
 8003a84:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 8003a88:	eddf 0a0c 	vldr	s1, [pc, #48]	; 8003abc <_ZN3jlb5GraphC1Ev+0x40c>
 8003a8c:	eeb0 0a08 	vmov.f32	s0, #8	; 0x40400000  3.0
 8003a90:	2153      	movs	r1, #83	; 0x53
 8003a92:	4618      	mov	r0, r3
 8003a94:	f7ff fd8d 	bl	80035b2 <_ZN3jlb4NodeC1Ecff>
 8003a98:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 8003a9c:	4619      	mov	r1, r3
 8003a9e:	4620      	mov	r0, r4
 8003aa0:	f004 f818 	bl	8007ad4 <_ZNSt6vectorIN3jlb4NodeESaIS1_EE9push_backEOS1_>
 8003aa4:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 8003aa8:	4618      	mov	r0, r3
 8003aaa:	f7ff fd9f 	bl	80035ec <_ZN3jlb4NodeD1Ev>
 8003aae:	e011      	b.n	8003ad4 <_ZN3jlb5GraphC1Ev+0x424>
 8003ab0:	40866667 	.word	0x40866667
 8003ab4:	40d33334 	.word	0x40d33334
 8003ab8:	40666667 	.word	0x40666667
 8003abc:	4099999a 	.word	0x4099999a
 8003ac0:	40d33334 	.word	0x40d33334
 8003ac4:	40accccd 	.word	0x40accccd
 8003ac8:	4019999a 	.word	0x4019999a
 8003acc:	40866667 	.word	0x40866667
 8003ad0:	3f666667 	.word	0x3f666667
            nodes.push_back(Node{static_cast<char>('T'), px_to_m(320), px_to_m(576)});
 8003ad4:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8003ad8:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8003adc:	681c      	ldr	r4, [r3, #0]
 8003ade:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 8003ae2:	ed5f 0a08 	vldr	s1, [pc, #-32]	; 8003ac4 <_ZN3jlb5GraphC1Ev+0x414>
 8003ae6:	eeb0 0a08 	vmov.f32	s0, #8	; 0x40400000  3.0
 8003aea:	2154      	movs	r1, #84	; 0x54
 8003aec:	4618      	mov	r0, r3
 8003aee:	f7ff fd60 	bl	80035b2 <_ZN3jlb4NodeC1Ecff>
 8003af2:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 8003af6:	4619      	mov	r1, r3
 8003af8:	4620      	mov	r0, r4
 8003afa:	f003 ffeb 	bl	8007ad4 <_ZNSt6vectorIN3jlb4NodeESaIS1_EE9push_backEOS1_>
 8003afe:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 8003b02:	4618      	mov	r0, r3
 8003b04:	f7ff fd72 	bl	80035ec <_ZN3jlb4NodeD1Ev>
            nodes.push_back(Node{static_cast<char>('U'), px_to_m(320), px_to_m(704)});
 8003b08:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8003b0c:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8003b10:	681c      	ldr	r4, [r3, #0]
 8003b12:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 8003b16:	ed5f 0a16 	vldr	s1, [pc, #-88]	; 8003ac0 <_ZN3jlb5GraphC1Ev+0x410>
 8003b1a:	eeb0 0a08 	vmov.f32	s0, #8	; 0x40400000  3.0
 8003b1e:	2155      	movs	r1, #85	; 0x55
 8003b20:	4618      	mov	r0, r3
 8003b22:	f7ff fd46 	bl	80035b2 <_ZN3jlb4NodeC1Ecff>
 8003b26:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 8003b2a:	4619      	mov	r1, r3
 8003b2c:	4620      	mov	r0, r4
 8003b2e:	f003 ffd1 	bl	8007ad4 <_ZNSt6vectorIN3jlb4NodeESaIS1_EE9push_backEOS1_>
 8003b32:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 8003b36:	4618      	mov	r0, r3
 8003b38:	f7ff fd58 	bl	80035ec <_ZN3jlb4NodeD1Ev>
            nodes.push_back(Node{static_cast<char>('V'), px_to_m(256), px_to_m(448)});
 8003b3c:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8003b40:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8003b44:	681c      	ldr	r4, [r3, #0]
 8003b46:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b4a:	ed5f 0a20 	vldr	s1, [pc, #-128]	; 8003acc <_ZN3jlb5GraphC1Ev+0x41c>
 8003b4e:	ed1f 0a22 	vldr	s0, [pc, #-136]	; 8003ac8 <_ZN3jlb5GraphC1Ev+0x418>
 8003b52:	2156      	movs	r1, #86	; 0x56
 8003b54:	4618      	mov	r0, r3
 8003b56:	f7ff fd2c 	bl	80035b2 <_ZN3jlb4NodeC1Ecff>
 8003b5a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b5e:	4619      	mov	r1, r3
 8003b60:	4620      	mov	r0, r4
 8003b62:	f003 ffb7 	bl	8007ad4 <_ZNSt6vectorIN3jlb4NodeESaIS1_EE9push_backEOS1_>
 8003b66:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b6a:	4618      	mov	r0, r3
 8003b6c:	f7ff fd3e 	bl	80035ec <_ZN3jlb4NodeD1Ev>
            nodes.push_back(Node{static_cast<char>('W'), px_to_m(256), px_to_m(576)});
 8003b70:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8003b74:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8003b78:	681c      	ldr	r4, [r3, #0]
 8003b7a:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8003b7e:	ed5f 0a2f 	vldr	s1, [pc, #-188]	; 8003ac4 <_ZN3jlb5GraphC1Ev+0x414>
 8003b82:	ed1f 0a2f 	vldr	s0, [pc, #-188]	; 8003ac8 <_ZN3jlb5GraphC1Ev+0x418>
 8003b86:	2157      	movs	r1, #87	; 0x57
 8003b88:	4618      	mov	r0, r3
 8003b8a:	f7ff fd12 	bl	80035b2 <_ZN3jlb4NodeC1Ecff>
 8003b8e:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8003b92:	4619      	mov	r1, r3
 8003b94:	4620      	mov	r0, r4
 8003b96:	f003 ff9d 	bl	8007ad4 <_ZNSt6vectorIN3jlb4NodeESaIS1_EE9push_backEOS1_>
 8003b9a:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8003b9e:	4618      	mov	r0, r3
 8003ba0:	f7ff fd24 	bl	80035ec <_ZN3jlb4NodeD1Ev>
            nodes.push_back(Node{static_cast<char>('X'), px_to_m(96), px_to_m(448)});
 8003ba4:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8003ba8:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8003bac:	681c      	ldr	r4, [r3, #0]
 8003bae:	f507 730c 	add.w	r3, r7, #560	; 0x230
 8003bb2:	ed5f 0a3a 	vldr	s1, [pc, #-232]	; 8003acc <_ZN3jlb5GraphC1Ev+0x41c>
 8003bb6:	ed1f 0a3a 	vldr	s0, [pc, #-232]	; 8003ad0 <_ZN3jlb5GraphC1Ev+0x420>
 8003bba:	2158      	movs	r1, #88	; 0x58
 8003bbc:	4618      	mov	r0, r3
 8003bbe:	f7ff fcf8 	bl	80035b2 <_ZN3jlb4NodeC1Ecff>
 8003bc2:	f507 730c 	add.w	r3, r7, #560	; 0x230
 8003bc6:	4619      	mov	r1, r3
 8003bc8:	4620      	mov	r0, r4
 8003bca:	f003 ff83 	bl	8007ad4 <_ZNSt6vectorIN3jlb4NodeESaIS1_EE9push_backEOS1_>
 8003bce:	f507 730c 	add.w	r3, r7, #560	; 0x230
 8003bd2:	4618      	mov	r0, r3
 8003bd4:	f7ff fd0a 	bl	80035ec <_ZN3jlb4NodeD1Ev>

            const auto UNIT = SQUARE_LENGTH;
 8003bd8:	4be9      	ldr	r3, [pc, #932]	; (8003f80 <_ZN3jlb5GraphC1Ev+0x8d0>)
 8003bda:	f607 4264 	addw	r2, r7, #3172	; 0xc64
 8003bde:	6013      	str	r3, [r2, #0]
            const auto QUARTER_CIRCLE = 2 * UNIT * M_PI / 4.0f;
 8003be0:	a3e5      	add	r3, pc, #916	; (adr r3, 8003f78 <_ZN3jlb5GraphC1Ev+0x8c8>)
 8003be2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003be6:	f607 4158 	addw	r1, r7, #3160	; 0xc58
 8003bea:	e9c1 2300 	strd	r2, r3, [r1]

            this->operator[]('A').add_edge('C', Direction::LEFT, {'B', 'D'}, QUARTER_CIRCLE);
 8003bee:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8003bf2:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8003bf6:	2141      	movs	r1, #65	; 0x41
 8003bf8:	6818      	ldr	r0, [r3, #0]
 8003bfa:	f002 ff7f 	bl	8006afc <_ZN3jlb5GraphixEc>
 8003bfe:	4604      	mov	r4, r0
 8003c00:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8003c04:	f6a3 230c 	subw	r3, r3, #2572	; 0xa0c
 8003c08:	4ade      	ldr	r2, [pc, #888]	; (8003f84 <_ZN3jlb5GraphC1Ev+0x8d4>)
 8003c0a:	8812      	ldrh	r2, [r2, #0]
 8003c0c:	801a      	strh	r2, [r3, #0]
 8003c0e:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8003c12:	f6a3 2314 	subw	r3, r3, #2580	; 0xa14
 8003c16:	f507 7217 	add.w	r2, r7, #604	; 0x25c
 8003c1a:	601a      	str	r2, [r3, #0]
 8003c1c:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8003c20:	f6a3 2314 	subw	r3, r3, #2580	; 0xa14
 8003c24:	2202      	movs	r2, #2
 8003c26:	605a      	str	r2, [r3, #4]
 8003c28:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003c2c:	4618      	mov	r0, r3
 8003c2e:	f017 fd82 	bl	801b736 <_ZNSaIcEC1Ev>
 8003c32:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003c36:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8003c3a:	f6a2 2214 	subw	r2, r2, #2580	; 0xa14
 8003c3e:	f507 7012 	add.w	r0, r7, #584	; 0x248
 8003c42:	ca06      	ldmia	r2, {r1, r2}
 8003c44:	f003 ff57 	bl	8007af6 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8003c48:	f507 7312 	add.w	r3, r7, #584	; 0x248
 8003c4c:	ed9f 0ad0 	vldr	s0, [pc, #832]	; 8003f90 <_ZN3jlb5GraphC1Ev+0x8e0>
 8003c50:	2200      	movs	r2, #0
 8003c52:	2143      	movs	r1, #67	; 0x43
 8003c54:	4620      	mov	r0, r4
 8003c56:	f7ff fce5 	bl	8003624 <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8003c5a:	f507 7312 	add.w	r3, r7, #584	; 0x248
 8003c5e:	4618      	mov	r0, r3
 8003c60:	f003 fefc 	bl	8007a5c <_ZNSt6vectorIcSaIcEED1Ev>
 8003c64:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003c68:	4618      	mov	r0, r3
 8003c6a:	f017 fd66 	bl	801b73a <_ZNSaIcED1Ev>
            this->operator[]('A').add_edge('B', Direction::STRAIGHT, {'C'}, 2.0f * UNIT);
 8003c6e:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8003c72:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8003c76:	2141      	movs	r1, #65	; 0x41
 8003c78:	6818      	ldr	r0, [r3, #0]
 8003c7a:	f002 ff3f 	bl	8006afc <_ZN3jlb5GraphixEc>
 8003c7e:	4604      	mov	r4, r0
 8003c80:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8003c84:	f5a3 631f 	sub.w	r3, r3, #2544	; 0x9f0
 8003c88:	2243      	movs	r2, #67	; 0x43
 8003c8a:	701a      	strb	r2, [r3, #0]
 8003c8c:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8003c90:	f6a3 13f8 	subw	r3, r3, #2552	; 0x9f8
 8003c94:	f507 721e 	add.w	r2, r7, #632	; 0x278
 8003c98:	601a      	str	r2, [r3, #0]
 8003c9a:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8003c9e:	f6a3 13f8 	subw	r3, r3, #2552	; 0x9f8
 8003ca2:	2201      	movs	r2, #1
 8003ca4:	605a      	str	r2, [r3, #4]
 8003ca6:	f507 731f 	add.w	r3, r7, #636	; 0x27c
 8003caa:	4618      	mov	r0, r3
 8003cac:	f017 fd43 	bl	801b736 <_ZNSaIcEC1Ev>
 8003cb0:	f507 731f 	add.w	r3, r7, #636	; 0x27c
 8003cb4:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8003cb8:	f6a2 12f8 	subw	r2, r2, #2552	; 0x9f8
 8003cbc:	f507 7019 	add.w	r0, r7, #612	; 0x264
 8003cc0:	ca06      	ldmia	r2, {r1, r2}
 8003cc2:	f003 ff18 	bl	8007af6 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8003cc6:	f507 7319 	add.w	r3, r7, #612	; 0x264
 8003cca:	ed9f 0aaf 	vldr	s0, [pc, #700]	; 8003f88 <_ZN3jlb5GraphC1Ev+0x8d8>
 8003cce:	2202      	movs	r2, #2
 8003cd0:	2142      	movs	r1, #66	; 0x42
 8003cd2:	4620      	mov	r0, r4
 8003cd4:	f7ff fca6 	bl	8003624 <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8003cd8:	f507 7319 	add.w	r3, r7, #612	; 0x264
 8003cdc:	4618      	mov	r0, r3
 8003cde:	f003 febd 	bl	8007a5c <_ZNSt6vectorIcSaIcEED1Ev>
 8003ce2:	f507 731f 	add.w	r3, r7, #636	; 0x27c
 8003ce6:	4618      	mov	r0, r3
 8003ce8:	f017 fd27 	bl	801b73a <_ZNSaIcED1Ev>
            this->operator[]('A').add_edge('D', Direction::RIGHT, {'C'}, QUARTER_CIRCLE);
 8003cec:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8003cf0:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8003cf4:	2141      	movs	r1, #65	; 0x41
 8003cf6:	6818      	ldr	r0, [r3, #0]
 8003cf8:	f002 ff00 	bl	8006afc <_ZN3jlb5GraphixEc>
 8003cfc:	4604      	mov	r4, r0
 8003cfe:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8003d02:	f6a3 13d4 	subw	r3, r3, #2516	; 0x9d4
 8003d06:	2243      	movs	r2, #67	; 0x43
 8003d08:	701a      	strb	r2, [r3, #0]
 8003d0a:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8003d0e:	f6a3 13dc 	subw	r3, r3, #2524	; 0x9dc
 8003d12:	f507 7225 	add.w	r2, r7, #660	; 0x294
 8003d16:	601a      	str	r2, [r3, #0]
 8003d18:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8003d1c:	f6a3 13dc 	subw	r3, r3, #2524	; 0x9dc
 8003d20:	2201      	movs	r2, #1
 8003d22:	605a      	str	r2, [r3, #4]
 8003d24:	f507 7326 	add.w	r3, r7, #664	; 0x298
 8003d28:	4618      	mov	r0, r3
 8003d2a:	f017 fd04 	bl	801b736 <_ZNSaIcEC1Ev>
 8003d2e:	f507 7326 	add.w	r3, r7, #664	; 0x298
 8003d32:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8003d36:	f6a2 12dc 	subw	r2, r2, #2524	; 0x9dc
 8003d3a:	f507 7020 	add.w	r0, r7, #640	; 0x280
 8003d3e:	ca06      	ldmia	r2, {r1, r2}
 8003d40:	f003 fed9 	bl	8007af6 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8003d44:	f507 7320 	add.w	r3, r7, #640	; 0x280
 8003d48:	ed9f 0a91 	vldr	s0, [pc, #580]	; 8003f90 <_ZN3jlb5GraphC1Ev+0x8e0>
 8003d4c:	2201      	movs	r2, #1
 8003d4e:	2144      	movs	r1, #68	; 0x44
 8003d50:	4620      	mov	r0, r4
 8003d52:	f7ff fc67 	bl	8003624 <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8003d56:	f507 7320 	add.w	r3, r7, #640	; 0x280
 8003d5a:	4618      	mov	r0, r3
 8003d5c:	f003 fe7e 	bl	8007a5c <_ZNSt6vectorIcSaIcEED1Ev>
 8003d60:	f507 7326 	add.w	r3, r7, #664	; 0x298
 8003d64:	4618      	mov	r0, r3
 8003d66:	f017 fce8 	bl	801b73a <_ZNSaIcED1Ev>
            this->operator[]('B').add_edge('A', Direction::STRAIGHT, {'E'}, 2.0f * UNIT);
 8003d6a:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8003d6e:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8003d72:	2142      	movs	r1, #66	; 0x42
 8003d74:	6818      	ldr	r0, [r3, #0]
 8003d76:	f002 fec1 	bl	8006afc <_ZN3jlb5GraphixEc>
 8003d7a:	4604      	mov	r4, r0
 8003d7c:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8003d80:	f6a3 13b8 	subw	r3, r3, #2488	; 0x9b8
 8003d84:	2245      	movs	r2, #69	; 0x45
 8003d86:	701a      	strb	r2, [r3, #0]
 8003d88:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8003d8c:	f5a3 631c 	sub.w	r3, r3, #2496	; 0x9c0
 8003d90:	f507 722c 	add.w	r2, r7, #688	; 0x2b0
 8003d94:	601a      	str	r2, [r3, #0]
 8003d96:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8003d9a:	f5a3 631c 	sub.w	r3, r3, #2496	; 0x9c0
 8003d9e:	2201      	movs	r2, #1
 8003da0:	605a      	str	r2, [r3, #4]
 8003da2:	f507 732d 	add.w	r3, r7, #692	; 0x2b4
 8003da6:	4618      	mov	r0, r3
 8003da8:	f017 fcc5 	bl	801b736 <_ZNSaIcEC1Ev>
 8003dac:	f507 732d 	add.w	r3, r7, #692	; 0x2b4
 8003db0:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8003db4:	f5a2 621c 	sub.w	r2, r2, #2496	; 0x9c0
 8003db8:	f507 7027 	add.w	r0, r7, #668	; 0x29c
 8003dbc:	ca06      	ldmia	r2, {r1, r2}
 8003dbe:	f003 fe9a 	bl	8007af6 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8003dc2:	f507 7327 	add.w	r3, r7, #668	; 0x29c
 8003dc6:	ed9f 0a70 	vldr	s0, [pc, #448]	; 8003f88 <_ZN3jlb5GraphC1Ev+0x8d8>
 8003dca:	2202      	movs	r2, #2
 8003dcc:	2141      	movs	r1, #65	; 0x41
 8003dce:	4620      	mov	r0, r4
 8003dd0:	f7ff fc28 	bl	8003624 <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8003dd4:	f507 7327 	add.w	r3, r7, #668	; 0x29c
 8003dd8:	4618      	mov	r0, r3
 8003dda:	f003 fe3f 	bl	8007a5c <_ZNSt6vectorIcSaIcEED1Ev>
 8003dde:	f507 732d 	add.w	r3, r7, #692	; 0x2b4
 8003de2:	4618      	mov	r0, r3
 8003de4:	f017 fca9 	bl	801b73a <_ZNSaIcED1Ev>
            this->operator[]('B').add_edge('E', Direction::RIGHT, {'A', 'D'}, QUARTER_CIRCLE);
 8003de8:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8003dec:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8003df0:	2142      	movs	r1, #66	; 0x42
 8003df2:	6818      	ldr	r0, [r3, #0]
 8003df4:	f002 fe82 	bl	8006afc <_ZN3jlb5GraphixEc>
 8003df8:	4604      	mov	r4, r0
 8003dfa:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8003dfe:	f6a3 139c 	subw	r3, r3, #2460	; 0x99c
 8003e02:	4a62      	ldr	r2, [pc, #392]	; (8003f8c <_ZN3jlb5GraphC1Ev+0x8dc>)
 8003e04:	8812      	ldrh	r2, [r2, #0]
 8003e06:	801a      	strh	r2, [r3, #0]
 8003e08:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8003e0c:	f6a3 13a4 	subw	r3, r3, #2468	; 0x9a4
 8003e10:	f507 7233 	add.w	r2, r7, #716	; 0x2cc
 8003e14:	601a      	str	r2, [r3, #0]
 8003e16:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8003e1a:	f6a3 13a4 	subw	r3, r3, #2468	; 0x9a4
 8003e1e:	2202      	movs	r2, #2
 8003e20:	605a      	str	r2, [r3, #4]
 8003e22:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 8003e26:	4618      	mov	r0, r3
 8003e28:	f017 fc85 	bl	801b736 <_ZNSaIcEC1Ev>
 8003e2c:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 8003e30:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8003e34:	f6a2 12a4 	subw	r2, r2, #2468	; 0x9a4
 8003e38:	f507 702e 	add.w	r0, r7, #696	; 0x2b8
 8003e3c:	ca06      	ldmia	r2, {r1, r2}
 8003e3e:	f003 fe5a 	bl	8007af6 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8003e42:	f507 732e 	add.w	r3, r7, #696	; 0x2b8
 8003e46:	ed9f 0a52 	vldr	s0, [pc, #328]	; 8003f90 <_ZN3jlb5GraphC1Ev+0x8e0>
 8003e4a:	2201      	movs	r2, #1
 8003e4c:	2145      	movs	r1, #69	; 0x45
 8003e4e:	4620      	mov	r0, r4
 8003e50:	f7ff fbe8 	bl	8003624 <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8003e54:	f507 732e 	add.w	r3, r7, #696	; 0x2b8
 8003e58:	4618      	mov	r0, r3
 8003e5a:	f003 fdff 	bl	8007a5c <_ZNSt6vectorIcSaIcEED1Ev>
 8003e5e:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 8003e62:	4618      	mov	r0, r3
 8003e64:	f017 fc69 	bl	801b73a <_ZNSaIcED1Ev>
            this->operator[]('B').add_edge('D', Direction::LEFT, {'E'}, QUARTER_CIRCLE);
 8003e68:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8003e6c:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8003e70:	2142      	movs	r1, #66	; 0x42
 8003e72:	6818      	ldr	r0, [r3, #0]
 8003e74:	f002 fe42 	bl	8006afc <_ZN3jlb5GraphixEc>
 8003e78:	4604      	mov	r4, r0
 8003e7a:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8003e7e:	f5a3 6318 	sub.w	r3, r3, #2432	; 0x980
 8003e82:	2245      	movs	r2, #69	; 0x45
 8003e84:	701a      	strb	r2, [r3, #0]
 8003e86:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8003e8a:	f6a3 1388 	subw	r3, r3, #2440	; 0x988
 8003e8e:	f507 723a 	add.w	r2, r7, #744	; 0x2e8
 8003e92:	601a      	str	r2, [r3, #0]
 8003e94:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8003e98:	f6a3 1388 	subw	r3, r3, #2440	; 0x988
 8003e9c:	2201      	movs	r2, #1
 8003e9e:	605a      	str	r2, [r3, #4]
 8003ea0:	f507 733b 	add.w	r3, r7, #748	; 0x2ec
 8003ea4:	4618      	mov	r0, r3
 8003ea6:	f017 fc46 	bl	801b736 <_ZNSaIcEC1Ev>
 8003eaa:	f507 733b 	add.w	r3, r7, #748	; 0x2ec
 8003eae:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8003eb2:	f6a2 1288 	subw	r2, r2, #2440	; 0x988
 8003eb6:	f507 7035 	add.w	r0, r7, #724	; 0x2d4
 8003eba:	ca06      	ldmia	r2, {r1, r2}
 8003ebc:	f003 fe1b 	bl	8007af6 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8003ec0:	f507 7335 	add.w	r3, r7, #724	; 0x2d4
 8003ec4:	ed9f 0a32 	vldr	s0, [pc, #200]	; 8003f90 <_ZN3jlb5GraphC1Ev+0x8e0>
 8003ec8:	2200      	movs	r2, #0
 8003eca:	2144      	movs	r1, #68	; 0x44
 8003ecc:	4620      	mov	r0, r4
 8003ece:	f7ff fba9 	bl	8003624 <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8003ed2:	f507 7335 	add.w	r3, r7, #724	; 0x2d4
 8003ed6:	4618      	mov	r0, r3
 8003ed8:	f003 fdc0 	bl	8007a5c <_ZNSt6vectorIcSaIcEED1Ev>
 8003edc:	f507 733b 	add.w	r3, r7, #748	; 0x2ec
 8003ee0:	4618      	mov	r0, r3
 8003ee2:	f017 fc2a 	bl	801b73a <_ZNSaIcED1Ev>
            this->operator[]('C').add_edge('A', Direction::RIGHT, {'F'}, QUARTER_CIRCLE);
 8003ee6:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8003eea:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8003eee:	2143      	movs	r1, #67	; 0x43
 8003ef0:	6818      	ldr	r0, [r3, #0]
 8003ef2:	f002 fe03 	bl	8006afc <_ZN3jlb5GraphixEc>
 8003ef6:	4604      	mov	r4, r0
 8003ef8:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8003efc:	f6a3 1364 	subw	r3, r3, #2404	; 0x964
 8003f00:	2246      	movs	r2, #70	; 0x46
 8003f02:	701a      	strb	r2, [r3, #0]
 8003f04:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8003f08:	f6a3 136c 	subw	r3, r3, #2412	; 0x96c
 8003f0c:	f507 7241 	add.w	r2, r7, #772	; 0x304
 8003f10:	601a      	str	r2, [r3, #0]
 8003f12:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8003f16:	f6a3 136c 	subw	r3, r3, #2412	; 0x96c
 8003f1a:	2201      	movs	r2, #1
 8003f1c:	605a      	str	r2, [r3, #4]
 8003f1e:	f507 7342 	add.w	r3, r7, #776	; 0x308
 8003f22:	4618      	mov	r0, r3
 8003f24:	f017 fc07 	bl	801b736 <_ZNSaIcEC1Ev>
 8003f28:	f507 7342 	add.w	r3, r7, #776	; 0x308
 8003f2c:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8003f30:	f6a2 126c 	subw	r2, r2, #2412	; 0x96c
 8003f34:	f507 703c 	add.w	r0, r7, #752	; 0x2f0
 8003f38:	ca06      	ldmia	r2, {r1, r2}
 8003f3a:	f003 fddc 	bl	8007af6 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8003f3e:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8003f42:	ed9f 0a13 	vldr	s0, [pc, #76]	; 8003f90 <_ZN3jlb5GraphC1Ev+0x8e0>
 8003f46:	2201      	movs	r2, #1
 8003f48:	2141      	movs	r1, #65	; 0x41
 8003f4a:	4620      	mov	r0, r4
 8003f4c:	f7ff fb6a 	bl	8003624 <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8003f50:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8003f54:	4618      	mov	r0, r3
 8003f56:	f003 fd81 	bl	8007a5c <_ZNSt6vectorIcSaIcEED1Ev>
 8003f5a:	f507 7342 	add.w	r3, r7, #776	; 0x308
 8003f5e:	4618      	mov	r0, r3
 8003f60:	f017 fbeb 	bl	801b73a <_ZNSaIcED1Ev>
            this->operator[]('C').add_edge('F', Direction::LEFT, {'A'}, QUARTER_CIRCLE);
 8003f64:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8003f68:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8003f6c:	2143      	movs	r1, #67	; 0x43
 8003f6e:	6818      	ldr	r0, [r3, #0]
 8003f70:	f002 fdc4 	bl	8006afc <_ZN3jlb5GraphixEc>
 8003f74:	e00e      	b.n	8003f94 <_ZN3jlb5GraphC1Ev+0x8e4>
 8003f76:	bf00      	nop
 8003f78:	460698c7 	.word	0x460698c7
 8003f7c:	3fee28c7 	.word	0x3fee28c7
 8003f80:	3f19999a 	.word	0x3f19999a
 8003f84:	0801f06c 	.word	0x0801f06c
 8003f88:	3f99999a 	.word	0x3f99999a
 8003f8c:	0801f070 	.word	0x0801f070
 8003f90:	3f71463a 	.word	0x3f71463a
 8003f94:	4604      	mov	r4, r0
 8003f96:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8003f9a:	f6a3 1348 	subw	r3, r3, #2376	; 0x948
 8003f9e:	2241      	movs	r2, #65	; 0x41
 8003fa0:	701a      	strb	r2, [r3, #0]
 8003fa2:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8003fa6:	f5a3 6315 	sub.w	r3, r3, #2384	; 0x950
 8003faa:	f507 7248 	add.w	r2, r7, #800	; 0x320
 8003fae:	601a      	str	r2, [r3, #0]
 8003fb0:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8003fb4:	f5a3 6315 	sub.w	r3, r3, #2384	; 0x950
 8003fb8:	2201      	movs	r2, #1
 8003fba:	605a      	str	r2, [r3, #4]
 8003fbc:	f507 7349 	add.w	r3, r7, #804	; 0x324
 8003fc0:	4618      	mov	r0, r3
 8003fc2:	f017 fbb8 	bl	801b736 <_ZNSaIcEC1Ev>
 8003fc6:	f507 7349 	add.w	r3, r7, #804	; 0x324
 8003fca:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8003fce:	f5a2 6215 	sub.w	r2, r2, #2384	; 0x950
 8003fd2:	f507 7043 	add.w	r0, r7, #780	; 0x30c
 8003fd6:	ca06      	ldmia	r2, {r1, r2}
 8003fd8:	f003 fd8d 	bl	8007af6 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8003fdc:	f507 7343 	add.w	r3, r7, #780	; 0x30c
 8003fe0:	ed1f 0a15 	vldr	s0, [pc, #-84]	; 8003f90 <_ZN3jlb5GraphC1Ev+0x8e0>
 8003fe4:	2200      	movs	r2, #0
 8003fe6:	2146      	movs	r1, #70	; 0x46
 8003fe8:	4620      	mov	r0, r4
 8003fea:	f7ff fb1b 	bl	8003624 <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8003fee:	f507 7343 	add.w	r3, r7, #780	; 0x30c
 8003ff2:	4618      	mov	r0, r3
 8003ff4:	f003 fd32 	bl	8007a5c <_ZNSt6vectorIcSaIcEED1Ev>
 8003ff8:	f507 7349 	add.w	r3, r7, #804	; 0x324
 8003ffc:	4618      	mov	r0, r3
 8003ffe:	f017 fb9c 	bl	801b73a <_ZNSaIcED1Ev>
            this->operator[]('D').add_edge('A', Direction::LEFT, {'F', 'G', 'I'}, QUARTER_CIRCLE);
 8004002:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8004006:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 800400a:	2144      	movs	r1, #68	; 0x44
 800400c:	6818      	ldr	r0, [r3, #0]
 800400e:	f002 fd75 	bl	8006afc <_ZN3jlb5GraphixEc>
 8004012:	4604      	mov	r4, r0
 8004014:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8004018:	f6a3 132c 	subw	r3, r3, #2348	; 0x92c
 800401c:	4ae5      	ldr	r2, [pc, #916]	; (80043b4 <_ZN3jlb5GraphC1Ev+0xd04>)
 800401e:	6812      	ldr	r2, [r2, #0]
 8004020:	4611      	mov	r1, r2
 8004022:	8019      	strh	r1, [r3, #0]
 8004024:	3302      	adds	r3, #2
 8004026:	0c12      	lsrs	r2, r2, #16
 8004028:	701a      	strb	r2, [r3, #0]
 800402a:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800402e:	f6a3 1334 	subw	r3, r3, #2356	; 0x934
 8004032:	f507 724f 	add.w	r2, r7, #828	; 0x33c
 8004036:	601a      	str	r2, [r3, #0]
 8004038:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800403c:	f6a3 1334 	subw	r3, r3, #2356	; 0x934
 8004040:	2203      	movs	r2, #3
 8004042:	605a      	str	r2, [r3, #4]
 8004044:	f507 7350 	add.w	r3, r7, #832	; 0x340
 8004048:	4618      	mov	r0, r3
 800404a:	f017 fb74 	bl	801b736 <_ZNSaIcEC1Ev>
 800404e:	f507 7350 	add.w	r3, r7, #832	; 0x340
 8004052:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8004056:	f6a2 1234 	subw	r2, r2, #2356	; 0x934
 800405a:	f507 704a 	add.w	r0, r7, #808	; 0x328
 800405e:	ca06      	ldmia	r2, {r1, r2}
 8004060:	f003 fd49 	bl	8007af6 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8004064:	f507 734a 	add.w	r3, r7, #808	; 0x328
 8004068:	ed9f 0ad6 	vldr	s0, [pc, #856]	; 80043c4 <_ZN3jlb5GraphC1Ev+0xd14>
 800406c:	2200      	movs	r2, #0
 800406e:	2141      	movs	r1, #65	; 0x41
 8004070:	4620      	mov	r0, r4
 8004072:	f7ff fad7 	bl	8003624 <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8004076:	f507 734a 	add.w	r3, r7, #808	; 0x328
 800407a:	4618      	mov	r0, r3
 800407c:	f003 fcee 	bl	8007a5c <_ZNSt6vectorIcSaIcEED1Ev>
 8004080:	f507 7350 	add.w	r3, r7, #832	; 0x340
 8004084:	4618      	mov	r0, r3
 8004086:	f017 fb58 	bl	801b73a <_ZNSaIcED1Ev>
            this->operator[]('D').add_edge('B', Direction::RIGHT, {'F', 'G', 'I'}, QUARTER_CIRCLE);
 800408a:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800408e:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8004092:	2144      	movs	r1, #68	; 0x44
 8004094:	6818      	ldr	r0, [r3, #0]
 8004096:	f002 fd31 	bl	8006afc <_ZN3jlb5GraphixEc>
 800409a:	4604      	mov	r4, r0
 800409c:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80040a0:	f5a3 6311 	sub.w	r3, r3, #2320	; 0x910
 80040a4:	4ac3      	ldr	r2, [pc, #780]	; (80043b4 <_ZN3jlb5GraphC1Ev+0xd04>)
 80040a6:	6812      	ldr	r2, [r2, #0]
 80040a8:	4611      	mov	r1, r2
 80040aa:	8019      	strh	r1, [r3, #0]
 80040ac:	3302      	adds	r3, #2
 80040ae:	0c12      	lsrs	r2, r2, #16
 80040b0:	701a      	strb	r2, [r3, #0]
 80040b2:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80040b6:	f6a3 1318 	subw	r3, r3, #2328	; 0x918
 80040ba:	f507 7256 	add.w	r2, r7, #856	; 0x358
 80040be:	601a      	str	r2, [r3, #0]
 80040c0:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80040c4:	f6a3 1318 	subw	r3, r3, #2328	; 0x918
 80040c8:	2203      	movs	r2, #3
 80040ca:	605a      	str	r2, [r3, #4]
 80040cc:	f507 7357 	add.w	r3, r7, #860	; 0x35c
 80040d0:	4618      	mov	r0, r3
 80040d2:	f017 fb30 	bl	801b736 <_ZNSaIcEC1Ev>
 80040d6:	f507 7357 	add.w	r3, r7, #860	; 0x35c
 80040da:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 80040de:	f6a2 1218 	subw	r2, r2, #2328	; 0x918
 80040e2:	f507 7051 	add.w	r0, r7, #836	; 0x344
 80040e6:	ca06      	ldmia	r2, {r1, r2}
 80040e8:	f003 fd05 	bl	8007af6 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 80040ec:	f507 7351 	add.w	r3, r7, #836	; 0x344
 80040f0:	ed9f 0ab4 	vldr	s0, [pc, #720]	; 80043c4 <_ZN3jlb5GraphC1Ev+0xd14>
 80040f4:	2201      	movs	r2, #1
 80040f6:	2142      	movs	r1, #66	; 0x42
 80040f8:	4620      	mov	r0, r4
 80040fa:	f7ff fa93 	bl	8003624 <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 80040fe:	f507 7351 	add.w	r3, r7, #836	; 0x344
 8004102:	4618      	mov	r0, r3
 8004104:	f003 fcaa 	bl	8007a5c <_ZNSt6vectorIcSaIcEED1Ev>
 8004108:	f507 7357 	add.w	r3, r7, #860	; 0x35c
 800410c:	4618      	mov	r0, r3
 800410e:	f017 fb14 	bl	801b73a <_ZNSaIcED1Ev>
            this->operator[]('D').add_edge('G', Direction::LEFT, {'A', 'B'}, QUARTER_CIRCLE);
 8004112:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8004116:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 800411a:	2144      	movs	r1, #68	; 0x44
 800411c:	6818      	ldr	r0, [r3, #0]
 800411e:	f002 fced 	bl	8006afc <_ZN3jlb5GraphixEc>
 8004122:	4604      	mov	r4, r0
 8004124:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8004128:	f6a3 03f4 	subw	r3, r3, #2292	; 0x8f4
 800412c:	4aa2      	ldr	r2, [pc, #648]	; (80043b8 <_ZN3jlb5GraphC1Ev+0xd08>)
 800412e:	8812      	ldrh	r2, [r2, #0]
 8004130:	801a      	strh	r2, [r3, #0]
 8004132:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8004136:	f6a3 03fc 	subw	r3, r3, #2300	; 0x8fc
 800413a:	f507 725d 	add.w	r2, r7, #884	; 0x374
 800413e:	601a      	str	r2, [r3, #0]
 8004140:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8004144:	f6a3 03fc 	subw	r3, r3, #2300	; 0x8fc
 8004148:	2202      	movs	r2, #2
 800414a:	605a      	str	r2, [r3, #4]
 800414c:	f507 735e 	add.w	r3, r7, #888	; 0x378
 8004150:	4618      	mov	r0, r3
 8004152:	f017 faf0 	bl	801b736 <_ZNSaIcEC1Ev>
 8004156:	f507 735e 	add.w	r3, r7, #888	; 0x378
 800415a:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 800415e:	f6a2 02fc 	subw	r2, r2, #2300	; 0x8fc
 8004162:	f507 7058 	add.w	r0, r7, #864	; 0x360
 8004166:	ca06      	ldmia	r2, {r1, r2}
 8004168:	f003 fcc5 	bl	8007af6 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 800416c:	f507 7358 	add.w	r3, r7, #864	; 0x360
 8004170:	ed9f 0a94 	vldr	s0, [pc, #592]	; 80043c4 <_ZN3jlb5GraphC1Ev+0xd14>
 8004174:	2200      	movs	r2, #0
 8004176:	2147      	movs	r1, #71	; 0x47
 8004178:	4620      	mov	r0, r4
 800417a:	f7ff fa53 	bl	8003624 <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 800417e:	f507 7358 	add.w	r3, r7, #864	; 0x360
 8004182:	4618      	mov	r0, r3
 8004184:	f003 fc6a 	bl	8007a5c <_ZNSt6vectorIcSaIcEED1Ev>
 8004188:	f507 735e 	add.w	r3, r7, #888	; 0x378
 800418c:	4618      	mov	r0, r3
 800418e:	f017 fad4 	bl	801b73a <_ZNSaIcED1Ev>
            this->operator[]('D').add_edge('I', Direction::STRAIGHT, {'A', 'B'}, 2.0f * UNIT);
 8004192:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8004196:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 800419a:	2144      	movs	r1, #68	; 0x44
 800419c:	6818      	ldr	r0, [r3, #0]
 800419e:	f002 fcad 	bl	8006afc <_ZN3jlb5GraphixEc>
 80041a2:	4604      	mov	r4, r0
 80041a4:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80041a8:	f6a3 03d8 	subw	r3, r3, #2264	; 0x8d8
 80041ac:	4a82      	ldr	r2, [pc, #520]	; (80043b8 <_ZN3jlb5GraphC1Ev+0xd08>)
 80041ae:	8812      	ldrh	r2, [r2, #0]
 80041b0:	801a      	strh	r2, [r3, #0]
 80041b2:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80041b6:	f5a3 630e 	sub.w	r3, r3, #2272	; 0x8e0
 80041ba:	f507 7264 	add.w	r2, r7, #912	; 0x390
 80041be:	601a      	str	r2, [r3, #0]
 80041c0:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80041c4:	f5a3 630e 	sub.w	r3, r3, #2272	; 0x8e0
 80041c8:	2202      	movs	r2, #2
 80041ca:	605a      	str	r2, [r3, #4]
 80041cc:	f507 7365 	add.w	r3, r7, #916	; 0x394
 80041d0:	4618      	mov	r0, r3
 80041d2:	f017 fab0 	bl	801b736 <_ZNSaIcEC1Ev>
 80041d6:	f507 7365 	add.w	r3, r7, #916	; 0x394
 80041da:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 80041de:	f5a2 620e 	sub.w	r2, r2, #2272	; 0x8e0
 80041e2:	f507 705f 	add.w	r0, r7, #892	; 0x37c
 80041e6:	ca06      	ldmia	r2, {r1, r2}
 80041e8:	f003 fc85 	bl	8007af6 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 80041ec:	f507 735f 	add.w	r3, r7, #892	; 0x37c
 80041f0:	ed9f 0a72 	vldr	s0, [pc, #456]	; 80043bc <_ZN3jlb5GraphC1Ev+0xd0c>
 80041f4:	2202      	movs	r2, #2
 80041f6:	2149      	movs	r1, #73	; 0x49
 80041f8:	4620      	mov	r0, r4
 80041fa:	f7ff fa13 	bl	8003624 <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 80041fe:	f507 735f 	add.w	r3, r7, #892	; 0x37c
 8004202:	4618      	mov	r0, r3
 8004204:	f003 fc2a 	bl	8007a5c <_ZNSt6vectorIcSaIcEED1Ev>
 8004208:	f507 7365 	add.w	r3, r7, #916	; 0x394
 800420c:	4618      	mov	r0, r3
 800420e:	f017 fa94 	bl	801b73a <_ZNSaIcED1Ev>
            this->operator[]('D').add_edge('F', Direction::RIGHT, {'A', 'B'}, QUARTER_CIRCLE);
 8004212:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8004216:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 800421a:	2144      	movs	r1, #68	; 0x44
 800421c:	6818      	ldr	r0, [r3, #0]
 800421e:	f002 fc6d 	bl	8006afc <_ZN3jlb5GraphixEc>
 8004222:	4604      	mov	r4, r0
 8004224:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8004228:	f6a3 03bc 	subw	r3, r3, #2236	; 0x8bc
 800422c:	4a62      	ldr	r2, [pc, #392]	; (80043b8 <_ZN3jlb5GraphC1Ev+0xd08>)
 800422e:	8812      	ldrh	r2, [r2, #0]
 8004230:	801a      	strh	r2, [r3, #0]
 8004232:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8004236:	f6a3 03c4 	subw	r3, r3, #2244	; 0x8c4
 800423a:	f507 726b 	add.w	r2, r7, #940	; 0x3ac
 800423e:	601a      	str	r2, [r3, #0]
 8004240:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8004244:	f6a3 03c4 	subw	r3, r3, #2244	; 0x8c4
 8004248:	2202      	movs	r2, #2
 800424a:	605a      	str	r2, [r3, #4]
 800424c:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 8004250:	4618      	mov	r0, r3
 8004252:	f017 fa70 	bl	801b736 <_ZNSaIcEC1Ev>
 8004256:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 800425a:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 800425e:	f6a2 02c4 	subw	r2, r2, #2244	; 0x8c4
 8004262:	f507 7066 	add.w	r0, r7, #920	; 0x398
 8004266:	ca06      	ldmia	r2, {r1, r2}
 8004268:	f003 fc45 	bl	8007af6 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 800426c:	f507 7366 	add.w	r3, r7, #920	; 0x398
 8004270:	ed9f 0a54 	vldr	s0, [pc, #336]	; 80043c4 <_ZN3jlb5GraphC1Ev+0xd14>
 8004274:	2201      	movs	r2, #1
 8004276:	2146      	movs	r1, #70	; 0x46
 8004278:	4620      	mov	r0, r4
 800427a:	f7ff f9d3 	bl	8003624 <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 800427e:	f507 7366 	add.w	r3, r7, #920	; 0x398
 8004282:	4618      	mov	r0, r3
 8004284:	f003 fbea 	bl	8007a5c <_ZNSt6vectorIcSaIcEED1Ev>
 8004288:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 800428c:	4618      	mov	r0, r3
 800428e:	f017 fa54 	bl	801b73a <_ZNSaIcED1Ev>
            this->operator[]('E').add_edge('B', Direction::LEFT, {'G', 'J'}, QUARTER_CIRCLE);
 8004292:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8004296:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 800429a:	2145      	movs	r1, #69	; 0x45
 800429c:	6818      	ldr	r0, [r3, #0]
 800429e:	f002 fc2d 	bl	8006afc <_ZN3jlb5GraphixEc>
 80042a2:	4604      	mov	r4, r0
 80042a4:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80042a8:	f5a3 630a 	sub.w	r3, r3, #2208	; 0x8a0
 80042ac:	4a44      	ldr	r2, [pc, #272]	; (80043c0 <_ZN3jlb5GraphC1Ev+0xd10>)
 80042ae:	8812      	ldrh	r2, [r2, #0]
 80042b0:	801a      	strh	r2, [r3, #0]
 80042b2:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80042b6:	f6a3 03a8 	subw	r3, r3, #2216	; 0x8a8
 80042ba:	f507 7272 	add.w	r2, r7, #968	; 0x3c8
 80042be:	601a      	str	r2, [r3, #0]
 80042c0:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80042c4:	f6a3 03a8 	subw	r3, r3, #2216	; 0x8a8
 80042c8:	2202      	movs	r2, #2
 80042ca:	605a      	str	r2, [r3, #4]
 80042cc:	f507 7373 	add.w	r3, r7, #972	; 0x3cc
 80042d0:	4618      	mov	r0, r3
 80042d2:	f017 fa30 	bl	801b736 <_ZNSaIcEC1Ev>
 80042d6:	f507 7373 	add.w	r3, r7, #972	; 0x3cc
 80042da:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 80042de:	f6a2 02a8 	subw	r2, r2, #2216	; 0x8a8
 80042e2:	f507 706d 	add.w	r0, r7, #948	; 0x3b4
 80042e6:	ca06      	ldmia	r2, {r1, r2}
 80042e8:	f003 fc05 	bl	8007af6 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 80042ec:	f507 736d 	add.w	r3, r7, #948	; 0x3b4
 80042f0:	ed9f 0a34 	vldr	s0, [pc, #208]	; 80043c4 <_ZN3jlb5GraphC1Ev+0xd14>
 80042f4:	2200      	movs	r2, #0
 80042f6:	2142      	movs	r1, #66	; 0x42
 80042f8:	4620      	mov	r0, r4
 80042fa:	f7ff f993 	bl	8003624 <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 80042fe:	f507 736d 	add.w	r3, r7, #948	; 0x3b4
 8004302:	4618      	mov	r0, r3
 8004304:	f003 fbaa 	bl	8007a5c <_ZNSt6vectorIcSaIcEED1Ev>
 8004308:	f507 7373 	add.w	r3, r7, #972	; 0x3cc
 800430c:	4618      	mov	r0, r3
 800430e:	f017 fa14 	bl	801b73a <_ZNSaIcED1Ev>
            this->operator[]('E').add_edge('J', Direction::STRAIGHT, {'B'}, 2.0f * UNIT);
 8004312:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8004316:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 800431a:	2145      	movs	r1, #69	; 0x45
 800431c:	6818      	ldr	r0, [r3, #0]
 800431e:	f002 fbed 	bl	8006afc <_ZN3jlb5GraphixEc>
 8004322:	4604      	mov	r4, r0
 8004324:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8004328:	f6a3 0384 	subw	r3, r3, #2180	; 0x884
 800432c:	2242      	movs	r2, #66	; 0x42
 800432e:	701a      	strb	r2, [r3, #0]
 8004330:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8004334:	f6a3 038c 	subw	r3, r3, #2188	; 0x88c
 8004338:	f507 7279 	add.w	r2, r7, #996	; 0x3e4
 800433c:	601a      	str	r2, [r3, #0]
 800433e:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8004342:	f6a3 038c 	subw	r3, r3, #2188	; 0x88c
 8004346:	2201      	movs	r2, #1
 8004348:	605a      	str	r2, [r3, #4]
 800434a:	f507 737a 	add.w	r3, r7, #1000	; 0x3e8
 800434e:	4618      	mov	r0, r3
 8004350:	f017 f9f1 	bl	801b736 <_ZNSaIcEC1Ev>
 8004354:	f507 737a 	add.w	r3, r7, #1000	; 0x3e8
 8004358:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 800435c:	f6a2 028c 	subw	r2, r2, #2188	; 0x88c
 8004360:	f507 7074 	add.w	r0, r7, #976	; 0x3d0
 8004364:	ca06      	ldmia	r2, {r1, r2}
 8004366:	f003 fbc6 	bl	8007af6 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 800436a:	f507 7374 	add.w	r3, r7, #976	; 0x3d0
 800436e:	ed9f 0a13 	vldr	s0, [pc, #76]	; 80043bc <_ZN3jlb5GraphC1Ev+0xd0c>
 8004372:	2202      	movs	r2, #2
 8004374:	214a      	movs	r1, #74	; 0x4a
 8004376:	4620      	mov	r0, r4
 8004378:	f7ff f954 	bl	8003624 <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 800437c:	f507 7374 	add.w	r3, r7, #976	; 0x3d0
 8004380:	4618      	mov	r0, r3
 8004382:	f003 fb6b 	bl	8007a5c <_ZNSt6vectorIcSaIcEED1Ev>
 8004386:	f507 737a 	add.w	r3, r7, #1000	; 0x3e8
 800438a:	4618      	mov	r0, r3
 800438c:	f017 f9d5 	bl	801b73a <_ZNSaIcED1Ev>
            this->operator[]('E').add_edge('G', Direction::RIGHT, {'B'}, QUARTER_CIRCLE);
 8004390:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8004394:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8004398:	2145      	movs	r1, #69	; 0x45
 800439a:	6818      	ldr	r0, [r3, #0]
 800439c:	f002 fbae 	bl	8006afc <_ZN3jlb5GraphixEc>
 80043a0:	4604      	mov	r4, r0
 80043a2:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80043a6:	f6a3 0368 	subw	r3, r3, #2152	; 0x868
 80043aa:	2242      	movs	r2, #66	; 0x42
 80043ac:	701a      	strb	r2, [r3, #0]
 80043ae:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80043b2:	e009      	b.n	80043c8 <_ZN3jlb5GraphC1Ev+0xd18>
 80043b4:	0801f074 	.word	0x0801f074
 80043b8:	0801f078 	.word	0x0801f078
 80043bc:	3f99999a 	.word	0x3f99999a
 80043c0:	0801f07c 	.word	0x0801f07c
 80043c4:	3f71463a 	.word	0x3f71463a
 80043c8:	f5a3 6307 	sub.w	r3, r3, #2160	; 0x870
 80043cc:	f507 6280 	add.w	r2, r7, #1024	; 0x400
 80043d0:	601a      	str	r2, [r3, #0]
 80043d2:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80043d6:	f5a3 6307 	sub.w	r3, r3, #2160	; 0x870
 80043da:	2201      	movs	r2, #1
 80043dc:	605a      	str	r2, [r3, #4]
 80043de:	f207 4304 	addw	r3, r7, #1028	; 0x404
 80043e2:	4618      	mov	r0, r3
 80043e4:	f017 f9a7 	bl	801b736 <_ZNSaIcEC1Ev>
 80043e8:	f207 4304 	addw	r3, r7, #1028	; 0x404
 80043ec:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 80043f0:	f5a2 6207 	sub.w	r2, r2, #2160	; 0x870
 80043f4:	f507 707b 	add.w	r0, r7, #1004	; 0x3ec
 80043f8:	ca06      	ldmia	r2, {r1, r2}
 80043fa:	f003 fb7c 	bl	8007af6 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 80043fe:	f507 737b 	add.w	r3, r7, #1004	; 0x3ec
 8004402:	ed1f 0a10 	vldr	s0, [pc, #-64]	; 80043c4 <_ZN3jlb5GraphC1Ev+0xd14>
 8004406:	2201      	movs	r2, #1
 8004408:	2147      	movs	r1, #71	; 0x47
 800440a:	4620      	mov	r0, r4
 800440c:	f7ff f90a 	bl	8003624 <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8004410:	f507 737b 	add.w	r3, r7, #1004	; 0x3ec
 8004414:	4618      	mov	r0, r3
 8004416:	f003 fb21 	bl	8007a5c <_ZNSt6vectorIcSaIcEED1Ev>
 800441a:	f207 4304 	addw	r3, r7, #1028	; 0x404
 800441e:	4618      	mov	r0, r3
 8004420:	f017 f98b 	bl	801b73a <_ZNSaIcED1Ev>
            this->operator[]('F').add_edge('C', Direction::RIGHT, {'D', 'G', 'I'}, QUARTER_CIRCLE);
 8004424:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8004428:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 800442c:	2146      	movs	r1, #70	; 0x46
 800442e:	6818      	ldr	r0, [r3, #0]
 8004430:	f002 fb64 	bl	8006afc <_ZN3jlb5GraphixEc>
 8004434:	4604      	mov	r4, r0
 8004436:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800443a:	f6a3 034c 	subw	r3, r3, #2124	; 0x84c
 800443e:	4ae4      	ldr	r2, [pc, #912]	; (80047d0 <_ZN3jlb5GraphC1Ev+0x1120>)
 8004440:	6812      	ldr	r2, [r2, #0]
 8004442:	4611      	mov	r1, r2
 8004444:	8019      	strh	r1, [r3, #0]
 8004446:	3302      	adds	r3, #2
 8004448:	0c12      	lsrs	r2, r2, #16
 800444a:	701a      	strb	r2, [r3, #0]
 800444c:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8004450:	f6a3 0354 	subw	r3, r3, #2132	; 0x854
 8004454:	f207 421c 	addw	r2, r7, #1052	; 0x41c
 8004458:	601a      	str	r2, [r3, #0]
 800445a:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800445e:	f6a3 0354 	subw	r3, r3, #2132	; 0x854
 8004462:	2203      	movs	r2, #3
 8004464:	605a      	str	r2, [r3, #4]
 8004466:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 800446a:	4618      	mov	r0, r3
 800446c:	f017 f963 	bl	801b736 <_ZNSaIcEC1Ev>
 8004470:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8004474:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8004478:	f6a2 0254 	subw	r2, r2, #2132	; 0x854
 800447c:	f507 6081 	add.w	r0, r7, #1032	; 0x408
 8004480:	ca06      	ldmia	r2, {r1, r2}
 8004482:	f003 fb38 	bl	8007af6 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8004486:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 800448a:	ed9f 0ad2 	vldr	s0, [pc, #840]	; 80047d4 <_ZN3jlb5GraphC1Ev+0x1124>
 800448e:	2201      	movs	r2, #1
 8004490:	2143      	movs	r1, #67	; 0x43
 8004492:	4620      	mov	r0, r4
 8004494:	f7ff f8c6 	bl	8003624 <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8004498:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 800449c:	4618      	mov	r0, r3
 800449e:	f003 fadd 	bl	8007a5c <_ZNSt6vectorIcSaIcEED1Ev>
 80044a2:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 80044a6:	4618      	mov	r0, r3
 80044a8:	f017 f947 	bl	801b73a <_ZNSaIcED1Ev>
            this->operator[]('F').add_edge('D', Direction::LEFT, {'C', 'H'}, QUARTER_CIRCLE);
 80044ac:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80044b0:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 80044b4:	2146      	movs	r1, #70	; 0x46
 80044b6:	6818      	ldr	r0, [r3, #0]
 80044b8:	f002 fb20 	bl	8006afc <_ZN3jlb5GraphixEc>
 80044bc:	4604      	mov	r4, r0
 80044be:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80044c2:	f5a3 6303 	sub.w	r3, r3, #2096	; 0x830
 80044c6:	4ac4      	ldr	r2, [pc, #784]	; (80047d8 <_ZN3jlb5GraphC1Ev+0x1128>)
 80044c8:	8812      	ldrh	r2, [r2, #0]
 80044ca:	801a      	strh	r2, [r3, #0]
 80044cc:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80044d0:	f6a3 0338 	subw	r3, r3, #2104	; 0x838
 80044d4:	f507 6287 	add.w	r2, r7, #1080	; 0x438
 80044d8:	601a      	str	r2, [r3, #0]
 80044da:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80044de:	f6a3 0338 	subw	r3, r3, #2104	; 0x838
 80044e2:	2202      	movs	r2, #2
 80044e4:	605a      	str	r2, [r3, #4]
 80044e6:	f207 433c 	addw	r3, r7, #1084	; 0x43c
 80044ea:	4618      	mov	r0, r3
 80044ec:	f017 f923 	bl	801b736 <_ZNSaIcEC1Ev>
 80044f0:	f207 433c 	addw	r3, r7, #1084	; 0x43c
 80044f4:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 80044f8:	f6a2 0238 	subw	r2, r2, #2104	; 0x838
 80044fc:	f207 4024 	addw	r0, r7, #1060	; 0x424
 8004500:	ca06      	ldmia	r2, {r1, r2}
 8004502:	f003 faf8 	bl	8007af6 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8004506:	f207 4324 	addw	r3, r7, #1060	; 0x424
 800450a:	ed9f 0ab2 	vldr	s0, [pc, #712]	; 80047d4 <_ZN3jlb5GraphC1Ev+0x1124>
 800450e:	2200      	movs	r2, #0
 8004510:	2144      	movs	r1, #68	; 0x44
 8004512:	4620      	mov	r0, r4
 8004514:	f7ff f886 	bl	8003624 <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8004518:	f207 4324 	addw	r3, r7, #1060	; 0x424
 800451c:	4618      	mov	r0, r3
 800451e:	f003 fa9d 	bl	8007a5c <_ZNSt6vectorIcSaIcEED1Ev>
 8004522:	f207 433c 	addw	r3, r7, #1084	; 0x43c
 8004526:	4618      	mov	r0, r3
 8004528:	f017 f907 	bl	801b73a <_ZNSaIcED1Ev>
            this->operator[]('F').add_edge('G', Direction::STRAIGHT, {'C', 'H'}, 2.0f * UNIT);
 800452c:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8004530:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8004534:	2146      	movs	r1, #70	; 0x46
 8004536:	6818      	ldr	r0, [r3, #0]
 8004538:	f002 fae0 	bl	8006afc <_ZN3jlb5GraphixEc>
 800453c:	4604      	mov	r4, r0
 800453e:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8004542:	f6a3 0314 	subw	r3, r3, #2068	; 0x814
 8004546:	4aa4      	ldr	r2, [pc, #656]	; (80047d8 <_ZN3jlb5GraphC1Ev+0x1128>)
 8004548:	8812      	ldrh	r2, [r2, #0]
 800454a:	801a      	strh	r2, [r3, #0]
 800454c:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8004550:	f6a3 031c 	subw	r3, r3, #2076	; 0x81c
 8004554:	f207 4254 	addw	r2, r7, #1108	; 0x454
 8004558:	601a      	str	r2, [r3, #0]
 800455a:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800455e:	f6a3 031c 	subw	r3, r3, #2076	; 0x81c
 8004562:	2202      	movs	r2, #2
 8004564:	605a      	str	r2, [r3, #4]
 8004566:	f507 638b 	add.w	r3, r7, #1112	; 0x458
 800456a:	4618      	mov	r0, r3
 800456c:	f017 f8e3 	bl	801b736 <_ZNSaIcEC1Ev>
 8004570:	f507 638b 	add.w	r3, r7, #1112	; 0x458
 8004574:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8004578:	f6a2 021c 	subw	r2, r2, #2076	; 0x81c
 800457c:	f507 6088 	add.w	r0, r7, #1088	; 0x440
 8004580:	ca06      	ldmia	r2, {r1, r2}
 8004582:	f003 fab8 	bl	8007af6 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8004586:	f507 6388 	add.w	r3, r7, #1088	; 0x440
 800458a:	ed9f 0a94 	vldr	s0, [pc, #592]	; 80047dc <_ZN3jlb5GraphC1Ev+0x112c>
 800458e:	2202      	movs	r2, #2
 8004590:	2147      	movs	r1, #71	; 0x47
 8004592:	4620      	mov	r0, r4
 8004594:	f7ff f846 	bl	8003624 <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8004598:	f507 6388 	add.w	r3, r7, #1088	; 0x440
 800459c:	4618      	mov	r0, r3
 800459e:	f003 fa5d 	bl	8007a5c <_ZNSt6vectorIcSaIcEED1Ev>
 80045a2:	f507 638b 	add.w	r3, r7, #1112	; 0x458
 80045a6:	4618      	mov	r0, r3
 80045a8:	f017 f8c7 	bl	801b73a <_ZNSaIcED1Ev>
            this->operator[]('F').add_edge('I', Direction::RIGHT, {'C', 'H'}, QUARTER_CIRCLE);
 80045ac:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80045b0:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 80045b4:	2146      	movs	r1, #70	; 0x46
 80045b6:	6818      	ldr	r0, [r3, #0]
 80045b8:	f002 faa0 	bl	8006afc <_ZN3jlb5GraphixEc>
 80045bc:	4604      	mov	r4, r0
 80045be:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80045c2:	f5a3 63ff 	sub.w	r3, r3, #2040	; 0x7f8
 80045c6:	4a84      	ldr	r2, [pc, #528]	; (80047d8 <_ZN3jlb5GraphC1Ev+0x1128>)
 80045c8:	8812      	ldrh	r2, [r2, #0]
 80045ca:	801a      	strh	r2, [r3, #0]
 80045cc:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80045d0:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 80045d4:	f507 628e 	add.w	r2, r7, #1136	; 0x470
 80045d8:	601a      	str	r2, [r3, #0]
 80045da:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80045de:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 80045e2:	2202      	movs	r2, #2
 80045e4:	605a      	str	r2, [r3, #4]
 80045e6:	f207 4374 	addw	r3, r7, #1140	; 0x474
 80045ea:	4618      	mov	r0, r3
 80045ec:	f017 f8a3 	bl	801b736 <_ZNSaIcEC1Ev>
 80045f0:	f207 4374 	addw	r3, r7, #1140	; 0x474
 80045f4:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 80045f8:	f5a2 6200 	sub.w	r2, r2, #2048	; 0x800
 80045fc:	f207 405c 	addw	r0, r7, #1116	; 0x45c
 8004600:	ca06      	ldmia	r2, {r1, r2}
 8004602:	f003 fa78 	bl	8007af6 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8004606:	f207 435c 	addw	r3, r7, #1116	; 0x45c
 800460a:	ed9f 0a72 	vldr	s0, [pc, #456]	; 80047d4 <_ZN3jlb5GraphC1Ev+0x1124>
 800460e:	2201      	movs	r2, #1
 8004610:	2149      	movs	r1, #73	; 0x49
 8004612:	4620      	mov	r0, r4
 8004614:	f7ff f806 	bl	8003624 <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8004618:	f207 435c 	addw	r3, r7, #1116	; 0x45c
 800461c:	4618      	mov	r0, r3
 800461e:	f003 fa1d 	bl	8007a5c <_ZNSt6vectorIcSaIcEED1Ev>
 8004622:	f207 4374 	addw	r3, r7, #1140	; 0x474
 8004626:	4618      	mov	r0, r3
 8004628:	f017 f887 	bl	801b73a <_ZNSaIcED1Ev>
            this->operator[]('F').add_edge('H', Direction::LEFT, {'D', 'G', 'I'}, QUARTER_CIRCLE);
 800462c:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8004630:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8004634:	2146      	movs	r1, #70	; 0x46
 8004636:	6818      	ldr	r0, [r3, #0]
 8004638:	f002 fa60 	bl	8006afc <_ZN3jlb5GraphixEc>
 800463c:	4604      	mov	r4, r0
 800463e:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8004642:	f2a3 73dc 	subw	r3, r3, #2012	; 0x7dc
 8004646:	4a62      	ldr	r2, [pc, #392]	; (80047d0 <_ZN3jlb5GraphC1Ev+0x1120>)
 8004648:	6812      	ldr	r2, [r2, #0]
 800464a:	4611      	mov	r1, r2
 800464c:	8019      	strh	r1, [r3, #0]
 800464e:	3302      	adds	r3, #2
 8004650:	0c12      	lsrs	r2, r2, #16
 8004652:	701a      	strb	r2, [r3, #0]
 8004654:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8004658:	f2a3 73e4 	subw	r3, r3, #2020	; 0x7e4
 800465c:	f207 428c 	addw	r2, r7, #1164	; 0x48c
 8004660:	601a      	str	r2, [r3, #0]
 8004662:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8004666:	f2a3 73e4 	subw	r3, r3, #2020	; 0x7e4
 800466a:	2203      	movs	r2, #3
 800466c:	605a      	str	r2, [r3, #4]
 800466e:	f507 6392 	add.w	r3, r7, #1168	; 0x490
 8004672:	4618      	mov	r0, r3
 8004674:	f017 f85f 	bl	801b736 <_ZNSaIcEC1Ev>
 8004678:	f507 6392 	add.w	r3, r7, #1168	; 0x490
 800467c:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8004680:	f2a2 72e4 	subw	r2, r2, #2020	; 0x7e4
 8004684:	f507 608f 	add.w	r0, r7, #1144	; 0x478
 8004688:	ca06      	ldmia	r2, {r1, r2}
 800468a:	f003 fa34 	bl	8007af6 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 800468e:	f507 638f 	add.w	r3, r7, #1144	; 0x478
 8004692:	ed9f 0a50 	vldr	s0, [pc, #320]	; 80047d4 <_ZN3jlb5GraphC1Ev+0x1124>
 8004696:	2200      	movs	r2, #0
 8004698:	2148      	movs	r1, #72	; 0x48
 800469a:	4620      	mov	r0, r4
 800469c:	f7fe ffc2 	bl	8003624 <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 80046a0:	f507 638f 	add.w	r3, r7, #1144	; 0x478
 80046a4:	4618      	mov	r0, r3
 80046a6:	f003 f9d9 	bl	8007a5c <_ZNSt6vectorIcSaIcEED1Ev>
 80046aa:	f507 6392 	add.w	r3, r7, #1168	; 0x490
 80046ae:	4618      	mov	r0, r3
 80046b0:	f017 f843 	bl	801b73a <_ZNSaIcED1Ev>
            this->operator[]('G').add_edge('F', Direction::STRAIGHT, {'E', 'J'}, 2.0f * UNIT);
 80046b4:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80046b8:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 80046bc:	2147      	movs	r1, #71	; 0x47
 80046be:	6818      	ldr	r0, [r3, #0]
 80046c0:	f002 fa1c 	bl	8006afc <_ZN3jlb5GraphixEc>
 80046c4:	4604      	mov	r4, r0
 80046c6:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80046ca:	f5a3 63f8 	sub.w	r3, r3, #1984	; 0x7c0
 80046ce:	4a44      	ldr	r2, [pc, #272]	; (80047e0 <_ZN3jlb5GraphC1Ev+0x1130>)
 80046d0:	8812      	ldrh	r2, [r2, #0]
 80046d2:	801a      	strh	r2, [r3, #0]
 80046d4:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80046d8:	f5a3 63f9 	sub.w	r3, r3, #1992	; 0x7c8
 80046dc:	f507 6295 	add.w	r2, r7, #1192	; 0x4a8
 80046e0:	601a      	str	r2, [r3, #0]
 80046e2:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80046e6:	f5a3 63f9 	sub.w	r3, r3, #1992	; 0x7c8
 80046ea:	2202      	movs	r2, #2
 80046ec:	605a      	str	r2, [r3, #4]
 80046ee:	f207 43ac 	addw	r3, r7, #1196	; 0x4ac
 80046f2:	4618      	mov	r0, r3
 80046f4:	f017 f81f 	bl	801b736 <_ZNSaIcEC1Ev>
 80046f8:	f207 43ac 	addw	r3, r7, #1196	; 0x4ac
 80046fc:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8004700:	f5a2 62f9 	sub.w	r2, r2, #1992	; 0x7c8
 8004704:	f207 4094 	addw	r0, r7, #1172	; 0x494
 8004708:	ca06      	ldmia	r2, {r1, r2}
 800470a:	f003 f9f4 	bl	8007af6 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 800470e:	f207 4394 	addw	r3, r7, #1172	; 0x494
 8004712:	ed9f 0a32 	vldr	s0, [pc, #200]	; 80047dc <_ZN3jlb5GraphC1Ev+0x112c>
 8004716:	2202      	movs	r2, #2
 8004718:	2146      	movs	r1, #70	; 0x46
 800471a:	4620      	mov	r0, r4
 800471c:	f7fe ff82 	bl	8003624 <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8004720:	f207 4394 	addw	r3, r7, #1172	; 0x494
 8004724:	4618      	mov	r0, r3
 8004726:	f003 f999 	bl	8007a5c <_ZNSt6vectorIcSaIcEED1Ev>
 800472a:	f207 43ac 	addw	r3, r7, #1196	; 0x4ac
 800472e:	4618      	mov	r0, r3
 8004730:	f017 f803 	bl	801b73a <_ZNSaIcED1Ev>
            this->operator[]('G').add_edge('D', Direction::RIGHT, {'E', 'J'}, QUARTER_CIRCLE);
 8004734:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8004738:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 800473c:	2147      	movs	r1, #71	; 0x47
 800473e:	6818      	ldr	r0, [r3, #0]
 8004740:	f002 f9dc 	bl	8006afc <_ZN3jlb5GraphixEc>
 8004744:	4604      	mov	r4, r0
 8004746:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800474a:	f2a3 73a4 	subw	r3, r3, #1956	; 0x7a4
 800474e:	4a24      	ldr	r2, [pc, #144]	; (80047e0 <_ZN3jlb5GraphC1Ev+0x1130>)
 8004750:	8812      	ldrh	r2, [r2, #0]
 8004752:	801a      	strh	r2, [r3, #0]
 8004754:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8004758:	f2a3 73ac 	subw	r3, r3, #1964	; 0x7ac
 800475c:	f207 42c4 	addw	r2, r7, #1220	; 0x4c4
 8004760:	601a      	str	r2, [r3, #0]
 8004762:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8004766:	f2a3 73ac 	subw	r3, r3, #1964	; 0x7ac
 800476a:	2202      	movs	r2, #2
 800476c:	605a      	str	r2, [r3, #4]
 800476e:	f507 6399 	add.w	r3, r7, #1224	; 0x4c8
 8004772:	4618      	mov	r0, r3
 8004774:	f016 ffdf 	bl	801b736 <_ZNSaIcEC1Ev>
 8004778:	f507 6399 	add.w	r3, r7, #1224	; 0x4c8
 800477c:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8004780:	f2a2 72ac 	subw	r2, r2, #1964	; 0x7ac
 8004784:	f507 6096 	add.w	r0, r7, #1200	; 0x4b0
 8004788:	ca06      	ldmia	r2, {r1, r2}
 800478a:	f003 f9b4 	bl	8007af6 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 800478e:	f507 6396 	add.w	r3, r7, #1200	; 0x4b0
 8004792:	ed9f 0a10 	vldr	s0, [pc, #64]	; 80047d4 <_ZN3jlb5GraphC1Ev+0x1124>
 8004796:	2201      	movs	r2, #1
 8004798:	2144      	movs	r1, #68	; 0x44
 800479a:	4620      	mov	r0, r4
 800479c:	f7fe ff42 	bl	8003624 <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 80047a0:	f507 6396 	add.w	r3, r7, #1200	; 0x4b0
 80047a4:	4618      	mov	r0, r3
 80047a6:	f003 f959 	bl	8007a5c <_ZNSt6vectorIcSaIcEED1Ev>
 80047aa:	f507 6399 	add.w	r3, r7, #1224	; 0x4c8
 80047ae:	4618      	mov	r0, r3
 80047b0:	f016 ffc3 	bl	801b73a <_ZNSaIcED1Ev>
            this->operator[]('G').add_edge('E', Direction::LEFT, {'D', 'F', 'I'}, QUARTER_CIRCLE);
 80047b4:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80047b8:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 80047bc:	2147      	movs	r1, #71	; 0x47
 80047be:	6818      	ldr	r0, [r3, #0]
 80047c0:	f002 f99c 	bl	8006afc <_ZN3jlb5GraphixEc>
 80047c4:	4604      	mov	r4, r0
 80047c6:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80047ca:	f5a3 63f1 	sub.w	r3, r3, #1928	; 0x788
 80047ce:	e009      	b.n	80047e4 <_ZN3jlb5GraphC1Ev+0x1134>
 80047d0:	0801f080 	.word	0x0801f080
 80047d4:	3f71463a 	.word	0x3f71463a
 80047d8:	0801f084 	.word	0x0801f084
 80047dc:	3f99999a 	.word	0x3f99999a
 80047e0:	0801f088 	.word	0x0801f088
 80047e4:	4ae6      	ldr	r2, [pc, #920]	; (8004b80 <_ZN3jlb5GraphC1Ev+0x14d0>)
 80047e6:	6812      	ldr	r2, [r2, #0]
 80047e8:	4611      	mov	r1, r2
 80047ea:	8019      	strh	r1, [r3, #0]
 80047ec:	3302      	adds	r3, #2
 80047ee:	0c12      	lsrs	r2, r2, #16
 80047f0:	701a      	strb	r2, [r3, #0]
 80047f2:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80047f6:	f5a3 63f2 	sub.w	r3, r3, #1936	; 0x790
 80047fa:	f507 629c 	add.w	r2, r7, #1248	; 0x4e0
 80047fe:	601a      	str	r2, [r3, #0]
 8004800:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8004804:	f5a3 63f2 	sub.w	r3, r3, #1936	; 0x790
 8004808:	2203      	movs	r2, #3
 800480a:	605a      	str	r2, [r3, #4]
 800480c:	f207 43e4 	addw	r3, r7, #1252	; 0x4e4
 8004810:	4618      	mov	r0, r3
 8004812:	f016 ff90 	bl	801b736 <_ZNSaIcEC1Ev>
 8004816:	f207 43e4 	addw	r3, r7, #1252	; 0x4e4
 800481a:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 800481e:	f5a2 62f2 	sub.w	r2, r2, #1936	; 0x790
 8004822:	f207 40cc 	addw	r0, r7, #1228	; 0x4cc
 8004826:	ca06      	ldmia	r2, {r1, r2}
 8004828:	f003 f965 	bl	8007af6 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 800482c:	f207 43cc 	addw	r3, r7, #1228	; 0x4cc
 8004830:	ed9f 0ad4 	vldr	s0, [pc, #848]	; 8004b84 <_ZN3jlb5GraphC1Ev+0x14d4>
 8004834:	2200      	movs	r2, #0
 8004836:	2145      	movs	r1, #69	; 0x45
 8004838:	4620      	mov	r0, r4
 800483a:	f7fe fef3 	bl	8003624 <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 800483e:	f207 43cc 	addw	r3, r7, #1228	; 0x4cc
 8004842:	4618      	mov	r0, r3
 8004844:	f003 f90a 	bl	8007a5c <_ZNSt6vectorIcSaIcEED1Ev>
 8004848:	f207 43e4 	addw	r3, r7, #1252	; 0x4e4
 800484c:	4618      	mov	r0, r3
 800484e:	f016 ff74 	bl	801b73a <_ZNSaIcED1Ev>
            this->operator[]('G').add_edge('J', Direction::RIGHT, {'D', 'F', 'I'}, QUARTER_CIRCLE);
 8004852:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8004856:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 800485a:	2147      	movs	r1, #71	; 0x47
 800485c:	6818      	ldr	r0, [r3, #0]
 800485e:	f002 f94d 	bl	8006afc <_ZN3jlb5GraphixEc>
 8004862:	4604      	mov	r4, r0
 8004864:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8004868:	f2a3 736c 	subw	r3, r3, #1900	; 0x76c
 800486c:	4ac4      	ldr	r2, [pc, #784]	; (8004b80 <_ZN3jlb5GraphC1Ev+0x14d0>)
 800486e:	6812      	ldr	r2, [r2, #0]
 8004870:	4611      	mov	r1, r2
 8004872:	8019      	strh	r1, [r3, #0]
 8004874:	3302      	adds	r3, #2
 8004876:	0c12      	lsrs	r2, r2, #16
 8004878:	701a      	strb	r2, [r3, #0]
 800487a:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800487e:	f2a3 7374 	subw	r3, r3, #1908	; 0x774
 8004882:	f207 42fc 	addw	r2, r7, #1276	; 0x4fc
 8004886:	601a      	str	r2, [r3, #0]
 8004888:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800488c:	f2a3 7374 	subw	r3, r3, #1908	; 0x774
 8004890:	2203      	movs	r2, #3
 8004892:	605a      	str	r2, [r3, #4]
 8004894:	f507 63a0 	add.w	r3, r7, #1280	; 0x500
 8004898:	4618      	mov	r0, r3
 800489a:	f016 ff4c 	bl	801b736 <_ZNSaIcEC1Ev>
 800489e:	f507 63a0 	add.w	r3, r7, #1280	; 0x500
 80048a2:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 80048a6:	f2a2 7274 	subw	r2, r2, #1908	; 0x774
 80048aa:	f507 609d 	add.w	r0, r7, #1256	; 0x4e8
 80048ae:	ca06      	ldmia	r2, {r1, r2}
 80048b0:	f003 f921 	bl	8007af6 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 80048b4:	f507 639d 	add.w	r3, r7, #1256	; 0x4e8
 80048b8:	ed9f 0ab2 	vldr	s0, [pc, #712]	; 8004b84 <_ZN3jlb5GraphC1Ev+0x14d4>
 80048bc:	2201      	movs	r2, #1
 80048be:	214a      	movs	r1, #74	; 0x4a
 80048c0:	4620      	mov	r0, r4
 80048c2:	f7fe feaf 	bl	8003624 <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 80048c6:	f507 639d 	add.w	r3, r7, #1256	; 0x4e8
 80048ca:	4618      	mov	r0, r3
 80048cc:	f003 f8c6 	bl	8007a5c <_ZNSt6vectorIcSaIcEED1Ev>
 80048d0:	f507 63a0 	add.w	r3, r7, #1280	; 0x500
 80048d4:	4618      	mov	r0, r3
 80048d6:	f016 ff30 	bl	801b73a <_ZNSaIcED1Ev>
            this->operator[]('G').add_edge('I', Direction::LEFT, {'E', 'J'}, QUARTER_CIRCLE);
 80048da:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80048de:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 80048e2:	2147      	movs	r1, #71	; 0x47
 80048e4:	6818      	ldr	r0, [r3, #0]
 80048e6:	f002 f909 	bl	8006afc <_ZN3jlb5GraphixEc>
 80048ea:	4604      	mov	r4, r0
 80048ec:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80048f0:	f5a3 63ea 	sub.w	r3, r3, #1872	; 0x750
 80048f4:	4aa4      	ldr	r2, [pc, #656]	; (8004b88 <_ZN3jlb5GraphC1Ev+0x14d8>)
 80048f6:	8812      	ldrh	r2, [r2, #0]
 80048f8:	801a      	strh	r2, [r3, #0]
 80048fa:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80048fe:	f5a3 63eb 	sub.w	r3, r3, #1880	; 0x758
 8004902:	f507 62a3 	add.w	r2, r7, #1304	; 0x518
 8004906:	601a      	str	r2, [r3, #0]
 8004908:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800490c:	f5a3 63eb 	sub.w	r3, r3, #1880	; 0x758
 8004910:	2202      	movs	r2, #2
 8004912:	605a      	str	r2, [r3, #4]
 8004914:	f207 531c 	addw	r3, r7, #1308	; 0x51c
 8004918:	4618      	mov	r0, r3
 800491a:	f016 ff0c 	bl	801b736 <_ZNSaIcEC1Ev>
 800491e:	f207 531c 	addw	r3, r7, #1308	; 0x51c
 8004922:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8004926:	f5a2 62eb 	sub.w	r2, r2, #1880	; 0x758
 800492a:	f207 5004 	addw	r0, r7, #1284	; 0x504
 800492e:	ca06      	ldmia	r2, {r1, r2}
 8004930:	f003 f8e1 	bl	8007af6 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8004934:	f207 5304 	addw	r3, r7, #1284	; 0x504
 8004938:	ed9f 0a92 	vldr	s0, [pc, #584]	; 8004b84 <_ZN3jlb5GraphC1Ev+0x14d4>
 800493c:	2200      	movs	r2, #0
 800493e:	2149      	movs	r1, #73	; 0x49
 8004940:	4620      	mov	r0, r4
 8004942:	f7fe fe6f 	bl	8003624 <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8004946:	f207 5304 	addw	r3, r7, #1284	; 0x504
 800494a:	4618      	mov	r0, r3
 800494c:	f003 f886 	bl	8007a5c <_ZNSt6vectorIcSaIcEED1Ev>
 8004950:	f207 531c 	addw	r3, r7, #1308	; 0x51c
 8004954:	4618      	mov	r0, r3
 8004956:	f016 fef0 	bl	801b73a <_ZNSaIcED1Ev>
            this->operator[]('H').add_edge('F', Direction::RIGHT, {'K', 'M'}, QUARTER_CIRCLE);
 800495a:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800495e:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8004962:	2148      	movs	r1, #72	; 0x48
 8004964:	6818      	ldr	r0, [r3, #0]
 8004966:	f002 f8c9 	bl	8006afc <_ZN3jlb5GraphixEc>
 800496a:	4604      	mov	r4, r0
 800496c:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8004970:	f2a3 7334 	subw	r3, r3, #1844	; 0x734
 8004974:	4a85      	ldr	r2, [pc, #532]	; (8004b8c <_ZN3jlb5GraphC1Ev+0x14dc>)
 8004976:	8812      	ldrh	r2, [r2, #0]
 8004978:	801a      	strh	r2, [r3, #0]
 800497a:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800497e:	f2a3 733c 	subw	r3, r3, #1852	; 0x73c
 8004982:	f207 5234 	addw	r2, r7, #1332	; 0x534
 8004986:	601a      	str	r2, [r3, #0]
 8004988:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800498c:	f2a3 733c 	subw	r3, r3, #1852	; 0x73c
 8004990:	2202      	movs	r2, #2
 8004992:	605a      	str	r2, [r3, #4]
 8004994:	f507 63a7 	add.w	r3, r7, #1336	; 0x538
 8004998:	4618      	mov	r0, r3
 800499a:	f016 fecc 	bl	801b736 <_ZNSaIcEC1Ev>
 800499e:	f507 63a7 	add.w	r3, r7, #1336	; 0x538
 80049a2:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 80049a6:	f2a2 723c 	subw	r2, r2, #1852	; 0x73c
 80049aa:	f507 60a4 	add.w	r0, r7, #1312	; 0x520
 80049ae:	ca06      	ldmia	r2, {r1, r2}
 80049b0:	f003 f8a1 	bl	8007af6 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 80049b4:	f507 63a4 	add.w	r3, r7, #1312	; 0x520
 80049b8:	ed9f 0a72 	vldr	s0, [pc, #456]	; 8004b84 <_ZN3jlb5GraphC1Ev+0x14d4>
 80049bc:	2201      	movs	r2, #1
 80049be:	2146      	movs	r1, #70	; 0x46
 80049c0:	4620      	mov	r0, r4
 80049c2:	f7fe fe2f 	bl	8003624 <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 80049c6:	f507 63a4 	add.w	r3, r7, #1312	; 0x520
 80049ca:	4618      	mov	r0, r3
 80049cc:	f003 f846 	bl	8007a5c <_ZNSt6vectorIcSaIcEED1Ev>
 80049d0:	f507 63a7 	add.w	r3, r7, #1336	; 0x538
 80049d4:	4618      	mov	r0, r3
 80049d6:	f016 feb0 	bl	801b73a <_ZNSaIcED1Ev>
            this->operator[]('H').add_edge('K', Direction::LEFT, {'F'}, QUARTER_CIRCLE);
 80049da:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80049de:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 80049e2:	2148      	movs	r1, #72	; 0x48
 80049e4:	6818      	ldr	r0, [r3, #0]
 80049e6:	f002 f889 	bl	8006afc <_ZN3jlb5GraphixEc>
 80049ea:	4604      	mov	r4, r0
 80049ec:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80049f0:	f5a3 63e3 	sub.w	r3, r3, #1816	; 0x718
 80049f4:	2246      	movs	r2, #70	; 0x46
 80049f6:	701a      	strb	r2, [r3, #0]
 80049f8:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80049fc:	f5a3 63e4 	sub.w	r3, r3, #1824	; 0x720
 8004a00:	f507 62aa 	add.w	r2, r7, #1360	; 0x550
 8004a04:	601a      	str	r2, [r3, #0]
 8004a06:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8004a0a:	f5a3 63e4 	sub.w	r3, r3, #1824	; 0x720
 8004a0e:	2201      	movs	r2, #1
 8004a10:	605a      	str	r2, [r3, #4]
 8004a12:	f207 5354 	addw	r3, r7, #1364	; 0x554
 8004a16:	4618      	mov	r0, r3
 8004a18:	f016 fe8d 	bl	801b736 <_ZNSaIcEC1Ev>
 8004a1c:	f207 5354 	addw	r3, r7, #1364	; 0x554
 8004a20:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8004a24:	f5a2 62e4 	sub.w	r2, r2, #1824	; 0x720
 8004a28:	f207 503c 	addw	r0, r7, #1340	; 0x53c
 8004a2c:	ca06      	ldmia	r2, {r1, r2}
 8004a2e:	f003 f862 	bl	8007af6 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8004a32:	f207 533c 	addw	r3, r7, #1340	; 0x53c
 8004a36:	ed9f 0a53 	vldr	s0, [pc, #332]	; 8004b84 <_ZN3jlb5GraphC1Ev+0x14d4>
 8004a3a:	2200      	movs	r2, #0
 8004a3c:	214b      	movs	r1, #75	; 0x4b
 8004a3e:	4620      	mov	r0, r4
 8004a40:	f7fe fdf0 	bl	8003624 <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8004a44:	f207 533c 	addw	r3, r7, #1340	; 0x53c
 8004a48:	4618      	mov	r0, r3
 8004a4a:	f003 f807 	bl	8007a5c <_ZNSt6vectorIcSaIcEED1Ev>
 8004a4e:	f207 5354 	addw	r3, r7, #1364	; 0x554
 8004a52:	4618      	mov	r0, r3
 8004a54:	f016 fe71 	bl	801b73a <_ZNSaIcED1Ev>
            this->operator[]('H').add_edge('M', Direction::STRAIGHT, {'F'}, 2.0f * UNIT);
 8004a58:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8004a5c:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8004a60:	2148      	movs	r1, #72	; 0x48
 8004a62:	6818      	ldr	r0, [r3, #0]
 8004a64:	f002 f84a 	bl	8006afc <_ZN3jlb5GraphixEc>
 8004a68:	4604      	mov	r4, r0
 8004a6a:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8004a6e:	f2a3 63fc 	subw	r3, r3, #1788	; 0x6fc
 8004a72:	2246      	movs	r2, #70	; 0x46
 8004a74:	701a      	strb	r2, [r3, #0]
 8004a76:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8004a7a:	f2a3 7304 	subw	r3, r3, #1796	; 0x704
 8004a7e:	f207 526c 	addw	r2, r7, #1388	; 0x56c
 8004a82:	601a      	str	r2, [r3, #0]
 8004a84:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8004a88:	f2a3 7304 	subw	r3, r3, #1796	; 0x704
 8004a8c:	2201      	movs	r2, #1
 8004a8e:	605a      	str	r2, [r3, #4]
 8004a90:	f507 63ae 	add.w	r3, r7, #1392	; 0x570
 8004a94:	4618      	mov	r0, r3
 8004a96:	f016 fe4e 	bl	801b736 <_ZNSaIcEC1Ev>
 8004a9a:	f507 63ae 	add.w	r3, r7, #1392	; 0x570
 8004a9e:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8004aa2:	f2a2 7204 	subw	r2, r2, #1796	; 0x704
 8004aa6:	f507 60ab 	add.w	r0, r7, #1368	; 0x558
 8004aaa:	ca06      	ldmia	r2, {r1, r2}
 8004aac:	f003 f823 	bl	8007af6 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8004ab0:	f507 63ab 	add.w	r3, r7, #1368	; 0x558
 8004ab4:	ed9f 0a37 	vldr	s0, [pc, #220]	; 8004b94 <_ZN3jlb5GraphC1Ev+0x14e4>
 8004ab8:	2202      	movs	r2, #2
 8004aba:	214d      	movs	r1, #77	; 0x4d
 8004abc:	4620      	mov	r0, r4
 8004abe:	f7fe fdb1 	bl	8003624 <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8004ac2:	f507 63ab 	add.w	r3, r7, #1368	; 0x558
 8004ac6:	4618      	mov	r0, r3
 8004ac8:	f002 ffc8 	bl	8007a5c <_ZNSt6vectorIcSaIcEED1Ev>
 8004acc:	f507 63ae 	add.w	r3, r7, #1392	; 0x570
 8004ad0:	4618      	mov	r0, r3
 8004ad2:	f016 fe32 	bl	801b73a <_ZNSaIcED1Ev>
            this->operator[]('I').add_edge('F', Direction::LEFT, {'K', 'L', 'N'}, QUARTER_CIRCLE);
 8004ad6:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8004ada:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8004ade:	2149      	movs	r1, #73	; 0x49
 8004ae0:	6818      	ldr	r0, [r3, #0]
 8004ae2:	f002 f80b 	bl	8006afc <_ZN3jlb5GraphixEc>
 8004ae6:	4604      	mov	r4, r0
 8004ae8:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8004aec:	f5a3 63dc 	sub.w	r3, r3, #1760	; 0x6e0
 8004af0:	4a27      	ldr	r2, [pc, #156]	; (8004b90 <_ZN3jlb5GraphC1Ev+0x14e0>)
 8004af2:	6812      	ldr	r2, [r2, #0]
 8004af4:	4611      	mov	r1, r2
 8004af6:	8019      	strh	r1, [r3, #0]
 8004af8:	3302      	adds	r3, #2
 8004afa:	0c12      	lsrs	r2, r2, #16
 8004afc:	701a      	strb	r2, [r3, #0]
 8004afe:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8004b02:	f5a3 63dd 	sub.w	r3, r3, #1768	; 0x6e8
 8004b06:	f507 62b1 	add.w	r2, r7, #1416	; 0x588
 8004b0a:	601a      	str	r2, [r3, #0]
 8004b0c:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8004b10:	f5a3 63dd 	sub.w	r3, r3, #1768	; 0x6e8
 8004b14:	2203      	movs	r2, #3
 8004b16:	605a      	str	r2, [r3, #4]
 8004b18:	f207 538c 	addw	r3, r7, #1420	; 0x58c
 8004b1c:	4618      	mov	r0, r3
 8004b1e:	f016 fe0a 	bl	801b736 <_ZNSaIcEC1Ev>
 8004b22:	f207 538c 	addw	r3, r7, #1420	; 0x58c
 8004b26:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8004b2a:	f5a2 62dd 	sub.w	r2, r2, #1768	; 0x6e8
 8004b2e:	f207 5074 	addw	r0, r7, #1396	; 0x574
 8004b32:	ca06      	ldmia	r2, {r1, r2}
 8004b34:	f002 ffdf 	bl	8007af6 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8004b38:	f207 5374 	addw	r3, r7, #1396	; 0x574
 8004b3c:	ed9f 0a11 	vldr	s0, [pc, #68]	; 8004b84 <_ZN3jlb5GraphC1Ev+0x14d4>
 8004b40:	2200      	movs	r2, #0
 8004b42:	2146      	movs	r1, #70	; 0x46
 8004b44:	4620      	mov	r0, r4
 8004b46:	f7fe fd6d 	bl	8003624 <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8004b4a:	f207 5374 	addw	r3, r7, #1396	; 0x574
 8004b4e:	4618      	mov	r0, r3
 8004b50:	f002 ff84 	bl	8007a5c <_ZNSt6vectorIcSaIcEED1Ev>
 8004b54:	f207 538c 	addw	r3, r7, #1420	; 0x58c
 8004b58:	4618      	mov	r0, r3
 8004b5a:	f016 fdee 	bl	801b73a <_ZNSaIcED1Ev>
            this->operator[]('I').add_edge('D', Direction::STRAIGHT, {'K', 'L', 'N'}, 2.0f * UNIT);
 8004b5e:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8004b62:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8004b66:	2149      	movs	r1, #73	; 0x49
 8004b68:	6818      	ldr	r0, [r3, #0]
 8004b6a:	f001 ffc7 	bl	8006afc <_ZN3jlb5GraphixEc>
 8004b6e:	4604      	mov	r4, r0
 8004b70:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8004b74:	f2a3 63c4 	subw	r3, r3, #1732	; 0x6c4
 8004b78:	4a05      	ldr	r2, [pc, #20]	; (8004b90 <_ZN3jlb5GraphC1Ev+0x14e0>)
 8004b7a:	6812      	ldr	r2, [r2, #0]
 8004b7c:	4611      	mov	r1, r2
 8004b7e:	e00b      	b.n	8004b98 <_ZN3jlb5GraphC1Ev+0x14e8>
 8004b80:	0801f08c 	.word	0x0801f08c
 8004b84:	3f71463a 	.word	0x3f71463a
 8004b88:	0801f088 	.word	0x0801f088
 8004b8c:	0801f090 	.word	0x0801f090
 8004b90:	0801f094 	.word	0x0801f094
 8004b94:	3f99999a 	.word	0x3f99999a
 8004b98:	8019      	strh	r1, [r3, #0]
 8004b9a:	3302      	adds	r3, #2
 8004b9c:	0c12      	lsrs	r2, r2, #16
 8004b9e:	701a      	strb	r2, [r3, #0]
 8004ba0:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8004ba4:	f2a3 63cc 	subw	r3, r3, #1740	; 0x6cc
 8004ba8:	f207 52a4 	addw	r2, r7, #1444	; 0x5a4
 8004bac:	601a      	str	r2, [r3, #0]
 8004bae:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8004bb2:	f2a3 63cc 	subw	r3, r3, #1740	; 0x6cc
 8004bb6:	2203      	movs	r2, #3
 8004bb8:	605a      	str	r2, [r3, #4]
 8004bba:	f507 63b5 	add.w	r3, r7, #1448	; 0x5a8
 8004bbe:	4618      	mov	r0, r3
 8004bc0:	f016 fdb9 	bl	801b736 <_ZNSaIcEC1Ev>
 8004bc4:	f507 63b5 	add.w	r3, r7, #1448	; 0x5a8
 8004bc8:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8004bcc:	f2a2 62cc 	subw	r2, r2, #1740	; 0x6cc
 8004bd0:	f507 60b2 	add.w	r0, r7, #1424	; 0x590
 8004bd4:	ca06      	ldmia	r2, {r1, r2}
 8004bd6:	f002 ff8e 	bl	8007af6 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8004bda:	f507 63b2 	add.w	r3, r7, #1424	; 0x590
 8004bde:	ed1f 0a13 	vldr	s0, [pc, #-76]	; 8004b94 <_ZN3jlb5GraphC1Ev+0x14e4>
 8004be2:	2202      	movs	r2, #2
 8004be4:	2144      	movs	r1, #68	; 0x44
 8004be6:	4620      	mov	r0, r4
 8004be8:	f7fe fd1c 	bl	8003624 <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8004bec:	f507 63b2 	add.w	r3, r7, #1424	; 0x590
 8004bf0:	4618      	mov	r0, r3
 8004bf2:	f002 ff33 	bl	8007a5c <_ZNSt6vectorIcSaIcEED1Ev>
 8004bf6:	f507 63b5 	add.w	r3, r7, #1448	; 0x5a8
 8004bfa:	4618      	mov	r0, r3
 8004bfc:	f016 fd9d 	bl	801b73a <_ZNSaIcED1Ev>
            this->operator[]('I').add_edge('G', Direction::RIGHT, {'K', 'L', 'N'}, QUARTER_CIRCLE);
 8004c00:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8004c04:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8004c08:	2149      	movs	r1, #73	; 0x49
 8004c0a:	6818      	ldr	r0, [r3, #0]
 8004c0c:	f001 ff76 	bl	8006afc <_ZN3jlb5GraphixEc>
 8004c10:	4604      	mov	r4, r0
 8004c12:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8004c16:	f5a3 63d5 	sub.w	r3, r3, #1704	; 0x6a8
 8004c1a:	4ae7      	ldr	r2, [pc, #924]	; (8004fb8 <_ZN3jlb5GraphC1Ev+0x1908>)
 8004c1c:	6812      	ldr	r2, [r2, #0]
 8004c1e:	4611      	mov	r1, r2
 8004c20:	8019      	strh	r1, [r3, #0]
 8004c22:	3302      	adds	r3, #2
 8004c24:	0c12      	lsrs	r2, r2, #16
 8004c26:	701a      	strb	r2, [r3, #0]
 8004c28:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8004c2c:	f5a3 63d6 	sub.w	r3, r3, #1712	; 0x6b0
 8004c30:	f507 62b8 	add.w	r2, r7, #1472	; 0x5c0
 8004c34:	601a      	str	r2, [r3, #0]
 8004c36:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8004c3a:	f5a3 63d6 	sub.w	r3, r3, #1712	; 0x6b0
 8004c3e:	2203      	movs	r2, #3
 8004c40:	605a      	str	r2, [r3, #4]
 8004c42:	f207 53c4 	addw	r3, r7, #1476	; 0x5c4
 8004c46:	4618      	mov	r0, r3
 8004c48:	f016 fd75 	bl	801b736 <_ZNSaIcEC1Ev>
 8004c4c:	f207 53c4 	addw	r3, r7, #1476	; 0x5c4
 8004c50:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8004c54:	f5a2 62d6 	sub.w	r2, r2, #1712	; 0x6b0
 8004c58:	f207 50ac 	addw	r0, r7, #1452	; 0x5ac
 8004c5c:	ca06      	ldmia	r2, {r1, r2}
 8004c5e:	f002 ff4a 	bl	8007af6 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8004c62:	f207 53ac 	addw	r3, r7, #1452	; 0x5ac
 8004c66:	ed9f 0ad5 	vldr	s0, [pc, #852]	; 8004fbc <_ZN3jlb5GraphC1Ev+0x190c>
 8004c6a:	2201      	movs	r2, #1
 8004c6c:	2147      	movs	r1, #71	; 0x47
 8004c6e:	4620      	mov	r0, r4
 8004c70:	f7fe fcd8 	bl	8003624 <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8004c74:	f207 53ac 	addw	r3, r7, #1452	; 0x5ac
 8004c78:	4618      	mov	r0, r3
 8004c7a:	f002 feef 	bl	8007a5c <_ZNSt6vectorIcSaIcEED1Ev>
 8004c7e:	f207 53c4 	addw	r3, r7, #1476	; 0x5c4
 8004c82:	4618      	mov	r0, r3
 8004c84:	f016 fd59 	bl	801b73a <_ZNSaIcED1Ev>
            this->operator[]('I').add_edge('L', Direction::LEFT, {'D', 'F', 'G'}, QUARTER_CIRCLE);
 8004c88:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8004c8c:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8004c90:	2149      	movs	r1, #73	; 0x49
 8004c92:	6818      	ldr	r0, [r3, #0]
 8004c94:	f001 ff32 	bl	8006afc <_ZN3jlb5GraphixEc>
 8004c98:	4604      	mov	r4, r0
 8004c9a:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8004c9e:	f2a3 638c 	subw	r3, r3, #1676	; 0x68c
 8004ca2:	4ac7      	ldr	r2, [pc, #796]	; (8004fc0 <_ZN3jlb5GraphC1Ev+0x1910>)
 8004ca4:	6812      	ldr	r2, [r2, #0]
 8004ca6:	4611      	mov	r1, r2
 8004ca8:	8019      	strh	r1, [r3, #0]
 8004caa:	3302      	adds	r3, #2
 8004cac:	0c12      	lsrs	r2, r2, #16
 8004cae:	701a      	strb	r2, [r3, #0]
 8004cb0:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8004cb4:	f2a3 6394 	subw	r3, r3, #1684	; 0x694
 8004cb8:	f207 52dc 	addw	r2, r7, #1500	; 0x5dc
 8004cbc:	601a      	str	r2, [r3, #0]
 8004cbe:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8004cc2:	f2a3 6394 	subw	r3, r3, #1684	; 0x694
 8004cc6:	2203      	movs	r2, #3
 8004cc8:	605a      	str	r2, [r3, #4]
 8004cca:	f507 63bc 	add.w	r3, r7, #1504	; 0x5e0
 8004cce:	4618      	mov	r0, r3
 8004cd0:	f016 fd31 	bl	801b736 <_ZNSaIcEC1Ev>
 8004cd4:	f507 63bc 	add.w	r3, r7, #1504	; 0x5e0
 8004cd8:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8004cdc:	f2a2 6294 	subw	r2, r2, #1684	; 0x694
 8004ce0:	f507 60b9 	add.w	r0, r7, #1480	; 0x5c8
 8004ce4:	ca06      	ldmia	r2, {r1, r2}
 8004ce6:	f002 ff06 	bl	8007af6 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8004cea:	f507 63b9 	add.w	r3, r7, #1480	; 0x5c8
 8004cee:	ed9f 0ab3 	vldr	s0, [pc, #716]	; 8004fbc <_ZN3jlb5GraphC1Ev+0x190c>
 8004cf2:	2200      	movs	r2, #0
 8004cf4:	214c      	movs	r1, #76	; 0x4c
 8004cf6:	4620      	mov	r0, r4
 8004cf8:	f7fe fc94 	bl	8003624 <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8004cfc:	f507 63b9 	add.w	r3, r7, #1480	; 0x5c8
 8004d00:	4618      	mov	r0, r3
 8004d02:	f002 feab 	bl	8007a5c <_ZNSt6vectorIcSaIcEED1Ev>
 8004d06:	f507 63bc 	add.w	r3, r7, #1504	; 0x5e0
 8004d0a:	4618      	mov	r0, r3
 8004d0c:	f016 fd15 	bl	801b73a <_ZNSaIcED1Ev>
            this->operator[]('I').add_edge('N', Direction::STRAIGHT, {'D', 'F', 'G'}, 2.0f * UNIT);
 8004d10:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8004d14:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8004d18:	2149      	movs	r1, #73	; 0x49
 8004d1a:	6818      	ldr	r0, [r3, #0]
 8004d1c:	f001 feee 	bl	8006afc <_ZN3jlb5GraphixEc>
 8004d20:	4604      	mov	r4, r0
 8004d22:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8004d26:	f5a3 63ce 	sub.w	r3, r3, #1648	; 0x670
 8004d2a:	4aa5      	ldr	r2, [pc, #660]	; (8004fc0 <_ZN3jlb5GraphC1Ev+0x1910>)
 8004d2c:	6812      	ldr	r2, [r2, #0]
 8004d2e:	4611      	mov	r1, r2
 8004d30:	8019      	strh	r1, [r3, #0]
 8004d32:	3302      	adds	r3, #2
 8004d34:	0c12      	lsrs	r2, r2, #16
 8004d36:	701a      	strb	r2, [r3, #0]
 8004d38:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8004d3c:	f5a3 63cf 	sub.w	r3, r3, #1656	; 0x678
 8004d40:	f507 62bf 	add.w	r2, r7, #1528	; 0x5f8
 8004d44:	601a      	str	r2, [r3, #0]
 8004d46:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8004d4a:	f5a3 63cf 	sub.w	r3, r3, #1656	; 0x678
 8004d4e:	2203      	movs	r2, #3
 8004d50:	605a      	str	r2, [r3, #4]
 8004d52:	f207 53fc 	addw	r3, r7, #1532	; 0x5fc
 8004d56:	4618      	mov	r0, r3
 8004d58:	f016 fced 	bl	801b736 <_ZNSaIcEC1Ev>
 8004d5c:	f207 53fc 	addw	r3, r7, #1532	; 0x5fc
 8004d60:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8004d64:	f5a2 62cf 	sub.w	r2, r2, #1656	; 0x678
 8004d68:	f207 50e4 	addw	r0, r7, #1508	; 0x5e4
 8004d6c:	ca06      	ldmia	r2, {r1, r2}
 8004d6e:	f002 fec2 	bl	8007af6 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8004d72:	f207 53e4 	addw	r3, r7, #1508	; 0x5e4
 8004d76:	ed9f 0a93 	vldr	s0, [pc, #588]	; 8004fc4 <_ZN3jlb5GraphC1Ev+0x1914>
 8004d7a:	2202      	movs	r2, #2
 8004d7c:	214e      	movs	r1, #78	; 0x4e
 8004d7e:	4620      	mov	r0, r4
 8004d80:	f7fe fc50 	bl	8003624 <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8004d84:	f207 53e4 	addw	r3, r7, #1508	; 0x5e4
 8004d88:	4618      	mov	r0, r3
 8004d8a:	f002 fe67 	bl	8007a5c <_ZNSt6vectorIcSaIcEED1Ev>
 8004d8e:	f207 53fc 	addw	r3, r7, #1532	; 0x5fc
 8004d92:	4618      	mov	r0, r3
 8004d94:	f016 fcd1 	bl	801b73a <_ZNSaIcED1Ev>
            this->operator[]('I').add_edge('K', Direction::RIGHT, {'D', 'F', 'G'}, QUARTER_CIRCLE);
 8004d98:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8004d9c:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8004da0:	2149      	movs	r1, #73	; 0x49
 8004da2:	6818      	ldr	r0, [r3, #0]
 8004da4:	f001 feaa 	bl	8006afc <_ZN3jlb5GraphixEc>
 8004da8:	4604      	mov	r4, r0
 8004daa:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8004dae:	f2a3 6354 	subw	r3, r3, #1620	; 0x654
 8004db2:	4a83      	ldr	r2, [pc, #524]	; (8004fc0 <_ZN3jlb5GraphC1Ev+0x1910>)
 8004db4:	6812      	ldr	r2, [r2, #0]
 8004db6:	4611      	mov	r1, r2
 8004db8:	8019      	strh	r1, [r3, #0]
 8004dba:	3302      	adds	r3, #2
 8004dbc:	0c12      	lsrs	r2, r2, #16
 8004dbe:	701a      	strb	r2, [r3, #0]
 8004dc0:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8004dc4:	f2a3 635c 	subw	r3, r3, #1628	; 0x65c
 8004dc8:	f207 6214 	addw	r2, r7, #1556	; 0x614
 8004dcc:	601a      	str	r2, [r3, #0]
 8004dce:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8004dd2:	f2a3 635c 	subw	r3, r3, #1628	; 0x65c
 8004dd6:	2203      	movs	r2, #3
 8004dd8:	605a      	str	r2, [r3, #4]
 8004dda:	f507 63c3 	add.w	r3, r7, #1560	; 0x618
 8004dde:	4618      	mov	r0, r3
 8004de0:	f016 fca9 	bl	801b736 <_ZNSaIcEC1Ev>
 8004de4:	f507 63c3 	add.w	r3, r7, #1560	; 0x618
 8004de8:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8004dec:	f2a2 625c 	subw	r2, r2, #1628	; 0x65c
 8004df0:	f507 60c0 	add.w	r0, r7, #1536	; 0x600
 8004df4:	ca06      	ldmia	r2, {r1, r2}
 8004df6:	f002 fe7e 	bl	8007af6 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8004dfa:	f507 63c0 	add.w	r3, r7, #1536	; 0x600
 8004dfe:	ed9f 0a6f 	vldr	s0, [pc, #444]	; 8004fbc <_ZN3jlb5GraphC1Ev+0x190c>
 8004e02:	2201      	movs	r2, #1
 8004e04:	214b      	movs	r1, #75	; 0x4b
 8004e06:	4620      	mov	r0, r4
 8004e08:	f7fe fc0c 	bl	8003624 <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8004e0c:	f507 63c0 	add.w	r3, r7, #1536	; 0x600
 8004e10:	4618      	mov	r0, r3
 8004e12:	f002 fe23 	bl	8007a5c <_ZNSt6vectorIcSaIcEED1Ev>
 8004e16:	f507 63c3 	add.w	r3, r7, #1560	; 0x618
 8004e1a:	4618      	mov	r0, r3
 8004e1c:	f016 fc8d 	bl	801b73a <_ZNSaIcED1Ev>
            this->operator[]('J').add_edge('G', Direction::LEFT, {'L'}, QUARTER_CIRCLE);
 8004e20:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8004e24:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8004e28:	214a      	movs	r1, #74	; 0x4a
 8004e2a:	6818      	ldr	r0, [r3, #0]
 8004e2c:	f001 fe66 	bl	8006afc <_ZN3jlb5GraphixEc>
 8004e30:	4604      	mov	r4, r0
 8004e32:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8004e36:	f5a3 63c7 	sub.w	r3, r3, #1592	; 0x638
 8004e3a:	224c      	movs	r2, #76	; 0x4c
 8004e3c:	701a      	strb	r2, [r3, #0]
 8004e3e:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8004e42:	f5a3 63c8 	sub.w	r3, r3, #1600	; 0x640
 8004e46:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 8004e4a:	601a      	str	r2, [r3, #0]
 8004e4c:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8004e50:	f5a3 63c8 	sub.w	r3, r3, #1600	; 0x640
 8004e54:	2201      	movs	r2, #1
 8004e56:	605a      	str	r2, [r3, #4]
 8004e58:	f207 6334 	addw	r3, r7, #1588	; 0x634
 8004e5c:	4618      	mov	r0, r3
 8004e5e:	f016 fc6a 	bl	801b736 <_ZNSaIcEC1Ev>
 8004e62:	f207 6334 	addw	r3, r7, #1588	; 0x634
 8004e66:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8004e6a:	f5a2 62c8 	sub.w	r2, r2, #1600	; 0x640
 8004e6e:	f207 601c 	addw	r0, r7, #1564	; 0x61c
 8004e72:	ca06      	ldmia	r2, {r1, r2}
 8004e74:	f002 fe3f 	bl	8007af6 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8004e78:	f207 631c 	addw	r3, r7, #1564	; 0x61c
 8004e7c:	ed9f 0a4f 	vldr	s0, [pc, #316]	; 8004fbc <_ZN3jlb5GraphC1Ev+0x190c>
 8004e80:	2200      	movs	r2, #0
 8004e82:	2147      	movs	r1, #71	; 0x47
 8004e84:	4620      	mov	r0, r4
 8004e86:	f7fe fbcd 	bl	8003624 <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8004e8a:	f207 631c 	addw	r3, r7, #1564	; 0x61c
 8004e8e:	4618      	mov	r0, r3
 8004e90:	f002 fde4 	bl	8007a5c <_ZNSt6vectorIcSaIcEED1Ev>
 8004e94:	f207 6334 	addw	r3, r7, #1588	; 0x634
 8004e98:	4618      	mov	r0, r3
 8004e9a:	f016 fc4e 	bl	801b73a <_ZNSaIcED1Ev>
            this->operator[]('J').add_edge('E', Direction::STRAIGHT, {'L'}, 2.0f * UNIT);
 8004e9e:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8004ea2:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8004ea6:	214a      	movs	r1, #74	; 0x4a
 8004ea8:	6818      	ldr	r0, [r3, #0]
 8004eaa:	f001 fe27 	bl	8006afc <_ZN3jlb5GraphixEc>
 8004eae:	4604      	mov	r4, r0
 8004eb0:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8004eb4:	f2a3 631c 	subw	r3, r3, #1564	; 0x61c
 8004eb8:	224c      	movs	r2, #76	; 0x4c
 8004eba:	701a      	strb	r2, [r3, #0]
 8004ebc:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8004ec0:	f2a3 6324 	subw	r3, r3, #1572	; 0x624
 8004ec4:	f207 624c 	addw	r2, r7, #1612	; 0x64c
 8004ec8:	601a      	str	r2, [r3, #0]
 8004eca:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8004ece:	f2a3 6324 	subw	r3, r3, #1572	; 0x624
 8004ed2:	2201      	movs	r2, #1
 8004ed4:	605a      	str	r2, [r3, #4]
 8004ed6:	f507 63ca 	add.w	r3, r7, #1616	; 0x650
 8004eda:	4618      	mov	r0, r3
 8004edc:	f016 fc2b 	bl	801b736 <_ZNSaIcEC1Ev>
 8004ee0:	f507 63ca 	add.w	r3, r7, #1616	; 0x650
 8004ee4:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8004ee8:	f2a2 6224 	subw	r2, r2, #1572	; 0x624
 8004eec:	f507 60c7 	add.w	r0, r7, #1592	; 0x638
 8004ef0:	ca06      	ldmia	r2, {r1, r2}
 8004ef2:	f002 fe00 	bl	8007af6 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8004ef6:	f507 63c7 	add.w	r3, r7, #1592	; 0x638
 8004efa:	ed9f 0a32 	vldr	s0, [pc, #200]	; 8004fc4 <_ZN3jlb5GraphC1Ev+0x1914>
 8004efe:	2202      	movs	r2, #2
 8004f00:	2145      	movs	r1, #69	; 0x45
 8004f02:	4620      	mov	r0, r4
 8004f04:	f7fe fb8e 	bl	8003624 <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8004f08:	f507 63c7 	add.w	r3, r7, #1592	; 0x638
 8004f0c:	4618      	mov	r0, r3
 8004f0e:	f002 fda5 	bl	8007a5c <_ZNSt6vectorIcSaIcEED1Ev>
 8004f12:	f507 63ca 	add.w	r3, r7, #1616	; 0x650
 8004f16:	4618      	mov	r0, r3
 8004f18:	f016 fc0f 	bl	801b73a <_ZNSaIcED1Ev>
            this->operator[]('J').add_edge('L', Direction::RIGHT, {'E', 'G'}, QUARTER_CIRCLE);
 8004f1c:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8004f20:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8004f24:	214a      	movs	r1, #74	; 0x4a
 8004f26:	6818      	ldr	r0, [r3, #0]
 8004f28:	f001 fde8 	bl	8006afc <_ZN3jlb5GraphixEc>
 8004f2c:	4604      	mov	r4, r0
 8004f2e:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8004f32:	f5a3 63c0 	sub.w	r3, r3, #1536	; 0x600
 8004f36:	4a24      	ldr	r2, [pc, #144]	; (8004fc8 <_ZN3jlb5GraphC1Ev+0x1918>)
 8004f38:	8812      	ldrh	r2, [r2, #0]
 8004f3a:	801a      	strh	r2, [r3, #0]
 8004f3c:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8004f40:	f5a3 63c1 	sub.w	r3, r3, #1544	; 0x608
 8004f44:	f507 62cd 	add.w	r2, r7, #1640	; 0x668
 8004f48:	601a      	str	r2, [r3, #0]
 8004f4a:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8004f4e:	f5a3 63c1 	sub.w	r3, r3, #1544	; 0x608
 8004f52:	2202      	movs	r2, #2
 8004f54:	605a      	str	r2, [r3, #4]
 8004f56:	f207 636c 	addw	r3, r7, #1644	; 0x66c
 8004f5a:	4618      	mov	r0, r3
 8004f5c:	f016 fbeb 	bl	801b736 <_ZNSaIcEC1Ev>
 8004f60:	f207 636c 	addw	r3, r7, #1644	; 0x66c
 8004f64:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8004f68:	f5a2 62c1 	sub.w	r2, r2, #1544	; 0x608
 8004f6c:	f207 6054 	addw	r0, r7, #1620	; 0x654
 8004f70:	ca06      	ldmia	r2, {r1, r2}
 8004f72:	f002 fdc0 	bl	8007af6 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8004f76:	f207 6354 	addw	r3, r7, #1620	; 0x654
 8004f7a:	ed9f 0a10 	vldr	s0, [pc, #64]	; 8004fbc <_ZN3jlb5GraphC1Ev+0x190c>
 8004f7e:	2201      	movs	r2, #1
 8004f80:	214c      	movs	r1, #76	; 0x4c
 8004f82:	4620      	mov	r0, r4
 8004f84:	f7fe fb4e 	bl	8003624 <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8004f88:	f207 6354 	addw	r3, r7, #1620	; 0x654
 8004f8c:	4618      	mov	r0, r3
 8004f8e:	f002 fd65 	bl	8007a5c <_ZNSt6vectorIcSaIcEED1Ev>
 8004f92:	f207 636c 	addw	r3, r7, #1644	; 0x66c
 8004f96:	4618      	mov	r0, r3
 8004f98:	f016 fbcf 	bl	801b73a <_ZNSaIcED1Ev>
            this->operator[]('K').add_edge('H', Direction::RIGHT, {'I', 'L', 'N'}, QUARTER_CIRCLE);
 8004f9c:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8004fa0:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8004fa4:	214b      	movs	r1, #75	; 0x4b
 8004fa6:	6818      	ldr	r0, [r3, #0]
 8004fa8:	f001 fda8 	bl	8006afc <_ZN3jlb5GraphixEc>
 8004fac:	4604      	mov	r4, r0
 8004fae:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8004fb2:	f2a3 53e4 	subw	r3, r3, #1508	; 0x5e4
 8004fb6:	e009      	b.n	8004fcc <_ZN3jlb5GraphC1Ev+0x191c>
 8004fb8:	0801f094 	.word	0x0801f094
 8004fbc:	3f71463a 	.word	0x3f71463a
 8004fc0:	0801f098 	.word	0x0801f098
 8004fc4:	3f99999a 	.word	0x3f99999a
 8004fc8:	0801f09c 	.word	0x0801f09c
 8004fcc:	4ae4      	ldr	r2, [pc, #912]	; (8005360 <_ZN3jlb5GraphC1Ev+0x1cb0>)
 8004fce:	6812      	ldr	r2, [r2, #0]
 8004fd0:	4611      	mov	r1, r2
 8004fd2:	8019      	strh	r1, [r3, #0]
 8004fd4:	3302      	adds	r3, #2
 8004fd6:	0c12      	lsrs	r2, r2, #16
 8004fd8:	701a      	strb	r2, [r3, #0]
 8004fda:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8004fde:	f2a3 53ec 	subw	r3, r3, #1516	; 0x5ec
 8004fe2:	f207 6284 	addw	r2, r7, #1668	; 0x684
 8004fe6:	601a      	str	r2, [r3, #0]
 8004fe8:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8004fec:	f2a3 53ec 	subw	r3, r3, #1516	; 0x5ec
 8004ff0:	2203      	movs	r2, #3
 8004ff2:	605a      	str	r2, [r3, #4]
 8004ff4:	f507 63d1 	add.w	r3, r7, #1672	; 0x688
 8004ff8:	4618      	mov	r0, r3
 8004ffa:	f016 fb9c 	bl	801b736 <_ZNSaIcEC1Ev>
 8004ffe:	f507 63d1 	add.w	r3, r7, #1672	; 0x688
 8005002:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8005006:	f2a2 52ec 	subw	r2, r2, #1516	; 0x5ec
 800500a:	f507 60ce 	add.w	r0, r7, #1648	; 0x670
 800500e:	ca06      	ldmia	r2, {r1, r2}
 8005010:	f002 fd71 	bl	8007af6 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8005014:	f507 63ce 	add.w	r3, r7, #1648	; 0x670
 8005018:	ed9f 0ad2 	vldr	s0, [pc, #840]	; 8005364 <_ZN3jlb5GraphC1Ev+0x1cb4>
 800501c:	2201      	movs	r2, #1
 800501e:	2148      	movs	r1, #72	; 0x48
 8005020:	4620      	mov	r0, r4
 8005022:	f7fe faff 	bl	8003624 <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8005026:	f507 63ce 	add.w	r3, r7, #1648	; 0x670
 800502a:	4618      	mov	r0, r3
 800502c:	f002 fd16 	bl	8007a5c <_ZNSt6vectorIcSaIcEED1Ev>
 8005030:	f507 63d1 	add.w	r3, r7, #1672	; 0x688
 8005034:	4618      	mov	r0, r3
 8005036:	f016 fb80 	bl	801b73a <_ZNSaIcED1Ev>
            this->operator[]('K').add_edge('I', Direction::LEFT, {'H', 'M'}, QUARTER_CIRCLE);
 800503a:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800503e:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8005042:	214b      	movs	r1, #75	; 0x4b
 8005044:	6818      	ldr	r0, [r3, #0]
 8005046:	f001 fd59 	bl	8006afc <_ZN3jlb5GraphixEc>
 800504a:	4604      	mov	r4, r0
 800504c:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005050:	f5a3 63b9 	sub.w	r3, r3, #1480	; 0x5c8
 8005054:	4ac4      	ldr	r2, [pc, #784]	; (8005368 <_ZN3jlb5GraphC1Ev+0x1cb8>)
 8005056:	8812      	ldrh	r2, [r2, #0]
 8005058:	801a      	strh	r2, [r3, #0]
 800505a:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800505e:	f5a3 63ba 	sub.w	r3, r3, #1488	; 0x5d0
 8005062:	f507 62d4 	add.w	r2, r7, #1696	; 0x6a0
 8005066:	601a      	str	r2, [r3, #0]
 8005068:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800506c:	f5a3 63ba 	sub.w	r3, r3, #1488	; 0x5d0
 8005070:	2202      	movs	r2, #2
 8005072:	605a      	str	r2, [r3, #4]
 8005074:	f207 63a4 	addw	r3, r7, #1700	; 0x6a4
 8005078:	4618      	mov	r0, r3
 800507a:	f016 fb5c 	bl	801b736 <_ZNSaIcEC1Ev>
 800507e:	f207 63a4 	addw	r3, r7, #1700	; 0x6a4
 8005082:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8005086:	f5a2 62ba 	sub.w	r2, r2, #1488	; 0x5d0
 800508a:	f207 608c 	addw	r0, r7, #1676	; 0x68c
 800508e:	ca06      	ldmia	r2, {r1, r2}
 8005090:	f002 fd31 	bl	8007af6 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8005094:	f207 638c 	addw	r3, r7, #1676	; 0x68c
 8005098:	ed9f 0ab2 	vldr	s0, [pc, #712]	; 8005364 <_ZN3jlb5GraphC1Ev+0x1cb4>
 800509c:	2200      	movs	r2, #0
 800509e:	2149      	movs	r1, #73	; 0x49
 80050a0:	4620      	mov	r0, r4
 80050a2:	f7fe fabf 	bl	8003624 <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 80050a6:	f207 638c 	addw	r3, r7, #1676	; 0x68c
 80050aa:	4618      	mov	r0, r3
 80050ac:	f002 fcd6 	bl	8007a5c <_ZNSt6vectorIcSaIcEED1Ev>
 80050b0:	f207 63a4 	addw	r3, r7, #1700	; 0x6a4
 80050b4:	4618      	mov	r0, r3
 80050b6:	f016 fb40 	bl	801b73a <_ZNSaIcED1Ev>
            this->operator[]('K').add_edge('L', Direction::STRAIGHT, {'H', 'M'}, 2.0f * UNIT);
 80050ba:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80050be:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 80050c2:	214b      	movs	r1, #75	; 0x4b
 80050c4:	6818      	ldr	r0, [r3, #0]
 80050c6:	f001 fd19 	bl	8006afc <_ZN3jlb5GraphixEc>
 80050ca:	4604      	mov	r4, r0
 80050cc:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80050d0:	f2a3 53ac 	subw	r3, r3, #1452	; 0x5ac
 80050d4:	4aa4      	ldr	r2, [pc, #656]	; (8005368 <_ZN3jlb5GraphC1Ev+0x1cb8>)
 80050d6:	8812      	ldrh	r2, [r2, #0]
 80050d8:	801a      	strh	r2, [r3, #0]
 80050da:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80050de:	f2a3 53b4 	subw	r3, r3, #1460	; 0x5b4
 80050e2:	f207 62bc 	addw	r2, r7, #1724	; 0x6bc
 80050e6:	601a      	str	r2, [r3, #0]
 80050e8:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80050ec:	f2a3 53b4 	subw	r3, r3, #1460	; 0x5b4
 80050f0:	2202      	movs	r2, #2
 80050f2:	605a      	str	r2, [r3, #4]
 80050f4:	f507 63d8 	add.w	r3, r7, #1728	; 0x6c0
 80050f8:	4618      	mov	r0, r3
 80050fa:	f016 fb1c 	bl	801b736 <_ZNSaIcEC1Ev>
 80050fe:	f507 63d8 	add.w	r3, r7, #1728	; 0x6c0
 8005102:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8005106:	f2a2 52b4 	subw	r2, r2, #1460	; 0x5b4
 800510a:	f507 60d5 	add.w	r0, r7, #1704	; 0x6a8
 800510e:	ca06      	ldmia	r2, {r1, r2}
 8005110:	f002 fcf1 	bl	8007af6 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8005114:	f507 63d5 	add.w	r3, r7, #1704	; 0x6a8
 8005118:	ed9f 0a94 	vldr	s0, [pc, #592]	; 800536c <_ZN3jlb5GraphC1Ev+0x1cbc>
 800511c:	2202      	movs	r2, #2
 800511e:	214c      	movs	r1, #76	; 0x4c
 8005120:	4620      	mov	r0, r4
 8005122:	f7fe fa7f 	bl	8003624 <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8005126:	f507 63d5 	add.w	r3, r7, #1704	; 0x6a8
 800512a:	4618      	mov	r0, r3
 800512c:	f002 fc96 	bl	8007a5c <_ZNSt6vectorIcSaIcEED1Ev>
 8005130:	f507 63d8 	add.w	r3, r7, #1728	; 0x6c0
 8005134:	4618      	mov	r0, r3
 8005136:	f016 fb00 	bl	801b73a <_ZNSaIcED1Ev>
            this->operator[]('K').add_edge('N', Direction::RIGHT, {'H', 'M'}, QUARTER_CIRCLE);
 800513a:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800513e:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8005142:	214b      	movs	r1, #75	; 0x4b
 8005144:	6818      	ldr	r0, [r3, #0]
 8005146:	f001 fcd9 	bl	8006afc <_ZN3jlb5GraphixEc>
 800514a:	4604      	mov	r4, r0
 800514c:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005150:	f5a3 63b2 	sub.w	r3, r3, #1424	; 0x590
 8005154:	4a84      	ldr	r2, [pc, #528]	; (8005368 <_ZN3jlb5GraphC1Ev+0x1cb8>)
 8005156:	8812      	ldrh	r2, [r2, #0]
 8005158:	801a      	strh	r2, [r3, #0]
 800515a:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800515e:	f5a3 63b3 	sub.w	r3, r3, #1432	; 0x598
 8005162:	f507 62db 	add.w	r2, r7, #1752	; 0x6d8
 8005166:	601a      	str	r2, [r3, #0]
 8005168:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800516c:	f5a3 63b3 	sub.w	r3, r3, #1432	; 0x598
 8005170:	2202      	movs	r2, #2
 8005172:	605a      	str	r2, [r3, #4]
 8005174:	f207 63dc 	addw	r3, r7, #1756	; 0x6dc
 8005178:	4618      	mov	r0, r3
 800517a:	f016 fadc 	bl	801b736 <_ZNSaIcEC1Ev>
 800517e:	f207 63dc 	addw	r3, r7, #1756	; 0x6dc
 8005182:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8005186:	f5a2 62b3 	sub.w	r2, r2, #1432	; 0x598
 800518a:	f207 60c4 	addw	r0, r7, #1732	; 0x6c4
 800518e:	ca06      	ldmia	r2, {r1, r2}
 8005190:	f002 fcb1 	bl	8007af6 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8005194:	f207 63c4 	addw	r3, r7, #1732	; 0x6c4
 8005198:	ed9f 0a72 	vldr	s0, [pc, #456]	; 8005364 <_ZN3jlb5GraphC1Ev+0x1cb4>
 800519c:	2201      	movs	r2, #1
 800519e:	214e      	movs	r1, #78	; 0x4e
 80051a0:	4620      	mov	r0, r4
 80051a2:	f7fe fa3f 	bl	8003624 <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 80051a6:	f207 63c4 	addw	r3, r7, #1732	; 0x6c4
 80051aa:	4618      	mov	r0, r3
 80051ac:	f002 fc56 	bl	8007a5c <_ZNSt6vectorIcSaIcEED1Ev>
 80051b0:	f207 63dc 	addw	r3, r7, #1756	; 0x6dc
 80051b4:	4618      	mov	r0, r3
 80051b6:	f016 fac0 	bl	801b73a <_ZNSaIcED1Ev>
            this->operator[]('K').add_edge('M', Direction::LEFT, {'I', 'L', 'N'}, QUARTER_CIRCLE);
 80051ba:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80051be:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 80051c2:	214b      	movs	r1, #75	; 0x4b
 80051c4:	6818      	ldr	r0, [r3, #0]
 80051c6:	f001 fc99 	bl	8006afc <_ZN3jlb5GraphixEc>
 80051ca:	4604      	mov	r4, r0
 80051cc:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80051d0:	f2a3 5374 	subw	r3, r3, #1396	; 0x574
 80051d4:	4a62      	ldr	r2, [pc, #392]	; (8005360 <_ZN3jlb5GraphC1Ev+0x1cb0>)
 80051d6:	6812      	ldr	r2, [r2, #0]
 80051d8:	4611      	mov	r1, r2
 80051da:	8019      	strh	r1, [r3, #0]
 80051dc:	3302      	adds	r3, #2
 80051de:	0c12      	lsrs	r2, r2, #16
 80051e0:	701a      	strb	r2, [r3, #0]
 80051e2:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80051e6:	f2a3 537c 	subw	r3, r3, #1404	; 0x57c
 80051ea:	f207 62f4 	addw	r2, r7, #1780	; 0x6f4
 80051ee:	601a      	str	r2, [r3, #0]
 80051f0:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80051f4:	f2a3 537c 	subw	r3, r3, #1404	; 0x57c
 80051f8:	2203      	movs	r2, #3
 80051fa:	605a      	str	r2, [r3, #4]
 80051fc:	f507 63df 	add.w	r3, r7, #1784	; 0x6f8
 8005200:	4618      	mov	r0, r3
 8005202:	f016 fa98 	bl	801b736 <_ZNSaIcEC1Ev>
 8005206:	f507 63df 	add.w	r3, r7, #1784	; 0x6f8
 800520a:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 800520e:	f2a2 527c 	subw	r2, r2, #1404	; 0x57c
 8005212:	f507 60dc 	add.w	r0, r7, #1760	; 0x6e0
 8005216:	ca06      	ldmia	r2, {r1, r2}
 8005218:	f002 fc6d 	bl	8007af6 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 800521c:	f507 63dc 	add.w	r3, r7, #1760	; 0x6e0
 8005220:	ed9f 0a50 	vldr	s0, [pc, #320]	; 8005364 <_ZN3jlb5GraphC1Ev+0x1cb4>
 8005224:	2200      	movs	r2, #0
 8005226:	214d      	movs	r1, #77	; 0x4d
 8005228:	4620      	mov	r0, r4
 800522a:	f7fe f9fb 	bl	8003624 <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 800522e:	f507 63dc 	add.w	r3, r7, #1760	; 0x6e0
 8005232:	4618      	mov	r0, r3
 8005234:	f002 fc12 	bl	8007a5c <_ZNSt6vectorIcSaIcEED1Ev>
 8005238:	f507 63df 	add.w	r3, r7, #1784	; 0x6f8
 800523c:	4618      	mov	r0, r3
 800523e:	f016 fa7c 	bl	801b73a <_ZNSaIcED1Ev>
            this->operator[]('L').add_edge('K', Direction::STRAIGHT, {'J', 'O'}, 2.0f * UNIT);
 8005242:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005246:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 800524a:	214c      	movs	r1, #76	; 0x4c
 800524c:	6818      	ldr	r0, [r3, #0]
 800524e:	f001 fc55 	bl	8006afc <_ZN3jlb5GraphixEc>
 8005252:	4604      	mov	r4, r0
 8005254:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005258:	f5a3 63ab 	sub.w	r3, r3, #1368	; 0x558
 800525c:	4a44      	ldr	r2, [pc, #272]	; (8005370 <_ZN3jlb5GraphC1Ev+0x1cc0>)
 800525e:	8812      	ldrh	r2, [r2, #0]
 8005260:	801a      	strh	r2, [r3, #0]
 8005262:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005266:	f5a3 63ac 	sub.w	r3, r3, #1376	; 0x560
 800526a:	f507 62e2 	add.w	r2, r7, #1808	; 0x710
 800526e:	601a      	str	r2, [r3, #0]
 8005270:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005274:	f5a3 63ac 	sub.w	r3, r3, #1376	; 0x560
 8005278:	2202      	movs	r2, #2
 800527a:	605a      	str	r2, [r3, #4]
 800527c:	f207 7314 	addw	r3, r7, #1812	; 0x714
 8005280:	4618      	mov	r0, r3
 8005282:	f016 fa58 	bl	801b736 <_ZNSaIcEC1Ev>
 8005286:	f207 7314 	addw	r3, r7, #1812	; 0x714
 800528a:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 800528e:	f5a2 62ac 	sub.w	r2, r2, #1376	; 0x560
 8005292:	f207 60fc 	addw	r0, r7, #1788	; 0x6fc
 8005296:	ca06      	ldmia	r2, {r1, r2}
 8005298:	f002 fc2d 	bl	8007af6 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 800529c:	f207 63fc 	addw	r3, r7, #1788	; 0x6fc
 80052a0:	ed9f 0a32 	vldr	s0, [pc, #200]	; 800536c <_ZN3jlb5GraphC1Ev+0x1cbc>
 80052a4:	2202      	movs	r2, #2
 80052a6:	214b      	movs	r1, #75	; 0x4b
 80052a8:	4620      	mov	r0, r4
 80052aa:	f7fe f9bb 	bl	8003624 <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 80052ae:	f207 63fc 	addw	r3, r7, #1788	; 0x6fc
 80052b2:	4618      	mov	r0, r3
 80052b4:	f002 fbd2 	bl	8007a5c <_ZNSt6vectorIcSaIcEED1Ev>
 80052b8:	f207 7314 	addw	r3, r7, #1812	; 0x714
 80052bc:	4618      	mov	r0, r3
 80052be:	f016 fa3c 	bl	801b73a <_ZNSaIcED1Ev>
            this->operator[]('L').add_edge('I', Direction::RIGHT, {'J', 'O'}, QUARTER_CIRCLE);
 80052c2:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80052c6:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 80052ca:	214c      	movs	r1, #76	; 0x4c
 80052cc:	6818      	ldr	r0, [r3, #0]
 80052ce:	f001 fc15 	bl	8006afc <_ZN3jlb5GraphixEc>
 80052d2:	4604      	mov	r4, r0
 80052d4:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80052d8:	f2a3 533c 	subw	r3, r3, #1340	; 0x53c
 80052dc:	4a24      	ldr	r2, [pc, #144]	; (8005370 <_ZN3jlb5GraphC1Ev+0x1cc0>)
 80052de:	8812      	ldrh	r2, [r2, #0]
 80052e0:	801a      	strh	r2, [r3, #0]
 80052e2:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80052e6:	f2a3 5344 	subw	r3, r3, #1348	; 0x544
 80052ea:	f207 722c 	addw	r2, r7, #1836	; 0x72c
 80052ee:	601a      	str	r2, [r3, #0]
 80052f0:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80052f4:	f2a3 5344 	subw	r3, r3, #1348	; 0x544
 80052f8:	2202      	movs	r2, #2
 80052fa:	605a      	str	r2, [r3, #4]
 80052fc:	f507 63e6 	add.w	r3, r7, #1840	; 0x730
 8005300:	4618      	mov	r0, r3
 8005302:	f016 fa18 	bl	801b736 <_ZNSaIcEC1Ev>
 8005306:	f507 63e6 	add.w	r3, r7, #1840	; 0x730
 800530a:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 800530e:	f2a2 5244 	subw	r2, r2, #1348	; 0x544
 8005312:	f507 60e3 	add.w	r0, r7, #1816	; 0x718
 8005316:	ca06      	ldmia	r2, {r1, r2}
 8005318:	f002 fbed 	bl	8007af6 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 800531c:	f507 63e3 	add.w	r3, r7, #1816	; 0x718
 8005320:	ed9f 0a10 	vldr	s0, [pc, #64]	; 8005364 <_ZN3jlb5GraphC1Ev+0x1cb4>
 8005324:	2201      	movs	r2, #1
 8005326:	2149      	movs	r1, #73	; 0x49
 8005328:	4620      	mov	r0, r4
 800532a:	f7fe f97b 	bl	8003624 <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 800532e:	f507 63e3 	add.w	r3, r7, #1816	; 0x718
 8005332:	4618      	mov	r0, r3
 8005334:	f002 fb92 	bl	8007a5c <_ZNSt6vectorIcSaIcEED1Ev>
 8005338:	f507 63e6 	add.w	r3, r7, #1840	; 0x730
 800533c:	4618      	mov	r0, r3
 800533e:	f016 f9fc 	bl	801b73a <_ZNSaIcED1Ev>
            this->operator[]('L').add_edge('J', Direction::LEFT, {'I', 'K', 'N'}, QUARTER_CIRCLE);
 8005342:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005346:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 800534a:	214c      	movs	r1, #76	; 0x4c
 800534c:	6818      	ldr	r0, [r3, #0]
 800534e:	f001 fbd5 	bl	8006afc <_ZN3jlb5GraphixEc>
 8005352:	4604      	mov	r4, r0
 8005354:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005358:	f5a3 63a4 	sub.w	r3, r3, #1312	; 0x520
 800535c:	e00a      	b.n	8005374 <_ZN3jlb5GraphC1Ev+0x1cc4>
 800535e:	bf00      	nop
 8005360:	0801f0a0 	.word	0x0801f0a0
 8005364:	3f71463a 	.word	0x3f71463a
 8005368:	0801f0a4 	.word	0x0801f0a4
 800536c:	3f99999a 	.word	0x3f99999a
 8005370:	0801f0a8 	.word	0x0801f0a8
 8005374:	4ae4      	ldr	r2, [pc, #912]	; (8005708 <_ZN3jlb5GraphC1Ev+0x2058>)
 8005376:	6812      	ldr	r2, [r2, #0]
 8005378:	4611      	mov	r1, r2
 800537a:	8019      	strh	r1, [r3, #0]
 800537c:	3302      	adds	r3, #2
 800537e:	0c12      	lsrs	r2, r2, #16
 8005380:	701a      	strb	r2, [r3, #0]
 8005382:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005386:	f5a3 63a5 	sub.w	r3, r3, #1320	; 0x528
 800538a:	f507 62e9 	add.w	r2, r7, #1864	; 0x748
 800538e:	601a      	str	r2, [r3, #0]
 8005390:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005394:	f5a3 63a5 	sub.w	r3, r3, #1320	; 0x528
 8005398:	2203      	movs	r2, #3
 800539a:	605a      	str	r2, [r3, #4]
 800539c:	f207 734c 	addw	r3, r7, #1868	; 0x74c
 80053a0:	4618      	mov	r0, r3
 80053a2:	f016 f9c8 	bl	801b736 <_ZNSaIcEC1Ev>
 80053a6:	f207 734c 	addw	r3, r7, #1868	; 0x74c
 80053aa:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 80053ae:	f5a2 62a5 	sub.w	r2, r2, #1320	; 0x528
 80053b2:	f207 7034 	addw	r0, r7, #1844	; 0x734
 80053b6:	ca06      	ldmia	r2, {r1, r2}
 80053b8:	f002 fb9d 	bl	8007af6 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 80053bc:	f207 7334 	addw	r3, r7, #1844	; 0x734
 80053c0:	ed9f 0ad2 	vldr	s0, [pc, #840]	; 800570c <_ZN3jlb5GraphC1Ev+0x205c>
 80053c4:	2200      	movs	r2, #0
 80053c6:	214a      	movs	r1, #74	; 0x4a
 80053c8:	4620      	mov	r0, r4
 80053ca:	f7fe f92b 	bl	8003624 <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 80053ce:	f207 7334 	addw	r3, r7, #1844	; 0x734
 80053d2:	4618      	mov	r0, r3
 80053d4:	f002 fb42 	bl	8007a5c <_ZNSt6vectorIcSaIcEED1Ev>
 80053d8:	f207 734c 	addw	r3, r7, #1868	; 0x74c
 80053dc:	4618      	mov	r0, r3
 80053de:	f016 f9ac 	bl	801b73a <_ZNSaIcED1Ev>
            this->operator[]('L').add_edge('O', Direction::RIGHT, {'I', 'K', 'N'}, QUARTER_CIRCLE);
 80053e2:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80053e6:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 80053ea:	214c      	movs	r1, #76	; 0x4c
 80053ec:	6818      	ldr	r0, [r3, #0]
 80053ee:	f001 fb85 	bl	8006afc <_ZN3jlb5GraphixEc>
 80053f2:	4604      	mov	r4, r0
 80053f4:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80053f8:	f2a3 5304 	subw	r3, r3, #1284	; 0x504
 80053fc:	4ac2      	ldr	r2, [pc, #776]	; (8005708 <_ZN3jlb5GraphC1Ev+0x2058>)
 80053fe:	6812      	ldr	r2, [r2, #0]
 8005400:	4611      	mov	r1, r2
 8005402:	8019      	strh	r1, [r3, #0]
 8005404:	3302      	adds	r3, #2
 8005406:	0c12      	lsrs	r2, r2, #16
 8005408:	701a      	strb	r2, [r3, #0]
 800540a:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800540e:	f2a3 530c 	subw	r3, r3, #1292	; 0x50c
 8005412:	f207 7264 	addw	r2, r7, #1892	; 0x764
 8005416:	601a      	str	r2, [r3, #0]
 8005418:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800541c:	f2a3 530c 	subw	r3, r3, #1292	; 0x50c
 8005420:	2203      	movs	r2, #3
 8005422:	605a      	str	r2, [r3, #4]
 8005424:	f507 63ed 	add.w	r3, r7, #1896	; 0x768
 8005428:	4618      	mov	r0, r3
 800542a:	f016 f984 	bl	801b736 <_ZNSaIcEC1Ev>
 800542e:	f507 63ed 	add.w	r3, r7, #1896	; 0x768
 8005432:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8005436:	f2a2 520c 	subw	r2, r2, #1292	; 0x50c
 800543a:	f507 60ea 	add.w	r0, r7, #1872	; 0x750
 800543e:	ca06      	ldmia	r2, {r1, r2}
 8005440:	f002 fb59 	bl	8007af6 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8005444:	f507 63ea 	add.w	r3, r7, #1872	; 0x750
 8005448:	ed9f 0ab0 	vldr	s0, [pc, #704]	; 800570c <_ZN3jlb5GraphC1Ev+0x205c>
 800544c:	2201      	movs	r2, #1
 800544e:	214f      	movs	r1, #79	; 0x4f
 8005450:	4620      	mov	r0, r4
 8005452:	f7fe f8e7 	bl	8003624 <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8005456:	f507 63ea 	add.w	r3, r7, #1872	; 0x750
 800545a:	4618      	mov	r0, r3
 800545c:	f002 fafe 	bl	8007a5c <_ZNSt6vectorIcSaIcEED1Ev>
 8005460:	f507 63ed 	add.w	r3, r7, #1896	; 0x768
 8005464:	4618      	mov	r0, r3
 8005466:	f016 f968 	bl	801b73a <_ZNSaIcED1Ev>
            this->operator[]('L').add_edge('N', Direction::LEFT, {'J', 'O'}, QUARTER_CIRCLE);
 800546a:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800546e:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8005472:	214c      	movs	r1, #76	; 0x4c
 8005474:	6818      	ldr	r0, [r3, #0]
 8005476:	f001 fb41 	bl	8006afc <_ZN3jlb5GraphixEc>
 800547a:	4604      	mov	r4, r0
 800547c:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005480:	f5a3 639d 	sub.w	r3, r3, #1256	; 0x4e8
 8005484:	4aa2      	ldr	r2, [pc, #648]	; (8005710 <_ZN3jlb5GraphC1Ev+0x2060>)
 8005486:	8812      	ldrh	r2, [r2, #0]
 8005488:	801a      	strh	r2, [r3, #0]
 800548a:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800548e:	f5a3 639e 	sub.w	r3, r3, #1264	; 0x4f0
 8005492:	f507 62f0 	add.w	r2, r7, #1920	; 0x780
 8005496:	601a      	str	r2, [r3, #0]
 8005498:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800549c:	f5a3 639e 	sub.w	r3, r3, #1264	; 0x4f0
 80054a0:	2202      	movs	r2, #2
 80054a2:	605a      	str	r2, [r3, #4]
 80054a4:	f207 7384 	addw	r3, r7, #1924	; 0x784
 80054a8:	4618      	mov	r0, r3
 80054aa:	f016 f944 	bl	801b736 <_ZNSaIcEC1Ev>
 80054ae:	f207 7384 	addw	r3, r7, #1924	; 0x784
 80054b2:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 80054b6:	f5a2 629e 	sub.w	r2, r2, #1264	; 0x4f0
 80054ba:	f207 706c 	addw	r0, r7, #1900	; 0x76c
 80054be:	ca06      	ldmia	r2, {r1, r2}
 80054c0:	f002 fb19 	bl	8007af6 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 80054c4:	f207 736c 	addw	r3, r7, #1900	; 0x76c
 80054c8:	ed9f 0a90 	vldr	s0, [pc, #576]	; 800570c <_ZN3jlb5GraphC1Ev+0x205c>
 80054cc:	2200      	movs	r2, #0
 80054ce:	214e      	movs	r1, #78	; 0x4e
 80054d0:	4620      	mov	r0, r4
 80054d2:	f7fe f8a7 	bl	8003624 <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 80054d6:	f207 736c 	addw	r3, r7, #1900	; 0x76c
 80054da:	4618      	mov	r0, r3
 80054dc:	f002 fabe 	bl	8007a5c <_ZNSt6vectorIcSaIcEED1Ev>
 80054e0:	f207 7384 	addw	r3, r7, #1924	; 0x784
 80054e4:	4618      	mov	r0, r3
 80054e6:	f016 f928 	bl	801b73a <_ZNSaIcED1Ev>
            this->operator[]('M').add_edge('H', Direction::STRAIGHT, {'P', 'Q', 'R'}, 2.0f * UNIT);
 80054ea:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80054ee:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 80054f2:	214d      	movs	r1, #77	; 0x4d
 80054f4:	6818      	ldr	r0, [r3, #0]
 80054f6:	f001 fb01 	bl	8006afc <_ZN3jlb5GraphixEc>
 80054fa:	4604      	mov	r4, r0
 80054fc:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005500:	f2a3 43cc 	subw	r3, r3, #1228	; 0x4cc
 8005504:	4a83      	ldr	r2, [pc, #524]	; (8005714 <_ZN3jlb5GraphC1Ev+0x2064>)
 8005506:	6812      	ldr	r2, [r2, #0]
 8005508:	4611      	mov	r1, r2
 800550a:	8019      	strh	r1, [r3, #0]
 800550c:	3302      	adds	r3, #2
 800550e:	0c12      	lsrs	r2, r2, #16
 8005510:	701a      	strb	r2, [r3, #0]
 8005512:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005516:	f2a3 43d4 	subw	r3, r3, #1236	; 0x4d4
 800551a:	f207 729c 	addw	r2, r7, #1948	; 0x79c
 800551e:	601a      	str	r2, [r3, #0]
 8005520:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005524:	f2a3 43d4 	subw	r3, r3, #1236	; 0x4d4
 8005528:	2203      	movs	r2, #3
 800552a:	605a      	str	r2, [r3, #4]
 800552c:	f507 63f4 	add.w	r3, r7, #1952	; 0x7a0
 8005530:	4618      	mov	r0, r3
 8005532:	f016 f900 	bl	801b736 <_ZNSaIcEC1Ev>
 8005536:	f507 63f4 	add.w	r3, r7, #1952	; 0x7a0
 800553a:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 800553e:	f2a2 42d4 	subw	r2, r2, #1236	; 0x4d4
 8005542:	f507 60f1 	add.w	r0, r7, #1928	; 0x788
 8005546:	ca06      	ldmia	r2, {r1, r2}
 8005548:	f002 fad5 	bl	8007af6 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 800554c:	f507 63f1 	add.w	r3, r7, #1928	; 0x788
 8005550:	ed9f 0a71 	vldr	s0, [pc, #452]	; 8005718 <_ZN3jlb5GraphC1Ev+0x2068>
 8005554:	2202      	movs	r2, #2
 8005556:	2148      	movs	r1, #72	; 0x48
 8005558:	4620      	mov	r0, r4
 800555a:	f7fe f863 	bl	8003624 <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 800555e:	f507 63f1 	add.w	r3, r7, #1928	; 0x788
 8005562:	4618      	mov	r0, r3
 8005564:	f002 fa7a 	bl	8007a5c <_ZNSt6vectorIcSaIcEED1Ev>
 8005568:	f507 63f4 	add.w	r3, r7, #1952	; 0x7a0
 800556c:	4618      	mov	r0, r3
 800556e:	f016 f8e4 	bl	801b73a <_ZNSaIcED1Ev>
            this->operator[]('M').add_edge('K', Direction::RIGHT, {'P', 'Q', 'R'}, QUARTER_CIRCLE);
 8005572:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005576:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 800557a:	214d      	movs	r1, #77	; 0x4d
 800557c:	6818      	ldr	r0, [r3, #0]
 800557e:	f001 fabd 	bl	8006afc <_ZN3jlb5GraphixEc>
 8005582:	4604      	mov	r4, r0
 8005584:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005588:	f5a3 6396 	sub.w	r3, r3, #1200	; 0x4b0
 800558c:	4a61      	ldr	r2, [pc, #388]	; (8005714 <_ZN3jlb5GraphC1Ev+0x2064>)
 800558e:	6812      	ldr	r2, [r2, #0]
 8005590:	4611      	mov	r1, r2
 8005592:	8019      	strh	r1, [r3, #0]
 8005594:	3302      	adds	r3, #2
 8005596:	0c12      	lsrs	r2, r2, #16
 8005598:	701a      	strb	r2, [r3, #0]
 800559a:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800559e:	f5a3 6397 	sub.w	r3, r3, #1208	; 0x4b8
 80055a2:	f507 62f7 	add.w	r2, r7, #1976	; 0x7b8
 80055a6:	601a      	str	r2, [r3, #0]
 80055a8:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80055ac:	f5a3 6397 	sub.w	r3, r3, #1208	; 0x4b8
 80055b0:	2203      	movs	r2, #3
 80055b2:	605a      	str	r2, [r3, #4]
 80055b4:	f207 73bc 	addw	r3, r7, #1980	; 0x7bc
 80055b8:	4618      	mov	r0, r3
 80055ba:	f016 f8bc 	bl	801b736 <_ZNSaIcEC1Ev>
 80055be:	f207 73bc 	addw	r3, r7, #1980	; 0x7bc
 80055c2:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 80055c6:	f5a2 6297 	sub.w	r2, r2, #1208	; 0x4b8
 80055ca:	f207 70a4 	addw	r0, r7, #1956	; 0x7a4
 80055ce:	ca06      	ldmia	r2, {r1, r2}
 80055d0:	f002 fa91 	bl	8007af6 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 80055d4:	f207 73a4 	addw	r3, r7, #1956	; 0x7a4
 80055d8:	ed9f 0a4c 	vldr	s0, [pc, #304]	; 800570c <_ZN3jlb5GraphC1Ev+0x205c>
 80055dc:	2201      	movs	r2, #1
 80055de:	214b      	movs	r1, #75	; 0x4b
 80055e0:	4620      	mov	r0, r4
 80055e2:	f7fe f81f 	bl	8003624 <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 80055e6:	f207 73a4 	addw	r3, r7, #1956	; 0x7a4
 80055ea:	4618      	mov	r0, r3
 80055ec:	f002 fa36 	bl	8007a5c <_ZNSt6vectorIcSaIcEED1Ev>
 80055f0:	f207 73bc 	addw	r3, r7, #1980	; 0x7bc
 80055f4:	4618      	mov	r0, r3
 80055f6:	f016 f8a0 	bl	801b73a <_ZNSaIcED1Ev>
            this->operator[]('M').add_edge('R', Direction::LEFT, {'H', 'K'}, QUARTER_CIRCLE);
 80055fa:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80055fe:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8005602:	214d      	movs	r1, #77	; 0x4d
 8005604:	6818      	ldr	r0, [r3, #0]
 8005606:	f001 fa79 	bl	8006afc <_ZN3jlb5GraphixEc>
 800560a:	4604      	mov	r4, r0
 800560c:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005610:	f2a3 4394 	subw	r3, r3, #1172	; 0x494
 8005614:	4a41      	ldr	r2, [pc, #260]	; (800571c <_ZN3jlb5GraphC1Ev+0x206c>)
 8005616:	8812      	ldrh	r2, [r2, #0]
 8005618:	801a      	strh	r2, [r3, #0]
 800561a:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800561e:	f2a3 439c 	subw	r3, r3, #1180	; 0x49c
 8005622:	f207 72d4 	addw	r2, r7, #2004	; 0x7d4
 8005626:	601a      	str	r2, [r3, #0]
 8005628:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800562c:	f2a3 439c 	subw	r3, r3, #1180	; 0x49c
 8005630:	2202      	movs	r2, #2
 8005632:	605a      	str	r2, [r3, #4]
 8005634:	f507 63fb 	add.w	r3, r7, #2008	; 0x7d8
 8005638:	4618      	mov	r0, r3
 800563a:	f016 f87c 	bl	801b736 <_ZNSaIcEC1Ev>
 800563e:	f507 63fb 	add.w	r3, r7, #2008	; 0x7d8
 8005642:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8005646:	f2a2 429c 	subw	r2, r2, #1180	; 0x49c
 800564a:	f507 60f8 	add.w	r0, r7, #1984	; 0x7c0
 800564e:	ca06      	ldmia	r2, {r1, r2}
 8005650:	f002 fa51 	bl	8007af6 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8005654:	f507 63f8 	add.w	r3, r7, #1984	; 0x7c0
 8005658:	ed9f 0a2c 	vldr	s0, [pc, #176]	; 800570c <_ZN3jlb5GraphC1Ev+0x205c>
 800565c:	2200      	movs	r2, #0
 800565e:	2152      	movs	r1, #82	; 0x52
 8005660:	4620      	mov	r0, r4
 8005662:	f7fd ffdf 	bl	8003624 <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8005666:	f507 63f8 	add.w	r3, r7, #1984	; 0x7c0
 800566a:	4618      	mov	r0, r3
 800566c:	f002 f9f6 	bl	8007a5c <_ZNSt6vectorIcSaIcEED1Ev>
 8005670:	f507 63fb 	add.w	r3, r7, #2008	; 0x7d8
 8005674:	4618      	mov	r0, r3
 8005676:	f016 f860 	bl	801b73a <_ZNSaIcED1Ev>
            this->operator[]('M').add_edge('Q', Direction::STRAIGHT, {'H', 'K'}, UNIT);
 800567a:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800567e:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8005682:	214d      	movs	r1, #77	; 0x4d
 8005684:	6818      	ldr	r0, [r3, #0]
 8005686:	f001 fa39 	bl	8006afc <_ZN3jlb5GraphixEc>
 800568a:	4604      	mov	r4, r0
 800568c:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005690:	f5a3 638f 	sub.w	r3, r3, #1144	; 0x478
 8005694:	4a21      	ldr	r2, [pc, #132]	; (800571c <_ZN3jlb5GraphC1Ev+0x206c>)
 8005696:	8812      	ldrh	r2, [r2, #0]
 8005698:	801a      	strh	r2, [r3, #0]
 800569a:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800569e:	f5a3 6390 	sub.w	r3, r3, #1152	; 0x480
 80056a2:	f507 62fe 	add.w	r2, r7, #2032	; 0x7f0
 80056a6:	601a      	str	r2, [r3, #0]
 80056a8:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80056ac:	f5a3 6390 	sub.w	r3, r3, #1152	; 0x480
 80056b0:	2202      	movs	r2, #2
 80056b2:	605a      	str	r2, [r3, #4]
 80056b4:	f207 73f4 	addw	r3, r7, #2036	; 0x7f4
 80056b8:	4618      	mov	r0, r3
 80056ba:	f016 f83c 	bl	801b736 <_ZNSaIcEC1Ev>
 80056be:	f207 73f4 	addw	r3, r7, #2036	; 0x7f4
 80056c2:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 80056c6:	f5a2 6290 	sub.w	r2, r2, #1152	; 0x480
 80056ca:	f207 70dc 	addw	r0, r7, #2012	; 0x7dc
 80056ce:	ca06      	ldmia	r2, {r1, r2}
 80056d0:	f002 fa11 	bl	8007af6 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 80056d4:	f207 73dc 	addw	r3, r7, #2012	; 0x7dc
 80056d8:	ed9f 0a11 	vldr	s0, [pc, #68]	; 8005720 <_ZN3jlb5GraphC1Ev+0x2070>
 80056dc:	2202      	movs	r2, #2
 80056de:	2151      	movs	r1, #81	; 0x51
 80056e0:	4620      	mov	r0, r4
 80056e2:	f7fd ff9f 	bl	8003624 <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 80056e6:	f207 73dc 	addw	r3, r7, #2012	; 0x7dc
 80056ea:	4618      	mov	r0, r3
 80056ec:	f002 f9b6 	bl	8007a5c <_ZNSt6vectorIcSaIcEED1Ev>
 80056f0:	f207 73f4 	addw	r3, r7, #2036	; 0x7f4
 80056f4:	4618      	mov	r0, r3
 80056f6:	f016 f820 	bl	801b73a <_ZNSaIcED1Ev>
            this->operator[]('M').add_edge('P', Direction::RIGHT, {'H', 'K'}, QUARTER_CIRCLE);
 80056fa:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80056fe:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8005702:	214d      	movs	r1, #77	; 0x4d
 8005704:	6818      	ldr	r0, [r3, #0]
 8005706:	e00d      	b.n	8005724 <_ZN3jlb5GraphC1Ev+0x2074>
 8005708:	0801f0ac 	.word	0x0801f0ac
 800570c:	3f71463a 	.word	0x3f71463a
 8005710:	0801f0a8 	.word	0x0801f0a8
 8005714:	0801f0b0 	.word	0x0801f0b0
 8005718:	3f99999a 	.word	0x3f99999a
 800571c:	0801f0b4 	.word	0x0801f0b4
 8005720:	3f19999a 	.word	0x3f19999a
 8005724:	f001 f9ea 	bl	8006afc <_ZN3jlb5GraphixEc>
 8005728:	4604      	mov	r4, r0
 800572a:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800572e:	f2a3 435c 	subw	r3, r3, #1116	; 0x45c
 8005732:	4ae5      	ldr	r2, [pc, #916]	; (8005ac8 <_ZN3jlb5GraphC1Ev+0x2418>)
 8005734:	8812      	ldrh	r2, [r2, #0]
 8005736:	801a      	strh	r2, [r3, #0]
 8005738:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800573c:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 8005740:	f607 020c 	addw	r2, r7, #2060	; 0x80c
 8005744:	601a      	str	r2, [r3, #0]
 8005746:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800574a:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 800574e:	2202      	movs	r2, #2
 8005750:	605a      	str	r2, [r3, #4]
 8005752:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 8005756:	4618      	mov	r0, r3
 8005758:	f015 ffed 	bl	801b736 <_ZNSaIcEC1Ev>
 800575c:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 8005760:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8005764:	f2a2 4264 	subw	r2, r2, #1124	; 0x464
 8005768:	f507 60ff 	add.w	r0, r7, #2040	; 0x7f8
 800576c:	ca06      	ldmia	r2, {r1, r2}
 800576e:	f002 f9c2 	bl	8007af6 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8005772:	f507 63ff 	add.w	r3, r7, #2040	; 0x7f8
 8005776:	ed9f 0ad5 	vldr	s0, [pc, #852]	; 8005acc <_ZN3jlb5GraphC1Ev+0x241c>
 800577a:	2201      	movs	r2, #1
 800577c:	2150      	movs	r1, #80	; 0x50
 800577e:	4620      	mov	r0, r4
 8005780:	f7fd ff50 	bl	8003624 <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8005784:	f507 63ff 	add.w	r3, r7, #2040	; 0x7f8
 8005788:	4618      	mov	r0, r3
 800578a:	f002 f967 	bl	8007a5c <_ZNSt6vectorIcSaIcEED1Ev>
 800578e:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 8005792:	4618      	mov	r0, r3
 8005794:	f015 ffd1 	bl	801b73a <_ZNSaIcED1Ev>
            this->operator[]('N').add_edge('K', Direction::LEFT, {'R', 'S', 'T'}, QUARTER_CIRCLE);
 8005798:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800579c:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 80057a0:	214e      	movs	r1, #78	; 0x4e
 80057a2:	6818      	ldr	r0, [r3, #0]
 80057a4:	f001 f9aa 	bl	8006afc <_ZN3jlb5GraphixEc>
 80057a8:	4604      	mov	r4, r0
 80057aa:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80057ae:	f5a3 6388 	sub.w	r3, r3, #1088	; 0x440
 80057b2:	4ac7      	ldr	r2, [pc, #796]	; (8005ad0 <_ZN3jlb5GraphC1Ev+0x2420>)
 80057b4:	6812      	ldr	r2, [r2, #0]
 80057b6:	4611      	mov	r1, r2
 80057b8:	8019      	strh	r1, [r3, #0]
 80057ba:	3302      	adds	r3, #2
 80057bc:	0c12      	lsrs	r2, r2, #16
 80057be:	701a      	strb	r2, [r3, #0]
 80057c0:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80057c4:	f5a3 6389 	sub.w	r3, r3, #1096	; 0x448
 80057c8:	f607 0228 	addw	r2, r7, #2088	; 0x828
 80057cc:	601a      	str	r2, [r3, #0]
 80057ce:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80057d2:	f5a3 6389 	sub.w	r3, r3, #1096	; 0x448
 80057d6:	2203      	movs	r2, #3
 80057d8:	605a      	str	r2, [r3, #4]
 80057da:	f607 032c 	addw	r3, r7, #2092	; 0x82c
 80057de:	4618      	mov	r0, r3
 80057e0:	f015 ffa9 	bl	801b736 <_ZNSaIcEC1Ev>
 80057e4:	f607 032c 	addw	r3, r7, #2092	; 0x82c
 80057e8:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 80057ec:	f5a2 6289 	sub.w	r2, r2, #1096	; 0x448
 80057f0:	f607 0014 	addw	r0, r7, #2068	; 0x814
 80057f4:	ca06      	ldmia	r2, {r1, r2}
 80057f6:	f002 f97e 	bl	8007af6 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 80057fa:	f607 0314 	addw	r3, r7, #2068	; 0x814
 80057fe:	ed9f 0ab3 	vldr	s0, [pc, #716]	; 8005acc <_ZN3jlb5GraphC1Ev+0x241c>
 8005802:	2200      	movs	r2, #0
 8005804:	214b      	movs	r1, #75	; 0x4b
 8005806:	4620      	mov	r0, r4
 8005808:	f7fd ff0c 	bl	8003624 <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 800580c:	f607 0314 	addw	r3, r7, #2068	; 0x814
 8005810:	4618      	mov	r0, r3
 8005812:	f002 f923 	bl	8007a5c <_ZNSt6vectorIcSaIcEED1Ev>
 8005816:	f607 032c 	addw	r3, r7, #2092	; 0x82c
 800581a:	4618      	mov	r0, r3
 800581c:	f015 ff8d 	bl	801b73a <_ZNSaIcED1Ev>
            this->operator[]('N').add_edge('I', Direction::STRAIGHT, {'R', 'S', 'T'}, 2.0f * UNIT);
 8005820:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005824:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8005828:	214e      	movs	r1, #78	; 0x4e
 800582a:	6818      	ldr	r0, [r3, #0]
 800582c:	f001 f966 	bl	8006afc <_ZN3jlb5GraphixEc>
 8005830:	4604      	mov	r4, r0
 8005832:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005836:	f2a3 4324 	subw	r3, r3, #1060	; 0x424
 800583a:	4aa5      	ldr	r2, [pc, #660]	; (8005ad0 <_ZN3jlb5GraphC1Ev+0x2420>)
 800583c:	6812      	ldr	r2, [r2, #0]
 800583e:	4611      	mov	r1, r2
 8005840:	8019      	strh	r1, [r3, #0]
 8005842:	3302      	adds	r3, #2
 8005844:	0c12      	lsrs	r2, r2, #16
 8005846:	701a      	strb	r2, [r3, #0]
 8005848:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800584c:	f2a3 432c 	subw	r3, r3, #1068	; 0x42c
 8005850:	f607 0244 	addw	r2, r7, #2116	; 0x844
 8005854:	601a      	str	r2, [r3, #0]
 8005856:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800585a:	f2a3 432c 	subw	r3, r3, #1068	; 0x42c
 800585e:	2203      	movs	r2, #3
 8005860:	605a      	str	r2, [r3, #4]
 8005862:	f607 0348 	addw	r3, r7, #2120	; 0x848
 8005866:	4618      	mov	r0, r3
 8005868:	f015 ff65 	bl	801b736 <_ZNSaIcEC1Ev>
 800586c:	f607 0348 	addw	r3, r7, #2120	; 0x848
 8005870:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8005874:	f2a2 422c 	subw	r2, r2, #1068	; 0x42c
 8005878:	f507 6003 	add.w	r0, r7, #2096	; 0x830
 800587c:	ca06      	ldmia	r2, {r1, r2}
 800587e:	f002 f93a 	bl	8007af6 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8005882:	f507 6303 	add.w	r3, r7, #2096	; 0x830
 8005886:	ed9f 0a93 	vldr	s0, [pc, #588]	; 8005ad4 <_ZN3jlb5GraphC1Ev+0x2424>
 800588a:	2202      	movs	r2, #2
 800588c:	2149      	movs	r1, #73	; 0x49
 800588e:	4620      	mov	r0, r4
 8005890:	f7fd fec8 	bl	8003624 <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8005894:	f507 6303 	add.w	r3, r7, #2096	; 0x830
 8005898:	4618      	mov	r0, r3
 800589a:	f002 f8df 	bl	8007a5c <_ZNSt6vectorIcSaIcEED1Ev>
 800589e:	f607 0348 	addw	r3, r7, #2120	; 0x848
 80058a2:	4618      	mov	r0, r3
 80058a4:	f015 ff49 	bl	801b73a <_ZNSaIcED1Ev>
            this->operator[]('N').add_edge('L', Direction::RIGHT, {'R', 'S', 'T'}, QUARTER_CIRCLE);
 80058a8:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80058ac:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 80058b0:	214e      	movs	r1, #78	; 0x4e
 80058b2:	6818      	ldr	r0, [r3, #0]
 80058b4:	f001 f922 	bl	8006afc <_ZN3jlb5GraphixEc>
 80058b8:	4604      	mov	r4, r0
 80058ba:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80058be:	f5a3 6381 	sub.w	r3, r3, #1032	; 0x408
 80058c2:	4a83      	ldr	r2, [pc, #524]	; (8005ad0 <_ZN3jlb5GraphC1Ev+0x2420>)
 80058c4:	6812      	ldr	r2, [r2, #0]
 80058c6:	4611      	mov	r1, r2
 80058c8:	8019      	strh	r1, [r3, #0]
 80058ca:	3302      	adds	r3, #2
 80058cc:	0c12      	lsrs	r2, r2, #16
 80058ce:	701a      	strb	r2, [r3, #0]
 80058d0:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80058d4:	f5a3 6382 	sub.w	r3, r3, #1040	; 0x410
 80058d8:	f507 6206 	add.w	r2, r7, #2144	; 0x860
 80058dc:	601a      	str	r2, [r3, #0]
 80058de:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80058e2:	f5a3 6382 	sub.w	r3, r3, #1040	; 0x410
 80058e6:	2203      	movs	r2, #3
 80058e8:	605a      	str	r2, [r3, #4]
 80058ea:	f607 0364 	addw	r3, r7, #2148	; 0x864
 80058ee:	4618      	mov	r0, r3
 80058f0:	f015 ff21 	bl	801b736 <_ZNSaIcEC1Ev>
 80058f4:	f607 0364 	addw	r3, r7, #2148	; 0x864
 80058f8:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 80058fc:	f5a2 6282 	sub.w	r2, r2, #1040	; 0x410
 8005900:	f607 004c 	addw	r0, r7, #2124	; 0x84c
 8005904:	ca06      	ldmia	r2, {r1, r2}
 8005906:	f002 f8f6 	bl	8007af6 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 800590a:	f607 034c 	addw	r3, r7, #2124	; 0x84c
 800590e:	ed9f 0a6f 	vldr	s0, [pc, #444]	; 8005acc <_ZN3jlb5GraphC1Ev+0x241c>
 8005912:	2201      	movs	r2, #1
 8005914:	214c      	movs	r1, #76	; 0x4c
 8005916:	4620      	mov	r0, r4
 8005918:	f7fd fe84 	bl	8003624 <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 800591c:	f607 034c 	addw	r3, r7, #2124	; 0x84c
 8005920:	4618      	mov	r0, r3
 8005922:	f002 f89b 	bl	8007a5c <_ZNSt6vectorIcSaIcEED1Ev>
 8005926:	f607 0364 	addw	r3, r7, #2148	; 0x864
 800592a:	4618      	mov	r0, r3
 800592c:	f015 ff05 	bl	801b73a <_ZNSaIcED1Ev>
            this->operator[]('N').add_edge('T', Direction::LEFT, {'K', 'I', 'L'}, QUARTER_CIRCLE);
 8005930:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005934:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8005938:	214e      	movs	r1, #78	; 0x4e
 800593a:	6818      	ldr	r0, [r3, #0]
 800593c:	f001 f8de 	bl	8006afc <_ZN3jlb5GraphixEc>
 8005940:	4604      	mov	r4, r0
 8005942:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005946:	f5a3 737b 	sub.w	r3, r3, #1004	; 0x3ec
 800594a:	4a63      	ldr	r2, [pc, #396]	; (8005ad8 <_ZN3jlb5GraphC1Ev+0x2428>)
 800594c:	6812      	ldr	r2, [r2, #0]
 800594e:	4611      	mov	r1, r2
 8005950:	8019      	strh	r1, [r3, #0]
 8005952:	3302      	adds	r3, #2
 8005954:	0c12      	lsrs	r2, r2, #16
 8005956:	701a      	strb	r2, [r3, #0]
 8005958:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800595c:	f5a3 737d 	sub.w	r3, r3, #1012	; 0x3f4
 8005960:	f607 027c 	addw	r2, r7, #2172	; 0x87c
 8005964:	601a      	str	r2, [r3, #0]
 8005966:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800596a:	f5a3 737d 	sub.w	r3, r3, #1012	; 0x3f4
 800596e:	2203      	movs	r2, #3
 8005970:	605a      	str	r2, [r3, #4]
 8005972:	f507 6308 	add.w	r3, r7, #2176	; 0x880
 8005976:	4618      	mov	r0, r3
 8005978:	f015 fedd 	bl	801b736 <_ZNSaIcEC1Ev>
 800597c:	f507 6308 	add.w	r3, r7, #2176	; 0x880
 8005980:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8005984:	f5a2 727d 	sub.w	r2, r2, #1012	; 0x3f4
 8005988:	f607 0068 	addw	r0, r7, #2152	; 0x868
 800598c:	ca06      	ldmia	r2, {r1, r2}
 800598e:	f002 f8b2 	bl	8007af6 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8005992:	f607 0368 	addw	r3, r7, #2152	; 0x868
 8005996:	ed9f 0a4d 	vldr	s0, [pc, #308]	; 8005acc <_ZN3jlb5GraphC1Ev+0x241c>
 800599a:	2200      	movs	r2, #0
 800599c:	2154      	movs	r1, #84	; 0x54
 800599e:	4620      	mov	r0, r4
 80059a0:	f7fd fe40 	bl	8003624 <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 80059a4:	f607 0368 	addw	r3, r7, #2152	; 0x868
 80059a8:	4618      	mov	r0, r3
 80059aa:	f002 f857 	bl	8007a5c <_ZNSt6vectorIcSaIcEED1Ev>
 80059ae:	f507 6308 	add.w	r3, r7, #2176	; 0x880
 80059b2:	4618      	mov	r0, r3
 80059b4:	f015 fec1 	bl	801b73a <_ZNSaIcED1Ev>
            this->operator[]('N').add_edge('S', Direction::STRAIGHT, {'K', 'I', 'L'}, UNIT);
 80059b8:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80059bc:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 80059c0:	214e      	movs	r1, #78	; 0x4e
 80059c2:	6818      	ldr	r0, [r3, #0]
 80059c4:	f001 f89a 	bl	8006afc <_ZN3jlb5GraphixEc>
 80059c8:	4604      	mov	r4, r0
 80059ca:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80059ce:	f5a3 7374 	sub.w	r3, r3, #976	; 0x3d0
 80059d2:	4a41      	ldr	r2, [pc, #260]	; (8005ad8 <_ZN3jlb5GraphC1Ev+0x2428>)
 80059d4:	6812      	ldr	r2, [r2, #0]
 80059d6:	4611      	mov	r1, r2
 80059d8:	8019      	strh	r1, [r3, #0]
 80059da:	3302      	adds	r3, #2
 80059dc:	0c12      	lsrs	r2, r2, #16
 80059de:	701a      	strb	r2, [r3, #0]
 80059e0:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80059e4:	f5a3 7376 	sub.w	r3, r3, #984	; 0x3d8
 80059e8:	f607 0298 	addw	r2, r7, #2200	; 0x898
 80059ec:	601a      	str	r2, [r3, #0]
 80059ee:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80059f2:	f5a3 7376 	sub.w	r3, r3, #984	; 0x3d8
 80059f6:	2203      	movs	r2, #3
 80059f8:	605a      	str	r2, [r3, #4]
 80059fa:	f607 039c 	addw	r3, r7, #2204	; 0x89c
 80059fe:	4618      	mov	r0, r3
 8005a00:	f015 fe99 	bl	801b736 <_ZNSaIcEC1Ev>
 8005a04:	f607 039c 	addw	r3, r7, #2204	; 0x89c
 8005a08:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8005a0c:	f5a2 7276 	sub.w	r2, r2, #984	; 0x3d8
 8005a10:	f607 0084 	addw	r0, r7, #2180	; 0x884
 8005a14:	ca06      	ldmia	r2, {r1, r2}
 8005a16:	f002 f86e 	bl	8007af6 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8005a1a:	f607 0384 	addw	r3, r7, #2180	; 0x884
 8005a1e:	ed9f 0a2f 	vldr	s0, [pc, #188]	; 8005adc <_ZN3jlb5GraphC1Ev+0x242c>
 8005a22:	2202      	movs	r2, #2
 8005a24:	2153      	movs	r1, #83	; 0x53
 8005a26:	4620      	mov	r0, r4
 8005a28:	f7fd fdfc 	bl	8003624 <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8005a2c:	f607 0384 	addw	r3, r7, #2180	; 0x884
 8005a30:	4618      	mov	r0, r3
 8005a32:	f002 f813 	bl	8007a5c <_ZNSt6vectorIcSaIcEED1Ev>
 8005a36:	f607 039c 	addw	r3, r7, #2204	; 0x89c
 8005a3a:	4618      	mov	r0, r3
 8005a3c:	f015 fe7d 	bl	801b73a <_ZNSaIcED1Ev>
            this->operator[]('N').add_edge('R', Direction::RIGHT, {'K', 'I', 'L'}, QUARTER_CIRCLE);
 8005a40:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005a44:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8005a48:	214e      	movs	r1, #78	; 0x4e
 8005a4a:	6818      	ldr	r0, [r3, #0]
 8005a4c:	f001 f856 	bl	8006afc <_ZN3jlb5GraphixEc>
 8005a50:	4604      	mov	r4, r0
 8005a52:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005a56:	f5a3 736d 	sub.w	r3, r3, #948	; 0x3b4
 8005a5a:	4a1f      	ldr	r2, [pc, #124]	; (8005ad8 <_ZN3jlb5GraphC1Ev+0x2428>)
 8005a5c:	6812      	ldr	r2, [r2, #0]
 8005a5e:	4611      	mov	r1, r2
 8005a60:	8019      	strh	r1, [r3, #0]
 8005a62:	3302      	adds	r3, #2
 8005a64:	0c12      	lsrs	r2, r2, #16
 8005a66:	701a      	strb	r2, [r3, #0]
 8005a68:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005a6c:	f5a3 736f 	sub.w	r3, r3, #956	; 0x3bc
 8005a70:	f607 02b4 	addw	r2, r7, #2228	; 0x8b4
 8005a74:	601a      	str	r2, [r3, #0]
 8005a76:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005a7a:	f5a3 736f 	sub.w	r3, r3, #956	; 0x3bc
 8005a7e:	2203      	movs	r2, #3
 8005a80:	605a      	str	r2, [r3, #4]
 8005a82:	f607 03b8 	addw	r3, r7, #2232	; 0x8b8
 8005a86:	4618      	mov	r0, r3
 8005a88:	f015 fe55 	bl	801b736 <_ZNSaIcEC1Ev>
 8005a8c:	f607 03b8 	addw	r3, r7, #2232	; 0x8b8
 8005a90:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8005a94:	f5a2 726f 	sub.w	r2, r2, #956	; 0x3bc
 8005a98:	f507 600a 	add.w	r0, r7, #2208	; 0x8a0
 8005a9c:	ca06      	ldmia	r2, {r1, r2}
 8005a9e:	f002 f82a 	bl	8007af6 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8005aa2:	f507 630a 	add.w	r3, r7, #2208	; 0x8a0
 8005aa6:	ed9f 0a09 	vldr	s0, [pc, #36]	; 8005acc <_ZN3jlb5GraphC1Ev+0x241c>
 8005aaa:	2201      	movs	r2, #1
 8005aac:	2152      	movs	r1, #82	; 0x52
 8005aae:	4620      	mov	r0, r4
 8005ab0:	f7fd fdb8 	bl	8003624 <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8005ab4:	f507 630a 	add.w	r3, r7, #2208	; 0x8a0
 8005ab8:	4618      	mov	r0, r3
 8005aba:	f001 ffcf 	bl	8007a5c <_ZNSt6vectorIcSaIcEED1Ev>
 8005abe:	f607 03b8 	addw	r3, r7, #2232	; 0x8b8
 8005ac2:	4618      	mov	r0, r3
 8005ac4:	e00c      	b.n	8005ae0 <_ZN3jlb5GraphC1Ev+0x2430>
 8005ac6:	bf00      	nop
 8005ac8:	0801f0b4 	.word	0x0801f0b4
 8005acc:	3f71463a 	.word	0x3f71463a
 8005ad0:	0801f0b8 	.word	0x0801f0b8
 8005ad4:	3f99999a 	.word	0x3f99999a
 8005ad8:	0801f0bc 	.word	0x0801f0bc
 8005adc:	3f19999a 	.word	0x3f19999a
 8005ae0:	f015 fe2b 	bl	801b73a <_ZNSaIcED1Ev>
            this->operator[]('O').add_edge('L', Direction::LEFT, {'T', 'U', 'W'}, QUARTER_CIRCLE);
 8005ae4:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005ae8:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8005aec:	214f      	movs	r1, #79	; 0x4f
 8005aee:	6818      	ldr	r0, [r3, #0]
 8005af0:	f001 f804 	bl	8006afc <_ZN3jlb5GraphixEc>
 8005af4:	4604      	mov	r4, r0
 8005af6:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005afa:	f5a3 7366 	sub.w	r3, r3, #920	; 0x398
 8005afe:	4aeb      	ldr	r2, [pc, #940]	; (8005eac <_ZN3jlb5GraphC1Ev+0x27fc>)
 8005b00:	6812      	ldr	r2, [r2, #0]
 8005b02:	4611      	mov	r1, r2
 8005b04:	8019      	strh	r1, [r3, #0]
 8005b06:	3302      	adds	r3, #2
 8005b08:	0c12      	lsrs	r2, r2, #16
 8005b0a:	701a      	strb	r2, [r3, #0]
 8005b0c:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005b10:	f5a3 7368 	sub.w	r3, r3, #928	; 0x3a0
 8005b14:	f507 620d 	add.w	r2, r7, #2256	; 0x8d0
 8005b18:	601a      	str	r2, [r3, #0]
 8005b1a:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005b1e:	f5a3 7368 	sub.w	r3, r3, #928	; 0x3a0
 8005b22:	2203      	movs	r2, #3
 8005b24:	605a      	str	r2, [r3, #4]
 8005b26:	f607 03d4 	addw	r3, r7, #2260	; 0x8d4
 8005b2a:	4618      	mov	r0, r3
 8005b2c:	f015 fe03 	bl	801b736 <_ZNSaIcEC1Ev>
 8005b30:	f607 03d4 	addw	r3, r7, #2260	; 0x8d4
 8005b34:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8005b38:	f5a2 7268 	sub.w	r2, r2, #928	; 0x3a0
 8005b3c:	f607 00bc 	addw	r0, r7, #2236	; 0x8bc
 8005b40:	ca06      	ldmia	r2, {r1, r2}
 8005b42:	f001 ffd8 	bl	8007af6 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8005b46:	f607 03bc 	addw	r3, r7, #2236	; 0x8bc
 8005b4a:	ed9f 0adc 	vldr	s0, [pc, #880]	; 8005ebc <_ZN3jlb5GraphC1Ev+0x280c>
 8005b4e:	2200      	movs	r2, #0
 8005b50:	214c      	movs	r1, #76	; 0x4c
 8005b52:	4620      	mov	r0, r4
 8005b54:	f7fd fd66 	bl	8003624 <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8005b58:	f607 03bc 	addw	r3, r7, #2236	; 0x8bc
 8005b5c:	4618      	mov	r0, r3
 8005b5e:	f001 ff7d 	bl	8007a5c <_ZNSt6vectorIcSaIcEED1Ev>
 8005b62:	f607 03d4 	addw	r3, r7, #2260	; 0x8d4
 8005b66:	4618      	mov	r0, r3
 8005b68:	f015 fde7 	bl	801b73a <_ZNSaIcED1Ev>
            this->operator[]('O').add_edge('U', Direction::LEFT, {'L'}, QUARTER_CIRCLE);
 8005b6c:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005b70:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8005b74:	214f      	movs	r1, #79	; 0x4f
 8005b76:	6818      	ldr	r0, [r3, #0]
 8005b78:	f000 ffc0 	bl	8006afc <_ZN3jlb5GraphixEc>
 8005b7c:	4604      	mov	r4, r0
 8005b7e:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005b82:	f5a3 735f 	sub.w	r3, r3, #892	; 0x37c
 8005b86:	224c      	movs	r2, #76	; 0x4c
 8005b88:	701a      	strb	r2, [r3, #0]
 8005b8a:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005b8e:	f5a3 7361 	sub.w	r3, r3, #900	; 0x384
 8005b92:	f607 02ec 	addw	r2, r7, #2284	; 0x8ec
 8005b96:	601a      	str	r2, [r3, #0]
 8005b98:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005b9c:	f5a3 7361 	sub.w	r3, r3, #900	; 0x384
 8005ba0:	2201      	movs	r2, #1
 8005ba2:	605a      	str	r2, [r3, #4]
 8005ba4:	f507 630f 	add.w	r3, r7, #2288	; 0x8f0
 8005ba8:	4618      	mov	r0, r3
 8005baa:	f015 fdc4 	bl	801b736 <_ZNSaIcEC1Ev>
 8005bae:	f507 630f 	add.w	r3, r7, #2288	; 0x8f0
 8005bb2:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8005bb6:	f5a2 7261 	sub.w	r2, r2, #900	; 0x384
 8005bba:	f607 00d8 	addw	r0, r7, #2264	; 0x8d8
 8005bbe:	ca06      	ldmia	r2, {r1, r2}
 8005bc0:	f001 ff99 	bl	8007af6 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8005bc4:	f607 03d8 	addw	r3, r7, #2264	; 0x8d8
 8005bc8:	ed9f 0abc 	vldr	s0, [pc, #752]	; 8005ebc <_ZN3jlb5GraphC1Ev+0x280c>
 8005bcc:	2200      	movs	r2, #0
 8005bce:	2155      	movs	r1, #85	; 0x55
 8005bd0:	4620      	mov	r0, r4
 8005bd2:	f7fd fd27 	bl	8003624 <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8005bd6:	f607 03d8 	addw	r3, r7, #2264	; 0x8d8
 8005bda:	4618      	mov	r0, r3
 8005bdc:	f001 ff3e 	bl	8007a5c <_ZNSt6vectorIcSaIcEED1Ev>
 8005be0:	f507 630f 	add.w	r3, r7, #2288	; 0x8f0
 8005be4:	4618      	mov	r0, r3
 8005be6:	f015 fda8 	bl	801b73a <_ZNSaIcED1Ev>
            this->operator[]('O').add_edge('W', Direction::STRAIGHT, {'L'}, UNIT + QUARTER_CIRCLE);
 8005bea:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005bee:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8005bf2:	214f      	movs	r1, #79	; 0x4f
 8005bf4:	6818      	ldr	r0, [r3, #0]
 8005bf6:	f000 ff81 	bl	8006afc <_ZN3jlb5GraphixEc>
 8005bfa:	4604      	mov	r4, r0
 8005bfc:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005c00:	f5a3 7358 	sub.w	r3, r3, #864	; 0x360
 8005c04:	224c      	movs	r2, #76	; 0x4c
 8005c06:	701a      	strb	r2, [r3, #0]
 8005c08:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005c0c:	f5a3 735a 	sub.w	r3, r3, #872	; 0x368
 8005c10:	f607 1208 	addw	r2, r7, #2312	; 0x908
 8005c14:	601a      	str	r2, [r3, #0]
 8005c16:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005c1a:	f5a3 735a 	sub.w	r3, r3, #872	; 0x368
 8005c1e:	2201      	movs	r2, #1
 8005c20:	605a      	str	r2, [r3, #4]
 8005c22:	f607 130c 	addw	r3, r7, #2316	; 0x90c
 8005c26:	4618      	mov	r0, r3
 8005c28:	f015 fd85 	bl	801b736 <_ZNSaIcEC1Ev>
 8005c2c:	f607 130c 	addw	r3, r7, #2316	; 0x90c
 8005c30:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8005c34:	f5a2 725a 	sub.w	r2, r2, #872	; 0x368
 8005c38:	f607 00f4 	addw	r0, r7, #2292	; 0x8f4
 8005c3c:	ca06      	ldmia	r2, {r1, r2}
 8005c3e:	f001 ff5a 	bl	8007af6 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8005c42:	f607 03f4 	addw	r3, r7, #2292	; 0x8f4
 8005c46:	ed9f 0a9a 	vldr	s0, [pc, #616]	; 8005eb0 <_ZN3jlb5GraphC1Ev+0x2800>
 8005c4a:	2202      	movs	r2, #2
 8005c4c:	2157      	movs	r1, #87	; 0x57
 8005c4e:	4620      	mov	r0, r4
 8005c50:	f7fd fce8 	bl	8003624 <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8005c54:	f607 03f4 	addw	r3, r7, #2292	; 0x8f4
 8005c58:	4618      	mov	r0, r3
 8005c5a:	f001 feff 	bl	8007a5c <_ZNSt6vectorIcSaIcEED1Ev>
 8005c5e:	f607 130c 	addw	r3, r7, #2316	; 0x90c
 8005c62:	4618      	mov	r0, r3
 8005c64:	f015 fd69 	bl	801b73a <_ZNSaIcED1Ev>
            this->operator[]('O').add_edge('T', Direction::RIGHT, {'L'}, QUARTER_CIRCLE);
 8005c68:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005c6c:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8005c70:	214f      	movs	r1, #79	; 0x4f
 8005c72:	6818      	ldr	r0, [r3, #0]
 8005c74:	f000 ff42 	bl	8006afc <_ZN3jlb5GraphixEc>
 8005c78:	4604      	mov	r4, r0
 8005c7a:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005c7e:	f5a3 7351 	sub.w	r3, r3, #836	; 0x344
 8005c82:	224c      	movs	r2, #76	; 0x4c
 8005c84:	701a      	strb	r2, [r3, #0]
 8005c86:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005c8a:	f5a3 7353 	sub.w	r3, r3, #844	; 0x34c
 8005c8e:	f607 1224 	addw	r2, r7, #2340	; 0x924
 8005c92:	601a      	str	r2, [r3, #0]
 8005c94:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005c98:	f5a3 7353 	sub.w	r3, r3, #844	; 0x34c
 8005c9c:	2201      	movs	r2, #1
 8005c9e:	605a      	str	r2, [r3, #4]
 8005ca0:	f607 1328 	addw	r3, r7, #2344	; 0x928
 8005ca4:	4618      	mov	r0, r3
 8005ca6:	f015 fd46 	bl	801b736 <_ZNSaIcEC1Ev>
 8005caa:	f607 1328 	addw	r3, r7, #2344	; 0x928
 8005cae:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8005cb2:	f5a2 7253 	sub.w	r2, r2, #844	; 0x34c
 8005cb6:	f507 6011 	add.w	r0, r7, #2320	; 0x910
 8005cba:	ca06      	ldmia	r2, {r1, r2}
 8005cbc:	f001 ff1b 	bl	8007af6 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8005cc0:	f507 6311 	add.w	r3, r7, #2320	; 0x910
 8005cc4:	ed9f 0a7d 	vldr	s0, [pc, #500]	; 8005ebc <_ZN3jlb5GraphC1Ev+0x280c>
 8005cc8:	2201      	movs	r2, #1
 8005cca:	2154      	movs	r1, #84	; 0x54
 8005ccc:	4620      	mov	r0, r4
 8005cce:	f7fd fca9 	bl	8003624 <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8005cd2:	f507 6311 	add.w	r3, r7, #2320	; 0x910
 8005cd6:	4618      	mov	r0, r3
 8005cd8:	f001 fec0 	bl	8007a5c <_ZNSt6vectorIcSaIcEED1Ev>
 8005cdc:	f607 1328 	addw	r3, r7, #2344	; 0x928
 8005ce0:	4618      	mov	r0, r3
 8005ce2:	f015 fd2a 	bl	801b73a <_ZNSaIcED1Ev>
            this->operator[]('P').add_edge('M', Direction::LEFT, {'P'}, QUARTER_CIRCLE);
 8005ce6:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005cea:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8005cee:	2150      	movs	r1, #80	; 0x50
 8005cf0:	6818      	ldr	r0, [r3, #0]
 8005cf2:	f000 ff03 	bl	8006afc <_ZN3jlb5GraphixEc>
 8005cf6:	4604      	mov	r4, r0
 8005cf8:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005cfc:	f5a3 734a 	sub.w	r3, r3, #808	; 0x328
 8005d00:	2250      	movs	r2, #80	; 0x50
 8005d02:	701a      	strb	r2, [r3, #0]
 8005d04:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005d08:	f5a3 734c 	sub.w	r3, r3, #816	; 0x330
 8005d0c:	f507 6214 	add.w	r2, r7, #2368	; 0x940
 8005d10:	601a      	str	r2, [r3, #0]
 8005d12:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005d16:	f5a3 734c 	sub.w	r3, r3, #816	; 0x330
 8005d1a:	2201      	movs	r2, #1
 8005d1c:	605a      	str	r2, [r3, #4]
 8005d1e:	f607 1344 	addw	r3, r7, #2372	; 0x944
 8005d22:	4618      	mov	r0, r3
 8005d24:	f015 fd07 	bl	801b736 <_ZNSaIcEC1Ev>
 8005d28:	f607 1344 	addw	r3, r7, #2372	; 0x944
 8005d2c:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8005d30:	f5a2 724c 	sub.w	r2, r2, #816	; 0x330
 8005d34:	f607 102c 	addw	r0, r7, #2348	; 0x92c
 8005d38:	ca06      	ldmia	r2, {r1, r2}
 8005d3a:	f001 fedc 	bl	8007af6 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8005d3e:	f607 132c 	addw	r3, r7, #2348	; 0x92c
 8005d42:	ed9f 0a5e 	vldr	s0, [pc, #376]	; 8005ebc <_ZN3jlb5GraphC1Ev+0x280c>
 8005d46:	2200      	movs	r2, #0
 8005d48:	214d      	movs	r1, #77	; 0x4d
 8005d4a:	4620      	mov	r0, r4
 8005d4c:	f7fd fc6a 	bl	8003624 <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8005d50:	f607 132c 	addw	r3, r7, #2348	; 0x92c
 8005d54:	4618      	mov	r0, r3
 8005d56:	f001 fe81 	bl	8007a5c <_ZNSt6vectorIcSaIcEED1Ev>
 8005d5a:	f607 1344 	addw	r3, r7, #2372	; 0x944
 8005d5e:	4618      	mov	r0, r3
 8005d60:	f015 fceb 	bl	801b73a <_ZNSaIcED1Ev>
            this->operator[]('P').add_edge('Q', Direction::STRAIGHT, {'P'}, UNIT);
 8005d64:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005d68:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8005d6c:	2150      	movs	r1, #80	; 0x50
 8005d6e:	6818      	ldr	r0, [r3, #0]
 8005d70:	f000 fec4 	bl	8006afc <_ZN3jlb5GraphixEc>
 8005d74:	4604      	mov	r4, r0
 8005d76:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005d7a:	f5a3 7343 	sub.w	r3, r3, #780	; 0x30c
 8005d7e:	2250      	movs	r2, #80	; 0x50
 8005d80:	701a      	strb	r2, [r3, #0]
 8005d82:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005d86:	f5a3 7345 	sub.w	r3, r3, #788	; 0x314
 8005d8a:	f607 125c 	addw	r2, r7, #2396	; 0x95c
 8005d8e:	601a      	str	r2, [r3, #0]
 8005d90:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005d94:	f5a3 7345 	sub.w	r3, r3, #788	; 0x314
 8005d98:	2201      	movs	r2, #1
 8005d9a:	605a      	str	r2, [r3, #4]
 8005d9c:	f507 6316 	add.w	r3, r7, #2400	; 0x960
 8005da0:	4618      	mov	r0, r3
 8005da2:	f015 fcc8 	bl	801b736 <_ZNSaIcEC1Ev>
 8005da6:	f507 6316 	add.w	r3, r7, #2400	; 0x960
 8005daa:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8005dae:	f5a2 7245 	sub.w	r2, r2, #788	; 0x314
 8005db2:	f607 1048 	addw	r0, r7, #2376	; 0x948
 8005db6:	ca06      	ldmia	r2, {r1, r2}
 8005db8:	f001 fe9d 	bl	8007af6 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8005dbc:	f607 1348 	addw	r3, r7, #2376	; 0x948
 8005dc0:	ed9f 0a3d 	vldr	s0, [pc, #244]	; 8005eb8 <_ZN3jlb5GraphC1Ev+0x2808>
 8005dc4:	2202      	movs	r2, #2
 8005dc6:	2151      	movs	r1, #81	; 0x51
 8005dc8:	4620      	mov	r0, r4
 8005dca:	f7fd fc2b 	bl	8003624 <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8005dce:	f607 1348 	addw	r3, r7, #2376	; 0x948
 8005dd2:	4618      	mov	r0, r3
 8005dd4:	f001 fe42 	bl	8007a5c <_ZNSt6vectorIcSaIcEED1Ev>
 8005dd8:	f507 6316 	add.w	r3, r7, #2400	; 0x960
 8005ddc:	4618      	mov	r0, r3
 8005dde:	f015 fcac 	bl	801b73a <_ZNSaIcED1Ev>
            this->operator[]('Q').add_edge('P', Direction::STRAIGHT, {'R'}, UNIT);
 8005de2:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005de6:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8005dea:	2151      	movs	r1, #81	; 0x51
 8005dec:	6818      	ldr	r0, [r3, #0]
 8005dee:	f000 fe85 	bl	8006afc <_ZN3jlb5GraphixEc>
 8005df2:	4604      	mov	r4, r0
 8005df4:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005df8:	f5a3 733c 	sub.w	r3, r3, #752	; 0x2f0
 8005dfc:	2252      	movs	r2, #82	; 0x52
 8005dfe:	701a      	strb	r2, [r3, #0]
 8005e00:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005e04:	f5a3 733e 	sub.w	r3, r3, #760	; 0x2f8
 8005e08:	f607 1278 	addw	r2, r7, #2424	; 0x978
 8005e0c:	601a      	str	r2, [r3, #0]
 8005e0e:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005e12:	f5a3 733e 	sub.w	r3, r3, #760	; 0x2f8
 8005e16:	2201      	movs	r2, #1
 8005e18:	605a      	str	r2, [r3, #4]
 8005e1a:	f607 137c 	addw	r3, r7, #2428	; 0x97c
 8005e1e:	4618      	mov	r0, r3
 8005e20:	f015 fc89 	bl	801b736 <_ZNSaIcEC1Ev>
 8005e24:	f607 137c 	addw	r3, r7, #2428	; 0x97c
 8005e28:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8005e2c:	f5a2 723e 	sub.w	r2, r2, #760	; 0x2f8
 8005e30:	f607 1064 	addw	r0, r7, #2404	; 0x964
 8005e34:	ca06      	ldmia	r2, {r1, r2}
 8005e36:	f001 fe5e 	bl	8007af6 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8005e3a:	f607 1364 	addw	r3, r7, #2404	; 0x964
 8005e3e:	ed9f 0a1e 	vldr	s0, [pc, #120]	; 8005eb8 <_ZN3jlb5GraphC1Ev+0x2808>
 8005e42:	2202      	movs	r2, #2
 8005e44:	2150      	movs	r1, #80	; 0x50
 8005e46:	4620      	mov	r0, r4
 8005e48:	f7fd fbec 	bl	8003624 <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8005e4c:	f607 1364 	addw	r3, r7, #2404	; 0x964
 8005e50:	4618      	mov	r0, r3
 8005e52:	f001 fe03 	bl	8007a5c <_ZNSt6vectorIcSaIcEED1Ev>
 8005e56:	f607 137c 	addw	r3, r7, #2428	; 0x97c
 8005e5a:	4618      	mov	r0, r3
 8005e5c:	f015 fc6d 	bl	801b73a <_ZNSaIcED1Ev>
            this->operator[]('Q').add_edge('M', Direction::STRAIGHT, {'V', 'X'}, UNIT);
 8005e60:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005e64:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8005e68:	2151      	movs	r1, #81	; 0x51
 8005e6a:	6818      	ldr	r0, [r3, #0]
 8005e6c:	f000 fe46 	bl	8006afc <_ZN3jlb5GraphixEc>
 8005e70:	4604      	mov	r4, r0
 8005e72:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005e76:	f5a3 7335 	sub.w	r3, r3, #724	; 0x2d4
 8005e7a:	4a0e      	ldr	r2, [pc, #56]	; (8005eb4 <_ZN3jlb5GraphC1Ev+0x2804>)
 8005e7c:	8812      	ldrh	r2, [r2, #0]
 8005e7e:	801a      	strh	r2, [r3, #0]
 8005e80:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005e84:	f5a3 7337 	sub.w	r3, r3, #732	; 0x2dc
 8005e88:	f607 1294 	addw	r2, r7, #2452	; 0x994
 8005e8c:	601a      	str	r2, [r3, #0]
 8005e8e:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005e92:	f5a3 7337 	sub.w	r3, r3, #732	; 0x2dc
 8005e96:	2202      	movs	r2, #2
 8005e98:	605a      	str	r2, [r3, #4]
 8005e9a:	f607 1398 	addw	r3, r7, #2456	; 0x998
 8005e9e:	4618      	mov	r0, r3
 8005ea0:	f015 fc49 	bl	801b736 <_ZNSaIcEC1Ev>
 8005ea4:	f607 1398 	addw	r3, r7, #2456	; 0x998
 8005ea8:	e00c      	b.n	8005ec4 <_ZN3jlb5GraphC1Ev+0x2814>
 8005eaa:	bf00      	nop
 8005eac:	0801f0c0 	.word	0x0801f0c0
 8005eb0:	3fc56fea 	.word	0x3fc56fea
 8005eb4:	0801f0c4 	.word	0x0801f0c4
 8005eb8:	3f19999a 	.word	0x3f19999a
 8005ebc:	3f71463a 	.word	0x3f71463a
 8005ec0:	401c518f 	.word	0x401c518f
 8005ec4:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8005ec8:	f5a2 7237 	sub.w	r2, r2, #732	; 0x2dc
 8005ecc:	f507 6018 	add.w	r0, r7, #2432	; 0x980
 8005ed0:	ca06      	ldmia	r2, {r1, r2}
 8005ed2:	f001 fe10 	bl	8007af6 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8005ed6:	f507 6318 	add.w	r3, r7, #2432	; 0x980
 8005eda:	ed1f 0a09 	vldr	s0, [pc, #-36]	; 8005eb8 <_ZN3jlb5GraphC1Ev+0x2808>
 8005ede:	2202      	movs	r2, #2
 8005ee0:	214d      	movs	r1, #77	; 0x4d
 8005ee2:	4620      	mov	r0, r4
 8005ee4:	f7fd fb9e 	bl	8003624 <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8005ee8:	f507 6318 	add.w	r3, r7, #2432	; 0x980
 8005eec:	4618      	mov	r0, r3
 8005eee:	f001 fdb5 	bl	8007a5c <_ZNSt6vectorIcSaIcEED1Ev>
 8005ef2:	f607 1398 	addw	r3, r7, #2456	; 0x998
 8005ef6:	4618      	mov	r0, r3
 8005ef8:	f015 fc1f 	bl	801b73a <_ZNSaIcED1Ev>
            this->operator[]('Q').add_edge('R', Direction::STRAIGHT, {'P'}, UNIT);
 8005efc:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005f00:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8005f04:	2151      	movs	r1, #81	; 0x51
 8005f06:	6818      	ldr	r0, [r3, #0]
 8005f08:	f000 fdf8 	bl	8006afc <_ZN3jlb5GraphixEc>
 8005f0c:	4604      	mov	r4, r0
 8005f0e:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005f12:	f5a3 732e 	sub.w	r3, r3, #696	; 0x2b8
 8005f16:	2250      	movs	r2, #80	; 0x50
 8005f18:	701a      	strb	r2, [r3, #0]
 8005f1a:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005f1e:	f5a3 7330 	sub.w	r3, r3, #704	; 0x2c0
 8005f22:	f507 621b 	add.w	r2, r7, #2480	; 0x9b0
 8005f26:	601a      	str	r2, [r3, #0]
 8005f28:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005f2c:	f5a3 7330 	sub.w	r3, r3, #704	; 0x2c0
 8005f30:	2201      	movs	r2, #1
 8005f32:	605a      	str	r2, [r3, #4]
 8005f34:	f607 13b4 	addw	r3, r7, #2484	; 0x9b4
 8005f38:	4618      	mov	r0, r3
 8005f3a:	f015 fbfc 	bl	801b736 <_ZNSaIcEC1Ev>
 8005f3e:	f607 13b4 	addw	r3, r7, #2484	; 0x9b4
 8005f42:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8005f46:	f5a2 7230 	sub.w	r2, r2, #704	; 0x2c0
 8005f4a:	f607 109c 	addw	r0, r7, #2460	; 0x99c
 8005f4e:	ca06      	ldmia	r2, {r1, r2}
 8005f50:	f001 fdd1 	bl	8007af6 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8005f54:	f607 139c 	addw	r3, r7, #2460	; 0x99c
 8005f58:	ed1f 0a29 	vldr	s0, [pc, #-164]	; 8005eb8 <_ZN3jlb5GraphC1Ev+0x2808>
 8005f5c:	2202      	movs	r2, #2
 8005f5e:	2152      	movs	r1, #82	; 0x52
 8005f60:	4620      	mov	r0, r4
 8005f62:	f7fd fb5f 	bl	8003624 <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8005f66:	f607 139c 	addw	r3, r7, #2460	; 0x99c
 8005f6a:	4618      	mov	r0, r3
 8005f6c:	f001 fd76 	bl	8007a5c <_ZNSt6vectorIcSaIcEED1Ev>
 8005f70:	f607 13b4 	addw	r3, r7, #2484	; 0x9b4
 8005f74:	4618      	mov	r0, r3
 8005f76:	f015 fbe0 	bl	801b73a <_ZNSaIcED1Ev>
            this->operator[]('Q').add_edge('V', Direction::LEFT, {'M'}, QUARTER_CIRCLE);
 8005f7a:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005f7e:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8005f82:	2151      	movs	r1, #81	; 0x51
 8005f84:	6818      	ldr	r0, [r3, #0]
 8005f86:	f000 fdb9 	bl	8006afc <_ZN3jlb5GraphixEc>
 8005f8a:	4604      	mov	r4, r0
 8005f8c:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005f90:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 8005f94:	224d      	movs	r2, #77	; 0x4d
 8005f96:	701a      	strb	r2, [r3, #0]
 8005f98:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005f9c:	f5a3 7329 	sub.w	r3, r3, #676	; 0x2a4
 8005fa0:	f607 12cc 	addw	r2, r7, #2508	; 0x9cc
 8005fa4:	601a      	str	r2, [r3, #0]
 8005fa6:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005faa:	f5a3 7329 	sub.w	r3, r3, #676	; 0x2a4
 8005fae:	2201      	movs	r2, #1
 8005fb0:	605a      	str	r2, [r3, #4]
 8005fb2:	f507 631d 	add.w	r3, r7, #2512	; 0x9d0
 8005fb6:	4618      	mov	r0, r3
 8005fb8:	f015 fbbd 	bl	801b736 <_ZNSaIcEC1Ev>
 8005fbc:	f507 631d 	add.w	r3, r7, #2512	; 0x9d0
 8005fc0:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8005fc4:	f5a2 7229 	sub.w	r2, r2, #676	; 0x2a4
 8005fc8:	f607 10b8 	addw	r0, r7, #2488	; 0x9b8
 8005fcc:	ca06      	ldmia	r2, {r1, r2}
 8005fce:	f001 fd92 	bl	8007af6 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8005fd2:	f607 13b8 	addw	r3, r7, #2488	; 0x9b8
 8005fd6:	ed1f 0a47 	vldr	s0, [pc, #-284]	; 8005ebc <_ZN3jlb5GraphC1Ev+0x280c>
 8005fda:	2200      	movs	r2, #0
 8005fdc:	2156      	movs	r1, #86	; 0x56
 8005fde:	4620      	mov	r0, r4
 8005fe0:	f7fd fb20 	bl	8003624 <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8005fe4:	f607 13b8 	addw	r3, r7, #2488	; 0x9b8
 8005fe8:	4618      	mov	r0, r3
 8005fea:	f001 fd37 	bl	8007a5c <_ZNSt6vectorIcSaIcEED1Ev>
 8005fee:	f507 631d 	add.w	r3, r7, #2512	; 0x9d0
 8005ff2:	4618      	mov	r0, r3
 8005ff4:	f015 fba1 	bl	801b73a <_ZNSaIcED1Ev>
            this->operator[]('Q').add_edge('X', Direction::STRAIGHT, {'M'}, 2.5f * UNIT + QUARTER_CIRCLE);
 8005ff8:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005ffc:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8006000:	2151      	movs	r1, #81	; 0x51
 8006002:	6818      	ldr	r0, [r3, #0]
 8006004:	f000 fd7a 	bl	8006afc <_ZN3jlb5GraphixEc>
 8006008:	4604      	mov	r4, r0
 800600a:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800600e:	f5a3 7320 	sub.w	r3, r3, #640	; 0x280
 8006012:	224d      	movs	r2, #77	; 0x4d
 8006014:	701a      	strb	r2, [r3, #0]
 8006016:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800601a:	f5a3 7322 	sub.w	r3, r3, #648	; 0x288
 800601e:	f607 12e8 	addw	r2, r7, #2536	; 0x9e8
 8006022:	601a      	str	r2, [r3, #0]
 8006024:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006028:	f5a3 7322 	sub.w	r3, r3, #648	; 0x288
 800602c:	2201      	movs	r2, #1
 800602e:	605a      	str	r2, [r3, #4]
 8006030:	f607 13ec 	addw	r3, r7, #2540	; 0x9ec
 8006034:	4618      	mov	r0, r3
 8006036:	f015 fb7e 	bl	801b736 <_ZNSaIcEC1Ev>
 800603a:	f607 13ec 	addw	r3, r7, #2540	; 0x9ec
 800603e:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8006042:	f5a2 7222 	sub.w	r2, r2, #648	; 0x288
 8006046:	f607 10d4 	addw	r0, r7, #2516	; 0x9d4
 800604a:	ca06      	ldmia	r2, {r1, r2}
 800604c:	f001 fd53 	bl	8007af6 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8006050:	f607 13d4 	addw	r3, r7, #2516	; 0x9d4
 8006054:	ed1f 0a66 	vldr	s0, [pc, #-408]	; 8005ec0 <_ZN3jlb5GraphC1Ev+0x2810>
 8006058:	2202      	movs	r2, #2
 800605a:	2158      	movs	r1, #88	; 0x58
 800605c:	4620      	mov	r0, r4
 800605e:	f7fd fae1 	bl	8003624 <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8006062:	f607 13d4 	addw	r3, r7, #2516	; 0x9d4
 8006066:	4618      	mov	r0, r3
 8006068:	f001 fcf8 	bl	8007a5c <_ZNSt6vectorIcSaIcEED1Ev>
 800606c:	f607 13ec 	addw	r3, r7, #2540	; 0x9ec
 8006070:	4618      	mov	r0, r3
 8006072:	f015 fb62 	bl	801b73a <_ZNSaIcED1Ev>
            this->operator[]('R').add_edge('Q', Direction::STRAIGHT, {'N', 'S'}, UNIT);
 8006076:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800607a:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 800607e:	2152      	movs	r1, #82	; 0x52
 8006080:	6818      	ldr	r0, [r3, #0]
 8006082:	f000 fd3b 	bl	8006afc <_ZN3jlb5GraphixEc>
 8006086:	4604      	mov	r4, r0
 8006088:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800608c:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8006090:	4ae6      	ldr	r2, [pc, #920]	; (800642c <_ZN3jlb5GraphC1Ev+0x2d7c>)
 8006092:	8812      	ldrh	r2, [r2, #0]
 8006094:	801a      	strh	r2, [r3, #0]
 8006096:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800609a:	f5a3 731b 	sub.w	r3, r3, #620	; 0x26c
 800609e:	f607 2204 	addw	r2, r7, #2564	; 0xa04
 80060a2:	601a      	str	r2, [r3, #0]
 80060a4:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80060a8:	f5a3 731b 	sub.w	r3, r3, #620	; 0x26c
 80060ac:	2202      	movs	r2, #2
 80060ae:	605a      	str	r2, [r3, #4]
 80060b0:	f607 2308 	addw	r3, r7, #2568	; 0xa08
 80060b4:	4618      	mov	r0, r3
 80060b6:	f015 fb3e 	bl	801b736 <_ZNSaIcEC1Ev>
 80060ba:	f607 2308 	addw	r3, r7, #2568	; 0xa08
 80060be:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 80060c2:	f5a2 721b 	sub.w	r2, r2, #620	; 0x26c
 80060c6:	f507 601f 	add.w	r0, r7, #2544	; 0x9f0
 80060ca:	ca06      	ldmia	r2, {r1, r2}
 80060cc:	f001 fd13 	bl	8007af6 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 80060d0:	f507 631f 	add.w	r3, r7, #2544	; 0x9f0
 80060d4:	ed9f 0ad6 	vldr	s0, [pc, #856]	; 8006430 <_ZN3jlb5GraphC1Ev+0x2d80>
 80060d8:	2202      	movs	r2, #2
 80060da:	2151      	movs	r1, #81	; 0x51
 80060dc:	4620      	mov	r0, r4
 80060de:	f7fd faa1 	bl	8003624 <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 80060e2:	f507 631f 	add.w	r3, r7, #2544	; 0x9f0
 80060e6:	4618      	mov	r0, r3
 80060e8:	f001 fcb8 	bl	8007a5c <_ZNSt6vectorIcSaIcEED1Ev>
 80060ec:	f607 2308 	addw	r3, r7, #2568	; 0xa08
 80060f0:	4618      	mov	r0, r3
 80060f2:	f015 fb22 	bl	801b73a <_ZNSaIcED1Ev>
            this->operator[]('R').add_edge('M', Direction::RIGHT, {'N', 'S'}, QUARTER_CIRCLE);
 80060f6:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80060fa:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 80060fe:	2152      	movs	r1, #82	; 0x52
 8006100:	6818      	ldr	r0, [r3, #0]
 8006102:	f000 fcfb 	bl	8006afc <_ZN3jlb5GraphixEc>
 8006106:	4604      	mov	r4, r0
 8006108:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800610c:	f5a3 7312 	sub.w	r3, r3, #584	; 0x248
 8006110:	4ac6      	ldr	r2, [pc, #792]	; (800642c <_ZN3jlb5GraphC1Ev+0x2d7c>)
 8006112:	8812      	ldrh	r2, [r2, #0]
 8006114:	801a      	strh	r2, [r3, #0]
 8006116:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800611a:	f5a3 7314 	sub.w	r3, r3, #592	; 0x250
 800611e:	f507 6222 	add.w	r2, r7, #2592	; 0xa20
 8006122:	601a      	str	r2, [r3, #0]
 8006124:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006128:	f5a3 7314 	sub.w	r3, r3, #592	; 0x250
 800612c:	2202      	movs	r2, #2
 800612e:	605a      	str	r2, [r3, #4]
 8006130:	f607 2324 	addw	r3, r7, #2596	; 0xa24
 8006134:	4618      	mov	r0, r3
 8006136:	f015 fafe 	bl	801b736 <_ZNSaIcEC1Ev>
 800613a:	f607 2324 	addw	r3, r7, #2596	; 0xa24
 800613e:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8006142:	f5a2 7214 	sub.w	r2, r2, #592	; 0x250
 8006146:	f607 200c 	addw	r0, r7, #2572	; 0xa0c
 800614a:	ca06      	ldmia	r2, {r1, r2}
 800614c:	f001 fcd3 	bl	8007af6 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8006150:	f607 230c 	addw	r3, r7, #2572	; 0xa0c
 8006154:	ed9f 0ab9 	vldr	s0, [pc, #740]	; 800643c <_ZN3jlb5GraphC1Ev+0x2d8c>
 8006158:	2201      	movs	r2, #1
 800615a:	214d      	movs	r1, #77	; 0x4d
 800615c:	4620      	mov	r0, r4
 800615e:	f7fd fa61 	bl	8003624 <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8006162:	f607 230c 	addw	r3, r7, #2572	; 0xa0c
 8006166:	4618      	mov	r0, r3
 8006168:	f001 fc78 	bl	8007a5c <_ZNSt6vectorIcSaIcEED1Ev>
 800616c:	f607 2324 	addw	r3, r7, #2596	; 0xa24
 8006170:	4618      	mov	r0, r3
 8006172:	f015 fae2 	bl	801b73a <_ZNSaIcED1Ev>
            this->operator[]('R').add_edge('N', Direction::LEFT, {'M', 'Q'}, QUARTER_CIRCLE);
 8006176:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800617a:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 800617e:	2152      	movs	r1, #82	; 0x52
 8006180:	6818      	ldr	r0, [r3, #0]
 8006182:	f000 fcbb 	bl	8006afc <_ZN3jlb5GraphixEc>
 8006186:	4604      	mov	r4, r0
 8006188:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800618c:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 8006190:	4aa8      	ldr	r2, [pc, #672]	; (8006434 <_ZN3jlb5GraphC1Ev+0x2d84>)
 8006192:	8812      	ldrh	r2, [r2, #0]
 8006194:	801a      	strh	r2, [r3, #0]
 8006196:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800619a:	f5a3 730d 	sub.w	r3, r3, #564	; 0x234
 800619e:	f607 223c 	addw	r2, r7, #2620	; 0xa3c
 80061a2:	601a      	str	r2, [r3, #0]
 80061a4:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80061a8:	f5a3 730d 	sub.w	r3, r3, #564	; 0x234
 80061ac:	2202      	movs	r2, #2
 80061ae:	605a      	str	r2, [r3, #4]
 80061b0:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 80061b4:	4618      	mov	r0, r3
 80061b6:	f015 fabe 	bl	801b736 <_ZNSaIcEC1Ev>
 80061ba:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 80061be:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 80061c2:	f5a2 720d 	sub.w	r2, r2, #564	; 0x234
 80061c6:	f607 2028 	addw	r0, r7, #2600	; 0xa28
 80061ca:	ca06      	ldmia	r2, {r1, r2}
 80061cc:	f001 fc93 	bl	8007af6 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 80061d0:	f607 2328 	addw	r3, r7, #2600	; 0xa28
 80061d4:	ed9f 0a99 	vldr	s0, [pc, #612]	; 800643c <_ZN3jlb5GraphC1Ev+0x2d8c>
 80061d8:	2200      	movs	r2, #0
 80061da:	214e      	movs	r1, #78	; 0x4e
 80061dc:	4620      	mov	r0, r4
 80061de:	f7fd fa21 	bl	8003624 <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 80061e2:	f607 2328 	addw	r3, r7, #2600	; 0xa28
 80061e6:	4618      	mov	r0, r3
 80061e8:	f001 fc38 	bl	8007a5c <_ZNSt6vectorIcSaIcEED1Ev>
 80061ec:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 80061f0:	4618      	mov	r0, r3
 80061f2:	f015 faa2 	bl	801b73a <_ZNSaIcED1Ev>
            this->operator[]('R').add_edge('S', Direction::STRAIGHT, {'M', 'Q'}, UNIT);
 80061f6:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80061fa:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 80061fe:	2152      	movs	r1, #82	; 0x52
 8006200:	6818      	ldr	r0, [r3, #0]
 8006202:	f000 fc7b 	bl	8006afc <_ZN3jlb5GraphixEc>
 8006206:	4604      	mov	r4, r0
 8006208:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800620c:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 8006210:	4a88      	ldr	r2, [pc, #544]	; (8006434 <_ZN3jlb5GraphC1Ev+0x2d84>)
 8006212:	8812      	ldrh	r2, [r2, #0]
 8006214:	801a      	strh	r2, [r3, #0]
 8006216:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800621a:	f5a3 7306 	sub.w	r3, r3, #536	; 0x218
 800621e:	f607 2258 	addw	r2, r7, #2648	; 0xa58
 8006222:	601a      	str	r2, [r3, #0]
 8006224:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006228:	f5a3 7306 	sub.w	r3, r3, #536	; 0x218
 800622c:	2202      	movs	r2, #2
 800622e:	605a      	str	r2, [r3, #4]
 8006230:	f607 235c 	addw	r3, r7, #2652	; 0xa5c
 8006234:	4618      	mov	r0, r3
 8006236:	f015 fa7e 	bl	801b736 <_ZNSaIcEC1Ev>
 800623a:	f607 235c 	addw	r3, r7, #2652	; 0xa5c
 800623e:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8006242:	f5a2 7206 	sub.w	r2, r2, #536	; 0x218
 8006246:	f607 2044 	addw	r0, r7, #2628	; 0xa44
 800624a:	ca06      	ldmia	r2, {r1, r2}
 800624c:	f001 fc53 	bl	8007af6 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8006250:	f607 2344 	addw	r3, r7, #2628	; 0xa44
 8006254:	ed9f 0a76 	vldr	s0, [pc, #472]	; 8006430 <_ZN3jlb5GraphC1Ev+0x2d80>
 8006258:	2202      	movs	r2, #2
 800625a:	2153      	movs	r1, #83	; 0x53
 800625c:	4620      	mov	r0, r4
 800625e:	f7fd f9e1 	bl	8003624 <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8006262:	f607 2344 	addw	r3, r7, #2628	; 0xa44
 8006266:	4618      	mov	r0, r3
 8006268:	f001 fbf8 	bl	8007a5c <_ZNSt6vectorIcSaIcEED1Ev>
 800626c:	f607 235c 	addw	r3, r7, #2652	; 0xa5c
 8006270:	4618      	mov	r0, r3
 8006272:	f015 fa62 	bl	801b73a <_ZNSaIcED1Ev>
            this->operator[]('S').add_edge('R', Direction::STRAIGHT, {'T'}, UNIT);
 8006276:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800627a:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 800627e:	2153      	movs	r1, #83	; 0x53
 8006280:	6818      	ldr	r0, [r3, #0]
 8006282:	f000 fc3b 	bl	8006afc <_ZN3jlb5GraphixEc>
 8006286:	4604      	mov	r4, r0
 8006288:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800628c:	f5a3 73fa 	sub.w	r3, r3, #500	; 0x1f4
 8006290:	2254      	movs	r2, #84	; 0x54
 8006292:	701a      	strb	r2, [r3, #0]
 8006294:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006298:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800629c:	f607 2274 	addw	r2, r7, #2676	; 0xa74
 80062a0:	601a      	str	r2, [r3, #0]
 80062a2:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80062a6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80062aa:	2201      	movs	r2, #1
 80062ac:	605a      	str	r2, [r3, #4]
 80062ae:	f607 2378 	addw	r3, r7, #2680	; 0xa78
 80062b2:	4618      	mov	r0, r3
 80062b4:	f015 fa3f 	bl	801b736 <_ZNSaIcEC1Ev>
 80062b8:	f607 2378 	addw	r3, r7, #2680	; 0xa78
 80062bc:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 80062c0:	f5a2 72fe 	sub.w	r2, r2, #508	; 0x1fc
 80062c4:	f507 6026 	add.w	r0, r7, #2656	; 0xa60
 80062c8:	ca06      	ldmia	r2, {r1, r2}
 80062ca:	f001 fc14 	bl	8007af6 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 80062ce:	f507 6326 	add.w	r3, r7, #2656	; 0xa60
 80062d2:	ed9f 0a57 	vldr	s0, [pc, #348]	; 8006430 <_ZN3jlb5GraphC1Ev+0x2d80>
 80062d6:	2202      	movs	r2, #2
 80062d8:	2152      	movs	r1, #82	; 0x52
 80062da:	4620      	mov	r0, r4
 80062dc:	f7fd f9a2 	bl	8003624 <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 80062e0:	f507 6326 	add.w	r3, r7, #2656	; 0xa60
 80062e4:	4618      	mov	r0, r3
 80062e6:	f001 fbb9 	bl	8007a5c <_ZNSt6vectorIcSaIcEED1Ev>
 80062ea:	f607 2378 	addw	r3, r7, #2680	; 0xa78
 80062ee:	4618      	mov	r0, r3
 80062f0:	f015 fa23 	bl	801b73a <_ZNSaIcED1Ev>
            this->operator[]('S').add_edge('N', Direction::STRAIGHT, {'V', 'W'}, UNIT);
 80062f4:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80062f8:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 80062fc:	2153      	movs	r1, #83	; 0x53
 80062fe:	6818      	ldr	r0, [r3, #0]
 8006300:	f000 fbfc 	bl	8006afc <_ZN3jlb5GraphixEc>
 8006304:	4604      	mov	r4, r0
 8006306:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800630a:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 800630e:	4a4a      	ldr	r2, [pc, #296]	; (8006438 <_ZN3jlb5GraphC1Ev+0x2d88>)
 8006310:	8812      	ldrh	r2, [r2, #0]
 8006312:	801a      	strh	r2, [r3, #0]
 8006314:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006318:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 800631c:	f507 6229 	add.w	r2, r7, #2704	; 0xa90
 8006320:	601a      	str	r2, [r3, #0]
 8006322:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006326:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 800632a:	2202      	movs	r2, #2
 800632c:	605a      	str	r2, [r3, #4]
 800632e:	f607 2394 	addw	r3, r7, #2708	; 0xa94
 8006332:	4618      	mov	r0, r3
 8006334:	f015 f9ff 	bl	801b736 <_ZNSaIcEC1Ev>
 8006338:	f607 2394 	addw	r3, r7, #2708	; 0xa94
 800633c:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8006340:	f5a2 72f0 	sub.w	r2, r2, #480	; 0x1e0
 8006344:	f607 207c 	addw	r0, r7, #2684	; 0xa7c
 8006348:	ca06      	ldmia	r2, {r1, r2}
 800634a:	f001 fbd4 	bl	8007af6 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 800634e:	f607 237c 	addw	r3, r7, #2684	; 0xa7c
 8006352:	ed9f 0a37 	vldr	s0, [pc, #220]	; 8006430 <_ZN3jlb5GraphC1Ev+0x2d80>
 8006356:	2202      	movs	r2, #2
 8006358:	214e      	movs	r1, #78	; 0x4e
 800635a:	4620      	mov	r0, r4
 800635c:	f7fd f962 	bl	8003624 <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8006360:	f607 237c 	addw	r3, r7, #2684	; 0xa7c
 8006364:	4618      	mov	r0, r3
 8006366:	f001 fb79 	bl	8007a5c <_ZNSt6vectorIcSaIcEED1Ev>
 800636a:	f607 2394 	addw	r3, r7, #2708	; 0xa94
 800636e:	4618      	mov	r0, r3
 8006370:	f015 f9e3 	bl	801b73a <_ZNSaIcED1Ev>
            this->operator[]('S').add_edge('T', Direction::STRAIGHT, {'R'}, UNIT);
 8006374:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006378:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 800637c:	2153      	movs	r1, #83	; 0x53
 800637e:	6818      	ldr	r0, [r3, #0]
 8006380:	f000 fbbc 	bl	8006afc <_ZN3jlb5GraphixEc>
 8006384:	4604      	mov	r4, r0
 8006386:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800638a:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800638e:	2252      	movs	r2, #82	; 0x52
 8006390:	701a      	strb	r2, [r3, #0]
 8006392:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006396:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 800639a:	f607 22ac 	addw	r2, r7, #2732	; 0xaac
 800639e:	601a      	str	r2, [r3, #0]
 80063a0:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80063a4:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 80063a8:	2201      	movs	r2, #1
 80063aa:	605a      	str	r2, [r3, #4]
 80063ac:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 80063b0:	4618      	mov	r0, r3
 80063b2:	f015 f9c0 	bl	801b736 <_ZNSaIcEC1Ev>
 80063b6:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 80063ba:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 80063be:	f5a2 72e2 	sub.w	r2, r2, #452	; 0x1c4
 80063c2:	f607 2098 	addw	r0, r7, #2712	; 0xa98
 80063c6:	ca06      	ldmia	r2, {r1, r2}
 80063c8:	f001 fb95 	bl	8007af6 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 80063cc:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 80063d0:	ed9f 0a17 	vldr	s0, [pc, #92]	; 8006430 <_ZN3jlb5GraphC1Ev+0x2d80>
 80063d4:	2202      	movs	r2, #2
 80063d6:	2154      	movs	r1, #84	; 0x54
 80063d8:	4620      	mov	r0, r4
 80063da:	f7fd f923 	bl	8003624 <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 80063de:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 80063e2:	4618      	mov	r0, r3
 80063e4:	f001 fb3a 	bl	8007a5c <_ZNSt6vectorIcSaIcEED1Ev>
 80063e8:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 80063ec:	4618      	mov	r0, r3
 80063ee:	f015 f9a4 	bl	801b73a <_ZNSaIcED1Ev>
            this->operator[]('S').add_edge('W', Direction::LEFT, {'N'}, QUARTER_CIRCLE);
 80063f2:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80063f6:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 80063fa:	2153      	movs	r1, #83	; 0x53
 80063fc:	6818      	ldr	r0, [r3, #0]
 80063fe:	f000 fb7d 	bl	8006afc <_ZN3jlb5GraphixEc>
 8006402:	4604      	mov	r4, r0
 8006404:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006408:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 800640c:	224e      	movs	r2, #78	; 0x4e
 800640e:	701a      	strb	r2, [r3, #0]
 8006410:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006414:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8006418:	f607 22c8 	addw	r2, r7, #2760	; 0xac8
 800641c:	601a      	str	r2, [r3, #0]
 800641e:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006422:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8006426:	2201      	movs	r2, #1
 8006428:	605a      	str	r2, [r3, #4]
 800642a:	e009      	b.n	8006440 <_ZN3jlb5GraphC1Ev+0x2d90>
 800642c:	0801f0c8 	.word	0x0801f0c8
 8006430:	3f19999a 	.word	0x3f19999a
 8006434:	0801f0cc 	.word	0x0801f0cc
 8006438:	0801f0d0 	.word	0x0801f0d0
 800643c:	3f71463a 	.word	0x3f71463a
 8006440:	f607 23cc 	addw	r3, r7, #2764	; 0xacc
 8006444:	4618      	mov	r0, r3
 8006446:	f015 f976 	bl	801b736 <_ZNSaIcEC1Ev>
 800644a:	f607 23cc 	addw	r3, r7, #2764	; 0xacc
 800644e:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8006452:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 8006456:	f607 20b4 	addw	r0, r7, #2740	; 0xab4
 800645a:	ca06      	ldmia	r2, {r1, r2}
 800645c:	f001 fb4b 	bl	8007af6 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8006460:	f607 23b4 	addw	r3, r7, #2740	; 0xab4
 8006464:	ed1f 0a0b 	vldr	s0, [pc, #-44]	; 800643c <_ZN3jlb5GraphC1Ev+0x2d8c>
 8006468:	2200      	movs	r2, #0
 800646a:	2157      	movs	r1, #87	; 0x57
 800646c:	4620      	mov	r0, r4
 800646e:	f7fd f8d9 	bl	8003624 <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8006472:	f607 23b4 	addw	r3, r7, #2740	; 0xab4
 8006476:	4618      	mov	r0, r3
 8006478:	f001 faf0 	bl	8007a5c <_ZNSt6vectorIcSaIcEED1Ev>
 800647c:	f607 23cc 	addw	r3, r7, #2764	; 0xacc
 8006480:	4618      	mov	r0, r3
 8006482:	f015 f95a 	bl	801b73a <_ZNSaIcED1Ev>
            this->operator[]('S').add_edge('V', Direction::RIGHT, {'N'}, QUARTER_CIRCLE);
 8006486:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800648a:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 800648e:	2153      	movs	r1, #83	; 0x53
 8006490:	6818      	ldr	r0, [r3, #0]
 8006492:	f000 fb33 	bl	8006afc <_ZN3jlb5GraphixEc>
 8006496:	4604      	mov	r4, r0
 8006498:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800649c:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80064a0:	224e      	movs	r2, #78	; 0x4e
 80064a2:	701a      	strb	r2, [r3, #0]
 80064a4:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80064a8:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80064ac:	f607 22e4 	addw	r2, r7, #2788	; 0xae4
 80064b0:	601a      	str	r2, [r3, #0]
 80064b2:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80064b6:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80064ba:	2201      	movs	r2, #1
 80064bc:	605a      	str	r2, [r3, #4]
 80064be:	f607 23e8 	addw	r3, r7, #2792	; 0xae8
 80064c2:	4618      	mov	r0, r3
 80064c4:	f015 f937 	bl	801b736 <_ZNSaIcEC1Ev>
 80064c8:	f607 23e8 	addw	r3, r7, #2792	; 0xae8
 80064cc:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 80064d0:	f5a2 72c6 	sub.w	r2, r2, #396	; 0x18c
 80064d4:	f507 602d 	add.w	r0, r7, #2768	; 0xad0
 80064d8:	ca06      	ldmia	r2, {r1, r2}
 80064da:	f001 fb0c 	bl	8007af6 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 80064de:	f507 632d 	add.w	r3, r7, #2768	; 0xad0
 80064e2:	ed1f 0a2a 	vldr	s0, [pc, #-168]	; 800643c <_ZN3jlb5GraphC1Ev+0x2d8c>
 80064e6:	2201      	movs	r2, #1
 80064e8:	2156      	movs	r1, #86	; 0x56
 80064ea:	4620      	mov	r0, r4
 80064ec:	f7fd f89a 	bl	8003624 <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 80064f0:	f507 632d 	add.w	r3, r7, #2768	; 0xad0
 80064f4:	4618      	mov	r0, r3
 80064f6:	f001 fab1 	bl	8007a5c <_ZNSt6vectorIcSaIcEED1Ev>
 80064fa:	f607 23e8 	addw	r3, r7, #2792	; 0xae8
 80064fe:	4618      	mov	r0, r3
 8006500:	f015 f91b 	bl	801b73a <_ZNSaIcED1Ev>
            this->operator[]('T').add_edge('S', Direction::STRAIGHT, {'O', 'U'}, UNIT);
 8006504:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006508:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 800650c:	2154      	movs	r1, #84	; 0x54
 800650e:	6818      	ldr	r0, [r3, #0]
 8006510:	f000 faf4 	bl	8006afc <_ZN3jlb5GraphixEc>
 8006514:	4604      	mov	r4, r0
 8006516:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800651a:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 800651e:	4ae9      	ldr	r2, [pc, #932]	; (80068c4 <_ZN3jlb5GraphC1Ev+0x3214>)
 8006520:	8812      	ldrh	r2, [r2, #0]
 8006522:	801a      	strh	r2, [r3, #0]
 8006524:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006528:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 800652c:	f507 6230 	add.w	r2, r7, #2816	; 0xb00
 8006530:	601a      	str	r2, [r3, #0]
 8006532:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006536:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 800653a:	2202      	movs	r2, #2
 800653c:	605a      	str	r2, [r3, #4]
 800653e:	f607 3304 	addw	r3, r7, #2820	; 0xb04
 8006542:	4618      	mov	r0, r3
 8006544:	f015 f8f7 	bl	801b736 <_ZNSaIcEC1Ev>
 8006548:	f607 3304 	addw	r3, r7, #2820	; 0xb04
 800654c:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8006550:	f5a2 72b8 	sub.w	r2, r2, #368	; 0x170
 8006554:	f607 20ec 	addw	r0, r7, #2796	; 0xaec
 8006558:	ca06      	ldmia	r2, {r1, r2}
 800655a:	f001 facc 	bl	8007af6 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 800655e:	f607 23ec 	addw	r3, r7, #2796	; 0xaec
 8006562:	ed9f 0ad9 	vldr	s0, [pc, #868]	; 80068c8 <_ZN3jlb5GraphC1Ev+0x3218>
 8006566:	2202      	movs	r2, #2
 8006568:	2153      	movs	r1, #83	; 0x53
 800656a:	4620      	mov	r0, r4
 800656c:	f7fd f85a 	bl	8003624 <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8006570:	f607 23ec 	addw	r3, r7, #2796	; 0xaec
 8006574:	4618      	mov	r0, r3
 8006576:	f001 fa71 	bl	8007a5c <_ZNSt6vectorIcSaIcEED1Ev>
 800657a:	f607 3304 	addw	r3, r7, #2820	; 0xb04
 800657e:	4618      	mov	r0, r3
 8006580:	f015 f8db 	bl	801b73a <_ZNSaIcED1Ev>
            this->operator[]('T').add_edge('N', Direction::RIGHT, {'O', 'U'}, QUARTER_CIRCLE);
 8006584:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006588:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 800658c:	2154      	movs	r1, #84	; 0x54
 800658e:	6818      	ldr	r0, [r3, #0]
 8006590:	f000 fab4 	bl	8006afc <_ZN3jlb5GraphixEc>
 8006594:	4604      	mov	r4, r0
 8006596:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800659a:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800659e:	4ac9      	ldr	r2, [pc, #804]	; (80068c4 <_ZN3jlb5GraphC1Ev+0x3214>)
 80065a0:	8812      	ldrh	r2, [r2, #0]
 80065a2:	801a      	strh	r2, [r3, #0]
 80065a4:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80065a8:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 80065ac:	f607 321c 	addw	r2, r7, #2844	; 0xb1c
 80065b0:	601a      	str	r2, [r3, #0]
 80065b2:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80065b6:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 80065ba:	2202      	movs	r2, #2
 80065bc:	605a      	str	r2, [r3, #4]
 80065be:	f507 6332 	add.w	r3, r7, #2848	; 0xb20
 80065c2:	4618      	mov	r0, r3
 80065c4:	f015 f8b7 	bl	801b736 <_ZNSaIcEC1Ev>
 80065c8:	f507 6332 	add.w	r3, r7, #2848	; 0xb20
 80065cc:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 80065d0:	f5a2 72aa 	sub.w	r2, r2, #340	; 0x154
 80065d4:	f607 3008 	addw	r0, r7, #2824	; 0xb08
 80065d8:	ca06      	ldmia	r2, {r1, r2}
 80065da:	f001 fa8c 	bl	8007af6 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 80065de:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 80065e2:	ed9f 0abd 	vldr	s0, [pc, #756]	; 80068d8 <_ZN3jlb5GraphC1Ev+0x3228>
 80065e6:	2201      	movs	r2, #1
 80065e8:	214e      	movs	r1, #78	; 0x4e
 80065ea:	4620      	mov	r0, r4
 80065ec:	f7fd f81a 	bl	8003624 <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 80065f0:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 80065f4:	4618      	mov	r0, r3
 80065f6:	f001 fa31 	bl	8007a5c <_ZNSt6vectorIcSaIcEED1Ev>
 80065fa:	f507 6332 	add.w	r3, r7, #2848	; 0xb20
 80065fe:	4618      	mov	r0, r3
 8006600:	f015 f89b 	bl	801b73a <_ZNSaIcED1Ev>
            this->operator[]('T').add_edge('O', Direction::LEFT, {'N', 'S'}, QUARTER_CIRCLE);
 8006604:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006608:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 800660c:	2154      	movs	r1, #84	; 0x54
 800660e:	6818      	ldr	r0, [r3, #0]
 8006610:	f000 fa74 	bl	8006afc <_ZN3jlb5GraphixEc>
 8006614:	4604      	mov	r4, r0
 8006616:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800661a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800661e:	4aab      	ldr	r2, [pc, #684]	; (80068cc <_ZN3jlb5GraphC1Ev+0x321c>)
 8006620:	8812      	ldrh	r2, [r2, #0]
 8006622:	801a      	strh	r2, [r3, #0]
 8006624:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006628:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800662c:	f607 3238 	addw	r2, r7, #2872	; 0xb38
 8006630:	601a      	str	r2, [r3, #0]
 8006632:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006636:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800663a:	2202      	movs	r2, #2
 800663c:	605a      	str	r2, [r3, #4]
 800663e:	f607 333c 	addw	r3, r7, #2876	; 0xb3c
 8006642:	4618      	mov	r0, r3
 8006644:	f015 f877 	bl	801b736 <_ZNSaIcEC1Ev>
 8006648:	f607 333c 	addw	r3, r7, #2876	; 0xb3c
 800664c:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8006650:	f5a2 729c 	sub.w	r2, r2, #312	; 0x138
 8006654:	f607 3024 	addw	r0, r7, #2852	; 0xb24
 8006658:	ca06      	ldmia	r2, {r1, r2}
 800665a:	f001 fa4c 	bl	8007af6 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 800665e:	f607 3324 	addw	r3, r7, #2852	; 0xb24
 8006662:	ed9f 0a9d 	vldr	s0, [pc, #628]	; 80068d8 <_ZN3jlb5GraphC1Ev+0x3228>
 8006666:	2200      	movs	r2, #0
 8006668:	214f      	movs	r1, #79	; 0x4f
 800666a:	4620      	mov	r0, r4
 800666c:	f7fc ffda 	bl	8003624 <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8006670:	f607 3324 	addw	r3, r7, #2852	; 0xb24
 8006674:	4618      	mov	r0, r3
 8006676:	f001 f9f1 	bl	8007a5c <_ZNSt6vectorIcSaIcEED1Ev>
 800667a:	f607 333c 	addw	r3, r7, #2876	; 0xb3c
 800667e:	4618      	mov	r0, r3
 8006680:	f015 f85b 	bl	801b73a <_ZNSaIcED1Ev>
            this->operator[]('T').add_edge('U', Direction::STRAIGHT, {'N', 'S'}, 2.0f * UNIT);
 8006684:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006688:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 800668c:	2154      	movs	r1, #84	; 0x54
 800668e:	6818      	ldr	r0, [r3, #0]
 8006690:	f000 fa34 	bl	8006afc <_ZN3jlb5GraphixEc>
 8006694:	4604      	mov	r4, r0
 8006696:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800669a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800669e:	4a8b      	ldr	r2, [pc, #556]	; (80068cc <_ZN3jlb5GraphC1Ev+0x321c>)
 80066a0:	8812      	ldrh	r2, [r2, #0]
 80066a2:	801a      	strh	r2, [r3, #0]
 80066a4:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80066a8:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80066ac:	f607 3254 	addw	r2, r7, #2900	; 0xb54
 80066b0:	601a      	str	r2, [r3, #0]
 80066b2:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80066b6:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80066ba:	2202      	movs	r2, #2
 80066bc:	605a      	str	r2, [r3, #4]
 80066be:	f607 3358 	addw	r3, r7, #2904	; 0xb58
 80066c2:	4618      	mov	r0, r3
 80066c4:	f015 f837 	bl	801b736 <_ZNSaIcEC1Ev>
 80066c8:	f607 3358 	addw	r3, r7, #2904	; 0xb58
 80066cc:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 80066d0:	f5a2 728e 	sub.w	r2, r2, #284	; 0x11c
 80066d4:	f507 6034 	add.w	r0, r7, #2880	; 0xb40
 80066d8:	ca06      	ldmia	r2, {r1, r2}
 80066da:	f001 fa0c 	bl	8007af6 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 80066de:	f507 6334 	add.w	r3, r7, #2880	; 0xb40
 80066e2:	ed9f 0a7c 	vldr	s0, [pc, #496]	; 80068d4 <_ZN3jlb5GraphC1Ev+0x3224>
 80066e6:	2202      	movs	r2, #2
 80066e8:	2155      	movs	r1, #85	; 0x55
 80066ea:	4620      	mov	r0, r4
 80066ec:	f7fc ff9a 	bl	8003624 <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 80066f0:	f507 6334 	add.w	r3, r7, #2880	; 0xb40
 80066f4:	4618      	mov	r0, r3
 80066f6:	f001 f9b1 	bl	8007a5c <_ZNSt6vectorIcSaIcEED1Ev>
 80066fa:	f607 3358 	addw	r3, r7, #2904	; 0xb58
 80066fe:	4618      	mov	r0, r3
 8006700:	f015 f81b 	bl	801b73a <_ZNSaIcED1Ev>
            this->operator[]('U').add_edge('T', Direction::STRAIGHT, {'U'}, 2.0f * UNIT);
 8006704:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006708:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 800670c:	2155      	movs	r1, #85	; 0x55
 800670e:	6818      	ldr	r0, [r3, #0]
 8006710:	f000 f9f4 	bl	8006afc <_ZN3jlb5GraphixEc>
 8006714:	4604      	mov	r4, r0
 8006716:	2355      	movs	r3, #85	; 0x55
 8006718:	f887 3b70 	strb.w	r3, [r7, #2928]	; 0xb70
 800671c:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006720:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8006724:	f507 6237 	add.w	r2, r7, #2928	; 0xb70
 8006728:	601a      	str	r2, [r3, #0]
 800672a:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800672e:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8006732:	2201      	movs	r2, #1
 8006734:	605a      	str	r2, [r3, #4]
 8006736:	f607 3374 	addw	r3, r7, #2932	; 0xb74
 800673a:	4618      	mov	r0, r3
 800673c:	f014 fffb 	bl	801b736 <_ZNSaIcEC1Ev>
 8006740:	f607 3374 	addw	r3, r7, #2932	; 0xb74
 8006744:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8006748:	f5a2 7280 	sub.w	r2, r2, #256	; 0x100
 800674c:	f607 305c 	addw	r0, r7, #2908	; 0xb5c
 8006750:	ca06      	ldmia	r2, {r1, r2}
 8006752:	f001 f9d0 	bl	8007af6 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8006756:	f607 335c 	addw	r3, r7, #2908	; 0xb5c
 800675a:	ed9f 0a5e 	vldr	s0, [pc, #376]	; 80068d4 <_ZN3jlb5GraphC1Ev+0x3224>
 800675e:	2202      	movs	r2, #2
 8006760:	2154      	movs	r1, #84	; 0x54
 8006762:	4620      	mov	r0, r4
 8006764:	f7fc ff5e 	bl	8003624 <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8006768:	f607 335c 	addw	r3, r7, #2908	; 0xb5c
 800676c:	4618      	mov	r0, r3
 800676e:	f001 f975 	bl	8007a5c <_ZNSt6vectorIcSaIcEED1Ev>
 8006772:	f607 3374 	addw	r3, r7, #2932	; 0xb74
 8006776:	4618      	mov	r0, r3
 8006778:	f014 ffdf 	bl	801b73a <_ZNSaIcED1Ev>
            this->operator[]('U').add_edge('O', Direction::RIGHT, {'U'}, QUARTER_CIRCLE);
 800677c:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006780:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8006784:	2155      	movs	r1, #85	; 0x55
 8006786:	6818      	ldr	r0, [r3, #0]
 8006788:	f000 f9b8 	bl	8006afc <_ZN3jlb5GraphixEc>
 800678c:	4604      	mov	r4, r0
 800678e:	2355      	movs	r3, #85	; 0x55
 8006790:	f887 3b8c 	strb.w	r3, [r7, #2956]	; 0xb8c
 8006794:	f607 338c 	addw	r3, r7, #2956	; 0xb8c
 8006798:	f8c7 3b84 	str.w	r3, [r7, #2948]	; 0xb84
 800679c:	2301      	movs	r3, #1
 800679e:	f8c7 3b88 	str.w	r3, [r7, #2952]	; 0xb88
 80067a2:	f507 6339 	add.w	r3, r7, #2960	; 0xb90
 80067a6:	4618      	mov	r0, r3
 80067a8:	f014 ffc5 	bl	801b736 <_ZNSaIcEC1Ev>
 80067ac:	f507 6339 	add.w	r3, r7, #2960	; 0xb90
 80067b0:	f607 3078 	addw	r0, r7, #2936	; 0xb78
 80067b4:	f607 3284 	addw	r2, r7, #2948	; 0xb84
 80067b8:	ca06      	ldmia	r2, {r1, r2}
 80067ba:	f001 f99c 	bl	8007af6 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 80067be:	f607 3378 	addw	r3, r7, #2936	; 0xb78
 80067c2:	ed9f 0a45 	vldr	s0, [pc, #276]	; 80068d8 <_ZN3jlb5GraphC1Ev+0x3228>
 80067c6:	2201      	movs	r2, #1
 80067c8:	214f      	movs	r1, #79	; 0x4f
 80067ca:	4620      	mov	r0, r4
 80067cc:	f7fc ff2a 	bl	8003624 <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 80067d0:	f607 3378 	addw	r3, r7, #2936	; 0xb78
 80067d4:	4618      	mov	r0, r3
 80067d6:	f001 f941 	bl	8007a5c <_ZNSt6vectorIcSaIcEED1Ev>
 80067da:	f507 6339 	add.w	r3, r7, #2960	; 0xb90
 80067de:	4618      	mov	r0, r3
 80067e0:	f014 ffab 	bl	801b73a <_ZNSaIcED1Ev>
            this->operator[]('V').add_edge('Q', Direction::RIGHT, {'S', 'W'}, QUARTER_CIRCLE);
 80067e4:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80067e8:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 80067ec:	2156      	movs	r1, #86	; 0x56
 80067ee:	6818      	ldr	r0, [r3, #0]
 80067f0:	f000 f984 	bl	8006afc <_ZN3jlb5GraphixEc>
 80067f4:	4604      	mov	r4, r0
 80067f6:	4b36      	ldr	r3, [pc, #216]	; (80068d0 <_ZN3jlb5GraphC1Ev+0x3220>)
 80067f8:	881b      	ldrh	r3, [r3, #0]
 80067fa:	f8a7 3ba8 	strh.w	r3, [r7, #2984]	; 0xba8
 80067fe:	f607 33a8 	addw	r3, r7, #2984	; 0xba8
 8006802:	f8c7 3ba0 	str.w	r3, [r7, #2976]	; 0xba0
 8006806:	2302      	movs	r3, #2
 8006808:	f8c7 3ba4 	str.w	r3, [r7, #2980]	; 0xba4
 800680c:	f607 33ac 	addw	r3, r7, #2988	; 0xbac
 8006810:	4618      	mov	r0, r3
 8006812:	f014 ff90 	bl	801b736 <_ZNSaIcEC1Ev>
 8006816:	f607 33ac 	addw	r3, r7, #2988	; 0xbac
 800681a:	f607 3094 	addw	r0, r7, #2964	; 0xb94
 800681e:	f507 623a 	add.w	r2, r7, #2976	; 0xba0
 8006822:	ca06      	ldmia	r2, {r1, r2}
 8006824:	f001 f967 	bl	8007af6 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8006828:	f607 3394 	addw	r3, r7, #2964	; 0xb94
 800682c:	ed9f 0a2a 	vldr	s0, [pc, #168]	; 80068d8 <_ZN3jlb5GraphC1Ev+0x3228>
 8006830:	2201      	movs	r2, #1
 8006832:	2151      	movs	r1, #81	; 0x51
 8006834:	4620      	mov	r0, r4
 8006836:	f7fc fef5 	bl	8003624 <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 800683a:	f607 3394 	addw	r3, r7, #2964	; 0xb94
 800683e:	4618      	mov	r0, r3
 8006840:	f001 f90c 	bl	8007a5c <_ZNSt6vectorIcSaIcEED1Ev>
 8006844:	f607 33ac 	addw	r3, r7, #2988	; 0xbac
 8006848:	4618      	mov	r0, r3
 800684a:	f014 ff76 	bl	801b73a <_ZNSaIcED1Ev>
            this->operator[]('V').add_edge('S', Direction::LEFT, {'Q'}, QUARTER_CIRCLE);
 800684e:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006852:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8006856:	2156      	movs	r1, #86	; 0x56
 8006858:	6818      	ldr	r0, [r3, #0]
 800685a:	f000 f94f 	bl	8006afc <_ZN3jlb5GraphixEc>
 800685e:	4604      	mov	r4, r0
 8006860:	2351      	movs	r3, #81	; 0x51
 8006862:	f887 3bc4 	strb.w	r3, [r7, #3012]	; 0xbc4
 8006866:	f607 33c4 	addw	r3, r7, #3012	; 0xbc4
 800686a:	f8c7 3bbc 	str.w	r3, [r7, #3004]	; 0xbbc
 800686e:	2301      	movs	r3, #1
 8006870:	f8c7 3bc0 	str.w	r3, [r7, #3008]	; 0xbc0
 8006874:	f607 33c8 	addw	r3, r7, #3016	; 0xbc8
 8006878:	4618      	mov	r0, r3
 800687a:	f014 ff5c 	bl	801b736 <_ZNSaIcEC1Ev>
 800687e:	f607 33c8 	addw	r3, r7, #3016	; 0xbc8
 8006882:	f507 603b 	add.w	r0, r7, #2992	; 0xbb0
 8006886:	f607 32bc 	addw	r2, r7, #3004	; 0xbbc
 800688a:	ca06      	ldmia	r2, {r1, r2}
 800688c:	f001 f933 	bl	8007af6 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8006890:	f507 633b 	add.w	r3, r7, #2992	; 0xbb0
 8006894:	ed9f 0a10 	vldr	s0, [pc, #64]	; 80068d8 <_ZN3jlb5GraphC1Ev+0x3228>
 8006898:	2200      	movs	r2, #0
 800689a:	2153      	movs	r1, #83	; 0x53
 800689c:	4620      	mov	r0, r4
 800689e:	f7fc fec1 	bl	8003624 <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 80068a2:	f507 633b 	add.w	r3, r7, #2992	; 0xbb0
 80068a6:	4618      	mov	r0, r3
 80068a8:	f001 f8d8 	bl	8007a5c <_ZNSt6vectorIcSaIcEED1Ev>
 80068ac:	f607 33c8 	addw	r3, r7, #3016	; 0xbc8
 80068b0:	4618      	mov	r0, r3
 80068b2:	f014 ff42 	bl	801b73a <_ZNSaIcED1Ev>
            this->operator[]('V').add_edge('W', Direction::STRAIGHT, {'Q'}, 2.0f * UNIT);
 80068b6:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80068ba:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 80068be:	2156      	movs	r1, #86	; 0x56
 80068c0:	6818      	ldr	r0, [r3, #0]
 80068c2:	e00b      	b.n	80068dc <_ZN3jlb5GraphC1Ev+0x322c>
 80068c4:	0801f0d4 	.word	0x0801f0d4
 80068c8:	3f19999a 	.word	0x3f19999a
 80068cc:	0801f0c8 	.word	0x0801f0c8
 80068d0:	0801f0d8 	.word	0x0801f0d8
 80068d4:	3f99999a 	.word	0x3f99999a
 80068d8:	3f71463a 	.word	0x3f71463a
 80068dc:	f000 f90e 	bl	8006afc <_ZN3jlb5GraphixEc>
 80068e0:	4604      	mov	r4, r0
 80068e2:	2351      	movs	r3, #81	; 0x51
 80068e4:	f887 3be0 	strb.w	r3, [r7, #3040]	; 0xbe0
 80068e8:	f507 633e 	add.w	r3, r7, #3040	; 0xbe0
 80068ec:	f8c7 3bd8 	str.w	r3, [r7, #3032]	; 0xbd8
 80068f0:	2301      	movs	r3, #1
 80068f2:	f8c7 3bdc 	str.w	r3, [r7, #3036]	; 0xbdc
 80068f6:	f607 33e4 	addw	r3, r7, #3044	; 0xbe4
 80068fa:	4618      	mov	r0, r3
 80068fc:	f014 ff1b 	bl	801b736 <_ZNSaIcEC1Ev>
 8006900:	f607 33e4 	addw	r3, r7, #3044	; 0xbe4
 8006904:	f607 30cc 	addw	r0, r7, #3020	; 0xbcc
 8006908:	f607 32d8 	addw	r2, r7, #3032	; 0xbd8
 800690c:	ca06      	ldmia	r2, {r1, r2}
 800690e:	f001 f8f2 	bl	8007af6 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8006912:	f607 33cc 	addw	r3, r7, #3020	; 0xbcc
 8006916:	ed1f 0a11 	vldr	s0, [pc, #-68]	; 80068d4 <_ZN3jlb5GraphC1Ev+0x3224>
 800691a:	2202      	movs	r2, #2
 800691c:	2157      	movs	r1, #87	; 0x57
 800691e:	4620      	mov	r0, r4
 8006920:	f7fc fe80 	bl	8003624 <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8006924:	f607 33cc 	addw	r3, r7, #3020	; 0xbcc
 8006928:	4618      	mov	r0, r3
 800692a:	f001 f897 	bl	8007a5c <_ZNSt6vectorIcSaIcEED1Ev>
 800692e:	f607 33e4 	addw	r3, r7, #3044	; 0xbe4
 8006932:	4618      	mov	r0, r3
 8006934:	f014 ff01 	bl	801b73a <_ZNSaIcED1Ev>
            this->operator[]('W').add_edge('V', Direction::STRAIGHT, {'O'}, 2.0f * UNIT);
 8006938:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800693c:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8006940:	2157      	movs	r1, #87	; 0x57
 8006942:	6818      	ldr	r0, [r3, #0]
 8006944:	f000 f8da 	bl	8006afc <_ZN3jlb5GraphixEc>
 8006948:	4604      	mov	r4, r0
 800694a:	234f      	movs	r3, #79	; 0x4f
 800694c:	f887 3bfc 	strb.w	r3, [r7, #3068]	; 0xbfc
 8006950:	f607 33fc 	addw	r3, r7, #3068	; 0xbfc
 8006954:	f8c7 3bf4 	str.w	r3, [r7, #3060]	; 0xbf4
 8006958:	2301      	movs	r3, #1
 800695a:	f8c7 3bf8 	str.w	r3, [r7, #3064]	; 0xbf8
 800695e:	f507 6340 	add.w	r3, r7, #3072	; 0xc00
 8006962:	4618      	mov	r0, r3
 8006964:	f014 fee7 	bl	801b736 <_ZNSaIcEC1Ev>
 8006968:	f507 6340 	add.w	r3, r7, #3072	; 0xc00
 800696c:	f607 30e8 	addw	r0, r7, #3048	; 0xbe8
 8006970:	f607 32f4 	addw	r2, r7, #3060	; 0xbf4
 8006974:	ca06      	ldmia	r2, {r1, r2}
 8006976:	f001 f8be 	bl	8007af6 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 800697a:	f607 33e8 	addw	r3, r7, #3048	; 0xbe8
 800697e:	ed1f 0a2b 	vldr	s0, [pc, #-172]	; 80068d4 <_ZN3jlb5GraphC1Ev+0x3224>
 8006982:	2202      	movs	r2, #2
 8006984:	2156      	movs	r1, #86	; 0x56
 8006986:	4620      	mov	r0, r4
 8006988:	f7fc fe4c 	bl	8003624 <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 800698c:	f607 33e8 	addw	r3, r7, #3048	; 0xbe8
 8006990:	4618      	mov	r0, r3
 8006992:	f001 f863 	bl	8007a5c <_ZNSt6vectorIcSaIcEED1Ev>
 8006996:	f507 6340 	add.w	r3, r7, #3072	; 0xc00
 800699a:	4618      	mov	r0, r3
 800699c:	f014 fecd 	bl	801b73a <_ZNSaIcED1Ev>
            this->operator[]('W').add_edge('S', Direction::RIGHT, {'O'}, QUARTER_CIRCLE);
 80069a0:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80069a4:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 80069a8:	2157      	movs	r1, #87	; 0x57
 80069aa:	6818      	ldr	r0, [r3, #0]
 80069ac:	f000 f8a6 	bl	8006afc <_ZN3jlb5GraphixEc>
 80069b0:	4604      	mov	r4, r0
 80069b2:	234f      	movs	r3, #79	; 0x4f
 80069b4:	f887 3c18 	strb.w	r3, [r7, #3096]	; 0xc18
 80069b8:	f607 4318 	addw	r3, r7, #3096	; 0xc18
 80069bc:	f8c7 3c10 	str.w	r3, [r7, #3088]	; 0xc10
 80069c0:	2301      	movs	r3, #1
 80069c2:	f8c7 3c14 	str.w	r3, [r7, #3092]	; 0xc14
 80069c6:	f607 431c 	addw	r3, r7, #3100	; 0xc1c
 80069ca:	4618      	mov	r0, r3
 80069cc:	f014 feb3 	bl	801b736 <_ZNSaIcEC1Ev>
 80069d0:	f607 431c 	addw	r3, r7, #3100	; 0xc1c
 80069d4:	f607 4004 	addw	r0, r7, #3076	; 0xc04
 80069d8:	f507 6241 	add.w	r2, r7, #3088	; 0xc10
 80069dc:	ca06      	ldmia	r2, {r1, r2}
 80069de:	f001 f88a 	bl	8007af6 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 80069e2:	f607 4304 	addw	r3, r7, #3076	; 0xc04
 80069e6:	ed1f 0a44 	vldr	s0, [pc, #-272]	; 80068d8 <_ZN3jlb5GraphC1Ev+0x3228>
 80069ea:	2201      	movs	r2, #1
 80069ec:	2153      	movs	r1, #83	; 0x53
 80069ee:	4620      	mov	r0, r4
 80069f0:	f7fc fe18 	bl	8003624 <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 80069f4:	f607 4304 	addw	r3, r7, #3076	; 0xc04
 80069f8:	4618      	mov	r0, r3
 80069fa:	f001 f82f 	bl	8007a5c <_ZNSt6vectorIcSaIcEED1Ev>
 80069fe:	f607 431c 	addw	r3, r7, #3100	; 0xc1c
 8006a02:	4618      	mov	r0, r3
 8006a04:	f014 fe99 	bl	801b73a <_ZNSaIcED1Ev>
            this->operator[]('W').add_edge('O', Direction::STRAIGHT, {'S', 'V'}, UNIT + QUARTER_CIRCLE);
 8006a08:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006a0c:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8006a10:	2157      	movs	r1, #87	; 0x57
 8006a12:	6818      	ldr	r0, [r3, #0]
 8006a14:	f000 f872 	bl	8006afc <_ZN3jlb5GraphixEc>
 8006a18:	4604      	mov	r4, r0
 8006a1a:	4b35      	ldr	r3, [pc, #212]	; (8006af0 <_ZN3jlb5GraphC1Ev+0x3440>)
 8006a1c:	881b      	ldrh	r3, [r3, #0]
 8006a1e:	f8a7 3c34 	strh.w	r3, [r7, #3124]	; 0xc34
 8006a22:	f607 4334 	addw	r3, r7, #3124	; 0xc34
 8006a26:	f8c7 3c2c 	str.w	r3, [r7, #3116]	; 0xc2c
 8006a2a:	2302      	movs	r3, #2
 8006a2c:	f8c7 3c30 	str.w	r3, [r7, #3120]	; 0xc30
 8006a30:	f607 4338 	addw	r3, r7, #3128	; 0xc38
 8006a34:	4618      	mov	r0, r3
 8006a36:	f014 fe7e 	bl	801b736 <_ZNSaIcEC1Ev>
 8006a3a:	f607 4338 	addw	r3, r7, #3128	; 0xc38
 8006a3e:	f507 6042 	add.w	r0, r7, #3104	; 0xc20
 8006a42:	f607 422c 	addw	r2, r7, #3116	; 0xc2c
 8006a46:	ca06      	ldmia	r2, {r1, r2}
 8006a48:	f001 f855 	bl	8007af6 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8006a4c:	f507 6342 	add.w	r3, r7, #3104	; 0xc20
 8006a50:	ed9f 0a28 	vldr	s0, [pc, #160]	; 8006af4 <_ZN3jlb5GraphC1Ev+0x3444>
 8006a54:	2202      	movs	r2, #2
 8006a56:	214f      	movs	r1, #79	; 0x4f
 8006a58:	4620      	mov	r0, r4
 8006a5a:	f7fc fde3 	bl	8003624 <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8006a5e:	f507 6342 	add.w	r3, r7, #3104	; 0xc20
 8006a62:	4618      	mov	r0, r3
 8006a64:	f000 fffa 	bl	8007a5c <_ZNSt6vectorIcSaIcEED1Ev>
 8006a68:	f607 4338 	addw	r3, r7, #3128	; 0xc38
 8006a6c:	4618      	mov	r0, r3
 8006a6e:	f014 fe64 	bl	801b73a <_ZNSaIcED1Ev>
            this->operator[]('X').add_edge('Q', Direction::STRAIGHT, {'X'}, 2.5f * UNIT + QUARTER_CIRCLE);
 8006a72:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006a76:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8006a7a:	2158      	movs	r1, #88	; 0x58
 8006a7c:	6818      	ldr	r0, [r3, #0]
 8006a7e:	f000 f83d 	bl	8006afc <_ZN3jlb5GraphixEc>
 8006a82:	4604      	mov	r4, r0
 8006a84:	2358      	movs	r3, #88	; 0x58
 8006a86:	f887 3c50 	strb.w	r3, [r7, #3152]	; 0xc50
 8006a8a:	f507 6345 	add.w	r3, r7, #3152	; 0xc50
 8006a8e:	f8c7 3c48 	str.w	r3, [r7, #3144]	; 0xc48
 8006a92:	2301      	movs	r3, #1
 8006a94:	f8c7 3c4c 	str.w	r3, [r7, #3148]	; 0xc4c
 8006a98:	f607 4354 	addw	r3, r7, #3156	; 0xc54
 8006a9c:	4618      	mov	r0, r3
 8006a9e:	f014 fe4a 	bl	801b736 <_ZNSaIcEC1Ev>
 8006aa2:	f607 4354 	addw	r3, r7, #3156	; 0xc54
 8006aa6:	f607 403c 	addw	r0, r7, #3132	; 0xc3c
 8006aaa:	f607 4248 	addw	r2, r7, #3144	; 0xc48
 8006aae:	ca06      	ldmia	r2, {r1, r2}
 8006ab0:	f001 f821 	bl	8007af6 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8006ab4:	f607 433c 	addw	r3, r7, #3132	; 0xc3c
 8006ab8:	ed9f 0a0f 	vldr	s0, [pc, #60]	; 8006af8 <_ZN3jlb5GraphC1Ev+0x3448>
 8006abc:	2202      	movs	r2, #2
 8006abe:	2151      	movs	r1, #81	; 0x51
 8006ac0:	4620      	mov	r0, r4
 8006ac2:	f7fc fdaf 	bl	8003624 <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8006ac6:	f607 433c 	addw	r3, r7, #3132	; 0xc3c
 8006aca:	4618      	mov	r0, r3
 8006acc:	f000 ffc6 	bl	8007a5c <_ZNSt6vectorIcSaIcEED1Ev>
 8006ad0:	f607 4354 	addw	r3, r7, #3156	; 0xc54
 8006ad4:	4618      	mov	r0, r3
 8006ad6:	f014 fe30 	bl	801b73a <_ZNSaIcED1Ev>
        }
 8006ada:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006ade:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	4618      	mov	r0, r3
 8006ae6:	f607 476c 	addw	r7, r7, #3180	; 0xc6c
 8006aea:	46bd      	mov	sp, r7
 8006aec:	bd90      	pop	{r4, r7, pc}
 8006aee:	bf00      	nop
 8006af0:	0801f0dc 	.word	0x0801f0dc
 8006af4:	3fc56fea 	.word	0x3fc56fea
 8006af8:	401c518f 	.word	0x401c518f

08006afc <_ZN3jlb5GraphixEc>:

        ~Graph() {}
        Node &operator[](char name)
 8006afc:	b580      	push	{r7, lr}
 8006afe:	b082      	sub	sp, #8
 8006b00:	af00      	add	r7, sp, #0
 8006b02:	6078      	str	r0, [r7, #4]
 8006b04:	460b      	mov	r3, r1
 8006b06:	70fb      	strb	r3, [r7, #3]
            if (nodes.empty())
                throw std::runtime_error("Graph is empty");
            if (name < 'A' || name > 'X')
                throw std::runtime_error("Invalid node name");
#endif
            return nodes[static_cast<int>(name - 'A')];
 8006b08:	687a      	ldr	r2, [r7, #4]
 8006b0a:	78fb      	ldrb	r3, [r7, #3]
 8006b0c:	3b41      	subs	r3, #65	; 0x41
 8006b0e:	4619      	mov	r1, r3
 8006b10:	4610      	mov	r0, r2
 8006b12:	f001 f811 	bl	8007b38 <_ZNSt6vectorIN3jlb4NodeESaIS1_EEixEj>
 8006b16:	4603      	mov	r3, r0
        }
 8006b18:	4618      	mov	r0, r3
 8006b1a:	3708      	adds	r7, #8
 8006b1c:	46bd      	mov	sp, r7
 8006b1e:	bd80      	pop	{r7, pc}

08006b20 <_ZNSt12_Vector_baseIcSaIcEE12_Vector_implD1Ev>:
      struct _Vector_impl
 8006b20:	b580      	push	{r7, lr}
 8006b22:	b082      	sub	sp, #8
 8006b24:	af00      	add	r7, sp, #0
 8006b26:	6078      	str	r0, [r7, #4]
 8006b28:	6878      	ldr	r0, [r7, #4]
 8006b2a:	f014 fe06 	bl	801b73a <_ZNSaIcED1Ev>
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	4618      	mov	r0, r3
 8006b32:	3708      	adds	r7, #8
 8006b34:	46bd      	mov	sp, r7
 8006b36:	bd80      	pop	{r7, pc}

08006b38 <_ZNSt12_Vector_baseIcSaIcEEC1Ev>:
      _Vector_base() = default;
 8006b38:	b580      	push	{r7, lr}
 8006b3a:	b082      	sub	sp, #8
 8006b3c:	af00      	add	r7, sp, #0
 8006b3e:	6078      	str	r0, [r7, #4]
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	4618      	mov	r0, r3
 8006b44:	f001 f823 	bl	8007b8e <_ZNSt12_Vector_baseIcSaIcEE12_Vector_implC1Ev>
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	4618      	mov	r0, r3
 8006b4c:	3708      	adds	r7, #8
 8006b4e:	46bd      	mov	sp, r7
 8006b50:	bd80      	pop	{r7, pc}

08006b52 <_ZNSt6vectorIcSaIcEEC1Ev>:
      vector() = default;
 8006b52:	b580      	push	{r7, lr}
 8006b54:	b082      	sub	sp, #8
 8006b56:	af00      	add	r7, sp, #0
 8006b58:	6078      	str	r0, [r7, #4]
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	4618      	mov	r0, r3
 8006b5e:	f7ff ffeb 	bl	8006b38 <_ZNSt12_Vector_baseIcSaIcEEC1Ev>
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	4618      	mov	r0, r3
 8006b66:	3708      	adds	r7, #8
 8006b68:	46bd      	mov	sp, r7
 8006b6a:	bd80      	pop	{r7, pc}

08006b6c <_ZN3jlb12SignalSenderC1ERKNS_8OdometryERKNS_10ControllerERKNS_7ASStateERKNS_5GraphE>:

                std::vector<char> telemetry_data;

#ifndef SIMULATION
                // TODO: initialize UDPClient for STM32
                SignalSender(const Odometry &odometry_, const Controller &controller_, const ASState &as_state_, const Graph &graph_) : odometry(odometry_), controller(controller_), as_state(as_state_), graph(graph_)
 8006b6c:	b580      	push	{r7, lr}
 8006b6e:	b084      	sub	sp, #16
 8006b70:	af00      	add	r7, sp, #0
 8006b72:	60f8      	str	r0, [r7, #12]
 8006b74:	60b9      	str	r1, [r7, #8]
 8006b76:	607a      	str	r2, [r7, #4]
 8006b78:	603b      	str	r3, [r7, #0]
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	68ba      	ldr	r2, [r7, #8]
 8006b7e:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	687a      	ldr	r2, [r7, #4]
 8006b86:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	683a      	ldr	r2, [r7, #0]
 8006b8e:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	69ba      	ldr	r2, [r7, #24]
 8006b96:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8006ba0:	4618      	mov	r0, r3
 8006ba2:	f7ff ffd6 	bl	8006b52 <_ZNSt6vectorIcSaIcEEC1Ev>
                {
                }
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	4618      	mov	r0, r3
 8006baa:	3710      	adds	r7, #16
 8006bac:	46bd      	mov	sp, r7
 8006bae:	bd80      	pop	{r7, pc}

08006bb0 <_ZN3jlb7ASStateC1Ev>:
#define AS_STATE_HXX

namespace jlb
{

    class ASState
 8006bb0:	b480      	push	{r7}
 8006bb2:	b083      	sub	sp, #12
 8006bb4:	af00      	add	r7, sp, #0
 8006bb6:	6078      	str	r0, [r7, #4]
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	2200      	movs	r2, #0
 8006bbc:	701a      	strb	r2, [r3, #0]
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	2200      	movs	r2, #0
 8006bc2:	705a      	strb	r2, [r3, #1]
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	2200      	movs	r2, #0
 8006bc8:	709a      	strb	r2, [r3, #2]
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	2255      	movs	r2, #85	; 0x55
 8006bce:	70da      	strb	r2, [r3, #3]
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	2255      	movs	r2, #85	; 0x55
 8006bd4:	711a      	strb	r2, [r3, #4]
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	4618      	mov	r0, r3
 8006bda:	370c      	adds	r7, #12
 8006bdc:	46bd      	mov	sp, r7
 8006bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006be2:	4770      	bx	lr

08006be4 <_ZN3jlb5LogicC1ENS_9DirectionEfff>:
        ASState as_state;
        Graph graph;

        SignalSender signal_sender = SignalSender(odometry, controller, as_state, graph);

        Logic(Direction direction_ = Direction::STRAIGHT, const float x_t_ = 0.0f, const float y_t_ = 0.0f, const float theta_t_ = 0.0f) : odometry(x_t_, y_t_, theta_t_), controller(direction_) {}
 8006be4:	b590      	push	{r4, r7, lr}
 8006be6:	b089      	sub	sp, #36	; 0x24
 8006be8:	af02      	add	r7, sp, #8
 8006bea:	6178      	str	r0, [r7, #20]
 8006bec:	6139      	str	r1, [r7, #16]
 8006bee:	ed87 0a03 	vstr	s0, [r7, #12]
 8006bf2:	edc7 0a02 	vstr	s1, [r7, #8]
 8006bf6:	ed87 1a01 	vstr	s2, [r7, #4]
 8006bfa:	697b      	ldr	r3, [r7, #20]
 8006bfc:	ed97 1a01 	vldr	s2, [r7, #4]
 8006c00:	edd7 0a02 	vldr	s1, [r7, #8]
 8006c04:	ed97 0a03 	vldr	s0, [r7, #12]
 8006c08:	4618      	mov	r0, r3
 8006c0a:	f7fb fb53 	bl	80022b4 <_ZN3jlb8OdometryC1Efff>
 8006c0e:	697b      	ldr	r3, [r7, #20]
 8006c10:	3384      	adds	r3, #132	; 0x84
 8006c12:	6939      	ldr	r1, [r7, #16]
 8006c14:	4618      	mov	r0, r3
 8006c16:	f7fc f87d 	bl	8002d14 <_ZN3jlb10ControllerC1ENS_9DirectionE>
 8006c1a:	697b      	ldr	r3, [r7, #20]
 8006c1c:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8006c20:	4618      	mov	r0, r3
 8006c22:	f7ff ffc5 	bl	8006bb0 <_ZN3jlb7ASStateC1Ev>
 8006c26:	697b      	ldr	r3, [r7, #20]
 8006c28:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8006c2c:	4618      	mov	r0, r3
 8006c2e:	f7fc fd3f 	bl	80036b0 <_ZN3jlb5GraphC1Ev>
 8006c32:	697b      	ldr	r3, [r7, #20]
 8006c34:	f503 70a8 	add.w	r0, r3, #336	; 0x150
 8006c38:	6979      	ldr	r1, [r7, #20]
 8006c3a:	697b      	ldr	r3, [r7, #20]
 8006c3c:	f103 0284 	add.w	r2, r3, #132	; 0x84
 8006c40:	697b      	ldr	r3, [r7, #20]
 8006c42:	f503 749e 	add.w	r4, r3, #316	; 0x13c
 8006c46:	697b      	ldr	r3, [r7, #20]
 8006c48:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8006c4c:	9300      	str	r3, [sp, #0]
 8006c4e:	4623      	mov	r3, r4
 8006c50:	f7ff ff8c 	bl	8006b6c <_ZN3jlb12SignalSenderC1ERKNS_8OdometryERKNS_10ControllerERKNS_7ASStateERKNS_5GraphE>
 8006c54:	697b      	ldr	r3, [r7, #20]
 8006c56:	4618      	mov	r0, r3
 8006c58:	371c      	adds	r7, #28
 8006c5a:	46bd      	mov	sp, r7
 8006c5c:	bd90      	pop	{r4, r7, pc}

08006c5e <_ZNK9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEE4baseEv>:
      operator-(difference_type __n) const _GLIBCXX_NOEXCEPT
      { return __normal_iterator(_M_current - __n); }

      _GLIBCXX20_CONSTEXPR
      const _Iterator&
      base() const _GLIBCXX_NOEXCEPT
 8006c5e:	b480      	push	{r7}
 8006c60:	b083      	sub	sp, #12
 8006c62:	af00      	add	r7, sp, #0
 8006c64:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	4618      	mov	r0, r3
 8006c6a:	370c      	adds	r7, #12
 8006c6c:	46bd      	mov	sp, r7
 8006c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c72:	4770      	bx	lr

08006c74 <_ZN3jlb5Logic6updateEv>:

        ControlSignal update()
 8006c74:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006c76:	ed2d 8b02 	vpush	{d8}
 8006c7a:	b097      	sub	sp, #92	; 0x5c
 8006c7c:	af00      	add	r7, sp, #0
 8006c7e:	60f8      	str	r0, [r7, #12]
        {
            auto [vx, x, y, theta] = odometry.update_odom();
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	4618      	mov	r0, r3
 8006c84:	f7fb fc74 	bl	8002570 <_ZN3jlb8Odometry11update_odomEv>
 8006c88:	eeb0 6a40 	vmov.f32	s12, s0
 8006c8c:	eef0 6a60 	vmov.f32	s13, s1
 8006c90:	eeb0 7a41 	vmov.f32	s14, s2
 8006c94:	eef0 7a61 	vmov.f32	s15, s3
 8006c98:	ed87 6a09 	vstr	s12, [r7, #36]	; 0x24
 8006c9c:	edc7 6a0a 	vstr	s13, [r7, #40]	; 0x28
 8006ca0:	ed87 7a0b 	vstr	s14, [r7, #44]	; 0x2c
 8006ca4:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
            controller.set_current_velocity(vx);
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	3384      	adds	r3, #132	; 0x84
            auto [vx, x, y, theta] = odometry.update_odom();
 8006cac:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
            controller.set_current_velocity(vx);
 8006cb0:	eeb0 0a67 	vmov.f32	s0, s15
 8006cb4:	4618      	mov	r0, r3
 8006cb6:	f7fc fc31 	bl	800351c <_ZN3jlb10Controller20set_current_velocityEf>

            bool at_decision_point = as_state.under_gate || as_state.at_cross_section;
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	f893 313c 	ldrb.w	r3, [r3, #316]	; 0x13c
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	d104      	bne.n	8006cce <_ZN3jlb5Logic6updateEv+0x5a>
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d001      	beq.n	8006cd2 <_ZN3jlb5Logic6updateEv+0x5e>
 8006cce:	2301      	movs	r3, #1
 8006cd0:	e000      	b.n	8006cd4 <_ZN3jlb5Logic6updateEv+0x60>
 8006cd2:	2300      	movs	r3, #0
 8006cd4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

            if (!as_state.prev_at_decision_point && at_decision_point)
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	f893 313e 	ldrb.w	r3, [r3, #318]	; 0x13e
 8006cde:	f083 0301 	eor.w	r3, r3, #1
 8006ce2:	b2db      	uxtb	r3, r3
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	f000 815e 	beq.w	8006fa6 <_ZN3jlb5Logic6updateEv+0x332>
 8006cea:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	f000 8159 	beq.w	8006fa6 <_ZN3jlb5Logic6updateEv+0x332>
            {
                float inaccuracy = 0.25f;
 8006cf4:	f04f 537a 	mov.w	r3, #1048576000	; 0x3e800000
 8006cf8:	653b      	str	r3, [r7, #80]	; 0x50
                if (std::sqrt(std::pow(graph[as_state.next_node].x - odometry.x_t, 2) + std::pow(graph[as_state.next_node].y - odometry.y_t, 2)) < inaccuracy)
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	f503 72a2 	add.w	r2, r3, #324	; 0x144
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	f893 3140 	ldrb.w	r3, [r3, #320]	; 0x140
 8006d06:	4619      	mov	r1, r3
 8006d08:	4610      	mov	r0, r2
 8006d0a:	f7ff fef7 	bl	8006afc <_ZN3jlb5GraphixEc>
 8006d0e:	4603      	mov	r3, r0
 8006d10:	ed93 7a01 	vldr	s14, [r3, #4]
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	edd3 7a02 	vldr	s15, [r3, #8]
 8006d1a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006d1e:	2002      	movs	r0, #2
 8006d20:	eeb0 0a67 	vmov.f32	s0, s15
 8006d24:	f7fa fa5a 	bl	80011dc <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8006d28:	ec55 4b10 	vmov	r4, r5, d0
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	f503 72a2 	add.w	r2, r3, #324	; 0x144
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	f893 3140 	ldrb.w	r3, [r3, #320]	; 0x140
 8006d38:	4619      	mov	r1, r3
 8006d3a:	4610      	mov	r0, r2
 8006d3c:	f7ff fede 	bl	8006afc <_ZN3jlb5GraphixEc>
 8006d40:	4603      	mov	r3, r0
 8006d42:	ed93 7a02 	vldr	s14, [r3, #8]
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	edd3 7a03 	vldr	s15, [r3, #12]
 8006d4c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006d50:	2002      	movs	r0, #2
 8006d52:	eeb0 0a67 	vmov.f32	s0, s15
 8006d56:	f7fa fa41 	bl	80011dc <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8006d5a:	ec53 2b10 	vmov	r2, r3, d0
 8006d5e:	4620      	mov	r0, r4
 8006d60:	4629      	mov	r1, r5
 8006d62:	f7f9 fa85 	bl	8000270 <__adddf3>
 8006d66:	4602      	mov	r2, r0
 8006d68:	460b      	mov	r3, r1
 8006d6a:	ec43 2b17 	vmov	d7, r2, r3
 8006d6e:	eeb0 0a47 	vmov.f32	s0, s14
 8006d72:	eef0 0a67 	vmov.f32	s1, s15
 8006d76:	f014 fd8f 	bl	801b898 <sqrt>
 8006d7a:	ec55 4b10 	vmov	r4, r5, d0
 8006d7e:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8006d80:	f7f9 fbd4 	bl	800052c <__aeabi_f2d>
 8006d84:	4602      	mov	r2, r0
 8006d86:	460b      	mov	r3, r1
 8006d88:	2101      	movs	r1, #1
 8006d8a:	460e      	mov	r6, r1
 8006d8c:	4620      	mov	r0, r4
 8006d8e:	4629      	mov	r1, r5
 8006d90:	f7f9 fe96 	bl	8000ac0 <__aeabi_dcmplt>
 8006d94:	4603      	mov	r3, r0
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d101      	bne.n	8006d9e <_ZN3jlb5Logic6updateEv+0x12a>
 8006d9a:	2300      	movs	r3, #0
 8006d9c:	461e      	mov	r6, r3
 8006d9e:	b2f3      	uxtb	r3, r6
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	f000 8100 	beq.w	8006fa6 <_ZN3jlb5Logic6updateEv+0x332>
                {
                    auto at_node = as_state.next_node;
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	f893 3140 	ldrb.w	r3, [r3, #320]	; 0x140
 8006dac:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

                    while (true)
                    {
                        unsigned long num_neighbors = graph[at_node].edges.size();
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8006db6:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 8006dba:	4611      	mov	r1, r2
 8006dbc:	4618      	mov	r0, r3
 8006dbe:	f7ff fe9d 	bl	8006afc <_ZN3jlb5GraphixEc>
 8006dc2:	4603      	mov	r3, r0
 8006dc4:	330c      	adds	r3, #12
 8006dc6:	4618      	mov	r0, r3
 8006dc8:	f000 ff2a 	bl	8007c20 <_ZNKSt6vectorIN3jlb4EdgeESaIS1_EE4sizeEv>
 8006dcc:	64b8      	str	r0, [r7, #72]	; 0x48
                        auto selected_edge = rand() % num_neighbors;
 8006dce:	f016 fce7 	bl	801d7a0 <rand>
 8006dd2:	4603      	mov	r3, r0
 8006dd4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006dd6:	fbb3 f2f2 	udiv	r2, r3, r2
 8006dda:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8006ddc:	fb01 f202 	mul.w	r2, r1, r2
 8006de0:	1a9b      	subs	r3, r3, r2
 8006de2:	647b      	str	r3, [r7, #68]	; 0x44

                        if (graph[at_node].edges[selected_edge].node == 'P' ||
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8006dea:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 8006dee:	4611      	mov	r1, r2
 8006df0:	4618      	mov	r0, r3
 8006df2:	f7ff fe83 	bl	8006afc <_ZN3jlb5GraphixEc>
 8006df6:	4603      	mov	r3, r0
 8006df8:	330c      	adds	r3, #12
 8006dfa:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006dfc:	4618      	mov	r0, r3
 8006dfe:	f000 ff25 	bl	8007c4c <_ZNSt6vectorIN3jlb4EdgeESaIS1_EEixEj>
 8006e02:	4603      	mov	r3, r0
 8006e04:	781b      	ldrb	r3, [r3, #0]
                            graph[at_node].edges[selected_edge].node == 'U' ||
 8006e06:	2b50      	cmp	r3, #80	; 0x50
 8006e08:	d025      	beq.n	8006e56 <_ZN3jlb5Logic6updateEv+0x1e2>
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8006e10:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 8006e14:	4611      	mov	r1, r2
 8006e16:	4618      	mov	r0, r3
 8006e18:	f7ff fe70 	bl	8006afc <_ZN3jlb5GraphixEc>
 8006e1c:	4603      	mov	r3, r0
 8006e1e:	330c      	adds	r3, #12
 8006e20:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006e22:	4618      	mov	r0, r3
 8006e24:	f000 ff12 	bl	8007c4c <_ZNSt6vectorIN3jlb4EdgeESaIS1_EEixEj>
 8006e28:	4603      	mov	r3, r0
 8006e2a:	781b      	ldrb	r3, [r3, #0]
                        if (graph[at_node].edges[selected_edge].node == 'P' ||
 8006e2c:	2b55      	cmp	r3, #85	; 0x55
 8006e2e:	d012      	beq.n	8006e56 <_ZN3jlb5Logic6updateEv+0x1e2>
                            graph[at_node].edges[selected_edge].node == 'X')
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8006e36:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 8006e3a:	4611      	mov	r1, r2
 8006e3c:	4618      	mov	r0, r3
 8006e3e:	f7ff fe5d 	bl	8006afc <_ZN3jlb5GraphixEc>
 8006e42:	4603      	mov	r3, r0
 8006e44:	330c      	adds	r3, #12
 8006e46:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006e48:	4618      	mov	r0, r3
 8006e4a:	f000 feff 	bl	8007c4c <_ZNSt6vectorIN3jlb4EdgeESaIS1_EEixEj>
 8006e4e:	4603      	mov	r3, r0
 8006e50:	781b      	ldrb	r3, [r3, #0]
                            graph[at_node].edges[selected_edge].node == 'U' ||
 8006e52:	2b58      	cmp	r3, #88	; 0x58
 8006e54:	d101      	bne.n	8006e5a <_ZN3jlb5Logic6updateEv+0x1e6>
 8006e56:	2301      	movs	r3, #1
 8006e58:	e000      	b.n	8006e5c <_ZN3jlb5Logic6updateEv+0x1e8>
 8006e5a:	2300      	movs	r3, #0
                        if (graph[at_node].edges[selected_edge].node == 'P' ||
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	f040 80a0 	bne.w	8006fa2 <_ZN3jlb5Logic6updateEv+0x32e>
                        {
                            continue;
                        }

                        auto prev_nodes = graph[at_node].edges[selected_edge].prev_nodes;
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8006e68:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 8006e6c:	4611      	mov	r1, r2
 8006e6e:	4618      	mov	r0, r3
 8006e70:	f7ff fe44 	bl	8006afc <_ZN3jlb5GraphixEc>
 8006e74:	4603      	mov	r3, r0
 8006e76:	330c      	adds	r3, #12
 8006e78:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006e7a:	4618      	mov	r0, r3
 8006e7c:	f000 fee6 	bl	8007c4c <_ZNSt6vectorIN3jlb4EdgeESaIS1_EEixEj>
 8006e80:	4603      	mov	r3, r0
 8006e82:	f103 0208 	add.w	r2, r3, #8
 8006e86:	f107 0310 	add.w	r3, r7, #16
 8006e8a:	4611      	mov	r1, r2
 8006e8c:	4618      	mov	r0, r3
 8006e8e:	f000 fda8 	bl	80079e2 <_ZNSt6vectorIcSaIcEEC1ERKS1_>
                        if (std::find(prev_nodes.begin(), prev_nodes.end(), as_state.previous_node) != prev_nodes.end())
 8006e92:	f107 0310 	add.w	r3, r7, #16
 8006e96:	4618      	mov	r0, r3
 8006e98:	f000 feeb 	bl	8007c72 <_ZNSt6vectorIcSaIcEE5beginEv>
 8006e9c:	4604      	mov	r4, r0
 8006e9e:	f107 0310 	add.w	r3, r7, #16
 8006ea2:	4618      	mov	r0, r3
 8006ea4:	f000 feaa 	bl	8007bfc <_ZNSt6vectorIcSaIcEE3endEv>
 8006ea8:	4601      	mov	r1, r0
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	f203 133f 	addw	r3, r3, #319	; 0x13f
 8006eb0:	461a      	mov	r2, r3
 8006eb2:	4620      	mov	r0, r4
 8006eb4:	f000 feed 	bl	8007c92 <_ZSt4findIN9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEEcET_S7_S7_RKT0_>
 8006eb8:	4603      	mov	r3, r0
 8006eba:	637b      	str	r3, [r7, #52]	; 0x34
 8006ebc:	f107 0310 	add.w	r3, r7, #16
 8006ec0:	4618      	mov	r0, r3
 8006ec2:	f000 fe9b 	bl	8007bfc <_ZNSt6vectorIcSaIcEE3endEv>
 8006ec6:	4603      	mov	r3, r0
 8006ec8:	63bb      	str	r3, [r7, #56]	; 0x38
 8006eca:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8006ece:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8006ed2:	4611      	mov	r1, r2
 8006ed4:	4618      	mov	r0, r3
 8006ed6:	f000 fef0 	bl	8007cba <_ZN9__gnu_cxxeqIPcSt6vectorIcSaIcEEEEbRKNS_17__normal_iteratorIT_T0_EESA_>
 8006eda:	4603      	mov	r3, r0
 8006edc:	f083 0301 	eor.w	r3, r3, #1
 8006ee0:	b2db      	uxtb	r3, r3
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d054      	beq.n	8006f90 <_ZN3jlb5Logic6updateEv+0x31c>
                        {
                            as_state.next_node = graph[at_node].edges[selected_edge].node;
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8006eec:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 8006ef0:	4611      	mov	r1, r2
 8006ef2:	4618      	mov	r0, r3
 8006ef4:	f7ff fe02 	bl	8006afc <_ZN3jlb5GraphixEc>
 8006ef8:	4603      	mov	r3, r0
 8006efa:	330c      	adds	r3, #12
 8006efc:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006efe:	4618      	mov	r0, r3
 8006f00:	f000 fea4 	bl	8007c4c <_ZNSt6vectorIN3jlb4EdgeESaIS1_EEixEj>
 8006f04:	4603      	mov	r3, r0
 8006f06:	781a      	ldrb	r2, [r3, #0]
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	f883 2140 	strb.w	r2, [r3, #320]	; 0x140
                            as_state.previous_node = at_node;
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 8006f14:	f883 213f 	strb.w	r2, [r3, #319]	; 0x13f

                            controller.set_direction(graph[at_node].edges[selected_edge].direction);
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	f103 0484 	add.w	r4, r3, #132	; 0x84
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8006f24:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 8006f28:	4611      	mov	r1, r2
 8006f2a:	4618      	mov	r0, r3
 8006f2c:	f7ff fde6 	bl	8006afc <_ZN3jlb5GraphixEc>
 8006f30:	4603      	mov	r3, r0
 8006f32:	330c      	adds	r3, #12
 8006f34:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006f36:	4618      	mov	r0, r3
 8006f38:	f000 fe88 	bl	8007c4c <_ZNSt6vectorIN3jlb4EdgeESaIS1_EEixEj>
 8006f3c:	4603      	mov	r3, r0
 8006f3e:	685b      	ldr	r3, [r3, #4]
 8006f40:	4619      	mov	r1, r3
 8006f42:	4620      	mov	r0, r4
 8006f44:	f7fc fafa 	bl	800353c <_ZN3jlb10Controller13set_directionENS_9DirectionE>
                            odometry.correction(graph[as_state.previous_node].x, graph[as_state.previous_node].y);
 8006f48:	68fc      	ldr	r4, [r7, #12]
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	f503 72a2 	add.w	r2, r3, #324	; 0x144
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	f893 313f 	ldrb.w	r3, [r3, #319]	; 0x13f
 8006f56:	4619      	mov	r1, r3
 8006f58:	4610      	mov	r0, r2
 8006f5a:	f7ff fdcf 	bl	8006afc <_ZN3jlb5GraphixEc>
 8006f5e:	4603      	mov	r3, r0
 8006f60:	ed93 8a01 	vldr	s16, [r3, #4]
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	f503 72a2 	add.w	r2, r3, #324	; 0x144
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	f893 313f 	ldrb.w	r3, [r3, #319]	; 0x13f
 8006f70:	4619      	mov	r1, r3
 8006f72:	4610      	mov	r0, r2
 8006f74:	f7ff fdc2 	bl	8006afc <_ZN3jlb5GraphixEc>
 8006f78:	4603      	mov	r3, r0
 8006f7a:	edd3 7a02 	vldr	s15, [r3, #8]
 8006f7e:	eef0 0a67 	vmov.f32	s1, s15
 8006f82:	eeb0 0a48 	vmov.f32	s0, s16
 8006f86:	4620      	mov	r0, r4
 8006f88:	f7fb fc2a 	bl	80027e0 <_ZN3jlb8Odometry10correctionEff>

                            break;
 8006f8c:	2400      	movs	r4, #0
 8006f8e:	e000      	b.n	8006f92 <_ZN3jlb5Logic6updateEv+0x31e>
                        }
                    }
 8006f90:	2401      	movs	r4, #1
 8006f92:	f107 0310 	add.w	r3, r7, #16
 8006f96:	4618      	mov	r0, r3
 8006f98:	f000 fd60 	bl	8007a5c <_ZNSt6vectorIcSaIcEED1Ev>
 8006f9c:	2c01      	cmp	r4, #1
 8006f9e:	d102      	bne.n	8006fa6 <_ZN3jlb5Logic6updateEv+0x332>
 8006fa0:	e000      	b.n	8006fa4 <_ZN3jlb5Logic6updateEv+0x330>
                            continue;
 8006fa2:	bf00      	nop
                    }
 8006fa4:	e704      	b.n	8006db0 <_ZN3jlb5Logic6updateEv+0x13c>
                    }
#endif
                }
            }

            as_state.prev_at_decision_point = at_decision_point;
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8006fac:	f883 213e 	strb.w	r2, [r3, #318]	; 0x13e

            auto [target_angle, target_speed] = controller.update();
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	3384      	adds	r3, #132	; 0x84
 8006fb4:	4618      	mov	r0, r3
 8006fb6:	f7fc fa3f 	bl	8003438 <_ZN3jlb10Controller6updateEv>
 8006fba:	eeb0 7a40 	vmov.f32	s14, s0
 8006fbe:	eef0 7a60 	vmov.f32	s15, s1
 8006fc2:	ed87 7a07 	vstr	s14, [r7, #28]
 8006fc6:	edc7 7a08 	vstr	s15, [r7, #32]
 8006fca:	69fb      	ldr	r3, [r7, #28]
            return ControlSignal{target_angle, target_speed};
 8006fcc:	63fb      	str	r3, [r7, #60]	; 0x3c
            auto [target_angle, target_speed] = controller.update();
 8006fce:	6a3b      	ldr	r3, [r7, #32]
            return ControlSignal{target_angle, target_speed};
 8006fd0:	643b      	str	r3, [r7, #64]	; 0x40
 8006fd2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006fd4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006fd6:	ee07 2a10 	vmov	s14, r2
 8006fda:	ee07 3a90 	vmov	s15, r3
        }
 8006fde:	eeb0 0a47 	vmov.f32	s0, s14
 8006fe2:	eef0 0a67 	vmov.f32	s1, s15
 8006fe6:	375c      	adds	r7, #92	; 0x5c
 8006fe8:	46bd      	mov	sp, r7
 8006fea:	ecbd 8b02 	vpop	{d8}
 8006fee:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006ff0 <_Z19RegistrateUserTasksv>:
{ .name = "EncoderTask", .stack_size = 128 * 4, .priority = (osPriority_t) osPriorityRealtime2 };



void RegistrateUserTasks()
{
 8006ff0:	b580      	push	{r7, lr}
 8006ff2:	af00      	add	r7, sp, #0
	adcTaskHandle = osThreadNew(ADCTask, NULL, &adcTask_attributes);
 8006ff4:	4a0c      	ldr	r2, [pc, #48]	; (8007028 <_Z19RegistrateUserTasksv+0x38>)
 8006ff6:	2100      	movs	r1, #0
 8006ff8:	480c      	ldr	r0, [pc, #48]	; (800702c <_Z19RegistrateUserTasksv+0x3c>)
 8006ffa:	f011 ffa1 	bl	8018f40 <osThreadNew>
 8006ffe:	4603      	mov	r3, r0
 8007000:	4a0b      	ldr	r2, [pc, #44]	; (8007030 <_Z19RegistrateUserTasksv+0x40>)
 8007002:	6013      	str	r3, [r2, #0]
	mainTaskHandle = osThreadNew(MainTask, NULL, &mainTask_attributes);
 8007004:	4a0b      	ldr	r2, [pc, #44]	; (8007034 <_Z19RegistrateUserTasksv+0x44>)
 8007006:	2100      	movs	r1, #0
 8007008:	480b      	ldr	r0, [pc, #44]	; (8007038 <_Z19RegistrateUserTasksv+0x48>)
 800700a:	f011 ff99 	bl	8018f40 <osThreadNew>
 800700e:	4603      	mov	r3, r0
 8007010:	4a0a      	ldr	r2, [pc, #40]	; (800703c <_Z19RegistrateUserTasksv+0x4c>)
 8007012:	6013      	str	r3, [r2, #0]
	encoderTaskHandle = osThreadNew(Encoder_Task, NULL, &encoderTask_attributes);
 8007014:	4a0a      	ldr	r2, [pc, #40]	; (8007040 <_Z19RegistrateUserTasksv+0x50>)
 8007016:	2100      	movs	r1, #0
 8007018:	480a      	ldr	r0, [pc, #40]	; (8007044 <_Z19RegistrateUserTasksv+0x54>)
 800701a:	f011 ff91 	bl	8018f40 <osThreadNew>
 800701e:	4603      	mov	r3, r0
 8007020:	4a09      	ldr	r2, [pc, #36]	; (8007048 <_Z19RegistrateUserTasksv+0x58>)
 8007022:	6013      	str	r3, [r2, #0]

}
 8007024:	bf00      	nop
 8007026:	bd80      	pop	{r7, pc}
 8007028:	0801f1b4 	.word	0x0801f1b4
 800702c:	0800704d 	.word	0x0800704d
 8007030:	200002d8 	.word	0x200002d8
 8007034:	0801f1d8 	.word	0x0801f1d8
 8007038:	08007081 	.word	0x08007081
 800703c:	200002dc 	.word	0x200002dc
 8007040:	0801f1fc 	.word	0x0801f1fc
 8007044:	08001319 	.word	0x08001319
 8007048:	200002e0 	.word	0x200002e0

0800704c <_Z7ADCTaskPv>:

void ADCTask(void *argument)
{
 800704c:	b580      	push	{r7, lr}
 800704e:	b084      	sub	sp, #16
 8007050:	af00      	add	r7, sp, #0
 8007052:	6078      	str	r0, [r7, #4]
	TickType_t xLastWakeTime;
	xLastWakeTime = xTaskGetTickCount();
 8007054:	f013 f8e6 	bl	801a224 <xTaskGetTickCount>
 8007058:	4603      	mov	r3, r0
 800705a:	60fb      	str	r3, [r7, #12]
	for (;;)
	{
		HAL_ADC_Start_DMA(&hadc1, adc_values_raw, 8u);
 800705c:	2208      	movs	r2, #8
 800705e:	4905      	ldr	r1, [pc, #20]	; (8007074 <_Z7ADCTaskPv+0x28>)
 8007060:	4805      	ldr	r0, [pc, #20]	; (8007078 <_Z7ADCTaskPv+0x2c>)
 8007062:	f008 f84b 	bl	800f0fc <HAL_ADC_Start_DMA>
		vTaskDelayUntil(&xLastWakeTime, 5u);
 8007066:	f107 030c 	add.w	r3, r7, #12
 800706a:	2105      	movs	r1, #5
 800706c:	4618      	mov	r0, r3
 800706e:	f012 fe89 	bl	8019d84 <vTaskDelayUntil>
		HAL_ADC_Start_DMA(&hadc1, adc_values_raw, 8u);
 8007072:	e7f3      	b.n	800705c <_Z7ADCTaskPv+0x10>
 8007074:	20000128 	.word	0x20000128
 8007078:	200002e4 	.word	0x200002e4
 800707c:	00000000 	.word	0x00000000

08007080 <_Z8MainTaskPv>:
	}
}

void MainTask(void * argument)
{
 8007080:	b590      	push	{r4, r7, lr}
 8007082:	f5ad 7d43 	sub.w	sp, sp, #780	; 0x30c
 8007086:	af00      	add	r7, sp, #0
 8007088:	f507 7342 	add.w	r3, r7, #776	; 0x308
 800708c:	f5a3 7341 	sub.w	r3, r3, #772	; 0x304
 8007090:	6018      	str	r0, [r3, #0]
	static uint8_t direction = 1u;
	jlb::Logic logic;
 8007092:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8007096:	ed9f 1a82 	vldr	s2, [pc, #520]	; 80072a0 <_Z8MainTaskPv+0x220>
 800709a:	eddf 0a81 	vldr	s1, [pc, #516]	; 80072a0 <_Z8MainTaskPv+0x220>
 800709e:	ed9f 0a80 	vldr	s0, [pc, #512]	; 80072a0 <_Z8MainTaskPv+0x220>
 80070a2:	2102      	movs	r1, #2
 80070a4:	4618      	mov	r0, r3
 80070a6:	f7ff fd9d 	bl	8006be4 <_ZN3jlb5LogicC1ENS_9DirectionEfff>
	logic.controller.mission = jlb::Mission::FAST;
 80070aa:	f507 7342 	add.w	r3, r7, #776	; 0x308
 80070ae:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 80070b2:	2201      	movs	r2, #1
 80070b4:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
	for (;;)
	{
		lv_battery_voltage = adc_values.lv_batt_voltage_raw / 4096.0f * 3.3f * LV_BATERY_VOLTAGE_DIVIDER * 1.04447;
 80070b8:	4b7a      	ldr	r3, [pc, #488]	; (80072a4 <_Z8MainTaskPv+0x224>)
 80070ba:	899b      	ldrh	r3, [r3, #12]
 80070bc:	ee07 3a90 	vmov	s15, r3
 80070c0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80070c4:	eddf 6a78 	vldr	s13, [pc, #480]	; 80072a8 <_Z8MainTaskPv+0x228>
 80070c8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80070cc:	ed9f 7a77 	vldr	s14, [pc, #476]	; 80072ac <_Z8MainTaskPv+0x22c>
 80070d0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80070d4:	ed9f 7a76 	vldr	s14, [pc, #472]	; 80072b0 <_Z8MainTaskPv+0x230>
 80070d8:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80070dc:	ee16 0a90 	vmov	r0, s13
 80070e0:	f7f9 fa24 	bl	800052c <__aeabi_f2d>
 80070e4:	a36c      	add	r3, pc, #432	; (adr r3, 8007298 <_Z8MainTaskPv+0x218>)
 80070e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070ea:	f7f9 fa77 	bl	80005dc <__aeabi_dmul>
 80070ee:	4602      	mov	r2, r0
 80070f0:	460b      	mov	r3, r1
 80070f2:	4610      	mov	r0, r2
 80070f4:	4619      	mov	r1, r3
 80070f6:	f7f9 fd21 	bl	8000b3c <__aeabi_d2f>
 80070fa:	4603      	mov	r3, r0
 80070fc:	4a6d      	ldr	r2, [pc, #436]	; (80072b4 <_Z8MainTaskPv+0x234>)
 80070fe:	6013      	str	r3, [r2, #0]
		LineSensorTask();
 8007100:	f7fa fc06 	bl	8001910 <_Z14LineSensorTaskv>
		MotorControlTask();
 8007104:	f7fa fe1c 	bl	8001d40 <_Z16MotorControlTaskv>
		IMU_Task();
 8007108:	f7fa f9c8 	bl	800149c <_Z8IMU_Taskv>
		DistanceSensorTask();
 800710c:	f7f9 ff32 	bl	8000f74 <_Z18DistanceSensorTaskv>
		wheel_rpm = CalculateRPM();
 8007110:	f7fa f954 	bl	80013bc <_Z12CalculateRPMv>
 8007114:	eef0 7a40 	vmov.f32	s15, s0
 8007118:	4b67      	ldr	r3, [pc, #412]	; (80072b8 <_Z8MainTaskPv+0x238>)
 800711a:	edc3 7a00 	vstr	s15, [r3]
		{
			motorcontrol.target_velocity = 0.0f;
		}
#else

		logic.odometry.imu_callback(imu.yaw);
 800711e:	4b67      	ldr	r3, [pc, #412]	; (80072bc <_Z8MainTaskPv+0x23c>)
 8007120:	edd3 7a03 	vldr	s15, [r3, #12]
 8007124:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8007128:	eeb0 0a67 	vmov.f32	s0, s15
 800712c:	4618      	mov	r0, r3
 800712e:	f7fb f9ad 	bl	800248c <_ZN3jlb8Odometry12imu_callbackEf>
		logic.odometry.rpm_callback(wheel_rpm);
 8007132:	4b61      	ldr	r3, [pc, #388]	; (80072b8 <_Z8MainTaskPv+0x238>)
 8007134:	edd3 7a00 	vldr	s15, [r3]
 8007138:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800713c:	eeb0 0a67 	vmov.f32	s0, s15
 8007140:	4618      	mov	r0, r3
 8007142:	f7fb f909 	bl	8002358 <_ZN3jlb8Odometry12rpm_callbackEf>

		std::vector<float> front;
 8007146:	f107 031c 	add.w	r3, r7, #28
 800714a:	4618      	mov	r0, r3
 800714c:	f7fb fdd4 	bl	8002cf8 <_ZNSt6vectorIfSaIfEEC1Ev>
		std::vector<float> rear;
 8007150:	f107 0310 	add.w	r3, r7, #16
 8007154:	4618      	mov	r0, r3
 8007156:	f7fb fdcf 	bl	8002cf8 <_ZNSt6vectorIfSaIfEEC1Ev>

		front.push_back(ls_data.position_front);
 800715a:	f107 031c 	add.w	r3, r7, #28
 800715e:	4958      	ldr	r1, [pc, #352]	; (80072c0 <_Z8MainTaskPv+0x240>)
 8007160:	4618      	mov	r0, r3
 8007162:	f000 fdc2 	bl	8007cea <_ZNSt6vectorIfSaIfEE9push_backERKf>
		rear.push_back(ls_data.position_rear);
 8007166:	f107 0310 	add.w	r3, r7, #16
 800716a:	4956      	ldr	r1, [pc, #344]	; (80072c4 <_Z8MainTaskPv+0x244>)
 800716c:	4618      	mov	r0, r3
 800716e:	f000 fdbc 	bl	8007cea <_ZNSt6vectorIfSaIfEE9push_backERKf>

		std::reverse(std::begin(ls_data.front_detection), std::end(ls_data.front_detection));
 8007172:	4855      	ldr	r0, [pc, #340]	; (80072c8 <_Z8MainTaskPv+0x248>)
 8007174:	f000 fa35 	bl	80075e2 <_ZSt5beginIbLj32EEPT_RAT0__S0_>
 8007178:	4604      	mov	r4, r0
 800717a:	4853      	ldr	r0, [pc, #332]	; (80072c8 <_Z8MainTaskPv+0x248>)
 800717c:	f000 fa3c 	bl	80075f8 <_ZSt3endIbLj32EEPT_RAT0__S0_>
 8007180:	4603      	mov	r3, r0
 8007182:	4619      	mov	r1, r3
 8007184:	4620      	mov	r0, r4
 8007186:	f000 fdd5 	bl	8007d34 <_ZSt7reverseIPbEvT_S1_>
		//std::reverse(std::begin(ls_data.rear_detection), std::end(ls_data.rear_detection));
		logic.controller.set_detection_front( ls_data.front_detection, front);
 800718a:	f107 021c 	add.w	r2, r7, #28
 800718e:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8007192:	4611      	mov	r1, r2
 8007194:	4618      	mov	r0, r3
 8007196:	f000 fa67 	bl	8007668 <_ZNSt6vectorIfSaIfEEC1ERKS1_>
 800719a:	f507 723c 	add.w	r2, r7, #752	; 0x2f0
 800719e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80071a2:	3384      	adds	r3, #132	; 0x84
 80071a4:	4948      	ldr	r1, [pc, #288]	; (80072c8 <_Z8MainTaskPv+0x248>)
 80071a6:	4618      	mov	r0, r3
 80071a8:	f7fc f972 	bl	8003490 <_ZN3jlb10Controller19set_detection_frontEPbSt6vectorIfSaIfEE>
 80071ac:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 80071b0:	4618      	mov	r0, r3
 80071b2:	f000 f9aa 	bl	800750a <_ZNSt6vectorIfSaIfEED1Ev>
		logic.controller.set_detection_rear(ls_data.rear_detection, rear);
 80071b6:	f107 0210 	add.w	r2, r7, #16
 80071ba:	f507 733f 	add.w	r3, r7, #764	; 0x2fc
 80071be:	4611      	mov	r1, r2
 80071c0:	4618      	mov	r0, r3
 80071c2:	f000 fa51 	bl	8007668 <_ZNSt6vectorIfSaIfEEC1ERKS1_>
 80071c6:	f507 723f 	add.w	r2, r7, #764	; 0x2fc
 80071ca:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80071ce:	3384      	adds	r3, #132	; 0x84
 80071d0:	493e      	ldr	r1, [pc, #248]	; (80072cc <_Z8MainTaskPv+0x24c>)
 80071d2:	4618      	mov	r0, r3
 80071d4:	f7fc f97f 	bl	80034d6 <_ZN3jlb10Controller18set_detection_rearEPbSt6vectorIfSaIfEE>
 80071d8:	f507 733f 	add.w	r3, r7, #764	; 0x2fc
 80071dc:	4618      	mov	r0, r3
 80071de:	f000 f994 	bl	800750a <_ZNSt6vectorIfSaIfEED1Ev>
		logic.controller.set_object_range(distance_sensor.distance);
 80071e2:	4b3b      	ldr	r3, [pc, #236]	; (80072d0 <_Z8MainTaskPv+0x250>)
 80071e4:	edd3 7a08 	vldr	s15, [r3, #32]
 80071e8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80071ec:	3384      	adds	r3, #132	; 0x84
 80071ee:	eeb0 0a67 	vmov.f32	s0, s15
 80071f2:	4618      	mov	r0, r3
 80071f4:	f7fc f93d 	bl	8003472 <_ZN3jlb10Controller16set_object_rangeEf>
		auto [target_angle, target_speed] = logic.update();
 80071f8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80071fc:	4618      	mov	r0, r3
 80071fe:	f7ff fd39 	bl	8006c74 <_ZN3jlb5Logic6updateEv>
 8007202:	eeb0 7a40 	vmov.f32	s14, s0
 8007206:	eef0 7a60 	vmov.f32	s15, s1
 800720a:	f507 7342 	add.w	r3, r7, #776	; 0x308
 800720e:	f5a3 7340 	sub.w	r3, r3, #768	; 0x300
 8007212:	ed83 7a00 	vstr	s14, [r3]
 8007216:	edc3 7a01 	vstr	s15, [r3, #4]
 800721a:	f507 7342 	add.w	r3, r7, #776	; 0x308
 800721e:	f5a3 7340 	sub.w	r3, r3, #768	; 0x300
 8007222:	edd3 7a00 	vldr	s15, [r3]
		SetSteeringAngle(target_angle);
 8007226:	eeb0 0a67 	vmov.f32	s0, s15
 800722a:	f7fa fedf 	bl	8001fec <_Z16SetSteeringAnglef>
		motorcontrol.actual_velocity = logic.odometry.vx_t;
 800722e:	f507 7342 	add.w	r3, r7, #776	; 0x308
 8007232:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	4a26      	ldr	r2, [pc, #152]	; (80072d4 <_Z8MainTaskPv+0x254>)
 800723a:	6093      	str	r3, [r2, #8]
		auto [target_angle, target_speed] = logic.update();
 800723c:	f507 7342 	add.w	r3, r7, #776	; 0x308
 8007240:	f5a3 7340 	sub.w	r3, r3, #768	; 0x300
 8007244:	685b      	ldr	r3, [r3, #4]
		motorcontrol.target_velocity = target_speed;
 8007246:	4a23      	ldr	r2, [pc, #140]	; (80072d4 <_Z8MainTaskPv+0x254>)
 8007248:	60d3      	str	r3, [r2, #12]
		MotorControlTask();
 800724a:	f7fa fd79 	bl	8001d40 <_Z16MotorControlTaskv>
		auto [target_angle, target_speed] = logic.update();
 800724e:	f507 7342 	add.w	r3, r7, #776	; 0x308
 8007252:	f5a3 7340 	sub.w	r3, r3, #768	; 0x300
 8007256:	edd3 7a00 	vldr	s15, [r3]
		SetSteeringAngle(target_angle * -180.0f / 3.14f);
 800725a:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 80072d8 <_Z8MainTaskPv+0x258>
 800725e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8007262:	eddf 6a1e 	vldr	s13, [pc, #120]	; 80072dc <_Z8MainTaskPv+0x25c>
 8007266:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800726a:	eeb0 0a47 	vmov.f32	s0, s14
 800726e:	f7fa febd 	bl	8001fec <_Z16SetSteeringAnglef>

		//logic.signal_sender.send_telemetry();

#endif
		vTaskSuspend(static_cast<TaskHandle_t>(mainTaskHandle));
 8007272:	4b1b      	ldr	r3, [pc, #108]	; (80072e0 <_Z8MainTaskPv+0x260>)
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	4618      	mov	r0, r3
 8007278:	f012 fe06 	bl	8019e88 <vTaskSuspend>
	}
 800727c:	f107 0310 	add.w	r3, r7, #16
 8007280:	4618      	mov	r0, r3
 8007282:	f000 f942 	bl	800750a <_ZNSt6vectorIfSaIfEED1Ev>
 8007286:	f107 031c 	add.w	r3, r7, #28
 800728a:	4618      	mov	r0, r3
 800728c:	f000 f93d 	bl	800750a <_ZNSt6vectorIfSaIfEED1Ev>
 8007290:	e712      	b.n	80070b8 <_Z8MainTaskPv+0x38>
 8007292:	bf00      	nop
 8007294:	f3af 8000 	nop.w
 8007298:	2cba732e 	.word	0x2cba732e
 800729c:	3ff0b626 	.word	0x3ff0b626
 80072a0:	00000000 	.word	0x00000000
 80072a4:	20000148 	.word	0x20000148
 80072a8:	45800000 	.word	0x45800000
 80072ac:	40533333 	.word	0x40533333
 80072b0:	3e7df3b6 	.word	0x3e7df3b6
 80072b4:	200002d0 	.word	0x200002d0
 80072b8:	200002d4 	.word	0x200002d4
 80072bc:	200001a4 	.word	0x200001a4
 80072c0:	2000027c 	.word	0x2000027c
 80072c4:	20000280 	.word	0x20000280
 80072c8:	2000023c 	.word	0x2000023c
 80072cc:	2000025c 	.word	0x2000025c
 80072d0:	20000158 	.word	0x20000158
 80072d4:	20000284 	.word	0x20000284
 80072d8:	c3340000 	.word	0xc3340000
 80072dc:	4048f5c3 	.word	0x4048f5c3
 80072e0:	200002dc 	.word	0x200002dc

080072e4 <_ZNSt11_Deque_baseIfSaIfEEC1Ev>:
      _Deque_base()
 80072e4:	b580      	push	{r7, lr}
 80072e6:	b082      	sub	sp, #8
 80072e8:	af00      	add	r7, sp, #0
 80072ea:	6078      	str	r0, [r7, #4]
      : _M_impl()
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	4618      	mov	r0, r3
 80072f0:	f000 fd33 	bl	8007d5a <_ZNSt11_Deque_baseIfSaIfEE11_Deque_implC1Ev>
      { _M_initialize_map(0); }
 80072f4:	2100      	movs	r1, #0
 80072f6:	6878      	ldr	r0, [r7, #4]
 80072f8:	f000 fd3f 	bl	8007d7a <_ZNSt11_Deque_baseIfSaIfEE17_M_initialize_mapEj>
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	4618      	mov	r0, r3
 8007300:	3708      	adds	r7, #8
 8007302:	46bd      	mov	sp, r7
 8007304:	bd80      	pop	{r7, pc}

08007306 <_ZNSt5dequeIfSaIfEE9push_backERKf>:
       *  element at the end of the %deque and assigns the given data
       *  to it.  Due to the nature of a %deque this operation can be
       *  done in constant time.
       */
      void
      push_back(const value_type& __x)
 8007306:	b580      	push	{r7, lr}
 8007308:	b082      	sub	sp, #8
 800730a:	af00      	add	r7, sp, #0
 800730c:	6078      	str	r0, [r7, #4]
 800730e:	6039      	str	r1, [r7, #0]
      {
	if (this->_M_impl._M_finish._M_cur
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	699a      	ldr	r2, [r3, #24]
	    != this->_M_impl._M_finish._M_last - 1)
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	6a1b      	ldr	r3, [r3, #32]
 8007318:	3b04      	subs	r3, #4
	if (this->_M_impl._M_finish._M_cur
 800731a:	429a      	cmp	r2, r3
 800731c:	d00c      	beq.n	8007338 <_ZNSt5dequeIfSaIfEE9push_backERKf+0x32>
	  {
	    _Alloc_traits::construct(this->_M_impl,
 800731e:	6878      	ldr	r0, [r7, #4]
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	699b      	ldr	r3, [r3, #24]
 8007324:	683a      	ldr	r2, [r7, #0]
 8007326:	4619      	mov	r1, r3
 8007328:	f000 fdc5 	bl	8007eb6 <_ZNSt16allocator_traitsISaIfEE9constructIfJRKfEEEvRS0_PT_DpOT0_>
				     this->_M_impl._M_finish._M_cur, __x);
	    ++this->_M_impl._M_finish._M_cur;
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	699b      	ldr	r3, [r3, #24]
 8007330:	1d1a      	adds	r2, r3, #4
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	619a      	str	r2, [r3, #24]
	  }
	else
	  _M_push_back_aux(__x);
      }
 8007336:	e003      	b.n	8007340 <_ZNSt5dequeIfSaIfEE9push_backERKf+0x3a>
	  _M_push_back_aux(__x);
 8007338:	6839      	ldr	r1, [r7, #0]
 800733a:	6878      	ldr	r0, [r7, #4]
 800733c:	f000 fdce 	bl	8007edc <_ZNSt5dequeIfSaIfEE16_M_push_back_auxIJRKfEEEvDpOT_>
      }
 8007340:	bf00      	nop
 8007342:	3708      	adds	r7, #8
 8007344:	46bd      	mov	sp, r7
 8007346:	bd80      	pop	{r7, pc}

08007348 <_ZNKSt5dequeIfSaIfEE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 8007348:	b580      	push	{r7, lr}
 800734a:	b082      	sub	sp, #8
 800734c:	af00      	add	r7, sp, #0
 800734e:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_finish - this->_M_impl._M_start; }
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	f103 0218 	add.w	r2, r3, #24
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	3308      	adds	r3, #8
 800735a:	4619      	mov	r1, r3
 800735c:	4610      	mov	r0, r2
 800735e:	f000 fe01 	bl	8007f64 <_ZStmiRKSt15_Deque_iteratorIfRfPfES4_>
 8007362:	4603      	mov	r3, r0
 8007364:	4618      	mov	r0, r3
 8007366:	3708      	adds	r7, #8
 8007368:	46bd      	mov	sp, r7
 800736a:	bd80      	pop	{r7, pc}

0800736c <_ZNSt5dequeIfSaIfEE9pop_frontEv>:
       *
       *  Note that no data is returned, and if the first element's data is
       *  needed, it should be retrieved before pop_front() is called.
       */
      void
      pop_front() _GLIBCXX_NOEXCEPT
 800736c:	b580      	push	{r7, lr}
 800736e:	b082      	sub	sp, #8
 8007370:	af00      	add	r7, sp, #0
 8007372:	6078      	str	r0, [r7, #4]
      {
	__glibcxx_requires_nonempty();
	if (this->_M_impl._M_start._M_cur
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	689a      	ldr	r2, [r3, #8]
	    != this->_M_impl._M_start._M_last - 1)
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	691b      	ldr	r3, [r3, #16]
 800737c:	3b04      	subs	r3, #4
	if (this->_M_impl._M_start._M_cur
 800737e:	429a      	cmp	r2, r3
 8007380:	d010      	beq.n	80073a4 <_ZNSt5dequeIfSaIfEE9pop_frontEv+0x38>
	  {
	    _Alloc_traits::destroy(_M_get_Tp_allocator(),
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	4618      	mov	r0, r3
 8007386:	f000 fd76 	bl	8007e76 <_ZNSt11_Deque_baseIfSaIfEE19_M_get_Tp_allocatorEv>
 800738a:	4602      	mov	r2, r0
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	689b      	ldr	r3, [r3, #8]
 8007390:	4619      	mov	r1, r3
 8007392:	4610      	mov	r0, r2
 8007394:	f000 fe12 	bl	8007fbc <_ZNSt16allocator_traitsISaIfEE7destroyIfEEvRS0_PT_>
				   this->_M_impl._M_start._M_cur);
	    ++this->_M_impl._M_start._M_cur;
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	689b      	ldr	r3, [r3, #8]
 800739c:	1d1a      	adds	r2, r3, #4
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	609a      	str	r2, [r3, #8]
	  }
	else
	  _M_pop_front_aux();
      }
 80073a2:	e002      	b.n	80073aa <_ZNSt5dequeIfSaIfEE9pop_frontEv+0x3e>
	  _M_pop_front_aux();
 80073a4:	6878      	ldr	r0, [r7, #4]
 80073a6:	f000 fe15 	bl	8007fd4 <_ZNSt5dequeIfSaIfEE16_M_pop_front_auxEv>
      }
 80073aa:	bf00      	nop
 80073ac:	3708      	adds	r7, #8
 80073ae:	46bd      	mov	sp, r7
 80073b0:	bd80      	pop	{r7, pc}

080073b2 <_ZNSt5dequeIfSaIfEE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 80073b2:	b580      	push	{r7, lr}
 80073b4:	b082      	sub	sp, #8
 80073b6:	af00      	add	r7, sp, #0
 80073b8:	6078      	str	r0, [r7, #4]
 80073ba:	6039      	str	r1, [r7, #0]
      { return this->_M_impl._M_start; }
 80073bc:	683b      	ldr	r3, [r7, #0]
 80073be:	3308      	adds	r3, #8
 80073c0:	4619      	mov	r1, r3
 80073c2:	6878      	ldr	r0, [r7, #4]
 80073c4:	f000 fe2e 	bl	8008024 <_ZNSt15_Deque_iteratorIfRfPfEC1ERKS2_>
 80073c8:	6878      	ldr	r0, [r7, #4]
 80073ca:	3708      	adds	r7, #8
 80073cc:	46bd      	mov	sp, r7
 80073ce:	bd80      	pop	{r7, pc}

080073d0 <_ZNSt5dequeIfSaIfEE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 80073d0:	b580      	push	{r7, lr}
 80073d2:	b082      	sub	sp, #8
 80073d4:	af00      	add	r7, sp, #0
 80073d6:	6078      	str	r0, [r7, #4]
 80073d8:	6039      	str	r1, [r7, #0]
      { return this->_M_impl._M_finish; }
 80073da:	683b      	ldr	r3, [r7, #0]
 80073dc:	3318      	adds	r3, #24
 80073de:	4619      	mov	r1, r3
 80073e0:	6878      	ldr	r0, [r7, #4]
 80073e2:	f000 fe1f 	bl	8008024 <_ZNSt15_Deque_iteratorIfRfPfEC1ERKS2_>
 80073e6:	6878      	ldr	r0, [r7, #4]
 80073e8:	3708      	adds	r7, #8
 80073ea:	46bd      	mov	sp, r7
 80073ec:	bd80      	pop	{r7, pc}

080073ee <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>:
   *  @return The parameter cast to an rvalue-reference to allow moving it.
  */
  template<typename _Tp>
    _GLIBCXX_NODISCARD
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
 80073ee:	b480      	push	{r7}
 80073f0:	b083      	sub	sp, #12
 80073f2:	af00      	add	r7, sp, #0
 80073f4:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	4618      	mov	r0, r3
 80073fa:	370c      	adds	r7, #12
 80073fc:	46bd      	mov	sp, r7
 80073fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007402:	4770      	bx	lr

08007404 <_ZSt10accumulateISt15_Deque_iteratorIfRfPfEfET0_T_S5_S4_>:
   *  @return  The final sum.
   */
  template<typename _InputIterator, typename _Tp>
    _GLIBCXX20_CONSTEXPR
    inline _Tp
    accumulate(_InputIterator __first, _InputIterator __last, _Tp __init)
 8007404:	b580      	push	{r7, lr}
 8007406:	ed2d 8b02 	vpush	{d8}
 800740a:	b084      	sub	sp, #16
 800740c:	af00      	add	r7, sp, #0
 800740e:	60f8      	str	r0, [r7, #12]
 8007410:	60b9      	str	r1, [r7, #8]
 8007412:	ed87 0a01 	vstr	s0, [r7, #4]
    {
      // concept requirements
      __glibcxx_function_requires(_InputIteratorConcept<_InputIterator>)
      __glibcxx_requires_valid_range(__first, __last);

      for (; __first != __last; ++__first)
 8007416:	e013      	b.n	8007440 <_ZSt10accumulateISt15_Deque_iteratorIfRfPfEfET0_T_S5_S4_+0x3c>
	__init = _GLIBCXX_MOVE_IF_20(__init) + *__first;
 8007418:	1d3b      	adds	r3, r7, #4
 800741a:	4618      	mov	r0, r3
 800741c:	f7ff ffe7 	bl	80073ee <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>
 8007420:	4603      	mov	r3, r0
 8007422:	ed93 8a00 	vldr	s16, [r3]
 8007426:	68f8      	ldr	r0, [r7, #12]
 8007428:	f000 fe4b 	bl	80080c2 <_ZNKSt15_Deque_iteratorIfRfPfEdeEv>
 800742c:	4603      	mov	r3, r0
 800742e:	edd3 7a00 	vldr	s15, [r3]
 8007432:	ee78 7a27 	vadd.f32	s15, s16, s15
 8007436:	edc7 7a01 	vstr	s15, [r7, #4]
      for (; __first != __last; ++__first)
 800743a:	68f8      	ldr	r0, [r7, #12]
 800743c:	f000 fe22 	bl	8008084 <_ZNSt15_Deque_iteratorIfRfPfEppEv>
 8007440:	68b9      	ldr	r1, [r7, #8]
 8007442:	68f8      	ldr	r0, [r7, #12]
 8007444:	f000 fe0a 	bl	800805c <_ZSteqRKSt15_Deque_iteratorIfRfPfES4_>
 8007448:	4603      	mov	r3, r0
 800744a:	f083 0301 	eor.w	r3, r3, #1
 800744e:	b2db      	uxtb	r3, r3
 8007450:	2b00      	cmp	r3, #0
 8007452:	d1e1      	bne.n	8007418 <_ZSt10accumulateISt15_Deque_iteratorIfRfPfEfET0_T_S5_S4_+0x14>
      return __init;
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	ee07 3a90 	vmov	s15, r3
    }
 800745a:	eeb0 0a67 	vmov.f32	s0, s15
 800745e:	3710      	adds	r7, #16
 8007460:	46bd      	mov	sp, r7
 8007462:	ecbd 8b02 	vpop	{d8}
 8007466:	bd80      	pop	{r7, pc}

08007468 <_ZSt3minIfET_St16initializer_listIS0_E>:

  // N2722 + DR 915.
  template<typename _Tp>
    _GLIBCXX14_CONSTEXPR
    inline _Tp
    min(initializer_list<_Tp> __l)
 8007468:	b590      	push	{r4, r7, lr}
 800746a:	b083      	sub	sp, #12
 800746c:	af00      	add	r7, sp, #0
 800746e:	463b      	mov	r3, r7
 8007470:	e883 0003 	stmia.w	r3, {r0, r1}
    { return *std::min_element(__l.begin(), __l.end()); }
 8007474:	463b      	mov	r3, r7
 8007476:	4618      	mov	r0, r3
 8007478:	f000 fe2f 	bl	80080da <_ZNKSt16initializer_listIfE5beginEv>
 800747c:	4604      	mov	r4, r0
 800747e:	463b      	mov	r3, r7
 8007480:	4618      	mov	r0, r3
 8007482:	f000 fe36 	bl	80080f2 <_ZNKSt16initializer_listIfE3endEv>
 8007486:	4603      	mov	r3, r0
 8007488:	4619      	mov	r1, r3
 800748a:	4620      	mov	r0, r4
 800748c:	f000 fe43 	bl	8008116 <_ZSt11min_elementIPKfET_S2_S2_>
 8007490:	4603      	mov	r3, r0
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	ee07 3a90 	vmov	s15, r3
 8007498:	eeb0 0a67 	vmov.f32	s0, s15
 800749c:	370c      	adds	r7, #12
 800749e:	46bd      	mov	sp, r7
 80074a0:	bd90      	pop	{r4, r7, pc}

080074a2 <_ZNSt12_Vector_baseIfSaIfEE12_Vector_implC1Ev>:
	_Vector_impl() _GLIBCXX_NOEXCEPT_IF(
 80074a2:	b580      	push	{r7, lr}
 80074a4:	b082      	sub	sp, #8
 80074a6:	af00      	add	r7, sp, #0
 80074a8:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 80074aa:	6878      	ldr	r0, [r7, #4]
 80074ac:	f000 fe44 	bl	8008138 <_ZNSaIfEC1Ev>
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	4618      	mov	r0, r3
 80074b4:	f000 fe4c 	bl	8008150 <_ZNSt12_Vector_baseIfSaIfEE17_Vector_impl_dataC1Ev>
	{ }
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	4618      	mov	r0, r3
 80074bc:	3708      	adds	r7, #8
 80074be:	46bd      	mov	sp, r7
 80074c0:	bd80      	pop	{r7, pc}

080074c2 <_ZNSaIfED1Ev>:
	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }

#if __cpp_constexpr_dynamic_alloc
      constexpr
#endif
      ~allocator() _GLIBCXX_NOTHROW { }
 80074c2:	b480      	push	{r7}
 80074c4:	b083      	sub	sp, #12
 80074c6:	af00      	add	r7, sp, #0
 80074c8:	6078      	str	r0, [r7, #4]
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	4618      	mov	r0, r3
 80074ce:	370c      	adds	r7, #12
 80074d0:	46bd      	mov	sp, r7
 80074d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074d6:	4770      	bx	lr

080074d8 <_ZNSt12_Vector_baseIfSaIfEED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 80074d8:	b580      	push	{r7, lr}
 80074da:	b082      	sub	sp, #8
 80074dc:	af00      	add	r7, sp, #0
 80074de:	6078      	str	r0, [r7, #4]
	_M_deallocate(_M_impl._M_start,
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	6819      	ldr	r1, [r3, #0]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	689a      	ldr	r2, [r3, #8]
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	1ad3      	subs	r3, r2, r3
 80074ee:	109b      	asrs	r3, r3, #2
	_M_deallocate(_M_impl._M_start,
 80074f0:	461a      	mov	r2, r3
 80074f2:	6878      	ldr	r0, [r7, #4]
 80074f4:	f000 fe40 	bl	8008178 <_ZNSt12_Vector_baseIfSaIfEE13_M_deallocateEPfj>
      }
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	4618      	mov	r0, r3
 80074fc:	f7fb fbe3 	bl	8002cc6 <_ZNSt12_Vector_baseIfSaIfEE12_Vector_implD1Ev>
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	4618      	mov	r0, r3
 8007504:	3708      	adds	r7, #8
 8007506:	46bd      	mov	sp, r7
 8007508:	bd80      	pop	{r7, pc}

0800750a <_ZNSt6vectorIfSaIfEED1Ev>:
       *  The dtor only erases the elements, and note that if the
       *  elements themselves are pointers, the pointed-to memory is
       *  not touched in any way.  Managing the pointer is the user's
       *  responsibility.
       */
      ~vector() _GLIBCXX_NOEXCEPT
 800750a:	b5b0      	push	{r4, r5, r7, lr}
 800750c:	b082      	sub	sp, #8
 800750e:	af00      	add	r7, sp, #0
 8007510:	6078      	str	r0, [r7, #4]
      {
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	681c      	ldr	r4, [r3, #0]
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator());
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	4618      	mov	r0, r3
 800751e:	f000 fe3e 	bl	800819e <_ZNSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>
 8007522:	4603      	mov	r3, r0
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8007524:	461a      	mov	r2, r3
 8007526:	4629      	mov	r1, r5
 8007528:	4620      	mov	r0, r4
 800752a:	f000 fe43 	bl	80081b4 <_ZSt8_DestroyIPffEvT_S1_RSaIT0_E>
	_GLIBCXX_ASAN_ANNOTATE_BEFORE_DEALLOC;
      }
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	4618      	mov	r0, r3
 8007532:	f7ff ffd1 	bl	80074d8 <_ZNSt12_Vector_baseIfSaIfEED1Ev>
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	4618      	mov	r0, r3
 800753a:	3708      	adds	r7, #8
 800753c:	46bd      	mov	sp, r7
 800753e:	bdb0      	pop	{r4, r5, r7, pc}

08007540 <_ZNSt6vectorIfSaIfEE5beginEv>:
       *  Returns a read/write iterator that points to the first
       *  element in the %vector.  Iteration is done in ordinary
       *  element order.
       */
      iterator
      begin() _GLIBCXX_NOEXCEPT
 8007540:	b580      	push	{r7, lr}
 8007542:	b084      	sub	sp, #16
 8007544:	af00      	add	r7, sp, #0
 8007546:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_start); }
 8007548:	687a      	ldr	r2, [r7, #4]
 800754a:	f107 030c 	add.w	r3, r7, #12
 800754e:	4611      	mov	r1, r2
 8007550:	4618      	mov	r0, r3
 8007552:	f000 fe3d 	bl	80081d0 <_ZN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEC1ERKS1_>
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	4618      	mov	r0, r3
 800755a:	3710      	adds	r7, #16
 800755c:	46bd      	mov	sp, r7
 800755e:	bd80      	pop	{r7, pc}

08007560 <_ZNSt6vectorIfSaIfEE3endEv>:
       *  Returns a read/write iterator that points one past the last
       *  element in the %vector.  Iteration is done in ordinary
       *  element order.
       */
      iterator
      end() _GLIBCXX_NOEXCEPT
 8007560:	b580      	push	{r7, lr}
 8007562:	b084      	sub	sp, #16
 8007564:	af00      	add	r7, sp, #0
 8007566:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_finish); }
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	1d1a      	adds	r2, r3, #4
 800756c:	f107 030c 	add.w	r3, r7, #12
 8007570:	4611      	mov	r1, r2
 8007572:	4618      	mov	r0, r3
 8007574:	f000 fe2c 	bl	80081d0 <_ZN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEC1ERKS1_>
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	4618      	mov	r0, r3
 800757c:	3710      	adds	r7, #16
 800757e:	46bd      	mov	sp, r7
 8007580:	bd80      	pop	{r7, pc}

08007582 <_ZSt4sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEEvT_S7_>:
   *  @p stable_sort() if this is needed.
  */
  template<typename _RandomAccessIterator>
    _GLIBCXX20_CONSTEXPR
    inline void
    sort(_RandomAccessIterator __first, _RandomAccessIterator __last)
 8007582:	b590      	push	{r4, r7, lr}
 8007584:	b083      	sub	sp, #12
 8007586:	af00      	add	r7, sp, #0
 8007588:	6078      	str	r0, [r7, #4]
 800758a:	6039      	str	r1, [r7, #0]
      __glibcxx_function_requires(_LessThanComparableConcept<
	    typename iterator_traits<_RandomAccessIterator>::value_type>)
      __glibcxx_requires_valid_range(__first, __last);
      __glibcxx_requires_irreflexive(__first, __last);

      std::__sort(__first, __last, __gnu_cxx::__ops::__iter_less_iter());
 800758c:	f7fa fe4e 	bl	800222c <_ZN9__gnu_cxx5__ops16__iter_less_iterEv>
 8007590:	4622      	mov	r2, r4
 8007592:	6839      	ldr	r1, [r7, #0]
 8007594:	6878      	ldr	r0, [r7, #4]
 8007596:	f000 fe63 	bl	8008260 <_ZSt6__sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_T0_>
    }
 800759a:	bf00      	nop
 800759c:	370c      	adds	r7, #12
 800759e:	46bd      	mov	sp, r7
 80075a0:	bd90      	pop	{r4, r7, pc}

080075a2 <_ZNKSt6vectorIfSaIfEE4sizeEv>:
#endif

      // [23.2.4.2] capacity
      /**  Returns the number of elements in the %vector.  */
      size_type
      size() const _GLIBCXX_NOEXCEPT
 80075a2:	b480      	push	{r7}
 80075a4:	b083      	sub	sp, #12
 80075a6:	af00      	add	r7, sp, #0
 80075a8:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	685a      	ldr	r2, [r3, #4]
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	1ad3      	subs	r3, r2, r3
 80075b4:	109b      	asrs	r3, r3, #2
 80075b6:	4618      	mov	r0, r3
 80075b8:	370c      	adds	r7, #12
 80075ba:	46bd      	mov	sp, r7
 80075bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075c0:	4770      	bx	lr

080075c2 <_ZNSt6vectorIfSaIfEEixEj>:
       *  Note that data access with this operator is unchecked and
       *  out_of_range lookups are not defined. (For checked lookups
       *  see at().)
       */
      reference
      operator[](size_type __n) _GLIBCXX_NOEXCEPT
 80075c2:	b480      	push	{r7}
 80075c4:	b083      	sub	sp, #12
 80075c6:	af00      	add	r7, sp, #0
 80075c8:	6078      	str	r0, [r7, #4]
 80075ca:	6039      	str	r1, [r7, #0]
      {
	__glibcxx_requires_subscript(__n);
	return *(this->_M_impl._M_start + __n);
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	681a      	ldr	r2, [r3, #0]
 80075d0:	683b      	ldr	r3, [r7, #0]
 80075d2:	009b      	lsls	r3, r3, #2
 80075d4:	4413      	add	r3, r2
      }
 80075d6:	4618      	mov	r0, r3
 80075d8:	370c      	adds	r7, #12
 80075da:	46bd      	mov	sp, r7
 80075dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075e0:	4770      	bx	lr

080075e2 <_ZSt5beginIbLj32EEPT_RAT0__S0_>:
   *  @brief  Return an iterator pointing to the first element of the array.
   *  @param  __arr  Array.
   */
  template<typename _Tp, size_t _Nm>
    inline _GLIBCXX14_CONSTEXPR _Tp*
    begin(_Tp (&__arr)[_Nm]) noexcept
 80075e2:	b480      	push	{r7}
 80075e4:	b083      	sub	sp, #12
 80075e6:	af00      	add	r7, sp, #0
 80075e8:	6078      	str	r0, [r7, #4]
    { return __arr; }
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	4618      	mov	r0, r3
 80075ee:	370c      	adds	r7, #12
 80075f0:	46bd      	mov	sp, r7
 80075f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075f6:	4770      	bx	lr

080075f8 <_ZSt3endIbLj32EEPT_RAT0__S0_>:
   *          of the array.
   *  @param  __arr  Array.
   */
  template<typename _Tp, size_t _Nm>
    inline _GLIBCXX14_CONSTEXPR _Tp*
    end(_Tp (&__arr)[_Nm]) noexcept
 80075f8:	b480      	push	{r7}
 80075fa:	b083      	sub	sp, #12
 80075fc:	af00      	add	r7, sp, #0
 80075fe:	6078      	str	r0, [r7, #4]
    { return __arr + _Nm; }
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	3320      	adds	r3, #32
 8007604:	4618      	mov	r0, r3
 8007606:	370c      	adds	r7, #12
 8007608:	46bd      	mov	sp, r7
 800760a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800760e:	4770      	bx	lr

08007610 <_ZSt6all_ofIPbZN3jlb10Controller15lateral_controlEvEUlbE_EbT_S4_T0_>:
    all_of(_InputIterator __first, _InputIterator __last, _Predicate __pred)
 8007610:	b580      	push	{r7, lr}
 8007612:	b084      	sub	sp, #16
 8007614:	af00      	add	r7, sp, #0
 8007616:	60f8      	str	r0, [r7, #12]
 8007618:	60b9      	str	r1, [r7, #8]
 800761a:	713a      	strb	r2, [r7, #4]
    { return __last == std::find_if_not(__first, __last, __pred); }
 800761c:	461a      	mov	r2, r3
 800761e:	68b9      	ldr	r1, [r7, #8]
 8007620:	68f8      	ldr	r0, [r7, #12]
 8007622:	f000 fe4d 	bl	80082c0 <_ZSt11find_if_notIPbZN3jlb10Controller15lateral_controlEvEUlbE_ET_S4_S4_T0_>
 8007626:	4602      	mov	r2, r0
 8007628:	68bb      	ldr	r3, [r7, #8]
 800762a:	4293      	cmp	r3, r2
 800762c:	bf0c      	ite	eq
 800762e:	2301      	moveq	r3, #1
 8007630:	2300      	movne	r3, #0
 8007632:	b2db      	uxtb	r3, r3
 8007634:	4618      	mov	r0, r3
 8007636:	3710      	adds	r7, #16
 8007638:	46bd      	mov	sp, r7
 800763a:	bd80      	pop	{r7, pc}

0800763c <_ZSt6all_ofIPbZN3jlb10Controller15lateral_controlEvEUlbE0_EbT_S4_T0_>:
    all_of(_InputIterator __first, _InputIterator __last, _Predicate __pred)
 800763c:	b580      	push	{r7, lr}
 800763e:	b084      	sub	sp, #16
 8007640:	af00      	add	r7, sp, #0
 8007642:	60f8      	str	r0, [r7, #12]
 8007644:	60b9      	str	r1, [r7, #8]
 8007646:	713a      	strb	r2, [r7, #4]
    { return __last == std::find_if_not(__first, __last, __pred); }
 8007648:	461a      	mov	r2, r3
 800764a:	68b9      	ldr	r1, [r7, #8]
 800764c:	68f8      	ldr	r0, [r7, #12]
 800764e:	f000 fe4a 	bl	80082e6 <_ZSt11find_if_notIPbZN3jlb10Controller15lateral_controlEvEUlbE0_ET_S4_S4_T0_>
 8007652:	4602      	mov	r2, r0
 8007654:	68bb      	ldr	r3, [r7, #8]
 8007656:	4293      	cmp	r3, r2
 8007658:	bf0c      	ite	eq
 800765a:	2301      	moveq	r3, #1
 800765c:	2300      	movne	r3, #0
 800765e:	b2db      	uxtb	r3, r3
 8007660:	4618      	mov	r0, r3
 8007662:	3710      	adds	r7, #16
 8007664:	46bd      	mov	sp, r7
 8007666:	bd80      	pop	{r7, pc}

08007668 <_ZNSt6vectorIfSaIfEEC1ERKS1_>:
      vector(const vector& __x)
 8007668:	b5f0      	push	{r4, r5, r6, r7, lr}
 800766a:	b085      	sub	sp, #20
 800766c:	af00      	add	r7, sp, #0
 800766e:	6078      	str	r0, [r7, #4]
 8007670:	6039      	str	r1, [r7, #0]
	_Alloc_traits::_S_select_on_copy(__x._M_get_Tp_allocator()))
 8007672:	687c      	ldr	r4, [r7, #4]
 8007674:	6838      	ldr	r0, [r7, #0]
 8007676:	f7ff ff94 	bl	80075a2 <_ZNKSt6vectorIfSaIfEE4sizeEv>
 800767a:	4605      	mov	r5, r0
 800767c:	683b      	ldr	r3, [r7, #0]
 800767e:	4618      	mov	r0, r3
 8007680:	f000 fe52 	bl	8008328 <_ZNKSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>
 8007684:	4602      	mov	r2, r0
 8007686:	f107 030c 	add.w	r3, r7, #12
 800768a:	4611      	mov	r1, r2
 800768c:	4618      	mov	r0, r3
 800768e:	f000 fe3d 	bl	800830c <_ZN9__gnu_cxx14__alloc_traitsISaIfEfE17_S_select_on_copyERKS1_>
 8007692:	f107 030c 	add.w	r3, r7, #12
 8007696:	461a      	mov	r2, r3
 8007698:	4629      	mov	r1, r5
 800769a:	4620      	mov	r0, r4
 800769c:	f000 fe4f 	bl	800833e <_ZNSt12_Vector_baseIfSaIfEEC1EjRKS0_>
 80076a0:	f107 030c 	add.w	r3, r7, #12
 80076a4:	4618      	mov	r0, r3
 80076a6:	f7ff ff0c 	bl	80074c2 <_ZNSaIfED1Ev>
	  std::__uninitialized_copy_a(__x.begin(), __x.end(),
 80076aa:	6838      	ldr	r0, [r7, #0]
 80076ac:	f000 fe5b 	bl	8008366 <_ZNKSt6vectorIfSaIfEE5beginEv>
 80076b0:	4605      	mov	r5, r0
 80076b2:	6838      	ldr	r0, [r7, #0]
 80076b4:	f000 fe67 	bl	8008386 <_ZNKSt6vectorIfSaIfEE3endEv>
 80076b8:	4606      	mov	r6, r0
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	681c      	ldr	r4, [r3, #0]
				      _M_get_Tp_allocator());
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	4618      	mov	r0, r3
 80076c2:	f000 fd6c 	bl	800819e <_ZNSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>
 80076c6:	4603      	mov	r3, r0
	  std::__uninitialized_copy_a(__x.begin(), __x.end(),
 80076c8:	4622      	mov	r2, r4
 80076ca:	4631      	mov	r1, r6
 80076cc:	4628      	mov	r0, r5
 80076ce:	f000 fe6b 	bl	80083a8 <_ZSt22__uninitialized_copy_aIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEEPffET0_T_SA_S9_RSaIT1_E>
 80076d2:	4602      	mov	r2, r0
	this->_M_impl._M_finish =
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	605a      	str	r2, [r3, #4]
      }
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	4618      	mov	r0, r3
 80076dc:	3714      	adds	r7, #20
 80076de:	46bd      	mov	sp, r7
 80076e0:	bdf0      	pop	{r4, r5, r6, r7, pc}

080076e2 <_ZN9__gnu_cxx14__alloc_traitsISaIfEfE27_S_propagate_on_copy_assignEv>:
    { return _Base_type::select_on_container_copy_construction(__a); }

    static _GLIBCXX14_CONSTEXPR void _S_on_swap(_Alloc& __a, _Alloc& __b)
    { std::__alloc_on_swap(__a, __b); }

    static constexpr bool _S_propagate_on_copy_assign()
 80076e2:	b480      	push	{r7}
 80076e4:	af00      	add	r7, sp, #0
    { return _Base_type::propagate_on_container_copy_assignment::value; }
 80076e6:	2300      	movs	r3, #0
 80076e8:	4618      	mov	r0, r3
 80076ea:	46bd      	mov	sp, r7
 80076ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076f0:	4770      	bx	lr

080076f2 <_ZN9__gnu_cxx14__alloc_traitsISaIfEfE15_S_always_equalEv>:
    { return _Base_type::propagate_on_container_move_assignment::value; }

    static constexpr bool _S_propagate_on_swap()
    { return _Base_type::propagate_on_container_swap::value; }

    static constexpr bool _S_always_equal()
 80076f2:	b480      	push	{r7}
 80076f4:	af00      	add	r7, sp, #0
    { return _Base_type::is_always_equal::value; }
 80076f6:	2301      	movs	r3, #1
 80076f8:	4618      	mov	r0, r3
 80076fa:	46bd      	mov	sp, r7
 80076fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007700:	4770      	bx	lr

08007702 <_ZSteqRKSaIfES1_>:
	__allocator_base<_Tp>::deallocate(__p, __n);
      }
#endif // C++20

      friend _GLIBCXX20_CONSTEXPR bool
      operator==(const allocator&, const allocator&) _GLIBCXX_NOTHROW
 8007702:	b480      	push	{r7}
 8007704:	b083      	sub	sp, #12
 8007706:	af00      	add	r7, sp, #0
 8007708:	6078      	str	r0, [r7, #4]
 800770a:	6039      	str	r1, [r7, #0]
      { return true; }
 800770c:	2301      	movs	r3, #1
 800770e:	4618      	mov	r0, r3
 8007710:	370c      	adds	r7, #12
 8007712:	46bd      	mov	sp, r7
 8007714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007718:	4770      	bx	lr

0800771a <_ZSt4copyIPfS0_ET0_T_S2_S1_>:
    copy(_II __first, _II __last, _OI __result)
 800771a:	b590      	push	{r4, r7, lr}
 800771c:	b085      	sub	sp, #20
 800771e:	af00      	add	r7, sp, #0
 8007720:	60f8      	str	r0, [r7, #12]
 8007722:	60b9      	str	r1, [r7, #8]
 8007724:	607a      	str	r2, [r7, #4]
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 8007726:	68f8      	ldr	r0, [r7, #12]
 8007728:	f000 feba 	bl	80084a0 <_ZSt12__miter_baseIPfET_S1_>
 800772c:	4604      	mov	r4, r0
 800772e:	68b8      	ldr	r0, [r7, #8]
 8007730:	f000 feb6 	bl	80084a0 <_ZSt12__miter_baseIPfET_S1_>
 8007734:	4603      	mov	r3, r0
 8007736:	687a      	ldr	r2, [r7, #4]
 8007738:	4619      	mov	r1, r3
 800773a:	4620      	mov	r0, r4
 800773c:	f000 febb 	bl	80084b6 <_ZSt13__copy_move_aILb0EPfS0_ET1_T0_S2_S1_>
 8007740:	4603      	mov	r3, r0
    }
 8007742:	4618      	mov	r0, r3
 8007744:	3714      	adds	r7, #20
 8007746:	46bd      	mov	sp, r7
 8007748:	bd90      	pop	{r4, r7, pc}

0800774a <_ZNSt6vectorIfSaIfEEaSERKS1_>:
      return __first;
    }

  template<typename _Tp, typename _Alloc>
    vector<_Tp, _Alloc>&
    vector<_Tp, _Alloc>::
 800774a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800774c:	b085      	sub	sp, #20
 800774e:	af00      	add	r7, sp, #0
 8007750:	6078      	str	r0, [r7, #4]
 8007752:	6039      	str	r1, [r7, #0]
    operator=(const vector<_Tp, _Alloc>& __x)
    {
      if (&__x != this)
 8007754:	683a      	ldr	r2, [r7, #0]
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	429a      	cmp	r2, r3
 800775a:	f000 80e9 	beq.w	8007930 <_ZNSt6vectorIfSaIfEEaSERKS1_+0x1e6>
	{
	  _GLIBCXX_ASAN_ANNOTATE_REINIT;
#if __cplusplus >= 201103L
	  if (_Alloc_traits::_S_propagate_on_copy_assign())
 800775e:	f7ff ffc0 	bl	80076e2 <_ZN9__gnu_cxx14__alloc_traitsISaIfEfE27_S_propagate_on_copy_assignEv>
 8007762:	4603      	mov	r3, r0
 8007764:	2b00      	cmp	r3, #0
 8007766:	d046      	beq.n	80077f6 <_ZNSt6vectorIfSaIfEEaSERKS1_+0xac>
	    {
	      if (!_Alloc_traits::_S_always_equal()
 8007768:	f7ff ffc3 	bl	80076f2 <_ZN9__gnu_cxx14__alloc_traitsISaIfEfE15_S_always_equalEv>
 800776c:	4603      	mov	r3, r0
 800776e:	f083 0301 	eor.w	r3, r3, #1
 8007772:	b2db      	uxtb	r3, r3
	          && _M_get_Tp_allocator() != __x._M_get_Tp_allocator())
 8007774:	2b00      	cmp	r3, #0
 8007776:	d015      	beq.n	80077a4 <_ZNSt6vectorIfSaIfEEaSERKS1_+0x5a>
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	4618      	mov	r0, r3
 800777c:	f000 fd0f 	bl	800819e <_ZNSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>
 8007780:	4604      	mov	r4, r0
 8007782:	683b      	ldr	r3, [r7, #0]
 8007784:	4618      	mov	r0, r3
 8007786:	f000 fdcf 	bl	8008328 <_ZNKSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>
 800778a:	4603      	mov	r3, r0
 800778c:	4619      	mov	r1, r3
 800778e:	4620      	mov	r0, r4
 8007790:	f7ff ffb7 	bl	8007702 <_ZSteqRKSaIfES1_>
 8007794:	4603      	mov	r3, r0
 8007796:	f083 0301 	eor.w	r3, r3, #1
 800779a:	b2db      	uxtb	r3, r3
 800779c:	2b00      	cmp	r3, #0
 800779e:	d001      	beq.n	80077a4 <_ZNSt6vectorIfSaIfEEaSERKS1_+0x5a>
 80077a0:	2301      	movs	r3, #1
 80077a2:	e000      	b.n	80077a6 <_ZNSt6vectorIfSaIfEEaSERKS1_+0x5c>
 80077a4:	2300      	movs	r3, #0
	      if (!_Alloc_traits::_S_always_equal()
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	d017      	beq.n	80077da <_ZNSt6vectorIfSaIfEEaSERKS1_+0x90>
	        {
		  // replacement allocator cannot free existing storage
		  this->clear();
 80077aa:	6878      	ldr	r0, [r7, #4]
 80077ac:	f000 fe0d 	bl	80083ca <_ZNSt6vectorIfSaIfEE5clearEv>
		  _M_deallocate(this->_M_impl._M_start,
 80077b0:	6878      	ldr	r0, [r7, #4]
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	6819      	ldr	r1, [r3, #0]
				this->_M_impl._M_end_of_storage
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	689a      	ldr	r2, [r3, #8]
				- this->_M_impl._M_start);
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	1ad3      	subs	r3, r2, r3
 80077c0:	109b      	asrs	r3, r3, #2
		  _M_deallocate(this->_M_impl._M_start,
 80077c2:	461a      	mov	r2, r3
 80077c4:	f000 fcd8 	bl	8008178 <_ZNSt12_Vector_baseIfSaIfEE13_M_deallocateEPfj>
		  this->_M_impl._M_start = nullptr;
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	2200      	movs	r2, #0
 80077cc:	601a      	str	r2, [r3, #0]
		  this->_M_impl._M_finish = nullptr;
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	2200      	movs	r2, #0
 80077d2:	605a      	str	r2, [r3, #4]
		  this->_M_impl._M_end_of_storage = nullptr;
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	2200      	movs	r2, #0
 80077d8:	609a      	str	r2, [r3, #8]
		}
	      std::__alloc_on_copy(_M_get_Tp_allocator(),
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	4618      	mov	r0, r3
 80077de:	f000 fcde 	bl	800819e <_ZNSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>
 80077e2:	4604      	mov	r4, r0
				   __x._M_get_Tp_allocator());
 80077e4:	683b      	ldr	r3, [r7, #0]
 80077e6:	4618      	mov	r0, r3
 80077e8:	f000 fd9e 	bl	8008328 <_ZNKSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>
 80077ec:	4603      	mov	r3, r0
	      std::__alloc_on_copy(_M_get_Tp_allocator(),
 80077ee:	4619      	mov	r1, r3
 80077f0:	4620      	mov	r0, r4
 80077f2:	f000 fdf8 	bl	80083e6 <_ZSt15__alloc_on_copyISaIfEEvRT_RKS1_>
	    }
#endif
	  const size_type __xlen = __x.size();
 80077f6:	6838      	ldr	r0, [r7, #0]
 80077f8:	f7ff fed3 	bl	80075a2 <_ZNKSt6vectorIfSaIfEE4sizeEv>
 80077fc:	60f8      	str	r0, [r7, #12]
	  if (__xlen > capacity())
 80077fe:	6878      	ldr	r0, [r7, #4]
 8007800:	f000 fdfc 	bl	80083fc <_ZNKSt6vectorIfSaIfEE8capacityEv>
 8007804:	4602      	mov	r2, r0
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	4293      	cmp	r3, r2
 800780a:	bf8c      	ite	hi
 800780c:	2301      	movhi	r3, #1
 800780e:	2300      	movls	r3, #0
 8007810:	b2db      	uxtb	r3, r3
 8007812:	2b00      	cmp	r3, #0
 8007814:	d032      	beq.n	800787c <_ZNSt6vectorIfSaIfEEaSERKS1_+0x132>
	    {
	      pointer __tmp = _M_allocate_and_copy(__xlen, __x.begin(),
 8007816:	6838      	ldr	r0, [r7, #0]
 8007818:	f000 fda5 	bl	8008366 <_ZNKSt6vectorIfSaIfEE5beginEv>
 800781c:	4604      	mov	r4, r0
 800781e:	6838      	ldr	r0, [r7, #0]
 8007820:	f000 fdb1 	bl	8008386 <_ZNKSt6vectorIfSaIfEE3endEv>
 8007824:	4603      	mov	r3, r0
 8007826:	4622      	mov	r2, r4
 8007828:	68f9      	ldr	r1, [r7, #12]
 800782a:	6878      	ldr	r0, [r7, #4]
 800782c:	f000 fdf6 	bl	800841c <_ZNSt6vectorIfSaIfEE20_M_allocate_and_copyIN9__gnu_cxx17__normal_iteratorIPKfS1_EEEEPfjT_S9_>
 8007830:	60b8      	str	r0, [r7, #8]
						   __x.end());
	      std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	681c      	ldr	r4, [r3, #0]
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	685d      	ldr	r5, [r3, #4]
			    _M_get_Tp_allocator());
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	4618      	mov	r0, r3
 800783e:	f000 fcae 	bl	800819e <_ZNSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>
 8007842:	4603      	mov	r3, r0
	      std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8007844:	461a      	mov	r2, r3
 8007846:	4629      	mov	r1, r5
 8007848:	4620      	mov	r0, r4
 800784a:	f000 fcb3 	bl	80081b4 <_ZSt8_DestroyIPffEvT_S1_RSaIT0_E>
	      _M_deallocate(this->_M_impl._M_start,
 800784e:	6878      	ldr	r0, [r7, #4]
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	6819      	ldr	r1, [r3, #0]
			    this->_M_impl._M_end_of_storage
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	689a      	ldr	r2, [r3, #8]
			    - this->_M_impl._M_start);
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	1ad3      	subs	r3, r2, r3
 800785e:	109b      	asrs	r3, r3, #2
	      _M_deallocate(this->_M_impl._M_start,
 8007860:	461a      	mov	r2, r3
 8007862:	f000 fc89 	bl	8008178 <_ZNSt12_Vector_baseIfSaIfEE13_M_deallocateEPfj>
	      this->_M_impl._M_start = __tmp;
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	68ba      	ldr	r2, [r7, #8]
 800786a:	601a      	str	r2, [r3, #0]
	      this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __xlen;
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	681a      	ldr	r2, [r3, #0]
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	009b      	lsls	r3, r3, #2
 8007874:	441a      	add	r2, r3
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	609a      	str	r2, [r3, #8]
 800787a:	e052      	b.n	8007922 <_ZNSt6vectorIfSaIfEEaSERKS1_+0x1d8>
	    }
	  else if (size() >= __xlen)
 800787c:	6878      	ldr	r0, [r7, #4]
 800787e:	f7ff fe90 	bl	80075a2 <_ZNKSt6vectorIfSaIfEE4sizeEv>
 8007882:	4602      	mov	r2, r0
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	4293      	cmp	r3, r2
 8007888:	bf94      	ite	ls
 800788a:	2301      	movls	r3, #1
 800788c:	2300      	movhi	r3, #0
 800788e:	b2db      	uxtb	r3, r3
 8007890:	2b00      	cmp	r3, #0
 8007892:	d020      	beq.n	80078d6 <_ZNSt6vectorIfSaIfEEaSERKS1_+0x18c>
	    {
	      std::_Destroy(std::copy(__x.begin(), __x.end(), begin()),
 8007894:	6838      	ldr	r0, [r7, #0]
 8007896:	f000 fd66 	bl	8008366 <_ZNKSt6vectorIfSaIfEE5beginEv>
 800789a:	4604      	mov	r4, r0
 800789c:	6838      	ldr	r0, [r7, #0]
 800789e:	f000 fd72 	bl	8008386 <_ZNKSt6vectorIfSaIfEE3endEv>
 80078a2:	4605      	mov	r5, r0
 80078a4:	6878      	ldr	r0, [r7, #4]
 80078a6:	f7ff fe4b 	bl	8007540 <_ZNSt6vectorIfSaIfEE5beginEv>
 80078aa:	4603      	mov	r3, r0
 80078ac:	461a      	mov	r2, r3
 80078ae:	4629      	mov	r1, r5
 80078b0:	4620      	mov	r0, r4
 80078b2:	f000 fdcf 	bl	8008454 <_ZSt4copyIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEENS1_IPfS6_EEET0_T_SB_SA_>
 80078b6:	4604      	mov	r4, r0
 80078b8:	6878      	ldr	r0, [r7, #4]
 80078ba:	f7ff fe51 	bl	8007560 <_ZNSt6vectorIfSaIfEE3endEv>
 80078be:	4605      	mov	r5, r0
			    end(), _M_get_Tp_allocator());
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	4618      	mov	r0, r3
 80078c4:	f000 fc6b 	bl	800819e <_ZNSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>
 80078c8:	4603      	mov	r3, r0
	      std::_Destroy(std::copy(__x.begin(), __x.end(), begin()),
 80078ca:	461a      	mov	r2, r3
 80078cc:	4629      	mov	r1, r5
 80078ce:	4620      	mov	r0, r4
 80078d0:	f000 fdd8 	bl	8008484 <_ZSt8_DestroyIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEfEvT_S7_RSaIT0_E>
 80078d4:	e025      	b.n	8007922 <_ZNSt6vectorIfSaIfEEaSERKS1_+0x1d8>
	    }
	  else
	    {
	      std::copy(__x._M_impl._M_start, __x._M_impl._M_start + size(),
 80078d6:	683b      	ldr	r3, [r7, #0]
 80078d8:	681d      	ldr	r5, [r3, #0]
 80078da:	683b      	ldr	r3, [r7, #0]
 80078dc:	681c      	ldr	r4, [r3, #0]
 80078de:	6878      	ldr	r0, [r7, #4]
 80078e0:	f7ff fe5f 	bl	80075a2 <_ZNKSt6vectorIfSaIfEE4sizeEv>
 80078e4:	4603      	mov	r3, r0
 80078e6:	009b      	lsls	r3, r3, #2
 80078e8:	18e1      	adds	r1, r4, r3
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	461a      	mov	r2, r3
 80078f0:	4628      	mov	r0, r5
 80078f2:	f7ff ff12 	bl	800771a <_ZSt4copyIPfS0_ET0_T_S2_S1_>
			this->_M_impl._M_start);
	      std::__uninitialized_copy_a(__x._M_impl._M_start + size(),
 80078f6:	683b      	ldr	r3, [r7, #0]
 80078f8:	681c      	ldr	r4, [r3, #0]
 80078fa:	6878      	ldr	r0, [r7, #4]
 80078fc:	f7ff fe51 	bl	80075a2 <_ZNKSt6vectorIfSaIfEE4sizeEv>
 8007900:	4603      	mov	r3, r0
 8007902:	009b      	lsls	r3, r3, #2
 8007904:	441c      	add	r4, r3
					  __x._M_impl._M_finish,
 8007906:	683b      	ldr	r3, [r7, #0]
 8007908:	685d      	ldr	r5, [r3, #4]
	      std::__uninitialized_copy_a(__x._M_impl._M_start + size(),
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	685e      	ldr	r6, [r3, #4]
					  this->_M_impl._M_finish,
					  _M_get_Tp_allocator());
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	4618      	mov	r0, r3
 8007912:	f000 fc44 	bl	800819e <_ZNSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>
 8007916:	4603      	mov	r3, r0
	      std::__uninitialized_copy_a(__x._M_impl._M_start + size(),
 8007918:	4632      	mov	r2, r6
 800791a:	4629      	mov	r1, r5
 800791c:	4620      	mov	r0, r4
 800791e:	f000 fded 	bl	80084fc <_ZSt22__uninitialized_copy_aIPfS0_fET0_T_S2_S1_RSaIT1_E>
	    }
	  this->_M_impl._M_finish = this->_M_impl._M_start + __xlen;
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	681a      	ldr	r2, [r3, #0]
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	009b      	lsls	r3, r3, #2
 800792a:	441a      	add	r2, r3
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	605a      	str	r2, [r3, #4]
	}
      return *this;
 8007930:	687b      	ldr	r3, [r7, #4]
    }
 8007932:	4618      	mov	r0, r3
 8007934:	3714      	adds	r7, #20
 8007936:	46bd      	mov	sp, r7
 8007938:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800793a <_ZNSt12_Vector_baseIN3jlb4EdgeESaIS1_EE12_Vector_implC1Ev>:
	_Vector_impl() _GLIBCXX_NOEXCEPT_IF(
 800793a:	b580      	push	{r7, lr}
 800793c:	b082      	sub	sp, #8
 800793e:	af00      	add	r7, sp, #0
 8007940:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 8007942:	6878      	ldr	r0, [r7, #4]
 8007944:	f000 fdeb 	bl	800851e <_ZNSaIN3jlb4EdgeEEC1Ev>
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	4618      	mov	r0, r3
 800794c:	f000 fdf3 	bl	8008536 <_ZNSt12_Vector_baseIN3jlb4EdgeESaIS1_EE17_Vector_impl_dataC1Ev>
	{ }
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	4618      	mov	r0, r3
 8007954:	3708      	adds	r7, #8
 8007956:	46bd      	mov	sp, r7
 8007958:	bd80      	pop	{r7, pc}

0800795a <_ZNSaIN3jlb4EdgeEED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 800795a:	b480      	push	{r7}
 800795c:	b083      	sub	sp, #12
 800795e:	af00      	add	r7, sp, #0
 8007960:	6078      	str	r0, [r7, #4]
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	4618      	mov	r0, r3
 8007966:	370c      	adds	r7, #12
 8007968:	46bd      	mov	sp, r7
 800796a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800796e:	4770      	bx	lr

08007970 <_ZNSt12_Vector_baseIN3jlb4EdgeESaIS1_EED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 8007970:	b580      	push	{r7, lr}
 8007972:	b082      	sub	sp, #8
 8007974:	af00      	add	r7, sp, #0
 8007976:	6078      	str	r0, [r7, #4]
	_M_deallocate(_M_impl._M_start,
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	6819      	ldr	r1, [r3, #0]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	689a      	ldr	r2, [r3, #8]
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	1ad3      	subs	r3, r2, r3
 8007986:	10db      	asrs	r3, r3, #3
 8007988:	4a07      	ldr	r2, [pc, #28]	; (80079a8 <_ZNSt12_Vector_baseIN3jlb4EdgeESaIS1_EED1Ev+0x38>)
 800798a:	fb02 f303 	mul.w	r3, r2, r3
	_M_deallocate(_M_impl._M_start,
 800798e:	461a      	mov	r2, r3
 8007990:	6878      	ldr	r0, [r7, #4]
 8007992:	f000 fde4 	bl	800855e <_ZNSt12_Vector_baseIN3jlb4EdgeESaIS1_EE13_M_deallocateEPS1_j>
      }
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	4618      	mov	r0, r3
 800799a:	f7fb fde4 	bl	8003566 <_ZNSt12_Vector_baseIN3jlb4EdgeESaIS1_EE12_Vector_implD1Ev>
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	4618      	mov	r0, r3
 80079a2:	3708      	adds	r7, #8
 80079a4:	46bd      	mov	sp, r7
 80079a6:	bd80      	pop	{r7, pc}
 80079a8:	aaaaaaab 	.word	0xaaaaaaab

080079ac <_ZNSt6vectorIN3jlb4EdgeESaIS1_EED1Ev>:
      ~vector() _GLIBCXX_NOEXCEPT
 80079ac:	b5b0      	push	{r4, r5, r7, lr}
 80079ae:	b082      	sub	sp, #8
 80079b0:	af00      	add	r7, sp, #0
 80079b2:	6078      	str	r0, [r7, #4]
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	681c      	ldr	r4, [r3, #0]
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator());
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	4618      	mov	r0, r3
 80079c0:	f000 fde0 	bl	8008584 <_ZNSt12_Vector_baseIN3jlb4EdgeESaIS1_EE19_M_get_Tp_allocatorEv>
 80079c4:	4603      	mov	r3, r0
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 80079c6:	461a      	mov	r2, r3
 80079c8:	4629      	mov	r1, r5
 80079ca:	4620      	mov	r0, r4
 80079cc:	f000 fde5 	bl	800859a <_ZSt8_DestroyIPN3jlb4EdgeES1_EvT_S3_RSaIT0_E>
      }
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	4618      	mov	r0, r3
 80079d4:	f7ff ffcc 	bl	8007970 <_ZNSt12_Vector_baseIN3jlb4EdgeESaIS1_EED1Ev>
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	4618      	mov	r0, r3
 80079dc:	3708      	adds	r7, #8
 80079de:	46bd      	mov	sp, r7
 80079e0:	bdb0      	pop	{r4, r5, r7, pc}

080079e2 <_ZNSt6vectorIcSaIcEEC1ERKS1_>:
      vector(const vector& __x)
 80079e2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80079e4:	b085      	sub	sp, #20
 80079e6:	af00      	add	r7, sp, #0
 80079e8:	6078      	str	r0, [r7, #4]
 80079ea:	6039      	str	r1, [r7, #0]
	_Alloc_traits::_S_select_on_copy(__x._M_get_Tp_allocator()))
 80079ec:	687c      	ldr	r4, [r7, #4]
 80079ee:	6838      	ldr	r0, [r7, #0]
 80079f0:	f000 f8f5 	bl	8007bde <_ZNKSt6vectorIcSaIcEE4sizeEv>
 80079f4:	4605      	mov	r5, r0
 80079f6:	683b      	ldr	r3, [r7, #0]
 80079f8:	4618      	mov	r0, r3
 80079fa:	f000 fdea 	bl	80085d2 <_ZNKSt12_Vector_baseIcSaIcEE19_M_get_Tp_allocatorEv>
 80079fe:	4602      	mov	r2, r0
 8007a00:	f107 030c 	add.w	r3, r7, #12
 8007a04:	4611      	mov	r1, r2
 8007a06:	4618      	mov	r0, r3
 8007a08:	f000 fdd5 	bl	80085b6 <_ZN9__gnu_cxx14__alloc_traitsISaIcEcE17_S_select_on_copyERKS1_>
 8007a0c:	f107 030c 	add.w	r3, r7, #12
 8007a10:	461a      	mov	r2, r3
 8007a12:	4629      	mov	r1, r5
 8007a14:	4620      	mov	r0, r4
 8007a16:	f000 fde7 	bl	80085e8 <_ZNSt12_Vector_baseIcSaIcEEC1EjRKS0_>
 8007a1a:	f107 030c 	add.w	r3, r7, #12
 8007a1e:	4618      	mov	r0, r3
 8007a20:	f013 fe8b 	bl	801b73a <_ZNSaIcED1Ev>
	  std::__uninitialized_copy_a(__x.begin(), __x.end(),
 8007a24:	6838      	ldr	r0, [r7, #0]
 8007a26:	f000 fdf3 	bl	8008610 <_ZNKSt6vectorIcSaIcEE5beginEv>
 8007a2a:	4605      	mov	r5, r0
 8007a2c:	6838      	ldr	r0, [r7, #0]
 8007a2e:	f000 fdff 	bl	8008630 <_ZNKSt6vectorIcSaIcEE3endEv>
 8007a32:	4606      	mov	r6, r0
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	681c      	ldr	r4, [r3, #0]
				      _M_get_Tp_allocator());
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	4618      	mov	r0, r3
 8007a3c:	f000 fe09 	bl	8008652 <_ZNSt12_Vector_baseIcSaIcEE19_M_get_Tp_allocatorEv>
 8007a40:	4603      	mov	r3, r0
	  std::__uninitialized_copy_a(__x.begin(), __x.end(),
 8007a42:	4622      	mov	r2, r4
 8007a44:	4631      	mov	r1, r6
 8007a46:	4628      	mov	r0, r5
 8007a48:	f000 fe0e 	bl	8008668 <_ZSt22__uninitialized_copy_aIN9__gnu_cxx17__normal_iteratorIPKcSt6vectorIcSaIcEEEEPccET0_T_SA_S9_RSaIT1_E>
 8007a4c:	4602      	mov	r2, r0
	this->_M_impl._M_finish =
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	605a      	str	r2, [r3, #4]
      }
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	4618      	mov	r0, r3
 8007a56:	3714      	adds	r7, #20
 8007a58:	46bd      	mov	sp, r7
 8007a5a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007a5c <_ZNSt6vectorIcSaIcEED1Ev>:
      ~vector() _GLIBCXX_NOEXCEPT
 8007a5c:	b5b0      	push	{r4, r5, r7, lr}
 8007a5e:	b082      	sub	sp, #8
 8007a60:	af00      	add	r7, sp, #0
 8007a62:	6078      	str	r0, [r7, #4]
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	681c      	ldr	r4, [r3, #0]
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator());
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	4618      	mov	r0, r3
 8007a70:	f000 fdef 	bl	8008652 <_ZNSt12_Vector_baseIcSaIcEE19_M_get_Tp_allocatorEv>
 8007a74:	4603      	mov	r3, r0
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8007a76:	461a      	mov	r2, r3
 8007a78:	4629      	mov	r1, r5
 8007a7a:	4620      	mov	r0, r4
 8007a7c:	f000 fe05 	bl	800868a <_ZSt8_DestroyIPccEvT_S1_RSaIT0_E>
      }
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	4618      	mov	r0, r3
 8007a84:	f000 f893 	bl	8007bae <_ZNSt12_Vector_baseIcSaIcEED1Ev>
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	4618      	mov	r0, r3
 8007a8c:	3708      	adds	r7, #8
 8007a8e:	46bd      	mov	sp, r7
 8007a90:	bdb0      	pop	{r4, r5, r7, pc}

08007a92 <_ZNSt6vectorIN3jlb4EdgeESaIS1_EE9push_backEOS1_>:
	  _M_realloc_insert(end(), __x);
      }

#if __cplusplus >= 201103L
      void
      push_back(value_type&& __x)
 8007a92:	b580      	push	{r7, lr}
 8007a94:	b082      	sub	sp, #8
 8007a96:	af00      	add	r7, sp, #0
 8007a98:	6078      	str	r0, [r7, #4]
 8007a9a:	6039      	str	r1, [r7, #0]
      { emplace_back(std::move(__x)); }
 8007a9c:	6838      	ldr	r0, [r7, #0]
 8007a9e:	f000 fe02 	bl	80086a6 <_ZSt4moveIRN3jlb4EdgeEEONSt16remove_referenceIT_E4typeEOS4_>
 8007aa2:	4603      	mov	r3, r0
 8007aa4:	4619      	mov	r1, r3
 8007aa6:	6878      	ldr	r0, [r7, #4]
 8007aa8:	f000 fe08 	bl	80086bc <_ZNSt6vectorIN3jlb4EdgeESaIS1_EE12emplace_backIJS1_EEERS1_DpOT_>
 8007aac:	bf00      	nop
 8007aae:	3708      	adds	r7, #8
 8007ab0:	46bd      	mov	sp, r7
 8007ab2:	bd80      	pop	{r7, pc}

08007ab4 <_ZNSt12_Vector_baseIN3jlb4NodeESaIS1_EE12_Vector_implC1Ev>:
	_Vector_impl() _GLIBCXX_NOEXCEPT_IF(
 8007ab4:	b580      	push	{r7, lr}
 8007ab6:	b082      	sub	sp, #8
 8007ab8:	af00      	add	r7, sp, #0
 8007aba:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 8007abc:	6878      	ldr	r0, [r7, #4]
 8007abe:	f000 fe30 	bl	8008722 <_ZNSaIN3jlb4NodeEEC1Ev>
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	4618      	mov	r0, r3
 8007ac6:	f000 fe38 	bl	800873a <_ZNSt12_Vector_baseIN3jlb4NodeESaIS1_EE17_Vector_impl_dataC1Ev>
	{ }
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	4618      	mov	r0, r3
 8007ace:	3708      	adds	r7, #8
 8007ad0:	46bd      	mov	sp, r7
 8007ad2:	bd80      	pop	{r7, pc}

08007ad4 <_ZNSt6vectorIN3jlb4NodeESaIS1_EE9push_backEOS1_>:
      push_back(value_type&& __x)
 8007ad4:	b580      	push	{r7, lr}
 8007ad6:	b082      	sub	sp, #8
 8007ad8:	af00      	add	r7, sp, #0
 8007ada:	6078      	str	r0, [r7, #4]
 8007adc:	6039      	str	r1, [r7, #0]
      { emplace_back(std::move(__x)); }
 8007ade:	6838      	ldr	r0, [r7, #0]
 8007ae0:	f000 fe6b 	bl	80087ba <_ZSt4moveIRN3jlb4NodeEEONSt16remove_referenceIT_E4typeEOS4_>
 8007ae4:	4603      	mov	r3, r0
 8007ae6:	4619      	mov	r1, r3
 8007ae8:	6878      	ldr	r0, [r7, #4]
 8007aea:	f000 fe71 	bl	80087d0 <_ZNSt6vectorIN3jlb4NodeESaIS1_EE12emplace_backIJS1_EEERS1_DpOT_>
 8007aee:	bf00      	nop
 8007af0:	3708      	adds	r7, #8
 8007af2:	46bd      	mov	sp, r7
 8007af4:	bd80      	pop	{r7, pc}

08007af6 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>:
      vector(initializer_list<value_type> __l,
 8007af6:	b5b0      	push	{r4, r5, r7, lr}
 8007af8:	b086      	sub	sp, #24
 8007afa:	af00      	add	r7, sp, #0
 8007afc:	60f8      	str	r0, [r7, #12]
 8007afe:	1d38      	adds	r0, r7, #4
 8007b00:	e880 0006 	stmia.w	r0, {r1, r2}
 8007b04:	603b      	str	r3, [r7, #0]
      : _Base(__a)
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	6839      	ldr	r1, [r7, #0]
 8007b0a:	4618      	mov	r0, r3
 8007b0c:	f000 fe93 	bl	8008836 <_ZNSt12_Vector_baseIcSaIcEEC1ERKS0_>
	_M_range_initialize(__l.begin(), __l.end(),
 8007b10:	1d3b      	adds	r3, r7, #4
 8007b12:	4618      	mov	r0, r3
 8007b14:	f000 fe9e 	bl	8008854 <_ZNKSt16initializer_listIcE5beginEv>
 8007b18:	4604      	mov	r4, r0
 8007b1a:	1d3b      	adds	r3, r7, #4
 8007b1c:	4618      	mov	r0, r3
 8007b1e:	f000 fea5 	bl	800886c <_ZNKSt16initializer_listIcE3endEv>
 8007b22:	4602      	mov	r2, r0
 8007b24:	462b      	mov	r3, r5
 8007b26:	4621      	mov	r1, r4
 8007b28:	68f8      	ldr	r0, [r7, #12]
 8007b2a:	f000 fec4 	bl	80088b6 <_ZNSt6vectorIcSaIcEE19_M_range_initializeIPKcEEvT_S5_St20forward_iterator_tag>
      }
 8007b2e:	68fb      	ldr	r3, [r7, #12]
 8007b30:	4618      	mov	r0, r3
 8007b32:	3718      	adds	r7, #24
 8007b34:	46bd      	mov	sp, r7
 8007b36:	bdb0      	pop	{r4, r5, r7, pc}

08007b38 <_ZNSt6vectorIN3jlb4NodeESaIS1_EEixEj>:
      operator[](size_type __n) _GLIBCXX_NOEXCEPT
 8007b38:	b480      	push	{r7}
 8007b3a:	b083      	sub	sp, #12
 8007b3c:	af00      	add	r7, sp, #0
 8007b3e:	6078      	str	r0, [r7, #4]
 8007b40:	6039      	str	r1, [r7, #0]
	return *(this->_M_impl._M_start + __n);
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	6819      	ldr	r1, [r3, #0]
 8007b46:	683a      	ldr	r2, [r7, #0]
 8007b48:	4613      	mov	r3, r2
 8007b4a:	005b      	lsls	r3, r3, #1
 8007b4c:	4413      	add	r3, r2
 8007b4e:	00db      	lsls	r3, r3, #3
 8007b50:	440b      	add	r3, r1
      }
 8007b52:	4618      	mov	r0, r3
 8007b54:	370c      	adds	r7, #12
 8007b56:	46bd      	mov	sp, r7
 8007b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b5c:	4770      	bx	lr

08007b5e <_ZSt4copyIPKcPcET0_T_S4_S3_>:
    copy(_II __first, _II __last, _OI __result)
 8007b5e:	b590      	push	{r4, r7, lr}
 8007b60:	b085      	sub	sp, #20
 8007b62:	af00      	add	r7, sp, #0
 8007b64:	60f8      	str	r0, [r7, #12]
 8007b66:	60b9      	str	r1, [r7, #8]
 8007b68:	607a      	str	r2, [r7, #4]
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 8007b6a:	68f8      	ldr	r0, [r7, #12]
 8007b6c:	f000 fedb 	bl	8008926 <_ZSt12__miter_baseIPKcET_S2_>
 8007b70:	4604      	mov	r4, r0
 8007b72:	68b8      	ldr	r0, [r7, #8]
 8007b74:	f000 fed7 	bl	8008926 <_ZSt12__miter_baseIPKcET_S2_>
 8007b78:	4603      	mov	r3, r0
 8007b7a:	687a      	ldr	r2, [r7, #4]
 8007b7c:	4619      	mov	r1, r3
 8007b7e:	4620      	mov	r0, r4
 8007b80:	f000 fedc 	bl	800893c <_ZSt13__copy_move_aILb0EPKcPcET1_T0_S4_S3_>
 8007b84:	4603      	mov	r3, r0
    }
 8007b86:	4618      	mov	r0, r3
 8007b88:	3714      	adds	r7, #20
 8007b8a:	46bd      	mov	sp, r7
 8007b8c:	bd90      	pop	{r4, r7, pc}

08007b8e <_ZNSt12_Vector_baseIcSaIcEE12_Vector_implC1Ev>:
	_Vector_impl() _GLIBCXX_NOEXCEPT_IF(
 8007b8e:	b580      	push	{r7, lr}
 8007b90:	b082      	sub	sp, #8
 8007b92:	af00      	add	r7, sp, #0
 8007b94:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 8007b96:	6878      	ldr	r0, [r7, #4]
 8007b98:	f013 fdcd 	bl	801b736 <_ZNSaIcEC1Ev>
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	4618      	mov	r0, r3
 8007ba0:	f000 feef 	bl	8008982 <_ZNSt12_Vector_baseIcSaIcEE17_Vector_impl_dataC1Ev>
	{ }
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	4618      	mov	r0, r3
 8007ba8:	3708      	adds	r7, #8
 8007baa:	46bd      	mov	sp, r7
 8007bac:	bd80      	pop	{r7, pc}

08007bae <_ZNSt12_Vector_baseIcSaIcEED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 8007bae:	b580      	push	{r7, lr}
 8007bb0:	b082      	sub	sp, #8
 8007bb2:	af00      	add	r7, sp, #0
 8007bb4:	6078      	str	r0, [r7, #4]
	_M_deallocate(_M_impl._M_start,
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	6819      	ldr	r1, [r3, #0]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	689a      	ldr	r2, [r3, #8]
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	1ad3      	subs	r3, r2, r3
	_M_deallocate(_M_impl._M_start,
 8007bc4:	461a      	mov	r2, r3
 8007bc6:	6878      	ldr	r0, [r7, #4]
 8007bc8:	f000 feef 	bl	80089aa <_ZNSt12_Vector_baseIcSaIcEE13_M_deallocateEPcj>
      }
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	4618      	mov	r0, r3
 8007bd0:	f7fe ffa6 	bl	8006b20 <_ZNSt12_Vector_baseIcSaIcEE12_Vector_implD1Ev>
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	4618      	mov	r0, r3
 8007bd8:	3708      	adds	r7, #8
 8007bda:	46bd      	mov	sp, r7
 8007bdc:	bd80      	pop	{r7, pc}

08007bde <_ZNKSt6vectorIcSaIcEE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 8007bde:	b480      	push	{r7}
 8007be0:	b083      	sub	sp, #12
 8007be2:	af00      	add	r7, sp, #0
 8007be4:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	685a      	ldr	r2, [r3, #4]
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	1ad3      	subs	r3, r2, r3
 8007bf0:	4618      	mov	r0, r3
 8007bf2:	370c      	adds	r7, #12
 8007bf4:	46bd      	mov	sp, r7
 8007bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bfa:	4770      	bx	lr

08007bfc <_ZNSt6vectorIcSaIcEE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 8007bfc:	b580      	push	{r7, lr}
 8007bfe:	b084      	sub	sp, #16
 8007c00:	af00      	add	r7, sp, #0
 8007c02:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_finish); }
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	1d1a      	adds	r2, r3, #4
 8007c08:	f107 030c 	add.w	r3, r7, #12
 8007c0c:	4611      	mov	r1, r2
 8007c0e:	4618      	mov	r0, r3
 8007c10:	f000 fede 	bl	80089d0 <_ZN9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEC1ERKS1_>
 8007c14:	68fb      	ldr	r3, [r7, #12]
 8007c16:	4618      	mov	r0, r3
 8007c18:	3710      	adds	r7, #16
 8007c1a:	46bd      	mov	sp, r7
 8007c1c:	bd80      	pop	{r7, pc}
	...

08007c20 <_ZNKSt6vectorIN3jlb4EdgeESaIS1_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 8007c20:	b480      	push	{r7}
 8007c22:	b083      	sub	sp, #12
 8007c24:	af00      	add	r7, sp, #0
 8007c26:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	685a      	ldr	r2, [r3, #4]
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	1ad3      	subs	r3, r2, r3
 8007c32:	10db      	asrs	r3, r3, #3
 8007c34:	4a04      	ldr	r2, [pc, #16]	; (8007c48 <_ZNKSt6vectorIN3jlb4EdgeESaIS1_EE4sizeEv+0x28>)
 8007c36:	fb02 f303 	mul.w	r3, r2, r3
 8007c3a:	4618      	mov	r0, r3
 8007c3c:	370c      	adds	r7, #12
 8007c3e:	46bd      	mov	sp, r7
 8007c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c44:	4770      	bx	lr
 8007c46:	bf00      	nop
 8007c48:	aaaaaaab 	.word	0xaaaaaaab

08007c4c <_ZNSt6vectorIN3jlb4EdgeESaIS1_EEixEj>:
      operator[](size_type __n) _GLIBCXX_NOEXCEPT
 8007c4c:	b480      	push	{r7}
 8007c4e:	b083      	sub	sp, #12
 8007c50:	af00      	add	r7, sp, #0
 8007c52:	6078      	str	r0, [r7, #4]
 8007c54:	6039      	str	r1, [r7, #0]
	return *(this->_M_impl._M_start + __n);
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	6819      	ldr	r1, [r3, #0]
 8007c5a:	683a      	ldr	r2, [r7, #0]
 8007c5c:	4613      	mov	r3, r2
 8007c5e:	005b      	lsls	r3, r3, #1
 8007c60:	4413      	add	r3, r2
 8007c62:	00db      	lsls	r3, r3, #3
 8007c64:	440b      	add	r3, r1
      }
 8007c66:	4618      	mov	r0, r3
 8007c68:	370c      	adds	r7, #12
 8007c6a:	46bd      	mov	sp, r7
 8007c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c70:	4770      	bx	lr

08007c72 <_ZNSt6vectorIcSaIcEE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 8007c72:	b580      	push	{r7, lr}
 8007c74:	b084      	sub	sp, #16
 8007c76:	af00      	add	r7, sp, #0
 8007c78:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_start); }
 8007c7a:	687a      	ldr	r2, [r7, #4]
 8007c7c:	f107 030c 	add.w	r3, r7, #12
 8007c80:	4611      	mov	r1, r2
 8007c82:	4618      	mov	r0, r3
 8007c84:	f000 fea4 	bl	80089d0 <_ZN9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEC1ERKS1_>
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	4618      	mov	r0, r3
 8007c8c:	3710      	adds	r7, #16
 8007c8e:	46bd      	mov	sp, r7
 8007c90:	bd80      	pop	{r7, pc}

08007c92 <_ZSt4findIN9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEEcET_S7_S7_RKT0_>:
    find(_InputIterator __first, _InputIterator __last,
 8007c92:	b580      	push	{r7, lr}
 8007c94:	b084      	sub	sp, #16
 8007c96:	af00      	add	r7, sp, #0
 8007c98:	60f8      	str	r0, [r7, #12]
 8007c9a:	60b9      	str	r1, [r7, #8]
 8007c9c:	607a      	str	r2, [r7, #4]
      return std::__find_if(__first, __last,
 8007c9e:	6878      	ldr	r0, [r7, #4]
 8007ca0:	f000 fea6 	bl	80089f0 <_ZN9__gnu_cxx5__ops17__iter_equals_valIKcEENS0_16_Iter_equals_valIT_EERS4_>
 8007ca4:	4603      	mov	r3, r0
 8007ca6:	461a      	mov	r2, r3
 8007ca8:	68b9      	ldr	r1, [r7, #8]
 8007caa:	68f8      	ldr	r0, [r7, #12]
 8007cac:	f000 feaf 	bl	8008a0e <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEENS0_5__ops16_Iter_equals_valIKcEEET_SB_SB_T0_>
 8007cb0:	4603      	mov	r3, r0
    }
 8007cb2:	4618      	mov	r0, r3
 8007cb4:	3710      	adds	r7, #16
 8007cb6:	46bd      	mov	sp, r7
 8007cb8:	bd80      	pop	{r7, pc}

08007cba <_ZN9__gnu_cxxeqIPcSt6vectorIcSaIcEEEEbRKNS_17__normal_iteratorIT_T0_EESA_>:
    noexcept(noexcept(std::__detail::__synth3way(__lhs.base(), __rhs.base())))
    { return std::__detail::__synth3way(__lhs.base(), __rhs.base()); }

  template<typename _Iterator, typename _Container>
    constexpr bool
    operator==(const __normal_iterator<_Iterator, _Container>& __lhs,
 8007cba:	b590      	push	{r4, r7, lr}
 8007cbc:	b083      	sub	sp, #12
 8007cbe:	af00      	add	r7, sp, #0
 8007cc0:	6078      	str	r0, [r7, #4]
 8007cc2:	6039      	str	r1, [r7, #0]
	       const __normal_iterator<_Iterator, _Container>& __rhs)
    noexcept(noexcept(__lhs.base() == __rhs.base()))
    requires requires {
      { __lhs.base() == __rhs.base() } -> std::convertible_to<bool>;
    }
    { return __lhs.base() == __rhs.base(); }
 8007cc4:	6878      	ldr	r0, [r7, #4]
 8007cc6:	f7fe ffca 	bl	8006c5e <_ZNK9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEE4baseEv>
 8007cca:	4603      	mov	r3, r0
 8007ccc:	681c      	ldr	r4, [r3, #0]
 8007cce:	6838      	ldr	r0, [r7, #0]
 8007cd0:	f7fe ffc5 	bl	8006c5e <_ZNK9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEE4baseEv>
 8007cd4:	4603      	mov	r3, r0
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	429c      	cmp	r4, r3
 8007cda:	bf0c      	ite	eq
 8007cdc:	2301      	moveq	r3, #1
 8007cde:	2300      	movne	r3, #0
 8007ce0:	b2db      	uxtb	r3, r3
 8007ce2:	4618      	mov	r0, r3
 8007ce4:	370c      	adds	r7, #12
 8007ce6:	46bd      	mov	sp, r7
 8007ce8:	bd90      	pop	{r4, r7, pc}

08007cea <_ZNSt6vectorIfSaIfEE9push_backERKf>:
      push_back(const value_type& __x)
 8007cea:	b580      	push	{r7, lr}
 8007cec:	b082      	sub	sp, #8
 8007cee:	af00      	add	r7, sp, #0
 8007cf0:	6078      	str	r0, [r7, #4]
 8007cf2:	6039      	str	r1, [r7, #0]
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	685a      	ldr	r2, [r3, #4]
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	689b      	ldr	r3, [r3, #8]
 8007cfc:	429a      	cmp	r2, r3
 8007cfe:	d00c      	beq.n	8007d1a <_ZNSt6vectorIfSaIfEE9push_backERKf+0x30>
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
 8007d00:	6878      	ldr	r0, [r7, #4]
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	685b      	ldr	r3, [r3, #4]
 8007d06:	683a      	ldr	r2, [r7, #0]
 8007d08:	4619      	mov	r1, r3
 8007d0a:	f000 f8d4 	bl	8007eb6 <_ZNSt16allocator_traitsISaIfEE9constructIfJRKfEEEvRS0_PT_DpOT0_>
	    ++this->_M_impl._M_finish;
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	685b      	ldr	r3, [r3, #4]
 8007d12:	1d1a      	adds	r2, r3, #4
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	605a      	str	r2, [r3, #4]
      }
 8007d18:	e008      	b.n	8007d2c <_ZNSt6vectorIfSaIfEE9push_backERKf+0x42>
	  _M_realloc_insert(end(), __x);
 8007d1a:	6878      	ldr	r0, [r7, #4]
 8007d1c:	f7ff fc20 	bl	8007560 <_ZNSt6vectorIfSaIfEE3endEv>
 8007d20:	4603      	mov	r3, r0
 8007d22:	683a      	ldr	r2, [r7, #0]
 8007d24:	4619      	mov	r1, r3
 8007d26:	6878      	ldr	r0, [r7, #4]
 8007d28:	f000 fe88 	bl	8008a3c <_ZNSt6vectorIfSaIfEE17_M_realloc_insertIJRKfEEEvN9__gnu_cxx17__normal_iteratorIPfS1_EEDpOT_>
      }
 8007d2c:	bf00      	nop
 8007d2e:	3708      	adds	r7, #8
 8007d30:	46bd      	mov	sp, r7
 8007d32:	bd80      	pop	{r7, pc}

08007d34 <_ZSt7reverseIPbEvT_S1_>:
    reverse(_BidirectionalIterator __first, _BidirectionalIterator __last)
 8007d34:	b5b0      	push	{r4, r5, r7, lr}
 8007d36:	b082      	sub	sp, #8
 8007d38:	af00      	add	r7, sp, #0
 8007d3a:	6078      	str	r0, [r7, #4]
 8007d3c:	6039      	str	r1, [r7, #0]
      std::__reverse(__first, __last, std::__iterator_category(__first));
 8007d3e:	687c      	ldr	r4, [r7, #4]
 8007d40:	1d3b      	adds	r3, r7, #4
 8007d42:	4618      	mov	r0, r3
 8007d44:	f000 fef6 	bl	8008b34 <_ZSt19__iterator_categoryIPbENSt15iterator_traitsIT_E17iterator_categoryERKS2_>
 8007d48:	462a      	mov	r2, r5
 8007d4a:	6839      	ldr	r1, [r7, #0]
 8007d4c:	4620      	mov	r0, r4
 8007d4e:	f000 fefb 	bl	8008b48 <_ZSt9__reverseIPbEvT_S1_St26random_access_iterator_tag>
    }
 8007d52:	bf00      	nop
 8007d54:	3708      	adds	r7, #8
 8007d56:	46bd      	mov	sp, r7
 8007d58:	bdb0      	pop	{r4, r5, r7, pc}

08007d5a <_ZNSt11_Deque_baseIfSaIfEE11_Deque_implC1Ev>:
	_Deque_impl() _GLIBCXX_NOEXCEPT_IF(
 8007d5a:	b580      	push	{r7, lr}
 8007d5c:	b082      	sub	sp, #8
 8007d5e:	af00      	add	r7, sp, #0
 8007d60:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 8007d62:	6878      	ldr	r0, [r7, #4]
 8007d64:	f000 f9e8 	bl	8008138 <_ZNSaIfEC1Ev>
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	4618      	mov	r0, r3
 8007d6c:	f000 ff0d 	bl	8008b8a <_ZNSt11_Deque_baseIfSaIfEE16_Deque_impl_dataC1Ev>
	{ }
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	4618      	mov	r0, r3
 8007d74:	3708      	adds	r7, #8
 8007d76:	46bd      	mov	sp, r7
 8007d78:	bd80      	pop	{r7, pc}

08007d7a <_ZNSt11_Deque_baseIfSaIfEE17_M_initialize_mapEj>:
    _Deque_base<_Tp, _Alloc>::
 8007d7a:	b590      	push	{r4, r7, lr}
 8007d7c:	b089      	sub	sp, #36	; 0x24
 8007d7e:	af00      	add	r7, sp, #0
 8007d80:	6078      	str	r0, [r7, #4]
 8007d82:	6039      	str	r1, [r7, #0]
      const size_t __num_nodes = (__num_elements / __deque_buf_size(sizeof(_Tp))
 8007d84:	2004      	movs	r0, #4
 8007d86:	f7fa fa73 	bl	8002270 <_ZSt16__deque_buf_sizej>
 8007d8a:	4602      	mov	r2, r0
 8007d8c:	683b      	ldr	r3, [r7, #0]
 8007d8e:	fbb3 f3f2 	udiv	r3, r3, r2
 8007d92:	3301      	adds	r3, #1
 8007d94:	61fb      	str	r3, [r7, #28]
      this->_M_impl._M_map_size = std::max((size_t) _S_initial_map_size,
 8007d96:	2308      	movs	r3, #8
 8007d98:	60fb      	str	r3, [r7, #12]
					   size_t(__num_nodes + 2));
 8007d9a:	69fb      	ldr	r3, [r7, #28]
 8007d9c:	3302      	adds	r3, #2
 8007d9e:	613b      	str	r3, [r7, #16]
      this->_M_impl._M_map_size = std::max((size_t) _S_initial_map_size,
 8007da0:	f107 0210 	add.w	r2, r7, #16
 8007da4:	f107 030c 	add.w	r3, r7, #12
 8007da8:	4611      	mov	r1, r2
 8007daa:	4618      	mov	r0, r3
 8007dac:	f000 ff06 	bl	8008bbc <_ZSt3maxIjERKT_S2_S2_>
 8007db0:	4603      	mov	r3, r0
 8007db2:	681a      	ldr	r2, [r3, #0]
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_map = _M_allocate_map(this->_M_impl._M_map_size);
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	685b      	ldr	r3, [r3, #4]
 8007dbc:	4619      	mov	r1, r3
 8007dbe:	6878      	ldr	r0, [r7, #4]
 8007dc0:	f000 ff10 	bl	8008be4 <_ZNSt11_Deque_baseIfSaIfEE15_M_allocate_mapEj>
 8007dc4:	4602      	mov	r2, r0
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	601a      	str	r2, [r3, #0]
      _Map_pointer __nstart = (this->_M_impl._M_map
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	681a      	ldr	r2, [r3, #0]
			       + (this->_M_impl._M_map_size - __num_nodes) / 2);
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	6859      	ldr	r1, [r3, #4]
 8007dd2:	69fb      	ldr	r3, [r7, #28]
 8007dd4:	1acb      	subs	r3, r1, r3
 8007dd6:	085b      	lsrs	r3, r3, #1
 8007dd8:	009b      	lsls	r3, r3, #2
      _Map_pointer __nstart = (this->_M_impl._M_map
 8007dda:	4413      	add	r3, r2
 8007ddc:	61bb      	str	r3, [r7, #24]
      _Map_pointer __nfinish = __nstart + __num_nodes;
 8007dde:	69fb      	ldr	r3, [r7, #28]
 8007de0:	009b      	lsls	r3, r3, #2
 8007de2:	69ba      	ldr	r2, [r7, #24]
 8007de4:	4413      	add	r3, r2
 8007de6:	617b      	str	r3, [r7, #20]
	{ _M_create_nodes(__nstart, __nfinish); }
 8007de8:	697a      	ldr	r2, [r7, #20]
 8007dea:	69b9      	ldr	r1, [r7, #24]
 8007dec:	6878      	ldr	r0, [r7, #4]
 8007dee:	f000 ff16 	bl	8008c1e <_ZNSt11_Deque_baseIfSaIfEE15_M_create_nodesEPPfS3_>
      this->_M_impl._M_start._M_set_node(__nstart);
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	3308      	adds	r3, #8
 8007df6:	69b9      	ldr	r1, [r7, #24]
 8007df8:	4618      	mov	r0, r3
 8007dfa:	f000 ff2b 	bl	8008c54 <_ZNSt15_Deque_iteratorIfRfPfE11_M_set_nodeEPS1_>
      this->_M_impl._M_finish._M_set_node(__nfinish - 1);
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	f103 0218 	add.w	r2, r3, #24
 8007e04:	697b      	ldr	r3, [r7, #20]
 8007e06:	3b04      	subs	r3, #4
 8007e08:	4619      	mov	r1, r3
 8007e0a:	4610      	mov	r0, r2
 8007e0c:	f000 ff22 	bl	8008c54 <_ZNSt15_Deque_iteratorIfRfPfE11_M_set_nodeEPS1_>
      this->_M_impl._M_start._M_cur = _M_impl._M_start._M_first;
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	68da      	ldr	r2, [r3, #12]
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	609a      	str	r2, [r3, #8]
      this->_M_impl._M_finish._M_cur = (this->_M_impl._M_finish._M_first
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	69dc      	ldr	r4, [r3, #28]
					% __deque_buf_size(sizeof(_Tp)));
 8007e1c:	2004      	movs	r0, #4
 8007e1e:	f7fa fa27 	bl	8002270 <_ZSt16__deque_buf_sizej>
 8007e22:	4602      	mov	r2, r0
 8007e24:	683b      	ldr	r3, [r7, #0]
 8007e26:	fbb3 f1f2 	udiv	r1, r3, r2
 8007e2a:	fb01 f202 	mul.w	r2, r1, r2
 8007e2e:	1a9b      	subs	r3, r3, r2
					+ __num_elements
 8007e30:	009b      	lsls	r3, r3, #2
 8007e32:	18e2      	adds	r2, r4, r3
      this->_M_impl._M_finish._M_cur = (this->_M_impl._M_finish._M_first
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	619a      	str	r2, [r3, #24]
    }
 8007e38:	bf00      	nop
 8007e3a:	3724      	adds	r7, #36	; 0x24
 8007e3c:	46bd      	mov	sp, r7
 8007e3e:	bd90      	pop	{r4, r7, pc}

08007e40 <_ZNSt11_Deque_baseIfSaIfEE17_M_deallocate_mapEPPfj>:
      _M_deallocate_map(_Map_pointer __p, size_t __n) _GLIBCXX_NOEXCEPT
 8007e40:	b580      	push	{r7, lr}
 8007e42:	b086      	sub	sp, #24
 8007e44:	af00      	add	r7, sp, #0
 8007e46:	60f8      	str	r0, [r7, #12]
 8007e48:	60b9      	str	r1, [r7, #8]
 8007e4a:	607a      	str	r2, [r7, #4]
	_Map_alloc_type __map_alloc = _M_get_map_allocator();
 8007e4c:	f107 0314 	add.w	r3, r7, #20
 8007e50:	68f9      	ldr	r1, [r7, #12]
 8007e52:	4618      	mov	r0, r3
 8007e54:	f000 ff2a 	bl	8008cac <_ZNKSt11_Deque_baseIfSaIfEE20_M_get_map_allocatorEv>
	_Map_alloc_traits::deallocate(__map_alloc, __p, __n);
 8007e58:	f107 0314 	add.w	r3, r7, #20
 8007e5c:	687a      	ldr	r2, [r7, #4]
 8007e5e:	68b9      	ldr	r1, [r7, #8]
 8007e60:	4618      	mov	r0, r3
 8007e62:	f000 ff3f 	bl	8008ce4 <_ZNSt16allocator_traitsISaIPfEE10deallocateERS1_PS0_j>
      }
 8007e66:	f107 0314 	add.w	r3, r7, #20
 8007e6a:	4618      	mov	r0, r3
 8007e6c:	f000 ff2f 	bl	8008cce <_ZNSaIPfED1Ev>
 8007e70:	3718      	adds	r7, #24
 8007e72:	46bd      	mov	sp, r7
 8007e74:	bd80      	pop	{r7, pc}

08007e76 <_ZNSt11_Deque_baseIfSaIfEE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 8007e76:	b480      	push	{r7}
 8007e78:	b083      	sub	sp, #12
 8007e7a:	af00      	add	r7, sp, #0
 8007e7c:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	4618      	mov	r0, r3
 8007e82:	370c      	adds	r7, #12
 8007e84:	46bd      	mov	sp, r7
 8007e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e8a:	4770      	bx	lr

08007e8c <_ZSt12construct_atIfJRKfEEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPS3_DpOS4_>:
    }

#if __cplusplus >= 202002L
  template<typename _Tp, typename... _Args>
    constexpr auto
    construct_at(_Tp* __location, _Args&&... __args)
 8007e8c:	b590      	push	{r4, r7, lr}
 8007e8e:	b083      	sub	sp, #12
 8007e90:	af00      	add	r7, sp, #0
 8007e92:	6078      	str	r0, [r7, #4]
 8007e94:	6039      	str	r1, [r7, #0]
    noexcept(noexcept(::new((void*)0) _Tp(std::declval<_Args>()...)))
    -> decltype(::new((void*)0) _Tp(std::declval<_Args>()...))
    { return ::new((void*)__location) _Tp(std::forward<_Args>(__args)...); }
 8007e96:	6838      	ldr	r0, [r7, #0]
 8007e98:	f000 ff43 	bl	8008d22 <_ZSt7forwardIRKfEOT_RNSt16remove_referenceIS2_E4typeE>
 8007e9c:	4603      	mov	r3, r0
 8007e9e:	681c      	ldr	r4, [r3, #0]
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	4619      	mov	r1, r3
 8007ea4:	2004      	movs	r0, #4
 8007ea6:	f7fa f9b5 	bl	8002214 <_ZnwjPv>
 8007eaa:	4603      	mov	r3, r0
 8007eac:	601c      	str	r4, [r3, #0]
 8007eae:	4618      	mov	r0, r3
 8007eb0:	370c      	adds	r7, #12
 8007eb2:	46bd      	mov	sp, r7
 8007eb4:	bd90      	pop	{r4, r7, pc}

08007eb6 <_ZNSt16allocator_traitsISaIfEE9constructIfJRKfEEEvRS0_PT_DpOT0_>:
       *  in C++11, C++14 and C++17. Changed in C++20 to call
       *  `std::construct_at(__p, std::forward<_Args>(__args)...)` instead.
      */
      template<typename _Up, typename... _Args>
	static _GLIBCXX20_CONSTEXPR void
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 8007eb6:	b580      	push	{r7, lr}
 8007eb8:	b084      	sub	sp, #16
 8007eba:	af00      	add	r7, sp, #0
 8007ebc:	60f8      	str	r0, [r7, #12]
 8007ebe:	60b9      	str	r1, [r7, #8]
 8007ec0:	607a      	str	r2, [r7, #4]
	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
	{
#if __cplusplus <= 201703L
	  __a.construct(__p, std::forward<_Args>(__args)...);
#else
	  std::construct_at(__p, std::forward<_Args>(__args)...);
 8007ec2:	6878      	ldr	r0, [r7, #4]
 8007ec4:	f000 ff2d 	bl	8008d22 <_ZSt7forwardIRKfEOT_RNSt16remove_referenceIS2_E4typeE>
 8007ec8:	4603      	mov	r3, r0
 8007eca:	4619      	mov	r1, r3
 8007ecc:	68b8      	ldr	r0, [r7, #8]
 8007ece:	f7ff ffdd 	bl	8007e8c <_ZSt12construct_atIfJRKfEEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPS3_DpOS4_>
#endif
	}
 8007ed2:	bf00      	nop
 8007ed4:	3710      	adds	r7, #16
 8007ed6:	46bd      	mov	sp, r7
 8007ed8:	bd80      	pop	{r7, pc}
	...

08007edc <_ZNSt5dequeIfSaIfEE16_M_push_back_auxIJRKfEEEvDpOT_>:
  // Called only if _M_impl._M_finish._M_cur == _M_impl._M_finish._M_last - 1.
  template<typename _Tp, typename _Alloc>
#if __cplusplus >= 201103L
    template<typename... _Args>
      void
      deque<_Tp, _Alloc>::
 8007edc:	b5b0      	push	{r4, r5, r7, lr}
 8007ede:	b082      	sub	sp, #8
 8007ee0:	af00      	add	r7, sp, #0
 8007ee2:	6078      	str	r0, [r7, #4]
 8007ee4:	6039      	str	r1, [r7, #0]
      void
      deque<_Tp, _Alloc>::
      _M_push_back_aux(const value_type& __t)
#endif
      {
	if (size() == max_size())
 8007ee6:	6878      	ldr	r0, [r7, #4]
 8007ee8:	f7ff fa2e 	bl	8007348 <_ZNKSt5dequeIfSaIfEE4sizeEv>
 8007eec:	4604      	mov	r4, r0
 8007eee:	6878      	ldr	r0, [r7, #4]
 8007ef0:	f000 ff22 	bl	8008d38 <_ZNKSt5dequeIfSaIfEE8max_sizeEv>
 8007ef4:	4603      	mov	r3, r0
 8007ef6:	429c      	cmp	r4, r3
 8007ef8:	bf0c      	ite	eq
 8007efa:	2301      	moveq	r3, #1
 8007efc:	2300      	movne	r3, #0
 8007efe:	b2db      	uxtb	r3, r3
 8007f00:	2b00      	cmp	r3, #0
 8007f02:	d002      	beq.n	8007f0a <_ZNSt5dequeIfSaIfEE16_M_push_back_auxIJRKfEEEvDpOT_+0x2e>
	  __throw_length_error(
 8007f04:	4816      	ldr	r0, [pc, #88]	; (8007f60 <_ZNSt5dequeIfSaIfEE16_M_push_back_auxIJRKfEEEvDpOT_+0x84>)
 8007f06:	f013 fc1f 	bl	801b748 <_ZSt20__throw_length_errorPKc>
	      __N("cannot create std::deque larger than max_size()"));

	_M_reserve_map_at_back();
 8007f0a:	2101      	movs	r1, #1
 8007f0c:	6878      	ldr	r0, [r7, #4]
 8007f0e:	f000 ff24 	bl	8008d5a <_ZNSt5dequeIfSaIfEE22_M_reserve_map_at_backEj>
	*(this->_M_impl._M_finish._M_node + 1) = this->_M_allocate_node();
 8007f12:	687a      	ldr	r2, [r7, #4]
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f18:	1d1c      	adds	r4, r3, #4
 8007f1a:	4610      	mov	r0, r2
 8007f1c:	f000 ff38 	bl	8008d90 <_ZNSt11_Deque_baseIfSaIfEE16_M_allocate_nodeEv>
 8007f20:	4603      	mov	r3, r0
 8007f22:	6023      	str	r3, [r4, #0]
	__try
	  {
#if __cplusplus >= 201103L
	    _Alloc_traits::construct(this->_M_impl,
 8007f24:	687c      	ldr	r4, [r7, #4]
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	699d      	ldr	r5, [r3, #24]
 8007f2a:	6838      	ldr	r0, [r7, #0]
 8007f2c:	f000 fef9 	bl	8008d22 <_ZSt7forwardIRKfEOT_RNSt16remove_referenceIS2_E4typeE>
 8007f30:	4603      	mov	r3, r0
 8007f32:	461a      	mov	r2, r3
 8007f34:	4629      	mov	r1, r5
 8007f36:	4620      	mov	r0, r4
 8007f38:	f7ff ffbd 	bl	8007eb6 <_ZNSt16allocator_traitsISaIfEE9constructIfJRKfEEEvRS0_PT_DpOT0_>
				     this->_M_impl._M_finish._M_cur,
				     std::forward<_Args>(__args)...);
#else
	    this->_M_impl.construct(this->_M_impl._M_finish._M_cur, __t);
#endif
	    this->_M_impl._M_finish._M_set_node(this->_M_impl._M_finish._M_node
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	f103 0218 	add.w	r2, r3, #24
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f46:	3304      	adds	r3, #4
 8007f48:	4619      	mov	r1, r3
 8007f4a:	4610      	mov	r0, r2
 8007f4c:	f000 fe82 	bl	8008c54 <_ZNSt15_Deque_iteratorIfRfPfE11_M_set_nodeEPS1_>
						+ 1);
	    this->_M_impl._M_finish._M_cur = this->_M_impl._M_finish._M_first;
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	69da      	ldr	r2, [r3, #28]
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	619a      	str	r2, [r3, #24]
	__catch(...)
	  {
	    _M_deallocate_node(*(this->_M_impl._M_finish._M_node + 1));
	    __throw_exception_again;
	  }
      }
 8007f58:	bf00      	nop
 8007f5a:	3708      	adds	r7, #8
 8007f5c:	46bd      	mov	sp, r7
 8007f5e:	bdb0      	pop	{r4, r5, r7, pc}
 8007f60:	0801f100 	.word	0x0801f100

08007f64 <_ZStmiRKSt15_Deque_iteratorIfRfPfES4_>:
      operator-(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 8007f64:	b580      	push	{r7, lr}
 8007f66:	b082      	sub	sp, #8
 8007f68:	af00      	add	r7, sp, #0
 8007f6a:	6078      	str	r0, [r7, #4]
 8007f6c:	6039      	str	r1, [r7, #0]
	return difference_type(_S_buffer_size())
 8007f6e:	f000 ff21 	bl	8008db4 <_ZNSt15_Deque_iteratorIfRfPfE14_S_buffer_sizeEv>
 8007f72:	4603      	mov	r3, r0
 8007f74:	4619      	mov	r1, r3
	  * (__x._M_node - __y._M_node - bool(__x._M_node))
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	68da      	ldr	r2, [r3, #12]
 8007f7a:	683b      	ldr	r3, [r7, #0]
 8007f7c:	68db      	ldr	r3, [r3, #12]
 8007f7e:	1ad3      	subs	r3, r2, r3
 8007f80:	109b      	asrs	r3, r3, #2
 8007f82:	461a      	mov	r2, r3
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	68db      	ldr	r3, [r3, #12]
 8007f88:	2b00      	cmp	r3, #0
 8007f8a:	bf14      	ite	ne
 8007f8c:	2301      	movne	r3, #1
 8007f8e:	2300      	moveq	r3, #0
 8007f90:	b2db      	uxtb	r3, r3
 8007f92:	1ad3      	subs	r3, r2, r3
 8007f94:	fb01 f303 	mul.w	r3, r1, r3
	  + (__x._M_cur - __x._M_first)
 8007f98:	687a      	ldr	r2, [r7, #4]
 8007f9a:	6811      	ldr	r1, [r2, #0]
 8007f9c:	687a      	ldr	r2, [r7, #4]
 8007f9e:	6852      	ldr	r2, [r2, #4]
 8007fa0:	1a8a      	subs	r2, r1, r2
 8007fa2:	1092      	asrs	r2, r2, #2
 8007fa4:	4413      	add	r3, r2
	  + (__y._M_last - __y._M_cur);
 8007fa6:	683a      	ldr	r2, [r7, #0]
 8007fa8:	6891      	ldr	r1, [r2, #8]
 8007faa:	683a      	ldr	r2, [r7, #0]
 8007fac:	6812      	ldr	r2, [r2, #0]
 8007fae:	1a8a      	subs	r2, r1, r2
 8007fb0:	1092      	asrs	r2, r2, #2
 8007fb2:	4413      	add	r3, r2
      }
 8007fb4:	4618      	mov	r0, r3
 8007fb6:	3708      	adds	r7, #8
 8007fb8:	46bd      	mov	sp, r7
 8007fba:	bd80      	pop	{r7, pc}

08007fbc <_ZNSt16allocator_traitsISaIfEE7destroyIfEEvRS0_PT_>:
       *
       *  Calls @c __a.destroy(__p).
      */
      template<typename _Up>
	static _GLIBCXX20_CONSTEXPR void
	destroy(allocator_type& __a __attribute__((__unused__)), _Up* __p)
 8007fbc:	b580      	push	{r7, lr}
 8007fbe:	b082      	sub	sp, #8
 8007fc0:	af00      	add	r7, sp, #0
 8007fc2:	6078      	str	r0, [r7, #4]
 8007fc4:	6039      	str	r1, [r7, #0]
	noexcept(is_nothrow_destructible<_Up>::value)
	{
#if __cplusplus <= 201703L
	  __a.destroy(__p);
#else
	  std::destroy_at(__p);
 8007fc6:	6838      	ldr	r0, [r7, #0]
 8007fc8:	f000 fefc 	bl	8008dc4 <_ZSt10destroy_atIfEvPT_>
#endif
	}
 8007fcc:	bf00      	nop
 8007fce:	3708      	adds	r7, #8
 8007fd0:	46bd      	mov	sp, r7
 8007fd2:	bd80      	pop	{r7, pc}

08007fd4 <_ZNSt5dequeIfSaIfEE16_M_pop_front_auxEv>:
  // Note that if the deque has at least one element (a precondition for this
  // member function), and if
  //   _M_impl._M_start._M_cur == _M_impl._M_start._M_last,
  // then the deque must have at least two nodes.
  template <typename _Tp, typename _Alloc>
    void deque<_Tp, _Alloc>::
 8007fd4:	b580      	push	{r7, lr}
 8007fd6:	b082      	sub	sp, #8
 8007fd8:	af00      	add	r7, sp, #0
 8007fda:	6078      	str	r0, [r7, #4]
    _M_pop_front_aux()
    {
      _Alloc_traits::destroy(_M_get_Tp_allocator(),
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	4618      	mov	r0, r3
 8007fe0:	f7ff ff49 	bl	8007e76 <_ZNSt11_Deque_baseIfSaIfEE19_M_get_Tp_allocatorEv>
 8007fe4:	4602      	mov	r2, r0
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	689b      	ldr	r3, [r3, #8]
 8007fea:	4619      	mov	r1, r3
 8007fec:	4610      	mov	r0, r2
 8007fee:	f7ff ffe5 	bl	8007fbc <_ZNSt16allocator_traitsISaIfEE7destroyIfEEvRS0_PT_>
			     this->_M_impl._M_start._M_cur);
      _M_deallocate_node(this->_M_impl._M_start._M_first);
 8007ff2:	687a      	ldr	r2, [r7, #4]
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	68db      	ldr	r3, [r3, #12]
 8007ff8:	4619      	mov	r1, r3
 8007ffa:	4610      	mov	r0, r2
 8007ffc:	f000 fe43 	bl	8008c86 <_ZNSt11_Deque_baseIfSaIfEE18_M_deallocate_nodeEPf>
      this->_M_impl._M_start._M_set_node(this->_M_impl._M_start._M_node + 1);
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	f103 0208 	add.w	r2, r3, #8
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	695b      	ldr	r3, [r3, #20]
 800800a:	3304      	adds	r3, #4
 800800c:	4619      	mov	r1, r3
 800800e:	4610      	mov	r0, r2
 8008010:	f000 fe20 	bl	8008c54 <_ZNSt15_Deque_iteratorIfRfPfE11_M_set_nodeEPS1_>
      this->_M_impl._M_start._M_cur = this->_M_impl._M_start._M_first;
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	68da      	ldr	r2, [r3, #12]
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	609a      	str	r2, [r3, #8]
    }
 800801c:	bf00      	nop
 800801e:	3708      	adds	r7, #8
 8008020:	46bd      	mov	sp, r7
 8008022:	bd80      	pop	{r7, pc}

08008024 <_ZNSt15_Deque_iteratorIfRfPfEC1ERKS2_>:
      _Deque_iterator(const _Deque_iterator& __x) noexcept
 8008024:	b480      	push	{r7}
 8008026:	b083      	sub	sp, #12
 8008028:	af00      	add	r7, sp, #0
 800802a:	6078      	str	r0, [r7, #4]
 800802c:	6039      	str	r1, [r7, #0]
       : _M_cur(__x._M_cur), _M_first(__x._M_first),
 800802e:	683b      	ldr	r3, [r7, #0]
 8008030:	681a      	ldr	r2, [r3, #0]
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	601a      	str	r2, [r3, #0]
 8008036:	683b      	ldr	r3, [r7, #0]
 8008038:	685a      	ldr	r2, [r3, #4]
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	605a      	str	r2, [r3, #4]
	 _M_last(__x._M_last), _M_node(__x._M_node) { }
 800803e:	683b      	ldr	r3, [r7, #0]
 8008040:	689a      	ldr	r2, [r3, #8]
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	609a      	str	r2, [r3, #8]
 8008046:	683b      	ldr	r3, [r7, #0]
 8008048:	68da      	ldr	r2, [r3, #12]
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	60da      	str	r2, [r3, #12]
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	4618      	mov	r0, r3
 8008052:	370c      	adds	r7, #12
 8008054:	46bd      	mov	sp, r7
 8008056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800805a:	4770      	bx	lr

0800805c <_ZSteqRKSt15_Deque_iteratorIfRfPfES4_>:
      operator==(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 800805c:	b480      	push	{r7}
 800805e:	b083      	sub	sp, #12
 8008060:	af00      	add	r7, sp, #0
 8008062:	6078      	str	r0, [r7, #4]
 8008064:	6039      	str	r1, [r7, #0]
      { return __x._M_cur == __y._M_cur; }
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	681a      	ldr	r2, [r3, #0]
 800806a:	683b      	ldr	r3, [r7, #0]
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	429a      	cmp	r2, r3
 8008070:	bf0c      	ite	eq
 8008072:	2301      	moveq	r3, #1
 8008074:	2300      	movne	r3, #0
 8008076:	b2db      	uxtb	r3, r3
 8008078:	4618      	mov	r0, r3
 800807a:	370c      	adds	r7, #12
 800807c:	46bd      	mov	sp, r7
 800807e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008082:	4770      	bx	lr

08008084 <_ZNSt15_Deque_iteratorIfRfPfEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 8008084:	b580      	push	{r7, lr}
 8008086:	b082      	sub	sp, #8
 8008088:	af00      	add	r7, sp, #0
 800808a:	6078      	str	r0, [r7, #4]
	++_M_cur;
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	1d1a      	adds	r2, r3, #4
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	601a      	str	r2, [r3, #0]
	if (_M_cur == _M_last)
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	681a      	ldr	r2, [r3, #0]
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	689b      	ldr	r3, [r3, #8]
 800809e:	429a      	cmp	r2, r3
 80080a0:	d10a      	bne.n	80080b8 <_ZNSt15_Deque_iteratorIfRfPfEppEv+0x34>
	    _M_set_node(_M_node + 1);
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	68db      	ldr	r3, [r3, #12]
 80080a6:	3304      	adds	r3, #4
 80080a8:	4619      	mov	r1, r3
 80080aa:	6878      	ldr	r0, [r7, #4]
 80080ac:	f000 fdd2 	bl	8008c54 <_ZNSt15_Deque_iteratorIfRfPfE11_M_set_nodeEPS1_>
	    _M_cur = _M_first;
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	685a      	ldr	r2, [r3, #4]
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	601a      	str	r2, [r3, #0]
	return *this;
 80080b8:	687b      	ldr	r3, [r7, #4]
      }
 80080ba:	4618      	mov	r0, r3
 80080bc:	3708      	adds	r7, #8
 80080be:	46bd      	mov	sp, r7
 80080c0:	bd80      	pop	{r7, pc}

080080c2 <_ZNKSt15_Deque_iteratorIfRfPfEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 80080c2:	b480      	push	{r7}
 80080c4:	b083      	sub	sp, #12
 80080c6:	af00      	add	r7, sp, #0
 80080c8:	6078      	str	r0, [r7, #4]
      { return *_M_cur; }
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	4618      	mov	r0, r3
 80080d0:	370c      	adds	r7, #12
 80080d2:	46bd      	mov	sp, r7
 80080d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080d8:	4770      	bx	lr

080080da <_ZNKSt16initializer_listIfE5beginEv>:
      constexpr size_type
      size() const noexcept { return _M_len; }

      // First element.
      constexpr const_iterator
      begin() const noexcept { return _M_array; }
 80080da:	b480      	push	{r7}
 80080dc:	b083      	sub	sp, #12
 80080de:	af00      	add	r7, sp, #0
 80080e0:	6078      	str	r0, [r7, #4]
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	4618      	mov	r0, r3
 80080e8:	370c      	adds	r7, #12
 80080ea:	46bd      	mov	sp, r7
 80080ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080f0:	4770      	bx	lr

080080f2 <_ZNKSt16initializer_listIfE3endEv>:

      // One past the last element.
      constexpr const_iterator
      end() const noexcept { return begin() + size(); }
 80080f2:	b590      	push	{r4, r7, lr}
 80080f4:	b083      	sub	sp, #12
 80080f6:	af00      	add	r7, sp, #0
 80080f8:	6078      	str	r0, [r7, #4]
 80080fa:	6878      	ldr	r0, [r7, #4]
 80080fc:	f7ff ffed 	bl	80080da <_ZNKSt16initializer_listIfE5beginEv>
 8008100:	4604      	mov	r4, r0
 8008102:	6878      	ldr	r0, [r7, #4]
 8008104:	f000 fe68 	bl	8008dd8 <_ZNKSt16initializer_listIfE4sizeEv>
 8008108:	4603      	mov	r3, r0
 800810a:	009b      	lsls	r3, r3, #2
 800810c:	4423      	add	r3, r4
 800810e:	4618      	mov	r0, r3
 8008110:	370c      	adds	r7, #12
 8008112:	46bd      	mov	sp, r7
 8008114:	bd90      	pop	{r4, r7, pc}

08008116 <_ZSt11min_elementIPKfET_S2_S2_>:
   *  @return  Iterator referencing the first instance of the smallest value.
  */
  template<typename _ForwardIterator>
    _GLIBCXX14_CONSTEXPR
    _ForwardIterator
    inline min_element(_ForwardIterator __first, _ForwardIterator __last)
 8008116:	b590      	push	{r4, r7, lr}
 8008118:	b083      	sub	sp, #12
 800811a:	af00      	add	r7, sp, #0
 800811c:	6078      	str	r0, [r7, #4]
 800811e:	6039      	str	r1, [r7, #0]
	    typename iterator_traits<_ForwardIterator>::value_type>)
      __glibcxx_requires_valid_range(__first, __last);
      __glibcxx_requires_irreflexive(__first, __last);

      return _GLIBCXX_STD_A::__min_element(__first, __last,
				__gnu_cxx::__ops::__iter_less_iter());
 8008120:	f7fa f884 	bl	800222c <_ZN9__gnu_cxx5__ops16__iter_less_iterEv>
      return _GLIBCXX_STD_A::__min_element(__first, __last,
 8008124:	4622      	mov	r2, r4
 8008126:	6839      	ldr	r1, [r7, #0]
 8008128:	6878      	ldr	r0, [r7, #4]
 800812a:	f000 fe7b 	bl	8008e24 <_ZSt13__min_elementIPKfN9__gnu_cxx5__ops15_Iter_less_iterEET_S5_S5_T0_>
 800812e:	4603      	mov	r3, r0
    }
 8008130:	4618      	mov	r0, r3
 8008132:	370c      	adds	r7, #12
 8008134:	46bd      	mov	sp, r7
 8008136:	bd90      	pop	{r4, r7, pc}

08008138 <_ZNSaIfEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 8008138:	b580      	push	{r7, lr}
 800813a:	b082      	sub	sp, #8
 800813c:	af00      	add	r7, sp, #0
 800813e:	6078      	str	r0, [r7, #4]
 8008140:	6878      	ldr	r0, [r7, #4]
 8008142:	f000 fe9a 	bl	8008e7a <_ZN9__gnu_cxx13new_allocatorIfEC1Ev>
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	4618      	mov	r0, r3
 800814a:	3708      	adds	r7, #8
 800814c:	46bd      	mov	sp, r7
 800814e:	bd80      	pop	{r7, pc}

08008150 <_ZNSt12_Vector_baseIfSaIfEE17_Vector_impl_dataC1Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
 8008150:	b480      	push	{r7}
 8008152:	b083      	sub	sp, #12
 8008154:	af00      	add	r7, sp, #0
 8008156:	6078      	str	r0, [r7, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	2200      	movs	r2, #0
 800815c:	601a      	str	r2, [r3, #0]
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	2200      	movs	r2, #0
 8008162:	605a      	str	r2, [r3, #4]
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	2200      	movs	r2, #0
 8008168:	609a      	str	r2, [r3, #8]
	{ }
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	4618      	mov	r0, r3
 800816e:	370c      	adds	r7, #12
 8008170:	46bd      	mov	sp, r7
 8008172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008176:	4770      	bx	lr

08008178 <_ZNSt12_Vector_baseIfSaIfEE13_M_deallocateEPfj>:
      _M_deallocate(pointer __p, size_t __n)
 8008178:	b580      	push	{r7, lr}
 800817a:	b084      	sub	sp, #16
 800817c:	af00      	add	r7, sp, #0
 800817e:	60f8      	str	r0, [r7, #12]
 8008180:	60b9      	str	r1, [r7, #8]
 8008182:	607a      	str	r2, [r7, #4]
	if (__p)
 8008184:	68bb      	ldr	r3, [r7, #8]
 8008186:	2b00      	cmp	r3, #0
 8008188:	d005      	beq.n	8008196 <_ZNSt12_Vector_baseIfSaIfEE13_M_deallocateEPfj+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 800818a:	68fb      	ldr	r3, [r7, #12]
 800818c:	687a      	ldr	r2, [r7, #4]
 800818e:	68b9      	ldr	r1, [r7, #8]
 8008190:	4618      	mov	r0, r3
 8008192:	f000 fe7d 	bl	8008e90 <_ZNSt16allocator_traitsISaIfEE10deallocateERS0_Pfj>
      }
 8008196:	bf00      	nop
 8008198:	3710      	adds	r7, #16
 800819a:	46bd      	mov	sp, r7
 800819c:	bd80      	pop	{r7, pc}

0800819e <_ZNSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 800819e:	b480      	push	{r7}
 80081a0:	b083      	sub	sp, #12
 80081a2:	af00      	add	r7, sp, #0
 80081a4:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	4618      	mov	r0, r3
 80081aa:	370c      	adds	r7, #12
 80081ac:	46bd      	mov	sp, r7
 80081ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081b2:	4770      	bx	lr

080081b4 <_ZSt8_DestroyIPffEvT_S1_RSaIT0_E>:
#endif
    }

  template<typename _ForwardIterator, typename _Tp>
    inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 80081b4:	b580      	push	{r7, lr}
 80081b6:	b084      	sub	sp, #16
 80081b8:	af00      	add	r7, sp, #0
 80081ba:	60f8      	str	r0, [r7, #12]
 80081bc:	60b9      	str	r1, [r7, #8]
 80081be:	607a      	str	r2, [r7, #4]
	     allocator<_Tp>&)
    {
      _Destroy(__first, __last);
 80081c0:	68b9      	ldr	r1, [r7, #8]
 80081c2:	68f8      	ldr	r0, [r7, #12]
 80081c4:	f000 fe83 	bl	8008ece <_ZSt8_DestroyIPfEvT_S1_>
    }
 80081c8:	bf00      	nop
 80081ca:	3710      	adds	r7, #16
 80081cc:	46bd      	mov	sp, r7
 80081ce:	bd80      	pop	{r7, pc}

080081d0 <_ZN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEC1ERKS1_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 80081d0:	b480      	push	{r7}
 80081d2:	b083      	sub	sp, #12
 80081d4:	af00      	add	r7, sp, #0
 80081d6:	6078      	str	r0, [r7, #4]
 80081d8:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 80081da:	683b      	ldr	r3, [r7, #0]
 80081dc:	681a      	ldr	r2, [r3, #0]
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	601a      	str	r2, [r3, #0]
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	4618      	mov	r0, r3
 80081e6:	370c      	adds	r7, #12
 80081e8:	46bd      	mov	sp, r7
 80081ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ee:	4770      	bx	lr

080081f0 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 80081f0:	b480      	push	{r7}
 80081f2:	b083      	sub	sp, #12
 80081f4:	af00      	add	r7, sp, #0
 80081f6:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	4618      	mov	r0, r3
 80081fc:	370c      	adds	r7, #12
 80081fe:	46bd      	mov	sp, r7
 8008200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008204:	4770      	bx	lr

08008206 <_ZN9__gnu_cxxeqIPfSt6vectorIfSaIfEEEEbRKNS_17__normal_iteratorIT_T0_EESA_>:
    operator==(const __normal_iterator<_Iterator, _Container>& __lhs,
 8008206:	b590      	push	{r4, r7, lr}
 8008208:	b083      	sub	sp, #12
 800820a:	af00      	add	r7, sp, #0
 800820c:	6078      	str	r0, [r7, #4]
 800820e:	6039      	str	r1, [r7, #0]
    { return __lhs.base() == __rhs.base(); }
 8008210:	6878      	ldr	r0, [r7, #4]
 8008212:	f7ff ffed 	bl	80081f0 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEE4baseEv>
 8008216:	4603      	mov	r3, r0
 8008218:	681c      	ldr	r4, [r3, #0]
 800821a:	6838      	ldr	r0, [r7, #0]
 800821c:	f7ff ffe8 	bl	80081f0 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEE4baseEv>
 8008220:	4603      	mov	r3, r0
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	429c      	cmp	r4, r3
 8008226:	bf0c      	ite	eq
 8008228:	2301      	moveq	r3, #1
 800822a:	2300      	movne	r3, #0
 800822c:	b2db      	uxtb	r3, r3
 800822e:	4618      	mov	r0, r3
 8008230:	370c      	adds	r7, #12
 8008232:	46bd      	mov	sp, r7
 8008234:	bd90      	pop	{r4, r7, pc}

08008236 <_ZN9__gnu_cxxmiIPfSt6vectorIfSaIfEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS8_SB_>:
    { return __lhs.base() - __rhs.base(); }

  template<typename _Iterator, typename _Container>
    _GLIBCXX20_CONSTEXPR
    inline typename __normal_iterator<_Iterator, _Container>::difference_type
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
 8008236:	b590      	push	{r4, r7, lr}
 8008238:	b083      	sub	sp, #12
 800823a:	af00      	add	r7, sp, #0
 800823c:	6078      	str	r0, [r7, #4]
 800823e:	6039      	str	r1, [r7, #0]
	      const __normal_iterator<_Iterator, _Container>& __rhs)
    _GLIBCXX_NOEXCEPT
    { return __lhs.base() - __rhs.base(); }
 8008240:	6878      	ldr	r0, [r7, #4]
 8008242:	f7ff ffd5 	bl	80081f0 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEE4baseEv>
 8008246:	4603      	mov	r3, r0
 8008248:	681c      	ldr	r4, [r3, #0]
 800824a:	6838      	ldr	r0, [r7, #0]
 800824c:	f7ff ffd0 	bl	80081f0 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEE4baseEv>
 8008250:	4603      	mov	r3, r0
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	1ae3      	subs	r3, r4, r3
 8008256:	109b      	asrs	r3, r3, #2
 8008258:	4618      	mov	r0, r3
 800825a:	370c      	adds	r7, #12
 800825c:	46bd      	mov	sp, r7
 800825e:	bd90      	pop	{r4, r7, pc}

08008260 <_ZSt6__sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_T0_>:
    __sort(_RandomAccessIterator __first, _RandomAccessIterator __last,
 8008260:	b5b0      	push	{r4, r5, r7, lr}
 8008262:	b084      	sub	sp, #16
 8008264:	af00      	add	r7, sp, #0
 8008266:	60f8      	str	r0, [r7, #12]
 8008268:	60b9      	str	r1, [r7, #8]
 800826a:	713a      	strb	r2, [r7, #4]
      if (__first != __last)
 800826c:	f107 0208 	add.w	r2, r7, #8
 8008270:	f107 030c 	add.w	r3, r7, #12
 8008274:	4611      	mov	r1, r2
 8008276:	4618      	mov	r0, r3
 8008278:	f7ff ffc5 	bl	8008206 <_ZN9__gnu_cxxeqIPfSt6vectorIfSaIfEEEEbRKNS_17__normal_iteratorIT_T0_EESA_>
 800827c:	4603      	mov	r3, r0
 800827e:	f083 0301 	eor.w	r3, r3, #1
 8008282:	b2db      	uxtb	r3, r3
 8008284:	2b00      	cmp	r3, #0
 8008286:	d017      	beq.n	80082b8 <_ZSt6__sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_T0_+0x58>
				std::__lg(__last - __first) * 2,
 8008288:	f107 020c 	add.w	r2, r7, #12
 800828c:	f107 0308 	add.w	r3, r7, #8
 8008290:	4611      	mov	r1, r2
 8008292:	4618      	mov	r0, r3
 8008294:	f7ff ffcf 	bl	8008236 <_ZN9__gnu_cxxmiIPfSt6vectorIfSaIfEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS8_SB_>
 8008298:	4603      	mov	r3, r0
 800829a:	4618      	mov	r0, r3
 800829c:	f7f9 ffd9 	bl	8002252 <_ZSt4__lgi>
 80082a0:	4603      	mov	r3, r0
	  std::__introsort_loop(__first, __last,
 80082a2:	005a      	lsls	r2, r3, #1
 80082a4:	462b      	mov	r3, r5
 80082a6:	68b9      	ldr	r1, [r7, #8]
 80082a8:	68f8      	ldr	r0, [r7, #12]
 80082aa:	f000 fe26 	bl	8008efa <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEiNS0_5__ops15_Iter_less_iterEEvT_S9_T0_T1_>
	  std::__final_insertion_sort(__first, __last, __comp);
 80082ae:	4622      	mov	r2, r4
 80082b0:	68b9      	ldr	r1, [r7, #8]
 80082b2:	68f8      	ldr	r0, [r7, #12]
 80082b4:	f000 fe58 	bl	8008f68 <_ZSt22__final_insertion_sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_T0_>
    }
 80082b8:	bf00      	nop
 80082ba:	3710      	adds	r7, #16
 80082bc:	46bd      	mov	sp, r7
 80082be:	bdb0      	pop	{r4, r5, r7, pc}

080082c0 <_ZSt11find_if_notIPbZN3jlb10Controller15lateral_controlEvEUlbE_ET_S4_S4_T0_>:
    find_if_not(_InputIterator __first, _InputIterator __last,
 80082c0:	b590      	push	{r4, r7, lr}
 80082c2:	b085      	sub	sp, #20
 80082c4:	af00      	add	r7, sp, #0
 80082c6:	60f8      	str	r0, [r7, #12]
 80082c8:	60b9      	str	r1, [r7, #8]
 80082ca:	713a      	strb	r2, [r7, #4]
      return std::__find_if_not(__first, __last,
 80082cc:	4618      	mov	r0, r3
 80082ce:	f000 fe83 	bl	8008fd8 <_ZN9__gnu_cxx5__ops11__pred_iterIZN3jlb10Controller15lateral_controlEvEUlbE_EENS0_10_Iter_predIT_EES6_>
 80082d2:	4622      	mov	r2, r4
 80082d4:	68b9      	ldr	r1, [r7, #8]
 80082d6:	68f8      	ldr	r0, [r7, #12]
 80082d8:	f000 fe91 	bl	8008ffe <_ZSt13__find_if_notIPbN9__gnu_cxx5__ops10_Iter_predIZN3jlb10Controller15lateral_controlEvEUlbE_EEET_S8_S8_T0_>
 80082dc:	4603      	mov	r3, r0
    }
 80082de:	4618      	mov	r0, r3
 80082e0:	3714      	adds	r7, #20
 80082e2:	46bd      	mov	sp, r7
 80082e4:	bd90      	pop	{r4, r7, pc}

080082e6 <_ZSt11find_if_notIPbZN3jlb10Controller15lateral_controlEvEUlbE0_ET_S4_S4_T0_>:
    find_if_not(_InputIterator __first, _InputIterator __last,
 80082e6:	b590      	push	{r4, r7, lr}
 80082e8:	b085      	sub	sp, #20
 80082ea:	af00      	add	r7, sp, #0
 80082ec:	60f8      	str	r0, [r7, #12]
 80082ee:	60b9      	str	r1, [r7, #8]
 80082f0:	713a      	strb	r2, [r7, #4]
      return std::__find_if_not(__first, __last,
 80082f2:	4618      	mov	r0, r3
 80082f4:	f000 fe9d 	bl	8009032 <_ZN9__gnu_cxx5__ops11__pred_iterIZN3jlb10Controller15lateral_controlEvEUlbE0_EENS0_10_Iter_predIT_EES6_>
 80082f8:	4622      	mov	r2, r4
 80082fa:	68b9      	ldr	r1, [r7, #8]
 80082fc:	68f8      	ldr	r0, [r7, #12]
 80082fe:	f000 feab 	bl	8009058 <_ZSt13__find_if_notIPbN9__gnu_cxx5__ops10_Iter_predIZN3jlb10Controller15lateral_controlEvEUlbE0_EEET_S8_S8_T0_>
 8008302:	4603      	mov	r3, r0
    }
 8008304:	4618      	mov	r0, r3
 8008306:	3714      	adds	r7, #20
 8008308:	46bd      	mov	sp, r7
 800830a:	bd90      	pop	{r4, r7, pc}

0800830c <_ZN9__gnu_cxx14__alloc_traitsISaIfEfE17_S_select_on_copyERKS1_>:
    static constexpr _Alloc _S_select_on_copy(const _Alloc& __a)
 800830c:	b580      	push	{r7, lr}
 800830e:	b082      	sub	sp, #8
 8008310:	af00      	add	r7, sp, #0
 8008312:	6078      	str	r0, [r7, #4]
 8008314:	6039      	str	r1, [r7, #0]
    { return _Base_type::select_on_container_copy_construction(__a); }
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	6839      	ldr	r1, [r7, #0]
 800831a:	4618      	mov	r0, r3
 800831c:	f000 feb6 	bl	800908c <_ZNSt16allocator_traitsISaIfEE37select_on_container_copy_constructionERKS0_>
 8008320:	6878      	ldr	r0, [r7, #4]
 8008322:	3708      	adds	r7, #8
 8008324:	46bd      	mov	sp, r7
 8008326:	bd80      	pop	{r7, pc}

08008328 <_ZNKSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 8008328:	b480      	push	{r7}
 800832a:	b083      	sub	sp, #12
 800832c:	af00      	add	r7, sp, #0
 800832e:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	4618      	mov	r0, r3
 8008334:	370c      	adds	r7, #12
 8008336:	46bd      	mov	sp, r7
 8008338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800833c:	4770      	bx	lr

0800833e <_ZNSt12_Vector_baseIfSaIfEEC1EjRKS0_>:
      _Vector_base(size_t __n, const allocator_type& __a)
 800833e:	b580      	push	{r7, lr}
 8008340:	b084      	sub	sp, #16
 8008342:	af00      	add	r7, sp, #0
 8008344:	60f8      	str	r0, [r7, #12]
 8008346:	60b9      	str	r1, [r7, #8]
 8008348:	607a      	str	r2, [r7, #4]
      : _M_impl(__a)
 800834a:	68fb      	ldr	r3, [r7, #12]
 800834c:	6879      	ldr	r1, [r7, #4]
 800834e:	4618      	mov	r0, r3
 8008350:	f000 fea9 	bl	80090a6 <_ZNSt12_Vector_baseIfSaIfEE12_Vector_implC1ERKS0_>
      { _M_create_storage(__n); }
 8008354:	68b9      	ldr	r1, [r7, #8]
 8008356:	68f8      	ldr	r0, [r7, #12]
 8008358:	f000 feb7 	bl	80090ca <_ZNSt12_Vector_baseIfSaIfEE17_M_create_storageEj>
 800835c:	68fb      	ldr	r3, [r7, #12]
 800835e:	4618      	mov	r0, r3
 8008360:	3710      	adds	r7, #16
 8008362:	46bd      	mov	sp, r7
 8008364:	bd80      	pop	{r7, pc}

08008366 <_ZNKSt6vectorIfSaIfEE5beginEv>:
      begin() const _GLIBCXX_NOEXCEPT
 8008366:	b580      	push	{r7, lr}
 8008368:	b084      	sub	sp, #16
 800836a:	af00      	add	r7, sp, #0
 800836c:	6078      	str	r0, [r7, #4]
      { return const_iterator(this->_M_impl._M_start); }
 800836e:	687a      	ldr	r2, [r7, #4]
 8008370:	f107 030c 	add.w	r3, r7, #12
 8008374:	4611      	mov	r1, r2
 8008376:	4618      	mov	r0, r3
 8008378:	f000 fec2 	bl	8009100 <_ZN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEC1ERKS2_>
 800837c:	68fb      	ldr	r3, [r7, #12]
 800837e:	4618      	mov	r0, r3
 8008380:	3710      	adds	r7, #16
 8008382:	46bd      	mov	sp, r7
 8008384:	bd80      	pop	{r7, pc}

08008386 <_ZNKSt6vectorIfSaIfEE3endEv>:
      end() const _GLIBCXX_NOEXCEPT
 8008386:	b580      	push	{r7, lr}
 8008388:	b084      	sub	sp, #16
 800838a:	af00      	add	r7, sp, #0
 800838c:	6078      	str	r0, [r7, #4]
      { return const_iterator(this->_M_impl._M_finish); }
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	1d1a      	adds	r2, r3, #4
 8008392:	f107 030c 	add.w	r3, r7, #12
 8008396:	4611      	mov	r1, r2
 8008398:	4618      	mov	r0, r3
 800839a:	f000 feb1 	bl	8009100 <_ZN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEC1ERKS2_>
 800839e:	68fb      	ldr	r3, [r7, #12]
 80083a0:	4618      	mov	r0, r3
 80083a2:	3710      	adds	r7, #16
 80083a4:	46bd      	mov	sp, r7
 80083a6:	bd80      	pop	{r7, pc}

080083a8 <_ZSt22__uninitialized_copy_aIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEEPffET0_T_SA_S9_RSaIT1_E>:
	}
    }

  template<typename _InputIterator, typename _ForwardIterator, typename _Tp>
    inline _ForwardIterator
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 80083a8:	b580      	push	{r7, lr}
 80083aa:	b084      	sub	sp, #16
 80083ac:	af00      	add	r7, sp, #0
 80083ae:	60f8      	str	r0, [r7, #12]
 80083b0:	60b9      	str	r1, [r7, #8]
 80083b2:	607a      	str	r2, [r7, #4]
 80083b4:	603b      	str	r3, [r7, #0]
			   _ForwardIterator __result, allocator<_Tp>&)
    { return std::uninitialized_copy(__first, __last, __result); }
 80083b6:	687a      	ldr	r2, [r7, #4]
 80083b8:	68b9      	ldr	r1, [r7, #8]
 80083ba:	68f8      	ldr	r0, [r7, #12]
 80083bc:	f000 feb0 	bl	8009120 <_ZSt18uninitialized_copyIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEEPfET0_T_SA_S9_>
 80083c0:	4603      	mov	r3, r0
 80083c2:	4618      	mov	r0, r3
 80083c4:	3710      	adds	r7, #16
 80083c6:	46bd      	mov	sp, r7
 80083c8:	bd80      	pop	{r7, pc}

080083ca <_ZNSt6vectorIfSaIfEE5clearEv>:
       *  elements, and that if the elements themselves are pointers, the
       *  pointed-to memory is not touched in any way.  Managing the pointer is
       *  the user's responsibility.
       */
      void
      clear() _GLIBCXX_NOEXCEPT
 80083ca:	b580      	push	{r7, lr}
 80083cc:	b082      	sub	sp, #8
 80083ce:	af00      	add	r7, sp, #0
 80083d0:	6078      	str	r0, [r7, #4]
      { _M_erase_at_end(this->_M_impl._M_start); }
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	4619      	mov	r1, r3
 80083d8:	6878      	ldr	r0, [r7, #4]
 80083da:	f000 feb3 	bl	8009144 <_ZNSt6vectorIfSaIfEE15_M_erase_at_endEPf>
 80083de:	bf00      	nop
 80083e0:	3708      	adds	r7, #8
 80083e2:	46bd      	mov	sp, r7
 80083e4:	bd80      	pop	{r7, pc}

080083e6 <_ZSt15__alloc_on_copyISaIfEEvRT_RKS1_>:
    __alloc_on_copy(_Alloc& __one, const _Alloc& __two)
 80083e6:	b480      	push	{r7}
 80083e8:	b083      	sub	sp, #12
 80083ea:	af00      	add	r7, sp, #0
 80083ec:	6078      	str	r0, [r7, #4]
 80083ee:	6039      	str	r1, [r7, #0]
    }
 80083f0:	bf00      	nop
 80083f2:	370c      	adds	r7, #12
 80083f4:	46bd      	mov	sp, r7
 80083f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083fa:	4770      	bx	lr

080083fc <_ZNKSt6vectorIfSaIfEE8capacityEv>:
      capacity() const _GLIBCXX_NOEXCEPT
 80083fc:	b480      	push	{r7}
 80083fe:	b083      	sub	sp, #12
 8008400:	af00      	add	r7, sp, #0
 8008402:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_end_of_storage
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	689a      	ldr	r2, [r3, #8]
			 - this->_M_impl._M_start); }
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	1ad3      	subs	r3, r2, r3
 800840e:	109b      	asrs	r3, r3, #2
 8008410:	4618      	mov	r0, r3
 8008412:	370c      	adds	r7, #12
 8008414:	46bd      	mov	sp, r7
 8008416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800841a:	4770      	bx	lr

0800841c <_ZNSt6vectorIfSaIfEE20_M_allocate_and_copyIN9__gnu_cxx17__normal_iteratorIPKfS1_EEEEPfjT_S9_>:
       *  Memory expansion handler.  Uses the member allocation function to
       *  obtain @a n bytes of memory, and then copies [first,last) into it.
       */
      template<typename _ForwardIterator>
	pointer
	_M_allocate_and_copy(size_type __n,
 800841c:	b580      	push	{r7, lr}
 800841e:	b086      	sub	sp, #24
 8008420:	af00      	add	r7, sp, #0
 8008422:	60f8      	str	r0, [r7, #12]
 8008424:	60b9      	str	r1, [r7, #8]
 8008426:	607a      	str	r2, [r7, #4]
 8008428:	603b      	str	r3, [r7, #0]
			     _ForwardIterator __first, _ForwardIterator __last)
	{
	  pointer __result = this->_M_allocate(__n);
 800842a:	68fb      	ldr	r3, [r7, #12]
 800842c:	68b9      	ldr	r1, [r7, #8]
 800842e:	4618      	mov	r0, r3
 8008430:	f000 fea9 	bl	8009186 <_ZNSt12_Vector_baseIfSaIfEE11_M_allocateEj>
 8008434:	6178      	str	r0, [r7, #20]
	  __try
	    {
	      std::__uninitialized_copy_a(__first, __last, __result,
					  _M_get_Tp_allocator());
 8008436:	68fb      	ldr	r3, [r7, #12]
 8008438:	4618      	mov	r0, r3
 800843a:	f7ff feb0 	bl	800819e <_ZNSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>
 800843e:	4603      	mov	r3, r0
	      std::__uninitialized_copy_a(__first, __last, __result,
 8008440:	697a      	ldr	r2, [r7, #20]
 8008442:	6839      	ldr	r1, [r7, #0]
 8008444:	6878      	ldr	r0, [r7, #4]
 8008446:	f7ff ffaf 	bl	80083a8 <_ZSt22__uninitialized_copy_aIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEEPffET0_T_SA_S9_RSaIT1_E>
	      return __result;
 800844a:	697b      	ldr	r3, [r7, #20]
	  __catch(...)
	    {
	      _M_deallocate(__result, __n);
	      __throw_exception_again;
	    }
	}
 800844c:	4618      	mov	r0, r3
 800844e:	3718      	adds	r7, #24
 8008450:	46bd      	mov	sp, r7
 8008452:	bd80      	pop	{r7, pc}

08008454 <_ZSt4copyIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEENS1_IPfS6_EEET0_T_SB_SA_>:
    copy(_II __first, _II __last, _OI __result)
 8008454:	b590      	push	{r4, r7, lr}
 8008456:	b085      	sub	sp, #20
 8008458:	af00      	add	r7, sp, #0
 800845a:	60f8      	str	r0, [r7, #12]
 800845c:	60b9      	str	r1, [r7, #8]
 800845e:	607a      	str	r2, [r7, #4]
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 8008460:	68f8      	ldr	r0, [r7, #12]
 8008462:	f000 fea4 	bl	80091ae <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEEET_S8_>
 8008466:	4604      	mov	r4, r0
 8008468:	68b8      	ldr	r0, [r7, #8]
 800846a:	f000 fea0 	bl	80091ae <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEEET_S8_>
 800846e:	4603      	mov	r3, r0
 8008470:	687a      	ldr	r2, [r7, #4]
 8008472:	4619      	mov	r1, r3
 8008474:	4620      	mov	r0, r4
 8008476:	f000 fea5 	bl	80091c4 <_ZSt13__copy_move_aILb0EN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEENS1_IPfS6_EEET1_T0_SB_SA_>
 800847a:	4603      	mov	r3, r0
    }
 800847c:	4618      	mov	r0, r3
 800847e:	3714      	adds	r7, #20
 8008480:	46bd      	mov	sp, r7
 8008482:	bd90      	pop	{r4, r7, pc}

08008484 <_ZSt8_DestroyIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEfEvT_S7_RSaIT0_E>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 8008484:	b580      	push	{r7, lr}
 8008486:	b084      	sub	sp, #16
 8008488:	af00      	add	r7, sp, #0
 800848a:	60f8      	str	r0, [r7, #12]
 800848c:	60b9      	str	r1, [r7, #8]
 800848e:	607a      	str	r2, [r7, #4]
      _Destroy(__first, __last);
 8008490:	68b9      	ldr	r1, [r7, #8]
 8008492:	68f8      	ldr	r0, [r7, #12]
 8008494:	f000 feb7 	bl	8009206 <_ZSt8_DestroyIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEEvT_S7_>
    }
 8008498:	bf00      	nop
 800849a:	3710      	adds	r7, #16
 800849c:	46bd      	mov	sp, r7
 800849e:	bd80      	pop	{r7, pc}

080084a0 <_ZSt12__miter_baseIPfET_S1_>:
  // Fallback implementation of the function in bits/stl_iterator.h used to
  // remove the move_iterator wrapper.
  template<typename _Iterator>
    _GLIBCXX20_CONSTEXPR
    inline _Iterator
    __miter_base(_Iterator __it)
 80084a0:	b480      	push	{r7}
 80084a2:	b083      	sub	sp, #12
 80084a4:	af00      	add	r7, sp, #0
 80084a6:	6078      	str	r0, [r7, #4]
    { return __it; }
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	4618      	mov	r0, r3
 80084ac:	370c      	adds	r7, #12
 80084ae:	46bd      	mov	sp, r7
 80084b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084b4:	4770      	bx	lr

080084b6 <_ZSt13__copy_move_aILb0EPfS0_ET1_T0_S2_S1_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 80084b6:	b5b0      	push	{r4, r5, r7, lr}
 80084b8:	b084      	sub	sp, #16
 80084ba:	af00      	add	r7, sp, #0
 80084bc:	60f8      	str	r0, [r7, #12]
 80084be:	60b9      	str	r1, [r7, #8]
 80084c0:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 80084c2:	68f8      	ldr	r0, [r7, #12]
 80084c4:	f000 feb5 	bl	8009232 <_ZSt12__niter_baseIPfET_S1_>
 80084c8:	4604      	mov	r4, r0
 80084ca:	68b8      	ldr	r0, [r7, #8]
 80084cc:	f000 feb1 	bl	8009232 <_ZSt12__niter_baseIPfET_S1_>
 80084d0:	4605      	mov	r5, r0
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	4618      	mov	r0, r3
 80084d6:	f000 feac 	bl	8009232 <_ZSt12__niter_baseIPfET_S1_>
 80084da:	4603      	mov	r3, r0
 80084dc:	461a      	mov	r2, r3
 80084de:	4629      	mov	r1, r5
 80084e0:	4620      	mov	r0, r4
 80084e2:	f000 feb1 	bl	8009248 <_ZSt14__copy_move_a1ILb0EPfS0_ET1_T0_S2_S1_>
 80084e6:	4602      	mov	r2, r0
 80084e8:	1d3b      	adds	r3, r7, #4
 80084ea:	4611      	mov	r1, r2
 80084ec:	4618      	mov	r0, r3
 80084ee:	f000 febb 	bl	8009268 <_ZSt12__niter_wrapIPfET_RKS1_S1_>
 80084f2:	4603      	mov	r3, r0
    }
 80084f4:	4618      	mov	r0, r3
 80084f6:	3710      	adds	r7, #16
 80084f8:	46bd      	mov	sp, r7
 80084fa:	bdb0      	pop	{r4, r5, r7, pc}

080084fc <_ZSt22__uninitialized_copy_aIPfS0_fET0_T_S2_S1_RSaIT1_E>:
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 80084fc:	b580      	push	{r7, lr}
 80084fe:	b084      	sub	sp, #16
 8008500:	af00      	add	r7, sp, #0
 8008502:	60f8      	str	r0, [r7, #12]
 8008504:	60b9      	str	r1, [r7, #8]
 8008506:	607a      	str	r2, [r7, #4]
 8008508:	603b      	str	r3, [r7, #0]
    { return std::uninitialized_copy(__first, __last, __result); }
 800850a:	687a      	ldr	r2, [r7, #4]
 800850c:	68b9      	ldr	r1, [r7, #8]
 800850e:	68f8      	ldr	r0, [r7, #12]
 8008510:	f000 feb6 	bl	8009280 <_ZSt18uninitialized_copyIPfS0_ET0_T_S2_S1_>
 8008514:	4603      	mov	r3, r0
 8008516:	4618      	mov	r0, r3
 8008518:	3710      	adds	r7, #16
 800851a:	46bd      	mov	sp, r7
 800851c:	bd80      	pop	{r7, pc}

0800851e <_ZNSaIN3jlb4EdgeEEC1Ev>:
 800851e:	b580      	push	{r7, lr}
 8008520:	b082      	sub	sp, #8
 8008522:	af00      	add	r7, sp, #0
 8008524:	6078      	str	r0, [r7, #4]
 8008526:	6878      	ldr	r0, [r7, #4]
 8008528:	f000 febc 	bl	80092a4 <_ZN9__gnu_cxx13new_allocatorIN3jlb4EdgeEEC1Ev>
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	4618      	mov	r0, r3
 8008530:	3708      	adds	r7, #8
 8008532:	46bd      	mov	sp, r7
 8008534:	bd80      	pop	{r7, pc}

08008536 <_ZNSt12_Vector_baseIN3jlb4EdgeESaIS1_EE17_Vector_impl_dataC1Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
 8008536:	b480      	push	{r7}
 8008538:	b083      	sub	sp, #12
 800853a:	af00      	add	r7, sp, #0
 800853c:	6078      	str	r0, [r7, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	2200      	movs	r2, #0
 8008542:	601a      	str	r2, [r3, #0]
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	2200      	movs	r2, #0
 8008548:	605a      	str	r2, [r3, #4]
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	2200      	movs	r2, #0
 800854e:	609a      	str	r2, [r3, #8]
	{ }
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	4618      	mov	r0, r3
 8008554:	370c      	adds	r7, #12
 8008556:	46bd      	mov	sp, r7
 8008558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800855c:	4770      	bx	lr

0800855e <_ZNSt12_Vector_baseIN3jlb4EdgeESaIS1_EE13_M_deallocateEPS1_j>:
      _M_deallocate(pointer __p, size_t __n)
 800855e:	b580      	push	{r7, lr}
 8008560:	b084      	sub	sp, #16
 8008562:	af00      	add	r7, sp, #0
 8008564:	60f8      	str	r0, [r7, #12]
 8008566:	60b9      	str	r1, [r7, #8]
 8008568:	607a      	str	r2, [r7, #4]
	if (__p)
 800856a:	68bb      	ldr	r3, [r7, #8]
 800856c:	2b00      	cmp	r3, #0
 800856e:	d005      	beq.n	800857c <_ZNSt12_Vector_baseIN3jlb4EdgeESaIS1_EE13_M_deallocateEPS1_j+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 8008570:	68fb      	ldr	r3, [r7, #12]
 8008572:	687a      	ldr	r2, [r7, #4]
 8008574:	68b9      	ldr	r1, [r7, #8]
 8008576:	4618      	mov	r0, r3
 8008578:	f000 fe9f 	bl	80092ba <_ZNSt16allocator_traitsISaIN3jlb4EdgeEEE10deallocateERS2_PS1_j>
      }
 800857c:	bf00      	nop
 800857e:	3710      	adds	r7, #16
 8008580:	46bd      	mov	sp, r7
 8008582:	bd80      	pop	{r7, pc}

08008584 <_ZNSt12_Vector_baseIN3jlb4EdgeESaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 8008584:	b480      	push	{r7}
 8008586:	b083      	sub	sp, #12
 8008588:	af00      	add	r7, sp, #0
 800858a:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	4618      	mov	r0, r3
 8008590:	370c      	adds	r7, #12
 8008592:	46bd      	mov	sp, r7
 8008594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008598:	4770      	bx	lr

0800859a <_ZSt8_DestroyIPN3jlb4EdgeES1_EvT_S3_RSaIT0_E>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 800859a:	b580      	push	{r7, lr}
 800859c:	b084      	sub	sp, #16
 800859e:	af00      	add	r7, sp, #0
 80085a0:	60f8      	str	r0, [r7, #12]
 80085a2:	60b9      	str	r1, [r7, #8]
 80085a4:	607a      	str	r2, [r7, #4]
      _Destroy(__first, __last);
 80085a6:	68b9      	ldr	r1, [r7, #8]
 80085a8:	68f8      	ldr	r0, [r7, #12]
 80085aa:	f000 fea5 	bl	80092f8 <_ZSt8_DestroyIPN3jlb4EdgeEEvT_S3_>
    }
 80085ae:	bf00      	nop
 80085b0:	3710      	adds	r7, #16
 80085b2:	46bd      	mov	sp, r7
 80085b4:	bd80      	pop	{r7, pc}

080085b6 <_ZN9__gnu_cxx14__alloc_traitsISaIcEcE17_S_select_on_copyERKS1_>:
    static constexpr _Alloc _S_select_on_copy(const _Alloc& __a)
 80085b6:	b580      	push	{r7, lr}
 80085b8:	b082      	sub	sp, #8
 80085ba:	af00      	add	r7, sp, #0
 80085bc:	6078      	str	r0, [r7, #4]
 80085be:	6039      	str	r1, [r7, #0]
    { return _Base_type::select_on_container_copy_construction(__a); }
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	6839      	ldr	r1, [r7, #0]
 80085c4:	4618      	mov	r0, r3
 80085c6:	f000 fead 	bl	8009324 <_ZNSt16allocator_traitsISaIcEE37select_on_container_copy_constructionERKS0_>
 80085ca:	6878      	ldr	r0, [r7, #4]
 80085cc:	3708      	adds	r7, #8
 80085ce:	46bd      	mov	sp, r7
 80085d0:	bd80      	pop	{r7, pc}

080085d2 <_ZNKSt12_Vector_baseIcSaIcEE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 80085d2:	b480      	push	{r7}
 80085d4:	b083      	sub	sp, #12
 80085d6:	af00      	add	r7, sp, #0
 80085d8:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	4618      	mov	r0, r3
 80085de:	370c      	adds	r7, #12
 80085e0:	46bd      	mov	sp, r7
 80085e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085e6:	4770      	bx	lr

080085e8 <_ZNSt12_Vector_baseIcSaIcEEC1EjRKS0_>:
      _Vector_base(size_t __n, const allocator_type& __a)
 80085e8:	b580      	push	{r7, lr}
 80085ea:	b084      	sub	sp, #16
 80085ec:	af00      	add	r7, sp, #0
 80085ee:	60f8      	str	r0, [r7, #12]
 80085f0:	60b9      	str	r1, [r7, #8]
 80085f2:	607a      	str	r2, [r7, #4]
      : _M_impl(__a)
 80085f4:	68fb      	ldr	r3, [r7, #12]
 80085f6:	6879      	ldr	r1, [r7, #4]
 80085f8:	4618      	mov	r0, r3
 80085fa:	f000 fea0 	bl	800933e <_ZNSt12_Vector_baseIcSaIcEE12_Vector_implC1ERKS0_>
      { _M_create_storage(__n); }
 80085fe:	68b9      	ldr	r1, [r7, #8]
 8008600:	68f8      	ldr	r0, [r7, #12]
 8008602:	f000 feae 	bl	8009362 <_ZNSt12_Vector_baseIcSaIcEE17_M_create_storageEj>
 8008606:	68fb      	ldr	r3, [r7, #12]
 8008608:	4618      	mov	r0, r3
 800860a:	3710      	adds	r7, #16
 800860c:	46bd      	mov	sp, r7
 800860e:	bd80      	pop	{r7, pc}

08008610 <_ZNKSt6vectorIcSaIcEE5beginEv>:
      begin() const _GLIBCXX_NOEXCEPT
 8008610:	b580      	push	{r7, lr}
 8008612:	b084      	sub	sp, #16
 8008614:	af00      	add	r7, sp, #0
 8008616:	6078      	str	r0, [r7, #4]
      { return const_iterator(this->_M_impl._M_start); }
 8008618:	687a      	ldr	r2, [r7, #4]
 800861a:	f107 030c 	add.w	r3, r7, #12
 800861e:	4611      	mov	r1, r2
 8008620:	4618      	mov	r0, r3
 8008622:	f000 feb8 	bl	8009396 <_ZN9__gnu_cxx17__normal_iteratorIPKcSt6vectorIcSaIcEEEC1ERKS2_>
 8008626:	68fb      	ldr	r3, [r7, #12]
 8008628:	4618      	mov	r0, r3
 800862a:	3710      	adds	r7, #16
 800862c:	46bd      	mov	sp, r7
 800862e:	bd80      	pop	{r7, pc}

08008630 <_ZNKSt6vectorIcSaIcEE3endEv>:
      end() const _GLIBCXX_NOEXCEPT
 8008630:	b580      	push	{r7, lr}
 8008632:	b084      	sub	sp, #16
 8008634:	af00      	add	r7, sp, #0
 8008636:	6078      	str	r0, [r7, #4]
      { return const_iterator(this->_M_impl._M_finish); }
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	1d1a      	adds	r2, r3, #4
 800863c:	f107 030c 	add.w	r3, r7, #12
 8008640:	4611      	mov	r1, r2
 8008642:	4618      	mov	r0, r3
 8008644:	f000 fea7 	bl	8009396 <_ZN9__gnu_cxx17__normal_iteratorIPKcSt6vectorIcSaIcEEEC1ERKS2_>
 8008648:	68fb      	ldr	r3, [r7, #12]
 800864a:	4618      	mov	r0, r3
 800864c:	3710      	adds	r7, #16
 800864e:	46bd      	mov	sp, r7
 8008650:	bd80      	pop	{r7, pc}

08008652 <_ZNSt12_Vector_baseIcSaIcEE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 8008652:	b480      	push	{r7}
 8008654:	b083      	sub	sp, #12
 8008656:	af00      	add	r7, sp, #0
 8008658:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	4618      	mov	r0, r3
 800865e:	370c      	adds	r7, #12
 8008660:	46bd      	mov	sp, r7
 8008662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008666:	4770      	bx	lr

08008668 <_ZSt22__uninitialized_copy_aIN9__gnu_cxx17__normal_iteratorIPKcSt6vectorIcSaIcEEEEPccET0_T_SA_S9_RSaIT1_E>:
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 8008668:	b580      	push	{r7, lr}
 800866a:	b084      	sub	sp, #16
 800866c:	af00      	add	r7, sp, #0
 800866e:	60f8      	str	r0, [r7, #12]
 8008670:	60b9      	str	r1, [r7, #8]
 8008672:	607a      	str	r2, [r7, #4]
 8008674:	603b      	str	r3, [r7, #0]
    { return std::uninitialized_copy(__first, __last, __result); }
 8008676:	687a      	ldr	r2, [r7, #4]
 8008678:	68b9      	ldr	r1, [r7, #8]
 800867a:	68f8      	ldr	r0, [r7, #12]
 800867c:	f000 fe9b 	bl	80093b6 <_ZSt18uninitialized_copyIN9__gnu_cxx17__normal_iteratorIPKcSt6vectorIcSaIcEEEEPcET0_T_SA_S9_>
 8008680:	4603      	mov	r3, r0
 8008682:	4618      	mov	r0, r3
 8008684:	3710      	adds	r7, #16
 8008686:	46bd      	mov	sp, r7
 8008688:	bd80      	pop	{r7, pc}

0800868a <_ZSt8_DestroyIPccEvT_S1_RSaIT0_E>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 800868a:	b580      	push	{r7, lr}
 800868c:	b084      	sub	sp, #16
 800868e:	af00      	add	r7, sp, #0
 8008690:	60f8      	str	r0, [r7, #12]
 8008692:	60b9      	str	r1, [r7, #8]
 8008694:	607a      	str	r2, [r7, #4]
      _Destroy(__first, __last);
 8008696:	68b9      	ldr	r1, [r7, #8]
 8008698:	68f8      	ldr	r0, [r7, #12]
 800869a:	f000 fe9e 	bl	80093da <_ZSt8_DestroyIPcEvT_S1_>
    }
 800869e:	bf00      	nop
 80086a0:	3710      	adds	r7, #16
 80086a2:	46bd      	mov	sp, r7
 80086a4:	bd80      	pop	{r7, pc}

080086a6 <_ZSt4moveIRN3jlb4EdgeEEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
 80086a6:	b480      	push	{r7}
 80086a8:	b083      	sub	sp, #12
 80086aa:	af00      	add	r7, sp, #0
 80086ac:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	4618      	mov	r0, r3
 80086b2:	370c      	adds	r7, #12
 80086b4:	46bd      	mov	sp, r7
 80086b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ba:	4770      	bx	lr

080086bc <_ZNSt6vectorIN3jlb4EdgeESaIS1_EE12emplace_backIJS1_EEERS1_DpOT_>:
      vector<_Tp, _Alloc>::
 80086bc:	b5b0      	push	{r4, r5, r7, lr}
 80086be:	b082      	sub	sp, #8
 80086c0:	af00      	add	r7, sp, #0
 80086c2:	6078      	str	r0, [r7, #4]
 80086c4:	6039      	str	r1, [r7, #0]
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	685a      	ldr	r2, [r3, #4]
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	689b      	ldr	r3, [r3, #8]
 80086ce:	429a      	cmp	r2, r3
 80086d0:	d012      	beq.n	80086f8 <_ZNSt6vectorIN3jlb4EdgeESaIS1_EE12emplace_backIJS1_EEERS1_DpOT_+0x3c>
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
 80086d2:	687c      	ldr	r4, [r7, #4]
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	685d      	ldr	r5, [r3, #4]
 80086d8:	6838      	ldr	r0, [r7, #0]
 80086da:	f000 fe94 	bl	8009406 <_ZSt7forwardIN3jlb4EdgeEEOT_RNSt16remove_referenceIS2_E4typeE>
 80086de:	4603      	mov	r3, r0
 80086e0:	461a      	mov	r2, r3
 80086e2:	4629      	mov	r1, r5
 80086e4:	4620      	mov	r0, r4
 80086e6:	f000 fef0 	bl	80094ca <_ZNSt16allocator_traitsISaIN3jlb4EdgeEEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>
	    ++this->_M_impl._M_finish;
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	685b      	ldr	r3, [r3, #4]
 80086ee:	f103 0218 	add.w	r2, r3, #24
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	605a      	str	r2, [r3, #4]
 80086f6:	e00c      	b.n	8008712 <_ZNSt6vectorIN3jlb4EdgeESaIS1_EE12emplace_backIJS1_EEERS1_DpOT_+0x56>
	  _M_realloc_insert(end(), std::forward<_Args>(__args)...);
 80086f8:	6878      	ldr	r0, [r7, #4]
 80086fa:	f000 fef8 	bl	80094ee <_ZNSt6vectorIN3jlb4EdgeESaIS1_EE3endEv>
 80086fe:	4604      	mov	r4, r0
 8008700:	6838      	ldr	r0, [r7, #0]
 8008702:	f000 fe80 	bl	8009406 <_ZSt7forwardIN3jlb4EdgeEEOT_RNSt16remove_referenceIS2_E4typeE>
 8008706:	4603      	mov	r3, r0
 8008708:	461a      	mov	r2, r3
 800870a:	4621      	mov	r1, r4
 800870c:	6878      	ldr	r0, [r7, #4]
 800870e:	f000 feff 	bl	8009510 <_ZNSt6vectorIN3jlb4EdgeESaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>
	return back();
 8008712:	6878      	ldr	r0, [r7, #4]
 8008714:	f000 ff86 	bl	8009624 <_ZNSt6vectorIN3jlb4EdgeESaIS1_EE4backEv>
 8008718:	4603      	mov	r3, r0
      }
 800871a:	4618      	mov	r0, r3
 800871c:	3708      	adds	r7, #8
 800871e:	46bd      	mov	sp, r7
 8008720:	bdb0      	pop	{r4, r5, r7, pc}

08008722 <_ZNSaIN3jlb4NodeEEC1Ev>:
 8008722:	b580      	push	{r7, lr}
 8008724:	b082      	sub	sp, #8
 8008726:	af00      	add	r7, sp, #0
 8008728:	6078      	str	r0, [r7, #4]
 800872a:	6878      	ldr	r0, [r7, #4]
 800872c:	f000 ff95 	bl	800965a <_ZN9__gnu_cxx13new_allocatorIN3jlb4NodeEEC1Ev>
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	4618      	mov	r0, r3
 8008734:	3708      	adds	r7, #8
 8008736:	46bd      	mov	sp, r7
 8008738:	bd80      	pop	{r7, pc}

0800873a <_ZNSt12_Vector_baseIN3jlb4NodeESaIS1_EE17_Vector_impl_dataC1Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
 800873a:	b480      	push	{r7}
 800873c:	b083      	sub	sp, #12
 800873e:	af00      	add	r7, sp, #0
 8008740:	6078      	str	r0, [r7, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	2200      	movs	r2, #0
 8008746:	601a      	str	r2, [r3, #0]
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	2200      	movs	r2, #0
 800874c:	605a      	str	r2, [r3, #4]
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	2200      	movs	r2, #0
 8008752:	609a      	str	r2, [r3, #8]
	{ }
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	4618      	mov	r0, r3
 8008758:	370c      	adds	r7, #12
 800875a:	46bd      	mov	sp, r7
 800875c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008760:	4770      	bx	lr

08008762 <_ZNSt12_Vector_baseIN3jlb4NodeESaIS1_EE13_M_deallocateEPS1_j>:
      _M_deallocate(pointer __p, size_t __n)
 8008762:	b580      	push	{r7, lr}
 8008764:	b084      	sub	sp, #16
 8008766:	af00      	add	r7, sp, #0
 8008768:	60f8      	str	r0, [r7, #12]
 800876a:	60b9      	str	r1, [r7, #8]
 800876c:	607a      	str	r2, [r7, #4]
	if (__p)
 800876e:	68bb      	ldr	r3, [r7, #8]
 8008770:	2b00      	cmp	r3, #0
 8008772:	d005      	beq.n	8008780 <_ZNSt12_Vector_baseIN3jlb4NodeESaIS1_EE13_M_deallocateEPS1_j+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 8008774:	68fb      	ldr	r3, [r7, #12]
 8008776:	687a      	ldr	r2, [r7, #4]
 8008778:	68b9      	ldr	r1, [r7, #8]
 800877a:	4618      	mov	r0, r3
 800877c:	f000 ff78 	bl	8009670 <_ZNSt16allocator_traitsISaIN3jlb4NodeEEE10deallocateERS2_PS1_j>
      }
 8008780:	bf00      	nop
 8008782:	3710      	adds	r7, #16
 8008784:	46bd      	mov	sp, r7
 8008786:	bd80      	pop	{r7, pc}

08008788 <_ZNSt12_Vector_baseIN3jlb4NodeESaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 8008788:	b480      	push	{r7}
 800878a:	b083      	sub	sp, #12
 800878c:	af00      	add	r7, sp, #0
 800878e:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	4618      	mov	r0, r3
 8008794:	370c      	adds	r7, #12
 8008796:	46bd      	mov	sp, r7
 8008798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800879c:	4770      	bx	lr

0800879e <_ZSt8_DestroyIPN3jlb4NodeES1_EvT_S3_RSaIT0_E>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 800879e:	b580      	push	{r7, lr}
 80087a0:	b084      	sub	sp, #16
 80087a2:	af00      	add	r7, sp, #0
 80087a4:	60f8      	str	r0, [r7, #12]
 80087a6:	60b9      	str	r1, [r7, #8]
 80087a8:	607a      	str	r2, [r7, #4]
      _Destroy(__first, __last);
 80087aa:	68b9      	ldr	r1, [r7, #8]
 80087ac:	68f8      	ldr	r0, [r7, #12]
 80087ae:	f000 ff7e 	bl	80096ae <_ZSt8_DestroyIPN3jlb4NodeEEvT_S3_>
    }
 80087b2:	bf00      	nop
 80087b4:	3710      	adds	r7, #16
 80087b6:	46bd      	mov	sp, r7
 80087b8:	bd80      	pop	{r7, pc}

080087ba <_ZSt4moveIRN3jlb4NodeEEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
 80087ba:	b480      	push	{r7}
 80087bc:	b083      	sub	sp, #12
 80087be:	af00      	add	r7, sp, #0
 80087c0:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	4618      	mov	r0, r3
 80087c6:	370c      	adds	r7, #12
 80087c8:	46bd      	mov	sp, r7
 80087ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087ce:	4770      	bx	lr

080087d0 <_ZNSt6vectorIN3jlb4NodeESaIS1_EE12emplace_backIJS1_EEERS1_DpOT_>:
      vector<_Tp, _Alloc>::
 80087d0:	b5b0      	push	{r4, r5, r7, lr}
 80087d2:	b082      	sub	sp, #8
 80087d4:	af00      	add	r7, sp, #0
 80087d6:	6078      	str	r0, [r7, #4]
 80087d8:	6039      	str	r1, [r7, #0]
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	685a      	ldr	r2, [r3, #4]
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	689b      	ldr	r3, [r3, #8]
 80087e2:	429a      	cmp	r2, r3
 80087e4:	d012      	beq.n	800880c <_ZNSt6vectorIN3jlb4NodeESaIS1_EE12emplace_backIJS1_EEERS1_DpOT_+0x3c>
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
 80087e6:	687c      	ldr	r4, [r7, #4]
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	685d      	ldr	r5, [r3, #4]
 80087ec:	6838      	ldr	r0, [r7, #0]
 80087ee:	f000 ff74 	bl	80096da <_ZSt7forwardIN3jlb4NodeEEOT_RNSt16remove_referenceIS2_E4typeE>
 80087f2:	4603      	mov	r3, r0
 80087f4:	461a      	mov	r2, r3
 80087f6:	4629      	mov	r1, r5
 80087f8:	4620      	mov	r0, r4
 80087fa:	f000 ffb0 	bl	800975e <_ZNSt16allocator_traitsISaIN3jlb4NodeEEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>
	    ++this->_M_impl._M_finish;
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	685b      	ldr	r3, [r3, #4]
 8008802:	f103 0218 	add.w	r2, r3, #24
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	605a      	str	r2, [r3, #4]
 800880a:	e00c      	b.n	8008826 <_ZNSt6vectorIN3jlb4NodeESaIS1_EE12emplace_backIJS1_EEERS1_DpOT_+0x56>
	  _M_realloc_insert(end(), std::forward<_Args>(__args)...);
 800880c:	6878      	ldr	r0, [r7, #4]
 800880e:	f000 ffb8 	bl	8009782 <_ZNSt6vectorIN3jlb4NodeESaIS1_EE3endEv>
 8008812:	4604      	mov	r4, r0
 8008814:	6838      	ldr	r0, [r7, #0]
 8008816:	f000 ff60 	bl	80096da <_ZSt7forwardIN3jlb4NodeEEOT_RNSt16remove_referenceIS2_E4typeE>
 800881a:	4603      	mov	r3, r0
 800881c:	461a      	mov	r2, r3
 800881e:	4621      	mov	r1, r4
 8008820:	6878      	ldr	r0, [r7, #4]
 8008822:	f000 ffbf 	bl	80097a4 <_ZNSt6vectorIN3jlb4NodeESaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>
	return back();
 8008826:	6878      	ldr	r0, [r7, #4]
 8008828:	f001 f850 	bl	80098cc <_ZNSt6vectorIN3jlb4NodeESaIS1_EE4backEv>
 800882c:	4603      	mov	r3, r0
      }
 800882e:	4618      	mov	r0, r3
 8008830:	3708      	adds	r7, #8
 8008832:	46bd      	mov	sp, r7
 8008834:	bdb0      	pop	{r4, r5, r7, pc}

08008836 <_ZNSt12_Vector_baseIcSaIcEEC1ERKS0_>:
      _Vector_base(const allocator_type& __a) _GLIBCXX_NOEXCEPT
 8008836:	b580      	push	{r7, lr}
 8008838:	b082      	sub	sp, #8
 800883a:	af00      	add	r7, sp, #0
 800883c:	6078      	str	r0, [r7, #4]
 800883e:	6039      	str	r1, [r7, #0]
      : _M_impl(__a) { }
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	6839      	ldr	r1, [r7, #0]
 8008844:	4618      	mov	r0, r3
 8008846:	f000 fd7a 	bl	800933e <_ZNSt12_Vector_baseIcSaIcEE12_Vector_implC1ERKS0_>
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	4618      	mov	r0, r3
 800884e:	3708      	adds	r7, #8
 8008850:	46bd      	mov	sp, r7
 8008852:	bd80      	pop	{r7, pc}

08008854 <_ZNKSt16initializer_listIcE5beginEv>:
      begin() const noexcept { return _M_array; }
 8008854:	b480      	push	{r7}
 8008856:	b083      	sub	sp, #12
 8008858:	af00      	add	r7, sp, #0
 800885a:	6078      	str	r0, [r7, #4]
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	681b      	ldr	r3, [r3, #0]
 8008860:	4618      	mov	r0, r3
 8008862:	370c      	adds	r7, #12
 8008864:	46bd      	mov	sp, r7
 8008866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800886a:	4770      	bx	lr

0800886c <_ZNKSt16initializer_listIcE3endEv>:
      end() const noexcept { return begin() + size(); }
 800886c:	b590      	push	{r4, r7, lr}
 800886e:	b083      	sub	sp, #12
 8008870:	af00      	add	r7, sp, #0
 8008872:	6078      	str	r0, [r7, #4]
 8008874:	6878      	ldr	r0, [r7, #4]
 8008876:	f7ff ffed 	bl	8008854 <_ZNKSt16initializer_listIcE5beginEv>
 800887a:	4604      	mov	r4, r0
 800887c:	6878      	ldr	r0, [r7, #4]
 800887e:	f001 f840 	bl	8009902 <_ZNKSt16initializer_listIcE4sizeEv>
 8008882:	4603      	mov	r3, r0
 8008884:	4423      	add	r3, r4
 8008886:	4618      	mov	r0, r3
 8008888:	370c      	adds	r7, #12
 800888a:	46bd      	mov	sp, r7
 800888c:	bd90      	pop	{r4, r7, pc}

0800888e <_ZSt8distanceIPKcENSt15iterator_traitsIT_E15difference_typeES3_S3_>:
   *  and are constant time.  For other %iterator classes they are linear time.
  */
  template<typename _InputIterator>
    inline _GLIBCXX17_CONSTEXPR
    typename iterator_traits<_InputIterator>::difference_type
    distance(_InputIterator __first, _InputIterator __last)
 800888e:	b5b0      	push	{r4, r5, r7, lr}
 8008890:	b082      	sub	sp, #8
 8008892:	af00      	add	r7, sp, #0
 8008894:	6078      	str	r0, [r7, #4]
 8008896:	6039      	str	r1, [r7, #0]
    {
      // concept requirements -- taken care of in __distance
      return std::__distance(__first, __last,
 8008898:	687c      	ldr	r4, [r7, #4]
			     std::__iterator_category(__first));
 800889a:	1d3b      	adds	r3, r7, #4
 800889c:	4618      	mov	r0, r3
 800889e:	f001 f83c 	bl	800991a <_ZSt19__iterator_categoryIPKcENSt15iterator_traitsIT_E17iterator_categoryERKS3_>
      return std::__distance(__first, __last,
 80088a2:	462a      	mov	r2, r5
 80088a4:	6839      	ldr	r1, [r7, #0]
 80088a6:	4620      	mov	r0, r4
 80088a8:	f001 f841 	bl	800992e <_ZSt10__distanceIPKcENSt15iterator_traitsIT_E15difference_typeES3_S3_St26random_access_iterator_tag>
 80088ac:	4603      	mov	r3, r0
    }
 80088ae:	4618      	mov	r0, r3
 80088b0:	3708      	adds	r7, #8
 80088b2:	46bd      	mov	sp, r7
 80088b4:	bdb0      	pop	{r4, r5, r7, pc}

080088b6 <_ZNSt6vectorIcSaIcEE19_M_range_initializeIPKcEEvT_S5_St20forward_iterator_tag>:
	}

      // Called by the second initialize_dispatch above
      template<typename _ForwardIterator>
	void
	_M_range_initialize(_ForwardIterator __first, _ForwardIterator __last,
 80088b6:	b590      	push	{r4, r7, lr}
 80088b8:	b087      	sub	sp, #28
 80088ba:	af00      	add	r7, sp, #0
 80088bc:	60f8      	str	r0, [r7, #12]
 80088be:	60b9      	str	r1, [r7, #8]
 80088c0:	607a      	str	r2, [r7, #4]
 80088c2:	703b      	strb	r3, [r7, #0]
			    std::forward_iterator_tag)
	{
	  const size_type __n = std::distance(__first, __last);
 80088c4:	6879      	ldr	r1, [r7, #4]
 80088c6:	68b8      	ldr	r0, [r7, #8]
 80088c8:	f7ff ffe1 	bl	800888e <_ZSt8distanceIPKcENSt15iterator_traitsIT_E15difference_typeES3_S3_>
 80088cc:	4603      	mov	r3, r0
 80088ce:	617b      	str	r3, [r7, #20]
	  this->_M_impl._M_start
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
 80088d0:	68fc      	ldr	r4, [r7, #12]
 80088d2:	68fb      	ldr	r3, [r7, #12]
 80088d4:	4618      	mov	r0, r3
 80088d6:	f7ff febc 	bl	8008652 <_ZNSt12_Vector_baseIcSaIcEE19_M_get_Tp_allocatorEv>
 80088da:	4603      	mov	r3, r0
 80088dc:	4619      	mov	r1, r3
 80088de:	6978      	ldr	r0, [r7, #20]
 80088e0:	f001 f834 	bl	800994c <_ZNSt6vectorIcSaIcEE17_S_check_init_lenEjRKS0_>
 80088e4:	4603      	mov	r3, r0
 80088e6:	4619      	mov	r1, r3
 80088e8:	4620      	mov	r0, r4
 80088ea:	f001 f857 	bl	800999c <_ZNSt12_Vector_baseIcSaIcEE11_M_allocateEj>
 80088ee:	4602      	mov	r2, r0
 80088f0:	68fb      	ldr	r3, [r7, #12]
 80088f2:	601a      	str	r2, [r3, #0]
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 80088f4:	68fb      	ldr	r3, [r7, #12]
 80088f6:	681a      	ldr	r2, [r3, #0]
 80088f8:	697b      	ldr	r3, [r7, #20]
 80088fa:	441a      	add	r2, r3
 80088fc:	68fb      	ldr	r3, [r7, #12]
 80088fe:	609a      	str	r2, [r3, #8]
	  this->_M_impl._M_finish =
	    std::__uninitialized_copy_a(__first, __last,
 8008900:	68fb      	ldr	r3, [r7, #12]
 8008902:	681c      	ldr	r4, [r3, #0]
					this->_M_impl._M_start,
					_M_get_Tp_allocator());
 8008904:	68fb      	ldr	r3, [r7, #12]
 8008906:	4618      	mov	r0, r3
 8008908:	f7ff fea3 	bl	8008652 <_ZNSt12_Vector_baseIcSaIcEE19_M_get_Tp_allocatorEv>
 800890c:	4603      	mov	r3, r0
	    std::__uninitialized_copy_a(__first, __last,
 800890e:	4622      	mov	r2, r4
 8008910:	6879      	ldr	r1, [r7, #4]
 8008912:	68b8      	ldr	r0, [r7, #8]
 8008914:	f001 f856 	bl	80099c4 <_ZSt22__uninitialized_copy_aIPKcPccET0_T_S4_S3_RSaIT1_E>
 8008918:	4602      	mov	r2, r0
	  this->_M_impl._M_finish =
 800891a:	68fb      	ldr	r3, [r7, #12]
 800891c:	605a      	str	r2, [r3, #4]
	}
 800891e:	bf00      	nop
 8008920:	371c      	adds	r7, #28
 8008922:	46bd      	mov	sp, r7
 8008924:	bd90      	pop	{r4, r7, pc}

08008926 <_ZSt12__miter_baseIPKcET_S2_>:
    __miter_base(_Iterator __it)
 8008926:	b480      	push	{r7}
 8008928:	b083      	sub	sp, #12
 800892a:	af00      	add	r7, sp, #0
 800892c:	6078      	str	r0, [r7, #4]
    { return __it; }
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	4618      	mov	r0, r3
 8008932:	370c      	adds	r7, #12
 8008934:	46bd      	mov	sp, r7
 8008936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800893a:	4770      	bx	lr

0800893c <_ZSt13__copy_move_aILb0EPKcPcET1_T0_S4_S3_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 800893c:	b5b0      	push	{r4, r5, r7, lr}
 800893e:	b084      	sub	sp, #16
 8008940:	af00      	add	r7, sp, #0
 8008942:	60f8      	str	r0, [r7, #12]
 8008944:	60b9      	str	r1, [r7, #8]
 8008946:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 8008948:	68f8      	ldr	r0, [r7, #12]
 800894a:	f001 f84c 	bl	80099e6 <_ZSt12__niter_baseIPKcET_S2_>
 800894e:	4604      	mov	r4, r0
 8008950:	68b8      	ldr	r0, [r7, #8]
 8008952:	f001 f848 	bl	80099e6 <_ZSt12__niter_baseIPKcET_S2_>
 8008956:	4605      	mov	r5, r0
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	4618      	mov	r0, r3
 800895c:	f001 f84e 	bl	80099fc <_ZSt12__niter_baseIPcET_S1_>
 8008960:	4603      	mov	r3, r0
 8008962:	461a      	mov	r2, r3
 8008964:	4629      	mov	r1, r5
 8008966:	4620      	mov	r0, r4
 8008968:	f001 f853 	bl	8009a12 <_ZSt14__copy_move_a1ILb0EPKcPcET1_T0_S4_S3_>
 800896c:	4602      	mov	r2, r0
 800896e:	1d3b      	adds	r3, r7, #4
 8008970:	4611      	mov	r1, r2
 8008972:	4618      	mov	r0, r3
 8008974:	f001 f85d 	bl	8009a32 <_ZSt12__niter_wrapIPcET_RKS1_S1_>
 8008978:	4603      	mov	r3, r0
    }
 800897a:	4618      	mov	r0, r3
 800897c:	3710      	adds	r7, #16
 800897e:	46bd      	mov	sp, r7
 8008980:	bdb0      	pop	{r4, r5, r7, pc}

08008982 <_ZNSt12_Vector_baseIcSaIcEE17_Vector_impl_dataC1Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
 8008982:	b480      	push	{r7}
 8008984:	b083      	sub	sp, #12
 8008986:	af00      	add	r7, sp, #0
 8008988:	6078      	str	r0, [r7, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	2200      	movs	r2, #0
 800898e:	601a      	str	r2, [r3, #0]
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	2200      	movs	r2, #0
 8008994:	605a      	str	r2, [r3, #4]
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	2200      	movs	r2, #0
 800899a:	609a      	str	r2, [r3, #8]
	{ }
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	4618      	mov	r0, r3
 80089a0:	370c      	adds	r7, #12
 80089a2:	46bd      	mov	sp, r7
 80089a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089a8:	4770      	bx	lr

080089aa <_ZNSt12_Vector_baseIcSaIcEE13_M_deallocateEPcj>:
      _M_deallocate(pointer __p, size_t __n)
 80089aa:	b580      	push	{r7, lr}
 80089ac:	b084      	sub	sp, #16
 80089ae:	af00      	add	r7, sp, #0
 80089b0:	60f8      	str	r0, [r7, #12]
 80089b2:	60b9      	str	r1, [r7, #8]
 80089b4:	607a      	str	r2, [r7, #4]
	if (__p)
 80089b6:	68bb      	ldr	r3, [r7, #8]
 80089b8:	2b00      	cmp	r3, #0
 80089ba:	d005      	beq.n	80089c8 <_ZNSt12_Vector_baseIcSaIcEE13_M_deallocateEPcj+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 80089bc:	68fb      	ldr	r3, [r7, #12]
 80089be:	687a      	ldr	r2, [r7, #4]
 80089c0:	68b9      	ldr	r1, [r7, #8]
 80089c2:	4618      	mov	r0, r3
 80089c4:	f001 f841 	bl	8009a4a <_ZNSt16allocator_traitsISaIcEE10deallocateERS0_Pcj>
      }
 80089c8:	bf00      	nop
 80089ca:	3710      	adds	r7, #16
 80089cc:	46bd      	mov	sp, r7
 80089ce:	bd80      	pop	{r7, pc}

080089d0 <_ZN9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEC1ERKS1_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 80089d0:	b480      	push	{r7}
 80089d2:	b083      	sub	sp, #12
 80089d4:	af00      	add	r7, sp, #0
 80089d6:	6078      	str	r0, [r7, #4]
 80089d8:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 80089da:	683b      	ldr	r3, [r7, #0]
 80089dc:	681a      	ldr	r2, [r3, #0]
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	601a      	str	r2, [r3, #0]
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	4618      	mov	r0, r3
 80089e6:	370c      	adds	r7, #12
 80089e8:	46bd      	mov	sp, r7
 80089ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089ee:	4770      	bx	lr

080089f0 <_ZN9__gnu_cxx5__ops17__iter_equals_valIKcEENS0_16_Iter_equals_valIT_EERS4_>:
    };

  template<typename _Value>
    _GLIBCXX20_CONSTEXPR
    inline _Iter_equals_val<_Value>
    __iter_equals_val(_Value& __val)
 80089f0:	b580      	push	{r7, lr}
 80089f2:	b084      	sub	sp, #16
 80089f4:	af00      	add	r7, sp, #0
 80089f6:	6078      	str	r0, [r7, #4]
    { return _Iter_equals_val<_Value>(__val); }
 80089f8:	f107 030c 	add.w	r3, r7, #12
 80089fc:	6879      	ldr	r1, [r7, #4]
 80089fe:	4618      	mov	r0, r3
 8008a00:	f001 f84d 	bl	8009a9e <_ZN9__gnu_cxx5__ops16_Iter_equals_valIKcEC1ERS2_>
 8008a04:	68fb      	ldr	r3, [r7, #12]
 8008a06:	4618      	mov	r0, r3
 8008a08:	3710      	adds	r7, #16
 8008a0a:	46bd      	mov	sp, r7
 8008a0c:	bd80      	pop	{r7, pc}

08008a0e <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEENS0_5__ops16_Iter_equals_valIKcEEET_SB_SB_T0_>:
    }

  template<typename _Iterator, typename _Predicate>
    _GLIBCXX20_CONSTEXPR
    inline _Iterator
    __find_if(_Iterator __first, _Iterator __last, _Predicate __pred)
 8008a0e:	b590      	push	{r4, r7, lr}
 8008a10:	b085      	sub	sp, #20
 8008a12:	af00      	add	r7, sp, #0
 8008a14:	60f8      	str	r0, [r7, #12]
 8008a16:	60b9      	str	r1, [r7, #8]
 8008a18:	607a      	str	r2, [r7, #4]
    {
      return __find_if(__first, __last, __pred,
		       std::__iterator_category(__first));
 8008a1a:	f107 030c 	add.w	r3, r7, #12
 8008a1e:	4618      	mov	r0, r3
 8008a20:	f001 f84c 	bl	8009abc <_ZSt19__iterator_categoryIN9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEEENSt15iterator_traitsIT_E17iterator_categoryERKS8_>
      return __find_if(__first, __last, __pred,
 8008a24:	4623      	mov	r3, r4
 8008a26:	687a      	ldr	r2, [r7, #4]
 8008a28:	68b9      	ldr	r1, [r7, #8]
 8008a2a:	68f8      	ldr	r0, [r7, #12]
 8008a2c:	f001 f897 	bl	8009b5e <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEENS0_5__ops16_Iter_equals_valIKcEEET_SB_SB_T0_St26random_access_iterator_tag>
 8008a30:	4603      	mov	r3, r0
    }
 8008a32:	4618      	mov	r0, r3
 8008a34:	3714      	adds	r7, #20
 8008a36:	46bd      	mov	sp, r7
 8008a38:	bd90      	pop	{r4, r7, pc}
	...

08008a3c <_ZNSt6vectorIfSaIfEE17_M_realloc_insertIJRKfEEEvN9__gnu_cxx17__normal_iteratorIPfS1_EEDpOT_>:

#if __cplusplus >= 201103L
  template<typename _Tp, typename _Alloc>
    template<typename... _Args>
      void
      vector<_Tp, _Alloc>::
 8008a3c:	b5b0      	push	{r4, r5, r7, lr}
 8008a3e:	b08c      	sub	sp, #48	; 0x30
 8008a40:	af00      	add	r7, sp, #0
 8008a42:	60f8      	str	r0, [r7, #12]
 8008a44:	60b9      	str	r1, [r7, #8]
 8008a46:	607a      	str	r2, [r7, #4]
    vector<_Tp, _Alloc>::
    _M_realloc_insert(iterator __position, const _Tp& __x)
#endif
    {
      const size_type __len =
	_M_check_len(size_type(1), "vector::_M_realloc_insert");
 8008a48:	4a39      	ldr	r2, [pc, #228]	; (8008b30 <_ZNSt6vectorIfSaIfEE17_M_realloc_insertIJRKfEEEvN9__gnu_cxx17__normal_iteratorIPfS1_EEDpOT_+0xf4>)
 8008a4a:	2101      	movs	r1, #1
 8008a4c:	68f8      	ldr	r0, [r7, #12]
 8008a4e:	f001 f91f 	bl	8009c90 <_ZNKSt6vectorIfSaIfEE12_M_check_lenEjPKc>
 8008a52:	62f8      	str	r0, [r7, #44]	; 0x2c
      pointer __old_start = this->_M_impl._M_start;
 8008a54:	68fb      	ldr	r3, [r7, #12]
 8008a56:	681b      	ldr	r3, [r3, #0]
 8008a58:	62bb      	str	r3, [r7, #40]	; 0x28
      pointer __old_finish = this->_M_impl._M_finish;
 8008a5a:	68fb      	ldr	r3, [r7, #12]
 8008a5c:	685b      	ldr	r3, [r3, #4]
 8008a5e:	627b      	str	r3, [r7, #36]	; 0x24
      const size_type __elems_before = __position - begin();
 8008a60:	68f8      	ldr	r0, [r7, #12]
 8008a62:	f7fe fd6d 	bl	8007540 <_ZNSt6vectorIfSaIfEE5beginEv>
 8008a66:	4603      	mov	r3, r0
 8008a68:	617b      	str	r3, [r7, #20]
 8008a6a:	f107 0214 	add.w	r2, r7, #20
 8008a6e:	f107 0308 	add.w	r3, r7, #8
 8008a72:	4611      	mov	r1, r2
 8008a74:	4618      	mov	r0, r3
 8008a76:	f7ff fbde 	bl	8008236 <_ZN9__gnu_cxxmiIPfSt6vectorIfSaIfEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS8_SB_>
 8008a7a:	4603      	mov	r3, r0
 8008a7c:	623b      	str	r3, [r7, #32]
      pointer __new_start(this->_M_allocate(__len));
 8008a7e:	68fb      	ldr	r3, [r7, #12]
 8008a80:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008a82:	4618      	mov	r0, r3
 8008a84:	f000 fb7f 	bl	8009186 <_ZNSt12_Vector_baseIfSaIfEE11_M_allocateEj>
 8008a88:	61f8      	str	r0, [r7, #28]
      pointer __new_finish(__new_start);
 8008a8a:	69fb      	ldr	r3, [r7, #28]
 8008a8c:	61bb      	str	r3, [r7, #24]
	  // The order of the three operations is dictated by the C++11
	  // case, where the moves could alter a new element belonging
	  // to the existing vector.  This is an issue only for callers
	  // taking the element by lvalue ref (see last bullet of C++11
	  // [res.on.arguments]).
	  _Alloc_traits::construct(this->_M_impl,
 8008a8e:	68fc      	ldr	r4, [r7, #12]
				   __new_start + __elems_before,
 8008a90:	6a3b      	ldr	r3, [r7, #32]
 8008a92:	009b      	lsls	r3, r3, #2
	  _Alloc_traits::construct(this->_M_impl,
 8008a94:	69fa      	ldr	r2, [r7, #28]
 8008a96:	18d5      	adds	r5, r2, r3
 8008a98:	6878      	ldr	r0, [r7, #4]
 8008a9a:	f000 f942 	bl	8008d22 <_ZSt7forwardIRKfEOT_RNSt16remove_referenceIS2_E4typeE>
 8008a9e:	4603      	mov	r3, r0
 8008aa0:	461a      	mov	r2, r3
 8008aa2:	4629      	mov	r1, r5
 8008aa4:	4620      	mov	r0, r4
 8008aa6:	f7ff fa06 	bl	8007eb6 <_ZNSt16allocator_traitsISaIfEE9constructIfJRKfEEEvRS0_PT_DpOT0_>
#if __cplusplus >= 201103L
				   std::forward<_Args>(__args)...);
#else
				   __x);
#endif
	  __new_finish = pointer();
 8008aaa:	2300      	movs	r3, #0
 8008aac:	61bb      	str	r3, [r7, #24]

#if __cplusplus >= 201103L
	  if _GLIBCXX17_CONSTEXPR (_S_use_relocate())
	    {
	      __new_finish = _S_relocate(__old_start, __position.base(),
 8008aae:	f107 0308 	add.w	r3, r7, #8
 8008ab2:	4618      	mov	r0, r3
 8008ab4:	f7ff fb9c 	bl	80081f0 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEE4baseEv>
 8008ab8:	4603      	mov	r3, r0
 8008aba:	681c      	ldr	r4, [r3, #0]
					 __new_start, _M_get_Tp_allocator());
 8008abc:	68fb      	ldr	r3, [r7, #12]
 8008abe:	4618      	mov	r0, r3
 8008ac0:	f7ff fb6d 	bl	800819e <_ZNSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>
 8008ac4:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__old_start, __position.base(),
 8008ac6:	69fa      	ldr	r2, [r7, #28]
 8008ac8:	4621      	mov	r1, r4
 8008aca:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008acc:	f001 f927 	bl	8009d1e <_ZNSt6vectorIfSaIfEE11_S_relocateEPfS2_S2_RS0_>
 8008ad0:	61b8      	str	r0, [r7, #24]

	      ++__new_finish;
 8008ad2:	69bb      	ldr	r3, [r7, #24]
 8008ad4:	3304      	adds	r3, #4
 8008ad6:	61bb      	str	r3, [r7, #24]

	      __new_finish = _S_relocate(__position.base(), __old_finish,
 8008ad8:	f107 0308 	add.w	r3, r7, #8
 8008adc:	4618      	mov	r0, r3
 8008ade:	f7ff fb87 	bl	80081f0 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEE4baseEv>
 8008ae2:	4603      	mov	r3, r0
 8008ae4:	681c      	ldr	r4, [r3, #0]
					 __new_finish, _M_get_Tp_allocator());
 8008ae6:	68fb      	ldr	r3, [r7, #12]
 8008ae8:	4618      	mov	r0, r3
 8008aea:	f7ff fb58 	bl	800819e <_ZNSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>
 8008aee:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 8008af0:	69ba      	ldr	r2, [r7, #24]
 8008af2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008af4:	4620      	mov	r0, r4
 8008af6:	f001 f912 	bl	8009d1e <_ZNSt6vectorIfSaIfEE11_S_relocateEPfS2_S2_RS0_>
 8008afa:	61b8      	str	r0, [r7, #24]
#if __cplusplus >= 201103L
      if _GLIBCXX17_CONSTEXPR (!_S_use_relocate())
#endif
	std::_Destroy(__old_start, __old_finish, _M_get_Tp_allocator());
      _GLIBCXX_ASAN_ANNOTATE_REINIT;
      _M_deallocate(__old_start,
 8008afc:	68f8      	ldr	r0, [r7, #12]
		    this->_M_impl._M_end_of_storage - __old_start);
 8008afe:	68fb      	ldr	r3, [r7, #12]
 8008b00:	689a      	ldr	r2, [r3, #8]
 8008b02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b04:	1ad3      	subs	r3, r2, r3
 8008b06:	109b      	asrs	r3, r3, #2
      _M_deallocate(__old_start,
 8008b08:	461a      	mov	r2, r3
 8008b0a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008b0c:	f7ff fb34 	bl	8008178 <_ZNSt12_Vector_baseIfSaIfEE13_M_deallocateEPfj>
      this->_M_impl._M_start = __new_start;
 8008b10:	68fb      	ldr	r3, [r7, #12]
 8008b12:	69fa      	ldr	r2, [r7, #28]
 8008b14:	601a      	str	r2, [r3, #0]
      this->_M_impl._M_finish = __new_finish;
 8008b16:	68fb      	ldr	r3, [r7, #12]
 8008b18:	69ba      	ldr	r2, [r7, #24]
 8008b1a:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 8008b1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b1e:	009b      	lsls	r3, r3, #2
 8008b20:	69fa      	ldr	r2, [r7, #28]
 8008b22:	441a      	add	r2, r3
 8008b24:	68fb      	ldr	r3, [r7, #12]
 8008b26:	609a      	str	r2, [r3, #8]
    }
 8008b28:	bf00      	nop
 8008b2a:	3730      	adds	r7, #48	; 0x30
 8008b2c:	46bd      	mov	sp, r7
 8008b2e:	bdb0      	pop	{r4, r5, r7, pc}
 8008b30:	0801f130 	.word	0x0801f130

08008b34 <_ZSt19__iterator_categoryIPbENSt15iterator_traitsIT_E17iterator_categoryERKS2_>:
   *  sugar for internal library use only.
  */
  template<typename _Iter>
    inline _GLIBCXX_CONSTEXPR
    typename iterator_traits<_Iter>::iterator_category
    __iterator_category(const _Iter&)
 8008b34:	b480      	push	{r7}
 8008b36:	b083      	sub	sp, #12
 8008b38:	af00      	add	r7, sp, #0
 8008b3a:	6078      	str	r0, [r7, #4]
    { return typename iterator_traits<_Iter>::iterator_category(); }
 8008b3c:	4618      	mov	r0, r3
 8008b3e:	370c      	adds	r7, #12
 8008b40:	46bd      	mov	sp, r7
 8008b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b46:	4770      	bx	lr

08008b48 <_ZSt9__reverseIPbEvT_S1_St26random_access_iterator_tag>:
    __reverse(_RandomAccessIterator __first, _RandomAccessIterator __last,
 8008b48:	b580      	push	{r7, lr}
 8008b4a:	b084      	sub	sp, #16
 8008b4c:	af00      	add	r7, sp, #0
 8008b4e:	60f8      	str	r0, [r7, #12]
 8008b50:	60b9      	str	r1, [r7, #8]
 8008b52:	713a      	strb	r2, [r7, #4]
      if (__first == __last)
 8008b54:	68fa      	ldr	r2, [r7, #12]
 8008b56:	68bb      	ldr	r3, [r7, #8]
 8008b58:	429a      	cmp	r2, r3
 8008b5a:	d012      	beq.n	8008b82 <_ZSt9__reverseIPbEvT_S1_St26random_access_iterator_tag+0x3a>
      --__last;
 8008b5c:	68bb      	ldr	r3, [r7, #8]
 8008b5e:	3b01      	subs	r3, #1
 8008b60:	60bb      	str	r3, [r7, #8]
      while (__first < __last)
 8008b62:	e009      	b.n	8008b78 <_ZSt9__reverseIPbEvT_S1_St26random_access_iterator_tag+0x30>
	  std::iter_swap(__first, __last);
 8008b64:	68b9      	ldr	r1, [r7, #8]
 8008b66:	68f8      	ldr	r0, [r7, #12]
 8008b68:	f001 f8ed 	bl	8009d46 <_ZSt9iter_swapIPbS0_EvT_T0_>
	  ++__first;
 8008b6c:	68fb      	ldr	r3, [r7, #12]
 8008b6e:	3301      	adds	r3, #1
 8008b70:	60fb      	str	r3, [r7, #12]
	  --__last;
 8008b72:	68bb      	ldr	r3, [r7, #8]
 8008b74:	3b01      	subs	r3, #1
 8008b76:	60bb      	str	r3, [r7, #8]
      while (__first < __last)
 8008b78:	68fa      	ldr	r2, [r7, #12]
 8008b7a:	68bb      	ldr	r3, [r7, #8]
 8008b7c:	429a      	cmp	r2, r3
 8008b7e:	d3f1      	bcc.n	8008b64 <_ZSt9__reverseIPbEvT_S1_St26random_access_iterator_tag+0x1c>
 8008b80:	e000      	b.n	8008b84 <_ZSt9__reverseIPbEvT_S1_St26random_access_iterator_tag+0x3c>
	return;
 8008b82:	bf00      	nop
    }
 8008b84:	3710      	adds	r7, #16
 8008b86:	46bd      	mov	sp, r7
 8008b88:	bd80      	pop	{r7, pc}

08008b8a <_ZNSt11_Deque_baseIfSaIfEE16_Deque_impl_dataC1Ev>:
	_Deque_impl_data() _GLIBCXX_NOEXCEPT
 8008b8a:	b580      	push	{r7, lr}
 8008b8c:	b082      	sub	sp, #8
 8008b8e:	af00      	add	r7, sp, #0
 8008b90:	6078      	str	r0, [r7, #4]
	: _M_map(), _M_map_size(), _M_start(), _M_finish()
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	2200      	movs	r2, #0
 8008b96:	601a      	str	r2, [r3, #0]
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	2200      	movs	r2, #0
 8008b9c:	605a      	str	r2, [r3, #4]
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	3308      	adds	r3, #8
 8008ba2:	4618      	mov	r0, r3
 8008ba4:	f001 f8dc 	bl	8009d60 <_ZNSt15_Deque_iteratorIfRfPfEC1Ev>
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	3318      	adds	r3, #24
 8008bac:	4618      	mov	r0, r3
 8008bae:	f001 f8d7 	bl	8009d60 <_ZNSt15_Deque_iteratorIfRfPfEC1Ev>
	{ }
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	4618      	mov	r0, r3
 8008bb6:	3708      	adds	r7, #8
 8008bb8:	46bd      	mov	sp, r7
 8008bba:	bd80      	pop	{r7, pc}

08008bbc <_ZSt3maxIjERKT_S2_S2_>:
    max(const _Tp& __a, const _Tp& __b)
 8008bbc:	b480      	push	{r7}
 8008bbe:	b083      	sub	sp, #12
 8008bc0:	af00      	add	r7, sp, #0
 8008bc2:	6078      	str	r0, [r7, #4]
 8008bc4:	6039      	str	r1, [r7, #0]
      if (__a < __b)
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	681a      	ldr	r2, [r3, #0]
 8008bca:	683b      	ldr	r3, [r7, #0]
 8008bcc:	681b      	ldr	r3, [r3, #0]
 8008bce:	429a      	cmp	r2, r3
 8008bd0:	d201      	bcs.n	8008bd6 <_ZSt3maxIjERKT_S2_S2_+0x1a>
	return __b;
 8008bd2:	683b      	ldr	r3, [r7, #0]
 8008bd4:	e000      	b.n	8008bd8 <_ZSt3maxIjERKT_S2_S2_+0x1c>
      return __a;
 8008bd6:	687b      	ldr	r3, [r7, #4]
    }
 8008bd8:	4618      	mov	r0, r3
 8008bda:	370c      	adds	r7, #12
 8008bdc:	46bd      	mov	sp, r7
 8008bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008be2:	4770      	bx	lr

08008be4 <_ZNSt11_Deque_baseIfSaIfEE15_M_allocate_mapEj>:
      _M_allocate_map(size_t __n)
 8008be4:	b590      	push	{r4, r7, lr}
 8008be6:	b085      	sub	sp, #20
 8008be8:	af00      	add	r7, sp, #0
 8008bea:	6078      	str	r0, [r7, #4]
 8008bec:	6039      	str	r1, [r7, #0]
	_Map_alloc_type __map_alloc = _M_get_map_allocator();
 8008bee:	f107 030c 	add.w	r3, r7, #12
 8008bf2:	6879      	ldr	r1, [r7, #4]
 8008bf4:	4618      	mov	r0, r3
 8008bf6:	f000 f859 	bl	8008cac <_ZNKSt11_Deque_baseIfSaIfEE20_M_get_map_allocatorEv>
	return _Map_alloc_traits::allocate(__map_alloc, __n);
 8008bfa:	f107 030c 	add.w	r3, r7, #12
 8008bfe:	6839      	ldr	r1, [r7, #0]
 8008c00:	4618      	mov	r0, r3
 8008c02:	f001 f8c4 	bl	8009d8e <_ZNSt16allocator_traitsISaIPfEE8allocateERS1_j>
 8008c06:	4604      	mov	r4, r0
 8008c08:	bf00      	nop
      }
 8008c0a:	f107 030c 	add.w	r3, r7, #12
 8008c0e:	4618      	mov	r0, r3
 8008c10:	f000 f85d 	bl	8008cce <_ZNSaIPfED1Ev>
	return _Map_alloc_traits::allocate(__map_alloc, __n);
 8008c14:	4623      	mov	r3, r4
      }
 8008c16:	4618      	mov	r0, r3
 8008c18:	3714      	adds	r7, #20
 8008c1a:	46bd      	mov	sp, r7
 8008c1c:	bd90      	pop	{r4, r7, pc}

08008c1e <_ZNSt11_Deque_baseIfSaIfEE15_M_create_nodesEPPfS3_>:
    _Deque_base<_Tp, _Alloc>::
 8008c1e:	b580      	push	{r7, lr}
 8008c20:	b086      	sub	sp, #24
 8008c22:	af00      	add	r7, sp, #0
 8008c24:	60f8      	str	r0, [r7, #12]
 8008c26:	60b9      	str	r1, [r7, #8]
 8008c28:	607a      	str	r2, [r7, #4]
	  for (__cur = __nstart; __cur < __nfinish; ++__cur)
 8008c2a:	68bb      	ldr	r3, [r7, #8]
 8008c2c:	617b      	str	r3, [r7, #20]
 8008c2e:	e008      	b.n	8008c42 <_ZNSt11_Deque_baseIfSaIfEE15_M_create_nodesEPPfS3_+0x24>
	    *__cur = this->_M_allocate_node();
 8008c30:	68f8      	ldr	r0, [r7, #12]
 8008c32:	f000 f8ad 	bl	8008d90 <_ZNSt11_Deque_baseIfSaIfEE16_M_allocate_nodeEv>
 8008c36:	4602      	mov	r2, r0
 8008c38:	697b      	ldr	r3, [r7, #20]
 8008c3a:	601a      	str	r2, [r3, #0]
	  for (__cur = __nstart; __cur < __nfinish; ++__cur)
 8008c3c:	697b      	ldr	r3, [r7, #20]
 8008c3e:	3304      	adds	r3, #4
 8008c40:	617b      	str	r3, [r7, #20]
 8008c42:	697a      	ldr	r2, [r7, #20]
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	429a      	cmp	r2, r3
 8008c48:	d3f2      	bcc.n	8008c30 <_ZNSt11_Deque_baseIfSaIfEE15_M_create_nodesEPPfS3_+0x12>
    }
 8008c4a:	bf00      	nop
 8008c4c:	bf00      	nop
 8008c4e:	3718      	adds	r7, #24
 8008c50:	46bd      	mov	sp, r7
 8008c52:	bd80      	pop	{r7, pc}

08008c54 <_ZNSt15_Deque_iteratorIfRfPfE11_M_set_nodeEPS1_>:
      _M_set_node(_Map_pointer __new_node) _GLIBCXX_NOEXCEPT
 8008c54:	b590      	push	{r4, r7, lr}
 8008c56:	b083      	sub	sp, #12
 8008c58:	af00      	add	r7, sp, #0
 8008c5a:	6078      	str	r0, [r7, #4]
 8008c5c:	6039      	str	r1, [r7, #0]
	_M_node = __new_node;
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	683a      	ldr	r2, [r7, #0]
 8008c62:	60da      	str	r2, [r3, #12]
	_M_first = *__new_node;
 8008c64:	683b      	ldr	r3, [r7, #0]
 8008c66:	681a      	ldr	r2, [r3, #0]
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	605a      	str	r2, [r3, #4]
	_M_last = _M_first + difference_type(_S_buffer_size());
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	685c      	ldr	r4, [r3, #4]
 8008c70:	f000 f8a0 	bl	8008db4 <_ZNSt15_Deque_iteratorIfRfPfE14_S_buffer_sizeEv>
 8008c74:	4603      	mov	r3, r0
 8008c76:	009b      	lsls	r3, r3, #2
 8008c78:	18e2      	adds	r2, r4, r3
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	609a      	str	r2, [r3, #8]
      }
 8008c7e:	bf00      	nop
 8008c80:	370c      	adds	r7, #12
 8008c82:	46bd      	mov	sp, r7
 8008c84:	bd90      	pop	{r4, r7, pc}

08008c86 <_ZNSt11_Deque_baseIfSaIfEE18_M_deallocate_nodeEPf>:
      _M_deallocate_node(_Ptr __p) _GLIBCXX_NOEXCEPT
 8008c86:	b590      	push	{r4, r7, lr}
 8008c88:	b083      	sub	sp, #12
 8008c8a:	af00      	add	r7, sp, #0
 8008c8c:	6078      	str	r0, [r7, #4]
 8008c8e:	6039      	str	r1, [r7, #0]
	_Traits::deallocate(_M_impl, __p, __deque_buf_size(sizeof(_Tp)));
 8008c90:	687c      	ldr	r4, [r7, #4]
 8008c92:	2004      	movs	r0, #4
 8008c94:	f7f9 faec 	bl	8002270 <_ZSt16__deque_buf_sizej>
 8008c98:	4603      	mov	r3, r0
 8008c9a:	461a      	mov	r2, r3
 8008c9c:	6839      	ldr	r1, [r7, #0]
 8008c9e:	4620      	mov	r0, r4
 8008ca0:	f000 f8f6 	bl	8008e90 <_ZNSt16allocator_traitsISaIfEE10deallocateERS0_Pfj>
      }
 8008ca4:	bf00      	nop
 8008ca6:	370c      	adds	r7, #12
 8008ca8:	46bd      	mov	sp, r7
 8008caa:	bd90      	pop	{r4, r7, pc}

08008cac <_ZNKSt11_Deque_baseIfSaIfEE20_M_get_map_allocatorEv>:
      _M_get_map_allocator() const _GLIBCXX_NOEXCEPT
 8008cac:	b580      	push	{r7, lr}
 8008cae:	b082      	sub	sp, #8
 8008cb0:	af00      	add	r7, sp, #0
 8008cb2:	6078      	str	r0, [r7, #4]
 8008cb4:	6039      	str	r1, [r7, #0]
      { return _Map_alloc_type(_M_get_Tp_allocator()); }
 8008cb6:	6838      	ldr	r0, [r7, #0]
 8008cb8:	f001 f889 	bl	8009dce <_ZNKSt11_Deque_baseIfSaIfEE19_M_get_Tp_allocatorEv>
 8008cbc:	4603      	mov	r3, r0
 8008cbe:	4619      	mov	r1, r3
 8008cc0:	6878      	ldr	r0, [r7, #4]
 8008cc2:	f001 f88f 	bl	8009de4 <_ZNSaIPfEC1IfEERKSaIT_E>
 8008cc6:	6878      	ldr	r0, [r7, #4]
 8008cc8:	3708      	adds	r7, #8
 8008cca:	46bd      	mov	sp, r7
 8008ccc:	bd80      	pop	{r7, pc}

08008cce <_ZNSaIPfED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 8008cce:	b480      	push	{r7}
 8008cd0:	b083      	sub	sp, #12
 8008cd2:	af00      	add	r7, sp, #0
 8008cd4:	6078      	str	r0, [r7, #4]
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	4618      	mov	r0, r3
 8008cda:	370c      	adds	r7, #12
 8008cdc:	46bd      	mov	sp, r7
 8008cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ce2:	4770      	bx	lr

08008ce4 <_ZNSt16allocator_traitsISaIPfEE10deallocateERS1_PS0_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8008ce4:	b580      	push	{r7, lr}
 8008ce6:	b088      	sub	sp, #32
 8008ce8:	af00      	add	r7, sp, #0
 8008cea:	60f8      	str	r0, [r7, #12]
 8008cec:	60b9      	str	r1, [r7, #8]
 8008cee:	607a      	str	r2, [r7, #4]
 8008cf0:	68fb      	ldr	r3, [r7, #12]
 8008cf2:	61fb      	str	r3, [r7, #28]
 8008cf4:	68bb      	ldr	r3, [r7, #8]
 8008cf6:	61bb      	str	r3, [r7, #24]
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	617b      	str	r3, [r7, #20]
	if (std::is_constant_evaluated())
 8008cfc:	f7f9 fa66 	bl	80021cc <_ZSt21is_constant_evaluatedv>
 8008d00:	4603      	mov	r3, r0
 8008d02:	2b00      	cmp	r3, #0
 8008d04:	d003      	beq.n	8008d0e <_ZNSt16allocator_traitsISaIPfEE10deallocateERS1_PS0_j+0x2a>
	    ::operator delete(__p);
 8008d06:	69b8      	ldr	r0, [r7, #24]
 8008d08:	f012 fd00 	bl	801b70c <_ZdlPv>
	    return;
 8008d0c:	e005      	b.n	8008d1a <_ZNSt16allocator_traitsISaIPfEE10deallocateERS1_PS0_j+0x36>
	__allocator_base<_Tp>::deallocate(__p, __n);
 8008d0e:	697a      	ldr	r2, [r7, #20]
 8008d10:	69b9      	ldr	r1, [r7, #24]
 8008d12:	69f8      	ldr	r0, [r7, #28]
 8008d14:	f002 f886 	bl	800ae24 <_ZN9__gnu_cxx13new_allocatorIPfE10deallocateEPS1_j>
      { __a.deallocate(__p, __n); }
 8008d18:	bf00      	nop
 8008d1a:	bf00      	nop
 8008d1c:	3720      	adds	r7, #32
 8008d1e:	46bd      	mov	sp, r7
 8008d20:	bd80      	pop	{r7, pc}

08008d22 <_ZSt7forwardIRKfEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8008d22:	b480      	push	{r7}
 8008d24:	b083      	sub	sp, #12
 8008d26:	af00      	add	r7, sp, #0
 8008d28:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	4618      	mov	r0, r3
 8008d2e:	370c      	adds	r7, #12
 8008d30:	46bd      	mov	sp, r7
 8008d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d36:	4770      	bx	lr

08008d38 <_ZNKSt5dequeIfSaIfEE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 8008d38:	b580      	push	{r7, lr}
 8008d3a:	b082      	sub	sp, #8
 8008d3c:	af00      	add	r7, sp, #0
 8008d3e:	6078      	str	r0, [r7, #4]
      { return _S_max_size(_M_get_Tp_allocator()); }
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	4618      	mov	r0, r3
 8008d44:	f001 f843 	bl	8009dce <_ZNKSt11_Deque_baseIfSaIfEE19_M_get_Tp_allocatorEv>
 8008d48:	4603      	mov	r3, r0
 8008d4a:	4618      	mov	r0, r3
 8008d4c:	f001 f863 	bl	8009e16 <_ZNSt5dequeIfSaIfEE11_S_max_sizeERKS0_>
 8008d50:	4603      	mov	r3, r0
 8008d52:	4618      	mov	r0, r3
 8008d54:	3708      	adds	r7, #8
 8008d56:	46bd      	mov	sp, r7
 8008d58:	bd80      	pop	{r7, pc}

08008d5a <_ZNSt5dequeIfSaIfEE22_M_reserve_map_at_backEj>:
       *  Makes sure the _M_map has space for new nodes.  Does not
       *  actually add the nodes.  Can invalidate _M_map pointers.
       *  (And consequently, %deque iterators.)
       */
      void
      _M_reserve_map_at_back(size_type __nodes_to_add = 1)
 8008d5a:	b580      	push	{r7, lr}
 8008d5c:	b082      	sub	sp, #8
 8008d5e:	af00      	add	r7, sp, #0
 8008d60:	6078      	str	r0, [r7, #4]
 8008d62:	6039      	str	r1, [r7, #0]
      {
	if (__nodes_to_add + 1 > this->_M_impl._M_map_size
 8008d64:	683b      	ldr	r3, [r7, #0]
 8008d66:	1c5a      	adds	r2, r3, #1
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	685b      	ldr	r3, [r3, #4]
	    - (this->_M_impl._M_finish._M_node - this->_M_impl._M_map))
 8008d6c:	6879      	ldr	r1, [r7, #4]
 8008d6e:	6a48      	ldr	r0, [r1, #36]	; 0x24
 8008d70:	6879      	ldr	r1, [r7, #4]
 8008d72:	6809      	ldr	r1, [r1, #0]
 8008d74:	1a41      	subs	r1, r0, r1
 8008d76:	1089      	asrs	r1, r1, #2
 8008d78:	1a5b      	subs	r3, r3, r1
	if (__nodes_to_add + 1 > this->_M_impl._M_map_size
 8008d7a:	429a      	cmp	r2, r3
 8008d7c:	d904      	bls.n	8008d88 <_ZNSt5dequeIfSaIfEE22_M_reserve_map_at_backEj+0x2e>
	  _M_reallocate_map(__nodes_to_add, false);
 8008d7e:	2200      	movs	r2, #0
 8008d80:	6839      	ldr	r1, [r7, #0]
 8008d82:	6878      	ldr	r0, [r7, #4]
 8008d84:	f001 f891 	bl	8009eaa <_ZNSt5dequeIfSaIfEE17_M_reallocate_mapEjb>
      }
 8008d88:	bf00      	nop
 8008d8a:	3708      	adds	r7, #8
 8008d8c:	46bd      	mov	sp, r7
 8008d8e:	bd80      	pop	{r7, pc}

08008d90 <_ZNSt11_Deque_baseIfSaIfEE16_M_allocate_nodeEv>:
      _M_allocate_node()
 8008d90:	b590      	push	{r4, r7, lr}
 8008d92:	b083      	sub	sp, #12
 8008d94:	af00      	add	r7, sp, #0
 8008d96:	6078      	str	r0, [r7, #4]
	return _Traits::allocate(_M_impl, __deque_buf_size(sizeof(_Tp)));
 8008d98:	687c      	ldr	r4, [r7, #4]
 8008d9a:	2004      	movs	r0, #4
 8008d9c:	f7f9 fa68 	bl	8002270 <_ZSt16__deque_buf_sizej>
 8008da0:	4603      	mov	r3, r0
 8008da2:	4619      	mov	r1, r3
 8008da4:	4620      	mov	r0, r4
 8008da6:	f001 f91a 	bl	8009fde <_ZNSt16allocator_traitsISaIfEE8allocateERS0_j>
 8008daa:	4603      	mov	r3, r0
      }
 8008dac:	4618      	mov	r0, r3
 8008dae:	370c      	adds	r7, #12
 8008db0:	46bd      	mov	sp, r7
 8008db2:	bd90      	pop	{r4, r7, pc}

08008db4 <_ZNSt15_Deque_iteratorIfRfPfE14_S_buffer_sizeEv>:
      static size_t _S_buffer_size() _GLIBCXX_NOEXCEPT
 8008db4:	b580      	push	{r7, lr}
 8008db6:	af00      	add	r7, sp, #0
      { return __deque_buf_size(sizeof(_Tp)); }
 8008db8:	2004      	movs	r0, #4
 8008dba:	f7f9 fa59 	bl	8002270 <_ZSt16__deque_buf_sizej>
 8008dbe:	4603      	mov	r3, r0
 8008dc0:	4618      	mov	r0, r3
 8008dc2:	bd80      	pop	{r7, pc}

08008dc4 <_ZSt10destroy_atIfEvPT_>:
    destroy_at(_Tp* __location)
 8008dc4:	b480      	push	{r7}
 8008dc6:	b083      	sub	sp, #12
 8008dc8:	af00      	add	r7, sp, #0
 8008dca:	6078      	str	r0, [r7, #4]
    }
 8008dcc:	bf00      	nop
 8008dce:	370c      	adds	r7, #12
 8008dd0:	46bd      	mov	sp, r7
 8008dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dd6:	4770      	bx	lr

08008dd8 <_ZNKSt16initializer_listIfE4sizeEv>:
      size() const noexcept { return _M_len; }
 8008dd8:	b480      	push	{r7}
 8008dda:	b083      	sub	sp, #12
 8008ddc:	af00      	add	r7, sp, #0
 8008dde:	6078      	str	r0, [r7, #4]
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	685b      	ldr	r3, [r3, #4]
 8008de4:	4618      	mov	r0, r3
 8008de6:	370c      	adds	r7, #12
 8008de8:	46bd      	mov	sp, r7
 8008dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dee:	4770      	bx	lr

08008df0 <_ZNK9__gnu_cxx5__ops15_Iter_less_iterclIPKfS4_EEbT_T0_>:
      operator()(_Iterator1 __it1, _Iterator2 __it2) const
 8008df0:	b480      	push	{r7}
 8008df2:	b085      	sub	sp, #20
 8008df4:	af00      	add	r7, sp, #0
 8008df6:	60f8      	str	r0, [r7, #12]
 8008df8:	60b9      	str	r1, [r7, #8]
 8008dfa:	607a      	str	r2, [r7, #4]
      { return *__it1 < *__it2; }
 8008dfc:	68bb      	ldr	r3, [r7, #8]
 8008dfe:	ed93 7a00 	vldr	s14, [r3]
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	edd3 7a00 	vldr	s15, [r3]
 8008e08:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8008e0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008e10:	bf4c      	ite	mi
 8008e12:	2301      	movmi	r3, #1
 8008e14:	2300      	movpl	r3, #0
 8008e16:	b2db      	uxtb	r3, r3
 8008e18:	4618      	mov	r0, r3
 8008e1a:	3714      	adds	r7, #20
 8008e1c:	46bd      	mov	sp, r7
 8008e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e22:	4770      	bx	lr

08008e24 <_ZSt13__min_elementIPKfN9__gnu_cxx5__ops15_Iter_less_iterEET_S5_S5_T0_>:
    __min_element(_ForwardIterator __first, _ForwardIterator __last,
 8008e24:	b580      	push	{r7, lr}
 8008e26:	b086      	sub	sp, #24
 8008e28:	af00      	add	r7, sp, #0
 8008e2a:	60f8      	str	r0, [r7, #12]
 8008e2c:	60b9      	str	r1, [r7, #8]
 8008e2e:	713a      	strb	r2, [r7, #4]
      if (__first == __last)
 8008e30:	68fa      	ldr	r2, [r7, #12]
 8008e32:	68bb      	ldr	r3, [r7, #8]
 8008e34:	429a      	cmp	r2, r3
 8008e36:	d101      	bne.n	8008e3c <_ZSt13__min_elementIPKfN9__gnu_cxx5__ops15_Iter_less_iterEET_S5_S5_T0_+0x18>
	return __first;
 8008e38:	68fb      	ldr	r3, [r7, #12]
 8008e3a:	e01a      	b.n	8008e72 <_ZSt13__min_elementIPKfN9__gnu_cxx5__ops15_Iter_less_iterEET_S5_S5_T0_+0x4e>
      _ForwardIterator __result = __first;
 8008e3c:	68fb      	ldr	r3, [r7, #12]
 8008e3e:	617b      	str	r3, [r7, #20]
      while (++__first != __last)
 8008e40:	e00a      	b.n	8008e58 <_ZSt13__min_elementIPKfN9__gnu_cxx5__ops15_Iter_less_iterEET_S5_S5_T0_+0x34>
	if (__comp(__first, __result))
 8008e42:	1d3b      	adds	r3, r7, #4
 8008e44:	697a      	ldr	r2, [r7, #20]
 8008e46:	68f9      	ldr	r1, [r7, #12]
 8008e48:	4618      	mov	r0, r3
 8008e4a:	f7ff ffd1 	bl	8008df0 <_ZNK9__gnu_cxx5__ops15_Iter_less_iterclIPKfS4_EEbT_T0_>
 8008e4e:	4603      	mov	r3, r0
 8008e50:	2b00      	cmp	r3, #0
 8008e52:	d001      	beq.n	8008e58 <_ZSt13__min_elementIPKfN9__gnu_cxx5__ops15_Iter_less_iterEET_S5_S5_T0_+0x34>
	  __result = __first;
 8008e54:	68fb      	ldr	r3, [r7, #12]
 8008e56:	617b      	str	r3, [r7, #20]
      while (++__first != __last)
 8008e58:	68fb      	ldr	r3, [r7, #12]
 8008e5a:	3304      	adds	r3, #4
 8008e5c:	60fb      	str	r3, [r7, #12]
 8008e5e:	68fa      	ldr	r2, [r7, #12]
 8008e60:	68bb      	ldr	r3, [r7, #8]
 8008e62:	429a      	cmp	r2, r3
 8008e64:	bf14      	ite	ne
 8008e66:	2301      	movne	r3, #1
 8008e68:	2300      	moveq	r3, #0
 8008e6a:	b2db      	uxtb	r3, r3
 8008e6c:	2b00      	cmp	r3, #0
 8008e6e:	d1e8      	bne.n	8008e42 <_ZSt13__min_elementIPKfN9__gnu_cxx5__ops15_Iter_less_iterEET_S5_S5_T0_+0x1e>
      return __result;
 8008e70:	697b      	ldr	r3, [r7, #20]
    }
 8008e72:	4618      	mov	r0, r3
 8008e74:	3718      	adds	r7, #24
 8008e76:	46bd      	mov	sp, r7
 8008e78:	bd80      	pop	{r7, pc}

08008e7a <_ZN9__gnu_cxx13new_allocatorIfEC1Ev>:
      // 2103. propagate_on_container_move_assignment
      typedef std::true_type propagate_on_container_move_assignment;
#endif

      _GLIBCXX20_CONSTEXPR
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8008e7a:	b480      	push	{r7}
 8008e7c:	b083      	sub	sp, #12
 8008e7e:	af00      	add	r7, sp, #0
 8008e80:	6078      	str	r0, [r7, #4]
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	4618      	mov	r0, r3
 8008e86:	370c      	adds	r7, #12
 8008e88:	46bd      	mov	sp, r7
 8008e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e8e:	4770      	bx	lr

08008e90 <_ZNSt16allocator_traitsISaIfEE10deallocateERS0_Pfj>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8008e90:	b580      	push	{r7, lr}
 8008e92:	b088      	sub	sp, #32
 8008e94:	af00      	add	r7, sp, #0
 8008e96:	60f8      	str	r0, [r7, #12]
 8008e98:	60b9      	str	r1, [r7, #8]
 8008e9a:	607a      	str	r2, [r7, #4]
 8008e9c:	68fb      	ldr	r3, [r7, #12]
 8008e9e:	61fb      	str	r3, [r7, #28]
 8008ea0:	68bb      	ldr	r3, [r7, #8]
 8008ea2:	61bb      	str	r3, [r7, #24]
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	617b      	str	r3, [r7, #20]
	if (std::is_constant_evaluated())
 8008ea8:	f7f9 f990 	bl	80021cc <_ZSt21is_constant_evaluatedv>
 8008eac:	4603      	mov	r3, r0
 8008eae:	2b00      	cmp	r3, #0
 8008eb0:	d003      	beq.n	8008eba <_ZNSt16allocator_traitsISaIfEE10deallocateERS0_Pfj+0x2a>
	    ::operator delete(__p);
 8008eb2:	69b8      	ldr	r0, [r7, #24]
 8008eb4:	f012 fc2a 	bl	801b70c <_ZdlPv>
	    return;
 8008eb8:	e005      	b.n	8008ec6 <_ZNSt16allocator_traitsISaIfEE10deallocateERS0_Pfj+0x36>
	__allocator_base<_Tp>::deallocate(__p, __n);
 8008eba:	697a      	ldr	r2, [r7, #20]
 8008ebc:	69b9      	ldr	r1, [r7, #24]
 8008ebe:	69f8      	ldr	r0, [r7, #28]
 8008ec0:	f002 f824 	bl	800af0c <_ZN9__gnu_cxx13new_allocatorIfE10deallocateEPfj>
      { __a.deallocate(__p, __n); }
 8008ec4:	bf00      	nop
 8008ec6:	bf00      	nop
 8008ec8:	3720      	adds	r7, #32
 8008eca:	46bd      	mov	sp, r7
 8008ecc:	bd80      	pop	{r7, pc}

08008ece <_ZSt8_DestroyIPfEvT_S1_>:
   * a trivial destructor, the compiler should optimize all of this
   * away, otherwise the objects' destructors must be invoked.
   */
  template<typename _ForwardIterator>
    _GLIBCXX20_CONSTEXPR inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 8008ece:	b580      	push	{r7, lr}
 8008ed0:	b082      	sub	sp, #8
 8008ed2:	af00      	add	r7, sp, #0
 8008ed4:	6078      	str	r0, [r7, #4]
 8008ed6:	6039      	str	r1, [r7, #0]
      // A deleted destructor is trivial, this ensures we reject such types:
      static_assert(is_destructible<_Value_type>::value,
		    "value type is destructible");
#endif
#if __cplusplus > 201703L && defined __cpp_lib_is_constant_evaluated
      if (std::is_constant_evaluated())
 8008ed8:	f7f9 f978 	bl	80021cc <_ZSt21is_constant_evaluatedv>
 8008edc:	4603      	mov	r3, r0
 8008ede:	2b00      	cmp	r3, #0
 8008ee0:	d004      	beq.n	8008eec <_ZSt8_DestroyIPfEvT_S1_+0x1e>
	return _Destroy_aux<false>::__destroy(__first, __last);
 8008ee2:	6839      	ldr	r1, [r7, #0]
 8008ee4:	6878      	ldr	r0, [r7, #4]
 8008ee6:	f001 f89a 	bl	800a01e <_ZNSt12_Destroy_auxILb0EE9__destroyIPfEEvT_S3_>
 8008eea:	e003      	b.n	8008ef4 <_ZSt8_DestroyIPfEvT_S1_+0x26>
#endif
      std::_Destroy_aux<__has_trivial_destructor(_Value_type)>::
	__destroy(__first, __last);
 8008eec:	6839      	ldr	r1, [r7, #0]
 8008eee:	6878      	ldr	r0, [r7, #4]
 8008ef0:	f001 f8ae 	bl	800a050 <_ZNSt12_Destroy_auxILb1EE9__destroyIPfEEvT_S3_>
    }
 8008ef4:	3708      	adds	r7, #8
 8008ef6:	46bd      	mov	sp, r7
 8008ef8:	bd80      	pop	{r7, pc}

08008efa <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEiNS0_5__ops15_Iter_less_iterEEvT_S9_T0_T1_>:
    __introsort_loop(_RandomAccessIterator __first,
 8008efa:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008efc:	b087      	sub	sp, #28
 8008efe:	af00      	add	r7, sp, #0
 8008f00:	60f8      	str	r0, [r7, #12]
 8008f02:	60b9      	str	r1, [r7, #8]
 8008f04:	607a      	str	r2, [r7, #4]
 8008f06:	703b      	strb	r3, [r7, #0]
      while (__last - __first > int(_S_threshold))
 8008f08:	e01b      	b.n	8008f42 <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEiNS0_5__ops15_Iter_less_iterEEvT_S9_T0_T1_+0x48>
	  if (__depth_limit == 0)
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	2b00      	cmp	r3, #0
 8008f0e:	d106      	bne.n	8008f1e <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEiNS0_5__ops15_Iter_less_iterEEvT_S9_T0_T1_+0x24>
	      std::__partial_sort(__first, __last, __last, __comp);
 8008f10:	4633      	mov	r3, r6
 8008f12:	68ba      	ldr	r2, [r7, #8]
 8008f14:	68b9      	ldr	r1, [r7, #8]
 8008f16:	68f8      	ldr	r0, [r7, #12]
 8008f18:	f001 f8a5 	bl	800a066 <_ZSt14__partial_sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_S9_T0_>
 8008f1c:	e021      	b.n	8008f62 <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEiNS0_5__ops15_Iter_less_iterEEvT_S9_T0_T1_+0x68>
	  --__depth_limit;
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	3b01      	subs	r3, #1
 8008f22:	607b      	str	r3, [r7, #4]
	    std::__unguarded_partition_pivot(__first, __last, __comp);
 8008f24:	462a      	mov	r2, r5
 8008f26:	68b9      	ldr	r1, [r7, #8]
 8008f28:	68f8      	ldr	r0, [r7, #12]
 8008f2a:	f001 f8b3 	bl	800a094 <_ZSt27__unguarded_partition_pivotIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEET_S9_S9_T0_>
 8008f2e:	4603      	mov	r3, r0
 8008f30:	617b      	str	r3, [r7, #20]
	  std::__introsort_loop(__cut, __last, __depth_limit, __comp);
 8008f32:	4623      	mov	r3, r4
 8008f34:	687a      	ldr	r2, [r7, #4]
 8008f36:	68b9      	ldr	r1, [r7, #8]
 8008f38:	6978      	ldr	r0, [r7, #20]
 8008f3a:	f7ff ffde 	bl	8008efa <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEiNS0_5__ops15_Iter_less_iterEEvT_S9_T0_T1_>
	  __last = __cut;
 8008f3e:	697b      	ldr	r3, [r7, #20]
 8008f40:	60bb      	str	r3, [r7, #8]
      while (__last - __first > int(_S_threshold))
 8008f42:	f107 020c 	add.w	r2, r7, #12
 8008f46:	f107 0308 	add.w	r3, r7, #8
 8008f4a:	4611      	mov	r1, r2
 8008f4c:	4618      	mov	r0, r3
 8008f4e:	f7ff f972 	bl	8008236 <_ZN9__gnu_cxxmiIPfSt6vectorIfSaIfEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS8_SB_>
 8008f52:	4603      	mov	r3, r0
 8008f54:	2b10      	cmp	r3, #16
 8008f56:	bfcc      	ite	gt
 8008f58:	2301      	movgt	r3, #1
 8008f5a:	2300      	movle	r3, #0
 8008f5c:	b2db      	uxtb	r3, r3
 8008f5e:	2b00      	cmp	r3, #0
 8008f60:	d1d3      	bne.n	8008f0a <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEiNS0_5__ops15_Iter_less_iterEEvT_S9_T0_T1_+0x10>
    }
 8008f62:	371c      	adds	r7, #28
 8008f64:	46bd      	mov	sp, r7
 8008f66:	bdf0      	pop	{r4, r5, r6, r7, pc}

08008f68 <_ZSt22__final_insertion_sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_T0_>:
    __final_insertion_sort(_RandomAccessIterator __first,
 8008f68:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008f6a:	b085      	sub	sp, #20
 8008f6c:	af00      	add	r7, sp, #0
 8008f6e:	60f8      	str	r0, [r7, #12]
 8008f70:	60b9      	str	r1, [r7, #8]
 8008f72:	713a      	strb	r2, [r7, #4]
      if (__last - __first > int(_S_threshold))
 8008f74:	f107 020c 	add.w	r2, r7, #12
 8008f78:	f107 0308 	add.w	r3, r7, #8
 8008f7c:	4611      	mov	r1, r2
 8008f7e:	4618      	mov	r0, r3
 8008f80:	f7ff f959 	bl	8008236 <_ZN9__gnu_cxxmiIPfSt6vectorIfSaIfEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS8_SB_>
 8008f84:	4603      	mov	r3, r0
 8008f86:	2b10      	cmp	r3, #16
 8008f88:	bfcc      	ite	gt
 8008f8a:	2301      	movgt	r3, #1
 8008f8c:	2300      	movle	r3, #0
 8008f8e:	b2db      	uxtb	r3, r3
 8008f90:	2b00      	cmp	r3, #0
 8008f92:	d018      	beq.n	8008fc6 <_ZSt22__final_insertion_sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_T0_+0x5e>
	  std::__insertion_sort(__first, __first + int(_S_threshold), __comp);
 8008f94:	f107 030c 	add.w	r3, r7, #12
 8008f98:	2110      	movs	r1, #16
 8008f9a:	4618      	mov	r0, r3
 8008f9c:	f001 f8ba 	bl	800a114 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEplEi>
 8008fa0:	4603      	mov	r3, r0
 8008fa2:	4632      	mov	r2, r6
 8008fa4:	4619      	mov	r1, r3
 8008fa6:	68f8      	ldr	r0, [r7, #12]
 8008fa8:	f001 f925 	bl	800a1f6 <_ZSt16__insertion_sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_T0_>
	  std::__unguarded_insertion_sort(__first + int(_S_threshold), __last,
 8008fac:	f107 030c 	add.w	r3, r7, #12
 8008fb0:	2110      	movs	r1, #16
 8008fb2:	4618      	mov	r0, r3
 8008fb4:	f001 f8ae 	bl	800a114 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEplEi>
 8008fb8:	4603      	mov	r3, r0
 8008fba:	462a      	mov	r2, r5
 8008fbc:	68b9      	ldr	r1, [r7, #8]
 8008fbe:	4618      	mov	r0, r3
 8008fc0:	f001 f982 	bl	800a2c8 <_ZSt26__unguarded_insertion_sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_T0_>
    }
 8008fc4:	e004      	b.n	8008fd0 <_ZSt22__final_insertion_sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_T0_+0x68>
	std::__insertion_sort(__first, __last, __comp);
 8008fc6:	4622      	mov	r2, r4
 8008fc8:	68b9      	ldr	r1, [r7, #8]
 8008fca:	68f8      	ldr	r0, [r7, #12]
 8008fcc:	f001 f913 	bl	800a1f6 <_ZSt16__insertion_sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_T0_>
    }
 8008fd0:	bf00      	nop
 8008fd2:	3714      	adds	r7, #20
 8008fd4:	46bd      	mov	sp, r7
 8008fd6:	bdf0      	pop	{r4, r5, r6, r7, pc}

08008fd8 <_ZN9__gnu_cxx5__ops11__pred_iterIZN3jlb10Controller15lateral_controlEvEUlbE_EENS0_10_Iter_predIT_EES6_>:
    };

  template<typename _Predicate>
    _GLIBCXX20_CONSTEXPR
    inline _Iter_pred<_Predicate>
    __pred_iter(_Predicate __pred)
 8008fd8:	b5b0      	push	{r4, r5, r7, lr}
 8008fda:	b084      	sub	sp, #16
 8008fdc:	af00      	add	r7, sp, #0
 8008fde:	7138      	strb	r0, [r7, #4]
    { return _Iter_pred<_Predicate>(_GLIBCXX_MOVE(__pred)); }
 8008fe0:	1d3b      	adds	r3, r7, #4
 8008fe2:	4618      	mov	r0, r3
 8008fe4:	f001 f998 	bl	800a318 <_ZSt4moveIRZN3jlb10Controller15lateral_controlEvEUlbE_EONSt16remove_referenceIT_E4typeEOS5_>
 8008fe8:	f107 030c 	add.w	r3, r7, #12
 8008fec:	4629      	mov	r1, r5
 8008fee:	4618      	mov	r0, r3
 8008ff0:	f001 f99d 	bl	800a32e <_ZN9__gnu_cxx5__ops10_Iter_predIZN3jlb10Controller15lateral_controlEvEUlbE_EC1ES4_>
 8008ff4:	bf00      	nop
 8008ff6:	4620      	mov	r0, r4
 8008ff8:	3710      	adds	r7, #16
 8008ffa:	46bd      	mov	sp, r7
 8008ffc:	bdb0      	pop	{r4, r5, r7, pc}

08008ffe <_ZSt13__find_if_notIPbN9__gnu_cxx5__ops10_Iter_predIZN3jlb10Controller15lateral_controlEvEUlbE_EEET_S8_S8_T0_>:
    __find_if_not(_InputIterator __first, _InputIterator __last,
 8008ffe:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009000:	b085      	sub	sp, #20
 8009002:	af00      	add	r7, sp, #0
 8009004:	60f8      	str	r0, [r7, #12]
 8009006:	60b9      	str	r1, [r7, #8]
 8009008:	713a      	strb	r2, [r7, #4]
      return std::__find_if(__first, __last,
 800900a:	68fc      	ldr	r4, [r7, #12]
 800900c:	7938      	ldrb	r0, [r7, #4]
 800900e:	f001 f99c 	bl	800a34a <_ZN9__gnu_cxx5__ops8__negateIZN3jlb10Controller15lateral_controlEvEUlbE_EENS0_12_Iter_negateIT_EENS0_10_Iter_predIS6_EE>
			    std::__iterator_category(__first));
 8009012:	f107 030c 	add.w	r3, r7, #12
 8009016:	4618      	mov	r0, r3
 8009018:	f7ff fd8c 	bl	8008b34 <_ZSt19__iterator_categoryIPbENSt15iterator_traitsIT_E17iterator_categoryERKS2_>
      return std::__find_if(__first, __last,
 800901c:	4633      	mov	r3, r6
 800901e:	462a      	mov	r2, r5
 8009020:	68b9      	ldr	r1, [r7, #8]
 8009022:	4620      	mov	r0, r4
 8009024:	f001 f9b8 	bl	800a398 <_ZSt9__find_ifIPbN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEvEUlbE_EEET_S8_S8_T0_St26random_access_iterator_tag>
 8009028:	4603      	mov	r3, r0
    }
 800902a:	4618      	mov	r0, r3
 800902c:	3714      	adds	r7, #20
 800902e:	46bd      	mov	sp, r7
 8009030:	bdf0      	pop	{r4, r5, r6, r7, pc}

08009032 <_ZN9__gnu_cxx5__ops11__pred_iterIZN3jlb10Controller15lateral_controlEvEUlbE0_EENS0_10_Iter_predIT_EES6_>:
    __pred_iter(_Predicate __pred)
 8009032:	b5b0      	push	{r4, r5, r7, lr}
 8009034:	b084      	sub	sp, #16
 8009036:	af00      	add	r7, sp, #0
 8009038:	7138      	strb	r0, [r7, #4]
    { return _Iter_pred<_Predicate>(_GLIBCXX_MOVE(__pred)); }
 800903a:	1d3b      	adds	r3, r7, #4
 800903c:	4618      	mov	r0, r3
 800903e:	f001 fa2a 	bl	800a496 <_ZSt4moveIRZN3jlb10Controller15lateral_controlEvEUlbE0_EONSt16remove_referenceIT_E4typeEOS5_>
 8009042:	f107 030c 	add.w	r3, r7, #12
 8009046:	4629      	mov	r1, r5
 8009048:	4618      	mov	r0, r3
 800904a:	f001 fa2f 	bl	800a4ac <_ZN9__gnu_cxx5__ops10_Iter_predIZN3jlb10Controller15lateral_controlEvEUlbE0_EC1ES4_>
 800904e:	bf00      	nop
 8009050:	4620      	mov	r0, r4
 8009052:	3710      	adds	r7, #16
 8009054:	46bd      	mov	sp, r7
 8009056:	bdb0      	pop	{r4, r5, r7, pc}

08009058 <_ZSt13__find_if_notIPbN9__gnu_cxx5__ops10_Iter_predIZN3jlb10Controller15lateral_controlEvEUlbE0_EEET_S8_S8_T0_>:
    __find_if_not(_InputIterator __first, _InputIterator __last,
 8009058:	b5f0      	push	{r4, r5, r6, r7, lr}
 800905a:	b085      	sub	sp, #20
 800905c:	af00      	add	r7, sp, #0
 800905e:	60f8      	str	r0, [r7, #12]
 8009060:	60b9      	str	r1, [r7, #8]
 8009062:	713a      	strb	r2, [r7, #4]
      return std::__find_if(__first, __last,
 8009064:	68fc      	ldr	r4, [r7, #12]
 8009066:	7938      	ldrb	r0, [r7, #4]
 8009068:	f001 fa2e 	bl	800a4c8 <_ZN9__gnu_cxx5__ops8__negateIZN3jlb10Controller15lateral_controlEvEUlbE0_EENS0_12_Iter_negateIT_EENS0_10_Iter_predIS6_EE>
			    std::__iterator_category(__first));
 800906c:	f107 030c 	add.w	r3, r7, #12
 8009070:	4618      	mov	r0, r3
 8009072:	f7ff fd5f 	bl	8008b34 <_ZSt19__iterator_categoryIPbENSt15iterator_traitsIT_E17iterator_categoryERKS2_>
      return std::__find_if(__first, __last,
 8009076:	4633      	mov	r3, r6
 8009078:	462a      	mov	r2, r5
 800907a:	68b9      	ldr	r1, [r7, #8]
 800907c:	4620      	mov	r0, r4
 800907e:	f001 fa4a 	bl	800a516 <_ZSt9__find_ifIPbN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEvEUlbE0_EEET_S8_S8_T0_St26random_access_iterator_tag>
 8009082:	4603      	mov	r3, r0
    }
 8009084:	4618      	mov	r0, r3
 8009086:	3714      	adds	r7, #20
 8009088:	46bd      	mov	sp, r7
 800908a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800908c <_ZNSt16allocator_traitsISaIfEE37select_on_container_copy_constructionERKS0_>:
      select_on_container_copy_construction(const allocator_type& __rhs)
 800908c:	b580      	push	{r7, lr}
 800908e:	b082      	sub	sp, #8
 8009090:	af00      	add	r7, sp, #0
 8009092:	6078      	str	r0, [r7, #4]
 8009094:	6039      	str	r1, [r7, #0]
      { return __rhs; }
 8009096:	6839      	ldr	r1, [r7, #0]
 8009098:	6878      	ldr	r0, [r7, #4]
 800909a:	f001 fabb 	bl	800a614 <_ZNSaIfEC1ERKS_>
 800909e:	6878      	ldr	r0, [r7, #4]
 80090a0:	3708      	adds	r7, #8
 80090a2:	46bd      	mov	sp, r7
 80090a4:	bd80      	pop	{r7, pc}

080090a6 <_ZNSt12_Vector_baseIfSaIfEE12_Vector_implC1ERKS0_>:
	_Vector_impl(_Tp_alloc_type const& __a) _GLIBCXX_NOEXCEPT
 80090a6:	b580      	push	{r7, lr}
 80090a8:	b082      	sub	sp, #8
 80090aa:	af00      	add	r7, sp, #0
 80090ac:	6078      	str	r0, [r7, #4]
 80090ae:	6039      	str	r1, [r7, #0]
	: _Tp_alloc_type(__a)
 80090b0:	6839      	ldr	r1, [r7, #0]
 80090b2:	6878      	ldr	r0, [r7, #4]
 80090b4:	f001 faae 	bl	800a614 <_ZNSaIfEC1ERKS_>
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	4618      	mov	r0, r3
 80090bc:	f7ff f848 	bl	8008150 <_ZNSt12_Vector_baseIfSaIfEE17_Vector_impl_dataC1Ev>
	{ }
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	4618      	mov	r0, r3
 80090c4:	3708      	adds	r7, #8
 80090c6:	46bd      	mov	sp, r7
 80090c8:	bd80      	pop	{r7, pc}

080090ca <_ZNSt12_Vector_baseIfSaIfEE17_M_create_storageEj>:
      _M_create_storage(size_t __n)
 80090ca:	b580      	push	{r7, lr}
 80090cc:	b082      	sub	sp, #8
 80090ce:	af00      	add	r7, sp, #0
 80090d0:	6078      	str	r0, [r7, #4]
 80090d2:	6039      	str	r1, [r7, #0]
	this->_M_impl._M_start = this->_M_allocate(__n);
 80090d4:	6839      	ldr	r1, [r7, #0]
 80090d6:	6878      	ldr	r0, [r7, #4]
 80090d8:	f000 f855 	bl	8009186 <_ZNSt12_Vector_baseIfSaIfEE11_M_allocateEj>
 80090dc:	4602      	mov	r2, r0
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	601a      	str	r2, [r3, #0]
	this->_M_impl._M_finish = this->_M_impl._M_start;
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	681a      	ldr	r2, [r3, #0]
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	605a      	str	r2, [r3, #4]
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	681a      	ldr	r2, [r3, #0]
 80090ee:	683b      	ldr	r3, [r7, #0]
 80090f0:	009b      	lsls	r3, r3, #2
 80090f2:	441a      	add	r2, r3
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	609a      	str	r2, [r3, #8]
      }
 80090f8:	bf00      	nop
 80090fa:	3708      	adds	r7, #8
 80090fc:	46bd      	mov	sp, r7
 80090fe:	bd80      	pop	{r7, pc}

08009100 <_ZN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEC1ERKS2_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 8009100:	b480      	push	{r7}
 8009102:	b083      	sub	sp, #12
 8009104:	af00      	add	r7, sp, #0
 8009106:	6078      	str	r0, [r7, #4]
 8009108:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 800910a:	683b      	ldr	r3, [r7, #0]
 800910c:	681a      	ldr	r2, [r3, #0]
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	601a      	str	r2, [r3, #0]
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	4618      	mov	r0, r3
 8009116:	370c      	adds	r7, #12
 8009118:	46bd      	mov	sp, r7
 800911a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800911e:	4770      	bx	lr

08009120 <_ZSt18uninitialized_copyIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEEPfET0_T_SA_S9_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 8009120:	b580      	push	{r7, lr}
 8009122:	b086      	sub	sp, #24
 8009124:	af00      	add	r7, sp, #0
 8009126:	60f8      	str	r0, [r7, #12]
 8009128:	60b9      	str	r1, [r7, #8]
 800912a:	607a      	str	r2, [r7, #4]
      const bool __assignable = is_assignable<_RefType2, _RefType1>::value;
 800912c:	2301      	movs	r3, #1
 800912e:	75fb      	strb	r3, [r7, #23]
	__uninit_copy(__first, __last, __result);
 8009130:	687a      	ldr	r2, [r7, #4]
 8009132:	68b9      	ldr	r1, [r7, #8]
 8009134:	68f8      	ldr	r0, [r7, #12]
 8009136:	f001 fa7b 	bl	800a630 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEEPfEET0_T_SC_SB_>
 800913a:	4603      	mov	r3, r0
    }
 800913c:	4618      	mov	r0, r3
 800913e:	3718      	adds	r7, #24
 8009140:	46bd      	mov	sp, r7
 8009142:	bd80      	pop	{r7, pc}

08009144 <_ZNSt6vectorIfSaIfEE15_M_erase_at_endEPf>:
      // Internal erase functions follow.

      // Called by erase(q1,q2), clear(), resize(), _M_fill_assign,
      // _M_assign_aux.
      void
      _M_erase_at_end(pointer __pos) _GLIBCXX_NOEXCEPT
 8009144:	b590      	push	{r4, r7, lr}
 8009146:	b085      	sub	sp, #20
 8009148:	af00      	add	r7, sp, #0
 800914a:	6078      	str	r0, [r7, #4]
 800914c:	6039      	str	r1, [r7, #0]
      {
	if (size_type __n = this->_M_impl._M_finish - __pos)
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	685a      	ldr	r2, [r3, #4]
 8009152:	683b      	ldr	r3, [r7, #0]
 8009154:	1ad3      	subs	r3, r2, r3
 8009156:	109b      	asrs	r3, r3, #2
 8009158:	60fb      	str	r3, [r7, #12]
 800915a:	68fb      	ldr	r3, [r7, #12]
 800915c:	2b00      	cmp	r3, #0
 800915e:	d00e      	beq.n	800917e <_ZNSt6vectorIfSaIfEE15_M_erase_at_endEPf+0x3a>
	  {
	    std::_Destroy(__pos, this->_M_impl._M_finish,
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	685c      	ldr	r4, [r3, #4]
			  _M_get_Tp_allocator());
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	4618      	mov	r0, r3
 8009168:	f7ff f819 	bl	800819e <_ZNSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>
 800916c:	4603      	mov	r3, r0
	    std::_Destroy(__pos, this->_M_impl._M_finish,
 800916e:	461a      	mov	r2, r3
 8009170:	4621      	mov	r1, r4
 8009172:	6838      	ldr	r0, [r7, #0]
 8009174:	f7ff f81e 	bl	80081b4 <_ZSt8_DestroyIPffEvT_S1_RSaIT0_E>
	    this->_M_impl._M_finish = __pos;
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	683a      	ldr	r2, [r7, #0]
 800917c:	605a      	str	r2, [r3, #4]
	    _GLIBCXX_ASAN_ANNOTATE_SHRINK(__n);
	  }
      }
 800917e:	bf00      	nop
 8009180:	3714      	adds	r7, #20
 8009182:	46bd      	mov	sp, r7
 8009184:	bd90      	pop	{r4, r7, pc}

08009186 <_ZNSt12_Vector_baseIfSaIfEE11_M_allocateEj>:
      _M_allocate(size_t __n)
 8009186:	b580      	push	{r7, lr}
 8009188:	b082      	sub	sp, #8
 800918a:	af00      	add	r7, sp, #0
 800918c:	6078      	str	r0, [r7, #4]
 800918e:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8009190:	683b      	ldr	r3, [r7, #0]
 8009192:	2b00      	cmp	r3, #0
 8009194:	d006      	beq.n	80091a4 <_ZNSt12_Vector_baseIfSaIfEE11_M_allocateEj+0x1e>
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	6839      	ldr	r1, [r7, #0]
 800919a:	4618      	mov	r0, r3
 800919c:	f000 ff1f 	bl	8009fde <_ZNSt16allocator_traitsISaIfEE8allocateERS0_j>
 80091a0:	4603      	mov	r3, r0
 80091a2:	e000      	b.n	80091a6 <_ZNSt12_Vector_baseIfSaIfEE11_M_allocateEj+0x20>
 80091a4:	2300      	movs	r3, #0
      }
 80091a6:	4618      	mov	r0, r3
 80091a8:	3708      	adds	r7, #8
 80091aa:	46bd      	mov	sp, r7
 80091ac:	bd80      	pop	{r7, pc}

080091ae <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEEET_S8_>:
    __miter_base(_Iterator __it)
 80091ae:	b480      	push	{r7}
 80091b0:	b083      	sub	sp, #12
 80091b2:	af00      	add	r7, sp, #0
 80091b4:	6078      	str	r0, [r7, #4]
    { return __it; }
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	4618      	mov	r0, r3
 80091ba:	370c      	adds	r7, #12
 80091bc:	46bd      	mov	sp, r7
 80091be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091c2:	4770      	bx	lr

080091c4 <_ZSt13__copy_move_aILb0EN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEENS1_IPfS6_EEET1_T0_SB_SA_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 80091c4:	b5b0      	push	{r4, r5, r7, lr}
 80091c6:	b084      	sub	sp, #16
 80091c8:	af00      	add	r7, sp, #0
 80091ca:	60f8      	str	r0, [r7, #12]
 80091cc:	60b9      	str	r1, [r7, #8]
 80091ce:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 80091d0:	68f8      	ldr	r0, [r7, #12]
 80091d2:	f001 fa3d 	bl	800a650 <_ZSt12__niter_baseIPKfSt6vectorIfSaIfEEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>
 80091d6:	4604      	mov	r4, r0
 80091d8:	68b8      	ldr	r0, [r7, #8]
 80091da:	f001 fa39 	bl	800a650 <_ZSt12__niter_baseIPKfSt6vectorIfSaIfEEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>
 80091de:	4605      	mov	r5, r0
 80091e0:	6878      	ldr	r0, [r7, #4]
 80091e2:	f001 fa43 	bl	800a66c <_ZSt12__niter_baseIPfSt6vectorIfSaIfEEET_N9__gnu_cxx17__normal_iteratorIS4_T0_EE>
 80091e6:	4603      	mov	r3, r0
 80091e8:	461a      	mov	r2, r3
 80091ea:	4629      	mov	r1, r5
 80091ec:	4620      	mov	r0, r4
 80091ee:	f001 fa4b 	bl	800a688 <_ZSt14__copy_move_a1ILb0EPKfPfET1_T0_S4_S3_>
 80091f2:	4603      	mov	r3, r0
 80091f4:	4619      	mov	r1, r3
 80091f6:	6878      	ldr	r0, [r7, #4]
 80091f8:	f001 fa56 	bl	800a6a8 <_ZSt12__niter_wrapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEES2_ET_S7_T0_>
 80091fc:	4603      	mov	r3, r0
    }
 80091fe:	4618      	mov	r0, r3
 8009200:	3710      	adds	r7, #16
 8009202:	46bd      	mov	sp, r7
 8009204:	bdb0      	pop	{r4, r5, r7, pc}

08009206 <_ZSt8_DestroyIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEEvT_S7_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 8009206:	b580      	push	{r7, lr}
 8009208:	b082      	sub	sp, #8
 800920a:	af00      	add	r7, sp, #0
 800920c:	6078      	str	r0, [r7, #4]
 800920e:	6039      	str	r1, [r7, #0]
      if (std::is_constant_evaluated())
 8009210:	f7f8 ffdc 	bl	80021cc <_ZSt21is_constant_evaluatedv>
 8009214:	4603      	mov	r3, r0
 8009216:	2b00      	cmp	r3, #0
 8009218:	d004      	beq.n	8009224 <_ZSt8_DestroyIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEEvT_S7_+0x1e>
	return _Destroy_aux<false>::__destroy(__first, __last);
 800921a:	6839      	ldr	r1, [r7, #0]
 800921c:	6878      	ldr	r0, [r7, #4]
 800921e:	f001 fa5a 	bl	800a6d6 <_ZNSt12_Destroy_auxILb0EE9__destroyIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEEEvT_S9_>
 8009222:	e003      	b.n	800922c <_ZSt8_DestroyIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEEvT_S7_+0x26>
	__destroy(__first, __last);
 8009224:	6839      	ldr	r1, [r7, #0]
 8009226:	6878      	ldr	r0, [r7, #4]
 8009228:	f001 fa7c 	bl	800a724 <_ZNSt12_Destroy_auxILb1EE9__destroyIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEEEvT_S9_>
    }
 800922c:	3708      	adds	r7, #8
 800922e:	46bd      	mov	sp, r7
 8009230:	bd80      	pop	{r7, pc}

08009232 <_ZSt12__niter_baseIPfET_S1_>:
    __niter_base(_Iterator __it)
 8009232:	b480      	push	{r7}
 8009234:	b083      	sub	sp, #12
 8009236:	af00      	add	r7, sp, #0
 8009238:	6078      	str	r0, [r7, #4]
    { return __it; }
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	4618      	mov	r0, r3
 800923e:	370c      	adds	r7, #12
 8009240:	46bd      	mov	sp, r7
 8009242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009246:	4770      	bx	lr

08009248 <_ZSt14__copy_move_a1ILb0EPfS0_ET1_T0_S2_S1_>:
    __copy_move_a1(_II __first, _II __last, _OI __result)
 8009248:	b580      	push	{r7, lr}
 800924a:	b084      	sub	sp, #16
 800924c:	af00      	add	r7, sp, #0
 800924e:	60f8      	str	r0, [r7, #12]
 8009250:	60b9      	str	r1, [r7, #8]
 8009252:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_a2<_IsMove>(__first, __last, __result); }
 8009254:	687a      	ldr	r2, [r7, #4]
 8009256:	68b9      	ldr	r1, [r7, #8]
 8009258:	68f8      	ldr	r0, [r7, #12]
 800925a:	f001 fa6e 	bl	800a73a <_ZSt14__copy_move_a2ILb0EPfS0_ET1_T0_S2_S1_>
 800925e:	4603      	mov	r3, r0
 8009260:	4618      	mov	r0, r3
 8009262:	3710      	adds	r7, #16
 8009264:	46bd      	mov	sp, r7
 8009266:	bd80      	pop	{r7, pc}

08009268 <_ZSt12__niter_wrapIPfET_RKS1_S1_>:
    __niter_wrap(const _Iterator&, _Iterator __res)
 8009268:	b480      	push	{r7}
 800926a:	b083      	sub	sp, #12
 800926c:	af00      	add	r7, sp, #0
 800926e:	6078      	str	r0, [r7, #4]
 8009270:	6039      	str	r1, [r7, #0]
    { return __res; }
 8009272:	683b      	ldr	r3, [r7, #0]
 8009274:	4618      	mov	r0, r3
 8009276:	370c      	adds	r7, #12
 8009278:	46bd      	mov	sp, r7
 800927a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800927e:	4770      	bx	lr

08009280 <_ZSt18uninitialized_copyIPfS0_ET0_T_S2_S1_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 8009280:	b580      	push	{r7, lr}
 8009282:	b086      	sub	sp, #24
 8009284:	af00      	add	r7, sp, #0
 8009286:	60f8      	str	r0, [r7, #12]
 8009288:	60b9      	str	r1, [r7, #8]
 800928a:	607a      	str	r2, [r7, #4]
      const bool __assignable = is_assignable<_RefType2, _RefType1>::value;
 800928c:	2301      	movs	r3, #1
 800928e:	75fb      	strb	r3, [r7, #23]
	__uninit_copy(__first, __last, __result);
 8009290:	687a      	ldr	r2, [r7, #4]
 8009292:	68b9      	ldr	r1, [r7, #8]
 8009294:	68f8      	ldr	r0, [r7, #12]
 8009296:	f001 fa6d 	bl	800a774 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIPfS2_EET0_T_S4_S3_>
 800929a:	4603      	mov	r3, r0
    }
 800929c:	4618      	mov	r0, r3
 800929e:	3718      	adds	r7, #24
 80092a0:	46bd      	mov	sp, r7
 80092a2:	bd80      	pop	{r7, pc}

080092a4 <_ZN9__gnu_cxx13new_allocatorIN3jlb4EdgeEEC1Ev>:
 80092a4:	b480      	push	{r7}
 80092a6:	b083      	sub	sp, #12
 80092a8:	af00      	add	r7, sp, #0
 80092aa:	6078      	str	r0, [r7, #4]
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	4618      	mov	r0, r3
 80092b0:	370c      	adds	r7, #12
 80092b2:	46bd      	mov	sp, r7
 80092b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092b8:	4770      	bx	lr

080092ba <_ZNSt16allocator_traitsISaIN3jlb4EdgeEEE10deallocateERS2_PS1_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 80092ba:	b580      	push	{r7, lr}
 80092bc:	b088      	sub	sp, #32
 80092be:	af00      	add	r7, sp, #0
 80092c0:	60f8      	str	r0, [r7, #12]
 80092c2:	60b9      	str	r1, [r7, #8]
 80092c4:	607a      	str	r2, [r7, #4]
 80092c6:	68fb      	ldr	r3, [r7, #12]
 80092c8:	61fb      	str	r3, [r7, #28]
 80092ca:	68bb      	ldr	r3, [r7, #8]
 80092cc:	61bb      	str	r3, [r7, #24]
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	617b      	str	r3, [r7, #20]
	if (std::is_constant_evaluated())
 80092d2:	f7f8 ff7b 	bl	80021cc <_ZSt21is_constant_evaluatedv>
 80092d6:	4603      	mov	r3, r0
 80092d8:	2b00      	cmp	r3, #0
 80092da:	d003      	beq.n	80092e4 <_ZNSt16allocator_traitsISaIN3jlb4EdgeEEE10deallocateERS2_PS1_j+0x2a>
	    ::operator delete(__p);
 80092dc:	69b8      	ldr	r0, [r7, #24]
 80092de:	f012 fa15 	bl	801b70c <_ZdlPv>
	    return;
 80092e2:	e005      	b.n	80092f0 <_ZNSt16allocator_traitsISaIN3jlb4EdgeEEE10deallocateERS2_PS1_j+0x36>
	__allocator_base<_Tp>::deallocate(__p, __n);
 80092e4:	697a      	ldr	r2, [r7, #20]
 80092e6:	69b9      	ldr	r1, [r7, #24]
 80092e8:	69f8      	ldr	r0, [r7, #28]
 80092ea:	f002 f8e0 	bl	800b4ae <_ZN9__gnu_cxx13new_allocatorIN3jlb4EdgeEE10deallocateEPS2_j>
      { __a.deallocate(__p, __n); }
 80092ee:	bf00      	nop
 80092f0:	bf00      	nop
 80092f2:	3720      	adds	r7, #32
 80092f4:	46bd      	mov	sp, r7
 80092f6:	bd80      	pop	{r7, pc}

080092f8 <_ZSt8_DestroyIPN3jlb4EdgeEEvT_S3_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 80092f8:	b580      	push	{r7, lr}
 80092fa:	b082      	sub	sp, #8
 80092fc:	af00      	add	r7, sp, #0
 80092fe:	6078      	str	r0, [r7, #4]
 8009300:	6039      	str	r1, [r7, #0]
      if (std::is_constant_evaluated())
 8009302:	f7f8 ff63 	bl	80021cc <_ZSt21is_constant_evaluatedv>
 8009306:	4603      	mov	r3, r0
 8009308:	2b00      	cmp	r3, #0
 800930a:	d004      	beq.n	8009316 <_ZSt8_DestroyIPN3jlb4EdgeEEvT_S3_+0x1e>
	return _Destroy_aux<false>::__destroy(__first, __last);
 800930c:	6839      	ldr	r1, [r7, #0]
 800930e:	6878      	ldr	r0, [r7, #4]
 8009310:	f001 fa40 	bl	800a794 <_ZNSt12_Destroy_auxILb0EE9__destroyIPN3jlb4EdgeEEEvT_S5_>
 8009314:	e003      	b.n	800931e <_ZSt8_DestroyIPN3jlb4EdgeEEvT_S3_+0x26>
	__destroy(__first, __last);
 8009316:	6839      	ldr	r1, [r7, #0]
 8009318:	6878      	ldr	r0, [r7, #4]
 800931a:	f001 fa3b 	bl	800a794 <_ZNSt12_Destroy_auxILb0EE9__destroyIPN3jlb4EdgeEEEvT_S5_>
    }
 800931e:	3708      	adds	r7, #8
 8009320:	46bd      	mov	sp, r7
 8009322:	bd80      	pop	{r7, pc}

08009324 <_ZNSt16allocator_traitsISaIcEE37select_on_container_copy_constructionERKS0_>:
      select_on_container_copy_construction(const allocator_type& __rhs)
 8009324:	b580      	push	{r7, lr}
 8009326:	b082      	sub	sp, #8
 8009328:	af00      	add	r7, sp, #0
 800932a:	6078      	str	r0, [r7, #4]
 800932c:	6039      	str	r1, [r7, #0]
      { return __rhs; }
 800932e:	6839      	ldr	r1, [r7, #0]
 8009330:	6878      	ldr	r0, [r7, #4]
 8009332:	f012 fa01 	bl	801b738 <_ZNSaIcEC1ERKS_>
 8009336:	6878      	ldr	r0, [r7, #4]
 8009338:	3708      	adds	r7, #8
 800933a:	46bd      	mov	sp, r7
 800933c:	bd80      	pop	{r7, pc}

0800933e <_ZNSt12_Vector_baseIcSaIcEE12_Vector_implC1ERKS0_>:
	_Vector_impl(_Tp_alloc_type const& __a) _GLIBCXX_NOEXCEPT
 800933e:	b580      	push	{r7, lr}
 8009340:	b082      	sub	sp, #8
 8009342:	af00      	add	r7, sp, #0
 8009344:	6078      	str	r0, [r7, #4]
 8009346:	6039      	str	r1, [r7, #0]
	: _Tp_alloc_type(__a)
 8009348:	6839      	ldr	r1, [r7, #0]
 800934a:	6878      	ldr	r0, [r7, #4]
 800934c:	f012 f9f4 	bl	801b738 <_ZNSaIcEC1ERKS_>
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	4618      	mov	r0, r3
 8009354:	f7ff fb15 	bl	8008982 <_ZNSt12_Vector_baseIcSaIcEE17_Vector_impl_dataC1Ev>
	{ }
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	4618      	mov	r0, r3
 800935c:	3708      	adds	r7, #8
 800935e:	46bd      	mov	sp, r7
 8009360:	bd80      	pop	{r7, pc}

08009362 <_ZNSt12_Vector_baseIcSaIcEE17_M_create_storageEj>:
      _M_create_storage(size_t __n)
 8009362:	b580      	push	{r7, lr}
 8009364:	b082      	sub	sp, #8
 8009366:	af00      	add	r7, sp, #0
 8009368:	6078      	str	r0, [r7, #4]
 800936a:	6039      	str	r1, [r7, #0]
	this->_M_impl._M_start = this->_M_allocate(__n);
 800936c:	6839      	ldr	r1, [r7, #0]
 800936e:	6878      	ldr	r0, [r7, #4]
 8009370:	f000 fb14 	bl	800999c <_ZNSt12_Vector_baseIcSaIcEE11_M_allocateEj>
 8009374:	4602      	mov	r2, r0
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	601a      	str	r2, [r3, #0]
	this->_M_impl._M_finish = this->_M_impl._M_start;
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	681a      	ldr	r2, [r3, #0]
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	605a      	str	r2, [r3, #4]
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	681a      	ldr	r2, [r3, #0]
 8009386:	683b      	ldr	r3, [r7, #0]
 8009388:	441a      	add	r2, r3
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	609a      	str	r2, [r3, #8]
      }
 800938e:	bf00      	nop
 8009390:	3708      	adds	r7, #8
 8009392:	46bd      	mov	sp, r7
 8009394:	bd80      	pop	{r7, pc}

08009396 <_ZN9__gnu_cxx17__normal_iteratorIPKcSt6vectorIcSaIcEEEC1ERKS2_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 8009396:	b480      	push	{r7}
 8009398:	b083      	sub	sp, #12
 800939a:	af00      	add	r7, sp, #0
 800939c:	6078      	str	r0, [r7, #4]
 800939e:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 80093a0:	683b      	ldr	r3, [r7, #0]
 80093a2:	681a      	ldr	r2, [r3, #0]
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	601a      	str	r2, [r3, #0]
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	4618      	mov	r0, r3
 80093ac:	370c      	adds	r7, #12
 80093ae:	46bd      	mov	sp, r7
 80093b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093b4:	4770      	bx	lr

080093b6 <_ZSt18uninitialized_copyIN9__gnu_cxx17__normal_iteratorIPKcSt6vectorIcSaIcEEEEPcET0_T_SA_S9_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 80093b6:	b580      	push	{r7, lr}
 80093b8:	b086      	sub	sp, #24
 80093ba:	af00      	add	r7, sp, #0
 80093bc:	60f8      	str	r0, [r7, #12]
 80093be:	60b9      	str	r1, [r7, #8]
 80093c0:	607a      	str	r2, [r7, #4]
      const bool __assignable = is_assignable<_RefType2, _RefType1>::value;
 80093c2:	2301      	movs	r3, #1
 80093c4:	75fb      	strb	r3, [r7, #23]
	__uninit_copy(__first, __last, __result);
 80093c6:	687a      	ldr	r2, [r7, #4]
 80093c8:	68b9      	ldr	r1, [r7, #8]
 80093ca:	68f8      	ldr	r0, [r7, #12]
 80093cc:	f001 f9fb 	bl	800a7c6 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIN9__gnu_cxx17__normal_iteratorIPKcSt6vectorIcSaIcEEEEPcEET0_T_SC_SB_>
 80093d0:	4603      	mov	r3, r0
    }
 80093d2:	4618      	mov	r0, r3
 80093d4:	3718      	adds	r7, #24
 80093d6:	46bd      	mov	sp, r7
 80093d8:	bd80      	pop	{r7, pc}

080093da <_ZSt8_DestroyIPcEvT_S1_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 80093da:	b580      	push	{r7, lr}
 80093dc:	b082      	sub	sp, #8
 80093de:	af00      	add	r7, sp, #0
 80093e0:	6078      	str	r0, [r7, #4]
 80093e2:	6039      	str	r1, [r7, #0]
      if (std::is_constant_evaluated())
 80093e4:	f7f8 fef2 	bl	80021cc <_ZSt21is_constant_evaluatedv>
 80093e8:	4603      	mov	r3, r0
 80093ea:	2b00      	cmp	r3, #0
 80093ec:	d004      	beq.n	80093f8 <_ZSt8_DestroyIPcEvT_S1_+0x1e>
	return _Destroy_aux<false>::__destroy(__first, __last);
 80093ee:	6839      	ldr	r1, [r7, #0]
 80093f0:	6878      	ldr	r0, [r7, #4]
 80093f2:	f001 f9f8 	bl	800a7e6 <_ZNSt12_Destroy_auxILb0EE9__destroyIPcEEvT_S3_>
 80093f6:	e003      	b.n	8009400 <_ZSt8_DestroyIPcEvT_S1_+0x26>
	__destroy(__first, __last);
 80093f8:	6839      	ldr	r1, [r7, #0]
 80093fa:	6878      	ldr	r0, [r7, #4]
 80093fc:	f001 fa0c 	bl	800a818 <_ZNSt12_Destroy_auxILb1EE9__destroyIPcEEvT_S3_>
    }
 8009400:	3708      	adds	r7, #8
 8009402:	46bd      	mov	sp, r7
 8009404:	bd80      	pop	{r7, pc}

08009406 <_ZSt7forwardIN3jlb4EdgeEEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8009406:	b480      	push	{r7}
 8009408:	b083      	sub	sp, #12
 800940a:	af00      	add	r7, sp, #0
 800940c:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	4618      	mov	r0, r3
 8009412:	370c      	adds	r7, #12
 8009414:	46bd      	mov	sp, r7
 8009416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800941a:	4770      	bx	lr

0800941c <_ZNSt12_Vector_baseIcSaIcEEC1EOS1_>:
      _Vector_base(_Vector_base&&) = default;
 800941c:	b580      	push	{r7, lr}
 800941e:	b082      	sub	sp, #8
 8009420:	af00      	add	r7, sp, #0
 8009422:	6078      	str	r0, [r7, #4]
 8009424:	6039      	str	r1, [r7, #0]
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	683a      	ldr	r2, [r7, #0]
 800942a:	4611      	mov	r1, r2
 800942c:	4618      	mov	r0, r3
 800942e:	f001 f9fe 	bl	800a82e <_ZNSt12_Vector_baseIcSaIcEE12_Vector_implC1EOS2_>
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	4618      	mov	r0, r3
 8009436:	3708      	adds	r7, #8
 8009438:	46bd      	mov	sp, r7
 800943a:	bd80      	pop	{r7, pc}

0800943c <_ZNSt6vectorIcSaIcEEC1EOS1_>:
      vector(vector&&) noexcept = default;
 800943c:	b580      	push	{r7, lr}
 800943e:	b082      	sub	sp, #8
 8009440:	af00      	add	r7, sp, #0
 8009442:	6078      	str	r0, [r7, #4]
 8009444:	6039      	str	r1, [r7, #0]
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	683a      	ldr	r2, [r7, #0]
 800944a:	4611      	mov	r1, r2
 800944c:	4618      	mov	r0, r3
 800944e:	f7ff ffe5 	bl	800941c <_ZNSt12_Vector_baseIcSaIcEEC1EOS1_>
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	4618      	mov	r0, r3
 8009456:	3708      	adds	r7, #8
 8009458:	46bd      	mov	sp, r7
 800945a:	bd80      	pop	{r7, pc}

0800945c <_ZN3jlb4EdgeC1EOS0_>:
    struct Edge
 800945c:	b580      	push	{r7, lr}
 800945e:	b082      	sub	sp, #8
 8009460:	af00      	add	r7, sp, #0
 8009462:	6078      	str	r0, [r7, #4]
 8009464:	6039      	str	r1, [r7, #0]
 8009466:	683b      	ldr	r3, [r7, #0]
 8009468:	781a      	ldrb	r2, [r3, #0]
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	701a      	strb	r2, [r3, #0]
 800946e:	683b      	ldr	r3, [r7, #0]
 8009470:	685a      	ldr	r2, [r3, #4]
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	605a      	str	r2, [r3, #4]
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	f103 0208 	add.w	r2, r3, #8
 800947c:	683b      	ldr	r3, [r7, #0]
 800947e:	3308      	adds	r3, #8
 8009480:	4619      	mov	r1, r3
 8009482:	4610      	mov	r0, r2
 8009484:	f7ff ffda 	bl	800943c <_ZNSt6vectorIcSaIcEEC1EOS1_>
 8009488:	683b      	ldr	r3, [r7, #0]
 800948a:	695a      	ldr	r2, [r3, #20]
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	615a      	str	r2, [r3, #20]
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	4618      	mov	r0, r3
 8009494:	3708      	adds	r7, #8
 8009496:	46bd      	mov	sp, r7
 8009498:	bd80      	pop	{r7, pc}

0800949a <_ZSt12construct_atIN3jlb4EdgeEJS1_EEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPS3_DpOS4_>:
    construct_at(_Tp* __location, _Args&&... __args)
 800949a:	b5b0      	push	{r4, r5, r7, lr}
 800949c:	b082      	sub	sp, #8
 800949e:	af00      	add	r7, sp, #0
 80094a0:	6078      	str	r0, [r7, #4]
 80094a2:	6039      	str	r1, [r7, #0]
    { return ::new((void*)__location) _Tp(std::forward<_Args>(__args)...); }
 80094a4:	6838      	ldr	r0, [r7, #0]
 80094a6:	f7ff ffae 	bl	8009406 <_ZSt7forwardIN3jlb4EdgeEEOT_RNSt16remove_referenceIS2_E4typeE>
 80094aa:	4605      	mov	r5, r0
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	4619      	mov	r1, r3
 80094b0:	2018      	movs	r0, #24
 80094b2:	f7f8 feaf 	bl	8002214 <_ZnwjPv>
 80094b6:	4604      	mov	r4, r0
 80094b8:	4629      	mov	r1, r5
 80094ba:	4620      	mov	r0, r4
 80094bc:	f7ff ffce 	bl	800945c <_ZN3jlb4EdgeC1EOS0_>
 80094c0:	4623      	mov	r3, r4
 80094c2:	4618      	mov	r0, r3
 80094c4:	3708      	adds	r7, #8
 80094c6:	46bd      	mov	sp, r7
 80094c8:	bdb0      	pop	{r4, r5, r7, pc}

080094ca <_ZNSt16allocator_traitsISaIN3jlb4EdgeEEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 80094ca:	b580      	push	{r7, lr}
 80094cc:	b084      	sub	sp, #16
 80094ce:	af00      	add	r7, sp, #0
 80094d0:	60f8      	str	r0, [r7, #12]
 80094d2:	60b9      	str	r1, [r7, #8]
 80094d4:	607a      	str	r2, [r7, #4]
	  std::construct_at(__p, std::forward<_Args>(__args)...);
 80094d6:	6878      	ldr	r0, [r7, #4]
 80094d8:	f7ff ff95 	bl	8009406 <_ZSt7forwardIN3jlb4EdgeEEOT_RNSt16remove_referenceIS2_E4typeE>
 80094dc:	4603      	mov	r3, r0
 80094de:	4619      	mov	r1, r3
 80094e0:	68b8      	ldr	r0, [r7, #8]
 80094e2:	f7ff ffda 	bl	800949a <_ZSt12construct_atIN3jlb4EdgeEJS1_EEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPS3_DpOS4_>
	}
 80094e6:	bf00      	nop
 80094e8:	3710      	adds	r7, #16
 80094ea:	46bd      	mov	sp, r7
 80094ec:	bd80      	pop	{r7, pc}

080094ee <_ZNSt6vectorIN3jlb4EdgeESaIS1_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 80094ee:	b580      	push	{r7, lr}
 80094f0:	b084      	sub	sp, #16
 80094f2:	af00      	add	r7, sp, #0
 80094f4:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_finish); }
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	1d1a      	adds	r2, r3, #4
 80094fa:	f107 030c 	add.w	r3, r7, #12
 80094fe:	4611      	mov	r1, r2
 8009500:	4618      	mov	r0, r3
 8009502:	f001 f9af 	bl	800a864 <_ZN9__gnu_cxx17__normal_iteratorIPN3jlb4EdgeESt6vectorIS2_SaIS2_EEEC1ERKS3_>
 8009506:	68fb      	ldr	r3, [r7, #12]
 8009508:	4618      	mov	r0, r3
 800950a:	3710      	adds	r7, #16
 800950c:	46bd      	mov	sp, r7
 800950e:	bd80      	pop	{r7, pc}

08009510 <_ZNSt6vectorIN3jlb4EdgeESaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>:
      vector<_Tp, _Alloc>::
 8009510:	b5b0      	push	{r4, r5, r7, lr}
 8009512:	b08c      	sub	sp, #48	; 0x30
 8009514:	af00      	add	r7, sp, #0
 8009516:	60f8      	str	r0, [r7, #12]
 8009518:	60b9      	str	r1, [r7, #8]
 800951a:	607a      	str	r2, [r7, #4]
	_M_check_len(size_type(1), "vector::_M_realloc_insert");
 800951c:	4a3f      	ldr	r2, [pc, #252]	; (800961c <_ZNSt6vectorIN3jlb4EdgeESaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x10c>)
 800951e:	2101      	movs	r1, #1
 8009520:	68f8      	ldr	r0, [r7, #12]
 8009522:	f001 f9af 	bl	800a884 <_ZNKSt6vectorIN3jlb4EdgeESaIS1_EE12_M_check_lenEjPKc>
 8009526:	62f8      	str	r0, [r7, #44]	; 0x2c
      pointer __old_start = this->_M_impl._M_start;
 8009528:	68fb      	ldr	r3, [r7, #12]
 800952a:	681b      	ldr	r3, [r3, #0]
 800952c:	62bb      	str	r3, [r7, #40]	; 0x28
      pointer __old_finish = this->_M_impl._M_finish;
 800952e:	68fb      	ldr	r3, [r7, #12]
 8009530:	685b      	ldr	r3, [r3, #4]
 8009532:	627b      	str	r3, [r7, #36]	; 0x24
      const size_type __elems_before = __position - begin();
 8009534:	68f8      	ldr	r0, [r7, #12]
 8009536:	f001 f9ec 	bl	800a912 <_ZNSt6vectorIN3jlb4EdgeESaIS1_EE5beginEv>
 800953a:	4603      	mov	r3, r0
 800953c:	617b      	str	r3, [r7, #20]
 800953e:	f107 0214 	add.w	r2, r7, #20
 8009542:	f107 0308 	add.w	r3, r7, #8
 8009546:	4611      	mov	r1, r2
 8009548:	4618      	mov	r0, r3
 800954a:	f001 f9f3 	bl	800a934 <_ZN9__gnu_cxxmiIPN3jlb4EdgeESt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>
 800954e:	4603      	mov	r3, r0
 8009550:	623b      	str	r3, [r7, #32]
      pointer __new_start(this->_M_allocate(__len));
 8009552:	68fb      	ldr	r3, [r7, #12]
 8009554:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009556:	4618      	mov	r0, r3
 8009558:	f001 fa06 	bl	800a968 <_ZNSt12_Vector_baseIN3jlb4EdgeESaIS1_EE11_M_allocateEj>
 800955c:	61f8      	str	r0, [r7, #28]
      pointer __new_finish(__new_start);
 800955e:	69fb      	ldr	r3, [r7, #28]
 8009560:	61bb      	str	r3, [r7, #24]
	  _Alloc_traits::construct(this->_M_impl,
 8009562:	68fc      	ldr	r4, [r7, #12]
				   __new_start + __elems_before,
 8009564:	6a3a      	ldr	r2, [r7, #32]
 8009566:	4613      	mov	r3, r2
 8009568:	005b      	lsls	r3, r3, #1
 800956a:	4413      	add	r3, r2
 800956c:	00db      	lsls	r3, r3, #3
 800956e:	461a      	mov	r2, r3
	  _Alloc_traits::construct(this->_M_impl,
 8009570:	69fb      	ldr	r3, [r7, #28]
 8009572:	189d      	adds	r5, r3, r2
 8009574:	6878      	ldr	r0, [r7, #4]
 8009576:	f7ff ff46 	bl	8009406 <_ZSt7forwardIN3jlb4EdgeEEOT_RNSt16remove_referenceIS2_E4typeE>
 800957a:	4603      	mov	r3, r0
 800957c:	461a      	mov	r2, r3
 800957e:	4629      	mov	r1, r5
 8009580:	4620      	mov	r0, r4
 8009582:	f7ff ffa2 	bl	80094ca <_ZNSt16allocator_traitsISaIN3jlb4EdgeEEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>
	  __new_finish = pointer();
 8009586:	2300      	movs	r3, #0
 8009588:	61bb      	str	r3, [r7, #24]
	      __new_finish = _S_relocate(__old_start, __position.base(),
 800958a:	f107 0308 	add.w	r3, r7, #8
 800958e:	4618      	mov	r0, r3
 8009590:	f001 fa12 	bl	800a9b8 <_ZNK9__gnu_cxx17__normal_iteratorIPN3jlb4EdgeESt6vectorIS2_SaIS2_EEE4baseEv>
 8009594:	4603      	mov	r3, r0
 8009596:	681c      	ldr	r4, [r3, #0]
					 __new_start, _M_get_Tp_allocator());
 8009598:	68fb      	ldr	r3, [r7, #12]
 800959a:	4618      	mov	r0, r3
 800959c:	f7fe fff2 	bl	8008584 <_ZNSt12_Vector_baseIN3jlb4EdgeESaIS1_EE19_M_get_Tp_allocatorEv>
 80095a0:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__old_start, __position.base(),
 80095a2:	69fa      	ldr	r2, [r7, #28]
 80095a4:	4621      	mov	r1, r4
 80095a6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80095a8:	f001 f9f2 	bl	800a990 <_ZNSt6vectorIN3jlb4EdgeESaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>
 80095ac:	61b8      	str	r0, [r7, #24]
	      ++__new_finish;
 80095ae:	69bb      	ldr	r3, [r7, #24]
 80095b0:	3318      	adds	r3, #24
 80095b2:	61bb      	str	r3, [r7, #24]
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 80095b4:	f107 0308 	add.w	r3, r7, #8
 80095b8:	4618      	mov	r0, r3
 80095ba:	f001 f9fd 	bl	800a9b8 <_ZNK9__gnu_cxx17__normal_iteratorIPN3jlb4EdgeESt6vectorIS2_SaIS2_EEE4baseEv>
 80095be:	4603      	mov	r3, r0
 80095c0:	681c      	ldr	r4, [r3, #0]
					 __new_finish, _M_get_Tp_allocator());
 80095c2:	68fb      	ldr	r3, [r7, #12]
 80095c4:	4618      	mov	r0, r3
 80095c6:	f7fe ffdd 	bl	8008584 <_ZNSt12_Vector_baseIN3jlb4EdgeESaIS1_EE19_M_get_Tp_allocatorEv>
 80095ca:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 80095cc:	69ba      	ldr	r2, [r7, #24]
 80095ce:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80095d0:	4620      	mov	r0, r4
 80095d2:	f001 f9dd 	bl	800a990 <_ZNSt6vectorIN3jlb4EdgeESaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>
 80095d6:	61b8      	str	r0, [r7, #24]
      _M_deallocate(__old_start,
 80095d8:	68f8      	ldr	r0, [r7, #12]
		    this->_M_impl._M_end_of_storage - __old_start);
 80095da:	68fb      	ldr	r3, [r7, #12]
 80095dc:	689a      	ldr	r2, [r3, #8]
 80095de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095e0:	1ad3      	subs	r3, r2, r3
 80095e2:	10db      	asrs	r3, r3, #3
 80095e4:	4a0e      	ldr	r2, [pc, #56]	; (8009620 <_ZNSt6vectorIN3jlb4EdgeESaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x110>)
 80095e6:	fb02 f303 	mul.w	r3, r2, r3
      _M_deallocate(__old_start,
 80095ea:	461a      	mov	r2, r3
 80095ec:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80095ee:	f7fe ffb6 	bl	800855e <_ZNSt12_Vector_baseIN3jlb4EdgeESaIS1_EE13_M_deallocateEPS1_j>
      this->_M_impl._M_start = __new_start;
 80095f2:	68fb      	ldr	r3, [r7, #12]
 80095f4:	69fa      	ldr	r2, [r7, #28]
 80095f6:	601a      	str	r2, [r3, #0]
      this->_M_impl._M_finish = __new_finish;
 80095f8:	68fb      	ldr	r3, [r7, #12]
 80095fa:	69ba      	ldr	r2, [r7, #24]
 80095fc:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 80095fe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009600:	4613      	mov	r3, r2
 8009602:	005b      	lsls	r3, r3, #1
 8009604:	4413      	add	r3, r2
 8009606:	00db      	lsls	r3, r3, #3
 8009608:	461a      	mov	r2, r3
 800960a:	69fb      	ldr	r3, [r7, #28]
 800960c:	441a      	add	r2, r3
 800960e:	68fb      	ldr	r3, [r7, #12]
 8009610:	609a      	str	r2, [r3, #8]
    }
 8009612:	bf00      	nop
 8009614:	3730      	adds	r7, #48	; 0x30
 8009616:	46bd      	mov	sp, r7
 8009618:	bdb0      	pop	{r4, r5, r7, pc}
 800961a:	bf00      	nop
 800961c:	0801f130 	.word	0x0801f130
 8009620:	aaaaaaab 	.word	0xaaaaaaab

08009624 <_ZNSt6vectorIN3jlb4EdgeESaIS1_EE4backEv>:
      back() _GLIBCXX_NOEXCEPT
 8009624:	b580      	push	{r7, lr}
 8009626:	b084      	sub	sp, #16
 8009628:	af00      	add	r7, sp, #0
 800962a:	6078      	str	r0, [r7, #4]
	return *(end() - 1);
 800962c:	6878      	ldr	r0, [r7, #4]
 800962e:	f7ff ff5e 	bl	80094ee <_ZNSt6vectorIN3jlb4EdgeESaIS1_EE3endEv>
 8009632:	4603      	mov	r3, r0
 8009634:	60fb      	str	r3, [r7, #12]
 8009636:	f107 030c 	add.w	r3, r7, #12
 800963a:	2101      	movs	r1, #1
 800963c:	4618      	mov	r0, r3
 800963e:	f001 f9d2 	bl	800a9e6 <_ZNK9__gnu_cxx17__normal_iteratorIPN3jlb4EdgeESt6vectorIS2_SaIS2_EEEmiEi>
 8009642:	4603      	mov	r3, r0
 8009644:	60bb      	str	r3, [r7, #8]
 8009646:	f107 0308 	add.w	r3, r7, #8
 800964a:	4618      	mov	r0, r3
 800964c:	f001 f9e7 	bl	800aa1e <_ZNK9__gnu_cxx17__normal_iteratorIPN3jlb4EdgeESt6vectorIS2_SaIS2_EEEdeEv>
 8009650:	4603      	mov	r3, r0
      }
 8009652:	4618      	mov	r0, r3
 8009654:	3710      	adds	r7, #16
 8009656:	46bd      	mov	sp, r7
 8009658:	bd80      	pop	{r7, pc}

0800965a <_ZN9__gnu_cxx13new_allocatorIN3jlb4NodeEEC1Ev>:
 800965a:	b480      	push	{r7}
 800965c:	b083      	sub	sp, #12
 800965e:	af00      	add	r7, sp, #0
 8009660:	6078      	str	r0, [r7, #4]
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	4618      	mov	r0, r3
 8009666:	370c      	adds	r7, #12
 8009668:	46bd      	mov	sp, r7
 800966a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800966e:	4770      	bx	lr

08009670 <_ZNSt16allocator_traitsISaIN3jlb4NodeEEE10deallocateERS2_PS1_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8009670:	b580      	push	{r7, lr}
 8009672:	b088      	sub	sp, #32
 8009674:	af00      	add	r7, sp, #0
 8009676:	60f8      	str	r0, [r7, #12]
 8009678:	60b9      	str	r1, [r7, #8]
 800967a:	607a      	str	r2, [r7, #4]
 800967c:	68fb      	ldr	r3, [r7, #12]
 800967e:	61fb      	str	r3, [r7, #28]
 8009680:	68bb      	ldr	r3, [r7, #8]
 8009682:	61bb      	str	r3, [r7, #24]
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	617b      	str	r3, [r7, #20]
	if (std::is_constant_evaluated())
 8009688:	f7f8 fda0 	bl	80021cc <_ZSt21is_constant_evaluatedv>
 800968c:	4603      	mov	r3, r0
 800968e:	2b00      	cmp	r3, #0
 8009690:	d003      	beq.n	800969a <_ZNSt16allocator_traitsISaIN3jlb4NodeEEE10deallocateERS2_PS1_j+0x2a>
	    ::operator delete(__p);
 8009692:	69b8      	ldr	r0, [r7, #24]
 8009694:	f012 f83a 	bl	801b70c <_ZdlPv>
	    return;
 8009698:	e005      	b.n	80096a6 <_ZNSt16allocator_traitsISaIN3jlb4NodeEEE10deallocateERS2_PS1_j+0x36>
	__allocator_base<_Tp>::deallocate(__p, __n);
 800969a:	697a      	ldr	r2, [r7, #20]
 800969c:	69b9      	ldr	r1, [r7, #24]
 800969e:	69f8      	ldr	r0, [r7, #28]
 80096a0:	f001 ffda 	bl	800b658 <_ZN9__gnu_cxx13new_allocatorIN3jlb4NodeEE10deallocateEPS2_j>
      { __a.deallocate(__p, __n); }
 80096a4:	bf00      	nop
 80096a6:	bf00      	nop
 80096a8:	3720      	adds	r7, #32
 80096aa:	46bd      	mov	sp, r7
 80096ac:	bd80      	pop	{r7, pc}

080096ae <_ZSt8_DestroyIPN3jlb4NodeEEvT_S3_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 80096ae:	b580      	push	{r7, lr}
 80096b0:	b082      	sub	sp, #8
 80096b2:	af00      	add	r7, sp, #0
 80096b4:	6078      	str	r0, [r7, #4]
 80096b6:	6039      	str	r1, [r7, #0]
      if (std::is_constant_evaluated())
 80096b8:	f7f8 fd88 	bl	80021cc <_ZSt21is_constant_evaluatedv>
 80096bc:	4603      	mov	r3, r0
 80096be:	2b00      	cmp	r3, #0
 80096c0:	d004      	beq.n	80096cc <_ZSt8_DestroyIPN3jlb4NodeEEvT_S3_+0x1e>
	return _Destroy_aux<false>::__destroy(__first, __last);
 80096c2:	6839      	ldr	r1, [r7, #0]
 80096c4:	6878      	ldr	r0, [r7, #4]
 80096c6:	f001 f9b6 	bl	800aa36 <_ZNSt12_Destroy_auxILb0EE9__destroyIPN3jlb4NodeEEEvT_S5_>
 80096ca:	e003      	b.n	80096d4 <_ZSt8_DestroyIPN3jlb4NodeEEvT_S3_+0x26>
	__destroy(__first, __last);
 80096cc:	6839      	ldr	r1, [r7, #0]
 80096ce:	6878      	ldr	r0, [r7, #4]
 80096d0:	f001 f9b1 	bl	800aa36 <_ZNSt12_Destroy_auxILb0EE9__destroyIPN3jlb4NodeEEEvT_S5_>
    }
 80096d4:	3708      	adds	r7, #8
 80096d6:	46bd      	mov	sp, r7
 80096d8:	bd80      	pop	{r7, pc}

080096da <_ZSt7forwardIN3jlb4NodeEEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80096da:	b480      	push	{r7}
 80096dc:	b083      	sub	sp, #12
 80096de:	af00      	add	r7, sp, #0
 80096e0:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	4618      	mov	r0, r3
 80096e6:	370c      	adds	r7, #12
 80096e8:	46bd      	mov	sp, r7
 80096ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096ee:	4770      	bx	lr

080096f0 <_ZN3jlb4NodeC1ERKS0_>:
    class Node
 80096f0:	b580      	push	{r7, lr}
 80096f2:	b082      	sub	sp, #8
 80096f4:	af00      	add	r7, sp, #0
 80096f6:	6078      	str	r0, [r7, #4]
 80096f8:	6039      	str	r1, [r7, #0]
 80096fa:	683b      	ldr	r3, [r7, #0]
 80096fc:	781a      	ldrb	r2, [r3, #0]
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	701a      	strb	r2, [r3, #0]
 8009702:	683b      	ldr	r3, [r7, #0]
 8009704:	685a      	ldr	r2, [r3, #4]
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	605a      	str	r2, [r3, #4]
 800970a:	683b      	ldr	r3, [r7, #0]
 800970c:	689a      	ldr	r2, [r3, #8]
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	609a      	str	r2, [r3, #8]
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	f103 020c 	add.w	r2, r3, #12
 8009718:	683b      	ldr	r3, [r7, #0]
 800971a:	330c      	adds	r3, #12
 800971c:	4619      	mov	r1, r3
 800971e:	4610      	mov	r0, r2
 8009720:	f001 f9a2 	bl	800aa68 <_ZNSt6vectorIN3jlb4EdgeESaIS1_EEC1ERKS3_>
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	4618      	mov	r0, r3
 8009728:	3708      	adds	r7, #8
 800972a:	46bd      	mov	sp, r7
 800972c:	bd80      	pop	{r7, pc}

0800972e <_ZSt12construct_atIN3jlb4NodeEJS1_EEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPS3_DpOS4_>:
    construct_at(_Tp* __location, _Args&&... __args)
 800972e:	b5b0      	push	{r4, r5, r7, lr}
 8009730:	b082      	sub	sp, #8
 8009732:	af00      	add	r7, sp, #0
 8009734:	6078      	str	r0, [r7, #4]
 8009736:	6039      	str	r1, [r7, #0]
    { return ::new((void*)__location) _Tp(std::forward<_Args>(__args)...); }
 8009738:	6838      	ldr	r0, [r7, #0]
 800973a:	f7ff ffce 	bl	80096da <_ZSt7forwardIN3jlb4NodeEEOT_RNSt16remove_referenceIS2_E4typeE>
 800973e:	4605      	mov	r5, r0
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	4619      	mov	r1, r3
 8009744:	2018      	movs	r0, #24
 8009746:	f7f8 fd65 	bl	8002214 <_ZnwjPv>
 800974a:	4604      	mov	r4, r0
 800974c:	4629      	mov	r1, r5
 800974e:	4620      	mov	r0, r4
 8009750:	f7ff ffce 	bl	80096f0 <_ZN3jlb4NodeC1ERKS0_>
 8009754:	4623      	mov	r3, r4
 8009756:	4618      	mov	r0, r3
 8009758:	3708      	adds	r7, #8
 800975a:	46bd      	mov	sp, r7
 800975c:	bdb0      	pop	{r4, r5, r7, pc}

0800975e <_ZNSt16allocator_traitsISaIN3jlb4NodeEEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 800975e:	b580      	push	{r7, lr}
 8009760:	b084      	sub	sp, #16
 8009762:	af00      	add	r7, sp, #0
 8009764:	60f8      	str	r0, [r7, #12]
 8009766:	60b9      	str	r1, [r7, #8]
 8009768:	607a      	str	r2, [r7, #4]
	  std::construct_at(__p, std::forward<_Args>(__args)...);
 800976a:	6878      	ldr	r0, [r7, #4]
 800976c:	f7ff ffb5 	bl	80096da <_ZSt7forwardIN3jlb4NodeEEOT_RNSt16remove_referenceIS2_E4typeE>
 8009770:	4603      	mov	r3, r0
 8009772:	4619      	mov	r1, r3
 8009774:	68b8      	ldr	r0, [r7, #8]
 8009776:	f7ff ffda 	bl	800972e <_ZSt12construct_atIN3jlb4NodeEJS1_EEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPS3_DpOS4_>
	}
 800977a:	bf00      	nop
 800977c:	3710      	adds	r7, #16
 800977e:	46bd      	mov	sp, r7
 8009780:	bd80      	pop	{r7, pc}

08009782 <_ZNSt6vectorIN3jlb4NodeESaIS1_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 8009782:	b580      	push	{r7, lr}
 8009784:	b084      	sub	sp, #16
 8009786:	af00      	add	r7, sp, #0
 8009788:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_finish); }
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	1d1a      	adds	r2, r3, #4
 800978e:	f107 030c 	add.w	r3, r7, #12
 8009792:	4611      	mov	r1, r2
 8009794:	4618      	mov	r0, r3
 8009796:	f001 f9a4 	bl	800aae2 <_ZN9__gnu_cxx17__normal_iteratorIPN3jlb4NodeESt6vectorIS2_SaIS2_EEEC1ERKS3_>
 800979a:	68fb      	ldr	r3, [r7, #12]
 800979c:	4618      	mov	r0, r3
 800979e:	3710      	adds	r7, #16
 80097a0:	46bd      	mov	sp, r7
 80097a2:	bd80      	pop	{r7, pc}

080097a4 <_ZNSt6vectorIN3jlb4NodeESaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>:
      vector<_Tp, _Alloc>::
 80097a4:	b5b0      	push	{r4, r5, r7, lr}
 80097a6:	b08c      	sub	sp, #48	; 0x30
 80097a8:	af00      	add	r7, sp, #0
 80097aa:	60f8      	str	r0, [r7, #12]
 80097ac:	60b9      	str	r1, [r7, #8]
 80097ae:	607a      	str	r2, [r7, #4]
	_M_check_len(size_type(1), "vector::_M_realloc_insert");
 80097b0:	4a44      	ldr	r2, [pc, #272]	; (80098c4 <_ZNSt6vectorIN3jlb4NodeESaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x120>)
 80097b2:	2101      	movs	r1, #1
 80097b4:	68f8      	ldr	r0, [r7, #12]
 80097b6:	f001 f9a4 	bl	800ab02 <_ZNKSt6vectorIN3jlb4NodeESaIS1_EE12_M_check_lenEjPKc>
 80097ba:	62f8      	str	r0, [r7, #44]	; 0x2c
      pointer __old_start = this->_M_impl._M_start;
 80097bc:	68fb      	ldr	r3, [r7, #12]
 80097be:	681b      	ldr	r3, [r3, #0]
 80097c0:	62bb      	str	r3, [r7, #40]	; 0x28
      pointer __old_finish = this->_M_impl._M_finish;
 80097c2:	68fb      	ldr	r3, [r7, #12]
 80097c4:	685b      	ldr	r3, [r3, #4]
 80097c6:	627b      	str	r3, [r7, #36]	; 0x24
      const size_type __elems_before = __position - begin();
 80097c8:	68f8      	ldr	r0, [r7, #12]
 80097ca:	f001 f9e1 	bl	800ab90 <_ZNSt6vectorIN3jlb4NodeESaIS1_EE5beginEv>
 80097ce:	4603      	mov	r3, r0
 80097d0:	617b      	str	r3, [r7, #20]
 80097d2:	f107 0214 	add.w	r2, r7, #20
 80097d6:	f107 0308 	add.w	r3, r7, #8
 80097da:	4611      	mov	r1, r2
 80097dc:	4618      	mov	r0, r3
 80097de:	f001 f9e7 	bl	800abb0 <_ZN9__gnu_cxxmiIPN3jlb4NodeESt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>
 80097e2:	4603      	mov	r3, r0
 80097e4:	623b      	str	r3, [r7, #32]
      pointer __new_start(this->_M_allocate(__len));
 80097e6:	68fb      	ldr	r3, [r7, #12]
 80097e8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80097ea:	4618      	mov	r0, r3
 80097ec:	f001 f9fa 	bl	800abe4 <_ZNSt12_Vector_baseIN3jlb4NodeESaIS1_EE11_M_allocateEj>
 80097f0:	61f8      	str	r0, [r7, #28]
      pointer __new_finish(__new_start);
 80097f2:	69fb      	ldr	r3, [r7, #28]
 80097f4:	61bb      	str	r3, [r7, #24]
	  _Alloc_traits::construct(this->_M_impl,
 80097f6:	68fc      	ldr	r4, [r7, #12]
				   __new_start + __elems_before,
 80097f8:	6a3a      	ldr	r2, [r7, #32]
 80097fa:	4613      	mov	r3, r2
 80097fc:	005b      	lsls	r3, r3, #1
 80097fe:	4413      	add	r3, r2
 8009800:	00db      	lsls	r3, r3, #3
 8009802:	461a      	mov	r2, r3
	  _Alloc_traits::construct(this->_M_impl,
 8009804:	69fb      	ldr	r3, [r7, #28]
 8009806:	189d      	adds	r5, r3, r2
 8009808:	6878      	ldr	r0, [r7, #4]
 800980a:	f7ff ff66 	bl	80096da <_ZSt7forwardIN3jlb4NodeEEOT_RNSt16remove_referenceIS2_E4typeE>
 800980e:	4603      	mov	r3, r0
 8009810:	461a      	mov	r2, r3
 8009812:	4629      	mov	r1, r5
 8009814:	4620      	mov	r0, r4
 8009816:	f7ff ffa2 	bl	800975e <_ZNSt16allocator_traitsISaIN3jlb4NodeEEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>
	  __new_finish = pointer();
 800981a:	2300      	movs	r3, #0
 800981c:	61bb      	str	r3, [r7, #24]
		(__old_start, __position.base(),
 800981e:	f107 0308 	add.w	r3, r7, #8
 8009822:	4618      	mov	r0, r3
 8009824:	f001 f9f2 	bl	800ac0c <_ZNK9__gnu_cxx17__normal_iteratorIPN3jlb4NodeESt6vectorIS2_SaIS2_EEE4baseEv>
 8009828:	4603      	mov	r3, r0
 800982a:	681c      	ldr	r4, [r3, #0]
		 __new_start, _M_get_Tp_allocator());
 800982c:	68fb      	ldr	r3, [r7, #12]
 800982e:	4618      	mov	r0, r3
 8009830:	f7fe ffaa 	bl	8008788 <_ZNSt12_Vector_baseIN3jlb4NodeESaIS1_EE19_M_get_Tp_allocatorEv>
 8009834:	4603      	mov	r3, r0
		(__old_start, __position.base(),
 8009836:	69fa      	ldr	r2, [r7, #28]
 8009838:	4621      	mov	r1, r4
 800983a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800983c:	f001 f9f1 	bl	800ac22 <_ZSt34__uninitialized_move_if_noexcept_aIPN3jlb4NodeES2_SaIS1_EET0_T_S5_S4_RT1_>
 8009840:	61b8      	str	r0, [r7, #24]
	      ++__new_finish;
 8009842:	69bb      	ldr	r3, [r7, #24]
 8009844:	3318      	adds	r3, #24
 8009846:	61bb      	str	r3, [r7, #24]
		(__position.base(), __old_finish,
 8009848:	f107 0308 	add.w	r3, r7, #8
 800984c:	4618      	mov	r0, r3
 800984e:	f001 f9dd 	bl	800ac0c <_ZNK9__gnu_cxx17__normal_iteratorIPN3jlb4NodeESt6vectorIS2_SaIS2_EEE4baseEv>
 8009852:	4603      	mov	r3, r0
 8009854:	681c      	ldr	r4, [r3, #0]
		 __new_finish, _M_get_Tp_allocator());
 8009856:	68fb      	ldr	r3, [r7, #12]
 8009858:	4618      	mov	r0, r3
 800985a:	f7fe ff95 	bl	8008788 <_ZNSt12_Vector_baseIN3jlb4NodeESaIS1_EE19_M_get_Tp_allocatorEv>
 800985e:	4603      	mov	r3, r0
		(__position.base(), __old_finish,
 8009860:	69ba      	ldr	r2, [r7, #24]
 8009862:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009864:	4620      	mov	r0, r4
 8009866:	f001 f9dc 	bl	800ac22 <_ZSt34__uninitialized_move_if_noexcept_aIPN3jlb4NodeES2_SaIS1_EET0_T_S5_S4_RT1_>
 800986a:	61b8      	str	r0, [r7, #24]
	std::_Destroy(__old_start, __old_finish, _M_get_Tp_allocator());
 800986c:	68fb      	ldr	r3, [r7, #12]
 800986e:	4618      	mov	r0, r3
 8009870:	f7fe ff8a 	bl	8008788 <_ZNSt12_Vector_baseIN3jlb4NodeESaIS1_EE19_M_get_Tp_allocatorEv>
 8009874:	4603      	mov	r3, r0
 8009876:	461a      	mov	r2, r3
 8009878:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800987a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800987c:	f7fe ff8f 	bl	800879e <_ZSt8_DestroyIPN3jlb4NodeES1_EvT_S3_RSaIT0_E>
      _M_deallocate(__old_start,
 8009880:	68f8      	ldr	r0, [r7, #12]
		    this->_M_impl._M_end_of_storage - __old_start);
 8009882:	68fb      	ldr	r3, [r7, #12]
 8009884:	689a      	ldr	r2, [r3, #8]
 8009886:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009888:	1ad3      	subs	r3, r2, r3
 800988a:	10db      	asrs	r3, r3, #3
 800988c:	4a0e      	ldr	r2, [pc, #56]	; (80098c8 <_ZNSt6vectorIN3jlb4NodeESaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x124>)
 800988e:	fb02 f303 	mul.w	r3, r2, r3
      _M_deallocate(__old_start,
 8009892:	461a      	mov	r2, r3
 8009894:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009896:	f7fe ff64 	bl	8008762 <_ZNSt12_Vector_baseIN3jlb4NodeESaIS1_EE13_M_deallocateEPS1_j>
      this->_M_impl._M_start = __new_start;
 800989a:	68fb      	ldr	r3, [r7, #12]
 800989c:	69fa      	ldr	r2, [r7, #28]
 800989e:	601a      	str	r2, [r3, #0]
      this->_M_impl._M_finish = __new_finish;
 80098a0:	68fb      	ldr	r3, [r7, #12]
 80098a2:	69ba      	ldr	r2, [r7, #24]
 80098a4:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 80098a6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80098a8:	4613      	mov	r3, r2
 80098aa:	005b      	lsls	r3, r3, #1
 80098ac:	4413      	add	r3, r2
 80098ae:	00db      	lsls	r3, r3, #3
 80098b0:	461a      	mov	r2, r3
 80098b2:	69fb      	ldr	r3, [r7, #28]
 80098b4:	441a      	add	r2, r3
 80098b6:	68fb      	ldr	r3, [r7, #12]
 80098b8:	609a      	str	r2, [r3, #8]
    }
 80098ba:	bf00      	nop
 80098bc:	3730      	adds	r7, #48	; 0x30
 80098be:	46bd      	mov	sp, r7
 80098c0:	bdb0      	pop	{r4, r5, r7, pc}
 80098c2:	bf00      	nop
 80098c4:	0801f130 	.word	0x0801f130
 80098c8:	aaaaaaab 	.word	0xaaaaaaab

080098cc <_ZNSt6vectorIN3jlb4NodeESaIS1_EE4backEv>:
      back() _GLIBCXX_NOEXCEPT
 80098cc:	b580      	push	{r7, lr}
 80098ce:	b084      	sub	sp, #16
 80098d0:	af00      	add	r7, sp, #0
 80098d2:	6078      	str	r0, [r7, #4]
	return *(end() - 1);
 80098d4:	6878      	ldr	r0, [r7, #4]
 80098d6:	f7ff ff54 	bl	8009782 <_ZNSt6vectorIN3jlb4NodeESaIS1_EE3endEv>
 80098da:	4603      	mov	r3, r0
 80098dc:	60fb      	str	r3, [r7, #12]
 80098de:	f107 030c 	add.w	r3, r7, #12
 80098e2:	2101      	movs	r1, #1
 80098e4:	4618      	mov	r0, r3
 80098e6:	f001 f9b5 	bl	800ac54 <_ZNK9__gnu_cxx17__normal_iteratorIPN3jlb4NodeESt6vectorIS2_SaIS2_EEEmiEi>
 80098ea:	4603      	mov	r3, r0
 80098ec:	60bb      	str	r3, [r7, #8]
 80098ee:	f107 0308 	add.w	r3, r7, #8
 80098f2:	4618      	mov	r0, r3
 80098f4:	f001 f9ca 	bl	800ac8c <_ZNK9__gnu_cxx17__normal_iteratorIPN3jlb4NodeESt6vectorIS2_SaIS2_EEEdeEv>
 80098f8:	4603      	mov	r3, r0
      }
 80098fa:	4618      	mov	r0, r3
 80098fc:	3710      	adds	r7, #16
 80098fe:	46bd      	mov	sp, r7
 8009900:	bd80      	pop	{r7, pc}

08009902 <_ZNKSt16initializer_listIcE4sizeEv>:
 8009902:	b480      	push	{r7}
 8009904:	b083      	sub	sp, #12
 8009906:	af00      	add	r7, sp, #0
 8009908:	6078      	str	r0, [r7, #4]
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	685b      	ldr	r3, [r3, #4]
 800990e:	4618      	mov	r0, r3
 8009910:	370c      	adds	r7, #12
 8009912:	46bd      	mov	sp, r7
 8009914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009918:	4770      	bx	lr

0800991a <_ZSt19__iterator_categoryIPKcENSt15iterator_traitsIT_E17iterator_categoryERKS3_>:
    __iterator_category(const _Iter&)
 800991a:	b480      	push	{r7}
 800991c:	b083      	sub	sp, #12
 800991e:	af00      	add	r7, sp, #0
 8009920:	6078      	str	r0, [r7, #4]
    { return typename iterator_traits<_Iter>::iterator_category(); }
 8009922:	4618      	mov	r0, r3
 8009924:	370c      	adds	r7, #12
 8009926:	46bd      	mov	sp, r7
 8009928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800992c:	4770      	bx	lr

0800992e <_ZSt10__distanceIPKcENSt15iterator_traitsIT_E15difference_typeES3_S3_St26random_access_iterator_tag>:
    __distance(_RandomAccessIterator __first, _RandomAccessIterator __last,
 800992e:	b480      	push	{r7}
 8009930:	b085      	sub	sp, #20
 8009932:	af00      	add	r7, sp, #0
 8009934:	60f8      	str	r0, [r7, #12]
 8009936:	60b9      	str	r1, [r7, #8]
 8009938:	713a      	strb	r2, [r7, #4]
      return __last - __first;
 800993a:	68ba      	ldr	r2, [r7, #8]
 800993c:	68fb      	ldr	r3, [r7, #12]
 800993e:	1ad3      	subs	r3, r2, r3
    }
 8009940:	4618      	mov	r0, r3
 8009942:	3714      	adds	r7, #20
 8009944:	46bd      	mov	sp, r7
 8009946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800994a:	4770      	bx	lr

0800994c <_ZNSt6vectorIcSaIcEE17_S_check_init_lenEjRKS0_>:
      _S_check_init_len(size_type __n, const allocator_type& __a)
 800994c:	b590      	push	{r4, r7, lr}
 800994e:	b085      	sub	sp, #20
 8009950:	af00      	add	r7, sp, #0
 8009952:	6078      	str	r0, [r7, #4]
 8009954:	6039      	str	r1, [r7, #0]
	if (__n > _S_max_size(_Tp_alloc_type(__a)))
 8009956:	f107 030c 	add.w	r3, r7, #12
 800995a:	6839      	ldr	r1, [r7, #0]
 800995c:	4618      	mov	r0, r3
 800995e:	f011 feeb 	bl	801b738 <_ZNSaIcEC1ERKS_>
 8009962:	f107 030c 	add.w	r3, r7, #12
 8009966:	4618      	mov	r0, r3
 8009968:	f001 f9a8 	bl	800acbc <_ZNSt6vectorIcSaIcEE11_S_max_sizeERKS0_>
 800996c:	4602      	mov	r2, r0
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	4293      	cmp	r3, r2
 8009972:	bf8c      	ite	hi
 8009974:	2301      	movhi	r3, #1
 8009976:	2300      	movls	r3, #0
 8009978:	b2dc      	uxtb	r4, r3
 800997a:	f107 030c 	add.w	r3, r7, #12
 800997e:	4618      	mov	r0, r3
 8009980:	f011 fedb 	bl	801b73a <_ZNSaIcED1Ev>
 8009984:	2c00      	cmp	r4, #0
 8009986:	d002      	beq.n	800998e <_ZNSt6vectorIcSaIcEE17_S_check_init_lenEjRKS0_+0x42>
	  __throw_length_error(
 8009988:	4803      	ldr	r0, [pc, #12]	; (8009998 <_ZNSt6vectorIcSaIcEE17_S_check_init_lenEjRKS0_+0x4c>)
 800998a:	f011 fedd 	bl	801b748 <_ZSt20__throw_length_errorPKc>
	return __n;
 800998e:	687b      	ldr	r3, [r7, #4]
      }
 8009990:	4618      	mov	r0, r3
 8009992:	3714      	adds	r7, #20
 8009994:	46bd      	mov	sp, r7
 8009996:	bd90      	pop	{r4, r7, pc}
 8009998:	0801f14c 	.word	0x0801f14c

0800999c <_ZNSt12_Vector_baseIcSaIcEE11_M_allocateEj>:
      _M_allocate(size_t __n)
 800999c:	b580      	push	{r7, lr}
 800999e:	b082      	sub	sp, #8
 80099a0:	af00      	add	r7, sp, #0
 80099a2:	6078      	str	r0, [r7, #4]
 80099a4:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 80099a6:	683b      	ldr	r3, [r7, #0]
 80099a8:	2b00      	cmp	r3, #0
 80099aa:	d006      	beq.n	80099ba <_ZNSt12_Vector_baseIcSaIcEE11_M_allocateEj+0x1e>
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	6839      	ldr	r1, [r7, #0]
 80099b0:	4618      	mov	r0, r3
 80099b2:	f001 f99d 	bl	800acf0 <_ZNSt16allocator_traitsISaIcEE8allocateERS0_j>
 80099b6:	4603      	mov	r3, r0
 80099b8:	e000      	b.n	80099bc <_ZNSt12_Vector_baseIcSaIcEE11_M_allocateEj+0x20>
 80099ba:	2300      	movs	r3, #0
      }
 80099bc:	4618      	mov	r0, r3
 80099be:	3708      	adds	r7, #8
 80099c0:	46bd      	mov	sp, r7
 80099c2:	bd80      	pop	{r7, pc}

080099c4 <_ZSt22__uninitialized_copy_aIPKcPccET0_T_S4_S3_RSaIT1_E>:
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 80099c4:	b580      	push	{r7, lr}
 80099c6:	b084      	sub	sp, #16
 80099c8:	af00      	add	r7, sp, #0
 80099ca:	60f8      	str	r0, [r7, #12]
 80099cc:	60b9      	str	r1, [r7, #8]
 80099ce:	607a      	str	r2, [r7, #4]
 80099d0:	603b      	str	r3, [r7, #0]
    { return std::uninitialized_copy(__first, __last, __result); }
 80099d2:	687a      	ldr	r2, [r7, #4]
 80099d4:	68b9      	ldr	r1, [r7, #8]
 80099d6:	68f8      	ldr	r0, [r7, #12]
 80099d8:	f001 f9a8 	bl	800ad2c <_ZSt18uninitialized_copyIPKcPcET0_T_S4_S3_>
 80099dc:	4603      	mov	r3, r0
 80099de:	4618      	mov	r0, r3
 80099e0:	3710      	adds	r7, #16
 80099e2:	46bd      	mov	sp, r7
 80099e4:	bd80      	pop	{r7, pc}

080099e6 <_ZSt12__niter_baseIPKcET_S2_>:
    __niter_base(_Iterator __it)
 80099e6:	b480      	push	{r7}
 80099e8:	b083      	sub	sp, #12
 80099ea:	af00      	add	r7, sp, #0
 80099ec:	6078      	str	r0, [r7, #4]
    { return __it; }
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	4618      	mov	r0, r3
 80099f2:	370c      	adds	r7, #12
 80099f4:	46bd      	mov	sp, r7
 80099f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099fa:	4770      	bx	lr

080099fc <_ZSt12__niter_baseIPcET_S1_>:
    __niter_base(_Iterator __it)
 80099fc:	b480      	push	{r7}
 80099fe:	b083      	sub	sp, #12
 8009a00:	af00      	add	r7, sp, #0
 8009a02:	6078      	str	r0, [r7, #4]
    { return __it; }
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	4618      	mov	r0, r3
 8009a08:	370c      	adds	r7, #12
 8009a0a:	46bd      	mov	sp, r7
 8009a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a10:	4770      	bx	lr

08009a12 <_ZSt14__copy_move_a1ILb0EPKcPcET1_T0_S4_S3_>:
    __copy_move_a1(_II __first, _II __last, _OI __result)
 8009a12:	b580      	push	{r7, lr}
 8009a14:	b084      	sub	sp, #16
 8009a16:	af00      	add	r7, sp, #0
 8009a18:	60f8      	str	r0, [r7, #12]
 8009a1a:	60b9      	str	r1, [r7, #8]
 8009a1c:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_a2<_IsMove>(__first, __last, __result); }
 8009a1e:	687a      	ldr	r2, [r7, #4]
 8009a20:	68b9      	ldr	r1, [r7, #8]
 8009a22:	68f8      	ldr	r0, [r7, #12]
 8009a24:	f001 f994 	bl	800ad50 <_ZSt14__copy_move_a2ILb0EPKcPcET1_T0_S4_S3_>
 8009a28:	4603      	mov	r3, r0
 8009a2a:	4618      	mov	r0, r3
 8009a2c:	3710      	adds	r7, #16
 8009a2e:	46bd      	mov	sp, r7
 8009a30:	bd80      	pop	{r7, pc}

08009a32 <_ZSt12__niter_wrapIPcET_RKS1_S1_>:
    __niter_wrap(const _Iterator&, _Iterator __res)
 8009a32:	b480      	push	{r7}
 8009a34:	b083      	sub	sp, #12
 8009a36:	af00      	add	r7, sp, #0
 8009a38:	6078      	str	r0, [r7, #4]
 8009a3a:	6039      	str	r1, [r7, #0]
    { return __res; }
 8009a3c:	683b      	ldr	r3, [r7, #0]
 8009a3e:	4618      	mov	r0, r3
 8009a40:	370c      	adds	r7, #12
 8009a42:	46bd      	mov	sp, r7
 8009a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a48:	4770      	bx	lr

08009a4a <_ZNSt16allocator_traitsISaIcEE10deallocateERS0_Pcj>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8009a4a:	b580      	push	{r7, lr}
 8009a4c:	b088      	sub	sp, #32
 8009a4e:	af00      	add	r7, sp, #0
 8009a50:	60f8      	str	r0, [r7, #12]
 8009a52:	60b9      	str	r1, [r7, #8]
 8009a54:	607a      	str	r2, [r7, #4]
 8009a56:	68fb      	ldr	r3, [r7, #12]
 8009a58:	61fb      	str	r3, [r7, #28]
 8009a5a:	68bb      	ldr	r3, [r7, #8]
 8009a5c:	61bb      	str	r3, [r7, #24]
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	617b      	str	r3, [r7, #20]
	if (std::is_constant_evaluated())
 8009a62:	f7f8 fbb3 	bl	80021cc <_ZSt21is_constant_evaluatedv>
 8009a66:	4603      	mov	r3, r0
 8009a68:	2b00      	cmp	r3, #0
 8009a6a:	d003      	beq.n	8009a74 <_ZNSt16allocator_traitsISaIcEE10deallocateERS0_Pcj+0x2a>
	    ::operator delete(__p);
 8009a6c:	69b8      	ldr	r0, [r7, #24]
 8009a6e:	f011 fe4d 	bl	801b70c <_ZdlPv>
	    return;
 8009a72:	e005      	b.n	8009a80 <_ZNSt16allocator_traitsISaIcEE10deallocateERS0_Pcj+0x36>
	__allocator_base<_Tp>::deallocate(__p, __n);
 8009a74:	697a      	ldr	r2, [r7, #20]
 8009a76:	69b9      	ldr	r1, [r7, #24]
 8009a78:	69f8      	ldr	r0, [r7, #28]
 8009a7a:	f001 ff31 	bl	800b8e0 <_ZN9__gnu_cxx13new_allocatorIcE10deallocateEPcj>
      { __a.deallocate(__p, __n); }
 8009a7e:	bf00      	nop
 8009a80:	bf00      	nop
 8009a82:	3720      	adds	r7, #32
 8009a84:	46bd      	mov	sp, r7
 8009a86:	bd80      	pop	{r7, pc}

08009a88 <_ZNK9__gnu_cxx17__normal_iteratorIPKcSt6vectorIcSaIcEEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 8009a88:	b480      	push	{r7}
 8009a8a:	b083      	sub	sp, #12
 8009a8c:	af00      	add	r7, sp, #0
 8009a8e:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	4618      	mov	r0, r3
 8009a94:	370c      	adds	r7, #12
 8009a96:	46bd      	mov	sp, r7
 8009a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a9c:	4770      	bx	lr

08009a9e <_ZN9__gnu_cxx5__ops16_Iter_equals_valIKcEC1ERS2_>:
      _Iter_equals_val(_Value& __value)
 8009a9e:	b480      	push	{r7}
 8009aa0:	b083      	sub	sp, #12
 8009aa2:	af00      	add	r7, sp, #0
 8009aa4:	6078      	str	r0, [r7, #4]
 8009aa6:	6039      	str	r1, [r7, #0]
	: _M_value(__value)
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	683a      	ldr	r2, [r7, #0]
 8009aac:	601a      	str	r2, [r3, #0]
      { }
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	4618      	mov	r0, r3
 8009ab2:	370c      	adds	r7, #12
 8009ab4:	46bd      	mov	sp, r7
 8009ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aba:	4770      	bx	lr

08009abc <_ZSt19__iterator_categoryIN9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEEENSt15iterator_traitsIT_E17iterator_categoryERKS8_>:
    __iterator_category(const _Iter&)
 8009abc:	b480      	push	{r7}
 8009abe:	b083      	sub	sp, #12
 8009ac0:	af00      	add	r7, sp, #0
 8009ac2:	6078      	str	r0, [r7, #4]
    { return typename iterator_traits<_Iter>::iterator_category(); }
 8009ac4:	4618      	mov	r0, r3
 8009ac6:	370c      	adds	r7, #12
 8009ac8:	46bd      	mov	sp, r7
 8009aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ace:	4770      	bx	lr

08009ad0 <_ZN9__gnu_cxxmiIPcSt6vectorIcSaIcEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS8_SB_>:
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
 8009ad0:	b590      	push	{r4, r7, lr}
 8009ad2:	b083      	sub	sp, #12
 8009ad4:	af00      	add	r7, sp, #0
 8009ad6:	6078      	str	r0, [r7, #4]
 8009ad8:	6039      	str	r1, [r7, #0]
    { return __lhs.base() - __rhs.base(); }
 8009ada:	6878      	ldr	r0, [r7, #4]
 8009adc:	f7fd f8bf 	bl	8006c5e <_ZNK9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEE4baseEv>
 8009ae0:	4603      	mov	r3, r0
 8009ae2:	681c      	ldr	r4, [r3, #0]
 8009ae4:	6838      	ldr	r0, [r7, #0]
 8009ae6:	f7fd f8ba 	bl	8006c5e <_ZNK9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEE4baseEv>
 8009aea:	4603      	mov	r3, r0
 8009aec:	681b      	ldr	r3, [r3, #0]
 8009aee:	1ae3      	subs	r3, r4, r3
 8009af0:	4618      	mov	r0, r3
 8009af2:	370c      	adds	r7, #12
 8009af4:	46bd      	mov	sp, r7
 8009af6:	bd90      	pop	{r4, r7, pc}

08009af8 <_ZNK9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 8009af8:	b480      	push	{r7}
 8009afa:	b083      	sub	sp, #12
 8009afc:	af00      	add	r7, sp, #0
 8009afe:	6078      	str	r0, [r7, #4]
      { return *_M_current; }
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	681b      	ldr	r3, [r3, #0]
 8009b04:	4618      	mov	r0, r3
 8009b06:	370c      	adds	r7, #12
 8009b08:	46bd      	mov	sp, r7
 8009b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b0e:	4770      	bx	lr

08009b10 <_ZN9__gnu_cxx5__ops16_Iter_equals_valIKcEclINS_17__normal_iteratorIPcSt6vectorIcSaIcEEEEEEbT_>:
	operator()(_Iterator __it)
 8009b10:	b580      	push	{r7, lr}
 8009b12:	b082      	sub	sp, #8
 8009b14:	af00      	add	r7, sp, #0
 8009b16:	6078      	str	r0, [r7, #4]
 8009b18:	6039      	str	r1, [r7, #0]
	{ return *__it == _M_value; }
 8009b1a:	463b      	mov	r3, r7
 8009b1c:	4618      	mov	r0, r3
 8009b1e:	f7ff ffeb 	bl	8009af8 <_ZNK9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEdeEv>
 8009b22:	4603      	mov	r3, r0
 8009b24:	781a      	ldrb	r2, [r3, #0]
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	681b      	ldr	r3, [r3, #0]
 8009b2a:	781b      	ldrb	r3, [r3, #0]
 8009b2c:	429a      	cmp	r2, r3
 8009b2e:	bf0c      	ite	eq
 8009b30:	2301      	moveq	r3, #1
 8009b32:	2300      	movne	r3, #0
 8009b34:	b2db      	uxtb	r3, r3
 8009b36:	4618      	mov	r0, r3
 8009b38:	3708      	adds	r7, #8
 8009b3a:	46bd      	mov	sp, r7
 8009b3c:	bd80      	pop	{r7, pc}

08009b3e <_ZN9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 8009b3e:	b480      	push	{r7}
 8009b40:	b083      	sub	sp, #12
 8009b42:	af00      	add	r7, sp, #0
 8009b44:	6078      	str	r0, [r7, #4]
	++_M_current;
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	681b      	ldr	r3, [r3, #0]
 8009b4a:	1c5a      	adds	r2, r3, #1
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	601a      	str	r2, [r3, #0]
	return *this;
 8009b50:	687b      	ldr	r3, [r7, #4]
      }
 8009b52:	4618      	mov	r0, r3
 8009b54:	370c      	adds	r7, #12
 8009b56:	46bd      	mov	sp, r7
 8009b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b5c:	4770      	bx	lr

08009b5e <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEENS0_5__ops16_Iter_equals_valIKcEEET_SB_SB_T0_St26random_access_iterator_tag>:
    __find_if(_RandomAccessIterator __first, _RandomAccessIterator __last,
 8009b5e:	b580      	push	{r7, lr}
 8009b60:	b086      	sub	sp, #24
 8009b62:	af00      	add	r7, sp, #0
 8009b64:	60f8      	str	r0, [r7, #12]
 8009b66:	60b9      	str	r1, [r7, #8]
 8009b68:	607a      	str	r2, [r7, #4]
 8009b6a:	703b      	strb	r3, [r7, #0]
	__trip_count = (__last - __first) >> 2;
 8009b6c:	f107 020c 	add.w	r2, r7, #12
 8009b70:	f107 0308 	add.w	r3, r7, #8
 8009b74:	4611      	mov	r1, r2
 8009b76:	4618      	mov	r0, r3
 8009b78:	f7ff ffaa 	bl	8009ad0 <_ZN9__gnu_cxxmiIPcSt6vectorIcSaIcEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS8_SB_>
 8009b7c:	4603      	mov	r3, r0
 8009b7e:	109b      	asrs	r3, r3, #2
 8009b80:	617b      	str	r3, [r7, #20]
      for (; __trip_count > 0; --__trip_count)
 8009b82:	e03e      	b.n	8009c02 <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEENS0_5__ops16_Iter_equals_valIKcEEET_SB_SB_T0_St26random_access_iterator_tag+0xa4>
	  if (__pred(__first))
 8009b84:	1d3b      	adds	r3, r7, #4
 8009b86:	68f9      	ldr	r1, [r7, #12]
 8009b88:	4618      	mov	r0, r3
 8009b8a:	f7ff ffc1 	bl	8009b10 <_ZN9__gnu_cxx5__ops16_Iter_equals_valIKcEclINS_17__normal_iteratorIPcSt6vectorIcSaIcEEEEEEbT_>
 8009b8e:	4603      	mov	r3, r0
 8009b90:	2b00      	cmp	r3, #0
 8009b92:	d001      	beq.n	8009b98 <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEENS0_5__ops16_Iter_equals_valIKcEEET_SB_SB_T0_St26random_access_iterator_tag+0x3a>
	    return __first;
 8009b94:	68fb      	ldr	r3, [r7, #12]
 8009b96:	e077      	b.n	8009c88 <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEENS0_5__ops16_Iter_equals_valIKcEEET_SB_SB_T0_St26random_access_iterator_tag+0x12a>
	  ++__first;
 8009b98:	f107 030c 	add.w	r3, r7, #12
 8009b9c:	4618      	mov	r0, r3
 8009b9e:	f7ff ffce 	bl	8009b3e <_ZN9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEppEv>
	  if (__pred(__first))
 8009ba2:	1d3b      	adds	r3, r7, #4
 8009ba4:	68f9      	ldr	r1, [r7, #12]
 8009ba6:	4618      	mov	r0, r3
 8009ba8:	f7ff ffb2 	bl	8009b10 <_ZN9__gnu_cxx5__ops16_Iter_equals_valIKcEclINS_17__normal_iteratorIPcSt6vectorIcSaIcEEEEEEbT_>
 8009bac:	4603      	mov	r3, r0
 8009bae:	2b00      	cmp	r3, #0
 8009bb0:	d001      	beq.n	8009bb6 <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEENS0_5__ops16_Iter_equals_valIKcEEET_SB_SB_T0_St26random_access_iterator_tag+0x58>
	    return __first;
 8009bb2:	68fb      	ldr	r3, [r7, #12]
 8009bb4:	e068      	b.n	8009c88 <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEENS0_5__ops16_Iter_equals_valIKcEEET_SB_SB_T0_St26random_access_iterator_tag+0x12a>
	  ++__first;
 8009bb6:	f107 030c 	add.w	r3, r7, #12
 8009bba:	4618      	mov	r0, r3
 8009bbc:	f7ff ffbf 	bl	8009b3e <_ZN9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEppEv>
	  if (__pred(__first))
 8009bc0:	1d3b      	adds	r3, r7, #4
 8009bc2:	68f9      	ldr	r1, [r7, #12]
 8009bc4:	4618      	mov	r0, r3
 8009bc6:	f7ff ffa3 	bl	8009b10 <_ZN9__gnu_cxx5__ops16_Iter_equals_valIKcEclINS_17__normal_iteratorIPcSt6vectorIcSaIcEEEEEEbT_>
 8009bca:	4603      	mov	r3, r0
 8009bcc:	2b00      	cmp	r3, #0
 8009bce:	d001      	beq.n	8009bd4 <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEENS0_5__ops16_Iter_equals_valIKcEEET_SB_SB_T0_St26random_access_iterator_tag+0x76>
	    return __first;
 8009bd0:	68fb      	ldr	r3, [r7, #12]
 8009bd2:	e059      	b.n	8009c88 <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEENS0_5__ops16_Iter_equals_valIKcEEET_SB_SB_T0_St26random_access_iterator_tag+0x12a>
	  ++__first;
 8009bd4:	f107 030c 	add.w	r3, r7, #12
 8009bd8:	4618      	mov	r0, r3
 8009bda:	f7ff ffb0 	bl	8009b3e <_ZN9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEppEv>
	  if (__pred(__first))
 8009bde:	1d3b      	adds	r3, r7, #4
 8009be0:	68f9      	ldr	r1, [r7, #12]
 8009be2:	4618      	mov	r0, r3
 8009be4:	f7ff ff94 	bl	8009b10 <_ZN9__gnu_cxx5__ops16_Iter_equals_valIKcEclINS_17__normal_iteratorIPcSt6vectorIcSaIcEEEEEEbT_>
 8009be8:	4603      	mov	r3, r0
 8009bea:	2b00      	cmp	r3, #0
 8009bec:	d001      	beq.n	8009bf2 <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEENS0_5__ops16_Iter_equals_valIKcEEET_SB_SB_T0_St26random_access_iterator_tag+0x94>
	    return __first;
 8009bee:	68fb      	ldr	r3, [r7, #12]
 8009bf0:	e04a      	b.n	8009c88 <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEENS0_5__ops16_Iter_equals_valIKcEEET_SB_SB_T0_St26random_access_iterator_tag+0x12a>
	  ++__first;
 8009bf2:	f107 030c 	add.w	r3, r7, #12
 8009bf6:	4618      	mov	r0, r3
 8009bf8:	f7ff ffa1 	bl	8009b3e <_ZN9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEppEv>
      for (; __trip_count > 0; --__trip_count)
 8009bfc:	697b      	ldr	r3, [r7, #20]
 8009bfe:	3b01      	subs	r3, #1
 8009c00:	617b      	str	r3, [r7, #20]
 8009c02:	697b      	ldr	r3, [r7, #20]
 8009c04:	2b00      	cmp	r3, #0
 8009c06:	dcbd      	bgt.n	8009b84 <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEENS0_5__ops16_Iter_equals_valIKcEEET_SB_SB_T0_St26random_access_iterator_tag+0x26>
      switch (__last - __first)
 8009c08:	f107 020c 	add.w	r2, r7, #12
 8009c0c:	f107 0308 	add.w	r3, r7, #8
 8009c10:	4611      	mov	r1, r2
 8009c12:	4618      	mov	r0, r3
 8009c14:	f7ff ff5c 	bl	8009ad0 <_ZN9__gnu_cxxmiIPcSt6vectorIcSaIcEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS8_SB_>
 8009c18:	4603      	mov	r3, r0
 8009c1a:	2b03      	cmp	r3, #3
 8009c1c:	d006      	beq.n	8009c2c <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEENS0_5__ops16_Iter_equals_valIKcEEET_SB_SB_T0_St26random_access_iterator_tag+0xce>
 8009c1e:	2b03      	cmp	r3, #3
 8009c20:	dc31      	bgt.n	8009c86 <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEENS0_5__ops16_Iter_equals_valIKcEEET_SB_SB_T0_St26random_access_iterator_tag+0x128>
 8009c22:	2b01      	cmp	r3, #1
 8009c24:	d020      	beq.n	8009c68 <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEENS0_5__ops16_Iter_equals_valIKcEEET_SB_SB_T0_St26random_access_iterator_tag+0x10a>
 8009c26:	2b02      	cmp	r3, #2
 8009c28:	d00f      	beq.n	8009c4a <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEENS0_5__ops16_Iter_equals_valIKcEEET_SB_SB_T0_St26random_access_iterator_tag+0xec>
 8009c2a:	e02c      	b.n	8009c86 <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEENS0_5__ops16_Iter_equals_valIKcEEET_SB_SB_T0_St26random_access_iterator_tag+0x128>
	  if (__pred(__first))
 8009c2c:	1d3b      	adds	r3, r7, #4
 8009c2e:	68f9      	ldr	r1, [r7, #12]
 8009c30:	4618      	mov	r0, r3
 8009c32:	f7ff ff6d 	bl	8009b10 <_ZN9__gnu_cxx5__ops16_Iter_equals_valIKcEclINS_17__normal_iteratorIPcSt6vectorIcSaIcEEEEEEbT_>
 8009c36:	4603      	mov	r3, r0
 8009c38:	2b00      	cmp	r3, #0
 8009c3a:	d001      	beq.n	8009c40 <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEENS0_5__ops16_Iter_equals_valIKcEEET_SB_SB_T0_St26random_access_iterator_tag+0xe2>
	    return __first;
 8009c3c:	68fb      	ldr	r3, [r7, #12]
 8009c3e:	e023      	b.n	8009c88 <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEENS0_5__ops16_Iter_equals_valIKcEEET_SB_SB_T0_St26random_access_iterator_tag+0x12a>
	  ++__first;
 8009c40:	f107 030c 	add.w	r3, r7, #12
 8009c44:	4618      	mov	r0, r3
 8009c46:	f7ff ff7a 	bl	8009b3e <_ZN9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEppEv>
	  if (__pred(__first))
 8009c4a:	1d3b      	adds	r3, r7, #4
 8009c4c:	68f9      	ldr	r1, [r7, #12]
 8009c4e:	4618      	mov	r0, r3
 8009c50:	f7ff ff5e 	bl	8009b10 <_ZN9__gnu_cxx5__ops16_Iter_equals_valIKcEclINS_17__normal_iteratorIPcSt6vectorIcSaIcEEEEEEbT_>
 8009c54:	4603      	mov	r3, r0
 8009c56:	2b00      	cmp	r3, #0
 8009c58:	d001      	beq.n	8009c5e <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEENS0_5__ops16_Iter_equals_valIKcEEET_SB_SB_T0_St26random_access_iterator_tag+0x100>
	    return __first;
 8009c5a:	68fb      	ldr	r3, [r7, #12]
 8009c5c:	e014      	b.n	8009c88 <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEENS0_5__ops16_Iter_equals_valIKcEEET_SB_SB_T0_St26random_access_iterator_tag+0x12a>
	  ++__first;
 8009c5e:	f107 030c 	add.w	r3, r7, #12
 8009c62:	4618      	mov	r0, r3
 8009c64:	f7ff ff6b 	bl	8009b3e <_ZN9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEppEv>
	  if (__pred(__first))
 8009c68:	1d3b      	adds	r3, r7, #4
 8009c6a:	68f9      	ldr	r1, [r7, #12]
 8009c6c:	4618      	mov	r0, r3
 8009c6e:	f7ff ff4f 	bl	8009b10 <_ZN9__gnu_cxx5__ops16_Iter_equals_valIKcEclINS_17__normal_iteratorIPcSt6vectorIcSaIcEEEEEEbT_>
 8009c72:	4603      	mov	r3, r0
 8009c74:	2b00      	cmp	r3, #0
 8009c76:	d001      	beq.n	8009c7c <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEENS0_5__ops16_Iter_equals_valIKcEEET_SB_SB_T0_St26random_access_iterator_tag+0x11e>
	    return __first;
 8009c78:	68fb      	ldr	r3, [r7, #12]
 8009c7a:	e005      	b.n	8009c88 <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEENS0_5__ops16_Iter_equals_valIKcEEET_SB_SB_T0_St26random_access_iterator_tag+0x12a>
	  ++__first;
 8009c7c:	f107 030c 	add.w	r3, r7, #12
 8009c80:	4618      	mov	r0, r3
 8009c82:	f7ff ff5c 	bl	8009b3e <_ZN9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEppEv>
	  return __last;
 8009c86:	68bb      	ldr	r3, [r7, #8]
    }
 8009c88:	4618      	mov	r0, r3
 8009c8a:	3718      	adds	r7, #24
 8009c8c:	46bd      	mov	sp, r7
 8009c8e:	bd80      	pop	{r7, pc}

08009c90 <_ZNKSt6vectorIfSaIfEE12_M_check_lenEjPKc>:
      _M_check_len(size_type __n, const char* __s) const
 8009c90:	b590      	push	{r4, r7, lr}
 8009c92:	b087      	sub	sp, #28
 8009c94:	af00      	add	r7, sp, #0
 8009c96:	60f8      	str	r0, [r7, #12]
 8009c98:	60b9      	str	r1, [r7, #8]
 8009c9a:	607a      	str	r2, [r7, #4]
	if (max_size() - size() < __n)
 8009c9c:	68f8      	ldr	r0, [r7, #12]
 8009c9e:	f001 f874 	bl	800ad8a <_ZNKSt6vectorIfSaIfEE8max_sizeEv>
 8009ca2:	4604      	mov	r4, r0
 8009ca4:	68f8      	ldr	r0, [r7, #12]
 8009ca6:	f7fd fc7c 	bl	80075a2 <_ZNKSt6vectorIfSaIfEE4sizeEv>
 8009caa:	4603      	mov	r3, r0
 8009cac:	1ae2      	subs	r2, r4, r3
 8009cae:	68bb      	ldr	r3, [r7, #8]
 8009cb0:	429a      	cmp	r2, r3
 8009cb2:	bf34      	ite	cc
 8009cb4:	2301      	movcc	r3, #1
 8009cb6:	2300      	movcs	r3, #0
 8009cb8:	b2db      	uxtb	r3, r3
 8009cba:	2b00      	cmp	r3, #0
 8009cbc:	d002      	beq.n	8009cc4 <_ZNKSt6vectorIfSaIfEE12_M_check_lenEjPKc+0x34>
	  __throw_length_error(__N(__s));
 8009cbe:	6878      	ldr	r0, [r7, #4]
 8009cc0:	f011 fd42 	bl	801b748 <_ZSt20__throw_length_errorPKc>
	const size_type __len = size() + (std::max)(size(), __n);
 8009cc4:	68f8      	ldr	r0, [r7, #12]
 8009cc6:	f7fd fc6c 	bl	80075a2 <_ZNKSt6vectorIfSaIfEE4sizeEv>
 8009cca:	4604      	mov	r4, r0
 8009ccc:	68f8      	ldr	r0, [r7, #12]
 8009cce:	f7fd fc68 	bl	80075a2 <_ZNKSt6vectorIfSaIfEE4sizeEv>
 8009cd2:	4603      	mov	r3, r0
 8009cd4:	613b      	str	r3, [r7, #16]
 8009cd6:	f107 0208 	add.w	r2, r7, #8
 8009cda:	f107 0310 	add.w	r3, r7, #16
 8009cde:	4611      	mov	r1, r2
 8009ce0:	4618      	mov	r0, r3
 8009ce2:	f7fe ff6b 	bl	8008bbc <_ZSt3maxIjERKT_S2_S2_>
 8009ce6:	4603      	mov	r3, r0
 8009ce8:	681b      	ldr	r3, [r3, #0]
 8009cea:	4423      	add	r3, r4
 8009cec:	617b      	str	r3, [r7, #20]
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 8009cee:	68f8      	ldr	r0, [r7, #12]
 8009cf0:	f7fd fc57 	bl	80075a2 <_ZNKSt6vectorIfSaIfEE4sizeEv>
 8009cf4:	4602      	mov	r2, r0
 8009cf6:	697b      	ldr	r3, [r7, #20]
 8009cf8:	4293      	cmp	r3, r2
 8009cfa:	d306      	bcc.n	8009d0a <_ZNKSt6vectorIfSaIfEE12_M_check_lenEjPKc+0x7a>
 8009cfc:	68f8      	ldr	r0, [r7, #12]
 8009cfe:	f001 f844 	bl	800ad8a <_ZNKSt6vectorIfSaIfEE8max_sizeEv>
 8009d02:	4602      	mov	r2, r0
 8009d04:	697b      	ldr	r3, [r7, #20]
 8009d06:	4293      	cmp	r3, r2
 8009d08:	d904      	bls.n	8009d14 <_ZNKSt6vectorIfSaIfEE12_M_check_lenEjPKc+0x84>
 8009d0a:	68f8      	ldr	r0, [r7, #12]
 8009d0c:	f001 f83d 	bl	800ad8a <_ZNKSt6vectorIfSaIfEE8max_sizeEv>
 8009d10:	4603      	mov	r3, r0
 8009d12:	e000      	b.n	8009d16 <_ZNKSt6vectorIfSaIfEE12_M_check_lenEjPKc+0x86>
 8009d14:	697b      	ldr	r3, [r7, #20]
      }
 8009d16:	4618      	mov	r0, r3
 8009d18:	371c      	adds	r7, #28
 8009d1a:	46bd      	mov	sp, r7
 8009d1c:	bd90      	pop	{r4, r7, pc}

08009d1e <_ZNSt6vectorIfSaIfEE11_S_relocateEPfS2_S2_RS0_>:
      _S_relocate(pointer __first, pointer __last, pointer __result,
 8009d1e:	b590      	push	{r4, r7, lr}
 8009d20:	b087      	sub	sp, #28
 8009d22:	af02      	add	r7, sp, #8
 8009d24:	60f8      	str	r0, [r7, #12]
 8009d26:	60b9      	str	r1, [r7, #8]
 8009d28:	607a      	str	r2, [r7, #4]
 8009d2a:	603b      	str	r3, [r7, #0]
	return _S_do_relocate(__first, __last, __result, __alloc, __do_it{});
 8009d2c:	f88d 4000 	strb.w	r4, [sp]
 8009d30:	683b      	ldr	r3, [r7, #0]
 8009d32:	687a      	ldr	r2, [r7, #4]
 8009d34:	68b9      	ldr	r1, [r7, #8]
 8009d36:	68f8      	ldr	r0, [r7, #12]
 8009d38:	f001 f838 	bl	800adac <_ZNSt6vectorIfSaIfEE14_S_do_relocateEPfS2_S2_RS0_St17integral_constantIbLb1EE>
 8009d3c:	4603      	mov	r3, r0
      }
 8009d3e:	4618      	mov	r0, r3
 8009d40:	3714      	adds	r7, #20
 8009d42:	46bd      	mov	sp, r7
 8009d44:	bd90      	pop	{r4, r7, pc}

08009d46 <_ZSt9iter_swapIPbS0_EvT_T0_>:
    iter_swap(_ForwardIterator1 __a, _ForwardIterator2 __b)
 8009d46:	b580      	push	{r7, lr}
 8009d48:	b082      	sub	sp, #8
 8009d4a:	af00      	add	r7, sp, #0
 8009d4c:	6078      	str	r0, [r7, #4]
 8009d4e:	6039      	str	r1, [r7, #0]
      swap(*__a, *__b);
 8009d50:	6839      	ldr	r1, [r7, #0]
 8009d52:	6878      	ldr	r0, [r7, #4]
 8009d54:	f001 f83c 	bl	800add0 <_ZSt4swapIbENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS4_ESt18is_move_assignableIS4_EEE5valueEvE4typeERS4_SE_>
    }
 8009d58:	bf00      	nop
 8009d5a:	3708      	adds	r7, #8
 8009d5c:	46bd      	mov	sp, r7
 8009d5e:	bd80      	pop	{r7, pc}

08009d60 <_ZNSt15_Deque_iteratorIfRfPfEC1Ev>:
      _Deque_iterator() _GLIBCXX_NOEXCEPT
 8009d60:	b480      	push	{r7}
 8009d62:	b083      	sub	sp, #12
 8009d64:	af00      	add	r7, sp, #0
 8009d66:	6078      	str	r0, [r7, #4]
      : _M_cur(), _M_first(), _M_last(), _M_node() { }
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	2200      	movs	r2, #0
 8009d6c:	601a      	str	r2, [r3, #0]
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	2200      	movs	r2, #0
 8009d72:	605a      	str	r2, [r3, #4]
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	2200      	movs	r2, #0
 8009d78:	609a      	str	r2, [r3, #8]
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	2200      	movs	r2, #0
 8009d7e:	60da      	str	r2, [r3, #12]
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	4618      	mov	r0, r3
 8009d84:	370c      	adds	r7, #12
 8009d86:	46bd      	mov	sp, r7
 8009d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d8c:	4770      	bx	lr

08009d8e <_ZNSt16allocator_traitsISaIPfEE8allocateERS1_j>:
      allocate(allocator_type& __a, size_type __n)
 8009d8e:	b580      	push	{r7, lr}
 8009d90:	b084      	sub	sp, #16
 8009d92:	af00      	add	r7, sp, #0
 8009d94:	6078      	str	r0, [r7, #4]
 8009d96:	6039      	str	r1, [r7, #0]
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	60fb      	str	r3, [r7, #12]
 8009d9c:	683b      	ldr	r3, [r7, #0]
 8009d9e:	60bb      	str	r3, [r7, #8]
	if (std::is_constant_evaluated())
 8009da0:	f7f8 fa14 	bl	80021cc <_ZSt21is_constant_evaluatedv>
 8009da4:	4603      	mov	r3, r0
 8009da6:	2b00      	cmp	r3, #0
 8009da8:	d006      	beq.n	8009db8 <_ZNSt16allocator_traitsISaIPfEE8allocateERS1_j+0x2a>
	  return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8009daa:	68bb      	ldr	r3, [r7, #8]
 8009dac:	009b      	lsls	r3, r3, #2
 8009dae:	4618      	mov	r0, r3
 8009db0:	f011 fcb0 	bl	801b714 <_Znwj>
 8009db4:	4603      	mov	r3, r0
 8009db6:	e006      	b.n	8009dc6 <_ZNSt16allocator_traitsISaIPfEE8allocateERS1_j+0x38>
	return __allocator_base<_Tp>::allocate(__n, 0);
 8009db8:	2200      	movs	r2, #0
 8009dba:	68b9      	ldr	r1, [r7, #8]
 8009dbc:	68f8      	ldr	r0, [r7, #12]
 8009dbe:	f001 fdea 	bl	800b996 <_ZN9__gnu_cxx13new_allocatorIPfE8allocateEjPKv>
 8009dc2:	4603      	mov	r3, r0
 8009dc4:	bf00      	nop
      { return __a.allocate(__n); }
 8009dc6:	4618      	mov	r0, r3
 8009dc8:	3710      	adds	r7, #16
 8009dca:	46bd      	mov	sp, r7
 8009dcc:	bd80      	pop	{r7, pc}

08009dce <_ZNKSt11_Deque_baseIfSaIfEE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 8009dce:	b480      	push	{r7}
 8009dd0:	b083      	sub	sp, #12
 8009dd2:	af00      	add	r7, sp, #0
 8009dd4:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	4618      	mov	r0, r3
 8009dda:	370c      	adds	r7, #12
 8009ddc:	46bd      	mov	sp, r7
 8009dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009de2:	4770      	bx	lr

08009de4 <_ZNSaIPfEC1IfEERKSaIT_E>:
	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }
 8009de4:	b580      	push	{r7, lr}
 8009de6:	b082      	sub	sp, #8
 8009de8:	af00      	add	r7, sp, #0
 8009dea:	6078      	str	r0, [r7, #4]
 8009dec:	6039      	str	r1, [r7, #0]
 8009dee:	6878      	ldr	r0, [r7, #4]
 8009df0:	f001 f80d 	bl	800ae0e <_ZN9__gnu_cxx13new_allocatorIPfEC1Ev>
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	4618      	mov	r0, r3
 8009df8:	3708      	adds	r7, #8
 8009dfa:	46bd      	mov	sp, r7
 8009dfc:	bd80      	pop	{r7, pc}

08009dfe <_ZNSt16allocator_traitsISaIfEE8max_sizeERKS0_>:
      max_size(const allocator_type& __a __attribute__((__unused__))) noexcept
 8009dfe:	b480      	push	{r7}
 8009e00:	b083      	sub	sp, #12
 8009e02:	af00      	add	r7, sp, #0
 8009e04:	6078      	str	r0, [r7, #4]
	return size_t(-1) / sizeof(value_type);
 8009e06:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
      }
 8009e0a:	4618      	mov	r0, r3
 8009e0c:	370c      	adds	r7, #12
 8009e0e:	46bd      	mov	sp, r7
 8009e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e14:	4770      	bx	lr

08009e16 <_ZNSt5dequeIfSaIfEE11_S_max_sizeERKS0_>:
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 8009e16:	b580      	push	{r7, lr}
 8009e18:	b084      	sub	sp, #16
 8009e1a:	af00      	add	r7, sp, #0
 8009e1c:	6078      	str	r0, [r7, #4]
	const size_t __diffmax = __gnu_cxx::__numeric_traits<ptrdiff_t>::__max;
 8009e1e:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8009e22:	60fb      	str	r3, [r7, #12]
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 8009e24:	6878      	ldr	r0, [r7, #4]
 8009e26:	f7ff ffea 	bl	8009dfe <_ZNSt16allocator_traitsISaIfEE8max_sizeERKS0_>
 8009e2a:	4603      	mov	r3, r0
 8009e2c:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 8009e2e:	f107 0208 	add.w	r2, r7, #8
 8009e32:	f107 030c 	add.w	r3, r7, #12
 8009e36:	4611      	mov	r1, r2
 8009e38:	4618      	mov	r0, r3
 8009e3a:	f001 f802 	bl	800ae42 <_ZSt3minIjERKT_S2_S2_>
 8009e3e:	4603      	mov	r3, r0
 8009e40:	681b      	ldr	r3, [r3, #0]
      }
 8009e42:	4618      	mov	r0, r3
 8009e44:	3710      	adds	r7, #16
 8009e46:	46bd      	mov	sp, r7
 8009e48:	bd80      	pop	{r7, pc}

08009e4a <_ZSt4copyIPPfS1_ET0_T_S3_S2_>:
    copy(_II __first, _II __last, _OI __result)
 8009e4a:	b590      	push	{r4, r7, lr}
 8009e4c:	b085      	sub	sp, #20
 8009e4e:	af00      	add	r7, sp, #0
 8009e50:	60f8      	str	r0, [r7, #12]
 8009e52:	60b9      	str	r1, [r7, #8]
 8009e54:	607a      	str	r2, [r7, #4]
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 8009e56:	68f8      	ldr	r0, [r7, #12]
 8009e58:	f001 f807 	bl	800ae6a <_ZSt12__miter_baseIPPfET_S2_>
 8009e5c:	4604      	mov	r4, r0
 8009e5e:	68b8      	ldr	r0, [r7, #8]
 8009e60:	f001 f803 	bl	800ae6a <_ZSt12__miter_baseIPPfET_S2_>
 8009e64:	4603      	mov	r3, r0
 8009e66:	687a      	ldr	r2, [r7, #4]
 8009e68:	4619      	mov	r1, r3
 8009e6a:	4620      	mov	r0, r4
 8009e6c:	f001 f808 	bl	800ae80 <_ZSt13__copy_move_aILb0EPPfS1_ET1_T0_S3_S2_>
 8009e70:	4603      	mov	r3, r0
    }
 8009e72:	4618      	mov	r0, r3
 8009e74:	3714      	adds	r7, #20
 8009e76:	46bd      	mov	sp, r7
 8009e78:	bd90      	pop	{r4, r7, pc}

08009e7a <_ZSt13copy_backwardIPPfS1_ET0_T_S3_S2_>:
    copy_backward(_BI1 __first, _BI1 __last, _BI2 __result)
 8009e7a:	b590      	push	{r4, r7, lr}
 8009e7c:	b085      	sub	sp, #20
 8009e7e:	af00      	add	r7, sp, #0
 8009e80:	60f8      	str	r0, [r7, #12]
 8009e82:	60b9      	str	r1, [r7, #8]
 8009e84:	607a      	str	r2, [r7, #4]
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 8009e86:	68f8      	ldr	r0, [r7, #12]
 8009e88:	f000 ffef 	bl	800ae6a <_ZSt12__miter_baseIPPfET_S2_>
 8009e8c:	4604      	mov	r4, r0
 8009e8e:	68b8      	ldr	r0, [r7, #8]
 8009e90:	f000 ffeb 	bl	800ae6a <_ZSt12__miter_baseIPPfET_S2_>
 8009e94:	4603      	mov	r3, r0
 8009e96:	687a      	ldr	r2, [r7, #4]
 8009e98:	4619      	mov	r1, r3
 8009e9a:	4620      	mov	r0, r4
 8009e9c:	f001 f813 	bl	800aec6 <_ZSt22__copy_move_backward_aILb0EPPfS1_ET1_T0_S3_S2_>
 8009ea0:	4603      	mov	r3, r0
    }
 8009ea2:	4618      	mov	r0, r3
 8009ea4:	3714      	adds	r7, #20
 8009ea6:	46bd      	mov	sp, r7
 8009ea8:	bd90      	pop	{r4, r7, pc}

08009eaa <_ZNSt5dequeIfSaIfEE17_M_reallocate_mapEjb>:
	}
    }

  template <typename _Tp, typename _Alloc>
    void
    deque<_Tp, _Alloc>::
 8009eaa:	b590      	push	{r4, r7, lr}
 8009eac:	b08b      	sub	sp, #44	; 0x2c
 8009eae:	af00      	add	r7, sp, #0
 8009eb0:	60f8      	str	r0, [r7, #12]
 8009eb2:	60b9      	str	r1, [r7, #8]
 8009eb4:	4613      	mov	r3, r2
 8009eb6:	71fb      	strb	r3, [r7, #7]
    _M_reallocate_map(size_type __nodes_to_add, bool __add_at_front)
    {
      const size_type __old_num_nodes
	= this->_M_impl._M_finish._M_node - this->_M_impl._M_start._M_node + 1;
 8009eb8:	68fb      	ldr	r3, [r7, #12]
 8009eba:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009ebc:	68fb      	ldr	r3, [r7, #12]
 8009ebe:	695b      	ldr	r3, [r3, #20]
 8009ec0:	1ad3      	subs	r3, r2, r3
 8009ec2:	109b      	asrs	r3, r3, #2
 8009ec4:	3301      	adds	r3, #1
      const size_type __old_num_nodes
 8009ec6:	623b      	str	r3, [r7, #32]
      const size_type __new_num_nodes = __old_num_nodes + __nodes_to_add;
 8009ec8:	68bb      	ldr	r3, [r7, #8]
 8009eca:	6a3a      	ldr	r2, [r7, #32]
 8009ecc:	4413      	add	r3, r2
 8009ece:	61fb      	str	r3, [r7, #28]

      _Map_pointer __new_nstart;
      if (this->_M_impl._M_map_size > 2 * __new_num_nodes)
 8009ed0:	68fb      	ldr	r3, [r7, #12]
 8009ed2:	685a      	ldr	r2, [r3, #4]
 8009ed4:	69fb      	ldr	r3, [r7, #28]
 8009ed6:	005b      	lsls	r3, r3, #1
 8009ed8:	429a      	cmp	r2, r3
 8009eda:	d92d      	bls.n	8009f38 <_ZNSt5dequeIfSaIfEE17_M_reallocate_mapEjb+0x8e>
	{
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
 8009edc:	68fb      	ldr	r3, [r7, #12]
 8009ede:	681a      	ldr	r2, [r3, #0]
 8009ee0:	68fb      	ldr	r3, [r7, #12]
 8009ee2:	6859      	ldr	r1, [r3, #4]
					 - __new_num_nodes) / 2
 8009ee4:	69fb      	ldr	r3, [r7, #28]
 8009ee6:	1acb      	subs	r3, r1, r3
 8009ee8:	085b      	lsrs	r3, r3, #1
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
 8009eea:	0099      	lsls	r1, r3, #2
			 + (__add_at_front ? __nodes_to_add : 0);
 8009eec:	79fb      	ldrb	r3, [r7, #7]
 8009eee:	2b00      	cmp	r3, #0
 8009ef0:	d002      	beq.n	8009ef8 <_ZNSt5dequeIfSaIfEE17_M_reallocate_mapEjb+0x4e>
 8009ef2:	68bb      	ldr	r3, [r7, #8]
 8009ef4:	009b      	lsls	r3, r3, #2
 8009ef6:	e000      	b.n	8009efa <_ZNSt5dequeIfSaIfEE17_M_reallocate_mapEjb+0x50>
 8009ef8:	2300      	movs	r3, #0
 8009efa:	440b      	add	r3, r1
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
 8009efc:	4413      	add	r3, r2
 8009efe:	627b      	str	r3, [r7, #36]	; 0x24
	  if (__new_nstart < this->_M_impl._M_start._M_node)
 8009f00:	68fb      	ldr	r3, [r7, #12]
 8009f02:	695b      	ldr	r3, [r3, #20]
 8009f04:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009f06:	429a      	cmp	r2, r3
 8009f08:	d209      	bcs.n	8009f1e <_ZNSt5dequeIfSaIfEE17_M_reallocate_mapEjb+0x74>
	    std::copy(this->_M_impl._M_start._M_node,
 8009f0a:	68fb      	ldr	r3, [r7, #12]
 8009f0c:	6958      	ldr	r0, [r3, #20]
		      this->_M_impl._M_finish._M_node + 1,
 8009f0e:	68fb      	ldr	r3, [r7, #12]
 8009f10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	    std::copy(this->_M_impl._M_start._M_node,
 8009f12:	3304      	adds	r3, #4
 8009f14:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009f16:	4619      	mov	r1, r3
 8009f18:	f7ff ff97 	bl	8009e4a <_ZSt4copyIPPfS1_ET0_T_S3_S2_>
 8009f1c:	e048      	b.n	8009fb0 <_ZNSt5dequeIfSaIfEE17_M_reallocate_mapEjb+0x106>
		      __new_nstart);
	  else
	    std::copy_backward(this->_M_impl._M_start._M_node,
 8009f1e:	68fb      	ldr	r3, [r7, #12]
 8009f20:	6958      	ldr	r0, [r3, #20]
			       this->_M_impl._M_finish._M_node + 1,
 8009f22:	68fb      	ldr	r3, [r7, #12]
 8009f24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	    std::copy_backward(this->_M_impl._M_start._M_node,
 8009f26:	1d19      	adds	r1, r3, #4
			       __new_nstart + __old_num_nodes);
 8009f28:	6a3b      	ldr	r3, [r7, #32]
 8009f2a:	009b      	lsls	r3, r3, #2
	    std::copy_backward(this->_M_impl._M_start._M_node,
 8009f2c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009f2e:	4413      	add	r3, r2
 8009f30:	461a      	mov	r2, r3
 8009f32:	f7ff ffa2 	bl	8009e7a <_ZSt13copy_backwardIPPfS1_ET0_T_S3_S2_>
 8009f36:	e03b      	b.n	8009fb0 <_ZNSt5dequeIfSaIfEE17_M_reallocate_mapEjb+0x106>
	}
      else
	{
	  size_type __new_map_size = this->_M_impl._M_map_size
 8009f38:	68fb      	ldr	r3, [r7, #12]
 8009f3a:	685c      	ldr	r4, [r3, #4]
				     + std::max(this->_M_impl._M_map_size,
 8009f3c:	68fb      	ldr	r3, [r7, #12]
 8009f3e:	3304      	adds	r3, #4
 8009f40:	f107 0208 	add.w	r2, r7, #8
 8009f44:	4611      	mov	r1, r2
 8009f46:	4618      	mov	r0, r3
 8009f48:	f7fe fe38 	bl	8008bbc <_ZSt3maxIjERKT_S2_S2_>
 8009f4c:	4603      	mov	r3, r0
 8009f4e:	681b      	ldr	r3, [r3, #0]
 8009f50:	4423      	add	r3, r4
	  size_type __new_map_size = this->_M_impl._M_map_size
 8009f52:	3302      	adds	r3, #2
 8009f54:	61bb      	str	r3, [r7, #24]
						__nodes_to_add) + 2;

	  _Map_pointer __new_map = this->_M_allocate_map(__new_map_size);
 8009f56:	68fb      	ldr	r3, [r7, #12]
 8009f58:	69b9      	ldr	r1, [r7, #24]
 8009f5a:	4618      	mov	r0, r3
 8009f5c:	f7fe fe42 	bl	8008be4 <_ZNSt11_Deque_baseIfSaIfEE15_M_allocate_mapEj>
 8009f60:	6178      	str	r0, [r7, #20]
	  __new_nstart = __new_map + (__new_map_size - __new_num_nodes) / 2
 8009f62:	69ba      	ldr	r2, [r7, #24]
 8009f64:	69fb      	ldr	r3, [r7, #28]
 8009f66:	1ad3      	subs	r3, r2, r3
 8009f68:	085b      	lsrs	r3, r3, #1
 8009f6a:	009a      	lsls	r2, r3, #2
			 + (__add_at_front ? __nodes_to_add : 0);
 8009f6c:	79fb      	ldrb	r3, [r7, #7]
 8009f6e:	2b00      	cmp	r3, #0
 8009f70:	d002      	beq.n	8009f78 <_ZNSt5dequeIfSaIfEE17_M_reallocate_mapEjb+0xce>
 8009f72:	68bb      	ldr	r3, [r7, #8]
 8009f74:	009b      	lsls	r3, r3, #2
 8009f76:	e000      	b.n	8009f7a <_ZNSt5dequeIfSaIfEE17_M_reallocate_mapEjb+0xd0>
 8009f78:	2300      	movs	r3, #0
 8009f7a:	4413      	add	r3, r2
	  __new_nstart = __new_map + (__new_map_size - __new_num_nodes) / 2
 8009f7c:	697a      	ldr	r2, [r7, #20]
 8009f7e:	4413      	add	r3, r2
 8009f80:	627b      	str	r3, [r7, #36]	; 0x24
	  std::copy(this->_M_impl._M_start._M_node,
 8009f82:	68fb      	ldr	r3, [r7, #12]
 8009f84:	6958      	ldr	r0, [r3, #20]
		    this->_M_impl._M_finish._M_node + 1,
 8009f86:	68fb      	ldr	r3, [r7, #12]
 8009f88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	  std::copy(this->_M_impl._M_start._M_node,
 8009f8a:	3304      	adds	r3, #4
 8009f8c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009f8e:	4619      	mov	r1, r3
 8009f90:	f7ff ff5b 	bl	8009e4a <_ZSt4copyIPPfS1_ET0_T_S3_S2_>
		    __new_nstart);
	  _M_deallocate_map(this->_M_impl._M_map, this->_M_impl._M_map_size);
 8009f94:	68f8      	ldr	r0, [r7, #12]
 8009f96:	68fb      	ldr	r3, [r7, #12]
 8009f98:	6819      	ldr	r1, [r3, #0]
 8009f9a:	68fb      	ldr	r3, [r7, #12]
 8009f9c:	685b      	ldr	r3, [r3, #4]
 8009f9e:	461a      	mov	r2, r3
 8009fa0:	f7fd ff4e 	bl	8007e40 <_ZNSt11_Deque_baseIfSaIfEE17_M_deallocate_mapEPPfj>

	  this->_M_impl._M_map = __new_map;
 8009fa4:	68fb      	ldr	r3, [r7, #12]
 8009fa6:	697a      	ldr	r2, [r7, #20]
 8009fa8:	601a      	str	r2, [r3, #0]
	  this->_M_impl._M_map_size = __new_map_size;
 8009faa:	68fb      	ldr	r3, [r7, #12]
 8009fac:	69ba      	ldr	r2, [r7, #24]
 8009fae:	605a      	str	r2, [r3, #4]
	}

      this->_M_impl._M_start._M_set_node(__new_nstart);
 8009fb0:	68fb      	ldr	r3, [r7, #12]
 8009fb2:	3308      	adds	r3, #8
 8009fb4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009fb6:	4618      	mov	r0, r3
 8009fb8:	f7fe fe4c 	bl	8008c54 <_ZNSt15_Deque_iteratorIfRfPfE11_M_set_nodeEPS1_>
      this->_M_impl._M_finish._M_set_node(__new_nstart + __old_num_nodes - 1);
 8009fbc:	68fb      	ldr	r3, [r7, #12]
 8009fbe:	f103 0018 	add.w	r0, r3, #24
 8009fc2:	6a3b      	ldr	r3, [r7, #32]
 8009fc4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8009fc8:	3b01      	subs	r3, #1
 8009fca:	009b      	lsls	r3, r3, #2
 8009fcc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009fce:	4413      	add	r3, r2
 8009fd0:	4619      	mov	r1, r3
 8009fd2:	f7fe fe3f 	bl	8008c54 <_ZNSt15_Deque_iteratorIfRfPfE11_M_set_nodeEPS1_>
    }
 8009fd6:	bf00      	nop
 8009fd8:	372c      	adds	r7, #44	; 0x2c
 8009fda:	46bd      	mov	sp, r7
 8009fdc:	bd90      	pop	{r4, r7, pc}

08009fde <_ZNSt16allocator_traitsISaIfEE8allocateERS0_j>:
      allocate(allocator_type& __a, size_type __n)
 8009fde:	b580      	push	{r7, lr}
 8009fe0:	b084      	sub	sp, #16
 8009fe2:	af00      	add	r7, sp, #0
 8009fe4:	6078      	str	r0, [r7, #4]
 8009fe6:	6039      	str	r1, [r7, #0]
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	60fb      	str	r3, [r7, #12]
 8009fec:	683b      	ldr	r3, [r7, #0]
 8009fee:	60bb      	str	r3, [r7, #8]
	if (std::is_constant_evaluated())
 8009ff0:	f7f8 f8ec 	bl	80021cc <_ZSt21is_constant_evaluatedv>
 8009ff4:	4603      	mov	r3, r0
 8009ff6:	2b00      	cmp	r3, #0
 8009ff8:	d006      	beq.n	800a008 <_ZNSt16allocator_traitsISaIfEE8allocateERS0_j+0x2a>
	  return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8009ffa:	68bb      	ldr	r3, [r7, #8]
 8009ffc:	009b      	lsls	r3, r3, #2
 8009ffe:	4618      	mov	r0, r3
 800a000:	f011 fb88 	bl	801b714 <_Znwj>
 800a004:	4603      	mov	r3, r0
 800a006:	e006      	b.n	800a016 <_ZNSt16allocator_traitsISaIfEE8allocateERS0_j+0x38>
	return __allocator_base<_Tp>::allocate(__n, 0);
 800a008:	2200      	movs	r2, #0
 800a00a:	68b9      	ldr	r1, [r7, #8]
 800a00c:	68f8      	ldr	r0, [r7, #12]
 800a00e:	f001 fd2f 	bl	800ba70 <_ZN9__gnu_cxx13new_allocatorIfE8allocateEjPKv>
 800a012:	4603      	mov	r3, r0
 800a014:	bf00      	nop
      { return __a.allocate(__n); }
 800a016:	4618      	mov	r0, r3
 800a018:	3710      	adds	r7, #16
 800a01a:	46bd      	mov	sp, r7
 800a01c:	bd80      	pop	{r7, pc}

0800a01e <_ZNSt12_Destroy_auxILb0EE9__destroyIPfEEvT_S3_>:
	__destroy(_ForwardIterator __first, _ForwardIterator __last)
 800a01e:	b580      	push	{r7, lr}
 800a020:	b082      	sub	sp, #8
 800a022:	af00      	add	r7, sp, #0
 800a024:	6078      	str	r0, [r7, #4]
 800a026:	6039      	str	r1, [r7, #0]
	  for (; __first != __last; ++__first)
 800a028:	e009      	b.n	800a03e <_ZNSt12_Destroy_auxILb0EE9__destroyIPfEEvT_S3_+0x20>
	    std::_Destroy(std::__addressof(*__first));
 800a02a:	6878      	ldr	r0, [r7, #4]
 800a02c:	f000 ff7d 	bl	800af2a <_ZSt11__addressofIfEPT_RS0_>
 800a030:	4603      	mov	r3, r0
 800a032:	4618      	mov	r0, r3
 800a034:	f000 ff84 	bl	800af40 <_ZSt8_DestroyIfEvPT_>
	  for (; __first != __last; ++__first)
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	3304      	adds	r3, #4
 800a03c:	607b      	str	r3, [r7, #4]
 800a03e:	687a      	ldr	r2, [r7, #4]
 800a040:	683b      	ldr	r3, [r7, #0]
 800a042:	429a      	cmp	r2, r3
 800a044:	d1f1      	bne.n	800a02a <_ZNSt12_Destroy_auxILb0EE9__destroyIPfEEvT_S3_+0xc>
	}
 800a046:	bf00      	nop
 800a048:	bf00      	nop
 800a04a:	3708      	adds	r7, #8
 800a04c:	46bd      	mov	sp, r7
 800a04e:	bd80      	pop	{r7, pc}

0800a050 <_ZNSt12_Destroy_auxILb1EE9__destroyIPfEEvT_S3_>:
        __destroy(_ForwardIterator, _ForwardIterator) { }
 800a050:	b480      	push	{r7}
 800a052:	b083      	sub	sp, #12
 800a054:	af00      	add	r7, sp, #0
 800a056:	6078      	str	r0, [r7, #4]
 800a058:	6039      	str	r1, [r7, #0]
 800a05a:	bf00      	nop
 800a05c:	370c      	adds	r7, #12
 800a05e:	46bd      	mov	sp, r7
 800a060:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a064:	4770      	bx	lr

0800a066 <_ZSt14__partial_sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_S9_T0_>:
    __partial_sort(_RandomAccessIterator __first,
 800a066:	b590      	push	{r4, r7, lr}
 800a068:	b085      	sub	sp, #20
 800a06a:	af00      	add	r7, sp, #0
 800a06c:	60f8      	str	r0, [r7, #12]
 800a06e:	60b9      	str	r1, [r7, #8]
 800a070:	607a      	str	r2, [r7, #4]
 800a072:	703b      	strb	r3, [r7, #0]
      std::__heap_select(__first, __middle, __last, __comp);
 800a074:	4623      	mov	r3, r4
 800a076:	687a      	ldr	r2, [r7, #4]
 800a078:	68b9      	ldr	r1, [r7, #8]
 800a07a:	68f8      	ldr	r0, [r7, #12]
 800a07c:	f000 ffa2 	bl	800afc4 <_ZSt13__heap_selectIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_S9_T0_>
      std::__sort_heap(__first, __middle, __comp);
 800a080:	463b      	mov	r3, r7
 800a082:	461a      	mov	r2, r3
 800a084:	68b9      	ldr	r1, [r7, #8]
 800a086:	68f8      	ldr	r0, [r7, #12]
 800a088:	f000 ffea 	bl	800b060 <_ZSt11__sort_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_RT0_>
    }
 800a08c:	bf00      	nop
 800a08e:	3714      	adds	r7, #20
 800a090:	46bd      	mov	sp, r7
 800a092:	bd90      	pop	{r4, r7, pc}

0800a094 <_ZSt27__unguarded_partition_pivotIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEET_S9_S9_T0_>:
    __unguarded_partition_pivot(_RandomAccessIterator __first,
 800a094:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a096:	b089      	sub	sp, #36	; 0x24
 800a098:	af02      	add	r7, sp, #8
 800a09a:	60f8      	str	r0, [r7, #12]
 800a09c:	60b9      	str	r1, [r7, #8]
 800a09e:	713a      	strb	r2, [r7, #4]
      _RandomAccessIterator __mid = __first + (__last - __first) / 2;
 800a0a0:	f107 020c 	add.w	r2, r7, #12
 800a0a4:	f107 0308 	add.w	r3, r7, #8
 800a0a8:	4611      	mov	r1, r2
 800a0aa:	4618      	mov	r0, r3
 800a0ac:	f7fe f8c3 	bl	8008236 <_ZN9__gnu_cxxmiIPfSt6vectorIfSaIfEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS8_SB_>
 800a0b0:	4603      	mov	r3, r0
 800a0b2:	0fda      	lsrs	r2, r3, #31
 800a0b4:	4413      	add	r3, r2
 800a0b6:	105b      	asrs	r3, r3, #1
 800a0b8:	461a      	mov	r2, r3
 800a0ba:	f107 030c 	add.w	r3, r7, #12
 800a0be:	4611      	mov	r1, r2
 800a0c0:	4618      	mov	r0, r3
 800a0c2:	f000 f827 	bl	800a114 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEplEi>
 800a0c6:	4603      	mov	r3, r0
 800a0c8:	617b      	str	r3, [r7, #20]
      std::__move_median_to_first(__first, __first + 1, __mid, __last - 1,
 800a0ca:	f107 030c 	add.w	r3, r7, #12
 800a0ce:	2101      	movs	r1, #1
 800a0d0:	4618      	mov	r0, r3
 800a0d2:	f000 f81f 	bl	800a114 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEplEi>
 800a0d6:	4604      	mov	r4, r0
 800a0d8:	f107 0308 	add.w	r3, r7, #8
 800a0dc:	2101      	movs	r1, #1
 800a0de:	4618      	mov	r0, r3
 800a0e0:	f000 ffe5 	bl	800b0ae <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEmiEi>
 800a0e4:	4603      	mov	r3, r0
 800a0e6:	f88d 5000 	strb.w	r5, [sp]
 800a0ea:	697a      	ldr	r2, [r7, #20]
 800a0ec:	4621      	mov	r1, r4
 800a0ee:	68f8      	ldr	r0, [r7, #12]
 800a0f0:	f000 fff6 	bl	800b0e0 <_ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_S9_S9_T0_>
      return std::__unguarded_partition(__first + 1, __last, __first, __comp);
 800a0f4:	f107 030c 	add.w	r3, r7, #12
 800a0f8:	2101      	movs	r1, #1
 800a0fa:	4618      	mov	r0, r3
 800a0fc:	f000 f80a 	bl	800a114 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEplEi>
 800a100:	4633      	mov	r3, r6
 800a102:	68fa      	ldr	r2, [r7, #12]
 800a104:	68b9      	ldr	r1, [r7, #8]
 800a106:	f001 f840 	bl	800b18a <_ZSt21__unguarded_partitionIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEET_S9_S9_S9_T0_>
 800a10a:	4603      	mov	r3, r0
    }
 800a10c:	4618      	mov	r0, r3
 800a10e:	371c      	adds	r7, #28
 800a110:	46bd      	mov	sp, r7
 800a112:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800a114 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEplEi>:
      operator+(difference_type __n) const _GLIBCXX_NOEXCEPT
 800a114:	b580      	push	{r7, lr}
 800a116:	b084      	sub	sp, #16
 800a118:	af00      	add	r7, sp, #0
 800a11a:	6078      	str	r0, [r7, #4]
 800a11c:	6039      	str	r1, [r7, #0]
      { return __normal_iterator(_M_current + __n); }
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	681a      	ldr	r2, [r3, #0]
 800a122:	683b      	ldr	r3, [r7, #0]
 800a124:	009b      	lsls	r3, r3, #2
 800a126:	4413      	add	r3, r2
 800a128:	60fb      	str	r3, [r7, #12]
 800a12a:	f107 020c 	add.w	r2, r7, #12
 800a12e:	f107 0308 	add.w	r3, r7, #8
 800a132:	4611      	mov	r1, r2
 800a134:	4618      	mov	r0, r3
 800a136:	f7fe f84b 	bl	80081d0 <_ZN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEC1ERKS1_>
 800a13a:	68bb      	ldr	r3, [r7, #8]
 800a13c:	4618      	mov	r0, r3
 800a13e:	3710      	adds	r7, #16
 800a140:	46bd      	mov	sp, r7
 800a142:	bd80      	pop	{r7, pc}

0800a144 <_ZN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 800a144:	b480      	push	{r7}
 800a146:	b083      	sub	sp, #12
 800a148:	af00      	add	r7, sp, #0
 800a14a:	6078      	str	r0, [r7, #4]
	++_M_current;
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	681b      	ldr	r3, [r3, #0]
 800a150:	1d1a      	adds	r2, r3, #4
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	601a      	str	r2, [r3, #0]
	return *this;
 800a156:	687b      	ldr	r3, [r7, #4]
      }
 800a158:	4618      	mov	r0, r3
 800a15a:	370c      	adds	r7, #12
 800a15c:	46bd      	mov	sp, r7
 800a15e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a162:	4770      	bx	lr

0800a164 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 800a164:	b480      	push	{r7}
 800a166:	b083      	sub	sp, #12
 800a168:	af00      	add	r7, sp, #0
 800a16a:	6078      	str	r0, [r7, #4]
      { return *_M_current; }
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	681b      	ldr	r3, [r3, #0]
 800a170:	4618      	mov	r0, r3
 800a172:	370c      	adds	r7, #12
 800a174:	46bd      	mov	sp, r7
 800a176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a17a:	4770      	bx	lr

0800a17c <_ZNK9__gnu_cxx5__ops15_Iter_less_iterclINS_17__normal_iteratorIPfSt6vectorIfSaIfEEEES8_EEbT_T0_>:
      operator()(_Iterator1 __it1, _Iterator2 __it2) const
 800a17c:	b580      	push	{r7, lr}
 800a17e:	ed2d 8b02 	vpush	{d8}
 800a182:	b084      	sub	sp, #16
 800a184:	af00      	add	r7, sp, #0
 800a186:	60f8      	str	r0, [r7, #12]
 800a188:	60b9      	str	r1, [r7, #8]
 800a18a:	607a      	str	r2, [r7, #4]
      { return *__it1 < *__it2; }
 800a18c:	f107 0308 	add.w	r3, r7, #8
 800a190:	4618      	mov	r0, r3
 800a192:	f7ff ffe7 	bl	800a164 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEdeEv>
 800a196:	4603      	mov	r3, r0
 800a198:	ed93 8a00 	vldr	s16, [r3]
 800a19c:	1d3b      	adds	r3, r7, #4
 800a19e:	4618      	mov	r0, r3
 800a1a0:	f7ff ffe0 	bl	800a164 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEdeEv>
 800a1a4:	4603      	mov	r3, r0
 800a1a6:	edd3 7a00 	vldr	s15, [r3]
 800a1aa:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800a1ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a1b2:	bf4c      	ite	mi
 800a1b4:	2301      	movmi	r3, #1
 800a1b6:	2300      	movpl	r3, #0
 800a1b8:	b2db      	uxtb	r3, r3
 800a1ba:	4618      	mov	r0, r3
 800a1bc:	3710      	adds	r7, #16
 800a1be:	46bd      	mov	sp, r7
 800a1c0:	ecbd 8b02 	vpop	{d8}
 800a1c4:	bd80      	pop	{r7, pc}

0800a1c6 <_ZSt13move_backwardIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEES6_ET0_T_S8_S7_>:
    move_backward(_BI1 __first, _BI1 __last, _BI2 __result)
 800a1c6:	b590      	push	{r4, r7, lr}
 800a1c8:	b085      	sub	sp, #20
 800a1ca:	af00      	add	r7, sp, #0
 800a1cc:	60f8      	str	r0, [r7, #12]
 800a1ce:	60b9      	str	r1, [r7, #8]
 800a1d0:	607a      	str	r2, [r7, #4]
      return std::__copy_move_backward_a<true>(std::__miter_base(__first),
 800a1d2:	68f8      	ldr	r0, [r7, #12]
 800a1d4:	f001 f82c 	bl	800b230 <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEET_S7_>
 800a1d8:	4604      	mov	r4, r0
 800a1da:	68b8      	ldr	r0, [r7, #8]
 800a1dc:	f001 f828 	bl	800b230 <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEET_S7_>
 800a1e0:	4603      	mov	r3, r0
 800a1e2:	687a      	ldr	r2, [r7, #4]
 800a1e4:	4619      	mov	r1, r3
 800a1e6:	4620      	mov	r0, r4
 800a1e8:	f001 f82d 	bl	800b246 <_ZSt22__copy_move_backward_aILb1EN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEES6_ET1_T0_S8_S7_>
 800a1ec:	4603      	mov	r3, r0
    }
 800a1ee:	4618      	mov	r0, r3
 800a1f0:	3714      	adds	r7, #20
 800a1f2:	46bd      	mov	sp, r7
 800a1f4:	bd90      	pop	{r4, r7, pc}

0800a1f6 <_ZSt16__insertion_sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_T0_>:
    __insertion_sort(_RandomAccessIterator __first,
 800a1f6:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a1f8:	b087      	sub	sp, #28
 800a1fa:	af00      	add	r7, sp, #0
 800a1fc:	60f8      	str	r0, [r7, #12]
 800a1fe:	60b9      	str	r1, [r7, #8]
 800a200:	713a      	strb	r2, [r7, #4]
      if (__first == __last) return;
 800a202:	f107 0208 	add.w	r2, r7, #8
 800a206:	f107 030c 	add.w	r3, r7, #12
 800a20a:	4611      	mov	r1, r2
 800a20c:	4618      	mov	r0, r3
 800a20e:	f7fd fffa 	bl	8008206 <_ZN9__gnu_cxxeqIPfSt6vectorIfSaIfEEEEbRKNS_17__normal_iteratorIT_T0_EESA_>
 800a212:	4603      	mov	r3, r0
 800a214:	2b00      	cmp	r3, #0
 800a216:	d153      	bne.n	800a2c0 <_ZSt16__insertion_sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_T0_+0xca>
      for (_RandomAccessIterator __i = __first + 1; __i != __last; ++__i)
 800a218:	f107 030c 	add.w	r3, r7, #12
 800a21c:	2101      	movs	r1, #1
 800a21e:	4618      	mov	r0, r3
 800a220:	f7ff ff78 	bl	800a114 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEplEi>
 800a224:	4603      	mov	r3, r0
 800a226:	617b      	str	r3, [r7, #20]
 800a228:	e03b      	b.n	800a2a2 <_ZSt16__insertion_sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_T0_+0xac>
	  if (__comp(__i, __first))
 800a22a:	1d3b      	adds	r3, r7, #4
 800a22c:	68fa      	ldr	r2, [r7, #12]
 800a22e:	6979      	ldr	r1, [r7, #20]
 800a230:	4618      	mov	r0, r3
 800a232:	f7ff ffa3 	bl	800a17c <_ZNK9__gnu_cxx5__ops15_Iter_less_iterclINS_17__normal_iteratorIPfSt6vectorIfSaIfEEEES8_EEbT_T0_>
 800a236:	4603      	mov	r3, r0
 800a238:	2b00      	cmp	r3, #0
 800a23a:	d026      	beq.n	800a28a <_ZSt16__insertion_sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_T0_+0x94>
		__val = _GLIBCXX_MOVE(*__i);
 800a23c:	f107 0314 	add.w	r3, r7, #20
 800a240:	4618      	mov	r0, r3
 800a242:	f7ff ff8f 	bl	800a164 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEdeEv>
 800a246:	4603      	mov	r3, r0
 800a248:	4618      	mov	r0, r3
 800a24a:	f7fd f8d0 	bl	80073ee <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>
 800a24e:	4603      	mov	r3, r0
 800a250:	681b      	ldr	r3, [r3, #0]
 800a252:	613b      	str	r3, [r7, #16]
	      _GLIBCXX_MOVE_BACKWARD3(__first, __i, __i + 1);
 800a254:	f107 0314 	add.w	r3, r7, #20
 800a258:	2101      	movs	r1, #1
 800a25a:	4618      	mov	r0, r3
 800a25c:	f7ff ff5a 	bl	800a114 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEplEi>
 800a260:	4603      	mov	r3, r0
 800a262:	461a      	mov	r2, r3
 800a264:	6979      	ldr	r1, [r7, #20]
 800a266:	68f8      	ldr	r0, [r7, #12]
 800a268:	f7ff ffad 	bl	800a1c6 <_ZSt13move_backwardIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEES6_ET0_T_S8_S7_>
	      *__first = _GLIBCXX_MOVE(__val);
 800a26c:	f107 0310 	add.w	r3, r7, #16
 800a270:	4618      	mov	r0, r3
 800a272:	f7fd f8bc 	bl	80073ee <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>
 800a276:	4603      	mov	r3, r0
 800a278:	681c      	ldr	r4, [r3, #0]
 800a27a:	f107 030c 	add.w	r3, r7, #12
 800a27e:	4618      	mov	r0, r3
 800a280:	f7ff ff70 	bl	800a164 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEdeEv>
 800a284:	4603      	mov	r3, r0
 800a286:	601c      	str	r4, [r3, #0]
 800a288:	e006      	b.n	800a298 <_ZSt16__insertion_sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_T0_+0xa2>
				__gnu_cxx::__ops::__val_comp_iter(__comp));
 800a28a:	4630      	mov	r0, r6
 800a28c:	f7f7 ffd6 	bl	800223c <_ZN9__gnu_cxx5__ops15__val_comp_iterENS0_15_Iter_less_iterE>
	    std::__unguarded_linear_insert(__i,
 800a290:	4629      	mov	r1, r5
 800a292:	6978      	ldr	r0, [r7, #20]
 800a294:	f001 f818 	bl	800b2c8 <_ZSt25__unguarded_linear_insertIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops14_Val_less_iterEEvT_T0_>
      for (_RandomAccessIterator __i = __first + 1; __i != __last; ++__i)
 800a298:	f107 0314 	add.w	r3, r7, #20
 800a29c:	4618      	mov	r0, r3
 800a29e:	f7ff ff51 	bl	800a144 <_ZN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEppEv>
 800a2a2:	f107 0208 	add.w	r2, r7, #8
 800a2a6:	f107 0314 	add.w	r3, r7, #20
 800a2aa:	4611      	mov	r1, r2
 800a2ac:	4618      	mov	r0, r3
 800a2ae:	f7fd ffaa 	bl	8008206 <_ZN9__gnu_cxxeqIPfSt6vectorIfSaIfEEEEbRKNS_17__normal_iteratorIT_T0_EESA_>
 800a2b2:	4603      	mov	r3, r0
 800a2b4:	f083 0301 	eor.w	r3, r3, #1
 800a2b8:	b2db      	uxtb	r3, r3
 800a2ba:	2b00      	cmp	r3, #0
 800a2bc:	d1b5      	bne.n	800a22a <_ZSt16__insertion_sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_T0_+0x34>
 800a2be:	e000      	b.n	800a2c2 <_ZSt16__insertion_sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_T0_+0xcc>
      if (__first == __last) return;
 800a2c0:	bf00      	nop
    }
 800a2c2:	371c      	adds	r7, #28
 800a2c4:	46bd      	mov	sp, r7
 800a2c6:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800a2c8 <_ZSt26__unguarded_insertion_sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_T0_>:
    __unguarded_insertion_sort(_RandomAccessIterator __first,
 800a2c8:	b5b0      	push	{r4, r5, r7, lr}
 800a2ca:	b086      	sub	sp, #24
 800a2cc:	af00      	add	r7, sp, #0
 800a2ce:	60f8      	str	r0, [r7, #12]
 800a2d0:	60b9      	str	r1, [r7, #8]
 800a2d2:	713a      	strb	r2, [r7, #4]
      for (_RandomAccessIterator __i = __first; __i != __last; ++__i)
 800a2d4:	68fb      	ldr	r3, [r7, #12]
 800a2d6:	617b      	str	r3, [r7, #20]
 800a2d8:	e00b      	b.n	800a2f2 <_ZSt26__unguarded_insertion_sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_T0_+0x2a>
				__gnu_cxx::__ops::__val_comp_iter(__comp));
 800a2da:	4628      	mov	r0, r5
 800a2dc:	f7f7 ffae 	bl	800223c <_ZN9__gnu_cxx5__ops15__val_comp_iterENS0_15_Iter_less_iterE>
	std::__unguarded_linear_insert(__i,
 800a2e0:	4621      	mov	r1, r4
 800a2e2:	6978      	ldr	r0, [r7, #20]
 800a2e4:	f000 fff0 	bl	800b2c8 <_ZSt25__unguarded_linear_insertIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops14_Val_less_iterEEvT_T0_>
      for (_RandomAccessIterator __i = __first; __i != __last; ++__i)
 800a2e8:	f107 0314 	add.w	r3, r7, #20
 800a2ec:	4618      	mov	r0, r3
 800a2ee:	f7ff ff29 	bl	800a144 <_ZN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEppEv>
 800a2f2:	f107 0208 	add.w	r2, r7, #8
 800a2f6:	f107 0314 	add.w	r3, r7, #20
 800a2fa:	4611      	mov	r1, r2
 800a2fc:	4618      	mov	r0, r3
 800a2fe:	f7fd ff82 	bl	8008206 <_ZN9__gnu_cxxeqIPfSt6vectorIfSaIfEEEEbRKNS_17__normal_iteratorIT_T0_EESA_>
 800a302:	4603      	mov	r3, r0
 800a304:	f083 0301 	eor.w	r3, r3, #1
 800a308:	b2db      	uxtb	r3, r3
 800a30a:	2b00      	cmp	r3, #0
 800a30c:	d1e5      	bne.n	800a2da <_ZSt26__unguarded_insertion_sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_T0_+0x12>
    }
 800a30e:	bf00      	nop
 800a310:	bf00      	nop
 800a312:	3718      	adds	r7, #24
 800a314:	46bd      	mov	sp, r7
 800a316:	bdb0      	pop	{r4, r5, r7, pc}

0800a318 <_ZSt4moveIRZN3jlb10Controller15lateral_controlEvEUlbE_EONSt16remove_referenceIT_E4typeEOS5_>:
    move(_Tp&& __t) noexcept
 800a318:	b480      	push	{r7}
 800a31a:	b083      	sub	sp, #12
 800a31c:	af00      	add	r7, sp, #0
 800a31e:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	4618      	mov	r0, r3
 800a324:	370c      	adds	r7, #12
 800a326:	46bd      	mov	sp, r7
 800a328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a32c:	4770      	bx	lr

0800a32e <_ZN9__gnu_cxx5__ops10_Iter_predIZN3jlb10Controller15lateral_controlEvEUlbE_EC1ES4_>:
      _Iter_pred(_Predicate __pred)
 800a32e:	b580      	push	{r7, lr}
 800a330:	b082      	sub	sp, #8
 800a332:	af00      	add	r7, sp, #0
 800a334:	6078      	str	r0, [r7, #4]
 800a336:	7039      	strb	r1, [r7, #0]
	: _M_pred(_GLIBCXX_MOVE(__pred))
 800a338:	463b      	mov	r3, r7
 800a33a:	4618      	mov	r0, r3
 800a33c:	f7ff ffec 	bl	800a318 <_ZSt4moveIRZN3jlb10Controller15lateral_controlEvEUlbE_EONSt16remove_referenceIT_E4typeEOS5_>
      { }
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	4618      	mov	r0, r3
 800a344:	3708      	adds	r7, #8
 800a346:	46bd      	mov	sp, r7
 800a348:	bd80      	pop	{r7, pc}

0800a34a <_ZN9__gnu_cxx5__ops8__negateIZN3jlb10Controller15lateral_controlEvEUlbE_EENS0_12_Iter_negateIT_EENS0_10_Iter_predIS6_EE>:
    };

  template<typename _Predicate>
    _GLIBCXX20_CONSTEXPR
    inline _Iter_negate<_Predicate>
    __negate(_Iter_pred<_Predicate> __pred)
 800a34a:	b5b0      	push	{r4, r5, r7, lr}
 800a34c:	b084      	sub	sp, #16
 800a34e:	af00      	add	r7, sp, #0
 800a350:	7138      	strb	r0, [r7, #4]
    { return _Iter_negate<_Predicate>(_GLIBCXX_MOVE(__pred._M_pred)); }
 800a352:	1d3b      	adds	r3, r7, #4
 800a354:	4618      	mov	r0, r3
 800a356:	f7ff ffdf 	bl	800a318 <_ZSt4moveIRZN3jlb10Controller15lateral_controlEvEUlbE_EONSt16remove_referenceIT_E4typeEOS5_>
 800a35a:	f107 030c 	add.w	r3, r7, #12
 800a35e:	4629      	mov	r1, r5
 800a360:	4618      	mov	r0, r3
 800a362:	f000 fffc 	bl	800b35e <_ZN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEvEUlbE_EC1ES4_>
 800a366:	bf00      	nop
 800a368:	4620      	mov	r0, r4
 800a36a:	3710      	adds	r7, #16
 800a36c:	46bd      	mov	sp, r7
 800a36e:	bdb0      	pop	{r4, r5, r7, pc}

0800a370 <_ZN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEvEUlbE_EclIPbEEbT_>:
	operator()(_Iterator __it)
 800a370:	b580      	push	{r7, lr}
 800a372:	b082      	sub	sp, #8
 800a374:	af00      	add	r7, sp, #0
 800a376:	6078      	str	r0, [r7, #4]
 800a378:	6039      	str	r1, [r7, #0]
	{ return !bool(_M_pred(*__it)); }
 800a37a:	687a      	ldr	r2, [r7, #4]
 800a37c:	683b      	ldr	r3, [r7, #0]
 800a37e:	781b      	ldrb	r3, [r3, #0]
 800a380:	4619      	mov	r1, r3
 800a382:	4610      	mov	r0, r2
 800a384:	f7f8 fea8 	bl	80030d8 <_ZZN3jlb10Controller15lateral_controlEvENKUlbE_clEb>
 800a388:	4603      	mov	r3, r0
 800a38a:	f083 0301 	eor.w	r3, r3, #1
 800a38e:	b2db      	uxtb	r3, r3
 800a390:	4618      	mov	r0, r3
 800a392:	3708      	adds	r7, #8
 800a394:	46bd      	mov	sp, r7
 800a396:	bd80      	pop	{r7, pc}

0800a398 <_ZSt9__find_ifIPbN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEvEUlbE_EEET_S8_S8_T0_St26random_access_iterator_tag>:
    __find_if(_RandomAccessIterator __first, _RandomAccessIterator __last,
 800a398:	b580      	push	{r7, lr}
 800a39a:	b086      	sub	sp, #24
 800a39c:	af00      	add	r7, sp, #0
 800a39e:	60f8      	str	r0, [r7, #12]
 800a3a0:	60b9      	str	r1, [r7, #8]
 800a3a2:	713a      	strb	r2, [r7, #4]
 800a3a4:	703b      	strb	r3, [r7, #0]
	__trip_count = (__last - __first) >> 2;
 800a3a6:	68ba      	ldr	r2, [r7, #8]
 800a3a8:	68fb      	ldr	r3, [r7, #12]
 800a3aa:	1ad3      	subs	r3, r2, r3
 800a3ac:	109b      	asrs	r3, r3, #2
 800a3ae:	617b      	str	r3, [r7, #20]
      for (; __trip_count > 0; --__trip_count)
 800a3b0:	e036      	b.n	800a420 <_ZSt9__find_ifIPbN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEvEUlbE_EEET_S8_S8_T0_St26random_access_iterator_tag+0x88>
	  if (__pred(__first))
 800a3b2:	1d3b      	adds	r3, r7, #4
 800a3b4:	68f9      	ldr	r1, [r7, #12]
 800a3b6:	4618      	mov	r0, r3
 800a3b8:	f7ff ffda 	bl	800a370 <_ZN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEvEUlbE_EclIPbEEbT_>
 800a3bc:	4603      	mov	r3, r0
 800a3be:	2b00      	cmp	r3, #0
 800a3c0:	d001      	beq.n	800a3c6 <_ZSt9__find_ifIPbN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEvEUlbE_EEET_S8_S8_T0_St26random_access_iterator_tag+0x2e>
	    return __first;
 800a3c2:	68fb      	ldr	r3, [r7, #12]
 800a3c4:	e063      	b.n	800a48e <_ZSt9__find_ifIPbN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEvEUlbE_EEET_S8_S8_T0_St26random_access_iterator_tag+0xf6>
	  ++__first;
 800a3c6:	68fb      	ldr	r3, [r7, #12]
 800a3c8:	3301      	adds	r3, #1
 800a3ca:	60fb      	str	r3, [r7, #12]
	  if (__pred(__first))
 800a3cc:	1d3b      	adds	r3, r7, #4
 800a3ce:	68f9      	ldr	r1, [r7, #12]
 800a3d0:	4618      	mov	r0, r3
 800a3d2:	f7ff ffcd 	bl	800a370 <_ZN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEvEUlbE_EclIPbEEbT_>
 800a3d6:	4603      	mov	r3, r0
 800a3d8:	2b00      	cmp	r3, #0
 800a3da:	d001      	beq.n	800a3e0 <_ZSt9__find_ifIPbN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEvEUlbE_EEET_S8_S8_T0_St26random_access_iterator_tag+0x48>
	    return __first;
 800a3dc:	68fb      	ldr	r3, [r7, #12]
 800a3de:	e056      	b.n	800a48e <_ZSt9__find_ifIPbN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEvEUlbE_EEET_S8_S8_T0_St26random_access_iterator_tag+0xf6>
	  ++__first;
 800a3e0:	68fb      	ldr	r3, [r7, #12]
 800a3e2:	3301      	adds	r3, #1
 800a3e4:	60fb      	str	r3, [r7, #12]
	  if (__pred(__first))
 800a3e6:	1d3b      	adds	r3, r7, #4
 800a3e8:	68f9      	ldr	r1, [r7, #12]
 800a3ea:	4618      	mov	r0, r3
 800a3ec:	f7ff ffc0 	bl	800a370 <_ZN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEvEUlbE_EclIPbEEbT_>
 800a3f0:	4603      	mov	r3, r0
 800a3f2:	2b00      	cmp	r3, #0
 800a3f4:	d001      	beq.n	800a3fa <_ZSt9__find_ifIPbN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEvEUlbE_EEET_S8_S8_T0_St26random_access_iterator_tag+0x62>
	    return __first;
 800a3f6:	68fb      	ldr	r3, [r7, #12]
 800a3f8:	e049      	b.n	800a48e <_ZSt9__find_ifIPbN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEvEUlbE_EEET_S8_S8_T0_St26random_access_iterator_tag+0xf6>
	  ++__first;
 800a3fa:	68fb      	ldr	r3, [r7, #12]
 800a3fc:	3301      	adds	r3, #1
 800a3fe:	60fb      	str	r3, [r7, #12]
	  if (__pred(__first))
 800a400:	1d3b      	adds	r3, r7, #4
 800a402:	68f9      	ldr	r1, [r7, #12]
 800a404:	4618      	mov	r0, r3
 800a406:	f7ff ffb3 	bl	800a370 <_ZN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEvEUlbE_EclIPbEEbT_>
 800a40a:	4603      	mov	r3, r0
 800a40c:	2b00      	cmp	r3, #0
 800a40e:	d001      	beq.n	800a414 <_ZSt9__find_ifIPbN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEvEUlbE_EEET_S8_S8_T0_St26random_access_iterator_tag+0x7c>
	    return __first;
 800a410:	68fb      	ldr	r3, [r7, #12]
 800a412:	e03c      	b.n	800a48e <_ZSt9__find_ifIPbN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEvEUlbE_EEET_S8_S8_T0_St26random_access_iterator_tag+0xf6>
	  ++__first;
 800a414:	68fb      	ldr	r3, [r7, #12]
 800a416:	3301      	adds	r3, #1
 800a418:	60fb      	str	r3, [r7, #12]
      for (; __trip_count > 0; --__trip_count)
 800a41a:	697b      	ldr	r3, [r7, #20]
 800a41c:	3b01      	subs	r3, #1
 800a41e:	617b      	str	r3, [r7, #20]
 800a420:	697b      	ldr	r3, [r7, #20]
 800a422:	2b00      	cmp	r3, #0
 800a424:	dcc5      	bgt.n	800a3b2 <_ZSt9__find_ifIPbN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEvEUlbE_EEET_S8_S8_T0_St26random_access_iterator_tag+0x1a>
      switch (__last - __first)
 800a426:	68ba      	ldr	r2, [r7, #8]
 800a428:	68fb      	ldr	r3, [r7, #12]
 800a42a:	1ad3      	subs	r3, r2, r3
 800a42c:	2b03      	cmp	r3, #3
 800a42e:	d006      	beq.n	800a43e <_ZSt9__find_ifIPbN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEvEUlbE_EEET_S8_S8_T0_St26random_access_iterator_tag+0xa6>
 800a430:	2b03      	cmp	r3, #3
 800a432:	dc2b      	bgt.n	800a48c <_ZSt9__find_ifIPbN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEvEUlbE_EEET_S8_S8_T0_St26random_access_iterator_tag+0xf4>
 800a434:	2b01      	cmp	r3, #1
 800a436:	d01c      	beq.n	800a472 <_ZSt9__find_ifIPbN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEvEUlbE_EEET_S8_S8_T0_St26random_access_iterator_tag+0xda>
 800a438:	2b02      	cmp	r3, #2
 800a43a:	d00d      	beq.n	800a458 <_ZSt9__find_ifIPbN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEvEUlbE_EEET_S8_S8_T0_St26random_access_iterator_tag+0xc0>
 800a43c:	e026      	b.n	800a48c <_ZSt9__find_ifIPbN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEvEUlbE_EEET_S8_S8_T0_St26random_access_iterator_tag+0xf4>
	  if (__pred(__first))
 800a43e:	1d3b      	adds	r3, r7, #4
 800a440:	68f9      	ldr	r1, [r7, #12]
 800a442:	4618      	mov	r0, r3
 800a444:	f7ff ff94 	bl	800a370 <_ZN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEvEUlbE_EclIPbEEbT_>
 800a448:	4603      	mov	r3, r0
 800a44a:	2b00      	cmp	r3, #0
 800a44c:	d001      	beq.n	800a452 <_ZSt9__find_ifIPbN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEvEUlbE_EEET_S8_S8_T0_St26random_access_iterator_tag+0xba>
	    return __first;
 800a44e:	68fb      	ldr	r3, [r7, #12]
 800a450:	e01d      	b.n	800a48e <_ZSt9__find_ifIPbN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEvEUlbE_EEET_S8_S8_T0_St26random_access_iterator_tag+0xf6>
	  ++__first;
 800a452:	68fb      	ldr	r3, [r7, #12]
 800a454:	3301      	adds	r3, #1
 800a456:	60fb      	str	r3, [r7, #12]
	  if (__pred(__first))
 800a458:	1d3b      	adds	r3, r7, #4
 800a45a:	68f9      	ldr	r1, [r7, #12]
 800a45c:	4618      	mov	r0, r3
 800a45e:	f7ff ff87 	bl	800a370 <_ZN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEvEUlbE_EclIPbEEbT_>
 800a462:	4603      	mov	r3, r0
 800a464:	2b00      	cmp	r3, #0
 800a466:	d001      	beq.n	800a46c <_ZSt9__find_ifIPbN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEvEUlbE_EEET_S8_S8_T0_St26random_access_iterator_tag+0xd4>
	    return __first;
 800a468:	68fb      	ldr	r3, [r7, #12]
 800a46a:	e010      	b.n	800a48e <_ZSt9__find_ifIPbN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEvEUlbE_EEET_S8_S8_T0_St26random_access_iterator_tag+0xf6>
	  ++__first;
 800a46c:	68fb      	ldr	r3, [r7, #12]
 800a46e:	3301      	adds	r3, #1
 800a470:	60fb      	str	r3, [r7, #12]
	  if (__pred(__first))
 800a472:	1d3b      	adds	r3, r7, #4
 800a474:	68f9      	ldr	r1, [r7, #12]
 800a476:	4618      	mov	r0, r3
 800a478:	f7ff ff7a 	bl	800a370 <_ZN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEvEUlbE_EclIPbEEbT_>
 800a47c:	4603      	mov	r3, r0
 800a47e:	2b00      	cmp	r3, #0
 800a480:	d001      	beq.n	800a486 <_ZSt9__find_ifIPbN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEvEUlbE_EEET_S8_S8_T0_St26random_access_iterator_tag+0xee>
	    return __first;
 800a482:	68fb      	ldr	r3, [r7, #12]
 800a484:	e003      	b.n	800a48e <_ZSt9__find_ifIPbN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEvEUlbE_EEET_S8_S8_T0_St26random_access_iterator_tag+0xf6>
	  ++__first;
 800a486:	68fb      	ldr	r3, [r7, #12]
 800a488:	3301      	adds	r3, #1
 800a48a:	60fb      	str	r3, [r7, #12]
	  return __last;
 800a48c:	68bb      	ldr	r3, [r7, #8]
    }
 800a48e:	4618      	mov	r0, r3
 800a490:	3718      	adds	r7, #24
 800a492:	46bd      	mov	sp, r7
 800a494:	bd80      	pop	{r7, pc}

0800a496 <_ZSt4moveIRZN3jlb10Controller15lateral_controlEvEUlbE0_EONSt16remove_referenceIT_E4typeEOS5_>:
    move(_Tp&& __t) noexcept
 800a496:	b480      	push	{r7}
 800a498:	b083      	sub	sp, #12
 800a49a:	af00      	add	r7, sp, #0
 800a49c:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	4618      	mov	r0, r3
 800a4a2:	370c      	adds	r7, #12
 800a4a4:	46bd      	mov	sp, r7
 800a4a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4aa:	4770      	bx	lr

0800a4ac <_ZN9__gnu_cxx5__ops10_Iter_predIZN3jlb10Controller15lateral_controlEvEUlbE0_EC1ES4_>:
      _Iter_pred(_Predicate __pred)
 800a4ac:	b580      	push	{r7, lr}
 800a4ae:	b082      	sub	sp, #8
 800a4b0:	af00      	add	r7, sp, #0
 800a4b2:	6078      	str	r0, [r7, #4]
 800a4b4:	7039      	strb	r1, [r7, #0]
	: _M_pred(_GLIBCXX_MOVE(__pred))
 800a4b6:	463b      	mov	r3, r7
 800a4b8:	4618      	mov	r0, r3
 800a4ba:	f7ff ffec 	bl	800a496 <_ZSt4moveIRZN3jlb10Controller15lateral_controlEvEUlbE0_EONSt16remove_referenceIT_E4typeEOS5_>
      { }
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	4618      	mov	r0, r3
 800a4c2:	3708      	adds	r7, #8
 800a4c4:	46bd      	mov	sp, r7
 800a4c6:	bd80      	pop	{r7, pc}

0800a4c8 <_ZN9__gnu_cxx5__ops8__negateIZN3jlb10Controller15lateral_controlEvEUlbE0_EENS0_12_Iter_negateIT_EENS0_10_Iter_predIS6_EE>:
    __negate(_Iter_pred<_Predicate> __pred)
 800a4c8:	b5b0      	push	{r4, r5, r7, lr}
 800a4ca:	b084      	sub	sp, #16
 800a4cc:	af00      	add	r7, sp, #0
 800a4ce:	7138      	strb	r0, [r7, #4]
    { return _Iter_negate<_Predicate>(_GLIBCXX_MOVE(__pred._M_pred)); }
 800a4d0:	1d3b      	adds	r3, r7, #4
 800a4d2:	4618      	mov	r0, r3
 800a4d4:	f7ff ffdf 	bl	800a496 <_ZSt4moveIRZN3jlb10Controller15lateral_controlEvEUlbE0_EONSt16remove_referenceIT_E4typeEOS5_>
 800a4d8:	f107 030c 	add.w	r3, r7, #12
 800a4dc:	4629      	mov	r1, r5
 800a4de:	4618      	mov	r0, r3
 800a4e0:	f000 ff4b 	bl	800b37a <_ZN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEvEUlbE0_EC1ES4_>
 800a4e4:	bf00      	nop
 800a4e6:	4620      	mov	r0, r4
 800a4e8:	3710      	adds	r7, #16
 800a4ea:	46bd      	mov	sp, r7
 800a4ec:	bdb0      	pop	{r4, r5, r7, pc}

0800a4ee <_ZN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEvEUlbE0_EclIPbEEbT_>:
	operator()(_Iterator __it)
 800a4ee:	b580      	push	{r7, lr}
 800a4f0:	b082      	sub	sp, #8
 800a4f2:	af00      	add	r7, sp, #0
 800a4f4:	6078      	str	r0, [r7, #4]
 800a4f6:	6039      	str	r1, [r7, #0]
	{ return !bool(_M_pred(*__it)); }
 800a4f8:	687a      	ldr	r2, [r7, #4]
 800a4fa:	683b      	ldr	r3, [r7, #0]
 800a4fc:	781b      	ldrb	r3, [r3, #0]
 800a4fe:	4619      	mov	r1, r3
 800a500:	4610      	mov	r0, r2
 800a502:	f7f8 fdf6 	bl	80030f2 <_ZZN3jlb10Controller15lateral_controlEvENKUlbE0_clEb>
 800a506:	4603      	mov	r3, r0
 800a508:	f083 0301 	eor.w	r3, r3, #1
 800a50c:	b2db      	uxtb	r3, r3
 800a50e:	4618      	mov	r0, r3
 800a510:	3708      	adds	r7, #8
 800a512:	46bd      	mov	sp, r7
 800a514:	bd80      	pop	{r7, pc}

0800a516 <_ZSt9__find_ifIPbN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEvEUlbE0_EEET_S8_S8_T0_St26random_access_iterator_tag>:
    __find_if(_RandomAccessIterator __first, _RandomAccessIterator __last,
 800a516:	b580      	push	{r7, lr}
 800a518:	b086      	sub	sp, #24
 800a51a:	af00      	add	r7, sp, #0
 800a51c:	60f8      	str	r0, [r7, #12]
 800a51e:	60b9      	str	r1, [r7, #8]
 800a520:	713a      	strb	r2, [r7, #4]
 800a522:	703b      	strb	r3, [r7, #0]
	__trip_count = (__last - __first) >> 2;
 800a524:	68ba      	ldr	r2, [r7, #8]
 800a526:	68fb      	ldr	r3, [r7, #12]
 800a528:	1ad3      	subs	r3, r2, r3
 800a52a:	109b      	asrs	r3, r3, #2
 800a52c:	617b      	str	r3, [r7, #20]
      for (; __trip_count > 0; --__trip_count)
 800a52e:	e036      	b.n	800a59e <_ZSt9__find_ifIPbN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEvEUlbE0_EEET_S8_S8_T0_St26random_access_iterator_tag+0x88>
	  if (__pred(__first))
 800a530:	1d3b      	adds	r3, r7, #4
 800a532:	68f9      	ldr	r1, [r7, #12]
 800a534:	4618      	mov	r0, r3
 800a536:	f7ff ffda 	bl	800a4ee <_ZN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEvEUlbE0_EclIPbEEbT_>
 800a53a:	4603      	mov	r3, r0
 800a53c:	2b00      	cmp	r3, #0
 800a53e:	d001      	beq.n	800a544 <_ZSt9__find_ifIPbN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEvEUlbE0_EEET_S8_S8_T0_St26random_access_iterator_tag+0x2e>
	    return __first;
 800a540:	68fb      	ldr	r3, [r7, #12]
 800a542:	e063      	b.n	800a60c <_ZSt9__find_ifIPbN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEvEUlbE0_EEET_S8_S8_T0_St26random_access_iterator_tag+0xf6>
	  ++__first;
 800a544:	68fb      	ldr	r3, [r7, #12]
 800a546:	3301      	adds	r3, #1
 800a548:	60fb      	str	r3, [r7, #12]
	  if (__pred(__first))
 800a54a:	1d3b      	adds	r3, r7, #4
 800a54c:	68f9      	ldr	r1, [r7, #12]
 800a54e:	4618      	mov	r0, r3
 800a550:	f7ff ffcd 	bl	800a4ee <_ZN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEvEUlbE0_EclIPbEEbT_>
 800a554:	4603      	mov	r3, r0
 800a556:	2b00      	cmp	r3, #0
 800a558:	d001      	beq.n	800a55e <_ZSt9__find_ifIPbN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEvEUlbE0_EEET_S8_S8_T0_St26random_access_iterator_tag+0x48>
	    return __first;
 800a55a:	68fb      	ldr	r3, [r7, #12]
 800a55c:	e056      	b.n	800a60c <_ZSt9__find_ifIPbN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEvEUlbE0_EEET_S8_S8_T0_St26random_access_iterator_tag+0xf6>
	  ++__first;
 800a55e:	68fb      	ldr	r3, [r7, #12]
 800a560:	3301      	adds	r3, #1
 800a562:	60fb      	str	r3, [r7, #12]
	  if (__pred(__first))
 800a564:	1d3b      	adds	r3, r7, #4
 800a566:	68f9      	ldr	r1, [r7, #12]
 800a568:	4618      	mov	r0, r3
 800a56a:	f7ff ffc0 	bl	800a4ee <_ZN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEvEUlbE0_EclIPbEEbT_>
 800a56e:	4603      	mov	r3, r0
 800a570:	2b00      	cmp	r3, #0
 800a572:	d001      	beq.n	800a578 <_ZSt9__find_ifIPbN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEvEUlbE0_EEET_S8_S8_T0_St26random_access_iterator_tag+0x62>
	    return __first;
 800a574:	68fb      	ldr	r3, [r7, #12]
 800a576:	e049      	b.n	800a60c <_ZSt9__find_ifIPbN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEvEUlbE0_EEET_S8_S8_T0_St26random_access_iterator_tag+0xf6>
	  ++__first;
 800a578:	68fb      	ldr	r3, [r7, #12]
 800a57a:	3301      	adds	r3, #1
 800a57c:	60fb      	str	r3, [r7, #12]
	  if (__pred(__first))
 800a57e:	1d3b      	adds	r3, r7, #4
 800a580:	68f9      	ldr	r1, [r7, #12]
 800a582:	4618      	mov	r0, r3
 800a584:	f7ff ffb3 	bl	800a4ee <_ZN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEvEUlbE0_EclIPbEEbT_>
 800a588:	4603      	mov	r3, r0
 800a58a:	2b00      	cmp	r3, #0
 800a58c:	d001      	beq.n	800a592 <_ZSt9__find_ifIPbN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEvEUlbE0_EEET_S8_S8_T0_St26random_access_iterator_tag+0x7c>
	    return __first;
 800a58e:	68fb      	ldr	r3, [r7, #12]
 800a590:	e03c      	b.n	800a60c <_ZSt9__find_ifIPbN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEvEUlbE0_EEET_S8_S8_T0_St26random_access_iterator_tag+0xf6>
	  ++__first;
 800a592:	68fb      	ldr	r3, [r7, #12]
 800a594:	3301      	adds	r3, #1
 800a596:	60fb      	str	r3, [r7, #12]
      for (; __trip_count > 0; --__trip_count)
 800a598:	697b      	ldr	r3, [r7, #20]
 800a59a:	3b01      	subs	r3, #1
 800a59c:	617b      	str	r3, [r7, #20]
 800a59e:	697b      	ldr	r3, [r7, #20]
 800a5a0:	2b00      	cmp	r3, #0
 800a5a2:	dcc5      	bgt.n	800a530 <_ZSt9__find_ifIPbN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEvEUlbE0_EEET_S8_S8_T0_St26random_access_iterator_tag+0x1a>
      switch (__last - __first)
 800a5a4:	68ba      	ldr	r2, [r7, #8]
 800a5a6:	68fb      	ldr	r3, [r7, #12]
 800a5a8:	1ad3      	subs	r3, r2, r3
 800a5aa:	2b03      	cmp	r3, #3
 800a5ac:	d006      	beq.n	800a5bc <_ZSt9__find_ifIPbN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEvEUlbE0_EEET_S8_S8_T0_St26random_access_iterator_tag+0xa6>
 800a5ae:	2b03      	cmp	r3, #3
 800a5b0:	dc2b      	bgt.n	800a60a <_ZSt9__find_ifIPbN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEvEUlbE0_EEET_S8_S8_T0_St26random_access_iterator_tag+0xf4>
 800a5b2:	2b01      	cmp	r3, #1
 800a5b4:	d01c      	beq.n	800a5f0 <_ZSt9__find_ifIPbN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEvEUlbE0_EEET_S8_S8_T0_St26random_access_iterator_tag+0xda>
 800a5b6:	2b02      	cmp	r3, #2
 800a5b8:	d00d      	beq.n	800a5d6 <_ZSt9__find_ifIPbN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEvEUlbE0_EEET_S8_S8_T0_St26random_access_iterator_tag+0xc0>
 800a5ba:	e026      	b.n	800a60a <_ZSt9__find_ifIPbN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEvEUlbE0_EEET_S8_S8_T0_St26random_access_iterator_tag+0xf4>
	  if (__pred(__first))
 800a5bc:	1d3b      	adds	r3, r7, #4
 800a5be:	68f9      	ldr	r1, [r7, #12]
 800a5c0:	4618      	mov	r0, r3
 800a5c2:	f7ff ff94 	bl	800a4ee <_ZN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEvEUlbE0_EclIPbEEbT_>
 800a5c6:	4603      	mov	r3, r0
 800a5c8:	2b00      	cmp	r3, #0
 800a5ca:	d001      	beq.n	800a5d0 <_ZSt9__find_ifIPbN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEvEUlbE0_EEET_S8_S8_T0_St26random_access_iterator_tag+0xba>
	    return __first;
 800a5cc:	68fb      	ldr	r3, [r7, #12]
 800a5ce:	e01d      	b.n	800a60c <_ZSt9__find_ifIPbN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEvEUlbE0_EEET_S8_S8_T0_St26random_access_iterator_tag+0xf6>
	  ++__first;
 800a5d0:	68fb      	ldr	r3, [r7, #12]
 800a5d2:	3301      	adds	r3, #1
 800a5d4:	60fb      	str	r3, [r7, #12]
	  if (__pred(__first))
 800a5d6:	1d3b      	adds	r3, r7, #4
 800a5d8:	68f9      	ldr	r1, [r7, #12]
 800a5da:	4618      	mov	r0, r3
 800a5dc:	f7ff ff87 	bl	800a4ee <_ZN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEvEUlbE0_EclIPbEEbT_>
 800a5e0:	4603      	mov	r3, r0
 800a5e2:	2b00      	cmp	r3, #0
 800a5e4:	d001      	beq.n	800a5ea <_ZSt9__find_ifIPbN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEvEUlbE0_EEET_S8_S8_T0_St26random_access_iterator_tag+0xd4>
	    return __first;
 800a5e6:	68fb      	ldr	r3, [r7, #12]
 800a5e8:	e010      	b.n	800a60c <_ZSt9__find_ifIPbN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEvEUlbE0_EEET_S8_S8_T0_St26random_access_iterator_tag+0xf6>
	  ++__first;
 800a5ea:	68fb      	ldr	r3, [r7, #12]
 800a5ec:	3301      	adds	r3, #1
 800a5ee:	60fb      	str	r3, [r7, #12]
	  if (__pred(__first))
 800a5f0:	1d3b      	adds	r3, r7, #4
 800a5f2:	68f9      	ldr	r1, [r7, #12]
 800a5f4:	4618      	mov	r0, r3
 800a5f6:	f7ff ff7a 	bl	800a4ee <_ZN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEvEUlbE0_EclIPbEEbT_>
 800a5fa:	4603      	mov	r3, r0
 800a5fc:	2b00      	cmp	r3, #0
 800a5fe:	d001      	beq.n	800a604 <_ZSt9__find_ifIPbN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEvEUlbE0_EEET_S8_S8_T0_St26random_access_iterator_tag+0xee>
	    return __first;
 800a600:	68fb      	ldr	r3, [r7, #12]
 800a602:	e003      	b.n	800a60c <_ZSt9__find_ifIPbN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEvEUlbE0_EEET_S8_S8_T0_St26random_access_iterator_tag+0xf6>
	  ++__first;
 800a604:	68fb      	ldr	r3, [r7, #12]
 800a606:	3301      	adds	r3, #1
 800a608:	60fb      	str	r3, [r7, #12]
	  return __last;
 800a60a:	68bb      	ldr	r3, [r7, #8]
    }
 800a60c:	4618      	mov	r0, r3
 800a60e:	3718      	adds	r7, #24
 800a610:	46bd      	mov	sp, r7
 800a612:	bd80      	pop	{r7, pc}

0800a614 <_ZNSaIfEC1ERKS_>:
      allocator(const allocator& __a) _GLIBCXX_NOTHROW
 800a614:	b580      	push	{r7, lr}
 800a616:	b082      	sub	sp, #8
 800a618:	af00      	add	r7, sp, #0
 800a61a:	6078      	str	r0, [r7, #4]
 800a61c:	6039      	str	r1, [r7, #0]
      : __allocator_base<_Tp>(__a) { }
 800a61e:	6839      	ldr	r1, [r7, #0]
 800a620:	6878      	ldr	r0, [r7, #4]
 800a622:	f000 feb8 	bl	800b396 <_ZN9__gnu_cxx13new_allocatorIfEC1ERKS1_>
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	4618      	mov	r0, r3
 800a62a:	3708      	adds	r7, #8
 800a62c:	46bd      	mov	sp, r7
 800a62e:	bd80      	pop	{r7, pc}

0800a630 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEEPfEET0_T_SC_SB_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 800a630:	b580      	push	{r7, lr}
 800a632:	b084      	sub	sp, #16
 800a634:	af00      	add	r7, sp, #0
 800a636:	60f8      	str	r0, [r7, #12]
 800a638:	60b9      	str	r1, [r7, #8]
 800a63a:	607a      	str	r2, [r7, #4]
        { return std::copy(__first, __last, __result); }
 800a63c:	687a      	ldr	r2, [r7, #4]
 800a63e:	68b9      	ldr	r1, [r7, #8]
 800a640:	68f8      	ldr	r0, [r7, #12]
 800a642:	f000 feb4 	bl	800b3ae <_ZSt4copyIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEEPfET0_T_SA_S9_>
 800a646:	4603      	mov	r3, r0
 800a648:	4618      	mov	r0, r3
 800a64a:	3710      	adds	r7, #16
 800a64c:	46bd      	mov	sp, r7
 800a64e:	bd80      	pop	{r7, pc}

0800a650 <_ZSt12__niter_baseIPKfSt6vectorIfSaIfEEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>:
_GLIBCXX_BEGIN_NAMESPACE_VERSION

  template<typename _Iterator, typename _Container>
    _GLIBCXX20_CONSTEXPR
    _Iterator
    __niter_base(__gnu_cxx::__normal_iterator<_Iterator, _Container> __it)
 800a650:	b580      	push	{r7, lr}
 800a652:	b082      	sub	sp, #8
 800a654:	af00      	add	r7, sp, #0
 800a656:	6078      	str	r0, [r7, #4]
    _GLIBCXX_NOEXCEPT_IF(std::is_nothrow_copy_constructible<_Iterator>::value)
    { return __it.base(); }
 800a658:	1d3b      	adds	r3, r7, #4
 800a65a:	4618      	mov	r0, r3
 800a65c:	f000 febf 	bl	800b3de <_ZNK9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEE4baseEv>
 800a660:	4603      	mov	r3, r0
 800a662:	681b      	ldr	r3, [r3, #0]
 800a664:	4618      	mov	r0, r3
 800a666:	3708      	adds	r7, #8
 800a668:	46bd      	mov	sp, r7
 800a66a:	bd80      	pop	{r7, pc}

0800a66c <_ZSt12__niter_baseIPfSt6vectorIfSaIfEEET_N9__gnu_cxx17__normal_iteratorIS4_T0_EE>:
    __niter_base(__gnu_cxx::__normal_iterator<_Iterator, _Container> __it)
 800a66c:	b580      	push	{r7, lr}
 800a66e:	b082      	sub	sp, #8
 800a670:	af00      	add	r7, sp, #0
 800a672:	6078      	str	r0, [r7, #4]
    { return __it.base(); }
 800a674:	1d3b      	adds	r3, r7, #4
 800a676:	4618      	mov	r0, r3
 800a678:	f7fd fdba 	bl	80081f0 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEE4baseEv>
 800a67c:	4603      	mov	r3, r0
 800a67e:	681b      	ldr	r3, [r3, #0]
 800a680:	4618      	mov	r0, r3
 800a682:	3708      	adds	r7, #8
 800a684:	46bd      	mov	sp, r7
 800a686:	bd80      	pop	{r7, pc}

0800a688 <_ZSt14__copy_move_a1ILb0EPKfPfET1_T0_S4_S3_>:
    __copy_move_a1(_II __first, _II __last, _OI __result)
 800a688:	b580      	push	{r7, lr}
 800a68a:	b084      	sub	sp, #16
 800a68c:	af00      	add	r7, sp, #0
 800a68e:	60f8      	str	r0, [r7, #12]
 800a690:	60b9      	str	r1, [r7, #8]
 800a692:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_a2<_IsMove>(__first, __last, __result); }
 800a694:	687a      	ldr	r2, [r7, #4]
 800a696:	68b9      	ldr	r1, [r7, #8]
 800a698:	68f8      	ldr	r0, [r7, #12]
 800a69a:	f000 feab 	bl	800b3f4 <_ZSt14__copy_move_a2ILb0EPKfPfET1_T0_S4_S3_>
 800a69e:	4603      	mov	r3, r0
 800a6a0:	4618      	mov	r0, r3
 800a6a2:	3710      	adds	r7, #16
 800a6a4:	46bd      	mov	sp, r7
 800a6a6:	bd80      	pop	{r7, pc}

0800a6a8 <_ZSt12__niter_wrapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEES2_ET_S7_T0_>:
    __niter_wrap(_From __from, _To __res)
 800a6a8:	b580      	push	{r7, lr}
 800a6aa:	b082      	sub	sp, #8
 800a6ac:	af00      	add	r7, sp, #0
 800a6ae:	6078      	str	r0, [r7, #4]
 800a6b0:	6039      	str	r1, [r7, #0]
    { return __from + (__res - std::__niter_base(__from)); }
 800a6b2:	6878      	ldr	r0, [r7, #4]
 800a6b4:	f7ff ffda 	bl	800a66c <_ZSt12__niter_baseIPfSt6vectorIfSaIfEEET_N9__gnu_cxx17__normal_iteratorIS4_T0_EE>
 800a6b8:	4602      	mov	r2, r0
 800a6ba:	683b      	ldr	r3, [r7, #0]
 800a6bc:	1a9b      	subs	r3, r3, r2
 800a6be:	109b      	asrs	r3, r3, #2
 800a6c0:	461a      	mov	r2, r3
 800a6c2:	1d3b      	adds	r3, r7, #4
 800a6c4:	4611      	mov	r1, r2
 800a6c6:	4618      	mov	r0, r3
 800a6c8:	f7ff fd24 	bl	800a114 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEplEi>
 800a6cc:	4603      	mov	r3, r0
 800a6ce:	4618      	mov	r0, r3
 800a6d0:	3708      	adds	r7, #8
 800a6d2:	46bd      	mov	sp, r7
 800a6d4:	bd80      	pop	{r7, pc}

0800a6d6 <_ZNSt12_Destroy_auxILb0EE9__destroyIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEEEvT_S9_>:
	__destroy(_ForwardIterator __first, _ForwardIterator __last)
 800a6d6:	b580      	push	{r7, lr}
 800a6d8:	b082      	sub	sp, #8
 800a6da:	af00      	add	r7, sp, #0
 800a6dc:	6078      	str	r0, [r7, #4]
 800a6de:	6039      	str	r1, [r7, #0]
	  for (; __first != __last; ++__first)
 800a6e0:	e00f      	b.n	800a702 <_ZNSt12_Destroy_auxILb0EE9__destroyIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEEEvT_S9_+0x2c>
	    std::_Destroy(std::__addressof(*__first));
 800a6e2:	1d3b      	adds	r3, r7, #4
 800a6e4:	4618      	mov	r0, r3
 800a6e6:	f7ff fd3d 	bl	800a164 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEdeEv>
 800a6ea:	4603      	mov	r3, r0
 800a6ec:	4618      	mov	r0, r3
 800a6ee:	f000 fc1c 	bl	800af2a <_ZSt11__addressofIfEPT_RS0_>
 800a6f2:	4603      	mov	r3, r0
 800a6f4:	4618      	mov	r0, r3
 800a6f6:	f000 fc23 	bl	800af40 <_ZSt8_DestroyIfEvPT_>
	  for (; __first != __last; ++__first)
 800a6fa:	1d3b      	adds	r3, r7, #4
 800a6fc:	4618      	mov	r0, r3
 800a6fe:	f7ff fd21 	bl	800a144 <_ZN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEppEv>
 800a702:	463a      	mov	r2, r7
 800a704:	1d3b      	adds	r3, r7, #4
 800a706:	4611      	mov	r1, r2
 800a708:	4618      	mov	r0, r3
 800a70a:	f7fd fd7c 	bl	8008206 <_ZN9__gnu_cxxeqIPfSt6vectorIfSaIfEEEEbRKNS_17__normal_iteratorIT_T0_EESA_>
 800a70e:	4603      	mov	r3, r0
 800a710:	f083 0301 	eor.w	r3, r3, #1
 800a714:	b2db      	uxtb	r3, r3
 800a716:	2b00      	cmp	r3, #0
 800a718:	d1e3      	bne.n	800a6e2 <_ZNSt12_Destroy_auxILb0EE9__destroyIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEEEvT_S9_+0xc>
	}
 800a71a:	bf00      	nop
 800a71c:	bf00      	nop
 800a71e:	3708      	adds	r7, #8
 800a720:	46bd      	mov	sp, r7
 800a722:	bd80      	pop	{r7, pc}

0800a724 <_ZNSt12_Destroy_auxILb1EE9__destroyIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEEEvT_S9_>:
        __destroy(_ForwardIterator, _ForwardIterator) { }
 800a724:	b480      	push	{r7}
 800a726:	b083      	sub	sp, #12
 800a728:	af00      	add	r7, sp, #0
 800a72a:	6078      	str	r0, [r7, #4]
 800a72c:	6039      	str	r1, [r7, #0]
 800a72e:	bf00      	nop
 800a730:	370c      	adds	r7, #12
 800a732:	46bd      	mov	sp, r7
 800a734:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a738:	4770      	bx	lr

0800a73a <_ZSt14__copy_move_a2ILb0EPfS0_ET1_T0_S2_S1_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 800a73a:	b580      	push	{r7, lr}
 800a73c:	b084      	sub	sp, #16
 800a73e:	af00      	add	r7, sp, #0
 800a740:	60f8      	str	r0, [r7, #12]
 800a742:	60b9      	str	r1, [r7, #8]
 800a744:	607a      	str	r2, [r7, #4]
      if (std::is_constant_evaluated())
 800a746:	f7f7 fd41 	bl	80021cc <_ZSt21is_constant_evaluatedv>
 800a74a:	4603      	mov	r3, r0
 800a74c:	2b00      	cmp	r3, #0
 800a74e:	d006      	beq.n	800a75e <_ZSt14__copy_move_a2ILb0EPfS0_ET1_T0_S2_S1_+0x24>
	  __copy_m(__first, __last, __result);
 800a750:	687a      	ldr	r2, [r7, #4]
 800a752:	68b9      	ldr	r1, [r7, #8]
 800a754:	68f8      	ldr	r0, [r7, #12]
 800a756:	f000 fe6a 	bl	800b42e <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPfS3_EET0_T_S5_S4_>
 800a75a:	4603      	mov	r3, r0
 800a75c:	e006      	b.n	800a76c <_ZSt14__copy_move_a2ILb0EPfS0_ET1_T0_S2_S1_+0x32>
			      _Category>::__copy_m(__first, __last, __result);
 800a75e:	687a      	ldr	r2, [r7, #4]
 800a760:	68b9      	ldr	r1, [r7, #8]
 800a762:	68f8      	ldr	r0, [r7, #12]
 800a764:	f000 fe86 	bl	800b474 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIfEEPT_PKS3_S6_S4_>
 800a768:	4603      	mov	r3, r0
 800a76a:	bf00      	nop
    }
 800a76c:	4618      	mov	r0, r3
 800a76e:	3710      	adds	r7, #16
 800a770:	46bd      	mov	sp, r7
 800a772:	bd80      	pop	{r7, pc}

0800a774 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIPfS2_EET0_T_S4_S3_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 800a774:	b580      	push	{r7, lr}
 800a776:	b084      	sub	sp, #16
 800a778:	af00      	add	r7, sp, #0
 800a77a:	60f8      	str	r0, [r7, #12]
 800a77c:	60b9      	str	r1, [r7, #8]
 800a77e:	607a      	str	r2, [r7, #4]
        { return std::copy(__first, __last, __result); }
 800a780:	687a      	ldr	r2, [r7, #4]
 800a782:	68b9      	ldr	r1, [r7, #8]
 800a784:	68f8      	ldr	r0, [r7, #12]
 800a786:	f7fc ffc8 	bl	800771a <_ZSt4copyIPfS0_ET0_T_S2_S1_>
 800a78a:	4603      	mov	r3, r0
 800a78c:	4618      	mov	r0, r3
 800a78e:	3710      	adds	r7, #16
 800a790:	46bd      	mov	sp, r7
 800a792:	bd80      	pop	{r7, pc}

0800a794 <_ZNSt12_Destroy_auxILb0EE9__destroyIPN3jlb4EdgeEEEvT_S5_>:
	__destroy(_ForwardIterator __first, _ForwardIterator __last)
 800a794:	b580      	push	{r7, lr}
 800a796:	b082      	sub	sp, #8
 800a798:	af00      	add	r7, sp, #0
 800a79a:	6078      	str	r0, [r7, #4]
 800a79c:	6039      	str	r1, [r7, #0]
	  for (; __first != __last; ++__first)
 800a79e:	e009      	b.n	800a7b4 <_ZNSt12_Destroy_auxILb0EE9__destroyIPN3jlb4EdgeEEEvT_S5_+0x20>
	    std::_Destroy(std::__addressof(*__first));
 800a7a0:	6878      	ldr	r0, [r7, #4]
 800a7a2:	f000 fe96 	bl	800b4d2 <_ZSt11__addressofIN3jlb4EdgeEEPT_RS2_>
 800a7a6:	4603      	mov	r3, r0
 800a7a8:	4618      	mov	r0, r3
 800a7aa:	f000 fe9d 	bl	800b4e8 <_ZSt8_DestroyIN3jlb4EdgeEEvPT_>
	  for (; __first != __last; ++__first)
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	3318      	adds	r3, #24
 800a7b2:	607b      	str	r3, [r7, #4]
 800a7b4:	687a      	ldr	r2, [r7, #4]
 800a7b6:	683b      	ldr	r3, [r7, #0]
 800a7b8:	429a      	cmp	r2, r3
 800a7ba:	d1f1      	bne.n	800a7a0 <_ZNSt12_Destroy_auxILb0EE9__destroyIPN3jlb4EdgeEEEvT_S5_+0xc>
	}
 800a7bc:	bf00      	nop
 800a7be:	bf00      	nop
 800a7c0:	3708      	adds	r7, #8
 800a7c2:	46bd      	mov	sp, r7
 800a7c4:	bd80      	pop	{r7, pc}

0800a7c6 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIN9__gnu_cxx17__normal_iteratorIPKcSt6vectorIcSaIcEEEEPcEET0_T_SC_SB_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 800a7c6:	b580      	push	{r7, lr}
 800a7c8:	b084      	sub	sp, #16
 800a7ca:	af00      	add	r7, sp, #0
 800a7cc:	60f8      	str	r0, [r7, #12]
 800a7ce:	60b9      	str	r1, [r7, #8]
 800a7d0:	607a      	str	r2, [r7, #4]
        { return std::copy(__first, __last, __result); }
 800a7d2:	687a      	ldr	r2, [r7, #4]
 800a7d4:	68b9      	ldr	r1, [r7, #8]
 800a7d6:	68f8      	ldr	r0, [r7, #12]
 800a7d8:	f000 fe91 	bl	800b4fe <_ZSt4copyIN9__gnu_cxx17__normal_iteratorIPKcSt6vectorIcSaIcEEEEPcET0_T_SA_S9_>
 800a7dc:	4603      	mov	r3, r0
 800a7de:	4618      	mov	r0, r3
 800a7e0:	3710      	adds	r7, #16
 800a7e2:	46bd      	mov	sp, r7
 800a7e4:	bd80      	pop	{r7, pc}

0800a7e6 <_ZNSt12_Destroy_auxILb0EE9__destroyIPcEEvT_S3_>:
	__destroy(_ForwardIterator __first, _ForwardIterator __last)
 800a7e6:	b580      	push	{r7, lr}
 800a7e8:	b082      	sub	sp, #8
 800a7ea:	af00      	add	r7, sp, #0
 800a7ec:	6078      	str	r0, [r7, #4]
 800a7ee:	6039      	str	r1, [r7, #0]
	  for (; __first != __last; ++__first)
 800a7f0:	e009      	b.n	800a806 <_ZNSt12_Destroy_auxILb0EE9__destroyIPcEEvT_S3_+0x20>
	    std::_Destroy(std::__addressof(*__first));
 800a7f2:	6878      	ldr	r0, [r7, #4]
 800a7f4:	f000 fe9b 	bl	800b52e <_ZSt11__addressofIcEPT_RS0_>
 800a7f8:	4603      	mov	r3, r0
 800a7fa:	4618      	mov	r0, r3
 800a7fc:	f000 fea2 	bl	800b544 <_ZSt8_DestroyIcEvPT_>
	  for (; __first != __last; ++__first)
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	3301      	adds	r3, #1
 800a804:	607b      	str	r3, [r7, #4]
 800a806:	687a      	ldr	r2, [r7, #4]
 800a808:	683b      	ldr	r3, [r7, #0]
 800a80a:	429a      	cmp	r2, r3
 800a80c:	d1f1      	bne.n	800a7f2 <_ZNSt12_Destroy_auxILb0EE9__destroyIPcEEvT_S3_+0xc>
	}
 800a80e:	bf00      	nop
 800a810:	bf00      	nop
 800a812:	3708      	adds	r7, #8
 800a814:	46bd      	mov	sp, r7
 800a816:	bd80      	pop	{r7, pc}

0800a818 <_ZNSt12_Destroy_auxILb1EE9__destroyIPcEEvT_S3_>:
        __destroy(_ForwardIterator, _ForwardIterator) { }
 800a818:	b480      	push	{r7}
 800a81a:	b083      	sub	sp, #12
 800a81c:	af00      	add	r7, sp, #0
 800a81e:	6078      	str	r0, [r7, #4]
 800a820:	6039      	str	r1, [r7, #0]
 800a822:	bf00      	nop
 800a824:	370c      	adds	r7, #12
 800a826:	46bd      	mov	sp, r7
 800a828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a82c:	4770      	bx	lr

0800a82e <_ZNSt12_Vector_baseIcSaIcEE12_Vector_implC1EOS2_>:
	_Vector_impl(_Vector_impl&& __x) noexcept
 800a82e:	b590      	push	{r4, r7, lr}
 800a830:	b083      	sub	sp, #12
 800a832:	af00      	add	r7, sp, #0
 800a834:	6078      	str	r0, [r7, #4]
 800a836:	6039      	str	r1, [r7, #0]
	: _Tp_alloc_type(std::move(__x)), _Vector_impl_data(std::move(__x))
 800a838:	6838      	ldr	r0, [r7, #0]
 800a83a:	f000 fe8e 	bl	800b55a <_ZSt4moveIRNSt12_Vector_baseIcSaIcEE12_Vector_implEEONSt16remove_referenceIT_E4typeEOS6_>
 800a83e:	4603      	mov	r3, r0
 800a840:	4619      	mov	r1, r3
 800a842:	6878      	ldr	r0, [r7, #4]
 800a844:	f010 ff78 	bl	801b738 <_ZNSaIcEC1ERKS_>
 800a848:	687c      	ldr	r4, [r7, #4]
 800a84a:	6838      	ldr	r0, [r7, #0]
 800a84c:	f000 fe85 	bl	800b55a <_ZSt4moveIRNSt12_Vector_baseIcSaIcEE12_Vector_implEEONSt16remove_referenceIT_E4typeEOS6_>
 800a850:	4603      	mov	r3, r0
 800a852:	4619      	mov	r1, r3
 800a854:	4620      	mov	r0, r4
 800a856:	f000 fe8b 	bl	800b570 <_ZNSt12_Vector_baseIcSaIcEE17_Vector_impl_dataC1EOS2_>
	{ }
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	4618      	mov	r0, r3
 800a85e:	370c      	adds	r7, #12
 800a860:	46bd      	mov	sp, r7
 800a862:	bd90      	pop	{r4, r7, pc}

0800a864 <_ZN9__gnu_cxx17__normal_iteratorIPN3jlb4EdgeESt6vectorIS2_SaIS2_EEEC1ERKS3_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 800a864:	b480      	push	{r7}
 800a866:	b083      	sub	sp, #12
 800a868:	af00      	add	r7, sp, #0
 800a86a:	6078      	str	r0, [r7, #4]
 800a86c:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 800a86e:	683b      	ldr	r3, [r7, #0]
 800a870:	681a      	ldr	r2, [r3, #0]
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	601a      	str	r2, [r3, #0]
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	4618      	mov	r0, r3
 800a87a:	370c      	adds	r7, #12
 800a87c:	46bd      	mov	sp, r7
 800a87e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a882:	4770      	bx	lr

0800a884 <_ZNKSt6vectorIN3jlb4EdgeESaIS1_EE12_M_check_lenEjPKc>:
      _M_check_len(size_type __n, const char* __s) const
 800a884:	b590      	push	{r4, r7, lr}
 800a886:	b087      	sub	sp, #28
 800a888:	af00      	add	r7, sp, #0
 800a88a:	60f8      	str	r0, [r7, #12]
 800a88c:	60b9      	str	r1, [r7, #8]
 800a88e:	607a      	str	r2, [r7, #4]
	if (max_size() - size() < __n)
 800a890:	68f8      	ldr	r0, [r7, #12]
 800a892:	f000 fe90 	bl	800b5b6 <_ZNKSt6vectorIN3jlb4EdgeESaIS1_EE8max_sizeEv>
 800a896:	4604      	mov	r4, r0
 800a898:	68f8      	ldr	r0, [r7, #12]
 800a89a:	f7fd f9c1 	bl	8007c20 <_ZNKSt6vectorIN3jlb4EdgeESaIS1_EE4sizeEv>
 800a89e:	4603      	mov	r3, r0
 800a8a0:	1ae2      	subs	r2, r4, r3
 800a8a2:	68bb      	ldr	r3, [r7, #8]
 800a8a4:	429a      	cmp	r2, r3
 800a8a6:	bf34      	ite	cc
 800a8a8:	2301      	movcc	r3, #1
 800a8aa:	2300      	movcs	r3, #0
 800a8ac:	b2db      	uxtb	r3, r3
 800a8ae:	2b00      	cmp	r3, #0
 800a8b0:	d002      	beq.n	800a8b8 <_ZNKSt6vectorIN3jlb4EdgeESaIS1_EE12_M_check_lenEjPKc+0x34>
	  __throw_length_error(__N(__s));
 800a8b2:	6878      	ldr	r0, [r7, #4]
 800a8b4:	f010 ff48 	bl	801b748 <_ZSt20__throw_length_errorPKc>
	const size_type __len = size() + (std::max)(size(), __n);
 800a8b8:	68f8      	ldr	r0, [r7, #12]
 800a8ba:	f7fd f9b1 	bl	8007c20 <_ZNKSt6vectorIN3jlb4EdgeESaIS1_EE4sizeEv>
 800a8be:	4604      	mov	r4, r0
 800a8c0:	68f8      	ldr	r0, [r7, #12]
 800a8c2:	f7fd f9ad 	bl	8007c20 <_ZNKSt6vectorIN3jlb4EdgeESaIS1_EE4sizeEv>
 800a8c6:	4603      	mov	r3, r0
 800a8c8:	613b      	str	r3, [r7, #16]
 800a8ca:	f107 0208 	add.w	r2, r7, #8
 800a8ce:	f107 0310 	add.w	r3, r7, #16
 800a8d2:	4611      	mov	r1, r2
 800a8d4:	4618      	mov	r0, r3
 800a8d6:	f7fe f971 	bl	8008bbc <_ZSt3maxIjERKT_S2_S2_>
 800a8da:	4603      	mov	r3, r0
 800a8dc:	681b      	ldr	r3, [r3, #0]
 800a8de:	4423      	add	r3, r4
 800a8e0:	617b      	str	r3, [r7, #20]
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 800a8e2:	68f8      	ldr	r0, [r7, #12]
 800a8e4:	f7fd f99c 	bl	8007c20 <_ZNKSt6vectorIN3jlb4EdgeESaIS1_EE4sizeEv>
 800a8e8:	4602      	mov	r2, r0
 800a8ea:	697b      	ldr	r3, [r7, #20]
 800a8ec:	4293      	cmp	r3, r2
 800a8ee:	d306      	bcc.n	800a8fe <_ZNKSt6vectorIN3jlb4EdgeESaIS1_EE12_M_check_lenEjPKc+0x7a>
 800a8f0:	68f8      	ldr	r0, [r7, #12]
 800a8f2:	f000 fe60 	bl	800b5b6 <_ZNKSt6vectorIN3jlb4EdgeESaIS1_EE8max_sizeEv>
 800a8f6:	4602      	mov	r2, r0
 800a8f8:	697b      	ldr	r3, [r7, #20]
 800a8fa:	4293      	cmp	r3, r2
 800a8fc:	d904      	bls.n	800a908 <_ZNKSt6vectorIN3jlb4EdgeESaIS1_EE12_M_check_lenEjPKc+0x84>
 800a8fe:	68f8      	ldr	r0, [r7, #12]
 800a900:	f000 fe59 	bl	800b5b6 <_ZNKSt6vectorIN3jlb4EdgeESaIS1_EE8max_sizeEv>
 800a904:	4603      	mov	r3, r0
 800a906:	e000      	b.n	800a90a <_ZNKSt6vectorIN3jlb4EdgeESaIS1_EE12_M_check_lenEjPKc+0x86>
 800a908:	697b      	ldr	r3, [r7, #20]
      }
 800a90a:	4618      	mov	r0, r3
 800a90c:	371c      	adds	r7, #28
 800a90e:	46bd      	mov	sp, r7
 800a910:	bd90      	pop	{r4, r7, pc}

0800a912 <_ZNSt6vectorIN3jlb4EdgeESaIS1_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 800a912:	b580      	push	{r7, lr}
 800a914:	b084      	sub	sp, #16
 800a916:	af00      	add	r7, sp, #0
 800a918:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_start); }
 800a91a:	687a      	ldr	r2, [r7, #4]
 800a91c:	f107 030c 	add.w	r3, r7, #12
 800a920:	4611      	mov	r1, r2
 800a922:	4618      	mov	r0, r3
 800a924:	f7ff ff9e 	bl	800a864 <_ZN9__gnu_cxx17__normal_iteratorIPN3jlb4EdgeESt6vectorIS2_SaIS2_EEEC1ERKS3_>
 800a928:	68fb      	ldr	r3, [r7, #12]
 800a92a:	4618      	mov	r0, r3
 800a92c:	3710      	adds	r7, #16
 800a92e:	46bd      	mov	sp, r7
 800a930:	bd80      	pop	{r7, pc}
	...

0800a934 <_ZN9__gnu_cxxmiIPN3jlb4EdgeESt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>:
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
 800a934:	b590      	push	{r4, r7, lr}
 800a936:	b083      	sub	sp, #12
 800a938:	af00      	add	r7, sp, #0
 800a93a:	6078      	str	r0, [r7, #4]
 800a93c:	6039      	str	r1, [r7, #0]
    { return __lhs.base() - __rhs.base(); }
 800a93e:	6878      	ldr	r0, [r7, #4]
 800a940:	f000 f83a 	bl	800a9b8 <_ZNK9__gnu_cxx17__normal_iteratorIPN3jlb4EdgeESt6vectorIS2_SaIS2_EEE4baseEv>
 800a944:	4603      	mov	r3, r0
 800a946:	681c      	ldr	r4, [r3, #0]
 800a948:	6838      	ldr	r0, [r7, #0]
 800a94a:	f000 f835 	bl	800a9b8 <_ZNK9__gnu_cxx17__normal_iteratorIPN3jlb4EdgeESt6vectorIS2_SaIS2_EEE4baseEv>
 800a94e:	4603      	mov	r3, r0
 800a950:	681b      	ldr	r3, [r3, #0]
 800a952:	1ae3      	subs	r3, r4, r3
 800a954:	10db      	asrs	r3, r3, #3
 800a956:	4a03      	ldr	r2, [pc, #12]	; (800a964 <_ZN9__gnu_cxxmiIPN3jlb4EdgeESt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_+0x30>)
 800a958:	fb02 f303 	mul.w	r3, r2, r3
 800a95c:	4618      	mov	r0, r3
 800a95e:	370c      	adds	r7, #12
 800a960:	46bd      	mov	sp, r7
 800a962:	bd90      	pop	{r4, r7, pc}
 800a964:	aaaaaaab 	.word	0xaaaaaaab

0800a968 <_ZNSt12_Vector_baseIN3jlb4EdgeESaIS1_EE11_M_allocateEj>:
      _M_allocate(size_t __n)
 800a968:	b580      	push	{r7, lr}
 800a96a:	b082      	sub	sp, #8
 800a96c:	af00      	add	r7, sp, #0
 800a96e:	6078      	str	r0, [r7, #4]
 800a970:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 800a972:	683b      	ldr	r3, [r7, #0]
 800a974:	2b00      	cmp	r3, #0
 800a976:	d006      	beq.n	800a986 <_ZNSt12_Vector_baseIN3jlb4EdgeESaIS1_EE11_M_allocateEj+0x1e>
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	6839      	ldr	r1, [r7, #0]
 800a97c:	4618      	mov	r0, r3
 800a97e:	f000 fe2b 	bl	800b5d8 <_ZNSt16allocator_traitsISaIN3jlb4EdgeEEE8allocateERS2_j>
 800a982:	4603      	mov	r3, r0
 800a984:	e000      	b.n	800a988 <_ZNSt12_Vector_baseIN3jlb4EdgeESaIS1_EE11_M_allocateEj+0x20>
 800a986:	2300      	movs	r3, #0
      }
 800a988:	4618      	mov	r0, r3
 800a98a:	3708      	adds	r7, #8
 800a98c:	46bd      	mov	sp, r7
 800a98e:	bd80      	pop	{r7, pc}

0800a990 <_ZNSt6vectorIN3jlb4EdgeESaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>:
      _S_relocate(pointer __first, pointer __last, pointer __result,
 800a990:	b590      	push	{r4, r7, lr}
 800a992:	b087      	sub	sp, #28
 800a994:	af02      	add	r7, sp, #8
 800a996:	60f8      	str	r0, [r7, #12]
 800a998:	60b9      	str	r1, [r7, #8]
 800a99a:	607a      	str	r2, [r7, #4]
 800a99c:	603b      	str	r3, [r7, #0]
	return _S_do_relocate(__first, __last, __result, __alloc, __do_it{});
 800a99e:	f88d 4000 	strb.w	r4, [sp]
 800a9a2:	683b      	ldr	r3, [r7, #0]
 800a9a4:	687a      	ldr	r2, [r7, #4]
 800a9a6:	68b9      	ldr	r1, [r7, #8]
 800a9a8:	68f8      	ldr	r0, [r7, #12]
 800a9aa:	f000 fe38 	bl	800b61e <_ZNSt6vectorIN3jlb4EdgeESaIS1_EE14_S_do_relocateEPS1_S4_S4_RS2_St17integral_constantIbLb1EE>
 800a9ae:	4603      	mov	r3, r0
      }
 800a9b0:	4618      	mov	r0, r3
 800a9b2:	3714      	adds	r7, #20
 800a9b4:	46bd      	mov	sp, r7
 800a9b6:	bd90      	pop	{r4, r7, pc}

0800a9b8 <_ZNK9__gnu_cxx17__normal_iteratorIPN3jlb4EdgeESt6vectorIS2_SaIS2_EEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 800a9b8:	b480      	push	{r7}
 800a9ba:	b083      	sub	sp, #12
 800a9bc:	af00      	add	r7, sp, #0
 800a9be:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	4618      	mov	r0, r3
 800a9c4:	370c      	adds	r7, #12
 800a9c6:	46bd      	mov	sp, r7
 800a9c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9cc:	4770      	bx	lr

0800a9ce <_ZNSt16allocator_traitsISaIN3jlb4EdgeEEE7destroyIS1_EEvRS2_PT_>:
	destroy(allocator_type& __a __attribute__((__unused__)), _Up* __p)
 800a9ce:	b580      	push	{r7, lr}
 800a9d0:	b082      	sub	sp, #8
 800a9d2:	af00      	add	r7, sp, #0
 800a9d4:	6078      	str	r0, [r7, #4]
 800a9d6:	6039      	str	r1, [r7, #0]
	  std::destroy_at(__p);
 800a9d8:	6838      	ldr	r0, [r7, #0]
 800a9da:	f000 fe32 	bl	800b642 <_ZSt10destroy_atIN3jlb4EdgeEEvPT_>
	}
 800a9de:	bf00      	nop
 800a9e0:	3708      	adds	r7, #8
 800a9e2:	46bd      	mov	sp, r7
 800a9e4:	bd80      	pop	{r7, pc}

0800a9e6 <_ZNK9__gnu_cxx17__normal_iteratorIPN3jlb4EdgeESt6vectorIS2_SaIS2_EEEmiEi>:
      operator-(difference_type __n) const _GLIBCXX_NOEXCEPT
 800a9e6:	b580      	push	{r7, lr}
 800a9e8:	b084      	sub	sp, #16
 800a9ea:	af00      	add	r7, sp, #0
 800a9ec:	6078      	str	r0, [r7, #4]
 800a9ee:	6039      	str	r1, [r7, #0]
      { return __normal_iterator(_M_current - __n); }
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	6819      	ldr	r1, [r3, #0]
 800a9f4:	683a      	ldr	r2, [r7, #0]
 800a9f6:	4613      	mov	r3, r2
 800a9f8:	005b      	lsls	r3, r3, #1
 800a9fa:	4413      	add	r3, r2
 800a9fc:	00db      	lsls	r3, r3, #3
 800a9fe:	425b      	negs	r3, r3
 800aa00:	440b      	add	r3, r1
 800aa02:	60fb      	str	r3, [r7, #12]
 800aa04:	f107 020c 	add.w	r2, r7, #12
 800aa08:	f107 0308 	add.w	r3, r7, #8
 800aa0c:	4611      	mov	r1, r2
 800aa0e:	4618      	mov	r0, r3
 800aa10:	f7ff ff28 	bl	800a864 <_ZN9__gnu_cxx17__normal_iteratorIPN3jlb4EdgeESt6vectorIS2_SaIS2_EEEC1ERKS3_>
 800aa14:	68bb      	ldr	r3, [r7, #8]
 800aa16:	4618      	mov	r0, r3
 800aa18:	3710      	adds	r7, #16
 800aa1a:	46bd      	mov	sp, r7
 800aa1c:	bd80      	pop	{r7, pc}

0800aa1e <_ZNK9__gnu_cxx17__normal_iteratorIPN3jlb4EdgeESt6vectorIS2_SaIS2_EEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 800aa1e:	b480      	push	{r7}
 800aa20:	b083      	sub	sp, #12
 800aa22:	af00      	add	r7, sp, #0
 800aa24:	6078      	str	r0, [r7, #4]
      { return *_M_current; }
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	681b      	ldr	r3, [r3, #0]
 800aa2a:	4618      	mov	r0, r3
 800aa2c:	370c      	adds	r7, #12
 800aa2e:	46bd      	mov	sp, r7
 800aa30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa34:	4770      	bx	lr

0800aa36 <_ZNSt12_Destroy_auxILb0EE9__destroyIPN3jlb4NodeEEEvT_S5_>:
	__destroy(_ForwardIterator __first, _ForwardIterator __last)
 800aa36:	b580      	push	{r7, lr}
 800aa38:	b082      	sub	sp, #8
 800aa3a:	af00      	add	r7, sp, #0
 800aa3c:	6078      	str	r0, [r7, #4]
 800aa3e:	6039      	str	r1, [r7, #0]
	  for (; __first != __last; ++__first)
 800aa40:	e009      	b.n	800aa56 <_ZNSt12_Destroy_auxILb0EE9__destroyIPN3jlb4NodeEEEvT_S5_+0x20>
	    std::_Destroy(std::__addressof(*__first));
 800aa42:	6878      	ldr	r0, [r7, #4]
 800aa44:	f000 fe1a 	bl	800b67c <_ZSt11__addressofIN3jlb4NodeEEPT_RS2_>
 800aa48:	4603      	mov	r3, r0
 800aa4a:	4618      	mov	r0, r3
 800aa4c:	f000 fe21 	bl	800b692 <_ZSt8_DestroyIN3jlb4NodeEEvPT_>
	  for (; __first != __last; ++__first)
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	3318      	adds	r3, #24
 800aa54:	607b      	str	r3, [r7, #4]
 800aa56:	687a      	ldr	r2, [r7, #4]
 800aa58:	683b      	ldr	r3, [r7, #0]
 800aa5a:	429a      	cmp	r2, r3
 800aa5c:	d1f1      	bne.n	800aa42 <_ZNSt12_Destroy_auxILb0EE9__destroyIPN3jlb4NodeEEEvT_S5_+0xc>
	}
 800aa5e:	bf00      	nop
 800aa60:	bf00      	nop
 800aa62:	3708      	adds	r7, #8
 800aa64:	46bd      	mov	sp, r7
 800aa66:	bd80      	pop	{r7, pc}

0800aa68 <_ZNSt6vectorIN3jlb4EdgeESaIS1_EEC1ERKS3_>:
      vector(const vector& __x)
 800aa68:	b5f0      	push	{r4, r5, r6, r7, lr}
 800aa6a:	b085      	sub	sp, #20
 800aa6c:	af00      	add	r7, sp, #0
 800aa6e:	6078      	str	r0, [r7, #4]
 800aa70:	6039      	str	r1, [r7, #0]
	_Alloc_traits::_S_select_on_copy(__x._M_get_Tp_allocator()))
 800aa72:	687c      	ldr	r4, [r7, #4]
 800aa74:	6838      	ldr	r0, [r7, #0]
 800aa76:	f7fd f8d3 	bl	8007c20 <_ZNKSt6vectorIN3jlb4EdgeESaIS1_EE4sizeEv>
 800aa7a:	4605      	mov	r5, r0
 800aa7c:	683b      	ldr	r3, [r7, #0]
 800aa7e:	4618      	mov	r0, r3
 800aa80:	f000 fe20 	bl	800b6c4 <_ZNKSt12_Vector_baseIN3jlb4EdgeESaIS1_EE19_M_get_Tp_allocatorEv>
 800aa84:	4602      	mov	r2, r0
 800aa86:	f107 030c 	add.w	r3, r7, #12
 800aa8a:	4611      	mov	r1, r2
 800aa8c:	4618      	mov	r0, r3
 800aa8e:	f000 fe0b 	bl	800b6a8 <_ZN9__gnu_cxx14__alloc_traitsISaIN3jlb4EdgeEES2_E17_S_select_on_copyERKS3_>
 800aa92:	f107 030c 	add.w	r3, r7, #12
 800aa96:	461a      	mov	r2, r3
 800aa98:	4629      	mov	r1, r5
 800aa9a:	4620      	mov	r0, r4
 800aa9c:	f000 fe1d 	bl	800b6da <_ZNSt12_Vector_baseIN3jlb4EdgeESaIS1_EEC1EjRKS2_>
 800aaa0:	f107 030c 	add.w	r3, r7, #12
 800aaa4:	4618      	mov	r0, r3
 800aaa6:	f7fc ff58 	bl	800795a <_ZNSaIN3jlb4EdgeEED1Ev>
	  std::__uninitialized_copy_a(__x.begin(), __x.end(),
 800aaaa:	6838      	ldr	r0, [r7, #0]
 800aaac:	f000 fe29 	bl	800b702 <_ZNKSt6vectorIN3jlb4EdgeESaIS1_EE5beginEv>
 800aab0:	4605      	mov	r5, r0
 800aab2:	6838      	ldr	r0, [r7, #0]
 800aab4:	f000 fe35 	bl	800b722 <_ZNKSt6vectorIN3jlb4EdgeESaIS1_EE3endEv>
 800aab8:	4606      	mov	r6, r0
 800aaba:	687b      	ldr	r3, [r7, #4]
 800aabc:	681c      	ldr	r4, [r3, #0]
				      _M_get_Tp_allocator());
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	4618      	mov	r0, r3
 800aac2:	f7fd fd5f 	bl	8008584 <_ZNSt12_Vector_baseIN3jlb4EdgeESaIS1_EE19_M_get_Tp_allocatorEv>
 800aac6:	4603      	mov	r3, r0
	  std::__uninitialized_copy_a(__x.begin(), __x.end(),
 800aac8:	4622      	mov	r2, r4
 800aaca:	4631      	mov	r1, r6
 800aacc:	4628      	mov	r0, r5
 800aace:	f000 fe39 	bl	800b744 <_ZSt22__uninitialized_copy_aIN9__gnu_cxx17__normal_iteratorIPKN3jlb4EdgeESt6vectorIS3_SaIS3_EEEEPS3_S3_ET0_T_SC_SB_RSaIT1_E>
 800aad2:	4602      	mov	r2, r0
	this->_M_impl._M_finish =
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	605a      	str	r2, [r3, #4]
      }
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	4618      	mov	r0, r3
 800aadc:	3714      	adds	r7, #20
 800aade:	46bd      	mov	sp, r7
 800aae0:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800aae2 <_ZN9__gnu_cxx17__normal_iteratorIPN3jlb4NodeESt6vectorIS2_SaIS2_EEEC1ERKS3_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 800aae2:	b480      	push	{r7}
 800aae4:	b083      	sub	sp, #12
 800aae6:	af00      	add	r7, sp, #0
 800aae8:	6078      	str	r0, [r7, #4]
 800aaea:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 800aaec:	683b      	ldr	r3, [r7, #0]
 800aaee:	681a      	ldr	r2, [r3, #0]
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	601a      	str	r2, [r3, #0]
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	4618      	mov	r0, r3
 800aaf8:	370c      	adds	r7, #12
 800aafa:	46bd      	mov	sp, r7
 800aafc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab00:	4770      	bx	lr

0800ab02 <_ZNKSt6vectorIN3jlb4NodeESaIS1_EE12_M_check_lenEjPKc>:
      _M_check_len(size_type __n, const char* __s) const
 800ab02:	b590      	push	{r4, r7, lr}
 800ab04:	b087      	sub	sp, #28
 800ab06:	af00      	add	r7, sp, #0
 800ab08:	60f8      	str	r0, [r7, #12]
 800ab0a:	60b9      	str	r1, [r7, #8]
 800ab0c:	607a      	str	r2, [r7, #4]
	if (max_size() - size() < __n)
 800ab0e:	68f8      	ldr	r0, [r7, #12]
 800ab10:	f000 fe29 	bl	800b766 <_ZNKSt6vectorIN3jlb4NodeESaIS1_EE8max_sizeEv>
 800ab14:	4604      	mov	r4, r0
 800ab16:	68f8      	ldr	r0, [r7, #12]
 800ab18:	f000 fe36 	bl	800b788 <_ZNKSt6vectorIN3jlb4NodeESaIS1_EE4sizeEv>
 800ab1c:	4603      	mov	r3, r0
 800ab1e:	1ae2      	subs	r2, r4, r3
 800ab20:	68bb      	ldr	r3, [r7, #8]
 800ab22:	429a      	cmp	r2, r3
 800ab24:	bf34      	ite	cc
 800ab26:	2301      	movcc	r3, #1
 800ab28:	2300      	movcs	r3, #0
 800ab2a:	b2db      	uxtb	r3, r3
 800ab2c:	2b00      	cmp	r3, #0
 800ab2e:	d002      	beq.n	800ab36 <_ZNKSt6vectorIN3jlb4NodeESaIS1_EE12_M_check_lenEjPKc+0x34>
	  __throw_length_error(__N(__s));
 800ab30:	6878      	ldr	r0, [r7, #4]
 800ab32:	f010 fe09 	bl	801b748 <_ZSt20__throw_length_errorPKc>
	const size_type __len = size() + (std::max)(size(), __n);
 800ab36:	68f8      	ldr	r0, [r7, #12]
 800ab38:	f000 fe26 	bl	800b788 <_ZNKSt6vectorIN3jlb4NodeESaIS1_EE4sizeEv>
 800ab3c:	4604      	mov	r4, r0
 800ab3e:	68f8      	ldr	r0, [r7, #12]
 800ab40:	f000 fe22 	bl	800b788 <_ZNKSt6vectorIN3jlb4NodeESaIS1_EE4sizeEv>
 800ab44:	4603      	mov	r3, r0
 800ab46:	613b      	str	r3, [r7, #16]
 800ab48:	f107 0208 	add.w	r2, r7, #8
 800ab4c:	f107 0310 	add.w	r3, r7, #16
 800ab50:	4611      	mov	r1, r2
 800ab52:	4618      	mov	r0, r3
 800ab54:	f7fe f832 	bl	8008bbc <_ZSt3maxIjERKT_S2_S2_>
 800ab58:	4603      	mov	r3, r0
 800ab5a:	681b      	ldr	r3, [r3, #0]
 800ab5c:	4423      	add	r3, r4
 800ab5e:	617b      	str	r3, [r7, #20]
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 800ab60:	68f8      	ldr	r0, [r7, #12]
 800ab62:	f000 fe11 	bl	800b788 <_ZNKSt6vectorIN3jlb4NodeESaIS1_EE4sizeEv>
 800ab66:	4602      	mov	r2, r0
 800ab68:	697b      	ldr	r3, [r7, #20]
 800ab6a:	4293      	cmp	r3, r2
 800ab6c:	d306      	bcc.n	800ab7c <_ZNKSt6vectorIN3jlb4NodeESaIS1_EE12_M_check_lenEjPKc+0x7a>
 800ab6e:	68f8      	ldr	r0, [r7, #12]
 800ab70:	f000 fdf9 	bl	800b766 <_ZNKSt6vectorIN3jlb4NodeESaIS1_EE8max_sizeEv>
 800ab74:	4602      	mov	r2, r0
 800ab76:	697b      	ldr	r3, [r7, #20]
 800ab78:	4293      	cmp	r3, r2
 800ab7a:	d904      	bls.n	800ab86 <_ZNKSt6vectorIN3jlb4NodeESaIS1_EE12_M_check_lenEjPKc+0x84>
 800ab7c:	68f8      	ldr	r0, [r7, #12]
 800ab7e:	f000 fdf2 	bl	800b766 <_ZNKSt6vectorIN3jlb4NodeESaIS1_EE8max_sizeEv>
 800ab82:	4603      	mov	r3, r0
 800ab84:	e000      	b.n	800ab88 <_ZNKSt6vectorIN3jlb4NodeESaIS1_EE12_M_check_lenEjPKc+0x86>
 800ab86:	697b      	ldr	r3, [r7, #20]
      }
 800ab88:	4618      	mov	r0, r3
 800ab8a:	371c      	adds	r7, #28
 800ab8c:	46bd      	mov	sp, r7
 800ab8e:	bd90      	pop	{r4, r7, pc}

0800ab90 <_ZNSt6vectorIN3jlb4NodeESaIS1_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 800ab90:	b580      	push	{r7, lr}
 800ab92:	b084      	sub	sp, #16
 800ab94:	af00      	add	r7, sp, #0
 800ab96:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_start); }
 800ab98:	687a      	ldr	r2, [r7, #4]
 800ab9a:	f107 030c 	add.w	r3, r7, #12
 800ab9e:	4611      	mov	r1, r2
 800aba0:	4618      	mov	r0, r3
 800aba2:	f7ff ff9e 	bl	800aae2 <_ZN9__gnu_cxx17__normal_iteratorIPN3jlb4NodeESt6vectorIS2_SaIS2_EEEC1ERKS3_>
 800aba6:	68fb      	ldr	r3, [r7, #12]
 800aba8:	4618      	mov	r0, r3
 800abaa:	3710      	adds	r7, #16
 800abac:	46bd      	mov	sp, r7
 800abae:	bd80      	pop	{r7, pc}

0800abb0 <_ZN9__gnu_cxxmiIPN3jlb4NodeESt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>:
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
 800abb0:	b590      	push	{r4, r7, lr}
 800abb2:	b083      	sub	sp, #12
 800abb4:	af00      	add	r7, sp, #0
 800abb6:	6078      	str	r0, [r7, #4]
 800abb8:	6039      	str	r1, [r7, #0]
    { return __lhs.base() - __rhs.base(); }
 800abba:	6878      	ldr	r0, [r7, #4]
 800abbc:	f000 f826 	bl	800ac0c <_ZNK9__gnu_cxx17__normal_iteratorIPN3jlb4NodeESt6vectorIS2_SaIS2_EEE4baseEv>
 800abc0:	4603      	mov	r3, r0
 800abc2:	681c      	ldr	r4, [r3, #0]
 800abc4:	6838      	ldr	r0, [r7, #0]
 800abc6:	f000 f821 	bl	800ac0c <_ZNK9__gnu_cxx17__normal_iteratorIPN3jlb4NodeESt6vectorIS2_SaIS2_EEE4baseEv>
 800abca:	4603      	mov	r3, r0
 800abcc:	681b      	ldr	r3, [r3, #0]
 800abce:	1ae3      	subs	r3, r4, r3
 800abd0:	10db      	asrs	r3, r3, #3
 800abd2:	4a03      	ldr	r2, [pc, #12]	; (800abe0 <_ZN9__gnu_cxxmiIPN3jlb4NodeESt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_+0x30>)
 800abd4:	fb02 f303 	mul.w	r3, r2, r3
 800abd8:	4618      	mov	r0, r3
 800abda:	370c      	adds	r7, #12
 800abdc:	46bd      	mov	sp, r7
 800abde:	bd90      	pop	{r4, r7, pc}
 800abe0:	aaaaaaab 	.word	0xaaaaaaab

0800abe4 <_ZNSt12_Vector_baseIN3jlb4NodeESaIS1_EE11_M_allocateEj>:
      _M_allocate(size_t __n)
 800abe4:	b580      	push	{r7, lr}
 800abe6:	b082      	sub	sp, #8
 800abe8:	af00      	add	r7, sp, #0
 800abea:	6078      	str	r0, [r7, #4]
 800abec:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 800abee:	683b      	ldr	r3, [r7, #0]
 800abf0:	2b00      	cmp	r3, #0
 800abf2:	d006      	beq.n	800ac02 <_ZNSt12_Vector_baseIN3jlb4NodeESaIS1_EE11_M_allocateEj+0x1e>
 800abf4:	687b      	ldr	r3, [r7, #4]
 800abf6:	6839      	ldr	r1, [r7, #0]
 800abf8:	4618      	mov	r0, r3
 800abfa:	f000 fddb 	bl	800b7b4 <_ZNSt16allocator_traitsISaIN3jlb4NodeEEE8allocateERS2_j>
 800abfe:	4603      	mov	r3, r0
 800ac00:	e000      	b.n	800ac04 <_ZNSt12_Vector_baseIN3jlb4NodeESaIS1_EE11_M_allocateEj+0x20>
 800ac02:	2300      	movs	r3, #0
      }
 800ac04:	4618      	mov	r0, r3
 800ac06:	3708      	adds	r7, #8
 800ac08:	46bd      	mov	sp, r7
 800ac0a:	bd80      	pop	{r7, pc}

0800ac0c <_ZNK9__gnu_cxx17__normal_iteratorIPN3jlb4NodeESt6vectorIS2_SaIS2_EEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 800ac0c:	b480      	push	{r7}
 800ac0e:	b083      	sub	sp, #12
 800ac10:	af00      	add	r7, sp, #0
 800ac12:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	4618      	mov	r0, r3
 800ac18:	370c      	adds	r7, #12
 800ac1a:	46bd      	mov	sp, r7
 800ac1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac20:	4770      	bx	lr

0800ac22 <_ZSt34__uninitialized_move_if_noexcept_aIPN3jlb4NodeES2_SaIS1_EET0_T_S5_S4_RT1_>:
    }

  template<typename _InputIterator, typename _ForwardIterator,
	   typename _Allocator>
    inline _ForwardIterator
    __uninitialized_move_if_noexcept_a(_InputIterator __first,
 800ac22:	b590      	push	{r4, r7, lr}
 800ac24:	b085      	sub	sp, #20
 800ac26:	af00      	add	r7, sp, #0
 800ac28:	60f8      	str	r0, [r7, #12]
 800ac2a:	60b9      	str	r1, [r7, #8]
 800ac2c:	607a      	str	r2, [r7, #4]
 800ac2e:	603b      	str	r3, [r7, #0]
				       _InputIterator __last,
				       _ForwardIterator __result,
				       _Allocator& __alloc)
    {
      return std::__uninitialized_copy_a
	(_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__first),
 800ac30:	68f8      	ldr	r0, [r7, #12]
 800ac32:	f000 fde2 	bl	800b7fa <_ZSt32__make_move_if_noexcept_iteratorIN3jlb4NodeEPKS1_ET0_PT_>
 800ac36:	4604      	mov	r4, r0
 800ac38:	68b8      	ldr	r0, [r7, #8]
 800ac3a:	f000 fdde 	bl	800b7fa <_ZSt32__make_move_if_noexcept_iteratorIN3jlb4NodeEPKS1_ET0_PT_>
 800ac3e:	4601      	mov	r1, r0
 800ac40:	683b      	ldr	r3, [r7, #0]
 800ac42:	687a      	ldr	r2, [r7, #4]
 800ac44:	4620      	mov	r0, r4
 800ac46:	f000 fde3 	bl	800b810 <_ZSt22__uninitialized_copy_aIPKN3jlb4NodeEPS1_S1_ET0_T_S6_S5_RSaIT1_E>
 800ac4a:	4603      	mov	r3, r0
	 _GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__last), __result, __alloc);
    }
 800ac4c:	4618      	mov	r0, r3
 800ac4e:	3714      	adds	r7, #20
 800ac50:	46bd      	mov	sp, r7
 800ac52:	bd90      	pop	{r4, r7, pc}

0800ac54 <_ZNK9__gnu_cxx17__normal_iteratorIPN3jlb4NodeESt6vectorIS2_SaIS2_EEEmiEi>:
      operator-(difference_type __n) const _GLIBCXX_NOEXCEPT
 800ac54:	b580      	push	{r7, lr}
 800ac56:	b084      	sub	sp, #16
 800ac58:	af00      	add	r7, sp, #0
 800ac5a:	6078      	str	r0, [r7, #4]
 800ac5c:	6039      	str	r1, [r7, #0]
      { return __normal_iterator(_M_current - __n); }
 800ac5e:	687b      	ldr	r3, [r7, #4]
 800ac60:	6819      	ldr	r1, [r3, #0]
 800ac62:	683a      	ldr	r2, [r7, #0]
 800ac64:	4613      	mov	r3, r2
 800ac66:	005b      	lsls	r3, r3, #1
 800ac68:	4413      	add	r3, r2
 800ac6a:	00db      	lsls	r3, r3, #3
 800ac6c:	425b      	negs	r3, r3
 800ac6e:	440b      	add	r3, r1
 800ac70:	60fb      	str	r3, [r7, #12]
 800ac72:	f107 020c 	add.w	r2, r7, #12
 800ac76:	f107 0308 	add.w	r3, r7, #8
 800ac7a:	4611      	mov	r1, r2
 800ac7c:	4618      	mov	r0, r3
 800ac7e:	f7ff ff30 	bl	800aae2 <_ZN9__gnu_cxx17__normal_iteratorIPN3jlb4NodeESt6vectorIS2_SaIS2_EEEC1ERKS3_>
 800ac82:	68bb      	ldr	r3, [r7, #8]
 800ac84:	4618      	mov	r0, r3
 800ac86:	3710      	adds	r7, #16
 800ac88:	46bd      	mov	sp, r7
 800ac8a:	bd80      	pop	{r7, pc}

0800ac8c <_ZNK9__gnu_cxx17__normal_iteratorIPN3jlb4NodeESt6vectorIS2_SaIS2_EEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 800ac8c:	b480      	push	{r7}
 800ac8e:	b083      	sub	sp, #12
 800ac90:	af00      	add	r7, sp, #0
 800ac92:	6078      	str	r0, [r7, #4]
      { return *_M_current; }
 800ac94:	687b      	ldr	r3, [r7, #4]
 800ac96:	681b      	ldr	r3, [r3, #0]
 800ac98:	4618      	mov	r0, r3
 800ac9a:	370c      	adds	r7, #12
 800ac9c:	46bd      	mov	sp, r7
 800ac9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aca2:	4770      	bx	lr

0800aca4 <_ZNSt16allocator_traitsISaIcEE8max_sizeERKS0_>:
      max_size(const allocator_type& __a __attribute__((__unused__))) noexcept
 800aca4:	b480      	push	{r7}
 800aca6:	b083      	sub	sp, #12
 800aca8:	af00      	add	r7, sp, #0
 800acaa:	6078      	str	r0, [r7, #4]
	return size_t(-1) / sizeof(value_type);
 800acac:	f04f 33ff 	mov.w	r3, #4294967295
      }
 800acb0:	4618      	mov	r0, r3
 800acb2:	370c      	adds	r7, #12
 800acb4:	46bd      	mov	sp, r7
 800acb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acba:	4770      	bx	lr

0800acbc <_ZNSt6vectorIcSaIcEE11_S_max_sizeERKS0_>:
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 800acbc:	b580      	push	{r7, lr}
 800acbe:	b084      	sub	sp, #16
 800acc0:	af00      	add	r7, sp, #0
 800acc2:	6078      	str	r0, [r7, #4]
	const size_t __diffmax
 800acc4:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800acc8:	60fb      	str	r3, [r7, #12]
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 800acca:	6878      	ldr	r0, [r7, #4]
 800accc:	f7ff ffea 	bl	800aca4 <_ZNSt16allocator_traitsISaIcEE8max_sizeERKS0_>
 800acd0:	4603      	mov	r3, r0
 800acd2:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 800acd4:	f107 0208 	add.w	r2, r7, #8
 800acd8:	f107 030c 	add.w	r3, r7, #12
 800acdc:	4611      	mov	r1, r2
 800acde:	4618      	mov	r0, r3
 800ace0:	f000 f8af 	bl	800ae42 <_ZSt3minIjERKT_S2_S2_>
 800ace4:	4603      	mov	r3, r0
 800ace6:	681b      	ldr	r3, [r3, #0]
      }
 800ace8:	4618      	mov	r0, r3
 800acea:	3710      	adds	r7, #16
 800acec:	46bd      	mov	sp, r7
 800acee:	bd80      	pop	{r7, pc}

0800acf0 <_ZNSt16allocator_traitsISaIcEE8allocateERS0_j>:
      allocate(allocator_type& __a, size_type __n)
 800acf0:	b580      	push	{r7, lr}
 800acf2:	b084      	sub	sp, #16
 800acf4:	af00      	add	r7, sp, #0
 800acf6:	6078      	str	r0, [r7, #4]
 800acf8:	6039      	str	r1, [r7, #0]
 800acfa:	687b      	ldr	r3, [r7, #4]
 800acfc:	60fb      	str	r3, [r7, #12]
 800acfe:	683b      	ldr	r3, [r7, #0]
 800ad00:	60bb      	str	r3, [r7, #8]
	if (std::is_constant_evaluated())
 800ad02:	f7f7 fa63 	bl	80021cc <_ZSt21is_constant_evaluatedv>
 800ad06:	4603      	mov	r3, r0
 800ad08:	2b00      	cmp	r3, #0
 800ad0a:	d004      	beq.n	800ad16 <_ZNSt16allocator_traitsISaIcEE8allocateERS0_j+0x26>
	  return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 800ad0c:	68b8      	ldr	r0, [r7, #8]
 800ad0e:	f010 fd01 	bl	801b714 <_Znwj>
 800ad12:	4603      	mov	r3, r0
 800ad14:	e006      	b.n	800ad24 <_ZNSt16allocator_traitsISaIcEE8allocateERS0_j+0x34>
	return __allocator_base<_Tp>::allocate(__n, 0);
 800ad16:	2200      	movs	r2, #0
 800ad18:	68b9      	ldr	r1, [r7, #8]
 800ad1a:	68f8      	ldr	r0, [r7, #12]
 800ad1c:	f001 f907 	bl	800bf2e <_ZN9__gnu_cxx13new_allocatorIcE8allocateEjPKv>
 800ad20:	4603      	mov	r3, r0
 800ad22:	bf00      	nop
      { return __a.allocate(__n); }
 800ad24:	4618      	mov	r0, r3
 800ad26:	3710      	adds	r7, #16
 800ad28:	46bd      	mov	sp, r7
 800ad2a:	bd80      	pop	{r7, pc}

0800ad2c <_ZSt18uninitialized_copyIPKcPcET0_T_S4_S3_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 800ad2c:	b580      	push	{r7, lr}
 800ad2e:	b086      	sub	sp, #24
 800ad30:	af00      	add	r7, sp, #0
 800ad32:	60f8      	str	r0, [r7, #12]
 800ad34:	60b9      	str	r1, [r7, #8]
 800ad36:	607a      	str	r2, [r7, #4]
      const bool __assignable = is_assignable<_RefType2, _RefType1>::value;
 800ad38:	2301      	movs	r3, #1
 800ad3a:	75fb      	strb	r3, [r7, #23]
	__uninit_copy(__first, __last, __result);
 800ad3c:	687a      	ldr	r2, [r7, #4]
 800ad3e:	68b9      	ldr	r1, [r7, #8]
 800ad40:	68f8      	ldr	r0, [r7, #12]
 800ad42:	f000 fd81 	bl	800b848 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIPKcPcEET0_T_S6_S5_>
 800ad46:	4603      	mov	r3, r0
    }
 800ad48:	4618      	mov	r0, r3
 800ad4a:	3718      	adds	r7, #24
 800ad4c:	46bd      	mov	sp, r7
 800ad4e:	bd80      	pop	{r7, pc}

0800ad50 <_ZSt14__copy_move_a2ILb0EPKcPcET1_T0_S4_S3_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 800ad50:	b580      	push	{r7, lr}
 800ad52:	b084      	sub	sp, #16
 800ad54:	af00      	add	r7, sp, #0
 800ad56:	60f8      	str	r0, [r7, #12]
 800ad58:	60b9      	str	r1, [r7, #8]
 800ad5a:	607a      	str	r2, [r7, #4]
      if (std::is_constant_evaluated())
 800ad5c:	f7f7 fa36 	bl	80021cc <_ZSt21is_constant_evaluatedv>
 800ad60:	4603      	mov	r3, r0
 800ad62:	2b00      	cmp	r3, #0
 800ad64:	d006      	beq.n	800ad74 <_ZSt14__copy_move_a2ILb0EPKcPcET1_T0_S4_S3_+0x24>
	  __copy_m(__first, __last, __result);
 800ad66:	687a      	ldr	r2, [r7, #4]
 800ad68:	68b9      	ldr	r1, [r7, #8]
 800ad6a:	68f8      	ldr	r0, [r7, #12]
 800ad6c:	f000 fd7c 	bl	800b868 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPKcPcEET0_T_S7_S6_>
 800ad70:	4603      	mov	r3, r0
 800ad72:	e006      	b.n	800ad82 <_ZSt14__copy_move_a2ILb0EPKcPcET1_T0_S4_S3_+0x32>
			      _Category>::__copy_m(__first, __last, __result);
 800ad74:	687a      	ldr	r2, [r7, #4]
 800ad76:	68b9      	ldr	r1, [r7, #8]
 800ad78:	68f8      	ldr	r0, [r7, #12]
 800ad7a:	f000 fd97 	bl	800b8ac <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIcEEPT_PKS3_S6_S4_>
 800ad7e:	4603      	mov	r3, r0
 800ad80:	bf00      	nop
    }
 800ad82:	4618      	mov	r0, r3
 800ad84:	3710      	adds	r7, #16
 800ad86:	46bd      	mov	sp, r7
 800ad88:	bd80      	pop	{r7, pc}

0800ad8a <_ZNKSt6vectorIfSaIfEE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 800ad8a:	b580      	push	{r7, lr}
 800ad8c:	b082      	sub	sp, #8
 800ad8e:	af00      	add	r7, sp, #0
 800ad90:	6078      	str	r0, [r7, #4]
      { return _S_max_size(_M_get_Tp_allocator()); }
 800ad92:	687b      	ldr	r3, [r7, #4]
 800ad94:	4618      	mov	r0, r3
 800ad96:	f7fd fac7 	bl	8008328 <_ZNKSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>
 800ad9a:	4603      	mov	r3, r0
 800ad9c:	4618      	mov	r0, r3
 800ad9e:	f000 fdac 	bl	800b8fa <_ZNSt6vectorIfSaIfEE11_S_max_sizeERKS0_>
 800ada2:	4603      	mov	r3, r0
 800ada4:	4618      	mov	r0, r3
 800ada6:	3708      	adds	r7, #8
 800ada8:	46bd      	mov	sp, r7
 800adaa:	bd80      	pop	{r7, pc}

0800adac <_ZNSt6vectorIfSaIfEE14_S_do_relocateEPfS2_S2_RS0_St17integral_constantIbLb1EE>:
      _S_do_relocate(pointer __first, pointer __last, pointer __result,
 800adac:	b580      	push	{r7, lr}
 800adae:	b084      	sub	sp, #16
 800adb0:	af00      	add	r7, sp, #0
 800adb2:	60f8      	str	r0, [r7, #12]
 800adb4:	60b9      	str	r1, [r7, #8]
 800adb6:	607a      	str	r2, [r7, #4]
 800adb8:	603b      	str	r3, [r7, #0]
	return std::__relocate_a(__first, __last, __result, __alloc);
 800adba:	683b      	ldr	r3, [r7, #0]
 800adbc:	687a      	ldr	r2, [r7, #4]
 800adbe:	68b9      	ldr	r1, [r7, #8]
 800adc0:	68f8      	ldr	r0, [r7, #12]
 800adc2:	f000 fdb4 	bl	800b92e <_ZSt12__relocate_aIPfS0_SaIfEET0_T_S3_S2_RT1_>
 800adc6:	4603      	mov	r3, r0
      }
 800adc8:	4618      	mov	r0, r3
 800adca:	3710      	adds	r7, #16
 800adcc:	46bd      	mov	sp, r7
 800adce:	bd80      	pop	{r7, pc}

0800add0 <_ZSt4swapIbENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS4_ESt18is_move_assignableIS4_EEE5valueEvE4typeERS4_SE_>:
			      is_move_constructible<_Tp>,
			      is_move_assignable<_Tp>>::value>::type
#else
    void
#endif
    swap(_Tp& __a, _Tp& __b)
 800add0:	b580      	push	{r7, lr}
 800add2:	b084      	sub	sp, #16
 800add4:	af00      	add	r7, sp, #0
 800add6:	6078      	str	r0, [r7, #4]
 800add8:	6039      	str	r1, [r7, #0]
    {
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 800adda:	6878      	ldr	r0, [r7, #4]
 800addc:	f000 fdc4 	bl	800b968 <_ZSt4moveIRbEONSt16remove_referenceIT_E4typeEOS2_>
 800ade0:	4603      	mov	r3, r0
 800ade2:	781b      	ldrb	r3, [r3, #0]
 800ade4:	73fb      	strb	r3, [r7, #15]
      __a = _GLIBCXX_MOVE(__b);
 800ade6:	6838      	ldr	r0, [r7, #0]
 800ade8:	f000 fdbe 	bl	800b968 <_ZSt4moveIRbEONSt16remove_referenceIT_E4typeEOS2_>
 800adec:	4603      	mov	r3, r0
 800adee:	781a      	ldrb	r2, [r3, #0]
 800adf0:	687b      	ldr	r3, [r7, #4]
 800adf2:	701a      	strb	r2, [r3, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 800adf4:	f107 030f 	add.w	r3, r7, #15
 800adf8:	4618      	mov	r0, r3
 800adfa:	f000 fdb5 	bl	800b968 <_ZSt4moveIRbEONSt16remove_referenceIT_E4typeEOS2_>
 800adfe:	4603      	mov	r3, r0
 800ae00:	781a      	ldrb	r2, [r3, #0]
 800ae02:	683b      	ldr	r3, [r7, #0]
 800ae04:	701a      	strb	r2, [r3, #0]
    }
 800ae06:	bf00      	nop
 800ae08:	3710      	adds	r7, #16
 800ae0a:	46bd      	mov	sp, r7
 800ae0c:	bd80      	pop	{r7, pc}

0800ae0e <_ZN9__gnu_cxx13new_allocatorIPfEC1Ev>:
 800ae0e:	b480      	push	{r7}
 800ae10:	b083      	sub	sp, #12
 800ae12:	af00      	add	r7, sp, #0
 800ae14:	6078      	str	r0, [r7, #4]
 800ae16:	687b      	ldr	r3, [r7, #4]
 800ae18:	4618      	mov	r0, r3
 800ae1a:	370c      	adds	r7, #12
 800ae1c:	46bd      	mov	sp, r7
 800ae1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae22:	4770      	bx	lr

0800ae24 <_ZN9__gnu_cxx13new_allocatorIPfE10deallocateEPS1_j>:
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(_Tp* __p, size_type __t __attribute__ ((__unused__)))
 800ae24:	b580      	push	{r7, lr}
 800ae26:	b084      	sub	sp, #16
 800ae28:	af00      	add	r7, sp, #0
 800ae2a:	60f8      	str	r0, [r7, #12]
 800ae2c:	60b9      	str	r1, [r7, #8]
 800ae2e:	607a      	str	r2, [r7, #4]
# endif
			      std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	::operator delete(__p
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	009b      	lsls	r3, r3, #2
 800ae34:	4619      	mov	r1, r3
 800ae36:	68b8      	ldr	r0, [r7, #8]
 800ae38:	f010 fc6a 	bl	801b710 <_ZdlPvj>
#if __cpp_sized_deallocation
			  , __t * sizeof(_Tp)
#endif
			 );
      }
 800ae3c:	3710      	adds	r7, #16
 800ae3e:	46bd      	mov	sp, r7
 800ae40:	bd80      	pop	{r7, pc}

0800ae42 <_ZSt3minIjERKT_S2_S2_>:
    min(const _Tp& __a, const _Tp& __b)
 800ae42:	b480      	push	{r7}
 800ae44:	b083      	sub	sp, #12
 800ae46:	af00      	add	r7, sp, #0
 800ae48:	6078      	str	r0, [r7, #4]
 800ae4a:	6039      	str	r1, [r7, #0]
      if (__b < __a)
 800ae4c:	683b      	ldr	r3, [r7, #0]
 800ae4e:	681a      	ldr	r2, [r3, #0]
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	681b      	ldr	r3, [r3, #0]
 800ae54:	429a      	cmp	r2, r3
 800ae56:	d201      	bcs.n	800ae5c <_ZSt3minIjERKT_S2_S2_+0x1a>
	return __b;
 800ae58:	683b      	ldr	r3, [r7, #0]
 800ae5a:	e000      	b.n	800ae5e <_ZSt3minIjERKT_S2_S2_+0x1c>
      return __a;
 800ae5c:	687b      	ldr	r3, [r7, #4]
    }
 800ae5e:	4618      	mov	r0, r3
 800ae60:	370c      	adds	r7, #12
 800ae62:	46bd      	mov	sp, r7
 800ae64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae68:	4770      	bx	lr

0800ae6a <_ZSt12__miter_baseIPPfET_S2_>:
    __miter_base(_Iterator __it)
 800ae6a:	b480      	push	{r7}
 800ae6c:	b083      	sub	sp, #12
 800ae6e:	af00      	add	r7, sp, #0
 800ae70:	6078      	str	r0, [r7, #4]
    { return __it; }
 800ae72:	687b      	ldr	r3, [r7, #4]
 800ae74:	4618      	mov	r0, r3
 800ae76:	370c      	adds	r7, #12
 800ae78:	46bd      	mov	sp, r7
 800ae7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae7e:	4770      	bx	lr

0800ae80 <_ZSt13__copy_move_aILb0EPPfS1_ET1_T0_S3_S2_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 800ae80:	b5b0      	push	{r4, r5, r7, lr}
 800ae82:	b084      	sub	sp, #16
 800ae84:	af00      	add	r7, sp, #0
 800ae86:	60f8      	str	r0, [r7, #12]
 800ae88:	60b9      	str	r1, [r7, #8]
 800ae8a:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 800ae8c:	68f8      	ldr	r0, [r7, #12]
 800ae8e:	f000 fdac 	bl	800b9ea <_ZSt12__niter_baseIPPfET_S2_>
 800ae92:	4604      	mov	r4, r0
 800ae94:	68b8      	ldr	r0, [r7, #8]
 800ae96:	f000 fda8 	bl	800b9ea <_ZSt12__niter_baseIPPfET_S2_>
 800ae9a:	4605      	mov	r5, r0
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	4618      	mov	r0, r3
 800aea0:	f000 fda3 	bl	800b9ea <_ZSt12__niter_baseIPPfET_S2_>
 800aea4:	4603      	mov	r3, r0
 800aea6:	461a      	mov	r2, r3
 800aea8:	4629      	mov	r1, r5
 800aeaa:	4620      	mov	r0, r4
 800aeac:	f000 fda8 	bl	800ba00 <_ZSt14__copy_move_a1ILb0EPPfS1_ET1_T0_S3_S2_>
 800aeb0:	4602      	mov	r2, r0
 800aeb2:	1d3b      	adds	r3, r7, #4
 800aeb4:	4611      	mov	r1, r2
 800aeb6:	4618      	mov	r0, r3
 800aeb8:	f000 fdb2 	bl	800ba20 <_ZSt12__niter_wrapIPPfET_RKS2_S2_>
 800aebc:	4603      	mov	r3, r0
    }
 800aebe:	4618      	mov	r0, r3
 800aec0:	3710      	adds	r7, #16
 800aec2:	46bd      	mov	sp, r7
 800aec4:	bdb0      	pop	{r4, r5, r7, pc}

0800aec6 <_ZSt22__copy_move_backward_aILb0EPPfS1_ET1_T0_S3_S2_>:
    __copy_move_backward_a(_II __first, _II __last, _OI __result)
 800aec6:	b5b0      	push	{r4, r5, r7, lr}
 800aec8:	b084      	sub	sp, #16
 800aeca:	af00      	add	r7, sp, #0
 800aecc:	60f8      	str	r0, [r7, #12]
 800aece:	60b9      	str	r1, [r7, #8]
 800aed0:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 800aed2:	68f8      	ldr	r0, [r7, #12]
 800aed4:	f000 fd89 	bl	800b9ea <_ZSt12__niter_baseIPPfET_S2_>
 800aed8:	4604      	mov	r4, r0
 800aeda:	68b8      	ldr	r0, [r7, #8]
 800aedc:	f000 fd85 	bl	800b9ea <_ZSt12__niter_baseIPPfET_S2_>
 800aee0:	4605      	mov	r5, r0
 800aee2:	687b      	ldr	r3, [r7, #4]
 800aee4:	4618      	mov	r0, r3
 800aee6:	f000 fd80 	bl	800b9ea <_ZSt12__niter_baseIPPfET_S2_>
 800aeea:	4603      	mov	r3, r0
 800aeec:	461a      	mov	r2, r3
 800aeee:	4629      	mov	r1, r5
 800aef0:	4620      	mov	r0, r4
 800aef2:	f000 fda1 	bl	800ba38 <_ZSt23__copy_move_backward_a1ILb0EPPfS1_ET1_T0_S3_S2_>
 800aef6:	4602      	mov	r2, r0
 800aef8:	1d3b      	adds	r3, r7, #4
 800aefa:	4611      	mov	r1, r2
 800aefc:	4618      	mov	r0, r3
 800aefe:	f000 fd8f 	bl	800ba20 <_ZSt12__niter_wrapIPPfET_RKS2_S2_>
 800af02:	4603      	mov	r3, r0
    }
 800af04:	4618      	mov	r0, r3
 800af06:	3710      	adds	r7, #16
 800af08:	46bd      	mov	sp, r7
 800af0a:	bdb0      	pop	{r4, r5, r7, pc}

0800af0c <_ZN9__gnu_cxx13new_allocatorIfE10deallocateEPfj>:
      deallocate(_Tp* __p, size_type __t __attribute__ ((__unused__)))
 800af0c:	b580      	push	{r7, lr}
 800af0e:	b084      	sub	sp, #16
 800af10:	af00      	add	r7, sp, #0
 800af12:	60f8      	str	r0, [r7, #12]
 800af14:	60b9      	str	r1, [r7, #8]
 800af16:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 800af18:	687b      	ldr	r3, [r7, #4]
 800af1a:	009b      	lsls	r3, r3, #2
 800af1c:	4619      	mov	r1, r3
 800af1e:	68b8      	ldr	r0, [r7, #8]
 800af20:	f010 fbf6 	bl	801b710 <_ZdlPvj>
      }
 800af24:	3710      	adds	r7, #16
 800af26:	46bd      	mov	sp, r7
 800af28:	bd80      	pop	{r7, pc}

0800af2a <_ZSt11__addressofIfEPT_RS0_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 800af2a:	b480      	push	{r7}
 800af2c:	b083      	sub	sp, #12
 800af2e:	af00      	add	r7, sp, #0
 800af30:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 800af32:	687b      	ldr	r3, [r7, #4]
 800af34:	4618      	mov	r0, r3
 800af36:	370c      	adds	r7, #12
 800af38:	46bd      	mov	sp, r7
 800af3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af3e:	4770      	bx	lr

0800af40 <_ZSt8_DestroyIfEvPT_>:
    _Destroy(_Tp* __pointer)
 800af40:	b580      	push	{r7, lr}
 800af42:	b082      	sub	sp, #8
 800af44:	af00      	add	r7, sp, #0
 800af46:	6078      	str	r0, [r7, #4]
      std::destroy_at(__pointer);
 800af48:	6878      	ldr	r0, [r7, #4]
 800af4a:	f7fd ff3b 	bl	8008dc4 <_ZSt10destroy_atIfEvPT_>
    }
 800af4e:	bf00      	nop
 800af50:	3708      	adds	r7, #8
 800af52:	46bd      	mov	sp, r7
 800af54:	bd80      	pop	{r7, pc}

0800af56 <_ZNKSt8__detail10_Synth3wayclIPfS2_EEDaRKT_RKT0_>:
	    return noexcept(*__t < *__u) && noexcept(*__u < *__t);
	}

      template<typename _Tp, typename _Up>
	constexpr auto
	operator()(const _Tp& __t, const _Up& __u) const
 800af56:	b480      	push	{r7}
 800af58:	b085      	sub	sp, #20
 800af5a:	af00      	add	r7, sp, #0
 800af5c:	60f8      	str	r0, [r7, #12]
 800af5e:	60b9      	str	r1, [r7, #8]
 800af60:	607a      	str	r2, [r7, #4]
	  { __t < __u } -> __boolean_testable;
	  { __u < __t } -> __boolean_testable;
	}
	{
	  if constexpr (three_way_comparable_with<_Tp, _Up>)
	    return __t <=> __u;
 800af62:	68bb      	ldr	r3, [r7, #8]
 800af64:	681a      	ldr	r2, [r3, #0]
 800af66:	687b      	ldr	r3, [r7, #4]
 800af68:	681b      	ldr	r3, [r3, #0]
 800af6a:	429a      	cmp	r2, r3
 800af6c:	d009      	beq.n	800af82 <_ZNKSt8__detail10_Synth3wayclIPfS2_EEDaRKT_RKT0_+0x2c>
 800af6e:	68bb      	ldr	r3, [r7, #8]
 800af70:	681a      	ldr	r2, [r3, #0]
 800af72:	687b      	ldr	r3, [r7, #4]
 800af74:	681b      	ldr	r3, [r3, #0]
 800af76:	429a      	cmp	r2, r3
 800af78:	d201      	bcs.n	800af7e <_ZNKSt8__detail10_Synth3wayclIPfS2_EEDaRKT_RKT0_+0x28>
 800af7a:	23ff      	movs	r3, #255	; 0xff
 800af7c:	e002      	b.n	800af84 <_ZNKSt8__detail10_Synth3wayclIPfS2_EEDaRKT_RKT0_+0x2e>
 800af7e:	2301      	movs	r3, #1
 800af80:	e000      	b.n	800af84 <_ZNKSt8__detail10_Synth3wayclIPfS2_EEDaRKT_RKT0_+0x2e>
 800af82:	2300      	movs	r3, #0
	      else if (__u < __t)
		return weak_ordering::greater;
	      else
		return weak_ordering::equivalent;
	    }
	}
 800af84:	4618      	mov	r0, r3
 800af86:	3714      	adds	r7, #20
 800af88:	46bd      	mov	sp, r7
 800af8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af8e:	4770      	bx	lr

0800af90 <_ZN9__gnu_cxxssIPfSt6vectorIfSaIfEEEEDTclL_ZNSt8__detail11__synth3wayEEcl7declvalIRT_EEcl7declvalIS7_EEEERKNS_17__normal_iteratorIS6_T0_EESD_>:
    operator<=>(const __normal_iterator<_Iterator, _Container>& __lhs,
 800af90:	b590      	push	{r4, r7, lr}
 800af92:	b083      	sub	sp, #12
 800af94:	af00      	add	r7, sp, #0
 800af96:	6078      	str	r0, [r7, #4]
 800af98:	6039      	str	r1, [r7, #0]
    { return std::__detail::__synth3way(__lhs.base(), __rhs.base()); }
 800af9a:	6878      	ldr	r0, [r7, #4]
 800af9c:	f7fd f928 	bl	80081f0 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEE4baseEv>
 800afa0:	4604      	mov	r4, r0
 800afa2:	6838      	ldr	r0, [r7, #0]
 800afa4:	f7fd f924 	bl	80081f0 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEE4baseEv>
 800afa8:	4603      	mov	r3, r0
 800afaa:	461a      	mov	r2, r3
 800afac:	4621      	mov	r1, r4
 800afae:	4804      	ldr	r0, [pc, #16]	; (800afc0 <_ZN9__gnu_cxxssIPfSt6vectorIfSaIfEEEEDTclL_ZNSt8__detail11__synth3wayEEcl7declvalIRT_EEcl7declvalIS7_EEEERKNS_17__normal_iteratorIS6_T0_EESD_+0x30>)
 800afb0:	f7ff ffd1 	bl	800af56 <_ZNKSt8__detail10_Synth3wayclIPfS2_EEDaRKT_RKT0_>
 800afb4:	4603      	mov	r3, r0
 800afb6:	4618      	mov	r0, r3
 800afb8:	370c      	adds	r7, #12
 800afba:	46bd      	mov	sp, r7
 800afbc:	bd90      	pop	{r4, r7, pc}
 800afbe:	bf00      	nop
 800afc0:	0801f1b0 	.word	0x0801f1b0

0800afc4 <_ZSt13__heap_selectIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_S9_T0_>:
    __heap_select(_RandomAccessIterator __first,
 800afc4:	b590      	push	{r4, r7, lr}
 800afc6:	b087      	sub	sp, #28
 800afc8:	af00      	add	r7, sp, #0
 800afca:	60f8      	str	r0, [r7, #12]
 800afcc:	60b9      	str	r1, [r7, #8]
 800afce:	607a      	str	r2, [r7, #4]
 800afd0:	703b      	strb	r3, [r7, #0]
      std::__make_heap(__first, __middle, __comp);
 800afd2:	463b      	mov	r3, r7
 800afd4:	461a      	mov	r2, r3
 800afd6:	68b9      	ldr	r1, [r7, #8]
 800afd8:	68f8      	ldr	r0, [r7, #12]
 800afda:	f000 fd73 	bl	800bac4 <_ZSt11__make_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_RT0_>
      for (_RandomAccessIterator __i = __middle; __i < __last; ++__i)
 800afde:	68bb      	ldr	r3, [r7, #8]
 800afe0:	613b      	str	r3, [r7, #16]
 800afe2:	e013      	b.n	800b00c <_ZSt13__heap_selectIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_S9_T0_+0x48>
	if (__comp(__i, __first))
 800afe4:	463b      	mov	r3, r7
 800afe6:	68fa      	ldr	r2, [r7, #12]
 800afe8:	6939      	ldr	r1, [r7, #16]
 800afea:	4618      	mov	r0, r3
 800afec:	f7ff f8c6 	bl	800a17c <_ZNK9__gnu_cxx5__ops15_Iter_less_iterclINS_17__normal_iteratorIPfSt6vectorIfSaIfEEEES8_EEbT_T0_>
 800aff0:	4603      	mov	r3, r0
 800aff2:	2b00      	cmp	r3, #0
 800aff4:	d005      	beq.n	800b002 <_ZSt13__heap_selectIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_S9_T0_+0x3e>
	  std::__pop_heap(__first, __middle, __i, __comp);
 800aff6:	463b      	mov	r3, r7
 800aff8:	693a      	ldr	r2, [r7, #16]
 800affa:	68b9      	ldr	r1, [r7, #8]
 800affc:	68f8      	ldr	r0, [r7, #12]
 800affe:	f000 fdb7 	bl	800bb70 <_ZSt10__pop_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_S9_RT0_>
      for (_RandomAccessIterator __i = __middle; __i < __last; ++__i)
 800b002:	f107 0310 	add.w	r3, r7, #16
 800b006:	4618      	mov	r0, r3
 800b008:	f7ff f89c 	bl	800a144 <_ZN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEppEv>
 800b00c:	1d3a      	adds	r2, r7, #4
 800b00e:	f107 0310 	add.w	r3, r7, #16
 800b012:	4611      	mov	r1, r2
 800b014:	4618      	mov	r0, r3
 800b016:	f7ff ffbb 	bl	800af90 <_ZN9__gnu_cxxssIPfSt6vectorIfSaIfEEEEDTclL_ZNSt8__detail11__synth3wayEEcl7declvalIRT_EEcl7declvalIS7_EEEERKNS_17__normal_iteratorIS6_T0_EESD_>
 800b01a:	4604      	mov	r4, r0
 800b01c:	f107 0314 	add.w	r3, r7, #20
 800b020:	2100      	movs	r1, #0
 800b022:	4618      	mov	r0, r3
 800b024:	f7f7 f8da 	bl	80021dc <_ZNSt9__cmp_cat8__unspecC1EPS0_>
 800b028:	7d39      	ldrb	r1, [r7, #20]
 800b02a:	4620      	mov	r0, r4
 800b02c:	f7f7 f8e2 	bl	80021f4 <_ZStltSt15strong_orderingNSt9__cmp_cat8__unspecE>
 800b030:	4603      	mov	r3, r0
 800b032:	2b00      	cmp	r3, #0
 800b034:	d1d6      	bne.n	800afe4 <_ZSt13__heap_selectIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_S9_T0_+0x20>
    }
 800b036:	bf00      	nop
 800b038:	bf00      	nop
 800b03a:	371c      	adds	r7, #28
 800b03c:	46bd      	mov	sp, r7
 800b03e:	bd90      	pop	{r4, r7, pc}

0800b040 <_ZN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEmmEv>:
      operator--() _GLIBCXX_NOEXCEPT
 800b040:	b480      	push	{r7}
 800b042:	b083      	sub	sp, #12
 800b044:	af00      	add	r7, sp, #0
 800b046:	6078      	str	r0, [r7, #4]
	--_M_current;
 800b048:	687b      	ldr	r3, [r7, #4]
 800b04a:	681b      	ldr	r3, [r3, #0]
 800b04c:	1f1a      	subs	r2, r3, #4
 800b04e:	687b      	ldr	r3, [r7, #4]
 800b050:	601a      	str	r2, [r3, #0]
	return *this;
 800b052:	687b      	ldr	r3, [r7, #4]
      }
 800b054:	4618      	mov	r0, r3
 800b056:	370c      	adds	r7, #12
 800b058:	46bd      	mov	sp, r7
 800b05a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b05e:	4770      	bx	lr

0800b060 <_ZSt11__sort_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_RT0_>:
    }

  template<typename _RandomAccessIterator, typename _Compare>
    _GLIBCXX20_CONSTEXPR
    void
    __sort_heap(_RandomAccessIterator __first, _RandomAccessIterator __last,
 800b060:	b580      	push	{r7, lr}
 800b062:	b084      	sub	sp, #16
 800b064:	af00      	add	r7, sp, #0
 800b066:	60f8      	str	r0, [r7, #12]
 800b068:	60b9      	str	r1, [r7, #8]
 800b06a:	607a      	str	r2, [r7, #4]
		_Compare& __comp)
    {
      while (__last - __first > 1)
 800b06c:	e00a      	b.n	800b084 <_ZSt11__sort_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_RT0_+0x24>
	{
	  --__last;
 800b06e:	f107 0308 	add.w	r3, r7, #8
 800b072:	4618      	mov	r0, r3
 800b074:	f7ff ffe4 	bl	800b040 <_ZN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEmmEv>
	  std::__pop_heap(__first, __last, __last, __comp);
 800b078:	687b      	ldr	r3, [r7, #4]
 800b07a:	68ba      	ldr	r2, [r7, #8]
 800b07c:	68b9      	ldr	r1, [r7, #8]
 800b07e:	68f8      	ldr	r0, [r7, #12]
 800b080:	f000 fd76 	bl	800bb70 <_ZSt10__pop_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_S9_RT0_>
      while (__last - __first > 1)
 800b084:	f107 020c 	add.w	r2, r7, #12
 800b088:	f107 0308 	add.w	r3, r7, #8
 800b08c:	4611      	mov	r1, r2
 800b08e:	4618      	mov	r0, r3
 800b090:	f7fd f8d1 	bl	8008236 <_ZN9__gnu_cxxmiIPfSt6vectorIfSaIfEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS8_SB_>
 800b094:	4603      	mov	r3, r0
 800b096:	2b01      	cmp	r3, #1
 800b098:	bfcc      	ite	gt
 800b09a:	2301      	movgt	r3, #1
 800b09c:	2300      	movle	r3, #0
 800b09e:	b2db      	uxtb	r3, r3
 800b0a0:	2b00      	cmp	r3, #0
 800b0a2:	d1e4      	bne.n	800b06e <_ZSt11__sort_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_RT0_+0xe>
	}
    }
 800b0a4:	bf00      	nop
 800b0a6:	bf00      	nop
 800b0a8:	3710      	adds	r7, #16
 800b0aa:	46bd      	mov	sp, r7
 800b0ac:	bd80      	pop	{r7, pc}

0800b0ae <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEmiEi>:
      operator-(difference_type __n) const _GLIBCXX_NOEXCEPT
 800b0ae:	b580      	push	{r7, lr}
 800b0b0:	b084      	sub	sp, #16
 800b0b2:	af00      	add	r7, sp, #0
 800b0b4:	6078      	str	r0, [r7, #4]
 800b0b6:	6039      	str	r1, [r7, #0]
      { return __normal_iterator(_M_current - __n); }
 800b0b8:	687b      	ldr	r3, [r7, #4]
 800b0ba:	681a      	ldr	r2, [r3, #0]
 800b0bc:	683b      	ldr	r3, [r7, #0]
 800b0be:	009b      	lsls	r3, r3, #2
 800b0c0:	425b      	negs	r3, r3
 800b0c2:	4413      	add	r3, r2
 800b0c4:	60fb      	str	r3, [r7, #12]
 800b0c6:	f107 020c 	add.w	r2, r7, #12
 800b0ca:	f107 0308 	add.w	r3, r7, #8
 800b0ce:	4611      	mov	r1, r2
 800b0d0:	4618      	mov	r0, r3
 800b0d2:	f7fd f87d 	bl	80081d0 <_ZN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEC1ERKS1_>
 800b0d6:	68bb      	ldr	r3, [r7, #8]
 800b0d8:	4618      	mov	r0, r3
 800b0da:	3710      	adds	r7, #16
 800b0dc:	46bd      	mov	sp, r7
 800b0de:	bd80      	pop	{r7, pc}

0800b0e0 <_ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_S9_S9_T0_>:
    __move_median_to_first(_Iterator __result,_Iterator __a, _Iterator __b,
 800b0e0:	b580      	push	{r7, lr}
 800b0e2:	b084      	sub	sp, #16
 800b0e4:	af00      	add	r7, sp, #0
 800b0e6:	60f8      	str	r0, [r7, #12]
 800b0e8:	60b9      	str	r1, [r7, #8]
 800b0ea:	607a      	str	r2, [r7, #4]
 800b0ec:	603b      	str	r3, [r7, #0]
      if (__comp(__a, __b))
 800b0ee:	687a      	ldr	r2, [r7, #4]
 800b0f0:	68b9      	ldr	r1, [r7, #8]
 800b0f2:	f107 0018 	add.w	r0, r7, #24
 800b0f6:	f7ff f841 	bl	800a17c <_ZNK9__gnu_cxx5__ops15_Iter_less_iterclINS_17__normal_iteratorIPfSt6vectorIfSaIfEEEES8_EEbT_T0_>
 800b0fa:	4603      	mov	r3, r0
 800b0fc:	2b00      	cmp	r3, #0
 800b0fe:	d020      	beq.n	800b142 <_ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_S9_S9_T0_+0x62>
	  if (__comp(__b, __c))
 800b100:	683a      	ldr	r2, [r7, #0]
 800b102:	6879      	ldr	r1, [r7, #4]
 800b104:	f107 0018 	add.w	r0, r7, #24
 800b108:	f7ff f838 	bl	800a17c <_ZNK9__gnu_cxx5__ops15_Iter_less_iterclINS_17__normal_iteratorIPfSt6vectorIfSaIfEEEES8_EEbT_T0_>
 800b10c:	4603      	mov	r3, r0
 800b10e:	2b00      	cmp	r3, #0
 800b110:	d004      	beq.n	800b11c <_ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_S9_S9_T0_+0x3c>
	    std::iter_swap(__result, __b);
 800b112:	6879      	ldr	r1, [r7, #4]
 800b114:	68f8      	ldr	r0, [r7, #12]
 800b116:	f000 fd6b 	bl	800bbf0 <_ZSt9iter_swapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEES6_EvT_T0_>
    }
 800b11a:	e032      	b.n	800b182 <_ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_S9_S9_T0_+0xa2>
	  else if (__comp(__a, __c))
 800b11c:	683a      	ldr	r2, [r7, #0]
 800b11e:	68b9      	ldr	r1, [r7, #8]
 800b120:	f107 0018 	add.w	r0, r7, #24
 800b124:	f7ff f82a 	bl	800a17c <_ZNK9__gnu_cxx5__ops15_Iter_less_iterclINS_17__normal_iteratorIPfSt6vectorIfSaIfEEEES8_EEbT_T0_>
 800b128:	4603      	mov	r3, r0
 800b12a:	2b00      	cmp	r3, #0
 800b12c:	d004      	beq.n	800b138 <_ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_S9_S9_T0_+0x58>
	    std::iter_swap(__result, __c);
 800b12e:	6839      	ldr	r1, [r7, #0]
 800b130:	68f8      	ldr	r0, [r7, #12]
 800b132:	f000 fd5d 	bl	800bbf0 <_ZSt9iter_swapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEES6_EvT_T0_>
    }
 800b136:	e024      	b.n	800b182 <_ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_S9_S9_T0_+0xa2>
	    std::iter_swap(__result, __a);
 800b138:	68b9      	ldr	r1, [r7, #8]
 800b13a:	68f8      	ldr	r0, [r7, #12]
 800b13c:	f000 fd58 	bl	800bbf0 <_ZSt9iter_swapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEES6_EvT_T0_>
    }
 800b140:	e01f      	b.n	800b182 <_ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_S9_S9_T0_+0xa2>
      else if (__comp(__a, __c))
 800b142:	683a      	ldr	r2, [r7, #0]
 800b144:	68b9      	ldr	r1, [r7, #8]
 800b146:	f107 0018 	add.w	r0, r7, #24
 800b14a:	f7ff f817 	bl	800a17c <_ZNK9__gnu_cxx5__ops15_Iter_less_iterclINS_17__normal_iteratorIPfSt6vectorIfSaIfEEEES8_EEbT_T0_>
 800b14e:	4603      	mov	r3, r0
 800b150:	2b00      	cmp	r3, #0
 800b152:	d004      	beq.n	800b15e <_ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_S9_S9_T0_+0x7e>
	std::iter_swap(__result, __a);
 800b154:	68b9      	ldr	r1, [r7, #8]
 800b156:	68f8      	ldr	r0, [r7, #12]
 800b158:	f000 fd4a 	bl	800bbf0 <_ZSt9iter_swapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEES6_EvT_T0_>
    }
 800b15c:	e011      	b.n	800b182 <_ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_S9_S9_T0_+0xa2>
      else if (__comp(__b, __c))
 800b15e:	683a      	ldr	r2, [r7, #0]
 800b160:	6879      	ldr	r1, [r7, #4]
 800b162:	f107 0018 	add.w	r0, r7, #24
 800b166:	f7ff f809 	bl	800a17c <_ZNK9__gnu_cxx5__ops15_Iter_less_iterclINS_17__normal_iteratorIPfSt6vectorIfSaIfEEEES8_EEbT_T0_>
 800b16a:	4603      	mov	r3, r0
 800b16c:	2b00      	cmp	r3, #0
 800b16e:	d004      	beq.n	800b17a <_ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_S9_S9_T0_+0x9a>
	std::iter_swap(__result, __c);
 800b170:	6839      	ldr	r1, [r7, #0]
 800b172:	68f8      	ldr	r0, [r7, #12]
 800b174:	f000 fd3c 	bl	800bbf0 <_ZSt9iter_swapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEES6_EvT_T0_>
    }
 800b178:	e003      	b.n	800b182 <_ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_S9_S9_T0_+0xa2>
	std::iter_swap(__result, __b);
 800b17a:	6879      	ldr	r1, [r7, #4]
 800b17c:	68f8      	ldr	r0, [r7, #12]
 800b17e:	f000 fd37 	bl	800bbf0 <_ZSt9iter_swapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEES6_EvT_T0_>
    }
 800b182:	bf00      	nop
 800b184:	3710      	adds	r7, #16
 800b186:	46bd      	mov	sp, r7
 800b188:	bd80      	pop	{r7, pc}

0800b18a <_ZSt21__unguarded_partitionIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEET_S9_S9_S9_T0_>:
    __unguarded_partition(_RandomAccessIterator __first,
 800b18a:	b590      	push	{r4, r7, lr}
 800b18c:	b087      	sub	sp, #28
 800b18e:	af00      	add	r7, sp, #0
 800b190:	60f8      	str	r0, [r7, #12]
 800b192:	60b9      	str	r1, [r7, #8]
 800b194:	607a      	str	r2, [r7, #4]
 800b196:	703b      	strb	r3, [r7, #0]
	  while (__comp(__first, __pivot))
 800b198:	e004      	b.n	800b1a4 <_ZSt21__unguarded_partitionIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEET_S9_S9_S9_T0_+0x1a>
	    ++__first;
 800b19a:	f107 030c 	add.w	r3, r7, #12
 800b19e:	4618      	mov	r0, r3
 800b1a0:	f7fe ffd0 	bl	800a144 <_ZN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEppEv>
	  while (__comp(__first, __pivot))
 800b1a4:	463b      	mov	r3, r7
 800b1a6:	687a      	ldr	r2, [r7, #4]
 800b1a8:	68f9      	ldr	r1, [r7, #12]
 800b1aa:	4618      	mov	r0, r3
 800b1ac:	f7fe ffe6 	bl	800a17c <_ZNK9__gnu_cxx5__ops15_Iter_less_iterclINS_17__normal_iteratorIPfSt6vectorIfSaIfEEEES8_EEbT_T0_>
 800b1b0:	4603      	mov	r3, r0
 800b1b2:	2b00      	cmp	r3, #0
 800b1b4:	d1f1      	bne.n	800b19a <_ZSt21__unguarded_partitionIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEET_S9_S9_S9_T0_+0x10>
	  --__last;
 800b1b6:	f107 0308 	add.w	r3, r7, #8
 800b1ba:	4618      	mov	r0, r3
 800b1bc:	f7ff ff40 	bl	800b040 <_ZN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEmmEv>
	  while (__comp(__pivot, __last))
 800b1c0:	e004      	b.n	800b1cc <_ZSt21__unguarded_partitionIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEET_S9_S9_S9_T0_+0x42>
	    --__last;
 800b1c2:	f107 0308 	add.w	r3, r7, #8
 800b1c6:	4618      	mov	r0, r3
 800b1c8:	f7ff ff3a 	bl	800b040 <_ZN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEmmEv>
	  while (__comp(__pivot, __last))
 800b1cc:	463b      	mov	r3, r7
 800b1ce:	68ba      	ldr	r2, [r7, #8]
 800b1d0:	6879      	ldr	r1, [r7, #4]
 800b1d2:	4618      	mov	r0, r3
 800b1d4:	f7fe ffd2 	bl	800a17c <_ZNK9__gnu_cxx5__ops15_Iter_less_iterclINS_17__normal_iteratorIPfSt6vectorIfSaIfEEEES8_EEbT_T0_>
 800b1d8:	4603      	mov	r3, r0
 800b1da:	2b00      	cmp	r3, #0
 800b1dc:	d1f1      	bne.n	800b1c2 <_ZSt21__unguarded_partitionIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEET_S9_S9_S9_T0_+0x38>
	  if (!(__first < __last))
 800b1de:	f107 0208 	add.w	r2, r7, #8
 800b1e2:	f107 030c 	add.w	r3, r7, #12
 800b1e6:	4611      	mov	r1, r2
 800b1e8:	4618      	mov	r0, r3
 800b1ea:	f7ff fed1 	bl	800af90 <_ZN9__gnu_cxxssIPfSt6vectorIfSaIfEEEEDTclL_ZNSt8__detail11__synth3wayEEcl7declvalIRT_EEcl7declvalIS7_EEEERKNS_17__normal_iteratorIS6_T0_EESD_>
 800b1ee:	4604      	mov	r4, r0
 800b1f0:	f107 0314 	add.w	r3, r7, #20
 800b1f4:	2100      	movs	r1, #0
 800b1f6:	4618      	mov	r0, r3
 800b1f8:	f7f6 fff0 	bl	80021dc <_ZNSt9__cmp_cat8__unspecC1EPS0_>
 800b1fc:	7d39      	ldrb	r1, [r7, #20]
 800b1fe:	4620      	mov	r0, r4
 800b200:	f7f6 fff8 	bl	80021f4 <_ZStltSt15strong_orderingNSt9__cmp_cat8__unspecE>
 800b204:	4603      	mov	r3, r0
 800b206:	f083 0301 	eor.w	r3, r3, #1
 800b20a:	b2db      	uxtb	r3, r3
 800b20c:	2b00      	cmp	r3, #0
 800b20e:	d001      	beq.n	800b214 <_ZSt21__unguarded_partitionIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEET_S9_S9_S9_T0_+0x8a>
	    return __first;
 800b210:	68fb      	ldr	r3, [r7, #12]
 800b212:	e009      	b.n	800b228 <_ZSt21__unguarded_partitionIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEET_S9_S9_S9_T0_+0x9e>
	  std::iter_swap(__first, __last);
 800b214:	68b9      	ldr	r1, [r7, #8]
 800b216:	68f8      	ldr	r0, [r7, #12]
 800b218:	f000 fcea 	bl	800bbf0 <_ZSt9iter_swapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEES6_EvT_T0_>
	  ++__first;
 800b21c:	f107 030c 	add.w	r3, r7, #12
 800b220:	4618      	mov	r0, r3
 800b222:	f7fe ff8f 	bl	800a144 <_ZN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEppEv>
	  while (__comp(__first, __pivot))
 800b226:	e7bd      	b.n	800b1a4 <_ZSt21__unguarded_partitionIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEET_S9_S9_S9_T0_+0x1a>
    }
 800b228:	4618      	mov	r0, r3
 800b22a:	371c      	adds	r7, #28
 800b22c:	46bd      	mov	sp, r7
 800b22e:	bd90      	pop	{r4, r7, pc}

0800b230 <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEET_S7_>:
    __miter_base(_Iterator __it)
 800b230:	b480      	push	{r7}
 800b232:	b083      	sub	sp, #12
 800b234:	af00      	add	r7, sp, #0
 800b236:	6078      	str	r0, [r7, #4]
    { return __it; }
 800b238:	687b      	ldr	r3, [r7, #4]
 800b23a:	4618      	mov	r0, r3
 800b23c:	370c      	adds	r7, #12
 800b23e:	46bd      	mov	sp, r7
 800b240:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b244:	4770      	bx	lr

0800b246 <_ZSt22__copy_move_backward_aILb1EN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEES6_ET1_T0_S8_S7_>:
    __copy_move_backward_a(_II __first, _II __last, _OI __result)
 800b246:	b5b0      	push	{r4, r5, r7, lr}
 800b248:	b084      	sub	sp, #16
 800b24a:	af00      	add	r7, sp, #0
 800b24c:	60f8      	str	r0, [r7, #12]
 800b24e:	60b9      	str	r1, [r7, #8]
 800b250:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 800b252:	68f8      	ldr	r0, [r7, #12]
 800b254:	f7ff fa0a 	bl	800a66c <_ZSt12__niter_baseIPfSt6vectorIfSaIfEEET_N9__gnu_cxx17__normal_iteratorIS4_T0_EE>
 800b258:	4604      	mov	r4, r0
 800b25a:	68b8      	ldr	r0, [r7, #8]
 800b25c:	f7ff fa06 	bl	800a66c <_ZSt12__niter_baseIPfSt6vectorIfSaIfEEET_N9__gnu_cxx17__normal_iteratorIS4_T0_EE>
 800b260:	4605      	mov	r5, r0
 800b262:	6878      	ldr	r0, [r7, #4]
 800b264:	f7ff fa02 	bl	800a66c <_ZSt12__niter_baseIPfSt6vectorIfSaIfEEET_N9__gnu_cxx17__normal_iteratorIS4_T0_EE>
 800b268:	4603      	mov	r3, r0
 800b26a:	461a      	mov	r2, r3
 800b26c:	4629      	mov	r1, r5
 800b26e:	4620      	mov	r0, r4
 800b270:	f000 fcd5 	bl	800bc1e <_ZSt23__copy_move_backward_a1ILb1EPfS0_ET1_T0_S2_S1_>
 800b274:	4603      	mov	r3, r0
 800b276:	4619      	mov	r1, r3
 800b278:	6878      	ldr	r0, [r7, #4]
 800b27a:	f7ff fa15 	bl	800a6a8 <_ZSt12__niter_wrapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEES2_ET_S7_T0_>
 800b27e:	4603      	mov	r3, r0
    }
 800b280:	4618      	mov	r0, r3
 800b282:	3710      	adds	r7, #16
 800b284:	46bd      	mov	sp, r7
 800b286:	bdb0      	pop	{r4, r5, r7, pc}

0800b288 <_ZNK9__gnu_cxx5__ops14_Val_less_iterclIfNS_17__normal_iteratorIPfSt6vectorIfSaIfEEEEEEbRT_T0_>:
      operator()(_Value& __val, _Iterator __it) const
 800b288:	b580      	push	{r7, lr}
 800b28a:	ed2d 8b02 	vpush	{d8}
 800b28e:	b084      	sub	sp, #16
 800b290:	af00      	add	r7, sp, #0
 800b292:	60f8      	str	r0, [r7, #12]
 800b294:	60b9      	str	r1, [r7, #8]
 800b296:	607a      	str	r2, [r7, #4]
      { return __val < *__it; }
 800b298:	68bb      	ldr	r3, [r7, #8]
 800b29a:	ed93 8a00 	vldr	s16, [r3]
 800b29e:	1d3b      	adds	r3, r7, #4
 800b2a0:	4618      	mov	r0, r3
 800b2a2:	f7fe ff5f 	bl	800a164 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEdeEv>
 800b2a6:	4603      	mov	r3, r0
 800b2a8:	edd3 7a00 	vldr	s15, [r3]
 800b2ac:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800b2b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b2b4:	bf4c      	ite	mi
 800b2b6:	2301      	movmi	r3, #1
 800b2b8:	2300      	movpl	r3, #0
 800b2ba:	b2db      	uxtb	r3, r3
 800b2bc:	4618      	mov	r0, r3
 800b2be:	3710      	adds	r7, #16
 800b2c0:	46bd      	mov	sp, r7
 800b2c2:	ecbd 8b02 	vpop	{d8}
 800b2c6:	bd80      	pop	{r7, pc}

0800b2c8 <_ZSt25__unguarded_linear_insertIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops14_Val_less_iterEEvT_T0_>:
    __unguarded_linear_insert(_RandomAccessIterator __last,
 800b2c8:	b590      	push	{r4, r7, lr}
 800b2ca:	b085      	sub	sp, #20
 800b2cc:	af00      	add	r7, sp, #0
 800b2ce:	6078      	str	r0, [r7, #4]
 800b2d0:	7039      	strb	r1, [r7, #0]
	__val = _GLIBCXX_MOVE(*__last);
 800b2d2:	1d3b      	adds	r3, r7, #4
 800b2d4:	4618      	mov	r0, r3
 800b2d6:	f7fe ff45 	bl	800a164 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEdeEv>
 800b2da:	4603      	mov	r3, r0
 800b2dc:	4618      	mov	r0, r3
 800b2de:	f7fc f886 	bl	80073ee <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>
 800b2e2:	4603      	mov	r3, r0
 800b2e4:	681b      	ldr	r3, [r3, #0]
 800b2e6:	60fb      	str	r3, [r7, #12]
      _RandomAccessIterator __next = __last;
 800b2e8:	687b      	ldr	r3, [r7, #4]
 800b2ea:	60bb      	str	r3, [r7, #8]
      --__next;
 800b2ec:	f107 0308 	add.w	r3, r7, #8
 800b2f0:	4618      	mov	r0, r3
 800b2f2:	f7ff fea5 	bl	800b040 <_ZN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEmmEv>
      while (__comp(__val, __next))
 800b2f6:	e017      	b.n	800b328 <_ZSt25__unguarded_linear_insertIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops14_Val_less_iterEEvT_T0_+0x60>
	  *__last = _GLIBCXX_MOVE(*__next);
 800b2f8:	f107 0308 	add.w	r3, r7, #8
 800b2fc:	4618      	mov	r0, r3
 800b2fe:	f7fe ff31 	bl	800a164 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEdeEv>
 800b302:	4603      	mov	r3, r0
 800b304:	4618      	mov	r0, r3
 800b306:	f7fc f872 	bl	80073ee <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>
 800b30a:	4603      	mov	r3, r0
 800b30c:	681c      	ldr	r4, [r3, #0]
 800b30e:	1d3b      	adds	r3, r7, #4
 800b310:	4618      	mov	r0, r3
 800b312:	f7fe ff27 	bl	800a164 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEdeEv>
 800b316:	4603      	mov	r3, r0
 800b318:	601c      	str	r4, [r3, #0]
	  __last = __next;
 800b31a:	68bb      	ldr	r3, [r7, #8]
 800b31c:	607b      	str	r3, [r7, #4]
	  --__next;
 800b31e:	f107 0308 	add.w	r3, r7, #8
 800b322:	4618      	mov	r0, r3
 800b324:	f7ff fe8c 	bl	800b040 <_ZN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEmmEv>
      while (__comp(__val, __next))
 800b328:	f107 010c 	add.w	r1, r7, #12
 800b32c:	463b      	mov	r3, r7
 800b32e:	68ba      	ldr	r2, [r7, #8]
 800b330:	4618      	mov	r0, r3
 800b332:	f7ff ffa9 	bl	800b288 <_ZNK9__gnu_cxx5__ops14_Val_less_iterclIfNS_17__normal_iteratorIPfSt6vectorIfSaIfEEEEEEbRT_T0_>
 800b336:	4603      	mov	r3, r0
 800b338:	2b00      	cmp	r3, #0
 800b33a:	d1dd      	bne.n	800b2f8 <_ZSt25__unguarded_linear_insertIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops14_Val_less_iterEEvT_T0_+0x30>
      *__last = _GLIBCXX_MOVE(__val);
 800b33c:	f107 030c 	add.w	r3, r7, #12
 800b340:	4618      	mov	r0, r3
 800b342:	f7fc f854 	bl	80073ee <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>
 800b346:	4603      	mov	r3, r0
 800b348:	681c      	ldr	r4, [r3, #0]
 800b34a:	1d3b      	adds	r3, r7, #4
 800b34c:	4618      	mov	r0, r3
 800b34e:	f7fe ff09 	bl	800a164 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEdeEv>
 800b352:	4603      	mov	r3, r0
 800b354:	601c      	str	r4, [r3, #0]
    }
 800b356:	bf00      	nop
 800b358:	3714      	adds	r7, #20
 800b35a:	46bd      	mov	sp, r7
 800b35c:	bd90      	pop	{r4, r7, pc}

0800b35e <_ZN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEvEUlbE_EC1ES4_>:
      _Iter_negate(_Predicate __pred)
 800b35e:	b580      	push	{r7, lr}
 800b360:	b082      	sub	sp, #8
 800b362:	af00      	add	r7, sp, #0
 800b364:	6078      	str	r0, [r7, #4]
 800b366:	7039      	strb	r1, [r7, #0]
	: _M_pred(_GLIBCXX_MOVE(__pred))
 800b368:	463b      	mov	r3, r7
 800b36a:	4618      	mov	r0, r3
 800b36c:	f7fe ffd4 	bl	800a318 <_ZSt4moveIRZN3jlb10Controller15lateral_controlEvEUlbE_EONSt16remove_referenceIT_E4typeEOS5_>
      { }
 800b370:	687b      	ldr	r3, [r7, #4]
 800b372:	4618      	mov	r0, r3
 800b374:	3708      	adds	r7, #8
 800b376:	46bd      	mov	sp, r7
 800b378:	bd80      	pop	{r7, pc}

0800b37a <_ZN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEvEUlbE0_EC1ES4_>:
      _Iter_negate(_Predicate __pred)
 800b37a:	b580      	push	{r7, lr}
 800b37c:	b082      	sub	sp, #8
 800b37e:	af00      	add	r7, sp, #0
 800b380:	6078      	str	r0, [r7, #4]
 800b382:	7039      	strb	r1, [r7, #0]
	: _M_pred(_GLIBCXX_MOVE(__pred))
 800b384:	463b      	mov	r3, r7
 800b386:	4618      	mov	r0, r3
 800b388:	f7ff f885 	bl	800a496 <_ZSt4moveIRZN3jlb10Controller15lateral_controlEvEUlbE0_EONSt16remove_referenceIT_E4typeEOS5_>
      { }
 800b38c:	687b      	ldr	r3, [r7, #4]
 800b38e:	4618      	mov	r0, r3
 800b390:	3708      	adds	r7, #8
 800b392:	46bd      	mov	sp, r7
 800b394:	bd80      	pop	{r7, pc}

0800b396 <_ZN9__gnu_cxx13new_allocatorIfEC1ERKS1_>:
      new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
 800b396:	b480      	push	{r7}
 800b398:	b083      	sub	sp, #12
 800b39a:	af00      	add	r7, sp, #0
 800b39c:	6078      	str	r0, [r7, #4]
 800b39e:	6039      	str	r1, [r7, #0]
 800b3a0:	687b      	ldr	r3, [r7, #4]
 800b3a2:	4618      	mov	r0, r3
 800b3a4:	370c      	adds	r7, #12
 800b3a6:	46bd      	mov	sp, r7
 800b3a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3ac:	4770      	bx	lr

0800b3ae <_ZSt4copyIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEEPfET0_T_SA_S9_>:
    copy(_II __first, _II __last, _OI __result)
 800b3ae:	b590      	push	{r4, r7, lr}
 800b3b0:	b085      	sub	sp, #20
 800b3b2:	af00      	add	r7, sp, #0
 800b3b4:	60f8      	str	r0, [r7, #12]
 800b3b6:	60b9      	str	r1, [r7, #8]
 800b3b8:	607a      	str	r2, [r7, #4]
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 800b3ba:	68f8      	ldr	r0, [r7, #12]
 800b3bc:	f7fd fef7 	bl	80091ae <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEEET_S8_>
 800b3c0:	4604      	mov	r4, r0
 800b3c2:	68b8      	ldr	r0, [r7, #8]
 800b3c4:	f7fd fef3 	bl	80091ae <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEEET_S8_>
 800b3c8:	4603      	mov	r3, r0
 800b3ca:	687a      	ldr	r2, [r7, #4]
 800b3cc:	4619      	mov	r1, r3
 800b3ce:	4620      	mov	r0, r4
 800b3d0:	f000 fc35 	bl	800bc3e <_ZSt13__copy_move_aILb0EN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEEPfET1_T0_SA_S9_>
 800b3d4:	4603      	mov	r3, r0
    }
 800b3d6:	4618      	mov	r0, r3
 800b3d8:	3714      	adds	r7, #20
 800b3da:	46bd      	mov	sp, r7
 800b3dc:	bd90      	pop	{r4, r7, pc}

0800b3de <_ZNK9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 800b3de:	b480      	push	{r7}
 800b3e0:	b083      	sub	sp, #12
 800b3e2:	af00      	add	r7, sp, #0
 800b3e4:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 800b3e6:	687b      	ldr	r3, [r7, #4]
 800b3e8:	4618      	mov	r0, r3
 800b3ea:	370c      	adds	r7, #12
 800b3ec:	46bd      	mov	sp, r7
 800b3ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3f2:	4770      	bx	lr

0800b3f4 <_ZSt14__copy_move_a2ILb0EPKfPfET1_T0_S4_S3_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 800b3f4:	b580      	push	{r7, lr}
 800b3f6:	b084      	sub	sp, #16
 800b3f8:	af00      	add	r7, sp, #0
 800b3fa:	60f8      	str	r0, [r7, #12]
 800b3fc:	60b9      	str	r1, [r7, #8]
 800b3fe:	607a      	str	r2, [r7, #4]
      if (std::is_constant_evaluated())
 800b400:	f7f6 fee4 	bl	80021cc <_ZSt21is_constant_evaluatedv>
 800b404:	4603      	mov	r3, r0
 800b406:	2b00      	cmp	r3, #0
 800b408:	d006      	beq.n	800b418 <_ZSt14__copy_move_a2ILb0EPKfPfET1_T0_S4_S3_+0x24>
	  __copy_m(__first, __last, __result);
 800b40a:	687a      	ldr	r2, [r7, #4]
 800b40c:	68b9      	ldr	r1, [r7, #8]
 800b40e:	68f8      	ldr	r0, [r7, #12]
 800b410:	f000 fc38 	bl	800bc84 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPKfPfEET0_T_S7_S6_>
 800b414:	4603      	mov	r3, r0
 800b416:	e006      	b.n	800b426 <_ZSt14__copy_move_a2ILb0EPKfPfET1_T0_S4_S3_+0x32>
			      _Category>::__copy_m(__first, __last, __result);
 800b418:	687a      	ldr	r2, [r7, #4]
 800b41a:	68b9      	ldr	r1, [r7, #8]
 800b41c:	68f8      	ldr	r0, [r7, #12]
 800b41e:	f000 f829 	bl	800b474 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIfEEPT_PKS3_S6_S4_>
 800b422:	4603      	mov	r3, r0
 800b424:	bf00      	nop
    }
 800b426:	4618      	mov	r0, r3
 800b428:	3710      	adds	r7, #16
 800b42a:	46bd      	mov	sp, r7
 800b42c:	bd80      	pop	{r7, pc}

0800b42e <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPfS3_EET0_T_S5_S4_>:
	__copy_m(_II __first, _II __last, _OI __result)
 800b42e:	b480      	push	{r7}
 800b430:	b087      	sub	sp, #28
 800b432:	af00      	add	r7, sp, #0
 800b434:	60f8      	str	r0, [r7, #12]
 800b436:	60b9      	str	r1, [r7, #8]
 800b438:	607a      	str	r2, [r7, #4]
	  for(_Distance __n = __last - __first; __n > 0; --__n)
 800b43a:	68ba      	ldr	r2, [r7, #8]
 800b43c:	68fb      	ldr	r3, [r7, #12]
 800b43e:	1ad3      	subs	r3, r2, r3
 800b440:	109b      	asrs	r3, r3, #2
 800b442:	617b      	str	r3, [r7, #20]
 800b444:	e00c      	b.n	800b460 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPfS3_EET0_T_S5_S4_+0x32>
	      *__result = *__first;
 800b446:	68fb      	ldr	r3, [r7, #12]
 800b448:	681a      	ldr	r2, [r3, #0]
 800b44a:	687b      	ldr	r3, [r7, #4]
 800b44c:	601a      	str	r2, [r3, #0]
	      ++__first;
 800b44e:	68fb      	ldr	r3, [r7, #12]
 800b450:	3304      	adds	r3, #4
 800b452:	60fb      	str	r3, [r7, #12]
	      ++__result;
 800b454:	687b      	ldr	r3, [r7, #4]
 800b456:	3304      	adds	r3, #4
 800b458:	607b      	str	r3, [r7, #4]
	  for(_Distance __n = __last - __first; __n > 0; --__n)
 800b45a:	697b      	ldr	r3, [r7, #20]
 800b45c:	3b01      	subs	r3, #1
 800b45e:	617b      	str	r3, [r7, #20]
 800b460:	697b      	ldr	r3, [r7, #20]
 800b462:	2b00      	cmp	r3, #0
 800b464:	dcef      	bgt.n	800b446 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPfS3_EET0_T_S5_S4_+0x18>
	  return __result;
 800b466:	687b      	ldr	r3, [r7, #4]
	}
 800b468:	4618      	mov	r0, r3
 800b46a:	371c      	adds	r7, #28
 800b46c:	46bd      	mov	sp, r7
 800b46e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b472:	4770      	bx	lr

0800b474 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIfEEPT_PKS3_S6_S4_>:
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 800b474:	b580      	push	{r7, lr}
 800b476:	b086      	sub	sp, #24
 800b478:	af00      	add	r7, sp, #0
 800b47a:	60f8      	str	r0, [r7, #12]
 800b47c:	60b9      	str	r1, [r7, #8]
 800b47e:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 800b480:	68ba      	ldr	r2, [r7, #8]
 800b482:	68fb      	ldr	r3, [r7, #12]
 800b484:	1ad3      	subs	r3, r2, r3
 800b486:	109b      	asrs	r3, r3, #2
 800b488:	617b      	str	r3, [r7, #20]
	  if (_Num)
 800b48a:	697b      	ldr	r3, [r7, #20]
 800b48c:	2b00      	cmp	r3, #0
 800b48e:	d006      	beq.n	800b49e <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIfEEPT_PKS3_S6_S4_+0x2a>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 800b490:	697b      	ldr	r3, [r7, #20]
 800b492:	009b      	lsls	r3, r3, #2
 800b494:	461a      	mov	r2, r3
 800b496:	68f9      	ldr	r1, [r7, #12]
 800b498:	6878      	ldr	r0, [r7, #4]
 800b49a:	f012 faf2 	bl	801da82 <memmove>
	  return __result + _Num;
 800b49e:	697b      	ldr	r3, [r7, #20]
 800b4a0:	009b      	lsls	r3, r3, #2
 800b4a2:	687a      	ldr	r2, [r7, #4]
 800b4a4:	4413      	add	r3, r2
	}
 800b4a6:	4618      	mov	r0, r3
 800b4a8:	3718      	adds	r7, #24
 800b4aa:	46bd      	mov	sp, r7
 800b4ac:	bd80      	pop	{r7, pc}

0800b4ae <_ZN9__gnu_cxx13new_allocatorIN3jlb4EdgeEE10deallocateEPS2_j>:
      deallocate(_Tp* __p, size_type __t __attribute__ ((__unused__)))
 800b4ae:	b580      	push	{r7, lr}
 800b4b0:	b084      	sub	sp, #16
 800b4b2:	af00      	add	r7, sp, #0
 800b4b4:	60f8      	str	r0, [r7, #12]
 800b4b6:	60b9      	str	r1, [r7, #8]
 800b4b8:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 800b4ba:	687a      	ldr	r2, [r7, #4]
 800b4bc:	4613      	mov	r3, r2
 800b4be:	005b      	lsls	r3, r3, #1
 800b4c0:	4413      	add	r3, r2
 800b4c2:	00db      	lsls	r3, r3, #3
 800b4c4:	4619      	mov	r1, r3
 800b4c6:	68b8      	ldr	r0, [r7, #8]
 800b4c8:	f010 f922 	bl	801b710 <_ZdlPvj>
      }
 800b4cc:	3710      	adds	r7, #16
 800b4ce:	46bd      	mov	sp, r7
 800b4d0:	bd80      	pop	{r7, pc}

0800b4d2 <_ZSt11__addressofIN3jlb4EdgeEEPT_RS2_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 800b4d2:	b480      	push	{r7}
 800b4d4:	b083      	sub	sp, #12
 800b4d6:	af00      	add	r7, sp, #0
 800b4d8:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 800b4da:	687b      	ldr	r3, [r7, #4]
 800b4dc:	4618      	mov	r0, r3
 800b4de:	370c      	adds	r7, #12
 800b4e0:	46bd      	mov	sp, r7
 800b4e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4e6:	4770      	bx	lr

0800b4e8 <_ZSt8_DestroyIN3jlb4EdgeEEvPT_>:
    _Destroy(_Tp* __pointer)
 800b4e8:	b580      	push	{r7, lr}
 800b4ea:	b082      	sub	sp, #8
 800b4ec:	af00      	add	r7, sp, #0
 800b4ee:	6078      	str	r0, [r7, #4]
      std::destroy_at(__pointer);
 800b4f0:	6878      	ldr	r0, [r7, #4]
 800b4f2:	f000 f8a6 	bl	800b642 <_ZSt10destroy_atIN3jlb4EdgeEEvPT_>
    }
 800b4f6:	bf00      	nop
 800b4f8:	3708      	adds	r7, #8
 800b4fa:	46bd      	mov	sp, r7
 800b4fc:	bd80      	pop	{r7, pc}

0800b4fe <_ZSt4copyIN9__gnu_cxx17__normal_iteratorIPKcSt6vectorIcSaIcEEEEPcET0_T_SA_S9_>:
    copy(_II __first, _II __last, _OI __result)
 800b4fe:	b590      	push	{r4, r7, lr}
 800b500:	b085      	sub	sp, #20
 800b502:	af00      	add	r7, sp, #0
 800b504:	60f8      	str	r0, [r7, #12]
 800b506:	60b9      	str	r1, [r7, #8]
 800b508:	607a      	str	r2, [r7, #4]
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 800b50a:	68f8      	ldr	r0, [r7, #12]
 800b50c:	f000 fbdd 	bl	800bcca <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPKcSt6vectorIcSaIcEEEEET_S8_>
 800b510:	4604      	mov	r4, r0
 800b512:	68b8      	ldr	r0, [r7, #8]
 800b514:	f000 fbd9 	bl	800bcca <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPKcSt6vectorIcSaIcEEEEET_S8_>
 800b518:	4603      	mov	r3, r0
 800b51a:	687a      	ldr	r2, [r7, #4]
 800b51c:	4619      	mov	r1, r3
 800b51e:	4620      	mov	r0, r4
 800b520:	f000 fbde 	bl	800bce0 <_ZSt13__copy_move_aILb0EN9__gnu_cxx17__normal_iteratorIPKcSt6vectorIcSaIcEEEEPcET1_T0_SA_S9_>
 800b524:	4603      	mov	r3, r0
    }
 800b526:	4618      	mov	r0, r3
 800b528:	3714      	adds	r7, #20
 800b52a:	46bd      	mov	sp, r7
 800b52c:	bd90      	pop	{r4, r7, pc}

0800b52e <_ZSt11__addressofIcEPT_RS0_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 800b52e:	b480      	push	{r7}
 800b530:	b083      	sub	sp, #12
 800b532:	af00      	add	r7, sp, #0
 800b534:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 800b536:	687b      	ldr	r3, [r7, #4]
 800b538:	4618      	mov	r0, r3
 800b53a:	370c      	adds	r7, #12
 800b53c:	46bd      	mov	sp, r7
 800b53e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b542:	4770      	bx	lr

0800b544 <_ZSt8_DestroyIcEvPT_>:
    _Destroy(_Tp* __pointer)
 800b544:	b580      	push	{r7, lr}
 800b546:	b082      	sub	sp, #8
 800b548:	af00      	add	r7, sp, #0
 800b54a:	6078      	str	r0, [r7, #4]
      std::destroy_at(__pointer);
 800b54c:	6878      	ldr	r0, [r7, #4]
 800b54e:	f000 fbea 	bl	800bd26 <_ZSt10destroy_atIcEvPT_>
    }
 800b552:	bf00      	nop
 800b554:	3708      	adds	r7, #8
 800b556:	46bd      	mov	sp, r7
 800b558:	bd80      	pop	{r7, pc}

0800b55a <_ZSt4moveIRNSt12_Vector_baseIcSaIcEE12_Vector_implEEONSt16remove_referenceIT_E4typeEOS6_>:
    move(_Tp&& __t) noexcept
 800b55a:	b480      	push	{r7}
 800b55c:	b083      	sub	sp, #12
 800b55e:	af00      	add	r7, sp, #0
 800b560:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800b562:	687b      	ldr	r3, [r7, #4]
 800b564:	4618      	mov	r0, r3
 800b566:	370c      	adds	r7, #12
 800b568:	46bd      	mov	sp, r7
 800b56a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b56e:	4770      	bx	lr

0800b570 <_ZNSt12_Vector_baseIcSaIcEE17_Vector_impl_dataC1EOS2_>:
	_Vector_impl_data(_Vector_impl_data&& __x) noexcept
 800b570:	b480      	push	{r7}
 800b572:	b083      	sub	sp, #12
 800b574:	af00      	add	r7, sp, #0
 800b576:	6078      	str	r0, [r7, #4]
 800b578:	6039      	str	r1, [r7, #0]
	: _M_start(__x._M_start), _M_finish(__x._M_finish),
 800b57a:	683b      	ldr	r3, [r7, #0]
 800b57c:	681a      	ldr	r2, [r3, #0]
 800b57e:	687b      	ldr	r3, [r7, #4]
 800b580:	601a      	str	r2, [r3, #0]
 800b582:	683b      	ldr	r3, [r7, #0]
 800b584:	685a      	ldr	r2, [r3, #4]
 800b586:	687b      	ldr	r3, [r7, #4]
 800b588:	605a      	str	r2, [r3, #4]
	  _M_end_of_storage(__x._M_end_of_storage)
 800b58a:	683b      	ldr	r3, [r7, #0]
 800b58c:	689a      	ldr	r2, [r3, #8]
 800b58e:	687b      	ldr	r3, [r7, #4]
 800b590:	609a      	str	r2, [r3, #8]
	{ __x._M_start = __x._M_finish = __x._M_end_of_storage = pointer(); }
 800b592:	683b      	ldr	r3, [r7, #0]
 800b594:	2200      	movs	r2, #0
 800b596:	609a      	str	r2, [r3, #8]
 800b598:	683b      	ldr	r3, [r7, #0]
 800b59a:	689a      	ldr	r2, [r3, #8]
 800b59c:	683b      	ldr	r3, [r7, #0]
 800b59e:	605a      	str	r2, [r3, #4]
 800b5a0:	683b      	ldr	r3, [r7, #0]
 800b5a2:	685a      	ldr	r2, [r3, #4]
 800b5a4:	683b      	ldr	r3, [r7, #0]
 800b5a6:	601a      	str	r2, [r3, #0]
 800b5a8:	687b      	ldr	r3, [r7, #4]
 800b5aa:	4618      	mov	r0, r3
 800b5ac:	370c      	adds	r7, #12
 800b5ae:	46bd      	mov	sp, r7
 800b5b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5b4:	4770      	bx	lr

0800b5b6 <_ZNKSt6vectorIN3jlb4EdgeESaIS1_EE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 800b5b6:	b580      	push	{r7, lr}
 800b5b8:	b082      	sub	sp, #8
 800b5ba:	af00      	add	r7, sp, #0
 800b5bc:	6078      	str	r0, [r7, #4]
      { return _S_max_size(_M_get_Tp_allocator()); }
 800b5be:	687b      	ldr	r3, [r7, #4]
 800b5c0:	4618      	mov	r0, r3
 800b5c2:	f000 f87f 	bl	800b6c4 <_ZNKSt12_Vector_baseIN3jlb4EdgeESaIS1_EE19_M_get_Tp_allocatorEv>
 800b5c6:	4603      	mov	r3, r0
 800b5c8:	4618      	mov	r0, r3
 800b5ca:	f000 fbc5 	bl	800bd58 <_ZNSt6vectorIN3jlb4EdgeESaIS1_EE11_S_max_sizeERKS2_>
 800b5ce:	4603      	mov	r3, r0
 800b5d0:	4618      	mov	r0, r3
 800b5d2:	3708      	adds	r7, #8
 800b5d4:	46bd      	mov	sp, r7
 800b5d6:	bd80      	pop	{r7, pc}

0800b5d8 <_ZNSt16allocator_traitsISaIN3jlb4EdgeEEE8allocateERS2_j>:
      allocate(allocator_type& __a, size_type __n)
 800b5d8:	b580      	push	{r7, lr}
 800b5da:	b084      	sub	sp, #16
 800b5dc:	af00      	add	r7, sp, #0
 800b5de:	6078      	str	r0, [r7, #4]
 800b5e0:	6039      	str	r1, [r7, #0]
 800b5e2:	687b      	ldr	r3, [r7, #4]
 800b5e4:	60fb      	str	r3, [r7, #12]
 800b5e6:	683b      	ldr	r3, [r7, #0]
 800b5e8:	60bb      	str	r3, [r7, #8]
	if (std::is_constant_evaluated())
 800b5ea:	f7f6 fdef 	bl	80021cc <_ZSt21is_constant_evaluatedv>
 800b5ee:	4603      	mov	r3, r0
 800b5f0:	2b00      	cmp	r3, #0
 800b5f2:	d009      	beq.n	800b608 <_ZNSt16allocator_traitsISaIN3jlb4EdgeEEE8allocateERS2_j+0x30>
	  return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 800b5f4:	68ba      	ldr	r2, [r7, #8]
 800b5f6:	4613      	mov	r3, r2
 800b5f8:	005b      	lsls	r3, r3, #1
 800b5fa:	4413      	add	r3, r2
 800b5fc:	00db      	lsls	r3, r3, #3
 800b5fe:	4618      	mov	r0, r3
 800b600:	f010 f888 	bl	801b714 <_Znwj>
 800b604:	4603      	mov	r3, r0
 800b606:	e006      	b.n	800b616 <_ZNSt16allocator_traitsISaIN3jlb4EdgeEEE8allocateERS2_j+0x3e>
	return __allocator_base<_Tp>::allocate(__n, 0);
 800b608:	2200      	movs	r2, #0
 800b60a:	68b9      	ldr	r1, [r7, #8]
 800b60c:	68f8      	ldr	r0, [r7, #12]
 800b60e:	f000 fe09 	bl	800c224 <_ZN9__gnu_cxx13new_allocatorIN3jlb4EdgeEE8allocateEjPKv>
 800b612:	4603      	mov	r3, r0
 800b614:	bf00      	nop
      { return __a.allocate(__n); }
 800b616:	4618      	mov	r0, r3
 800b618:	3710      	adds	r7, #16
 800b61a:	46bd      	mov	sp, r7
 800b61c:	bd80      	pop	{r7, pc}

0800b61e <_ZNSt6vectorIN3jlb4EdgeESaIS1_EE14_S_do_relocateEPS1_S4_S4_RS2_St17integral_constantIbLb1EE>:
      _S_do_relocate(pointer __first, pointer __last, pointer __result,
 800b61e:	b580      	push	{r7, lr}
 800b620:	b084      	sub	sp, #16
 800b622:	af00      	add	r7, sp, #0
 800b624:	60f8      	str	r0, [r7, #12]
 800b626:	60b9      	str	r1, [r7, #8]
 800b628:	607a      	str	r2, [r7, #4]
 800b62a:	603b      	str	r3, [r7, #0]
	return std::__relocate_a(__first, __last, __result, __alloc);
 800b62c:	683b      	ldr	r3, [r7, #0]
 800b62e:	687a      	ldr	r2, [r7, #4]
 800b630:	68b9      	ldr	r1, [r7, #8]
 800b632:	68f8      	ldr	r0, [r7, #12]
 800b634:	f000 fbac 	bl	800bd90 <_ZSt12__relocate_aIPN3jlb4EdgeES2_SaIS1_EET0_T_S5_S4_RT1_>
 800b638:	4603      	mov	r3, r0
      }
 800b63a:	4618      	mov	r0, r3
 800b63c:	3710      	adds	r7, #16
 800b63e:	46bd      	mov	sp, r7
 800b640:	bd80      	pop	{r7, pc}

0800b642 <_ZSt10destroy_atIN3jlb4EdgeEEvPT_>:
    destroy_at(_Tp* __location)
 800b642:	b580      	push	{r7, lr}
 800b644:	b082      	sub	sp, #8
 800b646:	af00      	add	r7, sp, #0
 800b648:	6078      	str	r0, [r7, #4]
	__location->~_Tp();
 800b64a:	6878      	ldr	r0, [r7, #4]
 800b64c:	f7f7 ffdc 	bl	8003608 <_ZN3jlb4EdgeD1Ev>
    }
 800b650:	bf00      	nop
 800b652:	3708      	adds	r7, #8
 800b654:	46bd      	mov	sp, r7
 800b656:	bd80      	pop	{r7, pc}

0800b658 <_ZN9__gnu_cxx13new_allocatorIN3jlb4NodeEE10deallocateEPS2_j>:
      deallocate(_Tp* __p, size_type __t __attribute__ ((__unused__)))
 800b658:	b580      	push	{r7, lr}
 800b65a:	b084      	sub	sp, #16
 800b65c:	af00      	add	r7, sp, #0
 800b65e:	60f8      	str	r0, [r7, #12]
 800b660:	60b9      	str	r1, [r7, #8]
 800b662:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 800b664:	687a      	ldr	r2, [r7, #4]
 800b666:	4613      	mov	r3, r2
 800b668:	005b      	lsls	r3, r3, #1
 800b66a:	4413      	add	r3, r2
 800b66c:	00db      	lsls	r3, r3, #3
 800b66e:	4619      	mov	r1, r3
 800b670:	68b8      	ldr	r0, [r7, #8]
 800b672:	f010 f84d 	bl	801b710 <_ZdlPvj>
      }
 800b676:	3710      	adds	r7, #16
 800b678:	46bd      	mov	sp, r7
 800b67a:	bd80      	pop	{r7, pc}

0800b67c <_ZSt11__addressofIN3jlb4NodeEEPT_RS2_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 800b67c:	b480      	push	{r7}
 800b67e:	b083      	sub	sp, #12
 800b680:	af00      	add	r7, sp, #0
 800b682:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 800b684:	687b      	ldr	r3, [r7, #4]
 800b686:	4618      	mov	r0, r3
 800b688:	370c      	adds	r7, #12
 800b68a:	46bd      	mov	sp, r7
 800b68c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b690:	4770      	bx	lr

0800b692 <_ZSt8_DestroyIN3jlb4NodeEEvPT_>:
    _Destroy(_Tp* __pointer)
 800b692:	b580      	push	{r7, lr}
 800b694:	b082      	sub	sp, #8
 800b696:	af00      	add	r7, sp, #0
 800b698:	6078      	str	r0, [r7, #4]
      std::destroy_at(__pointer);
 800b69a:	6878      	ldr	r0, [r7, #4]
 800b69c:	f000 f8c9 	bl	800b832 <_ZSt10destroy_atIN3jlb4NodeEEvPT_>
    }
 800b6a0:	bf00      	nop
 800b6a2:	3708      	adds	r7, #8
 800b6a4:	46bd      	mov	sp, r7
 800b6a6:	bd80      	pop	{r7, pc}

0800b6a8 <_ZN9__gnu_cxx14__alloc_traitsISaIN3jlb4EdgeEES2_E17_S_select_on_copyERKS3_>:
    static constexpr _Alloc _S_select_on_copy(const _Alloc& __a)
 800b6a8:	b580      	push	{r7, lr}
 800b6aa:	b082      	sub	sp, #8
 800b6ac:	af00      	add	r7, sp, #0
 800b6ae:	6078      	str	r0, [r7, #4]
 800b6b0:	6039      	str	r1, [r7, #0]
    { return _Base_type::select_on_container_copy_construction(__a); }
 800b6b2:	687b      	ldr	r3, [r7, #4]
 800b6b4:	6839      	ldr	r1, [r7, #0]
 800b6b6:	4618      	mov	r0, r3
 800b6b8:	f000 fb87 	bl	800bdca <_ZNSt16allocator_traitsISaIN3jlb4EdgeEEE37select_on_container_copy_constructionERKS2_>
 800b6bc:	6878      	ldr	r0, [r7, #4]
 800b6be:	3708      	adds	r7, #8
 800b6c0:	46bd      	mov	sp, r7
 800b6c2:	bd80      	pop	{r7, pc}

0800b6c4 <_ZNKSt12_Vector_baseIN3jlb4EdgeESaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 800b6c4:	b480      	push	{r7}
 800b6c6:	b083      	sub	sp, #12
 800b6c8:	af00      	add	r7, sp, #0
 800b6ca:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 800b6cc:	687b      	ldr	r3, [r7, #4]
 800b6ce:	4618      	mov	r0, r3
 800b6d0:	370c      	adds	r7, #12
 800b6d2:	46bd      	mov	sp, r7
 800b6d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6d8:	4770      	bx	lr

0800b6da <_ZNSt12_Vector_baseIN3jlb4EdgeESaIS1_EEC1EjRKS2_>:
      _Vector_base(size_t __n, const allocator_type& __a)
 800b6da:	b580      	push	{r7, lr}
 800b6dc:	b084      	sub	sp, #16
 800b6de:	af00      	add	r7, sp, #0
 800b6e0:	60f8      	str	r0, [r7, #12]
 800b6e2:	60b9      	str	r1, [r7, #8]
 800b6e4:	607a      	str	r2, [r7, #4]
      : _M_impl(__a)
 800b6e6:	68fb      	ldr	r3, [r7, #12]
 800b6e8:	6879      	ldr	r1, [r7, #4]
 800b6ea:	4618      	mov	r0, r3
 800b6ec:	f000 fb7a 	bl	800bde4 <_ZNSt12_Vector_baseIN3jlb4EdgeESaIS1_EE12_Vector_implC1ERKS2_>
      { _M_create_storage(__n); }
 800b6f0:	68b9      	ldr	r1, [r7, #8]
 800b6f2:	68f8      	ldr	r0, [r7, #12]
 800b6f4:	f000 fb88 	bl	800be08 <_ZNSt12_Vector_baseIN3jlb4EdgeESaIS1_EE17_M_create_storageEj>
 800b6f8:	68fb      	ldr	r3, [r7, #12]
 800b6fa:	4618      	mov	r0, r3
 800b6fc:	3710      	adds	r7, #16
 800b6fe:	46bd      	mov	sp, r7
 800b700:	bd80      	pop	{r7, pc}

0800b702 <_ZNKSt6vectorIN3jlb4EdgeESaIS1_EE5beginEv>:
      begin() const _GLIBCXX_NOEXCEPT
 800b702:	b580      	push	{r7, lr}
 800b704:	b084      	sub	sp, #16
 800b706:	af00      	add	r7, sp, #0
 800b708:	6078      	str	r0, [r7, #4]
      { return const_iterator(this->_M_impl._M_start); }
 800b70a:	687a      	ldr	r2, [r7, #4]
 800b70c:	f107 030c 	add.w	r3, r7, #12
 800b710:	4611      	mov	r1, r2
 800b712:	4618      	mov	r0, r3
 800b714:	f000 fb96 	bl	800be44 <_ZN9__gnu_cxx17__normal_iteratorIPKN3jlb4EdgeESt6vectorIS2_SaIS2_EEEC1ERKS4_>
 800b718:	68fb      	ldr	r3, [r7, #12]
 800b71a:	4618      	mov	r0, r3
 800b71c:	3710      	adds	r7, #16
 800b71e:	46bd      	mov	sp, r7
 800b720:	bd80      	pop	{r7, pc}

0800b722 <_ZNKSt6vectorIN3jlb4EdgeESaIS1_EE3endEv>:
      end() const _GLIBCXX_NOEXCEPT
 800b722:	b580      	push	{r7, lr}
 800b724:	b084      	sub	sp, #16
 800b726:	af00      	add	r7, sp, #0
 800b728:	6078      	str	r0, [r7, #4]
      { return const_iterator(this->_M_impl._M_finish); }
 800b72a:	687b      	ldr	r3, [r7, #4]
 800b72c:	1d1a      	adds	r2, r3, #4
 800b72e:	f107 030c 	add.w	r3, r7, #12
 800b732:	4611      	mov	r1, r2
 800b734:	4618      	mov	r0, r3
 800b736:	f000 fb85 	bl	800be44 <_ZN9__gnu_cxx17__normal_iteratorIPKN3jlb4EdgeESt6vectorIS2_SaIS2_EEEC1ERKS4_>
 800b73a:	68fb      	ldr	r3, [r7, #12]
 800b73c:	4618      	mov	r0, r3
 800b73e:	3710      	adds	r7, #16
 800b740:	46bd      	mov	sp, r7
 800b742:	bd80      	pop	{r7, pc}

0800b744 <_ZSt22__uninitialized_copy_aIN9__gnu_cxx17__normal_iteratorIPKN3jlb4EdgeESt6vectorIS3_SaIS3_EEEEPS3_S3_ET0_T_SC_SB_RSaIT1_E>:
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 800b744:	b580      	push	{r7, lr}
 800b746:	b084      	sub	sp, #16
 800b748:	af00      	add	r7, sp, #0
 800b74a:	60f8      	str	r0, [r7, #12]
 800b74c:	60b9      	str	r1, [r7, #8]
 800b74e:	607a      	str	r2, [r7, #4]
 800b750:	603b      	str	r3, [r7, #0]
    { return std::uninitialized_copy(__first, __last, __result); }
 800b752:	687a      	ldr	r2, [r7, #4]
 800b754:	68b9      	ldr	r1, [r7, #8]
 800b756:	68f8      	ldr	r0, [r7, #12]
 800b758:	f000 fb84 	bl	800be64 <_ZSt18uninitialized_copyIN9__gnu_cxx17__normal_iteratorIPKN3jlb4EdgeESt6vectorIS3_SaIS3_EEEEPS3_ET0_T_SC_SB_>
 800b75c:	4603      	mov	r3, r0
 800b75e:	4618      	mov	r0, r3
 800b760:	3710      	adds	r7, #16
 800b762:	46bd      	mov	sp, r7
 800b764:	bd80      	pop	{r7, pc}

0800b766 <_ZNKSt6vectorIN3jlb4NodeESaIS1_EE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 800b766:	b580      	push	{r7, lr}
 800b768:	b082      	sub	sp, #8
 800b76a:	af00      	add	r7, sp, #0
 800b76c:	6078      	str	r0, [r7, #4]
      { return _S_max_size(_M_get_Tp_allocator()); }
 800b76e:	687b      	ldr	r3, [r7, #4]
 800b770:	4618      	mov	r0, r3
 800b772:	f000 fbb3 	bl	800bedc <_ZNKSt12_Vector_baseIN3jlb4NodeESaIS1_EE19_M_get_Tp_allocatorEv>
 800b776:	4603      	mov	r3, r0
 800b778:	4618      	mov	r0, r3
 800b77a:	f000 fb93 	bl	800bea4 <_ZNSt6vectorIN3jlb4NodeESaIS1_EE11_S_max_sizeERKS2_>
 800b77e:	4603      	mov	r3, r0
 800b780:	4618      	mov	r0, r3
 800b782:	3708      	adds	r7, #8
 800b784:	46bd      	mov	sp, r7
 800b786:	bd80      	pop	{r7, pc}

0800b788 <_ZNKSt6vectorIN3jlb4NodeESaIS1_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 800b788:	b480      	push	{r7}
 800b78a:	b083      	sub	sp, #12
 800b78c:	af00      	add	r7, sp, #0
 800b78e:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 800b790:	687b      	ldr	r3, [r7, #4]
 800b792:	685a      	ldr	r2, [r3, #4]
 800b794:	687b      	ldr	r3, [r7, #4]
 800b796:	681b      	ldr	r3, [r3, #0]
 800b798:	1ad3      	subs	r3, r2, r3
 800b79a:	10db      	asrs	r3, r3, #3
 800b79c:	4a04      	ldr	r2, [pc, #16]	; (800b7b0 <_ZNKSt6vectorIN3jlb4NodeESaIS1_EE4sizeEv+0x28>)
 800b79e:	fb02 f303 	mul.w	r3, r2, r3
 800b7a2:	4618      	mov	r0, r3
 800b7a4:	370c      	adds	r7, #12
 800b7a6:	46bd      	mov	sp, r7
 800b7a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7ac:	4770      	bx	lr
 800b7ae:	bf00      	nop
 800b7b0:	aaaaaaab 	.word	0xaaaaaaab

0800b7b4 <_ZNSt16allocator_traitsISaIN3jlb4NodeEEE8allocateERS2_j>:
      allocate(allocator_type& __a, size_type __n)
 800b7b4:	b580      	push	{r7, lr}
 800b7b6:	b084      	sub	sp, #16
 800b7b8:	af00      	add	r7, sp, #0
 800b7ba:	6078      	str	r0, [r7, #4]
 800b7bc:	6039      	str	r1, [r7, #0]
 800b7be:	687b      	ldr	r3, [r7, #4]
 800b7c0:	60fb      	str	r3, [r7, #12]
 800b7c2:	683b      	ldr	r3, [r7, #0]
 800b7c4:	60bb      	str	r3, [r7, #8]
	if (std::is_constant_evaluated())
 800b7c6:	f7f6 fd01 	bl	80021cc <_ZSt21is_constant_evaluatedv>
 800b7ca:	4603      	mov	r3, r0
 800b7cc:	2b00      	cmp	r3, #0
 800b7ce:	d009      	beq.n	800b7e4 <_ZNSt16allocator_traitsISaIN3jlb4NodeEEE8allocateERS2_j+0x30>
	  return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 800b7d0:	68ba      	ldr	r2, [r7, #8]
 800b7d2:	4613      	mov	r3, r2
 800b7d4:	005b      	lsls	r3, r3, #1
 800b7d6:	4413      	add	r3, r2
 800b7d8:	00db      	lsls	r3, r3, #3
 800b7da:	4618      	mov	r0, r3
 800b7dc:	f00f ff9a 	bl	801b714 <_Znwj>
 800b7e0:	4603      	mov	r3, r0
 800b7e2:	e006      	b.n	800b7f2 <_ZNSt16allocator_traitsISaIN3jlb4NodeEEE8allocateERS2_j+0x3e>
	return __allocator_base<_Tp>::allocate(__n, 0);
 800b7e4:	2200      	movs	r2, #0
 800b7e6:	68b9      	ldr	r1, [r7, #8]
 800b7e8:	68f8      	ldr	r0, [r7, #12]
 800b7ea:	f000 fde7 	bl	800c3bc <_ZN9__gnu_cxx13new_allocatorIN3jlb4NodeEE8allocateEjPKv>
 800b7ee:	4603      	mov	r3, r0
 800b7f0:	bf00      	nop
      { return __a.allocate(__n); }
 800b7f2:	4618      	mov	r0, r3
 800b7f4:	3710      	adds	r7, #16
 800b7f6:	46bd      	mov	sp, r7
 800b7f8:	bd80      	pop	{r7, pc}

0800b7fa <_ZSt32__make_move_if_noexcept_iteratorIN3jlb4NodeEPKS1_ET0_PT_>:
  // returning a constant iterator when we don't want to move.
  template<typename _Tp, typename _ReturnType
    = typename conditional<__move_if_noexcept_cond<_Tp>::value,
			   const _Tp*, move_iterator<_Tp*>>::type>
    inline _GLIBCXX17_CONSTEXPR _ReturnType
    __make_move_if_noexcept_iterator(_Tp* __i)
 800b7fa:	b480      	push	{r7}
 800b7fc:	b083      	sub	sp, #12
 800b7fe:	af00      	add	r7, sp, #0
 800b800:	6078      	str	r0, [r7, #4]
    { return _ReturnType(__i); }
 800b802:	687b      	ldr	r3, [r7, #4]
 800b804:	4618      	mov	r0, r3
 800b806:	370c      	adds	r7, #12
 800b808:	46bd      	mov	sp, r7
 800b80a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b80e:	4770      	bx	lr

0800b810 <_ZSt22__uninitialized_copy_aIPKN3jlb4NodeEPS1_S1_ET0_T_S6_S5_RSaIT1_E>:
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 800b810:	b580      	push	{r7, lr}
 800b812:	b084      	sub	sp, #16
 800b814:	af00      	add	r7, sp, #0
 800b816:	60f8      	str	r0, [r7, #12]
 800b818:	60b9      	str	r1, [r7, #8]
 800b81a:	607a      	str	r2, [r7, #4]
 800b81c:	603b      	str	r3, [r7, #0]
    { return std::uninitialized_copy(__first, __last, __result); }
 800b81e:	687a      	ldr	r2, [r7, #4]
 800b820:	68b9      	ldr	r1, [r7, #8]
 800b822:	68f8      	ldr	r0, [r7, #12]
 800b824:	f000 fb65 	bl	800bef2 <_ZSt18uninitialized_copyIPKN3jlb4NodeEPS1_ET0_T_S6_S5_>
 800b828:	4603      	mov	r3, r0
 800b82a:	4618      	mov	r0, r3
 800b82c:	3710      	adds	r7, #16
 800b82e:	46bd      	mov	sp, r7
 800b830:	bd80      	pop	{r7, pc}

0800b832 <_ZSt10destroy_atIN3jlb4NodeEEvPT_>:
    destroy_at(_Tp* __location)
 800b832:	b580      	push	{r7, lr}
 800b834:	b082      	sub	sp, #8
 800b836:	af00      	add	r7, sp, #0
 800b838:	6078      	str	r0, [r7, #4]
	__location->~_Tp();
 800b83a:	6878      	ldr	r0, [r7, #4]
 800b83c:	f7f7 fed6 	bl	80035ec <_ZN3jlb4NodeD1Ev>
    }
 800b840:	bf00      	nop
 800b842:	3708      	adds	r7, #8
 800b844:	46bd      	mov	sp, r7
 800b846:	bd80      	pop	{r7, pc}

0800b848 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIPKcPcEET0_T_S6_S5_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 800b848:	b580      	push	{r7, lr}
 800b84a:	b084      	sub	sp, #16
 800b84c:	af00      	add	r7, sp, #0
 800b84e:	60f8      	str	r0, [r7, #12]
 800b850:	60b9      	str	r1, [r7, #8]
 800b852:	607a      	str	r2, [r7, #4]
        { return std::copy(__first, __last, __result); }
 800b854:	687a      	ldr	r2, [r7, #4]
 800b856:	68b9      	ldr	r1, [r7, #8]
 800b858:	68f8      	ldr	r0, [r7, #12]
 800b85a:	f7fc f980 	bl	8007b5e <_ZSt4copyIPKcPcET0_T_S4_S3_>
 800b85e:	4603      	mov	r3, r0
 800b860:	4618      	mov	r0, r3
 800b862:	3710      	adds	r7, #16
 800b864:	46bd      	mov	sp, r7
 800b866:	bd80      	pop	{r7, pc}

0800b868 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPKcPcEET0_T_S7_S6_>:
	__copy_m(_II __first, _II __last, _OI __result)
 800b868:	b480      	push	{r7}
 800b86a:	b087      	sub	sp, #28
 800b86c:	af00      	add	r7, sp, #0
 800b86e:	60f8      	str	r0, [r7, #12]
 800b870:	60b9      	str	r1, [r7, #8]
 800b872:	607a      	str	r2, [r7, #4]
	  for(_Distance __n = __last - __first; __n > 0; --__n)
 800b874:	68ba      	ldr	r2, [r7, #8]
 800b876:	68fb      	ldr	r3, [r7, #12]
 800b878:	1ad3      	subs	r3, r2, r3
 800b87a:	617b      	str	r3, [r7, #20]
 800b87c:	e00c      	b.n	800b898 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPKcPcEET0_T_S7_S6_+0x30>
	      *__result = *__first;
 800b87e:	68fb      	ldr	r3, [r7, #12]
 800b880:	781a      	ldrb	r2, [r3, #0]
 800b882:	687b      	ldr	r3, [r7, #4]
 800b884:	701a      	strb	r2, [r3, #0]
	      ++__first;
 800b886:	68fb      	ldr	r3, [r7, #12]
 800b888:	3301      	adds	r3, #1
 800b88a:	60fb      	str	r3, [r7, #12]
	      ++__result;
 800b88c:	687b      	ldr	r3, [r7, #4]
 800b88e:	3301      	adds	r3, #1
 800b890:	607b      	str	r3, [r7, #4]
	  for(_Distance __n = __last - __first; __n > 0; --__n)
 800b892:	697b      	ldr	r3, [r7, #20]
 800b894:	3b01      	subs	r3, #1
 800b896:	617b      	str	r3, [r7, #20]
 800b898:	697b      	ldr	r3, [r7, #20]
 800b89a:	2b00      	cmp	r3, #0
 800b89c:	dcef      	bgt.n	800b87e <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPKcPcEET0_T_S7_S6_+0x16>
	  return __result;
 800b89e:	687b      	ldr	r3, [r7, #4]
	}
 800b8a0:	4618      	mov	r0, r3
 800b8a2:	371c      	adds	r7, #28
 800b8a4:	46bd      	mov	sp, r7
 800b8a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8aa:	4770      	bx	lr

0800b8ac <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIcEEPT_PKS3_S6_S4_>:
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 800b8ac:	b580      	push	{r7, lr}
 800b8ae:	b086      	sub	sp, #24
 800b8b0:	af00      	add	r7, sp, #0
 800b8b2:	60f8      	str	r0, [r7, #12]
 800b8b4:	60b9      	str	r1, [r7, #8]
 800b8b6:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 800b8b8:	68ba      	ldr	r2, [r7, #8]
 800b8ba:	68fb      	ldr	r3, [r7, #12]
 800b8bc:	1ad3      	subs	r3, r2, r3
 800b8be:	617b      	str	r3, [r7, #20]
	  if (_Num)
 800b8c0:	697b      	ldr	r3, [r7, #20]
 800b8c2:	2b00      	cmp	r3, #0
 800b8c4:	d005      	beq.n	800b8d2 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIcEEPT_PKS3_S6_S4_+0x26>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 800b8c6:	697b      	ldr	r3, [r7, #20]
 800b8c8:	461a      	mov	r2, r3
 800b8ca:	68f9      	ldr	r1, [r7, #12]
 800b8cc:	6878      	ldr	r0, [r7, #4]
 800b8ce:	f012 f8d8 	bl	801da82 <memmove>
	  return __result + _Num;
 800b8d2:	697b      	ldr	r3, [r7, #20]
 800b8d4:	687a      	ldr	r2, [r7, #4]
 800b8d6:	4413      	add	r3, r2
	}
 800b8d8:	4618      	mov	r0, r3
 800b8da:	3718      	adds	r7, #24
 800b8dc:	46bd      	mov	sp, r7
 800b8de:	bd80      	pop	{r7, pc}

0800b8e0 <_ZN9__gnu_cxx13new_allocatorIcE10deallocateEPcj>:
      deallocate(_Tp* __p, size_type __t __attribute__ ((__unused__)))
 800b8e0:	b580      	push	{r7, lr}
 800b8e2:	b084      	sub	sp, #16
 800b8e4:	af00      	add	r7, sp, #0
 800b8e6:	60f8      	str	r0, [r7, #12]
 800b8e8:	60b9      	str	r1, [r7, #8]
 800b8ea:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 800b8ec:	6879      	ldr	r1, [r7, #4]
 800b8ee:	68b8      	ldr	r0, [r7, #8]
 800b8f0:	f00f ff0e 	bl	801b710 <_ZdlPvj>
      }
 800b8f4:	3710      	adds	r7, #16
 800b8f6:	46bd      	mov	sp, r7
 800b8f8:	bd80      	pop	{r7, pc}

0800b8fa <_ZNSt6vectorIfSaIfEE11_S_max_sizeERKS0_>:
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 800b8fa:	b580      	push	{r7, lr}
 800b8fc:	b084      	sub	sp, #16
 800b8fe:	af00      	add	r7, sp, #0
 800b900:	6078      	str	r0, [r7, #4]
	const size_t __diffmax
 800b902:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 800b906:	60fb      	str	r3, [r7, #12]
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 800b908:	6878      	ldr	r0, [r7, #4]
 800b90a:	f7fe fa78 	bl	8009dfe <_ZNSt16allocator_traitsISaIfEE8max_sizeERKS0_>
 800b90e:	4603      	mov	r3, r0
 800b910:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 800b912:	f107 0208 	add.w	r2, r7, #8
 800b916:	f107 030c 	add.w	r3, r7, #12
 800b91a:	4611      	mov	r1, r2
 800b91c:	4618      	mov	r0, r3
 800b91e:	f7ff fa90 	bl	800ae42 <_ZSt3minIjERKT_S2_S2_>
 800b922:	4603      	mov	r3, r0
 800b924:	681b      	ldr	r3, [r3, #0]
      }
 800b926:	4618      	mov	r0, r3
 800b928:	3710      	adds	r7, #16
 800b92a:	46bd      	mov	sp, r7
 800b92c:	bd80      	pop	{r7, pc}

0800b92e <_ZSt12__relocate_aIPfS0_SaIfEET0_T_S3_S2_RT1_>:
    }

  template <typename _InputIterator, typename _ForwardIterator,
	    typename _Allocator>
    inline _ForwardIterator
    __relocate_a(_InputIterator __first, _InputIterator __last,
 800b92e:	b5b0      	push	{r4, r5, r7, lr}
 800b930:	b084      	sub	sp, #16
 800b932:	af00      	add	r7, sp, #0
 800b934:	60f8      	str	r0, [r7, #12]
 800b936:	60b9      	str	r1, [r7, #8]
 800b938:	607a      	str	r2, [r7, #4]
 800b93a:	603b      	str	r3, [r7, #0]
		 _ForwardIterator __result, _Allocator& __alloc)
    noexcept(noexcept(__relocate_a_1(std::__niter_base(__first),
				     std::__niter_base(__last),
				     std::__niter_base(__result), __alloc)))
    {
      return __relocate_a_1(std::__niter_base(__first),
 800b93c:	68f8      	ldr	r0, [r7, #12]
 800b93e:	f7fd fc78 	bl	8009232 <_ZSt12__niter_baseIPfET_S1_>
 800b942:	4604      	mov	r4, r0
 800b944:	68b8      	ldr	r0, [r7, #8]
 800b946:	f7fd fc74 	bl	8009232 <_ZSt12__niter_baseIPfET_S1_>
 800b94a:	4605      	mov	r5, r0
 800b94c:	6878      	ldr	r0, [r7, #4]
 800b94e:	f7fd fc70 	bl	8009232 <_ZSt12__niter_baseIPfET_S1_>
 800b952:	4602      	mov	r2, r0
 800b954:	683b      	ldr	r3, [r7, #0]
 800b956:	4629      	mov	r1, r5
 800b958:	4620      	mov	r0, r4
 800b95a:	f000 fb0a 	bl	800bf72 <_ZSt14__relocate_a_1IffENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS2_E4typeES4_S4_S4_RSaIT0_E>
 800b95e:	4603      	mov	r3, r0
			    std::__niter_base(__last),
			    std::__niter_base(__result), __alloc);
    }
 800b960:	4618      	mov	r0, r3
 800b962:	3710      	adds	r7, #16
 800b964:	46bd      	mov	sp, r7
 800b966:	bdb0      	pop	{r4, r5, r7, pc}

0800b968 <_ZSt4moveIRbEONSt16remove_referenceIT_E4typeEOS2_>:
    move(_Tp&& __t) noexcept
 800b968:	b480      	push	{r7}
 800b96a:	b083      	sub	sp, #12
 800b96c:	af00      	add	r7, sp, #0
 800b96e:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800b970:	687b      	ldr	r3, [r7, #4]
 800b972:	4618      	mov	r0, r3
 800b974:	370c      	adds	r7, #12
 800b976:	46bd      	mov	sp, r7
 800b978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b97c:	4770      	bx	lr

0800b97e <_ZNK9__gnu_cxx13new_allocatorIPfE11_M_max_sizeEv>:
	{ return false; }
#endif

    private:
      _GLIBCXX_CONSTEXPR size_type
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 800b97e:	b480      	push	{r7}
 800b980:	b083      	sub	sp, #12
 800b982:	af00      	add	r7, sp, #0
 800b984:	6078      	str	r0, [r7, #4]
      {
#if __PTRDIFF_MAX__ < __SIZE_MAX__
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 800b986:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
#else
	return std::size_t(-1) / sizeof(_Tp);
#endif
      }
 800b98a:	4618      	mov	r0, r3
 800b98c:	370c      	adds	r7, #12
 800b98e:	46bd      	mov	sp, r7
 800b990:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b994:	4770      	bx	lr

0800b996 <_ZN9__gnu_cxx13new_allocatorIPfE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 800b996:	b580      	push	{r7, lr}
 800b998:	b084      	sub	sp, #16
 800b99a:	af00      	add	r7, sp, #0
 800b99c:	60f8      	str	r0, [r7, #12]
 800b99e:	60b9      	str	r1, [r7, #8]
 800b9a0:	607a      	str	r2, [r7, #4]
	if (__builtin_expect(__n > this->_M_max_size(), false))
 800b9a2:	68f8      	ldr	r0, [r7, #12]
 800b9a4:	f7ff ffeb 	bl	800b97e <_ZNK9__gnu_cxx13new_allocatorIPfE11_M_max_sizeEv>
 800b9a8:	4602      	mov	r2, r0
 800b9aa:	68bb      	ldr	r3, [r7, #8]
 800b9ac:	4293      	cmp	r3, r2
 800b9ae:	bf8c      	ite	hi
 800b9b0:	2301      	movhi	r3, #1
 800b9b2:	2300      	movls	r3, #0
 800b9b4:	b2db      	uxtb	r3, r3
 800b9b6:	2b00      	cmp	r3, #0
 800b9b8:	bf14      	ite	ne
 800b9ba:	2301      	movne	r3, #1
 800b9bc:	2300      	moveq	r3, #0
 800b9be:	b2db      	uxtb	r3, r3
 800b9c0:	2b00      	cmp	r3, #0
 800b9c2:	d007      	beq.n	800b9d4 <_ZN9__gnu_cxx13new_allocatorIPfE8allocateEjPKv+0x3e>
	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
 800b9c4:	68bb      	ldr	r3, [r7, #8]
 800b9c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b9ca:	d301      	bcc.n	800b9d0 <_ZN9__gnu_cxx13new_allocatorIPfE8allocateEjPKv+0x3a>
	      std::__throw_bad_array_new_length();
 800b9cc:	f00f feb9 	bl	801b742 <_ZSt28__throw_bad_array_new_lengthv>
	    std::__throw_bad_alloc();
 800b9d0:	f00f feb4 	bl	801b73c <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 800b9d4:	68bb      	ldr	r3, [r7, #8]
 800b9d6:	009b      	lsls	r3, r3, #2
 800b9d8:	4618      	mov	r0, r3
 800b9da:	f00f fe9b 	bl	801b714 <_Znwj>
 800b9de:	4603      	mov	r3, r0
 800b9e0:	bf00      	nop
      }
 800b9e2:	4618      	mov	r0, r3
 800b9e4:	3710      	adds	r7, #16
 800b9e6:	46bd      	mov	sp, r7
 800b9e8:	bd80      	pop	{r7, pc}

0800b9ea <_ZSt12__niter_baseIPPfET_S2_>:
    __niter_base(_Iterator __it)
 800b9ea:	b480      	push	{r7}
 800b9ec:	b083      	sub	sp, #12
 800b9ee:	af00      	add	r7, sp, #0
 800b9f0:	6078      	str	r0, [r7, #4]
    { return __it; }
 800b9f2:	687b      	ldr	r3, [r7, #4]
 800b9f4:	4618      	mov	r0, r3
 800b9f6:	370c      	adds	r7, #12
 800b9f8:	46bd      	mov	sp, r7
 800b9fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9fe:	4770      	bx	lr

0800ba00 <_ZSt14__copy_move_a1ILb0EPPfS1_ET1_T0_S3_S2_>:
    __copy_move_a1(_II __first, _II __last, _OI __result)
 800ba00:	b580      	push	{r7, lr}
 800ba02:	b084      	sub	sp, #16
 800ba04:	af00      	add	r7, sp, #0
 800ba06:	60f8      	str	r0, [r7, #12]
 800ba08:	60b9      	str	r1, [r7, #8]
 800ba0a:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_a2<_IsMove>(__first, __last, __result); }
 800ba0c:	687a      	ldr	r2, [r7, #4]
 800ba0e:	68b9      	ldr	r1, [r7, #8]
 800ba10:	68f8      	ldr	r0, [r7, #12]
 800ba12:	f000 facc 	bl	800bfae <_ZSt14__copy_move_a2ILb0EPPfS1_ET1_T0_S3_S2_>
 800ba16:	4603      	mov	r3, r0
 800ba18:	4618      	mov	r0, r3
 800ba1a:	3710      	adds	r7, #16
 800ba1c:	46bd      	mov	sp, r7
 800ba1e:	bd80      	pop	{r7, pc}

0800ba20 <_ZSt12__niter_wrapIPPfET_RKS2_S2_>:
    __niter_wrap(const _Iterator&, _Iterator __res)
 800ba20:	b480      	push	{r7}
 800ba22:	b083      	sub	sp, #12
 800ba24:	af00      	add	r7, sp, #0
 800ba26:	6078      	str	r0, [r7, #4]
 800ba28:	6039      	str	r1, [r7, #0]
    { return __res; }
 800ba2a:	683b      	ldr	r3, [r7, #0]
 800ba2c:	4618      	mov	r0, r3
 800ba2e:	370c      	adds	r7, #12
 800ba30:	46bd      	mov	sp, r7
 800ba32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba36:	4770      	bx	lr

0800ba38 <_ZSt23__copy_move_backward_a1ILb0EPPfS1_ET1_T0_S3_S2_>:
    __copy_move_backward_a1(_BI1 __first, _BI1 __last, _BI2 __result)
 800ba38:	b580      	push	{r7, lr}
 800ba3a:	b084      	sub	sp, #16
 800ba3c:	af00      	add	r7, sp, #0
 800ba3e:	60f8      	str	r0, [r7, #12]
 800ba40:	60b9      	str	r1, [r7, #8]
 800ba42:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_backward_a2<_IsMove>(__first, __last, __result); }
 800ba44:	687a      	ldr	r2, [r7, #4]
 800ba46:	68b9      	ldr	r1, [r7, #8]
 800ba48:	68f8      	ldr	r0, [r7, #12]
 800ba4a:	f000 facd 	bl	800bfe8 <_ZSt23__copy_move_backward_a2ILb0EPPfS1_ET1_T0_S3_S2_>
 800ba4e:	4603      	mov	r3, r0
 800ba50:	4618      	mov	r0, r3
 800ba52:	3710      	adds	r7, #16
 800ba54:	46bd      	mov	sp, r7
 800ba56:	bd80      	pop	{r7, pc}

0800ba58 <_ZNK9__gnu_cxx13new_allocatorIfE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 800ba58:	b480      	push	{r7}
 800ba5a:	b083      	sub	sp, #12
 800ba5c:	af00      	add	r7, sp, #0
 800ba5e:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 800ba60:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
      }
 800ba64:	4618      	mov	r0, r3
 800ba66:	370c      	adds	r7, #12
 800ba68:	46bd      	mov	sp, r7
 800ba6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba6e:	4770      	bx	lr

0800ba70 <_ZN9__gnu_cxx13new_allocatorIfE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 800ba70:	b580      	push	{r7, lr}
 800ba72:	b084      	sub	sp, #16
 800ba74:	af00      	add	r7, sp, #0
 800ba76:	60f8      	str	r0, [r7, #12]
 800ba78:	60b9      	str	r1, [r7, #8]
 800ba7a:	607a      	str	r2, [r7, #4]
	if (__builtin_expect(__n > this->_M_max_size(), false))
 800ba7c:	68f8      	ldr	r0, [r7, #12]
 800ba7e:	f7ff ffeb 	bl	800ba58 <_ZNK9__gnu_cxx13new_allocatorIfE11_M_max_sizeEv>
 800ba82:	4602      	mov	r2, r0
 800ba84:	68bb      	ldr	r3, [r7, #8]
 800ba86:	4293      	cmp	r3, r2
 800ba88:	bf8c      	ite	hi
 800ba8a:	2301      	movhi	r3, #1
 800ba8c:	2300      	movls	r3, #0
 800ba8e:	b2db      	uxtb	r3, r3
 800ba90:	2b00      	cmp	r3, #0
 800ba92:	bf14      	ite	ne
 800ba94:	2301      	movne	r3, #1
 800ba96:	2300      	moveq	r3, #0
 800ba98:	b2db      	uxtb	r3, r3
 800ba9a:	2b00      	cmp	r3, #0
 800ba9c:	d007      	beq.n	800baae <_ZN9__gnu_cxx13new_allocatorIfE8allocateEjPKv+0x3e>
	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
 800ba9e:	68bb      	ldr	r3, [r7, #8]
 800baa0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800baa4:	d301      	bcc.n	800baaa <_ZN9__gnu_cxx13new_allocatorIfE8allocateEjPKv+0x3a>
	      std::__throw_bad_array_new_length();
 800baa6:	f00f fe4c 	bl	801b742 <_ZSt28__throw_bad_array_new_lengthv>
	    std::__throw_bad_alloc();
 800baaa:	f00f fe47 	bl	801b73c <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 800baae:	68bb      	ldr	r3, [r7, #8]
 800bab0:	009b      	lsls	r3, r3, #2
 800bab2:	4618      	mov	r0, r3
 800bab4:	f00f fe2e 	bl	801b714 <_Znwj>
 800bab8:	4603      	mov	r3, r0
 800baba:	bf00      	nop
      }
 800babc:	4618      	mov	r0, r3
 800babe:	3710      	adds	r7, #16
 800bac0:	46bd      	mov	sp, r7
 800bac2:	bd80      	pop	{r7, pc}

0800bac4 <_ZSt11__make_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_RT0_>:
    __make_heap(_RandomAccessIterator __first, _RandomAccessIterator __last,
 800bac4:	b590      	push	{r4, r7, lr}
 800bac6:	b089      	sub	sp, #36	; 0x24
 800bac8:	af00      	add	r7, sp, #0
 800baca:	60f8      	str	r0, [r7, #12]
 800bacc:	60b9      	str	r1, [r7, #8]
 800bace:	607a      	str	r2, [r7, #4]
      if (__last - __first < 2)
 800bad0:	f107 020c 	add.w	r2, r7, #12
 800bad4:	f107 0308 	add.w	r3, r7, #8
 800bad8:	4611      	mov	r1, r2
 800bada:	4618      	mov	r0, r3
 800badc:	f7fc fbab 	bl	8008236 <_ZN9__gnu_cxxmiIPfSt6vectorIfSaIfEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS8_SB_>
 800bae0:	4603      	mov	r3, r0
 800bae2:	2b01      	cmp	r3, #1
 800bae4:	bfd4      	ite	le
 800bae6:	2301      	movle	r3, #1
 800bae8:	2300      	movgt	r3, #0
 800baea:	b2db      	uxtb	r3, r3
 800baec:	2b00      	cmp	r3, #0
 800baee:	d139      	bne.n	800bb64 <_ZSt11__make_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_RT0_+0xa0>
      const _DistanceType __len = __last - __first;
 800baf0:	f107 020c 	add.w	r2, r7, #12
 800baf4:	f107 0308 	add.w	r3, r7, #8
 800baf8:	4611      	mov	r1, r2
 800bafa:	4618      	mov	r0, r3
 800bafc:	f7fc fb9b 	bl	8008236 <_ZN9__gnu_cxxmiIPfSt6vectorIfSaIfEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS8_SB_>
 800bb00:	61b8      	str	r0, [r7, #24]
      _DistanceType __parent = (__len - 2) / 2;
 800bb02:	69bb      	ldr	r3, [r7, #24]
 800bb04:	3b02      	subs	r3, #2
 800bb06:	0fda      	lsrs	r2, r3, #31
 800bb08:	4413      	add	r3, r2
 800bb0a:	105b      	asrs	r3, r3, #1
 800bb0c:	61fb      	str	r3, [r7, #28]
	  _ValueType __value = _GLIBCXX_MOVE(*(__first + __parent));
 800bb0e:	f107 030c 	add.w	r3, r7, #12
 800bb12:	69f9      	ldr	r1, [r7, #28]
 800bb14:	4618      	mov	r0, r3
 800bb16:	f7fe fafd 	bl	800a114 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEplEi>
 800bb1a:	4603      	mov	r3, r0
 800bb1c:	617b      	str	r3, [r7, #20]
 800bb1e:	f107 0314 	add.w	r3, r7, #20
 800bb22:	4618      	mov	r0, r3
 800bb24:	f7fe fb1e 	bl	800a164 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEdeEv>
 800bb28:	4603      	mov	r3, r0
 800bb2a:	4618      	mov	r0, r3
 800bb2c:	f7fb fc5f 	bl	80073ee <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>
 800bb30:	4603      	mov	r3, r0
 800bb32:	681b      	ldr	r3, [r3, #0]
 800bb34:	613b      	str	r3, [r7, #16]
	  std::__adjust_heap(__first, __parent, __len, _GLIBCXX_MOVE(__value),
 800bb36:	f107 0310 	add.w	r3, r7, #16
 800bb3a:	4618      	mov	r0, r3
 800bb3c:	f7fb fc57 	bl	80073ee <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>
 800bb40:	4603      	mov	r3, r0
 800bb42:	edd3 7a00 	vldr	s15, [r3]
 800bb46:	4623      	mov	r3, r4
 800bb48:	eeb0 0a67 	vmov.f32	s0, s15
 800bb4c:	69ba      	ldr	r2, [r7, #24]
 800bb4e:	69f9      	ldr	r1, [r7, #28]
 800bb50:	68f8      	ldr	r0, [r7, #12]
 800bb52:	f000 fa66 	bl	800c022 <_ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEifNS0_5__ops15_Iter_less_iterEEvT_T0_SA_T1_T2_>
	  if (__parent == 0)
 800bb56:	69fb      	ldr	r3, [r7, #28]
 800bb58:	2b00      	cmp	r3, #0
 800bb5a:	d005      	beq.n	800bb68 <_ZSt11__make_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_RT0_+0xa4>
	  __parent--;
 800bb5c:	69fb      	ldr	r3, [r7, #28]
 800bb5e:	3b01      	subs	r3, #1
 800bb60:	61fb      	str	r3, [r7, #28]
      while (true)
 800bb62:	e7d4      	b.n	800bb0e <_ZSt11__make_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_RT0_+0x4a>
	return;
 800bb64:	bf00      	nop
 800bb66:	e000      	b.n	800bb6a <_ZSt11__make_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_RT0_+0xa6>
	    return;
 800bb68:	bf00      	nop
    }
 800bb6a:	3724      	adds	r7, #36	; 0x24
 800bb6c:	46bd      	mov	sp, r7
 800bb6e:	bd90      	pop	{r4, r7, pc}

0800bb70 <_ZSt10__pop_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_S9_RT0_>:
    __pop_heap(_RandomAccessIterator __first, _RandomAccessIterator __last,
 800bb70:	b5b0      	push	{r4, r5, r7, lr}
 800bb72:	b086      	sub	sp, #24
 800bb74:	af00      	add	r7, sp, #0
 800bb76:	60f8      	str	r0, [r7, #12]
 800bb78:	60b9      	str	r1, [r7, #8]
 800bb7a:	607a      	str	r2, [r7, #4]
 800bb7c:	603b      	str	r3, [r7, #0]
      _ValueType __value = _GLIBCXX_MOVE(*__result);
 800bb7e:	1d3b      	adds	r3, r7, #4
 800bb80:	4618      	mov	r0, r3
 800bb82:	f7fe faef 	bl	800a164 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEdeEv>
 800bb86:	4603      	mov	r3, r0
 800bb88:	4618      	mov	r0, r3
 800bb8a:	f7fb fc30 	bl	80073ee <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>
 800bb8e:	4603      	mov	r3, r0
 800bb90:	681b      	ldr	r3, [r3, #0]
 800bb92:	617b      	str	r3, [r7, #20]
      *__result = _GLIBCXX_MOVE(*__first);
 800bb94:	f107 030c 	add.w	r3, r7, #12
 800bb98:	4618      	mov	r0, r3
 800bb9a:	f7fe fae3 	bl	800a164 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEdeEv>
 800bb9e:	4603      	mov	r3, r0
 800bba0:	4618      	mov	r0, r3
 800bba2:	f7fb fc24 	bl	80073ee <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>
 800bba6:	4603      	mov	r3, r0
 800bba8:	681c      	ldr	r4, [r3, #0]
 800bbaa:	1d3b      	adds	r3, r7, #4
 800bbac:	4618      	mov	r0, r3
 800bbae:	f7fe fad9 	bl	800a164 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEdeEv>
 800bbb2:	4603      	mov	r3, r0
 800bbb4:	601c      	str	r4, [r3, #0]
			 _DistanceType(__last - __first),
 800bbb6:	f107 020c 	add.w	r2, r7, #12
 800bbba:	f107 0308 	add.w	r3, r7, #8
 800bbbe:	4611      	mov	r1, r2
 800bbc0:	4618      	mov	r0, r3
 800bbc2:	f7fc fb38 	bl	8008236 <_ZN9__gnu_cxxmiIPfSt6vectorIfSaIfEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS8_SB_>
 800bbc6:	4604      	mov	r4, r0
			 _GLIBCXX_MOVE(__value), __comp);
 800bbc8:	f107 0314 	add.w	r3, r7, #20
 800bbcc:	4618      	mov	r0, r3
 800bbce:	f7fb fc0e 	bl	80073ee <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>
 800bbd2:	4603      	mov	r3, r0
      std::__adjust_heap(__first, _DistanceType(0),
 800bbd4:	edd3 7a00 	vldr	s15, [r3]
 800bbd8:	462b      	mov	r3, r5
 800bbda:	eeb0 0a67 	vmov.f32	s0, s15
 800bbde:	4622      	mov	r2, r4
 800bbe0:	2100      	movs	r1, #0
 800bbe2:	68f8      	ldr	r0, [r7, #12]
 800bbe4:	f000 fa1d 	bl	800c022 <_ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEifNS0_5__ops15_Iter_less_iterEEvT_T0_SA_T1_T2_>
    }
 800bbe8:	bf00      	nop
 800bbea:	3718      	adds	r7, #24
 800bbec:	46bd      	mov	sp, r7
 800bbee:	bdb0      	pop	{r4, r5, r7, pc}

0800bbf0 <_ZSt9iter_swapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEES6_EvT_T0_>:
    iter_swap(_ForwardIterator1 __a, _ForwardIterator2 __b)
 800bbf0:	b590      	push	{r4, r7, lr}
 800bbf2:	b083      	sub	sp, #12
 800bbf4:	af00      	add	r7, sp, #0
 800bbf6:	6078      	str	r0, [r7, #4]
 800bbf8:	6039      	str	r1, [r7, #0]
      swap(*__a, *__b);
 800bbfa:	1d3b      	adds	r3, r7, #4
 800bbfc:	4618      	mov	r0, r3
 800bbfe:	f7fe fab1 	bl	800a164 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEdeEv>
 800bc02:	4604      	mov	r4, r0
 800bc04:	463b      	mov	r3, r7
 800bc06:	4618      	mov	r0, r3
 800bc08:	f7fe faac 	bl	800a164 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEdeEv>
 800bc0c:	4603      	mov	r3, r0
 800bc0e:	4619      	mov	r1, r3
 800bc10:	4620      	mov	r0, r4
 800bc12:	f000 faae 	bl	800c172 <_ZSt4swapIfENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS4_ESt18is_move_assignableIS4_EEE5valueEvE4typeERS4_SE_>
    }
 800bc16:	bf00      	nop
 800bc18:	370c      	adds	r7, #12
 800bc1a:	46bd      	mov	sp, r7
 800bc1c:	bd90      	pop	{r4, r7, pc}

0800bc1e <_ZSt23__copy_move_backward_a1ILb1EPfS0_ET1_T0_S2_S1_>:
    __copy_move_backward_a1(_BI1 __first, _BI1 __last, _BI2 __result)
 800bc1e:	b580      	push	{r7, lr}
 800bc20:	b084      	sub	sp, #16
 800bc22:	af00      	add	r7, sp, #0
 800bc24:	60f8      	str	r0, [r7, #12]
 800bc26:	60b9      	str	r1, [r7, #8]
 800bc28:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_backward_a2<_IsMove>(__first, __last, __result); }
 800bc2a:	687a      	ldr	r2, [r7, #4]
 800bc2c:	68b9      	ldr	r1, [r7, #8]
 800bc2e:	68f8      	ldr	r0, [r7, #12]
 800bc30:	f000 fabe 	bl	800c1b0 <_ZSt23__copy_move_backward_a2ILb1EPfS0_ET1_T0_S2_S1_>
 800bc34:	4603      	mov	r3, r0
 800bc36:	4618      	mov	r0, r3
 800bc38:	3710      	adds	r7, #16
 800bc3a:	46bd      	mov	sp, r7
 800bc3c:	bd80      	pop	{r7, pc}

0800bc3e <_ZSt13__copy_move_aILb0EN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEEPfET1_T0_SA_S9_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 800bc3e:	b5b0      	push	{r4, r5, r7, lr}
 800bc40:	b084      	sub	sp, #16
 800bc42:	af00      	add	r7, sp, #0
 800bc44:	60f8      	str	r0, [r7, #12]
 800bc46:	60b9      	str	r1, [r7, #8]
 800bc48:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 800bc4a:	68f8      	ldr	r0, [r7, #12]
 800bc4c:	f7fe fd00 	bl	800a650 <_ZSt12__niter_baseIPKfSt6vectorIfSaIfEEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>
 800bc50:	4604      	mov	r4, r0
 800bc52:	68b8      	ldr	r0, [r7, #8]
 800bc54:	f7fe fcfc 	bl	800a650 <_ZSt12__niter_baseIPKfSt6vectorIfSaIfEEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>
 800bc58:	4605      	mov	r5, r0
 800bc5a:	687b      	ldr	r3, [r7, #4]
 800bc5c:	4618      	mov	r0, r3
 800bc5e:	f7fd fae8 	bl	8009232 <_ZSt12__niter_baseIPfET_S1_>
 800bc62:	4603      	mov	r3, r0
 800bc64:	461a      	mov	r2, r3
 800bc66:	4629      	mov	r1, r5
 800bc68:	4620      	mov	r0, r4
 800bc6a:	f7fe fd0d 	bl	800a688 <_ZSt14__copy_move_a1ILb0EPKfPfET1_T0_S4_S3_>
 800bc6e:	4602      	mov	r2, r0
 800bc70:	1d3b      	adds	r3, r7, #4
 800bc72:	4611      	mov	r1, r2
 800bc74:	4618      	mov	r0, r3
 800bc76:	f7fd faf7 	bl	8009268 <_ZSt12__niter_wrapIPfET_RKS1_S1_>
 800bc7a:	4603      	mov	r3, r0
    }
 800bc7c:	4618      	mov	r0, r3
 800bc7e:	3710      	adds	r7, #16
 800bc80:	46bd      	mov	sp, r7
 800bc82:	bdb0      	pop	{r4, r5, r7, pc}

0800bc84 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPKfPfEET0_T_S7_S6_>:
	__copy_m(_II __first, _II __last, _OI __result)
 800bc84:	b480      	push	{r7}
 800bc86:	b087      	sub	sp, #28
 800bc88:	af00      	add	r7, sp, #0
 800bc8a:	60f8      	str	r0, [r7, #12]
 800bc8c:	60b9      	str	r1, [r7, #8]
 800bc8e:	607a      	str	r2, [r7, #4]
	  for(_Distance __n = __last - __first; __n > 0; --__n)
 800bc90:	68ba      	ldr	r2, [r7, #8]
 800bc92:	68fb      	ldr	r3, [r7, #12]
 800bc94:	1ad3      	subs	r3, r2, r3
 800bc96:	109b      	asrs	r3, r3, #2
 800bc98:	617b      	str	r3, [r7, #20]
 800bc9a:	e00c      	b.n	800bcb6 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPKfPfEET0_T_S7_S6_+0x32>
	      *__result = *__first;
 800bc9c:	68fb      	ldr	r3, [r7, #12]
 800bc9e:	681a      	ldr	r2, [r3, #0]
 800bca0:	687b      	ldr	r3, [r7, #4]
 800bca2:	601a      	str	r2, [r3, #0]
	      ++__first;
 800bca4:	68fb      	ldr	r3, [r7, #12]
 800bca6:	3304      	adds	r3, #4
 800bca8:	60fb      	str	r3, [r7, #12]
	      ++__result;
 800bcaa:	687b      	ldr	r3, [r7, #4]
 800bcac:	3304      	adds	r3, #4
 800bcae:	607b      	str	r3, [r7, #4]
	  for(_Distance __n = __last - __first; __n > 0; --__n)
 800bcb0:	697b      	ldr	r3, [r7, #20]
 800bcb2:	3b01      	subs	r3, #1
 800bcb4:	617b      	str	r3, [r7, #20]
 800bcb6:	697b      	ldr	r3, [r7, #20]
 800bcb8:	2b00      	cmp	r3, #0
 800bcba:	dcef      	bgt.n	800bc9c <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPKfPfEET0_T_S7_S6_+0x18>
	  return __result;
 800bcbc:	687b      	ldr	r3, [r7, #4]
	}
 800bcbe:	4618      	mov	r0, r3
 800bcc0:	371c      	adds	r7, #28
 800bcc2:	46bd      	mov	sp, r7
 800bcc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcc8:	4770      	bx	lr

0800bcca <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPKcSt6vectorIcSaIcEEEEET_S8_>:
    __miter_base(_Iterator __it)
 800bcca:	b480      	push	{r7}
 800bccc:	b083      	sub	sp, #12
 800bcce:	af00      	add	r7, sp, #0
 800bcd0:	6078      	str	r0, [r7, #4]
    { return __it; }
 800bcd2:	687b      	ldr	r3, [r7, #4]
 800bcd4:	4618      	mov	r0, r3
 800bcd6:	370c      	adds	r7, #12
 800bcd8:	46bd      	mov	sp, r7
 800bcda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcde:	4770      	bx	lr

0800bce0 <_ZSt13__copy_move_aILb0EN9__gnu_cxx17__normal_iteratorIPKcSt6vectorIcSaIcEEEEPcET1_T0_SA_S9_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 800bce0:	b5b0      	push	{r4, r5, r7, lr}
 800bce2:	b084      	sub	sp, #16
 800bce4:	af00      	add	r7, sp, #0
 800bce6:	60f8      	str	r0, [r7, #12]
 800bce8:	60b9      	str	r1, [r7, #8]
 800bcea:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 800bcec:	68f8      	ldr	r0, [r7, #12]
 800bcee:	f000 fa7c 	bl	800c1ea <_ZSt12__niter_baseIPKcSt6vectorIcSaIcEEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>
 800bcf2:	4604      	mov	r4, r0
 800bcf4:	68b8      	ldr	r0, [r7, #8]
 800bcf6:	f000 fa78 	bl	800c1ea <_ZSt12__niter_baseIPKcSt6vectorIcSaIcEEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>
 800bcfa:	4605      	mov	r5, r0
 800bcfc:	687b      	ldr	r3, [r7, #4]
 800bcfe:	4618      	mov	r0, r3
 800bd00:	f7fd fe7c 	bl	80099fc <_ZSt12__niter_baseIPcET_S1_>
 800bd04:	4603      	mov	r3, r0
 800bd06:	461a      	mov	r2, r3
 800bd08:	4629      	mov	r1, r5
 800bd0a:	4620      	mov	r0, r4
 800bd0c:	f7fd fe81 	bl	8009a12 <_ZSt14__copy_move_a1ILb0EPKcPcET1_T0_S4_S3_>
 800bd10:	4602      	mov	r2, r0
 800bd12:	1d3b      	adds	r3, r7, #4
 800bd14:	4611      	mov	r1, r2
 800bd16:	4618      	mov	r0, r3
 800bd18:	f7fd fe8b 	bl	8009a32 <_ZSt12__niter_wrapIPcET_RKS1_S1_>
 800bd1c:	4603      	mov	r3, r0
    }
 800bd1e:	4618      	mov	r0, r3
 800bd20:	3710      	adds	r7, #16
 800bd22:	46bd      	mov	sp, r7
 800bd24:	bdb0      	pop	{r4, r5, r7, pc}

0800bd26 <_ZSt10destroy_atIcEvPT_>:
    destroy_at(_Tp* __location)
 800bd26:	b480      	push	{r7}
 800bd28:	b083      	sub	sp, #12
 800bd2a:	af00      	add	r7, sp, #0
 800bd2c:	6078      	str	r0, [r7, #4]
    }
 800bd2e:	bf00      	nop
 800bd30:	370c      	adds	r7, #12
 800bd32:	46bd      	mov	sp, r7
 800bd34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd38:	4770      	bx	lr
	...

0800bd3c <_ZNSt16allocator_traitsISaIN3jlb4EdgeEEE8max_sizeERKS2_>:
      max_size(const allocator_type& __a __attribute__((__unused__))) noexcept
 800bd3c:	b480      	push	{r7}
 800bd3e:	b083      	sub	sp, #12
 800bd40:	af00      	add	r7, sp, #0
 800bd42:	6078      	str	r0, [r7, #4]
	return size_t(-1) / sizeof(value_type);
 800bd44:	4b03      	ldr	r3, [pc, #12]	; (800bd54 <_ZNSt16allocator_traitsISaIN3jlb4EdgeEEE8max_sizeERKS2_+0x18>)
      }
 800bd46:	4618      	mov	r0, r3
 800bd48:	370c      	adds	r7, #12
 800bd4a:	46bd      	mov	sp, r7
 800bd4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd50:	4770      	bx	lr
 800bd52:	bf00      	nop
 800bd54:	0aaaaaaa 	.word	0x0aaaaaaa

0800bd58 <_ZNSt6vectorIN3jlb4EdgeESaIS1_EE11_S_max_sizeERKS2_>:
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 800bd58:	b580      	push	{r7, lr}
 800bd5a:	b084      	sub	sp, #16
 800bd5c:	af00      	add	r7, sp, #0
 800bd5e:	6078      	str	r0, [r7, #4]
	const size_t __diffmax
 800bd60:	4b0a      	ldr	r3, [pc, #40]	; (800bd8c <_ZNSt6vectorIN3jlb4EdgeESaIS1_EE11_S_max_sizeERKS2_+0x34>)
 800bd62:	60fb      	str	r3, [r7, #12]
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 800bd64:	6878      	ldr	r0, [r7, #4]
 800bd66:	f7ff ffe9 	bl	800bd3c <_ZNSt16allocator_traitsISaIN3jlb4EdgeEEE8max_sizeERKS2_>
 800bd6a:	4603      	mov	r3, r0
 800bd6c:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 800bd6e:	f107 0208 	add.w	r2, r7, #8
 800bd72:	f107 030c 	add.w	r3, r7, #12
 800bd76:	4611      	mov	r1, r2
 800bd78:	4618      	mov	r0, r3
 800bd7a:	f7ff f862 	bl	800ae42 <_ZSt3minIjERKT_S2_S2_>
 800bd7e:	4603      	mov	r3, r0
 800bd80:	681b      	ldr	r3, [r3, #0]
      }
 800bd82:	4618      	mov	r0, r3
 800bd84:	3710      	adds	r7, #16
 800bd86:	46bd      	mov	sp, r7
 800bd88:	bd80      	pop	{r7, pc}
 800bd8a:	bf00      	nop
 800bd8c:	05555555 	.word	0x05555555

0800bd90 <_ZSt12__relocate_aIPN3jlb4EdgeES2_SaIS1_EET0_T_S5_S4_RT1_>:
    __relocate_a(_InputIterator __first, _InputIterator __last,
 800bd90:	b5b0      	push	{r4, r5, r7, lr}
 800bd92:	b084      	sub	sp, #16
 800bd94:	af00      	add	r7, sp, #0
 800bd96:	60f8      	str	r0, [r7, #12]
 800bd98:	60b9      	str	r1, [r7, #8]
 800bd9a:	607a      	str	r2, [r7, #4]
 800bd9c:	603b      	str	r3, [r7, #0]
      return __relocate_a_1(std::__niter_base(__first),
 800bd9e:	68f8      	ldr	r0, [r7, #12]
 800bda0:	f000 fa70 	bl	800c284 <_ZSt12__niter_baseIPN3jlb4EdgeEET_S3_>
 800bda4:	4604      	mov	r4, r0
 800bda6:	68b8      	ldr	r0, [r7, #8]
 800bda8:	f000 fa6c 	bl	800c284 <_ZSt12__niter_baseIPN3jlb4EdgeEET_S3_>
 800bdac:	4605      	mov	r5, r0
 800bdae:	6878      	ldr	r0, [r7, #4]
 800bdb0:	f000 fa68 	bl	800c284 <_ZSt12__niter_baseIPN3jlb4EdgeEET_S3_>
 800bdb4:	4602      	mov	r2, r0
 800bdb6:	683b      	ldr	r3, [r7, #0]
 800bdb8:	4629      	mov	r1, r5
 800bdba:	4620      	mov	r0, r4
 800bdbc:	f000 fa6d 	bl	800c29a <_ZSt14__relocate_a_1IPN3jlb4EdgeES2_SaIS1_EET0_T_S5_S4_RT1_>
 800bdc0:	4603      	mov	r3, r0
    }
 800bdc2:	4618      	mov	r0, r3
 800bdc4:	3710      	adds	r7, #16
 800bdc6:	46bd      	mov	sp, r7
 800bdc8:	bdb0      	pop	{r4, r5, r7, pc}

0800bdca <_ZNSt16allocator_traitsISaIN3jlb4EdgeEEE37select_on_container_copy_constructionERKS2_>:
      select_on_container_copy_construction(const allocator_type& __rhs)
 800bdca:	b580      	push	{r7, lr}
 800bdcc:	b082      	sub	sp, #8
 800bdce:	af00      	add	r7, sp, #0
 800bdd0:	6078      	str	r0, [r7, #4]
 800bdd2:	6039      	str	r1, [r7, #0]
      { return __rhs; }
 800bdd4:	6839      	ldr	r1, [r7, #0]
 800bdd6:	6878      	ldr	r0, [r7, #4]
 800bdd8:	f000 fa85 	bl	800c2e6 <_ZNSaIN3jlb4EdgeEEC1ERKS1_>
 800bddc:	6878      	ldr	r0, [r7, #4]
 800bdde:	3708      	adds	r7, #8
 800bde0:	46bd      	mov	sp, r7
 800bde2:	bd80      	pop	{r7, pc}

0800bde4 <_ZNSt12_Vector_baseIN3jlb4EdgeESaIS1_EE12_Vector_implC1ERKS2_>:
	_Vector_impl(_Tp_alloc_type const& __a) _GLIBCXX_NOEXCEPT
 800bde4:	b580      	push	{r7, lr}
 800bde6:	b082      	sub	sp, #8
 800bde8:	af00      	add	r7, sp, #0
 800bdea:	6078      	str	r0, [r7, #4]
 800bdec:	6039      	str	r1, [r7, #0]
	: _Tp_alloc_type(__a)
 800bdee:	6839      	ldr	r1, [r7, #0]
 800bdf0:	6878      	ldr	r0, [r7, #4]
 800bdf2:	f000 fa78 	bl	800c2e6 <_ZNSaIN3jlb4EdgeEEC1ERKS1_>
 800bdf6:	687b      	ldr	r3, [r7, #4]
 800bdf8:	4618      	mov	r0, r3
 800bdfa:	f7fc fb9c 	bl	8008536 <_ZNSt12_Vector_baseIN3jlb4EdgeESaIS1_EE17_Vector_impl_dataC1Ev>
	{ }
 800bdfe:	687b      	ldr	r3, [r7, #4]
 800be00:	4618      	mov	r0, r3
 800be02:	3708      	adds	r7, #8
 800be04:	46bd      	mov	sp, r7
 800be06:	bd80      	pop	{r7, pc}

0800be08 <_ZNSt12_Vector_baseIN3jlb4EdgeESaIS1_EE17_M_create_storageEj>:
      _M_create_storage(size_t __n)
 800be08:	b580      	push	{r7, lr}
 800be0a:	b082      	sub	sp, #8
 800be0c:	af00      	add	r7, sp, #0
 800be0e:	6078      	str	r0, [r7, #4]
 800be10:	6039      	str	r1, [r7, #0]
	this->_M_impl._M_start = this->_M_allocate(__n);
 800be12:	6839      	ldr	r1, [r7, #0]
 800be14:	6878      	ldr	r0, [r7, #4]
 800be16:	f7fe fda7 	bl	800a968 <_ZNSt12_Vector_baseIN3jlb4EdgeESaIS1_EE11_M_allocateEj>
 800be1a:	4602      	mov	r2, r0
 800be1c:	687b      	ldr	r3, [r7, #4]
 800be1e:	601a      	str	r2, [r3, #0]
	this->_M_impl._M_finish = this->_M_impl._M_start;
 800be20:	687b      	ldr	r3, [r7, #4]
 800be22:	681a      	ldr	r2, [r3, #0]
 800be24:	687b      	ldr	r3, [r7, #4]
 800be26:	605a      	str	r2, [r3, #4]
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 800be28:	687b      	ldr	r3, [r7, #4]
 800be2a:	6819      	ldr	r1, [r3, #0]
 800be2c:	683a      	ldr	r2, [r7, #0]
 800be2e:	4613      	mov	r3, r2
 800be30:	005b      	lsls	r3, r3, #1
 800be32:	4413      	add	r3, r2
 800be34:	00db      	lsls	r3, r3, #3
 800be36:	18ca      	adds	r2, r1, r3
 800be38:	687b      	ldr	r3, [r7, #4]
 800be3a:	609a      	str	r2, [r3, #8]
      }
 800be3c:	bf00      	nop
 800be3e:	3708      	adds	r7, #8
 800be40:	46bd      	mov	sp, r7
 800be42:	bd80      	pop	{r7, pc}

0800be44 <_ZN9__gnu_cxx17__normal_iteratorIPKN3jlb4EdgeESt6vectorIS2_SaIS2_EEEC1ERKS4_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 800be44:	b480      	push	{r7}
 800be46:	b083      	sub	sp, #12
 800be48:	af00      	add	r7, sp, #0
 800be4a:	6078      	str	r0, [r7, #4]
 800be4c:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 800be4e:	683b      	ldr	r3, [r7, #0]
 800be50:	681a      	ldr	r2, [r3, #0]
 800be52:	687b      	ldr	r3, [r7, #4]
 800be54:	601a      	str	r2, [r3, #0]
 800be56:	687b      	ldr	r3, [r7, #4]
 800be58:	4618      	mov	r0, r3
 800be5a:	370c      	adds	r7, #12
 800be5c:	46bd      	mov	sp, r7
 800be5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be62:	4770      	bx	lr

0800be64 <_ZSt18uninitialized_copyIN9__gnu_cxx17__normal_iteratorIPKN3jlb4EdgeESt6vectorIS3_SaIS3_EEEEPS3_ET0_T_SC_SB_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 800be64:	b580      	push	{r7, lr}
 800be66:	b086      	sub	sp, #24
 800be68:	af00      	add	r7, sp, #0
 800be6a:	60f8      	str	r0, [r7, #12]
 800be6c:	60b9      	str	r1, [r7, #8]
 800be6e:	607a      	str	r2, [r7, #4]
      const bool __assignable = is_assignable<_RefType2, _RefType1>::value;
 800be70:	2301      	movs	r3, #1
 800be72:	75fb      	strb	r3, [r7, #23]
	__uninit_copy(__first, __last, __result);
 800be74:	687a      	ldr	r2, [r7, #4]
 800be76:	68b9      	ldr	r1, [r7, #8]
 800be78:	68f8      	ldr	r0, [r7, #12]
 800be7a:	f000 fa5e 	bl	800c33a <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIN9__gnu_cxx17__normal_iteratorIPKN3jlb4EdgeESt6vectorIS5_SaIS5_EEEEPS5_EET0_T_SE_SD_>
 800be7e:	4603      	mov	r3, r0
    }
 800be80:	4618      	mov	r0, r3
 800be82:	3718      	adds	r7, #24
 800be84:	46bd      	mov	sp, r7
 800be86:	bd80      	pop	{r7, pc}

0800be88 <_ZNSt16allocator_traitsISaIN3jlb4NodeEEE8max_sizeERKS2_>:
      max_size(const allocator_type& __a __attribute__((__unused__))) noexcept
 800be88:	b480      	push	{r7}
 800be8a:	b083      	sub	sp, #12
 800be8c:	af00      	add	r7, sp, #0
 800be8e:	6078      	str	r0, [r7, #4]
	return size_t(-1) / sizeof(value_type);
 800be90:	4b03      	ldr	r3, [pc, #12]	; (800bea0 <_ZNSt16allocator_traitsISaIN3jlb4NodeEEE8max_sizeERKS2_+0x18>)
      }
 800be92:	4618      	mov	r0, r3
 800be94:	370c      	adds	r7, #12
 800be96:	46bd      	mov	sp, r7
 800be98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be9c:	4770      	bx	lr
 800be9e:	bf00      	nop
 800bea0:	0aaaaaaa 	.word	0x0aaaaaaa

0800bea4 <_ZNSt6vectorIN3jlb4NodeESaIS1_EE11_S_max_sizeERKS2_>:
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 800bea4:	b580      	push	{r7, lr}
 800bea6:	b084      	sub	sp, #16
 800bea8:	af00      	add	r7, sp, #0
 800beaa:	6078      	str	r0, [r7, #4]
	const size_t __diffmax
 800beac:	4b0a      	ldr	r3, [pc, #40]	; (800bed8 <_ZNSt6vectorIN3jlb4NodeESaIS1_EE11_S_max_sizeERKS2_+0x34>)
 800beae:	60fb      	str	r3, [r7, #12]
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 800beb0:	6878      	ldr	r0, [r7, #4]
 800beb2:	f7ff ffe9 	bl	800be88 <_ZNSt16allocator_traitsISaIN3jlb4NodeEEE8max_sizeERKS2_>
 800beb6:	4603      	mov	r3, r0
 800beb8:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 800beba:	f107 0208 	add.w	r2, r7, #8
 800bebe:	f107 030c 	add.w	r3, r7, #12
 800bec2:	4611      	mov	r1, r2
 800bec4:	4618      	mov	r0, r3
 800bec6:	f7fe ffbc 	bl	800ae42 <_ZSt3minIjERKT_S2_S2_>
 800beca:	4603      	mov	r3, r0
 800becc:	681b      	ldr	r3, [r3, #0]
      }
 800bece:	4618      	mov	r0, r3
 800bed0:	3710      	adds	r7, #16
 800bed2:	46bd      	mov	sp, r7
 800bed4:	bd80      	pop	{r7, pc}
 800bed6:	bf00      	nop
 800bed8:	05555555 	.word	0x05555555

0800bedc <_ZNKSt12_Vector_baseIN3jlb4NodeESaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 800bedc:	b480      	push	{r7}
 800bede:	b083      	sub	sp, #12
 800bee0:	af00      	add	r7, sp, #0
 800bee2:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 800bee4:	687b      	ldr	r3, [r7, #4]
 800bee6:	4618      	mov	r0, r3
 800bee8:	370c      	adds	r7, #12
 800beea:	46bd      	mov	sp, r7
 800beec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bef0:	4770      	bx	lr

0800bef2 <_ZSt18uninitialized_copyIPKN3jlb4NodeEPS1_ET0_T_S6_S5_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 800bef2:	b580      	push	{r7, lr}
 800bef4:	b086      	sub	sp, #24
 800bef6:	af00      	add	r7, sp, #0
 800bef8:	60f8      	str	r0, [r7, #12]
 800befa:	60b9      	str	r1, [r7, #8]
 800befc:	607a      	str	r2, [r7, #4]
      const bool __assignable = is_assignable<_RefType2, _RefType1>::value;
 800befe:	2301      	movs	r3, #1
 800bf00:	75fb      	strb	r3, [r7, #23]
	__uninit_copy(__first, __last, __result);
 800bf02:	687a      	ldr	r2, [r7, #4]
 800bf04:	68b9      	ldr	r1, [r7, #8]
 800bf06:	68f8      	ldr	r0, [r7, #12]
 800bf08:	f000 fa88 	bl	800c41c <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIPKN3jlb4NodeEPS3_EET0_T_S8_S7_>
 800bf0c:	4603      	mov	r3, r0
    }
 800bf0e:	4618      	mov	r0, r3
 800bf10:	3718      	adds	r7, #24
 800bf12:	46bd      	mov	sp, r7
 800bf14:	bd80      	pop	{r7, pc}

0800bf16 <_ZNK9__gnu_cxx13new_allocatorIcE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 800bf16:	b480      	push	{r7}
 800bf18:	b083      	sub	sp, #12
 800bf1a:	af00      	add	r7, sp, #0
 800bf1c:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 800bf1e:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
      }
 800bf22:	4618      	mov	r0, r3
 800bf24:	370c      	adds	r7, #12
 800bf26:	46bd      	mov	sp, r7
 800bf28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf2c:	4770      	bx	lr

0800bf2e <_ZN9__gnu_cxx13new_allocatorIcE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 800bf2e:	b580      	push	{r7, lr}
 800bf30:	b084      	sub	sp, #16
 800bf32:	af00      	add	r7, sp, #0
 800bf34:	60f8      	str	r0, [r7, #12]
 800bf36:	60b9      	str	r1, [r7, #8]
 800bf38:	607a      	str	r2, [r7, #4]
	if (__builtin_expect(__n > this->_M_max_size(), false))
 800bf3a:	68f8      	ldr	r0, [r7, #12]
 800bf3c:	f7ff ffeb 	bl	800bf16 <_ZNK9__gnu_cxx13new_allocatorIcE11_M_max_sizeEv>
 800bf40:	4602      	mov	r2, r0
 800bf42:	68bb      	ldr	r3, [r7, #8]
 800bf44:	4293      	cmp	r3, r2
 800bf46:	bf8c      	ite	hi
 800bf48:	2301      	movhi	r3, #1
 800bf4a:	2300      	movls	r3, #0
 800bf4c:	b2db      	uxtb	r3, r3
 800bf4e:	2b00      	cmp	r3, #0
 800bf50:	bf14      	ite	ne
 800bf52:	2301      	movne	r3, #1
 800bf54:	2300      	moveq	r3, #0
 800bf56:	b2db      	uxtb	r3, r3
 800bf58:	2b00      	cmp	r3, #0
 800bf5a:	d001      	beq.n	800bf60 <_ZN9__gnu_cxx13new_allocatorIcE8allocateEjPKv+0x32>
	    std::__throw_bad_alloc();
 800bf5c:	f00f fbee 	bl	801b73c <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 800bf60:	68b8      	ldr	r0, [r7, #8]
 800bf62:	f00f fbd7 	bl	801b714 <_Znwj>
 800bf66:	4603      	mov	r3, r0
 800bf68:	bf00      	nop
      }
 800bf6a:	4618      	mov	r0, r3
 800bf6c:	3710      	adds	r7, #16
 800bf6e:	46bd      	mov	sp, r7
 800bf70:	bd80      	pop	{r7, pc}

0800bf72 <_ZSt14__relocate_a_1IffENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS2_E4typeES4_S4_S4_RSaIT0_E>:
    __relocate_a_1(_Tp* __first, _Tp* __last,
 800bf72:	b580      	push	{r7, lr}
 800bf74:	b086      	sub	sp, #24
 800bf76:	af00      	add	r7, sp, #0
 800bf78:	60f8      	str	r0, [r7, #12]
 800bf7a:	60b9      	str	r1, [r7, #8]
 800bf7c:	607a      	str	r2, [r7, #4]
 800bf7e:	603b      	str	r3, [r7, #0]
      ptrdiff_t __count = __last - __first;
 800bf80:	68ba      	ldr	r2, [r7, #8]
 800bf82:	68fb      	ldr	r3, [r7, #12]
 800bf84:	1ad3      	subs	r3, r2, r3
 800bf86:	109b      	asrs	r3, r3, #2
 800bf88:	617b      	str	r3, [r7, #20]
      if (__count > 0)
 800bf8a:	697b      	ldr	r3, [r7, #20]
 800bf8c:	2b00      	cmp	r3, #0
 800bf8e:	dd06      	ble.n	800bf9e <_ZSt14__relocate_a_1IffENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS2_E4typeES4_S4_S4_RSaIT0_E+0x2c>
	__builtin_memmove(__result, __first, __count * sizeof(_Tp));
 800bf90:	697b      	ldr	r3, [r7, #20]
 800bf92:	009b      	lsls	r3, r3, #2
 800bf94:	461a      	mov	r2, r3
 800bf96:	68f9      	ldr	r1, [r7, #12]
 800bf98:	6878      	ldr	r0, [r7, #4]
 800bf9a:	f011 fd72 	bl	801da82 <memmove>
      return __result + __count;
 800bf9e:	697b      	ldr	r3, [r7, #20]
 800bfa0:	009b      	lsls	r3, r3, #2
 800bfa2:	687a      	ldr	r2, [r7, #4]
 800bfa4:	4413      	add	r3, r2
    }
 800bfa6:	4618      	mov	r0, r3
 800bfa8:	3718      	adds	r7, #24
 800bfaa:	46bd      	mov	sp, r7
 800bfac:	bd80      	pop	{r7, pc}

0800bfae <_ZSt14__copy_move_a2ILb0EPPfS1_ET1_T0_S3_S2_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 800bfae:	b580      	push	{r7, lr}
 800bfb0:	b084      	sub	sp, #16
 800bfb2:	af00      	add	r7, sp, #0
 800bfb4:	60f8      	str	r0, [r7, #12]
 800bfb6:	60b9      	str	r1, [r7, #8]
 800bfb8:	607a      	str	r2, [r7, #4]
      if (std::is_constant_evaluated())
 800bfba:	f7f6 f907 	bl	80021cc <_ZSt21is_constant_evaluatedv>
 800bfbe:	4603      	mov	r3, r0
 800bfc0:	2b00      	cmp	r3, #0
 800bfc2:	d006      	beq.n	800bfd2 <_ZSt14__copy_move_a2ILb0EPPfS1_ET1_T0_S3_S2_+0x24>
	  __copy_m(__first, __last, __result);
 800bfc4:	687a      	ldr	r2, [r7, #4]
 800bfc6:	68b9      	ldr	r1, [r7, #8]
 800bfc8:	68f8      	ldr	r0, [r7, #12]
 800bfca:	f000 fa47 	bl	800c45c <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPPfS4_EET0_T_S6_S5_>
 800bfce:	4603      	mov	r3, r0
 800bfd0:	e006      	b.n	800bfe0 <_ZSt14__copy_move_a2ILb0EPPfS1_ET1_T0_S3_S2_+0x32>
			      _Category>::__copy_m(__first, __last, __result);
 800bfd2:	687a      	ldr	r2, [r7, #4]
 800bfd4:	68b9      	ldr	r1, [r7, #8]
 800bfd6:	68f8      	ldr	r0, [r7, #12]
 800bfd8:	f000 fa63 	bl	800c4a2 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIPfEEPT_PKS4_S7_S5_>
 800bfdc:	4603      	mov	r3, r0
 800bfde:	bf00      	nop
    }
 800bfe0:	4618      	mov	r0, r3
 800bfe2:	3710      	adds	r7, #16
 800bfe4:	46bd      	mov	sp, r7
 800bfe6:	bd80      	pop	{r7, pc}

0800bfe8 <_ZSt23__copy_move_backward_a2ILb0EPPfS1_ET1_T0_S3_S2_>:
    __copy_move_backward_a2(_BI1 __first, _BI1 __last, _BI2 __result)
 800bfe8:	b580      	push	{r7, lr}
 800bfea:	b084      	sub	sp, #16
 800bfec:	af00      	add	r7, sp, #0
 800bfee:	60f8      	str	r0, [r7, #12]
 800bff0:	60b9      	str	r1, [r7, #8]
 800bff2:	607a      	str	r2, [r7, #4]
      if (std::is_constant_evaluated())
 800bff4:	f7f6 f8ea 	bl	80021cc <_ZSt21is_constant_evaluatedv>
 800bff8:	4603      	mov	r3, r0
 800bffa:	2b00      	cmp	r3, #0
 800bffc:	d006      	beq.n	800c00c <_ZSt23__copy_move_backward_a2ILb0EPPfS1_ET1_T0_S3_S2_+0x24>
	  __copy_move_b(__first, __last, __result);
 800bffe:	687a      	ldr	r2, [r7, #4]
 800c000:	68b9      	ldr	r1, [r7, #8]
 800c002:	68f8      	ldr	r0, [r7, #12]
 800c004:	f000 fa6a 	bl	800c4dc <_ZNSt20__copy_move_backwardILb0ELb0ESt26random_access_iterator_tagE13__copy_move_bIPPfS4_EET0_T_S6_S5_>
 800c008:	4603      	mov	r3, r0
 800c00a:	e006      	b.n	800c01a <_ZSt23__copy_move_backward_a2ILb0EPPfS1_ET1_T0_S3_S2_+0x32>
				       _Category>::__copy_move_b(__first,
 800c00c:	687a      	ldr	r2, [r7, #4]
 800c00e:	68b9      	ldr	r1, [r7, #8]
 800c010:	68f8      	ldr	r0, [r7, #12]
 800c012:	f000 fa86 	bl	800c522 <_ZNSt20__copy_move_backwardILb0ELb1ESt26random_access_iterator_tagE13__copy_move_bIPfEEPT_PKS4_S7_S5_>
 800c016:	4603      	mov	r3, r0
								 __result);
 800c018:	bf00      	nop
    }
 800c01a:	4618      	mov	r0, r3
 800c01c:	3710      	adds	r7, #16
 800c01e:	46bd      	mov	sp, r7
 800c020:	bd80      	pop	{r7, pc}

0800c022 <_ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEifNS0_5__ops15_Iter_less_iterEEvT_T0_SA_T1_T2_>:
    __adjust_heap(_RandomAccessIterator __first, _Distance __holeIndex,
 800c022:	b590      	push	{r4, r7, lr}
 800c024:	b08f      	sub	sp, #60	; 0x3c
 800c026:	af00      	add	r7, sp, #0
 800c028:	6178      	str	r0, [r7, #20]
 800c02a:	6139      	str	r1, [r7, #16]
 800c02c:	60fa      	str	r2, [r7, #12]
 800c02e:	ed87 0a02 	vstr	s0, [r7, #8]
 800c032:	713b      	strb	r3, [r7, #4]
      const _Distance __topIndex = __holeIndex;
 800c034:	693b      	ldr	r3, [r7, #16]
 800c036:	633b      	str	r3, [r7, #48]	; 0x30
      _Distance __secondChild = __holeIndex;
 800c038:	693b      	ldr	r3, [r7, #16]
 800c03a:	637b      	str	r3, [r7, #52]	; 0x34
      while (__secondChild < (__len - 1) / 2)
 800c03c:	e042      	b.n	800c0c4 <_ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEifNS0_5__ops15_Iter_less_iterEEvT_T0_SA_T1_T2_+0xa2>
	  __secondChild = 2 * (__secondChild + 1);
 800c03e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c040:	3301      	adds	r3, #1
 800c042:	005b      	lsls	r3, r3, #1
 800c044:	637b      	str	r3, [r7, #52]	; 0x34
	  if (__comp(__first + __secondChild,
 800c046:	f107 0314 	add.w	r3, r7, #20
 800c04a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800c04c:	4618      	mov	r0, r3
 800c04e:	f7fe f861 	bl	800a114 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEplEi>
 800c052:	4604      	mov	r4, r0
 800c054:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c056:	1e5a      	subs	r2, r3, #1
 800c058:	f107 0314 	add.w	r3, r7, #20
 800c05c:	4611      	mov	r1, r2
 800c05e:	4618      	mov	r0, r3
 800c060:	f7fe f858 	bl	800a114 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEplEi>
 800c064:	4602      	mov	r2, r0
 800c066:	1d3b      	adds	r3, r7, #4
 800c068:	4621      	mov	r1, r4
 800c06a:	4618      	mov	r0, r3
 800c06c:	f7fe f886 	bl	800a17c <_ZNK9__gnu_cxx5__ops15_Iter_less_iterclINS_17__normal_iteratorIPfSt6vectorIfSaIfEEEES8_EEbT_T0_>
 800c070:	4603      	mov	r3, r0
 800c072:	2b00      	cmp	r3, #0
 800c074:	d002      	beq.n	800c07c <_ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEifNS0_5__ops15_Iter_less_iterEEvT_T0_SA_T1_T2_+0x5a>
	    __secondChild--;
 800c076:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c078:	3b01      	subs	r3, #1
 800c07a:	637b      	str	r3, [r7, #52]	; 0x34
	  *(__first + __holeIndex) = _GLIBCXX_MOVE(*(__first + __secondChild));
 800c07c:	f107 0314 	add.w	r3, r7, #20
 800c080:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800c082:	4618      	mov	r0, r3
 800c084:	f7fe f846 	bl	800a114 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEplEi>
 800c088:	4603      	mov	r3, r0
 800c08a:	623b      	str	r3, [r7, #32]
 800c08c:	f107 0320 	add.w	r3, r7, #32
 800c090:	4618      	mov	r0, r3
 800c092:	f7fe f867 	bl	800a164 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEdeEv>
 800c096:	4603      	mov	r3, r0
 800c098:	4618      	mov	r0, r3
 800c09a:	f7fb f9a8 	bl	80073ee <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>
 800c09e:	4603      	mov	r3, r0
 800c0a0:	681c      	ldr	r4, [r3, #0]
 800c0a2:	f107 0314 	add.w	r3, r7, #20
 800c0a6:	6939      	ldr	r1, [r7, #16]
 800c0a8:	4618      	mov	r0, r3
 800c0aa:	f7fe f833 	bl	800a114 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEplEi>
 800c0ae:	4603      	mov	r3, r0
 800c0b0:	627b      	str	r3, [r7, #36]	; 0x24
 800c0b2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c0b6:	4618      	mov	r0, r3
 800c0b8:	f7fe f854 	bl	800a164 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEdeEv>
 800c0bc:	4603      	mov	r3, r0
 800c0be:	601c      	str	r4, [r3, #0]
	  __holeIndex = __secondChild;
 800c0c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c0c2:	613b      	str	r3, [r7, #16]
      while (__secondChild < (__len - 1) / 2)
 800c0c4:	68fb      	ldr	r3, [r7, #12]
 800c0c6:	3b01      	subs	r3, #1
 800c0c8:	0fda      	lsrs	r2, r3, #31
 800c0ca:	4413      	add	r3, r2
 800c0cc:	105b      	asrs	r3, r3, #1
 800c0ce:	461a      	mov	r2, r3
 800c0d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c0d2:	4293      	cmp	r3, r2
 800c0d4:	dbb3      	blt.n	800c03e <_ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEifNS0_5__ops15_Iter_less_iterEEvT_T0_SA_T1_T2_+0x1c>
      if ((__len & 1) == 0 && __secondChild == (__len - 2) / 2)
 800c0d6:	68fb      	ldr	r3, [r7, #12]
 800c0d8:	f003 0301 	and.w	r3, r3, #1
 800c0dc:	2b00      	cmp	r3, #0
 800c0de:	d133      	bne.n	800c148 <_ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEifNS0_5__ops15_Iter_less_iterEEvT_T0_SA_T1_T2_+0x126>
 800c0e0:	68fb      	ldr	r3, [r7, #12]
 800c0e2:	3b02      	subs	r3, #2
 800c0e4:	0fda      	lsrs	r2, r3, #31
 800c0e6:	4413      	add	r3, r2
 800c0e8:	105b      	asrs	r3, r3, #1
 800c0ea:	461a      	mov	r2, r3
 800c0ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c0ee:	4293      	cmp	r3, r2
 800c0f0:	d12a      	bne.n	800c148 <_ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEifNS0_5__ops15_Iter_less_iterEEvT_T0_SA_T1_T2_+0x126>
	  __secondChild = 2 * (__secondChild + 1);
 800c0f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c0f4:	3301      	adds	r3, #1
 800c0f6:	005b      	lsls	r3, r3, #1
 800c0f8:	637b      	str	r3, [r7, #52]	; 0x34
	  *(__first + __holeIndex) = _GLIBCXX_MOVE(*(__first
 800c0fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c0fc:	1e5a      	subs	r2, r3, #1
 800c0fe:	f107 0314 	add.w	r3, r7, #20
 800c102:	4611      	mov	r1, r2
 800c104:	4618      	mov	r0, r3
 800c106:	f7fe f805 	bl	800a114 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEplEi>
 800c10a:	4603      	mov	r3, r0
 800c10c:	62bb      	str	r3, [r7, #40]	; 0x28
 800c10e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800c112:	4618      	mov	r0, r3
 800c114:	f7fe f826 	bl	800a164 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEdeEv>
 800c118:	4603      	mov	r3, r0
 800c11a:	4618      	mov	r0, r3
 800c11c:	f7fb f967 	bl	80073ee <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>
 800c120:	4603      	mov	r3, r0
 800c122:	681c      	ldr	r4, [r3, #0]
 800c124:	f107 0314 	add.w	r3, r7, #20
 800c128:	6939      	ldr	r1, [r7, #16]
 800c12a:	4618      	mov	r0, r3
 800c12c:	f7fd fff2 	bl	800a114 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEplEi>
 800c130:	4603      	mov	r3, r0
 800c132:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c134:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800c138:	4618      	mov	r0, r3
 800c13a:	f7fe f813 	bl	800a164 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEdeEv>
 800c13e:	4603      	mov	r3, r0
 800c140:	601c      	str	r4, [r3, #0]
	  __holeIndex = __secondChild - 1;
 800c142:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c144:	3b01      	subs	r3, #1
 800c146:	613b      	str	r3, [r7, #16]
		       _GLIBCXX_MOVE(__value), __cmp);
 800c148:	f107 0308 	add.w	r3, r7, #8
 800c14c:	4618      	mov	r0, r3
 800c14e:	f7fb f94e 	bl	80073ee <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>
 800c152:	4603      	mov	r3, r0
      std::__push_heap(__first, __holeIndex, __topIndex,
 800c154:	edd3 7a00 	vldr	s15, [r3]
 800c158:	f107 031c 	add.w	r3, r7, #28
 800c15c:	eeb0 0a67 	vmov.f32	s0, s15
 800c160:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c162:	6939      	ldr	r1, [r7, #16]
 800c164:	6978      	ldr	r0, [r7, #20]
 800c166:	f000 fa1b 	bl	800c5a0 <_ZSt11__push_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEifNS0_5__ops14_Iter_less_valEEvT_T0_SA_T1_RT2_>
    }
 800c16a:	bf00      	nop
 800c16c:	373c      	adds	r7, #60	; 0x3c
 800c16e:	46bd      	mov	sp, r7
 800c170:	bd90      	pop	{r4, r7, pc}

0800c172 <_ZSt4swapIfENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS4_ESt18is_move_assignableIS4_EEE5valueEvE4typeERS4_SE_>:
    swap(_Tp& __a, _Tp& __b)
 800c172:	b580      	push	{r7, lr}
 800c174:	b084      	sub	sp, #16
 800c176:	af00      	add	r7, sp, #0
 800c178:	6078      	str	r0, [r7, #4]
 800c17a:	6039      	str	r1, [r7, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 800c17c:	6878      	ldr	r0, [r7, #4]
 800c17e:	f7fb f936 	bl	80073ee <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>
 800c182:	4603      	mov	r3, r0
 800c184:	681b      	ldr	r3, [r3, #0]
 800c186:	60fb      	str	r3, [r7, #12]
      __a = _GLIBCXX_MOVE(__b);
 800c188:	6838      	ldr	r0, [r7, #0]
 800c18a:	f7fb f930 	bl	80073ee <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>
 800c18e:	4603      	mov	r3, r0
 800c190:	681a      	ldr	r2, [r3, #0]
 800c192:	687b      	ldr	r3, [r7, #4]
 800c194:	601a      	str	r2, [r3, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 800c196:	f107 030c 	add.w	r3, r7, #12
 800c19a:	4618      	mov	r0, r3
 800c19c:	f7fb f927 	bl	80073ee <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>
 800c1a0:	4603      	mov	r3, r0
 800c1a2:	681a      	ldr	r2, [r3, #0]
 800c1a4:	683b      	ldr	r3, [r7, #0]
 800c1a6:	601a      	str	r2, [r3, #0]
    }
 800c1a8:	bf00      	nop
 800c1aa:	3710      	adds	r7, #16
 800c1ac:	46bd      	mov	sp, r7
 800c1ae:	bd80      	pop	{r7, pc}

0800c1b0 <_ZSt23__copy_move_backward_a2ILb1EPfS0_ET1_T0_S2_S1_>:
    __copy_move_backward_a2(_BI1 __first, _BI1 __last, _BI2 __result)
 800c1b0:	b580      	push	{r7, lr}
 800c1b2:	b084      	sub	sp, #16
 800c1b4:	af00      	add	r7, sp, #0
 800c1b6:	60f8      	str	r0, [r7, #12]
 800c1b8:	60b9      	str	r1, [r7, #8]
 800c1ba:	607a      	str	r2, [r7, #4]
      if (std::is_constant_evaluated())
 800c1bc:	f7f6 f806 	bl	80021cc <_ZSt21is_constant_evaluatedv>
 800c1c0:	4603      	mov	r3, r0
 800c1c2:	2b00      	cmp	r3, #0
 800c1c4:	d006      	beq.n	800c1d4 <_ZSt23__copy_move_backward_a2ILb1EPfS0_ET1_T0_S2_S1_+0x24>
	  __copy_move_b(__first, __last, __result);
 800c1c6:	687a      	ldr	r2, [r7, #4]
 800c1c8:	68b9      	ldr	r1, [r7, #8]
 800c1ca:	68f8      	ldr	r0, [r7, #12]
 800c1cc:	f000 fa55 	bl	800c67a <_ZNSt20__copy_move_backwardILb1ELb0ESt26random_access_iterator_tagE13__copy_move_bIPfS3_EET0_T_S5_S4_>
 800c1d0:	4603      	mov	r3, r0
 800c1d2:	e006      	b.n	800c1e2 <_ZSt23__copy_move_backward_a2ILb1EPfS0_ET1_T0_S2_S1_+0x32>
				       _Category>::__copy_move_b(__first,
 800c1d4:	687a      	ldr	r2, [r7, #4]
 800c1d6:	68b9      	ldr	r1, [r7, #8]
 800c1d8:	68f8      	ldr	r0, [r7, #12]
 800c1da:	f000 fa72 	bl	800c6c2 <_ZNSt20__copy_move_backwardILb1ELb1ESt26random_access_iterator_tagE13__copy_move_bIfEEPT_PKS3_S6_S4_>
 800c1de:	4603      	mov	r3, r0
								 __result);
 800c1e0:	bf00      	nop
    }
 800c1e2:	4618      	mov	r0, r3
 800c1e4:	3710      	adds	r7, #16
 800c1e6:	46bd      	mov	sp, r7
 800c1e8:	bd80      	pop	{r7, pc}

0800c1ea <_ZSt12__niter_baseIPKcSt6vectorIcSaIcEEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>:
    __niter_base(__gnu_cxx::__normal_iterator<_Iterator, _Container> __it)
 800c1ea:	b580      	push	{r7, lr}
 800c1ec:	b082      	sub	sp, #8
 800c1ee:	af00      	add	r7, sp, #0
 800c1f0:	6078      	str	r0, [r7, #4]
    { return __it.base(); }
 800c1f2:	1d3b      	adds	r3, r7, #4
 800c1f4:	4618      	mov	r0, r3
 800c1f6:	f7fd fc47 	bl	8009a88 <_ZNK9__gnu_cxx17__normal_iteratorIPKcSt6vectorIcSaIcEEE4baseEv>
 800c1fa:	4603      	mov	r3, r0
 800c1fc:	681b      	ldr	r3, [r3, #0]
 800c1fe:	4618      	mov	r0, r3
 800c200:	3708      	adds	r7, #8
 800c202:	46bd      	mov	sp, r7
 800c204:	bd80      	pop	{r7, pc}
	...

0800c208 <_ZNK9__gnu_cxx13new_allocatorIN3jlb4EdgeEE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 800c208:	b480      	push	{r7}
 800c20a:	b083      	sub	sp, #12
 800c20c:	af00      	add	r7, sp, #0
 800c20e:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 800c210:	4b03      	ldr	r3, [pc, #12]	; (800c220 <_ZNK9__gnu_cxx13new_allocatorIN3jlb4EdgeEE11_M_max_sizeEv+0x18>)
      }
 800c212:	4618      	mov	r0, r3
 800c214:	370c      	adds	r7, #12
 800c216:	46bd      	mov	sp, r7
 800c218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c21c:	4770      	bx	lr
 800c21e:	bf00      	nop
 800c220:	05555555 	.word	0x05555555

0800c224 <_ZN9__gnu_cxx13new_allocatorIN3jlb4EdgeEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 800c224:	b580      	push	{r7, lr}
 800c226:	b084      	sub	sp, #16
 800c228:	af00      	add	r7, sp, #0
 800c22a:	60f8      	str	r0, [r7, #12]
 800c22c:	60b9      	str	r1, [r7, #8]
 800c22e:	607a      	str	r2, [r7, #4]
	if (__builtin_expect(__n > this->_M_max_size(), false))
 800c230:	68f8      	ldr	r0, [r7, #12]
 800c232:	f7ff ffe9 	bl	800c208 <_ZNK9__gnu_cxx13new_allocatorIN3jlb4EdgeEE11_M_max_sizeEv>
 800c236:	4602      	mov	r2, r0
 800c238:	68bb      	ldr	r3, [r7, #8]
 800c23a:	4293      	cmp	r3, r2
 800c23c:	bf8c      	ite	hi
 800c23e:	2301      	movhi	r3, #1
 800c240:	2300      	movls	r3, #0
 800c242:	b2db      	uxtb	r3, r3
 800c244:	2b00      	cmp	r3, #0
 800c246:	bf14      	ite	ne
 800c248:	2301      	movne	r3, #1
 800c24a:	2300      	moveq	r3, #0
 800c24c:	b2db      	uxtb	r3, r3
 800c24e:	2b00      	cmp	r3, #0
 800c250:	d007      	beq.n	800c262 <_ZN9__gnu_cxx13new_allocatorIN3jlb4EdgeEE8allocateEjPKv+0x3e>
	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
 800c252:	68bb      	ldr	r3, [r7, #8]
 800c254:	4a0a      	ldr	r2, [pc, #40]	; (800c280 <_ZN9__gnu_cxx13new_allocatorIN3jlb4EdgeEE8allocateEjPKv+0x5c>)
 800c256:	4293      	cmp	r3, r2
 800c258:	d901      	bls.n	800c25e <_ZN9__gnu_cxx13new_allocatorIN3jlb4EdgeEE8allocateEjPKv+0x3a>
	      std::__throw_bad_array_new_length();
 800c25a:	f00f fa72 	bl	801b742 <_ZSt28__throw_bad_array_new_lengthv>
	    std::__throw_bad_alloc();
 800c25e:	f00f fa6d 	bl	801b73c <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 800c262:	68ba      	ldr	r2, [r7, #8]
 800c264:	4613      	mov	r3, r2
 800c266:	005b      	lsls	r3, r3, #1
 800c268:	4413      	add	r3, r2
 800c26a:	00db      	lsls	r3, r3, #3
 800c26c:	4618      	mov	r0, r3
 800c26e:	f00f fa51 	bl	801b714 <_Znwj>
 800c272:	4603      	mov	r3, r0
 800c274:	bf00      	nop
      }
 800c276:	4618      	mov	r0, r3
 800c278:	3710      	adds	r7, #16
 800c27a:	46bd      	mov	sp, r7
 800c27c:	bd80      	pop	{r7, pc}
 800c27e:	bf00      	nop
 800c280:	0aaaaaaa 	.word	0x0aaaaaaa

0800c284 <_ZSt12__niter_baseIPN3jlb4EdgeEET_S3_>:
    __niter_base(_Iterator __it)
 800c284:	b480      	push	{r7}
 800c286:	b083      	sub	sp, #12
 800c288:	af00      	add	r7, sp, #0
 800c28a:	6078      	str	r0, [r7, #4]
    { return __it; }
 800c28c:	687b      	ldr	r3, [r7, #4]
 800c28e:	4618      	mov	r0, r3
 800c290:	370c      	adds	r7, #12
 800c292:	46bd      	mov	sp, r7
 800c294:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c298:	4770      	bx	lr

0800c29a <_ZSt14__relocate_a_1IPN3jlb4EdgeES2_SaIS1_EET0_T_S5_S4_RT1_>:
    __relocate_a_1(_InputIterator __first, _InputIterator __last,
 800c29a:	b590      	push	{r4, r7, lr}
 800c29c:	b087      	sub	sp, #28
 800c29e:	af00      	add	r7, sp, #0
 800c2a0:	60f8      	str	r0, [r7, #12]
 800c2a2:	60b9      	str	r1, [r7, #8]
 800c2a4:	607a      	str	r2, [r7, #4]
 800c2a6:	603b      	str	r3, [r7, #0]
      _ForwardIterator __cur = __result;
 800c2a8:	687b      	ldr	r3, [r7, #4]
 800c2aa:	617b      	str	r3, [r7, #20]
      for (; __first != __last; ++__first, (void)++__cur)
 800c2ac:	e012      	b.n	800c2d4 <_ZSt14__relocate_a_1IPN3jlb4EdgeES2_SaIS1_EET0_T_S5_S4_RT1_+0x3a>
	std::__relocate_object_a(std::__addressof(*__cur),
 800c2ae:	6978      	ldr	r0, [r7, #20]
 800c2b0:	f7ff f90f 	bl	800b4d2 <_ZSt11__addressofIN3jlb4EdgeEEPT_RS2_>
 800c2b4:	4604      	mov	r4, r0
 800c2b6:	68f8      	ldr	r0, [r7, #12]
 800c2b8:	f7ff f90b 	bl	800b4d2 <_ZSt11__addressofIN3jlb4EdgeEEPT_RS2_>
 800c2bc:	4603      	mov	r3, r0
 800c2be:	683a      	ldr	r2, [r7, #0]
 800c2c0:	4619      	mov	r1, r3
 800c2c2:	4620      	mov	r0, r4
 800c2c4:	f000 fa1f 	bl	800c706 <_ZSt19__relocate_object_aIN3jlb4EdgeES1_SaIS1_EEvPT_PT0_RT1_>
      for (; __first != __last; ++__first, (void)++__cur)
 800c2c8:	68fb      	ldr	r3, [r7, #12]
 800c2ca:	3318      	adds	r3, #24
 800c2cc:	60fb      	str	r3, [r7, #12]
 800c2ce:	697b      	ldr	r3, [r7, #20]
 800c2d0:	3318      	adds	r3, #24
 800c2d2:	617b      	str	r3, [r7, #20]
 800c2d4:	68fa      	ldr	r2, [r7, #12]
 800c2d6:	68bb      	ldr	r3, [r7, #8]
 800c2d8:	429a      	cmp	r2, r3
 800c2da:	d1e8      	bne.n	800c2ae <_ZSt14__relocate_a_1IPN3jlb4EdgeES2_SaIS1_EET0_T_S5_S4_RT1_+0x14>
      return __cur;
 800c2dc:	697b      	ldr	r3, [r7, #20]
    }
 800c2de:	4618      	mov	r0, r3
 800c2e0:	371c      	adds	r7, #28
 800c2e2:	46bd      	mov	sp, r7
 800c2e4:	bd90      	pop	{r4, r7, pc}

0800c2e6 <_ZNSaIN3jlb4EdgeEEC1ERKS1_>:
      allocator(const allocator& __a) _GLIBCXX_NOTHROW
 800c2e6:	b580      	push	{r7, lr}
 800c2e8:	b082      	sub	sp, #8
 800c2ea:	af00      	add	r7, sp, #0
 800c2ec:	6078      	str	r0, [r7, #4]
 800c2ee:	6039      	str	r1, [r7, #0]
      : __allocator_base<_Tp>(__a) { }
 800c2f0:	6839      	ldr	r1, [r7, #0]
 800c2f2:	6878      	ldr	r0, [r7, #4]
 800c2f4:	f000 fa22 	bl	800c73c <_ZN9__gnu_cxx13new_allocatorIN3jlb4EdgeEEC1ERKS3_>
 800c2f8:	687b      	ldr	r3, [r7, #4]
 800c2fa:	4618      	mov	r0, r3
 800c2fc:	3708      	adds	r7, #8
 800c2fe:	46bd      	mov	sp, r7
 800c300:	bd80      	pop	{r7, pc}

0800c302 <_ZNK9__gnu_cxx17__normal_iteratorIPKN3jlb4EdgeESt6vectorIS2_SaIS2_EEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 800c302:	b480      	push	{r7}
 800c304:	b083      	sub	sp, #12
 800c306:	af00      	add	r7, sp, #0
 800c308:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 800c30a:	687b      	ldr	r3, [r7, #4]
 800c30c:	4618      	mov	r0, r3
 800c30e:	370c      	adds	r7, #12
 800c310:	46bd      	mov	sp, r7
 800c312:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c316:	4770      	bx	lr

0800c318 <_ZN9__gnu_cxx17__normal_iteratorIPKN3jlb4EdgeESt6vectorIS2_SaIS2_EEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 800c318:	b480      	push	{r7}
 800c31a:	b083      	sub	sp, #12
 800c31c:	af00      	add	r7, sp, #0
 800c31e:	6078      	str	r0, [r7, #4]
	++_M_current;
 800c320:	687b      	ldr	r3, [r7, #4]
 800c322:	681b      	ldr	r3, [r3, #0]
 800c324:	f103 0218 	add.w	r2, r3, #24
 800c328:	687b      	ldr	r3, [r7, #4]
 800c32a:	601a      	str	r2, [r3, #0]
	return *this;
 800c32c:	687b      	ldr	r3, [r7, #4]
      }
 800c32e:	4618      	mov	r0, r3
 800c330:	370c      	adds	r7, #12
 800c332:	46bd      	mov	sp, r7
 800c334:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c338:	4770      	bx	lr

0800c33a <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIN9__gnu_cxx17__normal_iteratorIPKN3jlb4EdgeESt6vectorIS5_SaIS5_EEEEPS5_EET0_T_SE_SD_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 800c33a:	b590      	push	{r4, r7, lr}
 800c33c:	b087      	sub	sp, #28
 800c33e:	af00      	add	r7, sp, #0
 800c340:	60f8      	str	r0, [r7, #12]
 800c342:	60b9      	str	r1, [r7, #8]
 800c344:	607a      	str	r2, [r7, #4]
	  _ForwardIterator __cur = __result;
 800c346:	687b      	ldr	r3, [r7, #4]
 800c348:	617b      	str	r3, [r7, #20]
	      for (; __first != __last; ++__first, (void)++__cur)
 800c34a:	e015      	b.n	800c378 <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIN9__gnu_cxx17__normal_iteratorIPKN3jlb4EdgeESt6vectorIS5_SaIS5_EEEEPS5_EET0_T_SE_SD_+0x3e>
		std::_Construct(std::__addressof(*__cur), *__first);
 800c34c:	6978      	ldr	r0, [r7, #20]
 800c34e:	f7ff f8c0 	bl	800b4d2 <_ZSt11__addressofIN3jlb4EdgeEEPT_RS2_>
 800c352:	4604      	mov	r4, r0
 800c354:	f107 030c 	add.w	r3, r7, #12
 800c358:	4618      	mov	r0, r3
 800c35a:	f000 fa13 	bl	800c784 <_ZNK9__gnu_cxx17__normal_iteratorIPKN3jlb4EdgeESt6vectorIS2_SaIS2_EEEdeEv>
 800c35e:	4603      	mov	r3, r0
 800c360:	4619      	mov	r1, r3
 800c362:	4620      	mov	r0, r4
 800c364:	f000 fa39 	bl	800c7da <_ZSt10_ConstructIN3jlb4EdgeEJRKS1_EEvPT_DpOT0_>
	      for (; __first != __last; ++__first, (void)++__cur)
 800c368:	f107 030c 	add.w	r3, r7, #12
 800c36c:	4618      	mov	r0, r3
 800c36e:	f7ff ffd3 	bl	800c318 <_ZN9__gnu_cxx17__normal_iteratorIPKN3jlb4EdgeESt6vectorIS2_SaIS2_EEEppEv>
 800c372:	697b      	ldr	r3, [r7, #20]
 800c374:	3318      	adds	r3, #24
 800c376:	617b      	str	r3, [r7, #20]
 800c378:	f107 0208 	add.w	r2, r7, #8
 800c37c:	f107 030c 	add.w	r3, r7, #12
 800c380:	4611      	mov	r1, r2
 800c382:	4618      	mov	r0, r3
 800c384:	f000 f9e6 	bl	800c754 <_ZN9__gnu_cxxeqIPKN3jlb4EdgeESt6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T0_EESD_>
 800c388:	4603      	mov	r3, r0
 800c38a:	f083 0301 	eor.w	r3, r3, #1
 800c38e:	b2db      	uxtb	r3, r3
 800c390:	2b00      	cmp	r3, #0
 800c392:	d1db      	bne.n	800c34c <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIN9__gnu_cxx17__normal_iteratorIPKN3jlb4EdgeESt6vectorIS5_SaIS5_EEEEPS5_EET0_T_SE_SD_+0x12>
	      return __cur;
 800c394:	697b      	ldr	r3, [r7, #20]
	}
 800c396:	4618      	mov	r0, r3
 800c398:	371c      	adds	r7, #28
 800c39a:	46bd      	mov	sp, r7
 800c39c:	bd90      	pop	{r4, r7, pc}
	...

0800c3a0 <_ZNK9__gnu_cxx13new_allocatorIN3jlb4NodeEE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 800c3a0:	b480      	push	{r7}
 800c3a2:	b083      	sub	sp, #12
 800c3a4:	af00      	add	r7, sp, #0
 800c3a6:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 800c3a8:	4b03      	ldr	r3, [pc, #12]	; (800c3b8 <_ZNK9__gnu_cxx13new_allocatorIN3jlb4NodeEE11_M_max_sizeEv+0x18>)
      }
 800c3aa:	4618      	mov	r0, r3
 800c3ac:	370c      	adds	r7, #12
 800c3ae:	46bd      	mov	sp, r7
 800c3b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3b4:	4770      	bx	lr
 800c3b6:	bf00      	nop
 800c3b8:	05555555 	.word	0x05555555

0800c3bc <_ZN9__gnu_cxx13new_allocatorIN3jlb4NodeEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 800c3bc:	b580      	push	{r7, lr}
 800c3be:	b084      	sub	sp, #16
 800c3c0:	af00      	add	r7, sp, #0
 800c3c2:	60f8      	str	r0, [r7, #12]
 800c3c4:	60b9      	str	r1, [r7, #8]
 800c3c6:	607a      	str	r2, [r7, #4]
	if (__builtin_expect(__n > this->_M_max_size(), false))
 800c3c8:	68f8      	ldr	r0, [r7, #12]
 800c3ca:	f7ff ffe9 	bl	800c3a0 <_ZNK9__gnu_cxx13new_allocatorIN3jlb4NodeEE11_M_max_sizeEv>
 800c3ce:	4602      	mov	r2, r0
 800c3d0:	68bb      	ldr	r3, [r7, #8]
 800c3d2:	4293      	cmp	r3, r2
 800c3d4:	bf8c      	ite	hi
 800c3d6:	2301      	movhi	r3, #1
 800c3d8:	2300      	movls	r3, #0
 800c3da:	b2db      	uxtb	r3, r3
 800c3dc:	2b00      	cmp	r3, #0
 800c3de:	bf14      	ite	ne
 800c3e0:	2301      	movne	r3, #1
 800c3e2:	2300      	moveq	r3, #0
 800c3e4:	b2db      	uxtb	r3, r3
 800c3e6:	2b00      	cmp	r3, #0
 800c3e8:	d007      	beq.n	800c3fa <_ZN9__gnu_cxx13new_allocatorIN3jlb4NodeEE8allocateEjPKv+0x3e>
	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
 800c3ea:	68bb      	ldr	r3, [r7, #8]
 800c3ec:	4a0a      	ldr	r2, [pc, #40]	; (800c418 <_ZN9__gnu_cxx13new_allocatorIN3jlb4NodeEE8allocateEjPKv+0x5c>)
 800c3ee:	4293      	cmp	r3, r2
 800c3f0:	d901      	bls.n	800c3f6 <_ZN9__gnu_cxx13new_allocatorIN3jlb4NodeEE8allocateEjPKv+0x3a>
	      std::__throw_bad_array_new_length();
 800c3f2:	f00f f9a6 	bl	801b742 <_ZSt28__throw_bad_array_new_lengthv>
	    std::__throw_bad_alloc();
 800c3f6:	f00f f9a1 	bl	801b73c <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 800c3fa:	68ba      	ldr	r2, [r7, #8]
 800c3fc:	4613      	mov	r3, r2
 800c3fe:	005b      	lsls	r3, r3, #1
 800c400:	4413      	add	r3, r2
 800c402:	00db      	lsls	r3, r3, #3
 800c404:	4618      	mov	r0, r3
 800c406:	f00f f985 	bl	801b714 <_Znwj>
 800c40a:	4603      	mov	r3, r0
 800c40c:	bf00      	nop
      }
 800c40e:	4618      	mov	r0, r3
 800c410:	3710      	adds	r7, #16
 800c412:	46bd      	mov	sp, r7
 800c414:	bd80      	pop	{r7, pc}
 800c416:	bf00      	nop
 800c418:	0aaaaaaa 	.word	0x0aaaaaaa

0800c41c <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIPKN3jlb4NodeEPS3_EET0_T_S8_S7_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 800c41c:	b580      	push	{r7, lr}
 800c41e:	b086      	sub	sp, #24
 800c420:	af00      	add	r7, sp, #0
 800c422:	60f8      	str	r0, [r7, #12]
 800c424:	60b9      	str	r1, [r7, #8]
 800c426:	607a      	str	r2, [r7, #4]
	  _ForwardIterator __cur = __result;
 800c428:	687b      	ldr	r3, [r7, #4]
 800c42a:	617b      	str	r3, [r7, #20]
	      for (; __first != __last; ++__first, (void)++__cur)
 800c42c:	e00d      	b.n	800c44a <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIPKN3jlb4NodeEPS3_EET0_T_S8_S7_+0x2e>
		std::_Construct(std::__addressof(*__cur), *__first);
 800c42e:	6978      	ldr	r0, [r7, #20]
 800c430:	f7ff f924 	bl	800b67c <_ZSt11__addressofIN3jlb4NodeEEPT_RS2_>
 800c434:	4603      	mov	r3, r0
 800c436:	68f9      	ldr	r1, [r7, #12]
 800c438:	4618      	mov	r0, r3
 800c43a:	f000 f9e4 	bl	800c806 <_ZSt10_ConstructIN3jlb4NodeEJRKS1_EEvPT_DpOT0_>
	      for (; __first != __last; ++__first, (void)++__cur)
 800c43e:	68fb      	ldr	r3, [r7, #12]
 800c440:	3318      	adds	r3, #24
 800c442:	60fb      	str	r3, [r7, #12]
 800c444:	697b      	ldr	r3, [r7, #20]
 800c446:	3318      	adds	r3, #24
 800c448:	617b      	str	r3, [r7, #20]
 800c44a:	68fa      	ldr	r2, [r7, #12]
 800c44c:	68bb      	ldr	r3, [r7, #8]
 800c44e:	429a      	cmp	r2, r3
 800c450:	d1ed      	bne.n	800c42e <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIPKN3jlb4NodeEPS3_EET0_T_S8_S7_+0x12>
	      return __cur;
 800c452:	697b      	ldr	r3, [r7, #20]
	}
 800c454:	4618      	mov	r0, r3
 800c456:	3718      	adds	r7, #24
 800c458:	46bd      	mov	sp, r7
 800c45a:	bd80      	pop	{r7, pc}

0800c45c <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPPfS4_EET0_T_S6_S5_>:
	__copy_m(_II __first, _II __last, _OI __result)
 800c45c:	b480      	push	{r7}
 800c45e:	b087      	sub	sp, #28
 800c460:	af00      	add	r7, sp, #0
 800c462:	60f8      	str	r0, [r7, #12]
 800c464:	60b9      	str	r1, [r7, #8]
 800c466:	607a      	str	r2, [r7, #4]
	  for(_Distance __n = __last - __first; __n > 0; --__n)
 800c468:	68ba      	ldr	r2, [r7, #8]
 800c46a:	68fb      	ldr	r3, [r7, #12]
 800c46c:	1ad3      	subs	r3, r2, r3
 800c46e:	109b      	asrs	r3, r3, #2
 800c470:	617b      	str	r3, [r7, #20]
 800c472:	e00c      	b.n	800c48e <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPPfS4_EET0_T_S6_S5_+0x32>
	      *__result = *__first;
 800c474:	68fb      	ldr	r3, [r7, #12]
 800c476:	681a      	ldr	r2, [r3, #0]
 800c478:	687b      	ldr	r3, [r7, #4]
 800c47a:	601a      	str	r2, [r3, #0]
	      ++__first;
 800c47c:	68fb      	ldr	r3, [r7, #12]
 800c47e:	3304      	adds	r3, #4
 800c480:	60fb      	str	r3, [r7, #12]
	      ++__result;
 800c482:	687b      	ldr	r3, [r7, #4]
 800c484:	3304      	adds	r3, #4
 800c486:	607b      	str	r3, [r7, #4]
	  for(_Distance __n = __last - __first; __n > 0; --__n)
 800c488:	697b      	ldr	r3, [r7, #20]
 800c48a:	3b01      	subs	r3, #1
 800c48c:	617b      	str	r3, [r7, #20]
 800c48e:	697b      	ldr	r3, [r7, #20]
 800c490:	2b00      	cmp	r3, #0
 800c492:	dcef      	bgt.n	800c474 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPPfS4_EET0_T_S6_S5_+0x18>
	  return __result;
 800c494:	687b      	ldr	r3, [r7, #4]
	}
 800c496:	4618      	mov	r0, r3
 800c498:	371c      	adds	r7, #28
 800c49a:	46bd      	mov	sp, r7
 800c49c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4a0:	4770      	bx	lr

0800c4a2 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIPfEEPT_PKS4_S7_S5_>:
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 800c4a2:	b580      	push	{r7, lr}
 800c4a4:	b086      	sub	sp, #24
 800c4a6:	af00      	add	r7, sp, #0
 800c4a8:	60f8      	str	r0, [r7, #12]
 800c4aa:	60b9      	str	r1, [r7, #8]
 800c4ac:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 800c4ae:	68ba      	ldr	r2, [r7, #8]
 800c4b0:	68fb      	ldr	r3, [r7, #12]
 800c4b2:	1ad3      	subs	r3, r2, r3
 800c4b4:	109b      	asrs	r3, r3, #2
 800c4b6:	617b      	str	r3, [r7, #20]
	  if (_Num)
 800c4b8:	697b      	ldr	r3, [r7, #20]
 800c4ba:	2b00      	cmp	r3, #0
 800c4bc:	d006      	beq.n	800c4cc <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIPfEEPT_PKS4_S7_S5_+0x2a>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 800c4be:	697b      	ldr	r3, [r7, #20]
 800c4c0:	009b      	lsls	r3, r3, #2
 800c4c2:	461a      	mov	r2, r3
 800c4c4:	68f9      	ldr	r1, [r7, #12]
 800c4c6:	6878      	ldr	r0, [r7, #4]
 800c4c8:	f011 fadb 	bl	801da82 <memmove>
	  return __result + _Num;
 800c4cc:	697b      	ldr	r3, [r7, #20]
 800c4ce:	009b      	lsls	r3, r3, #2
 800c4d0:	687a      	ldr	r2, [r7, #4]
 800c4d2:	4413      	add	r3, r2
	}
 800c4d4:	4618      	mov	r0, r3
 800c4d6:	3718      	adds	r7, #24
 800c4d8:	46bd      	mov	sp, r7
 800c4da:	bd80      	pop	{r7, pc}

0800c4dc <_ZNSt20__copy_move_backwardILb0ELb0ESt26random_access_iterator_tagE13__copy_move_bIPPfS4_EET0_T_S6_S5_>:
	__copy_move_b(_BI1 __first, _BI1 __last, _BI2 __result)
 800c4dc:	b480      	push	{r7}
 800c4de:	b087      	sub	sp, #28
 800c4e0:	af00      	add	r7, sp, #0
 800c4e2:	60f8      	str	r0, [r7, #12]
 800c4e4:	60b9      	str	r1, [r7, #8]
 800c4e6:	607a      	str	r2, [r7, #4]
	    __n = __last - __first;
 800c4e8:	68ba      	ldr	r2, [r7, #8]
 800c4ea:	68fb      	ldr	r3, [r7, #12]
 800c4ec:	1ad3      	subs	r3, r2, r3
 800c4ee:	109b      	asrs	r3, r3, #2
 800c4f0:	617b      	str	r3, [r7, #20]
	  for (; __n > 0; --__n)
 800c4f2:	e00c      	b.n	800c50e <_ZNSt20__copy_move_backwardILb0ELb0ESt26random_access_iterator_tagE13__copy_move_bIPPfS4_EET0_T_S6_S5_+0x32>
	    *--__result = *--__last;
 800c4f4:	68bb      	ldr	r3, [r7, #8]
 800c4f6:	3b04      	subs	r3, #4
 800c4f8:	60bb      	str	r3, [r7, #8]
 800c4fa:	68bb      	ldr	r3, [r7, #8]
 800c4fc:	681a      	ldr	r2, [r3, #0]
 800c4fe:	687b      	ldr	r3, [r7, #4]
 800c500:	3b04      	subs	r3, #4
 800c502:	607b      	str	r3, [r7, #4]
 800c504:	687b      	ldr	r3, [r7, #4]
 800c506:	601a      	str	r2, [r3, #0]
	  for (; __n > 0; --__n)
 800c508:	697b      	ldr	r3, [r7, #20]
 800c50a:	3b01      	subs	r3, #1
 800c50c:	617b      	str	r3, [r7, #20]
 800c50e:	697b      	ldr	r3, [r7, #20]
 800c510:	2b00      	cmp	r3, #0
 800c512:	dcef      	bgt.n	800c4f4 <_ZNSt20__copy_move_backwardILb0ELb0ESt26random_access_iterator_tagE13__copy_move_bIPPfS4_EET0_T_S6_S5_+0x18>
	  return __result;
 800c514:	687b      	ldr	r3, [r7, #4]
	}
 800c516:	4618      	mov	r0, r3
 800c518:	371c      	adds	r7, #28
 800c51a:	46bd      	mov	sp, r7
 800c51c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c520:	4770      	bx	lr

0800c522 <_ZNSt20__copy_move_backwardILb0ELb1ESt26random_access_iterator_tagE13__copy_move_bIPfEEPT_PKS4_S7_S5_>:
	__copy_move_b(const _Tp* __first, const _Tp* __last, _Tp* __result)
 800c522:	b580      	push	{r7, lr}
 800c524:	b086      	sub	sp, #24
 800c526:	af00      	add	r7, sp, #0
 800c528:	60f8      	str	r0, [r7, #12]
 800c52a:	60b9      	str	r1, [r7, #8]
 800c52c:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 800c52e:	68ba      	ldr	r2, [r7, #8]
 800c530:	68fb      	ldr	r3, [r7, #12]
 800c532:	1ad3      	subs	r3, r2, r3
 800c534:	109b      	asrs	r3, r3, #2
 800c536:	617b      	str	r3, [r7, #20]
	  if (_Num)
 800c538:	697b      	ldr	r3, [r7, #20]
 800c53a:	2b00      	cmp	r3, #0
 800c53c:	d00a      	beq.n	800c554 <_ZNSt20__copy_move_backwardILb0ELb1ESt26random_access_iterator_tagE13__copy_move_bIPfEEPT_PKS4_S7_S5_+0x32>
	    __builtin_memmove(__result - _Num, __first, sizeof(_Tp) * _Num);
 800c53e:	697b      	ldr	r3, [r7, #20]
 800c540:	009b      	lsls	r3, r3, #2
 800c542:	425b      	negs	r3, r3
 800c544:	687a      	ldr	r2, [r7, #4]
 800c546:	18d0      	adds	r0, r2, r3
 800c548:	697b      	ldr	r3, [r7, #20]
 800c54a:	009b      	lsls	r3, r3, #2
 800c54c:	461a      	mov	r2, r3
 800c54e:	68f9      	ldr	r1, [r7, #12]
 800c550:	f011 fa97 	bl	801da82 <memmove>
	  return __result - _Num;
 800c554:	697b      	ldr	r3, [r7, #20]
 800c556:	009b      	lsls	r3, r3, #2
 800c558:	425b      	negs	r3, r3
 800c55a:	687a      	ldr	r2, [r7, #4]
 800c55c:	4413      	add	r3, r2
	}
 800c55e:	4618      	mov	r0, r3
 800c560:	3718      	adds	r7, #24
 800c562:	46bd      	mov	sp, r7
 800c564:	bd80      	pop	{r7, pc}

0800c566 <_ZNK9__gnu_cxx5__ops14_Iter_less_valclINS_17__normal_iteratorIPfSt6vectorIfSaIfEEEEfEEbT_RT0_>:
      operator()(_Iterator __it, _Value& __val) const
 800c566:	b580      	push	{r7, lr}
 800c568:	b084      	sub	sp, #16
 800c56a:	af00      	add	r7, sp, #0
 800c56c:	60f8      	str	r0, [r7, #12]
 800c56e:	60b9      	str	r1, [r7, #8]
 800c570:	607a      	str	r2, [r7, #4]
      { return *__it < __val; }
 800c572:	f107 0308 	add.w	r3, r7, #8
 800c576:	4618      	mov	r0, r3
 800c578:	f7fd fdf4 	bl	800a164 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEdeEv>
 800c57c:	4603      	mov	r3, r0
 800c57e:	ed93 7a00 	vldr	s14, [r3]
 800c582:	687b      	ldr	r3, [r7, #4]
 800c584:	edd3 7a00 	vldr	s15, [r3]
 800c588:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800c58c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c590:	bf4c      	ite	mi
 800c592:	2301      	movmi	r3, #1
 800c594:	2300      	movpl	r3, #0
 800c596:	b2db      	uxtb	r3, r3
 800c598:	4618      	mov	r0, r3
 800c59a:	3710      	adds	r7, #16
 800c59c:	46bd      	mov	sp, r7
 800c59e:	bd80      	pop	{r7, pc}

0800c5a0 <_ZSt11__push_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEifNS0_5__ops14_Iter_less_valEEvT_T0_SA_T1_RT2_>:
    __push_heap(_RandomAccessIterator __first,
 800c5a0:	b590      	push	{r4, r7, lr}
 800c5a2:	b08b      	sub	sp, #44	; 0x2c
 800c5a4:	af00      	add	r7, sp, #0
 800c5a6:	6178      	str	r0, [r7, #20]
 800c5a8:	6139      	str	r1, [r7, #16]
 800c5aa:	60fa      	str	r2, [r7, #12]
 800c5ac:	ed87 0a02 	vstr	s0, [r7, #8]
 800c5b0:	607b      	str	r3, [r7, #4]
      _Distance __parent = (__holeIndex - 1) / 2;
 800c5b2:	693b      	ldr	r3, [r7, #16]
 800c5b4:	3b01      	subs	r3, #1
 800c5b6:	0fda      	lsrs	r2, r3, #31
 800c5b8:	4413      	add	r3, r2
 800c5ba:	105b      	asrs	r3, r3, #1
 800c5bc:	627b      	str	r3, [r7, #36]	; 0x24
      while (__holeIndex > __topIndex && __comp(__first + __parent, __value))
 800c5be:	e029      	b.n	800c614 <_ZSt11__push_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEifNS0_5__ops14_Iter_less_valEEvT_T0_SA_T1_RT2_+0x74>
	  *(__first + __holeIndex) = _GLIBCXX_MOVE(*(__first + __parent));
 800c5c0:	f107 0314 	add.w	r3, r7, #20
 800c5c4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c5c6:	4618      	mov	r0, r3
 800c5c8:	f7fd fda4 	bl	800a114 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEplEi>
 800c5cc:	4603      	mov	r3, r0
 800c5ce:	61bb      	str	r3, [r7, #24]
 800c5d0:	f107 0318 	add.w	r3, r7, #24
 800c5d4:	4618      	mov	r0, r3
 800c5d6:	f7fd fdc5 	bl	800a164 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEdeEv>
 800c5da:	4603      	mov	r3, r0
 800c5dc:	4618      	mov	r0, r3
 800c5de:	f7fa ff06 	bl	80073ee <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>
 800c5e2:	4603      	mov	r3, r0
 800c5e4:	681c      	ldr	r4, [r3, #0]
 800c5e6:	f107 0314 	add.w	r3, r7, #20
 800c5ea:	6939      	ldr	r1, [r7, #16]
 800c5ec:	4618      	mov	r0, r3
 800c5ee:	f7fd fd91 	bl	800a114 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEplEi>
 800c5f2:	4603      	mov	r3, r0
 800c5f4:	61fb      	str	r3, [r7, #28]
 800c5f6:	f107 031c 	add.w	r3, r7, #28
 800c5fa:	4618      	mov	r0, r3
 800c5fc:	f7fd fdb2 	bl	800a164 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEdeEv>
 800c600:	4603      	mov	r3, r0
 800c602:	601c      	str	r4, [r3, #0]
	  __holeIndex = __parent;
 800c604:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c606:	613b      	str	r3, [r7, #16]
	  __parent = (__holeIndex - 1) / 2;
 800c608:	693b      	ldr	r3, [r7, #16]
 800c60a:	3b01      	subs	r3, #1
 800c60c:	0fda      	lsrs	r2, r3, #31
 800c60e:	4413      	add	r3, r2
 800c610:	105b      	asrs	r3, r3, #1
 800c612:	627b      	str	r3, [r7, #36]	; 0x24
      while (__holeIndex > __topIndex && __comp(__first + __parent, __value))
 800c614:	693a      	ldr	r2, [r7, #16]
 800c616:	68fb      	ldr	r3, [r7, #12]
 800c618:	429a      	cmp	r2, r3
 800c61a:	dd11      	ble.n	800c640 <_ZSt11__push_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEifNS0_5__ops14_Iter_less_valEEvT_T0_SA_T1_RT2_+0xa0>
 800c61c:	f107 0314 	add.w	r3, r7, #20
 800c620:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c622:	4618      	mov	r0, r3
 800c624:	f7fd fd76 	bl	800a114 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEplEi>
 800c628:	4601      	mov	r1, r0
 800c62a:	f107 0308 	add.w	r3, r7, #8
 800c62e:	461a      	mov	r2, r3
 800c630:	6878      	ldr	r0, [r7, #4]
 800c632:	f7ff ff98 	bl	800c566 <_ZNK9__gnu_cxx5__ops14_Iter_less_valclINS_17__normal_iteratorIPfSt6vectorIfSaIfEEEEfEEbT_RT0_>
 800c636:	4603      	mov	r3, r0
 800c638:	2b00      	cmp	r3, #0
 800c63a:	d001      	beq.n	800c640 <_ZSt11__push_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEifNS0_5__ops14_Iter_less_valEEvT_T0_SA_T1_RT2_+0xa0>
 800c63c:	2301      	movs	r3, #1
 800c63e:	e000      	b.n	800c642 <_ZSt11__push_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEifNS0_5__ops14_Iter_less_valEEvT_T0_SA_T1_RT2_+0xa2>
 800c640:	2300      	movs	r3, #0
 800c642:	2b00      	cmp	r3, #0
 800c644:	d1bc      	bne.n	800c5c0 <_ZSt11__push_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEifNS0_5__ops14_Iter_less_valEEvT_T0_SA_T1_RT2_+0x20>
      *(__first + __holeIndex) = _GLIBCXX_MOVE(__value);
 800c646:	f107 0308 	add.w	r3, r7, #8
 800c64a:	4618      	mov	r0, r3
 800c64c:	f7fa fecf 	bl	80073ee <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>
 800c650:	4603      	mov	r3, r0
 800c652:	681c      	ldr	r4, [r3, #0]
 800c654:	f107 0314 	add.w	r3, r7, #20
 800c658:	6939      	ldr	r1, [r7, #16]
 800c65a:	4618      	mov	r0, r3
 800c65c:	f7fd fd5a 	bl	800a114 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEplEi>
 800c660:	4603      	mov	r3, r0
 800c662:	623b      	str	r3, [r7, #32]
 800c664:	f107 0320 	add.w	r3, r7, #32
 800c668:	4618      	mov	r0, r3
 800c66a:	f7fd fd7b 	bl	800a164 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEdeEv>
 800c66e:	4603      	mov	r3, r0
 800c670:	601c      	str	r4, [r3, #0]
    }
 800c672:	bf00      	nop
 800c674:	372c      	adds	r7, #44	; 0x2c
 800c676:	46bd      	mov	sp, r7
 800c678:	bd90      	pop	{r4, r7, pc}

0800c67a <_ZNSt20__copy_move_backwardILb1ELb0ESt26random_access_iterator_tagE13__copy_move_bIPfS3_EET0_T_S5_S4_>:
	__copy_move_b(_BI1 __first, _BI1 __last, _BI2 __result)
 800c67a:	b580      	push	{r7, lr}
 800c67c:	b086      	sub	sp, #24
 800c67e:	af00      	add	r7, sp, #0
 800c680:	60f8      	str	r0, [r7, #12]
 800c682:	60b9      	str	r1, [r7, #8]
 800c684:	607a      	str	r2, [r7, #4]
	    __n = __last - __first;
 800c686:	68ba      	ldr	r2, [r7, #8]
 800c688:	68fb      	ldr	r3, [r7, #12]
 800c68a:	1ad3      	subs	r3, r2, r3
 800c68c:	109b      	asrs	r3, r3, #2
 800c68e:	617b      	str	r3, [r7, #20]
	  for (; __n > 0; --__n)
 800c690:	e00f      	b.n	800c6b2 <_ZNSt20__copy_move_backwardILb1ELb0ESt26random_access_iterator_tagE13__copy_move_bIPfS3_EET0_T_S5_S4_+0x38>
	    *--__result = std::move(*--__last);
 800c692:	68bb      	ldr	r3, [r7, #8]
 800c694:	3b04      	subs	r3, #4
 800c696:	60bb      	str	r3, [r7, #8]
 800c698:	68b8      	ldr	r0, [r7, #8]
 800c69a:	f7fa fea8 	bl	80073ee <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>
 800c69e:	4603      	mov	r3, r0
 800c6a0:	681a      	ldr	r2, [r3, #0]
 800c6a2:	687b      	ldr	r3, [r7, #4]
 800c6a4:	3b04      	subs	r3, #4
 800c6a6:	607b      	str	r3, [r7, #4]
 800c6a8:	687b      	ldr	r3, [r7, #4]
 800c6aa:	601a      	str	r2, [r3, #0]
	  for (; __n > 0; --__n)
 800c6ac:	697b      	ldr	r3, [r7, #20]
 800c6ae:	3b01      	subs	r3, #1
 800c6b0:	617b      	str	r3, [r7, #20]
 800c6b2:	697b      	ldr	r3, [r7, #20]
 800c6b4:	2b00      	cmp	r3, #0
 800c6b6:	dcec      	bgt.n	800c692 <_ZNSt20__copy_move_backwardILb1ELb0ESt26random_access_iterator_tagE13__copy_move_bIPfS3_EET0_T_S5_S4_+0x18>
	  return __result;
 800c6b8:	687b      	ldr	r3, [r7, #4]
	}
 800c6ba:	4618      	mov	r0, r3
 800c6bc:	3718      	adds	r7, #24
 800c6be:	46bd      	mov	sp, r7
 800c6c0:	bd80      	pop	{r7, pc}

0800c6c2 <_ZNSt20__copy_move_backwardILb1ELb1ESt26random_access_iterator_tagE13__copy_move_bIfEEPT_PKS3_S6_S4_>:
	__copy_move_b(const _Tp* __first, const _Tp* __last, _Tp* __result)
 800c6c2:	b580      	push	{r7, lr}
 800c6c4:	b086      	sub	sp, #24
 800c6c6:	af00      	add	r7, sp, #0
 800c6c8:	60f8      	str	r0, [r7, #12]
 800c6ca:	60b9      	str	r1, [r7, #8]
 800c6cc:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 800c6ce:	68ba      	ldr	r2, [r7, #8]
 800c6d0:	68fb      	ldr	r3, [r7, #12]
 800c6d2:	1ad3      	subs	r3, r2, r3
 800c6d4:	109b      	asrs	r3, r3, #2
 800c6d6:	617b      	str	r3, [r7, #20]
	  if (_Num)
 800c6d8:	697b      	ldr	r3, [r7, #20]
 800c6da:	2b00      	cmp	r3, #0
 800c6dc:	d00a      	beq.n	800c6f4 <_ZNSt20__copy_move_backwardILb1ELb1ESt26random_access_iterator_tagE13__copy_move_bIfEEPT_PKS3_S6_S4_+0x32>
	    __builtin_memmove(__result - _Num, __first, sizeof(_Tp) * _Num);
 800c6de:	697b      	ldr	r3, [r7, #20]
 800c6e0:	009b      	lsls	r3, r3, #2
 800c6e2:	425b      	negs	r3, r3
 800c6e4:	687a      	ldr	r2, [r7, #4]
 800c6e6:	18d0      	adds	r0, r2, r3
 800c6e8:	697b      	ldr	r3, [r7, #20]
 800c6ea:	009b      	lsls	r3, r3, #2
 800c6ec:	461a      	mov	r2, r3
 800c6ee:	68f9      	ldr	r1, [r7, #12]
 800c6f0:	f011 f9c7 	bl	801da82 <memmove>
	  return __result - _Num;
 800c6f4:	697b      	ldr	r3, [r7, #20]
 800c6f6:	009b      	lsls	r3, r3, #2
 800c6f8:	425b      	negs	r3, r3
 800c6fa:	687a      	ldr	r2, [r7, #4]
 800c6fc:	4413      	add	r3, r2
	}
 800c6fe:	4618      	mov	r0, r3
 800c700:	3718      	adds	r7, #24
 800c702:	46bd      	mov	sp, r7
 800c704:	bd80      	pop	{r7, pc}

0800c706 <_ZSt19__relocate_object_aIN3jlb4EdgeES1_SaIS1_EEvPT_PT0_RT1_>:
    __relocate_object_a(_Tp* __restrict __dest, _Up* __restrict __orig,
 800c706:	b580      	push	{r7, lr}
 800c708:	b084      	sub	sp, #16
 800c70a:	af00      	add	r7, sp, #0
 800c70c:	60f8      	str	r0, [r7, #12]
 800c70e:	60b9      	str	r1, [r7, #8]
 800c710:	607a      	str	r2, [r7, #4]
      __traits::construct(__alloc, __dest, std::move(*__orig));
 800c712:	68b8      	ldr	r0, [r7, #8]
 800c714:	f7fb ffc7 	bl	80086a6 <_ZSt4moveIRN3jlb4EdgeEEONSt16remove_referenceIT_E4typeEOS4_>
 800c718:	4603      	mov	r3, r0
 800c71a:	461a      	mov	r2, r3
 800c71c:	68f9      	ldr	r1, [r7, #12]
 800c71e:	6878      	ldr	r0, [r7, #4]
 800c720:	f7fc fed3 	bl	80094ca <_ZNSt16allocator_traitsISaIN3jlb4EdgeEEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>
      __traits::destroy(__alloc, std::__addressof(*__orig));
 800c724:	68b8      	ldr	r0, [r7, #8]
 800c726:	f7fe fed4 	bl	800b4d2 <_ZSt11__addressofIN3jlb4EdgeEEPT_RS2_>
 800c72a:	4603      	mov	r3, r0
 800c72c:	4619      	mov	r1, r3
 800c72e:	6878      	ldr	r0, [r7, #4]
 800c730:	f7fe f94d 	bl	800a9ce <_ZNSt16allocator_traitsISaIN3jlb4EdgeEEE7destroyIS1_EEvRS2_PT_>
    }
 800c734:	bf00      	nop
 800c736:	3710      	adds	r7, #16
 800c738:	46bd      	mov	sp, r7
 800c73a:	bd80      	pop	{r7, pc}

0800c73c <_ZN9__gnu_cxx13new_allocatorIN3jlb4EdgeEEC1ERKS3_>:
      new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
 800c73c:	b480      	push	{r7}
 800c73e:	b083      	sub	sp, #12
 800c740:	af00      	add	r7, sp, #0
 800c742:	6078      	str	r0, [r7, #4]
 800c744:	6039      	str	r1, [r7, #0]
 800c746:	687b      	ldr	r3, [r7, #4]
 800c748:	4618      	mov	r0, r3
 800c74a:	370c      	adds	r7, #12
 800c74c:	46bd      	mov	sp, r7
 800c74e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c752:	4770      	bx	lr

0800c754 <_ZN9__gnu_cxxeqIPKN3jlb4EdgeESt6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T0_EESD_>:
    operator==(const __normal_iterator<_Iterator, _Container>& __lhs,
 800c754:	b590      	push	{r4, r7, lr}
 800c756:	b083      	sub	sp, #12
 800c758:	af00      	add	r7, sp, #0
 800c75a:	6078      	str	r0, [r7, #4]
 800c75c:	6039      	str	r1, [r7, #0]
    { return __lhs.base() == __rhs.base(); }
 800c75e:	6878      	ldr	r0, [r7, #4]
 800c760:	f7ff fdcf 	bl	800c302 <_ZNK9__gnu_cxx17__normal_iteratorIPKN3jlb4EdgeESt6vectorIS2_SaIS2_EEE4baseEv>
 800c764:	4603      	mov	r3, r0
 800c766:	681c      	ldr	r4, [r3, #0]
 800c768:	6838      	ldr	r0, [r7, #0]
 800c76a:	f7ff fdca 	bl	800c302 <_ZNK9__gnu_cxx17__normal_iteratorIPKN3jlb4EdgeESt6vectorIS2_SaIS2_EEE4baseEv>
 800c76e:	4603      	mov	r3, r0
 800c770:	681b      	ldr	r3, [r3, #0]
 800c772:	429c      	cmp	r4, r3
 800c774:	bf0c      	ite	eq
 800c776:	2301      	moveq	r3, #1
 800c778:	2300      	movne	r3, #0
 800c77a:	b2db      	uxtb	r3, r3
 800c77c:	4618      	mov	r0, r3
 800c77e:	370c      	adds	r7, #12
 800c780:	46bd      	mov	sp, r7
 800c782:	bd90      	pop	{r4, r7, pc}

0800c784 <_ZNK9__gnu_cxx17__normal_iteratorIPKN3jlb4EdgeESt6vectorIS2_SaIS2_EEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 800c784:	b480      	push	{r7}
 800c786:	b083      	sub	sp, #12
 800c788:	af00      	add	r7, sp, #0
 800c78a:	6078      	str	r0, [r7, #4]
      { return *_M_current; }
 800c78c:	687b      	ldr	r3, [r7, #4]
 800c78e:	681b      	ldr	r3, [r3, #0]
 800c790:	4618      	mov	r0, r3
 800c792:	370c      	adds	r7, #12
 800c794:	46bd      	mov	sp, r7
 800c796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c79a:	4770      	bx	lr

0800c79c <_ZN3jlb4EdgeC1ERKS0_>:
    struct Edge
 800c79c:	b580      	push	{r7, lr}
 800c79e:	b082      	sub	sp, #8
 800c7a0:	af00      	add	r7, sp, #0
 800c7a2:	6078      	str	r0, [r7, #4]
 800c7a4:	6039      	str	r1, [r7, #0]
 800c7a6:	683b      	ldr	r3, [r7, #0]
 800c7a8:	781a      	ldrb	r2, [r3, #0]
 800c7aa:	687b      	ldr	r3, [r7, #4]
 800c7ac:	701a      	strb	r2, [r3, #0]
 800c7ae:	683b      	ldr	r3, [r7, #0]
 800c7b0:	685a      	ldr	r2, [r3, #4]
 800c7b2:	687b      	ldr	r3, [r7, #4]
 800c7b4:	605a      	str	r2, [r3, #4]
 800c7b6:	687b      	ldr	r3, [r7, #4]
 800c7b8:	f103 0208 	add.w	r2, r3, #8
 800c7bc:	683b      	ldr	r3, [r7, #0]
 800c7be:	3308      	adds	r3, #8
 800c7c0:	4619      	mov	r1, r3
 800c7c2:	4610      	mov	r0, r2
 800c7c4:	f7fb f90d 	bl	80079e2 <_ZNSt6vectorIcSaIcEEC1ERKS1_>
 800c7c8:	683b      	ldr	r3, [r7, #0]
 800c7ca:	695a      	ldr	r2, [r3, #20]
 800c7cc:	687b      	ldr	r3, [r7, #4]
 800c7ce:	615a      	str	r2, [r3, #20]
 800c7d0:	687b      	ldr	r3, [r7, #4]
 800c7d2:	4618      	mov	r0, r3
 800c7d4:	3708      	adds	r7, #8
 800c7d6:	46bd      	mov	sp, r7
 800c7d8:	bd80      	pop	{r7, pc}

0800c7da <_ZSt10_ConstructIN3jlb4EdgeEJRKS1_EEvPT_DpOT0_>:
    _Construct(_Tp* __p, _Args&&... __args)
 800c7da:	b590      	push	{r4, r7, lr}
 800c7dc:	b083      	sub	sp, #12
 800c7de:	af00      	add	r7, sp, #0
 800c7e0:	6078      	str	r0, [r7, #4]
 800c7e2:	6039      	str	r1, [r7, #0]
      ::new((void*)__p) _Tp(std::forward<_Args>(__args)...);
 800c7e4:	6838      	ldr	r0, [r7, #0]
 800c7e6:	f000 f824 	bl	800c832 <_ZSt7forwardIRKN3jlb4EdgeEEOT_RNSt16remove_referenceIS4_E4typeE>
 800c7ea:	4604      	mov	r4, r0
 800c7ec:	687b      	ldr	r3, [r7, #4]
 800c7ee:	4619      	mov	r1, r3
 800c7f0:	2018      	movs	r0, #24
 800c7f2:	f7f5 fd0f 	bl	8002214 <_ZnwjPv>
 800c7f6:	4603      	mov	r3, r0
 800c7f8:	4621      	mov	r1, r4
 800c7fa:	4618      	mov	r0, r3
 800c7fc:	f7ff ffce 	bl	800c79c <_ZN3jlb4EdgeC1ERKS0_>
    }
 800c800:	370c      	adds	r7, #12
 800c802:	46bd      	mov	sp, r7
 800c804:	bd90      	pop	{r4, r7, pc}

0800c806 <_ZSt10_ConstructIN3jlb4NodeEJRKS1_EEvPT_DpOT0_>:
    _Construct(_Tp* __p, _Args&&... __args)
 800c806:	b590      	push	{r4, r7, lr}
 800c808:	b083      	sub	sp, #12
 800c80a:	af00      	add	r7, sp, #0
 800c80c:	6078      	str	r0, [r7, #4]
 800c80e:	6039      	str	r1, [r7, #0]
      ::new((void*)__p) _Tp(std::forward<_Args>(__args)...);
 800c810:	6838      	ldr	r0, [r7, #0]
 800c812:	f000 f819 	bl	800c848 <_ZSt7forwardIRKN3jlb4NodeEEOT_RNSt16remove_referenceIS4_E4typeE>
 800c816:	4604      	mov	r4, r0
 800c818:	687b      	ldr	r3, [r7, #4]
 800c81a:	4619      	mov	r1, r3
 800c81c:	2018      	movs	r0, #24
 800c81e:	f7f5 fcf9 	bl	8002214 <_ZnwjPv>
 800c822:	4603      	mov	r3, r0
 800c824:	4621      	mov	r1, r4
 800c826:	4618      	mov	r0, r3
 800c828:	f7fc ff62 	bl	80096f0 <_ZN3jlb4NodeC1ERKS0_>
    }
 800c82c:	370c      	adds	r7, #12
 800c82e:	46bd      	mov	sp, r7
 800c830:	bd90      	pop	{r4, r7, pc}

0800c832 <_ZSt7forwardIRKN3jlb4EdgeEEOT_RNSt16remove_referenceIS4_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800c832:	b480      	push	{r7}
 800c834:	b083      	sub	sp, #12
 800c836:	af00      	add	r7, sp, #0
 800c838:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800c83a:	687b      	ldr	r3, [r7, #4]
 800c83c:	4618      	mov	r0, r3
 800c83e:	370c      	adds	r7, #12
 800c840:	46bd      	mov	sp, r7
 800c842:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c846:	4770      	bx	lr

0800c848 <_ZSt7forwardIRKN3jlb4NodeEEOT_RNSt16remove_referenceIS4_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800c848:	b480      	push	{r7}
 800c84a:	b083      	sub	sp, #12
 800c84c:	af00      	add	r7, sp, #0
 800c84e:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800c850:	687b      	ldr	r3, [r7, #4]
 800c852:	4618      	mov	r0, r3
 800c854:	370c      	adds	r7, #12
 800c856:	46bd      	mov	sp, r7
 800c858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c85c:	4770      	bx	lr
	...

0800c860 <LL_AHB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 800c860:	b480      	push	{r7}
 800c862:	b085      	sub	sp, #20
 800c864:	af00      	add	r7, sp, #0
 800c866:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 800c868:	4b08      	ldr	r3, [pc, #32]	; (800c88c <LL_AHB2_GRP1_EnableClock+0x2c>)
 800c86a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800c86c:	4907      	ldr	r1, [pc, #28]	; (800c88c <LL_AHB2_GRP1_EnableClock+0x2c>)
 800c86e:	687b      	ldr	r3, [r7, #4]
 800c870:	4313      	orrs	r3, r2
 800c872:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800c874:	4b05      	ldr	r3, [pc, #20]	; (800c88c <LL_AHB2_GRP1_EnableClock+0x2c>)
 800c876:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800c878:	687b      	ldr	r3, [r7, #4]
 800c87a:	4013      	ands	r3, r2
 800c87c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800c87e:	68fb      	ldr	r3, [r7, #12]
}
 800c880:	bf00      	nop
 800c882:	3714      	adds	r7, #20
 800c884:	46bd      	mov	sp, r7
 800c886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c88a:	4770      	bx	lr
 800c88c:	40021000 	.word	0x40021000

0800c890 <LL_APB1_GRP2_EnableClock>:
  *         @arg @ref LL_APB1_GRP2_PERIPH_USB
  *         @arg @ref LL_APB1_GRP2_PERIPH_UCPD1
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP2_EnableClock(uint32_t Periphs)
{
 800c890:	b480      	push	{r7}
 800c892:	b085      	sub	sp, #20
 800c894:	af00      	add	r7, sp, #0
 800c896:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR2, Periphs);
 800c898:	4b08      	ldr	r3, [pc, #32]	; (800c8bc <LL_APB1_GRP2_EnableClock+0x2c>)
 800c89a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800c89c:	4907      	ldr	r1, [pc, #28]	; (800c8bc <LL_APB1_GRP2_EnableClock+0x2c>)
 800c89e:	687b      	ldr	r3, [r7, #4]
 800c8a0:	4313      	orrs	r3, r2
 800c8a2:	65cb      	str	r3, [r1, #92]	; 0x5c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR2, Periphs);
 800c8a4:	4b05      	ldr	r3, [pc, #20]	; (800c8bc <LL_APB1_GRP2_EnableClock+0x2c>)
 800c8a6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800c8a8:	687b      	ldr	r3, [r7, #4]
 800c8aa:	4013      	ands	r3, r2
 800c8ac:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800c8ae:	68fb      	ldr	r3, [r7, #12]
}
 800c8b0:	bf00      	nop
 800c8b2:	3714      	adds	r7, #20
 800c8b4:	46bd      	mov	sp, r7
 800c8b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8ba:	4770      	bx	lr
 800c8bc:	40021000 	.word	0x40021000

0800c8c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800c8c0:	b580      	push	{r7, lr}
 800c8c2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800c8c4:	f002 f889 	bl	800e9da <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800c8c8:	f000 f862 	bl	800c990 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800c8cc:	f000 ffb8 	bl	800d840 <_ZL12MX_GPIO_Initv>
  MX_DMA_Init();
 800c8d0:	f000 ff8c 	bl	800d7ec <_ZL11MX_DMA_Initv>
  MX_LPUART1_UART_Init();
 800c8d4:	f000 fa62 	bl	800cd9c <_ZL20MX_LPUART1_UART_Initv>
  MX_RTC_Init();
 800c8d8:	f000 fb82 	bl	800cfe0 <_ZL11MX_RTC_Initv>
  MX_UCPD1_Init();
 800c8dc:	f000 ff22 	bl	800d724 <_ZL13MX_UCPD1_Initv>
  MX_USB_PCD_Init();
 800c8e0:	f000 ff56 	bl	800d790 <_ZL15MX_USB_PCD_Initv>
  MX_UART4_Init();
 800c8e4:	f000 fabc 	bl	800ce60 <_ZL13MX_UART4_Initv>
  MX_SPI1_Init();
 800c8e8:	f000 fbce 	bl	800d088 <_ZL12MX_SPI1_Initv>
  MX_SPI2_Init();
 800c8ec:	f000 fc0e 	bl	800d10c <_ZL12MX_SPI2_Initv>
  MX_SPI3_Init();
 800c8f0:	f000 fc4e 	bl	800d190 <_ZL12MX_SPI3_Initv>
  MX_TIM1_Init();
 800c8f4:	f000 fc8e 	bl	800d214 <_ZL12MX_TIM1_Initv>
  MX_TIM3_Init();
 800c8f8:	f000 fd2c 	bl	800d354 <_ZL12MX_TIM3_Initv>
  MX_USART2_UART_Init();
 800c8fc:	f000 fb10 	bl	800cf20 <_ZL19MX_USART2_UART_Initv>
  MX_ADC1_Init();
 800c900:	f000 f8b6 	bl	800ca70 <_ZL12MX_ADC1_Initv>
  MX_TIM5_Init();
 800c904:	f000 fd86 	bl	800d414 <_ZL12MX_TIM5_Initv>
  MX_I2C1_Init();
 800c908:	f000 f9dc 	bl	800ccc4 <_ZL12MX_I2C1_Initv>
  MX_ICACHE_Init();
 800c90c:	f000 fa28 	bl	800cd60 <_ZL14MX_ICACHE_Initv>
  MX_TIM6_Init();
 800c910:	f000 fe20 	bl	800d554 <_ZL12MX_TIM6_Initv>
  MX_TIM8_Init();
 800c914:	f000 fe5e 	bl	800d5d4 <_ZL12MX_TIM8_Initv>
  /* USER CODE BEGIN 2 */
	Radio_Init();
 800c918:	f7f5 fafa 	bl	8001f10 <_Z10Radio_Initv>
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 800c91c:	2100      	movs	r1, #0
 800c91e:	4814      	ldr	r0, [pc, #80]	; (800c970 <main+0xb0>)
 800c920:	f008 f972 	bl	8014c08 <HAL_TIM_PWM_Start>

	HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_1);
 800c924:	2100      	movs	r1, #0
 800c926:	4813      	ldr	r0, [pc, #76]	; (800c974 <main+0xb4>)
 800c928:	f008 f96e 	bl	8014c08 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_4);
 800c92c:	210c      	movs	r1, #12
 800c92e:	4811      	ldr	r0, [pc, #68]	; (800c974 <main+0xb4>)
 800c930:	f008 f96a 	bl	8014c08 <HAL_TIM_PWM_Start>

	HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 800c934:	213c      	movs	r1, #60	; 0x3c
 800c936:	4810      	ldr	r0, [pc, #64]	; (800c978 <main+0xb8>)
 800c938:	f008 fcbe 	bl	80152b8 <HAL_TIM_Encoder_Start>
	HAL_TIM_Base_Start(&htim6);
 800c93c:	480f      	ldr	r0, [pc, #60]	; (800c97c <main+0xbc>)
 800c93e:	f008 f833 	bl	80149a8 <HAL_TIM_Base_Start>

	HAL_TIM_IC_Start_IT(&htim1, TIM_CHANNEL_3);
 800c942:	2108      	movs	r1, #8
 800c944:	480e      	ldr	r0, [pc, #56]	; (800c980 <main+0xc0>)
 800c946:	f008 fac7 	bl	8014ed8 <HAL_TIM_IC_Start_IT>
	HAL_TIM_IC_Start_IT(&htim1, TIM_CHANNEL_4);
 800c94a:	210c      	movs	r1, #12
 800c94c:	480c      	ldr	r0, [pc, #48]	; (800c980 <main+0xc0>)
 800c94e:	f008 fac3 	bl	8014ed8 <HAL_TIM_IC_Start_IT>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800c952:	f00c faab 	bl	8018eac <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 800c956:	4a0b      	ldr	r2, [pc, #44]	; (800c984 <main+0xc4>)
 800c958:	2100      	movs	r1, #0
 800c95a:	480b      	ldr	r0, [pc, #44]	; (800c988 <main+0xc8>)
 800c95c:	f00c faf0 	bl	8018f40 <osThreadNew>
 800c960:	4603      	mov	r3, r0
 800c962:	4a0a      	ldr	r2, [pc, #40]	; (800c98c <main+0xcc>)
 800c964:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  RegistrateUserTasks();
 800c966:	f7fa fb43 	bl	8006ff0 <_Z19RegistrateUserTasksv>
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 800c96a:	f00c fac3 	bl	8018ef4 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800c96e:	e7fe      	b.n	800c96e <main+0xae>
 800c970:	20000848 	.word	0x20000848
 800c974:	200007b0 	.word	0x200007b0
 800c978:	20000764 	.word	0x20000764
 800c97c:	200007fc 	.word	0x200007fc
 800c980:	20000718 	.word	0x20000718
 800c984:	0801f220 	.word	0x0801f220
 800c988:	0800daa5 	.word	0x0800daa5
 800c98c:	20000b88 	.word	0x20000b88

0800c990 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800c990:	b580      	push	{r7, lr}
 800c992:	b098      	sub	sp, #96	; 0x60
 800c994:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800c996:	f107 0318 	add.w	r3, r7, #24
 800c99a:	2248      	movs	r2, #72	; 0x48
 800c99c:	2100      	movs	r1, #0
 800c99e:	4618      	mov	r0, r3
 800c9a0:	f011 f889 	bl	801dab6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800c9a4:	1d3b      	adds	r3, r7, #4
 800c9a6:	2200      	movs	r2, #0
 800c9a8:	601a      	str	r2, [r3, #0]
 800c9aa:	605a      	str	r2, [r3, #4]
 800c9ac:	609a      	str	r2, [r3, #8]
 800c9ae:	60da      	str	r2, [r3, #12]
 800c9b0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE0) != HAL_OK)
 800c9b2:	2000      	movs	r0, #0
 800c9b4:	f005 f9c4 	bl	8011d40 <HAL_PWREx_ControlVoltageScaling>
 800c9b8:	4603      	mov	r3, r0
 800c9ba:	2b00      	cmp	r3, #0
 800c9bc:	bf14      	ite	ne
 800c9be:	2301      	movne	r3, #1
 800c9c0:	2300      	moveq	r3, #0
 800c9c2:	b2db      	uxtb	r3, r3
 800c9c4:	2b00      	cmp	r3, #0
 800c9c6:	d001      	beq.n	800c9cc <_Z18SystemClock_Configv+0x3c>
  {
    Error_Handler();
 800c9c8:	f001 f88b 	bl	800dae2 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800c9cc:	f005 f99a 	bl	8011d04 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 800c9d0:	4b26      	ldr	r3, [pc, #152]	; (800ca6c <_Z18SystemClock_Configv+0xdc>)
 800c9d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c9d6:	4a25      	ldr	r2, [pc, #148]	; (800ca6c <_Z18SystemClock_Configv+0xdc>)
 800c9d8:	f023 0318 	bic.w	r3, r3, #24
 800c9dc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_LSE
 800c9e0:	2334      	movs	r3, #52	; 0x34
 800c9e2:	61bb      	str	r3, [r7, #24]
                              |RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800c9e4:	2381      	movs	r3, #129	; 0x81
 800c9e6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 800c9e8:	2301      	movs	r3, #1
 800c9ea:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800c9ec:	2301      	movs	r3, #1
 800c9ee:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 800c9f0:	2300      	movs	r3, #0
 800c9f2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800c9f4:	2360      	movs	r3, #96	; 0x60
 800c9f6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800c9f8:	2302      	movs	r3, #2
 800c9fa:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 800c9fc:	2301      	movs	r3, #1
 800c9fe:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLM = 1;
 800ca00:	2301      	movs	r3, #1
 800ca02:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLN = 55;
 800ca04:	2337      	movs	r3, #55	; 0x37
 800ca06:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800ca08:	2307      	movs	r3, #7
 800ca0a:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800ca0c:	2302      	movs	r3, #2
 800ca0e:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800ca10:	2302      	movs	r3, #2
 800ca12:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800ca14:	f107 0318 	add.w	r3, r7, #24
 800ca18:	4618      	mov	r0, r3
 800ca1a:	f005 fa21 	bl	8011e60 <HAL_RCC_OscConfig>
 800ca1e:	4603      	mov	r3, r0
 800ca20:	2b00      	cmp	r3, #0
 800ca22:	bf14      	ite	ne
 800ca24:	2301      	movne	r3, #1
 800ca26:	2300      	moveq	r3, #0
 800ca28:	b2db      	uxtb	r3, r3
 800ca2a:	2b00      	cmp	r3, #0
 800ca2c:	d001      	beq.n	800ca32 <_Z18SystemClock_Configv+0xa2>
  {
    Error_Handler();
 800ca2e:	f001 f858 	bl	800dae2 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800ca32:	230f      	movs	r3, #15
 800ca34:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800ca36:	2303      	movs	r3, #3
 800ca38:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800ca3a:	2300      	movs	r3, #0
 800ca3c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800ca3e:	2300      	movs	r3, #0
 800ca40:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800ca42:	2300      	movs	r3, #0
 800ca44:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800ca46:	1d3b      	adds	r3, r7, #4
 800ca48:	2105      	movs	r1, #5
 800ca4a:	4618      	mov	r0, r3
 800ca4c:	f005 fede 	bl	801280c <HAL_RCC_ClockConfig>
 800ca50:	4603      	mov	r3, r0
 800ca52:	2b00      	cmp	r3, #0
 800ca54:	bf14      	ite	ne
 800ca56:	2301      	movne	r3, #1
 800ca58:	2300      	moveq	r3, #0
 800ca5a:	b2db      	uxtb	r3, r3
 800ca5c:	2b00      	cmp	r3, #0
 800ca5e:	d001      	beq.n	800ca64 <_Z18SystemClock_Configv+0xd4>
  {
    Error_Handler();
 800ca60:	f001 f83f 	bl	800dae2 <Error_Handler>
  }
}
 800ca64:	bf00      	nop
 800ca66:	3760      	adds	r7, #96	; 0x60
 800ca68:	46bd      	mov	sp, r7
 800ca6a:	bd80      	pop	{r7, pc}
 800ca6c:	40021000 	.word	0x40021000

0800ca70 <_ZL12MX_ADC1_Initv>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800ca70:	b580      	push	{r7, lr}
 800ca72:	b08a      	sub	sp, #40	; 0x28
 800ca74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800ca76:	f107 031c 	add.w	r3, r7, #28
 800ca7a:	2200      	movs	r2, #0
 800ca7c:	601a      	str	r2, [r3, #0]
 800ca7e:	605a      	str	r2, [r3, #4]
 800ca80:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800ca82:	1d3b      	adds	r3, r7, #4
 800ca84:	2200      	movs	r2, #0
 800ca86:	601a      	str	r2, [r3, #0]
 800ca88:	605a      	str	r2, [r3, #4]
 800ca8a:	609a      	str	r2, [r3, #8]
 800ca8c:	60da      	str	r2, [r3, #12]
 800ca8e:	611a      	str	r2, [r3, #16]
 800ca90:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800ca92:	4b82      	ldr	r3, [pc, #520]	; (800cc9c <_ZL12MX_ADC1_Initv+0x22c>)
 800ca94:	4a82      	ldr	r2, [pc, #520]	; (800cca0 <_ZL12MX_ADC1_Initv+0x230>)
 800ca96:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800ca98:	4b80      	ldr	r3, [pc, #512]	; (800cc9c <_ZL12MX_ADC1_Initv+0x22c>)
 800ca9a:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800ca9e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800caa0:	4b7e      	ldr	r3, [pc, #504]	; (800cc9c <_ZL12MX_ADC1_Initv+0x22c>)
 800caa2:	2200      	movs	r2, #0
 800caa4:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800caa6:	4b7d      	ldr	r3, [pc, #500]	; (800cc9c <_ZL12MX_ADC1_Initv+0x22c>)
 800caa8:	2200      	movs	r2, #0
 800caaa:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800caac:	4b7b      	ldr	r3, [pc, #492]	; (800cc9c <_ZL12MX_ADC1_Initv+0x22c>)
 800caae:	2201      	movs	r2, #1
 800cab0:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 800cab2:	4b7a      	ldr	r3, [pc, #488]	; (800cc9c <_ZL12MX_ADC1_Initv+0x22c>)
 800cab4:	2208      	movs	r2, #8
 800cab6:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = ENABLE;
 800cab8:	4b78      	ldr	r3, [pc, #480]	; (800cc9c <_ZL12MX_ADC1_Initv+0x22c>)
 800caba:	2201      	movs	r2, #1
 800cabc:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800cabe:	4b77      	ldr	r3, [pc, #476]	; (800cc9c <_ZL12MX_ADC1_Initv+0x22c>)
 800cac0:	2200      	movs	r2, #0
 800cac2:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 8;
 800cac4:	4b75      	ldr	r3, [pc, #468]	; (800cc9c <_ZL12MX_ADC1_Initv+0x22c>)
 800cac6:	2208      	movs	r2, #8
 800cac8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800caca:	4b74      	ldr	r3, [pc, #464]	; (800cc9c <_ZL12MX_ADC1_Initv+0x22c>)
 800cacc:	2200      	movs	r2, #0
 800cace:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800cad2:	4b72      	ldr	r3, [pc, #456]	; (800cc9c <_ZL12MX_ADC1_Initv+0x22c>)
 800cad4:	2200      	movs	r2, #0
 800cad6:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800cad8:	4b70      	ldr	r3, [pc, #448]	; (800cc9c <_ZL12MX_ADC1_Initv+0x22c>)
 800cada:	2200      	movs	r2, #0
 800cadc:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800cade:	4b6f      	ldr	r3, [pc, #444]	; (800cc9c <_ZL12MX_ADC1_Initv+0x22c>)
 800cae0:	2201      	movs	r2, #1
 800cae2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 800cae6:	4b6d      	ldr	r3, [pc, #436]	; (800cc9c <_ZL12MX_ADC1_Initv+0x22c>)
 800cae8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800caec:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = ENABLE;
 800caee:	4b6b      	ldr	r3, [pc, #428]	; (800cc9c <_ZL12MX_ADC1_Initv+0x22c>)
 800caf0:	2201      	movs	r2, #1
 800caf2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Oversampling.Ratio = ADC_OVERSAMPLING_RATIO_64;
 800caf6:	4b69      	ldr	r3, [pc, #420]	; (800cc9c <_ZL12MX_ADC1_Initv+0x22c>)
 800caf8:	2214      	movs	r2, #20
 800cafa:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.Oversampling.RightBitShift = ADC_RIGHTBITSHIFT_6;
 800cafc:	4b67      	ldr	r3, [pc, #412]	; (800cc9c <_ZL12MX_ADC1_Initv+0x22c>)
 800cafe:	22c0      	movs	r2, #192	; 0xc0
 800cb00:	641a      	str	r2, [r3, #64]	; 0x40
  hadc1.Init.Oversampling.TriggeredMode = ADC_TRIGGEREDMODE_SINGLE_TRIGGER;
 800cb02:	4b66      	ldr	r3, [pc, #408]	; (800cc9c <_ZL12MX_ADC1_Initv+0x22c>)
 800cb04:	2200      	movs	r2, #0
 800cb06:	645a      	str	r2, [r3, #68]	; 0x44
  hadc1.Init.Oversampling.OversamplingStopReset = ADC_REGOVERSAMPLING_CONTINUED_MODE;
 800cb08:	4b64      	ldr	r3, [pc, #400]	; (800cc9c <_ZL12MX_ADC1_Initv+0x22c>)
 800cb0a:	2201      	movs	r2, #1
 800cb0c:	649a      	str	r2, [r3, #72]	; 0x48
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800cb0e:	4863      	ldr	r0, [pc, #396]	; (800cc9c <_ZL12MX_ADC1_Initv+0x22c>)
 800cb10:	f002 f9a8 	bl	800ee64 <HAL_ADC_Init>
 800cb14:	4603      	mov	r3, r0
 800cb16:	2b00      	cmp	r3, #0
 800cb18:	bf14      	ite	ne
 800cb1a:	2301      	movne	r3, #1
 800cb1c:	2300      	moveq	r3, #0
 800cb1e:	b2db      	uxtb	r3, r3
 800cb20:	2b00      	cmp	r3, #0
 800cb22:	d001      	beq.n	800cb28 <_ZL12MX_ADC1_Initv+0xb8>
  {
    Error_Handler();
 800cb24:	f000 ffdd 	bl	800dae2 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800cb28:	2300      	movs	r3, #0
 800cb2a:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800cb2c:	f107 031c 	add.w	r3, r7, #28
 800cb30:	4619      	mov	r1, r3
 800cb32:	485a      	ldr	r0, [pc, #360]	; (800cc9c <_ZL12MX_ADC1_Initv+0x22c>)
 800cb34:	f003 fb2a 	bl	801018c <HAL_ADCEx_MultiModeConfigChannel>
 800cb38:	4603      	mov	r3, r0
 800cb3a:	2b00      	cmp	r3, #0
 800cb3c:	bf14      	ite	ne
 800cb3e:	2301      	movne	r3, #1
 800cb40:	2300      	moveq	r3, #0
 800cb42:	b2db      	uxtb	r3, r3
 800cb44:	2b00      	cmp	r3, #0
 800cb46:	d001      	beq.n	800cb4c <_ZL12MX_ADC1_Initv+0xdc>
  {
    Error_Handler();
 800cb48:	f000 ffcb 	bl	800dae2 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800cb4c:	4b55      	ldr	r3, [pc, #340]	; (800cca4 <_ZL12MX_ADC1_Initv+0x234>)
 800cb4e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800cb50:	2306      	movs	r3, #6
 800cb52:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_6CYCLES_5;
 800cb54:	2301      	movs	r3, #1
 800cb56:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800cb58:	237f      	movs	r3, #127	; 0x7f
 800cb5a:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800cb5c:	2304      	movs	r3, #4
 800cb5e:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800cb60:	2300      	movs	r3, #0
 800cb62:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800cb64:	1d3b      	adds	r3, r7, #4
 800cb66:	4619      	mov	r1, r3
 800cb68:	484c      	ldr	r0, [pc, #304]	; (800cc9c <_ZL12MX_ADC1_Initv+0x22c>)
 800cb6a:	f002 fdb3 	bl	800f6d4 <HAL_ADC_ConfigChannel>
 800cb6e:	4603      	mov	r3, r0
 800cb70:	2b00      	cmp	r3, #0
 800cb72:	bf14      	ite	ne
 800cb74:	2301      	movne	r3, #1
 800cb76:	2300      	moveq	r3, #0
 800cb78:	b2db      	uxtb	r3, r3
 800cb7a:	2b00      	cmp	r3, #0
 800cb7c:	d001      	beq.n	800cb82 <_ZL12MX_ADC1_Initv+0x112>
  {
    Error_Handler();
 800cb7e:	f000 ffb0 	bl	800dae2 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 800cb82:	4b49      	ldr	r3, [pc, #292]	; (800cca8 <_ZL12MX_ADC1_Initv+0x238>)
 800cb84:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800cb86:	230c      	movs	r3, #12
 800cb88:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800cb8a:	1d3b      	adds	r3, r7, #4
 800cb8c:	4619      	mov	r1, r3
 800cb8e:	4843      	ldr	r0, [pc, #268]	; (800cc9c <_ZL12MX_ADC1_Initv+0x22c>)
 800cb90:	f002 fda0 	bl	800f6d4 <HAL_ADC_ConfigChannel>
 800cb94:	4603      	mov	r3, r0
 800cb96:	2b00      	cmp	r3, #0
 800cb98:	bf14      	ite	ne
 800cb9a:	2301      	movne	r3, #1
 800cb9c:	2300      	moveq	r3, #0
 800cb9e:	b2db      	uxtb	r3, r3
 800cba0:	2b00      	cmp	r3, #0
 800cba2:	d001      	beq.n	800cba8 <_ZL12MX_ADC1_Initv+0x138>
  {
    Error_Handler();
 800cba4:	f000 ff9d 	bl	800dae2 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800cba8:	4b40      	ldr	r3, [pc, #256]	; (800ccac <_ZL12MX_ADC1_Initv+0x23c>)
 800cbaa:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 800cbac:	2312      	movs	r3, #18
 800cbae:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800cbb0:	1d3b      	adds	r3, r7, #4
 800cbb2:	4619      	mov	r1, r3
 800cbb4:	4839      	ldr	r0, [pc, #228]	; (800cc9c <_ZL12MX_ADC1_Initv+0x22c>)
 800cbb6:	f002 fd8d 	bl	800f6d4 <HAL_ADC_ConfigChannel>
 800cbba:	4603      	mov	r3, r0
 800cbbc:	2b00      	cmp	r3, #0
 800cbbe:	bf14      	ite	ne
 800cbc0:	2301      	movne	r3, #1
 800cbc2:	2300      	moveq	r3, #0
 800cbc4:	b2db      	uxtb	r3, r3
 800cbc6:	2b00      	cmp	r3, #0
 800cbc8:	d001      	beq.n	800cbce <_ZL12MX_ADC1_Initv+0x15e>
  {
    Error_Handler();
 800cbca:	f000 ff8a 	bl	800dae2 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 800cbce:	4b38      	ldr	r3, [pc, #224]	; (800ccb0 <_ZL12MX_ADC1_Initv+0x240>)
 800cbd0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 800cbd2:	2318      	movs	r3, #24
 800cbd4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800cbd6:	1d3b      	adds	r3, r7, #4
 800cbd8:	4619      	mov	r1, r3
 800cbda:	4830      	ldr	r0, [pc, #192]	; (800cc9c <_ZL12MX_ADC1_Initv+0x22c>)
 800cbdc:	f002 fd7a 	bl	800f6d4 <HAL_ADC_ConfigChannel>
 800cbe0:	4603      	mov	r3, r0
 800cbe2:	2b00      	cmp	r3, #0
 800cbe4:	bf14      	ite	ne
 800cbe6:	2301      	movne	r3, #1
 800cbe8:	2300      	moveq	r3, #0
 800cbea:	b2db      	uxtb	r3, r3
 800cbec:	2b00      	cmp	r3, #0
 800cbee:	d001      	beq.n	800cbf4 <_ZL12MX_ADC1_Initv+0x184>
  {
    Error_Handler();
 800cbf0:	f000 ff77 	bl	800dae2 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 800cbf4:	4b2f      	ldr	r3, [pc, #188]	; (800ccb4 <_ZL12MX_ADC1_Initv+0x244>)
 800cbf6:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 800cbf8:	f44f 7380 	mov.w	r3, #256	; 0x100
 800cbfc:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800cbfe:	1d3b      	adds	r3, r7, #4
 800cc00:	4619      	mov	r1, r3
 800cc02:	4826      	ldr	r0, [pc, #152]	; (800cc9c <_ZL12MX_ADC1_Initv+0x22c>)
 800cc04:	f002 fd66 	bl	800f6d4 <HAL_ADC_ConfigChannel>
 800cc08:	4603      	mov	r3, r0
 800cc0a:	2b00      	cmp	r3, #0
 800cc0c:	bf14      	ite	ne
 800cc0e:	2301      	movne	r3, #1
 800cc10:	2300      	moveq	r3, #0
 800cc12:	b2db      	uxtb	r3, r3
 800cc14:	2b00      	cmp	r3, #0
 800cc16:	d001      	beq.n	800cc1c <_ZL12MX_ADC1_Initv+0x1ac>
  {
    Error_Handler();
 800cc18:	f000 ff63 	bl	800dae2 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 800cc1c:	4b26      	ldr	r3, [pc, #152]	; (800ccb8 <_ZL12MX_ADC1_Initv+0x248>)
 800cc1e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 800cc20:	f44f 7383 	mov.w	r3, #262	; 0x106
 800cc24:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800cc26:	1d3b      	adds	r3, r7, #4
 800cc28:	4619      	mov	r1, r3
 800cc2a:	481c      	ldr	r0, [pc, #112]	; (800cc9c <_ZL12MX_ADC1_Initv+0x22c>)
 800cc2c:	f002 fd52 	bl	800f6d4 <HAL_ADC_ConfigChannel>
 800cc30:	4603      	mov	r3, r0
 800cc32:	2b00      	cmp	r3, #0
 800cc34:	bf14      	ite	ne
 800cc36:	2301      	movne	r3, #1
 800cc38:	2300      	moveq	r3, #0
 800cc3a:	b2db      	uxtb	r3, r3
 800cc3c:	2b00      	cmp	r3, #0
 800cc3e:	d001      	beq.n	800cc44 <_ZL12MX_ADC1_Initv+0x1d4>
  {
    Error_Handler();
 800cc40:	f000 ff4f 	bl	800dae2 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_12;
 800cc44:	4b1d      	ldr	r3, [pc, #116]	; (800ccbc <_ZL12MX_ADC1_Initv+0x24c>)
 800cc46:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 800cc48:	f44f 7386 	mov.w	r3, #268	; 0x10c
 800cc4c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800cc4e:	1d3b      	adds	r3, r7, #4
 800cc50:	4619      	mov	r1, r3
 800cc52:	4812      	ldr	r0, [pc, #72]	; (800cc9c <_ZL12MX_ADC1_Initv+0x22c>)
 800cc54:	f002 fd3e 	bl	800f6d4 <HAL_ADC_ConfigChannel>
 800cc58:	4603      	mov	r3, r0
 800cc5a:	2b00      	cmp	r3, #0
 800cc5c:	bf14      	ite	ne
 800cc5e:	2301      	movne	r3, #1
 800cc60:	2300      	moveq	r3, #0
 800cc62:	b2db      	uxtb	r3, r3
 800cc64:	2b00      	cmp	r3, #0
 800cc66:	d001      	beq.n	800cc6c <_ZL12MX_ADC1_Initv+0x1fc>
  {
    Error_Handler();
 800cc68:	f000 ff3b 	bl	800dae2 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_16;
 800cc6c:	4b14      	ldr	r3, [pc, #80]	; (800ccc0 <_ZL12MX_ADC1_Initv+0x250>)
 800cc6e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_8;
 800cc70:	f44f 7389 	mov.w	r3, #274	; 0x112
 800cc74:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800cc76:	1d3b      	adds	r3, r7, #4
 800cc78:	4619      	mov	r1, r3
 800cc7a:	4808      	ldr	r0, [pc, #32]	; (800cc9c <_ZL12MX_ADC1_Initv+0x22c>)
 800cc7c:	f002 fd2a 	bl	800f6d4 <HAL_ADC_ConfigChannel>
 800cc80:	4603      	mov	r3, r0
 800cc82:	2b00      	cmp	r3, #0
 800cc84:	bf14      	ite	ne
 800cc86:	2301      	movne	r3, #1
 800cc88:	2300      	moveq	r3, #0
 800cc8a:	b2db      	uxtb	r3, r3
 800cc8c:	2b00      	cmp	r3, #0
 800cc8e:	d001      	beq.n	800cc94 <_ZL12MX_ADC1_Initv+0x224>
  {
    Error_Handler();
 800cc90:	f000 ff27 	bl	800dae2 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800cc94:	bf00      	nop
 800cc96:	3728      	adds	r7, #40	; 0x28
 800cc98:	46bd      	mov	sp, r7
 800cc9a:	bd80      	pop	{r7, pc}
 800cc9c:	200002e4 	.word	0x200002e4
 800cca0:	42028000 	.word	0x42028000
 800cca4:	04300002 	.word	0x04300002
 800cca8:	08600004 	.word	0x08600004
 800ccac:	0c900008 	.word	0x0c900008
 800ccb0:	1d500080 	.word	0x1d500080
 800ccb4:	21800100 	.word	0x21800100
 800ccb8:	25b00200 	.word	0x25b00200
 800ccbc:	32601000 	.word	0x32601000
 800ccc0:	43210000 	.word	0x43210000

0800ccc4 <_ZL12MX_I2C1_Initv>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800ccc4:	b580      	push	{r7, lr}
 800ccc6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800ccc8:	4b22      	ldr	r3, [pc, #136]	; (800cd54 <_ZL12MX_I2C1_Initv+0x90>)
 800ccca:	4a23      	ldr	r2, [pc, #140]	; (800cd58 <_ZL12MX_I2C1_Initv+0x94>)
 800cccc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x60514452;
 800ccce:	4b21      	ldr	r3, [pc, #132]	; (800cd54 <_ZL12MX_I2C1_Initv+0x90>)
 800ccd0:	4a22      	ldr	r2, [pc, #136]	; (800cd5c <_ZL12MX_I2C1_Initv+0x98>)
 800ccd2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800ccd4:	4b1f      	ldr	r3, [pc, #124]	; (800cd54 <_ZL12MX_I2C1_Initv+0x90>)
 800ccd6:	2200      	movs	r2, #0
 800ccd8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800ccda:	4b1e      	ldr	r3, [pc, #120]	; (800cd54 <_ZL12MX_I2C1_Initv+0x90>)
 800ccdc:	2201      	movs	r2, #1
 800ccde:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800cce0:	4b1c      	ldr	r3, [pc, #112]	; (800cd54 <_ZL12MX_I2C1_Initv+0x90>)
 800cce2:	2200      	movs	r2, #0
 800cce4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800cce6:	4b1b      	ldr	r3, [pc, #108]	; (800cd54 <_ZL12MX_I2C1_Initv+0x90>)
 800cce8:	2200      	movs	r2, #0
 800ccea:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800ccec:	4b19      	ldr	r3, [pc, #100]	; (800cd54 <_ZL12MX_I2C1_Initv+0x90>)
 800ccee:	2200      	movs	r2, #0
 800ccf0:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800ccf2:	4b18      	ldr	r3, [pc, #96]	; (800cd54 <_ZL12MX_I2C1_Initv+0x90>)
 800ccf4:	2200      	movs	r2, #0
 800ccf6:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800ccf8:	4b16      	ldr	r3, [pc, #88]	; (800cd54 <_ZL12MX_I2C1_Initv+0x90>)
 800ccfa:	2200      	movs	r2, #0
 800ccfc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800ccfe:	4815      	ldr	r0, [pc, #84]	; (800cd54 <_ZL12MX_I2C1_Initv+0x90>)
 800cd00:	f004 f928 	bl	8010f54 <HAL_I2C_Init>
 800cd04:	4603      	mov	r3, r0
 800cd06:	2b00      	cmp	r3, #0
 800cd08:	bf14      	ite	ne
 800cd0a:	2301      	movne	r3, #1
 800cd0c:	2300      	moveq	r3, #0
 800cd0e:	b2db      	uxtb	r3, r3
 800cd10:	2b00      	cmp	r3, #0
 800cd12:	d001      	beq.n	800cd18 <_ZL12MX_I2C1_Initv+0x54>
  {
    Error_Handler();
 800cd14:	f000 fee5 	bl	800dae2 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800cd18:	2100      	movs	r1, #0
 800cd1a:	480e      	ldr	r0, [pc, #56]	; (800cd54 <_ZL12MX_I2C1_Initv+0x90>)
 800cd1c:	f004 fe26 	bl	801196c <HAL_I2CEx_ConfigAnalogFilter>
 800cd20:	4603      	mov	r3, r0
 800cd22:	2b00      	cmp	r3, #0
 800cd24:	bf14      	ite	ne
 800cd26:	2301      	movne	r3, #1
 800cd28:	2300      	moveq	r3, #0
 800cd2a:	b2db      	uxtb	r3, r3
 800cd2c:	2b00      	cmp	r3, #0
 800cd2e:	d001      	beq.n	800cd34 <_ZL12MX_I2C1_Initv+0x70>
  {
    Error_Handler();
 800cd30:	f000 fed7 	bl	800dae2 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800cd34:	2100      	movs	r1, #0
 800cd36:	4807      	ldr	r0, [pc, #28]	; (800cd54 <_ZL12MX_I2C1_Initv+0x90>)
 800cd38:	f004 fe63 	bl	8011a02 <HAL_I2CEx_ConfigDigitalFilter>
 800cd3c:	4603      	mov	r3, r0
 800cd3e:	2b00      	cmp	r3, #0
 800cd40:	bf14      	ite	ne
 800cd42:	2301      	movne	r3, #1
 800cd44:	2300      	moveq	r3, #0
 800cd46:	b2db      	uxtb	r3, r3
 800cd48:	2b00      	cmp	r3, #0
 800cd4a:	d001      	beq.n	800cd50 <_ZL12MX_I2C1_Initv+0x8c>
  {
    Error_Handler();
 800cd4c:	f000 fec9 	bl	800dae2 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800cd50:	bf00      	nop
 800cd52:	bd80      	pop	{r7, pc}
 800cd54:	200003b4 	.word	0x200003b4
 800cd58:	40005400 	.word	0x40005400
 800cd5c:	60514452 	.word	0x60514452

0800cd60 <_ZL14MX_ICACHE_Initv>:
  * @brief ICACHE Initialization Function
  * @param None
  * @retval None
  */
static void MX_ICACHE_Init(void)
{
 800cd60:	b580      	push	{r7, lr}
 800cd62:	af00      	add	r7, sp, #0

  /* USER CODE END ICACHE_Init 1 */

  /** Enable instruction cache in 1-way (direct mapped cache)
  */
  if (HAL_ICACHE_ConfigAssociativityMode(ICACHE_1WAY) != HAL_OK)
 800cd64:	2000      	movs	r0, #0
 800cd66:	f004 fe99 	bl	8011a9c <HAL_ICACHE_ConfigAssociativityMode>
 800cd6a:	4603      	mov	r3, r0
 800cd6c:	2b00      	cmp	r3, #0
 800cd6e:	bf14      	ite	ne
 800cd70:	2301      	movne	r3, #1
 800cd72:	2300      	moveq	r3, #0
 800cd74:	b2db      	uxtb	r3, r3
 800cd76:	2b00      	cmp	r3, #0
 800cd78:	d001      	beq.n	800cd7e <_ZL14MX_ICACHE_Initv+0x1e>
  {
    Error_Handler();
 800cd7a:	f000 feb2 	bl	800dae2 <Error_Handler>
  }
  if (HAL_ICACHE_Enable() != HAL_OK)
 800cd7e:	f004 fead 	bl	8011adc <HAL_ICACHE_Enable>
 800cd82:	4603      	mov	r3, r0
 800cd84:	2b00      	cmp	r3, #0
 800cd86:	bf14      	ite	ne
 800cd88:	2301      	movne	r3, #1
 800cd8a:	2300      	moveq	r3, #0
 800cd8c:	b2db      	uxtb	r3, r3
 800cd8e:	2b00      	cmp	r3, #0
 800cd90:	d001      	beq.n	800cd96 <_ZL14MX_ICACHE_Initv+0x36>
  {
    Error_Handler();
 800cd92:	f000 fea6 	bl	800dae2 <Error_Handler>
  }
  /* USER CODE BEGIN ICACHE_Init 2 */

  /* USER CODE END ICACHE_Init 2 */

}
 800cd96:	bf00      	nop
 800cd98:	bd80      	pop	{r7, pc}
	...

0800cd9c <_ZL20MX_LPUART1_UART_Initv>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 800cd9c:	b580      	push	{r7, lr}
 800cd9e:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 800cda0:	4b2c      	ldr	r3, [pc, #176]	; (800ce54 <_ZL20MX_LPUART1_UART_Initv+0xb8>)
 800cda2:	4a2d      	ldr	r2, [pc, #180]	; (800ce58 <_ZL20MX_LPUART1_UART_Initv+0xbc>)
 800cda4:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 209700;
 800cda6:	4b2b      	ldr	r3, [pc, #172]	; (800ce54 <_ZL20MX_LPUART1_UART_Initv+0xb8>)
 800cda8:	4a2c      	ldr	r2, [pc, #176]	; (800ce5c <_ZL20MX_LPUART1_UART_Initv+0xc0>)
 800cdaa:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 800cdac:	4b29      	ldr	r3, [pc, #164]	; (800ce54 <_ZL20MX_LPUART1_UART_Initv+0xb8>)
 800cdae:	2200      	movs	r2, #0
 800cdb0:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 800cdb2:	4b28      	ldr	r3, [pc, #160]	; (800ce54 <_ZL20MX_LPUART1_UART_Initv+0xb8>)
 800cdb4:	2200      	movs	r2, #0
 800cdb6:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 800cdb8:	4b26      	ldr	r3, [pc, #152]	; (800ce54 <_ZL20MX_LPUART1_UART_Initv+0xb8>)
 800cdba:	2200      	movs	r2, #0
 800cdbc:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 800cdbe:	4b25      	ldr	r3, [pc, #148]	; (800ce54 <_ZL20MX_LPUART1_UART_Initv+0xb8>)
 800cdc0:	220c      	movs	r2, #12
 800cdc2:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800cdc4:	4b23      	ldr	r3, [pc, #140]	; (800ce54 <_ZL20MX_LPUART1_UART_Initv+0xb8>)
 800cdc6:	2200      	movs	r2, #0
 800cdc8:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800cdca:	4b22      	ldr	r3, [pc, #136]	; (800ce54 <_ZL20MX_LPUART1_UART_Initv+0xb8>)
 800cdcc:	2200      	movs	r2, #0
 800cdce:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800cdd0:	4b20      	ldr	r3, [pc, #128]	; (800ce54 <_ZL20MX_LPUART1_UART_Initv+0xb8>)
 800cdd2:	2200      	movs	r2, #0
 800cdd4:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800cdd6:	4b1f      	ldr	r3, [pc, #124]	; (800ce54 <_ZL20MX_LPUART1_UART_Initv+0xb8>)
 800cdd8:	2200      	movs	r2, #0
 800cdda:	629a      	str	r2, [r3, #40]	; 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 800cddc:	4b1d      	ldr	r3, [pc, #116]	; (800ce54 <_ZL20MX_LPUART1_UART_Initv+0xb8>)
 800cdde:	2200      	movs	r2, #0
 800cde0:	665a      	str	r2, [r3, #100]	; 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 800cde2:	481c      	ldr	r0, [pc, #112]	; (800ce54 <_ZL20MX_LPUART1_UART_Initv+0xb8>)
 800cde4:	f009 fd8e 	bl	8016904 <HAL_UART_Init>
 800cde8:	4603      	mov	r3, r0
 800cdea:	2b00      	cmp	r3, #0
 800cdec:	bf14      	ite	ne
 800cdee:	2301      	movne	r3, #1
 800cdf0:	2300      	moveq	r3, #0
 800cdf2:	b2db      	uxtb	r3, r3
 800cdf4:	2b00      	cmp	r3, #0
 800cdf6:	d001      	beq.n	800cdfc <_ZL20MX_LPUART1_UART_Initv+0x60>
  {
    Error_Handler();
 800cdf8:	f000 fe73 	bl	800dae2 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800cdfc:	2100      	movs	r1, #0
 800cdfe:	4815      	ldr	r0, [pc, #84]	; (800ce54 <_ZL20MX_LPUART1_UART_Initv+0xb8>)
 800ce00:	f00b fd51 	bl	80188a6 <HAL_UARTEx_SetTxFifoThreshold>
 800ce04:	4603      	mov	r3, r0
 800ce06:	2b00      	cmp	r3, #0
 800ce08:	bf14      	ite	ne
 800ce0a:	2301      	movne	r3, #1
 800ce0c:	2300      	moveq	r3, #0
 800ce0e:	b2db      	uxtb	r3, r3
 800ce10:	2b00      	cmp	r3, #0
 800ce12:	d001      	beq.n	800ce18 <_ZL20MX_LPUART1_UART_Initv+0x7c>
  {
    Error_Handler();
 800ce14:	f000 fe65 	bl	800dae2 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800ce18:	2100      	movs	r1, #0
 800ce1a:	480e      	ldr	r0, [pc, #56]	; (800ce54 <_ZL20MX_LPUART1_UART_Initv+0xb8>)
 800ce1c:	f00b fd81 	bl	8018922 <HAL_UARTEx_SetRxFifoThreshold>
 800ce20:	4603      	mov	r3, r0
 800ce22:	2b00      	cmp	r3, #0
 800ce24:	bf14      	ite	ne
 800ce26:	2301      	movne	r3, #1
 800ce28:	2300      	moveq	r3, #0
 800ce2a:	b2db      	uxtb	r3, r3
 800ce2c:	2b00      	cmp	r3, #0
 800ce2e:	d001      	beq.n	800ce34 <_ZL20MX_LPUART1_UART_Initv+0x98>
  {
    Error_Handler();
 800ce30:	f000 fe57 	bl	800dae2 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 800ce34:	4807      	ldr	r0, [pc, #28]	; (800ce54 <_ZL20MX_LPUART1_UART_Initv+0xb8>)
 800ce36:	f00b fcfd 	bl	8018834 <HAL_UARTEx_DisableFifoMode>
 800ce3a:	4603      	mov	r3, r0
 800ce3c:	2b00      	cmp	r3, #0
 800ce3e:	bf14      	ite	ne
 800ce40:	2301      	movne	r3, #1
 800ce42:	2300      	moveq	r3, #0
 800ce44:	b2db      	uxtb	r3, r3
 800ce46:	2b00      	cmp	r3, #0
 800ce48:	d001      	beq.n	800ce4e <_ZL20MX_LPUART1_UART_Initv+0xb2>
  {
    Error_Handler();
 800ce4a:	f000 fe4a 	bl	800dae2 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 800ce4e:	bf00      	nop
 800ce50:	bd80      	pop	{r7, pc}
 800ce52:	bf00      	nop
 800ce54:	20000408 	.word	0x20000408
 800ce58:	40008000 	.word	0x40008000
 800ce5c:	00033324 	.word	0x00033324

0800ce60 <_ZL13MX_UART4_Initv>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 800ce60:	b580      	push	{r7, lr}
 800ce62:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 800ce64:	4b2c      	ldr	r3, [pc, #176]	; (800cf18 <_ZL13MX_UART4_Initv+0xb8>)
 800ce66:	4a2d      	ldr	r2, [pc, #180]	; (800cf1c <_ZL13MX_UART4_Initv+0xbc>)
 800ce68:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 800ce6a:	4b2b      	ldr	r3, [pc, #172]	; (800cf18 <_ZL13MX_UART4_Initv+0xb8>)
 800ce6c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800ce70:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800ce72:	4b29      	ldr	r3, [pc, #164]	; (800cf18 <_ZL13MX_UART4_Initv+0xb8>)
 800ce74:	2200      	movs	r2, #0
 800ce76:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 800ce78:	4b27      	ldr	r3, [pc, #156]	; (800cf18 <_ZL13MX_UART4_Initv+0xb8>)
 800ce7a:	2200      	movs	r2, #0
 800ce7c:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800ce7e:	4b26      	ldr	r3, [pc, #152]	; (800cf18 <_ZL13MX_UART4_Initv+0xb8>)
 800ce80:	2200      	movs	r2, #0
 800ce82:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_RX;
 800ce84:	4b24      	ldr	r3, [pc, #144]	; (800cf18 <_ZL13MX_UART4_Initv+0xb8>)
 800ce86:	2204      	movs	r2, #4
 800ce88:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800ce8a:	4b23      	ldr	r3, [pc, #140]	; (800cf18 <_ZL13MX_UART4_Initv+0xb8>)
 800ce8c:	2200      	movs	r2, #0
 800ce8e:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 800ce90:	4b21      	ldr	r3, [pc, #132]	; (800cf18 <_ZL13MX_UART4_Initv+0xb8>)
 800ce92:	2200      	movs	r2, #0
 800ce94:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800ce96:	4b20      	ldr	r3, [pc, #128]	; (800cf18 <_ZL13MX_UART4_Initv+0xb8>)
 800ce98:	2200      	movs	r2, #0
 800ce9a:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800ce9c:	4b1e      	ldr	r3, [pc, #120]	; (800cf18 <_ZL13MX_UART4_Initv+0xb8>)
 800ce9e:	2200      	movs	r2, #0
 800cea0:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800cea2:	4b1d      	ldr	r3, [pc, #116]	; (800cf18 <_ZL13MX_UART4_Initv+0xb8>)
 800cea4:	2200      	movs	r2, #0
 800cea6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 800cea8:	481b      	ldr	r0, [pc, #108]	; (800cf18 <_ZL13MX_UART4_Initv+0xb8>)
 800ceaa:	f009 fd2b 	bl	8016904 <HAL_UART_Init>
 800ceae:	4603      	mov	r3, r0
 800ceb0:	2b00      	cmp	r3, #0
 800ceb2:	bf14      	ite	ne
 800ceb4:	2301      	movne	r3, #1
 800ceb6:	2300      	moveq	r3, #0
 800ceb8:	b2db      	uxtb	r3, r3
 800ceba:	2b00      	cmp	r3, #0
 800cebc:	d001      	beq.n	800cec2 <_ZL13MX_UART4_Initv+0x62>
  {
    Error_Handler();
 800cebe:	f000 fe10 	bl	800dae2 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800cec2:	2100      	movs	r1, #0
 800cec4:	4814      	ldr	r0, [pc, #80]	; (800cf18 <_ZL13MX_UART4_Initv+0xb8>)
 800cec6:	f00b fcee 	bl	80188a6 <HAL_UARTEx_SetTxFifoThreshold>
 800ceca:	4603      	mov	r3, r0
 800cecc:	2b00      	cmp	r3, #0
 800cece:	bf14      	ite	ne
 800ced0:	2301      	movne	r3, #1
 800ced2:	2300      	moveq	r3, #0
 800ced4:	b2db      	uxtb	r3, r3
 800ced6:	2b00      	cmp	r3, #0
 800ced8:	d001      	beq.n	800cede <_ZL13MX_UART4_Initv+0x7e>
  {
    Error_Handler();
 800ceda:	f000 fe02 	bl	800dae2 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800cede:	2100      	movs	r1, #0
 800cee0:	480d      	ldr	r0, [pc, #52]	; (800cf18 <_ZL13MX_UART4_Initv+0xb8>)
 800cee2:	f00b fd1e 	bl	8018922 <HAL_UARTEx_SetRxFifoThreshold>
 800cee6:	4603      	mov	r3, r0
 800cee8:	2b00      	cmp	r3, #0
 800ceea:	bf14      	ite	ne
 800ceec:	2301      	movne	r3, #1
 800ceee:	2300      	moveq	r3, #0
 800cef0:	b2db      	uxtb	r3, r3
 800cef2:	2b00      	cmp	r3, #0
 800cef4:	d001      	beq.n	800cefa <_ZL13MX_UART4_Initv+0x9a>
  {
    Error_Handler();
 800cef6:	f000 fdf4 	bl	800dae2 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 800cefa:	4807      	ldr	r0, [pc, #28]	; (800cf18 <_ZL13MX_UART4_Initv+0xb8>)
 800cefc:	f00b fc9a 	bl	8018834 <HAL_UARTEx_DisableFifoMode>
 800cf00:	4603      	mov	r3, r0
 800cf02:	2b00      	cmp	r3, #0
 800cf04:	bf14      	ite	ne
 800cf06:	2301      	movne	r3, #1
 800cf08:	2300      	moveq	r3, #0
 800cf0a:	b2db      	uxtb	r3, r3
 800cf0c:	2b00      	cmp	r3, #0
 800cf0e:	d001      	beq.n	800cf14 <_ZL13MX_UART4_Initv+0xb4>
  {
    Error_Handler();
 800cf10:	f000 fde7 	bl	800dae2 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 800cf14:	bf00      	nop
 800cf16:	bd80      	pop	{r7, pc}
 800cf18:	2000049c 	.word	0x2000049c
 800cf1c:	40004c00 	.word	0x40004c00

0800cf20 <_ZL19MX_USART2_UART_Initv>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800cf20:	b580      	push	{r7, lr}
 800cf22:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800cf24:	4b2c      	ldr	r3, [pc, #176]	; (800cfd8 <_ZL19MX_USART2_UART_Initv+0xb8>)
 800cf26:	4a2d      	ldr	r2, [pc, #180]	; (800cfdc <_ZL19MX_USART2_UART_Initv+0xbc>)
 800cf28:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800cf2a:	4b2b      	ldr	r3, [pc, #172]	; (800cfd8 <_ZL19MX_USART2_UART_Initv+0xb8>)
 800cf2c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800cf30:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800cf32:	4b29      	ldr	r3, [pc, #164]	; (800cfd8 <_ZL19MX_USART2_UART_Initv+0xb8>)
 800cf34:	2200      	movs	r2, #0
 800cf36:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800cf38:	4b27      	ldr	r3, [pc, #156]	; (800cfd8 <_ZL19MX_USART2_UART_Initv+0xb8>)
 800cf3a:	2200      	movs	r2, #0
 800cf3c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800cf3e:	4b26      	ldr	r3, [pc, #152]	; (800cfd8 <_ZL19MX_USART2_UART_Initv+0xb8>)
 800cf40:	2200      	movs	r2, #0
 800cf42:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX;
 800cf44:	4b24      	ldr	r3, [pc, #144]	; (800cfd8 <_ZL19MX_USART2_UART_Initv+0xb8>)
 800cf46:	2208      	movs	r2, #8
 800cf48:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800cf4a:	4b23      	ldr	r3, [pc, #140]	; (800cfd8 <_ZL19MX_USART2_UART_Initv+0xb8>)
 800cf4c:	2200      	movs	r2, #0
 800cf4e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800cf50:	4b21      	ldr	r3, [pc, #132]	; (800cfd8 <_ZL19MX_USART2_UART_Initv+0xb8>)
 800cf52:	2200      	movs	r2, #0
 800cf54:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800cf56:	4b20      	ldr	r3, [pc, #128]	; (800cfd8 <_ZL19MX_USART2_UART_Initv+0xb8>)
 800cf58:	2200      	movs	r2, #0
 800cf5a:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800cf5c:	4b1e      	ldr	r3, [pc, #120]	; (800cfd8 <_ZL19MX_USART2_UART_Initv+0xb8>)
 800cf5e:	2200      	movs	r2, #0
 800cf60:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800cf62:	4b1d      	ldr	r3, [pc, #116]	; (800cfd8 <_ZL19MX_USART2_UART_Initv+0xb8>)
 800cf64:	2200      	movs	r2, #0
 800cf66:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800cf68:	481b      	ldr	r0, [pc, #108]	; (800cfd8 <_ZL19MX_USART2_UART_Initv+0xb8>)
 800cf6a:	f009 fccb 	bl	8016904 <HAL_UART_Init>
 800cf6e:	4603      	mov	r3, r0
 800cf70:	2b00      	cmp	r3, #0
 800cf72:	bf14      	ite	ne
 800cf74:	2301      	movne	r3, #1
 800cf76:	2300      	moveq	r3, #0
 800cf78:	b2db      	uxtb	r3, r3
 800cf7a:	2b00      	cmp	r3, #0
 800cf7c:	d001      	beq.n	800cf82 <_ZL19MX_USART2_UART_Initv+0x62>
  {
    Error_Handler();
 800cf7e:	f000 fdb0 	bl	800dae2 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800cf82:	2100      	movs	r1, #0
 800cf84:	4814      	ldr	r0, [pc, #80]	; (800cfd8 <_ZL19MX_USART2_UART_Initv+0xb8>)
 800cf86:	f00b fc8e 	bl	80188a6 <HAL_UARTEx_SetTxFifoThreshold>
 800cf8a:	4603      	mov	r3, r0
 800cf8c:	2b00      	cmp	r3, #0
 800cf8e:	bf14      	ite	ne
 800cf90:	2301      	movne	r3, #1
 800cf92:	2300      	moveq	r3, #0
 800cf94:	b2db      	uxtb	r3, r3
 800cf96:	2b00      	cmp	r3, #0
 800cf98:	d001      	beq.n	800cf9e <_ZL19MX_USART2_UART_Initv+0x7e>
  {
    Error_Handler();
 800cf9a:	f000 fda2 	bl	800dae2 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800cf9e:	2100      	movs	r1, #0
 800cfa0:	480d      	ldr	r0, [pc, #52]	; (800cfd8 <_ZL19MX_USART2_UART_Initv+0xb8>)
 800cfa2:	f00b fcbe 	bl	8018922 <HAL_UARTEx_SetRxFifoThreshold>
 800cfa6:	4603      	mov	r3, r0
 800cfa8:	2b00      	cmp	r3, #0
 800cfaa:	bf14      	ite	ne
 800cfac:	2301      	movne	r3, #1
 800cfae:	2300      	moveq	r3, #0
 800cfb0:	b2db      	uxtb	r3, r3
 800cfb2:	2b00      	cmp	r3, #0
 800cfb4:	d001      	beq.n	800cfba <_ZL19MX_USART2_UART_Initv+0x9a>
  {
    Error_Handler();
 800cfb6:	f000 fd94 	bl	800dae2 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 800cfba:	4807      	ldr	r0, [pc, #28]	; (800cfd8 <_ZL19MX_USART2_UART_Initv+0xb8>)
 800cfbc:	f00b fc3a 	bl	8018834 <HAL_UARTEx_DisableFifoMode>
 800cfc0:	4603      	mov	r3, r0
 800cfc2:	2b00      	cmp	r3, #0
 800cfc4:	bf14      	ite	ne
 800cfc6:	2301      	movne	r3, #1
 800cfc8:	2300      	moveq	r3, #0
 800cfca:	b2db      	uxtb	r3, r3
 800cfcc:	2b00      	cmp	r3, #0
 800cfce:	d001      	beq.n	800cfd4 <_ZL19MX_USART2_UART_Initv+0xb4>
  {
    Error_Handler();
 800cfd0:	f000 fd87 	bl	800dae2 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800cfd4:	bf00      	nop
 800cfd6:	bd80      	pop	{r7, pc}
 800cfd8:	20000530 	.word	0x20000530
 800cfdc:	40004400 	.word	0x40004400

0800cfe0 <_ZL11MX_RTC_Initv>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 800cfe0:	b580      	push	{r7, lr}
 800cfe2:	b086      	sub	sp, #24
 800cfe4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_PrivilegeStateTypeDef privilegeState = {0};
 800cfe6:	463b      	mov	r3, r7
 800cfe8:	2200      	movs	r2, #0
 800cfea:	601a      	str	r2, [r3, #0]
 800cfec:	605a      	str	r2, [r3, #4]
 800cfee:	609a      	str	r2, [r3, #8]
 800cff0:	60da      	str	r2, [r3, #12]
 800cff2:	611a      	str	r2, [r3, #16]
 800cff4:	615a      	str	r2, [r3, #20]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800cff6:	4b22      	ldr	r3, [pc, #136]	; (800d080 <_ZL11MX_RTC_Initv+0xa0>)
 800cff8:	4a22      	ldr	r2, [pc, #136]	; (800d084 <_ZL11MX_RTC_Initv+0xa4>)
 800cffa:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800cffc:	4b20      	ldr	r3, [pc, #128]	; (800d080 <_ZL11MX_RTC_Initv+0xa0>)
 800cffe:	2200      	movs	r2, #0
 800d000:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 800d002:	4b1f      	ldr	r3, [pc, #124]	; (800d080 <_ZL11MX_RTC_Initv+0xa0>)
 800d004:	227f      	movs	r2, #127	; 0x7f
 800d006:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800d008:	4b1d      	ldr	r3, [pc, #116]	; (800d080 <_ZL11MX_RTC_Initv+0xa0>)
 800d00a:	22ff      	movs	r2, #255	; 0xff
 800d00c:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800d00e:	4b1c      	ldr	r3, [pc, #112]	; (800d080 <_ZL11MX_RTC_Initv+0xa0>)
 800d010:	2200      	movs	r2, #0
 800d012:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 800d014:	4b1a      	ldr	r3, [pc, #104]	; (800d080 <_ZL11MX_RTC_Initv+0xa0>)
 800d016:	2200      	movs	r2, #0
 800d018:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800d01a:	4b19      	ldr	r3, [pc, #100]	; (800d080 <_ZL11MX_RTC_Initv+0xa0>)
 800d01c:	2200      	movs	r2, #0
 800d01e:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800d020:	4b17      	ldr	r3, [pc, #92]	; (800d080 <_ZL11MX_RTC_Initv+0xa0>)
 800d022:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800d026:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 800d028:	4b15      	ldr	r3, [pc, #84]	; (800d080 <_ZL11MX_RTC_Initv+0xa0>)
 800d02a:	2200      	movs	r2, #0
 800d02c:	621a      	str	r2, [r3, #32]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800d02e:	4814      	ldr	r0, [pc, #80]	; (800d080 <_ZL11MX_RTC_Initv+0xa0>)
 800d030:	f006 fc18 	bl	8013864 <HAL_RTC_Init>
 800d034:	4603      	mov	r3, r0
 800d036:	2b00      	cmp	r3, #0
 800d038:	bf14      	ite	ne
 800d03a:	2301      	movne	r3, #1
 800d03c:	2300      	moveq	r3, #0
 800d03e:	b2db      	uxtb	r3, r3
 800d040:	2b00      	cmp	r3, #0
 800d042:	d001      	beq.n	800d048 <_ZL11MX_RTC_Initv+0x68>
  {
    Error_Handler();
 800d044:	f000 fd4d 	bl	800dae2 <Error_Handler>
  }
  privilegeState.rtcPrivilegeFull = RTC_PRIVILEGE_FULL_NO;
 800d048:	2300      	movs	r3, #0
 800d04a:	603b      	str	r3, [r7, #0]
  privilegeState.backupRegisterPrivZone = RTC_PRIVILEGE_BKUP_ZONE_NONE;
 800d04c:	2300      	movs	r3, #0
 800d04e:	60fb      	str	r3, [r7, #12]
  privilegeState.backupRegisterStartZone2 = RTC_BKP_DR0;
 800d050:	2300      	movs	r3, #0
 800d052:	613b      	str	r3, [r7, #16]
  privilegeState.backupRegisterStartZone3 = RTC_BKP_DR0;
 800d054:	2300      	movs	r3, #0
 800d056:	617b      	str	r3, [r7, #20]
  if (HAL_RTCEx_PrivilegeModeSet(&hrtc, &privilegeState) != HAL_OK)
 800d058:	463b      	mov	r3, r7
 800d05a:	4619      	mov	r1, r3
 800d05c:	4808      	ldr	r0, [pc, #32]	; (800d080 <_ZL11MX_RTC_Initv+0xa0>)
 800d05e:	f006 fd0f 	bl	8013a80 <HAL_RTCEx_PrivilegeModeSet>
 800d062:	4603      	mov	r3, r0
 800d064:	2b00      	cmp	r3, #0
 800d066:	bf14      	ite	ne
 800d068:	2301      	movne	r3, #1
 800d06a:	2300      	moveq	r3, #0
 800d06c:	b2db      	uxtb	r3, r3
 800d06e:	2b00      	cmp	r3, #0
 800d070:	d001      	beq.n	800d076 <_ZL11MX_RTC_Initv+0x96>
  {
    Error_Handler();
 800d072:	f000 fd36 	bl	800dae2 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800d076:	bf00      	nop
 800d078:	3718      	adds	r7, #24
 800d07a:	46bd      	mov	sp, r7
 800d07c:	bd80      	pop	{r7, pc}
 800d07e:	bf00      	nop
 800d080:	200005c4 	.word	0x200005c4
 800d084:	40002800 	.word	0x40002800

0800d088 <_ZL12MX_SPI1_Initv>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800d088:	b580      	push	{r7, lr}
 800d08a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800d08c:	4b1d      	ldr	r3, [pc, #116]	; (800d104 <_ZL12MX_SPI1_Initv+0x7c>)
 800d08e:	4a1e      	ldr	r2, [pc, #120]	; (800d108 <_ZL12MX_SPI1_Initv+0x80>)
 800d090:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800d092:	4b1c      	ldr	r3, [pc, #112]	; (800d104 <_ZL12MX_SPI1_Initv+0x7c>)
 800d094:	f44f 7282 	mov.w	r2, #260	; 0x104
 800d098:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800d09a:	4b1a      	ldr	r3, [pc, #104]	; (800d104 <_ZL12MX_SPI1_Initv+0x7c>)
 800d09c:	2200      	movs	r2, #0
 800d09e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800d0a0:	4b18      	ldr	r3, [pc, #96]	; (800d104 <_ZL12MX_SPI1_Initv+0x7c>)
 800d0a2:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800d0a6:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800d0a8:	4b16      	ldr	r3, [pc, #88]	; (800d104 <_ZL12MX_SPI1_Initv+0x7c>)
 800d0aa:	2200      	movs	r2, #0
 800d0ac:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800d0ae:	4b15      	ldr	r3, [pc, #84]	; (800d104 <_ZL12MX_SPI1_Initv+0x7c>)
 800d0b0:	2200      	movs	r2, #0
 800d0b2:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800d0b4:	4b13      	ldr	r3, [pc, #76]	; (800d104 <_ZL12MX_SPI1_Initv+0x7c>)
 800d0b6:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d0ba:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 800d0bc:	4b11      	ldr	r3, [pc, #68]	; (800d104 <_ZL12MX_SPI1_Initv+0x7c>)
 800d0be:	2228      	movs	r2, #40	; 0x28
 800d0c0:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800d0c2:	4b10      	ldr	r3, [pc, #64]	; (800d104 <_ZL12MX_SPI1_Initv+0x7c>)
 800d0c4:	2200      	movs	r2, #0
 800d0c6:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800d0c8:	4b0e      	ldr	r3, [pc, #56]	; (800d104 <_ZL12MX_SPI1_Initv+0x7c>)
 800d0ca:	2200      	movs	r2, #0
 800d0cc:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800d0ce:	4b0d      	ldr	r3, [pc, #52]	; (800d104 <_ZL12MX_SPI1_Initv+0x7c>)
 800d0d0:	2200      	movs	r2, #0
 800d0d2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 800d0d4:	4b0b      	ldr	r3, [pc, #44]	; (800d104 <_ZL12MX_SPI1_Initv+0x7c>)
 800d0d6:	2207      	movs	r2, #7
 800d0d8:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800d0da:	4b0a      	ldr	r3, [pc, #40]	; (800d104 <_ZL12MX_SPI1_Initv+0x7c>)
 800d0dc:	2200      	movs	r2, #0
 800d0de:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800d0e0:	4b08      	ldr	r3, [pc, #32]	; (800d104 <_ZL12MX_SPI1_Initv+0x7c>)
 800d0e2:	2208      	movs	r2, #8
 800d0e4:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800d0e6:	4807      	ldr	r0, [pc, #28]	; (800d104 <_ZL12MX_SPI1_Initv+0x7c>)
 800d0e8:	f006 fcf6 	bl	8013ad8 <HAL_SPI_Init>
 800d0ec:	4603      	mov	r3, r0
 800d0ee:	2b00      	cmp	r3, #0
 800d0f0:	bf14      	ite	ne
 800d0f2:	2301      	movne	r3, #1
 800d0f4:	2300      	moveq	r3, #0
 800d0f6:	b2db      	uxtb	r3, r3
 800d0f8:	2b00      	cmp	r3, #0
 800d0fa:	d001      	beq.n	800d100 <_ZL12MX_SPI1_Initv+0x78>
  {
    Error_Handler();
 800d0fc:	f000 fcf1 	bl	800dae2 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800d100:	bf00      	nop
 800d102:	bd80      	pop	{r7, pc}
 800d104:	200005ec 	.word	0x200005ec
 800d108:	40013000 	.word	0x40013000

0800d10c <_ZL12MX_SPI2_Initv>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 800d10c:	b580      	push	{r7, lr}
 800d10e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 800d110:	4b1d      	ldr	r3, [pc, #116]	; (800d188 <_ZL12MX_SPI2_Initv+0x7c>)
 800d112:	4a1e      	ldr	r2, [pc, #120]	; (800d18c <_ZL12MX_SPI2_Initv+0x80>)
 800d114:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800d116:	4b1c      	ldr	r3, [pc, #112]	; (800d188 <_ZL12MX_SPI2_Initv+0x7c>)
 800d118:	f44f 7282 	mov.w	r2, #260	; 0x104
 800d11c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800d11e:	4b1a      	ldr	r3, [pc, #104]	; (800d188 <_ZL12MX_SPI2_Initv+0x7c>)
 800d120:	2200      	movs	r2, #0
 800d122:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800d124:	4b18      	ldr	r3, [pc, #96]	; (800d188 <_ZL12MX_SPI2_Initv+0x7c>)
 800d126:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800d12a:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800d12c:	4b16      	ldr	r3, [pc, #88]	; (800d188 <_ZL12MX_SPI2_Initv+0x7c>)
 800d12e:	2200      	movs	r2, #0
 800d130:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800d132:	4b15      	ldr	r3, [pc, #84]	; (800d188 <_ZL12MX_SPI2_Initv+0x7c>)
 800d134:	2200      	movs	r2, #0
 800d136:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800d138:	4b13      	ldr	r3, [pc, #76]	; (800d188 <_ZL12MX_SPI2_Initv+0x7c>)
 800d13a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d13e:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800d140:	4b11      	ldr	r3, [pc, #68]	; (800d188 <_ZL12MX_SPI2_Initv+0x7c>)
 800d142:	2218      	movs	r2, #24
 800d144:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_LSB;
 800d146:	4b10      	ldr	r3, [pc, #64]	; (800d188 <_ZL12MX_SPI2_Initv+0x7c>)
 800d148:	2280      	movs	r2, #128	; 0x80
 800d14a:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800d14c:	4b0e      	ldr	r3, [pc, #56]	; (800d188 <_ZL12MX_SPI2_Initv+0x7c>)
 800d14e:	2200      	movs	r2, #0
 800d150:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800d152:	4b0d      	ldr	r3, [pc, #52]	; (800d188 <_ZL12MX_SPI2_Initv+0x7c>)
 800d154:	2200      	movs	r2, #0
 800d156:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 800d158:	4b0b      	ldr	r3, [pc, #44]	; (800d188 <_ZL12MX_SPI2_Initv+0x7c>)
 800d15a:	2207      	movs	r2, #7
 800d15c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800d15e:	4b0a      	ldr	r3, [pc, #40]	; (800d188 <_ZL12MX_SPI2_Initv+0x7c>)
 800d160:	2200      	movs	r2, #0
 800d162:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800d164:	4b08      	ldr	r3, [pc, #32]	; (800d188 <_ZL12MX_SPI2_Initv+0x7c>)
 800d166:	2208      	movs	r2, #8
 800d168:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800d16a:	4807      	ldr	r0, [pc, #28]	; (800d188 <_ZL12MX_SPI2_Initv+0x7c>)
 800d16c:	f006 fcb4 	bl	8013ad8 <HAL_SPI_Init>
 800d170:	4603      	mov	r3, r0
 800d172:	2b00      	cmp	r3, #0
 800d174:	bf14      	ite	ne
 800d176:	2301      	movne	r3, #1
 800d178:	2300      	moveq	r3, #0
 800d17a:	b2db      	uxtb	r3, r3
 800d17c:	2b00      	cmp	r3, #0
 800d17e:	d001      	beq.n	800d184 <_ZL12MX_SPI2_Initv+0x78>
  {
    Error_Handler();
 800d180:	f000 fcaf 	bl	800dae2 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800d184:	bf00      	nop
 800d186:	bd80      	pop	{r7, pc}
 800d188:	20000650 	.word	0x20000650
 800d18c:	40003800 	.word	0x40003800

0800d190 <_ZL12MX_SPI3_Initv>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 800d190:	b580      	push	{r7, lr}
 800d192:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 800d194:	4b1d      	ldr	r3, [pc, #116]	; (800d20c <_ZL12MX_SPI3_Initv+0x7c>)
 800d196:	4a1e      	ldr	r2, [pc, #120]	; (800d210 <_ZL12MX_SPI3_Initv+0x80>)
 800d198:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800d19a:	4b1c      	ldr	r3, [pc, #112]	; (800d20c <_ZL12MX_SPI3_Initv+0x7c>)
 800d19c:	f44f 7282 	mov.w	r2, #260	; 0x104
 800d1a0:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800d1a2:	4b1a      	ldr	r3, [pc, #104]	; (800d20c <_ZL12MX_SPI3_Initv+0x7c>)
 800d1a4:	2200      	movs	r2, #0
 800d1a6:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 800d1a8:	4b18      	ldr	r3, [pc, #96]	; (800d20c <_ZL12MX_SPI3_Initv+0x7c>)
 800d1aa:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800d1ae:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 800d1b0:	4b16      	ldr	r3, [pc, #88]	; (800d20c <_ZL12MX_SPI3_Initv+0x7c>)
 800d1b2:	2200      	movs	r2, #0
 800d1b4:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 800d1b6:	4b15      	ldr	r3, [pc, #84]	; (800d20c <_ZL12MX_SPI3_Initv+0x7c>)
 800d1b8:	2200      	movs	r2, #0
 800d1ba:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 800d1bc:	4b13      	ldr	r3, [pc, #76]	; (800d20c <_ZL12MX_SPI3_Initv+0x7c>)
 800d1be:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d1c2:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800d1c4:	4b11      	ldr	r3, [pc, #68]	; (800d20c <_ZL12MX_SPI3_Initv+0x7c>)
 800d1c6:	2218      	movs	r2, #24
 800d1c8:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800d1ca:	4b10      	ldr	r3, [pc, #64]	; (800d20c <_ZL12MX_SPI3_Initv+0x7c>)
 800d1cc:	2200      	movs	r2, #0
 800d1ce:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 800d1d0:	4b0e      	ldr	r3, [pc, #56]	; (800d20c <_ZL12MX_SPI3_Initv+0x7c>)
 800d1d2:	2200      	movs	r2, #0
 800d1d4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800d1d6:	4b0d      	ldr	r3, [pc, #52]	; (800d20c <_ZL12MX_SPI3_Initv+0x7c>)
 800d1d8:	2200      	movs	r2, #0
 800d1da:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 800d1dc:	4b0b      	ldr	r3, [pc, #44]	; (800d20c <_ZL12MX_SPI3_Initv+0x7c>)
 800d1de:	2207      	movs	r2, #7
 800d1e0:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800d1e2:	4b0a      	ldr	r3, [pc, #40]	; (800d20c <_ZL12MX_SPI3_Initv+0x7c>)
 800d1e4:	2200      	movs	r2, #0
 800d1e6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800d1e8:	4b08      	ldr	r3, [pc, #32]	; (800d20c <_ZL12MX_SPI3_Initv+0x7c>)
 800d1ea:	2208      	movs	r2, #8
 800d1ec:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 800d1ee:	4807      	ldr	r0, [pc, #28]	; (800d20c <_ZL12MX_SPI3_Initv+0x7c>)
 800d1f0:	f006 fc72 	bl	8013ad8 <HAL_SPI_Init>
 800d1f4:	4603      	mov	r3, r0
 800d1f6:	2b00      	cmp	r3, #0
 800d1f8:	bf14      	ite	ne
 800d1fa:	2301      	movne	r3, #1
 800d1fc:	2300      	moveq	r3, #0
 800d1fe:	b2db      	uxtb	r3, r3
 800d200:	2b00      	cmp	r3, #0
 800d202:	d001      	beq.n	800d208 <_ZL12MX_SPI3_Initv+0x78>
  {
    Error_Handler();
 800d204:	f000 fc6d 	bl	800dae2 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 800d208:	bf00      	nop
 800d20a:	bd80      	pop	{r7, pc}
 800d20c:	200006b4 	.word	0x200006b4
 800d210:	40003c00 	.word	0x40003c00

0800d214 <_ZL12MX_TIM1_Initv>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800d214:	b580      	push	{r7, lr}
 800d216:	b08c      	sub	sp, #48	; 0x30
 800d218:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800d21a:	f107 0320 	add.w	r3, r7, #32
 800d21e:	2200      	movs	r2, #0
 800d220:	601a      	str	r2, [r3, #0]
 800d222:	605a      	str	r2, [r3, #4]
 800d224:	609a      	str	r2, [r3, #8]
 800d226:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800d228:	f107 0314 	add.w	r3, r7, #20
 800d22c:	2200      	movs	r2, #0
 800d22e:	601a      	str	r2, [r3, #0]
 800d230:	605a      	str	r2, [r3, #4]
 800d232:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 800d234:	1d3b      	adds	r3, r7, #4
 800d236:	2200      	movs	r2, #0
 800d238:	601a      	str	r2, [r3, #0]
 800d23a:	605a      	str	r2, [r3, #4]
 800d23c:	609a      	str	r2, [r3, #8]
 800d23e:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800d240:	4b42      	ldr	r3, [pc, #264]	; (800d34c <_ZL12MX_TIM1_Initv+0x138>)
 800d242:	4a43      	ldr	r2, [pc, #268]	; (800d350 <_ZL12MX_TIM1_Initv+0x13c>)
 800d244:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 110;
 800d246:	4b41      	ldr	r3, [pc, #260]	; (800d34c <_ZL12MX_TIM1_Initv+0x138>)
 800d248:	226e      	movs	r2, #110	; 0x6e
 800d24a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800d24c:	4b3f      	ldr	r3, [pc, #252]	; (800d34c <_ZL12MX_TIM1_Initv+0x138>)
 800d24e:	2200      	movs	r2, #0
 800d250:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 50000;
 800d252:	4b3e      	ldr	r3, [pc, #248]	; (800d34c <_ZL12MX_TIM1_Initv+0x138>)
 800d254:	f24c 3250 	movw	r2, #50000	; 0xc350
 800d258:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800d25a:	4b3c      	ldr	r3, [pc, #240]	; (800d34c <_ZL12MX_TIM1_Initv+0x138>)
 800d25c:	2200      	movs	r2, #0
 800d25e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800d260:	4b3a      	ldr	r3, [pc, #232]	; (800d34c <_ZL12MX_TIM1_Initv+0x138>)
 800d262:	2200      	movs	r2, #0
 800d264:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800d266:	4b39      	ldr	r3, [pc, #228]	; (800d34c <_ZL12MX_TIM1_Initv+0x138>)
 800d268:	2280      	movs	r2, #128	; 0x80
 800d26a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800d26c:	4837      	ldr	r0, [pc, #220]	; (800d34c <_ZL12MX_TIM1_Initv+0x138>)
 800d26e:	f007 fb43 	bl	80148f8 <HAL_TIM_Base_Init>
 800d272:	4603      	mov	r3, r0
 800d274:	2b00      	cmp	r3, #0
 800d276:	bf14      	ite	ne
 800d278:	2301      	movne	r3, #1
 800d27a:	2300      	moveq	r3, #0
 800d27c:	b2db      	uxtb	r3, r3
 800d27e:	2b00      	cmp	r3, #0
 800d280:	d001      	beq.n	800d286 <_ZL12MX_TIM1_Initv+0x72>
  {
    Error_Handler();
 800d282:	f000 fc2e 	bl	800dae2 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800d286:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d28a:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800d28c:	f107 0320 	add.w	r3, r7, #32
 800d290:	4619      	mov	r1, r3
 800d292:	482e      	ldr	r0, [pc, #184]	; (800d34c <_ZL12MX_TIM1_Initv+0x138>)
 800d294:	f008 fb6e 	bl	8015974 <HAL_TIM_ConfigClockSource>
 800d298:	4603      	mov	r3, r0
 800d29a:	2b00      	cmp	r3, #0
 800d29c:	bf14      	ite	ne
 800d29e:	2301      	movne	r3, #1
 800d2a0:	2300      	moveq	r3, #0
 800d2a2:	b2db      	uxtb	r3, r3
 800d2a4:	2b00      	cmp	r3, #0
 800d2a6:	d001      	beq.n	800d2ac <_ZL12MX_TIM1_Initv+0x98>
  {
    Error_Handler();
 800d2a8:	f000 fc1b 	bl	800dae2 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 800d2ac:	4827      	ldr	r0, [pc, #156]	; (800d34c <_ZL12MX_TIM1_Initv+0x138>)
 800d2ae:	f007 fdb1 	bl	8014e14 <HAL_TIM_IC_Init>
 800d2b2:	4603      	mov	r3, r0
 800d2b4:	2b00      	cmp	r3, #0
 800d2b6:	bf14      	ite	ne
 800d2b8:	2301      	movne	r3, #1
 800d2ba:	2300      	moveq	r3, #0
 800d2bc:	b2db      	uxtb	r3, r3
 800d2be:	2b00      	cmp	r3, #0
 800d2c0:	d001      	beq.n	800d2c6 <_ZL12MX_TIM1_Initv+0xb2>
  {
    Error_Handler();
 800d2c2:	f000 fc0e 	bl	800dae2 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800d2c6:	2300      	movs	r3, #0
 800d2c8:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800d2ca:	2300      	movs	r3, #0
 800d2cc:	61bb      	str	r3, [r7, #24]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800d2ce:	2300      	movs	r3, #0
 800d2d0:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800d2d2:	f107 0314 	add.w	r3, r7, #20
 800d2d6:	4619      	mov	r1, r3
 800d2d8:	481c      	ldr	r0, [pc, #112]	; (800d34c <_ZL12MX_TIM1_Initv+0x138>)
 800d2da:	f009 f9cd 	bl	8016678 <HAL_TIMEx_MasterConfigSynchronization>
 800d2de:	4603      	mov	r3, r0
 800d2e0:	2b00      	cmp	r3, #0
 800d2e2:	bf14      	ite	ne
 800d2e4:	2301      	movne	r3, #1
 800d2e6:	2300      	moveq	r3, #0
 800d2e8:	b2db      	uxtb	r3, r3
 800d2ea:	2b00      	cmp	r3, #0
 800d2ec:	d001      	beq.n	800d2f2 <_ZL12MX_TIM1_Initv+0xde>
  {
    Error_Handler();
 800d2ee:	f000 fbf8 	bl	800dae2 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 800d2f2:	230a      	movs	r3, #10
 800d2f4:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800d2f6:	2301      	movs	r3, #1
 800d2f8:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800d2fa:	2300      	movs	r3, #0
 800d2fc:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 800d2fe:	2300      	movs	r3, #0
 800d300:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 800d302:	1d3b      	adds	r3, r7, #4
 800d304:	2208      	movs	r2, #8
 800d306:	4619      	mov	r1, r3
 800d308:	4810      	ldr	r0, [pc, #64]	; (800d34c <_ZL12MX_TIM1_Initv+0x138>)
 800d30a:	f008 f982 	bl	8015612 <HAL_TIM_IC_ConfigChannel>
 800d30e:	4603      	mov	r3, r0
 800d310:	2b00      	cmp	r3, #0
 800d312:	bf14      	ite	ne
 800d314:	2301      	movne	r3, #1
 800d316:	2300      	moveq	r3, #0
 800d318:	b2db      	uxtb	r3, r3
 800d31a:	2b00      	cmp	r3, #0
 800d31c:	d001      	beq.n	800d322 <_ZL12MX_TIM1_Initv+0x10e>
  {
    Error_Handler();
 800d31e:	f000 fbe0 	bl	800dae2 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 800d322:	1d3b      	adds	r3, r7, #4
 800d324:	220c      	movs	r2, #12
 800d326:	4619      	mov	r1, r3
 800d328:	4808      	ldr	r0, [pc, #32]	; (800d34c <_ZL12MX_TIM1_Initv+0x138>)
 800d32a:	f008 f972 	bl	8015612 <HAL_TIM_IC_ConfigChannel>
 800d32e:	4603      	mov	r3, r0
 800d330:	2b00      	cmp	r3, #0
 800d332:	bf14      	ite	ne
 800d334:	2301      	movne	r3, #1
 800d336:	2300      	moveq	r3, #0
 800d338:	b2db      	uxtb	r3, r3
 800d33a:	2b00      	cmp	r3, #0
 800d33c:	d001      	beq.n	800d342 <_ZL12MX_TIM1_Initv+0x12e>
  {
    Error_Handler();
 800d33e:	f000 fbd0 	bl	800dae2 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800d342:	bf00      	nop
 800d344:	3730      	adds	r7, #48	; 0x30
 800d346:	46bd      	mov	sp, r7
 800d348:	bd80      	pop	{r7, pc}
 800d34a:	bf00      	nop
 800d34c:	20000718 	.word	0x20000718
 800d350:	40012c00 	.word	0x40012c00

0800d354 <_ZL12MX_TIM3_Initv>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800d354:	b580      	push	{r7, lr}
 800d356:	b08c      	sub	sp, #48	; 0x30
 800d358:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800d35a:	f107 030c 	add.w	r3, r7, #12
 800d35e:	2224      	movs	r2, #36	; 0x24
 800d360:	2100      	movs	r1, #0
 800d362:	4618      	mov	r0, r3
 800d364:	f010 fba7 	bl	801dab6 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800d368:	463b      	mov	r3, r7
 800d36a:	2200      	movs	r2, #0
 800d36c:	601a      	str	r2, [r3, #0]
 800d36e:	605a      	str	r2, [r3, #4]
 800d370:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800d372:	4b26      	ldr	r3, [pc, #152]	; (800d40c <_ZL12MX_TIM3_Initv+0xb8>)
 800d374:	4a26      	ldr	r2, [pc, #152]	; (800d410 <_ZL12MX_TIM3_Initv+0xbc>)
 800d376:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800d378:	4b24      	ldr	r3, [pc, #144]	; (800d40c <_ZL12MX_TIM3_Initv+0xb8>)
 800d37a:	2200      	movs	r2, #0
 800d37c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800d37e:	4b23      	ldr	r3, [pc, #140]	; (800d40c <_ZL12MX_TIM3_Initv+0xb8>)
 800d380:	2200      	movs	r2, #0
 800d382:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800d384:	4b21      	ldr	r3, [pc, #132]	; (800d40c <_ZL12MX_TIM3_Initv+0xb8>)
 800d386:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d38a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800d38c:	4b1f      	ldr	r3, [pc, #124]	; (800d40c <_ZL12MX_TIM3_Initv+0xb8>)
 800d38e:	2200      	movs	r2, #0
 800d390:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800d392:	4b1e      	ldr	r3, [pc, #120]	; (800d40c <_ZL12MX_TIM3_Initv+0xb8>)
 800d394:	2200      	movs	r2, #0
 800d396:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800d398:	2303      	movs	r3, #3
 800d39a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800d39c:	2300      	movs	r3, #0
 800d39e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800d3a0:	2301      	movs	r3, #1
 800d3a2:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800d3a4:	2300      	movs	r3, #0
 800d3a6:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800d3a8:	2300      	movs	r3, #0
 800d3aa:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800d3ac:	2300      	movs	r3, #0
 800d3ae:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800d3b0:	2301      	movs	r3, #1
 800d3b2:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800d3b4:	2300      	movs	r3, #0
 800d3b6:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800d3b8:	2300      	movs	r3, #0
 800d3ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 800d3bc:	f107 030c 	add.w	r3, r7, #12
 800d3c0:	4619      	mov	r1, r3
 800d3c2:	4812      	ldr	r0, [pc, #72]	; (800d40c <_ZL12MX_TIM3_Initv+0xb8>)
 800d3c4:	f007 fed2 	bl	801516c <HAL_TIM_Encoder_Init>
 800d3c8:	4603      	mov	r3, r0
 800d3ca:	2b00      	cmp	r3, #0
 800d3cc:	bf14      	ite	ne
 800d3ce:	2301      	movne	r3, #1
 800d3d0:	2300      	moveq	r3, #0
 800d3d2:	b2db      	uxtb	r3, r3
 800d3d4:	2b00      	cmp	r3, #0
 800d3d6:	d001      	beq.n	800d3dc <_ZL12MX_TIM3_Initv+0x88>
  {
    Error_Handler();
 800d3d8:	f000 fb83 	bl	800dae2 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800d3dc:	2300      	movs	r3, #0
 800d3de:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800d3e0:	2300      	movs	r3, #0
 800d3e2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800d3e4:	463b      	mov	r3, r7
 800d3e6:	4619      	mov	r1, r3
 800d3e8:	4808      	ldr	r0, [pc, #32]	; (800d40c <_ZL12MX_TIM3_Initv+0xb8>)
 800d3ea:	f009 f945 	bl	8016678 <HAL_TIMEx_MasterConfigSynchronization>
 800d3ee:	4603      	mov	r3, r0
 800d3f0:	2b00      	cmp	r3, #0
 800d3f2:	bf14      	ite	ne
 800d3f4:	2301      	movne	r3, #1
 800d3f6:	2300      	moveq	r3, #0
 800d3f8:	b2db      	uxtb	r3, r3
 800d3fa:	2b00      	cmp	r3, #0
 800d3fc:	d001      	beq.n	800d402 <_ZL12MX_TIM3_Initv+0xae>
  {
    Error_Handler();
 800d3fe:	f000 fb70 	bl	800dae2 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800d402:	bf00      	nop
 800d404:	3730      	adds	r7, #48	; 0x30
 800d406:	46bd      	mov	sp, r7
 800d408:	bd80      	pop	{r7, pc}
 800d40a:	bf00      	nop
 800d40c:	20000764 	.word	0x20000764
 800d410:	40000400 	.word	0x40000400

0800d414 <_ZL12MX_TIM5_Initv>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 800d414:	b580      	push	{r7, lr}
 800d416:	b08e      	sub	sp, #56	; 0x38
 800d418:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800d41a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800d41e:	2200      	movs	r2, #0
 800d420:	601a      	str	r2, [r3, #0]
 800d422:	605a      	str	r2, [r3, #4]
 800d424:	609a      	str	r2, [r3, #8]
 800d426:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800d428:	f107 031c 	add.w	r3, r7, #28
 800d42c:	2200      	movs	r2, #0
 800d42e:	601a      	str	r2, [r3, #0]
 800d430:	605a      	str	r2, [r3, #4]
 800d432:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800d434:	463b      	mov	r3, r7
 800d436:	2200      	movs	r2, #0
 800d438:	601a      	str	r2, [r3, #0]
 800d43a:	605a      	str	r2, [r3, #4]
 800d43c:	609a      	str	r2, [r3, #8]
 800d43e:	60da      	str	r2, [r3, #12]
 800d440:	611a      	str	r2, [r3, #16]
 800d442:	615a      	str	r2, [r3, #20]
 800d444:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 800d446:	4b41      	ldr	r3, [pc, #260]	; (800d54c <_ZL12MX_TIM5_Initv+0x138>)
 800d448:	4a41      	ldr	r2, [pc, #260]	; (800d550 <_ZL12MX_TIM5_Initv+0x13c>)
 800d44a:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 800d44c:	4b3f      	ldr	r3, [pc, #252]	; (800d54c <_ZL12MX_TIM5_Initv+0x138>)
 800d44e:	2200      	movs	r2, #0
 800d450:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 800d452:	4b3e      	ldr	r3, [pc, #248]	; (800d54c <_ZL12MX_TIM5_Initv+0x138>)
 800d454:	2220      	movs	r2, #32
 800d456:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 1834;
 800d458:	4b3c      	ldr	r3, [pc, #240]	; (800d54c <_ZL12MX_TIM5_Initv+0x138>)
 800d45a:	f240 722a 	movw	r2, #1834	; 0x72a
 800d45e:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800d460:	4b3a      	ldr	r3, [pc, #232]	; (800d54c <_ZL12MX_TIM5_Initv+0x138>)
 800d462:	2200      	movs	r2, #0
 800d464:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800d466:	4b39      	ldr	r3, [pc, #228]	; (800d54c <_ZL12MX_TIM5_Initv+0x138>)
 800d468:	2280      	movs	r2, #128	; 0x80
 800d46a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 800d46c:	4837      	ldr	r0, [pc, #220]	; (800d54c <_ZL12MX_TIM5_Initv+0x138>)
 800d46e:	f007 fa43 	bl	80148f8 <HAL_TIM_Base_Init>
 800d472:	4603      	mov	r3, r0
 800d474:	2b00      	cmp	r3, #0
 800d476:	bf14      	ite	ne
 800d478:	2301      	movne	r3, #1
 800d47a:	2300      	moveq	r3, #0
 800d47c:	b2db      	uxtb	r3, r3
 800d47e:	2b00      	cmp	r3, #0
 800d480:	d001      	beq.n	800d486 <_ZL12MX_TIM5_Initv+0x72>
  {
    Error_Handler();
 800d482:	f000 fb2e 	bl	800dae2 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800d486:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d48a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 800d48c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800d490:	4619      	mov	r1, r3
 800d492:	482e      	ldr	r0, [pc, #184]	; (800d54c <_ZL12MX_TIM5_Initv+0x138>)
 800d494:	f008 fa6e 	bl	8015974 <HAL_TIM_ConfigClockSource>
 800d498:	4603      	mov	r3, r0
 800d49a:	2b00      	cmp	r3, #0
 800d49c:	bf14      	ite	ne
 800d49e:	2301      	movne	r3, #1
 800d4a0:	2300      	moveq	r3, #0
 800d4a2:	b2db      	uxtb	r3, r3
 800d4a4:	2b00      	cmp	r3, #0
 800d4a6:	d001      	beq.n	800d4ac <_ZL12MX_TIM5_Initv+0x98>
  {
    Error_Handler();
 800d4a8:	f000 fb1b 	bl	800dae2 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 800d4ac:	4827      	ldr	r0, [pc, #156]	; (800d54c <_ZL12MX_TIM5_Initv+0x138>)
 800d4ae:	f007 fb53 	bl	8014b58 <HAL_TIM_PWM_Init>
 800d4b2:	4603      	mov	r3, r0
 800d4b4:	2b00      	cmp	r3, #0
 800d4b6:	bf14      	ite	ne
 800d4b8:	2301      	movne	r3, #1
 800d4ba:	2300      	moveq	r3, #0
 800d4bc:	b2db      	uxtb	r3, r3
 800d4be:	2b00      	cmp	r3, #0
 800d4c0:	d001      	beq.n	800d4c6 <_ZL12MX_TIM5_Initv+0xb2>
  {
    Error_Handler();
 800d4c2:	f000 fb0e 	bl	800dae2 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800d4c6:	2300      	movs	r3, #0
 800d4c8:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800d4ca:	2300      	movs	r3, #0
 800d4cc:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800d4ce:	f107 031c 	add.w	r3, r7, #28
 800d4d2:	4619      	mov	r1, r3
 800d4d4:	481d      	ldr	r0, [pc, #116]	; (800d54c <_ZL12MX_TIM5_Initv+0x138>)
 800d4d6:	f009 f8cf 	bl	8016678 <HAL_TIMEx_MasterConfigSynchronization>
 800d4da:	4603      	mov	r3, r0
 800d4dc:	2b00      	cmp	r3, #0
 800d4de:	bf14      	ite	ne
 800d4e0:	2301      	movne	r3, #1
 800d4e2:	2300      	moveq	r3, #0
 800d4e4:	b2db      	uxtb	r3, r3
 800d4e6:	2b00      	cmp	r3, #0
 800d4e8:	d001      	beq.n	800d4ee <_ZL12MX_TIM5_Initv+0xda>
  {
    Error_Handler();
 800d4ea:	f000 fafa 	bl	800dae2 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800d4ee:	2360      	movs	r3, #96	; 0x60
 800d4f0:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800d4f2:	2300      	movs	r3, #0
 800d4f4:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800d4f6:	2300      	movs	r3, #0
 800d4f8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800d4fa:	2300      	movs	r3, #0
 800d4fc:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800d4fe:	463b      	mov	r3, r7
 800d500:	2200      	movs	r2, #0
 800d502:	4619      	mov	r1, r3
 800d504:	4811      	ldr	r0, [pc, #68]	; (800d54c <_ZL12MX_TIM5_Initv+0x138>)
 800d506:	f008 f921 	bl	801574c <HAL_TIM_PWM_ConfigChannel>
 800d50a:	4603      	mov	r3, r0
 800d50c:	2b00      	cmp	r3, #0
 800d50e:	bf14      	ite	ne
 800d510:	2301      	movne	r3, #1
 800d512:	2300      	moveq	r3, #0
 800d514:	b2db      	uxtb	r3, r3
 800d516:	2b00      	cmp	r3, #0
 800d518:	d001      	beq.n	800d51e <_ZL12MX_TIM5_Initv+0x10a>
  {
    Error_Handler();
 800d51a:	f000 fae2 	bl	800dae2 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800d51e:	463b      	mov	r3, r7
 800d520:	220c      	movs	r2, #12
 800d522:	4619      	mov	r1, r3
 800d524:	4809      	ldr	r0, [pc, #36]	; (800d54c <_ZL12MX_TIM5_Initv+0x138>)
 800d526:	f008 f911 	bl	801574c <HAL_TIM_PWM_ConfigChannel>
 800d52a:	4603      	mov	r3, r0
 800d52c:	2b00      	cmp	r3, #0
 800d52e:	bf14      	ite	ne
 800d530:	2301      	movne	r3, #1
 800d532:	2300      	moveq	r3, #0
 800d534:	b2db      	uxtb	r3, r3
 800d536:	2b00      	cmp	r3, #0
 800d538:	d001      	beq.n	800d53e <_ZL12MX_TIM5_Initv+0x12a>
  {
    Error_Handler();
 800d53a:	f000 fad2 	bl	800dae2 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 800d53e:	4803      	ldr	r0, [pc, #12]	; (800d54c <_ZL12MX_TIM5_Initv+0x138>)
 800d540:	f000 ff2c 	bl	800e39c <HAL_TIM_MspPostInit>

}
 800d544:	bf00      	nop
 800d546:	3738      	adds	r7, #56	; 0x38
 800d548:	46bd      	mov	sp, r7
 800d54a:	bd80      	pop	{r7, pc}
 800d54c:	200007b0 	.word	0x200007b0
 800d550:	40000c00 	.word	0x40000c00

0800d554 <_ZL12MX_TIM6_Initv>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 800d554:	b580      	push	{r7, lr}
 800d556:	b084      	sub	sp, #16
 800d558:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800d55a:	1d3b      	adds	r3, r7, #4
 800d55c:	2200      	movs	r2, #0
 800d55e:	601a      	str	r2, [r3, #0]
 800d560:	605a      	str	r2, [r3, #4]
 800d562:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 800d564:	4b19      	ldr	r3, [pc, #100]	; (800d5cc <_ZL12MX_TIM6_Initv+0x78>)
 800d566:	4a1a      	ldr	r2, [pc, #104]	; (800d5d0 <_ZL12MX_TIM6_Initv+0x7c>)
 800d568:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 110;
 800d56a:	4b18      	ldr	r3, [pc, #96]	; (800d5cc <_ZL12MX_TIM6_Initv+0x78>)
 800d56c:	226e      	movs	r2, #110	; 0x6e
 800d56e:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800d570:	4b16      	ldr	r3, [pc, #88]	; (800d5cc <_ZL12MX_TIM6_Initv+0x78>)
 800d572:	2200      	movs	r2, #0
 800d574:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 800d576:	4b15      	ldr	r3, [pc, #84]	; (800d5cc <_ZL12MX_TIM6_Initv+0x78>)
 800d578:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d57c:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800d57e:	4b13      	ldr	r3, [pc, #76]	; (800d5cc <_ZL12MX_TIM6_Initv+0x78>)
 800d580:	2200      	movs	r2, #0
 800d582:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800d584:	4811      	ldr	r0, [pc, #68]	; (800d5cc <_ZL12MX_TIM6_Initv+0x78>)
 800d586:	f007 f9b7 	bl	80148f8 <HAL_TIM_Base_Init>
 800d58a:	4603      	mov	r3, r0
 800d58c:	2b00      	cmp	r3, #0
 800d58e:	bf14      	ite	ne
 800d590:	2301      	movne	r3, #1
 800d592:	2300      	moveq	r3, #0
 800d594:	b2db      	uxtb	r3, r3
 800d596:	2b00      	cmp	r3, #0
 800d598:	d001      	beq.n	800d59e <_ZL12MX_TIM6_Initv+0x4a>
  {
    Error_Handler();
 800d59a:	f000 faa2 	bl	800dae2 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800d59e:	2300      	movs	r3, #0
 800d5a0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800d5a2:	2300      	movs	r3, #0
 800d5a4:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800d5a6:	1d3b      	adds	r3, r7, #4
 800d5a8:	4619      	mov	r1, r3
 800d5aa:	4808      	ldr	r0, [pc, #32]	; (800d5cc <_ZL12MX_TIM6_Initv+0x78>)
 800d5ac:	f009 f864 	bl	8016678 <HAL_TIMEx_MasterConfigSynchronization>
 800d5b0:	4603      	mov	r3, r0
 800d5b2:	2b00      	cmp	r3, #0
 800d5b4:	bf14      	ite	ne
 800d5b6:	2301      	movne	r3, #1
 800d5b8:	2300      	moveq	r3, #0
 800d5ba:	b2db      	uxtb	r3, r3
 800d5bc:	2b00      	cmp	r3, #0
 800d5be:	d001      	beq.n	800d5c4 <_ZL12MX_TIM6_Initv+0x70>
  {
    Error_Handler();
 800d5c0:	f000 fa8f 	bl	800dae2 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800d5c4:	bf00      	nop
 800d5c6:	3710      	adds	r7, #16
 800d5c8:	46bd      	mov	sp, r7
 800d5ca:	bd80      	pop	{r7, pc}
 800d5cc:	200007fc 	.word	0x200007fc
 800d5d0:	40001000 	.word	0x40001000

0800d5d4 <_ZL12MX_TIM8_Initv>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 800d5d4:	b580      	push	{r7, lr}
 800d5d6:	b098      	sub	sp, #96	; 0x60
 800d5d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800d5da:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800d5de:	2200      	movs	r2, #0
 800d5e0:	601a      	str	r2, [r3, #0]
 800d5e2:	605a      	str	r2, [r3, #4]
 800d5e4:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800d5e6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800d5ea:	2200      	movs	r2, #0
 800d5ec:	601a      	str	r2, [r3, #0]
 800d5ee:	605a      	str	r2, [r3, #4]
 800d5f0:	609a      	str	r2, [r3, #8]
 800d5f2:	60da      	str	r2, [r3, #12]
 800d5f4:	611a      	str	r2, [r3, #16]
 800d5f6:	615a      	str	r2, [r3, #20]
 800d5f8:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800d5fa:	1d3b      	adds	r3, r7, #4
 800d5fc:	2234      	movs	r2, #52	; 0x34
 800d5fe:	2100      	movs	r1, #0
 800d600:	4618      	mov	r0, r3
 800d602:	f010 fa58 	bl	801dab6 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 800d606:	4b45      	ldr	r3, [pc, #276]	; (800d71c <_ZL12MX_TIM8_Initv+0x148>)
 800d608:	4a45      	ldr	r2, [pc, #276]	; (800d720 <_ZL12MX_TIM8_Initv+0x14c>)
 800d60a:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 110;
 800d60c:	4b43      	ldr	r3, [pc, #268]	; (800d71c <_ZL12MX_TIM8_Initv+0x148>)
 800d60e:	226e      	movs	r2, #110	; 0x6e
 800d610:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800d612:	4b42      	ldr	r3, [pc, #264]	; (800d71c <_ZL12MX_TIM8_Initv+0x148>)
 800d614:	2200      	movs	r2, #0
 800d616:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = PWM_PERIOD;
 800d618:	4b40      	ldr	r3, [pc, #256]	; (800d71c <_ZL12MX_TIM8_Initv+0x148>)
 800d61a:	f242 7210 	movw	r2, #10000	; 0x2710
 800d61e:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800d620:	4b3e      	ldr	r3, [pc, #248]	; (800d71c <_ZL12MX_TIM8_Initv+0x148>)
 800d622:	2200      	movs	r2, #0
 800d624:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 800d626:	4b3d      	ldr	r3, [pc, #244]	; (800d71c <_ZL12MX_TIM8_Initv+0x148>)
 800d628:	2200      	movs	r2, #0
 800d62a:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800d62c:	4b3b      	ldr	r3, [pc, #236]	; (800d71c <_ZL12MX_TIM8_Initv+0x148>)
 800d62e:	2200      	movs	r2, #0
 800d630:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 800d632:	483a      	ldr	r0, [pc, #232]	; (800d71c <_ZL12MX_TIM8_Initv+0x148>)
 800d634:	f007 fa90 	bl	8014b58 <HAL_TIM_PWM_Init>
 800d638:	4603      	mov	r3, r0
 800d63a:	2b00      	cmp	r3, #0
 800d63c:	bf14      	ite	ne
 800d63e:	2301      	movne	r3, #1
 800d640:	2300      	moveq	r3, #0
 800d642:	b2db      	uxtb	r3, r3
 800d644:	2b00      	cmp	r3, #0
 800d646:	d001      	beq.n	800d64c <_ZL12MX_TIM8_Initv+0x78>
  {
    Error_Handler();
 800d648:	f000 fa4b 	bl	800dae2 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800d64c:	2300      	movs	r3, #0
 800d64e:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800d650:	2300      	movs	r3, #0
 800d652:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800d654:	2300      	movs	r3, #0
 800d656:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 800d658:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800d65c:	4619      	mov	r1, r3
 800d65e:	482f      	ldr	r0, [pc, #188]	; (800d71c <_ZL12MX_TIM8_Initv+0x148>)
 800d660:	f009 f80a 	bl	8016678 <HAL_TIMEx_MasterConfigSynchronization>
 800d664:	4603      	mov	r3, r0
 800d666:	2b00      	cmp	r3, #0
 800d668:	bf14      	ite	ne
 800d66a:	2301      	movne	r3, #1
 800d66c:	2300      	moveq	r3, #0
 800d66e:	b2db      	uxtb	r3, r3
 800d670:	2b00      	cmp	r3, #0
 800d672:	d001      	beq.n	800d678 <_ZL12MX_TIM8_Initv+0xa4>
  {
    Error_Handler();
 800d674:	f000 fa35 	bl	800dae2 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800d678:	2360      	movs	r3, #96	; 0x60
 800d67a:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 800d67c:	2300      	movs	r3, #0
 800d67e:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800d680:	2300      	movs	r3, #0
 800d682:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800d684:	2300      	movs	r3, #0
 800d686:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800d688:	2300      	movs	r3, #0
 800d68a:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800d68c:	2300      	movs	r3, #0
 800d68e:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800d690:	2300      	movs	r3, #0
 800d692:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800d694:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800d698:	2200      	movs	r2, #0
 800d69a:	4619      	mov	r1, r3
 800d69c:	481f      	ldr	r0, [pc, #124]	; (800d71c <_ZL12MX_TIM8_Initv+0x148>)
 800d69e:	f008 f855 	bl	801574c <HAL_TIM_PWM_ConfigChannel>
 800d6a2:	4603      	mov	r3, r0
 800d6a4:	2b00      	cmp	r3, #0
 800d6a6:	bf14      	ite	ne
 800d6a8:	2301      	movne	r3, #1
 800d6aa:	2300      	moveq	r3, #0
 800d6ac:	b2db      	uxtb	r3, r3
 800d6ae:	2b00      	cmp	r3, #0
 800d6b0:	d001      	beq.n	800d6b6 <_ZL12MX_TIM8_Initv+0xe2>
  {
    Error_Handler();
 800d6b2:	f000 fa16 	bl	800dae2 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800d6b6:	2300      	movs	r3, #0
 800d6b8:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800d6ba:	2300      	movs	r3, #0
 800d6bc:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800d6be:	2300      	movs	r3, #0
 800d6c0:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800d6c2:	2300      	movs	r3, #0
 800d6c4:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800d6c6:	2300      	movs	r3, #0
 800d6c8:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800d6ca:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800d6ce:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800d6d0:	2300      	movs	r3, #0
 800d6d2:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 800d6d4:	2300      	movs	r3, #0
 800d6d6:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800d6d8:	2300      	movs	r3, #0
 800d6da:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800d6dc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800d6e0:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 800d6e2:	2300      	movs	r3, #0
 800d6e4:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 800d6e6:	2300      	movs	r3, #0
 800d6e8:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800d6ea:	2300      	movs	r3, #0
 800d6ec:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 800d6ee:	1d3b      	adds	r3, r7, #4
 800d6f0:	4619      	mov	r1, r3
 800d6f2:	480a      	ldr	r0, [pc, #40]	; (800d71c <_ZL12MX_TIM8_Initv+0x148>)
 800d6f4:	f009 f848 	bl	8016788 <HAL_TIMEx_ConfigBreakDeadTime>
 800d6f8:	4603      	mov	r3, r0
 800d6fa:	2b00      	cmp	r3, #0
 800d6fc:	bf14      	ite	ne
 800d6fe:	2301      	movne	r3, #1
 800d700:	2300      	moveq	r3, #0
 800d702:	b2db      	uxtb	r3, r3
 800d704:	2b00      	cmp	r3, #0
 800d706:	d001      	beq.n	800d70c <_ZL12MX_TIM8_Initv+0x138>
  {
    Error_Handler();
 800d708:	f000 f9eb 	bl	800dae2 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 800d70c:	4803      	ldr	r0, [pc, #12]	; (800d71c <_ZL12MX_TIM8_Initv+0x148>)
 800d70e:	f000 fe45 	bl	800e39c <HAL_TIM_MspPostInit>

}
 800d712:	bf00      	nop
 800d714:	3760      	adds	r7, #96	; 0x60
 800d716:	46bd      	mov	sp, r7
 800d718:	bd80      	pop	{r7, pc}
 800d71a:	bf00      	nop
 800d71c:	20000848 	.word	0x20000848
 800d720:	40013400 	.word	0x40013400

0800d724 <_ZL13MX_UCPD1_Initv>:
  * @brief UCPD1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UCPD1_Init(void)
{
 800d724:	b580      	push	{r7, lr}
 800d726:	b086      	sub	sp, #24
 800d728:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN UCPD1_Init 0 */

  /* USER CODE END UCPD1_Init 0 */

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800d72a:	463b      	mov	r3, r7
 800d72c:	2200      	movs	r2, #0
 800d72e:	601a      	str	r2, [r3, #0]
 800d730:	605a      	str	r2, [r3, #4]
 800d732:	609a      	str	r2, [r3, #8]
 800d734:	60da      	str	r2, [r3, #12]
 800d736:	611a      	str	r2, [r3, #16]
 800d738:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP2_EnableClock(LL_APB1_GRP2_PERIPH_UCPD1);
 800d73a:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 800d73e:	f7ff f8a7 	bl	800c890 <LL_APB1_GRP2_EnableClock>

  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 800d742:	2002      	movs	r0, #2
 800d744:	f7ff f88c 	bl	800c860 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 800d748:	2001      	movs	r0, #1
 800d74a:	f7ff f889 	bl	800c860 <LL_AHB2_GRP1_EnableClock>
  /**UCPD1 GPIO Configuration
  PB15   ------> UCPD1_CC2
  PA15 (JTDI)   ------> UCPD1_CC1
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_15;
 800d74e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d752:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 800d754:	2303      	movs	r3, #3
 800d756:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800d758:	2300      	movs	r3, #0
 800d75a:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800d75c:	463b      	mov	r3, r7
 800d75e:	4619      	mov	r1, r3
 800d760:	4809      	ldr	r0, [pc, #36]	; (800d788 <_ZL13MX_UCPD1_Initv+0x64>)
 800d762:	f00b fab6 	bl	8018cd2 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_15;
 800d766:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d76a:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 800d76c:	2303      	movs	r3, #3
 800d76e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800d770:	2300      	movs	r3, #0
 800d772:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800d774:	463b      	mov	r3, r7
 800d776:	4619      	mov	r1, r3
 800d778:	4804      	ldr	r0, [pc, #16]	; (800d78c <_ZL13MX_UCPD1_Initv+0x68>)
 800d77a:	f00b faaa 	bl	8018cd2 <LL_GPIO_Init>
  /* USER CODE END UCPD1_Init 1 */
  /* USER CODE BEGIN UCPD1_Init 2 */

  /* USER CODE END UCPD1_Init 2 */

}
 800d77e:	bf00      	nop
 800d780:	3718      	adds	r7, #24
 800d782:	46bd      	mov	sp, r7
 800d784:	bd80      	pop	{r7, pc}
 800d786:	bf00      	nop
 800d788:	42020400 	.word	0x42020400
 800d78c:	42020000 	.word	0x42020000

0800d790 <_ZL15MX_USB_PCD_Initv>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 800d790:	b580      	push	{r7, lr}
 800d792:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 800d794:	4b13      	ldr	r3, [pc, #76]	; (800d7e4 <_ZL15MX_USB_PCD_Initv+0x54>)
 800d796:	4a14      	ldr	r2, [pc, #80]	; (800d7e8 <_ZL15MX_USB_PCD_Initv+0x58>)
 800d798:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800d79a:	4b12      	ldr	r3, [pc, #72]	; (800d7e4 <_ZL15MX_USB_PCD_Initv+0x54>)
 800d79c:	2208      	movs	r2, #8
 800d79e:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800d7a0:	4b10      	ldr	r3, [pc, #64]	; (800d7e4 <_ZL15MX_USB_PCD_Initv+0x54>)
 800d7a2:	2202      	movs	r2, #2
 800d7a4:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800d7a6:	4b0f      	ldr	r3, [pc, #60]	; (800d7e4 <_ZL15MX_USB_PCD_Initv+0x54>)
 800d7a8:	2202      	movs	r2, #2
 800d7aa:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 800d7ac:	4b0d      	ldr	r3, [pc, #52]	; (800d7e4 <_ZL15MX_USB_PCD_Initv+0x54>)
 800d7ae:	2200      	movs	r2, #0
 800d7b0:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800d7b2:	4b0c      	ldr	r3, [pc, #48]	; (800d7e4 <_ZL15MX_USB_PCD_Initv+0x54>)
 800d7b4:	2200      	movs	r2, #0
 800d7b6:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800d7b8:	4b0a      	ldr	r3, [pc, #40]	; (800d7e4 <_ZL15MX_USB_PCD_Initv+0x54>)
 800d7ba:	2200      	movs	r2, #0
 800d7bc:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800d7be:	4b09      	ldr	r3, [pc, #36]	; (800d7e4 <_ZL15MX_USB_PCD_Initv+0x54>)
 800d7c0:	2200      	movs	r2, #0
 800d7c2:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800d7c4:	4807      	ldr	r0, [pc, #28]	; (800d7e4 <_ZL15MX_USB_PCD_Initv+0x54>)
 800d7c6:	f004 f999 	bl	8011afc <HAL_PCD_Init>
 800d7ca:	4603      	mov	r3, r0
 800d7cc:	2b00      	cmp	r3, #0
 800d7ce:	bf14      	ite	ne
 800d7d0:	2301      	movne	r3, #1
 800d7d2:	2300      	moveq	r3, #0
 800d7d4:	b2db      	uxtb	r3, r3
 800d7d6:	2b00      	cmp	r3, #0
 800d7d8:	d001      	beq.n	800d7de <_ZL15MX_USB_PCD_Initv+0x4e>
  {
    Error_Handler();
 800d7da:	f000 f982 	bl	800dae2 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 800d7de:	bf00      	nop
 800d7e0:	bd80      	pop	{r7, pc}
 800d7e2:	bf00      	nop
 800d7e4:	20000894 	.word	0x20000894
 800d7e8:	4000d400 	.word	0x4000d400

0800d7ec <_ZL11MX_DMA_Initv>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800d7ec:	b580      	push	{r7, lr}
 800d7ee:	b082      	sub	sp, #8
 800d7f0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 800d7f2:	4b12      	ldr	r3, [pc, #72]	; (800d83c <_ZL11MX_DMA_Initv+0x50>)
 800d7f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d7f6:	4a11      	ldr	r2, [pc, #68]	; (800d83c <_ZL11MX_DMA_Initv+0x50>)
 800d7f8:	f043 0304 	orr.w	r3, r3, #4
 800d7fc:	6493      	str	r3, [r2, #72]	; 0x48
 800d7fe:	4b0f      	ldr	r3, [pc, #60]	; (800d83c <_ZL11MX_DMA_Initv+0x50>)
 800d800:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d802:	f003 0304 	and.w	r3, r3, #4
 800d806:	607b      	str	r3, [r7, #4]
 800d808:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800d80a:	4b0c      	ldr	r3, [pc, #48]	; (800d83c <_ZL11MX_DMA_Initv+0x50>)
 800d80c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d80e:	4a0b      	ldr	r2, [pc, #44]	; (800d83c <_ZL11MX_DMA_Initv+0x50>)
 800d810:	f043 0301 	orr.w	r3, r3, #1
 800d814:	6493      	str	r3, [r2, #72]	; 0x48
 800d816:	4b09      	ldr	r3, [pc, #36]	; (800d83c <_ZL11MX_DMA_Initv+0x50>)
 800d818:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d81a:	f003 0301 	and.w	r3, r3, #1
 800d81e:	603b      	str	r3, [r7, #0]
 800d820:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 800d822:	2200      	movs	r2, #0
 800d824:	2105      	movs	r1, #5
 800d826:	201d      	movs	r0, #29
 800d828:	f002 fe0c 	bl	8010444 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800d82c:	201d      	movs	r0, #29
 800d82e:	f002 fe23 	bl	8010478 <HAL_NVIC_EnableIRQ>

}
 800d832:	bf00      	nop
 800d834:	3708      	adds	r7, #8
 800d836:	46bd      	mov	sp, r7
 800d838:	bd80      	pop	{r7, pc}
 800d83a:	bf00      	nop
 800d83c:	40021000 	.word	0x40021000

0800d840 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800d840:	b580      	push	{r7, lr}
 800d842:	b08c      	sub	sp, #48	; 0x30
 800d844:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800d846:	f107 031c 	add.w	r3, r7, #28
 800d84a:	2200      	movs	r2, #0
 800d84c:	601a      	str	r2, [r3, #0]
 800d84e:	605a      	str	r2, [r3, #4]
 800d850:	609a      	str	r2, [r3, #8]
 800d852:	60da      	str	r2, [r3, #12]
 800d854:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800d856:	4b8b      	ldr	r3, [pc, #556]	; (800da84 <_ZL12MX_GPIO_Initv+0x244>)
 800d858:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d85a:	4a8a      	ldr	r2, [pc, #552]	; (800da84 <_ZL12MX_GPIO_Initv+0x244>)
 800d85c:	f043 0310 	orr.w	r3, r3, #16
 800d860:	64d3      	str	r3, [r2, #76]	; 0x4c
 800d862:	4b88      	ldr	r3, [pc, #544]	; (800da84 <_ZL12MX_GPIO_Initv+0x244>)
 800d864:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d866:	f003 0310 	and.w	r3, r3, #16
 800d86a:	61bb      	str	r3, [r7, #24]
 800d86c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800d86e:	4b85      	ldr	r3, [pc, #532]	; (800da84 <_ZL12MX_GPIO_Initv+0x244>)
 800d870:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d872:	4a84      	ldr	r2, [pc, #528]	; (800da84 <_ZL12MX_GPIO_Initv+0x244>)
 800d874:	f043 0304 	orr.w	r3, r3, #4
 800d878:	64d3      	str	r3, [r2, #76]	; 0x4c
 800d87a:	4b82      	ldr	r3, [pc, #520]	; (800da84 <_ZL12MX_GPIO_Initv+0x244>)
 800d87c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d87e:	f003 0304 	and.w	r3, r3, #4
 800d882:	617b      	str	r3, [r7, #20]
 800d884:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800d886:	4b7f      	ldr	r3, [pc, #508]	; (800da84 <_ZL12MX_GPIO_Initv+0x244>)
 800d888:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d88a:	4a7e      	ldr	r2, [pc, #504]	; (800da84 <_ZL12MX_GPIO_Initv+0x244>)
 800d88c:	f043 0320 	orr.w	r3, r3, #32
 800d890:	64d3      	str	r3, [r2, #76]	; 0x4c
 800d892:	4b7c      	ldr	r3, [pc, #496]	; (800da84 <_ZL12MX_GPIO_Initv+0x244>)
 800d894:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d896:	f003 0320 	and.w	r3, r3, #32
 800d89a:	613b      	str	r3, [r7, #16]
 800d89c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800d89e:	4b79      	ldr	r3, [pc, #484]	; (800da84 <_ZL12MX_GPIO_Initv+0x244>)
 800d8a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d8a2:	4a78      	ldr	r2, [pc, #480]	; (800da84 <_ZL12MX_GPIO_Initv+0x244>)
 800d8a4:	f043 0301 	orr.w	r3, r3, #1
 800d8a8:	64d3      	str	r3, [r2, #76]	; 0x4c
 800d8aa:	4b76      	ldr	r3, [pc, #472]	; (800da84 <_ZL12MX_GPIO_Initv+0x244>)
 800d8ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d8ae:	f003 0301 	and.w	r3, r3, #1
 800d8b2:	60fb      	str	r3, [r7, #12]
 800d8b4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800d8b6:	4b73      	ldr	r3, [pc, #460]	; (800da84 <_ZL12MX_GPIO_Initv+0x244>)
 800d8b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d8ba:	4a72      	ldr	r2, [pc, #456]	; (800da84 <_ZL12MX_GPIO_Initv+0x244>)
 800d8bc:	f043 0302 	orr.w	r3, r3, #2
 800d8c0:	64d3      	str	r3, [r2, #76]	; 0x4c
 800d8c2:	4b70      	ldr	r3, [pc, #448]	; (800da84 <_ZL12MX_GPIO_Initv+0x244>)
 800d8c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d8c6:	f003 0302 	and.w	r3, r3, #2
 800d8ca:	60bb      	str	r3, [r7, #8]
 800d8cc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800d8ce:	4b6d      	ldr	r3, [pc, #436]	; (800da84 <_ZL12MX_GPIO_Initv+0x244>)
 800d8d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d8d2:	4a6c      	ldr	r2, [pc, #432]	; (800da84 <_ZL12MX_GPIO_Initv+0x244>)
 800d8d4:	f043 0308 	orr.w	r3, r3, #8
 800d8d8:	64d3      	str	r3, [r2, #76]	; 0x4c
 800d8da:	4b6a      	ldr	r3, [pc, #424]	; (800da84 <_ZL12MX_GPIO_Initv+0x244>)
 800d8dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d8de:	f003 0308 	and.w	r3, r3, #8
 800d8e2:	607b      	str	r3, [r7, #4]
 800d8e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800d8e6:	4b67      	ldr	r3, [pc, #412]	; (800da84 <_ZL12MX_GPIO_Initv+0x244>)
 800d8e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d8ea:	4a66      	ldr	r2, [pc, #408]	; (800da84 <_ZL12MX_GPIO_Initv+0x244>)
 800d8ec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d8f0:	64d3      	str	r3, [r2, #76]	; 0x4c
 800d8f2:	4b64      	ldr	r3, [pc, #400]	; (800da84 <_ZL12MX_GPIO_Initv+0x244>)
 800d8f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d8f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d8fa:	603b      	str	r3, [r7, #0]
 800d8fc:	683b      	ldr	r3, [r7, #0]
  HAL_PWREx_EnableVddIO2();
 800d8fe:	f004 fa7b 	bl	8011df8 <HAL_PWREx_EnableVddIO2>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, DRIVE_ENABLE_Pin|MCU_LED_Pin|MOT_BATT_L_Pin|LV_BATT_L_Pin, GPIO_PIN_RESET);
 800d902:	2200      	movs	r2, #0
 800d904:	f24e 0108 	movw	r1, #57352	; 0xe008
 800d908:	485f      	ldr	r0, [pc, #380]	; (800da88 <_ZL12MX_GPIO_Initv+0x248>)
 800d90a:	f003 faf1 	bl	8010ef0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, MAX_CS_Pin|UCPD_DBN_Pin|LED_BLUE_Pin, GPIO_PIN_RESET);
 800d90e:	2200      	movs	r2, #0
 800d910:	21a4      	movs	r1, #164	; 0xa4
 800d912:	485e      	ldr	r0, [pc, #376]	; (800da8c <_ZL12MX_GPIO_Initv+0x24c>)
 800d914:	f003 faec 	bl	8010ef0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, ADCF1_CS_Pin|ADCF2_CS_Pin|ADCF3_CS_Pin|ADCF4_CS_Pin
 800d918:	2200      	movs	r2, #0
 800d91a:	f64f 7187 	movw	r1, #65415	; 0xff87
 800d91e:	485c      	ldr	r0, [pc, #368]	; (800da90 <_ZL12MX_GPIO_Initv+0x250>)
 800d920:	f003 fae6 	bl	8010ef0 <HAL_GPIO_WritePin>
                          |ADCR1_CS_Pin|ADCR2_CS_Pin|ADCR3_CS_Pin|ADCR4_CS_Pin
                          |INFRA_LE_F_Pin|LED_LE_F_Pin|INFRA_OE_F_Pin|LED_OE_F_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 800d924:	2200      	movs	r2, #0
 800d926:	2180      	movs	r1, #128	; 0x80
 800d928:	485a      	ldr	r0, [pc, #360]	; (800da94 <_ZL12MX_GPIO_Initv+0x254>)
 800d92a:	f003 fae1 	bl	8010ef0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_RESET);
 800d92e:	2200      	movs	r2, #0
 800d930:	f44f 7100 	mov.w	r1, #512	; 0x200
 800d934:	4858      	ldr	r0, [pc, #352]	; (800da98 <_ZL12MX_GPIO_Initv+0x258>)
 800d936:	f003 fadb 	bl	8010ef0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, INFRA_LE_R_Pin|LED_LE_R_Pin|INFRA_OE_R_Pin|LED_OE_R_Pin
 800d93a:	2200      	movs	r2, #0
 800d93c:	f44f 41ec 	mov.w	r1, #30208	; 0x7600
 800d940:	4856      	ldr	r0, [pc, #344]	; (800da9c <_ZL12MX_GPIO_Initv+0x25c>)
 800d942:	f003 fad5 	bl	8010ef0 <HAL_GPIO_WritePin>
                          |LED1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : DRIVE_ENABLE_Pin */
  GPIO_InitStruct.Pin = DRIVE_ENABLE_Pin;
 800d946:	2308      	movs	r3, #8
 800d948:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800d94a:	2301      	movs	r3, #1
 800d94c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800d94e:	2302      	movs	r3, #2
 800d950:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800d952:	2303      	movs	r3, #3
 800d954:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(DRIVE_ENABLE_GPIO_Port, &GPIO_InitStruct);
 800d956:	f107 031c 	add.w	r3, r7, #28
 800d95a:	4619      	mov	r1, r3
 800d95c:	484a      	ldr	r0, [pc, #296]	; (800da88 <_ZL12MX_GPIO_Initv+0x248>)
 800d95e:	f003 f947 	bl	8010bf0 <HAL_GPIO_Init>

  /*Configure GPIO pins : MCU_FB_Pin REMOTE_GAS_Pin REMOTE_STEER_Pin */
  GPIO_InitStruct.Pin = MCU_FB_Pin|REMOTE_GAS_Pin|REMOTE_STEER_Pin;
 800d962:	f44f 73d0 	mov.w	r3, #416	; 0x1a0
 800d966:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800d968:	2300      	movs	r3, #0
 800d96a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d96c:	2300      	movs	r3, #0
 800d96e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800d970:	f107 031c 	add.w	r3, r7, #28
 800d974:	4619      	mov	r1, r3
 800d976:	4844      	ldr	r0, [pc, #272]	; (800da88 <_ZL12MX_GPIO_Initv+0x248>)
 800d978:	f003 f93a 	bl	8010bf0 <HAL_GPIO_Init>

  /*Configure GPIO pins : MAX_CS_Pin UCPD_DBN_Pin LED_BLUE_Pin */
  GPIO_InitStruct.Pin = MAX_CS_Pin|UCPD_DBN_Pin|LED_BLUE_Pin;
 800d97c:	23a4      	movs	r3, #164	; 0xa4
 800d97e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800d980:	2301      	movs	r3, #1
 800d982:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d984:	2300      	movs	r3, #0
 800d986:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800d988:	2300      	movs	r3, #0
 800d98a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800d98c:	f107 031c 	add.w	r3, r7, #28
 800d990:	4619      	mov	r1, r3
 800d992:	483e      	ldr	r0, [pc, #248]	; (800da8c <_ZL12MX_GPIO_Initv+0x24c>)
 800d994:	f003 f92c 	bl	8010bf0 <HAL_GPIO_Init>

  /*Configure GPIO pins : MCU_LED_Pin MOT_BATT_L_Pin LV_BATT_L_Pin */
  GPIO_InitStruct.Pin = MCU_LED_Pin|MOT_BATT_L_Pin|LV_BATT_L_Pin;
 800d998:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 800d99c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800d99e:	2301      	movs	r3, #1
 800d9a0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d9a2:	2300      	movs	r3, #0
 800d9a4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800d9a6:	2300      	movs	r3, #0
 800d9a8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800d9aa:	f107 031c 	add.w	r3, r7, #28
 800d9ae:	4619      	mov	r1, r3
 800d9b0:	4835      	ldr	r0, [pc, #212]	; (800da88 <_ZL12MX_GPIO_Initv+0x248>)
 800d9b2:	f003 f91d 	bl	8010bf0 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON2_Pin ROTARY1_Pin ROTARY2_Pin ROTARY3_Pin
                           ROTARY4_Pin BUTTON1_Pin */
  GPIO_InitStruct.Pin = BUTTON2_Pin|ROTARY1_Pin|ROTARY2_Pin|ROTARY3_Pin
 800d9b6:	f643 6301 	movw	r3, #15873	; 0x3e01
 800d9ba:	61fb      	str	r3, [r7, #28]
                          |ROTARY4_Pin|BUTTON1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800d9bc:	2300      	movs	r3, #0
 800d9be:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d9c0:	2300      	movs	r3, #0
 800d9c2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800d9c4:	f107 031c 	add.w	r3, r7, #28
 800d9c8:	4619      	mov	r1, r3
 800d9ca:	4835      	ldr	r0, [pc, #212]	; (800daa0 <_ZL12MX_GPIO_Initv+0x260>)
 800d9cc:	f003 f910 	bl	8010bf0 <HAL_GPIO_Init>

  /*Configure GPIO pin : UCPD_FLT_Pin */
  GPIO_InitStruct.Pin = UCPD_FLT_Pin;
 800d9d0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800d9d4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800d9d6:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800d9da:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d9dc:	2300      	movs	r3, #0
 800d9de:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(UCPD_FLT_GPIO_Port, &GPIO_InitStruct);
 800d9e0:	f107 031c 	add.w	r3, r7, #28
 800d9e4:	4619      	mov	r1, r3
 800d9e6:	4829      	ldr	r0, [pc, #164]	; (800da8c <_ZL12MX_GPIO_Initv+0x24c>)
 800d9e8:	f003 f902 	bl	8010bf0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ADCF1_CS_Pin ADCF2_CS_Pin ADCF3_CS_Pin ADCF4_CS_Pin
                           ADCR1_CS_Pin ADCR2_CS_Pin ADCR3_CS_Pin ADCR4_CS_Pin
                           INFRA_LE_F_Pin LED_LE_F_Pin INFRA_OE_F_Pin LED_OE_F_Pin */
  GPIO_InitStruct.Pin = ADCF1_CS_Pin|ADCF2_CS_Pin|ADCF3_CS_Pin|ADCF4_CS_Pin
 800d9ec:	f64f 7387 	movw	r3, #65415	; 0xff87
 800d9f0:	61fb      	str	r3, [r7, #28]
                          |ADCR1_CS_Pin|ADCR2_CS_Pin|ADCR3_CS_Pin|ADCR4_CS_Pin
                          |INFRA_LE_F_Pin|LED_LE_F_Pin|INFRA_OE_F_Pin|LED_OE_F_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800d9f2:	2301      	movs	r3, #1
 800d9f4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d9f6:	2300      	movs	r3, #0
 800d9f8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800d9fa:	2300      	movs	r3, #0
 800d9fc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800d9fe:	f107 031c 	add.w	r3, r7, #28
 800da02:	4619      	mov	r1, r3
 800da04:	4822      	ldr	r0, [pc, #136]	; (800da90 <_ZL12MX_GPIO_Initv+0x250>)
 800da06:	f003 f8f3 	bl	8010bf0 <HAL_GPIO_Init>

  /*Configure GPIO pins : RESET_BUTTON_Pin SET_BUTTON_Pin LED2_Pin */
  GPIO_InitStruct.Pin = RESET_BUTTON_Pin|SET_BUTTON_Pin|LED2_Pin;
 800da0a:	2370      	movs	r3, #112	; 0x70
 800da0c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800da0e:	2300      	movs	r3, #0
 800da10:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800da12:	2300      	movs	r3, #0
 800da14:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800da16:	f107 031c 	add.w	r3, r7, #28
 800da1a:	4619      	mov	r1, r3
 800da1c:	481f      	ldr	r0, [pc, #124]	; (800da9c <_ZL12MX_GPIO_Initv+0x25c>)
 800da1e:	f003 f8e7 	bl	8010bf0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_GREEN_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin;
 800da22:	2380      	movs	r3, #128	; 0x80
 800da24:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800da26:	2301      	movs	r3, #1
 800da28:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800da2a:	2300      	movs	r3, #0
 800da2c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800da2e:	2300      	movs	r3, #0
 800da30:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 800da32:	f107 031c 	add.w	r3, r7, #28
 800da36:	4619      	mov	r1, r3
 800da38:	4816      	ldr	r0, [pc, #88]	; (800da94 <_ZL12MX_GPIO_Initv+0x254>)
 800da3a:	f003 f8d9 	bl	8010bf0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_RED_Pin */
  GPIO_InitStruct.Pin = LED_RED_Pin;
 800da3e:	f44f 7300 	mov.w	r3, #512	; 0x200
 800da42:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800da44:	2301      	movs	r3, #1
 800da46:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800da48:	2300      	movs	r3, #0
 800da4a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800da4c:	2300      	movs	r3, #0
 800da4e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LED_RED_GPIO_Port, &GPIO_InitStruct);
 800da50:	f107 031c 	add.w	r3, r7, #28
 800da54:	4619      	mov	r1, r3
 800da56:	4810      	ldr	r0, [pc, #64]	; (800da98 <_ZL12MX_GPIO_Initv+0x258>)
 800da58:	f003 f8ca 	bl	8010bf0 <HAL_GPIO_Init>

  /*Configure GPIO pins : INFRA_LE_R_Pin LED_LE_R_Pin INFRA_OE_R_Pin LED_OE_R_Pin
                           LED1_Pin */
  GPIO_InitStruct.Pin = INFRA_LE_R_Pin|LED_LE_R_Pin|INFRA_OE_R_Pin|LED_OE_R_Pin
 800da5c:	f44f 43ec 	mov.w	r3, #30208	; 0x7600
 800da60:	61fb      	str	r3, [r7, #28]
                          |LED1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800da62:	2301      	movs	r3, #1
 800da64:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800da66:	2300      	movs	r3, #0
 800da68:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800da6a:	2300      	movs	r3, #0
 800da6c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800da6e:	f107 031c 	add.w	r3, r7, #28
 800da72:	4619      	mov	r1, r3
 800da74:	4809      	ldr	r0, [pc, #36]	; (800da9c <_ZL12MX_GPIO_Initv+0x25c>)
 800da76:	f003 f8bb 	bl	8010bf0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800da7a:	bf00      	nop
 800da7c:	3730      	adds	r7, #48	; 0x30
 800da7e:	46bd      	mov	sp, r7
 800da80:	bd80      	pop	{r7, pc}
 800da82:	bf00      	nop
 800da84:	40021000 	.word	0x40021000
 800da88:	42021400 	.word	0x42021400
 800da8c:	42020400 	.word	0x42020400
 800da90:	42020c00 	.word	0x42020c00
 800da94:	42020800 	.word	0x42020800
 800da98:	42020000 	.word	0x42020000
 800da9c:	42021800 	.word	0x42021800
 800daa0:	42021000 	.word	0x42021000

0800daa4 <_Z16StartDefaultTaskPv>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 800daa4:	b580      	push	{r7, lr}
 800daa6:	b082      	sub	sp, #8
 800daa8:	af00      	add	r7, sp, #0
 800daaa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  HAL_GPIO_TogglePin(LED_RED_GPIO_Port, LED_RED_Pin);
 800daac:	f44f 7100 	mov.w	r1, #512	; 0x200
 800dab0:	4803      	ldr	r0, [pc, #12]	; (800dac0 <_Z16StartDefaultTaskPv+0x1c>)
 800dab2:	f003 fa35 	bl	8010f20 <HAL_GPIO_TogglePin>
	  vTaskDelay(100);
 800dab6:	2064      	movs	r0, #100	; 0x64
 800dab8:	f00c f9c2 	bl	8019e40 <vTaskDelay>
	  HAL_GPIO_TogglePin(LED_RED_GPIO_Port, LED_RED_Pin);
 800dabc:	e7f6      	b.n	800daac <_Z16StartDefaultTaskPv+0x8>
 800dabe:	bf00      	nop
 800dac0:	42020000 	.word	0x42020000

0800dac4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800dac4:	b580      	push	{r7, lr}
 800dac6:	b082      	sub	sp, #8
 800dac8:	af00      	add	r7, sp, #0
 800daca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 800dacc:	687b      	ldr	r3, [r7, #4]
 800dace:	681b      	ldr	r3, [r3, #0]
 800dad0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800dad4:	d101      	bne.n	800dada <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800dad6:	f000 ff9b 	bl	800ea10 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */
  /* USER CODE END Callback 1 */
}
 800dada:	bf00      	nop
 800dadc:	3708      	adds	r7, #8
 800dade:	46bd      	mov	sp, r7
 800dae0:	bd80      	pop	{r7, pc}

0800dae2 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800dae2:	b480      	push	{r7}
 800dae4:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800dae6:	b672      	cpsid	i
}
 800dae8:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800daea:	e7fe      	b.n	800daea <Error_Handler+0x8>

0800daec <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800daec:	b580      	push	{r7, lr}
 800daee:	b082      	sub	sp, #8
 800daf0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800daf2:	4b11      	ldr	r3, [pc, #68]	; (800db38 <HAL_MspInit+0x4c>)
 800daf4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800daf6:	4a10      	ldr	r2, [pc, #64]	; (800db38 <HAL_MspInit+0x4c>)
 800daf8:	f043 0301 	orr.w	r3, r3, #1
 800dafc:	6613      	str	r3, [r2, #96]	; 0x60
 800dafe:	4b0e      	ldr	r3, [pc, #56]	; (800db38 <HAL_MspInit+0x4c>)
 800db00:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800db02:	f003 0301 	and.w	r3, r3, #1
 800db06:	607b      	str	r3, [r7, #4]
 800db08:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800db0a:	4b0b      	ldr	r3, [pc, #44]	; (800db38 <HAL_MspInit+0x4c>)
 800db0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800db0e:	4a0a      	ldr	r2, [pc, #40]	; (800db38 <HAL_MspInit+0x4c>)
 800db10:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800db14:	6593      	str	r3, [r2, #88]	; 0x58
 800db16:	4b08      	ldr	r3, [pc, #32]	; (800db38 <HAL_MspInit+0x4c>)
 800db18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800db1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800db1e:	603b      	str	r3, [r7, #0]
 800db20:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 7, 0);
 800db22:	2200      	movs	r2, #0
 800db24:	2107      	movs	r1, #7
 800db26:	f06f 0001 	mvn.w	r0, #1
 800db2a:	f002 fc8b 	bl	8010444 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800db2e:	bf00      	nop
 800db30:	3708      	adds	r7, #8
 800db32:	46bd      	mov	sp, r7
 800db34:	bd80      	pop	{r7, pc}
 800db36:	bf00      	nop
 800db38:	40021000 	.word	0x40021000

0800db3c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800db3c:	b580      	push	{r7, lr}
 800db3e:	b08c      	sub	sp, #48	; 0x30
 800db40:	af00      	add	r7, sp, #0
 800db42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800db44:	f107 031c 	add.w	r3, r7, #28
 800db48:	2200      	movs	r2, #0
 800db4a:	601a      	str	r2, [r3, #0]
 800db4c:	605a      	str	r2, [r3, #4]
 800db4e:	609a      	str	r2, [r3, #8]
 800db50:	60da      	str	r2, [r3, #12]
 800db52:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800db54:	687b      	ldr	r3, [r7, #4]
 800db56:	681b      	ldr	r3, [r3, #0]
 800db58:	4a4b      	ldr	r2, [pc, #300]	; (800dc88 <HAL_ADC_MspInit+0x14c>)
 800db5a:	4293      	cmp	r3, r2
 800db5c:	f040 8090 	bne.w	800dc80 <HAL_ADC_MspInit+0x144>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 800db60:	4b4a      	ldr	r3, [pc, #296]	; (800dc8c <HAL_ADC_MspInit+0x150>)
 800db62:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800db64:	4a49      	ldr	r2, [pc, #292]	; (800dc8c <HAL_ADC_MspInit+0x150>)
 800db66:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800db6a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800db6c:	4b47      	ldr	r3, [pc, #284]	; (800dc8c <HAL_ADC_MspInit+0x150>)
 800db6e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800db70:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800db74:	61bb      	str	r3, [r7, #24]
 800db76:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800db78:	4b44      	ldr	r3, [pc, #272]	; (800dc8c <HAL_ADC_MspInit+0x150>)
 800db7a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800db7c:	4a43      	ldr	r2, [pc, #268]	; (800dc8c <HAL_ADC_MspInit+0x150>)
 800db7e:	f043 0304 	orr.w	r3, r3, #4
 800db82:	64d3      	str	r3, [r2, #76]	; 0x4c
 800db84:	4b41      	ldr	r3, [pc, #260]	; (800dc8c <HAL_ADC_MspInit+0x150>)
 800db86:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800db88:	f003 0304 	and.w	r3, r3, #4
 800db8c:	617b      	str	r3, [r7, #20]
 800db8e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800db90:	4b3e      	ldr	r3, [pc, #248]	; (800dc8c <HAL_ADC_MspInit+0x150>)
 800db92:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800db94:	4a3d      	ldr	r2, [pc, #244]	; (800dc8c <HAL_ADC_MspInit+0x150>)
 800db96:	f043 0301 	orr.w	r3, r3, #1
 800db9a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800db9c:	4b3b      	ldr	r3, [pc, #236]	; (800dc8c <HAL_ADC_MspInit+0x150>)
 800db9e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800dba0:	f003 0301 	and.w	r3, r3, #1
 800dba4:	613b      	str	r3, [r7, #16]
 800dba6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800dba8:	4b38      	ldr	r3, [pc, #224]	; (800dc8c <HAL_ADC_MspInit+0x150>)
 800dbaa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800dbac:	4a37      	ldr	r2, [pc, #220]	; (800dc8c <HAL_ADC_MspInit+0x150>)
 800dbae:	f043 0302 	orr.w	r3, r3, #2
 800dbb2:	64d3      	str	r3, [r2, #76]	; 0x4c
 800dbb4:	4b35      	ldr	r3, [pc, #212]	; (800dc8c <HAL_ADC_MspInit+0x150>)
 800dbb6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800dbb8:	f003 0302 	and.w	r3, r3, #2
 800dbbc:	60fb      	str	r3, [r7, #12]
 800dbbe:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> ADC1_IN9
    PA7     ------> ADC1_IN12
    PB0     ------> ADC1_IN15
    PB1     ------> ADC1_IN16
    */
    GPIO_InitStruct.Pin = BATT_VOLTAGE_Pin|MOT_CURR_Pin|VBUS_SENSE_Pin|ENC_CHA_Pin;
 800dbc0:	230f      	movs	r3, #15
 800dbc2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800dbc4:	2303      	movs	r3, #3
 800dbc6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800dbc8:	2300      	movs	r3, #0
 800dbca:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800dbcc:	f107 031c 	add.w	r3, r7, #28
 800dbd0:	4619      	mov	r1, r3
 800dbd2:	482f      	ldr	r0, [pc, #188]	; (800dc90 <HAL_ADC_MspInit+0x154>)
 800dbd4:	f003 f80c 	bl	8010bf0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DISTANCE2_ADC_Pin|DISTANCE1_ADC_Pin|DISTANCE3_ADC_Pin|LV_BATT_Pin;
 800dbd8:	239c      	movs	r3, #156	; 0x9c
 800dbda:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800dbdc:	2303      	movs	r3, #3
 800dbde:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800dbe0:	2300      	movs	r3, #0
 800dbe2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800dbe4:	f107 031c 	add.w	r3, r7, #28
 800dbe8:	4619      	mov	r1, r3
 800dbea:	482a      	ldr	r0, [pc, #168]	; (800dc94 <HAL_ADC_MspInit+0x158>)
 800dbec:	f003 f800 	bl	8010bf0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ENC_CHBB0_Pin|DISTANCE4_ADC_Pin;
 800dbf0:	2303      	movs	r3, #3
 800dbf2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800dbf4:	2303      	movs	r3, #3
 800dbf6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800dbf8:	2300      	movs	r3, #0
 800dbfa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800dbfc:	f107 031c 	add.w	r3, r7, #28
 800dc00:	4619      	mov	r1, r3
 800dc02:	4825      	ldr	r0, [pc, #148]	; (800dc98 <HAL_ADC_MspInit+0x15c>)
 800dc04:	f002 fff4 	bl	8010bf0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 800dc08:	4b24      	ldr	r3, [pc, #144]	; (800dc9c <HAL_ADC_MspInit+0x160>)
 800dc0a:	4a25      	ldr	r2, [pc, #148]	; (800dca0 <HAL_ADC_MspInit+0x164>)
 800dc0c:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 800dc0e:	4b23      	ldr	r3, [pc, #140]	; (800dc9c <HAL_ADC_MspInit+0x160>)
 800dc10:	2205      	movs	r2, #5
 800dc12:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800dc14:	4b21      	ldr	r3, [pc, #132]	; (800dc9c <HAL_ADC_MspInit+0x160>)
 800dc16:	2200      	movs	r2, #0
 800dc18:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800dc1a:	4b20      	ldr	r3, [pc, #128]	; (800dc9c <HAL_ADC_MspInit+0x160>)
 800dc1c:	2200      	movs	r2, #0
 800dc1e:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800dc20:	4b1e      	ldr	r3, [pc, #120]	; (800dc9c <HAL_ADC_MspInit+0x160>)
 800dc22:	2280      	movs	r2, #128	; 0x80
 800dc24:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800dc26:	4b1d      	ldr	r3, [pc, #116]	; (800dc9c <HAL_ADC_MspInit+0x160>)
 800dc28:	f44f 7200 	mov.w	r2, #512	; 0x200
 800dc2c:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800dc2e:	4b1b      	ldr	r3, [pc, #108]	; (800dc9c <HAL_ADC_MspInit+0x160>)
 800dc30:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800dc34:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 800dc36:	4b19      	ldr	r3, [pc, #100]	; (800dc9c <HAL_ADC_MspInit+0x160>)
 800dc38:	2200      	movs	r2, #0
 800dc3a:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800dc3c:	4b17      	ldr	r3, [pc, #92]	; (800dc9c <HAL_ADC_MspInit+0x160>)
 800dc3e:	2200      	movs	r2, #0
 800dc40:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800dc42:	4816      	ldr	r0, [pc, #88]	; (800dc9c <HAL_ADC_MspInit+0x160>)
 800dc44:	f002 fc26 	bl	8010494 <HAL_DMA_Init>
 800dc48:	4603      	mov	r3, r0
 800dc4a:	2b00      	cmp	r3, #0
 800dc4c:	d001      	beq.n	800dc52 <HAL_ADC_MspInit+0x116>
    {
      Error_Handler();
 800dc4e:	f7ff ff48 	bl	800dae2 <Error_Handler>
    }

    if (HAL_DMA_ConfigChannelAttributes(&hdma_adc1, DMA_CHANNEL_NPRIV) != HAL_OK)
 800dc52:	2110      	movs	r1, #16
 800dc54:	4811      	ldr	r0, [pc, #68]	; (800dc9c <HAL_ADC_MspInit+0x160>)
 800dc56:	f002 fefb 	bl	8010a50 <HAL_DMA_ConfigChannelAttributes>
 800dc5a:	4603      	mov	r3, r0
 800dc5c:	2b00      	cmp	r3, #0
 800dc5e:	d001      	beq.n	800dc64 <HAL_ADC_MspInit+0x128>
    {
      Error_Handler();
 800dc60:	f7ff ff3f 	bl	800dae2 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800dc64:	687b      	ldr	r3, [r7, #4]
 800dc66:	4a0d      	ldr	r2, [pc, #52]	; (800dc9c <HAL_ADC_MspInit+0x160>)
 800dc68:	651a      	str	r2, [r3, #80]	; 0x50
 800dc6a:	4a0c      	ldr	r2, [pc, #48]	; (800dc9c <HAL_ADC_MspInit+0x160>)
 800dc6c:	687b      	ldr	r3, [r7, #4]
 800dc6e:	6293      	str	r3, [r2, #40]	; 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 5, 0);
 800dc70:	2200      	movs	r2, #0
 800dc72:	2105      	movs	r1, #5
 800dc74:	2025      	movs	r0, #37	; 0x25
 800dc76:	f002 fbe5 	bl	8010444 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 800dc7a:	2025      	movs	r0, #37	; 0x25
 800dc7c:	f002 fbfc 	bl	8010478 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800dc80:	bf00      	nop
 800dc82:	3730      	adds	r7, #48	; 0x30
 800dc84:	46bd      	mov	sp, r7
 800dc86:	bd80      	pop	{r7, pc}
 800dc88:	42028000 	.word	0x42028000
 800dc8c:	40021000 	.word	0x40021000
 800dc90:	42020800 	.word	0x42020800
 800dc94:	42020000 	.word	0x42020000
 800dc98:	42020400 	.word	0x42020400
 800dc9c:	2000034c 	.word	0x2000034c
 800dca0:	40020008 	.word	0x40020008

0800dca4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800dca4:	b580      	push	{r7, lr}
 800dca6:	b0ae      	sub	sp, #184	; 0xb8
 800dca8:	af00      	add	r7, sp, #0
 800dcaa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800dcac:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800dcb0:	2200      	movs	r2, #0
 800dcb2:	601a      	str	r2, [r3, #0]
 800dcb4:	605a      	str	r2, [r3, #4]
 800dcb6:	609a      	str	r2, [r3, #8]
 800dcb8:	60da      	str	r2, [r3, #12]
 800dcba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800dcbc:	f107 0310 	add.w	r3, r7, #16
 800dcc0:	2294      	movs	r2, #148	; 0x94
 800dcc2:	2100      	movs	r1, #0
 800dcc4:	4618      	mov	r0, r3
 800dcc6:	f00f fef6 	bl	801dab6 <memset>
  if(hi2c->Instance==I2C1)
 800dcca:	687b      	ldr	r3, [r7, #4]
 800dccc:	681b      	ldr	r3, [r3, #0]
 800dcce:	4a21      	ldr	r2, [pc, #132]	; (800dd54 <HAL_I2C_MspInit+0xb0>)
 800dcd0:	4293      	cmp	r3, r2
 800dcd2:	d13b      	bne.n	800dd4c <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800dcd4:	2340      	movs	r3, #64	; 0x40
 800dcd6:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800dcd8:	2300      	movs	r3, #0
 800dcda:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800dcdc:	f107 0310 	add.w	r3, r7, #16
 800dce0:	4618      	mov	r0, r3
 800dce2:	f005 f8a9 	bl	8012e38 <HAL_RCCEx_PeriphCLKConfig>
 800dce6:	4603      	mov	r3, r0
 800dce8:	2b00      	cmp	r3, #0
 800dcea:	d001      	beq.n	800dcf0 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 800dcec:	f7ff fef9 	bl	800dae2 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800dcf0:	4b19      	ldr	r3, [pc, #100]	; (800dd58 <HAL_I2C_MspInit+0xb4>)
 800dcf2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800dcf4:	4a18      	ldr	r2, [pc, #96]	; (800dd58 <HAL_I2C_MspInit+0xb4>)
 800dcf6:	f043 0302 	orr.w	r3, r3, #2
 800dcfa:	64d3      	str	r3, [r2, #76]	; 0x4c
 800dcfc:	4b16      	ldr	r3, [pc, #88]	; (800dd58 <HAL_I2C_MspInit+0xb4>)
 800dcfe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800dd00:	f003 0302 	and.w	r3, r3, #2
 800dd04:	60fb      	str	r3, [r7, #12]
 800dd06:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800dd08:	f44f 7340 	mov.w	r3, #768	; 0x300
 800dd0c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800dd10:	2312      	movs	r3, #18
 800dd12:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800dd16:	2300      	movs	r3, #0
 800dd18:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800dd1c:	2300      	movs	r3, #0
 800dd1e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800dd22:	2304      	movs	r3, #4
 800dd24:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800dd28:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800dd2c:	4619      	mov	r1, r3
 800dd2e:	480b      	ldr	r0, [pc, #44]	; (800dd5c <HAL_I2C_MspInit+0xb8>)
 800dd30:	f002 ff5e 	bl	8010bf0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800dd34:	4b08      	ldr	r3, [pc, #32]	; (800dd58 <HAL_I2C_MspInit+0xb4>)
 800dd36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800dd38:	4a07      	ldr	r2, [pc, #28]	; (800dd58 <HAL_I2C_MspInit+0xb4>)
 800dd3a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800dd3e:	6593      	str	r3, [r2, #88]	; 0x58
 800dd40:	4b05      	ldr	r3, [pc, #20]	; (800dd58 <HAL_I2C_MspInit+0xb4>)
 800dd42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800dd44:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800dd48:	60bb      	str	r3, [r7, #8]
 800dd4a:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800dd4c:	bf00      	nop
 800dd4e:	37b8      	adds	r7, #184	; 0xb8
 800dd50:	46bd      	mov	sp, r7
 800dd52:	bd80      	pop	{r7, pc}
 800dd54:	40005400 	.word	0x40005400
 800dd58:	40021000 	.word	0x40021000
 800dd5c:	42020400 	.word	0x42020400

0800dd60 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800dd60:	b580      	push	{r7, lr}
 800dd62:	b0b2      	sub	sp, #200	; 0xc8
 800dd64:	af00      	add	r7, sp, #0
 800dd66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800dd68:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 800dd6c:	2200      	movs	r2, #0
 800dd6e:	601a      	str	r2, [r3, #0]
 800dd70:	605a      	str	r2, [r3, #4]
 800dd72:	609a      	str	r2, [r3, #8]
 800dd74:	60da      	str	r2, [r3, #12]
 800dd76:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800dd78:	f107 0320 	add.w	r3, r7, #32
 800dd7c:	2294      	movs	r2, #148	; 0x94
 800dd7e:	2100      	movs	r1, #0
 800dd80:	4618      	mov	r0, r3
 800dd82:	f00f fe98 	bl	801dab6 <memset>
  if(huart->Instance==LPUART1)
 800dd86:	687b      	ldr	r3, [r7, #4]
 800dd88:	681b      	ldr	r3, [r3, #0]
 800dd8a:	4a67      	ldr	r2, [pc, #412]	; (800df28 <HAL_UART_MspInit+0x1c8>)
 800dd8c:	4293      	cmp	r3, r2
 800dd8e:	d13e      	bne.n	800de0e <HAL_UART_MspInit+0xae>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 800dd90:	2320      	movs	r3, #32
 800dd92:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 800dd94:	2300      	movs	r3, #0
 800dd96:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800dd98:	f107 0320 	add.w	r3, r7, #32
 800dd9c:	4618      	mov	r0, r3
 800dd9e:	f005 f84b 	bl	8012e38 <HAL_RCCEx_PeriphCLKConfig>
 800dda2:	4603      	mov	r3, r0
 800dda4:	2b00      	cmp	r3, #0
 800dda6:	d001      	beq.n	800ddac <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800dda8:	f7ff fe9b 	bl	800dae2 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 800ddac:	4b5f      	ldr	r3, [pc, #380]	; (800df2c <HAL_UART_MspInit+0x1cc>)
 800ddae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ddb0:	4a5e      	ldr	r2, [pc, #376]	; (800df2c <HAL_UART_MspInit+0x1cc>)
 800ddb2:	f043 0301 	orr.w	r3, r3, #1
 800ddb6:	65d3      	str	r3, [r2, #92]	; 0x5c
 800ddb8:	4b5c      	ldr	r3, [pc, #368]	; (800df2c <HAL_UART_MspInit+0x1cc>)
 800ddba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ddbc:	f003 0301 	and.w	r3, r3, #1
 800ddc0:	61fb      	str	r3, [r7, #28]
 800ddc2:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 800ddc4:	4b59      	ldr	r3, [pc, #356]	; (800df2c <HAL_UART_MspInit+0x1cc>)
 800ddc6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ddc8:	4a58      	ldr	r2, [pc, #352]	; (800df2c <HAL_UART_MspInit+0x1cc>)
 800ddca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ddce:	64d3      	str	r3, [r2, #76]	; 0x4c
 800ddd0:	4b56      	ldr	r3, [pc, #344]	; (800df2c <HAL_UART_MspInit+0x1cc>)
 800ddd2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ddd4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ddd8:	61bb      	str	r3, [r7, #24]
 800ddda:	69bb      	ldr	r3, [r7, #24]
    HAL_PWREx_EnableVddIO2();
 800dddc:	f004 f80c 	bl	8011df8 <HAL_PWREx_EnableVddIO2>
    /**LPUART1 GPIO Configuration
    PG7     ------> LPUART1_TX
    PG8     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = ST_LINK_VCP_TX_Pin|ST_LINK_VCP_RX_Pin;
 800dde0:	f44f 73c0 	mov.w	r3, #384	; 0x180
 800dde4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800dde8:	2302      	movs	r3, #2
 800ddea:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ddee:	2300      	movs	r3, #0
 800ddf0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800ddf4:	2300      	movs	r3, #0
 800ddf6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 800ddfa:	2308      	movs	r3, #8
 800ddfc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800de00:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 800de04:	4619      	mov	r1, r3
 800de06:	484a      	ldr	r0, [pc, #296]	; (800df30 <HAL_UART_MspInit+0x1d0>)
 800de08:	f002 fef2 	bl	8010bf0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800de0c:	e088      	b.n	800df20 <HAL_UART_MspInit+0x1c0>
  else if(huart->Instance==UART4)
 800de0e:	687b      	ldr	r3, [r7, #4]
 800de10:	681b      	ldr	r3, [r3, #0]
 800de12:	4a48      	ldr	r2, [pc, #288]	; (800df34 <HAL_UART_MspInit+0x1d4>)
 800de14:	4293      	cmp	r3, r2
 800de16:	d143      	bne.n	800dea0 <HAL_UART_MspInit+0x140>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 800de18:	2308      	movs	r3, #8
 800de1a:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 800de1c:	2300      	movs	r3, #0
 800de1e:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800de20:	f107 0320 	add.w	r3, r7, #32
 800de24:	4618      	mov	r0, r3
 800de26:	f005 f807 	bl	8012e38 <HAL_RCCEx_PeriphCLKConfig>
 800de2a:	4603      	mov	r3, r0
 800de2c:	2b00      	cmp	r3, #0
 800de2e:	d001      	beq.n	800de34 <HAL_UART_MspInit+0xd4>
      Error_Handler();
 800de30:	f7ff fe57 	bl	800dae2 <Error_Handler>
    __HAL_RCC_UART4_CLK_ENABLE();
 800de34:	4b3d      	ldr	r3, [pc, #244]	; (800df2c <HAL_UART_MspInit+0x1cc>)
 800de36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800de38:	4a3c      	ldr	r2, [pc, #240]	; (800df2c <HAL_UART_MspInit+0x1cc>)
 800de3a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800de3e:	6593      	str	r3, [r2, #88]	; 0x58
 800de40:	4b3a      	ldr	r3, [pc, #232]	; (800df2c <HAL_UART_MspInit+0x1cc>)
 800de42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800de44:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800de48:	617b      	str	r3, [r7, #20]
 800de4a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800de4c:	4b37      	ldr	r3, [pc, #220]	; (800df2c <HAL_UART_MspInit+0x1cc>)
 800de4e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800de50:	4a36      	ldr	r2, [pc, #216]	; (800df2c <HAL_UART_MspInit+0x1cc>)
 800de52:	f043 0301 	orr.w	r3, r3, #1
 800de56:	64d3      	str	r3, [r2, #76]	; 0x4c
 800de58:	4b34      	ldr	r3, [pc, #208]	; (800df2c <HAL_UART_MspInit+0x1cc>)
 800de5a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800de5c:	f003 0301 	and.w	r3, r3, #1
 800de60:	613b      	str	r3, [r7, #16]
 800de62:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800de64:	2303      	movs	r3, #3
 800de66:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800de6a:	2302      	movs	r3, #2
 800de6c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800de70:	2300      	movs	r3, #0
 800de72:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800de76:	2300      	movs	r3, #0
 800de78:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 800de7c:	2308      	movs	r3, #8
 800de7e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800de82:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 800de86:	4619      	mov	r1, r3
 800de88:	482b      	ldr	r0, [pc, #172]	; (800df38 <HAL_UART_MspInit+0x1d8>)
 800de8a:	f002 feb1 	bl	8010bf0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(UART4_IRQn, 5, 0);
 800de8e:	2200      	movs	r2, #0
 800de90:	2105      	movs	r1, #5
 800de92:	2040      	movs	r0, #64	; 0x40
 800de94:	f002 fad6 	bl	8010444 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 800de98:	2040      	movs	r0, #64	; 0x40
 800de9a:	f002 faed 	bl	8010478 <HAL_NVIC_EnableIRQ>
}
 800de9e:	e03f      	b.n	800df20 <HAL_UART_MspInit+0x1c0>
  else if(huart->Instance==USART2)
 800dea0:	687b      	ldr	r3, [r7, #4]
 800dea2:	681b      	ldr	r3, [r3, #0]
 800dea4:	4a25      	ldr	r2, [pc, #148]	; (800df3c <HAL_UART_MspInit+0x1dc>)
 800dea6:	4293      	cmp	r3, r2
 800dea8:	d13a      	bne.n	800df20 <HAL_UART_MspInit+0x1c0>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800deaa:	2302      	movs	r3, #2
 800deac:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800deae:	2300      	movs	r3, #0
 800deb0:	65bb      	str	r3, [r7, #88]	; 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800deb2:	f107 0320 	add.w	r3, r7, #32
 800deb6:	4618      	mov	r0, r3
 800deb8:	f004 ffbe 	bl	8012e38 <HAL_RCCEx_PeriphCLKConfig>
 800debc:	4603      	mov	r3, r0
 800debe:	2b00      	cmp	r3, #0
 800dec0:	d001      	beq.n	800dec6 <HAL_UART_MspInit+0x166>
      Error_Handler();
 800dec2:	f7ff fe0e 	bl	800dae2 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 800dec6:	4b19      	ldr	r3, [pc, #100]	; (800df2c <HAL_UART_MspInit+0x1cc>)
 800dec8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800deca:	4a18      	ldr	r2, [pc, #96]	; (800df2c <HAL_UART_MspInit+0x1cc>)
 800decc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ded0:	6593      	str	r3, [r2, #88]	; 0x58
 800ded2:	4b16      	ldr	r3, [pc, #88]	; (800df2c <HAL_UART_MspInit+0x1cc>)
 800ded4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ded6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800deda:	60fb      	str	r3, [r7, #12]
 800dedc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800dede:	4b13      	ldr	r3, [pc, #76]	; (800df2c <HAL_UART_MspInit+0x1cc>)
 800dee0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800dee2:	4a12      	ldr	r2, [pc, #72]	; (800df2c <HAL_UART_MspInit+0x1cc>)
 800dee4:	f043 0308 	orr.w	r3, r3, #8
 800dee8:	64d3      	str	r3, [r2, #76]	; 0x4c
 800deea:	4b10      	ldr	r3, [pc, #64]	; (800df2c <HAL_UART_MspInit+0x1cc>)
 800deec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800deee:	f003 0308 	and.w	r3, r3, #8
 800def2:	60bb      	str	r3, [r7, #8]
 800def4:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = XBEE_TX_Pin|XBEE_RX_Pin;
 800def6:	2360      	movs	r3, #96	; 0x60
 800def8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800defc:	2302      	movs	r3, #2
 800defe:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800df02:	2300      	movs	r3, #0
 800df04:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800df08:	2300      	movs	r3, #0
 800df0a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800df0e:	2307      	movs	r3, #7
 800df10:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800df14:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 800df18:	4619      	mov	r1, r3
 800df1a:	4809      	ldr	r0, [pc, #36]	; (800df40 <HAL_UART_MspInit+0x1e0>)
 800df1c:	f002 fe68 	bl	8010bf0 <HAL_GPIO_Init>
}
 800df20:	bf00      	nop
 800df22:	37c8      	adds	r7, #200	; 0xc8
 800df24:	46bd      	mov	sp, r7
 800df26:	bd80      	pop	{r7, pc}
 800df28:	40008000 	.word	0x40008000
 800df2c:	40021000 	.word	0x40021000
 800df30:	42021800 	.word	0x42021800
 800df34:	40004c00 	.word	0x40004c00
 800df38:	42020000 	.word	0x42020000
 800df3c:	40004400 	.word	0x40004400
 800df40:	42020c00 	.word	0x42020c00

0800df44 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 800df44:	b580      	push	{r7, lr}
 800df46:	b0a8      	sub	sp, #160	; 0xa0
 800df48:	af00      	add	r7, sp, #0
 800df4a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800df4c:	f107 030c 	add.w	r3, r7, #12
 800df50:	2294      	movs	r2, #148	; 0x94
 800df52:	2100      	movs	r1, #0
 800df54:	4618      	mov	r0, r3
 800df56:	f00f fdae 	bl	801dab6 <memset>
  if(hrtc->Instance==RTC)
 800df5a:	687b      	ldr	r3, [r7, #4]
 800df5c:	681b      	ldr	r3, [r3, #0]
 800df5e:	4a16      	ldr	r2, [pc, #88]	; (800dfb8 <HAL_RTC_MspInit+0x74>)
 800df60:	4293      	cmp	r3, r2
 800df62:	d124      	bne.n	800dfae <HAL_RTC_MspInit+0x6a>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800df64:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800df68:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 800df6a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800df6e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800df72:	f107 030c 	add.w	r3, r7, #12
 800df76:	4618      	mov	r0, r3
 800df78:	f004 ff5e 	bl	8012e38 <HAL_RCCEx_PeriphCLKConfig>
 800df7c:	4603      	mov	r3, r0
 800df7e:	2b00      	cmp	r3, #0
 800df80:	d001      	beq.n	800df86 <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 800df82:	f7ff fdae 	bl	800dae2 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800df86:	4b0d      	ldr	r3, [pc, #52]	; (800dfbc <HAL_RTC_MspInit+0x78>)
 800df88:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800df8c:	4a0b      	ldr	r2, [pc, #44]	; (800dfbc <HAL_RTC_MspInit+0x78>)
 800df8e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800df92:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 800df96:	4b09      	ldr	r3, [pc, #36]	; (800dfbc <HAL_RTC_MspInit+0x78>)
 800df98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800df9a:	4a08      	ldr	r2, [pc, #32]	; (800dfbc <HAL_RTC_MspInit+0x78>)
 800df9c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800dfa0:	6593      	str	r3, [r2, #88]	; 0x58
 800dfa2:	4b06      	ldr	r3, [pc, #24]	; (800dfbc <HAL_RTC_MspInit+0x78>)
 800dfa4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800dfa6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800dfaa:	60bb      	str	r3, [r7, #8]
 800dfac:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 800dfae:	bf00      	nop
 800dfb0:	37a0      	adds	r7, #160	; 0xa0
 800dfb2:	46bd      	mov	sp, r7
 800dfb4:	bd80      	pop	{r7, pc}
 800dfb6:	bf00      	nop
 800dfb8:	40002800 	.word	0x40002800
 800dfbc:	40021000 	.word	0x40021000

0800dfc0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800dfc0:	b580      	push	{r7, lr}
 800dfc2:	b090      	sub	sp, #64	; 0x40
 800dfc4:	af00      	add	r7, sp, #0
 800dfc6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800dfc8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800dfcc:	2200      	movs	r2, #0
 800dfce:	601a      	str	r2, [r3, #0]
 800dfd0:	605a      	str	r2, [r3, #4]
 800dfd2:	609a      	str	r2, [r3, #8]
 800dfd4:	60da      	str	r2, [r3, #12]
 800dfd6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800dfd8:	687b      	ldr	r3, [r7, #4]
 800dfda:	681b      	ldr	r3, [r3, #0]
 800dfdc:	4a62      	ldr	r2, [pc, #392]	; (800e168 <HAL_SPI_MspInit+0x1a8>)
 800dfde:	4293      	cmp	r3, r2
 800dfe0:	d145      	bne.n	800e06e <HAL_SPI_MspInit+0xae>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800dfe2:	4b62      	ldr	r3, [pc, #392]	; (800e16c <HAL_SPI_MspInit+0x1ac>)
 800dfe4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800dfe6:	4a61      	ldr	r2, [pc, #388]	; (800e16c <HAL_SPI_MspInit+0x1ac>)
 800dfe8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800dfec:	6613      	str	r3, [r2, #96]	; 0x60
 800dfee:	4b5f      	ldr	r3, [pc, #380]	; (800e16c <HAL_SPI_MspInit+0x1ac>)
 800dff0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800dff2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800dff6:	62bb      	str	r3, [r7, #40]	; 0x28
 800dff8:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800dffa:	4b5c      	ldr	r3, [pc, #368]	; (800e16c <HAL_SPI_MspInit+0x1ac>)
 800dffc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800dffe:	4a5b      	ldr	r2, [pc, #364]	; (800e16c <HAL_SPI_MspInit+0x1ac>)
 800e000:	f043 0301 	orr.w	r3, r3, #1
 800e004:	64d3      	str	r3, [r2, #76]	; 0x4c
 800e006:	4b59      	ldr	r3, [pc, #356]	; (800e16c <HAL_SPI_MspInit+0x1ac>)
 800e008:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e00a:	f003 0301 	and.w	r3, r3, #1
 800e00e:	627b      	str	r3, [r7, #36]	; 0x24
 800e010:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800e012:	4b56      	ldr	r3, [pc, #344]	; (800e16c <HAL_SPI_MspInit+0x1ac>)
 800e014:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e016:	4a55      	ldr	r2, [pc, #340]	; (800e16c <HAL_SPI_MspInit+0x1ac>)
 800e018:	f043 0310 	orr.w	r3, r3, #16
 800e01c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800e01e:	4b53      	ldr	r3, [pc, #332]	; (800e16c <HAL_SPI_MspInit+0x1ac>)
 800e020:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e022:	f003 0310 	and.w	r3, r3, #16
 800e026:	623b      	str	r3, [r7, #32]
 800e028:	6a3b      	ldr	r3, [r7, #32]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PE15     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI_ADC_CLK_Pin|SPI_ADC_MISO_Pin;
 800e02a:	2360      	movs	r3, #96	; 0x60
 800e02c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e02e:	2302      	movs	r3, #2
 800e030:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e032:	2300      	movs	r3, #0
 800e034:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800e036:	2300      	movs	r3, #0
 800e038:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800e03a:	2305      	movs	r3, #5
 800e03c:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800e03e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800e042:	4619      	mov	r1, r3
 800e044:	484a      	ldr	r0, [pc, #296]	; (800e170 <HAL_SPI_MspInit+0x1b0>)
 800e046:	f002 fdd3 	bl	8010bf0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SPI_ADC_MOSI_Pin;
 800e04a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e04e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e050:	2302      	movs	r3, #2
 800e052:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e054:	2300      	movs	r3, #0
 800e056:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800e058:	2300      	movs	r3, #0
 800e05a:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800e05c:	2305      	movs	r3, #5
 800e05e:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(SPI_ADC_MOSI_GPIO_Port, &GPIO_InitStruct);
 800e060:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800e064:	4619      	mov	r1, r3
 800e066:	4843      	ldr	r0, [pc, #268]	; (800e174 <HAL_SPI_MspInit+0x1b4>)
 800e068:	f002 fdc2 	bl	8010bf0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 800e06c:	e078      	b.n	800e160 <HAL_SPI_MspInit+0x1a0>
  else if(hspi->Instance==SPI2)
 800e06e:	687b      	ldr	r3, [r7, #4]
 800e070:	681b      	ldr	r3, [r3, #0]
 800e072:	4a41      	ldr	r2, [pc, #260]	; (800e178 <HAL_SPI_MspInit+0x1b8>)
 800e074:	4293      	cmp	r3, r2
 800e076:	d145      	bne.n	800e104 <HAL_SPI_MspInit+0x144>
    __HAL_RCC_SPI2_CLK_ENABLE();
 800e078:	4b3c      	ldr	r3, [pc, #240]	; (800e16c <HAL_SPI_MspInit+0x1ac>)
 800e07a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e07c:	4a3b      	ldr	r2, [pc, #236]	; (800e16c <HAL_SPI_MspInit+0x1ac>)
 800e07e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800e082:	6593      	str	r3, [r2, #88]	; 0x58
 800e084:	4b39      	ldr	r3, [pc, #228]	; (800e16c <HAL_SPI_MspInit+0x1ac>)
 800e086:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e088:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800e08c:	61fb      	str	r3, [r7, #28]
 800e08e:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800e090:	4b36      	ldr	r3, [pc, #216]	; (800e16c <HAL_SPI_MspInit+0x1ac>)
 800e092:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e094:	4a35      	ldr	r2, [pc, #212]	; (800e16c <HAL_SPI_MspInit+0x1ac>)
 800e096:	f043 0302 	orr.w	r3, r3, #2
 800e09a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800e09c:	4b33      	ldr	r3, [pc, #204]	; (800e16c <HAL_SPI_MspInit+0x1ac>)
 800e09e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e0a0:	f003 0302 	and.w	r3, r3, #2
 800e0a4:	61bb      	str	r3, [r7, #24]
 800e0a6:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800e0a8:	4b30      	ldr	r3, [pc, #192]	; (800e16c <HAL_SPI_MspInit+0x1ac>)
 800e0aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e0ac:	4a2f      	ldr	r2, [pc, #188]	; (800e16c <HAL_SPI_MspInit+0x1ac>)
 800e0ae:	f043 0308 	orr.w	r3, r3, #8
 800e0b2:	64d3      	str	r3, [r2, #76]	; 0x4c
 800e0b4:	4b2d      	ldr	r3, [pc, #180]	; (800e16c <HAL_SPI_MspInit+0x1ac>)
 800e0b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e0b8:	f003 0308 	and.w	r3, r3, #8
 800e0bc:	617b      	str	r3, [r7, #20]
 800e0be:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800e0c0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e0c4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e0c6:	2302      	movs	r3, #2
 800e0c8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e0ca:	2300      	movs	r3, #0
 800e0cc:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800e0ce:	2300      	movs	r3, #0
 800e0d0:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800e0d2:	2305      	movs	r3, #5
 800e0d4:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800e0d6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800e0da:	4619      	mov	r1, r3
 800e0dc:	4827      	ldr	r0, [pc, #156]	; (800e17c <HAL_SPI_MspInit+0x1bc>)
 800e0de:	f002 fd87 	bl	8010bf0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 800e0e2:	2318      	movs	r3, #24
 800e0e4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e0e6:	2302      	movs	r3, #2
 800e0e8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e0ea:	2300      	movs	r3, #0
 800e0ec:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800e0ee:	2300      	movs	r3, #0
 800e0f0:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800e0f2:	2305      	movs	r3, #5
 800e0f4:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800e0f6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800e0fa:	4619      	mov	r1, r3
 800e0fc:	4820      	ldr	r0, [pc, #128]	; (800e180 <HAL_SPI_MspInit+0x1c0>)
 800e0fe:	f002 fd77 	bl	8010bf0 <HAL_GPIO_Init>
}
 800e102:	e02d      	b.n	800e160 <HAL_SPI_MspInit+0x1a0>
  else if(hspi->Instance==SPI3)
 800e104:	687b      	ldr	r3, [r7, #4]
 800e106:	681b      	ldr	r3, [r3, #0]
 800e108:	4a1e      	ldr	r2, [pc, #120]	; (800e184 <HAL_SPI_MspInit+0x1c4>)
 800e10a:	4293      	cmp	r3, r2
 800e10c:	d128      	bne.n	800e160 <HAL_SPI_MspInit+0x1a0>
    __HAL_RCC_SPI3_CLK_ENABLE();
 800e10e:	4b17      	ldr	r3, [pc, #92]	; (800e16c <HAL_SPI_MspInit+0x1ac>)
 800e110:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e112:	4a16      	ldr	r2, [pc, #88]	; (800e16c <HAL_SPI_MspInit+0x1ac>)
 800e114:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800e118:	6593      	str	r3, [r2, #88]	; 0x58
 800e11a:	4b14      	ldr	r3, [pc, #80]	; (800e16c <HAL_SPI_MspInit+0x1ac>)
 800e11c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e11e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800e122:	613b      	str	r3, [r7, #16]
 800e124:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800e126:	4b11      	ldr	r3, [pc, #68]	; (800e16c <HAL_SPI_MspInit+0x1ac>)
 800e128:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e12a:	4a10      	ldr	r2, [pc, #64]	; (800e16c <HAL_SPI_MspInit+0x1ac>)
 800e12c:	f043 0304 	orr.w	r3, r3, #4
 800e130:	64d3      	str	r3, [r2, #76]	; 0x4c
 800e132:	4b0e      	ldr	r3, [pc, #56]	; (800e16c <HAL_SPI_MspInit+0x1ac>)
 800e134:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e136:	f003 0304 	and.w	r3, r3, #4
 800e13a:	60fb      	str	r3, [r7, #12]
 800e13c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 800e13e:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800e142:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e144:	2302      	movs	r3, #2
 800e146:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e148:	2300      	movs	r3, #0
 800e14a:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800e14c:	2300      	movs	r3, #0
 800e14e:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800e150:	2306      	movs	r3, #6
 800e152:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800e154:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800e158:	4619      	mov	r1, r3
 800e15a:	480b      	ldr	r0, [pc, #44]	; (800e188 <HAL_SPI_MspInit+0x1c8>)
 800e15c:	f002 fd48 	bl	8010bf0 <HAL_GPIO_Init>
}
 800e160:	bf00      	nop
 800e162:	3740      	adds	r7, #64	; 0x40
 800e164:	46bd      	mov	sp, r7
 800e166:	bd80      	pop	{r7, pc}
 800e168:	40013000 	.word	0x40013000
 800e16c:	40021000 	.word	0x40021000
 800e170:	42020000 	.word	0x42020000
 800e174:	42021000 	.word	0x42021000
 800e178:	40003800 	.word	0x40003800
 800e17c:	42020400 	.word	0x42020400
 800e180:	42020c00 	.word	0x42020c00
 800e184:	40003c00 	.word	0x40003c00
 800e188:	42020800 	.word	0x42020800

0800e18c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800e18c:	b580      	push	{r7, lr}
 800e18e:	b08c      	sub	sp, #48	; 0x30
 800e190:	af00      	add	r7, sp, #0
 800e192:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800e194:	f107 031c 	add.w	r3, r7, #28
 800e198:	2200      	movs	r2, #0
 800e19a:	601a      	str	r2, [r3, #0]
 800e19c:	605a      	str	r2, [r3, #4]
 800e19e:	609a      	str	r2, [r3, #8]
 800e1a0:	60da      	str	r2, [r3, #12]
 800e1a2:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 800e1a4:	687b      	ldr	r3, [r7, #4]
 800e1a6:	681b      	ldr	r3, [r3, #0]
 800e1a8:	4a40      	ldr	r2, [pc, #256]	; (800e2ac <HAL_TIM_Base_MspInit+0x120>)
 800e1aa:	4293      	cmp	r3, r2
 800e1ac:	d14e      	bne.n	800e24c <HAL_TIM_Base_MspInit+0xc0>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800e1ae:	4b40      	ldr	r3, [pc, #256]	; (800e2b0 <HAL_TIM_Base_MspInit+0x124>)
 800e1b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e1b2:	4a3f      	ldr	r2, [pc, #252]	; (800e2b0 <HAL_TIM_Base_MspInit+0x124>)
 800e1b4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800e1b8:	6613      	str	r3, [r2, #96]	; 0x60
 800e1ba:	4b3d      	ldr	r3, [pc, #244]	; (800e2b0 <HAL_TIM_Base_MspInit+0x124>)
 800e1bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e1be:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800e1c2:	61bb      	str	r3, [r7, #24]
 800e1c4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800e1c6:	4b3a      	ldr	r3, [pc, #232]	; (800e2b0 <HAL_TIM_Base_MspInit+0x124>)
 800e1c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e1ca:	4a39      	ldr	r2, [pc, #228]	; (800e2b0 <HAL_TIM_Base_MspInit+0x124>)
 800e1cc:	f043 0310 	orr.w	r3, r3, #16
 800e1d0:	64d3      	str	r3, [r2, #76]	; 0x4c
 800e1d2:	4b37      	ldr	r3, [pc, #220]	; (800e2b0 <HAL_TIM_Base_MspInit+0x124>)
 800e1d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e1d6:	f003 0310 	and.w	r3, r3, #16
 800e1da:	617b      	str	r3, [r7, #20]
 800e1dc:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800e1de:	4b34      	ldr	r3, [pc, #208]	; (800e2b0 <HAL_TIM_Base_MspInit+0x124>)
 800e1e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e1e2:	4a33      	ldr	r2, [pc, #204]	; (800e2b0 <HAL_TIM_Base_MspInit+0x124>)
 800e1e4:	f043 0301 	orr.w	r3, r3, #1
 800e1e8:	64d3      	str	r3, [r2, #76]	; 0x4c
 800e1ea:	4b31      	ldr	r3, [pc, #196]	; (800e2b0 <HAL_TIM_Base_MspInit+0x124>)
 800e1ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e1ee:	f003 0301 	and.w	r3, r3, #1
 800e1f2:	613b      	str	r3, [r7, #16]
 800e1f4:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PE14     ------> TIM1_CH4
    PA8     ------> TIM1_CH1
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = RC_PWM_STEERING_IN_Pin;
 800e1f6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800e1fa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e1fc:	2302      	movs	r3, #2
 800e1fe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e200:	2300      	movs	r3, #0
 800e202:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800e204:	2300      	movs	r3, #0
 800e206:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800e208:	2301      	movs	r3, #1
 800e20a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(RC_PWM_STEERING_IN_GPIO_Port, &GPIO_InitStruct);
 800e20c:	f107 031c 	add.w	r3, r7, #28
 800e210:	4619      	mov	r1, r3
 800e212:	4828      	ldr	r0, [pc, #160]	; (800e2b4 <HAL_TIM_Base_MspInit+0x128>)
 800e214:	f002 fcec 	bl	8010bf0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RC_PWM_STEERING_Pin|RC_PWM_THROTTLE_IN_Pin;
 800e218:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 800e21c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e21e:	2302      	movs	r3, #2
 800e220:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e222:	2300      	movs	r3, #0
 800e224:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800e226:	2300      	movs	r3, #0
 800e228:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800e22a:	2301      	movs	r3, #1
 800e22c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800e22e:	f107 031c 	add.w	r3, r7, #28
 800e232:	4619      	mov	r1, r3
 800e234:	4820      	ldr	r0, [pc, #128]	; (800e2b8 <HAL_TIM_Base_MspInit+0x12c>)
 800e236:	f002 fcdb 	bl	8010bf0 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 5, 0);
 800e23a:	2200      	movs	r2, #0
 800e23c:	2105      	movs	r1, #5
 800e23e:	202c      	movs	r0, #44	; 0x2c
 800e240:	f002 f900 	bl	8010444 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 800e244:	202c      	movs	r0, #44	; 0x2c
 800e246:	f002 f917 	bl	8010478 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 800e24a:	e02a      	b.n	800e2a2 <HAL_TIM_Base_MspInit+0x116>
  else if(htim_base->Instance==TIM5)
 800e24c:	687b      	ldr	r3, [r7, #4]
 800e24e:	681b      	ldr	r3, [r3, #0]
 800e250:	4a1a      	ldr	r2, [pc, #104]	; (800e2bc <HAL_TIM_Base_MspInit+0x130>)
 800e252:	4293      	cmp	r3, r2
 800e254:	d10c      	bne.n	800e270 <HAL_TIM_Base_MspInit+0xe4>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800e256:	4b16      	ldr	r3, [pc, #88]	; (800e2b0 <HAL_TIM_Base_MspInit+0x124>)
 800e258:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e25a:	4a15      	ldr	r2, [pc, #84]	; (800e2b0 <HAL_TIM_Base_MspInit+0x124>)
 800e25c:	f043 0308 	orr.w	r3, r3, #8
 800e260:	6593      	str	r3, [r2, #88]	; 0x58
 800e262:	4b13      	ldr	r3, [pc, #76]	; (800e2b0 <HAL_TIM_Base_MspInit+0x124>)
 800e264:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e266:	f003 0308 	and.w	r3, r3, #8
 800e26a:	60fb      	str	r3, [r7, #12]
 800e26c:	68fb      	ldr	r3, [r7, #12]
}
 800e26e:	e018      	b.n	800e2a2 <HAL_TIM_Base_MspInit+0x116>
  else if(htim_base->Instance==TIM6)
 800e270:	687b      	ldr	r3, [r7, #4]
 800e272:	681b      	ldr	r3, [r3, #0]
 800e274:	4a12      	ldr	r2, [pc, #72]	; (800e2c0 <HAL_TIM_Base_MspInit+0x134>)
 800e276:	4293      	cmp	r3, r2
 800e278:	d113      	bne.n	800e2a2 <HAL_TIM_Base_MspInit+0x116>
    __HAL_RCC_TIM6_CLK_ENABLE();
 800e27a:	4b0d      	ldr	r3, [pc, #52]	; (800e2b0 <HAL_TIM_Base_MspInit+0x124>)
 800e27c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e27e:	4a0c      	ldr	r2, [pc, #48]	; (800e2b0 <HAL_TIM_Base_MspInit+0x124>)
 800e280:	f043 0310 	orr.w	r3, r3, #16
 800e284:	6593      	str	r3, [r2, #88]	; 0x58
 800e286:	4b0a      	ldr	r3, [pc, #40]	; (800e2b0 <HAL_TIM_Base_MspInit+0x124>)
 800e288:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e28a:	f003 0310 	and.w	r3, r3, #16
 800e28e:	60bb      	str	r3, [r7, #8]
 800e290:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM6_IRQn, 5, 0);
 800e292:	2200      	movs	r2, #0
 800e294:	2105      	movs	r1, #5
 800e296:	2031      	movs	r0, #49	; 0x31
 800e298:	f002 f8d4 	bl	8010444 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_IRQn);
 800e29c:	2031      	movs	r0, #49	; 0x31
 800e29e:	f002 f8eb 	bl	8010478 <HAL_NVIC_EnableIRQ>
}
 800e2a2:	bf00      	nop
 800e2a4:	3730      	adds	r7, #48	; 0x30
 800e2a6:	46bd      	mov	sp, r7
 800e2a8:	bd80      	pop	{r7, pc}
 800e2aa:	bf00      	nop
 800e2ac:	40012c00 	.word	0x40012c00
 800e2b0:	40021000 	.word	0x40021000
 800e2b4:	42021000 	.word	0x42021000
 800e2b8:	42020000 	.word	0x42020000
 800e2bc:	40000c00 	.word	0x40000c00
 800e2c0:	40001000 	.word	0x40001000

0800e2c4 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 800e2c4:	b580      	push	{r7, lr}
 800e2c6:	b08a      	sub	sp, #40	; 0x28
 800e2c8:	af00      	add	r7, sp, #0
 800e2ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800e2cc:	f107 0314 	add.w	r3, r7, #20
 800e2d0:	2200      	movs	r2, #0
 800e2d2:	601a      	str	r2, [r3, #0]
 800e2d4:	605a      	str	r2, [r3, #4]
 800e2d6:	609a      	str	r2, [r3, #8]
 800e2d8:	60da      	str	r2, [r3, #12]
 800e2da:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 800e2dc:	687b      	ldr	r3, [r7, #4]
 800e2de:	681b      	ldr	r3, [r3, #0]
 800e2e0:	4a1b      	ldr	r2, [pc, #108]	; (800e350 <HAL_TIM_Encoder_MspInit+0x8c>)
 800e2e2:	4293      	cmp	r3, r2
 800e2e4:	d12f      	bne.n	800e346 <HAL_TIM_Encoder_MspInit+0x82>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800e2e6:	4b1b      	ldr	r3, [pc, #108]	; (800e354 <HAL_TIM_Encoder_MspInit+0x90>)
 800e2e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e2ea:	4a1a      	ldr	r2, [pc, #104]	; (800e354 <HAL_TIM_Encoder_MspInit+0x90>)
 800e2ec:	f043 0302 	orr.w	r3, r3, #2
 800e2f0:	6593      	str	r3, [r2, #88]	; 0x58
 800e2f2:	4b18      	ldr	r3, [pc, #96]	; (800e354 <HAL_TIM_Encoder_MspInit+0x90>)
 800e2f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e2f6:	f003 0302 	and.w	r3, r3, #2
 800e2fa:	613b      	str	r3, [r7, #16]
 800e2fc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800e2fe:	4b15      	ldr	r3, [pc, #84]	; (800e354 <HAL_TIM_Encoder_MspInit+0x90>)
 800e300:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e302:	4a14      	ldr	r2, [pc, #80]	; (800e354 <HAL_TIM_Encoder_MspInit+0x90>)
 800e304:	f043 0310 	orr.w	r3, r3, #16
 800e308:	64d3      	str	r3, [r2, #76]	; 0x4c
 800e30a:	4b12      	ldr	r3, [pc, #72]	; (800e354 <HAL_TIM_Encoder_MspInit+0x90>)
 800e30c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e30e:	f003 0310 	and.w	r3, r3, #16
 800e312:	60fb      	str	r3, [r7, #12]
 800e314:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PE3     ------> TIM3_CH1
    PE4     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = ENC_CH_A_Pin|ENC_CHB_Pin;
 800e316:	2318      	movs	r3, #24
 800e318:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e31a:	2302      	movs	r3, #2
 800e31c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e31e:	2300      	movs	r3, #0
 800e320:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800e322:	2300      	movs	r3, #0
 800e324:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800e326:	2302      	movs	r3, #2
 800e328:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800e32a:	f107 0314 	add.w	r3, r7, #20
 800e32e:	4619      	mov	r1, r3
 800e330:	4809      	ldr	r0, [pc, #36]	; (800e358 <HAL_TIM_Encoder_MspInit+0x94>)
 800e332:	f002 fc5d 	bl	8010bf0 <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 800e336:	2200      	movs	r2, #0
 800e338:	2105      	movs	r1, #5
 800e33a:	202e      	movs	r0, #46	; 0x2e
 800e33c:	f002 f882 	bl	8010444 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800e340:	202e      	movs	r0, #46	; 0x2e
 800e342:	f002 f899 	bl	8010478 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800e346:	bf00      	nop
 800e348:	3728      	adds	r7, #40	; 0x28
 800e34a:	46bd      	mov	sp, r7
 800e34c:	bd80      	pop	{r7, pc}
 800e34e:	bf00      	nop
 800e350:	40000400 	.word	0x40000400
 800e354:	40021000 	.word	0x40021000
 800e358:	42021000 	.word	0x42021000

0800e35c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 800e35c:	b480      	push	{r7}
 800e35e:	b085      	sub	sp, #20
 800e360:	af00      	add	r7, sp, #0
 800e362:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM8)
 800e364:	687b      	ldr	r3, [r7, #4]
 800e366:	681b      	ldr	r3, [r3, #0]
 800e368:	4a0a      	ldr	r2, [pc, #40]	; (800e394 <HAL_TIM_PWM_MspInit+0x38>)
 800e36a:	4293      	cmp	r3, r2
 800e36c:	d10b      	bne.n	800e386 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 800e36e:	4b0a      	ldr	r3, [pc, #40]	; (800e398 <HAL_TIM_PWM_MspInit+0x3c>)
 800e370:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e372:	4a09      	ldr	r2, [pc, #36]	; (800e398 <HAL_TIM_PWM_MspInit+0x3c>)
 800e374:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800e378:	6613      	str	r3, [r2, #96]	; 0x60
 800e37a:	4b07      	ldr	r3, [pc, #28]	; (800e398 <HAL_TIM_PWM_MspInit+0x3c>)
 800e37c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e37e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800e382:	60fb      	str	r3, [r7, #12]
 800e384:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 800e386:	bf00      	nop
 800e388:	3714      	adds	r7, #20
 800e38a:	46bd      	mov	sp, r7
 800e38c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e390:	4770      	bx	lr
 800e392:	bf00      	nop
 800e394:	40013400 	.word	0x40013400
 800e398:	40021000 	.word	0x40021000

0800e39c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800e39c:	b580      	push	{r7, lr}
 800e39e:	b08a      	sub	sp, #40	; 0x28
 800e3a0:	af00      	add	r7, sp, #0
 800e3a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800e3a4:	f107 0314 	add.w	r3, r7, #20
 800e3a8:	2200      	movs	r2, #0
 800e3aa:	601a      	str	r2, [r3, #0]
 800e3ac:	605a      	str	r2, [r3, #4]
 800e3ae:	609a      	str	r2, [r3, #8]
 800e3b0:	60da      	str	r2, [r3, #12]
 800e3b2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM5)
 800e3b4:	687b      	ldr	r3, [r7, #4]
 800e3b6:	681b      	ldr	r3, [r3, #0]
 800e3b8:	4a22      	ldr	r2, [pc, #136]	; (800e444 <HAL_TIM_MspPostInit+0xa8>)
 800e3ba:	4293      	cmp	r3, r2
 800e3bc:	d11d      	bne.n	800e3fa <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM5_MspPostInit 0 */

  /* USER CODE END TIM5_MspPostInit 0 */
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800e3be:	4b22      	ldr	r3, [pc, #136]	; (800e448 <HAL_TIM_MspPostInit+0xac>)
 800e3c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e3c2:	4a21      	ldr	r2, [pc, #132]	; (800e448 <HAL_TIM_MspPostInit+0xac>)
 800e3c4:	f043 0320 	orr.w	r3, r3, #32
 800e3c8:	64d3      	str	r3, [r2, #76]	; 0x4c
 800e3ca:	4b1f      	ldr	r3, [pc, #124]	; (800e448 <HAL_TIM_MspPostInit+0xac>)
 800e3cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e3ce:	f003 0320 	and.w	r3, r3, #32
 800e3d2:	613b      	str	r3, [r7, #16]
 800e3d4:	693b      	ldr	r3, [r7, #16]
    /**TIM5 GPIO Configuration
    PF6     ------> TIM5_CH1
    PF9     ------> TIM5_CH4
    */
    GPIO_InitStruct.Pin = MOTOR_PWM1_Pin|MOTOR_PWM2_Pin;
 800e3d6:	f44f 7310 	mov.w	r3, #576	; 0x240
 800e3da:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e3dc:	2302      	movs	r3, #2
 800e3de:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e3e0:	2300      	movs	r3, #0
 800e3e2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800e3e4:	2300      	movs	r3, #0
 800e3e6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 800e3e8:	2302      	movs	r3, #2
 800e3ea:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800e3ec:	f107 0314 	add.w	r3, r7, #20
 800e3f0:	4619      	mov	r1, r3
 800e3f2:	4816      	ldr	r0, [pc, #88]	; (800e44c <HAL_TIM_MspPostInit+0xb0>)
 800e3f4:	f002 fbfc 	bl	8010bf0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 800e3f8:	e020      	b.n	800e43c <HAL_TIM_MspPostInit+0xa0>
  else if(htim->Instance==TIM8)
 800e3fa:	687b      	ldr	r3, [r7, #4]
 800e3fc:	681b      	ldr	r3, [r3, #0]
 800e3fe:	4a14      	ldr	r2, [pc, #80]	; (800e450 <HAL_TIM_MspPostInit+0xb4>)
 800e400:	4293      	cmp	r3, r2
 800e402:	d11b      	bne.n	800e43c <HAL_TIM_MspPostInit+0xa0>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800e404:	4b10      	ldr	r3, [pc, #64]	; (800e448 <HAL_TIM_MspPostInit+0xac>)
 800e406:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e408:	4a0f      	ldr	r2, [pc, #60]	; (800e448 <HAL_TIM_MspPostInit+0xac>)
 800e40a:	f043 0304 	orr.w	r3, r3, #4
 800e40e:	64d3      	str	r3, [r2, #76]	; 0x4c
 800e410:	4b0d      	ldr	r3, [pc, #52]	; (800e448 <HAL_TIM_MspPostInit+0xac>)
 800e412:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e414:	f003 0304 	and.w	r3, r3, #4
 800e418:	60fb      	str	r3, [r7, #12]
 800e41a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800e41c:	2340      	movs	r3, #64	; 0x40
 800e41e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e420:	2302      	movs	r3, #2
 800e422:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e424:	2300      	movs	r3, #0
 800e426:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800e428:	2300      	movs	r3, #0
 800e42a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 800e42c:	2303      	movs	r3, #3
 800e42e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800e430:	f107 0314 	add.w	r3, r7, #20
 800e434:	4619      	mov	r1, r3
 800e436:	4807      	ldr	r0, [pc, #28]	; (800e454 <HAL_TIM_MspPostInit+0xb8>)
 800e438:	f002 fbda 	bl	8010bf0 <HAL_GPIO_Init>
}
 800e43c:	bf00      	nop
 800e43e:	3728      	adds	r7, #40	; 0x28
 800e440:	46bd      	mov	sp, r7
 800e442:	bd80      	pop	{r7, pc}
 800e444:	40000c00 	.word	0x40000c00
 800e448:	40021000 	.word	0x40021000
 800e44c:	42021400 	.word	0x42021400
 800e450:	40013400 	.word	0x40013400
 800e454:	42020800 	.word	0x42020800

0800e458 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 800e458:	b580      	push	{r7, lr}
 800e45a:	b0ae      	sub	sp, #184	; 0xb8
 800e45c:	af00      	add	r7, sp, #0
 800e45e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800e460:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800e464:	2200      	movs	r2, #0
 800e466:	601a      	str	r2, [r3, #0]
 800e468:	605a      	str	r2, [r3, #4]
 800e46a:	609a      	str	r2, [r3, #8]
 800e46c:	60da      	str	r2, [r3, #12]
 800e46e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800e470:	f107 0310 	add.w	r3, r7, #16
 800e474:	2294      	movs	r2, #148	; 0x94
 800e476:	2100      	movs	r1, #0
 800e478:	4618      	mov	r0, r3
 800e47a:	f00f fb1c 	bl	801dab6 <memset>
  if(hpcd->Instance==USB)
 800e47e:	687b      	ldr	r3, [r7, #4]
 800e480:	681b      	ldr	r3, [r3, #0]
 800e482:	4a22      	ldr	r2, [pc, #136]	; (800e50c <HAL_PCD_MspInit+0xb4>)
 800e484:	4293      	cmp	r3, r2
 800e486:	d13d      	bne.n	800e504 <HAL_PCD_MspInit+0xac>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800e488:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800e48c:	613b      	str	r3, [r7, #16]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 800e48e:	2300      	movs	r3, #0
 800e490:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800e494:	f107 0310 	add.w	r3, r7, #16
 800e498:	4618      	mov	r0, r3
 800e49a:	f004 fccd 	bl	8012e38 <HAL_RCCEx_PeriphCLKConfig>
 800e49e:	4603      	mov	r3, r0
 800e4a0:	2b00      	cmp	r3, #0
 800e4a2:	d001      	beq.n	800e4a8 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 800e4a4:	f7ff fb1d 	bl	800dae2 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800e4a8:	4b19      	ldr	r3, [pc, #100]	; (800e510 <HAL_PCD_MspInit+0xb8>)
 800e4aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e4ac:	4a18      	ldr	r2, [pc, #96]	; (800e510 <HAL_PCD_MspInit+0xb8>)
 800e4ae:	f043 0301 	orr.w	r3, r3, #1
 800e4b2:	64d3      	str	r3, [r2, #76]	; 0x4c
 800e4b4:	4b16      	ldr	r3, [pc, #88]	; (800e510 <HAL_PCD_MspInit+0xb8>)
 800e4b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e4b8:	f003 0301 	and.w	r3, r3, #1
 800e4bc:	60fb      	str	r3, [r7, #12]
 800e4be:	68fb      	ldr	r3, [r7, #12]
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800e4c0:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800e4c4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e4c8:	2302      	movs	r3, #2
 800e4ca:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e4ce:	2300      	movs	r3, #0
 800e4d0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800e4d4:	2300      	movs	r3, #0
 800e4d6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 800e4da:	230a      	movs	r3, #10
 800e4dc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800e4e0:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800e4e4:	4619      	mov	r1, r3
 800e4e6:	480b      	ldr	r0, [pc, #44]	; (800e514 <HAL_PCD_MspInit+0xbc>)
 800e4e8:	f002 fb82 	bl	8010bf0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800e4ec:	4b08      	ldr	r3, [pc, #32]	; (800e510 <HAL_PCD_MspInit+0xb8>)
 800e4ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e4f0:	4a07      	ldr	r2, [pc, #28]	; (800e510 <HAL_PCD_MspInit+0xb8>)
 800e4f2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800e4f6:	65d3      	str	r3, [r2, #92]	; 0x5c
 800e4f8:	4b05      	ldr	r3, [pc, #20]	; (800e510 <HAL_PCD_MspInit+0xb8>)
 800e4fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e4fc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800e500:	60bb      	str	r3, [r7, #8]
 800e502:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 800e504:	bf00      	nop
 800e506:	37b8      	adds	r7, #184	; 0xb8
 800e508:	46bd      	mov	sp, r7
 800e50a:	bd80      	pop	{r7, pc}
 800e50c:	4000d400 	.word	0x4000d400
 800e510:	40021000 	.word	0x40021000
 800e514:	42020000 	.word	0x42020000

0800e518 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800e518:	b580      	push	{r7, lr}
 800e51a:	b08c      	sub	sp, #48	; 0x30
 800e51c:	af00      	add	r7, sp, #0
 800e51e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800e520:	2300      	movs	r3, #0
 800e522:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 800e524:	2300      	movs	r3, #0
 800e526:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM2 IRQ priority */
  HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority ,0);
 800e528:	2200      	movs	r2, #0
 800e52a:	6879      	ldr	r1, [r7, #4]
 800e52c:	202d      	movs	r0, #45	; 0x2d
 800e52e:	f001 ff89 	bl	8010444 <HAL_NVIC_SetPriority>

  /* Enable the TIM2 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800e532:	202d      	movs	r0, #45	; 0x2d
 800e534:	f001 ffa0 	bl	8010478 <HAL_NVIC_EnableIRQ>

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 800e538:	4b1f      	ldr	r3, [pc, #124]	; (800e5b8 <HAL_InitTick+0xa0>)
 800e53a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e53c:	4a1e      	ldr	r2, [pc, #120]	; (800e5b8 <HAL_InitTick+0xa0>)
 800e53e:	f043 0301 	orr.w	r3, r3, #1
 800e542:	6593      	str	r3, [r2, #88]	; 0x58
 800e544:	4b1c      	ldr	r3, [pc, #112]	; (800e5b8 <HAL_InitTick+0xa0>)
 800e546:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e548:	f003 0301 	and.w	r3, r3, #1
 800e54c:	60fb      	str	r3, [r7, #12]
 800e54e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800e550:	f107 0210 	add.w	r2, r7, #16
 800e554:	f107 0314 	add.w	r3, r7, #20
 800e558:	4611      	mov	r1, r2
 800e55a:	4618      	mov	r0, r3
 800e55c:	f004 fb68 	bl	8012c30 <HAL_RCC_GetClockConfig>

  /* Compute TIM2 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 800e560:	f004 fb3e 	bl	8012be0 <HAL_RCC_GetPCLK1Freq>
 800e564:	62f8      	str	r0, [r7, #44]	; 0x2c

  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800e566:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e568:	4a14      	ldr	r2, [pc, #80]	; (800e5bc <HAL_InitTick+0xa4>)
 800e56a:	fba2 2303 	umull	r2, r3, r2, r3
 800e56e:	0c9b      	lsrs	r3, r3, #18
 800e570:	3b01      	subs	r3, #1
 800e572:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 800e574:	4b12      	ldr	r3, [pc, #72]	; (800e5c0 <HAL_InitTick+0xa8>)
 800e576:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800e57a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 800e57c:	4b10      	ldr	r3, [pc, #64]	; (800e5c0 <HAL_InitTick+0xa8>)
 800e57e:	f240 32e7 	movw	r2, #999	; 0x3e7
 800e582:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 800e584:	4a0e      	ldr	r2, [pc, #56]	; (800e5c0 <HAL_InitTick+0xa8>)
 800e586:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e588:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 800e58a:	4b0d      	ldr	r3, [pc, #52]	; (800e5c0 <HAL_InitTick+0xa8>)
 800e58c:	2200      	movs	r2, #0
 800e58e:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800e590:	4b0b      	ldr	r3, [pc, #44]	; (800e5c0 <HAL_InitTick+0xa8>)
 800e592:	2200      	movs	r2, #0
 800e594:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim2) == HAL_OK)
 800e596:	480a      	ldr	r0, [pc, #40]	; (800e5c0 <HAL_InitTick+0xa8>)
 800e598:	f006 f9ae 	bl	80148f8 <HAL_TIM_Base_Init>
 800e59c:	4603      	mov	r3, r0
 800e59e:	2b00      	cmp	r3, #0
 800e5a0:	d104      	bne.n	800e5ac <HAL_InitTick+0x94>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim2);
 800e5a2:	4807      	ldr	r0, [pc, #28]	; (800e5c0 <HAL_InitTick+0xa8>)
 800e5a4:	f006 fa68 	bl	8014a78 <HAL_TIM_Base_Start_IT>
 800e5a8:	4603      	mov	r3, r0
 800e5aa:	e000      	b.n	800e5ae <HAL_InitTick+0x96>
  }

  /* Return function status */
  return HAL_ERROR;
 800e5ac:	2301      	movs	r3, #1
}
 800e5ae:	4618      	mov	r0, r3
 800e5b0:	3730      	adds	r7, #48	; 0x30
 800e5b2:	46bd      	mov	sp, r7
 800e5b4:	bd80      	pop	{r7, pc}
 800e5b6:	bf00      	nop
 800e5b8:	40021000 	.word	0x40021000
 800e5bc:	431bde83 	.word	0x431bde83
 800e5c0:	20000b8c 	.word	0x20000b8c

0800e5c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800e5c4:	b480      	push	{r7}
 800e5c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800e5c8:	e7fe      	b.n	800e5c8 <NMI_Handler+0x4>

0800e5ca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800e5ca:	b480      	push	{r7}
 800e5cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800e5ce:	e7fe      	b.n	800e5ce <HardFault_Handler+0x4>

0800e5d0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800e5d0:	b480      	push	{r7}
 800e5d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800e5d4:	e7fe      	b.n	800e5d4 <MemManage_Handler+0x4>

0800e5d6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800e5d6:	b480      	push	{r7}
 800e5d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800e5da:	e7fe      	b.n	800e5da <BusFault_Handler+0x4>

0800e5dc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800e5dc:	b480      	push	{r7}
 800e5de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800e5e0:	e7fe      	b.n	800e5e0 <UsageFault_Handler+0x4>

0800e5e2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800e5e2:	b480      	push	{r7}
 800e5e4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800e5e6:	bf00      	nop
 800e5e8:	46bd      	mov	sp, r7
 800e5ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5ee:	4770      	bx	lr

0800e5f0 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 800e5f0:	b580      	push	{r7, lr}
 800e5f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800e5f4:	4802      	ldr	r0, [pc, #8]	; (800e600 <DMA1_Channel1_IRQHandler+0x10>)
 800e5f6:	f002 f92b 	bl	8010850 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800e5fa:	bf00      	nop
 800e5fc:	bd80      	pop	{r7, pc}
 800e5fe:	bf00      	nop
 800e600:	2000034c 	.word	0x2000034c

0800e604 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 800e604:	b580      	push	{r7, lr}
 800e606:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 800e608:	4802      	ldr	r0, [pc, #8]	; (800e614 <ADC1_2_IRQHandler+0x10>)
 800e60a:	f000 fe2b 	bl	800f264 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 800e60e:	bf00      	nop
 800e610:	bd80      	pop	{r7, pc}
 800e612:	bf00      	nop
 800e614:	200002e4 	.word	0x200002e4

0800e618 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 800e618:	b580      	push	{r7, lr}
 800e61a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800e61c:	4802      	ldr	r0, [pc, #8]	; (800e628 <TIM1_CC_IRQHandler+0x10>)
 800e61e:	f006 fed9 	bl	80153d4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 800e622:	bf00      	nop
 800e624:	bd80      	pop	{r7, pc}
 800e626:	bf00      	nop
 800e628:	20000718 	.word	0x20000718

0800e62c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800e62c:	b580      	push	{r7, lr}
 800e62e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800e630:	4802      	ldr	r0, [pc, #8]	; (800e63c <TIM2_IRQHandler+0x10>)
 800e632:	f006 fecf 	bl	80153d4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800e636:	bf00      	nop
 800e638:	bd80      	pop	{r7, pc}
 800e63a:	bf00      	nop
 800e63c:	20000b8c 	.word	0x20000b8c

0800e640 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800e640:	b580      	push	{r7, lr}
 800e642:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800e644:	4802      	ldr	r0, [pc, #8]	; (800e650 <TIM3_IRQHandler+0x10>)
 800e646:	f006 fec5 	bl	80153d4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800e64a:	bf00      	nop
 800e64c:	bd80      	pop	{r7, pc}
 800e64e:	bf00      	nop
 800e650:	20000764 	.word	0x20000764

0800e654 <TIM6_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt.
  */
void TIM6_IRQHandler(void)
{
 800e654:	b580      	push	{r7, lr}
 800e656:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_IRQn 0 */

  /* USER CODE END TIM6_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800e658:	4802      	ldr	r0, [pc, #8]	; (800e664 <TIM6_IRQHandler+0x10>)
 800e65a:	f006 febb 	bl	80153d4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_IRQn 1 */

  /* USER CODE END TIM6_IRQn 1 */
}
 800e65e:	bf00      	nop
 800e660:	bd80      	pop	{r7, pc}
 800e662:	bf00      	nop
 800e664:	200007fc 	.word	0x200007fc

0800e668 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt / UART4 wake-up interrupt through EXTI line 29.
  */
void UART4_IRQHandler(void)
{
 800e668:	b580      	push	{r7, lr}
 800e66a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 800e66c:	4802      	ldr	r0, [pc, #8]	; (800e678 <UART4_IRQHandler+0x10>)
 800e66e:	f008 f9e5 	bl	8016a3c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 800e672:	bf00      	nop
 800e674:	bd80      	pop	{r7, pc}
 800e676:	bf00      	nop
 800e678:	2000049c 	.word	0x2000049c

0800e67c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800e67c:	b480      	push	{r7}
 800e67e:	af00      	add	r7, sp, #0
  return 1;
 800e680:	2301      	movs	r3, #1
}
 800e682:	4618      	mov	r0, r3
 800e684:	46bd      	mov	sp, r7
 800e686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e68a:	4770      	bx	lr

0800e68c <_kill>:

int _kill(int pid, int sig)
{
 800e68c:	b580      	push	{r7, lr}
 800e68e:	b082      	sub	sp, #8
 800e690:	af00      	add	r7, sp, #0
 800e692:	6078      	str	r0, [r7, #4]
 800e694:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800e696:	f00f fab1 	bl	801dbfc <__errno>
 800e69a:	4603      	mov	r3, r0
 800e69c:	2216      	movs	r2, #22
 800e69e:	601a      	str	r2, [r3, #0]
  return -1;
 800e6a0:	f04f 33ff 	mov.w	r3, #4294967295
}
 800e6a4:	4618      	mov	r0, r3
 800e6a6:	3708      	adds	r7, #8
 800e6a8:	46bd      	mov	sp, r7
 800e6aa:	bd80      	pop	{r7, pc}

0800e6ac <_exit>:

void _exit (int status)
{
 800e6ac:	b580      	push	{r7, lr}
 800e6ae:	b082      	sub	sp, #8
 800e6b0:	af00      	add	r7, sp, #0
 800e6b2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800e6b4:	f04f 31ff 	mov.w	r1, #4294967295
 800e6b8:	6878      	ldr	r0, [r7, #4]
 800e6ba:	f7ff ffe7 	bl	800e68c <_kill>
  while (1) {}    /* Make sure we hang here */
 800e6be:	e7fe      	b.n	800e6be <_exit+0x12>

0800e6c0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800e6c0:	b580      	push	{r7, lr}
 800e6c2:	b086      	sub	sp, #24
 800e6c4:	af00      	add	r7, sp, #0
 800e6c6:	60f8      	str	r0, [r7, #12]
 800e6c8:	60b9      	str	r1, [r7, #8]
 800e6ca:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800e6cc:	2300      	movs	r3, #0
 800e6ce:	617b      	str	r3, [r7, #20]
 800e6d0:	e00a      	b.n	800e6e8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800e6d2:	f3af 8000 	nop.w
 800e6d6:	4601      	mov	r1, r0
 800e6d8:	68bb      	ldr	r3, [r7, #8]
 800e6da:	1c5a      	adds	r2, r3, #1
 800e6dc:	60ba      	str	r2, [r7, #8]
 800e6de:	b2ca      	uxtb	r2, r1
 800e6e0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800e6e2:	697b      	ldr	r3, [r7, #20]
 800e6e4:	3301      	adds	r3, #1
 800e6e6:	617b      	str	r3, [r7, #20]
 800e6e8:	697a      	ldr	r2, [r7, #20]
 800e6ea:	687b      	ldr	r3, [r7, #4]
 800e6ec:	429a      	cmp	r2, r3
 800e6ee:	dbf0      	blt.n	800e6d2 <_read+0x12>
  }

  return len;
 800e6f0:	687b      	ldr	r3, [r7, #4]
}
 800e6f2:	4618      	mov	r0, r3
 800e6f4:	3718      	adds	r7, #24
 800e6f6:	46bd      	mov	sp, r7
 800e6f8:	bd80      	pop	{r7, pc}

0800e6fa <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800e6fa:	b580      	push	{r7, lr}
 800e6fc:	b086      	sub	sp, #24
 800e6fe:	af00      	add	r7, sp, #0
 800e700:	60f8      	str	r0, [r7, #12]
 800e702:	60b9      	str	r1, [r7, #8]
 800e704:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800e706:	2300      	movs	r3, #0
 800e708:	617b      	str	r3, [r7, #20]
 800e70a:	e009      	b.n	800e720 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800e70c:	68bb      	ldr	r3, [r7, #8]
 800e70e:	1c5a      	adds	r2, r3, #1
 800e710:	60ba      	str	r2, [r7, #8]
 800e712:	781b      	ldrb	r3, [r3, #0]
 800e714:	4618      	mov	r0, r3
 800e716:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800e71a:	697b      	ldr	r3, [r7, #20]
 800e71c:	3301      	adds	r3, #1
 800e71e:	617b      	str	r3, [r7, #20]
 800e720:	697a      	ldr	r2, [r7, #20]
 800e722:	687b      	ldr	r3, [r7, #4]
 800e724:	429a      	cmp	r2, r3
 800e726:	dbf1      	blt.n	800e70c <_write+0x12>
  }
  return len;
 800e728:	687b      	ldr	r3, [r7, #4]
}
 800e72a:	4618      	mov	r0, r3
 800e72c:	3718      	adds	r7, #24
 800e72e:	46bd      	mov	sp, r7
 800e730:	bd80      	pop	{r7, pc}

0800e732 <_close>:

int _close(int file)
{
 800e732:	b480      	push	{r7}
 800e734:	b083      	sub	sp, #12
 800e736:	af00      	add	r7, sp, #0
 800e738:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800e73a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800e73e:	4618      	mov	r0, r3
 800e740:	370c      	adds	r7, #12
 800e742:	46bd      	mov	sp, r7
 800e744:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e748:	4770      	bx	lr

0800e74a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800e74a:	b480      	push	{r7}
 800e74c:	b083      	sub	sp, #12
 800e74e:	af00      	add	r7, sp, #0
 800e750:	6078      	str	r0, [r7, #4]
 800e752:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800e754:	683b      	ldr	r3, [r7, #0]
 800e756:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800e75a:	605a      	str	r2, [r3, #4]
  return 0;
 800e75c:	2300      	movs	r3, #0
}
 800e75e:	4618      	mov	r0, r3
 800e760:	370c      	adds	r7, #12
 800e762:	46bd      	mov	sp, r7
 800e764:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e768:	4770      	bx	lr

0800e76a <_isatty>:

int _isatty(int file)
{
 800e76a:	b480      	push	{r7}
 800e76c:	b083      	sub	sp, #12
 800e76e:	af00      	add	r7, sp, #0
 800e770:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800e772:	2301      	movs	r3, #1
}
 800e774:	4618      	mov	r0, r3
 800e776:	370c      	adds	r7, #12
 800e778:	46bd      	mov	sp, r7
 800e77a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e77e:	4770      	bx	lr

0800e780 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800e780:	b480      	push	{r7}
 800e782:	b085      	sub	sp, #20
 800e784:	af00      	add	r7, sp, #0
 800e786:	60f8      	str	r0, [r7, #12]
 800e788:	60b9      	str	r1, [r7, #8]
 800e78a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800e78c:	2300      	movs	r3, #0
}
 800e78e:	4618      	mov	r0, r3
 800e790:	3714      	adds	r7, #20
 800e792:	46bd      	mov	sp, r7
 800e794:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e798:	4770      	bx	lr
	...

0800e79c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800e79c:	b580      	push	{r7, lr}
 800e79e:	b086      	sub	sp, #24
 800e7a0:	af00      	add	r7, sp, #0
 800e7a2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800e7a4:	4a14      	ldr	r2, [pc, #80]	; (800e7f8 <_sbrk+0x5c>)
 800e7a6:	4b15      	ldr	r3, [pc, #84]	; (800e7fc <_sbrk+0x60>)
 800e7a8:	1ad3      	subs	r3, r2, r3
 800e7aa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800e7ac:	697b      	ldr	r3, [r7, #20]
 800e7ae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800e7b0:	4b13      	ldr	r3, [pc, #76]	; (800e800 <_sbrk+0x64>)
 800e7b2:	681b      	ldr	r3, [r3, #0]
 800e7b4:	2b00      	cmp	r3, #0
 800e7b6:	d102      	bne.n	800e7be <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800e7b8:	4b11      	ldr	r3, [pc, #68]	; (800e800 <_sbrk+0x64>)
 800e7ba:	4a12      	ldr	r2, [pc, #72]	; (800e804 <_sbrk+0x68>)
 800e7bc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800e7be:	4b10      	ldr	r3, [pc, #64]	; (800e800 <_sbrk+0x64>)
 800e7c0:	681a      	ldr	r2, [r3, #0]
 800e7c2:	687b      	ldr	r3, [r7, #4]
 800e7c4:	4413      	add	r3, r2
 800e7c6:	693a      	ldr	r2, [r7, #16]
 800e7c8:	429a      	cmp	r2, r3
 800e7ca:	d207      	bcs.n	800e7dc <_sbrk+0x40>
  {
    errno = ENOMEM;
 800e7cc:	f00f fa16 	bl	801dbfc <__errno>
 800e7d0:	4603      	mov	r3, r0
 800e7d2:	220c      	movs	r2, #12
 800e7d4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800e7d6:	f04f 33ff 	mov.w	r3, #4294967295
 800e7da:	e009      	b.n	800e7f0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800e7dc:	4b08      	ldr	r3, [pc, #32]	; (800e800 <_sbrk+0x64>)
 800e7de:	681b      	ldr	r3, [r3, #0]
 800e7e0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800e7e2:	4b07      	ldr	r3, [pc, #28]	; (800e800 <_sbrk+0x64>)
 800e7e4:	681a      	ldr	r2, [r3, #0]
 800e7e6:	687b      	ldr	r3, [r7, #4]
 800e7e8:	4413      	add	r3, r2
 800e7ea:	4a05      	ldr	r2, [pc, #20]	; (800e800 <_sbrk+0x64>)
 800e7ec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800e7ee:	68fb      	ldr	r3, [r7, #12]
}
 800e7f0:	4618      	mov	r0, r3
 800e7f2:	3718      	adds	r7, #24
 800e7f4:	46bd      	mov	sp, r7
 800e7f6:	bd80      	pop	{r7, pc}
 800e7f8:	20030000 	.word	0x20030000
 800e7fc:	00000400 	.word	0x00000400
 800e800:	20000bd8 	.word	0x20000bd8
 800e804:	20003a78 	.word	0x20003a78

0800e808 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800e808:	b480      	push	{r7}
 800e80a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800e80c:	4b06      	ldr	r3, [pc, #24]	; (800e828 <SystemInit+0x20>)
 800e80e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e812:	4a05      	ldr	r2, [pc, #20]	; (800e828 <SystemInit+0x20>)
 800e814:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800e818:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 800e81c:	bf00      	nop
 800e81e:	46bd      	mov	sp, r7
 800e820:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e824:	4770      	bx	lr
 800e826:	bf00      	nop
 800e828:	e000ed00 	.word	0xe000ed00

0800e82c <SystemCoreClockUpdate>:
  *           value for HSE crystal.
  *
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 800e82c:	b480      	push	{r7}
 800e82e:	b087      	sub	sp, #28
 800e830:	af00      	add	r7, sp, #0
  uint32_t tmp, msirange, pllvco, pllsource, pllm, pllr;

  /* Get MSI Range frequency--------------------------------------------------*/
  if((RCC->CR & RCC_CR_MSIRGSEL) == 0U)
 800e832:	4b4f      	ldr	r3, [pc, #316]	; (800e970 <SystemCoreClockUpdate+0x144>)
 800e834:	681b      	ldr	r3, [r3, #0]
 800e836:	f003 0308 	and.w	r3, r3, #8
 800e83a:	2b00      	cmp	r3, #0
 800e83c:	d107      	bne.n	800e84e <SystemCoreClockUpdate+0x22>
  { /* MSISRANGE from RCC_CSR applies */
    msirange = (RCC->CSR & RCC_CSR_MSISRANGE) >> 8U;
 800e83e:	4b4c      	ldr	r3, [pc, #304]	; (800e970 <SystemCoreClockUpdate+0x144>)
 800e840:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800e844:	0a1b      	lsrs	r3, r3, #8
 800e846:	f003 030f 	and.w	r3, r3, #15
 800e84a:	617b      	str	r3, [r7, #20]
 800e84c:	e005      	b.n	800e85a <SystemCoreClockUpdate+0x2e>
  }
  else
  { /* MSIRANGE from RCC_CR applies */
    msirange = (RCC->CR & RCC_CR_MSIRANGE) >> 4U;
 800e84e:	4b48      	ldr	r3, [pc, #288]	; (800e970 <SystemCoreClockUpdate+0x144>)
 800e850:	681b      	ldr	r3, [r3, #0]
 800e852:	091b      	lsrs	r3, r3, #4
 800e854:	f003 030f 	and.w	r3, r3, #15
 800e858:	617b      	str	r3, [r7, #20]
  }
  /*MSI frequency range in HZ*/
  msirange = MSIRangeTable[msirange];
 800e85a:	4a46      	ldr	r2, [pc, #280]	; (800e974 <SystemCoreClockUpdate+0x148>)
 800e85c:	697b      	ldr	r3, [r7, #20]
 800e85e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e862:	617b      	str	r3, [r7, #20]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800e864:	4b42      	ldr	r3, [pc, #264]	; (800e970 <SystemCoreClockUpdate+0x144>)
 800e866:	689b      	ldr	r3, [r3, #8]
 800e868:	f003 030c 	and.w	r3, r3, #12
 800e86c:	2b0c      	cmp	r3, #12
 800e86e:	d866      	bhi.n	800e93e <SystemCoreClockUpdate+0x112>
 800e870:	a201      	add	r2, pc, #4	; (adr r2, 800e878 <SystemCoreClockUpdate+0x4c>)
 800e872:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e876:	bf00      	nop
 800e878:	0800e8ad 	.word	0x0800e8ad
 800e87c:	0800e93f 	.word	0x0800e93f
 800e880:	0800e93f 	.word	0x0800e93f
 800e884:	0800e93f 	.word	0x0800e93f
 800e888:	0800e8b5 	.word	0x0800e8b5
 800e88c:	0800e93f 	.word	0x0800e93f
 800e890:	0800e93f 	.word	0x0800e93f
 800e894:	0800e93f 	.word	0x0800e93f
 800e898:	0800e8bd 	.word	0x0800e8bd
 800e89c:	0800e93f 	.word	0x0800e93f
 800e8a0:	0800e93f 	.word	0x0800e93f
 800e8a4:	0800e93f 	.word	0x0800e93f
 800e8a8:	0800e8c5 	.word	0x0800e8c5
  {
    case 0x00:  /* MSI used as system clock source */
      SystemCoreClock = msirange;
 800e8ac:	4a32      	ldr	r2, [pc, #200]	; (800e978 <SystemCoreClockUpdate+0x14c>)
 800e8ae:	697b      	ldr	r3, [r7, #20]
 800e8b0:	6013      	str	r3, [r2, #0]
      break;
 800e8b2:	e048      	b.n	800e946 <SystemCoreClockUpdate+0x11a>

    case 0x04:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 800e8b4:	4b30      	ldr	r3, [pc, #192]	; (800e978 <SystemCoreClockUpdate+0x14c>)
 800e8b6:	4a31      	ldr	r2, [pc, #196]	; (800e97c <SystemCoreClockUpdate+0x150>)
 800e8b8:	601a      	str	r2, [r3, #0]
      break;
 800e8ba:	e044      	b.n	800e946 <SystemCoreClockUpdate+0x11a>

    case 0x08:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 800e8bc:	4b2e      	ldr	r3, [pc, #184]	; (800e978 <SystemCoreClockUpdate+0x14c>)
 800e8be:	4a30      	ldr	r2, [pc, #192]	; (800e980 <SystemCoreClockUpdate+0x154>)
 800e8c0:	601a      	str	r2, [r3, #0]
      break;
 800e8c2:	e040      	b.n	800e946 <SystemCoreClockUpdate+0x11a>

    case 0x0C:  /* PLL used as system clock  source */
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLR
         */
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 800e8c4:	4b2a      	ldr	r3, [pc, #168]	; (800e970 <SystemCoreClockUpdate+0x144>)
 800e8c6:	68db      	ldr	r3, [r3, #12]
 800e8c8:	f003 0303 	and.w	r3, r3, #3
 800e8cc:	60fb      	str	r3, [r7, #12]
      pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> 4U) + 1U ;
 800e8ce:	4b28      	ldr	r3, [pc, #160]	; (800e970 <SystemCoreClockUpdate+0x144>)
 800e8d0:	68db      	ldr	r3, [r3, #12]
 800e8d2:	091b      	lsrs	r3, r3, #4
 800e8d4:	f003 030f 	and.w	r3, r3, #15
 800e8d8:	3301      	adds	r3, #1
 800e8da:	60bb      	str	r3, [r7, #8]
 800e8dc:	68fb      	ldr	r3, [r7, #12]
 800e8de:	2b02      	cmp	r3, #2
 800e8e0:	d003      	beq.n	800e8ea <SystemCoreClockUpdate+0xbe>
 800e8e2:	68fb      	ldr	r3, [r7, #12]
 800e8e4:	2b03      	cmp	r3, #3
 800e8e6:	d006      	beq.n	800e8f6 <SystemCoreClockUpdate+0xca>
 800e8e8:	e00b      	b.n	800e902 <SystemCoreClockUpdate+0xd6>

      switch (pllsource)
      {
        case 0x02:  /* HSI used as PLL clock source */
          pllvco = (HSI_VALUE / pllm);
 800e8ea:	4a24      	ldr	r2, [pc, #144]	; (800e97c <SystemCoreClockUpdate+0x150>)
 800e8ec:	68bb      	ldr	r3, [r7, #8]
 800e8ee:	fbb2 f3f3 	udiv	r3, r2, r3
 800e8f2:	613b      	str	r3, [r7, #16]
          break;
 800e8f4:	e00b      	b.n	800e90e <SystemCoreClockUpdate+0xe2>

        case 0x03:  /* HSE used as PLL clock source */
          pllvco = (HSE_VALUE / pllm);
 800e8f6:	4a22      	ldr	r2, [pc, #136]	; (800e980 <SystemCoreClockUpdate+0x154>)
 800e8f8:	68bb      	ldr	r3, [r7, #8]
 800e8fa:	fbb2 f3f3 	udiv	r3, r2, r3
 800e8fe:	613b      	str	r3, [r7, #16]
          break;
 800e900:	e005      	b.n	800e90e <SystemCoreClockUpdate+0xe2>

        default:    /* MSI used as PLL clock source */
          pllvco = (msirange / pllm);
 800e902:	697a      	ldr	r2, [r7, #20]
 800e904:	68bb      	ldr	r3, [r7, #8]
 800e906:	fbb2 f3f3 	udiv	r3, r2, r3
 800e90a:	613b      	str	r3, [r7, #16]
          break;
 800e90c:	bf00      	nop
      }
      pllvco = pllvco * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 8U);
 800e90e:	4b18      	ldr	r3, [pc, #96]	; (800e970 <SystemCoreClockUpdate+0x144>)
 800e910:	68db      	ldr	r3, [r3, #12]
 800e912:	0a1b      	lsrs	r3, r3, #8
 800e914:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800e918:	693b      	ldr	r3, [r7, #16]
 800e91a:	fb02 f303 	mul.w	r3, r2, r3
 800e91e:	613b      	str	r3, [r7, #16]
      pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 25U) + 1U) * 2U;
 800e920:	4b13      	ldr	r3, [pc, #76]	; (800e970 <SystemCoreClockUpdate+0x144>)
 800e922:	68db      	ldr	r3, [r3, #12]
 800e924:	0e5b      	lsrs	r3, r3, #25
 800e926:	f003 0303 	and.w	r3, r3, #3
 800e92a:	3301      	adds	r3, #1
 800e92c:	005b      	lsls	r3, r3, #1
 800e92e:	607b      	str	r3, [r7, #4]
      SystemCoreClock = pllvco/pllr;
 800e930:	693a      	ldr	r2, [r7, #16]
 800e932:	687b      	ldr	r3, [r7, #4]
 800e934:	fbb2 f3f3 	udiv	r3, r2, r3
 800e938:	4a0f      	ldr	r2, [pc, #60]	; (800e978 <SystemCoreClockUpdate+0x14c>)
 800e93a:	6013      	str	r3, [r2, #0]
      break;
 800e93c:	e003      	b.n	800e946 <SystemCoreClockUpdate+0x11a>

    default:
      SystemCoreClock = msirange;
 800e93e:	4a0e      	ldr	r2, [pc, #56]	; (800e978 <SystemCoreClockUpdate+0x14c>)
 800e940:	697b      	ldr	r3, [r7, #20]
 800e942:	6013      	str	r3, [r2, #0]
      break;
 800e944:	bf00      	nop
  }
  /* Compute HCLK clock frequency --------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4U)];
 800e946:	4b0a      	ldr	r3, [pc, #40]	; (800e970 <SystemCoreClockUpdate+0x144>)
 800e948:	689b      	ldr	r3, [r3, #8]
 800e94a:	091b      	lsrs	r3, r3, #4
 800e94c:	f003 030f 	and.w	r3, r3, #15
 800e950:	4a0c      	ldr	r2, [pc, #48]	; (800e984 <SystemCoreClockUpdate+0x158>)
 800e952:	5cd3      	ldrb	r3, [r2, r3]
 800e954:	603b      	str	r3, [r7, #0]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;
 800e956:	4b08      	ldr	r3, [pc, #32]	; (800e978 <SystemCoreClockUpdate+0x14c>)
 800e958:	681a      	ldr	r2, [r3, #0]
 800e95a:	683b      	ldr	r3, [r7, #0]
 800e95c:	fa22 f303 	lsr.w	r3, r2, r3
 800e960:	4a05      	ldr	r2, [pc, #20]	; (800e978 <SystemCoreClockUpdate+0x14c>)
 800e962:	6013      	str	r3, [r2, #0]
}
 800e964:	bf00      	nop
 800e966:	371c      	adds	r7, #28
 800e968:	46bd      	mov	sp, r7
 800e96a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e96e:	4770      	bx	lr
 800e970:	40021000 	.word	0x40021000
 800e974:	0801f25c 	.word	0x0801f25c
 800e978:	20000090 	.word	0x20000090
 800e97c:	00f42400 	.word	0x00f42400
 800e980:	007a1200 	.word	0x007a1200
 800e984:	0801f244 	.word	0x0801f244

0800e988 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 800e988:	f8df d034 	ldr.w	sp, [pc, #52]	; 800e9c0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
  bl  SystemInit
 800e98c:	f7ff ff3c 	bl	800e808 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 800e990:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800e992:	e003      	b.n	800e99c <LoopCopyDataInit>

0800e994 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 800e994:	4b0b      	ldr	r3, [pc, #44]	; (800e9c4 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800e996:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 800e998:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800e99a:	3104      	adds	r1, #4

0800e99c <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 800e99c:	480a      	ldr	r0, [pc, #40]	; (800e9c8 <LoopForever+0xa>)
	ldr	r3, =_edata
 800e99e:	4b0b      	ldr	r3, [pc, #44]	; (800e9cc <LoopForever+0xe>)
	adds	r2, r0, r1
 800e9a0:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800e9a2:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 800e9a4:	d3f6      	bcc.n	800e994 <CopyDataInit>
	ldr	r2, =_sbss
 800e9a6:	4a0a      	ldr	r2, [pc, #40]	; (800e9d0 <LoopForever+0x12>)
	b	LoopFillZerobss
 800e9a8:	e002      	b.n	800e9b0 <LoopFillZerobss>

0800e9aa <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800e9aa:	2300      	movs	r3, #0
	str	r3, [r2], #4
 800e9ac:	f842 3b04 	str.w	r3, [r2], #4

0800e9b0 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 800e9b0:	4b08      	ldr	r3, [pc, #32]	; (800e9d4 <LoopForever+0x16>)
	cmp	r2, r3
 800e9b2:	429a      	cmp	r2, r3
	bcc	FillZerobss
 800e9b4:	d3f9      	bcc.n	800e9aa <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800e9b6:	f00f f927 	bl	801dc08 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800e9ba:	f7fd ff81 	bl	800c8c0 <main>

0800e9be <LoopForever>:

LoopForever:
    b LoopForever
 800e9be:	e7fe      	b.n	800e9be <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 800e9c0:	20030000 	.word	0x20030000
	ldr	r3, =_sidata
 800e9c4:	0801f91c 	.word	0x0801f91c
	ldr	r0, =_sdata
 800e9c8:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 800e9cc:	2000010c 	.word	0x2000010c
	ldr	r2, =_sbss
 800e9d0:	2000010c 	.word	0x2000010c
	ldr	r3, = _ebss
 800e9d4:	20003a78 	.word	0x20003a78

0800e9d8 <COMP_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800e9d8:	e7fe      	b.n	800e9d8 <COMP_IRQHandler>

0800e9da <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800e9da:	b580      	push	{r7, lr}
 800e9dc:	b082      	sub	sp, #8
 800e9de:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800e9e0:	2300      	movs	r3, #0
 800e9e2:	71fb      	strb	r3, [r7, #7]

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 800e9e4:	2004      	movs	r0, #4
 800e9e6:	f001 fd22 	bl	801042e <HAL_NVIC_SetPriorityGrouping>

  /* Insure time base clock coherency */
  SystemCoreClockUpdate();
 800e9ea:	f7ff ff1f 	bl	800e82c <SystemCoreClockUpdate>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800e9ee:	2007      	movs	r0, #7
 800e9f0:	f7ff fd92 	bl	800e518 <HAL_InitTick>
 800e9f4:	4603      	mov	r3, r0
 800e9f6:	2b00      	cmp	r3, #0
 800e9f8:	d002      	beq.n	800ea00 <HAL_Init+0x26>
  {
    status = HAL_ERROR;
 800e9fa:	2301      	movs	r3, #1
 800e9fc:	71fb      	strb	r3, [r7, #7]
 800e9fe:	e001      	b.n	800ea04 <HAL_Init+0x2a>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800ea00:	f7ff f874 	bl	800daec <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800ea04:	79fb      	ldrb	r3, [r7, #7]
}
 800ea06:	4618      	mov	r0, r3
 800ea08:	3708      	adds	r7, #8
 800ea0a:	46bd      	mov	sp, r7
 800ea0c:	bd80      	pop	{r7, pc}
	...

0800ea10 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800ea10:	b480      	push	{r7}
 800ea12:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800ea14:	4b06      	ldr	r3, [pc, #24]	; (800ea30 <HAL_IncTick+0x20>)
 800ea16:	781b      	ldrb	r3, [r3, #0]
 800ea18:	461a      	mov	r2, r3
 800ea1a:	4b06      	ldr	r3, [pc, #24]	; (800ea34 <HAL_IncTick+0x24>)
 800ea1c:	681b      	ldr	r3, [r3, #0]
 800ea1e:	4413      	add	r3, r2
 800ea20:	4a04      	ldr	r2, [pc, #16]	; (800ea34 <HAL_IncTick+0x24>)
 800ea22:	6013      	str	r3, [r2, #0]
}
 800ea24:	bf00      	nop
 800ea26:	46bd      	mov	sp, r7
 800ea28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea2c:	4770      	bx	lr
 800ea2e:	bf00      	nop
 800ea30:	20000098 	.word	0x20000098
 800ea34:	20000bdc 	.word	0x20000bdc

0800ea38 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800ea38:	b480      	push	{r7}
 800ea3a:	af00      	add	r7, sp, #0
  return uwTick;
 800ea3c:	4b03      	ldr	r3, [pc, #12]	; (800ea4c <HAL_GetTick+0x14>)
 800ea3e:	681b      	ldr	r3, [r3, #0]
}
 800ea40:	4618      	mov	r0, r3
 800ea42:	46bd      	mov	sp, r7
 800ea44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea48:	4770      	bx	lr
 800ea4a:	bf00      	nop
 800ea4c:	20000bdc 	.word	0x20000bdc

0800ea50 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 800ea50:	b480      	push	{r7}
 800ea52:	b083      	sub	sp, #12
 800ea54:	af00      	add	r7, sp, #0
 800ea56:	6078      	str	r0, [r7, #4]
 800ea58:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800ea5a:	687b      	ldr	r3, [r7, #4]
 800ea5c:	689b      	ldr	r3, [r3, #8]
 800ea5e:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800ea62:	683b      	ldr	r3, [r7, #0]
 800ea64:	431a      	orrs	r2, r3
 800ea66:	687b      	ldr	r3, [r7, #4]
 800ea68:	609a      	str	r2, [r3, #8]
}
 800ea6a:	bf00      	nop
 800ea6c:	370c      	adds	r7, #12
 800ea6e:	46bd      	mov	sp, r7
 800ea70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea74:	4770      	bx	lr

0800ea76 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800ea76:	b480      	push	{r7}
 800ea78:	b083      	sub	sp, #12
 800ea7a:	af00      	add	r7, sp, #0
 800ea7c:	6078      	str	r0, [r7, #4]
 800ea7e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800ea80:	687b      	ldr	r3, [r7, #4]
 800ea82:	689b      	ldr	r3, [r3, #8]
 800ea84:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 800ea88:	683b      	ldr	r3, [r7, #0]
 800ea8a:	431a      	orrs	r2, r3
 800ea8c:	687b      	ldr	r3, [r7, #4]
 800ea8e:	609a      	str	r2, [r3, #8]
}
 800ea90:	bf00      	nop
 800ea92:	370c      	adds	r7, #12
 800ea94:	46bd      	mov	sp, r7
 800ea96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea9a:	4770      	bx	lr

0800ea9c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 800ea9c:	b480      	push	{r7}
 800ea9e:	b083      	sub	sp, #12
 800eaa0:	af00      	add	r7, sp, #0
 800eaa2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800eaa4:	687b      	ldr	r3, [r7, #4]
 800eaa6:	689b      	ldr	r3, [r3, #8]
 800eaa8:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 800eaac:	4618      	mov	r0, r3
 800eaae:	370c      	adds	r7, #12
 800eab0:	46bd      	mov	sp, r7
 800eab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eab6:	4770      	bx	lr

0800eab8 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 800eab8:	b480      	push	{r7}
 800eaba:	b087      	sub	sp, #28
 800eabc:	af00      	add	r7, sp, #0
 800eabe:	60f8      	str	r0, [r7, #12]
 800eac0:	60b9      	str	r1, [r7, #8]
 800eac2:	607a      	str	r2, [r7, #4]
 800eac4:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800eac6:	68fb      	ldr	r3, [r7, #12]
 800eac8:	3360      	adds	r3, #96	; 0x60
 800eaca:	461a      	mov	r2, r3
 800eacc:	68bb      	ldr	r3, [r7, #8]
 800eace:	009b      	lsls	r3, r3, #2
 800ead0:	4413      	add	r3, r2
 800ead2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800ead4:	697b      	ldr	r3, [r7, #20]
 800ead6:	681a      	ldr	r2, [r3, #0]
 800ead8:	4b08      	ldr	r3, [pc, #32]	; (800eafc <LL_ADC_SetOffset+0x44>)
 800eada:	4013      	ands	r3, r2
 800eadc:	687a      	ldr	r2, [r7, #4]
 800eade:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 800eae2:	683a      	ldr	r2, [r7, #0]
 800eae4:	430a      	orrs	r2, r1
 800eae6:	4313      	orrs	r3, r2
 800eae8:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800eaec:	697b      	ldr	r3, [r7, #20]
 800eaee:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 800eaf0:	bf00      	nop
 800eaf2:	371c      	adds	r7, #28
 800eaf4:	46bd      	mov	sp, r7
 800eaf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eafa:	4770      	bx	lr
 800eafc:	03fff000 	.word	0x03fff000

0800eb00 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 800eb00:	b480      	push	{r7}
 800eb02:	b085      	sub	sp, #20
 800eb04:	af00      	add	r7, sp, #0
 800eb06:	6078      	str	r0, [r7, #4]
 800eb08:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800eb0a:	687b      	ldr	r3, [r7, #4]
 800eb0c:	3360      	adds	r3, #96	; 0x60
 800eb0e:	461a      	mov	r2, r3
 800eb10:	683b      	ldr	r3, [r7, #0]
 800eb12:	009b      	lsls	r3, r3, #2
 800eb14:	4413      	add	r3, r2
 800eb16:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800eb18:	68fb      	ldr	r3, [r7, #12]
 800eb1a:	681b      	ldr	r3, [r3, #0]
 800eb1c:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 800eb20:	4618      	mov	r0, r3
 800eb22:	3714      	adds	r7, #20
 800eb24:	46bd      	mov	sp, r7
 800eb26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb2a:	4770      	bx	lr

0800eb2c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 800eb2c:	b480      	push	{r7}
 800eb2e:	b087      	sub	sp, #28
 800eb30:	af00      	add	r7, sp, #0
 800eb32:	60f8      	str	r0, [r7, #12]
 800eb34:	60b9      	str	r1, [r7, #8]
 800eb36:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800eb38:	68fb      	ldr	r3, [r7, #12]
 800eb3a:	3360      	adds	r3, #96	; 0x60
 800eb3c:	461a      	mov	r2, r3
 800eb3e:	68bb      	ldr	r3, [r7, #8]
 800eb40:	009b      	lsls	r3, r3, #2
 800eb42:	4413      	add	r3, r2
 800eb44:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800eb46:	697b      	ldr	r3, [r7, #20]
 800eb48:	681b      	ldr	r3, [r3, #0]
 800eb4a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800eb4e:	687b      	ldr	r3, [r7, #4]
 800eb50:	431a      	orrs	r2, r3
 800eb52:	697b      	ldr	r3, [r7, #20]
 800eb54:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800eb56:	bf00      	nop
 800eb58:	371c      	adds	r7, #28
 800eb5a:	46bd      	mov	sp, r7
 800eb5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb60:	4770      	bx	lr

0800eb62 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 800eb62:	b480      	push	{r7}
 800eb64:	b083      	sub	sp, #12
 800eb66:	af00      	add	r7, sp, #0
 800eb68:	6078      	str	r0, [r7, #4]
 800eb6a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 800eb6c:	687b      	ldr	r3, [r7, #4]
 800eb6e:	695b      	ldr	r3, [r3, #20]
 800eb70:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800eb74:	683b      	ldr	r3, [r7, #0]
 800eb76:	431a      	orrs	r2, r3
 800eb78:	687b      	ldr	r3, [r7, #4]
 800eb7a:	615a      	str	r2, [r3, #20]
}
 800eb7c:	bf00      	nop
 800eb7e:	370c      	adds	r7, #12
 800eb80:	46bd      	mov	sp, r7
 800eb82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb86:	4770      	bx	lr

0800eb88 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 800eb88:	b480      	push	{r7}
 800eb8a:	b083      	sub	sp, #12
 800eb8c:	af00      	add	r7, sp, #0
 800eb8e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800eb90:	687b      	ldr	r3, [r7, #4]
 800eb92:	68db      	ldr	r3, [r3, #12]
 800eb94:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800eb98:	2b00      	cmp	r3, #0
 800eb9a:	d101      	bne.n	800eba0 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800eb9c:	2301      	movs	r3, #1
 800eb9e:	e000      	b.n	800eba2 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800eba0:	2300      	movs	r3, #0
}
 800eba2:	4618      	mov	r0, r3
 800eba4:	370c      	adds	r7, #12
 800eba6:	46bd      	mov	sp, r7
 800eba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebac:	4770      	bx	lr

0800ebae <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L5, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800ebae:	b480      	push	{r7}
 800ebb0:	b087      	sub	sp, #28
 800ebb2:	af00      	add	r7, sp, #0
 800ebb4:	60f8      	str	r0, [r7, #12]
 800ebb6:	60b9      	str	r1, [r7, #8]
 800ebb8:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 800ebba:	68fb      	ldr	r3, [r7, #12]
 800ebbc:	3330      	adds	r3, #48	; 0x30
 800ebbe:	461a      	mov	r2, r3
 800ebc0:	68bb      	ldr	r3, [r7, #8]
 800ebc2:	0a1b      	lsrs	r3, r3, #8
 800ebc4:	009b      	lsls	r3, r3, #2
 800ebc6:	f003 030c 	and.w	r3, r3, #12
 800ebca:	4413      	add	r3, r2
 800ebcc:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800ebce:	697b      	ldr	r3, [r7, #20]
 800ebd0:	681a      	ldr	r2, [r3, #0]
 800ebd2:	68bb      	ldr	r3, [r7, #8]
 800ebd4:	f003 031f 	and.w	r3, r3, #31
 800ebd8:	211f      	movs	r1, #31
 800ebda:	fa01 f303 	lsl.w	r3, r1, r3
 800ebde:	43db      	mvns	r3, r3
 800ebe0:	401a      	ands	r2, r3
 800ebe2:	687b      	ldr	r3, [r7, #4]
 800ebe4:	0e9b      	lsrs	r3, r3, #26
 800ebe6:	f003 011f 	and.w	r1, r3, #31
 800ebea:	68bb      	ldr	r3, [r7, #8]
 800ebec:	f003 031f 	and.w	r3, r3, #31
 800ebf0:	fa01 f303 	lsl.w	r3, r1, r3
 800ebf4:	431a      	orrs	r2, r3
 800ebf6:	697b      	ldr	r3, [r7, #20]
 800ebf8:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800ebfa:	bf00      	nop
 800ebfc:	371c      	adds	r7, #28
 800ebfe:	46bd      	mov	sp, r7
 800ec00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec04:	4770      	bx	lr

0800ec06 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 800ec06:	b480      	push	{r7}
 800ec08:	b083      	sub	sp, #12
 800ec0a:	af00      	add	r7, sp, #0
 800ec0c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 800ec0e:	687b      	ldr	r3, [r7, #4]
 800ec10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ec12:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800ec16:	2b00      	cmp	r3, #0
 800ec18:	d101      	bne.n	800ec1e <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 800ec1a:	2301      	movs	r3, #1
 800ec1c:	e000      	b.n	800ec20 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 800ec1e:	2300      	movs	r3, #0
}
 800ec20:	4618      	mov	r0, r3
 800ec22:	370c      	adds	r7, #12
 800ec24:	46bd      	mov	sp, r7
 800ec26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec2a:	4770      	bx	lr

0800ec2c <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800ec2c:	b480      	push	{r7}
 800ec2e:	b087      	sub	sp, #28
 800ec30:	af00      	add	r7, sp, #0
 800ec32:	60f8      	str	r0, [r7, #12]
 800ec34:	60b9      	str	r1, [r7, #8]
 800ec36:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 800ec38:	68fb      	ldr	r3, [r7, #12]
 800ec3a:	3314      	adds	r3, #20
 800ec3c:	461a      	mov	r2, r3
 800ec3e:	68bb      	ldr	r3, [r7, #8]
 800ec40:	0e5b      	lsrs	r3, r3, #25
 800ec42:	009b      	lsls	r3, r3, #2
 800ec44:	f003 0304 	and.w	r3, r3, #4
 800ec48:	4413      	add	r3, r2
 800ec4a:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800ec4c:	697b      	ldr	r3, [r7, #20]
 800ec4e:	681a      	ldr	r2, [r3, #0]
 800ec50:	68bb      	ldr	r3, [r7, #8]
 800ec52:	0d1b      	lsrs	r3, r3, #20
 800ec54:	f003 031f 	and.w	r3, r3, #31
 800ec58:	2107      	movs	r1, #7
 800ec5a:	fa01 f303 	lsl.w	r3, r1, r3
 800ec5e:	43db      	mvns	r3, r3
 800ec60:	401a      	ands	r2, r3
 800ec62:	68bb      	ldr	r3, [r7, #8]
 800ec64:	0d1b      	lsrs	r3, r3, #20
 800ec66:	f003 031f 	and.w	r3, r3, #31
 800ec6a:	6879      	ldr	r1, [r7, #4]
 800ec6c:	fa01 f303 	lsl.w	r3, r1, r3
 800ec70:	431a      	orrs	r2, r3
 800ec72:	697b      	ldr	r3, [r7, #20]
 800ec74:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800ec76:	bf00      	nop
 800ec78:	371c      	adds	r7, #28
 800ec7a:	46bd      	mov	sp, r7
 800ec7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec80:	4770      	bx	lr
	...

0800ec84 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 800ec84:	b480      	push	{r7}
 800ec86:	b085      	sub	sp, #20
 800ec88:	af00      	add	r7, sp, #0
 800ec8a:	60f8      	str	r0, [r7, #12]
 800ec8c:	60b9      	str	r1, [r7, #8]
 800ec8e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 800ec90:	68fb      	ldr	r3, [r7, #12]
 800ec92:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800ec96:	68bb      	ldr	r3, [r7, #8]
 800ec98:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800ec9c:	43db      	mvns	r3, r3
 800ec9e:	401a      	ands	r2, r3
 800eca0:	687b      	ldr	r3, [r7, #4]
 800eca2:	f003 0318 	and.w	r3, r3, #24
 800eca6:	4908      	ldr	r1, [pc, #32]	; (800ecc8 <LL_ADC_SetChannelSingleDiff+0x44>)
 800eca8:	40d9      	lsrs	r1, r3
 800ecaa:	68bb      	ldr	r3, [r7, #8]
 800ecac:	400b      	ands	r3, r1
 800ecae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800ecb2:	431a      	orrs	r2, r3
 800ecb4:	68fb      	ldr	r3, [r7, #12]
 800ecb6:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800ecba:	bf00      	nop
 800ecbc:	3714      	adds	r7, #20
 800ecbe:	46bd      	mov	sp, r7
 800ecc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecc4:	4770      	bx	lr
 800ecc6:	bf00      	nop
 800ecc8:	0007ffff 	.word	0x0007ffff

0800eccc <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 800eccc:	b480      	push	{r7}
 800ecce:	b083      	sub	sp, #12
 800ecd0:	af00      	add	r7, sp, #0
 800ecd2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 800ecd4:	687b      	ldr	r3, [r7, #4]
 800ecd6:	689b      	ldr	r3, [r3, #8]
 800ecd8:	f003 031f 	and.w	r3, r3, #31
}
 800ecdc:	4618      	mov	r0, r3
 800ecde:	370c      	adds	r7, #12
 800ece0:	46bd      	mov	sp, r7
 800ece2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ece6:	4770      	bx	lr

0800ece8 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 800ece8:	b480      	push	{r7}
 800ecea:	b083      	sub	sp, #12
 800ecec:	af00      	add	r7, sp, #0
 800ecee:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 800ecf0:	687b      	ldr	r3, [r7, #4]
 800ecf2:	689b      	ldr	r3, [r3, #8]
 800ecf4:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 800ecf8:	4618      	mov	r0, r3
 800ecfa:	370c      	adds	r7, #12
 800ecfc:	46bd      	mov	sp, r7
 800ecfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed02:	4770      	bx	lr

0800ed04 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 800ed04:	b480      	push	{r7}
 800ed06:	b083      	sub	sp, #12
 800ed08:	af00      	add	r7, sp, #0
 800ed0a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800ed0c:	687b      	ldr	r3, [r7, #4]
 800ed0e:	689b      	ldr	r3, [r3, #8]
 800ed10:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 800ed14:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800ed18:	687a      	ldr	r2, [r7, #4]
 800ed1a:	6093      	str	r3, [r2, #8]
}
 800ed1c:	bf00      	nop
 800ed1e:	370c      	adds	r7, #12
 800ed20:	46bd      	mov	sp, r7
 800ed22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed26:	4770      	bx	lr

0800ed28 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 800ed28:	b480      	push	{r7}
 800ed2a:	b083      	sub	sp, #12
 800ed2c:	af00      	add	r7, sp, #0
 800ed2e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800ed30:	687b      	ldr	r3, [r7, #4]
 800ed32:	689b      	ldr	r3, [r3, #8]
 800ed34:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800ed38:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ed3c:	d101      	bne.n	800ed42 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800ed3e:	2301      	movs	r3, #1
 800ed40:	e000      	b.n	800ed44 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800ed42:	2300      	movs	r3, #0
}
 800ed44:	4618      	mov	r0, r3
 800ed46:	370c      	adds	r7, #12
 800ed48:	46bd      	mov	sp, r7
 800ed4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed4e:	4770      	bx	lr

0800ed50 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800ed50:	b480      	push	{r7}
 800ed52:	b083      	sub	sp, #12
 800ed54:	af00      	add	r7, sp, #0
 800ed56:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800ed58:	687b      	ldr	r3, [r7, #4]
 800ed5a:	689b      	ldr	r3, [r3, #8]
 800ed5c:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 800ed60:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800ed64:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800ed68:	687b      	ldr	r3, [r7, #4]
 800ed6a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800ed6c:	bf00      	nop
 800ed6e:	370c      	adds	r7, #12
 800ed70:	46bd      	mov	sp, r7
 800ed72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed76:	4770      	bx	lr

0800ed78 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 800ed78:	b480      	push	{r7}
 800ed7a:	b083      	sub	sp, #12
 800ed7c:	af00      	add	r7, sp, #0
 800ed7e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800ed80:	687b      	ldr	r3, [r7, #4]
 800ed82:	689b      	ldr	r3, [r3, #8]
 800ed84:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ed88:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800ed8c:	d101      	bne.n	800ed92 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800ed8e:	2301      	movs	r3, #1
 800ed90:	e000      	b.n	800ed94 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800ed92:	2300      	movs	r3, #0
}
 800ed94:	4618      	mov	r0, r3
 800ed96:	370c      	adds	r7, #12
 800ed98:	46bd      	mov	sp, r7
 800ed9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed9e:	4770      	bx	lr

0800eda0 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 800eda0:	b480      	push	{r7}
 800eda2:	b083      	sub	sp, #12
 800eda4:	af00      	add	r7, sp, #0
 800eda6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800eda8:	687b      	ldr	r3, [r7, #4]
 800edaa:	689b      	ldr	r3, [r3, #8]
 800edac:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800edb0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800edb4:	f043 0201 	orr.w	r2, r3, #1
 800edb8:	687b      	ldr	r3, [r7, #4]
 800edba:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 800edbc:	bf00      	nop
 800edbe:	370c      	adds	r7, #12
 800edc0:	46bd      	mov	sp, r7
 800edc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edc6:	4770      	bx	lr

0800edc8 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 800edc8:	b480      	push	{r7}
 800edca:	b083      	sub	sp, #12
 800edcc:	af00      	add	r7, sp, #0
 800edce:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800edd0:	687b      	ldr	r3, [r7, #4]
 800edd2:	689b      	ldr	r3, [r3, #8]
 800edd4:	f003 0301 	and.w	r3, r3, #1
 800edd8:	2b01      	cmp	r3, #1
 800edda:	d101      	bne.n	800ede0 <LL_ADC_IsEnabled+0x18>
 800eddc:	2301      	movs	r3, #1
 800edde:	e000      	b.n	800ede2 <LL_ADC_IsEnabled+0x1a>
 800ede0:	2300      	movs	r3, #0
}
 800ede2:	4618      	mov	r0, r3
 800ede4:	370c      	adds	r7, #12
 800ede6:	46bd      	mov	sp, r7
 800ede8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edec:	4770      	bx	lr

0800edee <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800edee:	b480      	push	{r7}
 800edf0:	b083      	sub	sp, #12
 800edf2:	af00      	add	r7, sp, #0
 800edf4:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800edf6:	687b      	ldr	r3, [r7, #4]
 800edf8:	689b      	ldr	r3, [r3, #8]
 800edfa:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800edfe:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800ee02:	f043 0204 	orr.w	r2, r3, #4
 800ee06:	687b      	ldr	r3, [r7, #4]
 800ee08:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800ee0a:	bf00      	nop
 800ee0c:	370c      	adds	r7, #12
 800ee0e:	46bd      	mov	sp, r7
 800ee10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee14:	4770      	bx	lr

0800ee16 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800ee16:	b480      	push	{r7}
 800ee18:	b083      	sub	sp, #12
 800ee1a:	af00      	add	r7, sp, #0
 800ee1c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800ee1e:	687b      	ldr	r3, [r7, #4]
 800ee20:	689b      	ldr	r3, [r3, #8]
 800ee22:	f003 0304 	and.w	r3, r3, #4
 800ee26:	2b04      	cmp	r3, #4
 800ee28:	d101      	bne.n	800ee2e <LL_ADC_REG_IsConversionOngoing+0x18>
 800ee2a:	2301      	movs	r3, #1
 800ee2c:	e000      	b.n	800ee30 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800ee2e:	2300      	movs	r3, #0
}
 800ee30:	4618      	mov	r0, r3
 800ee32:	370c      	adds	r7, #12
 800ee34:	46bd      	mov	sp, r7
 800ee36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee3a:	4770      	bx	lr

0800ee3c <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800ee3c:	b480      	push	{r7}
 800ee3e:	b083      	sub	sp, #12
 800ee40:	af00      	add	r7, sp, #0
 800ee42:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800ee44:	687b      	ldr	r3, [r7, #4]
 800ee46:	689b      	ldr	r3, [r3, #8]
 800ee48:	f003 0308 	and.w	r3, r3, #8
 800ee4c:	2b08      	cmp	r3, #8
 800ee4e:	d101      	bne.n	800ee54 <LL_ADC_INJ_IsConversionOngoing+0x18>
 800ee50:	2301      	movs	r3, #1
 800ee52:	e000      	b.n	800ee56 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800ee54:	2300      	movs	r3, #0
}
 800ee56:	4618      	mov	r0, r3
 800ee58:	370c      	adds	r7, #12
 800ee5a:	46bd      	mov	sp, r7
 800ee5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee60:	4770      	bx	lr
	...

0800ee64 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800ee64:	b590      	push	{r4, r7, lr}
 800ee66:	b089      	sub	sp, #36	; 0x24
 800ee68:	af00      	add	r7, sp, #0
 800ee6a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800ee6c:	2300      	movs	r3, #0
 800ee6e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 800ee70:	2300      	movs	r3, #0
 800ee72:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 800ee74:	687b      	ldr	r3, [r7, #4]
 800ee76:	2b00      	cmp	r3, #0
 800ee78:	d101      	bne.n	800ee7e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800ee7a:	2301      	movs	r3, #1
 800ee7c:	e12e      	b.n	800f0dc <HAL_ADC_Init+0x278>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800ee7e:	687b      	ldr	r3, [r7, #4]
 800ee80:	691b      	ldr	r3, [r3, #16]
 800ee82:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800ee84:	687b      	ldr	r3, [r7, #4]
 800ee86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ee88:	2b00      	cmp	r3, #0
 800ee8a:	d109      	bne.n	800eea0 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800ee8c:	6878      	ldr	r0, [r7, #4]
 800ee8e:	f7fe fe55 	bl	800db3c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800ee92:	687b      	ldr	r3, [r7, #4]
 800ee94:	2200      	movs	r2, #0
 800ee96:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800ee98:	687b      	ldr	r3, [r7, #4]
 800ee9a:	2200      	movs	r2, #0
 800ee9c:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800eea0:	687b      	ldr	r3, [r7, #4]
 800eea2:	681b      	ldr	r3, [r3, #0]
 800eea4:	4618      	mov	r0, r3
 800eea6:	f7ff ff3f 	bl	800ed28 <LL_ADC_IsDeepPowerDownEnabled>
 800eeaa:	4603      	mov	r3, r0
 800eeac:	2b00      	cmp	r3, #0
 800eeae:	d004      	beq.n	800eeba <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 800eeb0:	687b      	ldr	r3, [r7, #4]
 800eeb2:	681b      	ldr	r3, [r3, #0]
 800eeb4:	4618      	mov	r0, r3
 800eeb6:	f7ff ff25 	bl	800ed04 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800eeba:	687b      	ldr	r3, [r7, #4]
 800eebc:	681b      	ldr	r3, [r3, #0]
 800eebe:	4618      	mov	r0, r3
 800eec0:	f7ff ff5a 	bl	800ed78 <LL_ADC_IsInternalRegulatorEnabled>
 800eec4:	4603      	mov	r3, r0
 800eec6:	2b00      	cmp	r3, #0
 800eec8:	d115      	bne.n	800eef6 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800eeca:	687b      	ldr	r3, [r7, #4]
 800eecc:	681b      	ldr	r3, [r3, #0]
 800eece:	4618      	mov	r0, r3
 800eed0:	f7ff ff3e 	bl	800ed50 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800eed4:	4b83      	ldr	r3, [pc, #524]	; (800f0e4 <HAL_ADC_Init+0x280>)
 800eed6:	681b      	ldr	r3, [r3, #0]
 800eed8:	099b      	lsrs	r3, r3, #6
 800eeda:	4a83      	ldr	r2, [pc, #524]	; (800f0e8 <HAL_ADC_Init+0x284>)
 800eedc:	fba2 2303 	umull	r2, r3, r2, r3
 800eee0:	099b      	lsrs	r3, r3, #6
 800eee2:	3301      	adds	r3, #1
 800eee4:	005b      	lsls	r3, r3, #1
 800eee6:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800eee8:	e002      	b.n	800eef0 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800eeea:	68fb      	ldr	r3, [r7, #12]
 800eeec:	3b01      	subs	r3, #1
 800eeee:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800eef0:	68fb      	ldr	r3, [r7, #12]
 800eef2:	2b00      	cmp	r3, #0
 800eef4:	d1f9      	bne.n	800eeea <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800eef6:	687b      	ldr	r3, [r7, #4]
 800eef8:	681b      	ldr	r3, [r3, #0]
 800eefa:	4618      	mov	r0, r3
 800eefc:	f7ff ff3c 	bl	800ed78 <LL_ADC_IsInternalRegulatorEnabled>
 800ef00:	4603      	mov	r3, r0
 800ef02:	2b00      	cmp	r3, #0
 800ef04:	d10d      	bne.n	800ef22 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800ef06:	687b      	ldr	r3, [r7, #4]
 800ef08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ef0a:	f043 0210 	orr.w	r2, r3, #16
 800ef0e:	687b      	ldr	r3, [r7, #4]
 800ef10:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800ef12:	687b      	ldr	r3, [r7, #4]
 800ef14:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ef16:	f043 0201 	orr.w	r2, r3, #1
 800ef1a:	687b      	ldr	r3, [r7, #4]
 800ef1c:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 800ef1e:	2301      	movs	r3, #1
 800ef20:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800ef22:	687b      	ldr	r3, [r7, #4]
 800ef24:	681b      	ldr	r3, [r3, #0]
 800ef26:	4618      	mov	r0, r3
 800ef28:	f7ff ff75 	bl	800ee16 <LL_ADC_REG_IsConversionOngoing>
 800ef2c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800ef2e:	687b      	ldr	r3, [r7, #4]
 800ef30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ef32:	f003 0310 	and.w	r3, r3, #16
 800ef36:	2b00      	cmp	r3, #0
 800ef38:	f040 80c7 	bne.w	800f0ca <HAL_ADC_Init+0x266>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 800ef3c:	697b      	ldr	r3, [r7, #20]
 800ef3e:	2b00      	cmp	r3, #0
 800ef40:	f040 80c3 	bne.w	800f0ca <HAL_ADC_Init+0x266>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800ef44:	687b      	ldr	r3, [r7, #4]
 800ef46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ef48:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800ef4c:	f043 0202 	orr.w	r2, r3, #2
 800ef50:	687b      	ldr	r3, [r7, #4]
 800ef52:	659a      	str	r2, [r3, #88]	; 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800ef54:	687b      	ldr	r3, [r7, #4]
 800ef56:	681b      	ldr	r3, [r3, #0]
 800ef58:	4618      	mov	r0, r3
 800ef5a:	f7ff ff35 	bl	800edc8 <LL_ADC_IsEnabled>
 800ef5e:	4603      	mov	r3, r0
 800ef60:	2b00      	cmp	r3, #0
 800ef62:	d110      	bne.n	800ef86 <HAL_ADC_Init+0x122>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800ef64:	4861      	ldr	r0, [pc, #388]	; (800f0ec <HAL_ADC_Init+0x288>)
 800ef66:	f7ff ff2f 	bl	800edc8 <LL_ADC_IsEnabled>
 800ef6a:	4604      	mov	r4, r0
 800ef6c:	4860      	ldr	r0, [pc, #384]	; (800f0f0 <HAL_ADC_Init+0x28c>)
 800ef6e:	f7ff ff2b 	bl	800edc8 <LL_ADC_IsEnabled>
 800ef72:	4603      	mov	r3, r0
 800ef74:	4323      	orrs	r3, r4
 800ef76:	2b00      	cmp	r3, #0
 800ef78:	d105      	bne.n	800ef86 <HAL_ADC_Init+0x122>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800ef7a:	687b      	ldr	r3, [r7, #4]
 800ef7c:	685b      	ldr	r3, [r3, #4]
 800ef7e:	4619      	mov	r1, r3
 800ef80:	485c      	ldr	r0, [pc, #368]	; (800f0f4 <HAL_ADC_Init+0x290>)
 800ef82:	f7ff fd65 	bl	800ea50 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800ef86:	687b      	ldr	r3, [r7, #4]
 800ef88:	7e5b      	ldrb	r3, [r3, #25]
 800ef8a:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 800ef8c:	687b      	ldr	r3, [r7, #4]
 800ef8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800ef90:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 800ef92:	687b      	ldr	r3, [r7, #4]
 800ef94:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 800ef96:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 800ef98:	687b      	ldr	r3, [r7, #4]
 800ef9a:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 800ef9c:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800ef9e:	687b      	ldr	r3, [r7, #4]
 800efa0:	f893 3020 	ldrb.w	r3, [r3, #32]
 800efa4:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800efa6:	4313      	orrs	r3, r2
 800efa8:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800efaa:	687b      	ldr	r3, [r7, #4]
 800efac:	f893 3020 	ldrb.w	r3, [r3, #32]
 800efb0:	2b01      	cmp	r3, #1
 800efb2:	d106      	bne.n	800efc2 <HAL_ADC_Init+0x15e>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800efb4:	687b      	ldr	r3, [r7, #4]
 800efb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800efb8:	3b01      	subs	r3, #1
 800efba:	045b      	lsls	r3, r3, #17
 800efbc:	69ba      	ldr	r2, [r7, #24]
 800efbe:	4313      	orrs	r3, r2
 800efc0:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800efc2:	687b      	ldr	r3, [r7, #4]
 800efc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800efc6:	2b00      	cmp	r3, #0
 800efc8:	d009      	beq.n	800efde <HAL_ADC_Init+0x17a>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800efca:	687b      	ldr	r3, [r7, #4]
 800efcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800efce:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 800efd2:	687b      	ldr	r3, [r7, #4]
 800efd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800efd6:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800efd8:	69ba      	ldr	r2, [r7, #24]
 800efda:	4313      	orrs	r3, r2
 800efdc:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 800efde:	687b      	ldr	r3, [r7, #4]
 800efe0:	681b      	ldr	r3, [r3, #0]
 800efe2:	68da      	ldr	r2, [r3, #12]
 800efe4:	4b44      	ldr	r3, [pc, #272]	; (800f0f8 <HAL_ADC_Init+0x294>)
 800efe6:	4013      	ands	r3, r2
 800efe8:	687a      	ldr	r2, [r7, #4]
 800efea:	6812      	ldr	r2, [r2, #0]
 800efec:	69b9      	ldr	r1, [r7, #24]
 800efee:	430b      	orrs	r3, r1
 800eff0:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800eff2:	687b      	ldr	r3, [r7, #4]
 800eff4:	681b      	ldr	r3, [r3, #0]
 800eff6:	4618      	mov	r0, r3
 800eff8:	f7ff ff20 	bl	800ee3c <LL_ADC_INJ_IsConversionOngoing>
 800effc:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800effe:	697b      	ldr	r3, [r7, #20]
 800f000:	2b00      	cmp	r3, #0
 800f002:	d140      	bne.n	800f086 <HAL_ADC_Init+0x222>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800f004:	693b      	ldr	r3, [r7, #16]
 800f006:	2b00      	cmp	r3, #0
 800f008:	d13d      	bne.n	800f086 <HAL_ADC_Init+0x222>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800f00a:	687b      	ldr	r3, [r7, #4]
 800f00c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800f00e:	687b      	ldr	r3, [r7, #4]
 800f010:	7e1b      	ldrb	r3, [r3, #24]
 800f012:	039b      	lsls	r3, r3, #14
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800f014:	431a      	orrs	r2, r3
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800f016:	687b      	ldr	r3, [r7, #4]
 800f018:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800f01c:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800f01e:	4313      	orrs	r3, r2
 800f020:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 800f022:	687b      	ldr	r3, [r7, #4]
 800f024:	681b      	ldr	r3, [r3, #0]
 800f026:	68db      	ldr	r3, [r3, #12]
 800f028:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800f02c:	f023 0306 	bic.w	r3, r3, #6
 800f030:	687a      	ldr	r2, [r7, #4]
 800f032:	6812      	ldr	r2, [r2, #0]
 800f034:	69b9      	ldr	r1, [r7, #24]
 800f036:	430b      	orrs	r3, r1
 800f038:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 800f03a:	687b      	ldr	r3, [r7, #4]
 800f03c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800f040:	2b01      	cmp	r3, #1
 800f042:	d118      	bne.n	800f076 <HAL_ADC_Init+0x212>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800f044:	687b      	ldr	r3, [r7, #4]
 800f046:	681b      	ldr	r3, [r3, #0]
 800f048:	691b      	ldr	r3, [r3, #16]
 800f04a:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800f04e:	f023 0304 	bic.w	r3, r3, #4
 800f052:	687a      	ldr	r2, [r7, #4]
 800f054:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 800f056:	687a      	ldr	r2, [r7, #4]
 800f058:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800f05a:	4311      	orrs	r1, r2
 800f05c:	687a      	ldr	r2, [r7, #4]
 800f05e:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800f060:	4311      	orrs	r1, r2
 800f062:	687a      	ldr	r2, [r7, #4]
 800f064:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800f066:	430a      	orrs	r2, r1
 800f068:	431a      	orrs	r2, r3
 800f06a:	687b      	ldr	r3, [r7, #4]
 800f06c:	681b      	ldr	r3, [r3, #0]
 800f06e:	f042 0201 	orr.w	r2, r2, #1
 800f072:	611a      	str	r2, [r3, #16]
 800f074:	e007      	b.n	800f086 <HAL_ADC_Init+0x222>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800f076:	687b      	ldr	r3, [r7, #4]
 800f078:	681b      	ldr	r3, [r3, #0]
 800f07a:	691a      	ldr	r2, [r3, #16]
 800f07c:	687b      	ldr	r3, [r7, #4]
 800f07e:	681b      	ldr	r3, [r3, #0]
 800f080:	f022 0201 	bic.w	r2, r2, #1
 800f084:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800f086:	687b      	ldr	r3, [r7, #4]
 800f088:	691b      	ldr	r3, [r3, #16]
 800f08a:	2b01      	cmp	r3, #1
 800f08c:	d10c      	bne.n	800f0a8 <HAL_ADC_Init+0x244>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800f08e:	687b      	ldr	r3, [r7, #4]
 800f090:	681b      	ldr	r3, [r3, #0]
 800f092:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f094:	f023 010f 	bic.w	r1, r3, #15
 800f098:	687b      	ldr	r3, [r7, #4]
 800f09a:	69db      	ldr	r3, [r3, #28]
 800f09c:	1e5a      	subs	r2, r3, #1
 800f09e:	687b      	ldr	r3, [r7, #4]
 800f0a0:	681b      	ldr	r3, [r3, #0]
 800f0a2:	430a      	orrs	r2, r1
 800f0a4:	631a      	str	r2, [r3, #48]	; 0x30
 800f0a6:	e007      	b.n	800f0b8 <HAL_ADC_Init+0x254>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800f0a8:	687b      	ldr	r3, [r7, #4]
 800f0aa:	681b      	ldr	r3, [r3, #0]
 800f0ac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800f0ae:	687b      	ldr	r3, [r7, #4]
 800f0b0:	681b      	ldr	r3, [r3, #0]
 800f0b2:	f022 020f 	bic.w	r2, r2, #15
 800f0b6:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800f0b8:	687b      	ldr	r3, [r7, #4]
 800f0ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f0bc:	f023 0303 	bic.w	r3, r3, #3
 800f0c0:	f043 0201 	orr.w	r2, r3, #1
 800f0c4:	687b      	ldr	r3, [r7, #4]
 800f0c6:	659a      	str	r2, [r3, #88]	; 0x58
 800f0c8:	e007      	b.n	800f0da <HAL_ADC_Init+0x276>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800f0ca:	687b      	ldr	r3, [r7, #4]
 800f0cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f0ce:	f043 0210 	orr.w	r2, r3, #16
 800f0d2:	687b      	ldr	r3, [r7, #4]
 800f0d4:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800f0d6:	2301      	movs	r3, #1
 800f0d8:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800f0da:	7ffb      	ldrb	r3, [r7, #31]
}
 800f0dc:	4618      	mov	r0, r3
 800f0de:	3724      	adds	r7, #36	; 0x24
 800f0e0:	46bd      	mov	sp, r7
 800f0e2:	bd90      	pop	{r4, r7, pc}
 800f0e4:	20000090 	.word	0x20000090
 800f0e8:	053e2d63 	.word	0x053e2d63
 800f0ec:	42028000 	.word	0x42028000
 800f0f0:	42028100 	.word	0x42028100
 800f0f4:	42028300 	.word	0x42028300
 800f0f8:	fff0c007 	.word	0xfff0c007

0800f0fc <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 800f0fc:	b580      	push	{r7, lr}
 800f0fe:	b086      	sub	sp, #24
 800f100:	af00      	add	r7, sp, #0
 800f102:	60f8      	str	r0, [r7, #12]
 800f104:	60b9      	str	r1, [r7, #8]
 800f106:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800f108:	4850      	ldr	r0, [pc, #320]	; (800f24c <HAL_ADC_Start_DMA+0x150>)
 800f10a:	f7ff fddf 	bl	800eccc <LL_ADC_GetMultimode>
 800f10e:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800f110:	68fb      	ldr	r3, [r7, #12]
 800f112:	681b      	ldr	r3, [r3, #0]
 800f114:	4618      	mov	r0, r3
 800f116:	f7ff fe7e 	bl	800ee16 <LL_ADC_REG_IsConversionOngoing>
 800f11a:	4603      	mov	r3, r0
 800f11c:	2b00      	cmp	r3, #0
 800f11e:	f040 808e 	bne.w	800f23e <HAL_ADC_Start_DMA+0x142>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800f122:	68fb      	ldr	r3, [r7, #12]
 800f124:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800f128:	2b01      	cmp	r3, #1
 800f12a:	d101      	bne.n	800f130 <HAL_ADC_Start_DMA+0x34>
 800f12c:	2302      	movs	r3, #2
 800f12e:	e089      	b.n	800f244 <HAL_ADC_Start_DMA+0x148>
 800f130:	68fb      	ldr	r3, [r7, #12]
 800f132:	2201      	movs	r2, #1
 800f134:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800f138:	693b      	ldr	r3, [r7, #16]
 800f13a:	2b00      	cmp	r3, #0
 800f13c:	d005      	beq.n	800f14a <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800f13e:	693b      	ldr	r3, [r7, #16]
 800f140:	2b05      	cmp	r3, #5
 800f142:	d002      	beq.n	800f14a <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800f144:	693b      	ldr	r3, [r7, #16]
 800f146:	2b09      	cmp	r3, #9
 800f148:	d172      	bne.n	800f230 <HAL_ADC_Start_DMA+0x134>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 800f14a:	68f8      	ldr	r0, [r7, #12]
 800f14c:	f000 feac 	bl	800fea8 <ADC_Enable>
 800f150:	4603      	mov	r3, r0
 800f152:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 800f154:	7dfb      	ldrb	r3, [r7, #23]
 800f156:	2b00      	cmp	r3, #0
 800f158:	d165      	bne.n	800f226 <HAL_ADC_Start_DMA+0x12a>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 800f15a:	68fb      	ldr	r3, [r7, #12]
 800f15c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f15e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800f162:	f023 0301 	bic.w	r3, r3, #1
 800f166:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800f16a:	68fb      	ldr	r3, [r7, #12]
 800f16c:	659a      	str	r2, [r3, #88]	; 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800f16e:	68fb      	ldr	r3, [r7, #12]
 800f170:	681b      	ldr	r3, [r3, #0]
 800f172:	4a37      	ldr	r2, [pc, #220]	; (800f250 <HAL_ADC_Start_DMA+0x154>)
 800f174:	4293      	cmp	r3, r2
 800f176:	d002      	beq.n	800f17e <HAL_ADC_Start_DMA+0x82>
 800f178:	68fb      	ldr	r3, [r7, #12]
 800f17a:	681b      	ldr	r3, [r3, #0]
 800f17c:	e000      	b.n	800f180 <HAL_ADC_Start_DMA+0x84>
 800f17e:	4b35      	ldr	r3, [pc, #212]	; (800f254 <HAL_ADC_Start_DMA+0x158>)
 800f180:	68fa      	ldr	r2, [r7, #12]
 800f182:	6812      	ldr	r2, [r2, #0]
 800f184:	4293      	cmp	r3, r2
 800f186:	d002      	beq.n	800f18e <HAL_ADC_Start_DMA+0x92>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800f188:	693b      	ldr	r3, [r7, #16]
 800f18a:	2b00      	cmp	r3, #0
 800f18c:	d105      	bne.n	800f19a <HAL_ADC_Start_DMA+0x9e>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800f18e:	68fb      	ldr	r3, [r7, #12]
 800f190:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f192:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800f196:	68fb      	ldr	r3, [r7, #12]
 800f198:	659a      	str	r2, [r3, #88]	; 0x58
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 800f19a:	68fb      	ldr	r3, [r7, #12]
 800f19c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f19e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800f1a2:	2b00      	cmp	r3, #0
 800f1a4:	d006      	beq.n	800f1b4 <HAL_ADC_Start_DMA+0xb8>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800f1a6:	68fb      	ldr	r3, [r7, #12]
 800f1a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f1aa:	f023 0206 	bic.w	r2, r3, #6
 800f1ae:	68fb      	ldr	r3, [r7, #12]
 800f1b0:	65da      	str	r2, [r3, #92]	; 0x5c
 800f1b2:	e002      	b.n	800f1ba <HAL_ADC_Start_DMA+0xbe>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 800f1b4:	68fb      	ldr	r3, [r7, #12]
 800f1b6:	2200      	movs	r2, #0
 800f1b8:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800f1ba:	68fb      	ldr	r3, [r7, #12]
 800f1bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f1be:	4a26      	ldr	r2, [pc, #152]	; (800f258 <HAL_ADC_Start_DMA+0x15c>)
 800f1c0:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800f1c2:	68fb      	ldr	r3, [r7, #12]
 800f1c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f1c6:	4a25      	ldr	r2, [pc, #148]	; (800f25c <HAL_ADC_Start_DMA+0x160>)
 800f1c8:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800f1ca:	68fb      	ldr	r3, [r7, #12]
 800f1cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f1ce:	4a24      	ldr	r2, [pc, #144]	; (800f260 <HAL_ADC_Start_DMA+0x164>)
 800f1d0:	63da      	str	r2, [r3, #60]	; 0x3c
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800f1d2:	68fb      	ldr	r3, [r7, #12]
 800f1d4:	681b      	ldr	r3, [r3, #0]
 800f1d6:	221c      	movs	r2, #28
 800f1d8:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 800f1da:	68fb      	ldr	r3, [r7, #12]
 800f1dc:	2200      	movs	r2, #0
 800f1de:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800f1e2:	68fb      	ldr	r3, [r7, #12]
 800f1e4:	681b      	ldr	r3, [r3, #0]
 800f1e6:	685a      	ldr	r2, [r3, #4]
 800f1e8:	68fb      	ldr	r3, [r7, #12]
 800f1ea:	681b      	ldr	r3, [r3, #0]
 800f1ec:	f042 0210 	orr.w	r2, r2, #16
 800f1f0:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 800f1f2:	68fb      	ldr	r3, [r7, #12]
 800f1f4:	681b      	ldr	r3, [r3, #0]
 800f1f6:	68da      	ldr	r2, [r3, #12]
 800f1f8:	68fb      	ldr	r3, [r7, #12]
 800f1fa:	681b      	ldr	r3, [r3, #0]
 800f1fc:	f042 0201 	orr.w	r2, r2, #1
 800f200:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800f202:	68fb      	ldr	r3, [r7, #12]
 800f204:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800f206:	68fb      	ldr	r3, [r7, #12]
 800f208:	681b      	ldr	r3, [r3, #0]
 800f20a:	3340      	adds	r3, #64	; 0x40
 800f20c:	4619      	mov	r1, r3
 800f20e:	68ba      	ldr	r2, [r7, #8]
 800f210:	687b      	ldr	r3, [r7, #4]
 800f212:	f001 f9e7 	bl	80105e4 <HAL_DMA_Start_IT>
 800f216:	4603      	mov	r3, r0
 800f218:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 800f21a:	68fb      	ldr	r3, [r7, #12]
 800f21c:	681b      	ldr	r3, [r3, #0]
 800f21e:	4618      	mov	r0, r3
 800f220:	f7ff fde5 	bl	800edee <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 800f224:	e00d      	b.n	800f242 <HAL_ADC_Start_DMA+0x146>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800f226:	68fb      	ldr	r3, [r7, #12]
 800f228:	2200      	movs	r2, #0
 800f22a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
      if (tmp_hal_status == HAL_OK)
 800f22e:	e008      	b.n	800f242 <HAL_ADC_Start_DMA+0x146>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 800f230:	2301      	movs	r3, #1
 800f232:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800f234:	68fb      	ldr	r3, [r7, #12]
 800f236:	2200      	movs	r2, #0
 800f238:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 800f23c:	e001      	b.n	800f242 <HAL_ADC_Start_DMA+0x146>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800f23e:	2302      	movs	r3, #2
 800f240:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 800f242:	7dfb      	ldrb	r3, [r7, #23]
}
 800f244:	4618      	mov	r0, r3
 800f246:	3718      	adds	r7, #24
 800f248:	46bd      	mov	sp, r7
 800f24a:	bd80      	pop	{r7, pc}
 800f24c:	42028300 	.word	0x42028300
 800f250:	42028100 	.word	0x42028100
 800f254:	42028000 	.word	0x42028000
 800f258:	0800ffb5 	.word	0x0800ffb5
 800f25c:	0801008d 	.word	0x0801008d
 800f260:	080100a9 	.word	0x080100a9

0800f264 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 800f264:	b580      	push	{r7, lr}
 800f266:	b08a      	sub	sp, #40	; 0x28
 800f268:	af00      	add	r7, sp, #0
 800f26a:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 800f26c:	2300      	movs	r3, #0
 800f26e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 800f270:	687b      	ldr	r3, [r7, #4]
 800f272:	681b      	ldr	r3, [r3, #0]
 800f274:	681b      	ldr	r3, [r3, #0]
 800f276:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 800f278:	687b      	ldr	r3, [r7, #4]
 800f27a:	681b      	ldr	r3, [r3, #0]
 800f27c:	685b      	ldr	r3, [r3, #4]
 800f27e:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800f280:	4882      	ldr	r0, [pc, #520]	; (800f48c <HAL_ADC_IRQHandler+0x228>)
 800f282:	f7ff fd23 	bl	800eccc <LL_ADC_GetMultimode>
 800f286:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 800f288:	69fb      	ldr	r3, [r7, #28]
 800f28a:	f003 0302 	and.w	r3, r3, #2
 800f28e:	2b00      	cmp	r3, #0
 800f290:	d017      	beq.n	800f2c2 <HAL_ADC_IRQHandler+0x5e>
 800f292:	69bb      	ldr	r3, [r7, #24]
 800f294:	f003 0302 	and.w	r3, r3, #2
 800f298:	2b00      	cmp	r3, #0
 800f29a:	d012      	beq.n	800f2c2 <HAL_ADC_IRQHandler+0x5e>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800f29c:	687b      	ldr	r3, [r7, #4]
 800f29e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f2a0:	f003 0310 	and.w	r3, r3, #16
 800f2a4:	2b00      	cmp	r3, #0
 800f2a6:	d105      	bne.n	800f2b4 <HAL_ADC_IRQHandler+0x50>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 800f2a8:	687b      	ldr	r3, [r7, #4]
 800f2aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f2ac:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 800f2b0:	687b      	ldr	r3, [r7, #4]
 800f2b2:	659a      	str	r2, [r3, #88]	; 0x58

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 800f2b4:	6878      	ldr	r0, [r7, #4]
 800f2b6:	f000 ff5f 	bl	8010178 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 800f2ba:	687b      	ldr	r3, [r7, #4]
 800f2bc:	681b      	ldr	r3, [r3, #0]
 800f2be:	2202      	movs	r2, #2
 800f2c0:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 800f2c2:	69fb      	ldr	r3, [r7, #28]
 800f2c4:	f003 0304 	and.w	r3, r3, #4
 800f2c8:	2b00      	cmp	r3, #0
 800f2ca:	d004      	beq.n	800f2d6 <HAL_ADC_IRQHandler+0x72>
 800f2cc:	69bb      	ldr	r3, [r7, #24]
 800f2ce:	f003 0304 	and.w	r3, r3, #4
 800f2d2:	2b00      	cmp	r3, #0
 800f2d4:	d10a      	bne.n	800f2ec <HAL_ADC_IRQHandler+0x88>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 800f2d6:	69fb      	ldr	r3, [r7, #28]
 800f2d8:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 800f2dc:	2b00      	cmp	r3, #0
 800f2de:	f000 8083 	beq.w	800f3e8 <HAL_ADC_IRQHandler+0x184>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 800f2e2:	69bb      	ldr	r3, [r7, #24]
 800f2e4:	f003 0308 	and.w	r3, r3, #8
 800f2e8:	2b00      	cmp	r3, #0
 800f2ea:	d07d      	beq.n	800f3e8 <HAL_ADC_IRQHandler+0x184>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800f2ec:	687b      	ldr	r3, [r7, #4]
 800f2ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f2f0:	f003 0310 	and.w	r3, r3, #16
 800f2f4:	2b00      	cmp	r3, #0
 800f2f6:	d105      	bne.n	800f304 <HAL_ADC_IRQHandler+0xa0>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800f2f8:	687b      	ldr	r3, [r7, #4]
 800f2fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f2fc:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800f300:	687b      	ldr	r3, [r7, #4]
 800f302:	659a      	str	r2, [r3, #88]	; 0x58
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800f304:	687b      	ldr	r3, [r7, #4]
 800f306:	681b      	ldr	r3, [r3, #0]
 800f308:	4618      	mov	r0, r3
 800f30a:	f7ff fc3d 	bl	800eb88 <LL_ADC_REG_IsTriggerSourceSWStart>
 800f30e:	4603      	mov	r3, r0
 800f310:	2b00      	cmp	r3, #0
 800f312:	d062      	beq.n	800f3da <HAL_ADC_IRQHandler+0x176>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800f314:	687b      	ldr	r3, [r7, #4]
 800f316:	681b      	ldr	r3, [r3, #0]
 800f318:	4a5d      	ldr	r2, [pc, #372]	; (800f490 <HAL_ADC_IRQHandler+0x22c>)
 800f31a:	4293      	cmp	r3, r2
 800f31c:	d002      	beq.n	800f324 <HAL_ADC_IRQHandler+0xc0>
 800f31e:	687b      	ldr	r3, [r7, #4]
 800f320:	681b      	ldr	r3, [r3, #0]
 800f322:	e000      	b.n	800f326 <HAL_ADC_IRQHandler+0xc2>
 800f324:	4b5b      	ldr	r3, [pc, #364]	; (800f494 <HAL_ADC_IRQHandler+0x230>)
 800f326:	687a      	ldr	r2, [r7, #4]
 800f328:	6812      	ldr	r2, [r2, #0]
 800f32a:	4293      	cmp	r3, r2
 800f32c:	d008      	beq.n	800f340 <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800f32e:	697b      	ldr	r3, [r7, #20]
 800f330:	2b00      	cmp	r3, #0
 800f332:	d005      	beq.n	800f340 <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800f334:	697b      	ldr	r3, [r7, #20]
 800f336:	2b05      	cmp	r3, #5
 800f338:	d002      	beq.n	800f340 <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800f33a:	697b      	ldr	r3, [r7, #20]
 800f33c:	2b09      	cmp	r3, #9
 800f33e:	d104      	bne.n	800f34a <HAL_ADC_IRQHandler+0xe6>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800f340:	687b      	ldr	r3, [r7, #4]
 800f342:	681b      	ldr	r3, [r3, #0]
 800f344:	68db      	ldr	r3, [r3, #12]
 800f346:	623b      	str	r3, [r7, #32]
 800f348:	e00c      	b.n	800f364 <HAL_ADC_IRQHandler+0x100>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 800f34a:	687b      	ldr	r3, [r7, #4]
 800f34c:	681b      	ldr	r3, [r3, #0]
 800f34e:	4a50      	ldr	r2, [pc, #320]	; (800f490 <HAL_ADC_IRQHandler+0x22c>)
 800f350:	4293      	cmp	r3, r2
 800f352:	d002      	beq.n	800f35a <HAL_ADC_IRQHandler+0xf6>
 800f354:	687b      	ldr	r3, [r7, #4]
 800f356:	681b      	ldr	r3, [r3, #0]
 800f358:	e000      	b.n	800f35c <HAL_ADC_IRQHandler+0xf8>
 800f35a:	4b4e      	ldr	r3, [pc, #312]	; (800f494 <HAL_ADC_IRQHandler+0x230>)
 800f35c:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 800f35e:	693b      	ldr	r3, [r7, #16]
 800f360:	68db      	ldr	r3, [r3, #12]
 800f362:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 800f364:	6a3b      	ldr	r3, [r7, #32]
 800f366:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800f36a:	2b00      	cmp	r3, #0
 800f36c:	d135      	bne.n	800f3da <HAL_ADC_IRQHandler+0x176>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800f36e:	687b      	ldr	r3, [r7, #4]
 800f370:	681b      	ldr	r3, [r3, #0]
 800f372:	681b      	ldr	r3, [r3, #0]
 800f374:	f003 0308 	and.w	r3, r3, #8
 800f378:	2b08      	cmp	r3, #8
 800f37a:	d12e      	bne.n	800f3da <HAL_ADC_IRQHandler+0x176>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800f37c:	687b      	ldr	r3, [r7, #4]
 800f37e:	681b      	ldr	r3, [r3, #0]
 800f380:	4618      	mov	r0, r3
 800f382:	f7ff fd48 	bl	800ee16 <LL_ADC_REG_IsConversionOngoing>
 800f386:	4603      	mov	r3, r0
 800f388:	2b00      	cmp	r3, #0
 800f38a:	d11a      	bne.n	800f3c2 <HAL_ADC_IRQHandler+0x15e>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 800f38c:	687b      	ldr	r3, [r7, #4]
 800f38e:	681b      	ldr	r3, [r3, #0]
 800f390:	685a      	ldr	r2, [r3, #4]
 800f392:	687b      	ldr	r3, [r7, #4]
 800f394:	681b      	ldr	r3, [r3, #0]
 800f396:	f022 020c 	bic.w	r2, r2, #12
 800f39a:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800f39c:	687b      	ldr	r3, [r7, #4]
 800f39e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f3a0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800f3a4:	687b      	ldr	r3, [r7, #4]
 800f3a6:	659a      	str	r2, [r3, #88]	; 0x58

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800f3a8:	687b      	ldr	r3, [r7, #4]
 800f3aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f3ac:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800f3b0:	2b00      	cmp	r3, #0
 800f3b2:	d112      	bne.n	800f3da <HAL_ADC_IRQHandler+0x176>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800f3b4:	687b      	ldr	r3, [r7, #4]
 800f3b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f3b8:	f043 0201 	orr.w	r2, r3, #1
 800f3bc:	687b      	ldr	r3, [r7, #4]
 800f3be:	659a      	str	r2, [r3, #88]	; 0x58
 800f3c0:	e00b      	b.n	800f3da <HAL_ADC_IRQHandler+0x176>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800f3c2:	687b      	ldr	r3, [r7, #4]
 800f3c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f3c6:	f043 0210 	orr.w	r2, r3, #16
 800f3ca:	687b      	ldr	r3, [r7, #4]
 800f3cc:	659a      	str	r2, [r3, #88]	; 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800f3ce:	687b      	ldr	r3, [r7, #4]
 800f3d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f3d2:	f043 0201 	orr.w	r2, r3, #1
 800f3d6:	687b      	ldr	r3, [r7, #4]
 800f3d8:	65da      	str	r2, [r3, #92]	; 0x5c
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800f3da:	6878      	ldr	r0, [r7, #4]
 800f3dc:	f7f1 fd8e 	bl	8000efc <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 800f3e0:	687b      	ldr	r3, [r7, #4]
 800f3e2:	681b      	ldr	r3, [r3, #0]
 800f3e4:	220c      	movs	r2, #12
 800f3e6:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 800f3e8:	69fb      	ldr	r3, [r7, #28]
 800f3ea:	f003 0320 	and.w	r3, r3, #32
 800f3ee:	2b00      	cmp	r3, #0
 800f3f0:	d004      	beq.n	800f3fc <HAL_ADC_IRQHandler+0x198>
 800f3f2:	69bb      	ldr	r3, [r7, #24]
 800f3f4:	f003 0320 	and.w	r3, r3, #32
 800f3f8:	2b00      	cmp	r3, #0
 800f3fa:	d10b      	bne.n	800f414 <HAL_ADC_IRQHandler+0x1b0>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 800f3fc:	69fb      	ldr	r3, [r7, #28]
 800f3fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 800f402:	2b00      	cmp	r3, #0
 800f404:	f000 809f 	beq.w	800f546 <HAL_ADC_IRQHandler+0x2e2>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 800f408:	69bb      	ldr	r3, [r7, #24]
 800f40a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f40e:	2b00      	cmp	r3, #0
 800f410:	f000 8099 	beq.w	800f546 <HAL_ADC_IRQHandler+0x2e2>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800f414:	687b      	ldr	r3, [r7, #4]
 800f416:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f418:	f003 0310 	and.w	r3, r3, #16
 800f41c:	2b00      	cmp	r3, #0
 800f41e:	d105      	bne.n	800f42c <HAL_ADC_IRQHandler+0x1c8>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 800f420:	687b      	ldr	r3, [r7, #4]
 800f422:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f424:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 800f428:	687b      	ldr	r3, [r7, #4]
 800f42a:	659a      	str	r2, [r3, #88]	; 0x58
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 800f42c:	687b      	ldr	r3, [r7, #4]
 800f42e:	681b      	ldr	r3, [r3, #0]
 800f430:	4618      	mov	r0, r3
 800f432:	f7ff fbe8 	bl	800ec06 <LL_ADC_INJ_IsTriggerSourceSWStart>
 800f436:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 800f438:	687b      	ldr	r3, [r7, #4]
 800f43a:	681b      	ldr	r3, [r3, #0]
 800f43c:	4618      	mov	r0, r3
 800f43e:	f7ff fba3 	bl	800eb88 <LL_ADC_REG_IsTriggerSourceSWStart>
 800f442:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800f444:	687b      	ldr	r3, [r7, #4]
 800f446:	681b      	ldr	r3, [r3, #0]
 800f448:	4a11      	ldr	r2, [pc, #68]	; (800f490 <HAL_ADC_IRQHandler+0x22c>)
 800f44a:	4293      	cmp	r3, r2
 800f44c:	d002      	beq.n	800f454 <HAL_ADC_IRQHandler+0x1f0>
 800f44e:	687b      	ldr	r3, [r7, #4]
 800f450:	681b      	ldr	r3, [r3, #0]
 800f452:	e000      	b.n	800f456 <HAL_ADC_IRQHandler+0x1f2>
 800f454:	4b0f      	ldr	r3, [pc, #60]	; (800f494 <HAL_ADC_IRQHandler+0x230>)
 800f456:	687a      	ldr	r2, [r7, #4]
 800f458:	6812      	ldr	r2, [r2, #0]
 800f45a:	4293      	cmp	r3, r2
 800f45c:	d008      	beq.n	800f470 <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800f45e:	697b      	ldr	r3, [r7, #20]
 800f460:	2b00      	cmp	r3, #0
 800f462:	d005      	beq.n	800f470 <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 800f464:	697b      	ldr	r3, [r7, #20]
 800f466:	2b06      	cmp	r3, #6
 800f468:	d002      	beq.n	800f470 <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 800f46a:	697b      	ldr	r3, [r7, #20]
 800f46c:	2b07      	cmp	r3, #7
 800f46e:	d104      	bne.n	800f47a <HAL_ADC_IRQHandler+0x216>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800f470:	687b      	ldr	r3, [r7, #4]
 800f472:	681b      	ldr	r3, [r3, #0]
 800f474:	68db      	ldr	r3, [r3, #12]
 800f476:	623b      	str	r3, [r7, #32]
 800f478:	e013      	b.n	800f4a2 <HAL_ADC_IRQHandler+0x23e>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 800f47a:	687b      	ldr	r3, [r7, #4]
 800f47c:	681b      	ldr	r3, [r3, #0]
 800f47e:	4a04      	ldr	r2, [pc, #16]	; (800f490 <HAL_ADC_IRQHandler+0x22c>)
 800f480:	4293      	cmp	r3, r2
 800f482:	d009      	beq.n	800f498 <HAL_ADC_IRQHandler+0x234>
 800f484:	687b      	ldr	r3, [r7, #4]
 800f486:	681b      	ldr	r3, [r3, #0]
 800f488:	e007      	b.n	800f49a <HAL_ADC_IRQHandler+0x236>
 800f48a:	bf00      	nop
 800f48c:	42028300 	.word	0x42028300
 800f490:	42028100 	.word	0x42028100
 800f494:	42028000 	.word	0x42028000
 800f498:	4b7d      	ldr	r3, [pc, #500]	; (800f690 <HAL_ADC_IRQHandler+0x42c>)
 800f49a:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 800f49c:	693b      	ldr	r3, [r7, #16]
 800f49e:	68db      	ldr	r3, [r3, #12]
 800f4a0:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 800f4a2:	68fb      	ldr	r3, [r7, #12]
 800f4a4:	2b00      	cmp	r3, #0
 800f4a6:	d047      	beq.n	800f538 <HAL_ADC_IRQHandler+0x2d4>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 800f4a8:	6a3b      	ldr	r3, [r7, #32]
 800f4aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800f4ae:	2b00      	cmp	r3, #0
 800f4b0:	d007      	beq.n	800f4c2 <HAL_ADC_IRQHandler+0x25e>
 800f4b2:	68bb      	ldr	r3, [r7, #8]
 800f4b4:	2b00      	cmp	r3, #0
 800f4b6:	d03f      	beq.n	800f538 <HAL_ADC_IRQHandler+0x2d4>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 800f4b8:	6a3b      	ldr	r3, [r7, #32]
 800f4ba:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 800f4be:	2b00      	cmp	r3, #0
 800f4c0:	d13a      	bne.n	800f538 <HAL_ADC_IRQHandler+0x2d4>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 800f4c2:	687b      	ldr	r3, [r7, #4]
 800f4c4:	681b      	ldr	r3, [r3, #0]
 800f4c6:	681b      	ldr	r3, [r3, #0]
 800f4c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f4cc:	2b40      	cmp	r3, #64	; 0x40
 800f4ce:	d133      	bne.n	800f538 <HAL_ADC_IRQHandler+0x2d4>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 800f4d0:	6a3b      	ldr	r3, [r7, #32]
 800f4d2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800f4d6:	2b00      	cmp	r3, #0
 800f4d8:	d12e      	bne.n	800f538 <HAL_ADC_IRQHandler+0x2d4>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 800f4da:	687b      	ldr	r3, [r7, #4]
 800f4dc:	681b      	ldr	r3, [r3, #0]
 800f4de:	4618      	mov	r0, r3
 800f4e0:	f7ff fcac 	bl	800ee3c <LL_ADC_INJ_IsConversionOngoing>
 800f4e4:	4603      	mov	r3, r0
 800f4e6:	2b00      	cmp	r3, #0
 800f4e8:	d11a      	bne.n	800f520 <HAL_ADC_IRQHandler+0x2bc>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 800f4ea:	687b      	ldr	r3, [r7, #4]
 800f4ec:	681b      	ldr	r3, [r3, #0]
 800f4ee:	685a      	ldr	r2, [r3, #4]
 800f4f0:	687b      	ldr	r3, [r7, #4]
 800f4f2:	681b      	ldr	r3, [r3, #0]
 800f4f4:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800f4f8:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 800f4fa:	687b      	ldr	r3, [r7, #4]
 800f4fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f4fe:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800f502:	687b      	ldr	r3, [r7, #4]
 800f504:	659a      	str	r2, [r3, #88]	; 0x58

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 800f506:	687b      	ldr	r3, [r7, #4]
 800f508:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f50a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f50e:	2b00      	cmp	r3, #0
 800f510:	d112      	bne.n	800f538 <HAL_ADC_IRQHandler+0x2d4>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800f512:	687b      	ldr	r3, [r7, #4]
 800f514:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f516:	f043 0201 	orr.w	r2, r3, #1
 800f51a:	687b      	ldr	r3, [r7, #4]
 800f51c:	659a      	str	r2, [r3, #88]	; 0x58
 800f51e:	e00b      	b.n	800f538 <HAL_ADC_IRQHandler+0x2d4>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800f520:	687b      	ldr	r3, [r7, #4]
 800f522:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f524:	f043 0210 	orr.w	r2, r3, #16
 800f528:	687b      	ldr	r3, [r7, #4]
 800f52a:	659a      	str	r2, [r3, #88]	; 0x58

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800f52c:	687b      	ldr	r3, [r7, #4]
 800f52e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f530:	f043 0201 	orr.w	r2, r3, #1
 800f534:	687b      	ldr	r3, [r7, #4]
 800f536:	65da      	str	r2, [r3, #92]	; 0x5c
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800f538:	6878      	ldr	r0, [r7, #4]
 800f53a:	f000 fdf5 	bl	8010128 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 800f53e:	687b      	ldr	r3, [r7, #4]
 800f540:	681b      	ldr	r3, [r3, #0]
 800f542:	2260      	movs	r2, #96	; 0x60
 800f544:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 800f546:	69fb      	ldr	r3, [r7, #28]
 800f548:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f54c:	2b00      	cmp	r3, #0
 800f54e:	d011      	beq.n	800f574 <HAL_ADC_IRQHandler+0x310>
 800f550:	69bb      	ldr	r3, [r7, #24]
 800f552:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f556:	2b00      	cmp	r3, #0
 800f558:	d00c      	beq.n	800f574 <HAL_ADC_IRQHandler+0x310>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800f55a:	687b      	ldr	r3, [r7, #4]
 800f55c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f55e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800f562:	687b      	ldr	r3, [r7, #4]
 800f564:	659a      	str	r2, [r3, #88]	; 0x58

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 800f566:	6878      	ldr	r0, [r7, #4]
 800f568:	f000 f8a0 	bl	800f6ac <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 800f56c:	687b      	ldr	r3, [r7, #4]
 800f56e:	681b      	ldr	r3, [r3, #0]
 800f570:	2280      	movs	r2, #128	; 0x80
 800f572:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 800f574:	69fb      	ldr	r3, [r7, #28]
 800f576:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f57a:	2b00      	cmp	r3, #0
 800f57c:	d012      	beq.n	800f5a4 <HAL_ADC_IRQHandler+0x340>
 800f57e:	69bb      	ldr	r3, [r7, #24]
 800f580:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f584:	2b00      	cmp	r3, #0
 800f586:	d00d      	beq.n	800f5a4 <HAL_ADC_IRQHandler+0x340>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 800f588:	687b      	ldr	r3, [r7, #4]
 800f58a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f58c:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800f590:	687b      	ldr	r3, [r7, #4]
 800f592:	659a      	str	r2, [r3, #88]	; 0x58

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 800f594:	6878      	ldr	r0, [r7, #4]
 800f596:	f000 fddb 	bl	8010150 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 800f59a:	687b      	ldr	r3, [r7, #4]
 800f59c:	681b      	ldr	r3, [r3, #0]
 800f59e:	f44f 7280 	mov.w	r2, #256	; 0x100
 800f5a2:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 800f5a4:	69fb      	ldr	r3, [r7, #28]
 800f5a6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800f5aa:	2b00      	cmp	r3, #0
 800f5ac:	d012      	beq.n	800f5d4 <HAL_ADC_IRQHandler+0x370>
 800f5ae:	69bb      	ldr	r3, [r7, #24]
 800f5b0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800f5b4:	2b00      	cmp	r3, #0
 800f5b6:	d00d      	beq.n	800f5d4 <HAL_ADC_IRQHandler+0x370>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 800f5b8:	687b      	ldr	r3, [r7, #4]
 800f5ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f5bc:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800f5c0:	687b      	ldr	r3, [r7, #4]
 800f5c2:	659a      	str	r2, [r3, #88]	; 0x58

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 800f5c4:	6878      	ldr	r0, [r7, #4]
 800f5c6:	f000 fdcd 	bl	8010164 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 800f5ca:	687b      	ldr	r3, [r7, #4]
 800f5cc:	681b      	ldr	r3, [r3, #0]
 800f5ce:	f44f 7200 	mov.w	r2, #512	; 0x200
 800f5d2:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 800f5d4:	69fb      	ldr	r3, [r7, #28]
 800f5d6:	f003 0310 	and.w	r3, r3, #16
 800f5da:	2b00      	cmp	r3, #0
 800f5dc:	d036      	beq.n	800f64c <HAL_ADC_IRQHandler+0x3e8>
 800f5de:	69bb      	ldr	r3, [r7, #24]
 800f5e0:	f003 0310 	and.w	r3, r3, #16
 800f5e4:	2b00      	cmp	r3, #0
 800f5e6:	d031      	beq.n	800f64c <HAL_ADC_IRQHandler+0x3e8>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 800f5e8:	687b      	ldr	r3, [r7, #4]
 800f5ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f5ec:	2b00      	cmp	r3, #0
 800f5ee:	d102      	bne.n	800f5f6 <HAL_ADC_IRQHandler+0x392>
    {
      overrun_error = 1UL;
 800f5f0:	2301      	movs	r3, #1
 800f5f2:	627b      	str	r3, [r7, #36]	; 0x24
 800f5f4:	e014      	b.n	800f620 <HAL_ADC_IRQHandler+0x3bc>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 800f5f6:	697b      	ldr	r3, [r7, #20]
 800f5f8:	2b00      	cmp	r3, #0
 800f5fa:	d008      	beq.n	800f60e <HAL_ADC_IRQHandler+0x3aa>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 800f5fc:	4825      	ldr	r0, [pc, #148]	; (800f694 <HAL_ADC_IRQHandler+0x430>)
 800f5fe:	f7ff fb73 	bl	800ece8 <LL_ADC_GetMultiDMATransfer>
 800f602:	4603      	mov	r3, r0
 800f604:	2b00      	cmp	r3, #0
 800f606:	d00b      	beq.n	800f620 <HAL_ADC_IRQHandler+0x3bc>
        {
          overrun_error = 1UL;
 800f608:	2301      	movs	r3, #1
 800f60a:	627b      	str	r3, [r7, #36]	; 0x24
 800f60c:	e008      	b.n	800f620 <HAL_ADC_IRQHandler+0x3bc>
      }
      else
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 800f60e:	687b      	ldr	r3, [r7, #4]
 800f610:	681b      	ldr	r3, [r3, #0]
 800f612:	68db      	ldr	r3, [r3, #12]
 800f614:	f003 0301 	and.w	r3, r3, #1
 800f618:	2b00      	cmp	r3, #0
 800f61a:	d001      	beq.n	800f620 <HAL_ADC_IRQHandler+0x3bc>
        {
          overrun_error = 1UL;
 800f61c:	2301      	movs	r3, #1
 800f61e:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 800f620:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f622:	2b01      	cmp	r3, #1
 800f624:	d10e      	bne.n	800f644 <HAL_ADC_IRQHandler+0x3e0>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 800f626:	687b      	ldr	r3, [r7, #4]
 800f628:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f62a:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800f62e:	687b      	ldr	r3, [r7, #4]
 800f630:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800f632:	687b      	ldr	r3, [r7, #4]
 800f634:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f636:	f043 0202 	orr.w	r2, r3, #2
 800f63a:	687b      	ldr	r3, [r7, #4]
 800f63c:	65da      	str	r2, [r3, #92]	; 0x5c
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 800f63e:	6878      	ldr	r0, [r7, #4]
 800f640:	f000 f83e 	bl	800f6c0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800f644:	687b      	ldr	r3, [r7, #4]
 800f646:	681b      	ldr	r3, [r3, #0]
 800f648:	2210      	movs	r2, #16
 800f64a:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 800f64c:	69fb      	ldr	r3, [r7, #28]
 800f64e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800f652:	2b00      	cmp	r3, #0
 800f654:	d018      	beq.n	800f688 <HAL_ADC_IRQHandler+0x424>
 800f656:	69bb      	ldr	r3, [r7, #24]
 800f658:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800f65c:	2b00      	cmp	r3, #0
 800f65e:	d013      	beq.n	800f688 <HAL_ADC_IRQHandler+0x424>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 800f660:	687b      	ldr	r3, [r7, #4]
 800f662:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f664:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 800f668:	687b      	ldr	r3, [r7, #4]
 800f66a:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 800f66c:	687b      	ldr	r3, [r7, #4]
 800f66e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f670:	f043 0208 	orr.w	r2, r3, #8
 800f674:	687b      	ldr	r3, [r7, #4]
 800f676:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 800f678:	687b      	ldr	r3, [r7, #4]
 800f67a:	681b      	ldr	r3, [r3, #0]
 800f67c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800f680:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 800f682:	6878      	ldr	r0, [r7, #4]
 800f684:	f000 fd5a 	bl	801013c <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 800f688:	bf00      	nop
 800f68a:	3728      	adds	r7, #40	; 0x28
 800f68c:	46bd      	mov	sp, r7
 800f68e:	bd80      	pop	{r7, pc}
 800f690:	42028000 	.word	0x42028000
 800f694:	42028300 	.word	0x42028300

0800f698 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 800f698:	b480      	push	{r7}
 800f69a:	b083      	sub	sp, #12
 800f69c:	af00      	add	r7, sp, #0
 800f69e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 800f6a0:	bf00      	nop
 800f6a2:	370c      	adds	r7, #12
 800f6a4:	46bd      	mov	sp, r7
 800f6a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6aa:	4770      	bx	lr

0800f6ac <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 800f6ac:	b480      	push	{r7}
 800f6ae:	b083      	sub	sp, #12
 800f6b0:	af00      	add	r7, sp, #0
 800f6b2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 800f6b4:	bf00      	nop
 800f6b6:	370c      	adds	r7, #12
 800f6b8:	46bd      	mov	sp, r7
 800f6ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6be:	4770      	bx	lr

0800f6c0 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800f6c0:	b480      	push	{r7}
 800f6c2:	b083      	sub	sp, #12
 800f6c4:	af00      	add	r7, sp, #0
 800f6c6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 800f6c8:	bf00      	nop
 800f6ca:	370c      	adds	r7, #12
 800f6cc:	46bd      	mov	sp, r7
 800f6ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6d2:	4770      	bx	lr

0800f6d4 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 800f6d4:	b590      	push	{r4, r7, lr}
 800f6d6:	b0b7      	sub	sp, #220	; 0xdc
 800f6d8:	af00      	add	r7, sp, #0
 800f6da:	6078      	str	r0, [r7, #4]
 800f6dc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800f6de:	2300      	movs	r3, #0
 800f6e0:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 800f6e4:	2300      	movs	r3, #0
 800f6e6:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800f6e8:	687b      	ldr	r3, [r7, #4]
 800f6ea:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800f6ee:	2b01      	cmp	r3, #1
 800f6f0:	d101      	bne.n	800f6f6 <HAL_ADC_ConfigChannel+0x22>
 800f6f2:	2302      	movs	r3, #2
 800f6f4:	e3c1      	b.n	800fe7a <HAL_ADC_ConfigChannel+0x7a6>
 800f6f6:	687b      	ldr	r3, [r7, #4]
 800f6f8:	2201      	movs	r2, #1
 800f6fa:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800f6fe:	687b      	ldr	r3, [r7, #4]
 800f700:	681b      	ldr	r3, [r3, #0]
 800f702:	4618      	mov	r0, r3
 800f704:	f7ff fb87 	bl	800ee16 <LL_ADC_REG_IsConversionOngoing>
 800f708:	4603      	mov	r3, r0
 800f70a:	2b00      	cmp	r3, #0
 800f70c:	f040 83a6 	bne.w	800fe5c <HAL_ADC_ConfigChannel+0x788>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 800f710:	687b      	ldr	r3, [r7, #4]
 800f712:	6818      	ldr	r0, [r3, #0]
 800f714:	683b      	ldr	r3, [r7, #0]
 800f716:	6859      	ldr	r1, [r3, #4]
 800f718:	683b      	ldr	r3, [r7, #0]
 800f71a:	681b      	ldr	r3, [r3, #0]
 800f71c:	461a      	mov	r2, r3
 800f71e:	f7ff fa46 	bl	800ebae <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800f722:	687b      	ldr	r3, [r7, #4]
 800f724:	681b      	ldr	r3, [r3, #0]
 800f726:	4618      	mov	r0, r3
 800f728:	f7ff fb75 	bl	800ee16 <LL_ADC_REG_IsConversionOngoing>
 800f72c:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800f730:	687b      	ldr	r3, [r7, #4]
 800f732:	681b      	ldr	r3, [r3, #0]
 800f734:	4618      	mov	r0, r3
 800f736:	f7ff fb81 	bl	800ee3c <LL_ADC_INJ_IsConversionOngoing>
 800f73a:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800f73e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800f742:	2b00      	cmp	r3, #0
 800f744:	f040 81c1 	bne.w	800faca <HAL_ADC_ConfigChannel+0x3f6>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800f748:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800f74c:	2b00      	cmp	r3, #0
 800f74e:	f040 81bc 	bne.w	800faca <HAL_ADC_ConfigChannel+0x3f6>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 800f752:	683b      	ldr	r3, [r7, #0]
 800f754:	689b      	ldr	r3, [r3, #8]
 800f756:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800f75a:	d10f      	bne.n	800f77c <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 800f75c:	687b      	ldr	r3, [r7, #4]
 800f75e:	6818      	ldr	r0, [r3, #0]
 800f760:	683b      	ldr	r3, [r7, #0]
 800f762:	681b      	ldr	r3, [r3, #0]
 800f764:	2200      	movs	r2, #0
 800f766:	4619      	mov	r1, r3
 800f768:	f7ff fa60 	bl	800ec2c <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 800f76c:	687b      	ldr	r3, [r7, #4]
 800f76e:	681b      	ldr	r3, [r3, #0]
 800f770:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800f774:	4618      	mov	r0, r3
 800f776:	f7ff f9f4 	bl	800eb62 <LL_ADC_SetSamplingTimeCommonConfig>
 800f77a:	e00e      	b.n	800f79a <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 800f77c:	687b      	ldr	r3, [r7, #4]
 800f77e:	6818      	ldr	r0, [r3, #0]
 800f780:	683b      	ldr	r3, [r7, #0]
 800f782:	6819      	ldr	r1, [r3, #0]
 800f784:	683b      	ldr	r3, [r7, #0]
 800f786:	689b      	ldr	r3, [r3, #8]
 800f788:	461a      	mov	r2, r3
 800f78a:	f7ff fa4f 	bl	800ec2c <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 800f78e:	687b      	ldr	r3, [r7, #4]
 800f790:	681b      	ldr	r3, [r3, #0]
 800f792:	2100      	movs	r1, #0
 800f794:	4618      	mov	r0, r3
 800f796:	f7ff f9e4 	bl	800eb62 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 800f79a:	683b      	ldr	r3, [r7, #0]
 800f79c:	695a      	ldr	r2, [r3, #20]
 800f79e:	687b      	ldr	r3, [r7, #4]
 800f7a0:	681b      	ldr	r3, [r3, #0]
 800f7a2:	68db      	ldr	r3, [r3, #12]
 800f7a4:	08db      	lsrs	r3, r3, #3
 800f7a6:	f003 0303 	and.w	r3, r3, #3
 800f7aa:	005b      	lsls	r3, r3, #1
 800f7ac:	fa02 f303 	lsl.w	r3, r2, r3
 800f7b0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 800f7b4:	683b      	ldr	r3, [r7, #0]
 800f7b6:	691b      	ldr	r3, [r3, #16]
 800f7b8:	2b04      	cmp	r3, #4
 800f7ba:	d00a      	beq.n	800f7d2 <HAL_ADC_ConfigChannel+0xfe>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 800f7bc:	687b      	ldr	r3, [r7, #4]
 800f7be:	6818      	ldr	r0, [r3, #0]
 800f7c0:	683b      	ldr	r3, [r7, #0]
 800f7c2:	6919      	ldr	r1, [r3, #16]
 800f7c4:	683b      	ldr	r3, [r7, #0]
 800f7c6:	681a      	ldr	r2, [r3, #0]
 800f7c8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800f7cc:	f7ff f974 	bl	800eab8 <LL_ADC_SetOffset>
 800f7d0:	e17b      	b.n	800faca <HAL_ADC_ConfigChannel+0x3f6>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800f7d2:	687b      	ldr	r3, [r7, #4]
 800f7d4:	681b      	ldr	r3, [r3, #0]
 800f7d6:	2100      	movs	r1, #0
 800f7d8:	4618      	mov	r0, r3
 800f7da:	f7ff f991 	bl	800eb00 <LL_ADC_GetOffsetChannel>
 800f7de:	4603      	mov	r3, r0
 800f7e0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800f7e4:	2b00      	cmp	r3, #0
 800f7e6:	d10a      	bne.n	800f7fe <HAL_ADC_ConfigChannel+0x12a>
 800f7e8:	687b      	ldr	r3, [r7, #4]
 800f7ea:	681b      	ldr	r3, [r3, #0]
 800f7ec:	2100      	movs	r1, #0
 800f7ee:	4618      	mov	r0, r3
 800f7f0:	f7ff f986 	bl	800eb00 <LL_ADC_GetOffsetChannel>
 800f7f4:	4603      	mov	r3, r0
 800f7f6:	0e9b      	lsrs	r3, r3, #26
 800f7f8:	f003 021f 	and.w	r2, r3, #31
 800f7fc:	e01e      	b.n	800f83c <HAL_ADC_ConfigChannel+0x168>
 800f7fe:	687b      	ldr	r3, [r7, #4]
 800f800:	681b      	ldr	r3, [r3, #0]
 800f802:	2100      	movs	r1, #0
 800f804:	4618      	mov	r0, r3
 800f806:	f7ff f97b 	bl	800eb00 <LL_ADC_GetOffsetChannel>
 800f80a:	4603      	mov	r3, r0
 800f80c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800f810:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800f814:	fa93 f3a3 	rbit	r3, r3
 800f818:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800f81c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800f820:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800f824:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800f828:	2b00      	cmp	r3, #0
 800f82a:	d101      	bne.n	800f830 <HAL_ADC_ConfigChannel+0x15c>
  {
    return 32U;
 800f82c:	2320      	movs	r3, #32
 800f82e:	e004      	b.n	800f83a <HAL_ADC_ConfigChannel+0x166>
  }
  return __builtin_clz(value);
 800f830:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800f834:	fab3 f383 	clz	r3, r3
 800f838:	b2db      	uxtb	r3, r3
 800f83a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800f83c:	683b      	ldr	r3, [r7, #0]
 800f83e:	681b      	ldr	r3, [r3, #0]
 800f840:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800f844:	2b00      	cmp	r3, #0
 800f846:	d105      	bne.n	800f854 <HAL_ADC_ConfigChannel+0x180>
 800f848:	683b      	ldr	r3, [r7, #0]
 800f84a:	681b      	ldr	r3, [r3, #0]
 800f84c:	0e9b      	lsrs	r3, r3, #26
 800f84e:	f003 031f 	and.w	r3, r3, #31
 800f852:	e018      	b.n	800f886 <HAL_ADC_ConfigChannel+0x1b2>
 800f854:	683b      	ldr	r3, [r7, #0]
 800f856:	681b      	ldr	r3, [r3, #0]
 800f858:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800f85c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800f860:	fa93 f3a3 	rbit	r3, r3
 800f864:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 800f868:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800f86c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 800f870:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800f874:	2b00      	cmp	r3, #0
 800f876:	d101      	bne.n	800f87c <HAL_ADC_ConfigChannel+0x1a8>
    return 32U;
 800f878:	2320      	movs	r3, #32
 800f87a:	e004      	b.n	800f886 <HAL_ADC_ConfigChannel+0x1b2>
  return __builtin_clz(value);
 800f87c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800f880:	fab3 f383 	clz	r3, r3
 800f884:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800f886:	429a      	cmp	r2, r3
 800f888:	d106      	bne.n	800f898 <HAL_ADC_ConfigChannel+0x1c4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800f88a:	687b      	ldr	r3, [r7, #4]
 800f88c:	681b      	ldr	r3, [r3, #0]
 800f88e:	2200      	movs	r2, #0
 800f890:	2100      	movs	r1, #0
 800f892:	4618      	mov	r0, r3
 800f894:	f7ff f94a 	bl	800eb2c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800f898:	687b      	ldr	r3, [r7, #4]
 800f89a:	681b      	ldr	r3, [r3, #0]
 800f89c:	2101      	movs	r1, #1
 800f89e:	4618      	mov	r0, r3
 800f8a0:	f7ff f92e 	bl	800eb00 <LL_ADC_GetOffsetChannel>
 800f8a4:	4603      	mov	r3, r0
 800f8a6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800f8aa:	2b00      	cmp	r3, #0
 800f8ac:	d10a      	bne.n	800f8c4 <HAL_ADC_ConfigChannel+0x1f0>
 800f8ae:	687b      	ldr	r3, [r7, #4]
 800f8b0:	681b      	ldr	r3, [r3, #0]
 800f8b2:	2101      	movs	r1, #1
 800f8b4:	4618      	mov	r0, r3
 800f8b6:	f7ff f923 	bl	800eb00 <LL_ADC_GetOffsetChannel>
 800f8ba:	4603      	mov	r3, r0
 800f8bc:	0e9b      	lsrs	r3, r3, #26
 800f8be:	f003 021f 	and.w	r2, r3, #31
 800f8c2:	e01e      	b.n	800f902 <HAL_ADC_ConfigChannel+0x22e>
 800f8c4:	687b      	ldr	r3, [r7, #4]
 800f8c6:	681b      	ldr	r3, [r3, #0]
 800f8c8:	2101      	movs	r1, #1
 800f8ca:	4618      	mov	r0, r3
 800f8cc:	f7ff f918 	bl	800eb00 <LL_ADC_GetOffsetChannel>
 800f8d0:	4603      	mov	r3, r0
 800f8d2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800f8d6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800f8da:	fa93 f3a3 	rbit	r3, r3
 800f8de:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 800f8e2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800f8e6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 800f8ea:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800f8ee:	2b00      	cmp	r3, #0
 800f8f0:	d101      	bne.n	800f8f6 <HAL_ADC_ConfigChannel+0x222>
    return 32U;
 800f8f2:	2320      	movs	r3, #32
 800f8f4:	e004      	b.n	800f900 <HAL_ADC_ConfigChannel+0x22c>
  return __builtin_clz(value);
 800f8f6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800f8fa:	fab3 f383 	clz	r3, r3
 800f8fe:	b2db      	uxtb	r3, r3
 800f900:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800f902:	683b      	ldr	r3, [r7, #0]
 800f904:	681b      	ldr	r3, [r3, #0]
 800f906:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800f90a:	2b00      	cmp	r3, #0
 800f90c:	d105      	bne.n	800f91a <HAL_ADC_ConfigChannel+0x246>
 800f90e:	683b      	ldr	r3, [r7, #0]
 800f910:	681b      	ldr	r3, [r3, #0]
 800f912:	0e9b      	lsrs	r3, r3, #26
 800f914:	f003 031f 	and.w	r3, r3, #31
 800f918:	e018      	b.n	800f94c <HAL_ADC_ConfigChannel+0x278>
 800f91a:	683b      	ldr	r3, [r7, #0]
 800f91c:	681b      	ldr	r3, [r3, #0]
 800f91e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800f922:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800f926:	fa93 f3a3 	rbit	r3, r3
 800f92a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 800f92e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800f932:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 800f936:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800f93a:	2b00      	cmp	r3, #0
 800f93c:	d101      	bne.n	800f942 <HAL_ADC_ConfigChannel+0x26e>
    return 32U;
 800f93e:	2320      	movs	r3, #32
 800f940:	e004      	b.n	800f94c <HAL_ADC_ConfigChannel+0x278>
  return __builtin_clz(value);
 800f942:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800f946:	fab3 f383 	clz	r3, r3
 800f94a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800f94c:	429a      	cmp	r2, r3
 800f94e:	d106      	bne.n	800f95e <HAL_ADC_ConfigChannel+0x28a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800f950:	687b      	ldr	r3, [r7, #4]
 800f952:	681b      	ldr	r3, [r3, #0]
 800f954:	2200      	movs	r2, #0
 800f956:	2101      	movs	r1, #1
 800f958:	4618      	mov	r0, r3
 800f95a:	f7ff f8e7 	bl	800eb2c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800f95e:	687b      	ldr	r3, [r7, #4]
 800f960:	681b      	ldr	r3, [r3, #0]
 800f962:	2102      	movs	r1, #2
 800f964:	4618      	mov	r0, r3
 800f966:	f7ff f8cb 	bl	800eb00 <LL_ADC_GetOffsetChannel>
 800f96a:	4603      	mov	r3, r0
 800f96c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800f970:	2b00      	cmp	r3, #0
 800f972:	d10a      	bne.n	800f98a <HAL_ADC_ConfigChannel+0x2b6>
 800f974:	687b      	ldr	r3, [r7, #4]
 800f976:	681b      	ldr	r3, [r3, #0]
 800f978:	2102      	movs	r1, #2
 800f97a:	4618      	mov	r0, r3
 800f97c:	f7ff f8c0 	bl	800eb00 <LL_ADC_GetOffsetChannel>
 800f980:	4603      	mov	r3, r0
 800f982:	0e9b      	lsrs	r3, r3, #26
 800f984:	f003 021f 	and.w	r2, r3, #31
 800f988:	e01e      	b.n	800f9c8 <HAL_ADC_ConfigChannel+0x2f4>
 800f98a:	687b      	ldr	r3, [r7, #4]
 800f98c:	681b      	ldr	r3, [r3, #0]
 800f98e:	2102      	movs	r1, #2
 800f990:	4618      	mov	r0, r3
 800f992:	f7ff f8b5 	bl	800eb00 <LL_ADC_GetOffsetChannel>
 800f996:	4603      	mov	r3, r0
 800f998:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800f99c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800f9a0:	fa93 f3a3 	rbit	r3, r3
 800f9a4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 800f9a8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800f9ac:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 800f9b0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800f9b4:	2b00      	cmp	r3, #0
 800f9b6:	d101      	bne.n	800f9bc <HAL_ADC_ConfigChannel+0x2e8>
    return 32U;
 800f9b8:	2320      	movs	r3, #32
 800f9ba:	e004      	b.n	800f9c6 <HAL_ADC_ConfigChannel+0x2f2>
  return __builtin_clz(value);
 800f9bc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800f9c0:	fab3 f383 	clz	r3, r3
 800f9c4:	b2db      	uxtb	r3, r3
 800f9c6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800f9c8:	683b      	ldr	r3, [r7, #0]
 800f9ca:	681b      	ldr	r3, [r3, #0]
 800f9cc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800f9d0:	2b00      	cmp	r3, #0
 800f9d2:	d105      	bne.n	800f9e0 <HAL_ADC_ConfigChannel+0x30c>
 800f9d4:	683b      	ldr	r3, [r7, #0]
 800f9d6:	681b      	ldr	r3, [r3, #0]
 800f9d8:	0e9b      	lsrs	r3, r3, #26
 800f9da:	f003 031f 	and.w	r3, r3, #31
 800f9de:	e016      	b.n	800fa0e <HAL_ADC_ConfigChannel+0x33a>
 800f9e0:	683b      	ldr	r3, [r7, #0]
 800f9e2:	681b      	ldr	r3, [r3, #0]
 800f9e4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800f9e8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800f9ec:	fa93 f3a3 	rbit	r3, r3
 800f9f0:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 800f9f2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800f9f4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 800f9f8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800f9fc:	2b00      	cmp	r3, #0
 800f9fe:	d101      	bne.n	800fa04 <HAL_ADC_ConfigChannel+0x330>
    return 32U;
 800fa00:	2320      	movs	r3, #32
 800fa02:	e004      	b.n	800fa0e <HAL_ADC_ConfigChannel+0x33a>
  return __builtin_clz(value);
 800fa04:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800fa08:	fab3 f383 	clz	r3, r3
 800fa0c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800fa0e:	429a      	cmp	r2, r3
 800fa10:	d106      	bne.n	800fa20 <HAL_ADC_ConfigChannel+0x34c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800fa12:	687b      	ldr	r3, [r7, #4]
 800fa14:	681b      	ldr	r3, [r3, #0]
 800fa16:	2200      	movs	r2, #0
 800fa18:	2102      	movs	r1, #2
 800fa1a:	4618      	mov	r0, r3
 800fa1c:	f7ff f886 	bl	800eb2c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800fa20:	687b      	ldr	r3, [r7, #4]
 800fa22:	681b      	ldr	r3, [r3, #0]
 800fa24:	2103      	movs	r1, #3
 800fa26:	4618      	mov	r0, r3
 800fa28:	f7ff f86a 	bl	800eb00 <LL_ADC_GetOffsetChannel>
 800fa2c:	4603      	mov	r3, r0
 800fa2e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800fa32:	2b00      	cmp	r3, #0
 800fa34:	d10a      	bne.n	800fa4c <HAL_ADC_ConfigChannel+0x378>
 800fa36:	687b      	ldr	r3, [r7, #4]
 800fa38:	681b      	ldr	r3, [r3, #0]
 800fa3a:	2103      	movs	r1, #3
 800fa3c:	4618      	mov	r0, r3
 800fa3e:	f7ff f85f 	bl	800eb00 <LL_ADC_GetOffsetChannel>
 800fa42:	4603      	mov	r3, r0
 800fa44:	0e9b      	lsrs	r3, r3, #26
 800fa46:	f003 021f 	and.w	r2, r3, #31
 800fa4a:	e017      	b.n	800fa7c <HAL_ADC_ConfigChannel+0x3a8>
 800fa4c:	687b      	ldr	r3, [r7, #4]
 800fa4e:	681b      	ldr	r3, [r3, #0]
 800fa50:	2103      	movs	r1, #3
 800fa52:	4618      	mov	r0, r3
 800fa54:	f7ff f854 	bl	800eb00 <LL_ADC_GetOffsetChannel>
 800fa58:	4603      	mov	r3, r0
 800fa5a:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800fa5c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800fa5e:	fa93 f3a3 	rbit	r3, r3
 800fa62:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 800fa64:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800fa66:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 800fa68:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800fa6a:	2b00      	cmp	r3, #0
 800fa6c:	d101      	bne.n	800fa72 <HAL_ADC_ConfigChannel+0x39e>
    return 32U;
 800fa6e:	2320      	movs	r3, #32
 800fa70:	e003      	b.n	800fa7a <HAL_ADC_ConfigChannel+0x3a6>
  return __builtin_clz(value);
 800fa72:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800fa74:	fab3 f383 	clz	r3, r3
 800fa78:	b2db      	uxtb	r3, r3
 800fa7a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800fa7c:	683b      	ldr	r3, [r7, #0]
 800fa7e:	681b      	ldr	r3, [r3, #0]
 800fa80:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800fa84:	2b00      	cmp	r3, #0
 800fa86:	d105      	bne.n	800fa94 <HAL_ADC_ConfigChannel+0x3c0>
 800fa88:	683b      	ldr	r3, [r7, #0]
 800fa8a:	681b      	ldr	r3, [r3, #0]
 800fa8c:	0e9b      	lsrs	r3, r3, #26
 800fa8e:	f003 031f 	and.w	r3, r3, #31
 800fa92:	e011      	b.n	800fab8 <HAL_ADC_ConfigChannel+0x3e4>
 800fa94:	683b      	ldr	r3, [r7, #0]
 800fa96:	681b      	ldr	r3, [r3, #0]
 800fa98:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800fa9a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800fa9c:	fa93 f3a3 	rbit	r3, r3
 800faa0:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 800faa2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800faa4:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 800faa6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800faa8:	2b00      	cmp	r3, #0
 800faaa:	d101      	bne.n	800fab0 <HAL_ADC_ConfigChannel+0x3dc>
    return 32U;
 800faac:	2320      	movs	r3, #32
 800faae:	e003      	b.n	800fab8 <HAL_ADC_ConfigChannel+0x3e4>
  return __builtin_clz(value);
 800fab0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800fab2:	fab3 f383 	clz	r3, r3
 800fab6:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800fab8:	429a      	cmp	r2, r3
 800faba:	d106      	bne.n	800faca <HAL_ADC_ConfigChannel+0x3f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800fabc:	687b      	ldr	r3, [r7, #4]
 800fabe:	681b      	ldr	r3, [r3, #0]
 800fac0:	2200      	movs	r2, #0
 800fac2:	2103      	movs	r1, #3
 800fac4:	4618      	mov	r0, r3
 800fac6:	f7ff f831 	bl	800eb2c <LL_ADC_SetOffsetState>

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800faca:	687b      	ldr	r3, [r7, #4]
 800facc:	681b      	ldr	r3, [r3, #0]
 800face:	4618      	mov	r0, r3
 800fad0:	f7ff f97a 	bl	800edc8 <LL_ADC_IsEnabled>
 800fad4:	4603      	mov	r3, r0
 800fad6:	2b00      	cmp	r3, #0
 800fad8:	f040 81c9 	bne.w	800fe6e <HAL_ADC_ConfigChannel+0x79a>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 800fadc:	687b      	ldr	r3, [r7, #4]
 800fade:	6818      	ldr	r0, [r3, #0]
 800fae0:	683b      	ldr	r3, [r7, #0]
 800fae2:	6819      	ldr	r1, [r3, #0]
 800fae4:	683b      	ldr	r3, [r7, #0]
 800fae6:	68db      	ldr	r3, [r3, #12]
 800fae8:	461a      	mov	r2, r3
 800faea:	f7ff f8cb 	bl	800ec84 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800faee:	683b      	ldr	r3, [r7, #0]
 800faf0:	68db      	ldr	r3, [r3, #12]
 800faf2:	4a8f      	ldr	r2, [pc, #572]	; (800fd30 <HAL_ADC_ConfigChannel+0x65c>)
 800faf4:	4293      	cmp	r3, r2
 800faf6:	f040 8131 	bne.w	800fd5c <HAL_ADC_ConfigChannel+0x688>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800fafa:	687b      	ldr	r3, [r7, #4]
 800fafc:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800fafe:	683b      	ldr	r3, [r7, #0]
 800fb00:	681b      	ldr	r3, [r3, #0]
 800fb02:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800fb06:	2b00      	cmp	r3, #0
 800fb08:	d10b      	bne.n	800fb22 <HAL_ADC_ConfigChannel+0x44e>
 800fb0a:	683b      	ldr	r3, [r7, #0]
 800fb0c:	681b      	ldr	r3, [r3, #0]
 800fb0e:	0e9b      	lsrs	r3, r3, #26
 800fb10:	3301      	adds	r3, #1
 800fb12:	f003 031f 	and.w	r3, r3, #31
 800fb16:	2b09      	cmp	r3, #9
 800fb18:	bf94      	ite	ls
 800fb1a:	2301      	movls	r3, #1
 800fb1c:	2300      	movhi	r3, #0
 800fb1e:	b2db      	uxtb	r3, r3
 800fb20:	e019      	b.n	800fb56 <HAL_ADC_ConfigChannel+0x482>
 800fb22:	683b      	ldr	r3, [r7, #0]
 800fb24:	681b      	ldr	r3, [r3, #0]
 800fb26:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800fb28:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800fb2a:	fa93 f3a3 	rbit	r3, r3
 800fb2e:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 800fb30:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800fb32:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 800fb34:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800fb36:	2b00      	cmp	r3, #0
 800fb38:	d101      	bne.n	800fb3e <HAL_ADC_ConfigChannel+0x46a>
    return 32U;
 800fb3a:	2320      	movs	r3, #32
 800fb3c:	e003      	b.n	800fb46 <HAL_ADC_ConfigChannel+0x472>
  return __builtin_clz(value);
 800fb3e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800fb40:	fab3 f383 	clz	r3, r3
 800fb44:	b2db      	uxtb	r3, r3
 800fb46:	3301      	adds	r3, #1
 800fb48:	f003 031f 	and.w	r3, r3, #31
 800fb4c:	2b09      	cmp	r3, #9
 800fb4e:	bf94      	ite	ls
 800fb50:	2301      	movls	r3, #1
 800fb52:	2300      	movhi	r3, #0
 800fb54:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800fb56:	2b00      	cmp	r3, #0
 800fb58:	d079      	beq.n	800fc4e <HAL_ADC_ConfigChannel+0x57a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800fb5a:	683b      	ldr	r3, [r7, #0]
 800fb5c:	681b      	ldr	r3, [r3, #0]
 800fb5e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800fb62:	2b00      	cmp	r3, #0
 800fb64:	d107      	bne.n	800fb76 <HAL_ADC_ConfigChannel+0x4a2>
 800fb66:	683b      	ldr	r3, [r7, #0]
 800fb68:	681b      	ldr	r3, [r3, #0]
 800fb6a:	0e9b      	lsrs	r3, r3, #26
 800fb6c:	3301      	adds	r3, #1
 800fb6e:	069b      	lsls	r3, r3, #26
 800fb70:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800fb74:	e015      	b.n	800fba2 <HAL_ADC_ConfigChannel+0x4ce>
 800fb76:	683b      	ldr	r3, [r7, #0]
 800fb78:	681b      	ldr	r3, [r3, #0]
 800fb7a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800fb7c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fb7e:	fa93 f3a3 	rbit	r3, r3
 800fb82:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 800fb84:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fb86:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 800fb88:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800fb8a:	2b00      	cmp	r3, #0
 800fb8c:	d101      	bne.n	800fb92 <HAL_ADC_ConfigChannel+0x4be>
    return 32U;
 800fb8e:	2320      	movs	r3, #32
 800fb90:	e003      	b.n	800fb9a <HAL_ADC_ConfigChannel+0x4c6>
  return __builtin_clz(value);
 800fb92:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800fb94:	fab3 f383 	clz	r3, r3
 800fb98:	b2db      	uxtb	r3, r3
 800fb9a:	3301      	adds	r3, #1
 800fb9c:	069b      	lsls	r3, r3, #26
 800fb9e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800fba2:	683b      	ldr	r3, [r7, #0]
 800fba4:	681b      	ldr	r3, [r3, #0]
 800fba6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800fbaa:	2b00      	cmp	r3, #0
 800fbac:	d109      	bne.n	800fbc2 <HAL_ADC_ConfigChannel+0x4ee>
 800fbae:	683b      	ldr	r3, [r7, #0]
 800fbb0:	681b      	ldr	r3, [r3, #0]
 800fbb2:	0e9b      	lsrs	r3, r3, #26
 800fbb4:	3301      	adds	r3, #1
 800fbb6:	f003 031f 	and.w	r3, r3, #31
 800fbba:	2101      	movs	r1, #1
 800fbbc:	fa01 f303 	lsl.w	r3, r1, r3
 800fbc0:	e017      	b.n	800fbf2 <HAL_ADC_ConfigChannel+0x51e>
 800fbc2:	683b      	ldr	r3, [r7, #0]
 800fbc4:	681b      	ldr	r3, [r3, #0]
 800fbc6:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800fbc8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800fbca:	fa93 f3a3 	rbit	r3, r3
 800fbce:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 800fbd0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fbd2:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 800fbd4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fbd6:	2b00      	cmp	r3, #0
 800fbd8:	d101      	bne.n	800fbde <HAL_ADC_ConfigChannel+0x50a>
    return 32U;
 800fbda:	2320      	movs	r3, #32
 800fbdc:	e003      	b.n	800fbe6 <HAL_ADC_ConfigChannel+0x512>
  return __builtin_clz(value);
 800fbde:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fbe0:	fab3 f383 	clz	r3, r3
 800fbe4:	b2db      	uxtb	r3, r3
 800fbe6:	3301      	adds	r3, #1
 800fbe8:	f003 031f 	and.w	r3, r3, #31
 800fbec:	2101      	movs	r1, #1
 800fbee:	fa01 f303 	lsl.w	r3, r1, r3
 800fbf2:	ea42 0103 	orr.w	r1, r2, r3
 800fbf6:	683b      	ldr	r3, [r7, #0]
 800fbf8:	681b      	ldr	r3, [r3, #0]
 800fbfa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800fbfe:	2b00      	cmp	r3, #0
 800fc00:	d10a      	bne.n	800fc18 <HAL_ADC_ConfigChannel+0x544>
 800fc02:	683b      	ldr	r3, [r7, #0]
 800fc04:	681b      	ldr	r3, [r3, #0]
 800fc06:	0e9b      	lsrs	r3, r3, #26
 800fc08:	3301      	adds	r3, #1
 800fc0a:	f003 021f 	and.w	r2, r3, #31
 800fc0e:	4613      	mov	r3, r2
 800fc10:	005b      	lsls	r3, r3, #1
 800fc12:	4413      	add	r3, r2
 800fc14:	051b      	lsls	r3, r3, #20
 800fc16:	e018      	b.n	800fc4a <HAL_ADC_ConfigChannel+0x576>
 800fc18:	683b      	ldr	r3, [r7, #0]
 800fc1a:	681b      	ldr	r3, [r3, #0]
 800fc1c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800fc1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fc20:	fa93 f3a3 	rbit	r3, r3
 800fc24:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 800fc26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fc28:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 800fc2a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fc2c:	2b00      	cmp	r3, #0
 800fc2e:	d101      	bne.n	800fc34 <HAL_ADC_ConfigChannel+0x560>
    return 32U;
 800fc30:	2320      	movs	r3, #32
 800fc32:	e003      	b.n	800fc3c <HAL_ADC_ConfigChannel+0x568>
  return __builtin_clz(value);
 800fc34:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fc36:	fab3 f383 	clz	r3, r3
 800fc3a:	b2db      	uxtb	r3, r3
 800fc3c:	3301      	adds	r3, #1
 800fc3e:	f003 021f 	and.w	r2, r3, #31
 800fc42:	4613      	mov	r3, r2
 800fc44:	005b      	lsls	r3, r3, #1
 800fc46:	4413      	add	r3, r2
 800fc48:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800fc4a:	430b      	orrs	r3, r1
 800fc4c:	e081      	b.n	800fd52 <HAL_ADC_ConfigChannel+0x67e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800fc4e:	683b      	ldr	r3, [r7, #0]
 800fc50:	681b      	ldr	r3, [r3, #0]
 800fc52:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800fc56:	2b00      	cmp	r3, #0
 800fc58:	d107      	bne.n	800fc6a <HAL_ADC_ConfigChannel+0x596>
 800fc5a:	683b      	ldr	r3, [r7, #0]
 800fc5c:	681b      	ldr	r3, [r3, #0]
 800fc5e:	0e9b      	lsrs	r3, r3, #26
 800fc60:	3301      	adds	r3, #1
 800fc62:	069b      	lsls	r3, r3, #26
 800fc64:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800fc68:	e015      	b.n	800fc96 <HAL_ADC_ConfigChannel+0x5c2>
 800fc6a:	683b      	ldr	r3, [r7, #0]
 800fc6c:	681b      	ldr	r3, [r3, #0]
 800fc6e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800fc70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fc72:	fa93 f3a3 	rbit	r3, r3
 800fc76:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 800fc78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fc7a:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 800fc7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fc7e:	2b00      	cmp	r3, #0
 800fc80:	d101      	bne.n	800fc86 <HAL_ADC_ConfigChannel+0x5b2>
    return 32U;
 800fc82:	2320      	movs	r3, #32
 800fc84:	e003      	b.n	800fc8e <HAL_ADC_ConfigChannel+0x5ba>
  return __builtin_clz(value);
 800fc86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fc88:	fab3 f383 	clz	r3, r3
 800fc8c:	b2db      	uxtb	r3, r3
 800fc8e:	3301      	adds	r3, #1
 800fc90:	069b      	lsls	r3, r3, #26
 800fc92:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800fc96:	683b      	ldr	r3, [r7, #0]
 800fc98:	681b      	ldr	r3, [r3, #0]
 800fc9a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800fc9e:	2b00      	cmp	r3, #0
 800fca0:	d109      	bne.n	800fcb6 <HAL_ADC_ConfigChannel+0x5e2>
 800fca2:	683b      	ldr	r3, [r7, #0]
 800fca4:	681b      	ldr	r3, [r3, #0]
 800fca6:	0e9b      	lsrs	r3, r3, #26
 800fca8:	3301      	adds	r3, #1
 800fcaa:	f003 031f 	and.w	r3, r3, #31
 800fcae:	2101      	movs	r1, #1
 800fcb0:	fa01 f303 	lsl.w	r3, r1, r3
 800fcb4:	e017      	b.n	800fce6 <HAL_ADC_ConfigChannel+0x612>
 800fcb6:	683b      	ldr	r3, [r7, #0]
 800fcb8:	681b      	ldr	r3, [r3, #0]
 800fcba:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800fcbc:	6a3b      	ldr	r3, [r7, #32]
 800fcbe:	fa93 f3a3 	rbit	r3, r3
 800fcc2:	61fb      	str	r3, [r7, #28]
  return result;
 800fcc4:	69fb      	ldr	r3, [r7, #28]
 800fcc6:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800fcc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fcca:	2b00      	cmp	r3, #0
 800fccc:	d101      	bne.n	800fcd2 <HAL_ADC_ConfigChannel+0x5fe>
    return 32U;
 800fcce:	2320      	movs	r3, #32
 800fcd0:	e003      	b.n	800fcda <HAL_ADC_ConfigChannel+0x606>
  return __builtin_clz(value);
 800fcd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fcd4:	fab3 f383 	clz	r3, r3
 800fcd8:	b2db      	uxtb	r3, r3
 800fcda:	3301      	adds	r3, #1
 800fcdc:	f003 031f 	and.w	r3, r3, #31
 800fce0:	2101      	movs	r1, #1
 800fce2:	fa01 f303 	lsl.w	r3, r1, r3
 800fce6:	ea42 0103 	orr.w	r1, r2, r3
 800fcea:	683b      	ldr	r3, [r7, #0]
 800fcec:	681b      	ldr	r3, [r3, #0]
 800fcee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800fcf2:	2b00      	cmp	r3, #0
 800fcf4:	d10d      	bne.n	800fd12 <HAL_ADC_ConfigChannel+0x63e>
 800fcf6:	683b      	ldr	r3, [r7, #0]
 800fcf8:	681b      	ldr	r3, [r3, #0]
 800fcfa:	0e9b      	lsrs	r3, r3, #26
 800fcfc:	3301      	adds	r3, #1
 800fcfe:	f003 021f 	and.w	r2, r3, #31
 800fd02:	4613      	mov	r3, r2
 800fd04:	005b      	lsls	r3, r3, #1
 800fd06:	4413      	add	r3, r2
 800fd08:	3b1e      	subs	r3, #30
 800fd0a:	051b      	lsls	r3, r3, #20
 800fd0c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800fd10:	e01e      	b.n	800fd50 <HAL_ADC_ConfigChannel+0x67c>
 800fd12:	683b      	ldr	r3, [r7, #0]
 800fd14:	681b      	ldr	r3, [r3, #0]
 800fd16:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800fd18:	697b      	ldr	r3, [r7, #20]
 800fd1a:	fa93 f3a3 	rbit	r3, r3
 800fd1e:	613b      	str	r3, [r7, #16]
  return result;
 800fd20:	693b      	ldr	r3, [r7, #16]
 800fd22:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800fd24:	69bb      	ldr	r3, [r7, #24]
 800fd26:	2b00      	cmp	r3, #0
 800fd28:	d104      	bne.n	800fd34 <HAL_ADC_ConfigChannel+0x660>
    return 32U;
 800fd2a:	2320      	movs	r3, #32
 800fd2c:	e006      	b.n	800fd3c <HAL_ADC_ConfigChannel+0x668>
 800fd2e:	bf00      	nop
 800fd30:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 800fd34:	69bb      	ldr	r3, [r7, #24]
 800fd36:	fab3 f383 	clz	r3, r3
 800fd3a:	b2db      	uxtb	r3, r3
 800fd3c:	3301      	adds	r3, #1
 800fd3e:	f003 021f 	and.w	r2, r3, #31
 800fd42:	4613      	mov	r3, r2
 800fd44:	005b      	lsls	r3, r3, #1
 800fd46:	4413      	add	r3, r2
 800fd48:	3b1e      	subs	r3, #30
 800fd4a:	051b      	lsls	r3, r3, #20
 800fd4c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800fd50:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 800fd52:	683a      	ldr	r2, [r7, #0]
 800fd54:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800fd56:	4619      	mov	r1, r3
 800fd58:	f7fe ff68 	bl	800ec2c <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 800fd5c:	683b      	ldr	r3, [r7, #0]
 800fd5e:	681a      	ldr	r2, [r3, #0]
 800fd60:	4b48      	ldr	r3, [pc, #288]	; (800fe84 <HAL_ADC_ConfigChannel+0x7b0>)
 800fd62:	4013      	ands	r3, r2
 800fd64:	2b00      	cmp	r3, #0
 800fd66:	f000 8082 	beq.w	800fe6e <HAL_ADC_ConfigChannel+0x79a>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800fd6a:	4847      	ldr	r0, [pc, #284]	; (800fe88 <HAL_ADC_ConfigChannel+0x7b4>)
 800fd6c:	f7fe fe96 	bl	800ea9c <LL_ADC_GetCommonPathInternalCh>
 800fd70:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800fd74:	4845      	ldr	r0, [pc, #276]	; (800fe8c <HAL_ADC_ConfigChannel+0x7b8>)
 800fd76:	f7ff f827 	bl	800edc8 <LL_ADC_IsEnabled>
 800fd7a:	4604      	mov	r4, r0
 800fd7c:	4844      	ldr	r0, [pc, #272]	; (800fe90 <HAL_ADC_ConfigChannel+0x7bc>)
 800fd7e:	f7ff f823 	bl	800edc8 <LL_ADC_IsEnabled>
 800fd82:	4603      	mov	r3, r0
 800fd84:	4323      	orrs	r3, r4
 800fd86:	2b00      	cmp	r3, #0
 800fd88:	d15e      	bne.n	800fe48 <HAL_ADC_ConfigChannel+0x774>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800fd8a:	683b      	ldr	r3, [r7, #0]
 800fd8c:	681b      	ldr	r3, [r3, #0]
 800fd8e:	4a41      	ldr	r2, [pc, #260]	; (800fe94 <HAL_ADC_ConfigChannel+0x7c0>)
 800fd90:	4293      	cmp	r3, r2
 800fd92:	d127      	bne.n	800fde4 <HAL_ADC_ConfigChannel+0x710>
              && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800fd94:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800fd98:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800fd9c:	2b00      	cmp	r3, #0
 800fd9e:	d121      	bne.n	800fde4 <HAL_ADC_ConfigChannel+0x710>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800fda0:	687b      	ldr	r3, [r7, #4]
 800fda2:	681b      	ldr	r3, [r3, #0]
 800fda4:	4a39      	ldr	r2, [pc, #228]	; (800fe8c <HAL_ADC_ConfigChannel+0x7b8>)
 800fda6:	4293      	cmp	r3, r2
 800fda8:	d161      	bne.n	800fe6e <HAL_ADC_ConfigChannel+0x79a>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800fdaa:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800fdae:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800fdb2:	4619      	mov	r1, r3
 800fdb4:	4834      	ldr	r0, [pc, #208]	; (800fe88 <HAL_ADC_ConfigChannel+0x7b4>)
 800fdb6:	f7fe fe5e 	bl	800ea76 <LL_ADC_SetCommonPathInternalCh>
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL)
                                 * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800fdba:	4b37      	ldr	r3, [pc, #220]	; (800fe98 <HAL_ADC_ConfigChannel+0x7c4>)
 800fdbc:	681b      	ldr	r3, [r3, #0]
 800fdbe:	099b      	lsrs	r3, r3, #6
 800fdc0:	4a36      	ldr	r2, [pc, #216]	; (800fe9c <HAL_ADC_ConfigChannel+0x7c8>)
 800fdc2:	fba2 2303 	umull	r2, r3, r2, r3
 800fdc6:	099b      	lsrs	r3, r3, #6
 800fdc8:	1c5a      	adds	r2, r3, #1
 800fdca:	4613      	mov	r3, r2
 800fdcc:	005b      	lsls	r3, r3, #1
 800fdce:	4413      	add	r3, r2
 800fdd0:	009b      	lsls	r3, r3, #2
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL)
 800fdd2:	60fb      	str	r3, [r7, #12]
              while(wait_loop_index != 0UL)
 800fdd4:	e002      	b.n	800fddc <HAL_ADC_ConfigChannel+0x708>
              {
                wait_loop_index--;
 800fdd6:	68fb      	ldr	r3, [r7, #12]
 800fdd8:	3b01      	subs	r3, #1
 800fdda:	60fb      	str	r3, [r7, #12]
              while(wait_loop_index != 0UL)
 800fddc:	68fb      	ldr	r3, [r7, #12]
 800fdde:	2b00      	cmp	r3, #0
 800fde0:	d1f9      	bne.n	800fdd6 <HAL_ADC_ConfigChannel+0x702>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800fde2:	e044      	b.n	800fe6e <HAL_ADC_ConfigChannel+0x79a>
              }
            }
          }
          else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 800fde4:	683b      	ldr	r3, [r7, #0]
 800fde6:	681b      	ldr	r3, [r3, #0]
 800fde8:	4a2d      	ldr	r2, [pc, #180]	; (800fea0 <HAL_ADC_ConfigChannel+0x7cc>)
 800fdea:	4293      	cmp	r3, r2
 800fdec:	d113      	bne.n	800fe16 <HAL_ADC_ConfigChannel+0x742>
                   && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800fdee:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800fdf2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800fdf6:	2b00      	cmp	r3, #0
 800fdf8:	d10d      	bne.n	800fe16 <HAL_ADC_ConfigChannel+0x742>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800fdfa:	687b      	ldr	r3, [r7, #4]
 800fdfc:	681b      	ldr	r3, [r3, #0]
 800fdfe:	4a23      	ldr	r2, [pc, #140]	; (800fe8c <HAL_ADC_ConfigChannel+0x7b8>)
 800fe00:	4293      	cmp	r3, r2
 800fe02:	d134      	bne.n	800fe6e <HAL_ADC_ConfigChannel+0x79a>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800fe04:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800fe08:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800fe0c:	4619      	mov	r1, r3
 800fe0e:	481e      	ldr	r0, [pc, #120]	; (800fe88 <HAL_ADC_ConfigChannel+0x7b4>)
 800fe10:	f7fe fe31 	bl	800ea76 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800fe14:	e02b      	b.n	800fe6e <HAL_ADC_ConfigChannel+0x79a>
                                             LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
            }
          }
          else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 800fe16:	683b      	ldr	r3, [r7, #0]
 800fe18:	681b      	ldr	r3, [r3, #0]
 800fe1a:	4a22      	ldr	r2, [pc, #136]	; (800fea4 <HAL_ADC_ConfigChannel+0x7d0>)
 800fe1c:	4293      	cmp	r3, r2
 800fe1e:	d126      	bne.n	800fe6e <HAL_ADC_ConfigChannel+0x79a>
                   && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800fe20:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800fe24:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800fe28:	2b00      	cmp	r3, #0
 800fe2a:	d120      	bne.n	800fe6e <HAL_ADC_ConfigChannel+0x79a>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 800fe2c:	687b      	ldr	r3, [r7, #4]
 800fe2e:	681b      	ldr	r3, [r3, #0]
 800fe30:	4a16      	ldr	r2, [pc, #88]	; (800fe8c <HAL_ADC_ConfigChannel+0x7b8>)
 800fe32:	4293      	cmp	r3, r2
 800fe34:	d11b      	bne.n	800fe6e <HAL_ADC_ConfigChannel+0x79a>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800fe36:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800fe3a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800fe3e:	4619      	mov	r1, r3
 800fe40:	4811      	ldr	r0, [pc, #68]	; (800fe88 <HAL_ADC_ConfigChannel+0x7b4>)
 800fe42:	f7fe fe18 	bl	800ea76 <LL_ADC_SetCommonPathInternalCh>
 800fe46:	e012      	b.n	800fe6e <HAL_ADC_ConfigChannel+0x79a>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800fe48:	687b      	ldr	r3, [r7, #4]
 800fe4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800fe4c:	f043 0220 	orr.w	r2, r3, #32
 800fe50:	687b      	ldr	r3, [r7, #4]
 800fe52:	659a      	str	r2, [r3, #88]	; 0x58

          tmp_hal_status = HAL_ERROR;
 800fe54:	2301      	movs	r3, #1
 800fe56:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 800fe5a:	e008      	b.n	800fe6e <HAL_ADC_ConfigChannel+0x79a>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800fe5c:	687b      	ldr	r3, [r7, #4]
 800fe5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800fe60:	f043 0220 	orr.w	r2, r3, #32
 800fe64:	687b      	ldr	r3, [r7, #4]
 800fe66:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800fe68:	2301      	movs	r3, #1
 800fe6a:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800fe6e:	687b      	ldr	r3, [r7, #4]
 800fe70:	2200      	movs	r2, #0
 800fe72:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 800fe76:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 800fe7a:	4618      	mov	r0, r3
 800fe7c:	37dc      	adds	r7, #220	; 0xdc
 800fe7e:	46bd      	mov	sp, r7
 800fe80:	bd90      	pop	{r4, r7, pc}
 800fe82:	bf00      	nop
 800fe84:	80080000 	.word	0x80080000
 800fe88:	42028300 	.word	0x42028300
 800fe8c:	42028000 	.word	0x42028000
 800fe90:	42028100 	.word	0x42028100
 800fe94:	c7520000 	.word	0xc7520000
 800fe98:	20000090 	.word	0x20000090
 800fe9c:	053e2d63 	.word	0x053e2d63
 800fea0:	cb840000 	.word	0xcb840000
 800fea4:	80000001 	.word	0x80000001

0800fea8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800fea8:	b580      	push	{r7, lr}
 800feaa:	b084      	sub	sp, #16
 800feac:	af00      	add	r7, sp, #0
 800feae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 800feb0:	2300      	movs	r3, #0
 800feb2:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800feb4:	687b      	ldr	r3, [r7, #4]
 800feb6:	681b      	ldr	r3, [r3, #0]
 800feb8:	4618      	mov	r0, r3
 800feba:	f7fe ff85 	bl	800edc8 <LL_ADC_IsEnabled>
 800febe:	4603      	mov	r3, r0
 800fec0:	2b00      	cmp	r3, #0
 800fec2:	d169      	bne.n	800ff98 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 800fec4:	687b      	ldr	r3, [r7, #4]
 800fec6:	681b      	ldr	r3, [r3, #0]
 800fec8:	689a      	ldr	r2, [r3, #8]
 800feca:	4b36      	ldr	r3, [pc, #216]	; (800ffa4 <ADC_Enable+0xfc>)
 800fecc:	4013      	ands	r3, r2
 800fece:	2b00      	cmp	r3, #0
 800fed0:	d00d      	beq.n	800feee <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800fed2:	687b      	ldr	r3, [r7, #4]
 800fed4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800fed6:	f043 0210 	orr.w	r2, r3, #16
 800feda:	687b      	ldr	r3, [r7, #4]
 800fedc:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800fede:	687b      	ldr	r3, [r7, #4]
 800fee0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800fee2:	f043 0201 	orr.w	r2, r3, #1
 800fee6:	687b      	ldr	r3, [r7, #4]
 800fee8:	65da      	str	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 800feea:	2301      	movs	r3, #1
 800feec:	e055      	b.n	800ff9a <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800feee:	687b      	ldr	r3, [r7, #4]
 800fef0:	681b      	ldr	r3, [r3, #0]
 800fef2:	4618      	mov	r0, r3
 800fef4:	f7fe ff54 	bl	800eda0 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 800fef8:	482b      	ldr	r0, [pc, #172]	; (800ffa8 <ADC_Enable+0x100>)
 800fefa:	f7fe fdcf 	bl	800ea9c <LL_ADC_GetCommonPathInternalCh>
 800fefe:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 800ff00:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 800ff04:	2b00      	cmp	r3, #0
 800ff06:	d013      	beq.n	800ff30 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800ff08:	4b28      	ldr	r3, [pc, #160]	; (800ffac <ADC_Enable+0x104>)
 800ff0a:	681b      	ldr	r3, [r3, #0]
 800ff0c:	099b      	lsrs	r3, r3, #6
 800ff0e:	4a28      	ldr	r2, [pc, #160]	; (800ffb0 <ADC_Enable+0x108>)
 800ff10:	fba2 2303 	umull	r2, r3, r2, r3
 800ff14:	099b      	lsrs	r3, r3, #6
 800ff16:	1c5a      	adds	r2, r3, #1
 800ff18:	4613      	mov	r3, r2
 800ff1a:	005b      	lsls	r3, r3, #1
 800ff1c:	4413      	add	r3, r2
 800ff1e:	009b      	lsls	r3, r3, #2
 800ff20:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800ff22:	e002      	b.n	800ff2a <ADC_Enable+0x82>
      {
        wait_loop_index--;
 800ff24:	68bb      	ldr	r3, [r7, #8]
 800ff26:	3b01      	subs	r3, #1
 800ff28:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800ff2a:	68bb      	ldr	r3, [r7, #8]
 800ff2c:	2b00      	cmp	r3, #0
 800ff2e:	d1f9      	bne.n	800ff24 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 800ff30:	f7fe fd82 	bl	800ea38 <HAL_GetTick>
 800ff34:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800ff36:	e028      	b.n	800ff8a <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800ff38:	687b      	ldr	r3, [r7, #4]
 800ff3a:	681b      	ldr	r3, [r3, #0]
 800ff3c:	4618      	mov	r0, r3
 800ff3e:	f7fe ff43 	bl	800edc8 <LL_ADC_IsEnabled>
 800ff42:	4603      	mov	r3, r0
 800ff44:	2b00      	cmp	r3, #0
 800ff46:	d104      	bne.n	800ff52 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 800ff48:	687b      	ldr	r3, [r7, #4]
 800ff4a:	681b      	ldr	r3, [r3, #0]
 800ff4c:	4618      	mov	r0, r3
 800ff4e:	f7fe ff27 	bl	800eda0 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800ff52:	f7fe fd71 	bl	800ea38 <HAL_GetTick>
 800ff56:	4602      	mov	r2, r0
 800ff58:	68fb      	ldr	r3, [r7, #12]
 800ff5a:	1ad3      	subs	r3, r2, r3
 800ff5c:	2b02      	cmp	r3, #2
 800ff5e:	d914      	bls.n	800ff8a <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800ff60:	687b      	ldr	r3, [r7, #4]
 800ff62:	681b      	ldr	r3, [r3, #0]
 800ff64:	681b      	ldr	r3, [r3, #0]
 800ff66:	f003 0301 	and.w	r3, r3, #1
 800ff6a:	2b01      	cmp	r3, #1
 800ff6c:	d00d      	beq.n	800ff8a <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800ff6e:	687b      	ldr	r3, [r7, #4]
 800ff70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ff72:	f043 0210 	orr.w	r2, r3, #16
 800ff76:	687b      	ldr	r3, [r7, #4]
 800ff78:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800ff7a:	687b      	ldr	r3, [r7, #4]
 800ff7c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ff7e:	f043 0201 	orr.w	r2, r3, #1
 800ff82:	687b      	ldr	r3, [r7, #4]
 800ff84:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 800ff86:	2301      	movs	r3, #1
 800ff88:	e007      	b.n	800ff9a <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800ff8a:	687b      	ldr	r3, [r7, #4]
 800ff8c:	681b      	ldr	r3, [r3, #0]
 800ff8e:	681b      	ldr	r3, [r3, #0]
 800ff90:	f003 0301 	and.w	r3, r3, #1
 800ff94:	2b01      	cmp	r3, #1
 800ff96:	d1cf      	bne.n	800ff38 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800ff98:	2300      	movs	r3, #0
}
 800ff9a:	4618      	mov	r0, r3
 800ff9c:	3710      	adds	r7, #16
 800ff9e:	46bd      	mov	sp, r7
 800ffa0:	bd80      	pop	{r7, pc}
 800ffa2:	bf00      	nop
 800ffa4:	8000003f 	.word	0x8000003f
 800ffa8:	42028300 	.word	0x42028300
 800ffac:	20000090 	.word	0x20000090
 800ffb0:	053e2d63 	.word	0x053e2d63

0800ffb4 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800ffb4:	b580      	push	{r7, lr}
 800ffb6:	b084      	sub	sp, #16
 800ffb8:	af00      	add	r7, sp, #0
 800ffba:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ffbc:	687b      	ldr	r3, [r7, #4]
 800ffbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ffc0:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 800ffc2:	68fb      	ldr	r3, [r7, #12]
 800ffc4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ffc6:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800ffca:	2b00      	cmp	r3, #0
 800ffcc:	d14b      	bne.n	8010066 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800ffce:	68fb      	ldr	r3, [r7, #12]
 800ffd0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ffd2:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800ffd6:	68fb      	ldr	r3, [r7, #12]
 800ffd8:	659a      	str	r2, [r3, #88]	; 0x58

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 800ffda:	68fb      	ldr	r3, [r7, #12]
 800ffdc:	681b      	ldr	r3, [r3, #0]
 800ffde:	681b      	ldr	r3, [r3, #0]
 800ffe0:	f003 0308 	and.w	r3, r3, #8
 800ffe4:	2b00      	cmp	r3, #0
 800ffe6:	d021      	beq.n	801002c <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800ffe8:	68fb      	ldr	r3, [r7, #12]
 800ffea:	681b      	ldr	r3, [r3, #0]
 800ffec:	4618      	mov	r0, r3
 800ffee:	f7fe fdcb 	bl	800eb88 <LL_ADC_REG_IsTriggerSourceSWStart>
 800fff2:	4603      	mov	r3, r0
 800fff4:	2b00      	cmp	r3, #0
 800fff6:	d032      	beq.n	801005e <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 800fff8:	68fb      	ldr	r3, [r7, #12]
 800fffa:	681b      	ldr	r3, [r3, #0]
 800fffc:	68db      	ldr	r3, [r3, #12]
 800fffe:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8010002:	2b00      	cmp	r3, #0
 8010004:	d12b      	bne.n	801005e <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8010006:	68fb      	ldr	r3, [r7, #12]
 8010008:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801000a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 801000e:	68fb      	ldr	r3, [r7, #12]
 8010010:	659a      	str	r2, [r3, #88]	; 0x58
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8010012:	68fb      	ldr	r3, [r7, #12]
 8010014:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010016:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 801001a:	2b00      	cmp	r3, #0
 801001c:	d11f      	bne.n	801005e <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 801001e:	68fb      	ldr	r3, [r7, #12]
 8010020:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010022:	f043 0201 	orr.w	r2, r3, #1
 8010026:	68fb      	ldr	r3, [r7, #12]
 8010028:	659a      	str	r2, [r3, #88]	; 0x58
 801002a:	e018      	b.n	801005e <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 801002c:	68fb      	ldr	r3, [r7, #12]
 801002e:	681b      	ldr	r3, [r3, #0]
 8010030:	68db      	ldr	r3, [r3, #12]
 8010032:	f003 0302 	and.w	r3, r3, #2
 8010036:	2b00      	cmp	r3, #0
 8010038:	d111      	bne.n	801005e <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 801003a:	68fb      	ldr	r3, [r7, #12]
 801003c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801003e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8010042:	68fb      	ldr	r3, [r7, #12]
 8010044:	659a      	str	r2, [r3, #88]	; 0x58
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8010046:	68fb      	ldr	r3, [r7, #12]
 8010048:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801004a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 801004e:	2b00      	cmp	r3, #0
 8010050:	d105      	bne.n	801005e <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8010052:	68fb      	ldr	r3, [r7, #12]
 8010054:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010056:	f043 0201 	orr.w	r2, r3, #1
 801005a:	68fb      	ldr	r3, [r7, #12]
 801005c:	659a      	str	r2, [r3, #88]	; 0x58

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 801005e:	68f8      	ldr	r0, [r7, #12]
 8010060:	f7f0 ff4c 	bl	8000efc <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8010064:	e00e      	b.n	8010084 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8010066:	68fb      	ldr	r3, [r7, #12]
 8010068:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801006a:	f003 0310 	and.w	r3, r3, #16
 801006e:	2b00      	cmp	r3, #0
 8010070:	d003      	beq.n	801007a <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8010072:	68f8      	ldr	r0, [r7, #12]
 8010074:	f7ff fb24 	bl	800f6c0 <HAL_ADC_ErrorCallback>
}
 8010078:	e004      	b.n	8010084 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 801007a:	68fb      	ldr	r3, [r7, #12]
 801007c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801007e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010080:	6878      	ldr	r0, [r7, #4]
 8010082:	4798      	blx	r3
}
 8010084:	bf00      	nop
 8010086:	3710      	adds	r7, #16
 8010088:	46bd      	mov	sp, r7
 801008a:	bd80      	pop	{r7, pc}

0801008c <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 801008c:	b580      	push	{r7, lr}
 801008e:	b084      	sub	sp, #16
 8010090:	af00      	add	r7, sp, #0
 8010092:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8010094:	687b      	ldr	r3, [r7, #4]
 8010096:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010098:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 801009a:	68f8      	ldr	r0, [r7, #12]
 801009c:	f7ff fafc 	bl	800f698 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80100a0:	bf00      	nop
 80100a2:	3710      	adds	r7, #16
 80100a4:	46bd      	mov	sp, r7
 80100a6:	bd80      	pop	{r7, pc}

080100a8 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80100a8:	b580      	push	{r7, lr}
 80100aa:	b084      	sub	sp, #16
 80100ac:	af00      	add	r7, sp, #0
 80100ae:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80100b0:	687b      	ldr	r3, [r7, #4]
 80100b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80100b4:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80100b6:	68fb      	ldr	r3, [r7, #12]
 80100b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80100ba:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80100be:	68fb      	ldr	r3, [r7, #12]
 80100c0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80100c2:	68fb      	ldr	r3, [r7, #12]
 80100c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80100c6:	f043 0204 	orr.w	r2, r3, #4
 80100ca:	68fb      	ldr	r3, [r7, #12]
 80100cc:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80100ce:	68f8      	ldr	r0, [r7, #12]
 80100d0:	f7ff faf6 	bl	800f6c0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80100d4:	bf00      	nop
 80100d6:	3710      	adds	r7, #16
 80100d8:	46bd      	mov	sp, r7
 80100da:	bd80      	pop	{r7, pc}

080100dc <LL_ADC_IsEnabled>:
{
 80100dc:	b480      	push	{r7}
 80100de:	b083      	sub	sp, #12
 80100e0:	af00      	add	r7, sp, #0
 80100e2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80100e4:	687b      	ldr	r3, [r7, #4]
 80100e6:	689b      	ldr	r3, [r3, #8]
 80100e8:	f003 0301 	and.w	r3, r3, #1
 80100ec:	2b01      	cmp	r3, #1
 80100ee:	d101      	bne.n	80100f4 <LL_ADC_IsEnabled+0x18>
 80100f0:	2301      	movs	r3, #1
 80100f2:	e000      	b.n	80100f6 <LL_ADC_IsEnabled+0x1a>
 80100f4:	2300      	movs	r3, #0
}
 80100f6:	4618      	mov	r0, r3
 80100f8:	370c      	adds	r7, #12
 80100fa:	46bd      	mov	sp, r7
 80100fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010100:	4770      	bx	lr

08010102 <LL_ADC_REG_IsConversionOngoing>:
{
 8010102:	b480      	push	{r7}
 8010104:	b083      	sub	sp, #12
 8010106:	af00      	add	r7, sp, #0
 8010108:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 801010a:	687b      	ldr	r3, [r7, #4]
 801010c:	689b      	ldr	r3, [r3, #8]
 801010e:	f003 0304 	and.w	r3, r3, #4
 8010112:	2b04      	cmp	r3, #4
 8010114:	d101      	bne.n	801011a <LL_ADC_REG_IsConversionOngoing+0x18>
 8010116:	2301      	movs	r3, #1
 8010118:	e000      	b.n	801011c <LL_ADC_REG_IsConversionOngoing+0x1a>
 801011a:	2300      	movs	r3, #0
}
 801011c:	4618      	mov	r0, r3
 801011e:	370c      	adds	r7, #12
 8010120:	46bd      	mov	sp, r7
 8010122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010126:	4770      	bx	lr

08010128 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8010128:	b480      	push	{r7}
 801012a:	b083      	sub	sp, #12
 801012c:	af00      	add	r7, sp, #0
 801012e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8010130:	bf00      	nop
 8010132:	370c      	adds	r7, #12
 8010134:	46bd      	mov	sp, r7
 8010136:	f85d 7b04 	ldr.w	r7, [sp], #4
 801013a:	4770      	bx	lr

0801013c <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 801013c:	b480      	push	{r7}
 801013e:	b083      	sub	sp, #12
 8010140:	af00      	add	r7, sp, #0
 8010142:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8010144:	bf00      	nop
 8010146:	370c      	adds	r7, #12
 8010148:	46bd      	mov	sp, r7
 801014a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801014e:	4770      	bx	lr

08010150 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8010150:	b480      	push	{r7}
 8010152:	b083      	sub	sp, #12
 8010154:	af00      	add	r7, sp, #0
 8010156:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8010158:	bf00      	nop
 801015a:	370c      	adds	r7, #12
 801015c:	46bd      	mov	sp, r7
 801015e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010162:	4770      	bx	lr

08010164 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8010164:	b480      	push	{r7}
 8010166:	b083      	sub	sp, #12
 8010168:	af00      	add	r7, sp, #0
 801016a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 801016c:	bf00      	nop
 801016e:	370c      	adds	r7, #12
 8010170:	46bd      	mov	sp, r7
 8010172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010176:	4770      	bx	lr

08010178 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8010178:	b480      	push	{r7}
 801017a:	b083      	sub	sp, #12
 801017c:	af00      	add	r7, sp, #0
 801017e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8010180:	bf00      	nop
 8010182:	370c      	adds	r7, #12
 8010184:	46bd      	mov	sp, r7
 8010186:	f85d 7b04 	ldr.w	r7, [sp], #4
 801018a:	4770      	bx	lr

0801018c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 801018c:	b590      	push	{r4, r7, lr}
 801018e:	b0a1      	sub	sp, #132	; 0x84
 8010190:	af00      	add	r7, sp, #0
 8010192:	6078      	str	r0, [r7, #4]
 8010194:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8010196:	2300      	movs	r3, #0
 8010198:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 801019c:	687b      	ldr	r3, [r7, #4]
 801019e:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80101a2:	2b01      	cmp	r3, #1
 80101a4:	d101      	bne.n	80101aa <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80101a6:	2302      	movs	r3, #2
 80101a8:	e089      	b.n	80102be <HAL_ADCEx_MultiModeConfigChannel+0x132>
 80101aa:	687b      	ldr	r3, [r7, #4]
 80101ac:	2201      	movs	r2, #1
 80101ae:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 80101b2:	2300      	movs	r3, #0
 80101b4:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 80101b6:	2300      	movs	r3, #0
 80101b8:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 80101ba:	687b      	ldr	r3, [r7, #4]
 80101bc:	681b      	ldr	r3, [r3, #0]
 80101be:	4a42      	ldr	r2, [pc, #264]	; (80102c8 <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 80101c0:	4293      	cmp	r3, r2
 80101c2:	d102      	bne.n	80101ca <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80101c4:	4b41      	ldr	r3, [pc, #260]	; (80102cc <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 80101c6:	60fb      	str	r3, [r7, #12]
 80101c8:	e001      	b.n	80101ce <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80101ca:	2300      	movs	r3, #0
 80101cc:	60fb      	str	r3, [r7, #12]

  if (tmp_hadc_slave.Instance == NULL)
 80101ce:	68fb      	ldr	r3, [r7, #12]
 80101d0:	2b00      	cmp	r3, #0
 80101d2:	d10b      	bne.n	80101ec <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80101d4:	687b      	ldr	r3, [r7, #4]
 80101d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80101d8:	f043 0220 	orr.w	r2, r3, #32
 80101dc:	687b      	ldr	r3, [r7, #4]
 80101de:	659a      	str	r2, [r3, #88]	; 0x58

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80101e0:	687b      	ldr	r3, [r7, #4]
 80101e2:	2200      	movs	r2, #0
 80101e4:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    return HAL_ERROR;
 80101e8:	2301      	movs	r3, #1
 80101ea:	e068      	b.n	80102be <HAL_ADCEx_MultiModeConfigChannel+0x132>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 80101ec:	68fb      	ldr	r3, [r7, #12]
 80101ee:	4618      	mov	r0, r3
 80101f0:	f7ff ff87 	bl	8010102 <LL_ADC_REG_IsConversionOngoing>
 80101f4:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80101f6:	687b      	ldr	r3, [r7, #4]
 80101f8:	681b      	ldr	r3, [r3, #0]
 80101fa:	4618      	mov	r0, r3
 80101fc:	f7ff ff81 	bl	8010102 <LL_ADC_REG_IsConversionOngoing>
 8010200:	4603      	mov	r3, r0
 8010202:	2b00      	cmp	r3, #0
 8010204:	d14a      	bne.n	801029c <HAL_ADCEx_MultiModeConfigChannel+0x110>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8010206:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8010208:	2b00      	cmp	r3, #0
 801020a:	d147      	bne.n	801029c <HAL_ADCEx_MultiModeConfigChannel+0x110>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 801020c:	4b30      	ldr	r3, [pc, #192]	; (80102d0 <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 801020e:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8010210:	683b      	ldr	r3, [r7, #0]
 8010212:	681b      	ldr	r3, [r3, #0]
 8010214:	2b00      	cmp	r3, #0
 8010216:	d027      	beq.n	8010268 <HAL_ADCEx_MultiModeConfigChannel+0xdc>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8010218:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801021a:	689b      	ldr	r3, [r3, #8]
 801021c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8010220:	683b      	ldr	r3, [r7, #0]
 8010222:	6859      	ldr	r1, [r3, #4]
 8010224:	687b      	ldr	r3, [r7, #4]
 8010226:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801022a:	035b      	lsls	r3, r3, #13
 801022c:	430b      	orrs	r3, r1
 801022e:	431a      	orrs	r2, r3
 8010230:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8010232:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8010234:	4824      	ldr	r0, [pc, #144]	; (80102c8 <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 8010236:	f7ff ff51 	bl	80100dc <LL_ADC_IsEnabled>
 801023a:	4604      	mov	r4, r0
 801023c:	4823      	ldr	r0, [pc, #140]	; (80102cc <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 801023e:	f7ff ff4d 	bl	80100dc <LL_ADC_IsEnabled>
 8010242:	4603      	mov	r3, r0
 8010244:	4323      	orrs	r3, r4
 8010246:	2b00      	cmp	r3, #0
 8010248:	d132      	bne.n	80102b0 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 801024a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801024c:	689b      	ldr	r3, [r3, #8]
 801024e:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8010252:	f023 030f 	bic.w	r3, r3, #15
 8010256:	683a      	ldr	r2, [r7, #0]
 8010258:	6811      	ldr	r1, [r2, #0]
 801025a:	683a      	ldr	r2, [r7, #0]
 801025c:	6892      	ldr	r2, [r2, #8]
 801025e:	430a      	orrs	r2, r1
 8010260:	431a      	orrs	r2, r3
 8010262:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8010264:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8010266:	e023      	b.n	80102b0 <HAL_ADCEx_MultiModeConfigChannel+0x124>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8010268:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801026a:	689b      	ldr	r3, [r3, #8]
 801026c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8010270:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8010272:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8010274:	4814      	ldr	r0, [pc, #80]	; (80102c8 <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 8010276:	f7ff ff31 	bl	80100dc <LL_ADC_IsEnabled>
 801027a:	4604      	mov	r4, r0
 801027c:	4813      	ldr	r0, [pc, #76]	; (80102cc <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 801027e:	f7ff ff2d 	bl	80100dc <LL_ADC_IsEnabled>
 8010282:	4603      	mov	r3, r0
 8010284:	4323      	orrs	r3, r4
 8010286:	2b00      	cmp	r3, #0
 8010288:	d112      	bne.n	80102b0 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 801028a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801028c:	689b      	ldr	r3, [r3, #8]
 801028e:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8010292:	f023 030f 	bic.w	r3, r3, #15
 8010296:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8010298:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 801029a:	e009      	b.n	80102b0 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 801029c:	687b      	ldr	r3, [r7, #4]
 801029e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80102a0:	f043 0220 	orr.w	r2, r3, #32
 80102a4:	687b      	ldr	r3, [r7, #4]
 80102a6:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80102a8:	2301      	movs	r3, #1
 80102aa:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 80102ae:	e000      	b.n	80102b2 <HAL_ADCEx_MultiModeConfigChannel+0x126>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80102b0:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80102b2:	687b      	ldr	r3, [r7, #4]
 80102b4:	2200      	movs	r2, #0
 80102b6:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 80102ba:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 80102be:	4618      	mov	r0, r3
 80102c0:	3784      	adds	r7, #132	; 0x84
 80102c2:	46bd      	mov	sp, r7
 80102c4:	bd90      	pop	{r4, r7, pc}
 80102c6:	bf00      	nop
 80102c8:	42028000 	.word	0x42028000
 80102cc:	42028100 	.word	0x42028100
 80102d0:	42028300 	.word	0x42028300

080102d4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80102d4:	b480      	push	{r7}
 80102d6:	b085      	sub	sp, #20
 80102d8:	af00      	add	r7, sp, #0
 80102da:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80102dc:	687b      	ldr	r3, [r7, #4]
 80102de:	f003 0307 	and.w	r3, r3, #7
 80102e2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80102e4:	4b0c      	ldr	r3, [pc, #48]	; (8010318 <__NVIC_SetPriorityGrouping+0x44>)
 80102e6:	68db      	ldr	r3, [r3, #12]
 80102e8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80102ea:	68ba      	ldr	r2, [r7, #8]
 80102ec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80102f0:	4013      	ands	r3, r2
 80102f2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80102f4:	68fb      	ldr	r3, [r7, #12]
 80102f6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80102f8:	68bb      	ldr	r3, [r7, #8]
 80102fa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80102fc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8010300:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8010304:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8010306:	4a04      	ldr	r2, [pc, #16]	; (8010318 <__NVIC_SetPriorityGrouping+0x44>)
 8010308:	68bb      	ldr	r3, [r7, #8]
 801030a:	60d3      	str	r3, [r2, #12]
}
 801030c:	bf00      	nop
 801030e:	3714      	adds	r7, #20
 8010310:	46bd      	mov	sp, r7
 8010312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010316:	4770      	bx	lr
 8010318:	e000ed00 	.word	0xe000ed00

0801031c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 801031c:	b480      	push	{r7}
 801031e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8010320:	4b04      	ldr	r3, [pc, #16]	; (8010334 <__NVIC_GetPriorityGrouping+0x18>)
 8010322:	68db      	ldr	r3, [r3, #12]
 8010324:	0a1b      	lsrs	r3, r3, #8
 8010326:	f003 0307 	and.w	r3, r3, #7
}
 801032a:	4618      	mov	r0, r3
 801032c:	46bd      	mov	sp, r7
 801032e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010332:	4770      	bx	lr
 8010334:	e000ed00 	.word	0xe000ed00

08010338 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8010338:	b480      	push	{r7}
 801033a:	b083      	sub	sp, #12
 801033c:	af00      	add	r7, sp, #0
 801033e:	4603      	mov	r3, r0
 8010340:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8010342:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8010346:	2b00      	cmp	r3, #0
 8010348:	db0b      	blt.n	8010362 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 801034a:	79fb      	ldrb	r3, [r7, #7]
 801034c:	f003 021f 	and.w	r2, r3, #31
 8010350:	4907      	ldr	r1, [pc, #28]	; (8010370 <__NVIC_EnableIRQ+0x38>)
 8010352:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8010356:	095b      	lsrs	r3, r3, #5
 8010358:	2001      	movs	r0, #1
 801035a:	fa00 f202 	lsl.w	r2, r0, r2
 801035e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8010362:	bf00      	nop
 8010364:	370c      	adds	r7, #12
 8010366:	46bd      	mov	sp, r7
 8010368:	f85d 7b04 	ldr.w	r7, [sp], #4
 801036c:	4770      	bx	lr
 801036e:	bf00      	nop
 8010370:	e000e100 	.word	0xe000e100

08010374 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8010374:	b480      	push	{r7}
 8010376:	b083      	sub	sp, #12
 8010378:	af00      	add	r7, sp, #0
 801037a:	4603      	mov	r3, r0
 801037c:	6039      	str	r1, [r7, #0]
 801037e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8010380:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8010384:	2b00      	cmp	r3, #0
 8010386:	db0a      	blt.n	801039e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8010388:	683b      	ldr	r3, [r7, #0]
 801038a:	b2da      	uxtb	r2, r3
 801038c:	490c      	ldr	r1, [pc, #48]	; (80103c0 <__NVIC_SetPriority+0x4c>)
 801038e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8010392:	0152      	lsls	r2, r2, #5
 8010394:	b2d2      	uxtb	r2, r2
 8010396:	440b      	add	r3, r1
 8010398:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 801039c:	e00a      	b.n	80103b4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 801039e:	683b      	ldr	r3, [r7, #0]
 80103a0:	b2da      	uxtb	r2, r3
 80103a2:	4908      	ldr	r1, [pc, #32]	; (80103c4 <__NVIC_SetPriority+0x50>)
 80103a4:	79fb      	ldrb	r3, [r7, #7]
 80103a6:	f003 030f 	and.w	r3, r3, #15
 80103aa:	3b04      	subs	r3, #4
 80103ac:	0152      	lsls	r2, r2, #5
 80103ae:	b2d2      	uxtb	r2, r2
 80103b0:	440b      	add	r3, r1
 80103b2:	761a      	strb	r2, [r3, #24]
}
 80103b4:	bf00      	nop
 80103b6:	370c      	adds	r7, #12
 80103b8:	46bd      	mov	sp, r7
 80103ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103be:	4770      	bx	lr
 80103c0:	e000e100 	.word	0xe000e100
 80103c4:	e000ed00 	.word	0xe000ed00

080103c8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80103c8:	b480      	push	{r7}
 80103ca:	b089      	sub	sp, #36	; 0x24
 80103cc:	af00      	add	r7, sp, #0
 80103ce:	60f8      	str	r0, [r7, #12]
 80103d0:	60b9      	str	r1, [r7, #8]
 80103d2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80103d4:	68fb      	ldr	r3, [r7, #12]
 80103d6:	f003 0307 	and.w	r3, r3, #7
 80103da:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80103dc:	69fb      	ldr	r3, [r7, #28]
 80103de:	f1c3 0307 	rsb	r3, r3, #7
 80103e2:	2b03      	cmp	r3, #3
 80103e4:	bf28      	it	cs
 80103e6:	2303      	movcs	r3, #3
 80103e8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80103ea:	69fb      	ldr	r3, [r7, #28]
 80103ec:	3303      	adds	r3, #3
 80103ee:	2b06      	cmp	r3, #6
 80103f0:	d902      	bls.n	80103f8 <NVIC_EncodePriority+0x30>
 80103f2:	69fb      	ldr	r3, [r7, #28]
 80103f4:	3b04      	subs	r3, #4
 80103f6:	e000      	b.n	80103fa <NVIC_EncodePriority+0x32>
 80103f8:	2300      	movs	r3, #0
 80103fa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80103fc:	f04f 32ff 	mov.w	r2, #4294967295
 8010400:	69bb      	ldr	r3, [r7, #24]
 8010402:	fa02 f303 	lsl.w	r3, r2, r3
 8010406:	43da      	mvns	r2, r3
 8010408:	68bb      	ldr	r3, [r7, #8]
 801040a:	401a      	ands	r2, r3
 801040c:	697b      	ldr	r3, [r7, #20]
 801040e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8010410:	f04f 31ff 	mov.w	r1, #4294967295
 8010414:	697b      	ldr	r3, [r7, #20]
 8010416:	fa01 f303 	lsl.w	r3, r1, r3
 801041a:	43d9      	mvns	r1, r3
 801041c:	687b      	ldr	r3, [r7, #4]
 801041e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8010420:	4313      	orrs	r3, r2
         );
}
 8010422:	4618      	mov	r0, r3
 8010424:	3724      	adds	r7, #36	; 0x24
 8010426:	46bd      	mov	sp, r7
 8010428:	f85d 7b04 	ldr.w	r7, [sp], #4
 801042c:	4770      	bx	lr

0801042e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 801042e:	b580      	push	{r7, lr}
 8010430:	b082      	sub	sp, #8
 8010432:	af00      	add	r7, sp, #0
 8010434:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8010436:	6878      	ldr	r0, [r7, #4]
 8010438:	f7ff ff4c 	bl	80102d4 <__NVIC_SetPriorityGrouping>
}
 801043c:	bf00      	nop
 801043e:	3708      	adds	r7, #8
 8010440:	46bd      	mov	sp, r7
 8010442:	bd80      	pop	{r7, pc}

08010444 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 7
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8010444:	b580      	push	{r7, lr}
 8010446:	b086      	sub	sp, #24
 8010448:	af00      	add	r7, sp, #0
 801044a:	4603      	mov	r3, r0
 801044c:	60b9      	str	r1, [r7, #8]
 801044e:	607a      	str	r2, [r7, #4]
 8010450:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8010452:	f7ff ff63 	bl	801031c <__NVIC_GetPriorityGrouping>
 8010456:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8010458:	687a      	ldr	r2, [r7, #4]
 801045a:	68b9      	ldr	r1, [r7, #8]
 801045c:	6978      	ldr	r0, [r7, #20]
 801045e:	f7ff ffb3 	bl	80103c8 <NVIC_EncodePriority>
 8010462:	4602      	mov	r2, r0
 8010464:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010468:	4611      	mov	r1, r2
 801046a:	4618      	mov	r0, r3
 801046c:	f7ff ff82 	bl	8010374 <__NVIC_SetPriority>
}
 8010470:	bf00      	nop
 8010472:	3718      	adds	r7, #24
 8010474:	46bd      	mov	sp, r7
 8010476:	bd80      	pop	{r7, pc}

08010478 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8010478:	b580      	push	{r7, lr}
 801047a:	b082      	sub	sp, #8
 801047c:	af00      	add	r7, sp, #0
 801047e:	4603      	mov	r3, r0
 8010480:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8010482:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8010486:	4618      	mov	r0, r3
 8010488:	f7ff ff56 	bl	8010338 <__NVIC_EnableIRQ>
}
 801048c:	bf00      	nop
 801048e:	3708      	adds	r7, #8
 8010490:	46bd      	mov	sp, r7
 8010492:	bd80      	pop	{r7, pc}

08010494 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8010494:	b580      	push	{r7, lr}
 8010496:	b084      	sub	sp, #16
 8010498:	af00      	add	r7, sp, #0
 801049a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 801049c:	687b      	ldr	r3, [r7, #4]
 801049e:	2b00      	cmp	r3, #0
 80104a0:	d101      	bne.n	80104a6 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80104a2:	2301      	movs	r3, #1
 80104a4:	e08d      	b.n	80105c2 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80104a6:	687b      	ldr	r3, [r7, #4]
 80104a8:	681b      	ldr	r3, [r3, #0]
 80104aa:	461a      	mov	r2, r3
 80104ac:	4b47      	ldr	r3, [pc, #284]	; (80105cc <HAL_DMA_Init+0x138>)
 80104ae:	429a      	cmp	r2, r3
 80104b0:	d80f      	bhi.n	80104d2 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80104b2:	687b      	ldr	r3, [r7, #4]
 80104b4:	681b      	ldr	r3, [r3, #0]
 80104b6:	461a      	mov	r2, r3
 80104b8:	4b45      	ldr	r3, [pc, #276]	; (80105d0 <HAL_DMA_Init+0x13c>)
 80104ba:	4413      	add	r3, r2
 80104bc:	4a45      	ldr	r2, [pc, #276]	; (80105d4 <HAL_DMA_Init+0x140>)
 80104be:	fba2 2303 	umull	r2, r3, r2, r3
 80104c2:	091b      	lsrs	r3, r3, #4
 80104c4:	009a      	lsls	r2, r3, #2
 80104c6:	687b      	ldr	r3, [r7, #4]
 80104c8:	64da      	str	r2, [r3, #76]	; 0x4c
    hdma->DmaBaseAddress = DMA1;
 80104ca:	687b      	ldr	r3, [r7, #4]
 80104cc:	4a42      	ldr	r2, [pc, #264]	; (80105d8 <HAL_DMA_Init+0x144>)
 80104ce:	649a      	str	r2, [r3, #72]	; 0x48
 80104d0:	e00e      	b.n	80104f0 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80104d2:	687b      	ldr	r3, [r7, #4]
 80104d4:	681b      	ldr	r3, [r3, #0]
 80104d6:	461a      	mov	r2, r3
 80104d8:	4b40      	ldr	r3, [pc, #256]	; (80105dc <HAL_DMA_Init+0x148>)
 80104da:	4413      	add	r3, r2
 80104dc:	4a3d      	ldr	r2, [pc, #244]	; (80105d4 <HAL_DMA_Init+0x140>)
 80104de:	fba2 2303 	umull	r2, r3, r2, r3
 80104e2:	091b      	lsrs	r3, r3, #4
 80104e4:	009a      	lsls	r2, r3, #2
 80104e6:	687b      	ldr	r3, [r7, #4]
 80104e8:	64da      	str	r2, [r3, #76]	; 0x4c
    hdma->DmaBaseAddress = DMA2;
 80104ea:	687b      	ldr	r3, [r7, #4]
 80104ec:	4a3c      	ldr	r2, [pc, #240]	; (80105e0 <HAL_DMA_Init+0x14c>)
 80104ee:	649a      	str	r2, [r3, #72]	; 0x48
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80104f0:	687b      	ldr	r3, [r7, #4]
 80104f2:	2202      	movs	r2, #2
 80104f4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80104f8:	687b      	ldr	r3, [r7, #4]
 80104fa:	681b      	ldr	r3, [r3, #0]
 80104fc:	681b      	ldr	r3, [r3, #0]
 80104fe:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE   | DMA_CCR_PSIZE  |
 8010500:	68fb      	ldr	r3, [r7, #12]
 8010502:	f423 33ff 	bic.w	r3, r3, #130560	; 0x1fe00
 8010506:	f423 73f8 	bic.w	r3, r3, #496	; 0x1f0
 801050a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC    | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM | DMA_CCR_CT     |
                      DMA_CCR_DBM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 801050c:	687b      	ldr	r3, [r7, #4]
 801050e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8010510:	687b      	ldr	r3, [r7, #4]
 8010512:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8010514:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8010516:	687b      	ldr	r3, [r7, #4]
 8010518:	691b      	ldr	r3, [r3, #16]
 801051a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 801051c:	687b      	ldr	r3, [r7, #4]
 801051e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8010520:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8010522:	687b      	ldr	r3, [r7, #4]
 8010524:	699b      	ldr	r3, [r3, #24]
 8010526:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8010528:	687b      	ldr	r3, [r7, #4]
 801052a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 801052c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 801052e:	687b      	ldr	r3, [r7, #4]
 8010530:	6a1b      	ldr	r3, [r3, #32]
 8010532:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8010534:	68fa      	ldr	r2, [r7, #12]
 8010536:	4313      	orrs	r3, r2
 8010538:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 801053a:	687b      	ldr	r3, [r7, #4]
 801053c:	681b      	ldr	r3, [r3, #0]
 801053e:	68fa      	ldr	r2, [r7, #12]
 8010540:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8010542:	6878      	ldr	r0, [r7, #4]
 8010544:	f000 faf2 	bl	8010b2c <DMA_CalcDMAMUXChannelBaseAndMask>

  if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8010548:	687b      	ldr	r3, [r7, #4]
 801054a:	689b      	ldr	r3, [r3, #8]
 801054c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8010550:	d102      	bne.n	8010558 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8010552:	687b      	ldr	r3, [r7, #4]
 8010554:	2200      	movs	r2, #0
 8010556:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8010558:	687b      	ldr	r3, [r7, #4]
 801055a:	685a      	ldr	r2, [r3, #4]
 801055c:	687b      	ldr	r3, [r7, #4]
 801055e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010560:	b2d2      	uxtb	r2, r2
 8010562:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8010564:	687b      	ldr	r3, [r7, #4]
 8010566:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010568:	687a      	ldr	r2, [r7, #4]
 801056a:	6d92      	ldr	r2, [r2, #88]	; 0x58
 801056c:	605a      	str	r2, [r3, #4]

  if(((hdma->Init.Request > 0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 801056e:	687b      	ldr	r3, [r7, #4]
 8010570:	685b      	ldr	r3, [r3, #4]
 8010572:	2b00      	cmp	r3, #0
 8010574:	d010      	beq.n	8010598 <HAL_DMA_Init+0x104>
 8010576:	687b      	ldr	r3, [r7, #4]
 8010578:	685b      	ldr	r3, [r3, #4]
 801057a:	2b04      	cmp	r3, #4
 801057c:	d80c      	bhi.n	8010598 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 801057e:	6878      	ldr	r0, [r7, #4]
 8010580:	f000 fb12 	bl	8010ba8 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8010584:	687b      	ldr	r3, [r7, #4]
 8010586:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8010588:	2200      	movs	r2, #0
 801058a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 801058c:	687b      	ldr	r3, [r7, #4]
 801058e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8010590:	687a      	ldr	r2, [r7, #4]
 8010592:	6e52      	ldr	r2, [r2, #100]	; 0x64
 8010594:	605a      	str	r2, [r3, #4]
 8010596:	e008      	b.n	80105aa <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8010598:	687b      	ldr	r3, [r7, #4]
 801059a:	2200      	movs	r2, #0
 801059c:	65da      	str	r2, [r3, #92]	; 0x5c
    hdma->DMAmuxRequestGenStatus = 0U;
 801059e:	687b      	ldr	r3, [r7, #4]
 80105a0:	2200      	movs	r2, #0
 80105a2:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80105a4:	687b      	ldr	r3, [r7, #4]
 80105a6:	2200      	movs	r2, #0
 80105a8:	665a      	str	r2, [r3, #100]	; 0x64
  }

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80105aa:	687b      	ldr	r3, [r7, #4]
 80105ac:	2200      	movs	r2, #0
 80105ae:	645a      	str	r2, [r3, #68]	; 0x44

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80105b0:	687b      	ldr	r3, [r7, #4]
 80105b2:	2201      	movs	r2, #1
 80105b4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80105b8:	687b      	ldr	r3, [r7, #4]
 80105ba:	2200      	movs	r2, #0
 80105bc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80105c0:	2300      	movs	r3, #0
}
 80105c2:	4618      	mov	r0, r3
 80105c4:	3710      	adds	r7, #16
 80105c6:	46bd      	mov	sp, r7
 80105c8:	bd80      	pop	{r7, pc}
 80105ca:	bf00      	nop
 80105cc:	40020407 	.word	0x40020407
 80105d0:	bffdfff8 	.word	0xbffdfff8
 80105d4:	cccccccd 	.word	0xcccccccd
 80105d8:	40020000 	.word	0x40020000
 80105dc:	bffdfbf8 	.word	0xbffdfbf8
 80105e0:	40020400 	.word	0x40020400

080105e4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80105e4:	b580      	push	{r7, lr}
 80105e6:	b086      	sub	sp, #24
 80105e8:	af00      	add	r7, sp, #0
 80105ea:	60f8      	str	r0, [r7, #12]
 80105ec:	60b9      	str	r1, [r7, #8]
 80105ee:	607a      	str	r2, [r7, #4]
 80105f0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80105f2:	2300      	movs	r3, #0
 80105f4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80105f6:	68fb      	ldr	r3, [r7, #12]
 80105f8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80105fc:	2b01      	cmp	r3, #1
 80105fe:	d101      	bne.n	8010604 <HAL_DMA_Start_IT+0x20>
 8010600:	2302      	movs	r3, #2
 8010602:	e066      	b.n	80106d2 <HAL_DMA_Start_IT+0xee>
 8010604:	68fb      	ldr	r3, [r7, #12]
 8010606:	2201      	movs	r2, #1
 8010608:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 801060c:	68fb      	ldr	r3, [r7, #12]
 801060e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8010612:	b2db      	uxtb	r3, r3
 8010614:	2b01      	cmp	r3, #1
 8010616:	d155      	bne.n	80106c4 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8010618:	68fb      	ldr	r3, [r7, #12]
 801061a:	2202      	movs	r2, #2
 801061c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8010620:	68fb      	ldr	r3, [r7, #12]
 8010622:	2200      	movs	r2, #0
 8010624:	645a      	str	r2, [r3, #68]	; 0x44

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8010626:	68fb      	ldr	r3, [r7, #12]
 8010628:	681b      	ldr	r3, [r3, #0]
 801062a:	681a      	ldr	r2, [r3, #0]
 801062c:	68fb      	ldr	r3, [r7, #12]
 801062e:	681b      	ldr	r3, [r3, #0]
 8010630:	f022 0201 	bic.w	r2, r2, #1
 8010634:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8010636:	683b      	ldr	r3, [r7, #0]
 8010638:	687a      	ldr	r2, [r7, #4]
 801063a:	68b9      	ldr	r1, [r7, #8]
 801063c:	68f8      	ldr	r0, [r7, #12]
 801063e:	f000 fa37 	bl	8010ab0 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8010642:	68fb      	ldr	r3, [r7, #12]
 8010644:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010646:	2b00      	cmp	r3, #0
 8010648:	d008      	beq.n	801065c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 801064a:	68fb      	ldr	r3, [r7, #12]
 801064c:	681b      	ldr	r3, [r3, #0]
 801064e:	681a      	ldr	r2, [r3, #0]
 8010650:	68fb      	ldr	r3, [r7, #12]
 8010652:	681b      	ldr	r3, [r3, #0]
 8010654:	f042 020e 	orr.w	r2, r2, #14
 8010658:	601a      	str	r2, [r3, #0]
 801065a:	e00f      	b.n	801067c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 801065c:	68fb      	ldr	r3, [r7, #12]
 801065e:	681b      	ldr	r3, [r3, #0]
 8010660:	681a      	ldr	r2, [r3, #0]
 8010662:	68fb      	ldr	r3, [r7, #12]
 8010664:	681b      	ldr	r3, [r3, #0]
 8010666:	f022 0204 	bic.w	r2, r2, #4
 801066a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 801066c:	68fb      	ldr	r3, [r7, #12]
 801066e:	681b      	ldr	r3, [r3, #0]
 8010670:	681a      	ldr	r2, [r3, #0]
 8010672:	68fb      	ldr	r3, [r7, #12]
 8010674:	681b      	ldr	r3, [r3, #0]
 8010676:	f042 020a 	orr.w	r2, r2, #10
 801067a:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 801067c:	68fb      	ldr	r3, [r7, #12]
 801067e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010680:	681b      	ldr	r3, [r3, #0]
 8010682:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8010686:	2b00      	cmp	r3, #0
 8010688:	d007      	beq.n	801069a <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 801068a:	68fb      	ldr	r3, [r7, #12]
 801068c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801068e:	681a      	ldr	r2, [r3, #0]
 8010690:	68fb      	ldr	r3, [r7, #12]
 8010692:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010694:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8010698:	601a      	str	r2, [r3, #0]
    }

    if(hdma->DMAmuxRequestGen != 0U)
 801069a:	68fb      	ldr	r3, [r7, #12]
 801069c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801069e:	2b00      	cmp	r3, #0
 80106a0:	d007      	beq.n	80106b2 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80106a2:	68fb      	ldr	r3, [r7, #12]
 80106a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80106a6:	681a      	ldr	r2, [r3, #0]
 80106a8:	68fb      	ldr	r3, [r7, #12]
 80106aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80106ac:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80106b0:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80106b2:	68fb      	ldr	r3, [r7, #12]
 80106b4:	681b      	ldr	r3, [r3, #0]
 80106b6:	681a      	ldr	r2, [r3, #0]
 80106b8:	68fb      	ldr	r3, [r7, #12]
 80106ba:	681b      	ldr	r3, [r3, #0]
 80106bc:	f042 0201 	orr.w	r2, r2, #1
 80106c0:	601a      	str	r2, [r3, #0]
 80106c2:	e005      	b.n	80106d0 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80106c4:	68fb      	ldr	r3, [r7, #12]
 80106c6:	2200      	movs	r2, #0
 80106c8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80106cc:	2302      	movs	r3, #2
 80106ce:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80106d0:	7dfb      	ldrb	r3, [r7, #23]
}
 80106d2:	4618      	mov	r0, r3
 80106d4:	3718      	adds	r7, #24
 80106d6:	46bd      	mov	sp, r7
 80106d8:	bd80      	pop	{r7, pc}

080106da <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80106da:	b480      	push	{r7}
 80106dc:	b085      	sub	sp, #20
 80106de:	af00      	add	r7, sp, #0
 80106e0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80106e2:	2300      	movs	r3, #0
 80106e4:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80106e6:	687b      	ldr	r3, [r7, #4]
 80106e8:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80106ec:	b2db      	uxtb	r3, r3
 80106ee:	2b02      	cmp	r3, #2
 80106f0:	d008      	beq.n	8010704 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80106f2:	687b      	ldr	r3, [r7, #4]
 80106f4:	2204      	movs	r2, #4
 80106f6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80106f8:	687b      	ldr	r3, [r7, #4]
 80106fa:	2200      	movs	r2, #0
 80106fc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8010700:	2301      	movs	r3, #1
 8010702:	e040      	b.n	8010786 <HAL_DMA_Abort+0xac>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8010704:	687b      	ldr	r3, [r7, #4]
 8010706:	681b      	ldr	r3, [r3, #0]
 8010708:	681a      	ldr	r2, [r3, #0]
 801070a:	687b      	ldr	r3, [r7, #4]
 801070c:	681b      	ldr	r3, [r3, #0]
 801070e:	f022 020e 	bic.w	r2, r2, #14
 8010712:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8010714:	687b      	ldr	r3, [r7, #4]
 8010716:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010718:	681a      	ldr	r2, [r3, #0]
 801071a:	687b      	ldr	r3, [r7, #4]
 801071c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801071e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8010722:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8010724:	687b      	ldr	r3, [r7, #4]
 8010726:	681b      	ldr	r3, [r3, #0]
 8010728:	681a      	ldr	r2, [r3, #0]
 801072a:	687b      	ldr	r3, [r7, #4]
 801072c:	681b      	ldr	r3, [r3, #0]
 801072e:	f022 0201 	bic.w	r2, r2, #1
 8010732:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8010734:	687b      	ldr	r3, [r7, #4]
 8010736:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8010738:	f003 021c 	and.w	r2, r3, #28
 801073c:	687b      	ldr	r3, [r7, #4]
 801073e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8010740:	2101      	movs	r1, #1
 8010742:	fa01 f202 	lsl.w	r2, r1, r2
 8010746:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8010748:	687b      	ldr	r3, [r7, #4]
 801074a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801074c:	687a      	ldr	r2, [r7, #4]
 801074e:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8010750:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8010752:	687b      	ldr	r3, [r7, #4]
 8010754:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8010756:	2b00      	cmp	r3, #0
 8010758:	d00c      	beq.n	8010774 <HAL_DMA_Abort+0x9a>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 801075a:	687b      	ldr	r3, [r7, #4]
 801075c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801075e:	681a      	ldr	r2, [r3, #0]
 8010760:	687b      	ldr	r3, [r7, #4]
 8010762:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8010764:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8010768:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 801076a:	687b      	ldr	r3, [r7, #4]
 801076c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801076e:	687a      	ldr	r2, [r7, #4]
 8010770:	6e52      	ldr	r2, [r2, #100]	; 0x64
 8010772:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8010774:	687b      	ldr	r3, [r7, #4]
 8010776:	2201      	movs	r2, #1
 8010778:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 801077c:	687b      	ldr	r3, [r7, #4]
 801077e:	2200      	movs	r2, #0
 8010780:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8010784:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8010786:	4618      	mov	r0, r3
 8010788:	3714      	adds	r7, #20
 801078a:	46bd      	mov	sp, r7
 801078c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010790:	4770      	bx	lr

08010792 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8010792:	b580      	push	{r7, lr}
 8010794:	b084      	sub	sp, #16
 8010796:	af00      	add	r7, sp, #0
 8010798:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 801079a:	2300      	movs	r3, #0
 801079c:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 801079e:	687b      	ldr	r3, [r7, #4]
 80107a0:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80107a4:	b2db      	uxtb	r3, r3
 80107a6:	2b02      	cmp	r3, #2
 80107a8:	d005      	beq.n	80107b6 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80107aa:	687b      	ldr	r3, [r7, #4]
 80107ac:	2204      	movs	r2, #4
 80107ae:	645a      	str	r2, [r3, #68]	; 0x44

    status = HAL_ERROR;
 80107b0:	2301      	movs	r3, #1
 80107b2:	73fb      	strb	r3, [r7, #15]
 80107b4:	e047      	b.n	8010846 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80107b6:	687b      	ldr	r3, [r7, #4]
 80107b8:	681b      	ldr	r3, [r3, #0]
 80107ba:	681a      	ldr	r2, [r3, #0]
 80107bc:	687b      	ldr	r3, [r7, #4]
 80107be:	681b      	ldr	r3, [r3, #0]
 80107c0:	f022 020e 	bic.w	r2, r2, #14
 80107c4:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80107c6:	687b      	ldr	r3, [r7, #4]
 80107c8:	681b      	ldr	r3, [r3, #0]
 80107ca:	681a      	ldr	r2, [r3, #0]
 80107cc:	687b      	ldr	r3, [r7, #4]
 80107ce:	681b      	ldr	r3, [r3, #0]
 80107d0:	f022 0201 	bic.w	r2, r2, #1
 80107d4:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80107d6:	687b      	ldr	r3, [r7, #4]
 80107d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80107da:	681a      	ldr	r2, [r3, #0]
 80107dc:	687b      	ldr	r3, [r7, #4]
 80107de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80107e0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80107e4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80107e6:	687b      	ldr	r3, [r7, #4]
 80107e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80107ea:	f003 021c 	and.w	r2, r3, #28
 80107ee:	687b      	ldr	r3, [r7, #4]
 80107f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80107f2:	2101      	movs	r1, #1
 80107f4:	fa01 f202 	lsl.w	r2, r1, r2
 80107f8:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80107fa:	687b      	ldr	r3, [r7, #4]
 80107fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80107fe:	687a      	ldr	r2, [r7, #4]
 8010800:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8010802:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8010804:	687b      	ldr	r3, [r7, #4]
 8010806:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8010808:	2b00      	cmp	r3, #0
 801080a:	d00c      	beq.n	8010826 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 801080c:	687b      	ldr	r3, [r7, #4]
 801080e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8010810:	681a      	ldr	r2, [r3, #0]
 8010812:	687b      	ldr	r3, [r7, #4]
 8010814:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8010816:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 801081a:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 801081c:	687b      	ldr	r3, [r7, #4]
 801081e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8010820:	687a      	ldr	r2, [r7, #4]
 8010822:	6e52      	ldr	r2, [r2, #100]	; 0x64
 8010824:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8010826:	687b      	ldr	r3, [r7, #4]
 8010828:	2201      	movs	r2, #1
 801082a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 801082e:	687b      	ldr	r3, [r7, #4]
 8010830:	2200      	movs	r2, #0
 8010832:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8010836:	687b      	ldr	r3, [r7, #4]
 8010838:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801083a:	2b00      	cmp	r3, #0
 801083c:	d003      	beq.n	8010846 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 801083e:	687b      	ldr	r3, [r7, #4]
 8010840:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010842:	6878      	ldr	r0, [r7, #4]
 8010844:	4798      	blx	r3
    }
  }
  return status;
 8010846:	7bfb      	ldrb	r3, [r7, #15]
}
 8010848:	4618      	mov	r0, r3
 801084a:	3710      	adds	r7, #16
 801084c:	46bd      	mov	sp, r7
 801084e:	bd80      	pop	{r7, pc}

08010850 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8010850:	b580      	push	{r7, lr}
 8010852:	b084      	sub	sp, #16
 8010854:	af00      	add	r7, sp, #0
 8010856:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8010858:	687b      	ldr	r3, [r7, #4]
 801085a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801085c:	681b      	ldr	r3, [r3, #0]
 801085e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8010860:	687b      	ldr	r3, [r7, #4]
 8010862:	681b      	ldr	r3, [r3, #0]
 8010864:	681b      	ldr	r3, [r3, #0]
 8010866:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8010868:	687b      	ldr	r3, [r7, #4]
 801086a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801086c:	f003 031c 	and.w	r3, r3, #28
 8010870:	2204      	movs	r2, #4
 8010872:	409a      	lsls	r2, r3
 8010874:	68fb      	ldr	r3, [r7, #12]
 8010876:	4013      	ands	r3, r2
 8010878:	2b00      	cmp	r3, #0
 801087a:	d053      	beq.n	8010924 <HAL_DMA_IRQHandler+0xd4>
 801087c:	68bb      	ldr	r3, [r7, #8]
 801087e:	f003 0304 	and.w	r3, r3, #4
 8010882:	2b00      	cmp	r3, #0
 8010884:	d04e      	beq.n	8010924 <HAL_DMA_IRQHandler+0xd4>
  {
    /* Multi_Buffering mode enabled */
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 8010886:	687b      	ldr	r3, [r7, #4]
 8010888:	681b      	ldr	r3, [r3, #0]
 801088a:	681b      	ldr	r3, [r3, #0]
 801088c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8010890:	2b00      	cmp	r3, #0
 8010892:	d024      	beq.n	80108de <HAL_DMA_IRQHandler+0x8e>
    {
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8010894:	687b      	ldr	r3, [r7, #4]
 8010896:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8010898:	f003 021c 	and.w	r2, r3, #28
 801089c:	687b      	ldr	r3, [r7, #4]
 801089e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80108a0:	2104      	movs	r1, #4
 80108a2:	fa01 f202 	lsl.w	r2, r1, r2
 80108a6:	605a      	str	r2, [r3, #4]

      /* Current memory buffer used is Memory 0 */
      if((hdma->Instance->CCR & DMA_CCR_CT) == 0U)
 80108a8:	687b      	ldr	r3, [r7, #4]
 80108aa:	681b      	ldr	r3, [r3, #0]
 80108ac:	681b      	ldr	r3, [r3, #0]
 80108ae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80108b2:	2b00      	cmp	r3, #0
 80108b4:	d109      	bne.n	80108ca <HAL_DMA_IRQHandler+0x7a>
      {
        if(hdma->XferHalfCpltCallback != NULL)
 80108b6:	687b      	ldr	r3, [r7, #4]
 80108b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80108ba:	2b00      	cmp	r3, #0
 80108bc:	f000 80c0 	beq.w	8010a40 <HAL_DMA_IRQHandler+0x1f0>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80108c0:	687b      	ldr	r3, [r7, #4]
 80108c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80108c4:	6878      	ldr	r0, [r7, #4]
 80108c6:	4798      	blx	r3
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 80108c8:	e0ba      	b.n	8010a40 <HAL_DMA_IRQHandler+0x1f0>
        }
      }
      /* Current memory buffer used is Memory 1 */
      else
      {
        if(hdma->XferM1HalfCpltCallback != NULL)
 80108ca:	687b      	ldr	r3, [r7, #4]
 80108cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80108ce:	2b00      	cmp	r3, #0
 80108d0:	f000 80b6 	beq.w	8010a40 <HAL_DMA_IRQHandler+0x1f0>
        {
          /* Half transfer callback */
          hdma->XferM1HalfCpltCallback(hdma);
 80108d4:	687b      	ldr	r3, [r7, #4]
 80108d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80108d8:	6878      	ldr	r0, [r7, #4]
 80108da:	4798      	blx	r3
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 80108dc:	e0b0      	b.n	8010a40 <HAL_DMA_IRQHandler+0x1f0>
      }
    }
    else
    {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80108de:	687b      	ldr	r3, [r7, #4]
 80108e0:	681b      	ldr	r3, [r3, #0]
 80108e2:	681b      	ldr	r3, [r3, #0]
 80108e4:	f003 0320 	and.w	r3, r3, #32
 80108e8:	2b00      	cmp	r3, #0
 80108ea:	d107      	bne.n	80108fc <HAL_DMA_IRQHandler+0xac>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80108ec:	687b      	ldr	r3, [r7, #4]
 80108ee:	681b      	ldr	r3, [r3, #0]
 80108f0:	681a      	ldr	r2, [r3, #0]
 80108f2:	687b      	ldr	r3, [r7, #4]
 80108f4:	681b      	ldr	r3, [r3, #0]
 80108f6:	f022 0204 	bic.w	r2, r2, #4
 80108fa:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80108fc:	687b      	ldr	r3, [r7, #4]
 80108fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8010900:	f003 021c 	and.w	r2, r3, #28
 8010904:	687b      	ldr	r3, [r7, #4]
 8010906:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8010908:	2104      	movs	r1, #4
 801090a:	fa01 f202 	lsl.w	r2, r1, r2
 801090e:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8010910:	687b      	ldr	r3, [r7, #4]
 8010912:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010914:	2b00      	cmp	r3, #0
 8010916:	f000 8093 	beq.w	8010a40 <HAL_DMA_IRQHandler+0x1f0>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 801091a:	687b      	ldr	r3, [r7, #4]
 801091c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801091e:	6878      	ldr	r0, [r7, #4]
 8010920:	4798      	blx	r3
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 8010922:	e08d      	b.n	8010a40 <HAL_DMA_IRQHandler+0x1f0>
      }
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8010924:	687b      	ldr	r3, [r7, #4]
 8010926:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8010928:	f003 031c 	and.w	r3, r3, #28
 801092c:	2202      	movs	r2, #2
 801092e:	409a      	lsls	r2, r3
 8010930:	68fb      	ldr	r3, [r7, #12]
 8010932:	4013      	ands	r3, r2
 8010934:	2b00      	cmp	r3, #0
 8010936:	d04e      	beq.n	80109d6 <HAL_DMA_IRQHandler+0x186>
 8010938:	68bb      	ldr	r3, [r7, #8]
 801093a:	f003 0302 	and.w	r3, r3, #2
 801093e:	2b00      	cmp	r3, #0
 8010940:	d049      	beq.n	80109d6 <HAL_DMA_IRQHandler+0x186>
  {
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 8010942:	687b      	ldr	r3, [r7, #4]
 8010944:	681b      	ldr	r3, [r3, #0]
 8010946:	681b      	ldr	r3, [r3, #0]
 8010948:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 801094c:	2b00      	cmp	r3, #0
 801094e:	d018      	beq.n	8010982 <HAL_DMA_IRQHandler+0x132>
    {
      /* Current memory buffer used is Memory 0 */
      if((hdma->Instance->CCR & DMA_CCR_CT) == 0U)
 8010950:	687b      	ldr	r3, [r7, #4]
 8010952:	681b      	ldr	r3, [r3, #0]
 8010954:	681b      	ldr	r3, [r3, #0]
 8010956:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 801095a:	2b00      	cmp	r3, #0
 801095c:	d108      	bne.n	8010970 <HAL_DMA_IRQHandler+0x120>
      {
        if(hdma->XferM1CpltCallback != NULL)
 801095e:	687b      	ldr	r3, [r7, #4]
 8010960:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010962:	2b00      	cmp	r3, #0
 8010964:	d06e      	beq.n	8010a44 <HAL_DMA_IRQHandler+0x1f4>
        {
          /* Transfer complete Callback for memory1 */
          hdma->XferM1CpltCallback(hdma);
 8010966:	687b      	ldr	r3, [r7, #4]
 8010968:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801096a:	6878      	ldr	r0, [r7, #4]
 801096c:	4798      	blx	r3
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 801096e:	e069      	b.n	8010a44 <HAL_DMA_IRQHandler+0x1f4>
        }
      }
      /* Current memory buffer used is Memory 1 */
      else
      {
        if(hdma->XferCpltCallback != NULL)
 8010970:	687b      	ldr	r3, [r7, #4]
 8010972:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010974:	2b00      	cmp	r3, #0
 8010976:	d065      	beq.n	8010a44 <HAL_DMA_IRQHandler+0x1f4>
        {
          /* Transfer complete Callback for memory0 */
          hdma->XferCpltCallback(hdma);
 8010978:	687b      	ldr	r3, [r7, #4]
 801097a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801097c:	6878      	ldr	r0, [r7, #4]
 801097e:	4798      	blx	r3
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 8010980:	e060      	b.n	8010a44 <HAL_DMA_IRQHandler+0x1f4>
        }
      }
    }
    else
    {
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8010982:	687b      	ldr	r3, [r7, #4]
 8010984:	681b      	ldr	r3, [r3, #0]
 8010986:	681b      	ldr	r3, [r3, #0]
 8010988:	f003 0320 	and.w	r3, r3, #32
 801098c:	2b00      	cmp	r3, #0
 801098e:	d10b      	bne.n	80109a8 <HAL_DMA_IRQHandler+0x158>
      {
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        /* Disable the transfer complete and error interrupt */
        /* if the DMA mode is not CIRCULAR  */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8010990:	687b      	ldr	r3, [r7, #4]
 8010992:	681b      	ldr	r3, [r3, #0]
 8010994:	681a      	ldr	r2, [r3, #0]
 8010996:	687b      	ldr	r3, [r7, #4]
 8010998:	681b      	ldr	r3, [r3, #0]
 801099a:	f022 020a 	bic.w	r2, r2, #10
 801099e:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80109a0:	687b      	ldr	r3, [r7, #4]
 80109a2:	2201      	movs	r2, #1
 80109a4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
      }
      /* Clear the transfer complete flag */
      hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 80109a8:	687b      	ldr	r3, [r7, #4]
 80109aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80109ac:	f003 021c 	and.w	r2, r3, #28
 80109b0:	687b      	ldr	r3, [r7, #4]
 80109b2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80109b4:	2102      	movs	r1, #2
 80109b6:	fa01 f202 	lsl.w	r2, r1, r2
 80109ba:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80109bc:	687b      	ldr	r3, [r7, #4]
 80109be:	2200      	movs	r2, #0
 80109c0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

      if(hdma->XferCpltCallback != NULL)
 80109c4:	687b      	ldr	r3, [r7, #4]
 80109c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80109c8:	2b00      	cmp	r3, #0
 80109ca:	d03b      	beq.n	8010a44 <HAL_DMA_IRQHandler+0x1f4>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 80109cc:	687b      	ldr	r3, [r7, #4]
 80109ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80109d0:	6878      	ldr	r0, [r7, #4]
 80109d2:	4798      	blx	r3
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 80109d4:	e036      	b.n	8010a44 <HAL_DMA_IRQHandler+0x1f4>
      }
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 80109d6:	687b      	ldr	r3, [r7, #4]
 80109d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80109da:	f003 031c 	and.w	r3, r3, #28
 80109de:	2208      	movs	r2, #8
 80109e0:	409a      	lsls	r2, r3
 80109e2:	68fb      	ldr	r3, [r7, #12]
 80109e4:	4013      	ands	r3, r2
 80109e6:	2b00      	cmp	r3, #0
 80109e8:	d02e      	beq.n	8010a48 <HAL_DMA_IRQHandler+0x1f8>
 80109ea:	68bb      	ldr	r3, [r7, #8]
 80109ec:	f003 0308 	and.w	r3, r3, #8
 80109f0:	2b00      	cmp	r3, #0
 80109f2:	d029      	beq.n	8010a48 <HAL_DMA_IRQHandler+0x1f8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80109f4:	687b      	ldr	r3, [r7, #4]
 80109f6:	681b      	ldr	r3, [r3, #0]
 80109f8:	681a      	ldr	r2, [r3, #0]
 80109fa:	687b      	ldr	r3, [r7, #4]
 80109fc:	681b      	ldr	r3, [r3, #0]
 80109fe:	f022 020e 	bic.w	r2, r2, #14
 8010a02:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8010a04:	687b      	ldr	r3, [r7, #4]
 8010a06:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8010a08:	f003 021c 	and.w	r2, r3, #28
 8010a0c:	687b      	ldr	r3, [r7, #4]
 8010a0e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8010a10:	2101      	movs	r1, #1
 8010a12:	fa01 f202 	lsl.w	r2, r1, r2
 8010a16:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8010a18:	687b      	ldr	r3, [r7, #4]
 8010a1a:	2201      	movs	r2, #1
 8010a1c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8010a1e:	687b      	ldr	r3, [r7, #4]
 8010a20:	2201      	movs	r2, #1
 8010a22:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8010a26:	687b      	ldr	r3, [r7, #4]
 8010a28:	2200      	movs	r2, #0
 8010a2a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8010a2e:	687b      	ldr	r3, [r7, #4]
 8010a30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010a32:	2b00      	cmp	r3, #0
 8010a34:	d008      	beq.n	8010a48 <HAL_DMA_IRQHandler+0x1f8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8010a36:	687b      	ldr	r3, [r7, #4]
 8010a38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010a3a:	6878      	ldr	r0, [r7, #4]
 8010a3c:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8010a3e:	e002      	b.n	8010a46 <HAL_DMA_IRQHandler+0x1f6>
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 8010a40:	bf00      	nop
 8010a42:	e000      	b.n	8010a46 <HAL_DMA_IRQHandler+0x1f6>
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 8010a44:	bf00      	nop
  return;
 8010a46:	bf00      	nop
 8010a48:	bf00      	nop
}
 8010a4a:	3710      	adds	r7, #16
 8010a4c:	46bd      	mov	sp, r7
 8010a4e:	bd80      	pop	{r7, pc}

08010a50 <HAL_DMA_ConfigChannelAttributes>:
  * @param  ChannelAttributes specifies the DMA channel secure/privilege attributes.
  *         This parameter can be a one or a combination of @ref DMA_Channel_Attributes
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_DMA_ConfigChannelAttributes(DMA_HandleTypeDef *hdma, uint32_t ChannelAttributes)
{
 8010a50:	b480      	push	{r7}
 8010a52:	b085      	sub	sp, #20
 8010a54:	af00      	add	r7, sp, #0
 8010a56:	6078      	str	r0, [r7, #4]
 8010a58:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8010a5a:	2300      	movs	r3, #0
 8010a5c:	72fb      	strb	r3, [r7, #11]
#if defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U)
  uint32_t ccr_SECM;
#endif
  
  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8010a5e:	687b      	ldr	r3, [r7, #4]
 8010a60:	2b00      	cmp	r3, #0
 8010a62:	d103      	bne.n	8010a6c <HAL_DMA_ConfigChannelAttributes+0x1c>
  {
    status = HAL_ERROR;
 8010a64:	2301      	movs	r3, #1
 8010a66:	72fb      	strb	r3, [r7, #11]
    return status;
 8010a68:	7afb      	ldrb	r3, [r7, #11]
 8010a6a:	e01b      	b.n	8010aa4 <HAL_DMA_ConfigChannelAttributes+0x54>

  /* Check the parameters */
  assert_param(IS_DMA_ATTRIBUTES(ChannelAttributes));

  /* Read CCR register */
  ccr = READ_REG(hdma->Instance->CCR);
 8010a6c:	687b      	ldr	r3, [r7, #4]
 8010a6e:	681b      	ldr	r3, [r3, #0]
 8010a70:	681b      	ldr	r3, [r3, #0]
 8010a72:	60fb      	str	r3, [r7, #12]

  /* Apply any requested privilege/non-privilege attributes */
  if ((ChannelAttributes & DMA_CHANNEL_ATTR_PRIV_MASK) != 0U)
 8010a74:	683b      	ldr	r3, [r7, #0]
 8010a76:	f003 0310 	and.w	r3, r3, #16
 8010a7a:	2b00      	cmp	r3, #0
 8010a7c:	d00d      	beq.n	8010a9a <HAL_DMA_ConfigChannelAttributes+0x4a>
  {
    if((ChannelAttributes & DMA_CCR_PRIV) != 0U)
 8010a7e:	683b      	ldr	r3, [r7, #0]
 8010a80:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8010a84:	2b00      	cmp	r3, #0
 8010a86:	d004      	beq.n	8010a92 <HAL_DMA_ConfigChannelAttributes+0x42>
    {
      SET_BIT(ccr, DMA_CCR_PRIV);
 8010a88:	68fb      	ldr	r3, [r7, #12]
 8010a8a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8010a8e:	60fb      	str	r3, [r7, #12]
 8010a90:	e003      	b.n	8010a9a <HAL_DMA_ConfigChannelAttributes+0x4a>
    }
    else
    {
      CLEAR_BIT(ccr, DMA_CCR_PRIV);
 8010a92:	68fb      	ldr	r3, [r7, #12]
 8010a94:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8010a98:	60fb      	str	r3, [r7, #12]
  }

#endif /* __ARM_FEATURE_CMSE */

  /* Update CCR Register: PRIV, SECM, SCEC, DSEC bits */
  WRITE_REG(hdma->Instance->CCR, ccr);
 8010a9a:	687b      	ldr	r3, [r7, #4]
 8010a9c:	681b      	ldr	r3, [r3, #0]
 8010a9e:	68fa      	ldr	r2, [r7, #12]
 8010aa0:	601a      	str	r2, [r3, #0]

  return status;
 8010aa2:	7afb      	ldrb	r3, [r7, #11]
}
 8010aa4:	4618      	mov	r0, r3
 8010aa6:	3714      	adds	r7, #20
 8010aa8:	46bd      	mov	sp, r7
 8010aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010aae:	4770      	bx	lr

08010ab0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8010ab0:	b480      	push	{r7}
 8010ab2:	b085      	sub	sp, #20
 8010ab4:	af00      	add	r7, sp, #0
 8010ab6:	60f8      	str	r0, [r7, #12]
 8010ab8:	60b9      	str	r1, [r7, #8]
 8010aba:	607a      	str	r2, [r7, #4]
 8010abc:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8010abe:	68fb      	ldr	r3, [r7, #12]
 8010ac0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010ac2:	68fa      	ldr	r2, [r7, #12]
 8010ac4:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8010ac6:	605a      	str	r2, [r3, #4]

  if(hdma->DMAmuxRequestGen != 0U)
 8010ac8:	68fb      	ldr	r3, [r7, #12]
 8010aca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8010acc:	2b00      	cmp	r3, #0
 8010ace:	d004      	beq.n	8010ada <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8010ad0:	68fb      	ldr	r3, [r7, #12]
 8010ad2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8010ad4:	68fa      	ldr	r2, [r7, #12]
 8010ad6:	6e52      	ldr	r2, [r2, #100]	; 0x64
 8010ad8:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8010ada:	68fb      	ldr	r3, [r7, #12]
 8010adc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8010ade:	f003 021c 	and.w	r2, r3, #28
 8010ae2:	68fb      	ldr	r3, [r7, #12]
 8010ae4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8010ae6:	2101      	movs	r1, #1
 8010ae8:	fa01 f202 	lsl.w	r2, r1, r2
 8010aec:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8010aee:	68fb      	ldr	r3, [r7, #12]
 8010af0:	681b      	ldr	r3, [r3, #0]
 8010af2:	683a      	ldr	r2, [r7, #0]
 8010af4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8010af6:	68fb      	ldr	r3, [r7, #12]
 8010af8:	689b      	ldr	r3, [r3, #8]
 8010afa:	2b10      	cmp	r3, #16
 8010afc:	d108      	bne.n	8010b10 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8010afe:	68fb      	ldr	r3, [r7, #12]
 8010b00:	681b      	ldr	r3, [r3, #0]
 8010b02:	687a      	ldr	r2, [r7, #4]
 8010b04:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CM0AR = SrcAddress;
 8010b06:	68fb      	ldr	r3, [r7, #12]
 8010b08:	681b      	ldr	r3, [r3, #0]
 8010b0a:	68ba      	ldr	r2, [r7, #8]
 8010b0c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CM0AR = DstAddress;
  }
}
 8010b0e:	e007      	b.n	8010b20 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8010b10:	68fb      	ldr	r3, [r7, #12]
 8010b12:	681b      	ldr	r3, [r3, #0]
 8010b14:	68ba      	ldr	r2, [r7, #8]
 8010b16:	609a      	str	r2, [r3, #8]
    hdma->Instance->CM0AR = DstAddress;
 8010b18:	68fb      	ldr	r3, [r7, #12]
 8010b1a:	681b      	ldr	r3, [r3, #0]
 8010b1c:	687a      	ldr	r2, [r7, #4]
 8010b1e:	60da      	str	r2, [r3, #12]
}
 8010b20:	bf00      	nop
 8010b22:	3714      	adds	r7, #20
 8010b24:	46bd      	mov	sp, r7
 8010b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b2a:	4770      	bx	lr

08010b2c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8010b2c:	b480      	push	{r7}
 8010b2e:	b085      	sub	sp, #20
 8010b30:	af00      	add	r7, sp, #0
 8010b32:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8010b34:	687b      	ldr	r3, [r7, #4]
 8010b36:	681b      	ldr	r3, [r3, #0]
 8010b38:	461a      	mov	r2, r3
 8010b3a:	4b17      	ldr	r3, [pc, #92]	; (8010b98 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8010b3c:	429a      	cmp	r2, r3
 8010b3e:	d80a      	bhi.n	8010b56 <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8010b40:	687b      	ldr	r3, [r7, #4]
 8010b42:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8010b44:	089b      	lsrs	r3, r3, #2
 8010b46:	009b      	lsls	r3, r3, #2
 8010b48:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8010b4c:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 8010b50:	687a      	ldr	r2, [r7, #4]
 8010b52:	6513      	str	r3, [r2, #80]	; 0x50
 8010b54:	e007      	b.n	8010b66 <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel8 + (hdma->ChannelIndex >> 2U));
 8010b56:	687b      	ldr	r3, [r7, #4]
 8010b58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8010b5a:	089b      	lsrs	r3, r3, #2
 8010b5c:	009a      	lsls	r2, r3, #2
 8010b5e:	4b0f      	ldr	r3, [pc, #60]	; (8010b9c <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8010b60:	4413      	add	r3, r2
 8010b62:	687a      	ldr	r2, [r7, #4]
 8010b64:	6513      	str	r3, [r2, #80]	; 0x50
  }

  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8010b66:	687b      	ldr	r3, [r7, #4]
 8010b68:	681b      	ldr	r3, [r3, #0]
 8010b6a:	b2db      	uxtb	r3, r3
 8010b6c:	3b08      	subs	r3, #8
 8010b6e:	4a0c      	ldr	r2, [pc, #48]	; (8010ba0 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8010b70:	fba2 2303 	umull	r2, r3, r2, r3
 8010b74:	091b      	lsrs	r3, r3, #4
 8010b76:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8010b78:	687b      	ldr	r3, [r7, #4]
 8010b7a:	4a0a      	ldr	r2, [pc, #40]	; (8010ba4 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8010b7c:	655a      	str	r2, [r3, #84]	; 0x54
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8010b7e:	68fb      	ldr	r3, [r7, #12]
 8010b80:	f003 031f 	and.w	r3, r3, #31
 8010b84:	2201      	movs	r2, #1
 8010b86:	409a      	lsls	r2, r3
 8010b88:	687b      	ldr	r3, [r7, #4]
 8010b8a:	659a      	str	r2, [r3, #88]	; 0x58
}
 8010b8c:	bf00      	nop
 8010b8e:	3714      	adds	r7, #20
 8010b90:	46bd      	mov	sp, r7
 8010b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b96:	4770      	bx	lr
 8010b98:	40020407 	.word	0x40020407
 8010b9c:	40020820 	.word	0x40020820
 8010ba0:	cccccccd 	.word	0xcccccccd
 8010ba4:	40020880 	.word	0x40020880

08010ba8 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8010ba8:	b480      	push	{r7}
 8010baa:	b085      	sub	sp, #20
 8010bac:	af00      	add	r7, sp, #0
 8010bae:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8010bb0:	687b      	ldr	r3, [r7, #4]
 8010bb2:	685b      	ldr	r3, [r3, #4]
 8010bb4:	b2db      	uxtb	r3, r3
 8010bb6:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8010bb8:	68fa      	ldr	r2, [r7, #12]
 8010bba:	4b0b      	ldr	r3, [pc, #44]	; (8010be8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8010bbc:	4413      	add	r3, r2
 8010bbe:	009b      	lsls	r3, r3, #2
 8010bc0:	461a      	mov	r2, r3
 8010bc2:	687b      	ldr	r3, [r7, #4]
 8010bc4:	65da      	str	r2, [r3, #92]	; 0x5c

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8010bc6:	687b      	ldr	r3, [r7, #4]
 8010bc8:	4a08      	ldr	r2, [pc, #32]	; (8010bec <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8010bca:	661a      	str	r2, [r3, #96]	; 0x60

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8010bcc:	68fb      	ldr	r3, [r7, #12]
 8010bce:	3b01      	subs	r3, #1
 8010bd0:	f003 0303 	and.w	r3, r3, #3
 8010bd4:	2201      	movs	r2, #1
 8010bd6:	409a      	lsls	r2, r3
 8010bd8:	687b      	ldr	r3, [r7, #4]
 8010bda:	665a      	str	r2, [r3, #100]	; 0x64
}
 8010bdc:	bf00      	nop
 8010bde:	3714      	adds	r7, #20
 8010be0:	46bd      	mov	sp, r7
 8010be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010be6:	4770      	bx	lr
 8010be8:	1000823f 	.word	0x1000823f
 8010bec:	40020940 	.word	0x40020940

08010bf0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8010bf0:	b480      	push	{r7}
 8010bf2:	b087      	sub	sp, #28
 8010bf4:	af00      	add	r7, sp, #0
 8010bf6:	6078      	str	r0, [r7, #4]
 8010bf8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0U;
 8010bfa:	2300      	movs	r3, #0
 8010bfc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8010bfe:	e158      	b.n	8010eb2 <HAL_GPIO_Init+0x2c2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8010c00:	683b      	ldr	r3, [r7, #0]
 8010c02:	681a      	ldr	r2, [r3, #0]
 8010c04:	2101      	movs	r1, #1
 8010c06:	697b      	ldr	r3, [r7, #20]
 8010c08:	fa01 f303 	lsl.w	r3, r1, r3
 8010c0c:	4013      	ands	r3, r2
 8010c0e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 8010c10:	68fb      	ldr	r3, [r7, #12]
 8010c12:	2b00      	cmp	r3, #0
 8010c14:	f000 814a 	beq.w	8010eac <HAL_GPIO_Init+0x2bc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8010c18:	683b      	ldr	r3, [r7, #0]
 8010c1a:	685b      	ldr	r3, [r3, #4]
 8010c1c:	f003 0303 	and.w	r3, r3, #3
 8010c20:	2b01      	cmp	r3, #1
 8010c22:	d005      	beq.n	8010c30 <HAL_GPIO_Init+0x40>
 8010c24:	683b      	ldr	r3, [r7, #0]
 8010c26:	685b      	ldr	r3, [r3, #4]
 8010c28:	f003 0303 	and.w	r3, r3, #3
 8010c2c:	2b02      	cmp	r3, #2
 8010c2e:	d130      	bne.n	8010c92 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8010c30:	687b      	ldr	r3, [r7, #4]
 8010c32:	689b      	ldr	r3, [r3, #8]
 8010c34:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8010c36:	697b      	ldr	r3, [r7, #20]
 8010c38:	005b      	lsls	r3, r3, #1
 8010c3a:	2203      	movs	r2, #3
 8010c3c:	fa02 f303 	lsl.w	r3, r2, r3
 8010c40:	43db      	mvns	r3, r3
 8010c42:	693a      	ldr	r2, [r7, #16]
 8010c44:	4013      	ands	r3, r2
 8010c46:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8010c48:	683b      	ldr	r3, [r7, #0]
 8010c4a:	68da      	ldr	r2, [r3, #12]
 8010c4c:	697b      	ldr	r3, [r7, #20]
 8010c4e:	005b      	lsls	r3, r3, #1
 8010c50:	fa02 f303 	lsl.w	r3, r2, r3
 8010c54:	693a      	ldr	r2, [r7, #16]
 8010c56:	4313      	orrs	r3, r2
 8010c58:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8010c5a:	687b      	ldr	r3, [r7, #4]
 8010c5c:	693a      	ldr	r2, [r7, #16]
 8010c5e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8010c60:	687b      	ldr	r3, [r7, #4]
 8010c62:	685b      	ldr	r3, [r3, #4]
 8010c64:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8010c66:	2201      	movs	r2, #1
 8010c68:	697b      	ldr	r3, [r7, #20]
 8010c6a:	fa02 f303 	lsl.w	r3, r2, r3
 8010c6e:	43db      	mvns	r3, r3
 8010c70:	693a      	ldr	r2, [r7, #16]
 8010c72:	4013      	ands	r3, r2
 8010c74:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8010c76:	683b      	ldr	r3, [r7, #0]
 8010c78:	685b      	ldr	r3, [r3, #4]
 8010c7a:	091b      	lsrs	r3, r3, #4
 8010c7c:	f003 0201 	and.w	r2, r3, #1
 8010c80:	697b      	ldr	r3, [r7, #20]
 8010c82:	fa02 f303 	lsl.w	r3, r2, r3
 8010c86:	693a      	ldr	r2, [r7, #16]
 8010c88:	4313      	orrs	r3, r2
 8010c8a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8010c8c:	687b      	ldr	r3, [r7, #4]
 8010c8e:	693a      	ldr	r2, [r7, #16]
 8010c90:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8010c92:	683b      	ldr	r3, [r7, #0]
 8010c94:	685b      	ldr	r3, [r3, #4]
 8010c96:	f003 0303 	and.w	r3, r3, #3
 8010c9a:	2b03      	cmp	r3, #3
 8010c9c:	d017      	beq.n	8010cce <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8010c9e:	687b      	ldr	r3, [r7, #4]
 8010ca0:	68db      	ldr	r3, [r3, #12]
 8010ca2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8010ca4:	697b      	ldr	r3, [r7, #20]
 8010ca6:	005b      	lsls	r3, r3, #1
 8010ca8:	2203      	movs	r2, #3
 8010caa:	fa02 f303 	lsl.w	r3, r2, r3
 8010cae:	43db      	mvns	r3, r3
 8010cb0:	693a      	ldr	r2, [r7, #16]
 8010cb2:	4013      	ands	r3, r2
 8010cb4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8010cb6:	683b      	ldr	r3, [r7, #0]
 8010cb8:	689a      	ldr	r2, [r3, #8]
 8010cba:	697b      	ldr	r3, [r7, #20]
 8010cbc:	005b      	lsls	r3, r3, #1
 8010cbe:	fa02 f303 	lsl.w	r3, r2, r3
 8010cc2:	693a      	ldr	r2, [r7, #16]
 8010cc4:	4313      	orrs	r3, r2
 8010cc6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8010cc8:	687b      	ldr	r3, [r7, #4]
 8010cca:	693a      	ldr	r2, [r7, #16]
 8010ccc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8010cce:	683b      	ldr	r3, [r7, #0]
 8010cd0:	685b      	ldr	r3, [r3, #4]
 8010cd2:	f003 0303 	and.w	r3, r3, #3
 8010cd6:	2b02      	cmp	r3, #2
 8010cd8:	d123      	bne.n	8010d22 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8010cda:	697b      	ldr	r3, [r7, #20]
 8010cdc:	08da      	lsrs	r2, r3, #3
 8010cde:	687b      	ldr	r3, [r7, #4]
 8010ce0:	3208      	adds	r2, #8
 8010ce2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010ce6:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << ((position & 0x07U) * 4U)) ;
 8010ce8:	697b      	ldr	r3, [r7, #20]
 8010cea:	f003 0307 	and.w	r3, r3, #7
 8010cee:	009b      	lsls	r3, r3, #2
 8010cf0:	220f      	movs	r2, #15
 8010cf2:	fa02 f303 	lsl.w	r3, r2, r3
 8010cf6:	43db      	mvns	r3, r3
 8010cf8:	693a      	ldr	r2, [r7, #16]
 8010cfa:	4013      	ands	r3, r2
 8010cfc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8010cfe:	683b      	ldr	r3, [r7, #0]
 8010d00:	691a      	ldr	r2, [r3, #16]
 8010d02:	697b      	ldr	r3, [r7, #20]
 8010d04:	f003 0307 	and.w	r3, r3, #7
 8010d08:	009b      	lsls	r3, r3, #2
 8010d0a:	fa02 f303 	lsl.w	r3, r2, r3
 8010d0e:	693a      	ldr	r2, [r7, #16]
 8010d10:	4313      	orrs	r3, r2
 8010d12:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8010d14:	697b      	ldr	r3, [r7, #20]
 8010d16:	08da      	lsrs	r2, r3, #3
 8010d18:	687b      	ldr	r3, [r7, #4]
 8010d1a:	3208      	adds	r2, #8
 8010d1c:	6939      	ldr	r1, [r7, #16]
 8010d1e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8010d22:	687b      	ldr	r3, [r7, #4]
 8010d24:	681b      	ldr	r3, [r3, #0]
 8010d26:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8010d28:	697b      	ldr	r3, [r7, #20]
 8010d2a:	005b      	lsls	r3, r3, #1
 8010d2c:	2203      	movs	r2, #3
 8010d2e:	fa02 f303 	lsl.w	r3, r2, r3
 8010d32:	43db      	mvns	r3, r3
 8010d34:	693a      	ldr	r2, [r7, #16]
 8010d36:	4013      	ands	r3, r2
 8010d38:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8010d3a:	683b      	ldr	r3, [r7, #0]
 8010d3c:	685b      	ldr	r3, [r3, #4]
 8010d3e:	f003 0203 	and.w	r2, r3, #3
 8010d42:	697b      	ldr	r3, [r7, #20]
 8010d44:	005b      	lsls	r3, r3, #1
 8010d46:	fa02 f303 	lsl.w	r3, r2, r3
 8010d4a:	693a      	ldr	r2, [r7, #16]
 8010d4c:	4313      	orrs	r3, r2
 8010d4e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8010d50:	687b      	ldr	r3, [r7, #4]
 8010d52:	693a      	ldr	r2, [r7, #16]
 8010d54:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8010d56:	683b      	ldr	r3, [r7, #0]
 8010d58:	685b      	ldr	r3, [r3, #4]
 8010d5a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8010d5e:	2b00      	cmp	r3, #0
 8010d60:	f000 80a4 	beq.w	8010eac <HAL_GPIO_Init+0x2bc>
      {
        temp = EXTI->EXTICR[position >> 2U];
 8010d64:	4a5a      	ldr	r2, [pc, #360]	; (8010ed0 <HAL_GPIO_Init+0x2e0>)
 8010d66:	697b      	ldr	r3, [r7, #20]
 8010d68:	089b      	lsrs	r3, r3, #2
 8010d6a:	3318      	adds	r3, #24
 8010d6c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010d70:	613b      	str	r3, [r7, #16]
        temp &= ~((0x0FU) << (8U * (position & 0x03U)));
 8010d72:	697b      	ldr	r3, [r7, #20]
 8010d74:	f003 0303 	and.w	r3, r3, #3
 8010d78:	00db      	lsls	r3, r3, #3
 8010d7a:	220f      	movs	r2, #15
 8010d7c:	fa02 f303 	lsl.w	r3, r2, r3
 8010d80:	43db      	mvns	r3, r3
 8010d82:	693a      	ldr	r2, [r7, #16]
 8010d84:	4013      	ands	r3, r2
 8010d86:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 8010d88:	687b      	ldr	r3, [r7, #4]
 8010d8a:	4a52      	ldr	r2, [pc, #328]	; (8010ed4 <HAL_GPIO_Init+0x2e4>)
 8010d8c:	4293      	cmp	r3, r2
 8010d8e:	d025      	beq.n	8010ddc <HAL_GPIO_Init+0x1ec>
 8010d90:	687b      	ldr	r3, [r7, #4]
 8010d92:	4a51      	ldr	r2, [pc, #324]	; (8010ed8 <HAL_GPIO_Init+0x2e8>)
 8010d94:	4293      	cmp	r3, r2
 8010d96:	d01f      	beq.n	8010dd8 <HAL_GPIO_Init+0x1e8>
 8010d98:	687b      	ldr	r3, [r7, #4]
 8010d9a:	4a50      	ldr	r2, [pc, #320]	; (8010edc <HAL_GPIO_Init+0x2ec>)
 8010d9c:	4293      	cmp	r3, r2
 8010d9e:	d019      	beq.n	8010dd4 <HAL_GPIO_Init+0x1e4>
 8010da0:	687b      	ldr	r3, [r7, #4]
 8010da2:	4a4f      	ldr	r2, [pc, #316]	; (8010ee0 <HAL_GPIO_Init+0x2f0>)
 8010da4:	4293      	cmp	r3, r2
 8010da6:	d013      	beq.n	8010dd0 <HAL_GPIO_Init+0x1e0>
 8010da8:	687b      	ldr	r3, [r7, #4]
 8010daa:	4a4e      	ldr	r2, [pc, #312]	; (8010ee4 <HAL_GPIO_Init+0x2f4>)
 8010dac:	4293      	cmp	r3, r2
 8010dae:	d00d      	beq.n	8010dcc <HAL_GPIO_Init+0x1dc>
 8010db0:	687b      	ldr	r3, [r7, #4]
 8010db2:	4a4d      	ldr	r2, [pc, #308]	; (8010ee8 <HAL_GPIO_Init+0x2f8>)
 8010db4:	4293      	cmp	r3, r2
 8010db6:	d007      	beq.n	8010dc8 <HAL_GPIO_Init+0x1d8>
 8010db8:	687b      	ldr	r3, [r7, #4]
 8010dba:	4a4c      	ldr	r2, [pc, #304]	; (8010eec <HAL_GPIO_Init+0x2fc>)
 8010dbc:	4293      	cmp	r3, r2
 8010dbe:	d101      	bne.n	8010dc4 <HAL_GPIO_Init+0x1d4>
 8010dc0:	2306      	movs	r3, #6
 8010dc2:	e00c      	b.n	8010dde <HAL_GPIO_Init+0x1ee>
 8010dc4:	2307      	movs	r3, #7
 8010dc6:	e00a      	b.n	8010dde <HAL_GPIO_Init+0x1ee>
 8010dc8:	2305      	movs	r3, #5
 8010dca:	e008      	b.n	8010dde <HAL_GPIO_Init+0x1ee>
 8010dcc:	2304      	movs	r3, #4
 8010dce:	e006      	b.n	8010dde <HAL_GPIO_Init+0x1ee>
 8010dd0:	2303      	movs	r3, #3
 8010dd2:	e004      	b.n	8010dde <HAL_GPIO_Init+0x1ee>
 8010dd4:	2302      	movs	r3, #2
 8010dd6:	e002      	b.n	8010dde <HAL_GPIO_Init+0x1ee>
 8010dd8:	2301      	movs	r3, #1
 8010dda:	e000      	b.n	8010dde <HAL_GPIO_Init+0x1ee>
 8010ddc:	2300      	movs	r3, #0
 8010dde:	697a      	ldr	r2, [r7, #20]
 8010de0:	f002 0203 	and.w	r2, r2, #3
 8010de4:	00d2      	lsls	r2, r2, #3
 8010de6:	4093      	lsls	r3, r2
 8010de8:	693a      	ldr	r2, [r7, #16]
 8010dea:	4313      	orrs	r3, r2
 8010dec:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2U] = temp;
 8010dee:	4938      	ldr	r1, [pc, #224]	; (8010ed0 <HAL_GPIO_Init+0x2e0>)
 8010df0:	697b      	ldr	r3, [r7, #20]
 8010df2:	089b      	lsrs	r3, r3, #2
 8010df4:	3318      	adds	r3, #24
 8010df6:	693a      	ldr	r2, [r7, #16]
 8010df8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8010dfc:	4b34      	ldr	r3, [pc, #208]	; (8010ed0 <HAL_GPIO_Init+0x2e0>)
 8010dfe:	681b      	ldr	r3, [r3, #0]
 8010e00:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8010e02:	68fb      	ldr	r3, [r7, #12]
 8010e04:	43db      	mvns	r3, r3
 8010e06:	693a      	ldr	r2, [r7, #16]
 8010e08:	4013      	ands	r3, r2
 8010e0a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8010e0c:	683b      	ldr	r3, [r7, #0]
 8010e0e:	685b      	ldr	r3, [r3, #4]
 8010e10:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8010e14:	2b00      	cmp	r3, #0
 8010e16:	d003      	beq.n	8010e20 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8010e18:	693a      	ldr	r2, [r7, #16]
 8010e1a:	68fb      	ldr	r3, [r7, #12]
 8010e1c:	4313      	orrs	r3, r2
 8010e1e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8010e20:	4a2b      	ldr	r2, [pc, #172]	; (8010ed0 <HAL_GPIO_Init+0x2e0>)
 8010e22:	693b      	ldr	r3, [r7, #16]
 8010e24:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8010e26:	4b2a      	ldr	r3, [pc, #168]	; (8010ed0 <HAL_GPIO_Init+0x2e0>)
 8010e28:	685b      	ldr	r3, [r3, #4]
 8010e2a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8010e2c:	68fb      	ldr	r3, [r7, #12]
 8010e2e:	43db      	mvns	r3, r3
 8010e30:	693a      	ldr	r2, [r7, #16]
 8010e32:	4013      	ands	r3, r2
 8010e34:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8010e36:	683b      	ldr	r3, [r7, #0]
 8010e38:	685b      	ldr	r3, [r3, #4]
 8010e3a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8010e3e:	2b00      	cmp	r3, #0
 8010e40:	d003      	beq.n	8010e4a <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8010e42:	693a      	ldr	r2, [r7, #16]
 8010e44:	68fb      	ldr	r3, [r7, #12]
 8010e46:	4313      	orrs	r3, r2
 8010e48:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8010e4a:	4a21      	ldr	r2, [pc, #132]	; (8010ed0 <HAL_GPIO_Init+0x2e0>)
 8010e4c:	693b      	ldr	r3, [r7, #16]
 8010e4e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8010e50:	4b1f      	ldr	r3, [pc, #124]	; (8010ed0 <HAL_GPIO_Init+0x2e0>)
 8010e52:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8010e56:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8010e58:	68fb      	ldr	r3, [r7, #12]
 8010e5a:	43db      	mvns	r3, r3
 8010e5c:	693a      	ldr	r2, [r7, #16]
 8010e5e:	4013      	ands	r3, r2
 8010e60:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8010e62:	683b      	ldr	r3, [r7, #0]
 8010e64:	685b      	ldr	r3, [r3, #4]
 8010e66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8010e6a:	2b00      	cmp	r3, #0
 8010e6c:	d003      	beq.n	8010e76 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8010e6e:	693a      	ldr	r2, [r7, #16]
 8010e70:	68fb      	ldr	r3, [r7, #12]
 8010e72:	4313      	orrs	r3, r2
 8010e74:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8010e76:	4a16      	ldr	r2, [pc, #88]	; (8010ed0 <HAL_GPIO_Init+0x2e0>)
 8010e78:	693b      	ldr	r3, [r7, #16]
 8010e7a:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        temp = EXTI->IMR1;
 8010e7e:	4b14      	ldr	r3, [pc, #80]	; (8010ed0 <HAL_GPIO_Init+0x2e0>)
 8010e80:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010e84:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8010e86:	68fb      	ldr	r3, [r7, #12]
 8010e88:	43db      	mvns	r3, r3
 8010e8a:	693a      	ldr	r2, [r7, #16]
 8010e8c:	4013      	ands	r3, r2
 8010e8e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8010e90:	683b      	ldr	r3, [r7, #0]
 8010e92:	685b      	ldr	r3, [r3, #4]
 8010e94:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8010e98:	2b00      	cmp	r3, #0
 8010e9a:	d003      	beq.n	8010ea4 <HAL_GPIO_Init+0x2b4>
        {
          temp |= iocurrent;
 8010e9c:	693a      	ldr	r2, [r7, #16]
 8010e9e:	68fb      	ldr	r3, [r7, #12]
 8010ea0:	4313      	orrs	r3, r2
 8010ea2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8010ea4:	4a0a      	ldr	r2, [pc, #40]	; (8010ed0 <HAL_GPIO_Init+0x2e0>)
 8010ea6:	693b      	ldr	r3, [r7, #16]
 8010ea8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
      }
    }

    position++;
 8010eac:	697b      	ldr	r3, [r7, #20]
 8010eae:	3301      	adds	r3, #1
 8010eb0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8010eb2:	683b      	ldr	r3, [r7, #0]
 8010eb4:	681a      	ldr	r2, [r3, #0]
 8010eb6:	697b      	ldr	r3, [r7, #20]
 8010eb8:	fa22 f303 	lsr.w	r3, r2, r3
 8010ebc:	2b00      	cmp	r3, #0
 8010ebe:	f47f ae9f 	bne.w	8010c00 <HAL_GPIO_Init+0x10>
  }
}
 8010ec2:	bf00      	nop
 8010ec4:	bf00      	nop
 8010ec6:	371c      	adds	r7, #28
 8010ec8:	46bd      	mov	sp, r7
 8010eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ece:	4770      	bx	lr
 8010ed0:	4002f400 	.word	0x4002f400
 8010ed4:	42020000 	.word	0x42020000
 8010ed8:	42020400 	.word	0x42020400
 8010edc:	42020800 	.word	0x42020800
 8010ee0:	42020c00 	.word	0x42020c00
 8010ee4:	42021000 	.word	0x42021000
 8010ee8:	42021400 	.word	0x42021400
 8010eec:	42021800 	.word	0x42021800

08010ef0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8010ef0:	b480      	push	{r7}
 8010ef2:	b083      	sub	sp, #12
 8010ef4:	af00      	add	r7, sp, #0
 8010ef6:	6078      	str	r0, [r7, #4]
 8010ef8:	460b      	mov	r3, r1
 8010efa:	807b      	strh	r3, [r7, #2]
 8010efc:	4613      	mov	r3, r2
 8010efe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8010f00:	787b      	ldrb	r3, [r7, #1]
 8010f02:	2b00      	cmp	r3, #0
 8010f04:	d003      	beq.n	8010f0e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8010f06:	887a      	ldrh	r2, [r7, #2]
 8010f08:	687b      	ldr	r3, [r7, #4]
 8010f0a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8010f0c:	e002      	b.n	8010f14 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8010f0e:	887a      	ldrh	r2, [r7, #2]
 8010f10:	687b      	ldr	r3, [r7, #4]
 8010f12:	629a      	str	r2, [r3, #40]	; 0x28
}
 8010f14:	bf00      	nop
 8010f16:	370c      	adds	r7, #12
 8010f18:	46bd      	mov	sp, r7
 8010f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f1e:	4770      	bx	lr

08010f20 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8010f20:	b480      	push	{r7}
 8010f22:	b085      	sub	sp, #20
 8010f24:	af00      	add	r7, sp, #0
 8010f26:	6078      	str	r0, [r7, #4]
 8010f28:	460b      	mov	r3, r1
 8010f2a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8010f2c:	687b      	ldr	r3, [r7, #4]
 8010f2e:	695b      	ldr	r3, [r3, #20]
 8010f30:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8010f32:	887a      	ldrh	r2, [r7, #2]
 8010f34:	68fb      	ldr	r3, [r7, #12]
 8010f36:	4013      	ands	r3, r2
 8010f38:	041a      	lsls	r2, r3, #16
 8010f3a:	68fb      	ldr	r3, [r7, #12]
 8010f3c:	43d9      	mvns	r1, r3
 8010f3e:	887b      	ldrh	r3, [r7, #2]
 8010f40:	400b      	ands	r3, r1
 8010f42:	431a      	orrs	r2, r3
 8010f44:	687b      	ldr	r3, [r7, #4]
 8010f46:	619a      	str	r2, [r3, #24]
}
 8010f48:	bf00      	nop
 8010f4a:	3714      	adds	r7, #20
 8010f4c:	46bd      	mov	sp, r7
 8010f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f52:	4770      	bx	lr

08010f54 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8010f54:	b580      	push	{r7, lr}
 8010f56:	b082      	sub	sp, #8
 8010f58:	af00      	add	r7, sp, #0
 8010f5a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8010f5c:	687b      	ldr	r3, [r7, #4]
 8010f5e:	2b00      	cmp	r3, #0
 8010f60:	d101      	bne.n	8010f66 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8010f62:	2301      	movs	r3, #1
 8010f64:	e081      	b.n	801106a <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8010f66:	687b      	ldr	r3, [r7, #4]
 8010f68:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8010f6c:	b2db      	uxtb	r3, r3
 8010f6e:	2b00      	cmp	r3, #0
 8010f70:	d106      	bne.n	8010f80 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8010f72:	687b      	ldr	r3, [r7, #4]
 8010f74:	2200      	movs	r2, #0
 8010f76:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8010f7a:	6878      	ldr	r0, [r7, #4]
 8010f7c:	f7fc fe92 	bl	800dca4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8010f80:	687b      	ldr	r3, [r7, #4]
 8010f82:	2224      	movs	r2, #36	; 0x24
 8010f84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8010f88:	687b      	ldr	r3, [r7, #4]
 8010f8a:	681b      	ldr	r3, [r3, #0]
 8010f8c:	681a      	ldr	r2, [r3, #0]
 8010f8e:	687b      	ldr	r3, [r7, #4]
 8010f90:	681b      	ldr	r3, [r3, #0]
 8010f92:	f022 0201 	bic.w	r2, r2, #1
 8010f96:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8010f98:	687b      	ldr	r3, [r7, #4]
 8010f9a:	685a      	ldr	r2, [r3, #4]
 8010f9c:	687b      	ldr	r3, [r7, #4]
 8010f9e:	681b      	ldr	r3, [r3, #0]
 8010fa0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8010fa4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8010fa6:	687b      	ldr	r3, [r7, #4]
 8010fa8:	681b      	ldr	r3, [r3, #0]
 8010faa:	689a      	ldr	r2, [r3, #8]
 8010fac:	687b      	ldr	r3, [r7, #4]
 8010fae:	681b      	ldr	r3, [r3, #0]
 8010fb0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8010fb4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8010fb6:	687b      	ldr	r3, [r7, #4]
 8010fb8:	68db      	ldr	r3, [r3, #12]
 8010fba:	2b01      	cmp	r3, #1
 8010fbc:	d107      	bne.n	8010fce <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8010fbe:	687b      	ldr	r3, [r7, #4]
 8010fc0:	689a      	ldr	r2, [r3, #8]
 8010fc2:	687b      	ldr	r3, [r7, #4]
 8010fc4:	681b      	ldr	r3, [r3, #0]
 8010fc6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8010fca:	609a      	str	r2, [r3, #8]
 8010fcc:	e006      	b.n	8010fdc <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8010fce:	687b      	ldr	r3, [r7, #4]
 8010fd0:	689a      	ldr	r2, [r3, #8]
 8010fd2:	687b      	ldr	r3, [r7, #4]
 8010fd4:	681b      	ldr	r3, [r3, #0]
 8010fd6:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8010fda:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8010fdc:	687b      	ldr	r3, [r7, #4]
 8010fde:	68db      	ldr	r3, [r3, #12]
 8010fe0:	2b02      	cmp	r3, #2
 8010fe2:	d104      	bne.n	8010fee <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8010fe4:	687b      	ldr	r3, [r7, #4]
 8010fe6:	681b      	ldr	r3, [r3, #0]
 8010fe8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8010fec:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8010fee:	687b      	ldr	r3, [r7, #4]
 8010ff0:	681b      	ldr	r3, [r3, #0]
 8010ff2:	685b      	ldr	r3, [r3, #4]
 8010ff4:	687a      	ldr	r2, [r7, #4]
 8010ff6:	6812      	ldr	r2, [r2, #0]
 8010ff8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8010ffc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8011000:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8011002:	687b      	ldr	r3, [r7, #4]
 8011004:	681b      	ldr	r3, [r3, #0]
 8011006:	68da      	ldr	r2, [r3, #12]
 8011008:	687b      	ldr	r3, [r7, #4]
 801100a:	681b      	ldr	r3, [r3, #0]
 801100c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8011010:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8011012:	687b      	ldr	r3, [r7, #4]
 8011014:	691a      	ldr	r2, [r3, #16]
 8011016:	687b      	ldr	r3, [r7, #4]
 8011018:	695b      	ldr	r3, [r3, #20]
 801101a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 801101e:	687b      	ldr	r3, [r7, #4]
 8011020:	699b      	ldr	r3, [r3, #24]
 8011022:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8011024:	687b      	ldr	r3, [r7, #4]
 8011026:	681b      	ldr	r3, [r3, #0]
 8011028:	430a      	orrs	r2, r1
 801102a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 801102c:	687b      	ldr	r3, [r7, #4]
 801102e:	69d9      	ldr	r1, [r3, #28]
 8011030:	687b      	ldr	r3, [r7, #4]
 8011032:	6a1a      	ldr	r2, [r3, #32]
 8011034:	687b      	ldr	r3, [r7, #4]
 8011036:	681b      	ldr	r3, [r3, #0]
 8011038:	430a      	orrs	r2, r1
 801103a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 801103c:	687b      	ldr	r3, [r7, #4]
 801103e:	681b      	ldr	r3, [r3, #0]
 8011040:	681a      	ldr	r2, [r3, #0]
 8011042:	687b      	ldr	r3, [r7, #4]
 8011044:	681b      	ldr	r3, [r3, #0]
 8011046:	f042 0201 	orr.w	r2, r2, #1
 801104a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 801104c:	687b      	ldr	r3, [r7, #4]
 801104e:	2200      	movs	r2, #0
 8011050:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8011052:	687b      	ldr	r3, [r7, #4]
 8011054:	2220      	movs	r2, #32
 8011056:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 801105a:	687b      	ldr	r3, [r7, #4]
 801105c:	2200      	movs	r2, #0
 801105e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8011060:	687b      	ldr	r3, [r7, #4]
 8011062:	2200      	movs	r2, #0
 8011064:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8011068:	2300      	movs	r3, #0
}
 801106a:	4618      	mov	r0, r3
 801106c:	3708      	adds	r7, #8
 801106e:	46bd      	mov	sp, r7
 8011070:	bd80      	pop	{r7, pc}
	...

08011074 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8011074:	b580      	push	{r7, lr}
 8011076:	b088      	sub	sp, #32
 8011078:	af02      	add	r7, sp, #8
 801107a:	60f8      	str	r0, [r7, #12]
 801107c:	607a      	str	r2, [r7, #4]
 801107e:	461a      	mov	r2, r3
 8011080:	460b      	mov	r3, r1
 8011082:	817b      	strh	r3, [r7, #10]
 8011084:	4613      	mov	r3, r2
 8011086:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8011088:	68fb      	ldr	r3, [r7, #12]
 801108a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 801108e:	b2db      	uxtb	r3, r3
 8011090:	2b20      	cmp	r3, #32
 8011092:	f040 80da 	bne.w	801124a <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8011096:	68fb      	ldr	r3, [r7, #12]
 8011098:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 801109c:	2b01      	cmp	r3, #1
 801109e:	d101      	bne.n	80110a4 <HAL_I2C_Master_Transmit+0x30>
 80110a0:	2302      	movs	r3, #2
 80110a2:	e0d3      	b.n	801124c <HAL_I2C_Master_Transmit+0x1d8>
 80110a4:	68fb      	ldr	r3, [r7, #12]
 80110a6:	2201      	movs	r2, #1
 80110a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80110ac:	f7fd fcc4 	bl	800ea38 <HAL_GetTick>
 80110b0:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80110b2:	697b      	ldr	r3, [r7, #20]
 80110b4:	9300      	str	r3, [sp, #0]
 80110b6:	2319      	movs	r3, #25
 80110b8:	2201      	movs	r2, #1
 80110ba:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80110be:	68f8      	ldr	r0, [r7, #12]
 80110c0:	f000 f9e6 	bl	8011490 <I2C_WaitOnFlagUntilTimeout>
 80110c4:	4603      	mov	r3, r0
 80110c6:	2b00      	cmp	r3, #0
 80110c8:	d001      	beq.n	80110ce <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 80110ca:	2301      	movs	r3, #1
 80110cc:	e0be      	b.n	801124c <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80110ce:	68fb      	ldr	r3, [r7, #12]
 80110d0:	2221      	movs	r2, #33	; 0x21
 80110d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80110d6:	68fb      	ldr	r3, [r7, #12]
 80110d8:	2210      	movs	r2, #16
 80110da:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80110de:	68fb      	ldr	r3, [r7, #12]
 80110e0:	2200      	movs	r2, #0
 80110e2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80110e4:	68fb      	ldr	r3, [r7, #12]
 80110e6:	687a      	ldr	r2, [r7, #4]
 80110e8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80110ea:	68fb      	ldr	r3, [r7, #12]
 80110ec:	893a      	ldrh	r2, [r7, #8]
 80110ee:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80110f0:	68fb      	ldr	r3, [r7, #12]
 80110f2:	2200      	movs	r2, #0
 80110f4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80110f6:	68fb      	ldr	r3, [r7, #12]
 80110f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80110fa:	b29b      	uxth	r3, r3
 80110fc:	2bff      	cmp	r3, #255	; 0xff
 80110fe:	d90e      	bls.n	801111e <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8011100:	68fb      	ldr	r3, [r7, #12]
 8011102:	22ff      	movs	r2, #255	; 0xff
 8011104:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8011106:	68fb      	ldr	r3, [r7, #12]
 8011108:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801110a:	b2da      	uxtb	r2, r3
 801110c:	8979      	ldrh	r1, [r7, #10]
 801110e:	4b51      	ldr	r3, [pc, #324]	; (8011254 <HAL_I2C_Master_Transmit+0x1e0>)
 8011110:	9300      	str	r3, [sp, #0]
 8011112:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8011116:	68f8      	ldr	r0, [r7, #12]
 8011118:	f000 fbf6 	bl	8011908 <I2C_TransferConfig>
 801111c:	e06c      	b.n	80111f8 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 801111e:	68fb      	ldr	r3, [r7, #12]
 8011120:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8011122:	b29a      	uxth	r2, r3
 8011124:	68fb      	ldr	r3, [r7, #12]
 8011126:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8011128:	68fb      	ldr	r3, [r7, #12]
 801112a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801112c:	b2da      	uxtb	r2, r3
 801112e:	8979      	ldrh	r1, [r7, #10]
 8011130:	4b48      	ldr	r3, [pc, #288]	; (8011254 <HAL_I2C_Master_Transmit+0x1e0>)
 8011132:	9300      	str	r3, [sp, #0]
 8011134:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8011138:	68f8      	ldr	r0, [r7, #12]
 801113a:	f000 fbe5 	bl	8011908 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 801113e:	e05b      	b.n	80111f8 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8011140:	697a      	ldr	r2, [r7, #20]
 8011142:	6a39      	ldr	r1, [r7, #32]
 8011144:	68f8      	ldr	r0, [r7, #12]
 8011146:	f000 f9f2 	bl	801152e <I2C_WaitOnTXISFlagUntilTimeout>
 801114a:	4603      	mov	r3, r0
 801114c:	2b00      	cmp	r3, #0
 801114e:	d001      	beq.n	8011154 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8011150:	2301      	movs	r3, #1
 8011152:	e07b      	b.n	801124c <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8011154:	68fb      	ldr	r3, [r7, #12]
 8011156:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011158:	781a      	ldrb	r2, [r3, #0]
 801115a:	68fb      	ldr	r3, [r7, #12]
 801115c:	681b      	ldr	r3, [r3, #0]
 801115e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8011160:	68fb      	ldr	r3, [r7, #12]
 8011162:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011164:	1c5a      	adds	r2, r3, #1
 8011166:	68fb      	ldr	r3, [r7, #12]
 8011168:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 801116a:	68fb      	ldr	r3, [r7, #12]
 801116c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801116e:	b29b      	uxth	r3, r3
 8011170:	3b01      	subs	r3, #1
 8011172:	b29a      	uxth	r2, r3
 8011174:	68fb      	ldr	r3, [r7, #12]
 8011176:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8011178:	68fb      	ldr	r3, [r7, #12]
 801117a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801117c:	3b01      	subs	r3, #1
 801117e:	b29a      	uxth	r2, r3
 8011180:	68fb      	ldr	r3, [r7, #12]
 8011182:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8011184:	68fb      	ldr	r3, [r7, #12]
 8011186:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8011188:	b29b      	uxth	r3, r3
 801118a:	2b00      	cmp	r3, #0
 801118c:	d034      	beq.n	80111f8 <HAL_I2C_Master_Transmit+0x184>
 801118e:	68fb      	ldr	r3, [r7, #12]
 8011190:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8011192:	2b00      	cmp	r3, #0
 8011194:	d130      	bne.n	80111f8 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8011196:	697b      	ldr	r3, [r7, #20]
 8011198:	9300      	str	r3, [sp, #0]
 801119a:	6a3b      	ldr	r3, [r7, #32]
 801119c:	2200      	movs	r2, #0
 801119e:	2180      	movs	r1, #128	; 0x80
 80111a0:	68f8      	ldr	r0, [r7, #12]
 80111a2:	f000 f975 	bl	8011490 <I2C_WaitOnFlagUntilTimeout>
 80111a6:	4603      	mov	r3, r0
 80111a8:	2b00      	cmp	r3, #0
 80111aa:	d001      	beq.n	80111b0 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 80111ac:	2301      	movs	r3, #1
 80111ae:	e04d      	b.n	801124c <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80111b0:	68fb      	ldr	r3, [r7, #12]
 80111b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80111b4:	b29b      	uxth	r3, r3
 80111b6:	2bff      	cmp	r3, #255	; 0xff
 80111b8:	d90e      	bls.n	80111d8 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80111ba:	68fb      	ldr	r3, [r7, #12]
 80111bc:	22ff      	movs	r2, #255	; 0xff
 80111be:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80111c0:	68fb      	ldr	r3, [r7, #12]
 80111c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80111c4:	b2da      	uxtb	r2, r3
 80111c6:	8979      	ldrh	r1, [r7, #10]
 80111c8:	2300      	movs	r3, #0
 80111ca:	9300      	str	r3, [sp, #0]
 80111cc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80111d0:	68f8      	ldr	r0, [r7, #12]
 80111d2:	f000 fb99 	bl	8011908 <I2C_TransferConfig>
 80111d6:	e00f      	b.n	80111f8 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80111d8:	68fb      	ldr	r3, [r7, #12]
 80111da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80111dc:	b29a      	uxth	r2, r3
 80111de:	68fb      	ldr	r3, [r7, #12]
 80111e0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80111e2:	68fb      	ldr	r3, [r7, #12]
 80111e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80111e6:	b2da      	uxtb	r2, r3
 80111e8:	8979      	ldrh	r1, [r7, #10]
 80111ea:	2300      	movs	r3, #0
 80111ec:	9300      	str	r3, [sp, #0]
 80111ee:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80111f2:	68f8      	ldr	r0, [r7, #12]
 80111f4:	f000 fb88 	bl	8011908 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80111f8:	68fb      	ldr	r3, [r7, #12]
 80111fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80111fc:	b29b      	uxth	r3, r3
 80111fe:	2b00      	cmp	r3, #0
 8011200:	d19e      	bne.n	8011140 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8011202:	697a      	ldr	r2, [r7, #20]
 8011204:	6a39      	ldr	r1, [r7, #32]
 8011206:	68f8      	ldr	r0, [r7, #12]
 8011208:	f000 f9d8 	bl	80115bc <I2C_WaitOnSTOPFlagUntilTimeout>
 801120c:	4603      	mov	r3, r0
 801120e:	2b00      	cmp	r3, #0
 8011210:	d001      	beq.n	8011216 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8011212:	2301      	movs	r3, #1
 8011214:	e01a      	b.n	801124c <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8011216:	68fb      	ldr	r3, [r7, #12]
 8011218:	681b      	ldr	r3, [r3, #0]
 801121a:	2220      	movs	r2, #32
 801121c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 801121e:	68fb      	ldr	r3, [r7, #12]
 8011220:	681b      	ldr	r3, [r3, #0]
 8011222:	6859      	ldr	r1, [r3, #4]
 8011224:	68fb      	ldr	r3, [r7, #12]
 8011226:	681a      	ldr	r2, [r3, #0]
 8011228:	4b0b      	ldr	r3, [pc, #44]	; (8011258 <HAL_I2C_Master_Transmit+0x1e4>)
 801122a:	400b      	ands	r3, r1
 801122c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 801122e:	68fb      	ldr	r3, [r7, #12]
 8011230:	2220      	movs	r2, #32
 8011232:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8011236:	68fb      	ldr	r3, [r7, #12]
 8011238:	2200      	movs	r2, #0
 801123a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 801123e:	68fb      	ldr	r3, [r7, #12]
 8011240:	2200      	movs	r2, #0
 8011242:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8011246:	2300      	movs	r3, #0
 8011248:	e000      	b.n	801124c <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 801124a:	2302      	movs	r3, #2
  }
}
 801124c:	4618      	mov	r0, r3
 801124e:	3718      	adds	r7, #24
 8011250:	46bd      	mov	sp, r7
 8011252:	bd80      	pop	{r7, pc}
 8011254:	80002000 	.word	0x80002000
 8011258:	fe00e800 	.word	0xfe00e800

0801125c <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 801125c:	b580      	push	{r7, lr}
 801125e:	b088      	sub	sp, #32
 8011260:	af02      	add	r7, sp, #8
 8011262:	60f8      	str	r0, [r7, #12]
 8011264:	607a      	str	r2, [r7, #4]
 8011266:	461a      	mov	r2, r3
 8011268:	460b      	mov	r3, r1
 801126a:	817b      	strh	r3, [r7, #10]
 801126c:	4613      	mov	r3, r2
 801126e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8011270:	68fb      	ldr	r3, [r7, #12]
 8011272:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8011276:	b2db      	uxtb	r3, r3
 8011278:	2b20      	cmp	r3, #32
 801127a:	f040 80db 	bne.w	8011434 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 801127e:	68fb      	ldr	r3, [r7, #12]
 8011280:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8011284:	2b01      	cmp	r3, #1
 8011286:	d101      	bne.n	801128c <HAL_I2C_Master_Receive+0x30>
 8011288:	2302      	movs	r3, #2
 801128a:	e0d4      	b.n	8011436 <HAL_I2C_Master_Receive+0x1da>
 801128c:	68fb      	ldr	r3, [r7, #12]
 801128e:	2201      	movs	r2, #1
 8011290:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8011294:	f7fd fbd0 	bl	800ea38 <HAL_GetTick>
 8011298:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 801129a:	697b      	ldr	r3, [r7, #20]
 801129c:	9300      	str	r3, [sp, #0]
 801129e:	2319      	movs	r3, #25
 80112a0:	2201      	movs	r2, #1
 80112a2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80112a6:	68f8      	ldr	r0, [r7, #12]
 80112a8:	f000 f8f2 	bl	8011490 <I2C_WaitOnFlagUntilTimeout>
 80112ac:	4603      	mov	r3, r0
 80112ae:	2b00      	cmp	r3, #0
 80112b0:	d001      	beq.n	80112b6 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 80112b2:	2301      	movs	r3, #1
 80112b4:	e0bf      	b.n	8011436 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80112b6:	68fb      	ldr	r3, [r7, #12]
 80112b8:	2222      	movs	r2, #34	; 0x22
 80112ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80112be:	68fb      	ldr	r3, [r7, #12]
 80112c0:	2210      	movs	r2, #16
 80112c2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80112c6:	68fb      	ldr	r3, [r7, #12]
 80112c8:	2200      	movs	r2, #0
 80112ca:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80112cc:	68fb      	ldr	r3, [r7, #12]
 80112ce:	687a      	ldr	r2, [r7, #4]
 80112d0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80112d2:	68fb      	ldr	r3, [r7, #12]
 80112d4:	893a      	ldrh	r2, [r7, #8]
 80112d6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80112d8:	68fb      	ldr	r3, [r7, #12]
 80112da:	2200      	movs	r2, #0
 80112dc:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80112de:	68fb      	ldr	r3, [r7, #12]
 80112e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80112e2:	b29b      	uxth	r3, r3
 80112e4:	2bff      	cmp	r3, #255	; 0xff
 80112e6:	d90e      	bls.n	8011306 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80112e8:	68fb      	ldr	r3, [r7, #12]
 80112ea:	22ff      	movs	r2, #255	; 0xff
 80112ec:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80112ee:	68fb      	ldr	r3, [r7, #12]
 80112f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80112f2:	b2da      	uxtb	r2, r3
 80112f4:	8979      	ldrh	r1, [r7, #10]
 80112f6:	4b52      	ldr	r3, [pc, #328]	; (8011440 <HAL_I2C_Master_Receive+0x1e4>)
 80112f8:	9300      	str	r3, [sp, #0]
 80112fa:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80112fe:	68f8      	ldr	r0, [r7, #12]
 8011300:	f000 fb02 	bl	8011908 <I2C_TransferConfig>
 8011304:	e06d      	b.n	80113e2 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8011306:	68fb      	ldr	r3, [r7, #12]
 8011308:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801130a:	b29a      	uxth	r2, r3
 801130c:	68fb      	ldr	r3, [r7, #12]
 801130e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8011310:	68fb      	ldr	r3, [r7, #12]
 8011312:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8011314:	b2da      	uxtb	r2, r3
 8011316:	8979      	ldrh	r1, [r7, #10]
 8011318:	4b49      	ldr	r3, [pc, #292]	; (8011440 <HAL_I2C_Master_Receive+0x1e4>)
 801131a:	9300      	str	r3, [sp, #0]
 801131c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8011320:	68f8      	ldr	r0, [r7, #12]
 8011322:	f000 faf1 	bl	8011908 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8011326:	e05c      	b.n	80113e2 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8011328:	697a      	ldr	r2, [r7, #20]
 801132a:	6a39      	ldr	r1, [r7, #32]
 801132c:	68f8      	ldr	r0, [r7, #12]
 801132e:	f000 f989 	bl	8011644 <I2C_WaitOnRXNEFlagUntilTimeout>
 8011332:	4603      	mov	r3, r0
 8011334:	2b00      	cmp	r3, #0
 8011336:	d001      	beq.n	801133c <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8011338:	2301      	movs	r3, #1
 801133a:	e07c      	b.n	8011436 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 801133c:	68fb      	ldr	r3, [r7, #12]
 801133e:	681b      	ldr	r3, [r3, #0]
 8011340:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8011342:	68fb      	ldr	r3, [r7, #12]
 8011344:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011346:	b2d2      	uxtb	r2, r2
 8011348:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 801134a:	68fb      	ldr	r3, [r7, #12]
 801134c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801134e:	1c5a      	adds	r2, r3, #1
 8011350:	68fb      	ldr	r3, [r7, #12]
 8011352:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8011354:	68fb      	ldr	r3, [r7, #12]
 8011356:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8011358:	3b01      	subs	r3, #1
 801135a:	b29a      	uxth	r2, r3
 801135c:	68fb      	ldr	r3, [r7, #12]
 801135e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8011360:	68fb      	ldr	r3, [r7, #12]
 8011362:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8011364:	b29b      	uxth	r3, r3
 8011366:	3b01      	subs	r3, #1
 8011368:	b29a      	uxth	r2, r3
 801136a:	68fb      	ldr	r3, [r7, #12]
 801136c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 801136e:	68fb      	ldr	r3, [r7, #12]
 8011370:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8011372:	b29b      	uxth	r3, r3
 8011374:	2b00      	cmp	r3, #0
 8011376:	d034      	beq.n	80113e2 <HAL_I2C_Master_Receive+0x186>
 8011378:	68fb      	ldr	r3, [r7, #12]
 801137a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801137c:	2b00      	cmp	r3, #0
 801137e:	d130      	bne.n	80113e2 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8011380:	697b      	ldr	r3, [r7, #20]
 8011382:	9300      	str	r3, [sp, #0]
 8011384:	6a3b      	ldr	r3, [r7, #32]
 8011386:	2200      	movs	r2, #0
 8011388:	2180      	movs	r1, #128	; 0x80
 801138a:	68f8      	ldr	r0, [r7, #12]
 801138c:	f000 f880 	bl	8011490 <I2C_WaitOnFlagUntilTimeout>
 8011390:	4603      	mov	r3, r0
 8011392:	2b00      	cmp	r3, #0
 8011394:	d001      	beq.n	801139a <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8011396:	2301      	movs	r3, #1
 8011398:	e04d      	b.n	8011436 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 801139a:	68fb      	ldr	r3, [r7, #12]
 801139c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801139e:	b29b      	uxth	r3, r3
 80113a0:	2bff      	cmp	r3, #255	; 0xff
 80113a2:	d90e      	bls.n	80113c2 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80113a4:	68fb      	ldr	r3, [r7, #12]
 80113a6:	22ff      	movs	r2, #255	; 0xff
 80113a8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80113aa:	68fb      	ldr	r3, [r7, #12]
 80113ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80113ae:	b2da      	uxtb	r2, r3
 80113b0:	8979      	ldrh	r1, [r7, #10]
 80113b2:	2300      	movs	r3, #0
 80113b4:	9300      	str	r3, [sp, #0]
 80113b6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80113ba:	68f8      	ldr	r0, [r7, #12]
 80113bc:	f000 faa4 	bl	8011908 <I2C_TransferConfig>
 80113c0:	e00f      	b.n	80113e2 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80113c2:	68fb      	ldr	r3, [r7, #12]
 80113c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80113c6:	b29a      	uxth	r2, r3
 80113c8:	68fb      	ldr	r3, [r7, #12]
 80113ca:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80113cc:	68fb      	ldr	r3, [r7, #12]
 80113ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80113d0:	b2da      	uxtb	r2, r3
 80113d2:	8979      	ldrh	r1, [r7, #10]
 80113d4:	2300      	movs	r3, #0
 80113d6:	9300      	str	r3, [sp, #0]
 80113d8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80113dc:	68f8      	ldr	r0, [r7, #12]
 80113de:	f000 fa93 	bl	8011908 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80113e2:	68fb      	ldr	r3, [r7, #12]
 80113e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80113e6:	b29b      	uxth	r3, r3
 80113e8:	2b00      	cmp	r3, #0
 80113ea:	d19d      	bne.n	8011328 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80113ec:	697a      	ldr	r2, [r7, #20]
 80113ee:	6a39      	ldr	r1, [r7, #32]
 80113f0:	68f8      	ldr	r0, [r7, #12]
 80113f2:	f000 f8e3 	bl	80115bc <I2C_WaitOnSTOPFlagUntilTimeout>
 80113f6:	4603      	mov	r3, r0
 80113f8:	2b00      	cmp	r3, #0
 80113fa:	d001      	beq.n	8011400 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 80113fc:	2301      	movs	r3, #1
 80113fe:	e01a      	b.n	8011436 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8011400:	68fb      	ldr	r3, [r7, #12]
 8011402:	681b      	ldr	r3, [r3, #0]
 8011404:	2220      	movs	r2, #32
 8011406:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8011408:	68fb      	ldr	r3, [r7, #12]
 801140a:	681b      	ldr	r3, [r3, #0]
 801140c:	6859      	ldr	r1, [r3, #4]
 801140e:	68fb      	ldr	r3, [r7, #12]
 8011410:	681a      	ldr	r2, [r3, #0]
 8011412:	4b0c      	ldr	r3, [pc, #48]	; (8011444 <HAL_I2C_Master_Receive+0x1e8>)
 8011414:	400b      	ands	r3, r1
 8011416:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8011418:	68fb      	ldr	r3, [r7, #12]
 801141a:	2220      	movs	r2, #32
 801141c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8011420:	68fb      	ldr	r3, [r7, #12]
 8011422:	2200      	movs	r2, #0
 8011424:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8011428:	68fb      	ldr	r3, [r7, #12]
 801142a:	2200      	movs	r2, #0
 801142c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8011430:	2300      	movs	r3, #0
 8011432:	e000      	b.n	8011436 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8011434:	2302      	movs	r3, #2
  }
}
 8011436:	4618      	mov	r0, r3
 8011438:	3718      	adds	r7, #24
 801143a:	46bd      	mov	sp, r7
 801143c:	bd80      	pop	{r7, pc}
 801143e:	bf00      	nop
 8011440:	80002400 	.word	0x80002400
 8011444:	fe00e800 	.word	0xfe00e800

08011448 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8011448:	b480      	push	{r7}
 801144a:	b083      	sub	sp, #12
 801144c:	af00      	add	r7, sp, #0
 801144e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8011450:	687b      	ldr	r3, [r7, #4]
 8011452:	681b      	ldr	r3, [r3, #0]
 8011454:	699b      	ldr	r3, [r3, #24]
 8011456:	f003 0302 	and.w	r3, r3, #2
 801145a:	2b02      	cmp	r3, #2
 801145c:	d103      	bne.n	8011466 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 801145e:	687b      	ldr	r3, [r7, #4]
 8011460:	681b      	ldr	r3, [r3, #0]
 8011462:	2200      	movs	r2, #0
 8011464:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8011466:	687b      	ldr	r3, [r7, #4]
 8011468:	681b      	ldr	r3, [r3, #0]
 801146a:	699b      	ldr	r3, [r3, #24]
 801146c:	f003 0301 	and.w	r3, r3, #1
 8011470:	2b01      	cmp	r3, #1
 8011472:	d007      	beq.n	8011484 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8011474:	687b      	ldr	r3, [r7, #4]
 8011476:	681b      	ldr	r3, [r3, #0]
 8011478:	699a      	ldr	r2, [r3, #24]
 801147a:	687b      	ldr	r3, [r7, #4]
 801147c:	681b      	ldr	r3, [r3, #0]
 801147e:	f042 0201 	orr.w	r2, r2, #1
 8011482:	619a      	str	r2, [r3, #24]
  }
}
 8011484:	bf00      	nop
 8011486:	370c      	adds	r7, #12
 8011488:	46bd      	mov	sp, r7
 801148a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801148e:	4770      	bx	lr

08011490 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8011490:	b580      	push	{r7, lr}
 8011492:	b084      	sub	sp, #16
 8011494:	af00      	add	r7, sp, #0
 8011496:	60f8      	str	r0, [r7, #12]
 8011498:	60b9      	str	r1, [r7, #8]
 801149a:	603b      	str	r3, [r7, #0]
 801149c:	4613      	mov	r3, r2
 801149e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80114a0:	e031      	b.n	8011506 <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80114a2:	683b      	ldr	r3, [r7, #0]
 80114a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80114a8:	d02d      	beq.n	8011506 <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80114aa:	f7fd fac5 	bl	800ea38 <HAL_GetTick>
 80114ae:	4602      	mov	r2, r0
 80114b0:	69bb      	ldr	r3, [r7, #24]
 80114b2:	1ad3      	subs	r3, r2, r3
 80114b4:	683a      	ldr	r2, [r7, #0]
 80114b6:	429a      	cmp	r2, r3
 80114b8:	d302      	bcc.n	80114c0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80114ba:	683b      	ldr	r3, [r7, #0]
 80114bc:	2b00      	cmp	r3, #0
 80114be:	d122      	bne.n	8011506 <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80114c0:	68fb      	ldr	r3, [r7, #12]
 80114c2:	681b      	ldr	r3, [r3, #0]
 80114c4:	699a      	ldr	r2, [r3, #24]
 80114c6:	68bb      	ldr	r3, [r7, #8]
 80114c8:	4013      	ands	r3, r2
 80114ca:	68ba      	ldr	r2, [r7, #8]
 80114cc:	429a      	cmp	r2, r3
 80114ce:	bf0c      	ite	eq
 80114d0:	2301      	moveq	r3, #1
 80114d2:	2300      	movne	r3, #0
 80114d4:	b2db      	uxtb	r3, r3
 80114d6:	461a      	mov	r2, r3
 80114d8:	79fb      	ldrb	r3, [r7, #7]
 80114da:	429a      	cmp	r2, r3
 80114dc:	d113      	bne.n	8011506 <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80114de:	68fb      	ldr	r3, [r7, #12]
 80114e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80114e2:	f043 0220 	orr.w	r2, r3, #32
 80114e6:	68fb      	ldr	r3, [r7, #12]
 80114e8:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80114ea:	68fb      	ldr	r3, [r7, #12]
 80114ec:	2220      	movs	r2, #32
 80114ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80114f2:	68fb      	ldr	r3, [r7, #12]
 80114f4:	2200      	movs	r2, #0
 80114f6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80114fa:	68fb      	ldr	r3, [r7, #12]
 80114fc:	2200      	movs	r2, #0
 80114fe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 8011502:	2301      	movs	r3, #1
 8011504:	e00f      	b.n	8011526 <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8011506:	68fb      	ldr	r3, [r7, #12]
 8011508:	681b      	ldr	r3, [r3, #0]
 801150a:	699a      	ldr	r2, [r3, #24]
 801150c:	68bb      	ldr	r3, [r7, #8]
 801150e:	4013      	ands	r3, r2
 8011510:	68ba      	ldr	r2, [r7, #8]
 8011512:	429a      	cmp	r2, r3
 8011514:	bf0c      	ite	eq
 8011516:	2301      	moveq	r3, #1
 8011518:	2300      	movne	r3, #0
 801151a:	b2db      	uxtb	r3, r3
 801151c:	461a      	mov	r2, r3
 801151e:	79fb      	ldrb	r3, [r7, #7]
 8011520:	429a      	cmp	r2, r3
 8011522:	d0be      	beq.n	80114a2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8011524:	2300      	movs	r3, #0
}
 8011526:	4618      	mov	r0, r3
 8011528:	3710      	adds	r7, #16
 801152a:	46bd      	mov	sp, r7
 801152c:	bd80      	pop	{r7, pc}

0801152e <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 801152e:	b580      	push	{r7, lr}
 8011530:	b084      	sub	sp, #16
 8011532:	af00      	add	r7, sp, #0
 8011534:	60f8      	str	r0, [r7, #12]
 8011536:	60b9      	str	r1, [r7, #8]
 8011538:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 801153a:	e033      	b.n	80115a4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 801153c:	687a      	ldr	r2, [r7, #4]
 801153e:	68b9      	ldr	r1, [r7, #8]
 8011540:	68f8      	ldr	r0, [r7, #12]
 8011542:	f000 f901 	bl	8011748 <I2C_IsErrorOccurred>
 8011546:	4603      	mov	r3, r0
 8011548:	2b00      	cmp	r3, #0
 801154a:	d001      	beq.n	8011550 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 801154c:	2301      	movs	r3, #1
 801154e:	e031      	b.n	80115b4 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8011550:	68bb      	ldr	r3, [r7, #8]
 8011552:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011556:	d025      	beq.n	80115a4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8011558:	f7fd fa6e 	bl	800ea38 <HAL_GetTick>
 801155c:	4602      	mov	r2, r0
 801155e:	687b      	ldr	r3, [r7, #4]
 8011560:	1ad3      	subs	r3, r2, r3
 8011562:	68ba      	ldr	r2, [r7, #8]
 8011564:	429a      	cmp	r2, r3
 8011566:	d302      	bcc.n	801156e <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8011568:	68bb      	ldr	r3, [r7, #8]
 801156a:	2b00      	cmp	r3, #0
 801156c:	d11a      	bne.n	80115a4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 801156e:	68fb      	ldr	r3, [r7, #12]
 8011570:	681b      	ldr	r3, [r3, #0]
 8011572:	699b      	ldr	r3, [r3, #24]
 8011574:	f003 0302 	and.w	r3, r3, #2
 8011578:	2b02      	cmp	r3, #2
 801157a:	d013      	beq.n	80115a4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 801157c:	68fb      	ldr	r3, [r7, #12]
 801157e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011580:	f043 0220 	orr.w	r2, r3, #32
 8011584:	68fb      	ldr	r3, [r7, #12]
 8011586:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8011588:	68fb      	ldr	r3, [r7, #12]
 801158a:	2220      	movs	r2, #32
 801158c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8011590:	68fb      	ldr	r3, [r7, #12]
 8011592:	2200      	movs	r2, #0
 8011594:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8011598:	68fb      	ldr	r3, [r7, #12]
 801159a:	2200      	movs	r2, #0
 801159c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 80115a0:	2301      	movs	r3, #1
 80115a2:	e007      	b.n	80115b4 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80115a4:	68fb      	ldr	r3, [r7, #12]
 80115a6:	681b      	ldr	r3, [r3, #0]
 80115a8:	699b      	ldr	r3, [r3, #24]
 80115aa:	f003 0302 	and.w	r3, r3, #2
 80115ae:	2b02      	cmp	r3, #2
 80115b0:	d1c4      	bne.n	801153c <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80115b2:	2300      	movs	r3, #0
}
 80115b4:	4618      	mov	r0, r3
 80115b6:	3710      	adds	r7, #16
 80115b8:	46bd      	mov	sp, r7
 80115ba:	bd80      	pop	{r7, pc}

080115bc <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80115bc:	b580      	push	{r7, lr}
 80115be:	b084      	sub	sp, #16
 80115c0:	af00      	add	r7, sp, #0
 80115c2:	60f8      	str	r0, [r7, #12]
 80115c4:	60b9      	str	r1, [r7, #8]
 80115c6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80115c8:	e02f      	b.n	801162a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80115ca:	687a      	ldr	r2, [r7, #4]
 80115cc:	68b9      	ldr	r1, [r7, #8]
 80115ce:	68f8      	ldr	r0, [r7, #12]
 80115d0:	f000 f8ba 	bl	8011748 <I2C_IsErrorOccurred>
 80115d4:	4603      	mov	r3, r0
 80115d6:	2b00      	cmp	r3, #0
 80115d8:	d001      	beq.n	80115de <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80115da:	2301      	movs	r3, #1
 80115dc:	e02d      	b.n	801163a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80115de:	f7fd fa2b 	bl	800ea38 <HAL_GetTick>
 80115e2:	4602      	mov	r2, r0
 80115e4:	687b      	ldr	r3, [r7, #4]
 80115e6:	1ad3      	subs	r3, r2, r3
 80115e8:	68ba      	ldr	r2, [r7, #8]
 80115ea:	429a      	cmp	r2, r3
 80115ec:	d302      	bcc.n	80115f4 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80115ee:	68bb      	ldr	r3, [r7, #8]
 80115f0:	2b00      	cmp	r3, #0
 80115f2:	d11a      	bne.n	801162a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80115f4:	68fb      	ldr	r3, [r7, #12]
 80115f6:	681b      	ldr	r3, [r3, #0]
 80115f8:	699b      	ldr	r3, [r3, #24]
 80115fa:	f003 0320 	and.w	r3, r3, #32
 80115fe:	2b20      	cmp	r3, #32
 8011600:	d013      	beq.n	801162a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8011602:	68fb      	ldr	r3, [r7, #12]
 8011604:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011606:	f043 0220 	orr.w	r2, r3, #32
 801160a:	68fb      	ldr	r3, [r7, #12]
 801160c:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 801160e:	68fb      	ldr	r3, [r7, #12]
 8011610:	2220      	movs	r2, #32
 8011612:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8011616:	68fb      	ldr	r3, [r7, #12]
 8011618:	2200      	movs	r2, #0
 801161a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 801161e:	68fb      	ldr	r3, [r7, #12]
 8011620:	2200      	movs	r2, #0
 8011622:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8011626:	2301      	movs	r3, #1
 8011628:	e007      	b.n	801163a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 801162a:	68fb      	ldr	r3, [r7, #12]
 801162c:	681b      	ldr	r3, [r3, #0]
 801162e:	699b      	ldr	r3, [r3, #24]
 8011630:	f003 0320 	and.w	r3, r3, #32
 8011634:	2b20      	cmp	r3, #32
 8011636:	d1c8      	bne.n	80115ca <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8011638:	2300      	movs	r3, #0
}
 801163a:	4618      	mov	r0, r3
 801163c:	3710      	adds	r7, #16
 801163e:	46bd      	mov	sp, r7
 8011640:	bd80      	pop	{r7, pc}
	...

08011644 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8011644:	b580      	push	{r7, lr}
 8011646:	b084      	sub	sp, #16
 8011648:	af00      	add	r7, sp, #0
 801164a:	60f8      	str	r0, [r7, #12]
 801164c:	60b9      	str	r1, [r7, #8]
 801164e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8011650:	e06b      	b.n	801172a <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8011652:	687a      	ldr	r2, [r7, #4]
 8011654:	68b9      	ldr	r1, [r7, #8]
 8011656:	68f8      	ldr	r0, [r7, #12]
 8011658:	f000 f876 	bl	8011748 <I2C_IsErrorOccurred>
 801165c:	4603      	mov	r3, r0
 801165e:	2b00      	cmp	r3, #0
 8011660:	d001      	beq.n	8011666 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8011662:	2301      	movs	r3, #1
 8011664:	e069      	b.n	801173a <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8011666:	68fb      	ldr	r3, [r7, #12]
 8011668:	681b      	ldr	r3, [r3, #0]
 801166a:	699b      	ldr	r3, [r3, #24]
 801166c:	f003 0320 	and.w	r3, r3, #32
 8011670:	2b20      	cmp	r3, #32
 8011672:	d138      	bne.n	80116e6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8011674:	68fb      	ldr	r3, [r7, #12]
 8011676:	681b      	ldr	r3, [r3, #0]
 8011678:	699b      	ldr	r3, [r3, #24]
 801167a:	f003 0304 	and.w	r3, r3, #4
 801167e:	2b04      	cmp	r3, #4
 8011680:	d105      	bne.n	801168e <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8011682:	68fb      	ldr	r3, [r7, #12]
 8011684:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8011686:	2b00      	cmp	r3, #0
 8011688:	d001      	beq.n	801168e <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 801168a:	2300      	movs	r3, #0
 801168c:	e055      	b.n	801173a <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 801168e:	68fb      	ldr	r3, [r7, #12]
 8011690:	681b      	ldr	r3, [r3, #0]
 8011692:	699b      	ldr	r3, [r3, #24]
 8011694:	f003 0310 	and.w	r3, r3, #16
 8011698:	2b10      	cmp	r3, #16
 801169a:	d107      	bne.n	80116ac <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 801169c:	68fb      	ldr	r3, [r7, #12]
 801169e:	681b      	ldr	r3, [r3, #0]
 80116a0:	2210      	movs	r2, #16
 80116a2:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 80116a4:	68fb      	ldr	r3, [r7, #12]
 80116a6:	2204      	movs	r2, #4
 80116a8:	645a      	str	r2, [r3, #68]	; 0x44
 80116aa:	e002      	b.n	80116b2 <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80116ac:	68fb      	ldr	r3, [r7, #12]
 80116ae:	2200      	movs	r2, #0
 80116b0:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80116b2:	68fb      	ldr	r3, [r7, #12]
 80116b4:	681b      	ldr	r3, [r3, #0]
 80116b6:	2220      	movs	r2, #32
 80116b8:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 80116ba:	68fb      	ldr	r3, [r7, #12]
 80116bc:	681b      	ldr	r3, [r3, #0]
 80116be:	6859      	ldr	r1, [r3, #4]
 80116c0:	68fb      	ldr	r3, [r7, #12]
 80116c2:	681a      	ldr	r2, [r3, #0]
 80116c4:	4b1f      	ldr	r3, [pc, #124]	; (8011744 <I2C_WaitOnRXNEFlagUntilTimeout+0x100>)
 80116c6:	400b      	ands	r3, r1
 80116c8:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 80116ca:	68fb      	ldr	r3, [r7, #12]
 80116cc:	2220      	movs	r2, #32
 80116ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80116d2:	68fb      	ldr	r3, [r7, #12]
 80116d4:	2200      	movs	r2, #0
 80116d6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80116da:	68fb      	ldr	r3, [r7, #12]
 80116dc:	2200      	movs	r2, #0
 80116de:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80116e2:	2301      	movs	r3, #1
 80116e4:	e029      	b.n	801173a <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80116e6:	f7fd f9a7 	bl	800ea38 <HAL_GetTick>
 80116ea:	4602      	mov	r2, r0
 80116ec:	687b      	ldr	r3, [r7, #4]
 80116ee:	1ad3      	subs	r3, r2, r3
 80116f0:	68ba      	ldr	r2, [r7, #8]
 80116f2:	429a      	cmp	r2, r3
 80116f4:	d302      	bcc.n	80116fc <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 80116f6:	68bb      	ldr	r3, [r7, #8]
 80116f8:	2b00      	cmp	r3, #0
 80116fa:	d116      	bne.n	801172a <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80116fc:	68fb      	ldr	r3, [r7, #12]
 80116fe:	681b      	ldr	r3, [r3, #0]
 8011700:	699b      	ldr	r3, [r3, #24]
 8011702:	f003 0304 	and.w	r3, r3, #4
 8011706:	2b04      	cmp	r3, #4
 8011708:	d00f      	beq.n	801172a <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 801170a:	68fb      	ldr	r3, [r7, #12]
 801170c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801170e:	f043 0220 	orr.w	r2, r3, #32
 8011712:	68fb      	ldr	r3, [r7, #12]
 8011714:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8011716:	68fb      	ldr	r3, [r7, #12]
 8011718:	2220      	movs	r2, #32
 801171a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 801171e:	68fb      	ldr	r3, [r7, #12]
 8011720:	2200      	movs	r2, #0
 8011722:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8011726:	2301      	movs	r3, #1
 8011728:	e007      	b.n	801173a <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 801172a:	68fb      	ldr	r3, [r7, #12]
 801172c:	681b      	ldr	r3, [r3, #0]
 801172e:	699b      	ldr	r3, [r3, #24]
 8011730:	f003 0304 	and.w	r3, r3, #4
 8011734:	2b04      	cmp	r3, #4
 8011736:	d18c      	bne.n	8011652 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8011738:	2300      	movs	r3, #0
}
 801173a:	4618      	mov	r0, r3
 801173c:	3710      	adds	r7, #16
 801173e:	46bd      	mov	sp, r7
 8011740:	bd80      	pop	{r7, pc}
 8011742:	bf00      	nop
 8011744:	fe00e800 	.word	0xfe00e800

08011748 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8011748:	b580      	push	{r7, lr}
 801174a:	b08a      	sub	sp, #40	; 0x28
 801174c:	af00      	add	r7, sp, #0
 801174e:	60f8      	str	r0, [r7, #12]
 8011750:	60b9      	str	r1, [r7, #8]
 8011752:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8011754:	2300      	movs	r3, #0
 8011756:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 801175a:	68fb      	ldr	r3, [r7, #12]
 801175c:	681b      	ldr	r3, [r3, #0]
 801175e:	699b      	ldr	r3, [r3, #24]
 8011760:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8011762:	2300      	movs	r3, #0
 8011764:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8011766:	687b      	ldr	r3, [r7, #4]
 8011768:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 801176a:	69bb      	ldr	r3, [r7, #24]
 801176c:	f003 0310 	and.w	r3, r3, #16
 8011770:	2b00      	cmp	r3, #0
 8011772:	d068      	beq.n	8011846 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8011774:	68fb      	ldr	r3, [r7, #12]
 8011776:	681b      	ldr	r3, [r3, #0]
 8011778:	2210      	movs	r2, #16
 801177a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 801177c:	e049      	b.n	8011812 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 801177e:	68bb      	ldr	r3, [r7, #8]
 8011780:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011784:	d045      	beq.n	8011812 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8011786:	f7fd f957 	bl	800ea38 <HAL_GetTick>
 801178a:	4602      	mov	r2, r0
 801178c:	69fb      	ldr	r3, [r7, #28]
 801178e:	1ad3      	subs	r3, r2, r3
 8011790:	68ba      	ldr	r2, [r7, #8]
 8011792:	429a      	cmp	r2, r3
 8011794:	d302      	bcc.n	801179c <I2C_IsErrorOccurred+0x54>
 8011796:	68bb      	ldr	r3, [r7, #8]
 8011798:	2b00      	cmp	r3, #0
 801179a:	d13a      	bne.n	8011812 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 801179c:	68fb      	ldr	r3, [r7, #12]
 801179e:	681b      	ldr	r3, [r3, #0]
 80117a0:	685b      	ldr	r3, [r3, #4]
 80117a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80117a6:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80117a8:	68fb      	ldr	r3, [r7, #12]
 80117aa:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80117ae:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80117b0:	68fb      	ldr	r3, [r7, #12]
 80117b2:	681b      	ldr	r3, [r3, #0]
 80117b4:	699b      	ldr	r3, [r3, #24]
 80117b6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80117ba:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80117be:	d121      	bne.n	8011804 <I2C_IsErrorOccurred+0xbc>
 80117c0:	697b      	ldr	r3, [r7, #20]
 80117c2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80117c6:	d01d      	beq.n	8011804 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80117c8:	7cfb      	ldrb	r3, [r7, #19]
 80117ca:	2b20      	cmp	r3, #32
 80117cc:	d01a      	beq.n	8011804 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80117ce:	68fb      	ldr	r3, [r7, #12]
 80117d0:	681b      	ldr	r3, [r3, #0]
 80117d2:	685a      	ldr	r2, [r3, #4]
 80117d4:	68fb      	ldr	r3, [r7, #12]
 80117d6:	681b      	ldr	r3, [r3, #0]
 80117d8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80117dc:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80117de:	f7fd f92b 	bl	800ea38 <HAL_GetTick>
 80117e2:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80117e4:	e00e      	b.n	8011804 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80117e6:	f7fd f927 	bl	800ea38 <HAL_GetTick>
 80117ea:	4602      	mov	r2, r0
 80117ec:	69fb      	ldr	r3, [r7, #28]
 80117ee:	1ad3      	subs	r3, r2, r3
 80117f0:	2b19      	cmp	r3, #25
 80117f2:	d907      	bls.n	8011804 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80117f4:	6a3b      	ldr	r3, [r7, #32]
 80117f6:	f043 0320 	orr.w	r3, r3, #32
 80117fa:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80117fc:	2301      	movs	r3, #1
 80117fe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8011802:	e006      	b.n	8011812 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8011804:	68fb      	ldr	r3, [r7, #12]
 8011806:	681b      	ldr	r3, [r3, #0]
 8011808:	699b      	ldr	r3, [r3, #24]
 801180a:	f003 0320 	and.w	r3, r3, #32
 801180e:	2b20      	cmp	r3, #32
 8011810:	d1e9      	bne.n	80117e6 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8011812:	68fb      	ldr	r3, [r7, #12]
 8011814:	681b      	ldr	r3, [r3, #0]
 8011816:	699b      	ldr	r3, [r3, #24]
 8011818:	f003 0320 	and.w	r3, r3, #32
 801181c:	2b20      	cmp	r3, #32
 801181e:	d003      	beq.n	8011828 <I2C_IsErrorOccurred+0xe0>
 8011820:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011824:	2b00      	cmp	r3, #0
 8011826:	d0aa      	beq.n	801177e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8011828:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801182c:	2b00      	cmp	r3, #0
 801182e:	d103      	bne.n	8011838 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8011830:	68fb      	ldr	r3, [r7, #12]
 8011832:	681b      	ldr	r3, [r3, #0]
 8011834:	2220      	movs	r2, #32
 8011836:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8011838:	6a3b      	ldr	r3, [r7, #32]
 801183a:	f043 0304 	orr.w	r3, r3, #4
 801183e:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8011840:	2301      	movs	r3, #1
 8011842:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8011846:	68fb      	ldr	r3, [r7, #12]
 8011848:	681b      	ldr	r3, [r3, #0]
 801184a:	699b      	ldr	r3, [r3, #24]
 801184c:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 801184e:	69bb      	ldr	r3, [r7, #24]
 8011850:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8011854:	2b00      	cmp	r3, #0
 8011856:	d00b      	beq.n	8011870 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8011858:	6a3b      	ldr	r3, [r7, #32]
 801185a:	f043 0301 	orr.w	r3, r3, #1
 801185e:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8011860:	68fb      	ldr	r3, [r7, #12]
 8011862:	681b      	ldr	r3, [r3, #0]
 8011864:	f44f 7280 	mov.w	r2, #256	; 0x100
 8011868:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 801186a:	2301      	movs	r3, #1
 801186c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8011870:	69bb      	ldr	r3, [r7, #24]
 8011872:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8011876:	2b00      	cmp	r3, #0
 8011878:	d00b      	beq.n	8011892 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 801187a:	6a3b      	ldr	r3, [r7, #32]
 801187c:	f043 0308 	orr.w	r3, r3, #8
 8011880:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8011882:	68fb      	ldr	r3, [r7, #12]
 8011884:	681b      	ldr	r3, [r3, #0]
 8011886:	f44f 6280 	mov.w	r2, #1024	; 0x400
 801188a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 801188c:	2301      	movs	r3, #1
 801188e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8011892:	69bb      	ldr	r3, [r7, #24]
 8011894:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8011898:	2b00      	cmp	r3, #0
 801189a:	d00b      	beq.n	80118b4 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 801189c:	6a3b      	ldr	r3, [r7, #32]
 801189e:	f043 0302 	orr.w	r3, r3, #2
 80118a2:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80118a4:	68fb      	ldr	r3, [r7, #12]
 80118a6:	681b      	ldr	r3, [r3, #0]
 80118a8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80118ac:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80118ae:	2301      	movs	r3, #1
 80118b0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 80118b4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80118b8:	2b00      	cmp	r3, #0
 80118ba:	d01c      	beq.n	80118f6 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80118bc:	68f8      	ldr	r0, [r7, #12]
 80118be:	f7ff fdc3 	bl	8011448 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80118c2:	68fb      	ldr	r3, [r7, #12]
 80118c4:	681b      	ldr	r3, [r3, #0]
 80118c6:	6859      	ldr	r1, [r3, #4]
 80118c8:	68fb      	ldr	r3, [r7, #12]
 80118ca:	681a      	ldr	r2, [r3, #0]
 80118cc:	4b0d      	ldr	r3, [pc, #52]	; (8011904 <I2C_IsErrorOccurred+0x1bc>)
 80118ce:	400b      	ands	r3, r1
 80118d0:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80118d2:	68fb      	ldr	r3, [r7, #12]
 80118d4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80118d6:	6a3b      	ldr	r3, [r7, #32]
 80118d8:	431a      	orrs	r2, r3
 80118da:	68fb      	ldr	r3, [r7, #12]
 80118dc:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80118de:	68fb      	ldr	r3, [r7, #12]
 80118e0:	2220      	movs	r2, #32
 80118e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80118e6:	68fb      	ldr	r3, [r7, #12]
 80118e8:	2200      	movs	r2, #0
 80118ea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80118ee:	68fb      	ldr	r3, [r7, #12]
 80118f0:	2200      	movs	r2, #0
 80118f2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 80118f6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80118fa:	4618      	mov	r0, r3
 80118fc:	3728      	adds	r7, #40	; 0x28
 80118fe:	46bd      	mov	sp, r7
 8011900:	bd80      	pop	{r7, pc}
 8011902:	bf00      	nop
 8011904:	fe00e800 	.word	0xfe00e800

08011908 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8011908:	b480      	push	{r7}
 801190a:	b087      	sub	sp, #28
 801190c:	af00      	add	r7, sp, #0
 801190e:	60f8      	str	r0, [r7, #12]
 8011910:	607b      	str	r3, [r7, #4]
 8011912:	460b      	mov	r3, r1
 8011914:	817b      	strh	r3, [r7, #10]
 8011916:	4613      	mov	r3, r2
 8011918:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 801191a:	897b      	ldrh	r3, [r7, #10]
 801191c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8011920:	7a7b      	ldrb	r3, [r7, #9]
 8011922:	041b      	lsls	r3, r3, #16
 8011924:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8011928:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 801192a:	687b      	ldr	r3, [r7, #4]
 801192c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 801192e:	6a3b      	ldr	r3, [r7, #32]
 8011930:	4313      	orrs	r3, r2
 8011932:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8011936:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8011938:	68fb      	ldr	r3, [r7, #12]
 801193a:	681b      	ldr	r3, [r3, #0]
 801193c:	685a      	ldr	r2, [r3, #4]
 801193e:	6a3b      	ldr	r3, [r7, #32]
 8011940:	0d5b      	lsrs	r3, r3, #21
 8011942:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8011946:	4b08      	ldr	r3, [pc, #32]	; (8011968 <I2C_TransferConfig+0x60>)
 8011948:	430b      	orrs	r3, r1
 801194a:	43db      	mvns	r3, r3
 801194c:	ea02 0103 	and.w	r1, r2, r3
 8011950:	68fb      	ldr	r3, [r7, #12]
 8011952:	681b      	ldr	r3, [r3, #0]
 8011954:	697a      	ldr	r2, [r7, #20]
 8011956:	430a      	orrs	r2, r1
 8011958:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 801195a:	bf00      	nop
 801195c:	371c      	adds	r7, #28
 801195e:	46bd      	mov	sp, r7
 8011960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011964:	4770      	bx	lr
 8011966:	bf00      	nop
 8011968:	03ff63ff 	.word	0x03ff63ff

0801196c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 801196c:	b480      	push	{r7}
 801196e:	b083      	sub	sp, #12
 8011970:	af00      	add	r7, sp, #0
 8011972:	6078      	str	r0, [r7, #4]
 8011974:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8011976:	687b      	ldr	r3, [r7, #4]
 8011978:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 801197c:	b2db      	uxtb	r3, r3
 801197e:	2b20      	cmp	r3, #32
 8011980:	d138      	bne.n	80119f4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8011982:	687b      	ldr	r3, [r7, #4]
 8011984:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8011988:	2b01      	cmp	r3, #1
 801198a:	d101      	bne.n	8011990 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 801198c:	2302      	movs	r3, #2
 801198e:	e032      	b.n	80119f6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8011990:	687b      	ldr	r3, [r7, #4]
 8011992:	2201      	movs	r2, #1
 8011994:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8011998:	687b      	ldr	r3, [r7, #4]
 801199a:	2224      	movs	r2, #36	; 0x24
 801199c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80119a0:	687b      	ldr	r3, [r7, #4]
 80119a2:	681b      	ldr	r3, [r3, #0]
 80119a4:	681a      	ldr	r2, [r3, #0]
 80119a6:	687b      	ldr	r3, [r7, #4]
 80119a8:	681b      	ldr	r3, [r3, #0]
 80119aa:	f022 0201 	bic.w	r2, r2, #1
 80119ae:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80119b0:	687b      	ldr	r3, [r7, #4]
 80119b2:	681b      	ldr	r3, [r3, #0]
 80119b4:	681a      	ldr	r2, [r3, #0]
 80119b6:	687b      	ldr	r3, [r7, #4]
 80119b8:	681b      	ldr	r3, [r3, #0]
 80119ba:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80119be:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80119c0:	687b      	ldr	r3, [r7, #4]
 80119c2:	681b      	ldr	r3, [r3, #0]
 80119c4:	6819      	ldr	r1, [r3, #0]
 80119c6:	687b      	ldr	r3, [r7, #4]
 80119c8:	681b      	ldr	r3, [r3, #0]
 80119ca:	683a      	ldr	r2, [r7, #0]
 80119cc:	430a      	orrs	r2, r1
 80119ce:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80119d0:	687b      	ldr	r3, [r7, #4]
 80119d2:	681b      	ldr	r3, [r3, #0]
 80119d4:	681a      	ldr	r2, [r3, #0]
 80119d6:	687b      	ldr	r3, [r7, #4]
 80119d8:	681b      	ldr	r3, [r3, #0]
 80119da:	f042 0201 	orr.w	r2, r2, #1
 80119de:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80119e0:	687b      	ldr	r3, [r7, #4]
 80119e2:	2220      	movs	r2, #32
 80119e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80119e8:	687b      	ldr	r3, [r7, #4]
 80119ea:	2200      	movs	r2, #0
 80119ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80119f0:	2300      	movs	r3, #0
 80119f2:	e000      	b.n	80119f6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80119f4:	2302      	movs	r3, #2
  }
}
 80119f6:	4618      	mov	r0, r3
 80119f8:	370c      	adds	r7, #12
 80119fa:	46bd      	mov	sp, r7
 80119fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a00:	4770      	bx	lr

08011a02 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8011a02:	b480      	push	{r7}
 8011a04:	b085      	sub	sp, #20
 8011a06:	af00      	add	r7, sp, #0
 8011a08:	6078      	str	r0, [r7, #4]
 8011a0a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8011a0c:	687b      	ldr	r3, [r7, #4]
 8011a0e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8011a12:	b2db      	uxtb	r3, r3
 8011a14:	2b20      	cmp	r3, #32
 8011a16:	d139      	bne.n	8011a8c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8011a18:	687b      	ldr	r3, [r7, #4]
 8011a1a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8011a1e:	2b01      	cmp	r3, #1
 8011a20:	d101      	bne.n	8011a26 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8011a22:	2302      	movs	r3, #2
 8011a24:	e033      	b.n	8011a8e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8011a26:	687b      	ldr	r3, [r7, #4]
 8011a28:	2201      	movs	r2, #1
 8011a2a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8011a2e:	687b      	ldr	r3, [r7, #4]
 8011a30:	2224      	movs	r2, #36	; 0x24
 8011a32:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8011a36:	687b      	ldr	r3, [r7, #4]
 8011a38:	681b      	ldr	r3, [r3, #0]
 8011a3a:	681a      	ldr	r2, [r3, #0]
 8011a3c:	687b      	ldr	r3, [r7, #4]
 8011a3e:	681b      	ldr	r3, [r3, #0]
 8011a40:	f022 0201 	bic.w	r2, r2, #1
 8011a44:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8011a46:	687b      	ldr	r3, [r7, #4]
 8011a48:	681b      	ldr	r3, [r3, #0]
 8011a4a:	681b      	ldr	r3, [r3, #0]
 8011a4c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8011a4e:	68fb      	ldr	r3, [r7, #12]
 8011a50:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8011a54:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8011a56:	683b      	ldr	r3, [r7, #0]
 8011a58:	021b      	lsls	r3, r3, #8
 8011a5a:	68fa      	ldr	r2, [r7, #12]
 8011a5c:	4313      	orrs	r3, r2
 8011a5e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8011a60:	687b      	ldr	r3, [r7, #4]
 8011a62:	681b      	ldr	r3, [r3, #0]
 8011a64:	68fa      	ldr	r2, [r7, #12]
 8011a66:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8011a68:	687b      	ldr	r3, [r7, #4]
 8011a6a:	681b      	ldr	r3, [r3, #0]
 8011a6c:	681a      	ldr	r2, [r3, #0]
 8011a6e:	687b      	ldr	r3, [r7, #4]
 8011a70:	681b      	ldr	r3, [r3, #0]
 8011a72:	f042 0201 	orr.w	r2, r2, #1
 8011a76:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8011a78:	687b      	ldr	r3, [r7, #4]
 8011a7a:	2220      	movs	r2, #32
 8011a7c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8011a80:	687b      	ldr	r3, [r7, #4]
 8011a82:	2200      	movs	r2, #0
 8011a84:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8011a88:	2300      	movs	r3, #0
 8011a8a:	e000      	b.n	8011a8e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8011a8c:	2302      	movs	r3, #2
  }
}
 8011a8e:	4618      	mov	r0, r3
 8011a90:	3714      	adds	r7, #20
 8011a92:	46bd      	mov	sp, r7
 8011a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a98:	4770      	bx	lr
	...

08011a9c <HAL_ICACHE_ConfigAssociativityMode>:
  *            @arg ICACHE_1WAY   1-way cache (direct mapped cache)
  *            @arg ICACHE_2WAYS  2-ways set associative cache (default)
  * @retval HAL status (HAL_OK/HAL_ERROR)
  */
HAL_StatusTypeDef HAL_ICACHE_ConfigAssociativityMode(uint32_t AssociativityMode)
{
 8011a9c:	b480      	push	{r7}
 8011a9e:	b085      	sub	sp, #20
 8011aa0:	af00      	add	r7, sp, #0
 8011aa2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8011aa4:	2300      	movs	r3, #0
 8011aa6:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_ICACHE_ASSOCIATIVITY_MODE(AssociativityMode));

  /* Check cache is not enabled */
  if (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 8011aa8:	4b0b      	ldr	r3, [pc, #44]	; (8011ad8 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8011aaa:	681b      	ldr	r3, [r3, #0]
 8011aac:	f003 0301 	and.w	r3, r3, #1
 8011ab0:	2b00      	cmp	r3, #0
 8011ab2:	d002      	beq.n	8011aba <HAL_ICACHE_ConfigAssociativityMode+0x1e>
  {
    status = HAL_ERROR;
 8011ab4:	2301      	movs	r3, #1
 8011ab6:	73fb      	strb	r3, [r7, #15]
 8011ab8:	e007      	b.n	8011aca <HAL_ICACHE_ConfigAssociativityMode+0x2e>
  }
  else
  {
    MODIFY_REG(ICACHE->CR, ICACHE_CR_WAYSEL, AssociativityMode);
 8011aba:	4b07      	ldr	r3, [pc, #28]	; (8011ad8 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8011abc:	681b      	ldr	r3, [r3, #0]
 8011abe:	f023 0204 	bic.w	r2, r3, #4
 8011ac2:	4905      	ldr	r1, [pc, #20]	; (8011ad8 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8011ac4:	687b      	ldr	r3, [r7, #4]
 8011ac6:	4313      	orrs	r3, r2
 8011ac8:	600b      	str	r3, [r1, #0]
  }

  return status;
 8011aca:	7bfb      	ldrb	r3, [r7, #15]
}
 8011acc:	4618      	mov	r0, r3
 8011ace:	3714      	adds	r7, #20
 8011ad0:	46bd      	mov	sp, r7
 8011ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ad6:	4770      	bx	lr
 8011ad8:	40030400 	.word	0x40030400

08011adc <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 8011adc:	b480      	push	{r7}
 8011ade:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 8011ae0:	4b05      	ldr	r3, [pc, #20]	; (8011af8 <HAL_ICACHE_Enable+0x1c>)
 8011ae2:	681b      	ldr	r3, [r3, #0]
 8011ae4:	4a04      	ldr	r2, [pc, #16]	; (8011af8 <HAL_ICACHE_Enable+0x1c>)
 8011ae6:	f043 0301 	orr.w	r3, r3, #1
 8011aea:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8011aec:	2300      	movs	r3, #0
}
 8011aee:	4618      	mov	r0, r3
 8011af0:	46bd      	mov	sp, r7
 8011af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011af6:	4770      	bx	lr
 8011af8:	40030400 	.word	0x40030400

08011afc <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8011afc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011afe:	b08b      	sub	sp, #44	; 0x2c
 8011b00:	af06      	add	r7, sp, #24
 8011b02:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8011b04:	687b      	ldr	r3, [r7, #4]
 8011b06:	2b00      	cmp	r3, #0
 8011b08:	d101      	bne.n	8011b0e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8011b0a:	2301      	movs	r3, #1
 8011b0c:	e0cb      	b.n	8011ca6 <HAL_PCD_Init+0x1aa>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8011b0e:	687b      	ldr	r3, [r7, #4]
 8011b10:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8011b14:	b2db      	uxtb	r3, r3
 8011b16:	2b00      	cmp	r3, #0
 8011b18:	d106      	bne.n	8011b28 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8011b1a:	687b      	ldr	r3, [r7, #4]
 8011b1c:	2200      	movs	r2, #0
 8011b1e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8011b22:	6878      	ldr	r0, [r7, #4]
 8011b24:	f7fc fc98 	bl	800e458 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8011b28:	687b      	ldr	r3, [r7, #4]
 8011b2a:	2203      	movs	r2, #3
 8011b2c:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8011b30:	687b      	ldr	r3, [r7, #4]
 8011b32:	681b      	ldr	r3, [r3, #0]
 8011b34:	4618      	mov	r0, r3
 8011b36:	f007 f939 	bl	8018dac <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8011b3a:	2300      	movs	r3, #0
 8011b3c:	73fb      	strb	r3, [r7, #15]
 8011b3e:	e040      	b.n	8011bc2 <HAL_PCD_Init+0xc6>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8011b40:	7bfb      	ldrb	r3, [r7, #15]
 8011b42:	6879      	ldr	r1, [r7, #4]
 8011b44:	1c5a      	adds	r2, r3, #1
 8011b46:	4613      	mov	r3, r2
 8011b48:	009b      	lsls	r3, r3, #2
 8011b4a:	4413      	add	r3, r2
 8011b4c:	00db      	lsls	r3, r3, #3
 8011b4e:	440b      	add	r3, r1
 8011b50:	3301      	adds	r3, #1
 8011b52:	2201      	movs	r2, #1
 8011b54:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8011b56:	7bfb      	ldrb	r3, [r7, #15]
 8011b58:	6879      	ldr	r1, [r7, #4]
 8011b5a:	1c5a      	adds	r2, r3, #1
 8011b5c:	4613      	mov	r3, r2
 8011b5e:	009b      	lsls	r3, r3, #2
 8011b60:	4413      	add	r3, r2
 8011b62:	00db      	lsls	r3, r3, #3
 8011b64:	440b      	add	r3, r1
 8011b66:	7bfa      	ldrb	r2, [r7, #15]
 8011b68:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8011b6a:	7bfb      	ldrb	r3, [r7, #15]
 8011b6c:	6879      	ldr	r1, [r7, #4]
 8011b6e:	1c5a      	adds	r2, r3, #1
 8011b70:	4613      	mov	r3, r2
 8011b72:	009b      	lsls	r3, r3, #2
 8011b74:	4413      	add	r3, r2
 8011b76:	00db      	lsls	r3, r3, #3
 8011b78:	440b      	add	r3, r1
 8011b7a:	3303      	adds	r3, #3
 8011b7c:	2200      	movs	r2, #0
 8011b7e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8011b80:	7bfa      	ldrb	r2, [r7, #15]
 8011b82:	6879      	ldr	r1, [r7, #4]
 8011b84:	4613      	mov	r3, r2
 8011b86:	009b      	lsls	r3, r3, #2
 8011b88:	4413      	add	r3, r2
 8011b8a:	00db      	lsls	r3, r3, #3
 8011b8c:	440b      	add	r3, r1
 8011b8e:	3338      	adds	r3, #56	; 0x38
 8011b90:	2200      	movs	r2, #0
 8011b92:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8011b94:	7bfa      	ldrb	r2, [r7, #15]
 8011b96:	6879      	ldr	r1, [r7, #4]
 8011b98:	4613      	mov	r3, r2
 8011b9a:	009b      	lsls	r3, r3, #2
 8011b9c:	4413      	add	r3, r2
 8011b9e:	00db      	lsls	r3, r3, #3
 8011ba0:	440b      	add	r3, r1
 8011ba2:	333c      	adds	r3, #60	; 0x3c
 8011ba4:	2200      	movs	r2, #0
 8011ba6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8011ba8:	7bfa      	ldrb	r2, [r7, #15]
 8011baa:	6879      	ldr	r1, [r7, #4]
 8011bac:	4613      	mov	r3, r2
 8011bae:	009b      	lsls	r3, r3, #2
 8011bb0:	4413      	add	r3, r2
 8011bb2:	00db      	lsls	r3, r3, #3
 8011bb4:	440b      	add	r3, r1
 8011bb6:	3340      	adds	r3, #64	; 0x40
 8011bb8:	2200      	movs	r2, #0
 8011bba:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8011bbc:	7bfb      	ldrb	r3, [r7, #15]
 8011bbe:	3301      	adds	r3, #1
 8011bc0:	73fb      	strb	r3, [r7, #15]
 8011bc2:	7bfa      	ldrb	r2, [r7, #15]
 8011bc4:	687b      	ldr	r3, [r7, #4]
 8011bc6:	685b      	ldr	r3, [r3, #4]
 8011bc8:	429a      	cmp	r2, r3
 8011bca:	d3b9      	bcc.n	8011b40 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8011bcc:	2300      	movs	r3, #0
 8011bce:	73fb      	strb	r3, [r7, #15]
 8011bd0:	e044      	b.n	8011c5c <HAL_PCD_Init+0x160>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8011bd2:	7bfa      	ldrb	r2, [r7, #15]
 8011bd4:	6879      	ldr	r1, [r7, #4]
 8011bd6:	4613      	mov	r3, r2
 8011bd8:	009b      	lsls	r3, r3, #2
 8011bda:	4413      	add	r3, r2
 8011bdc:	00db      	lsls	r3, r3, #3
 8011bde:	440b      	add	r3, r1
 8011be0:	f203 1369 	addw	r3, r3, #361	; 0x169
 8011be4:	2200      	movs	r2, #0
 8011be6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8011be8:	7bfa      	ldrb	r2, [r7, #15]
 8011bea:	6879      	ldr	r1, [r7, #4]
 8011bec:	4613      	mov	r3, r2
 8011bee:	009b      	lsls	r3, r3, #2
 8011bf0:	4413      	add	r3, r2
 8011bf2:	00db      	lsls	r3, r3, #3
 8011bf4:	440b      	add	r3, r1
 8011bf6:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8011bfa:	7bfa      	ldrb	r2, [r7, #15]
 8011bfc:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8011bfe:	7bfa      	ldrb	r2, [r7, #15]
 8011c00:	6879      	ldr	r1, [r7, #4]
 8011c02:	4613      	mov	r3, r2
 8011c04:	009b      	lsls	r3, r3, #2
 8011c06:	4413      	add	r3, r2
 8011c08:	00db      	lsls	r3, r3, #3
 8011c0a:	440b      	add	r3, r1
 8011c0c:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8011c10:	2200      	movs	r2, #0
 8011c12:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8011c14:	7bfa      	ldrb	r2, [r7, #15]
 8011c16:	6879      	ldr	r1, [r7, #4]
 8011c18:	4613      	mov	r3, r2
 8011c1a:	009b      	lsls	r3, r3, #2
 8011c1c:	4413      	add	r3, r2
 8011c1e:	00db      	lsls	r3, r3, #3
 8011c20:	440b      	add	r3, r1
 8011c22:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8011c26:	2200      	movs	r2, #0
 8011c28:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8011c2a:	7bfa      	ldrb	r2, [r7, #15]
 8011c2c:	6879      	ldr	r1, [r7, #4]
 8011c2e:	4613      	mov	r3, r2
 8011c30:	009b      	lsls	r3, r3, #2
 8011c32:	4413      	add	r3, r2
 8011c34:	00db      	lsls	r3, r3, #3
 8011c36:	440b      	add	r3, r1
 8011c38:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8011c3c:	2200      	movs	r2, #0
 8011c3e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8011c40:	7bfa      	ldrb	r2, [r7, #15]
 8011c42:	6879      	ldr	r1, [r7, #4]
 8011c44:	4613      	mov	r3, r2
 8011c46:	009b      	lsls	r3, r3, #2
 8011c48:	4413      	add	r3, r2
 8011c4a:	00db      	lsls	r3, r3, #3
 8011c4c:	440b      	add	r3, r1
 8011c4e:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8011c52:	2200      	movs	r2, #0
 8011c54:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8011c56:	7bfb      	ldrb	r3, [r7, #15]
 8011c58:	3301      	adds	r3, #1
 8011c5a:	73fb      	strb	r3, [r7, #15]
 8011c5c:	7bfa      	ldrb	r2, [r7, #15]
 8011c5e:	687b      	ldr	r3, [r7, #4]
 8011c60:	685b      	ldr	r3, [r3, #4]
 8011c62:	429a      	cmp	r2, r3
 8011c64:	d3b5      	bcc.n	8011bd2 <HAL_PCD_Init+0xd6>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8011c66:	687b      	ldr	r3, [r7, #4]
 8011c68:	681b      	ldr	r3, [r3, #0]
 8011c6a:	603b      	str	r3, [r7, #0]
 8011c6c:	687e      	ldr	r6, [r7, #4]
 8011c6e:	466d      	mov	r5, sp
 8011c70:	f106 0410 	add.w	r4, r6, #16
 8011c74:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8011c76:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8011c78:	6823      	ldr	r3, [r4, #0]
 8011c7a:	602b      	str	r3, [r5, #0]
 8011c7c:	1d33      	adds	r3, r6, #4
 8011c7e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8011c80:	6838      	ldr	r0, [r7, #0]
 8011c82:	f007 f8ae 	bl	8018de2 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8011c86:	687b      	ldr	r3, [r7, #4]
 8011c88:	2200      	movs	r2, #0
 8011c8a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8011c8e:	687b      	ldr	r3, [r7, #4]
 8011c90:	2201      	movs	r2, #1
 8011c92:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8011c96:	687b      	ldr	r3, [r7, #4]
 8011c98:	69db      	ldr	r3, [r3, #28]
 8011c9a:	2b01      	cmp	r3, #1
 8011c9c:	d102      	bne.n	8011ca4 <HAL_PCD_Init+0x1a8>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8011c9e:	6878      	ldr	r0, [r7, #4]
 8011ca0:	f000 f805 	bl	8011cae <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8011ca4:	2300      	movs	r3, #0
}
 8011ca6:	4618      	mov	r0, r3
 8011ca8:	3714      	adds	r7, #20
 8011caa:	46bd      	mov	sp, r7
 8011cac:	bdf0      	pop	{r4, r5, r6, r7, pc}

08011cae <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8011cae:	b480      	push	{r7}
 8011cb0:	b085      	sub	sp, #20
 8011cb2:	af00      	add	r7, sp, #0
 8011cb4:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8011cb6:	687b      	ldr	r3, [r7, #4]
 8011cb8:	681b      	ldr	r3, [r3, #0]
 8011cba:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8011cbc:	687b      	ldr	r3, [r7, #4]
 8011cbe:	2201      	movs	r2, #1
 8011cc0:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
  hpcd->LPM_State = LPM_L0;
 8011cc4:	687b      	ldr	r3, [r7, #4]
 8011cc6:	2200      	movs	r2, #0
 8011cc8:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8011ccc:	68fb      	ldr	r3, [r7, #12]
 8011cce:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8011cd2:	b29b      	uxth	r3, r3
 8011cd4:	f043 0301 	orr.w	r3, r3, #1
 8011cd8:	b29a      	uxth	r2, r3
 8011cda:	68fb      	ldr	r3, [r7, #12]
 8011cdc:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8011ce0:	68fb      	ldr	r3, [r7, #12]
 8011ce2:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8011ce6:	b29b      	uxth	r3, r3
 8011ce8:	f043 0302 	orr.w	r3, r3, #2
 8011cec:	b29a      	uxth	r2, r3
 8011cee:	68fb      	ldr	r3, [r7, #12]
 8011cf0:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 8011cf4:	2300      	movs	r3, #0
}
 8011cf6:	4618      	mov	r0, r3
 8011cf8:	3714      	adds	r7, #20
 8011cfa:	46bd      	mov	sp, r7
 8011cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d00:	4770      	bx	lr
	...

08011d04 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8011d04:	b480      	push	{r7}
 8011d06:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8011d08:	4b05      	ldr	r3, [pc, #20]	; (8011d20 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8011d0a:	681b      	ldr	r3, [r3, #0]
 8011d0c:	4a04      	ldr	r2, [pc, #16]	; (8011d20 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8011d0e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8011d12:	6013      	str	r3, [r2, #0]
}
 8011d14:	bf00      	nop
 8011d16:	46bd      	mov	sp, r7
 8011d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d1c:	4770      	bx	lr
 8011d1e:	bf00      	nop
 8011d20:	40007000 	.word	0x40007000

08011d24 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE0, PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8011d24:	b480      	push	{r7}
 8011d26:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8011d28:	4b04      	ldr	r3, [pc, #16]	; (8011d3c <HAL_PWREx_GetVoltageRange+0x18>)
 8011d2a:	681b      	ldr	r3, [r3, #0]
 8011d2c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8011d30:	4618      	mov	r0, r3
 8011d32:	46bd      	mov	sp, r7
 8011d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d38:	4770      	bx	lr
 8011d3a:	bf00      	nop
 8011d3c:	40007000 	.word	0x40007000

08011d40 <HAL_PWREx_ControlVoltageScaling>:
  * @note  The VOS shall NOT be changed in LP Mode of if LP mode is asked.
  * @note  The function shall not be called in Low-power run mode (meaningless and misleading).
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8011d40:	b580      	push	{r7, lr}
 8011d42:	b084      	sub	sp, #16
 8011d44:	af00      	add	r7, sp, #0
 8011d46:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  uint32_t vos_old = READ_BIT(PWR->CR1, PWR_CR1_VOS);
 8011d48:	4b27      	ldr	r3, [pc, #156]	; (8011de8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8011d4a:	681b      	ldr	r3, [r3, #0]
 8011d4c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8011d50:	60bb      	str	r3, [r7, #8]

  /* VOS shall not be changed in LP Mode            */
  /* or if LP Mode is asked but not yet established */
  if (HAL_PWREx_SMPS_GetEffectiveMode() == PWR_SMPS_LOW_POWER)
 8011d52:	f000 f861 	bl	8011e18 <HAL_PWREx_SMPS_GetEffectiveMode>
 8011d56:	4603      	mov	r3, r0
 8011d58:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8011d5c:	d101      	bne.n	8011d62 <HAL_PWREx_ControlVoltageScaling+0x22>
  {
    return HAL_ERROR;
 8011d5e:	2301      	movs	r3, #1
 8011d60:	e03e      	b.n	8011de0 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }
  if (READ_BIT(PWR->CR4, PWR_CR4_SMPSLPEN) == PWR_CR4_SMPSLPEN)
 8011d62:	4b21      	ldr	r3, [pc, #132]	; (8011de8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8011d64:	68db      	ldr	r3, [r3, #12]
 8011d66:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8011d6a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8011d6e:	d101      	bne.n	8011d74 <HAL_PWREx_ControlVoltageScaling+0x34>
  {
    return HAL_ERROR;
 8011d70:	2301      	movs	r3, #1
 8011d72:	e035      	b.n	8011de0 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 8011d74:	68ba      	ldr	r2, [r7, #8]
 8011d76:	687b      	ldr	r3, [r7, #4]
 8011d78:	429a      	cmp	r2, r3
 8011d7a:	d101      	bne.n	8011d80 <HAL_PWREx_ControlVoltageScaling+0x40>
  {
    return HAL_OK;
 8011d7c:	2300      	movs	r3, #0
 8011d7e:	e02f      	b.n	8011de0 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8011d80:	4b19      	ldr	r3, [pc, #100]	; (8011de8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8011d82:	681b      	ldr	r3, [r3, #0]
 8011d84:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8011d88:	4917      	ldr	r1, [pc, #92]	; (8011de8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8011d8a:	687b      	ldr	r3, [r7, #4]
 8011d8c:	4313      	orrs	r3, r2
 8011d8e:	600b      	str	r3, [r1, #0]

  /* Wait until VOSF is cleared */
  /* and at least one iteration loop */
  wait_loop_index = ((PWR_VOSF_SETTING_DELAY_VALUE * (SystemCoreClock / 100000U)) / 10U) + 1U;
 8011d90:	4b16      	ldr	r3, [pc, #88]	; (8011dec <HAL_PWREx_ControlVoltageScaling+0xac>)
 8011d92:	681b      	ldr	r3, [r3, #0]
 8011d94:	095b      	lsrs	r3, r3, #5
 8011d96:	4a16      	ldr	r2, [pc, #88]	; (8011df0 <HAL_PWREx_ControlVoltageScaling+0xb0>)
 8011d98:	fba2 2303 	umull	r2, r3, r2, r3
 8011d9c:	09db      	lsrs	r3, r3, #7
 8011d9e:	2232      	movs	r2, #50	; 0x32
 8011da0:	fb02 f303 	mul.w	r3, r2, r3
 8011da4:	4a13      	ldr	r2, [pc, #76]	; (8011df4 <HAL_PWREx_ControlVoltageScaling+0xb4>)
 8011da6:	fba2 2303 	umull	r2, r3, r2, r3
 8011daa:	08db      	lsrs	r3, r3, #3
 8011dac:	3301      	adds	r3, #1
 8011dae:	60fb      	str	r3, [r7, #12]

  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8011db0:	e002      	b.n	8011db8 <HAL_PWREx_ControlVoltageScaling+0x78>
  {
    wait_loop_index--;
 8011db2:	68fb      	ldr	r3, [r7, #12]
 8011db4:	3b01      	subs	r3, #1
 8011db6:	60fb      	str	r3, [r7, #12]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8011db8:	4b0b      	ldr	r3, [pc, #44]	; (8011de8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8011dba:	695b      	ldr	r3, [r3, #20]
 8011dbc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8011dc0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8011dc4:	d102      	bne.n	8011dcc <HAL_PWREx_ControlVoltageScaling+0x8c>
 8011dc6:	68fb      	ldr	r3, [r7, #12]
 8011dc8:	2b00      	cmp	r3, #0
 8011dca:	d1f2      	bne.n	8011db2 <HAL_PWREx_ControlVoltageScaling+0x72>
  }

  if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8011dcc:	4b06      	ldr	r3, [pc, #24]	; (8011de8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8011dce:	695b      	ldr	r3, [r3, #20]
 8011dd0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8011dd4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8011dd8:	d101      	bne.n	8011dde <HAL_PWREx_ControlVoltageScaling+0x9e>
  {
    return HAL_TIMEOUT;
 8011dda:	2303      	movs	r3, #3
 8011ddc:	e000      	b.n	8011de0 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  return HAL_OK;
 8011dde:	2300      	movs	r3, #0
}
 8011de0:	4618      	mov	r0, r3
 8011de2:	3710      	adds	r7, #16
 8011de4:	46bd      	mov	sp, r7
 8011de6:	bd80      	pop	{r7, pc}
 8011de8:	40007000 	.word	0x40007000
 8011dec:	20000090 	.word	0x20000090
 8011df0:	0a7c5ac5 	.word	0x0a7c5ac5
 8011df4:	cccccccd 	.word	0xcccccccd

08011df8 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8011df8:	b480      	push	{r7}
 8011dfa:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8011dfc:	4b05      	ldr	r3, [pc, #20]	; (8011e14 <HAL_PWREx_EnableVddIO2+0x1c>)
 8011dfe:	685b      	ldr	r3, [r3, #4]
 8011e00:	4a04      	ldr	r2, [pc, #16]	; (8011e14 <HAL_PWREx_EnableVddIO2+0x1c>)
 8011e02:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8011e06:	6053      	str	r3, [r2, #4]
}
 8011e08:	bf00      	nop
 8011e0a:	46bd      	mov	sp, r7
 8011e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e10:	4770      	bx	lr
 8011e12:	bf00      	nop
 8011e14:	40007000 	.word	0x40007000

08011e18 <HAL_PWREx_SMPS_GetEffectiveMode>:
  *         @arg @ref PWR_SMPS_HIGH_POWER    SMPS step down converter in high-power mode (default)
  *         @arg @ref PWR_SMPS_LOW_POWER     SMPS step down converter in low-power mode
  *         @arg @ref PWR_SMPS_BYPASS        SMPS step down converter in bypass mode
  */
uint32_t HAL_PWREx_SMPS_GetEffectiveMode(void)
{
 8011e18:	b480      	push	{r7}
 8011e1a:	b083      	sub	sp, #12
 8011e1c:	af00      	add	r7, sp, #0
  uint32_t mode;
  uint32_t pwr_sr1;

  pwr_sr1 = READ_REG(PWR->SR1);
 8011e1e:	4b0f      	ldr	r3, [pc, #60]	; (8011e5c <HAL_PWREx_SMPS_GetEffectiveMode+0x44>)
 8011e20:	691b      	ldr	r3, [r3, #16]
 8011e22:	603b      	str	r3, [r7, #0]
  if (READ_BIT(pwr_sr1, PWR_SR1_SMPSBYPRDY) != 0U)
 8011e24:	683b      	ldr	r3, [r7, #0]
 8011e26:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8011e2a:	2b00      	cmp	r3, #0
 8011e2c:	d003      	beq.n	8011e36 <HAL_PWREx_SMPS_GetEffectiveMode+0x1e>
  {
    mode = PWR_SMPS_BYPASS;
 8011e2e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8011e32:	607b      	str	r3, [r7, #4]
 8011e34:	e00a      	b.n	8011e4c <HAL_PWREx_SMPS_GetEffectiveMode+0x34>
  }
  else if (READ_BIT(pwr_sr1, PWR_SR1_SMPSHPRDY) == 0U)
 8011e36:	683b      	ldr	r3, [r7, #0]
 8011e38:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8011e3c:	2b00      	cmp	r3, #0
 8011e3e:	d103      	bne.n	8011e48 <HAL_PWREx_SMPS_GetEffectiveMode+0x30>
  {
    mode = PWR_SMPS_LOW_POWER;
 8011e40:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8011e44:	607b      	str	r3, [r7, #4]
 8011e46:	e001      	b.n	8011e4c <HAL_PWREx_SMPS_GetEffectiveMode+0x34>
  }
  else
  {
    mode = PWR_SMPS_HIGH_POWER;
 8011e48:	2300      	movs	r3, #0
 8011e4a:	607b      	str	r3, [r7, #4]
  }

  return mode;
 8011e4c:	687b      	ldr	r3, [r7, #4]
}
 8011e4e:	4618      	mov	r0, r3
 8011e50:	370c      	adds	r7, #12
 8011e52:	46bd      	mov	sp, r7
 8011e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e58:	4770      	bx	lr
 8011e5a:	bf00      	nop
 8011e5c:	40007000 	.word	0x40007000

08011e60 <HAL_RCC_OscConfig>:
  *         and is updated by this function in case of simple MSI range update when MSI
  *         used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8011e60:	b580      	push	{r7, lr}
 8011e62:	b088      	sub	sp, #32
 8011e64:	af00      	add	r7, sp, #0
 8011e66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8011e68:	687b      	ldr	r3, [r7, #4]
 8011e6a:	2b00      	cmp	r3, #0
 8011e6c:	d102      	bne.n	8011e74 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8011e6e:	2301      	movs	r3, #1
 8011e70:	f000 bcc2 	b.w	80127f8 <HAL_RCC_OscConfig+0x998>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8011e74:	4b99      	ldr	r3, [pc, #612]	; (80120dc <HAL_RCC_OscConfig+0x27c>)
 8011e76:	689b      	ldr	r3, [r3, #8]
 8011e78:	f003 030c 	and.w	r3, r3, #12
 8011e7c:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8011e7e:	4b97      	ldr	r3, [pc, #604]	; (80120dc <HAL_RCC_OscConfig+0x27c>)
 8011e80:	68db      	ldr	r3, [r3, #12]
 8011e82:	f003 0303 	and.w	r3, r3, #3
 8011e86:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8011e88:	687b      	ldr	r3, [r7, #4]
 8011e8a:	681b      	ldr	r3, [r3, #0]
 8011e8c:	f003 0310 	and.w	r3, r3, #16
 8011e90:	2b00      	cmp	r3, #0
 8011e92:	f000 80e9 	beq.w	8012068 <HAL_RCC_OscConfig+0x208>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8011e96:	69bb      	ldr	r3, [r7, #24]
 8011e98:	2b00      	cmp	r3, #0
 8011e9a:	d006      	beq.n	8011eaa <HAL_RCC_OscConfig+0x4a>
 8011e9c:	69bb      	ldr	r3, [r7, #24]
 8011e9e:	2b0c      	cmp	r3, #12
 8011ea0:	f040 8083 	bne.w	8011faa <HAL_RCC_OscConfig+0x14a>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8011ea4:	697b      	ldr	r3, [r7, #20]
 8011ea6:	2b01      	cmp	r3, #1
 8011ea8:	d17f      	bne.n	8011faa <HAL_RCC_OscConfig+0x14a>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8011eaa:	4b8c      	ldr	r3, [pc, #560]	; (80120dc <HAL_RCC_OscConfig+0x27c>)
 8011eac:	681b      	ldr	r3, [r3, #0]
 8011eae:	f003 0302 	and.w	r3, r3, #2
 8011eb2:	2b00      	cmp	r3, #0
 8011eb4:	d006      	beq.n	8011ec4 <HAL_RCC_OscConfig+0x64>
 8011eb6:	687b      	ldr	r3, [r7, #4]
 8011eb8:	69db      	ldr	r3, [r3, #28]
 8011eba:	2b00      	cmp	r3, #0
 8011ebc:	d102      	bne.n	8011ec4 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8011ebe:	2301      	movs	r3, #1
 8011ec0:	f000 bc9a 	b.w	80127f8 <HAL_RCC_OscConfig+0x998>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8011ec4:	687b      	ldr	r3, [r7, #4]
 8011ec6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8011ec8:	4b84      	ldr	r3, [pc, #528]	; (80120dc <HAL_RCC_OscConfig+0x27c>)
 8011eca:	681b      	ldr	r3, [r3, #0]
 8011ecc:	f003 0308 	and.w	r3, r3, #8
 8011ed0:	2b00      	cmp	r3, #0
 8011ed2:	d004      	beq.n	8011ede <HAL_RCC_OscConfig+0x7e>
 8011ed4:	4b81      	ldr	r3, [pc, #516]	; (80120dc <HAL_RCC_OscConfig+0x27c>)
 8011ed6:	681b      	ldr	r3, [r3, #0]
 8011ed8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8011edc:	e005      	b.n	8011eea <HAL_RCC_OscConfig+0x8a>
 8011ede:	4b7f      	ldr	r3, [pc, #508]	; (80120dc <HAL_RCC_OscConfig+0x27c>)
 8011ee0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8011ee4:	091b      	lsrs	r3, r3, #4
 8011ee6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8011eea:	4293      	cmp	r3, r2
 8011eec:	d224      	bcs.n	8011f38 <HAL_RCC_OscConfig+0xd8>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8011eee:	687b      	ldr	r3, [r7, #4]
 8011ef0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011ef2:	4618      	mov	r0, r3
 8011ef4:	f000 fece 	bl	8012c94 <RCC_SetFlashLatencyFromMSIRange>
 8011ef8:	4603      	mov	r3, r0
 8011efa:	2b00      	cmp	r3, #0
 8011efc:	d002      	beq.n	8011f04 <HAL_RCC_OscConfig+0xa4>
          {
            return HAL_ERROR;
 8011efe:	2301      	movs	r3, #1
 8011f00:	f000 bc7a 	b.w	80127f8 <HAL_RCC_OscConfig+0x998>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8011f04:	4b75      	ldr	r3, [pc, #468]	; (80120dc <HAL_RCC_OscConfig+0x27c>)
 8011f06:	681b      	ldr	r3, [r3, #0]
 8011f08:	4a74      	ldr	r2, [pc, #464]	; (80120dc <HAL_RCC_OscConfig+0x27c>)
 8011f0a:	f043 0308 	orr.w	r3, r3, #8
 8011f0e:	6013      	str	r3, [r2, #0]
 8011f10:	4b72      	ldr	r3, [pc, #456]	; (80120dc <HAL_RCC_OscConfig+0x27c>)
 8011f12:	681b      	ldr	r3, [r3, #0]
 8011f14:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8011f18:	687b      	ldr	r3, [r7, #4]
 8011f1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011f1c:	496f      	ldr	r1, [pc, #444]	; (80120dc <HAL_RCC_OscConfig+0x27c>)
 8011f1e:	4313      	orrs	r3, r2
 8011f20:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8011f22:	4b6e      	ldr	r3, [pc, #440]	; (80120dc <HAL_RCC_OscConfig+0x27c>)
 8011f24:	685b      	ldr	r3, [r3, #4]
 8011f26:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8011f2a:	687b      	ldr	r3, [r7, #4]
 8011f2c:	6a1b      	ldr	r3, [r3, #32]
 8011f2e:	021b      	lsls	r3, r3, #8
 8011f30:	496a      	ldr	r1, [pc, #424]	; (80120dc <HAL_RCC_OscConfig+0x27c>)
 8011f32:	4313      	orrs	r3, r2
 8011f34:	604b      	str	r3, [r1, #4]
 8011f36:	e026      	b.n	8011f86 <HAL_RCC_OscConfig+0x126>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8011f38:	4b68      	ldr	r3, [pc, #416]	; (80120dc <HAL_RCC_OscConfig+0x27c>)
 8011f3a:	681b      	ldr	r3, [r3, #0]
 8011f3c:	4a67      	ldr	r2, [pc, #412]	; (80120dc <HAL_RCC_OscConfig+0x27c>)
 8011f3e:	f043 0308 	orr.w	r3, r3, #8
 8011f42:	6013      	str	r3, [r2, #0]
 8011f44:	4b65      	ldr	r3, [pc, #404]	; (80120dc <HAL_RCC_OscConfig+0x27c>)
 8011f46:	681b      	ldr	r3, [r3, #0]
 8011f48:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8011f4c:	687b      	ldr	r3, [r7, #4]
 8011f4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011f50:	4962      	ldr	r1, [pc, #392]	; (80120dc <HAL_RCC_OscConfig+0x27c>)
 8011f52:	4313      	orrs	r3, r2
 8011f54:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8011f56:	4b61      	ldr	r3, [pc, #388]	; (80120dc <HAL_RCC_OscConfig+0x27c>)
 8011f58:	685b      	ldr	r3, [r3, #4]
 8011f5a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8011f5e:	687b      	ldr	r3, [r7, #4]
 8011f60:	6a1b      	ldr	r3, [r3, #32]
 8011f62:	021b      	lsls	r3, r3, #8
 8011f64:	495d      	ldr	r1, [pc, #372]	; (80120dc <HAL_RCC_OscConfig+0x27c>)
 8011f66:	4313      	orrs	r3, r2
 8011f68:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8011f6a:	69bb      	ldr	r3, [r7, #24]
 8011f6c:	2b00      	cmp	r3, #0
 8011f6e:	d10a      	bne.n	8011f86 <HAL_RCC_OscConfig+0x126>
          {
            if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8011f70:	687b      	ldr	r3, [r7, #4]
 8011f72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011f74:	4618      	mov	r0, r3
 8011f76:	f000 fe8d 	bl	8012c94 <RCC_SetFlashLatencyFromMSIRange>
 8011f7a:	4603      	mov	r3, r0
 8011f7c:	2b00      	cmp	r3, #0
 8011f7e:	d002      	beq.n	8011f86 <HAL_RCC_OscConfig+0x126>
            {
              return HAL_ERROR;
 8011f80:	2301      	movs	r3, #1
 8011f82:	f000 bc39 	b.w	80127f8 <HAL_RCC_OscConfig+0x998>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8011f86:	f000 fe17 	bl	8012bb8 <HAL_RCC_GetHCLKFreq>
 8011f8a:	4603      	mov	r3, r0
 8011f8c:	4a54      	ldr	r2, [pc, #336]	; (80120e0 <HAL_RCC_OscConfig+0x280>)
 8011f8e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8011f90:	4b54      	ldr	r3, [pc, #336]	; (80120e4 <HAL_RCC_OscConfig+0x284>)
 8011f92:	681b      	ldr	r3, [r3, #0]
 8011f94:	4618      	mov	r0, r3
 8011f96:	f7fc fabf 	bl	800e518 <HAL_InitTick>
 8011f9a:	4603      	mov	r3, r0
 8011f9c:	73fb      	strb	r3, [r7, #15]
        if (status != HAL_OK)
 8011f9e:	7bfb      	ldrb	r3, [r7, #15]
 8011fa0:	2b00      	cmp	r3, #0
 8011fa2:	d060      	beq.n	8012066 <HAL_RCC_OscConfig+0x206>
        {
          return status;
 8011fa4:	7bfb      	ldrb	r3, [r7, #15]
 8011fa6:	f000 bc27 	b.w	80127f8 <HAL_RCC_OscConfig+0x998>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8011faa:	687b      	ldr	r3, [r7, #4]
 8011fac:	69db      	ldr	r3, [r3, #28]
 8011fae:	2b00      	cmp	r3, #0
 8011fb0:	d039      	beq.n	8012026 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8011fb2:	4b4a      	ldr	r3, [pc, #296]	; (80120dc <HAL_RCC_OscConfig+0x27c>)
 8011fb4:	681b      	ldr	r3, [r3, #0]
 8011fb6:	4a49      	ldr	r2, [pc, #292]	; (80120dc <HAL_RCC_OscConfig+0x27c>)
 8011fb8:	f043 0301 	orr.w	r3, r3, #1
 8011fbc:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8011fbe:	f7fc fd3b 	bl	800ea38 <HAL_GetTick>
 8011fc2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8011fc4:	e00f      	b.n	8011fe6 <HAL_RCC_OscConfig+0x186>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8011fc6:	f7fc fd37 	bl	800ea38 <HAL_GetTick>
 8011fca:	4602      	mov	r2, r0
 8011fcc:	693b      	ldr	r3, [r7, #16]
 8011fce:	1ad3      	subs	r3, r2, r3
 8011fd0:	2b02      	cmp	r3, #2
 8011fd2:	d908      	bls.n	8011fe6 <HAL_RCC_OscConfig+0x186>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8011fd4:	4b41      	ldr	r3, [pc, #260]	; (80120dc <HAL_RCC_OscConfig+0x27c>)
 8011fd6:	681b      	ldr	r3, [r3, #0]
 8011fd8:	f003 0302 	and.w	r3, r3, #2
 8011fdc:	2b00      	cmp	r3, #0
 8011fde:	d102      	bne.n	8011fe6 <HAL_RCC_OscConfig+0x186>
            {
              return HAL_TIMEOUT;
 8011fe0:	2303      	movs	r3, #3
 8011fe2:	f000 bc09 	b.w	80127f8 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8011fe6:	4b3d      	ldr	r3, [pc, #244]	; (80120dc <HAL_RCC_OscConfig+0x27c>)
 8011fe8:	681b      	ldr	r3, [r3, #0]
 8011fea:	f003 0302 	and.w	r3, r3, #2
 8011fee:	2b00      	cmp	r3, #0
 8011ff0:	d0e9      	beq.n	8011fc6 <HAL_RCC_OscConfig+0x166>
            }
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8011ff2:	4b3a      	ldr	r3, [pc, #232]	; (80120dc <HAL_RCC_OscConfig+0x27c>)
 8011ff4:	681b      	ldr	r3, [r3, #0]
 8011ff6:	4a39      	ldr	r2, [pc, #228]	; (80120dc <HAL_RCC_OscConfig+0x27c>)
 8011ff8:	f043 0308 	orr.w	r3, r3, #8
 8011ffc:	6013      	str	r3, [r2, #0]
 8011ffe:	4b37      	ldr	r3, [pc, #220]	; (80120dc <HAL_RCC_OscConfig+0x27c>)
 8012000:	681b      	ldr	r3, [r3, #0]
 8012002:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8012006:	687b      	ldr	r3, [r7, #4]
 8012008:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801200a:	4934      	ldr	r1, [pc, #208]	; (80120dc <HAL_RCC_OscConfig+0x27c>)
 801200c:	4313      	orrs	r3, r2
 801200e:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8012010:	4b32      	ldr	r3, [pc, #200]	; (80120dc <HAL_RCC_OscConfig+0x27c>)
 8012012:	685b      	ldr	r3, [r3, #4]
 8012014:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8012018:	687b      	ldr	r3, [r7, #4]
 801201a:	6a1b      	ldr	r3, [r3, #32]
 801201c:	021b      	lsls	r3, r3, #8
 801201e:	492f      	ldr	r1, [pc, #188]	; (80120dc <HAL_RCC_OscConfig+0x27c>)
 8012020:	4313      	orrs	r3, r2
 8012022:	604b      	str	r3, [r1, #4]
 8012024:	e020      	b.n	8012068 <HAL_RCC_OscConfig+0x208>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8012026:	4b2d      	ldr	r3, [pc, #180]	; (80120dc <HAL_RCC_OscConfig+0x27c>)
 8012028:	681b      	ldr	r3, [r3, #0]
 801202a:	4a2c      	ldr	r2, [pc, #176]	; (80120dc <HAL_RCC_OscConfig+0x27c>)
 801202c:	f023 0301 	bic.w	r3, r3, #1
 8012030:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8012032:	f7fc fd01 	bl	800ea38 <HAL_GetTick>
 8012036:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8012038:	e00e      	b.n	8012058 <HAL_RCC_OscConfig+0x1f8>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 801203a:	f7fc fcfd 	bl	800ea38 <HAL_GetTick>
 801203e:	4602      	mov	r2, r0
 8012040:	693b      	ldr	r3, [r7, #16]
 8012042:	1ad3      	subs	r3, r2, r3
 8012044:	2b02      	cmp	r3, #2
 8012046:	d907      	bls.n	8012058 <HAL_RCC_OscConfig+0x1f8>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8012048:	4b24      	ldr	r3, [pc, #144]	; (80120dc <HAL_RCC_OscConfig+0x27c>)
 801204a:	681b      	ldr	r3, [r3, #0]
 801204c:	f003 0302 	and.w	r3, r3, #2
 8012050:	2b00      	cmp	r3, #0
 8012052:	d001      	beq.n	8012058 <HAL_RCC_OscConfig+0x1f8>
            {
              return HAL_TIMEOUT;
 8012054:	2303      	movs	r3, #3
 8012056:	e3cf      	b.n	80127f8 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8012058:	4b20      	ldr	r3, [pc, #128]	; (80120dc <HAL_RCC_OscConfig+0x27c>)
 801205a:	681b      	ldr	r3, [r3, #0]
 801205c:	f003 0302 	and.w	r3, r3, #2
 8012060:	2b00      	cmp	r3, #0
 8012062:	d1ea      	bne.n	801203a <HAL_RCC_OscConfig+0x1da>
 8012064:	e000      	b.n	8012068 <HAL_RCC_OscConfig+0x208>
      if ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8012066:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8012068:	687b      	ldr	r3, [r7, #4]
 801206a:	681b      	ldr	r3, [r3, #0]
 801206c:	f003 0301 	and.w	r3, r3, #1
 8012070:	2b00      	cmp	r3, #0
 8012072:	d07e      	beq.n	8012172 <HAL_RCC_OscConfig+0x312>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8012074:	69bb      	ldr	r3, [r7, #24]
 8012076:	2b08      	cmp	r3, #8
 8012078:	d005      	beq.n	8012086 <HAL_RCC_OscConfig+0x226>
 801207a:	69bb      	ldr	r3, [r7, #24]
 801207c:	2b0c      	cmp	r3, #12
 801207e:	d10e      	bne.n	801209e <HAL_RCC_OscConfig+0x23e>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8012080:	697b      	ldr	r3, [r7, #20]
 8012082:	2b03      	cmp	r3, #3
 8012084:	d10b      	bne.n	801209e <HAL_RCC_OscConfig+0x23e>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8012086:	4b15      	ldr	r3, [pc, #84]	; (80120dc <HAL_RCC_OscConfig+0x27c>)
 8012088:	681b      	ldr	r3, [r3, #0]
 801208a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801208e:	2b00      	cmp	r3, #0
 8012090:	d06e      	beq.n	8012170 <HAL_RCC_OscConfig+0x310>
 8012092:	687b      	ldr	r3, [r7, #4]
 8012094:	685b      	ldr	r3, [r3, #4]
 8012096:	2b00      	cmp	r3, #0
 8012098:	d16a      	bne.n	8012170 <HAL_RCC_OscConfig+0x310>
      {
        return HAL_ERROR;
 801209a:	2301      	movs	r3, #1
 801209c:	e3ac      	b.n	80127f8 <HAL_RCC_OscConfig+0x998>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 801209e:	687b      	ldr	r3, [r7, #4]
 80120a0:	685b      	ldr	r3, [r3, #4]
 80120a2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80120a6:	d106      	bne.n	80120b6 <HAL_RCC_OscConfig+0x256>
 80120a8:	4b0c      	ldr	r3, [pc, #48]	; (80120dc <HAL_RCC_OscConfig+0x27c>)
 80120aa:	681b      	ldr	r3, [r3, #0]
 80120ac:	4a0b      	ldr	r2, [pc, #44]	; (80120dc <HAL_RCC_OscConfig+0x27c>)
 80120ae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80120b2:	6013      	str	r3, [r2, #0]
 80120b4:	e024      	b.n	8012100 <HAL_RCC_OscConfig+0x2a0>
 80120b6:	687b      	ldr	r3, [r7, #4]
 80120b8:	685b      	ldr	r3, [r3, #4]
 80120ba:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80120be:	d113      	bne.n	80120e8 <HAL_RCC_OscConfig+0x288>
 80120c0:	4b06      	ldr	r3, [pc, #24]	; (80120dc <HAL_RCC_OscConfig+0x27c>)
 80120c2:	681b      	ldr	r3, [r3, #0]
 80120c4:	4a05      	ldr	r2, [pc, #20]	; (80120dc <HAL_RCC_OscConfig+0x27c>)
 80120c6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80120ca:	6013      	str	r3, [r2, #0]
 80120cc:	4b03      	ldr	r3, [pc, #12]	; (80120dc <HAL_RCC_OscConfig+0x27c>)
 80120ce:	681b      	ldr	r3, [r3, #0]
 80120d0:	4a02      	ldr	r2, [pc, #8]	; (80120dc <HAL_RCC_OscConfig+0x27c>)
 80120d2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80120d6:	6013      	str	r3, [r2, #0]
 80120d8:	e012      	b.n	8012100 <HAL_RCC_OscConfig+0x2a0>
 80120da:	bf00      	nop
 80120dc:	40021000 	.word	0x40021000
 80120e0:	20000090 	.word	0x20000090
 80120e4:	20000094 	.word	0x20000094
 80120e8:	4b8b      	ldr	r3, [pc, #556]	; (8012318 <HAL_RCC_OscConfig+0x4b8>)
 80120ea:	681b      	ldr	r3, [r3, #0]
 80120ec:	4a8a      	ldr	r2, [pc, #552]	; (8012318 <HAL_RCC_OscConfig+0x4b8>)
 80120ee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80120f2:	6013      	str	r3, [r2, #0]
 80120f4:	4b88      	ldr	r3, [pc, #544]	; (8012318 <HAL_RCC_OscConfig+0x4b8>)
 80120f6:	681b      	ldr	r3, [r3, #0]
 80120f8:	4a87      	ldr	r2, [pc, #540]	; (8012318 <HAL_RCC_OscConfig+0x4b8>)
 80120fa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80120fe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8012100:	687b      	ldr	r3, [r7, #4]
 8012102:	685b      	ldr	r3, [r3, #4]
 8012104:	2b00      	cmp	r3, #0
 8012106:	d019      	beq.n	801213c <HAL_RCC_OscConfig+0x2dc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8012108:	f7fc fc96 	bl	800ea38 <HAL_GetTick>
 801210c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 801210e:	e00e      	b.n	801212e <HAL_RCC_OscConfig+0x2ce>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8012110:	f7fc fc92 	bl	800ea38 <HAL_GetTick>
 8012114:	4602      	mov	r2, r0
 8012116:	693b      	ldr	r3, [r7, #16]
 8012118:	1ad3      	subs	r3, r2, r3
 801211a:	2b64      	cmp	r3, #100	; 0x64
 801211c:	d907      	bls.n	801212e <HAL_RCC_OscConfig+0x2ce>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 801211e:	4b7e      	ldr	r3, [pc, #504]	; (8012318 <HAL_RCC_OscConfig+0x4b8>)
 8012120:	681b      	ldr	r3, [r3, #0]
 8012122:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8012126:	2b00      	cmp	r3, #0
 8012128:	d101      	bne.n	801212e <HAL_RCC_OscConfig+0x2ce>
            {
              return HAL_TIMEOUT;
 801212a:	2303      	movs	r3, #3
 801212c:	e364      	b.n	80127f8 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 801212e:	4b7a      	ldr	r3, [pc, #488]	; (8012318 <HAL_RCC_OscConfig+0x4b8>)
 8012130:	681b      	ldr	r3, [r3, #0]
 8012132:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8012136:	2b00      	cmp	r3, #0
 8012138:	d0ea      	beq.n	8012110 <HAL_RCC_OscConfig+0x2b0>
 801213a:	e01a      	b.n	8012172 <HAL_RCC_OscConfig+0x312>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801213c:	f7fc fc7c 	bl	800ea38 <HAL_GetTick>
 8012140:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8012142:	e00e      	b.n	8012162 <HAL_RCC_OscConfig+0x302>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8012144:	f7fc fc78 	bl	800ea38 <HAL_GetTick>
 8012148:	4602      	mov	r2, r0
 801214a:	693b      	ldr	r3, [r7, #16]
 801214c:	1ad3      	subs	r3, r2, r3
 801214e:	2b64      	cmp	r3, #100	; 0x64
 8012150:	d907      	bls.n	8012162 <HAL_RCC_OscConfig+0x302>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8012152:	4b71      	ldr	r3, [pc, #452]	; (8012318 <HAL_RCC_OscConfig+0x4b8>)
 8012154:	681b      	ldr	r3, [r3, #0]
 8012156:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801215a:	2b00      	cmp	r3, #0
 801215c:	d001      	beq.n	8012162 <HAL_RCC_OscConfig+0x302>
            {
              return HAL_TIMEOUT;
 801215e:	2303      	movs	r3, #3
 8012160:	e34a      	b.n	80127f8 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8012162:	4b6d      	ldr	r3, [pc, #436]	; (8012318 <HAL_RCC_OscConfig+0x4b8>)
 8012164:	681b      	ldr	r3, [r3, #0]
 8012166:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801216a:	2b00      	cmp	r3, #0
 801216c:	d1ea      	bne.n	8012144 <HAL_RCC_OscConfig+0x2e4>
 801216e:	e000      	b.n	8012172 <HAL_RCC_OscConfig+0x312>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8012170:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8012172:	687b      	ldr	r3, [r7, #4]
 8012174:	681b      	ldr	r3, [r3, #0]
 8012176:	f003 0302 	and.w	r3, r3, #2
 801217a:	2b00      	cmp	r3, #0
 801217c:	d06c      	beq.n	8012258 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 801217e:	69bb      	ldr	r3, [r7, #24]
 8012180:	2b04      	cmp	r3, #4
 8012182:	d005      	beq.n	8012190 <HAL_RCC_OscConfig+0x330>
 8012184:	69bb      	ldr	r3, [r7, #24]
 8012186:	2b0c      	cmp	r3, #12
 8012188:	d119      	bne.n	80121be <HAL_RCC_OscConfig+0x35e>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 801218a:	697b      	ldr	r3, [r7, #20]
 801218c:	2b02      	cmp	r3, #2
 801218e:	d116      	bne.n	80121be <HAL_RCC_OscConfig+0x35e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8012190:	4b61      	ldr	r3, [pc, #388]	; (8012318 <HAL_RCC_OscConfig+0x4b8>)
 8012192:	681b      	ldr	r3, [r3, #0]
 8012194:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8012198:	2b00      	cmp	r3, #0
 801219a:	d005      	beq.n	80121a8 <HAL_RCC_OscConfig+0x348>
 801219c:	687b      	ldr	r3, [r7, #4]
 801219e:	68db      	ldr	r3, [r3, #12]
 80121a0:	2b00      	cmp	r3, #0
 80121a2:	d101      	bne.n	80121a8 <HAL_RCC_OscConfig+0x348>
      {
        return HAL_ERROR;
 80121a4:	2301      	movs	r3, #1
 80121a6:	e327      	b.n	80127f8 <HAL_RCC_OscConfig+0x998>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80121a8:	4b5b      	ldr	r3, [pc, #364]	; (8012318 <HAL_RCC_OscConfig+0x4b8>)
 80121aa:	685b      	ldr	r3, [r3, #4]
 80121ac:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80121b0:	687b      	ldr	r3, [r7, #4]
 80121b2:	691b      	ldr	r3, [r3, #16]
 80121b4:	061b      	lsls	r3, r3, #24
 80121b6:	4958      	ldr	r1, [pc, #352]	; (8012318 <HAL_RCC_OscConfig+0x4b8>)
 80121b8:	4313      	orrs	r3, r2
 80121ba:	604b      	str	r3, [r1, #4]
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80121bc:	e04c      	b.n	8012258 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80121be:	687b      	ldr	r3, [r7, #4]
 80121c0:	68db      	ldr	r3, [r3, #12]
 80121c2:	2b00      	cmp	r3, #0
 80121c4:	d029      	beq.n	801221a <HAL_RCC_OscConfig+0x3ba>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80121c6:	4b54      	ldr	r3, [pc, #336]	; (8012318 <HAL_RCC_OscConfig+0x4b8>)
 80121c8:	681b      	ldr	r3, [r3, #0]
 80121ca:	4a53      	ldr	r2, [pc, #332]	; (8012318 <HAL_RCC_OscConfig+0x4b8>)
 80121cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80121d0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80121d2:	f7fc fc31 	bl	800ea38 <HAL_GetTick>
 80121d6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80121d8:	e00e      	b.n	80121f8 <HAL_RCC_OscConfig+0x398>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80121da:	f7fc fc2d 	bl	800ea38 <HAL_GetTick>
 80121de:	4602      	mov	r2, r0
 80121e0:	693b      	ldr	r3, [r7, #16]
 80121e2:	1ad3      	subs	r3, r2, r3
 80121e4:	2b02      	cmp	r3, #2
 80121e6:	d907      	bls.n	80121f8 <HAL_RCC_OscConfig+0x398>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80121e8:	4b4b      	ldr	r3, [pc, #300]	; (8012318 <HAL_RCC_OscConfig+0x4b8>)
 80121ea:	681b      	ldr	r3, [r3, #0]
 80121ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80121f0:	2b00      	cmp	r3, #0
 80121f2:	d101      	bne.n	80121f8 <HAL_RCC_OscConfig+0x398>
            {
              return HAL_TIMEOUT;
 80121f4:	2303      	movs	r3, #3
 80121f6:	e2ff      	b.n	80127f8 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80121f8:	4b47      	ldr	r3, [pc, #284]	; (8012318 <HAL_RCC_OscConfig+0x4b8>)
 80121fa:	681b      	ldr	r3, [r3, #0]
 80121fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8012200:	2b00      	cmp	r3, #0
 8012202:	d0ea      	beq.n	80121da <HAL_RCC_OscConfig+0x37a>
            }
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8012204:	4b44      	ldr	r3, [pc, #272]	; (8012318 <HAL_RCC_OscConfig+0x4b8>)
 8012206:	685b      	ldr	r3, [r3, #4]
 8012208:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 801220c:	687b      	ldr	r3, [r7, #4]
 801220e:	691b      	ldr	r3, [r3, #16]
 8012210:	061b      	lsls	r3, r3, #24
 8012212:	4941      	ldr	r1, [pc, #260]	; (8012318 <HAL_RCC_OscConfig+0x4b8>)
 8012214:	4313      	orrs	r3, r2
 8012216:	604b      	str	r3, [r1, #4]
 8012218:	e01e      	b.n	8012258 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 801221a:	4b3f      	ldr	r3, [pc, #252]	; (8012318 <HAL_RCC_OscConfig+0x4b8>)
 801221c:	681b      	ldr	r3, [r3, #0]
 801221e:	4a3e      	ldr	r2, [pc, #248]	; (8012318 <HAL_RCC_OscConfig+0x4b8>)
 8012220:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8012224:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8012226:	f7fc fc07 	bl	800ea38 <HAL_GetTick>
 801222a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 801222c:	e00e      	b.n	801224c <HAL_RCC_OscConfig+0x3ec>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 801222e:	f7fc fc03 	bl	800ea38 <HAL_GetTick>
 8012232:	4602      	mov	r2, r0
 8012234:	693b      	ldr	r3, [r7, #16]
 8012236:	1ad3      	subs	r3, r2, r3
 8012238:	2b02      	cmp	r3, #2
 801223a:	d907      	bls.n	801224c <HAL_RCC_OscConfig+0x3ec>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 801223c:	4b36      	ldr	r3, [pc, #216]	; (8012318 <HAL_RCC_OscConfig+0x4b8>)
 801223e:	681b      	ldr	r3, [r3, #0]
 8012240:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8012244:	2b00      	cmp	r3, #0
 8012246:	d001      	beq.n	801224c <HAL_RCC_OscConfig+0x3ec>
            {
              return HAL_TIMEOUT;
 8012248:	2303      	movs	r3, #3
 801224a:	e2d5      	b.n	80127f8 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 801224c:	4b32      	ldr	r3, [pc, #200]	; (8012318 <HAL_RCC_OscConfig+0x4b8>)
 801224e:	681b      	ldr	r3, [r3, #0]
 8012250:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8012254:	2b00      	cmp	r3, #0
 8012256:	d1ea      	bne.n	801222e <HAL_RCC_OscConfig+0x3ce>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8012258:	687b      	ldr	r3, [r7, #4]
 801225a:	681b      	ldr	r3, [r3, #0]
 801225c:	f003 0308 	and.w	r3, r3, #8
 8012260:	2b00      	cmp	r3, #0
 8012262:	d062      	beq.n	801232a <HAL_RCC_OscConfig+0x4ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8012264:	687b      	ldr	r3, [r7, #4]
 8012266:	695b      	ldr	r3, [r3, #20]
 8012268:	2b00      	cmp	r3, #0
 801226a:	d038      	beq.n	80122de <HAL_RCC_OscConfig+0x47e>
    {
      /* Apply prescaler value */
      if (RCC_OscInitStruct->LSIDiv == RCC_LSI_DIV1)
 801226c:	687b      	ldr	r3, [r7, #4]
 801226e:	699b      	ldr	r3, [r3, #24]
 8012270:	2b00      	cmp	r3, #0
 8012272:	d108      	bne.n	8012286 <HAL_RCC_OscConfig+0x426>
      {
        CLEAR_BIT(RCC->CSR, RCC_CSR_LSIPRE);
 8012274:	4b28      	ldr	r3, [pc, #160]	; (8012318 <HAL_RCC_OscConfig+0x4b8>)
 8012276:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 801227a:	4a27      	ldr	r2, [pc, #156]	; (8012318 <HAL_RCC_OscConfig+0x4b8>)
 801227c:	f023 0310 	bic.w	r3, r3, #16
 8012280:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8012284:	e007      	b.n	8012296 <HAL_RCC_OscConfig+0x436>
      }
      else
      {
        SET_BIT(RCC->CSR, RCC_CSR_LSIPRE);
 8012286:	4b24      	ldr	r3, [pc, #144]	; (8012318 <HAL_RCC_OscConfig+0x4b8>)
 8012288:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 801228c:	4a22      	ldr	r2, [pc, #136]	; (8012318 <HAL_RCC_OscConfig+0x4b8>)
 801228e:	f043 0310 	orr.w	r3, r3, #16
 8012292:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8012296:	4b20      	ldr	r3, [pc, #128]	; (8012318 <HAL_RCC_OscConfig+0x4b8>)
 8012298:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 801229c:	4a1e      	ldr	r2, [pc, #120]	; (8012318 <HAL_RCC_OscConfig+0x4b8>)
 801229e:	f043 0301 	orr.w	r3, r3, #1
 80122a2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80122a6:	f7fc fbc7 	bl	800ea38 <HAL_GetTick>
 80122aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80122ac:	e00f      	b.n	80122ce <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80122ae:	f7fc fbc3 	bl	800ea38 <HAL_GetTick>
 80122b2:	4602      	mov	r2, r0
 80122b4:	693b      	ldr	r3, [r7, #16]
 80122b6:	1ad3      	subs	r3, r2, r3
 80122b8:	2b07      	cmp	r3, #7
 80122ba:	d908      	bls.n	80122ce <HAL_RCC_OscConfig+0x46e>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80122bc:	4b16      	ldr	r3, [pc, #88]	; (8012318 <HAL_RCC_OscConfig+0x4b8>)
 80122be:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80122c2:	f003 0302 	and.w	r3, r3, #2
 80122c6:	2b00      	cmp	r3, #0
 80122c8:	d101      	bne.n	80122ce <HAL_RCC_OscConfig+0x46e>
          {
            return HAL_TIMEOUT;
 80122ca:	2303      	movs	r3, #3
 80122cc:	e294      	b.n	80127f8 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80122ce:	4b12      	ldr	r3, [pc, #72]	; (8012318 <HAL_RCC_OscConfig+0x4b8>)
 80122d0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80122d4:	f003 0302 	and.w	r3, r3, #2
 80122d8:	2b00      	cmp	r3, #0
 80122da:	d0e8      	beq.n	80122ae <HAL_RCC_OscConfig+0x44e>
 80122dc:	e025      	b.n	801232a <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80122de:	4b0e      	ldr	r3, [pc, #56]	; (8012318 <HAL_RCC_OscConfig+0x4b8>)
 80122e0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80122e4:	4a0c      	ldr	r2, [pc, #48]	; (8012318 <HAL_RCC_OscConfig+0x4b8>)
 80122e6:	f023 0301 	bic.w	r3, r3, #1
 80122ea:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80122ee:	f7fc fba3 	bl	800ea38 <HAL_GetTick>
 80122f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80122f4:	e012      	b.n	801231c <HAL_RCC_OscConfig+0x4bc>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80122f6:	f7fc fb9f 	bl	800ea38 <HAL_GetTick>
 80122fa:	4602      	mov	r2, r0
 80122fc:	693b      	ldr	r3, [r7, #16]
 80122fe:	1ad3      	subs	r3, r2, r3
 8012300:	2b07      	cmp	r3, #7
 8012302:	d90b      	bls.n	801231c <HAL_RCC_OscConfig+0x4bc>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8012304:	4b04      	ldr	r3, [pc, #16]	; (8012318 <HAL_RCC_OscConfig+0x4b8>)
 8012306:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 801230a:	f003 0302 	and.w	r3, r3, #2
 801230e:	2b00      	cmp	r3, #0
 8012310:	d004      	beq.n	801231c <HAL_RCC_OscConfig+0x4bc>
          {
            return HAL_TIMEOUT;
 8012312:	2303      	movs	r3, #3
 8012314:	e270      	b.n	80127f8 <HAL_RCC_OscConfig+0x998>
 8012316:	bf00      	nop
 8012318:	40021000 	.word	0x40021000
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 801231c:	4ba8      	ldr	r3, [pc, #672]	; (80125c0 <HAL_RCC_OscConfig+0x760>)
 801231e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8012322:	f003 0302 	and.w	r3, r3, #2
 8012326:	2b00      	cmp	r3, #0
 8012328:	d1e5      	bne.n	80122f6 <HAL_RCC_OscConfig+0x496>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 801232a:	687b      	ldr	r3, [r7, #4]
 801232c:	681b      	ldr	r3, [r3, #0]
 801232e:	f003 0304 	and.w	r3, r3, #4
 8012332:	2b00      	cmp	r3, #0
 8012334:	f000 812d 	beq.w	8012592 <HAL_RCC_OscConfig+0x732>
  {
    FlagStatus       pwrclkchanged = RESET;
 8012338:	2300      	movs	r3, #0
 801233a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 801233c:	4ba0      	ldr	r3, [pc, #640]	; (80125c0 <HAL_RCC_OscConfig+0x760>)
 801233e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8012340:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8012344:	2b00      	cmp	r3, #0
 8012346:	d10d      	bne.n	8012364 <HAL_RCC_OscConfig+0x504>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8012348:	4b9d      	ldr	r3, [pc, #628]	; (80125c0 <HAL_RCC_OscConfig+0x760>)
 801234a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801234c:	4a9c      	ldr	r2, [pc, #624]	; (80125c0 <HAL_RCC_OscConfig+0x760>)
 801234e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8012352:	6593      	str	r3, [r2, #88]	; 0x58
 8012354:	4b9a      	ldr	r3, [pc, #616]	; (80125c0 <HAL_RCC_OscConfig+0x760>)
 8012356:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8012358:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801235c:	60bb      	str	r3, [r7, #8]
 801235e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8012360:	2301      	movs	r3, #1
 8012362:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8012364:	4b97      	ldr	r3, [pc, #604]	; (80125c4 <HAL_RCC_OscConfig+0x764>)
 8012366:	681b      	ldr	r3, [r3, #0]
 8012368:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801236c:	2b00      	cmp	r3, #0
 801236e:	d11e      	bne.n	80123ae <HAL_RCC_OscConfig+0x54e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8012370:	4b94      	ldr	r3, [pc, #592]	; (80125c4 <HAL_RCC_OscConfig+0x764>)
 8012372:	681b      	ldr	r3, [r3, #0]
 8012374:	4a93      	ldr	r2, [pc, #588]	; (80125c4 <HAL_RCC_OscConfig+0x764>)
 8012376:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801237a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 801237c:	f7fc fb5c 	bl	800ea38 <HAL_GetTick>
 8012380:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8012382:	e00e      	b.n	80123a2 <HAL_RCC_OscConfig+0x542>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8012384:	f7fc fb58 	bl	800ea38 <HAL_GetTick>
 8012388:	4602      	mov	r2, r0
 801238a:	693b      	ldr	r3, [r7, #16]
 801238c:	1ad3      	subs	r3, r2, r3
 801238e:	2b02      	cmp	r3, #2
 8012390:	d907      	bls.n	80123a2 <HAL_RCC_OscConfig+0x542>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8012392:	4b8c      	ldr	r3, [pc, #560]	; (80125c4 <HAL_RCC_OscConfig+0x764>)
 8012394:	681b      	ldr	r3, [r3, #0]
 8012396:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801239a:	2b00      	cmp	r3, #0
 801239c:	d101      	bne.n	80123a2 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 801239e:	2303      	movs	r3, #3
 80123a0:	e22a      	b.n	80127f8 <HAL_RCC_OscConfig+0x998>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80123a2:	4b88      	ldr	r3, [pc, #544]	; (80125c4 <HAL_RCC_OscConfig+0x764>)
 80123a4:	681b      	ldr	r3, [r3, #0]
 80123a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80123aa:	2b00      	cmp	r3, #0
 80123ac:	d0ea      	beq.n	8012384 <HAL_RCC_OscConfig+0x524>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 80123ae:	687b      	ldr	r3, [r7, #4]
 80123b0:	689b      	ldr	r3, [r3, #8]
 80123b2:	f003 0301 	and.w	r3, r3, #1
 80123b6:	2b00      	cmp	r3, #0
 80123b8:	d01f      	beq.n	80123fa <HAL_RCC_OscConfig+0x59a>
    {
      if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 80123ba:	687b      	ldr	r3, [r7, #4]
 80123bc:	689b      	ldr	r3, [r3, #8]
 80123be:	f003 0304 	and.w	r3, r3, #4
 80123c2:	2b00      	cmp	r3, #0
 80123c4:	d010      	beq.n	80123e8 <HAL_RCC_OscConfig+0x588>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80123c6:	4b7e      	ldr	r3, [pc, #504]	; (80125c0 <HAL_RCC_OscConfig+0x760>)
 80123c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80123cc:	4a7c      	ldr	r2, [pc, #496]	; (80125c0 <HAL_RCC_OscConfig+0x760>)
 80123ce:	f043 0304 	orr.w	r3, r3, #4
 80123d2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80123d6:	4b7a      	ldr	r3, [pc, #488]	; (80125c0 <HAL_RCC_OscConfig+0x760>)
 80123d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80123dc:	4a78      	ldr	r2, [pc, #480]	; (80125c0 <HAL_RCC_OscConfig+0x760>)
 80123de:	f043 0301 	orr.w	r3, r3, #1
 80123e2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80123e6:	e018      	b.n	801241a <HAL_RCC_OscConfig+0x5ba>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80123e8:	4b75      	ldr	r3, [pc, #468]	; (80125c0 <HAL_RCC_OscConfig+0x760>)
 80123ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80123ee:	4a74      	ldr	r2, [pc, #464]	; (80125c0 <HAL_RCC_OscConfig+0x760>)
 80123f0:	f043 0301 	orr.w	r3, r3, #1
 80123f4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80123f8:	e00f      	b.n	801241a <HAL_RCC_OscConfig+0x5ba>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80123fa:	4b71      	ldr	r3, [pc, #452]	; (80125c0 <HAL_RCC_OscConfig+0x760>)
 80123fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8012400:	4a6f      	ldr	r2, [pc, #444]	; (80125c0 <HAL_RCC_OscConfig+0x760>)
 8012402:	f023 0301 	bic.w	r3, r3, #1
 8012406:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 801240a:	4b6d      	ldr	r3, [pc, #436]	; (80125c0 <HAL_RCC_OscConfig+0x760>)
 801240c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8012410:	4a6b      	ldr	r2, [pc, #428]	; (80125c0 <HAL_RCC_OscConfig+0x760>)
 8012412:	f023 0304 	bic.w	r3, r3, #4
 8012416:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    }

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 801241a:	687b      	ldr	r3, [r7, #4]
 801241c:	689b      	ldr	r3, [r3, #8]
 801241e:	2b00      	cmp	r3, #0
 8012420:	d068      	beq.n	80124f4 <HAL_RCC_OscConfig+0x694>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8012422:	f7fc fb09 	bl	800ea38 <HAL_GetTick>
 8012426:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8012428:	e011      	b.n	801244e <HAL_RCC_OscConfig+0x5ee>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 801242a:	f7fc fb05 	bl	800ea38 <HAL_GetTick>
 801242e:	4602      	mov	r2, r0
 8012430:	693b      	ldr	r3, [r7, #16]
 8012432:	1ad3      	subs	r3, r2, r3
 8012434:	f241 3288 	movw	r2, #5000	; 0x1388
 8012438:	4293      	cmp	r3, r2
 801243a:	d908      	bls.n	801244e <HAL_RCC_OscConfig+0x5ee>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 801243c:	4b60      	ldr	r3, [pc, #384]	; (80125c0 <HAL_RCC_OscConfig+0x760>)
 801243e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8012442:	f003 0302 	and.w	r3, r3, #2
 8012446:	2b00      	cmp	r3, #0
 8012448:	d101      	bne.n	801244e <HAL_RCC_OscConfig+0x5ee>
          {
            return HAL_TIMEOUT;
 801244a:	2303      	movs	r3, #3
 801244c:	e1d4      	b.n	80127f8 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 801244e:	4b5c      	ldr	r3, [pc, #368]	; (80125c0 <HAL_RCC_OscConfig+0x760>)
 8012450:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8012454:	f003 0302 	and.w	r3, r3, #2
 8012458:	2b00      	cmp	r3, #0
 801245a:	d0e6      	beq.n	801242a <HAL_RCC_OscConfig+0x5ca>
          }
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 801245c:	687b      	ldr	r3, [r7, #4]
 801245e:	689b      	ldr	r3, [r3, #8]
 8012460:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8012464:	2b00      	cmp	r3, #0
 8012466:	d022      	beq.n	80124ae <HAL_RCC_OscConfig+0x64e>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8012468:	4b55      	ldr	r3, [pc, #340]	; (80125c0 <HAL_RCC_OscConfig+0x760>)
 801246a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801246e:	4a54      	ldr	r2, [pc, #336]	; (80125c0 <HAL_RCC_OscConfig+0x760>)
 8012470:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012474:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8012478:	e011      	b.n	801249e <HAL_RCC_OscConfig+0x63e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 801247a:	f7fc fadd 	bl	800ea38 <HAL_GetTick>
 801247e:	4602      	mov	r2, r0
 8012480:	693b      	ldr	r3, [r7, #16]
 8012482:	1ad3      	subs	r3, r2, r3
 8012484:	f241 3288 	movw	r2, #5000	; 0x1388
 8012488:	4293      	cmp	r3, r2
 801248a:	d908      	bls.n	801249e <HAL_RCC_OscConfig+0x63e>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 801248c:	4b4c      	ldr	r3, [pc, #304]	; (80125c0 <HAL_RCC_OscConfig+0x760>)
 801248e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8012492:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8012496:	2b00      	cmp	r3, #0
 8012498:	d101      	bne.n	801249e <HAL_RCC_OscConfig+0x63e>
            {
              return HAL_TIMEOUT;
 801249a:	2303      	movs	r3, #3
 801249c:	e1ac      	b.n	80127f8 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 801249e:	4b48      	ldr	r3, [pc, #288]	; (80125c0 <HAL_RCC_OscConfig+0x760>)
 80124a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80124a4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80124a8:	2b00      	cmp	r3, #0
 80124aa:	d0e6      	beq.n	801247a <HAL_RCC_OscConfig+0x61a>
 80124ac:	e068      	b.n	8012580 <HAL_RCC_OscConfig+0x720>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80124ae:	4b44      	ldr	r3, [pc, #272]	; (80125c0 <HAL_RCC_OscConfig+0x760>)
 80124b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80124b4:	4a42      	ldr	r2, [pc, #264]	; (80125c0 <HAL_RCC_OscConfig+0x760>)
 80124b6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80124ba:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80124be:	e011      	b.n	80124e4 <HAL_RCC_OscConfig+0x684>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80124c0:	f7fc faba 	bl	800ea38 <HAL_GetTick>
 80124c4:	4602      	mov	r2, r0
 80124c6:	693b      	ldr	r3, [r7, #16]
 80124c8:	1ad3      	subs	r3, r2, r3
 80124ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80124ce:	4293      	cmp	r3, r2
 80124d0:	d908      	bls.n	80124e4 <HAL_RCC_OscConfig+0x684>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80124d2:	4b3b      	ldr	r3, [pc, #236]	; (80125c0 <HAL_RCC_OscConfig+0x760>)
 80124d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80124d8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80124dc:	2b00      	cmp	r3, #0
 80124de:	d001      	beq.n	80124e4 <HAL_RCC_OscConfig+0x684>
            {
              return HAL_TIMEOUT;
 80124e0:	2303      	movs	r3, #3
 80124e2:	e189      	b.n	80127f8 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80124e4:	4b36      	ldr	r3, [pc, #216]	; (80125c0 <HAL_RCC_OscConfig+0x760>)
 80124e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80124ea:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80124ee:	2b00      	cmp	r3, #0
 80124f0:	d1e6      	bne.n	80124c0 <HAL_RCC_OscConfig+0x660>
 80124f2:	e045      	b.n	8012580 <HAL_RCC_OscConfig+0x720>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80124f4:	f7fc faa0 	bl	800ea38 <HAL_GetTick>
 80124f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80124fa:	e011      	b.n	8012520 <HAL_RCC_OscConfig+0x6c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80124fc:	f7fc fa9c 	bl	800ea38 <HAL_GetTick>
 8012500:	4602      	mov	r2, r0
 8012502:	693b      	ldr	r3, [r7, #16]
 8012504:	1ad3      	subs	r3, r2, r3
 8012506:	f241 3288 	movw	r2, #5000	; 0x1388
 801250a:	4293      	cmp	r3, r2
 801250c:	d908      	bls.n	8012520 <HAL_RCC_OscConfig+0x6c0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 801250e:	4b2c      	ldr	r3, [pc, #176]	; (80125c0 <HAL_RCC_OscConfig+0x760>)
 8012510:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8012514:	f003 0302 	and.w	r3, r3, #2
 8012518:	2b00      	cmp	r3, #0
 801251a:	d001      	beq.n	8012520 <HAL_RCC_OscConfig+0x6c0>
          {
            return HAL_TIMEOUT;
 801251c:	2303      	movs	r3, #3
 801251e:	e16b      	b.n	80127f8 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8012520:	4b27      	ldr	r3, [pc, #156]	; (80125c0 <HAL_RCC_OscConfig+0x760>)
 8012522:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8012526:	f003 0302 	and.w	r3, r3, #2
 801252a:	2b00      	cmp	r3, #0
 801252c:	d1e6      	bne.n	80124fc <HAL_RCC_OscConfig+0x69c>
          }
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 801252e:	4b24      	ldr	r3, [pc, #144]	; (80125c0 <HAL_RCC_OscConfig+0x760>)
 8012530:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8012534:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8012538:	2b00      	cmp	r3, #0
 801253a:	d021      	beq.n	8012580 <HAL_RCC_OscConfig+0x720>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 801253c:	4b20      	ldr	r3, [pc, #128]	; (80125c0 <HAL_RCC_OscConfig+0x760>)
 801253e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8012542:	4a1f      	ldr	r2, [pc, #124]	; (80125c0 <HAL_RCC_OscConfig+0x760>)
 8012544:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8012548:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 801254c:	e011      	b.n	8012572 <HAL_RCC_OscConfig+0x712>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 801254e:	f7fc fa73 	bl	800ea38 <HAL_GetTick>
 8012552:	4602      	mov	r2, r0
 8012554:	693b      	ldr	r3, [r7, #16]
 8012556:	1ad3      	subs	r3, r2, r3
 8012558:	f241 3288 	movw	r2, #5000	; 0x1388
 801255c:	4293      	cmp	r3, r2
 801255e:	d908      	bls.n	8012572 <HAL_RCC_OscConfig+0x712>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8012560:	4b17      	ldr	r3, [pc, #92]	; (80125c0 <HAL_RCC_OscConfig+0x760>)
 8012562:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8012566:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801256a:	2b00      	cmp	r3, #0
 801256c:	d001      	beq.n	8012572 <HAL_RCC_OscConfig+0x712>
            {
              return HAL_TIMEOUT;
 801256e:	2303      	movs	r3, #3
 8012570:	e142      	b.n	80127f8 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8012572:	4b13      	ldr	r3, [pc, #76]	; (80125c0 <HAL_RCC_OscConfig+0x760>)
 8012574:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8012578:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801257c:	2b00      	cmp	r3, #0
 801257e:	d1e6      	bne.n	801254e <HAL_RCC_OscConfig+0x6ee>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8012580:	7ffb      	ldrb	r3, [r7, #31]
 8012582:	2b01      	cmp	r3, #1
 8012584:	d105      	bne.n	8012592 <HAL_RCC_OscConfig+0x732>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8012586:	4b0e      	ldr	r3, [pc, #56]	; (80125c0 <HAL_RCC_OscConfig+0x760>)
 8012588:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801258a:	4a0d      	ldr	r2, [pc, #52]	; (80125c0 <HAL_RCC_OscConfig+0x760>)
 801258c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8012590:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8012592:	687b      	ldr	r3, [r7, #4]
 8012594:	681b      	ldr	r3, [r3, #0]
 8012596:	f003 0320 	and.w	r3, r3, #32
 801259a:	2b00      	cmp	r3, #0
 801259c:	d04f      	beq.n	801263e <HAL_RCC_OscConfig+0x7de>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 801259e:	687b      	ldr	r3, [r7, #4]
 80125a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80125a2:	2b00      	cmp	r3, #0
 80125a4:	d028      	beq.n	80125f8 <HAL_RCC_OscConfig+0x798>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80125a6:	4b06      	ldr	r3, [pc, #24]	; (80125c0 <HAL_RCC_OscConfig+0x760>)
 80125a8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80125ac:	4a04      	ldr	r2, [pc, #16]	; (80125c0 <HAL_RCC_OscConfig+0x760>)
 80125ae:	f043 0301 	orr.w	r3, r3, #1
 80125b2:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80125b6:	f7fc fa3f 	bl	800ea38 <HAL_GetTick>
 80125ba:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80125bc:	e014      	b.n	80125e8 <HAL_RCC_OscConfig+0x788>
 80125be:	bf00      	nop
 80125c0:	40021000 	.word	0x40021000
 80125c4:	40007000 	.word	0x40007000
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80125c8:	f7fc fa36 	bl	800ea38 <HAL_GetTick>
 80125cc:	4602      	mov	r2, r0
 80125ce:	693b      	ldr	r3, [r7, #16]
 80125d0:	1ad3      	subs	r3, r2, r3
 80125d2:	2b02      	cmp	r3, #2
 80125d4:	d908      	bls.n	80125e8 <HAL_RCC_OscConfig+0x788>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80125d6:	4b8a      	ldr	r3, [pc, #552]	; (8012800 <HAL_RCC_OscConfig+0x9a0>)
 80125d8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80125dc:	f003 0302 	and.w	r3, r3, #2
 80125e0:	2b00      	cmp	r3, #0
 80125e2:	d101      	bne.n	80125e8 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 80125e4:	2303      	movs	r3, #3
 80125e6:	e107      	b.n	80127f8 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80125e8:	4b85      	ldr	r3, [pc, #532]	; (8012800 <HAL_RCC_OscConfig+0x9a0>)
 80125ea:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80125ee:	f003 0302 	and.w	r3, r3, #2
 80125f2:	2b00      	cmp	r3, #0
 80125f4:	d0e8      	beq.n	80125c8 <HAL_RCC_OscConfig+0x768>
 80125f6:	e022      	b.n	801263e <HAL_RCC_OscConfig+0x7de>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80125f8:	4b81      	ldr	r3, [pc, #516]	; (8012800 <HAL_RCC_OscConfig+0x9a0>)
 80125fa:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80125fe:	4a80      	ldr	r2, [pc, #512]	; (8012800 <HAL_RCC_OscConfig+0x9a0>)
 8012600:	f023 0301 	bic.w	r3, r3, #1
 8012604:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8012608:	f7fc fa16 	bl	800ea38 <HAL_GetTick>
 801260c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 801260e:	e00f      	b.n	8012630 <HAL_RCC_OscConfig+0x7d0>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8012610:	f7fc fa12 	bl	800ea38 <HAL_GetTick>
 8012614:	4602      	mov	r2, r0
 8012616:	693b      	ldr	r3, [r7, #16]
 8012618:	1ad3      	subs	r3, r2, r3
 801261a:	2b02      	cmp	r3, #2
 801261c:	d908      	bls.n	8012630 <HAL_RCC_OscConfig+0x7d0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 801261e:	4b78      	ldr	r3, [pc, #480]	; (8012800 <HAL_RCC_OscConfig+0x9a0>)
 8012620:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8012624:	f003 0302 	and.w	r3, r3, #2
 8012628:	2b00      	cmp	r3, #0
 801262a:	d001      	beq.n	8012630 <HAL_RCC_OscConfig+0x7d0>
          {
            return HAL_TIMEOUT;
 801262c:	2303      	movs	r3, #3
 801262e:	e0e3      	b.n	80127f8 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8012630:	4b73      	ldr	r3, [pc, #460]	; (8012800 <HAL_RCC_OscConfig+0x9a0>)
 8012632:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8012636:	f003 0302 	and.w	r3, r3, #2
 801263a:	2b00      	cmp	r3, #0
 801263c:	d1e8      	bne.n	8012610 <HAL_RCC_OscConfig+0x7b0>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 801263e:	687b      	ldr	r3, [r7, #4]
 8012640:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012642:	2b00      	cmp	r3, #0
 8012644:	f000 80d7 	beq.w	80127f6 <HAL_RCC_OscConfig+0x996>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8012648:	4b6d      	ldr	r3, [pc, #436]	; (8012800 <HAL_RCC_OscConfig+0x9a0>)
 801264a:	689b      	ldr	r3, [r3, #8]
 801264c:	f003 030c 	and.w	r3, r3, #12
 8012650:	2b0c      	cmp	r3, #12
 8012652:	f000 8091 	beq.w	8012778 <HAL_RCC_OscConfig+0x918>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8012656:	687b      	ldr	r3, [r7, #4]
 8012658:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801265a:	2b02      	cmp	r3, #2
 801265c:	d166      	bne.n	801272c <HAL_RCC_OscConfig+0x8cc>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 801265e:	4b68      	ldr	r3, [pc, #416]	; (8012800 <HAL_RCC_OscConfig+0x9a0>)
 8012660:	681b      	ldr	r3, [r3, #0]
 8012662:	4a67      	ldr	r2, [pc, #412]	; (8012800 <HAL_RCC_OscConfig+0x9a0>)
 8012664:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8012668:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801266a:	f7fc f9e5 	bl	800ea38 <HAL_GetTick>
 801266e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8012670:	e00e      	b.n	8012690 <HAL_RCC_OscConfig+0x830>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8012672:	f7fc f9e1 	bl	800ea38 <HAL_GetTick>
 8012676:	4602      	mov	r2, r0
 8012678:	693b      	ldr	r3, [r7, #16]
 801267a:	1ad3      	subs	r3, r2, r3
 801267c:	2b02      	cmp	r3, #2
 801267e:	d907      	bls.n	8012690 <HAL_RCC_OscConfig+0x830>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8012680:	4b5f      	ldr	r3, [pc, #380]	; (8012800 <HAL_RCC_OscConfig+0x9a0>)
 8012682:	681b      	ldr	r3, [r3, #0]
 8012684:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8012688:	2b00      	cmp	r3, #0
 801268a:	d001      	beq.n	8012690 <HAL_RCC_OscConfig+0x830>
            {
              return HAL_TIMEOUT;
 801268c:	2303      	movs	r3, #3
 801268e:	e0b3      	b.n	80127f8 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8012690:	4b5b      	ldr	r3, [pc, #364]	; (8012800 <HAL_RCC_OscConfig+0x9a0>)
 8012692:	681b      	ldr	r3, [r3, #0]
 8012694:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8012698:	2b00      	cmp	r3, #0
 801269a:	d1ea      	bne.n	8012672 <HAL_RCC_OscConfig+0x812>
            }
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 801269c:	4b58      	ldr	r3, [pc, #352]	; (8012800 <HAL_RCC_OscConfig+0x9a0>)
 801269e:	68da      	ldr	r2, [r3, #12]
 80126a0:	4b58      	ldr	r3, [pc, #352]	; (8012804 <HAL_RCC_OscConfig+0x9a4>)
 80126a2:	4013      	ands	r3, r2
 80126a4:	687a      	ldr	r2, [r7, #4]
 80126a6:	6b11      	ldr	r1, [r2, #48]	; 0x30
 80126a8:	687a      	ldr	r2, [r7, #4]
 80126aa:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80126ac:	3a01      	subs	r2, #1
 80126ae:	0112      	lsls	r2, r2, #4
 80126b0:	4311      	orrs	r1, r2
 80126b2:	687a      	ldr	r2, [r7, #4]
 80126b4:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80126b6:	0212      	lsls	r2, r2, #8
 80126b8:	4311      	orrs	r1, r2
 80126ba:	687a      	ldr	r2, [r7, #4]
 80126bc:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80126be:	0852      	lsrs	r2, r2, #1
 80126c0:	3a01      	subs	r2, #1
 80126c2:	0552      	lsls	r2, r2, #21
 80126c4:	4311      	orrs	r1, r2
 80126c6:	687a      	ldr	r2, [r7, #4]
 80126c8:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80126ca:	0852      	lsrs	r2, r2, #1
 80126cc:	3a01      	subs	r2, #1
 80126ce:	0652      	lsls	r2, r2, #25
 80126d0:	4311      	orrs	r1, r2
 80126d2:	687a      	ldr	r2, [r7, #4]
 80126d4:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80126d6:	06d2      	lsls	r2, r2, #27
 80126d8:	430a      	orrs	r2, r1
 80126da:	4949      	ldr	r1, [pc, #292]	; (8012800 <HAL_RCC_OscConfig+0x9a0>)
 80126dc:	4313      	orrs	r3, r2
 80126de:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80126e0:	4b47      	ldr	r3, [pc, #284]	; (8012800 <HAL_RCC_OscConfig+0x9a0>)
 80126e2:	681b      	ldr	r3, [r3, #0]
 80126e4:	4a46      	ldr	r2, [pc, #280]	; (8012800 <HAL_RCC_OscConfig+0x9a0>)
 80126e6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80126ea:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80126ec:	4b44      	ldr	r3, [pc, #272]	; (8012800 <HAL_RCC_OscConfig+0x9a0>)
 80126ee:	68db      	ldr	r3, [r3, #12]
 80126f0:	4a43      	ldr	r2, [pc, #268]	; (8012800 <HAL_RCC_OscConfig+0x9a0>)
 80126f2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80126f6:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80126f8:	f7fc f99e 	bl	800ea38 <HAL_GetTick>
 80126fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80126fe:	e00e      	b.n	801271e <HAL_RCC_OscConfig+0x8be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8012700:	f7fc f99a 	bl	800ea38 <HAL_GetTick>
 8012704:	4602      	mov	r2, r0
 8012706:	693b      	ldr	r3, [r7, #16]
 8012708:	1ad3      	subs	r3, r2, r3
 801270a:	2b02      	cmp	r3, #2
 801270c:	d907      	bls.n	801271e <HAL_RCC_OscConfig+0x8be>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 801270e:	4b3c      	ldr	r3, [pc, #240]	; (8012800 <HAL_RCC_OscConfig+0x9a0>)
 8012710:	681b      	ldr	r3, [r3, #0]
 8012712:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8012716:	2b00      	cmp	r3, #0
 8012718:	d101      	bne.n	801271e <HAL_RCC_OscConfig+0x8be>
            {
              return HAL_TIMEOUT;
 801271a:	2303      	movs	r3, #3
 801271c:	e06c      	b.n	80127f8 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 801271e:	4b38      	ldr	r3, [pc, #224]	; (8012800 <HAL_RCC_OscConfig+0x9a0>)
 8012720:	681b      	ldr	r3, [r3, #0]
 8012722:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8012726:	2b00      	cmp	r3, #0
 8012728:	d0ea      	beq.n	8012700 <HAL_RCC_OscConfig+0x8a0>
 801272a:	e064      	b.n	80127f6 <HAL_RCC_OscConfig+0x996>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 801272c:	4b34      	ldr	r3, [pc, #208]	; (8012800 <HAL_RCC_OscConfig+0x9a0>)
 801272e:	681b      	ldr	r3, [r3, #0]
 8012730:	4a33      	ldr	r2, [pc, #204]	; (8012800 <HAL_RCC_OscConfig+0x9a0>)
 8012732:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8012736:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8012738:	f7fc f97e 	bl	800ea38 <HAL_GetTick>
 801273c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 801273e:	e00e      	b.n	801275e <HAL_RCC_OscConfig+0x8fe>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8012740:	f7fc f97a 	bl	800ea38 <HAL_GetTick>
 8012744:	4602      	mov	r2, r0
 8012746:	693b      	ldr	r3, [r7, #16]
 8012748:	1ad3      	subs	r3, r2, r3
 801274a:	2b02      	cmp	r3, #2
 801274c:	d907      	bls.n	801275e <HAL_RCC_OscConfig+0x8fe>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 801274e:	4b2c      	ldr	r3, [pc, #176]	; (8012800 <HAL_RCC_OscConfig+0x9a0>)
 8012750:	681b      	ldr	r3, [r3, #0]
 8012752:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8012756:	2b00      	cmp	r3, #0
 8012758:	d001      	beq.n	801275e <HAL_RCC_OscConfig+0x8fe>
            {
              return HAL_TIMEOUT;
 801275a:	2303      	movs	r3, #3
 801275c:	e04c      	b.n	80127f8 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 801275e:	4b28      	ldr	r3, [pc, #160]	; (8012800 <HAL_RCC_OscConfig+0x9a0>)
 8012760:	681b      	ldr	r3, [r3, #0]
 8012762:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8012766:	2b00      	cmp	r3, #0
 8012768:	d1ea      	bne.n	8012740 <HAL_RCC_OscConfig+0x8e0>
            }
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 801276a:	4b25      	ldr	r3, [pc, #148]	; (8012800 <HAL_RCC_OscConfig+0x9a0>)
 801276c:	68da      	ldr	r2, [r3, #12]
 801276e:	4924      	ldr	r1, [pc, #144]	; (8012800 <HAL_RCC_OscConfig+0x9a0>)
 8012770:	4b25      	ldr	r3, [pc, #148]	; (8012808 <HAL_RCC_OscConfig+0x9a8>)
 8012772:	4013      	ands	r3, r2
 8012774:	60cb      	str	r3, [r1, #12]
 8012776:	e03e      	b.n	80127f6 <HAL_RCC_OscConfig+0x996>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_OFF)
 8012778:	687b      	ldr	r3, [r7, #4]
 801277a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801277c:	2b01      	cmp	r3, #1
 801277e:	d101      	bne.n	8012784 <HAL_RCC_OscConfig+0x924>
      {
        return HAL_ERROR;
 8012780:	2301      	movs	r3, #1
 8012782:	e039      	b.n	80127f8 <HAL_RCC_OscConfig+0x998>
      }
      else
      {
        pll_config = RCC->PLLCFGR;
 8012784:	4b1e      	ldr	r3, [pc, #120]	; (8012800 <HAL_RCC_OscConfig+0x9a0>)
 8012786:	68db      	ldr	r3, [r3, #12]
 8012788:	617b      	str	r3, [r7, #20]
        /* Do not return HAL_ERROR if request repeats the current configuration */
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 801278a:	697b      	ldr	r3, [r7, #20]
 801278c:	f003 0203 	and.w	r2, r3, #3
 8012790:	687b      	ldr	r3, [r7, #4]
 8012792:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012794:	429a      	cmp	r2, r3
 8012796:	d12c      	bne.n	80127f2 <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8012798:	697b      	ldr	r3, [r7, #20]
 801279a:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 801279e:	687b      	ldr	r3, [r7, #4]
 80127a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80127a2:	3b01      	subs	r3, #1
 80127a4:	011b      	lsls	r3, r3, #4
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80127a6:	429a      	cmp	r2, r3
 80127a8:	d123      	bne.n	80127f2 <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80127aa:	697b      	ldr	r3, [r7, #20]
 80127ac:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80127b0:	687b      	ldr	r3, [r7, #4]
 80127b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80127b4:	021b      	lsls	r3, r3, #8
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80127b6:	429a      	cmp	r2, r3
 80127b8:	d11b      	bne.n	80127f2 <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80127ba:	697b      	ldr	r3, [r7, #20]
 80127bc:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80127c0:	687b      	ldr	r3, [r7, #4]
 80127c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80127c4:	06db      	lsls	r3, r3, #27
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80127c6:	429a      	cmp	r2, r3
 80127c8:	d113      	bne.n	80127f2 <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80127ca:	697b      	ldr	r3, [r7, #20]
 80127cc:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80127d0:	687b      	ldr	r3, [r7, #4]
 80127d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80127d4:	085b      	lsrs	r3, r3, #1
 80127d6:	3b01      	subs	r3, #1
 80127d8:	055b      	lsls	r3, r3, #21
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80127da:	429a      	cmp	r2, r3
 80127dc:	d109      	bne.n	80127f2 <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80127de:	697b      	ldr	r3, [r7, #20]
 80127e0:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80127e4:	687b      	ldr	r3, [r7, #4]
 80127e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80127e8:	085b      	lsrs	r3, r3, #1
 80127ea:	3b01      	subs	r3, #1
 80127ec:	065b      	lsls	r3, r3, #25
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80127ee:	429a      	cmp	r2, r3
 80127f0:	d001      	beq.n	80127f6 <HAL_RCC_OscConfig+0x996>
        {
          return HAL_ERROR;
 80127f2:	2301      	movs	r3, #1
 80127f4:	e000      	b.n	80127f8 <HAL_RCC_OscConfig+0x998>
        }
      }
    }
  }

  return HAL_OK;
 80127f6:	2300      	movs	r3, #0
}
 80127f8:	4618      	mov	r0, r3
 80127fa:	3720      	adds	r7, #32
 80127fc:	46bd      	mov	sp, r7
 80127fe:	bd80      	pop	{r7, pc}
 8012800:	40021000 	.word	0x40021000
 8012804:	019f800c 	.word	0x019f800c
 8012808:	feeefffc 	.word	0xfeeefffc

0801280c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 801280c:	b580      	push	{r7, lr}
 801280e:	b086      	sub	sp, #24
 8012810:	af00      	add	r7, sp, #0
 8012812:	6078      	str	r0, [r7, #4]
 8012814:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8012816:	2300      	movs	r3, #0
 8012818:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 801281a:	687b      	ldr	r3, [r7, #4]
 801281c:	2b00      	cmp	r3, #0
 801281e:	d101      	bne.n	8012824 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8012820:	2301      	movs	r3, #1
 8012822:	e11c      	b.n	8012a5e <HAL_RCC_ClockConfig+0x252>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8012824:	4b90      	ldr	r3, [pc, #576]	; (8012a68 <HAL_RCC_ClockConfig+0x25c>)
 8012826:	681b      	ldr	r3, [r3, #0]
 8012828:	f003 030f 	and.w	r3, r3, #15
 801282c:	683a      	ldr	r2, [r7, #0]
 801282e:	429a      	cmp	r2, r3
 8012830:	d910      	bls.n	8012854 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8012832:	4b8d      	ldr	r3, [pc, #564]	; (8012a68 <HAL_RCC_ClockConfig+0x25c>)
 8012834:	681b      	ldr	r3, [r3, #0]
 8012836:	f023 020f 	bic.w	r2, r3, #15
 801283a:	498b      	ldr	r1, [pc, #556]	; (8012a68 <HAL_RCC_ClockConfig+0x25c>)
 801283c:	683b      	ldr	r3, [r7, #0]
 801283e:	4313      	orrs	r3, r2
 8012840:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8012842:	4b89      	ldr	r3, [pc, #548]	; (8012a68 <HAL_RCC_ClockConfig+0x25c>)
 8012844:	681b      	ldr	r3, [r3, #0]
 8012846:	f003 030f 	and.w	r3, r3, #15
 801284a:	683a      	ldr	r2, [r7, #0]
 801284c:	429a      	cmp	r2, r3
 801284e:	d001      	beq.n	8012854 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8012850:	2301      	movs	r3, #1
 8012852:	e104      	b.n	8012a5e <HAL_RCC_ClockConfig+0x252>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8012854:	687b      	ldr	r3, [r7, #4]
 8012856:	681b      	ldr	r3, [r3, #0]
 8012858:	f003 0302 	and.w	r3, r3, #2
 801285c:	2b00      	cmp	r3, #0
 801285e:	d010      	beq.n	8012882 <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8012860:	687b      	ldr	r3, [r7, #4]
 8012862:	689a      	ldr	r2, [r3, #8]
 8012864:	4b81      	ldr	r3, [pc, #516]	; (8012a6c <HAL_RCC_ClockConfig+0x260>)
 8012866:	689b      	ldr	r3, [r3, #8]
 8012868:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801286c:	429a      	cmp	r2, r3
 801286e:	d908      	bls.n	8012882 <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8012870:	4b7e      	ldr	r3, [pc, #504]	; (8012a6c <HAL_RCC_ClockConfig+0x260>)
 8012872:	689b      	ldr	r3, [r3, #8]
 8012874:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8012878:	687b      	ldr	r3, [r7, #4]
 801287a:	689b      	ldr	r3, [r3, #8]
 801287c:	497b      	ldr	r1, [pc, #492]	; (8012a6c <HAL_RCC_ClockConfig+0x260>)
 801287e:	4313      	orrs	r3, r2
 8012880:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8012882:	687b      	ldr	r3, [r7, #4]
 8012884:	681b      	ldr	r3, [r3, #0]
 8012886:	f003 0301 	and.w	r3, r3, #1
 801288a:	2b00      	cmp	r3, #0
 801288c:	f000 8085 	beq.w	801299a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8012890:	687b      	ldr	r3, [r7, #4]
 8012892:	685b      	ldr	r3, [r3, #4]
 8012894:	2b03      	cmp	r3, #3
 8012896:	d11f      	bne.n	80128d8 <HAL_RCC_ClockConfig+0xcc>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8012898:	4b74      	ldr	r3, [pc, #464]	; (8012a6c <HAL_RCC_ClockConfig+0x260>)
 801289a:	681b      	ldr	r3, [r3, #0]
 801289c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80128a0:	2b00      	cmp	r3, #0
 80128a2:	d101      	bne.n	80128a8 <HAL_RCC_ClockConfig+0x9c>
      {
        return HAL_ERROR;
 80128a4:	2301      	movs	r3, #1
 80128a6:	e0da      	b.n	8012a5e <HAL_RCC_ClockConfig+0x252>
      }

      /* Transition state management when selecting PLL as SYSCLK source and */
      /* target frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80128a8:	f000 fa58 	bl	8012d5c <RCC_GetSysClockFreqFromPLLSource>
 80128ac:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if (pllfreq > 80000000U)
 80128ae:	693b      	ldr	r3, [r7, #16]
 80128b0:	4a6f      	ldr	r2, [pc, #444]	; (8012a70 <HAL_RCC_ClockConfig+0x264>)
 80128b2:	4293      	cmp	r3, r2
 80128b4:	d947      	bls.n	8012946 <HAL_RCC_ClockConfig+0x13a>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80128b6:	4b6d      	ldr	r3, [pc, #436]	; (8012a6c <HAL_RCC_ClockConfig+0x260>)
 80128b8:	689b      	ldr	r3, [r3, #8]
 80128ba:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80128be:	2b00      	cmp	r3, #0
 80128c0:	d141      	bne.n	8012946 <HAL_RCC_ClockConfig+0x13a>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80128c2:	4b6a      	ldr	r3, [pc, #424]	; (8012a6c <HAL_RCC_ClockConfig+0x260>)
 80128c4:	689b      	ldr	r3, [r3, #8]
 80128c6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80128ca:	4a68      	ldr	r2, [pc, #416]	; (8012a6c <HAL_RCC_ClockConfig+0x260>)
 80128cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80128d0:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80128d2:	2380      	movs	r3, #128	; 0x80
 80128d4:	617b      	str	r3, [r7, #20]
 80128d6:	e036      	b.n	8012946 <HAL_RCC_ClockConfig+0x13a>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80128d8:	687b      	ldr	r3, [r7, #4]
 80128da:	685b      	ldr	r3, [r3, #4]
 80128dc:	2b02      	cmp	r3, #2
 80128de:	d107      	bne.n	80128f0 <HAL_RCC_ClockConfig+0xe4>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80128e0:	4b62      	ldr	r3, [pc, #392]	; (8012a6c <HAL_RCC_ClockConfig+0x260>)
 80128e2:	681b      	ldr	r3, [r3, #0]
 80128e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80128e8:	2b00      	cmp	r3, #0
 80128ea:	d115      	bne.n	8012918 <HAL_RCC_ClockConfig+0x10c>
        {
          return HAL_ERROR;
 80128ec:	2301      	movs	r3, #1
 80128ee:	e0b6      	b.n	8012a5e <HAL_RCC_ClockConfig+0x252>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80128f0:	687b      	ldr	r3, [r7, #4]
 80128f2:	685b      	ldr	r3, [r3, #4]
 80128f4:	2b00      	cmp	r3, #0
 80128f6:	d107      	bne.n	8012908 <HAL_RCC_ClockConfig+0xfc>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80128f8:	4b5c      	ldr	r3, [pc, #368]	; (8012a6c <HAL_RCC_ClockConfig+0x260>)
 80128fa:	681b      	ldr	r3, [r3, #0]
 80128fc:	f003 0302 	and.w	r3, r3, #2
 8012900:	2b00      	cmp	r3, #0
 8012902:	d109      	bne.n	8012918 <HAL_RCC_ClockConfig+0x10c>
        {
          return HAL_ERROR;
 8012904:	2301      	movs	r3, #1
 8012906:	e0aa      	b.n	8012a5e <HAL_RCC_ClockConfig+0x252>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8012908:	4b58      	ldr	r3, [pc, #352]	; (8012a6c <HAL_RCC_ClockConfig+0x260>)
 801290a:	681b      	ldr	r3, [r3, #0]
 801290c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8012910:	2b00      	cmp	r3, #0
 8012912:	d101      	bne.n	8012918 <HAL_RCC_ClockConfig+0x10c>
        {
          return HAL_ERROR;
 8012914:	2301      	movs	r3, #1
 8012916:	e0a2      	b.n	8012a5e <HAL_RCC_ClockConfig+0x252>
        }
      }

      /* Transition state management when when going down from PLL used as */
      /* SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8012918:	f000 f8b0 	bl	8012a7c <HAL_RCC_GetSysClockFreq>
 801291c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if (pllfreq > 80000000U)
 801291e:	693b      	ldr	r3, [r7, #16]
 8012920:	4a53      	ldr	r2, [pc, #332]	; (8012a70 <HAL_RCC_ClockConfig+0x264>)
 8012922:	4293      	cmp	r3, r2
 8012924:	d90f      	bls.n	8012946 <HAL_RCC_ClockConfig+0x13a>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8012926:	4b51      	ldr	r3, [pc, #324]	; (8012a6c <HAL_RCC_ClockConfig+0x260>)
 8012928:	689b      	ldr	r3, [r3, #8]
 801292a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801292e:	2b00      	cmp	r3, #0
 8012930:	d109      	bne.n	8012946 <HAL_RCC_ClockConfig+0x13a>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8012932:	4b4e      	ldr	r3, [pc, #312]	; (8012a6c <HAL_RCC_ClockConfig+0x260>)
 8012934:	689b      	ldr	r3, [r3, #8]
 8012936:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 801293a:	4a4c      	ldr	r2, [pc, #304]	; (8012a6c <HAL_RCC_ClockConfig+0x260>)
 801293c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012940:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8012942:	2380      	movs	r3, #128	; 0x80
 8012944:	617b      	str	r3, [r7, #20]
        }
      }
    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8012946:	4b49      	ldr	r3, [pc, #292]	; (8012a6c <HAL_RCC_ClockConfig+0x260>)
 8012948:	689b      	ldr	r3, [r3, #8]
 801294a:	f023 0203 	bic.w	r2, r3, #3
 801294e:	687b      	ldr	r3, [r7, #4]
 8012950:	685b      	ldr	r3, [r3, #4]
 8012952:	4946      	ldr	r1, [pc, #280]	; (8012a6c <HAL_RCC_ClockConfig+0x260>)
 8012954:	4313      	orrs	r3, r2
 8012956:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8012958:	f7fc f86e 	bl	800ea38 <HAL_GetTick>
 801295c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 801295e:	e013      	b.n	8012988 <HAL_RCC_ClockConfig+0x17c>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8012960:	f7fc f86a 	bl	800ea38 <HAL_GetTick>
 8012964:	4602      	mov	r2, r0
 8012966:	68fb      	ldr	r3, [r7, #12]
 8012968:	1ad3      	subs	r3, r2, r3
 801296a:	f241 3288 	movw	r2, #5000	; 0x1388
 801296e:	4293      	cmp	r3, r2
 8012970:	d90a      	bls.n	8012988 <HAL_RCC_ClockConfig+0x17c>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8012972:	4b3e      	ldr	r3, [pc, #248]	; (8012a6c <HAL_RCC_ClockConfig+0x260>)
 8012974:	689b      	ldr	r3, [r3, #8]
 8012976:	f003 020c 	and.w	r2, r3, #12
 801297a:	687b      	ldr	r3, [r7, #4]
 801297c:	685b      	ldr	r3, [r3, #4]
 801297e:	009b      	lsls	r3, r3, #2
 8012980:	429a      	cmp	r2, r3
 8012982:	d001      	beq.n	8012988 <HAL_RCC_ClockConfig+0x17c>
        {
          return HAL_TIMEOUT;
 8012984:	2303      	movs	r3, #3
 8012986:	e06a      	b.n	8012a5e <HAL_RCC_ClockConfig+0x252>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8012988:	4b38      	ldr	r3, [pc, #224]	; (8012a6c <HAL_RCC_ClockConfig+0x260>)
 801298a:	689b      	ldr	r3, [r3, #8]
 801298c:	f003 020c 	and.w	r2, r3, #12
 8012990:	687b      	ldr	r3, [r7, #4]
 8012992:	685b      	ldr	r3, [r3, #4]
 8012994:	009b      	lsls	r3, r3, #2
 8012996:	429a      	cmp	r2, r3
 8012998:	d1e2      	bne.n	8012960 <HAL_RCC_ClockConfig+0x154>
      }
    }
  }

  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 801299a:	697b      	ldr	r3, [r7, #20]
 801299c:	2b80      	cmp	r3, #128	; 0x80
 801299e:	d105      	bne.n	80129ac <HAL_RCC_ClockConfig+0x1a0>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80129a0:	4b32      	ldr	r3, [pc, #200]	; (8012a6c <HAL_RCC_ClockConfig+0x260>)
 80129a2:	689b      	ldr	r3, [r3, #8]
 80129a4:	4a31      	ldr	r2, [pc, #196]	; (8012a6c <HAL_RCC_ClockConfig+0x260>)
 80129a6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80129aa:	6093      	str	r3, [r2, #8]
  }

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80129ac:	687b      	ldr	r3, [r7, #4]
 80129ae:	681b      	ldr	r3, [r3, #0]
 80129b0:	f003 0302 	and.w	r3, r3, #2
 80129b4:	2b00      	cmp	r3, #0
 80129b6:	d010      	beq.n	80129da <HAL_RCC_ClockConfig+0x1ce>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80129b8:	687b      	ldr	r3, [r7, #4]
 80129ba:	689a      	ldr	r2, [r3, #8]
 80129bc:	4b2b      	ldr	r3, [pc, #172]	; (8012a6c <HAL_RCC_ClockConfig+0x260>)
 80129be:	689b      	ldr	r3, [r3, #8]
 80129c0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80129c4:	429a      	cmp	r2, r3
 80129c6:	d208      	bcs.n	80129da <HAL_RCC_ClockConfig+0x1ce>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80129c8:	4b28      	ldr	r3, [pc, #160]	; (8012a6c <HAL_RCC_ClockConfig+0x260>)
 80129ca:	689b      	ldr	r3, [r3, #8]
 80129cc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80129d0:	687b      	ldr	r3, [r7, #4]
 80129d2:	689b      	ldr	r3, [r3, #8]
 80129d4:	4925      	ldr	r1, [pc, #148]	; (8012a6c <HAL_RCC_ClockConfig+0x260>)
 80129d6:	4313      	orrs	r3, r2
 80129d8:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80129da:	4b23      	ldr	r3, [pc, #140]	; (8012a68 <HAL_RCC_ClockConfig+0x25c>)
 80129dc:	681b      	ldr	r3, [r3, #0]
 80129de:	f003 030f 	and.w	r3, r3, #15
 80129e2:	683a      	ldr	r2, [r7, #0]
 80129e4:	429a      	cmp	r2, r3
 80129e6:	d210      	bcs.n	8012a0a <HAL_RCC_ClockConfig+0x1fe>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80129e8:	4b1f      	ldr	r3, [pc, #124]	; (8012a68 <HAL_RCC_ClockConfig+0x25c>)
 80129ea:	681b      	ldr	r3, [r3, #0]
 80129ec:	f023 020f 	bic.w	r2, r3, #15
 80129f0:	491d      	ldr	r1, [pc, #116]	; (8012a68 <HAL_RCC_ClockConfig+0x25c>)
 80129f2:	683b      	ldr	r3, [r7, #0]
 80129f4:	4313      	orrs	r3, r2
 80129f6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80129f8:	4b1b      	ldr	r3, [pc, #108]	; (8012a68 <HAL_RCC_ClockConfig+0x25c>)
 80129fa:	681b      	ldr	r3, [r3, #0]
 80129fc:	f003 030f 	and.w	r3, r3, #15
 8012a00:	683a      	ldr	r2, [r7, #0]
 8012a02:	429a      	cmp	r2, r3
 8012a04:	d001      	beq.n	8012a0a <HAL_RCC_ClockConfig+0x1fe>
    {
      return HAL_ERROR;
 8012a06:	2301      	movs	r3, #1
 8012a08:	e029      	b.n	8012a5e <HAL_RCC_ClockConfig+0x252>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8012a0a:	687b      	ldr	r3, [r7, #4]
 8012a0c:	681b      	ldr	r3, [r3, #0]
 8012a0e:	f003 0304 	and.w	r3, r3, #4
 8012a12:	2b00      	cmp	r3, #0
 8012a14:	d008      	beq.n	8012a28 <HAL_RCC_ClockConfig+0x21c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8012a16:	4b15      	ldr	r3, [pc, #84]	; (8012a6c <HAL_RCC_ClockConfig+0x260>)
 8012a18:	689b      	ldr	r3, [r3, #8]
 8012a1a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8012a1e:	687b      	ldr	r3, [r7, #4]
 8012a20:	68db      	ldr	r3, [r3, #12]
 8012a22:	4912      	ldr	r1, [pc, #72]	; (8012a6c <HAL_RCC_ClockConfig+0x260>)
 8012a24:	4313      	orrs	r3, r2
 8012a26:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8012a28:	687b      	ldr	r3, [r7, #4]
 8012a2a:	681b      	ldr	r3, [r3, #0]
 8012a2c:	f003 0308 	and.w	r3, r3, #8
 8012a30:	2b00      	cmp	r3, #0
 8012a32:	d009      	beq.n	8012a48 <HAL_RCC_ClockConfig+0x23c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8012a34:	4b0d      	ldr	r3, [pc, #52]	; (8012a6c <HAL_RCC_ClockConfig+0x260>)
 8012a36:	689b      	ldr	r3, [r3, #8]
 8012a38:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8012a3c:	687b      	ldr	r3, [r7, #4]
 8012a3e:	691b      	ldr	r3, [r3, #16]
 8012a40:	00db      	lsls	r3, r3, #3
 8012a42:	490a      	ldr	r1, [pc, #40]	; (8012a6c <HAL_RCC_ClockConfig+0x260>)
 8012a44:	4313      	orrs	r3, r2
 8012a46:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8012a48:	f000 f8b6 	bl	8012bb8 <HAL_RCC_GetHCLKFreq>
 8012a4c:	4603      	mov	r3, r0
 8012a4e:	4a09      	ldr	r2, [pc, #36]	; (8012a74 <HAL_RCC_ClockConfig+0x268>)
 8012a50:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8012a52:	4b09      	ldr	r3, [pc, #36]	; (8012a78 <HAL_RCC_ClockConfig+0x26c>)
 8012a54:	681b      	ldr	r3, [r3, #0]
 8012a56:	4618      	mov	r0, r3
 8012a58:	f7fb fd5e 	bl	800e518 <HAL_InitTick>
 8012a5c:	4603      	mov	r3, r0
}
 8012a5e:	4618      	mov	r0, r3
 8012a60:	3718      	adds	r7, #24
 8012a62:	46bd      	mov	sp, r7
 8012a64:	bd80      	pop	{r7, pc}
 8012a66:	bf00      	nop
 8012a68:	40022000 	.word	0x40022000
 8012a6c:	40021000 	.word	0x40021000
 8012a70:	04c4b400 	.word	0x04c4b400
 8012a74:	20000090 	.word	0x20000090
 8012a78:	20000094 	.word	0x20000094

08012a7c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8012a7c:	b480      	push	{r7}
 8012a7e:	b089      	sub	sp, #36	; 0x24
 8012a80:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8012a82:	2300      	movs	r3, #0
 8012a84:	61fb      	str	r3, [r7, #28]
 8012a86:	2300      	movs	r3, #0
 8012a88:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8012a8a:	4b47      	ldr	r3, [pc, #284]	; (8012ba8 <HAL_RCC_GetSysClockFreq+0x12c>)
 8012a8c:	689b      	ldr	r3, [r3, #8]
 8012a8e:	f003 030c 	and.w	r3, r3, #12
 8012a92:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8012a94:	4b44      	ldr	r3, [pc, #272]	; (8012ba8 <HAL_RCC_GetSysClockFreq+0x12c>)
 8012a96:	68db      	ldr	r3, [r3, #12]
 8012a98:	f003 0303 	and.w	r3, r3, #3
 8012a9c:	60fb      	str	r3, [r7, #12]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8012a9e:	693b      	ldr	r3, [r7, #16]
 8012aa0:	2b00      	cmp	r3, #0
 8012aa2:	d005      	beq.n	8012ab0 <HAL_RCC_GetSysClockFreq+0x34>
 8012aa4:	693b      	ldr	r3, [r7, #16]
 8012aa6:	2b0c      	cmp	r3, #12
 8012aa8:	d121      	bne.n	8012aee <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8012aaa:	68fb      	ldr	r3, [r7, #12]
 8012aac:	2b01      	cmp	r3, #1
 8012aae:	d11e      	bne.n	8012aee <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8012ab0:	4b3d      	ldr	r3, [pc, #244]	; (8012ba8 <HAL_RCC_GetSysClockFreq+0x12c>)
 8012ab2:	681b      	ldr	r3, [r3, #0]
 8012ab4:	f003 0308 	and.w	r3, r3, #8
 8012ab8:	2b00      	cmp	r3, #0
 8012aba:	d107      	bne.n	8012acc <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8012abc:	4b3a      	ldr	r3, [pc, #232]	; (8012ba8 <HAL_RCC_GetSysClockFreq+0x12c>)
 8012abe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8012ac2:	0a1b      	lsrs	r3, r3, #8
 8012ac4:	f003 030f 	and.w	r3, r3, #15
 8012ac8:	61fb      	str	r3, [r7, #28]
 8012aca:	e005      	b.n	8012ad8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8012acc:	4b36      	ldr	r3, [pc, #216]	; (8012ba8 <HAL_RCC_GetSysClockFreq+0x12c>)
 8012ace:	681b      	ldr	r3, [r3, #0]
 8012ad0:	091b      	lsrs	r3, r3, #4
 8012ad2:	f003 030f 	and.w	r3, r3, #15
 8012ad6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in Hz*/
    msirange = MSIRangeTable[msirange];
 8012ad8:	4a34      	ldr	r2, [pc, #208]	; (8012bac <HAL_RCC_GetSysClockFreq+0x130>)
 8012ada:	69fb      	ldr	r3, [r7, #28]
 8012adc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8012ae0:	61fb      	str	r3, [r7, #28]

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8012ae2:	693b      	ldr	r3, [r7, #16]
 8012ae4:	2b00      	cmp	r3, #0
 8012ae6:	d10d      	bne.n	8012b04 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8012ae8:	69fb      	ldr	r3, [r7, #28]
 8012aea:	61bb      	str	r3, [r7, #24]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8012aec:	e00a      	b.n	8012b04 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8012aee:	693b      	ldr	r3, [r7, #16]
 8012af0:	2b04      	cmp	r3, #4
 8012af2:	d102      	bne.n	8012afa <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8012af4:	4b2e      	ldr	r3, [pc, #184]	; (8012bb0 <HAL_RCC_GetSysClockFreq+0x134>)
 8012af6:	61bb      	str	r3, [r7, #24]
 8012af8:	e004      	b.n	8012b04 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8012afa:	693b      	ldr	r3, [r7, #16]
 8012afc:	2b08      	cmp	r3, #8
 8012afe:	d101      	bne.n	8012b04 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8012b00:	4b2c      	ldr	r3, [pc, #176]	; (8012bb4 <HAL_RCC_GetSysClockFreq+0x138>)
 8012b02:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8012b04:	693b      	ldr	r3, [r7, #16]
 8012b06:	2b0c      	cmp	r3, #12
 8012b08:	d146      	bne.n	8012b98 <HAL_RCC_GetSysClockFreq+0x11c>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8012b0a:	4b27      	ldr	r3, [pc, #156]	; (8012ba8 <HAL_RCC_GetSysClockFreq+0x12c>)
 8012b0c:	68db      	ldr	r3, [r3, #12]
 8012b0e:	f003 0303 	and.w	r3, r3, #3
 8012b12:	60bb      	str	r3, [r7, #8]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8012b14:	4b24      	ldr	r3, [pc, #144]	; (8012ba8 <HAL_RCC_GetSysClockFreq+0x12c>)
 8012b16:	68db      	ldr	r3, [r3, #12]
 8012b18:	091b      	lsrs	r3, r3, #4
 8012b1a:	f003 030f 	and.w	r3, r3, #15
 8012b1e:	3301      	adds	r3, #1
 8012b20:	607b      	str	r3, [r7, #4]

    switch (pllsource)
 8012b22:	68bb      	ldr	r3, [r7, #8]
 8012b24:	2b02      	cmp	r3, #2
 8012b26:	d003      	beq.n	8012b30 <HAL_RCC_GetSysClockFreq+0xb4>
 8012b28:	68bb      	ldr	r3, [r7, #8]
 8012b2a:	2b03      	cmp	r3, #3
 8012b2c:	d00d      	beq.n	8012b4a <HAL_RCC_GetSysClockFreq+0xce>
 8012b2e:	e019      	b.n	8012b64 <HAL_RCC_GetSysClockFreq+0xe8>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8012b30:	4a1f      	ldr	r2, [pc, #124]	; (8012bb0 <HAL_RCC_GetSysClockFreq+0x134>)
 8012b32:	687b      	ldr	r3, [r7, #4]
 8012b34:	fbb2 f3f3 	udiv	r3, r2, r3
 8012b38:	4a1b      	ldr	r2, [pc, #108]	; (8012ba8 <HAL_RCC_GetSysClockFreq+0x12c>)
 8012b3a:	68d2      	ldr	r2, [r2, #12]
 8012b3c:	0a12      	lsrs	r2, r2, #8
 8012b3e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8012b42:	fb02 f303 	mul.w	r3, r2, r3
 8012b46:	617b      	str	r3, [r7, #20]
        break;
 8012b48:	e019      	b.n	8012b7e <HAL_RCC_GetSysClockFreq+0x102>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8012b4a:	4a1a      	ldr	r2, [pc, #104]	; (8012bb4 <HAL_RCC_GetSysClockFreq+0x138>)
 8012b4c:	687b      	ldr	r3, [r7, #4]
 8012b4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8012b52:	4a15      	ldr	r2, [pc, #84]	; (8012ba8 <HAL_RCC_GetSysClockFreq+0x12c>)
 8012b54:	68d2      	ldr	r2, [r2, #12]
 8012b56:	0a12      	lsrs	r2, r2, #8
 8012b58:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8012b5c:	fb02 f303 	mul.w	r3, r2, r3
 8012b60:	617b      	str	r3, [r7, #20]
        break;
 8012b62:	e00c      	b.n	8012b7e <HAL_RCC_GetSysClockFreq+0x102>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllvco = (msirange / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8012b64:	69fa      	ldr	r2, [r7, #28]
 8012b66:	687b      	ldr	r3, [r7, #4]
 8012b68:	fbb2 f3f3 	udiv	r3, r2, r3
 8012b6c:	4a0e      	ldr	r2, [pc, #56]	; (8012ba8 <HAL_RCC_GetSysClockFreq+0x12c>)
 8012b6e:	68d2      	ldr	r2, [r2, #12]
 8012b70:	0a12      	lsrs	r2, r2, #8
 8012b72:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8012b76:	fb02 f303 	mul.w	r3, r2, r3
 8012b7a:	617b      	str	r3, [r7, #20]
        break;
 8012b7c:	bf00      	nop
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U) * 2U;
 8012b7e:	4b0a      	ldr	r3, [pc, #40]	; (8012ba8 <HAL_RCC_GetSysClockFreq+0x12c>)
 8012b80:	68db      	ldr	r3, [r3, #12]
 8012b82:	0e5b      	lsrs	r3, r3, #25
 8012b84:	f003 0303 	and.w	r3, r3, #3
 8012b88:	3301      	adds	r3, #1
 8012b8a:	005b      	lsls	r3, r3, #1
 8012b8c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8012b8e:	697a      	ldr	r2, [r7, #20]
 8012b90:	683b      	ldr	r3, [r7, #0]
 8012b92:	fbb2 f3f3 	udiv	r3, r2, r3
 8012b96:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8012b98:	69bb      	ldr	r3, [r7, #24]
}
 8012b9a:	4618      	mov	r0, r3
 8012b9c:	3724      	adds	r7, #36	; 0x24
 8012b9e:	46bd      	mov	sp, r7
 8012ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ba4:	4770      	bx	lr
 8012ba6:	bf00      	nop
 8012ba8:	40021000 	.word	0x40021000
 8012bac:	0801f25c 	.word	0x0801f25c
 8012bb0:	00f42400 	.word	0x00f42400
 8012bb4:	007a1200 	.word	0x007a1200

08012bb8 <HAL_RCC_GetHCLKFreq>:
  * @note   Each time HCLK changes, this function must be called to update the
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8012bb8:	b580      	push	{r7, lr}
 8012bba:	af00      	add	r7, sp, #0
  return (HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]);
 8012bbc:	f7ff ff5e 	bl	8012a7c <HAL_RCC_GetSysClockFreq>
 8012bc0:	4602      	mov	r2, r0
 8012bc2:	4b05      	ldr	r3, [pc, #20]	; (8012bd8 <HAL_RCC_GetHCLKFreq+0x20>)
 8012bc4:	689b      	ldr	r3, [r3, #8]
 8012bc6:	091b      	lsrs	r3, r3, #4
 8012bc8:	f003 030f 	and.w	r3, r3, #15
 8012bcc:	4903      	ldr	r1, [pc, #12]	; (8012bdc <HAL_RCC_GetHCLKFreq+0x24>)
 8012bce:	5ccb      	ldrb	r3, [r1, r3]
 8012bd0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8012bd4:	4618      	mov	r0, r3
 8012bd6:	bd80      	pop	{r7, pc}
 8012bd8:	40021000 	.word	0x40021000
 8012bdc:	0801f244 	.word	0x0801f244

08012be0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8012be0:	b580      	push	{r7, lr}
 8012be2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8012be4:	f7ff ffe8 	bl	8012bb8 <HAL_RCC_GetHCLKFreq>
 8012be8:	4602      	mov	r2, r0
 8012bea:	4b05      	ldr	r3, [pc, #20]	; (8012c00 <HAL_RCC_GetPCLK1Freq+0x20>)
 8012bec:	689b      	ldr	r3, [r3, #8]
 8012bee:	0a1b      	lsrs	r3, r3, #8
 8012bf0:	f003 0307 	and.w	r3, r3, #7
 8012bf4:	4903      	ldr	r1, [pc, #12]	; (8012c04 <HAL_RCC_GetPCLK1Freq+0x24>)
 8012bf6:	5ccb      	ldrb	r3, [r1, r3]
 8012bf8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8012bfc:	4618      	mov	r0, r3
 8012bfe:	bd80      	pop	{r7, pc}
 8012c00:	40021000 	.word	0x40021000
 8012c04:	0801f254 	.word	0x0801f254

08012c08 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8012c08:	b580      	push	{r7, lr}
 8012c0a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8012c0c:	f7ff ffd4 	bl	8012bb8 <HAL_RCC_GetHCLKFreq>
 8012c10:	4602      	mov	r2, r0
 8012c12:	4b05      	ldr	r3, [pc, #20]	; (8012c28 <HAL_RCC_GetPCLK2Freq+0x20>)
 8012c14:	689b      	ldr	r3, [r3, #8]
 8012c16:	0adb      	lsrs	r3, r3, #11
 8012c18:	f003 0307 	and.w	r3, r3, #7
 8012c1c:	4903      	ldr	r1, [pc, #12]	; (8012c2c <HAL_RCC_GetPCLK2Freq+0x24>)
 8012c1e:	5ccb      	ldrb	r3, [r1, r3]
 8012c20:	fa22 f303 	lsr.w	r3, r2, r3
}
 8012c24:	4618      	mov	r0, r3
 8012c26:	bd80      	pop	{r7, pc}
 8012c28:	40021000 	.word	0x40021000
 8012c2c:	0801f254 	.word	0x0801f254

08012c30 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8012c30:	b480      	push	{r7}
 8012c32:	b083      	sub	sp, #12
 8012c34:	af00      	add	r7, sp, #0
 8012c36:	6078      	str	r0, [r7, #4]
 8012c38:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8012c3a:	687b      	ldr	r3, [r7, #4]
 8012c3c:	220f      	movs	r2, #15
 8012c3e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8012c40:	4b12      	ldr	r3, [pc, #72]	; (8012c8c <HAL_RCC_GetClockConfig+0x5c>)
 8012c42:	689b      	ldr	r3, [r3, #8]
 8012c44:	f003 0203 	and.w	r2, r3, #3
 8012c48:	687b      	ldr	r3, [r7, #4]
 8012c4a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8012c4c:	4b0f      	ldr	r3, [pc, #60]	; (8012c8c <HAL_RCC_GetClockConfig+0x5c>)
 8012c4e:	689b      	ldr	r3, [r3, #8]
 8012c50:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8012c54:	687b      	ldr	r3, [r7, #4]
 8012c56:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8012c58:	4b0c      	ldr	r3, [pc, #48]	; (8012c8c <HAL_RCC_GetClockConfig+0x5c>)
 8012c5a:	689b      	ldr	r3, [r3, #8]
 8012c5c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8012c60:	687b      	ldr	r3, [r7, #4]
 8012c62:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8012c64:	4b09      	ldr	r3, [pc, #36]	; (8012c8c <HAL_RCC_GetClockConfig+0x5c>)
 8012c66:	689b      	ldr	r3, [r3, #8]
 8012c68:	08db      	lsrs	r3, r3, #3
 8012c6a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8012c6e:	687b      	ldr	r3, [r7, #4]
 8012c70:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8012c72:	4b07      	ldr	r3, [pc, #28]	; (8012c90 <HAL_RCC_GetClockConfig+0x60>)
 8012c74:	681b      	ldr	r3, [r3, #0]
 8012c76:	f003 020f 	and.w	r2, r3, #15
 8012c7a:	683b      	ldr	r3, [r7, #0]
 8012c7c:	601a      	str	r2, [r3, #0]
}
 8012c7e:	bf00      	nop
 8012c80:	370c      	adds	r7, #12
 8012c82:	46bd      	mov	sp, r7
 8012c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c88:	4770      	bx	lr
 8012c8a:	bf00      	nop
 8012c8c:	40021000 	.word	0x40021000
 8012c90:	40022000 	.word	0x40022000

08012c94 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8012c94:	b580      	push	{r7, lr}
 8012c96:	b086      	sub	sp, #24
 8012c98:	af00      	add	r7, sp, #0
 8012c9a:	6078      	str	r0, [r7, #4]
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8012c9c:	2300      	movs	r3, #0
 8012c9e:	617b      	str	r3, [r7, #20]
  uint32_t vos;

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 8012ca0:	4b2c      	ldr	r3, [pc, #176]	; (8012d54 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8012ca2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8012ca4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8012ca8:	2b00      	cmp	r3, #0
 8012caa:	d003      	beq.n	8012cb4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8012cac:	f7ff f83a 	bl	8011d24 <HAL_PWREx_GetVoltageRange>
 8012cb0:	6138      	str	r0, [r7, #16]
 8012cb2:	e014      	b.n	8012cde <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8012cb4:	4b27      	ldr	r3, [pc, #156]	; (8012d54 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8012cb6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8012cb8:	4a26      	ldr	r2, [pc, #152]	; (8012d54 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8012cba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8012cbe:	6593      	str	r3, [r2, #88]	; 0x58
 8012cc0:	4b24      	ldr	r3, [pc, #144]	; (8012d54 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8012cc2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8012cc4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8012cc8:	60fb      	str	r3, [r7, #12]
 8012cca:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8012ccc:	f7ff f82a 	bl	8011d24 <HAL_PWREx_GetVoltageRange>
 8012cd0:	6138      	str	r0, [r7, #16]
    __HAL_RCC_PWR_CLK_DISABLE();
 8012cd2:	4b20      	ldr	r3, [pc, #128]	; (8012d54 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8012cd4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8012cd6:	4a1f      	ldr	r2, [pc, #124]	; (8012d54 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8012cd8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8012cdc:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE0) || (vos == PWR_REGULATOR_VOLTAGE_SCALE1))
 8012cde:	693b      	ldr	r3, [r7, #16]
 8012ce0:	2b00      	cmp	r3, #0
 8012ce2:	d003      	beq.n	8012cec <RCC_SetFlashLatencyFromMSIRange+0x58>
 8012ce4:	693b      	ldr	r3, [r7, #16]
 8012ce6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8012cea:	d10b      	bne.n	8012d04 <RCC_SetFlashLatencyFromMSIRange+0x70>
  {
    if (msirange > RCC_MSIRANGE_8)
 8012cec:	687b      	ldr	r3, [r7, #4]
 8012cee:	2b80      	cmp	r3, #128	; 0x80
 8012cf0:	d919      	bls.n	8012d26 <RCC_SetFlashLatencyFromMSIRange+0x92>
    {
      /* MSI > 16Mhz */
      if (msirange > RCC_MSIRANGE_10)
 8012cf2:	687b      	ldr	r3, [r7, #4]
 8012cf4:	2ba0      	cmp	r3, #160	; 0xa0
 8012cf6:	d902      	bls.n	8012cfe <RCC_SetFlashLatencyFromMSIRange+0x6a>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8012cf8:	2302      	movs	r3, #2
 8012cfa:	617b      	str	r3, [r7, #20]
    if (msirange > RCC_MSIRANGE_8)
 8012cfc:	e013      	b.n	8012d26 <RCC_SetFlashLatencyFromMSIRange+0x92>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8012cfe:	2301      	movs	r3, #1
 8012d00:	617b      	str	r3, [r7, #20]
    if (msirange > RCC_MSIRANGE_8)
 8012d02:	e010      	b.n	8012d26 <RCC_SetFlashLatencyFromMSIRange+0x92>
    }
    /* else MSI <= 16Mhz default FLASH_LATENCY_0 0WS */
  }
  else
  {
    if (msirange > RCC_MSIRANGE_8)
 8012d04:	687b      	ldr	r3, [r7, #4]
 8012d06:	2b80      	cmp	r3, #128	; 0x80
 8012d08:	d902      	bls.n	8012d10 <RCC_SetFlashLatencyFromMSIRange+0x7c>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8012d0a:	2303      	movs	r3, #3
 8012d0c:	617b      	str	r3, [r7, #20]
 8012d0e:	e00a      	b.n	8012d26 <RCC_SetFlashLatencyFromMSIRange+0x92>
    }
    else
    {
      if (msirange == RCC_MSIRANGE_8)
 8012d10:	687b      	ldr	r3, [r7, #4]
 8012d12:	2b80      	cmp	r3, #128	; 0x80
 8012d14:	d102      	bne.n	8012d1c <RCC_SetFlashLatencyFromMSIRange+0x88>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8012d16:	2302      	movs	r3, #2
 8012d18:	617b      	str	r3, [r7, #20]
 8012d1a:	e004      	b.n	8012d26 <RCC_SetFlashLatencyFromMSIRange+0x92>
      }
      else if (msirange == RCC_MSIRANGE_7)
 8012d1c:	687b      	ldr	r3, [r7, #4]
 8012d1e:	2b70      	cmp	r3, #112	; 0x70
 8012d20:	d101      	bne.n	8012d26 <RCC_SetFlashLatencyFromMSIRange+0x92>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8012d22:	2301      	movs	r3, #1
 8012d24:	617b      	str	r3, [r7, #20]
        /* MSI < 8Mhz default FLASH_LATENCY_0 0WS */
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8012d26:	4b0c      	ldr	r3, [pc, #48]	; (8012d58 <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 8012d28:	681b      	ldr	r3, [r3, #0]
 8012d2a:	f023 020f 	bic.w	r2, r3, #15
 8012d2e:	490a      	ldr	r1, [pc, #40]	; (8012d58 <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 8012d30:	697b      	ldr	r3, [r7, #20]
 8012d32:	4313      	orrs	r3, r2
 8012d34:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 8012d36:	4b08      	ldr	r3, [pc, #32]	; (8012d58 <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 8012d38:	681b      	ldr	r3, [r3, #0]
 8012d3a:	f003 030f 	and.w	r3, r3, #15
 8012d3e:	697a      	ldr	r2, [r7, #20]
 8012d40:	429a      	cmp	r2, r3
 8012d42:	d001      	beq.n	8012d48 <RCC_SetFlashLatencyFromMSIRange+0xb4>
  {
    return HAL_ERROR;
 8012d44:	2301      	movs	r3, #1
 8012d46:	e000      	b.n	8012d4a <RCC_SetFlashLatencyFromMSIRange+0xb6>
  }

  return HAL_OK;
 8012d48:	2300      	movs	r3, #0
}
 8012d4a:	4618      	mov	r0, r3
 8012d4c:	3718      	adds	r7, #24
 8012d4e:	46bd      	mov	sp, r7
 8012d50:	bd80      	pop	{r7, pc}
 8012d52:	bf00      	nop
 8012d54:	40021000 	.word	0x40021000
 8012d58:	40022000 	.word	0x40022000

08012d5c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8012d5c:	b480      	push	{r7}
 8012d5e:	b087      	sub	sp, #28
 8012d60:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;    /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8012d62:	4b31      	ldr	r3, [pc, #196]	; (8012e28 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8012d64:	68db      	ldr	r3, [r3, #12]
 8012d66:	f003 0303 	and.w	r3, r3, #3
 8012d6a:	60fb      	str	r3, [r7, #12]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8012d6c:	4b2e      	ldr	r3, [pc, #184]	; (8012e28 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8012d6e:	68db      	ldr	r3, [r3, #12]
 8012d70:	091b      	lsrs	r3, r3, #4
 8012d72:	f003 030f 	and.w	r3, r3, #15
 8012d76:	3301      	adds	r3, #1
 8012d78:	60bb      	str	r3, [r7, #8]

  switch (pllsource)
 8012d7a:	68fb      	ldr	r3, [r7, #12]
 8012d7c:	2b03      	cmp	r3, #3
 8012d7e:	d015      	beq.n	8012dac <RCC_GetSysClockFreqFromPLLSource+0x50>
 8012d80:	68fb      	ldr	r3, [r7, #12]
 8012d82:	2b03      	cmp	r3, #3
 8012d84:	d839      	bhi.n	8012dfa <RCC_GetSysClockFreqFromPLLSource+0x9e>
 8012d86:	68fb      	ldr	r3, [r7, #12]
 8012d88:	2b01      	cmp	r3, #1
 8012d8a:	d01c      	beq.n	8012dc6 <RCC_GetSysClockFreqFromPLLSource+0x6a>
 8012d8c:	68fb      	ldr	r3, [r7, #12]
 8012d8e:	2b02      	cmp	r3, #2
 8012d90:	d133      	bne.n	8012dfa <RCC_GetSysClockFreqFromPLLSource+0x9e>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8012d92:	4a26      	ldr	r2, [pc, #152]	; (8012e2c <RCC_GetSysClockFreqFromPLLSource+0xd0>)
 8012d94:	68bb      	ldr	r3, [r7, #8]
 8012d96:	fbb2 f3f3 	udiv	r3, r2, r3
 8012d9a:	4a23      	ldr	r2, [pc, #140]	; (8012e28 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8012d9c:	68d2      	ldr	r2, [r2, #12]
 8012d9e:	0a12      	lsrs	r2, r2, #8
 8012da0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8012da4:	fb02 f303 	mul.w	r3, r2, r3
 8012da8:	613b      	str	r3, [r7, #16]
      break;
 8012daa:	e029      	b.n	8012e00 <RCC_GetSysClockFreqFromPLLSource+0xa4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8012dac:	4a20      	ldr	r2, [pc, #128]	; (8012e30 <RCC_GetSysClockFreqFromPLLSource+0xd4>)
 8012dae:	68bb      	ldr	r3, [r7, #8]
 8012db0:	fbb2 f3f3 	udiv	r3, r2, r3
 8012db4:	4a1c      	ldr	r2, [pc, #112]	; (8012e28 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8012db6:	68d2      	ldr	r2, [r2, #12]
 8012db8:	0a12      	lsrs	r2, r2, #8
 8012dba:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8012dbe:	fb02 f303 	mul.w	r3, r2, r3
 8012dc2:	613b      	str	r3, [r7, #16]
      break;
 8012dc4:	e01c      	b.n	8012e00 <RCC_GetSysClockFreqFromPLLSource+0xa4>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      /* Get MSI range source */
      if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8012dc6:	4b18      	ldr	r3, [pc, #96]	; (8012e28 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8012dc8:	681b      	ldr	r3, [r3, #0]
 8012dca:	f003 0308 	and.w	r3, r3, #8
 8012dce:	2b00      	cmp	r3, #0
 8012dd0:	d107      	bne.n	8012de2 <RCC_GetSysClockFreqFromPLLSource+0x86>
      { /* MSISRANGE from RCC_CSR applies */
        msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8012dd2:	4b15      	ldr	r3, [pc, #84]	; (8012e28 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8012dd4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8012dd8:	0a1b      	lsrs	r3, r3, #8
 8012dda:	f003 030f 	and.w	r3, r3, #15
 8012dde:	617b      	str	r3, [r7, #20]
 8012de0:	e005      	b.n	8012dee <RCC_GetSysClockFreqFromPLLSource+0x92>
      }
      else
      { /* MSIRANGE from RCC_CR applies */
        msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8012de2:	4b11      	ldr	r3, [pc, #68]	; (8012e28 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8012de4:	681b      	ldr	r3, [r3, #0]
 8012de6:	091b      	lsrs	r3, r3, #4
 8012de8:	f003 030f 	and.w	r3, r3, #15
 8012dec:	617b      	str	r3, [r7, #20]
      }
        /*MSI frequency range in HZ*/
        pllvco = MSIRangeTable[msirange];
 8012dee:	4a11      	ldr	r2, [pc, #68]	; (8012e34 <RCC_GetSysClockFreqFromPLLSource+0xd8>)
 8012df0:	697b      	ldr	r3, [r7, #20]
 8012df2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8012df6:	613b      	str	r3, [r7, #16]
        break;
 8012df8:	e002      	b.n	8012e00 <RCC_GetSysClockFreqFromPLLSource+0xa4>
    default:
      /* unexpected */
      pllvco = 0;
 8012dfa:	2300      	movs	r3, #0
 8012dfc:	613b      	str	r3, [r7, #16]
      break;
 8012dfe:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U) * 2U;
 8012e00:	4b09      	ldr	r3, [pc, #36]	; (8012e28 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8012e02:	68db      	ldr	r3, [r3, #12]
 8012e04:	0e5b      	lsrs	r3, r3, #25
 8012e06:	f003 0303 	and.w	r3, r3, #3
 8012e0a:	3301      	adds	r3, #1
 8012e0c:	005b      	lsls	r3, r3, #1
 8012e0e:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8012e10:	693a      	ldr	r2, [r7, #16]
 8012e12:	687b      	ldr	r3, [r7, #4]
 8012e14:	fbb2 f3f3 	udiv	r3, r2, r3
 8012e18:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8012e1a:	683b      	ldr	r3, [r7, #0]
}
 8012e1c:	4618      	mov	r0, r3
 8012e1e:	371c      	adds	r7, #28
 8012e20:	46bd      	mov	sp, r7
 8012e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e26:	4770      	bx	lr
 8012e28:	40021000 	.word	0x40021000
 8012e2c:	00f42400 	.word	0x00f42400
 8012e30:	007a1200 	.word	0x007a1200
 8012e34:	0801f25c 	.word	0x0801f25c

08012e38 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8012e38:	b580      	push	{r7, lr}
 8012e3a:	b088      	sub	sp, #32
 8012e3c:	af00      	add	r7, sp, #0
 8012e3e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8012e40:	2300      	movs	r3, #0
 8012e42:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8012e44:	2300      	movs	r3, #0
 8012e46:	77bb      	strb	r3, [r7, #30]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8012e48:	687b      	ldr	r3, [r7, #4]
 8012e4a:	681b      	ldr	r3, [r3, #0]
 8012e4c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8012e50:	2b00      	cmp	r3, #0
 8012e52:	d040      	beq.n	8012ed6 <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 8012e54:	687b      	ldr	r3, [r7, #4]
 8012e56:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012e58:	2b80      	cmp	r3, #128	; 0x80
 8012e5a:	d02a      	beq.n	8012eb2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8012e5c:	2b80      	cmp	r3, #128	; 0x80
 8012e5e:	d825      	bhi.n	8012eac <HAL_RCCEx_PeriphCLKConfig+0x74>
 8012e60:	2b60      	cmp	r3, #96	; 0x60
 8012e62:	d026      	beq.n	8012eb2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8012e64:	2b60      	cmp	r3, #96	; 0x60
 8012e66:	d821      	bhi.n	8012eac <HAL_RCCEx_PeriphCLKConfig+0x74>
 8012e68:	2b40      	cmp	r3, #64	; 0x40
 8012e6a:	d006      	beq.n	8012e7a <HAL_RCCEx_PeriphCLKConfig+0x42>
 8012e6c:	2b40      	cmp	r3, #64	; 0x40
 8012e6e:	d81d      	bhi.n	8012eac <HAL_RCCEx_PeriphCLKConfig+0x74>
 8012e70:	2b00      	cmp	r3, #0
 8012e72:	d009      	beq.n	8012e88 <HAL_RCCEx_PeriphCLKConfig+0x50>
 8012e74:	2b20      	cmp	r3, #32
 8012e76:	d010      	beq.n	8012e9a <HAL_RCCEx_PeriphCLKConfig+0x62>
 8012e78:	e018      	b.n	8012eac <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8012e7a:	4b8f      	ldr	r3, [pc, #572]	; (80130b8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8012e7c:	68db      	ldr	r3, [r3, #12]
 8012e7e:	4a8e      	ldr	r2, [pc, #568]	; (80130b8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8012e80:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8012e84:	60d3      	str	r3, [r2, #12]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8012e86:	e015      	b.n	8012eb4 <HAL_RCCEx_PeriphCLKConfig+0x7c>

      case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
        /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8012e88:	687b      	ldr	r3, [r7, #4]
 8012e8a:	3304      	adds	r3, #4
 8012e8c:	2100      	movs	r1, #0
 8012e8e:	4618      	mov	r0, r3
 8012e90:	f000 fb56 	bl	8013540 <RCCEx_PLLSAI1_Config>
 8012e94:	4603      	mov	r3, r0
 8012e96:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8012e98:	e00c      	b.n	8012eb4 <HAL_RCCEx_PeriphCLKConfig+0x7c>

      case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
        /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
        ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8012e9a:	687b      	ldr	r3, [r7, #4]
 8012e9c:	3320      	adds	r3, #32
 8012e9e:	2100      	movs	r1, #0
 8012ea0:	4618      	mov	r0, r3
 8012ea2:	f000 fc33 	bl	801370c <RCCEx_PLLSAI2_Config>
 8012ea6:	4603      	mov	r3, r0
 8012ea8:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8012eaa:	e003      	b.n	8012eb4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      case RCC_SAI1CLKSOURCE_HSI:      /* HSI is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8012eac:	2301      	movs	r3, #1
 8012eae:	77fb      	strb	r3, [r7, #31]
        break;
 8012eb0:	e000      	b.n	8012eb4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
        break;
 8012eb2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8012eb4:	7ffb      	ldrb	r3, [r7, #31]
 8012eb6:	2b00      	cmp	r3, #0
 8012eb8:	d10b      	bne.n	8012ed2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8012eba:	4b7f      	ldr	r3, [pc, #508]	; (80130b8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8012ebc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8012ec0:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 8012ec4:	687b      	ldr	r3, [r7, #4]
 8012ec6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012ec8:	497b      	ldr	r1, [pc, #492]	; (80130b8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8012eca:	4313      	orrs	r3, r2
 8012ecc:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8012ed0:	e001      	b.n	8012ed6 <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8012ed2:	7ffb      	ldrb	r3, [r7, #31]
 8012ed4:	77bb      	strb	r3, [r7, #30]
    }
  }

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8012ed6:	687b      	ldr	r3, [r7, #4]
 8012ed8:	681b      	ldr	r3, [r3, #0]
 8012eda:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8012ede:	2b00      	cmp	r3, #0
 8012ee0:	d047      	beq.n	8012f72 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch (PeriphClkInit->Sai2ClockSelection)
 8012ee2:	687b      	ldr	r3, [r7, #4]
 8012ee4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012ee6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8012eea:	d030      	beq.n	8012f4e <HAL_RCCEx_PeriphCLKConfig+0x116>
 8012eec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8012ef0:	d82a      	bhi.n	8012f48 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8012ef2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8012ef6:	d02a      	beq.n	8012f4e <HAL_RCCEx_PeriphCLKConfig+0x116>
 8012ef8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8012efc:	d824      	bhi.n	8012f48 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8012efe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8012f02:	d008      	beq.n	8012f16 <HAL_RCCEx_PeriphCLKConfig+0xde>
 8012f04:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8012f08:	d81e      	bhi.n	8012f48 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8012f0a:	2b00      	cmp	r3, #0
 8012f0c:	d00a      	beq.n	8012f24 <HAL_RCCEx_PeriphCLKConfig+0xec>
 8012f0e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8012f12:	d010      	beq.n	8012f36 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8012f14:	e018      	b.n	8012f48 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
      case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8012f16:	4b68      	ldr	r3, [pc, #416]	; (80130b8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8012f18:	68db      	ldr	r3, [r3, #12]
 8012f1a:	4a67      	ldr	r2, [pc, #412]	; (80130b8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8012f1c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8012f20:	60d3      	str	r3, [r2, #12]
        /* SAI2 clock source config set later after clock selection check */
        break;
 8012f22:	e015      	b.n	8012f50 <HAL_RCCEx_PeriphCLKConfig+0x118>

      case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
        /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8012f24:	687b      	ldr	r3, [r7, #4]
 8012f26:	3304      	adds	r3, #4
 8012f28:	2100      	movs	r1, #0
 8012f2a:	4618      	mov	r0, r3
 8012f2c:	f000 fb08 	bl	8013540 <RCCEx_PLLSAI1_Config>
 8012f30:	4603      	mov	r3, r0
 8012f32:	77fb      	strb	r3, [r7, #31]
        /* SAI2 clock source config set later after clock selection check */
        break;
 8012f34:	e00c      	b.n	8012f50 <HAL_RCCEx_PeriphCLKConfig+0x118>

      case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
        /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
        ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8012f36:	687b      	ldr	r3, [r7, #4]
 8012f38:	3320      	adds	r3, #32
 8012f3a:	2100      	movs	r1, #0
 8012f3c:	4618      	mov	r0, r3
 8012f3e:	f000 fbe5 	bl	801370c <RCCEx_PLLSAI2_Config>
 8012f42:	4603      	mov	r3, r0
 8012f44:	77fb      	strb	r3, [r7, #31]
        /* SAI2 clock source config set later after clock selection check */
        break;
 8012f46:	e003      	b.n	8012f50 <HAL_RCCEx_PeriphCLKConfig+0x118>
      case RCC_SAI2CLKSOURCE_HSI:      /* HSI is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8012f48:	2301      	movs	r3, #1
 8012f4a:	77fb      	strb	r3, [r7, #31]
        break;
 8012f4c:	e000      	b.n	8012f50 <HAL_RCCEx_PeriphCLKConfig+0x118>
        break;
 8012f4e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8012f50:	7ffb      	ldrb	r3, [r7, #31]
 8012f52:	2b00      	cmp	r3, #0
 8012f54:	d10b      	bne.n	8012f6e <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8012f56:	4b58      	ldr	r3, [pc, #352]	; (80130b8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8012f58:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8012f5c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8012f60:	687b      	ldr	r3, [r7, #4]
 8012f62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012f64:	4954      	ldr	r1, [pc, #336]	; (80130b8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8012f66:	4313      	orrs	r3, r2
 8012f68:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8012f6c:	e001      	b.n	8012f72 <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8012f6e:	7ffb      	ldrb	r3, [r7, #31]
 8012f70:	77bb      	strb	r3, [r7, #30]
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8012f72:	687b      	ldr	r3, [r7, #4]
 8012f74:	681b      	ldr	r3, [r3, #0]
 8012f76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8012f7a:	2b00      	cmp	r3, #0
 8012f7c:	f000 80ab 	beq.w	80130d6 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8012f80:	2300      	movs	r3, #0
 8012f82:	75fb      	strb	r3, [r7, #23]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8012f84:	4b4c      	ldr	r3, [pc, #304]	; (80130b8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8012f86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8012f88:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8012f8c:	2b00      	cmp	r3, #0
 8012f8e:	d10d      	bne.n	8012fac <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8012f90:	4b49      	ldr	r3, [pc, #292]	; (80130b8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8012f92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8012f94:	4a48      	ldr	r2, [pc, #288]	; (80130b8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8012f96:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8012f9a:	6593      	str	r3, [r2, #88]	; 0x58
 8012f9c:	4b46      	ldr	r3, [pc, #280]	; (80130b8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8012f9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8012fa0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8012fa4:	60fb      	str	r3, [r7, #12]
 8012fa6:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8012fa8:	2301      	movs	r3, #1
 8012faa:	75fb      	strb	r3, [r7, #23]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8012fac:	4b43      	ldr	r3, [pc, #268]	; (80130bc <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8012fae:	681b      	ldr	r3, [r3, #0]
 8012fb0:	4a42      	ldr	r2, [pc, #264]	; (80130bc <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8012fb2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8012fb6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8012fb8:	f7fb fd3e 	bl	800ea38 <HAL_GetTick>
 8012fbc:	6138      	str	r0, [r7, #16]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8012fbe:	e00f      	b.n	8012fe0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8012fc0:	f7fb fd3a 	bl	800ea38 <HAL_GetTick>
 8012fc4:	4602      	mov	r2, r0
 8012fc6:	693b      	ldr	r3, [r7, #16]
 8012fc8:	1ad3      	subs	r3, r2, r3
 8012fca:	2b02      	cmp	r3, #2
 8012fcc:	d908      	bls.n	8012fe0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8012fce:	4b3b      	ldr	r3, [pc, #236]	; (80130bc <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8012fd0:	681b      	ldr	r3, [r3, #0]
 8012fd2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8012fd6:	2b00      	cmp	r3, #0
 8012fd8:	d109      	bne.n	8012fee <HAL_RCCEx_PeriphCLKConfig+0x1b6>
        {
          ret = HAL_TIMEOUT;
 8012fda:	2303      	movs	r3, #3
 8012fdc:	77fb      	strb	r3, [r7, #31]
        }
        break;
 8012fde:	e006      	b.n	8012fee <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8012fe0:	4b36      	ldr	r3, [pc, #216]	; (80130bc <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8012fe2:	681b      	ldr	r3, [r3, #0]
 8012fe4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8012fe8:	2b00      	cmp	r3, #0
 8012fea:	d0e9      	beq.n	8012fc0 <HAL_RCCEx_PeriphCLKConfig+0x188>
 8012fec:	e000      	b.n	8012ff0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
        break;
 8012fee:	bf00      	nop
      }
    }

    if (ret == HAL_OK)
 8012ff0:	7ffb      	ldrb	r3, [r7, #31]
 8012ff2:	2b00      	cmp	r3, #0
 8012ff4:	d164      	bne.n	80130c0 <HAL_RCCEx_PeriphCLKConfig+0x288>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8012ff6:	4b30      	ldr	r3, [pc, #192]	; (80130b8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8012ff8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8012ffc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8013000:	61bb      	str	r3, [r7, #24]

      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8013002:	69bb      	ldr	r3, [r7, #24]
 8013004:	2b00      	cmp	r3, #0
 8013006:	d01f      	beq.n	8013048 <HAL_RCCEx_PeriphCLKConfig+0x210>
 8013008:	687b      	ldr	r3, [r7, #4]
 801300a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801300e:	69ba      	ldr	r2, [r7, #24]
 8013010:	429a      	cmp	r2, r3
 8013012:	d019      	beq.n	8013048 <HAL_RCCEx_PeriphCLKConfig+0x210>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8013014:	4b28      	ldr	r3, [pc, #160]	; (80130b8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8013016:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801301a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801301e:	61bb      	str	r3, [r7, #24]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8013020:	4b25      	ldr	r3, [pc, #148]	; (80130b8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8013022:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8013026:	4a24      	ldr	r2, [pc, #144]	; (80130b8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8013028:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 801302c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8013030:	4b21      	ldr	r3, [pc, #132]	; (80130b8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8013032:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8013036:	4a20      	ldr	r2, [pc, #128]	; (80130b8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8013038:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 801303c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8013040:	4a1d      	ldr	r2, [pc, #116]	; (80130b8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8013042:	69bb      	ldr	r3, [r7, #24]
 8013044:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8013048:	69bb      	ldr	r3, [r7, #24]
 801304a:	f003 0301 	and.w	r3, r3, #1
 801304e:	2b00      	cmp	r3, #0
 8013050:	d01f      	beq.n	8013092 <HAL_RCCEx_PeriphCLKConfig+0x25a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8013052:	f7fb fcf1 	bl	800ea38 <HAL_GetTick>
 8013056:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8013058:	e012      	b.n	8013080 <HAL_RCCEx_PeriphCLKConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 801305a:	f7fb fced 	bl	800ea38 <HAL_GetTick>
 801305e:	4602      	mov	r2, r0
 8013060:	693b      	ldr	r3, [r7, #16]
 8013062:	1ad3      	subs	r3, r2, r3
 8013064:	f241 3288 	movw	r2, #5000	; 0x1388
 8013068:	4293      	cmp	r3, r2
 801306a:	d909      	bls.n	8013080 <HAL_RCCEx_PeriphCLKConfig+0x248>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 801306c:	4b12      	ldr	r3, [pc, #72]	; (80130b8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 801306e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8013072:	f003 0302 	and.w	r3, r3, #2
 8013076:	2b00      	cmp	r3, #0
 8013078:	d10a      	bne.n	8013090 <HAL_RCCEx_PeriphCLKConfig+0x258>
            {
              ret = HAL_TIMEOUT;
 801307a:	2303      	movs	r3, #3
 801307c:	77fb      	strb	r3, [r7, #31]
            }
            break;
 801307e:	e007      	b.n	8013090 <HAL_RCCEx_PeriphCLKConfig+0x258>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8013080:	4b0d      	ldr	r3, [pc, #52]	; (80130b8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8013082:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8013086:	f003 0302 	and.w	r3, r3, #2
 801308a:	2b00      	cmp	r3, #0
 801308c:	d0e5      	beq.n	801305a <HAL_RCCEx_PeriphCLKConfig+0x222>
 801308e:	e000      	b.n	8013092 <HAL_RCCEx_PeriphCLKConfig+0x25a>
            break;
 8013090:	bf00      	nop
          }
        }
      }

      if (ret == HAL_OK)
 8013092:	7ffb      	ldrb	r3, [r7, #31]
 8013094:	2b00      	cmp	r3, #0
 8013096:	d10c      	bne.n	80130b2 <HAL_RCCEx_PeriphCLKConfig+0x27a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8013098:	4b07      	ldr	r3, [pc, #28]	; (80130b8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 801309a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801309e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80130a2:	687b      	ldr	r3, [r7, #4]
 80130a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80130a8:	4903      	ldr	r1, [pc, #12]	; (80130b8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80130aa:	4313      	orrs	r3, r2
 80130ac:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80130b0:	e008      	b.n	80130c4 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80130b2:	7ffb      	ldrb	r3, [r7, #31]
 80130b4:	77bb      	strb	r3, [r7, #30]
 80130b6:	e005      	b.n	80130c4 <HAL_RCCEx_PeriphCLKConfig+0x28c>
 80130b8:	40021000 	.word	0x40021000
 80130bc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80130c0:	7ffb      	ldrb	r3, [r7, #31]
 80130c2:	77bb      	strb	r3, [r7, #30]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80130c4:	7dfb      	ldrb	r3, [r7, #23]
 80130c6:	2b01      	cmp	r3, #1
 80130c8:	d105      	bne.n	80130d6 <HAL_RCCEx_PeriphCLKConfig+0x29e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80130ca:	4b9c      	ldr	r3, [pc, #624]	; (801333c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80130cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80130ce:	4a9b      	ldr	r2, [pc, #620]	; (801333c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80130d0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80130d4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80130d6:	687b      	ldr	r3, [r7, #4]
 80130d8:	681b      	ldr	r3, [r3, #0]
 80130da:	f003 0301 	and.w	r3, r3, #1
 80130de:	2b00      	cmp	r3, #0
 80130e0:	d00a      	beq.n	80130f8 <HAL_RCCEx_PeriphCLKConfig+0x2c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80130e2:	4b96      	ldr	r3, [pc, #600]	; (801333c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80130e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80130e8:	f023 0203 	bic.w	r2, r3, #3
 80130ec:	687b      	ldr	r3, [r7, #4]
 80130ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80130f0:	4992      	ldr	r1, [pc, #584]	; (801333c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80130f2:	4313      	orrs	r3, r2
 80130f4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80130f8:	687b      	ldr	r3, [r7, #4]
 80130fa:	681b      	ldr	r3, [r3, #0]
 80130fc:	f003 0302 	and.w	r3, r3, #2
 8013100:	2b00      	cmp	r3, #0
 8013102:	d00a      	beq.n	801311a <HAL_RCCEx_PeriphCLKConfig+0x2e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8013104:	4b8d      	ldr	r3, [pc, #564]	; (801333c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8013106:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801310a:	f023 020c 	bic.w	r2, r3, #12
 801310e:	687b      	ldr	r3, [r7, #4]
 8013110:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013112:	498a      	ldr	r1, [pc, #552]	; (801333c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8013114:	4313      	orrs	r3, r2
 8013116:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 801311a:	687b      	ldr	r3, [r7, #4]
 801311c:	681b      	ldr	r3, [r3, #0]
 801311e:	f003 0304 	and.w	r3, r3, #4
 8013122:	2b00      	cmp	r3, #0
 8013124:	d00a      	beq.n	801313c <HAL_RCCEx_PeriphCLKConfig+0x304>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8013126:	4b85      	ldr	r3, [pc, #532]	; (801333c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8013128:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801312c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8013130:	687b      	ldr	r3, [r7, #4]
 8013132:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013134:	4981      	ldr	r1, [pc, #516]	; (801333c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8013136:	4313      	orrs	r3, r2
 8013138:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 801313c:	687b      	ldr	r3, [r7, #4]
 801313e:	681b      	ldr	r3, [r3, #0]
 8013140:	f003 0308 	and.w	r3, r3, #8
 8013144:	2b00      	cmp	r3, #0
 8013146:	d00a      	beq.n	801315e <HAL_RCCEx_PeriphCLKConfig+0x326>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8013148:	4b7c      	ldr	r3, [pc, #496]	; (801333c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 801314a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801314e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8013152:	687b      	ldr	r3, [r7, #4]
 8013154:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013156:	4979      	ldr	r1, [pc, #484]	; (801333c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8013158:	4313      	orrs	r3, r2
 801315a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 801315e:	687b      	ldr	r3, [r7, #4]
 8013160:	681b      	ldr	r3, [r3, #0]
 8013162:	f003 0310 	and.w	r3, r3, #16
 8013166:	2b00      	cmp	r3, #0
 8013168:	d00a      	beq.n	8013180 <HAL_RCCEx_PeriphCLKConfig+0x348>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 801316a:	4b74      	ldr	r3, [pc, #464]	; (801333c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 801316c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8013170:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8013174:	687b      	ldr	r3, [r7, #4]
 8013176:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013178:	4970      	ldr	r1, [pc, #448]	; (801333c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 801317a:	4313      	orrs	r3, r2
 801317c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8013180:	687b      	ldr	r3, [r7, #4]
 8013182:	681b      	ldr	r3, [r3, #0]
 8013184:	f003 0320 	and.w	r3, r3, #32
 8013188:	2b00      	cmp	r3, #0
 801318a:	d00a      	beq.n	80131a2 <HAL_RCCEx_PeriphCLKConfig+0x36a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 801318c:	4b6b      	ldr	r3, [pc, #428]	; (801333c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 801318e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8013192:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8013196:	687b      	ldr	r3, [r7, #4]
 8013198:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801319a:	4968      	ldr	r1, [pc, #416]	; (801333c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 801319c:	4313      	orrs	r3, r2
 801319e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80131a2:	687b      	ldr	r3, [r7, #4]
 80131a4:	681b      	ldr	r3, [r3, #0]
 80131a6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80131aa:	2b00      	cmp	r3, #0
 80131ac:	d00a      	beq.n	80131c4 <HAL_RCCEx_PeriphCLKConfig+0x38c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80131ae:	4b63      	ldr	r3, [pc, #396]	; (801333c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80131b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80131b4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80131b8:	687b      	ldr	r3, [r7, #4]
 80131ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80131bc:	495f      	ldr	r1, [pc, #380]	; (801333c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80131be:	4313      	orrs	r3, r2
 80131c0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80131c4:	687b      	ldr	r3, [r7, #4]
 80131c6:	681b      	ldr	r3, [r3, #0]
 80131c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80131cc:	2b00      	cmp	r3, #0
 80131ce:	d00a      	beq.n	80131e6 <HAL_RCCEx_PeriphCLKConfig+0x3ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80131d0:	4b5a      	ldr	r3, [pc, #360]	; (801333c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80131d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80131d6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80131da:	687b      	ldr	r3, [r7, #4]
 80131dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80131de:	4957      	ldr	r1, [pc, #348]	; (801333c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80131e0:	4313      	orrs	r3, r2
 80131e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 80131e6:	687b      	ldr	r3, [r7, #4]
 80131e8:	681b      	ldr	r3, [r3, #0]
 80131ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80131ee:	2b00      	cmp	r3, #0
 80131f0:	d00a      	beq.n	8013208 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLK(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 80131f2:	4b52      	ldr	r3, [pc, #328]	; (801333c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80131f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80131f8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80131fc:	687b      	ldr	r3, [r7, #4]
 80131fe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8013200:	494e      	ldr	r1, [pc, #312]	; (801333c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8013202:	4313      	orrs	r3, r2
 8013204:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- FDCAN kernel clock source configuration -------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == (RCC_PERIPHCLK_FDCAN))
 8013208:	687b      	ldr	r3, [r7, #4]
 801320a:	681b      	ldr	r3, [r3, #0]
 801320c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8013210:	2b00      	cmp	r3, #0
 8013212:	d031      	beq.n	8013278 <HAL_RCCEx_PeriphCLKConfig+0x440>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLK(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN kernel clock source */
    switch (PeriphClkInit->FdcanClockSelection)
 8013214:	687b      	ldr	r3, [r7, #4]
 8013216:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8013218:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 801321c:	d00e      	beq.n	801323c <HAL_RCCEx_PeriphCLKConfig+0x404>
 801321e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8013222:	d814      	bhi.n	801324e <HAL_RCCEx_PeriphCLKConfig+0x416>
 8013224:	2b00      	cmp	r3, #0
 8013226:	d015      	beq.n	8013254 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8013228:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 801322c:	d10f      	bne.n	801324e <HAL_RCCEx_PeriphCLKConfig+0x416>
        /* FDCAN kernel clock source config set later after clock selection check */
        break;

      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN kernel clock*/
        /* Enable PLL48M1CLK output clock generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 801322e:	4b43      	ldr	r3, [pc, #268]	; (801333c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8013230:	68db      	ldr	r3, [r3, #12]
 8013232:	4a42      	ldr	r2, [pc, #264]	; (801333c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8013234:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8013238:	60d3      	str	r3, [r2, #12]
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 801323a:	e00c      	b.n	8013256 <HAL_RCCEx_PeriphCLKConfig+0x41e>

      case RCC_FDCANCLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for FDCAN kernel clock*/
        /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 801323c:	687b      	ldr	r3, [r7, #4]
 801323e:	3304      	adds	r3, #4
 8013240:	2100      	movs	r1, #0
 8013242:	4618      	mov	r0, r3
 8013244:	f000 f97c 	bl	8013540 <RCCEx_PLLSAI1_Config>
 8013248:	4603      	mov	r3, r0
 801324a:	77fb      	strb	r3, [r7, #31]
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 801324c:	e003      	b.n	8013256 <HAL_RCCEx_PeriphCLKConfig+0x41e>

      default:
        ret = HAL_ERROR;
 801324e:	2301      	movs	r3, #1
 8013250:	77fb      	strb	r3, [r7, #31]
        break;
 8013252:	e000      	b.n	8013256 <HAL_RCCEx_PeriphCLKConfig+0x41e>
        break;
 8013254:	bf00      	nop
    }

    if (ret == HAL_OK)
 8013256:	7ffb      	ldrb	r3, [r7, #31]
 8013258:	2b00      	cmp	r3, #0
 801325a:	d10b      	bne.n	8013274 <HAL_RCCEx_PeriphCLKConfig+0x43c>
    {
      /* Set the source of FDCAN kernel clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 801325c:	4b37      	ldr	r3, [pc, #220]	; (801333c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 801325e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8013262:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8013266:	687b      	ldr	r3, [r7, #4]
 8013268:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801326a:	4934      	ldr	r1, [pc, #208]	; (801333c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 801326c:	4313      	orrs	r3, r2
 801326e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8013272:	e001      	b.n	8013278 <HAL_RCCEx_PeriphCLKConfig+0x440>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8013274:	7ffb      	ldrb	r3, [r7, #31]
 8013276:	77bb      	strb	r3, [r7, #30]
    }
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8013278:	687b      	ldr	r3, [r7, #4]
 801327a:	681b      	ldr	r3, [r3, #0]
 801327c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8013280:	2b00      	cmp	r3, #0
 8013282:	d00a      	beq.n	801329a <HAL_RCCEx_PeriphCLKConfig+0x462>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8013284:	4b2d      	ldr	r3, [pc, #180]	; (801333c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8013286:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801328a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 801328e:	687b      	ldr	r3, [r7, #4]
 8013290:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8013292:	492a      	ldr	r1, [pc, #168]	; (801333c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8013294:	4313      	orrs	r3, r2
 8013296:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 801329a:	687b      	ldr	r3, [r7, #4]
 801329c:	681b      	ldr	r3, [r3, #0]
 801329e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80132a2:	2b00      	cmp	r3, #0
 80132a4:	d00a      	beq.n	80132bc <HAL_RCCEx_PeriphCLKConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80132a6:	4b25      	ldr	r3, [pc, #148]	; (801333c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80132a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80132ac:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80132b0:	687b      	ldr	r3, [r7, #4]
 80132b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80132b4:	4921      	ldr	r1, [pc, #132]	; (801333c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80132b6:	4313      	orrs	r3, r2
 80132b8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80132bc:	687b      	ldr	r3, [r7, #4]
 80132be:	681b      	ldr	r3, [r3, #0]
 80132c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80132c4:	2b00      	cmp	r3, #0
 80132c6:	d00a      	beq.n	80132de <HAL_RCCEx_PeriphCLKConfig+0x4a6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80132c8:	4b1c      	ldr	r3, [pc, #112]	; (801333c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80132ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80132ce:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80132d2:	687b      	ldr	r3, [r7, #4]
 80132d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80132d6:	4919      	ldr	r1, [pc, #100]	; (801333c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80132d8:	4313      	orrs	r3, r2
 80132da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80132de:	687b      	ldr	r3, [r7, #4]
 80132e0:	681b      	ldr	r3, [r3, #0]
 80132e2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80132e6:	2b00      	cmp	r3, #0
 80132e8:	d00a      	beq.n	8013300 <HAL_RCCEx_PeriphCLKConfig+0x4c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80132ea:	4b14      	ldr	r3, [pc, #80]	; (801333c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80132ec:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80132f0:	f023 0203 	bic.w	r2, r3, #3
 80132f4:	687b      	ldr	r3, [r7, #4]
 80132f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80132f8:	4910      	ldr	r1, [pc, #64]	; (801333c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80132fa:	4313      	orrs	r3, r2
 80132fc:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8013300:	687b      	ldr	r3, [r7, #4]
 8013302:	681b      	ldr	r3, [r3, #0]
 8013304:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8013308:	2b00      	cmp	r3, #0
 801330a:	d02b      	beq.n	8013364 <HAL_RCCEx_PeriphCLKConfig+0x52c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 801330c:	4b0b      	ldr	r3, [pc, #44]	; (801333c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 801330e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8013312:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8013316:	687b      	ldr	r3, [r7, #4]
 8013318:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801331a:	4908      	ldr	r1, [pc, #32]	; (801333c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 801331c:	4313      	orrs	r3, r2
 801331e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8013322:	687b      	ldr	r3, [r7, #4]
 8013324:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8013326:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 801332a:	d109      	bne.n	8013340 <HAL_RCCEx_PeriphCLKConfig+0x508>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 801332c:	4b03      	ldr	r3, [pc, #12]	; (801333c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 801332e:	68db      	ldr	r3, [r3, #12]
 8013330:	4a02      	ldr	r2, [pc, #8]	; (801333c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8013332:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8013336:	60d3      	str	r3, [r2, #12]
 8013338:	e014      	b.n	8013364 <HAL_RCCEx_PeriphCLKConfig+0x52c>
 801333a:	bf00      	nop
 801333c:	40021000 	.word	0x40021000
    }
    else
    {
      if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8013340:	687b      	ldr	r3, [r7, #4]
 8013342:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8013344:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8013348:	d10c      	bne.n	8013364 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 801334a:	687b      	ldr	r3, [r7, #4]
 801334c:	3304      	adds	r3, #4
 801334e:	2101      	movs	r1, #1
 8013350:	4618      	mov	r0, r3
 8013352:	f000 f8f5 	bl	8013540 <RCCEx_PLLSAI1_Config>
 8013356:	4603      	mov	r3, r0
 8013358:	77fb      	strb	r3, [r7, #31]

        if (ret != HAL_OK)
 801335a:	7ffb      	ldrb	r3, [r7, #31]
 801335c:	2b00      	cmp	r3, #0
 801335e:	d001      	beq.n	8013364 <HAL_RCCEx_PeriphCLKConfig+0x52c>
        {
          /* set overall return value */
          status = ret;
 8013360:	7ffb      	ldrb	r3, [r7, #31]
 8013362:	77bb      	strb	r3, [r7, #30]
  }

#endif /* USB */

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8013364:	687b      	ldr	r3, [r7, #4]
 8013366:	681b      	ldr	r3, [r3, #0]
 8013368:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 801336c:	2b00      	cmp	r3, #0
 801336e:	d04a      	beq.n	8013406 <HAL_RCCEx_PeriphCLKConfig+0x5ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8013370:	687b      	ldr	r3, [r7, #4]
 8013372:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8013374:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8013378:	d108      	bne.n	801338c <HAL_RCCEx_PeriphCLKConfig+0x554>
 801337a:	4b70      	ldr	r3, [pc, #448]	; (801353c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 801337c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8013380:	4a6e      	ldr	r2, [pc, #440]	; (801353c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8013382:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8013386:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 801338a:	e012      	b.n	80133b2 <HAL_RCCEx_PeriphCLKConfig+0x57a>
 801338c:	4b6b      	ldr	r3, [pc, #428]	; (801353c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 801338e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8013392:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8013396:	687b      	ldr	r3, [r7, #4]
 8013398:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801339a:	4968      	ldr	r1, [pc, #416]	; (801353c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 801339c:	4313      	orrs	r3, r2
 801339e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80133a2:	4b66      	ldr	r3, [pc, #408]	; (801353c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80133a4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80133a8:	4a64      	ldr	r2, [pc, #400]	; (801353c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80133aa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80133ae:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c

    if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80133b2:	687b      	ldr	r3, [r7, #4]
 80133b4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80133b6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80133ba:	d10d      	bne.n	80133d8 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80133bc:	687b      	ldr	r3, [r7, #4]
 80133be:	3304      	adds	r3, #4
 80133c0:	2101      	movs	r1, #1
 80133c2:	4618      	mov	r0, r3
 80133c4:	f000 f8bc 	bl	8013540 <RCCEx_PLLSAI1_Config>
 80133c8:	4603      	mov	r3, r0
 80133ca:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 80133cc:	7ffb      	ldrb	r3, [r7, #31]
 80133ce:	2b00      	cmp	r3, #0
 80133d0:	d019      	beq.n	8013406 <HAL_RCCEx_PeriphCLKConfig+0x5ce>
      {
        /* set overall return value */
        status = ret;
 80133d2:	7ffb      	ldrb	r3, [r7, #31]
 80133d4:	77bb      	strb	r3, [r7, #30]
 80133d6:	e016      	b.n	8013406 <HAL_RCCEx_PeriphCLKConfig+0x5ce>
      }
    }
    else if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)
 80133d8:	687b      	ldr	r3, [r7, #4]
 80133da:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80133dc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80133e0:	d106      	bne.n	80133f0 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80133e2:	4b56      	ldr	r3, [pc, #344]	; (801353c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80133e4:	68db      	ldr	r3, [r3, #12]
 80133e6:	4a55      	ldr	r2, [pc, #340]	; (801353c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80133e8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80133ec:	60d3      	str	r3, [r2, #12]
 80133ee:	e00a      	b.n	8013406 <HAL_RCCEx_PeriphCLKConfig+0x5ce>
    }
    else if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP)
 80133f0:	687b      	ldr	r3, [r7, #4]
 80133f2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80133f4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80133f8:	d105      	bne.n	8013406 <HAL_RCCEx_PeriphCLKConfig+0x5ce>
    {
      /* Enable PLLSAI3CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80133fa:	4b50      	ldr	r3, [pc, #320]	; (801353c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80133fc:	68db      	ldr	r3, [r3, #12]
 80133fe:	4a4f      	ldr	r2, [pc, #316]	; (801353c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8013400:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8013404:	60d3      	str	r3, [r2, #12]
      /* Nothing to do */
    }
  }

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8013406:	687b      	ldr	r3, [r7, #4]
 8013408:	681b      	ldr	r3, [r3, #0]
 801340a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 801340e:	2b00      	cmp	r3, #0
 8013410:	d028      	beq.n	8013464 <HAL_RCCEx_PeriphCLKConfig+0x62c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8013412:	4b4a      	ldr	r3, [pc, #296]	; (801353c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8013414:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8013418:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 801341c:	687b      	ldr	r3, [r7, #4]
 801341e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8013420:	4946      	ldr	r1, [pc, #280]	; (801353c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8013422:	4313      	orrs	r3, r2
 8013424:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8013428:	687b      	ldr	r3, [r7, #4]
 801342a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801342c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8013430:	d106      	bne.n	8013440 <HAL_RCCEx_PeriphCLKConfig+0x608>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8013432:	4b42      	ldr	r3, [pc, #264]	; (801353c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8013434:	68db      	ldr	r3, [r3, #12]
 8013436:	4a41      	ldr	r2, [pc, #260]	; (801353c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8013438:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801343c:	60d3      	str	r3, [r2, #12]
 801343e:	e011      	b.n	8013464 <HAL_RCCEx_PeriphCLKConfig+0x62c>
    }
    else if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8013440:	687b      	ldr	r3, [r7, #4]
 8013442:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8013444:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8013448:	d10c      	bne.n	8013464 <HAL_RCCEx_PeriphCLKConfig+0x62c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 801344a:	687b      	ldr	r3, [r7, #4]
 801344c:	3304      	adds	r3, #4
 801344e:	2101      	movs	r1, #1
 8013450:	4618      	mov	r0, r3
 8013452:	f000 f875 	bl	8013540 <RCCEx_PLLSAI1_Config>
 8013456:	4603      	mov	r3, r0
 8013458:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 801345a:	7ffb      	ldrb	r3, [r7, #31]
 801345c:	2b00      	cmp	r3, #0
 801345e:	d001      	beq.n	8013464 <HAL_RCCEx_PeriphCLKConfig+0x62c>
      {
        /* set overall return value */
        status = ret;
 8013460:	7ffb      	ldrb	r3, [r7, #31]
 8013462:	77bb      	strb	r3, [r7, #30]
      /* Nothing to do */
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8013464:	687b      	ldr	r3, [r7, #4]
 8013466:	681b      	ldr	r3, [r3, #0]
 8013468:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 801346c:	2b00      	cmp	r3, #0
 801346e:	d01e      	beq.n	80134ae <HAL_RCCEx_PeriphCLKConfig+0x676>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8013470:	4b32      	ldr	r3, [pc, #200]	; (801353c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8013472:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8013476:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 801347a:	687b      	ldr	r3, [r7, #4]
 801347c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8013480:	492e      	ldr	r1, [pc, #184]	; (801353c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8013482:	4313      	orrs	r3, r2
 8013484:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8013488:	687b      	ldr	r3, [r7, #4]
 801348a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801348e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8013492:	d10c      	bne.n	80134ae <HAL_RCCEx_PeriphCLKConfig+0x676>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8013494:	687b      	ldr	r3, [r7, #4]
 8013496:	3304      	adds	r3, #4
 8013498:	2102      	movs	r1, #2
 801349a:	4618      	mov	r0, r3
 801349c:	f000 f850 	bl	8013540 <RCCEx_PLLSAI1_Config>
 80134a0:	4603      	mov	r3, r0
 80134a2:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 80134a4:	7ffb      	ldrb	r3, [r7, #31]
 80134a6:	2b00      	cmp	r3, #0
 80134a8:	d001      	beq.n	80134ae <HAL_RCCEx_PeriphCLKConfig+0x676>
      {
        /* set overall return value */
        status = ret;
 80134aa:	7ffb      	ldrb	r3, [r7, #31]
 80134ac:	77bb      	strb	r3, [r7, #30]
      }
    }
  }

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80134ae:	687b      	ldr	r3, [r7, #4]
 80134b0:	681b      	ldr	r3, [r3, #0]
 80134b2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80134b6:	2b00      	cmp	r3, #0
 80134b8:	d00b      	beq.n	80134d2 <HAL_RCCEx_PeriphCLKConfig+0x69a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80134ba:	4b20      	ldr	r3, [pc, #128]	; (801353c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80134bc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80134c0:	f023 0204 	bic.w	r2, r3, #4
 80134c4:	687b      	ldr	r3, [r7, #4]
 80134c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80134ca:	491c      	ldr	r1, [pc, #112]	; (801353c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80134cc:	4313      	orrs	r3, r2
 80134ce:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 80134d2:	687b      	ldr	r3, [r7, #4]
 80134d4:	681b      	ldr	r3, [r3, #0]
 80134d6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80134da:	2b00      	cmp	r3, #0
 80134dc:	d00b      	beq.n	80134f6 <HAL_RCCEx_PeriphCLKConfig+0x6be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80134de:	4b17      	ldr	r3, [pc, #92]	; (801353c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80134e0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80134e4:	f023 0218 	bic.w	r2, r3, #24
 80134e8:	687b      	ldr	r3, [r7, #4]
 80134ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80134ee:	4913      	ldr	r1, [pc, #76]	; (801353c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80134f0:	4313      	orrs	r3, r2
 80134f2:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80134f6:	687b      	ldr	r3, [r7, #4]
 80134f8:	681b      	ldr	r3, [r3, #0]
 80134fa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80134fe:	2b00      	cmp	r3, #0
 8013500:	d017      	beq.n	8013532 <HAL_RCCEx_PeriphCLKConfig+0x6fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8013502:	4b0e      	ldr	r3, [pc, #56]	; (801353c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8013504:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8013508:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 801350c:	687b      	ldr	r3, [r7, #4]
 801350e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8013512:	490a      	ldr	r1, [pc, #40]	; (801353c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8013514:	4313      	orrs	r3, r2
 8013516:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if (PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 801351a:	687b      	ldr	r3, [r7, #4]
 801351c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8013520:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8013524:	d105      	bne.n	8013532 <HAL_RCCEx_PeriphCLKConfig+0x6fa>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8013526:	4b05      	ldr	r3, [pc, #20]	; (801353c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8013528:	68db      	ldr	r3, [r3, #12]
 801352a:	4a04      	ldr	r2, [pc, #16]	; (801353c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 801352c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8013530:	60d3      	str	r3, [r2, #12]
    }
  }

  return status;
 8013532:	7fbb      	ldrb	r3, [r7, #30]
}
 8013534:	4618      	mov	r0, r3
 8013536:	3720      	adds	r7, #32
 8013538:	46bd      	mov	sp, r7
 801353a:	bd80      	pop	{r7, pc}
 801353c:	40021000 	.word	0x40021000

08013540 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *pPllSai1, uint32_t Divider)
{
 8013540:	b580      	push	{r7, lr}
 8013542:	b084      	sub	sp, #16
 8013544:	af00      	add	r7, sp, #0
 8013546:	6078      	str	r0, [r7, #4]
 8013548:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 801354a:	2300      	movs	r3, #0
 801354c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(pPllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(pPllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(pPllSai1->PLLSAI1ClockOut));

  /* Check PLLSAI1 clock source availability */
  switch (pPllSai1->PLLSAI1Source)
 801354e:	687b      	ldr	r3, [r7, #4]
 8013550:	681b      	ldr	r3, [r3, #0]
 8013552:	2b03      	cmp	r3, #3
 8013554:	d018      	beq.n	8013588 <RCCEx_PLLSAI1_Config+0x48>
 8013556:	2b03      	cmp	r3, #3
 8013558:	d81f      	bhi.n	801359a <RCCEx_PLLSAI1_Config+0x5a>
 801355a:	2b01      	cmp	r3, #1
 801355c:	d002      	beq.n	8013564 <RCCEx_PLLSAI1_Config+0x24>
 801355e:	2b02      	cmp	r3, #2
 8013560:	d009      	beq.n	8013576 <RCCEx_PLLSAI1_Config+0x36>
 8013562:	e01a      	b.n	801359a <RCCEx_PLLSAI1_Config+0x5a>
  {
    case RCC_PLLSOURCE_MSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8013564:	4b65      	ldr	r3, [pc, #404]	; (80136fc <RCCEx_PLLSAI1_Config+0x1bc>)
 8013566:	681b      	ldr	r3, [r3, #0]
 8013568:	f003 0302 	and.w	r3, r3, #2
 801356c:	2b00      	cmp	r3, #0
 801356e:	d117      	bne.n	80135a0 <RCCEx_PLLSAI1_Config+0x60>
      {
        status = HAL_ERROR;
 8013570:	2301      	movs	r3, #1
 8013572:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8013574:	e014      	b.n	80135a0 <RCCEx_PLLSAI1_Config+0x60>
    case RCC_PLLSOURCE_HSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8013576:	4b61      	ldr	r3, [pc, #388]	; (80136fc <RCCEx_PLLSAI1_Config+0x1bc>)
 8013578:	681b      	ldr	r3, [r3, #0]
 801357a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801357e:	2b00      	cmp	r3, #0
 8013580:	d110      	bne.n	80135a4 <RCCEx_PLLSAI1_Config+0x64>
      {
        status = HAL_ERROR;
 8013582:	2301      	movs	r3, #1
 8013584:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8013586:	e00d      	b.n	80135a4 <RCCEx_PLLSAI1_Config+0x64>
    case RCC_PLLSOURCE_HSE:
      if (HAL_IS_BIT_CLR(RCC->CR, (RCC_CR_HSERDY | RCC_CR_HSEBYP)))
 8013588:	4b5c      	ldr	r3, [pc, #368]	; (80136fc <RCCEx_PLLSAI1_Config+0x1bc>)
 801358a:	681b      	ldr	r3, [r3, #0]
 801358c:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8013590:	2b00      	cmp	r3, #0
 8013592:	d109      	bne.n	80135a8 <RCCEx_PLLSAI1_Config+0x68>
      {
        status = HAL_ERROR;
 8013594:	2301      	movs	r3, #1
 8013596:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8013598:	e006      	b.n	80135a8 <RCCEx_PLLSAI1_Config+0x68>
    default:
      status = HAL_ERROR;
 801359a:	2301      	movs	r3, #1
 801359c:	73fb      	strb	r3, [r7, #15]
      break;
 801359e:	e004      	b.n	80135aa <RCCEx_PLLSAI1_Config+0x6a>
      break;
 80135a0:	bf00      	nop
 80135a2:	e002      	b.n	80135aa <RCCEx_PLLSAI1_Config+0x6a>
      break;
 80135a4:	bf00      	nop
 80135a6:	e000      	b.n	80135aa <RCCEx_PLLSAI1_Config+0x6a>
      break;
 80135a8:	bf00      	nop
  }

  if (status == HAL_OK)
 80135aa:	7bfb      	ldrb	r3, [r7, #15]
 80135ac:	2b00      	cmp	r3, #0
 80135ae:	f040 809f 	bne.w	80136f0 <RCCEx_PLLSAI1_Config+0x1b0>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80135b2:	4b52      	ldr	r3, [pc, #328]	; (80136fc <RCCEx_PLLSAI1_Config+0x1bc>)
 80135b4:	681b      	ldr	r3, [r3, #0]
 80135b6:	4a51      	ldr	r2, [pc, #324]	; (80136fc <RCCEx_PLLSAI1_Config+0x1bc>)
 80135b8:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80135bc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80135be:	f7fb fa3b 	bl	800ea38 <HAL_GetTick>
 80135c2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80135c4:	e00f      	b.n	80135e6 <RCCEx_PLLSAI1_Config+0xa6>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80135c6:	f7fb fa37 	bl	800ea38 <HAL_GetTick>
 80135ca:	4602      	mov	r2, r0
 80135cc:	68bb      	ldr	r3, [r7, #8]
 80135ce:	1ad3      	subs	r3, r2, r3
 80135d0:	2b02      	cmp	r3, #2
 80135d2:	d908      	bls.n	80135e6 <RCCEx_PLLSAI1_Config+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80135d4:	4b49      	ldr	r3, [pc, #292]	; (80136fc <RCCEx_PLLSAI1_Config+0x1bc>)
 80135d6:	681b      	ldr	r3, [r3, #0]
 80135d8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80135dc:	2b00      	cmp	r3, #0
 80135de:	d009      	beq.n	80135f4 <RCCEx_PLLSAI1_Config+0xb4>
        {
          status = HAL_TIMEOUT;
 80135e0:	2303      	movs	r3, #3
 80135e2:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80135e4:	e006      	b.n	80135f4 <RCCEx_PLLSAI1_Config+0xb4>
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80135e6:	4b45      	ldr	r3, [pc, #276]	; (80136fc <RCCEx_PLLSAI1_Config+0x1bc>)
 80135e8:	681b      	ldr	r3, [r3, #0]
 80135ea:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80135ee:	2b00      	cmp	r3, #0
 80135f0:	d1e9      	bne.n	80135c6 <RCCEx_PLLSAI1_Config+0x86>
 80135f2:	e000      	b.n	80135f6 <RCCEx_PLLSAI1_Config+0xb6>
        break;
 80135f4:	bf00      	nop
      }
    }

    if (status == HAL_OK)
 80135f6:	7bfb      	ldrb	r3, [r7, #15]
 80135f8:	2b00      	cmp	r3, #0
 80135fa:	d179      	bne.n	80136f0 <RCCEx_PLLSAI1_Config+0x1b0>
    {
      if (Divider == DIVIDER_P_UPDATE)
 80135fc:	683b      	ldr	r3, [r7, #0]
 80135fe:	2b00      	cmp	r3, #0
 8013600:	d116      	bne.n	8013630 <RCCEx_PLLSAI1_Config+0xf0>
      {
        assert_param(IS_RCC_PLLSAI1P_VALUE(pPllSai1->PLLSAI1P));

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8013602:	4b3e      	ldr	r3, [pc, #248]	; (80136fc <RCCEx_PLLSAI1_Config+0x1bc>)
 8013604:	691a      	ldr	r2, [r3, #16]
 8013606:	4b3e      	ldr	r3, [pc, #248]	; (8013700 <RCCEx_PLLSAI1_Config+0x1c0>)
 8013608:	4013      	ands	r3, r2
 801360a:	687a      	ldr	r2, [r7, #4]
 801360c:	6892      	ldr	r2, [r2, #8]
 801360e:	0211      	lsls	r1, r2, #8
 8013610:	687a      	ldr	r2, [r7, #4]
 8013612:	68d2      	ldr	r2, [r2, #12]
 8013614:	06d2      	lsls	r2, r2, #27
 8013616:	4311      	orrs	r1, r2
 8013618:	687a      	ldr	r2, [r7, #4]
 801361a:	6852      	ldr	r2, [r2, #4]
 801361c:	3a01      	subs	r2, #1
 801361e:	0112      	lsls	r2, r2, #4
 8013620:	4311      	orrs	r1, r2
 8013622:	687a      	ldr	r2, [r7, #4]
 8013624:	6812      	ldr	r2, [r2, #0]
 8013626:	430a      	orrs	r2, r1
 8013628:	4934      	ldr	r1, [pc, #208]	; (80136fc <RCCEx_PLLSAI1_Config+0x1bc>)
 801362a:	4313      	orrs	r3, r2
 801362c:	610b      	str	r3, [r1, #16]
 801362e:	e033      	b.n	8013698 <RCCEx_PLLSAI1_Config+0x158>
                   (pPllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (pPllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos) |
                   ((pPllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos) |
                   pPllSai1->PLLSAI1Source);
      }
      else if (Divider == DIVIDER_Q_UPDATE)
 8013630:	683b      	ldr	r3, [r7, #0]
 8013632:	2b01      	cmp	r3, #1
 8013634:	d118      	bne.n	8013668 <RCCEx_PLLSAI1_Config+0x128>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(pPllSai1->PLLSAI1Q));

        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8013636:	4b31      	ldr	r3, [pc, #196]	; (80136fc <RCCEx_PLLSAI1_Config+0x1bc>)
 8013638:	691a      	ldr	r2, [r3, #16]
 801363a:	4b32      	ldr	r3, [pc, #200]	; (8013704 <RCCEx_PLLSAI1_Config+0x1c4>)
 801363c:	4013      	ands	r3, r2
 801363e:	687a      	ldr	r2, [r7, #4]
 8013640:	6892      	ldr	r2, [r2, #8]
 8013642:	0211      	lsls	r1, r2, #8
 8013644:	687a      	ldr	r2, [r7, #4]
 8013646:	6912      	ldr	r2, [r2, #16]
 8013648:	0852      	lsrs	r2, r2, #1
 801364a:	3a01      	subs	r2, #1
 801364c:	0552      	lsls	r2, r2, #21
 801364e:	4311      	orrs	r1, r2
 8013650:	687a      	ldr	r2, [r7, #4]
 8013652:	6852      	ldr	r2, [r2, #4]
 8013654:	3a01      	subs	r2, #1
 8013656:	0112      	lsls	r2, r2, #4
 8013658:	4311      	orrs	r1, r2
 801365a:	687a      	ldr	r2, [r7, #4]
 801365c:	6812      	ldr	r2, [r2, #0]
 801365e:	430a      	orrs	r2, r1
 8013660:	4926      	ldr	r1, [pc, #152]	; (80136fc <RCCEx_PLLSAI1_Config+0x1bc>)
 8013662:	4313      	orrs	r3, r2
 8013664:	610b      	str	r3, [r1, #16]
 8013666:	e017      	b.n	8013698 <RCCEx_PLLSAI1_Config+0x158>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(pPllSai1->PLLSAI1R));

        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8013668:	4b24      	ldr	r3, [pc, #144]	; (80136fc <RCCEx_PLLSAI1_Config+0x1bc>)
 801366a:	691a      	ldr	r2, [r3, #16]
 801366c:	4b26      	ldr	r3, [pc, #152]	; (8013708 <RCCEx_PLLSAI1_Config+0x1c8>)
 801366e:	4013      	ands	r3, r2
 8013670:	687a      	ldr	r2, [r7, #4]
 8013672:	6892      	ldr	r2, [r2, #8]
 8013674:	0211      	lsls	r1, r2, #8
 8013676:	687a      	ldr	r2, [r7, #4]
 8013678:	6952      	ldr	r2, [r2, #20]
 801367a:	0852      	lsrs	r2, r2, #1
 801367c:	3a01      	subs	r2, #1
 801367e:	0652      	lsls	r2, r2, #25
 8013680:	4311      	orrs	r1, r2
 8013682:	687a      	ldr	r2, [r7, #4]
 8013684:	6852      	ldr	r2, [r2, #4]
 8013686:	3a01      	subs	r2, #1
 8013688:	0112      	lsls	r2, r2, #4
 801368a:	4311      	orrs	r1, r2
 801368c:	687a      	ldr	r2, [r7, #4]
 801368e:	6812      	ldr	r2, [r2, #0]
 8013690:	430a      	orrs	r2, r1
 8013692:	491a      	ldr	r1, [pc, #104]	; (80136fc <RCCEx_PLLSAI1_Config+0x1bc>)
 8013694:	4313      	orrs	r3, r2
 8013696:	610b      	str	r3, [r1, #16]
                   ((pPllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos) |
                   pPllSai1->PLLSAI1Source);
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8013698:	4b18      	ldr	r3, [pc, #96]	; (80136fc <RCCEx_PLLSAI1_Config+0x1bc>)
 801369a:	681b      	ldr	r3, [r3, #0]
 801369c:	4a17      	ldr	r2, [pc, #92]	; (80136fc <RCCEx_PLLSAI1_Config+0x1bc>)
 801369e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80136a2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80136a4:	f7fb f9c8 	bl	800ea38 <HAL_GetTick>
 80136a8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80136aa:	e00f      	b.n	80136cc <RCCEx_PLLSAI1_Config+0x18c>
      {
        if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80136ac:	f7fb f9c4 	bl	800ea38 <HAL_GetTick>
 80136b0:	4602      	mov	r2, r0
 80136b2:	68bb      	ldr	r3, [r7, #8]
 80136b4:	1ad3      	subs	r3, r2, r3
 80136b6:	2b02      	cmp	r3, #2
 80136b8:	d908      	bls.n	80136cc <RCCEx_PLLSAI1_Config+0x18c>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80136ba:	4b10      	ldr	r3, [pc, #64]	; (80136fc <RCCEx_PLLSAI1_Config+0x1bc>)
 80136bc:	681b      	ldr	r3, [r3, #0]
 80136be:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80136c2:	2b00      	cmp	r3, #0
 80136c4:	d109      	bne.n	80136da <RCCEx_PLLSAI1_Config+0x19a>
          {
            status = HAL_TIMEOUT;
 80136c6:	2303      	movs	r3, #3
 80136c8:	73fb      	strb	r3, [r7, #15]
          }
          break;
 80136ca:	e006      	b.n	80136da <RCCEx_PLLSAI1_Config+0x19a>
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80136cc:	4b0b      	ldr	r3, [pc, #44]	; (80136fc <RCCEx_PLLSAI1_Config+0x1bc>)
 80136ce:	681b      	ldr	r3, [r3, #0]
 80136d0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80136d4:	2b00      	cmp	r3, #0
 80136d6:	d0e9      	beq.n	80136ac <RCCEx_PLLSAI1_Config+0x16c>
 80136d8:	e000      	b.n	80136dc <RCCEx_PLLSAI1_Config+0x19c>
          break;
 80136da:	bf00      	nop
        }
      }

      if (status == HAL_OK)
 80136dc:	7bfb      	ldrb	r3, [r7, #15]
 80136de:	2b00      	cmp	r3, #0
 80136e0:	d106      	bne.n	80136f0 <RCCEx_PLLSAI1_Config+0x1b0>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(pPllSai1->PLLSAI1ClockOut);
 80136e2:	4b06      	ldr	r3, [pc, #24]	; (80136fc <RCCEx_PLLSAI1_Config+0x1bc>)
 80136e4:	691a      	ldr	r2, [r3, #16]
 80136e6:	687b      	ldr	r3, [r7, #4]
 80136e8:	699b      	ldr	r3, [r3, #24]
 80136ea:	4904      	ldr	r1, [pc, #16]	; (80136fc <RCCEx_PLLSAI1_Config+0x1bc>)
 80136ec:	4313      	orrs	r3, r2
 80136ee:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80136f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80136f2:	4618      	mov	r0, r3
 80136f4:	3710      	adds	r7, #16
 80136f6:	46bd      	mov	sp, r7
 80136f8:	bd80      	pop	{r7, pc}
 80136fa:	bf00      	nop
 80136fc:	40021000 	.word	0x40021000
 8013700:	07ff800c 	.word	0x07ff800c
 8013704:	ff9f800c 	.word	0xff9f800c
 8013708:	f9ff800c 	.word	0xf9ff800c

0801370c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *pPllSai2, uint32_t Divider)
{
 801370c:	b580      	push	{r7, lr}
 801370e:	b084      	sub	sp, #16
 8013710:	af00      	add	r7, sp, #0
 8013712:	6078      	str	r0, [r7, #4]
 8013714:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8013716:	2300      	movs	r3, #0
 8013718:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(pPllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(pPllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(pPllSai2->PLLSAI2ClockOut));

  /* Check PLLSAI2 clock source availability */
  switch (pPllSai2->PLLSAI2Source)
 801371a:	687b      	ldr	r3, [r7, #4]
 801371c:	681b      	ldr	r3, [r3, #0]
 801371e:	2b03      	cmp	r3, #3
 8013720:	d018      	beq.n	8013754 <RCCEx_PLLSAI2_Config+0x48>
 8013722:	2b03      	cmp	r3, #3
 8013724:	d81f      	bhi.n	8013766 <RCCEx_PLLSAI2_Config+0x5a>
 8013726:	2b01      	cmp	r3, #1
 8013728:	d002      	beq.n	8013730 <RCCEx_PLLSAI2_Config+0x24>
 801372a:	2b02      	cmp	r3, #2
 801372c:	d009      	beq.n	8013742 <RCCEx_PLLSAI2_Config+0x36>
 801372e:	e01a      	b.n	8013766 <RCCEx_PLLSAI2_Config+0x5a>
  {
    case RCC_PLLSOURCE_MSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8013730:	4b4a      	ldr	r3, [pc, #296]	; (801385c <RCCEx_PLLSAI2_Config+0x150>)
 8013732:	681b      	ldr	r3, [r3, #0]
 8013734:	f003 0302 	and.w	r3, r3, #2
 8013738:	2b00      	cmp	r3, #0
 801373a:	d117      	bne.n	801376c <RCCEx_PLLSAI2_Config+0x60>
      {
        status = HAL_ERROR;
 801373c:	2301      	movs	r3, #1
 801373e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8013740:	e014      	b.n	801376c <RCCEx_PLLSAI2_Config+0x60>
    case RCC_PLLSOURCE_HSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8013742:	4b46      	ldr	r3, [pc, #280]	; (801385c <RCCEx_PLLSAI2_Config+0x150>)
 8013744:	681b      	ldr	r3, [r3, #0]
 8013746:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801374a:	2b00      	cmp	r3, #0
 801374c:	d110      	bne.n	8013770 <RCCEx_PLLSAI2_Config+0x64>
      {
        status = HAL_ERROR;
 801374e:	2301      	movs	r3, #1
 8013750:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8013752:	e00d      	b.n	8013770 <RCCEx_PLLSAI2_Config+0x64>
    case RCC_PLLSOURCE_HSE:
      if (HAL_IS_BIT_CLR(RCC->CR, (RCC_CR_HSERDY | RCC_CR_HSEBYP)))
 8013754:	4b41      	ldr	r3, [pc, #260]	; (801385c <RCCEx_PLLSAI2_Config+0x150>)
 8013756:	681b      	ldr	r3, [r3, #0]
 8013758:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 801375c:	2b00      	cmp	r3, #0
 801375e:	d109      	bne.n	8013774 <RCCEx_PLLSAI2_Config+0x68>
      {
        status = HAL_ERROR;
 8013760:	2301      	movs	r3, #1
 8013762:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8013764:	e006      	b.n	8013774 <RCCEx_PLLSAI2_Config+0x68>
    default:
      status = HAL_ERROR;
 8013766:	2301      	movs	r3, #1
 8013768:	73fb      	strb	r3, [r7, #15]
      break;
 801376a:	e004      	b.n	8013776 <RCCEx_PLLSAI2_Config+0x6a>
      break;
 801376c:	bf00      	nop
 801376e:	e002      	b.n	8013776 <RCCEx_PLLSAI2_Config+0x6a>
      break;
 8013770:	bf00      	nop
 8013772:	e000      	b.n	8013776 <RCCEx_PLLSAI2_Config+0x6a>
      break;
 8013774:	bf00      	nop
  }

  if (status == HAL_OK)
 8013776:	7bfb      	ldrb	r3, [r7, #15]
 8013778:	2b00      	cmp	r3, #0
 801377a:	d169      	bne.n	8013850 <RCCEx_PLLSAI2_Config+0x144>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 801377c:	4b37      	ldr	r3, [pc, #220]	; (801385c <RCCEx_PLLSAI2_Config+0x150>)
 801377e:	681b      	ldr	r3, [r3, #0]
 8013780:	4a36      	ldr	r2, [pc, #216]	; (801385c <RCCEx_PLLSAI2_Config+0x150>)
 8013782:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8013786:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8013788:	f7fb f956 	bl	800ea38 <HAL_GetTick>
 801378c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 801378e:	e00f      	b.n	80137b0 <RCCEx_PLLSAI2_Config+0xa4>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8013790:	f7fb f952 	bl	800ea38 <HAL_GetTick>
 8013794:	4602      	mov	r2, r0
 8013796:	68bb      	ldr	r3, [r7, #8]
 8013798:	1ad3      	subs	r3, r2, r3
 801379a:	2b02      	cmp	r3, #2
 801379c:	d908      	bls.n	80137b0 <RCCEx_PLLSAI2_Config+0xa4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 801379e:	4b2f      	ldr	r3, [pc, #188]	; (801385c <RCCEx_PLLSAI2_Config+0x150>)
 80137a0:	681b      	ldr	r3, [r3, #0]
 80137a2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80137a6:	2b00      	cmp	r3, #0
 80137a8:	d009      	beq.n	80137be <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_TIMEOUT;
 80137aa:	2303      	movs	r3, #3
 80137ac:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80137ae:	e006      	b.n	80137be <RCCEx_PLLSAI2_Config+0xb2>
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80137b0:	4b2a      	ldr	r3, [pc, #168]	; (801385c <RCCEx_PLLSAI2_Config+0x150>)
 80137b2:	681b      	ldr	r3, [r3, #0]
 80137b4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80137b8:	2b00      	cmp	r3, #0
 80137ba:	d1e9      	bne.n	8013790 <RCCEx_PLLSAI2_Config+0x84>
 80137bc:	e000      	b.n	80137c0 <RCCEx_PLLSAI2_Config+0xb4>
        break;
 80137be:	bf00      	nop
      }
    }

    if (status == HAL_OK)
 80137c0:	7bfb      	ldrb	r3, [r7, #15]
 80137c2:	2b00      	cmp	r3, #0
 80137c4:	d144      	bne.n	8013850 <RCCEx_PLLSAI2_Config+0x144>
    {
      if (Divider == DIVIDER_P_UPDATE)
 80137c6:	683b      	ldr	r3, [r7, #0]
 80137c8:	2b00      	cmp	r3, #0
 80137ca:	d115      	bne.n	80137f8 <RCCEx_PLLSAI2_Config+0xec>
      {
        assert_param(IS_RCC_PLLSAI2P_VALUE(pPllSai2->PLLSAI2P));

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80137cc:	4b23      	ldr	r3, [pc, #140]	; (801385c <RCCEx_PLLSAI2_Config+0x150>)
 80137ce:	695a      	ldr	r2, [r3, #20]
 80137d0:	4b23      	ldr	r3, [pc, #140]	; (8013860 <RCCEx_PLLSAI2_Config+0x154>)
 80137d2:	4013      	ands	r3, r2
 80137d4:	687a      	ldr	r2, [r7, #4]
 80137d6:	6892      	ldr	r2, [r2, #8]
 80137d8:	0211      	lsls	r1, r2, #8
 80137da:	687a      	ldr	r2, [r7, #4]
 80137dc:	68d2      	ldr	r2, [r2, #12]
 80137de:	06d2      	lsls	r2, r2, #27
 80137e0:	4311      	orrs	r1, r2
 80137e2:	687a      	ldr	r2, [r7, #4]
 80137e4:	6852      	ldr	r2, [r2, #4]
 80137e6:	3a01      	subs	r2, #1
 80137e8:	0112      	lsls	r2, r2, #4
 80137ea:	4311      	orrs	r1, r2
 80137ec:	687a      	ldr	r2, [r7, #4]
 80137ee:	6812      	ldr	r2, [r2, #0]
 80137f0:	430a      	orrs	r2, r1
 80137f2:	491a      	ldr	r1, [pc, #104]	; (801385c <RCCEx_PLLSAI2_Config+0x150>)
 80137f4:	4313      	orrs	r3, r2
 80137f6:	614b      	str	r3, [r1, #20]
                   pPllSai2->PLLSAI2Source);

      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80137f8:	4b18      	ldr	r3, [pc, #96]	; (801385c <RCCEx_PLLSAI2_Config+0x150>)
 80137fa:	681b      	ldr	r3, [r3, #0]
 80137fc:	4a17      	ldr	r2, [pc, #92]	; (801385c <RCCEx_PLLSAI2_Config+0x150>)
 80137fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8013802:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8013804:	f7fb f918 	bl	800ea38 <HAL_GetTick>
 8013808:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 801380a:	e00f      	b.n	801382c <RCCEx_PLLSAI2_Config+0x120>
      {
        if ((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 801380c:	f7fb f914 	bl	800ea38 <HAL_GetTick>
 8013810:	4602      	mov	r2, r0
 8013812:	68bb      	ldr	r3, [r7, #8]
 8013814:	1ad3      	subs	r3, r2, r3
 8013816:	2b02      	cmp	r3, #2
 8013818:	d908      	bls.n	801382c <RCCEx_PLLSAI2_Config+0x120>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 801381a:	4b10      	ldr	r3, [pc, #64]	; (801385c <RCCEx_PLLSAI2_Config+0x150>)
 801381c:	681b      	ldr	r3, [r3, #0]
 801381e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8013822:	2b00      	cmp	r3, #0
 8013824:	d109      	bne.n	801383a <RCCEx_PLLSAI2_Config+0x12e>
          {
            status = HAL_TIMEOUT;
 8013826:	2303      	movs	r3, #3
 8013828:	73fb      	strb	r3, [r7, #15]
          }
          break;
 801382a:	e006      	b.n	801383a <RCCEx_PLLSAI2_Config+0x12e>
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 801382c:	4b0b      	ldr	r3, [pc, #44]	; (801385c <RCCEx_PLLSAI2_Config+0x150>)
 801382e:	681b      	ldr	r3, [r3, #0]
 8013830:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8013834:	2b00      	cmp	r3, #0
 8013836:	d0e9      	beq.n	801380c <RCCEx_PLLSAI2_Config+0x100>
 8013838:	e000      	b.n	801383c <RCCEx_PLLSAI2_Config+0x130>
          break;
 801383a:	bf00      	nop
        }
      }

      if (status == HAL_OK)
 801383c:	7bfb      	ldrb	r3, [r7, #15]
 801383e:	2b00      	cmp	r3, #0
 8013840:	d106      	bne.n	8013850 <RCCEx_PLLSAI2_Config+0x144>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(pPllSai2->PLLSAI2ClockOut);
 8013842:	4b06      	ldr	r3, [pc, #24]	; (801385c <RCCEx_PLLSAI2_Config+0x150>)
 8013844:	695a      	ldr	r2, [r3, #20]
 8013846:	687b      	ldr	r3, [r7, #4]
 8013848:	691b      	ldr	r3, [r3, #16]
 801384a:	4904      	ldr	r1, [pc, #16]	; (801385c <RCCEx_PLLSAI2_Config+0x150>)
 801384c:	4313      	orrs	r3, r2
 801384e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8013850:	7bfb      	ldrb	r3, [r7, #15]
}
 8013852:	4618      	mov	r0, r3
 8013854:	3710      	adds	r7, #16
 8013856:	46bd      	mov	sp, r7
 8013858:	bd80      	pop	{r7, pc}
 801385a:	bf00      	nop
 801385c:	40021000 	.word	0x40021000
 8013860:	07ff800c 	.word	0x07ff800c

08013864 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8013864:	b580      	push	{r7, lr}
 8013866:	b084      	sub	sp, #16
 8013868:	af00      	add	r7, sp, #0
 801386a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 801386c:	2301      	movs	r3, #1
 801386e:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8013870:	687b      	ldr	r3, [r7, #4]
 8013872:	2b00      	cmp	r3, #0
 8013874:	d066      	beq.n	8013944 <HAL_RTC_Init+0xe0>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8013876:	687b      	ldr	r3, [r7, #4]
 8013878:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 801387c:	b2db      	uxtb	r3, r3
 801387e:	2b00      	cmp	r3, #0
 8013880:	d106      	bne.n	8013890 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8013882:	687b      	ldr	r3, [r7, #4]
 8013884:	2200      	movs	r2, #0
 8013886:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 801388a:	6878      	ldr	r0, [r7, #4]
 801388c:	f7fa fb5a 	bl	800df44 <HAL_RTC_MspInit>
    }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8013890:	687b      	ldr	r3, [r7, #4]
 8013892:	2202      	movs	r2, #2
 8013894:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8013898:	687b      	ldr	r3, [r7, #4]
 801389a:	681b      	ldr	r3, [r3, #0]
 801389c:	68db      	ldr	r3, [r3, #12]
 801389e:	f003 0310 	and.w	r3, r3, #16
 80138a2:	2b10      	cmp	r3, #16
 80138a4:	d045      	beq.n	8013932 <HAL_RTC_Init+0xce>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80138a6:	4b2a      	ldr	r3, [pc, #168]	; (8013950 <HAL_RTC_Init+0xec>)
 80138a8:	22ca      	movs	r2, #202	; 0xca
 80138aa:	625a      	str	r2, [r3, #36]	; 0x24
 80138ac:	4b28      	ldr	r3, [pc, #160]	; (8013950 <HAL_RTC_Init+0xec>)
 80138ae:	2253      	movs	r2, #83	; 0x53
 80138b0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 80138b2:	6878      	ldr	r0, [r7, #4]
 80138b4:	f000 f872 	bl	801399c <RTC_EnterInitMode>
 80138b8:	4603      	mov	r3, r0
 80138ba:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 80138bc:	7bfb      	ldrb	r3, [r7, #15]
 80138be:	2b00      	cmp	r3, #0
 80138c0:	d121      	bne.n	8013906 <HAL_RTC_Init+0xa2>
      {
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        CLEAR_BIT(RTC->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 80138c2:	4b23      	ldr	r3, [pc, #140]	; (8013950 <HAL_RTC_Init+0xec>)
 80138c4:	699b      	ldr	r3, [r3, #24]
 80138c6:	4a22      	ldr	r2, [pc, #136]	; (8013950 <HAL_RTC_Init+0xec>)
 80138c8:	f023 638e 	bic.w	r3, r3, #74448896	; 0x4700000
 80138cc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80138d0:	6193      	str	r3, [r2, #24]
        /* Set RTC_CR register */
        SET_BIT(RTC->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 80138d2:	4b1f      	ldr	r3, [pc, #124]	; (8013950 <HAL_RTC_Init+0xec>)
 80138d4:	699a      	ldr	r2, [r3, #24]
 80138d6:	687b      	ldr	r3, [r7, #4]
 80138d8:	6859      	ldr	r1, [r3, #4]
 80138da:	687b      	ldr	r3, [r7, #4]
 80138dc:	691b      	ldr	r3, [r3, #16]
 80138de:	4319      	orrs	r1, r3
 80138e0:	687b      	ldr	r3, [r7, #4]
 80138e2:	699b      	ldr	r3, [r3, #24]
 80138e4:	430b      	orrs	r3, r1
 80138e6:	491a      	ldr	r1, [pc, #104]	; (8013950 <HAL_RTC_Init+0xec>)
 80138e8:	4313      	orrs	r3, r2
 80138ea:	618b      	str	r3, [r1, #24]

        /* Configure the RTC PRER */
        WRITE_REG(RTC->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 80138ec:	687b      	ldr	r3, [r7, #4]
 80138ee:	68da      	ldr	r2, [r3, #12]
 80138f0:	687b      	ldr	r3, [r7, #4]
 80138f2:	689b      	ldr	r3, [r3, #8]
 80138f4:	041b      	lsls	r3, r3, #16
 80138f6:	4916      	ldr	r1, [pc, #88]	; (8013950 <HAL_RTC_Init+0xec>)
 80138f8:	4313      	orrs	r3, r2
 80138fa:	610b      	str	r3, [r1, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 80138fc:	6878      	ldr	r0, [r7, #4]
 80138fe:	f000 f881 	bl	8013a04 <RTC_ExitInitMode>
 8013902:	4603      	mov	r3, r0
 8013904:	73fb      	strb	r3, [r7, #15]
      }

      if (status == HAL_OK)
 8013906:	7bfb      	ldrb	r3, [r7, #15]
 8013908:	2b00      	cmp	r3, #0
 801390a:	d10e      	bne.n	801392a <HAL_RTC_Init+0xc6>
      {
        MODIFY_REG(RTC->CR, \
 801390c:	4b10      	ldr	r3, [pc, #64]	; (8013950 <HAL_RTC_Init+0xec>)
 801390e:	699b      	ldr	r3, [r3, #24]
 8013910:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8013914:	687b      	ldr	r3, [r7, #4]
 8013916:	6a19      	ldr	r1, [r3, #32]
 8013918:	687b      	ldr	r3, [r7, #4]
 801391a:	69db      	ldr	r3, [r3, #28]
 801391c:	4319      	orrs	r1, r3
 801391e:	687b      	ldr	r3, [r7, #4]
 8013920:	695b      	ldr	r3, [r3, #20]
 8013922:	430b      	orrs	r3, r1
 8013924:	490a      	ldr	r1, [pc, #40]	; (8013950 <HAL_RTC_Init+0xec>)
 8013926:	4313      	orrs	r3, r2
 8013928:	618b      	str	r3, [r1, #24]
                   hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
      }


    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 801392a:	4b09      	ldr	r3, [pc, #36]	; (8013950 <HAL_RTC_Init+0xec>)
 801392c:	22ff      	movs	r2, #255	; 0xff
 801392e:	625a      	str	r2, [r3, #36]	; 0x24
 8013930:	e001      	b.n	8013936 <HAL_RTC_Init+0xd2>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 8013932:	2300      	movs	r3, #0
 8013934:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8013936:	7bfb      	ldrb	r3, [r7, #15]
 8013938:	2b00      	cmp	r3, #0
 801393a:	d103      	bne.n	8013944 <HAL_RTC_Init+0xe0>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 801393c:	687b      	ldr	r3, [r7, #4]
 801393e:	2201      	movs	r2, #1
 8013940:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
  }

  return status;
 8013944:	7bfb      	ldrb	r3, [r7, #15]
}
 8013946:	4618      	mov	r0, r3
 8013948:	3710      	adds	r7, #16
 801394a:	46bd      	mov	sp, r7
 801394c:	bd80      	pop	{r7, pc}
 801394e:	bf00      	nop
 8013950:	40002800 	.word	0x40002800

08013954 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8013954:	b580      	push	{r7, lr}
 8013956:	b084      	sub	sp, #16
 8013958:	af00      	add	r7, sp, #0
 801395a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  UNUSED(hrtc);
  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  WRITE_REG(RTC->ICSR, ((uint32_t)(RTC_RSF_MASK & RTC_ICSR_RESERVED_MASK)));
 801395c:	4b0d      	ldr	r3, [pc, #52]	; (8013994 <HAL_RTC_WaitForSynchro+0x40>)
 801395e:	4a0e      	ldr	r2, [pc, #56]	; (8013998 <HAL_RTC_WaitForSynchro+0x44>)
 8013960:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8013962:	f7fb f869 	bl	800ea38 <HAL_GetTick>
 8013966:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 8013968:	e009      	b.n	801397e <HAL_RTC_WaitForSynchro+0x2a>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 801396a:	f7fb f865 	bl	800ea38 <HAL_GetTick>
 801396e:	4602      	mov	r2, r0
 8013970:	68fb      	ldr	r3, [r7, #12]
 8013972:	1ad3      	subs	r3, r2, r3
 8013974:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8013978:	d901      	bls.n	801397e <HAL_RTC_WaitForSynchro+0x2a>
    {
      return HAL_TIMEOUT;
 801397a:	2303      	movs	r3, #3
 801397c:	e006      	b.n	801398c <HAL_RTC_WaitForSynchro+0x38>
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 801397e:	4b05      	ldr	r3, [pc, #20]	; (8013994 <HAL_RTC_WaitForSynchro+0x40>)
 8013980:	68db      	ldr	r3, [r3, #12]
 8013982:	f003 0320 	and.w	r3, r3, #32
 8013986:	2b00      	cmp	r3, #0
 8013988:	d0ef      	beq.n	801396a <HAL_RTC_WaitForSynchro+0x16>
    }
  }

  return HAL_OK;
 801398a:	2300      	movs	r3, #0
}
 801398c:	4618      	mov	r0, r3
 801398e:	3710      	adds	r7, #16
 8013990:	46bd      	mov	sp, r7
 8013992:	bd80      	pop	{r7, pc}
 8013994:	40002800 	.word	0x40002800
 8013998:	0001005c 	.word	0x0001005c

0801399c <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 801399c:	b580      	push	{r7, lr}
 801399e:	b084      	sub	sp, #16
 80139a0:	af00      	add	r7, sp, #0
 80139a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80139a4:	2300      	movs	r3, #0
 80139a6:	73fb      	strb	r3, [r7, #15]

  UNUSED(hrtc);
  /* Check if the Initialization mode is set */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 80139a8:	4b15      	ldr	r3, [pc, #84]	; (8013a00 <RTC_EnterInitMode+0x64>)
 80139aa:	68db      	ldr	r3, [r3, #12]
 80139ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80139b0:	2b00      	cmp	r3, #0
 80139b2:	d120      	bne.n	80139f6 <RTC_EnterInitMode+0x5a>
  {
    /* Set the Initialization mode */
    SET_BIT(RTC->ICSR, RTC_ICSR_INIT);
 80139b4:	4b12      	ldr	r3, [pc, #72]	; (8013a00 <RTC_EnterInitMode+0x64>)
 80139b6:	68db      	ldr	r3, [r3, #12]
 80139b8:	4a11      	ldr	r2, [pc, #68]	; (8013a00 <RTC_EnterInitMode+0x64>)
 80139ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80139be:	60d3      	str	r3, [r2, #12]

    tickstart = HAL_GetTick();
 80139c0:	f7fb f83a 	bl	800ea38 <HAL_GetTick>
 80139c4:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80139c6:	e00d      	b.n	80139e4 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 80139c8:	f7fb f836 	bl	800ea38 <HAL_GetTick>
 80139cc:	4602      	mov	r2, r0
 80139ce:	68bb      	ldr	r3, [r7, #8]
 80139d0:	1ad3      	subs	r3, r2, r3
 80139d2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80139d6:	d905      	bls.n	80139e4 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 80139d8:	2303      	movs	r3, #3
 80139da:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80139dc:	687b      	ldr	r3, [r7, #4]
 80139de:	2203      	movs	r2, #3
 80139e0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80139e4:	4b06      	ldr	r3, [pc, #24]	; (8013a00 <RTC_EnterInitMode+0x64>)
 80139e6:	68db      	ldr	r3, [r3, #12]
 80139e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80139ec:	2b00      	cmp	r3, #0
 80139ee:	d102      	bne.n	80139f6 <RTC_EnterInitMode+0x5a>
 80139f0:	7bfb      	ldrb	r3, [r7, #15]
 80139f2:	2b03      	cmp	r3, #3
 80139f4:	d1e8      	bne.n	80139c8 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return status;
 80139f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80139f8:	4618      	mov	r0, r3
 80139fa:	3710      	adds	r7, #16
 80139fc:	46bd      	mov	sp, r7
 80139fe:	bd80      	pop	{r7, pc}
 8013a00:	40002800 	.word	0x40002800

08013a04 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8013a04:	b580      	push	{r7, lr}
 8013a06:	b084      	sub	sp, #16
 8013a08:	af00      	add	r7, sp, #0
 8013a0a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8013a0c:	2300      	movs	r3, #0
 8013a0e:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8013a10:	4b1a      	ldr	r3, [pc, #104]	; (8013a7c <RTC_ExitInitMode+0x78>)
 8013a12:	68db      	ldr	r3, [r3, #12]
 8013a14:	4a19      	ldr	r2, [pc, #100]	; (8013a7c <RTC_ExitInitMode+0x78>)
 8013a16:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8013a1a:	60d3      	str	r3, [r2, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8013a1c:	4b17      	ldr	r3, [pc, #92]	; (8013a7c <RTC_ExitInitMode+0x78>)
 8013a1e:	699b      	ldr	r3, [r3, #24]
 8013a20:	f003 0320 	and.w	r3, r3, #32
 8013a24:	2b00      	cmp	r3, #0
 8013a26:	d10c      	bne.n	8013a42 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8013a28:	6878      	ldr	r0, [r7, #4]
 8013a2a:	f7ff ff93 	bl	8013954 <HAL_RTC_WaitForSynchro>
 8013a2e:	4603      	mov	r3, r0
 8013a30:	2b00      	cmp	r3, #0
 8013a32:	d01e      	beq.n	8013a72 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8013a34:	687b      	ldr	r3, [r7, #4]
 8013a36:	2203      	movs	r2, #3
 8013a38:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
      status = HAL_TIMEOUT;
 8013a3c:	2303      	movs	r3, #3
 8013a3e:	73fb      	strb	r3, [r7, #15]
 8013a40:	e017      	b.n	8013a72 <RTC_ExitInitMode+0x6e>
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry.
          Please look at STM32L552xx STM32L562xx Errata sheet on the internet for details. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8013a42:	4b0e      	ldr	r3, [pc, #56]	; (8013a7c <RTC_ExitInitMode+0x78>)
 8013a44:	699b      	ldr	r3, [r3, #24]
 8013a46:	4a0d      	ldr	r2, [pc, #52]	; (8013a7c <RTC_ExitInitMode+0x78>)
 8013a48:	f023 0320 	bic.w	r3, r3, #32
 8013a4c:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8013a4e:	6878      	ldr	r0, [r7, #4]
 8013a50:	f7ff ff80 	bl	8013954 <HAL_RTC_WaitForSynchro>
 8013a54:	4603      	mov	r3, r0
 8013a56:	2b00      	cmp	r3, #0
 8013a58:	d005      	beq.n	8013a66 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8013a5a:	687b      	ldr	r3, [r7, #4]
 8013a5c:	2203      	movs	r2, #3
 8013a5e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
      status = HAL_TIMEOUT;
 8013a62:	2303      	movs	r3, #3
 8013a64:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8013a66:	4b05      	ldr	r3, [pc, #20]	; (8013a7c <RTC_ExitInitMode+0x78>)
 8013a68:	699b      	ldr	r3, [r3, #24]
 8013a6a:	4a04      	ldr	r2, [pc, #16]	; (8013a7c <RTC_ExitInitMode+0x78>)
 8013a6c:	f043 0320 	orr.w	r3, r3, #32
 8013a70:	6193      	str	r3, [r2, #24]
  }

  return status;
 8013a72:	7bfb      	ldrb	r3, [r7, #15]
}
 8013a74:	4618      	mov	r0, r3
 8013a76:	3710      	adds	r7, #16
 8013a78:	46bd      	mov	sp, r7
 8013a7a:	bd80      	pop	{r7, pc}
 8013a7c:	40002800 	.word	0x40002800

08013a80 <HAL_RTCEx_PrivilegeModeSet>:
  * @param  hrtc RTC handle
  * @param  privilegeState  Privilege state
  * @retval HAL_StatusTypeDef
  */
HAL_StatusTypeDef HAL_RTCEx_PrivilegeModeSet(RTC_HandleTypeDef *hrtc, RTC_PrivilegeStateTypeDef *privilegeState)
{
 8013a80:	b480      	push	{r7}
 8013a82:	b083      	sub	sp, #12
 8013a84:	af00      	add	r7, sp, #0
 8013a86:	6078      	str	r0, [r7, #4]
 8013a88:	6039      	str	r1, [r7, #0]
  assert_param(IS_RTC_PRIVILEGE_BKUP_ZONE(privilegeState->backupRegisterPrivZone));
  assert_param(IS_RTC_BKP(privilegeState->backupRegisterStartZone2));
  assert_param(IS_RTC_BKP(privilegeState->backupRegisterStartZone3));

  /* RTC privilege configuration */
  WRITE_REG(RTC->PRIVCR, privilegeState->rtcPrivilegeFull | privilegeState->rtcPrivilegeFeatures);
 8013a8a:	683b      	ldr	r3, [r7, #0]
 8013a8c:	681a      	ldr	r2, [r3, #0]
 8013a8e:	683b      	ldr	r3, [r7, #0]
 8013a90:	685b      	ldr	r3, [r3, #4]
 8013a92:	490f      	ldr	r1, [pc, #60]	; (8013ad0 <HAL_RTCEx_PrivilegeModeSet+0x50>)
 8013a94:	4313      	orrs	r3, r2
 8013a96:	61cb      	str	r3, [r1, #28]

  /* TAMP and Backup registers privilege configuration
     Warning : privilegeState->backupRegisterPrivZone is only writable in secure mode or if trustzone is disabled.
               In non secure mode, a notification is generated through a flag/interrupt in the TZIC (TrustZone interrupt controller). The bits are not written. */
  WRITE_REG(TAMP->PRIVCR, privilegeState->tampPrivilegeFull | privilegeState->backupRegisterPrivZone);
 8013a98:	683b      	ldr	r3, [r7, #0]
 8013a9a:	689a      	ldr	r2, [r3, #8]
 8013a9c:	683b      	ldr	r3, [r7, #0]
 8013a9e:	68db      	ldr	r3, [r3, #12]
 8013aa0:	490c      	ldr	r1, [pc, #48]	; (8013ad4 <HAL_RTCEx_PrivilegeModeSet+0x54>)
 8013aa2:	4313      	orrs	r3, r2
 8013aa4:	624b      	str	r3, [r1, #36]	; 0x24

  /* Backup register start zone
     Warning : This parameter is only writable in secure mode or if trustzone is disabled.
               In non secure mode, a notification is generated through a flag/interrupt in the TZIC (TrustZone interrupt controller). The bits are not written.
     Warning : Backup register start zones are shared with secure configuration */
  MODIFY_REG(TAMP->SMCR,
 8013aa6:	4b0b      	ldr	r3, [pc, #44]	; (8013ad4 <HAL_RTCEx_PrivilegeModeSet+0x54>)
 8013aa8:	6a1b      	ldr	r3, [r3, #32]
 8013aaa:	f003 22ff 	and.w	r2, r3, #4278255360	; 0xff00ff00
 8013aae:	683b      	ldr	r3, [r7, #0]
 8013ab0:	6919      	ldr	r1, [r3, #16]
 8013ab2:	683b      	ldr	r3, [r7, #0]
 8013ab4:	695b      	ldr	r3, [r3, #20]
 8013ab6:	041b      	lsls	r3, r3, #16
 8013ab8:	430b      	orrs	r3, r1
 8013aba:	4906      	ldr	r1, [pc, #24]	; (8013ad4 <HAL_RTCEx_PrivilegeModeSet+0x54>)
 8013abc:	4313      	orrs	r3, r2
 8013abe:	620b      	str	r3, [r1, #32]
             (TAMP_SMCR_BKPRWDPROT | TAMP_SMCR_BKPWDPROT),
             ((privilegeState->backupRegisterStartZone2 << TAMP_SMCR_BKPRWDPROT_Pos) | (privilegeState->backupRegisterStartZone3 << TAMP_SMCR_BKPWDPROT_Pos)));

  return HAL_OK;
 8013ac0:	2300      	movs	r3, #0
}
 8013ac2:	4618      	mov	r0, r3
 8013ac4:	370c      	adds	r7, #12
 8013ac6:	46bd      	mov	sp, r7
 8013ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013acc:	4770      	bx	lr
 8013ace:	bf00      	nop
 8013ad0:	40002800 	.word	0x40002800
 8013ad4:	40003400 	.word	0x40003400

08013ad8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8013ad8:	b580      	push	{r7, lr}
 8013ada:	b084      	sub	sp, #16
 8013adc:	af00      	add	r7, sp, #0
 8013ade:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8013ae0:	687b      	ldr	r3, [r7, #4]
 8013ae2:	2b00      	cmp	r3, #0
 8013ae4:	d101      	bne.n	8013aea <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8013ae6:	2301      	movs	r3, #1
 8013ae8:	e095      	b.n	8013c16 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8013aea:	687b      	ldr	r3, [r7, #4]
 8013aec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013aee:	2b00      	cmp	r3, #0
 8013af0:	d108      	bne.n	8013b04 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8013af2:	687b      	ldr	r3, [r7, #4]
 8013af4:	685b      	ldr	r3, [r3, #4]
 8013af6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8013afa:	d009      	beq.n	8013b10 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8013afc:	687b      	ldr	r3, [r7, #4]
 8013afe:	2200      	movs	r2, #0
 8013b00:	61da      	str	r2, [r3, #28]
 8013b02:	e005      	b.n	8013b10 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8013b04:	687b      	ldr	r3, [r7, #4]
 8013b06:	2200      	movs	r2, #0
 8013b08:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8013b0a:	687b      	ldr	r3, [r7, #4]
 8013b0c:	2200      	movs	r2, #0
 8013b0e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8013b10:	687b      	ldr	r3, [r7, #4]
 8013b12:	2200      	movs	r2, #0
 8013b14:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8013b16:	687b      	ldr	r3, [r7, #4]
 8013b18:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8013b1c:	b2db      	uxtb	r3, r3
 8013b1e:	2b00      	cmp	r3, #0
 8013b20:	d106      	bne.n	8013b30 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8013b22:	687b      	ldr	r3, [r7, #4]
 8013b24:	2200      	movs	r2, #0
 8013b26:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8013b2a:	6878      	ldr	r0, [r7, #4]
 8013b2c:	f7fa fa48 	bl	800dfc0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8013b30:	687b      	ldr	r3, [r7, #4]
 8013b32:	2202      	movs	r2, #2
 8013b34:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8013b38:	687b      	ldr	r3, [r7, #4]
 8013b3a:	681b      	ldr	r3, [r3, #0]
 8013b3c:	681a      	ldr	r2, [r3, #0]
 8013b3e:	687b      	ldr	r3, [r7, #4]
 8013b40:	681b      	ldr	r3, [r3, #0]
 8013b42:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8013b46:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8013b48:	687b      	ldr	r3, [r7, #4]
 8013b4a:	68db      	ldr	r3, [r3, #12]
 8013b4c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8013b50:	d902      	bls.n	8013b58 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8013b52:	2300      	movs	r3, #0
 8013b54:	60fb      	str	r3, [r7, #12]
 8013b56:	e002      	b.n	8013b5e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8013b58:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8013b5c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8013b5e:	687b      	ldr	r3, [r7, #4]
 8013b60:	68db      	ldr	r3, [r3, #12]
 8013b62:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8013b66:	d007      	beq.n	8013b78 <HAL_SPI_Init+0xa0>
 8013b68:	687b      	ldr	r3, [r7, #4]
 8013b6a:	68db      	ldr	r3, [r3, #12]
 8013b6c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8013b70:	d002      	beq.n	8013b78 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8013b72:	687b      	ldr	r3, [r7, #4]
 8013b74:	2200      	movs	r2, #0
 8013b76:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8013b78:	687b      	ldr	r3, [r7, #4]
 8013b7a:	685b      	ldr	r3, [r3, #4]
 8013b7c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8013b80:	687b      	ldr	r3, [r7, #4]
 8013b82:	689b      	ldr	r3, [r3, #8]
 8013b84:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8013b88:	431a      	orrs	r2, r3
 8013b8a:	687b      	ldr	r3, [r7, #4]
 8013b8c:	691b      	ldr	r3, [r3, #16]
 8013b8e:	f003 0302 	and.w	r3, r3, #2
 8013b92:	431a      	orrs	r2, r3
 8013b94:	687b      	ldr	r3, [r7, #4]
 8013b96:	695b      	ldr	r3, [r3, #20]
 8013b98:	f003 0301 	and.w	r3, r3, #1
 8013b9c:	431a      	orrs	r2, r3
 8013b9e:	687b      	ldr	r3, [r7, #4]
 8013ba0:	699b      	ldr	r3, [r3, #24]
 8013ba2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8013ba6:	431a      	orrs	r2, r3
 8013ba8:	687b      	ldr	r3, [r7, #4]
 8013baa:	69db      	ldr	r3, [r3, #28]
 8013bac:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8013bb0:	431a      	orrs	r2, r3
 8013bb2:	687b      	ldr	r3, [r7, #4]
 8013bb4:	6a1b      	ldr	r3, [r3, #32]
 8013bb6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8013bba:	ea42 0103 	orr.w	r1, r2, r3
 8013bbe:	687b      	ldr	r3, [r7, #4]
 8013bc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013bc2:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8013bc6:	687b      	ldr	r3, [r7, #4]
 8013bc8:	681b      	ldr	r3, [r3, #0]
 8013bca:	430a      	orrs	r2, r1
 8013bcc:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8013bce:	687b      	ldr	r3, [r7, #4]
 8013bd0:	699b      	ldr	r3, [r3, #24]
 8013bd2:	0c1b      	lsrs	r3, r3, #16
 8013bd4:	f003 0204 	and.w	r2, r3, #4
 8013bd8:	687b      	ldr	r3, [r7, #4]
 8013bda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013bdc:	f003 0310 	and.w	r3, r3, #16
 8013be0:	431a      	orrs	r2, r3
 8013be2:	687b      	ldr	r3, [r7, #4]
 8013be4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013be6:	f003 0308 	and.w	r3, r3, #8
 8013bea:	431a      	orrs	r2, r3
 8013bec:	687b      	ldr	r3, [r7, #4]
 8013bee:	68db      	ldr	r3, [r3, #12]
 8013bf0:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8013bf4:	ea42 0103 	orr.w	r1, r2, r3
 8013bf8:	68fb      	ldr	r3, [r7, #12]
 8013bfa:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8013bfe:	687b      	ldr	r3, [r7, #4]
 8013c00:	681b      	ldr	r3, [r3, #0]
 8013c02:	430a      	orrs	r2, r1
 8013c04:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8013c06:	687b      	ldr	r3, [r7, #4]
 8013c08:	2200      	movs	r2, #0
 8013c0a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8013c0c:	687b      	ldr	r3, [r7, #4]
 8013c0e:	2201      	movs	r2, #1
 8013c10:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8013c14:	2300      	movs	r3, #0
}
 8013c16:	4618      	mov	r0, r3
 8013c18:	3710      	adds	r7, #16
 8013c1a:	46bd      	mov	sp, r7
 8013c1c:	bd80      	pop	{r7, pc}

08013c1e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8013c1e:	b580      	push	{r7, lr}
 8013c20:	b088      	sub	sp, #32
 8013c22:	af00      	add	r7, sp, #0
 8013c24:	60f8      	str	r0, [r7, #12]
 8013c26:	60b9      	str	r1, [r7, #8]
 8013c28:	603b      	str	r3, [r7, #0]
 8013c2a:	4613      	mov	r3, r2
 8013c2c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8013c2e:	2300      	movs	r3, #0
 8013c30:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8013c32:	68fb      	ldr	r3, [r7, #12]
 8013c34:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8013c38:	2b01      	cmp	r3, #1
 8013c3a:	d101      	bne.n	8013c40 <HAL_SPI_Transmit+0x22>
 8013c3c:	2302      	movs	r3, #2
 8013c3e:	e158      	b.n	8013ef2 <HAL_SPI_Transmit+0x2d4>
 8013c40:	68fb      	ldr	r3, [r7, #12]
 8013c42:	2201      	movs	r2, #1
 8013c44:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8013c48:	f7fa fef6 	bl	800ea38 <HAL_GetTick>
 8013c4c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8013c4e:	88fb      	ldrh	r3, [r7, #6]
 8013c50:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8013c52:	68fb      	ldr	r3, [r7, #12]
 8013c54:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8013c58:	b2db      	uxtb	r3, r3
 8013c5a:	2b01      	cmp	r3, #1
 8013c5c:	d002      	beq.n	8013c64 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8013c5e:	2302      	movs	r3, #2
 8013c60:	77fb      	strb	r3, [r7, #31]
    goto error;
 8013c62:	e13d      	b.n	8013ee0 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8013c64:	68bb      	ldr	r3, [r7, #8]
 8013c66:	2b00      	cmp	r3, #0
 8013c68:	d002      	beq.n	8013c70 <HAL_SPI_Transmit+0x52>
 8013c6a:	88fb      	ldrh	r3, [r7, #6]
 8013c6c:	2b00      	cmp	r3, #0
 8013c6e:	d102      	bne.n	8013c76 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8013c70:	2301      	movs	r3, #1
 8013c72:	77fb      	strb	r3, [r7, #31]
    goto error;
 8013c74:	e134      	b.n	8013ee0 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8013c76:	68fb      	ldr	r3, [r7, #12]
 8013c78:	2203      	movs	r2, #3
 8013c7a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8013c7e:	68fb      	ldr	r3, [r7, #12]
 8013c80:	2200      	movs	r2, #0
 8013c82:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8013c84:	68fb      	ldr	r3, [r7, #12]
 8013c86:	68ba      	ldr	r2, [r7, #8]
 8013c88:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8013c8a:	68fb      	ldr	r3, [r7, #12]
 8013c8c:	88fa      	ldrh	r2, [r7, #6]
 8013c8e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8013c90:	68fb      	ldr	r3, [r7, #12]
 8013c92:	88fa      	ldrh	r2, [r7, #6]
 8013c94:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8013c96:	68fb      	ldr	r3, [r7, #12]
 8013c98:	2200      	movs	r2, #0
 8013c9a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8013c9c:	68fb      	ldr	r3, [r7, #12]
 8013c9e:	2200      	movs	r2, #0
 8013ca0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8013ca4:	68fb      	ldr	r3, [r7, #12]
 8013ca6:	2200      	movs	r2, #0
 8013ca8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8013cac:	68fb      	ldr	r3, [r7, #12]
 8013cae:	2200      	movs	r2, #0
 8013cb0:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8013cb2:	68fb      	ldr	r3, [r7, #12]
 8013cb4:	2200      	movs	r2, #0
 8013cb6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8013cb8:	68fb      	ldr	r3, [r7, #12]
 8013cba:	689b      	ldr	r3, [r3, #8]
 8013cbc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8013cc0:	d10f      	bne.n	8013ce2 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8013cc2:	68fb      	ldr	r3, [r7, #12]
 8013cc4:	681b      	ldr	r3, [r3, #0]
 8013cc6:	681a      	ldr	r2, [r3, #0]
 8013cc8:	68fb      	ldr	r3, [r7, #12]
 8013cca:	681b      	ldr	r3, [r3, #0]
 8013ccc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8013cd0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8013cd2:	68fb      	ldr	r3, [r7, #12]
 8013cd4:	681b      	ldr	r3, [r3, #0]
 8013cd6:	681a      	ldr	r2, [r3, #0]
 8013cd8:	68fb      	ldr	r3, [r7, #12]
 8013cda:	681b      	ldr	r3, [r3, #0]
 8013cdc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8013ce0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8013ce2:	68fb      	ldr	r3, [r7, #12]
 8013ce4:	681b      	ldr	r3, [r3, #0]
 8013ce6:	681b      	ldr	r3, [r3, #0]
 8013ce8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8013cec:	2b40      	cmp	r3, #64	; 0x40
 8013cee:	d007      	beq.n	8013d00 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8013cf0:	68fb      	ldr	r3, [r7, #12]
 8013cf2:	681b      	ldr	r3, [r3, #0]
 8013cf4:	681a      	ldr	r2, [r3, #0]
 8013cf6:	68fb      	ldr	r3, [r7, #12]
 8013cf8:	681b      	ldr	r3, [r3, #0]
 8013cfa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8013cfe:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8013d00:	68fb      	ldr	r3, [r7, #12]
 8013d02:	68db      	ldr	r3, [r3, #12]
 8013d04:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8013d08:	d94b      	bls.n	8013da2 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8013d0a:	68fb      	ldr	r3, [r7, #12]
 8013d0c:	685b      	ldr	r3, [r3, #4]
 8013d0e:	2b00      	cmp	r3, #0
 8013d10:	d002      	beq.n	8013d18 <HAL_SPI_Transmit+0xfa>
 8013d12:	8afb      	ldrh	r3, [r7, #22]
 8013d14:	2b01      	cmp	r3, #1
 8013d16:	d13e      	bne.n	8013d96 <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8013d18:	68fb      	ldr	r3, [r7, #12]
 8013d1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013d1c:	881a      	ldrh	r2, [r3, #0]
 8013d1e:	68fb      	ldr	r3, [r7, #12]
 8013d20:	681b      	ldr	r3, [r3, #0]
 8013d22:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8013d24:	68fb      	ldr	r3, [r7, #12]
 8013d26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013d28:	1c9a      	adds	r2, r3, #2
 8013d2a:	68fb      	ldr	r3, [r7, #12]
 8013d2c:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8013d2e:	68fb      	ldr	r3, [r7, #12]
 8013d30:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8013d32:	b29b      	uxth	r3, r3
 8013d34:	3b01      	subs	r3, #1
 8013d36:	b29a      	uxth	r2, r3
 8013d38:	68fb      	ldr	r3, [r7, #12]
 8013d3a:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8013d3c:	e02b      	b.n	8013d96 <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8013d3e:	68fb      	ldr	r3, [r7, #12]
 8013d40:	681b      	ldr	r3, [r3, #0]
 8013d42:	689b      	ldr	r3, [r3, #8]
 8013d44:	f003 0302 	and.w	r3, r3, #2
 8013d48:	2b02      	cmp	r3, #2
 8013d4a:	d112      	bne.n	8013d72 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8013d4c:	68fb      	ldr	r3, [r7, #12]
 8013d4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013d50:	881a      	ldrh	r2, [r3, #0]
 8013d52:	68fb      	ldr	r3, [r7, #12]
 8013d54:	681b      	ldr	r3, [r3, #0]
 8013d56:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8013d58:	68fb      	ldr	r3, [r7, #12]
 8013d5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013d5c:	1c9a      	adds	r2, r3, #2
 8013d5e:	68fb      	ldr	r3, [r7, #12]
 8013d60:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8013d62:	68fb      	ldr	r3, [r7, #12]
 8013d64:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8013d66:	b29b      	uxth	r3, r3
 8013d68:	3b01      	subs	r3, #1
 8013d6a:	b29a      	uxth	r2, r3
 8013d6c:	68fb      	ldr	r3, [r7, #12]
 8013d6e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8013d70:	e011      	b.n	8013d96 <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8013d72:	f7fa fe61 	bl	800ea38 <HAL_GetTick>
 8013d76:	4602      	mov	r2, r0
 8013d78:	69bb      	ldr	r3, [r7, #24]
 8013d7a:	1ad3      	subs	r3, r2, r3
 8013d7c:	683a      	ldr	r2, [r7, #0]
 8013d7e:	429a      	cmp	r2, r3
 8013d80:	d803      	bhi.n	8013d8a <HAL_SPI_Transmit+0x16c>
 8013d82:	683b      	ldr	r3, [r7, #0]
 8013d84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013d88:	d102      	bne.n	8013d90 <HAL_SPI_Transmit+0x172>
 8013d8a:	683b      	ldr	r3, [r7, #0]
 8013d8c:	2b00      	cmp	r3, #0
 8013d8e:	d102      	bne.n	8013d96 <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8013d90:	2303      	movs	r3, #3
 8013d92:	77fb      	strb	r3, [r7, #31]
          goto error;
 8013d94:	e0a4      	b.n	8013ee0 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8013d96:	68fb      	ldr	r3, [r7, #12]
 8013d98:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8013d9a:	b29b      	uxth	r3, r3
 8013d9c:	2b00      	cmp	r3, #0
 8013d9e:	d1ce      	bne.n	8013d3e <HAL_SPI_Transmit+0x120>
 8013da0:	e07c      	b.n	8013e9c <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8013da2:	68fb      	ldr	r3, [r7, #12]
 8013da4:	685b      	ldr	r3, [r3, #4]
 8013da6:	2b00      	cmp	r3, #0
 8013da8:	d002      	beq.n	8013db0 <HAL_SPI_Transmit+0x192>
 8013daa:	8afb      	ldrh	r3, [r7, #22]
 8013dac:	2b01      	cmp	r3, #1
 8013dae:	d170      	bne.n	8013e92 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8013db0:	68fb      	ldr	r3, [r7, #12]
 8013db2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8013db4:	b29b      	uxth	r3, r3
 8013db6:	2b01      	cmp	r3, #1
 8013db8:	d912      	bls.n	8013de0 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8013dba:	68fb      	ldr	r3, [r7, #12]
 8013dbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013dbe:	881a      	ldrh	r2, [r3, #0]
 8013dc0:	68fb      	ldr	r3, [r7, #12]
 8013dc2:	681b      	ldr	r3, [r3, #0]
 8013dc4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8013dc6:	68fb      	ldr	r3, [r7, #12]
 8013dc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013dca:	1c9a      	adds	r2, r3, #2
 8013dcc:	68fb      	ldr	r3, [r7, #12]
 8013dce:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8013dd0:	68fb      	ldr	r3, [r7, #12]
 8013dd2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8013dd4:	b29b      	uxth	r3, r3
 8013dd6:	3b02      	subs	r3, #2
 8013dd8:	b29a      	uxth	r2, r3
 8013dda:	68fb      	ldr	r3, [r7, #12]
 8013ddc:	87da      	strh	r2, [r3, #62]	; 0x3e
 8013dde:	e058      	b.n	8013e92 <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8013de0:	68fb      	ldr	r3, [r7, #12]
 8013de2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8013de4:	68fb      	ldr	r3, [r7, #12]
 8013de6:	681b      	ldr	r3, [r3, #0]
 8013de8:	330c      	adds	r3, #12
 8013dea:	7812      	ldrb	r2, [r2, #0]
 8013dec:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8013dee:	68fb      	ldr	r3, [r7, #12]
 8013df0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013df2:	1c5a      	adds	r2, r3, #1
 8013df4:	68fb      	ldr	r3, [r7, #12]
 8013df6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8013df8:	68fb      	ldr	r3, [r7, #12]
 8013dfa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8013dfc:	b29b      	uxth	r3, r3
 8013dfe:	3b01      	subs	r3, #1
 8013e00:	b29a      	uxth	r2, r3
 8013e02:	68fb      	ldr	r3, [r7, #12]
 8013e04:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8013e06:	e044      	b.n	8013e92 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8013e08:	68fb      	ldr	r3, [r7, #12]
 8013e0a:	681b      	ldr	r3, [r3, #0]
 8013e0c:	689b      	ldr	r3, [r3, #8]
 8013e0e:	f003 0302 	and.w	r3, r3, #2
 8013e12:	2b02      	cmp	r3, #2
 8013e14:	d12b      	bne.n	8013e6e <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8013e16:	68fb      	ldr	r3, [r7, #12]
 8013e18:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8013e1a:	b29b      	uxth	r3, r3
 8013e1c:	2b01      	cmp	r3, #1
 8013e1e:	d912      	bls.n	8013e46 <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8013e20:	68fb      	ldr	r3, [r7, #12]
 8013e22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013e24:	881a      	ldrh	r2, [r3, #0]
 8013e26:	68fb      	ldr	r3, [r7, #12]
 8013e28:	681b      	ldr	r3, [r3, #0]
 8013e2a:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8013e2c:	68fb      	ldr	r3, [r7, #12]
 8013e2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013e30:	1c9a      	adds	r2, r3, #2
 8013e32:	68fb      	ldr	r3, [r7, #12]
 8013e34:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8013e36:	68fb      	ldr	r3, [r7, #12]
 8013e38:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8013e3a:	b29b      	uxth	r3, r3
 8013e3c:	3b02      	subs	r3, #2
 8013e3e:	b29a      	uxth	r2, r3
 8013e40:	68fb      	ldr	r3, [r7, #12]
 8013e42:	87da      	strh	r2, [r3, #62]	; 0x3e
 8013e44:	e025      	b.n	8013e92 <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8013e46:	68fb      	ldr	r3, [r7, #12]
 8013e48:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8013e4a:	68fb      	ldr	r3, [r7, #12]
 8013e4c:	681b      	ldr	r3, [r3, #0]
 8013e4e:	330c      	adds	r3, #12
 8013e50:	7812      	ldrb	r2, [r2, #0]
 8013e52:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8013e54:	68fb      	ldr	r3, [r7, #12]
 8013e56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013e58:	1c5a      	adds	r2, r3, #1
 8013e5a:	68fb      	ldr	r3, [r7, #12]
 8013e5c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8013e5e:	68fb      	ldr	r3, [r7, #12]
 8013e60:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8013e62:	b29b      	uxth	r3, r3
 8013e64:	3b01      	subs	r3, #1
 8013e66:	b29a      	uxth	r2, r3
 8013e68:	68fb      	ldr	r3, [r7, #12]
 8013e6a:	87da      	strh	r2, [r3, #62]	; 0x3e
 8013e6c:	e011      	b.n	8013e92 <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8013e6e:	f7fa fde3 	bl	800ea38 <HAL_GetTick>
 8013e72:	4602      	mov	r2, r0
 8013e74:	69bb      	ldr	r3, [r7, #24]
 8013e76:	1ad3      	subs	r3, r2, r3
 8013e78:	683a      	ldr	r2, [r7, #0]
 8013e7a:	429a      	cmp	r2, r3
 8013e7c:	d803      	bhi.n	8013e86 <HAL_SPI_Transmit+0x268>
 8013e7e:	683b      	ldr	r3, [r7, #0]
 8013e80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013e84:	d102      	bne.n	8013e8c <HAL_SPI_Transmit+0x26e>
 8013e86:	683b      	ldr	r3, [r7, #0]
 8013e88:	2b00      	cmp	r3, #0
 8013e8a:	d102      	bne.n	8013e92 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8013e8c:	2303      	movs	r3, #3
 8013e8e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8013e90:	e026      	b.n	8013ee0 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8013e92:	68fb      	ldr	r3, [r7, #12]
 8013e94:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8013e96:	b29b      	uxth	r3, r3
 8013e98:	2b00      	cmp	r3, #0
 8013e9a:	d1b5      	bne.n	8013e08 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8013e9c:	69ba      	ldr	r2, [r7, #24]
 8013e9e:	6839      	ldr	r1, [r7, #0]
 8013ea0:	68f8      	ldr	r0, [r7, #12]
 8013ea2:	f000 fce3 	bl	801486c <SPI_EndRxTxTransaction>
 8013ea6:	4603      	mov	r3, r0
 8013ea8:	2b00      	cmp	r3, #0
 8013eaa:	d002      	beq.n	8013eb2 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8013eac:	68fb      	ldr	r3, [r7, #12]
 8013eae:	2220      	movs	r2, #32
 8013eb0:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8013eb2:	68fb      	ldr	r3, [r7, #12]
 8013eb4:	689b      	ldr	r3, [r3, #8]
 8013eb6:	2b00      	cmp	r3, #0
 8013eb8:	d10a      	bne.n	8013ed0 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8013eba:	2300      	movs	r3, #0
 8013ebc:	613b      	str	r3, [r7, #16]
 8013ebe:	68fb      	ldr	r3, [r7, #12]
 8013ec0:	681b      	ldr	r3, [r3, #0]
 8013ec2:	68db      	ldr	r3, [r3, #12]
 8013ec4:	613b      	str	r3, [r7, #16]
 8013ec6:	68fb      	ldr	r3, [r7, #12]
 8013ec8:	681b      	ldr	r3, [r3, #0]
 8013eca:	689b      	ldr	r3, [r3, #8]
 8013ecc:	613b      	str	r3, [r7, #16]
 8013ece:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8013ed0:	68fb      	ldr	r3, [r7, #12]
 8013ed2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8013ed4:	2b00      	cmp	r3, #0
 8013ed6:	d002      	beq.n	8013ede <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8013ed8:	2301      	movs	r3, #1
 8013eda:	77fb      	strb	r3, [r7, #31]
 8013edc:	e000      	b.n	8013ee0 <HAL_SPI_Transmit+0x2c2>
  }

error:
 8013ede:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8013ee0:	68fb      	ldr	r3, [r7, #12]
 8013ee2:	2201      	movs	r2, #1
 8013ee4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8013ee8:	68fb      	ldr	r3, [r7, #12]
 8013eea:	2200      	movs	r2, #0
 8013eec:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8013ef0:	7ffb      	ldrb	r3, [r7, #31]
}
 8013ef2:	4618      	mov	r0, r3
 8013ef4:	3720      	adds	r7, #32
 8013ef6:	46bd      	mov	sp, r7
 8013ef8:	bd80      	pop	{r7, pc}

08013efa <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8013efa:	b580      	push	{r7, lr}
 8013efc:	b088      	sub	sp, #32
 8013efe:	af02      	add	r7, sp, #8
 8013f00:	60f8      	str	r0, [r7, #12]
 8013f02:	60b9      	str	r1, [r7, #8]
 8013f04:	603b      	str	r3, [r7, #0]
 8013f06:	4613      	mov	r3, r2
 8013f08:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8013f0a:	2300      	movs	r3, #0
 8013f0c:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8013f0e:	68fb      	ldr	r3, [r7, #12]
 8013f10:	685b      	ldr	r3, [r3, #4]
 8013f12:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8013f16:	d112      	bne.n	8013f3e <HAL_SPI_Receive+0x44>
 8013f18:	68fb      	ldr	r3, [r7, #12]
 8013f1a:	689b      	ldr	r3, [r3, #8]
 8013f1c:	2b00      	cmp	r3, #0
 8013f1e:	d10e      	bne.n	8013f3e <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8013f20:	68fb      	ldr	r3, [r7, #12]
 8013f22:	2204      	movs	r2, #4
 8013f24:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8013f28:	88fa      	ldrh	r2, [r7, #6]
 8013f2a:	683b      	ldr	r3, [r7, #0]
 8013f2c:	9300      	str	r3, [sp, #0]
 8013f2e:	4613      	mov	r3, r2
 8013f30:	68ba      	ldr	r2, [r7, #8]
 8013f32:	68b9      	ldr	r1, [r7, #8]
 8013f34:	68f8      	ldr	r0, [r7, #12]
 8013f36:	f000 f910 	bl	801415a <HAL_SPI_TransmitReceive>
 8013f3a:	4603      	mov	r3, r0
 8013f3c:	e109      	b.n	8014152 <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8013f3e:	68fb      	ldr	r3, [r7, #12]
 8013f40:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8013f44:	2b01      	cmp	r3, #1
 8013f46:	d101      	bne.n	8013f4c <HAL_SPI_Receive+0x52>
 8013f48:	2302      	movs	r3, #2
 8013f4a:	e102      	b.n	8014152 <HAL_SPI_Receive+0x258>
 8013f4c:	68fb      	ldr	r3, [r7, #12]
 8013f4e:	2201      	movs	r2, #1
 8013f50:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8013f54:	f7fa fd70 	bl	800ea38 <HAL_GetTick>
 8013f58:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8013f5a:	68fb      	ldr	r3, [r7, #12]
 8013f5c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8013f60:	b2db      	uxtb	r3, r3
 8013f62:	2b01      	cmp	r3, #1
 8013f64:	d002      	beq.n	8013f6c <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8013f66:	2302      	movs	r3, #2
 8013f68:	75fb      	strb	r3, [r7, #23]
    goto error;
 8013f6a:	e0e9      	b.n	8014140 <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 8013f6c:	68bb      	ldr	r3, [r7, #8]
 8013f6e:	2b00      	cmp	r3, #0
 8013f70:	d002      	beq.n	8013f78 <HAL_SPI_Receive+0x7e>
 8013f72:	88fb      	ldrh	r3, [r7, #6]
 8013f74:	2b00      	cmp	r3, #0
 8013f76:	d102      	bne.n	8013f7e <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8013f78:	2301      	movs	r3, #1
 8013f7a:	75fb      	strb	r3, [r7, #23]
    goto error;
 8013f7c:	e0e0      	b.n	8014140 <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8013f7e:	68fb      	ldr	r3, [r7, #12]
 8013f80:	2204      	movs	r2, #4
 8013f82:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8013f86:	68fb      	ldr	r3, [r7, #12]
 8013f88:	2200      	movs	r2, #0
 8013f8a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8013f8c:	68fb      	ldr	r3, [r7, #12]
 8013f8e:	68ba      	ldr	r2, [r7, #8]
 8013f90:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8013f92:	68fb      	ldr	r3, [r7, #12]
 8013f94:	88fa      	ldrh	r2, [r7, #6]
 8013f96:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8013f9a:	68fb      	ldr	r3, [r7, #12]
 8013f9c:	88fa      	ldrh	r2, [r7, #6]
 8013f9e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8013fa2:	68fb      	ldr	r3, [r7, #12]
 8013fa4:	2200      	movs	r2, #0
 8013fa6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8013fa8:	68fb      	ldr	r3, [r7, #12]
 8013faa:	2200      	movs	r2, #0
 8013fac:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8013fae:	68fb      	ldr	r3, [r7, #12]
 8013fb0:	2200      	movs	r2, #0
 8013fb2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8013fb4:	68fb      	ldr	r3, [r7, #12]
 8013fb6:	2200      	movs	r2, #0
 8013fb8:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8013fba:	68fb      	ldr	r3, [r7, #12]
 8013fbc:	2200      	movs	r2, #0
 8013fbe:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8013fc0:	68fb      	ldr	r3, [r7, #12]
 8013fc2:	68db      	ldr	r3, [r3, #12]
 8013fc4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8013fc8:	d908      	bls.n	8013fdc <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8013fca:	68fb      	ldr	r3, [r7, #12]
 8013fcc:	681b      	ldr	r3, [r3, #0]
 8013fce:	685a      	ldr	r2, [r3, #4]
 8013fd0:	68fb      	ldr	r3, [r7, #12]
 8013fd2:	681b      	ldr	r3, [r3, #0]
 8013fd4:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8013fd8:	605a      	str	r2, [r3, #4]
 8013fda:	e007      	b.n	8013fec <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8013fdc:	68fb      	ldr	r3, [r7, #12]
 8013fde:	681b      	ldr	r3, [r3, #0]
 8013fe0:	685a      	ldr	r2, [r3, #4]
 8013fe2:	68fb      	ldr	r3, [r7, #12]
 8013fe4:	681b      	ldr	r3, [r3, #0]
 8013fe6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8013fea:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8013fec:	68fb      	ldr	r3, [r7, #12]
 8013fee:	689b      	ldr	r3, [r3, #8]
 8013ff0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8013ff4:	d10f      	bne.n	8014016 <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8013ff6:	68fb      	ldr	r3, [r7, #12]
 8013ff8:	681b      	ldr	r3, [r3, #0]
 8013ffa:	681a      	ldr	r2, [r3, #0]
 8013ffc:	68fb      	ldr	r3, [r7, #12]
 8013ffe:	681b      	ldr	r3, [r3, #0]
 8014000:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8014004:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8014006:	68fb      	ldr	r3, [r7, #12]
 8014008:	681b      	ldr	r3, [r3, #0]
 801400a:	681a      	ldr	r2, [r3, #0]
 801400c:	68fb      	ldr	r3, [r7, #12]
 801400e:	681b      	ldr	r3, [r3, #0]
 8014010:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8014014:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8014016:	68fb      	ldr	r3, [r7, #12]
 8014018:	681b      	ldr	r3, [r3, #0]
 801401a:	681b      	ldr	r3, [r3, #0]
 801401c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8014020:	2b40      	cmp	r3, #64	; 0x40
 8014022:	d007      	beq.n	8014034 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8014024:	68fb      	ldr	r3, [r7, #12]
 8014026:	681b      	ldr	r3, [r3, #0]
 8014028:	681a      	ldr	r2, [r3, #0]
 801402a:	68fb      	ldr	r3, [r7, #12]
 801402c:	681b      	ldr	r3, [r3, #0]
 801402e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8014032:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8014034:	68fb      	ldr	r3, [r7, #12]
 8014036:	68db      	ldr	r3, [r3, #12]
 8014038:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 801403c:	d867      	bhi.n	801410e <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 801403e:	e030      	b.n	80140a2 <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8014040:	68fb      	ldr	r3, [r7, #12]
 8014042:	681b      	ldr	r3, [r3, #0]
 8014044:	689b      	ldr	r3, [r3, #8]
 8014046:	f003 0301 	and.w	r3, r3, #1
 801404a:	2b01      	cmp	r3, #1
 801404c:	d117      	bne.n	801407e <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 801404e:	68fb      	ldr	r3, [r7, #12]
 8014050:	681b      	ldr	r3, [r3, #0]
 8014052:	f103 020c 	add.w	r2, r3, #12
 8014056:	68fb      	ldr	r3, [r7, #12]
 8014058:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801405a:	7812      	ldrb	r2, [r2, #0]
 801405c:	b2d2      	uxtb	r2, r2
 801405e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8014060:	68fb      	ldr	r3, [r7, #12]
 8014062:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014064:	1c5a      	adds	r2, r3, #1
 8014066:	68fb      	ldr	r3, [r7, #12]
 8014068:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 801406a:	68fb      	ldr	r3, [r7, #12]
 801406c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8014070:	b29b      	uxth	r3, r3
 8014072:	3b01      	subs	r3, #1
 8014074:	b29a      	uxth	r2, r3
 8014076:	68fb      	ldr	r3, [r7, #12]
 8014078:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 801407c:	e011      	b.n	80140a2 <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 801407e:	f7fa fcdb 	bl	800ea38 <HAL_GetTick>
 8014082:	4602      	mov	r2, r0
 8014084:	693b      	ldr	r3, [r7, #16]
 8014086:	1ad3      	subs	r3, r2, r3
 8014088:	683a      	ldr	r2, [r7, #0]
 801408a:	429a      	cmp	r2, r3
 801408c:	d803      	bhi.n	8014096 <HAL_SPI_Receive+0x19c>
 801408e:	683b      	ldr	r3, [r7, #0]
 8014090:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014094:	d102      	bne.n	801409c <HAL_SPI_Receive+0x1a2>
 8014096:	683b      	ldr	r3, [r7, #0]
 8014098:	2b00      	cmp	r3, #0
 801409a:	d102      	bne.n	80140a2 <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 801409c:	2303      	movs	r3, #3
 801409e:	75fb      	strb	r3, [r7, #23]
          goto error;
 80140a0:	e04e      	b.n	8014140 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 80140a2:	68fb      	ldr	r3, [r7, #12]
 80140a4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80140a8:	b29b      	uxth	r3, r3
 80140aa:	2b00      	cmp	r3, #0
 80140ac:	d1c8      	bne.n	8014040 <HAL_SPI_Receive+0x146>
 80140ae:	e034      	b.n	801411a <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80140b0:	68fb      	ldr	r3, [r7, #12]
 80140b2:	681b      	ldr	r3, [r3, #0]
 80140b4:	689b      	ldr	r3, [r3, #8]
 80140b6:	f003 0301 	and.w	r3, r3, #1
 80140ba:	2b01      	cmp	r3, #1
 80140bc:	d115      	bne.n	80140ea <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80140be:	68fb      	ldr	r3, [r7, #12]
 80140c0:	681b      	ldr	r3, [r3, #0]
 80140c2:	68da      	ldr	r2, [r3, #12]
 80140c4:	68fb      	ldr	r3, [r7, #12]
 80140c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80140c8:	b292      	uxth	r2, r2
 80140ca:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80140cc:	68fb      	ldr	r3, [r7, #12]
 80140ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80140d0:	1c9a      	adds	r2, r3, #2
 80140d2:	68fb      	ldr	r3, [r7, #12]
 80140d4:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80140d6:	68fb      	ldr	r3, [r7, #12]
 80140d8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80140dc:	b29b      	uxth	r3, r3
 80140de:	3b01      	subs	r3, #1
 80140e0:	b29a      	uxth	r2, r3
 80140e2:	68fb      	ldr	r3, [r7, #12]
 80140e4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 80140e8:	e011      	b.n	801410e <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80140ea:	f7fa fca5 	bl	800ea38 <HAL_GetTick>
 80140ee:	4602      	mov	r2, r0
 80140f0:	693b      	ldr	r3, [r7, #16]
 80140f2:	1ad3      	subs	r3, r2, r3
 80140f4:	683a      	ldr	r2, [r7, #0]
 80140f6:	429a      	cmp	r2, r3
 80140f8:	d803      	bhi.n	8014102 <HAL_SPI_Receive+0x208>
 80140fa:	683b      	ldr	r3, [r7, #0]
 80140fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014100:	d102      	bne.n	8014108 <HAL_SPI_Receive+0x20e>
 8014102:	683b      	ldr	r3, [r7, #0]
 8014104:	2b00      	cmp	r3, #0
 8014106:	d102      	bne.n	801410e <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 8014108:	2303      	movs	r3, #3
 801410a:	75fb      	strb	r3, [r7, #23]
          goto error;
 801410c:	e018      	b.n	8014140 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 801410e:	68fb      	ldr	r3, [r7, #12]
 8014110:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8014114:	b29b      	uxth	r3, r3
 8014116:	2b00      	cmp	r3, #0
 8014118:	d1ca      	bne.n	80140b0 <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 801411a:	693a      	ldr	r2, [r7, #16]
 801411c:	6839      	ldr	r1, [r7, #0]
 801411e:	68f8      	ldr	r0, [r7, #12]
 8014120:	f000 fb4c 	bl	80147bc <SPI_EndRxTransaction>
 8014124:	4603      	mov	r3, r0
 8014126:	2b00      	cmp	r3, #0
 8014128:	d002      	beq.n	8014130 <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 801412a:	68fb      	ldr	r3, [r7, #12]
 801412c:	2220      	movs	r2, #32
 801412e:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8014130:	68fb      	ldr	r3, [r7, #12]
 8014132:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8014134:	2b00      	cmp	r3, #0
 8014136:	d002      	beq.n	801413e <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 8014138:	2301      	movs	r3, #1
 801413a:	75fb      	strb	r3, [r7, #23]
 801413c:	e000      	b.n	8014140 <HAL_SPI_Receive+0x246>
  }

error :
 801413e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8014140:	68fb      	ldr	r3, [r7, #12]
 8014142:	2201      	movs	r2, #1
 8014144:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8014148:	68fb      	ldr	r3, [r7, #12]
 801414a:	2200      	movs	r2, #0
 801414c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8014150:	7dfb      	ldrb	r3, [r7, #23]
}
 8014152:	4618      	mov	r0, r3
 8014154:	3718      	adds	r7, #24
 8014156:	46bd      	mov	sp, r7
 8014158:	bd80      	pop	{r7, pc}

0801415a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 801415a:	b580      	push	{r7, lr}
 801415c:	b08a      	sub	sp, #40	; 0x28
 801415e:	af00      	add	r7, sp, #0
 8014160:	60f8      	str	r0, [r7, #12]
 8014162:	60b9      	str	r1, [r7, #8]
 8014164:	607a      	str	r2, [r7, #4]
 8014166:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8014168:	2301      	movs	r3, #1
 801416a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 801416c:	2300      	movs	r3, #0
 801416e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8014172:	68fb      	ldr	r3, [r7, #12]
 8014174:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8014178:	2b01      	cmp	r3, #1
 801417a:	d101      	bne.n	8014180 <HAL_SPI_TransmitReceive+0x26>
 801417c:	2302      	movs	r3, #2
 801417e:	e1fb      	b.n	8014578 <HAL_SPI_TransmitReceive+0x41e>
 8014180:	68fb      	ldr	r3, [r7, #12]
 8014182:	2201      	movs	r2, #1
 8014184:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8014188:	f7fa fc56 	bl	800ea38 <HAL_GetTick>
 801418c:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 801418e:	68fb      	ldr	r3, [r7, #12]
 8014190:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8014194:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8014196:	68fb      	ldr	r3, [r7, #12]
 8014198:	685b      	ldr	r3, [r3, #4]
 801419a:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 801419c:	887b      	ldrh	r3, [r7, #2]
 801419e:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 80141a0:	887b      	ldrh	r3, [r7, #2]
 80141a2:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80141a4:	7efb      	ldrb	r3, [r7, #27]
 80141a6:	2b01      	cmp	r3, #1
 80141a8:	d00e      	beq.n	80141c8 <HAL_SPI_TransmitReceive+0x6e>
 80141aa:	697b      	ldr	r3, [r7, #20]
 80141ac:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80141b0:	d106      	bne.n	80141c0 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80141b2:	68fb      	ldr	r3, [r7, #12]
 80141b4:	689b      	ldr	r3, [r3, #8]
 80141b6:	2b00      	cmp	r3, #0
 80141b8:	d102      	bne.n	80141c0 <HAL_SPI_TransmitReceive+0x66>
 80141ba:	7efb      	ldrb	r3, [r7, #27]
 80141bc:	2b04      	cmp	r3, #4
 80141be:	d003      	beq.n	80141c8 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 80141c0:	2302      	movs	r3, #2
 80141c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80141c6:	e1cd      	b.n	8014564 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80141c8:	68bb      	ldr	r3, [r7, #8]
 80141ca:	2b00      	cmp	r3, #0
 80141cc:	d005      	beq.n	80141da <HAL_SPI_TransmitReceive+0x80>
 80141ce:	687b      	ldr	r3, [r7, #4]
 80141d0:	2b00      	cmp	r3, #0
 80141d2:	d002      	beq.n	80141da <HAL_SPI_TransmitReceive+0x80>
 80141d4:	887b      	ldrh	r3, [r7, #2]
 80141d6:	2b00      	cmp	r3, #0
 80141d8:	d103      	bne.n	80141e2 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 80141da:	2301      	movs	r3, #1
 80141dc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80141e0:	e1c0      	b.n	8014564 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80141e2:	68fb      	ldr	r3, [r7, #12]
 80141e4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80141e8:	b2db      	uxtb	r3, r3
 80141ea:	2b04      	cmp	r3, #4
 80141ec:	d003      	beq.n	80141f6 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80141ee:	68fb      	ldr	r3, [r7, #12]
 80141f0:	2205      	movs	r2, #5
 80141f2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80141f6:	68fb      	ldr	r3, [r7, #12]
 80141f8:	2200      	movs	r2, #0
 80141fa:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80141fc:	68fb      	ldr	r3, [r7, #12]
 80141fe:	687a      	ldr	r2, [r7, #4]
 8014200:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8014202:	68fb      	ldr	r3, [r7, #12]
 8014204:	887a      	ldrh	r2, [r7, #2]
 8014206:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 801420a:	68fb      	ldr	r3, [r7, #12]
 801420c:	887a      	ldrh	r2, [r7, #2]
 801420e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8014212:	68fb      	ldr	r3, [r7, #12]
 8014214:	68ba      	ldr	r2, [r7, #8]
 8014216:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8014218:	68fb      	ldr	r3, [r7, #12]
 801421a:	887a      	ldrh	r2, [r7, #2]
 801421c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 801421e:	68fb      	ldr	r3, [r7, #12]
 8014220:	887a      	ldrh	r2, [r7, #2]
 8014222:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8014224:	68fb      	ldr	r3, [r7, #12]
 8014226:	2200      	movs	r2, #0
 8014228:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 801422a:	68fb      	ldr	r3, [r7, #12]
 801422c:	2200      	movs	r2, #0
 801422e:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8014230:	68fb      	ldr	r3, [r7, #12]
 8014232:	68db      	ldr	r3, [r3, #12]
 8014234:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8014238:	d802      	bhi.n	8014240 <HAL_SPI_TransmitReceive+0xe6>
 801423a:	8a3b      	ldrh	r3, [r7, #16]
 801423c:	2b01      	cmp	r3, #1
 801423e:	d908      	bls.n	8014252 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8014240:	68fb      	ldr	r3, [r7, #12]
 8014242:	681b      	ldr	r3, [r3, #0]
 8014244:	685a      	ldr	r2, [r3, #4]
 8014246:	68fb      	ldr	r3, [r7, #12]
 8014248:	681b      	ldr	r3, [r3, #0]
 801424a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 801424e:	605a      	str	r2, [r3, #4]
 8014250:	e007      	b.n	8014262 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8014252:	68fb      	ldr	r3, [r7, #12]
 8014254:	681b      	ldr	r3, [r3, #0]
 8014256:	685a      	ldr	r2, [r3, #4]
 8014258:	68fb      	ldr	r3, [r7, #12]
 801425a:	681b      	ldr	r3, [r3, #0]
 801425c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8014260:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8014262:	68fb      	ldr	r3, [r7, #12]
 8014264:	681b      	ldr	r3, [r3, #0]
 8014266:	681b      	ldr	r3, [r3, #0]
 8014268:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801426c:	2b40      	cmp	r3, #64	; 0x40
 801426e:	d007      	beq.n	8014280 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8014270:	68fb      	ldr	r3, [r7, #12]
 8014272:	681b      	ldr	r3, [r3, #0]
 8014274:	681a      	ldr	r2, [r3, #0]
 8014276:	68fb      	ldr	r3, [r7, #12]
 8014278:	681b      	ldr	r3, [r3, #0]
 801427a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 801427e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8014280:	68fb      	ldr	r3, [r7, #12]
 8014282:	68db      	ldr	r3, [r3, #12]
 8014284:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8014288:	d97c      	bls.n	8014384 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 801428a:	68fb      	ldr	r3, [r7, #12]
 801428c:	685b      	ldr	r3, [r3, #4]
 801428e:	2b00      	cmp	r3, #0
 8014290:	d002      	beq.n	8014298 <HAL_SPI_TransmitReceive+0x13e>
 8014292:	8a7b      	ldrh	r3, [r7, #18]
 8014294:	2b01      	cmp	r3, #1
 8014296:	d169      	bne.n	801436c <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8014298:	68fb      	ldr	r3, [r7, #12]
 801429a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801429c:	881a      	ldrh	r2, [r3, #0]
 801429e:	68fb      	ldr	r3, [r7, #12]
 80142a0:	681b      	ldr	r3, [r3, #0]
 80142a2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80142a4:	68fb      	ldr	r3, [r7, #12]
 80142a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80142a8:	1c9a      	adds	r2, r3, #2
 80142aa:	68fb      	ldr	r3, [r7, #12]
 80142ac:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80142ae:	68fb      	ldr	r3, [r7, #12]
 80142b0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80142b2:	b29b      	uxth	r3, r3
 80142b4:	3b01      	subs	r3, #1
 80142b6:	b29a      	uxth	r2, r3
 80142b8:	68fb      	ldr	r3, [r7, #12]
 80142ba:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80142bc:	e056      	b.n	801436c <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80142be:	68fb      	ldr	r3, [r7, #12]
 80142c0:	681b      	ldr	r3, [r3, #0]
 80142c2:	689b      	ldr	r3, [r3, #8]
 80142c4:	f003 0302 	and.w	r3, r3, #2
 80142c8:	2b02      	cmp	r3, #2
 80142ca:	d11b      	bne.n	8014304 <HAL_SPI_TransmitReceive+0x1aa>
 80142cc:	68fb      	ldr	r3, [r7, #12]
 80142ce:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80142d0:	b29b      	uxth	r3, r3
 80142d2:	2b00      	cmp	r3, #0
 80142d4:	d016      	beq.n	8014304 <HAL_SPI_TransmitReceive+0x1aa>
 80142d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80142d8:	2b01      	cmp	r3, #1
 80142da:	d113      	bne.n	8014304 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80142dc:	68fb      	ldr	r3, [r7, #12]
 80142de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80142e0:	881a      	ldrh	r2, [r3, #0]
 80142e2:	68fb      	ldr	r3, [r7, #12]
 80142e4:	681b      	ldr	r3, [r3, #0]
 80142e6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80142e8:	68fb      	ldr	r3, [r7, #12]
 80142ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80142ec:	1c9a      	adds	r2, r3, #2
 80142ee:	68fb      	ldr	r3, [r7, #12]
 80142f0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80142f2:	68fb      	ldr	r3, [r7, #12]
 80142f4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80142f6:	b29b      	uxth	r3, r3
 80142f8:	3b01      	subs	r3, #1
 80142fa:	b29a      	uxth	r2, r3
 80142fc:	68fb      	ldr	r3, [r7, #12]
 80142fe:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8014300:	2300      	movs	r3, #0
 8014302:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8014304:	68fb      	ldr	r3, [r7, #12]
 8014306:	681b      	ldr	r3, [r3, #0]
 8014308:	689b      	ldr	r3, [r3, #8]
 801430a:	f003 0301 	and.w	r3, r3, #1
 801430e:	2b01      	cmp	r3, #1
 8014310:	d11c      	bne.n	801434c <HAL_SPI_TransmitReceive+0x1f2>
 8014312:	68fb      	ldr	r3, [r7, #12]
 8014314:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8014318:	b29b      	uxth	r3, r3
 801431a:	2b00      	cmp	r3, #0
 801431c:	d016      	beq.n	801434c <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 801431e:	68fb      	ldr	r3, [r7, #12]
 8014320:	681b      	ldr	r3, [r3, #0]
 8014322:	68da      	ldr	r2, [r3, #12]
 8014324:	68fb      	ldr	r3, [r7, #12]
 8014326:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014328:	b292      	uxth	r2, r2
 801432a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 801432c:	68fb      	ldr	r3, [r7, #12]
 801432e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014330:	1c9a      	adds	r2, r3, #2
 8014332:	68fb      	ldr	r3, [r7, #12]
 8014334:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8014336:	68fb      	ldr	r3, [r7, #12]
 8014338:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 801433c:	b29b      	uxth	r3, r3
 801433e:	3b01      	subs	r3, #1
 8014340:	b29a      	uxth	r2, r3
 8014342:	68fb      	ldr	r3, [r7, #12]
 8014344:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8014348:	2301      	movs	r3, #1
 801434a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 801434c:	f7fa fb74 	bl	800ea38 <HAL_GetTick>
 8014350:	4602      	mov	r2, r0
 8014352:	69fb      	ldr	r3, [r7, #28]
 8014354:	1ad3      	subs	r3, r2, r3
 8014356:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014358:	429a      	cmp	r2, r3
 801435a:	d807      	bhi.n	801436c <HAL_SPI_TransmitReceive+0x212>
 801435c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801435e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014362:	d003      	beq.n	801436c <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8014364:	2303      	movs	r3, #3
 8014366:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 801436a:	e0fb      	b.n	8014564 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 801436c:	68fb      	ldr	r3, [r7, #12]
 801436e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8014370:	b29b      	uxth	r3, r3
 8014372:	2b00      	cmp	r3, #0
 8014374:	d1a3      	bne.n	80142be <HAL_SPI_TransmitReceive+0x164>
 8014376:	68fb      	ldr	r3, [r7, #12]
 8014378:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 801437c:	b29b      	uxth	r3, r3
 801437e:	2b00      	cmp	r3, #0
 8014380:	d19d      	bne.n	80142be <HAL_SPI_TransmitReceive+0x164>
 8014382:	e0df      	b.n	8014544 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8014384:	68fb      	ldr	r3, [r7, #12]
 8014386:	685b      	ldr	r3, [r3, #4]
 8014388:	2b00      	cmp	r3, #0
 801438a:	d003      	beq.n	8014394 <HAL_SPI_TransmitReceive+0x23a>
 801438c:	8a7b      	ldrh	r3, [r7, #18]
 801438e:	2b01      	cmp	r3, #1
 8014390:	f040 80cb 	bne.w	801452a <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8014394:	68fb      	ldr	r3, [r7, #12]
 8014396:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8014398:	b29b      	uxth	r3, r3
 801439a:	2b01      	cmp	r3, #1
 801439c:	d912      	bls.n	80143c4 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 801439e:	68fb      	ldr	r3, [r7, #12]
 80143a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80143a2:	881a      	ldrh	r2, [r3, #0]
 80143a4:	68fb      	ldr	r3, [r7, #12]
 80143a6:	681b      	ldr	r3, [r3, #0]
 80143a8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80143aa:	68fb      	ldr	r3, [r7, #12]
 80143ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80143ae:	1c9a      	adds	r2, r3, #2
 80143b0:	68fb      	ldr	r3, [r7, #12]
 80143b2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80143b4:	68fb      	ldr	r3, [r7, #12]
 80143b6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80143b8:	b29b      	uxth	r3, r3
 80143ba:	3b02      	subs	r3, #2
 80143bc:	b29a      	uxth	r2, r3
 80143be:	68fb      	ldr	r3, [r7, #12]
 80143c0:	87da      	strh	r2, [r3, #62]	; 0x3e
 80143c2:	e0b2      	b.n	801452a <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80143c4:	68fb      	ldr	r3, [r7, #12]
 80143c6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80143c8:	68fb      	ldr	r3, [r7, #12]
 80143ca:	681b      	ldr	r3, [r3, #0]
 80143cc:	330c      	adds	r3, #12
 80143ce:	7812      	ldrb	r2, [r2, #0]
 80143d0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80143d2:	68fb      	ldr	r3, [r7, #12]
 80143d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80143d6:	1c5a      	adds	r2, r3, #1
 80143d8:	68fb      	ldr	r3, [r7, #12]
 80143da:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80143dc:	68fb      	ldr	r3, [r7, #12]
 80143de:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80143e0:	b29b      	uxth	r3, r3
 80143e2:	3b01      	subs	r3, #1
 80143e4:	b29a      	uxth	r2, r3
 80143e6:	68fb      	ldr	r3, [r7, #12]
 80143e8:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80143ea:	e09e      	b.n	801452a <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80143ec:	68fb      	ldr	r3, [r7, #12]
 80143ee:	681b      	ldr	r3, [r3, #0]
 80143f0:	689b      	ldr	r3, [r3, #8]
 80143f2:	f003 0302 	and.w	r3, r3, #2
 80143f6:	2b02      	cmp	r3, #2
 80143f8:	d134      	bne.n	8014464 <HAL_SPI_TransmitReceive+0x30a>
 80143fa:	68fb      	ldr	r3, [r7, #12]
 80143fc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80143fe:	b29b      	uxth	r3, r3
 8014400:	2b00      	cmp	r3, #0
 8014402:	d02f      	beq.n	8014464 <HAL_SPI_TransmitReceive+0x30a>
 8014404:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014406:	2b01      	cmp	r3, #1
 8014408:	d12c      	bne.n	8014464 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 801440a:	68fb      	ldr	r3, [r7, #12]
 801440c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801440e:	b29b      	uxth	r3, r3
 8014410:	2b01      	cmp	r3, #1
 8014412:	d912      	bls.n	801443a <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8014414:	68fb      	ldr	r3, [r7, #12]
 8014416:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014418:	881a      	ldrh	r2, [r3, #0]
 801441a:	68fb      	ldr	r3, [r7, #12]
 801441c:	681b      	ldr	r3, [r3, #0]
 801441e:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8014420:	68fb      	ldr	r3, [r7, #12]
 8014422:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014424:	1c9a      	adds	r2, r3, #2
 8014426:	68fb      	ldr	r3, [r7, #12]
 8014428:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 801442a:	68fb      	ldr	r3, [r7, #12]
 801442c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801442e:	b29b      	uxth	r3, r3
 8014430:	3b02      	subs	r3, #2
 8014432:	b29a      	uxth	r2, r3
 8014434:	68fb      	ldr	r3, [r7, #12]
 8014436:	87da      	strh	r2, [r3, #62]	; 0x3e
 8014438:	e012      	b.n	8014460 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 801443a:	68fb      	ldr	r3, [r7, #12]
 801443c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801443e:	68fb      	ldr	r3, [r7, #12]
 8014440:	681b      	ldr	r3, [r3, #0]
 8014442:	330c      	adds	r3, #12
 8014444:	7812      	ldrb	r2, [r2, #0]
 8014446:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8014448:	68fb      	ldr	r3, [r7, #12]
 801444a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801444c:	1c5a      	adds	r2, r3, #1
 801444e:	68fb      	ldr	r3, [r7, #12]
 8014450:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8014452:	68fb      	ldr	r3, [r7, #12]
 8014454:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8014456:	b29b      	uxth	r3, r3
 8014458:	3b01      	subs	r3, #1
 801445a:	b29a      	uxth	r2, r3
 801445c:	68fb      	ldr	r3, [r7, #12]
 801445e:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8014460:	2300      	movs	r3, #0
 8014462:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8014464:	68fb      	ldr	r3, [r7, #12]
 8014466:	681b      	ldr	r3, [r3, #0]
 8014468:	689b      	ldr	r3, [r3, #8]
 801446a:	f003 0301 	and.w	r3, r3, #1
 801446e:	2b01      	cmp	r3, #1
 8014470:	d148      	bne.n	8014504 <HAL_SPI_TransmitReceive+0x3aa>
 8014472:	68fb      	ldr	r3, [r7, #12]
 8014474:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8014478:	b29b      	uxth	r3, r3
 801447a:	2b00      	cmp	r3, #0
 801447c:	d042      	beq.n	8014504 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 801447e:	68fb      	ldr	r3, [r7, #12]
 8014480:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8014484:	b29b      	uxth	r3, r3
 8014486:	2b01      	cmp	r3, #1
 8014488:	d923      	bls.n	80144d2 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 801448a:	68fb      	ldr	r3, [r7, #12]
 801448c:	681b      	ldr	r3, [r3, #0]
 801448e:	68da      	ldr	r2, [r3, #12]
 8014490:	68fb      	ldr	r3, [r7, #12]
 8014492:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014494:	b292      	uxth	r2, r2
 8014496:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8014498:	68fb      	ldr	r3, [r7, #12]
 801449a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801449c:	1c9a      	adds	r2, r3, #2
 801449e:	68fb      	ldr	r3, [r7, #12]
 80144a0:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 80144a2:	68fb      	ldr	r3, [r7, #12]
 80144a4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80144a8:	b29b      	uxth	r3, r3
 80144aa:	3b02      	subs	r3, #2
 80144ac:	b29a      	uxth	r2, r3
 80144ae:	68fb      	ldr	r3, [r7, #12]
 80144b0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 80144b4:	68fb      	ldr	r3, [r7, #12]
 80144b6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80144ba:	b29b      	uxth	r3, r3
 80144bc:	2b01      	cmp	r3, #1
 80144be:	d81f      	bhi.n	8014500 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80144c0:	68fb      	ldr	r3, [r7, #12]
 80144c2:	681b      	ldr	r3, [r3, #0]
 80144c4:	685a      	ldr	r2, [r3, #4]
 80144c6:	68fb      	ldr	r3, [r7, #12]
 80144c8:	681b      	ldr	r3, [r3, #0]
 80144ca:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80144ce:	605a      	str	r2, [r3, #4]
 80144d0:	e016      	b.n	8014500 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80144d2:	68fb      	ldr	r3, [r7, #12]
 80144d4:	681b      	ldr	r3, [r3, #0]
 80144d6:	f103 020c 	add.w	r2, r3, #12
 80144da:	68fb      	ldr	r3, [r7, #12]
 80144dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80144de:	7812      	ldrb	r2, [r2, #0]
 80144e0:	b2d2      	uxtb	r2, r2
 80144e2:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 80144e4:	68fb      	ldr	r3, [r7, #12]
 80144e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80144e8:	1c5a      	adds	r2, r3, #1
 80144ea:	68fb      	ldr	r3, [r7, #12]
 80144ec:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 80144ee:	68fb      	ldr	r3, [r7, #12]
 80144f0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80144f4:	b29b      	uxth	r3, r3
 80144f6:	3b01      	subs	r3, #1
 80144f8:	b29a      	uxth	r2, r3
 80144fa:	68fb      	ldr	r3, [r7, #12]
 80144fc:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8014500:	2301      	movs	r3, #1
 8014502:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8014504:	f7fa fa98 	bl	800ea38 <HAL_GetTick>
 8014508:	4602      	mov	r2, r0
 801450a:	69fb      	ldr	r3, [r7, #28]
 801450c:	1ad3      	subs	r3, r2, r3
 801450e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014510:	429a      	cmp	r2, r3
 8014512:	d803      	bhi.n	801451c <HAL_SPI_TransmitReceive+0x3c2>
 8014514:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014516:	f1b3 3fff 	cmp.w	r3, #4294967295
 801451a:	d102      	bne.n	8014522 <HAL_SPI_TransmitReceive+0x3c8>
 801451c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801451e:	2b00      	cmp	r3, #0
 8014520:	d103      	bne.n	801452a <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8014522:	2303      	movs	r3, #3
 8014524:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8014528:	e01c      	b.n	8014564 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 801452a:	68fb      	ldr	r3, [r7, #12]
 801452c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801452e:	b29b      	uxth	r3, r3
 8014530:	2b00      	cmp	r3, #0
 8014532:	f47f af5b 	bne.w	80143ec <HAL_SPI_TransmitReceive+0x292>
 8014536:	68fb      	ldr	r3, [r7, #12]
 8014538:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 801453c:	b29b      	uxth	r3, r3
 801453e:	2b00      	cmp	r3, #0
 8014540:	f47f af54 	bne.w	80143ec <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8014544:	69fa      	ldr	r2, [r7, #28]
 8014546:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8014548:	68f8      	ldr	r0, [r7, #12]
 801454a:	f000 f98f 	bl	801486c <SPI_EndRxTxTransaction>
 801454e:	4603      	mov	r3, r0
 8014550:	2b00      	cmp	r3, #0
 8014552:	d006      	beq.n	8014562 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8014554:	2301      	movs	r3, #1
 8014556:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 801455a:	68fb      	ldr	r3, [r7, #12]
 801455c:	2220      	movs	r2, #32
 801455e:	661a      	str	r2, [r3, #96]	; 0x60
 8014560:	e000      	b.n	8014564 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8014562:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8014564:	68fb      	ldr	r3, [r7, #12]
 8014566:	2201      	movs	r2, #1
 8014568:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 801456c:	68fb      	ldr	r3, [r7, #12]
 801456e:	2200      	movs	r2, #0
 8014570:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8014574:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8014578:	4618      	mov	r0, r3
 801457a:	3728      	adds	r7, #40	; 0x28
 801457c:	46bd      	mov	sp, r7
 801457e:	bd80      	pop	{r7, pc}

08014580 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8014580:	b580      	push	{r7, lr}
 8014582:	b088      	sub	sp, #32
 8014584:	af00      	add	r7, sp, #0
 8014586:	60f8      	str	r0, [r7, #12]
 8014588:	60b9      	str	r1, [r7, #8]
 801458a:	603b      	str	r3, [r7, #0]
 801458c:	4613      	mov	r3, r2
 801458e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8014590:	f7fa fa52 	bl	800ea38 <HAL_GetTick>
 8014594:	4602      	mov	r2, r0
 8014596:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014598:	1a9b      	subs	r3, r3, r2
 801459a:	683a      	ldr	r2, [r7, #0]
 801459c:	4413      	add	r3, r2
 801459e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80145a0:	f7fa fa4a 	bl	800ea38 <HAL_GetTick>
 80145a4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80145a6:	4b39      	ldr	r3, [pc, #228]	; (801468c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80145a8:	681b      	ldr	r3, [r3, #0]
 80145aa:	015b      	lsls	r3, r3, #5
 80145ac:	0d1b      	lsrs	r3, r3, #20
 80145ae:	69fa      	ldr	r2, [r7, #28]
 80145b0:	fb02 f303 	mul.w	r3, r2, r3
 80145b4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80145b6:	e054      	b.n	8014662 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80145b8:	683b      	ldr	r3, [r7, #0]
 80145ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80145be:	d050      	beq.n	8014662 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80145c0:	f7fa fa3a 	bl	800ea38 <HAL_GetTick>
 80145c4:	4602      	mov	r2, r0
 80145c6:	69bb      	ldr	r3, [r7, #24]
 80145c8:	1ad3      	subs	r3, r2, r3
 80145ca:	69fa      	ldr	r2, [r7, #28]
 80145cc:	429a      	cmp	r2, r3
 80145ce:	d902      	bls.n	80145d6 <SPI_WaitFlagStateUntilTimeout+0x56>
 80145d0:	69fb      	ldr	r3, [r7, #28]
 80145d2:	2b00      	cmp	r3, #0
 80145d4:	d13d      	bne.n	8014652 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80145d6:	68fb      	ldr	r3, [r7, #12]
 80145d8:	681b      	ldr	r3, [r3, #0]
 80145da:	685a      	ldr	r2, [r3, #4]
 80145dc:	68fb      	ldr	r3, [r7, #12]
 80145de:	681b      	ldr	r3, [r3, #0]
 80145e0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80145e4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80145e6:	68fb      	ldr	r3, [r7, #12]
 80145e8:	685b      	ldr	r3, [r3, #4]
 80145ea:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80145ee:	d111      	bne.n	8014614 <SPI_WaitFlagStateUntilTimeout+0x94>
 80145f0:	68fb      	ldr	r3, [r7, #12]
 80145f2:	689b      	ldr	r3, [r3, #8]
 80145f4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80145f8:	d004      	beq.n	8014604 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80145fa:	68fb      	ldr	r3, [r7, #12]
 80145fc:	689b      	ldr	r3, [r3, #8]
 80145fe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8014602:	d107      	bne.n	8014614 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8014604:	68fb      	ldr	r3, [r7, #12]
 8014606:	681b      	ldr	r3, [r3, #0]
 8014608:	681a      	ldr	r2, [r3, #0]
 801460a:	68fb      	ldr	r3, [r7, #12]
 801460c:	681b      	ldr	r3, [r3, #0]
 801460e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8014612:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8014614:	68fb      	ldr	r3, [r7, #12]
 8014616:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014618:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801461c:	d10f      	bne.n	801463e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 801461e:	68fb      	ldr	r3, [r7, #12]
 8014620:	681b      	ldr	r3, [r3, #0]
 8014622:	681a      	ldr	r2, [r3, #0]
 8014624:	68fb      	ldr	r3, [r7, #12]
 8014626:	681b      	ldr	r3, [r3, #0]
 8014628:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 801462c:	601a      	str	r2, [r3, #0]
 801462e:	68fb      	ldr	r3, [r7, #12]
 8014630:	681b      	ldr	r3, [r3, #0]
 8014632:	681a      	ldr	r2, [r3, #0]
 8014634:	68fb      	ldr	r3, [r7, #12]
 8014636:	681b      	ldr	r3, [r3, #0]
 8014638:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 801463c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 801463e:	68fb      	ldr	r3, [r7, #12]
 8014640:	2201      	movs	r2, #1
 8014642:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8014646:	68fb      	ldr	r3, [r7, #12]
 8014648:	2200      	movs	r2, #0
 801464a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 801464e:	2303      	movs	r3, #3
 8014650:	e017      	b.n	8014682 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8014652:	697b      	ldr	r3, [r7, #20]
 8014654:	2b00      	cmp	r3, #0
 8014656:	d101      	bne.n	801465c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8014658:	2300      	movs	r3, #0
 801465a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 801465c:	697b      	ldr	r3, [r7, #20]
 801465e:	3b01      	subs	r3, #1
 8014660:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8014662:	68fb      	ldr	r3, [r7, #12]
 8014664:	681b      	ldr	r3, [r3, #0]
 8014666:	689a      	ldr	r2, [r3, #8]
 8014668:	68bb      	ldr	r3, [r7, #8]
 801466a:	4013      	ands	r3, r2
 801466c:	68ba      	ldr	r2, [r7, #8]
 801466e:	429a      	cmp	r2, r3
 8014670:	bf0c      	ite	eq
 8014672:	2301      	moveq	r3, #1
 8014674:	2300      	movne	r3, #0
 8014676:	b2db      	uxtb	r3, r3
 8014678:	461a      	mov	r2, r3
 801467a:	79fb      	ldrb	r3, [r7, #7]
 801467c:	429a      	cmp	r2, r3
 801467e:	d19b      	bne.n	80145b8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8014680:	2300      	movs	r3, #0
}
 8014682:	4618      	mov	r0, r3
 8014684:	3720      	adds	r7, #32
 8014686:	46bd      	mov	sp, r7
 8014688:	bd80      	pop	{r7, pc}
 801468a:	bf00      	nop
 801468c:	20000090 	.word	0x20000090

08014690 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8014690:	b580      	push	{r7, lr}
 8014692:	b08a      	sub	sp, #40	; 0x28
 8014694:	af00      	add	r7, sp, #0
 8014696:	60f8      	str	r0, [r7, #12]
 8014698:	60b9      	str	r1, [r7, #8]
 801469a:	607a      	str	r2, [r7, #4]
 801469c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 801469e:	2300      	movs	r3, #0
 80146a0:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80146a2:	f7fa f9c9 	bl	800ea38 <HAL_GetTick>
 80146a6:	4602      	mov	r2, r0
 80146a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80146aa:	1a9b      	subs	r3, r3, r2
 80146ac:	683a      	ldr	r2, [r7, #0]
 80146ae:	4413      	add	r3, r2
 80146b0:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 80146b2:	f7fa f9c1 	bl	800ea38 <HAL_GetTick>
 80146b6:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80146b8:	68fb      	ldr	r3, [r7, #12]
 80146ba:	681b      	ldr	r3, [r3, #0]
 80146bc:	330c      	adds	r3, #12
 80146be:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80146c0:	4b3d      	ldr	r3, [pc, #244]	; (80147b8 <SPI_WaitFifoStateUntilTimeout+0x128>)
 80146c2:	681a      	ldr	r2, [r3, #0]
 80146c4:	4613      	mov	r3, r2
 80146c6:	009b      	lsls	r3, r3, #2
 80146c8:	4413      	add	r3, r2
 80146ca:	00da      	lsls	r2, r3, #3
 80146cc:	1ad3      	subs	r3, r2, r3
 80146ce:	0d1b      	lsrs	r3, r3, #20
 80146d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80146d2:	fb02 f303 	mul.w	r3, r2, r3
 80146d6:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80146d8:	e060      	b.n	801479c <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80146da:	68bb      	ldr	r3, [r7, #8]
 80146dc:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80146e0:	d107      	bne.n	80146f2 <SPI_WaitFifoStateUntilTimeout+0x62>
 80146e2:	687b      	ldr	r3, [r7, #4]
 80146e4:	2b00      	cmp	r3, #0
 80146e6:	d104      	bne.n	80146f2 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80146e8:	69fb      	ldr	r3, [r7, #28]
 80146ea:	781b      	ldrb	r3, [r3, #0]
 80146ec:	b2db      	uxtb	r3, r3
 80146ee:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80146f0:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80146f2:	683b      	ldr	r3, [r7, #0]
 80146f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80146f8:	d050      	beq.n	801479c <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80146fa:	f7fa f99d 	bl	800ea38 <HAL_GetTick>
 80146fe:	4602      	mov	r2, r0
 8014700:	6a3b      	ldr	r3, [r7, #32]
 8014702:	1ad3      	subs	r3, r2, r3
 8014704:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014706:	429a      	cmp	r2, r3
 8014708:	d902      	bls.n	8014710 <SPI_WaitFifoStateUntilTimeout+0x80>
 801470a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801470c:	2b00      	cmp	r3, #0
 801470e:	d13d      	bne.n	801478c <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8014710:	68fb      	ldr	r3, [r7, #12]
 8014712:	681b      	ldr	r3, [r3, #0]
 8014714:	685a      	ldr	r2, [r3, #4]
 8014716:	68fb      	ldr	r3, [r7, #12]
 8014718:	681b      	ldr	r3, [r3, #0]
 801471a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 801471e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8014720:	68fb      	ldr	r3, [r7, #12]
 8014722:	685b      	ldr	r3, [r3, #4]
 8014724:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8014728:	d111      	bne.n	801474e <SPI_WaitFifoStateUntilTimeout+0xbe>
 801472a:	68fb      	ldr	r3, [r7, #12]
 801472c:	689b      	ldr	r3, [r3, #8]
 801472e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8014732:	d004      	beq.n	801473e <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8014734:	68fb      	ldr	r3, [r7, #12]
 8014736:	689b      	ldr	r3, [r3, #8]
 8014738:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801473c:	d107      	bne.n	801474e <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 801473e:	68fb      	ldr	r3, [r7, #12]
 8014740:	681b      	ldr	r3, [r3, #0]
 8014742:	681a      	ldr	r2, [r3, #0]
 8014744:	68fb      	ldr	r3, [r7, #12]
 8014746:	681b      	ldr	r3, [r3, #0]
 8014748:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801474c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 801474e:	68fb      	ldr	r3, [r7, #12]
 8014750:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014752:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8014756:	d10f      	bne.n	8014778 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8014758:	68fb      	ldr	r3, [r7, #12]
 801475a:	681b      	ldr	r3, [r3, #0]
 801475c:	681a      	ldr	r2, [r3, #0]
 801475e:	68fb      	ldr	r3, [r7, #12]
 8014760:	681b      	ldr	r3, [r3, #0]
 8014762:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8014766:	601a      	str	r2, [r3, #0]
 8014768:	68fb      	ldr	r3, [r7, #12]
 801476a:	681b      	ldr	r3, [r3, #0]
 801476c:	681a      	ldr	r2, [r3, #0]
 801476e:	68fb      	ldr	r3, [r7, #12]
 8014770:	681b      	ldr	r3, [r3, #0]
 8014772:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8014776:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8014778:	68fb      	ldr	r3, [r7, #12]
 801477a:	2201      	movs	r2, #1
 801477c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8014780:	68fb      	ldr	r3, [r7, #12]
 8014782:	2200      	movs	r2, #0
 8014784:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8014788:	2303      	movs	r3, #3
 801478a:	e010      	b.n	80147ae <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 801478c:	69bb      	ldr	r3, [r7, #24]
 801478e:	2b00      	cmp	r3, #0
 8014790:	d101      	bne.n	8014796 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8014792:	2300      	movs	r3, #0
 8014794:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8014796:	69bb      	ldr	r3, [r7, #24]
 8014798:	3b01      	subs	r3, #1
 801479a:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 801479c:	68fb      	ldr	r3, [r7, #12]
 801479e:	681b      	ldr	r3, [r3, #0]
 80147a0:	689a      	ldr	r2, [r3, #8]
 80147a2:	68bb      	ldr	r3, [r7, #8]
 80147a4:	4013      	ands	r3, r2
 80147a6:	687a      	ldr	r2, [r7, #4]
 80147a8:	429a      	cmp	r2, r3
 80147aa:	d196      	bne.n	80146da <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80147ac:	2300      	movs	r3, #0
}
 80147ae:	4618      	mov	r0, r3
 80147b0:	3728      	adds	r7, #40	; 0x28
 80147b2:	46bd      	mov	sp, r7
 80147b4:	bd80      	pop	{r7, pc}
 80147b6:	bf00      	nop
 80147b8:	20000090 	.word	0x20000090

080147bc <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80147bc:	b580      	push	{r7, lr}
 80147be:	b086      	sub	sp, #24
 80147c0:	af02      	add	r7, sp, #8
 80147c2:	60f8      	str	r0, [r7, #12]
 80147c4:	60b9      	str	r1, [r7, #8]
 80147c6:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80147c8:	68fb      	ldr	r3, [r7, #12]
 80147ca:	685b      	ldr	r3, [r3, #4]
 80147cc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80147d0:	d111      	bne.n	80147f6 <SPI_EndRxTransaction+0x3a>
 80147d2:	68fb      	ldr	r3, [r7, #12]
 80147d4:	689b      	ldr	r3, [r3, #8]
 80147d6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80147da:	d004      	beq.n	80147e6 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80147dc:	68fb      	ldr	r3, [r7, #12]
 80147de:	689b      	ldr	r3, [r3, #8]
 80147e0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80147e4:	d107      	bne.n	80147f6 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80147e6:	68fb      	ldr	r3, [r7, #12]
 80147e8:	681b      	ldr	r3, [r3, #0]
 80147ea:	681a      	ldr	r2, [r3, #0]
 80147ec:	68fb      	ldr	r3, [r7, #12]
 80147ee:	681b      	ldr	r3, [r3, #0]
 80147f0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80147f4:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80147f6:	687b      	ldr	r3, [r7, #4]
 80147f8:	9300      	str	r3, [sp, #0]
 80147fa:	68bb      	ldr	r3, [r7, #8]
 80147fc:	2200      	movs	r2, #0
 80147fe:	2180      	movs	r1, #128	; 0x80
 8014800:	68f8      	ldr	r0, [r7, #12]
 8014802:	f7ff febd 	bl	8014580 <SPI_WaitFlagStateUntilTimeout>
 8014806:	4603      	mov	r3, r0
 8014808:	2b00      	cmp	r3, #0
 801480a:	d007      	beq.n	801481c <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 801480c:	68fb      	ldr	r3, [r7, #12]
 801480e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8014810:	f043 0220 	orr.w	r2, r3, #32
 8014814:	68fb      	ldr	r3, [r7, #12]
 8014816:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8014818:	2303      	movs	r3, #3
 801481a:	e023      	b.n	8014864 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 801481c:	68fb      	ldr	r3, [r7, #12]
 801481e:	685b      	ldr	r3, [r3, #4]
 8014820:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8014824:	d11d      	bne.n	8014862 <SPI_EndRxTransaction+0xa6>
 8014826:	68fb      	ldr	r3, [r7, #12]
 8014828:	689b      	ldr	r3, [r3, #8]
 801482a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801482e:	d004      	beq.n	801483a <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8014830:	68fb      	ldr	r3, [r7, #12]
 8014832:	689b      	ldr	r3, [r3, #8]
 8014834:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8014838:	d113      	bne.n	8014862 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 801483a:	687b      	ldr	r3, [r7, #4]
 801483c:	9300      	str	r3, [sp, #0]
 801483e:	68bb      	ldr	r3, [r7, #8]
 8014840:	2200      	movs	r2, #0
 8014842:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8014846:	68f8      	ldr	r0, [r7, #12]
 8014848:	f7ff ff22 	bl	8014690 <SPI_WaitFifoStateUntilTimeout>
 801484c:	4603      	mov	r3, r0
 801484e:	2b00      	cmp	r3, #0
 8014850:	d007      	beq.n	8014862 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8014852:	68fb      	ldr	r3, [r7, #12]
 8014854:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8014856:	f043 0220 	orr.w	r2, r3, #32
 801485a:	68fb      	ldr	r3, [r7, #12]
 801485c:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 801485e:	2303      	movs	r3, #3
 8014860:	e000      	b.n	8014864 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8014862:	2300      	movs	r3, #0
}
 8014864:	4618      	mov	r0, r3
 8014866:	3710      	adds	r7, #16
 8014868:	46bd      	mov	sp, r7
 801486a:	bd80      	pop	{r7, pc}

0801486c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 801486c:	b580      	push	{r7, lr}
 801486e:	b086      	sub	sp, #24
 8014870:	af02      	add	r7, sp, #8
 8014872:	60f8      	str	r0, [r7, #12]
 8014874:	60b9      	str	r1, [r7, #8]
 8014876:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8014878:	687b      	ldr	r3, [r7, #4]
 801487a:	9300      	str	r3, [sp, #0]
 801487c:	68bb      	ldr	r3, [r7, #8]
 801487e:	2200      	movs	r2, #0
 8014880:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8014884:	68f8      	ldr	r0, [r7, #12]
 8014886:	f7ff ff03 	bl	8014690 <SPI_WaitFifoStateUntilTimeout>
 801488a:	4603      	mov	r3, r0
 801488c:	2b00      	cmp	r3, #0
 801488e:	d007      	beq.n	80148a0 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8014890:	68fb      	ldr	r3, [r7, #12]
 8014892:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8014894:	f043 0220 	orr.w	r2, r3, #32
 8014898:	68fb      	ldr	r3, [r7, #12]
 801489a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 801489c:	2303      	movs	r3, #3
 801489e:	e027      	b.n	80148f0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80148a0:	687b      	ldr	r3, [r7, #4]
 80148a2:	9300      	str	r3, [sp, #0]
 80148a4:	68bb      	ldr	r3, [r7, #8]
 80148a6:	2200      	movs	r2, #0
 80148a8:	2180      	movs	r1, #128	; 0x80
 80148aa:	68f8      	ldr	r0, [r7, #12]
 80148ac:	f7ff fe68 	bl	8014580 <SPI_WaitFlagStateUntilTimeout>
 80148b0:	4603      	mov	r3, r0
 80148b2:	2b00      	cmp	r3, #0
 80148b4:	d007      	beq.n	80148c6 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80148b6:	68fb      	ldr	r3, [r7, #12]
 80148b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80148ba:	f043 0220 	orr.w	r2, r3, #32
 80148be:	68fb      	ldr	r3, [r7, #12]
 80148c0:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80148c2:	2303      	movs	r3, #3
 80148c4:	e014      	b.n	80148f0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80148c6:	687b      	ldr	r3, [r7, #4]
 80148c8:	9300      	str	r3, [sp, #0]
 80148ca:	68bb      	ldr	r3, [r7, #8]
 80148cc:	2200      	movs	r2, #0
 80148ce:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80148d2:	68f8      	ldr	r0, [r7, #12]
 80148d4:	f7ff fedc 	bl	8014690 <SPI_WaitFifoStateUntilTimeout>
 80148d8:	4603      	mov	r3, r0
 80148da:	2b00      	cmp	r3, #0
 80148dc:	d007      	beq.n	80148ee <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80148de:	68fb      	ldr	r3, [r7, #12]
 80148e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80148e2:	f043 0220 	orr.w	r2, r3, #32
 80148e6:	68fb      	ldr	r3, [r7, #12]
 80148e8:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80148ea:	2303      	movs	r3, #3
 80148ec:	e000      	b.n	80148f0 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80148ee:	2300      	movs	r3, #0
}
 80148f0:	4618      	mov	r0, r3
 80148f2:	3710      	adds	r7, #16
 80148f4:	46bd      	mov	sp, r7
 80148f6:	bd80      	pop	{r7, pc}

080148f8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80148f8:	b580      	push	{r7, lr}
 80148fa:	b082      	sub	sp, #8
 80148fc:	af00      	add	r7, sp, #0
 80148fe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8014900:	687b      	ldr	r3, [r7, #4]
 8014902:	2b00      	cmp	r3, #0
 8014904:	d101      	bne.n	801490a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8014906:	2301      	movs	r3, #1
 8014908:	e049      	b.n	801499e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 801490a:	687b      	ldr	r3, [r7, #4]
 801490c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8014910:	b2db      	uxtb	r3, r3
 8014912:	2b00      	cmp	r3, #0
 8014914:	d106      	bne.n	8014924 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8014916:	687b      	ldr	r3, [r7, #4]
 8014918:	2200      	movs	r2, #0
 801491a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 801491e:	6878      	ldr	r0, [r7, #4]
 8014920:	f7f9 fc34 	bl	800e18c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8014924:	687b      	ldr	r3, [r7, #4]
 8014926:	2202      	movs	r2, #2
 8014928:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 801492c:	687b      	ldr	r3, [r7, #4]
 801492e:	681a      	ldr	r2, [r3, #0]
 8014930:	687b      	ldr	r3, [r7, #4]
 8014932:	3304      	adds	r3, #4
 8014934:	4619      	mov	r1, r3
 8014936:	4610      	mov	r0, r2
 8014938:	f001 f948 	bl	8015bcc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 801493c:	687b      	ldr	r3, [r7, #4]
 801493e:	2201      	movs	r2, #1
 8014940:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8014944:	687b      	ldr	r3, [r7, #4]
 8014946:	2201      	movs	r2, #1
 8014948:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 801494c:	687b      	ldr	r3, [r7, #4]
 801494e:	2201      	movs	r2, #1
 8014950:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8014954:	687b      	ldr	r3, [r7, #4]
 8014956:	2201      	movs	r2, #1
 8014958:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 801495c:	687b      	ldr	r3, [r7, #4]
 801495e:	2201      	movs	r2, #1
 8014960:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8014964:	687b      	ldr	r3, [r7, #4]
 8014966:	2201      	movs	r2, #1
 8014968:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 801496c:	687b      	ldr	r3, [r7, #4]
 801496e:	2201      	movs	r2, #1
 8014970:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8014974:	687b      	ldr	r3, [r7, #4]
 8014976:	2201      	movs	r2, #1
 8014978:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801497c:	687b      	ldr	r3, [r7, #4]
 801497e:	2201      	movs	r2, #1
 8014980:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8014984:	687b      	ldr	r3, [r7, #4]
 8014986:	2201      	movs	r2, #1
 8014988:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 801498c:	687b      	ldr	r3, [r7, #4]
 801498e:	2201      	movs	r2, #1
 8014990:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8014994:	687b      	ldr	r3, [r7, #4]
 8014996:	2201      	movs	r2, #1
 8014998:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 801499c:	2300      	movs	r3, #0
}
 801499e:	4618      	mov	r0, r3
 80149a0:	3708      	adds	r7, #8
 80149a2:	46bd      	mov	sp, r7
 80149a4:	bd80      	pop	{r7, pc}
	...

080149a8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80149a8:	b480      	push	{r7}
 80149aa:	b085      	sub	sp, #20
 80149ac:	af00      	add	r7, sp, #0
 80149ae:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80149b0:	687b      	ldr	r3, [r7, #4]
 80149b2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80149b6:	b2db      	uxtb	r3, r3
 80149b8:	2b01      	cmp	r3, #1
 80149ba:	d001      	beq.n	80149c0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80149bc:	2301      	movs	r3, #1
 80149be:	e047      	b.n	8014a50 <HAL_TIM_Base_Start+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80149c0:	687b      	ldr	r3, [r7, #4]
 80149c2:	2202      	movs	r2, #2
 80149c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80149c8:	687b      	ldr	r3, [r7, #4]
 80149ca:	681b      	ldr	r3, [r3, #0]
 80149cc:	4a23      	ldr	r2, [pc, #140]	; (8014a5c <HAL_TIM_Base_Start+0xb4>)
 80149ce:	4293      	cmp	r3, r2
 80149d0:	d01d      	beq.n	8014a0e <HAL_TIM_Base_Start+0x66>
 80149d2:	687b      	ldr	r3, [r7, #4]
 80149d4:	681b      	ldr	r3, [r3, #0]
 80149d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80149da:	d018      	beq.n	8014a0e <HAL_TIM_Base_Start+0x66>
 80149dc:	687b      	ldr	r3, [r7, #4]
 80149de:	681b      	ldr	r3, [r3, #0]
 80149e0:	4a1f      	ldr	r2, [pc, #124]	; (8014a60 <HAL_TIM_Base_Start+0xb8>)
 80149e2:	4293      	cmp	r3, r2
 80149e4:	d013      	beq.n	8014a0e <HAL_TIM_Base_Start+0x66>
 80149e6:	687b      	ldr	r3, [r7, #4]
 80149e8:	681b      	ldr	r3, [r3, #0]
 80149ea:	4a1e      	ldr	r2, [pc, #120]	; (8014a64 <HAL_TIM_Base_Start+0xbc>)
 80149ec:	4293      	cmp	r3, r2
 80149ee:	d00e      	beq.n	8014a0e <HAL_TIM_Base_Start+0x66>
 80149f0:	687b      	ldr	r3, [r7, #4]
 80149f2:	681b      	ldr	r3, [r3, #0]
 80149f4:	4a1c      	ldr	r2, [pc, #112]	; (8014a68 <HAL_TIM_Base_Start+0xc0>)
 80149f6:	4293      	cmp	r3, r2
 80149f8:	d009      	beq.n	8014a0e <HAL_TIM_Base_Start+0x66>
 80149fa:	687b      	ldr	r3, [r7, #4]
 80149fc:	681b      	ldr	r3, [r3, #0]
 80149fe:	4a1b      	ldr	r2, [pc, #108]	; (8014a6c <HAL_TIM_Base_Start+0xc4>)
 8014a00:	4293      	cmp	r3, r2
 8014a02:	d004      	beq.n	8014a0e <HAL_TIM_Base_Start+0x66>
 8014a04:	687b      	ldr	r3, [r7, #4]
 8014a06:	681b      	ldr	r3, [r3, #0]
 8014a08:	4a19      	ldr	r2, [pc, #100]	; (8014a70 <HAL_TIM_Base_Start+0xc8>)
 8014a0a:	4293      	cmp	r3, r2
 8014a0c:	d115      	bne.n	8014a3a <HAL_TIM_Base_Start+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8014a0e:	687b      	ldr	r3, [r7, #4]
 8014a10:	681b      	ldr	r3, [r3, #0]
 8014a12:	689a      	ldr	r2, [r3, #8]
 8014a14:	4b17      	ldr	r3, [pc, #92]	; (8014a74 <HAL_TIM_Base_Start+0xcc>)
 8014a16:	4013      	ands	r3, r2
 8014a18:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8014a1a:	68fb      	ldr	r3, [r7, #12]
 8014a1c:	2b06      	cmp	r3, #6
 8014a1e:	d015      	beq.n	8014a4c <HAL_TIM_Base_Start+0xa4>
 8014a20:	68fb      	ldr	r3, [r7, #12]
 8014a22:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8014a26:	d011      	beq.n	8014a4c <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8014a28:	687b      	ldr	r3, [r7, #4]
 8014a2a:	681b      	ldr	r3, [r3, #0]
 8014a2c:	681a      	ldr	r2, [r3, #0]
 8014a2e:	687b      	ldr	r3, [r7, #4]
 8014a30:	681b      	ldr	r3, [r3, #0]
 8014a32:	f042 0201 	orr.w	r2, r2, #1
 8014a36:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8014a38:	e008      	b.n	8014a4c <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8014a3a:	687b      	ldr	r3, [r7, #4]
 8014a3c:	681b      	ldr	r3, [r3, #0]
 8014a3e:	681a      	ldr	r2, [r3, #0]
 8014a40:	687b      	ldr	r3, [r7, #4]
 8014a42:	681b      	ldr	r3, [r3, #0]
 8014a44:	f042 0201 	orr.w	r2, r2, #1
 8014a48:	601a      	str	r2, [r3, #0]
 8014a4a:	e000      	b.n	8014a4e <HAL_TIM_Base_Start+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8014a4c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8014a4e:	2300      	movs	r3, #0
}
 8014a50:	4618      	mov	r0, r3
 8014a52:	3714      	adds	r7, #20
 8014a54:	46bd      	mov	sp, r7
 8014a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a5a:	4770      	bx	lr
 8014a5c:	40012c00 	.word	0x40012c00
 8014a60:	40000400 	.word	0x40000400
 8014a64:	40000800 	.word	0x40000800
 8014a68:	40000c00 	.word	0x40000c00
 8014a6c:	40013400 	.word	0x40013400
 8014a70:	40014000 	.word	0x40014000
 8014a74:	00010007 	.word	0x00010007

08014a78 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8014a78:	b480      	push	{r7}
 8014a7a:	b085      	sub	sp, #20
 8014a7c:	af00      	add	r7, sp, #0
 8014a7e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8014a80:	687b      	ldr	r3, [r7, #4]
 8014a82:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8014a86:	b2db      	uxtb	r3, r3
 8014a88:	2b01      	cmp	r3, #1
 8014a8a:	d001      	beq.n	8014a90 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8014a8c:	2301      	movs	r3, #1
 8014a8e:	e04f      	b.n	8014b30 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8014a90:	687b      	ldr	r3, [r7, #4]
 8014a92:	2202      	movs	r2, #2
 8014a94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8014a98:	687b      	ldr	r3, [r7, #4]
 8014a9a:	681b      	ldr	r3, [r3, #0]
 8014a9c:	68da      	ldr	r2, [r3, #12]
 8014a9e:	687b      	ldr	r3, [r7, #4]
 8014aa0:	681b      	ldr	r3, [r3, #0]
 8014aa2:	f042 0201 	orr.w	r2, r2, #1
 8014aa6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8014aa8:	687b      	ldr	r3, [r7, #4]
 8014aaa:	681b      	ldr	r3, [r3, #0]
 8014aac:	4a23      	ldr	r2, [pc, #140]	; (8014b3c <HAL_TIM_Base_Start_IT+0xc4>)
 8014aae:	4293      	cmp	r3, r2
 8014ab0:	d01d      	beq.n	8014aee <HAL_TIM_Base_Start_IT+0x76>
 8014ab2:	687b      	ldr	r3, [r7, #4]
 8014ab4:	681b      	ldr	r3, [r3, #0]
 8014ab6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8014aba:	d018      	beq.n	8014aee <HAL_TIM_Base_Start_IT+0x76>
 8014abc:	687b      	ldr	r3, [r7, #4]
 8014abe:	681b      	ldr	r3, [r3, #0]
 8014ac0:	4a1f      	ldr	r2, [pc, #124]	; (8014b40 <HAL_TIM_Base_Start_IT+0xc8>)
 8014ac2:	4293      	cmp	r3, r2
 8014ac4:	d013      	beq.n	8014aee <HAL_TIM_Base_Start_IT+0x76>
 8014ac6:	687b      	ldr	r3, [r7, #4]
 8014ac8:	681b      	ldr	r3, [r3, #0]
 8014aca:	4a1e      	ldr	r2, [pc, #120]	; (8014b44 <HAL_TIM_Base_Start_IT+0xcc>)
 8014acc:	4293      	cmp	r3, r2
 8014ace:	d00e      	beq.n	8014aee <HAL_TIM_Base_Start_IT+0x76>
 8014ad0:	687b      	ldr	r3, [r7, #4]
 8014ad2:	681b      	ldr	r3, [r3, #0]
 8014ad4:	4a1c      	ldr	r2, [pc, #112]	; (8014b48 <HAL_TIM_Base_Start_IT+0xd0>)
 8014ad6:	4293      	cmp	r3, r2
 8014ad8:	d009      	beq.n	8014aee <HAL_TIM_Base_Start_IT+0x76>
 8014ada:	687b      	ldr	r3, [r7, #4]
 8014adc:	681b      	ldr	r3, [r3, #0]
 8014ade:	4a1b      	ldr	r2, [pc, #108]	; (8014b4c <HAL_TIM_Base_Start_IT+0xd4>)
 8014ae0:	4293      	cmp	r3, r2
 8014ae2:	d004      	beq.n	8014aee <HAL_TIM_Base_Start_IT+0x76>
 8014ae4:	687b      	ldr	r3, [r7, #4]
 8014ae6:	681b      	ldr	r3, [r3, #0]
 8014ae8:	4a19      	ldr	r2, [pc, #100]	; (8014b50 <HAL_TIM_Base_Start_IT+0xd8>)
 8014aea:	4293      	cmp	r3, r2
 8014aec:	d115      	bne.n	8014b1a <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8014aee:	687b      	ldr	r3, [r7, #4]
 8014af0:	681b      	ldr	r3, [r3, #0]
 8014af2:	689a      	ldr	r2, [r3, #8]
 8014af4:	4b17      	ldr	r3, [pc, #92]	; (8014b54 <HAL_TIM_Base_Start_IT+0xdc>)
 8014af6:	4013      	ands	r3, r2
 8014af8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8014afa:	68fb      	ldr	r3, [r7, #12]
 8014afc:	2b06      	cmp	r3, #6
 8014afe:	d015      	beq.n	8014b2c <HAL_TIM_Base_Start_IT+0xb4>
 8014b00:	68fb      	ldr	r3, [r7, #12]
 8014b02:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8014b06:	d011      	beq.n	8014b2c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8014b08:	687b      	ldr	r3, [r7, #4]
 8014b0a:	681b      	ldr	r3, [r3, #0]
 8014b0c:	681a      	ldr	r2, [r3, #0]
 8014b0e:	687b      	ldr	r3, [r7, #4]
 8014b10:	681b      	ldr	r3, [r3, #0]
 8014b12:	f042 0201 	orr.w	r2, r2, #1
 8014b16:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8014b18:	e008      	b.n	8014b2c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8014b1a:	687b      	ldr	r3, [r7, #4]
 8014b1c:	681b      	ldr	r3, [r3, #0]
 8014b1e:	681a      	ldr	r2, [r3, #0]
 8014b20:	687b      	ldr	r3, [r7, #4]
 8014b22:	681b      	ldr	r3, [r3, #0]
 8014b24:	f042 0201 	orr.w	r2, r2, #1
 8014b28:	601a      	str	r2, [r3, #0]
 8014b2a:	e000      	b.n	8014b2e <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8014b2c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8014b2e:	2300      	movs	r3, #0
}
 8014b30:	4618      	mov	r0, r3
 8014b32:	3714      	adds	r7, #20
 8014b34:	46bd      	mov	sp, r7
 8014b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b3a:	4770      	bx	lr
 8014b3c:	40012c00 	.word	0x40012c00
 8014b40:	40000400 	.word	0x40000400
 8014b44:	40000800 	.word	0x40000800
 8014b48:	40000c00 	.word	0x40000c00
 8014b4c:	40013400 	.word	0x40013400
 8014b50:	40014000 	.word	0x40014000
 8014b54:	00010007 	.word	0x00010007

08014b58 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8014b58:	b580      	push	{r7, lr}
 8014b5a:	b082      	sub	sp, #8
 8014b5c:	af00      	add	r7, sp, #0
 8014b5e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8014b60:	687b      	ldr	r3, [r7, #4]
 8014b62:	2b00      	cmp	r3, #0
 8014b64:	d101      	bne.n	8014b6a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8014b66:	2301      	movs	r3, #1
 8014b68:	e049      	b.n	8014bfe <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8014b6a:	687b      	ldr	r3, [r7, #4]
 8014b6c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8014b70:	b2db      	uxtb	r3, r3
 8014b72:	2b00      	cmp	r3, #0
 8014b74:	d106      	bne.n	8014b84 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8014b76:	687b      	ldr	r3, [r7, #4]
 8014b78:	2200      	movs	r2, #0
 8014b7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8014b7e:	6878      	ldr	r0, [r7, #4]
 8014b80:	f7f9 fbec 	bl	800e35c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8014b84:	687b      	ldr	r3, [r7, #4]
 8014b86:	2202      	movs	r2, #2
 8014b88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8014b8c:	687b      	ldr	r3, [r7, #4]
 8014b8e:	681a      	ldr	r2, [r3, #0]
 8014b90:	687b      	ldr	r3, [r7, #4]
 8014b92:	3304      	adds	r3, #4
 8014b94:	4619      	mov	r1, r3
 8014b96:	4610      	mov	r0, r2
 8014b98:	f001 f818 	bl	8015bcc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8014b9c:	687b      	ldr	r3, [r7, #4]
 8014b9e:	2201      	movs	r2, #1
 8014ba0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8014ba4:	687b      	ldr	r3, [r7, #4]
 8014ba6:	2201      	movs	r2, #1
 8014ba8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8014bac:	687b      	ldr	r3, [r7, #4]
 8014bae:	2201      	movs	r2, #1
 8014bb0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8014bb4:	687b      	ldr	r3, [r7, #4]
 8014bb6:	2201      	movs	r2, #1
 8014bb8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8014bbc:	687b      	ldr	r3, [r7, #4]
 8014bbe:	2201      	movs	r2, #1
 8014bc0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8014bc4:	687b      	ldr	r3, [r7, #4]
 8014bc6:	2201      	movs	r2, #1
 8014bc8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8014bcc:	687b      	ldr	r3, [r7, #4]
 8014bce:	2201      	movs	r2, #1
 8014bd0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8014bd4:	687b      	ldr	r3, [r7, #4]
 8014bd6:	2201      	movs	r2, #1
 8014bd8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8014bdc:	687b      	ldr	r3, [r7, #4]
 8014bde:	2201      	movs	r2, #1
 8014be0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8014be4:	687b      	ldr	r3, [r7, #4]
 8014be6:	2201      	movs	r2, #1
 8014be8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8014bec:	687b      	ldr	r3, [r7, #4]
 8014bee:	2201      	movs	r2, #1
 8014bf0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8014bf4:	687b      	ldr	r3, [r7, #4]
 8014bf6:	2201      	movs	r2, #1
 8014bf8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8014bfc:	2300      	movs	r3, #0
}
 8014bfe:	4618      	mov	r0, r3
 8014c00:	3708      	adds	r7, #8
 8014c02:	46bd      	mov	sp, r7
 8014c04:	bd80      	pop	{r7, pc}
	...

08014c08 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8014c08:	b580      	push	{r7, lr}
 8014c0a:	b084      	sub	sp, #16
 8014c0c:	af00      	add	r7, sp, #0
 8014c0e:	6078      	str	r0, [r7, #4]
 8014c10:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8014c12:	683b      	ldr	r3, [r7, #0]
 8014c14:	2b00      	cmp	r3, #0
 8014c16:	d109      	bne.n	8014c2c <HAL_TIM_PWM_Start+0x24>
 8014c18:	687b      	ldr	r3, [r7, #4]
 8014c1a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8014c1e:	b2db      	uxtb	r3, r3
 8014c20:	2b01      	cmp	r3, #1
 8014c22:	bf14      	ite	ne
 8014c24:	2301      	movne	r3, #1
 8014c26:	2300      	moveq	r3, #0
 8014c28:	b2db      	uxtb	r3, r3
 8014c2a:	e03c      	b.n	8014ca6 <HAL_TIM_PWM_Start+0x9e>
 8014c2c:	683b      	ldr	r3, [r7, #0]
 8014c2e:	2b04      	cmp	r3, #4
 8014c30:	d109      	bne.n	8014c46 <HAL_TIM_PWM_Start+0x3e>
 8014c32:	687b      	ldr	r3, [r7, #4]
 8014c34:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8014c38:	b2db      	uxtb	r3, r3
 8014c3a:	2b01      	cmp	r3, #1
 8014c3c:	bf14      	ite	ne
 8014c3e:	2301      	movne	r3, #1
 8014c40:	2300      	moveq	r3, #0
 8014c42:	b2db      	uxtb	r3, r3
 8014c44:	e02f      	b.n	8014ca6 <HAL_TIM_PWM_Start+0x9e>
 8014c46:	683b      	ldr	r3, [r7, #0]
 8014c48:	2b08      	cmp	r3, #8
 8014c4a:	d109      	bne.n	8014c60 <HAL_TIM_PWM_Start+0x58>
 8014c4c:	687b      	ldr	r3, [r7, #4]
 8014c4e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8014c52:	b2db      	uxtb	r3, r3
 8014c54:	2b01      	cmp	r3, #1
 8014c56:	bf14      	ite	ne
 8014c58:	2301      	movne	r3, #1
 8014c5a:	2300      	moveq	r3, #0
 8014c5c:	b2db      	uxtb	r3, r3
 8014c5e:	e022      	b.n	8014ca6 <HAL_TIM_PWM_Start+0x9e>
 8014c60:	683b      	ldr	r3, [r7, #0]
 8014c62:	2b0c      	cmp	r3, #12
 8014c64:	d109      	bne.n	8014c7a <HAL_TIM_PWM_Start+0x72>
 8014c66:	687b      	ldr	r3, [r7, #4]
 8014c68:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8014c6c:	b2db      	uxtb	r3, r3
 8014c6e:	2b01      	cmp	r3, #1
 8014c70:	bf14      	ite	ne
 8014c72:	2301      	movne	r3, #1
 8014c74:	2300      	moveq	r3, #0
 8014c76:	b2db      	uxtb	r3, r3
 8014c78:	e015      	b.n	8014ca6 <HAL_TIM_PWM_Start+0x9e>
 8014c7a:	683b      	ldr	r3, [r7, #0]
 8014c7c:	2b10      	cmp	r3, #16
 8014c7e:	d109      	bne.n	8014c94 <HAL_TIM_PWM_Start+0x8c>
 8014c80:	687b      	ldr	r3, [r7, #4]
 8014c82:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8014c86:	b2db      	uxtb	r3, r3
 8014c88:	2b01      	cmp	r3, #1
 8014c8a:	bf14      	ite	ne
 8014c8c:	2301      	movne	r3, #1
 8014c8e:	2300      	moveq	r3, #0
 8014c90:	b2db      	uxtb	r3, r3
 8014c92:	e008      	b.n	8014ca6 <HAL_TIM_PWM_Start+0x9e>
 8014c94:	687b      	ldr	r3, [r7, #4]
 8014c96:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8014c9a:	b2db      	uxtb	r3, r3
 8014c9c:	2b01      	cmp	r3, #1
 8014c9e:	bf14      	ite	ne
 8014ca0:	2301      	movne	r3, #1
 8014ca2:	2300      	moveq	r3, #0
 8014ca4:	b2db      	uxtb	r3, r3
 8014ca6:	2b00      	cmp	r3, #0
 8014ca8:	d001      	beq.n	8014cae <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8014caa:	2301      	movs	r3, #1
 8014cac:	e09c      	b.n	8014de8 <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8014cae:	683b      	ldr	r3, [r7, #0]
 8014cb0:	2b00      	cmp	r3, #0
 8014cb2:	d104      	bne.n	8014cbe <HAL_TIM_PWM_Start+0xb6>
 8014cb4:	687b      	ldr	r3, [r7, #4]
 8014cb6:	2202      	movs	r2, #2
 8014cb8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8014cbc:	e023      	b.n	8014d06 <HAL_TIM_PWM_Start+0xfe>
 8014cbe:	683b      	ldr	r3, [r7, #0]
 8014cc0:	2b04      	cmp	r3, #4
 8014cc2:	d104      	bne.n	8014cce <HAL_TIM_PWM_Start+0xc6>
 8014cc4:	687b      	ldr	r3, [r7, #4]
 8014cc6:	2202      	movs	r2, #2
 8014cc8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8014ccc:	e01b      	b.n	8014d06 <HAL_TIM_PWM_Start+0xfe>
 8014cce:	683b      	ldr	r3, [r7, #0]
 8014cd0:	2b08      	cmp	r3, #8
 8014cd2:	d104      	bne.n	8014cde <HAL_TIM_PWM_Start+0xd6>
 8014cd4:	687b      	ldr	r3, [r7, #4]
 8014cd6:	2202      	movs	r2, #2
 8014cd8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8014cdc:	e013      	b.n	8014d06 <HAL_TIM_PWM_Start+0xfe>
 8014cde:	683b      	ldr	r3, [r7, #0]
 8014ce0:	2b0c      	cmp	r3, #12
 8014ce2:	d104      	bne.n	8014cee <HAL_TIM_PWM_Start+0xe6>
 8014ce4:	687b      	ldr	r3, [r7, #4]
 8014ce6:	2202      	movs	r2, #2
 8014ce8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8014cec:	e00b      	b.n	8014d06 <HAL_TIM_PWM_Start+0xfe>
 8014cee:	683b      	ldr	r3, [r7, #0]
 8014cf0:	2b10      	cmp	r3, #16
 8014cf2:	d104      	bne.n	8014cfe <HAL_TIM_PWM_Start+0xf6>
 8014cf4:	687b      	ldr	r3, [r7, #4]
 8014cf6:	2202      	movs	r2, #2
 8014cf8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8014cfc:	e003      	b.n	8014d06 <HAL_TIM_PWM_Start+0xfe>
 8014cfe:	687b      	ldr	r3, [r7, #4]
 8014d00:	2202      	movs	r2, #2
 8014d02:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8014d06:	687b      	ldr	r3, [r7, #4]
 8014d08:	681b      	ldr	r3, [r3, #0]
 8014d0a:	2201      	movs	r2, #1
 8014d0c:	6839      	ldr	r1, [r7, #0]
 8014d0e:	4618      	mov	r0, r3
 8014d10:	f001 fc8c 	bl	801662c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8014d14:	687b      	ldr	r3, [r7, #4]
 8014d16:	681b      	ldr	r3, [r3, #0]
 8014d18:	4a35      	ldr	r2, [pc, #212]	; (8014df0 <HAL_TIM_PWM_Start+0x1e8>)
 8014d1a:	4293      	cmp	r3, r2
 8014d1c:	d013      	beq.n	8014d46 <HAL_TIM_PWM_Start+0x13e>
 8014d1e:	687b      	ldr	r3, [r7, #4]
 8014d20:	681b      	ldr	r3, [r3, #0]
 8014d22:	4a34      	ldr	r2, [pc, #208]	; (8014df4 <HAL_TIM_PWM_Start+0x1ec>)
 8014d24:	4293      	cmp	r3, r2
 8014d26:	d00e      	beq.n	8014d46 <HAL_TIM_PWM_Start+0x13e>
 8014d28:	687b      	ldr	r3, [r7, #4]
 8014d2a:	681b      	ldr	r3, [r3, #0]
 8014d2c:	4a32      	ldr	r2, [pc, #200]	; (8014df8 <HAL_TIM_PWM_Start+0x1f0>)
 8014d2e:	4293      	cmp	r3, r2
 8014d30:	d009      	beq.n	8014d46 <HAL_TIM_PWM_Start+0x13e>
 8014d32:	687b      	ldr	r3, [r7, #4]
 8014d34:	681b      	ldr	r3, [r3, #0]
 8014d36:	4a31      	ldr	r2, [pc, #196]	; (8014dfc <HAL_TIM_PWM_Start+0x1f4>)
 8014d38:	4293      	cmp	r3, r2
 8014d3a:	d004      	beq.n	8014d46 <HAL_TIM_PWM_Start+0x13e>
 8014d3c:	687b      	ldr	r3, [r7, #4]
 8014d3e:	681b      	ldr	r3, [r3, #0]
 8014d40:	4a2f      	ldr	r2, [pc, #188]	; (8014e00 <HAL_TIM_PWM_Start+0x1f8>)
 8014d42:	4293      	cmp	r3, r2
 8014d44:	d101      	bne.n	8014d4a <HAL_TIM_PWM_Start+0x142>
 8014d46:	2301      	movs	r3, #1
 8014d48:	e000      	b.n	8014d4c <HAL_TIM_PWM_Start+0x144>
 8014d4a:	2300      	movs	r3, #0
 8014d4c:	2b00      	cmp	r3, #0
 8014d4e:	d007      	beq.n	8014d60 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8014d50:	687b      	ldr	r3, [r7, #4]
 8014d52:	681b      	ldr	r3, [r3, #0]
 8014d54:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8014d56:	687b      	ldr	r3, [r7, #4]
 8014d58:	681b      	ldr	r3, [r3, #0]
 8014d5a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8014d5e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8014d60:	687b      	ldr	r3, [r7, #4]
 8014d62:	681b      	ldr	r3, [r3, #0]
 8014d64:	4a22      	ldr	r2, [pc, #136]	; (8014df0 <HAL_TIM_PWM_Start+0x1e8>)
 8014d66:	4293      	cmp	r3, r2
 8014d68:	d01d      	beq.n	8014da6 <HAL_TIM_PWM_Start+0x19e>
 8014d6a:	687b      	ldr	r3, [r7, #4]
 8014d6c:	681b      	ldr	r3, [r3, #0]
 8014d6e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8014d72:	d018      	beq.n	8014da6 <HAL_TIM_PWM_Start+0x19e>
 8014d74:	687b      	ldr	r3, [r7, #4]
 8014d76:	681b      	ldr	r3, [r3, #0]
 8014d78:	4a22      	ldr	r2, [pc, #136]	; (8014e04 <HAL_TIM_PWM_Start+0x1fc>)
 8014d7a:	4293      	cmp	r3, r2
 8014d7c:	d013      	beq.n	8014da6 <HAL_TIM_PWM_Start+0x19e>
 8014d7e:	687b      	ldr	r3, [r7, #4]
 8014d80:	681b      	ldr	r3, [r3, #0]
 8014d82:	4a21      	ldr	r2, [pc, #132]	; (8014e08 <HAL_TIM_PWM_Start+0x200>)
 8014d84:	4293      	cmp	r3, r2
 8014d86:	d00e      	beq.n	8014da6 <HAL_TIM_PWM_Start+0x19e>
 8014d88:	687b      	ldr	r3, [r7, #4]
 8014d8a:	681b      	ldr	r3, [r3, #0]
 8014d8c:	4a1f      	ldr	r2, [pc, #124]	; (8014e0c <HAL_TIM_PWM_Start+0x204>)
 8014d8e:	4293      	cmp	r3, r2
 8014d90:	d009      	beq.n	8014da6 <HAL_TIM_PWM_Start+0x19e>
 8014d92:	687b      	ldr	r3, [r7, #4]
 8014d94:	681b      	ldr	r3, [r3, #0]
 8014d96:	4a17      	ldr	r2, [pc, #92]	; (8014df4 <HAL_TIM_PWM_Start+0x1ec>)
 8014d98:	4293      	cmp	r3, r2
 8014d9a:	d004      	beq.n	8014da6 <HAL_TIM_PWM_Start+0x19e>
 8014d9c:	687b      	ldr	r3, [r7, #4]
 8014d9e:	681b      	ldr	r3, [r3, #0]
 8014da0:	4a15      	ldr	r2, [pc, #84]	; (8014df8 <HAL_TIM_PWM_Start+0x1f0>)
 8014da2:	4293      	cmp	r3, r2
 8014da4:	d115      	bne.n	8014dd2 <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8014da6:	687b      	ldr	r3, [r7, #4]
 8014da8:	681b      	ldr	r3, [r3, #0]
 8014daa:	689a      	ldr	r2, [r3, #8]
 8014dac:	4b18      	ldr	r3, [pc, #96]	; (8014e10 <HAL_TIM_PWM_Start+0x208>)
 8014dae:	4013      	ands	r3, r2
 8014db0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8014db2:	68fb      	ldr	r3, [r7, #12]
 8014db4:	2b06      	cmp	r3, #6
 8014db6:	d015      	beq.n	8014de4 <HAL_TIM_PWM_Start+0x1dc>
 8014db8:	68fb      	ldr	r3, [r7, #12]
 8014dba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8014dbe:	d011      	beq.n	8014de4 <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 8014dc0:	687b      	ldr	r3, [r7, #4]
 8014dc2:	681b      	ldr	r3, [r3, #0]
 8014dc4:	681a      	ldr	r2, [r3, #0]
 8014dc6:	687b      	ldr	r3, [r7, #4]
 8014dc8:	681b      	ldr	r3, [r3, #0]
 8014dca:	f042 0201 	orr.w	r2, r2, #1
 8014dce:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8014dd0:	e008      	b.n	8014de4 <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8014dd2:	687b      	ldr	r3, [r7, #4]
 8014dd4:	681b      	ldr	r3, [r3, #0]
 8014dd6:	681a      	ldr	r2, [r3, #0]
 8014dd8:	687b      	ldr	r3, [r7, #4]
 8014dda:	681b      	ldr	r3, [r3, #0]
 8014ddc:	f042 0201 	orr.w	r2, r2, #1
 8014de0:	601a      	str	r2, [r3, #0]
 8014de2:	e000      	b.n	8014de6 <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8014de4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8014de6:	2300      	movs	r3, #0
}
 8014de8:	4618      	mov	r0, r3
 8014dea:	3710      	adds	r7, #16
 8014dec:	46bd      	mov	sp, r7
 8014dee:	bd80      	pop	{r7, pc}
 8014df0:	40012c00 	.word	0x40012c00
 8014df4:	40013400 	.word	0x40013400
 8014df8:	40014000 	.word	0x40014000
 8014dfc:	40014400 	.word	0x40014400
 8014e00:	40014800 	.word	0x40014800
 8014e04:	40000400 	.word	0x40000400
 8014e08:	40000800 	.word	0x40000800
 8014e0c:	40000c00 	.word	0x40000c00
 8014e10:	00010007 	.word	0x00010007

08014e14 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8014e14:	b580      	push	{r7, lr}
 8014e16:	b082      	sub	sp, #8
 8014e18:	af00      	add	r7, sp, #0
 8014e1a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8014e1c:	687b      	ldr	r3, [r7, #4]
 8014e1e:	2b00      	cmp	r3, #0
 8014e20:	d101      	bne.n	8014e26 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8014e22:	2301      	movs	r3, #1
 8014e24:	e049      	b.n	8014eba <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8014e26:	687b      	ldr	r3, [r7, #4]
 8014e28:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8014e2c:	b2db      	uxtb	r3, r3
 8014e2e:	2b00      	cmp	r3, #0
 8014e30:	d106      	bne.n	8014e40 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8014e32:	687b      	ldr	r3, [r7, #4]
 8014e34:	2200      	movs	r2, #0
 8014e36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8014e3a:	6878      	ldr	r0, [r7, #4]
 8014e3c:	f000 f841 	bl	8014ec2 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8014e40:	687b      	ldr	r3, [r7, #4]
 8014e42:	2202      	movs	r2, #2
 8014e44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8014e48:	687b      	ldr	r3, [r7, #4]
 8014e4a:	681a      	ldr	r2, [r3, #0]
 8014e4c:	687b      	ldr	r3, [r7, #4]
 8014e4e:	3304      	adds	r3, #4
 8014e50:	4619      	mov	r1, r3
 8014e52:	4610      	mov	r0, r2
 8014e54:	f000 feba 	bl	8015bcc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8014e58:	687b      	ldr	r3, [r7, #4]
 8014e5a:	2201      	movs	r2, #1
 8014e5c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8014e60:	687b      	ldr	r3, [r7, #4]
 8014e62:	2201      	movs	r2, #1
 8014e64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8014e68:	687b      	ldr	r3, [r7, #4]
 8014e6a:	2201      	movs	r2, #1
 8014e6c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8014e70:	687b      	ldr	r3, [r7, #4]
 8014e72:	2201      	movs	r2, #1
 8014e74:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8014e78:	687b      	ldr	r3, [r7, #4]
 8014e7a:	2201      	movs	r2, #1
 8014e7c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8014e80:	687b      	ldr	r3, [r7, #4]
 8014e82:	2201      	movs	r2, #1
 8014e84:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8014e88:	687b      	ldr	r3, [r7, #4]
 8014e8a:	2201      	movs	r2, #1
 8014e8c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8014e90:	687b      	ldr	r3, [r7, #4]
 8014e92:	2201      	movs	r2, #1
 8014e94:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8014e98:	687b      	ldr	r3, [r7, #4]
 8014e9a:	2201      	movs	r2, #1
 8014e9c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8014ea0:	687b      	ldr	r3, [r7, #4]
 8014ea2:	2201      	movs	r2, #1
 8014ea4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8014ea8:	687b      	ldr	r3, [r7, #4]
 8014eaa:	2201      	movs	r2, #1
 8014eac:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8014eb0:	687b      	ldr	r3, [r7, #4]
 8014eb2:	2201      	movs	r2, #1
 8014eb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8014eb8:	2300      	movs	r3, #0
}
 8014eba:	4618      	mov	r0, r3
 8014ebc:	3708      	adds	r7, #8
 8014ebe:	46bd      	mov	sp, r7
 8014ec0:	bd80      	pop	{r7, pc}

08014ec2 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8014ec2:	b480      	push	{r7}
 8014ec4:	b083      	sub	sp, #12
 8014ec6:	af00      	add	r7, sp, #0
 8014ec8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8014eca:	bf00      	nop
 8014ecc:	370c      	adds	r7, #12
 8014ece:	46bd      	mov	sp, r7
 8014ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014ed4:	4770      	bx	lr
	...

08014ed8 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8014ed8:	b580      	push	{r7, lr}
 8014eda:	b084      	sub	sp, #16
 8014edc:	af00      	add	r7, sp, #0
 8014ede:	6078      	str	r0, [r7, #4]
 8014ee0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8014ee2:	2300      	movs	r3, #0
 8014ee4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8014ee6:	683b      	ldr	r3, [r7, #0]
 8014ee8:	2b00      	cmp	r3, #0
 8014eea:	d104      	bne.n	8014ef6 <HAL_TIM_IC_Start_IT+0x1e>
 8014eec:	687b      	ldr	r3, [r7, #4]
 8014eee:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8014ef2:	b2db      	uxtb	r3, r3
 8014ef4:	e023      	b.n	8014f3e <HAL_TIM_IC_Start_IT+0x66>
 8014ef6:	683b      	ldr	r3, [r7, #0]
 8014ef8:	2b04      	cmp	r3, #4
 8014efa:	d104      	bne.n	8014f06 <HAL_TIM_IC_Start_IT+0x2e>
 8014efc:	687b      	ldr	r3, [r7, #4]
 8014efe:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8014f02:	b2db      	uxtb	r3, r3
 8014f04:	e01b      	b.n	8014f3e <HAL_TIM_IC_Start_IT+0x66>
 8014f06:	683b      	ldr	r3, [r7, #0]
 8014f08:	2b08      	cmp	r3, #8
 8014f0a:	d104      	bne.n	8014f16 <HAL_TIM_IC_Start_IT+0x3e>
 8014f0c:	687b      	ldr	r3, [r7, #4]
 8014f0e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8014f12:	b2db      	uxtb	r3, r3
 8014f14:	e013      	b.n	8014f3e <HAL_TIM_IC_Start_IT+0x66>
 8014f16:	683b      	ldr	r3, [r7, #0]
 8014f18:	2b0c      	cmp	r3, #12
 8014f1a:	d104      	bne.n	8014f26 <HAL_TIM_IC_Start_IT+0x4e>
 8014f1c:	687b      	ldr	r3, [r7, #4]
 8014f1e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8014f22:	b2db      	uxtb	r3, r3
 8014f24:	e00b      	b.n	8014f3e <HAL_TIM_IC_Start_IT+0x66>
 8014f26:	683b      	ldr	r3, [r7, #0]
 8014f28:	2b10      	cmp	r3, #16
 8014f2a:	d104      	bne.n	8014f36 <HAL_TIM_IC_Start_IT+0x5e>
 8014f2c:	687b      	ldr	r3, [r7, #4]
 8014f2e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8014f32:	b2db      	uxtb	r3, r3
 8014f34:	e003      	b.n	8014f3e <HAL_TIM_IC_Start_IT+0x66>
 8014f36:	687b      	ldr	r3, [r7, #4]
 8014f38:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8014f3c:	b2db      	uxtb	r3, r3
 8014f3e:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8014f40:	683b      	ldr	r3, [r7, #0]
 8014f42:	2b00      	cmp	r3, #0
 8014f44:	d104      	bne.n	8014f50 <HAL_TIM_IC_Start_IT+0x78>
 8014f46:	687b      	ldr	r3, [r7, #4]
 8014f48:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8014f4c:	b2db      	uxtb	r3, r3
 8014f4e:	e013      	b.n	8014f78 <HAL_TIM_IC_Start_IT+0xa0>
 8014f50:	683b      	ldr	r3, [r7, #0]
 8014f52:	2b04      	cmp	r3, #4
 8014f54:	d104      	bne.n	8014f60 <HAL_TIM_IC_Start_IT+0x88>
 8014f56:	687b      	ldr	r3, [r7, #4]
 8014f58:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8014f5c:	b2db      	uxtb	r3, r3
 8014f5e:	e00b      	b.n	8014f78 <HAL_TIM_IC_Start_IT+0xa0>
 8014f60:	683b      	ldr	r3, [r7, #0]
 8014f62:	2b08      	cmp	r3, #8
 8014f64:	d104      	bne.n	8014f70 <HAL_TIM_IC_Start_IT+0x98>
 8014f66:	687b      	ldr	r3, [r7, #4]
 8014f68:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8014f6c:	b2db      	uxtb	r3, r3
 8014f6e:	e003      	b.n	8014f78 <HAL_TIM_IC_Start_IT+0xa0>
 8014f70:	687b      	ldr	r3, [r7, #4]
 8014f72:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8014f76:	b2db      	uxtb	r3, r3
 8014f78:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8014f7a:	7bbb      	ldrb	r3, [r7, #14]
 8014f7c:	2b01      	cmp	r3, #1
 8014f7e:	d102      	bne.n	8014f86 <HAL_TIM_IC_Start_IT+0xae>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8014f80:	7b7b      	ldrb	r3, [r7, #13]
 8014f82:	2b01      	cmp	r3, #1
 8014f84:	d001      	beq.n	8014f8a <HAL_TIM_IC_Start_IT+0xb2>
  {
    return HAL_ERROR;
 8014f86:	2301      	movs	r3, #1
 8014f88:	e0dd      	b.n	8015146 <HAL_TIM_IC_Start_IT+0x26e>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8014f8a:	683b      	ldr	r3, [r7, #0]
 8014f8c:	2b00      	cmp	r3, #0
 8014f8e:	d104      	bne.n	8014f9a <HAL_TIM_IC_Start_IT+0xc2>
 8014f90:	687b      	ldr	r3, [r7, #4]
 8014f92:	2202      	movs	r2, #2
 8014f94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8014f98:	e023      	b.n	8014fe2 <HAL_TIM_IC_Start_IT+0x10a>
 8014f9a:	683b      	ldr	r3, [r7, #0]
 8014f9c:	2b04      	cmp	r3, #4
 8014f9e:	d104      	bne.n	8014faa <HAL_TIM_IC_Start_IT+0xd2>
 8014fa0:	687b      	ldr	r3, [r7, #4]
 8014fa2:	2202      	movs	r2, #2
 8014fa4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8014fa8:	e01b      	b.n	8014fe2 <HAL_TIM_IC_Start_IT+0x10a>
 8014faa:	683b      	ldr	r3, [r7, #0]
 8014fac:	2b08      	cmp	r3, #8
 8014fae:	d104      	bne.n	8014fba <HAL_TIM_IC_Start_IT+0xe2>
 8014fb0:	687b      	ldr	r3, [r7, #4]
 8014fb2:	2202      	movs	r2, #2
 8014fb4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8014fb8:	e013      	b.n	8014fe2 <HAL_TIM_IC_Start_IT+0x10a>
 8014fba:	683b      	ldr	r3, [r7, #0]
 8014fbc:	2b0c      	cmp	r3, #12
 8014fbe:	d104      	bne.n	8014fca <HAL_TIM_IC_Start_IT+0xf2>
 8014fc0:	687b      	ldr	r3, [r7, #4]
 8014fc2:	2202      	movs	r2, #2
 8014fc4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8014fc8:	e00b      	b.n	8014fe2 <HAL_TIM_IC_Start_IT+0x10a>
 8014fca:	683b      	ldr	r3, [r7, #0]
 8014fcc:	2b10      	cmp	r3, #16
 8014fce:	d104      	bne.n	8014fda <HAL_TIM_IC_Start_IT+0x102>
 8014fd0:	687b      	ldr	r3, [r7, #4]
 8014fd2:	2202      	movs	r2, #2
 8014fd4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8014fd8:	e003      	b.n	8014fe2 <HAL_TIM_IC_Start_IT+0x10a>
 8014fda:	687b      	ldr	r3, [r7, #4]
 8014fdc:	2202      	movs	r2, #2
 8014fde:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8014fe2:	683b      	ldr	r3, [r7, #0]
 8014fe4:	2b00      	cmp	r3, #0
 8014fe6:	d104      	bne.n	8014ff2 <HAL_TIM_IC_Start_IT+0x11a>
 8014fe8:	687b      	ldr	r3, [r7, #4]
 8014fea:	2202      	movs	r2, #2
 8014fec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8014ff0:	e013      	b.n	801501a <HAL_TIM_IC_Start_IT+0x142>
 8014ff2:	683b      	ldr	r3, [r7, #0]
 8014ff4:	2b04      	cmp	r3, #4
 8014ff6:	d104      	bne.n	8015002 <HAL_TIM_IC_Start_IT+0x12a>
 8014ff8:	687b      	ldr	r3, [r7, #4]
 8014ffa:	2202      	movs	r2, #2
 8014ffc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8015000:	e00b      	b.n	801501a <HAL_TIM_IC_Start_IT+0x142>
 8015002:	683b      	ldr	r3, [r7, #0]
 8015004:	2b08      	cmp	r3, #8
 8015006:	d104      	bne.n	8015012 <HAL_TIM_IC_Start_IT+0x13a>
 8015008:	687b      	ldr	r3, [r7, #4]
 801500a:	2202      	movs	r2, #2
 801500c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8015010:	e003      	b.n	801501a <HAL_TIM_IC_Start_IT+0x142>
 8015012:	687b      	ldr	r3, [r7, #4]
 8015014:	2202      	movs	r2, #2
 8015016:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  switch (Channel)
 801501a:	683b      	ldr	r3, [r7, #0]
 801501c:	2b0c      	cmp	r3, #12
 801501e:	d841      	bhi.n	80150a4 <HAL_TIM_IC_Start_IT+0x1cc>
 8015020:	a201      	add	r2, pc, #4	; (adr r2, 8015028 <HAL_TIM_IC_Start_IT+0x150>)
 8015022:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015026:	bf00      	nop
 8015028:	0801505d 	.word	0x0801505d
 801502c:	080150a5 	.word	0x080150a5
 8015030:	080150a5 	.word	0x080150a5
 8015034:	080150a5 	.word	0x080150a5
 8015038:	0801506f 	.word	0x0801506f
 801503c:	080150a5 	.word	0x080150a5
 8015040:	080150a5 	.word	0x080150a5
 8015044:	080150a5 	.word	0x080150a5
 8015048:	08015081 	.word	0x08015081
 801504c:	080150a5 	.word	0x080150a5
 8015050:	080150a5 	.word	0x080150a5
 8015054:	080150a5 	.word	0x080150a5
 8015058:	08015093 	.word	0x08015093
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 801505c:	687b      	ldr	r3, [r7, #4]
 801505e:	681b      	ldr	r3, [r3, #0]
 8015060:	68da      	ldr	r2, [r3, #12]
 8015062:	687b      	ldr	r3, [r7, #4]
 8015064:	681b      	ldr	r3, [r3, #0]
 8015066:	f042 0202 	orr.w	r2, r2, #2
 801506a:	60da      	str	r2, [r3, #12]
      break;
 801506c:	e01d      	b.n	80150aa <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 801506e:	687b      	ldr	r3, [r7, #4]
 8015070:	681b      	ldr	r3, [r3, #0]
 8015072:	68da      	ldr	r2, [r3, #12]
 8015074:	687b      	ldr	r3, [r7, #4]
 8015076:	681b      	ldr	r3, [r3, #0]
 8015078:	f042 0204 	orr.w	r2, r2, #4
 801507c:	60da      	str	r2, [r3, #12]
      break;
 801507e:	e014      	b.n	80150aa <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8015080:	687b      	ldr	r3, [r7, #4]
 8015082:	681b      	ldr	r3, [r3, #0]
 8015084:	68da      	ldr	r2, [r3, #12]
 8015086:	687b      	ldr	r3, [r7, #4]
 8015088:	681b      	ldr	r3, [r3, #0]
 801508a:	f042 0208 	orr.w	r2, r2, #8
 801508e:	60da      	str	r2, [r3, #12]
      break;
 8015090:	e00b      	b.n	80150aa <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8015092:	687b      	ldr	r3, [r7, #4]
 8015094:	681b      	ldr	r3, [r3, #0]
 8015096:	68da      	ldr	r2, [r3, #12]
 8015098:	687b      	ldr	r3, [r7, #4]
 801509a:	681b      	ldr	r3, [r3, #0]
 801509c:	f042 0210 	orr.w	r2, r2, #16
 80150a0:	60da      	str	r2, [r3, #12]
      break;
 80150a2:	e002      	b.n	80150aa <HAL_TIM_IC_Start_IT+0x1d2>
    }

    default:
      status = HAL_ERROR;
 80150a4:	2301      	movs	r3, #1
 80150a6:	73fb      	strb	r3, [r7, #15]
      break;
 80150a8:	bf00      	nop
  }

  if (status == HAL_OK)
 80150aa:	7bfb      	ldrb	r3, [r7, #15]
 80150ac:	2b00      	cmp	r3, #0
 80150ae:	d149      	bne.n	8015144 <HAL_TIM_IC_Start_IT+0x26c>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80150b0:	687b      	ldr	r3, [r7, #4]
 80150b2:	681b      	ldr	r3, [r3, #0]
 80150b4:	2201      	movs	r2, #1
 80150b6:	6839      	ldr	r1, [r7, #0]
 80150b8:	4618      	mov	r0, r3
 80150ba:	f001 fab7 	bl	801662c <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80150be:	687b      	ldr	r3, [r7, #4]
 80150c0:	681b      	ldr	r3, [r3, #0]
 80150c2:	4a23      	ldr	r2, [pc, #140]	; (8015150 <HAL_TIM_IC_Start_IT+0x278>)
 80150c4:	4293      	cmp	r3, r2
 80150c6:	d01d      	beq.n	8015104 <HAL_TIM_IC_Start_IT+0x22c>
 80150c8:	687b      	ldr	r3, [r7, #4]
 80150ca:	681b      	ldr	r3, [r3, #0]
 80150cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80150d0:	d018      	beq.n	8015104 <HAL_TIM_IC_Start_IT+0x22c>
 80150d2:	687b      	ldr	r3, [r7, #4]
 80150d4:	681b      	ldr	r3, [r3, #0]
 80150d6:	4a1f      	ldr	r2, [pc, #124]	; (8015154 <HAL_TIM_IC_Start_IT+0x27c>)
 80150d8:	4293      	cmp	r3, r2
 80150da:	d013      	beq.n	8015104 <HAL_TIM_IC_Start_IT+0x22c>
 80150dc:	687b      	ldr	r3, [r7, #4]
 80150de:	681b      	ldr	r3, [r3, #0]
 80150e0:	4a1d      	ldr	r2, [pc, #116]	; (8015158 <HAL_TIM_IC_Start_IT+0x280>)
 80150e2:	4293      	cmp	r3, r2
 80150e4:	d00e      	beq.n	8015104 <HAL_TIM_IC_Start_IT+0x22c>
 80150e6:	687b      	ldr	r3, [r7, #4]
 80150e8:	681b      	ldr	r3, [r3, #0]
 80150ea:	4a1c      	ldr	r2, [pc, #112]	; (801515c <HAL_TIM_IC_Start_IT+0x284>)
 80150ec:	4293      	cmp	r3, r2
 80150ee:	d009      	beq.n	8015104 <HAL_TIM_IC_Start_IT+0x22c>
 80150f0:	687b      	ldr	r3, [r7, #4]
 80150f2:	681b      	ldr	r3, [r3, #0]
 80150f4:	4a1a      	ldr	r2, [pc, #104]	; (8015160 <HAL_TIM_IC_Start_IT+0x288>)
 80150f6:	4293      	cmp	r3, r2
 80150f8:	d004      	beq.n	8015104 <HAL_TIM_IC_Start_IT+0x22c>
 80150fa:	687b      	ldr	r3, [r7, #4]
 80150fc:	681b      	ldr	r3, [r3, #0]
 80150fe:	4a19      	ldr	r2, [pc, #100]	; (8015164 <HAL_TIM_IC_Start_IT+0x28c>)
 8015100:	4293      	cmp	r3, r2
 8015102:	d115      	bne.n	8015130 <HAL_TIM_IC_Start_IT+0x258>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8015104:	687b      	ldr	r3, [r7, #4]
 8015106:	681b      	ldr	r3, [r3, #0]
 8015108:	689a      	ldr	r2, [r3, #8]
 801510a:	4b17      	ldr	r3, [pc, #92]	; (8015168 <HAL_TIM_IC_Start_IT+0x290>)
 801510c:	4013      	ands	r3, r2
 801510e:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8015110:	68bb      	ldr	r3, [r7, #8]
 8015112:	2b06      	cmp	r3, #6
 8015114:	d015      	beq.n	8015142 <HAL_TIM_IC_Start_IT+0x26a>
 8015116:	68bb      	ldr	r3, [r7, #8]
 8015118:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801511c:	d011      	beq.n	8015142 <HAL_TIM_IC_Start_IT+0x26a>
      {
        __HAL_TIM_ENABLE(htim);
 801511e:	687b      	ldr	r3, [r7, #4]
 8015120:	681b      	ldr	r3, [r3, #0]
 8015122:	681a      	ldr	r2, [r3, #0]
 8015124:	687b      	ldr	r3, [r7, #4]
 8015126:	681b      	ldr	r3, [r3, #0]
 8015128:	f042 0201 	orr.w	r2, r2, #1
 801512c:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801512e:	e008      	b.n	8015142 <HAL_TIM_IC_Start_IT+0x26a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8015130:	687b      	ldr	r3, [r7, #4]
 8015132:	681b      	ldr	r3, [r3, #0]
 8015134:	681a      	ldr	r2, [r3, #0]
 8015136:	687b      	ldr	r3, [r7, #4]
 8015138:	681b      	ldr	r3, [r3, #0]
 801513a:	f042 0201 	orr.w	r2, r2, #1
 801513e:	601a      	str	r2, [r3, #0]
 8015140:	e000      	b.n	8015144 <HAL_TIM_IC_Start_IT+0x26c>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8015142:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8015144:	7bfb      	ldrb	r3, [r7, #15]
}
 8015146:	4618      	mov	r0, r3
 8015148:	3710      	adds	r7, #16
 801514a:	46bd      	mov	sp, r7
 801514c:	bd80      	pop	{r7, pc}
 801514e:	bf00      	nop
 8015150:	40012c00 	.word	0x40012c00
 8015154:	40000400 	.word	0x40000400
 8015158:	40000800 	.word	0x40000800
 801515c:	40000c00 	.word	0x40000c00
 8015160:	40013400 	.word	0x40013400
 8015164:	40014000 	.word	0x40014000
 8015168:	00010007 	.word	0x00010007

0801516c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 801516c:	b580      	push	{r7, lr}
 801516e:	b086      	sub	sp, #24
 8015170:	af00      	add	r7, sp, #0
 8015172:	6078      	str	r0, [r7, #4]
 8015174:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8015176:	687b      	ldr	r3, [r7, #4]
 8015178:	2b00      	cmp	r3, #0
 801517a:	d101      	bne.n	8015180 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 801517c:	2301      	movs	r3, #1
 801517e:	e097      	b.n	80152b0 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8015180:	687b      	ldr	r3, [r7, #4]
 8015182:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8015186:	b2db      	uxtb	r3, r3
 8015188:	2b00      	cmp	r3, #0
 801518a:	d106      	bne.n	801519a <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 801518c:	687b      	ldr	r3, [r7, #4]
 801518e:	2200      	movs	r2, #0
 8015190:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8015194:	6878      	ldr	r0, [r7, #4]
 8015196:	f7f9 f895 	bl	800e2c4 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801519a:	687b      	ldr	r3, [r7, #4]
 801519c:	2202      	movs	r2, #2
 801519e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80151a2:	687b      	ldr	r3, [r7, #4]
 80151a4:	681b      	ldr	r3, [r3, #0]
 80151a6:	689b      	ldr	r3, [r3, #8]
 80151a8:	687a      	ldr	r2, [r7, #4]
 80151aa:	6812      	ldr	r2, [r2, #0]
 80151ac:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 80151b0:	f023 0307 	bic.w	r3, r3, #7
 80151b4:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80151b6:	687b      	ldr	r3, [r7, #4]
 80151b8:	681a      	ldr	r2, [r3, #0]
 80151ba:	687b      	ldr	r3, [r7, #4]
 80151bc:	3304      	adds	r3, #4
 80151be:	4619      	mov	r1, r3
 80151c0:	4610      	mov	r0, r2
 80151c2:	f000 fd03 	bl	8015bcc <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80151c6:	687b      	ldr	r3, [r7, #4]
 80151c8:	681b      	ldr	r3, [r3, #0]
 80151ca:	689b      	ldr	r3, [r3, #8]
 80151cc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80151ce:	687b      	ldr	r3, [r7, #4]
 80151d0:	681b      	ldr	r3, [r3, #0]
 80151d2:	699b      	ldr	r3, [r3, #24]
 80151d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80151d6:	687b      	ldr	r3, [r7, #4]
 80151d8:	681b      	ldr	r3, [r3, #0]
 80151da:	6a1b      	ldr	r3, [r3, #32]
 80151dc:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80151de:	683b      	ldr	r3, [r7, #0]
 80151e0:	681b      	ldr	r3, [r3, #0]
 80151e2:	697a      	ldr	r2, [r7, #20]
 80151e4:	4313      	orrs	r3, r2
 80151e6:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80151e8:	693b      	ldr	r3, [r7, #16]
 80151ea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80151ee:	f023 0303 	bic.w	r3, r3, #3
 80151f2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80151f4:	683b      	ldr	r3, [r7, #0]
 80151f6:	689a      	ldr	r2, [r3, #8]
 80151f8:	683b      	ldr	r3, [r7, #0]
 80151fa:	699b      	ldr	r3, [r3, #24]
 80151fc:	021b      	lsls	r3, r3, #8
 80151fe:	4313      	orrs	r3, r2
 8015200:	693a      	ldr	r2, [r7, #16]
 8015202:	4313      	orrs	r3, r2
 8015204:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8015206:	693b      	ldr	r3, [r7, #16]
 8015208:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 801520c:	f023 030c 	bic.w	r3, r3, #12
 8015210:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8015212:	693b      	ldr	r3, [r7, #16]
 8015214:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8015218:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 801521c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 801521e:	683b      	ldr	r3, [r7, #0]
 8015220:	68da      	ldr	r2, [r3, #12]
 8015222:	683b      	ldr	r3, [r7, #0]
 8015224:	69db      	ldr	r3, [r3, #28]
 8015226:	021b      	lsls	r3, r3, #8
 8015228:	4313      	orrs	r3, r2
 801522a:	693a      	ldr	r2, [r7, #16]
 801522c:	4313      	orrs	r3, r2
 801522e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8015230:	683b      	ldr	r3, [r7, #0]
 8015232:	691b      	ldr	r3, [r3, #16]
 8015234:	011a      	lsls	r2, r3, #4
 8015236:	683b      	ldr	r3, [r7, #0]
 8015238:	6a1b      	ldr	r3, [r3, #32]
 801523a:	031b      	lsls	r3, r3, #12
 801523c:	4313      	orrs	r3, r2
 801523e:	693a      	ldr	r2, [r7, #16]
 8015240:	4313      	orrs	r3, r2
 8015242:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8015244:	68fb      	ldr	r3, [r7, #12]
 8015246:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 801524a:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 801524c:	68fb      	ldr	r3, [r7, #12]
 801524e:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8015252:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8015254:	683b      	ldr	r3, [r7, #0]
 8015256:	685a      	ldr	r2, [r3, #4]
 8015258:	683b      	ldr	r3, [r7, #0]
 801525a:	695b      	ldr	r3, [r3, #20]
 801525c:	011b      	lsls	r3, r3, #4
 801525e:	4313      	orrs	r3, r2
 8015260:	68fa      	ldr	r2, [r7, #12]
 8015262:	4313      	orrs	r3, r2
 8015264:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8015266:	687b      	ldr	r3, [r7, #4]
 8015268:	681b      	ldr	r3, [r3, #0]
 801526a:	697a      	ldr	r2, [r7, #20]
 801526c:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 801526e:	687b      	ldr	r3, [r7, #4]
 8015270:	681b      	ldr	r3, [r3, #0]
 8015272:	693a      	ldr	r2, [r7, #16]
 8015274:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8015276:	687b      	ldr	r3, [r7, #4]
 8015278:	681b      	ldr	r3, [r3, #0]
 801527a:	68fa      	ldr	r2, [r7, #12]
 801527c:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 801527e:	687b      	ldr	r3, [r7, #4]
 8015280:	2201      	movs	r2, #1
 8015282:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8015286:	687b      	ldr	r3, [r7, #4]
 8015288:	2201      	movs	r2, #1
 801528a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 801528e:	687b      	ldr	r3, [r7, #4]
 8015290:	2201      	movs	r2, #1
 8015292:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8015296:	687b      	ldr	r3, [r7, #4]
 8015298:	2201      	movs	r2, #1
 801529a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 801529e:	687b      	ldr	r3, [r7, #4]
 80152a0:	2201      	movs	r2, #1
 80152a2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80152a6:	687b      	ldr	r3, [r7, #4]
 80152a8:	2201      	movs	r2, #1
 80152aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80152ae:	2300      	movs	r3, #0
}
 80152b0:	4618      	mov	r0, r3
 80152b2:	3718      	adds	r7, #24
 80152b4:	46bd      	mov	sp, r7
 80152b6:	bd80      	pop	{r7, pc}

080152b8 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80152b8:	b580      	push	{r7, lr}
 80152ba:	b084      	sub	sp, #16
 80152bc:	af00      	add	r7, sp, #0
 80152be:	6078      	str	r0, [r7, #4]
 80152c0:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80152c2:	687b      	ldr	r3, [r7, #4]
 80152c4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80152c8:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80152ca:	687b      	ldr	r3, [r7, #4]
 80152cc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80152d0:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80152d2:	687b      	ldr	r3, [r7, #4]
 80152d4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80152d8:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80152da:	687b      	ldr	r3, [r7, #4]
 80152dc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80152e0:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80152e2:	683b      	ldr	r3, [r7, #0]
 80152e4:	2b00      	cmp	r3, #0
 80152e6:	d110      	bne.n	801530a <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80152e8:	7bfb      	ldrb	r3, [r7, #15]
 80152ea:	2b01      	cmp	r3, #1
 80152ec:	d102      	bne.n	80152f4 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80152ee:	7b7b      	ldrb	r3, [r7, #13]
 80152f0:	2b01      	cmp	r3, #1
 80152f2:	d001      	beq.n	80152f8 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 80152f4:	2301      	movs	r3, #1
 80152f6:	e069      	b.n	80153cc <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80152f8:	687b      	ldr	r3, [r7, #4]
 80152fa:	2202      	movs	r2, #2
 80152fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8015300:	687b      	ldr	r3, [r7, #4]
 8015302:	2202      	movs	r2, #2
 8015304:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8015308:	e031      	b.n	801536e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 801530a:	683b      	ldr	r3, [r7, #0]
 801530c:	2b04      	cmp	r3, #4
 801530e:	d110      	bne.n	8015332 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8015310:	7bbb      	ldrb	r3, [r7, #14]
 8015312:	2b01      	cmp	r3, #1
 8015314:	d102      	bne.n	801531c <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8015316:	7b3b      	ldrb	r3, [r7, #12]
 8015318:	2b01      	cmp	r3, #1
 801531a:	d001      	beq.n	8015320 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 801531c:	2301      	movs	r3, #1
 801531e:	e055      	b.n	80153cc <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8015320:	687b      	ldr	r3, [r7, #4]
 8015322:	2202      	movs	r2, #2
 8015324:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8015328:	687b      	ldr	r3, [r7, #4]
 801532a:	2202      	movs	r2, #2
 801532c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8015330:	e01d      	b.n	801536e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8015332:	7bfb      	ldrb	r3, [r7, #15]
 8015334:	2b01      	cmp	r3, #1
 8015336:	d108      	bne.n	801534a <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8015338:	7bbb      	ldrb	r3, [r7, #14]
 801533a:	2b01      	cmp	r3, #1
 801533c:	d105      	bne.n	801534a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 801533e:	7b7b      	ldrb	r3, [r7, #13]
 8015340:	2b01      	cmp	r3, #1
 8015342:	d102      	bne.n	801534a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8015344:	7b3b      	ldrb	r3, [r7, #12]
 8015346:	2b01      	cmp	r3, #1
 8015348:	d001      	beq.n	801534e <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 801534a:	2301      	movs	r3, #1
 801534c:	e03e      	b.n	80153cc <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 801534e:	687b      	ldr	r3, [r7, #4]
 8015350:	2202      	movs	r2, #2
 8015352:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8015356:	687b      	ldr	r3, [r7, #4]
 8015358:	2202      	movs	r2, #2
 801535a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 801535e:	687b      	ldr	r3, [r7, #4]
 8015360:	2202      	movs	r2, #2
 8015362:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8015366:	687b      	ldr	r3, [r7, #4]
 8015368:	2202      	movs	r2, #2
 801536a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 801536e:	683b      	ldr	r3, [r7, #0]
 8015370:	2b00      	cmp	r3, #0
 8015372:	d003      	beq.n	801537c <HAL_TIM_Encoder_Start+0xc4>
 8015374:	683b      	ldr	r3, [r7, #0]
 8015376:	2b04      	cmp	r3, #4
 8015378:	d008      	beq.n	801538c <HAL_TIM_Encoder_Start+0xd4>
 801537a:	e00f      	b.n	801539c <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 801537c:	687b      	ldr	r3, [r7, #4]
 801537e:	681b      	ldr	r3, [r3, #0]
 8015380:	2201      	movs	r2, #1
 8015382:	2100      	movs	r1, #0
 8015384:	4618      	mov	r0, r3
 8015386:	f001 f951 	bl	801662c <TIM_CCxChannelCmd>
      break;
 801538a:	e016      	b.n	80153ba <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 801538c:	687b      	ldr	r3, [r7, #4]
 801538e:	681b      	ldr	r3, [r3, #0]
 8015390:	2201      	movs	r2, #1
 8015392:	2104      	movs	r1, #4
 8015394:	4618      	mov	r0, r3
 8015396:	f001 f949 	bl	801662c <TIM_CCxChannelCmd>
      break;
 801539a:	e00e      	b.n	80153ba <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 801539c:	687b      	ldr	r3, [r7, #4]
 801539e:	681b      	ldr	r3, [r3, #0]
 80153a0:	2201      	movs	r2, #1
 80153a2:	2100      	movs	r1, #0
 80153a4:	4618      	mov	r0, r3
 80153a6:	f001 f941 	bl	801662c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80153aa:	687b      	ldr	r3, [r7, #4]
 80153ac:	681b      	ldr	r3, [r3, #0]
 80153ae:	2201      	movs	r2, #1
 80153b0:	2104      	movs	r1, #4
 80153b2:	4618      	mov	r0, r3
 80153b4:	f001 f93a 	bl	801662c <TIM_CCxChannelCmd>
      break;
 80153b8:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80153ba:	687b      	ldr	r3, [r7, #4]
 80153bc:	681b      	ldr	r3, [r3, #0]
 80153be:	681a      	ldr	r2, [r3, #0]
 80153c0:	687b      	ldr	r3, [r7, #4]
 80153c2:	681b      	ldr	r3, [r3, #0]
 80153c4:	f042 0201 	orr.w	r2, r2, #1
 80153c8:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80153ca:	2300      	movs	r3, #0
}
 80153cc:	4618      	mov	r0, r3
 80153ce:	3710      	adds	r7, #16
 80153d0:	46bd      	mov	sp, r7
 80153d2:	bd80      	pop	{r7, pc}

080153d4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80153d4:	b580      	push	{r7, lr}
 80153d6:	b082      	sub	sp, #8
 80153d8:	af00      	add	r7, sp, #0
 80153da:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80153dc:	687b      	ldr	r3, [r7, #4]
 80153de:	681b      	ldr	r3, [r3, #0]
 80153e0:	691b      	ldr	r3, [r3, #16]
 80153e2:	f003 0302 	and.w	r3, r3, #2
 80153e6:	2b02      	cmp	r3, #2
 80153e8:	d122      	bne.n	8015430 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80153ea:	687b      	ldr	r3, [r7, #4]
 80153ec:	681b      	ldr	r3, [r3, #0]
 80153ee:	68db      	ldr	r3, [r3, #12]
 80153f0:	f003 0302 	and.w	r3, r3, #2
 80153f4:	2b02      	cmp	r3, #2
 80153f6:	d11b      	bne.n	8015430 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80153f8:	687b      	ldr	r3, [r7, #4]
 80153fa:	681b      	ldr	r3, [r3, #0]
 80153fc:	f06f 0202 	mvn.w	r2, #2
 8015400:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8015402:	687b      	ldr	r3, [r7, #4]
 8015404:	2201      	movs	r2, #1
 8015406:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8015408:	687b      	ldr	r3, [r7, #4]
 801540a:	681b      	ldr	r3, [r3, #0]
 801540c:	699b      	ldr	r3, [r3, #24]
 801540e:	f003 0303 	and.w	r3, r3, #3
 8015412:	2b00      	cmp	r3, #0
 8015414:	d003      	beq.n	801541e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8015416:	6878      	ldr	r0, [r7, #4]
 8015418:	f7ec fe12 	bl	8002040 <HAL_TIM_IC_CaptureCallback>
 801541c:	e005      	b.n	801542a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 801541e:	6878      	ldr	r0, [r7, #4]
 8015420:	f000 fbb6 	bl	8015b90 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8015424:	6878      	ldr	r0, [r7, #4]
 8015426:	f000 fbbd 	bl	8015ba4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801542a:	687b      	ldr	r3, [r7, #4]
 801542c:	2200      	movs	r2, #0
 801542e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8015430:	687b      	ldr	r3, [r7, #4]
 8015432:	681b      	ldr	r3, [r3, #0]
 8015434:	691b      	ldr	r3, [r3, #16]
 8015436:	f003 0304 	and.w	r3, r3, #4
 801543a:	2b04      	cmp	r3, #4
 801543c:	d122      	bne.n	8015484 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 801543e:	687b      	ldr	r3, [r7, #4]
 8015440:	681b      	ldr	r3, [r3, #0]
 8015442:	68db      	ldr	r3, [r3, #12]
 8015444:	f003 0304 	and.w	r3, r3, #4
 8015448:	2b04      	cmp	r3, #4
 801544a:	d11b      	bne.n	8015484 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 801544c:	687b      	ldr	r3, [r7, #4]
 801544e:	681b      	ldr	r3, [r3, #0]
 8015450:	f06f 0204 	mvn.w	r2, #4
 8015454:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8015456:	687b      	ldr	r3, [r7, #4]
 8015458:	2202      	movs	r2, #2
 801545a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 801545c:	687b      	ldr	r3, [r7, #4]
 801545e:	681b      	ldr	r3, [r3, #0]
 8015460:	699b      	ldr	r3, [r3, #24]
 8015462:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8015466:	2b00      	cmp	r3, #0
 8015468:	d003      	beq.n	8015472 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 801546a:	6878      	ldr	r0, [r7, #4]
 801546c:	f7ec fde8 	bl	8002040 <HAL_TIM_IC_CaptureCallback>
 8015470:	e005      	b.n	801547e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8015472:	6878      	ldr	r0, [r7, #4]
 8015474:	f000 fb8c 	bl	8015b90 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8015478:	6878      	ldr	r0, [r7, #4]
 801547a:	f000 fb93 	bl	8015ba4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801547e:	687b      	ldr	r3, [r7, #4]
 8015480:	2200      	movs	r2, #0
 8015482:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8015484:	687b      	ldr	r3, [r7, #4]
 8015486:	681b      	ldr	r3, [r3, #0]
 8015488:	691b      	ldr	r3, [r3, #16]
 801548a:	f003 0308 	and.w	r3, r3, #8
 801548e:	2b08      	cmp	r3, #8
 8015490:	d122      	bne.n	80154d8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8015492:	687b      	ldr	r3, [r7, #4]
 8015494:	681b      	ldr	r3, [r3, #0]
 8015496:	68db      	ldr	r3, [r3, #12]
 8015498:	f003 0308 	and.w	r3, r3, #8
 801549c:	2b08      	cmp	r3, #8
 801549e:	d11b      	bne.n	80154d8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80154a0:	687b      	ldr	r3, [r7, #4]
 80154a2:	681b      	ldr	r3, [r3, #0]
 80154a4:	f06f 0208 	mvn.w	r2, #8
 80154a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80154aa:	687b      	ldr	r3, [r7, #4]
 80154ac:	2204      	movs	r2, #4
 80154ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80154b0:	687b      	ldr	r3, [r7, #4]
 80154b2:	681b      	ldr	r3, [r3, #0]
 80154b4:	69db      	ldr	r3, [r3, #28]
 80154b6:	f003 0303 	and.w	r3, r3, #3
 80154ba:	2b00      	cmp	r3, #0
 80154bc:	d003      	beq.n	80154c6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80154be:	6878      	ldr	r0, [r7, #4]
 80154c0:	f7ec fdbe 	bl	8002040 <HAL_TIM_IC_CaptureCallback>
 80154c4:	e005      	b.n	80154d2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80154c6:	6878      	ldr	r0, [r7, #4]
 80154c8:	f000 fb62 	bl	8015b90 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80154cc:	6878      	ldr	r0, [r7, #4]
 80154ce:	f000 fb69 	bl	8015ba4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80154d2:	687b      	ldr	r3, [r7, #4]
 80154d4:	2200      	movs	r2, #0
 80154d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80154d8:	687b      	ldr	r3, [r7, #4]
 80154da:	681b      	ldr	r3, [r3, #0]
 80154dc:	691b      	ldr	r3, [r3, #16]
 80154de:	f003 0310 	and.w	r3, r3, #16
 80154e2:	2b10      	cmp	r3, #16
 80154e4:	d122      	bne.n	801552c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80154e6:	687b      	ldr	r3, [r7, #4]
 80154e8:	681b      	ldr	r3, [r3, #0]
 80154ea:	68db      	ldr	r3, [r3, #12]
 80154ec:	f003 0310 	and.w	r3, r3, #16
 80154f0:	2b10      	cmp	r3, #16
 80154f2:	d11b      	bne.n	801552c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80154f4:	687b      	ldr	r3, [r7, #4]
 80154f6:	681b      	ldr	r3, [r3, #0]
 80154f8:	f06f 0210 	mvn.w	r2, #16
 80154fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80154fe:	687b      	ldr	r3, [r7, #4]
 8015500:	2208      	movs	r2, #8
 8015502:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8015504:	687b      	ldr	r3, [r7, #4]
 8015506:	681b      	ldr	r3, [r3, #0]
 8015508:	69db      	ldr	r3, [r3, #28]
 801550a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 801550e:	2b00      	cmp	r3, #0
 8015510:	d003      	beq.n	801551a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8015512:	6878      	ldr	r0, [r7, #4]
 8015514:	f7ec fd94 	bl	8002040 <HAL_TIM_IC_CaptureCallback>
 8015518:	e005      	b.n	8015526 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 801551a:	6878      	ldr	r0, [r7, #4]
 801551c:	f000 fb38 	bl	8015b90 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8015520:	6878      	ldr	r0, [r7, #4]
 8015522:	f000 fb3f 	bl	8015ba4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8015526:	687b      	ldr	r3, [r7, #4]
 8015528:	2200      	movs	r2, #0
 801552a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 801552c:	687b      	ldr	r3, [r7, #4]
 801552e:	681b      	ldr	r3, [r3, #0]
 8015530:	691b      	ldr	r3, [r3, #16]
 8015532:	f003 0301 	and.w	r3, r3, #1
 8015536:	2b01      	cmp	r3, #1
 8015538:	d10e      	bne.n	8015558 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 801553a:	687b      	ldr	r3, [r7, #4]
 801553c:	681b      	ldr	r3, [r3, #0]
 801553e:	68db      	ldr	r3, [r3, #12]
 8015540:	f003 0301 	and.w	r3, r3, #1
 8015544:	2b01      	cmp	r3, #1
 8015546:	d107      	bne.n	8015558 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8015548:	687b      	ldr	r3, [r7, #4]
 801554a:	681b      	ldr	r3, [r3, #0]
 801554c:	f06f 0201 	mvn.w	r2, #1
 8015550:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8015552:	6878      	ldr	r0, [r7, #4]
 8015554:	f7f8 fab6 	bl	800dac4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8015558:	687b      	ldr	r3, [r7, #4]
 801555a:	681b      	ldr	r3, [r3, #0]
 801555c:	691b      	ldr	r3, [r3, #16]
 801555e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8015562:	2b80      	cmp	r3, #128	; 0x80
 8015564:	d10e      	bne.n	8015584 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8015566:	687b      	ldr	r3, [r7, #4]
 8015568:	681b      	ldr	r3, [r3, #0]
 801556a:	68db      	ldr	r3, [r3, #12]
 801556c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8015570:	2b80      	cmp	r3, #128	; 0x80
 8015572:	d107      	bne.n	8015584 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8015574:	687b      	ldr	r3, [r7, #4]
 8015576:	681b      	ldr	r3, [r3, #0]
 8015578:	f06f 0280 	mvn.w	r2, #128	; 0x80
 801557c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 801557e:	6878      	ldr	r0, [r7, #4]
 8015580:	f001 f9ac 	bl	80168dc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8015584:	687b      	ldr	r3, [r7, #4]
 8015586:	681b      	ldr	r3, [r3, #0]
 8015588:	691b      	ldr	r3, [r3, #16]
 801558a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801558e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8015592:	d10e      	bne.n	80155b2 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8015594:	687b      	ldr	r3, [r7, #4]
 8015596:	681b      	ldr	r3, [r3, #0]
 8015598:	68db      	ldr	r3, [r3, #12]
 801559a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801559e:	2b80      	cmp	r3, #128	; 0x80
 80155a0:	d107      	bne.n	80155b2 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80155a2:	687b      	ldr	r3, [r7, #4]
 80155a4:	681b      	ldr	r3, [r3, #0]
 80155a6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80155aa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80155ac:	6878      	ldr	r0, [r7, #4]
 80155ae:	f001 f99f 	bl	80168f0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80155b2:	687b      	ldr	r3, [r7, #4]
 80155b4:	681b      	ldr	r3, [r3, #0]
 80155b6:	691b      	ldr	r3, [r3, #16]
 80155b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80155bc:	2b40      	cmp	r3, #64	; 0x40
 80155be:	d10e      	bne.n	80155de <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80155c0:	687b      	ldr	r3, [r7, #4]
 80155c2:	681b      	ldr	r3, [r3, #0]
 80155c4:	68db      	ldr	r3, [r3, #12]
 80155c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80155ca:	2b40      	cmp	r3, #64	; 0x40
 80155cc:	d107      	bne.n	80155de <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80155ce:	687b      	ldr	r3, [r7, #4]
 80155d0:	681b      	ldr	r3, [r3, #0]
 80155d2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80155d6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80155d8:	6878      	ldr	r0, [r7, #4]
 80155da:	f000 faed 	bl	8015bb8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80155de:	687b      	ldr	r3, [r7, #4]
 80155e0:	681b      	ldr	r3, [r3, #0]
 80155e2:	691b      	ldr	r3, [r3, #16]
 80155e4:	f003 0320 	and.w	r3, r3, #32
 80155e8:	2b20      	cmp	r3, #32
 80155ea:	d10e      	bne.n	801560a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80155ec:	687b      	ldr	r3, [r7, #4]
 80155ee:	681b      	ldr	r3, [r3, #0]
 80155f0:	68db      	ldr	r3, [r3, #12]
 80155f2:	f003 0320 	and.w	r3, r3, #32
 80155f6:	2b20      	cmp	r3, #32
 80155f8:	d107      	bne.n	801560a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80155fa:	687b      	ldr	r3, [r7, #4]
 80155fc:	681b      	ldr	r3, [r3, #0]
 80155fe:	f06f 0220 	mvn.w	r2, #32
 8015602:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8015604:	6878      	ldr	r0, [r7, #4]
 8015606:	f001 f95f 	bl	80168c8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 801560a:	bf00      	nop
 801560c:	3708      	adds	r7, #8
 801560e:	46bd      	mov	sp, r7
 8015610:	bd80      	pop	{r7, pc}

08015612 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8015612:	b580      	push	{r7, lr}
 8015614:	b086      	sub	sp, #24
 8015616:	af00      	add	r7, sp, #0
 8015618:	60f8      	str	r0, [r7, #12]
 801561a:	60b9      	str	r1, [r7, #8]
 801561c:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 801561e:	2300      	movs	r3, #0
 8015620:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8015622:	68fb      	ldr	r3, [r7, #12]
 8015624:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8015628:	2b01      	cmp	r3, #1
 801562a:	d101      	bne.n	8015630 <HAL_TIM_IC_ConfigChannel+0x1e>
 801562c:	2302      	movs	r3, #2
 801562e:	e088      	b.n	8015742 <HAL_TIM_IC_ConfigChannel+0x130>
 8015630:	68fb      	ldr	r3, [r7, #12]
 8015632:	2201      	movs	r2, #1
 8015634:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8015638:	687b      	ldr	r3, [r7, #4]
 801563a:	2b00      	cmp	r3, #0
 801563c:	d11b      	bne.n	8015676 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 801563e:	68fb      	ldr	r3, [r7, #12]
 8015640:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8015642:	68bb      	ldr	r3, [r7, #8]
 8015644:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8015646:	68bb      	ldr	r3, [r7, #8]
 8015648:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 801564a:	68bb      	ldr	r3, [r7, #8]
 801564c:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 801564e:	f000 fe2d 	bl	80162ac <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8015652:	68fb      	ldr	r3, [r7, #12]
 8015654:	681b      	ldr	r3, [r3, #0]
 8015656:	699a      	ldr	r2, [r3, #24]
 8015658:	68fb      	ldr	r3, [r7, #12]
 801565a:	681b      	ldr	r3, [r3, #0]
 801565c:	f022 020c 	bic.w	r2, r2, #12
 8015660:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8015662:	68fb      	ldr	r3, [r7, #12]
 8015664:	681b      	ldr	r3, [r3, #0]
 8015666:	6999      	ldr	r1, [r3, #24]
 8015668:	68bb      	ldr	r3, [r7, #8]
 801566a:	689a      	ldr	r2, [r3, #8]
 801566c:	68fb      	ldr	r3, [r7, #12]
 801566e:	681b      	ldr	r3, [r3, #0]
 8015670:	430a      	orrs	r2, r1
 8015672:	619a      	str	r2, [r3, #24]
 8015674:	e060      	b.n	8015738 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8015676:	687b      	ldr	r3, [r7, #4]
 8015678:	2b04      	cmp	r3, #4
 801567a:	d11c      	bne.n	80156b6 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 801567c:	68fb      	ldr	r3, [r7, #12]
 801567e:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8015680:	68bb      	ldr	r3, [r7, #8]
 8015682:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8015684:	68bb      	ldr	r3, [r7, #8]
 8015686:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8015688:	68bb      	ldr	r3, [r7, #8]
 801568a:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 801568c:	f000 feab 	bl	80163e6 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8015690:	68fb      	ldr	r3, [r7, #12]
 8015692:	681b      	ldr	r3, [r3, #0]
 8015694:	699a      	ldr	r2, [r3, #24]
 8015696:	68fb      	ldr	r3, [r7, #12]
 8015698:	681b      	ldr	r3, [r3, #0]
 801569a:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 801569e:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80156a0:	68fb      	ldr	r3, [r7, #12]
 80156a2:	681b      	ldr	r3, [r3, #0]
 80156a4:	6999      	ldr	r1, [r3, #24]
 80156a6:	68bb      	ldr	r3, [r7, #8]
 80156a8:	689b      	ldr	r3, [r3, #8]
 80156aa:	021a      	lsls	r2, r3, #8
 80156ac:	68fb      	ldr	r3, [r7, #12]
 80156ae:	681b      	ldr	r3, [r3, #0]
 80156b0:	430a      	orrs	r2, r1
 80156b2:	619a      	str	r2, [r3, #24]
 80156b4:	e040      	b.n	8015738 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 80156b6:	687b      	ldr	r3, [r7, #4]
 80156b8:	2b08      	cmp	r3, #8
 80156ba:	d11b      	bne.n	80156f4 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80156bc:	68fb      	ldr	r3, [r7, #12]
 80156be:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80156c0:	68bb      	ldr	r3, [r7, #8]
 80156c2:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80156c4:	68bb      	ldr	r3, [r7, #8]
 80156c6:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80156c8:	68bb      	ldr	r3, [r7, #8]
 80156ca:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 80156cc:	f000 fef8 	bl	80164c0 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80156d0:	68fb      	ldr	r3, [r7, #12]
 80156d2:	681b      	ldr	r3, [r3, #0]
 80156d4:	69da      	ldr	r2, [r3, #28]
 80156d6:	68fb      	ldr	r3, [r7, #12]
 80156d8:	681b      	ldr	r3, [r3, #0]
 80156da:	f022 020c 	bic.w	r2, r2, #12
 80156de:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80156e0:	68fb      	ldr	r3, [r7, #12]
 80156e2:	681b      	ldr	r3, [r3, #0]
 80156e4:	69d9      	ldr	r1, [r3, #28]
 80156e6:	68bb      	ldr	r3, [r7, #8]
 80156e8:	689a      	ldr	r2, [r3, #8]
 80156ea:	68fb      	ldr	r3, [r7, #12]
 80156ec:	681b      	ldr	r3, [r3, #0]
 80156ee:	430a      	orrs	r2, r1
 80156f0:	61da      	str	r2, [r3, #28]
 80156f2:	e021      	b.n	8015738 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 80156f4:	687b      	ldr	r3, [r7, #4]
 80156f6:	2b0c      	cmp	r3, #12
 80156f8:	d11c      	bne.n	8015734 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80156fa:	68fb      	ldr	r3, [r7, #12]
 80156fc:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80156fe:	68bb      	ldr	r3, [r7, #8]
 8015700:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8015702:	68bb      	ldr	r3, [r7, #8]
 8015704:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8015706:	68bb      	ldr	r3, [r7, #8]
 8015708:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 801570a:	f000 ff15 	bl	8016538 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 801570e:	68fb      	ldr	r3, [r7, #12]
 8015710:	681b      	ldr	r3, [r3, #0]
 8015712:	69da      	ldr	r2, [r3, #28]
 8015714:	68fb      	ldr	r3, [r7, #12]
 8015716:	681b      	ldr	r3, [r3, #0]
 8015718:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 801571c:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 801571e:	68fb      	ldr	r3, [r7, #12]
 8015720:	681b      	ldr	r3, [r3, #0]
 8015722:	69d9      	ldr	r1, [r3, #28]
 8015724:	68bb      	ldr	r3, [r7, #8]
 8015726:	689b      	ldr	r3, [r3, #8]
 8015728:	021a      	lsls	r2, r3, #8
 801572a:	68fb      	ldr	r3, [r7, #12]
 801572c:	681b      	ldr	r3, [r3, #0]
 801572e:	430a      	orrs	r2, r1
 8015730:	61da      	str	r2, [r3, #28]
 8015732:	e001      	b.n	8015738 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8015734:	2301      	movs	r3, #1
 8015736:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8015738:	68fb      	ldr	r3, [r7, #12]
 801573a:	2200      	movs	r2, #0
 801573c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8015740:	7dfb      	ldrb	r3, [r7, #23]
}
 8015742:	4618      	mov	r0, r3
 8015744:	3718      	adds	r7, #24
 8015746:	46bd      	mov	sp, r7
 8015748:	bd80      	pop	{r7, pc}
	...

0801574c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 801574c:	b580      	push	{r7, lr}
 801574e:	b086      	sub	sp, #24
 8015750:	af00      	add	r7, sp, #0
 8015752:	60f8      	str	r0, [r7, #12]
 8015754:	60b9      	str	r1, [r7, #8]
 8015756:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8015758:	2300      	movs	r3, #0
 801575a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 801575c:	68fb      	ldr	r3, [r7, #12]
 801575e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8015762:	2b01      	cmp	r3, #1
 8015764:	d101      	bne.n	801576a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8015766:	2302      	movs	r3, #2
 8015768:	e0ff      	b.n	801596a <HAL_TIM_PWM_ConfigChannel+0x21e>
 801576a:	68fb      	ldr	r3, [r7, #12]
 801576c:	2201      	movs	r2, #1
 801576e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8015772:	687b      	ldr	r3, [r7, #4]
 8015774:	2b14      	cmp	r3, #20
 8015776:	f200 80f0 	bhi.w	801595a <HAL_TIM_PWM_ConfigChannel+0x20e>
 801577a:	a201      	add	r2, pc, #4	; (adr r2, 8015780 <HAL_TIM_PWM_ConfigChannel+0x34>)
 801577c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015780:	080157d5 	.word	0x080157d5
 8015784:	0801595b 	.word	0x0801595b
 8015788:	0801595b 	.word	0x0801595b
 801578c:	0801595b 	.word	0x0801595b
 8015790:	08015815 	.word	0x08015815
 8015794:	0801595b 	.word	0x0801595b
 8015798:	0801595b 	.word	0x0801595b
 801579c:	0801595b 	.word	0x0801595b
 80157a0:	08015857 	.word	0x08015857
 80157a4:	0801595b 	.word	0x0801595b
 80157a8:	0801595b 	.word	0x0801595b
 80157ac:	0801595b 	.word	0x0801595b
 80157b0:	08015897 	.word	0x08015897
 80157b4:	0801595b 	.word	0x0801595b
 80157b8:	0801595b 	.word	0x0801595b
 80157bc:	0801595b 	.word	0x0801595b
 80157c0:	080158d9 	.word	0x080158d9
 80157c4:	0801595b 	.word	0x0801595b
 80157c8:	0801595b 	.word	0x0801595b
 80157cc:	0801595b 	.word	0x0801595b
 80157d0:	08015919 	.word	0x08015919
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80157d4:	68fb      	ldr	r3, [r7, #12]
 80157d6:	681b      	ldr	r3, [r3, #0]
 80157d8:	68b9      	ldr	r1, [r7, #8]
 80157da:	4618      	mov	r0, r3
 80157dc:	f000 fa90 	bl	8015d00 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80157e0:	68fb      	ldr	r3, [r7, #12]
 80157e2:	681b      	ldr	r3, [r3, #0]
 80157e4:	699a      	ldr	r2, [r3, #24]
 80157e6:	68fb      	ldr	r3, [r7, #12]
 80157e8:	681b      	ldr	r3, [r3, #0]
 80157ea:	f042 0208 	orr.w	r2, r2, #8
 80157ee:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80157f0:	68fb      	ldr	r3, [r7, #12]
 80157f2:	681b      	ldr	r3, [r3, #0]
 80157f4:	699a      	ldr	r2, [r3, #24]
 80157f6:	68fb      	ldr	r3, [r7, #12]
 80157f8:	681b      	ldr	r3, [r3, #0]
 80157fa:	f022 0204 	bic.w	r2, r2, #4
 80157fe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8015800:	68fb      	ldr	r3, [r7, #12]
 8015802:	681b      	ldr	r3, [r3, #0]
 8015804:	6999      	ldr	r1, [r3, #24]
 8015806:	68bb      	ldr	r3, [r7, #8]
 8015808:	691a      	ldr	r2, [r3, #16]
 801580a:	68fb      	ldr	r3, [r7, #12]
 801580c:	681b      	ldr	r3, [r3, #0]
 801580e:	430a      	orrs	r2, r1
 8015810:	619a      	str	r2, [r3, #24]
      break;
 8015812:	e0a5      	b.n	8015960 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8015814:	68fb      	ldr	r3, [r7, #12]
 8015816:	681b      	ldr	r3, [r3, #0]
 8015818:	68b9      	ldr	r1, [r7, #8]
 801581a:	4618      	mov	r0, r3
 801581c:	f000 fb00 	bl	8015e20 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8015820:	68fb      	ldr	r3, [r7, #12]
 8015822:	681b      	ldr	r3, [r3, #0]
 8015824:	699a      	ldr	r2, [r3, #24]
 8015826:	68fb      	ldr	r3, [r7, #12]
 8015828:	681b      	ldr	r3, [r3, #0]
 801582a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 801582e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8015830:	68fb      	ldr	r3, [r7, #12]
 8015832:	681b      	ldr	r3, [r3, #0]
 8015834:	699a      	ldr	r2, [r3, #24]
 8015836:	68fb      	ldr	r3, [r7, #12]
 8015838:	681b      	ldr	r3, [r3, #0]
 801583a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801583e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8015840:	68fb      	ldr	r3, [r7, #12]
 8015842:	681b      	ldr	r3, [r3, #0]
 8015844:	6999      	ldr	r1, [r3, #24]
 8015846:	68bb      	ldr	r3, [r7, #8]
 8015848:	691b      	ldr	r3, [r3, #16]
 801584a:	021a      	lsls	r2, r3, #8
 801584c:	68fb      	ldr	r3, [r7, #12]
 801584e:	681b      	ldr	r3, [r3, #0]
 8015850:	430a      	orrs	r2, r1
 8015852:	619a      	str	r2, [r3, #24]
      break;
 8015854:	e084      	b.n	8015960 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8015856:	68fb      	ldr	r3, [r7, #12]
 8015858:	681b      	ldr	r3, [r3, #0]
 801585a:	68b9      	ldr	r1, [r7, #8]
 801585c:	4618      	mov	r0, r3
 801585e:	f000 fb69 	bl	8015f34 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8015862:	68fb      	ldr	r3, [r7, #12]
 8015864:	681b      	ldr	r3, [r3, #0]
 8015866:	69da      	ldr	r2, [r3, #28]
 8015868:	68fb      	ldr	r3, [r7, #12]
 801586a:	681b      	ldr	r3, [r3, #0]
 801586c:	f042 0208 	orr.w	r2, r2, #8
 8015870:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8015872:	68fb      	ldr	r3, [r7, #12]
 8015874:	681b      	ldr	r3, [r3, #0]
 8015876:	69da      	ldr	r2, [r3, #28]
 8015878:	68fb      	ldr	r3, [r7, #12]
 801587a:	681b      	ldr	r3, [r3, #0]
 801587c:	f022 0204 	bic.w	r2, r2, #4
 8015880:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8015882:	68fb      	ldr	r3, [r7, #12]
 8015884:	681b      	ldr	r3, [r3, #0]
 8015886:	69d9      	ldr	r1, [r3, #28]
 8015888:	68bb      	ldr	r3, [r7, #8]
 801588a:	691a      	ldr	r2, [r3, #16]
 801588c:	68fb      	ldr	r3, [r7, #12]
 801588e:	681b      	ldr	r3, [r3, #0]
 8015890:	430a      	orrs	r2, r1
 8015892:	61da      	str	r2, [r3, #28]
      break;
 8015894:	e064      	b.n	8015960 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8015896:	68fb      	ldr	r3, [r7, #12]
 8015898:	681b      	ldr	r3, [r3, #0]
 801589a:	68b9      	ldr	r1, [r7, #8]
 801589c:	4618      	mov	r0, r3
 801589e:	f000 fbd1 	bl	8016044 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80158a2:	68fb      	ldr	r3, [r7, #12]
 80158a4:	681b      	ldr	r3, [r3, #0]
 80158a6:	69da      	ldr	r2, [r3, #28]
 80158a8:	68fb      	ldr	r3, [r7, #12]
 80158aa:	681b      	ldr	r3, [r3, #0]
 80158ac:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80158b0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80158b2:	68fb      	ldr	r3, [r7, #12]
 80158b4:	681b      	ldr	r3, [r3, #0]
 80158b6:	69da      	ldr	r2, [r3, #28]
 80158b8:	68fb      	ldr	r3, [r7, #12]
 80158ba:	681b      	ldr	r3, [r3, #0]
 80158bc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80158c0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80158c2:	68fb      	ldr	r3, [r7, #12]
 80158c4:	681b      	ldr	r3, [r3, #0]
 80158c6:	69d9      	ldr	r1, [r3, #28]
 80158c8:	68bb      	ldr	r3, [r7, #8]
 80158ca:	691b      	ldr	r3, [r3, #16]
 80158cc:	021a      	lsls	r2, r3, #8
 80158ce:	68fb      	ldr	r3, [r7, #12]
 80158d0:	681b      	ldr	r3, [r3, #0]
 80158d2:	430a      	orrs	r2, r1
 80158d4:	61da      	str	r2, [r3, #28]
      break;
 80158d6:	e043      	b.n	8015960 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80158d8:	68fb      	ldr	r3, [r7, #12]
 80158da:	681b      	ldr	r3, [r3, #0]
 80158dc:	68b9      	ldr	r1, [r7, #8]
 80158de:	4618      	mov	r0, r3
 80158e0:	f000 fc1a 	bl	8016118 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80158e4:	68fb      	ldr	r3, [r7, #12]
 80158e6:	681b      	ldr	r3, [r3, #0]
 80158e8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80158ea:	68fb      	ldr	r3, [r7, #12]
 80158ec:	681b      	ldr	r3, [r3, #0]
 80158ee:	f042 0208 	orr.w	r2, r2, #8
 80158f2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80158f4:	68fb      	ldr	r3, [r7, #12]
 80158f6:	681b      	ldr	r3, [r3, #0]
 80158f8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80158fa:	68fb      	ldr	r3, [r7, #12]
 80158fc:	681b      	ldr	r3, [r3, #0]
 80158fe:	f022 0204 	bic.w	r2, r2, #4
 8015902:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8015904:	68fb      	ldr	r3, [r7, #12]
 8015906:	681b      	ldr	r3, [r3, #0]
 8015908:	6d59      	ldr	r1, [r3, #84]	; 0x54
 801590a:	68bb      	ldr	r3, [r7, #8]
 801590c:	691a      	ldr	r2, [r3, #16]
 801590e:	68fb      	ldr	r3, [r7, #12]
 8015910:	681b      	ldr	r3, [r3, #0]
 8015912:	430a      	orrs	r2, r1
 8015914:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8015916:	e023      	b.n	8015960 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8015918:	68fb      	ldr	r3, [r7, #12]
 801591a:	681b      	ldr	r3, [r3, #0]
 801591c:	68b9      	ldr	r1, [r7, #8]
 801591e:	4618      	mov	r0, r3
 8015920:	f000 fc5e 	bl	80161e0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8015924:	68fb      	ldr	r3, [r7, #12]
 8015926:	681b      	ldr	r3, [r3, #0]
 8015928:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 801592a:	68fb      	ldr	r3, [r7, #12]
 801592c:	681b      	ldr	r3, [r3, #0]
 801592e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8015932:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8015934:	68fb      	ldr	r3, [r7, #12]
 8015936:	681b      	ldr	r3, [r3, #0]
 8015938:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 801593a:	68fb      	ldr	r3, [r7, #12]
 801593c:	681b      	ldr	r3, [r3, #0]
 801593e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8015942:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8015944:	68fb      	ldr	r3, [r7, #12]
 8015946:	681b      	ldr	r3, [r3, #0]
 8015948:	6d59      	ldr	r1, [r3, #84]	; 0x54
 801594a:	68bb      	ldr	r3, [r7, #8]
 801594c:	691b      	ldr	r3, [r3, #16]
 801594e:	021a      	lsls	r2, r3, #8
 8015950:	68fb      	ldr	r3, [r7, #12]
 8015952:	681b      	ldr	r3, [r3, #0]
 8015954:	430a      	orrs	r2, r1
 8015956:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8015958:	e002      	b.n	8015960 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 801595a:	2301      	movs	r3, #1
 801595c:	75fb      	strb	r3, [r7, #23]
      break;
 801595e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8015960:	68fb      	ldr	r3, [r7, #12]
 8015962:	2200      	movs	r2, #0
 8015964:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8015968:	7dfb      	ldrb	r3, [r7, #23]
}
 801596a:	4618      	mov	r0, r3
 801596c:	3718      	adds	r7, #24
 801596e:	46bd      	mov	sp, r7
 8015970:	bd80      	pop	{r7, pc}
 8015972:	bf00      	nop

08015974 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8015974:	b580      	push	{r7, lr}
 8015976:	b084      	sub	sp, #16
 8015978:	af00      	add	r7, sp, #0
 801597a:	6078      	str	r0, [r7, #4]
 801597c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 801597e:	2300      	movs	r3, #0
 8015980:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8015982:	687b      	ldr	r3, [r7, #4]
 8015984:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8015988:	2b01      	cmp	r3, #1
 801598a:	d101      	bne.n	8015990 <HAL_TIM_ConfigClockSource+0x1c>
 801598c:	2302      	movs	r3, #2
 801598e:	e0b6      	b.n	8015afe <HAL_TIM_ConfigClockSource+0x18a>
 8015990:	687b      	ldr	r3, [r7, #4]
 8015992:	2201      	movs	r2, #1
 8015994:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8015998:	687b      	ldr	r3, [r7, #4]
 801599a:	2202      	movs	r2, #2
 801599c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80159a0:	687b      	ldr	r3, [r7, #4]
 80159a2:	681b      	ldr	r3, [r3, #0]
 80159a4:	689b      	ldr	r3, [r3, #8]
 80159a6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80159a8:	68bb      	ldr	r3, [r7, #8]
 80159aa:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 80159ae:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80159b2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80159b4:	68bb      	ldr	r3, [r7, #8]
 80159b6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80159ba:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80159bc:	687b      	ldr	r3, [r7, #4]
 80159be:	681b      	ldr	r3, [r3, #0]
 80159c0:	68ba      	ldr	r2, [r7, #8]
 80159c2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80159c4:	683b      	ldr	r3, [r7, #0]
 80159c6:	681b      	ldr	r3, [r3, #0]
 80159c8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80159cc:	d03e      	beq.n	8015a4c <HAL_TIM_ConfigClockSource+0xd8>
 80159ce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80159d2:	f200 8087 	bhi.w	8015ae4 <HAL_TIM_ConfigClockSource+0x170>
 80159d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80159da:	f000 8086 	beq.w	8015aea <HAL_TIM_ConfigClockSource+0x176>
 80159de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80159e2:	d87f      	bhi.n	8015ae4 <HAL_TIM_ConfigClockSource+0x170>
 80159e4:	2b70      	cmp	r3, #112	; 0x70
 80159e6:	d01a      	beq.n	8015a1e <HAL_TIM_ConfigClockSource+0xaa>
 80159e8:	2b70      	cmp	r3, #112	; 0x70
 80159ea:	d87b      	bhi.n	8015ae4 <HAL_TIM_ConfigClockSource+0x170>
 80159ec:	2b60      	cmp	r3, #96	; 0x60
 80159ee:	d050      	beq.n	8015a92 <HAL_TIM_ConfigClockSource+0x11e>
 80159f0:	2b60      	cmp	r3, #96	; 0x60
 80159f2:	d877      	bhi.n	8015ae4 <HAL_TIM_ConfigClockSource+0x170>
 80159f4:	2b50      	cmp	r3, #80	; 0x50
 80159f6:	d03c      	beq.n	8015a72 <HAL_TIM_ConfigClockSource+0xfe>
 80159f8:	2b50      	cmp	r3, #80	; 0x50
 80159fa:	d873      	bhi.n	8015ae4 <HAL_TIM_ConfigClockSource+0x170>
 80159fc:	2b40      	cmp	r3, #64	; 0x40
 80159fe:	d058      	beq.n	8015ab2 <HAL_TIM_ConfigClockSource+0x13e>
 8015a00:	2b40      	cmp	r3, #64	; 0x40
 8015a02:	d86f      	bhi.n	8015ae4 <HAL_TIM_ConfigClockSource+0x170>
 8015a04:	2b30      	cmp	r3, #48	; 0x30
 8015a06:	d064      	beq.n	8015ad2 <HAL_TIM_ConfigClockSource+0x15e>
 8015a08:	2b30      	cmp	r3, #48	; 0x30
 8015a0a:	d86b      	bhi.n	8015ae4 <HAL_TIM_ConfigClockSource+0x170>
 8015a0c:	2b20      	cmp	r3, #32
 8015a0e:	d060      	beq.n	8015ad2 <HAL_TIM_ConfigClockSource+0x15e>
 8015a10:	2b20      	cmp	r3, #32
 8015a12:	d867      	bhi.n	8015ae4 <HAL_TIM_ConfigClockSource+0x170>
 8015a14:	2b00      	cmp	r3, #0
 8015a16:	d05c      	beq.n	8015ad2 <HAL_TIM_ConfigClockSource+0x15e>
 8015a18:	2b10      	cmp	r3, #16
 8015a1a:	d05a      	beq.n	8015ad2 <HAL_TIM_ConfigClockSource+0x15e>
 8015a1c:	e062      	b.n	8015ae4 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8015a1e:	687b      	ldr	r3, [r7, #4]
 8015a20:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8015a22:	683b      	ldr	r3, [r7, #0]
 8015a24:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8015a26:	683b      	ldr	r3, [r7, #0]
 8015a28:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8015a2a:	683b      	ldr	r3, [r7, #0]
 8015a2c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8015a2e:	f000 fddd 	bl	80165ec <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8015a32:	687b      	ldr	r3, [r7, #4]
 8015a34:	681b      	ldr	r3, [r3, #0]
 8015a36:	689b      	ldr	r3, [r3, #8]
 8015a38:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8015a3a:	68bb      	ldr	r3, [r7, #8]
 8015a3c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8015a40:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8015a42:	687b      	ldr	r3, [r7, #4]
 8015a44:	681b      	ldr	r3, [r3, #0]
 8015a46:	68ba      	ldr	r2, [r7, #8]
 8015a48:	609a      	str	r2, [r3, #8]
      break;
 8015a4a:	e04f      	b.n	8015aec <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8015a4c:	687b      	ldr	r3, [r7, #4]
 8015a4e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8015a50:	683b      	ldr	r3, [r7, #0]
 8015a52:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8015a54:	683b      	ldr	r3, [r7, #0]
 8015a56:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8015a58:	683b      	ldr	r3, [r7, #0]
 8015a5a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8015a5c:	f000 fdc6 	bl	80165ec <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8015a60:	687b      	ldr	r3, [r7, #4]
 8015a62:	681b      	ldr	r3, [r3, #0]
 8015a64:	689a      	ldr	r2, [r3, #8]
 8015a66:	687b      	ldr	r3, [r7, #4]
 8015a68:	681b      	ldr	r3, [r3, #0]
 8015a6a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8015a6e:	609a      	str	r2, [r3, #8]
      break;
 8015a70:	e03c      	b.n	8015aec <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8015a72:	687b      	ldr	r3, [r7, #4]
 8015a74:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8015a76:	683b      	ldr	r3, [r7, #0]
 8015a78:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8015a7a:	683b      	ldr	r3, [r7, #0]
 8015a7c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8015a7e:	461a      	mov	r2, r3
 8015a80:	f000 fc82 	bl	8016388 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8015a84:	687b      	ldr	r3, [r7, #4]
 8015a86:	681b      	ldr	r3, [r3, #0]
 8015a88:	2150      	movs	r1, #80	; 0x50
 8015a8a:	4618      	mov	r0, r3
 8015a8c:	f000 fd91 	bl	80165b2 <TIM_ITRx_SetConfig>
      break;
 8015a90:	e02c      	b.n	8015aec <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8015a92:	687b      	ldr	r3, [r7, #4]
 8015a94:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8015a96:	683b      	ldr	r3, [r7, #0]
 8015a98:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8015a9a:	683b      	ldr	r3, [r7, #0]
 8015a9c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8015a9e:	461a      	mov	r2, r3
 8015aa0:	f000 fcde 	bl	8016460 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8015aa4:	687b      	ldr	r3, [r7, #4]
 8015aa6:	681b      	ldr	r3, [r3, #0]
 8015aa8:	2160      	movs	r1, #96	; 0x60
 8015aaa:	4618      	mov	r0, r3
 8015aac:	f000 fd81 	bl	80165b2 <TIM_ITRx_SetConfig>
      break;
 8015ab0:	e01c      	b.n	8015aec <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8015ab2:	687b      	ldr	r3, [r7, #4]
 8015ab4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8015ab6:	683b      	ldr	r3, [r7, #0]
 8015ab8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8015aba:	683b      	ldr	r3, [r7, #0]
 8015abc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8015abe:	461a      	mov	r2, r3
 8015ac0:	f000 fc62 	bl	8016388 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8015ac4:	687b      	ldr	r3, [r7, #4]
 8015ac6:	681b      	ldr	r3, [r3, #0]
 8015ac8:	2140      	movs	r1, #64	; 0x40
 8015aca:	4618      	mov	r0, r3
 8015acc:	f000 fd71 	bl	80165b2 <TIM_ITRx_SetConfig>
      break;
 8015ad0:	e00c      	b.n	8015aec <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8015ad2:	687b      	ldr	r3, [r7, #4]
 8015ad4:	681a      	ldr	r2, [r3, #0]
 8015ad6:	683b      	ldr	r3, [r7, #0]
 8015ad8:	681b      	ldr	r3, [r3, #0]
 8015ada:	4619      	mov	r1, r3
 8015adc:	4610      	mov	r0, r2
 8015ade:	f000 fd68 	bl	80165b2 <TIM_ITRx_SetConfig>
      break;
 8015ae2:	e003      	b.n	8015aec <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8015ae4:	2301      	movs	r3, #1
 8015ae6:	73fb      	strb	r3, [r7, #15]
      break;
 8015ae8:	e000      	b.n	8015aec <HAL_TIM_ConfigClockSource+0x178>
      break;
 8015aea:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8015aec:	687b      	ldr	r3, [r7, #4]
 8015aee:	2201      	movs	r2, #1
 8015af0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8015af4:	687b      	ldr	r3, [r7, #4]
 8015af6:	2200      	movs	r2, #0
 8015af8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8015afc:	7bfb      	ldrb	r3, [r7, #15]
}
 8015afe:	4618      	mov	r0, r3
 8015b00:	3710      	adds	r7, #16
 8015b02:	46bd      	mov	sp, r7
 8015b04:	bd80      	pop	{r7, pc}
	...

08015b08 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8015b08:	b480      	push	{r7}
 8015b0a:	b085      	sub	sp, #20
 8015b0c:	af00      	add	r7, sp, #0
 8015b0e:	6078      	str	r0, [r7, #4]
 8015b10:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8015b12:	2300      	movs	r3, #0
 8015b14:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8015b16:	683b      	ldr	r3, [r7, #0]
 8015b18:	2b0c      	cmp	r3, #12
 8015b1a:	d831      	bhi.n	8015b80 <HAL_TIM_ReadCapturedValue+0x78>
 8015b1c:	a201      	add	r2, pc, #4	; (adr r2, 8015b24 <HAL_TIM_ReadCapturedValue+0x1c>)
 8015b1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015b22:	bf00      	nop
 8015b24:	08015b59 	.word	0x08015b59
 8015b28:	08015b81 	.word	0x08015b81
 8015b2c:	08015b81 	.word	0x08015b81
 8015b30:	08015b81 	.word	0x08015b81
 8015b34:	08015b63 	.word	0x08015b63
 8015b38:	08015b81 	.word	0x08015b81
 8015b3c:	08015b81 	.word	0x08015b81
 8015b40:	08015b81 	.word	0x08015b81
 8015b44:	08015b6d 	.word	0x08015b6d
 8015b48:	08015b81 	.word	0x08015b81
 8015b4c:	08015b81 	.word	0x08015b81
 8015b50:	08015b81 	.word	0x08015b81
 8015b54:	08015b77 	.word	0x08015b77
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8015b58:	687b      	ldr	r3, [r7, #4]
 8015b5a:	681b      	ldr	r3, [r3, #0]
 8015b5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8015b5e:	60fb      	str	r3, [r7, #12]

      break;
 8015b60:	e00f      	b.n	8015b82 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8015b62:	687b      	ldr	r3, [r7, #4]
 8015b64:	681b      	ldr	r3, [r3, #0]
 8015b66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015b68:	60fb      	str	r3, [r7, #12]

      break;
 8015b6a:	e00a      	b.n	8015b82 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8015b6c:	687b      	ldr	r3, [r7, #4]
 8015b6e:	681b      	ldr	r3, [r3, #0]
 8015b70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8015b72:	60fb      	str	r3, [r7, #12]

      break;
 8015b74:	e005      	b.n	8015b82 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8015b76:	687b      	ldr	r3, [r7, #4]
 8015b78:	681b      	ldr	r3, [r3, #0]
 8015b7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015b7c:	60fb      	str	r3, [r7, #12]

      break;
 8015b7e:	e000      	b.n	8015b82 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8015b80:	bf00      	nop
  }

  return tmpreg;
 8015b82:	68fb      	ldr	r3, [r7, #12]
}
 8015b84:	4618      	mov	r0, r3
 8015b86:	3714      	adds	r7, #20
 8015b88:	46bd      	mov	sp, r7
 8015b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015b8e:	4770      	bx	lr

08015b90 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8015b90:	b480      	push	{r7}
 8015b92:	b083      	sub	sp, #12
 8015b94:	af00      	add	r7, sp, #0
 8015b96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8015b98:	bf00      	nop
 8015b9a:	370c      	adds	r7, #12
 8015b9c:	46bd      	mov	sp, r7
 8015b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015ba2:	4770      	bx	lr

08015ba4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8015ba4:	b480      	push	{r7}
 8015ba6:	b083      	sub	sp, #12
 8015ba8:	af00      	add	r7, sp, #0
 8015baa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8015bac:	bf00      	nop
 8015bae:	370c      	adds	r7, #12
 8015bb0:	46bd      	mov	sp, r7
 8015bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015bb6:	4770      	bx	lr

08015bb8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8015bb8:	b480      	push	{r7}
 8015bba:	b083      	sub	sp, #12
 8015bbc:	af00      	add	r7, sp, #0
 8015bbe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8015bc0:	bf00      	nop
 8015bc2:	370c      	adds	r7, #12
 8015bc4:	46bd      	mov	sp, r7
 8015bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015bca:	4770      	bx	lr

08015bcc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8015bcc:	b480      	push	{r7}
 8015bce:	b085      	sub	sp, #20
 8015bd0:	af00      	add	r7, sp, #0
 8015bd2:	6078      	str	r0, [r7, #4]
 8015bd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8015bd6:	687b      	ldr	r3, [r7, #4]
 8015bd8:	681b      	ldr	r3, [r3, #0]
 8015bda:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8015bdc:	687b      	ldr	r3, [r7, #4]
 8015bde:	4a40      	ldr	r2, [pc, #256]	; (8015ce0 <TIM_Base_SetConfig+0x114>)
 8015be0:	4293      	cmp	r3, r2
 8015be2:	d013      	beq.n	8015c0c <TIM_Base_SetConfig+0x40>
 8015be4:	687b      	ldr	r3, [r7, #4]
 8015be6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8015bea:	d00f      	beq.n	8015c0c <TIM_Base_SetConfig+0x40>
 8015bec:	687b      	ldr	r3, [r7, #4]
 8015bee:	4a3d      	ldr	r2, [pc, #244]	; (8015ce4 <TIM_Base_SetConfig+0x118>)
 8015bf0:	4293      	cmp	r3, r2
 8015bf2:	d00b      	beq.n	8015c0c <TIM_Base_SetConfig+0x40>
 8015bf4:	687b      	ldr	r3, [r7, #4]
 8015bf6:	4a3c      	ldr	r2, [pc, #240]	; (8015ce8 <TIM_Base_SetConfig+0x11c>)
 8015bf8:	4293      	cmp	r3, r2
 8015bfa:	d007      	beq.n	8015c0c <TIM_Base_SetConfig+0x40>
 8015bfc:	687b      	ldr	r3, [r7, #4]
 8015bfe:	4a3b      	ldr	r2, [pc, #236]	; (8015cec <TIM_Base_SetConfig+0x120>)
 8015c00:	4293      	cmp	r3, r2
 8015c02:	d003      	beq.n	8015c0c <TIM_Base_SetConfig+0x40>
 8015c04:	687b      	ldr	r3, [r7, #4]
 8015c06:	4a3a      	ldr	r2, [pc, #232]	; (8015cf0 <TIM_Base_SetConfig+0x124>)
 8015c08:	4293      	cmp	r3, r2
 8015c0a:	d108      	bne.n	8015c1e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8015c0c:	68fb      	ldr	r3, [r7, #12]
 8015c0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8015c12:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8015c14:	683b      	ldr	r3, [r7, #0]
 8015c16:	685b      	ldr	r3, [r3, #4]
 8015c18:	68fa      	ldr	r2, [r7, #12]
 8015c1a:	4313      	orrs	r3, r2
 8015c1c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8015c1e:	687b      	ldr	r3, [r7, #4]
 8015c20:	4a2f      	ldr	r2, [pc, #188]	; (8015ce0 <TIM_Base_SetConfig+0x114>)
 8015c22:	4293      	cmp	r3, r2
 8015c24:	d01f      	beq.n	8015c66 <TIM_Base_SetConfig+0x9a>
 8015c26:	687b      	ldr	r3, [r7, #4]
 8015c28:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8015c2c:	d01b      	beq.n	8015c66 <TIM_Base_SetConfig+0x9a>
 8015c2e:	687b      	ldr	r3, [r7, #4]
 8015c30:	4a2c      	ldr	r2, [pc, #176]	; (8015ce4 <TIM_Base_SetConfig+0x118>)
 8015c32:	4293      	cmp	r3, r2
 8015c34:	d017      	beq.n	8015c66 <TIM_Base_SetConfig+0x9a>
 8015c36:	687b      	ldr	r3, [r7, #4]
 8015c38:	4a2b      	ldr	r2, [pc, #172]	; (8015ce8 <TIM_Base_SetConfig+0x11c>)
 8015c3a:	4293      	cmp	r3, r2
 8015c3c:	d013      	beq.n	8015c66 <TIM_Base_SetConfig+0x9a>
 8015c3e:	687b      	ldr	r3, [r7, #4]
 8015c40:	4a2a      	ldr	r2, [pc, #168]	; (8015cec <TIM_Base_SetConfig+0x120>)
 8015c42:	4293      	cmp	r3, r2
 8015c44:	d00f      	beq.n	8015c66 <TIM_Base_SetConfig+0x9a>
 8015c46:	687b      	ldr	r3, [r7, #4]
 8015c48:	4a29      	ldr	r2, [pc, #164]	; (8015cf0 <TIM_Base_SetConfig+0x124>)
 8015c4a:	4293      	cmp	r3, r2
 8015c4c:	d00b      	beq.n	8015c66 <TIM_Base_SetConfig+0x9a>
 8015c4e:	687b      	ldr	r3, [r7, #4]
 8015c50:	4a28      	ldr	r2, [pc, #160]	; (8015cf4 <TIM_Base_SetConfig+0x128>)
 8015c52:	4293      	cmp	r3, r2
 8015c54:	d007      	beq.n	8015c66 <TIM_Base_SetConfig+0x9a>
 8015c56:	687b      	ldr	r3, [r7, #4]
 8015c58:	4a27      	ldr	r2, [pc, #156]	; (8015cf8 <TIM_Base_SetConfig+0x12c>)
 8015c5a:	4293      	cmp	r3, r2
 8015c5c:	d003      	beq.n	8015c66 <TIM_Base_SetConfig+0x9a>
 8015c5e:	687b      	ldr	r3, [r7, #4]
 8015c60:	4a26      	ldr	r2, [pc, #152]	; (8015cfc <TIM_Base_SetConfig+0x130>)
 8015c62:	4293      	cmp	r3, r2
 8015c64:	d108      	bne.n	8015c78 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8015c66:	68fb      	ldr	r3, [r7, #12]
 8015c68:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8015c6c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8015c6e:	683b      	ldr	r3, [r7, #0]
 8015c70:	68db      	ldr	r3, [r3, #12]
 8015c72:	68fa      	ldr	r2, [r7, #12]
 8015c74:	4313      	orrs	r3, r2
 8015c76:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8015c78:	68fb      	ldr	r3, [r7, #12]
 8015c7a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8015c7e:	683b      	ldr	r3, [r7, #0]
 8015c80:	695b      	ldr	r3, [r3, #20]
 8015c82:	4313      	orrs	r3, r2
 8015c84:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8015c86:	687b      	ldr	r3, [r7, #4]
 8015c88:	68fa      	ldr	r2, [r7, #12]
 8015c8a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8015c8c:	683b      	ldr	r3, [r7, #0]
 8015c8e:	689a      	ldr	r2, [r3, #8]
 8015c90:	687b      	ldr	r3, [r7, #4]
 8015c92:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8015c94:	683b      	ldr	r3, [r7, #0]
 8015c96:	681a      	ldr	r2, [r3, #0]
 8015c98:	687b      	ldr	r3, [r7, #4]
 8015c9a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8015c9c:	687b      	ldr	r3, [r7, #4]
 8015c9e:	4a10      	ldr	r2, [pc, #64]	; (8015ce0 <TIM_Base_SetConfig+0x114>)
 8015ca0:	4293      	cmp	r3, r2
 8015ca2:	d00f      	beq.n	8015cc4 <TIM_Base_SetConfig+0xf8>
 8015ca4:	687b      	ldr	r3, [r7, #4]
 8015ca6:	4a12      	ldr	r2, [pc, #72]	; (8015cf0 <TIM_Base_SetConfig+0x124>)
 8015ca8:	4293      	cmp	r3, r2
 8015caa:	d00b      	beq.n	8015cc4 <TIM_Base_SetConfig+0xf8>
 8015cac:	687b      	ldr	r3, [r7, #4]
 8015cae:	4a11      	ldr	r2, [pc, #68]	; (8015cf4 <TIM_Base_SetConfig+0x128>)
 8015cb0:	4293      	cmp	r3, r2
 8015cb2:	d007      	beq.n	8015cc4 <TIM_Base_SetConfig+0xf8>
 8015cb4:	687b      	ldr	r3, [r7, #4]
 8015cb6:	4a10      	ldr	r2, [pc, #64]	; (8015cf8 <TIM_Base_SetConfig+0x12c>)
 8015cb8:	4293      	cmp	r3, r2
 8015cba:	d003      	beq.n	8015cc4 <TIM_Base_SetConfig+0xf8>
 8015cbc:	687b      	ldr	r3, [r7, #4]
 8015cbe:	4a0f      	ldr	r2, [pc, #60]	; (8015cfc <TIM_Base_SetConfig+0x130>)
 8015cc0:	4293      	cmp	r3, r2
 8015cc2:	d103      	bne.n	8015ccc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8015cc4:	683b      	ldr	r3, [r7, #0]
 8015cc6:	691a      	ldr	r2, [r3, #16]
 8015cc8:	687b      	ldr	r3, [r7, #4]
 8015cca:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8015ccc:	687b      	ldr	r3, [r7, #4]
 8015cce:	2201      	movs	r2, #1
 8015cd0:	615a      	str	r2, [r3, #20]
}
 8015cd2:	bf00      	nop
 8015cd4:	3714      	adds	r7, #20
 8015cd6:	46bd      	mov	sp, r7
 8015cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015cdc:	4770      	bx	lr
 8015cde:	bf00      	nop
 8015ce0:	40012c00 	.word	0x40012c00
 8015ce4:	40000400 	.word	0x40000400
 8015ce8:	40000800 	.word	0x40000800
 8015cec:	40000c00 	.word	0x40000c00
 8015cf0:	40013400 	.word	0x40013400
 8015cf4:	40014000 	.word	0x40014000
 8015cf8:	40014400 	.word	0x40014400
 8015cfc:	40014800 	.word	0x40014800

08015d00 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8015d00:	b480      	push	{r7}
 8015d02:	b087      	sub	sp, #28
 8015d04:	af00      	add	r7, sp, #0
 8015d06:	6078      	str	r0, [r7, #4]
 8015d08:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8015d0a:	687b      	ldr	r3, [r7, #4]
 8015d0c:	6a1b      	ldr	r3, [r3, #32]
 8015d0e:	f023 0201 	bic.w	r2, r3, #1
 8015d12:	687b      	ldr	r3, [r7, #4]
 8015d14:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8015d16:	687b      	ldr	r3, [r7, #4]
 8015d18:	6a1b      	ldr	r3, [r3, #32]
 8015d1a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8015d1c:	687b      	ldr	r3, [r7, #4]
 8015d1e:	685b      	ldr	r3, [r3, #4]
 8015d20:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8015d22:	687b      	ldr	r3, [r7, #4]
 8015d24:	699b      	ldr	r3, [r3, #24]
 8015d26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8015d28:	68fb      	ldr	r3, [r7, #12]
 8015d2a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8015d2e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8015d32:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8015d34:	68fb      	ldr	r3, [r7, #12]
 8015d36:	f023 0303 	bic.w	r3, r3, #3
 8015d3a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8015d3c:	683b      	ldr	r3, [r7, #0]
 8015d3e:	681b      	ldr	r3, [r3, #0]
 8015d40:	68fa      	ldr	r2, [r7, #12]
 8015d42:	4313      	orrs	r3, r2
 8015d44:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8015d46:	697b      	ldr	r3, [r7, #20]
 8015d48:	f023 0302 	bic.w	r3, r3, #2
 8015d4c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8015d4e:	683b      	ldr	r3, [r7, #0]
 8015d50:	689b      	ldr	r3, [r3, #8]
 8015d52:	697a      	ldr	r2, [r7, #20]
 8015d54:	4313      	orrs	r3, r2
 8015d56:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8015d58:	687b      	ldr	r3, [r7, #4]
 8015d5a:	4a2c      	ldr	r2, [pc, #176]	; (8015e0c <TIM_OC1_SetConfig+0x10c>)
 8015d5c:	4293      	cmp	r3, r2
 8015d5e:	d00f      	beq.n	8015d80 <TIM_OC1_SetConfig+0x80>
 8015d60:	687b      	ldr	r3, [r7, #4]
 8015d62:	4a2b      	ldr	r2, [pc, #172]	; (8015e10 <TIM_OC1_SetConfig+0x110>)
 8015d64:	4293      	cmp	r3, r2
 8015d66:	d00b      	beq.n	8015d80 <TIM_OC1_SetConfig+0x80>
 8015d68:	687b      	ldr	r3, [r7, #4]
 8015d6a:	4a2a      	ldr	r2, [pc, #168]	; (8015e14 <TIM_OC1_SetConfig+0x114>)
 8015d6c:	4293      	cmp	r3, r2
 8015d6e:	d007      	beq.n	8015d80 <TIM_OC1_SetConfig+0x80>
 8015d70:	687b      	ldr	r3, [r7, #4]
 8015d72:	4a29      	ldr	r2, [pc, #164]	; (8015e18 <TIM_OC1_SetConfig+0x118>)
 8015d74:	4293      	cmp	r3, r2
 8015d76:	d003      	beq.n	8015d80 <TIM_OC1_SetConfig+0x80>
 8015d78:	687b      	ldr	r3, [r7, #4]
 8015d7a:	4a28      	ldr	r2, [pc, #160]	; (8015e1c <TIM_OC1_SetConfig+0x11c>)
 8015d7c:	4293      	cmp	r3, r2
 8015d7e:	d10c      	bne.n	8015d9a <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8015d80:	697b      	ldr	r3, [r7, #20]
 8015d82:	f023 0308 	bic.w	r3, r3, #8
 8015d86:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8015d88:	683b      	ldr	r3, [r7, #0]
 8015d8a:	68db      	ldr	r3, [r3, #12]
 8015d8c:	697a      	ldr	r2, [r7, #20]
 8015d8e:	4313      	orrs	r3, r2
 8015d90:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8015d92:	697b      	ldr	r3, [r7, #20]
 8015d94:	f023 0304 	bic.w	r3, r3, #4
 8015d98:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8015d9a:	687b      	ldr	r3, [r7, #4]
 8015d9c:	4a1b      	ldr	r2, [pc, #108]	; (8015e0c <TIM_OC1_SetConfig+0x10c>)
 8015d9e:	4293      	cmp	r3, r2
 8015da0:	d00f      	beq.n	8015dc2 <TIM_OC1_SetConfig+0xc2>
 8015da2:	687b      	ldr	r3, [r7, #4]
 8015da4:	4a1a      	ldr	r2, [pc, #104]	; (8015e10 <TIM_OC1_SetConfig+0x110>)
 8015da6:	4293      	cmp	r3, r2
 8015da8:	d00b      	beq.n	8015dc2 <TIM_OC1_SetConfig+0xc2>
 8015daa:	687b      	ldr	r3, [r7, #4]
 8015dac:	4a19      	ldr	r2, [pc, #100]	; (8015e14 <TIM_OC1_SetConfig+0x114>)
 8015dae:	4293      	cmp	r3, r2
 8015db0:	d007      	beq.n	8015dc2 <TIM_OC1_SetConfig+0xc2>
 8015db2:	687b      	ldr	r3, [r7, #4]
 8015db4:	4a18      	ldr	r2, [pc, #96]	; (8015e18 <TIM_OC1_SetConfig+0x118>)
 8015db6:	4293      	cmp	r3, r2
 8015db8:	d003      	beq.n	8015dc2 <TIM_OC1_SetConfig+0xc2>
 8015dba:	687b      	ldr	r3, [r7, #4]
 8015dbc:	4a17      	ldr	r2, [pc, #92]	; (8015e1c <TIM_OC1_SetConfig+0x11c>)
 8015dbe:	4293      	cmp	r3, r2
 8015dc0:	d111      	bne.n	8015de6 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8015dc2:	693b      	ldr	r3, [r7, #16]
 8015dc4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8015dc8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8015dca:	693b      	ldr	r3, [r7, #16]
 8015dcc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8015dd0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8015dd2:	683b      	ldr	r3, [r7, #0]
 8015dd4:	695b      	ldr	r3, [r3, #20]
 8015dd6:	693a      	ldr	r2, [r7, #16]
 8015dd8:	4313      	orrs	r3, r2
 8015dda:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8015ddc:	683b      	ldr	r3, [r7, #0]
 8015dde:	699b      	ldr	r3, [r3, #24]
 8015de0:	693a      	ldr	r2, [r7, #16]
 8015de2:	4313      	orrs	r3, r2
 8015de4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8015de6:	687b      	ldr	r3, [r7, #4]
 8015de8:	693a      	ldr	r2, [r7, #16]
 8015dea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8015dec:	687b      	ldr	r3, [r7, #4]
 8015dee:	68fa      	ldr	r2, [r7, #12]
 8015df0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8015df2:	683b      	ldr	r3, [r7, #0]
 8015df4:	685a      	ldr	r2, [r3, #4]
 8015df6:	687b      	ldr	r3, [r7, #4]
 8015df8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8015dfa:	687b      	ldr	r3, [r7, #4]
 8015dfc:	697a      	ldr	r2, [r7, #20]
 8015dfe:	621a      	str	r2, [r3, #32]
}
 8015e00:	bf00      	nop
 8015e02:	371c      	adds	r7, #28
 8015e04:	46bd      	mov	sp, r7
 8015e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015e0a:	4770      	bx	lr
 8015e0c:	40012c00 	.word	0x40012c00
 8015e10:	40013400 	.word	0x40013400
 8015e14:	40014000 	.word	0x40014000
 8015e18:	40014400 	.word	0x40014400
 8015e1c:	40014800 	.word	0x40014800

08015e20 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8015e20:	b480      	push	{r7}
 8015e22:	b087      	sub	sp, #28
 8015e24:	af00      	add	r7, sp, #0
 8015e26:	6078      	str	r0, [r7, #4]
 8015e28:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8015e2a:	687b      	ldr	r3, [r7, #4]
 8015e2c:	6a1b      	ldr	r3, [r3, #32]
 8015e2e:	f023 0210 	bic.w	r2, r3, #16
 8015e32:	687b      	ldr	r3, [r7, #4]
 8015e34:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8015e36:	687b      	ldr	r3, [r7, #4]
 8015e38:	6a1b      	ldr	r3, [r3, #32]
 8015e3a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8015e3c:	687b      	ldr	r3, [r7, #4]
 8015e3e:	685b      	ldr	r3, [r3, #4]
 8015e40:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8015e42:	687b      	ldr	r3, [r7, #4]
 8015e44:	699b      	ldr	r3, [r3, #24]
 8015e46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8015e48:	68fb      	ldr	r3, [r7, #12]
 8015e4a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8015e4e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8015e52:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8015e54:	68fb      	ldr	r3, [r7, #12]
 8015e56:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8015e5a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8015e5c:	683b      	ldr	r3, [r7, #0]
 8015e5e:	681b      	ldr	r3, [r3, #0]
 8015e60:	021b      	lsls	r3, r3, #8
 8015e62:	68fa      	ldr	r2, [r7, #12]
 8015e64:	4313      	orrs	r3, r2
 8015e66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8015e68:	697b      	ldr	r3, [r7, #20]
 8015e6a:	f023 0320 	bic.w	r3, r3, #32
 8015e6e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8015e70:	683b      	ldr	r3, [r7, #0]
 8015e72:	689b      	ldr	r3, [r3, #8]
 8015e74:	011b      	lsls	r3, r3, #4
 8015e76:	697a      	ldr	r2, [r7, #20]
 8015e78:	4313      	orrs	r3, r2
 8015e7a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8015e7c:	687b      	ldr	r3, [r7, #4]
 8015e7e:	4a28      	ldr	r2, [pc, #160]	; (8015f20 <TIM_OC2_SetConfig+0x100>)
 8015e80:	4293      	cmp	r3, r2
 8015e82:	d003      	beq.n	8015e8c <TIM_OC2_SetConfig+0x6c>
 8015e84:	687b      	ldr	r3, [r7, #4]
 8015e86:	4a27      	ldr	r2, [pc, #156]	; (8015f24 <TIM_OC2_SetConfig+0x104>)
 8015e88:	4293      	cmp	r3, r2
 8015e8a:	d10d      	bne.n	8015ea8 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8015e8c:	697b      	ldr	r3, [r7, #20]
 8015e8e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8015e92:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8015e94:	683b      	ldr	r3, [r7, #0]
 8015e96:	68db      	ldr	r3, [r3, #12]
 8015e98:	011b      	lsls	r3, r3, #4
 8015e9a:	697a      	ldr	r2, [r7, #20]
 8015e9c:	4313      	orrs	r3, r2
 8015e9e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8015ea0:	697b      	ldr	r3, [r7, #20]
 8015ea2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8015ea6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8015ea8:	687b      	ldr	r3, [r7, #4]
 8015eaa:	4a1d      	ldr	r2, [pc, #116]	; (8015f20 <TIM_OC2_SetConfig+0x100>)
 8015eac:	4293      	cmp	r3, r2
 8015eae:	d00f      	beq.n	8015ed0 <TIM_OC2_SetConfig+0xb0>
 8015eb0:	687b      	ldr	r3, [r7, #4]
 8015eb2:	4a1c      	ldr	r2, [pc, #112]	; (8015f24 <TIM_OC2_SetConfig+0x104>)
 8015eb4:	4293      	cmp	r3, r2
 8015eb6:	d00b      	beq.n	8015ed0 <TIM_OC2_SetConfig+0xb0>
 8015eb8:	687b      	ldr	r3, [r7, #4]
 8015eba:	4a1b      	ldr	r2, [pc, #108]	; (8015f28 <TIM_OC2_SetConfig+0x108>)
 8015ebc:	4293      	cmp	r3, r2
 8015ebe:	d007      	beq.n	8015ed0 <TIM_OC2_SetConfig+0xb0>
 8015ec0:	687b      	ldr	r3, [r7, #4]
 8015ec2:	4a1a      	ldr	r2, [pc, #104]	; (8015f2c <TIM_OC2_SetConfig+0x10c>)
 8015ec4:	4293      	cmp	r3, r2
 8015ec6:	d003      	beq.n	8015ed0 <TIM_OC2_SetConfig+0xb0>
 8015ec8:	687b      	ldr	r3, [r7, #4]
 8015eca:	4a19      	ldr	r2, [pc, #100]	; (8015f30 <TIM_OC2_SetConfig+0x110>)
 8015ecc:	4293      	cmp	r3, r2
 8015ece:	d113      	bne.n	8015ef8 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8015ed0:	693b      	ldr	r3, [r7, #16]
 8015ed2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8015ed6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8015ed8:	693b      	ldr	r3, [r7, #16]
 8015eda:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8015ede:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8015ee0:	683b      	ldr	r3, [r7, #0]
 8015ee2:	695b      	ldr	r3, [r3, #20]
 8015ee4:	009b      	lsls	r3, r3, #2
 8015ee6:	693a      	ldr	r2, [r7, #16]
 8015ee8:	4313      	orrs	r3, r2
 8015eea:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8015eec:	683b      	ldr	r3, [r7, #0]
 8015eee:	699b      	ldr	r3, [r3, #24]
 8015ef0:	009b      	lsls	r3, r3, #2
 8015ef2:	693a      	ldr	r2, [r7, #16]
 8015ef4:	4313      	orrs	r3, r2
 8015ef6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8015ef8:	687b      	ldr	r3, [r7, #4]
 8015efa:	693a      	ldr	r2, [r7, #16]
 8015efc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8015efe:	687b      	ldr	r3, [r7, #4]
 8015f00:	68fa      	ldr	r2, [r7, #12]
 8015f02:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8015f04:	683b      	ldr	r3, [r7, #0]
 8015f06:	685a      	ldr	r2, [r3, #4]
 8015f08:	687b      	ldr	r3, [r7, #4]
 8015f0a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8015f0c:	687b      	ldr	r3, [r7, #4]
 8015f0e:	697a      	ldr	r2, [r7, #20]
 8015f10:	621a      	str	r2, [r3, #32]
}
 8015f12:	bf00      	nop
 8015f14:	371c      	adds	r7, #28
 8015f16:	46bd      	mov	sp, r7
 8015f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015f1c:	4770      	bx	lr
 8015f1e:	bf00      	nop
 8015f20:	40012c00 	.word	0x40012c00
 8015f24:	40013400 	.word	0x40013400
 8015f28:	40014000 	.word	0x40014000
 8015f2c:	40014400 	.word	0x40014400
 8015f30:	40014800 	.word	0x40014800

08015f34 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8015f34:	b480      	push	{r7}
 8015f36:	b087      	sub	sp, #28
 8015f38:	af00      	add	r7, sp, #0
 8015f3a:	6078      	str	r0, [r7, #4]
 8015f3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8015f3e:	687b      	ldr	r3, [r7, #4]
 8015f40:	6a1b      	ldr	r3, [r3, #32]
 8015f42:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8015f46:	687b      	ldr	r3, [r7, #4]
 8015f48:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8015f4a:	687b      	ldr	r3, [r7, #4]
 8015f4c:	6a1b      	ldr	r3, [r3, #32]
 8015f4e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8015f50:	687b      	ldr	r3, [r7, #4]
 8015f52:	685b      	ldr	r3, [r3, #4]
 8015f54:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8015f56:	687b      	ldr	r3, [r7, #4]
 8015f58:	69db      	ldr	r3, [r3, #28]
 8015f5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8015f5c:	68fb      	ldr	r3, [r7, #12]
 8015f5e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8015f62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8015f66:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8015f68:	68fb      	ldr	r3, [r7, #12]
 8015f6a:	f023 0303 	bic.w	r3, r3, #3
 8015f6e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8015f70:	683b      	ldr	r3, [r7, #0]
 8015f72:	681b      	ldr	r3, [r3, #0]
 8015f74:	68fa      	ldr	r2, [r7, #12]
 8015f76:	4313      	orrs	r3, r2
 8015f78:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8015f7a:	697b      	ldr	r3, [r7, #20]
 8015f7c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8015f80:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8015f82:	683b      	ldr	r3, [r7, #0]
 8015f84:	689b      	ldr	r3, [r3, #8]
 8015f86:	021b      	lsls	r3, r3, #8
 8015f88:	697a      	ldr	r2, [r7, #20]
 8015f8a:	4313      	orrs	r3, r2
 8015f8c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8015f8e:	687b      	ldr	r3, [r7, #4]
 8015f90:	4a27      	ldr	r2, [pc, #156]	; (8016030 <TIM_OC3_SetConfig+0xfc>)
 8015f92:	4293      	cmp	r3, r2
 8015f94:	d003      	beq.n	8015f9e <TIM_OC3_SetConfig+0x6a>
 8015f96:	687b      	ldr	r3, [r7, #4]
 8015f98:	4a26      	ldr	r2, [pc, #152]	; (8016034 <TIM_OC3_SetConfig+0x100>)
 8015f9a:	4293      	cmp	r3, r2
 8015f9c:	d10d      	bne.n	8015fba <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8015f9e:	697b      	ldr	r3, [r7, #20]
 8015fa0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8015fa4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8015fa6:	683b      	ldr	r3, [r7, #0]
 8015fa8:	68db      	ldr	r3, [r3, #12]
 8015faa:	021b      	lsls	r3, r3, #8
 8015fac:	697a      	ldr	r2, [r7, #20]
 8015fae:	4313      	orrs	r3, r2
 8015fb0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8015fb2:	697b      	ldr	r3, [r7, #20]
 8015fb4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8015fb8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8015fba:	687b      	ldr	r3, [r7, #4]
 8015fbc:	4a1c      	ldr	r2, [pc, #112]	; (8016030 <TIM_OC3_SetConfig+0xfc>)
 8015fbe:	4293      	cmp	r3, r2
 8015fc0:	d00f      	beq.n	8015fe2 <TIM_OC3_SetConfig+0xae>
 8015fc2:	687b      	ldr	r3, [r7, #4]
 8015fc4:	4a1b      	ldr	r2, [pc, #108]	; (8016034 <TIM_OC3_SetConfig+0x100>)
 8015fc6:	4293      	cmp	r3, r2
 8015fc8:	d00b      	beq.n	8015fe2 <TIM_OC3_SetConfig+0xae>
 8015fca:	687b      	ldr	r3, [r7, #4]
 8015fcc:	4a1a      	ldr	r2, [pc, #104]	; (8016038 <TIM_OC3_SetConfig+0x104>)
 8015fce:	4293      	cmp	r3, r2
 8015fd0:	d007      	beq.n	8015fe2 <TIM_OC3_SetConfig+0xae>
 8015fd2:	687b      	ldr	r3, [r7, #4]
 8015fd4:	4a19      	ldr	r2, [pc, #100]	; (801603c <TIM_OC3_SetConfig+0x108>)
 8015fd6:	4293      	cmp	r3, r2
 8015fd8:	d003      	beq.n	8015fe2 <TIM_OC3_SetConfig+0xae>
 8015fda:	687b      	ldr	r3, [r7, #4]
 8015fdc:	4a18      	ldr	r2, [pc, #96]	; (8016040 <TIM_OC3_SetConfig+0x10c>)
 8015fde:	4293      	cmp	r3, r2
 8015fe0:	d113      	bne.n	801600a <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8015fe2:	693b      	ldr	r3, [r7, #16]
 8015fe4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8015fe8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8015fea:	693b      	ldr	r3, [r7, #16]
 8015fec:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8015ff0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8015ff2:	683b      	ldr	r3, [r7, #0]
 8015ff4:	695b      	ldr	r3, [r3, #20]
 8015ff6:	011b      	lsls	r3, r3, #4
 8015ff8:	693a      	ldr	r2, [r7, #16]
 8015ffa:	4313      	orrs	r3, r2
 8015ffc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8015ffe:	683b      	ldr	r3, [r7, #0]
 8016000:	699b      	ldr	r3, [r3, #24]
 8016002:	011b      	lsls	r3, r3, #4
 8016004:	693a      	ldr	r2, [r7, #16]
 8016006:	4313      	orrs	r3, r2
 8016008:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801600a:	687b      	ldr	r3, [r7, #4]
 801600c:	693a      	ldr	r2, [r7, #16]
 801600e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8016010:	687b      	ldr	r3, [r7, #4]
 8016012:	68fa      	ldr	r2, [r7, #12]
 8016014:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8016016:	683b      	ldr	r3, [r7, #0]
 8016018:	685a      	ldr	r2, [r3, #4]
 801601a:	687b      	ldr	r3, [r7, #4]
 801601c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801601e:	687b      	ldr	r3, [r7, #4]
 8016020:	697a      	ldr	r2, [r7, #20]
 8016022:	621a      	str	r2, [r3, #32]
}
 8016024:	bf00      	nop
 8016026:	371c      	adds	r7, #28
 8016028:	46bd      	mov	sp, r7
 801602a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801602e:	4770      	bx	lr
 8016030:	40012c00 	.word	0x40012c00
 8016034:	40013400 	.word	0x40013400
 8016038:	40014000 	.word	0x40014000
 801603c:	40014400 	.word	0x40014400
 8016040:	40014800 	.word	0x40014800

08016044 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8016044:	b480      	push	{r7}
 8016046:	b087      	sub	sp, #28
 8016048:	af00      	add	r7, sp, #0
 801604a:	6078      	str	r0, [r7, #4]
 801604c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 801604e:	687b      	ldr	r3, [r7, #4]
 8016050:	6a1b      	ldr	r3, [r3, #32]
 8016052:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8016056:	687b      	ldr	r3, [r7, #4]
 8016058:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801605a:	687b      	ldr	r3, [r7, #4]
 801605c:	6a1b      	ldr	r3, [r3, #32]
 801605e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8016060:	687b      	ldr	r3, [r7, #4]
 8016062:	685b      	ldr	r3, [r3, #4]
 8016064:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8016066:	687b      	ldr	r3, [r7, #4]
 8016068:	69db      	ldr	r3, [r3, #28]
 801606a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 801606c:	68fb      	ldr	r3, [r7, #12]
 801606e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8016072:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8016076:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8016078:	68fb      	ldr	r3, [r7, #12]
 801607a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801607e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8016080:	683b      	ldr	r3, [r7, #0]
 8016082:	681b      	ldr	r3, [r3, #0]
 8016084:	021b      	lsls	r3, r3, #8
 8016086:	68fa      	ldr	r2, [r7, #12]
 8016088:	4313      	orrs	r3, r2
 801608a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 801608c:	693b      	ldr	r3, [r7, #16]
 801608e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8016092:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8016094:	683b      	ldr	r3, [r7, #0]
 8016096:	689b      	ldr	r3, [r3, #8]
 8016098:	031b      	lsls	r3, r3, #12
 801609a:	693a      	ldr	r2, [r7, #16]
 801609c:	4313      	orrs	r3, r2
 801609e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80160a0:	687b      	ldr	r3, [r7, #4]
 80160a2:	4a18      	ldr	r2, [pc, #96]	; (8016104 <TIM_OC4_SetConfig+0xc0>)
 80160a4:	4293      	cmp	r3, r2
 80160a6:	d00f      	beq.n	80160c8 <TIM_OC4_SetConfig+0x84>
 80160a8:	687b      	ldr	r3, [r7, #4]
 80160aa:	4a17      	ldr	r2, [pc, #92]	; (8016108 <TIM_OC4_SetConfig+0xc4>)
 80160ac:	4293      	cmp	r3, r2
 80160ae:	d00b      	beq.n	80160c8 <TIM_OC4_SetConfig+0x84>
 80160b0:	687b      	ldr	r3, [r7, #4]
 80160b2:	4a16      	ldr	r2, [pc, #88]	; (801610c <TIM_OC4_SetConfig+0xc8>)
 80160b4:	4293      	cmp	r3, r2
 80160b6:	d007      	beq.n	80160c8 <TIM_OC4_SetConfig+0x84>
 80160b8:	687b      	ldr	r3, [r7, #4]
 80160ba:	4a15      	ldr	r2, [pc, #84]	; (8016110 <TIM_OC4_SetConfig+0xcc>)
 80160bc:	4293      	cmp	r3, r2
 80160be:	d003      	beq.n	80160c8 <TIM_OC4_SetConfig+0x84>
 80160c0:	687b      	ldr	r3, [r7, #4]
 80160c2:	4a14      	ldr	r2, [pc, #80]	; (8016114 <TIM_OC4_SetConfig+0xd0>)
 80160c4:	4293      	cmp	r3, r2
 80160c6:	d109      	bne.n	80160dc <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80160c8:	697b      	ldr	r3, [r7, #20]
 80160ca:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80160ce:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80160d0:	683b      	ldr	r3, [r7, #0]
 80160d2:	695b      	ldr	r3, [r3, #20]
 80160d4:	019b      	lsls	r3, r3, #6
 80160d6:	697a      	ldr	r2, [r7, #20]
 80160d8:	4313      	orrs	r3, r2
 80160da:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80160dc:	687b      	ldr	r3, [r7, #4]
 80160de:	697a      	ldr	r2, [r7, #20]
 80160e0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80160e2:	687b      	ldr	r3, [r7, #4]
 80160e4:	68fa      	ldr	r2, [r7, #12]
 80160e6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80160e8:	683b      	ldr	r3, [r7, #0]
 80160ea:	685a      	ldr	r2, [r3, #4]
 80160ec:	687b      	ldr	r3, [r7, #4]
 80160ee:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80160f0:	687b      	ldr	r3, [r7, #4]
 80160f2:	693a      	ldr	r2, [r7, #16]
 80160f4:	621a      	str	r2, [r3, #32]
}
 80160f6:	bf00      	nop
 80160f8:	371c      	adds	r7, #28
 80160fa:	46bd      	mov	sp, r7
 80160fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016100:	4770      	bx	lr
 8016102:	bf00      	nop
 8016104:	40012c00 	.word	0x40012c00
 8016108:	40013400 	.word	0x40013400
 801610c:	40014000 	.word	0x40014000
 8016110:	40014400 	.word	0x40014400
 8016114:	40014800 	.word	0x40014800

08016118 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8016118:	b480      	push	{r7}
 801611a:	b087      	sub	sp, #28
 801611c:	af00      	add	r7, sp, #0
 801611e:	6078      	str	r0, [r7, #4]
 8016120:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8016122:	687b      	ldr	r3, [r7, #4]
 8016124:	6a1b      	ldr	r3, [r3, #32]
 8016126:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 801612a:	687b      	ldr	r3, [r7, #4]
 801612c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801612e:	687b      	ldr	r3, [r7, #4]
 8016130:	6a1b      	ldr	r3, [r3, #32]
 8016132:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8016134:	687b      	ldr	r3, [r7, #4]
 8016136:	685b      	ldr	r3, [r3, #4]
 8016138:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 801613a:	687b      	ldr	r3, [r7, #4]
 801613c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801613e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8016140:	68fb      	ldr	r3, [r7, #12]
 8016142:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8016146:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801614a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 801614c:	683b      	ldr	r3, [r7, #0]
 801614e:	681b      	ldr	r3, [r3, #0]
 8016150:	68fa      	ldr	r2, [r7, #12]
 8016152:	4313      	orrs	r3, r2
 8016154:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8016156:	693b      	ldr	r3, [r7, #16]
 8016158:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 801615c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 801615e:	683b      	ldr	r3, [r7, #0]
 8016160:	689b      	ldr	r3, [r3, #8]
 8016162:	041b      	lsls	r3, r3, #16
 8016164:	693a      	ldr	r2, [r7, #16]
 8016166:	4313      	orrs	r3, r2
 8016168:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801616a:	687b      	ldr	r3, [r7, #4]
 801616c:	4a17      	ldr	r2, [pc, #92]	; (80161cc <TIM_OC5_SetConfig+0xb4>)
 801616e:	4293      	cmp	r3, r2
 8016170:	d00f      	beq.n	8016192 <TIM_OC5_SetConfig+0x7a>
 8016172:	687b      	ldr	r3, [r7, #4]
 8016174:	4a16      	ldr	r2, [pc, #88]	; (80161d0 <TIM_OC5_SetConfig+0xb8>)
 8016176:	4293      	cmp	r3, r2
 8016178:	d00b      	beq.n	8016192 <TIM_OC5_SetConfig+0x7a>
 801617a:	687b      	ldr	r3, [r7, #4]
 801617c:	4a15      	ldr	r2, [pc, #84]	; (80161d4 <TIM_OC5_SetConfig+0xbc>)
 801617e:	4293      	cmp	r3, r2
 8016180:	d007      	beq.n	8016192 <TIM_OC5_SetConfig+0x7a>
 8016182:	687b      	ldr	r3, [r7, #4]
 8016184:	4a14      	ldr	r2, [pc, #80]	; (80161d8 <TIM_OC5_SetConfig+0xc0>)
 8016186:	4293      	cmp	r3, r2
 8016188:	d003      	beq.n	8016192 <TIM_OC5_SetConfig+0x7a>
 801618a:	687b      	ldr	r3, [r7, #4]
 801618c:	4a13      	ldr	r2, [pc, #76]	; (80161dc <TIM_OC5_SetConfig+0xc4>)
 801618e:	4293      	cmp	r3, r2
 8016190:	d109      	bne.n	80161a6 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8016192:	697b      	ldr	r3, [r7, #20]
 8016194:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8016198:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 801619a:	683b      	ldr	r3, [r7, #0]
 801619c:	695b      	ldr	r3, [r3, #20]
 801619e:	021b      	lsls	r3, r3, #8
 80161a0:	697a      	ldr	r2, [r7, #20]
 80161a2:	4313      	orrs	r3, r2
 80161a4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80161a6:	687b      	ldr	r3, [r7, #4]
 80161a8:	697a      	ldr	r2, [r7, #20]
 80161aa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80161ac:	687b      	ldr	r3, [r7, #4]
 80161ae:	68fa      	ldr	r2, [r7, #12]
 80161b0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80161b2:	683b      	ldr	r3, [r7, #0]
 80161b4:	685a      	ldr	r2, [r3, #4]
 80161b6:	687b      	ldr	r3, [r7, #4]
 80161b8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80161ba:	687b      	ldr	r3, [r7, #4]
 80161bc:	693a      	ldr	r2, [r7, #16]
 80161be:	621a      	str	r2, [r3, #32]
}
 80161c0:	bf00      	nop
 80161c2:	371c      	adds	r7, #28
 80161c4:	46bd      	mov	sp, r7
 80161c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80161ca:	4770      	bx	lr
 80161cc:	40012c00 	.word	0x40012c00
 80161d0:	40013400 	.word	0x40013400
 80161d4:	40014000 	.word	0x40014000
 80161d8:	40014400 	.word	0x40014400
 80161dc:	40014800 	.word	0x40014800

080161e0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80161e0:	b480      	push	{r7}
 80161e2:	b087      	sub	sp, #28
 80161e4:	af00      	add	r7, sp, #0
 80161e6:	6078      	str	r0, [r7, #4]
 80161e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80161ea:	687b      	ldr	r3, [r7, #4]
 80161ec:	6a1b      	ldr	r3, [r3, #32]
 80161ee:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80161f2:	687b      	ldr	r3, [r7, #4]
 80161f4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80161f6:	687b      	ldr	r3, [r7, #4]
 80161f8:	6a1b      	ldr	r3, [r3, #32]
 80161fa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80161fc:	687b      	ldr	r3, [r7, #4]
 80161fe:	685b      	ldr	r3, [r3, #4]
 8016200:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8016202:	687b      	ldr	r3, [r7, #4]
 8016204:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8016206:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8016208:	68fb      	ldr	r3, [r7, #12]
 801620a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 801620e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8016212:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8016214:	683b      	ldr	r3, [r7, #0]
 8016216:	681b      	ldr	r3, [r3, #0]
 8016218:	021b      	lsls	r3, r3, #8
 801621a:	68fa      	ldr	r2, [r7, #12]
 801621c:	4313      	orrs	r3, r2
 801621e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8016220:	693b      	ldr	r3, [r7, #16]
 8016222:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8016226:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8016228:	683b      	ldr	r3, [r7, #0]
 801622a:	689b      	ldr	r3, [r3, #8]
 801622c:	051b      	lsls	r3, r3, #20
 801622e:	693a      	ldr	r2, [r7, #16]
 8016230:	4313      	orrs	r3, r2
 8016232:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8016234:	687b      	ldr	r3, [r7, #4]
 8016236:	4a18      	ldr	r2, [pc, #96]	; (8016298 <TIM_OC6_SetConfig+0xb8>)
 8016238:	4293      	cmp	r3, r2
 801623a:	d00f      	beq.n	801625c <TIM_OC6_SetConfig+0x7c>
 801623c:	687b      	ldr	r3, [r7, #4]
 801623e:	4a17      	ldr	r2, [pc, #92]	; (801629c <TIM_OC6_SetConfig+0xbc>)
 8016240:	4293      	cmp	r3, r2
 8016242:	d00b      	beq.n	801625c <TIM_OC6_SetConfig+0x7c>
 8016244:	687b      	ldr	r3, [r7, #4]
 8016246:	4a16      	ldr	r2, [pc, #88]	; (80162a0 <TIM_OC6_SetConfig+0xc0>)
 8016248:	4293      	cmp	r3, r2
 801624a:	d007      	beq.n	801625c <TIM_OC6_SetConfig+0x7c>
 801624c:	687b      	ldr	r3, [r7, #4]
 801624e:	4a15      	ldr	r2, [pc, #84]	; (80162a4 <TIM_OC6_SetConfig+0xc4>)
 8016250:	4293      	cmp	r3, r2
 8016252:	d003      	beq.n	801625c <TIM_OC6_SetConfig+0x7c>
 8016254:	687b      	ldr	r3, [r7, #4]
 8016256:	4a14      	ldr	r2, [pc, #80]	; (80162a8 <TIM_OC6_SetConfig+0xc8>)
 8016258:	4293      	cmp	r3, r2
 801625a:	d109      	bne.n	8016270 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 801625c:	697b      	ldr	r3, [r7, #20]
 801625e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8016262:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8016264:	683b      	ldr	r3, [r7, #0]
 8016266:	695b      	ldr	r3, [r3, #20]
 8016268:	029b      	lsls	r3, r3, #10
 801626a:	697a      	ldr	r2, [r7, #20]
 801626c:	4313      	orrs	r3, r2
 801626e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8016270:	687b      	ldr	r3, [r7, #4]
 8016272:	697a      	ldr	r2, [r7, #20]
 8016274:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8016276:	687b      	ldr	r3, [r7, #4]
 8016278:	68fa      	ldr	r2, [r7, #12]
 801627a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 801627c:	683b      	ldr	r3, [r7, #0]
 801627e:	685a      	ldr	r2, [r3, #4]
 8016280:	687b      	ldr	r3, [r7, #4]
 8016282:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8016284:	687b      	ldr	r3, [r7, #4]
 8016286:	693a      	ldr	r2, [r7, #16]
 8016288:	621a      	str	r2, [r3, #32]
}
 801628a:	bf00      	nop
 801628c:	371c      	adds	r7, #28
 801628e:	46bd      	mov	sp, r7
 8016290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016294:	4770      	bx	lr
 8016296:	bf00      	nop
 8016298:	40012c00 	.word	0x40012c00
 801629c:	40013400 	.word	0x40013400
 80162a0:	40014000 	.word	0x40014000
 80162a4:	40014400 	.word	0x40014400
 80162a8:	40014800 	.word	0x40014800

080162ac <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80162ac:	b480      	push	{r7}
 80162ae:	b087      	sub	sp, #28
 80162b0:	af00      	add	r7, sp, #0
 80162b2:	60f8      	str	r0, [r7, #12]
 80162b4:	60b9      	str	r1, [r7, #8]
 80162b6:	607a      	str	r2, [r7, #4]
 80162b8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80162ba:	68fb      	ldr	r3, [r7, #12]
 80162bc:	6a1b      	ldr	r3, [r3, #32]
 80162be:	f023 0201 	bic.w	r2, r3, #1
 80162c2:	68fb      	ldr	r3, [r7, #12]
 80162c4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80162c6:	68fb      	ldr	r3, [r7, #12]
 80162c8:	699b      	ldr	r3, [r3, #24]
 80162ca:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80162cc:	68fb      	ldr	r3, [r7, #12]
 80162ce:	6a1b      	ldr	r3, [r3, #32]
 80162d0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80162d2:	68fb      	ldr	r3, [r7, #12]
 80162d4:	4a26      	ldr	r2, [pc, #152]	; (8016370 <TIM_TI1_SetConfig+0xc4>)
 80162d6:	4293      	cmp	r3, r2
 80162d8:	d017      	beq.n	801630a <TIM_TI1_SetConfig+0x5e>
 80162da:	68fb      	ldr	r3, [r7, #12]
 80162dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80162e0:	d013      	beq.n	801630a <TIM_TI1_SetConfig+0x5e>
 80162e2:	68fb      	ldr	r3, [r7, #12]
 80162e4:	4a23      	ldr	r2, [pc, #140]	; (8016374 <TIM_TI1_SetConfig+0xc8>)
 80162e6:	4293      	cmp	r3, r2
 80162e8:	d00f      	beq.n	801630a <TIM_TI1_SetConfig+0x5e>
 80162ea:	68fb      	ldr	r3, [r7, #12]
 80162ec:	4a22      	ldr	r2, [pc, #136]	; (8016378 <TIM_TI1_SetConfig+0xcc>)
 80162ee:	4293      	cmp	r3, r2
 80162f0:	d00b      	beq.n	801630a <TIM_TI1_SetConfig+0x5e>
 80162f2:	68fb      	ldr	r3, [r7, #12]
 80162f4:	4a21      	ldr	r2, [pc, #132]	; (801637c <TIM_TI1_SetConfig+0xd0>)
 80162f6:	4293      	cmp	r3, r2
 80162f8:	d007      	beq.n	801630a <TIM_TI1_SetConfig+0x5e>
 80162fa:	68fb      	ldr	r3, [r7, #12]
 80162fc:	4a20      	ldr	r2, [pc, #128]	; (8016380 <TIM_TI1_SetConfig+0xd4>)
 80162fe:	4293      	cmp	r3, r2
 8016300:	d003      	beq.n	801630a <TIM_TI1_SetConfig+0x5e>
 8016302:	68fb      	ldr	r3, [r7, #12]
 8016304:	4a1f      	ldr	r2, [pc, #124]	; (8016384 <TIM_TI1_SetConfig+0xd8>)
 8016306:	4293      	cmp	r3, r2
 8016308:	d101      	bne.n	801630e <TIM_TI1_SetConfig+0x62>
 801630a:	2301      	movs	r3, #1
 801630c:	e000      	b.n	8016310 <TIM_TI1_SetConfig+0x64>
 801630e:	2300      	movs	r3, #0
 8016310:	2b00      	cmp	r3, #0
 8016312:	d008      	beq.n	8016326 <TIM_TI1_SetConfig+0x7a>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8016314:	697b      	ldr	r3, [r7, #20]
 8016316:	f023 0303 	bic.w	r3, r3, #3
 801631a:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 801631c:	697a      	ldr	r2, [r7, #20]
 801631e:	687b      	ldr	r3, [r7, #4]
 8016320:	4313      	orrs	r3, r2
 8016322:	617b      	str	r3, [r7, #20]
 8016324:	e003      	b.n	801632e <TIM_TI1_SetConfig+0x82>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8016326:	697b      	ldr	r3, [r7, #20]
 8016328:	f043 0301 	orr.w	r3, r3, #1
 801632c:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 801632e:	697b      	ldr	r3, [r7, #20]
 8016330:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8016334:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8016336:	683b      	ldr	r3, [r7, #0]
 8016338:	011b      	lsls	r3, r3, #4
 801633a:	b2db      	uxtb	r3, r3
 801633c:	697a      	ldr	r2, [r7, #20]
 801633e:	4313      	orrs	r3, r2
 8016340:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8016342:	693b      	ldr	r3, [r7, #16]
 8016344:	f023 030a 	bic.w	r3, r3, #10
 8016348:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 801634a:	68bb      	ldr	r3, [r7, #8]
 801634c:	f003 030a 	and.w	r3, r3, #10
 8016350:	693a      	ldr	r2, [r7, #16]
 8016352:	4313      	orrs	r3, r2
 8016354:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8016356:	68fb      	ldr	r3, [r7, #12]
 8016358:	697a      	ldr	r2, [r7, #20]
 801635a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 801635c:	68fb      	ldr	r3, [r7, #12]
 801635e:	693a      	ldr	r2, [r7, #16]
 8016360:	621a      	str	r2, [r3, #32]
}
 8016362:	bf00      	nop
 8016364:	371c      	adds	r7, #28
 8016366:	46bd      	mov	sp, r7
 8016368:	f85d 7b04 	ldr.w	r7, [sp], #4
 801636c:	4770      	bx	lr
 801636e:	bf00      	nop
 8016370:	40012c00 	.word	0x40012c00
 8016374:	40000400 	.word	0x40000400
 8016378:	40000800 	.word	0x40000800
 801637c:	40000c00 	.word	0x40000c00
 8016380:	40013400 	.word	0x40013400
 8016384:	40014000 	.word	0x40014000

08016388 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8016388:	b480      	push	{r7}
 801638a:	b087      	sub	sp, #28
 801638c:	af00      	add	r7, sp, #0
 801638e:	60f8      	str	r0, [r7, #12]
 8016390:	60b9      	str	r1, [r7, #8]
 8016392:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8016394:	68fb      	ldr	r3, [r7, #12]
 8016396:	6a1b      	ldr	r3, [r3, #32]
 8016398:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 801639a:	68fb      	ldr	r3, [r7, #12]
 801639c:	6a1b      	ldr	r3, [r3, #32]
 801639e:	f023 0201 	bic.w	r2, r3, #1
 80163a2:	68fb      	ldr	r3, [r7, #12]
 80163a4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80163a6:	68fb      	ldr	r3, [r7, #12]
 80163a8:	699b      	ldr	r3, [r3, #24]
 80163aa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80163ac:	693b      	ldr	r3, [r7, #16]
 80163ae:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80163b2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80163b4:	687b      	ldr	r3, [r7, #4]
 80163b6:	011b      	lsls	r3, r3, #4
 80163b8:	693a      	ldr	r2, [r7, #16]
 80163ba:	4313      	orrs	r3, r2
 80163bc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80163be:	697b      	ldr	r3, [r7, #20]
 80163c0:	f023 030a 	bic.w	r3, r3, #10
 80163c4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80163c6:	697a      	ldr	r2, [r7, #20]
 80163c8:	68bb      	ldr	r3, [r7, #8]
 80163ca:	4313      	orrs	r3, r2
 80163cc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80163ce:	68fb      	ldr	r3, [r7, #12]
 80163d0:	693a      	ldr	r2, [r7, #16]
 80163d2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80163d4:	68fb      	ldr	r3, [r7, #12]
 80163d6:	697a      	ldr	r2, [r7, #20]
 80163d8:	621a      	str	r2, [r3, #32]
}
 80163da:	bf00      	nop
 80163dc:	371c      	adds	r7, #28
 80163de:	46bd      	mov	sp, r7
 80163e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80163e4:	4770      	bx	lr

080163e6 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80163e6:	b480      	push	{r7}
 80163e8:	b087      	sub	sp, #28
 80163ea:	af00      	add	r7, sp, #0
 80163ec:	60f8      	str	r0, [r7, #12]
 80163ee:	60b9      	str	r1, [r7, #8]
 80163f0:	607a      	str	r2, [r7, #4]
 80163f2:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80163f4:	68fb      	ldr	r3, [r7, #12]
 80163f6:	6a1b      	ldr	r3, [r3, #32]
 80163f8:	f023 0210 	bic.w	r2, r3, #16
 80163fc:	68fb      	ldr	r3, [r7, #12]
 80163fe:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8016400:	68fb      	ldr	r3, [r7, #12]
 8016402:	699b      	ldr	r3, [r3, #24]
 8016404:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8016406:	68fb      	ldr	r3, [r7, #12]
 8016408:	6a1b      	ldr	r3, [r3, #32]
 801640a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 801640c:	697b      	ldr	r3, [r7, #20]
 801640e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8016412:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8016414:	687b      	ldr	r3, [r7, #4]
 8016416:	021b      	lsls	r3, r3, #8
 8016418:	697a      	ldr	r2, [r7, #20]
 801641a:	4313      	orrs	r3, r2
 801641c:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 801641e:	697b      	ldr	r3, [r7, #20]
 8016420:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8016424:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8016426:	683b      	ldr	r3, [r7, #0]
 8016428:	031b      	lsls	r3, r3, #12
 801642a:	b29b      	uxth	r3, r3
 801642c:	697a      	ldr	r2, [r7, #20]
 801642e:	4313      	orrs	r3, r2
 8016430:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8016432:	693b      	ldr	r3, [r7, #16]
 8016434:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8016438:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 801643a:	68bb      	ldr	r3, [r7, #8]
 801643c:	011b      	lsls	r3, r3, #4
 801643e:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8016442:	693a      	ldr	r2, [r7, #16]
 8016444:	4313      	orrs	r3, r2
 8016446:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8016448:	68fb      	ldr	r3, [r7, #12]
 801644a:	697a      	ldr	r2, [r7, #20]
 801644c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 801644e:	68fb      	ldr	r3, [r7, #12]
 8016450:	693a      	ldr	r2, [r7, #16]
 8016452:	621a      	str	r2, [r3, #32]
}
 8016454:	bf00      	nop
 8016456:	371c      	adds	r7, #28
 8016458:	46bd      	mov	sp, r7
 801645a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801645e:	4770      	bx	lr

08016460 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8016460:	b480      	push	{r7}
 8016462:	b087      	sub	sp, #28
 8016464:	af00      	add	r7, sp, #0
 8016466:	60f8      	str	r0, [r7, #12]
 8016468:	60b9      	str	r1, [r7, #8]
 801646a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 801646c:	68fb      	ldr	r3, [r7, #12]
 801646e:	6a1b      	ldr	r3, [r3, #32]
 8016470:	f023 0210 	bic.w	r2, r3, #16
 8016474:	68fb      	ldr	r3, [r7, #12]
 8016476:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8016478:	68fb      	ldr	r3, [r7, #12]
 801647a:	699b      	ldr	r3, [r3, #24]
 801647c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 801647e:	68fb      	ldr	r3, [r7, #12]
 8016480:	6a1b      	ldr	r3, [r3, #32]
 8016482:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8016484:	697b      	ldr	r3, [r7, #20]
 8016486:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 801648a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 801648c:	687b      	ldr	r3, [r7, #4]
 801648e:	031b      	lsls	r3, r3, #12
 8016490:	697a      	ldr	r2, [r7, #20]
 8016492:	4313      	orrs	r3, r2
 8016494:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8016496:	693b      	ldr	r3, [r7, #16]
 8016498:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 801649c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 801649e:	68bb      	ldr	r3, [r7, #8]
 80164a0:	011b      	lsls	r3, r3, #4
 80164a2:	693a      	ldr	r2, [r7, #16]
 80164a4:	4313      	orrs	r3, r2
 80164a6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80164a8:	68fb      	ldr	r3, [r7, #12]
 80164aa:	697a      	ldr	r2, [r7, #20]
 80164ac:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80164ae:	68fb      	ldr	r3, [r7, #12]
 80164b0:	693a      	ldr	r2, [r7, #16]
 80164b2:	621a      	str	r2, [r3, #32]
}
 80164b4:	bf00      	nop
 80164b6:	371c      	adds	r7, #28
 80164b8:	46bd      	mov	sp, r7
 80164ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80164be:	4770      	bx	lr

080164c0 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80164c0:	b480      	push	{r7}
 80164c2:	b087      	sub	sp, #28
 80164c4:	af00      	add	r7, sp, #0
 80164c6:	60f8      	str	r0, [r7, #12]
 80164c8:	60b9      	str	r1, [r7, #8]
 80164ca:	607a      	str	r2, [r7, #4]
 80164cc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80164ce:	68fb      	ldr	r3, [r7, #12]
 80164d0:	6a1b      	ldr	r3, [r3, #32]
 80164d2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80164d6:	68fb      	ldr	r3, [r7, #12]
 80164d8:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80164da:	68fb      	ldr	r3, [r7, #12]
 80164dc:	69db      	ldr	r3, [r3, #28]
 80164de:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80164e0:	68fb      	ldr	r3, [r7, #12]
 80164e2:	6a1b      	ldr	r3, [r3, #32]
 80164e4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80164e6:	697b      	ldr	r3, [r7, #20]
 80164e8:	f023 0303 	bic.w	r3, r3, #3
 80164ec:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 80164ee:	697a      	ldr	r2, [r7, #20]
 80164f0:	687b      	ldr	r3, [r7, #4]
 80164f2:	4313      	orrs	r3, r2
 80164f4:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80164f6:	697b      	ldr	r3, [r7, #20]
 80164f8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80164fc:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80164fe:	683b      	ldr	r3, [r7, #0]
 8016500:	011b      	lsls	r3, r3, #4
 8016502:	b2db      	uxtb	r3, r3
 8016504:	697a      	ldr	r2, [r7, #20]
 8016506:	4313      	orrs	r3, r2
 8016508:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 801650a:	693b      	ldr	r3, [r7, #16]
 801650c:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8016510:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8016512:	68bb      	ldr	r3, [r7, #8]
 8016514:	021b      	lsls	r3, r3, #8
 8016516:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 801651a:	693a      	ldr	r2, [r7, #16]
 801651c:	4313      	orrs	r3, r2
 801651e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8016520:	68fb      	ldr	r3, [r7, #12]
 8016522:	697a      	ldr	r2, [r7, #20]
 8016524:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8016526:	68fb      	ldr	r3, [r7, #12]
 8016528:	693a      	ldr	r2, [r7, #16]
 801652a:	621a      	str	r2, [r3, #32]
}
 801652c:	bf00      	nop
 801652e:	371c      	adds	r7, #28
 8016530:	46bd      	mov	sp, r7
 8016532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016536:	4770      	bx	lr

08016538 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8016538:	b480      	push	{r7}
 801653a:	b087      	sub	sp, #28
 801653c:	af00      	add	r7, sp, #0
 801653e:	60f8      	str	r0, [r7, #12]
 8016540:	60b9      	str	r1, [r7, #8]
 8016542:	607a      	str	r2, [r7, #4]
 8016544:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8016546:	68fb      	ldr	r3, [r7, #12]
 8016548:	6a1b      	ldr	r3, [r3, #32]
 801654a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 801654e:	68fb      	ldr	r3, [r7, #12]
 8016550:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8016552:	68fb      	ldr	r3, [r7, #12]
 8016554:	69db      	ldr	r3, [r3, #28]
 8016556:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8016558:	68fb      	ldr	r3, [r7, #12]
 801655a:	6a1b      	ldr	r3, [r3, #32]
 801655c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 801655e:	697b      	ldr	r3, [r7, #20]
 8016560:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8016564:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8016566:	687b      	ldr	r3, [r7, #4]
 8016568:	021b      	lsls	r3, r3, #8
 801656a:	697a      	ldr	r2, [r7, #20]
 801656c:	4313      	orrs	r3, r2
 801656e:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8016570:	697b      	ldr	r3, [r7, #20]
 8016572:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8016576:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8016578:	683b      	ldr	r3, [r7, #0]
 801657a:	031b      	lsls	r3, r3, #12
 801657c:	b29b      	uxth	r3, r3
 801657e:	697a      	ldr	r2, [r7, #20]
 8016580:	4313      	orrs	r3, r2
 8016582:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8016584:	693b      	ldr	r3, [r7, #16]
 8016586:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 801658a:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 801658c:	68bb      	ldr	r3, [r7, #8]
 801658e:	031b      	lsls	r3, r3, #12
 8016590:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8016594:	693a      	ldr	r2, [r7, #16]
 8016596:	4313      	orrs	r3, r2
 8016598:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 801659a:	68fb      	ldr	r3, [r7, #12]
 801659c:	697a      	ldr	r2, [r7, #20]
 801659e:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80165a0:	68fb      	ldr	r3, [r7, #12]
 80165a2:	693a      	ldr	r2, [r7, #16]
 80165a4:	621a      	str	r2, [r3, #32]
}
 80165a6:	bf00      	nop
 80165a8:	371c      	adds	r7, #28
 80165aa:	46bd      	mov	sp, r7
 80165ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80165b0:	4770      	bx	lr

080165b2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80165b2:	b480      	push	{r7}
 80165b4:	b085      	sub	sp, #20
 80165b6:	af00      	add	r7, sp, #0
 80165b8:	6078      	str	r0, [r7, #4]
 80165ba:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80165bc:	687b      	ldr	r3, [r7, #4]
 80165be:	689b      	ldr	r3, [r3, #8]
 80165c0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80165c2:	68fb      	ldr	r3, [r7, #12]
 80165c4:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80165c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80165cc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80165ce:	683a      	ldr	r2, [r7, #0]
 80165d0:	68fb      	ldr	r3, [r7, #12]
 80165d2:	4313      	orrs	r3, r2
 80165d4:	f043 0307 	orr.w	r3, r3, #7
 80165d8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80165da:	687b      	ldr	r3, [r7, #4]
 80165dc:	68fa      	ldr	r2, [r7, #12]
 80165de:	609a      	str	r2, [r3, #8]
}
 80165e0:	bf00      	nop
 80165e2:	3714      	adds	r7, #20
 80165e4:	46bd      	mov	sp, r7
 80165e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80165ea:	4770      	bx	lr

080165ec <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80165ec:	b480      	push	{r7}
 80165ee:	b087      	sub	sp, #28
 80165f0:	af00      	add	r7, sp, #0
 80165f2:	60f8      	str	r0, [r7, #12]
 80165f4:	60b9      	str	r1, [r7, #8]
 80165f6:	607a      	str	r2, [r7, #4]
 80165f8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80165fa:	68fb      	ldr	r3, [r7, #12]
 80165fc:	689b      	ldr	r3, [r3, #8]
 80165fe:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8016600:	697b      	ldr	r3, [r7, #20]
 8016602:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8016606:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8016608:	683b      	ldr	r3, [r7, #0]
 801660a:	021a      	lsls	r2, r3, #8
 801660c:	687b      	ldr	r3, [r7, #4]
 801660e:	431a      	orrs	r2, r3
 8016610:	68bb      	ldr	r3, [r7, #8]
 8016612:	4313      	orrs	r3, r2
 8016614:	697a      	ldr	r2, [r7, #20]
 8016616:	4313      	orrs	r3, r2
 8016618:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 801661a:	68fb      	ldr	r3, [r7, #12]
 801661c:	697a      	ldr	r2, [r7, #20]
 801661e:	609a      	str	r2, [r3, #8]
}
 8016620:	bf00      	nop
 8016622:	371c      	adds	r7, #28
 8016624:	46bd      	mov	sp, r7
 8016626:	f85d 7b04 	ldr.w	r7, [sp], #4
 801662a:	4770      	bx	lr

0801662c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 801662c:	b480      	push	{r7}
 801662e:	b087      	sub	sp, #28
 8016630:	af00      	add	r7, sp, #0
 8016632:	60f8      	str	r0, [r7, #12]
 8016634:	60b9      	str	r1, [r7, #8]
 8016636:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8016638:	68bb      	ldr	r3, [r7, #8]
 801663a:	f003 031f 	and.w	r3, r3, #31
 801663e:	2201      	movs	r2, #1
 8016640:	fa02 f303 	lsl.w	r3, r2, r3
 8016644:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8016646:	68fb      	ldr	r3, [r7, #12]
 8016648:	6a1a      	ldr	r2, [r3, #32]
 801664a:	697b      	ldr	r3, [r7, #20]
 801664c:	43db      	mvns	r3, r3
 801664e:	401a      	ands	r2, r3
 8016650:	68fb      	ldr	r3, [r7, #12]
 8016652:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8016654:	68fb      	ldr	r3, [r7, #12]
 8016656:	6a1a      	ldr	r2, [r3, #32]
 8016658:	68bb      	ldr	r3, [r7, #8]
 801665a:	f003 031f 	and.w	r3, r3, #31
 801665e:	6879      	ldr	r1, [r7, #4]
 8016660:	fa01 f303 	lsl.w	r3, r1, r3
 8016664:	431a      	orrs	r2, r3
 8016666:	68fb      	ldr	r3, [r7, #12]
 8016668:	621a      	str	r2, [r3, #32]
}
 801666a:	bf00      	nop
 801666c:	371c      	adds	r7, #28
 801666e:	46bd      	mov	sp, r7
 8016670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016674:	4770      	bx	lr
	...

08016678 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8016678:	b480      	push	{r7}
 801667a:	b085      	sub	sp, #20
 801667c:	af00      	add	r7, sp, #0
 801667e:	6078      	str	r0, [r7, #4]
 8016680:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8016682:	687b      	ldr	r3, [r7, #4]
 8016684:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8016688:	2b01      	cmp	r3, #1
 801668a:	d101      	bne.n	8016690 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 801668c:	2302      	movs	r3, #2
 801668e:	e068      	b.n	8016762 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8016690:	687b      	ldr	r3, [r7, #4]
 8016692:	2201      	movs	r2, #1
 8016694:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8016698:	687b      	ldr	r3, [r7, #4]
 801669a:	2202      	movs	r2, #2
 801669c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80166a0:	687b      	ldr	r3, [r7, #4]
 80166a2:	681b      	ldr	r3, [r3, #0]
 80166a4:	685b      	ldr	r3, [r3, #4]
 80166a6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80166a8:	687b      	ldr	r3, [r7, #4]
 80166aa:	681b      	ldr	r3, [r3, #0]
 80166ac:	689b      	ldr	r3, [r3, #8]
 80166ae:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80166b0:	687b      	ldr	r3, [r7, #4]
 80166b2:	681b      	ldr	r3, [r3, #0]
 80166b4:	4a2e      	ldr	r2, [pc, #184]	; (8016770 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80166b6:	4293      	cmp	r3, r2
 80166b8:	d004      	beq.n	80166c4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80166ba:	687b      	ldr	r3, [r7, #4]
 80166bc:	681b      	ldr	r3, [r3, #0]
 80166be:	4a2d      	ldr	r2, [pc, #180]	; (8016774 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80166c0:	4293      	cmp	r3, r2
 80166c2:	d108      	bne.n	80166d6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80166c4:	68fb      	ldr	r3, [r7, #12]
 80166c6:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80166ca:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80166cc:	683b      	ldr	r3, [r7, #0]
 80166ce:	685b      	ldr	r3, [r3, #4]
 80166d0:	68fa      	ldr	r2, [r7, #12]
 80166d2:	4313      	orrs	r3, r2
 80166d4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80166d6:	68fb      	ldr	r3, [r7, #12]
 80166d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80166dc:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80166de:	683b      	ldr	r3, [r7, #0]
 80166e0:	681b      	ldr	r3, [r3, #0]
 80166e2:	68fa      	ldr	r2, [r7, #12]
 80166e4:	4313      	orrs	r3, r2
 80166e6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80166e8:	687b      	ldr	r3, [r7, #4]
 80166ea:	681b      	ldr	r3, [r3, #0]
 80166ec:	68fa      	ldr	r2, [r7, #12]
 80166ee:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80166f0:	687b      	ldr	r3, [r7, #4]
 80166f2:	681b      	ldr	r3, [r3, #0]
 80166f4:	4a1e      	ldr	r2, [pc, #120]	; (8016770 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80166f6:	4293      	cmp	r3, r2
 80166f8:	d01d      	beq.n	8016736 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80166fa:	687b      	ldr	r3, [r7, #4]
 80166fc:	681b      	ldr	r3, [r3, #0]
 80166fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8016702:	d018      	beq.n	8016736 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8016704:	687b      	ldr	r3, [r7, #4]
 8016706:	681b      	ldr	r3, [r3, #0]
 8016708:	4a1b      	ldr	r2, [pc, #108]	; (8016778 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 801670a:	4293      	cmp	r3, r2
 801670c:	d013      	beq.n	8016736 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 801670e:	687b      	ldr	r3, [r7, #4]
 8016710:	681b      	ldr	r3, [r3, #0]
 8016712:	4a1a      	ldr	r2, [pc, #104]	; (801677c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8016714:	4293      	cmp	r3, r2
 8016716:	d00e      	beq.n	8016736 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8016718:	687b      	ldr	r3, [r7, #4]
 801671a:	681b      	ldr	r3, [r3, #0]
 801671c:	4a18      	ldr	r2, [pc, #96]	; (8016780 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 801671e:	4293      	cmp	r3, r2
 8016720:	d009      	beq.n	8016736 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8016722:	687b      	ldr	r3, [r7, #4]
 8016724:	681b      	ldr	r3, [r3, #0]
 8016726:	4a13      	ldr	r2, [pc, #76]	; (8016774 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8016728:	4293      	cmp	r3, r2
 801672a:	d004      	beq.n	8016736 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 801672c:	687b      	ldr	r3, [r7, #4]
 801672e:	681b      	ldr	r3, [r3, #0]
 8016730:	4a14      	ldr	r2, [pc, #80]	; (8016784 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8016732:	4293      	cmp	r3, r2
 8016734:	d10c      	bne.n	8016750 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8016736:	68bb      	ldr	r3, [r7, #8]
 8016738:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801673c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 801673e:	683b      	ldr	r3, [r7, #0]
 8016740:	689b      	ldr	r3, [r3, #8]
 8016742:	68ba      	ldr	r2, [r7, #8]
 8016744:	4313      	orrs	r3, r2
 8016746:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8016748:	687b      	ldr	r3, [r7, #4]
 801674a:	681b      	ldr	r3, [r3, #0]
 801674c:	68ba      	ldr	r2, [r7, #8]
 801674e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8016750:	687b      	ldr	r3, [r7, #4]
 8016752:	2201      	movs	r2, #1
 8016754:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8016758:	687b      	ldr	r3, [r7, #4]
 801675a:	2200      	movs	r2, #0
 801675c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8016760:	2300      	movs	r3, #0
}
 8016762:	4618      	mov	r0, r3
 8016764:	3714      	adds	r7, #20
 8016766:	46bd      	mov	sp, r7
 8016768:	f85d 7b04 	ldr.w	r7, [sp], #4
 801676c:	4770      	bx	lr
 801676e:	bf00      	nop
 8016770:	40012c00 	.word	0x40012c00
 8016774:	40013400 	.word	0x40013400
 8016778:	40000400 	.word	0x40000400
 801677c:	40000800 	.word	0x40000800
 8016780:	40000c00 	.word	0x40000c00
 8016784:	40014000 	.word	0x40014000

08016788 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8016788:	b480      	push	{r7}
 801678a:	b085      	sub	sp, #20
 801678c:	af00      	add	r7, sp, #0
 801678e:	6078      	str	r0, [r7, #4]
 8016790:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8016792:	2300      	movs	r3, #0
 8016794:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8016796:	687b      	ldr	r3, [r7, #4]
 8016798:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801679c:	2b01      	cmp	r3, #1
 801679e:	d101      	bne.n	80167a4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80167a0:	2302      	movs	r3, #2
 80167a2:	e087      	b.n	80168b4 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>
 80167a4:	687b      	ldr	r3, [r7, #4]
 80167a6:	2201      	movs	r2, #1
 80167a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80167ac:	68fb      	ldr	r3, [r7, #12]
 80167ae:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80167b2:	683b      	ldr	r3, [r7, #0]
 80167b4:	68db      	ldr	r3, [r3, #12]
 80167b6:	4313      	orrs	r3, r2
 80167b8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80167ba:	68fb      	ldr	r3, [r7, #12]
 80167bc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80167c0:	683b      	ldr	r3, [r7, #0]
 80167c2:	689b      	ldr	r3, [r3, #8]
 80167c4:	4313      	orrs	r3, r2
 80167c6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80167c8:	68fb      	ldr	r3, [r7, #12]
 80167ca:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80167ce:	683b      	ldr	r3, [r7, #0]
 80167d0:	685b      	ldr	r3, [r3, #4]
 80167d2:	4313      	orrs	r3, r2
 80167d4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80167d6:	68fb      	ldr	r3, [r7, #12]
 80167d8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80167dc:	683b      	ldr	r3, [r7, #0]
 80167de:	681b      	ldr	r3, [r3, #0]
 80167e0:	4313      	orrs	r3, r2
 80167e2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80167e4:	68fb      	ldr	r3, [r7, #12]
 80167e6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80167ea:	683b      	ldr	r3, [r7, #0]
 80167ec:	691b      	ldr	r3, [r3, #16]
 80167ee:	4313      	orrs	r3, r2
 80167f0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80167f2:	68fb      	ldr	r3, [r7, #12]
 80167f4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80167f8:	683b      	ldr	r3, [r7, #0]
 80167fa:	695b      	ldr	r3, [r3, #20]
 80167fc:	4313      	orrs	r3, r2
 80167fe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8016800:	68fb      	ldr	r3, [r7, #12]
 8016802:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8016806:	683b      	ldr	r3, [r7, #0]
 8016808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801680a:	4313      	orrs	r3, r2
 801680c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 801680e:	68fb      	ldr	r3, [r7, #12]
 8016810:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8016814:	683b      	ldr	r3, [r7, #0]
 8016816:	699b      	ldr	r3, [r3, #24]
 8016818:	041b      	lsls	r3, r3, #16
 801681a:	4313      	orrs	r3, r2
 801681c:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 801681e:	687b      	ldr	r3, [r7, #4]
 8016820:	681b      	ldr	r3, [r3, #0]
 8016822:	4a27      	ldr	r2, [pc, #156]	; (80168c0 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8016824:	4293      	cmp	r3, r2
 8016826:	d004      	beq.n	8016832 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8016828:	687b      	ldr	r3, [r7, #4]
 801682a:	681b      	ldr	r3, [r3, #0]
 801682c:	4a25      	ldr	r2, [pc, #148]	; (80168c4 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 801682e:	4293      	cmp	r3, r2
 8016830:	d106      	bne.n	8016840 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8016832:	68fb      	ldr	r3, [r7, #12]
 8016834:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8016838:	683b      	ldr	r3, [r7, #0]
 801683a:	69db      	ldr	r3, [r3, #28]
 801683c:	4313      	orrs	r3, r2
 801683e:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8016840:	687b      	ldr	r3, [r7, #4]
 8016842:	681b      	ldr	r3, [r3, #0]
 8016844:	4a1e      	ldr	r2, [pc, #120]	; (80168c0 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8016846:	4293      	cmp	r3, r2
 8016848:	d004      	beq.n	8016854 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 801684a:	687b      	ldr	r3, [r7, #4]
 801684c:	681b      	ldr	r3, [r3, #0]
 801684e:	4a1d      	ldr	r2, [pc, #116]	; (80168c4 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8016850:	4293      	cmp	r3, r2
 8016852:	d126      	bne.n	80168a2 <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8016854:	68fb      	ldr	r3, [r7, #12]
 8016856:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 801685a:	683b      	ldr	r3, [r7, #0]
 801685c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801685e:	051b      	lsls	r3, r3, #20
 8016860:	4313      	orrs	r3, r2
 8016862:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8016864:	68fb      	ldr	r3, [r7, #12]
 8016866:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 801686a:	683b      	ldr	r3, [r7, #0]
 801686c:	6a1b      	ldr	r3, [r3, #32]
 801686e:	4313      	orrs	r3, r2
 8016870:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8016872:	68fb      	ldr	r3, [r7, #12]
 8016874:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8016878:	683b      	ldr	r3, [r7, #0]
 801687a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801687c:	4313      	orrs	r3, r2
 801687e:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8016880:	687b      	ldr	r3, [r7, #4]
 8016882:	681b      	ldr	r3, [r3, #0]
 8016884:	4a0e      	ldr	r2, [pc, #56]	; (80168c0 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8016886:	4293      	cmp	r3, r2
 8016888:	d004      	beq.n	8016894 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>
 801688a:	687b      	ldr	r3, [r7, #4]
 801688c:	681b      	ldr	r3, [r3, #0]
 801688e:	4a0d      	ldr	r2, [pc, #52]	; (80168c4 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8016890:	4293      	cmp	r3, r2
 8016892:	d106      	bne.n	80168a2 <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8016894:	68fb      	ldr	r3, [r7, #12]
 8016896:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 801689a:	683b      	ldr	r3, [r7, #0]
 801689c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801689e:	4313      	orrs	r3, r2
 80168a0:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80168a2:	687b      	ldr	r3, [r7, #4]
 80168a4:	681b      	ldr	r3, [r3, #0]
 80168a6:	68fa      	ldr	r2, [r7, #12]
 80168a8:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80168aa:	687b      	ldr	r3, [r7, #4]
 80168ac:	2200      	movs	r2, #0
 80168ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80168b2:	2300      	movs	r3, #0
}
 80168b4:	4618      	mov	r0, r3
 80168b6:	3714      	adds	r7, #20
 80168b8:	46bd      	mov	sp, r7
 80168ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80168be:	4770      	bx	lr
 80168c0:	40012c00 	.word	0x40012c00
 80168c4:	40013400 	.word	0x40013400

080168c8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80168c8:	b480      	push	{r7}
 80168ca:	b083      	sub	sp, #12
 80168cc:	af00      	add	r7, sp, #0
 80168ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80168d0:	bf00      	nop
 80168d2:	370c      	adds	r7, #12
 80168d4:	46bd      	mov	sp, r7
 80168d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80168da:	4770      	bx	lr

080168dc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80168dc:	b480      	push	{r7}
 80168de:	b083      	sub	sp, #12
 80168e0:	af00      	add	r7, sp, #0
 80168e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80168e4:	bf00      	nop
 80168e6:	370c      	adds	r7, #12
 80168e8:	46bd      	mov	sp, r7
 80168ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80168ee:	4770      	bx	lr

080168f0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80168f0:	b480      	push	{r7}
 80168f2:	b083      	sub	sp, #12
 80168f4:	af00      	add	r7, sp, #0
 80168f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80168f8:	bf00      	nop
 80168fa:	370c      	adds	r7, #12
 80168fc:	46bd      	mov	sp, r7
 80168fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016902:	4770      	bx	lr

08016904 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8016904:	b580      	push	{r7, lr}
 8016906:	b082      	sub	sp, #8
 8016908:	af00      	add	r7, sp, #0
 801690a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 801690c:	687b      	ldr	r3, [r7, #4]
 801690e:	2b00      	cmp	r3, #0
 8016910:	d101      	bne.n	8016916 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8016912:	2301      	movs	r3, #1
 8016914:	e042      	b.n	801699c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8016916:	687b      	ldr	r3, [r7, #4]
 8016918:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801691c:	2b00      	cmp	r3, #0
 801691e:	d106      	bne.n	801692e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8016920:	687b      	ldr	r3, [r7, #4]
 8016922:	2200      	movs	r2, #0
 8016924:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8016928:	6878      	ldr	r0, [r7, #4]
 801692a:	f7f7 fa19 	bl	800dd60 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 801692e:	687b      	ldr	r3, [r7, #4]
 8016930:	2224      	movs	r2, #36	; 0x24
 8016932:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8016936:	687b      	ldr	r3, [r7, #4]
 8016938:	681b      	ldr	r3, [r3, #0]
 801693a:	681a      	ldr	r2, [r3, #0]
 801693c:	687b      	ldr	r3, [r7, #4]
 801693e:	681b      	ldr	r3, [r3, #0]
 8016940:	f022 0201 	bic.w	r2, r2, #1
 8016944:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8016946:	6878      	ldr	r0, [r7, #4]
 8016948:	f000 fbbc 	bl	80170c4 <UART_SetConfig>
 801694c:	4603      	mov	r3, r0
 801694e:	2b01      	cmp	r3, #1
 8016950:	d101      	bne.n	8016956 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8016952:	2301      	movs	r3, #1
 8016954:	e022      	b.n	801699c <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8016956:	687b      	ldr	r3, [r7, #4]
 8016958:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801695a:	2b00      	cmp	r3, #0
 801695c:	d002      	beq.n	8016964 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 801695e:	6878      	ldr	r0, [r7, #4]
 8016960:	f000 feb0 	bl	80176c4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8016964:	687b      	ldr	r3, [r7, #4]
 8016966:	681b      	ldr	r3, [r3, #0]
 8016968:	685a      	ldr	r2, [r3, #4]
 801696a:	687b      	ldr	r3, [r7, #4]
 801696c:	681b      	ldr	r3, [r3, #0]
 801696e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8016972:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8016974:	687b      	ldr	r3, [r7, #4]
 8016976:	681b      	ldr	r3, [r3, #0]
 8016978:	689a      	ldr	r2, [r3, #8]
 801697a:	687b      	ldr	r3, [r7, #4]
 801697c:	681b      	ldr	r3, [r3, #0]
 801697e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8016982:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8016984:	687b      	ldr	r3, [r7, #4]
 8016986:	681b      	ldr	r3, [r3, #0]
 8016988:	681a      	ldr	r2, [r3, #0]
 801698a:	687b      	ldr	r3, [r7, #4]
 801698c:	681b      	ldr	r3, [r3, #0]
 801698e:	f042 0201 	orr.w	r2, r2, #1
 8016992:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8016994:	6878      	ldr	r0, [r7, #4]
 8016996:	f000 ff37 	bl	8017808 <UART_CheckIdleState>
 801699a:	4603      	mov	r3, r0
}
 801699c:	4618      	mov	r0, r3
 801699e:	3708      	adds	r7, #8
 80169a0:	46bd      	mov	sp, r7
 80169a2:	bd80      	pop	{r7, pc}

080169a4 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80169a4:	b580      	push	{r7, lr}
 80169a6:	b08a      	sub	sp, #40	; 0x28
 80169a8:	af00      	add	r7, sp, #0
 80169aa:	60f8      	str	r0, [r7, #12]
 80169ac:	60b9      	str	r1, [r7, #8]
 80169ae:	4613      	mov	r3, r2
 80169b0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80169b2:	68fb      	ldr	r3, [r7, #12]
 80169b4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80169b8:	2b20      	cmp	r3, #32
 80169ba:	d137      	bne.n	8016a2c <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 80169bc:	68bb      	ldr	r3, [r7, #8]
 80169be:	2b00      	cmp	r3, #0
 80169c0:	d002      	beq.n	80169c8 <HAL_UART_Receive_IT+0x24>
 80169c2:	88fb      	ldrh	r3, [r7, #6]
 80169c4:	2b00      	cmp	r3, #0
 80169c6:	d101      	bne.n	80169cc <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80169c8:	2301      	movs	r3, #1
 80169ca:	e030      	b.n	8016a2e <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80169cc:	68fb      	ldr	r3, [r7, #12]
 80169ce:	2200      	movs	r2, #0
 80169d0:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80169d2:	68fb      	ldr	r3, [r7, #12]
 80169d4:	681b      	ldr	r3, [r3, #0]
 80169d6:	4a18      	ldr	r2, [pc, #96]	; (8016a38 <HAL_UART_Receive_IT+0x94>)
 80169d8:	4293      	cmp	r3, r2
 80169da:	d01f      	beq.n	8016a1c <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80169dc:	68fb      	ldr	r3, [r7, #12]
 80169de:	681b      	ldr	r3, [r3, #0]
 80169e0:	685b      	ldr	r3, [r3, #4]
 80169e2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80169e6:	2b00      	cmp	r3, #0
 80169e8:	d018      	beq.n	8016a1c <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80169ea:	68fb      	ldr	r3, [r7, #12]
 80169ec:	681b      	ldr	r3, [r3, #0]
 80169ee:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80169f0:	697b      	ldr	r3, [r7, #20]
 80169f2:	e853 3f00 	ldrex	r3, [r3]
 80169f6:	613b      	str	r3, [r7, #16]
   return(result);
 80169f8:	693b      	ldr	r3, [r7, #16]
 80169fa:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80169fe:	627b      	str	r3, [r7, #36]	; 0x24
 8016a00:	68fb      	ldr	r3, [r7, #12]
 8016a02:	681b      	ldr	r3, [r3, #0]
 8016a04:	461a      	mov	r2, r3
 8016a06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016a08:	623b      	str	r3, [r7, #32]
 8016a0a:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016a0c:	69f9      	ldr	r1, [r7, #28]
 8016a0e:	6a3a      	ldr	r2, [r7, #32]
 8016a10:	e841 2300 	strex	r3, r2, [r1]
 8016a14:	61bb      	str	r3, [r7, #24]
   return(result);
 8016a16:	69bb      	ldr	r3, [r7, #24]
 8016a18:	2b00      	cmp	r3, #0
 8016a1a:	d1e6      	bne.n	80169ea <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8016a1c:	88fb      	ldrh	r3, [r7, #6]
 8016a1e:	461a      	mov	r2, r3
 8016a20:	68b9      	ldr	r1, [r7, #8]
 8016a22:	68f8      	ldr	r0, [r7, #12]
 8016a24:	f001 f802 	bl	8017a2c <UART_Start_Receive_IT>
 8016a28:	4603      	mov	r3, r0
 8016a2a:	e000      	b.n	8016a2e <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8016a2c:	2302      	movs	r3, #2
  }
}
 8016a2e:	4618      	mov	r0, r3
 8016a30:	3728      	adds	r7, #40	; 0x28
 8016a32:	46bd      	mov	sp, r7
 8016a34:	bd80      	pop	{r7, pc}
 8016a36:	bf00      	nop
 8016a38:	40008000 	.word	0x40008000

08016a3c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8016a3c:	b580      	push	{r7, lr}
 8016a3e:	b0ba      	sub	sp, #232	; 0xe8
 8016a40:	af00      	add	r7, sp, #0
 8016a42:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8016a44:	687b      	ldr	r3, [r7, #4]
 8016a46:	681b      	ldr	r3, [r3, #0]
 8016a48:	69db      	ldr	r3, [r3, #28]
 8016a4a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8016a4e:	687b      	ldr	r3, [r7, #4]
 8016a50:	681b      	ldr	r3, [r3, #0]
 8016a52:	681b      	ldr	r3, [r3, #0]
 8016a54:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8016a58:	687b      	ldr	r3, [r7, #4]
 8016a5a:	681b      	ldr	r3, [r3, #0]
 8016a5c:	689b      	ldr	r3, [r3, #8]
 8016a5e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8016a62:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8016a66:	f640 030f 	movw	r3, #2063	; 0x80f
 8016a6a:	4013      	ands	r3, r2
 8016a6c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8016a70:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8016a74:	2b00      	cmp	r3, #0
 8016a76:	d11b      	bne.n	8016ab0 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8016a78:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8016a7c:	f003 0320 	and.w	r3, r3, #32
 8016a80:	2b00      	cmp	r3, #0
 8016a82:	d015      	beq.n	8016ab0 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8016a84:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8016a88:	f003 0320 	and.w	r3, r3, #32
 8016a8c:	2b00      	cmp	r3, #0
 8016a8e:	d105      	bne.n	8016a9c <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8016a90:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8016a94:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8016a98:	2b00      	cmp	r3, #0
 8016a9a:	d009      	beq.n	8016ab0 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8016a9c:	687b      	ldr	r3, [r7, #4]
 8016a9e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8016aa0:	2b00      	cmp	r3, #0
 8016aa2:	f000 82e3 	beq.w	801706c <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 8016aa6:	687b      	ldr	r3, [r7, #4]
 8016aa8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8016aaa:	6878      	ldr	r0, [r7, #4]
 8016aac:	4798      	blx	r3
      }
      return;
 8016aae:	e2dd      	b.n	801706c <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8016ab0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8016ab4:	2b00      	cmp	r3, #0
 8016ab6:	f000 8123 	beq.w	8016d00 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8016aba:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8016abe:	4b8d      	ldr	r3, [pc, #564]	; (8016cf4 <HAL_UART_IRQHandler+0x2b8>)
 8016ac0:	4013      	ands	r3, r2
 8016ac2:	2b00      	cmp	r3, #0
 8016ac4:	d106      	bne.n	8016ad4 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8016ac6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8016aca:	4b8b      	ldr	r3, [pc, #556]	; (8016cf8 <HAL_UART_IRQHandler+0x2bc>)
 8016acc:	4013      	ands	r3, r2
 8016ace:	2b00      	cmp	r3, #0
 8016ad0:	f000 8116 	beq.w	8016d00 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8016ad4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8016ad8:	f003 0301 	and.w	r3, r3, #1
 8016adc:	2b00      	cmp	r3, #0
 8016ade:	d011      	beq.n	8016b04 <HAL_UART_IRQHandler+0xc8>
 8016ae0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8016ae4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8016ae8:	2b00      	cmp	r3, #0
 8016aea:	d00b      	beq.n	8016b04 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8016aec:	687b      	ldr	r3, [r7, #4]
 8016aee:	681b      	ldr	r3, [r3, #0]
 8016af0:	2201      	movs	r2, #1
 8016af2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8016af4:	687b      	ldr	r3, [r7, #4]
 8016af6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8016afa:	f043 0201 	orr.w	r2, r3, #1
 8016afe:	687b      	ldr	r3, [r7, #4]
 8016b00:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8016b04:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8016b08:	f003 0302 	and.w	r3, r3, #2
 8016b0c:	2b00      	cmp	r3, #0
 8016b0e:	d011      	beq.n	8016b34 <HAL_UART_IRQHandler+0xf8>
 8016b10:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8016b14:	f003 0301 	and.w	r3, r3, #1
 8016b18:	2b00      	cmp	r3, #0
 8016b1a:	d00b      	beq.n	8016b34 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8016b1c:	687b      	ldr	r3, [r7, #4]
 8016b1e:	681b      	ldr	r3, [r3, #0]
 8016b20:	2202      	movs	r2, #2
 8016b22:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8016b24:	687b      	ldr	r3, [r7, #4]
 8016b26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8016b2a:	f043 0204 	orr.w	r2, r3, #4
 8016b2e:	687b      	ldr	r3, [r7, #4]
 8016b30:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8016b34:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8016b38:	f003 0304 	and.w	r3, r3, #4
 8016b3c:	2b00      	cmp	r3, #0
 8016b3e:	d011      	beq.n	8016b64 <HAL_UART_IRQHandler+0x128>
 8016b40:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8016b44:	f003 0301 	and.w	r3, r3, #1
 8016b48:	2b00      	cmp	r3, #0
 8016b4a:	d00b      	beq.n	8016b64 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8016b4c:	687b      	ldr	r3, [r7, #4]
 8016b4e:	681b      	ldr	r3, [r3, #0]
 8016b50:	2204      	movs	r2, #4
 8016b52:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8016b54:	687b      	ldr	r3, [r7, #4]
 8016b56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8016b5a:	f043 0202 	orr.w	r2, r3, #2
 8016b5e:	687b      	ldr	r3, [r7, #4]
 8016b60:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8016b64:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8016b68:	f003 0308 	and.w	r3, r3, #8
 8016b6c:	2b00      	cmp	r3, #0
 8016b6e:	d017      	beq.n	8016ba0 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8016b70:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8016b74:	f003 0320 	and.w	r3, r3, #32
 8016b78:	2b00      	cmp	r3, #0
 8016b7a:	d105      	bne.n	8016b88 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8016b7c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8016b80:	4b5c      	ldr	r3, [pc, #368]	; (8016cf4 <HAL_UART_IRQHandler+0x2b8>)
 8016b82:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8016b84:	2b00      	cmp	r3, #0
 8016b86:	d00b      	beq.n	8016ba0 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8016b88:	687b      	ldr	r3, [r7, #4]
 8016b8a:	681b      	ldr	r3, [r3, #0]
 8016b8c:	2208      	movs	r2, #8
 8016b8e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8016b90:	687b      	ldr	r3, [r7, #4]
 8016b92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8016b96:	f043 0208 	orr.w	r2, r3, #8
 8016b9a:	687b      	ldr	r3, [r7, #4]
 8016b9c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8016ba0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8016ba4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8016ba8:	2b00      	cmp	r3, #0
 8016baa:	d012      	beq.n	8016bd2 <HAL_UART_IRQHandler+0x196>
 8016bac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8016bb0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8016bb4:	2b00      	cmp	r3, #0
 8016bb6:	d00c      	beq.n	8016bd2 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8016bb8:	687b      	ldr	r3, [r7, #4]
 8016bba:	681b      	ldr	r3, [r3, #0]
 8016bbc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8016bc0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8016bc2:	687b      	ldr	r3, [r7, #4]
 8016bc4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8016bc8:	f043 0220 	orr.w	r2, r3, #32
 8016bcc:	687b      	ldr	r3, [r7, #4]
 8016bce:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8016bd2:	687b      	ldr	r3, [r7, #4]
 8016bd4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8016bd8:	2b00      	cmp	r3, #0
 8016bda:	f000 8249 	beq.w	8017070 <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8016bde:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8016be2:	f003 0320 	and.w	r3, r3, #32
 8016be6:	2b00      	cmp	r3, #0
 8016be8:	d013      	beq.n	8016c12 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8016bea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8016bee:	f003 0320 	and.w	r3, r3, #32
 8016bf2:	2b00      	cmp	r3, #0
 8016bf4:	d105      	bne.n	8016c02 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8016bf6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8016bfa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8016bfe:	2b00      	cmp	r3, #0
 8016c00:	d007      	beq.n	8016c12 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8016c02:	687b      	ldr	r3, [r7, #4]
 8016c04:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8016c06:	2b00      	cmp	r3, #0
 8016c08:	d003      	beq.n	8016c12 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8016c0a:	687b      	ldr	r3, [r7, #4]
 8016c0c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8016c0e:	6878      	ldr	r0, [r7, #4]
 8016c10:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8016c12:	687b      	ldr	r3, [r7, #4]
 8016c14:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8016c18:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8016c1c:	687b      	ldr	r3, [r7, #4]
 8016c1e:	681b      	ldr	r3, [r3, #0]
 8016c20:	689b      	ldr	r3, [r3, #8]
 8016c22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8016c26:	2b40      	cmp	r3, #64	; 0x40
 8016c28:	d005      	beq.n	8016c36 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8016c2a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8016c2e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8016c32:	2b00      	cmp	r3, #0
 8016c34:	d054      	beq.n	8016ce0 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8016c36:	6878      	ldr	r0, [r7, #4]
 8016c38:	f001 f81a 	bl	8017c70 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8016c3c:	687b      	ldr	r3, [r7, #4]
 8016c3e:	681b      	ldr	r3, [r3, #0]
 8016c40:	689b      	ldr	r3, [r3, #8]
 8016c42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8016c46:	2b40      	cmp	r3, #64	; 0x40
 8016c48:	d146      	bne.n	8016cd8 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8016c4a:	687b      	ldr	r3, [r7, #4]
 8016c4c:	681b      	ldr	r3, [r3, #0]
 8016c4e:	3308      	adds	r3, #8
 8016c50:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016c54:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8016c58:	e853 3f00 	ldrex	r3, [r3]
 8016c5c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8016c60:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8016c64:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8016c68:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8016c6c:	687b      	ldr	r3, [r7, #4]
 8016c6e:	681b      	ldr	r3, [r3, #0]
 8016c70:	3308      	adds	r3, #8
 8016c72:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8016c76:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8016c7a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016c7e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8016c82:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8016c86:	e841 2300 	strex	r3, r2, [r1]
 8016c8a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8016c8e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8016c92:	2b00      	cmp	r3, #0
 8016c94:	d1d9      	bne.n	8016c4a <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8016c96:	687b      	ldr	r3, [r7, #4]
 8016c98:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8016c9c:	2b00      	cmp	r3, #0
 8016c9e:	d017      	beq.n	8016cd0 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8016ca0:	687b      	ldr	r3, [r7, #4]
 8016ca2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8016ca6:	4a15      	ldr	r2, [pc, #84]	; (8016cfc <HAL_UART_IRQHandler+0x2c0>)
 8016ca8:	641a      	str	r2, [r3, #64]	; 0x40

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8016caa:	687b      	ldr	r3, [r7, #4]
 8016cac:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8016cb0:	4618      	mov	r0, r3
 8016cb2:	f7f9 fd6e 	bl	8010792 <HAL_DMA_Abort_IT>
 8016cb6:	4603      	mov	r3, r0
 8016cb8:	2b00      	cmp	r3, #0
 8016cba:	d019      	beq.n	8016cf0 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8016cbc:	687b      	ldr	r3, [r7, #4]
 8016cbe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8016cc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016cc4:	687a      	ldr	r2, [r7, #4]
 8016cc6:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 8016cca:	4610      	mov	r0, r2
 8016ccc:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8016cce:	e00f      	b.n	8016cf0 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8016cd0:	6878      	ldr	r0, [r7, #4]
 8016cd2:	f000 f9e1 	bl	8017098 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8016cd6:	e00b      	b.n	8016cf0 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8016cd8:	6878      	ldr	r0, [r7, #4]
 8016cda:	f000 f9dd 	bl	8017098 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8016cde:	e007      	b.n	8016cf0 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8016ce0:	6878      	ldr	r0, [r7, #4]
 8016ce2:	f000 f9d9 	bl	8017098 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8016ce6:	687b      	ldr	r3, [r7, #4]
 8016ce8:	2200      	movs	r2, #0
 8016cea:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 8016cee:	e1bf      	b.n	8017070 <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8016cf0:	bf00      	nop
    return;
 8016cf2:	e1bd      	b.n	8017070 <HAL_UART_IRQHandler+0x634>
 8016cf4:	10000001 	.word	0x10000001
 8016cf8:	04000120 	.word	0x04000120
 8016cfc:	08017d3d 	.word	0x08017d3d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8016d00:	687b      	ldr	r3, [r7, #4]
 8016d02:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016d04:	2b01      	cmp	r3, #1
 8016d06:	f040 8153 	bne.w	8016fb0 <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8016d0a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8016d0e:	f003 0310 	and.w	r3, r3, #16
 8016d12:	2b00      	cmp	r3, #0
 8016d14:	f000 814c 	beq.w	8016fb0 <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8016d18:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8016d1c:	f003 0310 	and.w	r3, r3, #16
 8016d20:	2b00      	cmp	r3, #0
 8016d22:	f000 8145 	beq.w	8016fb0 <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8016d26:	687b      	ldr	r3, [r7, #4]
 8016d28:	681b      	ldr	r3, [r3, #0]
 8016d2a:	2210      	movs	r2, #16
 8016d2c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8016d2e:	687b      	ldr	r3, [r7, #4]
 8016d30:	681b      	ldr	r3, [r3, #0]
 8016d32:	689b      	ldr	r3, [r3, #8]
 8016d34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8016d38:	2b40      	cmp	r3, #64	; 0x40
 8016d3a:	f040 80bb 	bne.w	8016eb4 <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8016d3e:	687b      	ldr	r3, [r7, #4]
 8016d40:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8016d44:	681b      	ldr	r3, [r3, #0]
 8016d46:	685b      	ldr	r3, [r3, #4]
 8016d48:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8016d4c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8016d50:	2b00      	cmp	r3, #0
 8016d52:	f000 818f 	beq.w	8017074 <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8016d56:	687b      	ldr	r3, [r7, #4]
 8016d58:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8016d5c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8016d60:	429a      	cmp	r2, r3
 8016d62:	f080 8187 	bcs.w	8017074 <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8016d66:	687b      	ldr	r3, [r7, #4]
 8016d68:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8016d6c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8016d70:	687b      	ldr	r3, [r7, #4]
 8016d72:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8016d76:	681b      	ldr	r3, [r3, #0]
 8016d78:	681b      	ldr	r3, [r3, #0]
 8016d7a:	f003 0320 	and.w	r3, r3, #32
 8016d7e:	2b00      	cmp	r3, #0
 8016d80:	f040 8087 	bne.w	8016e92 <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8016d84:	687b      	ldr	r3, [r7, #4]
 8016d86:	681b      	ldr	r3, [r3, #0]
 8016d88:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016d8c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8016d90:	e853 3f00 	ldrex	r3, [r3]
 8016d94:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8016d98:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8016d9c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8016da0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8016da4:	687b      	ldr	r3, [r7, #4]
 8016da6:	681b      	ldr	r3, [r3, #0]
 8016da8:	461a      	mov	r2, r3
 8016daa:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8016dae:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8016db2:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016db6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8016dba:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8016dbe:	e841 2300 	strex	r3, r2, [r1]
 8016dc2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8016dc6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8016dca:	2b00      	cmp	r3, #0
 8016dcc:	d1da      	bne.n	8016d84 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8016dce:	687b      	ldr	r3, [r7, #4]
 8016dd0:	681b      	ldr	r3, [r3, #0]
 8016dd2:	3308      	adds	r3, #8
 8016dd4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016dd6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8016dd8:	e853 3f00 	ldrex	r3, [r3]
 8016ddc:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8016dde:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8016de0:	f023 0301 	bic.w	r3, r3, #1
 8016de4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8016de8:	687b      	ldr	r3, [r7, #4]
 8016dea:	681b      	ldr	r3, [r3, #0]
 8016dec:	3308      	adds	r3, #8
 8016dee:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8016df2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8016df6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016df8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8016dfa:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8016dfe:	e841 2300 	strex	r3, r2, [r1]
 8016e02:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8016e04:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8016e06:	2b00      	cmp	r3, #0
 8016e08:	d1e1      	bne.n	8016dce <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8016e0a:	687b      	ldr	r3, [r7, #4]
 8016e0c:	681b      	ldr	r3, [r3, #0]
 8016e0e:	3308      	adds	r3, #8
 8016e10:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016e12:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8016e14:	e853 3f00 	ldrex	r3, [r3]
 8016e18:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8016e1a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8016e1c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8016e20:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8016e24:	687b      	ldr	r3, [r7, #4]
 8016e26:	681b      	ldr	r3, [r3, #0]
 8016e28:	3308      	adds	r3, #8
 8016e2a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8016e2e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8016e30:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016e32:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8016e34:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8016e36:	e841 2300 	strex	r3, r2, [r1]
 8016e3a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8016e3c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8016e3e:	2b00      	cmp	r3, #0
 8016e40:	d1e3      	bne.n	8016e0a <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8016e42:	687b      	ldr	r3, [r7, #4]
 8016e44:	2220      	movs	r2, #32
 8016e46:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8016e4a:	687b      	ldr	r3, [r7, #4]
 8016e4c:	2200      	movs	r2, #0
 8016e4e:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8016e50:	687b      	ldr	r3, [r7, #4]
 8016e52:	681b      	ldr	r3, [r3, #0]
 8016e54:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016e56:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8016e58:	e853 3f00 	ldrex	r3, [r3]
 8016e5c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8016e5e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8016e60:	f023 0310 	bic.w	r3, r3, #16
 8016e64:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8016e68:	687b      	ldr	r3, [r7, #4]
 8016e6a:	681b      	ldr	r3, [r3, #0]
 8016e6c:	461a      	mov	r2, r3
 8016e6e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8016e72:	65bb      	str	r3, [r7, #88]	; 0x58
 8016e74:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016e76:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8016e78:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8016e7a:	e841 2300 	strex	r3, r2, [r1]
 8016e7e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8016e80:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8016e82:	2b00      	cmp	r3, #0
 8016e84:	d1e4      	bne.n	8016e50 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8016e86:	687b      	ldr	r3, [r7, #4]
 8016e88:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8016e8c:	4618      	mov	r0, r3
 8016e8e:	f7f9 fc24 	bl	80106da <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8016e92:	687b      	ldr	r3, [r7, #4]
 8016e94:	2202      	movs	r2, #2
 8016e96:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8016e98:	687b      	ldr	r3, [r7, #4]
 8016e9a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8016e9e:	687b      	ldr	r3, [r7, #4]
 8016ea0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8016ea4:	b29b      	uxth	r3, r3
 8016ea6:	1ad3      	subs	r3, r2, r3
 8016ea8:	b29b      	uxth	r3, r3
 8016eaa:	4619      	mov	r1, r3
 8016eac:	6878      	ldr	r0, [r7, #4]
 8016eae:	f000 f8fd 	bl	80170ac <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8016eb2:	e0df      	b.n	8017074 <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8016eb4:	687b      	ldr	r3, [r7, #4]
 8016eb6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8016eba:	687b      	ldr	r3, [r7, #4]
 8016ebc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8016ec0:	b29b      	uxth	r3, r3
 8016ec2:	1ad3      	subs	r3, r2, r3
 8016ec4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8016ec8:	687b      	ldr	r3, [r7, #4]
 8016eca:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8016ece:	b29b      	uxth	r3, r3
 8016ed0:	2b00      	cmp	r3, #0
 8016ed2:	f000 80d1 	beq.w	8017078 <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 8016ed6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8016eda:	2b00      	cmp	r3, #0
 8016edc:	f000 80cc 	beq.w	8017078 <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8016ee0:	687b      	ldr	r3, [r7, #4]
 8016ee2:	681b      	ldr	r3, [r3, #0]
 8016ee4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016ee6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016ee8:	e853 3f00 	ldrex	r3, [r3]
 8016eec:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8016eee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016ef0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8016ef4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8016ef8:	687b      	ldr	r3, [r7, #4]
 8016efa:	681b      	ldr	r3, [r3, #0]
 8016efc:	461a      	mov	r2, r3
 8016efe:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8016f02:	647b      	str	r3, [r7, #68]	; 0x44
 8016f04:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016f06:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8016f08:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8016f0a:	e841 2300 	strex	r3, r2, [r1]
 8016f0e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8016f10:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016f12:	2b00      	cmp	r3, #0
 8016f14:	d1e4      	bne.n	8016ee0 <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8016f16:	687b      	ldr	r3, [r7, #4]
 8016f18:	681b      	ldr	r3, [r3, #0]
 8016f1a:	3308      	adds	r3, #8
 8016f1c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016f1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016f20:	e853 3f00 	ldrex	r3, [r3]
 8016f24:	623b      	str	r3, [r7, #32]
   return(result);
 8016f26:	6a3b      	ldr	r3, [r7, #32]
 8016f28:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8016f2c:	f023 0301 	bic.w	r3, r3, #1
 8016f30:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8016f34:	687b      	ldr	r3, [r7, #4]
 8016f36:	681b      	ldr	r3, [r3, #0]
 8016f38:	3308      	adds	r3, #8
 8016f3a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8016f3e:	633a      	str	r2, [r7, #48]	; 0x30
 8016f40:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016f42:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8016f44:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8016f46:	e841 2300 	strex	r3, r2, [r1]
 8016f4a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8016f4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016f4e:	2b00      	cmp	r3, #0
 8016f50:	d1e1      	bne.n	8016f16 <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8016f52:	687b      	ldr	r3, [r7, #4]
 8016f54:	2220      	movs	r2, #32
 8016f56:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8016f5a:	687b      	ldr	r3, [r7, #4]
 8016f5c:	2200      	movs	r2, #0
 8016f5e:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8016f60:	687b      	ldr	r3, [r7, #4]
 8016f62:	2200      	movs	r2, #0
 8016f64:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8016f66:	687b      	ldr	r3, [r7, #4]
 8016f68:	681b      	ldr	r3, [r3, #0]
 8016f6a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016f6c:	693b      	ldr	r3, [r7, #16]
 8016f6e:	e853 3f00 	ldrex	r3, [r3]
 8016f72:	60fb      	str	r3, [r7, #12]
   return(result);
 8016f74:	68fb      	ldr	r3, [r7, #12]
 8016f76:	f023 0310 	bic.w	r3, r3, #16
 8016f7a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8016f7e:	687b      	ldr	r3, [r7, #4]
 8016f80:	681b      	ldr	r3, [r3, #0]
 8016f82:	461a      	mov	r2, r3
 8016f84:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8016f88:	61fb      	str	r3, [r7, #28]
 8016f8a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016f8c:	69b9      	ldr	r1, [r7, #24]
 8016f8e:	69fa      	ldr	r2, [r7, #28]
 8016f90:	e841 2300 	strex	r3, r2, [r1]
 8016f94:	617b      	str	r3, [r7, #20]
   return(result);
 8016f96:	697b      	ldr	r3, [r7, #20]
 8016f98:	2b00      	cmp	r3, #0
 8016f9a:	d1e4      	bne.n	8016f66 <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8016f9c:	687b      	ldr	r3, [r7, #4]
 8016f9e:	2202      	movs	r2, #2
 8016fa0:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8016fa2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8016fa6:	4619      	mov	r1, r3
 8016fa8:	6878      	ldr	r0, [r7, #4]
 8016faa:	f000 f87f 	bl	80170ac <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8016fae:	e063      	b.n	8017078 <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8016fb0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8016fb4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8016fb8:	2b00      	cmp	r3, #0
 8016fba:	d00e      	beq.n	8016fda <HAL_UART_IRQHandler+0x59e>
 8016fbc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8016fc0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8016fc4:	2b00      	cmp	r3, #0
 8016fc6:	d008      	beq.n	8016fda <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8016fc8:	687b      	ldr	r3, [r7, #4]
 8016fca:	681b      	ldr	r3, [r3, #0]
 8016fcc:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8016fd0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8016fd2:	6878      	ldr	r0, [r7, #4]
 8016fd4:	f001 fc10 	bl	80187f8 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8016fd8:	e051      	b.n	801707e <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8016fda:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8016fde:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8016fe2:	2b00      	cmp	r3, #0
 8016fe4:	d014      	beq.n	8017010 <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8016fe6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8016fea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8016fee:	2b00      	cmp	r3, #0
 8016ff0:	d105      	bne.n	8016ffe <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8016ff2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8016ff6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8016ffa:	2b00      	cmp	r3, #0
 8016ffc:	d008      	beq.n	8017010 <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 8016ffe:	687b      	ldr	r3, [r7, #4]
 8017000:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8017002:	2b00      	cmp	r3, #0
 8017004:	d03a      	beq.n	801707c <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 8017006:	687b      	ldr	r3, [r7, #4]
 8017008:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801700a:	6878      	ldr	r0, [r7, #4]
 801700c:	4798      	blx	r3
    }
    return;
 801700e:	e035      	b.n	801707c <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8017010:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8017014:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8017018:	2b00      	cmp	r3, #0
 801701a:	d009      	beq.n	8017030 <HAL_UART_IRQHandler+0x5f4>
 801701c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8017020:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8017024:	2b00      	cmp	r3, #0
 8017026:	d003      	beq.n	8017030 <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 8017028:	6878      	ldr	r0, [r7, #4]
 801702a:	f000 fe9d 	bl	8017d68 <UART_EndTransmit_IT>
    return;
 801702e:	e026      	b.n	801707e <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8017030:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8017034:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8017038:	2b00      	cmp	r3, #0
 801703a:	d009      	beq.n	8017050 <HAL_UART_IRQHandler+0x614>
 801703c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8017040:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8017044:	2b00      	cmp	r3, #0
 8017046:	d003      	beq.n	8017050 <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8017048:	6878      	ldr	r0, [r7, #4]
 801704a:	f001 fbe9 	bl	8018820 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 801704e:	e016      	b.n	801707e <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8017050:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8017054:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8017058:	2b00      	cmp	r3, #0
 801705a:	d010      	beq.n	801707e <HAL_UART_IRQHandler+0x642>
 801705c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8017060:	2b00      	cmp	r3, #0
 8017062:	da0c      	bge.n	801707e <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8017064:	6878      	ldr	r0, [r7, #4]
 8017066:	f001 fbd1 	bl	801880c <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 801706a:	e008      	b.n	801707e <HAL_UART_IRQHandler+0x642>
      return;
 801706c:	bf00      	nop
 801706e:	e006      	b.n	801707e <HAL_UART_IRQHandler+0x642>
    return;
 8017070:	bf00      	nop
 8017072:	e004      	b.n	801707e <HAL_UART_IRQHandler+0x642>
      return;
 8017074:	bf00      	nop
 8017076:	e002      	b.n	801707e <HAL_UART_IRQHandler+0x642>
      return;
 8017078:	bf00      	nop
 801707a:	e000      	b.n	801707e <HAL_UART_IRQHandler+0x642>
    return;
 801707c:	bf00      	nop
  }
}
 801707e:	37e8      	adds	r7, #232	; 0xe8
 8017080:	46bd      	mov	sp, r7
 8017082:	bd80      	pop	{r7, pc}

08017084 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8017084:	b480      	push	{r7}
 8017086:	b083      	sub	sp, #12
 8017088:	af00      	add	r7, sp, #0
 801708a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 801708c:	bf00      	nop
 801708e:	370c      	adds	r7, #12
 8017090:	46bd      	mov	sp, r7
 8017092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017096:	4770      	bx	lr

08017098 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8017098:	b480      	push	{r7}
 801709a:	b083      	sub	sp, #12
 801709c:	af00      	add	r7, sp, #0
 801709e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80170a0:	bf00      	nop
 80170a2:	370c      	adds	r7, #12
 80170a4:	46bd      	mov	sp, r7
 80170a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80170aa:	4770      	bx	lr

080170ac <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80170ac:	b480      	push	{r7}
 80170ae:	b083      	sub	sp, #12
 80170b0:	af00      	add	r7, sp, #0
 80170b2:	6078      	str	r0, [r7, #4]
 80170b4:	460b      	mov	r3, r1
 80170b6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80170b8:	bf00      	nop
 80170ba:	370c      	adds	r7, #12
 80170bc:	46bd      	mov	sp, r7
 80170be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80170c2:	4770      	bx	lr

080170c4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80170c4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80170c8:	b08c      	sub	sp, #48	; 0x30
 80170ca:	af00      	add	r7, sp, #0
 80170cc:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80170ce:	2300      	movs	r3, #0
 80170d0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80170d4:	697b      	ldr	r3, [r7, #20]
 80170d6:	689a      	ldr	r2, [r3, #8]
 80170d8:	697b      	ldr	r3, [r7, #20]
 80170da:	691b      	ldr	r3, [r3, #16]
 80170dc:	431a      	orrs	r2, r3
 80170de:	697b      	ldr	r3, [r7, #20]
 80170e0:	695b      	ldr	r3, [r3, #20]
 80170e2:	431a      	orrs	r2, r3
 80170e4:	697b      	ldr	r3, [r7, #20]
 80170e6:	69db      	ldr	r3, [r3, #28]
 80170e8:	4313      	orrs	r3, r2
 80170ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80170ec:	697b      	ldr	r3, [r7, #20]
 80170ee:	681b      	ldr	r3, [r3, #0]
 80170f0:	681a      	ldr	r2, [r3, #0]
 80170f2:	4baa      	ldr	r3, [pc, #680]	; (801739c <UART_SetConfig+0x2d8>)
 80170f4:	4013      	ands	r3, r2
 80170f6:	697a      	ldr	r2, [r7, #20]
 80170f8:	6812      	ldr	r2, [r2, #0]
 80170fa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80170fc:	430b      	orrs	r3, r1
 80170fe:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8017100:	697b      	ldr	r3, [r7, #20]
 8017102:	681b      	ldr	r3, [r3, #0]
 8017104:	685b      	ldr	r3, [r3, #4]
 8017106:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 801710a:	697b      	ldr	r3, [r7, #20]
 801710c:	68da      	ldr	r2, [r3, #12]
 801710e:	697b      	ldr	r3, [r7, #20]
 8017110:	681b      	ldr	r3, [r3, #0]
 8017112:	430a      	orrs	r2, r1
 8017114:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8017116:	697b      	ldr	r3, [r7, #20]
 8017118:	699b      	ldr	r3, [r3, #24]
 801711a:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 801711c:	697b      	ldr	r3, [r7, #20]
 801711e:	681b      	ldr	r3, [r3, #0]
 8017120:	4a9f      	ldr	r2, [pc, #636]	; (80173a0 <UART_SetConfig+0x2dc>)
 8017122:	4293      	cmp	r3, r2
 8017124:	d004      	beq.n	8017130 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8017126:	697b      	ldr	r3, [r7, #20]
 8017128:	6a1b      	ldr	r3, [r3, #32]
 801712a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801712c:	4313      	orrs	r3, r2
 801712e:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8017130:	697b      	ldr	r3, [r7, #20]
 8017132:	681b      	ldr	r3, [r3, #0]
 8017134:	689b      	ldr	r3, [r3, #8]
 8017136:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 801713a:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 801713e:	697a      	ldr	r2, [r7, #20]
 8017140:	6812      	ldr	r2, [r2, #0]
 8017142:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8017144:	430b      	orrs	r3, r1
 8017146:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8017148:	697b      	ldr	r3, [r7, #20]
 801714a:	681b      	ldr	r3, [r3, #0]
 801714c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801714e:	f023 010f 	bic.w	r1, r3, #15
 8017152:	697b      	ldr	r3, [r7, #20]
 8017154:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8017156:	697b      	ldr	r3, [r7, #20]
 8017158:	681b      	ldr	r3, [r3, #0]
 801715a:	430a      	orrs	r2, r1
 801715c:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 801715e:	697b      	ldr	r3, [r7, #20]
 8017160:	681b      	ldr	r3, [r3, #0]
 8017162:	4a90      	ldr	r2, [pc, #576]	; (80173a4 <UART_SetConfig+0x2e0>)
 8017164:	4293      	cmp	r3, r2
 8017166:	d125      	bne.n	80171b4 <UART_SetConfig+0xf0>
 8017168:	4b8f      	ldr	r3, [pc, #572]	; (80173a8 <UART_SetConfig+0x2e4>)
 801716a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801716e:	f003 0303 	and.w	r3, r3, #3
 8017172:	2b03      	cmp	r3, #3
 8017174:	d81a      	bhi.n	80171ac <UART_SetConfig+0xe8>
 8017176:	a201      	add	r2, pc, #4	; (adr r2, 801717c <UART_SetConfig+0xb8>)
 8017178:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801717c:	0801718d 	.word	0x0801718d
 8017180:	0801719d 	.word	0x0801719d
 8017184:	08017195 	.word	0x08017195
 8017188:	080171a5 	.word	0x080171a5
 801718c:	2301      	movs	r3, #1
 801718e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8017192:	e116      	b.n	80173c2 <UART_SetConfig+0x2fe>
 8017194:	2302      	movs	r3, #2
 8017196:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801719a:	e112      	b.n	80173c2 <UART_SetConfig+0x2fe>
 801719c:	2304      	movs	r3, #4
 801719e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80171a2:	e10e      	b.n	80173c2 <UART_SetConfig+0x2fe>
 80171a4:	2308      	movs	r3, #8
 80171a6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80171aa:	e10a      	b.n	80173c2 <UART_SetConfig+0x2fe>
 80171ac:	2310      	movs	r3, #16
 80171ae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80171b2:	e106      	b.n	80173c2 <UART_SetConfig+0x2fe>
 80171b4:	697b      	ldr	r3, [r7, #20]
 80171b6:	681b      	ldr	r3, [r3, #0]
 80171b8:	4a7c      	ldr	r2, [pc, #496]	; (80173ac <UART_SetConfig+0x2e8>)
 80171ba:	4293      	cmp	r3, r2
 80171bc:	d138      	bne.n	8017230 <UART_SetConfig+0x16c>
 80171be:	4b7a      	ldr	r3, [pc, #488]	; (80173a8 <UART_SetConfig+0x2e4>)
 80171c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80171c4:	f003 030c 	and.w	r3, r3, #12
 80171c8:	2b0c      	cmp	r3, #12
 80171ca:	d82d      	bhi.n	8017228 <UART_SetConfig+0x164>
 80171cc:	a201      	add	r2, pc, #4	; (adr r2, 80171d4 <UART_SetConfig+0x110>)
 80171ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80171d2:	bf00      	nop
 80171d4:	08017209 	.word	0x08017209
 80171d8:	08017229 	.word	0x08017229
 80171dc:	08017229 	.word	0x08017229
 80171e0:	08017229 	.word	0x08017229
 80171e4:	08017219 	.word	0x08017219
 80171e8:	08017229 	.word	0x08017229
 80171ec:	08017229 	.word	0x08017229
 80171f0:	08017229 	.word	0x08017229
 80171f4:	08017211 	.word	0x08017211
 80171f8:	08017229 	.word	0x08017229
 80171fc:	08017229 	.word	0x08017229
 8017200:	08017229 	.word	0x08017229
 8017204:	08017221 	.word	0x08017221
 8017208:	2300      	movs	r3, #0
 801720a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801720e:	e0d8      	b.n	80173c2 <UART_SetConfig+0x2fe>
 8017210:	2302      	movs	r3, #2
 8017212:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8017216:	e0d4      	b.n	80173c2 <UART_SetConfig+0x2fe>
 8017218:	2304      	movs	r3, #4
 801721a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801721e:	e0d0      	b.n	80173c2 <UART_SetConfig+0x2fe>
 8017220:	2308      	movs	r3, #8
 8017222:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8017226:	e0cc      	b.n	80173c2 <UART_SetConfig+0x2fe>
 8017228:	2310      	movs	r3, #16
 801722a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801722e:	e0c8      	b.n	80173c2 <UART_SetConfig+0x2fe>
 8017230:	697b      	ldr	r3, [r7, #20]
 8017232:	681b      	ldr	r3, [r3, #0]
 8017234:	4a5e      	ldr	r2, [pc, #376]	; (80173b0 <UART_SetConfig+0x2ec>)
 8017236:	4293      	cmp	r3, r2
 8017238:	d125      	bne.n	8017286 <UART_SetConfig+0x1c2>
 801723a:	4b5b      	ldr	r3, [pc, #364]	; (80173a8 <UART_SetConfig+0x2e4>)
 801723c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8017240:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8017244:	2b30      	cmp	r3, #48	; 0x30
 8017246:	d016      	beq.n	8017276 <UART_SetConfig+0x1b2>
 8017248:	2b30      	cmp	r3, #48	; 0x30
 801724a:	d818      	bhi.n	801727e <UART_SetConfig+0x1ba>
 801724c:	2b20      	cmp	r3, #32
 801724e:	d00a      	beq.n	8017266 <UART_SetConfig+0x1a2>
 8017250:	2b20      	cmp	r3, #32
 8017252:	d814      	bhi.n	801727e <UART_SetConfig+0x1ba>
 8017254:	2b00      	cmp	r3, #0
 8017256:	d002      	beq.n	801725e <UART_SetConfig+0x19a>
 8017258:	2b10      	cmp	r3, #16
 801725a:	d008      	beq.n	801726e <UART_SetConfig+0x1aa>
 801725c:	e00f      	b.n	801727e <UART_SetConfig+0x1ba>
 801725e:	2300      	movs	r3, #0
 8017260:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8017264:	e0ad      	b.n	80173c2 <UART_SetConfig+0x2fe>
 8017266:	2302      	movs	r3, #2
 8017268:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801726c:	e0a9      	b.n	80173c2 <UART_SetConfig+0x2fe>
 801726e:	2304      	movs	r3, #4
 8017270:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8017274:	e0a5      	b.n	80173c2 <UART_SetConfig+0x2fe>
 8017276:	2308      	movs	r3, #8
 8017278:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801727c:	e0a1      	b.n	80173c2 <UART_SetConfig+0x2fe>
 801727e:	2310      	movs	r3, #16
 8017280:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8017284:	e09d      	b.n	80173c2 <UART_SetConfig+0x2fe>
 8017286:	697b      	ldr	r3, [r7, #20]
 8017288:	681b      	ldr	r3, [r3, #0]
 801728a:	4a4a      	ldr	r2, [pc, #296]	; (80173b4 <UART_SetConfig+0x2f0>)
 801728c:	4293      	cmp	r3, r2
 801728e:	d125      	bne.n	80172dc <UART_SetConfig+0x218>
 8017290:	4b45      	ldr	r3, [pc, #276]	; (80173a8 <UART_SetConfig+0x2e4>)
 8017292:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8017296:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 801729a:	2bc0      	cmp	r3, #192	; 0xc0
 801729c:	d016      	beq.n	80172cc <UART_SetConfig+0x208>
 801729e:	2bc0      	cmp	r3, #192	; 0xc0
 80172a0:	d818      	bhi.n	80172d4 <UART_SetConfig+0x210>
 80172a2:	2b80      	cmp	r3, #128	; 0x80
 80172a4:	d00a      	beq.n	80172bc <UART_SetConfig+0x1f8>
 80172a6:	2b80      	cmp	r3, #128	; 0x80
 80172a8:	d814      	bhi.n	80172d4 <UART_SetConfig+0x210>
 80172aa:	2b00      	cmp	r3, #0
 80172ac:	d002      	beq.n	80172b4 <UART_SetConfig+0x1f0>
 80172ae:	2b40      	cmp	r3, #64	; 0x40
 80172b0:	d008      	beq.n	80172c4 <UART_SetConfig+0x200>
 80172b2:	e00f      	b.n	80172d4 <UART_SetConfig+0x210>
 80172b4:	2300      	movs	r3, #0
 80172b6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80172ba:	e082      	b.n	80173c2 <UART_SetConfig+0x2fe>
 80172bc:	2302      	movs	r3, #2
 80172be:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80172c2:	e07e      	b.n	80173c2 <UART_SetConfig+0x2fe>
 80172c4:	2304      	movs	r3, #4
 80172c6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80172ca:	e07a      	b.n	80173c2 <UART_SetConfig+0x2fe>
 80172cc:	2308      	movs	r3, #8
 80172ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80172d2:	e076      	b.n	80173c2 <UART_SetConfig+0x2fe>
 80172d4:	2310      	movs	r3, #16
 80172d6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80172da:	e072      	b.n	80173c2 <UART_SetConfig+0x2fe>
 80172dc:	697b      	ldr	r3, [r7, #20]
 80172de:	681b      	ldr	r3, [r3, #0]
 80172e0:	4a35      	ldr	r2, [pc, #212]	; (80173b8 <UART_SetConfig+0x2f4>)
 80172e2:	4293      	cmp	r3, r2
 80172e4:	d12a      	bne.n	801733c <UART_SetConfig+0x278>
 80172e6:	4b30      	ldr	r3, [pc, #192]	; (80173a8 <UART_SetConfig+0x2e4>)
 80172e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80172ec:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80172f0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80172f4:	d01a      	beq.n	801732c <UART_SetConfig+0x268>
 80172f6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80172fa:	d81b      	bhi.n	8017334 <UART_SetConfig+0x270>
 80172fc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8017300:	d00c      	beq.n	801731c <UART_SetConfig+0x258>
 8017302:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8017306:	d815      	bhi.n	8017334 <UART_SetConfig+0x270>
 8017308:	2b00      	cmp	r3, #0
 801730a:	d003      	beq.n	8017314 <UART_SetConfig+0x250>
 801730c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8017310:	d008      	beq.n	8017324 <UART_SetConfig+0x260>
 8017312:	e00f      	b.n	8017334 <UART_SetConfig+0x270>
 8017314:	2300      	movs	r3, #0
 8017316:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801731a:	e052      	b.n	80173c2 <UART_SetConfig+0x2fe>
 801731c:	2302      	movs	r3, #2
 801731e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8017322:	e04e      	b.n	80173c2 <UART_SetConfig+0x2fe>
 8017324:	2304      	movs	r3, #4
 8017326:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801732a:	e04a      	b.n	80173c2 <UART_SetConfig+0x2fe>
 801732c:	2308      	movs	r3, #8
 801732e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8017332:	e046      	b.n	80173c2 <UART_SetConfig+0x2fe>
 8017334:	2310      	movs	r3, #16
 8017336:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801733a:	e042      	b.n	80173c2 <UART_SetConfig+0x2fe>
 801733c:	697b      	ldr	r3, [r7, #20]
 801733e:	681b      	ldr	r3, [r3, #0]
 8017340:	4a17      	ldr	r2, [pc, #92]	; (80173a0 <UART_SetConfig+0x2dc>)
 8017342:	4293      	cmp	r3, r2
 8017344:	d13a      	bne.n	80173bc <UART_SetConfig+0x2f8>
 8017346:	4b18      	ldr	r3, [pc, #96]	; (80173a8 <UART_SetConfig+0x2e4>)
 8017348:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801734c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8017350:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8017354:	d01a      	beq.n	801738c <UART_SetConfig+0x2c8>
 8017356:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 801735a:	d81b      	bhi.n	8017394 <UART_SetConfig+0x2d0>
 801735c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8017360:	d00c      	beq.n	801737c <UART_SetConfig+0x2b8>
 8017362:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8017366:	d815      	bhi.n	8017394 <UART_SetConfig+0x2d0>
 8017368:	2b00      	cmp	r3, #0
 801736a:	d003      	beq.n	8017374 <UART_SetConfig+0x2b0>
 801736c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8017370:	d008      	beq.n	8017384 <UART_SetConfig+0x2c0>
 8017372:	e00f      	b.n	8017394 <UART_SetConfig+0x2d0>
 8017374:	2300      	movs	r3, #0
 8017376:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801737a:	e022      	b.n	80173c2 <UART_SetConfig+0x2fe>
 801737c:	2302      	movs	r3, #2
 801737e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8017382:	e01e      	b.n	80173c2 <UART_SetConfig+0x2fe>
 8017384:	2304      	movs	r3, #4
 8017386:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801738a:	e01a      	b.n	80173c2 <UART_SetConfig+0x2fe>
 801738c:	2308      	movs	r3, #8
 801738e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8017392:	e016      	b.n	80173c2 <UART_SetConfig+0x2fe>
 8017394:	2310      	movs	r3, #16
 8017396:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801739a:	e012      	b.n	80173c2 <UART_SetConfig+0x2fe>
 801739c:	cfff69f3 	.word	0xcfff69f3
 80173a0:	40008000 	.word	0x40008000
 80173a4:	40013800 	.word	0x40013800
 80173a8:	40021000 	.word	0x40021000
 80173ac:	40004400 	.word	0x40004400
 80173b0:	40004800 	.word	0x40004800
 80173b4:	40004c00 	.word	0x40004c00
 80173b8:	40005000 	.word	0x40005000
 80173bc:	2310      	movs	r3, #16
 80173be:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80173c2:	697b      	ldr	r3, [r7, #20]
 80173c4:	681b      	ldr	r3, [r3, #0]
 80173c6:	4ab0      	ldr	r2, [pc, #704]	; (8017688 <UART_SetConfig+0x5c4>)
 80173c8:	4293      	cmp	r3, r2
 80173ca:	f040 809b 	bne.w	8017504 <UART_SetConfig+0x440>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80173ce:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80173d2:	2b08      	cmp	r3, #8
 80173d4:	d827      	bhi.n	8017426 <UART_SetConfig+0x362>
 80173d6:	a201      	add	r2, pc, #4	; (adr r2, 80173dc <UART_SetConfig+0x318>)
 80173d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80173dc:	08017401 	.word	0x08017401
 80173e0:	08017409 	.word	0x08017409
 80173e4:	08017411 	.word	0x08017411
 80173e8:	08017427 	.word	0x08017427
 80173ec:	08017417 	.word	0x08017417
 80173f0:	08017427 	.word	0x08017427
 80173f4:	08017427 	.word	0x08017427
 80173f8:	08017427 	.word	0x08017427
 80173fc:	0801741f 	.word	0x0801741f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8017400:	f7fb fbee 	bl	8012be0 <HAL_RCC_GetPCLK1Freq>
 8017404:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8017406:	e014      	b.n	8017432 <UART_SetConfig+0x36e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8017408:	f7fb fbfe 	bl	8012c08 <HAL_RCC_GetPCLK2Freq>
 801740c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 801740e:	e010      	b.n	8017432 <UART_SetConfig+0x36e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8017410:	4b9e      	ldr	r3, [pc, #632]	; (801768c <UART_SetConfig+0x5c8>)
 8017412:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8017414:	e00d      	b.n	8017432 <UART_SetConfig+0x36e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8017416:	f7fb fb31 	bl	8012a7c <HAL_RCC_GetSysClockFreq>
 801741a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 801741c:	e009      	b.n	8017432 <UART_SetConfig+0x36e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801741e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8017422:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8017424:	e005      	b.n	8017432 <UART_SetConfig+0x36e>
      default:
        pclk = 0U;
 8017426:	2300      	movs	r3, #0
 8017428:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 801742a:	2301      	movs	r3, #1
 801742c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8017430:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8017432:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017434:	2b00      	cmp	r3, #0
 8017436:	f000 8130 	beq.w	801769a <UART_SetConfig+0x5d6>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 801743a:	697b      	ldr	r3, [r7, #20]
 801743c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801743e:	4a94      	ldr	r2, [pc, #592]	; (8017690 <UART_SetConfig+0x5cc>)
 8017440:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8017444:	461a      	mov	r2, r3
 8017446:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017448:	fbb3 f3f2 	udiv	r3, r3, r2
 801744c:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 801744e:	697b      	ldr	r3, [r7, #20]
 8017450:	685a      	ldr	r2, [r3, #4]
 8017452:	4613      	mov	r3, r2
 8017454:	005b      	lsls	r3, r3, #1
 8017456:	4413      	add	r3, r2
 8017458:	69ba      	ldr	r2, [r7, #24]
 801745a:	429a      	cmp	r2, r3
 801745c:	d305      	bcc.n	801746a <UART_SetConfig+0x3a6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 801745e:	697b      	ldr	r3, [r7, #20]
 8017460:	685b      	ldr	r3, [r3, #4]
 8017462:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8017464:	69ba      	ldr	r2, [r7, #24]
 8017466:	429a      	cmp	r2, r3
 8017468:	d903      	bls.n	8017472 <UART_SetConfig+0x3ae>
      {
        ret = HAL_ERROR;
 801746a:	2301      	movs	r3, #1
 801746c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8017470:	e113      	b.n	801769a <UART_SetConfig+0x5d6>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8017472:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017474:	2200      	movs	r2, #0
 8017476:	60bb      	str	r3, [r7, #8]
 8017478:	60fa      	str	r2, [r7, #12]
 801747a:	697b      	ldr	r3, [r7, #20]
 801747c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801747e:	4a84      	ldr	r2, [pc, #528]	; (8017690 <UART_SetConfig+0x5cc>)
 8017480:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8017484:	b29b      	uxth	r3, r3
 8017486:	2200      	movs	r2, #0
 8017488:	603b      	str	r3, [r7, #0]
 801748a:	607a      	str	r2, [r7, #4]
 801748c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8017490:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8017494:	f7e9 fba2 	bl	8000bdc <__aeabi_uldivmod>
 8017498:	4602      	mov	r2, r0
 801749a:	460b      	mov	r3, r1
 801749c:	4610      	mov	r0, r2
 801749e:	4619      	mov	r1, r3
 80174a0:	f04f 0200 	mov.w	r2, #0
 80174a4:	f04f 0300 	mov.w	r3, #0
 80174a8:	020b      	lsls	r3, r1, #8
 80174aa:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80174ae:	0202      	lsls	r2, r0, #8
 80174b0:	6979      	ldr	r1, [r7, #20]
 80174b2:	6849      	ldr	r1, [r1, #4]
 80174b4:	0849      	lsrs	r1, r1, #1
 80174b6:	2000      	movs	r0, #0
 80174b8:	460c      	mov	r4, r1
 80174ba:	4605      	mov	r5, r0
 80174bc:	eb12 0804 	adds.w	r8, r2, r4
 80174c0:	eb43 0905 	adc.w	r9, r3, r5
 80174c4:	697b      	ldr	r3, [r7, #20]
 80174c6:	685b      	ldr	r3, [r3, #4]
 80174c8:	2200      	movs	r2, #0
 80174ca:	469a      	mov	sl, r3
 80174cc:	4693      	mov	fp, r2
 80174ce:	4652      	mov	r2, sl
 80174d0:	465b      	mov	r3, fp
 80174d2:	4640      	mov	r0, r8
 80174d4:	4649      	mov	r1, r9
 80174d6:	f7e9 fb81 	bl	8000bdc <__aeabi_uldivmod>
 80174da:	4602      	mov	r2, r0
 80174dc:	460b      	mov	r3, r1
 80174de:	4613      	mov	r3, r2
 80174e0:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80174e2:	6a3b      	ldr	r3, [r7, #32]
 80174e4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80174e8:	d308      	bcc.n	80174fc <UART_SetConfig+0x438>
 80174ea:	6a3b      	ldr	r3, [r7, #32]
 80174ec:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80174f0:	d204      	bcs.n	80174fc <UART_SetConfig+0x438>
        {
          huart->Instance->BRR = usartdiv;
 80174f2:	697b      	ldr	r3, [r7, #20]
 80174f4:	681b      	ldr	r3, [r3, #0]
 80174f6:	6a3a      	ldr	r2, [r7, #32]
 80174f8:	60da      	str	r2, [r3, #12]
 80174fa:	e0ce      	b.n	801769a <UART_SetConfig+0x5d6>
        }
        else
        {
          ret = HAL_ERROR;
 80174fc:	2301      	movs	r3, #1
 80174fe:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8017502:	e0ca      	b.n	801769a <UART_SetConfig+0x5d6>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8017504:	697b      	ldr	r3, [r7, #20]
 8017506:	69db      	ldr	r3, [r3, #28]
 8017508:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801750c:	d166      	bne.n	80175dc <UART_SetConfig+0x518>
  {
    switch (clocksource)
 801750e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8017512:	2b08      	cmp	r3, #8
 8017514:	d827      	bhi.n	8017566 <UART_SetConfig+0x4a2>
 8017516:	a201      	add	r2, pc, #4	; (adr r2, 801751c <UART_SetConfig+0x458>)
 8017518:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801751c:	08017541 	.word	0x08017541
 8017520:	08017549 	.word	0x08017549
 8017524:	08017551 	.word	0x08017551
 8017528:	08017567 	.word	0x08017567
 801752c:	08017557 	.word	0x08017557
 8017530:	08017567 	.word	0x08017567
 8017534:	08017567 	.word	0x08017567
 8017538:	08017567 	.word	0x08017567
 801753c:	0801755f 	.word	0x0801755f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8017540:	f7fb fb4e 	bl	8012be0 <HAL_RCC_GetPCLK1Freq>
 8017544:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8017546:	e014      	b.n	8017572 <UART_SetConfig+0x4ae>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8017548:	f7fb fb5e 	bl	8012c08 <HAL_RCC_GetPCLK2Freq>
 801754c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 801754e:	e010      	b.n	8017572 <UART_SetConfig+0x4ae>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8017550:	4b4e      	ldr	r3, [pc, #312]	; (801768c <UART_SetConfig+0x5c8>)
 8017552:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8017554:	e00d      	b.n	8017572 <UART_SetConfig+0x4ae>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8017556:	f7fb fa91 	bl	8012a7c <HAL_RCC_GetSysClockFreq>
 801755a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 801755c:	e009      	b.n	8017572 <UART_SetConfig+0x4ae>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801755e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8017562:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8017564:	e005      	b.n	8017572 <UART_SetConfig+0x4ae>
      default:
        pclk = 0U;
 8017566:	2300      	movs	r3, #0
 8017568:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 801756a:	2301      	movs	r3, #1
 801756c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8017570:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8017572:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017574:	2b00      	cmp	r3, #0
 8017576:	f000 8090 	beq.w	801769a <UART_SetConfig+0x5d6>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 801757a:	697b      	ldr	r3, [r7, #20]
 801757c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801757e:	4a44      	ldr	r2, [pc, #272]	; (8017690 <UART_SetConfig+0x5cc>)
 8017580:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8017584:	461a      	mov	r2, r3
 8017586:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017588:	fbb3 f3f2 	udiv	r3, r3, r2
 801758c:	005a      	lsls	r2, r3, #1
 801758e:	697b      	ldr	r3, [r7, #20]
 8017590:	685b      	ldr	r3, [r3, #4]
 8017592:	085b      	lsrs	r3, r3, #1
 8017594:	441a      	add	r2, r3
 8017596:	697b      	ldr	r3, [r7, #20]
 8017598:	685b      	ldr	r3, [r3, #4]
 801759a:	fbb2 f3f3 	udiv	r3, r2, r3
 801759e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80175a0:	6a3b      	ldr	r3, [r7, #32]
 80175a2:	2b0f      	cmp	r3, #15
 80175a4:	d916      	bls.n	80175d4 <UART_SetConfig+0x510>
 80175a6:	6a3b      	ldr	r3, [r7, #32]
 80175a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80175ac:	d212      	bcs.n	80175d4 <UART_SetConfig+0x510>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80175ae:	6a3b      	ldr	r3, [r7, #32]
 80175b0:	b29b      	uxth	r3, r3
 80175b2:	f023 030f 	bic.w	r3, r3, #15
 80175b6:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80175b8:	6a3b      	ldr	r3, [r7, #32]
 80175ba:	085b      	lsrs	r3, r3, #1
 80175bc:	b29b      	uxth	r3, r3
 80175be:	f003 0307 	and.w	r3, r3, #7
 80175c2:	b29a      	uxth	r2, r3
 80175c4:	8bfb      	ldrh	r3, [r7, #30]
 80175c6:	4313      	orrs	r3, r2
 80175c8:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80175ca:	697b      	ldr	r3, [r7, #20]
 80175cc:	681b      	ldr	r3, [r3, #0]
 80175ce:	8bfa      	ldrh	r2, [r7, #30]
 80175d0:	60da      	str	r2, [r3, #12]
 80175d2:	e062      	b.n	801769a <UART_SetConfig+0x5d6>
      }
      else
      {
        ret = HAL_ERROR;
 80175d4:	2301      	movs	r3, #1
 80175d6:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80175da:	e05e      	b.n	801769a <UART_SetConfig+0x5d6>
      }
    }
  }
  else
  {
    switch (clocksource)
 80175dc:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80175e0:	2b08      	cmp	r3, #8
 80175e2:	d828      	bhi.n	8017636 <UART_SetConfig+0x572>
 80175e4:	a201      	add	r2, pc, #4	; (adr r2, 80175ec <UART_SetConfig+0x528>)
 80175e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80175ea:	bf00      	nop
 80175ec:	08017611 	.word	0x08017611
 80175f0:	08017619 	.word	0x08017619
 80175f4:	08017621 	.word	0x08017621
 80175f8:	08017637 	.word	0x08017637
 80175fc:	08017627 	.word	0x08017627
 8017600:	08017637 	.word	0x08017637
 8017604:	08017637 	.word	0x08017637
 8017608:	08017637 	.word	0x08017637
 801760c:	0801762f 	.word	0x0801762f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8017610:	f7fb fae6 	bl	8012be0 <HAL_RCC_GetPCLK1Freq>
 8017614:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8017616:	e014      	b.n	8017642 <UART_SetConfig+0x57e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8017618:	f7fb faf6 	bl	8012c08 <HAL_RCC_GetPCLK2Freq>
 801761c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 801761e:	e010      	b.n	8017642 <UART_SetConfig+0x57e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8017620:	4b1a      	ldr	r3, [pc, #104]	; (801768c <UART_SetConfig+0x5c8>)
 8017622:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8017624:	e00d      	b.n	8017642 <UART_SetConfig+0x57e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8017626:	f7fb fa29 	bl	8012a7c <HAL_RCC_GetSysClockFreq>
 801762a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 801762c:	e009      	b.n	8017642 <UART_SetConfig+0x57e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801762e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8017632:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8017634:	e005      	b.n	8017642 <UART_SetConfig+0x57e>
      default:
        pclk = 0U;
 8017636:	2300      	movs	r3, #0
 8017638:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 801763a:	2301      	movs	r3, #1
 801763c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8017640:	bf00      	nop
    }

    if (pclk != 0U)
 8017642:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017644:	2b00      	cmp	r3, #0
 8017646:	d028      	beq.n	801769a <UART_SetConfig+0x5d6>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8017648:	697b      	ldr	r3, [r7, #20]
 801764a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801764c:	4a10      	ldr	r2, [pc, #64]	; (8017690 <UART_SetConfig+0x5cc>)
 801764e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8017652:	461a      	mov	r2, r3
 8017654:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017656:	fbb3 f2f2 	udiv	r2, r3, r2
 801765a:	697b      	ldr	r3, [r7, #20]
 801765c:	685b      	ldr	r3, [r3, #4]
 801765e:	085b      	lsrs	r3, r3, #1
 8017660:	441a      	add	r2, r3
 8017662:	697b      	ldr	r3, [r7, #20]
 8017664:	685b      	ldr	r3, [r3, #4]
 8017666:	fbb2 f3f3 	udiv	r3, r2, r3
 801766a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 801766c:	6a3b      	ldr	r3, [r7, #32]
 801766e:	2b0f      	cmp	r3, #15
 8017670:	d910      	bls.n	8017694 <UART_SetConfig+0x5d0>
 8017672:	6a3b      	ldr	r3, [r7, #32]
 8017674:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8017678:	d20c      	bcs.n	8017694 <UART_SetConfig+0x5d0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 801767a:	6a3b      	ldr	r3, [r7, #32]
 801767c:	b29a      	uxth	r2, r3
 801767e:	697b      	ldr	r3, [r7, #20]
 8017680:	681b      	ldr	r3, [r3, #0]
 8017682:	60da      	str	r2, [r3, #12]
 8017684:	e009      	b.n	801769a <UART_SetConfig+0x5d6>
 8017686:	bf00      	nop
 8017688:	40008000 	.word	0x40008000
 801768c:	00f42400 	.word	0x00f42400
 8017690:	0801f29c 	.word	0x0801f29c
      }
      else
      {
        ret = HAL_ERROR;
 8017694:	2301      	movs	r3, #1
 8017696:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 801769a:	697b      	ldr	r3, [r7, #20]
 801769c:	2201      	movs	r2, #1
 801769e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80176a2:	697b      	ldr	r3, [r7, #20]
 80176a4:	2201      	movs	r2, #1
 80176a6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80176aa:	697b      	ldr	r3, [r7, #20]
 80176ac:	2200      	movs	r2, #0
 80176ae:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 80176b0:	697b      	ldr	r3, [r7, #20]
 80176b2:	2200      	movs	r2, #0
 80176b4:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 80176b6:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 80176ba:	4618      	mov	r0, r3
 80176bc:	3730      	adds	r7, #48	; 0x30
 80176be:	46bd      	mov	sp, r7
 80176c0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080176c4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80176c4:	b480      	push	{r7}
 80176c6:	b083      	sub	sp, #12
 80176c8:	af00      	add	r7, sp, #0
 80176ca:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80176cc:	687b      	ldr	r3, [r7, #4]
 80176ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80176d0:	f003 0301 	and.w	r3, r3, #1
 80176d4:	2b00      	cmp	r3, #0
 80176d6:	d00a      	beq.n	80176ee <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80176d8:	687b      	ldr	r3, [r7, #4]
 80176da:	681b      	ldr	r3, [r3, #0]
 80176dc:	685b      	ldr	r3, [r3, #4]
 80176de:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80176e2:	687b      	ldr	r3, [r7, #4]
 80176e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80176e6:	687b      	ldr	r3, [r7, #4]
 80176e8:	681b      	ldr	r3, [r3, #0]
 80176ea:	430a      	orrs	r2, r1
 80176ec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80176ee:	687b      	ldr	r3, [r7, #4]
 80176f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80176f2:	f003 0302 	and.w	r3, r3, #2
 80176f6:	2b00      	cmp	r3, #0
 80176f8:	d00a      	beq.n	8017710 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80176fa:	687b      	ldr	r3, [r7, #4]
 80176fc:	681b      	ldr	r3, [r3, #0]
 80176fe:	685b      	ldr	r3, [r3, #4]
 8017700:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8017704:	687b      	ldr	r3, [r7, #4]
 8017706:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8017708:	687b      	ldr	r3, [r7, #4]
 801770a:	681b      	ldr	r3, [r3, #0]
 801770c:	430a      	orrs	r2, r1
 801770e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8017710:	687b      	ldr	r3, [r7, #4]
 8017712:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017714:	f003 0304 	and.w	r3, r3, #4
 8017718:	2b00      	cmp	r3, #0
 801771a:	d00a      	beq.n	8017732 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 801771c:	687b      	ldr	r3, [r7, #4]
 801771e:	681b      	ldr	r3, [r3, #0]
 8017720:	685b      	ldr	r3, [r3, #4]
 8017722:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8017726:	687b      	ldr	r3, [r7, #4]
 8017728:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801772a:	687b      	ldr	r3, [r7, #4]
 801772c:	681b      	ldr	r3, [r3, #0]
 801772e:	430a      	orrs	r2, r1
 8017730:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8017732:	687b      	ldr	r3, [r7, #4]
 8017734:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017736:	f003 0308 	and.w	r3, r3, #8
 801773a:	2b00      	cmp	r3, #0
 801773c:	d00a      	beq.n	8017754 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 801773e:	687b      	ldr	r3, [r7, #4]
 8017740:	681b      	ldr	r3, [r3, #0]
 8017742:	685b      	ldr	r3, [r3, #4]
 8017744:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8017748:	687b      	ldr	r3, [r7, #4]
 801774a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801774c:	687b      	ldr	r3, [r7, #4]
 801774e:	681b      	ldr	r3, [r3, #0]
 8017750:	430a      	orrs	r2, r1
 8017752:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8017754:	687b      	ldr	r3, [r7, #4]
 8017756:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017758:	f003 0310 	and.w	r3, r3, #16
 801775c:	2b00      	cmp	r3, #0
 801775e:	d00a      	beq.n	8017776 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8017760:	687b      	ldr	r3, [r7, #4]
 8017762:	681b      	ldr	r3, [r3, #0]
 8017764:	689b      	ldr	r3, [r3, #8]
 8017766:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 801776a:	687b      	ldr	r3, [r7, #4]
 801776c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 801776e:	687b      	ldr	r3, [r7, #4]
 8017770:	681b      	ldr	r3, [r3, #0]
 8017772:	430a      	orrs	r2, r1
 8017774:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8017776:	687b      	ldr	r3, [r7, #4]
 8017778:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801777a:	f003 0320 	and.w	r3, r3, #32
 801777e:	2b00      	cmp	r3, #0
 8017780:	d00a      	beq.n	8017798 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8017782:	687b      	ldr	r3, [r7, #4]
 8017784:	681b      	ldr	r3, [r3, #0]
 8017786:	689b      	ldr	r3, [r3, #8]
 8017788:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 801778c:	687b      	ldr	r3, [r7, #4]
 801778e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8017790:	687b      	ldr	r3, [r7, #4]
 8017792:	681b      	ldr	r3, [r3, #0]
 8017794:	430a      	orrs	r2, r1
 8017796:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8017798:	687b      	ldr	r3, [r7, #4]
 801779a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801779c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80177a0:	2b00      	cmp	r3, #0
 80177a2:	d01a      	beq.n	80177da <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80177a4:	687b      	ldr	r3, [r7, #4]
 80177a6:	681b      	ldr	r3, [r3, #0]
 80177a8:	685b      	ldr	r3, [r3, #4]
 80177aa:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80177ae:	687b      	ldr	r3, [r7, #4]
 80177b0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80177b2:	687b      	ldr	r3, [r7, #4]
 80177b4:	681b      	ldr	r3, [r3, #0]
 80177b6:	430a      	orrs	r2, r1
 80177b8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80177ba:	687b      	ldr	r3, [r7, #4]
 80177bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80177be:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80177c2:	d10a      	bne.n	80177da <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80177c4:	687b      	ldr	r3, [r7, #4]
 80177c6:	681b      	ldr	r3, [r3, #0]
 80177c8:	685b      	ldr	r3, [r3, #4]
 80177ca:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80177ce:	687b      	ldr	r3, [r7, #4]
 80177d0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80177d2:	687b      	ldr	r3, [r7, #4]
 80177d4:	681b      	ldr	r3, [r3, #0]
 80177d6:	430a      	orrs	r2, r1
 80177d8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80177da:	687b      	ldr	r3, [r7, #4]
 80177dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80177de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80177e2:	2b00      	cmp	r3, #0
 80177e4:	d00a      	beq.n	80177fc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80177e6:	687b      	ldr	r3, [r7, #4]
 80177e8:	681b      	ldr	r3, [r3, #0]
 80177ea:	685b      	ldr	r3, [r3, #4]
 80177ec:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80177f0:	687b      	ldr	r3, [r7, #4]
 80177f2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80177f4:	687b      	ldr	r3, [r7, #4]
 80177f6:	681b      	ldr	r3, [r3, #0]
 80177f8:	430a      	orrs	r2, r1
 80177fa:	605a      	str	r2, [r3, #4]
  }
}
 80177fc:	bf00      	nop
 80177fe:	370c      	adds	r7, #12
 8017800:	46bd      	mov	sp, r7
 8017802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017806:	4770      	bx	lr

08017808 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8017808:	b580      	push	{r7, lr}
 801780a:	b098      	sub	sp, #96	; 0x60
 801780c:	af02      	add	r7, sp, #8
 801780e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8017810:	687b      	ldr	r3, [r7, #4]
 8017812:	2200      	movs	r2, #0
 8017814:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8017818:	f7f7 f90e 	bl	800ea38 <HAL_GetTick>
 801781c:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 801781e:	687b      	ldr	r3, [r7, #4]
 8017820:	681b      	ldr	r3, [r3, #0]
 8017822:	681b      	ldr	r3, [r3, #0]
 8017824:	f003 0308 	and.w	r3, r3, #8
 8017828:	2b08      	cmp	r3, #8
 801782a:	d12f      	bne.n	801788c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 801782c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8017830:	9300      	str	r3, [sp, #0]
 8017832:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8017834:	2200      	movs	r2, #0
 8017836:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 801783a:	6878      	ldr	r0, [r7, #4]
 801783c:	f000 f88e 	bl	801795c <UART_WaitOnFlagUntilTimeout>
 8017840:	4603      	mov	r3, r0
 8017842:	2b00      	cmp	r3, #0
 8017844:	d022      	beq.n	801788c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8017846:	687b      	ldr	r3, [r7, #4]
 8017848:	681b      	ldr	r3, [r3, #0]
 801784a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801784c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801784e:	e853 3f00 	ldrex	r3, [r3]
 8017852:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8017854:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017856:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801785a:	653b      	str	r3, [r7, #80]	; 0x50
 801785c:	687b      	ldr	r3, [r7, #4]
 801785e:	681b      	ldr	r3, [r3, #0]
 8017860:	461a      	mov	r2, r3
 8017862:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8017864:	647b      	str	r3, [r7, #68]	; 0x44
 8017866:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8017868:	6c39      	ldr	r1, [r7, #64]	; 0x40
 801786a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801786c:	e841 2300 	strex	r3, r2, [r1]
 8017870:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8017872:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8017874:	2b00      	cmp	r3, #0
 8017876:	d1e6      	bne.n	8017846 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8017878:	687b      	ldr	r3, [r7, #4]
 801787a:	2220      	movs	r2, #32
 801787c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8017880:	687b      	ldr	r3, [r7, #4]
 8017882:	2200      	movs	r2, #0
 8017884:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8017888:	2303      	movs	r3, #3
 801788a:	e063      	b.n	8017954 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 801788c:	687b      	ldr	r3, [r7, #4]
 801788e:	681b      	ldr	r3, [r3, #0]
 8017890:	681b      	ldr	r3, [r3, #0]
 8017892:	f003 0304 	and.w	r3, r3, #4
 8017896:	2b04      	cmp	r3, #4
 8017898:	d149      	bne.n	801792e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 801789a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 801789e:	9300      	str	r3, [sp, #0]
 80178a0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80178a2:	2200      	movs	r2, #0
 80178a4:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80178a8:	6878      	ldr	r0, [r7, #4]
 80178aa:	f000 f857 	bl	801795c <UART_WaitOnFlagUntilTimeout>
 80178ae:	4603      	mov	r3, r0
 80178b0:	2b00      	cmp	r3, #0
 80178b2:	d03c      	beq.n	801792e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80178b4:	687b      	ldr	r3, [r7, #4]
 80178b6:	681b      	ldr	r3, [r3, #0]
 80178b8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80178ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80178bc:	e853 3f00 	ldrex	r3, [r3]
 80178c0:	623b      	str	r3, [r7, #32]
   return(result);
 80178c2:	6a3b      	ldr	r3, [r7, #32]
 80178c4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80178c8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80178ca:	687b      	ldr	r3, [r7, #4]
 80178cc:	681b      	ldr	r3, [r3, #0]
 80178ce:	461a      	mov	r2, r3
 80178d0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80178d2:	633b      	str	r3, [r7, #48]	; 0x30
 80178d4:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80178d6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80178d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80178da:	e841 2300 	strex	r3, r2, [r1]
 80178de:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80178e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80178e2:	2b00      	cmp	r3, #0
 80178e4:	d1e6      	bne.n	80178b4 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80178e6:	687b      	ldr	r3, [r7, #4]
 80178e8:	681b      	ldr	r3, [r3, #0]
 80178ea:	3308      	adds	r3, #8
 80178ec:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80178ee:	693b      	ldr	r3, [r7, #16]
 80178f0:	e853 3f00 	ldrex	r3, [r3]
 80178f4:	60fb      	str	r3, [r7, #12]
   return(result);
 80178f6:	68fb      	ldr	r3, [r7, #12]
 80178f8:	f023 0301 	bic.w	r3, r3, #1
 80178fc:	64bb      	str	r3, [r7, #72]	; 0x48
 80178fe:	687b      	ldr	r3, [r7, #4]
 8017900:	681b      	ldr	r3, [r3, #0]
 8017902:	3308      	adds	r3, #8
 8017904:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8017906:	61fa      	str	r2, [r7, #28]
 8017908:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801790a:	69b9      	ldr	r1, [r7, #24]
 801790c:	69fa      	ldr	r2, [r7, #28]
 801790e:	e841 2300 	strex	r3, r2, [r1]
 8017912:	617b      	str	r3, [r7, #20]
   return(result);
 8017914:	697b      	ldr	r3, [r7, #20]
 8017916:	2b00      	cmp	r3, #0
 8017918:	d1e5      	bne.n	80178e6 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 801791a:	687b      	ldr	r3, [r7, #4]
 801791c:	2220      	movs	r2, #32
 801791e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8017922:	687b      	ldr	r3, [r7, #4]
 8017924:	2200      	movs	r2, #0
 8017926:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 801792a:	2303      	movs	r3, #3
 801792c:	e012      	b.n	8017954 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 801792e:	687b      	ldr	r3, [r7, #4]
 8017930:	2220      	movs	r2, #32
 8017932:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8017936:	687b      	ldr	r3, [r7, #4]
 8017938:	2220      	movs	r2, #32
 801793a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801793e:	687b      	ldr	r3, [r7, #4]
 8017940:	2200      	movs	r2, #0
 8017942:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8017944:	687b      	ldr	r3, [r7, #4]
 8017946:	2200      	movs	r2, #0
 8017948:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 801794a:	687b      	ldr	r3, [r7, #4]
 801794c:	2200      	movs	r2, #0
 801794e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8017952:	2300      	movs	r3, #0
}
 8017954:	4618      	mov	r0, r3
 8017956:	3758      	adds	r7, #88	; 0x58
 8017958:	46bd      	mov	sp, r7
 801795a:	bd80      	pop	{r7, pc}

0801795c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 801795c:	b580      	push	{r7, lr}
 801795e:	b084      	sub	sp, #16
 8017960:	af00      	add	r7, sp, #0
 8017962:	60f8      	str	r0, [r7, #12]
 8017964:	60b9      	str	r1, [r7, #8]
 8017966:	603b      	str	r3, [r7, #0]
 8017968:	4613      	mov	r3, r2
 801796a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 801796c:	e049      	b.n	8017a02 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 801796e:	69bb      	ldr	r3, [r7, #24]
 8017970:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017974:	d045      	beq.n	8017a02 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8017976:	f7f7 f85f 	bl	800ea38 <HAL_GetTick>
 801797a:	4602      	mov	r2, r0
 801797c:	683b      	ldr	r3, [r7, #0]
 801797e:	1ad3      	subs	r3, r2, r3
 8017980:	69ba      	ldr	r2, [r7, #24]
 8017982:	429a      	cmp	r2, r3
 8017984:	d302      	bcc.n	801798c <UART_WaitOnFlagUntilTimeout+0x30>
 8017986:	69bb      	ldr	r3, [r7, #24]
 8017988:	2b00      	cmp	r3, #0
 801798a:	d101      	bne.n	8017990 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 801798c:	2303      	movs	r3, #3
 801798e:	e048      	b.n	8017a22 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8017990:	68fb      	ldr	r3, [r7, #12]
 8017992:	681b      	ldr	r3, [r3, #0]
 8017994:	681b      	ldr	r3, [r3, #0]
 8017996:	f003 0304 	and.w	r3, r3, #4
 801799a:	2b00      	cmp	r3, #0
 801799c:	d031      	beq.n	8017a02 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 801799e:	68fb      	ldr	r3, [r7, #12]
 80179a0:	681b      	ldr	r3, [r3, #0]
 80179a2:	69db      	ldr	r3, [r3, #28]
 80179a4:	f003 0308 	and.w	r3, r3, #8
 80179a8:	2b08      	cmp	r3, #8
 80179aa:	d110      	bne.n	80179ce <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80179ac:	68fb      	ldr	r3, [r7, #12]
 80179ae:	681b      	ldr	r3, [r3, #0]
 80179b0:	2208      	movs	r2, #8
 80179b2:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 80179b4:	68f8      	ldr	r0, [r7, #12]
 80179b6:	f000 f95b 	bl	8017c70 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 80179ba:	68fb      	ldr	r3, [r7, #12]
 80179bc:	2208      	movs	r2, #8
 80179be:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 80179c2:	68fb      	ldr	r3, [r7, #12]
 80179c4:	2200      	movs	r2, #0
 80179c6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 80179ca:	2301      	movs	r3, #1
 80179cc:	e029      	b.n	8017a22 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80179ce:	68fb      	ldr	r3, [r7, #12]
 80179d0:	681b      	ldr	r3, [r3, #0]
 80179d2:	69db      	ldr	r3, [r3, #28]
 80179d4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80179d8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80179dc:	d111      	bne.n	8017a02 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80179de:	68fb      	ldr	r3, [r7, #12]
 80179e0:	681b      	ldr	r3, [r3, #0]
 80179e2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80179e6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80179e8:	68f8      	ldr	r0, [r7, #12]
 80179ea:	f000 f941 	bl	8017c70 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80179ee:	68fb      	ldr	r3, [r7, #12]
 80179f0:	2220      	movs	r2, #32
 80179f2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80179f6:	68fb      	ldr	r3, [r7, #12]
 80179f8:	2200      	movs	r2, #0
 80179fa:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 80179fe:	2303      	movs	r3, #3
 8017a00:	e00f      	b.n	8017a22 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8017a02:	68fb      	ldr	r3, [r7, #12]
 8017a04:	681b      	ldr	r3, [r3, #0]
 8017a06:	69da      	ldr	r2, [r3, #28]
 8017a08:	68bb      	ldr	r3, [r7, #8]
 8017a0a:	4013      	ands	r3, r2
 8017a0c:	68ba      	ldr	r2, [r7, #8]
 8017a0e:	429a      	cmp	r2, r3
 8017a10:	bf0c      	ite	eq
 8017a12:	2301      	moveq	r3, #1
 8017a14:	2300      	movne	r3, #0
 8017a16:	b2db      	uxtb	r3, r3
 8017a18:	461a      	mov	r2, r3
 8017a1a:	79fb      	ldrb	r3, [r7, #7]
 8017a1c:	429a      	cmp	r2, r3
 8017a1e:	d0a6      	beq.n	801796e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8017a20:	2300      	movs	r3, #0
}
 8017a22:	4618      	mov	r0, r3
 8017a24:	3710      	adds	r7, #16
 8017a26:	46bd      	mov	sp, r7
 8017a28:	bd80      	pop	{r7, pc}
	...

08017a2c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8017a2c:	b480      	push	{r7}
 8017a2e:	b0a3      	sub	sp, #140	; 0x8c
 8017a30:	af00      	add	r7, sp, #0
 8017a32:	60f8      	str	r0, [r7, #12]
 8017a34:	60b9      	str	r1, [r7, #8]
 8017a36:	4613      	mov	r3, r2
 8017a38:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8017a3a:	68fb      	ldr	r3, [r7, #12]
 8017a3c:	68ba      	ldr	r2, [r7, #8]
 8017a3e:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8017a40:	68fb      	ldr	r3, [r7, #12]
 8017a42:	88fa      	ldrh	r2, [r7, #6]
 8017a44:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 8017a48:	68fb      	ldr	r3, [r7, #12]
 8017a4a:	88fa      	ldrh	r2, [r7, #6]
 8017a4c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 8017a50:	68fb      	ldr	r3, [r7, #12]
 8017a52:	2200      	movs	r2, #0
 8017a54:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8017a56:	68fb      	ldr	r3, [r7, #12]
 8017a58:	689b      	ldr	r3, [r3, #8]
 8017a5a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8017a5e:	d10e      	bne.n	8017a7e <UART_Start_Receive_IT+0x52>
 8017a60:	68fb      	ldr	r3, [r7, #12]
 8017a62:	691b      	ldr	r3, [r3, #16]
 8017a64:	2b00      	cmp	r3, #0
 8017a66:	d105      	bne.n	8017a74 <UART_Start_Receive_IT+0x48>
 8017a68:	68fb      	ldr	r3, [r7, #12]
 8017a6a:	f240 12ff 	movw	r2, #511	; 0x1ff
 8017a6e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8017a72:	e02d      	b.n	8017ad0 <UART_Start_Receive_IT+0xa4>
 8017a74:	68fb      	ldr	r3, [r7, #12]
 8017a76:	22ff      	movs	r2, #255	; 0xff
 8017a78:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8017a7c:	e028      	b.n	8017ad0 <UART_Start_Receive_IT+0xa4>
 8017a7e:	68fb      	ldr	r3, [r7, #12]
 8017a80:	689b      	ldr	r3, [r3, #8]
 8017a82:	2b00      	cmp	r3, #0
 8017a84:	d10d      	bne.n	8017aa2 <UART_Start_Receive_IT+0x76>
 8017a86:	68fb      	ldr	r3, [r7, #12]
 8017a88:	691b      	ldr	r3, [r3, #16]
 8017a8a:	2b00      	cmp	r3, #0
 8017a8c:	d104      	bne.n	8017a98 <UART_Start_Receive_IT+0x6c>
 8017a8e:	68fb      	ldr	r3, [r7, #12]
 8017a90:	22ff      	movs	r2, #255	; 0xff
 8017a92:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8017a96:	e01b      	b.n	8017ad0 <UART_Start_Receive_IT+0xa4>
 8017a98:	68fb      	ldr	r3, [r7, #12]
 8017a9a:	227f      	movs	r2, #127	; 0x7f
 8017a9c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8017aa0:	e016      	b.n	8017ad0 <UART_Start_Receive_IT+0xa4>
 8017aa2:	68fb      	ldr	r3, [r7, #12]
 8017aa4:	689b      	ldr	r3, [r3, #8]
 8017aa6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8017aaa:	d10d      	bne.n	8017ac8 <UART_Start_Receive_IT+0x9c>
 8017aac:	68fb      	ldr	r3, [r7, #12]
 8017aae:	691b      	ldr	r3, [r3, #16]
 8017ab0:	2b00      	cmp	r3, #0
 8017ab2:	d104      	bne.n	8017abe <UART_Start_Receive_IT+0x92>
 8017ab4:	68fb      	ldr	r3, [r7, #12]
 8017ab6:	227f      	movs	r2, #127	; 0x7f
 8017ab8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8017abc:	e008      	b.n	8017ad0 <UART_Start_Receive_IT+0xa4>
 8017abe:	68fb      	ldr	r3, [r7, #12]
 8017ac0:	223f      	movs	r2, #63	; 0x3f
 8017ac2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8017ac6:	e003      	b.n	8017ad0 <UART_Start_Receive_IT+0xa4>
 8017ac8:	68fb      	ldr	r3, [r7, #12]
 8017aca:	2200      	movs	r2, #0
 8017acc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8017ad0:	68fb      	ldr	r3, [r7, #12]
 8017ad2:	2200      	movs	r2, #0
 8017ad4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8017ad8:	68fb      	ldr	r3, [r7, #12]
 8017ada:	2222      	movs	r2, #34	; 0x22
 8017adc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8017ae0:	68fb      	ldr	r3, [r7, #12]
 8017ae2:	681b      	ldr	r3, [r3, #0]
 8017ae4:	3308      	adds	r3, #8
 8017ae6:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8017ae8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8017aea:	e853 3f00 	ldrex	r3, [r3]
 8017aee:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8017af0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8017af2:	f043 0301 	orr.w	r3, r3, #1
 8017af6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8017afa:	68fb      	ldr	r3, [r7, #12]
 8017afc:	681b      	ldr	r3, [r3, #0]
 8017afe:	3308      	adds	r3, #8
 8017b00:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8017b04:	673a      	str	r2, [r7, #112]	; 0x70
 8017b06:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8017b08:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8017b0a:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8017b0c:	e841 2300 	strex	r3, r2, [r1]
 8017b10:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 8017b12:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8017b14:	2b00      	cmp	r3, #0
 8017b16:	d1e3      	bne.n	8017ae0 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8017b18:	68fb      	ldr	r3, [r7, #12]
 8017b1a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8017b1c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8017b20:	d14f      	bne.n	8017bc2 <UART_Start_Receive_IT+0x196>
 8017b22:	68fb      	ldr	r3, [r7, #12]
 8017b24:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8017b28:	88fa      	ldrh	r2, [r7, #6]
 8017b2a:	429a      	cmp	r2, r3
 8017b2c:	d349      	bcc.n	8017bc2 <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8017b2e:	68fb      	ldr	r3, [r7, #12]
 8017b30:	689b      	ldr	r3, [r3, #8]
 8017b32:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8017b36:	d107      	bne.n	8017b48 <UART_Start_Receive_IT+0x11c>
 8017b38:	68fb      	ldr	r3, [r7, #12]
 8017b3a:	691b      	ldr	r3, [r3, #16]
 8017b3c:	2b00      	cmp	r3, #0
 8017b3e:	d103      	bne.n	8017b48 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8017b40:	68fb      	ldr	r3, [r7, #12]
 8017b42:	4a47      	ldr	r2, [pc, #284]	; (8017c60 <UART_Start_Receive_IT+0x234>)
 8017b44:	675a      	str	r2, [r3, #116]	; 0x74
 8017b46:	e002      	b.n	8017b4e <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8017b48:	68fb      	ldr	r3, [r7, #12]
 8017b4a:	4a46      	ldr	r2, [pc, #280]	; (8017c64 <UART_Start_Receive_IT+0x238>)
 8017b4c:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8017b4e:	68fb      	ldr	r3, [r7, #12]
 8017b50:	691b      	ldr	r3, [r3, #16]
 8017b52:	2b00      	cmp	r3, #0
 8017b54:	d01a      	beq.n	8017b8c <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8017b56:	68fb      	ldr	r3, [r7, #12]
 8017b58:	681b      	ldr	r3, [r3, #0]
 8017b5a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8017b5c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8017b5e:	e853 3f00 	ldrex	r3, [r3]
 8017b62:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8017b64:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8017b66:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8017b6a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8017b6e:	68fb      	ldr	r3, [r7, #12]
 8017b70:	681b      	ldr	r3, [r3, #0]
 8017b72:	461a      	mov	r2, r3
 8017b74:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8017b78:	65fb      	str	r3, [r7, #92]	; 0x5c
 8017b7a:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8017b7c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8017b7e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8017b80:	e841 2300 	strex	r3, r2, [r1]
 8017b84:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8017b86:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8017b88:	2b00      	cmp	r3, #0
 8017b8a:	d1e4      	bne.n	8017b56 <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8017b8c:	68fb      	ldr	r3, [r7, #12]
 8017b8e:	681b      	ldr	r3, [r3, #0]
 8017b90:	3308      	adds	r3, #8
 8017b92:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8017b94:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8017b96:	e853 3f00 	ldrex	r3, [r3]
 8017b9a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8017b9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017b9e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8017ba2:	67fb      	str	r3, [r7, #124]	; 0x7c
 8017ba4:	68fb      	ldr	r3, [r7, #12]
 8017ba6:	681b      	ldr	r3, [r3, #0]
 8017ba8:	3308      	adds	r3, #8
 8017baa:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8017bac:	64ba      	str	r2, [r7, #72]	; 0x48
 8017bae:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8017bb0:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8017bb2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8017bb4:	e841 2300 	strex	r3, r2, [r1]
 8017bb8:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8017bba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8017bbc:	2b00      	cmp	r3, #0
 8017bbe:	d1e5      	bne.n	8017b8c <UART_Start_Receive_IT+0x160>
 8017bc0:	e046      	b.n	8017c50 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8017bc2:	68fb      	ldr	r3, [r7, #12]
 8017bc4:	689b      	ldr	r3, [r3, #8]
 8017bc6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8017bca:	d107      	bne.n	8017bdc <UART_Start_Receive_IT+0x1b0>
 8017bcc:	68fb      	ldr	r3, [r7, #12]
 8017bce:	691b      	ldr	r3, [r3, #16]
 8017bd0:	2b00      	cmp	r3, #0
 8017bd2:	d103      	bne.n	8017bdc <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8017bd4:	68fb      	ldr	r3, [r7, #12]
 8017bd6:	4a24      	ldr	r2, [pc, #144]	; (8017c68 <UART_Start_Receive_IT+0x23c>)
 8017bd8:	675a      	str	r2, [r3, #116]	; 0x74
 8017bda:	e002      	b.n	8017be2 <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8017bdc:	68fb      	ldr	r3, [r7, #12]
 8017bde:	4a23      	ldr	r2, [pc, #140]	; (8017c6c <UART_Start_Receive_IT+0x240>)
 8017be0:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8017be2:	68fb      	ldr	r3, [r7, #12]
 8017be4:	691b      	ldr	r3, [r3, #16]
 8017be6:	2b00      	cmp	r3, #0
 8017be8:	d019      	beq.n	8017c1e <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8017bea:	68fb      	ldr	r3, [r7, #12]
 8017bec:	681b      	ldr	r3, [r3, #0]
 8017bee:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8017bf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017bf2:	e853 3f00 	ldrex	r3, [r3]
 8017bf6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8017bf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017bfa:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8017bfe:	677b      	str	r3, [r7, #116]	; 0x74
 8017c00:	68fb      	ldr	r3, [r7, #12]
 8017c02:	681b      	ldr	r3, [r3, #0]
 8017c04:	461a      	mov	r2, r3
 8017c06:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8017c08:	637b      	str	r3, [r7, #52]	; 0x34
 8017c0a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8017c0c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8017c0e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8017c10:	e841 2300 	strex	r3, r2, [r1]
 8017c14:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8017c16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017c18:	2b00      	cmp	r3, #0
 8017c1a:	d1e6      	bne.n	8017bea <UART_Start_Receive_IT+0x1be>
 8017c1c:	e018      	b.n	8017c50 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8017c1e:	68fb      	ldr	r3, [r7, #12]
 8017c20:	681b      	ldr	r3, [r3, #0]
 8017c22:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8017c24:	697b      	ldr	r3, [r7, #20]
 8017c26:	e853 3f00 	ldrex	r3, [r3]
 8017c2a:	613b      	str	r3, [r7, #16]
   return(result);
 8017c2c:	693b      	ldr	r3, [r7, #16]
 8017c2e:	f043 0320 	orr.w	r3, r3, #32
 8017c32:	67bb      	str	r3, [r7, #120]	; 0x78
 8017c34:	68fb      	ldr	r3, [r7, #12]
 8017c36:	681b      	ldr	r3, [r3, #0]
 8017c38:	461a      	mov	r2, r3
 8017c3a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8017c3c:	623b      	str	r3, [r7, #32]
 8017c3e:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8017c40:	69f9      	ldr	r1, [r7, #28]
 8017c42:	6a3a      	ldr	r2, [r7, #32]
 8017c44:	e841 2300 	strex	r3, r2, [r1]
 8017c48:	61bb      	str	r3, [r7, #24]
   return(result);
 8017c4a:	69bb      	ldr	r3, [r7, #24]
 8017c4c:	2b00      	cmp	r3, #0
 8017c4e:	d1e6      	bne.n	8017c1e <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 8017c50:	2300      	movs	r3, #0
}
 8017c52:	4618      	mov	r0, r3
 8017c54:	378c      	adds	r7, #140	; 0x8c
 8017c56:	46bd      	mov	sp, r7
 8017c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017c5c:	4770      	bx	lr
 8017c5e:	bf00      	nop
 8017c60:	08018491 	.word	0x08018491
 8017c64:	08018131 	.word	0x08018131
 8017c68:	08017f79 	.word	0x08017f79
 8017c6c:	08017dc1 	.word	0x08017dc1

08017c70 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8017c70:	b480      	push	{r7}
 8017c72:	b095      	sub	sp, #84	; 0x54
 8017c74:	af00      	add	r7, sp, #0
 8017c76:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8017c78:	687b      	ldr	r3, [r7, #4]
 8017c7a:	681b      	ldr	r3, [r3, #0]
 8017c7c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8017c7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017c80:	e853 3f00 	ldrex	r3, [r3]
 8017c84:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8017c86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017c88:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8017c8c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8017c8e:	687b      	ldr	r3, [r7, #4]
 8017c90:	681b      	ldr	r3, [r3, #0]
 8017c92:	461a      	mov	r2, r3
 8017c94:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8017c96:	643b      	str	r3, [r7, #64]	; 0x40
 8017c98:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8017c9a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8017c9c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8017c9e:	e841 2300 	strex	r3, r2, [r1]
 8017ca2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8017ca4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017ca6:	2b00      	cmp	r3, #0
 8017ca8:	d1e6      	bne.n	8017c78 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8017caa:	687b      	ldr	r3, [r7, #4]
 8017cac:	681b      	ldr	r3, [r3, #0]
 8017cae:	3308      	adds	r3, #8
 8017cb0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8017cb2:	6a3b      	ldr	r3, [r7, #32]
 8017cb4:	e853 3f00 	ldrex	r3, [r3]
 8017cb8:	61fb      	str	r3, [r7, #28]
   return(result);
 8017cba:	69fb      	ldr	r3, [r7, #28]
 8017cbc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8017cc0:	f023 0301 	bic.w	r3, r3, #1
 8017cc4:	64bb      	str	r3, [r7, #72]	; 0x48
 8017cc6:	687b      	ldr	r3, [r7, #4]
 8017cc8:	681b      	ldr	r3, [r3, #0]
 8017cca:	3308      	adds	r3, #8
 8017ccc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8017cce:	62fa      	str	r2, [r7, #44]	; 0x2c
 8017cd0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8017cd2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8017cd4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8017cd6:	e841 2300 	strex	r3, r2, [r1]
 8017cda:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8017cdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017cde:	2b00      	cmp	r3, #0
 8017ce0:	d1e3      	bne.n	8017caa <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8017ce2:	687b      	ldr	r3, [r7, #4]
 8017ce4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8017ce6:	2b01      	cmp	r3, #1
 8017ce8:	d118      	bne.n	8017d1c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8017cea:	687b      	ldr	r3, [r7, #4]
 8017cec:	681b      	ldr	r3, [r3, #0]
 8017cee:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8017cf0:	68fb      	ldr	r3, [r7, #12]
 8017cf2:	e853 3f00 	ldrex	r3, [r3]
 8017cf6:	60bb      	str	r3, [r7, #8]
   return(result);
 8017cf8:	68bb      	ldr	r3, [r7, #8]
 8017cfa:	f023 0310 	bic.w	r3, r3, #16
 8017cfe:	647b      	str	r3, [r7, #68]	; 0x44
 8017d00:	687b      	ldr	r3, [r7, #4]
 8017d02:	681b      	ldr	r3, [r3, #0]
 8017d04:	461a      	mov	r2, r3
 8017d06:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8017d08:	61bb      	str	r3, [r7, #24]
 8017d0a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8017d0c:	6979      	ldr	r1, [r7, #20]
 8017d0e:	69ba      	ldr	r2, [r7, #24]
 8017d10:	e841 2300 	strex	r3, r2, [r1]
 8017d14:	613b      	str	r3, [r7, #16]
   return(result);
 8017d16:	693b      	ldr	r3, [r7, #16]
 8017d18:	2b00      	cmp	r3, #0
 8017d1a:	d1e6      	bne.n	8017cea <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8017d1c:	687b      	ldr	r3, [r7, #4]
 8017d1e:	2220      	movs	r2, #32
 8017d20:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8017d24:	687b      	ldr	r3, [r7, #4]
 8017d26:	2200      	movs	r2, #0
 8017d28:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8017d2a:	687b      	ldr	r3, [r7, #4]
 8017d2c:	2200      	movs	r2, #0
 8017d2e:	675a      	str	r2, [r3, #116]	; 0x74
}
 8017d30:	bf00      	nop
 8017d32:	3754      	adds	r7, #84	; 0x54
 8017d34:	46bd      	mov	sp, r7
 8017d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017d3a:	4770      	bx	lr

08017d3c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8017d3c:	b580      	push	{r7, lr}
 8017d3e:	b084      	sub	sp, #16
 8017d40:	af00      	add	r7, sp, #0
 8017d42:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8017d44:	687b      	ldr	r3, [r7, #4]
 8017d46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017d48:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8017d4a:	68fb      	ldr	r3, [r7, #12]
 8017d4c:	2200      	movs	r2, #0
 8017d4e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8017d52:	68fb      	ldr	r3, [r7, #12]
 8017d54:	2200      	movs	r2, #0
 8017d56:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8017d5a:	68f8      	ldr	r0, [r7, #12]
 8017d5c:	f7ff f99c 	bl	8017098 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8017d60:	bf00      	nop
 8017d62:	3710      	adds	r7, #16
 8017d64:	46bd      	mov	sp, r7
 8017d66:	bd80      	pop	{r7, pc}

08017d68 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8017d68:	b580      	push	{r7, lr}
 8017d6a:	b088      	sub	sp, #32
 8017d6c:	af00      	add	r7, sp, #0
 8017d6e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8017d70:	687b      	ldr	r3, [r7, #4]
 8017d72:	681b      	ldr	r3, [r3, #0]
 8017d74:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8017d76:	68fb      	ldr	r3, [r7, #12]
 8017d78:	e853 3f00 	ldrex	r3, [r3]
 8017d7c:	60bb      	str	r3, [r7, #8]
   return(result);
 8017d7e:	68bb      	ldr	r3, [r7, #8]
 8017d80:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8017d84:	61fb      	str	r3, [r7, #28]
 8017d86:	687b      	ldr	r3, [r7, #4]
 8017d88:	681b      	ldr	r3, [r3, #0]
 8017d8a:	461a      	mov	r2, r3
 8017d8c:	69fb      	ldr	r3, [r7, #28]
 8017d8e:	61bb      	str	r3, [r7, #24]
 8017d90:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8017d92:	6979      	ldr	r1, [r7, #20]
 8017d94:	69ba      	ldr	r2, [r7, #24]
 8017d96:	e841 2300 	strex	r3, r2, [r1]
 8017d9a:	613b      	str	r3, [r7, #16]
   return(result);
 8017d9c:	693b      	ldr	r3, [r7, #16]
 8017d9e:	2b00      	cmp	r3, #0
 8017da0:	d1e6      	bne.n	8017d70 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8017da2:	687b      	ldr	r3, [r7, #4]
 8017da4:	2220      	movs	r2, #32
 8017da6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8017daa:	687b      	ldr	r3, [r7, #4]
 8017dac:	2200      	movs	r2, #0
 8017dae:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8017db0:	6878      	ldr	r0, [r7, #4]
 8017db2:	f7ff f967 	bl	8017084 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8017db6:	bf00      	nop
 8017db8:	3720      	adds	r7, #32
 8017dba:	46bd      	mov	sp, r7
 8017dbc:	bd80      	pop	{r7, pc}
	...

08017dc0 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8017dc0:	b580      	push	{r7, lr}
 8017dc2:	b09c      	sub	sp, #112	; 0x70
 8017dc4:	af00      	add	r7, sp, #0
 8017dc6:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8017dc8:	687b      	ldr	r3, [r7, #4]
 8017dca:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8017dce:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8017dd2:	687b      	ldr	r3, [r7, #4]
 8017dd4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8017dd8:	2b22      	cmp	r3, #34	; 0x22
 8017dda:	f040 80be 	bne.w	8017f5a <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8017dde:	687b      	ldr	r3, [r7, #4]
 8017de0:	681b      	ldr	r3, [r3, #0]
 8017de2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017de4:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8017de8:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8017dec:	b2d9      	uxtb	r1, r3
 8017dee:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8017df2:	b2da      	uxtb	r2, r3
 8017df4:	687b      	ldr	r3, [r7, #4]
 8017df6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8017df8:	400a      	ands	r2, r1
 8017dfa:	b2d2      	uxtb	r2, r2
 8017dfc:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8017dfe:	687b      	ldr	r3, [r7, #4]
 8017e00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8017e02:	1c5a      	adds	r2, r3, #1
 8017e04:	687b      	ldr	r3, [r7, #4]
 8017e06:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8017e08:	687b      	ldr	r3, [r7, #4]
 8017e0a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8017e0e:	b29b      	uxth	r3, r3
 8017e10:	3b01      	subs	r3, #1
 8017e12:	b29a      	uxth	r2, r3
 8017e14:	687b      	ldr	r3, [r7, #4]
 8017e16:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8017e1a:	687b      	ldr	r3, [r7, #4]
 8017e1c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8017e20:	b29b      	uxth	r3, r3
 8017e22:	2b00      	cmp	r3, #0
 8017e24:	f040 80a1 	bne.w	8017f6a <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8017e28:	687b      	ldr	r3, [r7, #4]
 8017e2a:	681b      	ldr	r3, [r3, #0]
 8017e2c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8017e2e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8017e30:	e853 3f00 	ldrex	r3, [r3]
 8017e34:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8017e36:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8017e38:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8017e3c:	66bb      	str	r3, [r7, #104]	; 0x68
 8017e3e:	687b      	ldr	r3, [r7, #4]
 8017e40:	681b      	ldr	r3, [r3, #0]
 8017e42:	461a      	mov	r2, r3
 8017e44:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8017e46:	65bb      	str	r3, [r7, #88]	; 0x58
 8017e48:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8017e4a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8017e4c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8017e4e:	e841 2300 	strex	r3, r2, [r1]
 8017e52:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8017e54:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8017e56:	2b00      	cmp	r3, #0
 8017e58:	d1e6      	bne.n	8017e28 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8017e5a:	687b      	ldr	r3, [r7, #4]
 8017e5c:	681b      	ldr	r3, [r3, #0]
 8017e5e:	3308      	adds	r3, #8
 8017e60:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8017e62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017e64:	e853 3f00 	ldrex	r3, [r3]
 8017e68:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8017e6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017e6c:	f023 0301 	bic.w	r3, r3, #1
 8017e70:	667b      	str	r3, [r7, #100]	; 0x64
 8017e72:	687b      	ldr	r3, [r7, #4]
 8017e74:	681b      	ldr	r3, [r3, #0]
 8017e76:	3308      	adds	r3, #8
 8017e78:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8017e7a:	647a      	str	r2, [r7, #68]	; 0x44
 8017e7c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8017e7e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8017e80:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8017e82:	e841 2300 	strex	r3, r2, [r1]
 8017e86:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8017e88:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8017e8a:	2b00      	cmp	r3, #0
 8017e8c:	d1e5      	bne.n	8017e5a <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8017e8e:	687b      	ldr	r3, [r7, #4]
 8017e90:	2220      	movs	r2, #32
 8017e92:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8017e96:	687b      	ldr	r3, [r7, #4]
 8017e98:	2200      	movs	r2, #0
 8017e9a:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8017e9c:	687b      	ldr	r3, [r7, #4]
 8017e9e:	2200      	movs	r2, #0
 8017ea0:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8017ea2:	687b      	ldr	r3, [r7, #4]
 8017ea4:	681b      	ldr	r3, [r3, #0]
 8017ea6:	4a33      	ldr	r2, [pc, #204]	; (8017f74 <UART_RxISR_8BIT+0x1b4>)
 8017ea8:	4293      	cmp	r3, r2
 8017eaa:	d01f      	beq.n	8017eec <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8017eac:	687b      	ldr	r3, [r7, #4]
 8017eae:	681b      	ldr	r3, [r3, #0]
 8017eb0:	685b      	ldr	r3, [r3, #4]
 8017eb2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8017eb6:	2b00      	cmp	r3, #0
 8017eb8:	d018      	beq.n	8017eec <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8017eba:	687b      	ldr	r3, [r7, #4]
 8017ebc:	681b      	ldr	r3, [r3, #0]
 8017ebe:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8017ec0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017ec2:	e853 3f00 	ldrex	r3, [r3]
 8017ec6:	623b      	str	r3, [r7, #32]
   return(result);
 8017ec8:	6a3b      	ldr	r3, [r7, #32]
 8017eca:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8017ece:	663b      	str	r3, [r7, #96]	; 0x60
 8017ed0:	687b      	ldr	r3, [r7, #4]
 8017ed2:	681b      	ldr	r3, [r3, #0]
 8017ed4:	461a      	mov	r2, r3
 8017ed6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8017ed8:	633b      	str	r3, [r7, #48]	; 0x30
 8017eda:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8017edc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8017ede:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8017ee0:	e841 2300 	strex	r3, r2, [r1]
 8017ee4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8017ee6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017ee8:	2b00      	cmp	r3, #0
 8017eea:	d1e6      	bne.n	8017eba <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8017eec:	687b      	ldr	r3, [r7, #4]
 8017eee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8017ef0:	2b01      	cmp	r3, #1
 8017ef2:	d12e      	bne.n	8017f52 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8017ef4:	687b      	ldr	r3, [r7, #4]
 8017ef6:	2200      	movs	r2, #0
 8017ef8:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8017efa:	687b      	ldr	r3, [r7, #4]
 8017efc:	681b      	ldr	r3, [r3, #0]
 8017efe:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8017f00:	693b      	ldr	r3, [r7, #16]
 8017f02:	e853 3f00 	ldrex	r3, [r3]
 8017f06:	60fb      	str	r3, [r7, #12]
   return(result);
 8017f08:	68fb      	ldr	r3, [r7, #12]
 8017f0a:	f023 0310 	bic.w	r3, r3, #16
 8017f0e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8017f10:	687b      	ldr	r3, [r7, #4]
 8017f12:	681b      	ldr	r3, [r3, #0]
 8017f14:	461a      	mov	r2, r3
 8017f16:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8017f18:	61fb      	str	r3, [r7, #28]
 8017f1a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8017f1c:	69b9      	ldr	r1, [r7, #24]
 8017f1e:	69fa      	ldr	r2, [r7, #28]
 8017f20:	e841 2300 	strex	r3, r2, [r1]
 8017f24:	617b      	str	r3, [r7, #20]
   return(result);
 8017f26:	697b      	ldr	r3, [r7, #20]
 8017f28:	2b00      	cmp	r3, #0
 8017f2a:	d1e6      	bne.n	8017efa <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8017f2c:	687b      	ldr	r3, [r7, #4]
 8017f2e:	681b      	ldr	r3, [r3, #0]
 8017f30:	69db      	ldr	r3, [r3, #28]
 8017f32:	f003 0310 	and.w	r3, r3, #16
 8017f36:	2b10      	cmp	r3, #16
 8017f38:	d103      	bne.n	8017f42 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8017f3a:	687b      	ldr	r3, [r7, #4]
 8017f3c:	681b      	ldr	r3, [r3, #0]
 8017f3e:	2210      	movs	r2, #16
 8017f40:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8017f42:	687b      	ldr	r3, [r7, #4]
 8017f44:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8017f48:	4619      	mov	r1, r3
 8017f4a:	6878      	ldr	r0, [r7, #4]
 8017f4c:	f7ff f8ae 	bl	80170ac <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8017f50:	e00b      	b.n	8017f6a <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8017f52:	6878      	ldr	r0, [r7, #4]
 8017f54:	f7e9 ffea 	bl	8001f2c <HAL_UART_RxCpltCallback>
}
 8017f58:	e007      	b.n	8017f6a <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8017f5a:	687b      	ldr	r3, [r7, #4]
 8017f5c:	681b      	ldr	r3, [r3, #0]
 8017f5e:	699a      	ldr	r2, [r3, #24]
 8017f60:	687b      	ldr	r3, [r7, #4]
 8017f62:	681b      	ldr	r3, [r3, #0]
 8017f64:	f042 0208 	orr.w	r2, r2, #8
 8017f68:	619a      	str	r2, [r3, #24]
}
 8017f6a:	bf00      	nop
 8017f6c:	3770      	adds	r7, #112	; 0x70
 8017f6e:	46bd      	mov	sp, r7
 8017f70:	bd80      	pop	{r7, pc}
 8017f72:	bf00      	nop
 8017f74:	40008000 	.word	0x40008000

08017f78 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8017f78:	b580      	push	{r7, lr}
 8017f7a:	b09c      	sub	sp, #112	; 0x70
 8017f7c:	af00      	add	r7, sp, #0
 8017f7e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8017f80:	687b      	ldr	r3, [r7, #4]
 8017f82:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8017f86:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8017f8a:	687b      	ldr	r3, [r7, #4]
 8017f8c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8017f90:	2b22      	cmp	r3, #34	; 0x22
 8017f92:	f040 80be 	bne.w	8018112 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8017f96:	687b      	ldr	r3, [r7, #4]
 8017f98:	681b      	ldr	r3, [r3, #0]
 8017f9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017f9c:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8017fa0:	687b      	ldr	r3, [r7, #4]
 8017fa2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8017fa4:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8017fa6:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 8017faa:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8017fae:	4013      	ands	r3, r2
 8017fb0:	b29a      	uxth	r2, r3
 8017fb2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8017fb4:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8017fb6:	687b      	ldr	r3, [r7, #4]
 8017fb8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8017fba:	1c9a      	adds	r2, r3, #2
 8017fbc:	687b      	ldr	r3, [r7, #4]
 8017fbe:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8017fc0:	687b      	ldr	r3, [r7, #4]
 8017fc2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8017fc6:	b29b      	uxth	r3, r3
 8017fc8:	3b01      	subs	r3, #1
 8017fca:	b29a      	uxth	r2, r3
 8017fcc:	687b      	ldr	r3, [r7, #4]
 8017fce:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8017fd2:	687b      	ldr	r3, [r7, #4]
 8017fd4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8017fd8:	b29b      	uxth	r3, r3
 8017fda:	2b00      	cmp	r3, #0
 8017fdc:	f040 80a1 	bne.w	8018122 <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8017fe0:	687b      	ldr	r3, [r7, #4]
 8017fe2:	681b      	ldr	r3, [r3, #0]
 8017fe4:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8017fe6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8017fe8:	e853 3f00 	ldrex	r3, [r3]
 8017fec:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8017fee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8017ff0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8017ff4:	667b      	str	r3, [r7, #100]	; 0x64
 8017ff6:	687b      	ldr	r3, [r7, #4]
 8017ff8:	681b      	ldr	r3, [r3, #0]
 8017ffa:	461a      	mov	r2, r3
 8017ffc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8017ffe:	657b      	str	r3, [r7, #84]	; 0x54
 8018000:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8018002:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8018004:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8018006:	e841 2300 	strex	r3, r2, [r1]
 801800a:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 801800c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801800e:	2b00      	cmp	r3, #0
 8018010:	d1e6      	bne.n	8017fe0 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8018012:	687b      	ldr	r3, [r7, #4]
 8018014:	681b      	ldr	r3, [r3, #0]
 8018016:	3308      	adds	r3, #8
 8018018:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801801a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801801c:	e853 3f00 	ldrex	r3, [r3]
 8018020:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8018022:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018024:	f023 0301 	bic.w	r3, r3, #1
 8018028:	663b      	str	r3, [r7, #96]	; 0x60
 801802a:	687b      	ldr	r3, [r7, #4]
 801802c:	681b      	ldr	r3, [r3, #0]
 801802e:	3308      	adds	r3, #8
 8018030:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8018032:	643a      	str	r2, [r7, #64]	; 0x40
 8018034:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8018036:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8018038:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801803a:	e841 2300 	strex	r3, r2, [r1]
 801803e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8018040:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018042:	2b00      	cmp	r3, #0
 8018044:	d1e5      	bne.n	8018012 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8018046:	687b      	ldr	r3, [r7, #4]
 8018048:	2220      	movs	r2, #32
 801804a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 801804e:	687b      	ldr	r3, [r7, #4]
 8018050:	2200      	movs	r2, #0
 8018052:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8018054:	687b      	ldr	r3, [r7, #4]
 8018056:	2200      	movs	r2, #0
 8018058:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 801805a:	687b      	ldr	r3, [r7, #4]
 801805c:	681b      	ldr	r3, [r3, #0]
 801805e:	4a33      	ldr	r2, [pc, #204]	; (801812c <UART_RxISR_16BIT+0x1b4>)
 8018060:	4293      	cmp	r3, r2
 8018062:	d01f      	beq.n	80180a4 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8018064:	687b      	ldr	r3, [r7, #4]
 8018066:	681b      	ldr	r3, [r3, #0]
 8018068:	685b      	ldr	r3, [r3, #4]
 801806a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 801806e:	2b00      	cmp	r3, #0
 8018070:	d018      	beq.n	80180a4 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8018072:	687b      	ldr	r3, [r7, #4]
 8018074:	681b      	ldr	r3, [r3, #0]
 8018076:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8018078:	6a3b      	ldr	r3, [r7, #32]
 801807a:	e853 3f00 	ldrex	r3, [r3]
 801807e:	61fb      	str	r3, [r7, #28]
   return(result);
 8018080:	69fb      	ldr	r3, [r7, #28]
 8018082:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8018086:	65fb      	str	r3, [r7, #92]	; 0x5c
 8018088:	687b      	ldr	r3, [r7, #4]
 801808a:	681b      	ldr	r3, [r3, #0]
 801808c:	461a      	mov	r2, r3
 801808e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8018090:	62fb      	str	r3, [r7, #44]	; 0x2c
 8018092:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8018094:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8018096:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8018098:	e841 2300 	strex	r3, r2, [r1]
 801809c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 801809e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80180a0:	2b00      	cmp	r3, #0
 80180a2:	d1e6      	bne.n	8018072 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80180a4:	687b      	ldr	r3, [r7, #4]
 80180a6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80180a8:	2b01      	cmp	r3, #1
 80180aa:	d12e      	bne.n	801810a <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80180ac:	687b      	ldr	r3, [r7, #4]
 80180ae:	2200      	movs	r2, #0
 80180b0:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80180b2:	687b      	ldr	r3, [r7, #4]
 80180b4:	681b      	ldr	r3, [r3, #0]
 80180b6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80180b8:	68fb      	ldr	r3, [r7, #12]
 80180ba:	e853 3f00 	ldrex	r3, [r3]
 80180be:	60bb      	str	r3, [r7, #8]
   return(result);
 80180c0:	68bb      	ldr	r3, [r7, #8]
 80180c2:	f023 0310 	bic.w	r3, r3, #16
 80180c6:	65bb      	str	r3, [r7, #88]	; 0x58
 80180c8:	687b      	ldr	r3, [r7, #4]
 80180ca:	681b      	ldr	r3, [r3, #0]
 80180cc:	461a      	mov	r2, r3
 80180ce:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80180d0:	61bb      	str	r3, [r7, #24]
 80180d2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80180d4:	6979      	ldr	r1, [r7, #20]
 80180d6:	69ba      	ldr	r2, [r7, #24]
 80180d8:	e841 2300 	strex	r3, r2, [r1]
 80180dc:	613b      	str	r3, [r7, #16]
   return(result);
 80180de:	693b      	ldr	r3, [r7, #16]
 80180e0:	2b00      	cmp	r3, #0
 80180e2:	d1e6      	bne.n	80180b2 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80180e4:	687b      	ldr	r3, [r7, #4]
 80180e6:	681b      	ldr	r3, [r3, #0]
 80180e8:	69db      	ldr	r3, [r3, #28]
 80180ea:	f003 0310 	and.w	r3, r3, #16
 80180ee:	2b10      	cmp	r3, #16
 80180f0:	d103      	bne.n	80180fa <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80180f2:	687b      	ldr	r3, [r7, #4]
 80180f4:	681b      	ldr	r3, [r3, #0]
 80180f6:	2210      	movs	r2, #16
 80180f8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80180fa:	687b      	ldr	r3, [r7, #4]
 80180fc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8018100:	4619      	mov	r1, r3
 8018102:	6878      	ldr	r0, [r7, #4]
 8018104:	f7fe ffd2 	bl	80170ac <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8018108:	e00b      	b.n	8018122 <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 801810a:	6878      	ldr	r0, [r7, #4]
 801810c:	f7e9 ff0e 	bl	8001f2c <HAL_UART_RxCpltCallback>
}
 8018110:	e007      	b.n	8018122 <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8018112:	687b      	ldr	r3, [r7, #4]
 8018114:	681b      	ldr	r3, [r3, #0]
 8018116:	699a      	ldr	r2, [r3, #24]
 8018118:	687b      	ldr	r3, [r7, #4]
 801811a:	681b      	ldr	r3, [r3, #0]
 801811c:	f042 0208 	orr.w	r2, r2, #8
 8018120:	619a      	str	r2, [r3, #24]
}
 8018122:	bf00      	nop
 8018124:	3770      	adds	r7, #112	; 0x70
 8018126:	46bd      	mov	sp, r7
 8018128:	bd80      	pop	{r7, pc}
 801812a:	bf00      	nop
 801812c:	40008000 	.word	0x40008000

08018130 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8018130:	b580      	push	{r7, lr}
 8018132:	b0ac      	sub	sp, #176	; 0xb0
 8018134:	af00      	add	r7, sp, #0
 8018136:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8018138:	687b      	ldr	r3, [r7, #4]
 801813a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801813e:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8018142:	687b      	ldr	r3, [r7, #4]
 8018144:	681b      	ldr	r3, [r3, #0]
 8018146:	69db      	ldr	r3, [r3, #28]
 8018148:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 801814c:	687b      	ldr	r3, [r7, #4]
 801814e:	681b      	ldr	r3, [r3, #0]
 8018150:	681b      	ldr	r3, [r3, #0]
 8018152:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8018156:	687b      	ldr	r3, [r7, #4]
 8018158:	681b      	ldr	r3, [r3, #0]
 801815a:	689b      	ldr	r3, [r3, #8]
 801815c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8018160:	687b      	ldr	r3, [r7, #4]
 8018162:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8018166:	2b22      	cmp	r3, #34	; 0x22
 8018168:	f040 8182 	bne.w	8018470 <UART_RxISR_8BIT_FIFOEN+0x340>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 801816c:	687b      	ldr	r3, [r7, #4]
 801816e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8018172:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8018176:	e125      	b.n	80183c4 <UART_RxISR_8BIT_FIFOEN+0x294>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8018178:	687b      	ldr	r3, [r7, #4]
 801817a:	681b      	ldr	r3, [r3, #0]
 801817c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801817e:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8018182:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 8018186:	b2d9      	uxtb	r1, r3
 8018188:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 801818c:	b2da      	uxtb	r2, r3
 801818e:	687b      	ldr	r3, [r7, #4]
 8018190:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8018192:	400a      	ands	r2, r1
 8018194:	b2d2      	uxtb	r2, r2
 8018196:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8018198:	687b      	ldr	r3, [r7, #4]
 801819a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801819c:	1c5a      	adds	r2, r3, #1
 801819e:	687b      	ldr	r3, [r7, #4]
 80181a0:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 80181a2:	687b      	ldr	r3, [r7, #4]
 80181a4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80181a8:	b29b      	uxth	r3, r3
 80181aa:	3b01      	subs	r3, #1
 80181ac:	b29a      	uxth	r2, r3
 80181ae:	687b      	ldr	r3, [r7, #4]
 80181b0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80181b4:	687b      	ldr	r3, [r7, #4]
 80181b6:	681b      	ldr	r3, [r3, #0]
 80181b8:	69db      	ldr	r3, [r3, #28]
 80181ba:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80181be:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80181c2:	f003 0307 	and.w	r3, r3, #7
 80181c6:	2b00      	cmp	r3, #0
 80181c8:	d053      	beq.n	8018272 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80181ca:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80181ce:	f003 0301 	and.w	r3, r3, #1
 80181d2:	2b00      	cmp	r3, #0
 80181d4:	d011      	beq.n	80181fa <UART_RxISR_8BIT_FIFOEN+0xca>
 80181d6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80181da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80181de:	2b00      	cmp	r3, #0
 80181e0:	d00b      	beq.n	80181fa <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80181e2:	687b      	ldr	r3, [r7, #4]
 80181e4:	681b      	ldr	r3, [r3, #0]
 80181e6:	2201      	movs	r2, #1
 80181e8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80181ea:	687b      	ldr	r3, [r7, #4]
 80181ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80181f0:	f043 0201 	orr.w	r2, r3, #1
 80181f4:	687b      	ldr	r3, [r7, #4]
 80181f6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80181fa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80181fe:	f003 0302 	and.w	r3, r3, #2
 8018202:	2b00      	cmp	r3, #0
 8018204:	d011      	beq.n	801822a <UART_RxISR_8BIT_FIFOEN+0xfa>
 8018206:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 801820a:	f003 0301 	and.w	r3, r3, #1
 801820e:	2b00      	cmp	r3, #0
 8018210:	d00b      	beq.n	801822a <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8018212:	687b      	ldr	r3, [r7, #4]
 8018214:	681b      	ldr	r3, [r3, #0]
 8018216:	2202      	movs	r2, #2
 8018218:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 801821a:	687b      	ldr	r3, [r7, #4]
 801821c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8018220:	f043 0204 	orr.w	r2, r3, #4
 8018224:	687b      	ldr	r3, [r7, #4]
 8018226:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 801822a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 801822e:	f003 0304 	and.w	r3, r3, #4
 8018232:	2b00      	cmp	r3, #0
 8018234:	d011      	beq.n	801825a <UART_RxISR_8BIT_FIFOEN+0x12a>
 8018236:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 801823a:	f003 0301 	and.w	r3, r3, #1
 801823e:	2b00      	cmp	r3, #0
 8018240:	d00b      	beq.n	801825a <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8018242:	687b      	ldr	r3, [r7, #4]
 8018244:	681b      	ldr	r3, [r3, #0]
 8018246:	2204      	movs	r2, #4
 8018248:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 801824a:	687b      	ldr	r3, [r7, #4]
 801824c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8018250:	f043 0202 	orr.w	r2, r3, #2
 8018254:	687b      	ldr	r3, [r7, #4]
 8018256:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 801825a:	687b      	ldr	r3, [r7, #4]
 801825c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8018260:	2b00      	cmp	r3, #0
 8018262:	d006      	beq.n	8018272 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8018264:	6878      	ldr	r0, [r7, #4]
 8018266:	f7fe ff17 	bl	8017098 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 801826a:	687b      	ldr	r3, [r7, #4]
 801826c:	2200      	movs	r2, #0
 801826e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8018272:	687b      	ldr	r3, [r7, #4]
 8018274:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8018278:	b29b      	uxth	r3, r3
 801827a:	2b00      	cmp	r3, #0
 801827c:	f040 80a2 	bne.w	80183c4 <UART_RxISR_8BIT_FIFOEN+0x294>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8018280:	687b      	ldr	r3, [r7, #4]
 8018282:	681b      	ldr	r3, [r3, #0]
 8018284:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8018286:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8018288:	e853 3f00 	ldrex	r3, [r3]
 801828c:	66fb      	str	r3, [r7, #108]	; 0x6c
   return(result);
 801828e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8018290:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8018294:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8018298:	687b      	ldr	r3, [r7, #4]
 801829a:	681b      	ldr	r3, [r3, #0]
 801829c:	461a      	mov	r2, r3
 801829e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80182a2:	67fb      	str	r3, [r7, #124]	; 0x7c
 80182a4:	67ba      	str	r2, [r7, #120]	; 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80182a6:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 80182a8:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80182aa:	e841 2300 	strex	r3, r2, [r1]
 80182ae:	677b      	str	r3, [r7, #116]	; 0x74
   return(result);
 80182b0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80182b2:	2b00      	cmp	r3, #0
 80182b4:	d1e4      	bne.n	8018280 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80182b6:	687b      	ldr	r3, [r7, #4]
 80182b8:	681b      	ldr	r3, [r3, #0]
 80182ba:	3308      	adds	r3, #8
 80182bc:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80182be:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80182c0:	e853 3f00 	ldrex	r3, [r3]
 80182c4:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 80182c6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80182c8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80182cc:	f023 0301 	bic.w	r3, r3, #1
 80182d0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80182d4:	687b      	ldr	r3, [r7, #4]
 80182d6:	681b      	ldr	r3, [r3, #0]
 80182d8:	3308      	adds	r3, #8
 80182da:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80182de:	66ba      	str	r2, [r7, #104]	; 0x68
 80182e0:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80182e2:	6e79      	ldr	r1, [r7, #100]	; 0x64
 80182e4:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80182e6:	e841 2300 	strex	r3, r2, [r1]
 80182ea:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 80182ec:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80182ee:	2b00      	cmp	r3, #0
 80182f0:	d1e1      	bne.n	80182b6 <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80182f2:	687b      	ldr	r3, [r7, #4]
 80182f4:	2220      	movs	r2, #32
 80182f6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80182fa:	687b      	ldr	r3, [r7, #4]
 80182fc:	2200      	movs	r2, #0
 80182fe:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8018300:	687b      	ldr	r3, [r7, #4]
 8018302:	2200      	movs	r2, #0
 8018304:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8018306:	687b      	ldr	r3, [r7, #4]
 8018308:	681b      	ldr	r3, [r3, #0]
 801830a:	4a5f      	ldr	r2, [pc, #380]	; (8018488 <UART_RxISR_8BIT_FIFOEN+0x358>)
 801830c:	4293      	cmp	r3, r2
 801830e:	d021      	beq.n	8018354 <UART_RxISR_8BIT_FIFOEN+0x224>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8018310:	687b      	ldr	r3, [r7, #4]
 8018312:	681b      	ldr	r3, [r3, #0]
 8018314:	685b      	ldr	r3, [r3, #4]
 8018316:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 801831a:	2b00      	cmp	r3, #0
 801831c:	d01a      	beq.n	8018354 <UART_RxISR_8BIT_FIFOEN+0x224>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 801831e:	687b      	ldr	r3, [r7, #4]
 8018320:	681b      	ldr	r3, [r3, #0]
 8018322:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8018324:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8018326:	e853 3f00 	ldrex	r3, [r3]
 801832a:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 801832c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801832e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8018332:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8018336:	687b      	ldr	r3, [r7, #4]
 8018338:	681b      	ldr	r3, [r3, #0]
 801833a:	461a      	mov	r2, r3
 801833c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8018340:	657b      	str	r3, [r7, #84]	; 0x54
 8018342:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8018344:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8018346:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8018348:	e841 2300 	strex	r3, r2, [r1]
 801834c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 801834e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8018350:	2b00      	cmp	r3, #0
 8018352:	d1e4      	bne.n	801831e <UART_RxISR_8BIT_FIFOEN+0x1ee>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8018354:	687b      	ldr	r3, [r7, #4]
 8018356:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8018358:	2b01      	cmp	r3, #1
 801835a:	d130      	bne.n	80183be <UART_RxISR_8BIT_FIFOEN+0x28e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801835c:	687b      	ldr	r3, [r7, #4]
 801835e:	2200      	movs	r2, #0
 8018360:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8018362:	687b      	ldr	r3, [r7, #4]
 8018364:	681b      	ldr	r3, [r3, #0]
 8018366:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8018368:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801836a:	e853 3f00 	ldrex	r3, [r3]
 801836e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8018370:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018372:	f023 0310 	bic.w	r3, r3, #16
 8018376:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 801837a:	687b      	ldr	r3, [r7, #4]
 801837c:	681b      	ldr	r3, [r3, #0]
 801837e:	461a      	mov	r2, r3
 8018380:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8018384:	643b      	str	r3, [r7, #64]	; 0x40
 8018386:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8018388:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 801838a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801838c:	e841 2300 	strex	r3, r2, [r1]
 8018390:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8018392:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018394:	2b00      	cmp	r3, #0
 8018396:	d1e4      	bne.n	8018362 <UART_RxISR_8BIT_FIFOEN+0x232>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8018398:	687b      	ldr	r3, [r7, #4]
 801839a:	681b      	ldr	r3, [r3, #0]
 801839c:	69db      	ldr	r3, [r3, #28]
 801839e:	f003 0310 	and.w	r3, r3, #16
 80183a2:	2b10      	cmp	r3, #16
 80183a4:	d103      	bne.n	80183ae <UART_RxISR_8BIT_FIFOEN+0x27e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80183a6:	687b      	ldr	r3, [r7, #4]
 80183a8:	681b      	ldr	r3, [r3, #0]
 80183aa:	2210      	movs	r2, #16
 80183ac:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80183ae:	687b      	ldr	r3, [r7, #4]
 80183b0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80183b4:	4619      	mov	r1, r3
 80183b6:	6878      	ldr	r0, [r7, #4]
 80183b8:	f7fe fe78 	bl	80170ac <HAL_UARTEx_RxEventCallback>
 80183bc:	e002      	b.n	80183c4 <UART_RxISR_8BIT_FIFOEN+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 80183be:	6878      	ldr	r0, [r7, #4]
 80183c0:	f7e9 fdb4 	bl	8001f2c <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80183c4:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 80183c8:	2b00      	cmp	r3, #0
 80183ca:	d006      	beq.n	80183da <UART_RxISR_8BIT_FIFOEN+0x2aa>
 80183cc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80183d0:	f003 0320 	and.w	r3, r3, #32
 80183d4:	2b00      	cmp	r3, #0
 80183d6:	f47f aecf 	bne.w	8018178 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80183da:	687b      	ldr	r3, [r7, #4]
 80183dc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80183e0:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80183e4:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80183e8:	2b00      	cmp	r3, #0
 80183ea:	d049      	beq.n	8018480 <UART_RxISR_8BIT_FIFOEN+0x350>
 80183ec:	687b      	ldr	r3, [r7, #4]
 80183ee:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80183f2:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 80183f6:	429a      	cmp	r2, r3
 80183f8:	d242      	bcs.n	8018480 <UART_RxISR_8BIT_FIFOEN+0x350>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80183fa:	687b      	ldr	r3, [r7, #4]
 80183fc:	681b      	ldr	r3, [r3, #0]
 80183fe:	3308      	adds	r3, #8
 8018400:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8018402:	6a3b      	ldr	r3, [r7, #32]
 8018404:	e853 3f00 	ldrex	r3, [r3]
 8018408:	61fb      	str	r3, [r7, #28]
   return(result);
 801840a:	69fb      	ldr	r3, [r7, #28]
 801840c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8018410:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8018414:	687b      	ldr	r3, [r7, #4]
 8018416:	681b      	ldr	r3, [r3, #0]
 8018418:	3308      	adds	r3, #8
 801841a:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 801841e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8018420:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8018422:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8018424:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8018426:	e841 2300 	strex	r3, r2, [r1]
 801842a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 801842c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801842e:	2b00      	cmp	r3, #0
 8018430:	d1e3      	bne.n	80183fa <UART_RxISR_8BIT_FIFOEN+0x2ca>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8018432:	687b      	ldr	r3, [r7, #4]
 8018434:	4a15      	ldr	r2, [pc, #84]	; (801848c <UART_RxISR_8BIT_FIFOEN+0x35c>)
 8018436:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8018438:	687b      	ldr	r3, [r7, #4]
 801843a:	681b      	ldr	r3, [r3, #0]
 801843c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801843e:	68fb      	ldr	r3, [r7, #12]
 8018440:	e853 3f00 	ldrex	r3, [r3]
 8018444:	60bb      	str	r3, [r7, #8]
   return(result);
 8018446:	68bb      	ldr	r3, [r7, #8]
 8018448:	f043 0320 	orr.w	r3, r3, #32
 801844c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8018450:	687b      	ldr	r3, [r7, #4]
 8018452:	681b      	ldr	r3, [r3, #0]
 8018454:	461a      	mov	r2, r3
 8018456:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 801845a:	61bb      	str	r3, [r7, #24]
 801845c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801845e:	6979      	ldr	r1, [r7, #20]
 8018460:	69ba      	ldr	r2, [r7, #24]
 8018462:	e841 2300 	strex	r3, r2, [r1]
 8018466:	613b      	str	r3, [r7, #16]
   return(result);
 8018468:	693b      	ldr	r3, [r7, #16]
 801846a:	2b00      	cmp	r3, #0
 801846c:	d1e4      	bne.n	8018438 <UART_RxISR_8BIT_FIFOEN+0x308>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 801846e:	e007      	b.n	8018480 <UART_RxISR_8BIT_FIFOEN+0x350>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8018470:	687b      	ldr	r3, [r7, #4]
 8018472:	681b      	ldr	r3, [r3, #0]
 8018474:	699a      	ldr	r2, [r3, #24]
 8018476:	687b      	ldr	r3, [r7, #4]
 8018478:	681b      	ldr	r3, [r3, #0]
 801847a:	f042 0208 	orr.w	r2, r2, #8
 801847e:	619a      	str	r2, [r3, #24]
}
 8018480:	bf00      	nop
 8018482:	37b0      	adds	r7, #176	; 0xb0
 8018484:	46bd      	mov	sp, r7
 8018486:	bd80      	pop	{r7, pc}
 8018488:	40008000 	.word	0x40008000
 801848c:	08017dc1 	.word	0x08017dc1

08018490 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8018490:	b580      	push	{r7, lr}
 8018492:	b0ae      	sub	sp, #184	; 0xb8
 8018494:	af00      	add	r7, sp, #0
 8018496:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8018498:	687b      	ldr	r3, [r7, #4]
 801849a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801849e:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80184a2:	687b      	ldr	r3, [r7, #4]
 80184a4:	681b      	ldr	r3, [r3, #0]
 80184a6:	69db      	ldr	r3, [r3, #28]
 80184a8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80184ac:	687b      	ldr	r3, [r7, #4]
 80184ae:	681b      	ldr	r3, [r3, #0]
 80184b0:	681b      	ldr	r3, [r3, #0]
 80184b2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80184b6:	687b      	ldr	r3, [r7, #4]
 80184b8:	681b      	ldr	r3, [r3, #0]
 80184ba:	689b      	ldr	r3, [r3, #8]
 80184bc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80184c0:	687b      	ldr	r3, [r7, #4]
 80184c2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80184c6:	2b22      	cmp	r3, #34	; 0x22
 80184c8:	f040 8186 	bne.w	80187d8 <UART_RxISR_16BIT_FIFOEN+0x348>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80184cc:	687b      	ldr	r3, [r7, #4]
 80184ce:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80184d2:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80184d6:	e129      	b.n	801872c <UART_RxISR_16BIT_FIFOEN+0x29c>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80184d8:	687b      	ldr	r3, [r7, #4]
 80184da:	681b      	ldr	r3, [r3, #0]
 80184dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80184de:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 80184e2:	687b      	ldr	r3, [r7, #4]
 80184e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80184e6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 80184ea:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 80184ee:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 80184f2:	4013      	ands	r3, r2
 80184f4:	b29a      	uxth	r2, r3
 80184f6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80184fa:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80184fc:	687b      	ldr	r3, [r7, #4]
 80184fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8018500:	1c9a      	adds	r2, r3, #2
 8018502:	687b      	ldr	r3, [r7, #4]
 8018504:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8018506:	687b      	ldr	r3, [r7, #4]
 8018508:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 801850c:	b29b      	uxth	r3, r3
 801850e:	3b01      	subs	r3, #1
 8018510:	b29a      	uxth	r2, r3
 8018512:	687b      	ldr	r3, [r7, #4]
 8018514:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8018518:	687b      	ldr	r3, [r7, #4]
 801851a:	681b      	ldr	r3, [r3, #0]
 801851c:	69db      	ldr	r3, [r3, #28]
 801851e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8018522:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8018526:	f003 0307 	and.w	r3, r3, #7
 801852a:	2b00      	cmp	r3, #0
 801852c:	d053      	beq.n	80185d6 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 801852e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8018532:	f003 0301 	and.w	r3, r3, #1
 8018536:	2b00      	cmp	r3, #0
 8018538:	d011      	beq.n	801855e <UART_RxISR_16BIT_FIFOEN+0xce>
 801853a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 801853e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8018542:	2b00      	cmp	r3, #0
 8018544:	d00b      	beq.n	801855e <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8018546:	687b      	ldr	r3, [r7, #4]
 8018548:	681b      	ldr	r3, [r3, #0]
 801854a:	2201      	movs	r2, #1
 801854c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 801854e:	687b      	ldr	r3, [r7, #4]
 8018550:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8018554:	f043 0201 	orr.w	r2, r3, #1
 8018558:	687b      	ldr	r3, [r7, #4]
 801855a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 801855e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8018562:	f003 0302 	and.w	r3, r3, #2
 8018566:	2b00      	cmp	r3, #0
 8018568:	d011      	beq.n	801858e <UART_RxISR_16BIT_FIFOEN+0xfe>
 801856a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 801856e:	f003 0301 	and.w	r3, r3, #1
 8018572:	2b00      	cmp	r3, #0
 8018574:	d00b      	beq.n	801858e <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8018576:	687b      	ldr	r3, [r7, #4]
 8018578:	681b      	ldr	r3, [r3, #0]
 801857a:	2202      	movs	r2, #2
 801857c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 801857e:	687b      	ldr	r3, [r7, #4]
 8018580:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8018584:	f043 0204 	orr.w	r2, r3, #4
 8018588:	687b      	ldr	r3, [r7, #4]
 801858a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 801858e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8018592:	f003 0304 	and.w	r3, r3, #4
 8018596:	2b00      	cmp	r3, #0
 8018598:	d011      	beq.n	80185be <UART_RxISR_16BIT_FIFOEN+0x12e>
 801859a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 801859e:	f003 0301 	and.w	r3, r3, #1
 80185a2:	2b00      	cmp	r3, #0
 80185a4:	d00b      	beq.n	80185be <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80185a6:	687b      	ldr	r3, [r7, #4]
 80185a8:	681b      	ldr	r3, [r3, #0]
 80185aa:	2204      	movs	r2, #4
 80185ac:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80185ae:	687b      	ldr	r3, [r7, #4]
 80185b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80185b4:	f043 0202 	orr.w	r2, r3, #2
 80185b8:	687b      	ldr	r3, [r7, #4]
 80185ba:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80185be:	687b      	ldr	r3, [r7, #4]
 80185c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80185c4:	2b00      	cmp	r3, #0
 80185c6:	d006      	beq.n	80185d6 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80185c8:	6878      	ldr	r0, [r7, #4]
 80185ca:	f7fe fd65 	bl	8017098 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80185ce:	687b      	ldr	r3, [r7, #4]
 80185d0:	2200      	movs	r2, #0
 80185d2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 80185d6:	687b      	ldr	r3, [r7, #4]
 80185d8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80185dc:	b29b      	uxth	r3, r3
 80185de:	2b00      	cmp	r3, #0
 80185e0:	f040 80a4 	bne.w	801872c <UART_RxISR_16BIT_FIFOEN+0x29c>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80185e4:	687b      	ldr	r3, [r7, #4]
 80185e6:	681b      	ldr	r3, [r3, #0]
 80185e8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80185ea:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80185ec:	e853 3f00 	ldrex	r3, [r3]
 80185f0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80185f2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80185f4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80185f8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80185fc:	687b      	ldr	r3, [r7, #4]
 80185fe:	681b      	ldr	r3, [r3, #0]
 8018600:	461a      	mov	r2, r3
 8018602:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8018606:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 801860a:	67fa      	str	r2, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801860c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 801860e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8018612:	e841 2300 	strex	r3, r2, [r1]
 8018616:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8018618:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801861a:	2b00      	cmp	r3, #0
 801861c:	d1e2      	bne.n	80185e4 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 801861e:	687b      	ldr	r3, [r7, #4]
 8018620:	681b      	ldr	r3, [r3, #0]
 8018622:	3308      	adds	r3, #8
 8018624:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8018626:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8018628:	e853 3f00 	ldrex	r3, [r3]
 801862c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 801862e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8018630:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8018634:	f023 0301 	bic.w	r3, r3, #1
 8018638:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 801863c:	687b      	ldr	r3, [r7, #4]
 801863e:	681b      	ldr	r3, [r3, #0]
 8018640:	3308      	adds	r3, #8
 8018642:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8018646:	66fa      	str	r2, [r7, #108]	; 0x6c
 8018648:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801864a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 801864c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 801864e:	e841 2300 	strex	r3, r2, [r1]
 8018652:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8018654:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8018656:	2b00      	cmp	r3, #0
 8018658:	d1e1      	bne.n	801861e <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 801865a:	687b      	ldr	r3, [r7, #4]
 801865c:	2220      	movs	r2, #32
 801865e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8018662:	687b      	ldr	r3, [r7, #4]
 8018664:	2200      	movs	r2, #0
 8018666:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8018668:	687b      	ldr	r3, [r7, #4]
 801866a:	2200      	movs	r2, #0
 801866c:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 801866e:	687b      	ldr	r3, [r7, #4]
 8018670:	681b      	ldr	r3, [r3, #0]
 8018672:	4a5f      	ldr	r2, [pc, #380]	; (80187f0 <UART_RxISR_16BIT_FIFOEN+0x360>)
 8018674:	4293      	cmp	r3, r2
 8018676:	d021      	beq.n	80186bc <UART_RxISR_16BIT_FIFOEN+0x22c>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8018678:	687b      	ldr	r3, [r7, #4]
 801867a:	681b      	ldr	r3, [r3, #0]
 801867c:	685b      	ldr	r3, [r3, #4]
 801867e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8018682:	2b00      	cmp	r3, #0
 8018684:	d01a      	beq.n	80186bc <UART_RxISR_16BIT_FIFOEN+0x22c>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8018686:	687b      	ldr	r3, [r7, #4]
 8018688:	681b      	ldr	r3, [r3, #0]
 801868a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801868c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801868e:	e853 3f00 	ldrex	r3, [r3]
 8018692:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8018694:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8018696:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 801869a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 801869e:	687b      	ldr	r3, [r7, #4]
 80186a0:	681b      	ldr	r3, [r3, #0]
 80186a2:	461a      	mov	r2, r3
 80186a4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80186a8:	65bb      	str	r3, [r7, #88]	; 0x58
 80186aa:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80186ac:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80186ae:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80186b0:	e841 2300 	strex	r3, r2, [r1]
 80186b4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80186b6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80186b8:	2b00      	cmp	r3, #0
 80186ba:	d1e4      	bne.n	8018686 <UART_RxISR_16BIT_FIFOEN+0x1f6>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80186bc:	687b      	ldr	r3, [r7, #4]
 80186be:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80186c0:	2b01      	cmp	r3, #1
 80186c2:	d130      	bne.n	8018726 <UART_RxISR_16BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80186c4:	687b      	ldr	r3, [r7, #4]
 80186c6:	2200      	movs	r2, #0
 80186c8:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80186ca:	687b      	ldr	r3, [r7, #4]
 80186cc:	681b      	ldr	r3, [r3, #0]
 80186ce:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80186d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80186d2:	e853 3f00 	ldrex	r3, [r3]
 80186d6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80186d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80186da:	f023 0310 	bic.w	r3, r3, #16
 80186de:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80186e2:	687b      	ldr	r3, [r7, #4]
 80186e4:	681b      	ldr	r3, [r3, #0]
 80186e6:	461a      	mov	r2, r3
 80186e8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80186ec:	647b      	str	r3, [r7, #68]	; 0x44
 80186ee:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80186f0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80186f2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80186f4:	e841 2300 	strex	r3, r2, [r1]
 80186f8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80186fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80186fc:	2b00      	cmp	r3, #0
 80186fe:	d1e4      	bne.n	80186ca <UART_RxISR_16BIT_FIFOEN+0x23a>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8018700:	687b      	ldr	r3, [r7, #4]
 8018702:	681b      	ldr	r3, [r3, #0]
 8018704:	69db      	ldr	r3, [r3, #28]
 8018706:	f003 0310 	and.w	r3, r3, #16
 801870a:	2b10      	cmp	r3, #16
 801870c:	d103      	bne.n	8018716 <UART_RxISR_16BIT_FIFOEN+0x286>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 801870e:	687b      	ldr	r3, [r7, #4]
 8018710:	681b      	ldr	r3, [r3, #0]
 8018712:	2210      	movs	r2, #16
 8018714:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8018716:	687b      	ldr	r3, [r7, #4]
 8018718:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 801871c:	4619      	mov	r1, r3
 801871e:	6878      	ldr	r0, [r7, #4]
 8018720:	f7fe fcc4 	bl	80170ac <HAL_UARTEx_RxEventCallback>
 8018724:	e002      	b.n	801872c <UART_RxISR_16BIT_FIFOEN+0x29c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8018726:	6878      	ldr	r0, [r7, #4]
 8018728:	f7e9 fc00 	bl	8001f2c <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 801872c:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 8018730:	2b00      	cmp	r3, #0
 8018732:	d006      	beq.n	8018742 <UART_RxISR_16BIT_FIFOEN+0x2b2>
 8018734:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8018738:	f003 0320 	and.w	r3, r3, #32
 801873c:	2b00      	cmp	r3, #0
 801873e:	f47f aecb 	bne.w	80184d8 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8018742:	687b      	ldr	r3, [r7, #4]
 8018744:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8018748:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 801874c:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8018750:	2b00      	cmp	r3, #0
 8018752:	d049      	beq.n	80187e8 <UART_RxISR_16BIT_FIFOEN+0x358>
 8018754:	687b      	ldr	r3, [r7, #4]
 8018756:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 801875a:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 801875e:	429a      	cmp	r2, r3
 8018760:	d242      	bcs.n	80187e8 <UART_RxISR_16BIT_FIFOEN+0x358>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8018762:	687b      	ldr	r3, [r7, #4]
 8018764:	681b      	ldr	r3, [r3, #0]
 8018766:	3308      	adds	r3, #8
 8018768:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801876a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801876c:	e853 3f00 	ldrex	r3, [r3]
 8018770:	623b      	str	r3, [r7, #32]
   return(result);
 8018772:	6a3b      	ldr	r3, [r7, #32]
 8018774:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8018778:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 801877c:	687b      	ldr	r3, [r7, #4]
 801877e:	681b      	ldr	r3, [r3, #0]
 8018780:	3308      	adds	r3, #8
 8018782:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8018786:	633a      	str	r2, [r7, #48]	; 0x30
 8018788:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801878a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801878c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801878e:	e841 2300 	strex	r3, r2, [r1]
 8018792:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8018794:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018796:	2b00      	cmp	r3, #0
 8018798:	d1e3      	bne.n	8018762 <UART_RxISR_16BIT_FIFOEN+0x2d2>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 801879a:	687b      	ldr	r3, [r7, #4]
 801879c:	4a15      	ldr	r2, [pc, #84]	; (80187f4 <UART_RxISR_16BIT_FIFOEN+0x364>)
 801879e:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80187a0:	687b      	ldr	r3, [r7, #4]
 80187a2:	681b      	ldr	r3, [r3, #0]
 80187a4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80187a6:	693b      	ldr	r3, [r7, #16]
 80187a8:	e853 3f00 	ldrex	r3, [r3]
 80187ac:	60fb      	str	r3, [r7, #12]
   return(result);
 80187ae:	68fb      	ldr	r3, [r7, #12]
 80187b0:	f043 0320 	orr.w	r3, r3, #32
 80187b4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80187b8:	687b      	ldr	r3, [r7, #4]
 80187ba:	681b      	ldr	r3, [r3, #0]
 80187bc:	461a      	mov	r2, r3
 80187be:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80187c2:	61fb      	str	r3, [r7, #28]
 80187c4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80187c6:	69b9      	ldr	r1, [r7, #24]
 80187c8:	69fa      	ldr	r2, [r7, #28]
 80187ca:	e841 2300 	strex	r3, r2, [r1]
 80187ce:	617b      	str	r3, [r7, #20]
   return(result);
 80187d0:	697b      	ldr	r3, [r7, #20]
 80187d2:	2b00      	cmp	r3, #0
 80187d4:	d1e4      	bne.n	80187a0 <UART_RxISR_16BIT_FIFOEN+0x310>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80187d6:	e007      	b.n	80187e8 <UART_RxISR_16BIT_FIFOEN+0x358>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80187d8:	687b      	ldr	r3, [r7, #4]
 80187da:	681b      	ldr	r3, [r3, #0]
 80187dc:	699a      	ldr	r2, [r3, #24]
 80187de:	687b      	ldr	r3, [r7, #4]
 80187e0:	681b      	ldr	r3, [r3, #0]
 80187e2:	f042 0208 	orr.w	r2, r2, #8
 80187e6:	619a      	str	r2, [r3, #24]
}
 80187e8:	bf00      	nop
 80187ea:	37b8      	adds	r7, #184	; 0xb8
 80187ec:	46bd      	mov	sp, r7
 80187ee:	bd80      	pop	{r7, pc}
 80187f0:	40008000 	.word	0x40008000
 80187f4:	08017f79 	.word	0x08017f79

080187f8 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80187f8:	b480      	push	{r7}
 80187fa:	b083      	sub	sp, #12
 80187fc:	af00      	add	r7, sp, #0
 80187fe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8018800:	bf00      	nop
 8018802:	370c      	adds	r7, #12
 8018804:	46bd      	mov	sp, r7
 8018806:	f85d 7b04 	ldr.w	r7, [sp], #4
 801880a:	4770      	bx	lr

0801880c <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 801880c:	b480      	push	{r7}
 801880e:	b083      	sub	sp, #12
 8018810:	af00      	add	r7, sp, #0
 8018812:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8018814:	bf00      	nop
 8018816:	370c      	adds	r7, #12
 8018818:	46bd      	mov	sp, r7
 801881a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801881e:	4770      	bx	lr

08018820 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8018820:	b480      	push	{r7}
 8018822:	b083      	sub	sp, #12
 8018824:	af00      	add	r7, sp, #0
 8018826:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8018828:	bf00      	nop
 801882a:	370c      	adds	r7, #12
 801882c:	46bd      	mov	sp, r7
 801882e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018832:	4770      	bx	lr

08018834 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8018834:	b480      	push	{r7}
 8018836:	b085      	sub	sp, #20
 8018838:	af00      	add	r7, sp, #0
 801883a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 801883c:	687b      	ldr	r3, [r7, #4]
 801883e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8018842:	2b01      	cmp	r3, #1
 8018844:	d101      	bne.n	801884a <HAL_UARTEx_DisableFifoMode+0x16>
 8018846:	2302      	movs	r3, #2
 8018848:	e027      	b.n	801889a <HAL_UARTEx_DisableFifoMode+0x66>
 801884a:	687b      	ldr	r3, [r7, #4]
 801884c:	2201      	movs	r2, #1
 801884e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8018852:	687b      	ldr	r3, [r7, #4]
 8018854:	2224      	movs	r2, #36	; 0x24
 8018856:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 801885a:	687b      	ldr	r3, [r7, #4]
 801885c:	681b      	ldr	r3, [r3, #0]
 801885e:	681b      	ldr	r3, [r3, #0]
 8018860:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8018862:	687b      	ldr	r3, [r7, #4]
 8018864:	681b      	ldr	r3, [r3, #0]
 8018866:	681a      	ldr	r2, [r3, #0]
 8018868:	687b      	ldr	r3, [r7, #4]
 801886a:	681b      	ldr	r3, [r3, #0]
 801886c:	f022 0201 	bic.w	r2, r2, #1
 8018870:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8018872:	68fb      	ldr	r3, [r7, #12]
 8018874:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8018878:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 801887a:	687b      	ldr	r3, [r7, #4]
 801887c:	2200      	movs	r2, #0
 801887e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8018880:	687b      	ldr	r3, [r7, #4]
 8018882:	681b      	ldr	r3, [r3, #0]
 8018884:	68fa      	ldr	r2, [r7, #12]
 8018886:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8018888:	687b      	ldr	r3, [r7, #4]
 801888a:	2220      	movs	r2, #32
 801888c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8018890:	687b      	ldr	r3, [r7, #4]
 8018892:	2200      	movs	r2, #0
 8018894:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8018898:	2300      	movs	r3, #0
}
 801889a:	4618      	mov	r0, r3
 801889c:	3714      	adds	r7, #20
 801889e:	46bd      	mov	sp, r7
 80188a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80188a4:	4770      	bx	lr

080188a6 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80188a6:	b580      	push	{r7, lr}
 80188a8:	b084      	sub	sp, #16
 80188aa:	af00      	add	r7, sp, #0
 80188ac:	6078      	str	r0, [r7, #4]
 80188ae:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80188b0:	687b      	ldr	r3, [r7, #4]
 80188b2:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80188b6:	2b01      	cmp	r3, #1
 80188b8:	d101      	bne.n	80188be <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80188ba:	2302      	movs	r3, #2
 80188bc:	e02d      	b.n	801891a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80188be:	687b      	ldr	r3, [r7, #4]
 80188c0:	2201      	movs	r2, #1
 80188c2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80188c6:	687b      	ldr	r3, [r7, #4]
 80188c8:	2224      	movs	r2, #36	; 0x24
 80188ca:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80188ce:	687b      	ldr	r3, [r7, #4]
 80188d0:	681b      	ldr	r3, [r3, #0]
 80188d2:	681b      	ldr	r3, [r3, #0]
 80188d4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80188d6:	687b      	ldr	r3, [r7, #4]
 80188d8:	681b      	ldr	r3, [r3, #0]
 80188da:	681a      	ldr	r2, [r3, #0]
 80188dc:	687b      	ldr	r3, [r7, #4]
 80188de:	681b      	ldr	r3, [r3, #0]
 80188e0:	f022 0201 	bic.w	r2, r2, #1
 80188e4:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80188e6:	687b      	ldr	r3, [r7, #4]
 80188e8:	681b      	ldr	r3, [r3, #0]
 80188ea:	689b      	ldr	r3, [r3, #8]
 80188ec:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80188f0:	687b      	ldr	r3, [r7, #4]
 80188f2:	681b      	ldr	r3, [r3, #0]
 80188f4:	683a      	ldr	r2, [r7, #0]
 80188f6:	430a      	orrs	r2, r1
 80188f8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80188fa:	6878      	ldr	r0, [r7, #4]
 80188fc:	f000 f850 	bl	80189a0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8018900:	687b      	ldr	r3, [r7, #4]
 8018902:	681b      	ldr	r3, [r3, #0]
 8018904:	68fa      	ldr	r2, [r7, #12]
 8018906:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8018908:	687b      	ldr	r3, [r7, #4]
 801890a:	2220      	movs	r2, #32
 801890c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8018910:	687b      	ldr	r3, [r7, #4]
 8018912:	2200      	movs	r2, #0
 8018914:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8018918:	2300      	movs	r3, #0
}
 801891a:	4618      	mov	r0, r3
 801891c:	3710      	adds	r7, #16
 801891e:	46bd      	mov	sp, r7
 8018920:	bd80      	pop	{r7, pc}

08018922 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8018922:	b580      	push	{r7, lr}
 8018924:	b084      	sub	sp, #16
 8018926:	af00      	add	r7, sp, #0
 8018928:	6078      	str	r0, [r7, #4]
 801892a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 801892c:	687b      	ldr	r3, [r7, #4]
 801892e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8018932:	2b01      	cmp	r3, #1
 8018934:	d101      	bne.n	801893a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8018936:	2302      	movs	r3, #2
 8018938:	e02d      	b.n	8018996 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 801893a:	687b      	ldr	r3, [r7, #4]
 801893c:	2201      	movs	r2, #1
 801893e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8018942:	687b      	ldr	r3, [r7, #4]
 8018944:	2224      	movs	r2, #36	; 0x24
 8018946:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 801894a:	687b      	ldr	r3, [r7, #4]
 801894c:	681b      	ldr	r3, [r3, #0]
 801894e:	681b      	ldr	r3, [r3, #0]
 8018950:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8018952:	687b      	ldr	r3, [r7, #4]
 8018954:	681b      	ldr	r3, [r3, #0]
 8018956:	681a      	ldr	r2, [r3, #0]
 8018958:	687b      	ldr	r3, [r7, #4]
 801895a:	681b      	ldr	r3, [r3, #0]
 801895c:	f022 0201 	bic.w	r2, r2, #1
 8018960:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8018962:	687b      	ldr	r3, [r7, #4]
 8018964:	681b      	ldr	r3, [r3, #0]
 8018966:	689b      	ldr	r3, [r3, #8]
 8018968:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 801896c:	687b      	ldr	r3, [r7, #4]
 801896e:	681b      	ldr	r3, [r3, #0]
 8018970:	683a      	ldr	r2, [r7, #0]
 8018972:	430a      	orrs	r2, r1
 8018974:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8018976:	6878      	ldr	r0, [r7, #4]
 8018978:	f000 f812 	bl	80189a0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 801897c:	687b      	ldr	r3, [r7, #4]
 801897e:	681b      	ldr	r3, [r3, #0]
 8018980:	68fa      	ldr	r2, [r7, #12]
 8018982:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8018984:	687b      	ldr	r3, [r7, #4]
 8018986:	2220      	movs	r2, #32
 8018988:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 801898c:	687b      	ldr	r3, [r7, #4]
 801898e:	2200      	movs	r2, #0
 8018990:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8018994:	2300      	movs	r3, #0
}
 8018996:	4618      	mov	r0, r3
 8018998:	3710      	adds	r7, #16
 801899a:	46bd      	mov	sp, r7
 801899c:	bd80      	pop	{r7, pc}
	...

080189a0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80189a0:	b480      	push	{r7}
 80189a2:	b085      	sub	sp, #20
 80189a4:	af00      	add	r7, sp, #0
 80189a6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80189a8:	687b      	ldr	r3, [r7, #4]
 80189aa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80189ac:	2b00      	cmp	r3, #0
 80189ae:	d108      	bne.n	80189c2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80189b0:	687b      	ldr	r3, [r7, #4]
 80189b2:	2201      	movs	r2, #1
 80189b4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80189b8:	687b      	ldr	r3, [r7, #4]
 80189ba:	2201      	movs	r2, #1
 80189bc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80189c0:	e031      	b.n	8018a26 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80189c2:	2308      	movs	r3, #8
 80189c4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80189c6:	2308      	movs	r3, #8
 80189c8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80189ca:	687b      	ldr	r3, [r7, #4]
 80189cc:	681b      	ldr	r3, [r3, #0]
 80189ce:	689b      	ldr	r3, [r3, #8]
 80189d0:	0e5b      	lsrs	r3, r3, #25
 80189d2:	b2db      	uxtb	r3, r3
 80189d4:	f003 0307 	and.w	r3, r3, #7
 80189d8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80189da:	687b      	ldr	r3, [r7, #4]
 80189dc:	681b      	ldr	r3, [r3, #0]
 80189de:	689b      	ldr	r3, [r3, #8]
 80189e0:	0f5b      	lsrs	r3, r3, #29
 80189e2:	b2db      	uxtb	r3, r3
 80189e4:	f003 0307 	and.w	r3, r3, #7
 80189e8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80189ea:	7bbb      	ldrb	r3, [r7, #14]
 80189ec:	7b3a      	ldrb	r2, [r7, #12]
 80189ee:	4911      	ldr	r1, [pc, #68]	; (8018a34 <UARTEx_SetNbDataToProcess+0x94>)
 80189f0:	5c8a      	ldrb	r2, [r1, r2]
 80189f2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80189f6:	7b3a      	ldrb	r2, [r7, #12]
 80189f8:	490f      	ldr	r1, [pc, #60]	; (8018a38 <UARTEx_SetNbDataToProcess+0x98>)
 80189fa:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80189fc:	fb93 f3f2 	sdiv	r3, r3, r2
 8018a00:	b29a      	uxth	r2, r3
 8018a02:	687b      	ldr	r3, [r7, #4]
 8018a04:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8018a08:	7bfb      	ldrb	r3, [r7, #15]
 8018a0a:	7b7a      	ldrb	r2, [r7, #13]
 8018a0c:	4909      	ldr	r1, [pc, #36]	; (8018a34 <UARTEx_SetNbDataToProcess+0x94>)
 8018a0e:	5c8a      	ldrb	r2, [r1, r2]
 8018a10:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8018a14:	7b7a      	ldrb	r2, [r7, #13]
 8018a16:	4908      	ldr	r1, [pc, #32]	; (8018a38 <UARTEx_SetNbDataToProcess+0x98>)
 8018a18:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8018a1a:	fb93 f3f2 	sdiv	r3, r3, r2
 8018a1e:	b29a      	uxth	r2, r3
 8018a20:	687b      	ldr	r3, [r7, #4]
 8018a22:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8018a26:	bf00      	nop
 8018a28:	3714      	adds	r7, #20
 8018a2a:	46bd      	mov	sp, r7
 8018a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018a30:	4770      	bx	lr
 8018a32:	bf00      	nop
 8018a34:	0801f2b4 	.word	0x0801f2b4
 8018a38:	0801f2bc 	.word	0x0801f2bc

08018a3c <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 8018a3c:	b480      	push	{r7}
 8018a3e:	b08b      	sub	sp, #44	; 0x2c
 8018a40:	af00      	add	r7, sp, #0
 8018a42:	60f8      	str	r0, [r7, #12]
 8018a44:	60b9      	str	r1, [r7, #8]
 8018a46:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8018a48:	68fb      	ldr	r3, [r7, #12]
 8018a4a:	681a      	ldr	r2, [r3, #0]
 8018a4c:	68bb      	ldr	r3, [r7, #8]
 8018a4e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8018a50:	697b      	ldr	r3, [r7, #20]
 8018a52:	fa93 f3a3 	rbit	r3, r3
 8018a56:	613b      	str	r3, [r7, #16]
  return result;
 8018a58:	693b      	ldr	r3, [r7, #16]
 8018a5a:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8018a5c:	69bb      	ldr	r3, [r7, #24]
 8018a5e:	2b00      	cmp	r3, #0
 8018a60:	d101      	bne.n	8018a66 <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 8018a62:	2320      	movs	r3, #32
 8018a64:	e003      	b.n	8018a6e <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 8018a66:	69bb      	ldr	r3, [r7, #24]
 8018a68:	fab3 f383 	clz	r3, r3
 8018a6c:	b2db      	uxtb	r3, r3
 8018a6e:	005b      	lsls	r3, r3, #1
 8018a70:	2103      	movs	r1, #3
 8018a72:	fa01 f303 	lsl.w	r3, r1, r3
 8018a76:	43db      	mvns	r3, r3
 8018a78:	401a      	ands	r2, r3
 8018a7a:	68bb      	ldr	r3, [r7, #8]
 8018a7c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8018a7e:	6a3b      	ldr	r3, [r7, #32]
 8018a80:	fa93 f3a3 	rbit	r3, r3
 8018a84:	61fb      	str	r3, [r7, #28]
  return result;
 8018a86:	69fb      	ldr	r3, [r7, #28]
 8018a88:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8018a8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018a8c:	2b00      	cmp	r3, #0
 8018a8e:	d101      	bne.n	8018a94 <LL_GPIO_SetPinMode+0x58>
    return 32U;
 8018a90:	2320      	movs	r3, #32
 8018a92:	e003      	b.n	8018a9c <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 8018a94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018a96:	fab3 f383 	clz	r3, r3
 8018a9a:	b2db      	uxtb	r3, r3
 8018a9c:	005b      	lsls	r3, r3, #1
 8018a9e:	6879      	ldr	r1, [r7, #4]
 8018aa0:	fa01 f303 	lsl.w	r3, r1, r3
 8018aa4:	431a      	orrs	r2, r3
 8018aa6:	68fb      	ldr	r3, [r7, #12]
 8018aa8:	601a      	str	r2, [r3, #0]
}
 8018aaa:	bf00      	nop
 8018aac:	372c      	adds	r7, #44	; 0x2c
 8018aae:	46bd      	mov	sp, r7
 8018ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018ab4:	4770      	bx	lr

08018ab6 <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 8018ab6:	b480      	push	{r7}
 8018ab8:	b085      	sub	sp, #20
 8018aba:	af00      	add	r7, sp, #0
 8018abc:	60f8      	str	r0, [r7, #12]
 8018abe:	60b9      	str	r1, [r7, #8]
 8018ac0:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8018ac2:	68fb      	ldr	r3, [r7, #12]
 8018ac4:	685a      	ldr	r2, [r3, #4]
 8018ac6:	68bb      	ldr	r3, [r7, #8]
 8018ac8:	43db      	mvns	r3, r3
 8018aca:	401a      	ands	r2, r3
 8018acc:	68bb      	ldr	r3, [r7, #8]
 8018ace:	6879      	ldr	r1, [r7, #4]
 8018ad0:	fb01 f303 	mul.w	r3, r1, r3
 8018ad4:	431a      	orrs	r2, r3
 8018ad6:	68fb      	ldr	r3, [r7, #12]
 8018ad8:	605a      	str	r2, [r3, #4]
}
 8018ada:	bf00      	nop
 8018adc:	3714      	adds	r7, #20
 8018ade:	46bd      	mov	sp, r7
 8018ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018ae4:	4770      	bx	lr

08018ae6 <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  *         @arg @ref LL_GPIO_SPEED_FREQ_VERY_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 8018ae6:	b480      	push	{r7}
 8018ae8:	b08b      	sub	sp, #44	; 0x2c
 8018aea:	af00      	add	r7, sp, #0
 8018aec:	60f8      	str	r0, [r7, #12]
 8018aee:	60b9      	str	r1, [r7, #8]
 8018af0:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 8018af2:	68fb      	ldr	r3, [r7, #12]
 8018af4:	689a      	ldr	r2, [r3, #8]
 8018af6:	68bb      	ldr	r3, [r7, #8]
 8018af8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8018afa:	697b      	ldr	r3, [r7, #20]
 8018afc:	fa93 f3a3 	rbit	r3, r3
 8018b00:	613b      	str	r3, [r7, #16]
  return result;
 8018b02:	693b      	ldr	r3, [r7, #16]
 8018b04:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8018b06:	69bb      	ldr	r3, [r7, #24]
 8018b08:	2b00      	cmp	r3, #0
 8018b0a:	d101      	bne.n	8018b10 <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 8018b0c:	2320      	movs	r3, #32
 8018b0e:	e003      	b.n	8018b18 <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 8018b10:	69bb      	ldr	r3, [r7, #24]
 8018b12:	fab3 f383 	clz	r3, r3
 8018b16:	b2db      	uxtb	r3, r3
 8018b18:	005b      	lsls	r3, r3, #1
 8018b1a:	2103      	movs	r1, #3
 8018b1c:	fa01 f303 	lsl.w	r3, r1, r3
 8018b20:	43db      	mvns	r3, r3
 8018b22:	401a      	ands	r2, r3
 8018b24:	68bb      	ldr	r3, [r7, #8]
 8018b26:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8018b28:	6a3b      	ldr	r3, [r7, #32]
 8018b2a:	fa93 f3a3 	rbit	r3, r3
 8018b2e:	61fb      	str	r3, [r7, #28]
  return result;
 8018b30:	69fb      	ldr	r3, [r7, #28]
 8018b32:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8018b34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018b36:	2b00      	cmp	r3, #0
 8018b38:	d101      	bne.n	8018b3e <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 8018b3a:	2320      	movs	r3, #32
 8018b3c:	e003      	b.n	8018b46 <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 8018b3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018b40:	fab3 f383 	clz	r3, r3
 8018b44:	b2db      	uxtb	r3, r3
 8018b46:	005b      	lsls	r3, r3, #1
 8018b48:	6879      	ldr	r1, [r7, #4]
 8018b4a:	fa01 f303 	lsl.w	r3, r1, r3
 8018b4e:	431a      	orrs	r2, r3
 8018b50:	68fb      	ldr	r3, [r7, #12]
 8018b52:	609a      	str	r2, [r3, #8]
             (Speed << (POSITION_VAL(Pin) * 2U)));
}
 8018b54:	bf00      	nop
 8018b56:	372c      	adds	r7, #44	; 0x2c
 8018b58:	46bd      	mov	sp, r7
 8018b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018b5e:	4770      	bx	lr

08018b60 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 8018b60:	b480      	push	{r7}
 8018b62:	b08b      	sub	sp, #44	; 0x2c
 8018b64:	af00      	add	r7, sp, #0
 8018b66:	60f8      	str	r0, [r7, #12]
 8018b68:	60b9      	str	r1, [r7, #8]
 8018b6a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8018b6c:	68fb      	ldr	r3, [r7, #12]
 8018b6e:	68da      	ldr	r2, [r3, #12]
 8018b70:	68bb      	ldr	r3, [r7, #8]
 8018b72:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8018b74:	697b      	ldr	r3, [r7, #20]
 8018b76:	fa93 f3a3 	rbit	r3, r3
 8018b7a:	613b      	str	r3, [r7, #16]
  return result;
 8018b7c:	693b      	ldr	r3, [r7, #16]
 8018b7e:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8018b80:	69bb      	ldr	r3, [r7, #24]
 8018b82:	2b00      	cmp	r3, #0
 8018b84:	d101      	bne.n	8018b8a <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 8018b86:	2320      	movs	r3, #32
 8018b88:	e003      	b.n	8018b92 <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 8018b8a:	69bb      	ldr	r3, [r7, #24]
 8018b8c:	fab3 f383 	clz	r3, r3
 8018b90:	b2db      	uxtb	r3, r3
 8018b92:	005b      	lsls	r3, r3, #1
 8018b94:	2103      	movs	r1, #3
 8018b96:	fa01 f303 	lsl.w	r3, r1, r3
 8018b9a:	43db      	mvns	r3, r3
 8018b9c:	401a      	ands	r2, r3
 8018b9e:	68bb      	ldr	r3, [r7, #8]
 8018ba0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8018ba2:	6a3b      	ldr	r3, [r7, #32]
 8018ba4:	fa93 f3a3 	rbit	r3, r3
 8018ba8:	61fb      	str	r3, [r7, #28]
  return result;
 8018baa:	69fb      	ldr	r3, [r7, #28]
 8018bac:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8018bae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018bb0:	2b00      	cmp	r3, #0
 8018bb2:	d101      	bne.n	8018bb8 <LL_GPIO_SetPinPull+0x58>
    return 32U;
 8018bb4:	2320      	movs	r3, #32
 8018bb6:	e003      	b.n	8018bc0 <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 8018bb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018bba:	fab3 f383 	clz	r3, r3
 8018bbe:	b2db      	uxtb	r3, r3
 8018bc0:	005b      	lsls	r3, r3, #1
 8018bc2:	6879      	ldr	r1, [r7, #4]
 8018bc4:	fa01 f303 	lsl.w	r3, r1, r3
 8018bc8:	431a      	orrs	r2, r3
 8018bca:	68fb      	ldr	r3, [r7, #12]
 8018bcc:	60da      	str	r2, [r3, #12]
}
 8018bce:	bf00      	nop
 8018bd0:	372c      	adds	r7, #44	; 0x2c
 8018bd2:	46bd      	mov	sp, r7
 8018bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018bd8:	4770      	bx	lr

08018bda <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8018bda:	b480      	push	{r7}
 8018bdc:	b08b      	sub	sp, #44	; 0x2c
 8018bde:	af00      	add	r7, sp, #0
 8018be0:	60f8      	str	r0, [r7, #12]
 8018be2:	60b9      	str	r1, [r7, #8]
 8018be4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 8018be6:	68fb      	ldr	r3, [r7, #12]
 8018be8:	6a1a      	ldr	r2, [r3, #32]
 8018bea:	68bb      	ldr	r3, [r7, #8]
 8018bec:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8018bee:	697b      	ldr	r3, [r7, #20]
 8018bf0:	fa93 f3a3 	rbit	r3, r3
 8018bf4:	613b      	str	r3, [r7, #16]
  return result;
 8018bf6:	693b      	ldr	r3, [r7, #16]
 8018bf8:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8018bfa:	69bb      	ldr	r3, [r7, #24]
 8018bfc:	2b00      	cmp	r3, #0
 8018bfe:	d101      	bne.n	8018c04 <LL_GPIO_SetAFPin_0_7+0x2a>
    return 32U;
 8018c00:	2320      	movs	r3, #32
 8018c02:	e003      	b.n	8018c0c <LL_GPIO_SetAFPin_0_7+0x32>
  return __builtin_clz(value);
 8018c04:	69bb      	ldr	r3, [r7, #24]
 8018c06:	fab3 f383 	clz	r3, r3
 8018c0a:	b2db      	uxtb	r3, r3
 8018c0c:	009b      	lsls	r3, r3, #2
 8018c0e:	210f      	movs	r1, #15
 8018c10:	fa01 f303 	lsl.w	r3, r1, r3
 8018c14:	43db      	mvns	r3, r3
 8018c16:	401a      	ands	r2, r3
 8018c18:	68bb      	ldr	r3, [r7, #8]
 8018c1a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8018c1c:	6a3b      	ldr	r3, [r7, #32]
 8018c1e:	fa93 f3a3 	rbit	r3, r3
 8018c22:	61fb      	str	r3, [r7, #28]
  return result;
 8018c24:	69fb      	ldr	r3, [r7, #28]
 8018c26:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8018c28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018c2a:	2b00      	cmp	r3, #0
 8018c2c:	d101      	bne.n	8018c32 <LL_GPIO_SetAFPin_0_7+0x58>
    return 32U;
 8018c2e:	2320      	movs	r3, #32
 8018c30:	e003      	b.n	8018c3a <LL_GPIO_SetAFPin_0_7+0x60>
  return __builtin_clz(value);
 8018c32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018c34:	fab3 f383 	clz	r3, r3
 8018c38:	b2db      	uxtb	r3, r3
 8018c3a:	009b      	lsls	r3, r3, #2
 8018c3c:	6879      	ldr	r1, [r7, #4]
 8018c3e:	fa01 f303 	lsl.w	r3, r1, r3
 8018c42:	431a      	orrs	r2, r3
 8018c44:	68fb      	ldr	r3, [r7, #12]
 8018c46:	621a      	str	r2, [r3, #32]
             (Alternate << (POSITION_VAL(Pin) * 4U)));
}
 8018c48:	bf00      	nop
 8018c4a:	372c      	adds	r7, #44	; 0x2c
 8018c4c:	46bd      	mov	sp, r7
 8018c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018c52:	4770      	bx	lr

08018c54 <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8018c54:	b480      	push	{r7}
 8018c56:	b08b      	sub	sp, #44	; 0x2c
 8018c58:	af00      	add	r7, sp, #0
 8018c5a:	60f8      	str	r0, [r7, #12]
 8018c5c:	60b9      	str	r1, [r7, #8]
 8018c5e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8018c60:	68fb      	ldr	r3, [r7, #12]
 8018c62:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8018c64:	68bb      	ldr	r3, [r7, #8]
 8018c66:	0a1b      	lsrs	r3, r3, #8
 8018c68:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8018c6a:	697b      	ldr	r3, [r7, #20]
 8018c6c:	fa93 f3a3 	rbit	r3, r3
 8018c70:	613b      	str	r3, [r7, #16]
  return result;
 8018c72:	693b      	ldr	r3, [r7, #16]
 8018c74:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8018c76:	69bb      	ldr	r3, [r7, #24]
 8018c78:	2b00      	cmp	r3, #0
 8018c7a:	d101      	bne.n	8018c80 <LL_GPIO_SetAFPin_8_15+0x2c>
    return 32U;
 8018c7c:	2320      	movs	r3, #32
 8018c7e:	e003      	b.n	8018c88 <LL_GPIO_SetAFPin_8_15+0x34>
  return __builtin_clz(value);
 8018c80:	69bb      	ldr	r3, [r7, #24]
 8018c82:	fab3 f383 	clz	r3, r3
 8018c86:	b2db      	uxtb	r3, r3
 8018c88:	009b      	lsls	r3, r3, #2
 8018c8a:	210f      	movs	r1, #15
 8018c8c:	fa01 f303 	lsl.w	r3, r1, r3
 8018c90:	43db      	mvns	r3, r3
 8018c92:	401a      	ands	r2, r3
 8018c94:	68bb      	ldr	r3, [r7, #8]
 8018c96:	0a1b      	lsrs	r3, r3, #8
 8018c98:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8018c9a:	6a3b      	ldr	r3, [r7, #32]
 8018c9c:	fa93 f3a3 	rbit	r3, r3
 8018ca0:	61fb      	str	r3, [r7, #28]
  return result;
 8018ca2:	69fb      	ldr	r3, [r7, #28]
 8018ca4:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8018ca6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018ca8:	2b00      	cmp	r3, #0
 8018caa:	d101      	bne.n	8018cb0 <LL_GPIO_SetAFPin_8_15+0x5c>
    return 32U;
 8018cac:	2320      	movs	r3, #32
 8018cae:	e003      	b.n	8018cb8 <LL_GPIO_SetAFPin_8_15+0x64>
  return __builtin_clz(value);
 8018cb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018cb2:	fab3 f383 	clz	r3, r3
 8018cb6:	b2db      	uxtb	r3, r3
 8018cb8:	009b      	lsls	r3, r3, #2
 8018cba:	6879      	ldr	r1, [r7, #4]
 8018cbc:	fa01 f303 	lsl.w	r3, r1, r3
 8018cc0:	431a      	orrs	r2, r3
 8018cc2:	68fb      	ldr	r3, [r7, #12]
 8018cc4:	625a      	str	r2, [r3, #36]	; 0x24
             (Alternate << (POSITION_VAL(Pin >> 8U) * 4U)));
}
 8018cc6:	bf00      	nop
 8018cc8:	372c      	adds	r7, #44	; 0x2c
 8018cca:	46bd      	mov	sp, r7
 8018ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018cd0:	4770      	bx	lr

08018cd2 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8018cd2:	b580      	push	{r7, lr}
 8018cd4:	b088      	sub	sp, #32
 8018cd6:	af00      	add	r7, sp, #0
 8018cd8:	6078      	str	r0, [r7, #4]
 8018cda:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8018cdc:	683b      	ldr	r3, [r7, #0]
 8018cde:	681b      	ldr	r3, [r3, #0]
 8018ce0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8018ce2:	693b      	ldr	r3, [r7, #16]
 8018ce4:	fa93 f3a3 	rbit	r3, r3
 8018ce8:	60fb      	str	r3, [r7, #12]
  return result;
 8018cea:	68fb      	ldr	r3, [r7, #12]
 8018cec:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8018cee:	697b      	ldr	r3, [r7, #20]
 8018cf0:	2b00      	cmp	r3, #0
 8018cf2:	d101      	bne.n	8018cf8 <LL_GPIO_Init+0x26>
    return 32U;
 8018cf4:	2320      	movs	r3, #32
 8018cf6:	e003      	b.n	8018d00 <LL_GPIO_Init+0x2e>
  return __builtin_clz(value);
 8018cf8:	697b      	ldr	r3, [r7, #20]
 8018cfa:	fab3 f383 	clz	r3, r3
 8018cfe:	b2db      	uxtb	r3, r3
 8018d00:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8018d02:	e047      	b.n	8018d94 <LL_GPIO_Init+0xc2>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (1UL << pinpos);
 8018d04:	683b      	ldr	r3, [r7, #0]
 8018d06:	681a      	ldr	r2, [r3, #0]
 8018d08:	2101      	movs	r1, #1
 8018d0a:	69fb      	ldr	r3, [r7, #28]
 8018d0c:	fa01 f303 	lsl.w	r3, r1, r3
 8018d10:	4013      	ands	r3, r2
 8018d12:	61bb      	str	r3, [r7, #24]

    if (currentpin != 0U)
 8018d14:	69bb      	ldr	r3, [r7, #24]
 8018d16:	2b00      	cmp	r3, #0
 8018d18:	d039      	beq.n	8018d8e <LL_GPIO_Init+0xbc>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8018d1a:	683b      	ldr	r3, [r7, #0]
 8018d1c:	685b      	ldr	r3, [r3, #4]
 8018d1e:	2b01      	cmp	r3, #1
 8018d20:	d003      	beq.n	8018d2a <LL_GPIO_Init+0x58>
 8018d22:	683b      	ldr	r3, [r7, #0]
 8018d24:	685b      	ldr	r3, [r3, #4]
 8018d26:	2b02      	cmp	r3, #2
 8018d28:	d10d      	bne.n	8018d46 <LL_GPIO_Init+0x74>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8018d2a:	683b      	ldr	r3, [r7, #0]
 8018d2c:	689b      	ldr	r3, [r3, #8]
 8018d2e:	461a      	mov	r2, r3
 8018d30:	69b9      	ldr	r1, [r7, #24]
 8018d32:	6878      	ldr	r0, [r7, #4]
 8018d34:	f7ff fed7 	bl	8018ae6 <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 8018d38:	683b      	ldr	r3, [r7, #0]
 8018d3a:	68db      	ldr	r3, [r3, #12]
 8018d3c:	461a      	mov	r2, r3
 8018d3e:	69b9      	ldr	r1, [r7, #24]
 8018d40:	6878      	ldr	r0, [r7, #4]
 8018d42:	f7ff feb8 	bl	8018ab6 <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8018d46:	683b      	ldr	r3, [r7, #0]
 8018d48:	691b      	ldr	r3, [r3, #16]
 8018d4a:	461a      	mov	r2, r3
 8018d4c:	69b9      	ldr	r1, [r7, #24]
 8018d4e:	6878      	ldr	r0, [r7, #4]
 8018d50:	f7ff ff06 	bl	8018b60 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8018d54:	683b      	ldr	r3, [r7, #0]
 8018d56:	685b      	ldr	r3, [r3, #4]
 8018d58:	2b02      	cmp	r3, #2
 8018d5a:	d111      	bne.n	8018d80 <LL_GPIO_Init+0xae>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Alternate function configuration */
        if (currentpin < LL_GPIO_PIN_8)
 8018d5c:	69bb      	ldr	r3, [r7, #24]
 8018d5e:	2bff      	cmp	r3, #255	; 0xff
 8018d60:	d807      	bhi.n	8018d72 <LL_GPIO_Init+0xa0>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8018d62:	683b      	ldr	r3, [r7, #0]
 8018d64:	695b      	ldr	r3, [r3, #20]
 8018d66:	461a      	mov	r2, r3
 8018d68:	69b9      	ldr	r1, [r7, #24]
 8018d6a:	6878      	ldr	r0, [r7, #4]
 8018d6c:	f7ff ff35 	bl	8018bda <LL_GPIO_SetAFPin_0_7>
 8018d70:	e006      	b.n	8018d80 <LL_GPIO_Init+0xae>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8018d72:	683b      	ldr	r3, [r7, #0]
 8018d74:	695b      	ldr	r3, [r3, #20]
 8018d76:	461a      	mov	r2, r3
 8018d78:	69b9      	ldr	r1, [r7, #24]
 8018d7a:	6878      	ldr	r0, [r7, #4]
 8018d7c:	f7ff ff6a 	bl	8018c54 <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8018d80:	683b      	ldr	r3, [r7, #0]
 8018d82:	685b      	ldr	r3, [r3, #4]
 8018d84:	461a      	mov	r2, r3
 8018d86:	69b9      	ldr	r1, [r7, #24]
 8018d88:	6878      	ldr	r0, [r7, #4]
 8018d8a:	f7ff fe57 	bl	8018a3c <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8018d8e:	69fb      	ldr	r3, [r7, #28]
 8018d90:	3301      	adds	r3, #1
 8018d92:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8018d94:	683b      	ldr	r3, [r7, #0]
 8018d96:	681a      	ldr	r2, [r3, #0]
 8018d98:	69fb      	ldr	r3, [r7, #28]
 8018d9a:	fa22 f303 	lsr.w	r3, r2, r3
 8018d9e:	2b00      	cmp	r3, #0
 8018da0:	d1b0      	bne.n	8018d04 <LL_GPIO_Init+0x32>
  }

  return (SUCCESS);
 8018da2:	2300      	movs	r3, #0
}
 8018da4:	4618      	mov	r0, r3
 8018da6:	3720      	adds	r7, #32
 8018da8:	46bd      	mov	sp, r7
 8018daa:	bd80      	pop	{r7, pc}

08018dac <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8018dac:	b480      	push	{r7}
 8018dae:	b085      	sub	sp, #20
 8018db0:	af00      	add	r7, sp, #0
 8018db2:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8018db4:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8018db8:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8018dba:	687b      	ldr	r3, [r7, #4]
 8018dbc:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8018dc0:	b29a      	uxth	r2, r3
 8018dc2:	68fb      	ldr	r3, [r7, #12]
 8018dc4:	b29b      	uxth	r3, r3
 8018dc6:	43db      	mvns	r3, r3
 8018dc8:	b29b      	uxth	r3, r3
 8018dca:	4013      	ands	r3, r2
 8018dcc:	b29a      	uxth	r2, r3
 8018dce:	687b      	ldr	r3, [r7, #4]
 8018dd0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8018dd4:	2300      	movs	r3, #0
}
 8018dd6:	4618      	mov	r0, r3
 8018dd8:	3714      	adds	r7, #20
 8018dda:	46bd      	mov	sp, r7
 8018ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018de0:	4770      	bx	lr

08018de2 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8018de2:	b084      	sub	sp, #16
 8018de4:	b480      	push	{r7}
 8018de6:	b083      	sub	sp, #12
 8018de8:	af00      	add	r7, sp, #0
 8018dea:	6078      	str	r0, [r7, #4]
 8018dec:	f107 0014 	add.w	r0, r7, #20
 8018df0:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8018df4:	687b      	ldr	r3, [r7, #4]
 8018df6:	2201      	movs	r2, #1
 8018df8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8018dfc:	687b      	ldr	r3, [r7, #4]
 8018dfe:	2200      	movs	r2, #0
 8018e00:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8018e04:	687b      	ldr	r3, [r7, #4]
 8018e06:	2200      	movs	r2, #0
 8018e08:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8018e0c:	687b      	ldr	r3, [r7, #4]
 8018e0e:	2200      	movs	r2, #0
 8018e10:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8018e14:	2300      	movs	r3, #0
}
 8018e16:	4618      	mov	r0, r3
 8018e18:	370c      	adds	r7, #12
 8018e1a:	46bd      	mov	sp, r7
 8018e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018e20:	b004      	add	sp, #16
 8018e22:	4770      	bx	lr

08018e24 <__NVIC_SetPriority>:
{
 8018e24:	b480      	push	{r7}
 8018e26:	b083      	sub	sp, #12
 8018e28:	af00      	add	r7, sp, #0
 8018e2a:	4603      	mov	r3, r0
 8018e2c:	6039      	str	r1, [r7, #0]
 8018e2e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8018e30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8018e34:	2b00      	cmp	r3, #0
 8018e36:	db0a      	blt.n	8018e4e <__NVIC_SetPriority+0x2a>
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8018e38:	683b      	ldr	r3, [r7, #0]
 8018e3a:	b2da      	uxtb	r2, r3
 8018e3c:	490c      	ldr	r1, [pc, #48]	; (8018e70 <__NVIC_SetPriority+0x4c>)
 8018e3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8018e42:	0152      	lsls	r2, r2, #5
 8018e44:	b2d2      	uxtb	r2, r2
 8018e46:	440b      	add	r3, r1
 8018e48:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8018e4c:	e00a      	b.n	8018e64 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8018e4e:	683b      	ldr	r3, [r7, #0]
 8018e50:	b2da      	uxtb	r2, r3
 8018e52:	4908      	ldr	r1, [pc, #32]	; (8018e74 <__NVIC_SetPriority+0x50>)
 8018e54:	79fb      	ldrb	r3, [r7, #7]
 8018e56:	f003 030f 	and.w	r3, r3, #15
 8018e5a:	3b04      	subs	r3, #4
 8018e5c:	0152      	lsls	r2, r2, #5
 8018e5e:	b2d2      	uxtb	r2, r2
 8018e60:	440b      	add	r3, r1
 8018e62:	761a      	strb	r2, [r3, #24]
}
 8018e64:	bf00      	nop
 8018e66:	370c      	adds	r7, #12
 8018e68:	46bd      	mov	sp, r7
 8018e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018e6e:	4770      	bx	lr
 8018e70:	e000e100 	.word	0xe000e100
 8018e74:	e000ed00 	.word	0xe000ed00

08018e78 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8018e78:	b580      	push	{r7, lr}
 8018e7a:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8018e7c:	4b05      	ldr	r3, [pc, #20]	; (8018e94 <SysTick_Handler+0x1c>)
 8018e7e:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8018e80:	f001 fcbc 	bl	801a7fc <xTaskGetSchedulerState>
 8018e84:	4603      	mov	r3, r0
 8018e86:	2b01      	cmp	r3, #1
 8018e88:	d001      	beq.n	8018e8e <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8018e8a:	f002 f911 	bl	801b0b0 <xPortSysTickHandler>
  }
}
 8018e8e:	bf00      	nop
 8018e90:	bd80      	pop	{r7, pc}
 8018e92:	bf00      	nop
 8018e94:	e000e010 	.word	0xe000e010

08018e98 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8018e98:	b580      	push	{r7, lr}
 8018e9a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8018e9c:	2100      	movs	r1, #0
 8018e9e:	f06f 0004 	mvn.w	r0, #4
 8018ea2:	f7ff ffbf 	bl	8018e24 <__NVIC_SetPriority>
#endif
}
 8018ea6:	bf00      	nop
 8018ea8:	bd80      	pop	{r7, pc}
	...

08018eac <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8018eac:	b480      	push	{r7}
 8018eae:	b083      	sub	sp, #12
 8018eb0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8018eb2:	f3ef 8305 	mrs	r3, IPSR
 8018eb6:	603b      	str	r3, [r7, #0]
  return(result);
 8018eb8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8018eba:	2b00      	cmp	r3, #0
 8018ebc:	d003      	beq.n	8018ec6 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8018ebe:	f06f 0305 	mvn.w	r3, #5
 8018ec2:	607b      	str	r3, [r7, #4]
 8018ec4:	e00c      	b.n	8018ee0 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8018ec6:	4b0a      	ldr	r3, [pc, #40]	; (8018ef0 <osKernelInitialize+0x44>)
 8018ec8:	681b      	ldr	r3, [r3, #0]
 8018eca:	2b00      	cmp	r3, #0
 8018ecc:	d105      	bne.n	8018eda <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8018ece:	4b08      	ldr	r3, [pc, #32]	; (8018ef0 <osKernelInitialize+0x44>)
 8018ed0:	2201      	movs	r2, #1
 8018ed2:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8018ed4:	2300      	movs	r3, #0
 8018ed6:	607b      	str	r3, [r7, #4]
 8018ed8:	e002      	b.n	8018ee0 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8018eda:	f04f 33ff 	mov.w	r3, #4294967295
 8018ede:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8018ee0:	687b      	ldr	r3, [r7, #4]
}
 8018ee2:	4618      	mov	r0, r3
 8018ee4:	370c      	adds	r7, #12
 8018ee6:	46bd      	mov	sp, r7
 8018ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018eec:	4770      	bx	lr
 8018eee:	bf00      	nop
 8018ef0:	20000be0 	.word	0x20000be0

08018ef4 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8018ef4:	b580      	push	{r7, lr}
 8018ef6:	b082      	sub	sp, #8
 8018ef8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8018efa:	f3ef 8305 	mrs	r3, IPSR
 8018efe:	603b      	str	r3, [r7, #0]
  return(result);
 8018f00:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8018f02:	2b00      	cmp	r3, #0
 8018f04:	d003      	beq.n	8018f0e <osKernelStart+0x1a>
    stat = osErrorISR;
 8018f06:	f06f 0305 	mvn.w	r3, #5
 8018f0a:	607b      	str	r3, [r7, #4]
 8018f0c:	e010      	b.n	8018f30 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8018f0e:	4b0b      	ldr	r3, [pc, #44]	; (8018f3c <osKernelStart+0x48>)
 8018f10:	681b      	ldr	r3, [r3, #0]
 8018f12:	2b01      	cmp	r3, #1
 8018f14:	d109      	bne.n	8018f2a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8018f16:	f7ff ffbf 	bl	8018e98 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8018f1a:	4b08      	ldr	r3, [pc, #32]	; (8018f3c <osKernelStart+0x48>)
 8018f1c:	2202      	movs	r2, #2
 8018f1e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8018f20:	f001 f88e 	bl	801a040 <vTaskStartScheduler>
      stat = osOK;
 8018f24:	2300      	movs	r3, #0
 8018f26:	607b      	str	r3, [r7, #4]
 8018f28:	e002      	b.n	8018f30 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8018f2a:	f04f 33ff 	mov.w	r3, #4294967295
 8018f2e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8018f30:	687b      	ldr	r3, [r7, #4]
}
 8018f32:	4618      	mov	r0, r3
 8018f34:	3708      	adds	r7, #8
 8018f36:	46bd      	mov	sp, r7
 8018f38:	bd80      	pop	{r7, pc}
 8018f3a:	bf00      	nop
 8018f3c:	20000be0 	.word	0x20000be0

08018f40 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8018f40:	b580      	push	{r7, lr}
 8018f42:	b08e      	sub	sp, #56	; 0x38
 8018f44:	af04      	add	r7, sp, #16
 8018f46:	60f8      	str	r0, [r7, #12]
 8018f48:	60b9      	str	r1, [r7, #8]
 8018f4a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8018f4c:	2300      	movs	r3, #0
 8018f4e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8018f50:	f3ef 8305 	mrs	r3, IPSR
 8018f54:	617b      	str	r3, [r7, #20]
  return(result);
 8018f56:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8018f58:	2b00      	cmp	r3, #0
 8018f5a:	d17e      	bne.n	801905a <osThreadNew+0x11a>
 8018f5c:	68fb      	ldr	r3, [r7, #12]
 8018f5e:	2b00      	cmp	r3, #0
 8018f60:	d07b      	beq.n	801905a <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8018f62:	2380      	movs	r3, #128	; 0x80
 8018f64:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8018f66:	2318      	movs	r3, #24
 8018f68:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8018f6a:	2300      	movs	r3, #0
 8018f6c:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8018f6e:	f04f 33ff 	mov.w	r3, #4294967295
 8018f72:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8018f74:	687b      	ldr	r3, [r7, #4]
 8018f76:	2b00      	cmp	r3, #0
 8018f78:	d045      	beq.n	8019006 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8018f7a:	687b      	ldr	r3, [r7, #4]
 8018f7c:	681b      	ldr	r3, [r3, #0]
 8018f7e:	2b00      	cmp	r3, #0
 8018f80:	d002      	beq.n	8018f88 <osThreadNew+0x48>
        name = attr->name;
 8018f82:	687b      	ldr	r3, [r7, #4]
 8018f84:	681b      	ldr	r3, [r3, #0]
 8018f86:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8018f88:	687b      	ldr	r3, [r7, #4]
 8018f8a:	699b      	ldr	r3, [r3, #24]
 8018f8c:	2b00      	cmp	r3, #0
 8018f8e:	d002      	beq.n	8018f96 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8018f90:	687b      	ldr	r3, [r7, #4]
 8018f92:	699b      	ldr	r3, [r3, #24]
 8018f94:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8018f96:	69fb      	ldr	r3, [r7, #28]
 8018f98:	2b00      	cmp	r3, #0
 8018f9a:	d008      	beq.n	8018fae <osThreadNew+0x6e>
 8018f9c:	69fb      	ldr	r3, [r7, #28]
 8018f9e:	2b38      	cmp	r3, #56	; 0x38
 8018fa0:	d805      	bhi.n	8018fae <osThreadNew+0x6e>
 8018fa2:	687b      	ldr	r3, [r7, #4]
 8018fa4:	685b      	ldr	r3, [r3, #4]
 8018fa6:	f003 0301 	and.w	r3, r3, #1
 8018faa:	2b00      	cmp	r3, #0
 8018fac:	d001      	beq.n	8018fb2 <osThreadNew+0x72>
        return (NULL);
 8018fae:	2300      	movs	r3, #0
 8018fb0:	e054      	b.n	801905c <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8018fb2:	687b      	ldr	r3, [r7, #4]
 8018fb4:	695b      	ldr	r3, [r3, #20]
 8018fb6:	2b00      	cmp	r3, #0
 8018fb8:	d003      	beq.n	8018fc2 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8018fba:	687b      	ldr	r3, [r7, #4]
 8018fbc:	695b      	ldr	r3, [r3, #20]
 8018fbe:	089b      	lsrs	r3, r3, #2
 8018fc0:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8018fc2:	687b      	ldr	r3, [r7, #4]
 8018fc4:	689b      	ldr	r3, [r3, #8]
 8018fc6:	2b00      	cmp	r3, #0
 8018fc8:	d00e      	beq.n	8018fe8 <osThreadNew+0xa8>
 8018fca:	687b      	ldr	r3, [r7, #4]
 8018fcc:	68db      	ldr	r3, [r3, #12]
 8018fce:	2b5b      	cmp	r3, #91	; 0x5b
 8018fd0:	d90a      	bls.n	8018fe8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8018fd2:	687b      	ldr	r3, [r7, #4]
 8018fd4:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8018fd6:	2b00      	cmp	r3, #0
 8018fd8:	d006      	beq.n	8018fe8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8018fda:	687b      	ldr	r3, [r7, #4]
 8018fdc:	695b      	ldr	r3, [r3, #20]
 8018fde:	2b00      	cmp	r3, #0
 8018fe0:	d002      	beq.n	8018fe8 <osThreadNew+0xa8>
        mem = 1;
 8018fe2:	2301      	movs	r3, #1
 8018fe4:	61bb      	str	r3, [r7, #24]
 8018fe6:	e010      	b.n	801900a <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8018fe8:	687b      	ldr	r3, [r7, #4]
 8018fea:	689b      	ldr	r3, [r3, #8]
 8018fec:	2b00      	cmp	r3, #0
 8018fee:	d10c      	bne.n	801900a <osThreadNew+0xca>
 8018ff0:	687b      	ldr	r3, [r7, #4]
 8018ff2:	68db      	ldr	r3, [r3, #12]
 8018ff4:	2b00      	cmp	r3, #0
 8018ff6:	d108      	bne.n	801900a <osThreadNew+0xca>
 8018ff8:	687b      	ldr	r3, [r7, #4]
 8018ffa:	691b      	ldr	r3, [r3, #16]
 8018ffc:	2b00      	cmp	r3, #0
 8018ffe:	d104      	bne.n	801900a <osThreadNew+0xca>
          mem = 0;
 8019000:	2300      	movs	r3, #0
 8019002:	61bb      	str	r3, [r7, #24]
 8019004:	e001      	b.n	801900a <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8019006:	2300      	movs	r3, #0
 8019008:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 801900a:	69bb      	ldr	r3, [r7, #24]
 801900c:	2b01      	cmp	r3, #1
 801900e:	d110      	bne.n	8019032 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8019010:	687b      	ldr	r3, [r7, #4]
 8019012:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8019014:	687a      	ldr	r2, [r7, #4]
 8019016:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8019018:	9202      	str	r2, [sp, #8]
 801901a:	9301      	str	r3, [sp, #4]
 801901c:	69fb      	ldr	r3, [r7, #28]
 801901e:	9300      	str	r3, [sp, #0]
 8019020:	68bb      	ldr	r3, [r7, #8]
 8019022:	6a3a      	ldr	r2, [r7, #32]
 8019024:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8019026:	68f8      	ldr	r0, [r7, #12]
 8019028:	f000 fd30 	bl	8019a8c <xTaskCreateStatic>
 801902c:	4603      	mov	r3, r0
 801902e:	613b      	str	r3, [r7, #16]
 8019030:	e013      	b.n	801905a <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8019032:	69bb      	ldr	r3, [r7, #24]
 8019034:	2b00      	cmp	r3, #0
 8019036:	d110      	bne.n	801905a <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8019038:	6a3b      	ldr	r3, [r7, #32]
 801903a:	b29a      	uxth	r2, r3
 801903c:	f107 0310 	add.w	r3, r7, #16
 8019040:	9301      	str	r3, [sp, #4]
 8019042:	69fb      	ldr	r3, [r7, #28]
 8019044:	9300      	str	r3, [sp, #0]
 8019046:	68bb      	ldr	r3, [r7, #8]
 8019048:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801904a:	68f8      	ldr	r0, [r7, #12]
 801904c:	f000 fd63 	bl	8019b16 <xTaskCreate>
 8019050:	4603      	mov	r3, r0
 8019052:	2b01      	cmp	r3, #1
 8019054:	d001      	beq.n	801905a <osThreadNew+0x11a>
            hTask = NULL;
 8019056:	2300      	movs	r3, #0
 8019058:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 801905a:	693b      	ldr	r3, [r7, #16]
}
 801905c:	4618      	mov	r0, r3
 801905e:	3728      	adds	r7, #40	; 0x28
 8019060:	46bd      	mov	sp, r7
 8019062:	bd80      	pop	{r7, pc}

08019064 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8019064:	b480      	push	{r7}
 8019066:	b085      	sub	sp, #20
 8019068:	af00      	add	r7, sp, #0
 801906a:	60f8      	str	r0, [r7, #12]
 801906c:	60b9      	str	r1, [r7, #8]
 801906e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8019070:	68fb      	ldr	r3, [r7, #12]
 8019072:	4a07      	ldr	r2, [pc, #28]	; (8019090 <vApplicationGetIdleTaskMemory+0x2c>)
 8019074:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8019076:	68bb      	ldr	r3, [r7, #8]
 8019078:	4a06      	ldr	r2, [pc, #24]	; (8019094 <vApplicationGetIdleTaskMemory+0x30>)
 801907a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 801907c:	687b      	ldr	r3, [r7, #4]
 801907e:	2280      	movs	r2, #128	; 0x80
 8019080:	601a      	str	r2, [r3, #0]
}
 8019082:	bf00      	nop
 8019084:	3714      	adds	r7, #20
 8019086:	46bd      	mov	sp, r7
 8019088:	f85d 7b04 	ldr.w	r7, [sp], #4
 801908c:	4770      	bx	lr
 801908e:	bf00      	nop
 8019090:	20000be4 	.word	0x20000be4
 8019094:	20000c40 	.word	0x20000c40

08019098 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8019098:	b480      	push	{r7}
 801909a:	b085      	sub	sp, #20
 801909c:	af00      	add	r7, sp, #0
 801909e:	60f8      	str	r0, [r7, #12]
 80190a0:	60b9      	str	r1, [r7, #8]
 80190a2:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80190a4:	68fb      	ldr	r3, [r7, #12]
 80190a6:	4a07      	ldr	r2, [pc, #28]	; (80190c4 <vApplicationGetTimerTaskMemory+0x2c>)
 80190a8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80190aa:	68bb      	ldr	r3, [r7, #8]
 80190ac:	4a06      	ldr	r2, [pc, #24]	; (80190c8 <vApplicationGetTimerTaskMemory+0x30>)
 80190ae:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80190b0:	687b      	ldr	r3, [r7, #4]
 80190b2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80190b6:	601a      	str	r2, [r3, #0]
}
 80190b8:	bf00      	nop
 80190ba:	3714      	adds	r7, #20
 80190bc:	46bd      	mov	sp, r7
 80190be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80190c2:	4770      	bx	lr
 80190c4:	20000e40 	.word	0x20000e40
 80190c8:	20000e9c 	.word	0x20000e9c

080190cc <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80190cc:	b480      	push	{r7}
 80190ce:	b083      	sub	sp, #12
 80190d0:	af00      	add	r7, sp, #0
 80190d2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80190d4:	687b      	ldr	r3, [r7, #4]
 80190d6:	f103 0208 	add.w	r2, r3, #8
 80190da:	687b      	ldr	r3, [r7, #4]
 80190dc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80190de:	687b      	ldr	r3, [r7, #4]
 80190e0:	f04f 32ff 	mov.w	r2, #4294967295
 80190e4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80190e6:	687b      	ldr	r3, [r7, #4]
 80190e8:	f103 0208 	add.w	r2, r3, #8
 80190ec:	687b      	ldr	r3, [r7, #4]
 80190ee:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80190f0:	687b      	ldr	r3, [r7, #4]
 80190f2:	f103 0208 	add.w	r2, r3, #8
 80190f6:	687b      	ldr	r3, [r7, #4]
 80190f8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80190fa:	687b      	ldr	r3, [r7, #4]
 80190fc:	2200      	movs	r2, #0
 80190fe:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8019100:	bf00      	nop
 8019102:	370c      	adds	r7, #12
 8019104:	46bd      	mov	sp, r7
 8019106:	f85d 7b04 	ldr.w	r7, [sp], #4
 801910a:	4770      	bx	lr

0801910c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 801910c:	b480      	push	{r7}
 801910e:	b083      	sub	sp, #12
 8019110:	af00      	add	r7, sp, #0
 8019112:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8019114:	687b      	ldr	r3, [r7, #4]
 8019116:	2200      	movs	r2, #0
 8019118:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 801911a:	bf00      	nop
 801911c:	370c      	adds	r7, #12
 801911e:	46bd      	mov	sp, r7
 8019120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019124:	4770      	bx	lr

08019126 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8019126:	b480      	push	{r7}
 8019128:	b085      	sub	sp, #20
 801912a:	af00      	add	r7, sp, #0
 801912c:	6078      	str	r0, [r7, #4]
 801912e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8019130:	687b      	ldr	r3, [r7, #4]
 8019132:	685b      	ldr	r3, [r3, #4]
 8019134:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8019136:	683b      	ldr	r3, [r7, #0]
 8019138:	68fa      	ldr	r2, [r7, #12]
 801913a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 801913c:	68fb      	ldr	r3, [r7, #12]
 801913e:	689a      	ldr	r2, [r3, #8]
 8019140:	683b      	ldr	r3, [r7, #0]
 8019142:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8019144:	68fb      	ldr	r3, [r7, #12]
 8019146:	689b      	ldr	r3, [r3, #8]
 8019148:	683a      	ldr	r2, [r7, #0]
 801914a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 801914c:	68fb      	ldr	r3, [r7, #12]
 801914e:	683a      	ldr	r2, [r7, #0]
 8019150:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8019152:	683b      	ldr	r3, [r7, #0]
 8019154:	687a      	ldr	r2, [r7, #4]
 8019156:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8019158:	687b      	ldr	r3, [r7, #4]
 801915a:	681b      	ldr	r3, [r3, #0]
 801915c:	1c5a      	adds	r2, r3, #1
 801915e:	687b      	ldr	r3, [r7, #4]
 8019160:	601a      	str	r2, [r3, #0]
}
 8019162:	bf00      	nop
 8019164:	3714      	adds	r7, #20
 8019166:	46bd      	mov	sp, r7
 8019168:	f85d 7b04 	ldr.w	r7, [sp], #4
 801916c:	4770      	bx	lr

0801916e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 801916e:	b480      	push	{r7}
 8019170:	b085      	sub	sp, #20
 8019172:	af00      	add	r7, sp, #0
 8019174:	6078      	str	r0, [r7, #4]
 8019176:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8019178:	683b      	ldr	r3, [r7, #0]
 801917a:	681b      	ldr	r3, [r3, #0]
 801917c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 801917e:	68bb      	ldr	r3, [r7, #8]
 8019180:	f1b3 3fff 	cmp.w	r3, #4294967295
 8019184:	d103      	bne.n	801918e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8019186:	687b      	ldr	r3, [r7, #4]
 8019188:	691b      	ldr	r3, [r3, #16]
 801918a:	60fb      	str	r3, [r7, #12]
 801918c:	e00c      	b.n	80191a8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 801918e:	687b      	ldr	r3, [r7, #4]
 8019190:	3308      	adds	r3, #8
 8019192:	60fb      	str	r3, [r7, #12]
 8019194:	e002      	b.n	801919c <vListInsert+0x2e>
 8019196:	68fb      	ldr	r3, [r7, #12]
 8019198:	685b      	ldr	r3, [r3, #4]
 801919a:	60fb      	str	r3, [r7, #12]
 801919c:	68fb      	ldr	r3, [r7, #12]
 801919e:	685b      	ldr	r3, [r3, #4]
 80191a0:	681b      	ldr	r3, [r3, #0]
 80191a2:	68ba      	ldr	r2, [r7, #8]
 80191a4:	429a      	cmp	r2, r3
 80191a6:	d2f6      	bcs.n	8019196 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80191a8:	68fb      	ldr	r3, [r7, #12]
 80191aa:	685a      	ldr	r2, [r3, #4]
 80191ac:	683b      	ldr	r3, [r7, #0]
 80191ae:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80191b0:	683b      	ldr	r3, [r7, #0]
 80191b2:	685b      	ldr	r3, [r3, #4]
 80191b4:	683a      	ldr	r2, [r7, #0]
 80191b6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80191b8:	683b      	ldr	r3, [r7, #0]
 80191ba:	68fa      	ldr	r2, [r7, #12]
 80191bc:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80191be:	68fb      	ldr	r3, [r7, #12]
 80191c0:	683a      	ldr	r2, [r7, #0]
 80191c2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80191c4:	683b      	ldr	r3, [r7, #0]
 80191c6:	687a      	ldr	r2, [r7, #4]
 80191c8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80191ca:	687b      	ldr	r3, [r7, #4]
 80191cc:	681b      	ldr	r3, [r3, #0]
 80191ce:	1c5a      	adds	r2, r3, #1
 80191d0:	687b      	ldr	r3, [r7, #4]
 80191d2:	601a      	str	r2, [r3, #0]
}
 80191d4:	bf00      	nop
 80191d6:	3714      	adds	r7, #20
 80191d8:	46bd      	mov	sp, r7
 80191da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80191de:	4770      	bx	lr

080191e0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80191e0:	b480      	push	{r7}
 80191e2:	b085      	sub	sp, #20
 80191e4:	af00      	add	r7, sp, #0
 80191e6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80191e8:	687b      	ldr	r3, [r7, #4]
 80191ea:	691b      	ldr	r3, [r3, #16]
 80191ec:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80191ee:	687b      	ldr	r3, [r7, #4]
 80191f0:	685b      	ldr	r3, [r3, #4]
 80191f2:	687a      	ldr	r2, [r7, #4]
 80191f4:	6892      	ldr	r2, [r2, #8]
 80191f6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80191f8:	687b      	ldr	r3, [r7, #4]
 80191fa:	689b      	ldr	r3, [r3, #8]
 80191fc:	687a      	ldr	r2, [r7, #4]
 80191fe:	6852      	ldr	r2, [r2, #4]
 8019200:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8019202:	68fb      	ldr	r3, [r7, #12]
 8019204:	685b      	ldr	r3, [r3, #4]
 8019206:	687a      	ldr	r2, [r7, #4]
 8019208:	429a      	cmp	r2, r3
 801920a:	d103      	bne.n	8019214 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 801920c:	687b      	ldr	r3, [r7, #4]
 801920e:	689a      	ldr	r2, [r3, #8]
 8019210:	68fb      	ldr	r3, [r7, #12]
 8019212:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8019214:	687b      	ldr	r3, [r7, #4]
 8019216:	2200      	movs	r2, #0
 8019218:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 801921a:	68fb      	ldr	r3, [r7, #12]
 801921c:	681b      	ldr	r3, [r3, #0]
 801921e:	1e5a      	subs	r2, r3, #1
 8019220:	68fb      	ldr	r3, [r7, #12]
 8019222:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8019224:	68fb      	ldr	r3, [r7, #12]
 8019226:	681b      	ldr	r3, [r3, #0]
}
 8019228:	4618      	mov	r0, r3
 801922a:	3714      	adds	r7, #20
 801922c:	46bd      	mov	sp, r7
 801922e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019232:	4770      	bx	lr

08019234 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8019234:	b580      	push	{r7, lr}
 8019236:	b084      	sub	sp, #16
 8019238:	af00      	add	r7, sp, #0
 801923a:	6078      	str	r0, [r7, #4]
 801923c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 801923e:	687b      	ldr	r3, [r7, #4]
 8019240:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8019242:	68fb      	ldr	r3, [r7, #12]
 8019244:	2b00      	cmp	r3, #0
 8019246:	d102      	bne.n	801924e <xQueueGenericReset+0x1a>
 8019248:	f002 f83e 	bl	801b2c8 <ulSetInterruptMask>
 801924c:	e7fe      	b.n	801924c <xQueueGenericReset+0x18>

	taskENTER_CRITICAL();
 801924e:	f001 ff03 	bl	801b058 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8019252:	68fb      	ldr	r3, [r7, #12]
 8019254:	681a      	ldr	r2, [r3, #0]
 8019256:	68fb      	ldr	r3, [r7, #12]
 8019258:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801925a:	68f9      	ldr	r1, [r7, #12]
 801925c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 801925e:	fb01 f303 	mul.w	r3, r1, r3
 8019262:	441a      	add	r2, r3
 8019264:	68fb      	ldr	r3, [r7, #12]
 8019266:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8019268:	68fb      	ldr	r3, [r7, #12]
 801926a:	2200      	movs	r2, #0
 801926c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 801926e:	68fb      	ldr	r3, [r7, #12]
 8019270:	681a      	ldr	r2, [r3, #0]
 8019272:	68fb      	ldr	r3, [r7, #12]
 8019274:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8019276:	68fb      	ldr	r3, [r7, #12]
 8019278:	681a      	ldr	r2, [r3, #0]
 801927a:	68fb      	ldr	r3, [r7, #12]
 801927c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801927e:	3b01      	subs	r3, #1
 8019280:	68f9      	ldr	r1, [r7, #12]
 8019282:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8019284:	fb01 f303 	mul.w	r3, r1, r3
 8019288:	441a      	add	r2, r3
 801928a:	68fb      	ldr	r3, [r7, #12]
 801928c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 801928e:	68fb      	ldr	r3, [r7, #12]
 8019290:	22ff      	movs	r2, #255	; 0xff
 8019292:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8019296:	68fb      	ldr	r3, [r7, #12]
 8019298:	22ff      	movs	r2, #255	; 0xff
 801929a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 801929e:	683b      	ldr	r3, [r7, #0]
 80192a0:	2b00      	cmp	r3, #0
 80192a2:	d10e      	bne.n	80192c2 <xQueueGenericReset+0x8e>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80192a4:	68fb      	ldr	r3, [r7, #12]
 80192a6:	691b      	ldr	r3, [r3, #16]
 80192a8:	2b00      	cmp	r3, #0
 80192aa:	d014      	beq.n	80192d6 <xQueueGenericReset+0xa2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80192ac:	68fb      	ldr	r3, [r7, #12]
 80192ae:	3310      	adds	r3, #16
 80192b0:	4618      	mov	r0, r3
 80192b2:	f001 f90d 	bl	801a4d0 <xTaskRemoveFromEventList>
 80192b6:	4603      	mov	r3, r0
 80192b8:	2b00      	cmp	r3, #0
 80192ba:	d00c      	beq.n	80192d6 <xQueueGenericReset+0xa2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80192bc:	f001 feba 	bl	801b034 <vPortYield>
 80192c0:	e009      	b.n	80192d6 <xQueueGenericReset+0xa2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80192c2:	68fb      	ldr	r3, [r7, #12]
 80192c4:	3310      	adds	r3, #16
 80192c6:	4618      	mov	r0, r3
 80192c8:	f7ff ff00 	bl	80190cc <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80192cc:	68fb      	ldr	r3, [r7, #12]
 80192ce:	3324      	adds	r3, #36	; 0x24
 80192d0:	4618      	mov	r0, r3
 80192d2:	f7ff fefb 	bl	80190cc <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80192d6:	f001 fed1 	bl	801b07c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80192da:	2301      	movs	r3, #1
}
 80192dc:	4618      	mov	r0, r3
 80192de:	3710      	adds	r7, #16
 80192e0:	46bd      	mov	sp, r7
 80192e2:	bd80      	pop	{r7, pc}

080192e4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80192e4:	b580      	push	{r7, lr}
 80192e6:	b088      	sub	sp, #32
 80192e8:	af02      	add	r7, sp, #8
 80192ea:	60f8      	str	r0, [r7, #12]
 80192ec:	60b9      	str	r1, [r7, #8]
 80192ee:	607a      	str	r2, [r7, #4]
 80192f0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80192f2:	68fb      	ldr	r3, [r7, #12]
 80192f4:	2b00      	cmp	r3, #0
 80192f6:	d102      	bne.n	80192fe <xQueueGenericCreateStatic+0x1a>
 80192f8:	f001 ffe6 	bl	801b2c8 <ulSetInterruptMask>
 80192fc:	e7fe      	b.n	80192fc <xQueueGenericCreateStatic+0x18>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80192fe:	683b      	ldr	r3, [r7, #0]
 8019300:	2b00      	cmp	r3, #0
 8019302:	d102      	bne.n	801930a <xQueueGenericCreateStatic+0x26>
 8019304:	f001 ffe0 	bl	801b2c8 <ulSetInterruptMask>
 8019308:	e7fe      	b.n	8019308 <xQueueGenericCreateStatic+0x24>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 801930a:	687b      	ldr	r3, [r7, #4]
 801930c:	2b00      	cmp	r3, #0
 801930e:	d002      	beq.n	8019316 <xQueueGenericCreateStatic+0x32>
 8019310:	68bb      	ldr	r3, [r7, #8]
 8019312:	2b00      	cmp	r3, #0
 8019314:	d001      	beq.n	801931a <xQueueGenericCreateStatic+0x36>
 8019316:	2301      	movs	r3, #1
 8019318:	e000      	b.n	801931c <xQueueGenericCreateStatic+0x38>
 801931a:	2300      	movs	r3, #0
 801931c:	2b00      	cmp	r3, #0
 801931e:	d102      	bne.n	8019326 <xQueueGenericCreateStatic+0x42>
 8019320:	f001 ffd2 	bl	801b2c8 <ulSetInterruptMask>
 8019324:	e7fe      	b.n	8019324 <xQueueGenericCreateStatic+0x40>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8019326:	687b      	ldr	r3, [r7, #4]
 8019328:	2b00      	cmp	r3, #0
 801932a:	d102      	bne.n	8019332 <xQueueGenericCreateStatic+0x4e>
 801932c:	68bb      	ldr	r3, [r7, #8]
 801932e:	2b00      	cmp	r3, #0
 8019330:	d101      	bne.n	8019336 <xQueueGenericCreateStatic+0x52>
 8019332:	2301      	movs	r3, #1
 8019334:	e000      	b.n	8019338 <xQueueGenericCreateStatic+0x54>
 8019336:	2300      	movs	r3, #0
 8019338:	2b00      	cmp	r3, #0
 801933a:	d102      	bne.n	8019342 <xQueueGenericCreateStatic+0x5e>
 801933c:	f001 ffc4 	bl	801b2c8 <ulSetInterruptMask>
 8019340:	e7fe      	b.n	8019340 <xQueueGenericCreateStatic+0x5c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8019342:	2350      	movs	r3, #80	; 0x50
 8019344:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Queue_t ) );
 8019346:	693b      	ldr	r3, [r7, #16]
 8019348:	2b50      	cmp	r3, #80	; 0x50
 801934a:	d002      	beq.n	8019352 <xQueueGenericCreateStatic+0x6e>
 801934c:	f001 ffbc 	bl	801b2c8 <ulSetInterruptMask>
 8019350:	e7fe      	b.n	8019350 <xQueueGenericCreateStatic+0x6c>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8019352:	693b      	ldr	r3, [r7, #16]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8019354:	683b      	ldr	r3, [r7, #0]
 8019356:	617b      	str	r3, [r7, #20]

		if( pxNewQueue != NULL )
 8019358:	697b      	ldr	r3, [r7, #20]
 801935a:	2b00      	cmp	r3, #0
 801935c:	d00d      	beq.n	801937a <xQueueGenericCreateStatic+0x96>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 801935e:	697b      	ldr	r3, [r7, #20]
 8019360:	2201      	movs	r2, #1
 8019362:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8019366:	f897 2020 	ldrb.w	r2, [r7, #32]
 801936a:	697b      	ldr	r3, [r7, #20]
 801936c:	9300      	str	r3, [sp, #0]
 801936e:	4613      	mov	r3, r2
 8019370:	687a      	ldr	r2, [r7, #4]
 8019372:	68b9      	ldr	r1, [r7, #8]
 8019374:	68f8      	ldr	r0, [r7, #12]
 8019376:	f000 f805 	bl	8019384 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 801937a:	697b      	ldr	r3, [r7, #20]
	}
 801937c:	4618      	mov	r0, r3
 801937e:	3718      	adds	r7, #24
 8019380:	46bd      	mov	sp, r7
 8019382:	bd80      	pop	{r7, pc}

08019384 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8019384:	b580      	push	{r7, lr}
 8019386:	b084      	sub	sp, #16
 8019388:	af00      	add	r7, sp, #0
 801938a:	60f8      	str	r0, [r7, #12]
 801938c:	60b9      	str	r1, [r7, #8]
 801938e:	607a      	str	r2, [r7, #4]
 8019390:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8019392:	68bb      	ldr	r3, [r7, #8]
 8019394:	2b00      	cmp	r3, #0
 8019396:	d103      	bne.n	80193a0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8019398:	69bb      	ldr	r3, [r7, #24]
 801939a:	69ba      	ldr	r2, [r7, #24]
 801939c:	601a      	str	r2, [r3, #0]
 801939e:	e002      	b.n	80193a6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80193a0:	69bb      	ldr	r3, [r7, #24]
 80193a2:	687a      	ldr	r2, [r7, #4]
 80193a4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80193a6:	69bb      	ldr	r3, [r7, #24]
 80193a8:	68fa      	ldr	r2, [r7, #12]
 80193aa:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80193ac:	69bb      	ldr	r3, [r7, #24]
 80193ae:	68ba      	ldr	r2, [r7, #8]
 80193b0:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80193b2:	2101      	movs	r1, #1
 80193b4:	69b8      	ldr	r0, [r7, #24]
 80193b6:	f7ff ff3d 	bl	8019234 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80193ba:	69bb      	ldr	r3, [r7, #24]
 80193bc:	78fa      	ldrb	r2, [r7, #3]
 80193be:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80193c2:	bf00      	nop
 80193c4:	3710      	adds	r7, #16
 80193c6:	46bd      	mov	sp, r7
 80193c8:	bd80      	pop	{r7, pc}

080193ca <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80193ca:	b580      	push	{r7, lr}
 80193cc:	b08a      	sub	sp, #40	; 0x28
 80193ce:	af00      	add	r7, sp, #0
 80193d0:	60f8      	str	r0, [r7, #12]
 80193d2:	60b9      	str	r1, [r7, #8]
 80193d4:	607a      	str	r2, [r7, #4]
 80193d6:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80193d8:	2300      	movs	r3, #0
 80193da:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80193dc:	68fb      	ldr	r3, [r7, #12]
 80193de:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
 80193e0:	6a3b      	ldr	r3, [r7, #32]
 80193e2:	2b00      	cmp	r3, #0
 80193e4:	d102      	bne.n	80193ec <xQueueGenericSend+0x22>
 80193e6:	f001 ff6f 	bl	801b2c8 <ulSetInterruptMask>
 80193ea:	e7fe      	b.n	80193ea <xQueueGenericSend+0x20>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80193ec:	68bb      	ldr	r3, [r7, #8]
 80193ee:	2b00      	cmp	r3, #0
 80193f0:	d103      	bne.n	80193fa <xQueueGenericSend+0x30>
 80193f2:	6a3b      	ldr	r3, [r7, #32]
 80193f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80193f6:	2b00      	cmp	r3, #0
 80193f8:	d101      	bne.n	80193fe <xQueueGenericSend+0x34>
 80193fa:	2301      	movs	r3, #1
 80193fc:	e000      	b.n	8019400 <xQueueGenericSend+0x36>
 80193fe:	2300      	movs	r3, #0
 8019400:	2b00      	cmp	r3, #0
 8019402:	d102      	bne.n	801940a <xQueueGenericSend+0x40>
 8019404:	f001 ff60 	bl	801b2c8 <ulSetInterruptMask>
 8019408:	e7fe      	b.n	8019408 <xQueueGenericSend+0x3e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 801940a:	683b      	ldr	r3, [r7, #0]
 801940c:	2b02      	cmp	r3, #2
 801940e:	d103      	bne.n	8019418 <xQueueGenericSend+0x4e>
 8019410:	6a3b      	ldr	r3, [r7, #32]
 8019412:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8019414:	2b01      	cmp	r3, #1
 8019416:	d101      	bne.n	801941c <xQueueGenericSend+0x52>
 8019418:	2301      	movs	r3, #1
 801941a:	e000      	b.n	801941e <xQueueGenericSend+0x54>
 801941c:	2300      	movs	r3, #0
 801941e:	2b00      	cmp	r3, #0
 8019420:	d102      	bne.n	8019428 <xQueueGenericSend+0x5e>
 8019422:	f001 ff51 	bl	801b2c8 <ulSetInterruptMask>
 8019426:	e7fe      	b.n	8019426 <xQueueGenericSend+0x5c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8019428:	f001 f9e8 	bl	801a7fc <xTaskGetSchedulerState>
 801942c:	4603      	mov	r3, r0
 801942e:	2b00      	cmp	r3, #0
 8019430:	d102      	bne.n	8019438 <xQueueGenericSend+0x6e>
 8019432:	687b      	ldr	r3, [r7, #4]
 8019434:	2b00      	cmp	r3, #0
 8019436:	d101      	bne.n	801943c <xQueueGenericSend+0x72>
 8019438:	2301      	movs	r3, #1
 801943a:	e000      	b.n	801943e <xQueueGenericSend+0x74>
 801943c:	2300      	movs	r3, #0
 801943e:	2b00      	cmp	r3, #0
 8019440:	d102      	bne.n	8019448 <xQueueGenericSend+0x7e>
 8019442:	f001 ff41 	bl	801b2c8 <ulSetInterruptMask>
 8019446:	e7fe      	b.n	8019446 <xQueueGenericSend+0x7c>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8019448:	f001 fe06 	bl	801b058 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 801944c:	6a3b      	ldr	r3, [r7, #32]
 801944e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8019450:	6a3b      	ldr	r3, [r7, #32]
 8019452:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8019454:	429a      	cmp	r2, r3
 8019456:	d302      	bcc.n	801945e <xQueueGenericSend+0x94>
 8019458:	683b      	ldr	r3, [r7, #0]
 801945a:	2b02      	cmp	r3, #2
 801945c:	d11d      	bne.n	801949a <xQueueGenericSend+0xd0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 801945e:	683a      	ldr	r2, [r7, #0]
 8019460:	68b9      	ldr	r1, [r7, #8]
 8019462:	6a38      	ldr	r0, [r7, #32]
 8019464:	f000 f9a4 	bl	80197b0 <prvCopyDataToQueue>
 8019468:	61f8      	str	r0, [r7, #28]

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801946a:	6a3b      	ldr	r3, [r7, #32]
 801946c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801946e:	2b00      	cmp	r3, #0
 8019470:	d00a      	beq.n	8019488 <xQueueGenericSend+0xbe>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8019472:	6a3b      	ldr	r3, [r7, #32]
 8019474:	3324      	adds	r3, #36	; 0x24
 8019476:	4618      	mov	r0, r3
 8019478:	f001 f82a 	bl	801a4d0 <xTaskRemoveFromEventList>
 801947c:	4603      	mov	r3, r0
 801947e:	2b00      	cmp	r3, #0
 8019480:	d007      	beq.n	8019492 <xQueueGenericSend+0xc8>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8019482:	f001 fdd7 	bl	801b034 <vPortYield>
 8019486:	e004      	b.n	8019492 <xQueueGenericSend+0xc8>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8019488:	69fb      	ldr	r3, [r7, #28]
 801948a:	2b00      	cmp	r3, #0
 801948c:	d001      	beq.n	8019492 <xQueueGenericSend+0xc8>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 801948e:	f001 fdd1 	bl	801b034 <vPortYield>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8019492:	f001 fdf3 	bl	801b07c <vPortExitCritical>
				return pdPASS;
 8019496:	2301      	movs	r3, #1
 8019498:	e05c      	b.n	8019554 <xQueueGenericSend+0x18a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 801949a:	687b      	ldr	r3, [r7, #4]
 801949c:	2b00      	cmp	r3, #0
 801949e:	d103      	bne.n	80194a8 <xQueueGenericSend+0xde>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80194a0:	f001 fdec 	bl	801b07c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80194a4:	2300      	movs	r3, #0
 80194a6:	e055      	b.n	8019554 <xQueueGenericSend+0x18a>
				}
				else if( xEntryTimeSet == pdFALSE )
 80194a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80194aa:	2b00      	cmp	r3, #0
 80194ac:	d106      	bne.n	80194bc <xQueueGenericSend+0xf2>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80194ae:	f107 0314 	add.w	r3, r7, #20
 80194b2:	4618      	mov	r0, r3
 80194b4:	f001 f868 	bl	801a588 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80194b8:	2301      	movs	r3, #1
 80194ba:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80194bc:	f001 fdde 	bl	801b07c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80194c0:	f000 fe14 	bl	801a0ec <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80194c4:	f001 fdc8 	bl	801b058 <vPortEnterCritical>
 80194c8:	6a3b      	ldr	r3, [r7, #32]
 80194ca:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80194ce:	b25b      	sxtb	r3, r3
 80194d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80194d4:	d103      	bne.n	80194de <xQueueGenericSend+0x114>
 80194d6:	6a3b      	ldr	r3, [r7, #32]
 80194d8:	2200      	movs	r2, #0
 80194da:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80194de:	6a3b      	ldr	r3, [r7, #32]
 80194e0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80194e4:	b25b      	sxtb	r3, r3
 80194e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80194ea:	d103      	bne.n	80194f4 <xQueueGenericSend+0x12a>
 80194ec:	6a3b      	ldr	r3, [r7, #32]
 80194ee:	2200      	movs	r2, #0
 80194f0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80194f4:	f001 fdc2 	bl	801b07c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80194f8:	1d3a      	adds	r2, r7, #4
 80194fa:	f107 0314 	add.w	r3, r7, #20
 80194fe:	4611      	mov	r1, r2
 8019500:	4618      	mov	r0, r3
 8019502:	f001 f857 	bl	801a5b4 <xTaskCheckForTimeOut>
 8019506:	4603      	mov	r3, r0
 8019508:	2b00      	cmp	r3, #0
 801950a:	d11d      	bne.n	8019548 <xQueueGenericSend+0x17e>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 801950c:	6a38      	ldr	r0, [r7, #32]
 801950e:	f000 fa47 	bl	80199a0 <prvIsQueueFull>
 8019512:	4603      	mov	r3, r0
 8019514:	2b00      	cmp	r3, #0
 8019516:	d011      	beq.n	801953c <xQueueGenericSend+0x172>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8019518:	6a3b      	ldr	r3, [r7, #32]
 801951a:	3310      	adds	r3, #16
 801951c:	687a      	ldr	r2, [r7, #4]
 801951e:	4611      	mov	r1, r2
 8019520:	4618      	mov	r0, r3
 8019522:	f000 ff95 	bl	801a450 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8019526:	6a38      	ldr	r0, [r7, #32]
 8019528:	f000 f9d2 	bl	80198d0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 801952c:	f000 fdec 	bl	801a108 <xTaskResumeAll>
 8019530:	4603      	mov	r3, r0
 8019532:	2b00      	cmp	r3, #0
 8019534:	d188      	bne.n	8019448 <xQueueGenericSend+0x7e>
				{
					portYIELD_WITHIN_API();
 8019536:	f001 fd7d 	bl	801b034 <vPortYield>
 801953a:	e785      	b.n	8019448 <xQueueGenericSend+0x7e>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 801953c:	6a38      	ldr	r0, [r7, #32]
 801953e:	f000 f9c7 	bl	80198d0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8019542:	f000 fde1 	bl	801a108 <xTaskResumeAll>
 8019546:	e77f      	b.n	8019448 <xQueueGenericSend+0x7e>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8019548:	6a38      	ldr	r0, [r7, #32]
 801954a:	f000 f9c1 	bl	80198d0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 801954e:	f000 fddb 	bl	801a108 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8019552:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8019554:	4618      	mov	r0, r3
 8019556:	3728      	adds	r7, #40	; 0x28
 8019558:	46bd      	mov	sp, r7
 801955a:	bd80      	pop	{r7, pc}

0801955c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 801955c:	b580      	push	{r7, lr}
 801955e:	b08a      	sub	sp, #40	; 0x28
 8019560:	af00      	add	r7, sp, #0
 8019562:	60f8      	str	r0, [r7, #12]
 8019564:	60b9      	str	r1, [r7, #8]
 8019566:	607a      	str	r2, [r7, #4]
 8019568:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 801956a:	68fb      	ldr	r3, [r7, #12]
 801956c:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
 801956e:	6a3b      	ldr	r3, [r7, #32]
 8019570:	2b00      	cmp	r3, #0
 8019572:	d102      	bne.n	801957a <xQueueGenericSendFromISR+0x1e>
 8019574:	f001 fea8 	bl	801b2c8 <ulSetInterruptMask>
 8019578:	e7fe      	b.n	8019578 <xQueueGenericSendFromISR+0x1c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801957a:	68bb      	ldr	r3, [r7, #8]
 801957c:	2b00      	cmp	r3, #0
 801957e:	d103      	bne.n	8019588 <xQueueGenericSendFromISR+0x2c>
 8019580:	6a3b      	ldr	r3, [r7, #32]
 8019582:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8019584:	2b00      	cmp	r3, #0
 8019586:	d101      	bne.n	801958c <xQueueGenericSendFromISR+0x30>
 8019588:	2301      	movs	r3, #1
 801958a:	e000      	b.n	801958e <xQueueGenericSendFromISR+0x32>
 801958c:	2300      	movs	r3, #0
 801958e:	2b00      	cmp	r3, #0
 8019590:	d102      	bne.n	8019598 <xQueueGenericSendFromISR+0x3c>
 8019592:	f001 fe99 	bl	801b2c8 <ulSetInterruptMask>
 8019596:	e7fe      	b.n	8019596 <xQueueGenericSendFromISR+0x3a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8019598:	683b      	ldr	r3, [r7, #0]
 801959a:	2b02      	cmp	r3, #2
 801959c:	d103      	bne.n	80195a6 <xQueueGenericSendFromISR+0x4a>
 801959e:	6a3b      	ldr	r3, [r7, #32]
 80195a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80195a2:	2b01      	cmp	r3, #1
 80195a4:	d101      	bne.n	80195aa <xQueueGenericSendFromISR+0x4e>
 80195a6:	2301      	movs	r3, #1
 80195a8:	e000      	b.n	80195ac <xQueueGenericSendFromISR+0x50>
 80195aa:	2300      	movs	r3, #0
 80195ac:	2b00      	cmp	r3, #0
 80195ae:	d102      	bne.n	80195b6 <xQueueGenericSendFromISR+0x5a>
 80195b0:	f001 fe8a 	bl	801b2c8 <ulSetInterruptMask>
 80195b4:	e7fe      	b.n	80195b4 <xQueueGenericSendFromISR+0x58>
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80195b6:	f001 fe87 	bl	801b2c8 <ulSetInterruptMask>
 80195ba:	61f8      	str	r0, [r7, #28]
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80195bc:	6a3b      	ldr	r3, [r7, #32]
 80195be:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80195c0:	6a3b      	ldr	r3, [r7, #32]
 80195c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80195c4:	429a      	cmp	r2, r3
 80195c6:	d302      	bcc.n	80195ce <xQueueGenericSendFromISR+0x72>
 80195c8:	683b      	ldr	r3, [r7, #0]
 80195ca:	2b02      	cmp	r3, #2
 80195cc:	d12d      	bne.n	801962a <xQueueGenericSendFromISR+0xce>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80195ce:	6a3b      	ldr	r3, [r7, #32]
 80195d0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80195d4:	76fb      	strb	r3, [r7, #27]
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80195d6:	6a3b      	ldr	r3, [r7, #32]
 80195d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80195da:	617b      	str	r3, [r7, #20]
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80195dc:	683a      	ldr	r2, [r7, #0]
 80195de:	68b9      	ldr	r1, [r7, #8]
 80195e0:	6a38      	ldr	r0, [r7, #32]
 80195e2:	f000 f8e5 	bl	80197b0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80195e6:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80195ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80195ee:	d112      	bne.n	8019616 <xQueueGenericSendFromISR+0xba>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80195f0:	6a3b      	ldr	r3, [r7, #32]
 80195f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80195f4:	2b00      	cmp	r3, #0
 80195f6:	d015      	beq.n	8019624 <xQueueGenericSendFromISR+0xc8>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80195f8:	6a3b      	ldr	r3, [r7, #32]
 80195fa:	3324      	adds	r3, #36	; 0x24
 80195fc:	4618      	mov	r0, r3
 80195fe:	f000 ff67 	bl	801a4d0 <xTaskRemoveFromEventList>
 8019602:	4603      	mov	r3, r0
 8019604:	2b00      	cmp	r3, #0
 8019606:	d00d      	beq.n	8019624 <xQueueGenericSendFromISR+0xc8>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8019608:	687b      	ldr	r3, [r7, #4]
 801960a:	2b00      	cmp	r3, #0
 801960c:	d00a      	beq.n	8019624 <xQueueGenericSendFromISR+0xc8>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 801960e:	687b      	ldr	r3, [r7, #4]
 8019610:	2201      	movs	r2, #1
 8019612:	601a      	str	r2, [r3, #0]
 8019614:	e006      	b.n	8019624 <xQueueGenericSendFromISR+0xc8>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8019616:	7efb      	ldrb	r3, [r7, #27]
 8019618:	3301      	adds	r3, #1
 801961a:	b2db      	uxtb	r3, r3
 801961c:	b25a      	sxtb	r2, r3
 801961e:	6a3b      	ldr	r3, [r7, #32]
 8019620:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8019624:	2301      	movs	r3, #1
 8019626:	627b      	str	r3, [r7, #36]	; 0x24
		{
 8019628:	e001      	b.n	801962e <xQueueGenericSendFromISR+0xd2>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 801962a:	2300      	movs	r3, #0
 801962c:	627b      	str	r3, [r7, #36]	; 0x24
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 801962e:	69f8      	ldr	r0, [r7, #28]
 8019630:	f001 fe57 	bl	801b2e2 <vClearInterruptMask>

	return xReturn;
 8019634:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8019636:	4618      	mov	r0, r3
 8019638:	3728      	adds	r7, #40	; 0x28
 801963a:	46bd      	mov	sp, r7
 801963c:	bd80      	pop	{r7, pc}

0801963e <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 801963e:	b580      	push	{r7, lr}
 8019640:	b08a      	sub	sp, #40	; 0x28
 8019642:	af00      	add	r7, sp, #0
 8019644:	60f8      	str	r0, [r7, #12]
 8019646:	60b9      	str	r1, [r7, #8]
 8019648:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 801964a:	2300      	movs	r3, #0
 801964c:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 801964e:	68fb      	ldr	r3, [r7, #12]
 8019650:	623b      	str	r3, [r7, #32]

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8019652:	6a3b      	ldr	r3, [r7, #32]
 8019654:	2b00      	cmp	r3, #0
 8019656:	d102      	bne.n	801965e <xQueueReceive+0x20>
 8019658:	f001 fe36 	bl	801b2c8 <ulSetInterruptMask>
 801965c:	e7fe      	b.n	801965c <xQueueReceive+0x1e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801965e:	68bb      	ldr	r3, [r7, #8]
 8019660:	2b00      	cmp	r3, #0
 8019662:	d103      	bne.n	801966c <xQueueReceive+0x2e>
 8019664:	6a3b      	ldr	r3, [r7, #32]
 8019666:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8019668:	2b00      	cmp	r3, #0
 801966a:	d101      	bne.n	8019670 <xQueueReceive+0x32>
 801966c:	2301      	movs	r3, #1
 801966e:	e000      	b.n	8019672 <xQueueReceive+0x34>
 8019670:	2300      	movs	r3, #0
 8019672:	2b00      	cmp	r3, #0
 8019674:	d102      	bne.n	801967c <xQueueReceive+0x3e>
 8019676:	f001 fe27 	bl	801b2c8 <ulSetInterruptMask>
 801967a:	e7fe      	b.n	801967a <xQueueReceive+0x3c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 801967c:	f001 f8be 	bl	801a7fc <xTaskGetSchedulerState>
 8019680:	4603      	mov	r3, r0
 8019682:	2b00      	cmp	r3, #0
 8019684:	d102      	bne.n	801968c <xQueueReceive+0x4e>
 8019686:	687b      	ldr	r3, [r7, #4]
 8019688:	2b00      	cmp	r3, #0
 801968a:	d101      	bne.n	8019690 <xQueueReceive+0x52>
 801968c:	2301      	movs	r3, #1
 801968e:	e000      	b.n	8019692 <xQueueReceive+0x54>
 8019690:	2300      	movs	r3, #0
 8019692:	2b00      	cmp	r3, #0
 8019694:	d102      	bne.n	801969c <xQueueReceive+0x5e>
 8019696:	f001 fe17 	bl	801b2c8 <ulSetInterruptMask>
 801969a:	e7fe      	b.n	801969a <xQueueReceive+0x5c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 801969c:	f001 fcdc 	bl	801b058 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80196a0:	6a3b      	ldr	r3, [r7, #32]
 80196a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80196a4:	61fb      	str	r3, [r7, #28]

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80196a6:	69fb      	ldr	r3, [r7, #28]
 80196a8:	2b00      	cmp	r3, #0
 80196aa:	d019      	beq.n	80196e0 <xQueueReceive+0xa2>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80196ac:	68b9      	ldr	r1, [r7, #8]
 80196ae:	6a38      	ldr	r0, [r7, #32]
 80196b0:	f000 f8e8 	bl	8019884 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80196b4:	69fb      	ldr	r3, [r7, #28]
 80196b6:	1e5a      	subs	r2, r3, #1
 80196b8:	6a3b      	ldr	r3, [r7, #32]
 80196ba:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80196bc:	6a3b      	ldr	r3, [r7, #32]
 80196be:	691b      	ldr	r3, [r3, #16]
 80196c0:	2b00      	cmp	r3, #0
 80196c2:	d009      	beq.n	80196d8 <xQueueReceive+0x9a>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80196c4:	6a3b      	ldr	r3, [r7, #32]
 80196c6:	3310      	adds	r3, #16
 80196c8:	4618      	mov	r0, r3
 80196ca:	f000 ff01 	bl	801a4d0 <xTaskRemoveFromEventList>
 80196ce:	4603      	mov	r3, r0
 80196d0:	2b00      	cmp	r3, #0
 80196d2:	d001      	beq.n	80196d8 <xQueueReceive+0x9a>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80196d4:	f001 fcae 	bl	801b034 <vPortYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80196d8:	f001 fcd0 	bl	801b07c <vPortExitCritical>
				return pdPASS;
 80196dc:	2301      	movs	r3, #1
 80196de:	e063      	b.n	80197a8 <xQueueReceive+0x16a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80196e0:	687b      	ldr	r3, [r7, #4]
 80196e2:	2b00      	cmp	r3, #0
 80196e4:	d103      	bne.n	80196ee <xQueueReceive+0xb0>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80196e6:	f001 fcc9 	bl	801b07c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80196ea:	2300      	movs	r3, #0
 80196ec:	e05c      	b.n	80197a8 <xQueueReceive+0x16a>
				}
				else if( xEntryTimeSet == pdFALSE )
 80196ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80196f0:	2b00      	cmp	r3, #0
 80196f2:	d106      	bne.n	8019702 <xQueueReceive+0xc4>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80196f4:	f107 0314 	add.w	r3, r7, #20
 80196f8:	4618      	mov	r0, r3
 80196fa:	f000 ff45 	bl	801a588 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80196fe:	2301      	movs	r3, #1
 8019700:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8019702:	f001 fcbb 	bl	801b07c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8019706:	f000 fcf1 	bl	801a0ec <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 801970a:	f001 fca5 	bl	801b058 <vPortEnterCritical>
 801970e:	6a3b      	ldr	r3, [r7, #32]
 8019710:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8019714:	b25b      	sxtb	r3, r3
 8019716:	f1b3 3fff 	cmp.w	r3, #4294967295
 801971a:	d103      	bne.n	8019724 <xQueueReceive+0xe6>
 801971c:	6a3b      	ldr	r3, [r7, #32]
 801971e:	2200      	movs	r2, #0
 8019720:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8019724:	6a3b      	ldr	r3, [r7, #32]
 8019726:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801972a:	b25b      	sxtb	r3, r3
 801972c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8019730:	d103      	bne.n	801973a <xQueueReceive+0xfc>
 8019732:	6a3b      	ldr	r3, [r7, #32]
 8019734:	2200      	movs	r2, #0
 8019736:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801973a:	f001 fc9f 	bl	801b07c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 801973e:	1d3a      	adds	r2, r7, #4
 8019740:	f107 0314 	add.w	r3, r7, #20
 8019744:	4611      	mov	r1, r2
 8019746:	4618      	mov	r0, r3
 8019748:	f000 ff34 	bl	801a5b4 <xTaskCheckForTimeOut>
 801974c:	4603      	mov	r3, r0
 801974e:	2b00      	cmp	r3, #0
 8019750:	d11d      	bne.n	801978e <xQueueReceive+0x150>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8019752:	6a38      	ldr	r0, [r7, #32]
 8019754:	f000 f90e 	bl	8019974 <prvIsQueueEmpty>
 8019758:	4603      	mov	r3, r0
 801975a:	2b00      	cmp	r3, #0
 801975c:	d011      	beq.n	8019782 <xQueueReceive+0x144>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 801975e:	6a3b      	ldr	r3, [r7, #32]
 8019760:	3324      	adds	r3, #36	; 0x24
 8019762:	687a      	ldr	r2, [r7, #4]
 8019764:	4611      	mov	r1, r2
 8019766:	4618      	mov	r0, r3
 8019768:	f000 fe72 	bl	801a450 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 801976c:	6a38      	ldr	r0, [r7, #32]
 801976e:	f000 f8af 	bl	80198d0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8019772:	f000 fcc9 	bl	801a108 <xTaskResumeAll>
 8019776:	4603      	mov	r3, r0
 8019778:	2b00      	cmp	r3, #0
 801977a:	d18f      	bne.n	801969c <xQueueReceive+0x5e>
				{
					portYIELD_WITHIN_API();
 801977c:	f001 fc5a 	bl	801b034 <vPortYield>
 8019780:	e78c      	b.n	801969c <xQueueReceive+0x5e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8019782:	6a38      	ldr	r0, [r7, #32]
 8019784:	f000 f8a4 	bl	80198d0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8019788:	f000 fcbe 	bl	801a108 <xTaskResumeAll>
 801978c:	e786      	b.n	801969c <xQueueReceive+0x5e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 801978e:	6a38      	ldr	r0, [r7, #32]
 8019790:	f000 f89e 	bl	80198d0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8019794:	f000 fcb8 	bl	801a108 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8019798:	6a38      	ldr	r0, [r7, #32]
 801979a:	f000 f8eb 	bl	8019974 <prvIsQueueEmpty>
 801979e:	4603      	mov	r3, r0
 80197a0:	2b00      	cmp	r3, #0
 80197a2:	f43f af7b 	beq.w	801969c <xQueueReceive+0x5e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80197a6:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80197a8:	4618      	mov	r0, r3
 80197aa:	3728      	adds	r7, #40	; 0x28
 80197ac:	46bd      	mov	sp, r7
 80197ae:	bd80      	pop	{r7, pc}

080197b0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80197b0:	b580      	push	{r7, lr}
 80197b2:	b086      	sub	sp, #24
 80197b4:	af00      	add	r7, sp, #0
 80197b6:	60f8      	str	r0, [r7, #12]
 80197b8:	60b9      	str	r1, [r7, #8]
 80197ba:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80197bc:	2300      	movs	r3, #0
 80197be:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80197c0:	68fb      	ldr	r3, [r7, #12]
 80197c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80197c4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80197c6:	68fb      	ldr	r3, [r7, #12]
 80197c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80197ca:	2b00      	cmp	r3, #0
 80197cc:	d10d      	bne.n	80197ea <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80197ce:	68fb      	ldr	r3, [r7, #12]
 80197d0:	681b      	ldr	r3, [r3, #0]
 80197d2:	2b00      	cmp	r3, #0
 80197d4:	d14d      	bne.n	8019872 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80197d6:	68fb      	ldr	r3, [r7, #12]
 80197d8:	689b      	ldr	r3, [r3, #8]
 80197da:	4618      	mov	r0, r3
 80197dc:	f001 f82c 	bl	801a838 <xTaskPriorityDisinherit>
 80197e0:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80197e2:	68fb      	ldr	r3, [r7, #12]
 80197e4:	2200      	movs	r2, #0
 80197e6:	609a      	str	r2, [r3, #8]
 80197e8:	e043      	b.n	8019872 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80197ea:	687b      	ldr	r3, [r7, #4]
 80197ec:	2b00      	cmp	r3, #0
 80197ee:	d119      	bne.n	8019824 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80197f0:	68fb      	ldr	r3, [r7, #12]
 80197f2:	6858      	ldr	r0, [r3, #4]
 80197f4:	68fb      	ldr	r3, [r7, #12]
 80197f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80197f8:	461a      	mov	r2, r3
 80197fa:	68b9      	ldr	r1, [r7, #8]
 80197fc:	f004 fa2b 	bl	801dc56 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8019800:	68fb      	ldr	r3, [r7, #12]
 8019802:	685a      	ldr	r2, [r3, #4]
 8019804:	68fb      	ldr	r3, [r7, #12]
 8019806:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8019808:	441a      	add	r2, r3
 801980a:	68fb      	ldr	r3, [r7, #12]
 801980c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 801980e:	68fb      	ldr	r3, [r7, #12]
 8019810:	685a      	ldr	r2, [r3, #4]
 8019812:	68fb      	ldr	r3, [r7, #12]
 8019814:	689b      	ldr	r3, [r3, #8]
 8019816:	429a      	cmp	r2, r3
 8019818:	d32b      	bcc.n	8019872 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 801981a:	68fb      	ldr	r3, [r7, #12]
 801981c:	681a      	ldr	r2, [r3, #0]
 801981e:	68fb      	ldr	r3, [r7, #12]
 8019820:	605a      	str	r2, [r3, #4]
 8019822:	e026      	b.n	8019872 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8019824:	68fb      	ldr	r3, [r7, #12]
 8019826:	68d8      	ldr	r0, [r3, #12]
 8019828:	68fb      	ldr	r3, [r7, #12]
 801982a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801982c:	461a      	mov	r2, r3
 801982e:	68b9      	ldr	r1, [r7, #8]
 8019830:	f004 fa11 	bl	801dc56 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8019834:	68fb      	ldr	r3, [r7, #12]
 8019836:	68da      	ldr	r2, [r3, #12]
 8019838:	68fb      	ldr	r3, [r7, #12]
 801983a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801983c:	425b      	negs	r3, r3
 801983e:	441a      	add	r2, r3
 8019840:	68fb      	ldr	r3, [r7, #12]
 8019842:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8019844:	68fb      	ldr	r3, [r7, #12]
 8019846:	68da      	ldr	r2, [r3, #12]
 8019848:	68fb      	ldr	r3, [r7, #12]
 801984a:	681b      	ldr	r3, [r3, #0]
 801984c:	429a      	cmp	r2, r3
 801984e:	d207      	bcs.n	8019860 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8019850:	68fb      	ldr	r3, [r7, #12]
 8019852:	689a      	ldr	r2, [r3, #8]
 8019854:	68fb      	ldr	r3, [r7, #12]
 8019856:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8019858:	425b      	negs	r3, r3
 801985a:	441a      	add	r2, r3
 801985c:	68fb      	ldr	r3, [r7, #12]
 801985e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8019860:	687b      	ldr	r3, [r7, #4]
 8019862:	2b02      	cmp	r3, #2
 8019864:	d105      	bne.n	8019872 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8019866:	693b      	ldr	r3, [r7, #16]
 8019868:	2b00      	cmp	r3, #0
 801986a:	d002      	beq.n	8019872 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 801986c:	693b      	ldr	r3, [r7, #16]
 801986e:	3b01      	subs	r3, #1
 8019870:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8019872:	693b      	ldr	r3, [r7, #16]
 8019874:	1c5a      	adds	r2, r3, #1
 8019876:	68fb      	ldr	r3, [r7, #12]
 8019878:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 801987a:	697b      	ldr	r3, [r7, #20]
}
 801987c:	4618      	mov	r0, r3
 801987e:	3718      	adds	r7, #24
 8019880:	46bd      	mov	sp, r7
 8019882:	bd80      	pop	{r7, pc}

08019884 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8019884:	b580      	push	{r7, lr}
 8019886:	b082      	sub	sp, #8
 8019888:	af00      	add	r7, sp, #0
 801988a:	6078      	str	r0, [r7, #4]
 801988c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 801988e:	687b      	ldr	r3, [r7, #4]
 8019890:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8019892:	2b00      	cmp	r3, #0
 8019894:	d018      	beq.n	80198c8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8019896:	687b      	ldr	r3, [r7, #4]
 8019898:	68da      	ldr	r2, [r3, #12]
 801989a:	687b      	ldr	r3, [r7, #4]
 801989c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801989e:	441a      	add	r2, r3
 80198a0:	687b      	ldr	r3, [r7, #4]
 80198a2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80198a4:	687b      	ldr	r3, [r7, #4]
 80198a6:	68da      	ldr	r2, [r3, #12]
 80198a8:	687b      	ldr	r3, [r7, #4]
 80198aa:	689b      	ldr	r3, [r3, #8]
 80198ac:	429a      	cmp	r2, r3
 80198ae:	d303      	bcc.n	80198b8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80198b0:	687b      	ldr	r3, [r7, #4]
 80198b2:	681a      	ldr	r2, [r3, #0]
 80198b4:	687b      	ldr	r3, [r7, #4]
 80198b6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80198b8:	687b      	ldr	r3, [r7, #4]
 80198ba:	68d9      	ldr	r1, [r3, #12]
 80198bc:	687b      	ldr	r3, [r7, #4]
 80198be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80198c0:	461a      	mov	r2, r3
 80198c2:	6838      	ldr	r0, [r7, #0]
 80198c4:	f004 f9c7 	bl	801dc56 <memcpy>
	}
}
 80198c8:	bf00      	nop
 80198ca:	3708      	adds	r7, #8
 80198cc:	46bd      	mov	sp, r7
 80198ce:	bd80      	pop	{r7, pc}

080198d0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80198d0:	b580      	push	{r7, lr}
 80198d2:	b084      	sub	sp, #16
 80198d4:	af00      	add	r7, sp, #0
 80198d6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80198d8:	f001 fbbe 	bl	801b058 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80198dc:	687b      	ldr	r3, [r7, #4]
 80198de:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80198e2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80198e4:	e011      	b.n	801990a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80198e6:	687b      	ldr	r3, [r7, #4]
 80198e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80198ea:	2b00      	cmp	r3, #0
 80198ec:	d012      	beq.n	8019914 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80198ee:	687b      	ldr	r3, [r7, #4]
 80198f0:	3324      	adds	r3, #36	; 0x24
 80198f2:	4618      	mov	r0, r3
 80198f4:	f000 fdec 	bl	801a4d0 <xTaskRemoveFromEventList>
 80198f8:	4603      	mov	r3, r0
 80198fa:	2b00      	cmp	r3, #0
 80198fc:	d001      	beq.n	8019902 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80198fe:	f000 feab 	bl	801a658 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8019902:	7bfb      	ldrb	r3, [r7, #15]
 8019904:	3b01      	subs	r3, #1
 8019906:	b2db      	uxtb	r3, r3
 8019908:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 801990a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801990e:	2b00      	cmp	r3, #0
 8019910:	dce9      	bgt.n	80198e6 <prvUnlockQueue+0x16>
 8019912:	e000      	b.n	8019916 <prvUnlockQueue+0x46>
					break;
 8019914:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8019916:	687b      	ldr	r3, [r7, #4]
 8019918:	22ff      	movs	r2, #255	; 0xff
 801991a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 801991e:	f001 fbad 	bl	801b07c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8019922:	f001 fb99 	bl	801b058 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8019926:	687b      	ldr	r3, [r7, #4]
 8019928:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801992c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 801992e:	e011      	b.n	8019954 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8019930:	687b      	ldr	r3, [r7, #4]
 8019932:	691b      	ldr	r3, [r3, #16]
 8019934:	2b00      	cmp	r3, #0
 8019936:	d012      	beq.n	801995e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8019938:	687b      	ldr	r3, [r7, #4]
 801993a:	3310      	adds	r3, #16
 801993c:	4618      	mov	r0, r3
 801993e:	f000 fdc7 	bl	801a4d0 <xTaskRemoveFromEventList>
 8019942:	4603      	mov	r3, r0
 8019944:	2b00      	cmp	r3, #0
 8019946:	d001      	beq.n	801994c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8019948:	f000 fe86 	bl	801a658 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 801994c:	7bbb      	ldrb	r3, [r7, #14]
 801994e:	3b01      	subs	r3, #1
 8019950:	b2db      	uxtb	r3, r3
 8019952:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8019954:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8019958:	2b00      	cmp	r3, #0
 801995a:	dce9      	bgt.n	8019930 <prvUnlockQueue+0x60>
 801995c:	e000      	b.n	8019960 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 801995e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8019960:	687b      	ldr	r3, [r7, #4]
 8019962:	22ff      	movs	r2, #255	; 0xff
 8019964:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8019968:	f001 fb88 	bl	801b07c <vPortExitCritical>
}
 801996c:	bf00      	nop
 801996e:	3710      	adds	r7, #16
 8019970:	46bd      	mov	sp, r7
 8019972:	bd80      	pop	{r7, pc}

08019974 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8019974:	b580      	push	{r7, lr}
 8019976:	b084      	sub	sp, #16
 8019978:	af00      	add	r7, sp, #0
 801997a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 801997c:	f001 fb6c 	bl	801b058 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8019980:	687b      	ldr	r3, [r7, #4]
 8019982:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8019984:	2b00      	cmp	r3, #0
 8019986:	d102      	bne.n	801998e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8019988:	2301      	movs	r3, #1
 801998a:	60fb      	str	r3, [r7, #12]
 801998c:	e001      	b.n	8019992 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 801998e:	2300      	movs	r3, #0
 8019990:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8019992:	f001 fb73 	bl	801b07c <vPortExitCritical>

	return xReturn;
 8019996:	68fb      	ldr	r3, [r7, #12]
}
 8019998:	4618      	mov	r0, r3
 801999a:	3710      	adds	r7, #16
 801999c:	46bd      	mov	sp, r7
 801999e:	bd80      	pop	{r7, pc}

080199a0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80199a0:	b580      	push	{r7, lr}
 80199a2:	b084      	sub	sp, #16
 80199a4:	af00      	add	r7, sp, #0
 80199a6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80199a8:	f001 fb56 	bl	801b058 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80199ac:	687b      	ldr	r3, [r7, #4]
 80199ae:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80199b0:	687b      	ldr	r3, [r7, #4]
 80199b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80199b4:	429a      	cmp	r2, r3
 80199b6:	d102      	bne.n	80199be <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80199b8:	2301      	movs	r3, #1
 80199ba:	60fb      	str	r3, [r7, #12]
 80199bc:	e001      	b.n	80199c2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80199be:	2300      	movs	r3, #0
 80199c0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80199c2:	f001 fb5b 	bl	801b07c <vPortExitCritical>

	return xReturn;
 80199c6:	68fb      	ldr	r3, [r7, #12]
}
 80199c8:	4618      	mov	r0, r3
 80199ca:	3710      	adds	r7, #16
 80199cc:	46bd      	mov	sp, r7
 80199ce:	bd80      	pop	{r7, pc}

080199d0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80199d0:	b480      	push	{r7}
 80199d2:	b085      	sub	sp, #20
 80199d4:	af00      	add	r7, sp, #0
 80199d6:	6078      	str	r0, [r7, #4]
 80199d8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80199da:	2300      	movs	r3, #0
 80199dc:	60fb      	str	r3, [r7, #12]
 80199de:	e014      	b.n	8019a0a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80199e0:	4a0f      	ldr	r2, [pc, #60]	; (8019a20 <vQueueAddToRegistry+0x50>)
 80199e2:	68fb      	ldr	r3, [r7, #12]
 80199e4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80199e8:	2b00      	cmp	r3, #0
 80199ea:	d10b      	bne.n	8019a04 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80199ec:	490c      	ldr	r1, [pc, #48]	; (8019a20 <vQueueAddToRegistry+0x50>)
 80199ee:	68fb      	ldr	r3, [r7, #12]
 80199f0:	683a      	ldr	r2, [r7, #0]
 80199f2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80199f6:	4a0a      	ldr	r2, [pc, #40]	; (8019a20 <vQueueAddToRegistry+0x50>)
 80199f8:	68fb      	ldr	r3, [r7, #12]
 80199fa:	00db      	lsls	r3, r3, #3
 80199fc:	4413      	add	r3, r2
 80199fe:	687a      	ldr	r2, [r7, #4]
 8019a00:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8019a02:	e006      	b.n	8019a12 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8019a04:	68fb      	ldr	r3, [r7, #12]
 8019a06:	3301      	adds	r3, #1
 8019a08:	60fb      	str	r3, [r7, #12]
 8019a0a:	68fb      	ldr	r3, [r7, #12]
 8019a0c:	2b07      	cmp	r3, #7
 8019a0e:	d9e7      	bls.n	80199e0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8019a10:	bf00      	nop
 8019a12:	bf00      	nop
 8019a14:	3714      	adds	r7, #20
 8019a16:	46bd      	mov	sp, r7
 8019a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019a1c:	4770      	bx	lr
 8019a1e:	bf00      	nop
 8019a20:	2000129c 	.word	0x2000129c

08019a24 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8019a24:	b580      	push	{r7, lr}
 8019a26:	b086      	sub	sp, #24
 8019a28:	af00      	add	r7, sp, #0
 8019a2a:	60f8      	str	r0, [r7, #12]
 8019a2c:	60b9      	str	r1, [r7, #8]
 8019a2e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8019a30:	68fb      	ldr	r3, [r7, #12]
 8019a32:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8019a34:	f001 fb10 	bl	801b058 <vPortEnterCritical>
 8019a38:	697b      	ldr	r3, [r7, #20]
 8019a3a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8019a3e:	b25b      	sxtb	r3, r3
 8019a40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8019a44:	d103      	bne.n	8019a4e <vQueueWaitForMessageRestricted+0x2a>
 8019a46:	697b      	ldr	r3, [r7, #20]
 8019a48:	2200      	movs	r2, #0
 8019a4a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8019a4e:	697b      	ldr	r3, [r7, #20]
 8019a50:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8019a54:	b25b      	sxtb	r3, r3
 8019a56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8019a5a:	d103      	bne.n	8019a64 <vQueueWaitForMessageRestricted+0x40>
 8019a5c:	697b      	ldr	r3, [r7, #20]
 8019a5e:	2200      	movs	r2, #0
 8019a60:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8019a64:	f001 fb0a 	bl	801b07c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8019a68:	697b      	ldr	r3, [r7, #20]
 8019a6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8019a6c:	2b00      	cmp	r3, #0
 8019a6e:	d106      	bne.n	8019a7e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8019a70:	697b      	ldr	r3, [r7, #20]
 8019a72:	3324      	adds	r3, #36	; 0x24
 8019a74:	687a      	ldr	r2, [r7, #4]
 8019a76:	68b9      	ldr	r1, [r7, #8]
 8019a78:	4618      	mov	r0, r3
 8019a7a:	f000 fd05 	bl	801a488 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8019a7e:	6978      	ldr	r0, [r7, #20]
 8019a80:	f7ff ff26 	bl	80198d0 <prvUnlockQueue>
	}
 8019a84:	bf00      	nop
 8019a86:	3718      	adds	r7, #24
 8019a88:	46bd      	mov	sp, r7
 8019a8a:	bd80      	pop	{r7, pc}

08019a8c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8019a8c:	b580      	push	{r7, lr}
 8019a8e:	b08c      	sub	sp, #48	; 0x30
 8019a90:	af04      	add	r7, sp, #16
 8019a92:	60f8      	str	r0, [r7, #12]
 8019a94:	60b9      	str	r1, [r7, #8]
 8019a96:	607a      	str	r2, [r7, #4]
 8019a98:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8019a9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019a9c:	2b00      	cmp	r3, #0
 8019a9e:	d102      	bne.n	8019aa6 <xTaskCreateStatic+0x1a>
 8019aa0:	f001 fc12 	bl	801b2c8 <ulSetInterruptMask>
 8019aa4:	e7fe      	b.n	8019aa4 <xTaskCreateStatic+0x18>
		configASSERT( pxTaskBuffer != NULL );
 8019aa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019aa8:	2b00      	cmp	r3, #0
 8019aaa:	d102      	bne.n	8019ab2 <xTaskCreateStatic+0x26>
 8019aac:	f001 fc0c 	bl	801b2c8 <ulSetInterruptMask>
 8019ab0:	e7fe      	b.n	8019ab0 <xTaskCreateStatic+0x24>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8019ab2:	235c      	movs	r3, #92	; 0x5c
 8019ab4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( TCB_t ) );
 8019ab6:	697b      	ldr	r3, [r7, #20]
 8019ab8:	2b5c      	cmp	r3, #92	; 0x5c
 8019aba:	d002      	beq.n	8019ac2 <xTaskCreateStatic+0x36>
 8019abc:	f001 fc04 	bl	801b2c8 <ulSetInterruptMask>
 8019ac0:	e7fe      	b.n	8019ac0 <xTaskCreateStatic+0x34>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8019ac2:	697b      	ldr	r3, [r7, #20]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8019ac4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019ac6:	2b00      	cmp	r3, #0
 8019ac8:	d01e      	beq.n	8019b08 <xTaskCreateStatic+0x7c>
 8019aca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019acc:	2b00      	cmp	r3, #0
 8019ace:	d01b      	beq.n	8019b08 <xTaskCreateStatic+0x7c>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8019ad0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019ad2:	61fb      	str	r3, [r7, #28]
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8019ad4:	69fb      	ldr	r3, [r7, #28]
 8019ad6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8019ad8:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8019ada:	69fb      	ldr	r3, [r7, #28]
 8019adc:	2202      	movs	r2, #2
 8019ade:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8019ae2:	2300      	movs	r3, #0
 8019ae4:	9303      	str	r3, [sp, #12]
 8019ae6:	69fb      	ldr	r3, [r7, #28]
 8019ae8:	9302      	str	r3, [sp, #8]
 8019aea:	f107 0318 	add.w	r3, r7, #24
 8019aee:	9301      	str	r3, [sp, #4]
 8019af0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019af2:	9300      	str	r3, [sp, #0]
 8019af4:	683b      	ldr	r3, [r7, #0]
 8019af6:	687a      	ldr	r2, [r7, #4]
 8019af8:	68b9      	ldr	r1, [r7, #8]
 8019afa:	68f8      	ldr	r0, [r7, #12]
 8019afc:	f000 f850 	bl	8019ba0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8019b00:	69f8      	ldr	r0, [r7, #28]
 8019b02:	f000 f8d7 	bl	8019cb4 <prvAddNewTaskToReadyList>
 8019b06:	e001      	b.n	8019b0c <xTaskCreateStatic+0x80>
		}
		else
		{
			xReturn = NULL;
 8019b08:	2300      	movs	r3, #0
 8019b0a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8019b0c:	69bb      	ldr	r3, [r7, #24]
	}
 8019b0e:	4618      	mov	r0, r3
 8019b10:	3720      	adds	r7, #32
 8019b12:	46bd      	mov	sp, r7
 8019b14:	bd80      	pop	{r7, pc}

08019b16 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8019b16:	b580      	push	{r7, lr}
 8019b18:	b08c      	sub	sp, #48	; 0x30
 8019b1a:	af04      	add	r7, sp, #16
 8019b1c:	60f8      	str	r0, [r7, #12]
 8019b1e:	60b9      	str	r1, [r7, #8]
 8019b20:	603b      	str	r3, [r7, #0]
 8019b22:	4613      	mov	r3, r2
 8019b24:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8019b26:	88fb      	ldrh	r3, [r7, #6]
 8019b28:	009b      	lsls	r3, r3, #2
 8019b2a:	4618      	mov	r0, r3
 8019b2c:	f001 fc2c 	bl	801b388 <pvPortMalloc>
 8019b30:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8019b32:	697b      	ldr	r3, [r7, #20]
 8019b34:	2b00      	cmp	r3, #0
 8019b36:	d00e      	beq.n	8019b56 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8019b38:	205c      	movs	r0, #92	; 0x5c
 8019b3a:	f001 fc25 	bl	801b388 <pvPortMalloc>
 8019b3e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8019b40:	69fb      	ldr	r3, [r7, #28]
 8019b42:	2b00      	cmp	r3, #0
 8019b44:	d003      	beq.n	8019b4e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8019b46:	69fb      	ldr	r3, [r7, #28]
 8019b48:	697a      	ldr	r2, [r7, #20]
 8019b4a:	631a      	str	r2, [r3, #48]	; 0x30
 8019b4c:	e005      	b.n	8019b5a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8019b4e:	6978      	ldr	r0, [r7, #20]
 8019b50:	f001 fcce 	bl	801b4f0 <vPortFree>
 8019b54:	e001      	b.n	8019b5a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8019b56:	2300      	movs	r3, #0
 8019b58:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8019b5a:	69fb      	ldr	r3, [r7, #28]
 8019b5c:	2b00      	cmp	r3, #0
 8019b5e:	d017      	beq.n	8019b90 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8019b60:	69fb      	ldr	r3, [r7, #28]
 8019b62:	2200      	movs	r2, #0
 8019b64:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8019b68:	88fa      	ldrh	r2, [r7, #6]
 8019b6a:	2300      	movs	r3, #0
 8019b6c:	9303      	str	r3, [sp, #12]
 8019b6e:	69fb      	ldr	r3, [r7, #28]
 8019b70:	9302      	str	r3, [sp, #8]
 8019b72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019b74:	9301      	str	r3, [sp, #4]
 8019b76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019b78:	9300      	str	r3, [sp, #0]
 8019b7a:	683b      	ldr	r3, [r7, #0]
 8019b7c:	68b9      	ldr	r1, [r7, #8]
 8019b7e:	68f8      	ldr	r0, [r7, #12]
 8019b80:	f000 f80e 	bl	8019ba0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8019b84:	69f8      	ldr	r0, [r7, #28]
 8019b86:	f000 f895 	bl	8019cb4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8019b8a:	2301      	movs	r3, #1
 8019b8c:	61bb      	str	r3, [r7, #24]
 8019b8e:	e002      	b.n	8019b96 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8019b90:	f04f 33ff 	mov.w	r3, #4294967295
 8019b94:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8019b96:	69bb      	ldr	r3, [r7, #24]
	}
 8019b98:	4618      	mov	r0, r3
 8019b9a:	3720      	adds	r7, #32
 8019b9c:	46bd      	mov	sp, r7
 8019b9e:	bd80      	pop	{r7, pc}

08019ba0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8019ba0:	b580      	push	{r7, lr}
 8019ba2:	b086      	sub	sp, #24
 8019ba4:	af00      	add	r7, sp, #0
 8019ba6:	60f8      	str	r0, [r7, #12]
 8019ba8:	60b9      	str	r1, [r7, #8]
 8019baa:	607a      	str	r2, [r7, #4]
 8019bac:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8019bae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019bb0:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8019bb2:	687b      	ldr	r3, [r7, #4]
 8019bb4:	009b      	lsls	r3, r3, #2
 8019bb6:	461a      	mov	r2, r3
 8019bb8:	21a5      	movs	r1, #165	; 0xa5
 8019bba:	f003 ff7c 	bl	801dab6 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8019bbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019bc0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8019bc2:	687b      	ldr	r3, [r7, #4]
 8019bc4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8019bc8:	3b01      	subs	r3, #1
 8019bca:	009b      	lsls	r3, r3, #2
 8019bcc:	4413      	add	r3, r2
 8019bce:	613b      	str	r3, [r7, #16]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8019bd0:	693b      	ldr	r3, [r7, #16]
 8019bd2:	f023 0307 	bic.w	r3, r3, #7
 8019bd6:	613b      	str	r3, [r7, #16]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8019bd8:	693b      	ldr	r3, [r7, #16]
 8019bda:	f003 0307 	and.w	r3, r3, #7
 8019bde:	2b00      	cmp	r3, #0
 8019be0:	d002      	beq.n	8019be8 <prvInitialiseNewTask+0x48>
 8019be2:	f001 fb71 	bl	801b2c8 <ulSetInterruptMask>
 8019be6:	e7fe      	b.n	8019be6 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8019be8:	68bb      	ldr	r3, [r7, #8]
 8019bea:	2b00      	cmp	r3, #0
 8019bec:	d01f      	beq.n	8019c2e <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8019bee:	2300      	movs	r3, #0
 8019bf0:	617b      	str	r3, [r7, #20]
 8019bf2:	e012      	b.n	8019c1a <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8019bf4:	68ba      	ldr	r2, [r7, #8]
 8019bf6:	697b      	ldr	r3, [r7, #20]
 8019bf8:	4413      	add	r3, r2
 8019bfa:	7819      	ldrb	r1, [r3, #0]
 8019bfc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8019bfe:	697b      	ldr	r3, [r7, #20]
 8019c00:	4413      	add	r3, r2
 8019c02:	3334      	adds	r3, #52	; 0x34
 8019c04:	460a      	mov	r2, r1
 8019c06:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8019c08:	68ba      	ldr	r2, [r7, #8]
 8019c0a:	697b      	ldr	r3, [r7, #20]
 8019c0c:	4413      	add	r3, r2
 8019c0e:	781b      	ldrb	r3, [r3, #0]
 8019c10:	2b00      	cmp	r3, #0
 8019c12:	d006      	beq.n	8019c22 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8019c14:	697b      	ldr	r3, [r7, #20]
 8019c16:	3301      	adds	r3, #1
 8019c18:	617b      	str	r3, [r7, #20]
 8019c1a:	697b      	ldr	r3, [r7, #20]
 8019c1c:	2b0f      	cmp	r3, #15
 8019c1e:	d9e9      	bls.n	8019bf4 <prvInitialiseNewTask+0x54>
 8019c20:	e000      	b.n	8019c24 <prvInitialiseNewTask+0x84>
			{
				break;
 8019c22:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8019c24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019c26:	2200      	movs	r2, #0
 8019c28:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8019c2c:	e003      	b.n	8019c36 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8019c2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019c30:	2200      	movs	r2, #0
 8019c32:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8019c36:	6a3b      	ldr	r3, [r7, #32]
 8019c38:	2b37      	cmp	r3, #55	; 0x37
 8019c3a:	d901      	bls.n	8019c40 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8019c3c:	2337      	movs	r3, #55	; 0x37
 8019c3e:	623b      	str	r3, [r7, #32]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8019c40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019c42:	6a3a      	ldr	r2, [r7, #32]
 8019c44:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8019c46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019c48:	6a3a      	ldr	r2, [r7, #32]
 8019c4a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8019c4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019c4e:	2200      	movs	r2, #0
 8019c50:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8019c52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019c54:	3304      	adds	r3, #4
 8019c56:	4618      	mov	r0, r3
 8019c58:	f7ff fa58 	bl	801910c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8019c5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019c5e:	3318      	adds	r3, #24
 8019c60:	4618      	mov	r0, r3
 8019c62:	f7ff fa53 	bl	801910c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8019c66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019c68:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8019c6a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8019c6c:	6a3b      	ldr	r3, [r7, #32]
 8019c6e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8019c72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019c74:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8019c76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019c78:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8019c7a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8019c7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019c7e:	2200      	movs	r2, #0
 8019c80:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8019c82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019c84:	2200      	movs	r2, #0
 8019c86:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
		function as well. */
		#if( portHAS_STACK_OVERFLOW_CHECKING == 1 )
		{
			#if( portSTACK_GROWTH < 0 )
			{
				pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxNewTCB->pxStack, pxTaskCode, pvParameters );
 8019c8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019c8c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8019c8e:	683b      	ldr	r3, [r7, #0]
 8019c90:	68fa      	ldr	r2, [r7, #12]
 8019c92:	6938      	ldr	r0, [r7, #16]
 8019c94:	f001 fa3c 	bl	801b110 <pxPortInitialiseStack>
 8019c98:	4602      	mov	r2, r0
 8019c9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019c9c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8019c9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019ca0:	2b00      	cmp	r3, #0
 8019ca2:	d002      	beq.n	8019caa <prvInitialiseNewTask+0x10a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8019ca4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019ca6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8019ca8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8019caa:	bf00      	nop
 8019cac:	3718      	adds	r7, #24
 8019cae:	46bd      	mov	sp, r7
 8019cb0:	bd80      	pop	{r7, pc}
	...

08019cb4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8019cb4:	b580      	push	{r7, lr}
 8019cb6:	b082      	sub	sp, #8
 8019cb8:	af00      	add	r7, sp, #0
 8019cba:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8019cbc:	f001 f9cc 	bl	801b058 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8019cc0:	4b2a      	ldr	r3, [pc, #168]	; (8019d6c <prvAddNewTaskToReadyList+0xb8>)
 8019cc2:	681b      	ldr	r3, [r3, #0]
 8019cc4:	3301      	adds	r3, #1
 8019cc6:	4a29      	ldr	r2, [pc, #164]	; (8019d6c <prvAddNewTaskToReadyList+0xb8>)
 8019cc8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8019cca:	4b29      	ldr	r3, [pc, #164]	; (8019d70 <prvAddNewTaskToReadyList+0xbc>)
 8019ccc:	681b      	ldr	r3, [r3, #0]
 8019cce:	2b00      	cmp	r3, #0
 8019cd0:	d109      	bne.n	8019ce6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8019cd2:	4a27      	ldr	r2, [pc, #156]	; (8019d70 <prvAddNewTaskToReadyList+0xbc>)
 8019cd4:	687b      	ldr	r3, [r7, #4]
 8019cd6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8019cd8:	4b24      	ldr	r3, [pc, #144]	; (8019d6c <prvAddNewTaskToReadyList+0xb8>)
 8019cda:	681b      	ldr	r3, [r3, #0]
 8019cdc:	2b01      	cmp	r3, #1
 8019cde:	d110      	bne.n	8019d02 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8019ce0:	f000 fcd6 	bl	801a690 <prvInitialiseTaskLists>
 8019ce4:	e00d      	b.n	8019d02 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8019ce6:	4b23      	ldr	r3, [pc, #140]	; (8019d74 <prvAddNewTaskToReadyList+0xc0>)
 8019ce8:	681b      	ldr	r3, [r3, #0]
 8019cea:	2b00      	cmp	r3, #0
 8019cec:	d109      	bne.n	8019d02 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8019cee:	4b20      	ldr	r3, [pc, #128]	; (8019d70 <prvAddNewTaskToReadyList+0xbc>)
 8019cf0:	681b      	ldr	r3, [r3, #0]
 8019cf2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8019cf4:	687b      	ldr	r3, [r7, #4]
 8019cf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019cf8:	429a      	cmp	r2, r3
 8019cfa:	d802      	bhi.n	8019d02 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8019cfc:	4a1c      	ldr	r2, [pc, #112]	; (8019d70 <prvAddNewTaskToReadyList+0xbc>)
 8019cfe:	687b      	ldr	r3, [r7, #4]
 8019d00:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8019d02:	4b1d      	ldr	r3, [pc, #116]	; (8019d78 <prvAddNewTaskToReadyList+0xc4>)
 8019d04:	681b      	ldr	r3, [r3, #0]
 8019d06:	3301      	adds	r3, #1
 8019d08:	4a1b      	ldr	r2, [pc, #108]	; (8019d78 <prvAddNewTaskToReadyList+0xc4>)
 8019d0a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8019d0c:	4b1a      	ldr	r3, [pc, #104]	; (8019d78 <prvAddNewTaskToReadyList+0xc4>)
 8019d0e:	681a      	ldr	r2, [r3, #0]
 8019d10:	687b      	ldr	r3, [r7, #4]
 8019d12:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8019d14:	687b      	ldr	r3, [r7, #4]
 8019d16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8019d18:	4b18      	ldr	r3, [pc, #96]	; (8019d7c <prvAddNewTaskToReadyList+0xc8>)
 8019d1a:	681b      	ldr	r3, [r3, #0]
 8019d1c:	429a      	cmp	r2, r3
 8019d1e:	d903      	bls.n	8019d28 <prvAddNewTaskToReadyList+0x74>
 8019d20:	687b      	ldr	r3, [r7, #4]
 8019d22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019d24:	4a15      	ldr	r2, [pc, #84]	; (8019d7c <prvAddNewTaskToReadyList+0xc8>)
 8019d26:	6013      	str	r3, [r2, #0]
 8019d28:	687b      	ldr	r3, [r7, #4]
 8019d2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8019d2c:	4613      	mov	r3, r2
 8019d2e:	009b      	lsls	r3, r3, #2
 8019d30:	4413      	add	r3, r2
 8019d32:	009b      	lsls	r3, r3, #2
 8019d34:	4a12      	ldr	r2, [pc, #72]	; (8019d80 <prvAddNewTaskToReadyList+0xcc>)
 8019d36:	441a      	add	r2, r3
 8019d38:	687b      	ldr	r3, [r7, #4]
 8019d3a:	3304      	adds	r3, #4
 8019d3c:	4619      	mov	r1, r3
 8019d3e:	4610      	mov	r0, r2
 8019d40:	f7ff f9f1 	bl	8019126 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8019d44:	f001 f99a 	bl	801b07c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8019d48:	4b0a      	ldr	r3, [pc, #40]	; (8019d74 <prvAddNewTaskToReadyList+0xc0>)
 8019d4a:	681b      	ldr	r3, [r3, #0]
 8019d4c:	2b00      	cmp	r3, #0
 8019d4e:	d008      	beq.n	8019d62 <prvAddNewTaskToReadyList+0xae>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8019d50:	4b07      	ldr	r3, [pc, #28]	; (8019d70 <prvAddNewTaskToReadyList+0xbc>)
 8019d52:	681b      	ldr	r3, [r3, #0]
 8019d54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8019d56:	687b      	ldr	r3, [r7, #4]
 8019d58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019d5a:	429a      	cmp	r2, r3
 8019d5c:	d201      	bcs.n	8019d62 <prvAddNewTaskToReadyList+0xae>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8019d5e:	f001 f969 	bl	801b034 <vPortYield>
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8019d62:	bf00      	nop
 8019d64:	3708      	adds	r7, #8
 8019d66:	46bd      	mov	sp, r7
 8019d68:	bd80      	pop	{r7, pc}
 8019d6a:	bf00      	nop
 8019d6c:	200017b0 	.word	0x200017b0
 8019d70:	200012dc 	.word	0x200012dc
 8019d74:	200017bc 	.word	0x200017bc
 8019d78:	200017cc 	.word	0x200017cc
 8019d7c:	200017b8 	.word	0x200017b8
 8019d80:	200012e0 	.word	0x200012e0

08019d84 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 8019d84:	b580      	push	{r7, lr}
 8019d86:	b086      	sub	sp, #24
 8019d88:	af00      	add	r7, sp, #0
 8019d8a:	6078      	str	r0, [r7, #4]
 8019d8c:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 8019d8e:	2300      	movs	r3, #0
 8019d90:	617b      	str	r3, [r7, #20]

		configASSERT( pxPreviousWakeTime );
 8019d92:	687b      	ldr	r3, [r7, #4]
 8019d94:	2b00      	cmp	r3, #0
 8019d96:	d102      	bne.n	8019d9e <vTaskDelayUntil+0x1a>
 8019d98:	f001 fa96 	bl	801b2c8 <ulSetInterruptMask>
 8019d9c:	e7fe      	b.n	8019d9c <vTaskDelayUntil+0x18>
		configASSERT( ( xTimeIncrement > 0U ) );
 8019d9e:	683b      	ldr	r3, [r7, #0]
 8019da0:	2b00      	cmp	r3, #0
 8019da2:	d102      	bne.n	8019daa <vTaskDelayUntil+0x26>
 8019da4:	f001 fa90 	bl	801b2c8 <ulSetInterruptMask>
 8019da8:	e7fe      	b.n	8019da8 <vTaskDelayUntil+0x24>
		configASSERT( uxSchedulerSuspended == 0 );
 8019daa:	4b23      	ldr	r3, [pc, #140]	; (8019e38 <vTaskDelayUntil+0xb4>)
 8019dac:	681b      	ldr	r3, [r3, #0]
 8019dae:	2b00      	cmp	r3, #0
 8019db0:	d002      	beq.n	8019db8 <vTaskDelayUntil+0x34>
 8019db2:	f001 fa89 	bl	801b2c8 <ulSetInterruptMask>
 8019db6:	e7fe      	b.n	8019db6 <vTaskDelayUntil+0x32>

		vTaskSuspendAll();
 8019db8:	f000 f998 	bl	801a0ec <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 8019dbc:	4b1f      	ldr	r3, [pc, #124]	; (8019e3c <vTaskDelayUntil+0xb8>)
 8019dbe:	681b      	ldr	r3, [r3, #0]
 8019dc0:	613b      	str	r3, [r7, #16]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 8019dc2:	687b      	ldr	r3, [r7, #4]
 8019dc4:	681b      	ldr	r3, [r3, #0]
 8019dc6:	683a      	ldr	r2, [r7, #0]
 8019dc8:	4413      	add	r3, r2
 8019dca:	60fb      	str	r3, [r7, #12]

			if( xConstTickCount < *pxPreviousWakeTime )
 8019dcc:	687b      	ldr	r3, [r7, #4]
 8019dce:	681b      	ldr	r3, [r3, #0]
 8019dd0:	693a      	ldr	r2, [r7, #16]
 8019dd2:	429a      	cmp	r2, r3
 8019dd4:	d20b      	bcs.n	8019dee <vTaskDelayUntil+0x6a>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 8019dd6:	687b      	ldr	r3, [r7, #4]
 8019dd8:	681b      	ldr	r3, [r3, #0]
 8019dda:	68fa      	ldr	r2, [r7, #12]
 8019ddc:	429a      	cmp	r2, r3
 8019dde:	d211      	bcs.n	8019e04 <vTaskDelayUntil+0x80>
 8019de0:	68fa      	ldr	r2, [r7, #12]
 8019de2:	693b      	ldr	r3, [r7, #16]
 8019de4:	429a      	cmp	r2, r3
 8019de6:	d90d      	bls.n	8019e04 <vTaskDelayUntil+0x80>
				{
					xShouldDelay = pdTRUE;
 8019de8:	2301      	movs	r3, #1
 8019dea:	617b      	str	r3, [r7, #20]
 8019dec:	e00a      	b.n	8019e04 <vTaskDelayUntil+0x80>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 8019dee:	687b      	ldr	r3, [r7, #4]
 8019df0:	681b      	ldr	r3, [r3, #0]
 8019df2:	68fa      	ldr	r2, [r7, #12]
 8019df4:	429a      	cmp	r2, r3
 8019df6:	d303      	bcc.n	8019e00 <vTaskDelayUntil+0x7c>
 8019df8:	68fa      	ldr	r2, [r7, #12]
 8019dfa:	693b      	ldr	r3, [r7, #16]
 8019dfc:	429a      	cmp	r2, r3
 8019dfe:	d901      	bls.n	8019e04 <vTaskDelayUntil+0x80>
				{
					xShouldDelay = pdTRUE;
 8019e00:	2301      	movs	r3, #1
 8019e02:	617b      	str	r3, [r7, #20]
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 8019e04:	687b      	ldr	r3, [r7, #4]
 8019e06:	68fa      	ldr	r2, [r7, #12]
 8019e08:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 8019e0a:	697b      	ldr	r3, [r7, #20]
 8019e0c:	2b00      	cmp	r3, #0
 8019e0e:	d006      	beq.n	8019e1e <vTaskDelayUntil+0x9a>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 8019e10:	68fa      	ldr	r2, [r7, #12]
 8019e12:	693b      	ldr	r3, [r7, #16]
 8019e14:	1ad3      	subs	r3, r2, r3
 8019e16:	2100      	movs	r1, #0
 8019e18:	4618      	mov	r0, r3
 8019e1a:	f000 fd6b 	bl	801a8f4 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 8019e1e:	f000 f973 	bl	801a108 <xTaskResumeAll>
 8019e22:	60b8      	str	r0, [r7, #8]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8019e24:	68bb      	ldr	r3, [r7, #8]
 8019e26:	2b00      	cmp	r3, #0
 8019e28:	d101      	bne.n	8019e2e <vTaskDelayUntil+0xaa>
		{
			portYIELD_WITHIN_API();
 8019e2a:	f001 f903 	bl	801b034 <vPortYield>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8019e2e:	bf00      	nop
 8019e30:	3718      	adds	r7, #24
 8019e32:	46bd      	mov	sp, r7
 8019e34:	bd80      	pop	{r7, pc}
 8019e36:	bf00      	nop
 8019e38:	200017d8 	.word	0x200017d8
 8019e3c:	200017b4 	.word	0x200017b4

08019e40 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8019e40:	b580      	push	{r7, lr}
 8019e42:	b084      	sub	sp, #16
 8019e44:	af00      	add	r7, sp, #0
 8019e46:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8019e48:	2300      	movs	r3, #0
 8019e4a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8019e4c:	687b      	ldr	r3, [r7, #4]
 8019e4e:	2b00      	cmp	r3, #0
 8019e50:	d00f      	beq.n	8019e72 <vTaskDelay+0x32>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8019e52:	4b0c      	ldr	r3, [pc, #48]	; (8019e84 <vTaskDelay+0x44>)
 8019e54:	681b      	ldr	r3, [r3, #0]
 8019e56:	2b00      	cmp	r3, #0
 8019e58:	d002      	beq.n	8019e60 <vTaskDelay+0x20>
 8019e5a:	f001 fa35 	bl	801b2c8 <ulSetInterruptMask>
 8019e5e:	e7fe      	b.n	8019e5e <vTaskDelay+0x1e>
			vTaskSuspendAll();
 8019e60:	f000 f944 	bl	801a0ec <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8019e64:	2100      	movs	r1, #0
 8019e66:	6878      	ldr	r0, [r7, #4]
 8019e68:	f000 fd44 	bl	801a8f4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8019e6c:	f000 f94c 	bl	801a108 <xTaskResumeAll>
 8019e70:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8019e72:	68fb      	ldr	r3, [r7, #12]
 8019e74:	2b00      	cmp	r3, #0
 8019e76:	d101      	bne.n	8019e7c <vTaskDelay+0x3c>
		{
			portYIELD_WITHIN_API();
 8019e78:	f001 f8dc 	bl	801b034 <vPortYield>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8019e7c:	bf00      	nop
 8019e7e:	3710      	adds	r7, #16
 8019e80:	46bd      	mov	sp, r7
 8019e82:	bd80      	pop	{r7, pc}
 8019e84:	200017d8 	.word	0x200017d8

08019e88 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 8019e88:	b580      	push	{r7, lr}
 8019e8a:	b084      	sub	sp, #16
 8019e8c:	af00      	add	r7, sp, #0
 8019e8e:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8019e90:	f001 f8e2 	bl	801b058 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 8019e94:	687b      	ldr	r3, [r7, #4]
 8019e96:	2b00      	cmp	r3, #0
 8019e98:	d102      	bne.n	8019ea0 <vTaskSuspend+0x18>
 8019e9a:	4b29      	ldr	r3, [pc, #164]	; (8019f40 <vTaskSuspend+0xb8>)
 8019e9c:	681b      	ldr	r3, [r3, #0]
 8019e9e:	e000      	b.n	8019ea2 <vTaskSuspend+0x1a>
 8019ea0:	687b      	ldr	r3, [r7, #4]
 8019ea2:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8019ea4:	68fb      	ldr	r3, [r7, #12]
 8019ea6:	3304      	adds	r3, #4
 8019ea8:	4618      	mov	r0, r3
 8019eaa:	f7ff f999 	bl	80191e0 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8019eae:	68fb      	ldr	r3, [r7, #12]
 8019eb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8019eb2:	2b00      	cmp	r3, #0
 8019eb4:	d004      	beq.n	8019ec0 <vTaskSuspend+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8019eb6:	68fb      	ldr	r3, [r7, #12]
 8019eb8:	3318      	adds	r3, #24
 8019eba:	4618      	mov	r0, r3
 8019ebc:	f7ff f990 	bl	80191e0 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 8019ec0:	68fb      	ldr	r3, [r7, #12]
 8019ec2:	3304      	adds	r3, #4
 8019ec4:	4619      	mov	r1, r3
 8019ec6:	481f      	ldr	r0, [pc, #124]	; (8019f44 <vTaskSuspend+0xbc>)
 8019ec8:	f7ff f92d 	bl	8019126 <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 8019ecc:	68fb      	ldr	r3, [r7, #12]
 8019ece:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8019ed2:	b2db      	uxtb	r3, r3
 8019ed4:	2b01      	cmp	r3, #1
 8019ed6:	d103      	bne.n	8019ee0 <vTaskSuspend+0x58>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8019ed8:	68fb      	ldr	r3, [r7, #12]
 8019eda:	2200      	movs	r2, #0
 8019edc:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 8019ee0:	f001 f8cc 	bl	801b07c <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 8019ee4:	4b18      	ldr	r3, [pc, #96]	; (8019f48 <vTaskSuspend+0xc0>)
 8019ee6:	681b      	ldr	r3, [r3, #0]
 8019ee8:	2b00      	cmp	r3, #0
 8019eea:	d005      	beq.n	8019ef8 <vTaskSuspend+0x70>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 8019eec:	f001 f8b4 	bl	801b058 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 8019ef0:	f000 fc64 	bl	801a7bc <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 8019ef4:	f001 f8c2 	bl	801b07c <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 8019ef8:	4b11      	ldr	r3, [pc, #68]	; (8019f40 <vTaskSuspend+0xb8>)
 8019efa:	681b      	ldr	r3, [r3, #0]
 8019efc:	68fa      	ldr	r2, [r7, #12]
 8019efe:	429a      	cmp	r2, r3
 8019f00:	d119      	bne.n	8019f36 <vTaskSuspend+0xae>
		{
			if( xSchedulerRunning != pdFALSE )
 8019f02:	4b11      	ldr	r3, [pc, #68]	; (8019f48 <vTaskSuspend+0xc0>)
 8019f04:	681b      	ldr	r3, [r3, #0]
 8019f06:	2b00      	cmp	r3, #0
 8019f08:	d009      	beq.n	8019f1e <vTaskSuspend+0x96>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 8019f0a:	4b10      	ldr	r3, [pc, #64]	; (8019f4c <vTaskSuspend+0xc4>)
 8019f0c:	681b      	ldr	r3, [r3, #0]
 8019f0e:	2b00      	cmp	r3, #0
 8019f10:	d002      	beq.n	8019f18 <vTaskSuspend+0x90>
 8019f12:	f001 f9d9 	bl	801b2c8 <ulSetInterruptMask>
 8019f16:	e7fe      	b.n	8019f16 <vTaskSuspend+0x8e>
				portYIELD_WITHIN_API();
 8019f18:	f001 f88c 	bl	801b034 <vPortYield>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8019f1c:	e00b      	b.n	8019f36 <vTaskSuspend+0xae>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 8019f1e:	4b09      	ldr	r3, [pc, #36]	; (8019f44 <vTaskSuspend+0xbc>)
 8019f20:	681a      	ldr	r2, [r3, #0]
 8019f22:	4b0b      	ldr	r3, [pc, #44]	; (8019f50 <vTaskSuspend+0xc8>)
 8019f24:	681b      	ldr	r3, [r3, #0]
 8019f26:	429a      	cmp	r2, r3
 8019f28:	d103      	bne.n	8019f32 <vTaskSuspend+0xaa>
					pxCurrentTCB = NULL;
 8019f2a:	4b05      	ldr	r3, [pc, #20]	; (8019f40 <vTaskSuspend+0xb8>)
 8019f2c:	2200      	movs	r2, #0
 8019f2e:	601a      	str	r2, [r3, #0]
	}
 8019f30:	e001      	b.n	8019f36 <vTaskSuspend+0xae>
					vTaskSwitchContext();
 8019f32:	f000 fa39 	bl	801a3a8 <vTaskSwitchContext>
	}
 8019f36:	bf00      	nop
 8019f38:	3710      	adds	r7, #16
 8019f3a:	46bd      	mov	sp, r7
 8019f3c:	bd80      	pop	{r7, pc}
 8019f3e:	bf00      	nop
 8019f40:	200012dc 	.word	0x200012dc
 8019f44:	2000179c 	.word	0x2000179c
 8019f48:	200017bc 	.word	0x200017bc
 8019f4c:	200017d8 	.word	0x200017d8
 8019f50:	200017b0 	.word	0x200017b0

08019f54 <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 8019f54:	b580      	push	{r7, lr}
 8019f56:	b084      	sub	sp, #16
 8019f58:	af00      	add	r7, sp, #0
 8019f5a:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 8019f5c:	2300      	movs	r3, #0
 8019f5e:	60fb      	str	r3, [r7, #12]
	const TCB_t * const pxTCB = xTask;
 8019f60:	687b      	ldr	r3, [r7, #4]
 8019f62:	60bb      	str	r3, [r7, #8]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 8019f64:	687b      	ldr	r3, [r7, #4]
 8019f66:	2b00      	cmp	r3, #0
 8019f68:	d102      	bne.n	8019f70 <prvTaskIsTaskSuspended+0x1c>
 8019f6a:	f001 f9ad 	bl	801b2c8 <ulSetInterruptMask>
 8019f6e:	e7fe      	b.n	8019f6e <prvTaskIsTaskSuspended+0x1a>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 8019f70:	68bb      	ldr	r3, [r7, #8]
 8019f72:	695b      	ldr	r3, [r3, #20]
 8019f74:	4a09      	ldr	r2, [pc, #36]	; (8019f9c <prvTaskIsTaskSuspended+0x48>)
 8019f76:	4293      	cmp	r3, r2
 8019f78:	d10a      	bne.n	8019f90 <prvTaskIsTaskSuspended+0x3c>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 8019f7a:	68bb      	ldr	r3, [r7, #8]
 8019f7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8019f7e:	4a08      	ldr	r2, [pc, #32]	; (8019fa0 <prvTaskIsTaskSuspended+0x4c>)
 8019f80:	4293      	cmp	r3, r2
 8019f82:	d005      	beq.n	8019f90 <prvTaskIsTaskSuspended+0x3c>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 8019f84:	68bb      	ldr	r3, [r7, #8]
 8019f86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8019f88:	2b00      	cmp	r3, #0
 8019f8a:	d101      	bne.n	8019f90 <prvTaskIsTaskSuspended+0x3c>
				{
					xReturn = pdTRUE;
 8019f8c:	2301      	movs	r3, #1
 8019f8e:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8019f90:	68fb      	ldr	r3, [r7, #12]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 8019f92:	4618      	mov	r0, r3
 8019f94:	3710      	adds	r7, #16
 8019f96:	46bd      	mov	sp, r7
 8019f98:	bd80      	pop	{r7, pc}
 8019f9a:	bf00      	nop
 8019f9c:	2000179c 	.word	0x2000179c
 8019fa0:	20001770 	.word	0x20001770

08019fa4 <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
 8019fa4:	b580      	push	{r7, lr}
 8019fa6:	b084      	sub	sp, #16
 8019fa8:	af00      	add	r7, sp, #0
 8019faa:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = xTaskToResume;
 8019fac:	687b      	ldr	r3, [r7, #4]
 8019fae:	60fb      	str	r3, [r7, #12]

		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );
 8019fb0:	687b      	ldr	r3, [r7, #4]
 8019fb2:	2b00      	cmp	r3, #0
 8019fb4:	d102      	bne.n	8019fbc <vTaskResume+0x18>
 8019fb6:	f001 f987 	bl	801b2c8 <ulSetInterruptMask>
 8019fba:	e7fe      	b.n	8019fba <vTaskResume+0x16>

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
 8019fbc:	4b1d      	ldr	r3, [pc, #116]	; (801a034 <vTaskResume+0x90>)
 8019fbe:	681b      	ldr	r3, [r3, #0]
 8019fc0:	68fa      	ldr	r2, [r7, #12]
 8019fc2:	429a      	cmp	r2, r3
 8019fc4:	d032      	beq.n	801a02c <vTaskResume+0x88>
 8019fc6:	68fb      	ldr	r3, [r7, #12]
 8019fc8:	2b00      	cmp	r3, #0
 8019fca:	d02f      	beq.n	801a02c <vTaskResume+0x88>
		{
			taskENTER_CRITICAL();
 8019fcc:	f001 f844 	bl	801b058 <vPortEnterCritical>
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 8019fd0:	68f8      	ldr	r0, [r7, #12]
 8019fd2:	f7ff ffbf 	bl	8019f54 <prvTaskIsTaskSuspended>
 8019fd6:	4603      	mov	r3, r0
 8019fd8:	2b00      	cmp	r3, #0
 8019fda:	d025      	beq.n	801a028 <vTaskResume+0x84>
				{
					traceTASK_RESUME( pxTCB );

					/* The ready list can be accessed even if the scheduler is
					suspended because this is inside a critical section. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 8019fdc:	68fb      	ldr	r3, [r7, #12]
 8019fde:	3304      	adds	r3, #4
 8019fe0:	4618      	mov	r0, r3
 8019fe2:	f7ff f8fd 	bl	80191e0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8019fe6:	68fb      	ldr	r3, [r7, #12]
 8019fe8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8019fea:	4b13      	ldr	r3, [pc, #76]	; (801a038 <vTaskResume+0x94>)
 8019fec:	681b      	ldr	r3, [r3, #0]
 8019fee:	429a      	cmp	r2, r3
 8019ff0:	d903      	bls.n	8019ffa <vTaskResume+0x56>
 8019ff2:	68fb      	ldr	r3, [r7, #12]
 8019ff4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019ff6:	4a10      	ldr	r2, [pc, #64]	; (801a038 <vTaskResume+0x94>)
 8019ff8:	6013      	str	r3, [r2, #0]
 8019ffa:	68fb      	ldr	r3, [r7, #12]
 8019ffc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8019ffe:	4613      	mov	r3, r2
 801a000:	009b      	lsls	r3, r3, #2
 801a002:	4413      	add	r3, r2
 801a004:	009b      	lsls	r3, r3, #2
 801a006:	4a0d      	ldr	r2, [pc, #52]	; (801a03c <vTaskResume+0x98>)
 801a008:	441a      	add	r2, r3
 801a00a:	68fb      	ldr	r3, [r7, #12]
 801a00c:	3304      	adds	r3, #4
 801a00e:	4619      	mov	r1, r3
 801a010:	4610      	mov	r0, r2
 801a012:	f7ff f888 	bl	8019126 <vListInsertEnd>

					/* A higher priority task may have just been resumed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 801a016:	68fb      	ldr	r3, [r7, #12]
 801a018:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801a01a:	4b06      	ldr	r3, [pc, #24]	; (801a034 <vTaskResume+0x90>)
 801a01c:	681b      	ldr	r3, [r3, #0]
 801a01e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a020:	429a      	cmp	r2, r3
 801a022:	d301      	bcc.n	801a028 <vTaskResume+0x84>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
 801a024:	f001 f806 	bl	801b034 <vPortYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
 801a028:	f001 f828 	bl	801b07c <vPortExitCritical>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 801a02c:	bf00      	nop
 801a02e:	3710      	adds	r7, #16
 801a030:	46bd      	mov	sp, r7
 801a032:	bd80      	pop	{r7, pc}
 801a034:	200012dc 	.word	0x200012dc
 801a038:	200017b8 	.word	0x200017b8
 801a03c:	200012e0 	.word	0x200012e0

0801a040 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 801a040:	b580      	push	{r7, lr}
 801a042:	b088      	sub	sp, #32
 801a044:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 801a046:	2300      	movs	r3, #0
 801a048:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 801a04a:	2300      	movs	r3, #0
 801a04c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 801a04e:	463a      	mov	r2, r7
 801a050:	1d39      	adds	r1, r7, #4
 801a052:	f107 0308 	add.w	r3, r7, #8
 801a056:	4618      	mov	r0, r3
 801a058:	f7ff f804 	bl	8019064 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 801a05c:	6839      	ldr	r1, [r7, #0]
 801a05e:	687b      	ldr	r3, [r7, #4]
 801a060:	68ba      	ldr	r2, [r7, #8]
 801a062:	9202      	str	r2, [sp, #8]
 801a064:	9301      	str	r3, [sp, #4]
 801a066:	2300      	movs	r3, #0
 801a068:	9300      	str	r3, [sp, #0]
 801a06a:	2300      	movs	r3, #0
 801a06c:	460a      	mov	r2, r1
 801a06e:	4919      	ldr	r1, [pc, #100]	; (801a0d4 <vTaskStartScheduler+0x94>)
 801a070:	4819      	ldr	r0, [pc, #100]	; (801a0d8 <vTaskStartScheduler+0x98>)
 801a072:	f7ff fd0b 	bl	8019a8c <xTaskCreateStatic>
 801a076:	4603      	mov	r3, r0
 801a078:	4a18      	ldr	r2, [pc, #96]	; (801a0dc <vTaskStartScheduler+0x9c>)
 801a07a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 801a07c:	4b17      	ldr	r3, [pc, #92]	; (801a0dc <vTaskStartScheduler+0x9c>)
 801a07e:	681b      	ldr	r3, [r3, #0]
 801a080:	2b00      	cmp	r3, #0
 801a082:	d002      	beq.n	801a08a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 801a084:	2301      	movs	r3, #1
 801a086:	60fb      	str	r3, [r7, #12]
 801a088:	e001      	b.n	801a08e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 801a08a:	2300      	movs	r3, #0
 801a08c:	60fb      	str	r3, [r7, #12]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 801a08e:	68fb      	ldr	r3, [r7, #12]
 801a090:	2b01      	cmp	r3, #1
 801a092:	d102      	bne.n	801a09a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 801a094:	f000 fc82 	bl	801a99c <xTimerCreateTimerTask>
 801a098:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 801a09a:	68fb      	ldr	r3, [r7, #12]
 801a09c:	2b01      	cmp	r3, #1
 801a09e:	d10e      	bne.n	801a0be <vTaskStartScheduler+0x7e>
		/* Interrupts are turned off here, to ensure a tick does not occur
		before or during the call to xPortStartScheduler().  The stacks of
		the created tasks contain a status word with interrupts switched on
		so interrupts will automatically get re-enabled when the first task
		starts to run. */
		portDISABLE_INTERRUPTS();
 801a0a0:	f001 f912 	bl	801b2c8 <ulSetInterruptMask>
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 801a0a4:	4b0e      	ldr	r3, [pc, #56]	; (801a0e0 <vTaskStartScheduler+0xa0>)
 801a0a6:	f04f 32ff 	mov.w	r2, #4294967295
 801a0aa:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 801a0ac:	4b0d      	ldr	r3, [pc, #52]	; (801a0e4 <vTaskStartScheduler+0xa4>)
 801a0ae:	2201      	movs	r2, #1
 801a0b0:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 801a0b2:	4b0d      	ldr	r3, [pc, #52]	; (801a0e8 <vTaskStartScheduler+0xa8>)
 801a0b4:	2200      	movs	r2, #0
 801a0b6:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 801a0b8:	f001 f8b4 	bl	801b224 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 801a0bc:	e006      	b.n	801a0cc <vTaskStartScheduler+0x8c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 801a0be:	68fb      	ldr	r3, [r7, #12]
 801a0c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 801a0c4:	d102      	bne.n	801a0cc <vTaskStartScheduler+0x8c>
 801a0c6:	f001 f8ff 	bl	801b2c8 <ulSetInterruptMask>
 801a0ca:	e7fe      	b.n	801a0ca <vTaskStartScheduler+0x8a>
}
 801a0cc:	bf00      	nop
 801a0ce:	3710      	adds	r7, #16
 801a0d0:	46bd      	mov	sp, r7
 801a0d2:	bd80      	pop	{r7, pc}
 801a0d4:	0801f18c 	.word	0x0801f18c
 801a0d8:	0801a671 	.word	0x0801a671
 801a0dc:	200017d4 	.word	0x200017d4
 801a0e0:	200017d0 	.word	0x200017d0
 801a0e4:	200017bc 	.word	0x200017bc
 801a0e8:	200017b4 	.word	0x200017b4

0801a0ec <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 801a0ec:	b480      	push	{r7}
 801a0ee:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 801a0f0:	4b04      	ldr	r3, [pc, #16]	; (801a104 <vTaskSuspendAll+0x18>)
 801a0f2:	681b      	ldr	r3, [r3, #0]
 801a0f4:	3301      	adds	r3, #1
 801a0f6:	4a03      	ldr	r2, [pc, #12]	; (801a104 <vTaskSuspendAll+0x18>)
 801a0f8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 801a0fa:	bf00      	nop
 801a0fc:	46bd      	mov	sp, r7
 801a0fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a102:	4770      	bx	lr
 801a104:	200017d8 	.word	0x200017d8

0801a108 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 801a108:	b580      	push	{r7, lr}
 801a10a:	b084      	sub	sp, #16
 801a10c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 801a10e:	2300      	movs	r3, #0
 801a110:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 801a112:	2300      	movs	r3, #0
 801a114:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 801a116:	4b3b      	ldr	r3, [pc, #236]	; (801a204 <xTaskResumeAll+0xfc>)
 801a118:	681b      	ldr	r3, [r3, #0]
 801a11a:	2b00      	cmp	r3, #0
 801a11c:	d102      	bne.n	801a124 <xTaskResumeAll+0x1c>
 801a11e:	f001 f8d3 	bl	801b2c8 <ulSetInterruptMask>
 801a122:	e7fe      	b.n	801a122 <xTaskResumeAll+0x1a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 801a124:	f000 ff98 	bl	801b058 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 801a128:	4b36      	ldr	r3, [pc, #216]	; (801a204 <xTaskResumeAll+0xfc>)
 801a12a:	681b      	ldr	r3, [r3, #0]
 801a12c:	3b01      	subs	r3, #1
 801a12e:	4a35      	ldr	r2, [pc, #212]	; (801a204 <xTaskResumeAll+0xfc>)
 801a130:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801a132:	4b34      	ldr	r3, [pc, #208]	; (801a204 <xTaskResumeAll+0xfc>)
 801a134:	681b      	ldr	r3, [r3, #0]
 801a136:	2b00      	cmp	r3, #0
 801a138:	d15c      	bne.n	801a1f4 <xTaskResumeAll+0xec>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 801a13a:	4b33      	ldr	r3, [pc, #204]	; (801a208 <xTaskResumeAll+0x100>)
 801a13c:	681b      	ldr	r3, [r3, #0]
 801a13e:	2b00      	cmp	r3, #0
 801a140:	d058      	beq.n	801a1f4 <xTaskResumeAll+0xec>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 801a142:	e02f      	b.n	801a1a4 <xTaskResumeAll+0x9c>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801a144:	4b31      	ldr	r3, [pc, #196]	; (801a20c <xTaskResumeAll+0x104>)
 801a146:	68db      	ldr	r3, [r3, #12]
 801a148:	68db      	ldr	r3, [r3, #12]
 801a14a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 801a14c:	68fb      	ldr	r3, [r7, #12]
 801a14e:	3318      	adds	r3, #24
 801a150:	4618      	mov	r0, r3
 801a152:	f7ff f845 	bl	80191e0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801a156:	68fb      	ldr	r3, [r7, #12]
 801a158:	3304      	adds	r3, #4
 801a15a:	4618      	mov	r0, r3
 801a15c:	f7ff f840 	bl	80191e0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 801a160:	68fb      	ldr	r3, [r7, #12]
 801a162:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801a164:	4b2a      	ldr	r3, [pc, #168]	; (801a210 <xTaskResumeAll+0x108>)
 801a166:	681b      	ldr	r3, [r3, #0]
 801a168:	429a      	cmp	r2, r3
 801a16a:	d903      	bls.n	801a174 <xTaskResumeAll+0x6c>
 801a16c:	68fb      	ldr	r3, [r7, #12]
 801a16e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a170:	4a27      	ldr	r2, [pc, #156]	; (801a210 <xTaskResumeAll+0x108>)
 801a172:	6013      	str	r3, [r2, #0]
 801a174:	68fb      	ldr	r3, [r7, #12]
 801a176:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801a178:	4613      	mov	r3, r2
 801a17a:	009b      	lsls	r3, r3, #2
 801a17c:	4413      	add	r3, r2
 801a17e:	009b      	lsls	r3, r3, #2
 801a180:	4a24      	ldr	r2, [pc, #144]	; (801a214 <xTaskResumeAll+0x10c>)
 801a182:	441a      	add	r2, r3
 801a184:	68fb      	ldr	r3, [r7, #12]
 801a186:	3304      	adds	r3, #4
 801a188:	4619      	mov	r1, r3
 801a18a:	4610      	mov	r0, r2
 801a18c:	f7fe ffcb 	bl	8019126 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 801a190:	68fb      	ldr	r3, [r7, #12]
 801a192:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801a194:	4b20      	ldr	r3, [pc, #128]	; (801a218 <xTaskResumeAll+0x110>)
 801a196:	681b      	ldr	r3, [r3, #0]
 801a198:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a19a:	429a      	cmp	r2, r3
 801a19c:	d302      	bcc.n	801a1a4 <xTaskResumeAll+0x9c>
					{
						xYieldPending = pdTRUE;
 801a19e:	4b1f      	ldr	r3, [pc, #124]	; (801a21c <xTaskResumeAll+0x114>)
 801a1a0:	2201      	movs	r2, #1
 801a1a2:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 801a1a4:	4b19      	ldr	r3, [pc, #100]	; (801a20c <xTaskResumeAll+0x104>)
 801a1a6:	681b      	ldr	r3, [r3, #0]
 801a1a8:	2b00      	cmp	r3, #0
 801a1aa:	d1cb      	bne.n	801a144 <xTaskResumeAll+0x3c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 801a1ac:	68fb      	ldr	r3, [r7, #12]
 801a1ae:	2b00      	cmp	r3, #0
 801a1b0:	d001      	beq.n	801a1b6 <xTaskResumeAll+0xae>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 801a1b2:	f000 fb03 	bl	801a7bc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 801a1b6:	4b1a      	ldr	r3, [pc, #104]	; (801a220 <xTaskResumeAll+0x118>)
 801a1b8:	681b      	ldr	r3, [r3, #0]
 801a1ba:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 801a1bc:	687b      	ldr	r3, [r7, #4]
 801a1be:	2b00      	cmp	r3, #0
 801a1c0:	d010      	beq.n	801a1e4 <xTaskResumeAll+0xdc>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 801a1c2:	f000 f83f 	bl	801a244 <xTaskIncrementTick>
 801a1c6:	4603      	mov	r3, r0
 801a1c8:	2b00      	cmp	r3, #0
 801a1ca:	d002      	beq.n	801a1d2 <xTaskResumeAll+0xca>
							{
								xYieldPending = pdTRUE;
 801a1cc:	4b13      	ldr	r3, [pc, #76]	; (801a21c <xTaskResumeAll+0x114>)
 801a1ce:	2201      	movs	r2, #1
 801a1d0:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 801a1d2:	687b      	ldr	r3, [r7, #4]
 801a1d4:	3b01      	subs	r3, #1
 801a1d6:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 801a1d8:	687b      	ldr	r3, [r7, #4]
 801a1da:	2b00      	cmp	r3, #0
 801a1dc:	d1f1      	bne.n	801a1c2 <xTaskResumeAll+0xba>

						xPendedTicks = 0;
 801a1de:	4b10      	ldr	r3, [pc, #64]	; (801a220 <xTaskResumeAll+0x118>)
 801a1e0:	2200      	movs	r2, #0
 801a1e2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 801a1e4:	4b0d      	ldr	r3, [pc, #52]	; (801a21c <xTaskResumeAll+0x114>)
 801a1e6:	681b      	ldr	r3, [r3, #0]
 801a1e8:	2b00      	cmp	r3, #0
 801a1ea:	d003      	beq.n	801a1f4 <xTaskResumeAll+0xec>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 801a1ec:	2301      	movs	r3, #1
 801a1ee:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 801a1f0:	f000 ff20 	bl	801b034 <vPortYield>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 801a1f4:	f000 ff42 	bl	801b07c <vPortExitCritical>

	return xAlreadyYielded;
 801a1f8:	68bb      	ldr	r3, [r7, #8]
}
 801a1fa:	4618      	mov	r0, r3
 801a1fc:	3710      	adds	r7, #16
 801a1fe:	46bd      	mov	sp, r7
 801a200:	bd80      	pop	{r7, pc}
 801a202:	bf00      	nop
 801a204:	200017d8 	.word	0x200017d8
 801a208:	200017b0 	.word	0x200017b0
 801a20c:	20001770 	.word	0x20001770
 801a210:	200017b8 	.word	0x200017b8
 801a214:	200012e0 	.word	0x200012e0
 801a218:	200012dc 	.word	0x200012dc
 801a21c:	200017c4 	.word	0x200017c4
 801a220:	200017c0 	.word	0x200017c0

0801a224 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 801a224:	b480      	push	{r7}
 801a226:	b083      	sub	sp, #12
 801a228:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 801a22a:	4b05      	ldr	r3, [pc, #20]	; (801a240 <xTaskGetTickCount+0x1c>)
 801a22c:	681b      	ldr	r3, [r3, #0]
 801a22e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 801a230:	687b      	ldr	r3, [r7, #4]
}
 801a232:	4618      	mov	r0, r3
 801a234:	370c      	adds	r7, #12
 801a236:	46bd      	mov	sp, r7
 801a238:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a23c:	4770      	bx	lr
 801a23e:	bf00      	nop
 801a240:	200017b4 	.word	0x200017b4

0801a244 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 801a244:	b580      	push	{r7, lr}
 801a246:	b086      	sub	sp, #24
 801a248:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 801a24a:	2300      	movs	r3, #0
 801a24c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801a24e:	4b4b      	ldr	r3, [pc, #300]	; (801a37c <xTaskIncrementTick+0x138>)
 801a250:	681b      	ldr	r3, [r3, #0]
 801a252:	2b00      	cmp	r3, #0
 801a254:	f040 8087 	bne.w	801a366 <xTaskIncrementTick+0x122>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 801a258:	4b49      	ldr	r3, [pc, #292]	; (801a380 <xTaskIncrementTick+0x13c>)
 801a25a:	681b      	ldr	r3, [r3, #0]
 801a25c:	3301      	adds	r3, #1
 801a25e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 801a260:	4a47      	ldr	r2, [pc, #284]	; (801a380 <xTaskIncrementTick+0x13c>)
 801a262:	693b      	ldr	r3, [r7, #16]
 801a264:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 801a266:	693b      	ldr	r3, [r7, #16]
 801a268:	2b00      	cmp	r3, #0
 801a26a:	d118      	bne.n	801a29e <xTaskIncrementTick+0x5a>
		{
			taskSWITCH_DELAYED_LISTS();
 801a26c:	4b45      	ldr	r3, [pc, #276]	; (801a384 <xTaskIncrementTick+0x140>)
 801a26e:	681b      	ldr	r3, [r3, #0]
 801a270:	681b      	ldr	r3, [r3, #0]
 801a272:	2b00      	cmp	r3, #0
 801a274:	d002      	beq.n	801a27c <xTaskIncrementTick+0x38>
 801a276:	f001 f827 	bl	801b2c8 <ulSetInterruptMask>
 801a27a:	e7fe      	b.n	801a27a <xTaskIncrementTick+0x36>
 801a27c:	4b41      	ldr	r3, [pc, #260]	; (801a384 <xTaskIncrementTick+0x140>)
 801a27e:	681b      	ldr	r3, [r3, #0]
 801a280:	60fb      	str	r3, [r7, #12]
 801a282:	4b41      	ldr	r3, [pc, #260]	; (801a388 <xTaskIncrementTick+0x144>)
 801a284:	681b      	ldr	r3, [r3, #0]
 801a286:	4a3f      	ldr	r2, [pc, #252]	; (801a384 <xTaskIncrementTick+0x140>)
 801a288:	6013      	str	r3, [r2, #0]
 801a28a:	4a3f      	ldr	r2, [pc, #252]	; (801a388 <xTaskIncrementTick+0x144>)
 801a28c:	68fb      	ldr	r3, [r7, #12]
 801a28e:	6013      	str	r3, [r2, #0]
 801a290:	4b3e      	ldr	r3, [pc, #248]	; (801a38c <xTaskIncrementTick+0x148>)
 801a292:	681b      	ldr	r3, [r3, #0]
 801a294:	3301      	adds	r3, #1
 801a296:	4a3d      	ldr	r2, [pc, #244]	; (801a38c <xTaskIncrementTick+0x148>)
 801a298:	6013      	str	r3, [r2, #0]
 801a29a:	f000 fa8f 	bl	801a7bc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 801a29e:	4b3c      	ldr	r3, [pc, #240]	; (801a390 <xTaskIncrementTick+0x14c>)
 801a2a0:	681b      	ldr	r3, [r3, #0]
 801a2a2:	693a      	ldr	r2, [r7, #16]
 801a2a4:	429a      	cmp	r2, r3
 801a2a6:	d349      	bcc.n	801a33c <xTaskIncrementTick+0xf8>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801a2a8:	4b36      	ldr	r3, [pc, #216]	; (801a384 <xTaskIncrementTick+0x140>)
 801a2aa:	681b      	ldr	r3, [r3, #0]
 801a2ac:	681b      	ldr	r3, [r3, #0]
 801a2ae:	2b00      	cmp	r3, #0
 801a2b0:	d104      	bne.n	801a2bc <xTaskIncrementTick+0x78>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801a2b2:	4b37      	ldr	r3, [pc, #220]	; (801a390 <xTaskIncrementTick+0x14c>)
 801a2b4:	f04f 32ff 	mov.w	r2, #4294967295
 801a2b8:	601a      	str	r2, [r3, #0]
					break;
 801a2ba:	e03f      	b.n	801a33c <xTaskIncrementTick+0xf8>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801a2bc:	4b31      	ldr	r3, [pc, #196]	; (801a384 <xTaskIncrementTick+0x140>)
 801a2be:	681b      	ldr	r3, [r3, #0]
 801a2c0:	68db      	ldr	r3, [r3, #12]
 801a2c2:	68db      	ldr	r3, [r3, #12]
 801a2c4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 801a2c6:	68bb      	ldr	r3, [r7, #8]
 801a2c8:	685b      	ldr	r3, [r3, #4]
 801a2ca:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 801a2cc:	693a      	ldr	r2, [r7, #16]
 801a2ce:	687b      	ldr	r3, [r7, #4]
 801a2d0:	429a      	cmp	r2, r3
 801a2d2:	d203      	bcs.n	801a2dc <xTaskIncrementTick+0x98>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 801a2d4:	4a2e      	ldr	r2, [pc, #184]	; (801a390 <xTaskIncrementTick+0x14c>)
 801a2d6:	687b      	ldr	r3, [r7, #4]
 801a2d8:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 801a2da:	e02f      	b.n	801a33c <xTaskIncrementTick+0xf8>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801a2dc:	68bb      	ldr	r3, [r7, #8]
 801a2de:	3304      	adds	r3, #4
 801a2e0:	4618      	mov	r0, r3
 801a2e2:	f7fe ff7d 	bl	80191e0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 801a2e6:	68bb      	ldr	r3, [r7, #8]
 801a2e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801a2ea:	2b00      	cmp	r3, #0
 801a2ec:	d004      	beq.n	801a2f8 <xTaskIncrementTick+0xb4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 801a2ee:	68bb      	ldr	r3, [r7, #8]
 801a2f0:	3318      	adds	r3, #24
 801a2f2:	4618      	mov	r0, r3
 801a2f4:	f7fe ff74 	bl	80191e0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 801a2f8:	68bb      	ldr	r3, [r7, #8]
 801a2fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801a2fc:	4b25      	ldr	r3, [pc, #148]	; (801a394 <xTaskIncrementTick+0x150>)
 801a2fe:	681b      	ldr	r3, [r3, #0]
 801a300:	429a      	cmp	r2, r3
 801a302:	d903      	bls.n	801a30c <xTaskIncrementTick+0xc8>
 801a304:	68bb      	ldr	r3, [r7, #8]
 801a306:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a308:	4a22      	ldr	r2, [pc, #136]	; (801a394 <xTaskIncrementTick+0x150>)
 801a30a:	6013      	str	r3, [r2, #0]
 801a30c:	68bb      	ldr	r3, [r7, #8]
 801a30e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801a310:	4613      	mov	r3, r2
 801a312:	009b      	lsls	r3, r3, #2
 801a314:	4413      	add	r3, r2
 801a316:	009b      	lsls	r3, r3, #2
 801a318:	4a1f      	ldr	r2, [pc, #124]	; (801a398 <xTaskIncrementTick+0x154>)
 801a31a:	441a      	add	r2, r3
 801a31c:	68bb      	ldr	r3, [r7, #8]
 801a31e:	3304      	adds	r3, #4
 801a320:	4619      	mov	r1, r3
 801a322:	4610      	mov	r0, r2
 801a324:	f7fe feff 	bl	8019126 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 801a328:	68bb      	ldr	r3, [r7, #8]
 801a32a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801a32c:	4b1b      	ldr	r3, [pc, #108]	; (801a39c <xTaskIncrementTick+0x158>)
 801a32e:	681b      	ldr	r3, [r3, #0]
 801a330:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a332:	429a      	cmp	r2, r3
 801a334:	d3b8      	bcc.n	801a2a8 <xTaskIncrementTick+0x64>
						{
							xSwitchRequired = pdTRUE;
 801a336:	2301      	movs	r3, #1
 801a338:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801a33a:	e7b5      	b.n	801a2a8 <xTaskIncrementTick+0x64>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 801a33c:	4b17      	ldr	r3, [pc, #92]	; (801a39c <xTaskIncrementTick+0x158>)
 801a33e:	681b      	ldr	r3, [r3, #0]
 801a340:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801a342:	4915      	ldr	r1, [pc, #84]	; (801a398 <xTaskIncrementTick+0x154>)
 801a344:	4613      	mov	r3, r2
 801a346:	009b      	lsls	r3, r3, #2
 801a348:	4413      	add	r3, r2
 801a34a:	009b      	lsls	r3, r3, #2
 801a34c:	440b      	add	r3, r1
 801a34e:	681b      	ldr	r3, [r3, #0]
 801a350:	2b01      	cmp	r3, #1
 801a352:	d901      	bls.n	801a358 <xTaskIncrementTick+0x114>
			{
				xSwitchRequired = pdTRUE;
 801a354:	2301      	movs	r3, #1
 801a356:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 801a358:	4b11      	ldr	r3, [pc, #68]	; (801a3a0 <xTaskIncrementTick+0x15c>)
 801a35a:	681b      	ldr	r3, [r3, #0]
 801a35c:	2b00      	cmp	r3, #0
 801a35e:	d007      	beq.n	801a370 <xTaskIncrementTick+0x12c>
			{
				xSwitchRequired = pdTRUE;
 801a360:	2301      	movs	r3, #1
 801a362:	617b      	str	r3, [r7, #20]
 801a364:	e004      	b.n	801a370 <xTaskIncrementTick+0x12c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 801a366:	4b0f      	ldr	r3, [pc, #60]	; (801a3a4 <xTaskIncrementTick+0x160>)
 801a368:	681b      	ldr	r3, [r3, #0]
 801a36a:	3301      	adds	r3, #1
 801a36c:	4a0d      	ldr	r2, [pc, #52]	; (801a3a4 <xTaskIncrementTick+0x160>)
 801a36e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 801a370:	697b      	ldr	r3, [r7, #20]
}
 801a372:	4618      	mov	r0, r3
 801a374:	3718      	adds	r7, #24
 801a376:	46bd      	mov	sp, r7
 801a378:	bd80      	pop	{r7, pc}
 801a37a:	bf00      	nop
 801a37c:	200017d8 	.word	0x200017d8
 801a380:	200017b4 	.word	0x200017b4
 801a384:	20001768 	.word	0x20001768
 801a388:	2000176c 	.word	0x2000176c
 801a38c:	200017c8 	.word	0x200017c8
 801a390:	200017d0 	.word	0x200017d0
 801a394:	200017b8 	.word	0x200017b8
 801a398:	200012e0 	.word	0x200012e0
 801a39c:	200012dc 	.word	0x200012dc
 801a3a0:	200017c4 	.word	0x200017c4
 801a3a4:	200017c0 	.word	0x200017c0

0801a3a8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 801a3a8:	b580      	push	{r7, lr}
 801a3aa:	b082      	sub	sp, #8
 801a3ac:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 801a3ae:	4b23      	ldr	r3, [pc, #140]	; (801a43c <vTaskSwitchContext+0x94>)
 801a3b0:	681b      	ldr	r3, [r3, #0]
 801a3b2:	2b00      	cmp	r3, #0
 801a3b4:	d003      	beq.n	801a3be <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 801a3b6:	4b22      	ldr	r3, [pc, #136]	; (801a440 <vTaskSwitchContext+0x98>)
 801a3b8:	2201      	movs	r2, #1
 801a3ba:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 801a3bc:	e039      	b.n	801a432 <vTaskSwitchContext+0x8a>
		xYieldPending = pdFALSE;
 801a3be:	4b20      	ldr	r3, [pc, #128]	; (801a440 <vTaskSwitchContext+0x98>)
 801a3c0:	2200      	movs	r2, #0
 801a3c2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801a3c4:	4b1f      	ldr	r3, [pc, #124]	; (801a444 <vTaskSwitchContext+0x9c>)
 801a3c6:	681b      	ldr	r3, [r3, #0]
 801a3c8:	607b      	str	r3, [r7, #4]
 801a3ca:	e008      	b.n	801a3de <vTaskSwitchContext+0x36>
 801a3cc:	687b      	ldr	r3, [r7, #4]
 801a3ce:	2b00      	cmp	r3, #0
 801a3d0:	d102      	bne.n	801a3d8 <vTaskSwitchContext+0x30>
 801a3d2:	f000 ff79 	bl	801b2c8 <ulSetInterruptMask>
 801a3d6:	e7fe      	b.n	801a3d6 <vTaskSwitchContext+0x2e>
 801a3d8:	687b      	ldr	r3, [r7, #4]
 801a3da:	3b01      	subs	r3, #1
 801a3dc:	607b      	str	r3, [r7, #4]
 801a3de:	491a      	ldr	r1, [pc, #104]	; (801a448 <vTaskSwitchContext+0xa0>)
 801a3e0:	687a      	ldr	r2, [r7, #4]
 801a3e2:	4613      	mov	r3, r2
 801a3e4:	009b      	lsls	r3, r3, #2
 801a3e6:	4413      	add	r3, r2
 801a3e8:	009b      	lsls	r3, r3, #2
 801a3ea:	440b      	add	r3, r1
 801a3ec:	681b      	ldr	r3, [r3, #0]
 801a3ee:	2b00      	cmp	r3, #0
 801a3f0:	d0ec      	beq.n	801a3cc <vTaskSwitchContext+0x24>
 801a3f2:	687a      	ldr	r2, [r7, #4]
 801a3f4:	4613      	mov	r3, r2
 801a3f6:	009b      	lsls	r3, r3, #2
 801a3f8:	4413      	add	r3, r2
 801a3fa:	009b      	lsls	r3, r3, #2
 801a3fc:	4a12      	ldr	r2, [pc, #72]	; (801a448 <vTaskSwitchContext+0xa0>)
 801a3fe:	4413      	add	r3, r2
 801a400:	603b      	str	r3, [r7, #0]
 801a402:	683b      	ldr	r3, [r7, #0]
 801a404:	685b      	ldr	r3, [r3, #4]
 801a406:	685a      	ldr	r2, [r3, #4]
 801a408:	683b      	ldr	r3, [r7, #0]
 801a40a:	605a      	str	r2, [r3, #4]
 801a40c:	683b      	ldr	r3, [r7, #0]
 801a40e:	685a      	ldr	r2, [r3, #4]
 801a410:	683b      	ldr	r3, [r7, #0]
 801a412:	3308      	adds	r3, #8
 801a414:	429a      	cmp	r2, r3
 801a416:	d104      	bne.n	801a422 <vTaskSwitchContext+0x7a>
 801a418:	683b      	ldr	r3, [r7, #0]
 801a41a:	685b      	ldr	r3, [r3, #4]
 801a41c:	685a      	ldr	r2, [r3, #4]
 801a41e:	683b      	ldr	r3, [r7, #0]
 801a420:	605a      	str	r2, [r3, #4]
 801a422:	683b      	ldr	r3, [r7, #0]
 801a424:	685b      	ldr	r3, [r3, #4]
 801a426:	68db      	ldr	r3, [r3, #12]
 801a428:	4a08      	ldr	r2, [pc, #32]	; (801a44c <vTaskSwitchContext+0xa4>)
 801a42a:	6013      	str	r3, [r2, #0]
 801a42c:	4a05      	ldr	r2, [pc, #20]	; (801a444 <vTaskSwitchContext+0x9c>)
 801a42e:	687b      	ldr	r3, [r7, #4]
 801a430:	6013      	str	r3, [r2, #0]
}
 801a432:	bf00      	nop
 801a434:	3708      	adds	r7, #8
 801a436:	46bd      	mov	sp, r7
 801a438:	bd80      	pop	{r7, pc}
 801a43a:	bf00      	nop
 801a43c:	200017d8 	.word	0x200017d8
 801a440:	200017c4 	.word	0x200017c4
 801a444:	200017b8 	.word	0x200017b8
 801a448:	200012e0 	.word	0x200012e0
 801a44c:	200012dc 	.word	0x200012dc

0801a450 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 801a450:	b580      	push	{r7, lr}
 801a452:	b082      	sub	sp, #8
 801a454:	af00      	add	r7, sp, #0
 801a456:	6078      	str	r0, [r7, #4]
 801a458:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 801a45a:	687b      	ldr	r3, [r7, #4]
 801a45c:	2b00      	cmp	r3, #0
 801a45e:	d102      	bne.n	801a466 <vTaskPlaceOnEventList+0x16>
 801a460:	f000 ff32 	bl	801b2c8 <ulSetInterruptMask>
 801a464:	e7fe      	b.n	801a464 <vTaskPlaceOnEventList+0x14>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 801a466:	4b07      	ldr	r3, [pc, #28]	; (801a484 <vTaskPlaceOnEventList+0x34>)
 801a468:	681b      	ldr	r3, [r3, #0]
 801a46a:	3318      	adds	r3, #24
 801a46c:	4619      	mov	r1, r3
 801a46e:	6878      	ldr	r0, [r7, #4]
 801a470:	f7fe fe7d 	bl	801916e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 801a474:	2101      	movs	r1, #1
 801a476:	6838      	ldr	r0, [r7, #0]
 801a478:	f000 fa3c 	bl	801a8f4 <prvAddCurrentTaskToDelayedList>
}
 801a47c:	bf00      	nop
 801a47e:	3708      	adds	r7, #8
 801a480:	46bd      	mov	sp, r7
 801a482:	bd80      	pop	{r7, pc}
 801a484:	200012dc 	.word	0x200012dc

0801a488 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 801a488:	b580      	push	{r7, lr}
 801a48a:	b084      	sub	sp, #16
 801a48c:	af00      	add	r7, sp, #0
 801a48e:	60f8      	str	r0, [r7, #12]
 801a490:	60b9      	str	r1, [r7, #8]
 801a492:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 801a494:	68fb      	ldr	r3, [r7, #12]
 801a496:	2b00      	cmp	r3, #0
 801a498:	d102      	bne.n	801a4a0 <vTaskPlaceOnEventListRestricted+0x18>
 801a49a:	f000 ff15 	bl	801b2c8 <ulSetInterruptMask>
 801a49e:	e7fe      	b.n	801a49e <vTaskPlaceOnEventListRestricted+0x16>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 801a4a0:	4b0a      	ldr	r3, [pc, #40]	; (801a4cc <vTaskPlaceOnEventListRestricted+0x44>)
 801a4a2:	681b      	ldr	r3, [r3, #0]
 801a4a4:	3318      	adds	r3, #24
 801a4a6:	4619      	mov	r1, r3
 801a4a8:	68f8      	ldr	r0, [r7, #12]
 801a4aa:	f7fe fe3c 	bl	8019126 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 801a4ae:	687b      	ldr	r3, [r7, #4]
 801a4b0:	2b00      	cmp	r3, #0
 801a4b2:	d002      	beq.n	801a4ba <vTaskPlaceOnEventListRestricted+0x32>
		{
			xTicksToWait = portMAX_DELAY;
 801a4b4:	f04f 33ff 	mov.w	r3, #4294967295
 801a4b8:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 801a4ba:	6879      	ldr	r1, [r7, #4]
 801a4bc:	68b8      	ldr	r0, [r7, #8]
 801a4be:	f000 fa19 	bl	801a8f4 <prvAddCurrentTaskToDelayedList>
	}
 801a4c2:	bf00      	nop
 801a4c4:	3710      	adds	r7, #16
 801a4c6:	46bd      	mov	sp, r7
 801a4c8:	bd80      	pop	{r7, pc}
 801a4ca:	bf00      	nop
 801a4cc:	200012dc 	.word	0x200012dc

0801a4d0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 801a4d0:	b580      	push	{r7, lr}
 801a4d2:	b084      	sub	sp, #16
 801a4d4:	af00      	add	r7, sp, #0
 801a4d6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801a4d8:	687b      	ldr	r3, [r7, #4]
 801a4da:	68db      	ldr	r3, [r3, #12]
 801a4dc:	68db      	ldr	r3, [r3, #12]
 801a4de:	60bb      	str	r3, [r7, #8]
	configASSERT( pxUnblockedTCB );
 801a4e0:	68bb      	ldr	r3, [r7, #8]
 801a4e2:	2b00      	cmp	r3, #0
 801a4e4:	d102      	bne.n	801a4ec <xTaskRemoveFromEventList+0x1c>
 801a4e6:	f000 feef 	bl	801b2c8 <ulSetInterruptMask>
 801a4ea:	e7fe      	b.n	801a4ea <xTaskRemoveFromEventList+0x1a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 801a4ec:	68bb      	ldr	r3, [r7, #8]
 801a4ee:	3318      	adds	r3, #24
 801a4f0:	4618      	mov	r0, r3
 801a4f2:	f7fe fe75 	bl	80191e0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801a4f6:	4b1e      	ldr	r3, [pc, #120]	; (801a570 <xTaskRemoveFromEventList+0xa0>)
 801a4f8:	681b      	ldr	r3, [r3, #0]
 801a4fa:	2b00      	cmp	r3, #0
 801a4fc:	d11d      	bne.n	801a53a <xTaskRemoveFromEventList+0x6a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 801a4fe:	68bb      	ldr	r3, [r7, #8]
 801a500:	3304      	adds	r3, #4
 801a502:	4618      	mov	r0, r3
 801a504:	f7fe fe6c 	bl	80191e0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 801a508:	68bb      	ldr	r3, [r7, #8]
 801a50a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801a50c:	4b19      	ldr	r3, [pc, #100]	; (801a574 <xTaskRemoveFromEventList+0xa4>)
 801a50e:	681b      	ldr	r3, [r3, #0]
 801a510:	429a      	cmp	r2, r3
 801a512:	d903      	bls.n	801a51c <xTaskRemoveFromEventList+0x4c>
 801a514:	68bb      	ldr	r3, [r7, #8]
 801a516:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a518:	4a16      	ldr	r2, [pc, #88]	; (801a574 <xTaskRemoveFromEventList+0xa4>)
 801a51a:	6013      	str	r3, [r2, #0]
 801a51c:	68bb      	ldr	r3, [r7, #8]
 801a51e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801a520:	4613      	mov	r3, r2
 801a522:	009b      	lsls	r3, r3, #2
 801a524:	4413      	add	r3, r2
 801a526:	009b      	lsls	r3, r3, #2
 801a528:	4a13      	ldr	r2, [pc, #76]	; (801a578 <xTaskRemoveFromEventList+0xa8>)
 801a52a:	441a      	add	r2, r3
 801a52c:	68bb      	ldr	r3, [r7, #8]
 801a52e:	3304      	adds	r3, #4
 801a530:	4619      	mov	r1, r3
 801a532:	4610      	mov	r0, r2
 801a534:	f7fe fdf7 	bl	8019126 <vListInsertEnd>
 801a538:	e005      	b.n	801a546 <xTaskRemoveFromEventList+0x76>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 801a53a:	68bb      	ldr	r3, [r7, #8]
 801a53c:	3318      	adds	r3, #24
 801a53e:	4619      	mov	r1, r3
 801a540:	480e      	ldr	r0, [pc, #56]	; (801a57c <xTaskRemoveFromEventList+0xac>)
 801a542:	f7fe fdf0 	bl	8019126 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 801a546:	68bb      	ldr	r3, [r7, #8]
 801a548:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801a54a:	4b0d      	ldr	r3, [pc, #52]	; (801a580 <xTaskRemoveFromEventList+0xb0>)
 801a54c:	681b      	ldr	r3, [r3, #0]
 801a54e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a550:	429a      	cmp	r2, r3
 801a552:	d905      	bls.n	801a560 <xTaskRemoveFromEventList+0x90>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 801a554:	2301      	movs	r3, #1
 801a556:	60fb      	str	r3, [r7, #12]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 801a558:	4b0a      	ldr	r3, [pc, #40]	; (801a584 <xTaskRemoveFromEventList+0xb4>)
 801a55a:	2201      	movs	r2, #1
 801a55c:	601a      	str	r2, [r3, #0]
 801a55e:	e001      	b.n	801a564 <xTaskRemoveFromEventList+0x94>
	}
	else
	{
		xReturn = pdFALSE;
 801a560:	2300      	movs	r3, #0
 801a562:	60fb      	str	r3, [r7, #12]
	}

	return xReturn;
 801a564:	68fb      	ldr	r3, [r7, #12]
}
 801a566:	4618      	mov	r0, r3
 801a568:	3710      	adds	r7, #16
 801a56a:	46bd      	mov	sp, r7
 801a56c:	bd80      	pop	{r7, pc}
 801a56e:	bf00      	nop
 801a570:	200017d8 	.word	0x200017d8
 801a574:	200017b8 	.word	0x200017b8
 801a578:	200012e0 	.word	0x200012e0
 801a57c:	20001770 	.word	0x20001770
 801a580:	200012dc 	.word	0x200012dc
 801a584:	200017c4 	.word	0x200017c4

0801a588 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 801a588:	b480      	push	{r7}
 801a58a:	b083      	sub	sp, #12
 801a58c:	af00      	add	r7, sp, #0
 801a58e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 801a590:	4b06      	ldr	r3, [pc, #24]	; (801a5ac <vTaskInternalSetTimeOutState+0x24>)
 801a592:	681a      	ldr	r2, [r3, #0]
 801a594:	687b      	ldr	r3, [r7, #4]
 801a596:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 801a598:	4b05      	ldr	r3, [pc, #20]	; (801a5b0 <vTaskInternalSetTimeOutState+0x28>)
 801a59a:	681a      	ldr	r2, [r3, #0]
 801a59c:	687b      	ldr	r3, [r7, #4]
 801a59e:	605a      	str	r2, [r3, #4]
}
 801a5a0:	bf00      	nop
 801a5a2:	370c      	adds	r7, #12
 801a5a4:	46bd      	mov	sp, r7
 801a5a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a5aa:	4770      	bx	lr
 801a5ac:	200017c8 	.word	0x200017c8
 801a5b0:	200017b4 	.word	0x200017b4

0801a5b4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 801a5b4:	b580      	push	{r7, lr}
 801a5b6:	b086      	sub	sp, #24
 801a5b8:	af00      	add	r7, sp, #0
 801a5ba:	6078      	str	r0, [r7, #4]
 801a5bc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 801a5be:	687b      	ldr	r3, [r7, #4]
 801a5c0:	2b00      	cmp	r3, #0
 801a5c2:	d102      	bne.n	801a5ca <xTaskCheckForTimeOut+0x16>
 801a5c4:	f000 fe80 	bl	801b2c8 <ulSetInterruptMask>
 801a5c8:	e7fe      	b.n	801a5c8 <xTaskCheckForTimeOut+0x14>
	configASSERT( pxTicksToWait );
 801a5ca:	683b      	ldr	r3, [r7, #0]
 801a5cc:	2b00      	cmp	r3, #0
 801a5ce:	d102      	bne.n	801a5d6 <xTaskCheckForTimeOut+0x22>
 801a5d0:	f000 fe7a 	bl	801b2c8 <ulSetInterruptMask>
 801a5d4:	e7fe      	b.n	801a5d4 <xTaskCheckForTimeOut+0x20>

	taskENTER_CRITICAL();
 801a5d6:	f000 fd3f 	bl	801b058 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 801a5da:	4b1d      	ldr	r3, [pc, #116]	; (801a650 <xTaskCheckForTimeOut+0x9c>)
 801a5dc:	681b      	ldr	r3, [r3, #0]
 801a5de:	613b      	str	r3, [r7, #16]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 801a5e0:	687b      	ldr	r3, [r7, #4]
 801a5e2:	685b      	ldr	r3, [r3, #4]
 801a5e4:	693a      	ldr	r2, [r7, #16]
 801a5e6:	1ad3      	subs	r3, r2, r3
 801a5e8:	60fb      	str	r3, [r7, #12]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 801a5ea:	683b      	ldr	r3, [r7, #0]
 801a5ec:	681b      	ldr	r3, [r3, #0]
 801a5ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 801a5f2:	d102      	bne.n	801a5fa <xTaskCheckForTimeOut+0x46>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 801a5f4:	2300      	movs	r3, #0
 801a5f6:	617b      	str	r3, [r7, #20]
 801a5f8:	e023      	b.n	801a642 <xTaskCheckForTimeOut+0x8e>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 801a5fa:	687b      	ldr	r3, [r7, #4]
 801a5fc:	681a      	ldr	r2, [r3, #0]
 801a5fe:	4b15      	ldr	r3, [pc, #84]	; (801a654 <xTaskCheckForTimeOut+0xa0>)
 801a600:	681b      	ldr	r3, [r3, #0]
 801a602:	429a      	cmp	r2, r3
 801a604:	d007      	beq.n	801a616 <xTaskCheckForTimeOut+0x62>
 801a606:	687b      	ldr	r3, [r7, #4]
 801a608:	685b      	ldr	r3, [r3, #4]
 801a60a:	693a      	ldr	r2, [r7, #16]
 801a60c:	429a      	cmp	r2, r3
 801a60e:	d302      	bcc.n	801a616 <xTaskCheckForTimeOut+0x62>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 801a610:	2301      	movs	r3, #1
 801a612:	617b      	str	r3, [r7, #20]
 801a614:	e015      	b.n	801a642 <xTaskCheckForTimeOut+0x8e>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 801a616:	683b      	ldr	r3, [r7, #0]
 801a618:	681b      	ldr	r3, [r3, #0]
 801a61a:	68fa      	ldr	r2, [r7, #12]
 801a61c:	429a      	cmp	r2, r3
 801a61e:	d20b      	bcs.n	801a638 <xTaskCheckForTimeOut+0x84>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 801a620:	683b      	ldr	r3, [r7, #0]
 801a622:	681a      	ldr	r2, [r3, #0]
 801a624:	68fb      	ldr	r3, [r7, #12]
 801a626:	1ad2      	subs	r2, r2, r3
 801a628:	683b      	ldr	r3, [r7, #0]
 801a62a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 801a62c:	6878      	ldr	r0, [r7, #4]
 801a62e:	f7ff ffab 	bl	801a588 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 801a632:	2300      	movs	r3, #0
 801a634:	617b      	str	r3, [r7, #20]
 801a636:	e004      	b.n	801a642 <xTaskCheckForTimeOut+0x8e>
		}
		else
		{
			*pxTicksToWait = 0;
 801a638:	683b      	ldr	r3, [r7, #0]
 801a63a:	2200      	movs	r2, #0
 801a63c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 801a63e:	2301      	movs	r3, #1
 801a640:	617b      	str	r3, [r7, #20]
		}
	}
	taskEXIT_CRITICAL();
 801a642:	f000 fd1b 	bl	801b07c <vPortExitCritical>

	return xReturn;
 801a646:	697b      	ldr	r3, [r7, #20]
}
 801a648:	4618      	mov	r0, r3
 801a64a:	3718      	adds	r7, #24
 801a64c:	46bd      	mov	sp, r7
 801a64e:	bd80      	pop	{r7, pc}
 801a650:	200017b4 	.word	0x200017b4
 801a654:	200017c8 	.word	0x200017c8

0801a658 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 801a658:	b480      	push	{r7}
 801a65a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 801a65c:	4b03      	ldr	r3, [pc, #12]	; (801a66c <vTaskMissedYield+0x14>)
 801a65e:	2201      	movs	r2, #1
 801a660:	601a      	str	r2, [r3, #0]
}
 801a662:	bf00      	nop
 801a664:	46bd      	mov	sp, r7
 801a666:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a66a:	4770      	bx	lr
 801a66c:	200017c4 	.word	0x200017c4

0801a670 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 801a670:	b580      	push	{r7, lr}
 801a672:	b082      	sub	sp, #8
 801a674:	af00      	add	r7, sp, #0
 801a676:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 801a678:	f000 f84a 	bl	801a710 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 801a67c:	4b03      	ldr	r3, [pc, #12]	; (801a68c <prvIdleTask+0x1c>)
 801a67e:	681b      	ldr	r3, [r3, #0]
 801a680:	2b01      	cmp	r3, #1
 801a682:	d9f9      	bls.n	801a678 <prvIdleTask+0x8>
			{
				taskYIELD();
 801a684:	f000 fcd6 	bl	801b034 <vPortYield>
		prvCheckTasksWaitingTermination();
 801a688:	e7f6      	b.n	801a678 <prvIdleTask+0x8>
 801a68a:	bf00      	nop
 801a68c:	200012e0 	.word	0x200012e0

0801a690 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 801a690:	b580      	push	{r7, lr}
 801a692:	b082      	sub	sp, #8
 801a694:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 801a696:	2300      	movs	r3, #0
 801a698:	607b      	str	r3, [r7, #4]
 801a69a:	e00c      	b.n	801a6b6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 801a69c:	687a      	ldr	r2, [r7, #4]
 801a69e:	4613      	mov	r3, r2
 801a6a0:	009b      	lsls	r3, r3, #2
 801a6a2:	4413      	add	r3, r2
 801a6a4:	009b      	lsls	r3, r3, #2
 801a6a6:	4a12      	ldr	r2, [pc, #72]	; (801a6f0 <prvInitialiseTaskLists+0x60>)
 801a6a8:	4413      	add	r3, r2
 801a6aa:	4618      	mov	r0, r3
 801a6ac:	f7fe fd0e 	bl	80190cc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 801a6b0:	687b      	ldr	r3, [r7, #4]
 801a6b2:	3301      	adds	r3, #1
 801a6b4:	607b      	str	r3, [r7, #4]
 801a6b6:	687b      	ldr	r3, [r7, #4]
 801a6b8:	2b37      	cmp	r3, #55	; 0x37
 801a6ba:	d9ef      	bls.n	801a69c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 801a6bc:	480d      	ldr	r0, [pc, #52]	; (801a6f4 <prvInitialiseTaskLists+0x64>)
 801a6be:	f7fe fd05 	bl	80190cc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 801a6c2:	480d      	ldr	r0, [pc, #52]	; (801a6f8 <prvInitialiseTaskLists+0x68>)
 801a6c4:	f7fe fd02 	bl	80190cc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 801a6c8:	480c      	ldr	r0, [pc, #48]	; (801a6fc <prvInitialiseTaskLists+0x6c>)
 801a6ca:	f7fe fcff 	bl	80190cc <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 801a6ce:	480c      	ldr	r0, [pc, #48]	; (801a700 <prvInitialiseTaskLists+0x70>)
 801a6d0:	f7fe fcfc 	bl	80190cc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 801a6d4:	480b      	ldr	r0, [pc, #44]	; (801a704 <prvInitialiseTaskLists+0x74>)
 801a6d6:	f7fe fcf9 	bl	80190cc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 801a6da:	4b0b      	ldr	r3, [pc, #44]	; (801a708 <prvInitialiseTaskLists+0x78>)
 801a6dc:	4a05      	ldr	r2, [pc, #20]	; (801a6f4 <prvInitialiseTaskLists+0x64>)
 801a6de:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 801a6e0:	4b0a      	ldr	r3, [pc, #40]	; (801a70c <prvInitialiseTaskLists+0x7c>)
 801a6e2:	4a05      	ldr	r2, [pc, #20]	; (801a6f8 <prvInitialiseTaskLists+0x68>)
 801a6e4:	601a      	str	r2, [r3, #0]
}
 801a6e6:	bf00      	nop
 801a6e8:	3708      	adds	r7, #8
 801a6ea:	46bd      	mov	sp, r7
 801a6ec:	bd80      	pop	{r7, pc}
 801a6ee:	bf00      	nop
 801a6f0:	200012e0 	.word	0x200012e0
 801a6f4:	20001740 	.word	0x20001740
 801a6f8:	20001754 	.word	0x20001754
 801a6fc:	20001770 	.word	0x20001770
 801a700:	20001784 	.word	0x20001784
 801a704:	2000179c 	.word	0x2000179c
 801a708:	20001768 	.word	0x20001768
 801a70c:	2000176c 	.word	0x2000176c

0801a710 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 801a710:	b580      	push	{r7, lr}
 801a712:	b082      	sub	sp, #8
 801a714:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 801a716:	e019      	b.n	801a74c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 801a718:	f000 fc9e 	bl	801b058 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801a71c:	4b10      	ldr	r3, [pc, #64]	; (801a760 <prvCheckTasksWaitingTermination+0x50>)
 801a71e:	68db      	ldr	r3, [r3, #12]
 801a720:	68db      	ldr	r3, [r3, #12]
 801a722:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801a724:	687b      	ldr	r3, [r7, #4]
 801a726:	3304      	adds	r3, #4
 801a728:	4618      	mov	r0, r3
 801a72a:	f7fe fd59 	bl	80191e0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 801a72e:	4b0d      	ldr	r3, [pc, #52]	; (801a764 <prvCheckTasksWaitingTermination+0x54>)
 801a730:	681b      	ldr	r3, [r3, #0]
 801a732:	3b01      	subs	r3, #1
 801a734:	4a0b      	ldr	r2, [pc, #44]	; (801a764 <prvCheckTasksWaitingTermination+0x54>)
 801a736:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 801a738:	4b0b      	ldr	r3, [pc, #44]	; (801a768 <prvCheckTasksWaitingTermination+0x58>)
 801a73a:	681b      	ldr	r3, [r3, #0]
 801a73c:	3b01      	subs	r3, #1
 801a73e:	4a0a      	ldr	r2, [pc, #40]	; (801a768 <prvCheckTasksWaitingTermination+0x58>)
 801a740:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 801a742:	f000 fc9b 	bl	801b07c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 801a746:	6878      	ldr	r0, [r7, #4]
 801a748:	f000 f810 	bl	801a76c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 801a74c:	4b06      	ldr	r3, [pc, #24]	; (801a768 <prvCheckTasksWaitingTermination+0x58>)
 801a74e:	681b      	ldr	r3, [r3, #0]
 801a750:	2b00      	cmp	r3, #0
 801a752:	d1e1      	bne.n	801a718 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 801a754:	bf00      	nop
 801a756:	bf00      	nop
 801a758:	3708      	adds	r7, #8
 801a75a:	46bd      	mov	sp, r7
 801a75c:	bd80      	pop	{r7, pc}
 801a75e:	bf00      	nop
 801a760:	20001784 	.word	0x20001784
 801a764:	200017b0 	.word	0x200017b0
 801a768:	20001798 	.word	0x20001798

0801a76c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 801a76c:	b580      	push	{r7, lr}
 801a76e:	b082      	sub	sp, #8
 801a770:	af00      	add	r7, sp, #0
 801a772:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 801a774:	687b      	ldr	r3, [r7, #4]
 801a776:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 801a77a:	2b00      	cmp	r3, #0
 801a77c:	d108      	bne.n	801a790 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 801a77e:	687b      	ldr	r3, [r7, #4]
 801a780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801a782:	4618      	mov	r0, r3
 801a784:	f000 feb4 	bl	801b4f0 <vPortFree>
				vPortFree( pxTCB );
 801a788:	6878      	ldr	r0, [r7, #4]
 801a78a:	f000 feb1 	bl	801b4f0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 801a78e:	e010      	b.n	801a7b2 <prvDeleteTCB+0x46>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 801a790:	687b      	ldr	r3, [r7, #4]
 801a792:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 801a796:	2b01      	cmp	r3, #1
 801a798:	d103      	bne.n	801a7a2 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 801a79a:	6878      	ldr	r0, [r7, #4]
 801a79c:	f000 fea8 	bl	801b4f0 <vPortFree>
	}
 801a7a0:	e007      	b.n	801a7b2 <prvDeleteTCB+0x46>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 801a7a2:	687b      	ldr	r3, [r7, #4]
 801a7a4:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 801a7a8:	2b02      	cmp	r3, #2
 801a7aa:	d002      	beq.n	801a7b2 <prvDeleteTCB+0x46>
 801a7ac:	f000 fd8c 	bl	801b2c8 <ulSetInterruptMask>
 801a7b0:	e7fe      	b.n	801a7b0 <prvDeleteTCB+0x44>
	}
 801a7b2:	bf00      	nop
 801a7b4:	3708      	adds	r7, #8
 801a7b6:	46bd      	mov	sp, r7
 801a7b8:	bd80      	pop	{r7, pc}
	...

0801a7bc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 801a7bc:	b480      	push	{r7}
 801a7be:	b083      	sub	sp, #12
 801a7c0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801a7c2:	4b0c      	ldr	r3, [pc, #48]	; (801a7f4 <prvResetNextTaskUnblockTime+0x38>)
 801a7c4:	681b      	ldr	r3, [r3, #0]
 801a7c6:	681b      	ldr	r3, [r3, #0]
 801a7c8:	2b00      	cmp	r3, #0
 801a7ca:	d104      	bne.n	801a7d6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 801a7cc:	4b0a      	ldr	r3, [pc, #40]	; (801a7f8 <prvResetNextTaskUnblockTime+0x3c>)
 801a7ce:	f04f 32ff 	mov.w	r2, #4294967295
 801a7d2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 801a7d4:	e008      	b.n	801a7e8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801a7d6:	4b07      	ldr	r3, [pc, #28]	; (801a7f4 <prvResetNextTaskUnblockTime+0x38>)
 801a7d8:	681b      	ldr	r3, [r3, #0]
 801a7da:	68db      	ldr	r3, [r3, #12]
 801a7dc:	68db      	ldr	r3, [r3, #12]
 801a7de:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 801a7e0:	687b      	ldr	r3, [r7, #4]
 801a7e2:	685b      	ldr	r3, [r3, #4]
 801a7e4:	4a04      	ldr	r2, [pc, #16]	; (801a7f8 <prvResetNextTaskUnblockTime+0x3c>)
 801a7e6:	6013      	str	r3, [r2, #0]
}
 801a7e8:	bf00      	nop
 801a7ea:	370c      	adds	r7, #12
 801a7ec:	46bd      	mov	sp, r7
 801a7ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a7f2:	4770      	bx	lr
 801a7f4:	20001768 	.word	0x20001768
 801a7f8:	200017d0 	.word	0x200017d0

0801a7fc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 801a7fc:	b480      	push	{r7}
 801a7fe:	b083      	sub	sp, #12
 801a800:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 801a802:	4b0b      	ldr	r3, [pc, #44]	; (801a830 <xTaskGetSchedulerState+0x34>)
 801a804:	681b      	ldr	r3, [r3, #0]
 801a806:	2b00      	cmp	r3, #0
 801a808:	d102      	bne.n	801a810 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 801a80a:	2301      	movs	r3, #1
 801a80c:	607b      	str	r3, [r7, #4]
 801a80e:	e008      	b.n	801a822 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801a810:	4b08      	ldr	r3, [pc, #32]	; (801a834 <xTaskGetSchedulerState+0x38>)
 801a812:	681b      	ldr	r3, [r3, #0]
 801a814:	2b00      	cmp	r3, #0
 801a816:	d102      	bne.n	801a81e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 801a818:	2302      	movs	r3, #2
 801a81a:	607b      	str	r3, [r7, #4]
 801a81c:	e001      	b.n	801a822 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 801a81e:	2300      	movs	r3, #0
 801a820:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 801a822:	687b      	ldr	r3, [r7, #4]
	}
 801a824:	4618      	mov	r0, r3
 801a826:	370c      	adds	r7, #12
 801a828:	46bd      	mov	sp, r7
 801a82a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a82e:	4770      	bx	lr
 801a830:	200017bc 	.word	0x200017bc
 801a834:	200017d8 	.word	0x200017d8

0801a838 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 801a838:	b580      	push	{r7, lr}
 801a83a:	b084      	sub	sp, #16
 801a83c:	af00      	add	r7, sp, #0
 801a83e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 801a840:	687b      	ldr	r3, [r7, #4]
 801a842:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 801a844:	2300      	movs	r3, #0
 801a846:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
 801a848:	687b      	ldr	r3, [r7, #4]
 801a84a:	2b00      	cmp	r3, #0
 801a84c:	d046      	beq.n	801a8dc <xTaskPriorityDisinherit+0xa4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 801a84e:	4b26      	ldr	r3, [pc, #152]	; (801a8e8 <xTaskPriorityDisinherit+0xb0>)
 801a850:	681b      	ldr	r3, [r3, #0]
 801a852:	68ba      	ldr	r2, [r7, #8]
 801a854:	429a      	cmp	r2, r3
 801a856:	d002      	beq.n	801a85e <xTaskPriorityDisinherit+0x26>
 801a858:	f000 fd36 	bl	801b2c8 <ulSetInterruptMask>
 801a85c:	e7fe      	b.n	801a85c <xTaskPriorityDisinherit+0x24>
			configASSERT( pxTCB->uxMutexesHeld );
 801a85e:	68bb      	ldr	r3, [r7, #8]
 801a860:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801a862:	2b00      	cmp	r3, #0
 801a864:	d102      	bne.n	801a86c <xTaskPriorityDisinherit+0x34>
 801a866:	f000 fd2f 	bl	801b2c8 <ulSetInterruptMask>
 801a86a:	e7fe      	b.n	801a86a <xTaskPriorityDisinherit+0x32>
			( pxTCB->uxMutexesHeld )--;
 801a86c:	68bb      	ldr	r3, [r7, #8]
 801a86e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801a870:	1e5a      	subs	r2, r3, #1
 801a872:	68bb      	ldr	r3, [r7, #8]
 801a874:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 801a876:	68bb      	ldr	r3, [r7, #8]
 801a878:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801a87a:	68bb      	ldr	r3, [r7, #8]
 801a87c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801a87e:	429a      	cmp	r2, r3
 801a880:	d02c      	beq.n	801a8dc <xTaskPriorityDisinherit+0xa4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 801a882:	68bb      	ldr	r3, [r7, #8]
 801a884:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801a886:	2b00      	cmp	r3, #0
 801a888:	d128      	bne.n	801a8dc <xTaskPriorityDisinherit+0xa4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801a88a:	68bb      	ldr	r3, [r7, #8]
 801a88c:	3304      	adds	r3, #4
 801a88e:	4618      	mov	r0, r3
 801a890:	f7fe fca6 	bl	80191e0 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 801a894:	68bb      	ldr	r3, [r7, #8]
 801a896:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801a898:	68bb      	ldr	r3, [r7, #8]
 801a89a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801a89c:	68bb      	ldr	r3, [r7, #8]
 801a89e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a8a0:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 801a8a4:	68bb      	ldr	r3, [r7, #8]
 801a8a6:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 801a8a8:	68bb      	ldr	r3, [r7, #8]
 801a8aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801a8ac:	4b0f      	ldr	r3, [pc, #60]	; (801a8ec <xTaskPriorityDisinherit+0xb4>)
 801a8ae:	681b      	ldr	r3, [r3, #0]
 801a8b0:	429a      	cmp	r2, r3
 801a8b2:	d903      	bls.n	801a8bc <xTaskPriorityDisinherit+0x84>
 801a8b4:	68bb      	ldr	r3, [r7, #8]
 801a8b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a8b8:	4a0c      	ldr	r2, [pc, #48]	; (801a8ec <xTaskPriorityDisinherit+0xb4>)
 801a8ba:	6013      	str	r3, [r2, #0]
 801a8bc:	68bb      	ldr	r3, [r7, #8]
 801a8be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801a8c0:	4613      	mov	r3, r2
 801a8c2:	009b      	lsls	r3, r3, #2
 801a8c4:	4413      	add	r3, r2
 801a8c6:	009b      	lsls	r3, r3, #2
 801a8c8:	4a09      	ldr	r2, [pc, #36]	; (801a8f0 <xTaskPriorityDisinherit+0xb8>)
 801a8ca:	441a      	add	r2, r3
 801a8cc:	68bb      	ldr	r3, [r7, #8]
 801a8ce:	3304      	adds	r3, #4
 801a8d0:	4619      	mov	r1, r3
 801a8d2:	4610      	mov	r0, r2
 801a8d4:	f7fe fc27 	bl	8019126 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 801a8d8:	2301      	movs	r3, #1
 801a8da:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 801a8dc:	68fb      	ldr	r3, [r7, #12]
	}
 801a8de:	4618      	mov	r0, r3
 801a8e0:	3710      	adds	r7, #16
 801a8e2:	46bd      	mov	sp, r7
 801a8e4:	bd80      	pop	{r7, pc}
 801a8e6:	bf00      	nop
 801a8e8:	200012dc 	.word	0x200012dc
 801a8ec:	200017b8 	.word	0x200017b8
 801a8f0:	200012e0 	.word	0x200012e0

0801a8f4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 801a8f4:	b580      	push	{r7, lr}
 801a8f6:	b084      	sub	sp, #16
 801a8f8:	af00      	add	r7, sp, #0
 801a8fa:	6078      	str	r0, [r7, #4]
 801a8fc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 801a8fe:	4b21      	ldr	r3, [pc, #132]	; (801a984 <prvAddCurrentTaskToDelayedList+0x90>)
 801a900:	681b      	ldr	r3, [r3, #0]
 801a902:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801a904:	4b20      	ldr	r3, [pc, #128]	; (801a988 <prvAddCurrentTaskToDelayedList+0x94>)
 801a906:	681b      	ldr	r3, [r3, #0]
 801a908:	3304      	adds	r3, #4
 801a90a:	4618      	mov	r0, r3
 801a90c:	f7fe fc68 	bl	80191e0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 801a910:	687b      	ldr	r3, [r7, #4]
 801a912:	f1b3 3fff 	cmp.w	r3, #4294967295
 801a916:	d10a      	bne.n	801a92e <prvAddCurrentTaskToDelayedList+0x3a>
 801a918:	683b      	ldr	r3, [r7, #0]
 801a91a:	2b00      	cmp	r3, #0
 801a91c:	d007      	beq.n	801a92e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801a91e:	4b1a      	ldr	r3, [pc, #104]	; (801a988 <prvAddCurrentTaskToDelayedList+0x94>)
 801a920:	681b      	ldr	r3, [r3, #0]
 801a922:	3304      	adds	r3, #4
 801a924:	4619      	mov	r1, r3
 801a926:	4819      	ldr	r0, [pc, #100]	; (801a98c <prvAddCurrentTaskToDelayedList+0x98>)
 801a928:	f7fe fbfd 	bl	8019126 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 801a92c:	e026      	b.n	801a97c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 801a92e:	68fa      	ldr	r2, [r7, #12]
 801a930:	687b      	ldr	r3, [r7, #4]
 801a932:	4413      	add	r3, r2
 801a934:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 801a936:	4b14      	ldr	r3, [pc, #80]	; (801a988 <prvAddCurrentTaskToDelayedList+0x94>)
 801a938:	681b      	ldr	r3, [r3, #0]
 801a93a:	68ba      	ldr	r2, [r7, #8]
 801a93c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 801a93e:	68ba      	ldr	r2, [r7, #8]
 801a940:	68fb      	ldr	r3, [r7, #12]
 801a942:	429a      	cmp	r2, r3
 801a944:	d209      	bcs.n	801a95a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801a946:	4b12      	ldr	r3, [pc, #72]	; (801a990 <prvAddCurrentTaskToDelayedList+0x9c>)
 801a948:	681a      	ldr	r2, [r3, #0]
 801a94a:	4b0f      	ldr	r3, [pc, #60]	; (801a988 <prvAddCurrentTaskToDelayedList+0x94>)
 801a94c:	681b      	ldr	r3, [r3, #0]
 801a94e:	3304      	adds	r3, #4
 801a950:	4619      	mov	r1, r3
 801a952:	4610      	mov	r0, r2
 801a954:	f7fe fc0b 	bl	801916e <vListInsert>
}
 801a958:	e010      	b.n	801a97c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801a95a:	4b0e      	ldr	r3, [pc, #56]	; (801a994 <prvAddCurrentTaskToDelayedList+0xa0>)
 801a95c:	681a      	ldr	r2, [r3, #0]
 801a95e:	4b0a      	ldr	r3, [pc, #40]	; (801a988 <prvAddCurrentTaskToDelayedList+0x94>)
 801a960:	681b      	ldr	r3, [r3, #0]
 801a962:	3304      	adds	r3, #4
 801a964:	4619      	mov	r1, r3
 801a966:	4610      	mov	r0, r2
 801a968:	f7fe fc01 	bl	801916e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 801a96c:	4b0a      	ldr	r3, [pc, #40]	; (801a998 <prvAddCurrentTaskToDelayedList+0xa4>)
 801a96e:	681b      	ldr	r3, [r3, #0]
 801a970:	68ba      	ldr	r2, [r7, #8]
 801a972:	429a      	cmp	r2, r3
 801a974:	d202      	bcs.n	801a97c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 801a976:	4a08      	ldr	r2, [pc, #32]	; (801a998 <prvAddCurrentTaskToDelayedList+0xa4>)
 801a978:	68bb      	ldr	r3, [r7, #8]
 801a97a:	6013      	str	r3, [r2, #0]
}
 801a97c:	bf00      	nop
 801a97e:	3710      	adds	r7, #16
 801a980:	46bd      	mov	sp, r7
 801a982:	bd80      	pop	{r7, pc}
 801a984:	200017b4 	.word	0x200017b4
 801a988:	200012dc 	.word	0x200012dc
 801a98c:	2000179c 	.word	0x2000179c
 801a990:	2000176c 	.word	0x2000176c
 801a994:	20001768 	.word	0x20001768
 801a998:	200017d0 	.word	0x200017d0

0801a99c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 801a99c:	b580      	push	{r7, lr}
 801a99e:	b088      	sub	sp, #32
 801a9a0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 801a9a2:	2300      	movs	r3, #0
 801a9a4:	60fb      	str	r3, [r7, #12]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 801a9a6:	f000 fac7 	bl	801af38 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 801a9aa:	4b18      	ldr	r3, [pc, #96]	; (801aa0c <xTimerCreateTimerTask+0x70>)
 801a9ac:	681b      	ldr	r3, [r3, #0]
 801a9ae:	2b00      	cmp	r3, #0
 801a9b0:	d020      	beq.n	801a9f4 <xTimerCreateTimerTask+0x58>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 801a9b2:	2300      	movs	r3, #0
 801a9b4:	60bb      	str	r3, [r7, #8]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 801a9b6:	2300      	movs	r3, #0
 801a9b8:	607b      	str	r3, [r7, #4]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 801a9ba:	463a      	mov	r2, r7
 801a9bc:	1d39      	adds	r1, r7, #4
 801a9be:	f107 0308 	add.w	r3, r7, #8
 801a9c2:	4618      	mov	r0, r3
 801a9c4:	f7fe fb68 	bl	8019098 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 801a9c8:	6839      	ldr	r1, [r7, #0]
 801a9ca:	687b      	ldr	r3, [r7, #4]
 801a9cc:	68ba      	ldr	r2, [r7, #8]
 801a9ce:	9202      	str	r2, [sp, #8]
 801a9d0:	9301      	str	r3, [sp, #4]
 801a9d2:	2302      	movs	r3, #2
 801a9d4:	9300      	str	r3, [sp, #0]
 801a9d6:	2300      	movs	r3, #0
 801a9d8:	460a      	mov	r2, r1
 801a9da:	490d      	ldr	r1, [pc, #52]	; (801aa10 <xTimerCreateTimerTask+0x74>)
 801a9dc:	480d      	ldr	r0, [pc, #52]	; (801aa14 <xTimerCreateTimerTask+0x78>)
 801a9de:	f7ff f855 	bl	8019a8c <xTaskCreateStatic>
 801a9e2:	4603      	mov	r3, r0
 801a9e4:	4a0c      	ldr	r2, [pc, #48]	; (801aa18 <xTimerCreateTimerTask+0x7c>)
 801a9e6:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 801a9e8:	4b0b      	ldr	r3, [pc, #44]	; (801aa18 <xTimerCreateTimerTask+0x7c>)
 801a9ea:	681b      	ldr	r3, [r3, #0]
 801a9ec:	2b00      	cmp	r3, #0
 801a9ee:	d001      	beq.n	801a9f4 <xTimerCreateTimerTask+0x58>
			{
				xReturn = pdPASS;
 801a9f0:	2301      	movs	r3, #1
 801a9f2:	60fb      	str	r3, [r7, #12]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 801a9f4:	68fb      	ldr	r3, [r7, #12]
 801a9f6:	2b00      	cmp	r3, #0
 801a9f8:	d102      	bne.n	801aa00 <xTimerCreateTimerTask+0x64>
 801a9fa:	f000 fc65 	bl	801b2c8 <ulSetInterruptMask>
 801a9fe:	e7fe      	b.n	801a9fe <xTimerCreateTimerTask+0x62>
	return xReturn;
 801aa00:	68fb      	ldr	r3, [r7, #12]
}
 801aa02:	4618      	mov	r0, r3
 801aa04:	3710      	adds	r7, #16
 801aa06:	46bd      	mov	sp, r7
 801aa08:	bd80      	pop	{r7, pc}
 801aa0a:	bf00      	nop
 801aa0c:	2000180c 	.word	0x2000180c
 801aa10:	0801f194 	.word	0x0801f194
 801aa14:	0801ab31 	.word	0x0801ab31
 801aa18:	20001810 	.word	0x20001810

0801aa1c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 801aa1c:	b580      	push	{r7, lr}
 801aa1e:	b08a      	sub	sp, #40	; 0x28
 801aa20:	af00      	add	r7, sp, #0
 801aa22:	60f8      	str	r0, [r7, #12]
 801aa24:	60b9      	str	r1, [r7, #8]
 801aa26:	607a      	str	r2, [r7, #4]
 801aa28:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 801aa2a:	2300      	movs	r3, #0
 801aa2c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 801aa2e:	68fb      	ldr	r3, [r7, #12]
 801aa30:	2b00      	cmp	r3, #0
 801aa32:	d102      	bne.n	801aa3a <xTimerGenericCommand+0x1e>
 801aa34:	f000 fc48 	bl	801b2c8 <ulSetInterruptMask>
 801aa38:	e7fe      	b.n	801aa38 <xTimerGenericCommand+0x1c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 801aa3a:	4b1a      	ldr	r3, [pc, #104]	; (801aaa4 <xTimerGenericCommand+0x88>)
 801aa3c:	681b      	ldr	r3, [r3, #0]
 801aa3e:	2b00      	cmp	r3, #0
 801aa40:	d02a      	beq.n	801aa98 <xTimerGenericCommand+0x7c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 801aa42:	68bb      	ldr	r3, [r7, #8]
 801aa44:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 801aa46:	687b      	ldr	r3, [r7, #4]
 801aa48:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 801aa4a:	68fb      	ldr	r3, [r7, #12]
 801aa4c:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 801aa4e:	68bb      	ldr	r3, [r7, #8]
 801aa50:	2b05      	cmp	r3, #5
 801aa52:	dc18      	bgt.n	801aa86 <xTimerGenericCommand+0x6a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 801aa54:	f7ff fed2 	bl	801a7fc <xTaskGetSchedulerState>
 801aa58:	4603      	mov	r3, r0
 801aa5a:	2b02      	cmp	r3, #2
 801aa5c:	d109      	bne.n	801aa72 <xTimerGenericCommand+0x56>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 801aa5e:	4b11      	ldr	r3, [pc, #68]	; (801aaa4 <xTimerGenericCommand+0x88>)
 801aa60:	6818      	ldr	r0, [r3, #0]
 801aa62:	f107 0114 	add.w	r1, r7, #20
 801aa66:	2300      	movs	r3, #0
 801aa68:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801aa6a:	f7fe fcae 	bl	80193ca <xQueueGenericSend>
 801aa6e:	6278      	str	r0, [r7, #36]	; 0x24
 801aa70:	e012      	b.n	801aa98 <xTimerGenericCommand+0x7c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 801aa72:	4b0c      	ldr	r3, [pc, #48]	; (801aaa4 <xTimerGenericCommand+0x88>)
 801aa74:	6818      	ldr	r0, [r3, #0]
 801aa76:	f107 0114 	add.w	r1, r7, #20
 801aa7a:	2300      	movs	r3, #0
 801aa7c:	2200      	movs	r2, #0
 801aa7e:	f7fe fca4 	bl	80193ca <xQueueGenericSend>
 801aa82:	6278      	str	r0, [r7, #36]	; 0x24
 801aa84:	e008      	b.n	801aa98 <xTimerGenericCommand+0x7c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 801aa86:	4b07      	ldr	r3, [pc, #28]	; (801aaa4 <xTimerGenericCommand+0x88>)
 801aa88:	6818      	ldr	r0, [r3, #0]
 801aa8a:	f107 0114 	add.w	r1, r7, #20
 801aa8e:	2300      	movs	r3, #0
 801aa90:	683a      	ldr	r2, [r7, #0]
 801aa92:	f7fe fd63 	bl	801955c <xQueueGenericSendFromISR>
 801aa96:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 801aa98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 801aa9a:	4618      	mov	r0, r3
 801aa9c:	3728      	adds	r7, #40	; 0x28
 801aa9e:	46bd      	mov	sp, r7
 801aaa0:	bd80      	pop	{r7, pc}
 801aaa2:	bf00      	nop
 801aaa4:	2000180c 	.word	0x2000180c

0801aaa8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 801aaa8:	b580      	push	{r7, lr}
 801aaaa:	b086      	sub	sp, #24
 801aaac:	af02      	add	r7, sp, #8
 801aaae:	6078      	str	r0, [r7, #4]
 801aab0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801aab2:	4b1e      	ldr	r3, [pc, #120]	; (801ab2c <prvProcessExpiredTimer+0x84>)
 801aab4:	681b      	ldr	r3, [r3, #0]
 801aab6:	68db      	ldr	r3, [r3, #12]
 801aab8:	68db      	ldr	r3, [r3, #12]
 801aaba:	60fb      	str	r3, [r7, #12]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 801aabc:	68fb      	ldr	r3, [r7, #12]
 801aabe:	3304      	adds	r3, #4
 801aac0:	4618      	mov	r0, r3
 801aac2:	f7fe fb8d 	bl	80191e0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801aac6:	68fb      	ldr	r3, [r7, #12]
 801aac8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801aacc:	f003 0304 	and.w	r3, r3, #4
 801aad0:	2b00      	cmp	r3, #0
 801aad2:	d01a      	beq.n	801ab0a <prvProcessExpiredTimer+0x62>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 801aad4:	68fb      	ldr	r3, [r7, #12]
 801aad6:	699a      	ldr	r2, [r3, #24]
 801aad8:	687b      	ldr	r3, [r7, #4]
 801aada:	18d1      	adds	r1, r2, r3
 801aadc:	687b      	ldr	r3, [r7, #4]
 801aade:	683a      	ldr	r2, [r7, #0]
 801aae0:	68f8      	ldr	r0, [r7, #12]
 801aae2:	f000 f8c1 	bl	801ac68 <prvInsertTimerInActiveList>
 801aae6:	4603      	mov	r3, r0
 801aae8:	2b00      	cmp	r3, #0
 801aaea:	d017      	beq.n	801ab1c <prvProcessExpiredTimer+0x74>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 801aaec:	2300      	movs	r3, #0
 801aaee:	9300      	str	r3, [sp, #0]
 801aaf0:	2300      	movs	r3, #0
 801aaf2:	687a      	ldr	r2, [r7, #4]
 801aaf4:	2100      	movs	r1, #0
 801aaf6:	68f8      	ldr	r0, [r7, #12]
 801aaf8:	f7ff ff90 	bl	801aa1c <xTimerGenericCommand>
 801aafc:	60b8      	str	r0, [r7, #8]
			configASSERT( xResult );
 801aafe:	68bb      	ldr	r3, [r7, #8]
 801ab00:	2b00      	cmp	r3, #0
 801ab02:	d10b      	bne.n	801ab1c <prvProcessExpiredTimer+0x74>
 801ab04:	f000 fbe0 	bl	801b2c8 <ulSetInterruptMask>
 801ab08:	e7fe      	b.n	801ab08 <prvProcessExpiredTimer+0x60>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 801ab0a:	68fb      	ldr	r3, [r7, #12]
 801ab0c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801ab10:	f023 0301 	bic.w	r3, r3, #1
 801ab14:	b2da      	uxtb	r2, r3
 801ab16:	68fb      	ldr	r3, [r7, #12]
 801ab18:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801ab1c:	68fb      	ldr	r3, [r7, #12]
 801ab1e:	6a1b      	ldr	r3, [r3, #32]
 801ab20:	68f8      	ldr	r0, [r7, #12]
 801ab22:	4798      	blx	r3
}
 801ab24:	bf00      	nop
 801ab26:	3710      	adds	r7, #16
 801ab28:	46bd      	mov	sp, r7
 801ab2a:	bd80      	pop	{r7, pc}
 801ab2c:	20001804 	.word	0x20001804

0801ab30 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 801ab30:	b580      	push	{r7, lr}
 801ab32:	b084      	sub	sp, #16
 801ab34:	af00      	add	r7, sp, #0
 801ab36:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 801ab38:	f107 0308 	add.w	r3, r7, #8
 801ab3c:	4618      	mov	r0, r3
 801ab3e:	f000 f84f 	bl	801abe0 <prvGetNextExpireTime>
 801ab42:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 801ab44:	68bb      	ldr	r3, [r7, #8]
 801ab46:	4619      	mov	r1, r3
 801ab48:	68f8      	ldr	r0, [r7, #12]
 801ab4a:	f000 f803 	bl	801ab54 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 801ab4e:	f000 f8cd 	bl	801acec <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 801ab52:	e7f1      	b.n	801ab38 <prvTimerTask+0x8>

0801ab54 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 801ab54:	b580      	push	{r7, lr}
 801ab56:	b084      	sub	sp, #16
 801ab58:	af00      	add	r7, sp, #0
 801ab5a:	6078      	str	r0, [r7, #4]
 801ab5c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 801ab5e:	f7ff fac5 	bl	801a0ec <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 801ab62:	f107 0308 	add.w	r3, r7, #8
 801ab66:	4618      	mov	r0, r3
 801ab68:	f000 f85e 	bl	801ac28 <prvSampleTimeNow>
 801ab6c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 801ab6e:	68bb      	ldr	r3, [r7, #8]
 801ab70:	2b00      	cmp	r3, #0
 801ab72:	d12a      	bne.n	801abca <prvProcessTimerOrBlockTask+0x76>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 801ab74:	683b      	ldr	r3, [r7, #0]
 801ab76:	2b00      	cmp	r3, #0
 801ab78:	d10a      	bne.n	801ab90 <prvProcessTimerOrBlockTask+0x3c>
 801ab7a:	687a      	ldr	r2, [r7, #4]
 801ab7c:	68fb      	ldr	r3, [r7, #12]
 801ab7e:	429a      	cmp	r2, r3
 801ab80:	d806      	bhi.n	801ab90 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 801ab82:	f7ff fac1 	bl	801a108 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 801ab86:	68f9      	ldr	r1, [r7, #12]
 801ab88:	6878      	ldr	r0, [r7, #4]
 801ab8a:	f7ff ff8d 	bl	801aaa8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 801ab8e:	e01e      	b.n	801abce <prvProcessTimerOrBlockTask+0x7a>
				if( xListWasEmpty != pdFALSE )
 801ab90:	683b      	ldr	r3, [r7, #0]
 801ab92:	2b00      	cmp	r3, #0
 801ab94:	d008      	beq.n	801aba8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 801ab96:	4b10      	ldr	r3, [pc, #64]	; (801abd8 <prvProcessTimerOrBlockTask+0x84>)
 801ab98:	681b      	ldr	r3, [r3, #0]
 801ab9a:	681b      	ldr	r3, [r3, #0]
 801ab9c:	2b00      	cmp	r3, #0
 801ab9e:	d101      	bne.n	801aba4 <prvProcessTimerOrBlockTask+0x50>
 801aba0:	2301      	movs	r3, #1
 801aba2:	e000      	b.n	801aba6 <prvProcessTimerOrBlockTask+0x52>
 801aba4:	2300      	movs	r3, #0
 801aba6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 801aba8:	4b0c      	ldr	r3, [pc, #48]	; (801abdc <prvProcessTimerOrBlockTask+0x88>)
 801abaa:	6818      	ldr	r0, [r3, #0]
 801abac:	687a      	ldr	r2, [r7, #4]
 801abae:	68fb      	ldr	r3, [r7, #12]
 801abb0:	1ad3      	subs	r3, r2, r3
 801abb2:	683a      	ldr	r2, [r7, #0]
 801abb4:	4619      	mov	r1, r3
 801abb6:	f7fe ff35 	bl	8019a24 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 801abba:	f7ff faa5 	bl	801a108 <xTaskResumeAll>
 801abbe:	4603      	mov	r3, r0
 801abc0:	2b00      	cmp	r3, #0
 801abc2:	d104      	bne.n	801abce <prvProcessTimerOrBlockTask+0x7a>
					portYIELD_WITHIN_API();
 801abc4:	f000 fa36 	bl	801b034 <vPortYield>
}
 801abc8:	e001      	b.n	801abce <prvProcessTimerOrBlockTask+0x7a>
			( void ) xTaskResumeAll();
 801abca:	f7ff fa9d 	bl	801a108 <xTaskResumeAll>
}
 801abce:	bf00      	nop
 801abd0:	3710      	adds	r7, #16
 801abd2:	46bd      	mov	sp, r7
 801abd4:	bd80      	pop	{r7, pc}
 801abd6:	bf00      	nop
 801abd8:	20001808 	.word	0x20001808
 801abdc:	2000180c 	.word	0x2000180c

0801abe0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 801abe0:	b480      	push	{r7}
 801abe2:	b085      	sub	sp, #20
 801abe4:	af00      	add	r7, sp, #0
 801abe6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 801abe8:	4b0e      	ldr	r3, [pc, #56]	; (801ac24 <prvGetNextExpireTime+0x44>)
 801abea:	681b      	ldr	r3, [r3, #0]
 801abec:	681b      	ldr	r3, [r3, #0]
 801abee:	2b00      	cmp	r3, #0
 801abf0:	d101      	bne.n	801abf6 <prvGetNextExpireTime+0x16>
 801abf2:	2201      	movs	r2, #1
 801abf4:	e000      	b.n	801abf8 <prvGetNextExpireTime+0x18>
 801abf6:	2200      	movs	r2, #0
 801abf8:	687b      	ldr	r3, [r7, #4]
 801abfa:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 801abfc:	687b      	ldr	r3, [r7, #4]
 801abfe:	681b      	ldr	r3, [r3, #0]
 801ac00:	2b00      	cmp	r3, #0
 801ac02:	d105      	bne.n	801ac10 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 801ac04:	4b07      	ldr	r3, [pc, #28]	; (801ac24 <prvGetNextExpireTime+0x44>)
 801ac06:	681b      	ldr	r3, [r3, #0]
 801ac08:	68db      	ldr	r3, [r3, #12]
 801ac0a:	681b      	ldr	r3, [r3, #0]
 801ac0c:	60fb      	str	r3, [r7, #12]
 801ac0e:	e001      	b.n	801ac14 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 801ac10:	2300      	movs	r3, #0
 801ac12:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 801ac14:	68fb      	ldr	r3, [r7, #12]
}
 801ac16:	4618      	mov	r0, r3
 801ac18:	3714      	adds	r7, #20
 801ac1a:	46bd      	mov	sp, r7
 801ac1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ac20:	4770      	bx	lr
 801ac22:	bf00      	nop
 801ac24:	20001804 	.word	0x20001804

0801ac28 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 801ac28:	b580      	push	{r7, lr}
 801ac2a:	b084      	sub	sp, #16
 801ac2c:	af00      	add	r7, sp, #0
 801ac2e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 801ac30:	f7ff faf8 	bl	801a224 <xTaskGetTickCount>
 801ac34:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 801ac36:	4b0b      	ldr	r3, [pc, #44]	; (801ac64 <prvSampleTimeNow+0x3c>)
 801ac38:	681b      	ldr	r3, [r3, #0]
 801ac3a:	68fa      	ldr	r2, [r7, #12]
 801ac3c:	429a      	cmp	r2, r3
 801ac3e:	d205      	bcs.n	801ac4c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 801ac40:	f000 f91e 	bl	801ae80 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 801ac44:	687b      	ldr	r3, [r7, #4]
 801ac46:	2201      	movs	r2, #1
 801ac48:	601a      	str	r2, [r3, #0]
 801ac4a:	e002      	b.n	801ac52 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 801ac4c:	687b      	ldr	r3, [r7, #4]
 801ac4e:	2200      	movs	r2, #0
 801ac50:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 801ac52:	4a04      	ldr	r2, [pc, #16]	; (801ac64 <prvSampleTimeNow+0x3c>)
 801ac54:	68fb      	ldr	r3, [r7, #12]
 801ac56:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 801ac58:	68fb      	ldr	r3, [r7, #12]
}
 801ac5a:	4618      	mov	r0, r3
 801ac5c:	3710      	adds	r7, #16
 801ac5e:	46bd      	mov	sp, r7
 801ac60:	bd80      	pop	{r7, pc}
 801ac62:	bf00      	nop
 801ac64:	20001814 	.word	0x20001814

0801ac68 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 801ac68:	b580      	push	{r7, lr}
 801ac6a:	b086      	sub	sp, #24
 801ac6c:	af00      	add	r7, sp, #0
 801ac6e:	60f8      	str	r0, [r7, #12]
 801ac70:	60b9      	str	r1, [r7, #8]
 801ac72:	607a      	str	r2, [r7, #4]
 801ac74:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 801ac76:	2300      	movs	r3, #0
 801ac78:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 801ac7a:	68fb      	ldr	r3, [r7, #12]
 801ac7c:	68ba      	ldr	r2, [r7, #8]
 801ac7e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 801ac80:	68fb      	ldr	r3, [r7, #12]
 801ac82:	68fa      	ldr	r2, [r7, #12]
 801ac84:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 801ac86:	68ba      	ldr	r2, [r7, #8]
 801ac88:	687b      	ldr	r3, [r7, #4]
 801ac8a:	429a      	cmp	r2, r3
 801ac8c:	d812      	bhi.n	801acb4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801ac8e:	687a      	ldr	r2, [r7, #4]
 801ac90:	683b      	ldr	r3, [r7, #0]
 801ac92:	1ad2      	subs	r2, r2, r3
 801ac94:	68fb      	ldr	r3, [r7, #12]
 801ac96:	699b      	ldr	r3, [r3, #24]
 801ac98:	429a      	cmp	r2, r3
 801ac9a:	d302      	bcc.n	801aca2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 801ac9c:	2301      	movs	r3, #1
 801ac9e:	617b      	str	r3, [r7, #20]
 801aca0:	e01b      	b.n	801acda <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 801aca2:	4b10      	ldr	r3, [pc, #64]	; (801ace4 <prvInsertTimerInActiveList+0x7c>)
 801aca4:	681a      	ldr	r2, [r3, #0]
 801aca6:	68fb      	ldr	r3, [r7, #12]
 801aca8:	3304      	adds	r3, #4
 801acaa:	4619      	mov	r1, r3
 801acac:	4610      	mov	r0, r2
 801acae:	f7fe fa5e 	bl	801916e <vListInsert>
 801acb2:	e012      	b.n	801acda <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 801acb4:	687a      	ldr	r2, [r7, #4]
 801acb6:	683b      	ldr	r3, [r7, #0]
 801acb8:	429a      	cmp	r2, r3
 801acba:	d206      	bcs.n	801acca <prvInsertTimerInActiveList+0x62>
 801acbc:	68ba      	ldr	r2, [r7, #8]
 801acbe:	683b      	ldr	r3, [r7, #0]
 801acc0:	429a      	cmp	r2, r3
 801acc2:	d302      	bcc.n	801acca <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 801acc4:	2301      	movs	r3, #1
 801acc6:	617b      	str	r3, [r7, #20]
 801acc8:	e007      	b.n	801acda <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 801acca:	4b07      	ldr	r3, [pc, #28]	; (801ace8 <prvInsertTimerInActiveList+0x80>)
 801accc:	681a      	ldr	r2, [r3, #0]
 801acce:	68fb      	ldr	r3, [r7, #12]
 801acd0:	3304      	adds	r3, #4
 801acd2:	4619      	mov	r1, r3
 801acd4:	4610      	mov	r0, r2
 801acd6:	f7fe fa4a 	bl	801916e <vListInsert>
		}
	}

	return xProcessTimerNow;
 801acda:	697b      	ldr	r3, [r7, #20]
}
 801acdc:	4618      	mov	r0, r3
 801acde:	3718      	adds	r7, #24
 801ace0:	46bd      	mov	sp, r7
 801ace2:	bd80      	pop	{r7, pc}
 801ace4:	20001808 	.word	0x20001808
 801ace8:	20001804 	.word	0x20001804

0801acec <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 801acec:	b580      	push	{r7, lr}
 801acee:	b08c      	sub	sp, #48	; 0x30
 801acf0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 801acf2:	e0b2      	b.n	801ae5a <prvProcessReceivedCommands+0x16e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 801acf4:	68bb      	ldr	r3, [r7, #8]
 801acf6:	2b00      	cmp	r3, #0
 801acf8:	da11      	bge.n	801ad1e <prvProcessReceivedCommands+0x32>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 801acfa:	f107 0308 	add.w	r3, r7, #8
 801acfe:	3304      	adds	r3, #4
 801ad00:	627b      	str	r3, [r7, #36]	; 0x24

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 801ad02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ad04:	2b00      	cmp	r3, #0
 801ad06:	d102      	bne.n	801ad0e <prvProcessReceivedCommands+0x22>
 801ad08:	f000 fade 	bl	801b2c8 <ulSetInterruptMask>
 801ad0c:	e7fe      	b.n	801ad0c <prvProcessReceivedCommands+0x20>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 801ad0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ad10:	681b      	ldr	r3, [r3, #0]
 801ad12:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801ad14:	6850      	ldr	r0, [r2, #4]
 801ad16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801ad18:	6892      	ldr	r2, [r2, #8]
 801ad1a:	4611      	mov	r1, r2
 801ad1c:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 801ad1e:	68bb      	ldr	r3, [r7, #8]
 801ad20:	2b00      	cmp	r3, #0
 801ad22:	f2c0 809a 	blt.w	801ae5a <prvProcessReceivedCommands+0x16e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 801ad26:	693b      	ldr	r3, [r7, #16]
 801ad28:	623b      	str	r3, [r7, #32]

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 801ad2a:	6a3b      	ldr	r3, [r7, #32]
 801ad2c:	695b      	ldr	r3, [r3, #20]
 801ad2e:	2b00      	cmp	r3, #0
 801ad30:	d004      	beq.n	801ad3c <prvProcessReceivedCommands+0x50>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 801ad32:	6a3b      	ldr	r3, [r7, #32]
 801ad34:	3304      	adds	r3, #4
 801ad36:	4618      	mov	r0, r3
 801ad38:	f7fe fa52 	bl	80191e0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 801ad3c:	1d3b      	adds	r3, r7, #4
 801ad3e:	4618      	mov	r0, r3
 801ad40:	f7ff ff72 	bl	801ac28 <prvSampleTimeNow>
 801ad44:	61f8      	str	r0, [r7, #28]

			switch( xMessage.xMessageID )
 801ad46:	68bb      	ldr	r3, [r7, #8]
 801ad48:	2b09      	cmp	r3, #9
 801ad4a:	f200 8085 	bhi.w	801ae58 <prvProcessReceivedCommands+0x16c>
 801ad4e:	a201      	add	r2, pc, #4	; (adr r2, 801ad54 <prvProcessReceivedCommands+0x68>)
 801ad50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801ad54:	0801ad7d 	.word	0x0801ad7d
 801ad58:	0801ad7d 	.word	0x0801ad7d
 801ad5c:	0801ad7d 	.word	0x0801ad7d
 801ad60:	0801ade1 	.word	0x0801ade1
 801ad64:	0801adf5 	.word	0x0801adf5
 801ad68:	0801ae2f 	.word	0x0801ae2f
 801ad6c:	0801ad7d 	.word	0x0801ad7d
 801ad70:	0801ad7d 	.word	0x0801ad7d
 801ad74:	0801ade1 	.word	0x0801ade1
 801ad78:	0801adf5 	.word	0x0801adf5
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 801ad7c:	6a3b      	ldr	r3, [r7, #32]
 801ad7e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801ad82:	f043 0301 	orr.w	r3, r3, #1
 801ad86:	b2da      	uxtb	r2, r3
 801ad88:	6a3b      	ldr	r3, [r7, #32]
 801ad8a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 801ad8e:	68fa      	ldr	r2, [r7, #12]
 801ad90:	6a3b      	ldr	r3, [r7, #32]
 801ad92:	699b      	ldr	r3, [r3, #24]
 801ad94:	18d1      	adds	r1, r2, r3
 801ad96:	68fb      	ldr	r3, [r7, #12]
 801ad98:	69fa      	ldr	r2, [r7, #28]
 801ad9a:	6a38      	ldr	r0, [r7, #32]
 801ad9c:	f7ff ff64 	bl	801ac68 <prvInsertTimerInActiveList>
 801ada0:	4603      	mov	r3, r0
 801ada2:	2b00      	cmp	r3, #0
 801ada4:	d059      	beq.n	801ae5a <prvProcessReceivedCommands+0x16e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801ada6:	6a3b      	ldr	r3, [r7, #32]
 801ada8:	6a1b      	ldr	r3, [r3, #32]
 801adaa:	6a38      	ldr	r0, [r7, #32]
 801adac:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801adae:	6a3b      	ldr	r3, [r7, #32]
 801adb0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801adb4:	f003 0304 	and.w	r3, r3, #4
 801adb8:	2b00      	cmp	r3, #0
 801adba:	d04e      	beq.n	801ae5a <prvProcessReceivedCommands+0x16e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 801adbc:	68fa      	ldr	r2, [r7, #12]
 801adbe:	6a3b      	ldr	r3, [r7, #32]
 801adc0:	699b      	ldr	r3, [r3, #24]
 801adc2:	441a      	add	r2, r3
 801adc4:	2300      	movs	r3, #0
 801adc6:	9300      	str	r3, [sp, #0]
 801adc8:	2300      	movs	r3, #0
 801adca:	2100      	movs	r1, #0
 801adcc:	6a38      	ldr	r0, [r7, #32]
 801adce:	f7ff fe25 	bl	801aa1c <xTimerGenericCommand>
 801add2:	61b8      	str	r0, [r7, #24]
							configASSERT( xResult );
 801add4:	69bb      	ldr	r3, [r7, #24]
 801add6:	2b00      	cmp	r3, #0
 801add8:	d13f      	bne.n	801ae5a <prvProcessReceivedCommands+0x16e>
 801adda:	f000 fa75 	bl	801b2c8 <ulSetInterruptMask>
 801adde:	e7fe      	b.n	801adde <prvProcessReceivedCommands+0xf2>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 801ade0:	6a3b      	ldr	r3, [r7, #32]
 801ade2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801ade6:	f023 0301 	bic.w	r3, r3, #1
 801adea:	b2da      	uxtb	r2, r3
 801adec:	6a3b      	ldr	r3, [r7, #32]
 801adee:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 801adf2:	e032      	b.n	801ae5a <prvProcessReceivedCommands+0x16e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 801adf4:	6a3b      	ldr	r3, [r7, #32]
 801adf6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801adfa:	f043 0301 	orr.w	r3, r3, #1
 801adfe:	b2da      	uxtb	r2, r3
 801ae00:	6a3b      	ldr	r3, [r7, #32]
 801ae02:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 801ae06:	68fa      	ldr	r2, [r7, #12]
 801ae08:	6a3b      	ldr	r3, [r7, #32]
 801ae0a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 801ae0c:	6a3b      	ldr	r3, [r7, #32]
 801ae0e:	699b      	ldr	r3, [r3, #24]
 801ae10:	2b00      	cmp	r3, #0
 801ae12:	d102      	bne.n	801ae1a <prvProcessReceivedCommands+0x12e>
 801ae14:	f000 fa58 	bl	801b2c8 <ulSetInterruptMask>
 801ae18:	e7fe      	b.n	801ae18 <prvProcessReceivedCommands+0x12c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 801ae1a:	6a3b      	ldr	r3, [r7, #32]
 801ae1c:	699a      	ldr	r2, [r3, #24]
 801ae1e:	69fb      	ldr	r3, [r7, #28]
 801ae20:	18d1      	adds	r1, r2, r3
 801ae22:	69fb      	ldr	r3, [r7, #28]
 801ae24:	69fa      	ldr	r2, [r7, #28]
 801ae26:	6a38      	ldr	r0, [r7, #32]
 801ae28:	f7ff ff1e 	bl	801ac68 <prvInsertTimerInActiveList>
					break;
 801ae2c:	e015      	b.n	801ae5a <prvProcessReceivedCommands+0x16e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 801ae2e:	6a3b      	ldr	r3, [r7, #32]
 801ae30:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801ae34:	f003 0302 	and.w	r3, r3, #2
 801ae38:	2b00      	cmp	r3, #0
 801ae3a:	d103      	bne.n	801ae44 <prvProcessReceivedCommands+0x158>
						{
							vPortFree( pxTimer );
 801ae3c:	6a38      	ldr	r0, [r7, #32]
 801ae3e:	f000 fb57 	bl	801b4f0 <vPortFree>
 801ae42:	e00a      	b.n	801ae5a <prvProcessReceivedCommands+0x16e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 801ae44:	6a3b      	ldr	r3, [r7, #32]
 801ae46:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801ae4a:	f023 0301 	bic.w	r3, r3, #1
 801ae4e:	b2da      	uxtb	r2, r3
 801ae50:	6a3b      	ldr	r3, [r7, #32]
 801ae52:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 801ae56:	e000      	b.n	801ae5a <prvProcessReceivedCommands+0x16e>

				default	:
					/* Don't expect to get here. */
					break;
 801ae58:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 801ae5a:	4b08      	ldr	r3, [pc, #32]	; (801ae7c <prvProcessReceivedCommands+0x190>)
 801ae5c:	681b      	ldr	r3, [r3, #0]
 801ae5e:	f107 0108 	add.w	r1, r7, #8
 801ae62:	2200      	movs	r2, #0
 801ae64:	4618      	mov	r0, r3
 801ae66:	f7fe fbea 	bl	801963e <xQueueReceive>
 801ae6a:	4603      	mov	r3, r0
 801ae6c:	2b00      	cmp	r3, #0
 801ae6e:	f47f af41 	bne.w	801acf4 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 801ae72:	bf00      	nop
 801ae74:	bf00      	nop
 801ae76:	3728      	adds	r7, #40	; 0x28
 801ae78:	46bd      	mov	sp, r7
 801ae7a:	bd80      	pop	{r7, pc}
 801ae7c:	2000180c 	.word	0x2000180c

0801ae80 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 801ae80:	b580      	push	{r7, lr}
 801ae82:	b088      	sub	sp, #32
 801ae84:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 801ae86:	e040      	b.n	801af0a <prvSwitchTimerLists+0x8a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 801ae88:	4b29      	ldr	r3, [pc, #164]	; (801af30 <prvSwitchTimerLists+0xb0>)
 801ae8a:	681b      	ldr	r3, [r3, #0]
 801ae8c:	68db      	ldr	r3, [r3, #12]
 801ae8e:	681b      	ldr	r3, [r3, #0]
 801ae90:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801ae92:	4b27      	ldr	r3, [pc, #156]	; (801af30 <prvSwitchTimerLists+0xb0>)
 801ae94:	681b      	ldr	r3, [r3, #0]
 801ae96:	68db      	ldr	r3, [r3, #12]
 801ae98:	68db      	ldr	r3, [r3, #12]
 801ae9a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 801ae9c:	68fb      	ldr	r3, [r7, #12]
 801ae9e:	3304      	adds	r3, #4
 801aea0:	4618      	mov	r0, r3
 801aea2:	f7fe f99d 	bl	80191e0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801aea6:	68fb      	ldr	r3, [r7, #12]
 801aea8:	6a1b      	ldr	r3, [r3, #32]
 801aeaa:	68f8      	ldr	r0, [r7, #12]
 801aeac:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801aeae:	68fb      	ldr	r3, [r7, #12]
 801aeb0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801aeb4:	f003 0304 	and.w	r3, r3, #4
 801aeb8:	2b00      	cmp	r3, #0
 801aeba:	d026      	beq.n	801af0a <prvSwitchTimerLists+0x8a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 801aebc:	68fb      	ldr	r3, [r7, #12]
 801aebe:	699b      	ldr	r3, [r3, #24]
 801aec0:	693a      	ldr	r2, [r7, #16]
 801aec2:	4413      	add	r3, r2
 801aec4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 801aec6:	68ba      	ldr	r2, [r7, #8]
 801aec8:	693b      	ldr	r3, [r7, #16]
 801aeca:	429a      	cmp	r2, r3
 801aecc:	d90e      	bls.n	801aeec <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 801aece:	68fb      	ldr	r3, [r7, #12]
 801aed0:	68ba      	ldr	r2, [r7, #8]
 801aed2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 801aed4:	68fb      	ldr	r3, [r7, #12]
 801aed6:	68fa      	ldr	r2, [r7, #12]
 801aed8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 801aeda:	4b15      	ldr	r3, [pc, #84]	; (801af30 <prvSwitchTimerLists+0xb0>)
 801aedc:	681a      	ldr	r2, [r3, #0]
 801aede:	68fb      	ldr	r3, [r7, #12]
 801aee0:	3304      	adds	r3, #4
 801aee2:	4619      	mov	r1, r3
 801aee4:	4610      	mov	r0, r2
 801aee6:	f7fe f942 	bl	801916e <vListInsert>
 801aeea:	e00e      	b.n	801af0a <prvSwitchTimerLists+0x8a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 801aeec:	2300      	movs	r3, #0
 801aeee:	9300      	str	r3, [sp, #0]
 801aef0:	2300      	movs	r3, #0
 801aef2:	693a      	ldr	r2, [r7, #16]
 801aef4:	2100      	movs	r1, #0
 801aef6:	68f8      	ldr	r0, [r7, #12]
 801aef8:	f7ff fd90 	bl	801aa1c <xTimerGenericCommand>
 801aefc:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 801aefe:	687b      	ldr	r3, [r7, #4]
 801af00:	2b00      	cmp	r3, #0
 801af02:	d102      	bne.n	801af0a <prvSwitchTimerLists+0x8a>
 801af04:	f000 f9e0 	bl	801b2c8 <ulSetInterruptMask>
 801af08:	e7fe      	b.n	801af08 <prvSwitchTimerLists+0x88>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 801af0a:	4b09      	ldr	r3, [pc, #36]	; (801af30 <prvSwitchTimerLists+0xb0>)
 801af0c:	681b      	ldr	r3, [r3, #0]
 801af0e:	681b      	ldr	r3, [r3, #0]
 801af10:	2b00      	cmp	r3, #0
 801af12:	d1b9      	bne.n	801ae88 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 801af14:	4b06      	ldr	r3, [pc, #24]	; (801af30 <prvSwitchTimerLists+0xb0>)
 801af16:	681b      	ldr	r3, [r3, #0]
 801af18:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 801af1a:	4b06      	ldr	r3, [pc, #24]	; (801af34 <prvSwitchTimerLists+0xb4>)
 801af1c:	681b      	ldr	r3, [r3, #0]
 801af1e:	4a04      	ldr	r2, [pc, #16]	; (801af30 <prvSwitchTimerLists+0xb0>)
 801af20:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 801af22:	4a04      	ldr	r2, [pc, #16]	; (801af34 <prvSwitchTimerLists+0xb4>)
 801af24:	697b      	ldr	r3, [r7, #20]
 801af26:	6013      	str	r3, [r2, #0]
}
 801af28:	bf00      	nop
 801af2a:	3718      	adds	r7, #24
 801af2c:	46bd      	mov	sp, r7
 801af2e:	bd80      	pop	{r7, pc}
 801af30:	20001804 	.word	0x20001804
 801af34:	20001808 	.word	0x20001808

0801af38 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 801af38:	b580      	push	{r7, lr}
 801af3a:	b082      	sub	sp, #8
 801af3c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 801af3e:	f000 f88b 	bl	801b058 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 801af42:	4b15      	ldr	r3, [pc, #84]	; (801af98 <prvCheckForValidListAndQueue+0x60>)
 801af44:	681b      	ldr	r3, [r3, #0]
 801af46:	2b00      	cmp	r3, #0
 801af48:	d120      	bne.n	801af8c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 801af4a:	4814      	ldr	r0, [pc, #80]	; (801af9c <prvCheckForValidListAndQueue+0x64>)
 801af4c:	f7fe f8be 	bl	80190cc <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 801af50:	4813      	ldr	r0, [pc, #76]	; (801afa0 <prvCheckForValidListAndQueue+0x68>)
 801af52:	f7fe f8bb 	bl	80190cc <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 801af56:	4b13      	ldr	r3, [pc, #76]	; (801afa4 <prvCheckForValidListAndQueue+0x6c>)
 801af58:	4a10      	ldr	r2, [pc, #64]	; (801af9c <prvCheckForValidListAndQueue+0x64>)
 801af5a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 801af5c:	4b12      	ldr	r3, [pc, #72]	; (801afa8 <prvCheckForValidListAndQueue+0x70>)
 801af5e:	4a10      	ldr	r2, [pc, #64]	; (801afa0 <prvCheckForValidListAndQueue+0x68>)
 801af60:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 801af62:	2300      	movs	r3, #0
 801af64:	9300      	str	r3, [sp, #0]
 801af66:	4b11      	ldr	r3, [pc, #68]	; (801afac <prvCheckForValidListAndQueue+0x74>)
 801af68:	4a11      	ldr	r2, [pc, #68]	; (801afb0 <prvCheckForValidListAndQueue+0x78>)
 801af6a:	2110      	movs	r1, #16
 801af6c:	200a      	movs	r0, #10
 801af6e:	f7fe f9b9 	bl	80192e4 <xQueueGenericCreateStatic>
 801af72:	4603      	mov	r3, r0
 801af74:	4a08      	ldr	r2, [pc, #32]	; (801af98 <prvCheckForValidListAndQueue+0x60>)
 801af76:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 801af78:	4b07      	ldr	r3, [pc, #28]	; (801af98 <prvCheckForValidListAndQueue+0x60>)
 801af7a:	681b      	ldr	r3, [r3, #0]
 801af7c:	2b00      	cmp	r3, #0
 801af7e:	d005      	beq.n	801af8c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 801af80:	4b05      	ldr	r3, [pc, #20]	; (801af98 <prvCheckForValidListAndQueue+0x60>)
 801af82:	681b      	ldr	r3, [r3, #0]
 801af84:	490b      	ldr	r1, [pc, #44]	; (801afb4 <prvCheckForValidListAndQueue+0x7c>)
 801af86:	4618      	mov	r0, r3
 801af88:	f7fe fd22 	bl	80199d0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 801af8c:	f000 f876 	bl	801b07c <vPortExitCritical>
}
 801af90:	bf00      	nop
 801af92:	46bd      	mov	sp, r7
 801af94:	bd80      	pop	{r7, pc}
 801af96:	bf00      	nop
 801af98:	2000180c 	.word	0x2000180c
 801af9c:	200017dc 	.word	0x200017dc
 801afa0:	200017f0 	.word	0x200017f0
 801afa4:	20001804 	.word	0x20001804
 801afa8:	20001808 	.word	0x20001808
 801afac:	200018b8 	.word	0x200018b8
 801afb0:	20001818 	.word	0x20001818
 801afb4:	0801f19c 	.word	0x0801f19c

0801afb8 <vPortSetupTimerInterrupt>:
	}
#endif /* configUSE_TICKLESS_IDLE */
/*-----------------------------------------------------------*/

__attribute__(( weak )) void vPortSetupTimerInterrupt( void ) /* PRIVILEGED_FUNCTION */
{
 801afb8:	b480      	push	{r7}
 801afba:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and reset the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 801afbc:	4b0b      	ldr	r3, [pc, #44]	; (801afec <vPortSetupTimerInterrupt+0x34>)
 801afbe:	2200      	movs	r2, #0
 801afc0:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 801afc2:	4b0b      	ldr	r3, [pc, #44]	; (801aff0 <vPortSetupTimerInterrupt+0x38>)
 801afc4:	2200      	movs	r2, #0
 801afc6:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 801afc8:	4b0a      	ldr	r3, [pc, #40]	; (801aff4 <vPortSetupTimerInterrupt+0x3c>)
 801afca:	681b      	ldr	r3, [r3, #0]
 801afcc:	4a0a      	ldr	r2, [pc, #40]	; (801aff8 <vPortSetupTimerInterrupt+0x40>)
 801afce:	fba2 2303 	umull	r2, r3, r2, r3
 801afd2:	099b      	lsrs	r3, r3, #6
 801afd4:	4a09      	ldr	r2, [pc, #36]	; (801affc <vPortSetupTimerInterrupt+0x44>)
 801afd6:	3b01      	subs	r3, #1
 801afd8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT;
 801afda:	4b04      	ldr	r3, [pc, #16]	; (801afec <vPortSetupTimerInterrupt+0x34>)
 801afdc:	2207      	movs	r2, #7
 801afde:	601a      	str	r2, [r3, #0]
}
 801afe0:	bf00      	nop
 801afe2:	46bd      	mov	sp, r7
 801afe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801afe8:	4770      	bx	lr
 801afea:	bf00      	nop
 801afec:	e000e010 	.word	0xe000e010
 801aff0:	e000e018 	.word	0xe000e018
 801aff4:	20000090 	.word	0x20000090
 801aff8:	10624dd3 	.word	0x10624dd3
 801affc:	e000e014 	.word	0xe000e014

0801b000 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 801b000:	b580      	push	{r7, lr}
 801b002:	b082      	sub	sp, #8
 801b004:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 801b006:	2300      	movs	r3, #0
 801b008:	607b      	str	r3, [r7, #4]
	/* A function that implements a task must not exit or attempt to return to
	 * its caller as there is nothing to return to. If a task wants to exit it
	 * should instead call vTaskDelete( NULL ). Artificially force an assert()
	 * to be triggered if configASSERT() is defined, then stop here so
	 * application writers can catch the error. */
	configASSERT( ulCriticalNesting == ~0UL );
 801b00a:	4b09      	ldr	r3, [pc, #36]	; (801b030 <prvTaskExitError+0x30>)
 801b00c:	681b      	ldr	r3, [r3, #0]
 801b00e:	f1b3 3fff 	cmp.w	r3, #4294967295
 801b012:	d002      	beq.n	801b01a <prvTaskExitError+0x1a>
 801b014:	f000 f958 	bl	801b2c8 <ulSetInterruptMask>
 801b018:	e7fe      	b.n	801b018 <prvTaskExitError+0x18>
	portDISABLE_INTERRUPTS();
 801b01a:	f000 f955 	bl	801b2c8 <ulSetInterruptMask>

	while( ulDummy == 0 )
 801b01e:	bf00      	nop
 801b020:	687b      	ldr	r3, [r7, #4]
 801b022:	2b00      	cmp	r3, #0
 801b024:	d0fc      	beq.n	801b020 <prvTaskExitError+0x20>
		 * warnings about code appearing after this function is called - making
		 * ulDummy volatile makes the compiler think the function could return
		 * and therefore not output an 'unreachable code' warning for code that
		 * appears after it. */
	}
}
 801b026:	bf00      	nop
 801b028:	bf00      	nop
 801b02a:	3708      	adds	r7, #8
 801b02c:	46bd      	mov	sp, r7
 801b02e:	bd80      	pop	{r7, pc}
 801b030:	2000009c 	.word	0x2000009c

0801b034 <vPortYield>:
	}
#endif /* configENABLE_FPU */
/*-----------------------------------------------------------*/

void vPortYield( void ) /* PRIVILEGED_FUNCTION */
{
 801b034:	b480      	push	{r7}
 801b036:	af00      	add	r7, sp, #0
	/* Set a PendSV to request a context switch. */
	portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 801b038:	4b06      	ldr	r3, [pc, #24]	; (801b054 <vPortYield+0x20>)
 801b03a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801b03e:	601a      	str	r2, [r3, #0]

	/* Barriers are normally not required but do ensure the code is
	 * completely within the specified behaviour for the architecture. */
	__asm volatile( "dsb" ::: "memory" );
 801b040:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 801b044:	f3bf 8f6f 	isb	sy
}
 801b048:	bf00      	nop
 801b04a:	46bd      	mov	sp, r7
 801b04c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b050:	4770      	bx	lr
 801b052:	bf00      	nop
 801b054:	e000ed04 	.word	0xe000ed04

0801b058 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void ) /* PRIVILEGED_FUNCTION */
{
 801b058:	b580      	push	{r7, lr}
 801b05a:	af00      	add	r7, sp, #0
	portDISABLE_INTERRUPTS();
 801b05c:	f000 f934 	bl	801b2c8 <ulSetInterruptMask>
	ulCriticalNesting++;
 801b060:	4b05      	ldr	r3, [pc, #20]	; (801b078 <vPortEnterCritical+0x20>)
 801b062:	681b      	ldr	r3, [r3, #0]
 801b064:	3301      	adds	r3, #1
 801b066:	4a04      	ldr	r2, [pc, #16]	; (801b078 <vPortEnterCritical+0x20>)
 801b068:	6013      	str	r3, [r2, #0]

	/* Barriers are normally not required but do ensure the code is
	 * completely within the specified behaviour for the architecture. */
	__asm volatile( "dsb" ::: "memory" );
 801b06a:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 801b06e:	f3bf 8f6f 	isb	sy
}
 801b072:	bf00      	nop
 801b074:	bd80      	pop	{r7, pc}
 801b076:	bf00      	nop
 801b078:	2000009c 	.word	0x2000009c

0801b07c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void ) /* PRIVILEGED_FUNCTION */
{
 801b07c:	b580      	push	{r7, lr}
 801b07e:	af00      	add	r7, sp, #0
	configASSERT( ulCriticalNesting );
 801b080:	4b0a      	ldr	r3, [pc, #40]	; (801b0ac <vPortExitCritical+0x30>)
 801b082:	681b      	ldr	r3, [r3, #0]
 801b084:	2b00      	cmp	r3, #0
 801b086:	d102      	bne.n	801b08e <vPortExitCritical+0x12>
 801b088:	f000 f91e 	bl	801b2c8 <ulSetInterruptMask>
 801b08c:	e7fe      	b.n	801b08c <vPortExitCritical+0x10>
	ulCriticalNesting--;
 801b08e:	4b07      	ldr	r3, [pc, #28]	; (801b0ac <vPortExitCritical+0x30>)
 801b090:	681b      	ldr	r3, [r3, #0]
 801b092:	3b01      	subs	r3, #1
 801b094:	4a05      	ldr	r2, [pc, #20]	; (801b0ac <vPortExitCritical+0x30>)
 801b096:	6013      	str	r3, [r2, #0]

	if( ulCriticalNesting == 0 )
 801b098:	4b04      	ldr	r3, [pc, #16]	; (801b0ac <vPortExitCritical+0x30>)
 801b09a:	681b      	ldr	r3, [r3, #0]
 801b09c:	2b00      	cmp	r3, #0
 801b09e:	d102      	bne.n	801b0a6 <vPortExitCritical+0x2a>
	{
		portENABLE_INTERRUPTS();
 801b0a0:	2000      	movs	r0, #0
 801b0a2:	f000 f91e 	bl	801b2e2 <vClearInterruptMask>
	}
}
 801b0a6:	bf00      	nop
 801b0a8:	bd80      	pop	{r7, pc}
 801b0aa:	bf00      	nop
 801b0ac:	2000009c 	.word	0x2000009c

0801b0b0 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void SysTick_Handler( void ) /* PRIVILEGED_FUNCTION */
{
 801b0b0:	b580      	push	{r7, lr}
 801b0b2:	b082      	sub	sp, #8
 801b0b4:	af00      	add	r7, sp, #0
uint32_t ulPreviousMask;

	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
 801b0b6:	f000 f907 	bl	801b2c8 <ulSetInterruptMask>
 801b0ba:	6078      	str	r0, [r7, #4]
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 801b0bc:	f7ff f8c2 	bl	801a244 <xTaskIncrementTick>
 801b0c0:	4603      	mov	r3, r0
 801b0c2:	2b00      	cmp	r3, #0
 801b0c4:	d003      	beq.n	801b0ce <xPortSysTickHandler+0x1e>
		{
			/* Pend a context switch. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 801b0c6:	4b05      	ldr	r3, [pc, #20]	; (801b0dc <xPortSysTickHandler+0x2c>)
 801b0c8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801b0cc:	601a      	str	r2, [r3, #0]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
 801b0ce:	6878      	ldr	r0, [r7, #4]
 801b0d0:	f000 f907 	bl	801b2e2 <vClearInterruptMask>
}
 801b0d4:	bf00      	nop
 801b0d6:	3708      	adds	r7, #8
 801b0d8:	46bd      	mov	sp, r7
 801b0da:	bd80      	pop	{r7, pc}
 801b0dc:	e000ed04 	.word	0xe000ed04

0801b0e0 <vPortSVCHandler_C>:
/*-----------------------------------------------------------*/

void vPortSVCHandler_C( uint32_t *pulCallerStackAddress ) /* PRIVILEGED_FUNCTION portDONT_DISCARD */
{
 801b0e0:	b580      	push	{r7, lr}
 801b0e2:	b084      	sub	sp, #16
 801b0e4:	af00      	add	r7, sp, #0
 801b0e6:	6078      	str	r0, [r7, #4]
#endif /* configENABLE_TRUSTZONE */
uint8_t ucSVCNumber;

	/* Register are stored on the stack in the following order - R0, R1, R2, R3,
	 * R12, LR, PC, xPSR. */
	ulPC = pulCallerStackAddress[ 6 ];
 801b0e8:	687b      	ldr	r3, [r7, #4]
 801b0ea:	699b      	ldr	r3, [r3, #24]
 801b0ec:	60fb      	str	r3, [r7, #12]
	ucSVCNumber = ( ( uint8_t *) ulPC )[ -2 ];
 801b0ee:	68fb      	ldr	r3, [r7, #12]
 801b0f0:	3b02      	subs	r3, #2
 801b0f2:	781b      	ldrb	r3, [r3, #0]
 801b0f4:	72fb      	strb	r3, [r7, #11]

	switch( ucSVCNumber )
 801b0f6:	7afb      	ldrb	r3, [r7, #11]
 801b0f8:	2b02      	cmp	r3, #2
 801b0fa:	d102      	bne.n	801b102 <vPortSVCHandler_C+0x22>
			}
			#endif /* configENABLE_FPU */

			/* Setup the context of the first task so that the first task starts
			 * executing. */
			vRestoreContextOfFirstTask();
 801b0fc:	f000 f8b8 	bl	801b270 <vRestoreContextOfFirstTask>
		}
		break;
 801b100:	e002      	b.n	801b108 <vPortSVCHandler_C+0x28>
		#endif /* configENABLE_MPU */

		default:
		{
			/* Incorrect SVC call. */
			configASSERT( pdFALSE );
 801b102:	f000 f8e1 	bl	801b2c8 <ulSetInterruptMask>
 801b106:	e7fe      	b.n	801b106 <vPortSVCHandler_C+0x26>
		}
	}
}
 801b108:	bf00      	nop
 801b10a:	3710      	adds	r7, #16
 801b10c:	46bd      	mov	sp, r7
 801b10e:	bd80      	pop	{r7, pc}

0801b110 <pxPortInitialiseStack>:
#if( configENABLE_MPU == 1 )
	StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, StackType_t *pxEndOfStack, TaskFunction_t pxCode, void *pvParameters, BaseType_t xRunPrivileged ) /* PRIVILEGED_FUNCTION */
#else
	StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, StackType_t *pxEndOfStack, TaskFunction_t pxCode, void *pvParameters ) /* PRIVILEGED_FUNCTION */
#endif /* configENABLE_MPU */
{
 801b110:	b480      	push	{r7}
 801b112:	b085      	sub	sp, #20
 801b114:	af00      	add	r7, sp, #0
 801b116:	60f8      	str	r0, [r7, #12]
 801b118:	60b9      	str	r1, [r7, #8]
 801b11a:	607a      	str	r2, [r7, #4]
 801b11c:	603b      	str	r3, [r7, #0]
		}
		#endif /* configENABLE_TRUSTZONE */
	}
	#else /* portPRELOAD_REGISTERS */
	{
		pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 801b11e:	68fb      	ldr	r3, [r7, #12]
 801b120:	3b04      	subs	r3, #4
 801b122:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = portINITIAL_XPSR;							/* xPSR */
 801b124:	68fb      	ldr	r3, [r7, #12]
 801b126:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 801b12a:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 801b12c:	68fb      	ldr	r3, [r7, #12]
 801b12e:	3b04      	subs	r3, #4
 801b130:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) pxCode;						/* PC */
 801b132:	687a      	ldr	r2, [r7, #4]
 801b134:	68fb      	ldr	r3, [r7, #12]
 801b136:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 801b138:	68fb      	ldr	r3, [r7, #12]
 801b13a:	3b04      	subs	r3, #4
 801b13c:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 801b13e:	4a38      	ldr	r2, [pc, #224]	; (801b220 <pxPortInitialiseStack+0x110>)
 801b140:	68fb      	ldr	r3, [r7, #12]
 801b142:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 801b144:	68fb      	ldr	r3, [r7, #12]
 801b146:	3b04      	subs	r3, #4
 801b148:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) 0x12121212UL;				/* R12 */
 801b14a:	68fb      	ldr	r3, [r7, #12]
 801b14c:	f04f 3212 	mov.w	r2, #303174162	; 0x12121212
 801b150:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 801b152:	68fb      	ldr	r3, [r7, #12]
 801b154:	3b04      	subs	r3, #4
 801b156:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) 0x03030303UL;				/* R3 */
 801b158:	68fb      	ldr	r3, [r7, #12]
 801b15a:	f04f 3203 	mov.w	r2, #50529027	; 0x3030303
 801b15e:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 801b160:	68fb      	ldr	r3, [r7, #12]
 801b162:	3b04      	subs	r3, #4
 801b164:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) 0x02020202UL;				/* R2 */
 801b166:	68fb      	ldr	r3, [r7, #12]
 801b168:	f04f 3202 	mov.w	r2, #33686018	; 0x2020202
 801b16c:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 801b16e:	68fb      	ldr	r3, [r7, #12]
 801b170:	3b04      	subs	r3, #4
 801b172:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) 0x01010101UL;				/* R1 */
 801b174:	68fb      	ldr	r3, [r7, #12]
 801b176:	f04f 3201 	mov.w	r2, #16843009	; 0x1010101
 801b17a:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 801b17c:	68fb      	ldr	r3, [r7, #12]
 801b17e:	3b04      	subs	r3, #4
 801b180:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) pvParameters;				/* R0 */
 801b182:	683a      	ldr	r2, [r7, #0]
 801b184:	68fb      	ldr	r3, [r7, #12]
 801b186:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 801b188:	68fb      	ldr	r3, [r7, #12]
 801b18a:	3b04      	subs	r3, #4
 801b18c:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) 0x11111111UL;				/* R11 */
 801b18e:	68fb      	ldr	r3, [r7, #12]
 801b190:	f04f 3211 	mov.w	r2, #286331153	; 0x11111111
 801b194:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 801b196:	68fb      	ldr	r3, [r7, #12]
 801b198:	3b04      	subs	r3, #4
 801b19a:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) 0x10101010UL;				/* R10 */
 801b19c:	68fb      	ldr	r3, [r7, #12]
 801b19e:	f04f 3210 	mov.w	r2, #269488144	; 0x10101010
 801b1a2:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 801b1a4:	68fb      	ldr	r3, [r7, #12]
 801b1a6:	3b04      	subs	r3, #4
 801b1a8:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) 0x09090909UL;				/* R09 */
 801b1aa:	68fb      	ldr	r3, [r7, #12]
 801b1ac:	f04f 3209 	mov.w	r2, #151587081	; 0x9090909
 801b1b0:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 801b1b2:	68fb      	ldr	r3, [r7, #12]
 801b1b4:	3b04      	subs	r3, #4
 801b1b6:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) 0x08080808UL;				/* R08 */
 801b1b8:	68fb      	ldr	r3, [r7, #12]
 801b1ba:	f04f 3208 	mov.w	r2, #134744072	; 0x8080808
 801b1be:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 801b1c0:	68fb      	ldr	r3, [r7, #12]
 801b1c2:	3b04      	subs	r3, #4
 801b1c4:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) 0x07070707UL;				/* R07 */
 801b1c6:	68fb      	ldr	r3, [r7, #12]
 801b1c8:	f04f 3207 	mov.w	r2, #117901063	; 0x7070707
 801b1cc:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 801b1ce:	68fb      	ldr	r3, [r7, #12]
 801b1d0:	3b04      	subs	r3, #4
 801b1d2:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) 0x06060606UL;				/* R06 */
 801b1d4:	68fb      	ldr	r3, [r7, #12]
 801b1d6:	f04f 3206 	mov.w	r2, #101058054	; 0x6060606
 801b1da:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 801b1dc:	68fb      	ldr	r3, [r7, #12]
 801b1de:	3b04      	subs	r3, #4
 801b1e0:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) 0x05050505UL;				/* R05 */
 801b1e2:	68fb      	ldr	r3, [r7, #12]
 801b1e4:	f04f 3205 	mov.w	r2, #84215045	; 0x5050505
 801b1e8:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 801b1ea:	68fb      	ldr	r3, [r7, #12]
 801b1ec:	3b04      	subs	r3, #4
 801b1ee:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) 0x04040404UL;				/* R04 */
 801b1f0:	68fb      	ldr	r3, [r7, #12]
 801b1f2:	f04f 3204 	mov.w	r2, #67372036	; 0x4040404
 801b1f6:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 801b1f8:	68fb      	ldr	r3, [r7, #12]
 801b1fa:	3b04      	subs	r3, #4
 801b1fc:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = portINITIAL_EXC_RETURN;						/* EXC_RETURN */
 801b1fe:	68fb      	ldr	r3, [r7, #12]
 801b200:	f06f 0243 	mvn.w	r2, #67	; 0x43
 801b204:	601a      	str	r2, [r3, #0]
				*pxTopOfStack = portINITIAL_CONTROL_UNPRIVILEGED;	/* Slot used to hold this task's CONTROL value. */
			}
		}
		#endif /* configENABLE_MPU */

		pxTopOfStack--;
 801b206:	68fb      	ldr	r3, [r7, #12]
 801b208:	3b04      	subs	r3, #4
 801b20a:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) pxEndOfStack;	/* Slot used to hold this task's PSPLIM value. */
 801b20c:	68ba      	ldr	r2, [r7, #8]
 801b20e:	68fb      	ldr	r3, [r7, #12]
 801b210:	601a      	str	r2, [r3, #0]
		}
		#endif /* configENABLE_TRUSTZONE */
	}
	#endif /* portPRELOAD_REGISTERS */

	return pxTopOfStack;
 801b212:	68fb      	ldr	r3, [r7, #12]
}
 801b214:	4618      	mov	r0, r3
 801b216:	3714      	adds	r7, #20
 801b218:	46bd      	mov	sp, r7
 801b21a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b21e:	4770      	bx	lr
 801b220:	0801b001 	.word	0x0801b001

0801b224 <xPortStartScheduler>:
/*-----------------------------------------------------------*/

BaseType_t xPortStartScheduler( void ) /* PRIVILEGED_FUNCTION */
{
 801b224:	b580      	push	{r7, lr}
 801b226:	af00      	add	r7, sp, #0
	/* Make PendSV, CallSV and SysTick the same priority as the kernel. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 801b228:	4b0c      	ldr	r3, [pc, #48]	; (801b25c <xPortStartScheduler+0x38>)
 801b22a:	681b      	ldr	r3, [r3, #0]
 801b22c:	4a0b      	ldr	r2, [pc, #44]	; (801b25c <xPortStartScheduler+0x38>)
 801b22e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 801b232:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 801b234:	4b09      	ldr	r3, [pc, #36]	; (801b25c <xPortStartScheduler+0x38>)
 801b236:	681b      	ldr	r3, [r3, #0]
 801b238:	4a08      	ldr	r2, [pc, #32]	; (801b25c <xPortStartScheduler+0x38>)
 801b23a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 801b23e:	6013      	str	r3, [r2, #0]
	}
	#endif /* configENABLE_MPU */

	/* Start the timer that generates the tick ISR. Interrupts are disabled
	 * here already. */
	vPortSetupTimerInterrupt();
 801b240:	f7ff feba 	bl	801afb8 <vPortSetupTimerInterrupt>

	/* Initialize the critical nesting count ready for the first task. */
	ulCriticalNesting = 0;
 801b244:	4b06      	ldr	r3, [pc, #24]	; (801b260 <xPortStartScheduler+0x3c>)
 801b246:	2200      	movs	r2, #0
 801b248:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	vStartFirstTask();
 801b24a:	f000 f829 	bl	801b2a0 <vStartFirstTask>
	 * exit error function to prevent compiler warnings about a static function
	 * not being called in the case that the application writer overrides this
	 * functionality by defining configTASK_RETURN_ADDRESS. Call
	 * vTaskSwitchContext() so link time optimization does not remove the
	 * symbol. */
	vTaskSwitchContext();
 801b24e:	f7ff f8ab 	bl	801a3a8 <vTaskSwitchContext>
	prvTaskExitError();
 801b252:	f7ff fed5 	bl	801b000 <prvTaskExitError>

	/* Should not get here. */
	return 0;
 801b256:	2300      	movs	r3, #0
}
 801b258:	4618      	mov	r0, r3
 801b25a:	bd80      	pop	{r7, pc}
 801b25c:	e000ed20 	.word	0xe000ed20
 801b260:	2000009c 	.word	0x2000009c
	...

0801b270 <vRestoreContextOfFirstTask>:
 * header files. */
#undef MPU_WRAPPERS_INCLUDED_FROM_API_FILE

void vRestoreContextOfFirstTask( void ) /* __attribute__ (( naked )) PRIVILEGED_FUNCTION */
{
	__asm volatile
 801b270:	4a07      	ldr	r2, [pc, #28]	; (801b290 <pxCurrentTCBConst2>)
 801b272:	6811      	ldr	r1, [r2, #0]
 801b274:	6808      	ldr	r0, [r1, #0]
 801b276:	c806      	ldmia	r0!, {r1, r2}
 801b278:	f381 880b 	msr	PSPLIM, r1
 801b27c:	2102      	movs	r1, #2
 801b27e:	f381 8814 	msr	CONTROL, r1
 801b282:	3020      	adds	r0, #32
 801b284:	f380 8809 	msr	PSP, r0
 801b288:	f3bf 8f6f 	isb	sy
 801b28c:	4710      	bx	r2
 801b28e:	bf00      	nop

0801b290 <pxCurrentTCBConst2>:
 801b290:	200012dc 	.word	0x200012dc
	"xMAIR0Const2: .word 0xe000edc0						\n"
	"xRNRConst2: .word 0xe000ed98						\n"
	"xRBARConst2: .word 0xe000ed9c						\n"
	#endif /* configENABLE_MPU */
	);
}
 801b294:	bf00      	nop
 801b296:	bf00      	nop
	...

0801b2a0 <vStartFirstTask>:
}
/*-----------------------------------------------------------*/

void vStartFirstTask( void ) /* __attribute__ (( naked )) PRIVILEGED_FUNCTION */
{
	__asm volatile
 801b2a0:	4807      	ldr	r0, [pc, #28]	; (801b2c0 <xVTORConst>)
 801b2a2:	6800      	ldr	r0, [r0, #0]
 801b2a4:	6800      	ldr	r0, [r0, #0]
 801b2a6:	f380 8808 	msr	MSP, r0
 801b2aa:	b662      	cpsie	i
 801b2ac:	b661      	cpsie	f
 801b2ae:	f3bf 8f4f 	dsb	sy
 801b2b2:	f3bf 8f6f 	isb	sy
 801b2b6:	df02      	svc	2
 801b2b8:	bf00      	nop
 801b2ba:	bf00      	nop
 801b2bc:	f3af 8000 	nop.w

0801b2c0 <xVTORConst>:
 801b2c0:	e000ed08 	.word	0xe000ed08
	"													\n"
	"   .align 4										\n"
	"xVTORConst: .word 0xe000ed08						\n"
	:: "i" ( portSVC_START_SCHEDULER ) : "memory"
	);
}
 801b2c4:	bf00      	nop
 801b2c6:	bf00      	nop

0801b2c8 <ulSetInterruptMask>:
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMask( void ) /* __attribute__(( naked )) PRIVILEGED_FUNCTION */
{
	__asm volatile
 801b2c8:	f3ef 8011 	mrs	r0, BASEPRI
 801b2cc:	f04f 01a0 	mov.w	r1, #160	; 0xa0
 801b2d0:	f381 8811 	msr	BASEPRI, r1
 801b2d4:	f3bf 8f4f 	dsb	sy
 801b2d8:	f3bf 8f6f 	isb	sy
 801b2dc:	4770      	bx	lr
	"	dsb												\n"
	"	isb												\n"
	"	bx lr											\n" /* Return. */
	:: "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 801b2de:	bf00      	nop
 801b2e0:	4618      	mov	r0, r3

0801b2e2 <vClearInterruptMask>:
/*-----------------------------------------------------------*/

void vClearInterruptMask( __attribute__( ( unused ) ) uint32_t ulMask ) /* __attribute__(( naked )) PRIVILEGED_FUNCTION */
{
	__asm volatile
 801b2e2:	f380 8811 	msr	BASEPRI, r0
 801b2e6:	f3bf 8f4f 	dsb	sy
 801b2ea:	f3bf 8f6f 	isb	sy
 801b2ee:	4770      	bx	lr
	"	dsb												\n"
	"	isb												\n"
	"	bx lr											\n" /* Return. */
	::: "memory"
	);
}
 801b2f0:	bf00      	nop
	...

0801b300 <PendSV_Handler>:
/*-----------------------------------------------------------*/

void PendSV_Handler( void ) /* __attribute__ (( naked )) PRIVILEGED_FUNCTION */
{
	__asm volatile
 801b300:	f3ef 8009 	mrs	r0, PSP
 801b304:	f3ef 820b 	mrs	r2, PSPLIM
 801b308:	4673      	mov	r3, lr
 801b30a:	e920 0ffc 	stmdb	r0!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, fp}
 801b30e:	4a10      	ldr	r2, [pc, #64]	; (801b350 <pxCurrentTCBConst>)
 801b310:	6811      	ldr	r1, [r2, #0]
 801b312:	6008      	str	r0, [r1, #0]
 801b314:	f04f 00a0 	mov.w	r0, #160	; 0xa0
 801b318:	f380 8811 	msr	BASEPRI, r0
 801b31c:	f3bf 8f4f 	dsb	sy
 801b320:	f3bf 8f6f 	isb	sy
 801b324:	f7ff f840 	bl	801a3a8 <vTaskSwitchContext>
 801b328:	f04f 0000 	mov.w	r0, #0
 801b32c:	f380 8811 	msr	BASEPRI, r0
 801b330:	4a07      	ldr	r2, [pc, #28]	; (801b350 <pxCurrentTCBConst>)
 801b332:	6811      	ldr	r1, [r2, #0]
 801b334:	6808      	ldr	r0, [r1, #0]
 801b336:	e8b0 0ffc 	ldmia.w	r0!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, fp}
 801b33a:	f382 880b 	msr	PSPLIM, r2
 801b33e:	f380 8809 	msr	PSP, r0
 801b342:	4718      	bx	r3
 801b344:	f3af 8000 	nop.w
 801b348:	f3af 8000 	nop.w
 801b34c:	f3af 8000 	nop.w

0801b350 <pxCurrentTCBConst>:
 801b350:	200012dc 	.word	0x200012dc
	"xRNRConst: .word 0xe000ed98						\n"
	"xRBARConst: .word 0xe000ed9c						\n"
	#endif /* configENABLE_MPU */
	:: "i"( configMAX_SYSCALL_INTERRUPT_PRIORITY )
	);
}
 801b354:	bf00      	nop
 801b356:	bf00      	nop
	...

0801b360 <SVC_Handler>:
/*-----------------------------------------------------------*/

void SVC_Handler( void ) /* __attribute__ (( naked )) PRIVILEGED_FUNCTION */
{
	__asm volatile
 801b360:	f01e 0f04 	tst.w	lr, #4
 801b364:	bf0c      	ite	eq
 801b366:	f3ef 8008 	mrseq	r0, MSP
 801b36a:	f3ef 8009 	mrsne	r0, PSP
 801b36e:	4904      	ldr	r1, [pc, #16]	; (801b380 <svchandler_address_const>)
 801b370:	4708      	bx	r1
 801b372:	bf00      	nop
 801b374:	f3af 8000 	nop.w
 801b378:	f3af 8000 	nop.w
 801b37c:	f3af 8000 	nop.w

0801b380 <svchandler_address_const>:
 801b380:	0801b0e1 	.word	0x0801b0e1
	"	bx r1											\n"
	"													\n"
	"	.align 4										\n"
	"svchandler_address_const: .word vPortSVCHandler_C	\n"
	);
}
 801b384:	bf00      	nop
 801b386:	bf00      	nop

0801b388 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 801b388:	b580      	push	{r7, lr}
 801b38a:	b086      	sub	sp, #24
 801b38c:	af00      	add	r7, sp, #0
 801b38e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 801b390:	2300      	movs	r3, #0
 801b392:	60fb      	str	r3, [r7, #12]

	vTaskSuspendAll();
 801b394:	f7fe feaa 	bl	801a0ec <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 801b398:	4b4f      	ldr	r3, [pc, #316]	; (801b4d8 <pvPortMalloc+0x150>)
 801b39a:	681b      	ldr	r3, [r3, #0]
 801b39c:	2b00      	cmp	r3, #0
 801b39e:	d101      	bne.n	801b3a4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 801b3a0:	f000 f8f8 	bl	801b594 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 801b3a4:	4b4d      	ldr	r3, [pc, #308]	; (801b4dc <pvPortMalloc+0x154>)
 801b3a6:	681a      	ldr	r2, [r3, #0]
 801b3a8:	687b      	ldr	r3, [r7, #4]
 801b3aa:	4013      	ands	r3, r2
 801b3ac:	2b00      	cmp	r3, #0
 801b3ae:	f040 8083 	bne.w	801b4b8 <pvPortMalloc+0x130>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 801b3b2:	687b      	ldr	r3, [r7, #4]
 801b3b4:	2b00      	cmp	r3, #0
 801b3b6:	d015      	beq.n	801b3e4 <pvPortMalloc+0x5c>
			{
				xWantedSize += xHeapStructSize;
 801b3b8:	2208      	movs	r2, #8
 801b3ba:	687b      	ldr	r3, [r7, #4]
 801b3bc:	4413      	add	r3, r2
 801b3be:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 801b3c0:	687b      	ldr	r3, [r7, #4]
 801b3c2:	f003 0307 	and.w	r3, r3, #7
 801b3c6:	2b00      	cmp	r3, #0
 801b3c8:	d00c      	beq.n	801b3e4 <pvPortMalloc+0x5c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 801b3ca:	687b      	ldr	r3, [r7, #4]
 801b3cc:	f023 0307 	bic.w	r3, r3, #7
 801b3d0:	3308      	adds	r3, #8
 801b3d2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 801b3d4:	687b      	ldr	r3, [r7, #4]
 801b3d6:	f003 0307 	and.w	r3, r3, #7
 801b3da:	2b00      	cmp	r3, #0
 801b3dc:	d002      	beq.n	801b3e4 <pvPortMalloc+0x5c>
 801b3de:	f7ff ff73 	bl	801b2c8 <ulSetInterruptMask>
 801b3e2:	e7fe      	b.n	801b3e2 <pvPortMalloc+0x5a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 801b3e4:	687b      	ldr	r3, [r7, #4]
 801b3e6:	2b00      	cmp	r3, #0
 801b3e8:	d066      	beq.n	801b4b8 <pvPortMalloc+0x130>
 801b3ea:	4b3d      	ldr	r3, [pc, #244]	; (801b4e0 <pvPortMalloc+0x158>)
 801b3ec:	681b      	ldr	r3, [r3, #0]
 801b3ee:	687a      	ldr	r2, [r7, #4]
 801b3f0:	429a      	cmp	r2, r3
 801b3f2:	d861      	bhi.n	801b4b8 <pvPortMalloc+0x130>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 801b3f4:	4b3b      	ldr	r3, [pc, #236]	; (801b4e4 <pvPortMalloc+0x15c>)
 801b3f6:	613b      	str	r3, [r7, #16]
				pxBlock = xStart.pxNextFreeBlock;
 801b3f8:	4b3a      	ldr	r3, [pc, #232]	; (801b4e4 <pvPortMalloc+0x15c>)
 801b3fa:	681b      	ldr	r3, [r3, #0]
 801b3fc:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801b3fe:	e004      	b.n	801b40a <pvPortMalloc+0x82>
				{
					pxPreviousBlock = pxBlock;
 801b400:	697b      	ldr	r3, [r7, #20]
 801b402:	613b      	str	r3, [r7, #16]
					pxBlock = pxBlock->pxNextFreeBlock;
 801b404:	697b      	ldr	r3, [r7, #20]
 801b406:	681b      	ldr	r3, [r3, #0]
 801b408:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801b40a:	697b      	ldr	r3, [r7, #20]
 801b40c:	685b      	ldr	r3, [r3, #4]
 801b40e:	687a      	ldr	r2, [r7, #4]
 801b410:	429a      	cmp	r2, r3
 801b412:	d903      	bls.n	801b41c <pvPortMalloc+0x94>
 801b414:	697b      	ldr	r3, [r7, #20]
 801b416:	681b      	ldr	r3, [r3, #0]
 801b418:	2b00      	cmp	r3, #0
 801b41a:	d1f1      	bne.n	801b400 <pvPortMalloc+0x78>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 801b41c:	4b2e      	ldr	r3, [pc, #184]	; (801b4d8 <pvPortMalloc+0x150>)
 801b41e:	681b      	ldr	r3, [r3, #0]
 801b420:	697a      	ldr	r2, [r7, #20]
 801b422:	429a      	cmp	r2, r3
 801b424:	d048      	beq.n	801b4b8 <pvPortMalloc+0x130>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 801b426:	693b      	ldr	r3, [r7, #16]
 801b428:	681b      	ldr	r3, [r3, #0]
 801b42a:	2208      	movs	r2, #8
 801b42c:	4413      	add	r3, r2
 801b42e:	60fb      	str	r3, [r7, #12]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 801b430:	697b      	ldr	r3, [r7, #20]
 801b432:	681a      	ldr	r2, [r3, #0]
 801b434:	693b      	ldr	r3, [r7, #16]
 801b436:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 801b438:	697b      	ldr	r3, [r7, #20]
 801b43a:	685a      	ldr	r2, [r3, #4]
 801b43c:	687b      	ldr	r3, [r7, #4]
 801b43e:	1ad2      	subs	r2, r2, r3
 801b440:	2308      	movs	r3, #8
 801b442:	005b      	lsls	r3, r3, #1
 801b444:	429a      	cmp	r2, r3
 801b446:	d917      	bls.n	801b478 <pvPortMalloc+0xf0>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 801b448:	697a      	ldr	r2, [r7, #20]
 801b44a:	687b      	ldr	r3, [r7, #4]
 801b44c:	4413      	add	r3, r2
 801b44e:	60bb      	str	r3, [r7, #8]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 801b450:	68bb      	ldr	r3, [r7, #8]
 801b452:	f003 0307 	and.w	r3, r3, #7
 801b456:	2b00      	cmp	r3, #0
 801b458:	d002      	beq.n	801b460 <pvPortMalloc+0xd8>
 801b45a:	f7ff ff35 	bl	801b2c8 <ulSetInterruptMask>
 801b45e:	e7fe      	b.n	801b45e <pvPortMalloc+0xd6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 801b460:	697b      	ldr	r3, [r7, #20]
 801b462:	685a      	ldr	r2, [r3, #4]
 801b464:	687b      	ldr	r3, [r7, #4]
 801b466:	1ad2      	subs	r2, r2, r3
 801b468:	68bb      	ldr	r3, [r7, #8]
 801b46a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 801b46c:	697b      	ldr	r3, [r7, #20]
 801b46e:	687a      	ldr	r2, [r7, #4]
 801b470:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 801b472:	68b8      	ldr	r0, [r7, #8]
 801b474:	f000 f8f0 	bl	801b658 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 801b478:	4b19      	ldr	r3, [pc, #100]	; (801b4e0 <pvPortMalloc+0x158>)
 801b47a:	681a      	ldr	r2, [r3, #0]
 801b47c:	697b      	ldr	r3, [r7, #20]
 801b47e:	685b      	ldr	r3, [r3, #4]
 801b480:	1ad3      	subs	r3, r2, r3
 801b482:	4a17      	ldr	r2, [pc, #92]	; (801b4e0 <pvPortMalloc+0x158>)
 801b484:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 801b486:	4b16      	ldr	r3, [pc, #88]	; (801b4e0 <pvPortMalloc+0x158>)
 801b488:	681a      	ldr	r2, [r3, #0]
 801b48a:	4b17      	ldr	r3, [pc, #92]	; (801b4e8 <pvPortMalloc+0x160>)
 801b48c:	681b      	ldr	r3, [r3, #0]
 801b48e:	429a      	cmp	r2, r3
 801b490:	d203      	bcs.n	801b49a <pvPortMalloc+0x112>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 801b492:	4b13      	ldr	r3, [pc, #76]	; (801b4e0 <pvPortMalloc+0x158>)
 801b494:	681b      	ldr	r3, [r3, #0]
 801b496:	4a14      	ldr	r2, [pc, #80]	; (801b4e8 <pvPortMalloc+0x160>)
 801b498:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 801b49a:	697b      	ldr	r3, [r7, #20]
 801b49c:	685a      	ldr	r2, [r3, #4]
 801b49e:	4b0f      	ldr	r3, [pc, #60]	; (801b4dc <pvPortMalloc+0x154>)
 801b4a0:	681b      	ldr	r3, [r3, #0]
 801b4a2:	431a      	orrs	r2, r3
 801b4a4:	697b      	ldr	r3, [r7, #20]
 801b4a6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 801b4a8:	697b      	ldr	r3, [r7, #20]
 801b4aa:	2200      	movs	r2, #0
 801b4ac:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 801b4ae:	4b0f      	ldr	r3, [pc, #60]	; (801b4ec <pvPortMalloc+0x164>)
 801b4b0:	681b      	ldr	r3, [r3, #0]
 801b4b2:	3301      	adds	r3, #1
 801b4b4:	4a0d      	ldr	r2, [pc, #52]	; (801b4ec <pvPortMalloc+0x164>)
 801b4b6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 801b4b8:	f7fe fe26 	bl	801a108 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 801b4bc:	68fb      	ldr	r3, [r7, #12]
 801b4be:	f003 0307 	and.w	r3, r3, #7
 801b4c2:	2b00      	cmp	r3, #0
 801b4c4:	d002      	beq.n	801b4cc <pvPortMalloc+0x144>
 801b4c6:	f7ff feff 	bl	801b2c8 <ulSetInterruptMask>
 801b4ca:	e7fe      	b.n	801b4ca <pvPortMalloc+0x142>
	return pvReturn;
 801b4cc:	68fb      	ldr	r3, [r7, #12]
}
 801b4ce:	4618      	mov	r0, r3
 801b4d0:	3718      	adds	r7, #24
 801b4d2:	46bd      	mov	sp, r7
 801b4d4:	bd80      	pop	{r7, pc}
 801b4d6:	bf00      	nop
 801b4d8:	20003910 	.word	0x20003910
 801b4dc:	20003924 	.word	0x20003924
 801b4e0:	20003914 	.word	0x20003914
 801b4e4:	20003908 	.word	0x20003908
 801b4e8:	20003918 	.word	0x20003918
 801b4ec:	2000391c 	.word	0x2000391c

0801b4f0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 801b4f0:	b580      	push	{r7, lr}
 801b4f2:	b084      	sub	sp, #16
 801b4f4:	af00      	add	r7, sp, #0
 801b4f6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 801b4f8:	687b      	ldr	r3, [r7, #4]
 801b4fa:	60fb      	str	r3, [r7, #12]
BlockLink_t *pxLink;

	if( pv != NULL )
 801b4fc:	687b      	ldr	r3, [r7, #4]
 801b4fe:	2b00      	cmp	r3, #0
 801b500:	d03d      	beq.n	801b57e <vPortFree+0x8e>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 801b502:	2308      	movs	r3, #8
 801b504:	425b      	negs	r3, r3
 801b506:	68fa      	ldr	r2, [r7, #12]
 801b508:	4413      	add	r3, r2
 801b50a:	60fb      	str	r3, [r7, #12]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 801b50c:	68fb      	ldr	r3, [r7, #12]
 801b50e:	60bb      	str	r3, [r7, #8]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 801b510:	68bb      	ldr	r3, [r7, #8]
 801b512:	685a      	ldr	r2, [r3, #4]
 801b514:	4b1c      	ldr	r3, [pc, #112]	; (801b588 <vPortFree+0x98>)
 801b516:	681b      	ldr	r3, [r3, #0]
 801b518:	4013      	ands	r3, r2
 801b51a:	2b00      	cmp	r3, #0
 801b51c:	d102      	bne.n	801b524 <vPortFree+0x34>
 801b51e:	f7ff fed3 	bl	801b2c8 <ulSetInterruptMask>
 801b522:	e7fe      	b.n	801b522 <vPortFree+0x32>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 801b524:	68bb      	ldr	r3, [r7, #8]
 801b526:	681b      	ldr	r3, [r3, #0]
 801b528:	2b00      	cmp	r3, #0
 801b52a:	d002      	beq.n	801b532 <vPortFree+0x42>
 801b52c:	f7ff fecc 	bl	801b2c8 <ulSetInterruptMask>
 801b530:	e7fe      	b.n	801b530 <vPortFree+0x40>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 801b532:	68bb      	ldr	r3, [r7, #8]
 801b534:	685a      	ldr	r2, [r3, #4]
 801b536:	4b14      	ldr	r3, [pc, #80]	; (801b588 <vPortFree+0x98>)
 801b538:	681b      	ldr	r3, [r3, #0]
 801b53a:	4013      	ands	r3, r2
 801b53c:	2b00      	cmp	r3, #0
 801b53e:	d01e      	beq.n	801b57e <vPortFree+0x8e>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 801b540:	68bb      	ldr	r3, [r7, #8]
 801b542:	681b      	ldr	r3, [r3, #0]
 801b544:	2b00      	cmp	r3, #0
 801b546:	d11a      	bne.n	801b57e <vPortFree+0x8e>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 801b548:	68bb      	ldr	r3, [r7, #8]
 801b54a:	685a      	ldr	r2, [r3, #4]
 801b54c:	4b0e      	ldr	r3, [pc, #56]	; (801b588 <vPortFree+0x98>)
 801b54e:	681b      	ldr	r3, [r3, #0]
 801b550:	43db      	mvns	r3, r3
 801b552:	401a      	ands	r2, r3
 801b554:	68bb      	ldr	r3, [r7, #8]
 801b556:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 801b558:	f7fe fdc8 	bl	801a0ec <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 801b55c:	68bb      	ldr	r3, [r7, #8]
 801b55e:	685a      	ldr	r2, [r3, #4]
 801b560:	4b0a      	ldr	r3, [pc, #40]	; (801b58c <vPortFree+0x9c>)
 801b562:	681b      	ldr	r3, [r3, #0]
 801b564:	4413      	add	r3, r2
 801b566:	4a09      	ldr	r2, [pc, #36]	; (801b58c <vPortFree+0x9c>)
 801b568:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 801b56a:	68b8      	ldr	r0, [r7, #8]
 801b56c:	f000 f874 	bl	801b658 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 801b570:	4b07      	ldr	r3, [pc, #28]	; (801b590 <vPortFree+0xa0>)
 801b572:	681b      	ldr	r3, [r3, #0]
 801b574:	3301      	adds	r3, #1
 801b576:	4a06      	ldr	r2, [pc, #24]	; (801b590 <vPortFree+0xa0>)
 801b578:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 801b57a:	f7fe fdc5 	bl	801a108 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 801b57e:	bf00      	nop
 801b580:	3710      	adds	r7, #16
 801b582:	46bd      	mov	sp, r7
 801b584:	bd80      	pop	{r7, pc}
 801b586:	bf00      	nop
 801b588:	20003924 	.word	0x20003924
 801b58c:	20003914 	.word	0x20003914
 801b590:	20003920 	.word	0x20003920

0801b594 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 801b594:	b480      	push	{r7}
 801b596:	b085      	sub	sp, #20
 801b598:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 801b59a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 801b59e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 801b5a0:	4b27      	ldr	r3, [pc, #156]	; (801b640 <prvHeapInit+0xac>)
 801b5a2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 801b5a4:	68fb      	ldr	r3, [r7, #12]
 801b5a6:	f003 0307 	and.w	r3, r3, #7
 801b5aa:	2b00      	cmp	r3, #0
 801b5ac:	d00c      	beq.n	801b5c8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 801b5ae:	68fb      	ldr	r3, [r7, #12]
 801b5b0:	3307      	adds	r3, #7
 801b5b2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 801b5b4:	68fb      	ldr	r3, [r7, #12]
 801b5b6:	f023 0307 	bic.w	r3, r3, #7
 801b5ba:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 801b5bc:	68ba      	ldr	r2, [r7, #8]
 801b5be:	68fb      	ldr	r3, [r7, #12]
 801b5c0:	1ad3      	subs	r3, r2, r3
 801b5c2:	4a1f      	ldr	r2, [pc, #124]	; (801b640 <prvHeapInit+0xac>)
 801b5c4:	4413      	add	r3, r2
 801b5c6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 801b5c8:	68fb      	ldr	r3, [r7, #12]
 801b5ca:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 801b5cc:	4a1d      	ldr	r2, [pc, #116]	; (801b644 <prvHeapInit+0xb0>)
 801b5ce:	687b      	ldr	r3, [r7, #4]
 801b5d0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 801b5d2:	4b1c      	ldr	r3, [pc, #112]	; (801b644 <prvHeapInit+0xb0>)
 801b5d4:	2200      	movs	r2, #0
 801b5d6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 801b5d8:	687b      	ldr	r3, [r7, #4]
 801b5da:	68ba      	ldr	r2, [r7, #8]
 801b5dc:	4413      	add	r3, r2
 801b5de:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 801b5e0:	2208      	movs	r2, #8
 801b5e2:	68fb      	ldr	r3, [r7, #12]
 801b5e4:	1a9b      	subs	r3, r3, r2
 801b5e6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 801b5e8:	68fb      	ldr	r3, [r7, #12]
 801b5ea:	f023 0307 	bic.w	r3, r3, #7
 801b5ee:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 801b5f0:	68fb      	ldr	r3, [r7, #12]
 801b5f2:	4a15      	ldr	r2, [pc, #84]	; (801b648 <prvHeapInit+0xb4>)
 801b5f4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 801b5f6:	4b14      	ldr	r3, [pc, #80]	; (801b648 <prvHeapInit+0xb4>)
 801b5f8:	681b      	ldr	r3, [r3, #0]
 801b5fa:	2200      	movs	r2, #0
 801b5fc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 801b5fe:	4b12      	ldr	r3, [pc, #72]	; (801b648 <prvHeapInit+0xb4>)
 801b600:	681b      	ldr	r3, [r3, #0]
 801b602:	2200      	movs	r2, #0
 801b604:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 801b606:	687b      	ldr	r3, [r7, #4]
 801b608:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 801b60a:	683b      	ldr	r3, [r7, #0]
 801b60c:	68fa      	ldr	r2, [r7, #12]
 801b60e:	1ad2      	subs	r2, r2, r3
 801b610:	683b      	ldr	r3, [r7, #0]
 801b612:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 801b614:	4b0c      	ldr	r3, [pc, #48]	; (801b648 <prvHeapInit+0xb4>)
 801b616:	681a      	ldr	r2, [r3, #0]
 801b618:	683b      	ldr	r3, [r7, #0]
 801b61a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801b61c:	683b      	ldr	r3, [r7, #0]
 801b61e:	685b      	ldr	r3, [r3, #4]
 801b620:	4a0a      	ldr	r2, [pc, #40]	; (801b64c <prvHeapInit+0xb8>)
 801b622:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801b624:	683b      	ldr	r3, [r7, #0]
 801b626:	685b      	ldr	r3, [r3, #4]
 801b628:	4a09      	ldr	r2, [pc, #36]	; (801b650 <prvHeapInit+0xbc>)
 801b62a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 801b62c:	4b09      	ldr	r3, [pc, #36]	; (801b654 <prvHeapInit+0xc0>)
 801b62e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 801b632:	601a      	str	r2, [r3, #0]
}
 801b634:	bf00      	nop
 801b636:	3714      	adds	r7, #20
 801b638:	46bd      	mov	sp, r7
 801b63a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b63e:	4770      	bx	lr
 801b640:	20001908 	.word	0x20001908
 801b644:	20003908 	.word	0x20003908
 801b648:	20003910 	.word	0x20003910
 801b64c:	20003918 	.word	0x20003918
 801b650:	20003914 	.word	0x20003914
 801b654:	20003924 	.word	0x20003924

0801b658 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 801b658:	b480      	push	{r7}
 801b65a:	b085      	sub	sp, #20
 801b65c:	af00      	add	r7, sp, #0
 801b65e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 801b660:	4b28      	ldr	r3, [pc, #160]	; (801b704 <prvInsertBlockIntoFreeList+0xac>)
 801b662:	60fb      	str	r3, [r7, #12]
 801b664:	e002      	b.n	801b66c <prvInsertBlockIntoFreeList+0x14>
 801b666:	68fb      	ldr	r3, [r7, #12]
 801b668:	681b      	ldr	r3, [r3, #0]
 801b66a:	60fb      	str	r3, [r7, #12]
 801b66c:	68fb      	ldr	r3, [r7, #12]
 801b66e:	681b      	ldr	r3, [r3, #0]
 801b670:	687a      	ldr	r2, [r7, #4]
 801b672:	429a      	cmp	r2, r3
 801b674:	d8f7      	bhi.n	801b666 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 801b676:	68fb      	ldr	r3, [r7, #12]
 801b678:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 801b67a:	68fb      	ldr	r3, [r7, #12]
 801b67c:	685b      	ldr	r3, [r3, #4]
 801b67e:	68ba      	ldr	r2, [r7, #8]
 801b680:	4413      	add	r3, r2
 801b682:	687a      	ldr	r2, [r7, #4]
 801b684:	429a      	cmp	r2, r3
 801b686:	d108      	bne.n	801b69a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 801b688:	68fb      	ldr	r3, [r7, #12]
 801b68a:	685a      	ldr	r2, [r3, #4]
 801b68c:	687b      	ldr	r3, [r7, #4]
 801b68e:	685b      	ldr	r3, [r3, #4]
 801b690:	441a      	add	r2, r3
 801b692:	68fb      	ldr	r3, [r7, #12]
 801b694:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 801b696:	68fb      	ldr	r3, [r7, #12]
 801b698:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 801b69a:	687b      	ldr	r3, [r7, #4]
 801b69c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 801b69e:	687b      	ldr	r3, [r7, #4]
 801b6a0:	685b      	ldr	r3, [r3, #4]
 801b6a2:	68ba      	ldr	r2, [r7, #8]
 801b6a4:	441a      	add	r2, r3
 801b6a6:	68fb      	ldr	r3, [r7, #12]
 801b6a8:	681b      	ldr	r3, [r3, #0]
 801b6aa:	429a      	cmp	r2, r3
 801b6ac:	d118      	bne.n	801b6e0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 801b6ae:	68fb      	ldr	r3, [r7, #12]
 801b6b0:	681a      	ldr	r2, [r3, #0]
 801b6b2:	4b15      	ldr	r3, [pc, #84]	; (801b708 <prvInsertBlockIntoFreeList+0xb0>)
 801b6b4:	681b      	ldr	r3, [r3, #0]
 801b6b6:	429a      	cmp	r2, r3
 801b6b8:	d00d      	beq.n	801b6d6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 801b6ba:	687b      	ldr	r3, [r7, #4]
 801b6bc:	685a      	ldr	r2, [r3, #4]
 801b6be:	68fb      	ldr	r3, [r7, #12]
 801b6c0:	681b      	ldr	r3, [r3, #0]
 801b6c2:	685b      	ldr	r3, [r3, #4]
 801b6c4:	441a      	add	r2, r3
 801b6c6:	687b      	ldr	r3, [r7, #4]
 801b6c8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 801b6ca:	68fb      	ldr	r3, [r7, #12]
 801b6cc:	681b      	ldr	r3, [r3, #0]
 801b6ce:	681a      	ldr	r2, [r3, #0]
 801b6d0:	687b      	ldr	r3, [r7, #4]
 801b6d2:	601a      	str	r2, [r3, #0]
 801b6d4:	e008      	b.n	801b6e8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 801b6d6:	4b0c      	ldr	r3, [pc, #48]	; (801b708 <prvInsertBlockIntoFreeList+0xb0>)
 801b6d8:	681a      	ldr	r2, [r3, #0]
 801b6da:	687b      	ldr	r3, [r7, #4]
 801b6dc:	601a      	str	r2, [r3, #0]
 801b6de:	e003      	b.n	801b6e8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 801b6e0:	68fb      	ldr	r3, [r7, #12]
 801b6e2:	681a      	ldr	r2, [r3, #0]
 801b6e4:	687b      	ldr	r3, [r7, #4]
 801b6e6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 801b6e8:	68fa      	ldr	r2, [r7, #12]
 801b6ea:	687b      	ldr	r3, [r7, #4]
 801b6ec:	429a      	cmp	r2, r3
 801b6ee:	d002      	beq.n	801b6f6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 801b6f0:	68fb      	ldr	r3, [r7, #12]
 801b6f2:	687a      	ldr	r2, [r7, #4]
 801b6f4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801b6f6:	bf00      	nop
 801b6f8:	3714      	adds	r7, #20
 801b6fa:	46bd      	mov	sp, r7
 801b6fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b700:	4770      	bx	lr
 801b702:	bf00      	nop
 801b704:	20003908 	.word	0x20003908
 801b708:	20003910 	.word	0x20003910

0801b70c <_ZdlPv>:
 801b70c:	f001 bf94 	b.w	801d638 <free>

0801b710 <_ZdlPvj>:
 801b710:	f7ff bffc 	b.w	801b70c <_ZdlPv>

0801b714 <_Znwj>:
 801b714:	2801      	cmp	r0, #1
 801b716:	bf38      	it	cc
 801b718:	2001      	movcc	r0, #1
 801b71a:	b510      	push	{r4, lr}
 801b71c:	4604      	mov	r4, r0
 801b71e:	4620      	mov	r0, r4
 801b720:	f001 ff82 	bl	801d628 <malloc>
 801b724:	b100      	cbz	r0, 801b728 <_Znwj+0x14>
 801b726:	bd10      	pop	{r4, pc}
 801b728:	f000 f812 	bl	801b750 <_ZSt15get_new_handlerv>
 801b72c:	b908      	cbnz	r0, 801b732 <_Znwj+0x1e>
 801b72e:	f001 ff74 	bl	801d61a <abort>
 801b732:	4780      	blx	r0
 801b734:	e7f3      	b.n	801b71e <_Znwj+0xa>

0801b736 <_ZNSaIcEC1Ev>:
 801b736:	4770      	bx	lr

0801b738 <_ZNSaIcEC1ERKS_>:
 801b738:	4770      	bx	lr

0801b73a <_ZNSaIcED1Ev>:
 801b73a:	4770      	bx	lr

0801b73c <_ZSt17__throw_bad_allocv>:
 801b73c:	b508      	push	{r3, lr}
 801b73e:	f001 ff6c 	bl	801d61a <abort>

0801b742 <_ZSt28__throw_bad_array_new_lengthv>:
 801b742:	b508      	push	{r3, lr}
 801b744:	f001 ff69 	bl	801d61a <abort>

0801b748 <_ZSt20__throw_length_errorPKc>:
 801b748:	b508      	push	{r3, lr}
 801b74a:	f001 ff66 	bl	801d61a <abort>
	...

0801b750 <_ZSt15get_new_handlerv>:
 801b750:	4b01      	ldr	r3, [pc, #4]	; (801b758 <_ZSt15get_new_handlerv+0x8>)
 801b752:	e8d3 0faf 	lda	r0, [r3]
 801b756:	4770      	bx	lr
 801b758:	20003928 	.word	0x20003928

0801b75c <fmod>:
 801b75c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b75e:	ec57 6b10 	vmov	r6, r7, d0
 801b762:	ec55 4b11 	vmov	r4, r5, d1
 801b766:	ed2d 8b02 	vpush	{d8}
 801b76a:	f000 fa39 	bl	801bbe0 <__ieee754_fmod>
 801b76e:	4622      	mov	r2, r4
 801b770:	462b      	mov	r3, r5
 801b772:	4630      	mov	r0, r6
 801b774:	4639      	mov	r1, r7
 801b776:	eeb0 8a40 	vmov.f32	s16, s0
 801b77a:	eef0 8a60 	vmov.f32	s17, s1
 801b77e:	f7e5 f9c7 	bl	8000b10 <__aeabi_dcmpun>
 801b782:	b990      	cbnz	r0, 801b7aa <fmod+0x4e>
 801b784:	2200      	movs	r2, #0
 801b786:	2300      	movs	r3, #0
 801b788:	4620      	mov	r0, r4
 801b78a:	4629      	mov	r1, r5
 801b78c:	f7e5 f98e 	bl	8000aac <__aeabi_dcmpeq>
 801b790:	b158      	cbz	r0, 801b7aa <fmod+0x4e>
 801b792:	f002 fa33 	bl	801dbfc <__errno>
 801b796:	2321      	movs	r3, #33	; 0x21
 801b798:	2200      	movs	r2, #0
 801b79a:	6003      	str	r3, [r0, #0]
 801b79c:	2300      	movs	r3, #0
 801b79e:	4610      	mov	r0, r2
 801b7a0:	4619      	mov	r1, r3
 801b7a2:	f7e5 f845 	bl	8000830 <__aeabi_ddiv>
 801b7a6:	ec41 0b18 	vmov	d8, r0, r1
 801b7aa:	eeb0 0a48 	vmov.f32	s0, s16
 801b7ae:	eef0 0a68 	vmov.f32	s1, s17
 801b7b2:	ecbd 8b02 	vpop	{d8}
 801b7b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801b7b8 <pow>:
 801b7b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b7ba:	ec55 4b11 	vmov	r4, r5, d1
 801b7be:	ed2d 8b02 	vpush	{d8}
 801b7c2:	eeb0 8a40 	vmov.f32	s16, s0
 801b7c6:	eef0 8a60 	vmov.f32	s17, s1
 801b7ca:	f000 fb19 	bl	801be00 <__ieee754_pow>
 801b7ce:	4622      	mov	r2, r4
 801b7d0:	462b      	mov	r3, r5
 801b7d2:	4620      	mov	r0, r4
 801b7d4:	4629      	mov	r1, r5
 801b7d6:	ec57 6b10 	vmov	r6, r7, d0
 801b7da:	f7e5 f999 	bl	8000b10 <__aeabi_dcmpun>
 801b7de:	2800      	cmp	r0, #0
 801b7e0:	d13b      	bne.n	801b85a <pow+0xa2>
 801b7e2:	2200      	movs	r2, #0
 801b7e4:	2300      	movs	r3, #0
 801b7e6:	ec51 0b18 	vmov	r0, r1, d8
 801b7ea:	f7e5 f95f 	bl	8000aac <__aeabi_dcmpeq>
 801b7ee:	b1b8      	cbz	r0, 801b820 <pow+0x68>
 801b7f0:	2200      	movs	r2, #0
 801b7f2:	2300      	movs	r3, #0
 801b7f4:	4620      	mov	r0, r4
 801b7f6:	4629      	mov	r1, r5
 801b7f8:	f7e5 f958 	bl	8000aac <__aeabi_dcmpeq>
 801b7fc:	2800      	cmp	r0, #0
 801b7fe:	d146      	bne.n	801b88e <pow+0xd6>
 801b800:	ec45 4b10 	vmov	d0, r4, r5
 801b804:	f000 f900 	bl	801ba08 <finite>
 801b808:	b338      	cbz	r0, 801b85a <pow+0xa2>
 801b80a:	2200      	movs	r2, #0
 801b80c:	2300      	movs	r3, #0
 801b80e:	4620      	mov	r0, r4
 801b810:	4629      	mov	r1, r5
 801b812:	f7e5 f955 	bl	8000ac0 <__aeabi_dcmplt>
 801b816:	b300      	cbz	r0, 801b85a <pow+0xa2>
 801b818:	f002 f9f0 	bl	801dbfc <__errno>
 801b81c:	2322      	movs	r3, #34	; 0x22
 801b81e:	e01b      	b.n	801b858 <pow+0xa0>
 801b820:	ec47 6b10 	vmov	d0, r6, r7
 801b824:	f000 f8f0 	bl	801ba08 <finite>
 801b828:	b9e0      	cbnz	r0, 801b864 <pow+0xac>
 801b82a:	eeb0 0a48 	vmov.f32	s0, s16
 801b82e:	eef0 0a68 	vmov.f32	s1, s17
 801b832:	f000 f8e9 	bl	801ba08 <finite>
 801b836:	b1a8      	cbz	r0, 801b864 <pow+0xac>
 801b838:	ec45 4b10 	vmov	d0, r4, r5
 801b83c:	f000 f8e4 	bl	801ba08 <finite>
 801b840:	b180      	cbz	r0, 801b864 <pow+0xac>
 801b842:	4632      	mov	r2, r6
 801b844:	463b      	mov	r3, r7
 801b846:	4630      	mov	r0, r6
 801b848:	4639      	mov	r1, r7
 801b84a:	f7e5 f961 	bl	8000b10 <__aeabi_dcmpun>
 801b84e:	2800      	cmp	r0, #0
 801b850:	d0e2      	beq.n	801b818 <pow+0x60>
 801b852:	f002 f9d3 	bl	801dbfc <__errno>
 801b856:	2321      	movs	r3, #33	; 0x21
 801b858:	6003      	str	r3, [r0, #0]
 801b85a:	ecbd 8b02 	vpop	{d8}
 801b85e:	ec47 6b10 	vmov	d0, r6, r7
 801b862:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801b864:	2200      	movs	r2, #0
 801b866:	2300      	movs	r3, #0
 801b868:	4630      	mov	r0, r6
 801b86a:	4639      	mov	r1, r7
 801b86c:	f7e5 f91e 	bl	8000aac <__aeabi_dcmpeq>
 801b870:	2800      	cmp	r0, #0
 801b872:	d0f2      	beq.n	801b85a <pow+0xa2>
 801b874:	eeb0 0a48 	vmov.f32	s0, s16
 801b878:	eef0 0a68 	vmov.f32	s1, s17
 801b87c:	f000 f8c4 	bl	801ba08 <finite>
 801b880:	2800      	cmp	r0, #0
 801b882:	d0ea      	beq.n	801b85a <pow+0xa2>
 801b884:	ec45 4b10 	vmov	d0, r4, r5
 801b888:	f000 f8be 	bl	801ba08 <finite>
 801b88c:	e7c3      	b.n	801b816 <pow+0x5e>
 801b88e:	2600      	movs	r6, #0
 801b890:	4f00      	ldr	r7, [pc, #0]	; (801b894 <pow+0xdc>)
 801b892:	e7e2      	b.n	801b85a <pow+0xa2>
 801b894:	3ff00000 	.word	0x3ff00000

0801b898 <sqrt>:
 801b898:	b538      	push	{r3, r4, r5, lr}
 801b89a:	ec55 4b10 	vmov	r4, r5, d0
 801b89e:	ed2d 8b02 	vpush	{d8}
 801b8a2:	f000 f8bd 	bl	801ba20 <__ieee754_sqrt>
 801b8a6:	4622      	mov	r2, r4
 801b8a8:	462b      	mov	r3, r5
 801b8aa:	4620      	mov	r0, r4
 801b8ac:	4629      	mov	r1, r5
 801b8ae:	eeb0 8a40 	vmov.f32	s16, s0
 801b8b2:	eef0 8a60 	vmov.f32	s17, s1
 801b8b6:	f7e5 f92b 	bl	8000b10 <__aeabi_dcmpun>
 801b8ba:	b990      	cbnz	r0, 801b8e2 <sqrt+0x4a>
 801b8bc:	2200      	movs	r2, #0
 801b8be:	2300      	movs	r3, #0
 801b8c0:	4620      	mov	r0, r4
 801b8c2:	4629      	mov	r1, r5
 801b8c4:	f7e5 f8fc 	bl	8000ac0 <__aeabi_dcmplt>
 801b8c8:	b158      	cbz	r0, 801b8e2 <sqrt+0x4a>
 801b8ca:	f002 f997 	bl	801dbfc <__errno>
 801b8ce:	2321      	movs	r3, #33	; 0x21
 801b8d0:	2200      	movs	r2, #0
 801b8d2:	6003      	str	r3, [r0, #0]
 801b8d4:	2300      	movs	r3, #0
 801b8d6:	4610      	mov	r0, r2
 801b8d8:	4619      	mov	r1, r3
 801b8da:	f7e4 ffa9 	bl	8000830 <__aeabi_ddiv>
 801b8de:	ec41 0b18 	vmov	d8, r0, r1
 801b8e2:	eeb0 0a48 	vmov.f32	s0, s16
 801b8e6:	eef0 0a68 	vmov.f32	s1, s17
 801b8ea:	ecbd 8b02 	vpop	{d8}
 801b8ee:	bd38      	pop	{r3, r4, r5, pc}

0801b8f0 <atan2f>:
 801b8f0:	f001 b864 	b.w	801c9bc <__ieee754_atan2f>

0801b8f4 <cosf>:
 801b8f4:	ee10 3a10 	vmov	r3, s0
 801b8f8:	b507      	push	{r0, r1, r2, lr}
 801b8fa:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801b8fe:	4a1d      	ldr	r2, [pc, #116]	; (801b974 <cosf+0x80>)
 801b900:	4293      	cmp	r3, r2
 801b902:	dc06      	bgt.n	801b912 <cosf+0x1e>
 801b904:	eddf 0a1c 	vldr	s1, [pc, #112]	; 801b978 <cosf+0x84>
 801b908:	b003      	add	sp, #12
 801b90a:	f85d eb04 	ldr.w	lr, [sp], #4
 801b90e:	f000 bfaf 	b.w	801c870 <__kernel_cosf>
 801b912:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 801b916:	db04      	blt.n	801b922 <cosf+0x2e>
 801b918:	ee30 0a40 	vsub.f32	s0, s0, s0
 801b91c:	b003      	add	sp, #12
 801b91e:	f85d fb04 	ldr.w	pc, [sp], #4
 801b922:	4668      	mov	r0, sp
 801b924:	f001 f8e8 	bl	801caf8 <__ieee754_rem_pio2f>
 801b928:	f000 0003 	and.w	r0, r0, #3
 801b92c:	2801      	cmp	r0, #1
 801b92e:	d009      	beq.n	801b944 <cosf+0x50>
 801b930:	2802      	cmp	r0, #2
 801b932:	d010      	beq.n	801b956 <cosf+0x62>
 801b934:	b9b0      	cbnz	r0, 801b964 <cosf+0x70>
 801b936:	eddd 0a01 	vldr	s1, [sp, #4]
 801b93a:	ed9d 0a00 	vldr	s0, [sp]
 801b93e:	f000 ff97 	bl	801c870 <__kernel_cosf>
 801b942:	e7eb      	b.n	801b91c <cosf+0x28>
 801b944:	eddd 0a01 	vldr	s1, [sp, #4]
 801b948:	ed9d 0a00 	vldr	s0, [sp]
 801b94c:	f000 ffee 	bl	801c92c <__kernel_sinf>
 801b950:	eeb1 0a40 	vneg.f32	s0, s0
 801b954:	e7e2      	b.n	801b91c <cosf+0x28>
 801b956:	eddd 0a01 	vldr	s1, [sp, #4]
 801b95a:	ed9d 0a00 	vldr	s0, [sp]
 801b95e:	f000 ff87 	bl	801c870 <__kernel_cosf>
 801b962:	e7f5      	b.n	801b950 <cosf+0x5c>
 801b964:	2001      	movs	r0, #1
 801b966:	eddd 0a01 	vldr	s1, [sp, #4]
 801b96a:	ed9d 0a00 	vldr	s0, [sp]
 801b96e:	f000 ffdd 	bl	801c92c <__kernel_sinf>
 801b972:	e7d3      	b.n	801b91c <cosf+0x28>
 801b974:	3f490fd8 	.word	0x3f490fd8
 801b978:	00000000 	.word	0x00000000

0801b97c <sinf>:
 801b97c:	ee10 3a10 	vmov	r3, s0
 801b980:	b507      	push	{r0, r1, r2, lr}
 801b982:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801b986:	4a1e      	ldr	r2, [pc, #120]	; (801ba00 <sinf+0x84>)
 801b988:	4293      	cmp	r3, r2
 801b98a:	dc07      	bgt.n	801b99c <sinf+0x20>
 801b98c:	2000      	movs	r0, #0
 801b98e:	eddf 0a1d 	vldr	s1, [pc, #116]	; 801ba04 <sinf+0x88>
 801b992:	b003      	add	sp, #12
 801b994:	f85d eb04 	ldr.w	lr, [sp], #4
 801b998:	f000 bfc8 	b.w	801c92c <__kernel_sinf>
 801b99c:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 801b9a0:	db04      	blt.n	801b9ac <sinf+0x30>
 801b9a2:	ee30 0a40 	vsub.f32	s0, s0, s0
 801b9a6:	b003      	add	sp, #12
 801b9a8:	f85d fb04 	ldr.w	pc, [sp], #4
 801b9ac:	4668      	mov	r0, sp
 801b9ae:	f001 f8a3 	bl	801caf8 <__ieee754_rem_pio2f>
 801b9b2:	f000 0003 	and.w	r0, r0, #3
 801b9b6:	2801      	cmp	r0, #1
 801b9b8:	d00a      	beq.n	801b9d0 <sinf+0x54>
 801b9ba:	2802      	cmp	r0, #2
 801b9bc:	d00f      	beq.n	801b9de <sinf+0x62>
 801b9be:	b9c0      	cbnz	r0, 801b9f2 <sinf+0x76>
 801b9c0:	2001      	movs	r0, #1
 801b9c2:	eddd 0a01 	vldr	s1, [sp, #4]
 801b9c6:	ed9d 0a00 	vldr	s0, [sp]
 801b9ca:	f000 ffaf 	bl	801c92c <__kernel_sinf>
 801b9ce:	e7ea      	b.n	801b9a6 <sinf+0x2a>
 801b9d0:	eddd 0a01 	vldr	s1, [sp, #4]
 801b9d4:	ed9d 0a00 	vldr	s0, [sp]
 801b9d8:	f000 ff4a 	bl	801c870 <__kernel_cosf>
 801b9dc:	e7e3      	b.n	801b9a6 <sinf+0x2a>
 801b9de:	2001      	movs	r0, #1
 801b9e0:	eddd 0a01 	vldr	s1, [sp, #4]
 801b9e4:	ed9d 0a00 	vldr	s0, [sp]
 801b9e8:	f000 ffa0 	bl	801c92c <__kernel_sinf>
 801b9ec:	eeb1 0a40 	vneg.f32	s0, s0
 801b9f0:	e7d9      	b.n	801b9a6 <sinf+0x2a>
 801b9f2:	eddd 0a01 	vldr	s1, [sp, #4]
 801b9f6:	ed9d 0a00 	vldr	s0, [sp]
 801b9fa:	f000 ff39 	bl	801c870 <__kernel_cosf>
 801b9fe:	e7f5      	b.n	801b9ec <sinf+0x70>
 801ba00:	3f490fd8 	.word	0x3f490fd8
 801ba04:	00000000 	.word	0x00000000

0801ba08 <finite>:
 801ba08:	b082      	sub	sp, #8
 801ba0a:	ed8d 0b00 	vstr	d0, [sp]
 801ba0e:	9801      	ldr	r0, [sp, #4]
 801ba10:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 801ba14:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 801ba18:	0fc0      	lsrs	r0, r0, #31
 801ba1a:	b002      	add	sp, #8
 801ba1c:	4770      	bx	lr
	...

0801ba20 <__ieee754_sqrt>:
 801ba20:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ba24:	4e6b      	ldr	r6, [pc, #428]	; (801bbd4 <__ieee754_sqrt+0x1b4>)
 801ba26:	ee10 0a10 	vmov	r0, s0
 801ba2a:	ee10 2a10 	vmov	r2, s0
 801ba2e:	ec55 4b10 	vmov	r4, r5, d0
 801ba32:	43ae      	bics	r6, r5
 801ba34:	4629      	mov	r1, r5
 801ba36:	462b      	mov	r3, r5
 801ba38:	d10d      	bne.n	801ba56 <__ieee754_sqrt+0x36>
 801ba3a:	f7e4 fdcf 	bl	80005dc <__aeabi_dmul>
 801ba3e:	4602      	mov	r2, r0
 801ba40:	460b      	mov	r3, r1
 801ba42:	4620      	mov	r0, r4
 801ba44:	4629      	mov	r1, r5
 801ba46:	f7e4 fc13 	bl	8000270 <__adddf3>
 801ba4a:	4604      	mov	r4, r0
 801ba4c:	460d      	mov	r5, r1
 801ba4e:	ec45 4b10 	vmov	d0, r4, r5
 801ba52:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ba56:	2d00      	cmp	r5, #0
 801ba58:	dc0b      	bgt.n	801ba72 <__ieee754_sqrt+0x52>
 801ba5a:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 801ba5e:	4326      	orrs	r6, r4
 801ba60:	d0f5      	beq.n	801ba4e <__ieee754_sqrt+0x2e>
 801ba62:	b135      	cbz	r5, 801ba72 <__ieee754_sqrt+0x52>
 801ba64:	f7e4 fc02 	bl	800026c <__aeabi_dsub>
 801ba68:	4602      	mov	r2, r0
 801ba6a:	460b      	mov	r3, r1
 801ba6c:	f7e4 fee0 	bl	8000830 <__aeabi_ddiv>
 801ba70:	e7eb      	b.n	801ba4a <__ieee754_sqrt+0x2a>
 801ba72:	1509      	asrs	r1, r1, #20
 801ba74:	f000 8091 	beq.w	801bb9a <__ieee754_sqrt+0x17a>
 801ba78:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801ba7c:	f2a1 36ff 	subw	r6, r1, #1023	; 0x3ff
 801ba80:	07c9      	lsls	r1, r1, #31
 801ba82:	f04f 0500 	mov.w	r5, #0
 801ba86:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801ba8a:	ea4f 0666 	mov.w	r6, r6, asr #1
 801ba8e:	f04f 0e16 	mov.w	lr, #22
 801ba92:	46ac      	mov	ip, r5
 801ba94:	bf58      	it	pl
 801ba96:	005b      	lslpl	r3, r3, #1
 801ba98:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 801ba9c:	bf5c      	itt	pl
 801ba9e:	eb03 73d2 	addpl.w	r3, r3, r2, lsr #31
 801baa2:	0052      	lslpl	r2, r2, #1
 801baa4:	005b      	lsls	r3, r3, #1
 801baa6:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 801baaa:	0052      	lsls	r2, r2, #1
 801baac:	eb0c 0001 	add.w	r0, ip, r1
 801bab0:	4298      	cmp	r0, r3
 801bab2:	bfde      	ittt	le
 801bab4:	1a1b      	suble	r3, r3, r0
 801bab6:	eb00 0c01 	addle.w	ip, r0, r1
 801baba:	186d      	addle	r5, r5, r1
 801babc:	f1be 0e01 	subs.w	lr, lr, #1
 801bac0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 801bac4:	ea4f 0151 	mov.w	r1, r1, lsr #1
 801bac8:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 801bacc:	ea4f 0242 	mov.w	r2, r2, lsl #1
 801bad0:	d1ec      	bne.n	801baac <__ieee754_sqrt+0x8c>
 801bad2:	4674      	mov	r4, lr
 801bad4:	2720      	movs	r7, #32
 801bad6:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 801bada:	4563      	cmp	r3, ip
 801badc:	eb01 000e 	add.w	r0, r1, lr
 801bae0:	dc02      	bgt.n	801bae8 <__ieee754_sqrt+0xc8>
 801bae2:	d114      	bne.n	801bb0e <__ieee754_sqrt+0xee>
 801bae4:	4290      	cmp	r0, r2
 801bae6:	d812      	bhi.n	801bb0e <__ieee754_sqrt+0xee>
 801bae8:	2800      	cmp	r0, #0
 801baea:	eb00 0e01 	add.w	lr, r0, r1
 801baee:	da59      	bge.n	801bba4 <__ieee754_sqrt+0x184>
 801baf0:	f1be 0f00 	cmp.w	lr, #0
 801baf4:	db56      	blt.n	801bba4 <__ieee754_sqrt+0x184>
 801baf6:	f10c 0801 	add.w	r8, ip, #1
 801bafa:	eba3 030c 	sub.w	r3, r3, ip
 801bafe:	4290      	cmp	r0, r2
 801bb00:	440c      	add	r4, r1
 801bb02:	eba2 0200 	sub.w	r2, r2, r0
 801bb06:	bf88      	it	hi
 801bb08:	f103 33ff 	addhi.w	r3, r3, #4294967295
 801bb0c:	46c4      	mov	ip, r8
 801bb0e:	005b      	lsls	r3, r3, #1
 801bb10:	3f01      	subs	r7, #1
 801bb12:	ea4f 0151 	mov.w	r1, r1, lsr #1
 801bb16:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 801bb1a:	ea4f 0242 	mov.w	r2, r2, lsl #1
 801bb1e:	d1dc      	bne.n	801bada <__ieee754_sqrt+0xba>
 801bb20:	4313      	orrs	r3, r2
 801bb22:	d01b      	beq.n	801bb5c <__ieee754_sqrt+0x13c>
 801bb24:	f8df a0b0 	ldr.w	sl, [pc, #176]	; 801bbd8 <__ieee754_sqrt+0x1b8>
 801bb28:	f8df b0b0 	ldr.w	fp, [pc, #176]	; 801bbdc <__ieee754_sqrt+0x1bc>
 801bb2c:	e9da 0100 	ldrd	r0, r1, [sl]
 801bb30:	e9db 2300 	ldrd	r2, r3, [fp]
 801bb34:	e9da 8900 	ldrd	r8, r9, [sl]
 801bb38:	f7e4 fb98 	bl	800026c <__aeabi_dsub>
 801bb3c:	4602      	mov	r2, r0
 801bb3e:	460b      	mov	r3, r1
 801bb40:	4640      	mov	r0, r8
 801bb42:	4649      	mov	r1, r9
 801bb44:	f7e4 ffc6 	bl	8000ad4 <__aeabi_dcmple>
 801bb48:	b140      	cbz	r0, 801bb5c <__ieee754_sqrt+0x13c>
 801bb4a:	f1b4 3fff 	cmp.w	r4, #4294967295
 801bb4e:	e9da 0100 	ldrd	r0, r1, [sl]
 801bb52:	e9db 2300 	ldrd	r2, r3, [fp]
 801bb56:	d127      	bne.n	801bba8 <__ieee754_sqrt+0x188>
 801bb58:	3501      	adds	r5, #1
 801bb5a:	463c      	mov	r4, r7
 801bb5c:	106a      	asrs	r2, r5, #1
 801bb5e:	07e9      	lsls	r1, r5, #31
 801bb60:	ea4f 0354 	mov.w	r3, r4, lsr #1
 801bb64:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 801bb68:	bf48      	it	mi
 801bb6a:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 801bb6e:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 801bb72:	461c      	mov	r4, r3
 801bb74:	eb02 5506 	add.w	r5, r2, r6, lsl #20
 801bb78:	e769      	b.n	801ba4e <__ieee754_sqrt+0x2e>
 801bb7a:	0ad3      	lsrs	r3, r2, #11
 801bb7c:	3815      	subs	r0, #21
 801bb7e:	0552      	lsls	r2, r2, #21
 801bb80:	2b00      	cmp	r3, #0
 801bb82:	d0fa      	beq.n	801bb7a <__ieee754_sqrt+0x15a>
 801bb84:	02dc      	lsls	r4, r3, #11
 801bb86:	d50a      	bpl.n	801bb9e <__ieee754_sqrt+0x17e>
 801bb88:	f1c1 0420 	rsb	r4, r1, #32
 801bb8c:	1e4d      	subs	r5, r1, #1
 801bb8e:	fa22 f404 	lsr.w	r4, r2, r4
 801bb92:	408a      	lsls	r2, r1
 801bb94:	1b41      	subs	r1, r0, r5
 801bb96:	4323      	orrs	r3, r4
 801bb98:	e76e      	b.n	801ba78 <__ieee754_sqrt+0x58>
 801bb9a:	4608      	mov	r0, r1
 801bb9c:	e7f0      	b.n	801bb80 <__ieee754_sqrt+0x160>
 801bb9e:	005b      	lsls	r3, r3, #1
 801bba0:	3101      	adds	r1, #1
 801bba2:	e7ef      	b.n	801bb84 <__ieee754_sqrt+0x164>
 801bba4:	46e0      	mov	r8, ip
 801bba6:	e7a8      	b.n	801bafa <__ieee754_sqrt+0xda>
 801bba8:	e9da 8900 	ldrd	r8, r9, [sl]
 801bbac:	f7e4 fb60 	bl	8000270 <__adddf3>
 801bbb0:	4602      	mov	r2, r0
 801bbb2:	460b      	mov	r3, r1
 801bbb4:	4640      	mov	r0, r8
 801bbb6:	4649      	mov	r1, r9
 801bbb8:	f7e4 ff82 	bl	8000ac0 <__aeabi_dcmplt>
 801bbbc:	b128      	cbz	r0, 801bbca <__ieee754_sqrt+0x1aa>
 801bbbe:	1ca0      	adds	r0, r4, #2
 801bbc0:	f104 0402 	add.w	r4, r4, #2
 801bbc4:	bf08      	it	eq
 801bbc6:	3501      	addeq	r5, #1
 801bbc8:	e7c8      	b.n	801bb5c <__ieee754_sqrt+0x13c>
 801bbca:	3401      	adds	r4, #1
 801bbcc:	f024 0401 	bic.w	r4, r4, #1
 801bbd0:	e7c4      	b.n	801bb5c <__ieee754_sqrt+0x13c>
 801bbd2:	bf00      	nop
 801bbd4:	7ff00000 	.word	0x7ff00000
 801bbd8:	200000a0 	.word	0x200000a0
 801bbdc:	200000a8 	.word	0x200000a8

0801bbe0 <__ieee754_fmod>:
 801bbe0:	ec53 2b11 	vmov	r2, r3, d1
 801bbe4:	f023 4c00 	bic.w	ip, r3, #2147483648	; 0x80000000
 801bbe8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801bbec:	ea5c 0402 	orrs.w	r4, ip, r2
 801bbf0:	461e      	mov	r6, r3
 801bbf2:	ee11 7a10 	vmov	r7, s2
 801bbf6:	ee11 ea10 	vmov	lr, s2
 801bbfa:	ec51 0b10 	vmov	r0, r1, d0
 801bbfe:	d00c      	beq.n	801bc1a <__ieee754_fmod+0x3a>
 801bc00:	f021 4800 	bic.w	r8, r1, #2147483648	; 0x80000000
 801bc04:	4c77      	ldr	r4, [pc, #476]	; (801bde4 <__ieee754_fmod+0x204>)
 801bc06:	4689      	mov	r9, r1
 801bc08:	45a0      	cmp	r8, r4
 801bc0a:	dc06      	bgt.n	801bc1a <__ieee754_fmod+0x3a>
 801bc0c:	4254      	negs	r4, r2
 801bc0e:	4d76      	ldr	r5, [pc, #472]	; (801bde8 <__ieee754_fmod+0x208>)
 801bc10:	4314      	orrs	r4, r2
 801bc12:	ea4c 74d4 	orr.w	r4, ip, r4, lsr #31
 801bc16:	42ac      	cmp	r4, r5
 801bc18:	d909      	bls.n	801bc2e <__ieee754_fmod+0x4e>
 801bc1a:	f7e4 fcdf 	bl	80005dc <__aeabi_dmul>
 801bc1e:	4602      	mov	r2, r0
 801bc20:	460b      	mov	r3, r1
 801bc22:	f7e4 fe05 	bl	8000830 <__aeabi_ddiv>
 801bc26:	ec41 0b10 	vmov	d0, r0, r1
 801bc2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801bc2e:	45e0      	cmp	r8, ip
 801bc30:	ee10 aa10 	vmov	sl, s0
 801bc34:	ee10 4a10 	vmov	r4, s0
 801bc38:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 801bc3c:	dc09      	bgt.n	801bc52 <__ieee754_fmod+0x72>
 801bc3e:	dbf2      	blt.n	801bc26 <__ieee754_fmod+0x46>
 801bc40:	4290      	cmp	r0, r2
 801bc42:	d3f0      	bcc.n	801bc26 <__ieee754_fmod+0x46>
 801bc44:	d105      	bne.n	801bc52 <__ieee754_fmod+0x72>
 801bc46:	4b69      	ldr	r3, [pc, #420]	; (801bdec <__ieee754_fmod+0x20c>)
 801bc48:	eb03 7315 	add.w	r3, r3, r5, lsr #28
 801bc4c:	e9d3 0100 	ldrd	r0, r1, [r3]
 801bc50:	e7e9      	b.n	801bc26 <__ieee754_fmod+0x46>
 801bc52:	4a65      	ldr	r2, [pc, #404]	; (801bde8 <__ieee754_fmod+0x208>)
 801bc54:	ea19 0f02 	tst.w	r9, r2
 801bc58:	d148      	bne.n	801bcec <__ieee754_fmod+0x10c>
 801bc5a:	f1b8 0f00 	cmp.w	r8, #0
 801bc5e:	d13d      	bne.n	801bcdc <__ieee754_fmod+0xfc>
 801bc60:	4653      	mov	r3, sl
 801bc62:	4963      	ldr	r1, [pc, #396]	; (801bdf0 <__ieee754_fmod+0x210>)
 801bc64:	2b00      	cmp	r3, #0
 801bc66:	dc36      	bgt.n	801bcd6 <__ieee754_fmod+0xf6>
 801bc68:	4216      	tst	r6, r2
 801bc6a:	d14f      	bne.n	801bd0c <__ieee754_fmod+0x12c>
 801bc6c:	f1bc 0f00 	cmp.w	ip, #0
 801bc70:	d144      	bne.n	801bcfc <__ieee754_fmod+0x11c>
 801bc72:	463b      	mov	r3, r7
 801bc74:	4a5e      	ldr	r2, [pc, #376]	; (801bdf0 <__ieee754_fmod+0x210>)
 801bc76:	2b00      	cmp	r3, #0
 801bc78:	dc3d      	bgt.n	801bcf6 <__ieee754_fmod+0x116>
 801bc7a:	485e      	ldr	r0, [pc, #376]	; (801bdf4 <__ieee754_fmod+0x214>)
 801bc7c:	4281      	cmp	r1, r0
 801bc7e:	db4a      	blt.n	801bd16 <__ieee754_fmod+0x136>
 801bc80:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801bc84:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801bc88:	485a      	ldr	r0, [pc, #360]	; (801bdf4 <__ieee754_fmod+0x214>)
 801bc8a:	4282      	cmp	r2, r0
 801bc8c:	db57      	blt.n	801bd3e <__ieee754_fmod+0x15e>
 801bc8e:	f3c6 0613 	ubfx	r6, r6, #0, #20
 801bc92:	f446 1680 	orr.w	r6, r6, #1048576	; 0x100000
 801bc96:	1a89      	subs	r1, r1, r2
 801bc98:	1b98      	subs	r0, r3, r6
 801bc9a:	eba4 070e 	sub.w	r7, r4, lr
 801bc9e:	2900      	cmp	r1, #0
 801bca0:	d162      	bne.n	801bd68 <__ieee754_fmod+0x188>
 801bca2:	4574      	cmp	r4, lr
 801bca4:	bf38      	it	cc
 801bca6:	f100 30ff 	addcc.w	r0, r0, #4294967295
 801bcaa:	2800      	cmp	r0, #0
 801bcac:	bfa4      	itt	ge
 801bcae:	463c      	movge	r4, r7
 801bcb0:	4603      	movge	r3, r0
 801bcb2:	ea53 0104 	orrs.w	r1, r3, r4
 801bcb6:	d0c6      	beq.n	801bc46 <__ieee754_fmod+0x66>
 801bcb8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801bcbc:	db69      	blt.n	801bd92 <__ieee754_fmod+0x1b2>
 801bcbe:	494d      	ldr	r1, [pc, #308]	; (801bdf4 <__ieee754_fmod+0x214>)
 801bcc0:	428a      	cmp	r2, r1
 801bcc2:	db6c      	blt.n	801bd9e <__ieee754_fmod+0x1be>
 801bcc4:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 801bcc8:	f202 32ff 	addw	r2, r2, #1023	; 0x3ff
 801bccc:	4620      	mov	r0, r4
 801bcce:	432b      	orrs	r3, r5
 801bcd0:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 801bcd4:	e7a7      	b.n	801bc26 <__ieee754_fmod+0x46>
 801bcd6:	3901      	subs	r1, #1
 801bcd8:	005b      	lsls	r3, r3, #1
 801bcda:	e7c3      	b.n	801bc64 <__ieee754_fmod+0x84>
 801bcdc:	ea4f 23c8 	mov.w	r3, r8, lsl #11
 801bce0:	4944      	ldr	r1, [pc, #272]	; (801bdf4 <__ieee754_fmod+0x214>)
 801bce2:	2b00      	cmp	r3, #0
 801bce4:	ddc0      	ble.n	801bc68 <__ieee754_fmod+0x88>
 801bce6:	3901      	subs	r1, #1
 801bce8:	005b      	lsls	r3, r3, #1
 801bcea:	e7fa      	b.n	801bce2 <__ieee754_fmod+0x102>
 801bcec:	ea4f 5128 	mov.w	r1, r8, asr #20
 801bcf0:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 801bcf4:	e7b8      	b.n	801bc68 <__ieee754_fmod+0x88>
 801bcf6:	3a01      	subs	r2, #1
 801bcf8:	005b      	lsls	r3, r3, #1
 801bcfa:	e7bc      	b.n	801bc76 <__ieee754_fmod+0x96>
 801bcfc:	ea4f 23cc 	mov.w	r3, ip, lsl #11
 801bd00:	4a3c      	ldr	r2, [pc, #240]	; (801bdf4 <__ieee754_fmod+0x214>)
 801bd02:	2b00      	cmp	r3, #0
 801bd04:	ddb9      	ble.n	801bc7a <__ieee754_fmod+0x9a>
 801bd06:	3a01      	subs	r2, #1
 801bd08:	005b      	lsls	r3, r3, #1
 801bd0a:	e7fa      	b.n	801bd02 <__ieee754_fmod+0x122>
 801bd0c:	ea4f 522c 	mov.w	r2, ip, asr #20
 801bd10:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 801bd14:	e7b1      	b.n	801bc7a <__ieee754_fmod+0x9a>
 801bd16:	1a40      	subs	r0, r0, r1
 801bd18:	281f      	cmp	r0, #31
 801bd1a:	dc0a      	bgt.n	801bd32 <__ieee754_fmod+0x152>
 801bd1c:	f201 431e 	addw	r3, r1, #1054	; 0x41e
 801bd20:	fa08 f800 	lsl.w	r8, r8, r0
 801bd24:	fa0a f400 	lsl.w	r4, sl, r0
 801bd28:	fa2a f303 	lsr.w	r3, sl, r3
 801bd2c:	ea43 0308 	orr.w	r3, r3, r8
 801bd30:	e7aa      	b.n	801bc88 <__ieee754_fmod+0xa8>
 801bd32:	4b31      	ldr	r3, [pc, #196]	; (801bdf8 <__ieee754_fmod+0x218>)
 801bd34:	2400      	movs	r4, #0
 801bd36:	1a5b      	subs	r3, r3, r1
 801bd38:	fa0a f303 	lsl.w	r3, sl, r3
 801bd3c:	e7a4      	b.n	801bc88 <__ieee754_fmod+0xa8>
 801bd3e:	1a80      	subs	r0, r0, r2
 801bd40:	281f      	cmp	r0, #31
 801bd42:	dc0a      	bgt.n	801bd5a <__ieee754_fmod+0x17a>
 801bd44:	f202 461e 	addw	r6, r2, #1054	; 0x41e
 801bd48:	fa0c fc00 	lsl.w	ip, ip, r0
 801bd4c:	fa07 fe00 	lsl.w	lr, r7, r0
 801bd50:	fa27 f606 	lsr.w	r6, r7, r6
 801bd54:	ea46 060c 	orr.w	r6, r6, ip
 801bd58:	e79d      	b.n	801bc96 <__ieee754_fmod+0xb6>
 801bd5a:	4e27      	ldr	r6, [pc, #156]	; (801bdf8 <__ieee754_fmod+0x218>)
 801bd5c:	f04f 0e00 	mov.w	lr, #0
 801bd60:	1ab6      	subs	r6, r6, r2
 801bd62:	fa07 f606 	lsl.w	r6, r7, r6
 801bd66:	e796      	b.n	801bc96 <__ieee754_fmod+0xb6>
 801bd68:	4574      	cmp	r4, lr
 801bd6a:	bf38      	it	cc
 801bd6c:	f100 30ff 	addcc.w	r0, r0, #4294967295
 801bd70:	2800      	cmp	r0, #0
 801bd72:	da05      	bge.n	801bd80 <__ieee754_fmod+0x1a0>
 801bd74:	0fe0      	lsrs	r0, r4, #31
 801bd76:	0064      	lsls	r4, r4, #1
 801bd78:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 801bd7c:	3901      	subs	r1, #1
 801bd7e:	e78b      	b.n	801bc98 <__ieee754_fmod+0xb8>
 801bd80:	ea50 0307 	orrs.w	r3, r0, r7
 801bd84:	f43f af5f 	beq.w	801bc46 <__ieee754_fmod+0x66>
 801bd88:	0ffb      	lsrs	r3, r7, #31
 801bd8a:	007c      	lsls	r4, r7, #1
 801bd8c:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 801bd90:	e7f4      	b.n	801bd7c <__ieee754_fmod+0x19c>
 801bd92:	0fe1      	lsrs	r1, r4, #31
 801bd94:	3a01      	subs	r2, #1
 801bd96:	0064      	lsls	r4, r4, #1
 801bd98:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 801bd9c:	e78c      	b.n	801bcb8 <__ieee754_fmod+0xd8>
 801bd9e:	1a89      	subs	r1, r1, r2
 801bda0:	2914      	cmp	r1, #20
 801bda2:	dc0a      	bgt.n	801bdba <__ieee754_fmod+0x1da>
 801bda4:	f202 421e 	addw	r2, r2, #1054	; 0x41e
 801bda8:	40cc      	lsrs	r4, r1
 801bdaa:	fa03 f202 	lsl.w	r2, r3, r2
 801bdae:	410b      	asrs	r3, r1
 801bdb0:	4322      	orrs	r2, r4
 801bdb2:	ea43 0105 	orr.w	r1, r3, r5
 801bdb6:	4610      	mov	r0, r2
 801bdb8:	e735      	b.n	801bc26 <__ieee754_fmod+0x46>
 801bdba:	291f      	cmp	r1, #31
 801bdbc:	dc07      	bgt.n	801bdce <__ieee754_fmod+0x1ee>
 801bdbe:	f202 421e 	addw	r2, r2, #1054	; 0x41e
 801bdc2:	40cc      	lsrs	r4, r1
 801bdc4:	fa03 f202 	lsl.w	r2, r3, r2
 801bdc8:	4322      	orrs	r2, r4
 801bdca:	462b      	mov	r3, r5
 801bdcc:	e7f1      	b.n	801bdb2 <__ieee754_fmod+0x1d2>
 801bdce:	f1c2 427f 	rsb	r2, r2, #4278190080	; 0xff000000
 801bdd2:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 801bdd6:	f502 427b 	add.w	r2, r2, #64256	; 0xfb00
 801bdda:	32e2      	adds	r2, #226	; 0xe2
 801bddc:	fa43 f202 	asr.w	r2, r3, r2
 801bde0:	e7f3      	b.n	801bdca <__ieee754_fmod+0x1ea>
 801bde2:	bf00      	nop
 801bde4:	7fefffff 	.word	0x7fefffff
 801bde8:	7ff00000 	.word	0x7ff00000
 801bdec:	0801f2c8 	.word	0x0801f2c8
 801bdf0:	fffffbed 	.word	0xfffffbed
 801bdf4:	fffffc02 	.word	0xfffffc02
 801bdf8:	fffffbe2 	.word	0xfffffbe2
 801bdfc:	00000000 	.word	0x00000000

0801be00 <__ieee754_pow>:
 801be00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801be04:	ed2d 8b06 	vpush	{d8-d10}
 801be08:	b089      	sub	sp, #36	; 0x24
 801be0a:	ed8d 1b00 	vstr	d1, [sp]
 801be0e:	e9dd 2900 	ldrd	r2, r9, [sp]
 801be12:	ec57 6b10 	vmov	r6, r7, d0
 801be16:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 801be1a:	ea58 0102 	orrs.w	r1, r8, r2
 801be1e:	d115      	bne.n	801be4c <__ieee754_pow+0x4c>
 801be20:	19b3      	adds	r3, r6, r6
 801be22:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 801be26:	4152      	adcs	r2, r2
 801be28:	4299      	cmp	r1, r3
 801be2a:	4b89      	ldr	r3, [pc, #548]	; (801c050 <__ieee754_pow+0x250>)
 801be2c:	4193      	sbcs	r3, r2
 801be2e:	f080 84d2 	bcs.w	801c7d6 <__ieee754_pow+0x9d6>
 801be32:	4630      	mov	r0, r6
 801be34:	4639      	mov	r1, r7
 801be36:	e9dd 2300 	ldrd	r2, r3, [sp]
 801be3a:	f7e4 fa19 	bl	8000270 <__adddf3>
 801be3e:	ec41 0b10 	vmov	d0, r0, r1
 801be42:	b009      	add	sp, #36	; 0x24
 801be44:	ecbd 8b06 	vpop	{d8-d10}
 801be48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801be4c:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 801be50:	4b80      	ldr	r3, [pc, #512]	; (801c054 <__ieee754_pow+0x254>)
 801be52:	463d      	mov	r5, r7
 801be54:	ee10 aa10 	vmov	sl, s0
 801be58:	429c      	cmp	r4, r3
 801be5a:	dc06      	bgt.n	801be6a <__ieee754_pow+0x6a>
 801be5c:	d101      	bne.n	801be62 <__ieee754_pow+0x62>
 801be5e:	2e00      	cmp	r6, #0
 801be60:	d1e7      	bne.n	801be32 <__ieee754_pow+0x32>
 801be62:	4598      	cmp	r8, r3
 801be64:	dc01      	bgt.n	801be6a <__ieee754_pow+0x6a>
 801be66:	d10f      	bne.n	801be88 <__ieee754_pow+0x88>
 801be68:	b172      	cbz	r2, 801be88 <__ieee754_pow+0x88>
 801be6a:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 801be6e:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 801be72:	ea55 050a 	orrs.w	r5, r5, sl
 801be76:	d1dc      	bne.n	801be32 <__ieee754_pow+0x32>
 801be78:	e9dd 3200 	ldrd	r3, r2, [sp]
 801be7c:	18db      	adds	r3, r3, r3
 801be7e:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 801be82:	4152      	adcs	r2, r2
 801be84:	429d      	cmp	r5, r3
 801be86:	e7d0      	b.n	801be2a <__ieee754_pow+0x2a>
 801be88:	2d00      	cmp	r5, #0
 801be8a:	da3b      	bge.n	801bf04 <__ieee754_pow+0x104>
 801be8c:	4b72      	ldr	r3, [pc, #456]	; (801c058 <__ieee754_pow+0x258>)
 801be8e:	4598      	cmp	r8, r3
 801be90:	dc51      	bgt.n	801bf36 <__ieee754_pow+0x136>
 801be92:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 801be96:	4598      	cmp	r8, r3
 801be98:	f340 84ac 	ble.w	801c7f4 <__ieee754_pow+0x9f4>
 801be9c:	ea4f 5328 	mov.w	r3, r8, asr #20
 801bea0:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 801bea4:	2b14      	cmp	r3, #20
 801bea6:	dd0f      	ble.n	801bec8 <__ieee754_pow+0xc8>
 801bea8:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 801beac:	fa22 f103 	lsr.w	r1, r2, r3
 801beb0:	fa01 f303 	lsl.w	r3, r1, r3
 801beb4:	4293      	cmp	r3, r2
 801beb6:	f040 849d 	bne.w	801c7f4 <__ieee754_pow+0x9f4>
 801beba:	f001 0101 	and.w	r1, r1, #1
 801bebe:	f1c1 0302 	rsb	r3, r1, #2
 801bec2:	9304      	str	r3, [sp, #16]
 801bec4:	b182      	cbz	r2, 801bee8 <__ieee754_pow+0xe8>
 801bec6:	e05f      	b.n	801bf88 <__ieee754_pow+0x188>
 801bec8:	2a00      	cmp	r2, #0
 801beca:	d15b      	bne.n	801bf84 <__ieee754_pow+0x184>
 801becc:	f1c3 0314 	rsb	r3, r3, #20
 801bed0:	fa48 f103 	asr.w	r1, r8, r3
 801bed4:	fa01 f303 	lsl.w	r3, r1, r3
 801bed8:	4543      	cmp	r3, r8
 801beda:	f040 8488 	bne.w	801c7ee <__ieee754_pow+0x9ee>
 801bede:	f001 0101 	and.w	r1, r1, #1
 801bee2:	f1c1 0302 	rsb	r3, r1, #2
 801bee6:	9304      	str	r3, [sp, #16]
 801bee8:	4b5c      	ldr	r3, [pc, #368]	; (801c05c <__ieee754_pow+0x25c>)
 801beea:	4598      	cmp	r8, r3
 801beec:	d132      	bne.n	801bf54 <__ieee754_pow+0x154>
 801beee:	f1b9 0f00 	cmp.w	r9, #0
 801bef2:	f280 8478 	bge.w	801c7e6 <__ieee754_pow+0x9e6>
 801bef6:	4632      	mov	r2, r6
 801bef8:	463b      	mov	r3, r7
 801befa:	2000      	movs	r0, #0
 801befc:	4957      	ldr	r1, [pc, #348]	; (801c05c <__ieee754_pow+0x25c>)
 801befe:	f7e4 fc97 	bl	8000830 <__aeabi_ddiv>
 801bf02:	e79c      	b.n	801be3e <__ieee754_pow+0x3e>
 801bf04:	2300      	movs	r3, #0
 801bf06:	9304      	str	r3, [sp, #16]
 801bf08:	2a00      	cmp	r2, #0
 801bf0a:	d13d      	bne.n	801bf88 <__ieee754_pow+0x188>
 801bf0c:	4b51      	ldr	r3, [pc, #324]	; (801c054 <__ieee754_pow+0x254>)
 801bf0e:	4598      	cmp	r8, r3
 801bf10:	d1ea      	bne.n	801bee8 <__ieee754_pow+0xe8>
 801bf12:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 801bf16:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 801bf1a:	ea53 030a 	orrs.w	r3, r3, sl
 801bf1e:	f000 845a 	beq.w	801c7d6 <__ieee754_pow+0x9d6>
 801bf22:	4b4f      	ldr	r3, [pc, #316]	; (801c060 <__ieee754_pow+0x260>)
 801bf24:	429c      	cmp	r4, r3
 801bf26:	dd08      	ble.n	801bf3a <__ieee754_pow+0x13a>
 801bf28:	f1b9 0f00 	cmp.w	r9, #0
 801bf2c:	f2c0 8457 	blt.w	801c7de <__ieee754_pow+0x9de>
 801bf30:	e9dd 0100 	ldrd	r0, r1, [sp]
 801bf34:	e783      	b.n	801be3e <__ieee754_pow+0x3e>
 801bf36:	2302      	movs	r3, #2
 801bf38:	e7e5      	b.n	801bf06 <__ieee754_pow+0x106>
 801bf3a:	f1b9 0f00 	cmp.w	r9, #0
 801bf3e:	f04f 0000 	mov.w	r0, #0
 801bf42:	f04f 0100 	mov.w	r1, #0
 801bf46:	f6bf af7a 	bge.w	801be3e <__ieee754_pow+0x3e>
 801bf4a:	e9dd 0300 	ldrd	r0, r3, [sp]
 801bf4e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 801bf52:	e774      	b.n	801be3e <__ieee754_pow+0x3e>
 801bf54:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 801bf58:	d106      	bne.n	801bf68 <__ieee754_pow+0x168>
 801bf5a:	4632      	mov	r2, r6
 801bf5c:	463b      	mov	r3, r7
 801bf5e:	4630      	mov	r0, r6
 801bf60:	4639      	mov	r1, r7
 801bf62:	f7e4 fb3b 	bl	80005dc <__aeabi_dmul>
 801bf66:	e76a      	b.n	801be3e <__ieee754_pow+0x3e>
 801bf68:	4b3e      	ldr	r3, [pc, #248]	; (801c064 <__ieee754_pow+0x264>)
 801bf6a:	4599      	cmp	r9, r3
 801bf6c:	d10c      	bne.n	801bf88 <__ieee754_pow+0x188>
 801bf6e:	2d00      	cmp	r5, #0
 801bf70:	db0a      	blt.n	801bf88 <__ieee754_pow+0x188>
 801bf72:	ec47 6b10 	vmov	d0, r6, r7
 801bf76:	b009      	add	sp, #36	; 0x24
 801bf78:	ecbd 8b06 	vpop	{d8-d10}
 801bf7c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bf80:	f7ff bd4e 	b.w	801ba20 <__ieee754_sqrt>
 801bf84:	2300      	movs	r3, #0
 801bf86:	9304      	str	r3, [sp, #16]
 801bf88:	ec47 6b10 	vmov	d0, r6, r7
 801bf8c:	f000 fc66 	bl	801c85c <fabs>
 801bf90:	ec51 0b10 	vmov	r0, r1, d0
 801bf94:	f1ba 0f00 	cmp.w	sl, #0
 801bf98:	d129      	bne.n	801bfee <__ieee754_pow+0x1ee>
 801bf9a:	b124      	cbz	r4, 801bfa6 <__ieee754_pow+0x1a6>
 801bf9c:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 801bfa0:	4b2e      	ldr	r3, [pc, #184]	; (801c05c <__ieee754_pow+0x25c>)
 801bfa2:	429a      	cmp	r2, r3
 801bfa4:	d123      	bne.n	801bfee <__ieee754_pow+0x1ee>
 801bfa6:	f1b9 0f00 	cmp.w	r9, #0
 801bfaa:	da05      	bge.n	801bfb8 <__ieee754_pow+0x1b8>
 801bfac:	4602      	mov	r2, r0
 801bfae:	460b      	mov	r3, r1
 801bfb0:	2000      	movs	r0, #0
 801bfb2:	492a      	ldr	r1, [pc, #168]	; (801c05c <__ieee754_pow+0x25c>)
 801bfb4:	f7e4 fc3c 	bl	8000830 <__aeabi_ddiv>
 801bfb8:	2d00      	cmp	r5, #0
 801bfba:	f6bf af40 	bge.w	801be3e <__ieee754_pow+0x3e>
 801bfbe:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 801bfc2:	9b04      	ldr	r3, [sp, #16]
 801bfc4:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 801bfc8:	431c      	orrs	r4, r3
 801bfca:	d108      	bne.n	801bfde <__ieee754_pow+0x1de>
 801bfcc:	4602      	mov	r2, r0
 801bfce:	460b      	mov	r3, r1
 801bfd0:	4610      	mov	r0, r2
 801bfd2:	4619      	mov	r1, r3
 801bfd4:	f7e4 f94a 	bl	800026c <__aeabi_dsub>
 801bfd8:	4602      	mov	r2, r0
 801bfda:	460b      	mov	r3, r1
 801bfdc:	e78f      	b.n	801befe <__ieee754_pow+0xfe>
 801bfde:	9b04      	ldr	r3, [sp, #16]
 801bfe0:	2b01      	cmp	r3, #1
 801bfe2:	f47f af2c 	bne.w	801be3e <__ieee754_pow+0x3e>
 801bfe6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801bfea:	4619      	mov	r1, r3
 801bfec:	e727      	b.n	801be3e <__ieee754_pow+0x3e>
 801bfee:	0feb      	lsrs	r3, r5, #31
 801bff0:	3b01      	subs	r3, #1
 801bff2:	9306      	str	r3, [sp, #24]
 801bff4:	9a06      	ldr	r2, [sp, #24]
 801bff6:	9b04      	ldr	r3, [sp, #16]
 801bff8:	4313      	orrs	r3, r2
 801bffa:	d102      	bne.n	801c002 <__ieee754_pow+0x202>
 801bffc:	4632      	mov	r2, r6
 801bffe:	463b      	mov	r3, r7
 801c000:	e7e6      	b.n	801bfd0 <__ieee754_pow+0x1d0>
 801c002:	4b19      	ldr	r3, [pc, #100]	; (801c068 <__ieee754_pow+0x268>)
 801c004:	4598      	cmp	r8, r3
 801c006:	f340 80fb 	ble.w	801c200 <__ieee754_pow+0x400>
 801c00a:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 801c00e:	4598      	cmp	r8, r3
 801c010:	4b13      	ldr	r3, [pc, #76]	; (801c060 <__ieee754_pow+0x260>)
 801c012:	dd0c      	ble.n	801c02e <__ieee754_pow+0x22e>
 801c014:	429c      	cmp	r4, r3
 801c016:	dc0f      	bgt.n	801c038 <__ieee754_pow+0x238>
 801c018:	f1b9 0f00 	cmp.w	r9, #0
 801c01c:	da0f      	bge.n	801c03e <__ieee754_pow+0x23e>
 801c01e:	2000      	movs	r0, #0
 801c020:	b009      	add	sp, #36	; 0x24
 801c022:	ecbd 8b06 	vpop	{d8-d10}
 801c026:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c02a:	f001 b812 	b.w	801d052 <__math_oflow>
 801c02e:	429c      	cmp	r4, r3
 801c030:	dbf2      	blt.n	801c018 <__ieee754_pow+0x218>
 801c032:	4b0a      	ldr	r3, [pc, #40]	; (801c05c <__ieee754_pow+0x25c>)
 801c034:	429c      	cmp	r4, r3
 801c036:	dd19      	ble.n	801c06c <__ieee754_pow+0x26c>
 801c038:	f1b9 0f00 	cmp.w	r9, #0
 801c03c:	dcef      	bgt.n	801c01e <__ieee754_pow+0x21e>
 801c03e:	2000      	movs	r0, #0
 801c040:	b009      	add	sp, #36	; 0x24
 801c042:	ecbd 8b06 	vpop	{d8-d10}
 801c046:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c04a:	f000 bff9 	b.w	801d040 <__math_uflow>
 801c04e:	bf00      	nop
 801c050:	fff00000 	.word	0xfff00000
 801c054:	7ff00000 	.word	0x7ff00000
 801c058:	433fffff 	.word	0x433fffff
 801c05c:	3ff00000 	.word	0x3ff00000
 801c060:	3fefffff 	.word	0x3fefffff
 801c064:	3fe00000 	.word	0x3fe00000
 801c068:	41e00000 	.word	0x41e00000
 801c06c:	2200      	movs	r2, #0
 801c06e:	4b60      	ldr	r3, [pc, #384]	; (801c1f0 <__ieee754_pow+0x3f0>)
 801c070:	f7e4 f8fc 	bl	800026c <__aeabi_dsub>
 801c074:	4604      	mov	r4, r0
 801c076:	460d      	mov	r5, r1
 801c078:	a353      	add	r3, pc, #332	; (adr r3, 801c1c8 <__ieee754_pow+0x3c8>)
 801c07a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c07e:	f7e4 faad 	bl	80005dc <__aeabi_dmul>
 801c082:	4606      	mov	r6, r0
 801c084:	460f      	mov	r7, r1
 801c086:	4620      	mov	r0, r4
 801c088:	4629      	mov	r1, r5
 801c08a:	a351      	add	r3, pc, #324	; (adr r3, 801c1d0 <__ieee754_pow+0x3d0>)
 801c08c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c090:	f7e4 faa4 	bl	80005dc <__aeabi_dmul>
 801c094:	2200      	movs	r2, #0
 801c096:	4682      	mov	sl, r0
 801c098:	468b      	mov	fp, r1
 801c09a:	4b56      	ldr	r3, [pc, #344]	; (801c1f4 <__ieee754_pow+0x3f4>)
 801c09c:	4620      	mov	r0, r4
 801c09e:	4629      	mov	r1, r5
 801c0a0:	f7e4 fa9c 	bl	80005dc <__aeabi_dmul>
 801c0a4:	4602      	mov	r2, r0
 801c0a6:	460b      	mov	r3, r1
 801c0a8:	a14b      	add	r1, pc, #300	; (adr r1, 801c1d8 <__ieee754_pow+0x3d8>)
 801c0aa:	e9d1 0100 	ldrd	r0, r1, [r1]
 801c0ae:	f7e4 f8dd 	bl	800026c <__aeabi_dsub>
 801c0b2:	4622      	mov	r2, r4
 801c0b4:	462b      	mov	r3, r5
 801c0b6:	f7e4 fa91 	bl	80005dc <__aeabi_dmul>
 801c0ba:	4602      	mov	r2, r0
 801c0bc:	460b      	mov	r3, r1
 801c0be:	2000      	movs	r0, #0
 801c0c0:	494d      	ldr	r1, [pc, #308]	; (801c1f8 <__ieee754_pow+0x3f8>)
 801c0c2:	f7e4 f8d3 	bl	800026c <__aeabi_dsub>
 801c0c6:	4680      	mov	r8, r0
 801c0c8:	4689      	mov	r9, r1
 801c0ca:	4622      	mov	r2, r4
 801c0cc:	462b      	mov	r3, r5
 801c0ce:	4620      	mov	r0, r4
 801c0d0:	4629      	mov	r1, r5
 801c0d2:	f7e4 fa83 	bl	80005dc <__aeabi_dmul>
 801c0d6:	4602      	mov	r2, r0
 801c0d8:	460b      	mov	r3, r1
 801c0da:	4640      	mov	r0, r8
 801c0dc:	4649      	mov	r1, r9
 801c0de:	f7e4 fa7d 	bl	80005dc <__aeabi_dmul>
 801c0e2:	a33f      	add	r3, pc, #252	; (adr r3, 801c1e0 <__ieee754_pow+0x3e0>)
 801c0e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c0e8:	f7e4 fa78 	bl	80005dc <__aeabi_dmul>
 801c0ec:	4602      	mov	r2, r0
 801c0ee:	460b      	mov	r3, r1
 801c0f0:	4650      	mov	r0, sl
 801c0f2:	4659      	mov	r1, fp
 801c0f4:	f7e4 f8ba 	bl	800026c <__aeabi_dsub>
 801c0f8:	4602      	mov	r2, r0
 801c0fa:	460b      	mov	r3, r1
 801c0fc:	4680      	mov	r8, r0
 801c0fe:	4689      	mov	r9, r1
 801c100:	4630      	mov	r0, r6
 801c102:	4639      	mov	r1, r7
 801c104:	f7e4 f8b4 	bl	8000270 <__adddf3>
 801c108:	2000      	movs	r0, #0
 801c10a:	4632      	mov	r2, r6
 801c10c:	463b      	mov	r3, r7
 801c10e:	4604      	mov	r4, r0
 801c110:	460d      	mov	r5, r1
 801c112:	f7e4 f8ab 	bl	800026c <__aeabi_dsub>
 801c116:	4602      	mov	r2, r0
 801c118:	460b      	mov	r3, r1
 801c11a:	4640      	mov	r0, r8
 801c11c:	4649      	mov	r1, r9
 801c11e:	f7e4 f8a5 	bl	800026c <__aeabi_dsub>
 801c122:	9b04      	ldr	r3, [sp, #16]
 801c124:	9a06      	ldr	r2, [sp, #24]
 801c126:	4682      	mov	sl, r0
 801c128:	3b01      	subs	r3, #1
 801c12a:	468b      	mov	fp, r1
 801c12c:	4313      	orrs	r3, r2
 801c12e:	f040 81e7 	bne.w	801c500 <__ieee754_pow+0x700>
 801c132:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 801c1e8 <__ieee754_pow+0x3e8>
 801c136:	e9dd 6700 	ldrd	r6, r7, [sp]
 801c13a:	2600      	movs	r6, #0
 801c13c:	eeb0 8a47 	vmov.f32	s16, s14
 801c140:	eef0 8a67 	vmov.f32	s17, s15
 801c144:	463b      	mov	r3, r7
 801c146:	4632      	mov	r2, r6
 801c148:	e9dd 0100 	ldrd	r0, r1, [sp]
 801c14c:	f7e4 f88e 	bl	800026c <__aeabi_dsub>
 801c150:	4622      	mov	r2, r4
 801c152:	462b      	mov	r3, r5
 801c154:	f7e4 fa42 	bl	80005dc <__aeabi_dmul>
 801c158:	4680      	mov	r8, r0
 801c15a:	4689      	mov	r9, r1
 801c15c:	4650      	mov	r0, sl
 801c15e:	4659      	mov	r1, fp
 801c160:	e9dd 2300 	ldrd	r2, r3, [sp]
 801c164:	f7e4 fa3a 	bl	80005dc <__aeabi_dmul>
 801c168:	4602      	mov	r2, r0
 801c16a:	460b      	mov	r3, r1
 801c16c:	4640      	mov	r0, r8
 801c16e:	4649      	mov	r1, r9
 801c170:	f7e4 f87e 	bl	8000270 <__adddf3>
 801c174:	4680      	mov	r8, r0
 801c176:	4689      	mov	r9, r1
 801c178:	4632      	mov	r2, r6
 801c17a:	463b      	mov	r3, r7
 801c17c:	4620      	mov	r0, r4
 801c17e:	4629      	mov	r1, r5
 801c180:	f7e4 fa2c 	bl	80005dc <__aeabi_dmul>
 801c184:	460b      	mov	r3, r1
 801c186:	4604      	mov	r4, r0
 801c188:	460d      	mov	r5, r1
 801c18a:	4602      	mov	r2, r0
 801c18c:	4649      	mov	r1, r9
 801c18e:	4640      	mov	r0, r8
 801c190:	f7e4 f86e 	bl	8000270 <__adddf3>
 801c194:	4b19      	ldr	r3, [pc, #100]	; (801c1fc <__ieee754_pow+0x3fc>)
 801c196:	4606      	mov	r6, r0
 801c198:	460f      	mov	r7, r1
 801c19a:	4299      	cmp	r1, r3
 801c19c:	468b      	mov	fp, r1
 801c19e:	ec45 4b19 	vmov	d9, r4, r5
 801c1a2:	f340 82f1 	ble.w	801c788 <__ieee754_pow+0x988>
 801c1a6:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 801c1aa:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 801c1ae:	4303      	orrs	r3, r0
 801c1b0:	f000 81e4 	beq.w	801c57c <__ieee754_pow+0x77c>
 801c1b4:	2200      	movs	r2, #0
 801c1b6:	2300      	movs	r3, #0
 801c1b8:	ec51 0b18 	vmov	r0, r1, d8
 801c1bc:	f7e4 fc80 	bl	8000ac0 <__aeabi_dcmplt>
 801c1c0:	3800      	subs	r0, #0
 801c1c2:	bf18      	it	ne
 801c1c4:	2001      	movne	r0, #1
 801c1c6:	e72b      	b.n	801c020 <__ieee754_pow+0x220>
 801c1c8:	60000000 	.word	0x60000000
 801c1cc:	3ff71547 	.word	0x3ff71547
 801c1d0:	f85ddf44 	.word	0xf85ddf44
 801c1d4:	3e54ae0b 	.word	0x3e54ae0b
 801c1d8:	55555555 	.word	0x55555555
 801c1dc:	3fd55555 	.word	0x3fd55555
 801c1e0:	652b82fe 	.word	0x652b82fe
 801c1e4:	3ff71547 	.word	0x3ff71547
 801c1e8:	00000000 	.word	0x00000000
 801c1ec:	bff00000 	.word	0xbff00000
 801c1f0:	3ff00000 	.word	0x3ff00000
 801c1f4:	3fd00000 	.word	0x3fd00000
 801c1f8:	3fe00000 	.word	0x3fe00000
 801c1fc:	408fffff 	.word	0x408fffff
 801c200:	4bd5      	ldr	r3, [pc, #852]	; (801c558 <__ieee754_pow+0x758>)
 801c202:	2200      	movs	r2, #0
 801c204:	402b      	ands	r3, r5
 801c206:	b92b      	cbnz	r3, 801c214 <__ieee754_pow+0x414>
 801c208:	4bd4      	ldr	r3, [pc, #848]	; (801c55c <__ieee754_pow+0x75c>)
 801c20a:	f7e4 f9e7 	bl	80005dc <__aeabi_dmul>
 801c20e:	f06f 0234 	mvn.w	r2, #52	; 0x34
 801c212:	460c      	mov	r4, r1
 801c214:	1523      	asrs	r3, r4, #20
 801c216:	f3c4 0413 	ubfx	r4, r4, #0, #20
 801c21a:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 801c21e:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 801c222:	4413      	add	r3, r2
 801c224:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 801c228:	9305      	str	r3, [sp, #20]
 801c22a:	4bcd      	ldr	r3, [pc, #820]	; (801c560 <__ieee754_pow+0x760>)
 801c22c:	429c      	cmp	r4, r3
 801c22e:	dd08      	ble.n	801c242 <__ieee754_pow+0x442>
 801c230:	4bcc      	ldr	r3, [pc, #816]	; (801c564 <__ieee754_pow+0x764>)
 801c232:	429c      	cmp	r4, r3
 801c234:	f340 8162 	ble.w	801c4fc <__ieee754_pow+0x6fc>
 801c238:	9b05      	ldr	r3, [sp, #20]
 801c23a:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 801c23e:	3301      	adds	r3, #1
 801c240:	9305      	str	r3, [sp, #20]
 801c242:	2400      	movs	r4, #0
 801c244:	00e3      	lsls	r3, r4, #3
 801c246:	4682      	mov	sl, r0
 801c248:	4629      	mov	r1, r5
 801c24a:	46ab      	mov	fp, r5
 801c24c:	9307      	str	r3, [sp, #28]
 801c24e:	4bc6      	ldr	r3, [pc, #792]	; (801c568 <__ieee754_pow+0x768>)
 801c250:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801c254:	ed93 7b00 	vldr	d7, [r3]
 801c258:	eeb0 9a47 	vmov.f32	s18, s14
 801c25c:	eef0 9a67 	vmov.f32	s19, s15
 801c260:	ec53 2b17 	vmov	r2, r3, d7
 801c264:	f7e4 f802 	bl	800026c <__aeabi_dsub>
 801c268:	4652      	mov	r2, sl
 801c26a:	4606      	mov	r6, r0
 801c26c:	460f      	mov	r7, r1
 801c26e:	462b      	mov	r3, r5
 801c270:	106d      	asrs	r5, r5, #1
 801c272:	ec51 0b19 	vmov	r0, r1, d9
 801c276:	f7e3 fffb 	bl	8000270 <__adddf3>
 801c27a:	4602      	mov	r2, r0
 801c27c:	460b      	mov	r3, r1
 801c27e:	2000      	movs	r0, #0
 801c280:	49ba      	ldr	r1, [pc, #744]	; (801c56c <__ieee754_pow+0x76c>)
 801c282:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 801c286:	f7e4 fad3 	bl	8000830 <__aeabi_ddiv>
 801c28a:	4602      	mov	r2, r0
 801c28c:	460b      	mov	r3, r1
 801c28e:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 801c292:	ec41 0b1a 	vmov	d10, r0, r1
 801c296:	4630      	mov	r0, r6
 801c298:	4639      	mov	r1, r7
 801c29a:	f7e4 f99f 	bl	80005dc <__aeabi_dmul>
 801c29e:	2300      	movs	r3, #0
 801c2a0:	2200      	movs	r2, #0
 801c2a2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801c2a6:	9302      	str	r3, [sp, #8]
 801c2a8:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 801c2ac:	4614      	mov	r4, r2
 801c2ae:	461d      	mov	r5, r3
 801c2b0:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 801c2b4:	ec41 0b18 	vmov	d8, r0, r1
 801c2b8:	4640      	mov	r0, r8
 801c2ba:	4649      	mov	r1, r9
 801c2bc:	f7e4 f98e 	bl	80005dc <__aeabi_dmul>
 801c2c0:	4602      	mov	r2, r0
 801c2c2:	460b      	mov	r3, r1
 801c2c4:	4630      	mov	r0, r6
 801c2c6:	4639      	mov	r1, r7
 801c2c8:	f7e3 ffd0 	bl	800026c <__aeabi_dsub>
 801c2cc:	4606      	mov	r6, r0
 801c2ce:	460f      	mov	r7, r1
 801c2d0:	4620      	mov	r0, r4
 801c2d2:	4629      	mov	r1, r5
 801c2d4:	ec53 2b19 	vmov	r2, r3, d9
 801c2d8:	f7e3 ffc8 	bl	800026c <__aeabi_dsub>
 801c2dc:	4602      	mov	r2, r0
 801c2de:	460b      	mov	r3, r1
 801c2e0:	4650      	mov	r0, sl
 801c2e2:	4659      	mov	r1, fp
 801c2e4:	f7e3 ffc2 	bl	800026c <__aeabi_dsub>
 801c2e8:	4642      	mov	r2, r8
 801c2ea:	464b      	mov	r3, r9
 801c2ec:	f7e4 f976 	bl	80005dc <__aeabi_dmul>
 801c2f0:	4602      	mov	r2, r0
 801c2f2:	460b      	mov	r3, r1
 801c2f4:	4630      	mov	r0, r6
 801c2f6:	4639      	mov	r1, r7
 801c2f8:	f7e3 ffb8 	bl	800026c <__aeabi_dsub>
 801c2fc:	ec53 2b1a 	vmov	r2, r3, d10
 801c300:	f7e4 f96c 	bl	80005dc <__aeabi_dmul>
 801c304:	ec53 2b18 	vmov	r2, r3, d8
 801c308:	ec41 0b19 	vmov	d9, r0, r1
 801c30c:	ec51 0b18 	vmov	r0, r1, d8
 801c310:	f7e4 f964 	bl	80005dc <__aeabi_dmul>
 801c314:	4604      	mov	r4, r0
 801c316:	460d      	mov	r5, r1
 801c318:	a37b      	add	r3, pc, #492	; (adr r3, 801c508 <__ieee754_pow+0x708>)
 801c31a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c31e:	f7e4 f95d 	bl	80005dc <__aeabi_dmul>
 801c322:	a37b      	add	r3, pc, #492	; (adr r3, 801c510 <__ieee754_pow+0x710>)
 801c324:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c328:	f7e3 ffa2 	bl	8000270 <__adddf3>
 801c32c:	4622      	mov	r2, r4
 801c32e:	462b      	mov	r3, r5
 801c330:	f7e4 f954 	bl	80005dc <__aeabi_dmul>
 801c334:	a378      	add	r3, pc, #480	; (adr r3, 801c518 <__ieee754_pow+0x718>)
 801c336:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c33a:	f7e3 ff99 	bl	8000270 <__adddf3>
 801c33e:	4622      	mov	r2, r4
 801c340:	462b      	mov	r3, r5
 801c342:	f7e4 f94b 	bl	80005dc <__aeabi_dmul>
 801c346:	a376      	add	r3, pc, #472	; (adr r3, 801c520 <__ieee754_pow+0x720>)
 801c348:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c34c:	f7e3 ff90 	bl	8000270 <__adddf3>
 801c350:	4622      	mov	r2, r4
 801c352:	462b      	mov	r3, r5
 801c354:	f7e4 f942 	bl	80005dc <__aeabi_dmul>
 801c358:	a373      	add	r3, pc, #460	; (adr r3, 801c528 <__ieee754_pow+0x728>)
 801c35a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c35e:	f7e3 ff87 	bl	8000270 <__adddf3>
 801c362:	4622      	mov	r2, r4
 801c364:	462b      	mov	r3, r5
 801c366:	f7e4 f939 	bl	80005dc <__aeabi_dmul>
 801c36a:	a371      	add	r3, pc, #452	; (adr r3, 801c530 <__ieee754_pow+0x730>)
 801c36c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c370:	f7e3 ff7e 	bl	8000270 <__adddf3>
 801c374:	4606      	mov	r6, r0
 801c376:	460f      	mov	r7, r1
 801c378:	4622      	mov	r2, r4
 801c37a:	462b      	mov	r3, r5
 801c37c:	4620      	mov	r0, r4
 801c37e:	4629      	mov	r1, r5
 801c380:	f7e4 f92c 	bl	80005dc <__aeabi_dmul>
 801c384:	4602      	mov	r2, r0
 801c386:	460b      	mov	r3, r1
 801c388:	4630      	mov	r0, r6
 801c38a:	4639      	mov	r1, r7
 801c38c:	f7e4 f926 	bl	80005dc <__aeabi_dmul>
 801c390:	4642      	mov	r2, r8
 801c392:	4604      	mov	r4, r0
 801c394:	460d      	mov	r5, r1
 801c396:	464b      	mov	r3, r9
 801c398:	ec51 0b18 	vmov	r0, r1, d8
 801c39c:	f7e3 ff68 	bl	8000270 <__adddf3>
 801c3a0:	ec53 2b19 	vmov	r2, r3, d9
 801c3a4:	f7e4 f91a 	bl	80005dc <__aeabi_dmul>
 801c3a8:	4622      	mov	r2, r4
 801c3aa:	462b      	mov	r3, r5
 801c3ac:	f7e3 ff60 	bl	8000270 <__adddf3>
 801c3b0:	4642      	mov	r2, r8
 801c3b2:	4682      	mov	sl, r0
 801c3b4:	468b      	mov	fp, r1
 801c3b6:	464b      	mov	r3, r9
 801c3b8:	4640      	mov	r0, r8
 801c3ba:	4649      	mov	r1, r9
 801c3bc:	f7e4 f90e 	bl	80005dc <__aeabi_dmul>
 801c3c0:	2200      	movs	r2, #0
 801c3c2:	4b6b      	ldr	r3, [pc, #428]	; (801c570 <__ieee754_pow+0x770>)
 801c3c4:	4606      	mov	r6, r0
 801c3c6:	460f      	mov	r7, r1
 801c3c8:	f7e3 ff52 	bl	8000270 <__adddf3>
 801c3cc:	4652      	mov	r2, sl
 801c3ce:	465b      	mov	r3, fp
 801c3d0:	f7e3 ff4e 	bl	8000270 <__adddf3>
 801c3d4:	2000      	movs	r0, #0
 801c3d6:	460d      	mov	r5, r1
 801c3d8:	460b      	mov	r3, r1
 801c3da:	4604      	mov	r4, r0
 801c3dc:	4602      	mov	r2, r0
 801c3de:	4649      	mov	r1, r9
 801c3e0:	4640      	mov	r0, r8
 801c3e2:	f7e4 f8fb 	bl	80005dc <__aeabi_dmul>
 801c3e6:	2200      	movs	r2, #0
 801c3e8:	4680      	mov	r8, r0
 801c3ea:	4689      	mov	r9, r1
 801c3ec:	4b60      	ldr	r3, [pc, #384]	; (801c570 <__ieee754_pow+0x770>)
 801c3ee:	4620      	mov	r0, r4
 801c3f0:	4629      	mov	r1, r5
 801c3f2:	f7e3 ff3b 	bl	800026c <__aeabi_dsub>
 801c3f6:	4632      	mov	r2, r6
 801c3f8:	463b      	mov	r3, r7
 801c3fa:	f7e3 ff37 	bl	800026c <__aeabi_dsub>
 801c3fe:	4602      	mov	r2, r0
 801c400:	460b      	mov	r3, r1
 801c402:	4650      	mov	r0, sl
 801c404:	4659      	mov	r1, fp
 801c406:	f7e3 ff31 	bl	800026c <__aeabi_dsub>
 801c40a:	ec53 2b18 	vmov	r2, r3, d8
 801c40e:	f7e4 f8e5 	bl	80005dc <__aeabi_dmul>
 801c412:	4606      	mov	r6, r0
 801c414:	460f      	mov	r7, r1
 801c416:	4622      	mov	r2, r4
 801c418:	462b      	mov	r3, r5
 801c41a:	ec51 0b19 	vmov	r0, r1, d9
 801c41e:	f7e4 f8dd 	bl	80005dc <__aeabi_dmul>
 801c422:	4602      	mov	r2, r0
 801c424:	460b      	mov	r3, r1
 801c426:	4630      	mov	r0, r6
 801c428:	4639      	mov	r1, r7
 801c42a:	f7e3 ff21 	bl	8000270 <__adddf3>
 801c42e:	4606      	mov	r6, r0
 801c430:	460f      	mov	r7, r1
 801c432:	4602      	mov	r2, r0
 801c434:	460b      	mov	r3, r1
 801c436:	4640      	mov	r0, r8
 801c438:	4649      	mov	r1, r9
 801c43a:	f7e3 ff19 	bl	8000270 <__adddf3>
 801c43e:	2000      	movs	r0, #0
 801c440:	460d      	mov	r5, r1
 801c442:	4604      	mov	r4, r0
 801c444:	a33c      	add	r3, pc, #240	; (adr r3, 801c538 <__ieee754_pow+0x738>)
 801c446:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c44a:	f7e4 f8c7 	bl	80005dc <__aeabi_dmul>
 801c44e:	4642      	mov	r2, r8
 801c450:	464b      	mov	r3, r9
 801c452:	ec41 0b18 	vmov	d8, r0, r1
 801c456:	4620      	mov	r0, r4
 801c458:	4629      	mov	r1, r5
 801c45a:	f7e3 ff07 	bl	800026c <__aeabi_dsub>
 801c45e:	4602      	mov	r2, r0
 801c460:	460b      	mov	r3, r1
 801c462:	4630      	mov	r0, r6
 801c464:	4639      	mov	r1, r7
 801c466:	f7e3 ff01 	bl	800026c <__aeabi_dsub>
 801c46a:	a335      	add	r3, pc, #212	; (adr r3, 801c540 <__ieee754_pow+0x740>)
 801c46c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c470:	f7e4 f8b4 	bl	80005dc <__aeabi_dmul>
 801c474:	4606      	mov	r6, r0
 801c476:	460f      	mov	r7, r1
 801c478:	4620      	mov	r0, r4
 801c47a:	4629      	mov	r1, r5
 801c47c:	a332      	add	r3, pc, #200	; (adr r3, 801c548 <__ieee754_pow+0x748>)
 801c47e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c482:	f7e4 f8ab 	bl	80005dc <__aeabi_dmul>
 801c486:	4602      	mov	r2, r0
 801c488:	460b      	mov	r3, r1
 801c48a:	4630      	mov	r0, r6
 801c48c:	4639      	mov	r1, r7
 801c48e:	f7e3 feef 	bl	8000270 <__adddf3>
 801c492:	9a07      	ldr	r2, [sp, #28]
 801c494:	4b37      	ldr	r3, [pc, #220]	; (801c574 <__ieee754_pow+0x774>)
 801c496:	4413      	add	r3, r2
 801c498:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c49c:	f7e3 fee8 	bl	8000270 <__adddf3>
 801c4a0:	4682      	mov	sl, r0
 801c4a2:	9805      	ldr	r0, [sp, #20]
 801c4a4:	468b      	mov	fp, r1
 801c4a6:	f7e4 f82f 	bl	8000508 <__aeabi_i2d>
 801c4aa:	9a07      	ldr	r2, [sp, #28]
 801c4ac:	4b32      	ldr	r3, [pc, #200]	; (801c578 <__ieee754_pow+0x778>)
 801c4ae:	4606      	mov	r6, r0
 801c4b0:	460f      	mov	r7, r1
 801c4b2:	4413      	add	r3, r2
 801c4b4:	4652      	mov	r2, sl
 801c4b6:	e9d3 8900 	ldrd	r8, r9, [r3]
 801c4ba:	ec51 0b18 	vmov	r0, r1, d8
 801c4be:	465b      	mov	r3, fp
 801c4c0:	f7e3 fed6 	bl	8000270 <__adddf3>
 801c4c4:	4642      	mov	r2, r8
 801c4c6:	464b      	mov	r3, r9
 801c4c8:	f7e3 fed2 	bl	8000270 <__adddf3>
 801c4cc:	4632      	mov	r2, r6
 801c4ce:	463b      	mov	r3, r7
 801c4d0:	f7e3 fece 	bl	8000270 <__adddf3>
 801c4d4:	2000      	movs	r0, #0
 801c4d6:	4632      	mov	r2, r6
 801c4d8:	463b      	mov	r3, r7
 801c4da:	4604      	mov	r4, r0
 801c4dc:	460d      	mov	r5, r1
 801c4de:	f7e3 fec5 	bl	800026c <__aeabi_dsub>
 801c4e2:	4642      	mov	r2, r8
 801c4e4:	464b      	mov	r3, r9
 801c4e6:	f7e3 fec1 	bl	800026c <__aeabi_dsub>
 801c4ea:	ec53 2b18 	vmov	r2, r3, d8
 801c4ee:	f7e3 febd 	bl	800026c <__aeabi_dsub>
 801c4f2:	4602      	mov	r2, r0
 801c4f4:	460b      	mov	r3, r1
 801c4f6:	4650      	mov	r0, sl
 801c4f8:	4659      	mov	r1, fp
 801c4fa:	e610      	b.n	801c11e <__ieee754_pow+0x31e>
 801c4fc:	2401      	movs	r4, #1
 801c4fe:	e6a1      	b.n	801c244 <__ieee754_pow+0x444>
 801c500:	ed9f 7b13 	vldr	d7, [pc, #76]	; 801c550 <__ieee754_pow+0x750>
 801c504:	e617      	b.n	801c136 <__ieee754_pow+0x336>
 801c506:	bf00      	nop
 801c508:	4a454eef 	.word	0x4a454eef
 801c50c:	3fca7e28 	.word	0x3fca7e28
 801c510:	93c9db65 	.word	0x93c9db65
 801c514:	3fcd864a 	.word	0x3fcd864a
 801c518:	a91d4101 	.word	0xa91d4101
 801c51c:	3fd17460 	.word	0x3fd17460
 801c520:	518f264d 	.word	0x518f264d
 801c524:	3fd55555 	.word	0x3fd55555
 801c528:	db6fabff 	.word	0xdb6fabff
 801c52c:	3fdb6db6 	.word	0x3fdb6db6
 801c530:	33333303 	.word	0x33333303
 801c534:	3fe33333 	.word	0x3fe33333
 801c538:	e0000000 	.word	0xe0000000
 801c53c:	3feec709 	.word	0x3feec709
 801c540:	dc3a03fd 	.word	0xdc3a03fd
 801c544:	3feec709 	.word	0x3feec709
 801c548:	145b01f5 	.word	0x145b01f5
 801c54c:	be3e2fe0 	.word	0xbe3e2fe0
 801c550:	00000000 	.word	0x00000000
 801c554:	3ff00000 	.word	0x3ff00000
 801c558:	7ff00000 	.word	0x7ff00000
 801c55c:	43400000 	.word	0x43400000
 801c560:	0003988e 	.word	0x0003988e
 801c564:	000bb679 	.word	0x000bb679
 801c568:	0801f2d8 	.word	0x0801f2d8
 801c56c:	3ff00000 	.word	0x3ff00000
 801c570:	40080000 	.word	0x40080000
 801c574:	0801f2f8 	.word	0x0801f2f8
 801c578:	0801f2e8 	.word	0x0801f2e8
 801c57c:	a3b5      	add	r3, pc, #724	; (adr r3, 801c854 <__ieee754_pow+0xa54>)
 801c57e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c582:	4640      	mov	r0, r8
 801c584:	4649      	mov	r1, r9
 801c586:	f7e3 fe73 	bl	8000270 <__adddf3>
 801c58a:	4622      	mov	r2, r4
 801c58c:	462b      	mov	r3, r5
 801c58e:	ec41 0b1a 	vmov	d10, r0, r1
 801c592:	4630      	mov	r0, r6
 801c594:	4639      	mov	r1, r7
 801c596:	f7e3 fe69 	bl	800026c <__aeabi_dsub>
 801c59a:	4602      	mov	r2, r0
 801c59c:	460b      	mov	r3, r1
 801c59e:	ec51 0b1a 	vmov	r0, r1, d10
 801c5a2:	f7e4 faab 	bl	8000afc <__aeabi_dcmpgt>
 801c5a6:	2800      	cmp	r0, #0
 801c5a8:	f47f ae04 	bne.w	801c1b4 <__ieee754_pow+0x3b4>
 801c5ac:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801c5b0:	4aa3      	ldr	r2, [pc, #652]	; (801c840 <__ieee754_pow+0xa40>)
 801c5b2:	4293      	cmp	r3, r2
 801c5b4:	f340 8108 	ble.w	801c7c8 <__ieee754_pow+0x9c8>
 801c5b8:	151b      	asrs	r3, r3, #20
 801c5ba:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 801c5be:	48a1      	ldr	r0, [pc, #644]	; (801c844 <__ieee754_pow+0xa44>)
 801c5c0:	f1bb 0f00 	cmp.w	fp, #0
 801c5c4:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 801c5c8:	f04f 0200 	mov.w	r2, #0
 801c5cc:	fa4a fa03 	asr.w	sl, sl, r3
 801c5d0:	44da      	add	sl, fp
 801c5d2:	f3ca 510a 	ubfx	r1, sl, #20, #11
 801c5d6:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 801c5da:	fa40 f001 	asr.w	r0, r0, r1
 801c5de:	f1c1 0114 	rsb	r1, r1, #20
 801c5e2:	ea00 030a 	and.w	r3, r0, sl
 801c5e6:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 801c5ea:	4620      	mov	r0, r4
 801c5ec:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 801c5f0:	fa4a fa01 	asr.w	sl, sl, r1
 801c5f4:	4629      	mov	r1, r5
 801c5f6:	bfb8      	it	lt
 801c5f8:	f1ca 0a00 	rsblt	sl, sl, #0
 801c5fc:	f7e3 fe36 	bl	800026c <__aeabi_dsub>
 801c600:	ec41 0b19 	vmov	d9, r0, r1
 801c604:	4642      	mov	r2, r8
 801c606:	464b      	mov	r3, r9
 801c608:	ec51 0b19 	vmov	r0, r1, d9
 801c60c:	f7e3 fe30 	bl	8000270 <__adddf3>
 801c610:	2000      	movs	r0, #0
 801c612:	460d      	mov	r5, r1
 801c614:	4604      	mov	r4, r0
 801c616:	a37a      	add	r3, pc, #488	; (adr r3, 801c800 <__ieee754_pow+0xa00>)
 801c618:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c61c:	f7e3 ffde 	bl	80005dc <__aeabi_dmul>
 801c620:	4606      	mov	r6, r0
 801c622:	460f      	mov	r7, r1
 801c624:	4620      	mov	r0, r4
 801c626:	4629      	mov	r1, r5
 801c628:	ec53 2b19 	vmov	r2, r3, d9
 801c62c:	f7e3 fe1e 	bl	800026c <__aeabi_dsub>
 801c630:	4602      	mov	r2, r0
 801c632:	460b      	mov	r3, r1
 801c634:	4640      	mov	r0, r8
 801c636:	4649      	mov	r1, r9
 801c638:	f7e3 fe18 	bl	800026c <__aeabi_dsub>
 801c63c:	a372      	add	r3, pc, #456	; (adr r3, 801c808 <__ieee754_pow+0xa08>)
 801c63e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c642:	f7e3 ffcb 	bl	80005dc <__aeabi_dmul>
 801c646:	4680      	mov	r8, r0
 801c648:	4689      	mov	r9, r1
 801c64a:	4620      	mov	r0, r4
 801c64c:	4629      	mov	r1, r5
 801c64e:	a370      	add	r3, pc, #448	; (adr r3, 801c810 <__ieee754_pow+0xa10>)
 801c650:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c654:	f7e3 ffc2 	bl	80005dc <__aeabi_dmul>
 801c658:	4602      	mov	r2, r0
 801c65a:	460b      	mov	r3, r1
 801c65c:	4640      	mov	r0, r8
 801c65e:	4649      	mov	r1, r9
 801c660:	f7e3 fe06 	bl	8000270 <__adddf3>
 801c664:	4604      	mov	r4, r0
 801c666:	460d      	mov	r5, r1
 801c668:	4602      	mov	r2, r0
 801c66a:	460b      	mov	r3, r1
 801c66c:	4630      	mov	r0, r6
 801c66e:	4639      	mov	r1, r7
 801c670:	f7e3 fdfe 	bl	8000270 <__adddf3>
 801c674:	4632      	mov	r2, r6
 801c676:	4680      	mov	r8, r0
 801c678:	4689      	mov	r9, r1
 801c67a:	463b      	mov	r3, r7
 801c67c:	f7e3 fdf6 	bl	800026c <__aeabi_dsub>
 801c680:	4602      	mov	r2, r0
 801c682:	460b      	mov	r3, r1
 801c684:	4620      	mov	r0, r4
 801c686:	4629      	mov	r1, r5
 801c688:	f7e3 fdf0 	bl	800026c <__aeabi_dsub>
 801c68c:	4642      	mov	r2, r8
 801c68e:	4606      	mov	r6, r0
 801c690:	460f      	mov	r7, r1
 801c692:	464b      	mov	r3, r9
 801c694:	4640      	mov	r0, r8
 801c696:	4649      	mov	r1, r9
 801c698:	f7e3 ffa0 	bl	80005dc <__aeabi_dmul>
 801c69c:	4604      	mov	r4, r0
 801c69e:	460d      	mov	r5, r1
 801c6a0:	a35d      	add	r3, pc, #372	; (adr r3, 801c818 <__ieee754_pow+0xa18>)
 801c6a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c6a6:	f7e3 ff99 	bl	80005dc <__aeabi_dmul>
 801c6aa:	a35d      	add	r3, pc, #372	; (adr r3, 801c820 <__ieee754_pow+0xa20>)
 801c6ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c6b0:	f7e3 fddc 	bl	800026c <__aeabi_dsub>
 801c6b4:	4622      	mov	r2, r4
 801c6b6:	462b      	mov	r3, r5
 801c6b8:	f7e3 ff90 	bl	80005dc <__aeabi_dmul>
 801c6bc:	a35a      	add	r3, pc, #360	; (adr r3, 801c828 <__ieee754_pow+0xa28>)
 801c6be:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c6c2:	f7e3 fdd5 	bl	8000270 <__adddf3>
 801c6c6:	4622      	mov	r2, r4
 801c6c8:	462b      	mov	r3, r5
 801c6ca:	f7e3 ff87 	bl	80005dc <__aeabi_dmul>
 801c6ce:	a358      	add	r3, pc, #352	; (adr r3, 801c830 <__ieee754_pow+0xa30>)
 801c6d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c6d4:	f7e3 fdca 	bl	800026c <__aeabi_dsub>
 801c6d8:	4622      	mov	r2, r4
 801c6da:	462b      	mov	r3, r5
 801c6dc:	f7e3 ff7e 	bl	80005dc <__aeabi_dmul>
 801c6e0:	a355      	add	r3, pc, #340	; (adr r3, 801c838 <__ieee754_pow+0xa38>)
 801c6e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c6e6:	f7e3 fdc3 	bl	8000270 <__adddf3>
 801c6ea:	4622      	mov	r2, r4
 801c6ec:	462b      	mov	r3, r5
 801c6ee:	f7e3 ff75 	bl	80005dc <__aeabi_dmul>
 801c6f2:	4602      	mov	r2, r0
 801c6f4:	460b      	mov	r3, r1
 801c6f6:	4640      	mov	r0, r8
 801c6f8:	4649      	mov	r1, r9
 801c6fa:	f7e3 fdb7 	bl	800026c <__aeabi_dsub>
 801c6fe:	4604      	mov	r4, r0
 801c700:	460d      	mov	r5, r1
 801c702:	4602      	mov	r2, r0
 801c704:	460b      	mov	r3, r1
 801c706:	4640      	mov	r0, r8
 801c708:	4649      	mov	r1, r9
 801c70a:	f7e3 ff67 	bl	80005dc <__aeabi_dmul>
 801c70e:	2200      	movs	r2, #0
 801c710:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801c714:	ec41 0b19 	vmov	d9, r0, r1
 801c718:	4620      	mov	r0, r4
 801c71a:	4629      	mov	r1, r5
 801c71c:	f7e3 fda6 	bl	800026c <__aeabi_dsub>
 801c720:	4602      	mov	r2, r0
 801c722:	460b      	mov	r3, r1
 801c724:	ec51 0b19 	vmov	r0, r1, d9
 801c728:	f7e4 f882 	bl	8000830 <__aeabi_ddiv>
 801c72c:	4632      	mov	r2, r6
 801c72e:	4604      	mov	r4, r0
 801c730:	460d      	mov	r5, r1
 801c732:	463b      	mov	r3, r7
 801c734:	4640      	mov	r0, r8
 801c736:	4649      	mov	r1, r9
 801c738:	f7e3 ff50 	bl	80005dc <__aeabi_dmul>
 801c73c:	4632      	mov	r2, r6
 801c73e:	463b      	mov	r3, r7
 801c740:	f7e3 fd96 	bl	8000270 <__adddf3>
 801c744:	4602      	mov	r2, r0
 801c746:	460b      	mov	r3, r1
 801c748:	4620      	mov	r0, r4
 801c74a:	4629      	mov	r1, r5
 801c74c:	f7e3 fd8e 	bl	800026c <__aeabi_dsub>
 801c750:	4642      	mov	r2, r8
 801c752:	464b      	mov	r3, r9
 801c754:	f7e3 fd8a 	bl	800026c <__aeabi_dsub>
 801c758:	460b      	mov	r3, r1
 801c75a:	4602      	mov	r2, r0
 801c75c:	493a      	ldr	r1, [pc, #232]	; (801c848 <__ieee754_pow+0xa48>)
 801c75e:	2000      	movs	r0, #0
 801c760:	f7e3 fd84 	bl	800026c <__aeabi_dsub>
 801c764:	ec41 0b10 	vmov	d0, r0, r1
 801c768:	ee10 3a90 	vmov	r3, s1
 801c76c:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 801c770:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801c774:	da2b      	bge.n	801c7ce <__ieee754_pow+0x9ce>
 801c776:	4650      	mov	r0, sl
 801c778:	f000 fbc6 	bl	801cf08 <scalbn>
 801c77c:	ec51 0b10 	vmov	r0, r1, d0
 801c780:	ec53 2b18 	vmov	r2, r3, d8
 801c784:	f7ff bbed 	b.w	801bf62 <__ieee754_pow+0x162>
 801c788:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 801c78c:	4b2f      	ldr	r3, [pc, #188]	; (801c84c <__ieee754_pow+0xa4c>)
 801c78e:	429e      	cmp	r6, r3
 801c790:	f77f af0c 	ble.w	801c5ac <__ieee754_pow+0x7ac>
 801c794:	4b2e      	ldr	r3, [pc, #184]	; (801c850 <__ieee754_pow+0xa50>)
 801c796:	440b      	add	r3, r1
 801c798:	4303      	orrs	r3, r0
 801c79a:	d009      	beq.n	801c7b0 <__ieee754_pow+0x9b0>
 801c79c:	2200      	movs	r2, #0
 801c79e:	2300      	movs	r3, #0
 801c7a0:	ec51 0b18 	vmov	r0, r1, d8
 801c7a4:	f7e4 f98c 	bl	8000ac0 <__aeabi_dcmplt>
 801c7a8:	3800      	subs	r0, #0
 801c7aa:	bf18      	it	ne
 801c7ac:	2001      	movne	r0, #1
 801c7ae:	e447      	b.n	801c040 <__ieee754_pow+0x240>
 801c7b0:	4622      	mov	r2, r4
 801c7b2:	462b      	mov	r3, r5
 801c7b4:	f7e3 fd5a 	bl	800026c <__aeabi_dsub>
 801c7b8:	4642      	mov	r2, r8
 801c7ba:	464b      	mov	r3, r9
 801c7bc:	f7e4 f994 	bl	8000ae8 <__aeabi_dcmpge>
 801c7c0:	2800      	cmp	r0, #0
 801c7c2:	f43f aef3 	beq.w	801c5ac <__ieee754_pow+0x7ac>
 801c7c6:	e7e9      	b.n	801c79c <__ieee754_pow+0x99c>
 801c7c8:	f04f 0a00 	mov.w	sl, #0
 801c7cc:	e71a      	b.n	801c604 <__ieee754_pow+0x804>
 801c7ce:	ec51 0b10 	vmov	r0, r1, d0
 801c7d2:	4619      	mov	r1, r3
 801c7d4:	e7d4      	b.n	801c780 <__ieee754_pow+0x980>
 801c7d6:	2000      	movs	r0, #0
 801c7d8:	491b      	ldr	r1, [pc, #108]	; (801c848 <__ieee754_pow+0xa48>)
 801c7da:	f7ff bb30 	b.w	801be3e <__ieee754_pow+0x3e>
 801c7de:	2000      	movs	r0, #0
 801c7e0:	2100      	movs	r1, #0
 801c7e2:	f7ff bb2c 	b.w	801be3e <__ieee754_pow+0x3e>
 801c7e6:	4630      	mov	r0, r6
 801c7e8:	4639      	mov	r1, r7
 801c7ea:	f7ff bb28 	b.w	801be3e <__ieee754_pow+0x3e>
 801c7ee:	9204      	str	r2, [sp, #16]
 801c7f0:	f7ff bb7a 	b.w	801bee8 <__ieee754_pow+0xe8>
 801c7f4:	2300      	movs	r3, #0
 801c7f6:	f7ff bb64 	b.w	801bec2 <__ieee754_pow+0xc2>
 801c7fa:	bf00      	nop
 801c7fc:	f3af 8000 	nop.w
 801c800:	00000000 	.word	0x00000000
 801c804:	3fe62e43 	.word	0x3fe62e43
 801c808:	fefa39ef 	.word	0xfefa39ef
 801c80c:	3fe62e42 	.word	0x3fe62e42
 801c810:	0ca86c39 	.word	0x0ca86c39
 801c814:	be205c61 	.word	0xbe205c61
 801c818:	72bea4d0 	.word	0x72bea4d0
 801c81c:	3e663769 	.word	0x3e663769
 801c820:	c5d26bf1 	.word	0xc5d26bf1
 801c824:	3ebbbd41 	.word	0x3ebbbd41
 801c828:	af25de2c 	.word	0xaf25de2c
 801c82c:	3f11566a 	.word	0x3f11566a
 801c830:	16bebd93 	.word	0x16bebd93
 801c834:	3f66c16c 	.word	0x3f66c16c
 801c838:	5555553e 	.word	0x5555553e
 801c83c:	3fc55555 	.word	0x3fc55555
 801c840:	3fe00000 	.word	0x3fe00000
 801c844:	fff00000 	.word	0xfff00000
 801c848:	3ff00000 	.word	0x3ff00000
 801c84c:	4090cbff 	.word	0x4090cbff
 801c850:	3f6f3400 	.word	0x3f6f3400
 801c854:	652b82fe 	.word	0x652b82fe
 801c858:	3c971547 	.word	0x3c971547

0801c85c <fabs>:
 801c85c:	ec51 0b10 	vmov	r0, r1, d0
 801c860:	ee10 2a10 	vmov	r2, s0
 801c864:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801c868:	ec43 2b10 	vmov	d0, r2, r3
 801c86c:	4770      	bx	lr
	...

0801c870 <__kernel_cosf>:
 801c870:	ee10 3a10 	vmov	r3, s0
 801c874:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801c878:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801c87c:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 801c880:	da05      	bge.n	801c88e <__kernel_cosf+0x1e>
 801c882:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 801c886:	ee17 2a90 	vmov	r2, s15
 801c88a:	2a00      	cmp	r2, #0
 801c88c:	d03b      	beq.n	801c906 <__kernel_cosf+0x96>
 801c88e:	ee20 7a00 	vmul.f32	s14, s0, s0
 801c892:	eddf 7a1e 	vldr	s15, [pc, #120]	; 801c90c <__kernel_cosf+0x9c>
 801c896:	ed9f 6a1e 	vldr	s12, [pc, #120]	; 801c910 <__kernel_cosf+0xa0>
 801c89a:	ee60 0ac0 	vnmul.f32	s1, s1, s0
 801c89e:	4a1d      	ldr	r2, [pc, #116]	; (801c914 <__kernel_cosf+0xa4>)
 801c8a0:	eea7 6a27 	vfma.f32	s12, s14, s15
 801c8a4:	eddf 7a1c 	vldr	s15, [pc, #112]	; 801c918 <__kernel_cosf+0xa8>
 801c8a8:	4293      	cmp	r3, r2
 801c8aa:	eee6 7a07 	vfma.f32	s15, s12, s14
 801c8ae:	ed9f 6a1b 	vldr	s12, [pc, #108]	; 801c91c <__kernel_cosf+0xac>
 801c8b2:	eea7 6a87 	vfma.f32	s12, s15, s14
 801c8b6:	eddf 7a1a 	vldr	s15, [pc, #104]	; 801c920 <__kernel_cosf+0xb0>
 801c8ba:	eee6 7a07 	vfma.f32	s15, s12, s14
 801c8be:	ed9f 6a19 	vldr	s12, [pc, #100]	; 801c924 <__kernel_cosf+0xb4>
 801c8c2:	eea7 6a87 	vfma.f32	s12, s15, s14
 801c8c6:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 801c8ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 801c8ce:	ee26 6a07 	vmul.f32	s12, s12, s14
 801c8d2:	eee7 0a06 	vfma.f32	s1, s14, s12
 801c8d6:	dc04      	bgt.n	801c8e2 <__kernel_cosf+0x72>
 801c8d8:	ee77 7ae0 	vsub.f32	s15, s15, s1
 801c8dc:	ee36 0ae7 	vsub.f32	s0, s13, s15
 801c8e0:	4770      	bx	lr
 801c8e2:	4a11      	ldr	r2, [pc, #68]	; (801c928 <__kernel_cosf+0xb8>)
 801c8e4:	4293      	cmp	r3, r2
 801c8e6:	bfd6      	itet	le
 801c8e8:	f103 437f 	addle.w	r3, r3, #4278190080	; 0xff000000
 801c8ec:	eeb5 7a02 	vmovgt.f32	s14, #82	; 0x3e900000  0.2812500
 801c8f0:	ee07 3a10 	vmovle	s14, r3
 801c8f4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801c8f8:	ee36 0ac7 	vsub.f32	s0, s13, s14
 801c8fc:	ee77 7ae0 	vsub.f32	s15, s15, s1
 801c900:	ee30 0a67 	vsub.f32	s0, s0, s15
 801c904:	4770      	bx	lr
 801c906:	eeb0 0a66 	vmov.f32	s0, s13
 801c90a:	4770      	bx	lr
 801c90c:	ad47d74e 	.word	0xad47d74e
 801c910:	310f74f6 	.word	0x310f74f6
 801c914:	3e999999 	.word	0x3e999999
 801c918:	b493f27c 	.word	0xb493f27c
 801c91c:	37d00d01 	.word	0x37d00d01
 801c920:	bab60b61 	.word	0xbab60b61
 801c924:	3d2aaaab 	.word	0x3d2aaaab
 801c928:	3f480000 	.word	0x3f480000

0801c92c <__kernel_sinf>:
 801c92c:	ee10 3a10 	vmov	r3, s0
 801c930:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801c934:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 801c938:	da04      	bge.n	801c944 <__kernel_sinf+0x18>
 801c93a:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 801c93e:	ee17 3a90 	vmov	r3, s15
 801c942:	b35b      	cbz	r3, 801c99c <__kernel_sinf+0x70>
 801c944:	ee20 7a00 	vmul.f32	s14, s0, s0
 801c948:	eddf 7a15 	vldr	s15, [pc, #84]	; 801c9a0 <__kernel_sinf+0x74>
 801c94c:	ed9f 6a15 	vldr	s12, [pc, #84]	; 801c9a4 <__kernel_sinf+0x78>
 801c950:	eea7 6a27 	vfma.f32	s12, s14, s15
 801c954:	eddf 7a14 	vldr	s15, [pc, #80]	; 801c9a8 <__kernel_sinf+0x7c>
 801c958:	ee60 6a07 	vmul.f32	s13, s0, s14
 801c95c:	eee6 7a07 	vfma.f32	s15, s12, s14
 801c960:	ed9f 6a12 	vldr	s12, [pc, #72]	; 801c9ac <__kernel_sinf+0x80>
 801c964:	eea7 6a87 	vfma.f32	s12, s15, s14
 801c968:	eddf 7a11 	vldr	s15, [pc, #68]	; 801c9b0 <__kernel_sinf+0x84>
 801c96c:	eee6 7a07 	vfma.f32	s15, s12, s14
 801c970:	b930      	cbnz	r0, 801c980 <__kernel_sinf+0x54>
 801c972:	ed9f 6a10 	vldr	s12, [pc, #64]	; 801c9b4 <__kernel_sinf+0x88>
 801c976:	eea7 6a27 	vfma.f32	s12, s14, s15
 801c97a:	eea6 0a26 	vfma.f32	s0, s12, s13
 801c97e:	4770      	bx	lr
 801c980:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 801c984:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 801c988:	eee0 7a86 	vfma.f32	s15, s1, s12
 801c98c:	eed7 0a87 	vfnms.f32	s1, s15, s14
 801c990:	eddf 7a09 	vldr	s15, [pc, #36]	; 801c9b8 <__kernel_sinf+0x8c>
 801c994:	eee6 0aa7 	vfma.f32	s1, s13, s15
 801c998:	ee30 0a60 	vsub.f32	s0, s0, s1
 801c99c:	4770      	bx	lr
 801c99e:	bf00      	nop
 801c9a0:	2f2ec9d3 	.word	0x2f2ec9d3
 801c9a4:	b2d72f34 	.word	0xb2d72f34
 801c9a8:	3638ef1b 	.word	0x3638ef1b
 801c9ac:	b9500d01 	.word	0xb9500d01
 801c9b0:	3c088889 	.word	0x3c088889
 801c9b4:	be2aaaab 	.word	0xbe2aaaab
 801c9b8:	3e2aaaab 	.word	0x3e2aaaab

0801c9bc <__ieee754_atan2f>:
 801c9bc:	ee10 2a90 	vmov	r2, s1
 801c9c0:	eef0 7a40 	vmov.f32	s15, s0
 801c9c4:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 801c9c8:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 801c9cc:	b510      	push	{r4, lr}
 801c9ce:	dc06      	bgt.n	801c9de <__ieee754_atan2f+0x22>
 801c9d0:	ee10 0a10 	vmov	r0, s0
 801c9d4:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 801c9d8:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 801c9dc:	dd04      	ble.n	801c9e8 <__ieee754_atan2f+0x2c>
 801c9de:	ee77 7aa0 	vadd.f32	s15, s15, s1
 801c9e2:	eeb0 0a67 	vmov.f32	s0, s15
 801c9e6:	bd10      	pop	{r4, pc}
 801c9e8:	f1b2 5f7e 	cmp.w	r2, #1065353216	; 0x3f800000
 801c9ec:	d103      	bne.n	801c9f6 <__ieee754_atan2f+0x3a>
 801c9ee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801c9f2:	f000 b9ab 	b.w	801cd4c <atanf>
 801c9f6:	1794      	asrs	r4, r2, #30
 801c9f8:	f004 0402 	and.w	r4, r4, #2
 801c9fc:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 801ca00:	b93b      	cbnz	r3, 801ca12 <__ieee754_atan2f+0x56>
 801ca02:	2c02      	cmp	r4, #2
 801ca04:	d05c      	beq.n	801cac0 <__ieee754_atan2f+0x104>
 801ca06:	2c03      	cmp	r4, #3
 801ca08:	ed9f 7a32 	vldr	s14, [pc, #200]	; 801cad4 <__ieee754_atan2f+0x118>
 801ca0c:	fe47 7a00 	vseleq.f32	s15, s14, s0
 801ca10:	e7e7      	b.n	801c9e2 <__ieee754_atan2f+0x26>
 801ca12:	b939      	cbnz	r1, 801ca24 <__ieee754_atan2f+0x68>
 801ca14:	2800      	cmp	r0, #0
 801ca16:	eddf 7a30 	vldr	s15, [pc, #192]	; 801cad8 <__ieee754_atan2f+0x11c>
 801ca1a:	ed9f 7a30 	vldr	s14, [pc, #192]	; 801cadc <__ieee754_atan2f+0x120>
 801ca1e:	fe67 7a87 	vselge.f32	s15, s15, s14
 801ca22:	e7de      	b.n	801c9e2 <__ieee754_atan2f+0x26>
 801ca24:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 801ca28:	d110      	bne.n	801ca4c <__ieee754_atan2f+0x90>
 801ca2a:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 801ca2e:	f104 34ff 	add.w	r4, r4, #4294967295
 801ca32:	d107      	bne.n	801ca44 <__ieee754_atan2f+0x88>
 801ca34:	2c02      	cmp	r4, #2
 801ca36:	d846      	bhi.n	801cac6 <__ieee754_atan2f+0x10a>
 801ca38:	4b29      	ldr	r3, [pc, #164]	; (801cae0 <__ieee754_atan2f+0x124>)
 801ca3a:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 801ca3e:	edd3 7a00 	vldr	s15, [r3]
 801ca42:	e7ce      	b.n	801c9e2 <__ieee754_atan2f+0x26>
 801ca44:	2c02      	cmp	r4, #2
 801ca46:	d841      	bhi.n	801cacc <__ieee754_atan2f+0x110>
 801ca48:	4b26      	ldr	r3, [pc, #152]	; (801cae4 <__ieee754_atan2f+0x128>)
 801ca4a:	e7f6      	b.n	801ca3a <__ieee754_atan2f+0x7e>
 801ca4c:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 801ca50:	d0e0      	beq.n	801ca14 <__ieee754_atan2f+0x58>
 801ca52:	1a5b      	subs	r3, r3, r1
 801ca54:	f1b3 5ff4 	cmp.w	r3, #511705088	; 0x1e800000
 801ca58:	ea4f 51e3 	mov.w	r1, r3, asr #23
 801ca5c:	da1a      	bge.n	801ca94 <__ieee754_atan2f+0xd8>
 801ca5e:	2a00      	cmp	r2, #0
 801ca60:	da01      	bge.n	801ca66 <__ieee754_atan2f+0xaa>
 801ca62:	313c      	adds	r1, #60	; 0x3c
 801ca64:	db19      	blt.n	801ca9a <__ieee754_atan2f+0xde>
 801ca66:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 801ca6a:	f000 fa43 	bl	801cef4 <fabsf>
 801ca6e:	f000 f96d 	bl	801cd4c <atanf>
 801ca72:	eef0 7a40 	vmov.f32	s15, s0
 801ca76:	2c01      	cmp	r4, #1
 801ca78:	d012      	beq.n	801caa0 <__ieee754_atan2f+0xe4>
 801ca7a:	2c02      	cmp	r4, #2
 801ca7c:	d017      	beq.n	801caae <__ieee754_atan2f+0xf2>
 801ca7e:	2c00      	cmp	r4, #0
 801ca80:	d0af      	beq.n	801c9e2 <__ieee754_atan2f+0x26>
 801ca82:	ed9f 7a19 	vldr	s14, [pc, #100]	; 801cae8 <__ieee754_atan2f+0x12c>
 801ca86:	ee77 7a87 	vadd.f32	s15, s15, s14
 801ca8a:	ed9f 7a18 	vldr	s14, [pc, #96]	; 801caec <__ieee754_atan2f+0x130>
 801ca8e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801ca92:	e7a6      	b.n	801c9e2 <__ieee754_atan2f+0x26>
 801ca94:	eddf 7a10 	vldr	s15, [pc, #64]	; 801cad8 <__ieee754_atan2f+0x11c>
 801ca98:	e7ed      	b.n	801ca76 <__ieee754_atan2f+0xba>
 801ca9a:	eddf 7a15 	vldr	s15, [pc, #84]	; 801caf0 <__ieee754_atan2f+0x134>
 801ca9e:	e7ea      	b.n	801ca76 <__ieee754_atan2f+0xba>
 801caa0:	ee17 3a90 	vmov	r3, s15
 801caa4:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 801caa8:	ee07 3a90 	vmov	s15, r3
 801caac:	e799      	b.n	801c9e2 <__ieee754_atan2f+0x26>
 801caae:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 801cae8 <__ieee754_atan2f+0x12c>
 801cab2:	ee77 7a87 	vadd.f32	s15, s15, s14
 801cab6:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 801caec <__ieee754_atan2f+0x130>
 801caba:	ee77 7a67 	vsub.f32	s15, s14, s15
 801cabe:	e790      	b.n	801c9e2 <__ieee754_atan2f+0x26>
 801cac0:	eddf 7a0a 	vldr	s15, [pc, #40]	; 801caec <__ieee754_atan2f+0x130>
 801cac4:	e78d      	b.n	801c9e2 <__ieee754_atan2f+0x26>
 801cac6:	eddf 7a0b 	vldr	s15, [pc, #44]	; 801caf4 <__ieee754_atan2f+0x138>
 801caca:	e78a      	b.n	801c9e2 <__ieee754_atan2f+0x26>
 801cacc:	eddf 7a08 	vldr	s15, [pc, #32]	; 801caf0 <__ieee754_atan2f+0x134>
 801cad0:	e787      	b.n	801c9e2 <__ieee754_atan2f+0x26>
 801cad2:	bf00      	nop
 801cad4:	c0490fdb 	.word	0xc0490fdb
 801cad8:	3fc90fdb 	.word	0x3fc90fdb
 801cadc:	bfc90fdb 	.word	0xbfc90fdb
 801cae0:	0801f308 	.word	0x0801f308
 801cae4:	0801f314 	.word	0x0801f314
 801cae8:	33bbbd2e 	.word	0x33bbbd2e
 801caec:	40490fdb 	.word	0x40490fdb
 801caf0:	00000000 	.word	0x00000000
 801caf4:	3f490fdb 	.word	0x3f490fdb

0801caf8 <__ieee754_rem_pio2f>:
 801caf8:	b5f0      	push	{r4, r5, r6, r7, lr}
 801cafa:	ee10 6a10 	vmov	r6, s0
 801cafe:	4b85      	ldr	r3, [pc, #532]	; (801cd14 <__ieee754_rem_pio2f+0x21c>)
 801cb00:	b087      	sub	sp, #28
 801cb02:	4604      	mov	r4, r0
 801cb04:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 801cb08:	429d      	cmp	r5, r3
 801cb0a:	dc05      	bgt.n	801cb18 <__ieee754_rem_pio2f+0x20>
 801cb0c:	2300      	movs	r3, #0
 801cb0e:	ed80 0a00 	vstr	s0, [r0]
 801cb12:	6043      	str	r3, [r0, #4]
 801cb14:	2000      	movs	r0, #0
 801cb16:	e020      	b.n	801cb5a <__ieee754_rem_pio2f+0x62>
 801cb18:	4b7f      	ldr	r3, [pc, #508]	; (801cd18 <__ieee754_rem_pio2f+0x220>)
 801cb1a:	429d      	cmp	r5, r3
 801cb1c:	dc38      	bgt.n	801cb90 <__ieee754_rem_pio2f+0x98>
 801cb1e:	2e00      	cmp	r6, #0
 801cb20:	f025 050f 	bic.w	r5, r5, #15
 801cb24:	ed9f 7a7d 	vldr	s14, [pc, #500]	; 801cd1c <__ieee754_rem_pio2f+0x224>
 801cb28:	4b7d      	ldr	r3, [pc, #500]	; (801cd20 <__ieee754_rem_pio2f+0x228>)
 801cb2a:	dd18      	ble.n	801cb5e <__ieee754_rem_pio2f+0x66>
 801cb2c:	429d      	cmp	r5, r3
 801cb2e:	ee70 7a47 	vsub.f32	s15, s0, s14
 801cb32:	bf09      	itett	eq
 801cb34:	ed9f 7a7b 	vldreq	s14, [pc, #492]	; 801cd24 <__ieee754_rem_pio2f+0x22c>
 801cb38:	ed9f 7a7b 	vldrne	s14, [pc, #492]	; 801cd28 <__ieee754_rem_pio2f+0x230>
 801cb3c:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 801cb40:	ed9f 7a7a 	vldreq	s14, [pc, #488]	; 801cd2c <__ieee754_rem_pio2f+0x234>
 801cb44:	ee77 6ac7 	vsub.f32	s13, s15, s14
 801cb48:	ee77 7ae6 	vsub.f32	s15, s15, s13
 801cb4c:	edc0 6a00 	vstr	s13, [r0]
 801cb50:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801cb54:	edc0 7a01 	vstr	s15, [r0, #4]
 801cb58:	2001      	movs	r0, #1
 801cb5a:	b007      	add	sp, #28
 801cb5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801cb5e:	429d      	cmp	r5, r3
 801cb60:	ee70 7a07 	vadd.f32	s15, s0, s14
 801cb64:	bf09      	itett	eq
 801cb66:	ed9f 7a6f 	vldreq	s14, [pc, #444]	; 801cd24 <__ieee754_rem_pio2f+0x22c>
 801cb6a:	ed9f 7a6f 	vldrne	s14, [pc, #444]	; 801cd28 <__ieee754_rem_pio2f+0x230>
 801cb6e:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 801cb72:	ed9f 7a6e 	vldreq	s14, [pc, #440]	; 801cd2c <__ieee754_rem_pio2f+0x234>
 801cb76:	ee77 6a87 	vadd.f32	s13, s15, s14
 801cb7a:	ee77 7ae6 	vsub.f32	s15, s15, s13
 801cb7e:	edc0 6a00 	vstr	s13, [r0]
 801cb82:	ee77 7a87 	vadd.f32	s15, s15, s14
 801cb86:	edc0 7a01 	vstr	s15, [r0, #4]
 801cb8a:	f04f 30ff 	mov.w	r0, #4294967295
 801cb8e:	e7e4      	b.n	801cb5a <__ieee754_rem_pio2f+0x62>
 801cb90:	4b67      	ldr	r3, [pc, #412]	; (801cd30 <__ieee754_rem_pio2f+0x238>)
 801cb92:	429d      	cmp	r5, r3
 801cb94:	dc70      	bgt.n	801cc78 <__ieee754_rem_pio2f+0x180>
 801cb96:	f000 f9ad 	bl	801cef4 <fabsf>
 801cb9a:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 801cb9e:	ed9f 7a65 	vldr	s14, [pc, #404]	; 801cd34 <__ieee754_rem_pio2f+0x23c>
 801cba2:	eee0 7a07 	vfma.f32	s15, s0, s14
 801cba6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801cbaa:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 801cbae:	ee17 0a90 	vmov	r0, s15
 801cbb2:	eddf 7a5a 	vldr	s15, [pc, #360]	; 801cd1c <__ieee754_rem_pio2f+0x224>
 801cbb6:	281f      	cmp	r0, #31
 801cbb8:	eea7 0a67 	vfms.f32	s0, s14, s15
 801cbbc:	eddf 7a5a 	vldr	s15, [pc, #360]	; 801cd28 <__ieee754_rem_pio2f+0x230>
 801cbc0:	eeb1 6a47 	vneg.f32	s12, s14
 801cbc4:	ee67 7a27 	vmul.f32	s15, s14, s15
 801cbc8:	ee70 6a67 	vsub.f32	s13, s0, s15
 801cbcc:	ee16 2a90 	vmov	r2, s13
 801cbd0:	dc1c      	bgt.n	801cc0c <__ieee754_rem_pio2f+0x114>
 801cbd2:	1e47      	subs	r7, r0, #1
 801cbd4:	4958      	ldr	r1, [pc, #352]	; (801cd38 <__ieee754_rem_pio2f+0x240>)
 801cbd6:	f025 03ff 	bic.w	r3, r5, #255	; 0xff
 801cbda:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 801cbde:	428b      	cmp	r3, r1
 801cbe0:	d014      	beq.n	801cc0c <__ieee754_rem_pio2f+0x114>
 801cbe2:	6022      	str	r2, [r4, #0]
 801cbe4:	ed94 7a00 	vldr	s14, [r4]
 801cbe8:	2e00      	cmp	r6, #0
 801cbea:	ee30 0a47 	vsub.f32	s0, s0, s14
 801cbee:	ee30 0a67 	vsub.f32	s0, s0, s15
 801cbf2:	ed84 0a01 	vstr	s0, [r4, #4]
 801cbf6:	dab0      	bge.n	801cb5a <__ieee754_rem_pio2f+0x62>
 801cbf8:	eeb1 7a47 	vneg.f32	s14, s14
 801cbfc:	eeb1 0a40 	vneg.f32	s0, s0
 801cc00:	ed84 7a00 	vstr	s14, [r4]
 801cc04:	ed84 0a01 	vstr	s0, [r4, #4]
 801cc08:	4240      	negs	r0, r0
 801cc0a:	e7a6      	b.n	801cb5a <__ieee754_rem_pio2f+0x62>
 801cc0c:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 801cc10:	15eb      	asrs	r3, r5, #23
 801cc12:	ebc1 51d5 	rsb	r1, r1, r5, lsr #23
 801cc16:	2908      	cmp	r1, #8
 801cc18:	dde3      	ble.n	801cbe2 <__ieee754_rem_pio2f+0xea>
 801cc1a:	eef0 6a40 	vmov.f32	s13, s0
 801cc1e:	eddf 5a41 	vldr	s11, [pc, #260]	; 801cd24 <__ieee754_rem_pio2f+0x22c>
 801cc22:	eee6 6a25 	vfma.f32	s13, s12, s11
 801cc26:	ee70 7a66 	vsub.f32	s15, s0, s13
 801cc2a:	eee6 7a25 	vfma.f32	s15, s12, s11
 801cc2e:	eddf 5a3f 	vldr	s11, [pc, #252]	; 801cd2c <__ieee754_rem_pio2f+0x234>
 801cc32:	eed7 7a25 	vfnms.f32	s15, s14, s11
 801cc36:	ee76 5ae7 	vsub.f32	s11, s13, s15
 801cc3a:	ee15 2a90 	vmov	r2, s11
 801cc3e:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 801cc42:	1a5b      	subs	r3, r3, r1
 801cc44:	2b19      	cmp	r3, #25
 801cc46:	dc04      	bgt.n	801cc52 <__ieee754_rem_pio2f+0x15a>
 801cc48:	eeb0 0a66 	vmov.f32	s0, s13
 801cc4c:	edc4 5a00 	vstr	s11, [r4]
 801cc50:	e7c8      	b.n	801cbe4 <__ieee754_rem_pio2f+0xec>
 801cc52:	eeb0 0a66 	vmov.f32	s0, s13
 801cc56:	eddf 5a39 	vldr	s11, [pc, #228]	; 801cd3c <__ieee754_rem_pio2f+0x244>
 801cc5a:	eea6 0a25 	vfma.f32	s0, s12, s11
 801cc5e:	ee76 7ac0 	vsub.f32	s15, s13, s0
 801cc62:	eddf 6a37 	vldr	s13, [pc, #220]	; 801cd40 <__ieee754_rem_pio2f+0x248>
 801cc66:	eee6 7a25 	vfma.f32	s15, s12, s11
 801cc6a:	eed7 7a26 	vfnms.f32	s15, s14, s13
 801cc6e:	ee30 7a67 	vsub.f32	s14, s0, s15
 801cc72:	ed84 7a00 	vstr	s14, [r4]
 801cc76:	e7b5      	b.n	801cbe4 <__ieee754_rem_pio2f+0xec>
 801cc78:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 801cc7c:	db06      	blt.n	801cc8c <__ieee754_rem_pio2f+0x194>
 801cc7e:	ee70 7a40 	vsub.f32	s15, s0, s0
 801cc82:	edc0 7a01 	vstr	s15, [r0, #4]
 801cc86:	edc0 7a00 	vstr	s15, [r0]
 801cc8a:	e743      	b.n	801cb14 <__ieee754_rem_pio2f+0x1c>
 801cc8c:	15ea      	asrs	r2, r5, #23
 801cc8e:	eddf 6a2d 	vldr	s13, [pc, #180]	; 801cd44 <__ieee754_rem_pio2f+0x24c>
 801cc92:	3a86      	subs	r2, #134	; 0x86
 801cc94:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 801cc98:	ee07 3a90 	vmov	s15, r3
 801cc9c:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 801cca0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801cca4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801cca8:	ed8d 7a03 	vstr	s14, [sp, #12]
 801ccac:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801ccb0:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 801ccb4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801ccb8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801ccbc:	ed8d 7a04 	vstr	s14, [sp, #16]
 801ccc0:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801ccc4:	eef5 7a40 	vcmp.f32	s15, #0.0
 801ccc8:	edcd 7a05 	vstr	s15, [sp, #20]
 801cccc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ccd0:	d11e      	bne.n	801cd10 <__ieee754_rem_pio2f+0x218>
 801ccd2:	eeb5 7a40 	vcmp.f32	s14, #0.0
 801ccd6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ccda:	bf14      	ite	ne
 801ccdc:	2302      	movne	r3, #2
 801ccde:	2301      	moveq	r3, #1
 801cce0:	4919      	ldr	r1, [pc, #100]	; (801cd48 <__ieee754_rem_pio2f+0x250>)
 801cce2:	a803      	add	r0, sp, #12
 801cce4:	9101      	str	r1, [sp, #4]
 801cce6:	2102      	movs	r1, #2
 801cce8:	9100      	str	r1, [sp, #0]
 801ccea:	4621      	mov	r1, r4
 801ccec:	f000 f9ba 	bl	801d064 <__kernel_rem_pio2f>
 801ccf0:	2e00      	cmp	r6, #0
 801ccf2:	f6bf af32 	bge.w	801cb5a <__ieee754_rem_pio2f+0x62>
 801ccf6:	edd4 7a00 	vldr	s15, [r4]
 801ccfa:	eef1 7a67 	vneg.f32	s15, s15
 801ccfe:	edc4 7a00 	vstr	s15, [r4]
 801cd02:	edd4 7a01 	vldr	s15, [r4, #4]
 801cd06:	eef1 7a67 	vneg.f32	s15, s15
 801cd0a:	edc4 7a01 	vstr	s15, [r4, #4]
 801cd0e:	e77b      	b.n	801cc08 <__ieee754_rem_pio2f+0x110>
 801cd10:	2303      	movs	r3, #3
 801cd12:	e7e5      	b.n	801cce0 <__ieee754_rem_pio2f+0x1e8>
 801cd14:	3f490fd8 	.word	0x3f490fd8
 801cd18:	4016cbe3 	.word	0x4016cbe3
 801cd1c:	3fc90f80 	.word	0x3fc90f80
 801cd20:	3fc90fd0 	.word	0x3fc90fd0
 801cd24:	37354400 	.word	0x37354400
 801cd28:	37354443 	.word	0x37354443
 801cd2c:	2e85a308 	.word	0x2e85a308
 801cd30:	43490f80 	.word	0x43490f80
 801cd34:	3f22f984 	.word	0x3f22f984
 801cd38:	0801f320 	.word	0x0801f320
 801cd3c:	2e85a300 	.word	0x2e85a300
 801cd40:	248d3132 	.word	0x248d3132
 801cd44:	43800000 	.word	0x43800000
 801cd48:	0801f3a0 	.word	0x0801f3a0

0801cd4c <atanf>:
 801cd4c:	b538      	push	{r3, r4, r5, lr}
 801cd4e:	ee10 5a10 	vmov	r5, s0
 801cd52:	eef0 7a40 	vmov.f32	s15, s0
 801cd56:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 801cd5a:	f1b4 4fa1 	cmp.w	r4, #1350565888	; 0x50800000
 801cd5e:	db0f      	blt.n	801cd80 <atanf+0x34>
 801cd60:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 801cd64:	dd04      	ble.n	801cd70 <atanf+0x24>
 801cd66:	ee70 7a00 	vadd.f32	s15, s0, s0
 801cd6a:	eeb0 0a67 	vmov.f32	s0, s15
 801cd6e:	bd38      	pop	{r3, r4, r5, pc}
 801cd70:	2d00      	cmp	r5, #0
 801cd72:	eddf 7a4d 	vldr	s15, [pc, #308]	; 801cea8 <atanf+0x15c>
 801cd76:	ed9f 7a4d 	vldr	s14, [pc, #308]	; 801ceac <atanf+0x160>
 801cd7a:	fe77 7a87 	vselgt.f32	s15, s15, s14
 801cd7e:	e7f4      	b.n	801cd6a <atanf+0x1e>
 801cd80:	4b4b      	ldr	r3, [pc, #300]	; (801ceb0 <atanf+0x164>)
 801cd82:	429c      	cmp	r4, r3
 801cd84:	dc10      	bgt.n	801cda8 <atanf+0x5c>
 801cd86:	f1b4 5f44 	cmp.w	r4, #822083584	; 0x31000000
 801cd8a:	da0a      	bge.n	801cda2 <atanf+0x56>
 801cd8c:	ed9f 7a49 	vldr	s14, [pc, #292]	; 801ceb4 <atanf+0x168>
 801cd90:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801cd94:	ee30 7a07 	vadd.f32	s14, s0, s14
 801cd98:	eeb4 7ae6 	vcmpe.f32	s14, s13
 801cd9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801cda0:	dce3      	bgt.n	801cd6a <atanf+0x1e>
 801cda2:	f04f 33ff 	mov.w	r3, #4294967295
 801cda6:	e013      	b.n	801cdd0 <atanf+0x84>
 801cda8:	f000 f8a4 	bl	801cef4 <fabsf>
 801cdac:	4b42      	ldr	r3, [pc, #264]	; (801ceb8 <atanf+0x16c>)
 801cdae:	429c      	cmp	r4, r3
 801cdb0:	dc4f      	bgt.n	801ce52 <atanf+0x106>
 801cdb2:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 801cdb6:	429c      	cmp	r4, r3
 801cdb8:	dc41      	bgt.n	801ce3e <atanf+0xf2>
 801cdba:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 801cdbe:	2300      	movs	r3, #0
 801cdc0:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 801cdc4:	eea0 7a27 	vfma.f32	s14, s0, s15
 801cdc8:	ee30 0a27 	vadd.f32	s0, s0, s15
 801cdcc:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801cdd0:	ed9f 7a3a 	vldr	s14, [pc, #232]	; 801cebc <atanf+0x170>
 801cdd4:	1c5a      	adds	r2, r3, #1
 801cdd6:	eddf 5a3a 	vldr	s11, [pc, #232]	; 801cec0 <atanf+0x174>
 801cdda:	ed9f 5a3a 	vldr	s10, [pc, #232]	; 801cec4 <atanf+0x178>
 801cdde:	ee27 6aa7 	vmul.f32	s12, s15, s15
 801cde2:	ee66 6a06 	vmul.f32	s13, s12, s12
 801cde6:	eee6 5a87 	vfma.f32	s11, s13, s14
 801cdea:	ed9f 7a37 	vldr	s14, [pc, #220]	; 801cec8 <atanf+0x17c>
 801cdee:	eea5 7aa6 	vfma.f32	s14, s11, s13
 801cdf2:	eddf 5a36 	vldr	s11, [pc, #216]	; 801cecc <atanf+0x180>
 801cdf6:	eee7 5a26 	vfma.f32	s11, s14, s13
 801cdfa:	ed9f 7a35 	vldr	s14, [pc, #212]	; 801ced0 <atanf+0x184>
 801cdfe:	eea5 7aa6 	vfma.f32	s14, s11, s13
 801ce02:	eddf 5a34 	vldr	s11, [pc, #208]	; 801ced4 <atanf+0x188>
 801ce06:	eee7 5a26 	vfma.f32	s11, s14, s13
 801ce0a:	ed9f 7a33 	vldr	s14, [pc, #204]	; 801ced8 <atanf+0x18c>
 801ce0e:	eea6 5a87 	vfma.f32	s10, s13, s14
 801ce12:	ed9f 7a32 	vldr	s14, [pc, #200]	; 801cedc <atanf+0x190>
 801ce16:	eea5 7a26 	vfma.f32	s14, s10, s13
 801ce1a:	ed9f 5a31 	vldr	s10, [pc, #196]	; 801cee0 <atanf+0x194>
 801ce1e:	eea7 5a26 	vfma.f32	s10, s14, s13
 801ce22:	ed9f 7a30 	vldr	s14, [pc, #192]	; 801cee4 <atanf+0x198>
 801ce26:	eea5 7a26 	vfma.f32	s14, s10, s13
 801ce2a:	ee27 7a26 	vmul.f32	s14, s14, s13
 801ce2e:	eea5 7a86 	vfma.f32	s14, s11, s12
 801ce32:	ee27 7a87 	vmul.f32	s14, s15, s14
 801ce36:	d121      	bne.n	801ce7c <atanf+0x130>
 801ce38:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801ce3c:	e795      	b.n	801cd6a <atanf+0x1e>
 801ce3e:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 801ce42:	2301      	movs	r3, #1
 801ce44:	ee30 7a67 	vsub.f32	s14, s0, s15
 801ce48:	ee30 0a27 	vadd.f32	s0, s0, s15
 801ce4c:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801ce50:	e7be      	b.n	801cdd0 <atanf+0x84>
 801ce52:	4b25      	ldr	r3, [pc, #148]	; (801cee8 <atanf+0x19c>)
 801ce54:	429c      	cmp	r4, r3
 801ce56:	dc0b      	bgt.n	801ce70 <atanf+0x124>
 801ce58:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 801ce5c:	2302      	movs	r3, #2
 801ce5e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801ce62:	ee70 6a67 	vsub.f32	s13, s0, s15
 801ce66:	eea0 7a27 	vfma.f32	s14, s0, s15
 801ce6a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801ce6e:	e7af      	b.n	801cdd0 <atanf+0x84>
 801ce70:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 801ce74:	2303      	movs	r3, #3
 801ce76:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801ce7a:	e7a9      	b.n	801cdd0 <atanf+0x84>
 801ce7c:	4a1b      	ldr	r2, [pc, #108]	; (801ceec <atanf+0x1a0>)
 801ce7e:	2d00      	cmp	r5, #0
 801ce80:	491b      	ldr	r1, [pc, #108]	; (801cef0 <atanf+0x1a4>)
 801ce82:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 801ce86:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 801ce8a:	edd3 6a00 	vldr	s13, [r3]
 801ce8e:	ee37 7a66 	vsub.f32	s14, s14, s13
 801ce92:	ee37 7a67 	vsub.f32	s14, s14, s15
 801ce96:	edd2 7a00 	vldr	s15, [r2]
 801ce9a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801ce9e:	bfb8      	it	lt
 801cea0:	eef1 7a67 	vneglt.f32	s15, s15
 801cea4:	e761      	b.n	801cd6a <atanf+0x1e>
 801cea6:	bf00      	nop
 801cea8:	3fc90fdb 	.word	0x3fc90fdb
 801ceac:	bfc90fdb 	.word	0xbfc90fdb
 801ceb0:	3edfffff 	.word	0x3edfffff
 801ceb4:	7149f2ca 	.word	0x7149f2ca
 801ceb8:	3f97ffff 	.word	0x3f97ffff
 801cebc:	3c8569d7 	.word	0x3c8569d7
 801cec0:	3d4bda59 	.word	0x3d4bda59
 801cec4:	bd6ef16b 	.word	0xbd6ef16b
 801cec8:	3d886b35 	.word	0x3d886b35
 801cecc:	3dba2e6e 	.word	0x3dba2e6e
 801ced0:	3e124925 	.word	0x3e124925
 801ced4:	3eaaaaab 	.word	0x3eaaaaab
 801ced8:	bd15a221 	.word	0xbd15a221
 801cedc:	bd9d8795 	.word	0xbd9d8795
 801cee0:	bde38e38 	.word	0xbde38e38
 801cee4:	be4ccccd 	.word	0xbe4ccccd
 801cee8:	401bffff 	.word	0x401bffff
 801ceec:	0801f6b8 	.word	0x0801f6b8
 801cef0:	0801f6c8 	.word	0x0801f6c8

0801cef4 <fabsf>:
 801cef4:	ee10 3a10 	vmov	r3, s0
 801cef8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801cefc:	ee00 3a10 	vmov	s0, r3
 801cf00:	4770      	bx	lr
 801cf02:	0000      	movs	r0, r0
 801cf04:	0000      	movs	r0, r0
	...

0801cf08 <scalbn>:
 801cf08:	b570      	push	{r4, r5, r6, lr}
 801cf0a:	ec55 4b10 	vmov	r4, r5, d0
 801cf0e:	f3c5 510a 	ubfx	r1, r5, #20, #11
 801cf12:	4606      	mov	r6, r0
 801cf14:	462b      	mov	r3, r5
 801cf16:	b999      	cbnz	r1, 801cf40 <scalbn+0x38>
 801cf18:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 801cf1c:	4323      	orrs	r3, r4
 801cf1e:	d03f      	beq.n	801cfa0 <scalbn+0x98>
 801cf20:	4b35      	ldr	r3, [pc, #212]	; (801cff8 <scalbn+0xf0>)
 801cf22:	4629      	mov	r1, r5
 801cf24:	2200      	movs	r2, #0
 801cf26:	ee10 0a10 	vmov	r0, s0
 801cf2a:	f7e3 fb57 	bl	80005dc <__aeabi_dmul>
 801cf2e:	4b33      	ldr	r3, [pc, #204]	; (801cffc <scalbn+0xf4>)
 801cf30:	4604      	mov	r4, r0
 801cf32:	460d      	mov	r5, r1
 801cf34:	429e      	cmp	r6, r3
 801cf36:	da10      	bge.n	801cf5a <scalbn+0x52>
 801cf38:	a327      	add	r3, pc, #156	; (adr r3, 801cfd8 <scalbn+0xd0>)
 801cf3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cf3e:	e01f      	b.n	801cf80 <scalbn+0x78>
 801cf40:	f240 72ff 	movw	r2, #2047	; 0x7ff
 801cf44:	4291      	cmp	r1, r2
 801cf46:	d10c      	bne.n	801cf62 <scalbn+0x5a>
 801cf48:	ee10 2a10 	vmov	r2, s0
 801cf4c:	4620      	mov	r0, r4
 801cf4e:	4629      	mov	r1, r5
 801cf50:	f7e3 f98e 	bl	8000270 <__adddf3>
 801cf54:	4604      	mov	r4, r0
 801cf56:	460d      	mov	r5, r1
 801cf58:	e022      	b.n	801cfa0 <scalbn+0x98>
 801cf5a:	460b      	mov	r3, r1
 801cf5c:	f3c1 510a 	ubfx	r1, r1, #20, #11
 801cf60:	3936      	subs	r1, #54	; 0x36
 801cf62:	f24c 3250 	movw	r2, #50000	; 0xc350
 801cf66:	4296      	cmp	r6, r2
 801cf68:	dd0d      	ble.n	801cf86 <scalbn+0x7e>
 801cf6a:	2d00      	cmp	r5, #0
 801cf6c:	a11c      	add	r1, pc, #112	; (adr r1, 801cfe0 <scalbn+0xd8>)
 801cf6e:	e9d1 0100 	ldrd	r0, r1, [r1]
 801cf72:	da02      	bge.n	801cf7a <scalbn+0x72>
 801cf74:	a11c      	add	r1, pc, #112	; (adr r1, 801cfe8 <scalbn+0xe0>)
 801cf76:	e9d1 0100 	ldrd	r0, r1, [r1]
 801cf7a:	a319      	add	r3, pc, #100	; (adr r3, 801cfe0 <scalbn+0xd8>)
 801cf7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cf80:	f7e3 fb2c 	bl	80005dc <__aeabi_dmul>
 801cf84:	e7e6      	b.n	801cf54 <scalbn+0x4c>
 801cf86:	1872      	adds	r2, r6, r1
 801cf88:	f240 71fe 	movw	r1, #2046	; 0x7fe
 801cf8c:	428a      	cmp	r2, r1
 801cf8e:	dcec      	bgt.n	801cf6a <scalbn+0x62>
 801cf90:	2a00      	cmp	r2, #0
 801cf92:	dd08      	ble.n	801cfa6 <scalbn+0x9e>
 801cf94:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801cf98:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801cf9c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 801cfa0:	ec45 4b10 	vmov	d0, r4, r5
 801cfa4:	bd70      	pop	{r4, r5, r6, pc}
 801cfa6:	f112 0f35 	cmn.w	r2, #53	; 0x35
 801cfaa:	da08      	bge.n	801cfbe <scalbn+0xb6>
 801cfac:	2d00      	cmp	r5, #0
 801cfae:	a10a      	add	r1, pc, #40	; (adr r1, 801cfd8 <scalbn+0xd0>)
 801cfb0:	e9d1 0100 	ldrd	r0, r1, [r1]
 801cfb4:	dac0      	bge.n	801cf38 <scalbn+0x30>
 801cfb6:	a10e      	add	r1, pc, #56	; (adr r1, 801cff0 <scalbn+0xe8>)
 801cfb8:	e9d1 0100 	ldrd	r0, r1, [r1]
 801cfbc:	e7bc      	b.n	801cf38 <scalbn+0x30>
 801cfbe:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801cfc2:	3236      	adds	r2, #54	; 0x36
 801cfc4:	4620      	mov	r0, r4
 801cfc6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801cfca:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 801cfce:	2200      	movs	r2, #0
 801cfd0:	4b0b      	ldr	r3, [pc, #44]	; (801d000 <scalbn+0xf8>)
 801cfd2:	e7d5      	b.n	801cf80 <scalbn+0x78>
 801cfd4:	f3af 8000 	nop.w
 801cfd8:	c2f8f359 	.word	0xc2f8f359
 801cfdc:	01a56e1f 	.word	0x01a56e1f
 801cfe0:	8800759c 	.word	0x8800759c
 801cfe4:	7e37e43c 	.word	0x7e37e43c
 801cfe8:	8800759c 	.word	0x8800759c
 801cfec:	fe37e43c 	.word	0xfe37e43c
 801cff0:	c2f8f359 	.word	0xc2f8f359
 801cff4:	81a56e1f 	.word	0x81a56e1f
 801cff8:	43500000 	.word	0x43500000
 801cffc:	ffff3cb0 	.word	0xffff3cb0
 801d000:	3c900000 	.word	0x3c900000

0801d004 <with_errno>:
 801d004:	b570      	push	{r4, r5, r6, lr}
 801d006:	4604      	mov	r4, r0
 801d008:	460d      	mov	r5, r1
 801d00a:	4616      	mov	r6, r2
 801d00c:	f000 fdf6 	bl	801dbfc <__errno>
 801d010:	4629      	mov	r1, r5
 801d012:	6006      	str	r6, [r0, #0]
 801d014:	4620      	mov	r0, r4
 801d016:	bd70      	pop	{r4, r5, r6, pc}

0801d018 <xflow>:
 801d018:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801d01a:	4614      	mov	r4, r2
 801d01c:	461d      	mov	r5, r3
 801d01e:	b108      	cbz	r0, 801d024 <xflow+0xc>
 801d020:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 801d024:	4620      	mov	r0, r4
 801d026:	4629      	mov	r1, r5
 801d028:	e9cd 2300 	strd	r2, r3, [sp]
 801d02c:	e9dd 2300 	ldrd	r2, r3, [sp]
 801d030:	f7e3 fad4 	bl	80005dc <__aeabi_dmul>
 801d034:	2222      	movs	r2, #34	; 0x22
 801d036:	b003      	add	sp, #12
 801d038:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801d03c:	f7ff bfe2 	b.w	801d004 <with_errno>

0801d040 <__math_uflow>:
 801d040:	b508      	push	{r3, lr}
 801d042:	2200      	movs	r2, #0
 801d044:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 801d048:	f7ff ffe6 	bl	801d018 <xflow>
 801d04c:	ec41 0b10 	vmov	d0, r0, r1
 801d050:	bd08      	pop	{r3, pc}

0801d052 <__math_oflow>:
 801d052:	b508      	push	{r3, lr}
 801d054:	2200      	movs	r2, #0
 801d056:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 801d05a:	f7ff ffdd 	bl	801d018 <xflow>
 801d05e:	ec41 0b10 	vmov	d0, r0, r1
 801d062:	bd08      	pop	{r3, pc}

0801d064 <__kernel_rem_pio2f>:
 801d064:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d068:	ed2d 8b04 	vpush	{d8-d9}
 801d06c:	b0d9      	sub	sp, #356	; 0x164
 801d06e:	4688      	mov	r8, r1
 801d070:	49b9      	ldr	r1, [pc, #740]	; (801d358 <__kernel_rem_pio2f+0x2f4>)
 801d072:	9002      	str	r0, [sp, #8]
 801d074:	9866      	ldr	r0, [sp, #408]	; 0x198
 801d076:	9301      	str	r3, [sp, #4]
 801d078:	f851 a020 	ldr.w	sl, [r1, r0, lsl #2]
 801d07c:	9901      	ldr	r1, [sp, #4]
 801d07e:	9b67      	ldr	r3, [sp, #412]	; 0x19c
 801d080:	f101 3bff 	add.w	fp, r1, #4294967295
 801d084:	1d11      	adds	r1, r2, #4
 801d086:	db25      	blt.n	801d0d4 <__kernel_rem_pio2f+0x70>
 801d088:	1ed0      	subs	r0, r2, #3
 801d08a:	bf48      	it	mi
 801d08c:	1d10      	addmi	r0, r2, #4
 801d08e:	10c0      	asrs	r0, r0, #3
 801d090:	1c45      	adds	r5, r0, #1
 801d092:	eba0 070b 	sub.w	r7, r0, fp
 801d096:	eb0a 0c0b 	add.w	ip, sl, fp
 801d09a:	ae1c      	add	r6, sp, #112	; 0x70
 801d09c:	00e9      	lsls	r1, r5, #3
 801d09e:	2400      	movs	r4, #0
 801d0a0:	eba2 05c5 	sub.w	r5, r2, r5, lsl #3
 801d0a4:	ed9f 7ab0 	vldr	s14, [pc, #704]	; 801d368 <__kernel_rem_pio2f+0x304>
 801d0a8:	eb03 0e87 	add.w	lr, r3, r7, lsl #2
 801d0ac:	9103      	str	r1, [sp, #12]
 801d0ae:	4564      	cmp	r4, ip
 801d0b0:	dd12      	ble.n	801d0d8 <__kernel_rem_pio2f+0x74>
 801d0b2:	ac1c      	add	r4, sp, #112	; 0x70
 801d0b4:	9901      	ldr	r1, [sp, #4]
 801d0b6:	f50d 7988 	add.w	r9, sp, #272	; 0x110
 801d0ba:	f04f 0c00 	mov.w	ip, #0
 801d0be:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 801d0c2:	45d4      	cmp	ip, sl
 801d0c4:	dc29      	bgt.n	801d11a <__kernel_rem_pio2f+0xb6>
 801d0c6:	f8dd e008 	ldr.w	lr, [sp, #8]
 801d0ca:	4627      	mov	r7, r4
 801d0cc:	eddf 7aa6 	vldr	s15, [pc, #664]	; 801d368 <__kernel_rem_pio2f+0x304>
 801d0d0:	2600      	movs	r6, #0
 801d0d2:	e018      	b.n	801d106 <__kernel_rem_pio2f+0xa2>
 801d0d4:	2000      	movs	r0, #0
 801d0d6:	e7db      	b.n	801d090 <__kernel_rem_pio2f+0x2c>
 801d0d8:	42e7      	cmn	r7, r4
 801d0da:	bf54      	ite	pl
 801d0dc:	f85e 1024 	ldrpl.w	r1, [lr, r4, lsl #2]
 801d0e0:	eef0 7a47 	vmovmi.f32	s15, s14
 801d0e4:	f104 0401 	add.w	r4, r4, #1
 801d0e8:	bf5c      	itt	pl
 801d0ea:	ee07 1a90 	vmovpl	s15, r1
 801d0ee:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 801d0f2:	ece6 7a01 	vstmia	r6!, {s15}
 801d0f6:	e7da      	b.n	801d0ae <__kernel_rem_pio2f+0x4a>
 801d0f8:	ecfe 6a01 	vldmia	lr!, {s13}
 801d0fc:	3601      	adds	r6, #1
 801d0fe:	ed97 7a00 	vldr	s14, [r7]
 801d102:	eee6 7a87 	vfma.f32	s15, s13, s14
 801d106:	455e      	cmp	r6, fp
 801d108:	f1a7 0704 	sub.w	r7, r7, #4
 801d10c:	ddf4      	ble.n	801d0f8 <__kernel_rem_pio2f+0x94>
 801d10e:	f10c 0c01 	add.w	ip, ip, #1
 801d112:	3404      	adds	r4, #4
 801d114:	ece9 7a01 	vstmia	r9!, {s15}
 801d118:	e7d3      	b.n	801d0c2 <__kernel_rem_pio2f+0x5e>
 801d11a:	a908      	add	r1, sp, #32
 801d11c:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 801d120:	4656      	mov	r6, sl
 801d122:	eddf 8a90 	vldr	s17, [pc, #576]	; 801d364 <__kernel_rem_pio2f+0x300>
 801d126:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801d12a:	ed9f 9a8d 	vldr	s18, [pc, #564]	; 801d360 <__kernel_rem_pio2f+0x2fc>
 801d12e:	9304      	str	r3, [sp, #16]
 801d130:	9105      	str	r1, [sp, #20]
 801d132:	00b3      	lsls	r3, r6, #2
 801d134:	ac08      	add	r4, sp, #32
 801d136:	4637      	mov	r7, r6
 801d138:	9306      	str	r3, [sp, #24]
 801d13a:	ab58      	add	r3, sp, #352	; 0x160
 801d13c:	46a4      	mov	ip, r4
 801d13e:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 801d142:	ab44      	add	r3, sp, #272	; 0x110
 801d144:	ed10 0a14 	vldr	s0, [r0, #-80]	; 0xffffffb0
 801d148:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 801d14c:	2f00      	cmp	r7, #0
 801d14e:	f1a0 0004 	sub.w	r0, r0, #4
 801d152:	dc4a      	bgt.n	801d1ea <__kernel_rem_pio2f+0x186>
 801d154:	4628      	mov	r0, r5
 801d156:	9207      	str	r2, [sp, #28]
 801d158:	f000 f9f8 	bl	801d54c <scalbnf>
 801d15c:	eeb0 8a40 	vmov.f32	s16, s0
 801d160:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 801d164:	ee28 0a00 	vmul.f32	s0, s16, s0
 801d168:	f000 fa54 	bl	801d614 <floorf>
 801d16c:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 801d170:	2d00      	cmp	r5, #0
 801d172:	9a07      	ldr	r2, [sp, #28]
 801d174:	eea0 8a67 	vfms.f32	s16, s0, s15
 801d178:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 801d17c:	ee17 9a90 	vmov	r9, s15
 801d180:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801d184:	ee38 8a67 	vsub.f32	s16, s16, s15
 801d188:	dd41      	ble.n	801d20e <__kernel_rem_pio2f+0x1aa>
 801d18a:	f106 3cff 	add.w	ip, r6, #4294967295
 801d18e:	ab08      	add	r3, sp, #32
 801d190:	f1c5 0e08 	rsb	lr, r5, #8
 801d194:	f853 702c 	ldr.w	r7, [r3, ip, lsl #2]
 801d198:	fa47 f00e 	asr.w	r0, r7, lr
 801d19c:	4481      	add	r9, r0
 801d19e:	fa00 f00e 	lsl.w	r0, r0, lr
 801d1a2:	1a3f      	subs	r7, r7, r0
 801d1a4:	f1c5 0007 	rsb	r0, r5, #7
 801d1a8:	f843 702c 	str.w	r7, [r3, ip, lsl #2]
 801d1ac:	4107      	asrs	r7, r0
 801d1ae:	2f00      	cmp	r7, #0
 801d1b0:	dd3c      	ble.n	801d22c <__kernel_rem_pio2f+0x1c8>
 801d1b2:	f04f 0e00 	mov.w	lr, #0
 801d1b6:	f109 0901 	add.w	r9, r9, #1
 801d1ba:	4671      	mov	r1, lr
 801d1bc:	4576      	cmp	r6, lr
 801d1be:	dc67      	bgt.n	801d290 <__kernel_rem_pio2f+0x22c>
 801d1c0:	2d00      	cmp	r5, #0
 801d1c2:	dd03      	ble.n	801d1cc <__kernel_rem_pio2f+0x168>
 801d1c4:	2d01      	cmp	r5, #1
 801d1c6:	d074      	beq.n	801d2b2 <__kernel_rem_pio2f+0x24e>
 801d1c8:	2d02      	cmp	r5, #2
 801d1ca:	d07b      	beq.n	801d2c4 <__kernel_rem_pio2f+0x260>
 801d1cc:	2f02      	cmp	r7, #2
 801d1ce:	d12d      	bne.n	801d22c <__kernel_rem_pio2f+0x1c8>
 801d1d0:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 801d1d4:	ee30 8a48 	vsub.f32	s16, s0, s16
 801d1d8:	b341      	cbz	r1, 801d22c <__kernel_rem_pio2f+0x1c8>
 801d1da:	4628      	mov	r0, r5
 801d1dc:	9207      	str	r2, [sp, #28]
 801d1de:	f000 f9b5 	bl	801d54c <scalbnf>
 801d1e2:	9a07      	ldr	r2, [sp, #28]
 801d1e4:	ee38 8a40 	vsub.f32	s16, s16, s0
 801d1e8:	e020      	b.n	801d22c <__kernel_rem_pio2f+0x1c8>
 801d1ea:	ee60 7a28 	vmul.f32	s15, s0, s17
 801d1ee:	3f01      	subs	r7, #1
 801d1f0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801d1f4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801d1f8:	eea7 0ac9 	vfms.f32	s0, s15, s18
 801d1fc:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 801d200:	ecac 0a01 	vstmia	ip!, {s0}
 801d204:	ed90 0a00 	vldr	s0, [r0]
 801d208:	ee37 0a80 	vadd.f32	s0, s15, s0
 801d20c:	e79e      	b.n	801d14c <__kernel_rem_pio2f+0xe8>
 801d20e:	d105      	bne.n	801d21c <__kernel_rem_pio2f+0x1b8>
 801d210:	1e70      	subs	r0, r6, #1
 801d212:	ab08      	add	r3, sp, #32
 801d214:	f853 7020 	ldr.w	r7, [r3, r0, lsl #2]
 801d218:	11ff      	asrs	r7, r7, #7
 801d21a:	e7c8      	b.n	801d1ae <__kernel_rem_pio2f+0x14a>
 801d21c:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 801d220:	eeb4 8ae7 	vcmpe.f32	s16, s15
 801d224:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d228:	da30      	bge.n	801d28c <__kernel_rem_pio2f+0x228>
 801d22a:	2700      	movs	r7, #0
 801d22c:	eeb5 8a40 	vcmp.f32	s16, #0.0
 801d230:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d234:	f040 809a 	bne.w	801d36c <__kernel_rem_pio2f+0x308>
 801d238:	1e74      	subs	r4, r6, #1
 801d23a:	2100      	movs	r1, #0
 801d23c:	46a4      	mov	ip, r4
 801d23e:	45d4      	cmp	ip, sl
 801d240:	da47      	bge.n	801d2d2 <__kernel_rem_pio2f+0x26e>
 801d242:	2900      	cmp	r1, #0
 801d244:	d063      	beq.n	801d30e <__kernel_rem_pio2f+0x2aa>
 801d246:	ab08      	add	r3, sp, #32
 801d248:	3d08      	subs	r5, #8
 801d24a:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 801d24e:	2b00      	cmp	r3, #0
 801d250:	d07f      	beq.n	801d352 <__kernel_rem_pio2f+0x2ee>
 801d252:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 801d256:	4628      	mov	r0, r5
 801d258:	f000 f978 	bl	801d54c <scalbnf>
 801d25c:	1c63      	adds	r3, r4, #1
 801d25e:	aa44      	add	r2, sp, #272	; 0x110
 801d260:	ed9f 7a40 	vldr	s14, [pc, #256]	; 801d364 <__kernel_rem_pio2f+0x300>
 801d264:	0099      	lsls	r1, r3, #2
 801d266:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 801d26a:	4623      	mov	r3, r4
 801d26c:	2b00      	cmp	r3, #0
 801d26e:	f280 80ad 	bge.w	801d3cc <__kernel_rem_pio2f+0x368>
 801d272:	4623      	mov	r3, r4
 801d274:	2b00      	cmp	r3, #0
 801d276:	f2c0 80cb 	blt.w	801d410 <__kernel_rem_pio2f+0x3ac>
 801d27a:	aa44      	add	r2, sp, #272	; 0x110
 801d27c:	4e37      	ldr	r6, [pc, #220]	; (801d35c <__kernel_rem_pio2f+0x2f8>)
 801d27e:	eddf 7a3a 	vldr	s15, [pc, #232]	; 801d368 <__kernel_rem_pio2f+0x304>
 801d282:	2000      	movs	r0, #0
 801d284:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 801d288:	1ae2      	subs	r2, r4, r3
 801d28a:	e0b6      	b.n	801d3fa <__kernel_rem_pio2f+0x396>
 801d28c:	2702      	movs	r7, #2
 801d28e:	e790      	b.n	801d1b2 <__kernel_rem_pio2f+0x14e>
 801d290:	6820      	ldr	r0, [r4, #0]
 801d292:	b949      	cbnz	r1, 801d2a8 <__kernel_rem_pio2f+0x244>
 801d294:	b118      	cbz	r0, 801d29e <__kernel_rem_pio2f+0x23a>
 801d296:	f5c0 7080 	rsb	r0, r0, #256	; 0x100
 801d29a:	6020      	str	r0, [r4, #0]
 801d29c:	2001      	movs	r0, #1
 801d29e:	f10e 0e01 	add.w	lr, lr, #1
 801d2a2:	3404      	adds	r4, #4
 801d2a4:	4601      	mov	r1, r0
 801d2a6:	e789      	b.n	801d1bc <__kernel_rem_pio2f+0x158>
 801d2a8:	f1c0 00ff 	rsb	r0, r0, #255	; 0xff
 801d2ac:	6020      	str	r0, [r4, #0]
 801d2ae:	4608      	mov	r0, r1
 801d2b0:	e7f5      	b.n	801d29e <__kernel_rem_pio2f+0x23a>
 801d2b2:	1e74      	subs	r4, r6, #1
 801d2b4:	ab08      	add	r3, sp, #32
 801d2b6:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 801d2ba:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 801d2be:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 801d2c2:	e783      	b.n	801d1cc <__kernel_rem_pio2f+0x168>
 801d2c4:	1e74      	subs	r4, r6, #1
 801d2c6:	ab08      	add	r3, sp, #32
 801d2c8:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 801d2cc:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 801d2d0:	e7f5      	b.n	801d2be <__kernel_rem_pio2f+0x25a>
 801d2d2:	ab08      	add	r3, sp, #32
 801d2d4:	f853 002c 	ldr.w	r0, [r3, ip, lsl #2]
 801d2d8:	f10c 3cff 	add.w	ip, ip, #4294967295
 801d2dc:	4301      	orrs	r1, r0
 801d2de:	e7ae      	b.n	801d23e <__kernel_rem_pio2f+0x1da>
 801d2e0:	3001      	adds	r0, #1
 801d2e2:	f854 7d04 	ldr.w	r7, [r4, #-4]!
 801d2e6:	2f00      	cmp	r7, #0
 801d2e8:	d0fa      	beq.n	801d2e0 <__kernel_rem_pio2f+0x27c>
 801d2ea:	9b06      	ldr	r3, [sp, #24]
 801d2ec:	f106 0c01 	add.w	ip, r6, #1
 801d2f0:	4430      	add	r0, r6
 801d2f2:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 801d2f6:	eb0d 0403 	add.w	r4, sp, r3
 801d2fa:	9b01      	ldr	r3, [sp, #4]
 801d2fc:	18f7      	adds	r7, r6, r3
 801d2fe:	ab1c      	add	r3, sp, #112	; 0x70
 801d300:	3c4c      	subs	r4, #76	; 0x4c
 801d302:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 801d306:	4560      	cmp	r0, ip
 801d308:	da04      	bge.n	801d314 <__kernel_rem_pio2f+0x2b0>
 801d30a:	4606      	mov	r6, r0
 801d30c:	e711      	b.n	801d132 <__kernel_rem_pio2f+0xce>
 801d30e:	9c05      	ldr	r4, [sp, #20]
 801d310:	2001      	movs	r0, #1
 801d312:	e7e6      	b.n	801d2e2 <__kernel_rem_pio2f+0x27e>
 801d314:	9b04      	ldr	r3, [sp, #16]
 801d316:	2600      	movs	r6, #0
 801d318:	f8dd e008 	ldr.w	lr, [sp, #8]
 801d31c:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 801d320:	ee07 3a90 	vmov	s15, r3
 801d324:	9306      	str	r3, [sp, #24]
 801d326:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801d32a:	ece7 7a01 	vstmia	r7!, {s15}
 801d32e:	46b9      	mov	r9, r7
 801d330:	eddf 7a0d 	vldr	s15, [pc, #52]	; 801d368 <__kernel_rem_pio2f+0x304>
 801d334:	455e      	cmp	r6, fp
 801d336:	dd04      	ble.n	801d342 <__kernel_rem_pio2f+0x2de>
 801d338:	f10c 0c01 	add.w	ip, ip, #1
 801d33c:	ece4 7a01 	vstmia	r4!, {s15}
 801d340:	e7e1      	b.n	801d306 <__kernel_rem_pio2f+0x2a2>
 801d342:	ecfe 6a01 	vldmia	lr!, {s13}
 801d346:	3601      	adds	r6, #1
 801d348:	ed39 7a01 	vldmdb	r9!, {s14}
 801d34c:	eee6 7a87 	vfma.f32	s15, s13, s14
 801d350:	e7f0      	b.n	801d334 <__kernel_rem_pio2f+0x2d0>
 801d352:	3c01      	subs	r4, #1
 801d354:	e777      	b.n	801d246 <__kernel_rem_pio2f+0x1e2>
 801d356:	bf00      	nop
 801d358:	0801f704 	.word	0x0801f704
 801d35c:	0801f6d8 	.word	0x0801f6d8
 801d360:	43800000 	.word	0x43800000
 801d364:	3b800000 	.word	0x3b800000
 801d368:	00000000 	.word	0x00000000
 801d36c:	9b03      	ldr	r3, [sp, #12]
 801d36e:	eeb0 0a48 	vmov.f32	s0, s16
 801d372:	1a98      	subs	r0, r3, r2
 801d374:	f000 f8ea 	bl	801d54c <scalbnf>
 801d378:	ed1f 7a07 	vldr	s14, [pc, #-28]	; 801d360 <__kernel_rem_pio2f+0x2fc>
 801d37c:	eeb4 0ac7 	vcmpe.f32	s0, s14
 801d380:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d384:	db19      	blt.n	801d3ba <__kernel_rem_pio2f+0x356>
 801d386:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 801d364 <__kernel_rem_pio2f+0x300>
 801d38a:	aa08      	add	r2, sp, #32
 801d38c:	1c74      	adds	r4, r6, #1
 801d38e:	3508      	adds	r5, #8
 801d390:	ee60 7a27 	vmul.f32	s15, s0, s15
 801d394:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801d398:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801d39c:	eea7 0ac7 	vfms.f32	s0, s15, s14
 801d3a0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801d3a4:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 801d3a8:	ee10 3a10 	vmov	r3, s0
 801d3ac:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 801d3b0:	ee17 3a90 	vmov	r3, s15
 801d3b4:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 801d3b8:	e74b      	b.n	801d252 <__kernel_rem_pio2f+0x1ee>
 801d3ba:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 801d3be:	aa08      	add	r2, sp, #32
 801d3c0:	4634      	mov	r4, r6
 801d3c2:	ee10 3a10 	vmov	r3, s0
 801d3c6:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 801d3ca:	e742      	b.n	801d252 <__kernel_rem_pio2f+0x1ee>
 801d3cc:	a808      	add	r0, sp, #32
 801d3ce:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 801d3d2:	3b01      	subs	r3, #1
 801d3d4:	ee07 0a90 	vmov	s15, r0
 801d3d8:	9001      	str	r0, [sp, #4]
 801d3da:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801d3de:	ee67 7a80 	vmul.f32	s15, s15, s0
 801d3e2:	ee20 0a07 	vmul.f32	s0, s0, s14
 801d3e6:	ed62 7a01 	vstmdb	r2!, {s15}
 801d3ea:	e73f      	b.n	801d26c <__kernel_rem_pio2f+0x208>
 801d3ec:	ecf6 6a01 	vldmia	r6!, {s13}
 801d3f0:	3001      	adds	r0, #1
 801d3f2:	ecb5 7a01 	vldmia	r5!, {s14}
 801d3f6:	eee6 7a87 	vfma.f32	s15, s13, s14
 801d3fa:	4550      	cmp	r0, sl
 801d3fc:	dc01      	bgt.n	801d402 <__kernel_rem_pio2f+0x39e>
 801d3fe:	4290      	cmp	r0, r2
 801d400:	ddf4      	ble.n	801d3ec <__kernel_rem_pio2f+0x388>
 801d402:	a858      	add	r0, sp, #352	; 0x160
 801d404:	3b01      	subs	r3, #1
 801d406:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 801d40a:	ed42 7a28 	vstr	s15, [r2, #-160]	; 0xffffff60
 801d40e:	e731      	b.n	801d274 <__kernel_rem_pio2f+0x210>
 801d410:	9b66      	ldr	r3, [sp, #408]	; 0x198
 801d412:	2b02      	cmp	r3, #2
 801d414:	dc09      	bgt.n	801d42a <__kernel_rem_pio2f+0x3c6>
 801d416:	2b00      	cmp	r3, #0
 801d418:	dc2b      	bgt.n	801d472 <__kernel_rem_pio2f+0x40e>
 801d41a:	d044      	beq.n	801d4a6 <__kernel_rem_pio2f+0x442>
 801d41c:	f009 0007 	and.w	r0, r9, #7
 801d420:	b059      	add	sp, #356	; 0x164
 801d422:	ecbd 8b04 	vpop	{d8-d9}
 801d426:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d42a:	9b66      	ldr	r3, [sp, #408]	; 0x198
 801d42c:	2b03      	cmp	r3, #3
 801d42e:	d1f5      	bne.n	801d41c <__kernel_rem_pio2f+0x3b8>
 801d430:	aa30      	add	r2, sp, #192	; 0xc0
 801d432:	1f0b      	subs	r3, r1, #4
 801d434:	4620      	mov	r0, r4
 801d436:	4413      	add	r3, r2
 801d438:	461a      	mov	r2, r3
 801d43a:	2800      	cmp	r0, #0
 801d43c:	f1a2 0204 	sub.w	r2, r2, #4
 801d440:	dc52      	bgt.n	801d4e8 <__kernel_rem_pio2f+0x484>
 801d442:	4622      	mov	r2, r4
 801d444:	2a01      	cmp	r2, #1
 801d446:	f1a3 0304 	sub.w	r3, r3, #4
 801d44a:	dc5d      	bgt.n	801d508 <__kernel_rem_pio2f+0x4a4>
 801d44c:	ab30      	add	r3, sp, #192	; 0xc0
 801d44e:	ed5f 7a3a 	vldr	s15, [pc, #-232]	; 801d368 <__kernel_rem_pio2f+0x304>
 801d452:	440b      	add	r3, r1
 801d454:	2c01      	cmp	r4, #1
 801d456:	dc67      	bgt.n	801d528 <__kernel_rem_pio2f+0x4c4>
 801d458:	eddd 6a30 	vldr	s13, [sp, #192]	; 0xc0
 801d45c:	ed9d 7a31 	vldr	s14, [sp, #196]	; 0xc4
 801d460:	2f00      	cmp	r7, #0
 801d462:	d167      	bne.n	801d534 <__kernel_rem_pio2f+0x4d0>
 801d464:	edc8 6a00 	vstr	s13, [r8]
 801d468:	ed88 7a01 	vstr	s14, [r8, #4]
 801d46c:	edc8 7a02 	vstr	s15, [r8, #8]
 801d470:	e7d4      	b.n	801d41c <__kernel_rem_pio2f+0x3b8>
 801d472:	ab30      	add	r3, sp, #192	; 0xc0
 801d474:	4622      	mov	r2, r4
 801d476:	ed1f 7a44 	vldr	s14, [pc, #-272]	; 801d368 <__kernel_rem_pio2f+0x304>
 801d47a:	440b      	add	r3, r1
 801d47c:	2a00      	cmp	r2, #0
 801d47e:	da24      	bge.n	801d4ca <__kernel_rem_pio2f+0x466>
 801d480:	b34f      	cbz	r7, 801d4d6 <__kernel_rem_pio2f+0x472>
 801d482:	eef1 7a47 	vneg.f32	s15, s14
 801d486:	edc8 7a00 	vstr	s15, [r8]
 801d48a:	aa31      	add	r2, sp, #196	; 0xc4
 801d48c:	eddd 7a30 	vldr	s15, [sp, #192]	; 0xc0
 801d490:	2301      	movs	r3, #1
 801d492:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801d496:	429c      	cmp	r4, r3
 801d498:	da20      	bge.n	801d4dc <__kernel_rem_pio2f+0x478>
 801d49a:	b10f      	cbz	r7, 801d4a0 <__kernel_rem_pio2f+0x43c>
 801d49c:	eef1 7a67 	vneg.f32	s15, s15
 801d4a0:	edc8 7a01 	vstr	s15, [r8, #4]
 801d4a4:	e7ba      	b.n	801d41c <__kernel_rem_pio2f+0x3b8>
 801d4a6:	ab30      	add	r3, sp, #192	; 0xc0
 801d4a8:	ed5f 7a51 	vldr	s15, [pc, #-324]	; 801d368 <__kernel_rem_pio2f+0x304>
 801d4ac:	440b      	add	r3, r1
 801d4ae:	2c00      	cmp	r4, #0
 801d4b0:	da05      	bge.n	801d4be <__kernel_rem_pio2f+0x45a>
 801d4b2:	b10f      	cbz	r7, 801d4b8 <__kernel_rem_pio2f+0x454>
 801d4b4:	eef1 7a67 	vneg.f32	s15, s15
 801d4b8:	edc8 7a00 	vstr	s15, [r8]
 801d4bc:	e7ae      	b.n	801d41c <__kernel_rem_pio2f+0x3b8>
 801d4be:	ed33 7a01 	vldmdb	r3!, {s14}
 801d4c2:	3c01      	subs	r4, #1
 801d4c4:	ee77 7a87 	vadd.f32	s15, s15, s14
 801d4c8:	e7f1      	b.n	801d4ae <__kernel_rem_pio2f+0x44a>
 801d4ca:	ed73 7a01 	vldmdb	r3!, {s15}
 801d4ce:	3a01      	subs	r2, #1
 801d4d0:	ee37 7a27 	vadd.f32	s14, s14, s15
 801d4d4:	e7d2      	b.n	801d47c <__kernel_rem_pio2f+0x418>
 801d4d6:	eef0 7a47 	vmov.f32	s15, s14
 801d4da:	e7d4      	b.n	801d486 <__kernel_rem_pio2f+0x422>
 801d4dc:	ecb2 7a01 	vldmia	r2!, {s14}
 801d4e0:	3301      	adds	r3, #1
 801d4e2:	ee77 7a87 	vadd.f32	s15, s15, s14
 801d4e6:	e7d6      	b.n	801d496 <__kernel_rem_pio2f+0x432>
 801d4e8:	edd2 7a00 	vldr	s15, [r2]
 801d4ec:	3801      	subs	r0, #1
 801d4ee:	edd2 6a01 	vldr	s13, [r2, #4]
 801d4f2:	ee37 7aa6 	vadd.f32	s14, s15, s13
 801d4f6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801d4fa:	ed82 7a00 	vstr	s14, [r2]
 801d4fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801d502:	edc2 7a01 	vstr	s15, [r2, #4]
 801d506:	e798      	b.n	801d43a <__kernel_rem_pio2f+0x3d6>
 801d508:	edd3 7a00 	vldr	s15, [r3]
 801d50c:	3a01      	subs	r2, #1
 801d50e:	edd3 6a01 	vldr	s13, [r3, #4]
 801d512:	ee37 7aa6 	vadd.f32	s14, s15, s13
 801d516:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801d51a:	ed83 7a00 	vstr	s14, [r3]
 801d51e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801d522:	edc3 7a01 	vstr	s15, [r3, #4]
 801d526:	e78d      	b.n	801d444 <__kernel_rem_pio2f+0x3e0>
 801d528:	ed33 7a01 	vldmdb	r3!, {s14}
 801d52c:	3c01      	subs	r4, #1
 801d52e:	ee77 7a87 	vadd.f32	s15, s15, s14
 801d532:	e78f      	b.n	801d454 <__kernel_rem_pio2f+0x3f0>
 801d534:	eef1 6a66 	vneg.f32	s13, s13
 801d538:	eeb1 7a47 	vneg.f32	s14, s14
 801d53c:	eef1 7a67 	vneg.f32	s15, s15
 801d540:	edc8 6a00 	vstr	s13, [r8]
 801d544:	ed88 7a01 	vstr	s14, [r8, #4]
 801d548:	e790      	b.n	801d46c <__kernel_rem_pio2f+0x408>
 801d54a:	bf00      	nop

0801d54c <scalbnf>:
 801d54c:	ee10 3a10 	vmov	r3, s0
 801d550:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 801d554:	d02a      	beq.n	801d5ac <scalbnf+0x60>
 801d556:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 801d55a:	d302      	bcc.n	801d562 <scalbnf+0x16>
 801d55c:	ee30 0a00 	vadd.f32	s0, s0, s0
 801d560:	4770      	bx	lr
 801d562:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 801d566:	d122      	bne.n	801d5ae <scalbnf+0x62>
 801d568:	4b23      	ldr	r3, [pc, #140]	; (801d5f8 <scalbnf+0xac>)
 801d56a:	eddf 7a24 	vldr	s15, [pc, #144]	; 801d5fc <scalbnf+0xb0>
 801d56e:	4298      	cmp	r0, r3
 801d570:	ee20 0a27 	vmul.f32	s0, s0, s15
 801d574:	db16      	blt.n	801d5a4 <scalbnf+0x58>
 801d576:	ee10 3a10 	vmov	r3, s0
 801d57a:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 801d57e:	3a19      	subs	r2, #25
 801d580:	f24c 3150 	movw	r1, #50000	; 0xc350
 801d584:	4288      	cmp	r0, r1
 801d586:	dd14      	ble.n	801d5b2 <scalbnf+0x66>
 801d588:	eddf 7a1d 	vldr	s15, [pc, #116]	; 801d600 <scalbnf+0xb4>
 801d58c:	ee10 3a10 	vmov	r3, s0
 801d590:	eddf 6a1c 	vldr	s13, [pc, #112]	; 801d604 <scalbnf+0xb8>
 801d594:	eeb0 7a67 	vmov.f32	s14, s15
 801d598:	2b00      	cmp	r3, #0
 801d59a:	fe67 7aa6 	vselge.f32	s15, s15, s13
 801d59e:	ee27 0a87 	vmul.f32	s0, s15, s14
 801d5a2:	4770      	bx	lr
 801d5a4:	eddf 7a18 	vldr	s15, [pc, #96]	; 801d608 <scalbnf+0xbc>
 801d5a8:	ee27 0a80 	vmul.f32	s0, s15, s0
 801d5ac:	4770      	bx	lr
 801d5ae:	0dd2      	lsrs	r2, r2, #23
 801d5b0:	e7e6      	b.n	801d580 <scalbnf+0x34>
 801d5b2:	4410      	add	r0, r2
 801d5b4:	28fe      	cmp	r0, #254	; 0xfe
 801d5b6:	dce7      	bgt.n	801d588 <scalbnf+0x3c>
 801d5b8:	2800      	cmp	r0, #0
 801d5ba:	dd06      	ble.n	801d5ca <scalbnf+0x7e>
 801d5bc:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801d5c0:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 801d5c4:	ee00 3a10 	vmov	s0, r3
 801d5c8:	4770      	bx	lr
 801d5ca:	f110 0f16 	cmn.w	r0, #22
 801d5ce:	da09      	bge.n	801d5e4 <scalbnf+0x98>
 801d5d0:	eddf 7a0d 	vldr	s15, [pc, #52]	; 801d608 <scalbnf+0xbc>
 801d5d4:	ee10 3a10 	vmov	r3, s0
 801d5d8:	eddf 6a0c 	vldr	s13, [pc, #48]	; 801d60c <scalbnf+0xc0>
 801d5dc:	eeb0 7a67 	vmov.f32	s14, s15
 801d5e0:	2b00      	cmp	r3, #0
 801d5e2:	e7da      	b.n	801d59a <scalbnf+0x4e>
 801d5e4:	3019      	adds	r0, #25
 801d5e6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801d5ea:	ed9f 0a09 	vldr	s0, [pc, #36]	; 801d610 <scalbnf+0xc4>
 801d5ee:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 801d5f2:	ee07 3a90 	vmov	s15, r3
 801d5f6:	e7d7      	b.n	801d5a8 <scalbnf+0x5c>
 801d5f8:	ffff3cb0 	.word	0xffff3cb0
 801d5fc:	4c000000 	.word	0x4c000000
 801d600:	7149f2ca 	.word	0x7149f2ca
 801d604:	f149f2ca 	.word	0xf149f2ca
 801d608:	0da24260 	.word	0x0da24260
 801d60c:	8da24260 	.word	0x8da24260
 801d610:	33000000 	.word	0x33000000

0801d614 <floorf>:
 801d614:	febb 0a40 	vrintm.f32	s0, s0
 801d618:	4770      	bx	lr

0801d61a <abort>:
 801d61a:	2006      	movs	r0, #6
 801d61c:	b508      	push	{r3, lr}
 801d61e:	f000 fa7b 	bl	801db18 <raise>
 801d622:	2001      	movs	r0, #1
 801d624:	f7f1 f842 	bl	800e6ac <_exit>

0801d628 <malloc>:
 801d628:	4b02      	ldr	r3, [pc, #8]	; (801d634 <malloc+0xc>)
 801d62a:	4601      	mov	r1, r0
 801d62c:	6818      	ldr	r0, [r3, #0]
 801d62e:	f000 b82b 	b.w	801d688 <_malloc_r>
 801d632:	bf00      	nop
 801d634:	20000108 	.word	0x20000108

0801d638 <free>:
 801d638:	4b02      	ldr	r3, [pc, #8]	; (801d644 <free+0xc>)
 801d63a:	4601      	mov	r1, r0
 801d63c:	6818      	ldr	r0, [r3, #0]
 801d63e:	f000 bb35 	b.w	801dcac <_free_r>
 801d642:	bf00      	nop
 801d644:	20000108 	.word	0x20000108

0801d648 <sbrk_aligned>:
 801d648:	b570      	push	{r4, r5, r6, lr}
 801d64a:	4e0e      	ldr	r6, [pc, #56]	; (801d684 <sbrk_aligned+0x3c>)
 801d64c:	460c      	mov	r4, r1
 801d64e:	4605      	mov	r5, r0
 801d650:	6831      	ldr	r1, [r6, #0]
 801d652:	b911      	cbnz	r1, 801d65a <sbrk_aligned+0x12>
 801d654:	f000 fab0 	bl	801dbb8 <_sbrk_r>
 801d658:	6030      	str	r0, [r6, #0]
 801d65a:	4621      	mov	r1, r4
 801d65c:	4628      	mov	r0, r5
 801d65e:	f000 faab 	bl	801dbb8 <_sbrk_r>
 801d662:	1c43      	adds	r3, r0, #1
 801d664:	d00a      	beq.n	801d67c <sbrk_aligned+0x34>
 801d666:	1cc4      	adds	r4, r0, #3
 801d668:	f024 0403 	bic.w	r4, r4, #3
 801d66c:	42a0      	cmp	r0, r4
 801d66e:	d007      	beq.n	801d680 <sbrk_aligned+0x38>
 801d670:	1a21      	subs	r1, r4, r0
 801d672:	4628      	mov	r0, r5
 801d674:	f000 faa0 	bl	801dbb8 <_sbrk_r>
 801d678:	3001      	adds	r0, #1
 801d67a:	d101      	bne.n	801d680 <sbrk_aligned+0x38>
 801d67c:	f04f 34ff 	mov.w	r4, #4294967295
 801d680:	4620      	mov	r0, r4
 801d682:	bd70      	pop	{r4, r5, r6, pc}
 801d684:	20003930 	.word	0x20003930

0801d688 <_malloc_r>:
 801d688:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801d68c:	1ccd      	adds	r5, r1, #3
 801d68e:	4607      	mov	r7, r0
 801d690:	f025 0503 	bic.w	r5, r5, #3
 801d694:	3508      	adds	r5, #8
 801d696:	2d0c      	cmp	r5, #12
 801d698:	bf38      	it	cc
 801d69a:	250c      	movcc	r5, #12
 801d69c:	2d00      	cmp	r5, #0
 801d69e:	db01      	blt.n	801d6a4 <_malloc_r+0x1c>
 801d6a0:	42a9      	cmp	r1, r5
 801d6a2:	d905      	bls.n	801d6b0 <_malloc_r+0x28>
 801d6a4:	230c      	movs	r3, #12
 801d6a6:	2600      	movs	r6, #0
 801d6a8:	603b      	str	r3, [r7, #0]
 801d6aa:	4630      	mov	r0, r6
 801d6ac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801d6b0:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 801d784 <_malloc_r+0xfc>
 801d6b4:	f000 f868 	bl	801d788 <__malloc_lock>
 801d6b8:	f8d8 3000 	ldr.w	r3, [r8]
 801d6bc:	461c      	mov	r4, r3
 801d6be:	bb5c      	cbnz	r4, 801d718 <_malloc_r+0x90>
 801d6c0:	4629      	mov	r1, r5
 801d6c2:	4638      	mov	r0, r7
 801d6c4:	f7ff ffc0 	bl	801d648 <sbrk_aligned>
 801d6c8:	1c43      	adds	r3, r0, #1
 801d6ca:	4604      	mov	r4, r0
 801d6cc:	d155      	bne.n	801d77a <_malloc_r+0xf2>
 801d6ce:	f8d8 4000 	ldr.w	r4, [r8]
 801d6d2:	4626      	mov	r6, r4
 801d6d4:	2e00      	cmp	r6, #0
 801d6d6:	d145      	bne.n	801d764 <_malloc_r+0xdc>
 801d6d8:	2c00      	cmp	r4, #0
 801d6da:	d048      	beq.n	801d76e <_malloc_r+0xe6>
 801d6dc:	6823      	ldr	r3, [r4, #0]
 801d6de:	4631      	mov	r1, r6
 801d6e0:	4638      	mov	r0, r7
 801d6e2:	eb04 0903 	add.w	r9, r4, r3
 801d6e6:	f000 fa67 	bl	801dbb8 <_sbrk_r>
 801d6ea:	4581      	cmp	r9, r0
 801d6ec:	d13f      	bne.n	801d76e <_malloc_r+0xe6>
 801d6ee:	6821      	ldr	r1, [r4, #0]
 801d6f0:	4638      	mov	r0, r7
 801d6f2:	1a6d      	subs	r5, r5, r1
 801d6f4:	4629      	mov	r1, r5
 801d6f6:	f7ff ffa7 	bl	801d648 <sbrk_aligned>
 801d6fa:	3001      	adds	r0, #1
 801d6fc:	d037      	beq.n	801d76e <_malloc_r+0xe6>
 801d6fe:	6823      	ldr	r3, [r4, #0]
 801d700:	442b      	add	r3, r5
 801d702:	6023      	str	r3, [r4, #0]
 801d704:	f8d8 3000 	ldr.w	r3, [r8]
 801d708:	2b00      	cmp	r3, #0
 801d70a:	d038      	beq.n	801d77e <_malloc_r+0xf6>
 801d70c:	685a      	ldr	r2, [r3, #4]
 801d70e:	42a2      	cmp	r2, r4
 801d710:	d12b      	bne.n	801d76a <_malloc_r+0xe2>
 801d712:	2200      	movs	r2, #0
 801d714:	605a      	str	r2, [r3, #4]
 801d716:	e00f      	b.n	801d738 <_malloc_r+0xb0>
 801d718:	6822      	ldr	r2, [r4, #0]
 801d71a:	1b52      	subs	r2, r2, r5
 801d71c:	d41f      	bmi.n	801d75e <_malloc_r+0xd6>
 801d71e:	2a0b      	cmp	r2, #11
 801d720:	d917      	bls.n	801d752 <_malloc_r+0xca>
 801d722:	1961      	adds	r1, r4, r5
 801d724:	42a3      	cmp	r3, r4
 801d726:	6025      	str	r5, [r4, #0]
 801d728:	bf18      	it	ne
 801d72a:	6059      	strne	r1, [r3, #4]
 801d72c:	6863      	ldr	r3, [r4, #4]
 801d72e:	bf08      	it	eq
 801d730:	f8c8 1000 	streq.w	r1, [r8]
 801d734:	5162      	str	r2, [r4, r5]
 801d736:	604b      	str	r3, [r1, #4]
 801d738:	f104 060b 	add.w	r6, r4, #11
 801d73c:	4638      	mov	r0, r7
 801d73e:	f000 f829 	bl	801d794 <__malloc_unlock>
 801d742:	1d23      	adds	r3, r4, #4
 801d744:	f026 0607 	bic.w	r6, r6, #7
 801d748:	1af2      	subs	r2, r6, r3
 801d74a:	d0ae      	beq.n	801d6aa <_malloc_r+0x22>
 801d74c:	1b9b      	subs	r3, r3, r6
 801d74e:	50a3      	str	r3, [r4, r2]
 801d750:	e7ab      	b.n	801d6aa <_malloc_r+0x22>
 801d752:	42a3      	cmp	r3, r4
 801d754:	6862      	ldr	r2, [r4, #4]
 801d756:	d1dd      	bne.n	801d714 <_malloc_r+0x8c>
 801d758:	f8c8 2000 	str.w	r2, [r8]
 801d75c:	e7ec      	b.n	801d738 <_malloc_r+0xb0>
 801d75e:	4623      	mov	r3, r4
 801d760:	6864      	ldr	r4, [r4, #4]
 801d762:	e7ac      	b.n	801d6be <_malloc_r+0x36>
 801d764:	4634      	mov	r4, r6
 801d766:	6876      	ldr	r6, [r6, #4]
 801d768:	e7b4      	b.n	801d6d4 <_malloc_r+0x4c>
 801d76a:	4613      	mov	r3, r2
 801d76c:	e7cc      	b.n	801d708 <_malloc_r+0x80>
 801d76e:	230c      	movs	r3, #12
 801d770:	4638      	mov	r0, r7
 801d772:	603b      	str	r3, [r7, #0]
 801d774:	f000 f80e 	bl	801d794 <__malloc_unlock>
 801d778:	e797      	b.n	801d6aa <_malloc_r+0x22>
 801d77a:	6025      	str	r5, [r4, #0]
 801d77c:	e7dc      	b.n	801d738 <_malloc_r+0xb0>
 801d77e:	605b      	str	r3, [r3, #4]
 801d780:	deff      	udf	#255	; 0xff
 801d782:	bf00      	nop
 801d784:	2000392c 	.word	0x2000392c

0801d788 <__malloc_lock>:
 801d788:	4801      	ldr	r0, [pc, #4]	; (801d790 <__malloc_lock+0x8>)
 801d78a:	f000 ba62 	b.w	801dc52 <__retarget_lock_acquire_recursive>
 801d78e:	bf00      	nop
 801d790:	20003a74 	.word	0x20003a74

0801d794 <__malloc_unlock>:
 801d794:	4801      	ldr	r0, [pc, #4]	; (801d79c <__malloc_unlock+0x8>)
 801d796:	f000 ba5d 	b.w	801dc54 <__retarget_lock_release_recursive>
 801d79a:	bf00      	nop
 801d79c:	20003a74 	.word	0x20003a74

0801d7a0 <rand>:
 801d7a0:	4b16      	ldr	r3, [pc, #88]	; (801d7fc <rand+0x5c>)
 801d7a2:	b510      	push	{r4, lr}
 801d7a4:	681c      	ldr	r4, [r3, #0]
 801d7a6:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801d7a8:	b9b3      	cbnz	r3, 801d7d8 <rand+0x38>
 801d7aa:	2018      	movs	r0, #24
 801d7ac:	f7ff ff3c 	bl	801d628 <malloc>
 801d7b0:	4602      	mov	r2, r0
 801d7b2:	6320      	str	r0, [r4, #48]	; 0x30
 801d7b4:	b920      	cbnz	r0, 801d7c0 <rand+0x20>
 801d7b6:	4b12      	ldr	r3, [pc, #72]	; (801d800 <rand+0x60>)
 801d7b8:	2152      	movs	r1, #82	; 0x52
 801d7ba:	4812      	ldr	r0, [pc, #72]	; (801d804 <rand+0x64>)
 801d7bc:	f000 fa58 	bl	801dc70 <__assert_func>
 801d7c0:	4911      	ldr	r1, [pc, #68]	; (801d808 <rand+0x68>)
 801d7c2:	4b12      	ldr	r3, [pc, #72]	; (801d80c <rand+0x6c>)
 801d7c4:	e9c0 1300 	strd	r1, r3, [r0]
 801d7c8:	4b11      	ldr	r3, [pc, #68]	; (801d810 <rand+0x70>)
 801d7ca:	2100      	movs	r1, #0
 801d7cc:	6083      	str	r3, [r0, #8]
 801d7ce:	230b      	movs	r3, #11
 801d7d0:	8183      	strh	r3, [r0, #12]
 801d7d2:	2001      	movs	r0, #1
 801d7d4:	e9c2 0104 	strd	r0, r1, [r2, #16]
 801d7d8:	6b21      	ldr	r1, [r4, #48]	; 0x30
 801d7da:	480e      	ldr	r0, [pc, #56]	; (801d814 <rand+0x74>)
 801d7dc:	690b      	ldr	r3, [r1, #16]
 801d7de:	694c      	ldr	r4, [r1, #20]
 801d7e0:	4a0d      	ldr	r2, [pc, #52]	; (801d818 <rand+0x78>)
 801d7e2:	4358      	muls	r0, r3
 801d7e4:	fb02 0004 	mla	r0, r2, r4, r0
 801d7e8:	fba3 3202 	umull	r3, r2, r3, r2
 801d7ec:	3301      	adds	r3, #1
 801d7ee:	eb40 0002 	adc.w	r0, r0, r2
 801d7f2:	e9c1 3004 	strd	r3, r0, [r1, #16]
 801d7f6:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 801d7fa:	bd10      	pop	{r4, pc}
 801d7fc:	20000108 	.word	0x20000108
 801d800:	0801f710 	.word	0x0801f710
 801d804:	0801f727 	.word	0x0801f727
 801d808:	abcd330e 	.word	0xabcd330e
 801d80c:	e66d1234 	.word	0xe66d1234
 801d810:	0005deec 	.word	0x0005deec
 801d814:	5851f42d 	.word	0x5851f42d
 801d818:	4c957f2d 	.word	0x4c957f2d

0801d81c <std>:
 801d81c:	2300      	movs	r3, #0
 801d81e:	b510      	push	{r4, lr}
 801d820:	4604      	mov	r4, r0
 801d822:	6083      	str	r3, [r0, #8]
 801d824:	8181      	strh	r1, [r0, #12]
 801d826:	4619      	mov	r1, r3
 801d828:	6643      	str	r3, [r0, #100]	; 0x64
 801d82a:	81c2      	strh	r2, [r0, #14]
 801d82c:	2208      	movs	r2, #8
 801d82e:	6183      	str	r3, [r0, #24]
 801d830:	e9c0 3300 	strd	r3, r3, [r0]
 801d834:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801d838:	305c      	adds	r0, #92	; 0x5c
 801d83a:	f000 f93c 	bl	801dab6 <memset>
 801d83e:	4b0d      	ldr	r3, [pc, #52]	; (801d874 <std+0x58>)
 801d840:	6224      	str	r4, [r4, #32]
 801d842:	6263      	str	r3, [r4, #36]	; 0x24
 801d844:	4b0c      	ldr	r3, [pc, #48]	; (801d878 <std+0x5c>)
 801d846:	62a3      	str	r3, [r4, #40]	; 0x28
 801d848:	4b0c      	ldr	r3, [pc, #48]	; (801d87c <std+0x60>)
 801d84a:	62e3      	str	r3, [r4, #44]	; 0x2c
 801d84c:	4b0c      	ldr	r3, [pc, #48]	; (801d880 <std+0x64>)
 801d84e:	6323      	str	r3, [r4, #48]	; 0x30
 801d850:	4b0c      	ldr	r3, [pc, #48]	; (801d884 <std+0x68>)
 801d852:	429c      	cmp	r4, r3
 801d854:	d006      	beq.n	801d864 <std+0x48>
 801d856:	f103 0268 	add.w	r2, r3, #104	; 0x68
 801d85a:	4294      	cmp	r4, r2
 801d85c:	d002      	beq.n	801d864 <std+0x48>
 801d85e:	33d0      	adds	r3, #208	; 0xd0
 801d860:	429c      	cmp	r4, r3
 801d862:	d105      	bne.n	801d870 <std+0x54>
 801d864:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801d868:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801d86c:	f000 b9f0 	b.w	801dc50 <__retarget_lock_init_recursive>
 801d870:	bd10      	pop	{r4, pc}
 801d872:	bf00      	nop
 801d874:	0801d9f9 	.word	0x0801d9f9
 801d878:	0801da1f 	.word	0x0801da1f
 801d87c:	0801da57 	.word	0x0801da57
 801d880:	0801da7b 	.word	0x0801da7b
 801d884:	20003934 	.word	0x20003934

0801d888 <stdio_exit_handler>:
 801d888:	4a02      	ldr	r2, [pc, #8]	; (801d894 <stdio_exit_handler+0xc>)
 801d88a:	4903      	ldr	r1, [pc, #12]	; (801d898 <stdio_exit_handler+0x10>)
 801d88c:	4803      	ldr	r0, [pc, #12]	; (801d89c <stdio_exit_handler+0x14>)
 801d88e:	f000 b869 	b.w	801d964 <_fwalk_sglue>
 801d892:	bf00      	nop
 801d894:	200000b0 	.word	0x200000b0
 801d898:	0801e489 	.word	0x0801e489
 801d89c:	200000bc 	.word	0x200000bc

0801d8a0 <cleanup_stdio>:
 801d8a0:	6841      	ldr	r1, [r0, #4]
 801d8a2:	4b0c      	ldr	r3, [pc, #48]	; (801d8d4 <cleanup_stdio+0x34>)
 801d8a4:	4299      	cmp	r1, r3
 801d8a6:	b510      	push	{r4, lr}
 801d8a8:	4604      	mov	r4, r0
 801d8aa:	d001      	beq.n	801d8b0 <cleanup_stdio+0x10>
 801d8ac:	f000 fdec 	bl	801e488 <_fflush_r>
 801d8b0:	68a1      	ldr	r1, [r4, #8]
 801d8b2:	4b09      	ldr	r3, [pc, #36]	; (801d8d8 <cleanup_stdio+0x38>)
 801d8b4:	4299      	cmp	r1, r3
 801d8b6:	d002      	beq.n	801d8be <cleanup_stdio+0x1e>
 801d8b8:	4620      	mov	r0, r4
 801d8ba:	f000 fde5 	bl	801e488 <_fflush_r>
 801d8be:	68e1      	ldr	r1, [r4, #12]
 801d8c0:	4b06      	ldr	r3, [pc, #24]	; (801d8dc <cleanup_stdio+0x3c>)
 801d8c2:	4299      	cmp	r1, r3
 801d8c4:	d004      	beq.n	801d8d0 <cleanup_stdio+0x30>
 801d8c6:	4620      	mov	r0, r4
 801d8c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801d8cc:	f000 bddc 	b.w	801e488 <_fflush_r>
 801d8d0:	bd10      	pop	{r4, pc}
 801d8d2:	bf00      	nop
 801d8d4:	20003934 	.word	0x20003934
 801d8d8:	2000399c 	.word	0x2000399c
 801d8dc:	20003a04 	.word	0x20003a04

0801d8e0 <global_stdio_init.part.0>:
 801d8e0:	b510      	push	{r4, lr}
 801d8e2:	4b0b      	ldr	r3, [pc, #44]	; (801d910 <global_stdio_init.part.0+0x30>)
 801d8e4:	2104      	movs	r1, #4
 801d8e6:	4c0b      	ldr	r4, [pc, #44]	; (801d914 <global_stdio_init.part.0+0x34>)
 801d8e8:	4a0b      	ldr	r2, [pc, #44]	; (801d918 <global_stdio_init.part.0+0x38>)
 801d8ea:	4620      	mov	r0, r4
 801d8ec:	601a      	str	r2, [r3, #0]
 801d8ee:	2200      	movs	r2, #0
 801d8f0:	f7ff ff94 	bl	801d81c <std>
 801d8f4:	f104 0068 	add.w	r0, r4, #104	; 0x68
 801d8f8:	2201      	movs	r2, #1
 801d8fa:	2109      	movs	r1, #9
 801d8fc:	f7ff ff8e 	bl	801d81c <std>
 801d900:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 801d904:	2202      	movs	r2, #2
 801d906:	2112      	movs	r1, #18
 801d908:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801d90c:	f7ff bf86 	b.w	801d81c <std>
 801d910:	20003a6c 	.word	0x20003a6c
 801d914:	20003934 	.word	0x20003934
 801d918:	0801d889 	.word	0x0801d889

0801d91c <__sfp_lock_acquire>:
 801d91c:	4801      	ldr	r0, [pc, #4]	; (801d924 <__sfp_lock_acquire+0x8>)
 801d91e:	f000 b998 	b.w	801dc52 <__retarget_lock_acquire_recursive>
 801d922:	bf00      	nop
 801d924:	20003a75 	.word	0x20003a75

0801d928 <__sfp_lock_release>:
 801d928:	4801      	ldr	r0, [pc, #4]	; (801d930 <__sfp_lock_release+0x8>)
 801d92a:	f000 b993 	b.w	801dc54 <__retarget_lock_release_recursive>
 801d92e:	bf00      	nop
 801d930:	20003a75 	.word	0x20003a75

0801d934 <__sinit>:
 801d934:	b510      	push	{r4, lr}
 801d936:	4604      	mov	r4, r0
 801d938:	f7ff fff0 	bl	801d91c <__sfp_lock_acquire>
 801d93c:	6a23      	ldr	r3, [r4, #32]
 801d93e:	b11b      	cbz	r3, 801d948 <__sinit+0x14>
 801d940:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801d944:	f7ff bff0 	b.w	801d928 <__sfp_lock_release>
 801d948:	4b04      	ldr	r3, [pc, #16]	; (801d95c <__sinit+0x28>)
 801d94a:	6223      	str	r3, [r4, #32]
 801d94c:	4b04      	ldr	r3, [pc, #16]	; (801d960 <__sinit+0x2c>)
 801d94e:	681b      	ldr	r3, [r3, #0]
 801d950:	2b00      	cmp	r3, #0
 801d952:	d1f5      	bne.n	801d940 <__sinit+0xc>
 801d954:	f7ff ffc4 	bl	801d8e0 <global_stdio_init.part.0>
 801d958:	e7f2      	b.n	801d940 <__sinit+0xc>
 801d95a:	bf00      	nop
 801d95c:	0801d8a1 	.word	0x0801d8a1
 801d960:	20003a6c 	.word	0x20003a6c

0801d964 <_fwalk_sglue>:
 801d964:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801d968:	4607      	mov	r7, r0
 801d96a:	4688      	mov	r8, r1
 801d96c:	4614      	mov	r4, r2
 801d96e:	2600      	movs	r6, #0
 801d970:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801d974:	f1b9 0901 	subs.w	r9, r9, #1
 801d978:	d505      	bpl.n	801d986 <_fwalk_sglue+0x22>
 801d97a:	6824      	ldr	r4, [r4, #0]
 801d97c:	2c00      	cmp	r4, #0
 801d97e:	d1f7      	bne.n	801d970 <_fwalk_sglue+0xc>
 801d980:	4630      	mov	r0, r6
 801d982:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801d986:	89ab      	ldrh	r3, [r5, #12]
 801d988:	2b01      	cmp	r3, #1
 801d98a:	d907      	bls.n	801d99c <_fwalk_sglue+0x38>
 801d98c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801d990:	3301      	adds	r3, #1
 801d992:	d003      	beq.n	801d99c <_fwalk_sglue+0x38>
 801d994:	4629      	mov	r1, r5
 801d996:	4638      	mov	r0, r7
 801d998:	47c0      	blx	r8
 801d99a:	4306      	orrs	r6, r0
 801d99c:	3568      	adds	r5, #104	; 0x68
 801d99e:	e7e9      	b.n	801d974 <_fwalk_sglue+0x10>

0801d9a0 <siscanf>:
 801d9a0:	b40e      	push	{r1, r2, r3}
 801d9a2:	b510      	push	{r4, lr}
 801d9a4:	b09f      	sub	sp, #124	; 0x7c
 801d9a6:	f44f 7101 	mov.w	r1, #516	; 0x204
 801d9aa:	ac21      	add	r4, sp, #132	; 0x84
 801d9ac:	f8ad 101c 	strh.w	r1, [sp, #28]
 801d9b0:	9004      	str	r0, [sp, #16]
 801d9b2:	f854 2b04 	ldr.w	r2, [r4], #4
 801d9b6:	9008      	str	r0, [sp, #32]
 801d9b8:	9201      	str	r2, [sp, #4]
 801d9ba:	f7e2 fc4b 	bl	8000254 <strlen>
 801d9be:	4b0c      	ldr	r3, [pc, #48]	; (801d9f0 <siscanf+0x50>)
 801d9c0:	a904      	add	r1, sp, #16
 801d9c2:	9005      	str	r0, [sp, #20]
 801d9c4:	930d      	str	r3, [sp, #52]	; 0x34
 801d9c6:	2300      	movs	r3, #0
 801d9c8:	9009      	str	r0, [sp, #36]	; 0x24
 801d9ca:	9311      	str	r3, [sp, #68]	; 0x44
 801d9cc:	9316      	str	r3, [sp, #88]	; 0x58
 801d9ce:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801d9d2:	4808      	ldr	r0, [pc, #32]	; (801d9f4 <siscanf+0x54>)
 801d9d4:	f8ad 301e 	strh.w	r3, [sp, #30]
 801d9d8:	4623      	mov	r3, r4
 801d9da:	9a01      	ldr	r2, [sp, #4]
 801d9dc:	6800      	ldr	r0, [r0, #0]
 801d9de:	9403      	str	r4, [sp, #12]
 801d9e0:	f000 fa0a 	bl	801ddf8 <__ssvfiscanf_r>
 801d9e4:	b01f      	add	sp, #124	; 0x7c
 801d9e6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801d9ea:	b003      	add	sp, #12
 801d9ec:	4770      	bx	lr
 801d9ee:	bf00      	nop
 801d9f0:	0801da1b 	.word	0x0801da1b
 801d9f4:	20000108 	.word	0x20000108

0801d9f8 <__sread>:
 801d9f8:	b510      	push	{r4, lr}
 801d9fa:	460c      	mov	r4, r1
 801d9fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801da00:	f000 f8b4 	bl	801db6c <_read_r>
 801da04:	2800      	cmp	r0, #0
 801da06:	bfab      	itete	ge
 801da08:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801da0a:	89a3      	ldrhlt	r3, [r4, #12]
 801da0c:	181b      	addge	r3, r3, r0
 801da0e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801da12:	bfac      	ite	ge
 801da14:	6563      	strge	r3, [r4, #84]	; 0x54
 801da16:	81a3      	strhlt	r3, [r4, #12]
 801da18:	bd10      	pop	{r4, pc}

0801da1a <__seofread>:
 801da1a:	2000      	movs	r0, #0
 801da1c:	4770      	bx	lr

0801da1e <__swrite>:
 801da1e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801da22:	461f      	mov	r7, r3
 801da24:	898b      	ldrh	r3, [r1, #12]
 801da26:	4605      	mov	r5, r0
 801da28:	460c      	mov	r4, r1
 801da2a:	05db      	lsls	r3, r3, #23
 801da2c:	4616      	mov	r6, r2
 801da2e:	d505      	bpl.n	801da3c <__swrite+0x1e>
 801da30:	2302      	movs	r3, #2
 801da32:	2200      	movs	r2, #0
 801da34:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801da38:	f000 f886 	bl	801db48 <_lseek_r>
 801da3c:	89a3      	ldrh	r3, [r4, #12]
 801da3e:	4632      	mov	r2, r6
 801da40:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801da44:	4628      	mov	r0, r5
 801da46:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801da4a:	81a3      	strh	r3, [r4, #12]
 801da4c:	463b      	mov	r3, r7
 801da4e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801da52:	f000 b8c1 	b.w	801dbd8 <_write_r>

0801da56 <__sseek>:
 801da56:	b510      	push	{r4, lr}
 801da58:	460c      	mov	r4, r1
 801da5a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801da5e:	f000 f873 	bl	801db48 <_lseek_r>
 801da62:	1c43      	adds	r3, r0, #1
 801da64:	89a3      	ldrh	r3, [r4, #12]
 801da66:	bf15      	itete	ne
 801da68:	6560      	strne	r0, [r4, #84]	; 0x54
 801da6a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801da6e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801da72:	81a3      	strheq	r3, [r4, #12]
 801da74:	bf18      	it	ne
 801da76:	81a3      	strhne	r3, [r4, #12]
 801da78:	bd10      	pop	{r4, pc}

0801da7a <__sclose>:
 801da7a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801da7e:	f000 b853 	b.w	801db28 <_close_r>

0801da82 <memmove>:
 801da82:	4288      	cmp	r0, r1
 801da84:	b510      	push	{r4, lr}
 801da86:	eb01 0402 	add.w	r4, r1, r2
 801da8a:	d902      	bls.n	801da92 <memmove+0x10>
 801da8c:	4284      	cmp	r4, r0
 801da8e:	4623      	mov	r3, r4
 801da90:	d807      	bhi.n	801daa2 <memmove+0x20>
 801da92:	1e43      	subs	r3, r0, #1
 801da94:	42a1      	cmp	r1, r4
 801da96:	d008      	beq.n	801daaa <memmove+0x28>
 801da98:	f811 2b01 	ldrb.w	r2, [r1], #1
 801da9c:	f803 2f01 	strb.w	r2, [r3, #1]!
 801daa0:	e7f8      	b.n	801da94 <memmove+0x12>
 801daa2:	4402      	add	r2, r0
 801daa4:	4601      	mov	r1, r0
 801daa6:	428a      	cmp	r2, r1
 801daa8:	d100      	bne.n	801daac <memmove+0x2a>
 801daaa:	bd10      	pop	{r4, pc}
 801daac:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801dab0:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801dab4:	e7f7      	b.n	801daa6 <memmove+0x24>

0801dab6 <memset>:
 801dab6:	4402      	add	r2, r0
 801dab8:	4603      	mov	r3, r0
 801daba:	4293      	cmp	r3, r2
 801dabc:	d100      	bne.n	801dac0 <memset+0xa>
 801dabe:	4770      	bx	lr
 801dac0:	f803 1b01 	strb.w	r1, [r3], #1
 801dac4:	e7f9      	b.n	801daba <memset+0x4>

0801dac6 <_raise_r>:
 801dac6:	291f      	cmp	r1, #31
 801dac8:	b538      	push	{r3, r4, r5, lr}
 801daca:	4604      	mov	r4, r0
 801dacc:	460d      	mov	r5, r1
 801dace:	d904      	bls.n	801dada <_raise_r+0x14>
 801dad0:	2316      	movs	r3, #22
 801dad2:	6003      	str	r3, [r0, #0]
 801dad4:	f04f 30ff 	mov.w	r0, #4294967295
 801dad8:	bd38      	pop	{r3, r4, r5, pc}
 801dada:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 801dadc:	b112      	cbz	r2, 801dae4 <_raise_r+0x1e>
 801dade:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801dae2:	b94b      	cbnz	r3, 801daf8 <_raise_r+0x32>
 801dae4:	4620      	mov	r0, r4
 801dae6:	f000 f865 	bl	801dbb4 <_getpid_r>
 801daea:	462a      	mov	r2, r5
 801daec:	4601      	mov	r1, r0
 801daee:	4620      	mov	r0, r4
 801daf0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801daf4:	f000 b84c 	b.w	801db90 <_kill_r>
 801daf8:	2b01      	cmp	r3, #1
 801dafa:	d00a      	beq.n	801db12 <_raise_r+0x4c>
 801dafc:	1c59      	adds	r1, r3, #1
 801dafe:	d103      	bne.n	801db08 <_raise_r+0x42>
 801db00:	2316      	movs	r3, #22
 801db02:	6003      	str	r3, [r0, #0]
 801db04:	2001      	movs	r0, #1
 801db06:	e7e7      	b.n	801dad8 <_raise_r+0x12>
 801db08:	2400      	movs	r4, #0
 801db0a:	4628      	mov	r0, r5
 801db0c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801db10:	4798      	blx	r3
 801db12:	2000      	movs	r0, #0
 801db14:	e7e0      	b.n	801dad8 <_raise_r+0x12>
	...

0801db18 <raise>:
 801db18:	4b02      	ldr	r3, [pc, #8]	; (801db24 <raise+0xc>)
 801db1a:	4601      	mov	r1, r0
 801db1c:	6818      	ldr	r0, [r3, #0]
 801db1e:	f7ff bfd2 	b.w	801dac6 <_raise_r>
 801db22:	bf00      	nop
 801db24:	20000108 	.word	0x20000108

0801db28 <_close_r>:
 801db28:	b538      	push	{r3, r4, r5, lr}
 801db2a:	2300      	movs	r3, #0
 801db2c:	4d05      	ldr	r5, [pc, #20]	; (801db44 <_close_r+0x1c>)
 801db2e:	4604      	mov	r4, r0
 801db30:	4608      	mov	r0, r1
 801db32:	602b      	str	r3, [r5, #0]
 801db34:	f7f0 fdfd 	bl	800e732 <_close>
 801db38:	1c43      	adds	r3, r0, #1
 801db3a:	d102      	bne.n	801db42 <_close_r+0x1a>
 801db3c:	682b      	ldr	r3, [r5, #0]
 801db3e:	b103      	cbz	r3, 801db42 <_close_r+0x1a>
 801db40:	6023      	str	r3, [r4, #0]
 801db42:	bd38      	pop	{r3, r4, r5, pc}
 801db44:	20003a70 	.word	0x20003a70

0801db48 <_lseek_r>:
 801db48:	b538      	push	{r3, r4, r5, lr}
 801db4a:	4604      	mov	r4, r0
 801db4c:	4d06      	ldr	r5, [pc, #24]	; (801db68 <_lseek_r+0x20>)
 801db4e:	4608      	mov	r0, r1
 801db50:	4611      	mov	r1, r2
 801db52:	2200      	movs	r2, #0
 801db54:	602a      	str	r2, [r5, #0]
 801db56:	461a      	mov	r2, r3
 801db58:	f7f0 fe12 	bl	800e780 <_lseek>
 801db5c:	1c43      	adds	r3, r0, #1
 801db5e:	d102      	bne.n	801db66 <_lseek_r+0x1e>
 801db60:	682b      	ldr	r3, [r5, #0]
 801db62:	b103      	cbz	r3, 801db66 <_lseek_r+0x1e>
 801db64:	6023      	str	r3, [r4, #0]
 801db66:	bd38      	pop	{r3, r4, r5, pc}
 801db68:	20003a70 	.word	0x20003a70

0801db6c <_read_r>:
 801db6c:	b538      	push	{r3, r4, r5, lr}
 801db6e:	4604      	mov	r4, r0
 801db70:	4d06      	ldr	r5, [pc, #24]	; (801db8c <_read_r+0x20>)
 801db72:	4608      	mov	r0, r1
 801db74:	4611      	mov	r1, r2
 801db76:	2200      	movs	r2, #0
 801db78:	602a      	str	r2, [r5, #0]
 801db7a:	461a      	mov	r2, r3
 801db7c:	f7f0 fda0 	bl	800e6c0 <_read>
 801db80:	1c43      	adds	r3, r0, #1
 801db82:	d102      	bne.n	801db8a <_read_r+0x1e>
 801db84:	682b      	ldr	r3, [r5, #0]
 801db86:	b103      	cbz	r3, 801db8a <_read_r+0x1e>
 801db88:	6023      	str	r3, [r4, #0]
 801db8a:	bd38      	pop	{r3, r4, r5, pc}
 801db8c:	20003a70 	.word	0x20003a70

0801db90 <_kill_r>:
 801db90:	b538      	push	{r3, r4, r5, lr}
 801db92:	2300      	movs	r3, #0
 801db94:	4d06      	ldr	r5, [pc, #24]	; (801dbb0 <_kill_r+0x20>)
 801db96:	4604      	mov	r4, r0
 801db98:	4608      	mov	r0, r1
 801db9a:	4611      	mov	r1, r2
 801db9c:	602b      	str	r3, [r5, #0]
 801db9e:	f7f0 fd75 	bl	800e68c <_kill>
 801dba2:	1c43      	adds	r3, r0, #1
 801dba4:	d102      	bne.n	801dbac <_kill_r+0x1c>
 801dba6:	682b      	ldr	r3, [r5, #0]
 801dba8:	b103      	cbz	r3, 801dbac <_kill_r+0x1c>
 801dbaa:	6023      	str	r3, [r4, #0]
 801dbac:	bd38      	pop	{r3, r4, r5, pc}
 801dbae:	bf00      	nop
 801dbb0:	20003a70 	.word	0x20003a70

0801dbb4 <_getpid_r>:
 801dbb4:	f7f0 bd62 	b.w	800e67c <_getpid>

0801dbb8 <_sbrk_r>:
 801dbb8:	b538      	push	{r3, r4, r5, lr}
 801dbba:	2300      	movs	r3, #0
 801dbbc:	4d05      	ldr	r5, [pc, #20]	; (801dbd4 <_sbrk_r+0x1c>)
 801dbbe:	4604      	mov	r4, r0
 801dbc0:	4608      	mov	r0, r1
 801dbc2:	602b      	str	r3, [r5, #0]
 801dbc4:	f7f0 fdea 	bl	800e79c <_sbrk>
 801dbc8:	1c43      	adds	r3, r0, #1
 801dbca:	d102      	bne.n	801dbd2 <_sbrk_r+0x1a>
 801dbcc:	682b      	ldr	r3, [r5, #0]
 801dbce:	b103      	cbz	r3, 801dbd2 <_sbrk_r+0x1a>
 801dbd0:	6023      	str	r3, [r4, #0]
 801dbd2:	bd38      	pop	{r3, r4, r5, pc}
 801dbd4:	20003a70 	.word	0x20003a70

0801dbd8 <_write_r>:
 801dbd8:	b538      	push	{r3, r4, r5, lr}
 801dbda:	4604      	mov	r4, r0
 801dbdc:	4d06      	ldr	r5, [pc, #24]	; (801dbf8 <_write_r+0x20>)
 801dbde:	4608      	mov	r0, r1
 801dbe0:	4611      	mov	r1, r2
 801dbe2:	2200      	movs	r2, #0
 801dbe4:	602a      	str	r2, [r5, #0]
 801dbe6:	461a      	mov	r2, r3
 801dbe8:	f7f0 fd87 	bl	800e6fa <_write>
 801dbec:	1c43      	adds	r3, r0, #1
 801dbee:	d102      	bne.n	801dbf6 <_write_r+0x1e>
 801dbf0:	682b      	ldr	r3, [r5, #0]
 801dbf2:	b103      	cbz	r3, 801dbf6 <_write_r+0x1e>
 801dbf4:	6023      	str	r3, [r4, #0]
 801dbf6:	bd38      	pop	{r3, r4, r5, pc}
 801dbf8:	20003a70 	.word	0x20003a70

0801dbfc <__errno>:
 801dbfc:	4b01      	ldr	r3, [pc, #4]	; (801dc04 <__errno+0x8>)
 801dbfe:	6818      	ldr	r0, [r3, #0]
 801dc00:	4770      	bx	lr
 801dc02:	bf00      	nop
 801dc04:	20000108 	.word	0x20000108

0801dc08 <__libc_init_array>:
 801dc08:	b570      	push	{r4, r5, r6, lr}
 801dc0a:	4d0d      	ldr	r5, [pc, #52]	; (801dc40 <__libc_init_array+0x38>)
 801dc0c:	2600      	movs	r6, #0
 801dc0e:	4c0d      	ldr	r4, [pc, #52]	; (801dc44 <__libc_init_array+0x3c>)
 801dc10:	1b64      	subs	r4, r4, r5
 801dc12:	10a4      	asrs	r4, r4, #2
 801dc14:	42a6      	cmp	r6, r4
 801dc16:	d109      	bne.n	801dc2c <__libc_init_array+0x24>
 801dc18:	4d0b      	ldr	r5, [pc, #44]	; (801dc48 <__libc_init_array+0x40>)
 801dc1a:	2600      	movs	r6, #0
 801dc1c:	4c0b      	ldr	r4, [pc, #44]	; (801dc4c <__libc_init_array+0x44>)
 801dc1e:	f001 fa0b 	bl	801f038 <_init>
 801dc22:	1b64      	subs	r4, r4, r5
 801dc24:	10a4      	asrs	r4, r4, #2
 801dc26:	42a6      	cmp	r6, r4
 801dc28:	d105      	bne.n	801dc36 <__libc_init_array+0x2e>
 801dc2a:	bd70      	pop	{r4, r5, r6, pc}
 801dc2c:	f855 3b04 	ldr.w	r3, [r5], #4
 801dc30:	3601      	adds	r6, #1
 801dc32:	4798      	blx	r3
 801dc34:	e7ee      	b.n	801dc14 <__libc_init_array+0xc>
 801dc36:	f855 3b04 	ldr.w	r3, [r5], #4
 801dc3a:	3601      	adds	r6, #1
 801dc3c:	4798      	blx	r3
 801dc3e:	e7f2      	b.n	801dc26 <__libc_init_array+0x1e>
 801dc40:	0801f914 	.word	0x0801f914
 801dc44:	0801f914 	.word	0x0801f914
 801dc48:	0801f914 	.word	0x0801f914
 801dc4c:	0801f918 	.word	0x0801f918

0801dc50 <__retarget_lock_init_recursive>:
 801dc50:	4770      	bx	lr

0801dc52 <__retarget_lock_acquire_recursive>:
 801dc52:	4770      	bx	lr

0801dc54 <__retarget_lock_release_recursive>:
 801dc54:	4770      	bx	lr

0801dc56 <memcpy>:
 801dc56:	440a      	add	r2, r1
 801dc58:	1e43      	subs	r3, r0, #1
 801dc5a:	4291      	cmp	r1, r2
 801dc5c:	d100      	bne.n	801dc60 <memcpy+0xa>
 801dc5e:	4770      	bx	lr
 801dc60:	b510      	push	{r4, lr}
 801dc62:	f811 4b01 	ldrb.w	r4, [r1], #1
 801dc66:	4291      	cmp	r1, r2
 801dc68:	f803 4f01 	strb.w	r4, [r3, #1]!
 801dc6c:	d1f9      	bne.n	801dc62 <memcpy+0xc>
 801dc6e:	bd10      	pop	{r4, pc}

0801dc70 <__assert_func>:
 801dc70:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801dc72:	4614      	mov	r4, r2
 801dc74:	461a      	mov	r2, r3
 801dc76:	4b09      	ldr	r3, [pc, #36]	; (801dc9c <__assert_func+0x2c>)
 801dc78:	4605      	mov	r5, r0
 801dc7a:	681b      	ldr	r3, [r3, #0]
 801dc7c:	68d8      	ldr	r0, [r3, #12]
 801dc7e:	b14c      	cbz	r4, 801dc94 <__assert_func+0x24>
 801dc80:	4b07      	ldr	r3, [pc, #28]	; (801dca0 <__assert_func+0x30>)
 801dc82:	9100      	str	r1, [sp, #0]
 801dc84:	4907      	ldr	r1, [pc, #28]	; (801dca4 <__assert_func+0x34>)
 801dc86:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801dc8a:	462b      	mov	r3, r5
 801dc8c:	f000 fc24 	bl	801e4d8 <fiprintf>
 801dc90:	f7ff fcc3 	bl	801d61a <abort>
 801dc94:	4b04      	ldr	r3, [pc, #16]	; (801dca8 <__assert_func+0x38>)
 801dc96:	461c      	mov	r4, r3
 801dc98:	e7f3      	b.n	801dc82 <__assert_func+0x12>
 801dc9a:	bf00      	nop
 801dc9c:	20000108 	.word	0x20000108
 801dca0:	0801f77f 	.word	0x0801f77f
 801dca4:	0801f78c 	.word	0x0801f78c
 801dca8:	0801f7ba 	.word	0x0801f7ba

0801dcac <_free_r>:
 801dcac:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801dcae:	2900      	cmp	r1, #0
 801dcb0:	d043      	beq.n	801dd3a <_free_r+0x8e>
 801dcb2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801dcb6:	1f0c      	subs	r4, r1, #4
 801dcb8:	9001      	str	r0, [sp, #4]
 801dcba:	2b00      	cmp	r3, #0
 801dcbc:	bfb8      	it	lt
 801dcbe:	18e4      	addlt	r4, r4, r3
 801dcc0:	f7ff fd62 	bl	801d788 <__malloc_lock>
 801dcc4:	4a1e      	ldr	r2, [pc, #120]	; (801dd40 <_free_r+0x94>)
 801dcc6:	9801      	ldr	r0, [sp, #4]
 801dcc8:	6813      	ldr	r3, [r2, #0]
 801dcca:	b933      	cbnz	r3, 801dcda <_free_r+0x2e>
 801dccc:	6063      	str	r3, [r4, #4]
 801dcce:	6014      	str	r4, [r2, #0]
 801dcd0:	b003      	add	sp, #12
 801dcd2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801dcd6:	f7ff bd5d 	b.w	801d794 <__malloc_unlock>
 801dcda:	42a3      	cmp	r3, r4
 801dcdc:	d908      	bls.n	801dcf0 <_free_r+0x44>
 801dcde:	6825      	ldr	r5, [r4, #0]
 801dce0:	1961      	adds	r1, r4, r5
 801dce2:	428b      	cmp	r3, r1
 801dce4:	bf01      	itttt	eq
 801dce6:	6819      	ldreq	r1, [r3, #0]
 801dce8:	685b      	ldreq	r3, [r3, #4]
 801dcea:	1949      	addeq	r1, r1, r5
 801dcec:	6021      	streq	r1, [r4, #0]
 801dcee:	e7ed      	b.n	801dccc <_free_r+0x20>
 801dcf0:	461a      	mov	r2, r3
 801dcf2:	685b      	ldr	r3, [r3, #4]
 801dcf4:	b10b      	cbz	r3, 801dcfa <_free_r+0x4e>
 801dcf6:	42a3      	cmp	r3, r4
 801dcf8:	d9fa      	bls.n	801dcf0 <_free_r+0x44>
 801dcfa:	6811      	ldr	r1, [r2, #0]
 801dcfc:	1855      	adds	r5, r2, r1
 801dcfe:	42a5      	cmp	r5, r4
 801dd00:	d10b      	bne.n	801dd1a <_free_r+0x6e>
 801dd02:	6824      	ldr	r4, [r4, #0]
 801dd04:	4421      	add	r1, r4
 801dd06:	1854      	adds	r4, r2, r1
 801dd08:	6011      	str	r1, [r2, #0]
 801dd0a:	42a3      	cmp	r3, r4
 801dd0c:	d1e0      	bne.n	801dcd0 <_free_r+0x24>
 801dd0e:	681c      	ldr	r4, [r3, #0]
 801dd10:	685b      	ldr	r3, [r3, #4]
 801dd12:	440c      	add	r4, r1
 801dd14:	6053      	str	r3, [r2, #4]
 801dd16:	6014      	str	r4, [r2, #0]
 801dd18:	e7da      	b.n	801dcd0 <_free_r+0x24>
 801dd1a:	d902      	bls.n	801dd22 <_free_r+0x76>
 801dd1c:	230c      	movs	r3, #12
 801dd1e:	6003      	str	r3, [r0, #0]
 801dd20:	e7d6      	b.n	801dcd0 <_free_r+0x24>
 801dd22:	6825      	ldr	r5, [r4, #0]
 801dd24:	1961      	adds	r1, r4, r5
 801dd26:	428b      	cmp	r3, r1
 801dd28:	bf02      	ittt	eq
 801dd2a:	6819      	ldreq	r1, [r3, #0]
 801dd2c:	685b      	ldreq	r3, [r3, #4]
 801dd2e:	1949      	addeq	r1, r1, r5
 801dd30:	6063      	str	r3, [r4, #4]
 801dd32:	bf08      	it	eq
 801dd34:	6021      	streq	r1, [r4, #0]
 801dd36:	6054      	str	r4, [r2, #4]
 801dd38:	e7ca      	b.n	801dcd0 <_free_r+0x24>
 801dd3a:	b003      	add	sp, #12
 801dd3c:	bd30      	pop	{r4, r5, pc}
 801dd3e:	bf00      	nop
 801dd40:	2000392c 	.word	0x2000392c

0801dd44 <_sungetc_r>:
 801dd44:	b538      	push	{r3, r4, r5, lr}
 801dd46:	1c4b      	adds	r3, r1, #1
 801dd48:	4614      	mov	r4, r2
 801dd4a:	d103      	bne.n	801dd54 <_sungetc_r+0x10>
 801dd4c:	f04f 35ff 	mov.w	r5, #4294967295
 801dd50:	4628      	mov	r0, r5
 801dd52:	bd38      	pop	{r3, r4, r5, pc}
 801dd54:	8993      	ldrh	r3, [r2, #12]
 801dd56:	b2cd      	uxtb	r5, r1
 801dd58:	f023 0320 	bic.w	r3, r3, #32
 801dd5c:	8193      	strh	r3, [r2, #12]
 801dd5e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801dd60:	6852      	ldr	r2, [r2, #4]
 801dd62:	b18b      	cbz	r3, 801dd88 <_sungetc_r+0x44>
 801dd64:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801dd66:	4293      	cmp	r3, r2
 801dd68:	dd08      	ble.n	801dd7c <_sungetc_r+0x38>
 801dd6a:	6823      	ldr	r3, [r4, #0]
 801dd6c:	1e5a      	subs	r2, r3, #1
 801dd6e:	6022      	str	r2, [r4, #0]
 801dd70:	f803 5c01 	strb.w	r5, [r3, #-1]
 801dd74:	6863      	ldr	r3, [r4, #4]
 801dd76:	3301      	adds	r3, #1
 801dd78:	6063      	str	r3, [r4, #4]
 801dd7a:	e7e9      	b.n	801dd50 <_sungetc_r+0xc>
 801dd7c:	4621      	mov	r1, r4
 801dd7e:	f000 fbf6 	bl	801e56e <__submore>
 801dd82:	2800      	cmp	r0, #0
 801dd84:	d0f1      	beq.n	801dd6a <_sungetc_r+0x26>
 801dd86:	e7e1      	b.n	801dd4c <_sungetc_r+0x8>
 801dd88:	6921      	ldr	r1, [r4, #16]
 801dd8a:	6823      	ldr	r3, [r4, #0]
 801dd8c:	b151      	cbz	r1, 801dda4 <_sungetc_r+0x60>
 801dd8e:	4299      	cmp	r1, r3
 801dd90:	d208      	bcs.n	801dda4 <_sungetc_r+0x60>
 801dd92:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 801dd96:	42a9      	cmp	r1, r5
 801dd98:	d104      	bne.n	801dda4 <_sungetc_r+0x60>
 801dd9a:	3b01      	subs	r3, #1
 801dd9c:	3201      	adds	r2, #1
 801dd9e:	6023      	str	r3, [r4, #0]
 801dda0:	6062      	str	r2, [r4, #4]
 801dda2:	e7d5      	b.n	801dd50 <_sungetc_r+0xc>
 801dda4:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 801dda8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801ddac:	6363      	str	r3, [r4, #52]	; 0x34
 801ddae:	2303      	movs	r3, #3
 801ddb0:	63a3      	str	r3, [r4, #56]	; 0x38
 801ddb2:	4623      	mov	r3, r4
 801ddb4:	f803 5f46 	strb.w	r5, [r3, #70]!
 801ddb8:	6023      	str	r3, [r4, #0]
 801ddba:	2301      	movs	r3, #1
 801ddbc:	e7dc      	b.n	801dd78 <_sungetc_r+0x34>

0801ddbe <__ssrefill_r>:
 801ddbe:	b510      	push	{r4, lr}
 801ddc0:	460c      	mov	r4, r1
 801ddc2:	6b49      	ldr	r1, [r1, #52]	; 0x34
 801ddc4:	b169      	cbz	r1, 801dde2 <__ssrefill_r+0x24>
 801ddc6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801ddca:	4299      	cmp	r1, r3
 801ddcc:	d001      	beq.n	801ddd2 <__ssrefill_r+0x14>
 801ddce:	f7ff ff6d 	bl	801dcac <_free_r>
 801ddd2:	2000      	movs	r0, #0
 801ddd4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801ddd6:	6360      	str	r0, [r4, #52]	; 0x34
 801ddd8:	6063      	str	r3, [r4, #4]
 801ddda:	b113      	cbz	r3, 801dde2 <__ssrefill_r+0x24>
 801dddc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 801ddde:	6023      	str	r3, [r4, #0]
 801dde0:	bd10      	pop	{r4, pc}
 801dde2:	6923      	ldr	r3, [r4, #16]
 801dde4:	f04f 30ff 	mov.w	r0, #4294967295
 801dde8:	6023      	str	r3, [r4, #0]
 801ddea:	2300      	movs	r3, #0
 801ddec:	6063      	str	r3, [r4, #4]
 801ddee:	89a3      	ldrh	r3, [r4, #12]
 801ddf0:	f043 0320 	orr.w	r3, r3, #32
 801ddf4:	81a3      	strh	r3, [r4, #12]
 801ddf6:	e7f3      	b.n	801dde0 <__ssrefill_r+0x22>

0801ddf8 <__ssvfiscanf_r>:
 801ddf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801ddfc:	460c      	mov	r4, r1
 801ddfe:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 801de02:	2100      	movs	r1, #0
 801de04:	4606      	mov	r6, r0
 801de06:	f10d 0804 	add.w	r8, sp, #4
 801de0a:	4fa6      	ldr	r7, [pc, #664]	; (801e0a4 <__ssvfiscanf_r+0x2ac>)
 801de0c:	f8df 92a0 	ldr.w	r9, [pc, #672]	; 801e0b0 <__ssvfiscanf_r+0x2b8>
 801de10:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 801de14:	9300      	str	r3, [sp, #0]
 801de16:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 801de1a:	49a3      	ldr	r1, [pc, #652]	; (801e0a8 <__ssvfiscanf_r+0x2b0>)
 801de1c:	91a0      	str	r1, [sp, #640]	; 0x280
 801de1e:	49a3      	ldr	r1, [pc, #652]	; (801e0ac <__ssvfiscanf_r+0x2b4>)
 801de20:	91a1      	str	r1, [sp, #644]	; 0x284
 801de22:	7813      	ldrb	r3, [r2, #0]
 801de24:	2b00      	cmp	r3, #0
 801de26:	f000 815a 	beq.w	801e0de <__ssvfiscanf_r+0x2e6>
 801de2a:	5cf9      	ldrb	r1, [r7, r3]
 801de2c:	1c55      	adds	r5, r2, #1
 801de2e:	f011 0108 	ands.w	r1, r1, #8
 801de32:	d019      	beq.n	801de68 <__ssvfiscanf_r+0x70>
 801de34:	6863      	ldr	r3, [r4, #4]
 801de36:	2b00      	cmp	r3, #0
 801de38:	dd0f      	ble.n	801de5a <__ssvfiscanf_r+0x62>
 801de3a:	6823      	ldr	r3, [r4, #0]
 801de3c:	781a      	ldrb	r2, [r3, #0]
 801de3e:	5cba      	ldrb	r2, [r7, r2]
 801de40:	0712      	lsls	r2, r2, #28
 801de42:	d401      	bmi.n	801de48 <__ssvfiscanf_r+0x50>
 801de44:	462a      	mov	r2, r5
 801de46:	e7ec      	b.n	801de22 <__ssvfiscanf_r+0x2a>
 801de48:	9a45      	ldr	r2, [sp, #276]	; 0x114
 801de4a:	3301      	adds	r3, #1
 801de4c:	3201      	adds	r2, #1
 801de4e:	6023      	str	r3, [r4, #0]
 801de50:	9245      	str	r2, [sp, #276]	; 0x114
 801de52:	6862      	ldr	r2, [r4, #4]
 801de54:	3a01      	subs	r2, #1
 801de56:	6062      	str	r2, [r4, #4]
 801de58:	e7ec      	b.n	801de34 <__ssvfiscanf_r+0x3c>
 801de5a:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 801de5c:	4621      	mov	r1, r4
 801de5e:	4630      	mov	r0, r6
 801de60:	4798      	blx	r3
 801de62:	2800      	cmp	r0, #0
 801de64:	d0e9      	beq.n	801de3a <__ssvfiscanf_r+0x42>
 801de66:	e7ed      	b.n	801de44 <__ssvfiscanf_r+0x4c>
 801de68:	2b25      	cmp	r3, #37	; 0x25
 801de6a:	d012      	beq.n	801de92 <__ssvfiscanf_r+0x9a>
 801de6c:	469a      	mov	sl, r3
 801de6e:	6863      	ldr	r3, [r4, #4]
 801de70:	2b00      	cmp	r3, #0
 801de72:	f340 8092 	ble.w	801df9a <__ssvfiscanf_r+0x1a2>
 801de76:	6822      	ldr	r2, [r4, #0]
 801de78:	7813      	ldrb	r3, [r2, #0]
 801de7a:	4553      	cmp	r3, sl
 801de7c:	f040 812f 	bne.w	801e0de <__ssvfiscanf_r+0x2e6>
 801de80:	6863      	ldr	r3, [r4, #4]
 801de82:	3201      	adds	r2, #1
 801de84:	3b01      	subs	r3, #1
 801de86:	6022      	str	r2, [r4, #0]
 801de88:	6063      	str	r3, [r4, #4]
 801de8a:	9b45      	ldr	r3, [sp, #276]	; 0x114
 801de8c:	3301      	adds	r3, #1
 801de8e:	9345      	str	r3, [sp, #276]	; 0x114
 801de90:	e7d8      	b.n	801de44 <__ssvfiscanf_r+0x4c>
 801de92:	9141      	str	r1, [sp, #260]	; 0x104
 801de94:	9143      	str	r1, [sp, #268]	; 0x10c
 801de96:	7853      	ldrb	r3, [r2, #1]
 801de98:	2b2a      	cmp	r3, #42	; 0x2a
 801de9a:	bf04      	itt	eq
 801de9c:	2310      	moveq	r3, #16
 801de9e:	1c95      	addeq	r5, r2, #2
 801dea0:	f04f 020a 	mov.w	r2, #10
 801dea4:	bf08      	it	eq
 801dea6:	9341      	streq	r3, [sp, #260]	; 0x104
 801dea8:	46aa      	mov	sl, r5
 801deaa:	f81a 1b01 	ldrb.w	r1, [sl], #1
 801deae:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 801deb2:	2b09      	cmp	r3, #9
 801deb4:	d91c      	bls.n	801def0 <__ssvfiscanf_r+0xf8>
 801deb6:	2203      	movs	r2, #3
 801deb8:	487d      	ldr	r0, [pc, #500]	; (801e0b0 <__ssvfiscanf_r+0x2b8>)
 801deba:	f000 fb8f 	bl	801e5dc <memchr>
 801debe:	b138      	cbz	r0, 801ded0 <__ssvfiscanf_r+0xd8>
 801dec0:	eba0 0009 	sub.w	r0, r0, r9
 801dec4:	2301      	movs	r3, #1
 801dec6:	9a41      	ldr	r2, [sp, #260]	; 0x104
 801dec8:	4655      	mov	r5, sl
 801deca:	4083      	lsls	r3, r0
 801decc:	4313      	orrs	r3, r2
 801dece:	9341      	str	r3, [sp, #260]	; 0x104
 801ded0:	f815 3b01 	ldrb.w	r3, [r5], #1
 801ded4:	2b78      	cmp	r3, #120	; 0x78
 801ded6:	d806      	bhi.n	801dee6 <__ssvfiscanf_r+0xee>
 801ded8:	2b57      	cmp	r3, #87	; 0x57
 801deda:	d810      	bhi.n	801defe <__ssvfiscanf_r+0x106>
 801dedc:	2b25      	cmp	r3, #37	; 0x25
 801dede:	d0c5      	beq.n	801de6c <__ssvfiscanf_r+0x74>
 801dee0:	d856      	bhi.n	801df90 <__ssvfiscanf_r+0x198>
 801dee2:	2b00      	cmp	r3, #0
 801dee4:	d064      	beq.n	801dfb0 <__ssvfiscanf_r+0x1b8>
 801dee6:	2303      	movs	r3, #3
 801dee8:	9347      	str	r3, [sp, #284]	; 0x11c
 801deea:	230a      	movs	r3, #10
 801deec:	9342      	str	r3, [sp, #264]	; 0x108
 801deee:	e075      	b.n	801dfdc <__ssvfiscanf_r+0x1e4>
 801def0:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 801def2:	4655      	mov	r5, sl
 801def4:	fb02 1103 	mla	r1, r2, r3, r1
 801def8:	3930      	subs	r1, #48	; 0x30
 801defa:	9143      	str	r1, [sp, #268]	; 0x10c
 801defc:	e7d4      	b.n	801dea8 <__ssvfiscanf_r+0xb0>
 801defe:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 801df02:	2a20      	cmp	r2, #32
 801df04:	d8ef      	bhi.n	801dee6 <__ssvfiscanf_r+0xee>
 801df06:	a101      	add	r1, pc, #4	; (adr r1, 801df0c <__ssvfiscanf_r+0x114>)
 801df08:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 801df0c:	0801dfbf 	.word	0x0801dfbf
 801df10:	0801dee7 	.word	0x0801dee7
 801df14:	0801dee7 	.word	0x0801dee7
 801df18:	0801e01d 	.word	0x0801e01d
 801df1c:	0801dee7 	.word	0x0801dee7
 801df20:	0801dee7 	.word	0x0801dee7
 801df24:	0801dee7 	.word	0x0801dee7
 801df28:	0801dee7 	.word	0x0801dee7
 801df2c:	0801dee7 	.word	0x0801dee7
 801df30:	0801dee7 	.word	0x0801dee7
 801df34:	0801dee7 	.word	0x0801dee7
 801df38:	0801e033 	.word	0x0801e033
 801df3c:	0801e019 	.word	0x0801e019
 801df40:	0801df97 	.word	0x0801df97
 801df44:	0801df97 	.word	0x0801df97
 801df48:	0801df97 	.word	0x0801df97
 801df4c:	0801dee7 	.word	0x0801dee7
 801df50:	0801dfd5 	.word	0x0801dfd5
 801df54:	0801dee7 	.word	0x0801dee7
 801df58:	0801dee7 	.word	0x0801dee7
 801df5c:	0801dee7 	.word	0x0801dee7
 801df60:	0801dee7 	.word	0x0801dee7
 801df64:	0801e043 	.word	0x0801e043
 801df68:	0801e011 	.word	0x0801e011
 801df6c:	0801dfb7 	.word	0x0801dfb7
 801df70:	0801dee7 	.word	0x0801dee7
 801df74:	0801dee7 	.word	0x0801dee7
 801df78:	0801e03f 	.word	0x0801e03f
 801df7c:	0801dee7 	.word	0x0801dee7
 801df80:	0801e019 	.word	0x0801e019
 801df84:	0801dee7 	.word	0x0801dee7
 801df88:	0801dee7 	.word	0x0801dee7
 801df8c:	0801dfbf 	.word	0x0801dfbf
 801df90:	3b45      	subs	r3, #69	; 0x45
 801df92:	2b02      	cmp	r3, #2
 801df94:	d8a7      	bhi.n	801dee6 <__ssvfiscanf_r+0xee>
 801df96:	2305      	movs	r3, #5
 801df98:	e01f      	b.n	801dfda <__ssvfiscanf_r+0x1e2>
 801df9a:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 801df9c:	4621      	mov	r1, r4
 801df9e:	4630      	mov	r0, r6
 801dfa0:	4798      	blx	r3
 801dfa2:	2800      	cmp	r0, #0
 801dfa4:	f43f af67 	beq.w	801de76 <__ssvfiscanf_r+0x7e>
 801dfa8:	9844      	ldr	r0, [sp, #272]	; 0x110
 801dfaa:	2800      	cmp	r0, #0
 801dfac:	f040 808d 	bne.w	801e0ca <__ssvfiscanf_r+0x2d2>
 801dfb0:	f04f 30ff 	mov.w	r0, #4294967295
 801dfb4:	e08f      	b.n	801e0d6 <__ssvfiscanf_r+0x2de>
 801dfb6:	9a41      	ldr	r2, [sp, #260]	; 0x104
 801dfb8:	f042 0220 	orr.w	r2, r2, #32
 801dfbc:	9241      	str	r2, [sp, #260]	; 0x104
 801dfbe:	9a41      	ldr	r2, [sp, #260]	; 0x104
 801dfc0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801dfc4:	9241      	str	r2, [sp, #260]	; 0x104
 801dfc6:	2210      	movs	r2, #16
 801dfc8:	2b6f      	cmp	r3, #111	; 0x6f
 801dfca:	9242      	str	r2, [sp, #264]	; 0x108
 801dfcc:	bf34      	ite	cc
 801dfce:	2303      	movcc	r3, #3
 801dfd0:	2304      	movcs	r3, #4
 801dfd2:	e002      	b.n	801dfda <__ssvfiscanf_r+0x1e2>
 801dfd4:	2300      	movs	r3, #0
 801dfd6:	9342      	str	r3, [sp, #264]	; 0x108
 801dfd8:	2303      	movs	r3, #3
 801dfda:	9347      	str	r3, [sp, #284]	; 0x11c
 801dfdc:	6863      	ldr	r3, [r4, #4]
 801dfde:	2b00      	cmp	r3, #0
 801dfe0:	dd3e      	ble.n	801e060 <__ssvfiscanf_r+0x268>
 801dfe2:	9b41      	ldr	r3, [sp, #260]	; 0x104
 801dfe4:	0659      	lsls	r1, r3, #25
 801dfe6:	d404      	bmi.n	801dff2 <__ssvfiscanf_r+0x1fa>
 801dfe8:	6823      	ldr	r3, [r4, #0]
 801dfea:	781a      	ldrb	r2, [r3, #0]
 801dfec:	5cba      	ldrb	r2, [r7, r2]
 801dfee:	0712      	lsls	r2, r2, #28
 801dff0:	d43d      	bmi.n	801e06e <__ssvfiscanf_r+0x276>
 801dff2:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 801dff4:	2b02      	cmp	r3, #2
 801dff6:	dc4c      	bgt.n	801e092 <__ssvfiscanf_r+0x29a>
 801dff8:	466b      	mov	r3, sp
 801dffa:	4622      	mov	r2, r4
 801dffc:	a941      	add	r1, sp, #260	; 0x104
 801dffe:	4630      	mov	r0, r6
 801e000:	f000 f872 	bl	801e0e8 <_scanf_chars>
 801e004:	2801      	cmp	r0, #1
 801e006:	d06a      	beq.n	801e0de <__ssvfiscanf_r+0x2e6>
 801e008:	2802      	cmp	r0, #2
 801e00a:	f47f af1b 	bne.w	801de44 <__ssvfiscanf_r+0x4c>
 801e00e:	e7cb      	b.n	801dfa8 <__ssvfiscanf_r+0x1b0>
 801e010:	2308      	movs	r3, #8
 801e012:	9342      	str	r3, [sp, #264]	; 0x108
 801e014:	2304      	movs	r3, #4
 801e016:	e7e0      	b.n	801dfda <__ssvfiscanf_r+0x1e2>
 801e018:	220a      	movs	r2, #10
 801e01a:	e7d5      	b.n	801dfc8 <__ssvfiscanf_r+0x1d0>
 801e01c:	4629      	mov	r1, r5
 801e01e:	4640      	mov	r0, r8
 801e020:	f000 fa6c 	bl	801e4fc <__sccl>
 801e024:	9b41      	ldr	r3, [sp, #260]	; 0x104
 801e026:	4605      	mov	r5, r0
 801e028:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801e02c:	9341      	str	r3, [sp, #260]	; 0x104
 801e02e:	2301      	movs	r3, #1
 801e030:	e7d3      	b.n	801dfda <__ssvfiscanf_r+0x1e2>
 801e032:	9b41      	ldr	r3, [sp, #260]	; 0x104
 801e034:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801e038:	9341      	str	r3, [sp, #260]	; 0x104
 801e03a:	2300      	movs	r3, #0
 801e03c:	e7cd      	b.n	801dfda <__ssvfiscanf_r+0x1e2>
 801e03e:	2302      	movs	r3, #2
 801e040:	e7cb      	b.n	801dfda <__ssvfiscanf_r+0x1e2>
 801e042:	9841      	ldr	r0, [sp, #260]	; 0x104
 801e044:	06c3      	lsls	r3, r0, #27
 801e046:	f53f aefd 	bmi.w	801de44 <__ssvfiscanf_r+0x4c>
 801e04a:	9b00      	ldr	r3, [sp, #0]
 801e04c:	07c0      	lsls	r0, r0, #31
 801e04e:	9a45      	ldr	r2, [sp, #276]	; 0x114
 801e050:	f103 0104 	add.w	r1, r3, #4
 801e054:	9100      	str	r1, [sp, #0]
 801e056:	681b      	ldr	r3, [r3, #0]
 801e058:	bf4c      	ite	mi
 801e05a:	801a      	strhmi	r2, [r3, #0]
 801e05c:	601a      	strpl	r2, [r3, #0]
 801e05e:	e6f1      	b.n	801de44 <__ssvfiscanf_r+0x4c>
 801e060:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 801e062:	4621      	mov	r1, r4
 801e064:	4630      	mov	r0, r6
 801e066:	4798      	blx	r3
 801e068:	2800      	cmp	r0, #0
 801e06a:	d0ba      	beq.n	801dfe2 <__ssvfiscanf_r+0x1ea>
 801e06c:	e79c      	b.n	801dfa8 <__ssvfiscanf_r+0x1b0>
 801e06e:	9a45      	ldr	r2, [sp, #276]	; 0x114
 801e070:	3201      	adds	r2, #1
 801e072:	9245      	str	r2, [sp, #276]	; 0x114
 801e074:	6862      	ldr	r2, [r4, #4]
 801e076:	3a01      	subs	r2, #1
 801e078:	2a00      	cmp	r2, #0
 801e07a:	6062      	str	r2, [r4, #4]
 801e07c:	dd02      	ble.n	801e084 <__ssvfiscanf_r+0x28c>
 801e07e:	3301      	adds	r3, #1
 801e080:	6023      	str	r3, [r4, #0]
 801e082:	e7b1      	b.n	801dfe8 <__ssvfiscanf_r+0x1f0>
 801e084:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 801e086:	4621      	mov	r1, r4
 801e088:	4630      	mov	r0, r6
 801e08a:	4798      	blx	r3
 801e08c:	2800      	cmp	r0, #0
 801e08e:	d0ab      	beq.n	801dfe8 <__ssvfiscanf_r+0x1f0>
 801e090:	e78a      	b.n	801dfa8 <__ssvfiscanf_r+0x1b0>
 801e092:	2b04      	cmp	r3, #4
 801e094:	dc0e      	bgt.n	801e0b4 <__ssvfiscanf_r+0x2bc>
 801e096:	466b      	mov	r3, sp
 801e098:	4622      	mov	r2, r4
 801e09a:	a941      	add	r1, sp, #260	; 0x104
 801e09c:	4630      	mov	r0, r6
 801e09e:	f000 f87d 	bl	801e19c <_scanf_i>
 801e0a2:	e7af      	b.n	801e004 <__ssvfiscanf_r+0x20c>
 801e0a4:	0801f7db 	.word	0x0801f7db
 801e0a8:	0801dd45 	.word	0x0801dd45
 801e0ac:	0801ddbf 	.word	0x0801ddbf
 801e0b0:	0801f7bb 	.word	0x0801f7bb
 801e0b4:	4b0b      	ldr	r3, [pc, #44]	; (801e0e4 <__ssvfiscanf_r+0x2ec>)
 801e0b6:	2b00      	cmp	r3, #0
 801e0b8:	f43f aec4 	beq.w	801de44 <__ssvfiscanf_r+0x4c>
 801e0bc:	466b      	mov	r3, sp
 801e0be:	4622      	mov	r2, r4
 801e0c0:	a941      	add	r1, sp, #260	; 0x104
 801e0c2:	4630      	mov	r0, r6
 801e0c4:	f3af 8000 	nop.w
 801e0c8:	e79c      	b.n	801e004 <__ssvfiscanf_r+0x20c>
 801e0ca:	89a3      	ldrh	r3, [r4, #12]
 801e0cc:	f013 0f40 	tst.w	r3, #64	; 0x40
 801e0d0:	bf18      	it	ne
 801e0d2:	f04f 30ff 	movne.w	r0, #4294967295
 801e0d6:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 801e0da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801e0de:	9844      	ldr	r0, [sp, #272]	; 0x110
 801e0e0:	e7f9      	b.n	801e0d6 <__ssvfiscanf_r+0x2de>
 801e0e2:	bf00      	nop
 801e0e4:	00000000 	.word	0x00000000

0801e0e8 <_scanf_chars>:
 801e0e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801e0ec:	4615      	mov	r5, r2
 801e0ee:	688a      	ldr	r2, [r1, #8]
 801e0f0:	4680      	mov	r8, r0
 801e0f2:	460c      	mov	r4, r1
 801e0f4:	b932      	cbnz	r2, 801e104 <_scanf_chars+0x1c>
 801e0f6:	698a      	ldr	r2, [r1, #24]
 801e0f8:	2a00      	cmp	r2, #0
 801e0fa:	bf0c      	ite	eq
 801e0fc:	2201      	moveq	r2, #1
 801e0fe:	f04f 32ff 	movne.w	r2, #4294967295
 801e102:	608a      	str	r2, [r1, #8]
 801e104:	6822      	ldr	r2, [r4, #0]
 801e106:	2700      	movs	r7, #0
 801e108:	f8df 908c 	ldr.w	r9, [pc, #140]	; 801e198 <_scanf_chars+0xb0>
 801e10c:	06d1      	lsls	r1, r2, #27
 801e10e:	bf5f      	itttt	pl
 801e110:	681a      	ldrpl	r2, [r3, #0]
 801e112:	1d11      	addpl	r1, r2, #4
 801e114:	6019      	strpl	r1, [r3, #0]
 801e116:	6816      	ldrpl	r6, [r2, #0]
 801e118:	69a0      	ldr	r0, [r4, #24]
 801e11a:	b188      	cbz	r0, 801e140 <_scanf_chars+0x58>
 801e11c:	2801      	cmp	r0, #1
 801e11e:	d107      	bne.n	801e130 <_scanf_chars+0x48>
 801e120:	682a      	ldr	r2, [r5, #0]
 801e122:	7811      	ldrb	r1, [r2, #0]
 801e124:	6962      	ldr	r2, [r4, #20]
 801e126:	5c52      	ldrb	r2, [r2, r1]
 801e128:	b952      	cbnz	r2, 801e140 <_scanf_chars+0x58>
 801e12a:	2f00      	cmp	r7, #0
 801e12c:	d031      	beq.n	801e192 <_scanf_chars+0xaa>
 801e12e:	e022      	b.n	801e176 <_scanf_chars+0x8e>
 801e130:	2802      	cmp	r0, #2
 801e132:	d120      	bne.n	801e176 <_scanf_chars+0x8e>
 801e134:	682b      	ldr	r3, [r5, #0]
 801e136:	781b      	ldrb	r3, [r3, #0]
 801e138:	f819 3003 	ldrb.w	r3, [r9, r3]
 801e13c:	071b      	lsls	r3, r3, #28
 801e13e:	d41a      	bmi.n	801e176 <_scanf_chars+0x8e>
 801e140:	6823      	ldr	r3, [r4, #0]
 801e142:	3701      	adds	r7, #1
 801e144:	06da      	lsls	r2, r3, #27
 801e146:	bf5e      	ittt	pl
 801e148:	682b      	ldrpl	r3, [r5, #0]
 801e14a:	781b      	ldrbpl	r3, [r3, #0]
 801e14c:	f806 3b01 	strbpl.w	r3, [r6], #1
 801e150:	682a      	ldr	r2, [r5, #0]
 801e152:	686b      	ldr	r3, [r5, #4]
 801e154:	3201      	adds	r2, #1
 801e156:	3b01      	subs	r3, #1
 801e158:	602a      	str	r2, [r5, #0]
 801e15a:	68a2      	ldr	r2, [r4, #8]
 801e15c:	606b      	str	r3, [r5, #4]
 801e15e:	3a01      	subs	r2, #1
 801e160:	60a2      	str	r2, [r4, #8]
 801e162:	b142      	cbz	r2, 801e176 <_scanf_chars+0x8e>
 801e164:	2b00      	cmp	r3, #0
 801e166:	dcd7      	bgt.n	801e118 <_scanf_chars+0x30>
 801e168:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 801e16c:	4629      	mov	r1, r5
 801e16e:	4640      	mov	r0, r8
 801e170:	4798      	blx	r3
 801e172:	2800      	cmp	r0, #0
 801e174:	d0d0      	beq.n	801e118 <_scanf_chars+0x30>
 801e176:	6823      	ldr	r3, [r4, #0]
 801e178:	f013 0310 	ands.w	r3, r3, #16
 801e17c:	d105      	bne.n	801e18a <_scanf_chars+0xa2>
 801e17e:	68e2      	ldr	r2, [r4, #12]
 801e180:	3201      	adds	r2, #1
 801e182:	60e2      	str	r2, [r4, #12]
 801e184:	69a2      	ldr	r2, [r4, #24]
 801e186:	b102      	cbz	r2, 801e18a <_scanf_chars+0xa2>
 801e188:	7033      	strb	r3, [r6, #0]
 801e18a:	6923      	ldr	r3, [r4, #16]
 801e18c:	2000      	movs	r0, #0
 801e18e:	443b      	add	r3, r7
 801e190:	6123      	str	r3, [r4, #16]
 801e192:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801e196:	bf00      	nop
 801e198:	0801f7db 	.word	0x0801f7db

0801e19c <_scanf_i>:
 801e19c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e1a0:	4698      	mov	r8, r3
 801e1a2:	b087      	sub	sp, #28
 801e1a4:	4b72      	ldr	r3, [pc, #456]	; (801e370 <_scanf_i+0x1d4>)
 801e1a6:	460c      	mov	r4, r1
 801e1a8:	4682      	mov	sl, r0
 801e1aa:	4616      	mov	r6, r2
 801e1ac:	4627      	mov	r7, r4
 801e1ae:	f04f 0b00 	mov.w	fp, #0
 801e1b2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801e1b6:	ab03      	add	r3, sp, #12
 801e1b8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 801e1bc:	4b6d      	ldr	r3, [pc, #436]	; (801e374 <_scanf_i+0x1d8>)
 801e1be:	69a1      	ldr	r1, [r4, #24]
 801e1c0:	4a6d      	ldr	r2, [pc, #436]	; (801e378 <_scanf_i+0x1dc>)
 801e1c2:	2903      	cmp	r1, #3
 801e1c4:	bf18      	it	ne
 801e1c6:	461a      	movne	r2, r3
 801e1c8:	68a3      	ldr	r3, [r4, #8]
 801e1ca:	9201      	str	r2, [sp, #4]
 801e1cc:	1e5a      	subs	r2, r3, #1
 801e1ce:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 801e1d2:	bf89      	itett	hi
 801e1d4:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 801e1d8:	f04f 0900 	movls.w	r9, #0
 801e1dc:	eb03 0905 	addhi.w	r9, r3, r5
 801e1e0:	f240 135d 	movwhi	r3, #349	; 0x15d
 801e1e4:	bf88      	it	hi
 801e1e6:	60a3      	strhi	r3, [r4, #8]
 801e1e8:	f857 3b1c 	ldr.w	r3, [r7], #28
 801e1ec:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 801e1f0:	463d      	mov	r5, r7
 801e1f2:	6023      	str	r3, [r4, #0]
 801e1f4:	6831      	ldr	r1, [r6, #0]
 801e1f6:	ab03      	add	r3, sp, #12
 801e1f8:	2202      	movs	r2, #2
 801e1fa:	7809      	ldrb	r1, [r1, #0]
 801e1fc:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 801e200:	f000 f9ec 	bl	801e5dc <memchr>
 801e204:	b328      	cbz	r0, 801e252 <_scanf_i+0xb6>
 801e206:	f1bb 0f01 	cmp.w	fp, #1
 801e20a:	d159      	bne.n	801e2c0 <_scanf_i+0x124>
 801e20c:	6862      	ldr	r2, [r4, #4]
 801e20e:	b92a      	cbnz	r2, 801e21c <_scanf_i+0x80>
 801e210:	6822      	ldr	r2, [r4, #0]
 801e212:	2308      	movs	r3, #8
 801e214:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801e218:	6063      	str	r3, [r4, #4]
 801e21a:	6022      	str	r2, [r4, #0]
 801e21c:	6822      	ldr	r2, [r4, #0]
 801e21e:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 801e222:	6022      	str	r2, [r4, #0]
 801e224:	68a2      	ldr	r2, [r4, #8]
 801e226:	1e51      	subs	r1, r2, #1
 801e228:	60a1      	str	r1, [r4, #8]
 801e22a:	b192      	cbz	r2, 801e252 <_scanf_i+0xb6>
 801e22c:	6832      	ldr	r2, [r6, #0]
 801e22e:	1c51      	adds	r1, r2, #1
 801e230:	6031      	str	r1, [r6, #0]
 801e232:	7812      	ldrb	r2, [r2, #0]
 801e234:	f805 2b01 	strb.w	r2, [r5], #1
 801e238:	6872      	ldr	r2, [r6, #4]
 801e23a:	3a01      	subs	r2, #1
 801e23c:	2a00      	cmp	r2, #0
 801e23e:	6072      	str	r2, [r6, #4]
 801e240:	dc07      	bgt.n	801e252 <_scanf_i+0xb6>
 801e242:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 801e246:	4631      	mov	r1, r6
 801e248:	4650      	mov	r0, sl
 801e24a:	4790      	blx	r2
 801e24c:	2800      	cmp	r0, #0
 801e24e:	f040 8085 	bne.w	801e35c <_scanf_i+0x1c0>
 801e252:	f10b 0b01 	add.w	fp, fp, #1
 801e256:	f1bb 0f03 	cmp.w	fp, #3
 801e25a:	d1cb      	bne.n	801e1f4 <_scanf_i+0x58>
 801e25c:	6863      	ldr	r3, [r4, #4]
 801e25e:	b90b      	cbnz	r3, 801e264 <_scanf_i+0xc8>
 801e260:	230a      	movs	r3, #10
 801e262:	6063      	str	r3, [r4, #4]
 801e264:	6863      	ldr	r3, [r4, #4]
 801e266:	f04f 0b00 	mov.w	fp, #0
 801e26a:	4944      	ldr	r1, [pc, #272]	; (801e37c <_scanf_i+0x1e0>)
 801e26c:	6960      	ldr	r0, [r4, #20]
 801e26e:	1ac9      	subs	r1, r1, r3
 801e270:	f000 f944 	bl	801e4fc <__sccl>
 801e274:	68a3      	ldr	r3, [r4, #8]
 801e276:	6822      	ldr	r2, [r4, #0]
 801e278:	2b00      	cmp	r3, #0
 801e27a:	d03d      	beq.n	801e2f8 <_scanf_i+0x15c>
 801e27c:	6831      	ldr	r1, [r6, #0]
 801e27e:	6960      	ldr	r0, [r4, #20]
 801e280:	f891 c000 	ldrb.w	ip, [r1]
 801e284:	f810 000c 	ldrb.w	r0, [r0, ip]
 801e288:	2800      	cmp	r0, #0
 801e28a:	d035      	beq.n	801e2f8 <_scanf_i+0x15c>
 801e28c:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 801e290:	d124      	bne.n	801e2dc <_scanf_i+0x140>
 801e292:	0510      	lsls	r0, r2, #20
 801e294:	d522      	bpl.n	801e2dc <_scanf_i+0x140>
 801e296:	f10b 0b01 	add.w	fp, fp, #1
 801e29a:	f1b9 0f00 	cmp.w	r9, #0
 801e29e:	d003      	beq.n	801e2a8 <_scanf_i+0x10c>
 801e2a0:	3301      	adds	r3, #1
 801e2a2:	f109 39ff 	add.w	r9, r9, #4294967295
 801e2a6:	60a3      	str	r3, [r4, #8]
 801e2a8:	6873      	ldr	r3, [r6, #4]
 801e2aa:	3b01      	subs	r3, #1
 801e2ac:	2b00      	cmp	r3, #0
 801e2ae:	6073      	str	r3, [r6, #4]
 801e2b0:	dd1b      	ble.n	801e2ea <_scanf_i+0x14e>
 801e2b2:	6833      	ldr	r3, [r6, #0]
 801e2b4:	3301      	adds	r3, #1
 801e2b6:	6033      	str	r3, [r6, #0]
 801e2b8:	68a3      	ldr	r3, [r4, #8]
 801e2ba:	3b01      	subs	r3, #1
 801e2bc:	60a3      	str	r3, [r4, #8]
 801e2be:	e7d9      	b.n	801e274 <_scanf_i+0xd8>
 801e2c0:	f1bb 0f02 	cmp.w	fp, #2
 801e2c4:	d1ae      	bne.n	801e224 <_scanf_i+0x88>
 801e2c6:	6822      	ldr	r2, [r4, #0]
 801e2c8:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 801e2cc:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 801e2d0:	d1bf      	bne.n	801e252 <_scanf_i+0xb6>
 801e2d2:	2310      	movs	r3, #16
 801e2d4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 801e2d8:	6063      	str	r3, [r4, #4]
 801e2da:	e7a2      	b.n	801e222 <_scanf_i+0x86>
 801e2dc:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 801e2e0:	6022      	str	r2, [r4, #0]
 801e2e2:	780b      	ldrb	r3, [r1, #0]
 801e2e4:	f805 3b01 	strb.w	r3, [r5], #1
 801e2e8:	e7de      	b.n	801e2a8 <_scanf_i+0x10c>
 801e2ea:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 801e2ee:	4631      	mov	r1, r6
 801e2f0:	4650      	mov	r0, sl
 801e2f2:	4798      	blx	r3
 801e2f4:	2800      	cmp	r0, #0
 801e2f6:	d0df      	beq.n	801e2b8 <_scanf_i+0x11c>
 801e2f8:	6823      	ldr	r3, [r4, #0]
 801e2fa:	05d9      	lsls	r1, r3, #23
 801e2fc:	d50d      	bpl.n	801e31a <_scanf_i+0x17e>
 801e2fe:	42bd      	cmp	r5, r7
 801e300:	d909      	bls.n	801e316 <_scanf_i+0x17a>
 801e302:	f105 39ff 	add.w	r9, r5, #4294967295
 801e306:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 801e30a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801e30e:	4632      	mov	r2, r6
 801e310:	464d      	mov	r5, r9
 801e312:	4650      	mov	r0, sl
 801e314:	4798      	blx	r3
 801e316:	42bd      	cmp	r5, r7
 801e318:	d028      	beq.n	801e36c <_scanf_i+0x1d0>
 801e31a:	6822      	ldr	r2, [r4, #0]
 801e31c:	f012 0210 	ands.w	r2, r2, #16
 801e320:	d113      	bne.n	801e34a <_scanf_i+0x1ae>
 801e322:	702a      	strb	r2, [r5, #0]
 801e324:	4639      	mov	r1, r7
 801e326:	6863      	ldr	r3, [r4, #4]
 801e328:	4650      	mov	r0, sl
 801e32a:	9e01      	ldr	r6, [sp, #4]
 801e32c:	47b0      	blx	r6
 801e32e:	f8d8 3000 	ldr.w	r3, [r8]
 801e332:	6821      	ldr	r1, [r4, #0]
 801e334:	1d1a      	adds	r2, r3, #4
 801e336:	f011 0f20 	tst.w	r1, #32
 801e33a:	f8c8 2000 	str.w	r2, [r8]
 801e33e:	681b      	ldr	r3, [r3, #0]
 801e340:	d00f      	beq.n	801e362 <_scanf_i+0x1c6>
 801e342:	6018      	str	r0, [r3, #0]
 801e344:	68e3      	ldr	r3, [r4, #12]
 801e346:	3301      	adds	r3, #1
 801e348:	60e3      	str	r3, [r4, #12]
 801e34a:	1bed      	subs	r5, r5, r7
 801e34c:	6923      	ldr	r3, [r4, #16]
 801e34e:	2000      	movs	r0, #0
 801e350:	445d      	add	r5, fp
 801e352:	442b      	add	r3, r5
 801e354:	6123      	str	r3, [r4, #16]
 801e356:	b007      	add	sp, #28
 801e358:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e35c:	f04f 0b00 	mov.w	fp, #0
 801e360:	e7ca      	b.n	801e2f8 <_scanf_i+0x15c>
 801e362:	07ca      	lsls	r2, r1, #31
 801e364:	bf4c      	ite	mi
 801e366:	8018      	strhmi	r0, [r3, #0]
 801e368:	6018      	strpl	r0, [r3, #0]
 801e36a:	e7eb      	b.n	801e344 <_scanf_i+0x1a8>
 801e36c:	2001      	movs	r0, #1
 801e36e:	e7f2      	b.n	801e356 <_scanf_i+0x1ba>
 801e370:	0801f1a4 	.word	0x0801f1a4
 801e374:	0801e845 	.word	0x0801e845
 801e378:	0801e75d 	.word	0x0801e75d
 801e37c:	0801f7cf 	.word	0x0801f7cf

0801e380 <__sflush_r>:
 801e380:	898a      	ldrh	r2, [r1, #12]
 801e382:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801e386:	4605      	mov	r5, r0
 801e388:	0710      	lsls	r0, r2, #28
 801e38a:	460c      	mov	r4, r1
 801e38c:	d458      	bmi.n	801e440 <__sflush_r+0xc0>
 801e38e:	684b      	ldr	r3, [r1, #4]
 801e390:	2b00      	cmp	r3, #0
 801e392:	dc05      	bgt.n	801e3a0 <__sflush_r+0x20>
 801e394:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801e396:	2b00      	cmp	r3, #0
 801e398:	dc02      	bgt.n	801e3a0 <__sflush_r+0x20>
 801e39a:	2000      	movs	r0, #0
 801e39c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801e3a0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801e3a2:	2e00      	cmp	r6, #0
 801e3a4:	d0f9      	beq.n	801e39a <__sflush_r+0x1a>
 801e3a6:	2300      	movs	r3, #0
 801e3a8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801e3ac:	682f      	ldr	r7, [r5, #0]
 801e3ae:	6a21      	ldr	r1, [r4, #32]
 801e3b0:	602b      	str	r3, [r5, #0]
 801e3b2:	d032      	beq.n	801e41a <__sflush_r+0x9a>
 801e3b4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801e3b6:	89a3      	ldrh	r3, [r4, #12]
 801e3b8:	075a      	lsls	r2, r3, #29
 801e3ba:	d505      	bpl.n	801e3c8 <__sflush_r+0x48>
 801e3bc:	6863      	ldr	r3, [r4, #4]
 801e3be:	1ac0      	subs	r0, r0, r3
 801e3c0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801e3c2:	b10b      	cbz	r3, 801e3c8 <__sflush_r+0x48>
 801e3c4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801e3c6:	1ac0      	subs	r0, r0, r3
 801e3c8:	2300      	movs	r3, #0
 801e3ca:	4602      	mov	r2, r0
 801e3cc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801e3ce:	4628      	mov	r0, r5
 801e3d0:	6a21      	ldr	r1, [r4, #32]
 801e3d2:	47b0      	blx	r6
 801e3d4:	1c43      	adds	r3, r0, #1
 801e3d6:	89a3      	ldrh	r3, [r4, #12]
 801e3d8:	d106      	bne.n	801e3e8 <__sflush_r+0x68>
 801e3da:	6829      	ldr	r1, [r5, #0]
 801e3dc:	291d      	cmp	r1, #29
 801e3de:	d82b      	bhi.n	801e438 <__sflush_r+0xb8>
 801e3e0:	4a28      	ldr	r2, [pc, #160]	; (801e484 <__sflush_r+0x104>)
 801e3e2:	410a      	asrs	r2, r1
 801e3e4:	07d6      	lsls	r6, r2, #31
 801e3e6:	d427      	bmi.n	801e438 <__sflush_r+0xb8>
 801e3e8:	2200      	movs	r2, #0
 801e3ea:	04d9      	lsls	r1, r3, #19
 801e3ec:	6062      	str	r2, [r4, #4]
 801e3ee:	6922      	ldr	r2, [r4, #16]
 801e3f0:	6022      	str	r2, [r4, #0]
 801e3f2:	d504      	bpl.n	801e3fe <__sflush_r+0x7e>
 801e3f4:	1c42      	adds	r2, r0, #1
 801e3f6:	d101      	bne.n	801e3fc <__sflush_r+0x7c>
 801e3f8:	682b      	ldr	r3, [r5, #0]
 801e3fa:	b903      	cbnz	r3, 801e3fe <__sflush_r+0x7e>
 801e3fc:	6560      	str	r0, [r4, #84]	; 0x54
 801e3fe:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801e400:	602f      	str	r7, [r5, #0]
 801e402:	2900      	cmp	r1, #0
 801e404:	d0c9      	beq.n	801e39a <__sflush_r+0x1a>
 801e406:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801e40a:	4299      	cmp	r1, r3
 801e40c:	d002      	beq.n	801e414 <__sflush_r+0x94>
 801e40e:	4628      	mov	r0, r5
 801e410:	f7ff fc4c 	bl	801dcac <_free_r>
 801e414:	2000      	movs	r0, #0
 801e416:	6360      	str	r0, [r4, #52]	; 0x34
 801e418:	e7c0      	b.n	801e39c <__sflush_r+0x1c>
 801e41a:	2301      	movs	r3, #1
 801e41c:	4628      	mov	r0, r5
 801e41e:	47b0      	blx	r6
 801e420:	1c41      	adds	r1, r0, #1
 801e422:	d1c8      	bne.n	801e3b6 <__sflush_r+0x36>
 801e424:	682b      	ldr	r3, [r5, #0]
 801e426:	2b00      	cmp	r3, #0
 801e428:	d0c5      	beq.n	801e3b6 <__sflush_r+0x36>
 801e42a:	2b1d      	cmp	r3, #29
 801e42c:	d001      	beq.n	801e432 <__sflush_r+0xb2>
 801e42e:	2b16      	cmp	r3, #22
 801e430:	d101      	bne.n	801e436 <__sflush_r+0xb6>
 801e432:	602f      	str	r7, [r5, #0]
 801e434:	e7b1      	b.n	801e39a <__sflush_r+0x1a>
 801e436:	89a3      	ldrh	r3, [r4, #12]
 801e438:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801e43c:	81a3      	strh	r3, [r4, #12]
 801e43e:	e7ad      	b.n	801e39c <__sflush_r+0x1c>
 801e440:	690f      	ldr	r7, [r1, #16]
 801e442:	2f00      	cmp	r7, #0
 801e444:	d0a9      	beq.n	801e39a <__sflush_r+0x1a>
 801e446:	0793      	lsls	r3, r2, #30
 801e448:	680e      	ldr	r6, [r1, #0]
 801e44a:	600f      	str	r7, [r1, #0]
 801e44c:	bf0c      	ite	eq
 801e44e:	694b      	ldreq	r3, [r1, #20]
 801e450:	2300      	movne	r3, #0
 801e452:	eba6 0807 	sub.w	r8, r6, r7
 801e456:	608b      	str	r3, [r1, #8]
 801e458:	f1b8 0f00 	cmp.w	r8, #0
 801e45c:	dd9d      	ble.n	801e39a <__sflush_r+0x1a>
 801e45e:	4643      	mov	r3, r8
 801e460:	463a      	mov	r2, r7
 801e462:	6a21      	ldr	r1, [r4, #32]
 801e464:	4628      	mov	r0, r5
 801e466:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801e468:	47b0      	blx	r6
 801e46a:	2800      	cmp	r0, #0
 801e46c:	dc06      	bgt.n	801e47c <__sflush_r+0xfc>
 801e46e:	89a3      	ldrh	r3, [r4, #12]
 801e470:	f04f 30ff 	mov.w	r0, #4294967295
 801e474:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801e478:	81a3      	strh	r3, [r4, #12]
 801e47a:	e78f      	b.n	801e39c <__sflush_r+0x1c>
 801e47c:	4407      	add	r7, r0
 801e47e:	eba8 0800 	sub.w	r8, r8, r0
 801e482:	e7e9      	b.n	801e458 <__sflush_r+0xd8>
 801e484:	dfbffffe 	.word	0xdfbffffe

0801e488 <_fflush_r>:
 801e488:	b538      	push	{r3, r4, r5, lr}
 801e48a:	690b      	ldr	r3, [r1, #16]
 801e48c:	4605      	mov	r5, r0
 801e48e:	460c      	mov	r4, r1
 801e490:	b913      	cbnz	r3, 801e498 <_fflush_r+0x10>
 801e492:	2500      	movs	r5, #0
 801e494:	4628      	mov	r0, r5
 801e496:	bd38      	pop	{r3, r4, r5, pc}
 801e498:	b118      	cbz	r0, 801e4a2 <_fflush_r+0x1a>
 801e49a:	6a03      	ldr	r3, [r0, #32]
 801e49c:	b90b      	cbnz	r3, 801e4a2 <_fflush_r+0x1a>
 801e49e:	f7ff fa49 	bl	801d934 <__sinit>
 801e4a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801e4a6:	2b00      	cmp	r3, #0
 801e4a8:	d0f3      	beq.n	801e492 <_fflush_r+0xa>
 801e4aa:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801e4ac:	07d0      	lsls	r0, r2, #31
 801e4ae:	d404      	bmi.n	801e4ba <_fflush_r+0x32>
 801e4b0:	0599      	lsls	r1, r3, #22
 801e4b2:	d402      	bmi.n	801e4ba <_fflush_r+0x32>
 801e4b4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801e4b6:	f7ff fbcc 	bl	801dc52 <__retarget_lock_acquire_recursive>
 801e4ba:	4628      	mov	r0, r5
 801e4bc:	4621      	mov	r1, r4
 801e4be:	f7ff ff5f 	bl	801e380 <__sflush_r>
 801e4c2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801e4c4:	4605      	mov	r5, r0
 801e4c6:	07da      	lsls	r2, r3, #31
 801e4c8:	d4e4      	bmi.n	801e494 <_fflush_r+0xc>
 801e4ca:	89a3      	ldrh	r3, [r4, #12]
 801e4cc:	059b      	lsls	r3, r3, #22
 801e4ce:	d4e1      	bmi.n	801e494 <_fflush_r+0xc>
 801e4d0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801e4d2:	f7ff fbbf 	bl	801dc54 <__retarget_lock_release_recursive>
 801e4d6:	e7dd      	b.n	801e494 <_fflush_r+0xc>

0801e4d8 <fiprintf>:
 801e4d8:	b40e      	push	{r1, r2, r3}
 801e4da:	b503      	push	{r0, r1, lr}
 801e4dc:	ab03      	add	r3, sp, #12
 801e4de:	4601      	mov	r1, r0
 801e4e0:	4805      	ldr	r0, [pc, #20]	; (801e4f8 <fiprintf+0x20>)
 801e4e2:	f853 2b04 	ldr.w	r2, [r3], #4
 801e4e6:	6800      	ldr	r0, [r0, #0]
 801e4e8:	9301      	str	r3, [sp, #4]
 801e4ea:	f000 f9d7 	bl	801e89c <_vfiprintf_r>
 801e4ee:	b002      	add	sp, #8
 801e4f0:	f85d eb04 	ldr.w	lr, [sp], #4
 801e4f4:	b003      	add	sp, #12
 801e4f6:	4770      	bx	lr
 801e4f8:	20000108 	.word	0x20000108

0801e4fc <__sccl>:
 801e4fc:	b570      	push	{r4, r5, r6, lr}
 801e4fe:	780b      	ldrb	r3, [r1, #0]
 801e500:	4604      	mov	r4, r0
 801e502:	3801      	subs	r0, #1
 801e504:	2b5e      	cmp	r3, #94	; 0x5e
 801e506:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 801e50a:	bf13      	iteet	ne
 801e50c:	1c4a      	addne	r2, r1, #1
 801e50e:	1c8a      	addeq	r2, r1, #2
 801e510:	784b      	ldrbeq	r3, [r1, #1]
 801e512:	2100      	movne	r1, #0
 801e514:	bf08      	it	eq
 801e516:	2101      	moveq	r1, #1
 801e518:	f800 1f01 	strb.w	r1, [r0, #1]!
 801e51c:	42a8      	cmp	r0, r5
 801e51e:	d1fb      	bne.n	801e518 <__sccl+0x1c>
 801e520:	b90b      	cbnz	r3, 801e526 <__sccl+0x2a>
 801e522:	1e50      	subs	r0, r2, #1
 801e524:	bd70      	pop	{r4, r5, r6, pc}
 801e526:	f081 0101 	eor.w	r1, r1, #1
 801e52a:	4610      	mov	r0, r2
 801e52c:	54e1      	strb	r1, [r4, r3]
 801e52e:	4602      	mov	r2, r0
 801e530:	f812 5b01 	ldrb.w	r5, [r2], #1
 801e534:	2d2d      	cmp	r5, #45	; 0x2d
 801e536:	d005      	beq.n	801e544 <__sccl+0x48>
 801e538:	2d5d      	cmp	r5, #93	; 0x5d
 801e53a:	d016      	beq.n	801e56a <__sccl+0x6e>
 801e53c:	2d00      	cmp	r5, #0
 801e53e:	d0f1      	beq.n	801e524 <__sccl+0x28>
 801e540:	462b      	mov	r3, r5
 801e542:	e7f2      	b.n	801e52a <__sccl+0x2e>
 801e544:	7846      	ldrb	r6, [r0, #1]
 801e546:	2e5d      	cmp	r6, #93	; 0x5d
 801e548:	d0fa      	beq.n	801e540 <__sccl+0x44>
 801e54a:	42b3      	cmp	r3, r6
 801e54c:	dcf8      	bgt.n	801e540 <__sccl+0x44>
 801e54e:	3002      	adds	r0, #2
 801e550:	461a      	mov	r2, r3
 801e552:	3201      	adds	r2, #1
 801e554:	4296      	cmp	r6, r2
 801e556:	54a1      	strb	r1, [r4, r2]
 801e558:	dcfb      	bgt.n	801e552 <__sccl+0x56>
 801e55a:	1af2      	subs	r2, r6, r3
 801e55c:	1c5d      	adds	r5, r3, #1
 801e55e:	3a01      	subs	r2, #1
 801e560:	42b3      	cmp	r3, r6
 801e562:	bfa8      	it	ge
 801e564:	2200      	movge	r2, #0
 801e566:	18ab      	adds	r3, r5, r2
 801e568:	e7e1      	b.n	801e52e <__sccl+0x32>
 801e56a:	4610      	mov	r0, r2
 801e56c:	e7da      	b.n	801e524 <__sccl+0x28>

0801e56e <__submore>:
 801e56e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801e572:	460c      	mov	r4, r1
 801e574:	6b49      	ldr	r1, [r1, #52]	; 0x34
 801e576:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801e57a:	4299      	cmp	r1, r3
 801e57c:	d11a      	bne.n	801e5b4 <__submore+0x46>
 801e57e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 801e582:	f7ff f881 	bl	801d688 <_malloc_r>
 801e586:	b918      	cbnz	r0, 801e590 <__submore+0x22>
 801e588:	f04f 30ff 	mov.w	r0, #4294967295
 801e58c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801e590:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801e594:	6360      	str	r0, [r4, #52]	; 0x34
 801e596:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 801e59a:	63a3      	str	r3, [r4, #56]	; 0x38
 801e59c:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 801e5a0:	7083      	strb	r3, [r0, #2]
 801e5a2:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 801e5a6:	7043      	strb	r3, [r0, #1]
 801e5a8:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 801e5ac:	7003      	strb	r3, [r0, #0]
 801e5ae:	6020      	str	r0, [r4, #0]
 801e5b0:	2000      	movs	r0, #0
 801e5b2:	e7eb      	b.n	801e58c <__submore+0x1e>
 801e5b4:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 801e5b6:	0077      	lsls	r7, r6, #1
 801e5b8:	463a      	mov	r2, r7
 801e5ba:	f000 f81d 	bl	801e5f8 <_realloc_r>
 801e5be:	4605      	mov	r5, r0
 801e5c0:	2800      	cmp	r0, #0
 801e5c2:	d0e1      	beq.n	801e588 <__submore+0x1a>
 801e5c4:	eb00 0806 	add.w	r8, r0, r6
 801e5c8:	4601      	mov	r1, r0
 801e5ca:	4632      	mov	r2, r6
 801e5cc:	4640      	mov	r0, r8
 801e5ce:	f7ff fb42 	bl	801dc56 <memcpy>
 801e5d2:	f8c4 8000 	str.w	r8, [r4]
 801e5d6:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 801e5da:	e7e9      	b.n	801e5b0 <__submore+0x42>

0801e5dc <memchr>:
 801e5dc:	b2c9      	uxtb	r1, r1
 801e5de:	4402      	add	r2, r0
 801e5e0:	b510      	push	{r4, lr}
 801e5e2:	4290      	cmp	r0, r2
 801e5e4:	4603      	mov	r3, r0
 801e5e6:	d101      	bne.n	801e5ec <memchr+0x10>
 801e5e8:	2300      	movs	r3, #0
 801e5ea:	e003      	b.n	801e5f4 <memchr+0x18>
 801e5ec:	781c      	ldrb	r4, [r3, #0]
 801e5ee:	3001      	adds	r0, #1
 801e5f0:	428c      	cmp	r4, r1
 801e5f2:	d1f6      	bne.n	801e5e2 <memchr+0x6>
 801e5f4:	4618      	mov	r0, r3
 801e5f6:	bd10      	pop	{r4, pc}

0801e5f8 <_realloc_r>:
 801e5f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801e5fc:	4680      	mov	r8, r0
 801e5fe:	4614      	mov	r4, r2
 801e600:	460e      	mov	r6, r1
 801e602:	b921      	cbnz	r1, 801e60e <_realloc_r+0x16>
 801e604:	4611      	mov	r1, r2
 801e606:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801e60a:	f7ff b83d 	b.w	801d688 <_malloc_r>
 801e60e:	b92a      	cbnz	r2, 801e61c <_realloc_r+0x24>
 801e610:	4625      	mov	r5, r4
 801e612:	f7ff fb4b 	bl	801dcac <_free_r>
 801e616:	4628      	mov	r0, r5
 801e618:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801e61c:	f000 fc80 	bl	801ef20 <_malloc_usable_size_r>
 801e620:	4284      	cmp	r4, r0
 801e622:	4607      	mov	r7, r0
 801e624:	d802      	bhi.n	801e62c <_realloc_r+0x34>
 801e626:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801e62a:	d812      	bhi.n	801e652 <_realloc_r+0x5a>
 801e62c:	4621      	mov	r1, r4
 801e62e:	4640      	mov	r0, r8
 801e630:	f7ff f82a 	bl	801d688 <_malloc_r>
 801e634:	4605      	mov	r5, r0
 801e636:	2800      	cmp	r0, #0
 801e638:	d0ed      	beq.n	801e616 <_realloc_r+0x1e>
 801e63a:	42bc      	cmp	r4, r7
 801e63c:	4622      	mov	r2, r4
 801e63e:	4631      	mov	r1, r6
 801e640:	bf28      	it	cs
 801e642:	463a      	movcs	r2, r7
 801e644:	f7ff fb07 	bl	801dc56 <memcpy>
 801e648:	4631      	mov	r1, r6
 801e64a:	4640      	mov	r0, r8
 801e64c:	f7ff fb2e 	bl	801dcac <_free_r>
 801e650:	e7e1      	b.n	801e616 <_realloc_r+0x1e>
 801e652:	4635      	mov	r5, r6
 801e654:	e7df      	b.n	801e616 <_realloc_r+0x1e>
	...

0801e658 <_strtol_l.constprop.0>:
 801e658:	2b01      	cmp	r3, #1
 801e65a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801e65e:	d001      	beq.n	801e664 <_strtol_l.constprop.0+0xc>
 801e660:	2b24      	cmp	r3, #36	; 0x24
 801e662:	d906      	bls.n	801e672 <_strtol_l.constprop.0+0x1a>
 801e664:	f7ff faca 	bl	801dbfc <__errno>
 801e668:	2316      	movs	r3, #22
 801e66a:	6003      	str	r3, [r0, #0]
 801e66c:	2000      	movs	r0, #0
 801e66e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801e672:	460d      	mov	r5, r1
 801e674:	f8df c0e0 	ldr.w	ip, [pc, #224]	; 801e758 <_strtol_l.constprop.0+0x100>
 801e678:	462e      	mov	r6, r5
 801e67a:	f815 4b01 	ldrb.w	r4, [r5], #1
 801e67e:	f81c 7004 	ldrb.w	r7, [ip, r4]
 801e682:	f017 0708 	ands.w	r7, r7, #8
 801e686:	d1f7      	bne.n	801e678 <_strtol_l.constprop.0+0x20>
 801e688:	2c2d      	cmp	r4, #45	; 0x2d
 801e68a:	d132      	bne.n	801e6f2 <_strtol_l.constprop.0+0x9a>
 801e68c:	782c      	ldrb	r4, [r5, #0]
 801e68e:	2701      	movs	r7, #1
 801e690:	1cb5      	adds	r5, r6, #2
 801e692:	2b00      	cmp	r3, #0
 801e694:	d05b      	beq.n	801e74e <_strtol_l.constprop.0+0xf6>
 801e696:	2b10      	cmp	r3, #16
 801e698:	d109      	bne.n	801e6ae <_strtol_l.constprop.0+0x56>
 801e69a:	2c30      	cmp	r4, #48	; 0x30
 801e69c:	d107      	bne.n	801e6ae <_strtol_l.constprop.0+0x56>
 801e69e:	782c      	ldrb	r4, [r5, #0]
 801e6a0:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 801e6a4:	2c58      	cmp	r4, #88	; 0x58
 801e6a6:	d14d      	bne.n	801e744 <_strtol_l.constprop.0+0xec>
 801e6a8:	786c      	ldrb	r4, [r5, #1]
 801e6aa:	2310      	movs	r3, #16
 801e6ac:	3502      	adds	r5, #2
 801e6ae:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 801e6b2:	f04f 0e00 	mov.w	lr, #0
 801e6b6:	f108 38ff 	add.w	r8, r8, #4294967295
 801e6ba:	4676      	mov	r6, lr
 801e6bc:	fbb8 f9f3 	udiv	r9, r8, r3
 801e6c0:	fb03 8a19 	mls	sl, r3, r9, r8
 801e6c4:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 801e6c8:	f1bc 0f09 	cmp.w	ip, #9
 801e6cc:	d816      	bhi.n	801e6fc <_strtol_l.constprop.0+0xa4>
 801e6ce:	4664      	mov	r4, ip
 801e6d0:	42a3      	cmp	r3, r4
 801e6d2:	dd24      	ble.n	801e71e <_strtol_l.constprop.0+0xc6>
 801e6d4:	f1be 3fff 	cmp.w	lr, #4294967295
 801e6d8:	d008      	beq.n	801e6ec <_strtol_l.constprop.0+0x94>
 801e6da:	45b1      	cmp	r9, r6
 801e6dc:	d31c      	bcc.n	801e718 <_strtol_l.constprop.0+0xc0>
 801e6de:	d101      	bne.n	801e6e4 <_strtol_l.constprop.0+0x8c>
 801e6e0:	45a2      	cmp	sl, r4
 801e6e2:	db19      	blt.n	801e718 <_strtol_l.constprop.0+0xc0>
 801e6e4:	fb06 4603 	mla	r6, r6, r3, r4
 801e6e8:	f04f 0e01 	mov.w	lr, #1
 801e6ec:	f815 4b01 	ldrb.w	r4, [r5], #1
 801e6f0:	e7e8      	b.n	801e6c4 <_strtol_l.constprop.0+0x6c>
 801e6f2:	2c2b      	cmp	r4, #43	; 0x2b
 801e6f4:	bf04      	itt	eq
 801e6f6:	782c      	ldrbeq	r4, [r5, #0]
 801e6f8:	1cb5      	addeq	r5, r6, #2
 801e6fa:	e7ca      	b.n	801e692 <_strtol_l.constprop.0+0x3a>
 801e6fc:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 801e700:	f1bc 0f19 	cmp.w	ip, #25
 801e704:	d801      	bhi.n	801e70a <_strtol_l.constprop.0+0xb2>
 801e706:	3c37      	subs	r4, #55	; 0x37
 801e708:	e7e2      	b.n	801e6d0 <_strtol_l.constprop.0+0x78>
 801e70a:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 801e70e:	f1bc 0f19 	cmp.w	ip, #25
 801e712:	d804      	bhi.n	801e71e <_strtol_l.constprop.0+0xc6>
 801e714:	3c57      	subs	r4, #87	; 0x57
 801e716:	e7db      	b.n	801e6d0 <_strtol_l.constprop.0+0x78>
 801e718:	f04f 3eff 	mov.w	lr, #4294967295
 801e71c:	e7e6      	b.n	801e6ec <_strtol_l.constprop.0+0x94>
 801e71e:	f1be 3fff 	cmp.w	lr, #4294967295
 801e722:	d105      	bne.n	801e730 <_strtol_l.constprop.0+0xd8>
 801e724:	2322      	movs	r3, #34	; 0x22
 801e726:	4646      	mov	r6, r8
 801e728:	6003      	str	r3, [r0, #0]
 801e72a:	b942      	cbnz	r2, 801e73e <_strtol_l.constprop.0+0xe6>
 801e72c:	4630      	mov	r0, r6
 801e72e:	e79e      	b.n	801e66e <_strtol_l.constprop.0+0x16>
 801e730:	b107      	cbz	r7, 801e734 <_strtol_l.constprop.0+0xdc>
 801e732:	4276      	negs	r6, r6
 801e734:	2a00      	cmp	r2, #0
 801e736:	d0f9      	beq.n	801e72c <_strtol_l.constprop.0+0xd4>
 801e738:	f1be 0f00 	cmp.w	lr, #0
 801e73c:	d000      	beq.n	801e740 <_strtol_l.constprop.0+0xe8>
 801e73e:	1e69      	subs	r1, r5, #1
 801e740:	6011      	str	r1, [r2, #0]
 801e742:	e7f3      	b.n	801e72c <_strtol_l.constprop.0+0xd4>
 801e744:	2430      	movs	r4, #48	; 0x30
 801e746:	2b00      	cmp	r3, #0
 801e748:	d1b1      	bne.n	801e6ae <_strtol_l.constprop.0+0x56>
 801e74a:	2308      	movs	r3, #8
 801e74c:	e7af      	b.n	801e6ae <_strtol_l.constprop.0+0x56>
 801e74e:	2c30      	cmp	r4, #48	; 0x30
 801e750:	d0a5      	beq.n	801e69e <_strtol_l.constprop.0+0x46>
 801e752:	230a      	movs	r3, #10
 801e754:	e7ab      	b.n	801e6ae <_strtol_l.constprop.0+0x56>
 801e756:	bf00      	nop
 801e758:	0801f7db 	.word	0x0801f7db

0801e75c <_strtol_r>:
 801e75c:	f7ff bf7c 	b.w	801e658 <_strtol_l.constprop.0>

0801e760 <_strtoul_l.constprop.0>:
 801e760:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801e764:	4686      	mov	lr, r0
 801e766:	460d      	mov	r5, r1
 801e768:	4f35      	ldr	r7, [pc, #212]	; (801e840 <_strtoul_l.constprop.0+0xe0>)
 801e76a:	4628      	mov	r0, r5
 801e76c:	f815 4b01 	ldrb.w	r4, [r5], #1
 801e770:	5d3e      	ldrb	r6, [r7, r4]
 801e772:	f016 0608 	ands.w	r6, r6, #8
 801e776:	d1f8      	bne.n	801e76a <_strtoul_l.constprop.0+0xa>
 801e778:	2c2d      	cmp	r4, #45	; 0x2d
 801e77a:	d130      	bne.n	801e7de <_strtoul_l.constprop.0+0x7e>
 801e77c:	782c      	ldrb	r4, [r5, #0]
 801e77e:	2601      	movs	r6, #1
 801e780:	1c85      	adds	r5, r0, #2
 801e782:	2b00      	cmp	r3, #0
 801e784:	d057      	beq.n	801e836 <_strtoul_l.constprop.0+0xd6>
 801e786:	2b10      	cmp	r3, #16
 801e788:	d109      	bne.n	801e79e <_strtoul_l.constprop.0+0x3e>
 801e78a:	2c30      	cmp	r4, #48	; 0x30
 801e78c:	d107      	bne.n	801e79e <_strtoul_l.constprop.0+0x3e>
 801e78e:	7828      	ldrb	r0, [r5, #0]
 801e790:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 801e794:	2858      	cmp	r0, #88	; 0x58
 801e796:	d149      	bne.n	801e82c <_strtoul_l.constprop.0+0xcc>
 801e798:	786c      	ldrb	r4, [r5, #1]
 801e79a:	2310      	movs	r3, #16
 801e79c:	3502      	adds	r5, #2
 801e79e:	f04f 38ff 	mov.w	r8, #4294967295
 801e7a2:	2700      	movs	r7, #0
 801e7a4:	fbb8 f8f3 	udiv	r8, r8, r3
 801e7a8:	fb03 f908 	mul.w	r9, r3, r8
 801e7ac:	4638      	mov	r0, r7
 801e7ae:	ea6f 0909 	mvn.w	r9, r9
 801e7b2:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 801e7b6:	f1bc 0f09 	cmp.w	ip, #9
 801e7ba:	d815      	bhi.n	801e7e8 <_strtoul_l.constprop.0+0x88>
 801e7bc:	4664      	mov	r4, ip
 801e7be:	42a3      	cmp	r3, r4
 801e7c0:	dd23      	ble.n	801e80a <_strtoul_l.constprop.0+0xaa>
 801e7c2:	f1b7 3fff 	cmp.w	r7, #4294967295
 801e7c6:	d007      	beq.n	801e7d8 <_strtoul_l.constprop.0+0x78>
 801e7c8:	4580      	cmp	r8, r0
 801e7ca:	d31b      	bcc.n	801e804 <_strtoul_l.constprop.0+0xa4>
 801e7cc:	d101      	bne.n	801e7d2 <_strtoul_l.constprop.0+0x72>
 801e7ce:	45a1      	cmp	r9, r4
 801e7d0:	db18      	blt.n	801e804 <_strtoul_l.constprop.0+0xa4>
 801e7d2:	fb00 4003 	mla	r0, r0, r3, r4
 801e7d6:	2701      	movs	r7, #1
 801e7d8:	f815 4b01 	ldrb.w	r4, [r5], #1
 801e7dc:	e7e9      	b.n	801e7b2 <_strtoul_l.constprop.0+0x52>
 801e7de:	2c2b      	cmp	r4, #43	; 0x2b
 801e7e0:	bf04      	itt	eq
 801e7e2:	782c      	ldrbeq	r4, [r5, #0]
 801e7e4:	1c85      	addeq	r5, r0, #2
 801e7e6:	e7cc      	b.n	801e782 <_strtoul_l.constprop.0+0x22>
 801e7e8:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 801e7ec:	f1bc 0f19 	cmp.w	ip, #25
 801e7f0:	d801      	bhi.n	801e7f6 <_strtoul_l.constprop.0+0x96>
 801e7f2:	3c37      	subs	r4, #55	; 0x37
 801e7f4:	e7e3      	b.n	801e7be <_strtoul_l.constprop.0+0x5e>
 801e7f6:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 801e7fa:	f1bc 0f19 	cmp.w	ip, #25
 801e7fe:	d804      	bhi.n	801e80a <_strtoul_l.constprop.0+0xaa>
 801e800:	3c57      	subs	r4, #87	; 0x57
 801e802:	e7dc      	b.n	801e7be <_strtoul_l.constprop.0+0x5e>
 801e804:	f04f 37ff 	mov.w	r7, #4294967295
 801e808:	e7e6      	b.n	801e7d8 <_strtoul_l.constprop.0+0x78>
 801e80a:	1c7b      	adds	r3, r7, #1
 801e80c:	d106      	bne.n	801e81c <_strtoul_l.constprop.0+0xbc>
 801e80e:	2322      	movs	r3, #34	; 0x22
 801e810:	4638      	mov	r0, r7
 801e812:	f8ce 3000 	str.w	r3, [lr]
 801e816:	b932      	cbnz	r2, 801e826 <_strtoul_l.constprop.0+0xc6>
 801e818:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801e81c:	b106      	cbz	r6, 801e820 <_strtoul_l.constprop.0+0xc0>
 801e81e:	4240      	negs	r0, r0
 801e820:	2a00      	cmp	r2, #0
 801e822:	d0f9      	beq.n	801e818 <_strtoul_l.constprop.0+0xb8>
 801e824:	b107      	cbz	r7, 801e828 <_strtoul_l.constprop.0+0xc8>
 801e826:	1e69      	subs	r1, r5, #1
 801e828:	6011      	str	r1, [r2, #0]
 801e82a:	e7f5      	b.n	801e818 <_strtoul_l.constprop.0+0xb8>
 801e82c:	2430      	movs	r4, #48	; 0x30
 801e82e:	2b00      	cmp	r3, #0
 801e830:	d1b5      	bne.n	801e79e <_strtoul_l.constprop.0+0x3e>
 801e832:	2308      	movs	r3, #8
 801e834:	e7b3      	b.n	801e79e <_strtoul_l.constprop.0+0x3e>
 801e836:	2c30      	cmp	r4, #48	; 0x30
 801e838:	d0a9      	beq.n	801e78e <_strtoul_l.constprop.0+0x2e>
 801e83a:	230a      	movs	r3, #10
 801e83c:	e7af      	b.n	801e79e <_strtoul_l.constprop.0+0x3e>
 801e83e:	bf00      	nop
 801e840:	0801f7db 	.word	0x0801f7db

0801e844 <_strtoul_r>:
 801e844:	f7ff bf8c 	b.w	801e760 <_strtoul_l.constprop.0>

0801e848 <__sfputc_r>:
 801e848:	6893      	ldr	r3, [r2, #8]
 801e84a:	3b01      	subs	r3, #1
 801e84c:	2b00      	cmp	r3, #0
 801e84e:	6093      	str	r3, [r2, #8]
 801e850:	b410      	push	{r4}
 801e852:	da08      	bge.n	801e866 <__sfputc_r+0x1e>
 801e854:	6994      	ldr	r4, [r2, #24]
 801e856:	42a3      	cmp	r3, r4
 801e858:	db01      	blt.n	801e85e <__sfputc_r+0x16>
 801e85a:	290a      	cmp	r1, #10
 801e85c:	d103      	bne.n	801e866 <__sfputc_r+0x1e>
 801e85e:	f85d 4b04 	ldr.w	r4, [sp], #4
 801e862:	f000 bac7 	b.w	801edf4 <__swbuf_r>
 801e866:	6813      	ldr	r3, [r2, #0]
 801e868:	1c58      	adds	r0, r3, #1
 801e86a:	6010      	str	r0, [r2, #0]
 801e86c:	4608      	mov	r0, r1
 801e86e:	7019      	strb	r1, [r3, #0]
 801e870:	f85d 4b04 	ldr.w	r4, [sp], #4
 801e874:	4770      	bx	lr

0801e876 <__sfputs_r>:
 801e876:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e878:	4606      	mov	r6, r0
 801e87a:	460f      	mov	r7, r1
 801e87c:	4614      	mov	r4, r2
 801e87e:	18d5      	adds	r5, r2, r3
 801e880:	42ac      	cmp	r4, r5
 801e882:	d101      	bne.n	801e888 <__sfputs_r+0x12>
 801e884:	2000      	movs	r0, #0
 801e886:	e007      	b.n	801e898 <__sfputs_r+0x22>
 801e888:	463a      	mov	r2, r7
 801e88a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801e88e:	4630      	mov	r0, r6
 801e890:	f7ff ffda 	bl	801e848 <__sfputc_r>
 801e894:	1c43      	adds	r3, r0, #1
 801e896:	d1f3      	bne.n	801e880 <__sfputs_r+0xa>
 801e898:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801e89c <_vfiprintf_r>:
 801e89c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e8a0:	460d      	mov	r5, r1
 801e8a2:	b09d      	sub	sp, #116	; 0x74
 801e8a4:	4614      	mov	r4, r2
 801e8a6:	4698      	mov	r8, r3
 801e8a8:	4606      	mov	r6, r0
 801e8aa:	b118      	cbz	r0, 801e8b4 <_vfiprintf_r+0x18>
 801e8ac:	6a03      	ldr	r3, [r0, #32]
 801e8ae:	b90b      	cbnz	r3, 801e8b4 <_vfiprintf_r+0x18>
 801e8b0:	f7ff f840 	bl	801d934 <__sinit>
 801e8b4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801e8b6:	07d9      	lsls	r1, r3, #31
 801e8b8:	d405      	bmi.n	801e8c6 <_vfiprintf_r+0x2a>
 801e8ba:	89ab      	ldrh	r3, [r5, #12]
 801e8bc:	059a      	lsls	r2, r3, #22
 801e8be:	d402      	bmi.n	801e8c6 <_vfiprintf_r+0x2a>
 801e8c0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801e8c2:	f7ff f9c6 	bl	801dc52 <__retarget_lock_acquire_recursive>
 801e8c6:	89ab      	ldrh	r3, [r5, #12]
 801e8c8:	071b      	lsls	r3, r3, #28
 801e8ca:	d501      	bpl.n	801e8d0 <_vfiprintf_r+0x34>
 801e8cc:	692b      	ldr	r3, [r5, #16]
 801e8ce:	b99b      	cbnz	r3, 801e8f8 <_vfiprintf_r+0x5c>
 801e8d0:	4629      	mov	r1, r5
 801e8d2:	4630      	mov	r0, r6
 801e8d4:	f000 facc 	bl	801ee70 <__swsetup_r>
 801e8d8:	b170      	cbz	r0, 801e8f8 <_vfiprintf_r+0x5c>
 801e8da:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801e8dc:	07dc      	lsls	r4, r3, #31
 801e8de:	d504      	bpl.n	801e8ea <_vfiprintf_r+0x4e>
 801e8e0:	f04f 30ff 	mov.w	r0, #4294967295
 801e8e4:	b01d      	add	sp, #116	; 0x74
 801e8e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e8ea:	89ab      	ldrh	r3, [r5, #12]
 801e8ec:	0598      	lsls	r0, r3, #22
 801e8ee:	d4f7      	bmi.n	801e8e0 <_vfiprintf_r+0x44>
 801e8f0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801e8f2:	f7ff f9af 	bl	801dc54 <__retarget_lock_release_recursive>
 801e8f6:	e7f3      	b.n	801e8e0 <_vfiprintf_r+0x44>
 801e8f8:	2300      	movs	r3, #0
 801e8fa:	f8cd 800c 	str.w	r8, [sp, #12]
 801e8fe:	f04f 0901 	mov.w	r9, #1
 801e902:	f8df 81b8 	ldr.w	r8, [pc, #440]	; 801eabc <_vfiprintf_r+0x220>
 801e906:	9309      	str	r3, [sp, #36]	; 0x24
 801e908:	2320      	movs	r3, #32
 801e90a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801e90e:	2330      	movs	r3, #48	; 0x30
 801e910:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801e914:	4623      	mov	r3, r4
 801e916:	469a      	mov	sl, r3
 801e918:	f813 2b01 	ldrb.w	r2, [r3], #1
 801e91c:	b10a      	cbz	r2, 801e922 <_vfiprintf_r+0x86>
 801e91e:	2a25      	cmp	r2, #37	; 0x25
 801e920:	d1f9      	bne.n	801e916 <_vfiprintf_r+0x7a>
 801e922:	ebba 0b04 	subs.w	fp, sl, r4
 801e926:	d00b      	beq.n	801e940 <_vfiprintf_r+0xa4>
 801e928:	465b      	mov	r3, fp
 801e92a:	4622      	mov	r2, r4
 801e92c:	4629      	mov	r1, r5
 801e92e:	4630      	mov	r0, r6
 801e930:	f7ff ffa1 	bl	801e876 <__sfputs_r>
 801e934:	3001      	adds	r0, #1
 801e936:	f000 80a9 	beq.w	801ea8c <_vfiprintf_r+0x1f0>
 801e93a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801e93c:	445a      	add	r2, fp
 801e93e:	9209      	str	r2, [sp, #36]	; 0x24
 801e940:	f89a 3000 	ldrb.w	r3, [sl]
 801e944:	2b00      	cmp	r3, #0
 801e946:	f000 80a1 	beq.w	801ea8c <_vfiprintf_r+0x1f0>
 801e94a:	2300      	movs	r3, #0
 801e94c:	f04f 32ff 	mov.w	r2, #4294967295
 801e950:	f10a 0a01 	add.w	sl, sl, #1
 801e954:	9304      	str	r3, [sp, #16]
 801e956:	9307      	str	r3, [sp, #28]
 801e958:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801e95c:	931a      	str	r3, [sp, #104]	; 0x68
 801e95e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801e962:	4654      	mov	r4, sl
 801e964:	2205      	movs	r2, #5
 801e966:	4855      	ldr	r0, [pc, #340]	; (801eabc <_vfiprintf_r+0x220>)
 801e968:	f814 1b01 	ldrb.w	r1, [r4], #1
 801e96c:	f7ff fe36 	bl	801e5dc <memchr>
 801e970:	9a04      	ldr	r2, [sp, #16]
 801e972:	b9d8      	cbnz	r0, 801e9ac <_vfiprintf_r+0x110>
 801e974:	06d1      	lsls	r1, r2, #27
 801e976:	bf44      	itt	mi
 801e978:	2320      	movmi	r3, #32
 801e97a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801e97e:	0713      	lsls	r3, r2, #28
 801e980:	bf44      	itt	mi
 801e982:	232b      	movmi	r3, #43	; 0x2b
 801e984:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801e988:	f89a 3000 	ldrb.w	r3, [sl]
 801e98c:	2b2a      	cmp	r3, #42	; 0x2a
 801e98e:	d015      	beq.n	801e9bc <_vfiprintf_r+0x120>
 801e990:	9a07      	ldr	r2, [sp, #28]
 801e992:	4654      	mov	r4, sl
 801e994:	2000      	movs	r0, #0
 801e996:	f04f 0c0a 	mov.w	ip, #10
 801e99a:	4621      	mov	r1, r4
 801e99c:	f811 3b01 	ldrb.w	r3, [r1], #1
 801e9a0:	3b30      	subs	r3, #48	; 0x30
 801e9a2:	2b09      	cmp	r3, #9
 801e9a4:	d94d      	bls.n	801ea42 <_vfiprintf_r+0x1a6>
 801e9a6:	b1b0      	cbz	r0, 801e9d6 <_vfiprintf_r+0x13a>
 801e9a8:	9207      	str	r2, [sp, #28]
 801e9aa:	e014      	b.n	801e9d6 <_vfiprintf_r+0x13a>
 801e9ac:	eba0 0308 	sub.w	r3, r0, r8
 801e9b0:	46a2      	mov	sl, r4
 801e9b2:	fa09 f303 	lsl.w	r3, r9, r3
 801e9b6:	4313      	orrs	r3, r2
 801e9b8:	9304      	str	r3, [sp, #16]
 801e9ba:	e7d2      	b.n	801e962 <_vfiprintf_r+0xc6>
 801e9bc:	9b03      	ldr	r3, [sp, #12]
 801e9be:	1d19      	adds	r1, r3, #4
 801e9c0:	681b      	ldr	r3, [r3, #0]
 801e9c2:	2b00      	cmp	r3, #0
 801e9c4:	9103      	str	r1, [sp, #12]
 801e9c6:	bfbb      	ittet	lt
 801e9c8:	425b      	neglt	r3, r3
 801e9ca:	f042 0202 	orrlt.w	r2, r2, #2
 801e9ce:	9307      	strge	r3, [sp, #28]
 801e9d0:	9307      	strlt	r3, [sp, #28]
 801e9d2:	bfb8      	it	lt
 801e9d4:	9204      	strlt	r2, [sp, #16]
 801e9d6:	7823      	ldrb	r3, [r4, #0]
 801e9d8:	2b2e      	cmp	r3, #46	; 0x2e
 801e9da:	d10c      	bne.n	801e9f6 <_vfiprintf_r+0x15a>
 801e9dc:	7863      	ldrb	r3, [r4, #1]
 801e9de:	2b2a      	cmp	r3, #42	; 0x2a
 801e9e0:	d134      	bne.n	801ea4c <_vfiprintf_r+0x1b0>
 801e9e2:	9b03      	ldr	r3, [sp, #12]
 801e9e4:	3402      	adds	r4, #2
 801e9e6:	1d1a      	adds	r2, r3, #4
 801e9e8:	681b      	ldr	r3, [r3, #0]
 801e9ea:	2b00      	cmp	r3, #0
 801e9ec:	9203      	str	r2, [sp, #12]
 801e9ee:	bfb8      	it	lt
 801e9f0:	f04f 33ff 	movlt.w	r3, #4294967295
 801e9f4:	9305      	str	r3, [sp, #20]
 801e9f6:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 801eacc <_vfiprintf_r+0x230>
 801e9fa:	2203      	movs	r2, #3
 801e9fc:	7821      	ldrb	r1, [r4, #0]
 801e9fe:	4650      	mov	r0, sl
 801ea00:	f7ff fdec 	bl	801e5dc <memchr>
 801ea04:	b138      	cbz	r0, 801ea16 <_vfiprintf_r+0x17a>
 801ea06:	eba0 000a 	sub.w	r0, r0, sl
 801ea0a:	2240      	movs	r2, #64	; 0x40
 801ea0c:	9b04      	ldr	r3, [sp, #16]
 801ea0e:	3401      	adds	r4, #1
 801ea10:	4082      	lsls	r2, r0
 801ea12:	4313      	orrs	r3, r2
 801ea14:	9304      	str	r3, [sp, #16]
 801ea16:	f814 1b01 	ldrb.w	r1, [r4], #1
 801ea1a:	2206      	movs	r2, #6
 801ea1c:	4828      	ldr	r0, [pc, #160]	; (801eac0 <_vfiprintf_r+0x224>)
 801ea1e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801ea22:	f7ff fddb 	bl	801e5dc <memchr>
 801ea26:	2800      	cmp	r0, #0
 801ea28:	d03f      	beq.n	801eaaa <_vfiprintf_r+0x20e>
 801ea2a:	4b26      	ldr	r3, [pc, #152]	; (801eac4 <_vfiprintf_r+0x228>)
 801ea2c:	bb1b      	cbnz	r3, 801ea76 <_vfiprintf_r+0x1da>
 801ea2e:	9b03      	ldr	r3, [sp, #12]
 801ea30:	3307      	adds	r3, #7
 801ea32:	f023 0307 	bic.w	r3, r3, #7
 801ea36:	3308      	adds	r3, #8
 801ea38:	9303      	str	r3, [sp, #12]
 801ea3a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ea3c:	443b      	add	r3, r7
 801ea3e:	9309      	str	r3, [sp, #36]	; 0x24
 801ea40:	e768      	b.n	801e914 <_vfiprintf_r+0x78>
 801ea42:	fb0c 3202 	mla	r2, ip, r2, r3
 801ea46:	460c      	mov	r4, r1
 801ea48:	2001      	movs	r0, #1
 801ea4a:	e7a6      	b.n	801e99a <_vfiprintf_r+0xfe>
 801ea4c:	2300      	movs	r3, #0
 801ea4e:	3401      	adds	r4, #1
 801ea50:	f04f 0c0a 	mov.w	ip, #10
 801ea54:	4619      	mov	r1, r3
 801ea56:	9305      	str	r3, [sp, #20]
 801ea58:	4620      	mov	r0, r4
 801ea5a:	f810 2b01 	ldrb.w	r2, [r0], #1
 801ea5e:	3a30      	subs	r2, #48	; 0x30
 801ea60:	2a09      	cmp	r2, #9
 801ea62:	d903      	bls.n	801ea6c <_vfiprintf_r+0x1d0>
 801ea64:	2b00      	cmp	r3, #0
 801ea66:	d0c6      	beq.n	801e9f6 <_vfiprintf_r+0x15a>
 801ea68:	9105      	str	r1, [sp, #20]
 801ea6a:	e7c4      	b.n	801e9f6 <_vfiprintf_r+0x15a>
 801ea6c:	fb0c 2101 	mla	r1, ip, r1, r2
 801ea70:	4604      	mov	r4, r0
 801ea72:	2301      	movs	r3, #1
 801ea74:	e7f0      	b.n	801ea58 <_vfiprintf_r+0x1bc>
 801ea76:	ab03      	add	r3, sp, #12
 801ea78:	462a      	mov	r2, r5
 801ea7a:	a904      	add	r1, sp, #16
 801ea7c:	4630      	mov	r0, r6
 801ea7e:	9300      	str	r3, [sp, #0]
 801ea80:	4b11      	ldr	r3, [pc, #68]	; (801eac8 <_vfiprintf_r+0x22c>)
 801ea82:	f3af 8000 	nop.w
 801ea86:	4607      	mov	r7, r0
 801ea88:	1c78      	adds	r0, r7, #1
 801ea8a:	d1d6      	bne.n	801ea3a <_vfiprintf_r+0x19e>
 801ea8c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801ea8e:	07d9      	lsls	r1, r3, #31
 801ea90:	d405      	bmi.n	801ea9e <_vfiprintf_r+0x202>
 801ea92:	89ab      	ldrh	r3, [r5, #12]
 801ea94:	059a      	lsls	r2, r3, #22
 801ea96:	d402      	bmi.n	801ea9e <_vfiprintf_r+0x202>
 801ea98:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801ea9a:	f7ff f8db 	bl	801dc54 <__retarget_lock_release_recursive>
 801ea9e:	89ab      	ldrh	r3, [r5, #12]
 801eaa0:	065b      	lsls	r3, r3, #25
 801eaa2:	f53f af1d 	bmi.w	801e8e0 <_vfiprintf_r+0x44>
 801eaa6:	9809      	ldr	r0, [sp, #36]	; 0x24
 801eaa8:	e71c      	b.n	801e8e4 <_vfiprintf_r+0x48>
 801eaaa:	ab03      	add	r3, sp, #12
 801eaac:	462a      	mov	r2, r5
 801eaae:	a904      	add	r1, sp, #16
 801eab0:	4630      	mov	r0, r6
 801eab2:	9300      	str	r3, [sp, #0]
 801eab4:	4b04      	ldr	r3, [pc, #16]	; (801eac8 <_vfiprintf_r+0x22c>)
 801eab6:	f000 f87d 	bl	801ebb4 <_printf_i>
 801eaba:	e7e4      	b.n	801ea86 <_vfiprintf_r+0x1ea>
 801eabc:	0801f8db 	.word	0x0801f8db
 801eac0:	0801f8e1 	.word	0x0801f8e1
 801eac4:	00000000 	.word	0x00000000
 801eac8:	0801e877 	.word	0x0801e877
 801eacc:	0801f7bb 	.word	0x0801f7bb

0801ead0 <_printf_common>:
 801ead0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801ead4:	4616      	mov	r6, r2
 801ead6:	4699      	mov	r9, r3
 801ead8:	688a      	ldr	r2, [r1, #8]
 801eada:	4607      	mov	r7, r0
 801eadc:	690b      	ldr	r3, [r1, #16]
 801eade:	460c      	mov	r4, r1
 801eae0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801eae4:	4293      	cmp	r3, r2
 801eae6:	bfb8      	it	lt
 801eae8:	4613      	movlt	r3, r2
 801eaea:	6033      	str	r3, [r6, #0]
 801eaec:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801eaf0:	b10a      	cbz	r2, 801eaf6 <_printf_common+0x26>
 801eaf2:	3301      	adds	r3, #1
 801eaf4:	6033      	str	r3, [r6, #0]
 801eaf6:	6823      	ldr	r3, [r4, #0]
 801eaf8:	0699      	lsls	r1, r3, #26
 801eafa:	bf42      	ittt	mi
 801eafc:	6833      	ldrmi	r3, [r6, #0]
 801eafe:	3302      	addmi	r3, #2
 801eb00:	6033      	strmi	r3, [r6, #0]
 801eb02:	6825      	ldr	r5, [r4, #0]
 801eb04:	f015 0506 	ands.w	r5, r5, #6
 801eb08:	d106      	bne.n	801eb18 <_printf_common+0x48>
 801eb0a:	f104 0a19 	add.w	sl, r4, #25
 801eb0e:	68e3      	ldr	r3, [r4, #12]
 801eb10:	6832      	ldr	r2, [r6, #0]
 801eb12:	1a9b      	subs	r3, r3, r2
 801eb14:	42ab      	cmp	r3, r5
 801eb16:	dc2b      	bgt.n	801eb70 <_printf_common+0xa0>
 801eb18:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801eb1c:	1e13      	subs	r3, r2, #0
 801eb1e:	6822      	ldr	r2, [r4, #0]
 801eb20:	bf18      	it	ne
 801eb22:	2301      	movne	r3, #1
 801eb24:	0692      	lsls	r2, r2, #26
 801eb26:	d430      	bmi.n	801eb8a <_printf_common+0xba>
 801eb28:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801eb2c:	4649      	mov	r1, r9
 801eb2e:	4638      	mov	r0, r7
 801eb30:	47c0      	blx	r8
 801eb32:	3001      	adds	r0, #1
 801eb34:	d023      	beq.n	801eb7e <_printf_common+0xae>
 801eb36:	6823      	ldr	r3, [r4, #0]
 801eb38:	341a      	adds	r4, #26
 801eb3a:	f854 2c0a 	ldr.w	r2, [r4, #-10]
 801eb3e:	f003 0306 	and.w	r3, r3, #6
 801eb42:	2b04      	cmp	r3, #4
 801eb44:	bf0a      	itet	eq
 801eb46:	f854 5c0e 	ldreq.w	r5, [r4, #-14]
 801eb4a:	2500      	movne	r5, #0
 801eb4c:	6833      	ldreq	r3, [r6, #0]
 801eb4e:	f04f 0600 	mov.w	r6, #0
 801eb52:	bf08      	it	eq
 801eb54:	1aed      	subeq	r5, r5, r3
 801eb56:	f854 3c12 	ldr.w	r3, [r4, #-18]
 801eb5a:	bf08      	it	eq
 801eb5c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801eb60:	4293      	cmp	r3, r2
 801eb62:	bfc4      	itt	gt
 801eb64:	1a9b      	subgt	r3, r3, r2
 801eb66:	18ed      	addgt	r5, r5, r3
 801eb68:	42b5      	cmp	r5, r6
 801eb6a:	d11a      	bne.n	801eba2 <_printf_common+0xd2>
 801eb6c:	2000      	movs	r0, #0
 801eb6e:	e008      	b.n	801eb82 <_printf_common+0xb2>
 801eb70:	2301      	movs	r3, #1
 801eb72:	4652      	mov	r2, sl
 801eb74:	4649      	mov	r1, r9
 801eb76:	4638      	mov	r0, r7
 801eb78:	47c0      	blx	r8
 801eb7a:	3001      	adds	r0, #1
 801eb7c:	d103      	bne.n	801eb86 <_printf_common+0xb6>
 801eb7e:	f04f 30ff 	mov.w	r0, #4294967295
 801eb82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801eb86:	3501      	adds	r5, #1
 801eb88:	e7c1      	b.n	801eb0e <_printf_common+0x3e>
 801eb8a:	18e1      	adds	r1, r4, r3
 801eb8c:	1c5a      	adds	r2, r3, #1
 801eb8e:	2030      	movs	r0, #48	; 0x30
 801eb90:	3302      	adds	r3, #2
 801eb92:	4422      	add	r2, r4
 801eb94:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801eb98:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801eb9c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801eba0:	e7c2      	b.n	801eb28 <_printf_common+0x58>
 801eba2:	2301      	movs	r3, #1
 801eba4:	4622      	mov	r2, r4
 801eba6:	4649      	mov	r1, r9
 801eba8:	4638      	mov	r0, r7
 801ebaa:	47c0      	blx	r8
 801ebac:	3001      	adds	r0, #1
 801ebae:	d0e6      	beq.n	801eb7e <_printf_common+0xae>
 801ebb0:	3601      	adds	r6, #1
 801ebb2:	e7d9      	b.n	801eb68 <_printf_common+0x98>

0801ebb4 <_printf_i>:
 801ebb4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801ebb8:	7e0f      	ldrb	r7, [r1, #24]
 801ebba:	4691      	mov	r9, r2
 801ebbc:	4680      	mov	r8, r0
 801ebbe:	460c      	mov	r4, r1
 801ebc0:	2f78      	cmp	r7, #120	; 0x78
 801ebc2:	469a      	mov	sl, r3
 801ebc4:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801ebc6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 801ebca:	d807      	bhi.n	801ebdc <_printf_i+0x28>
 801ebcc:	2f62      	cmp	r7, #98	; 0x62
 801ebce:	d80a      	bhi.n	801ebe6 <_printf_i+0x32>
 801ebd0:	2f00      	cmp	r7, #0
 801ebd2:	f000 80d3 	beq.w	801ed7c <_printf_i+0x1c8>
 801ebd6:	2f58      	cmp	r7, #88	; 0x58
 801ebd8:	f000 80bf 	beq.w	801ed5a <_printf_i+0x1a6>
 801ebdc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801ebe0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801ebe4:	e03a      	b.n	801ec5c <_printf_i+0xa8>
 801ebe6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801ebea:	2b15      	cmp	r3, #21
 801ebec:	d8f6      	bhi.n	801ebdc <_printf_i+0x28>
 801ebee:	a101      	add	r1, pc, #4	; (adr r1, 801ebf4 <_printf_i+0x40>)
 801ebf0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801ebf4:	0801ec4d 	.word	0x0801ec4d
 801ebf8:	0801ec61 	.word	0x0801ec61
 801ebfc:	0801ebdd 	.word	0x0801ebdd
 801ec00:	0801ebdd 	.word	0x0801ebdd
 801ec04:	0801ebdd 	.word	0x0801ebdd
 801ec08:	0801ebdd 	.word	0x0801ebdd
 801ec0c:	0801ec61 	.word	0x0801ec61
 801ec10:	0801ebdd 	.word	0x0801ebdd
 801ec14:	0801ebdd 	.word	0x0801ebdd
 801ec18:	0801ebdd 	.word	0x0801ebdd
 801ec1c:	0801ebdd 	.word	0x0801ebdd
 801ec20:	0801ed63 	.word	0x0801ed63
 801ec24:	0801ec8d 	.word	0x0801ec8d
 801ec28:	0801ed1f 	.word	0x0801ed1f
 801ec2c:	0801ebdd 	.word	0x0801ebdd
 801ec30:	0801ebdd 	.word	0x0801ebdd
 801ec34:	0801ed85 	.word	0x0801ed85
 801ec38:	0801ebdd 	.word	0x0801ebdd
 801ec3c:	0801ec8d 	.word	0x0801ec8d
 801ec40:	0801ebdd 	.word	0x0801ebdd
 801ec44:	0801ebdd 	.word	0x0801ebdd
 801ec48:	0801ed27 	.word	0x0801ed27
 801ec4c:	682b      	ldr	r3, [r5, #0]
 801ec4e:	1d1a      	adds	r2, r3, #4
 801ec50:	681b      	ldr	r3, [r3, #0]
 801ec52:	602a      	str	r2, [r5, #0]
 801ec54:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801ec58:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801ec5c:	2301      	movs	r3, #1
 801ec5e:	e09e      	b.n	801ed9e <_printf_i+0x1ea>
 801ec60:	6820      	ldr	r0, [r4, #0]
 801ec62:	682b      	ldr	r3, [r5, #0]
 801ec64:	0607      	lsls	r7, r0, #24
 801ec66:	f103 0104 	add.w	r1, r3, #4
 801ec6a:	6029      	str	r1, [r5, #0]
 801ec6c:	d501      	bpl.n	801ec72 <_printf_i+0xbe>
 801ec6e:	681e      	ldr	r6, [r3, #0]
 801ec70:	e003      	b.n	801ec7a <_printf_i+0xc6>
 801ec72:	0646      	lsls	r6, r0, #25
 801ec74:	d5fb      	bpl.n	801ec6e <_printf_i+0xba>
 801ec76:	f9b3 6000 	ldrsh.w	r6, [r3]
 801ec7a:	2e00      	cmp	r6, #0
 801ec7c:	da03      	bge.n	801ec86 <_printf_i+0xd2>
 801ec7e:	232d      	movs	r3, #45	; 0x2d
 801ec80:	4276      	negs	r6, r6
 801ec82:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801ec86:	4859      	ldr	r0, [pc, #356]	; (801edec <_printf_i+0x238>)
 801ec88:	230a      	movs	r3, #10
 801ec8a:	e012      	b.n	801ecb2 <_printf_i+0xfe>
 801ec8c:	682b      	ldr	r3, [r5, #0]
 801ec8e:	6820      	ldr	r0, [r4, #0]
 801ec90:	1d19      	adds	r1, r3, #4
 801ec92:	6029      	str	r1, [r5, #0]
 801ec94:	0605      	lsls	r5, r0, #24
 801ec96:	d501      	bpl.n	801ec9c <_printf_i+0xe8>
 801ec98:	681e      	ldr	r6, [r3, #0]
 801ec9a:	e002      	b.n	801eca2 <_printf_i+0xee>
 801ec9c:	0641      	lsls	r1, r0, #25
 801ec9e:	d5fb      	bpl.n	801ec98 <_printf_i+0xe4>
 801eca0:	881e      	ldrh	r6, [r3, #0]
 801eca2:	2f6f      	cmp	r7, #111	; 0x6f
 801eca4:	4851      	ldr	r0, [pc, #324]	; (801edec <_printf_i+0x238>)
 801eca6:	bf0c      	ite	eq
 801eca8:	2308      	moveq	r3, #8
 801ecaa:	230a      	movne	r3, #10
 801ecac:	2100      	movs	r1, #0
 801ecae:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801ecb2:	6865      	ldr	r5, [r4, #4]
 801ecb4:	2d00      	cmp	r5, #0
 801ecb6:	60a5      	str	r5, [r4, #8]
 801ecb8:	bfa2      	ittt	ge
 801ecba:	6821      	ldrge	r1, [r4, #0]
 801ecbc:	f021 0104 	bicge.w	r1, r1, #4
 801ecc0:	6021      	strge	r1, [r4, #0]
 801ecc2:	b90e      	cbnz	r6, 801ecc8 <_printf_i+0x114>
 801ecc4:	2d00      	cmp	r5, #0
 801ecc6:	d04a      	beq.n	801ed5e <_printf_i+0x1aa>
 801ecc8:	4615      	mov	r5, r2
 801ecca:	fbb6 f1f3 	udiv	r1, r6, r3
 801ecce:	fb03 6711 	mls	r7, r3, r1, r6
 801ecd2:	5dc7      	ldrb	r7, [r0, r7]
 801ecd4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 801ecd8:	4637      	mov	r7, r6
 801ecda:	460e      	mov	r6, r1
 801ecdc:	42bb      	cmp	r3, r7
 801ecde:	d9f4      	bls.n	801ecca <_printf_i+0x116>
 801ece0:	2b08      	cmp	r3, #8
 801ece2:	d10b      	bne.n	801ecfc <_printf_i+0x148>
 801ece4:	6823      	ldr	r3, [r4, #0]
 801ece6:	07de      	lsls	r6, r3, #31
 801ece8:	d508      	bpl.n	801ecfc <_printf_i+0x148>
 801ecea:	6923      	ldr	r3, [r4, #16]
 801ecec:	6861      	ldr	r1, [r4, #4]
 801ecee:	4299      	cmp	r1, r3
 801ecf0:	bfde      	ittt	le
 801ecf2:	2330      	movle	r3, #48	; 0x30
 801ecf4:	f805 3c01 	strble.w	r3, [r5, #-1]
 801ecf8:	f105 35ff 	addle.w	r5, r5, #4294967295
 801ecfc:	1b52      	subs	r2, r2, r5
 801ecfe:	6122      	str	r2, [r4, #16]
 801ed00:	464b      	mov	r3, r9
 801ed02:	aa03      	add	r2, sp, #12
 801ed04:	4621      	mov	r1, r4
 801ed06:	4640      	mov	r0, r8
 801ed08:	f8cd a000 	str.w	sl, [sp]
 801ed0c:	f7ff fee0 	bl	801ead0 <_printf_common>
 801ed10:	3001      	adds	r0, #1
 801ed12:	d149      	bne.n	801eda8 <_printf_i+0x1f4>
 801ed14:	f04f 30ff 	mov.w	r0, #4294967295
 801ed18:	b004      	add	sp, #16
 801ed1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801ed1e:	6823      	ldr	r3, [r4, #0]
 801ed20:	f043 0320 	orr.w	r3, r3, #32
 801ed24:	6023      	str	r3, [r4, #0]
 801ed26:	2778      	movs	r7, #120	; 0x78
 801ed28:	4831      	ldr	r0, [pc, #196]	; (801edf0 <_printf_i+0x23c>)
 801ed2a:	6823      	ldr	r3, [r4, #0]
 801ed2c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 801ed30:	061f      	lsls	r7, r3, #24
 801ed32:	6829      	ldr	r1, [r5, #0]
 801ed34:	f851 6b04 	ldr.w	r6, [r1], #4
 801ed38:	d402      	bmi.n	801ed40 <_printf_i+0x18c>
 801ed3a:	065f      	lsls	r7, r3, #25
 801ed3c:	bf48      	it	mi
 801ed3e:	b2b6      	uxthmi	r6, r6
 801ed40:	07df      	lsls	r7, r3, #31
 801ed42:	6029      	str	r1, [r5, #0]
 801ed44:	bf44      	itt	mi
 801ed46:	f043 0320 	orrmi.w	r3, r3, #32
 801ed4a:	6023      	strmi	r3, [r4, #0]
 801ed4c:	b91e      	cbnz	r6, 801ed56 <_printf_i+0x1a2>
 801ed4e:	6823      	ldr	r3, [r4, #0]
 801ed50:	f023 0320 	bic.w	r3, r3, #32
 801ed54:	6023      	str	r3, [r4, #0]
 801ed56:	2310      	movs	r3, #16
 801ed58:	e7a8      	b.n	801ecac <_printf_i+0xf8>
 801ed5a:	4824      	ldr	r0, [pc, #144]	; (801edec <_printf_i+0x238>)
 801ed5c:	e7e5      	b.n	801ed2a <_printf_i+0x176>
 801ed5e:	4615      	mov	r5, r2
 801ed60:	e7be      	b.n	801ece0 <_printf_i+0x12c>
 801ed62:	682b      	ldr	r3, [r5, #0]
 801ed64:	6826      	ldr	r6, [r4, #0]
 801ed66:	1d18      	adds	r0, r3, #4
 801ed68:	6961      	ldr	r1, [r4, #20]
 801ed6a:	6028      	str	r0, [r5, #0]
 801ed6c:	0635      	lsls	r5, r6, #24
 801ed6e:	681b      	ldr	r3, [r3, #0]
 801ed70:	d501      	bpl.n	801ed76 <_printf_i+0x1c2>
 801ed72:	6019      	str	r1, [r3, #0]
 801ed74:	e002      	b.n	801ed7c <_printf_i+0x1c8>
 801ed76:	0670      	lsls	r0, r6, #25
 801ed78:	d5fb      	bpl.n	801ed72 <_printf_i+0x1be>
 801ed7a:	8019      	strh	r1, [r3, #0]
 801ed7c:	2300      	movs	r3, #0
 801ed7e:	4615      	mov	r5, r2
 801ed80:	6123      	str	r3, [r4, #16]
 801ed82:	e7bd      	b.n	801ed00 <_printf_i+0x14c>
 801ed84:	682b      	ldr	r3, [r5, #0]
 801ed86:	2100      	movs	r1, #0
 801ed88:	1d1a      	adds	r2, r3, #4
 801ed8a:	602a      	str	r2, [r5, #0]
 801ed8c:	681d      	ldr	r5, [r3, #0]
 801ed8e:	6862      	ldr	r2, [r4, #4]
 801ed90:	4628      	mov	r0, r5
 801ed92:	f7ff fc23 	bl	801e5dc <memchr>
 801ed96:	b108      	cbz	r0, 801ed9c <_printf_i+0x1e8>
 801ed98:	1b40      	subs	r0, r0, r5
 801ed9a:	6060      	str	r0, [r4, #4]
 801ed9c:	6863      	ldr	r3, [r4, #4]
 801ed9e:	6123      	str	r3, [r4, #16]
 801eda0:	2300      	movs	r3, #0
 801eda2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801eda6:	e7ab      	b.n	801ed00 <_printf_i+0x14c>
 801eda8:	6923      	ldr	r3, [r4, #16]
 801edaa:	462a      	mov	r2, r5
 801edac:	4649      	mov	r1, r9
 801edae:	4640      	mov	r0, r8
 801edb0:	47d0      	blx	sl
 801edb2:	3001      	adds	r0, #1
 801edb4:	d0ae      	beq.n	801ed14 <_printf_i+0x160>
 801edb6:	6823      	ldr	r3, [r4, #0]
 801edb8:	079b      	lsls	r3, r3, #30
 801edba:	d413      	bmi.n	801ede4 <_printf_i+0x230>
 801edbc:	68e0      	ldr	r0, [r4, #12]
 801edbe:	9b03      	ldr	r3, [sp, #12]
 801edc0:	4298      	cmp	r0, r3
 801edc2:	bfb8      	it	lt
 801edc4:	4618      	movlt	r0, r3
 801edc6:	e7a7      	b.n	801ed18 <_printf_i+0x164>
 801edc8:	2301      	movs	r3, #1
 801edca:	4632      	mov	r2, r6
 801edcc:	4649      	mov	r1, r9
 801edce:	4640      	mov	r0, r8
 801edd0:	47d0      	blx	sl
 801edd2:	3001      	adds	r0, #1
 801edd4:	d09e      	beq.n	801ed14 <_printf_i+0x160>
 801edd6:	3501      	adds	r5, #1
 801edd8:	68e3      	ldr	r3, [r4, #12]
 801edda:	9903      	ldr	r1, [sp, #12]
 801eddc:	1a5b      	subs	r3, r3, r1
 801edde:	42ab      	cmp	r3, r5
 801ede0:	dcf2      	bgt.n	801edc8 <_printf_i+0x214>
 801ede2:	e7eb      	b.n	801edbc <_printf_i+0x208>
 801ede4:	2500      	movs	r5, #0
 801ede6:	f104 0619 	add.w	r6, r4, #25
 801edea:	e7f5      	b.n	801edd8 <_printf_i+0x224>
 801edec:	0801f8e8 	.word	0x0801f8e8
 801edf0:	0801f8f9 	.word	0x0801f8f9

0801edf4 <__swbuf_r>:
 801edf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801edf6:	460e      	mov	r6, r1
 801edf8:	4614      	mov	r4, r2
 801edfa:	4605      	mov	r5, r0
 801edfc:	b118      	cbz	r0, 801ee06 <__swbuf_r+0x12>
 801edfe:	6a03      	ldr	r3, [r0, #32]
 801ee00:	b90b      	cbnz	r3, 801ee06 <__swbuf_r+0x12>
 801ee02:	f7fe fd97 	bl	801d934 <__sinit>
 801ee06:	69a3      	ldr	r3, [r4, #24]
 801ee08:	60a3      	str	r3, [r4, #8]
 801ee0a:	89a3      	ldrh	r3, [r4, #12]
 801ee0c:	071a      	lsls	r2, r3, #28
 801ee0e:	d525      	bpl.n	801ee5c <__swbuf_r+0x68>
 801ee10:	6923      	ldr	r3, [r4, #16]
 801ee12:	b31b      	cbz	r3, 801ee5c <__swbuf_r+0x68>
 801ee14:	6823      	ldr	r3, [r4, #0]
 801ee16:	b2f6      	uxtb	r6, r6
 801ee18:	6922      	ldr	r2, [r4, #16]
 801ee1a:	4637      	mov	r7, r6
 801ee1c:	1a98      	subs	r0, r3, r2
 801ee1e:	6963      	ldr	r3, [r4, #20]
 801ee20:	4283      	cmp	r3, r0
 801ee22:	dc04      	bgt.n	801ee2e <__swbuf_r+0x3a>
 801ee24:	4621      	mov	r1, r4
 801ee26:	4628      	mov	r0, r5
 801ee28:	f7ff fb2e 	bl	801e488 <_fflush_r>
 801ee2c:	b9e0      	cbnz	r0, 801ee68 <__swbuf_r+0x74>
 801ee2e:	68a3      	ldr	r3, [r4, #8]
 801ee30:	3b01      	subs	r3, #1
 801ee32:	60a3      	str	r3, [r4, #8]
 801ee34:	6823      	ldr	r3, [r4, #0]
 801ee36:	1c5a      	adds	r2, r3, #1
 801ee38:	6022      	str	r2, [r4, #0]
 801ee3a:	701e      	strb	r6, [r3, #0]
 801ee3c:	1c43      	adds	r3, r0, #1
 801ee3e:	6962      	ldr	r2, [r4, #20]
 801ee40:	429a      	cmp	r2, r3
 801ee42:	d004      	beq.n	801ee4e <__swbuf_r+0x5a>
 801ee44:	89a3      	ldrh	r3, [r4, #12]
 801ee46:	07db      	lsls	r3, r3, #31
 801ee48:	d506      	bpl.n	801ee58 <__swbuf_r+0x64>
 801ee4a:	2e0a      	cmp	r6, #10
 801ee4c:	d104      	bne.n	801ee58 <__swbuf_r+0x64>
 801ee4e:	4621      	mov	r1, r4
 801ee50:	4628      	mov	r0, r5
 801ee52:	f7ff fb19 	bl	801e488 <_fflush_r>
 801ee56:	b938      	cbnz	r0, 801ee68 <__swbuf_r+0x74>
 801ee58:	4638      	mov	r0, r7
 801ee5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801ee5c:	4621      	mov	r1, r4
 801ee5e:	4628      	mov	r0, r5
 801ee60:	f000 f806 	bl	801ee70 <__swsetup_r>
 801ee64:	2800      	cmp	r0, #0
 801ee66:	d0d5      	beq.n	801ee14 <__swbuf_r+0x20>
 801ee68:	f04f 37ff 	mov.w	r7, #4294967295
 801ee6c:	e7f4      	b.n	801ee58 <__swbuf_r+0x64>
	...

0801ee70 <__swsetup_r>:
 801ee70:	b538      	push	{r3, r4, r5, lr}
 801ee72:	4b2a      	ldr	r3, [pc, #168]	; (801ef1c <__swsetup_r+0xac>)
 801ee74:	4605      	mov	r5, r0
 801ee76:	460c      	mov	r4, r1
 801ee78:	6818      	ldr	r0, [r3, #0]
 801ee7a:	b118      	cbz	r0, 801ee84 <__swsetup_r+0x14>
 801ee7c:	6a03      	ldr	r3, [r0, #32]
 801ee7e:	b90b      	cbnz	r3, 801ee84 <__swsetup_r+0x14>
 801ee80:	f7fe fd58 	bl	801d934 <__sinit>
 801ee84:	89a3      	ldrh	r3, [r4, #12]
 801ee86:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801ee8a:	0718      	lsls	r0, r3, #28
 801ee8c:	d422      	bmi.n	801eed4 <__swsetup_r+0x64>
 801ee8e:	06d9      	lsls	r1, r3, #27
 801ee90:	d407      	bmi.n	801eea2 <__swsetup_r+0x32>
 801ee92:	2309      	movs	r3, #9
 801ee94:	602b      	str	r3, [r5, #0]
 801ee96:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801ee9a:	f04f 30ff 	mov.w	r0, #4294967295
 801ee9e:	81a3      	strh	r3, [r4, #12]
 801eea0:	e034      	b.n	801ef0c <__swsetup_r+0x9c>
 801eea2:	0758      	lsls	r0, r3, #29
 801eea4:	d512      	bpl.n	801eecc <__swsetup_r+0x5c>
 801eea6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801eea8:	b141      	cbz	r1, 801eebc <__swsetup_r+0x4c>
 801eeaa:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801eeae:	4299      	cmp	r1, r3
 801eeb0:	d002      	beq.n	801eeb8 <__swsetup_r+0x48>
 801eeb2:	4628      	mov	r0, r5
 801eeb4:	f7fe fefa 	bl	801dcac <_free_r>
 801eeb8:	2300      	movs	r3, #0
 801eeba:	6363      	str	r3, [r4, #52]	; 0x34
 801eebc:	89a3      	ldrh	r3, [r4, #12]
 801eebe:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801eec2:	81a3      	strh	r3, [r4, #12]
 801eec4:	2300      	movs	r3, #0
 801eec6:	6063      	str	r3, [r4, #4]
 801eec8:	6923      	ldr	r3, [r4, #16]
 801eeca:	6023      	str	r3, [r4, #0]
 801eecc:	89a3      	ldrh	r3, [r4, #12]
 801eece:	f043 0308 	orr.w	r3, r3, #8
 801eed2:	81a3      	strh	r3, [r4, #12]
 801eed4:	6923      	ldr	r3, [r4, #16]
 801eed6:	b94b      	cbnz	r3, 801eeec <__swsetup_r+0x7c>
 801eed8:	89a3      	ldrh	r3, [r4, #12]
 801eeda:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801eede:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801eee2:	d003      	beq.n	801eeec <__swsetup_r+0x7c>
 801eee4:	4621      	mov	r1, r4
 801eee6:	4628      	mov	r0, r5
 801eee8:	f000 f847 	bl	801ef7a <__smakebuf_r>
 801eeec:	89a0      	ldrh	r0, [r4, #12]
 801eeee:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801eef2:	f010 0301 	ands.w	r3, r0, #1
 801eef6:	d00a      	beq.n	801ef0e <__swsetup_r+0x9e>
 801eef8:	2300      	movs	r3, #0
 801eefa:	60a3      	str	r3, [r4, #8]
 801eefc:	6963      	ldr	r3, [r4, #20]
 801eefe:	425b      	negs	r3, r3
 801ef00:	61a3      	str	r3, [r4, #24]
 801ef02:	6923      	ldr	r3, [r4, #16]
 801ef04:	b943      	cbnz	r3, 801ef18 <__swsetup_r+0xa8>
 801ef06:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801ef0a:	d1c4      	bne.n	801ee96 <__swsetup_r+0x26>
 801ef0c:	bd38      	pop	{r3, r4, r5, pc}
 801ef0e:	0781      	lsls	r1, r0, #30
 801ef10:	bf58      	it	pl
 801ef12:	6963      	ldrpl	r3, [r4, #20]
 801ef14:	60a3      	str	r3, [r4, #8]
 801ef16:	e7f4      	b.n	801ef02 <__swsetup_r+0x92>
 801ef18:	2000      	movs	r0, #0
 801ef1a:	e7f7      	b.n	801ef0c <__swsetup_r+0x9c>
 801ef1c:	20000108 	.word	0x20000108

0801ef20 <_malloc_usable_size_r>:
 801ef20:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801ef24:	1f18      	subs	r0, r3, #4
 801ef26:	2b00      	cmp	r3, #0
 801ef28:	bfbc      	itt	lt
 801ef2a:	580b      	ldrlt	r3, [r1, r0]
 801ef2c:	18c0      	addlt	r0, r0, r3
 801ef2e:	4770      	bx	lr

0801ef30 <__swhatbuf_r>:
 801ef30:	b570      	push	{r4, r5, r6, lr}
 801ef32:	460c      	mov	r4, r1
 801ef34:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801ef38:	b096      	sub	sp, #88	; 0x58
 801ef3a:	4615      	mov	r5, r2
 801ef3c:	2900      	cmp	r1, #0
 801ef3e:	461e      	mov	r6, r3
 801ef40:	da0c      	bge.n	801ef5c <__swhatbuf_r+0x2c>
 801ef42:	89a3      	ldrh	r3, [r4, #12]
 801ef44:	2100      	movs	r1, #0
 801ef46:	f013 0f80 	tst.w	r3, #128	; 0x80
 801ef4a:	bf0c      	ite	eq
 801ef4c:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 801ef50:	2340      	movne	r3, #64	; 0x40
 801ef52:	2000      	movs	r0, #0
 801ef54:	6031      	str	r1, [r6, #0]
 801ef56:	602b      	str	r3, [r5, #0]
 801ef58:	b016      	add	sp, #88	; 0x58
 801ef5a:	bd70      	pop	{r4, r5, r6, pc}
 801ef5c:	466a      	mov	r2, sp
 801ef5e:	f000 f849 	bl	801eff4 <_fstat_r>
 801ef62:	2800      	cmp	r0, #0
 801ef64:	dbed      	blt.n	801ef42 <__swhatbuf_r+0x12>
 801ef66:	9901      	ldr	r1, [sp, #4]
 801ef68:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 801ef6c:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 801ef70:	4259      	negs	r1, r3
 801ef72:	4159      	adcs	r1, r3
 801ef74:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801ef78:	e7eb      	b.n	801ef52 <__swhatbuf_r+0x22>

0801ef7a <__smakebuf_r>:
 801ef7a:	898b      	ldrh	r3, [r1, #12]
 801ef7c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801ef7e:	079d      	lsls	r5, r3, #30
 801ef80:	4606      	mov	r6, r0
 801ef82:	460c      	mov	r4, r1
 801ef84:	d507      	bpl.n	801ef96 <__smakebuf_r+0x1c>
 801ef86:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801ef8a:	6023      	str	r3, [r4, #0]
 801ef8c:	6123      	str	r3, [r4, #16]
 801ef8e:	2301      	movs	r3, #1
 801ef90:	6163      	str	r3, [r4, #20]
 801ef92:	b002      	add	sp, #8
 801ef94:	bd70      	pop	{r4, r5, r6, pc}
 801ef96:	ab01      	add	r3, sp, #4
 801ef98:	466a      	mov	r2, sp
 801ef9a:	f7ff ffc9 	bl	801ef30 <__swhatbuf_r>
 801ef9e:	9900      	ldr	r1, [sp, #0]
 801efa0:	4605      	mov	r5, r0
 801efa2:	4630      	mov	r0, r6
 801efa4:	f7fe fb70 	bl	801d688 <_malloc_r>
 801efa8:	b948      	cbnz	r0, 801efbe <__smakebuf_r+0x44>
 801efaa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801efae:	059a      	lsls	r2, r3, #22
 801efb0:	d4ef      	bmi.n	801ef92 <__smakebuf_r+0x18>
 801efb2:	f023 0303 	bic.w	r3, r3, #3
 801efb6:	f043 0302 	orr.w	r3, r3, #2
 801efba:	81a3      	strh	r3, [r4, #12]
 801efbc:	e7e3      	b.n	801ef86 <__smakebuf_r+0xc>
 801efbe:	89a3      	ldrh	r3, [r4, #12]
 801efc0:	6020      	str	r0, [r4, #0]
 801efc2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801efc6:	6120      	str	r0, [r4, #16]
 801efc8:	81a3      	strh	r3, [r4, #12]
 801efca:	9b00      	ldr	r3, [sp, #0]
 801efcc:	6163      	str	r3, [r4, #20]
 801efce:	9b01      	ldr	r3, [sp, #4]
 801efd0:	b15b      	cbz	r3, 801efea <__smakebuf_r+0x70>
 801efd2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801efd6:	4630      	mov	r0, r6
 801efd8:	f000 f81e 	bl	801f018 <_isatty_r>
 801efdc:	b128      	cbz	r0, 801efea <__smakebuf_r+0x70>
 801efde:	89a3      	ldrh	r3, [r4, #12]
 801efe0:	f023 0303 	bic.w	r3, r3, #3
 801efe4:	f043 0301 	orr.w	r3, r3, #1
 801efe8:	81a3      	strh	r3, [r4, #12]
 801efea:	89a3      	ldrh	r3, [r4, #12]
 801efec:	431d      	orrs	r5, r3
 801efee:	81a5      	strh	r5, [r4, #12]
 801eff0:	e7cf      	b.n	801ef92 <__smakebuf_r+0x18>
	...

0801eff4 <_fstat_r>:
 801eff4:	b538      	push	{r3, r4, r5, lr}
 801eff6:	2300      	movs	r3, #0
 801eff8:	4d06      	ldr	r5, [pc, #24]	; (801f014 <_fstat_r+0x20>)
 801effa:	4604      	mov	r4, r0
 801effc:	4608      	mov	r0, r1
 801effe:	4611      	mov	r1, r2
 801f000:	602b      	str	r3, [r5, #0]
 801f002:	f7ef fba2 	bl	800e74a <_fstat>
 801f006:	1c43      	adds	r3, r0, #1
 801f008:	d102      	bne.n	801f010 <_fstat_r+0x1c>
 801f00a:	682b      	ldr	r3, [r5, #0]
 801f00c:	b103      	cbz	r3, 801f010 <_fstat_r+0x1c>
 801f00e:	6023      	str	r3, [r4, #0]
 801f010:	bd38      	pop	{r3, r4, r5, pc}
 801f012:	bf00      	nop
 801f014:	20003a70 	.word	0x20003a70

0801f018 <_isatty_r>:
 801f018:	b538      	push	{r3, r4, r5, lr}
 801f01a:	2300      	movs	r3, #0
 801f01c:	4d05      	ldr	r5, [pc, #20]	; (801f034 <_isatty_r+0x1c>)
 801f01e:	4604      	mov	r4, r0
 801f020:	4608      	mov	r0, r1
 801f022:	602b      	str	r3, [r5, #0]
 801f024:	f7ef fba1 	bl	800e76a <_isatty>
 801f028:	1c43      	adds	r3, r0, #1
 801f02a:	d102      	bne.n	801f032 <_isatty_r+0x1a>
 801f02c:	682b      	ldr	r3, [r5, #0]
 801f02e:	b103      	cbz	r3, 801f032 <_isatty_r+0x1a>
 801f030:	6023      	str	r3, [r4, #0]
 801f032:	bd38      	pop	{r3, r4, r5, pc}
 801f034:	20003a70 	.word	0x20003a70

0801f038 <_init>:
 801f038:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801f03a:	bf00      	nop
 801f03c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801f03e:	bc08      	pop	{r3}
 801f040:	469e      	mov	lr, r3
 801f042:	4770      	bx	lr

0801f044 <_fini>:
 801f044:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801f046:	bf00      	nop
 801f048:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801f04a:	bc08      	pop	{r3}
 801f04c:	469e      	mov	lr, r3
 801f04e:	4770      	bx	lr
